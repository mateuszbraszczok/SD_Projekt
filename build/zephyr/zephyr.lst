
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	200067a0 	.word	0x200067a0
   4:	00015cb1 	.word	0x00015cb1

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   8:	0002ce7d 	.word	0x0002ce7d
   c:	00015c69 	.word	0x00015c69
  10:	00015c69 	.word	0x00015c69
	(void)memset(res + 3, 0, 13);
  14:	00015c69 	.word	0x00015c69
  18:	00015c69 	.word	0x00015c69
	...

	err = internal_encrypt_le(irk, res, res);
	if (err) {
  2c:	000152cd 	.word	0x000152cd
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
  30:	00015c69 	.word	0x00015c69
  34:	00000000 	.word	0x00000000
  38:	00015275 	.word	0x00015275
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
  3c:	00015c69 	.word	0x00015c69

00000040 <_irq_vector_table>:
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
  40:	000153b9 000302b5 000153b9 000153b9     .S.......S...S..
  50:	000153b9 000153b9 000153b9 000153b9     .S...S...S...S..
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
  60:	0003027d 000153b9 000153b9 0003029b     }....S...S......
	}

	return api->pin_configure(port, pin, flags);
  70:	000153b9 000153b9 000153b9 000153b9     .S...S...S...S..
	if (IS_ENABLED(CONFIG_DK_LIBRARY_DYNAMIC_BUTTON_HANDLERS)) {
		k_mutex_init(&button_handler_mut);
	}

	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
		button_devs[i] = device_get_binding(button_pins[i].port);
  80:	000153b9 000153b9 000153b9 000153b9     .S...S...S...S..
		if (!button_devs[i]) {
  90:	000153b9 000153b9 000153b9 000153b9     .S...S...S...S..
	const struct gpio_driver_config *const cfg =
  a0:	000153b9 000153b9 000153b9 000153b9     .S...S...S...S..
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
  b0:	000153b9 000153b9 000153b9 000153b9     .S...S...S...S..

		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
					GPIO_INPUT | flags);

		if (err) {
			LOG_ERR("Cannot configure button gpio");
  c0:	000153b9 000153b9 000153b9 000153b9     .S...S...S...S..
  d0:	000153b9 000153b9 000153b9 000153b9     .S...S...S...S..
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
  e0:	000153b9 000153b9 000153b9 000153b9     .S...S...S...S..
  f0:	000153b9 000153b9 000153b9 000153b9     .S...S...S...S..

Disassembly of section text:

00000100 <memchr>:
	return api->pin_interrupt_configure(port, pin, mode, trig);
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
		/* Module starts in scanning mode and will switch to
		 * callback mode if no button is pressed.
		 */
		err = gpio_pin_interrupt_configure(button_devs[i],
			button_pins[i].number, GPIO_INT_DISABLE);
		if (err) {
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
			LOG_ERR("Cannot disable callbacks()");
			return err;
		}

		pin_mask |= BIT(button_pins[i].number);
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
		err = gpio_pin_interrupt_configure(button_devs[i],
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
	const struct gpio_driver_api *api =
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
			LOG_ERR("Cannot disable callbacks()");
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
	callback->pin_mask = pin_mask;
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
	}

	gpio_init_callback(&gpio_cb, button_pressed, pin_mask);

	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
		err = gpio_add_callback(button_devs[i], &gpio_cb);
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
     17a:	bf06      	itte	eq
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
		if (err) {
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
		return -ENOTSUP;
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
			LOG_ERR("Cannot add callback");
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
			return err;
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
		}
	}

	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2

	state = STATE_SCANNING;
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0

	k_work_schedule(&buttons_scan, K_NO_WAIT);
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21

	dk_read_buttons(NULL, NULL);
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9a>

	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0

	return 0;
}
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x86>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf4>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <CONFIG_BT_HCI_TX_STACK_SIZE+0x150>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <CONFIG_BT_HCI_TX_STACK_SIZE+0x7c>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <CONFIG_BT_HCI_TX_STACK_SIZE+0xda>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <CONFIG_BT_HCI_TX_STACK_SIZE+0x13a>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <CONFIG_BT_HCI_TX_STACK_SIZE+0x110>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <CONFIG_BT_HCI_TX_STACK_SIZE+0x110>
     93a:	e712      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>

0000093c <__aeabi_d2f>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     944:	bf24      	itt	cs
     946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     94a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     94e:	d90d      	bls.n	96c <__aeabi_d2f+0x30>
     950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     964:	bf08      	it	eq
     966:	f020 0001 	biceq.w	r0, r0, #1
     96a:	4770      	bx	lr
     96c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     970:	d121      	bne.n	9b6 <__aeabi_d2f+0x7a>
     972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     976:	bfbc      	itt	lt
     978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     97c:	4770      	bxlt	lr
     97e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     982:	ea4f 5252 	mov.w	r2, r2, lsr #21
     986:	f1c2 0218 	rsb	r2, r2, #24
     98a:	f1c2 0c20 	rsb	ip, r2, #32
     98e:	fa10 f30c 	lsls.w	r3, r0, ip
     992:	fa20 f002 	lsr.w	r0, r0, r2
     996:	bf18      	it	ne
     998:	f040 0001 	orrne.w	r0, r0, #1
     99c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     9a4:	fa03 fc0c 	lsl.w	ip, r3, ip
     9a8:	ea40 000c 	orr.w	r0, r0, ip
     9ac:	fa23 f302 	lsr.w	r3, r3, r2
     9b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9b4:	e7cc      	b.n	950 <__aeabi_d2f+0x14>
     9b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     9ba:	d107      	bne.n	9cc <__aeabi_d2f+0x90>
     9bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9c0:	bf1e      	ittt	ne
     9c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9ca:	4770      	bxne	lr
     9cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <__aeabi_uldivmod>:
     9dc:	b953      	cbnz	r3, 9f4 <__aeabi_uldivmod+0x18>
     9de:	b94a      	cbnz	r2, 9f4 <__aeabi_uldivmod+0x18>
     9e0:	2900      	cmp	r1, #0
     9e2:	bf08      	it	eq
     9e4:	2800      	cmpeq	r0, #0
     9e6:	bf1c      	itt	ne
     9e8:	f04f 31ff 	movne.w	r1, #4294967295
     9ec:	f04f 30ff 	movne.w	r0, #4294967295
     9f0:	f000 b96c 	b.w	ccc <__aeabi_idiv0>
     9f4:	f1ad 0c08 	sub.w	ip, sp, #8
     9f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9fc:	f000 f806 	bl	a0c <__udivmoddi4>
     a00:	f8dd e004 	ldr.w	lr, [sp, #4]
     a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a08:	b004      	add	sp, #16
     a0a:	4770      	bx	lr

00000a0c <__udivmoddi4>:
     a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a10:	9e08      	ldr	r6, [sp, #32]
     a12:	460d      	mov	r5, r1
     a14:	4604      	mov	r4, r0
     a16:	468e      	mov	lr, r1
     a18:	2b00      	cmp	r3, #0
     a1a:	f040 8082 	bne.w	b22 <__data_size+0x72>
     a1e:	428a      	cmp	r2, r1
     a20:	4617      	mov	r7, r2
     a22:	d946      	bls.n	ab2 <__data_size+0x2>
     a24:	fab2 f282 	clz	r2, r2
     a28:	b14a      	cbz	r2, a3e <__udivmoddi4+0x32>
     a2a:	f1c2 0120 	rsb	r1, r2, #32
     a2e:	fa05 f302 	lsl.w	r3, r5, r2
     a32:	fa20 f101 	lsr.w	r1, r0, r1
     a36:	4097      	lsls	r7, r2
     a38:	ea41 0e03 	orr.w	lr, r1, r3
     a3c:	4094      	lsls	r4, r2
     a3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     a42:	0c23      	lsrs	r3, r4, #16
     a44:	fbbe fcf8 	udiv	ip, lr, r8
     a48:	b2b9      	uxth	r1, r7
     a4a:	fb08 ee1c 	mls	lr, r8, ip, lr
     a4e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     a52:	fb0c f001 	mul.w	r0, ip, r1
     a56:	4298      	cmp	r0, r3
     a58:	d90a      	bls.n	a70 <__udivmoddi4+0x64>
     a5a:	18fb      	adds	r3, r7, r3
     a5c:	f10c 35ff 	add.w	r5, ip, #4294967295
     a60:	f080 8116 	bcs.w	c90 <__data_size+0x1e0>
     a64:	4298      	cmp	r0, r3
     a66:	f240 8113 	bls.w	c90 <__data_size+0x1e0>
     a6a:	f1ac 0c02 	sub.w	ip, ip, #2
     a6e:	443b      	add	r3, r7
     a70:	1a1b      	subs	r3, r3, r0
     a72:	b2a4      	uxth	r4, r4
     a74:	fbb3 f0f8 	udiv	r0, r3, r8
     a78:	fb08 3310 	mls	r3, r8, r0, r3
     a7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     a80:	fb00 f101 	mul.w	r1, r0, r1
     a84:	42a1      	cmp	r1, r4
     a86:	d909      	bls.n	a9c <__udivmoddi4+0x90>
     a88:	193c      	adds	r4, r7, r4
     a8a:	f100 33ff 	add.w	r3, r0, #4294967295
     a8e:	f080 8101 	bcs.w	c94 <__data_size+0x1e4>
     a92:	42a1      	cmp	r1, r4
     a94:	f240 80fe 	bls.w	c94 <__data_size+0x1e4>
     a98:	3802      	subs	r0, #2
     a9a:	443c      	add	r4, r7
     a9c:	1a64      	subs	r4, r4, r1
     a9e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     aa2:	2100      	movs	r1, #0
     aa4:	b11e      	cbz	r6, aae <__udivmoddi4+0xa2>
     aa6:	40d4      	lsrs	r4, r2
     aa8:	2300      	movs	r3, #0
     aaa:	e9c6 4300 	strd	r4, r3, [r6]
     aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ab2:	b902      	cbnz	r2, ab6 <__data_size+0x6>
     ab4:	deff      	udf	#255	; 0xff
     ab6:	fab2 f282 	clz	r2, r2
     aba:	2a00      	cmp	r2, #0
     abc:	d14f      	bne.n	b5e <__data_size+0xae>
     abe:	1bcb      	subs	r3, r1, r7
     ac0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ac4:	fa1f f887 	uxth.w	r8, r7
     ac8:	2101      	movs	r1, #1
     aca:	fbb3 fcfe 	udiv	ip, r3, lr
     ace:	0c25      	lsrs	r5, r4, #16
     ad0:	fb0e 331c 	mls	r3, lr, ip, r3
     ad4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     ad8:	fb08 f30c 	mul.w	r3, r8, ip
     adc:	42ab      	cmp	r3, r5
     ade:	d907      	bls.n	af0 <__data_size+0x40>
     ae0:	197d      	adds	r5, r7, r5
     ae2:	f10c 30ff 	add.w	r0, ip, #4294967295
     ae6:	d202      	bcs.n	aee <__data_size+0x3e>
     ae8:	42ab      	cmp	r3, r5
     aea:	f200 80e7 	bhi.w	cbc <__data_size+0x20c>
     aee:	4684      	mov	ip, r0
     af0:	1aed      	subs	r5, r5, r3
     af2:	b2a3      	uxth	r3, r4
     af4:	fbb5 f0fe 	udiv	r0, r5, lr
     af8:	fb0e 5510 	mls	r5, lr, r0, r5
     afc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     b00:	fb08 f800 	mul.w	r8, r8, r0
     b04:	45a0      	cmp	r8, r4
     b06:	d907      	bls.n	b18 <__data_size+0x68>
     b08:	193c      	adds	r4, r7, r4
     b0a:	f100 33ff 	add.w	r3, r0, #4294967295
     b0e:	d202      	bcs.n	b16 <__data_size+0x66>
     b10:	45a0      	cmp	r8, r4
     b12:	f200 80d7 	bhi.w	cc4 <__data_size+0x214>
     b16:	4618      	mov	r0, r3
     b18:	eba4 0408 	sub.w	r4, r4, r8
     b1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b20:	e7c0      	b.n	aa4 <__udivmoddi4+0x98>
     b22:	428b      	cmp	r3, r1
     b24:	d908      	bls.n	b38 <__data_size+0x88>
     b26:	2e00      	cmp	r6, #0
     b28:	f000 80af 	beq.w	c8a <__data_size+0x1da>
     b2c:	2100      	movs	r1, #0
     b2e:	e9c6 0500 	strd	r0, r5, [r6]
     b32:	4608      	mov	r0, r1
     b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b38:	fab3 f183 	clz	r1, r3
     b3c:	2900      	cmp	r1, #0
     b3e:	d14b      	bne.n	bd8 <__data_size+0x128>
     b40:	42ab      	cmp	r3, r5
     b42:	d302      	bcc.n	b4a <__data_size+0x9a>
     b44:	4282      	cmp	r2, r0
     b46:	f200 80b7 	bhi.w	cb8 <__data_size+0x208>
     b4a:	1a84      	subs	r4, r0, r2
     b4c:	eb65 0303 	sbc.w	r3, r5, r3
     b50:	2001      	movs	r0, #1
     b52:	469e      	mov	lr, r3
     b54:	2e00      	cmp	r6, #0
     b56:	d0aa      	beq.n	aae <__udivmoddi4+0xa2>
     b58:	e9c6 4e00 	strd	r4, lr, [r6]
     b5c:	e7a7      	b.n	aae <__udivmoddi4+0xa2>
     b5e:	f1c2 0c20 	rsb	ip, r2, #32
     b62:	fa01 f302 	lsl.w	r3, r1, r2
     b66:	4097      	lsls	r7, r2
     b68:	fa20 f00c 	lsr.w	r0, r0, ip
     b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b70:	fa21 fc0c 	lsr.w	ip, r1, ip
     b74:	4318      	orrs	r0, r3
     b76:	fbbc f1fe 	udiv	r1, ip, lr
     b7a:	0c05      	lsrs	r5, r0, #16
     b7c:	fb0e cc11 	mls	ip, lr, r1, ip
     b80:	fa1f f887 	uxth.w	r8, r7
     b84:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     b88:	fb01 f308 	mul.w	r3, r1, r8
     b8c:	42ab      	cmp	r3, r5
     b8e:	fa04 f402 	lsl.w	r4, r4, r2
     b92:	d909      	bls.n	ba8 <__data_size+0xf8>
     b94:	197d      	adds	r5, r7, r5
     b96:	f101 3cff 	add.w	ip, r1, #4294967295
     b9a:	f080 808b 	bcs.w	cb4 <__data_size+0x204>
     b9e:	42ab      	cmp	r3, r5
     ba0:	f240 8088 	bls.w	cb4 <__data_size+0x204>
     ba4:	3902      	subs	r1, #2
     ba6:	443d      	add	r5, r7
     ba8:	1aeb      	subs	r3, r5, r3
     baa:	b285      	uxth	r5, r0
     bac:	fbb3 f0fe 	udiv	r0, r3, lr
     bb0:	fb0e 3310 	mls	r3, lr, r0, r3
     bb4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     bb8:	fb00 f308 	mul.w	r3, r0, r8
     bbc:	42ab      	cmp	r3, r5
     bbe:	d907      	bls.n	bd0 <__data_size+0x120>
     bc0:	197d      	adds	r5, r7, r5
     bc2:	f100 3cff 	add.w	ip, r0, #4294967295
     bc6:	d271      	bcs.n	cac <__data_size+0x1fc>
     bc8:	42ab      	cmp	r3, r5
     bca:	d96f      	bls.n	cac <__data_size+0x1fc>
     bcc:	3802      	subs	r0, #2
     bce:	443d      	add	r5, r7
     bd0:	1aeb      	subs	r3, r5, r3
     bd2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     bd6:	e778      	b.n	aca <__data_size+0x1a>
     bd8:	f1c1 0c20 	rsb	ip, r1, #32
     bdc:	408b      	lsls	r3, r1
     bde:	fa22 f70c 	lsr.w	r7, r2, ip
     be2:	431f      	orrs	r7, r3
     be4:	fa20 f40c 	lsr.w	r4, r0, ip
     be8:	fa05 f301 	lsl.w	r3, r5, r1
     bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     bf0:	fa25 f50c 	lsr.w	r5, r5, ip
     bf4:	431c      	orrs	r4, r3
     bf6:	0c23      	lsrs	r3, r4, #16
     bf8:	fbb5 f9fe 	udiv	r9, r5, lr
     bfc:	fa1f f887 	uxth.w	r8, r7
     c00:	fb0e 5519 	mls	r5, lr, r9, r5
     c04:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     c08:	fb09 fa08 	mul.w	sl, r9, r8
     c0c:	45aa      	cmp	sl, r5
     c0e:	fa02 f201 	lsl.w	r2, r2, r1
     c12:	fa00 f301 	lsl.w	r3, r0, r1
     c16:	d908      	bls.n	c2a <__data_size+0x17a>
     c18:	197d      	adds	r5, r7, r5
     c1a:	f109 30ff 	add.w	r0, r9, #4294967295
     c1e:	d247      	bcs.n	cb0 <__data_size+0x200>
     c20:	45aa      	cmp	sl, r5
     c22:	d945      	bls.n	cb0 <__data_size+0x200>
     c24:	f1a9 0902 	sub.w	r9, r9, #2
     c28:	443d      	add	r5, r7
     c2a:	eba5 050a 	sub.w	r5, r5, sl
     c2e:	b2a4      	uxth	r4, r4
     c30:	fbb5 f0fe 	udiv	r0, r5, lr
     c34:	fb0e 5510 	mls	r5, lr, r0, r5
     c38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     c3c:	fb00 f808 	mul.w	r8, r0, r8
     c40:	45a0      	cmp	r8, r4
     c42:	d907      	bls.n	c54 <__data_size+0x1a4>
     c44:	193c      	adds	r4, r7, r4
     c46:	f100 35ff 	add.w	r5, r0, #4294967295
     c4a:	d22d      	bcs.n	ca8 <__data_size+0x1f8>
     c4c:	45a0      	cmp	r8, r4
     c4e:	d92b      	bls.n	ca8 <__data_size+0x1f8>
     c50:	3802      	subs	r0, #2
     c52:	443c      	add	r4, r7
     c54:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     c58:	eba4 0408 	sub.w	r4, r4, r8
     c5c:	fba0 8902 	umull	r8, r9, r0, r2
     c60:	454c      	cmp	r4, r9
     c62:	46c6      	mov	lr, r8
     c64:	464d      	mov	r5, r9
     c66:	d319      	bcc.n	c9c <__data_size+0x1ec>
     c68:	d016      	beq.n	c98 <__data_size+0x1e8>
     c6a:	b15e      	cbz	r6, c84 <__data_size+0x1d4>
     c6c:	ebb3 020e 	subs.w	r2, r3, lr
     c70:	eb64 0405 	sbc.w	r4, r4, r5
     c74:	fa04 fc0c 	lsl.w	ip, r4, ip
     c78:	40ca      	lsrs	r2, r1
     c7a:	ea4c 0202 	orr.w	r2, ip, r2
     c7e:	40cc      	lsrs	r4, r1
     c80:	e9c6 2400 	strd	r2, r4, [r6]
     c84:	2100      	movs	r1, #0
     c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c8a:	4631      	mov	r1, r6
     c8c:	4630      	mov	r0, r6
     c8e:	e70e      	b.n	aae <__udivmoddi4+0xa2>
     c90:	46ac      	mov	ip, r5
     c92:	e6ed      	b.n	a70 <__udivmoddi4+0x64>
     c94:	4618      	mov	r0, r3
     c96:	e701      	b.n	a9c <__udivmoddi4+0x90>
     c98:	4543      	cmp	r3, r8
     c9a:	d2e6      	bcs.n	c6a <__data_size+0x1ba>
     c9c:	ebb8 0e02 	subs.w	lr, r8, r2
     ca0:	eb69 0507 	sbc.w	r5, r9, r7
     ca4:	3801      	subs	r0, #1
     ca6:	e7e0      	b.n	c6a <__data_size+0x1ba>
     ca8:	4628      	mov	r0, r5
     caa:	e7d3      	b.n	c54 <__data_size+0x1a4>
     cac:	4660      	mov	r0, ip
     cae:	e78f      	b.n	bd0 <__data_size+0x120>
     cb0:	4681      	mov	r9, r0
     cb2:	e7ba      	b.n	c2a <__data_size+0x17a>
     cb4:	4661      	mov	r1, ip
     cb6:	e777      	b.n	ba8 <__data_size+0xf8>
     cb8:	4608      	mov	r0, r1
     cba:	e74b      	b.n	b54 <__data_size+0xa4>
     cbc:	f1ac 0c02 	sub.w	ip, ip, #2
     cc0:	443d      	add	r5, r7
     cc2:	e715      	b.n	af0 <__data_size+0x40>
     cc4:	3802      	subs	r0, #2
     cc6:	443c      	add	r4, r7
     cc8:	e726      	b.n	b18 <__data_size+0x68>
     cca:	bf00      	nop

00000ccc <__aeabi_idiv0>:
     ccc:	4770      	bx	lr
     cce:	bf00      	nop

00000cd0 <__gedf2>:
     cd0:	f04f 3cff 	mov.w	ip, #4294967295
     cd4:	e006      	b.n	ce4 <__cmpdf2+0x4>
     cd6:	bf00      	nop

00000cd8 <__ledf2>:
     cd8:	f04f 0c01 	mov.w	ip, #1
     cdc:	e002      	b.n	ce4 <__cmpdf2+0x4>
     cde:	bf00      	nop

00000ce0 <__cmpdf2>:
     ce0:	f04f 0c01 	mov.w	ip, #1
     ce4:	f84d cd04 	str.w	ip, [sp, #-4]!
     ce8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     cec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     cf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     cf4:	bf18      	it	ne
     cf6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     cfa:	d01b      	beq.n	d34 <__cmpdf2+0x54>
     cfc:	b001      	add	sp, #4
     cfe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     d02:	bf0c      	ite	eq
     d04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     d08:	ea91 0f03 	teqne	r1, r3
     d0c:	bf02      	ittt	eq
     d0e:	ea90 0f02 	teqeq	r0, r2
     d12:	2000      	moveq	r0, #0
     d14:	4770      	bxeq	lr
     d16:	f110 0f00 	cmn.w	r0, #0
     d1a:	ea91 0f03 	teq	r1, r3
     d1e:	bf58      	it	pl
     d20:	4299      	cmppl	r1, r3
     d22:	bf08      	it	eq
     d24:	4290      	cmpeq	r0, r2
     d26:	bf2c      	ite	cs
     d28:	17d8      	asrcs	r0, r3, #31
     d2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     d2e:	f040 0001 	orr.w	r0, r0, #1
     d32:	4770      	bx	lr
     d34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     d38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     d3c:	d102      	bne.n	d44 <__cmpdf2+0x64>
     d3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     d42:	d107      	bne.n	d54 <__cmpdf2+0x74>
     d44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     d48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     d4c:	d1d6      	bne.n	cfc <__cmpdf2+0x1c>
     d4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     d52:	d0d3      	beq.n	cfc <__cmpdf2+0x1c>
     d54:	f85d 0b04 	ldr.w	r0, [sp], #4
     d58:	4770      	bx	lr
     d5a:	bf00      	nop

00000d5c <__aeabi_cdrcmple>:
     d5c:	4684      	mov	ip, r0
     d5e:	4610      	mov	r0, r2
     d60:	4662      	mov	r2, ip
     d62:	468c      	mov	ip, r1
     d64:	4619      	mov	r1, r3
     d66:	4663      	mov	r3, ip
     d68:	e000      	b.n	d6c <__aeabi_cdcmpeq>
     d6a:	bf00      	nop

00000d6c <__aeabi_cdcmpeq>:
     d6c:	b501      	push	{r0, lr}
     d6e:	f7ff ffb7 	bl	ce0 <__cmpdf2>
     d72:	2800      	cmp	r0, #0
     d74:	bf48      	it	mi
     d76:	f110 0f00 	cmnmi.w	r0, #0
     d7a:	bd01      	pop	{r0, pc}

00000d7c <__aeabi_dcmpeq>:
     d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
     d80:	f7ff fff4 	bl	d6c <__aeabi_cdcmpeq>
     d84:	bf0c      	ite	eq
     d86:	2001      	moveq	r0, #1
     d88:	2000      	movne	r0, #0
     d8a:	f85d fb08 	ldr.w	pc, [sp], #8
     d8e:	bf00      	nop

00000d90 <__aeabi_dcmplt>:
     d90:	f84d ed08 	str.w	lr, [sp, #-8]!
     d94:	f7ff ffea 	bl	d6c <__aeabi_cdcmpeq>
     d98:	bf34      	ite	cc
     d9a:	2001      	movcc	r0, #1
     d9c:	2000      	movcs	r0, #0
     d9e:	f85d fb08 	ldr.w	pc, [sp], #8
     da2:	bf00      	nop

00000da4 <__aeabi_dcmple>:
     da4:	f84d ed08 	str.w	lr, [sp, #-8]!
     da8:	f7ff ffe0 	bl	d6c <__aeabi_cdcmpeq>
     dac:	bf94      	ite	ls
     dae:	2001      	movls	r0, #1
     db0:	2000      	movhi	r0, #0
     db2:	f85d fb08 	ldr.w	pc, [sp], #8
     db6:	bf00      	nop

00000db8 <__aeabi_dcmpge>:
     db8:	f84d ed08 	str.w	lr, [sp, #-8]!
     dbc:	f7ff ffce 	bl	d5c <__aeabi_cdrcmple>
     dc0:	bf94      	ite	ls
     dc2:	2001      	movls	r0, #1
     dc4:	2000      	movhi	r0, #0
     dc6:	f85d fb08 	ldr.w	pc, [sp], #8
     dca:	bf00      	nop

00000dcc <__aeabi_dcmpgt>:
     dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
     dd0:	f7ff ffc4 	bl	d5c <__aeabi_cdrcmple>
     dd4:	bf34      	ite	cc
     dd6:	2001      	movcc	r0, #1
     dd8:	2000      	movcs	r0, #0
     dda:	f85d fb08 	ldr.w	pc, [sp], #8
     dde:	bf00      	nop

00000de0 <__aeabi_dcmpun>:
     de0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     de4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     de8:	d102      	bne.n	df0 <__aeabi_dcmpun+0x10>
     dea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     dee:	d10a      	bne.n	e06 <__aeabi_dcmpun+0x26>
     df0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     df4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     df8:	d102      	bne.n	e00 <__aeabi_dcmpun+0x20>
     dfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     dfe:	d102      	bne.n	e06 <__aeabi_dcmpun+0x26>
     e00:	f04f 0000 	mov.w	r0, #0
     e04:	4770      	bx	lr
     e06:	f04f 0001 	mov.w	r0, #1
     e0a:	4770      	bx	lr

00000e0c <__aeabi_d2iz>:
     e0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     e10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     e14:	d215      	bcs.n	e42 <__aeabi_d2iz+0x36>
     e16:	d511      	bpl.n	e3c <__aeabi_d2iz+0x30>
     e18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     e1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     e20:	d912      	bls.n	e48 <__aeabi_d2iz+0x3c>
     e22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     e2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     e2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     e32:	fa23 f002 	lsr.w	r0, r3, r2
     e36:	bf18      	it	ne
     e38:	4240      	negne	r0, r0
     e3a:	4770      	bx	lr
     e3c:	f04f 0000 	mov.w	r0, #0
     e40:	4770      	bx	lr
     e42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     e46:	d105      	bne.n	e54 <__aeabi_d2iz+0x48>
     e48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     e4c:	bf08      	it	eq
     e4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     e52:	4770      	bx	lr
     e54:	f04f 0000 	mov.w	r0, #0
     e58:	4770      	bx	lr
     e5a:	bf00      	nop

00000e5c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e5e:	4615      	mov	r5, r2
     e60:	4a0a      	ldr	r2, [pc, #40]	; (e8c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
     e62:	461c      	mov	r4, r3
     e64:	6856      	ldr	r6, [r2, #4]
     e66:	b12e      	cbz	r6, e74 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     e68:	b001      	add	sp, #4
     e6a:	462a      	mov	r2, r5
     e6c:	46b4      	mov	ip, r6
     e6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     e72:	4760      	bx	ip
     e74:	2000      	movs	r0, #0
     e76:	f88d 0000 	strb.w	r0, [sp]
     e7a:	4668      	mov	r0, sp
     e7c:	f00b f936 	bl	c0ec <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     e80:	f89d 0000 	ldrb.w	r0, [sp]
     e84:	1a28      	subs	r0, r5, r0
     e86:	7020      	strb	r0, [r4, #0]
     e88:	2000      	movs	r0, #0
     e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e8c:	20000000 	.word	0x20000000

00000e90 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     e90:	4801      	ldr	r0, [pc, #4]	; (e98 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     e92:	7800      	ldrb	r0, [r0, #0]
     e94:	4770      	bx	lr
     e96:	0000      	.short	0x0000
     e98:	20000008 	.word	0x20000008

00000e9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     e9c:	4905      	ldr	r1, [pc, #20]	; (eb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     e9e:	780a      	ldrb	r2, [r1, #0]
     ea0:	4290      	cmp	r0, r2
     ea2:	d301      	bcc.n	ea8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     ea4:	2000      	movs	r0, #0
     ea6:	4770      	bx	lr
     ea8:	6849      	ldr	r1, [r1, #4]
     eaa:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     eae:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     eb2:	4770      	bx	lr
     eb4:	20000008 	.word	0x20000008
     eb8:	b570      	push	{r4, r5, r6, lr}
     eba:	4605      	mov	r5, r0
     ebc:	2a20      	cmp	r2, #32
     ebe:	d027      	beq.n	f10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     ec0:	4819      	ldr	r0, [pc, #100]	; (f28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
     ec2:	4c1a      	ldr	r4, [pc, #104]	; (f2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
     ec4:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     ec8:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     ecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     ed0:	2920      	cmp	r1, #32
     ed2:	d022      	beq.n	f1a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
     ed4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     ed8:	7840      	ldrb	r0, [r0, #1]
     eda:	784c      	ldrb	r4, [r1, #1]
     edc:	7048      	strb	r0, [r1, #1]
     ede:	4620      	mov	r0, r4
     ee0:	4601      	mov	r1, r0
     ee2:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     ee6:	4291      	cmp	r1, r2
     ee8:	7005      	strb	r5, [r0, #0]
     eea:	7840      	ldrb	r0, [r0, #1]
     eec:	d1f8      	bne.n	ee0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     eee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     ef2:	2a20      	cmp	r2, #32
     ef4:	bf1a      	itte	ne
     ef6:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     efa:	7054      	strbne	r4, [r2, #1]
     efc:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     f00:	2220      	movs	r2, #32
     f02:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     f06:	f88c 2001 	strb.w	r2, [ip, #1]
     f0a:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     f0e:	bd70      	pop	{r4, r5, r6, pc}
     f10:	f240 217e 	movw	r1, #638	; 0x27e
     f14:	2070      	movs	r0, #112	; 0x70
     f16:	f003 f96b 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f1a:	f893 4020 	ldrb.w	r4, [r3, #32]
     f1e:	7840      	ldrb	r0, [r0, #1]
     f20:	f883 0020 	strb.w	r0, [r3, #32]
     f24:	e7db      	b.n	ede <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     f26:	0000      	.short	0x0000
     f28:	20001274 	.word	0x20001274
     f2c:	200012f4 	.word	0x200012f4
     f30:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f34:	b085      	sub	sp, #20
     f36:	4615      	mov	r5, r2
     f38:	460c      	mov	r4, r1
     f3a:	f002 f8db 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f3e:	4428      	add	r0, r5
     f40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f44:	9002      	str	r0, [sp, #8]
     f46:	6821      	ldr	r1, [r4, #0]
     f48:	1a08      	subs	r0, r1, r0
     f4a:	0200      	lsls	r0, r0, #8
     f4c:	17c1      	asrs	r1, r0, #31
     f4e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     f52:	1200      	asrs	r0, r0, #8
     f54:	2800      	cmp	r0, #0
     f56:	f300 80d5 	bgt.w	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
     f5a:	48ac      	ldr	r0, [pc, #688]	; (120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>)
     f5c:	9f08      	ldr	r7, [sp, #32]
     f5e:	4eac      	ldr	r6, [pc, #688]	; (1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>)
     f60:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     f64:	9003      	str	r0, [sp, #12]
     f66:	f890 5020 	ldrb.w	r5, [r0, #32]
     f6a:	2020      	movs	r0, #32
     f6c:	46e9      	mov	r9, sp
     f6e:	f10d 0804 	add.w	r8, sp, #4
     f72:	f88d 0000 	strb.w	r0, [sp]
     f76:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     f7a:	2d20      	cmp	r5, #32
     f7c:	bf18      	it	ne
     f7e:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     f82:	d025      	beq.n	fd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     f84:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     f88:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     f8c:	6822      	ldr	r2, [r4, #0]
     f8e:	68c1      	ldr	r1, [r0, #12]
     f90:	1a51      	subs	r1, r2, r1
     f92:	0209      	lsls	r1, r1, #8
     f94:	17ca      	asrs	r2, r1, #31
     f96:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     f9a:	3008      	adds	r0, #8
     f9c:	1209      	asrs	r1, r1, #8
     f9e:	d417      	bmi.n	fd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     fa0:	8961      	ldrh	r1, [r4, #10]
     fa2:	b171      	cbz	r1, fc2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
     fa4:	8941      	ldrh	r1, [r0, #10]
     fa6:	b961      	cbnz	r1, fc2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
     fa8:	f000 fdb4 	bl	1b14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78c>
     fac:	f002 f8a2 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     fb0:	6821      	ldr	r1, [r4, #0]
     fb2:	1a08      	subs	r0, r1, r0
     fb4:	0200      	lsls	r0, r0, #8
     fb6:	17c1      	asrs	r1, r0, #31
     fb8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     fbc:	1200      	asrs	r0, r0, #8
     fbe:	2833      	cmp	r0, #51	; 0x33
     fc0:	db06      	blt.n	fd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     fc2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     fc6:	f889 5000 	strb.w	r5, [r9]
     fca:	7845      	ldrb	r5, [r0, #1]
     fcc:	2d20      	cmp	r5, #32
     fce:	d1d9      	bne.n	f84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
     fd0:	f899 0000 	ldrb.w	r0, [r9]
     fd4:	f888 0000 	strb.w	r0, [r8]
     fd8:	46a1      	mov	r9, r4
     fda:	2d20      	cmp	r5, #32
     fdc:	bf1c      	itt	ne
     fde:	488d      	ldrne	r0, [pc, #564]	; (1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>)
     fe0:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     fe4:	f000 810e 	beq.w	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
     fe8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     fec:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     ff0:	f8d9 2004 	ldr.w	r2, [r9, #4]
     ff4:	f8da 1008 	ldr.w	r1, [sl, #8]
     ff8:	4648      	mov	r0, r9
     ffa:	1a89      	subs	r1, r1, r2
     ffc:	0209      	lsls	r1, r1, #8
     ffe:	17ca      	asrs	r2, r1, #31
    1000:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1004:	f10a 0708 	add.w	r7, sl, #8
    1008:	1209      	asrs	r1, r1, #8
    100a:	d415      	bmi.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    100c:	8979      	ldrh	r1, [r7, #10]
    100e:	2900      	cmp	r1, #0
    1010:	f000 80f8 	beq.w	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    1014:	8941      	ldrh	r1, [r0, #10]
    1016:	2900      	cmp	r1, #0
    1018:	f040 80f4 	bne.w	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    101c:	f000 fd7a 	bl	1b14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78c>
    1020:	f002 f868 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1024:	6839      	ldr	r1, [r7, #0]
    1026:	1a08      	subs	r0, r1, r0
    1028:	0200      	lsls	r0, r0, #8
    102a:	17c1      	asrs	r1, r0, #31
    102c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1030:	1200      	asrs	r0, r0, #8
    1032:	2833      	cmp	r0, #51	; 0x33
    1034:	f280 80e6 	bge.w	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    1038:	f888 5000 	strb.w	r5, [r8]
    103c:	f89a 1014 	ldrb.w	r1, [sl, #20]
    1040:	f899 000c 	ldrb.w	r0, [r9, #12]
    1044:	4281      	cmp	r1, r0
    1046:	d906      	bls.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    1048:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    104c:	7845      	ldrb	r5, [r0, #1]
    104e:	2d20      	cmp	r5, #32
    1050:	d1ca      	bne.n	fe8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    1052:	f000 b8d7 	b.w	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    1056:	f89d 0004 	ldrb.w	r0, [sp, #4]
    105a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    105e:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    1062:	8a68      	ldrh	r0, [r5, #18]
    1064:	68ef      	ldr	r7, [r5, #12]
    1066:	2800      	cmp	r0, #0
    1068:	d143      	bne.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    106a:	8960      	ldrh	r0, [r4, #10]
    106c:	b3e8      	cbz	r0, 10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
    106e:	68a8      	ldr	r0, [r5, #8]
    1070:	f00b f85c 	bl	c12c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1074:	8a69      	ldrh	r1, [r5, #18]
    1076:	7c2a      	ldrb	r2, [r5, #16]
    1078:	4b67      	ldr	r3, [pc, #412]	; (1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
    107a:	4411      	add	r1, r2
    107c:	1c49      	adds	r1, r1, #1
    107e:	1842      	adds	r2, r0, r1
    1080:	4298      	cmp	r0, r3
    1082:	d904      	bls.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    1084:	f240 6109 	movw	r1, #1545	; 0x609
    1088:	2070      	movs	r0, #112	; 0x70
    108a:	f003 f8b1 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    108e:	4863      	ldr	r0, [pc, #396]	; (121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>)
    1090:	4281      	cmp	r1, r0
    1092:	dd04      	ble.n	109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
    1094:	f240 610a 	movw	r1, #1546	; 0x60a
    1098:	2070      	movs	r0, #112	; 0x70
    109a:	f003 f8a9 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    109e:	4860      	ldr	r0, [pc, #384]	; (1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
    10a0:	4281      	cmp	r1, r0
    10a2:	da04      	bge.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
    10a4:	f240 610b 	movw	r1, #1547	; 0x60b
    10a8:	2070      	movs	r0, #112	; 0x70
    10aa:	f003 f8a1 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ae:	485d      	ldr	r0, [pc, #372]	; (1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>)
    10b0:	4290      	cmp	r0, r2
    10b2:	bfdc      	itt	le
    10b4:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    10b8:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    10bc:	dd05      	ble.n	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
    10be:	2a00      	cmp	r2, #0
    10c0:	bfbc      	itt	lt
    10c2:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    10c6:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    10ca:	4610      	mov	r0, r2
    10cc:	f002 f812 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    10d0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    10d4:	1a78      	subs	r0, r7, r1
    10d6:	0200      	lsls	r0, r0, #8
    10d8:	17c2      	asrs	r2, r0, #31
    10da:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    10de:	1200      	asrs	r0, r0, #8
    10e0:	2833      	cmp	r0, #51	; 0x33
    10e2:	bfb8      	it	lt
    10e4:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    10e8:	e000      	b.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
    10ea:	e002      	b.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    10ec:	bfb8      	it	lt
    10ee:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    10f2:	9802      	ldr	r0, [sp, #8]
    10f4:	1a38      	subs	r0, r7, r0
    10f6:	0200      	lsls	r0, r0, #8
    10f8:	17c1      	asrs	r1, r0, #31
    10fa:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    10fe:	1200      	asrs	r0, r0, #8
    1100:	2800      	cmp	r0, #0
    1102:	dd03      	ble.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    1104:	b009      	add	sp, #36	; 0x24
    1106:	2000      	movs	r0, #0
    1108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    110c:	e9d4 1000 	ldrd	r1, r0, [r4]
    1110:	1a40      	subs	r0, r0, r1
    1112:	4438      	add	r0, r7
    1114:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    1118:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    111c:	e9c4 1000 	strd	r1, r0, [r4]
    1120:	9803      	ldr	r0, [sp, #12]
    1122:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1126:	466f      	mov	r7, sp
    1128:	f890 5020 	ldrb.w	r5, [r0, #32]
    112c:	2020      	movs	r0, #32
    112e:	f10d 0a04 	add.w	sl, sp, #4
    1132:	f88d 0000 	strb.w	r0, [sp]
    1136:	2d20      	cmp	r5, #32
    1138:	bf1c      	itt	ne
    113a:	4836      	ldrne	r0, [pc, #216]	; (1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>)
    113c:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    1140:	d025      	beq.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
    1142:	bf00      	nop
    1144:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1148:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    114c:	6822      	ldr	r2, [r4, #0]
    114e:	68c1      	ldr	r1, [r0, #12]
    1150:	1a51      	subs	r1, r2, r1
    1152:	0209      	lsls	r1, r1, #8
    1154:	17ca      	asrs	r2, r1, #31
    1156:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    115a:	3008      	adds	r0, #8
    115c:	1209      	asrs	r1, r1, #8
    115e:	d416      	bmi.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
    1160:	8961      	ldrh	r1, [r4, #10]
    1162:	b171      	cbz	r1, 1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
    1164:	8941      	ldrh	r1, [r0, #10]
    1166:	b961      	cbnz	r1, 1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
    1168:	f000 fcd4 	bl	1b14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78c>
    116c:	f001 ffc2 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1170:	6821      	ldr	r1, [r4, #0]
    1172:	1a08      	subs	r0, r1, r0
    1174:	0200      	lsls	r0, r0, #8
    1176:	17c1      	asrs	r1, r0, #31
    1178:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    117c:	1200      	asrs	r0, r0, #8
    117e:	2833      	cmp	r0, #51	; 0x33
    1180:	db05      	blt.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
    1182:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    1186:	703d      	strb	r5, [r7, #0]
    1188:	7845      	ldrb	r5, [r0, #1]
    118a:	2d20      	cmp	r5, #32
    118c:	d1da      	bne.n	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
    118e:	7838      	ldrb	r0, [r7, #0]
    1190:	f88a 0000 	strb.w	r0, [sl]
    1194:	4627      	mov	r7, r4
    1196:	2d20      	cmp	r5, #32
    1198:	bf1c      	itt	ne
    119a:	481e      	ldrne	r0, [pc, #120]	; (1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>)
    119c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    11a0:	d030      	beq.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11a2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    11a6:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    11aa:	6879      	ldr	r1, [r7, #4]
    11ac:	f8d9 2008 	ldr.w	r2, [r9, #8]
    11b0:	4638      	mov	r0, r7
    11b2:	1a51      	subs	r1, r2, r1
    11b4:	0209      	lsls	r1, r1, #8
    11b6:	17ca      	asrs	r2, r1, #31
    11b8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    11bc:	f109 0808 	add.w	r8, r9, #8
    11c0:	1209      	asrs	r1, r1, #8
    11c2:	d412      	bmi.n	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
    11c4:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    11c8:	b1e1      	cbz	r1, 1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11ca:	8941      	ldrh	r1, [r0, #10]
    11cc:	b9d1      	cbnz	r1, 1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11ce:	f000 fca1 	bl	1b14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78c>
    11d2:	f001 ff8f 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    11d6:	f8d8 1000 	ldr.w	r1, [r8]
    11da:	1a08      	subs	r0, r1, r0
    11dc:	0200      	lsls	r0, r0, #8
    11de:	17c1      	asrs	r1, r0, #31
    11e0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    11e4:	1200      	asrs	r0, r0, #8
    11e6:	2833      	cmp	r0, #51	; 0x33
    11e8:	da0c      	bge.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11ea:	f88a 5000 	strb.w	r5, [sl]
    11ee:	f899 0014 	ldrb.w	r0, [r9, #20]
    11f2:	7b39      	ldrb	r1, [r7, #12]
    11f4:	4288      	cmp	r0, r1
    11f6:	f67f af2e 	bls.w	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    11fa:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    11fe:	7845      	ldrb	r5, [r0, #1]
    1200:	2d20      	cmp	r5, #32
    1202:	d1ce      	bne.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
    1204:	b009      	add	sp, #36	; 0x24
    1206:	2001      	movs	r0, #1
    1208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    120c:	200012f4 	.word	0x200012f4
    1210:	20000f74 	.word	0x20000f74
    1214:	20001274 	.word	0x20001274
    1218:	1e847fff 	.word	0x1e847fff
    121c:	07a12000 	.word	0x07a12000
    1220:	f85ee000 	.word	0xf85ee000
    1224:	1e848000 	.word	0x1e848000
    1228:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    122c:	4604      	mov	r4, r0
    122e:	483c      	ldr	r0, [pc, #240]	; (1320 <CONFIG_FPROTECT_BLOCK_SIZE+0x320>)
    1230:	460e      	mov	r6, r1
    1232:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    1236:	4f3b      	ldr	r7, [pc, #236]	; (1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>)
    1238:	f890 5020 	ldrb.w	r5, [r0, #32]
    123c:	2020      	movs	r0, #32
    123e:	4698      	mov	r8, r3
    1240:	4692      	mov	sl, r2
    1242:	7010      	strb	r0, [r2, #0]
    1244:	f507 7940 	add.w	r9, r7, #768	; 0x300
    1248:	2d20      	cmp	r5, #32
    124a:	bf18      	it	ne
    124c:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1250:	d028      	beq.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    1252:	bf00      	nop
    1254:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1258:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    125c:	f100 0108 	add.w	r1, r0, #8
    1260:	68c0      	ldr	r0, [r0, #12]
    1262:	6822      	ldr	r2, [r4, #0]
    1264:	1a10      	subs	r0, r2, r0
    1266:	0200      	lsls	r0, r0, #8
    1268:	17c2      	asrs	r2, r0, #31
    126a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    126e:	1200      	asrs	r0, r0, #8
    1270:	d418      	bmi.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    1272:	8960      	ldrh	r0, [r4, #10]
    1274:	b178      	cbz	r0, 1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
    1276:	8948      	ldrh	r0, [r1, #10]
    1278:	b968      	cbnz	r0, 1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
    127a:	4608      	mov	r0, r1
    127c:	f000 fc4a 	bl	1b14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78c>
    1280:	f001 ff38 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1284:	6821      	ldr	r1, [r4, #0]
    1286:	1a08      	subs	r0, r1, r0
    1288:	0200      	lsls	r0, r0, #8
    128a:	17c1      	asrs	r1, r0, #31
    128c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1290:	1200      	asrs	r0, r0, #8
    1292:	2833      	cmp	r0, #51	; 0x33
    1294:	db06      	blt.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    1296:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    129a:	f88a 5000 	strb.w	r5, [sl]
    129e:	7845      	ldrb	r5, [r0, #1]
    12a0:	2d20      	cmp	r5, #32
    12a2:	d1d7      	bne.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    12a4:	f89a 0000 	ldrb.w	r0, [sl]
    12a8:	f888 0000 	strb.w	r0, [r8]
    12ac:	2d20      	cmp	r5, #32
    12ae:	bf18      	it	ne
    12b0:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    12b4:	d030      	beq.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
    12b6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    12ba:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    12be:	6861      	ldr	r1, [r4, #4]
    12c0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    12c4:	4620      	mov	r0, r4
    12c6:	1a51      	subs	r1, r2, r1
    12c8:	0209      	lsls	r1, r1, #8
    12ca:	17ca      	asrs	r2, r1, #31
    12cc:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    12d0:	f109 0608 	add.w	r6, r9, #8
    12d4:	1209      	asrs	r1, r1, #8
    12d6:	d410      	bmi.n	12fa <CONFIG_FPROTECT_BLOCK_SIZE+0x2fa>
    12d8:	8971      	ldrh	r1, [r6, #10]
    12da:	b1e9      	cbz	r1, 1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
    12dc:	8941      	ldrh	r1, [r0, #10]
    12de:	b9d9      	cbnz	r1, 1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
    12e0:	f000 fc18 	bl	1b14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78c>
    12e4:	f001 ff06 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    12e8:	6831      	ldr	r1, [r6, #0]
    12ea:	1a08      	subs	r0, r1, r0
    12ec:	0200      	lsls	r0, r0, #8
    12ee:	17c1      	asrs	r1, r0, #31
    12f0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    12f4:	1200      	asrs	r0, r0, #8
    12f6:	2833      	cmp	r0, #51	; 0x33
    12f8:	da0e      	bge.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
    12fa:	f888 5000 	strb.w	r5, [r8]
    12fe:	f899 0014 	ldrb.w	r0, [r9, #20]
    1302:	7b21      	ldrb	r1, [r4, #12]
    1304:	4288      	cmp	r0, r1
    1306:	d802      	bhi.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
    1308:	2000      	movs	r0, #0
    130a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    130e:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    1312:	7845      	ldrb	r5, [r0, #1]
    1314:	2d20      	cmp	r5, #32
    1316:	d1ce      	bne.n	12b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b6>
    1318:	2001      	movs	r0, #1
    131a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    131e:	0000      	.short	0x0000
    1320:	200012f4 	.word	0x200012f4
    1324:	20000f74 	.word	0x20000f74
    1328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    132c:	b098      	sub	sp, #96	; 0x60
    132e:	4616      	mov	r6, r2
    1330:	460d      	mov	r5, r1
    1332:	f04f 0800 	mov.w	r8, #0
    1336:	f04f 0b01 	mov.w	fp, #1
    133a:	f002 f95d 	bl	35f8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    133e:	4604      	mov	r4, r0
    1340:	2d01      	cmp	r5, #1
    1342:	bf18      	it	ne
    1344:	2d02      	cmpne	r5, #2
    1346:	d005      	beq.n	1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>
    1348:	f640 1194 	movw	r1, #2452	; 0x994
    134c:	f04f 0070 	mov.w	r0, #112	; 0x70
    1350:	f002 ff4e 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1354:	49f9      	ldr	r1, [pc, #996]	; (173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>)
    1356:	2001      	movs	r0, #1
    1358:	6008      	str	r0, [r1, #0]
    135a:	49f9      	ldr	r1, [pc, #996]	; (1740 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b8>)
    135c:	6889      	ldr	r1, [r1, #8]
    135e:	6008      	str	r0, [r1, #0]
    1360:	2000      	movs	r0, #0
    1362:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    1366:	900c      	str	r0, [sp, #48]	; 0x30
    1368:	1e40      	subs	r0, r0, #1
    136a:	900e      	str	r0, [sp, #56]	; 0x38
    136c:	49f5      	ldr	r1, [pc, #980]	; (1744 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3bc>)
    136e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1372:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1376:	3308      	adds	r3, #8
    1378:	af0f      	add	r7, sp, #60	; 0x3c
    137a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    137c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1380:	a80f      	add	r0, sp, #60	; 0x3c
    1382:	f000 fbc7 	bl	1b14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78c>
    1386:	900d      	str	r0, [sp, #52]	; 0x34
    1388:	48ee      	ldr	r0, [pc, #952]	; (1744 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3bc>)
    138a:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    138e:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1392:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1396:	f1b9 0f00 	cmp.w	r9, #0
    139a:	bf14      	ite	ne
    139c:	f04f 0a01 	movne.w	sl, #1
    13a0:	f04f 0a00 	moveq.w	sl, #0
    13a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    13a6:	9014      	str	r0, [sp, #80]	; 0x50
    13a8:	f1ba 0f00 	cmp.w	sl, #0
    13ac:	d009      	beq.n	13c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a>
    13ae:	48e6      	ldr	r0, [pc, #920]	; (1748 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c0>)
    13b0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    13b4:	b928      	cbnz	r0, 13c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a>
    13b6:	f002 fea3 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    13ba:	2800      	cmp	r0, #0
    13bc:	bf08      	it	eq
    13be:	2701      	moveq	r7, #1
    13c0:	d000      	beq.n	13c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c>
    13c2:	2700      	movs	r7, #0
    13c4:	48e1      	ldr	r0, [pc, #900]	; (174c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c4>)
    13c6:	2200      	movs	r2, #0
    13c8:	9215      	str	r2, [sp, #84]	; 0x54
    13ca:	7800      	ldrb	r0, [r0, #0]
    13cc:	4616      	mov	r6, r2
    13ce:	2801      	cmp	r0, #1
    13d0:	bf18      	it	ne
    13d2:	2803      	cmpne	r0, #3
    13d4:	d140      	bne.n	1458 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd0>
    13d6:	48dd      	ldr	r0, [pc, #884]	; (174c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c4>)
    13d8:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    13dc:	eba8 0009 	sub.w	r0, r8, r9
    13e0:	9015      	str	r0, [sp, #84]	; 0x54
    13e2:	45c8      	cmp	r8, r9
    13e4:	d938      	bls.n	1458 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd0>
    13e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    13e8:	ea6f 0108 	mvn.w	r1, r8
    13ec:	f8df e360 	ldr.w	lr, [pc, #864]	; 1750 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c8>
    13f0:	1858      	adds	r0, r3, r1
    13f2:	f10d 0c0c 	add.w	ip, sp, #12
    13f6:	aa17      	add	r2, sp, #92	; 0x5c
    13f8:	4573      	cmp	r3, lr
    13fa:	d904      	bls.n	1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
    13fc:	f240 6109 	movw	r1, #1545	; 0x609
    1400:	2070      	movs	r0, #112	; 0x70
    1402:	f002 fef5 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1406:	4bd3      	ldr	r3, [pc, #844]	; (1754 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3cc>)
    1408:	4299      	cmp	r1, r3
    140a:	dd04      	ble.n	1416 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e>
    140c:	f240 610a 	movw	r1, #1546	; 0x60a
    1410:	2070      	movs	r0, #112	; 0x70
    1412:	f002 feed 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1416:	4bd0      	ldr	r3, [pc, #832]	; (1758 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d0>)
    1418:	4299      	cmp	r1, r3
    141a:	da04      	bge.n	1426 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9e>
    141c:	f240 610b 	movw	r1, #1547	; 0x60b
    1420:	2070      	movs	r0, #112	; 0x70
    1422:	f002 fee5 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1426:	49cd      	ldr	r1, [pc, #820]	; (175c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d4>)
    1428:	4281      	cmp	r1, r0
    142a:	bfdc      	itt	le
    142c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1430:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1434:	dd05      	ble.n	1442 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba>
    1436:	2800      	cmp	r0, #0
    1438:	bfbc      	itt	lt
    143a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    143e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1442:	4661      	mov	r1, ip
    1444:	f001 fe72 	bl	312c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1448:	9803      	ldr	r0, [sp, #12]
    144a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    144c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1450:	9003      	str	r0, [sp, #12]
    1452:	1a08      	subs	r0, r1, r0
    1454:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1458:	2f00      	cmp	r7, #0
    145a:	bf18      	it	ne
    145c:	2632      	movne	r6, #50	; 0x32
    145e:	d104      	bne.n	146a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe2>
    1460:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1464:	2800      	cmp	r0, #0
    1466:	bf18      	it	ne
    1468:	2602      	movne	r6, #2
    146a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    146e:	d008      	beq.n	1482 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfa>
    1470:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1472:	1b00      	subs	r0, r0, r4
    1474:	0200      	lsls	r0, r0, #8
    1476:	17c1      	asrs	r1, r0, #31
    1478:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    147c:	1200      	asrs	r0, r0, #8
    147e:	2801      	cmp	r0, #1
    1480:	da02      	bge.n	1488 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100>
    1482:	2004      	movs	r0, #4
    1484:	9918      	ldr	r1, [sp, #96]	; 0x60
    1486:	e00b      	b.n	14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>
    1488:	b147      	cbz	r7, 149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    148a:	48af      	ldr	r0, [pc, #700]	; (1748 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c0>)
    148c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1490:	b120      	cbz	r0, 149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    1492:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1496:	1c06      	adds	r6, r0, #0
    1498:	bf18      	it	ne
    149a:	2602      	movne	r6, #2
    149c:	4621      	mov	r1, r4
    149e:	2001      	movs	r0, #1
    14a0:	f1b9 0f00 	cmp.w	r9, #0
    14a4:	d002      	beq.n	14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>
    14a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    14a8:	2b1e      	cmp	r3, #30
    14aa:	da02      	bge.n	14b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12a>
    14ac:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    14b0:	b113      	cbz	r3, 14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>
    14b2:	f04f 0b00 	mov.w	fp, #0
    14b6:	1e40      	subs	r0, r0, #1
    14b8:	1983      	adds	r3, r0, r6
    14ba:	48a4      	ldr	r0, [pc, #656]	; (174c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c4>)
    14bc:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    14c0:	7800      	ldrb	r0, [r0, #0]
    14c2:	9015      	str	r0, [sp, #84]	; 0x54
    14c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    14c6:	1a80      	subs	r0, r0, r2
    14c8:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    14cc:	ebac 0001 	sub.w	r0, ip, r1
    14d0:	0200      	lsls	r0, r0, #8
    14d2:	17c6      	asrs	r6, r0, #31
    14d4:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    14d8:	1200      	asrs	r0, r0, #8
    14da:	4298      	cmp	r0, r3
    14dc:	db18      	blt.n	1510 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x188>
    14de:	2a00      	cmp	r2, #0
    14e0:	bf18      	it	ne
    14e2:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    14e6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    14e8:	9705      	str	r7, [sp, #20]
    14ea:	2700      	movs	r7, #0
    14ec:	f001 ff7c 	bl	33e8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    14f0:	1a30      	subs	r0, r6, r0
    14f2:	0200      	lsls	r0, r0, #8
    14f4:	17c1      	asrs	r1, r0, #31
    14f6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    14fa:	1200      	asrs	r0, r0, #8
    14fc:	283e      	cmp	r0, #62	; 0x3e
    14fe:	da3f      	bge.n	1580 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f8>
    1500:	2d01      	cmp	r5, #1
    1502:	d020      	beq.n	1546 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1be>
    1504:	1e70      	subs	r0, r6, #1
    1506:	9905      	ldr	r1, [sp, #20]
    1508:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    150c:	b319      	cbz	r1, 1556 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ce>
    150e:	e02d      	b.n	156c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e4>
    1510:	b182      	cbz	r2, 1534 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ac>
    1512:	f1be 0f00 	cmp.w	lr, #0
    1516:	bf04      	itt	eq
    1518:	9815      	ldreq	r0, [sp, #84]	; 0x54
    151a:	2803      	cmpeq	r0, #3
    151c:	d00a      	beq.n	1534 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ac>
    151e:	b927      	cbnz	r7, 152a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a2>
    1520:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1524:	2800      	cmp	r0, #0
    1526:	bf18      	it	ne
    1528:	1e9b      	subne	r3, r3, #2
    152a:	2200      	movs	r2, #0
    152c:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    1530:	4690      	mov	r8, r2
    1532:	e7c7      	b.n	14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>
    1534:	bb07      	cbnz	r7, 1578 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f0>
    1536:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    153a:	b1e8      	cbz	r0, 1578 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f0>
    153c:	2000      	movs	r0, #0
    153e:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    1542:	1e9b      	subs	r3, r3, #2
    1544:	e7be      	b.n	14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>
    1546:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    154a:	d120      	bne.n	158e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x206>
    154c:	f640 110d 	movw	r1, #2317	; 0x90d
    1550:	2070      	movs	r0, #112	; 0x70
    1552:	f002 fe4d 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1556:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    155a:	d007      	beq.n	156c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e4>
    155c:	1a21      	subs	r1, r4, r0
    155e:	0209      	lsls	r1, r1, #8
    1560:	17ca      	asrs	r2, r1, #31
    1562:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1566:	1209      	asrs	r1, r1, #8
    1568:	2904      	cmp	r1, #4
    156a:	dd03      	ble.n	1574 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ec>
    156c:	4604      	mov	r4, r0
    156e:	f001 ff41 	bl	33f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1572:	e00c      	b.n	158e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x206>
    1574:	2900      	cmp	r1, #0
    1576:	dd0a      	ble.n	158e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x206>
    1578:	b01b      	add	sp, #108	; 0x6c
    157a:	2000      	movs	r0, #0
    157c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1580:	1e70      	subs	r0, r6, #1
    1582:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1586:	4620      	mov	r0, r4
    1588:	f001 ff34 	bl	33f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    158c:	4657      	mov	r7, sl
    158e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1592:	d024      	beq.n	15de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x256>
    1594:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1596:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1598:	1b00      	subs	r0, r0, r4
    159a:	1b1b      	subs	r3, r3, r4
    159c:	4a70      	ldr	r2, [pc, #448]	; (1760 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d8>)
    159e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    15a6:	4583      	cmp	fp, r0
    15a8:	bf98      	it	ls
    15aa:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    15ae:	d2e3      	bcs.n	1578 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f0>
    15b0:	429a      	cmp	r2, r3
    15b2:	d3e1      	bcc.n	1578 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f0>
    15b4:	4620      	mov	r0, r4
    15b6:	f00a fdb9 	bl	c12c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    15ba:	4965      	ldr	r1, [pc, #404]	; (1750 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c8>)
    15bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    15be:	1c4b      	adds	r3, r1, #1
    15c0:	1a16      	subs	r6, r2, r0
    15c2:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    15c6:	bf24      	itt	cs
    15c8:	eba0 0c02 	subcs.w	ip, r0, r2
    15cc:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    15d0:	d310      	bcc.n	15f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26c>
    15d2:	42b1      	cmp	r1, r6
    15d4:	d208      	bcs.n	15e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x260>
    15d6:	1a08      	subs	r0, r1, r0
    15d8:	4410      	add	r0, r2
    15da:	1c46      	adds	r6, r0, #1
    15dc:	e00a      	b.n	15f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26c>
    15de:	f640 212d 	movw	r1, #2605	; 0xa2d
    15e2:	2070      	movs	r0, #112	; 0x70
    15e4:	f002 fe04 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15e8:	4561      	cmp	r1, ip
    15ea:	d22c      	bcs.n	1646 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2be>
    15ec:	1a89      	subs	r1, r1, r2
    15ee:	4408      	add	r0, r1
    15f0:	1c40      	adds	r0, r0, #1
    15f2:	4246      	negs	r6, r0
    15f4:	4854      	ldr	r0, [pc, #336]	; (1748 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c0>)
    15f6:	7f80      	ldrb	r0, [r0, #30]
    15f8:	b350      	cbz	r0, 1650 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c8>
    15fa:	4628      	mov	r0, r5
    15fc:	4645      	mov	r5, r8
    15fe:	f04f 0b00 	mov.w	fp, #0
    1602:	46d8      	mov	r8, fp
    1604:	2801      	cmp	r0, #1
    1606:	d005      	beq.n	1614 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28c>
    1608:	2002      	movs	r0, #2
    160a:	f002 f94b 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    160e:	2001      	movs	r0, #1
    1610:	f002 f948 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1614:	45a9      	cmp	r9, r5
    1616:	d227      	bcs.n	1668 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e0>
    1618:	eba6 0105 	sub.w	r1, r6, r5
    161c:	f04f 0301 	mov.w	r3, #1
    1620:	f04f 0203 	mov.w	r2, #3
    1624:	f04f 0002 	mov.w	r0, #2
    1628:	f002 f868 	bl	36fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    162c:	2800      	cmp	r0, #0
    162e:	bf08      	it	eq
    1630:	f04f 0801 	moveq.w	r8, #1
    1634:	f1b9 0f00 	cmp.w	r9, #0
    1638:	d030      	beq.n	169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>
    163a:	2301      	movs	r3, #1
    163c:	eba6 0109 	sub.w	r1, r6, r9
    1640:	2203      	movs	r2, #3
    1642:	4618      	mov	r0, r3
    1644:	e01e      	b.n	1684 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2fc>
    1646:	f640 310c 	movw	r1, #2828	; 0xb0c
    164a:	2070      	movs	r0, #112	; 0x70
    164c:	f002 fdd0 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1650:	45c1      	cmp	r9, r8
    1652:	bf34      	ite	cc
    1654:	4640      	movcc	r0, r8
    1656:	4648      	movcs	r0, r9
    1658:	4458      	add	r0, fp
    165a:	42b0      	cmp	r0, r6
    165c:	dbcd      	blt.n	15fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x272>
    165e:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    1662:	2070      	movs	r0, #112	; 0x70
    1664:	f002 fdc4 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1668:	d910      	bls.n	168c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x304>
    166a:	2301      	movs	r3, #1
    166c:	eba6 0109 	sub.w	r1, r6, r9
    1670:	2203      	movs	r2, #3
    1672:	4618      	mov	r0, r3
    1674:	f002 f842 	bl	36fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1678:	b328      	cbz	r0, 16c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33e>
    167a:	b17d      	cbz	r5, 169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>
    167c:	1b71      	subs	r1, r6, r5
    167e:	2301      	movs	r3, #1
    1680:	2203      	movs	r2, #3
    1682:	2002      	movs	r0, #2
    1684:	f002 f83a 	bl	36fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1688:	b1e8      	cbz	r0, 16c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33e>
    168a:	e007      	b.n	169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>
    168c:	ea55 0009 	orrs.w	r0, r5, r9
    1690:	d004      	beq.n	169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>
    1692:	f640 1177 	movw	r1, #2423	; 0x977
    1696:	2070      	movs	r0, #112	; 0x70
    1698:	f002 fdaa 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    169c:	2301      	movs	r3, #1
    169e:	2203      	movs	r2, #3
    16a0:	4631      	mov	r1, r6
    16a2:	2000      	movs	r0, #0
    16a4:	f002 f82a 	bl	36fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    16a8:	b168      	cbz	r0, 16c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33e>
    16aa:	2501      	movs	r5, #1
    16ac:	f1b8 0f00 	cmp.w	r8, #0
    16b0:	d003      	beq.n	16ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x332>
    16b2:	9814      	ldr	r0, [sp, #80]	; 0x50
    16b4:	900f      	str	r0, [sp, #60]	; 0x3c
    16b6:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    16ba:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1764 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3dc>
    16be:	f1ba 0f00 	cmp.w	sl, #0
    16c2:	d10e      	bne.n	16e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x35a>
    16c4:	e009      	b.n	16da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x352>
    16c6:	2002      	movs	r0, #2
    16c8:	f002 f8ec 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16cc:	2001      	movs	r0, #1
    16ce:	f002 f8e9 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16d2:	b01b      	add	sp, #108	; 0x6c
    16d4:	2000      	movs	r0, #0
    16d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16da:	481b      	ldr	r0, [pc, #108]	; (1748 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c0>)
    16dc:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    16e0:	b100      	cbz	r0, 16e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x35c>
    16e2:	b34f      	cbz	r7, 1738 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b0>
    16e4:	f8df a060 	ldr.w	sl, [pc, #96]	; 1748 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c0>
    16e8:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    16ec:	b118      	cbz	r0, 16f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36e>
    16ee:	f002 fbb1 	bl	3e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    16f2:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    16f6:	b307      	cbz	r7, 173a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b2>
    16f8:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    16fc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1700:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1704:	f8c8 0000 	str.w	r0, [r8]
    1708:	2300      	movs	r3, #0
    170a:	2203      	movs	r2, #3
    170c:	2005      	movs	r0, #5
    170e:	f001 fff5 	bl	36fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1712:	b368      	cbz	r0, 1770 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e8>
    1714:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1718:	2005      	movs	r0, #5
    171a:	f002 f98f 	bl	3a3c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    171e:	4912      	ldr	r1, [pc, #72]	; (1768 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e0>)
    1720:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1724:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1728:	4910      	ldr	r1, [pc, #64]	; (176c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e4>)
    172a:	12e0      	asrs	r0, r4, #11
    172c:	6008      	str	r0, [r1, #0]
    172e:	4c06      	ldr	r4, [pc, #24]	; (1748 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c0>)
    1730:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1734:	b3e8      	cbz	r0, 17b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42a>
    1736:	e030      	b.n	179a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x412>
    1738:	e01b      	b.n	1772 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ea>
    173a:	e01f      	b.n	177c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f4>
    173c:	40000508 	.word	0x40000508
    1740:	20000010 	.word	0x20000010
    1744:	20000f74 	.word	0x20000f74
    1748:	200012f4 	.word	0x200012f4
    174c:	20000012 	.word	0x20000012
    1750:	1e847fff 	.word	0x1e847fff
    1754:	07a12000 	.word	0x07a12000
    1758:	f85ee000 	.word	0xf85ee000
    175c:	1e848000 	.word	0x1e848000
    1760:	003fffff 	.word	0x003fffff
    1764:	4001f508 	.word	0x4001f508
    1768:	4001f098 	.word	0x4001f098
    176c:	4001f504 	.word	0x4001f504
    1770:	e025      	b.n	17be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x436>
    1772:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 182c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a4>
    1776:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    177a:	b1c8      	cbz	r0, 17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
    177c:	4c2b      	ldr	r4, [pc, #172]	; (182c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a4>)
    177e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1782:	b150      	cbz	r0, 179a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x412>
    1784:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1788:	f8c8 0000 	str.w	r0, [r8]
    178c:	2005      	movs	r0, #5
    178e:	f002 f889 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1792:	f002 fbc7 	bl	3f24 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1796:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    179a:	eba6 0009 	sub.w	r0, r6, r9
    179e:	f1a0 0119 	sub.w	r1, r0, #25
    17a2:	2900      	cmp	r1, #0
    17a4:	dc15      	bgt.n	17d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44a>
    17a6:	f640 2171 	movw	r1, #2673	; 0xa71
    17aa:	2070      	movs	r0, #112	; 0x70
    17ac:	f002 fd20 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17b0:	e000      	b.n	17b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42c>
    17b2:	e009      	b.n	17c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x440>
    17b4:	f002 fb6a 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    17b8:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    17bc:	e79b      	b.n	16f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36e>
    17be:	f240 313e 	movw	r1, #830	; 0x33e
    17c2:	2070      	movs	r0, #112	; 0x70
    17c4:	f002 fd14 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17c8:	f002 fb9e 	bl	3f08 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    17cc:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    17d0:	e7e3      	b.n	179a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x412>
    17d2:	2203      	movs	r2, #3
    17d4:	2301      	movs	r3, #1
    17d6:	4610      	mov	r0, r2
    17d8:	f001 ff90 	bl	36fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    17dc:	b308      	cbz	r0, 1822 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x49a>
    17de:	4814      	ldr	r0, [pc, #80]	; (1830 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a8>)
    17e0:	6880      	ldr	r0, [r0, #8]
    17e2:	f8c0 b000 	str.w	fp, [r0]
    17e6:	4813      	ldr	r0, [pc, #76]	; (1834 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ac>)
    17e8:	f8c0 b000 	str.w	fp, [r0]
    17ec:	ac0c      	add	r4, sp, #48	; 0x30
    17ee:	4812      	ldr	r0, [pc, #72]	; (1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>)
    17f0:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    17f4:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    17f8:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    17fc:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1800:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1804:	ac10      	add	r4, sp, #64	; 0x40
    1806:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    180a:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    180e:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1812:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1816:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    181a:	b01b      	add	sp, #108	; 0x6c
    181c:	2001      	movs	r0, #1
    181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1822:	f640 2179 	movw	r1, #2681	; 0xa79
    1826:	2070      	movs	r0, #112	; 0x70
    1828:	f002 fce2 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    182c:	200012f4 	.word	0x200012f4
    1830:	20000010 	.word	0x20000010
    1834:	40000508 	.word	0x40000508
    1838:	20000f74 	.word	0x20000f74
    183c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1840:	4606      	mov	r6, r0
    1842:	b083      	sub	sp, #12
    1844:	7808      	ldrb	r0, [r1, #0]
    1846:	7390      	strb	r0, [r2, #14]
    1848:	7acf      	ldrb	r7, [r1, #11]
    184a:	7357      	strb	r7, [r2, #13]
    184c:	7a88      	ldrb	r0, [r1, #10]
    184e:	7310      	strb	r0, [r2, #12]
    1850:	8908      	ldrh	r0, [r1, #8]
    1852:	4614      	mov	r4, r2
    1854:	8150      	strh	r0, [r2, #10]
    1856:	460d      	mov	r5, r1
    1858:	780a      	ldrb	r2, [r1, #0]
    185a:	495f      	ldr	r1, [pc, #380]	; (19d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x650>)
    185c:	4699      	mov	r9, r3
    185e:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    1862:	424b      	negs	r3, r1
    1864:	f1ac 0801 	sub.w	r8, ip, #1
    1868:	b15a      	cbz	r2, 1882 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4fa>
    186a:	43c0      	mvns	r0, r0
    186c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1870:	f104 0208 	add.w	r2, r4, #8
    1874:	4288      	cmp	r0, r1
    1876:	dd3d      	ble.n	18f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56c>
    1878:	f240 610a 	movw	r1, #1546	; 0x60a
    187c:	2070      	movs	r0, #112	; 0x70
    187e:	f002 fcb7 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1882:	68ee      	ldr	r6, [r5, #12]
    1884:	686d      	ldr	r5, [r5, #4]
    1886:	ea6f 0900 	mvn.w	r9, r0
    188a:	f104 0208 	add.w	r2, r4, #8
    188e:	eb06 0009 	add.w	r0, r6, r9
    1892:	4546      	cmp	r6, r8
    1894:	d904      	bls.n	18a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x518>
    1896:	f240 6109 	movw	r1, #1545	; 0x609
    189a:	2070      	movs	r0, #112	; 0x70
    189c:	f002 fca8 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18a0:	4589      	cmp	r9, r1
    18a2:	dce9      	bgt.n	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    18a4:	4599      	cmp	r9, r3
    18a6:	db28      	blt.n	18fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x572>
    18a8:	4584      	cmp	ip, r0
    18aa:	bfdc      	itt	le
    18ac:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    18b0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    18b4:	dd05      	ble.n	18c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x53a>
    18b6:	2800      	cmp	r0, #0
    18b8:	bfbc      	itt	lt
    18ba:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    18be:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    18c2:	4621      	mov	r1, r4
    18c4:	f001 fc32 	bl	312c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    18c8:	6820      	ldr	r0, [r4, #0]
    18ca:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    18ce:	1970      	adds	r0, r6, r5
    18d0:	1c40      	adds	r0, r0, #1
    18d2:	6021      	str	r1, [r4, #0]
    18d4:	2f00      	cmp	r7, #0
    18d6:	bf08      	it	eq
    18d8:	307a      	addeq	r0, #122	; 0x7a
    18da:	d003      	beq.n	18e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x55c>
    18dc:	2f01      	cmp	r7, #1
    18de:	bf08      	it	eq
    18e0:	3048      	addeq	r0, #72	; 0x48
    18e2:	d12d      	bne.n	1940 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b8>
    18e4:	f001 fc06 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    18e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18ec:	6060      	str	r0, [r4, #4]
    18ee:	b003      	add	sp, #12
    18f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    18f4:	4601      	mov	r1, r0
    18f6:	4298      	cmp	r0, r3
    18f8:	da04      	bge.n	1904 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x57c>
    18fa:	f240 610b 	movw	r1, #1547	; 0x60b
    18fe:	2070      	movs	r0, #112	; 0x70
    1900:	f002 fc76 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1904:	4584      	cmp	ip, r0
    1906:	bfdc      	itt	le
    1908:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    190c:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1910:	dd05      	ble.n	191e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x596>
    1912:	2800      	cmp	r0, #0
    1914:	bfbc      	itt	lt
    1916:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    191a:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    191e:	4621      	mov	r1, r4
    1920:	f001 fc04 	bl	312c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1924:	6820      	ldr	r0, [r4, #0]
    1926:	2f00      	cmp	r7, #0
    1928:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    192c:	f108 0001 	add.w	r0, r8, #1
    1930:	6021      	str	r1, [r4, #0]
    1932:	bf08      	it	eq
    1934:	307a      	addeq	r0, #122	; 0x7a
    1936:	d008      	beq.n	194a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c2>
    1938:	2f01      	cmp	r7, #1
    193a:	bf08      	it	eq
    193c:	3048      	addeq	r0, #72	; 0x48
    193e:	d004      	beq.n	194a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c2>
    1940:	f240 61b1 	movw	r1, #1713	; 0x6b1
    1944:	2070      	movs	r0, #112	; 0x70
    1946:	f002 fc53 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    194a:	f001 fbd3 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    194e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1952:	6061      	str	r1, [r4, #4]
    1954:	8960      	ldrh	r0, [r4, #10]
    1956:	aa01      	add	r2, sp, #4
    1958:	4669      	mov	r1, sp
    195a:	f001 fbe7 	bl	312c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    195e:	481f      	ldr	r0, [pc, #124]	; (19dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x654>)
    1960:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1964:	2920      	cmp	r1, #32
    1966:	d023      	beq.n	19b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x628>
    1968:	6900      	ldr	r0, [r0, #16]
    196a:	1d40      	adds	r0, r0, #5
    196c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1970:	e9d4 2100 	ldrd	r2, r1, [r4]
    1974:	1a89      	subs	r1, r1, r2
    1976:	6020      	str	r0, [r4, #0]
    1978:	4408      	add	r0, r1
    197a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    197e:	6060      	str	r0, [r4, #4]
    1980:	464b      	mov	r3, r9
    1982:	4632      	mov	r2, r6
    1984:	4621      	mov	r1, r4
    1986:	68e8      	ldr	r0, [r5, #12]
    1988:	f7ff fad2 	bl	f30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    198c:	2800      	cmp	r0, #0
    198e:	bf1c      	itt	ne
    1990:	b003      	addne	sp, #12
    1992:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1996:	e9d4 1000 	ldrd	r1, r0, [r4]
    199a:	1a40      	subs	r0, r0, r1
    199c:	4430      	add	r0, r6
    199e:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    19a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    19a6:	e9c4 1000 	strd	r1, r0, [r4]
    19aa:	b003      	add	sp, #12
    19ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    19b0:	8960      	ldrh	r0, [r4, #10]
    19b2:	f106 0709 	add.w	r7, r6, #9
    19b6:	b120      	cbz	r0, 19c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x63a>
    19b8:	f002 fba2 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    19bc:	2800      	cmp	r0, #0
    19be:	bf08      	it	eq
    19c0:	3732      	addeq	r7, #50	; 0x32
    19c2:	4807      	ldr	r0, [pc, #28]	; (19e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x658>)
    19c4:	7841      	ldrb	r1, [r0, #1]
    19c6:	9800      	ldr	r0, [sp, #0]
    19c8:	4281      	cmp	r1, r0
    19ca:	bf84      	itt	hi
    19cc:	1a08      	subhi	r0, r1, r0
    19ce:	4407      	addhi	r7, r0
    19d0:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    19d4:	e7cc      	b.n	1970 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e8>
    19d6:	0000      	.short	0x0000
    19d8:	07a12000 	.word	0x07a12000
    19dc:	200012f4 	.word	0x200012f4
    19e0:	20000012 	.word	0x20000012
    19e4:	b510      	push	{r4, lr}
    19e6:	4c15      	ldr	r4, [pc, #84]	; (1a3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b4>)
    19e8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    19ec:	2820      	cmp	r0, #32
    19ee:	bf18      	it	ne
    19f0:	bd10      	popne	{r4, pc}
    19f2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    19f6:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    19fa:	f890 1020 	ldrb.w	r1, [r0, #32]
    19fe:	2920      	cmp	r1, #32
    1a00:	d017      	beq.n	1a32 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6aa>
    1a02:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1a40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b8>
    1a06:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1a0a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1a0e:	785b      	ldrb	r3, [r3, #1]
    1a10:	f880 3020 	strb.w	r3, [r0, #32]
    1a14:	2301      	movs	r3, #1
    1a16:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1a1a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1a1e:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1a22:	2002      	movs	r0, #2
    1a24:	f000 f8b0 	bl	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
    1a28:	2000      	movs	r0, #0
    1a2a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1a2e:	77a0      	strb	r0, [r4, #30]
    1a30:	bd10      	pop	{r4, pc}
    1a32:	f240 318b 	movw	r1, #907	; 0x38b
    1a36:	2070      	movs	r0, #112	; 0x70
    1a38:	f002 fbda 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a3c:	200012f4 	.word	0x200012f4
    1a40:	20001274 	.word	0x20001274
    1a44:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1a48:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1b04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x77c>
    1a4c:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1a50:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1a54:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1a58:	2c20      	cmp	r4, #32
    1a5a:	bf08      	it	eq
    1a5c:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1a60:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 1b08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x780>
    1a64:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1b0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x784>
    1a68:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1a6c:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1a70:	2607      	movs	r6, #7
    1a72:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1a76:	2801      	cmp	r0, #1
    1a78:	d00e      	beq.n	1a98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x710>
    1a7a:	2804      	cmp	r0, #4
    1a7c:	bf08      	it	eq
    1a7e:	2602      	moveq	r6, #2
    1a80:	d00a      	beq.n	1a98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x710>
    1a82:	2805      	cmp	r0, #5
    1a84:	bf0c      	ite	eq
    1a86:	2603      	moveq	r6, #3
    1a88:	2806      	cmpne	r0, #6
    1a8a:	d005      	beq.n	1a98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x710>
    1a8c:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1a90:	f04f 0070 	mov.w	r0, #112	; 0x70
    1a94:	f002 fbac 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a98:	f1bb 0f00 	cmp.w	fp, #0
    1a9c:	bf18      	it	ne
    1a9e:	f3af 8000 	nopne.w
    1aa2:	f3ef 8010 	mrs	r0, PRIMASK
    1aa6:	b672      	cpsid	i
    1aa8:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1aac:	784a      	ldrb	r2, [r1, #1]
    1aae:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1ab2:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1ab6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1aba:	42a2      	cmp	r2, r4
    1abc:	bf04      	itt	eq
    1abe:	2220      	moveq	r2, #32
    1ac0:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1ac4:	b1b8      	cbz	r0, 1af6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76e>
    1ac6:	462a      	mov	r2, r5
    1ac8:	4621      	mov	r1, r4
    1aca:	2001      	movs	r0, #1
    1acc:	f000 f85c 	bl	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
    1ad0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1ad4:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1ad8:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1adc:	6840      	ldr	r0, [r0, #4]
    1ade:	4631      	mov	r1, r6
    1ae0:	4790      	blx	r2
    1ae2:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1ae6:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1aea:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1aee:	2c20      	cmp	r4, #32
    1af0:	d1bc      	bne.n	1a6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e4>
    1af2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1af6:	4806      	ldr	r0, [pc, #24]	; (1b10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x788>)
    1af8:	2800      	cmp	r0, #0
    1afa:	bf18      	it	ne
    1afc:	f3af 8000 	nopne.w
    1b00:	b662      	cpsie	i
    1b02:	e7e0      	b.n	1ac6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73e>
    1b04:	200012f4 	.word	0x200012f4
    1b08:	00000000 	.word	0x00000000
    1b0c:	20001274 	.word	0x20001274
    1b10:	00000000 	.word	0x00000000
    1b14:	b510      	push	{r4, lr}
    1b16:	4604      	mov	r4, r0
    1b18:	6800      	ldr	r0, [r0, #0]
    1b1a:	f00a fb07 	bl	c12c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1b1e:	4602      	mov	r2, r0
    1b20:	8960      	ldrh	r0, [r4, #10]
    1b22:	7a21      	ldrb	r1, [r4, #8]
    1b24:	4b14      	ldr	r3, [pc, #80]	; (1b78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f0>)
    1b26:	4408      	add	r0, r1
    1b28:	1c41      	adds	r1, r0, #1
    1b2a:	1850      	adds	r0, r2, r1
    1b2c:	429a      	cmp	r2, r3
    1b2e:	d904      	bls.n	1b3a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b2>
    1b30:	f240 6109 	movw	r1, #1545	; 0x609
    1b34:	2070      	movs	r0, #112	; 0x70
    1b36:	f002 fb5b 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b3a:	4a10      	ldr	r2, [pc, #64]	; (1b7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f4>)
    1b3c:	4291      	cmp	r1, r2
    1b3e:	dd04      	ble.n	1b4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c2>
    1b40:	f240 610a 	movw	r1, #1546	; 0x60a
    1b44:	2070      	movs	r0, #112	; 0x70
    1b46:	f002 fb53 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b4a:	4a0d      	ldr	r2, [pc, #52]	; (1b80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f8>)
    1b4c:	4291      	cmp	r1, r2
    1b4e:	da04      	bge.n	1b5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d2>
    1b50:	f240 610b 	movw	r1, #1547	; 0x60b
    1b54:	2070      	movs	r0, #112	; 0x70
    1b56:	f002 fb4b 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b5a:	490a      	ldr	r1, [pc, #40]	; (1b84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7fc>)
    1b5c:	4281      	cmp	r1, r0
    1b5e:	bfde      	ittt	le
    1b60:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1b64:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1b68:	bd10      	pople	{r4, pc}
    1b6a:	2800      	cmp	r0, #0
    1b6c:	bfbc      	itt	lt
    1b6e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1b72:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1b76:	bd10      	pop	{r4, pc}
    1b78:	1e847fff 	.word	0x1e847fff
    1b7c:	07a12000 	.word	0x07a12000
    1b80:	f85ee000 	.word	0xf85ee000
    1b84:	1e848000 	.word	0x1e848000
    1b88:	f8df c054 	ldr.w	ip, [pc, #84]	; 1be0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x858>
    1b8c:	b510      	push	{r4, lr}
    1b8e:	2300      	movs	r3, #0
    1b90:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1b94:	2807      	cmp	r0, #7
    1b96:	d21e      	bcs.n	1bd6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84e>
    1b98:	e8df f000 	tbb	[pc, r0]
    1b9c:	05050505 	.word	0x05050505
    1ba0:	00040404 	.word	0x00040404
    1ba4:	2301      	movs	r3, #1
    1ba6:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1baa:	2b00      	cmp	r3, #0
    1bac:	bf08      	it	eq
    1bae:	bd10      	popeq	{r4, pc}
    1bb0:	480c      	ldr	r0, [pc, #48]	; (1be4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x85c>)
    1bb2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1bb6:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1bba:	2820      	cmp	r0, #32
    1bbc:	bf0e      	itee	eq
    1bbe:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1bc2:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1bc6:	7041      	strbne	r1, [r0, #1]
    1bc8:	2020      	movs	r0, #32
    1bca:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1bce:	7058      	strb	r0, [r3, #1]
    1bd0:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1bd4:	bd10      	pop	{r4, pc}
    1bd6:	f44f 7115 	mov.w	r1, #596	; 0x254
    1bda:	2070      	movs	r0, #112	; 0x70
    1bdc:	f002 fb08 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1be0:	20001274 	.word	0x20001274
    1be4:	200012f4 	.word	0x200012f4
    1be8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bec:	b083      	sub	sp, #12
    1bee:	485c      	ldr	r0, [pc, #368]	; (1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>)
    1bf0:	9904      	ldr	r1, [sp, #16]
    1bf2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1bf6:	9001      	str	r0, [sp, #4]
    1bf8:	f890 4020 	ldrb.w	r4, [r0, #32]
    1bfc:	9803      	ldr	r0, [sp, #12]
    1bfe:	4625      	mov	r5, r4
    1c00:	2801      	cmp	r0, #1
    1c02:	bf18      	it	ne
    1c04:	2802      	cmpne	r0, #2
    1c06:	d005      	beq.n	1c14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88c>
    1c08:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    1c0c:	f04f 0070 	mov.w	r0, #112	; 0x70
    1c10:	f002 faee 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c14:	2700      	movs	r7, #0
    1c16:	2d20      	cmp	r5, #32
    1c18:	d04a      	beq.n	1cb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x928>
    1c1a:	4851      	ldr	r0, [pc, #324]	; (1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>)
    1c1c:	9100      	str	r1, [sp, #0]
    1c1e:	2600      	movs	r6, #0
    1c20:	7f80      	ldrb	r0, [r0, #30]
    1c22:	2800      	cmp	r0, #0
    1c24:	bf08      	it	eq
    1c26:	2602      	moveq	r6, #2
    1c28:	f001 fbde 	bl	33e8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1c2c:	f8df a138 	ldr.w	sl, [pc, #312]	; 1d68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1c30:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1c34:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    1c38:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1d64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1c3c:	688a      	ldr	r2, [r1, #8]
    1c3e:	68c9      	ldr	r1, [r1, #12]
    1c40:	1a12      	subs	r2, r2, r0
    1c42:	1a09      	subs	r1, r1, r0
    1c44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1c48:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1c4c:	4296      	cmp	r6, r2
    1c4e:	bf98      	it	ls
    1c50:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    1c54:	d201      	bcs.n	1c5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d2>
    1c56:	4589      	cmp	r9, r1
    1c58:	d228      	bcs.n	1cac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x924>
    1c5a:	4a44      	ldr	r2, [pc, #272]	; (1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>)
    1c5c:	9900      	ldr	r1, [sp, #0]
    1c5e:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    1c62:	4622      	mov	r2, r4
    1c64:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1c68:	784c      	ldrb	r4, [r1, #1]
    1c6a:	2c20      	cmp	r4, #32
    1c6c:	d016      	beq.n	1c9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x914>
    1c6e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1c72:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    1c76:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1c7a:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1c7e:	eba8 0800 	sub.w	r8, r8, r0
    1c82:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    1c86:	ebac 0100 	sub.w	r1, ip, r0
    1c8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1c8e:	4546      	cmp	r6, r8
    1c90:	bf98      	it	ls
    1c92:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    1c96:	d2e4      	bcs.n	1c62 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8da>
    1c98:	4589      	cmp	r9, r1
    1c9a:	d3e2      	bcc.n	1c62 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8da>
    1c9c:	2a20      	cmp	r2, #32
    1c9e:	d005      	beq.n	1cac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x924>
    1ca0:	2120      	movs	r1, #32
    1ca2:	2004      	movs	r0, #4
    1ca4:	9b00      	ldr	r3, [sp, #0]
    1ca6:	f7ff f907 	bl	eb8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1caa:	4604      	mov	r4, r0
    1cac:	42ac      	cmp	r4, r5
    1cae:	d115      	bne.n	1cdc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x954>
    1cb0:	482f      	ldr	r0, [pc, #188]	; (1d70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24>)
    1cb2:	2800      	cmp	r0, #0
    1cb4:	bf18      	it	ne
    1cb6:	f3af 8000 	nopne.w
    1cba:	f001 fb95 	bl	33e8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1cbe:	4c28      	ldr	r4, [pc, #160]	; (1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>)
    1cc0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1cc4:	2920      	cmp	r1, #32
    1cc6:	d00d      	beq.n	1ce4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x95c>
    1cc8:	68e1      	ldr	r1, [r4, #12]
    1cca:	1c82      	adds	r2, r0, #2
    1ccc:	1a51      	subs	r1, r2, r1
    1cce:	0209      	lsls	r1, r1, #8
    1cd0:	17ca      	asrs	r2, r1, #31
    1cd2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1cd6:	1209      	asrs	r1, r1, #8
    1cd8:	2900      	cmp	r1, #0
    1cda:	dd03      	ble.n	1ce4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x95c>
    1cdc:	b005      	add	sp, #20
    1cde:	2000      	movs	r0, #0
    1ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ce4:	2d20      	cmp	r5, #32
    1ce6:	d00d      	beq.n	1d04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x97c>
    1ce8:	462a      	mov	r2, r5
    1cea:	9903      	ldr	r1, [sp, #12]
    1cec:	f7ff fb1c 	bl	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
    1cf0:	b358      	cbz	r0, 1d4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c2>
    1cf2:	9801      	ldr	r0, [sp, #4]
    1cf4:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1cf8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1cfc:	b005      	add	sp, #20
    1cfe:	2001      	movs	r0, #1
    1d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d04:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1d08:	b118      	cbz	r0, 1d12 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98a>
    1d0a:	f002 f8a3 	bl	3e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1d0e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1d12:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d16:	b150      	cbz	r0, 1d2e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a6>
    1d18:	4916      	ldr	r1, [pc, #88]	; (1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>)
    1d1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1d1e:	6008      	str	r0, [r1, #0]
    1d20:	2005      	movs	r0, #5
    1d22:	f001 fdbf 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d26:	f002 f8fd 	bl	3f24 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1d2a:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    1d2e:	2004      	movs	r0, #4
    1d30:	f001 fdb8 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d34:	f001 fe24 	bl	3980 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1d38:	2020      	movs	r0, #32
    1d3a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    1d3e:	480e      	ldr	r0, [pc, #56]	; (1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>)
    1d40:	6880      	ldr	r0, [r0, #8]
    1d42:	6007      	str	r7, [r0, #0]
    1d44:	480d      	ldr	r0, [pc, #52]	; (1d7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>)
    1d46:	6007      	str	r7, [r0, #0]
    1d48:	e7d8      	b.n	1cfc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x974>
    1d4a:	462a      	mov	r2, r5
    1d4c:	2120      	movs	r1, #32
    1d4e:	2004      	movs	r0, #4
    1d50:	9b04      	ldr	r3, [sp, #16]
    1d52:	f7ff f8b1 	bl	eb8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1d56:	b005      	add	sp, #20
    1d58:	2000      	movs	r0, #0
    1d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d5e:	0000      	.short	0x0000
    1d60:	200012f4 	.word	0x200012f4
    1d64:	003fffff 	.word	0x003fffff
    1d68:	20000f74 	.word	0x20000f74
    1d6c:	20001274 	.word	0x20001274
    1d70:	00000000 	.word	0x00000000
    1d74:	4001f508 	.word	0x4001f508
    1d78:	20000010 	.word	0x20000010
    1d7c:	40000508 	.word	0x40000508

00001d80 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1d80:	4906      	ldr	r1, [pc, #24]	; (1d9c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1d82:	b510      	push	{r4, lr}
    1d84:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1d88:	2a20      	cmp	r2, #32
    1d8a:	bf1c      	itt	ne
    1d8c:	7788      	strbne	r0, [r1, #30]
    1d8e:	bd10      	popne	{r4, pc}
    1d90:	f240 31ea 	movw	r1, #1002	; 0x3ea
    1d94:	2070      	movs	r0, #112	; 0x70
    1d96:	f002 fa2b 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d9a:	0000      	.short	0x0000
    1d9c:	200012f4 	.word	0x200012f4

00001da0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1da4:	4e5b      	ldr	r6, [pc, #364]	; (1f14 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1da6:	4681      	mov	r9, r0
    1da8:	b085      	sub	sp, #20
    1daa:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1dae:	468a      	mov	sl, r1
    1db0:	2820      	cmp	r0, #32
    1db2:	d04d      	beq.n	1e50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    1db4:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1db8:	f106 040c 	add.w	r4, r6, #12
    1dbc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1dc0:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1dc4:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1dc8:	2020      	movs	r0, #32
    1dca:	f88d 0000 	strb.w	r0, [sp]
    1dce:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1dd2:	aa03      	add	r2, sp, #12
    1dd4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1dd8:	a901      	add	r1, sp, #4
    1dda:	f890 5020 	ldrb.w	r5, [r0, #32]
    1dde:	6930      	ldr	r0, [r6, #16]
    1de0:	9002      	str	r0, [sp, #8]
    1de2:	6830      	ldr	r0, [r6, #0]
    1de4:	4448      	add	r0, r9
    1de6:	f001 f9a1 	bl	312c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1dea:	68f8      	ldr	r0, [r7, #12]
    1dec:	9901      	ldr	r1, [sp, #4]
    1dee:	4a4a      	ldr	r2, [pc, #296]	; (1f18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1df0:	4408      	add	r0, r1
    1df2:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    1df6:	4291      	cmp	r1, r2
    1df8:	d82f      	bhi.n	1e5a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1dfa:	68b9      	ldr	r1, [r7, #8]
    1dfc:	1a41      	subs	r1, r0, r1
    1dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e02:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1e06:	d228      	bcs.n	1e5a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1e08:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e0c:	6060      	str	r0, [r4, #4]
    1e0e:	4630      	mov	r0, r6
    1e10:	f884 a00c 	strb.w	sl, [r4, #12]
    1e14:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    1e18:	46ea      	mov	sl, sp
    1e1a:	2d20      	cmp	r5, #32
    1e1c:	bf1c      	itt	ne
    1e1e:	493f      	ldrne	r1, [pc, #252]	; (1f1c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1e20:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1e24:	d03c      	beq.n	1ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1e26:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1e2a:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1e2e:	6860      	ldr	r0, [r4, #4]
    1e30:	68ba      	ldr	r2, [r7, #8]
    1e32:	4621      	mov	r1, r4
    1e34:	1a10      	subs	r0, r2, r0
    1e36:	0200      	lsls	r0, r0, #8
    1e38:	17c2      	asrs	r2, r0, #31
    1e3a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e3e:	f107 0608 	add.w	r6, r7, #8
    1e42:	1200      	asrs	r0, r0, #8
    1e44:	d41b      	bmi.n	1e7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    1e46:	8970      	ldrh	r0, [r6, #10]
    1e48:	b350      	cbz	r0, 1ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1e4a:	8948      	ldrh	r0, [r1, #10]
    1e4c:	b148      	cbz	r0, 1e62 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    1e4e:	e027      	b.n	1ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1e50:	f640 317b 	movw	r1, #2939	; 0xb7b
    1e54:	2070      	movs	r0, #112	; 0x70
    1e56:	f002 f9cb 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e5a:	b005      	add	sp, #20
    1e5c:	2001      	movs	r0, #1
    1e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e62:	4620      	mov	r0, r4
    1e64:	f7ff fe56 	bl	1b14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78c>
    1e68:	f001 f944 	bl	30f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1e6c:	6831      	ldr	r1, [r6, #0]
    1e6e:	1a08      	subs	r0, r1, r0
    1e70:	0200      	lsls	r0, r0, #8
    1e72:	17c1      	asrs	r1, r0, #31
    1e74:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1e78:	1200      	asrs	r0, r0, #8
    1e7a:	2833      	cmp	r0, #51	; 0x33
    1e7c:	da10      	bge.n	1ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1e7e:	f88a 5000 	strb.w	r5, [sl]
    1e82:	7d39      	ldrb	r1, [r7, #20]
    1e84:	7b20      	ldrb	r0, [r4, #12]
    1e86:	4281      	cmp	r1, r0
    1e88:	d805      	bhi.n	1e96 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1e8a:	9802      	ldr	r0, [sp, #8]
    1e8c:	6060      	str	r0, [r4, #4]
    1e8e:	b005      	add	sp, #20
    1e90:	2002      	movs	r0, #2
    1e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e96:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1e9a:	7845      	ldrb	r5, [r0, #1]
    1e9c:	2d20      	cmp	r5, #32
    1e9e:	d1c2      	bne.n	1e26 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1ea0:	2005      	movs	r0, #5
    1ea2:	f001 fcff 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ea6:	4c1b      	ldr	r4, [pc, #108]	; (1f14 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1ea8:	f04f 30ff 	mov.w	r0, #4294967295
    1eac:	60a0      	str	r0, [r4, #8]
    1eae:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1eb2:	f89d 2000 	ldrb.w	r2, [sp]
    1eb6:	2120      	movs	r1, #32
    1eb8:	2a20      	cmp	r2, #32
    1eba:	bf13      	iteet	ne
    1ebc:	2005      	movne	r0, #5
    1ebe:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1ec2:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1ec6:	f7fe fff7 	blne	eb8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1eca:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1ece:	4913      	ldr	r1, [pc, #76]	; (1f1c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1ed0:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1ed4:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1ed8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1edc:	7048      	strb	r0, [r1, #1]
    1ede:	6820      	ldr	r0, [r4, #0]
    1ee0:	4448      	add	r0, r9
    1ee2:	6020      	str	r0, [r4, #0]
    1ee4:	2001      	movs	r0, #1
    1ee6:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1eea:	7e60      	ldrb	r0, [r4, #25]
    1eec:	2801      	cmp	r0, #1
    1eee:	d105      	bne.n	1efc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1ef0:	6920      	ldr	r0, [r4, #16]
    1ef2:	1e40      	subs	r0, r0, #1
    1ef4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ef8:	f001 fb1a 	bl	3530 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1efc:	f89d 0000 	ldrb.w	r0, [sp]
    1f00:	2820      	cmp	r0, #32
    1f02:	d003      	beq.n	1f0c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    1f04:	4806      	ldr	r0, [pc, #24]	; (1f20 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    1f06:	7840      	ldrb	r0, [r0, #1]
    1f08:	f002 fa42 	bl	4390 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1f0c:	b005      	add	sp, #20
    1f0e:	2000      	movs	r0, #0
    1f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f14:	200012f4 	.word	0x200012f4
    1f18:	07a11f9b 	.word	0x07a11f9b
    1f1c:	20001274 	.word	0x20001274
    1f20:	20000010 	.word	0x20000010

00001f24 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1f24:	4806      	ldr	r0, [pc, #24]	; (1f40 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1f26:	b510      	push	{r4, lr}
    1f28:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1f2c:	2920      	cmp	r1, #32
    1f2e:	bf1c      	itt	ne
    1f30:	7e00      	ldrbne	r0, [r0, #24]
    1f32:	bd10      	popne	{r4, pc}
    1f34:	f640 3174 	movw	r1, #2932	; 0xb74
    1f38:	2070      	movs	r0, #112	; 0x70
    1f3a:	f002 f959 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f3e:	0000      	.short	0x0000
    1f40:	200012f4 	.word	0x200012f4

00001f44 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1f44:	4602      	mov	r2, r0
    1f46:	4b14      	ldr	r3, [pc, #80]	; (1f98 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    1f48:	b510      	push	{r4, lr}
    1f4a:	4408      	add	r0, r1
    1f4c:	429a      	cmp	r2, r3
    1f4e:	d904      	bls.n	1f5a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    1f50:	f240 6109 	movw	r1, #1545	; 0x609
    1f54:	2070      	movs	r0, #112	; 0x70
    1f56:	f002 f94b 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f5a:	4a10      	ldr	r2, [pc, #64]	; (1f9c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1f5c:	4291      	cmp	r1, r2
    1f5e:	dd04      	ble.n	1f6a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1f60:	f240 610a 	movw	r1, #1546	; 0x60a
    1f64:	2070      	movs	r0, #112	; 0x70
    1f66:	f002 f943 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f6a:	4a0d      	ldr	r2, [pc, #52]	; (1fa0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1f6c:	4291      	cmp	r1, r2
    1f6e:	da04      	bge.n	1f7a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    1f70:	f240 610b 	movw	r1, #1547	; 0x60b
    1f74:	2070      	movs	r0, #112	; 0x70
    1f76:	f002 f93b 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f7a:	490a      	ldr	r1, [pc, #40]	; (1fa4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1f7c:	4281      	cmp	r1, r0
    1f7e:	bfde      	ittt	le
    1f80:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1f84:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1f88:	bd10      	pople	{r4, pc}
    1f8a:	2800      	cmp	r0, #0
    1f8c:	bfbc      	itt	lt
    1f8e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1f92:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1f96:	bd10      	pop	{r4, pc}
    1f98:	1e847fff 	.word	0x1e847fff
    1f9c:	07a12000 	.word	0x07a12000
    1fa0:	f85ee000 	.word	0xf85ee000
    1fa4:	1e848000 	.word	0x1e848000

00001fa8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1fa8:	4a10      	ldr	r2, [pc, #64]	; (1fec <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1faa:	1a0b      	subs	r3, r1, r0
    1fac:	f102 0c01 	add.w	ip, r2, #1
    1fb0:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1fb4:	bf3c      	itt	cc
    1fb6:	4618      	movcc	r0, r3
    1fb8:	4770      	bxcc	lr
    1fba:	b510      	push	{r4, lr}
    1fbc:	1a44      	subs	r4, r0, r1
    1fbe:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1fc2:	bf3c      	itt	cc
    1fc4:	4618      	movcc	r0, r3
    1fc6:	bd10      	popcc	{r4, pc}
    1fc8:	429a      	cmp	r2, r3
    1fca:	d203      	bcs.n	1fd4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1fcc:	1a10      	subs	r0, r2, r0
    1fce:	4408      	add	r0, r1
    1fd0:	1c40      	adds	r0, r0, #1
    1fd2:	bd10      	pop	{r4, pc}
    1fd4:	42a2      	cmp	r2, r4
    1fd6:	d204      	bcs.n	1fe2 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1fd8:	1a51      	subs	r1, r2, r1
    1fda:	4408      	add	r0, r1
    1fdc:	1c40      	adds	r0, r0, #1
    1fde:	4240      	negs	r0, r0
    1fe0:	bd10      	pop	{r4, pc}
    1fe2:	f640 310c 	movw	r1, #2828	; 0xb0c
    1fe6:	2070      	movs	r0, #112	; 0x70
    1fe8:	f002 f902 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fec:	1e847fff 	.word	0x1e847fff

00001ff0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1ff0:	490e      	ldr	r1, [pc, #56]	; (202c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1ff2:	b510      	push	{r4, lr}
    1ff4:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1ff8:	2820      	cmp	r0, #32
    1ffa:	d012      	beq.n	2022 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1ffc:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2000:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    2004:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2008:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    200c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    2010:	6840      	ldr	r0, [r0, #4]
    2012:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2016:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    201a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    201e:	2104      	movs	r1, #4
    2020:	4710      	bx	r2
    2022:	f640 01bc 	movw	r1, #2236	; 0x8bc
    2026:	2070      	movs	r0, #112	; 0x70
    2028:	f002 f8e2 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    202c:	200012f4 	.word	0x200012f4

00002030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2032:	4d6d      	ldr	r5, [pc, #436]	; (21e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2034:	496d      	ldr	r1, [pc, #436]	; (21ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    2036:	2601      	movs	r6, #1
    2038:	f505 7460 	add.w	r4, r5, #896	; 0x380
    203c:	2808      	cmp	r0, #8
    203e:	d273      	bcs.n	2128 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    2040:	e8df f000 	tbb	[pc, r0]
    2044:	af9d6704 	.word	0xaf9d6704
    2048:	b9b444cd 	.word	0xb9b444cd
    204c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2050:	b918      	cbnz	r0, 205a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2052:	f001 ff1b 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2056:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    205a:	8ae0      	ldrh	r0, [r4, #22]
    205c:	b110      	cbz	r0, 2064 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    205e:	f002 f84f 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2062:	b188      	cbz	r0, 2088 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    2064:	f7ff fcbe 	bl	19e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65c>
    2068:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    206c:	68a1      	ldr	r1, [r4, #8]
    206e:	f1b1 3fff 	cmp.w	r1, #4294967295
    2072:	d005      	beq.n	2080 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    2074:	2301      	movs	r3, #1
    2076:	2203      	movs	r2, #3
    2078:	2005      	movs	r0, #5
    207a:	f001 fb3f 	bl	36fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    207e:	b140      	cbz	r0, 2092 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    2080:	7e60      	ldrb	r0, [r4, #25]
    2082:	2801      	cmp	r0, #1
    2084:	d110      	bne.n	20a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    2086:	e009      	b.n	209c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    2088:	f44f 6107 	mov.w	r1, #2160	; 0x870
    208c:	2070      	movs	r0, #112	; 0x70
    208e:	f002 f8af 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2092:	f640 0175 	movw	r1, #2165	; 0x875
    2096:	2070      	movs	r0, #112	; 0x70
    2098:	f002 f8aa 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    209c:	6920      	ldr	r0, [r4, #16]
    209e:	1e40      	subs	r0, r0, #1
    20a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    20a4:	f001 fa44 	bl	3530 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    20a8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    20ac:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    20b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    20b4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    20b8:	6840      	ldr	r0, [r0, #4]
    20ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    20be:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    20c2:	b001      	add	sp, #4
    20c4:	2101      	movs	r1, #1
    20c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    20ca:	4710      	bx	r2
    20cc:	f7ff fc8a 	bl	19e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65c>
    20d0:	f04f 30ff 	mov.w	r0, #4294967295
    20d4:	60a0      	str	r0, [r4, #8]
    20d6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    20da:	f88d 0000 	strb.w	r0, [sp]
    20de:	f89d 0000 	ldrb.w	r0, [sp]
    20e2:	b188      	cbz	r0, 2108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    20e4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    20e8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    20ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    20f0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    20f4:	6840      	ldr	r0, [r0, #4]
    20f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    20fa:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    20fe:	b001      	add	sp, #4
    2100:	2106      	movs	r1, #6
    2102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2106:	4710      	bx	r2
    2108:	f640 0186 	movw	r1, #2182	; 0x886
    210c:	2070      	movs	r0, #112	; 0x70
    210e:	f002 f86f 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2112:	f7ff fc67 	bl	19e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65c>
    2116:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    211a:	f001 fff1 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    211e:	b120      	cbz	r0, 212a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    2120:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2124:	b130      	cbz	r0, 2134 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    2126:	e009      	b.n	213c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    2128:	e059      	b.n	21de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    212a:	f640 0196 	movw	r1, #2198	; 0x896
    212e:	2070      	movs	r0, #112	; 0x70
    2130:	f002 f85e 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2134:	f001 feaa 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2138:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    213c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2140:	b158      	cbz	r0, 215a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    2142:	492b      	ldr	r1, [pc, #172]	; (21f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    2144:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2148:	6008      	str	r0, [r1, #0]
    214a:	2005      	movs	r0, #5
    214c:	f001 fbaa 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2150:	f001 fee8 	bl	3f24 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    2154:	2000      	movs	r0, #0
    2156:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    215a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    215e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2162:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2166:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    216a:	6840      	ldr	r0, [r0, #4]
    216c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2170:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2174:	b001      	add	sp, #4
    2176:	2100      	movs	r1, #0
    2178:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    217c:	4710      	bx	r2
    217e:	f001 fc49 	bl	3a14 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2182:	8ae0      	ldrh	r0, [r4, #22]
    2184:	b110      	cbz	r0, 218c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    2186:	f001 ffbb 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    218a:	b128      	cbz	r0, 2198 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    218c:	4819      	ldr	r0, [pc, #100]	; (21f4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    218e:	7800      	ldrb	r0, [r0, #0]
    2190:	2803      	cmp	r0, #3
    2192:	bf08      	it	eq
    2194:	7766      	strbeq	r6, [r4, #29]
    2196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2198:	f640 01a1 	movw	r1, #2209	; 0x8a1
    219c:	2070      	movs	r0, #112	; 0x70
    219e:	f002 f827 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21a2:	4815      	ldr	r0, [pc, #84]	; (21f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    21a4:	6006      	str	r6, [r0, #0]
    21a6:	6888      	ldr	r0, [r1, #8]
    21a8:	6006      	str	r6, [r0, #0]
    21aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21ac:	7808      	ldrb	r0, [r1, #0]
    21ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    21b2:	f002 b8ed 	b.w	4390 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    21b6:	f7ff fc15 	bl	19e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65c>
    21ba:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    21be:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    21c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21c6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    21ca:	6840      	ldr	r0, [r0, #4]
    21cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    21d0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    21d4:	b001      	add	sp, #4
    21d6:	2105      	movs	r1, #5
    21d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    21dc:	4710      	bx	r2
    21de:	f640 01b4 	movw	r1, #2228	; 0x8b4
    21e2:	2070      	movs	r0, #112	; 0x70
    21e4:	f002 f804 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21e8:	20000f74 	.word	0x20000f74
    21ec:	20000010 	.word	0x20000010
    21f0:	4001f508 	.word	0x4001f508
    21f4:	20000012 	.word	0x20000012
    21f8:	40000508 	.word	0x40000508

000021fc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    21fc:	4803      	ldr	r0, [pc, #12]	; (220c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    21fe:	b510      	push	{r4, lr}
    2200:	7840      	ldrb	r0, [r0, #1]
    2202:	f009 ff93 	bl	c12c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2206:	b280      	uxth	r0, r0
    2208:	bd10      	pop	{r4, pc}
    220a:	0000      	.short	0x0000
    220c:	20000012 	.word	0x20000012

00002210 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2210:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2214:	4682      	mov	sl, r0
    2216:	48dc      	ldr	r0, [pc, #880]	; (2588 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    2218:	b08b      	sub	sp, #44	; 0x2c
    221a:	6800      	ldr	r0, [r0, #0]
    221c:	4ddb      	ldr	r5, [pc, #876]	; (258c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    221e:	05c0      	lsls	r0, r0, #23
    2220:	0dc0      	lsrs	r0, r0, #23
    2222:	d00e      	beq.n	2242 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2224:	3810      	subs	r0, #16
    2226:	b240      	sxtb	r0, r0
    2228:	2800      	cmp	r0, #0
    222a:	bfb8      	it	lt
    222c:	f000 000f 	andlt.w	r0, r0, #15
    2230:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2234:	bfac      	ite	ge
    2236:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    223a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    223e:	0940      	lsrs	r0, r0, #5
    2240:	d00d      	beq.n	225e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2242:	980c      	ldr	r0, [sp, #48]	; 0x30
    2244:	f04f 0b00 	mov.w	fp, #0
    2248:	7800      	ldrb	r0, [r0, #0]
    224a:	2800      	cmp	r0, #0
    224c:	bf18      	it	ne
    224e:	2801      	cmpne	r0, #1
    2250:	d018      	beq.n	2284 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2252:	f240 714f 	movw	r1, #1871	; 0x74f
    2256:	f04f 0070 	mov.w	r0, #112	; 0x70
    225a:	f001 ffc9 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    225e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2262:	f04f 0b01 	mov.w	fp, #1
    2266:	2820      	cmp	r0, #32
    2268:	d007      	beq.n	227a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    226a:	980c      	ldr	r0, [sp, #48]	; 0x30
    226c:	7800      	ldrb	r0, [r0, #0]
    226e:	b148      	cbz	r0, 2284 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2270:	f240 714b 	movw	r1, #1867	; 0x74b
    2274:	2070      	movs	r0, #112	; 0x70
    2276:	f001 ffbb 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    227a:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    227e:	2070      	movs	r0, #112	; 0x70
    2280:	f001 ffb6 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2284:	4cc2      	ldr	r4, [pc, #776]	; (2590 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    2286:	b124      	cbz	r4, 2292 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2288:	2100      	movs	r1, #0
    228a:	f240 7052 	movw	r0, #1874	; 0x752
    228e:	f3af 8000 	nop.w
    2292:	49c0      	ldr	r1, [pc, #768]	; (2594 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    2294:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    2298:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    229c:	f04f 0801 	mov.w	r8, #1
    22a0:	9000      	str	r0, [sp, #0]
    22a2:	b124      	cbz	r4, 22ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    22a4:	2100      	movs	r1, #0
    22a6:	f240 705a 	movw	r0, #1882	; 0x75a
    22aa:	f3af 8000 	nop.w
    22ae:	f1b8 0f00 	cmp.w	r8, #0
    22b2:	d009      	beq.n	22c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    22b4:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    22b8:	f04f 0900 	mov.w	r9, #0
    22bc:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    22c0:	f1bb 0f00 	cmp.w	fp, #0
    22c4:	d007      	beq.n	22d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    22c6:	e032      	b.n	232e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    22c8:	48b3      	ldr	r0, [pc, #716]	; (2598 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    22ca:	2800      	cmp	r0, #0
    22cc:	bf18      	it	ne
    22ce:	f3af 8000 	nopne.w
    22d2:	b662      	cpsie	i
    22d4:	e7ee      	b.n	22b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    22d6:	4637      	mov	r7, r6
    22d8:	2001      	movs	r0, #1
    22da:	ea20 0607 	bic.w	r6, r0, r7
    22de:	48af      	ldr	r0, [pc, #700]	; (259c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    22e0:	2240      	movs	r2, #64	; 0x40
    22e2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    22e6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    22ea:	f00a f88d 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    22ee:	b124      	cbz	r4, 22fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    22f0:	2100      	movs	r1, #0
    22f2:	f240 50cd 	movw	r0, #1485	; 0x5cd
    22f6:	f3af 8000 	nop.w
    22fa:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    22fe:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2302:	6a09      	ldr	r1, [r1, #32]
    2304:	6201      	str	r1, [r0, #32]
    2306:	b124      	cbz	r4, 2312 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2308:	2100      	movs	r1, #0
    230a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    230e:	f3af 8000 	nop.w
    2312:	b124      	cbz	r4, 231e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2314:	2100      	movs	r1, #0
    2316:	f240 7064 	movw	r0, #1892	; 0x764
    231a:	f3af 8000 	nop.w
    231e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2322:	f88d 0004 	strb.w	r0, [sp, #4]
    2326:	f89d 0004 	ldrb.w	r0, [sp, #4]
    232a:	2800      	cmp	r0, #0
    232c:	d1b9      	bne.n	22a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    232e:	b124      	cbz	r4, 233a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    2330:	2100      	movs	r1, #0
    2332:	f240 706e 	movw	r0, #1902	; 0x76e
    2336:	f3af 8000 	nop.w
    233a:	f001 f855 	bl	33e8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    233e:	4680      	mov	r8, r0
    2340:	4633      	mov	r3, r6
    2342:	aa06      	add	r2, sp, #24
    2344:	990c      	ldr	r1, [sp, #48]	; 0x30
    2346:	f7ff fa79 	bl	183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>
    234a:	b124      	cbz	r4, 2356 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    234c:	2100      	movs	r1, #0
    234e:	f240 7075 	movw	r0, #1909	; 0x775
    2352:	f3af 8000 	nop.w
    2356:	4991      	ldr	r1, [pc, #580]	; (259c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    2358:	a806      	add	r0, sp, #24
    235a:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    235e:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    2362:	2901      	cmp	r1, #1
    2364:	bf18      	it	ne
    2366:	2902      	cmpne	r1, #2
    2368:	d13c      	bne.n	23e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    236a:	9906      	ldr	r1, [sp, #24]
    236c:	9b07      	ldr	r3, [sp, #28]
    236e:	eba1 0108 	sub.w	r1, r1, r8
    2372:	4a8b      	ldr	r2, [pc, #556]	; (25a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    2374:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2378:	eba3 0308 	sub.w	r3, r3, r8
    237c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2380:	2902      	cmp	r1, #2
    2382:	d371      	bcc.n	2468 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2384:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    2388:	d26e      	bcs.n	2468 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    238a:	429a      	cmp	r2, r3
    238c:	d36c      	bcc.n	2468 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    238e:	f04f 0901 	mov.w	r9, #1
    2392:	ab01      	add	r3, sp, #4
    2394:	aa05      	add	r2, sp, #20
    2396:	4631      	mov	r1, r6
    2398:	f7fe ff46 	bl	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
    239c:	2800      	cmp	r0, #0
    239e:	d06b      	beq.n	2478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    23a0:	f89d 1014 	ldrb.w	r1, [sp, #20]
    23a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    23a8:	4633      	mov	r3, r6
    23aa:	428a      	cmp	r2, r1
    23ac:	d068      	beq.n	2480 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    23ae:	2005      	movs	r0, #5
    23b0:	f7fe fd82 	bl	eb8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    23b4:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    23b8:	7048      	strb	r0, [r1, #1]
    23ba:	f89d 0014 	ldrb.w	r0, [sp, #20]
    23be:	2820      	cmp	r0, #32
    23c0:	bf03      	ittte	eq
    23c2:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    23c6:	f880 a020 	strbeq.w	sl, [r0, #32]
    23ca:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    23ce:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    23d2:	bf18      	it	ne
    23d4:	f880 a001 	strbne.w	sl, [r0, #1]
    23d8:	4632      	mov	r2, r6
    23da:	4651      	mov	r1, sl
    23dc:	f05f 0003 	movs.w	r0, #3
    23e0:	f7ff fbd2 	bl	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
    23e4:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    23e8:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    23ec:	f88d 0004 	strb.w	r0, [sp, #4]
    23f0:	f89d 7004 	ldrb.w	r7, [sp, #4]
    23f4:	b124      	cbz	r4, 2400 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    23f6:	2100      	movs	r1, #0
    23f8:	f240 707c 	movw	r0, #1916	; 0x77c
    23fc:	f3af 8000 	nop.w
    2400:	4868      	ldr	r0, [pc, #416]	; (25a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    2402:	2800      	cmp	r0, #0
    2404:	bf18      	it	ne
    2406:	f3af 8000 	nopne.w
    240a:	f3ef 8810 	mrs	r8, PRIMASK
    240e:	b672      	cpsid	i
    2410:	b124      	cbz	r4, 241c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    2412:	2100      	movs	r1, #0
    2414:	f240 7082 	movw	r0, #1922	; 0x782
    2418:	f3af 8000 	nop.w
    241c:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2420:	f88d 0004 	strb.w	r0, [sp, #4]
    2424:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2428:	2800      	cmp	r0, #0
    242a:	f47f af3a 	bne.w	22a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    242e:	b124      	cbz	r4, 243a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    2430:	2100      	movs	r1, #0
    2432:	f240 708a 	movw	r0, #1930	; 0x78a
    2436:	f3af 8000 	nop.w
    243a:	f10d 0e18 	add.w	lr, sp, #24
    243e:	9800      	ldr	r0, [sp, #0]
    2440:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2444:	f100 0008 	add.w	r0, r0, #8
    2448:	f1b9 0f00 	cmp.w	r9, #0
    244c:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2450:	d044      	beq.n	24dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2452:	b124      	cbz	r4, 245e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    2454:	2100      	movs	r1, #0
    2456:	f240 7097 	movw	r0, #1943	; 0x797
    245a:	f3af 8000 	nop.w
    245e:	f1bb 0f00 	cmp.w	fp, #0
    2462:	d12c      	bne.n	24be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2464:	e016      	b.n	2494 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    2466:	e7ff      	b.n	2468 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2468:	4632      	mov	r2, r6
    246a:	4651      	mov	r1, sl
    246c:	2004      	movs	r0, #4
    246e:	f7ff fb8b 	bl	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
    2472:	f04f 0901 	mov.w	r9, #1
    2476:	e7b5      	b.n	23e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2478:	4632      	mov	r2, r6
    247a:	4651      	mov	r1, sl
    247c:	2004      	movs	r0, #4
    247e:	e7af      	b.n	23e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2480:	2920      	cmp	r1, #32
    2482:	bf19      	ittee	ne
    2484:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2488:	7840      	ldrbne	r0, [r0, #1]
    248a:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    248e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2492:	e78f      	b.n	23b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2494:	b19f      	cbz	r7, 24be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2496:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    249a:	2820      	cmp	r0, #32
    249c:	d10f      	bne.n	24be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    249e:	b124      	cbz	r4, 24aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    24a0:	2100      	movs	r1, #0
    24a2:	f240 709c 	movw	r0, #1948	; 0x79c
    24a6:	f3af 8000 	nop.w
    24aa:	4631      	mov	r1, r6
    24ac:	2002      	movs	r0, #2
    24ae:	f7ff fb9b 	bl	1be8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x860>
    24b2:	b920      	cbnz	r0, 24be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    24b4:	980c      	ldr	r0, [sp, #48]	; 0x30
    24b6:	7800      	ldrb	r0, [r0, #0]
    24b8:	b3f0      	cbz	r0, 2538 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    24ba:	2801      	cmp	r0, #1
    24bc:	d04c      	beq.n	2558 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    24be:	b124      	cbz	r4, 24ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    24c0:	2100      	movs	r1, #0
    24c2:	f240 70b9 	movw	r0, #1977	; 0x7b9
    24c6:	f3af 8000 	nop.w
    24ca:	f1bb 0f00 	cmp.w	fp, #0
    24ce:	bf18      	it	ne
    24d0:	2001      	movne	r0, #1
    24d2:	d04a      	beq.n	256a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    24d4:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    24d8:	f04f 0901 	mov.w	r9, #1
    24dc:	b124      	cbz	r4, 24e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    24de:	2100      	movs	r1, #0
    24e0:	f240 70ca 	movw	r0, #1994	; 0x7ca
    24e4:	f3af 8000 	nop.w
    24e8:	f1b8 0f00 	cmp.w	r8, #0
    24ec:	d045      	beq.n	257a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    24ee:	b124      	cbz	r4, 24fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    24f0:	2100      	movs	r1, #0
    24f2:	f240 70ce 	movw	r0, #1998	; 0x7ce
    24f6:	f3af 8000 	nop.w
    24fa:	f1b9 0f00 	cmp.w	r9, #0
    24fe:	d011      	beq.n	2524 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2500:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2504:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2508:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    250c:	2820      	cmp	r0, #32
    250e:	d009      	beq.n	2524 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2510:	b124      	cbz	r4, 251c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    2512:	2100      	movs	r1, #0
    2514:	f240 70d5 	movw	r0, #2005	; 0x7d5
    2518:	f3af 8000 	nop.w
    251c:	4822      	ldr	r0, [pc, #136]	; (25a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    251e:	7840      	ldrb	r0, [r0, #1]
    2520:	f001 ff36 	bl	4390 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2524:	b124      	cbz	r4, 2530 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2526:	2100      	movs	r1, #0
    2528:	f240 70da 	movw	r0, #2010	; 0x7da
    252c:	f3af 8000 	nop.w
    2530:	b00d      	add	sp, #52	; 0x34
    2532:	4648      	mov	r0, r9
    2534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2538:	e7ff      	b.n	253a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    253a:	b124      	cbz	r4, 2546 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    253c:	2100      	movs	r1, #0
    253e:	f240 70a4 	movw	r0, #1956	; 0x7a4
    2542:	f3af 8000 	nop.w
    2546:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    254a:	4651      	mov	r1, sl
    254c:	2004      	movs	r0, #4
    254e:	f7ff fb1b 	bl	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
    2552:	f04f 0901 	mov.w	r9, #1
    2556:	e7c1      	b.n	24dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2558:	2c00      	cmp	r4, #0
    255a:	f43f aea2 	beq.w	22a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    255e:	2100      	movs	r1, #0
    2560:	f240 70af 	movw	r0, #1967	; 0x7af
    2564:	f3af 8000 	nop.w
    2568:	e69b      	b.n	22a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    256a:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    256e:	2001      	movs	r0, #1
    2570:	ea20 0101 	bic.w	r1, r0, r1
    2574:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    2578:	e7ac      	b.n	24d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    257a:	4807      	ldr	r0, [pc, #28]	; (2598 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    257c:	2800      	cmp	r0, #0
    257e:	bf18      	it	ne
    2580:	f3af 8000 	nopne.w
    2584:	b662      	cpsie	i
    2586:	e7b2      	b.n	24ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    2588:	e000ed04 	.word	0xe000ed04
    258c:	200012f4 	.word	0x200012f4
    2590:	00000000 	.word	0x00000000
    2594:	20000f74 	.word	0x20000f74
    2598:	00000000 	.word	0x00000000
    259c:	20001274 	.word	0x20001274
    25a0:	003fffff 	.word	0x003fffff
    25a4:	00000000 	.word	0x00000000
    25a8:	20000010 	.word	0x20000010

000025ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    25ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25b0:	48a5      	ldr	r0, [pc, #660]	; (2848 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    25b2:	b08c      	sub	sp, #48	; 0x30
    25b4:	6800      	ldr	r0, [r0, #0]
    25b6:	05c0      	lsls	r0, r0, #23
    25b8:	0dc0      	lsrs	r0, r0, #23
    25ba:	d011      	beq.n	25e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    25bc:	3810      	subs	r0, #16
    25be:	b240      	sxtb	r0, r0
    25c0:	2800      	cmp	r0, #0
    25c2:	bfb8      	it	lt
    25c4:	f000 000f 	andlt.w	r0, r0, #15
    25c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    25cc:	bfac      	ite	ge
    25ce:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    25d2:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    25d6:	0940      	lsrs	r0, r0, #5
    25d8:	bf08      	it	eq
    25da:	f04f 0901 	moveq.w	r9, #1
    25de:	d001      	beq.n	25e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    25e0:	f04f 0900 	mov.w	r9, #0
    25e4:	980c      	ldr	r0, [sp, #48]	; 0x30
    25e6:	7800      	ldrb	r0, [r0, #0]
    25e8:	2800      	cmp	r0, #0
    25ea:	f04f 0000 	mov.w	r0, #0
    25ee:	bf1c      	itt	ne
    25f0:	b00d      	addne	sp, #52	; 0x34
    25f2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25f6:	f8df a254 	ldr.w	sl, [pc, #596]	; 284c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    25fa:	4d95      	ldr	r5, [pc, #596]	; (2850 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    25fc:	4c95      	ldr	r4, [pc, #596]	; (2854 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    25fe:	f04f 0b00 	mov.w	fp, #0
    2602:	900b      	str	r0, [sp, #44]	; 0x2c
    2604:	b125      	cbz	r5, 2610 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    2606:	2100      	movs	r1, #0
    2608:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    260c:	f3af 8000 	nop.w
    2610:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2614:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2618:	f04f 0800 	mov.w	r8, #0
    261c:	b125      	cbz	r5, 2628 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    261e:	2100      	movs	r1, #0
    2620:	f240 605d 	movw	r0, #1629	; 0x65d
    2624:	f3af 8000 	nop.w
    2628:	f1b9 0f00 	cmp.w	r9, #0
    262c:	d11d      	bne.n	266a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    262e:	4637      	mov	r7, r6
    2630:	2001      	movs	r0, #1
    2632:	ea20 0607 	bic.w	r6, r0, r7
    2636:	4888      	ldr	r0, [pc, #544]	; (2858 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2638:	2240      	movs	r2, #64	; 0x40
    263a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    263e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2642:	f009 fee1 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2646:	b125      	cbz	r5, 2652 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    2648:	2100      	movs	r1, #0
    264a:	f240 50cd 	movw	r0, #1485	; 0x5cd
    264e:	f3af 8000 	nop.w
    2652:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2656:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    265a:	6a09      	ldr	r1, [r1, #32]
    265c:	6201      	str	r1, [r0, #32]
    265e:	b125      	cbz	r5, 266a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2660:	2100      	movs	r1, #0
    2662:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2666:	f3af 8000 	nop.w
    266a:	b125      	cbz	r5, 2676 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    266c:	2100      	movs	r1, #0
    266e:	f240 6065 	movw	r0, #1637	; 0x665
    2672:	f3af 8000 	nop.w
    2676:	f000 feb7 	bl	33e8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    267a:	4607      	mov	r7, r0
    267c:	4633      	mov	r3, r6
    267e:	466a      	mov	r2, sp
    2680:	990c      	ldr	r1, [sp, #48]	; 0x30
    2682:	f7ff f8db 	bl	183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>
    2686:	b125      	cbz	r5, 2692 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    2688:	2100      	movs	r1, #0
    268a:	f240 606b 	movw	r0, #1643	; 0x66b
    268e:	f3af 8000 	nop.w
    2692:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2696:	2820      	cmp	r0, #32
    2698:	d014      	beq.n	26c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    269a:	6920      	ldr	r0, [r4, #16]
    269c:	9900      	ldr	r1, [sp, #0]
    269e:	1a09      	subs	r1, r1, r0
    26a0:	0209      	lsls	r1, r1, #8
    26a2:	17ca      	asrs	r2, r1, #31
    26a4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    26a8:	1209      	asrs	r1, r1, #8
    26aa:	d50b      	bpl.n	26c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    26ac:	e9dd 2100 	ldrd	r2, r1, [sp]
    26b0:	1a89      	subs	r1, r1, r2
    26b2:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    26b6:	4408      	add	r0, r1
    26b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26bc:	e9cd 2000 	strd	r2, r0, [sp]
    26c0:	f04f 0801 	mov.w	r8, #1
    26c4:	b14d      	cbz	r5, 26da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    26c6:	2100      	movs	r1, #0
    26c8:	f240 6075 	movw	r0, #1653	; 0x675
    26cc:	f3af 8000 	nop.w
    26d0:	2100      	movs	r1, #0
    26d2:	f240 607b 	movw	r0, #1659	; 0x67b
    26d6:	f3af 8000 	nop.w
    26da:	9800      	ldr	r0, [sp, #0]
    26dc:	9901      	ldr	r1, [sp, #4]
    26de:	1bc0      	subs	r0, r0, r7
    26e0:	1bc9      	subs	r1, r1, r7
    26e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    26ea:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    26ee:	d205      	bcs.n	26fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    26f0:	458a      	cmp	sl, r1
    26f2:	d303      	bcc.n	26fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    26f4:	f1b9 0f00 	cmp.w	r9, #0
    26f8:	d10c      	bne.n	2714 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    26fa:	e003      	b.n	2704 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    26fc:	f1b9 0f00 	cmp.w	r9, #0
    2700:	d038      	beq.n	2774 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2702:	e094      	b.n	282e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2704:	4633      	mov	r3, r6
    2706:	463a      	mov	r2, r7
    2708:	4669      	mov	r1, sp
    270a:	4854      	ldr	r0, [pc, #336]	; (285c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    270c:	f7fe fc10 	bl	f30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2710:	ea48 0800 	orr.w	r8, r8, r0
    2714:	f1b8 0f00 	cmp.w	r8, #0
    2718:	d022      	beq.n	2760 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    271a:	9800      	ldr	r0, [sp, #0]
    271c:	f009 fd06 	bl	c12c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2720:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2724:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2728:	4b4d      	ldr	r3, [pc, #308]	; (2860 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    272a:	4411      	add	r1, r2
    272c:	1c49      	adds	r1, r1, #1
    272e:	1842      	adds	r2, r0, r1
    2730:	4298      	cmp	r0, r3
    2732:	d841      	bhi.n	27b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2734:	4849      	ldr	r0, [pc, #292]	; (285c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2736:	4281      	cmp	r1, r0
    2738:	dc5a      	bgt.n	27f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    273a:	4240      	negs	r0, r0
    273c:	4281      	cmp	r1, r0
    273e:	db5f      	blt.n	2800 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2740:	1c58      	adds	r0, r3, #1
    2742:	4290      	cmp	r0, r2
    2744:	bfdc      	itt	le
    2746:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    274a:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    274e:	dd05      	ble.n	275c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2750:	2a00      	cmp	r2, #0
    2752:	bfbc      	itt	lt
    2754:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2758:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    275c:	980c      	ldr	r0, [sp, #48]	; 0x30
    275e:	60c2      	str	r2, [r0, #12]
    2760:	2001      	movs	r0, #1
    2762:	900b      	str	r0, [sp, #44]	; 0x2c
    2764:	2d00      	cmp	r5, #0
    2766:	d062      	beq.n	282e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2768:	2100      	movs	r1, #0
    276a:	f240 608e 	movw	r0, #1678	; 0x68e
    276e:	f3af 8000 	nop.w
    2772:	e05c      	b.n	282e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2774:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2778:	aa08      	add	r2, sp, #32
    277a:	a907      	add	r1, sp, #28
    277c:	f000 fcd6 	bl	312c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2780:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2784:	2820      	cmp	r0, #32
    2786:	d01c      	beq.n	27c2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2788:	6920      	ldr	r0, [r4, #16]
    278a:	1d40      	adds	r0, r0, #5
    278c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2790:	e9dd 2100 	ldrd	r2, r1, [sp]
    2794:	1a89      	subs	r1, r1, r2
    2796:	4401      	add	r1, r0
    2798:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    279c:	e9cd 0100 	strd	r0, r1, [sp]
    27a0:	f009 fcc4 	bl	c12c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    27a4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    27a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    27ac:	4b2c      	ldr	r3, [pc, #176]	; (2860 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    27ae:	4411      	add	r1, r2
    27b0:	1c4a      	adds	r2, r1, #1
    27b2:	1881      	adds	r1, r0, r2
    27b4:	4298      	cmp	r0, r3
    27b6:	d918      	bls.n	27ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    27b8:	f240 6109 	movw	r1, #1545	; 0x609
    27bc:	2070      	movs	r0, #112	; 0x70
    27be:	f001 fd17 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27c2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    27c6:	f107 0609 	add.w	r6, r7, #9
    27ca:	b120      	cbz	r0, 27d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    27cc:	f001 fc98 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    27d0:	2800      	cmp	r0, #0
    27d2:	bf08      	it	eq
    27d4:	3632      	addeq	r6, #50	; 0x32
    27d6:	4823      	ldr	r0, [pc, #140]	; (2864 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    27d8:	7841      	ldrb	r1, [r0, #1]
    27da:	9807      	ldr	r0, [sp, #28]
    27dc:	4281      	cmp	r1, r0
    27de:	bf84      	itt	hi
    27e0:	1a08      	subhi	r0, r1, r0
    27e2:	4406      	addhi	r6, r0
    27e4:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    27e8:	e7d2      	b.n	2790 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    27ea:	481c      	ldr	r0, [pc, #112]	; (285c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    27ec:	4282      	cmp	r2, r0
    27ee:	dd04      	ble.n	27fa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    27f0:	f240 610a 	movw	r1, #1546	; 0x60a
    27f4:	2070      	movs	r0, #112	; 0x70
    27f6:	f001 fcfb 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27fa:	481b      	ldr	r0, [pc, #108]	; (2868 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    27fc:	4282      	cmp	r2, r0
    27fe:	da04      	bge.n	280a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2800:	f240 610b 	movw	r1, #1547	; 0x60b
    2804:	2070      	movs	r0, #112	; 0x70
    2806:	f001 fcf3 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    280a:	4818      	ldr	r0, [pc, #96]	; (286c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    280c:	4288      	cmp	r0, r1
    280e:	bfdc      	itt	le
    2810:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2814:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2818:	dd05      	ble.n	2826 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    281a:	2900      	cmp	r1, #0
    281c:	bfbc      	itt	lt
    281e:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2822:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2826:	980c      	ldr	r0, [sp, #48]	; 0x30
    2828:	60c1      	str	r1, [r0, #12]
    282a:	2001      	movs	r0, #1
    282c:	900b      	str	r0, [sp, #44]	; 0x2c
    282e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2832:	f88d 0010 	strb.w	r0, [sp, #16]
    2836:	f89d 0010 	ldrb.w	r0, [sp, #16]
    283a:	2800      	cmp	r0, #0
    283c:	f47f aee2 	bne.w	2604 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2840:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2842:	b00d      	add	sp, #52	; 0x34
    2844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2848:	e000ed04 	.word	0xe000ed04
    284c:	003fffff 	.word	0x003fffff
    2850:	00000000 	.word	0x00000000
    2854:	200012f4 	.word	0x200012f4
    2858:	20001274 	.word	0x20001274
    285c:	07a12000 	.word	0x07a12000
    2860:	1e847fff 	.word	0x1e847fff
    2864:	20000012 	.word	0x20000012
    2868:	f85ee000 	.word	0xf85ee000
    286c:	1e848000 	.word	0x1e848000

00002870 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2870:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2874:	4d88      	ldr	r5, [pc, #544]	; (2a98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    2876:	b08c      	sub	sp, #48	; 0x30
    2878:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    287c:	2000      	movs	r0, #0
    287e:	9009      	str	r0, [sp, #36]	; 0x24
    2880:	2001      	movs	r0, #1
    2882:	4c86      	ldr	r4, [pc, #536]	; (2a9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    2884:	f04f 0900 	mov.w	r9, #0
    2888:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    288c:	4680      	mov	r8, r0
    288e:	9008      	str	r0, [sp, #32]
    2890:	b124      	cbz	r4, 289c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2892:	2100      	movs	r1, #0
    2894:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2898:	f3af 8000 	nop.w
    289c:	9808      	ldr	r0, [sp, #32]
    289e:	2800      	cmp	r0, #0
    28a0:	d037      	beq.n	2912 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    28a2:	bf00      	nop
    28a4:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    28a8:	b124      	cbz	r4, 28b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    28aa:	2100      	movs	r1, #0
    28ac:	f240 70ee 	movw	r0, #2030	; 0x7ee
    28b0:	f3af 8000 	nop.w
    28b4:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    28b8:	2240      	movs	r2, #64	; 0x40
    28ba:	ea28 060a 	bic.w	r6, r8, sl
    28be:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    28c2:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    28c6:	4683      	mov	fp, r0
    28c8:	f009 fd9e 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    28cc:	b124      	cbz	r4, 28d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    28ce:	2100      	movs	r1, #0
    28d0:	f240 50cd 	movw	r0, #1485	; 0x5cd
    28d4:	f3af 8000 	nop.w
    28d8:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    28dc:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    28e0:	9000      	str	r0, [sp, #0]
    28e2:	6a09      	ldr	r1, [r1, #32]
    28e4:	6201      	str	r1, [r0, #32]
    28e6:	b124      	cbz	r4, 28f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    28e8:	2100      	movs	r1, #0
    28ea:	f240 50d1 	movw	r0, #1489	; 0x5d1
    28ee:	f3af 8000 	nop.w
    28f2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    28f6:	f88d 0008 	strb.w	r0, [sp, #8]
    28fa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    28fe:	b178      	cbz	r0, 2920 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2900:	2c00      	cmp	r4, #0
    2902:	bf1c      	itt	ne
    2904:	2100      	movne	r1, #0
    2906:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    290a:	d0c1      	beq.n	2890 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    290c:	f3af 8000 	nop.w
    2910:	e7be      	b.n	2890 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2912:	4863      	ldr	r0, [pc, #396]	; (2aa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2914:	2800      	cmp	r0, #0
    2916:	bf18      	it	ne
    2918:	f3af 8000 	nopne.w
    291c:	b662      	cpsie	i
    291e:	e7c1      	b.n	28a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2920:	b124      	cbz	r4, 292c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2922:	2100      	movs	r1, #0
    2924:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2928:	f3af 8000 	nop.w
    292c:	980c      	ldr	r0, [sp, #48]	; 0x30
    292e:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2932:	2803      	cmp	r0, #3
    2934:	d172      	bne.n	2a1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2936:	f8dd a000 	ldr.w	sl, [sp]
    293a:	f8cd a018 	str.w	sl, [sp, #24]
    293e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2940:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2944:	4288      	cmp	r0, r1
    2946:	bf14      	ite	ne
    2948:	f04f 0b00 	movne.w	fp, #0
    294c:	f04f 0b01 	moveq.w	fp, #1
    2950:	f10a 0c20 	add.w	ip, sl, #32
    2954:	4686      	mov	lr, r0
    2956:	2220      	movs	r2, #32
    2958:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    295c:	e003      	b.n	2966 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    295e:	4602      	mov	r2, r0
    2960:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2964:	7840      	ldrb	r0, [r0, #1]
    2966:	4288      	cmp	r0, r1
    2968:	d002      	beq.n	2970 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    296a:	2820      	cmp	r0, #32
    296c:	d00a      	beq.n	2984 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    296e:	e7f6      	b.n	295e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    2970:	2820      	cmp	r0, #32
    2972:	d007      	beq.n	2984 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2974:	4586      	cmp	lr, r0
    2976:	d107      	bne.n	2988 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    2978:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    297c:	7840      	ldrb	r0, [r0, #1]
    297e:	f88c 0000 	strb.w	r0, [ip]
    2982:	e007      	b.n	2994 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    2984:	4648      	mov	r0, r9
    2986:	e00c      	b.n	29a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2988:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    298c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2990:	7840      	ldrb	r0, [r0, #1]
    2992:	7048      	strb	r0, [r1, #1]
    2994:	b124      	cbz	r4, 29a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    2996:	2100      	movs	r1, #0
    2998:	f240 5037 	movw	r0, #1335	; 0x537
    299c:	f3af 8000 	nop.w
    29a0:	4640      	mov	r0, r8
    29a2:	ea10 0f0b 	tst.w	r0, fp
    29a6:	bf18      	it	ne
    29a8:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    29ac:	2800      	cmp	r0, #0
    29ae:	d052      	beq.n	2a56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    29b0:	b124      	cbz	r4, 29bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    29b2:	2100      	movs	r1, #0
    29b4:	f240 70fd 	movw	r0, #2045	; 0x7fd
    29b8:	f3af 8000 	nop.w
    29bc:	4632      	mov	r2, r6
    29be:	2001      	movs	r0, #1
    29c0:	990c      	ldr	r1, [sp, #48]	; 0x30
    29c2:	f7ff f8e1 	bl	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
    29c6:	9806      	ldr	r0, [sp, #24]
    29c8:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    29cc:	f88d 0008 	strb.w	r0, [sp, #8]
    29d0:	f89d a008 	ldrb.w	sl, [sp, #8]
    29d4:	b124      	cbz	r4, 29e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    29d6:	2100      	movs	r1, #0
    29d8:	f640 0008 	movw	r0, #2056	; 0x808
    29dc:	f3af 8000 	nop.w
    29e0:	4830      	ldr	r0, [pc, #192]	; (2aa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    29e2:	2800      	cmp	r0, #0
    29e4:	bf18      	it	ne
    29e6:	f3af 8000 	nopne.w
    29ea:	f3ef 8010 	mrs	r0, PRIMASK
    29ee:	b672      	cpsid	i
    29f0:	9008      	str	r0, [sp, #32]
    29f2:	b124      	cbz	r4, 29fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    29f4:	2100      	movs	r1, #0
    29f6:	f640 000d 	movw	r0, #2061	; 0x80d
    29fa:	f3af 8000 	nop.w
    29fe:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2a02:	f88d 0008 	strb.w	r0, [sp, #8]
    2a06:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2a0a:	b140      	cbz	r0, 2a1e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2a0c:	2c00      	cmp	r4, #0
    2a0e:	bf1c      	itt	ne
    2a10:	2100      	movne	r1, #0
    2a12:	f640 0011 	movwne	r0, #2065	; 0x811
    2a16:	f43f af3b 	beq.w	2890 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2a1a:	e777      	b.n	290c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2a1c:	e01b      	b.n	2a56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2a1e:	f1ba 0f00 	cmp.w	sl, #0
    2a22:	d008      	beq.n	2a36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2a24:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2a28:	2820      	cmp	r0, #32
    2a2a:	d104      	bne.n	2a36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2a2c:	4631      	mov	r1, r6
    2a2e:	2002      	movs	r0, #2
    2a30:	f7ff f8da 	bl	1be8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x860>
    2a34:	b308      	cbz	r0, 2a7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    2a36:	b124      	cbz	r4, 2a42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2a38:	2100      	movs	r1, #0
    2a3a:	f640 0025 	movw	r0, #2085	; 0x825
    2a3e:	f3af 8000 	nop.w
    2a42:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2a46:	ea28 0000 	bic.w	r0, r8, r0
    2a4a:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    2a4e:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2a52:	2001      	movs	r0, #1
    2a54:	9009      	str	r0, [sp, #36]	; 0x24
    2a56:	b124      	cbz	r4, 2a62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2a58:	2100      	movs	r1, #0
    2a5a:	f640 002e 	movw	r0, #2094	; 0x82e
    2a5e:	f3af 8000 	nop.w
    2a62:	9808      	ldr	r0, [sp, #32]
    2a64:	b188      	cbz	r0, 2a8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    2a66:	b124      	cbz	r4, 2a72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    2a68:	2100      	movs	r1, #0
    2a6a:	f640 0032 	movw	r0, #2098	; 0x832
    2a6e:	f3af 8000 	nop.w
    2a72:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a74:	b00d      	add	sp, #52	; 0x34
    2a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a7a:	2c00      	cmp	r4, #0
    2a7c:	d0f1      	beq.n	2a62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2a7e:	2100      	movs	r1, #0
    2a80:	f44f 6002 	mov.w	r0, #2080	; 0x820
    2a84:	f3af 8000 	nop.w
    2a88:	e7e6      	b.n	2a58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2a8a:	4805      	ldr	r0, [pc, #20]	; (2aa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2a8c:	2800      	cmp	r0, #0
    2a8e:	bf18      	it	ne
    2a90:	f3af 8000 	nopne.w
    2a94:	b662      	cpsie	i
    2a96:	e7e6      	b.n	2a66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    2a98:	200012f4 	.word	0x200012f4
	...

00002aa8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2aa8:	2820      	cmp	r0, #32
    2aaa:	bf24      	itt	cs
    2aac:	2000      	movcs	r0, #0
    2aae:	4770      	bxcs	lr
    2ab0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2ab4:	4b03      	ldr	r3, [pc, #12]	; (2ac4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2ab6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    2aba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2abe:	6042      	str	r2, [r0, #4]
    2ac0:	2001      	movs	r0, #1
    2ac2:	4770      	bx	lr
    2ac4:	20000f74 	.word	0x20000f74

00002ac8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2ac8:	b510      	push	{r4, lr}
    2aca:	2820      	cmp	r0, #32
    2acc:	d211      	bcs.n	2af2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2ace:	490e      	ldr	r1, [pc, #56]	; (2b08 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2ad0:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2ad4:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2ad8:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2adc:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2ae0:	b13b      	cbz	r3, 2af2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2ae2:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2ae6:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2aea:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2aee:	2a01      	cmp	r2, #1
    2af0:	d001      	beq.n	2af6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2af2:	2000      	movs	r0, #0
    2af4:	bd10      	pop	{r4, pc}
    2af6:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    2afa:	4601      	mov	r1, r0
    2afc:	2000      	movs	r0, #0
    2afe:	f7ff f843 	bl	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
    2b02:	2001      	movs	r0, #1
    2b04:	bd10      	pop	{r4, pc}
    2b06:	0000      	.short	0x0000
    2b08:	200012f4 	.word	0x200012f4

00002b0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b10:	4e80      	ldr	r6, [pc, #512]	; (2d14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2b12:	4680      	mov	r8, r0
    2b14:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2b18:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2b1c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2b20:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2b24:	2800      	cmp	r0, #0
    2b26:	d068      	beq.n	2bfa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2b28:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2b2c:	4d7a      	ldr	r5, [pc, #488]	; (2d18 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    2b2e:	b125      	cbz	r5, 2b3a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2b30:	2100      	movs	r1, #0
    2b32:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2b36:	f3af 8000 	nop.w
    2b3a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2b3e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2b42:	2801      	cmp	r0, #1
    2b44:	d018      	beq.n	2b78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2b46:	b2c0      	uxtb	r0, r0
    2b48:	2804      	cmp	r0, #4
    2b4a:	bf1c      	itt	ne
    2b4c:	2805      	cmpne	r0, #5
    2b4e:	2806      	cmpne	r0, #6
    2b50:	d058      	beq.n	2c04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2b52:	b12d      	cbz	r5, 2b60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2b54:	f04f 0100 	mov.w	r1, #0
    2b58:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2b5c:	f3af 8000 	nop.w
    2b60:	f001 fc6c 	bl	443c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2b64:	b125      	cbz	r5, 2b70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2b66:	2100      	movs	r1, #0
    2b68:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2b6c:	f3af 8000 	nop.w
    2b70:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2b74:	2801      	cmp	r0, #1
    2b76:	d1e6      	bne.n	2b46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2b78:	2401      	movs	r4, #1
    2b7a:	b125      	cbz	r5, 2b86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2b7c:	2100      	movs	r1, #0
    2b7e:	f640 30d8 	movw	r0, #3032	; 0xbd8
    2b82:	f3af 8000 	nop.w
    2b86:	2c00      	cmp	r4, #0
    2b88:	d042      	beq.n	2c10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    2b8a:	2000      	movs	r0, #0
    2b8c:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2b90:	b125      	cbz	r5, 2b9c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2b92:	2100      	movs	r1, #0
    2b94:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2b98:	f3af 8000 	nop.w
    2b9c:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2ba0:	2001      	movs	r0, #1
    2ba2:	ea20 090b 	bic.w	r9, r0, fp
    2ba6:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2baa:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2bae:	2240      	movs	r2, #64	; 0x40
    2bb0:	f009 fc2a 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2bb4:	b125      	cbz	r5, 2bc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2bb6:	2100      	movs	r1, #0
    2bb8:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2bbc:	f3af 8000 	nop.w
    2bc0:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2bc4:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2bc8:	6a00      	ldr	r0, [r0, #32]
    2bca:	f8ca 0020 	str.w	r0, [sl, #32]
    2bce:	b125      	cbz	r5, 2bda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    2bd0:	2100      	movs	r1, #0
    2bd2:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2bd6:	f3af 8000 	nop.w
    2bda:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2bde:	f88d 0000 	strb.w	r0, [sp]
    2be2:	f89d 0000 	ldrb.w	r0, [sp]
    2be6:	b1d0      	cbz	r0, 2c1e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    2be8:	2d00      	cmp	r5, #0
    2bea:	bf1c      	itt	ne
    2bec:	2100      	movne	r1, #0
    2bee:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2bf2:	d0c2      	beq.n	2b7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2bf4:	f3af 8000 	nop.w
    2bf8:	e7bf      	b.n	2b7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2bfa:	f640 31b8 	movw	r1, #3000	; 0xbb8
    2bfe:	2070      	movs	r0, #112	; 0x70
    2c00:	f001 faf6 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c04:	464a      	mov	r2, r9
    2c06:	4641      	mov	r1, r8
    2c08:	2001      	movs	r0, #1
    2c0a:	f7fe ffbd 	bl	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
    2c0e:	e7a9      	b.n	2b64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2c10:	4842      	ldr	r0, [pc, #264]	; (2d1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2c12:	2800      	cmp	r0, #0
    2c14:	bf18      	it	ne
    2c16:	f3af 8000 	nopne.w
    2c1a:	b662      	cpsie	i
    2c1c:	e7b5      	b.n	2b8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2c1e:	b125      	cbz	r5, 2c2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    2c20:	2100      	movs	r1, #0
    2c22:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2c26:	f3af 8000 	nop.w
    2c2a:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    2c2e:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2c32:	4614      	mov	r4, r2
    2c34:	f04f 0b20 	mov.w	fp, #32
    2c38:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2c3c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2c40:	e003      	b.n	2c4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    2c42:	46a3      	mov	fp, r4
    2c44:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2c48:	785c      	ldrb	r4, [r3, #1]
    2c4a:	4544      	cmp	r4, r8
    2c4c:	d002      	beq.n	2c54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    2c4e:	2c20      	cmp	r4, #32
    2c50:	d02b      	beq.n	2caa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2c52:	e7f6      	b.n	2c42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2c54:	2c20      	cmp	r4, #32
    2c56:	d028      	beq.n	2caa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2c58:	42a2      	cmp	r2, r4
    2c5a:	d104      	bne.n	2c66 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2c5c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2c60:	7840      	ldrb	r0, [r0, #1]
    2c62:	7008      	strb	r0, [r1, #0]
    2c64:	e005      	b.n	2c72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2c66:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2c6a:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    2c6e:	7849      	ldrb	r1, [r1, #1]
    2c70:	7041      	strb	r1, [r0, #1]
    2c72:	f1ba 0f00 	cmp.w	sl, #0
    2c76:	d011      	beq.n	2c9c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2c78:	b125      	cbz	r5, 2c84 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    2c7a:	2100      	movs	r1, #0
    2c7c:	f240 502f 	movw	r0, #1327	; 0x52f
    2c80:	f3af 8000 	nop.w
    2c84:	f89a 0000 	ldrb.w	r0, [sl]
    2c88:	42a0      	cmp	r0, r4
    2c8a:	d107      	bne.n	2c9c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2c8c:	b125      	cbz	r5, 2c98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    2c8e:	2100      	movs	r1, #0
    2c90:	f240 5032 	movw	r0, #1330	; 0x532
    2c94:	f3af 8000 	nop.w
    2c98:	f88a b000 	strb.w	fp, [sl]
    2c9c:	b15d      	cbz	r5, 2cb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2c9e:	2100      	movs	r1, #0
    2ca0:	f240 5037 	movw	r0, #1335	; 0x537
    2ca4:	f3af 8000 	nop.w
    2ca8:	e000      	b.n	2cac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    2caa:	b125      	cbz	r5, 2cb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2cac:	2100      	movs	r1, #0
    2cae:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2cb2:	f3af 8000 	nop.w
    2cb6:	481a      	ldr	r0, [pc, #104]	; (2d20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2cb8:	2800      	cmp	r0, #0
    2cba:	bf18      	it	ne
    2cbc:	f3af 8000 	nopne.w
    2cc0:	f3ef 8410 	mrs	r4, PRIMASK
    2cc4:	b672      	cpsid	i
    2cc6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2cca:	f88d 0000 	strb.w	r0, [sp]
    2cce:	f89d 0000 	ldrb.w	r0, [sp]
    2cd2:	b138      	cbz	r0, 2ce4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2cd4:	2d00      	cmp	r5, #0
    2cd6:	bf1c      	itt	ne
    2cd8:	2100      	movne	r1, #0
    2cda:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    2cde:	f43f af4c 	beq.w	2b7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2ce2:	e787      	b.n	2bf4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2ce4:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2ce8:	2001      	movs	r0, #1
    2cea:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2cee:	b154      	cbz	r4, 2d06 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2cf0:	2d00      	cmp	r5, #0
    2cf2:	bf08      	it	eq
    2cf4:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cf8:	2100      	movs	r1, #0
    2cfa:	f640 30fe 	movw	r0, #3070	; 0xbfe
    2cfe:	f3af 8000 	nop.w
    2d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d06:	4805      	ldr	r0, [pc, #20]	; (2d1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2d08:	2800      	cmp	r0, #0
    2d0a:	bf18      	it	ne
    2d0c:	f3af 8000 	nopne.w
    2d10:	b662      	cpsie	i
    2d12:	e7ed      	b.n	2cf0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    2d14:	200012f4 	.word	0x200012f4
	...

00002d24 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2d24:	b570      	push	{r4, r5, r6, lr}
    2d26:	460d      	mov	r5, r1
    2d28:	4606      	mov	r6, r0
    2d2a:	f001 f9d7 	bl	40dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2d2e:	480f      	ldr	r0, [pc, #60]	; (2d6c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2d30:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2d34:	2400      	movs	r4, #0
    2d36:	3880      	subs	r0, #128	; 0x80
    2d38:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2d3c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2d40:	b129      	cbz	r1, 2d4e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2d42:	1c61      	adds	r1, r4, #1
    2d44:	b2cc      	uxtb	r4, r1
    2d46:	2c20      	cmp	r4, #32
    2d48:	d3f8      	bcc.n	2d3c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2d4a:	2020      	movs	r0, #32
    2d4c:	bd70      	pop	{r4, r5, r6, pc}
    2d4e:	4808      	ldr	r0, [pc, #32]	; (2d70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2d50:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2d54:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2d58:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2d5c:	4621      	mov	r1, r4
    2d5e:	6045      	str	r5, [r0, #4]
    2d60:	2001      	movs	r0, #1
    2d62:	f7fe ff11 	bl	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
    2d66:	4620      	mov	r0, r4
    2d68:	bd70      	pop	{r4, r5, r6, pc}
    2d6a:	0000      	.short	0x0000
    2d6c:	200012f4 	.word	0x200012f4
    2d70:	20000f74 	.word	0x20000f74

00002d74 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d78:	b083      	sub	sp, #12
    2d7a:	f000 fb35 	bl	33e8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2d7e:	4605      	mov	r5, r0
    2d80:	f000 fdfe 	bl	3980 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2d84:	4c67      	ldr	r4, [pc, #412]	; (2f24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2d86:	68a0      	ldr	r0, [r4, #8]
    2d88:	f1b0 3fff 	cmp.w	r0, #4294967295
    2d8c:	bf1c      	itt	ne
    2d8e:	f04f 30ff 	movne.w	r0, #4294967295
    2d92:	60a0      	strne	r0, [r4, #8]
    2d94:	7fa0      	ldrb	r0, [r4, #30]
    2d96:	f8df b190 	ldr.w	fp, [pc, #400]	; 2f28 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    2d9a:	b9a8      	cbnz	r0, 2dc8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2d9c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2da0:	1a08      	subs	r0, r1, r0
    2da2:	0200      	lsls	r0, r0, #8
    2da4:	17c1      	asrs	r1, r0, #31
    2da6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2daa:	1200      	asrs	r0, r0, #8
    2dac:	f44f 710c 	mov.w	r1, #560	; 0x230
    2db0:	f009 f9e9 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2db4:	6921      	ldr	r1, [r4, #16]
    2db6:	4408      	add	r0, r1
    2db8:	1a28      	subs	r0, r5, r0
    2dba:	0200      	lsls	r0, r0, #8
    2dbc:	17c1      	asrs	r1, r0, #31
    2dbe:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2dc2:	1200      	asrs	r0, r0, #8
    2dc4:	0fc0      	lsrs	r0, r0, #31
    2dc6:	d013      	beq.n	2df0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2dc8:	7e60      	ldrb	r0, [r4, #25]
    2dca:	b328      	cbz	r0, 2e18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2dcc:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2dd0:	f88d 0000 	strb.w	r0, [sp]
    2dd4:	f89d 0000 	ldrb.w	r0, [sp]
    2dd8:	b1f0      	cbz	r0, 2e18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2dda:	f000 fc13 	bl	3604 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2dde:	bf00      	nop
    2de0:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2de4:	b1f0      	cbz	r0, 2e24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    2de6:	f240 4147 	movw	r1, #1095	; 0x447
    2dea:	2070      	movs	r0, #112	; 0x70
    2dec:	f001 fa00 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2df0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2df4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2df8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2dfc:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2e00:	6840      	ldr	r0, [r0, #4]
    2e02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2e06:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    2e0a:	2108      	movs	r1, #8
    2e0c:	4790      	blx	r2
    2e0e:	f44f 6186 	mov.w	r1, #1072	; 0x430
    2e12:	2070      	movs	r0, #112	; 0x70
    2e14:	f001 f9ec 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e18:	1ce8      	adds	r0, r5, #3
    2e1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e1e:	f000 fae9 	bl	33f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2e22:	e7dd      	b.n	2de0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2e24:	f04f 0a01 	mov.w	sl, #1
    2e28:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2e2c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2e30:	2820      	cmp	r0, #32
    2e32:	d024      	beq.n	2e7e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2e34:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2e38:	2020      	movs	r0, #32
    2e3a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2e3e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2e42:	2600      	movs	r6, #0
    2e44:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2e48:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2e4c:	4837      	ldr	r0, [pc, #220]	; (2f2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    2e4e:	6026      	str	r6, [r4, #0]
    2e50:	7800      	ldrb	r0, [r0, #0]
    2e52:	2802      	cmp	r0, #2
    2e54:	bf16      	itet	ne
    2e56:	2803      	cmpne	r0, #3
    2e58:	2001      	moveq	r0, #1
    2e5a:	2000      	movne	r0, #0
    2e5c:	7720      	strb	r0, [r4, #28]
    2e5e:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2e62:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2e66:	f899 0020 	ldrb.w	r0, [r9, #32]
    2e6a:	2820      	cmp	r0, #32
    2e6c:	d031      	beq.n	2ed2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2e6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2e72:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2e76:	7d81      	ldrb	r1, [r0, #22]
    2e78:	2901      	cmp	r1, #1
    2e7a:	d005      	beq.n	2e88 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    2e7c:	e029      	b.n	2ed2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2e7e:	f240 414a 	movw	r1, #1098	; 0x44a
    2e82:	2070      	movs	r0, #112	; 0x70
    2e84:	f001 f9b4 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e88:	46ab      	mov	fp, r5
    2e8a:	f100 0508 	add.w	r5, r0, #8
    2e8e:	8a40      	ldrh	r0, [r0, #18]
    2e90:	aa01      	add	r2, sp, #4
    2e92:	4669      	mov	r1, sp
    2e94:	f000 f94a 	bl	312c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2e98:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2e9c:	2820      	cmp	r0, #32
    2e9e:	d004      	beq.n	2eaa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    2ea0:	6920      	ldr	r0, [r4, #16]
    2ea2:	1d40      	adds	r0, r0, #5
    2ea4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ea8:	e00b      	b.n	2ec2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    2eaa:	8968      	ldrh	r0, [r5, #10]
    2eac:	f10b 0b09 	add.w	fp, fp, #9
    2eb0:	b128      	cbz	r0, 2ebe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    2eb2:	f001 f925 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2eb6:	2800      	cmp	r0, #0
    2eb8:	bf08      	it	eq
    2eba:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    2ebe:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    2ec2:	e9d5 2100 	ldrd	r2, r1, [r5]
    2ec6:	1a89      	subs	r1, r1, r2
    2ec8:	6028      	str	r0, [r5, #0]
    2eca:	4408      	add	r0, r1
    2ecc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ed0:	6068      	str	r0, [r5, #4]
    2ed2:	4639      	mov	r1, r7
    2ed4:	2001      	movs	r0, #1
    2ed6:	f7fe fe87 	bl	1be8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x860>
    2eda:	2800      	cmp	r0, #0
    2edc:	d0f9      	beq.n	2ed2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2ede:	4814      	ldr	r0, [pc, #80]	; (2f30 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    2ee0:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2ee4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2ee8:	2802      	cmp	r0, #2
    2eea:	d104      	bne.n	2ef6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    2eec:	463a      	mov	r2, r7
    2eee:	4641      	mov	r1, r8
    2ef0:	2006      	movs	r0, #6
    2ef2:	f7fe fe49 	bl	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
    2ef6:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2efa:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    2efe:	2820      	cmp	r0, #32
    2f00:	d003      	beq.n	2f0a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    2f02:	480c      	ldr	r0, [pc, #48]	; (2f34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    2f04:	7840      	ldrb	r0, [r0, #1]
    2f06:	f001 fa43 	bl	4390 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2f0a:	7f20      	ldrb	r0, [r4, #28]
    2f0c:	2800      	cmp	r0, #0
    2f0e:	bf04      	itt	eq
    2f10:	b003      	addeq	sp, #12
    2f12:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f16:	f000 fd7d 	bl	3a14 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2f1a:	7726      	strb	r6, [r4, #28]
    2f1c:	7766      	strb	r6, [r4, #29]
    2f1e:	b003      	add	sp, #12
    2f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f24:	200012f4 	.word	0x200012f4
    2f28:	20000f74 	.word	0x20000f74
    2f2c:	20000012 	.word	0x20000012
    2f30:	20001274 	.word	0x20001274
    2f34:	20000010 	.word	0x20000010

00002f38 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2f38:	b510      	push	{r4, lr}
    2f3a:	4c32      	ldr	r4, [pc, #200]	; (3004 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2f3c:	b082      	sub	sp, #8
    2f3e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2f42:	2920      	cmp	r1, #32
    2f44:	d008      	beq.n	2f58 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2f46:	68a1      	ldr	r1, [r4, #8]
    2f48:	f1b1 3fff 	cmp.w	r1, #4294967295
    2f4c:	d009      	beq.n	2f62 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2f4e:	f640 21e9 	movw	r1, #2793	; 0xae9
    2f52:	2070      	movs	r0, #112	; 0x70
    2f54:	f001 f94c 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f58:	f640 21e8 	movw	r1, #2792	; 0xae8
    2f5c:	2070      	movs	r0, #112	; 0x70
    2f5e:	f001 f947 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f62:	6862      	ldr	r2, [r4, #4]
    2f64:	4601      	mov	r1, r0
    2f66:	4b28      	ldr	r3, [pc, #160]	; (3008 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2f68:	1850      	adds	r0, r2, r1
    2f6a:	429a      	cmp	r2, r3
    2f6c:	d904      	bls.n	2f78 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    2f6e:	f240 6109 	movw	r1, #1545	; 0x609
    2f72:	2070      	movs	r0, #112	; 0x70
    2f74:	f001 f93c 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f78:	4a24      	ldr	r2, [pc, #144]	; (300c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2f7a:	4291      	cmp	r1, r2
    2f7c:	dd04      	ble.n	2f88 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    2f7e:	f240 610a 	movw	r1, #1546	; 0x60a
    2f82:	2070      	movs	r0, #112	; 0x70
    2f84:	f001 f934 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f88:	4a21      	ldr	r2, [pc, #132]	; (3010 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2f8a:	4291      	cmp	r1, r2
    2f8c:	da04      	bge.n	2f98 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    2f8e:	f240 610b 	movw	r1, #1547	; 0x60b
    2f92:	2070      	movs	r0, #112	; 0x70
    2f94:	f001 f92c 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f98:	491e      	ldr	r1, [pc, #120]	; (3014 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    2f9a:	4281      	cmp	r1, r0
    2f9c:	bfdc      	itt	le
    2f9e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2fa2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2fa6:	dd05      	ble.n	2fb4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2fa8:	2800      	cmp	r0, #0
    2faa:	bfbc      	itt	lt
    2fac:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2fb0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2fb4:	aa01      	add	r2, sp, #4
    2fb6:	4669      	mov	r1, sp
    2fb8:	f000 f8b8 	bl	312c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2fbc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2fc0:	280f      	cmp	r0, #15
    2fc2:	bf8c      	ite	hi
    2fc4:	2001      	movhi	r0, #1
    2fc6:	2000      	movls	r0, #0
    2fc8:	9900      	ldr	r1, [sp, #0]
    2fca:	4408      	add	r0, r1
    2fcc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2fd0:	60a1      	str	r1, [r4, #8]
    2fd2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2fd6:	f88d 0000 	strb.w	r0, [sp]
    2fda:	f89d 0000 	ldrb.w	r0, [sp]
    2fde:	2800      	cmp	r0, #0
    2fe0:	bf04      	itt	eq
    2fe2:	b002      	addeq	sp, #8
    2fe4:	bd10      	popeq	{r4, pc}
    2fe6:	2301      	movs	r3, #1
    2fe8:	2203      	movs	r2, #3
    2fea:	2005      	movs	r0, #5
    2fec:	f000 fb86 	bl	36fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2ff0:	2800      	cmp	r0, #0
    2ff2:	bf1c      	itt	ne
    2ff4:	b002      	addne	sp, #8
    2ff6:	bd10      	popne	{r4, pc}
    2ff8:	f640 21f1 	movw	r1, #2801	; 0xaf1
    2ffc:	2070      	movs	r0, #112	; 0x70
    2ffe:	f001 f8f7 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3002:	0000      	.short	0x0000
    3004:	200012f4 	.word	0x200012f4
    3008:	1e847fff 	.word	0x1e847fff
    300c:	07a12000 	.word	0x07a12000
    3010:	f85ee000 	.word	0xf85ee000
    3014:	1e848000 	.word	0x1e848000

00003018 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3018:	b570      	push	{r4, r5, r6, lr}
    301a:	4c1e      	ldr	r4, [pc, #120]	; (3094 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    301c:	2120      	movs	r1, #32
    301e:	f884 1020 	strb.w	r1, [r4, #32]
    3022:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3026:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    302a:	2000      	movs	r0, #0
    302c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    3030:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3034:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3038:	1e42      	subs	r2, r0, #1
    303a:	60a2      	str	r2, [r4, #8]
    303c:	6020      	str	r0, [r4, #0]
    303e:	77a0      	strb	r0, [r4, #30]
    3040:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3044:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3048:	7720      	strb	r0, [r4, #28]
    304a:	7760      	strb	r0, [r4, #29]
    304c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    3050:	4911      	ldr	r1, [pc, #68]	; (3098 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    3052:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3056:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    305a:	7008      	strb	r0, [r1, #0]
    305c:	7048      	strb	r0, [r1, #1]
    305e:	8048      	strh	r0, [r1, #2]
    3060:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3064:	2210      	movs	r2, #16
    3066:	7088      	strb	r0, [r1, #2]
    3068:	f801 0f04 	strb.w	r0, [r1, #4]!
    306c:	1e52      	subs	r2, r2, #1
    306e:	d1fa      	bne.n	3066 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    3070:	4d0a      	ldr	r5, [pc, #40]	; (309c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    3072:	2601      	movs	r6, #1
    3074:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    3078:	20ff      	movs	r0, #255	; 0xff
    307a:	7028      	strb	r0, [r5, #0]
    307c:	4808      	ldr	r0, [pc, #32]	; (30a0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    307e:	f001 f969 	bl	4354 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3082:	7068      	strb	r0, [r5, #1]
    3084:	f001 f9c4 	bl	4410 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3088:	60a8      	str	r0, [r5, #8]
    308a:	f000 fcf1 	bl	3a70 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    308e:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    3092:	bd70      	pop	{r4, r5, r6, pc}
    3094:	200012f4 	.word	0x200012f4
    3098:	20000012 	.word	0x20000012
    309c:	20000010 	.word	0x20000010
    30a0:	00001a45 	.word	0x00001a45

000030a4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    30a4:	b570      	push	{r4, r5, r6, lr}
    30a6:	4604      	mov	r4, r0
    30a8:	4615      	mov	r5, r2
    30aa:	4608      	mov	r0, r1
    30ac:	f009 f83e 	bl	c12c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    30b0:	4a0f      	ldr	r2, [pc, #60]	; (30f0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    30b2:	1b01      	subs	r1, r0, r4
    30b4:	1c53      	adds	r3, r2, #1
    30b6:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    30ba:	bf24      	itt	cs
    30bc:	eba4 0c00 	subcs.w	ip, r4, r0
    30c0:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    30c4:	d30b      	bcc.n	30de <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    30c6:	428a      	cmp	r2, r1
    30c8:	d203      	bcs.n	30d2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    30ca:	1b11      	subs	r1, r2, r4
    30cc:	4408      	add	r0, r1
    30ce:	1c41      	adds	r1, r0, #1
    30d0:	e005      	b.n	30de <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    30d2:	4562      	cmp	r2, ip
    30d4:	d207      	bcs.n	30e6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    30d6:	1a10      	subs	r0, r2, r0
    30d8:	4420      	add	r0, r4
    30da:	1c40      	adds	r0, r0, #1
    30dc:	4241      	negs	r1, r0
    30de:	f101 000f 	add.w	r0, r1, #15
    30e2:	1a28      	subs	r0, r5, r0
    30e4:	bd70      	pop	{r4, r5, r6, pc}
    30e6:	f640 310c 	movw	r1, #2828	; 0xb0c
    30ea:	2070      	movs	r0, #112	; 0x70
    30ec:	f001 f880 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30f0:	1e847fff 	.word	0x1e847fff

000030f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    30f4:	0b41      	lsrs	r1, r0, #13
    30f6:	f248 6237 	movw	r2, #34359	; 0x8637
    30fa:	4351      	muls	r1, r2
    30fc:	0c0a      	lsrs	r2, r1, #16
    30fe:	4b09      	ldr	r3, [pc, #36]	; (3124 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3100:	0251      	lsls	r1, r2, #9
    3102:	fb02 0203 	mla	r2, r2, r3, r0
    3106:	4808      	ldr	r0, [pc, #32]	; (3128 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3108:	4350      	muls	r0, r2
    310a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    310e:	306e      	adds	r0, #110	; 0x6e
    3110:	0d40      	lsrs	r0, r0, #21
    3112:	425b      	negs	r3, r3
    3114:	fb10 f303 	smulbb	r3, r0, r3
    3118:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    311c:	bf88      	it	hi
    311e:	1c49      	addhi	r1, r1, #1
    3120:	4408      	add	r0, r1
    3122:	4770      	bx	lr
    3124:	ffffc2f7 	.word	0xffffc2f7
    3128:	00010c6f 	.word	0x00010c6f

0000312c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    312c:	0b43      	lsrs	r3, r0, #13
    312e:	f248 6c37 	movw	ip, #34359	; 0x8637
    3132:	fb03 f30c 	mul.w	r3, r3, ip
    3136:	b430      	push	{r4, r5}
    3138:	0c1b      	lsrs	r3, r3, #16
    313a:	f8df c044 	ldr.w	ip, [pc, #68]	; 3180 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    313e:	025c      	lsls	r4, r3, #9
    3140:	fb03 030c 	mla	r3, r3, ip, r0
    3144:	480f      	ldr	r0, [pc, #60]	; (3184 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3146:	4358      	muls	r0, r3
    3148:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    314c:	eb04 000c 	add.w	r0, r4, ip
    3150:	f643 5409 	movw	r4, #15625	; 0x3d09
    3154:	fb1c f404 	smulbb	r4, ip, r4
    3158:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    315c:	f643 5508 	movw	r5, #15624	; 0x3d08
    3160:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3164:	442c      	add	r4, r5
    3166:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    316a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    316e:	bf84      	itt	hi
    3170:	f04f 0c00 	movhi.w	ip, #0
    3174:	1c40      	addhi	r0, r0, #1
    3176:	6008      	str	r0, [r1, #0]
    3178:	f882 c000 	strb.w	ip, [r2]
    317c:	bc30      	pop	{r4, r5}
    317e:	4770      	bx	lr
    3180:	ffffc2f7 	.word	0xffffc2f7
    3184:	00010c6f 	.word	0x00010c6f

00003188 <MPSL_IRQ_RTC0_Handler>:
    3188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    318c:	4c36      	ldr	r4, [pc, #216]	; (3268 <MPSL_IRQ_RTC0_Handler+0xe0>)
    318e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3192:	f44f 6600 	mov.w	r6, #2048	; 0x800
    3196:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    319a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    319e:	f04f 0500 	mov.w	r5, #0
    31a2:	d019      	beq.n	31d8 <MPSL_IRQ_RTC0_Handler+0x50>
    31a4:	4831      	ldr	r0, [pc, #196]	; (326c <MPSL_IRQ_RTC0_Handler+0xe4>)
    31a6:	6800      	ldr	r0, [r0, #0]
    31a8:	b1b0      	cbz	r0, 31d8 <MPSL_IRQ_RTC0_Handler+0x50>
    31aa:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    31ae:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    31b2:	482f      	ldr	r0, [pc, #188]	; (3270 <MPSL_IRQ_RTC0_Handler+0xe8>)
    31b4:	6800      	ldr	r0, [r0, #0]
    31b6:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    31ba:	1a40      	subs	r0, r0, r1
    31bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    31c0:	2802      	cmp	r0, #2
    31c2:	d302      	bcc.n	31ca <MPSL_IRQ_RTC0_Handler+0x42>
    31c4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    31c8:	d306      	bcc.n	31d8 <MPSL_IRQ_RTC0_Handler+0x50>
    31ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    31ce:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    31d2:	2004      	movs	r0, #4
    31d4:	f7fe ff2c 	bl	2030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    31d8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    31dc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    31e0:	d019      	beq.n	3216 <MPSL_IRQ_RTC0_Handler+0x8e>
    31e2:	4824      	ldr	r0, [pc, #144]	; (3274 <MPSL_IRQ_RTC0_Handler+0xec>)
    31e4:	6800      	ldr	r0, [r0, #0]
    31e6:	b1b0      	cbz	r0, 3216 <MPSL_IRQ_RTC0_Handler+0x8e>
    31e8:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    31ec:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    31f0:	4821      	ldr	r0, [pc, #132]	; (3278 <MPSL_IRQ_RTC0_Handler+0xf0>)
    31f2:	6800      	ldr	r0, [r0, #0]
    31f4:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    31f8:	1a40      	subs	r0, r0, r1
    31fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    31fe:	2802      	cmp	r0, #2
    3200:	d302      	bcc.n	3208 <MPSL_IRQ_RTC0_Handler+0x80>
    3202:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3206:	d306      	bcc.n	3216 <MPSL_IRQ_RTC0_Handler+0x8e>
    3208:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    320c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3210:	2005      	movs	r0, #5
    3212:	f7fe ff0d 	bl	2030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3216:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    321a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    321e:	bf08      	it	eq
    3220:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3224:	4815      	ldr	r0, [pc, #84]	; (327c <MPSL_IRQ_RTC0_Handler+0xf4>)
    3226:	6800      	ldr	r0, [r0, #0]
    3228:	2800      	cmp	r0, #0
    322a:	bf08      	it	eq
    322c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3230:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3234:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3238:	4811      	ldr	r0, [pc, #68]	; (3280 <MPSL_IRQ_RTC0_Handler+0xf8>)
    323a:	6800      	ldr	r0, [r0, #0]
    323c:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    3240:	1a40      	subs	r0, r0, r1
    3242:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3246:	2802      	cmp	r0, #2
    3248:	d304      	bcc.n	3254 <MPSL_IRQ_RTC0_Handler+0xcc>
    324a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    324e:	bf38      	it	cc
    3250:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    3254:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3258:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    325c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3260:	2006      	movs	r0, #6
    3262:	f7fe bee5 	b.w	2030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3266:	0000      	.short	0x0000
    3268:	4000b000 	.word	0x4000b000
    326c:	4000b140 	.word	0x4000b140
    3270:	4000b540 	.word	0x4000b540
    3274:	4000b144 	.word	0x4000b144
    3278:	4000b544 	.word	0x4000b544
    327c:	4000b148 	.word	0x4000b148
    3280:	4000b548 	.word	0x4000b548

00003284 <MPSL_IRQ_TIMER0_Handler>:
    3284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3288:	4d38      	ldr	r5, [pc, #224]	; (336c <MPSL_IRQ_TIMER0_Handler+0xe8>)
    328a:	7828      	ldrb	r0, [r5, #0]
    328c:	2804      	cmp	r0, #4
    328e:	d068      	beq.n	3362 <MPSL_IRQ_TIMER0_Handler+0xde>
    3290:	1ce8      	adds	r0, r5, #3
    3292:	2201      	movs	r2, #1
    3294:	7801      	ldrb	r1, [r0, #0]
    3296:	b159      	cbz	r1, 32b0 <MPSL_IRQ_TIMER0_Handler+0x2c>
    3298:	2901      	cmp	r1, #1
    329a:	bf08      	it	eq
    329c:	706a      	strbeq	r2, [r5, #1]
    329e:	d002      	beq.n	32a6 <MPSL_IRQ_TIMER0_Handler+0x22>
    32a0:	7869      	ldrb	r1, [r5, #1]
    32a2:	2900      	cmp	r1, #0
    32a4:	d058      	beq.n	3358 <MPSL_IRQ_TIMER0_Handler+0xd4>
    32a6:	2102      	movs	r1, #2
    32a8:	7001      	strb	r1, [r0, #0]
    32aa:	7840      	ldrb	r0, [r0, #1]
    32ac:	f000 fafa 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    32b0:	4c2f      	ldr	r4, [pc, #188]	; (3370 <MPSL_IRQ_TIMER0_Handler+0xec>)
    32b2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    32b6:	f04f 0800 	mov.w	r8, #0
    32ba:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    32be:	f44f 7780 	mov.w	r7, #256	; 0x100
    32c2:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    32c6:	d00a      	beq.n	32de <MPSL_IRQ_TIMER0_Handler+0x5a>
    32c8:	482a      	ldr	r0, [pc, #168]	; (3374 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    32ca:	6800      	ldr	r0, [r0, #0]
    32cc:	b138      	cbz	r0, 32de <MPSL_IRQ_TIMER0_Handler+0x5a>
    32ce:	2003      	movs	r0, #3
    32d0:	f000 fae8 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    32d4:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    32d8:	2003      	movs	r0, #3
    32da:	f7fe fea9 	bl	2030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    32de:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    32e2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    32e6:	d00a      	beq.n	32fe <MPSL_IRQ_TIMER0_Handler+0x7a>
    32e8:	4823      	ldr	r0, [pc, #140]	; (3378 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    32ea:	6800      	ldr	r0, [r0, #0]
    32ec:	b138      	cbz	r0, 32fe <MPSL_IRQ_TIMER0_Handler+0x7a>
    32ee:	2002      	movs	r0, #2
    32f0:	f000 fad8 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    32f4:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    32f8:	2002      	movs	r0, #2
    32fa:	f7fe fe99 	bl	2030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    32fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3302:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3306:	d00a      	beq.n	331e <MPSL_IRQ_TIMER0_Handler+0x9a>
    3308:	481c      	ldr	r0, [pc, #112]	; (337c <MPSL_IRQ_TIMER0_Handler+0xf8>)
    330a:	6800      	ldr	r0, [r0, #0]
    330c:	b138      	cbz	r0, 331e <MPSL_IRQ_TIMER0_Handler+0x9a>
    330e:	2001      	movs	r0, #1
    3310:	f000 fac8 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3314:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3318:	2001      	movs	r0, #1
    331a:	f7fe fe89 	bl	2030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    331e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3322:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3326:	bf08      	it	eq
    3328:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    332c:	4814      	ldr	r0, [pc, #80]	; (3380 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    332e:	6800      	ldr	r0, [r0, #0]
    3330:	2800      	cmp	r0, #0
    3332:	bf08      	it	eq
    3334:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3338:	2000      	movs	r0, #0
    333a:	f000 fab3 	bl	38a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    333e:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3342:	2004      	movs	r0, #4
    3344:	7028      	strb	r0, [r5, #0]
    3346:	f8c5 8008 	str.w	r8, [r5, #8]
    334a:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    334e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3352:	2000      	movs	r0, #0
    3354:	f7fe be6c 	b.w	2030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3358:	f240 316a 	movw	r1, #874	; 0x36a
    335c:	206c      	movs	r0, #108	; 0x6c
    335e:	f000 ff47 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3366:	2007      	movs	r0, #7
    3368:	f7fe be62 	b.w	2030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    336c:	2000001c 	.word	0x2000001c
    3370:	40008000 	.word	0x40008000
    3374:	4000814c 	.word	0x4000814c
    3378:	40008148 	.word	0x40008148
    337c:	40008144 	.word	0x40008144
    3380:	40008140 	.word	0x40008140
    3384:	2201      	movs	r2, #1
    3386:	0211      	lsls	r1, r2, #8
    3388:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    338c:	2000      	movs	r0, #0
    338e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3392:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3396:	f3bf 8f4f 	dsb	sy
    339a:	f3bf 8f6f 	isb	sy
    339e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    33a2:	490e      	ldr	r1, [pc, #56]	; (33dc <MPSL_IRQ_TIMER0_Handler+0x158>)
    33a4:	f841 2f04 	str.w	r2, [r1, #4]!
    33a8:	1e43      	subs	r3, r0, #1
    33aa:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    33ae:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    33b2:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    33b6:	4b0a      	ldr	r3, [pc, #40]	; (33e0 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    33b8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    33bc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    33c0:	1d1b      	adds	r3, r3, #4
    33c2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    33c6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    33ca:	1d1b      	adds	r3, r3, #4
    33cc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    33d0:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    33d4:	60ca      	str	r2, [r1, #12]
    33d6:	4903      	ldr	r1, [pc, #12]	; (33e4 <MPSL_IRQ_TIMER0_Handler+0x160>)
    33d8:	7048      	strb	r0, [r1, #1]
    33da:	4770      	bx	lr
    33dc:	40008000 	.word	0x40008000
    33e0:	40008004 	.word	0x40008004
    33e4:	2000001c 	.word	0x2000001c

000033e8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    33e8:	4801      	ldr	r0, [pc, #4]	; (33f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    33ea:	6800      	ldr	r0, [r0, #0]
    33ec:	4770      	bx	lr
    33ee:	0000      	.short	0x0000
    33f0:	4000b504 	.word	0x4000b504

000033f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    33f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33f8:	4e47      	ldr	r6, [pc, #284]	; (3518 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    33fa:	4605      	mov	r5, r0
    33fc:	1ef7      	subs	r7, r6, #3
    33fe:	7832      	ldrb	r2, [r6, #0]
    3400:	68f9      	ldr	r1, [r7, #12]
    3402:	2a01      	cmp	r2, #1
    3404:	bf04      	itt	eq
    3406:	42a9      	cmpeq	r1, r5
    3408:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    340c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3410:	4b42      	ldr	r3, [pc, #264]	; (351c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3412:	6018      	str	r0, [r3, #0]
    3414:	4842      	ldr	r0, [pc, #264]	; (3520 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    3416:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    341a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    341e:	f100 0304 	add.w	r3, r0, #4
    3422:	f04f 0400 	mov.w	r4, #0
    3426:	2a00      	cmp	r2, #0
    3428:	d061      	beq.n	34ee <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    342a:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    342e:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    3432:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    3436:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    343a:	4b3a      	ldr	r3, [pc, #232]	; (3524 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    343c:	681b      	ldr	r3, [r3, #0]
    343e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3442:	f04f 0801 	mov.w	r8, #1
    3446:	2b00      	cmp	r3, #0
    3448:	bf04      	itt	eq
    344a:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    344e:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    3452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3456:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    345a:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    345e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3462:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    3466:	1aeb      	subs	r3, r5, r3
    3468:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    346c:	2b02      	cmp	r3, #2
    346e:	d34b      	bcc.n	3508 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    3470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3474:	d248      	bcs.n	3508 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    3476:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    347a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    347e:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    3482:	b132      	cbz	r2, 3492 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    3484:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3488:	1a8a      	subs	r2, r1, r2
    348a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    348e:	2a02      	cmp	r2, #2
    3490:	d3f8      	bcc.n	3484 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    3492:	f8c7 8008 	str.w	r8, [r7, #8]
    3496:	703c      	strb	r4, [r7, #0]
    3498:	f7ff ff74 	bl	3384 <MPSL_IRQ_TIMER0_Handler+0x100>
    349c:	4822      	ldr	r0, [pc, #136]	; (3528 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    349e:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    34a2:	f364 0101 	bfi	r1, r4, #0, #2
    34a6:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    34aa:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    34ae:	2102      	movs	r1, #2
    34b0:	f361 0201 	bfi	r2, r1, #0, #2
    34b4:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    34b8:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    34bc:	2104      	movs	r1, #4
    34be:	f361 0203 	bfi	r2, r1, #0, #4
    34c2:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    34c6:	f8c0 800c 	str.w	r8, [r0, #12]
    34ca:	68b9      	ldr	r1, [r7, #8]
    34cc:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    34d0:	1580      	asrs	r0, r0, #22
    34d2:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    34d6:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    34da:	4914      	ldr	r1, [pc, #80]	; (352c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    34dc:	05c0      	lsls	r0, r0, #23
    34de:	6008      	str	r0, [r1, #0]
    34e0:	2004      	movs	r0, #4
    34e2:	60fd      	str	r5, [r7, #12]
    34e4:	7070      	strb	r0, [r6, #1]
    34e6:	f886 8000 	strb.w	r8, [r6]
    34ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34ee:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    34f2:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    34f6:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    34fa:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    34fe:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    3502:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3506:	e798      	b.n	343a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    3508:	2100      	movs	r1, #0
    350a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    350e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3512:	206c      	movs	r0, #108	; 0x6c
    3514:	f000 fe6c 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3518:	2000001f 	.word	0x2000001f
    351c:	4001f508 	.word	0x4001f508
    3520:	4000b000 	.word	0x4000b000
    3524:	4000b148 	.word	0x4000b148
    3528:	40008000 	.word	0x40008000
    352c:	4001f504 	.word	0x4001f504

00003530 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3530:	b570      	push	{r4, r5, r6, lr}
    3532:	4c2c      	ldr	r4, [pc, #176]	; (35e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3534:	68e2      	ldr	r2, [r4, #12]
    3536:	4282      	cmp	r2, r0
    3538:	bf14      	ite	ne
    353a:	2101      	movne	r1, #1
    353c:	2100      	moveq	r1, #0
    353e:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 35e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    3542:	f89c 5000 	ldrb.w	r5, [ip]
    3546:	2d02      	cmp	r5, #2
    3548:	d002      	beq.n	3550 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    354a:	2900      	cmp	r1, #0
    354c:	d037      	beq.n	35be <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    354e:	e002      	b.n	3556 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3550:	2900      	cmp	r1, #0
    3552:	bf08      	it	eq
    3554:	bd70      	popeq	{r4, r5, r6, pc}
    3556:	7861      	ldrb	r1, [r4, #1]
    3558:	b381      	cbz	r1, 35bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    355a:	4b24      	ldr	r3, [pc, #144]	; (35ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    355c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3560:	6019      	str	r1, [r3, #0]
    3562:	138b      	asrs	r3, r1, #14
    3564:	4922      	ldr	r1, [pc, #136]	; (35f0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3566:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    356a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    356e:	2300      	movs	r3, #0
    3570:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    3574:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    3578:	1ac3      	subs	r3, r0, r3
    357a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    357e:	2b02      	cmp	r3, #2
    3580:	d327      	bcc.n	35d2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    3582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3586:	d224      	bcs.n	35d2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    3588:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    358c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3590:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    3594:	b13d      	cbz	r5, 35a6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    3596:	bf00      	nop
    3598:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    359c:	1ad3      	subs	r3, r2, r3
    359e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    35a2:	2b02      	cmp	r3, #2
    35a4:	d3f8      	bcc.n	3598 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    35a6:	4b13      	ldr	r3, [pc, #76]	; (35f4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    35a8:	2102      	movs	r1, #2
    35aa:	074a      	lsls	r2, r1, #29
    35ac:	601a      	str	r2, [r3, #0]
    35ae:	60e0      	str	r0, [r4, #12]
    35b0:	2004      	movs	r0, #4
    35b2:	f88c 0001 	strb.w	r0, [ip, #1]
    35b6:	f88c 1000 	strb.w	r1, [ip]
    35ba:	bd70      	pop	{r4, r5, r6, pc}
    35bc:	e004      	b.n	35c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    35be:	f240 2102 	movw	r1, #514	; 0x202
    35c2:	206c      	movs	r0, #108	; 0x6c
    35c4:	f000 fe14 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35c8:	f240 2106 	movw	r1, #518	; 0x206
    35cc:	206c      	movs	r0, #108	; 0x6c
    35ce:	f000 fe0f 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35d2:	2000      	movs	r0, #0
    35d4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    35d8:	f240 2112 	movw	r1, #530	; 0x212
    35dc:	206c      	movs	r0, #108	; 0x6c
    35de:	f000 fe07 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35e2:	0000      	.short	0x0000
    35e4:	2000001c 	.word	0x2000001c
    35e8:	2000001f 	.word	0x2000001f
    35ec:	4001f508 	.word	0x4001f508
    35f0:	4000b000 	.word	0x4000b000
    35f4:	4001f504 	.word	0x4001f504

000035f8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    35f8:	4801      	ldr	r0, [pc, #4]	; (3600 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    35fa:	68c0      	ldr	r0, [r0, #12]
    35fc:	4770      	bx	lr
    35fe:	0000      	.short	0x0000
    3600:	2000001c 	.word	0x2000001c

00003604 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3608:	4936      	ldr	r1, [pc, #216]	; (36e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    360a:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    360e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3612:	4d35      	ldr	r5, [pc, #212]	; (36e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3614:	1d0b      	adds	r3, r1, #4
    3616:	2200      	movs	r2, #0
    3618:	7828      	ldrb	r0, [r5, #0]
    361a:	b168      	cbz	r0, 3638 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    361c:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3620:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3624:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3628:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    362c:	4b2f      	ldr	r3, [pc, #188]	; (36ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    362e:	681b      	ldr	r3, [r3, #0]
    3630:	f04f 0c01 	mov.w	ip, #1
    3634:	b99b      	cbnz	r3, 365e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    3636:	e00c      	b.n	3652 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    3638:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    363c:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3640:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    3644:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    3648:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    364c:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3650:	e7ec      	b.n	362c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3652:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3656:	f44f 6300 	mov.w	r3, #2048	; 0x800
    365a:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    365e:	2802      	cmp	r0, #2
    3660:	d004      	beq.n	366c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    3662:	f240 211e 	movw	r1, #542	; 0x21e
    3666:	206c      	movs	r0, #108	; 0x6c
    3668:	f000 fdc2 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    366c:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3670:	4c1f      	ldr	r4, [pc, #124]	; (36f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3672:	1cc0      	adds	r0, r0, #3
    3674:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3678:	68e3      	ldr	r3, [r4, #12]
    367a:	4e1e      	ldr	r6, [pc, #120]	; (36f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    367c:	4298      	cmp	r0, r3
    367e:	d00c      	beq.n	369a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3680:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    3684:	1bdf      	subs	r7, r3, r7
    3686:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    368a:	2f04      	cmp	r7, #4
    368c:	d305      	bcc.n	369a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    368e:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    3692:	d202      	bcs.n	369a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3694:	f7ff feae 	bl	33f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3698:	e01f      	b.n	36da <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    369a:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    369e:	1a18      	subs	r0, r3, r0
    36a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    36a4:	2802      	cmp	r0, #2
    36a6:	d315      	bcc.n	36d4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    36a8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    36ac:	d212      	bcs.n	36d4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    36ae:	4912      	ldr	r1, [pc, #72]	; (36f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    36b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    36b4:	6008      	str	r0, [r1, #0]
    36b6:	f8c4 c008 	str.w	ip, [r4, #8]
    36ba:	7022      	strb	r2, [r4, #0]
    36bc:	f8c6 c004 	str.w	ip, [r6, #4]
    36c0:	f8c6 c00c 	str.w	ip, [r6, #12]
    36c4:	0040      	lsls	r0, r0, #1
    36c6:	1f09      	subs	r1, r1, #4
    36c8:	6008      	str	r0, [r1, #0]
    36ca:	2004      	movs	r0, #4
    36cc:	7068      	strb	r0, [r5, #1]
    36ce:	f885 c000 	strb.w	ip, [r5]
    36d2:	e002      	b.n	36da <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    36d4:	f8c4 c008 	str.w	ip, [r4, #8]
    36d8:	7022      	strb	r2, [r4, #0]
    36da:	68a0      	ldr	r0, [r4, #8]
    36dc:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    36e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36e4:	4000b000 	.word	0x4000b000
    36e8:	2000001f 	.word	0x2000001f
    36ec:	4000b148 	.word	0x4000b148
    36f0:	2000001c 	.word	0x2000001c
    36f4:	40008000 	.word	0x40008000
    36f8:	4001f508 	.word	0x4001f508

000036fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    36fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3700:	f8df c190 	ldr.w	ip, [pc, #400]	; 3894 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    3704:	2600      	movs	r6, #0
    3706:	2701      	movs	r7, #1
    3708:	f89c 4000 	ldrb.w	r4, [ip]
    370c:	f89c c001 	ldrb.w	ip, [ip, #1]
    3710:	f44f 75a0 	mov.w	r5, #320	; 0x140
    3714:	2807      	cmp	r0, #7
    3716:	d27b      	bcs.n	3810 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    3718:	e8df f000 	tbb	[pc, r0]
    371c:	04040404 	.word	0x04040404
    3720:	006c6c6c 	.word	0x006c6c6c
    3724:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3898 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    3728:	f8d8 900c 	ldr.w	r9, [r8, #12]
    372c:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    3730:	bf04      	itt	eq
    3732:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    3736:	f1b8 0f00 	cmpeq.w	r8, #0
    373a:	d002      	beq.n	3742 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    373c:	2c02      	cmp	r4, #2
    373e:	d005      	beq.n	374c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    3740:	e02c      	b.n	379c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    3742:	f240 2151 	movw	r1, #593	; 0x251
    3746:	206c      	movs	r0, #108	; 0x6c
    3748:	f000 fd52 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    374c:	f1ac 0804 	sub.w	r8, ip, #4
    3750:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3754:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    3758:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    375c:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    3760:	2500      	movs	r5, #0
    3762:	2c01      	cmp	r4, #1
    3764:	d002      	beq.n	376c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    3766:	2c02      	cmp	r4, #2
    3768:	d00b      	beq.n	3782 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    376a:	e014      	b.n	3796 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    376c:	f1bc 0f04 	cmp.w	ip, #4
    3770:	bf24      	itt	cs
    3772:	f8d8 9000 	ldrcs.w	r9, [r8]
    3776:	f1b9 0f00 	cmpcs.w	r9, #0
    377a:	bf08      	it	eq
    377c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    3780:	e009      	b.n	3796 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3782:	f1bc 0f04 	cmp.w	ip, #4
    3786:	bf24      	itt	cs
    3788:	f8d8 9000 	ldrcs.w	r9, [r8]
    378c:	f1b9 0f00 	cmpcs.w	r9, #0
    3790:	bf08      	it	eq
    3792:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    3796:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    379a:	d1e1      	bne.n	3760 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    379c:	4c3f      	ldr	r4, [pc, #252]	; (389c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    379e:	f100 0c10 	add.w	ip, r0, #16
    37a2:	fa07 fc0c 	lsl.w	ip, r7, ip
    37a6:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    37aa:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    37ae:	b1c2      	cbz	r2, 37e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    37b0:	f04f 0840 	mov.w	r8, #64	; 0x40
    37b4:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    37b8:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    37bc:	44a0      	add	r8, r4
    37be:	f8c8 7000 	str.w	r7, [r8]
    37c2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    37c6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    37ca:	eba1 0000 	sub.w	r0, r1, r0
    37ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    37d2:	4282      	cmp	r2, r0
    37d4:	bf98      	it	ls
    37d6:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    37da:	bf28      	it	cs
    37dc:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    37e0:	d250      	bcs.n	3884 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    37e2:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    37e6:	2b01      	cmp	r3, #1
    37e8:	bf08      	it	eq
    37ea:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    37ee:	2001      	movs	r0, #1
    37f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37f4:	b134      	cbz	r4, 3804 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    37f6:	4584      	cmp	ip, r0
    37f8:	d104      	bne.n	3804 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    37fa:	f44f 711d 	mov.w	r1, #628	; 0x274
    37fe:	206c      	movs	r0, #108	; 0x6c
    3800:	f000 fcf6 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3804:	f1a0 0c04 	sub.w	ip, r0, #4
    3808:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    380c:	2b01      	cmp	r3, #1
    380e:	e000      	b.n	3812 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    3810:	e03b      	b.n	388a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    3812:	bf0c      	ite	eq
    3814:	f04f 0801 	moveq.w	r8, #1
    3818:	f04f 0800 	movne.w	r8, #0
    381c:	2c03      	cmp	r4, #3
    381e:	d304      	bcc.n	382a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    3820:	f240 114d 	movw	r1, #333	; 0x14d
    3824:	206c      	movs	r0, #108	; 0x6c
    3826:	f000 fce3 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    382a:	f8df c074 	ldr.w	ip, [pc, #116]	; 38a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    382e:	f104 0310 	add.w	r3, r4, #16
    3832:	fa07 f303 	lsl.w	r3, r7, r3
    3836:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    383a:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    383e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    3842:	f84c 6004 	str.w	r6, [ip, r4]
    3846:	1f00      	subs	r0, r0, #4
    3848:	b2c0      	uxtb	r0, r0
    384a:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    384e:	b16a      	cbz	r2, 386c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    3850:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    3854:	1b0c      	subs	r4, r1, r4
    3856:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    385a:	42a2      	cmp	r2, r4
    385c:	bf98      	it	ls
    385e:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    3862:	bf24      	itt	cs
    3864:	2100      	movcs	r1, #0
    3866:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    386a:	d20b      	bcs.n	3884 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    386c:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3870:	f1b8 0f00 	cmp.w	r8, #0
    3874:	bf18      	it	ne
    3876:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    387a:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    387e:	2001      	movs	r0, #1
    3880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3884:	2000      	movs	r0, #0
    3886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    388a:	f240 2179 	movw	r1, #633	; 0x279
    388e:	206c      	movs	r0, #108	; 0x6c
    3890:	f000 fcae 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3894:	2000001f 	.word	0x2000001f
    3898:	2000001c 	.word	0x2000001c
    389c:	40008000 	.word	0x40008000
    38a0:	4000b000 	.word	0x4000b000

000038a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    38a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    38a8:	2600      	movs	r6, #0
    38aa:	f44f 77a0 	mov.w	r7, #320	; 0x140
    38ae:	f04f 0801 	mov.w	r8, #1
    38b2:	2807      	cmp	r0, #7
    38b4:	d251      	bcs.n	395a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    38b6:	e8df f000 	tbb	[pc, r0]
    38ba:	0404      	.short	0x0404
    38bc:	19190404 	.word	0x19190404
    38c0:	0019      	.short	0x0019
    38c2:	f100 0110 	add.w	r1, r0, #16
    38c6:	fa08 f201 	lsl.w	r2, r8, r1
    38ca:	4926      	ldr	r1, [pc, #152]	; (3964 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    38cc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    38d0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    38d4:	2200      	movs	r2, #0
    38d6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    38da:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    38de:	508e      	str	r6, [r1, r2]
    38e0:	4921      	ldr	r1, [pc, #132]	; (3968 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    38e2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    38e6:	9000      	str	r0, [sp, #0]
    38e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    38ec:	4d1f      	ldr	r5, [pc, #124]	; (396c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    38ee:	1f01      	subs	r1, r0, #4
    38f0:	b2cc      	uxtb	r4, r1
    38f2:	7829      	ldrb	r1, [r5, #0]
    38f4:	b179      	cbz	r1, 3916 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    38f6:	786a      	ldrb	r2, [r5, #1]
    38f8:	4282      	cmp	r2, r0
    38fa:	d10c      	bne.n	3916 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    38fc:	4a1c      	ldr	r2, [pc, #112]	; (3970 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    38fe:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3902:	6010      	str	r0, [r2, #0]
    3904:	2901      	cmp	r1, #1
    3906:	bf08      	it	eq
    3908:	f7ff fd3c 	bleq	3384 <MPSL_IRQ_TIMER0_Handler+0x100>
    390c:	702e      	strb	r6, [r5, #0]
    390e:	4919      	ldr	r1, [pc, #100]	; (3974 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3910:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3914:	60c8      	str	r0, [r1, #12]
    3916:	f104 0010 	add.w	r0, r4, #16
    391a:	fa08 f100 	lsl.w	r1, r8, r0
    391e:	4816      	ldr	r0, [pc, #88]	; (3978 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3920:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3924:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3928:	00a1      	lsls	r1, r4, #2
    392a:	4401      	add	r1, r0
    392c:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    3930:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3934:	1a89      	subs	r1, r1, r2
    3936:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    393a:	2902      	cmp	r1, #2
    393c:	d307      	bcc.n	394e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    393e:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    3942:	2100      	movs	r1, #0
    3944:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3948:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    394c:	5046      	str	r6, [r0, r1]
    394e:	480b      	ldr	r0, [pc, #44]	; (397c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3950:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3954:	9000      	str	r0, [sp, #0]
    3956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    395a:	f240 21f1 	movw	r1, #753	; 0x2f1
    395e:	206c      	movs	r0, #108	; 0x6c
    3960:	f000 fc46 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3964:	40008000 	.word	0x40008000
    3968:	40008140 	.word	0x40008140
    396c:	2000001f 	.word	0x2000001f
    3970:	4001f508 	.word	0x4001f508
    3974:	2000001c 	.word	0x2000001c
    3978:	4000b000 	.word	0x4000b000
    397c:	4000b140 	.word	0x4000b140

00003980 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3980:	4920      	ldr	r1, [pc, #128]	; (3a04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3982:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3986:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    398a:	481f      	ldr	r0, [pc, #124]	; (3a08 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    398c:	1d0a      	adds	r2, r1, #4
    398e:	7803      	ldrb	r3, [r0, #0]
    3990:	2000      	movs	r0, #0
    3992:	b15b      	cbz	r3, 39ac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    3994:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3998:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    399c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    39a0:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    39a4:	4919      	ldr	r1, [pc, #100]	; (3a0c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    39a6:	6809      	ldr	r1, [r1, #0]
    39a8:	b999      	cbnz	r1, 39d2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    39aa:	e00c      	b.n	39c6 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    39ac:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    39b0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    39b4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    39b8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    39bc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    39c0:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    39c4:	e7ee      	b.n	39a4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    39c6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    39ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
    39ce:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    39d2:	490f      	ldr	r1, [pc, #60]	; (3a10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    39d4:	f04f 32ff 	mov.w	r2, #4294967295
    39d8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    39dc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    39e0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    39e4:	1d0a      	adds	r2, r1, #4
    39e6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    39ea:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    39ee:	1d12      	adds	r2, r2, #4
    39f0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    39f4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    39f8:	1d12      	adds	r2, r2, #4
    39fa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    39fe:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3a02:	4770      	bx	lr
    3a04:	4000b000 	.word	0x4000b000
    3a08:	2000001f 	.word	0x2000001f
    3a0c:	4000b148 	.word	0x4000b148
    3a10:	40008000 	.word	0x40008000

00003a14 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3a14:	4808      	ldr	r0, [pc, #32]	; (3a38 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3a16:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3a1a:	2800      	cmp	r0, #0
    3a1c:	bfb8      	it	lt
    3a1e:	4770      	bxlt	lr
    3a20:	f000 011f 	and.w	r1, r0, #31
    3a24:	2201      	movs	r2, #1
    3a26:	fa02 f101 	lsl.w	r1, r2, r1
    3a2a:	0940      	lsrs	r0, r0, #5
    3a2c:	0080      	lsls	r0, r0, #2
    3a2e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3a32:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3a36:	4770      	bx	lr
    3a38:	2000001c 	.word	0x2000001c

00003a3c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3a3c:	b510      	push	{r4, lr}
    3a3e:	2807      	cmp	r0, #7
    3a40:	d20d      	bcs.n	3a5e <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3a42:	e8df f000 	tbb	[pc, r0]
    3a46:	0404      	.short	0x0404
    3a48:	06060404 	.word	0x06060404
    3a4c:	0006      	.short	0x0006
    3a4e:	4906      	ldr	r1, [pc, #24]	; (3a68 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3a50:	e002      	b.n	3a58 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3a52:	1f00      	subs	r0, r0, #4
    3a54:	4905      	ldr	r1, [pc, #20]	; (3a6c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3a56:	b2c0      	uxtb	r0, r0
    3a58:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3a5c:	bd10      	pop	{r4, pc}
    3a5e:	f240 219d 	movw	r1, #669	; 0x29d
    3a62:	206c      	movs	r0, #108	; 0x6c
    3a64:	f000 fbc4 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a68:	40008140 	.word	0x40008140
    3a6c:	4000b140 	.word	0x4000b140

00003a70 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3a70:	b510      	push	{r4, lr}
    3a72:	481c      	ldr	r0, [pc, #112]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3a74:	2400      	movs	r4, #0
    3a76:	2104      	movs	r1, #4
    3a78:	7004      	strb	r4, [r0, #0]
    3a7a:	1ec0      	subs	r0, r0, #3
    3a7c:	7001      	strb	r1, [r0, #0]
    3a7e:	0589      	lsls	r1, r1, #22
    3a80:	60c1      	str	r1, [r0, #12]
    3a82:	f7ff fc7f 	bl	3384 <MPSL_IRQ_TIMER0_Handler+0x100>
    3a86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3a8e:	f04f 0c01 	mov.w	ip, #1
    3a92:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3a96:	f3bf 8f4f 	dsb	sy
    3a9a:	f3bf 8f6f 	isb	sy
    3a9e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    3aa2:	4811      	ldr	r0, [pc, #68]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
    3aa4:	f8c0 c004 	str.w	ip, [r0, #4]
    3aa8:	f8c0 c008 	str.w	ip, [r0, #8]
    3aac:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3ab0:	2900      	cmp	r1, #0
    3ab2:	d1fb      	bne.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3ab4:	1e49      	subs	r1, r1, #1
    3ab6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3aba:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3abe:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3ac2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3ac6:	4909      	ldr	r1, [pc, #36]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
    3ac8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3acc:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3ad0:	1d09      	adds	r1, r1, #4
    3ad2:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3ad6:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3ada:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3ade:	f8c0 c000 	str.w	ip, [r0]
    3ae2:	bd10      	pop	{r4, pc}
    3ae4:	2000001f 	.word	0x2000001f
    3ae8:	4000b000 	.word	0x4000b000
    3aec:	4000b004 	.word	0x4000b004

00003af0 <MPSL_IRQ_CLOCK_Handler>:
    3af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3af4:	4c16      	ldr	r4, [pc, #88]	; (3b50 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3af6:	7a60      	ldrb	r0, [r4, #9]
    3af8:	2800      	cmp	r0, #0
    3afa:	d027      	beq.n	3b4c <MPSL_IRQ_CLOCK_Handler+0x5c>
    3afc:	f44f 7180 	mov.w	r1, #256	; 0x100
    3b00:	058d      	lsls	r5, r1, #22
    3b02:	4628      	mov	r0, r5
    3b04:	f008 fb63 	bl	c1ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3b08:	4680      	mov	r8, r0
    3b0a:	f44f 7182 	mov.w	r1, #260	; 0x104
    3b0e:	4628      	mov	r0, r5
    3b10:	f008 fb5d 	bl	c1ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3b14:	2600      	movs	r6, #0
    3b16:	4607      	mov	r7, r0
    3b18:	f1b8 0f00 	cmp.w	r8, #0
    3b1c:	d009      	beq.n	3b32 <MPSL_IRQ_CLOCK_Handler+0x42>
    3b1e:	2001      	movs	r0, #1
    3b20:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3b24:	7920      	ldrb	r0, [r4, #4]
    3b26:	b120      	cbz	r0, 3b32 <MPSL_IRQ_CLOCK_Handler+0x42>
    3b28:	7126      	strb	r6, [r4, #4]
    3b2a:	69e0      	ldr	r0, [r4, #28]
    3b2c:	b108      	cbz	r0, 3b32 <MPSL_IRQ_CLOCK_Handler+0x42>
    3b2e:	4780      	blx	r0
    3b30:	61e6      	str	r6, [r4, #28]
    3b32:	b137      	cbz	r7, 3b42 <MPSL_IRQ_CLOCK_Handler+0x52>
    3b34:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3b38:	2002      	movs	r0, #2
    3b3a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3b3e:	f000 fa8b 	bl	4058 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3b42:	4640      	mov	r0, r8
    3b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3b48:	f000 b85a 	b.w	3c00 <MPSL_IRQ_CLOCK_Handler+0x110>
    3b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b50:	2000002c 	.word	0x2000002c
    3b54:	b510      	push	{r4, lr}
    3b56:	f008 fbe4 	bl	c322 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3b5a:	b930      	cbnz	r0, 3b6a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3b5c:	f008 fc02 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b60:	b918      	cbnz	r0, 3b6a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3b62:	f008 fc35 	bl	c3d0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3b66:	2800      	cmp	r0, #0
    3b68:	d002      	beq.n	3b70 <MPSL_IRQ_CLOCK_Handler+0x80>
    3b6a:	4902      	ldr	r1, [pc, #8]	; (3b74 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3b6c:	2002      	movs	r0, #2
    3b6e:	6008      	str	r0, [r1, #0]
    3b70:	bd10      	pop	{r4, pc}
    3b72:	0000      	.short	0x0000
    3b74:	40000c34 	.word	0x40000c34
    3b78:	b570      	push	{r4, r5, r6, lr}
    3b7a:	f000 f987 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3b7e:	f000 fabf 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3b82:	4c09      	ldr	r4, [pc, #36]	; (3ba8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3b84:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3b88:	b130      	cbz	r0, 3b98 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3b8a:	f7ff ffe3 	bl	3b54 <MPSL_IRQ_CLOCK_Handler+0x64>
    3b8e:	2001      	movs	r0, #1
    3b90:	6128      	str	r0, [r5, #16]
    3b92:	2004      	movs	r0, #4
    3b94:	72a0      	strb	r0, [r4, #10]
    3b96:	e004      	b.n	3ba2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3b98:	2003      	movs	r0, #3
    3b9a:	72a0      	strb	r0, [r4, #10]
    3b9c:	2001      	movs	r0, #1
    3b9e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3ba2:	2000      	movs	r0, #0
    3ba4:	71e0      	strb	r0, [r4, #7]
    3ba6:	bd70      	pop	{r4, r5, r6, pc}
    3ba8:	2000002c 	.word	0x2000002c
    3bac:	b570      	push	{r4, r5, r6, lr}
    3bae:	4c13      	ldr	r4, [pc, #76]	; (3bfc <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3bb0:	79a0      	ldrb	r0, [r4, #6]
    3bb2:	b1f0      	cbz	r0, 3bf2 <MPSL_IRQ_CLOCK_Handler+0x102>
    3bb4:	2801      	cmp	r0, #1
    3bb6:	d003      	beq.n	3bc0 <MPSL_IRQ_CLOCK_Handler+0xd0>
    3bb8:	79e1      	ldrb	r1, [r4, #7]
    3bba:	1e40      	subs	r0, r0, #1
    3bbc:	4281      	cmp	r1, r0
    3bbe:	da18      	bge.n	3bf2 <MPSL_IRQ_CLOCK_Handler+0x102>
    3bc0:	f000 fa9e 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3bc4:	4605      	mov	r5, r0
    3bc6:	f000 fb83 	bl	42d0 <mpsl_temperature_get>
    3bca:	79a1      	ldrb	r1, [r4, #6]
    3bcc:	2901      	cmp	r1, #1
    3bce:	d902      	bls.n	3bd6 <MPSL_IRQ_CLOCK_Handler+0xe6>
    3bd0:	79e1      	ldrb	r1, [r4, #7]
    3bd2:	1c49      	adds	r1, r1, #1
    3bd4:	71e1      	strb	r1, [r4, #7]
    3bd6:	b10d      	cbz	r5, 3bdc <MPSL_IRQ_CLOCK_Handler+0xec>
    3bd8:	6961      	ldr	r1, [r4, #20]
    3bda:	e000      	b.n	3bde <MPSL_IRQ_CLOCK_Handler+0xee>
    3bdc:	6921      	ldr	r1, [r4, #16]
    3bde:	1a41      	subs	r1, r0, r1
    3be0:	2902      	cmp	r1, #2
    3be2:	da02      	bge.n	3bea <MPSL_IRQ_CLOCK_Handler+0xfa>
    3be4:	f111 0f02 	cmn.w	r1, #2
    3be8:	dc07      	bgt.n	3bfa <MPSL_IRQ_CLOCK_Handler+0x10a>
    3bea:	b10d      	cbz	r5, 3bf0 <MPSL_IRQ_CLOCK_Handler+0x100>
    3bec:	6160      	str	r0, [r4, #20]
    3bee:	e000      	b.n	3bf2 <MPSL_IRQ_CLOCK_Handler+0x102>
    3bf0:	6120      	str	r0, [r4, #16]
    3bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3bf6:	f7ff bfbf 	b.w	3b78 <MPSL_IRQ_CLOCK_Handler+0x88>
    3bfa:	bd70      	pop	{r4, r5, r6, pc}
    3bfc:	2000002c 	.word	0x2000002c
    3c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c04:	4606      	mov	r6, r0
    3c06:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3c0a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3c0e:	4628      	mov	r0, r5
    3c10:	f008 fadd 	bl	c1ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3c14:	4680      	mov	r8, r0
    3c16:	f44f 7188 	mov.w	r1, #272	; 0x110
    3c1a:	4628      	mov	r0, r5
    3c1c:	f008 fad7 	bl	c1ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3c20:	4c27      	ldr	r4, [pc, #156]	; (3cc0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3c22:	4682      	mov	sl, r0
    3c24:	7827      	ldrb	r7, [r4, #0]
    3c26:	f104 0008 	add.w	r0, r4, #8
    3c2a:	f008 fb44 	bl	c2b6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3c2e:	b110      	cbz	r0, 3c36 <MPSL_IRQ_CLOCK_Handler+0x146>
    3c30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3c34:	e016      	b.n	3c64 <MPSL_IRQ_CLOCK_Handler+0x174>
    3c36:	f04f 0901 	mov.w	r9, #1
    3c3a:	b146      	cbz	r6, 3c4e <MPSL_IRQ_CLOCK_Handler+0x15e>
    3c3c:	7aa0      	ldrb	r0, [r4, #10]
    3c3e:	2803      	cmp	r0, #3
    3c40:	d105      	bne.n	3c4e <MPSL_IRQ_CLOCK_Handler+0x15e>
    3c42:	2004      	movs	r0, #4
    3c44:	72a0      	strb	r0, [r4, #10]
    3c46:	f7ff ff85 	bl	3b54 <MPSL_IRQ_CLOCK_Handler+0x64>
    3c4a:	f8c5 9010 	str.w	r9, [r5, #16]
    3c4e:	2600      	movs	r6, #0
    3c50:	f1b8 0f00 	cmp.w	r8, #0
    3c54:	d018      	beq.n	3c88 <MPSL_IRQ_CLOCK_Handler+0x198>
    3c56:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3c5a:	7aa0      	ldrb	r0, [r4, #10]
    3c5c:	2804      	cmp	r0, #4
    3c5e:	d004      	beq.n	3c6a <MPSL_IRQ_CLOCK_Handler+0x17a>
    3c60:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3c64:	206d      	movs	r0, #109	; 0x6d
    3c66:	f000 fac3 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c6a:	f008 fb5a 	bl	c322 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3c6e:	b928      	cbnz	r0, 3c7c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3c70:	f008 fb78 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3c74:	b910      	cbnz	r0, 3c7c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3c76:	f008 fbab 	bl	c3d0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3c7a:	b108      	cbz	r0, 3c80 <MPSL_IRQ_CLOCK_Handler+0x190>
    3c7c:	4811      	ldr	r0, [pc, #68]	; (3cc4 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3c7e:	6006      	str	r6, [r0, #0]
    3c80:	2002      	movs	r0, #2
    3c82:	72a0      	strb	r0, [r4, #10]
    3c84:	f000 f8e6 	bl	3e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3c88:	f1ba 0f00 	cmp.w	sl, #0
    3c8c:	d008      	beq.n	3ca0 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3c8e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3c92:	7aa0      	ldrb	r0, [r4, #10]
    3c94:	2802      	cmp	r0, #2
    3c96:	d101      	bne.n	3c9c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3c98:	f7ff ff88 	bl	3bac <MPSL_IRQ_CLOCK_Handler+0xbc>
    3c9c:	f8c5 9014 	str.w	r9, [r5, #20]
    3ca0:	b13f      	cbz	r7, 3cb2 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3ca2:	7026      	strb	r6, [r4, #0]
    3ca4:	7aa0      	ldrb	r0, [r4, #10]
    3ca6:	2802      	cmp	r0, #2
    3ca8:	d101      	bne.n	3cae <MPSL_IRQ_CLOCK_Handler+0x1be>
    3caa:	f7ff ff65 	bl	3b78 <MPSL_IRQ_CLOCK_Handler+0x88>
    3cae:	f000 f8d1 	bl	3e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3cb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cb6:	4802      	ldr	r0, [pc, #8]	; (3cc0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3cb8:	3008      	adds	r0, #8
    3cba:	f008 bb13 	b.w	c2e4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3cbe:	0000      	.short	0x0000
    3cc0:	2000002c 	.word	0x2000002c
    3cc4:	40000c34 	.word	0x40000c34
    3cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ccc:	4c5c      	ldr	r4, [pc, #368]	; (3e40 <MPSL_IRQ_CLOCK_Handler+0x350>)
    3cce:	f04f 0800 	mov.w	r8, #0
    3cd2:	4606      	mov	r6, r0
    3cd4:	f8c4 8018 	str.w	r8, [r4, #24]
    3cd8:	7843      	ldrb	r3, [r0, #1]
    3cda:	7882      	ldrb	r2, [r0, #2]
    3cdc:	7800      	ldrb	r0, [r0, #0]
    3cde:	72e0      	strb	r0, [r4, #11]
    3ce0:	7163      	strb	r3, [r4, #5]
    3ce2:	2701      	movs	r7, #1
    3ce4:	71a2      	strb	r2, [r4, #6]
    3ce6:	07bd      	lsls	r5, r7, #30
    3ce8:	f884 8007 	strb.w	r8, [r4, #7]
    3cec:	2805      	cmp	r0, #5
    3cee:	d224      	bcs.n	3d3a <MPSL_IRQ_CLOCK_Handler+0x24a>
    3cf0:	e8df f000 	tbb	[pc, r0]
    3cf4:	1f05030f 	.word	0x1f05030f
    3cf8:	0021      	.short	0x0021
    3cfa:	61a7      	str	r7, [r4, #24]
    3cfc:	e009      	b.n	3d12 <MPSL_IRQ_CLOCK_Handler+0x222>
    3cfe:	f000 f8c5 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3d02:	2101      	movs	r1, #1
    3d04:	4628      	mov	r0, r5
    3d06:	f008 fa67 	bl	c1d8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3d0a:	2800      	cmp	r0, #0
    3d0c:	d0f9      	beq.n	3d02 <MPSL_IRQ_CLOCK_Handler+0x212>
    3d0e:	2002      	movs	r0, #2
    3d10:	61a0      	str	r0, [r4, #24]
    3d12:	f008 fa8d 	bl	c230 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3d16:	b1b0      	cbz	r0, 3d46 <MPSL_IRQ_CLOCK_Handler+0x256>
    3d18:	f000 fa0c 	bl	4134 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3d1c:	7e21      	ldrb	r1, [r4, #24]
    3d1e:	f001 0103 	and.w	r1, r1, #3
    3d22:	4288      	cmp	r0, r1
    3d24:	d10f      	bne.n	3d46 <MPSL_IRQ_CLOCK_Handler+0x256>
    3d26:	79b0      	ldrb	r0, [r6, #6]
    3d28:	b150      	cbz	r0, 3d40 <MPSL_IRQ_CLOCK_Handler+0x250>
    3d2a:	2002      	movs	r0, #2
    3d2c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3d30:	e06a      	b.n	3e08 <MPSL_IRQ_CLOCK_Handler+0x318>
    3d32:	4844      	ldr	r0, [pc, #272]	; (3e44 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3d34:	e7ec      	b.n	3d10 <MPSL_IRQ_CLOCK_Handler+0x220>
    3d36:	4844      	ldr	r0, [pc, #272]	; (3e48 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3d38:	e7ea      	b.n	3d10 <MPSL_IRQ_CLOCK_Handler+0x220>
    3d3a:	f240 312d 	movw	r1, #813	; 0x32d
    3d3e:	e049      	b.n	3dd4 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3d40:	f000 f9cc 	bl	40dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3d44:	e060      	b.n	3e08 <MPSL_IRQ_CLOCK_Handler+0x318>
    3d46:	60ef      	str	r7, [r5, #12]
    3d48:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3d4c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3d50:	69a0      	ldr	r0, [r4, #24]
    3d52:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3d56:	f008 fad0 	bl	c2fa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3d5a:	b940      	cbnz	r0, 3d6e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3d5c:	f008 fad7 	bl	c30e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3d60:	b928      	cbnz	r0, 3d6e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3d62:	f008 faeb 	bl	c33c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3d66:	b910      	cbnz	r0, 3d6e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3d68:	f008 fafc 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3d6c:	b138      	cbz	r0, 3d7e <MPSL_IRQ_CLOCK_Handler+0x28e>
    3d6e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3d72:	4836      	ldr	r0, [pc, #216]	; (3e4c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3d74:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3d78:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3d7c:	6001      	str	r1, [r0, #0]
    3d7e:	f008 fabc 	bl	c2fa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3d82:	b940      	cbnz	r0, 3d96 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3d84:	f008 fac3 	bl	c30e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3d88:	b928      	cbnz	r0, 3d96 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3d8a:	f008 fad7 	bl	c33c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3d8e:	b910      	cbnz	r0, 3d96 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3d90:	f008 fae8 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3d94:	b110      	cbz	r0, 3d9c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3d96:	482d      	ldr	r0, [pc, #180]	; (3e4c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3d98:	3010      	adds	r0, #16
    3d9a:	6007      	str	r7, [r0, #0]
    3d9c:	60af      	str	r7, [r5, #8]
    3d9e:	2002      	movs	r0, #2
    3da0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3da4:	79b0      	ldrb	r0, [r6, #6]
    3da6:	bb78      	cbnz	r0, 3e08 <MPSL_IRQ_CLOCK_Handler+0x318>
    3da8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3dac:	f010 0f02 	tst.w	r0, #2
    3db0:	d00e      	beq.n	3dd0 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3db2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3e50 <MPSL_IRQ_CLOCK_Handler+0x360>
    3db6:	f8d9 1000 	ldr.w	r1, [r9]
    3dba:	43c9      	mvns	r1, r1
    3dbc:	f341 1700 	sbfx	r7, r1, #4, #1
    3dc0:	f8d9 1000 	ldr.w	r1, [r9]
    3dc4:	f041 0110 	orr.w	r1, r1, #16
    3dc8:	f8c9 1000 	str.w	r1, [r9]
    3dcc:	1c7f      	adds	r7, r7, #1
    3dce:	e007      	b.n	3de0 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3dd0:	f240 21ee 	movw	r1, #750	; 0x2ee
    3dd4:	206d      	movs	r0, #109	; 0x6d
    3dd6:	f000 fa0b 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dda:	bf00      	nop
    3ddc:	f000 fb2e 	bl	443c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3de0:	4651      	mov	r1, sl
    3de2:	4628      	mov	r0, r5
    3de4:	f008 f9f3 	bl	c1ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3de8:	2800      	cmp	r0, #0
    3dea:	d0f7      	beq.n	3ddc <MPSL_IRQ_CLOCK_Handler+0x2ec>
    3dec:	f000 f976 	bl	40dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3df0:	b92f      	cbnz	r7, 3dfe <MPSL_IRQ_CLOCK_Handler+0x30e>
    3df2:	f8d9 1000 	ldr.w	r1, [r9]
    3df6:	f021 0110 	bic.w	r1, r1, #16
    3dfa:	f8c9 1000 	str.w	r1, [r9]
    3dfe:	2002      	movs	r0, #2
    3e00:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3e04:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3e08:	79a0      	ldrb	r0, [r4, #6]
    3e0a:	b170      	cbz	r0, 3e2a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3e0c:	7830      	ldrb	r0, [r6, #0]
    3e0e:	b960      	cbnz	r0, 3e2a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3e10:	f000 f976 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3e14:	4606      	mov	r6, r0
    3e16:	f000 fa5b 	bl	42d0 <mpsl_temperature_get>
    3e1a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3e1e:	b116      	cbz	r6, 3e26 <MPSL_IRQ_CLOCK_Handler+0x336>
    3e20:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3e24:	e001      	b.n	3e2a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3e26:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3e2a:	2101      	movs	r1, #1
    3e2c:	4628      	mov	r0, r5
    3e2e:	f008 f9d3 	bl	c1d8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3e32:	b108      	cbz	r0, 3e38 <MPSL_IRQ_CLOCK_Handler+0x348>
    3e34:	f000 f95e 	bl	40f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3e38:	f884 800a 	strb.w	r8, [r4, #10]
    3e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e40:	2000002c 	.word	0x2000002c
    3e44:	00020001 	.word	0x00020001
    3e48:	00030001 	.word	0x00030001
    3e4c:	4000053c 	.word	0x4000053c
    3e50:	e000ed10 	.word	0xe000ed10

00003e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3e54:	b510      	push	{r4, lr}
    3e56:	f3ef 8410 	mrs	r4, PRIMASK
    3e5a:	b672      	cpsid	i
    3e5c:	480a      	ldr	r0, [pc, #40]	; (3e88 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3e5e:	7841      	ldrb	r1, [r0, #1]
    3e60:	b129      	cbz	r1, 3e6e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3e62:	7841      	ldrb	r1, [r0, #1]
    3e64:	1e49      	subs	r1, r1, #1
    3e66:	7041      	strb	r1, [r0, #1]
    3e68:	7841      	ldrb	r1, [r0, #1]
    3e6a:	b129      	cbz	r1, 3e78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3e6c:	e008      	b.n	3e80 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3e6e:	f240 110d 	movw	r1, #269	; 0x10d
    3e72:	206d      	movs	r0, #109	; 0x6d
    3e74:	f000 f9bc 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e78:	7880      	ldrb	r0, [r0, #2]
    3e7a:	b908      	cbnz	r0, 3e80 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3e7c:	f000 f94e 	bl	411c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3e80:	2c00      	cmp	r4, #0
    3e82:	d100      	bne.n	3e86 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3e84:	b662      	cpsie	i
    3e86:	bd10      	pop	{r4, pc}
    3e88:	2000002c 	.word	0x2000002c

00003e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3e8c:	b510      	push	{r4, lr}
    3e8e:	f3ef 8410 	mrs	r4, PRIMASK
    3e92:	b672      	cpsid	i
    3e94:	4806      	ldr	r0, [pc, #24]	; (3eb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3e96:	7841      	ldrb	r1, [r0, #1]
    3e98:	1c49      	adds	r1, r1, #1
    3e9a:	7041      	strb	r1, [r0, #1]
    3e9c:	7840      	ldrb	r0, [r0, #1]
    3e9e:	2801      	cmp	r0, #1
    3ea0:	d101      	bne.n	3ea6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3ea2:	f008 f9b0 	bl	c206 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3ea6:	2c00      	cmp	r4, #0
    3ea8:	d100      	bne.n	3eac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3eaa:	b662      	cpsie	i
    3eac:	bd10      	pop	{r4, pc}
    3eae:	0000      	.short	0x0000
    3eb0:	2000002c 	.word	0x2000002c

00003eb4 <mpsl_clock_hfclk_release>:
    3eb4:	4805      	ldr	r0, [pc, #20]	; (3ecc <mpsl_clock_hfclk_release+0x18>)
    3eb6:	b510      	push	{r4, lr}
    3eb8:	78c1      	ldrb	r1, [r0, #3]
    3eba:	b121      	cbz	r1, 3ec6 <mpsl_clock_hfclk_release+0x12>
    3ebc:	2100      	movs	r1, #0
    3ebe:	7101      	strb	r1, [r0, #4]
    3ec0:	70c1      	strb	r1, [r0, #3]
    3ec2:	f7ff ffc7 	bl	3e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3ec6:	2000      	movs	r0, #0
    3ec8:	bd10      	pop	{r4, pc}
    3eca:	0000      	.short	0x0000
    3ecc:	2000002c 	.word	0x2000002c

00003ed0 <mpsl_clock_hfclk_request>:
    3ed0:	b570      	push	{r4, r5, r6, lr}
    3ed2:	4c0c      	ldr	r4, [pc, #48]	; (3f04 <mpsl_clock_hfclk_request+0x34>)
    3ed4:	78e1      	ldrb	r1, [r4, #3]
    3ed6:	b961      	cbnz	r1, 3ef2 <mpsl_clock_hfclk_request+0x22>
    3ed8:	2501      	movs	r5, #1
    3eda:	70e5      	strb	r5, [r4, #3]
    3edc:	61e0      	str	r0, [r4, #28]
    3ede:	f7ff ffd5 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3ee2:	f000 f90d 	bl	4100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3ee6:	b130      	cbz	r0, 3ef6 <mpsl_clock_hfclk_request+0x26>
    3ee8:	69e0      	ldr	r0, [r4, #28]
    3eea:	b110      	cbz	r0, 3ef2 <mpsl_clock_hfclk_request+0x22>
    3eec:	4780      	blx	r0
    3eee:	2000      	movs	r0, #0
    3ef0:	61e0      	str	r0, [r4, #28]
    3ef2:	2000      	movs	r0, #0
    3ef4:	bd70      	pop	{r4, r5, r6, pc}
    3ef6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3efa:	7125      	strb	r5, [r4, #4]
    3efc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3f00:	e7f7      	b.n	3ef2 <mpsl_clock_hfclk_request+0x22>
    3f02:	0000      	.short	0x0000
    3f04:	2000002c 	.word	0x2000002c

00003f08 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3f08:	f3ef 8010 	mrs	r0, PRIMASK
    3f0c:	b672      	cpsid	i
    3f0e:	4904      	ldr	r1, [pc, #16]	; (3f20 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3f10:	788a      	ldrb	r2, [r1, #2]
    3f12:	1c52      	adds	r2, r2, #1
    3f14:	708a      	strb	r2, [r1, #2]
    3f16:	2800      	cmp	r0, #0
    3f18:	d100      	bne.n	3f1c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3f1a:	b662      	cpsie	i
    3f1c:	4770      	bx	lr
    3f1e:	0000      	.short	0x0000
    3f20:	2000002c 	.word	0x2000002c

00003f24 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3f24:	b510      	push	{r4, lr}
    3f26:	f3ef 8410 	mrs	r4, PRIMASK
    3f2a:	b672      	cpsid	i
    3f2c:	480a      	ldr	r0, [pc, #40]	; (3f58 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3f2e:	7881      	ldrb	r1, [r0, #2]
    3f30:	b129      	cbz	r1, 3f3e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3f32:	7881      	ldrb	r1, [r0, #2]
    3f34:	1e49      	subs	r1, r1, #1
    3f36:	7081      	strb	r1, [r0, #2]
    3f38:	7841      	ldrb	r1, [r0, #1]
    3f3a:	b129      	cbz	r1, 3f48 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3f3c:	e008      	b.n	3f50 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3f3e:	f240 1125 	movw	r1, #293	; 0x125
    3f42:	206d      	movs	r0, #109	; 0x6d
    3f44:	f000 f954 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f48:	7880      	ldrb	r0, [r0, #2]
    3f4a:	b908      	cbnz	r0, 3f50 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3f4c:	f000 f8e6 	bl	411c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3f50:	2c00      	cmp	r4, #0
    3f52:	d100      	bne.n	3f56 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3f54:	b662      	cpsie	i
    3f56:	bd10      	pop	{r4, pc}
    3f58:	2000002c 	.word	0x2000002c

00003f5c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f60:	0004      	movs	r4, r0
    3f62:	f06f 0015 	mvn.w	r0, #21
    3f66:	d03c      	beq.n	3fe2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3f68:	7821      	ldrb	r1, [r4, #0]
    3f6a:	2904      	cmp	r1, #4
    3f6c:	d839      	bhi.n	3fe2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3f6e:	2900      	cmp	r1, #0
    3f70:	7861      	ldrb	r1, [r4, #1]
    3f72:	d038      	beq.n	3fe6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3f74:	2900      	cmp	r1, #0
    3f76:	d134      	bne.n	3fe2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3f78:	78a1      	ldrb	r1, [r4, #2]
    3f7a:	2900      	cmp	r1, #0
    3f7c:	d131      	bne.n	3fe2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3f7e:	2000      	movs	r0, #0
    3f80:	f008 f8f0 	bl	c164 <MPSL_IRQ_RADIO_Handler+0x1e>
    3f84:	2000      	movs	r0, #0
    3f86:	f008 f8e0 	bl	c14a <MPSL_IRQ_RADIO_Handler+0x4>
    3f8a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3f8e:	f04f 31ff 	mov.w	r1, #4294967295
    3f92:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3f96:	2600      	movs	r6, #0
    3f98:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3f9c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3fa0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3fa4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3fa8:	4f14      	ldr	r7, [pc, #80]	; (3ffc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3faa:	707e      	strb	r6, [r7, #1]
    3fac:	88a0      	ldrh	r0, [r4, #4]
    3fae:	81b8      	strh	r0, [r7, #12]
    3fb0:	f008 f920 	bl	c1f4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3fb4:	2501      	movs	r5, #1
    3fb6:	b108      	cbz	r0, 3fbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3fb8:	70fd      	strb	r5, [r7, #3]
    3fba:	707d      	strb	r5, [r7, #1]
    3fbc:	2101      	movs	r1, #1
    3fbe:	4640      	mov	r0, r8
    3fc0:	f008 f90a 	bl	c1d8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3fc4:	b108      	cbz	r0, 3fca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3fc6:	f000 f895 	bl	40f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3fca:	4620      	mov	r0, r4
    3fcc:	f7ff fe7c 	bl	3cc8 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3fd0:	727d      	strb	r5, [r7, #9]
    3fd2:	2000      	movs	r0, #0
    3fd4:	f008 f8b9 	bl	c14a <MPSL_IRQ_RADIO_Handler+0x4>
    3fd8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3fdc:	4630      	mov	r0, r6
    3fde:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fe6:	2900      	cmp	r1, #0
    3fe8:	d0fb      	beq.n	3fe2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3fea:	2920      	cmp	r1, #32
    3fec:	d8f9      	bhi.n	3fe2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3fee:	78a1      	ldrb	r1, [r4, #2]
    3ff0:	2921      	cmp	r1, #33	; 0x21
    3ff2:	d8f6      	bhi.n	3fe2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3ff4:	2901      	cmp	r1, #1
    3ff6:	d1c2      	bne.n	3f7e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3ff8:	e7f3      	b.n	3fe2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3ffa:	0000      	.short	0x0000
    3ffc:	2000002c 	.word	0x2000002c

00004000 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4000:	4801      	ldr	r0, [pc, #4]	; (4008 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4002:	8980      	ldrh	r0, [r0, #12]
    4004:	4770      	bx	lr
    4006:	0000      	.short	0x0000
    4008:	2000002c 	.word	0x2000002c

0000400c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    400c:	b510      	push	{r4, lr}
    400e:	480d      	ldr	r0, [pc, #52]	; (4044 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4010:	f008 f951 	bl	c2b6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4014:	490b      	ldr	r1, [pc, #44]	; (4044 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4016:	3908      	subs	r1, #8
    4018:	b148      	cbz	r0, 402e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    401a:	2001      	movs	r0, #1
    401c:	7008      	strb	r0, [r1, #0]
    401e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4022:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    402a:	f7ff bf2f 	b.w	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    402e:	7a88      	ldrb	r0, [r1, #10]
    4030:	2802      	cmp	r0, #2
    4032:	d101      	bne.n	4038 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4034:	f7ff fda0 	bl	3b78 <MPSL_IRQ_CLOCK_Handler+0x88>
    4038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    403c:	4801      	ldr	r0, [pc, #4]	; (4044 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    403e:	f008 b951 	b.w	c2e4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4042:	0000      	.short	0x0000
    4044:	20000034 	.word	0x20000034

00004048 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4048:	4802      	ldr	r0, [pc, #8]	; (4054 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    404a:	7a80      	ldrb	r0, [r0, #10]
    404c:	2800      	cmp	r0, #0
    404e:	d000      	beq.n	4052 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4050:	2001      	movs	r0, #1
    4052:	4770      	bx	lr
    4054:	2000002c 	.word	0x2000002c

00004058 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    405a:	4d1f      	ldr	r5, [pc, #124]	; (40d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    405c:	7ae8      	ldrb	r0, [r5, #11]
    405e:	2800      	cmp	r0, #0
    4060:	d10f      	bne.n	4082 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4062:	7e28      	ldrb	r0, [r5, #24]
    4064:	f000 0003 	and.w	r0, r0, #3
    4068:	f008 f8d2 	bl	c210 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    406c:	2800      	cmp	r0, #0
    406e:	d008      	beq.n	4082 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4070:	f3ef 8110 	mrs	r1, PRIMASK
    4074:	b672      	cpsid	i
    4076:	f7ff ffe7 	bl	4048 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    407a:	b118      	cbz	r0, 4084 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    407c:	2900      	cmp	r1, #0
    407e:	d100      	bne.n	4082 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4080:	b662      	cpsie	i
    4082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4084:	2601      	movs	r6, #1
    4086:	72ae      	strb	r6, [r5, #10]
    4088:	b901      	cbnz	r1, 408c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    408a:	b662      	cpsie	i
    408c:	2018      	movs	r0, #24
    408e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4092:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4096:	61a6      	str	r6, [r4, #24]
    4098:	f44f 7020 	mov.w	r0, #640	; 0x280
    409c:	f8ad 0000 	strh.w	r0, [sp]
    40a0:	f8bd 0000 	ldrh.w	r0, [sp]
    40a4:	1e41      	subs	r1, r0, #1
    40a6:	f8ad 1000 	strh.w	r1, [sp]
    40aa:	d2f9      	bcs.n	40a0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    40ac:	2700      	movs	r7, #0
    40ae:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    40b2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    40b6:	4808      	ldr	r0, [pc, #32]	; (40d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    40b8:	3008      	adds	r0, #8
    40ba:	f008 f90f 	bl	c2dc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    40be:	702f      	strb	r7, [r5, #0]
    40c0:	f7ff fd5a 	bl	3b78 <MPSL_IRQ_CLOCK_Handler+0x88>
    40c4:	6166      	str	r6, [r4, #20]
    40c6:	7968      	ldrb	r0, [r5, #5]
    40c8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    40cc:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    40d0:	2018      	movs	r0, #24
    40d2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    40d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40d8:	2000002c 	.word	0x2000002c

000040dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    40dc:	b510      	push	{r4, lr}
    40de:	4c04      	ldr	r4, [pc, #16]	; (40f0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    40e0:	7e20      	ldrb	r0, [r4, #24]
    40e2:	f000 0003 	and.w	r0, r0, #3
    40e6:	f008 f893 	bl	c210 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    40ea:	2800      	cmp	r0, #0
    40ec:	d0f8      	beq.n	40e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    40ee:	bd10      	pop	{r4, pc}
    40f0:	2000002c 	.word	0x2000002c

000040f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    40f4:	4901      	ldr	r1, [pc, #4]	; (40fc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    40f6:	2001      	movs	r0, #1
    40f8:	7008      	strb	r0, [r1, #0]
    40fa:	4770      	bx	lr
    40fc:	20000290 	.word	0x20000290

00004100 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4100:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4104:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4108:	b918      	cbnz	r0, 4112 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    410a:	4803      	ldr	r0, [pc, #12]	; (4118 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    410c:	7800      	ldrb	r0, [r0, #0]
    410e:	2800      	cmp	r0, #0
    4110:	d000      	beq.n	4114 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4112:	2001      	movs	r0, #1
    4114:	4770      	bx	lr
    4116:	0000      	.short	0x0000
    4118:	20000290 	.word	0x20000290

0000411c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    411c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4120:	2101      	movs	r1, #1
    4122:	6041      	str	r1, [r0, #4]
    4124:	2100      	movs	r1, #0
    4126:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    412a:	4801      	ldr	r0, [pc, #4]	; (4130 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    412c:	7001      	strb	r1, [r0, #0]
    412e:	4770      	bx	lr
    4130:	20000290 	.word	0x20000290

00004134 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4134:	4802      	ldr	r0, [pc, #8]	; (4140 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4136:	6800      	ldr	r0, [r0, #0]
    4138:	f000 0003 	and.w	r0, r0, #3
    413c:	4770      	bx	lr
    413e:	0000      	.short	0x0000
    4140:	4000041c 	.word	0x4000041c
    4144:	b510      	push	{r4, lr}
    4146:	b131      	cbz	r1, 4156 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4148:	2901      	cmp	r1, #1
    414a:	d007      	beq.n	415c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    414c:	f240 3102 	movw	r1, #770	; 0x302
    4150:	a005      	add	r0, pc, #20	; (adr r0, 4168 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4152:	f000 f821 	bl	4198 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4156:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    415a:	e001      	b.n	4160 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    415c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4160:	f000 0001 	and.w	r0, r0, #1
    4164:	bd10      	pop	{r4, pc}
    4166:	0000      	.short	0x0000
    4168:	5f66726e 	.word	0x5f66726e
    416c:	636f6c63 	.word	0x636f6c63
    4170:	00682e6b 	.word	0x00682e6b
    4174:	f3bf 8f4f 	dsb	sy
    4178:	4805      	ldr	r0, [pc, #20]	; (4190 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    417a:	6801      	ldr	r1, [r0, #0]
    417c:	4a05      	ldr	r2, [pc, #20]	; (4194 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    417e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4182:	4311      	orrs	r1, r2
    4184:	6001      	str	r1, [r0, #0]
    4186:	f3bf 8f4f 	dsb	sy
    418a:	bf00      	nop
    418c:	e7fd      	b.n	418a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    418e:	0000      	.short	0x0000
    4190:	e000ed0c 	.word	0xe000ed0c
    4194:	05fa0004 	.word	0x05fa0004

00004198 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4198:	b672      	cpsid	i
    419a:	4a03      	ldr	r2, [pc, #12]	; (41a8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    419c:	6852      	ldr	r2, [r2, #4]
    419e:	b102      	cbz	r2, 41a2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    41a0:	4790      	blx	r2
    41a2:	f7ff ffe7 	bl	4174 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    41a6:	0000      	.short	0x0000
    41a8:	2000004c 	.word	0x2000004c
    41ac:	4806      	ldr	r0, [pc, #24]	; (41c8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    41ae:	b510      	push	{r4, lr}
    41b0:	2100      	movs	r1, #0
    41b2:	6001      	str	r1, [r0, #0]
    41b4:	2101      	movs	r1, #1
    41b6:	6001      	str	r1, [r0, #0]
    41b8:	4608      	mov	r0, r1
    41ba:	f008 f850 	bl	c25e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    41be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    41c2:	2001      	movs	r0, #1
    41c4:	f008 b83e 	b.w	c244 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    41c8:	40001ffc 	.word	0x40001ffc
    41cc:	4807      	ldr	r0, [pc, #28]	; (41ec <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    41ce:	b510      	push	{r4, lr}
    41d0:	2101      	movs	r1, #1
    41d2:	6041      	str	r1, [r0, #4]
    41d4:	1e89      	subs	r1, r1, #2
    41d6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    41da:	200c      	movs	r0, #12
    41dc:	f008 f83f 	bl	c25e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    41e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    41e4:	200c      	movs	r0, #12
    41e6:	f008 b82d 	b.w	c244 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    41ea:	0000      	.short	0x0000
    41ec:	4000c000 	.word	0x4000c000

000041f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    41f0:	b50e      	push	{r1, r2, r3, lr}
    41f2:	b672      	cpsid	i
    41f4:	4a0f      	ldr	r2, [pc, #60]	; (4234 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    41f6:	6855      	ldr	r5, [r2, #4]
    41f8:	b1d5      	cbz	r5, 4230 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    41fa:	2200      	movs	r2, #0
    41fc:	4603      	mov	r3, r0
    41fe:	466e      	mov	r6, sp
    4200:	240a      	movs	r4, #10
    4202:	e003      	b.n	420c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4204:	fbb0 f0f4 	udiv	r0, r0, r4
    4208:	1c52      	adds	r2, r2, #1
    420a:	b2d2      	uxtb	r2, r2
    420c:	2800      	cmp	r0, #0
    420e:	d1f9      	bne.n	4204 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4210:	54b0      	strb	r0, [r6, r2]
    4212:	e009      	b.n	4228 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4214:	fbb3 f0f4 	udiv	r0, r3, r4
    4218:	fb04 3010 	mls	r0, r4, r0, r3
    421c:	fbb3 f3f4 	udiv	r3, r3, r4
    4220:	1e52      	subs	r2, r2, #1
    4222:	b2d2      	uxtb	r2, r2
    4224:	3030      	adds	r0, #48	; 0x30
    4226:	54b0      	strb	r0, [r6, r2]
    4228:	2a00      	cmp	r2, #0
    422a:	d1f3      	bne.n	4214 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    422c:	4630      	mov	r0, r6
    422e:	47a8      	blx	r5
    4230:	f7ff ffa0 	bl	4174 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4234:	2000004c 	.word	0x2000004c

00004238 <mpsl_init>:
    4238:	b570      	push	{r4, r5, r6, lr}
    423a:	4c17      	ldr	r4, [pc, #92]	; (4298 <mpsl_init+0x60>)
    423c:	4606      	mov	r6, r0
    423e:	460d      	mov	r5, r1
    4240:	7860      	ldrb	r0, [r4, #1]
    4242:	b110      	cbz	r0, 424a <mpsl_init+0x12>
    4244:	f04f 30ff 	mov.w	r0, #4294967295
    4248:	bd70      	pop	{r4, r5, r6, pc}
    424a:	b906      	cbnz	r6, 424e <mpsl_init+0x16>
    424c:	4e13      	ldr	r6, [pc, #76]	; (429c <mpsl_init+0x64>)
    424e:	6062      	str	r2, [r4, #4]
    4250:	7025      	strb	r5, [r4, #0]
    4252:	f7ff ffab 	bl	41ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4256:	f7ff ffb9 	bl	41cc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    425a:	4630      	mov	r0, r6
    425c:	f7ff fe7e 	bl	3f5c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4260:	0006      	movs	r6, r0
    4262:	d1f1      	bne.n	4248 <mpsl_init+0x10>
    4264:	f7fe fed8 	bl	3018 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4268:	f7ff fef6 	bl	4058 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    426c:	f007 ff44 	bl	c0f8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4270:	4628      	mov	r0, r5
    4272:	f007 ffe7 	bl	c244 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4276:	2001      	movs	r0, #1
    4278:	2d00      	cmp	r5, #0
    427a:	db09      	blt.n	4290 <mpsl_init+0x58>
    427c:	f005 011f 	and.w	r1, r5, #31
    4280:	fa00 f101 	lsl.w	r1, r0, r1
    4284:	096a      	lsrs	r2, r5, #5
    4286:	0092      	lsls	r2, r2, #2
    4288:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    428c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4290:	7060      	strb	r0, [r4, #1]
    4292:	4630      	mov	r0, r6
    4294:	bd70      	pop	{r4, r5, r6, pc}
    4296:	0000      	.short	0x0000
    4298:	2000004c 	.word	0x2000004c
    429c:	0000c280 	.word	0x0000c280

000042a0 <mpsl_is_initialized>:
    42a0:	4801      	ldr	r0, [pc, #4]	; (42a8 <mpsl_is_initialized+0x8>)
    42a2:	7840      	ldrb	r0, [r0, #1]
    42a4:	4770      	bx	lr
    42a6:	0000      	.short	0x0000
    42a8:	2000004c 	.word	0x2000004c

000042ac <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    42ac:	4807      	ldr	r0, [pc, #28]	; (42cc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    42ae:	f990 0000 	ldrsb.w	r0, [r0]
    42b2:	2800      	cmp	r0, #0
    42b4:	db09      	blt.n	42ca <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    42b6:	f000 021f 	and.w	r2, r0, #31
    42ba:	2101      	movs	r1, #1
    42bc:	4091      	lsls	r1, r2
    42be:	0940      	lsrs	r0, r0, #5
    42c0:	0080      	lsls	r0, r0, #2
    42c2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    42c6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    42ca:	4770      	bx	lr
    42cc:	2000004c 	.word	0x2000004c

000042d0 <mpsl_temperature_get>:
    42d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42d4:	2601      	movs	r6, #1
    42d6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    42da:	0331      	lsls	r1, r6, #12
    42dc:	f04f 0800 	mov.w	r8, #0
    42e0:	4640      	mov	r0, r8
    42e2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    42e6:	f3bf 8f4f 	dsb	sy
    42ea:	f3bf 8f6f 	isb	sy
    42ee:	4c16      	ldr	r4, [pc, #88]	; (4348 <mpsl_temperature_get+0x78>)
    42f0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    42f4:	200c      	movs	r0, #12
    42f6:	f007 ffd1 	bl	c29c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    42fa:	4d14      	ldr	r5, [pc, #80]	; (434c <mpsl_temperature_get+0x7c>)
    42fc:	6828      	ldr	r0, [r5, #0]
    42fe:	43c0      	mvns	r0, r0
    4300:	f340 1700 	sbfx	r7, r0, #4, #1
    4304:	6828      	ldr	r0, [r5, #0]
    4306:	f040 0010 	orr.w	r0, r0, #16
    430a:	6028      	str	r0, [r5, #0]
    430c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4310:	6026      	str	r6, [r4, #0]
    4312:	1c7f      	adds	r7, r7, #1
    4314:	e002      	b.n	431c <mpsl_temperature_get+0x4c>
    4316:	bf00      	nop
    4318:	f000 f890 	bl	443c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    431c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4320:	2800      	cmp	r0, #0
    4322:	d0f9      	beq.n	4318 <mpsl_temperature_get+0x48>
    4324:	b91f      	cbnz	r7, 432e <mpsl_temperature_get+0x5e>
    4326:	6828      	ldr	r0, [r5, #0]
    4328:	f020 0010 	bic.w	r0, r0, #16
    432c:	6028      	str	r0, [r5, #0]
    432e:	4808      	ldr	r0, [pc, #32]	; (4350 <mpsl_temperature_get+0x80>)
    4330:	6805      	ldr	r5, [r0, #0]
    4332:	6066      	str	r6, [r4, #4]
    4334:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4338:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    433c:	200c      	movs	r0, #12
    433e:	f007 ffad 	bl	c29c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4342:	4628      	mov	r0, r5
    4344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4348:	4000c000 	.word	0x4000c000
    434c:	e000ed10 	.word	0xe000ed10
    4350:	4000c508 	.word	0x4000c508

00004354 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4354:	b510      	push	{r4, lr}
    4356:	4602      	mov	r2, r0
    4358:	2005      	movs	r0, #5
    435a:	490c      	ldr	r1, [pc, #48]	; (438c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    435c:	e004      	b.n	4368 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    435e:	bf00      	nop
    4360:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4364:	791b      	ldrb	r3, [r3, #4]
    4366:	b133      	cbz	r3, 4376 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4368:	1e40      	subs	r0, r0, #1
    436a:	b2c0      	uxtb	r0, r0
    436c:	d2f8      	bcs.n	4360 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    436e:	2148      	movs	r1, #72	; 0x48
    4370:	2069      	movs	r0, #105	; 0x69
    4372:	f7ff ff3d 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4376:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    437a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    437e:	2200      	movs	r2, #0
    4380:	714a      	strb	r2, [r1, #5]
    4382:	718a      	strb	r2, [r1, #6]
    4384:	2201      	movs	r2, #1
    4386:	710a      	strb	r2, [r1, #4]
    4388:	bd10      	pop	{r4, pc}
    438a:	0000      	.short	0x0000
    438c:	20001328 	.word	0x20001328

00004390 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4390:	b510      	push	{r4, lr}
    4392:	2805      	cmp	r0, #5
    4394:	d301      	bcc.n	439a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4396:	2158      	movs	r1, #88	; 0x58
    4398:	e006      	b.n	43a8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    439a:	490a      	ldr	r1, [pc, #40]	; (43c4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    439c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    43a0:	7901      	ldrb	r1, [r0, #4]
    43a2:	2901      	cmp	r1, #1
    43a4:	d003      	beq.n	43ae <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    43a6:	2159      	movs	r1, #89	; 0x59
    43a8:	2069      	movs	r0, #105	; 0x69
    43aa:	f7ff ff21 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43ae:	7941      	ldrb	r1, [r0, #5]
    43b0:	7982      	ldrb	r2, [r0, #6]
    43b2:	1c49      	adds	r1, r1, #1
    43b4:	b2c9      	uxtb	r1, r1
    43b6:	428a      	cmp	r2, r1
    43b8:	d000      	beq.n	43bc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    43ba:	7141      	strb	r1, [r0, #5]
    43bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    43c0:	f7ff bf74 	b.w	42ac <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    43c4:	20001328 	.word	0x20001328

000043c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    43c8:	b570      	push	{r4, r5, r6, lr}
    43ca:	2505      	movs	r5, #5
    43cc:	4e0e      	ldr	r6, [pc, #56]	; (4408 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    43ce:	4c0f      	ldr	r4, [pc, #60]	; (440c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    43d0:	e016      	b.n	4400 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    43d2:	7821      	ldrb	r1, [r4, #0]
    43d4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    43d8:	7902      	ldrb	r2, [r0, #4]
    43da:	2a01      	cmp	r2, #1
    43dc:	d108      	bne.n	43f0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    43de:	7942      	ldrb	r2, [r0, #5]
    43e0:	7983      	ldrb	r3, [r0, #6]
    43e2:	429a      	cmp	r2, r3
    43e4:	d004      	beq.n	43f0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    43e6:	7942      	ldrb	r2, [r0, #5]
    43e8:	7182      	strb	r2, [r0, #6]
    43ea:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    43ee:	4780      	blx	r0
    43f0:	7820      	ldrb	r0, [r4, #0]
    43f2:	1c40      	adds	r0, r0, #1
    43f4:	b2c0      	uxtb	r0, r0
    43f6:	7020      	strb	r0, [r4, #0]
    43f8:	2805      	cmp	r0, #5
    43fa:	d301      	bcc.n	4400 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    43fc:	2000      	movs	r0, #0
    43fe:	7020      	strb	r0, [r4, #0]
    4400:	1e6d      	subs	r5, r5, #1
    4402:	b2ed      	uxtb	r5, r5
    4404:	d2e5      	bcs.n	43d2 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4406:	bd70      	pop	{r4, r5, r6, pc}
    4408:	20001328 	.word	0x20001328
    440c:	20000291 	.word	0x20000291

00004410 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4410:	b500      	push	{lr}
    4412:	f007 ff72 	bl	c2fa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4416:	b940      	cbnz	r0, 442a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4418:	f007 ff79 	bl	c30e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    441c:	b928      	cbnz	r0, 442a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    441e:	f007 ff8d 	bl	c33c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4422:	b910      	cbnz	r0, 442a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4424:	f007 ff9e 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4428:	b108      	cbz	r0, 442e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    442a:	4802      	ldr	r0, [pc, #8]	; (4434 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    442c:	bd00      	pop	{pc}
    442e:	4802      	ldr	r0, [pc, #8]	; (4438 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4430:	bd00      	pop	{pc}
    4432:	0000      	.short	0x0000
    4434:	4000050c 	.word	0x4000050c
    4438:	4001e700 	.word	0x4001e700

0000443c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    443c:	b510      	push	{r4, lr}
    443e:	f007 ff91 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4442:	b330      	cbz	r0, 4492 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4444:	f3ef 8010 	mrs	r0, PRIMASK
    4448:	b1c8      	cbz	r0, 447e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    444a:	2100      	movs	r1, #0
    444c:	b672      	cpsid	i
    444e:	4812      	ldr	r0, [pc, #72]	; (4498 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4450:	6802      	ldr	r2, [r0, #0]
    4452:	6803      	ldr	r3, [r0, #0]
    4454:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4458:	f043 0310 	orr.w	r3, r3, #16
    445c:	6003      	str	r3, [r0, #0]
    445e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4462:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4466:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    446a:	431c      	orrs	r4, r3
    446c:	d000      	beq.n	4470 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    446e:	bf40      	sev
    4470:	bf20      	wfe
    4472:	bf00      	nop
    4474:	bf00      	nop
    4476:	bf00      	nop
    4478:	bf00      	nop
    447a:	b112      	cbz	r2, 4482 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    447c:	e005      	b.n	448a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    447e:	2101      	movs	r1, #1
    4480:	e7e4      	b.n	444c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4482:	6802      	ldr	r2, [r0, #0]
    4484:	f022 0210 	bic.w	r2, r2, #16
    4488:	6002      	str	r2, [r0, #0]
    448a:	2900      	cmp	r1, #0
    448c:	d000      	beq.n	4490 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    448e:	b662      	cpsie	i
    4490:	bd10      	pop	{r4, pc}
    4492:	bf20      	wfe
    4494:	bd10      	pop	{r4, pc}
    4496:	0000      	.short	0x0000
    4498:	e000ed10 	.word	0xe000ed10

0000449c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    449c:	0000c5d5 0000c5f1 0000c5df 0000c5eb     ................
    44ac:	0000c5d9 0000c5d3 0000c5d1 0000c5f7     ................
    44bc:	0000c5e5 0000c5cb 0000c5c3 0000c5c7     ................
    44cc:	0000c5bd                                ....

000044d0 <mpsl_fem_disable>:
    44d0:	4801      	ldr	r0, [pc, #4]	; (44d8 <mpsl_fem_disable+0x8>)
    44d2:	6800      	ldr	r0, [r0, #0]
    44d4:	6800      	ldr	r0, [r0, #0]
    44d6:	4700      	bx	r0
    44d8:	20000054 	.word	0x20000054

000044dc <mpsl_fem_lna_configuration_clear>:
    44dc:	4801      	ldr	r0, [pc, #4]	; (44e4 <mpsl_fem_lna_configuration_clear+0x8>)
    44de:	6800      	ldr	r0, [r0, #0]
    44e0:	6900      	ldr	r0, [r0, #16]
    44e2:	4700      	bx	r0
    44e4:	20000054 	.word	0x20000054

000044e8 <mpsl_fem_lna_configuration_set>:
    44e8:	4a01      	ldr	r2, [pc, #4]	; (44f0 <mpsl_fem_lna_configuration_set+0x8>)
    44ea:	6812      	ldr	r2, [r2, #0]
    44ec:	6892      	ldr	r2, [r2, #8]
    44ee:	4710      	bx	r2
    44f0:	20000054 	.word	0x20000054

000044f4 <mpsl_fem_pa_configuration_clear>:
    44f4:	4801      	ldr	r0, [pc, #4]	; (44fc <mpsl_fem_pa_configuration_clear+0x8>)
    44f6:	6800      	ldr	r0, [r0, #0]
    44f8:	68c0      	ldr	r0, [r0, #12]
    44fa:	4700      	bx	r0
    44fc:	20000054 	.word	0x20000054

00004500 <mpsl_fem_pa_configuration_set>:
    4500:	4a01      	ldr	r2, [pc, #4]	; (4508 <mpsl_fem_pa_configuration_set+0x8>)
    4502:	6812      	ldr	r2, [r2, #0]
    4504:	6852      	ldr	r2, [r2, #4]
    4506:	4710      	bx	r2
    4508:	20000054 	.word	0x20000054

0000450c <mpsl_fem_pa_is_configured>:
    450c:	4901      	ldr	r1, [pc, #4]	; (4514 <mpsl_fem_pa_is_configured+0x8>)
    450e:	6809      	ldr	r1, [r1, #0]
    4510:	6a09      	ldr	r1, [r1, #32]
    4512:	4708      	bx	r1
    4514:	20000054 	.word	0x20000054

00004518 <mpsl_fem_device_config_254_apply_get>:
    4518:	4801      	ldr	r0, [pc, #4]	; (4520 <mpsl_fem_device_config_254_apply_get+0x8>)
    451a:	7800      	ldrb	r0, [r0, #0]
    451c:	4770      	bx	lr
    451e:	0000      	.short	0x0000
    4520:	20000292 	.word	0x20000292
    4524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4526:	4c17      	ldr	r4, [pc, #92]	; (4584 <mpsl_fem_device_config_254_apply_get+0x6c>)
    4528:	7a20      	ldrb	r0, [r4, #8]
    452a:	2802      	cmp	r0, #2
    452c:	d200      	bcs.n	4530 <mpsl_fem_device_config_254_apply_get+0x18>
    452e:	2002      	movs	r0, #2
    4530:	f88d 0001 	strb.w	r0, [sp, #1]
    4534:	79e0      	ldrb	r0, [r4, #7]
    4536:	2803      	cmp	r0, #3
    4538:	d200      	bcs.n	453c <mpsl_fem_device_config_254_apply_get+0x24>
    453a:	2003      	movs	r0, #3
    453c:	f88d 0000 	strb.w	r0, [sp]
    4540:	79a0      	ldrb	r0, [r4, #6]
    4542:	f8ad 0004 	strh.w	r0, [sp, #4]
    4546:	7960      	ldrb	r0, [r4, #5]
    4548:	f8ad 0002 	strh.w	r0, [sp, #2]
    454c:	4668      	mov	r0, sp
    454e:	f006 f95b 	bl	a808 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4552:	b108      	cbz	r0, 4558 <mpsl_fem_device_config_254_apply_get+0x40>
    4554:	2184      	movs	r1, #132	; 0x84
    4556:	e010      	b.n	457a <mpsl_fem_device_config_254_apply_get+0x62>
    4558:	68e0      	ldr	r0, [r4, #12]
    455a:	9002      	str	r0, [sp, #8]
    455c:	a802      	add	r0, sp, #8
    455e:	f006 f969 	bl	a834 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4562:	b108      	cbz	r0, 4568 <mpsl_fem_device_config_254_apply_get+0x50>
    4564:	2188      	movs	r1, #136	; 0x88
    4566:	e008      	b.n	457a <mpsl_fem_device_config_254_apply_get+0x62>
    4568:	4807      	ldr	r0, [pc, #28]	; (4588 <mpsl_fem_device_config_254_apply_get+0x70>)
    456a:	6800      	ldr	r0, [r0, #0]
    456c:	9003      	str	r0, [sp, #12]
    456e:	a803      	add	r0, sp, #12
    4570:	f00b f915 	bl	f79e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4574:	2800      	cmp	r0, #0
    4576:	d003      	beq.n	4580 <mpsl_fem_device_config_254_apply_get+0x68>
    4578:	218c      	movs	r1, #140	; 0x8c
    457a:	2003      	movs	r0, #3
    457c:	f000 f8e4 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4580:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4582:	0000      	.short	0x0000
    4584:	20001350 	.word	0x20001350
    4588:	00004830 	.word	0x00004830

0000458c <sdc_build_revision_get>:
    458c:	b510      	push	{r4, lr}
    458e:	b128      	cbz	r0, 459c <sdc_build_revision_get+0x10>
    4590:	2214      	movs	r2, #20
    4592:	4904      	ldr	r1, [pc, #16]	; (45a4 <sdc_build_revision_get+0x18>)
    4594:	f007 ff38 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4598:	2000      	movs	r0, #0
    459a:	bd10      	pop	{r4, pc}
    459c:	f06f 0015 	mvn.w	r0, #21
    45a0:	bd10      	pop	{r4, pc}
    45a2:	0000      	.short	0x0000
    45a4:	0000484c 	.word	0x0000484c

000045a8 <sdc_cfg_set>:
    45a8:	b570      	push	{r4, r5, r6, lr}
    45aa:	0003      	movs	r3, r0
    45ac:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    45b0:	d103      	bne.n	45ba <sdc_cfg_set+0x12>
    45b2:	4c29      	ldr	r4, [pc, #164]	; (4658 <sdc_cfg_set+0xb0>)
    45b4:	7863      	ldrb	r3, [r4, #1]
    45b6:	b10b      	cbz	r3, 45bc <sdc_cfg_set+0x14>
    45b8:	1180      	asrs	r0, r0, #6
    45ba:	bd70      	pop	{r4, r5, r6, pc}
    45bc:	b309      	cbz	r1, 4602 <sdc_cfg_set+0x5a>
    45be:	f06f 0515 	mvn.w	r5, #21
    45c2:	b37a      	cbz	r2, 4624 <sdc_cfg_set+0x7c>
    45c4:	4b25      	ldr	r3, [pc, #148]	; (465c <sdc_cfg_set+0xb4>)
    45c6:	290c      	cmp	r1, #12
    45c8:	d241      	bcs.n	464e <sdc_cfg_set+0xa6>
    45ca:	e8df f001 	tbb	[pc, r1]
    45ce:	0640      	.short	0x0640
    45d0:	13100c09 	.word	0x13100c09
    45d4:	2616231b 	.word	0x2616231b
    45d8:	312c      	.short	0x312c
    45da:	7810      	ldrb	r0, [r2, #0]
    45dc:	7018      	strb	r0, [r3, #0]
    45de:	e02b      	b.n	4638 <sdc_cfg_set+0x90>
    45e0:	7810      	ldrb	r0, [r2, #0]
    45e2:	7058      	strb	r0, [r3, #1]
    45e4:	e028      	b.n	4638 <sdc_cfg_set+0x90>
    45e6:	6810      	ldr	r0, [r2, #0]
    45e8:	f8c3 0005 	str.w	r0, [r3, #5]
    45ec:	e024      	b.n	4638 <sdc_cfg_set+0x90>
    45ee:	6810      	ldr	r0, [r2, #0]
    45f0:	60d8      	str	r0, [r3, #12]
    45f2:	e021      	b.n	4638 <sdc_cfg_set+0x90>
    45f4:	7810      	ldrb	r0, [r2, #0]
    45f6:	7098      	strb	r0, [r3, #2]
    45f8:	e01e      	b.n	4638 <sdc_cfg_set+0x90>
    45fa:	7811      	ldrb	r1, [r2, #0]
    45fc:	2900      	cmp	r1, #0
    45fe:	d1dc      	bne.n	45ba <sdc_cfg_set+0x12>
    4600:	70d9      	strb	r1, [r3, #3]
    4602:	e019      	b.n	4638 <sdc_cfg_set+0x90>
    4604:	78e0      	ldrb	r0, [r4, #3]
    4606:	b110      	cbz	r0, 460e <sdc_cfg_set+0x66>
    4608:	7810      	ldrb	r0, [r2, #0]
    460a:	2802      	cmp	r0, #2
    460c:	d31f      	bcc.n	464e <sdc_cfg_set+0xa6>
    460e:	7810      	ldrb	r0, [r2, #0]
    4610:	7418      	strb	r0, [r3, #16]
    4612:	e011      	b.n	4638 <sdc_cfg_set+0x90>
    4614:	8810      	ldrh	r0, [r2, #0]
    4616:	8258      	strh	r0, [r3, #18]
    4618:	e00e      	b.n	4638 <sdc_cfg_set+0x90>
    461a:	7811      	ldrb	r1, [r2, #0]
    461c:	2900      	cmp	r1, #0
    461e:	d1cc      	bne.n	45ba <sdc_cfg_set+0x12>
    4620:	7119      	strb	r1, [r3, #4]
    4622:	e009      	b.n	4638 <sdc_cfg_set+0x90>
    4624:	e013      	b.n	464e <sdc_cfg_set+0xa6>
    4626:	7810      	ldrb	r0, [r2, #0]
    4628:	2802      	cmp	r0, #2
    462a:	d310      	bcc.n	464e <sdc_cfg_set+0xa6>
    462c:	7518      	strb	r0, [r3, #20]
    462e:	e003      	b.n	4638 <sdc_cfg_set+0x90>
    4630:	7811      	ldrb	r1, [r2, #0]
    4632:	2900      	cmp	r1, #0
    4634:	d1c1      	bne.n	45ba <sdc_cfg_set+0x12>
    4636:	7559      	strb	r1, [r3, #21]
    4638:	2201      	movs	r2, #1
    463a:	4908      	ldr	r1, [pc, #32]	; (465c <sdc_cfg_set+0xb4>)
    463c:	2000      	movs	r0, #0
    463e:	f007 ffdc 	bl	c5fa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4642:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4646:	db04      	blt.n	4652 <sdc_cfg_set+0xaa>
    4648:	f06f 000b 	mvn.w	r0, #11
    464c:	bd70      	pop	{r4, r5, r6, pc}
    464e:	4628      	mov	r0, r5
    4650:	bd70      	pop	{r4, r5, r6, pc}
    4652:	2101      	movs	r1, #1
    4654:	70a1      	strb	r1, [r4, #2]
    4656:	bd70      	pop	{r4, r5, r6, pc}
    4658:	20000058 	.word	0x20000058
    465c:	20001350 	.word	0x20001350

00004660 <sdc_enable>:
    4660:	b570      	push	{r4, r5, r6, lr}
    4662:	460c      	mov	r4, r1
    4664:	0005      	movs	r5, r0
    4666:	d019      	beq.n	469c <sdc_enable+0x3c>
    4668:	b1c4      	cbz	r4, 469c <sdc_enable+0x3c>
    466a:	f000 f915 	bl	4898 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    466e:	b1c0      	cbz	r0, 46a2 <sdc_enable+0x42>
    4670:	4628      	mov	r0, r5
    4672:	f7ff fe6f 	bl	4354 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4676:	4d0c      	ldr	r5, [pc, #48]	; (46a8 <sdc_enable+0x48>)
    4678:	2200      	movs	r2, #0
    467a:	490c      	ldr	r1, [pc, #48]	; (46ac <sdc_enable+0x4c>)
    467c:	7028      	strb	r0, [r5, #0]
    467e:	4620      	mov	r0, r4
    4680:	f007 ffbb 	bl	c5fa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4684:	f00b fcf4 	bl	10070 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4688:	2100      	movs	r1, #0
    468a:	7828      	ldrb	r0, [r5, #0]
    468c:	f006 fb12 	bl	acb4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4690:	f7ff ff48 	bl	4524 <mpsl_fem_device_config_254_apply_get+0xc>
    4694:	2001      	movs	r0, #1
    4696:	7068      	strb	r0, [r5, #1]
    4698:	2000      	movs	r0, #0
    469a:	bd70      	pop	{r4, r5, r6, pc}
    469c:	f06f 0015 	mvn.w	r0, #21
    46a0:	bd70      	pop	{r4, r5, r6, pc}
    46a2:	f04f 30ff 	mov.w	r0, #4294967295
    46a6:	bd70      	pop	{r4, r5, r6, pc}
    46a8:	20000058 	.word	0x20000058
    46ac:	20001350 	.word	0x20001350

000046b0 <sdc_init>:
    46b0:	b530      	push	{r4, r5, lr}
    46b2:	b087      	sub	sp, #28
    46b4:	0005      	movs	r5, r0
    46b6:	d00c      	beq.n	46d2 <sdc_init+0x22>
    46b8:	f7ff fdf2 	bl	42a0 <mpsl_is_initialized>
    46bc:	f04f 34ff 	mov.w	r4, #4294967295
    46c0:	b120      	cbz	r0, 46cc <sdc_init+0x1c>
    46c2:	f7ff fc9d 	bl	4000 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    46c6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    46ca:	d905      	bls.n	46d8 <sdc_init+0x28>
    46cc:	4620      	mov	r0, r4
    46ce:	b007      	add	sp, #28
    46d0:	bd30      	pop	{r4, r5, pc}
    46d2:	f06f 0015 	mvn.w	r0, #21
    46d6:	e7fa      	b.n	46ce <sdc_init+0x1e>
    46d8:	4c15      	ldr	r4, [pc, #84]	; (4730 <sdc_init+0x80>)
    46da:	4816      	ldr	r0, [pc, #88]	; (4734 <sdc_init+0x84>)
    46dc:	6065      	str	r5, [r4, #4]
    46de:	f000 f9eb 	bl	4ab8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    46e2:	2000      	movs	r0, #0
    46e4:	7060      	strb	r0, [r4, #1]
    46e6:	70a0      	strb	r0, [r4, #2]
    46e8:	70e0      	strb	r0, [r4, #3]
    46ea:	4601      	mov	r1, r0
    46ec:	2218      	movs	r2, #24
    46ee:	4668      	mov	r0, sp
    46f0:	f007 ff04 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    46f4:	2218      	movs	r2, #24
    46f6:	4910      	ldr	r1, [pc, #64]	; (4738 <sdc_init+0x88>)
    46f8:	4668      	mov	r0, sp
    46fa:	f007 fe85 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    46fe:	2218      	movs	r2, #24
    4700:	4669      	mov	r1, sp
    4702:	480e      	ldr	r0, [pc, #56]	; (473c <sdc_init+0x8c>)
    4704:	f007 fe80 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4708:	f3ef 8410 	mrs	r4, PRIMASK
    470c:	b672      	cpsid	i
    470e:	480c      	ldr	r0, [pc, #48]	; (4740 <sdc_init+0x90>)
    4710:	f06f 010c 	mvn.w	r1, #12
    4714:	f000 fd9e 	bl	5254 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4718:	480a      	ldr	r0, [pc, #40]	; (4744 <sdc_init+0x94>)
    471a:	f000 fe6b 	bl	53f4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    471e:	b118      	cbz	r0, 4728 <sdc_init+0x78>
    4720:	219a      	movs	r1, #154	; 0x9a
    4722:	2003      	movs	r0, #3
    4724:	f000 f810 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4728:	b904      	cbnz	r4, 472c <sdc_init+0x7c>
    472a:	b662      	cpsie	i
    472c:	2000      	movs	r0, #0
    472e:	e7ce      	b.n	46ce <sdc_init+0x1e>
    4730:	20000058 	.word	0x20000058
    4734:	00004525 	.word	0x00004525
    4738:	00004834 	.word	0x00004834
    473c:	20001350 	.word	0x20001350
    4740:	4000c000 	.word	0x4000c000
    4744:	000048c5 	.word	0x000048c5

00004748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4748:	b50e      	push	{r1, r2, r3, lr}
    474a:	b672      	cpsid	i
    474c:	4a15      	ldr	r2, [pc, #84]	; (47a4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    474e:	6855      	ldr	r5, [r2, #4]
    4750:	b1d5      	cbz	r5, 4788 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4752:	2200      	movs	r2, #0
    4754:	4603      	mov	r3, r0
    4756:	466e      	mov	r6, sp
    4758:	240a      	movs	r4, #10
    475a:	e003      	b.n	4764 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    475c:	fbb0 f0f4 	udiv	r0, r0, r4
    4760:	1c52      	adds	r2, r2, #1
    4762:	b2d2      	uxtb	r2, r2
    4764:	2800      	cmp	r0, #0
    4766:	d1f9      	bne.n	475c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4768:	54b0      	strb	r0, [r6, r2]
    476a:	e009      	b.n	4780 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    476c:	fbb3 f0f4 	udiv	r0, r3, r4
    4770:	fb04 3010 	mls	r0, r4, r0, r3
    4774:	fbb3 f3f4 	udiv	r3, r3, r4
    4778:	1e52      	subs	r2, r2, #1
    477a:	b2d2      	uxtb	r2, r2
    477c:	3030      	adds	r0, #48	; 0x30
    477e:	54b0      	strb	r0, [r6, r2]
    4780:	2a00      	cmp	r2, #0
    4782:	d1f3      	bne.n	476c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4784:	4630      	mov	r0, r6
    4786:	47a8      	blx	r5
    4788:	f3bf 8f4f 	dsb	sy
    478c:	4806      	ldr	r0, [pc, #24]	; (47a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    478e:	6801      	ldr	r1, [r0, #0]
    4790:	4a06      	ldr	r2, [pc, #24]	; (47ac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4792:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4796:	4311      	orrs	r1, r2
    4798:	6001      	str	r1, [r0, #0]
    479a:	f3bf 8f4f 	dsb	sy
    479e:	bf00      	nop
    47a0:	e7fd      	b.n	479e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    47a2:	0000      	.short	0x0000
    47a4:	20000058 	.word	0x20000058
    47a8:	e000ed0c 	.word	0xe000ed0c
    47ac:	05fa0004 	.word	0x05fa0004

000047b0 <sdc_support_adv>:
    47b0:	4806      	ldr	r0, [pc, #24]	; (47cc <sdc_support_adv+0x1c>)
    47b2:	b510      	push	{r4, lr}
    47b4:	7881      	ldrb	r1, [r0, #2]
    47b6:	7840      	ldrb	r0, [r0, #1]
    47b8:	4301      	orrs	r1, r0
    47ba:	d002      	beq.n	47c2 <sdc_support_adv+0x12>
    47bc:	f04f 30ff 	mov.w	r0, #4294967295
    47c0:	bd10      	pop	{r4, pc}
    47c2:	f006 fa97 	bl	acf4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    47c6:	2000      	movs	r0, #0
    47c8:	bd10      	pop	{r4, pc}
    47ca:	0000      	.short	0x0000
    47cc:	20000058 	.word	0x20000058

000047d0 <sdc_support_dle>:
    47d0:	4806      	ldr	r0, [pc, #24]	; (47ec <sdc_support_dle+0x1c>)
    47d2:	b510      	push	{r4, lr}
    47d4:	7881      	ldrb	r1, [r0, #2]
    47d6:	7840      	ldrb	r0, [r0, #1]
    47d8:	4301      	orrs	r1, r0
    47da:	d002      	beq.n	47e2 <sdc_support_dle+0x12>
    47dc:	f04f 30ff 	mov.w	r0, #4294967295
    47e0:	bd10      	pop	{r4, pc}
    47e2:	f006 f83f 	bl	a864 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    47e6:	2000      	movs	r0, #0
    47e8:	bd10      	pop	{r4, pc}
    47ea:	0000      	.short	0x0000
    47ec:	20000058 	.word	0x20000058

000047f0 <sdc_support_le_2m_phy>:
    47f0:	4806      	ldr	r0, [pc, #24]	; (480c <sdc_support_le_2m_phy+0x1c>)
    47f2:	b510      	push	{r4, lr}
    47f4:	7881      	ldrb	r1, [r0, #2]
    47f6:	7840      	ldrb	r0, [r0, #1]
    47f8:	4301      	orrs	r1, r0
    47fa:	d002      	beq.n	4802 <sdc_support_le_2m_phy+0x12>
    47fc:	f04f 30ff 	mov.w	r0, #4294967295
    4800:	bd10      	pop	{r4, pc}
    4802:	f00b f99c 	bl	fb3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4806:	2000      	movs	r0, #0
    4808:	bd10      	pop	{r4, pc}
    480a:	0000      	.short	0x0000
    480c:	20000058 	.word	0x20000058

00004810 <sdc_support_slave>:
    4810:	4806      	ldr	r0, [pc, #24]	; (482c <sdc_support_slave+0x1c>)
    4812:	b510      	push	{r4, lr}
    4814:	7881      	ldrb	r1, [r0, #2]
    4816:	7840      	ldrb	r0, [r0, #1]
    4818:	4301      	orrs	r1, r0
    481a:	d002      	beq.n	4822 <sdc_support_slave+0x12>
    481c:	f04f 30ff 	mov.w	r0, #4294967295
    4820:	bd10      	pop	{r4, pc}
    4822:	f006 fa79 	bl	ad18 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4826:	2000      	movs	r0, #0
    4828:	bd10      	pop	{r4, pc}
    482a:	0000      	.short	0x0000
    482c:	20000058 	.word	0x20000058
    4830:	00000001 	.word	0x00000001
    4834:	00010101 	.word	0x00010101
    4838:	031b1b00 	.word	0x031b1b00
    483c:	00000002 	.word	0x00000002
    4840:	00001d4c 	.word	0x00001d4c
    4844:	001f0003 	.word	0x001f0003
    4848:	00000000 	.word	0x00000000
    484c:	66c5e70e 	.word	0x66c5e70e
    4850:	ac3c1867 	.word	0xac3c1867
    4854:	81ccd2b3 	.word	0x81ccd2b3
    4858:	c0f1dca3 	.word	0xc0f1dca3
    485c:	220236c0 	.word	0x220236c0

00004860 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4860:	4a05      	ldr	r2, [pc, #20]	; (4878 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4862:	b510      	push	{r4, lr}
    4864:	6852      	ldr	r2, [r2, #4]
    4866:	b112      	cbz	r2, 486e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    486c:	4710      	bx	r2
    486e:	2183      	movs	r1, #131	; 0x83
    4870:	2004      	movs	r0, #4
    4872:	f7ff ff69 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4876:	0000      	.short	0x0000
    4878:	20001368 	.word	0x20001368

0000487c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    487c:	4a05      	ldr	r2, [pc, #20]	; (4894 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    487e:	b510      	push	{r4, lr}
    4880:	6892      	ldr	r2, [r2, #8]
    4882:	b112      	cbz	r2, 488a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4888:	4710      	bx	r2
    488a:	2189      	movs	r1, #137	; 0x89
    488c:	2004      	movs	r0, #4
    488e:	f7ff ff5b 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4892:	0000      	.short	0x0000
    4894:	20001368 	.word	0x20001368

00004898 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4898:	4805      	ldr	r0, [pc, #20]	; (48b0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    489a:	6801      	ldr	r1, [r0, #0]
    489c:	b129      	cbz	r1, 48aa <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    489e:	6841      	ldr	r1, [r0, #4]
    48a0:	b119      	cbz	r1, 48aa <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    48a2:	6880      	ldr	r0, [r0, #8]
    48a4:	b108      	cbz	r0, 48aa <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    48a6:	2001      	movs	r0, #1
    48a8:	4770      	bx	lr
    48aa:	2000      	movs	r0, #0
    48ac:	4770      	bx	lr
    48ae:	0000      	.short	0x0000
    48b0:	20001368 	.word	0x20001368

000048b4 <sdc_rand_source_register>:
    48b4:	4902      	ldr	r1, [pc, #8]	; (48c0 <sdc_rand_source_register+0xc>)
    48b6:	c80d      	ldmia	r0, {r0, r2, r3}
    48b8:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    48bc:	2000      	movs	r0, #0
    48be:	4770      	bx	lr
    48c0:	20001368 	.word	0x20001368

000048c4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    48c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48c6:	4c12      	ldr	r4, [pc, #72]	; (4910 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    48c8:	2600      	movs	r6, #0
    48ca:	6825      	ldr	r5, [r4, #0]
    48cc:	e011      	b.n	48f2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    48ce:	9800      	ldr	r0, [sp, #0]
    48d0:	2802      	cmp	r0, #2
    48d2:	d002      	beq.n	48da <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    48d4:	2803      	cmp	r0, #3
    48d6:	d10c      	bne.n	48f2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    48d8:	e006      	b.n	48e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    48da:	6820      	ldr	r0, [r4, #0]
    48dc:	b110      	cbz	r0, 48e4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    48de:	2000      	movs	r0, #0
    48e0:	6026      	str	r6, [r4, #0]
    48e2:	e005      	b.n	48f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    48e4:	2128      	movs	r1, #40	; 0x28
    48e6:	e00c      	b.n	4902 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    48e8:	6820      	ldr	r0, [r4, #0]
    48ea:	b168      	cbz	r0, 4908 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    48ec:	2001      	movs	r0, #1
    48ee:	6026      	str	r6, [r4, #0]
    48f0:	47a8      	blx	r5
    48f2:	4668      	mov	r0, sp
    48f4:	f000 fd50 	bl	5398 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    48f8:	2800      	cmp	r0, #0
    48fa:	d0e8      	beq.n	48ce <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    48fc:	2805      	cmp	r0, #5
    48fe:	d005      	beq.n	490c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4900:	2135      	movs	r1, #53	; 0x35
    4902:	2004      	movs	r0, #4
    4904:	f7ff ff20 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4908:	212d      	movs	r1, #45	; 0x2d
    490a:	e7fa      	b.n	4902 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    490c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    490e:	0000      	.short	0x0000
    4910:	20000060 	.word	0x20000060
    4914:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4916:	4c1f      	ldr	r4, [pc, #124]	; (4994 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4918:	4605      	mov	r5, r0
    491a:	7820      	ldrb	r0, [r4, #0]
    491c:	b140      	cbz	r0, 4930 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    491e:	78a2      	ldrb	r2, [r4, #2]
    4920:	1c61      	adds	r1, r4, #1
    4922:	4628      	mov	r0, r5
    4924:	1c92      	adds	r2, r2, #2
    4926:	f007 fd6f 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    492a:	2000      	movs	r0, #0
    492c:	7020      	strb	r0, [r4, #0]
    492e:	e021      	b.n	4974 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4930:	4819      	ldr	r0, [pc, #100]	; (4998 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4932:	f002 f837 	bl	69a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4936:	2800      	cmp	r0, #0
    4938:	d01d      	beq.n	4976 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    493a:	4c17      	ldr	r4, [pc, #92]	; (4998 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    493c:	7820      	ldrb	r0, [r4, #0]
    493e:	2811      	cmp	r0, #17
    4940:	d104      	bne.n	494c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4942:	210a      	movs	r1, #10
    4944:	203e      	movs	r0, #62	; 0x3e
    4946:	f007 fee0 	bl	c70a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    494a:	b118      	cbz	r0, 4954 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    494c:	7820      	ldrb	r0, [r4, #0]
    494e:	2808      	cmp	r0, #8
    4950:	d005      	beq.n	495e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4952:	e009      	b.n	4968 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4954:	4910      	ldr	r1, [pc, #64]	; (4998 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4956:	4628      	mov	r0, r5
    4958:	f008 f8df 	bl	cb1a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    495c:	e00a      	b.n	4974 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    495e:	2105      	movs	r1, #5
    4960:	203e      	movs	r0, #62	; 0x3e
    4962:	f007 fed2 	bl	c70a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4966:	b138      	cbz	r0, 4978 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4968:	490b      	ldr	r1, [pc, #44]	; (4998 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    496a:	4628      	mov	r0, r5
    496c:	f007 ff2b 	bl	c7c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4970:	2800      	cmp	r0, #0
    4972:	d000      	beq.n	4976 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4974:	2001      	movs	r0, #1
    4976:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4978:	88a0      	ldrh	r0, [r4, #4]
    497a:	f8ad 0000 	strh.w	r0, [sp]
    497e:	a901      	add	r1, sp, #4
    4980:	4668      	mov	r0, sp
    4982:	f008 f9e8 	bl	cd56 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4986:	2800      	cmp	r0, #0
    4988:	d0f5      	beq.n	4976 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    498a:	219b      	movs	r1, #155	; 0x9b
    498c:	2008      	movs	r0, #8
    498e:	f7ff fedb 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4992:	0000      	.short	0x0000
    4994:	20001506 	.word	0x20001506
    4998:	20001404 	.word	0x20001404
    499c:	b570      	push	{r4, r5, r6, lr}
    499e:	780a      	ldrb	r2, [r1, #0]
    49a0:	7082      	strb	r2, [r0, #2]
    49a2:	b33a      	cbz	r2, 49f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    49a4:	2a01      	cmp	r2, #1
    49a6:	d825      	bhi.n	49f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    49a8:	2313      	movs	r3, #19
    49aa:	7003      	strb	r3, [r0, #0]
    49ac:	2300      	movs	r3, #0
    49ae:	e00a      	b.n	49c6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    49b0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    49b4:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    49b8:	78a6      	ldrb	r6, [r4, #2]
    49ba:	70ee      	strb	r6, [r5, #3]
    49bc:	8864      	ldrh	r4, [r4, #2]
    49be:	0a24      	lsrs	r4, r4, #8
    49c0:	1c5b      	adds	r3, r3, #1
    49c2:	712c      	strb	r4, [r5, #4]
    49c4:	b2db      	uxtb	r3, r3
    49c6:	4293      	cmp	r3, r2
    49c8:	d3f2      	bcc.n	49b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    49ca:	2300      	movs	r3, #0
    49cc:	e00b      	b.n	49e6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    49ce:	bf00      	nop
    49d0:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    49d4:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    49d8:	792e      	ldrb	r6, [r5, #4]
    49da:	7166      	strb	r6, [r4, #5]
    49dc:	88ad      	ldrh	r5, [r5, #4]
    49de:	0a2d      	lsrs	r5, r5, #8
    49e0:	1c5b      	adds	r3, r3, #1
    49e2:	71a5      	strb	r5, [r4, #6]
    49e4:	b2db      	uxtb	r3, r3
    49e6:	4293      	cmp	r3, r2
    49e8:	d3f2      	bcc.n	49d0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    49ea:	2101      	movs	r1, #1
    49ec:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    49f0:	b2c0      	uxtb	r0, r0
    49f2:	bd70      	pop	{r4, r5, r6, pc}
    49f4:	2000      	movs	r0, #0
    49f6:	bd70      	pop	{r4, r5, r6, pc}

000049f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    49f8:	2101      	movs	r1, #1
    49fa:	4a0c      	ldr	r2, [pc, #48]	; (4a2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    49fc:	2840      	cmp	r0, #64	; 0x40
    49fe:	d20c      	bcs.n	4a1a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4a00:	2820      	cmp	r0, #32
    4a02:	d803      	bhi.n	4a0c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4a04:	1e40      	subs	r0, r0, #1
    4a06:	4081      	lsls	r1, r0
    4a08:	6810      	ldr	r0, [r2, #0]
    4a0a:	e002      	b.n	4a12 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4a0c:	3821      	subs	r0, #33	; 0x21
    4a0e:	4081      	lsls	r1, r0
    4a10:	6850      	ldr	r0, [r2, #4]
    4a12:	4201      	tst	r1, r0
    4a14:	d107      	bne.n	4a26 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4a16:	2000      	movs	r0, #0
    4a18:	4770      	bx	lr
    4a1a:	28ff      	cmp	r0, #255	; 0xff
    4a1c:	d003      	beq.n	4a26 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4a1e:	3840      	subs	r0, #64	; 0x40
    4a20:	4081      	lsls	r1, r0
    4a22:	6890      	ldr	r0, [r2, #8]
    4a24:	e7f5      	b.n	4a12 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4a26:	2001      	movs	r0, #1
    4a28:	4770      	bx	lr
    4a2a:	0000      	.short	0x0000
    4a2c:	20000064 	.word	0x20000064

00004a30 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4a30:	2101      	movs	r1, #1
    4a32:	1e40      	subs	r0, r0, #1
    4a34:	4081      	lsls	r1, r0
    4a36:	4804      	ldr	r0, [pc, #16]	; (4a48 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4a38:	68c0      	ldr	r0, [r0, #12]
    4a3a:	4201      	tst	r1, r0
    4a3c:	d001      	beq.n	4a42 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4a3e:	2001      	movs	r0, #1
    4a40:	4770      	bx	lr
    4a42:	2000      	movs	r0, #0
    4a44:	4770      	bx	lr
    4a46:	0000      	.short	0x0000
    4a48:	20000064 	.word	0x20000064

00004a4c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4a4c:	4901      	ldr	r1, [pc, #4]	; (4a54 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4a4e:	6800      	ldr	r0, [r0, #0]
    4a50:	60c8      	str	r0, [r1, #12]
    4a52:	4770      	bx	lr
    4a54:	20000064 	.word	0x20000064

00004a58 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4a58:	4904      	ldr	r1, [pc, #16]	; (4a6c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4a5a:	6802      	ldr	r2, [r0, #0]
    4a5c:	6840      	ldr	r0, [r0, #4]
    4a5e:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4a62:	600a      	str	r2, [r1, #0]
    4a64:	4a02      	ldr	r2, [pc, #8]	; (4a70 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4a66:	4310      	orrs	r0, r2
    4a68:	6048      	str	r0, [r1, #4]
    4a6a:	4770      	bx	lr
    4a6c:	20000064 	.word	0x20000064
    4a70:	024007f8 	.word	0x024007f8

00004a74 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4a74:	4901      	ldr	r1, [pc, #4]	; (4a7c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    4a76:	6800      	ldr	r0, [r0, #0]
    4a78:	6088      	str	r0, [r1, #8]
    4a7a:	4770      	bx	lr
    4a7c:	20000064 	.word	0x20000064

00004a80 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4a80:	4805      	ldr	r0, [pc, #20]	; (4a98 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4a82:	f04f 31ff 	mov.w	r1, #4294967295
    4a86:	6001      	str	r1, [r0, #0]
    4a88:	0cc9      	lsrs	r1, r1, #19
    4a8a:	6041      	str	r1, [r0, #4]
    4a8c:	2100      	movs	r1, #0
    4a8e:	6081      	str	r1, [r0, #8]
    4a90:	211f      	movs	r1, #31
    4a92:	60c1      	str	r1, [r0, #12]
    4a94:	4770      	bx	lr
    4a96:	0000      	.short	0x0000
    4a98:	20000064 	.word	0x20000064

00004a9c <sdc_hci_cmd_cb_reset>:
    4a9c:	b510      	push	{r4, lr}
    4a9e:	f7ff ffef 	bl	4a80 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4aa2:	f00a ffc0 	bl	fa26 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4aa6:	4604      	mov	r4, r0
    4aa8:	4802      	ldr	r0, [pc, #8]	; (4ab4 <sdc_hci_cmd_cb_reset+0x18>)
    4aaa:	6800      	ldr	r0, [r0, #0]
    4aac:	b100      	cbz	r0, 4ab0 <sdc_hci_cmd_cb_reset+0x14>
    4aae:	4780      	blx	r0
    4ab0:	4620      	mov	r0, r4
    4ab2:	bd10      	pop	{r4, pc}
    4ab4:	20000074 	.word	0x20000074

00004ab8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4ab8:	4901      	ldr	r1, [pc, #4]	; (4ac0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4aba:	6008      	str	r0, [r1, #0]
    4abc:	4770      	bx	lr
    4abe:	0000      	.short	0x0000
    4ac0:	20000074 	.word	0x20000074

00004ac4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4ac4:	2102      	movs	r1, #2
    4ac6:	8001      	strh	r1, [r0, #0]
    4ac8:	8041      	strh	r1, [r0, #2]
    4aca:	2100      	movs	r1, #0
    4acc:	7101      	strb	r1, [r0, #4]
    4ace:	210e      	movs	r1, #14
    4ad0:	7141      	strb	r1, [r0, #5]
    4ad2:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    4ad6:	80c1      	strh	r1, [r0, #6]
    4ad8:	4901      	ldr	r1, [pc, #4]	; (4ae0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4ada:	6081      	str	r1, [r0, #8]
    4adc:	2000      	movs	r0, #0
    4ade:	4770      	bx	lr
    4ae0:	3c186766 	.word	0x3c186766

00004ae4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4ae4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4ae6:	4604      	mov	r4, r0
    4ae8:	4669      	mov	r1, sp
    4aea:	f008 fc92 	bl	d412 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    4aee:	b170      	cbz	r0, 4b0e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4af0:	f240 215a 	movw	r1, #602	; 0x25a
    4af4:	e008      	b.n	4b08 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4af6:	bf00      	nop
    4af8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4afc:	4621      	mov	r1, r4
    4afe:	f000 f8ab 	bl	4c58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4b02:	b120      	cbz	r0, 4b0e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4b04:	f240 215f 	movw	r1, #607	; 0x25f
    4b08:	2017      	movs	r0, #23
    4b0a:	f7ff fe1d 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b0e:	4668      	mov	r0, sp
    4b10:	f000 f852 	bl	4bb8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4b14:	2800      	cmp	r0, #0
    4b16:	d0ef      	beq.n	4af8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4b18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004b1c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4b1c:	b510      	push	{r4, lr}
    4b1e:	2802      	cmp	r0, #2
    4b20:	d304      	bcc.n	4b2c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4b22:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4b26:	2017      	movs	r0, #23
    4b28:	f7ff fe0e 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b2c:	4901      	ldr	r1, [pc, #4]	; (4b34 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4b2e:	5c08      	ldrb	r0, [r1, r0]
    4b30:	bd10      	pop	{r4, pc}
    4b32:	0000      	.short	0x0000
    4b34:	20001374 	.word	0x20001374

00004b38 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b3a:	0005      	movs	r5, r0
    4b3c:	9500      	str	r5, [sp, #0]
    4b3e:	d010      	beq.n	4b62 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    4b40:	2600      	movs	r6, #0
    4b42:	7808      	ldrb	r0, [r1, #0]
    4b44:	7849      	ldrb	r1, [r1, #1]
    4b46:	4604      	mov	r4, r0
    4b48:	42a1      	cmp	r1, r4
    4b4a:	d900      	bls.n	4b4e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4b4c:	460c      	mov	r4, r1
    4b4e:	1cea      	adds	r2, r5, #3
    4b50:	f022 0203 	bic.w	r2, r2, #3
    4b54:	42aa      	cmp	r2, r5
    4b56:	d006      	beq.n	4b66 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    4b58:	f240 1179 	movw	r1, #377	; 0x179
    4b5c:	2017      	movs	r0, #23
    4b5e:	f7ff fdf3 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b62:	2601      	movs	r6, #1
    4b64:	e7ed      	b.n	4b42 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4b66:	4f13      	ldr	r7, [pc, #76]	; (4bb4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    4b68:	7038      	strb	r0, [r7, #0]
    4b6a:	7079      	strb	r1, [r7, #1]
    4b6c:	4631      	mov	r1, r6
    4b6e:	4668      	mov	r0, sp
    4b70:	f000 f8ee 	bl	4d50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4b74:	2100      	movs	r1, #0
    4b76:	460b      	mov	r3, r1
    4b78:	9800      	ldr	r0, [sp, #0]
    4b7a:	1cc0      	adds	r0, r0, #3
    4b7c:	f020 0003 	bic.w	r0, r0, #3
    4b80:	9000      	str	r0, [sp, #0]
    4b82:	b96e      	cbnz	r6, 4ba0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    4b84:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    4b88:	60d0      	str	r0, [r2, #12]
    4b8a:	2000      	movs	r0, #0
    4b8c:	e006      	b.n	4b9c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4b8e:	bf00      	nop
    4b90:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4b94:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    4b98:	1c40      	adds	r0, r0, #1
    4b9a:	b2c0      	uxtb	r0, r0
    4b9c:	42a0      	cmp	r0, r4
    4b9e:	d3f7      	bcc.n	4b90 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    4ba0:	9800      	ldr	r0, [sp, #0]
    4ba2:	1c49      	adds	r1, r1, #1
    4ba4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4ba8:	b2c9      	uxtb	r1, r1
    4baa:	9000      	str	r0, [sp, #0]
    4bac:	2902      	cmp	r1, #2
    4bae:	d3e3      	bcc.n	4b78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    4bb0:	1b40      	subs	r0, r0, r5
    4bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bb4:	20001374 	.word	0x20001374

00004bb8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4bb8:	b570      	push	{r4, r5, r6, lr}
    4bba:	4604      	mov	r4, r0
    4bbc:	f008 fda2 	bl	d704 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4bc0:	b108      	cbz	r0, 4bc6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4bc2:	2010      	movs	r0, #16
    4bc4:	bd70      	pop	{r4, r5, r6, pc}
    4bc6:	7825      	ldrb	r5, [r4, #0]
    4bc8:	f000 f8fe 	bl	4dc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4bcc:	4602      	mov	r2, r0
    4bce:	480c      	ldr	r0, [pc, #48]	; (4c00 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4bd0:	8861      	ldrh	r1, [r4, #2]
    4bd2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4bd6:	e00e      	b.n	4bf6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4bd8:	68c3      	ldr	r3, [r0, #12]
    4bda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4bde:	b143      	cbz	r3, 4bf2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4be0:	1c4a      	adds	r2, r1, #1
    4be2:	8062      	strh	r2, [r4, #2]
    4be4:	80a1      	strh	r1, [r4, #4]
    4be6:	68c0      	ldr	r0, [r0, #12]
    4be8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4bec:	60a0      	str	r0, [r4, #8]
    4bee:	2000      	movs	r0, #0
    4bf0:	bd70      	pop	{r4, r5, r6, pc}
    4bf2:	1c49      	adds	r1, r1, #1
    4bf4:	b289      	uxth	r1, r1
    4bf6:	4291      	cmp	r1, r2
    4bf8:	d3ee      	bcc.n	4bd8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4bfa:	8061      	strh	r1, [r4, #2]
    4bfc:	2005      	movs	r0, #5
    4bfe:	bd70      	pop	{r4, r5, r6, pc}
    4c00:	20001374 	.word	0x20001374

00004c04 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c08:	b121      	cbz	r1, 4c14 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4c0a:	2901      	cmp	r1, #1
    4c0c:	d002      	beq.n	4c14 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4c0e:	2000      	movs	r0, #0
    4c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c14:	4c0f      	ldr	r4, [pc, #60]	; (4c54 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    4c16:	2700      	movs	r7, #0
    4c18:	463b      	mov	r3, r7
    4c1a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4c1e:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4c22:	f814 c001 	ldrb.w	ip, [r4, r1]
    4c26:	e00a      	b.n	4c3e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    4c28:	19dc      	adds	r4, r3, r7
    4c2a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    4c2e:	b2a4      	uxth	r4, r4
    4c30:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4c34:	f1be 0f00 	cmp.w	lr, #0
    4c38:	d004      	beq.n	4c44 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    4c3a:	1c5b      	adds	r3, r3, #1
    4c3c:	b29b      	uxth	r3, r3
    4c3e:	459c      	cmp	ip, r3
    4c40:	d8f2      	bhi.n	4c28 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4c42:	4634      	mov	r4, r6
    4c44:	8004      	strh	r4, [r0, #0]
    4c46:	4620      	mov	r0, r4
    4c48:	42b4      	cmp	r4, r6
    4c4a:	d0e0      	beq.n	4c0e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c50:	f000 b834 	b.w	4cbc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4c54:	20001374 	.word	0x20001374

00004c58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c5c:	4606      	mov	r6, r0
    4c5e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4c62:	460c      	mov	r4, r1
    4c64:	f243 0702 	movw	r7, #12290	; 0x3002
    4c68:	38ff      	subs	r0, #255	; 0xff
    4c6a:	d020      	beq.n	4cae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4c6c:	2c02      	cmp	r4, #2
    4c6e:	d302      	bcc.n	4c76 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4c70:	2007      	movs	r0, #7
    4c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c76:	4630      	mov	r0, r6
    4c78:	f000 f85a 	bl	4d30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4c7c:	0005      	movs	r5, r0
    4c7e:	d016      	beq.n	4cae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4c80:	480c      	ldr	r0, [pc, #48]	; (4cb4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4c82:	4629      	mov	r1, r5
    4c84:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4c88:	4630      	mov	r0, r6
    4c8a:	4790      	blx	r2
    4c8c:	480a      	ldr	r0, [pc, #40]	; (4cb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4c8e:	2100      	movs	r1, #0
    4c90:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4c94:	68f8      	ldr	r0, [r7, #12]
    4c96:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4c9a:	4620      	mov	r0, r4
    4c9c:	f000 f88a 	bl	4db4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4ca0:	4602      	mov	r2, r0
    4ca2:	4629      	mov	r1, r5
    4ca4:	6878      	ldr	r0, [r7, #4]
    4ca6:	f008 fb93 	bl	d3d0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4caa:	2000      	movs	r0, #0
    4cac:	e7e1      	b.n	4c72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4cae:	4638      	mov	r0, r7
    4cb0:	e7df      	b.n	4c72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4cb2:	0000      	.short	0x0000
    4cb4:	00004de8 	.word	0x00004de8
    4cb8:	20001374 	.word	0x20001374
    4cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cc0:	4690      	mov	r8, r2
    4cc2:	460d      	mov	r5, r1
    4cc4:	4607      	mov	r7, r0
    4cc6:	f008 fbb5 	bl	d434 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4cca:	b148      	cbz	r0, 4ce0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4ccc:	4816      	ldr	r0, [pc, #88]	; (4d28 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4cce:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4cd2:	68f0      	ldr	r0, [r6, #12]
    4cd4:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4cd8:	b128      	cbz	r0, 4ce6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4cda:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4cde:	e015      	b.n	4d0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4ce0:	f240 1139 	movw	r1, #313	; 0x139
    4ce4:	e012      	b.n	4d0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4ce6:	6870      	ldr	r0, [r6, #4]
    4ce8:	2800      	cmp	r0, #0
    4cea:	d01a      	beq.n	4d22 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4cec:	4628      	mov	r0, r5
    4cee:	f000 f861 	bl	4db4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4cf2:	4601      	mov	r1, r0
    4cf4:	6870      	ldr	r0, [r6, #4]
    4cf6:	f008 fb1d 	bl	d334 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4cfa:	0004      	movs	r4, r0
    4cfc:	d010      	beq.n	4d20 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4cfe:	68f0      	ldr	r0, [r6, #12]
    4d00:	2d02      	cmp	r5, #2
    4d02:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4d06:	d304      	bcc.n	4d12 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4d08:	f240 1145 	movw	r1, #325	; 0x145
    4d0c:	2017      	movs	r0, #23
    4d0e:	f7ff fd1b 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d12:	4806      	ldr	r0, [pc, #24]	; (4d2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4d14:	4642      	mov	r2, r8
    4d16:	4621      	mov	r1, r4
    4d18:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    4d1c:	4638      	mov	r0, r7
    4d1e:	4798      	blx	r3
    4d20:	4620      	mov	r0, r4
    4d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d26:	0000      	.short	0x0000
    4d28:	20001374 	.word	0x20001374
    4d2c:	00004de0 	.word	0x00004de0
    4d30:	b570      	push	{r4, r5, r6, lr}
    4d32:	460c      	mov	r4, r1
    4d34:	4605      	mov	r5, r0
    4d36:	f008 fb7d 	bl	d434 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4d3a:	2800      	cmp	r0, #0
    4d3c:	d005      	beq.n	4d4a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4d3e:	4803      	ldr	r0, [pc, #12]	; (4d4c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4d40:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4d44:	68c0      	ldr	r0, [r0, #12]
    4d46:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4d4a:	bd70      	pop	{r4, r5, r6, pc}
    4d4c:	20001374 	.word	0x20001374
    4d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d54:	4e16      	ldr	r6, [pc, #88]	; (4db0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    4d56:	4688      	mov	r8, r1
    4d58:	4605      	mov	r5, r0
    4d5a:	2400      	movs	r4, #0
    4d5c:	6828      	ldr	r0, [r5, #0]
    4d5e:	1cc0      	adds	r0, r0, #3
    4d60:	f020 0003 	bic.w	r0, r0, #3
    4d64:	6028      	str	r0, [r5, #0]
    4d66:	4620      	mov	r0, r4
    4d68:	f000 f824 	bl	4db4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4d6c:	5d31      	ldrb	r1, [r6, r4]
    4d6e:	4348      	muls	r0, r1
    4d70:	f1b8 0f00 	cmp.w	r8, #0
    4d74:	d001      	beq.n	4d7a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4d76:	2200      	movs	r2, #0
    4d78:	e000      	b.n	4d7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4d7a:	682a      	ldr	r2, [r5, #0]
    4d7c:	4601      	mov	r1, r0
    4d7e:	9200      	str	r2, [sp, #0]
    4d80:	b132      	cbz	r2, 4d90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4d82:	2700      	movs	r7, #0
    4d84:	ea4f 000d 	mov.w	r0, sp
    4d88:	f008 fb01 	bl	d38e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4d8c:	b11f      	cbz	r7, 4d96 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4d8e:	e006      	b.n	4d9e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4d90:	2701      	movs	r7, #1
    4d92:	2000      	movs	r0, #0
    4d94:	e7f8      	b.n	4d88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    4d96:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4d9a:	9a00      	ldr	r2, [sp, #0]
    4d9c:	604a      	str	r2, [r1, #4]
    4d9e:	6829      	ldr	r1, [r5, #0]
    4da0:	1c64      	adds	r4, r4, #1
    4da2:	4408      	add	r0, r1
    4da4:	b2e4      	uxtb	r4, r4
    4da6:	6028      	str	r0, [r5, #0]
    4da8:	2c02      	cmp	r4, #2
    4daa:	d3d7      	bcc.n	4d5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4db0:	20001374 	.word	0x20001374
    4db4:	4903      	ldr	r1, [pc, #12]	; (4dc4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    4db6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4dba:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4dbe:	1cc0      	adds	r0, r0, #3
    4dc0:	4008      	ands	r0, r1
    4dc2:	4770      	bx	lr
    4dc4:	00004ddc 	.word	0x00004ddc
    4dc8:	4903      	ldr	r1, [pc, #12]	; (4dd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    4dca:	7808      	ldrb	r0, [r1, #0]
    4dcc:	7849      	ldrb	r1, [r1, #1]
    4dce:	4288      	cmp	r0, r1
    4dd0:	d200      	bcs.n	4dd4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    4dd2:	4608      	mov	r0, r1
    4dd4:	4770      	bx	lr
    4dd6:	0000      	.short	0x0000
    4dd8:	20001374 	.word	0x20001374
    4ddc:	00d40218 	.word	0x00d40218
    4de0:	0000d449 	.word	0x0000d449
    4de4:	0000d449 	.word	0x0000d449
    4de8:	0000f009 	.word	0x0000f009
    4dec:	0000e3f7 	.word	0x0000e3f7

00004df0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4df0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4df4:	4c26      	ldr	r4, [pc, #152]	; (4e90 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    4df6:	4680      	mov	r8, r0
    4df8:	b081      	sub	sp, #4
    4dfa:	6820      	ldr	r0, [r4, #0]
    4dfc:	469a      	mov	sl, r3
    4dfe:	4693      	mov	fp, r2
    4e00:	b158      	cbz	r0, 4e1a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4e02:	7a02      	ldrb	r2, [r0, #8]
    4e04:	4542      	cmp	r2, r8
    4e06:	d903      	bls.n	4e10 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4e08:	6841      	ldr	r1, [r0, #4]
    4e0a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4e0e:	b140      	cbz	r0, 4e22 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4e10:	f243 0002 	movw	r0, #12290	; 0x3002
    4e14:	b005      	add	sp, #20
    4e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e1a:	21a5      	movs	r1, #165	; 0xa5
    4e1c:	2018      	movs	r0, #24
    4e1e:	f7ff fc93 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e22:	4619      	mov	r1, r3
    4e24:	9802      	ldr	r0, [sp, #8]
    4e26:	f008 fb27 	bl	d478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    4e2a:	b286      	uxth	r6, r0
    4e2c:	4658      	mov	r0, fp
    4e2e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4e30:	f008 fb19 	bl	d466 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4e34:	b285      	uxth	r5, r0
    4e36:	1970      	adds	r0, r6, r5
    4e38:	1d00      	adds	r0, r0, #4
    4e3a:	b287      	uxth	r7, r0
    4e3c:	6820      	ldr	r0, [r4, #0]
    4e3e:	46a1      	mov	r9, r4
    4e40:	4639      	mov	r1, r7
    4e42:	6800      	ldr	r0, [r0, #0]
    4e44:	f008 fa76 	bl	d334 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4e48:	0004      	movs	r4, r0
    4e4a:	d01f      	beq.n	4e8c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4e4c:	8067      	strh	r7, [r4, #2]
    4e4e:	8025      	strh	r5, [r4, #0]
    4e50:	4629      	mov	r1, r5
    4e52:	1d20      	adds	r0, r4, #4
    4e54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4e56:	4607      	mov	r7, r0
    4e58:	465a      	mov	r2, fp
    4e5a:	2301      	movs	r3, #1
    4e5c:	9500      	str	r5, [sp, #0]
    4e5e:	f008 f9c9 	bl	d1f4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4e62:	8820      	ldrh	r0, [r4, #0]
    4e64:	4631      	mov	r1, r6
    4e66:	4438      	add	r0, r7
    4e68:	2301      	movs	r3, #1
    4e6a:	9a02      	ldr	r2, [sp, #8]
    4e6c:	f8cd a000 	str.w	sl, [sp]
    4e70:	f008 f9c0 	bl	d1f4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4e74:	8820      	ldrh	r0, [r4, #0]
    4e76:	19c1      	adds	r1, r0, r7
    4e78:	4638      	mov	r0, r7
    4e7a:	f008 f9ec 	bl	d256 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4e7e:	f8d9 0000 	ldr.w	r0, [r9]
    4e82:	6841      	ldr	r1, [r0, #4]
    4e84:	2000      	movs	r0, #0
    4e86:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4e8a:	e7c3      	b.n	4e14 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4e8c:	2004      	movs	r0, #4
    4e8e:	e7c1      	b.n	4e14 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4e90:	20000078 	.word	0x20000078

00004e94 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4e94:	b570      	push	{r4, r5, r6, lr}
    4e96:	4c14      	ldr	r4, [pc, #80]	; (4ee8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4e98:	6823      	ldr	r3, [r4, #0]
    4e9a:	b18b      	cbz	r3, 4ec0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4e9c:	7a19      	ldrb	r1, [r3, #8]
    4e9e:	4281      	cmp	r1, r0
    4ea0:	d912      	bls.n	4ec8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4ea2:	685a      	ldr	r2, [r3, #4]
    4ea4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4ea8:	b171      	cbz	r1, 4ec8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4eaa:	2500      	movs	r5, #0
    4eac:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4eb0:	884a      	ldrh	r2, [r1, #2]
    4eb2:	6818      	ldr	r0, [r3, #0]
    4eb4:	f008 fa8c 	bl	d3d0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4eb8:	6821      	ldr	r1, [r4, #0]
    4eba:	2000      	movs	r0, #0
    4ebc:	7a0a      	ldrb	r2, [r1, #8]
    4ebe:	e00c      	b.n	4eda <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4ec0:	21c8      	movs	r1, #200	; 0xc8
    4ec2:	2018      	movs	r0, #24
    4ec4:	f7ff fc40 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ec8:	f243 0002 	movw	r0, #12290	; 0x3002
    4ecc:	bd70      	pop	{r4, r5, r6, pc}
    4ece:	684b      	ldr	r3, [r1, #4]
    4ed0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4ed4:	b933      	cbnz	r3, 4ee4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4ed6:	1c40      	adds	r0, r0, #1
    4ed8:	b2c0      	uxtb	r0, r0
    4eda:	4282      	cmp	r2, r0
    4edc:	d8f7      	bhi.n	4ece <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4ede:	6808      	ldr	r0, [r1, #0]
    4ee0:	f008 fa6b 	bl	d3ba <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4ee4:	2000      	movs	r0, #0
    4ee6:	bd70      	pop	{r4, r5, r6, pc}
    4ee8:	20000078 	.word	0x20000078

00004eec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ef0:	460d      	mov	r5, r1
    4ef2:	0004      	movs	r4, r0
    4ef4:	4690      	mov	r8, r2
    4ef6:	f04f 0600 	mov.w	r6, #0
    4efa:	d009      	beq.n	4f10 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4efc:	2700      	movs	r7, #0
    4efe:	1ce0      	adds	r0, r4, #3
    4f00:	f020 0003 	bic.w	r0, r0, #3
    4f04:	42a0      	cmp	r0, r4
    4f06:	d005      	beq.n	4f14 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4f08:	2186      	movs	r1, #134	; 0x86
    4f0a:	2018      	movs	r0, #24
    4f0c:	f7ff fc1c 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f10:	2701      	movs	r7, #1
    4f12:	e7f4      	b.n	4efe <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4f14:	b1cd      	cbz	r5, 4f4a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4f16:	4611      	mov	r1, r2
    4f18:	2000      	movs	r0, #0
    4f1a:	f008 fa38 	bl	d38e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4f1e:	300c      	adds	r0, #12
    4f20:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4f24:	b98f      	cbnz	r7, 4f4a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4f26:	4f0a      	ldr	r7, [pc, #40]	; (4f50 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4f28:	f104 000c 	add.w	r0, r4, #12
    4f2c:	00aa      	lsls	r2, r5, #2
    4f2e:	603c      	str	r4, [r7, #0]
    4f30:	7225      	strb	r5, [r4, #8]
    4f32:	6060      	str	r0, [r4, #4]
    4f34:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4f38:	6020      	str	r0, [r4, #0]
    4f3a:	2100      	movs	r1, #0
    4f3c:	6860      	ldr	r0, [r4, #4]
    4f3e:	f007 fadd 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4f42:	4641      	mov	r1, r8
    4f44:	6838      	ldr	r0, [r7, #0]
    4f46:	f008 fa22 	bl	d38e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4f4a:	4630      	mov	r0, r6
    4f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f50:	20000078 	.word	0x20000078

00004f54 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4f54:	b570      	push	{r4, r5, r6, lr}
    4f56:	4d08      	ldr	r5, [pc, #32]	; (4f78 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4f58:	6828      	ldr	r0, [r5, #0]
    4f5a:	2800      	cmp	r0, #0
    4f5c:	d00a      	beq.n	4f74 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4f5e:	2400      	movs	r4, #0
    4f60:	e004      	b.n	4f6c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4f62:	4620      	mov	r0, r4
    4f64:	f7ff ff96 	bl	4e94 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4f68:	1c64      	adds	r4, r4, #1
    4f6a:	b2e4      	uxtb	r4, r4
    4f6c:	6828      	ldr	r0, [r5, #0]
    4f6e:	7a00      	ldrb	r0, [r0, #8]
    4f70:	42a0      	cmp	r0, r4
    4f72:	d8f6      	bhi.n	4f62 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4f74:	bd70      	pop	{r4, r5, r6, pc}
    4f76:	0000      	.short	0x0000
    4f78:	20000078 	.word	0x20000078

00004f7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4f7c:	4909      	ldr	r1, [pc, #36]	; (4fa4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4f7e:	b510      	push	{r4, lr}
    4f80:	4602      	mov	r2, r0
    4f82:	6809      	ldr	r1, [r1, #0]
    4f84:	2000      	movs	r0, #0
    4f86:	b149      	cbz	r1, 4f9c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4f88:	7a0b      	ldrb	r3, [r1, #8]
    4f8a:	4293      	cmp	r3, r2
    4f8c:	d905      	bls.n	4f9a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4f8e:	6849      	ldr	r1, [r1, #4]
    4f90:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4f94:	2900      	cmp	r1, #0
    4f96:	d000      	beq.n	4f9a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4f98:	1d08      	adds	r0, r1, #4
    4f9a:	bd10      	pop	{r4, pc}
    4f9c:	21ee      	movs	r1, #238	; 0xee
    4f9e:	2018      	movs	r0, #24
    4fa0:	f7ff fbd2 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fa4:	20000078 	.word	0x20000078

00004fa8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4fa8:	490a      	ldr	r1, [pc, #40]	; (4fd4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4faa:	b510      	push	{r4, lr}
    4fac:	4602      	mov	r2, r0
    4fae:	6809      	ldr	r1, [r1, #0]
    4fb0:	2000      	movs	r0, #0
    4fb2:	b159      	cbz	r1, 4fcc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4fb4:	7a0b      	ldrb	r3, [r1, #8]
    4fb6:	4293      	cmp	r3, r2
    4fb8:	d907      	bls.n	4fca <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4fba:	6849      	ldr	r1, [r1, #4]
    4fbc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4fc0:	2900      	cmp	r1, #0
    4fc2:	d002      	beq.n	4fca <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4fc4:	f831 0b04 	ldrh.w	r0, [r1], #4
    4fc8:	4408      	add	r0, r1
    4fca:	bd10      	pop	{r4, pc}
    4fcc:	21fc      	movs	r1, #252	; 0xfc
    4fce:	2018      	movs	r0, #24
    4fd0:	f7ff fbba 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fd4:	20000078 	.word	0x20000078
    4fd8:	b570      	push	{r4, r5, r6, lr}
    4fda:	4b1e      	ldr	r3, [pc, #120]	; (5054 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    4fdc:	6845      	ldr	r5, [r0, #4]
    4fde:	4604      	mov	r4, r0
    4fe0:	2200      	movs	r2, #0
    4fe2:	b1a1      	cbz	r1, 500e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    4fe4:	2001      	movs	r0, #1
    4fe6:	7060      	strb	r0, [r4, #1]
    4fe8:	8858      	ldrh	r0, [r3, #2]
    4fea:	0881      	lsrs	r1, r0, #2
    4fec:	f05f 0000 	movs.w	r0, #0
    4ff0:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    4ff4:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    4ff8:	831a      	strh	r2, [r3, #24]
    4ffa:	8419      	strh	r1, [r3, #32]
    4ffc:	fb00 5301 	mla	r3, r0, r1, r5
    5000:	6073      	str	r3, [r6, #4]
    5002:	1823      	adds	r3, r4, r0
    5004:	1c40      	adds	r0, r0, #1
    5006:	751a      	strb	r2, [r3, #20]
    5008:	2804      	cmp	r0, #4
    500a:	d3f1      	bcc.n	4ff0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    500c:	bd70      	pop	{r4, r5, r6, pc}
    500e:	7062      	strb	r2, [r4, #1]
    5010:	f05f 0000 	movs.w	r0, #0
    5014:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5018:	830a      	strh	r2, [r1, #24]
    501a:	840a      	strh	r2, [r1, #32]
    501c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5020:	604a      	str	r2, [r1, #4]
    5022:	1821      	adds	r1, r4, r0
    5024:	1c40      	adds	r0, r0, #1
    5026:	750a      	strb	r2, [r1, #20]
    5028:	2804      	cmp	r0, #4
    502a:	d3f3      	bcc.n	5014 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    502c:	8858      	ldrh	r0, [r3, #2]
    502e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5032:	d201      	bcs.n	5038 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5034:	0846      	lsrs	r6, r0, #1
    5036:	e000      	b.n	503a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5038:	26ff      	movs	r6, #255	; 0xff
    503a:	f008 fa90 	bl	d55e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    503e:	6065      	str	r5, [r4, #4]
    5040:	8420      	strh	r0, [r4, #32]
    5042:	1829      	adds	r1, r5, r0
    5044:	60a1      	str	r1, [r4, #8]
    5046:	8466      	strh	r6, [r4, #34]	; 0x22
    5048:	60e5      	str	r5, [r4, #12]
    504a:	84a0      	strh	r0, [r4, #36]	; 0x24
    504c:	6121      	str	r1, [r4, #16]
    504e:	84e6      	strh	r6, [r4, #38]	; 0x26
    5050:	bd70      	pop	{r4, r5, r6, pc}
    5052:	0000      	.short	0x0000
    5054:	2000007c 	.word	0x2000007c

00005058 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    505c:	b170      	cbz	r0, 507c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    505e:	2500      	movs	r5, #0
    5060:	4411      	add	r1, r2
    5062:	b2cc      	uxtb	r4, r1
    5064:	4e24      	ldr	r6, [pc, #144]	; (50f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    5066:	1cc1      	adds	r1, r0, #3
    5068:	2700      	movs	r7, #0
    506a:	f021 0103 	bic.w	r1, r1, #3
    506e:	7034      	strb	r4, [r6, #0]
    5070:	4281      	cmp	r1, r0
    5072:	d005      	beq.n	5080 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5074:	214e      	movs	r1, #78	; 0x4e
    5076:	2009      	movs	r0, #9
    5078:	f7ff fb66 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    507c:	2501      	movs	r5, #1
    507e:	e7ef      	b.n	5060 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    5080:	2b1f      	cmp	r3, #31
    5082:	d804      	bhi.n	508e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5084:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5088:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    508c:	e009      	b.n	50a2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    508e:	0059      	lsls	r1, r3, #1
    5090:	2bff      	cmp	r3, #255	; 0xff
    5092:	d90b      	bls.n	50ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    5094:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    5098:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    509c:	d200      	bcs.n	50a0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    509e:	4611      	mov	r1, r2
    50a0:	b289      	uxth	r1, r1
    50a2:	1cc9      	adds	r1, r1, #3
    50a4:	f021 0303 	bic.w	r3, r1, #3
    50a8:	b135      	cbz	r5, 50b8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    50aa:	e007      	b.n	50bc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    50ac:	227c      	movs	r2, #124	; 0x7c
    50ae:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    50b2:	d3f5      	bcc.n	50a0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    50b4:	217c      	movs	r1, #124	; 0x7c
    50b6:	e7f3      	b.n	50a0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    50b8:	6070      	str	r0, [r6, #4]
    50ba:	8073      	strh	r3, [r6, #2]
    50bc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    50c0:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    50c4:	2100      	movs	r1, #0
    50c6:	6876      	ldr	r6, [r6, #4]
    50c8:	f04f 0c01 	mov.w	ip, #1
    50cc:	e00d      	b.n	50ea <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    50ce:	b94d      	cbnz	r5, 50e4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    50d0:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    50d4:	eb00 0e02 	add.w	lr, r0, r2
    50d8:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    50dc:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    50e0:	f8c7 e004 	str.w	lr, [r7, #4]
    50e4:	1c49      	adds	r1, r1, #1
    50e6:	441a      	add	r2, r3
    50e8:	b2c9      	uxtb	r1, r1
    50ea:	42a1      	cmp	r1, r4
    50ec:	d3ef      	bcc.n	50ce <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    50ee:	1dd2      	adds	r2, r2, #7
    50f0:	f022 0007 	bic.w	r0, r2, #7
    50f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50f8:	2000007c 	.word	0x2000007c

000050fc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    50fc:	b570      	push	{r4, r5, r6, lr}
    50fe:	4a10      	ldr	r2, [pc, #64]	; (5140 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5100:	2000      	movs	r0, #0
    5102:	6851      	ldr	r1, [r2, #4]
    5104:	7812      	ldrb	r2, [r2, #0]
    5106:	e014      	b.n	5132 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5108:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    510c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5110:	b16b      	cbz	r3, 512e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    5112:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5116:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    511a:	d00c      	beq.n	5136 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    511c:	2500      	movs	r5, #0
    511e:	70a5      	strb	r5, [r4, #2]
    5120:	2101      	movs	r1, #1
    5122:	4620      	mov	r0, r4
    5124:	f7ff ff58 	bl	4fd8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5128:	7025      	strb	r5, [r4, #0]
    512a:	4620      	mov	r0, r4
    512c:	bd70      	pop	{r4, r5, r6, pc}
    512e:	1c40      	adds	r0, r0, #1
    5130:	b2c0      	uxtb	r0, r0
    5132:	4290      	cmp	r0, r2
    5134:	d3e8      	bcc.n	5108 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5136:	21a9      	movs	r1, #169	; 0xa9
    5138:	2009      	movs	r0, #9
    513a:	f7ff fb05 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    513e:	0000      	.short	0x0000
    5140:	2000007c 	.word	0x2000007c

00005144 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5144:	4804      	ldr	r0, [pc, #16]	; (5158 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5146:	b510      	push	{r4, lr}
    5148:	8840      	ldrh	r0, [r0, #2]
    514a:	0884      	lsrs	r4, r0, #2
    514c:	f008 fa07 	bl	d55e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5150:	4284      	cmp	r4, r0
    5152:	d300      	bcc.n	5156 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5154:	4620      	mov	r0, r4
    5156:	bd10      	pop	{r4, pc}
    5158:	2000007c 	.word	0x2000007c
    515c:	4909      	ldr	r1, [pc, #36]	; (5184 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
    515e:	b510      	push	{r4, lr}
    5160:	4807      	ldr	r0, [pc, #28]	; (5180 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
    5162:	6008      	str	r0, [r1, #0]
    5164:	4b08      	ldr	r3, [pc, #32]	; (5188 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
    5166:	2011      	movs	r0, #17
    5168:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    516c:	2200      	movs	r2, #0
    516e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    5172:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    5176:	1c40      	adds	r0, r0, #1
    5178:	b2c0      	uxtb	r0, r0
    517a:	2814      	cmp	r0, #20
    517c:	d3f4      	bcc.n	5168 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
    517e:	bd10      	pop	{r4, pc}
    5180:	fffe0000 	.word	0xfffe0000
    5184:	4001f508 	.word	0x4001f508
    5188:	4001f000 	.word	0x4001f000
    518c:	b570      	push	{r4, r5, r6, lr}
    518e:	2420      	movs	r4, #32
    5190:	2100      	movs	r1, #0
    5192:	2301      	movs	r3, #1
    5194:	fa20 f201 	lsr.w	r2, r0, r1
    5198:	07d2      	lsls	r2, r2, #31
    519a:	d020      	beq.n	51de <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    519c:	b24a      	sxtb	r2, r1
    519e:	2a00      	cmp	r2, #0
    51a0:	db10      	blt.n	51c4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
    51a2:	bf00      	nop
    51a4:	ea4f 1652 	mov.w	r6, r2, lsr #5
    51a8:	ea4f 0686 	mov.w	r6, r6, lsl #2
    51ac:	f002 051f 	and.w	r5, r2, #31
    51b0:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    51b4:	fa03 f505 	lsl.w	r5, r3, r5
    51b8:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    51bc:	f3bf 8f4f 	dsb	sy
    51c0:	f3bf 8f6f 	isb	sy
    51c4:	db0b      	blt.n	51de <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    51c6:	f002 051f 	and.w	r5, r2, #31
    51ca:	ea4f 1252 	mov.w	r2, r2, lsr #5
    51ce:	ea4f 0282 	mov.w	r2, r2, lsl #2
    51d2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    51d6:	fa03 f505 	lsl.w	r5, r3, r5
    51da:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    51de:	f101 0101 	add.w	r1, r1, #1
    51e2:	42a1      	cmp	r1, r4
    51e4:	d3d6      	bcc.n	5194 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
    51e6:	bd70      	pop	{r4, r5, r6, pc}
    51e8:	b570      	push	{r4, r5, r6, lr}
    51ea:	0042      	lsls	r2, r0, #1
    51ec:	f04f 0100 	mov.w	r1, #0
    51f0:	d501      	bpl.n	51f6 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
    51f2:	4a14      	ldr	r2, [pc, #80]	; (5244 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
    51f4:	6011      	str	r1, [r2, #0]
    51f6:	f3c0 3280 	ubfx	r2, r0, #14, #1
    51fa:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    51fe:	429a      	cmp	r2, r3
    5200:	d003      	beq.n	520a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
    5202:	2169      	movs	r1, #105	; 0x69
    5204:	201b      	movs	r0, #27
    5206:	f7ff fa9f 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    520a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    520e:	d014      	beq.n	523a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
    5210:	4a0d      	ldr	r2, [pc, #52]	; (5248 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
    5212:	2001      	movs	r0, #1
    5214:	6050      	str	r0, [r2, #4]
    5216:	1e83      	subs	r3, r0, #2
    5218:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    521c:	4a0b      	ldr	r2, [pc, #44]	; (524c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
    521e:	6090      	str	r0, [r2, #8]
    5220:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    5224:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5228:	4c09      	ldr	r4, [pc, #36]	; (5250 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
    522a:	6021      	str	r1, [r4, #0]
    522c:	1d25      	adds	r5, r4, #4
    522e:	6028      	str	r0, [r5, #0]
    5230:	6090      	str	r0, [r2, #8]
    5232:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5236:	6021      	str	r1, [r4, #0]
    5238:	6028      	str	r0, [r5, #0]
    523a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    523e:	f7ff bf8d 	b.w	515c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    5242:	0000      	.short	0x0000
    5244:	4001e504 	.word	0x4001e504
    5248:	4000e000 	.word	0x4000e000
    524c:	4000f000 	.word	0x4000f000
    5250:	4000f500 	.word	0x4000f500

00005254 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5254:	b570      	push	{r4, r5, r6, lr}
    5256:	4c0a      	ldr	r4, [pc, #40]	; (5280 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    5258:	460d      	mov	r5, r1
    525a:	6020      	str	r0, [r4, #0]
    525c:	f7ff ffc4 	bl	51e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
    5260:	6820      	ldr	r0, [r4, #0]
    5262:	f7ff ff93 	bl	518c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
    5266:	f000 f883 	bl	5370 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    526a:	f7ff ff77 	bl	515c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    526e:	f008 fa3e 	bl	d6ee <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    5272:	4628      	mov	r0, r5
    5274:	f000 f8b6 	bl	53e4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    5278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    527c:	f000 b8ce 	b.w	541c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    5280:	20000084 	.word	0x20000084

00005284 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    5284:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5288:	4c36      	ldr	r4, [pc, #216]	; (5364 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    528a:	b082      	sub	sp, #8
    528c:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    5290:	2601      	movs	r6, #1
    5292:	4835      	ldr	r0, [pc, #212]	; (5368 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    5294:	f007 f80f 	bl	c2b6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5298:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5368 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    529c:	b920      	cbnz	r0, 52a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    529e:	2600      	movs	r6, #0
    52a0:	f109 0001 	add.w	r0, r9, #1
    52a4:	f007 f81e 	bl	c2e4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    52a8:	f44f 7580 	mov.w	r5, #256	; 0x100
    52ac:	f04f 0800 	mov.w	r8, #0
    52b0:	1d2f      	adds	r7, r5, #4
    52b2:	2101      	movs	r1, #1
    52b4:	6061      	str	r1, [r4, #4]
    52b6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    52ba:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    52be:	9802      	ldr	r0, [sp, #8]
    52c0:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    52c4:	6021      	str	r1, [r4, #0]
    52c6:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 536c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    52ca:	e01c      	b.n	5306 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    52cc:	f8da 0000 	ldr.w	r0, [sl]
    52d0:	06c0      	lsls	r0, r0, #27
    52d2:	d518      	bpl.n	5306 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    52d4:	200e      	movs	r0, #14
    52d6:	f008 f9f6 	bl	d6c6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    52da:	f3ef 8010 	mrs	r0, PRIMASK
    52de:	9000      	str	r0, [sp, #0]
    52e0:	b672      	cpsid	i
    52e2:	2103      	movs	r1, #3
    52e4:	4620      	mov	r0, r4
    52e6:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    52ea:	4629      	mov	r1, r5
    52ec:	f008 f9f8 	bl	d6e0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    52f0:	b930      	cbnz	r0, 5300 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    52f2:	4639      	mov	r1, r7
    52f4:	4620      	mov	r0, r4
    52f6:	f008 f9f3 	bl	d6e0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    52fa:	b908      	cbnz	r0, 5300 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    52fc:	f7ff f89e 	bl	443c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5300:	9800      	ldr	r0, [sp, #0]
    5302:	b900      	cbnz	r0, 5306 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    5304:	b662      	cpsie	i
    5306:	4629      	mov	r1, r5
    5308:	4620      	mov	r0, r4
    530a:	f008 f9e9 	bl	d6e0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    530e:	b928      	cbnz	r0, 531c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    5310:	4639      	mov	r1, r7
    5312:	4620      	mov	r0, r4
    5314:	f008 f9e4 	bl	d6e0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    5318:	2800      	cmp	r0, #0
    531a:	d0d7      	beq.n	52cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    531c:	4639      	mov	r1, r7
    531e:	4620      	mov	r0, r4
    5320:	f008 f9de 	bl	d6e0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    5324:	2800      	cmp	r0, #0
    5326:	d1c4      	bne.n	52b2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    5328:	b136      	cbz	r6, 5338 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    532a:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    532e:	f109 0001 	add.w	r0, r9, #1
    5332:	f006 ffc0 	bl	c2b6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5336:	e012      	b.n	535e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    5338:	f109 0001 	add.w	r0, r9, #1
    533c:	f006 ffbb 	bl	c2b6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5340:	2800      	cmp	r0, #0
    5342:	d1ad      	bne.n	52a0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    5344:	2003      	movs	r0, #3
    5346:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    534a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    534e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5352:	200e      	movs	r0, #14
    5354:	f008 f9b7 	bl	d6c6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    5358:	4803      	ldr	r0, [pc, #12]	; (5368 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    535a:	f006 ffc3 	bl	c2e4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    535e:	2000      	movs	r0, #0
    5360:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5364:	4000e000 	.word	0x4000e000
    5368:	20000293 	.word	0x20000293
    536c:	e000ed10 	.word	0xe000ed10

00005370 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5370:	b510      	push	{r4, lr}
    5372:	4808      	ldr	r0, [pc, #32]	; (5394 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    5374:	f006 ffb2 	bl	c2dc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5378:	b108      	cbz	r0, 537e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    537a:	2125      	movs	r1, #37	; 0x25
    537c:	e006      	b.n	538c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    537e:	4805      	ldr	r0, [pc, #20]	; (5394 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    5380:	1c40      	adds	r0, r0, #1
    5382:	f006 ffab 	bl	c2dc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5386:	2800      	cmp	r0, #0
    5388:	d003      	beq.n	5392 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    538a:	2129      	movs	r1, #41	; 0x29
    538c:	201d      	movs	r0, #29
    538e:	f7ff f9db 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5392:	bd10      	pop	{r4, pc}
    5394:	20000293 	.word	0x20000293

00005398 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    5398:	b570      	push	{r4, r5, r6, lr}
    539a:	4911      	ldr	r1, [pc, #68]	; (53e0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    539c:	680a      	ldr	r2, [r1, #0]
    539e:	b1ea      	cbz	r2, 53dc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    53a0:	2300      	movs	r3, #0
    53a2:	461d      	mov	r5, r3
    53a4:	2401      	movs	r4, #1
    53a6:	684a      	ldr	r2, [r1, #4]
    53a8:	1c52      	adds	r2, r2, #1
    53aa:	604a      	str	r2, [r1, #4]
    53ac:	2a09      	cmp	r2, #9
    53ae:	d300      	bcc.n	53b2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    53b0:	604d      	str	r5, [r1, #4]
    53b2:	790e      	ldrb	r6, [r1, #4]
    53b4:	fa04 f206 	lsl.w	r2, r4, r6
    53b8:	680e      	ldr	r6, [r1, #0]
    53ba:	4216      	tst	r6, r2
    53bc:	d00b      	beq.n	53d6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    53be:	f3ef 8310 	mrs	r3, PRIMASK
    53c2:	b672      	cpsid	i
    53c4:	680c      	ldr	r4, [r1, #0]
    53c6:	4394      	bics	r4, r2
    53c8:	600c      	str	r4, [r1, #0]
    53ca:	b903      	cbnz	r3, 53ce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    53cc:	b662      	cpsie	i
    53ce:	6849      	ldr	r1, [r1, #4]
    53d0:	6001      	str	r1, [r0, #0]
    53d2:	2000      	movs	r0, #0
    53d4:	bd70      	pop	{r4, r5, r6, pc}
    53d6:	1c5b      	adds	r3, r3, #1
    53d8:	2b09      	cmp	r3, #9
    53da:	d3e4      	bcc.n	53a6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    53dc:	2005      	movs	r0, #5
    53de:	bd70      	pop	{r4, r5, r6, pc}
    53e0:	20000088 	.word	0x20000088

000053e4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    53e4:	4802      	ldr	r0, [pc, #8]	; (53f0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    53e6:	2100      	movs	r1, #0
    53e8:	6001      	str	r1, [r0, #0]
    53ea:	6041      	str	r1, [r0, #4]
    53ec:	4770      	bx	lr
    53ee:	0000      	.short	0x0000
    53f0:	20000088 	.word	0x20000088

000053f4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    53f4:	b510      	push	{r4, lr}
    53f6:	4c08      	ldr	r4, [pc, #32]	; (5418 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    53f8:	7861      	ldrb	r1, [r4, #1]
    53fa:	b109      	cbz	r1, 5400 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    53fc:	200f      	movs	r0, #15
    53fe:	bd10      	pop	{r4, pc}
    5400:	f7fe ffa8 	bl	4354 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5404:	7020      	strb	r0, [r4, #0]
    5406:	28ff      	cmp	r0, #255	; 0xff
    5408:	d001      	beq.n	540e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    540a:	2000      	movs	r0, #0
    540c:	bd10      	pop	{r4, pc}
    540e:	2176      	movs	r1, #118	; 0x76
    5410:	201f      	movs	r0, #31
    5412:	f7ff f999 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5416:	0000      	.short	0x0000
    5418:	20000090 	.word	0x20000090

0000541c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    541c:	4901      	ldr	r1, [pc, #4]	; (5424 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    541e:	2000      	movs	r0, #0
    5420:	7048      	strb	r0, [r1, #1]
    5422:	4770      	bx	lr
    5424:	20000090 	.word	0x20000090

00005428 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5428:	4806      	ldr	r0, [pc, #24]	; (5444 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    542a:	4a07      	ldr	r2, [pc, #28]	; (5448 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    542c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    542e:	8852      	ldrh	r2, [r2, #2]
    5430:	4291      	cmp	r1, r2
    5432:	d104      	bne.n	543e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5434:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5438:	b108      	cbz	r0, 543e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    543a:	2000      	movs	r0, #0
    543c:	4770      	bx	lr
    543e:	2001      	movs	r0, #1
    5440:	4770      	bx	lr
    5442:	0000      	.short	0x0000
    5444:	20001608 	.word	0x20001608
    5448:	20000278 	.word	0x20000278

0000544c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    544c:	4901      	ldr	r1, [pc, #4]	; (5454 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    544e:	8048      	strh	r0, [r1, #2]
    5450:	4770      	bx	lr
    5452:	0000      	.short	0x0000
    5454:	20000278 	.word	0x20000278

00005458 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5458:	4808      	ldr	r0, [pc, #32]	; (547c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    545a:	4a09      	ldr	r2, [pc, #36]	; (5480 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    545c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    545e:	8852      	ldrh	r2, [r2, #2]
    5460:	4291      	cmp	r1, r2
    5462:	d109      	bne.n	5478 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5464:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5468:	8481      	strh	r1, [r0, #36]	; 0x24
    546a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    546e:	b119      	cbz	r1, 5478 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5470:	2100      	movs	r1, #0
    5472:	7001      	strb	r1, [r0, #0]
    5474:	2001      	movs	r0, #1
    5476:	4770      	bx	lr
    5478:	2000      	movs	r0, #0
    547a:	4770      	bx	lr
    547c:	20001608 	.word	0x20001608
    5480:	20000278 	.word	0x20000278

00005484 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5484:	4807      	ldr	r0, [pc, #28]	; (54a4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5486:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    548a:	2901      	cmp	r1, #1
    548c:	d007      	beq.n	549e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    548e:	2101      	movs	r1, #1
    5490:	7001      	strb	r1, [r0, #0]
    5492:	4805      	ldr	r0, [pc, #20]	; (54a8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5494:	4903      	ldr	r1, [pc, #12]	; (54a4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5496:	8800      	ldrh	r0, [r0, #0]
    5498:	8488      	strh	r0, [r1, #36]	; 0x24
    549a:	2001      	movs	r0, #1
    549c:	4770      	bx	lr
    549e:	2000      	movs	r0, #0
    54a0:	4770      	bx	lr
    54a2:	0000      	.short	0x0000
    54a4:	20001608 	.word	0x20001608
    54a8:	20000278 	.word	0x20000278

000054ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    54ac:	4906      	ldr	r1, [pc, #24]	; (54c8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    54ae:	4b07      	ldr	r3, [pc, #28]	; (54cc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    54b0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    54b2:	885b      	ldrh	r3, [r3, #2]
    54b4:	429a      	cmp	r2, r3
    54b6:	d105      	bne.n	54c4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    54b8:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    54bc:	b112      	cbz	r2, 54c4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    54be:	6001      	str	r1, [r0, #0]
    54c0:	2001      	movs	r0, #1
    54c2:	4770      	bx	lr
    54c4:	2000      	movs	r0, #0
    54c6:	4770      	bx	lr
    54c8:	20001608 	.word	0x20001608
    54cc:	20000278 	.word	0x20000278

000054d0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    54d0:	4909      	ldr	r1, [pc, #36]	; (54f8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    54d2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    54d4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    54d8:	3bff      	subs	r3, #255	; 0xff
    54da:	d002      	beq.n	54e2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    54dc:	2100      	movs	r1, #0
    54de:	6001      	str	r1, [r0, #0]
    54e0:	e007      	b.n	54f2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    54e2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    54e6:	4904      	ldr	r1, [pc, #16]	; (54f8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    54e8:	2a01      	cmp	r2, #1
    54ea:	d002      	beq.n	54f2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    54ec:	6001      	str	r1, [r0, #0]
    54ee:	2001      	movs	r0, #1
    54f0:	4770      	bx	lr
    54f2:	2000      	movs	r0, #0
    54f4:	4770      	bx	lr
    54f6:	0000      	.short	0x0000
    54f8:	20001608 	.word	0x20001608

000054fc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    54fc:	4901      	ldr	r1, [pc, #4]	; (5504 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    54fe:	8008      	strh	r0, [r1, #0]
    5500:	4770      	bx	lr
    5502:	0000      	.short	0x0000
    5504:	20000278 	.word	0x20000278

00005508 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5508:	4905      	ldr	r1, [pc, #20]	; (5520 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    550a:	2000      	movs	r0, #0
    550c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5510:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5514:	8488      	strh	r0, [r1, #36]	; 0x24
    5516:	4903      	ldr	r1, [pc, #12]	; (5524 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5518:	8008      	strh	r0, [r1, #0]
    551a:	8048      	strh	r0, [r1, #2]
    551c:	4770      	bx	lr
    551e:	0000      	.short	0x0000
    5520:	20001608 	.word	0x20001608
    5524:	20000278 	.word	0x20000278
    5528:	4905      	ldr	r1, [pc, #20]	; (5540 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    552a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    552c:	4282      	cmp	r2, r0
    552e:	d105      	bne.n	553c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5530:	2000      	movs	r0, #0
    5532:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5536:	f64f 70ff 	movw	r0, #65535	; 0xffff
    553a:	8488      	strh	r0, [r1, #36]	; 0x24
    553c:	4770      	bx	lr
    553e:	0000      	.short	0x0000
    5540:	20001608 	.word	0x20001608

00005544 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5544:	4a0a      	ldr	r2, [pc, #40]	; (5570 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5546:	b110      	cbz	r0, 554e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5548:	2801      	cmp	r0, #1
    554a:	d007      	beq.n	555c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    554c:	e00e      	b.n	556c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    554e:	7850      	ldrb	r0, [r2, #1]
    5550:	b160      	cbz	r0, 556c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5552:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5556:	6008      	str	r0, [r1, #0]
    5558:	88d0      	ldrh	r0, [r2, #6]
    555a:	e004      	b.n	5566 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    555c:	7810      	ldrb	r0, [r2, #0]
    555e:	b128      	cbz	r0, 556c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5560:	6890      	ldr	r0, [r2, #8]
    5562:	6008      	str	r0, [r1, #0]
    5564:	8990      	ldrh	r0, [r2, #12]
    5566:	8088      	strh	r0, [r1, #4]
    5568:	2001      	movs	r0, #1
    556a:	4770      	bx	lr
    556c:	2000      	movs	r0, #0
    556e:	4770      	bx	lr
    5570:	20000295 	.word	0x20000295

00005574 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5574:	4a08      	ldr	r2, [pc, #32]	; (5598 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5576:	2301      	movs	r3, #1
    5578:	b138      	cbz	r0, 558a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    557a:	2801      	cmp	r0, #1
    557c:	d104      	bne.n	5588 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    557e:	7013      	strb	r3, [r2, #0]
    5580:	6808      	ldr	r0, [r1, #0]
    5582:	6090      	str	r0, [r2, #8]
    5584:	8888      	ldrh	r0, [r1, #4]
    5586:	8190      	strh	r0, [r2, #12]
    5588:	4770      	bx	lr
    558a:	7053      	strb	r3, [r2, #1]
    558c:	6808      	ldr	r0, [r1, #0]
    558e:	f8c2 0002 	str.w	r0, [r2, #2]
    5592:	8888      	ldrh	r0, [r1, #4]
    5594:	80d0      	strh	r0, [r2, #6]
    5596:	4770      	bx	lr
    5598:	20000295 	.word	0x20000295

0000559c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    559c:	4906      	ldr	r1, [pc, #24]	; (55b8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    559e:	b110      	cbz	r0, 55a6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    55a0:	2801      	cmp	r0, #1
    55a2:	d002      	beq.n	55aa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    55a4:	e005      	b.n	55b2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    55a6:	7848      	ldrb	r0, [r1, #1]
    55a8:	e000      	b.n	55ac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    55aa:	7808      	ldrb	r0, [r1, #0]
    55ac:	b108      	cbz	r0, 55b2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    55ae:	2001      	movs	r0, #1
    55b0:	4770      	bx	lr
    55b2:	2000      	movs	r0, #0
    55b4:	4770      	bx	lr
    55b6:	0000      	.short	0x0000
    55b8:	20000295 	.word	0x20000295

000055bc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    55bc:	4901      	ldr	r1, [pc, #4]	; (55c4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    55be:	7448      	strb	r0, [r1, #17]
    55c0:	4770      	bx	lr
    55c2:	0000      	.short	0x0000
    55c4:	20000f62 	.word	0x20000f62

000055c8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    55c8:	4801      	ldr	r0, [pc, #4]	; (55d0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    55ca:	78c0      	ldrb	r0, [r0, #3]
    55cc:	4770      	bx	lr
    55ce:	0000      	.short	0x0000
    55d0:	200000ac 	.word	0x200000ac

000055d4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    55d4:	4801      	ldr	r0, [pc, #4]	; (55dc <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    55d6:	7900      	ldrb	r0, [r0, #4]
    55d8:	4770      	bx	lr
    55da:	0000      	.short	0x0000
    55dc:	200000ac 	.word	0x200000ac

000055e0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    55e0:	b578      	push	{r3, r4, r5, r6, lr}
    55e2:	4913      	ldr	r1, [pc, #76]	; (5630 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    55e4:	7c4a      	ldrb	r2, [r1, #17]
    55e6:	b30a      	cbz	r2, 562c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    55e8:	7c0a      	ldrb	r2, [r1, #16]
    55ea:	f88d 2000 	strb.w	r2, [sp]
    55ee:	9a00      	ldr	r2, [sp, #0]
    55f0:	9200      	str	r2, [sp, #0]
    55f2:	f89d 2000 	ldrb.w	r2, [sp]
    55f6:	b1ca      	cbz	r2, 562c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    55f8:	2300      	movs	r3, #0
    55fa:	f101 0210 	add.w	r2, r1, #16
    55fe:	241a      	movs	r4, #26
    5600:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    5604:	7c0e      	ldrb	r6, [r1, #16]
    5606:	f88d 6000 	strb.w	r6, [sp]
    560a:	9e00      	ldr	r6, [sp, #0]
    560c:	9600      	str	r6, [sp, #0]
    560e:	f89d 6000 	ldrb.w	r6, [sp]
    5612:	b14e      	cbz	r6, 5628 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    5614:	7013      	strb	r3, [r2, #0]
    5616:	7043      	strb	r3, [r0, #1]
    5618:	7004      	strb	r4, [r0, #0]
    561a:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    561e:	6046      	str	r6, [r0, #4]
    5620:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    5624:	6086      	str	r6, [r0, #8]
    5626:	e7ed      	b.n	5604 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    5628:	2001      	movs	r0, #1
    562a:	bd78      	pop	{r3, r4, r5, r6, pc}
    562c:	2000      	movs	r0, #0
    562e:	bd78      	pop	{r3, r4, r5, r6, pc}
    5630:	20000f62 	.word	0x20000f62

00005634 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5634:	b510      	push	{r4, lr}
    5636:	4604      	mov	r4, r0
    5638:	f000 f956 	bl	58e8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    563c:	b118      	cbz	r0, 5646 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    563e:	21bd      	movs	r1, #189	; 0xbd
    5640:	2027      	movs	r0, #39	; 0x27
    5642:	f7ff f881 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5646:	4803      	ldr	r0, [pc, #12]	; (5654 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5648:	2101      	movs	r1, #1
    564a:	f008 fc18 	bl	de7e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    564e:	4802      	ldr	r0, [pc, #8]	; (5658 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5650:	62c4      	str	r4, [r0, #44]	; 0x2c
    5652:	bd10      	pop	{r4, pc}
    5654:	20000f40 	.word	0x20000f40
    5658:	200000ac 	.word	0x200000ac

0000565c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    565c:	4901      	ldr	r1, [pc, #4]	; (5664 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    565e:	2001      	movs	r0, #1
    5660:	7188      	strb	r0, [r1, #6]
    5662:	4770      	bx	lr
    5664:	200000ac 	.word	0x200000ac

00005668 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    566c:	4d5f      	ldr	r5, [pc, #380]	; (57ec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    566e:	9c08      	ldr	r4, [sp, #32]
    5670:	782e      	ldrb	r6, [r5, #0]
    5672:	2e00      	cmp	r6, #0
    5674:	d16b      	bne.n	574e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5676:	2a00      	cmp	r2, #0
    5678:	d069      	beq.n	574e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    567a:	2b00      	cmp	r3, #0
    567c:	d067      	beq.n	574e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    567e:	2c00      	cmp	r4, #0
    5680:	d065      	beq.n	574e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5682:	f105 0614 	add.w	r6, r5, #20
    5686:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    568a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    568e:	2700      	movs	r7, #0
    5690:	71af      	strb	r7, [r5, #6]
    5692:	716f      	strb	r7, [r5, #5]
    5694:	70ef      	strb	r7, [r5, #3]
    5696:	70af      	strb	r7, [r5, #2]
    5698:	712f      	strb	r7, [r5, #4]
    569a:	81af      	strh	r7, [r5, #12]
    569c:	81ef      	strh	r7, [r5, #14]
    569e:	f000 f95b 	bl	5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    56a2:	4606      	mov	r6, r0
    56a4:	f000 f952 	bl	594c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    56a8:	4604      	mov	r4, r0
    56aa:	f006 f825 	bl	b6f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    56ae:	f005 fcb9 	bl	b024 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    56b2:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    56b6:	f006 f8a5 	bl	b804 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    56ba:	f104 0018 	add.w	r0, r4, #24
    56be:	f006 f97f 	bl	b9c0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    56c2:	6920      	ldr	r0, [r4, #16]
    56c4:	f006 f972 	bl	b9ac <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    56c8:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    56cc:	f006 f996 	bl	b9fc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    56d0:	f105 0038 	add.w	r0, r5, #56	; 0x38
    56d4:	6840      	ldr	r0, [r0, #4]
    56d6:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
    56da:	b108      	cbz	r0, 56e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    56dc:	f005 ff56 	bl	b58c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    56e0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    56e4:	2001      	movs	r0, #1
    56e6:	f005 fe81 	bl	b3ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    56ea:	2800      	cmp	r0, #0
    56ec:	d076      	beq.n	57dc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>
    56ee:	4840      	ldr	r0, [pc, #256]	; (57f0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    56f0:	f005 fef8 	bl	b4e4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    56f4:	8820      	ldrh	r0, [r4, #0]
    56f6:	f7ff fc57 	bl	4fa8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    56fa:	6328      	str	r0, [r5, #48]	; 0x30
    56fc:	8820      	ldrh	r0, [r4, #0]
    56fe:	f7ff fc3d 	bl	4f7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5702:	f106 0160 	add.w	r1, r6, #96	; 0x60
    5706:	6368      	str	r0, [r5, #52]	; 0x34
    5708:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 57f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    570c:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5710:	f109 0808 	add.w	r8, r9, #8
    5714:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    5718:	6f31      	ldr	r1, [r6, #112]	; 0x70
    571a:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    571e:	6f71      	ldr	r1, [r6, #116]	; 0x74
    5720:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    5724:	f000 f98a 	bl	5a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5728:	4601      	mov	r1, r0
    572a:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    572c:	46ba      	mov	sl, r7
    572e:	f008 f93e 	bl	d9ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5732:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5734:	4281      	cmp	r1, r0
    5736:	d200      	bcs.n	573a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
    5738:	4608      	mov	r0, r1
    573a:	7228      	strb	r0, [r5, #8]
    573c:	46a8      	mov	r8, r5
    573e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5742:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    5744:	7cf7      	ldrb	r7, [r6, #19]
    5746:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    5748:	2908      	cmp	r1, #8
    574a:	d104      	bne.n	5756 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    574c:	e002      	b.n	5754 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    574e:	f44f 718a 	mov.w	r1, #276	; 0x114
    5752:	e047      	b.n	57e4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    5754:	2104      	movs	r1, #4
    5756:	f008 f92a 	bl	d9ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    575a:	b90f      	cbnz	r7, 5760 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    575c:	1d00      	adds	r0, r0, #4
    575e:	b280      	uxth	r0, r0
    5760:	4285      	cmp	r5, r0
    5762:	d200      	bcs.n	5766 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5764:	4628      	mov	r0, r5
    5766:	b2c5      	uxtb	r5, r0
    5768:	f888 5009 	strb.w	r5, [r8, #9]
    576c:	7cf1      	ldrb	r1, [r6, #19]
    576e:	2900      	cmp	r1, #0
    5770:	d002      	beq.n	5778 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5772:	bf00      	nop
    5774:	f04f 0104 	mov.w	r1, #4
    5778:	4429      	add	r1, r5
    577a:	f888 1007 	strb.w	r1, [r8, #7]
    577e:	4657      	mov	r7, sl
    5780:	d016      	beq.n	57b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x148>
    5782:	481c      	ldr	r0, [pc, #112]	; (57f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    5784:	f04f 0101 	mov.w	r1, #1
    5788:	f100 0008 	add.w	r0, r0, #8
    578c:	7601      	strb	r1, [r0, #24]
    578e:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    5792:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5796:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    579a:	f008 f80e 	bl	d7ba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    579e:	4915      	ldr	r1, [pc, #84]	; (57f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    57a0:	4603      	mov	r3, r0
    57a2:	462a      	mov	r2, r5
    57a4:	3108      	adds	r1, #8
    57a6:	2001      	movs	r0, #1
    57a8:	f005 fc86 	bl	b0b8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    57ac:	f005 fcba 	bl	b124 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    57b0:	2001      	movs	r0, #1
    57b2:	f000 fb73 	bl	5e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    57b6:	4810      	ldr	r0, [pc, #64]	; (57f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
    57b8:	6800      	ldr	r0, [r0, #0]
    57ba:	2803      	cmp	r0, #3
    57bc:	d010      	beq.n	57e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    57be:	280b      	cmp	r0, #11
    57c0:	d00e      	beq.n	57e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    57c2:	4648      	mov	r0, r9
    57c4:	f840 7f52 	str.w	r7, [r0, #82]!
    57c8:	6047      	str	r7, [r0, #4]
    57ca:	480a      	ldr	r0, [pc, #40]	; (57f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    57cc:	88b1      	ldrh	r1, [r6, #4]
    57ce:	3052      	adds	r0, #82	; 0x52
    57d0:	8041      	strh	r1, [r0, #2]
    57d2:	8821      	ldrh	r1, [r4, #0]
    57d4:	8001      	strh	r1, [r0, #0]
    57d6:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    57da:	7101      	strb	r1, [r0, #4]
    57dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57e0:	f240 11c1 	movw	r1, #449	; 0x1c1
    57e4:	2027      	movs	r0, #39	; 0x27
    57e6:	f7fe ffaf 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57ea:	0000      	.short	0x0000
    57ec:	200000ac 	.word	0x200000ac
    57f0:	000060a0 	.word	0x000060a0
    57f4:	20000f10 	.word	0x20000f10
    57f8:	40001550 	.word	0x40001550

000057fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    57fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5800:	4605      	mov	r5, r0
    5802:	f000 f8a9 	bl	5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5806:	4e33      	ldr	r6, [pc, #204]	; (58d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5808:	4604      	mov	r4, r0
    580a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    580c:	7847      	ldrb	r7, [r0, #1]
    580e:	b10d      	cbz	r5, 5814 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    5810:	2d01      	cmp	r5, #1
    5812:	d103      	bne.n	581c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5814:	6b71      	ldr	r1, [r6, #52]	; 0x34
    5816:	f006 ff50 	bl	c6ba <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    581a:	7070      	strb	r0, [r6, #1]
    581c:	7870      	ldrb	r0, [r6, #1]
    581e:	f04f 0800 	mov.w	r8, #0
    5822:	f04f 0901 	mov.w	r9, #1
    5826:	b150      	cbz	r0, 583e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5828:	2801      	cmp	r0, #1
    582a:	d01a      	beq.n	5862 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    582c:	2802      	cmp	r0, #2
    582e:	d034      	beq.n	589a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5830:	2803      	cmp	r0, #3
    5832:	d048      	beq.n	58c6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5834:	f240 4115 	movw	r1, #1045	; 0x415
    5838:	2027      	movs	r0, #39	; 0x27
    583a:	f7fe ff85 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    583e:	2d01      	cmp	r5, #1
    5840:	d032      	beq.n	58a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5842:	f000 f8e7 	bl	5a14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    5846:	4639      	mov	r1, r7
    5848:	2201      	movs	r2, #1
    584a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    584c:	f007 fb5c 	bl	cf08 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5850:	e028      	b.n	58a4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5852:	bf00      	nop
    5854:	f884 8008 	strb.w	r8, [r4, #8]
    5858:	e031      	b.n	58be <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    585a:	bf00      	nop
    585c:	f884 9008 	strb.w	r9, [r4, #8]
    5860:	e02d      	b.n	58be <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5862:	2d01      	cmp	r5, #1
    5864:	d008      	beq.n	5878 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5866:	f000 f8d5 	bl	5a14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    586a:	4639      	mov	r1, r7
    586c:	2200      	movs	r2, #0
    586e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5870:	f007 fb4a 	bl	cf08 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5874:	2d02      	cmp	r5, #2
    5876:	d00b      	beq.n	5890 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5878:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    587c:	1c40      	adds	r0, r0, #1
    587e:	f141 0100 	adc.w	r1, r1, #0
    5882:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5886:	7a20      	ldrb	r0, [r4, #8]
    5888:	2801      	cmp	r0, #1
    588a:	d003      	beq.n	5894 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    588c:	f884 9008 	strb.w	r9, [r4, #8]
    5890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5894:	f884 8008 	strb.w	r8, [r4, #8]
    5898:	e7fa      	b.n	5890 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    589a:	2d01      	cmp	r5, #1
    589c:	d004      	beq.n	58a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    589e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    58a0:	f007 fd43 	bl	d32a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    58a4:	2d02      	cmp	r5, #2
    58a6:	d0f3      	beq.n	5890 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    58a8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    58ac:	1c40      	adds	r0, r0, #1
    58ae:	f141 0100 	adc.w	r1, r1, #0
    58b2:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    58b6:	7a20      	ldrb	r0, [r4, #8]
    58b8:	2801      	cmp	r0, #1
    58ba:	d1cf      	bne.n	585c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    58bc:	e7ca      	b.n	5854 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    58be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58c2:	f001 b8cd 	b.w	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    58c6:	2d01      	cmp	r5, #1
    58c8:	d0e2      	beq.n	5890 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    58ca:	6b70      	ldr	r0, [r6, #52]	; 0x34
    58cc:	f007 fd2d 	bl	d32a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    58d0:	e7f5      	b.n	58be <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    58d2:	0000      	.short	0x0000
    58d4:	200000ac 	.word	0x200000ac

000058d8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    58d8:	4802      	ldr	r0, [pc, #8]	; (58e4 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    58da:	89c0      	ldrh	r0, [r0, #14]
    58dc:	f3c0 2080 	ubfx	r0, r0, #10, #1
    58e0:	4770      	bx	lr
    58e2:	0000      	.short	0x0000
    58e4:	200000ac 	.word	0x200000ac

000058e8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    58e8:	4804      	ldr	r0, [pc, #16]	; (58fc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    58ea:	7800      	ldrb	r0, [r0, #0]
    58ec:	b108      	cbz	r0, 58f2 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    58ee:	200c      	movs	r0, #12
    58f0:	4770      	bx	lr
    58f2:	4903      	ldr	r1, [pc, #12]	; (5900 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    58f4:	2000      	movs	r0, #0
    58f6:	7448      	strb	r0, [r1, #17]
    58f8:	4770      	bx	lr
    58fa:	0000      	.short	0x0000
    58fc:	200000ac 	.word	0x200000ac
    5900:	20000f62 	.word	0x20000f62

00005904 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5904:	480c      	ldr	r0, [pc, #48]	; (5938 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5906:	b510      	push	{r4, lr}
    5908:	7801      	ldrb	r1, [r0, #0]
    590a:	b149      	cbz	r1, 5920 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    590c:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5910:	7800      	ldrb	r0, [r0, #0]
    5912:	2802      	cmp	r0, #2
    5914:	d008      	beq.n	5928 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5916:	f240 11dd 	movw	r1, #477	; 0x1dd
    591a:	2027      	movs	r0, #39	; 0x27
    591c:	f7fe ff14 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5924:	f000 b9d8 	b.w	5cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5928:	6848      	ldr	r0, [r1, #4]
    592a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    592e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5932:	f005 bddf 	b.w	b4f4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5936:	0000      	.short	0x0000
    5938:	200000ac 	.word	0x200000ac
    593c:	4a02      	ldr	r2, [pc, #8]	; (5948 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    593e:	8993      	ldrh	r3, [r2, #12]
    5940:	4303      	orrs	r3, r0
    5942:	8193      	strh	r3, [r2, #12]
    5944:	6952      	ldr	r2, [r2, #20]
    5946:	4710      	bx	r2
    5948:	200000ac 	.word	0x200000ac
    594c:	4801      	ldr	r0, [pc, #4]	; (5954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    594e:	6840      	ldr	r0, [r0, #4]
    5950:	4770      	bx	lr
    5952:	0000      	.short	0x0000
    5954:	200000e4 	.word	0x200000e4
    5958:	4801      	ldr	r0, [pc, #4]	; (5960 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    595a:	6840      	ldr	r0, [r0, #4]
    595c:	3070      	adds	r0, #112	; 0x70
    595e:	4770      	bx	lr
    5960:	200000e4 	.word	0x200000e4
    5964:	4a01      	ldr	r2, [pc, #4]	; (596c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5966:	2100      	movs	r1, #0
    5968:	6952      	ldr	r2, [r2, #20]
    596a:	4710      	bx	r2
    596c:	200000ac 	.word	0x200000ac
    5970:	b570      	push	{r4, r5, r6, lr}
    5972:	f7ff fff1 	bl	5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5976:	4604      	mov	r4, r0
    5978:	f7ff ffe8 	bl	594c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    597c:	4605      	mov	r5, r0
    597e:	4621      	mov	r1, r4
    5980:	f008 f898 	bl	dab4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5984:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5988:	2901      	cmp	r1, #1
    598a:	d114      	bne.n	59b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    598c:	2800      	cmp	r0, #0
    598e:	d012      	beq.n	59b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5990:	4809      	ldr	r0, [pc, #36]	; (59b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    5992:	6842      	ldr	r2, [r0, #4]
    5994:	8828      	ldrh	r0, [r5, #0]
    5996:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
    599a:	7a60      	ldrb	r0, [r4, #9]
    599c:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
    59a0:	7aa0      	ldrb	r0, [r4, #10]
    59a2:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
    59a6:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    59aa:	2001      	movs	r0, #1
    59ac:	7010      	strb	r0, [r2, #0]
    59ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    59b2:	f001 b855 	b.w	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    59b6:	bd70      	pop	{r4, r5, r6, pc}
    59b8:	200000e4 	.word	0x200000e4
    59bc:	b570      	push	{r4, r5, r6, lr}
    59be:	4605      	mov	r5, r0
    59c0:	2901      	cmp	r1, #1
    59c2:	d818      	bhi.n	59f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    59c4:	4c12      	ldr	r4, [pc, #72]	; (5a10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    59c6:	69a1      	ldr	r1, [r4, #24]
    59c8:	4788      	blx	r1
    59ca:	b1a0      	cbz	r0, 59f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    59cc:	7960      	ldrb	r0, [r4, #5]
    59ce:	b990      	cbnz	r0, 59f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    59d0:	b9e5      	cbnz	r5, 5a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    59d2:	f104 0010 	add.w	r0, r4, #16
    59d6:	7801      	ldrb	r1, [r0, #0]
    59d8:	06c8      	lsls	r0, r1, #27
    59da:	d405      	bmi.n	59e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    59dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    59de:	7800      	ldrb	r0, [r0, #0]
    59e0:	06c0      	lsls	r0, r0, #27
    59e2:	d401      	bmi.n	59e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    59e4:	2001      	movs	r0, #1
    59e6:	e000      	b.n	59ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    59e8:	2000      	movs	r0, #0
    59ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    59ec:	b92a      	cbnz	r2, 59fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    59ee:	8962      	ldrh	r2, [r4, #10]
    59f0:	b11a      	cbz	r2, 59fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    59f2:	06c9      	lsls	r1, r1, #27
    59f4:	d401      	bmi.n	59fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    59f6:	2001      	movs	r0, #1
    59f8:	bd70      	pop	{r4, r5, r6, pc}
    59fa:	89a1      	ldrh	r1, [r4, #12]
    59fc:	078a      	lsls	r2, r1, #30
    59fe:	d503      	bpl.n	5a08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5a00:	6a22      	ldr	r2, [r4, #32]
    5a02:	78d2      	ldrb	r2, [r2, #3]
    5a04:	2a02      	cmp	r2, #2
    5a06:	d001      	beq.n	5a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5a08:	4308      	orrs	r0, r1
    5a0a:	d1f4      	bne.n	59f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5a0c:	2000      	movs	r0, #0
    5a0e:	bd70      	pop	{r4, r5, r6, pc}
    5a10:	200000ac 	.word	0x200000ac
    5a14:	b510      	push	{r4, lr}
    5a16:	4c08      	ldr	r4, [pc, #32]	; (5a38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    5a18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a1a:	b138      	cbz	r0, 5a2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    5a1c:	8962      	ldrh	r2, [r4, #10]
    5a1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5a20:	1cd2      	adds	r2, r2, #3
    5a22:	f006 fcf1 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a28:	6260      	str	r0, [r4, #36]	; 0x24
    5a2a:	bd10      	pop	{r4, pc}
    5a2c:	f240 415b 	movw	r1, #1115	; 0x45b
    5a30:	2027      	movs	r0, #39	; 0x27
    5a32:	f7fe fe89 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a36:	0000      	.short	0x0000
    5a38:	200000ac 	.word	0x200000ac
    5a3c:	b510      	push	{r4, lr}
    5a3e:	f7ff ff85 	bl	594c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5a42:	4604      	mov	r4, r0
    5a44:	f7ff ff88 	bl	5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5a48:	4601      	mov	r1, r0
    5a4a:	7b42      	ldrb	r2, [r0, #13]
    5a4c:	4815      	ldr	r0, [pc, #84]	; (5aa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    5a4e:	2a24      	cmp	r2, #36	; 0x24
    5a50:	d00e      	beq.n	5a70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5a52:	7b89      	ldrb	r1, [r1, #14]
    5a54:	2924      	cmp	r1, #36	; 0x24
    5a56:	d00b      	beq.n	5a70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5a58:	2a1f      	cmp	r2, #31
    5a5a:	d00d      	beq.n	5a78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5a5c:	2a20      	cmp	r2, #32
    5a5e:	d00b      	beq.n	5a78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5a60:	2922      	cmp	r1, #34	; 0x22
    5a62:	d00f      	beq.n	5a84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5a64:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5a68:	2804      	cmp	r0, #4
    5a6a:	d100      	bne.n	5a6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    5a6c:	2008      	movs	r0, #8
    5a6e:	bd10      	pop	{r4, pc}
    5a70:	6840      	ldr	r0, [r0, #4]
    5a72:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
    5a76:	e00e      	b.n	5a96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    5a78:	2922      	cmp	r1, #34	; 0x22
    5a7a:	d003      	beq.n	5a84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5a7c:	6840      	ldr	r0, [r0, #4]
    5a7e:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
    5a82:	e005      	b.n	5a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5a84:	6841      	ldr	r1, [r0, #4]
    5a86:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
    5a8a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5a8e:	4008      	ands	r0, r1
    5a90:	f007 fe89 	bl	d7a6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5a94:	4601      	mov	r1, r0
    5a96:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a9e:	f007 be9a 	b.w	d7d6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5aa2:	0000      	.short	0x0000
    5aa4:	200000e4 	.word	0x200000e4
    5aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5aac:	4688      	mov	r8, r1
    5aae:	4607      	mov	r7, r0
    5ab0:	f7ff ff52 	bl	5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5ab4:	4c57      	ldr	r4, [pc, #348]	; (5c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    5ab6:	2600      	movs	r6, #0
    5ab8:	4605      	mov	r5, r0
    5aba:	f88d 6000 	strb.w	r6, [sp]
    5abe:	7820      	ldrb	r0, [r4, #0]
    5ac0:	2802      	cmp	r0, #2
    5ac2:	d004      	beq.n	5ace <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    5ac4:	f240 41ba 	movw	r1, #1210	; 0x4ba
    5ac8:	2027      	movs	r0, #39	; 0x27
    5aca:	f7fe fe3d 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ace:	7ba0      	ldrb	r0, [r4, #14]
    5ad0:	0640      	lsls	r0, r0, #25
    5ad2:	d406      	bmi.n	5ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    5ad4:	2040      	movs	r0, #64	; 0x40
    5ad6:	f7ff ff45 	bl	5964 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5ada:	89e0      	ldrh	r0, [r4, #14]
    5adc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5ae0:	81e0      	strh	r0, [r4, #14]
    5ae2:	7ce8      	ldrb	r0, [r5, #19]
    5ae4:	b3c7      	cbz	r7, 5b58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    5ae6:	f005 fb4d 	bl	b184 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5aea:	f005 fb31 	bl	b150 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5aee:	b968      	cbnz	r0, 5b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5af0:	7ce8      	ldrb	r0, [r5, #19]
    5af2:	b158      	cbz	r0, 5b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5af4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5af6:	7841      	ldrb	r1, [r0, #1]
    5af8:	b141      	cbz	r1, 5b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5afa:	7800      	ldrb	r0, [r0, #0]
    5afc:	7a29      	ldrb	r1, [r5, #8]
    5afe:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5b02:	4288      	cmp	r0, r1
    5b04:	d102      	bne.n	5b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5b06:	2001      	movs	r0, #1
    5b08:	70a0      	strb	r0, [r4, #2]
    5b0a:	e063      	b.n	5bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    5b0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5b0e:	7841      	ldrb	r1, [r0, #1]
    5b10:	8161      	strh	r1, [r4, #10]
    5b12:	b121      	cbz	r1, 5b1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    5b14:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5b16:	f007 fbd5 	bl	d2c4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5b1a:	62a0      	str	r0, [r4, #40]	; 0x28
    5b1c:	e000      	b.n	5b20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    5b1e:	62a6      	str	r6, [r4, #40]	; 0x28
    5b20:	89e0      	ldrh	r0, [r4, #14]
    5b22:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5b26:	81e0      	strh	r0, [r4, #14]
    5b28:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5b2a:	79e9      	ldrb	r1, [r5, #7]
    5b2c:	7800      	ldrb	r0, [r0, #0]
    5b2e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5b32:	4288      	cmp	r0, r1
    5b34:	d005      	beq.n	5b42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    5b36:	f000 f963 	bl	5e00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
    5b3a:	89e0      	ldrh	r0, [r4, #14]
    5b3c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5b40:	81e0      	strh	r0, [r4, #14]
    5b42:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5b44:	7a29      	ldrb	r1, [r5, #8]
    5b46:	7800      	ldrb	r0, [r0, #0]
    5b48:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5b4c:	4288      	cmp	r0, r1
    5b4e:	d10e      	bne.n	5b6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5b50:	4668      	mov	r0, sp
    5b52:	f000 f917 	bl	5d84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    5b56:	e00a      	b.n	5b6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5b58:	e7ff      	b.n	5b5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    5b5a:	b108      	cbz	r0, 5b60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    5b5c:	f005 fb0c 	bl	b178 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5b60:	78e0      	ldrb	r0, [r4, #3]
    5b62:	1c40      	adds	r0, r0, #1
    5b64:	70e0      	strb	r0, [r4, #3]
    5b66:	89e0      	ldrh	r0, [r4, #14]
    5b68:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5b6c:	81e0      	strh	r0, [r4, #14]
    5b6e:	7ca8      	ldrb	r0, [r5, #18]
    5b70:	b198      	cbz	r0, 5b9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    5b72:	f7ff feeb 	bl	594c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5b76:	4928      	ldr	r1, [pc, #160]	; (5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5b78:	760e      	strb	r6, [r1, #24]
    5b7a:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
    5b7e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5b82:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5b86:	f007 fe18 	bl	d7ba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5b8a:	4603      	mov	r3, r0
    5b8c:	22fb      	movs	r2, #251	; 0xfb
    5b8e:	4922      	ldr	r1, [pc, #136]	; (5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5b90:	2000      	movs	r0, #0
    5b92:	f005 fa91 	bl	b0b8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5b96:	f005 fac5 	bl	b124 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5b9a:	4d1f      	ldr	r5, [pc, #124]	; (5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5b9c:	354a      	adds	r5, #74	; 0x4a
    5b9e:	f1b8 0f00 	cmp.w	r8, #0
    5ba2:	d104      	bne.n	5bae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    5ba4:	78e1      	ldrb	r1, [r4, #3]
    5ba6:	2001      	movs	r0, #1
    5ba8:	f7ff ff08 	bl	59bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5bac:	b1b0      	cbz	r0, 5bdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    5bae:	f005 fed9 	bl	b964 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5bb2:	f89d 0000 	ldrb.w	r0, [sp]
    5bb6:	b110      	cbz	r0, 5bbe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    5bb8:	2000      	movs	r0, #0
    5bba:	f7ff fe1f 	bl	57fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5bbe:	b137      	cbz	r7, 5bce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    5bc0:	70e6      	strb	r6, [r4, #3]
    5bc2:	7968      	ldrb	r0, [r5, #5]
    5bc4:	1c40      	adds	r0, r0, #1
    5bc6:	7168      	strb	r0, [r5, #5]
    5bc8:	f7ff fed2 	bl	5970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5bcc:	e002      	b.n	5bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    5bce:	79a8      	ldrb	r0, [r5, #6]
    5bd0:	1c40      	adds	r0, r0, #1
    5bd2:	71a8      	strb	r0, [r5, #6]
    5bd4:	f000 f880 	bl	5cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5bdc:	f89d 0000 	ldrb.w	r0, [sp]
    5be0:	b110      	cbz	r0, 5be8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    5be2:	2001      	movs	r0, #1
    5be4:	f7ff fe0a 	bl	57fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5be8:	2000      	movs	r0, #0
    5bea:	f000 f995 	bl	5f18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    5bee:	f89d 0000 	ldrb.w	r0, [sp]
    5bf2:	b110      	cbz	r0, 5bfa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
    5bf4:	2002      	movs	r0, #2
    5bf6:	f7ff fe01 	bl	57fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5bfa:	b137      	cbz	r7, 5c0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    5bfc:	70e6      	strb	r6, [r4, #3]
    5bfe:	7968      	ldrb	r0, [r5, #5]
    5c00:	1c40      	adds	r0, r0, #1
    5c02:	7168      	strb	r0, [r5, #5]
    5c04:	f7ff feb4 	bl	5970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5c08:	e7e6      	b.n	5bd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    5c0a:	79a8      	ldrb	r0, [r5, #6]
    5c0c:	1c40      	adds	r0, r0, #1
    5c0e:	71a8      	strb	r0, [r5, #6]
    5c10:	e7e2      	b.n	5bd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    5c12:	0000      	.short	0x0000
    5c14:	200000ac 	.word	0x200000ac
    5c18:	20000f18 	.word	0x20000f18
    5c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c20:	460f      	mov	r7, r1
    5c22:	4680      	mov	r8, r0
    5c24:	f7ff fe98 	bl	5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5c28:	4d29      	ldr	r5, [pc, #164]	; (5cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    5c2a:	4604      	mov	r4, r0
    5c2c:	7828      	ldrb	r0, [r5, #0]
    5c2e:	2801      	cmp	r0, #1
    5c30:	d004      	beq.n	5c3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    5c32:	f240 416a 	movw	r1, #1130	; 0x46a
    5c36:	2027      	movs	r0, #39	; 0x27
    5c38:	f7fe fd86 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c3c:	7861      	ldrb	r1, [r4, #1]
    5c3e:	2000      	movs	r0, #0
    5c40:	2601      	movs	r6, #1
    5c42:	b129      	cbz	r1, 5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5c44:	7060      	strb	r0, [r4, #1]
    5c46:	2100      	movs	r1, #0
    5c48:	2004      	movs	r0, #4
    5c4a:	f7ff fe77 	bl	593c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5c4e:	70e6      	strb	r6, [r4, #3]
    5c50:	6a29      	ldr	r1, [r5, #32]
    5c52:	7808      	ldrb	r0, [r1, #0]
    5c54:	43c0      	mvns	r0, r0
    5c56:	0780      	lsls	r0, r0, #30
    5c58:	d109      	bne.n	5c6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    5c5a:	79a0      	ldrb	r0, [r4, #6]
    5c5c:	bb88      	cbnz	r0, 5cc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    5c5e:	2002      	movs	r0, #2
    5c60:	f7ff fe6c 	bl	593c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5c64:	6a28      	ldr	r0, [r5, #32]
    5c66:	7800      	ldrb	r0, [r0, #0]
    5c68:	43c0      	mvns	r0, r0
    5c6a:	0780      	lsls	r0, r0, #30
    5c6c:	d029      	beq.n	5cc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    5c6e:	6a28      	ldr	r0, [r5, #32]
    5c70:	7840      	ldrb	r0, [r0, #1]
    5c72:	b110      	cbz	r0, 5c7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    5c74:	2002      	movs	r0, #2
    5c76:	71a0      	strb	r0, [r4, #6]
    5c78:	e000      	b.n	5c7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    5c7a:	71a6      	strb	r6, [r4, #6]
    5c7c:	7ce0      	ldrb	r0, [r4, #19]
    5c7e:	b1a0      	cbz	r0, 5caa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    5c80:	f7ff fe64 	bl	594c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5c84:	4913      	ldr	r1, [pc, #76]	; (5cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    5c86:	7a6d      	ldrb	r5, [r5, #9]
    5c88:	760e      	strb	r6, [r1, #24]
    5c8a:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    5c8e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5c92:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5c96:	f007 fd90 	bl	d7ba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5c9a:	4603      	mov	r3, r0
    5c9c:	462a      	mov	r2, r5
    5c9e:	490d      	ldr	r1, [pc, #52]	; (5cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    5ca0:	2001      	movs	r0, #1
    5ca2:	f005 fa09 	bl	b0b8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5ca6:	f005 fa3d 	bl	b124 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5caa:	ea37 0708 	bics.w	r7, r7, r8
    5cae:	d004      	beq.n	5cba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    5cb0:	2100      	movs	r1, #0
    5cb2:	4608      	mov	r0, r1
    5cb4:	f7ff fe82 	bl	59bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5cb8:	b128      	cbz	r0, 5cc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    5cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5cbe:	f000 b80b 	b.w	5cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5cc2:	2003      	movs	r0, #3
    5cc4:	e7d7      	b.n	5c76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    5cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5cca:	2000      	movs	r0, #0
    5ccc:	f000 b8e6 	b.w	5e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    5cd0:	200000ac 	.word	0x200000ac
    5cd4:	20000f18 	.word	0x20000f18
    5cd8:	b510      	push	{r4, lr}
    5cda:	f005 faeb 	bl	b2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5cde:	f005 f9a1 	bl	b024 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5ce2:	4c0d      	ldr	r4, [pc, #52]	; (5d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    5ce4:	89e0      	ldrh	r0, [r4, #14]
    5ce6:	f7ff fe3d 	bl	5964 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5cea:	69e2      	ldr	r2, [r4, #28]
    5cec:	7961      	ldrb	r1, [r4, #5]
    5cee:	78a0      	ldrb	r0, [r4, #2]
    5cf0:	4790      	blx	r2
    5cf2:	480a      	ldr	r0, [pc, #40]	; (5d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5cf4:	7c40      	ldrb	r0, [r0, #17]
    5cf6:	b158      	cbz	r0, 5d10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    5cf8:	4808      	ldr	r0, [pc, #32]	; (5d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5cfa:	3852      	subs	r0, #82	; 0x52
    5cfc:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5d00:	6081      	str	r1, [r0, #8]
    5d02:	6841      	ldr	r1, [r0, #4]
    5d04:	60c1      	str	r1, [r0, #12]
    5d06:	4805      	ldr	r0, [pc, #20]	; (5d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5d08:	2101      	movs	r1, #1
    5d0a:	7401      	strb	r1, [r0, #16]
    5d0c:	f000 fea8 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5d10:	2000      	movs	r0, #0
    5d12:	7020      	strb	r0, [r4, #0]
    5d14:	bd10      	pop	{r4, pc}
    5d16:	0000      	.short	0x0000
    5d18:	200000ac 	.word	0x200000ac
    5d1c:	20000f62 	.word	0x20000f62
    5d20:	4808      	ldr	r0, [pc, #32]	; (5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    5d22:	b510      	push	{r4, lr}
    5d24:	7800      	ldrb	r0, [r0, #0]
    5d26:	2802      	cmp	r0, #2
    5d28:	d004      	beq.n	5d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    5d2a:	f240 2111 	movw	r1, #529	; 0x211
    5d2e:	2027      	movs	r0, #39	; 0x27
    5d30:	f7fe fd0a 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d34:	4904      	ldr	r1, [pc, #16]	; (5d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    5d36:	2001      	movs	r0, #1
    5d38:	71c8      	strb	r0, [r1, #7]
    5d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5d3e:	f7ff bfcb 	b.w	5cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5d42:	0000      	.short	0x0000
    5d44:	200000ac 	.word	0x200000ac
    5d48:	20000f62 	.word	0x20000f62
    5d4c:	b430      	push	{r4, r5}
    5d4e:	4b0c      	ldr	r3, [pc, #48]	; (5d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
    5d50:	b942      	cbnz	r2, 5d64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    5d52:	79da      	ldrb	r2, [r3, #7]
    5d54:	2aff      	cmp	r2, #255	; 0xff
    5d56:	d105      	bne.n	5d64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    5d58:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5d5c:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5d60:	42a2      	cmp	r2, r4
    5d62:	d00b      	beq.n	5d7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    5d64:	b131      	cbz	r1, 5d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    5d66:	79da      	ldrb	r2, [r3, #7]
    5d68:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5d6c:	bc30      	pop	{r4, r5}
    5d6e:	4610      	mov	r0, r2
    5d70:	f005 be30 	b.w	b9d4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5d74:	22ff      	movs	r2, #255	; 0xff
    5d76:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5d7a:	e7f7      	b.n	5d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    5d7c:	bc30      	pop	{r4, r5}
    5d7e:	4770      	bx	lr
    5d80:	200000ac 	.word	0x200000ac
    5d84:	b570      	push	{r4, r5, r6, lr}
    5d86:	4606      	mov	r6, r0
    5d88:	f7ff fde6 	bl	5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5d8c:	4a1b      	ldr	r2, [pc, #108]	; (5dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
    5d8e:	4604      	mov	r4, r0
    5d90:	2501      	movs	r5, #1
    5d92:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5d94:	7808      	ldrb	r0, [r1, #0]
    5d96:	f000 0003 	and.w	r0, r0, #3
    5d9a:	2801      	cmp	r0, #1
    5d9c:	d00c      	beq.n	5db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    5d9e:	2802      	cmp	r0, #2
    5da0:	d00a      	beq.n	5db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    5da2:	2803      	cmp	r0, #3
    5da4:	d121      	bne.n	5dea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    5da6:	7065      	strb	r5, [r4, #1]
    5da8:	89d0      	ldrh	r0, [r2, #14]
    5daa:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    5dae:	81d0      	strh	r0, [r2, #14]
    5db0:	2001      	movs	r0, #1
    5db2:	f7ff fdc3 	bl	593c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5db6:	e018      	b.n	5dea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    5db8:	7848      	ldrb	r0, [r1, #1]
    5dba:	b1b0      	cbz	r0, 5dea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    5dbc:	89d1      	ldrh	r1, [r2, #14]
    5dbe:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5dc2:	81d1      	strh	r1, [r2, #14]
    5dc4:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5dc6:	2900      	cmp	r1, #0
    5dc8:	d009      	beq.n	5dde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
    5dca:	28fb      	cmp	r0, #251	; 0xfb
    5dcc:	d808      	bhi.n	5de0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    5dce:	7990      	ldrb	r0, [r2, #6]
    5dd0:	b120      	cbz	r0, 5ddc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    5dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5dd6:	2020      	movs	r0, #32
    5dd8:	f7ff bdc4 	b.w	5964 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5ddc:	7035      	strb	r5, [r6, #0]
    5dde:	bd70      	pop	{r4, r5, r6, pc}
    5de0:	7950      	ldrb	r0, [r2, #5]
    5de2:	f040 0010 	orr.w	r0, r0, #16
    5de6:	7150      	strb	r0, [r2, #5]
    5de8:	bd70      	pop	{r4, r5, r6, pc}
    5dea:	7a20      	ldrb	r0, [r4, #8]
    5dec:	2801      	cmp	r0, #1
    5dee:	d001      	beq.n	5df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    5df0:	7225      	strb	r5, [r4, #8]
    5df2:	bd70      	pop	{r4, r5, r6, pc}
    5df4:	2000      	movs	r0, #0
    5df6:	7220      	strb	r0, [r4, #8]
    5df8:	bd70      	pop	{r4, r5, r6, pc}
    5dfa:	0000      	.short	0x0000
    5dfc:	200000ac 	.word	0x200000ac
    5e00:	b570      	push	{r4, r5, r6, lr}
    5e02:	f7ff fda9 	bl	5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5e06:	4604      	mov	r4, r0
    5e08:	7980      	ldrb	r0, [r0, #6]
    5e0a:	2800      	cmp	r0, #0
    5e0c:	d02e      	beq.n	5e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    5e0e:	2802      	cmp	r0, #2
    5e10:	d10d      	bne.n	5e2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5e12:	481c      	ldr	r0, [pc, #112]	; (5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
    5e14:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5e16:	f007 f850 	bl	ceba <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5e1a:	b340      	cbz	r0, 5e6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
    5e1c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5e20:	1c40      	adds	r0, r0, #1
    5e22:	f141 0100 	adc.w	r1, r1, #0
    5e26:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5e2a:	f000 fe19 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5e2e:	2500      	movs	r5, #0
    5e30:	71a5      	strb	r5, [r4, #6]
    5e32:	78e0      	ldrb	r0, [r4, #3]
    5e34:	b120      	cbz	r0, 5e40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
    5e36:	70e5      	strb	r5, [r4, #3]
    5e38:	2100      	movs	r1, #0
    5e3a:	2010      	movs	r0, #16
    5e3c:	f7ff fd7e 	bl	593c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5e40:	78a0      	ldrb	r0, [r4, #2]
    5e42:	b170      	cbz	r0, 5e62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
    5e44:	70a5      	strb	r5, [r4, #2]
    5e46:	f7ff fb07 	bl	5458 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5e4a:	b198      	cbz	r0, 5e74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    5e4c:	2100      	movs	r1, #0
    5e4e:	2008      	movs	r0, #8
    5e50:	f7ff fd74 	bl	593c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5e54:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5e58:	1c40      	adds	r0, r0, #1
    5e5a:	f141 0100 	adc.w	r1, r1, #0
    5e5e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5e62:	79e0      	ldrb	r0, [r4, #7]
    5e64:	2801      	cmp	r0, #1
    5e66:	d00a      	beq.n	5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    5e68:	2001      	movs	r0, #1
    5e6a:	71e0      	strb	r0, [r4, #7]
    5e6c:	bd70      	pop	{r4, r5, r6, pc}
    5e6e:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    5e72:	e001      	b.n	5e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
    5e74:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    5e78:	2027      	movs	r0, #39	; 0x27
    5e7a:	f7fe fc65 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e7e:	71e5      	strb	r5, [r4, #7]
    5e80:	bd70      	pop	{r4, r5, r6, pc}
    5e82:	0000      	.short	0x0000
    5e84:	200000ac 	.word	0x200000ac
    5e88:	4803      	ldr	r0, [pc, #12]	; (5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    5e8a:	7800      	ldrb	r0, [r0, #0]
    5e8c:	2800      	cmp	r0, #0
    5e8e:	d001      	beq.n	5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    5e90:	f7ff bf22 	b.w	5cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5e94:	4770      	bx	lr
    5e96:	0000      	.short	0x0000
    5e98:	200000ac 	.word	0x200000ac
    5e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ea0:	4606      	mov	r6, r0
    5ea2:	f7ff fd53 	bl	594c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5ea6:	4680      	mov	r8, r0
    5ea8:	f7ff fd56 	bl	5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5eac:	4c17      	ldr	r4, [pc, #92]	; (5f0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
    5eae:	4605      	mov	r5, r0
    5eb0:	4632      	mov	r2, r6
    5eb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5eb4:	6260      	str	r0, [r4, #36]	; 0x24
    5eb6:	2101      	movs	r1, #1
    5eb8:	4640      	mov	r0, r8
    5eba:	f7ff ff47 	bl	5d4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    5ebe:	7ce8      	ldrb	r0, [r5, #19]
    5ec0:	2700      	movs	r7, #0
    5ec2:	b180      	cbz	r0, 5ee6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    5ec4:	4812      	ldr	r0, [pc, #72]	; (5f10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    5ec6:	f005 fca3 	bl	b810 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5eca:	4812      	ldr	r0, [pc, #72]	; (5f14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
    5ecc:	2101      	movs	r1, #1
    5ece:	7601      	strb	r1, [r0, #24]
    5ed0:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5ed4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5ed8:	490d      	ldr	r1, [pc, #52]	; (5f10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    5eda:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5edc:	f005 f874 	bl	afc8 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5ee0:	f005 f886 	bl	aff0 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    5ee4:	e004      	b.n	5ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    5ee6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5ee8:	f005 fc92 	bl	b810 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5eec:	f005 f89a 	bl	b024 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5ef0:	b916      	cbnz	r6, 5ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    5ef2:	4638      	mov	r0, r7
    5ef4:	f005 fb22 	bl	b53c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5ef8:	2100      	movs	r1, #0
    5efa:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5efe:	4608      	mov	r0, r1
    5f00:	f005 fd12 	bl	b928 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5f04:	2002      	movs	r0, #2
    5f06:	7020      	strb	r0, [r4, #0]
    5f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f0c:	200000ac 	.word	0x200000ac
    5f10:	20000e10 	.word	0x20000e10
    5f14:	20000f18 	.word	0x20000f18
    5f18:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5f1c:	4604      	mov	r4, r0
    5f1e:	f7ff fd1b 	bl	5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5f22:	4605      	mov	r5, r0
    5f24:	f7ff fd12 	bl	594c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5f28:	4606      	mov	r6, r0
    5f2a:	f8df 9168 	ldr.w	r9, [pc, #360]	; 6094 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    5f2e:	4622      	mov	r2, r4
    5f30:	2100      	movs	r1, #0
    5f32:	f7ff ff0b 	bl	5d4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    5f36:	79a8      	ldrb	r0, [r5, #6]
    5f38:	2701      	movs	r7, #1
    5f3a:	f04f 0800 	mov.w	r8, #0
    5f3e:	f1a9 0420 	sub.w	r4, r9, #32
    5f42:	b140      	cbz	r0, 5f56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
    5f44:	2801      	cmp	r0, #1
    5f46:	d01f      	beq.n	5f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    5f48:	2802      	cmp	r0, #2
    5f4a:	d030      	beq.n	5fae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    5f4c:	2803      	cmp	r0, #3
    5f4e:	d03c      	beq.n	5fca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
    5f50:	f240 21ae 	movw	r1, #686	; 0x2ae
    5f54:	e058      	b.n	6008 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5f56:	7a20      	ldrb	r0, [r4, #8]
    5f58:	2150      	movs	r1, #80	; 0x50
    5f5a:	f8ad 0004 	strh.w	r0, [sp, #4]
    5f5e:	5388      	strh	r0, [r1, r6]
    5f60:	4648      	mov	r0, r9
    5f62:	f7ff faa3 	bl	54ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5f66:	b128      	cbz	r0, 5f74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    5f68:	2080      	movs	r0, #128	; 0x80
    5f6a:	6a21      	ldr	r1, [r4, #32]
    5f6c:	f7ff fce6 	bl	593c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5f70:	70af      	strb	r7, [r5, #2]
    5f72:	e02e      	b.n	5fd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5f74:	466a      	mov	r2, sp
    5f76:	a901      	add	r1, sp, #4
    5f78:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5f7a:	f007 fc36 	bl	d7ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5f7e:	6220      	str	r0, [r4, #32]
    5f80:	b110      	cbz	r0, 5f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    5f82:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    5f86:	b111      	cbz	r1, 5f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    5f88:	4843      	ldr	r0, [pc, #268]	; (6098 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    5f8a:	6220      	str	r0, [r4, #32]
    5f8c:	e021      	b.n	5fd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5f8e:	f89d 1000 	ldrb.w	r1, [sp]
    5f92:	b931      	cbnz	r1, 5fa2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    5f94:	f8a0 8000 	strh.w	r8, [r0]
    5f98:	f880 8002 	strb.w	r8, [r0, #2]
    5f9c:	2101      	movs	r1, #1
    5f9e:	f007 ff6e 	bl	de7e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5fa2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5fa6:	6a20      	ldr	r0, [r4, #32]
    5fa8:	f007 ff2d 	bl	de06 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5fac:	e011      	b.n	5fd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5fae:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    5fb2:	f8ad 0004 	strh.w	r0, [sp, #4]
    5fb6:	466a      	mov	r2, sp
    5fb8:	a901      	add	r1, sp, #4
    5fba:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5fbc:	f007 fc15 	bl	d7ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5fc0:	6220      	str	r0, [r4, #32]
    5fc2:	b930      	cbnz	r0, 5fd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5fc4:	f240 219f 	movw	r1, #671	; 0x29f
    5fc8:	e01e      	b.n	6008 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5fca:	4648      	mov	r0, r9
    5fcc:	f7ff fa6e 	bl	54ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5fd0:	b1c0      	cbz	r0, 6004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
    5fd2:	6a20      	ldr	r0, [r4, #32]
    5fd4:	2308      	movs	r3, #8
    5fd6:	7801      	ldrb	r1, [r0, #0]
    5fd8:	f021 0108 	bic.w	r1, r1, #8
    5fdc:	7001      	strb	r1, [r0, #0]
    5fde:	79ea      	ldrb	r2, [r5, #7]
    5fe0:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5fe4:	4311      	orrs	r1, r2
    5fe6:	f021 0104 	bic.w	r1, r1, #4
    5fea:	7001      	strb	r1, [r0, #0]
    5fec:	7a2a      	ldrb	r2, [r5, #8]
    5fee:	2304      	movs	r3, #4
    5ff0:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5ff4:	4311      	orrs	r1, r2
    5ff6:	f021 0110 	bic.w	r1, r1, #16
    5ffa:	7001      	strb	r1, [r0, #0]
    5ffc:	43c9      	mvns	r1, r1
    5ffe:	0789      	lsls	r1, r1, #30
    6000:	d005      	beq.n	600e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
    6002:	e007      	b.n	6014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    6004:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    6008:	2027      	movs	r0, #39	; 0x27
    600a:	f7fe fb9d 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    600e:	78c0      	ldrb	r0, [r0, #3]
    6010:	2802      	cmp	r0, #2
    6012:	d00f      	beq.n	6034 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    6014:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6016:	f007 f878 	bl	d10a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    601a:	b108      	cbz	r0, 6020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    601c:	2101      	movs	r1, #1
    601e:	e00a      	b.n	6036 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    6020:	6a20      	ldr	r0, [r4, #32]
    6022:	7800      	ldrb	r0, [r0, #0]
    6024:	43c0      	mvns	r0, r0
    6026:	0780      	lsls	r0, r0, #30
    6028:	d004      	beq.n	6034 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    602a:	f7ff f9fd 	bl	5428 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    602e:	f080 0101 	eor.w	r1, r0, #1
    6032:	e000      	b.n	6036 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    6034:	2100      	movs	r1, #0
    6036:	6a20      	ldr	r0, [r4, #32]
    6038:	7802      	ldrb	r2, [r0, #0]
    603a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    603e:	7001      	strb	r1, [r0, #0]
    6040:	7ca9      	ldrb	r1, [r5, #18]
    6042:	b199      	cbz	r1, 606c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    6044:	7841      	ldrb	r1, [r0, #1]
    6046:	b189      	cbz	r1, 606c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    6048:	4814      	ldr	r0, [pc, #80]	; (609c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    604a:	f005 fbe1 	bl	b810 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    604e:	4812      	ldr	r0, [pc, #72]	; (6098 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    6050:	3828      	subs	r0, #40	; 0x28
    6052:	f880 8018 	strb.w	r8, [r0, #24]
    6056:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    605a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    605e:	480f      	ldr	r0, [pc, #60]	; (609c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    6060:	6a21      	ldr	r1, [r4, #32]
    6062:	f004 ffb1 	bl	afc8 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    6066:	f004 fffb 	bl	b060 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    606a:	e003      	b.n	6074 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    606c:	f005 fbd0 	bl	b810 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6070:	f004 ffd8 	bl	b024 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6074:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    6078:	2101      	movs	r1, #1
    607a:	2000      	movs	r0, #0
    607c:	f005 fc54 	bl	b928 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6080:	7127      	strb	r7, [r4, #4]
    6082:	6a20      	ldr	r0, [r4, #32]
    6084:	8801      	ldrh	r1, [r0, #0]
    6086:	8221      	strh	r1, [r4, #16]
    6088:	7880      	ldrb	r0, [r0, #2]
    608a:	74a0      	strb	r0, [r4, #18]
    608c:	7027      	strb	r7, [r4, #0]
    608e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6092:	0000      	.short	0x0000
    6094:	200000cc 	.word	0x200000cc
    6098:	20000f40 	.word	0x20000f40
    609c:	20000e10 	.word	0x20000e10
    60a0:	00005d21 	.word	0x00005d21
    60a4:	00005aa9 	.word	0x00005aa9
    60a8:	00005c1d 	.word	0x00005c1d
    60ac:	00005e89 	.word	0x00005e89

000060b0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    60b0:	4800      	ldr	r0, [pc, #0]	; (60b4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    60b2:	4770      	bx	lr
    60b4:	20001801 	.word	0x20001801

000060b8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    60b8:	4904      	ldr	r1, [pc, #16]	; (60cc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    60ba:	788a      	ldrb	r2, [r1, #2]
    60bc:	4282      	cmp	r2, r0
    60be:	d903      	bls.n	60c8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    60c0:	4408      	add	r0, r1
    60c2:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    60c6:	4770      	bx	lr
    60c8:	2000      	movs	r0, #0
    60ca:	4770      	bx	lr
    60cc:	2000162e 	.word	0x2000162e

000060d0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    60d0:	4904      	ldr	r1, [pc, #16]	; (60e4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    60d2:	788a      	ldrb	r2, [r1, #2]
    60d4:	4282      	cmp	r2, r0
    60d6:	d903      	bls.n	60e0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    60d8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    60dc:	3083      	adds	r0, #131	; 0x83
    60de:	4770      	bx	lr
    60e0:	2000      	movs	r0, #0
    60e2:	4770      	bx	lr
    60e4:	2000162e 	.word	0x2000162e

000060e8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    60e8:	4a05      	ldr	r2, [pc, #20]	; (6100 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    60ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    60ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    60f2:	6802      	ldr	r2, [r0, #0]
    60f4:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    60f8:	8880      	ldrh	r0, [r0, #4]
    60fa:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    60fe:	4770      	bx	lr
    6100:	2000162e 	.word	0x2000162e

00006104 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    6104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6108:	460e      	mov	r6, r1
    610a:	4607      	mov	r7, r0
    610c:	4615      	mov	r5, r2
    610e:	2106      	movs	r1, #6
    6110:	4630      	mov	r0, r6
    6112:	f007 fd59 	bl	dbc8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6116:	4c0d      	ldr	r4, [pc, #52]	; (614c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    6118:	b160      	cbz	r0, 6134 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    611a:	2000      	movs	r0, #0
    611c:	e004      	b.n	6128 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    611e:	1821      	adds	r1, r4, r0
    6120:	1c40      	adds	r0, r0, #1
    6122:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    6126:	b2c0      	uxtb	r0, r0
    6128:	78a1      	ldrb	r1, [r4, #2]
    612a:	4281      	cmp	r1, r0
    612c:	d8f7      	bhi.n	611e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    612e:	2001      	movs	r0, #1
    6130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6134:	4631      	mov	r1, r6
    6136:	4638      	mov	r0, r7
    6138:	f007 fb66 	bl	d808 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    613c:	2808      	cmp	r0, #8
    613e:	d003      	beq.n	6148 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6140:	4420      	add	r0, r4
    6142:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    6146:	e7f2      	b.n	612e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    6148:	2000      	movs	r0, #0
    614a:	e7f1      	b.n	6130 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    614c:	2000162e 	.word	0x2000162e

00006150 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6150:	4904      	ldr	r1, [pc, #16]	; (6164 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6152:	788a      	ldrb	r2, [r1, #2]
    6154:	4282      	cmp	r2, r0
    6156:	d903      	bls.n	6160 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6158:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    615c:	1cc0      	adds	r0, r0, #3
    615e:	4770      	bx	lr
    6160:	2000      	movs	r0, #0
    6162:	4770      	bx	lr
    6164:	2000162e 	.word	0x2000162e

00006168 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6168:	b510      	push	{r4, lr}
    616a:	f240 12d3 	movw	r2, #467	; 0x1d3
    616e:	2100      	movs	r1, #0
    6170:	4808      	ldr	r0, [pc, #32]	; (6194 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6172:	f006 f9c3 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6176:	2208      	movs	r2, #8
    6178:	21ff      	movs	r1, #255	; 0xff
    617a:	4807      	ldr	r0, [pc, #28]	; (6198 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    617c:	f006 f9be 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6180:	4805      	ldr	r0, [pc, #20]	; (6198 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6182:	2100      	movs	r1, #0
    6184:	1f00      	subs	r0, r0, #4
    6186:	7001      	strb	r1, [r0, #0]
    6188:	7041      	strb	r1, [r0, #1]
    618a:	f44f 7161 	mov.w	r1, #900	; 0x384
    618e:	8041      	strh	r1, [r0, #2]
    6190:	bd10      	pop	{r4, pc}
    6192:	0000      	.short	0x0000
    6194:	2000162e 	.word	0x2000162e
    6198:	20000280 	.word	0x20000280

0000619c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    619c:	4901      	ldr	r1, [pc, #4]	; (61a4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    619e:	7008      	strb	r0, [r1, #0]
    61a0:	4770      	bx	lr
    61a2:	0000      	.short	0x0000
    61a4:	2000027c 	.word	0x2000027c

000061a8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    61a8:	4801      	ldr	r0, [pc, #4]	; (61b0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    61aa:	7800      	ldrb	r0, [r0, #0]
    61ac:	4770      	bx	lr
    61ae:	0000      	.short	0x0000
    61b0:	2000027c 	.word	0x2000027c

000061b4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    61b4:	4b0b      	ldr	r3, [pc, #44]	; (61e4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    61b6:	b510      	push	{r4, lr}
    61b8:	789c      	ldrb	r4, [r3, #2]
    61ba:	4284      	cmp	r4, r0
    61bc:	d90f      	bls.n	61de <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    61be:	4418      	add	r0, r3
    61c0:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    61c4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    61c8:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    61cc:	700b      	strb	r3, [r1, #0]
    61ce:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    61d2:	6011      	str	r1, [r2, #0]
    61d4:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    61d8:	8090      	strh	r0, [r2, #4]
    61da:	2001      	movs	r0, #1
    61dc:	bd10      	pop	{r4, pc}
    61de:	2000      	movs	r0, #0
    61e0:	bd10      	pop	{r4, pc}
    61e2:	0000      	.short	0x0000
    61e4:	2000162e 	.word	0x2000162e

000061e8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    61e8:	4907      	ldr	r1, [pc, #28]	; (6208 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    61ea:	788a      	ldrb	r2, [r1, #2]
    61ec:	4282      	cmp	r2, r0
    61ee:	d909      	bls.n	6204 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    61f0:	4408      	add	r0, r1
    61f2:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    61f6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    61fa:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    61fe:	f000 0001 	and.w	r0, r0, #1
    6202:	4770      	bx	lr
    6204:	2000      	movs	r0, #0
    6206:	4770      	bx	lr
    6208:	2000162e 	.word	0x2000162e

0000620c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    620c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6210:	4698      	mov	r8, r3
    6212:	4691      	mov	r9, r2
    6214:	460c      	mov	r4, r1
    6216:	4605      	mov	r5, r0
    6218:	f000 f936 	bl	6488 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    621c:	4606      	mov	r6, r0
    621e:	2810      	cmp	r0, #16
    6220:	d006      	beq.n	6230 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6222:	f000 f901 	bl	6428 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6226:	2810      	cmp	r0, #16
    6228:	d002      	beq.n	6230 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    622a:	2012      	movs	r0, #18
    622c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6230:	4f18      	ldr	r7, [pc, #96]	; (6294 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    6232:	78b8      	ldrb	r0, [r7, #2]
    6234:	2808      	cmp	r0, #8
    6236:	d22a      	bcs.n	628e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6238:	2e10      	cmp	r6, #16
    623a:	d105      	bne.n	6248 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    623c:	2200      	movs	r2, #0
    623e:	4621      	mov	r1, r4
    6240:	4628      	mov	r0, r5
    6242:	f000 f905 	bl	6450 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6246:	4606      	mov	r6, r0
    6248:	78bc      	ldrb	r4, [r7, #2]
    624a:	2210      	movs	r2, #16
    624c:	1c60      	adds	r0, r4, #1
    624e:	70b8      	strb	r0, [r7, #2]
    6250:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6254:	1ce8      	adds	r0, r5, #3
    6256:	4649      	mov	r1, r9
    6258:	f007 fc1f 	bl	da9a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    625c:	f105 0083 	add.w	r0, r5, #131	; 0x83
    6260:	2210      	movs	r2, #16
    6262:	4641      	mov	r1, r8
    6264:	f007 fc19 	bl	da9a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6268:	2110      	movs	r1, #16
    626a:	4640      	mov	r0, r8
    626c:	f007 fcac 	bl	dbc8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6270:	443c      	add	r4, r7
    6272:	2110      	movs	r1, #16
    6274:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6278:	4648      	mov	r0, r9
    627a:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    627e:	f007 fca3 	bl	dbc8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6282:	77e0      	strb	r0, [r4, #31]
    6284:	f804 6c29 	strb.w	r6, [r4, #-41]
    6288:	2000      	movs	r0, #0
    628a:	73e0      	strb	r0, [r4, #15]
    628c:	e7ce      	b.n	622c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    628e:	2007      	movs	r0, #7
    6290:	e7cc      	b.n	622c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6292:	0000      	.short	0x0000
    6294:	2000162e 	.word	0x2000162e

00006298 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6298:	4806      	ldr	r0, [pc, #24]	; (62b4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    629a:	b510      	push	{r4, lr}
    629c:	7880      	ldrb	r0, [r0, #2]
    629e:	1e40      	subs	r0, r0, #1
    62a0:	b244      	sxtb	r4, r0
    62a2:	e004      	b.n	62ae <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    62a4:	b2e0      	uxtb	r0, r4
    62a6:	f000 f937 	bl	6518 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    62aa:	1e64      	subs	r4, r4, #1
    62ac:	b264      	sxtb	r4, r4
    62ae:	2c00      	cmp	r4, #0
    62b0:	daf8      	bge.n	62a4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    62b2:	bd10      	pop	{r4, pc}
    62b4:	2000162e 	.word	0x2000162e

000062b8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    62b8:	4801      	ldr	r0, [pc, #4]	; (62c0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    62ba:	8840      	ldrh	r0, [r0, #2]
    62bc:	4770      	bx	lr
    62be:	0000      	.short	0x0000
    62c0:	2000027c 	.word	0x2000027c

000062c4 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    62c4:	b138      	cbz	r0, 62d6 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    62c6:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    62ca:	4288      	cmp	r0, r1
    62cc:	d803      	bhi.n	62d6 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    62ce:	4903      	ldr	r1, [pc, #12]	; (62dc <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    62d0:	8048      	strh	r0, [r1, #2]
    62d2:	2001      	movs	r0, #1
    62d4:	4770      	bx	lr
    62d6:	2000      	movs	r0, #0
    62d8:	4770      	bx	lr
    62da:	0000      	.short	0x0000
    62dc:	2000027c 	.word	0x2000027c

000062e0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    62e0:	4905      	ldr	r1, [pc, #20]	; (62f8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    62e2:	788a      	ldrb	r2, [r1, #2]
    62e4:	4282      	cmp	r2, r0
    62e6:	d903      	bls.n	62f0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    62e8:	4408      	add	r0, r1
    62ea:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    62ee:	b108      	cbz	r0, 62f4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    62f0:	2000      	movs	r0, #0
    62f2:	4770      	bx	lr
    62f4:	2001      	movs	r0, #1
    62f6:	4770      	bx	lr
    62f8:	2000162e 	.word	0x2000162e

000062fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    62fc:	b570      	push	{r4, r5, r6, lr}
    62fe:	460d      	mov	r5, r1
    6300:	4606      	mov	r6, r0
    6302:	f000 f8c1 	bl	6488 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6306:	4c10      	ldr	r4, [pc, #64]	; (6348 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6308:	2810      	cmp	r0, #16
    630a:	d007      	beq.n	631c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    630c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6310:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6314:	07c9      	lsls	r1, r1, #31
    6316:	d001      	beq.n	631c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6318:	2001      	movs	r0, #1
    631a:	bd70      	pop	{r4, r5, r6, pc}
    631c:	7861      	ldrb	r1, [r4, #1]
    631e:	2908      	cmp	r1, #8
    6320:	d210      	bcs.n	6344 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6322:	2810      	cmp	r0, #16
    6324:	d008      	beq.n	6338 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6326:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    632a:	2101      	movs	r1, #1
    632c:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6330:	7860      	ldrb	r0, [r4, #1]
    6332:	1c40      	adds	r0, r0, #1
    6334:	7060      	strb	r0, [r4, #1]
    6336:	e7ef      	b.n	6318 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6338:	2201      	movs	r2, #1
    633a:	4629      	mov	r1, r5
    633c:	4630      	mov	r0, r6
    633e:	f000 f887 	bl	6450 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6342:	e7f5      	b.n	6330 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6344:	2000      	movs	r0, #0
    6346:	bd70      	pop	{r4, r5, r6, pc}
    6348:	2000162e 	.word	0x2000162e

0000634c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    634c:	b570      	push	{r4, r5, r6, lr}
    634e:	4d0b      	ldr	r5, [pc, #44]	; (637c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6350:	7828      	ldrb	r0, [r5, #0]
    6352:	1e40      	subs	r0, r0, #1
    6354:	b244      	sxtb	r4, r0
    6356:	e00a      	b.n	636e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6358:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    635c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6360:	07c0      	lsls	r0, r0, #31
    6362:	d002      	beq.n	636a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6364:	b2e0      	uxtb	r0, r4
    6366:	f000 f91f 	bl	65a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    636a:	1e64      	subs	r4, r4, #1
    636c:	b264      	sxtb	r4, r4
    636e:	2c00      	cmp	r4, #0
    6370:	daf2      	bge.n	6358 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6372:	4903      	ldr	r1, [pc, #12]	; (6380 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6374:	2000      	movs	r0, #0
    6376:	7048      	strb	r0, [r1, #1]
    6378:	bd70      	pop	{r4, r5, r6, pc}
    637a:	0000      	.short	0x0000
    637c:	2000162e 	.word	0x2000162e
    6380:	2000027c 	.word	0x2000027c

00006384 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6388:	2400      	movs	r4, #0
    638a:	4625      	mov	r5, r4
    638c:	4e18      	ldr	r6, [pc, #96]	; (63f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    638e:	e029      	b.n	63e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6390:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6394:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6398:	07c0      	lsls	r0, r0, #31
    639a:	d021      	beq.n	63e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    639c:	4628      	mov	r0, r5
    639e:	f000 f843 	bl	6428 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    63a2:	4603      	mov	r3, r0
    63a4:	f7ff fed4 	bl	6150 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    63a8:	4601      	mov	r1, r0
    63aa:	2000      	movs	r0, #0
    63ac:	2b10      	cmp	r3, #16
    63ae:	d009      	beq.n	63c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    63b0:	18f2      	adds	r2, r6, r3
    63b2:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    63b6:	f1bc 0f01 	cmp.w	ip, #1
    63ba:	d002      	beq.n	63c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    63bc:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    63c0:	b102      	cbz	r2, 63c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    63c2:	2001      	movs	r0, #1
    63c4:	1e40      	subs	r0, r0, #1
    63c6:	4201      	tst	r1, r0
    63c8:	d10a      	bne.n	63e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    63ca:	480a      	ldr	r0, [pc, #40]	; (63f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    63cc:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    63d0:	5503      	strb	r3, [r0, r4]
    63d2:	4620      	mov	r0, r4
    63d4:	1c64      	adds	r4, r4, #1
    63d6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    63da:	b2e4      	uxtb	r4, r4
    63dc:	f005 fbcc 	bl	bb78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    63e0:	1c6d      	adds	r5, r5, #1
    63e2:	b2ed      	uxtb	r5, r5
    63e4:	7830      	ldrb	r0, [r6, #0]
    63e6:	42a8      	cmp	r0, r5
    63e8:	d8d2      	bhi.n	6390 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    63ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63ee:	0000      	.short	0x0000
    63f0:	2000162e 	.word	0x2000162e
    63f4:	20000280 	.word	0x20000280
    63f8:	4602      	mov	r2, r0
    63fa:	4809      	ldr	r0, [pc, #36]	; (6420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    63fc:	b510      	push	{r4, lr}
    63fe:	7800      	ldrb	r0, [r0, #0]
    6400:	460b      	mov	r3, r1
    6402:	b158      	cbz	r0, 641c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6404:	4807      	ldr	r0, [pc, #28]	; (6424 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6406:	7881      	ldrb	r1, [r0, #2]
    6408:	b141      	cbz	r1, 641c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    640a:	b10b      	cbz	r3, 6410 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    640c:	1cc0      	adds	r0, r0, #3
    640e:	e001      	b.n	6414 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6410:	4804      	ldr	r0, [pc, #16]	; (6424 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6412:	3083      	adds	r0, #131	; 0x83
    6414:	f004 fcfa 	bl	ae0c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6418:	2001      	movs	r0, #1
    641a:	bd10      	pop	{r4, pc}
    641c:	2000      	movs	r0, #0
    641e:	bd10      	pop	{r4, pc}
    6420:	2000027c 	.word	0x2000027c
    6424:	2000162e 	.word	0x2000162e
    6428:	4908      	ldr	r1, [pc, #32]	; (644c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    642a:	b510      	push	{r4, lr}
    642c:	4603      	mov	r3, r0
    642e:	2000      	movs	r0, #0
    6430:	788a      	ldrb	r2, [r1, #2]
    6432:	e006      	b.n	6442 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6434:	180c      	adds	r4, r1, r0
    6436:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    643a:	429c      	cmp	r4, r3
    643c:	d004      	beq.n	6448 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    643e:	1c40      	adds	r0, r0, #1
    6440:	b2c0      	uxtb	r0, r0
    6442:	4282      	cmp	r2, r0
    6444:	d8f6      	bhi.n	6434 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    6446:	2010      	movs	r0, #16
    6448:	bd10      	pop	{r4, pc}
    644a:	0000      	.short	0x0000
    644c:	2000162e 	.word	0x2000162e
    6450:	b570      	push	{r4, r5, r6, lr}
    6452:	4b0c      	ldr	r3, [pc, #48]	; (6484 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6454:	4604      	mov	r4, r0
    6456:	7818      	ldrb	r0, [r3, #0]
    6458:	1c45      	adds	r5, r0, #1
    645a:	701d      	strb	r5, [r3, #0]
    645c:	2810      	cmp	r0, #16
    645e:	d303      	bcc.n	6468 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    6460:	2146      	movs	r1, #70	; 0x46
    6462:	2028      	movs	r0, #40	; 0x28
    6464:	f7fe f970 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6468:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    646c:	680d      	ldr	r5, [r1, #0]
    646e:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    6472:	8889      	ldrh	r1, [r1, #4]
    6474:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6478:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    647c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6480:	bd70      	pop	{r4, r5, r6, pc}
    6482:	0000      	.short	0x0000
    6484:	2000162e 	.word	0x2000162e
    6488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    648c:	460f      	mov	r7, r1
    648e:	4606      	mov	r6, r0
    6490:	2400      	movs	r4, #0
    6492:	4d0d      	ldr	r5, [pc, #52]	; (64c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    6494:	e00f      	b.n	64b6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    6496:	bf00      	nop
    6498:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    649c:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    64a0:	42b1      	cmp	r1, r6
    64a2:	d106      	bne.n	64b2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    64a4:	2206      	movs	r2, #6
    64a6:	4639      	mov	r1, r7
    64a8:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    64ac:	f005 ff9a 	bl	c3e4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    64b0:	b138      	cbz	r0, 64c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    64b2:	1c64      	adds	r4, r4, #1
    64b4:	b2e4      	uxtb	r4, r4
    64b6:	7828      	ldrb	r0, [r5, #0]
    64b8:	42a0      	cmp	r0, r4
    64ba:	d8ed      	bhi.n	6498 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    64bc:	2010      	movs	r0, #16
    64be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64c2:	4620      	mov	r0, r4
    64c4:	e7fb      	b.n	64be <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    64c6:	0000      	.short	0x0000
    64c8:	2000162e 	.word	0x2000162e
    64cc:	b570      	push	{r4, r5, r6, lr}
    64ce:	4605      	mov	r5, r0
    64d0:	f7ff ffaa 	bl	6428 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    64d4:	2810      	cmp	r0, #16
    64d6:	d11c      	bne.n	6512 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    64d8:	4c0e      	ldr	r4, [pc, #56]	; (6514 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    64da:	7820      	ldrb	r0, [r4, #0]
    64dc:	1e40      	subs	r0, r0, #1
    64de:	b2c0      	uxtb	r0, r0
    64e0:	7020      	strb	r0, [r4, #0]
    64e2:	42a8      	cmp	r0, r5
    64e4:	d015      	beq.n	6512 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    64e6:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    64ea:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    64ee:	f502 7080 	add.w	r0, r2, #256	; 0x100
    64f2:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    64f6:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    64fa:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    64fe:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6502:	7820      	ldrb	r0, [r4, #0]
    6504:	f7ff ff90 	bl	6428 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6508:	2810      	cmp	r0, #16
    650a:	d002      	beq.n	6512 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    650c:	4420      	add	r0, r4
    650e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6512:	bd70      	pop	{r4, r5, r6, pc}
    6514:	2000162e 	.word	0x2000162e
    6518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    651c:	4c21      	ldr	r4, [pc, #132]	; (65a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    651e:	4606      	mov	r6, r0
    6520:	19a7      	adds	r7, r4, r6
    6522:	78a0      	ldrb	r0, [r4, #2]
    6524:	1e40      	subs	r0, r0, #1
    6526:	b2c5      	uxtb	r5, r0
    6528:	70a5      	strb	r5, [r4, #2]
    652a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    652e:	42ae      	cmp	r6, r5
    6530:	d02a      	beq.n	6588 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    6532:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6536:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    653a:	f10a 0103 	add.w	r1, sl, #3
    653e:	f109 0003 	add.w	r0, r9, #3
    6542:	2210      	movs	r2, #16
    6544:	f005 ff60 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6548:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    654c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6550:	2210      	movs	r2, #16
    6552:	f005 ff59 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6556:	1960      	adds	r0, r4, r5
    6558:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    655c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6560:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6564:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6568:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    656c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6570:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6574:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6578:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    657c:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6580:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6584:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6588:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    658c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6590:	07c0      	lsls	r0, r0, #31
    6592:	d104      	bne.n	659e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    6594:	4640      	mov	r0, r8
    6596:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    659a:	f7ff bf97 	b.w	64cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    659e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65a2:	0000      	.short	0x0000
    65a4:	2000162e 	.word	0x2000162e
    65a8:	4905      	ldr	r1, [pc, #20]	; (65c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    65aa:	784a      	ldrb	r2, [r1, #1]
    65ac:	1e52      	subs	r2, r2, #1
    65ae:	704a      	strb	r2, [r1, #1]
    65b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    65b4:	2200      	movs	r2, #0
    65b6:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    65ba:	f7ff bf87 	b.w	64cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    65be:	0000      	.short	0x0000
    65c0:	2000162e 	.word	0x2000162e

000065c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    65c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65c8:	4604      	mov	r4, r0
    65ca:	f100 0570 	add.w	r5, r0, #112	; 0x70
    65ce:	f04f 0901 	mov.w	r9, #1
    65d2:	b171      	cbz	r1, 65f2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    65d4:	f104 0786 	add.w	r7, r4, #134	; 0x86
    65d8:	1e7e      	subs	r6, r7, #1
    65da:	2901      	cmp	r1, #1
    65dc:	d021      	beq.n	6622 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    65de:	2902      	cmp	r1, #2
    65e0:	d046      	beq.n	6670 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    65e2:	2903      	cmp	r1, #3
    65e4:	d11b      	bne.n	661e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    65e6:	4639      	mov	r1, r7
    65e8:	4630      	mov	r0, r6
    65ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65ee:	f007 bb1b 	b.w	dc28 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    65f2:	f44f 7206 	mov.w	r2, #536	; 0x218
    65f6:	2100      	movs	r1, #0
    65f8:	f005 ff80 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    65fc:	f004 fbdc 	bl	adb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6600:	f644 112b 	movw	r1, #18731	; 0x492b
    6604:	4008      	ands	r0, r1
    6606:	f885 9015 	strb.w	r9, [r5, #21]
    660a:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    660e:	0a00      	lsrs	r0, r0, #8
    6610:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    6614:	20fe      	movs	r0, #254	; 0xfe
    6616:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    661a:	207f      	movs	r0, #127	; 0x7f
    661c:	7268      	strb	r0, [r5, #9]
    661e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6622:	f04f 0800 	mov.w	r8, #0
    6626:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
    662a:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
    662e:	68e1      	ldr	r1, [r4, #12]
    6630:	4814      	ldr	r0, [pc, #80]	; (6684 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    6632:	460a      	mov	r2, r1
    6634:	4408      	add	r0, r1
    6636:	fbb0 f0f1 	udiv	r0, r0, r1
    663a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    663e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6642:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    6646:	8ae3      	ldrh	r3, [r4, #22]
    6648:	4628      	mov	r0, r5
    664a:	f000 f81d 	bl	6688 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    664e:	4639      	mov	r1, r7
    6650:	4630      	mov	r0, r6
    6652:	f007 fae9 	bl	dc28 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6656:	f005 fea1 	bl	c39c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    665a:	b118      	cbz	r0, 6664 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    665c:	6920      	ldr	r0, [r4, #16]
    665e:	f000 fb65 	bl	6d2c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6662:	b110      	cbz	r0, 666a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    6664:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    6668:	e7d9      	b.n	661e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    666a:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    666e:	e7d6      	b.n	661e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6670:	68c1      	ldr	r1, [r0, #12]
    6672:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
    6676:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    667a:	4628      	mov	r0, r5
    667c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6680:	f000 b802 	b.w	6688 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    6684:	01c9c37f 	.word	0x01c9c37f
    6688:	b530      	push	{r4, r5, lr}
    668a:	2400      	movs	r4, #0
    668c:	8684      	strh	r4, [r0, #52]	; 0x34
    668e:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    6690:	4d13      	ldr	r5, [pc, #76]	; (66e0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    6692:	434c      	muls	r4, r1
    6694:	fbb4 f4f2 	udiv	r4, r4, r2
    6698:	8704      	strh	r4, [r0, #56]	; 0x38
    669a:	f242 7410 	movw	r4, #10000	; 0x2710
    669e:	4363      	muls	r3, r4
    66a0:	fbb3 f3f2 	udiv	r3, r3, r2
    66a4:	1c5b      	adds	r3, r3, #1
    66a6:	b29b      	uxth	r3, r3
    66a8:	fb03 f402 	mul.w	r4, r3, r2
    66ac:	86c3      	strh	r3, [r0, #54]	; 0x36
    66ae:	42ac      	cmp	r4, r5
    66b0:	d901      	bls.n	66b6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    66b2:	1e5b      	subs	r3, r3, #1
    66b4:	86c3      	strh	r3, [r0, #54]	; 0x36
    66b6:	4b0b      	ldr	r3, [pc, #44]	; (66e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    66b8:	f240 2471 	movw	r4, #625	; 0x271
    66bc:	fbb3 f3f2 	udiv	r3, r3, r2
    66c0:	1c5b      	adds	r3, r3, #1
    66c2:	8783      	strh	r3, [r0, #60]	; 0x3c
    66c4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    66c6:	4363      	muls	r3, r4
    66c8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    66cc:	1e5b      	subs	r3, r3, #1
    66ce:	fbb3 f3f2 	udiv	r3, r3, r2
    66d2:	62c3      	str	r3, [r0, #44]	; 0x2c
    66d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    66d6:	434b      	muls	r3, r1
    66d8:	fbb3 f1f2 	udiv	r1, r3, r2
    66dc:	6281      	str	r1, [r0, #40]	; 0x28
    66de:	bd30      	pop	{r4, r5, pc}
    66e0:	01e84800 	.word	0x01e84800
    66e4:	02625a00 	.word	0x02625a00

000066e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    66e8:	b570      	push	{r4, r5, r6, lr}
    66ea:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    66ee:	b28b      	uxth	r3, r1
    66f0:	7ac5      	ldrb	r5, [r0, #11]
    66f2:	ea83 0102 	eor.w	r1, r3, r2
    66f6:	2200      	movs	r2, #0
    66f8:	b2cc      	uxtb	r4, r1
    66fa:	0a09      	lsrs	r1, r1, #8
    66fc:	fa94 f4a4 	rbit	r4, r4
    6700:	fa91 f1a1 	rbit	r1, r1
    6704:	0e24      	lsrs	r4, r4, #24
    6706:	0e09      	lsrs	r1, r1, #24
    6708:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    670c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6710:	1c52      	adds	r2, r2, #1
    6712:	4419      	add	r1, r3
    6714:	b2d2      	uxtb	r2, r2
    6716:	b289      	uxth	r1, r1
    6718:	2a03      	cmp	r2, #3
    671a:	d3ed      	bcc.n	66f8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    671c:	4059      	eors	r1, r3
    671e:	2225      	movs	r2, #37	; 0x25
    6720:	fbb1 f3f2 	udiv	r3, r1, r2
    6724:	fb02 1213 	mls	r2, r2, r3, r1
    6728:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    672c:	f002 0607 	and.w	r6, r2, #7
    6730:	785b      	ldrb	r3, [r3, #1]
    6732:	2401      	movs	r4, #1
    6734:	fa04 f606 	lsl.w	r6, r4, r6
    6738:	4233      	tst	r3, r6
    673a:	d001      	beq.n	6740 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    673c:	4610      	mov	r0, r2
    673e:	bd70      	pop	{r4, r5, r6, pc}
    6740:	434d      	muls	r5, r1
    6742:	0c29      	lsrs	r1, r5, #16
    6744:	1c49      	adds	r1, r1, #1
    6746:	b2c9      	uxtb	r1, r1
    6748:	2200      	movs	r2, #0
    674a:	1885      	adds	r5, r0, r2
    674c:	79ab      	ldrb	r3, [r5, #6]
    674e:	428b      	cmp	r3, r1
    6750:	d312      	bcc.n	6778 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6752:	f895 5001 	ldrb.w	r5, [r5, #1]
    6756:	2300      	movs	r3, #0
    6758:	fa04 f603 	lsl.w	r6, r4, r3
    675c:	4235      	tst	r5, r6
    675e:	d001      	beq.n	6764 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6760:	1e49      	subs	r1, r1, #1
    6762:	b2c9      	uxtb	r1, r1
    6764:	b121      	cbz	r1, 6770 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6766:	1c5b      	adds	r3, r3, #1
    6768:	b2db      	uxtb	r3, r3
    676a:	2b08      	cmp	r3, #8
    676c:	d3f4      	bcc.n	6758 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    676e:	e005      	b.n	677c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6770:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6774:	b2c0      	uxtb	r0, r0
    6776:	bd70      	pop	{r4, r5, r6, pc}
    6778:	1ac9      	subs	r1, r1, r3
    677a:	b2c9      	uxtb	r1, r1
    677c:	1c52      	adds	r2, r2, #1
    677e:	b2d2      	uxtb	r2, r2
    6780:	2a05      	cmp	r2, #5
    6782:	d3e2      	bcc.n	674a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6784:	f240 110d 	movw	r1, #269	; 0x10d
    6788:	2046      	movs	r0, #70	; 0x46
    678a:	f7fd ffdd 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    678e:	0000      	movs	r0, r0
    6790:	b570      	push	{r4, r5, r6, lr}
    6792:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6796:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    679a:	2401      	movs	r4, #1
    679c:	fb03 2101 	mla	r1, r3, r1, r2
    67a0:	2225      	movs	r2, #37	; 0x25
    67a2:	fbb1 f3f2 	udiv	r3, r1, r2
    67a6:	fb02 1113 	mls	r1, r2, r3, r1
    67aa:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    67ae:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    67b2:	f001 0307 	and.w	r3, r1, #7
    67b6:	7d92      	ldrb	r2, [r2, #22]
    67b8:	fa04 f303 	lsl.w	r3, r4, r3
    67bc:	421a      	tst	r2, r3
    67be:	d003      	beq.n	67c8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    67c0:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    67c4:	2000      	movs	r0, #0
    67c6:	bd70      	pop	{r4, r5, r6, pc}
    67c8:	f890 2020 	ldrb.w	r2, [r0, #32]
    67cc:	fbb1 f3f2 	udiv	r3, r1, r2
    67d0:	fb02 1113 	mls	r1, r2, r3, r1
    67d4:	1c49      	adds	r1, r1, #1
    67d6:	b2c9      	uxtb	r1, r1
    67d8:	2300      	movs	r3, #0
    67da:	18c5      	adds	r5, r0, r3
    67dc:	7eea      	ldrb	r2, [r5, #27]
    67de:	428a      	cmp	r2, r1
    67e0:	d311      	bcc.n	6806 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    67e2:	f895 5016 	ldrb.w	r5, [r5, #22]
    67e6:	2200      	movs	r2, #0
    67e8:	fa04 f602 	lsl.w	r6, r4, r2
    67ec:	4235      	tst	r5, r6
    67ee:	d001      	beq.n	67f4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    67f0:	1e49      	subs	r1, r1, #1
    67f2:	b2c9      	uxtb	r1, r1
    67f4:	b121      	cbz	r1, 6800 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    67f6:	1c52      	adds	r2, r2, #1
    67f8:	b2d2      	uxtb	r2, r2
    67fa:	2a08      	cmp	r2, #8
    67fc:	d3f4      	bcc.n	67e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    67fe:	e004      	b.n	680a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6800:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6804:	e7dc      	b.n	67c0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6806:	1a89      	subs	r1, r1, r2
    6808:	b2c9      	uxtb	r1, r1
    680a:	1c5b      	adds	r3, r3, #1
    680c:	b2db      	uxtb	r3, r3
    680e:	2b05      	cmp	r3, #5
    6810:	d3e3      	bcc.n	67da <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6812:	201f      	movs	r0, #31
    6814:	bd70      	pop	{r4, r5, r6, pc}
	...

00006818 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6818:	7841      	ldrb	r1, [r0, #1]
    681a:	b141      	cbz	r1, 682e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    681c:	78c0      	ldrb	r0, [r0, #3]
    681e:	2819      	cmp	r0, #25
    6820:	d203      	bcs.n	682a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6822:	4a04      	ldr	r2, [pc, #16]	; (6834 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6824:	5c10      	ldrb	r0, [r2, r0]
    6826:	4288      	cmp	r0, r1
    6828:	d101      	bne.n	682e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    682a:	2001      	movs	r0, #1
    682c:	4770      	bx	lr
    682e:	2000      	movs	r0, #0
    6830:	4770      	bx	lr
    6832:	0000      	.short	0x0000
    6834:	000102de 	.word	0x000102de

00006838 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    6838:	b50c      	push	{r2, r3, lr}
    683a:	a20b      	add	r2, pc, #44	; (adr r2, 6868 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    683c:	e9d2 1200 	ldrd	r1, r2, [r2]
    6840:	e9cd 1200 	strd	r1, r2, [sp]
    6844:	7901      	ldrb	r1, [r0, #4]
    6846:	7940      	ldrb	r0, [r0, #5]
    6848:	f001 0207 	and.w	r2, r1, #7
    684c:	4669      	mov	r1, sp
    684e:	f81d 2002 	ldrb.w	r2, [sp, r2]
    6852:	2a01      	cmp	r2, #1
    6854:	d804      	bhi.n	6860 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    6856:	f000 0007 	and.w	r0, r0, #7
    685a:	5c08      	ldrb	r0, [r1, r0]
    685c:	2801      	cmp	r0, #1
    685e:	d901      	bls.n	6864 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    6860:	2000      	movs	r0, #0
    6862:	bd0c      	pop	{r2, r3, pc}
    6864:	2001      	movs	r0, #1
    6866:	bd0c      	pop	{r2, r3, pc}
    6868:	02010100 	.word	0x02010100
    686c:	03020201 	.word	0x03020201

00006870 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6870:	b510      	push	{r4, lr}
    6872:	2201      	movs	r2, #1
    6874:	70c1      	strb	r1, [r0, #3]
    6876:	2919      	cmp	r1, #25
    6878:	d202      	bcs.n	6880 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    687a:	4a06      	ldr	r2, [pc, #24]	; (6894 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    687c:	5c52      	ldrb	r2, [r2, r1]
    687e:	e006      	b.n	688e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6880:	29ff      	cmp	r1, #255	; 0xff
    6882:	d004      	beq.n	688e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6884:	f240 31d5 	movw	r1, #981	; 0x3d5
    6888:	202a      	movs	r0, #42	; 0x2a
    688a:	f7fd ff5d 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    688e:	7042      	strb	r2, [r0, #1]
    6890:	bd10      	pop	{r4, pc}
    6892:	0000      	.short	0x0000
    6894:	000102de 	.word	0x000102de

00006898 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    689c:	4c12      	ldr	r4, [pc, #72]	; (68e8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    689e:	4607      	mov	r7, r0
    68a0:	460e      	mov	r6, r1
    68a2:	7da0      	ldrb	r0, [r4, #22]
    68a4:	b110      	cbz	r0, 68ac <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    68a6:	8b20      	ldrh	r0, [r4, #24]
    68a8:	2800      	cmp	r0, #0
    68aa:	d012      	beq.n	68d2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    68ac:	480e      	ldr	r0, [pc, #56]	; (68e8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    68ae:	3014      	adds	r0, #20
    68b0:	4680      	mov	r8, r0
    68b2:	f007 fb63 	bl	df7c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    68b6:	b9a8      	cbnz	r0, 68e4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    68b8:	8aa5      	ldrh	r5, [r4, #20]
    68ba:	8aa0      	ldrh	r0, [r4, #20]
    68bc:	4632      	mov	r2, r6
    68be:	4639      	mov	r1, r7
    68c0:	f007 fba0 	bl	e004 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    68c4:	b138      	cbz	r0, 68d6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    68c6:	7da0      	ldrb	r0, [r4, #22]
    68c8:	b110      	cbz	r0, 68d0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    68ca:	8b20      	ldrh	r0, [r4, #24]
    68cc:	1e40      	subs	r0, r0, #1
    68ce:	8320      	strh	r0, [r4, #24]
    68d0:	2001      	movs	r0, #1
    68d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68d6:	4640      	mov	r0, r8
    68d8:	f007 fb50 	bl	df7c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    68dc:	b910      	cbnz	r0, 68e4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    68de:	8aa0      	ldrh	r0, [r4, #20]
    68e0:	42a8      	cmp	r0, r5
    68e2:	d1ea      	bne.n	68ba <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    68e4:	2000      	movs	r0, #0
    68e6:	e7f4      	b.n	68d2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    68e8:	20001388 	.word	0x20001388
    68ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    68f0:	468a      	mov	sl, r1
    68f2:	4699      	mov	r9, r3
    68f4:	4615      	mov	r5, r2
    68f6:	4604      	mov	r4, r0
    68f8:	a901      	add	r1, sp, #4
    68fa:	f006 ffc8 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    68fe:	bbe0      	cbnz	r0, 697a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    6900:	9f02      	ldr	r7, [sp, #8]
    6902:	f04f 0800 	mov.w	r8, #0
    6906:	3770      	adds	r7, #112	; 0x70
    6908:	b18d      	cbz	r5, 692e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    690a:	4620      	mov	r0, r4
    690c:	f7fe fb4c 	bl	4fa8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6910:	0004      	movs	r4, r0
    6912:	d00f      	beq.n	6934 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    6914:	4629      	mov	r1, r5
    6916:	f006 fbca 	bl	d0ae <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    691a:	0006      	movs	r6, r0
    691c:	d003      	beq.n	6926 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    691e:	481d      	ldr	r0, [pc, #116]	; (6994 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    6920:	8840      	ldrh	r0, [r0, #2]
    6922:	42a8      	cmp	r0, r5
    6924:	d208      	bcs.n	6938 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    6926:	2000      	movs	r0, #0
    6928:	b004      	add	sp, #16
    692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    692e:	2001      	movs	r0, #1
    6930:	7538      	strb	r0, [r7, #20]
    6932:	e029      	b.n	6988 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6934:	216e      	movs	r1, #110	; 0x6e
    6936:	e02a      	b.n	698e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    6938:	4620      	mov	r0, r4
    693a:	4631      	mov	r1, r6
    693c:	aa03      	add	r2, sp, #12
    693e:	f006 fbaf 	bl	d0a0 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6942:	9803      	ldr	r0, [sp, #12]
    6944:	f8a0 8000 	strh.w	r8, [r0]
    6948:	f880 8002 	strb.w	r8, [r0, #2]
    694c:	7d39      	ldrb	r1, [r7, #20]
    694e:	b109      	cbz	r1, 6954 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6950:	f04f 0a02 	mov.w	sl, #2
    6954:	4651      	mov	r1, sl
    6956:	f007 fa92 	bl	de7e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    695a:	4631      	mov	r1, r6
    695c:	2603      	movs	r6, #3
    695e:	4620      	mov	r0, r4
    6960:	464a      	mov	r2, r9
    6962:	462b      	mov	r3, r5
    6964:	9600      	str	r6, [sp, #0]
    6966:	f006 fa81 	bl	ce6c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    696a:	4620      	mov	r0, r4
    696c:	4629      	mov	r1, r5
    696e:	f006 fb3b 	bl	cfe8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6972:	b158      	cbz	r0, 698c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    6974:	4644      	mov	r4, r8
    6976:	a801      	add	r0, sp, #4
    6978:	e000      	b.n	697c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    697a:	e005      	b.n	6988 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    697c:	f007 fb1f 	bl	dfbe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6980:	9802      	ldr	r0, [sp, #8]
    6982:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
    6986:	753c      	strb	r4, [r7, #20]
    6988:	2001      	movs	r0, #1
    698a:	e7cd      	b.n	6928 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    698c:	2184      	movs	r1, #132	; 0x84
    698e:	202b      	movs	r0, #43	; 0x2b
    6990:	f7fd feda 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6994:	20001388 	.word	0x20001388

00006998 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6998:	4901      	ldr	r1, [pc, #4]	; (69a0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    699a:	2001      	movs	r0, #1
    699c:	7008      	strb	r0, [r1, #0]
    699e:	4770      	bx	lr
    69a0:	20000289 	.word	0x20000289

000069a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    69a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69a8:	0006      	movs	r6, r0
    69aa:	d00a      	beq.n	69c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    69ac:	4825      	ldr	r0, [pc, #148]	; (6a44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    69ae:	7801      	ldrb	r1, [r0, #0]
    69b0:	b151      	cbz	r1, 69c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    69b2:	2100      	movs	r1, #0
    69b4:	7071      	strb	r1, [r6, #1]
    69b6:	2203      	movs	r2, #3
    69b8:	7032      	strb	r2, [r6, #0]
    69ba:	2201      	movs	r2, #1
    69bc:	7132      	strb	r2, [r6, #4]
    69be:	7001      	strb	r1, [r0, #0]
    69c0:	e03a      	b.n	6a38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    69c2:	f240 21da 	movw	r1, #730	; 0x2da
    69c6:	e009      	b.n	69dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    69c8:	4c1e      	ldr	r4, [pc, #120]	; (6a44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    69ca:	1ce4      	adds	r4, r4, #3
    69cc:	7820      	ldrb	r0, [r4, #0]
    69ce:	b940      	cbnz	r0, 69e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    69d0:	1ca0      	adds	r0, r4, #2
    69d2:	f007 fb60 	bl	e096 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    69d6:	b120      	cbz	r0, 69e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    69d8:	f240 21e9 	movw	r1, #745	; 0x2e9
    69dc:	2010      	movs	r0, #16
    69de:	f7fd feb3 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69e2:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    69e6:	2000      	movs	r0, #0
    69e8:	f7fe f898 	bl	4b1c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    69ec:	4f16      	ldr	r7, [pc, #88]	; (6a48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    69ee:	4605      	mov	r5, r0
    69f0:	6838      	ldr	r0, [r7, #0]
    69f2:	b160      	cbz	r0, 6a0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    69f4:	8860      	ldrh	r0, [r4, #2]
    69f6:	42a8      	cmp	r0, r5
    69f8:	d309      	bcc.n	6a0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    69fa:	1b40      	subs	r0, r0, r5
    69fc:	b2c0      	uxtb	r0, r0
    69fe:	2101      	movs	r1, #1
    6a00:	f006 fcfd 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6a04:	b158      	cbz	r0, 6a1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6a06:	4631      	mov	r1, r6
    6a08:	f000 f84e 	bl	6aa8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    6a0c:	e006      	b.n	6a1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    6a0e:	480f      	ldr	r0, [pc, #60]	; (6a4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    6a10:	6800      	ldr	r0, [r0, #0]
    6a12:	b120      	cbz	r0, 6a1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6a14:	8860      	ldrh	r0, [r4, #2]
    6a16:	4631      	mov	r1, r6
    6a18:	f000 f8de 	bl	6bd8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    6a1c:	b960      	cbnz	r0, 6a38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6a1e:	1ca0      	adds	r0, r4, #2
    6a20:	f007 fb39 	bl	e096 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6a24:	b910      	cbnz	r0, 6a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    6a26:	8861      	ldrh	r1, [r4, #2]
    6a28:	4541      	cmp	r1, r8
    6a2a:	d1e1      	bne.n	69f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    6a2c:	4808      	ldr	r0, [pc, #32]	; (6a50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    6a2e:	6801      	ldr	r1, [r0, #0]
    6a30:	b129      	cbz	r1, 6a3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6a32:	4630      	mov	r0, r6
    6a34:	4788      	blx	r1
    6a36:	b110      	cbz	r0, 6a3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6a38:	2001      	movs	r0, #1
    6a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a3e:	2000      	movs	r0, #0
    6a40:	e7fb      	b.n	6a3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    6a42:	0000      	.short	0x0000
    6a44:	20000289 	.word	0x20000289
    6a48:	200000ec 	.word	0x200000ec
    6a4c:	200000f0 	.word	0x200000f0
    6a50:	200000f4 	.word	0x200000f4

00006a54 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6a54:	4901      	ldr	r1, [pc, #4]	; (6a5c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    6a56:	7008      	strb	r0, [r1, #0]
    6a58:	f000 b95c 	b.w	6d14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    6a5c:	20000288 	.word	0x20000288

00006a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6a60:	4801      	ldr	r0, [pc, #4]	; (6a68 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6a62:	7800      	ldrb	r0, [r0, #0]
    6a64:	f7fd bc94 	b.w	4390 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6a68:	20000288 	.word	0x20000288

00006a6c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6a6c:	4902      	ldr	r1, [pc, #8]	; (6a78 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6a6e:	4801      	ldr	r0, [pc, #4]	; (6a74 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6a70:	6008      	str	r0, [r1, #0]
    6a72:	4770      	bx	lr
    6a74:	00006e81 	.word	0x00006e81
    6a78:	200000ec 	.word	0x200000ec

00006a7c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6a7c:	4905      	ldr	r1, [pc, #20]	; (6a94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6a7e:	4804      	ldr	r0, [pc, #16]	; (6a90 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6a80:	6008      	str	r0, [r1, #0]
    6a82:	4906      	ldr	r1, [pc, #24]	; (6a9c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6a84:	4804      	ldr	r0, [pc, #16]	; (6a98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    6a86:	6008      	str	r0, [r1, #0]
    6a88:	4906      	ldr	r1, [pc, #24]	; (6aa4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    6a8a:	4805      	ldr	r0, [pc, #20]	; (6aa0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6a8c:	6008      	str	r0, [r1, #0]
    6a8e:	4770      	bx	lr
    6a90:	00006e81 	.word	0x00006e81
    6a94:	200000ec 	.word	0x200000ec
    6a98:	00008545 	.word	0x00008545
    6a9c:	200000f0 	.word	0x200000f0
    6aa0:	000055e1 	.word	0x000055e1
    6aa4:	200000f4 	.word	0x200000f4
    6aa8:	b570      	push	{r4, r5, r6, lr}
    6aaa:	0005      	movs	r5, r0
    6aac:	460c      	mov	r4, r1
    6aae:	d02e      	beq.n	6b0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    6ab0:	4818      	ldr	r0, [pc, #96]	; (6b14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
    6ab2:	6802      	ldr	r2, [r0, #0]
    6ab4:	b35a      	cbz	r2, 6b0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    6ab6:	4628      	mov	r0, r5
    6ab8:	4790      	blx	r2
    6aba:	b340      	cbz	r0, 6b0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    6abc:	7820      	ldrb	r0, [r4, #0]
    6abe:	2811      	cmp	r0, #17
    6ac0:	d002      	beq.n	6ac8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    6ac2:	2814      	cmp	r0, #20
    6ac4:	d003      	beq.n	6ace <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    6ac6:	e020      	b.n	6b0a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6ac8:	7920      	ldrb	r0, [r4, #4]
    6aca:	b1f0      	cbz	r0, 6b0a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6acc:	e00a      	b.n	6ae4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    6ace:	7920      	ldrb	r0, [r4, #4]
    6ad0:	b120      	cbz	r0, 6adc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    6ad2:	4628      	mov	r0, r5
    6ad4:	f007 fcf3 	bl	e4be <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6ad8:	b120      	cbz	r0, 6ae4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    6ada:	e016      	b.n	6b0a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6adc:	490e      	ldr	r1, [pc, #56]	; (6b18 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
    6ade:	2000      	movs	r0, #0
    6ae0:	7008      	strb	r0, [r1, #0]
    6ae2:	e012      	b.n	6b0a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6ae4:	88e4      	ldrh	r4, [r4, #6]
    6ae6:	2100      	movs	r1, #0
    6ae8:	4620      	mov	r0, r4
    6aea:	f006 fc88 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6aee:	b160      	cbz	r0, 6b0a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6af0:	8800      	ldrh	r0, [r0, #0]
    6af2:	f006 fe0c 	bl	d70e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6af6:	2100      	movs	r1, #0
    6af8:	4620      	mov	r0, r4
    6afa:	f7fe f8ad 	bl	4c58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6afe:	b120      	cbz	r0, 6b0a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6b00:	f240 1171 	movw	r1, #369	; 0x171
    6b04:	2010      	movs	r0, #16
    6b06:	f7fd fe1f 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b0a:	2001      	movs	r0, #1
    6b0c:	bd70      	pop	{r4, r5, r6, pc}
    6b0e:	2000      	movs	r0, #0
    6b10:	bd70      	pop	{r4, r5, r6, pc}
    6b12:	0000      	.short	0x0000
    6b14:	200000ec 	.word	0x200000ec
    6b18:	2000028c 	.word	0x2000028c
    6b1c:	b510      	push	{r4, lr}
    6b1e:	492d      	ldr	r1, [pc, #180]	; (6bd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    6b20:	b086      	sub	sp, #24
    6b22:	7c8a      	ldrb	r2, [r1, #18]
    6b24:	7801      	ldrb	r1, [r0, #0]
    6b26:	07d3      	lsls	r3, r2, #31
    6b28:	d101      	bne.n	6b2e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    6b2a:	2919      	cmp	r1, #25
    6b2c:	d004      	beq.n	6b38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
    6b2e:	2918      	cmp	r1, #24
    6b30:	d01f      	beq.n	6b72 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    6b32:	2912      	cmp	r1, #18
    6b34:	d046      	beq.n	6bc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
    6b36:	e04a      	b.n	6bce <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    6b38:	8880      	ldrh	r0, [r0, #4]
    6b3a:	f8ad 0000 	strh.w	r0, [sp]
    6b3e:	a902      	add	r1, sp, #8
    6b40:	f006 fea5 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6b44:	b110      	cbz	r0, 6b4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    6b46:	f44f 71c4 	mov.w	r1, #392	; 0x188
    6b4a:	e035      	b.n	6bb8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6b4c:	9803      	ldr	r0, [sp, #12]
    6b4e:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    6b52:	f88d 1002 	strb.w	r1, [sp, #2]
    6b56:	7841      	ldrb	r1, [r0, #1]
    6b58:	f88d 1003 	strb.w	r1, [sp, #3]
    6b5c:	8840      	ldrh	r0, [r0, #2]
    6b5e:	f8ad 0004 	strh.w	r0, [sp, #4]
    6b62:	2102      	movs	r1, #2
    6b64:	4668      	mov	r0, sp
    6b66:	f008 ff85 	bl	fa74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6b6a:	b340      	cbz	r0, 6bbe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6b6c:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    6b70:	e022      	b.n	6bb8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6b72:	0791      	lsls	r1, r2, #30
    6b74:	d42b      	bmi.n	6bce <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    6b76:	8884      	ldrh	r4, [r0, #4]
    6b78:	a903      	add	r1, sp, #12
    6b7a:	4620      	mov	r0, r4
    6b7c:	f008 fd99 	bl	f6b2 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6b80:	b110      	cbz	r0, 6b88 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
    6b82:	f240 11a5 	movw	r1, #421	; 0x1a5
    6b86:	e017      	b.n	6bb8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6b88:	f8ad 4000 	strh.w	r4, [sp]
    6b8c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6b90:	f8ad 0002 	strh.w	r0, [sp, #2]
    6b94:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6b98:	f8ad 0004 	strh.w	r0, [sp, #4]
    6b9c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6ba0:	f8ad 0006 	strh.w	r0, [sp, #6]
    6ba4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6ba8:	f8ad 0008 	strh.w	r0, [sp, #8]
    6bac:	4668      	mov	r0, sp
    6bae:	f008 fdfe 	bl	f7ae <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6bb2:	b120      	cbz	r0, 6bbe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6bb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    6bb8:	2010      	movs	r0, #16
    6bba:	f7fd fdc5 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bbe:	2001      	movs	r0, #1
    6bc0:	b006      	add	sp, #24
    6bc2:	bd10      	pop	{r4, pc}
    6bc4:	0751      	lsls	r1, r2, #29
    6bc6:	d402      	bmi.n	6bce <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    6bc8:	7b80      	ldrb	r0, [r0, #14]
    6bca:	07c0      	lsls	r0, r0, #31
    6bcc:	d0f7      	beq.n	6bbe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6bce:	2000      	movs	r0, #0
    6bd0:	e7f6      	b.n	6bc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    6bd2:	0000      	.short	0x0000
    6bd4:	20001388 	.word	0x20001388
    6bd8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bdc:	b087      	sub	sp, #28
    6bde:	460c      	mov	r4, r1
    6be0:	a902      	add	r1, sp, #8
    6be2:	9807      	ldr	r0, [sp, #28]
    6be4:	f006 fe53 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6be8:	2800      	cmp	r0, #0
    6bea:	d17d      	bne.n	6ce8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    6bec:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6d10 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x294>
    6bf0:	f04f 0a01 	mov.w	sl, #1
    6bf4:	4680      	mov	r8, r0
    6bf6:	9803      	ldr	r0, [sp, #12]
    6bf8:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    6bfc:	2800      	cmp	r0, #0
    6bfe:	d00c      	beq.n	6c1a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    6c00:	f8d9 2000 	ldr.w	r2, [r9]
    6c04:	b162      	cbz	r2, 6c20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    6c06:	4621      	mov	r1, r4
    6c08:	9807      	ldr	r0, [sp, #28]
    6c0a:	4790      	blx	r2
    6c0c:	b140      	cbz	r0, 6c20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    6c0e:	4620      	mov	r0, r4
    6c10:	f7ff ff84 	bl	6b1c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
    6c14:	2800      	cmp	r0, #0
    6c16:	d1ee      	bne.n	6bf6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x17a>
    6c18:	2001      	movs	r0, #1
    6c1a:	b009      	add	sp, #36	; 0x24
    6c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c20:	9d03      	ldr	r5, [sp, #12]
    6c22:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    6c26:	3570      	adds	r5, #112	; 0x70
    6c28:	b950      	cbnz	r0, 6c40 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    6c2a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6c2e:	f88d 0004 	strb.w	r0, [sp, #4]
    6c32:	9801      	ldr	r0, [sp, #4]
    6c34:	9001      	str	r0, [sp, #4]
    6c36:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6c3a:	b108      	cbz	r0, 6c40 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    6c3c:	2001      	movs	r0, #1
    6c3e:	e000      	b.n	6c42 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c6>
    6c40:	2000      	movs	r0, #0
    6c42:	4683      	mov	fp, r0
    6c44:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    6c48:	b1c0      	cbz	r0, 6c7c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    6c4a:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    6c4e:	0780      	lsls	r0, r0, #30
    6c50:	d514      	bpl.n	6c7c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    6c52:	f884 8001 	strb.w	r8, [r4, #1]
    6c56:	f884 a000 	strb.w	sl, [r4]
    6c5a:	f884 8004 	strb.w	r8, [r4, #4]
    6c5e:	9907      	ldr	r1, [sp, #28]
    6c60:	f8a4 1005 	strh.w	r1, [r4, #5]
    6c64:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    6c68:	71e1      	strb	r1, [r4, #7]
    6c6a:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    6c6e:	8121      	strh	r1, [r4, #8]
    6c70:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6c74:	8161      	strh	r1, [r4, #10]
    6c76:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    6c7a:	e7c8      	b.n	6c0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6c7c:	9807      	ldr	r0, [sp, #28]
    6c7e:	f7fe f993 	bl	4fa8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6c82:	0007      	movs	r7, r0
    6c84:	d00d      	beq.n	6ca2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x226>
    6c86:	f006 f9d3 	bl	d030 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6c8a:	0006      	movs	r6, r0
    6c8c:	d015      	beq.n	6cba <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23e>
    6c8e:	f884 8001 	strb.w	r8, [r4, #1]
    6c92:	200d      	movs	r0, #13
    6c94:	7020      	strb	r0, [r4, #0]
    6c96:	9807      	ldr	r0, [sp, #28]
    6c98:	80e0      	strh	r0, [r4, #6]
    6c9a:	8126      	strh	r6, [r4, #8]
    6c9c:	f884 a004 	strb.w	sl, [r4, #4]
    6ca0:	e007      	b.n	6cb2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6ca2:	f240 2133 	movw	r1, #563	; 0x233
    6ca6:	e02d      	b.n	6d04 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>
    6ca8:	2100      	movs	r1, #0
    6caa:	4638      	mov	r0, r7
    6cac:	460a      	mov	r2, r1
    6cae:	f006 fad5 	bl	d25c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6cb2:	1e76      	subs	r6, r6, #1
    6cb4:	b2b6      	uxth	r6, r6
    6cb6:	d2f7      	bcs.n	6ca8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>
    6cb8:	e7a9      	b.n	6c0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6cba:	9807      	ldr	r0, [sp, #28]
    6cbc:	f7fe f95e 	bl	4f7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6cc0:	b1f0      	cbz	r0, 6d00 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x284>
    6cc2:	f1bb 0f00 	cmp.w	fp, #0
    6cc6:	d020      	beq.n	6d0a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    6cc8:	f006 f8e7 	bl	ce9a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6ccc:	b160      	cbz	r0, 6ce8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    6cce:	9807      	ldr	r0, [sp, #28]
    6cd0:	f006 fd1d 	bl	d70e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6cd4:	2100      	movs	r1, #0
    6cd6:	9807      	ldr	r0, [sp, #28]
    6cd8:	f7fd ffbe 	bl	4c58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6cdc:	f884 8001 	strb.w	r8, [r4, #1]
    6ce0:	210a      	movs	r1, #10
    6ce2:	4640      	mov	r0, r8
    6ce4:	7021      	strb	r1, [r4, #0]
    6ce6:	e000      	b.n	6cea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26e>
    6ce8:	e00f      	b.n	6d0a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    6cea:	f884 8004 	strb.w	r8, [r4, #4]
    6cee:	9907      	ldr	r1, [sp, #28]
    6cf0:	f8a4 1005 	strh.w	r1, [r4, #5]
    6cf4:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6cf8:	71e1      	strb	r1, [r4, #7]
    6cfa:	3524      	adds	r5, #36	; 0x24
    6cfc:	7028      	strb	r0, [r5, #0]
    6cfe:	e786      	b.n	6c0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6d00:	f240 2151 	movw	r1, #593	; 0x251
    6d04:	2010      	movs	r0, #16
    6d06:	f7fd fd1f 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d0a:	2000      	movs	r0, #0
    6d0c:	e785      	b.n	6c1a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    6d0e:	0000      	.short	0x0000
    6d10:	200000f0 	.word	0x200000f0
    6d14:	4804      	ldr	r0, [pc, #16]	; (6d28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2ac>)
    6d16:	2100      	movs	r1, #0
    6d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6d1c:	7001      	strb	r1, [r0, #0]
    6d1e:	8042      	strh	r2, [r0, #2]
    6d20:	1f00      	subs	r0, r0, #4
    6d22:	f8a0 1001 	strh.w	r1, [r0, #1]
    6d26:	4770      	bx	lr
    6d28:	2000028c 	.word	0x2000028c

00006d2c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    6d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d2e:	f06f 021f 	mvn.w	r2, #31
    6d32:	0c01      	lsrs	r1, r0, #16
    6d34:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6d38:	251f      	movs	r5, #31
    6d3a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6d3e:	3854      	subs	r0, #84	; 0x54
    6d40:	d00d      	beq.n	6d5e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6d42:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6d46:	3855      	subs	r0, #85	; 0x55
    6d48:	d009      	beq.n	6d5e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6d4a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    6d4e:	38aa      	subs	r0, #170	; 0xaa
    6d50:	d005      	beq.n	6d5e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6d52:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    6d56:	38aa      	subs	r0, #170	; 0xaa
    6d58:	d001      	beq.n	6d5e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6d5a:	2001      	movs	r0, #1
    6d5c:	e000      	b.n	6d60 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    6d5e:	2000      	movs	r0, #0
    6d60:	2200      	movs	r2, #0
    6d62:	4613      	mov	r3, r2
    6d64:	ea4f 0402 	mov.w	r4, r2
    6d68:	ea82 0701 	eor.w	r7, r2, r1
    6d6c:	43ff      	mvns	r7, r7
    6d6e:	431f      	orrs	r7, r3
    6d70:	1c7f      	adds	r7, r7, #1
    6d72:	d00f      	beq.n	6d94 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6d74:	f006 0701 	and.w	r7, r6, #1
    6d78:	0852      	lsrs	r2, r2, #1
    6d7a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    6d7e:	f005 0701 	and.w	r7, r5, #1
    6d82:	085b      	lsrs	r3, r3, #1
    6d84:	0876      	lsrs	r6, r6, #1
    6d86:	086d      	lsrs	r5, r5, #1
    6d88:	1c64      	adds	r4, r4, #1
    6d8a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6d8e:	2c16      	cmp	r4, #22
    6d90:	d3ea      	bcc.n	6d68 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d94:	2000      	movs	r0, #0
    6d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006d98 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    6d98:	b510      	push	{r4, lr}
    6d9a:	e9d0 2100 	ldrd	r2, r1, [r0]
    6d9e:	4b09      	ldr	r3, [pc, #36]	; (6dc4 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    6da0:	4c09      	ldr	r4, [pc, #36]	; (6dc8 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    6da2:	4353      	muls	r3, r2
    6da4:	4354      	muls	r4, r2
    6da6:	4051      	eors	r1, r2
    6da8:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    6dac:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    6db0:	ea4f 41f1 	mov.w	r1, r1, ror #19
    6db4:	e9c0 2100 	strd	r2, r1, [r0]
    6db8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    6dbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6dc0:	4618      	mov	r0, r3
    6dc2:	bd10      	pop	{r4, pc}
    6dc4:	c6ef3760 	.word	0xc6ef3760
    6dc8:	9e3779bb 	.word	0x9e3779bb

00006dcc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6dcc:	b570      	push	{r4, r5, r6, lr}
    6dce:	4604      	mov	r4, r0
    6dd0:	7c00      	ldrb	r0, [r0, #16]
    6dd2:	b300      	cbz	r0, 6e16 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6dd4:	2802      	cmp	r0, #2
    6dd6:	d01e      	beq.n	6e16 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6dd8:	f05f 0001 	movs.w	r0, #1
    6ddc:	f104 0149 	add.w	r1, r4, #73	; 0x49
    6de0:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    6de4:	460d      	mov	r5, r1
    6de6:	b1c0      	cbz	r0, 6e1a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6de8:	7de0      	ldrb	r0, [r4, #23]
    6dea:	b1f0      	cbz	r0, 6e2a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    6dec:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6df0:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    6df4:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6df8:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    6dfc:	7c20      	ldrb	r0, [r4, #16]
    6dfe:	f007 fac1 	bl	e384 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6e02:	7620      	strb	r0, [r4, #24]
    6e04:	2008      	movs	r0, #8
    6e06:	7660      	strb	r0, [r4, #25]
    6e08:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6e0c:	4629      	mov	r1, r5
    6e0e:	f007 faa5 	bl	e35c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6e12:	b9a8      	cbnz	r0, 6e40 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    6e14:	e00e      	b.n	6e34 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    6e16:	2000      	movs	r0, #0
    6e18:	e7e0      	b.n	6ddc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    6e1a:	2000      	movs	r0, #0
    6e1c:	f7fe fb92 	bl	5544 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6e20:	2800      	cmp	r0, #0
    6e22:	d1eb      	bne.n	6dfc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    6e24:	f240 41aa 	movw	r1, #1194	; 0x4aa
    6e28:	e001      	b.n	6e2e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    6e2a:	f240 41ae 	movw	r1, #1198	; 0x4ae
    6e2e:	202d      	movs	r0, #45	; 0x2d
    6e30:	f7fd fc8a 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e34:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6e38:	4629      	mov	r1, r5
    6e3a:	f007 fa98 	bl	e36e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6e3e:	b100      	cbz	r0, 6e42 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6e40:	2001      	movs	r0, #1
    6e42:	76a0      	strb	r0, [r4, #26]
    6e44:	7e20      	ldrb	r0, [r4, #24]
    6e46:	b130      	cbz	r0, 6e56 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    6e48:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    6e4c:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6e50:	f006 fcda 	bl	d808 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6e54:	7660      	strb	r0, [r4, #25]
    6e56:	2500      	movs	r5, #0
    6e58:	6425      	str	r5, [r4, #64]	; 0x40
    6e5a:	f005 f960 	bl	c11e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6e5e:	6460      	str	r0, [r4, #68]	; 0x44
    6e60:	2100      	movs	r1, #0
    6e62:	4620      	mov	r0, r4
    6e64:	f007 fbad 	bl	e5c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6e68:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    6e6c:	78a0      	ldrb	r0, [r4, #2]
    6e6e:	0740      	lsls	r0, r0, #29
    6e70:	d505      	bpl.n	6e7e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    6e72:	4620      	mov	r0, r4
    6e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e78:	2100      	movs	r1, #0
    6e7a:	f000 bdff 	b.w	7a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    6e7e:	bd70      	pop	{r4, r5, r6, pc}

00006e80 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6e80:	b508      	push	{r3, lr}
    6e82:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    6e86:	f88d 2000 	strb.w	r2, [sp]
    6e8a:	9a00      	ldr	r2, [sp, #0]
    6e8c:	9200      	str	r2, [sp, #0]
    6e8e:	f89d 3000 	ldrb.w	r3, [sp]
    6e92:	2200      	movs	r2, #0
    6e94:	b163      	cbz	r3, 6eb0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    6e96:	704a      	strb	r2, [r1, #1]
    6e98:	2317      	movs	r3, #23
    6e9a:	700b      	strb	r3, [r1, #0]
    6e9c:	f850 3f95 	ldr.w	r3, [r0, #149]!
    6ea0:	604b      	str	r3, [r1, #4]
    6ea2:	6843      	ldr	r3, [r0, #4]
    6ea4:	608b      	str	r3, [r1, #8]
    6ea6:	7a03      	ldrb	r3, [r0, #8]
    6ea8:	730b      	strb	r3, [r1, #12]
    6eaa:	f800 2c01 	strb.w	r2, [r0, #-1]
    6eae:	e03b      	b.n	6f28 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6eb0:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    6eb4:	f88d 3000 	strb.w	r3, [sp]
    6eb8:	9b00      	ldr	r3, [sp, #0]
    6eba:	9300      	str	r3, [sp, #0]
    6ebc:	f89d 3000 	ldrb.w	r3, [sp]
    6ec0:	b143      	cbz	r3, 6ed4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    6ec2:	704a      	strb	r2, [r1, #1]
    6ec4:	2305      	movs	r3, #5
    6ec6:	700b      	strb	r3, [r1, #0]
    6ec8:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    6ecc:	604b      	str	r3, [r1, #4]
    6ece:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    6ed2:	e029      	b.n	6f28 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6ed4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    6ed8:	f88d 3000 	strb.w	r3, [sp]
    6edc:	9b00      	ldr	r3, [sp, #0]
    6ede:	9300      	str	r3, [sp, #0]
    6ee0:	f89d 3000 	ldrb.w	r3, [sp]
    6ee4:	b11b      	cbz	r3, 6eee <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    6ee6:	bf00      	nop
    6ee8:	f007 fb42 	bl	e570 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    6eec:	e01c      	b.n	6f28 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6eee:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    6ef2:	f88d 3000 	strb.w	r3, [sp]
    6ef6:	9b00      	ldr	r3, [sp, #0]
    6ef8:	9300      	str	r3, [sp, #0]
    6efa:	f89d 3000 	ldrb.w	r3, [sp]
    6efe:	b1ab      	cbz	r3, 6f2c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    6f00:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    6f04:	f88d 3000 	strb.w	r3, [sp]
    6f08:	9b00      	ldr	r3, [sp, #0]
    6f0a:	9300      	str	r3, [sp, #0]
    6f0c:	f89d 3000 	ldrb.w	r3, [sp]
    6f10:	2b00      	cmp	r3, #0
    6f12:	d1e9      	bne.n	6ee8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    6f14:	704a      	strb	r2, [r1, #1]
    6f16:	2314      	movs	r3, #20
    6f18:	700b      	strb	r3, [r1, #0]
    6f1a:	f850 3f88 	ldr.w	r3, [r0, #136]!
    6f1e:	604b      	str	r3, [r1, #4]
    6f20:	8883      	ldrh	r3, [r0, #4]
    6f22:	810b      	strh	r3, [r1, #8]
    6f24:	f800 2c02 	strb.w	r2, [r0, #-2]
    6f28:	2001      	movs	r0, #1
    6f2a:	bd08      	pop	{r3, pc}
    6f2c:	2000      	movs	r0, #0
    6f2e:	bd08      	pop	{r3, pc}

00006f30 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6f30:	b530      	push	{r4, r5, lr}
    6f32:	460c      	mov	r4, r1
    6f34:	b08d      	sub	sp, #52	; 0x34
    6f36:	4605      	mov	r5, r0
    6f38:	4601      	mov	r1, r0
    6f3a:	2220      	movs	r2, #32
    6f3c:	a802      	add	r0, sp, #8
    6f3e:	f005 fa63 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6f42:	a80a      	add	r0, sp, #40	; 0x28
    6f44:	f007 fbea 	bl	e71c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6f48:	7aa0      	ldrb	r0, [r4, #10]
    6f4a:	f88d 0018 	strb.w	r0, [sp, #24]
    6f4e:	7820      	ldrb	r0, [r4, #0]
    6f50:	f88d 0008 	strb.w	r0, [sp, #8]
    6f54:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6f58:	f8ad 0000 	strh.w	r0, [sp]
    6f5c:	f89d 0000 	ldrb.w	r0, [sp]
    6f60:	f000 0101 	and.w	r1, r0, #1
    6f64:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6f68:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6f6c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6f70:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6f74:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6f78:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6f7c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6f80:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6f84:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6f88:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6f8c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6f90:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6f94:	f8ad 000a 	strh.w	r0, [sp, #10]
    6f98:	7d20      	ldrb	r0, [r4, #20]
    6f9a:	2801      	cmp	r0, #1
    6f9c:	d006      	beq.n	6fac <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6f9e:	2802      	cmp	r0, #2
    6fa0:	d004      	beq.n	6fac <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6fa2:	f240 2175 	movw	r1, #629	; 0x275
    6fa6:	2006      	movs	r0, #6
    6fa8:	f7fd fbce 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fac:	f88d 000c 	strb.w	r0, [sp, #12]
    6fb0:	7a61      	ldrb	r1, [r4, #9]
    6fb2:	a80a      	add	r0, sp, #40	; 0x28
    6fb4:	f007 fb99 	bl	e6ea <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6fb8:	7d20      	ldrb	r0, [r4, #20]
    6fba:	2101      	movs	r1, #1
    6fbc:	2802      	cmp	r0, #2
    6fbe:	d102      	bne.n	6fc6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6fc0:	7d60      	ldrb	r0, [r4, #21]
    6fc2:	1c40      	adds	r0, r0, #1
    6fc4:	b2c1      	uxtb	r1, r0
    6fc6:	7ea0      	ldrb	r0, [r4, #26]
    6fc8:	1c40      	adds	r0, r0, #1
    6fca:	b2c2      	uxtb	r2, r0
    6fcc:	a80a      	add	r0, sp, #40	; 0x28
    6fce:	f007 fb53 	bl	e678 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6fd2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    6fd6:	0700      	lsls	r0, r0, #28
    6fd8:	d501      	bpl.n	6fde <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    6fda:	2000      	movs	r0, #0
    6fdc:	e020      	b.n	7020 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    6fde:	a80a      	add	r0, sp, #40	; 0x28
    6fe0:	f007 fb5c 	bl	e69c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6fe4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    6fe8:	2228      	movs	r2, #40	; 0x28
    6fea:	f000 fded 	bl	7bc8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6fee:	f240 2171 	movw	r1, #625	; 0x271
    6ff2:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    6ff6:	fbb0 f0f1 	udiv	r0, r0, r1
    6ffa:	4348      	muls	r0, r1
    6ffc:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7000:	f240 2371 	movw	r3, #625	; 0x271
    7004:	0a0a      	lsrs	r2, r1, #8
    7006:	f240 2171 	movw	r1, #625	; 0x271
    700a:	434a      	muls	r2, r1
    700c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7010:	0a09      	lsrs	r1, r1, #8
    7012:	4359      	muls	r1, r3
    7014:	4290      	cmp	r0, r2
    7016:	d801      	bhi.n	701c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    7018:	9204      	str	r2, [sp, #16]
    701a:	e004      	b.n	7026 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    701c:	4288      	cmp	r0, r1
    701e:	d801      	bhi.n	7024 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    7020:	9004      	str	r0, [sp, #16]
    7022:	e000      	b.n	7026 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7024:	9104      	str	r1, [sp, #16]
    7026:	7ca0      	ldrb	r0, [r4, #18]
    7028:	f88d 0017 	strb.w	r0, [sp, #23]
    702c:	7e20      	ldrb	r0, [r4, #24]
    702e:	2801      	cmp	r0, #1
    7030:	d000      	beq.n	7034 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    7032:	2000      	movs	r0, #0
    7034:	f88d 0014 	strb.w	r0, [sp, #20]
    7038:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    703a:	f006 fa9e 	bl	d57a <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    703e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7040:	f006 fb3e 	bl	d6c0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7044:	2220      	movs	r2, #32
    7046:	a902      	add	r1, sp, #8
    7048:	4628      	mov	r0, r5
    704a:	f005 f9dd 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    704e:	980a      	ldr	r0, [sp, #40]	; 0x28
    7050:	6228      	str	r0, [r5, #32]
    7052:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    7056:	84a8      	strh	r0, [r5, #36]	; 0x24
    7058:	7ae0      	ldrb	r0, [r4, #11]
    705a:	b168      	cbz	r0, 7078 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    705c:	2802      	cmp	r0, #2
    705e:	d00b      	beq.n	7078 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7060:	f05f 0001 	movs.w	r0, #1
    7064:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7068:	68e0      	ldr	r0, [r4, #12]
    706a:	6528      	str	r0, [r5, #80]	; 0x50
    706c:	8a20      	ldrh	r0, [r4, #16]
    706e:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    7072:	b00d      	add	sp, #52	; 0x34
    7074:	2000      	movs	r0, #0
    7076:	bd30      	pop	{r4, r5, pc}
    7078:	2000      	movs	r0, #0
    707a:	e7f3      	b.n	7064 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

0000707c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    707c:	4a0a      	ldr	r2, [pc, #40]	; (70a8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    707e:	b510      	push	{r4, lr}
    7080:	2100      	movs	r1, #0
    7082:	7011      	strb	r1, [r2, #0]
    7084:	4c09      	ldr	r4, [pc, #36]	; (70ac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    7086:	6060      	str	r0, [r4, #4]
    7088:	f000 f822 	bl	70d0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    708c:	b110      	cbz	r0, 7094 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    708e:	f240 312a 	movw	r1, #810	; 0x32a
    7092:	e004      	b.n	709e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7094:	68a0      	ldr	r0, [r4, #8]
    7096:	2800      	cmp	r0, #0
    7098:	d104      	bne.n	70a4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    709a:	f240 312d 	movw	r1, #813	; 0x32d
    709e:	202d      	movs	r0, #45	; 0x2d
    70a0:	f7fd fb52 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70a4:	bd10      	pop	{r4, pc}
    70a6:	0000      	.short	0x0000
    70a8:	200013a4 	.word	0x200013a4
    70ac:	200000f8 	.word	0x200000f8

000070b0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    70b0:	4902      	ldr	r1, [pc, #8]	; (70bc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    70b2:	4801      	ldr	r0, [pc, #4]	; (70b8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    70b4:	6088      	str	r0, [r1, #8]
    70b6:	4770      	bx	lr
    70b8:	00007bb0 	.word	0x00007bb0
    70bc:	200000f8 	.word	0x200000f8

000070c0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    70c0:	4902      	ldr	r1, [pc, #8]	; (70cc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    70c2:	6008      	str	r0, [r1, #0]
    70c4:	6889      	ldr	r1, [r1, #8]
    70c6:	6809      	ldr	r1, [r1, #0]
    70c8:	4708      	bx	r1
    70ca:	0000      	.short	0x0000
    70cc:	200000f8 	.word	0x200000f8

000070d0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    70d0:	4808      	ldr	r0, [pc, #32]	; (70f4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    70d2:	b510      	push	{r4, lr}
    70d4:	7800      	ldrb	r0, [r0, #0]
    70d6:	b110      	cbz	r0, 70de <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    70d8:	240c      	movs	r4, #12
    70da:	4620      	mov	r0, r4
    70dc:	bd10      	pop	{r4, pc}
    70de:	2400      	movs	r4, #0
    70e0:	2218      	movs	r2, #24
    70e2:	4621      	mov	r1, r4
    70e4:	4803      	ldr	r0, [pc, #12]	; (70f4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    70e6:	f005 fa09 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    70ea:	f004 f8c3 	bl	b274 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    70ee:	f003 fea5 	bl	ae3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    70f2:	e7f2      	b.n	70da <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    70f4:	200013a4 	.word	0x200013a4

000070f8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    70f8:	4904      	ldr	r1, [pc, #16]	; (710c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    70fa:	b510      	push	{r4, lr}
    70fc:	7809      	ldrb	r1, [r1, #0]
    70fe:	2901      	cmp	r1, #1
    7100:	d101      	bne.n	7106 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    7102:	f000 fb81 	bl	7808 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    7106:	2000      	movs	r0, #0
    7108:	bd10      	pop	{r4, pc}
    710a:	0000      	.short	0x0000
    710c:	200013a4 	.word	0x200013a4

00007110 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7110:	4902      	ldr	r1, [pc, #8]	; (711c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    7112:	4801      	ldr	r0, [pc, #4]	; (7118 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    7114:	6008      	str	r0, [r1, #0]
    7116:	4770      	bx	lr
    7118:	00007955 	.word	0x00007955
    711c:	20000104 	.word	0x20000104
    7120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7124:	000f      	movs	r7, r1
    7126:	4604      	mov	r4, r0
    7128:	d023      	beq.n	7172 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    712a:	f104 0020 	add.w	r0, r4, #32
    712e:	4605      	mov	r5, r0
    7130:	f007 fadd 	bl	e6ee <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7134:	b9b0      	cbnz	r0, 7164 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    7136:	78a0      	ldrb	r0, [r4, #2]
    7138:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    713c:	b350      	cbz	r0, 7194 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    713e:	4628      	mov	r0, r5
    7140:	f007 faac 	bl	e69c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7144:	4606      	mov	r6, r0
    7146:	4628      	mov	r0, r5
    7148:	f007 fad1 	bl	e6ee <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    714c:	1a30      	subs	r0, r6, r0
    714e:	b2c0      	uxtb	r0, r0
    7150:	f007 fb22 	bl	e798 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7154:	4601      	mov	r1, r0
    7156:	4835      	ldr	r0, [pc, #212]	; (722c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7158:	6842      	ldr	r2, [r0, #4]
    715a:	4411      	add	r1, r2
    715c:	6041      	str	r1, [r0, #4]
    715e:	4628      	mov	r0, r5
    7160:	f007 fae3 	bl	e72a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7164:	4628      	mov	r0, r5
    7166:	f007 faa5 	bl	e6b4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    716a:	4601      	mov	r1, r0
    716c:	4620      	mov	r0, r4
    716e:	f007 fa64 	bl	e63a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7172:	4d2f      	ldr	r5, [pc, #188]	; (7230 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    7174:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7178:	2100      	movs	r1, #0
    717a:	6868      	ldr	r0, [r5, #4]
    717c:	8001      	strh	r1, [r0, #0]
    717e:	f007 fa72 	bl	e666 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7182:	8860      	ldrh	r0, [r4, #2]
    7184:	2813      	cmp	r0, #19
    7186:	d013      	beq.n	71b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7188:	dc09      	bgt.n	719e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    718a:	2810      	cmp	r0, #16
    718c:	d036      	beq.n	71fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    718e:	2812      	cmp	r0, #18
    7190:	d109      	bne.n	71a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7192:	e031      	b.n	71f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7194:	4620      	mov	r0, r4
    7196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    719a:	f000 bb35 	b.w	7808 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    719e:	2815      	cmp	r0, #21
    71a0:	d00f      	beq.n	71c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    71a2:	281d      	cmp	r0, #29
    71a4:	d00d      	beq.n	71c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    71a6:	f240 616c 	movw	r1, #1644	; 0x66c
    71aa:	202d      	movs	r0, #45	; 0x2d
    71ac:	f7fd facc 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71b0:	2100      	movs	r1, #0
    71b2:	6868      	ldr	r0, [r5, #4]
    71b4:	f006 fe9b 	bl	deee <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    71b8:	2101      	movs	r1, #1
    71ba:	6868      	ldr	r0, [r5, #4]
    71bc:	f007 fa53 	bl	e666 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    71c0:	e020      	b.n	7204 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    71c2:	2101      	movs	r1, #1
    71c4:	6868      	ldr	r0, [r5, #4]
    71c6:	f006 fe92 	bl	deee <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    71ca:	2101      	movs	r1, #1
    71cc:	6868      	ldr	r0, [r5, #4]
    71ce:	f007 fa4a 	bl	e666 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    71d2:	b136      	cbz	r6, 71e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    71d4:	f104 0157 	add.w	r1, r4, #87	; 0x57
    71d8:	6868      	ldr	r0, [r5, #4]
    71da:	f006 fea3 	bl	df24 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    71de:	2101      	movs	r1, #1
    71e0:	e006      	b.n	71f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    71e2:	f104 0150 	add.w	r1, r4, #80	; 0x50
    71e6:	6868      	ldr	r0, [r5, #4]
    71e8:	f006 fe9c 	bl	df24 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    71ec:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    71f0:	6868      	ldr	r0, [r5, #4]
    71f2:	f006 fe9d 	bl	df30 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    71f6:	e005      	b.n	7204 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    71f8:	2106      	movs	r1, #6
    71fa:	e000      	b.n	71fe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    71fc:	2102      	movs	r1, #2
    71fe:	6868      	ldr	r0, [r5, #4]
    7200:	f006 fe75 	bl	deee <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7204:	4620      	mov	r0, r4
    7206:	f000 fcaf 	bl	7b68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    720a:	8860      	ldrh	r0, [r4, #2]
    720c:	281d      	cmp	r0, #29
    720e:	d006      	beq.n	721e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    7210:	2815      	cmp	r0, #21
    7212:	d004      	beq.n	721e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    7214:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    7216:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7218:	6868      	ldr	r0, [r5, #4]
    721a:	f006 fe58 	bl	dece <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    721e:	4639      	mov	r1, r7
    7220:	4620      	mov	r0, r4
    7222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7226:	f000 b9e5 	b.w	75f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    722a:	0000      	.short	0x0000
    722c:	200013a4 	.word	0x200013a4
    7230:	200000f8 	.word	0x200000f8
    7234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7238:	4d2e      	ldr	r5, [pc, #184]	; (72f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    723a:	4607      	mov	r7, r0
    723c:	7828      	ldrb	r0, [r5, #0]
    723e:	2802      	cmp	r0, #2
    7240:	d005      	beq.n	724e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7242:	7828      	ldrb	r0, [r5, #0]
    7244:	2803      	cmp	r0, #3
    7246:	d002      	beq.n	724e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7248:	f640 41f7 	movw	r1, #3319	; 0xcf7
    724c:	e029      	b.n	72a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
    724e:	4c2a      	ldr	r4, [pc, #168]	; (72f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7250:	6820      	ldr	r0, [r4, #0]
    7252:	7b01      	ldrb	r1, [r0, #12]
    7254:	b109      	cbz	r1, 725a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    7256:	f007 f9fb 	bl	e650 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    725a:	6860      	ldr	r0, [r4, #4]
    725c:	f04f 0800 	mov.w	r8, #0
    7260:	7802      	ldrb	r2, [r0, #0]
    7262:	f002 060f 	and.w	r6, r2, #15
    7266:	b357      	cbz	r7, 72be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7268:	6821      	ldr	r1, [r4, #0]
    726a:	f101 0349 	add.w	r3, r1, #73	; 0x49
    726e:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
    7272:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    7276:	d122      	bne.n	72be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7278:	2206      	movs	r2, #6
    727a:	4619      	mov	r1, r3
    727c:	3009      	adds	r0, #9
    727e:	f005 f8b1 	bl	c3e4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7282:	b9e0      	cbnz	r0, 72be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7284:	4641      	mov	r1, r8
    7286:	6860      	ldr	r0, [r4, #4]
    7288:	f006 fe11 	bl	deae <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    728c:	b1b8      	cbz	r0, 72be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    728e:	782a      	ldrb	r2, [r5, #0]
    7290:	6820      	ldr	r0, [r4, #0]
    7292:	4631      	mov	r1, r6
    7294:	2a02      	cmp	r2, #2
    7296:	d007      	beq.n	72a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    7298:	782a      	ldrb	r2, [r5, #0]
    729a:	2a03      	cmp	r2, #3
    729c:	d004      	beq.n	72a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    729e:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
    72a2:	202d      	movs	r0, #45	; 0x2d
    72a4:	f7fd fa50 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72a8:	68a2      	ldr	r2, [r4, #8]
    72aa:	782b      	ldrb	r3, [r5, #0]
    72ac:	6952      	ldr	r2, [r2, #20]
    72ae:	f06f 0607 	mvn.w	r6, #7
    72b2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    72b6:	58d2      	ldr	r2, [r2, r3]
    72b8:	4790      	blx	r2
    72ba:	4606      	mov	r6, r0
    72bc:	e000      	b.n	72c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
    72be:	2601      	movs	r6, #1
    72c0:	7ba8      	ldrb	r0, [r5, #14]
    72c2:	b118      	cbz	r0, 72cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
    72c4:	f003 ffd6 	bl	b274 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    72c8:	f003 fdb8 	bl	ae3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    72cc:	2e00      	cmp	r6, #0
    72ce:	d00f      	beq.n	72f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    72d0:	6820      	ldr	r0, [r4, #0]
    72d2:	f007 fa77 	bl	e7c4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    72d6:	b130      	cbz	r0, 72e6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
    72d8:	f003 ffec 	bl	b2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    72dc:	68a0      	ldr	r0, [r4, #8]
    72de:	6880      	ldr	r0, [r0, #8]
    72e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72e4:	4700      	bx	r0
    72e6:	6820      	ldr	r0, [r4, #0]
    72e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72ec:	f000 ba8c 	b.w	7808 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    72f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72f4:	200013a4 	.word	0x200013a4
    72f8:	200000f8 	.word	0x200000f8
    72fc:	b510      	push	{r4, lr}
    72fe:	2903      	cmp	r1, #3
    7300:	d002      	beq.n	7308 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    7302:	2905      	cmp	r1, #5
    7304:	d10a      	bne.n	731c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7306:	e002      	b.n	730e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    7308:	f000 fb7e 	bl	7a08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    730c:	e003      	b.n	7316 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    730e:	4904      	ldr	r1, [pc, #16]	; (7320 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    7310:	6809      	ldr	r1, [r1, #0]
    7312:	b109      	cbz	r1, 7318 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    7314:	4788      	blx	r1
    7316:	b108      	cbz	r0, 731c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7318:	2000      	movs	r0, #0
    731a:	bd10      	pop	{r4, pc}
    731c:	2001      	movs	r0, #1
    731e:	bd10      	pop	{r4, pc}
    7320:	20000104 	.word	0x20000104
    7324:	4a09      	ldr	r2, [pc, #36]	; (734c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    7326:	0003      	movs	r3, r0
    7328:	6810      	ldr	r0, [r2, #0]
    732a:	d001      	beq.n	7330 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    732c:	f000 ba6c 	b.w	7808 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    7330:	2900      	cmp	r1, #0
    7332:	d009      	beq.n	7348 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    7334:	6891      	ldr	r1, [r2, #8]
    7336:	4a06      	ldr	r2, [pc, #24]	; (7350 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    7338:	6909      	ldr	r1, [r1, #16]
    733a:	7812      	ldrb	r2, [r2, #0]
    733c:	f06f 030f 	mvn.w	r3, #15
    7340:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7344:	5889      	ldr	r1, [r1, r2]
    7346:	4708      	bx	r1
    7348:	4770      	bx	lr
    734a:	0000      	.short	0x0000
    734c:	200000f8 	.word	0x200000f8
    7350:	200013a4 	.word	0x200013a4
    7354:	b570      	push	{r4, r5, r6, lr}
    7356:	4604      	mov	r4, r0
    7358:	8840      	ldrh	r0, [r0, #2]
    735a:	2810      	cmp	r0, #16
    735c:	d019      	beq.n	7392 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    735e:	4d10      	ldr	r5, [pc, #64]	; (73a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7360:	7ba8      	ldrb	r0, [r5, #14]
    7362:	b120      	cbz	r0, 736e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7364:	f003 fd8a 	bl	ae7c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7368:	2040      	movs	r0, #64	; 0x40
    736a:	f003 ff91 	bl	b290 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    736e:	480d      	ldr	r0, [pc, #52]	; (73a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7370:	6840      	ldr	r0, [r0, #4]
    7372:	f004 fa4d 	bl	b810 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7376:	78a0      	ldrb	r0, [r4, #2]
    7378:	0740      	lsls	r0, r0, #29
    737a:	d404      	bmi.n	7386 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    737c:	2100      	movs	r1, #0
    737e:	7922      	ldrb	r2, [r4, #4]
    7380:	4608      	mov	r0, r1
    7382:	f004 fad1 	bl	b928 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7386:	2000      	movs	r0, #0
    7388:	f004 f8d8 	bl	b53c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    738c:	2002      	movs	r0, #2
    738e:	7028      	strb	r0, [r5, #0]
    7390:	bd70      	pop	{r4, r5, r6, pc}
    7392:	4620      	mov	r0, r4
    7394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7398:	2101      	movs	r1, #1
    739a:	f7ff bec1 	b.w	7120 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    739e:	0000      	.short	0x0000
    73a0:	200013a4 	.word	0x200013a4
    73a4:	200000f8 	.word	0x200000f8
    73a8:	b510      	push	{r4, lr}
    73aa:	4c12      	ldr	r4, [pc, #72]	; (73f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    73ac:	6820      	ldr	r0, [r4, #0]
    73ae:	f000 f825 	bl	73fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    73b2:	6820      	ldr	r0, [r4, #0]
    73b4:	f007 fa06 	bl	e7c4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    73b8:	2800      	cmp	r0, #0
    73ba:	6820      	ldr	r0, [r4, #0]
    73bc:	d00b      	beq.n	73d6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    73be:	490e      	ldr	r1, [pc, #56]	; (73f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    73c0:	780a      	ldrb	r2, [r1, #0]
    73c2:	2a02      	cmp	r2, #2
    73c4:	d00b      	beq.n	73de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    73c6:	780a      	ldrb	r2, [r1, #0]
    73c8:	2a03      	cmp	r2, #3
    73ca:	d008      	beq.n	73de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    73cc:	f640 31fe 	movw	r1, #3070	; 0xbfe
    73d0:	202d      	movs	r0, #45	; 0x2d
    73d2:	f7fd f9b9 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73da:	f000 ba15 	b.w	7808 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    73de:	68a2      	ldr	r2, [r4, #8]
    73e0:	7809      	ldrb	r1, [r1, #0]
    73e2:	68d2      	ldr	r2, [r2, #12]
    73e4:	f06f 0307 	mvn.w	r3, #7
    73e8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    73ec:	5851      	ldr	r1, [r2, r1]
    73ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73f2:	4708      	bx	r1
    73f4:	200000f8 	.word	0x200000f8
    73f8:	200013a4 	.word	0x200013a4
    73fc:	b510      	push	{r4, lr}
    73fe:	7b01      	ldrb	r1, [r0, #12]
    7400:	b109      	cbz	r1, 7406 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    7402:	f007 f925 	bl	e650 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    7406:	4805      	ldr	r0, [pc, #20]	; (741c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    7408:	7b80      	ldrb	r0, [r0, #14]
    740a:	2800      	cmp	r0, #0
    740c:	d005      	beq.n	741a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    740e:	f003 ff31 	bl	b274 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7416:	f003 bd11 	b.w	ae3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    741a:	bd10      	pop	{r4, pc}
    741c:	200013a4 	.word	0x200013a4

00007420 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7424:	4d58      	ldr	r5, [pc, #352]	; (7588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    7426:	4604      	mov	r4, r0
    7428:	b088      	sub	sp, #32
    742a:	7828      	ldrb	r0, [r5, #0]
    742c:	bbf0      	cbnz	r0, 74ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    742e:	7820      	ldrb	r0, [r4, #0]
    7430:	28ff      	cmp	r0, #255	; 0xff
    7432:	d03c      	beq.n	74ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    7434:	2600      	movs	r6, #0
    7436:	81ae      	strh	r6, [r5, #12]
    7438:	606e      	str	r6, [r5, #4]
    743a:	706e      	strb	r6, [r5, #1]
    743c:	70ae      	strb	r6, [r5, #2]
    743e:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    7442:	4b52      	ldr	r3, [pc, #328]	; (758c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    7444:	f8df 8148 	ldr.w	r8, [pc, #328]	; 7590 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    744a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    744e:	f8d8 0008 	ldr.w	r0, [r8, #8]
    7452:	6840      	ldr	r0, [r0, #4]
    7454:	9003      	str	r0, [sp, #12]
    7456:	4668      	mov	r0, sp
    7458:	f004 f844 	bl	b4e4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    745c:	f004 f94c 	bl	b6f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7460:	f004 fbb8 	bl	bbd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7464:	f003 ff06 	bl	b274 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7468:	f003 fce8 	bl	ae3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    746c:	4849      	ldr	r0, [pc, #292]	; (7594 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    746e:	f004 fa9d 	bl	b9ac <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7472:	4846      	ldr	r0, [pc, #280]	; (758c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    7474:	1f00      	subs	r0, r0, #4
    7476:	f004 faa3 	bl	b9c0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    747a:	f104 0020 	add.w	r0, r4, #32
    747e:	4607      	mov	r7, r0
    7480:	f007 f953 	bl	e72a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7484:	4638      	mov	r0, r7
    7486:	f007 f915 	bl	e6b4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    748a:	4601      	mov	r1, r0
    748c:	4620      	mov	r0, r4
    748e:	f007 f8d4 	bl	e63a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7492:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7496:	f004 f9b5 	bl	b804 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    749a:	7921      	ldrb	r1, [r4, #4]
    749c:	2000      	movs	r0, #0
    749e:	f003 ffa5 	bl	b3ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    74a2:	60a8      	str	r0, [r5, #8]
    74a4:	b138      	cbz	r0, 74b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
    74a6:	7ea0      	ldrb	r0, [r4, #26]
    74a8:	b968      	cbnz	r0, 74c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    74aa:	e007      	b.n	74bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    74ac:	e7ff      	b.n	74ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    74ae:	200c      	movs	r0, #12
    74b0:	b008      	add	sp, #32
    74b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    74b6:	2001      	movs	r0, #1
    74b8:	7028      	strb	r0, [r5, #0]
    74ba:	e062      	b.n	7582 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    74bc:	7e20      	ldrb	r0, [r4, #24]
    74be:	b910      	cbnz	r0, 74c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    74c0:	78a0      	ldrb	r0, [r4, #2]
    74c2:	0740      	lsls	r0, r0, #29
    74c4:	d529      	bpl.n	751a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    74c6:	f004 fe2a 	bl	c11e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    74ca:	4682      	mov	sl, r0
    74cc:	4651      	mov	r1, sl
    74ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
    74d0:	f7fa fd6a 	bl	1fa8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    74d4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 7598 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    74d8:	4607      	mov	r7, r0
    74da:	fb90 f1f9 	sdiv	r1, r0, r9
    74de:	fb09 7011 	mls	r0, r9, r1, r7
    74e2:	4241      	negs	r1, r0
    74e4:	4650      	mov	r0, sl
    74e6:	f7fa fd2d 	bl	1f44 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    74ea:	6460      	str	r0, [r4, #68]	; 0x44
    74ec:	fb97 f0f9 	sdiv	r0, r7, r9
    74f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    74f2:	4408      	add	r0, r1
    74f4:	6420      	str	r0, [r4, #64]	; 0x40
    74f6:	f7fe fedf 	bl	62b8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    74fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
    74fc:	4288      	cmp	r0, r1
    74fe:	d80c      	bhi.n	751a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    7500:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    7504:	2101      	movs	r1, #1
    7506:	4620      	mov	r0, r4
    7508:	f007 f85b 	bl	e5c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    750c:	78a0      	ldrb	r0, [r4, #2]
    750e:	0740      	lsls	r0, r0, #29
    7510:	d503      	bpl.n	751a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    7512:	2101      	movs	r1, #1
    7514:	4620      	mov	r0, r4
    7516:	f000 fab1 	bl	7a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    751a:	f104 0130 	add.w	r1, r4, #48	; 0x30
    751e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7520:	f006 f89d 	bl	d65e <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7524:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7528:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    752a:	f006 f89b 	bl	d664 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    752e:	f7fe ff29 	bl	6384 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7532:	f8d8 0004 	ldr.w	r0, [r8, #4]
    7536:	1cc0      	adds	r0, r0, #3
    7538:	f006 f959 	bl	d7ee <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    753c:	73a8      	strb	r0, [r5, #14]
    753e:	78a0      	ldrb	r0, [r4, #2]
    7540:	07c0      	lsls	r0, r0, #31
    7542:	d01e      	beq.n	7582 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    7544:	a904      	add	r1, sp, #16
    7546:	2000      	movs	r0, #0
    7548:	f005 ff63 	bl	d412 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    754c:	b120      	cbz	r0, 7558 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138>
    754e:	f640 11c9 	movw	r1, #2505	; 0x9c9
    7552:	202d      	movs	r0, #45	; 0x2d
    7554:	f7fd f8f8 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7558:	20ff      	movs	r0, #255	; 0xff
    755a:	73e8      	strb	r0, [r5, #15]
    755c:	e00c      	b.n	7578 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    755e:	9806      	ldr	r0, [sp, #24]
    7560:	69e1      	ldr	r1, [r4, #28]
    7562:	4281      	cmp	r1, r0
    7564:	d008      	beq.n	7578 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    7566:	7881      	ldrb	r1, [r0, #2]
    7568:	73e9      	strb	r1, [r5, #15]
    756a:	f8d0 1003 	ldr.w	r1, [r0, #3]
    756e:	6129      	str	r1, [r5, #16]
    7570:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7574:	82a8      	strh	r0, [r5, #20]
    7576:	e004      	b.n	7582 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    7578:	a804      	add	r0, sp, #16
    757a:	f7fd fb1d 	bl	4bb8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    757e:	2800      	cmp	r0, #0
    7580:	d0ed      	beq.n	755e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    7582:	2000      	movs	r0, #0
    7584:	e794      	b.n	74b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    7586:	0000      	.short	0x0000
    7588:	200013a4 	.word	0x200013a4
    758c:	00007b90 	.word	0x00007b90
    7590:	200000f8 	.word	0x200000f8
    7594:	8e89bed6 	.word	0x8e89bed6
    7598:	000f4240 	.word	0x000f4240
    759c:	b510      	push	{r4, lr}
    759e:	4604      	mov	r4, r0
    75a0:	f7ff ff3e 	bl	7420 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    75a4:	2800      	cmp	r0, #0
    75a6:	d108      	bne.n	75ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    75a8:	4804      	ldr	r0, [pc, #16]	; (75bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    75aa:	7800      	ldrb	r0, [r0, #0]
    75ac:	2801      	cmp	r0, #1
    75ae:	d003      	beq.n	75b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    75b0:	2100      	movs	r1, #0
    75b2:	4620      	mov	r0, r4
    75b4:	f7ff fdb4 	bl	7120 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    75b8:	2000      	movs	r0, #0
    75ba:	bd10      	pop	{r4, pc}
    75bc:	200013a4 	.word	0x200013a4
    75c0:	480a      	ldr	r0, [pc, #40]	; (75ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    75c2:	b510      	push	{r4, lr}
    75c4:	490a      	ldr	r1, [pc, #40]	; (75f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    75c6:	6804      	ldr	r4, [r0, #0]
    75c8:	7808      	ldrb	r0, [r1, #0]
    75ca:	2800      	cmp	r0, #0
    75cc:	d00d      	beq.n	75ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    75ce:	7808      	ldrb	r0, [r1, #0]
    75d0:	2802      	cmp	r0, #2
    75d2:	d002      	beq.n	75da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    75d4:	7808      	ldrb	r0, [r1, #0]
    75d6:	2803      	cmp	r0, #3
    75d8:	d102      	bne.n	75e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    75da:	4620      	mov	r0, r4
    75dc:	f7ff ff0e 	bl	73fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    75e0:	4620      	mov	r0, r4
    75e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    75e6:	f000 b90f 	b.w	7808 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    75ea:	bd10      	pop	{r4, pc}
    75ec:	200000f8 	.word	0x200000f8
    75f0:	200013a4 	.word	0x200013a4
    75f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75f8:	4604      	mov	r4, r0
    75fa:	4827      	ldr	r0, [pc, #156]	; (7698 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    75fc:	460d      	mov	r5, r1
    75fe:	6840      	ldr	r0, [r0, #4]
    7600:	f004 f906 	bl	b810 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7604:	4e25      	ldr	r6, [pc, #148]	; (769c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    7606:	2004      	movs	r0, #4
    7608:	7030      	strb	r0, [r6, #0]
    760a:	b325      	cbz	r5, 7656 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    760c:	8860      	ldrh	r0, [r4, #2]
    760e:	2810      	cmp	r0, #16
    7610:	d02a      	beq.n	7668 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    7612:	f104 0020 	add.w	r0, r4, #32
    7616:	4680      	mov	r8, r0
    7618:	68b5      	ldr	r5, [r6, #8]
    761a:	f007 f83f 	bl	e69c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    761e:	4607      	mov	r7, r0
    7620:	4640      	mov	r0, r8
    7622:	f007 f864 	bl	e6ee <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7626:	1a38      	subs	r0, r7, r0
    7628:	1e40      	subs	r0, r0, #1
    762a:	b2c0      	uxtb	r0, r0
    762c:	8861      	ldrh	r1, [r4, #2]
    762e:	2228      	movs	r2, #40	; 0x28
    7630:	f000 faea 	bl	7c08 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7634:	4405      	add	r5, r0
    7636:	78a0      	ldrb	r0, [r4, #2]
    7638:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    763c:	b130      	cbz	r0, 764c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    763e:	6870      	ldr	r0, [r6, #4]
    7640:	4405      	add	r5, r0
    7642:	f007 f8ad 	bl	e7a0 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    7646:	4428      	add	r0, r5
    7648:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    764c:	7922      	ldrb	r2, [r4, #4]
    764e:	4629      	mov	r1, r5
    7650:	2000      	movs	r0, #0
    7652:	f004 f8ed 	bl	b830 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7656:	8860      	ldrh	r0, [r4, #2]
    7658:	2813      	cmp	r0, #19
    765a:	d013      	beq.n	7684 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    765c:	dc09      	bgt.n	7672 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    765e:	2810      	cmp	r0, #16
    7660:	d017      	beq.n	7692 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    7662:	2812      	cmp	r0, #18
    7664:	d109      	bne.n	767a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    7666:	e00d      	b.n	7684 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7668:	7921      	ldrb	r1, [r4, #4]
    766a:	2000      	movs	r0, #0
    766c:	f003 fe72 	bl	b354 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7670:	e7f1      	b.n	7656 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    7672:	2815      	cmp	r0, #21
    7674:	d006      	beq.n	7684 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7676:	281d      	cmp	r0, #29
    7678:	d004      	beq.n	7684 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    767a:	f640 5185 	movw	r1, #3461	; 0xd85
    767e:	202d      	movs	r0, #45	; 0x2d
    7680:	f7fd f862 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7684:	7922      	ldrb	r2, [r4, #4]
    7686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    768a:	2101      	movs	r1, #1
    768c:	2000      	movs	r0, #0
    768e:	f004 b94b 	b.w	b928 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7696:	0000      	.short	0x0000
    7698:	200000f8 	.word	0x200000f8
    769c:	200013a4 	.word	0x200013a4
    76a0:	b510      	push	{r4, lr}
    76a2:	4604      	mov	r4, r0
    76a4:	7800      	ldrb	r0, [r0, #0]
    76a6:	460b      	mov	r3, r1
    76a8:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    76ac:	29ff      	cmp	r1, #255	; 0xff
    76ae:	d010      	beq.n	76d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    76b0:	f104 0297 	add.w	r2, r4, #151	; 0x97
    76b4:	1e51      	subs	r1, r2, #1
    76b6:	4618      	mov	r0, r3
    76b8:	f7fe fd7c 	bl	61b4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    76bc:	b130      	cbz	r0, 76cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    76be:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    76c2:	f040 0002 	orr.w	r0, r0, #2
    76c6:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    76ca:	e011      	b.n	76f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    76cc:	f640 71bc 	movw	r1, #4028	; 0xfbc
    76d0:	e020      	b.n	7714 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
    76d2:	4812      	ldr	r0, [pc, #72]	; (771c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>)
    76d4:	6840      	ldr	r0, [r0, #4]
    76d6:	7801      	ldrb	r1, [r0, #0]
    76d8:	f3c1 1180 	ubfx	r1, r1, #6, #1
    76dc:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    76e0:	f8d0 1003 	ldr.w	r1, [r0, #3]
    76e4:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    76e8:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    76ec:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    76f0:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    76f4:	287f      	cmp	r0, #127	; 0x7f
    76f6:	d00b      	beq.n	7710 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f0>
    76f8:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    76fc:	207f      	movs	r0, #127	; 0x7f
    76fe:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    7702:	347e      	adds	r4, #126	; 0x7e
    7704:	2001      	movs	r0, #1
    7706:	75a0      	strb	r0, [r4, #22]
    7708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    770c:	f7ff b9a8 	b.w	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7710:	f640 6137 	movw	r1, #3639	; 0xe37
    7714:	202d      	movs	r0, #45	; 0x2d
    7716:	f7fd f817 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    771a:	0000      	.short	0x0000
    771c:	200000f8 	.word	0x200000f8
    7720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7724:	4690      	mov	r8, r2
    7726:	460e      	mov	r6, r1
    7728:	4604      	mov	r4, r0
    772a:	2903      	cmp	r1, #3
    772c:	d004      	beq.n	7738 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    772e:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7732:	b108      	cbz	r0, 7738 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7734:	2001      	movs	r0, #1
    7736:	e000      	b.n	773a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    7738:	2000      	movs	r0, #0
    773a:	4681      	mov	r9, r0
    773c:	f003 fdb4 	bl	b2a8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7740:	4605      	mov	r5, r0
    7742:	2e03      	cmp	r6, #3
    7744:	d003      	beq.n	774e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32e>
    7746:	2701      	movs	r7, #1
    7748:	2e05      	cmp	r6, #5
    774a:	d005      	beq.n	7758 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    774c:	e008      	b.n	7760 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    774e:	78a0      	ldrb	r0, [r4, #2]
    7750:	2702      	movs	r7, #2
    7752:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7756:	e001      	b.n	775c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    7758:	78a0      	ldrb	r0, [r4, #2]
    775a:	07c0      	lsls	r0, r0, #31
    775c:	2800      	cmp	r0, #0
    775e:	d04a      	beq.n	77f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    7760:	f1b9 0f00 	cmp.w	r9, #0
    7764:	d146      	bne.n	77f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    7766:	4826      	ldr	r0, [pc, #152]	; (7800 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e0>)
    7768:	7b80      	ldrb	r0, [r0, #14]
    776a:	b140      	cbz	r0, 777e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    776c:	f006 f842 	bl	d7f4 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7770:	f888 0000 	strb.w	r0, [r8]
    7774:	28ff      	cmp	r0, #255	; 0xff
    7776:	d002      	beq.n	777e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    7778:	f7fe fd36 	bl	61e8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    777c:	4305      	orrs	r5, r0
    777e:	4e21      	ldr	r6, [pc, #132]	; (7804 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
    7780:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7784:	6870      	ldr	r0, [r6, #4]
    7786:	7801      	ldrb	r1, [r0, #0]
    7788:	f3c1 1180 	ubfx	r1, r1, #6, #1
    778c:	4291      	cmp	r1, r2
    778e:	d106      	bne.n	779e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    7790:	2206      	movs	r2, #6
    7792:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7796:	1cc0      	adds	r0, r0, #3
    7798:	f004 fe24 	bl	c3e4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    779c:	b130      	cbz	r0, 77ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    779e:	2000      	movs	r0, #0
    77a0:	f898 1000 	ldrb.w	r1, [r8]
    77a4:	29ff      	cmp	r1, #255	; 0xff
    77a6:	d007      	beq.n	77b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x398>
    77a8:	b9a8      	cbnz	r0, 77d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    77aa:	e001      	b.n	77b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
    77ac:	2001      	movs	r0, #1
    77ae:	e7f7      	b.n	77a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
    77b0:	7e60      	ldrb	r0, [r4, #25]
    77b2:	4288      	cmp	r0, r1
    77b4:	d00f      	beq.n	77d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    77b6:	e008      	b.n	77ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    77b8:	b138      	cbz	r0, 77ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    77ba:	6871      	ldr	r1, [r6, #4]
    77bc:	f811 0b03 	ldrb.w	r0, [r1], #3
    77c0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    77c4:	f006 febb 	bl	e53e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    77c8:	b128      	cbz	r0, 77d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    77ca:	2000      	movs	r0, #0
    77cc:	78a1      	ldrb	r1, [r4, #2]
    77ce:	0749      	lsls	r1, r1, #29
    77d0:	d503      	bpl.n	77da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    77d2:	b990      	cbnz	r0, 77fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    77d4:	e00e      	b.n	77f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    77d6:	2001      	movs	r0, #1
    77d8:	e7f8      	b.n	77cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    77da:	b975      	cbnz	r5, 77fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    77dc:	7be0      	ldrb	r0, [r4, #15]
    77de:	b108      	cbz	r0, 77e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    77e0:	42b8      	cmp	r0, r7
    77e2:	d107      	bne.n	77f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    77e4:	6871      	ldr	r1, [r6, #4]
    77e6:	f811 0b03 	ldrb.w	r0, [r1], #3
    77ea:	f3c0 1080 	ubfx	r0, r0, #6, #1
    77ee:	f006 fea6 	bl	e53e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    77f2:	b110      	cbz	r0, 77fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    77f4:	2000      	movs	r0, #0
    77f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77fa:	2001      	movs	r0, #1
    77fc:	e7fb      	b.n	77f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    77fe:	0000      	.short	0x0000
    7800:	200013a4 	.word	0x200013a4
    7804:	200000f8 	.word	0x200000f8
    7808:	b570      	push	{r4, r5, r6, lr}
    780a:	4604      	mov	r4, r0
    780c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    780e:	4d13      	ldr	r5, [pc, #76]	; (785c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>)
    7810:	1c40      	adds	r0, r0, #1
    7812:	62a0      	str	r0, [r4, #40]	; 0x28
    7814:	7ba8      	ldrb	r0, [r5, #14]
    7816:	2600      	movs	r6, #0
    7818:	b120      	cbz	r0, 7824 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    781a:	f003 fd2b 	bl	b274 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    781e:	f003 fb0d 	bl	ae3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7822:	73ae      	strb	r6, [r5, #14]
    7824:	702e      	strb	r6, [r5, #0]
    7826:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    782a:	b108      	cbz	r0, 7830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>
    782c:	2101      	movs	r1, #1
    782e:	e00f      	b.n	7850 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    7830:	7b60      	ldrb	r0, [r4, #13]
    7832:	b160      	cbz	r0, 784e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    7834:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7836:	4288      	cmp	r0, r1
    7838:	d809      	bhi.n	784e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    783a:	2101      	movs	r1, #1
    783c:	4620      	mov	r0, r4
    783e:	f006 ffd6 	bl	e7ee <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7842:	78a0      	ldrb	r0, [r4, #2]
    7844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7848:	07c0      	lsls	r0, r0, #31
    784a:	f7ff b909 	b.w	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    784e:	2100      	movs	r1, #0
    7850:	4620      	mov	r0, r4
    7852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7856:	f006 bfca 	b.w	e7ee <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    785a:	0000      	.short	0x0000
    785c:	200013a4 	.word	0x200013a4
    7860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7864:	4604      	mov	r4, r0
    7866:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    786a:	4617      	mov	r7, r2
    786c:	460d      	mov	r5, r1
    786e:	f88d 0000 	strb.w	r0, [sp]
    7872:	9800      	ldr	r0, [sp, #0]
    7874:	9000      	str	r0, [sp, #0]
    7876:	f89d 0000 	ldrb.w	r0, [sp]
    787a:	b110      	cbz	r0, 7882 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x462>
    787c:	f640 4132 	movw	r1, #3122	; 0xc32
    7880:	e054      	b.n	792c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    7882:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    7886:	8828      	ldrh	r0, [r5, #0]
    7888:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    788c:	2b00      	cmp	r3, #0
    788e:	d15d      	bne.n	794c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
    7890:	68e8      	ldr	r0, [r5, #12]
    7892:	f006 f80d 	bl	d8b0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7896:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    789a:	8aa8      	ldrh	r0, [r5, #20]
    789c:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    78a0:	8ae8      	ldrh	r0, [r5, #22]
    78a2:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    78a6:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
    78aa:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    78ae:	7e21      	ldrb	r1, [r4, #24]
    78b0:	f104 0849 	add.w	r8, r4, #73	; 0x49
    78b4:	2600      	movs	r6, #0
    78b6:	b129      	cbz	r1, 78c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a4>
    78b8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    78bc:	4641      	mov	r1, r8
    78be:	f006 fd56 	bl	e36e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    78c2:	b940      	cbnz	r0, 78d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b6>
    78c4:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    78c8:	b170      	cbz	r0, 78e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    78ca:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    78ce:	4641      	mov	r1, r8
    78d0:	f006 fd44 	bl	e35c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    78d4:	b140      	cbz	r0, 78e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    78d6:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    78da:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    78de:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    78e2:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    78e6:	e003      	b.n	78f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    78e8:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    78ec:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    78f0:	4817      	ldr	r0, [pc, #92]	; (7950 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>)
    78f2:	2fff      	cmp	r7, #255	; 0xff
    78f4:	6840      	ldr	r0, [r0, #4]
    78f6:	7801      	ldrb	r1, [r0, #0]
    78f8:	f3c1 1180 	ubfx	r1, r1, #6, #1
    78fc:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    7900:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7904:	d015      	beq.n	7932 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
    7906:	67a1      	str	r1, [r4, #120]	; 0x78
    7908:	8880      	ldrh	r0, [r0, #4]
    790a:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    790e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    7912:	1e51      	subs	r1, r2, #1
    7914:	4638      	mov	r0, r7
    7916:	f7fe fc4d 	bl	61b4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    791a:	b128      	cbz	r0, 7928 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    791c:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    7920:	f040 0002 	orr.w	r0, r0, #2
    7924:	7020      	strb	r0, [r4, #0]
    7926:	e00a      	b.n	793e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    7928:	f640 4153 	movw	r1, #3155	; 0xc53
    792c:	202d      	movs	r0, #45	; 0x2d
    792e:	f7fc ff0b 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7932:	f844 1f6c 	str.w	r1, [r4, #108]!
    7936:	8880      	ldrh	r0, [r0, #4]
    7938:	80a0      	strh	r0, [r4, #4]
    793a:	60e6      	str	r6, [r4, #12]
    793c:	8226      	strh	r6, [r4, #16]
    793e:	8828      	ldrh	r0, [r5, #0]
    7940:	f7fd fb1c 	bl	4f7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7944:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7948:	f005 bc40 	b.w	d1cc <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    794c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7950:	200000f8 	.word	0x200000f8
    7954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7958:	4604      	mov	r4, r0
    795a:	20ff      	movs	r0, #255	; 0xff
    795c:	f88d 0000 	strb.w	r0, [sp]
    7960:	2601      	movs	r6, #1
    7962:	466a      	mov	r2, sp
    7964:	2105      	movs	r1, #5
    7966:	4620      	mov	r0, r4
    7968:	f7ff feda 	bl	7720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    796c:	b3e8      	cbz	r0, 79ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    796e:	4d24      	ldr	r5, [pc, #144]	; (7a00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    7970:	4f24      	ldr	r7, [pc, #144]	; (7a04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    7972:	46b0      	mov	r8, r6
    7974:	6868      	ldr	r0, [r5, #4]
    7976:	7bfa      	ldrb	r2, [r7, #15]
    7978:	f04f 0900 	mov.w	r9, #0
    797c:	7801      	ldrb	r1, [r0, #0]
    797e:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7982:	4291      	cmp	r1, r2
    7984:	d106      	bne.n	7994 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    7986:	2206      	movs	r2, #6
    7988:	f107 0110 	add.w	r1, r7, #16
    798c:	1cc0      	adds	r0, r0, #3
    798e:	f004 fd29 	bl	c3e4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7992:	b350      	cbz	r0, 79ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    7994:	686a      	ldr	r2, [r5, #4]
    7996:	69e0      	ldr	r0, [r4, #28]
    7998:	7812      	ldrb	r2, [r2, #0]
    799a:	f810 1f85 	ldrb.w	r1, [r0, #133]!
    799e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    79a2:	4011      	ands	r1, r2
    79a4:	7001      	strb	r1, [r0, #0]
    79a6:	2201      	movs	r2, #1
    79a8:	4620      	mov	r0, r4
    79aa:	69e1      	ldr	r1, [r4, #28]
    79ac:	f000 f894 	bl	7ad8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
    79b0:	2300      	movs	r3, #0
    79b2:	f89d 2000 	ldrb.w	r2, [sp]
    79b6:	4620      	mov	r0, r4
    79b8:	69e1      	ldr	r1, [r4, #28]
    79ba:	f7ff ff51 	bl	7860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    79be:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
    79c2:	f7ff f84d 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    79c6:	f887 9000 	strb.w	r9, [r7]
    79ca:	2200      	movs	r2, #0
    79cc:	4621      	mov	r1, r4
    79ce:	69e0      	ldr	r0, [r4, #28]
    79d0:	f000 fa58 	bl	7e84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    79d4:	6868      	ldr	r0, [r5, #4]
    79d6:	69e1      	ldr	r1, [r4, #28]
    79d8:	f8d0 2003 	ldr.w	r2, [r0, #3]
    79dc:	f841 2f03 	str.w	r2, [r1, #3]!
    79e0:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    79e4:	808a      	strh	r2, [r1, #4]
    79e6:	7800      	ldrb	r0, [r0, #0]
    79e8:	e000      	b.n	79ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
    79ea:	e004      	b.n	79f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
    79ec:	69e1      	ldr	r1, [r4, #28]
    79ee:	f3c0 1080 	ubfx	r0, r0, #6, #1
    79f2:	7088      	strb	r0, [r1, #2]
    79f4:	e000      	b.n	79f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
    79f6:	2600      	movs	r6, #0
    79f8:	4630      	mov	r0, r6
    79fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    79fe:	0000      	.short	0x0000
    7a00:	200000f8 	.word	0x200000f8
    7a04:	200013a4 	.word	0x200013a4
    7a08:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7a0a:	4604      	mov	r4, r0
    7a0c:	20ff      	movs	r0, #255	; 0xff
    7a0e:	f88d 0000 	strb.w	r0, [sp]
    7a12:	2501      	movs	r5, #1
    7a14:	466a      	mov	r2, sp
    7a16:	2103      	movs	r1, #3
    7a18:	4620      	mov	r0, r4
    7a1a:	f7ff fe81 	bl	7720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    7a1e:	b328      	cbz	r0, 7a6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
    7a20:	7b20      	ldrb	r0, [r4, #12]
    7a22:	b168      	cbz	r0, 7a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7a24:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    7a28:	f88d 0004 	strb.w	r0, [sp, #4]
    7a2c:	9801      	ldr	r0, [sp, #4]
    7a2e:	9001      	str	r0, [sp, #4]
    7a30:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7a34:	b920      	cbnz	r0, 7a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7a36:	f89d 1000 	ldrb.w	r1, [sp]
    7a3a:	4620      	mov	r0, r4
    7a3c:	f7ff fe30 	bl	76a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    7a40:	4e0c      	ldr	r6, [pc, #48]	; (7a74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    7a42:	2100      	movs	r1, #0
    7a44:	6870      	ldr	r0, [r6, #4]
    7a46:	8001      	strh	r1, [r0, #0]
    7a48:	2104      	movs	r1, #4
    7a4a:	f006 fa50 	bl	deee <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7a4e:	4620      	mov	r0, r4
    7a50:	f000 f88a 	bl	7b68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    7a54:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    7a56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7a58:	6870      	ldr	r0, [r6, #4]
    7a5a:	f006 fa7f 	bl	df5c <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7a5e:	4906      	ldr	r1, [pc, #24]	; (7a78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    7a60:	2005      	movs	r0, #5
    7a62:	7008      	strb	r0, [r1, #0]
    7a64:	6870      	ldr	r0, [r6, #4]
    7a66:	f003 fed3 	bl	b810 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7a6a:	e000      	b.n	7a6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
    7a6c:	2500      	movs	r5, #0
    7a6e:	4628      	mov	r0, r5
    7a70:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    7a72:	0000      	.short	0x0000
    7a74:	200000f8 	.word	0x200000f8
    7a78:	200013a4 	.word	0x200013a4
    7a7c:	b570      	push	{r4, r5, r6, lr}
    7a7e:	4604      	mov	r4, r0
    7a80:	460e      	mov	r6, r1
    7a82:	7e40      	ldrb	r0, [r0, #25]
    7a84:	f7fe fb64 	bl	6150 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7a88:	0005      	movs	r5, r0
    7a8a:	d019      	beq.n	7ac0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    7a8c:	2110      	movs	r1, #16
    7a8e:	f006 f89b 	bl	dbc8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7a92:	2800      	cmp	r0, #0
    7a94:	d114      	bne.n	7ac0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    7a96:	2001      	movs	r0, #1
    7a98:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7a9c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7aa0:	4632      	mov	r2, r6
    7aa2:	460c      	mov	r4, r1
    7aa4:	4628      	mov	r0, r5
    7aa6:	f005 fe47 	bl	d738 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7aaa:	4621      	mov	r1, r4
    7aac:	4c05      	ldr	r4, [pc, #20]	; (7ac4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    7aae:	6860      	ldr	r0, [r4, #4]
    7ab0:	f006 fa38 	bl	df24 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7ab4:	6860      	ldr	r0, [r4, #4]
    7ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7aba:	2101      	movs	r1, #1
    7abc:	f006 ba38 	b.w	df30 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7ac0:	bd70      	pop	{r4, r5, r6, pc}
    7ac2:	0000      	.short	0x0000
    7ac4:	200000f8 	.word	0x200000f8
    7ac8:	4802      	ldr	r0, [pc, #8]	; (7ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    7aca:	2101      	movs	r1, #1
    7acc:	6800      	ldr	r0, [r0, #0]
    7ace:	f7ff bb27 	b.w	7120 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7ad2:	0000      	.short	0x0000
    7ad4:	200000f8 	.word	0x200000f8
    7ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7adc:	4e21      	ldr	r6, [pc, #132]	; (7b64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>)
    7ade:	4680      	mov	r8, r0
    7ae0:	460c      	mov	r4, r1
    7ae2:	6870      	ldr	r0, [r6, #4]
    7ae4:	4615      	mov	r5, r2
    7ae6:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7aea:	6121      	str	r1, [r4, #16]
    7aec:	8881      	ldrh	r1, [r0, #4]
    7aee:	8321      	strh	r1, [r4, #24]
    7af0:	7981      	ldrb	r1, [r0, #6]
    7af2:	76a1      	strb	r1, [r4, #26]
    7af4:	8940      	ldrh	r0, [r0, #10]
    7af6:	f005 fed7 	bl	d8a8 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7afa:	4607      	mov	r7, r0
    7afc:	60e0      	str	r0, [r4, #12]
    7afe:	6870      	ldr	r0, [r6, #4]
    7b00:	4639      	mov	r1, r7
    7b02:	7d80      	ldrb	r0, [r0, #22]
    7b04:	f006 f85b 	bl	dbbe <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7b08:	83a0      	strh	r0, [r4, #28]
    7b0a:	6870      	ldr	r0, [r6, #4]
    7b0c:	4639      	mov	r1, r7
    7b0e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7b12:	f006 f850 	bl	dbb6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7b16:	6220      	str	r0, [r4, #32]
    7b18:	6870      	ldr	r0, [r6, #4]
    7b1a:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7b1e:	82a1      	strh	r1, [r4, #20]
    7b20:	8841      	ldrh	r1, [r0, #2]
    7b22:	82e1      	strh	r1, [r4, #22]
    7b24:	6841      	ldr	r1, [r0, #4]
    7b26:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    7b2a:	7a01      	ldrb	r1, [r0, #8]
    7b2c:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
    7b30:	7a41      	ldrb	r1, [r0, #9]
    7b32:	f001 011f 	and.w	r1, r1, #31
    7b36:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    7b3a:	7a40      	ldrb	r0, [r0, #9]
    7b3c:	0940      	lsrs	r0, r0, #5
    7b3e:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
    7b42:	f104 0062 	add.w	r0, r4, #98	; 0x62
    7b46:	7205      	strb	r5, [r0, #8]
    7b48:	7245      	strb	r5, [r0, #9]
    7b4a:	2101      	movs	r1, #1
    7b4c:	7281      	strb	r1, [r0, #10]
    7b4e:	2100      	movs	r1, #0
    7b50:	3836      	subs	r0, #54	; 0x36
    7b52:	f006 fb77 	bl	e244 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7b56:	f898 000e 	ldrb.w	r0, [r8, #14]
    7b5a:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    7b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b62:	0000      	.short	0x0000
    7b64:	200000f8 	.word	0x200000f8
    7b68:	b570      	push	{r4, r5, r6, lr}
    7b6a:	4d07      	ldr	r5, [pc, #28]	; (7b88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x768>)
    7b6c:	4604      	mov	r4, r0
    7b6e:	f100 0149 	add.w	r1, r0, #73	; 0x49
    7b72:	6868      	ldr	r0, [r5, #4]
    7b74:	f006 f9e3 	bl	df3e <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7b78:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    7b7c:	6868      	ldr	r0, [r5, #4]
    7b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b82:	f006 b9e2 	b.w	df4a <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7b86:	0000      	.short	0x0000
    7b88:	200000f8 	.word	0x200000f8
    7b8c:	00555555 	.word	0x00555555
    7b90:	000073a9 	.word	0x000073a9
    7b94:	00007235 	.word	0x00007235
    7b98:	00007325 	.word	0x00007325
    7b9c:	00000000 	.word	0x00000000
    7ba0:	000072fd 	.word	0x000072fd
    7ba4:	00007355 	.word	0x00007355
    7ba8:	0000e565 	.word	0x0000e565
    7bac:	0000e56b 	.word	0x0000e56b
    7bb0:	0000759d 	.word	0x0000759d
    7bb4:	000075c1 	.word	0x000075c1
    7bb8:	00007ac9 	.word	0x00007ac9
    7bbc:	00007bac 	.word	0x00007bac
    7bc0:	00007ba4 	.word	0x00007ba4
    7bc4:	00007ba0 	.word	0x00007ba0

00007bc8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7bc8:	b510      	push	{r4, lr}
    7bca:	1e42      	subs	r2, r0, #1
    7bcc:	2a02      	cmp	r2, #2
    7bce:	d901      	bls.n	7bd4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7bd0:	21ca      	movs	r1, #202	; 0xca
    7bd2:	e009      	b.n	7be8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    7bd4:	1e40      	subs	r0, r0, #1
    7bd6:	2910      	cmp	r1, #16
    7bd8:	d009      	beq.n	7bee <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7bda:	2912      	cmp	r1, #18
    7bdc:	d00c      	beq.n	7bf8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7bde:	2913      	cmp	r1, #19
    7be0:	d00a      	beq.n	7bf8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7be2:	2915      	cmp	r1, #21
    7be4:	d005      	beq.n	7bf2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    7be6:	21d8      	movs	r1, #216	; 0xd8
    7be8:	202f      	movs	r0, #47	; 0x2f
    7bea:	f7fc fdad 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bee:	4905      	ldr	r1, [pc, #20]	; (7c04 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7bf0:	e004      	b.n	7bfc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7bf2:	4904      	ldr	r1, [pc, #16]	; (7c04 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7bf4:	1d89      	adds	r1, r1, #6
    7bf6:	e001      	b.n	7bfc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7bf8:	4902      	ldr	r1, [pc, #8]	; (7c04 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7bfa:	1f89      	subs	r1, r1, #6
    7bfc:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7c00:	bd10      	pop	{r4, pc}
    7c02:	0000      	.short	0x0000
    7c04:	0000e7b8 	.word	0x0000e7b8

00007c08 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7c08:	1e42      	subs	r2, r0, #1
    7c0a:	b510      	push	{r4, lr}
    7c0c:	b2d2      	uxtb	r2, r2
    7c0e:	2a01      	cmp	r2, #1
    7c10:	d903      	bls.n	7c1a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7c12:	291d      	cmp	r1, #29
    7c14:	d001      	beq.n	7c1a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7c16:	21ee      	movs	r1, #238	; 0xee
    7c18:	e00d      	b.n	7c36 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7c1a:	2913      	cmp	r1, #19
    7c1c:	d013      	beq.n	7c46 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7c1e:	dc04      	bgt.n	7c2a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7c20:	2910      	cmp	r1, #16
    7c22:	d00b      	beq.n	7c3c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7c24:	2912      	cmp	r1, #18
    7c26:	d104      	bne.n	7c32 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7c28:	e00d      	b.n	7c46 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7c2a:	2915      	cmp	r1, #21
    7c2c:	d008      	beq.n	7c40 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7c2e:	291d      	cmp	r1, #29
    7c30:	d00e      	beq.n	7c50 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    7c32:	f44f 7181 	mov.w	r1, #258	; 0x102
    7c36:	202f      	movs	r0, #47	; 0x2f
    7c38:	f7fc fd86 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c3c:	4807      	ldr	r0, [pc, #28]	; (7c5c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7c3e:	e004      	b.n	7c4a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7c40:	4806      	ldr	r0, [pc, #24]	; (7c5c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7c42:	3008      	adds	r0, #8
    7c44:	e001      	b.n	7c4a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7c46:	4805      	ldr	r0, [pc, #20]	; (7c5c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7c48:	1d00      	adds	r0, r0, #4
    7c4a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7c4e:	bd10      	pop	{r4, pc}
    7c50:	f240 315a 	movw	r1, #858	; 0x35a
    7c54:	fb10 f001 	smulbb	r0, r0, r1
    7c58:	bd10      	pop	{r4, pc}
    7c5a:	0000      	.short	0x0000
    7c5c:	0000e7a6 	.word	0x0000e7a6

00007c60 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    7c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c64:	4604      	mov	r4, r0
    7c66:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    7c6a:	4615      	mov	r5, r2
    7c6c:	460f      	mov	r7, r1
    7c6e:	2800      	cmp	r0, #0
    7c70:	d157      	bne.n	7d22 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    7c72:	4621      	mov	r1, r4
    7c74:	4841      	ldr	r0, [pc, #260]	; (7d7c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
    7c76:	f7fb f855 	bl	2d24 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7c7a:	4606      	mov	r6, r0
    7c7c:	2820      	cmp	r0, #32
    7c7e:	d050      	beq.n	7d22 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    7c80:	2234      	movs	r2, #52	; 0x34
    7c82:	2100      	movs	r1, #0
    7c84:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    7c88:	f004 fc38 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c8c:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    7c90:	2601      	movs	r6, #1
    7c92:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    7c96:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    7c9a:	b13f      	cbz	r7, 7cac <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    7c9c:	2000      	movs	r0, #0
    7c9e:	f000 fbf9 	bl	8494 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x494>
    7ca2:	f000 0007 	and.w	r0, r0, #7
    7ca6:	1c40      	adds	r0, r0, #1
    7ca8:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
    7cac:	4620      	mov	r0, r4
    7cae:	f006 ff63 	bl	eb78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    7cb2:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    7cb6:	2003      	movs	r0, #3
    7cb8:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    7cbc:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    7cc0:	2700      	movs	r7, #0
    7cc2:	f804 7fb8 	strb.w	r7, [r4, #184]!
    7cc6:	f7fa fa99 	bl	21fc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7cca:	8921      	ldrh	r1, [r4, #8]
    7ccc:	3cb8      	subs	r4, #184	; 0xb8
    7cce:	4288      	cmp	r0, r1
    7cd0:	d800      	bhi.n	7cd4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    7cd2:	4608      	mov	r0, r1
    7cd4:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    7cd8:	fa1f f880 	uxth.w	r8, r0
    7cdc:	4620      	mov	r0, r4
    7cde:	f006 fbee 	bl	e4be <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7ce2:	b308      	cbz	r0, 7d28 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
    7ce4:	f008 f9aa 	bl	1003c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7ce8:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7cec:	b281      	uxth	r1, r0
    7cee:	4628      	mov	r0, r5
    7cf0:	f004 fa49 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7cf4:	4428      	add	r0, r5
    7cf6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    7cfa:	34a4      	adds	r4, #164	; 0xa4
    7cfc:	f004 fa0f 	bl	c11e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7d00:	4641      	mov	r1, r8
    7d02:	f7fa f91f 	bl	1f44 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7d06:	6220      	str	r0, [r4, #32]
    7d08:	f804 7c03 	strb.w	r7, [r4, #-3]
    7d0c:	7126      	strb	r6, [r4, #4]
    7d0e:	2001      	movs	r0, #1
    7d10:	f006 fd42 	bl	e798 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7d14:	f200 1009 	addw	r0, r0, #265	; 0x109
    7d18:	1a28      	subs	r0, r5, r0
    7d1a:	62a7      	str	r7, [r4, #40]	; 0x28
    7d1c:	60a0      	str	r0, [r4, #8]
    7d1e:	3ca4      	subs	r4, #164	; 0xa4
    7d20:	e017      	b.n	7d52 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
    7d22:	200c      	movs	r0, #12
    7d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d28:	4620      	mov	r0, r4
    7d2a:	f006 fe78 	bl	ea1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    7d2e:	f844 0fbc 	str.w	r0, [r4, #188]!
    7d32:	f804 6c1b 	strb.w	r6, [r4, #-27]
    7d36:	f004 f9f2 	bl	c11e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7d3a:	4606      	mov	r6, r0
    7d3c:	2000      	movs	r0, #0
    7d3e:	f006 ffc7 	bl	ecd0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    7d42:	eb00 0108 	add.w	r1, r0, r8
    7d46:	4630      	mov	r0, r6
    7d48:	f7fa f8fc 	bl	1f44 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7d4c:	6125      	str	r5, [r4, #16]
    7d4e:	60a0      	str	r0, [r4, #8]
    7d50:	3cbc      	subs	r4, #188	; 0xbc
    7d52:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    7d56:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    7d5a:	f006 ff0b 	bl	eb74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    7d5e:	b138      	cbz	r0, 7d70 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
    7d60:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    7d64:	2100      	movs	r1, #0
    7d66:	4620      	mov	r0, r4
    7d68:	f006 fbcb 	bl	e502 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    7d6c:	2000      	movs	r0, #0
    7d6e:	e7d9      	b.n	7d24 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
    7d70:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
    7d74:	2030      	movs	r0, #48	; 0x30
    7d76:	f7fc fce7 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d7a:	0000      	.short	0x0000
    7d7c:	0000ece5 	.word	0x0000ece5

00007d80 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    7d80:	4808      	ldr	r0, [pc, #32]	; (7da4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    7d82:	b510      	push	{r4, lr}
    7d84:	2100      	movs	r1, #0
    7d86:	7001      	strb	r1, [r0, #0]
    7d88:	2201      	movs	r2, #1
    7d8a:	7082      	strb	r2, [r0, #2]
    7d8c:	7041      	strb	r1, [r0, #1]
    7d8e:	3018      	adds	r0, #24
    7d90:	f006 fad7 	bl	e342 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7d94:	4803      	ldr	r0, [pc, #12]	; (7da4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    7d96:	3020      	adds	r0, #32
    7d98:	f006 fad3 	bl	e342 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7da0:	f006 bd65 	b.w	e86e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    7da4:	20000108 	.word	0x20000108

00007da8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    7da8:	4901      	ldr	r1, [pc, #4]	; (7db0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    7daa:	7008      	strb	r0, [r1, #0]
    7dac:	4770      	bx	lr
    7dae:	0000      	.short	0x0000
    7db0:	20000108 	.word	0x20000108

00007db4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    7db4:	4905      	ldr	r1, [pc, #20]	; (7dcc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    7db6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7dba:	fbb1 f1f2 	udiv	r1, r1, r2
    7dbe:	b510      	push	{r4, lr}
    7dc0:	f201 2191 	addw	r1, r1, #657	; 0x291
    7dc4:	f006 fa57 	bl	e276 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7dc8:	b280      	uxth	r0, r0
    7dca:	bd10      	pop	{r4, pc}
    7dcc:	0001527d 	.word	0x0001527d

00007dd0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dd4:	4c10      	ldr	r4, [pc, #64]	; (7e18 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    7dd6:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    7dda:	f003 fc17 	bl	b60c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7dde:	4606      	mov	r6, r0
    7de0:	7820      	ldrb	r0, [r4, #0]
    7de2:	b128      	cbz	r0, 7df0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7de4:	4632      	mov	r2, r6
    7de6:	4639      	mov	r1, r7
    7de8:	4628      	mov	r0, r5
    7dea:	f005 fd67 	bl	d8bc <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7dee:	4605      	mov	r5, r0
    7df0:	6860      	ldr	r0, [r4, #4]
    7df2:	4285      	cmp	r5, r0
    7df4:	d005      	beq.n	7e02 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7df6:	68e1      	ldr	r1, [r4, #12]
    7df8:	1a28      	subs	r0, r5, r0
    7dfa:	4408      	add	r0, r1
    7dfc:	60e0      	str	r0, [r4, #12]
    7dfe:	f7fb f89b 	bl	2f38 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7e02:	6065      	str	r5, [r4, #4]
    7e04:	42ae      	cmp	r6, r5
    7e06:	d801      	bhi.n	7e0c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7e08:	7860      	ldrb	r0, [r4, #1]
    7e0a:	b110      	cbz	r0, 7e12 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    7e0c:	2000      	movs	r0, #0
    7e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e12:	2001      	movs	r0, #1
    7e14:	e7fb      	b.n	7e0e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    7e16:	0000      	.short	0x0000
    7e18:	20000108 	.word	0x20000108

00007e1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7e1c:	b510      	push	{r4, lr}
    7e1e:	4604      	mov	r4, r0
    7e20:	2905      	cmp	r1, #5
    7e22:	d227      	bcs.n	7e74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    7e24:	e8df f001 	tbb	[pc, r1]
    7e28:	0e030b05 	.word	0x0e030b05
    7e2c:	000f      	.short	0x000f
    7e2e:	2100      	movs	r1, #0
    7e30:	e000      	b.n	7e34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    7e32:	2101      	movs	r1, #1
    7e34:	4620      	mov	r0, r4
    7e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e3a:	f000 b8f5 	b.w	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7e3e:	2003      	movs	r0, #3
    7e40:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    7e44:	bd10      	pop	{r4, pc}
    7e46:	f003 fc1d 	bl	b684 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7e4a:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    7e4e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7e52:	f008 f98c 	bl	1016e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7e56:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    7e5a:	1a09      	subs	r1, r1, r0
    7e5c:	4808      	ldr	r0, [pc, #32]	; (7e80 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64>)
    7e5e:	6842      	ldr	r2, [r0, #4]
    7e60:	440a      	add	r2, r1
    7e62:	6042      	str	r2, [r0, #4]
    7e64:	6882      	ldr	r2, [r0, #8]
    7e66:	4411      	add	r1, r2
    7e68:	6081      	str	r1, [r0, #8]
    7e6a:	4620      	mov	r0, r4
    7e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e70:	f006 be13 	b.w	ea9a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fe>
    7e74:	f240 7151 	movw	r1, #1873	; 0x751
    7e78:	2030      	movs	r0, #48	; 0x30
    7e7a:	f7fc fc65 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e7e:	0000      	.short	0x0000
    7e80:	20000108 	.word	0x20000108

00007e84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    7e84:	b570      	push	{r4, r5, r6, lr}
    7e86:	460c      	mov	r4, r1
    7e88:	4605      	mov	r5, r0
    7e8a:	b112      	cbz	r2, 7e92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    7e8c:	f240 717b 	movw	r1, #1915	; 0x77b
    7e90:	e010      	b.n	7eb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    7e92:	f003 fbbb 	bl	b60c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7e96:	4601      	mov	r1, r0
    7e98:	2200      	movs	r2, #0
    7e9a:	4620      	mov	r0, r4
    7e9c:	f006 fece 	bl	ec3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    7ea0:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    7ea4:	462a      	mov	r2, r5
    7ea6:	4905      	ldr	r1, [pc, #20]	; (7ebc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    7ea8:	f7fa fdfe 	bl	2aa8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    7eac:	2800      	cmp	r0, #0
    7eae:	d104      	bne.n	7eba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    7eb0:	f240 7164 	movw	r1, #1892	; 0x764
    7eb4:	2030      	movs	r0, #48	; 0x30
    7eb6:	f7fc fc47 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7eba:	bd70      	pop	{r4, r5, r6, pc}
    7ebc:	0000ed85 	.word	0x0000ed85
    7ec0:	b510      	push	{r4, lr}
    7ec2:	280c      	cmp	r0, #12
    7ec4:	d304      	bcc.n	7ed0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    7ec6:	f240 3116 	movw	r1, #790	; 0x316
    7eca:	2006      	movs	r0, #6
    7ecc:	f7fc fc3c 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ed0:	4901      	ldr	r1, [pc, #4]	; (7ed8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    7ed2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7ed6:	bd10      	pop	{r4, pc}
    7ed8:	0000ef7e 	.word	0x0000ef7e
    7edc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7ede:	4c18      	ldr	r4, [pc, #96]	; (7f40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    7ee0:	2001      	movs	r0, #1
    7ee2:	7060      	strb	r0, [r4, #1]
    7ee4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7ee8:	e00b      	b.n	7f02 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    7eea:	2100      	movs	r1, #0
    7eec:	f005 fa87 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7ef0:	0006      	movs	r6, r0
    7ef2:	d010      	beq.n	7f16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    7ef4:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
    7ef8:	f7fa fe08 	bl	2b0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7efc:	4630      	mov	r0, r6
    7efe:	f006 fe90 	bl	ec22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    7f02:	4669      	mov	r1, sp
    7f04:	2000      	movs	r0, #0
    7f06:	f005 fa84 	bl	d412 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7f0a:	b180      	cbz	r0, 7f2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    7f0c:	f44f 7187 	mov.w	r1, #270	; 0x10e
    7f10:	2030      	movs	r0, #48	; 0x30
    7f12:	f7fc fc19 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f16:	f44f 7197 	mov.w	r1, #302	; 0x12e
    7f1a:	e7f9      	b.n	7f10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    7f1c:	9802      	ldr	r0, [sp, #8]
    7f1e:	b130      	cbz	r0, 7f2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    7f20:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    7f24:	b119      	cbz	r1, 7f2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    7f26:	8800      	ldrh	r0, [r0, #0]
    7f28:	42a8      	cmp	r0, r5
    7f2a:	d1de      	bne.n	7eea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    7f2c:	e004      	b.n	7f38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    7f2e:	4668      	mov	r0, sp
    7f30:	f7fc fe42 	bl	4bb8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7f34:	2800      	cmp	r0, #0
    7f36:	d0f1      	beq.n	7f1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    7f38:	2000      	movs	r0, #0
    7f3a:	7060      	strb	r0, [r4, #1]
    7f3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7f3e:	0000      	.short	0x0000
    7f40:	20000108 	.word	0x20000108
    7f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f48:	4604      	mov	r4, r0
    7f4a:	4836      	ldr	r0, [pc, #216]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7f4c:	461e      	mov	r6, r3
    7f4e:	4690      	mov	r8, r2
    7f50:	7880      	ldrb	r0, [r0, #2]
    7f52:	4689      	mov	r9, r1
    7f54:	2500      	movs	r5, #0
    7f56:	b368      	cbz	r0, 7fb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7f58:	f7fc f876 	bl	4048 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7f5c:	b350      	cbz	r0, 7fb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7f5e:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    7f62:	2802      	cmp	r0, #2
    7f64:	d326      	bcc.n	7fb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7f66:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7f6a:	2802      	cmp	r0, #2
    7f6c:	d022      	beq.n	7fb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7f6e:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    7f72:	b9f8      	cbnz	r0, 7fb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7f74:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    7f78:	f7ff ffa2 	bl	7ec0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7f7c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7f80:	b281      	uxth	r1, r0
    7f82:	8031      	strh	r1, [r6, #0]
    7f84:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7f88:	2700      	movs	r7, #0
    7f8a:	2801      	cmp	r0, #1
    7f8c:	d015      	beq.n	7fba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    7f8e:	68e0      	ldr	r0, [r4, #12]
    7f90:	f004 f8f9 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7f94:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    7f98:	b280      	uxth	r0, r0
    7f9a:	4442      	add	r2, r8
    7f9c:	eba2 0109 	sub.w	r1, r2, r9
    7fa0:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    7fa4:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    7fa8:	1a82      	subs	r2, r0, r2
    7faa:	fb01 7502 	mla	r5, r1, r2, r7
    7fae:	2001      	movs	r0, #1
    7fb0:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
    7fb4:	4628      	mov	r0, r5
    7fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fba:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    7fbe:	2803      	cmp	r0, #3
    7fc0:	d02c      	beq.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    7fc2:	2101      	movs	r1, #1
    7fc4:	2000      	movs	r0, #0
    7fc6:	f005 fd33 	bl	da30 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7fca:	6a21      	ldr	r1, [r4, #32]
    7fcc:	1847      	adds	r7, r0, r1
    7fce:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    7fd2:	8831      	ldrh	r1, [r6, #0]
    7fd4:	34d0      	adds	r4, #208	; 0xd0
    7fd6:	f004 f8d6 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7fda:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7fdc:	6e21      	ldr	r1, [r4, #96]	; 0x60
    7fde:	1a82      	subs	r2, r0, r2
    7fe0:	fb01 5502 	mla	r5, r1, r2, r5
    7fe4:	65a0      	str	r0, [r4, #88]	; 0x58
    7fe6:	8831      	ldrh	r1, [r6, #0]
    7fe8:	4638      	mov	r0, r7
    7fea:	f004 f8cc 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7fee:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    7ff0:	66a0      	str	r0, [r4, #104]	; 0x68
    7ff2:	1a41      	subs	r1, r0, r1
    7ff4:	440d      	add	r5, r1
    7ff6:	8831      	ldrh	r1, [r6, #0]
    7ff8:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    7ffc:	f004 f8c3 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8000:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    8002:	4442      	add	r2, r8
    8004:	eba2 0109 	sub.w	r1, r2, r9
    8008:	6e22      	ldr	r2, [r4, #96]	; 0x60
    800a:	1a89      	subs	r1, r1, r2
    800c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    800e:	1e49      	subs	r1, r1, #1
    8010:	1a82      	subs	r2, r0, r2
    8012:	fb01 5502 	mla	r5, r1, r2, r5
    8016:	66e0      	str	r0, [r4, #108]	; 0x6c
    8018:	3cd0      	subs	r4, #208	; 0xd0
    801a:	e7c8      	b.n	7fae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    801c:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8020:	e7d3      	b.n	7fca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    8022:	0000      	.short	0x0000
    8024:	20000108 	.word	0x20000108
    8028:	b538      	push	{r3, r4, r5, lr}
    802a:	2500      	movs	r5, #0
    802c:	4604      	mov	r4, r0
    802e:	2901      	cmp	r1, #1
    8030:	d102      	bne.n	8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
    8032:	4811      	ldr	r0, [pc, #68]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    8034:	7840      	ldrb	r0, [r0, #1]
    8036:	b178      	cbz	r0, 8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    8038:	2004      	movs	r0, #4
    803a:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    803e:	bf00      	nop
    8040:	f006 fd24 	bl	ea8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    8044:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
    8048:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    804c:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    8050:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    8054:	77e5      	strb	r5, [r4, #31]
    8056:	bd38      	pop	{r3, r4, r5, pc}
    8058:	9500      	str	r5, [sp, #0]
    805a:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    805e:	2301      	movs	r3, #1
    8060:	2200      	movs	r2, #0
    8062:	4620      	mov	r0, r4
    8064:	f000 f80a 	bl	807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>
    8068:	2800      	cmp	r0, #0
    806a:	d0e9      	beq.n	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    806c:	f240 61c9 	movw	r1, #1737	; 0x6c9
    8070:	2030      	movs	r0, #48	; 0x30
    8072:	f7fc fb69 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8076:	0000      	.short	0x0000
    8078:	20000108 	.word	0x20000108
    807c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8080:	4604      	mov	r4, r0
    8082:	b085      	sub	sp, #20
    8084:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    8088:	469a      	mov	sl, r3
    808a:	e9cd 3000 	strd	r3, r0, [sp]
    808e:	460f      	mov	r7, r1
    8090:	f007 ffd4 	bl	1003c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8094:	4605      	mov	r5, r0
    8096:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    809a:	f7ff ff11 	bl	7ec0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    809e:	4428      	add	r0, r5
    80a0:	f8ad 0008 	strh.w	r0, [sp, #8]
    80a4:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    80a8:	280d      	cmp	r0, #13
    80aa:	d004      	beq.n	80b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb6>
    80ac:	2000      	movs	r0, #0
    80ae:	9003      	str	r0, [sp, #12]
    80b0:	9807      	ldr	r0, [sp, #28]
    80b2:	b110      	cbz	r0, 80ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba>
    80b4:	e02e      	b.n	8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    80b6:	2001      	movs	r0, #1
    80b8:	e7f9      	b.n	80ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae>
    80ba:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    80be:	2803      	cmp	r0, #3
    80c0:	d128      	bne.n	8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    80c2:	9803      	ldr	r0, [sp, #12]
    80c4:	b330      	cbz	r0, 8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    80c6:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    80ca:	42b8      	cmp	r0, r7
    80cc:	d122      	bne.n	8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    80ce:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    80d2:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    80d6:	68e0      	ldr	r0, [r4, #12]
    80d8:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    80dc:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    80e0:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    80e4:	4408      	add	r0, r1
    80e6:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    80ea:	4620      	mov	r0, r4
    80ec:	f006 ff5d 	bl	efaa <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    80f0:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    80f4:	6220      	str	r0, [r4, #32]
    80f6:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
    80fa:	83a0      	strh	r0, [r4, #28]
    80fc:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
    8100:	60e0      	str	r0, [r4, #12]
    8102:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    8106:	82a0      	strh	r0, [r4, #20]
    8108:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    810c:	82e0      	strh	r0, [r4, #22]
    810e:	2002      	movs	r0, #2
    8110:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8114:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    8118:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
    811c:	1a38      	subs	r0, r7, r0
    811e:	fa0f f980 	sxth.w	r9, r0
    8122:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    8126:	1a38      	subs	r0, r7, r0
    8128:	fa0f f880 	sxth.w	r8, r0
    812c:	f1b8 0f00 	cmp.w	r8, #0
    8130:	da06      	bge.n	8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>
    8132:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    8136:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    813a:	2001      	movs	r0, #1
    813c:	46c8      	mov	r8, r9
    813e:	9000      	str	r0, [sp, #0]
    8140:	ab02      	add	r3, sp, #8
    8142:	464a      	mov	r2, r9
    8144:	4641      	mov	r1, r8
    8146:	4620      	mov	r0, r4
    8148:	f7ff fefc 	bl	7f44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    814c:	9004      	str	r0, [sp, #16]
    814e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    8152:	f8df b33c 	ldr.w	fp, [pc, #828]	; 8490 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x490>
    8156:	b140      	cbz	r0, 816a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16a>
    8158:	2801      	cmp	r0, #1
    815a:	d07d      	beq.n	8258 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x258>
    815c:	2802      	cmp	r0, #2
    815e:	d052      	beq.n	8206 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x206>
    8160:	2803      	cmp	r0, #3
    8162:	d07a      	beq.n	825a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25a>
    8164:	f240 514d 	movw	r1, #1357	; 0x54d
    8168:	e18e      	b.n	8488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>
    816a:	2101      	movs	r1, #1
    816c:	2000      	movs	r0, #0
    816e:	f005 fc5f 	bl	da30 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8172:	4606      	mov	r6, r0
    8174:	6a20      	ldr	r0, [r4, #32]
    8176:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    817a:	4430      	add	r0, r6
    817c:	f004 f803 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8180:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    8184:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8188:	68e0      	ldr	r0, [r4, #12]
    818a:	f003 fffc 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    818e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    8192:	a901      	add	r1, sp, #4
    8194:	4668      	mov	r0, sp
    8196:	f003 f99d 	bl	b4d4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    819a:	e9dd 1200 	ldrd	r1, r2, [sp]
    819e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    81a2:	f7fa ff7f 	bl	30a4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    81a6:	4681      	mov	r9, r0
    81a8:	4620      	mov	r0, r4
    81aa:	f006 fc61 	bl	ea70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    81ae:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    81b2:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
    81b6:	f007 ffe8 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    81ba:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    81be:	4401      	add	r1, r0
    81c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    81c4:	fbb1 f0f0 	udiv	r0, r1, r0
    81c8:	6a21      	ldr	r1, [r4, #32]
    81ca:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    81ce:	4431      	add	r1, r6
    81d0:	1a08      	subs	r0, r1, r0
    81d2:	1a81      	subs	r1, r0, r2
    81d4:	4441      	add	r1, r8
    81d6:	3920      	subs	r1, #32
    81d8:	eba1 0609 	sub.w	r6, r1, r9
    81dc:	0050      	lsls	r0, r2, #1
    81de:	8ba1      	ldrh	r1, [r4, #28]
    81e0:	3060      	adds	r0, #96	; 0x60
    81e2:	4401      	add	r1, r0
    81e4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    81e8:	f006 fcb2 	bl	eb50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    81ec:	3022      	adds	r0, #34	; 0x22
    81ee:	f8cb 0010 	str.w	r0, [fp, #16]
    81f2:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    81f6:	4659      	mov	r1, fp
    81f8:	1a30      	subs	r0, r6, r0
    81fa:	f5b0 7fda 	cmp.w	r0, #436	; 0x1b4
    81fe:	d859      	bhi.n	82b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b4>
    8200:	f240 41e6 	movw	r1, #1254	; 0x4e6
    8204:	e140      	b.n	8488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>
    8206:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    820a:	6a20      	ldr	r0, [r4, #32]
    820c:	4408      	add	r0, r1
    820e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8212:	f003 ffb8 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8216:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    821a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    821e:	68e0      	ldr	r0, [r4, #12]
    8220:	f003 ffb1 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8224:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    8228:	4620      	mov	r0, r4
    822a:	f006 fc21 	bl	ea70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    822e:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    8232:	bb10      	cbnz	r0, 827a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x27a>
    8234:	f1ba 0f00 	cmp.w	sl, #0
    8238:	d01f      	beq.n	827a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x27a>
    823a:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    823e:	4640      	mov	r0, r8
    8240:	f007 ffa3 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8244:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8248:	4401      	add	r1, r0
    824a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    824e:	fbb1 f0f0 	udiv	r0, r1, r0
    8252:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    8256:	e001      	b.n	825c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25c>
    8258:	e02d      	b.n	82b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b6>
    825a:	e049      	b.n	82f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>
    825c:	4408      	add	r0, r1
    825e:	6a22      	ldr	r2, [r4, #32]
    8260:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    8264:	4411      	add	r1, r2
    8266:	1a0e      	subs	r6, r1, r0
    8268:	4640      	mov	r0, r8
    826a:	f007 ff80 	bl	1016e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    826e:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    8272:	1a08      	subs	r0, r1, r0
    8274:	4406      	add	r6, r0
    8276:	3e20      	subs	r6, #32
    8278:	e006      	b.n	8288 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x288>
    827a:	6a21      	ldr	r1, [r4, #32]
    827c:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8280:	4408      	add	r0, r1
    8282:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    8286:	1a46      	subs	r6, r0, r1
    8288:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    828c:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
    8290:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    8294:	fb01 0002 	mla	r0, r1, r2, r0
    8298:	0040      	lsls	r0, r0, #1
    829a:	8ba1      	ldrh	r1, [r4, #28]
    829c:	3060      	adds	r0, #96	; 0x60
    829e:	4401      	add	r1, r0
    82a0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    82a4:	f006 fc54 	bl	eb50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    82a8:	f8cb 0010 	str.w	r0, [fp, #16]
    82ac:	2001      	movs	r0, #1
    82ae:	4659      	mov	r1, fp
    82b0:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    82b4:	e062      	b.n	837c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37c>
    82b6:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    82ba:	68e0      	ldr	r0, [r4, #12]
    82bc:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    82c0:	1a86      	subs	r6, r0, r2
    82c2:	eb01 0009 	add.w	r0, r1, r9
    82c6:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    82ca:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
    82ce:	1a40      	subs	r0, r0, r1
    82d0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    82d4:	1e40      	subs	r0, r0, #1
    82d6:	fb0c 3101 	mla	r1, ip, r1, r3
    82da:	fb00 1002 	mla	r0, r0, r2, r1
    82de:	0040      	lsls	r0, r0, #1
    82e0:	8ba1      	ldrh	r1, [r4, #28]
    82e2:	3060      	adds	r0, #96	; 0x60
    82e4:	4401      	add	r1, r0
    82e6:	fb06 f608 	mul.w	r6, r6, r8
    82ea:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    82ee:	e040      	b.n	8372 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x372>
    82f0:	68e0      	ldr	r0, [r4, #12]
    82f2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    82f6:	fb00 f008 	mul.w	r0, r0, r8
    82fa:	fb08 0611 	mls	r6, r8, r1, r0
    82fe:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    8302:	2824      	cmp	r0, #36	; 0x24
    8304:	d003      	beq.n	830e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30e>
    8306:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    830a:	2824      	cmp	r0, #36	; 0x24
    830c:	d109      	bne.n	8322 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x322>
    830e:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    8312:	1a38      	subs	r0, r7, r0
    8314:	b200      	sxth	r0, r0
    8316:	2800      	cmp	r0, #0
    8318:	db03      	blt.n	8322 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x322>
    831a:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    831e:	b100      	cbz	r0, 8322 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x322>
    8320:	9001      	str	r0, [sp, #4]
    8322:	9800      	ldr	r0, [sp, #0]
    8324:	b1d8      	cbz	r0, 835e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35e>
    8326:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    832a:	b9c0      	cbnz	r0, 835e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35e>
    832c:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    8330:	2800      	cmp	r0, #0
    8332:	d07d      	beq.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    8334:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8338:	f007 ff27 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    833c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8340:	4401      	add	r1, r0
    8342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8346:	fbb1 f0f0 	udiv	r0, r1, r0
    834a:	1a36      	subs	r6, r6, r0
    834c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8350:	f007 ff0d 	bl	1016e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8354:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    8358:	1a08      	subs	r0, r1, r0
    835a:	4406      	add	r6, r0
    835c:	3e20      	subs	r6, #32
    835e:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    8362:	eb01 0009 	add.w	r0, r1, r9
    8366:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    836a:	4348      	muls	r0, r1
    836c:	0041      	lsls	r1, r0, #1
    836e:	3160      	adds	r1, #96	; 0x60
    8370:	9801      	ldr	r0, [sp, #4]
    8372:	f006 fbed 	bl	eb50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    8376:	4659      	mov	r1, fp
    8378:	f8cb 0010 	str.w	r0, [fp, #16]
    837c:	9804      	ldr	r0, [sp, #16]
    837e:	6909      	ldr	r1, [r1, #16]
    8380:	1a33      	subs	r3, r6, r0
    8382:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
    8386:	68e0      	ldr	r0, [r4, #12]
    8388:	1b80      	subs	r0, r0, r6
    838a:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    838e:	f8cb 0014 	str.w	r0, [fp, #20]
    8392:	4281      	cmp	r1, r0
    8394:	d800      	bhi.n	8398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>
    8396:	4608      	mov	r0, r1
    8398:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    839c:	2000      	movs	r0, #0
    839e:	7028      	strb	r0, [r5, #0]
    83a0:	2064      	movs	r0, #100	; 0x64
    83a2:	8128      	strh	r0, [r5, #8]
    83a4:	4619      	mov	r1, r3
    83a6:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    83aa:	f7f9 fdcb 	bl	1f44 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    83ae:	60e8      	str	r0, [r5, #12]
    83b0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    83b4:	f005 ff30 	bl	e218 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    83b8:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    83bc:	4408      	add	r0, r1
    83be:	6068      	str	r0, [r5, #4]
    83c0:	68e8      	ldr	r0, [r5, #12]
    83c2:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    83c6:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
    83ca:	2001      	movs	r0, #1
    83cc:	72a8      	strb	r0, [r5, #10]
    83ce:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    83d2:	1bc9      	subs	r1, r1, r7
    83d4:	b209      	sxth	r1, r1
    83d6:	2900      	cmp	r1, #0
    83d8:	dd01      	ble.n	83de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3de>
    83da:	2103      	movs	r1, #3
    83dc:	72a9      	strb	r1, [r5, #10]
    83de:	9903      	ldr	r1, [sp, #12]
    83e0:	b339      	cbz	r1, 8432 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x432>
    83e2:	f1ba 0f00 	cmp.w	sl, #0
    83e6:	d01f      	beq.n	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    83e8:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
    83ec:	b38a      	cbz	r2, 8452 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x452>
    83ee:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
    83f2:	bf00      	nop
    83f4:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
    83f8:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    83fc:	1c49      	adds	r1, r1, #1
    83fe:	434b      	muls	r3, r1
    8400:	4293      	cmp	r3, r2
    8402:	d211      	bcs.n	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    8404:	7aa9      	ldrb	r1, [r5, #10]
    8406:	1e49      	subs	r1, r1, #1
    8408:	2900      	cmp	r1, #0
    840a:	dd0d      	ble.n	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    840c:	72a8      	strb	r0, [r5, #10]
    840e:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    8412:	1c40      	adds	r0, r0, #1
    8414:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    8418:	2001      	movs	r0, #1
    841a:	f000 f83b 	bl	8494 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x494>
    841e:	f000 0007 	and.w	r0, r0, #7
    8422:	1c40      	adds	r0, r0, #1
    8424:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    8428:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    842c:	4629      	mov	r1, r5
    842e:	e001      	b.n	8434 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x434>
    8430:	e00c      	b.n	844c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44c>
    8432:	e00f      	b.n	8454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>
    8434:	f006 fb9e 	bl	eb74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    8438:	b320      	cbz	r0, 8484 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x484>
    843a:	9807      	ldr	r0, [sp, #28]
    843c:	f080 0001 	eor.w	r0, r0, #1
    8440:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
    8444:	2000      	movs	r0, #0
    8446:	b009      	add	sp, #36	; 0x24
    8448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    844c:	f44f 61a7 	mov.w	r1, #1336	; 0x538
    8450:	e01a      	b.n	8488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>
    8452:	e015      	b.n	8480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x480>
    8454:	f1ba 0f00 	cmp.w	sl, #0
    8458:	d1c6      	bne.n	83e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e8>
    845a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    845e:	2800      	cmp	r0, #0
    8460:	d0e2      	beq.n	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    8462:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    8466:	68e0      	ldr	r0, [r4, #12]
    8468:	1a41      	subs	r1, r0, r1
    846a:	4628      	mov	r0, r5
    846c:	f005 faf2 	bl	da54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8470:	0400      	lsls	r0, r0, #16
    8472:	0c00      	lsrs	r0, r0, #16
    8474:	d0d8      	beq.n	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    8476:	9912      	ldr	r1, [sp, #72]	; 0x48
    8478:	b101      	cbz	r1, 847c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x47c>
    847a:	8008      	strh	r0, [r1, #0]
    847c:	2001      	movs	r0, #1
    847e:	e7e2      	b.n	8446 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x446>
    8480:	2100      	movs	r1, #0
    8482:	e7b7      	b.n	83f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f4>
    8484:	f240 5197 	movw	r1, #1431	; 0x597
    8488:	2030      	movs	r0, #48	; 0x30
    848a:	f7fc f95d 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    848e:	0000      	.short	0x0000
    8490:	20000108 	.word	0x20000108
    8494:	b108      	cbz	r0, 849a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49a>
    8496:	4803      	ldr	r0, [pc, #12]	; (84a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a4>)
    8498:	e001      	b.n	849e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49e>
    849a:	4802      	ldr	r0, [pc, #8]	; (84a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a4>)
    849c:	3008      	adds	r0, #8
    849e:	f7fe bc7b 	b.w	6d98 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    84a2:	0000      	.short	0x0000
    84a4:	20000120 	.word	0x20000120
    84a8:	b570      	push	{r4, r5, r6, lr}
    84aa:	4604      	mov	r4, r0
    84ac:	f7f9 fea6 	bl	21fc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    84b0:	2864      	cmp	r0, #100	; 0x64
    84b2:	d901      	bls.n	84b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b8>
    84b4:	4605      	mov	r5, r0
    84b6:	e000      	b.n	84ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ba>
    84b8:	2564      	movs	r5, #100	; 0x64
    84ba:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    84be:	2128      	movs	r1, #40	; 0x28
    84c0:	f006 fa47 	bl	e952 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    84c4:	4428      	add	r0, r5
    84c6:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    84ca:	f200 203d 	addw	r0, r0, #573	; 0x23d
    84ce:	180e      	adds	r6, r1, r0
    84d0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    84d4:	2128      	movs	r1, #40	; 0x28
    84d6:	f006 fa3c 	bl	e952 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    84da:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    84de:	4620      	mov	r0, r4
    84e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    84e2:	f005 fe38 	bl	e156 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    84e6:	4605      	mov	r5, r0
    84e8:	4632      	mov	r2, r6
    84ea:	4620      	mov	r0, r4
    84ec:	68e1      	ldr	r1, [r4, #12]
    84ee:	f005 fe32 	bl	e156 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    84f2:	4907      	ldr	r1, [pc, #28]	; (8510 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x510>)
    84f4:	4285      	cmp	r5, r0
    84f6:	6088      	str	r0, [r1, #8]
    84f8:	d200      	bcs.n	84fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4fc>
    84fa:	4628      	mov	r0, r5
    84fc:	6048      	str	r0, [r1, #4]
    84fe:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    8502:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    8506:	60c8      	str	r0, [r1, #12]
    8508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    850c:	f7fa bd14 	b.w	2f38 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8510:	20000108 	.word	0x20000108

00008514 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    8514:	4806      	ldr	r0, [pc, #24]	; (8530 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    8516:	4905      	ldr	r1, [pc, #20]	; (852c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8518:	6501      	str	r1, [r0, #80]	; 0x50
    851a:	4906      	ldr	r1, [pc, #24]	; (8534 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    851c:	6541      	str	r1, [r0, #84]	; 0x54
    851e:	4807      	ldr	r0, [pc, #28]	; (853c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8520:	4905      	ldr	r1, [pc, #20]	; (8538 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    8522:	6501      	str	r1, [r0, #80]	; 0x50
    8524:	4906      	ldr	r1, [pc, #24]	; (8540 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    8526:	6541      	str	r1, [r0, #84]	; 0x54
    8528:	4770      	bx	lr
    852a:	0000      	.short	0x0000
    852c:	00009a75 	.word	0x00009a75
    8530:	20000144 	.word	0x20000144
    8534:	00009b51 	.word	0x00009b51
    8538:	0000a1cd 	.word	0x0000a1cd
    853c:	200001a8 	.word	0x200001a8
    8540:	0000a1fd 	.word	0x0000a1fd

00008544 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    8544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8546:	460d      	mov	r5, r1
    8548:	4607      	mov	r7, r0
    854a:	2100      	movs	r1, #0
    854c:	f004 ff57 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8550:	1e04      	subs	r4, r0, #0
    8552:	d04f      	beq.n	85f4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8554:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    8558:	2800      	cmp	r0, #0
    855a:	d04b      	beq.n	85f4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    855c:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8560:	f88d 0000 	strb.w	r0, [sp]
    8564:	9800      	ldr	r0, [sp, #0]
    8566:	9000      	str	r0, [sp, #0]
    8568:	f89d 0000 	ldrb.w	r0, [sp]
    856c:	2600      	movs	r6, #0
    856e:	b1d8      	cbz	r0, 85a8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    8570:	706e      	strb	r6, [r5, #1]
    8572:	2007      	movs	r0, #7
    8574:	7028      	strb	r0, [r5, #0]
    8576:	e00b      	b.n	8590 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    8578:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    857c:	84a6      	strh	r6, [r4, #36]	; 0x24
    857e:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    8582:	6068      	str	r0, [r5, #4]
    8584:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    8588:	60a8      	str	r0, [r5, #8]
    858a:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    858e:	81a8      	strh	r0, [r5, #12]
    8590:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8594:	f88d 0000 	strb.w	r0, [sp]
    8598:	9800      	ldr	r0, [sp, #0]
    859a:	9000      	str	r0, [sp, #0]
    859c:	f89d 0000 	ldrb.w	r0, [sp]
    85a0:	2800      	cmp	r0, #0
    85a2:	d1e9      	bne.n	8578 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    85a4:	712e      	strb	r6, [r5, #4]
    85a6:	e10b      	b.n	87c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    85a8:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    85ac:	b3a0      	cbz	r0, 8618 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    85ae:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    85b2:	280b      	cmp	r0, #11
    85b4:	d016      	beq.n	85e4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    85b6:	280c      	cmp	r0, #12
    85b8:	d004      	beq.n	85c4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    85ba:	f640 21ee 	movw	r1, #2798	; 0xaee
    85be:	2031      	movs	r0, #49	; 0x31
    85c0:	f7fc f8c2 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85c4:	8820      	ldrh	r0, [r4, #0]
    85c6:	f7fc fcd9 	bl	4f7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    85ca:	4607      	mov	r7, r0
    85cc:	f004 fddd 	bl	d18a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    85d0:	b978      	cbnz	r0, 85f2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    85d2:	706e      	strb	r6, [r5, #1]
    85d4:	200c      	movs	r0, #12
    85d6:	7028      	strb	r0, [r5, #0]
    85d8:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    85dc:	7128      	strb	r0, [r5, #4]
    85de:	8820      	ldrh	r0, [r4, #0]
    85e0:	80e8      	strh	r0, [r5, #6]
    85e2:	e013      	b.n	860c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    85e4:	8820      	ldrh	r0, [r4, #0]
    85e6:	f7fc fcc9 	bl	4f7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    85ea:	4607      	mov	r7, r0
    85ec:	f004 fdcd 	bl	d18a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    85f0:	b108      	cbz	r0, 85f6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    85f2:	2000      	movs	r0, #0
    85f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85f6:	706e      	strb	r6, [r5, #1]
    85f8:	200b      	movs	r0, #11
    85fa:	7028      	strb	r0, [r5, #0]
    85fc:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    8600:	7128      	strb	r0, [r5, #4]
    8602:	8820      	ldrh	r0, [r4, #0]
    8604:	80e8      	strh	r0, [r5, #6]
    8606:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
    860a:	7228      	strb	r0, [r5, #8]
    860c:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    8610:	4638      	mov	r0, r7
    8612:	f004 fdd5 	bl	d1c0 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8616:	e0d3      	b.n	87c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8618:	e7ff      	b.n	861a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    861a:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    861e:	f88d 0000 	strb.w	r0, [sp]
    8622:	9800      	ldr	r0, [sp, #0]
    8624:	9000      	str	r0, [sp, #0]
    8626:	f89d 0000 	ldrb.w	r0, [sp]
    862a:	b130      	cbz	r0, 863a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    862c:	706e      	strb	r6, [r5, #1]
    862e:	200e      	movs	r0, #14
    8630:	7028      	strb	r0, [r5, #0]
    8632:	80af      	strh	r7, [r5, #4]
    8634:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    8638:	e0c2      	b.n	87c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    863a:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    863e:	f88d 0000 	strb.w	r0, [sp]
    8642:	9800      	ldr	r0, [sp, #0]
    8644:	9000      	str	r0, [sp, #0]
    8646:	f89d 0000 	ldrb.w	r0, [sp]
    864a:	b198      	cbz	r0, 8674 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    864c:	706e      	strb	r6, [r5, #1]
    864e:	2008      	movs	r0, #8
    8650:	7028      	strb	r0, [r5, #0]
    8652:	8820      	ldrh	r0, [r4, #0]
    8654:	80a8      	strh	r0, [r5, #4]
    8656:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    865a:	f8c5 1006 	str.w	r1, [r5, #6]
    865e:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
    8662:	f8c5 100a 	str.w	r1, [r5, #10]
    8666:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    866a:	81e8      	strh	r0, [r5, #14]
    866c:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
    8670:	7026      	strb	r6, [r4, #0]
    8672:	e0a5      	b.n	87c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8674:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    8678:	f88d 0000 	strb.w	r0, [sp]
    867c:	9800      	ldr	r0, [sp, #0]
    867e:	9000      	str	r0, [sp, #0]
    8680:	f89d 0000 	ldrb.w	r0, [sp]
    8684:	b1a0      	cbz	r0, 86b0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    8686:	706e      	strb	r6, [r5, #1]
    8688:	2016      	movs	r0, #22
    868a:	7028      	strb	r0, [r5, #0]
    868c:	e005      	b.n	869a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    868e:	bf00      	nop
    8690:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    8694:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    8698:	6068      	str	r0, [r5, #4]
    869a:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    869e:	f88d 0000 	strb.w	r0, [sp]
    86a2:	9800      	ldr	r0, [sp, #0]
    86a4:	9000      	str	r0, [sp, #0]
    86a6:	f89d 0000 	ldrb.w	r0, [sp]
    86aa:	2800      	cmp	r0, #0
    86ac:	d1f0      	bne.n	8690 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    86ae:	e087      	b.n	87c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    86b0:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    86b4:	f88d 0000 	strb.w	r0, [sp]
    86b8:	9800      	ldr	r0, [sp, #0]
    86ba:	9000      	str	r0, [sp, #0]
    86bc:	f89d 0000 	ldrb.w	r0, [sp]
    86c0:	b170      	cbz	r0, 86e0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    86c2:	706e      	strb	r6, [r5, #1]
    86c4:	2006      	movs	r0, #6
    86c6:	7028      	strb	r0, [r5, #0]
    86c8:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    86cc:	6068      	str	r0, [r5, #4]
    86ce:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    86d2:	60a8      	str	r0, [r5, #8]
    86d4:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    86d8:	60e8      	str	r0, [r5, #12]
    86da:	f504 7403 	add.w	r4, r4, #524	; 0x20c
    86de:	e03a      	b.n	8756 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    86e0:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    86e4:	f88d 0000 	strb.w	r0, [sp]
    86e8:	9800      	ldr	r0, [sp, #0]
    86ea:	9000      	str	r0, [sp, #0]
    86ec:	f89d 0000 	ldrb.w	r0, [sp]
    86f0:	b1d0      	cbz	r0, 8728 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    86f2:	706e      	strb	r6, [r5, #1]
    86f4:	2012      	movs	r0, #18
    86f6:	7028      	strb	r0, [r5, #0]
    86f8:	e00b      	b.n	8712 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    86fa:	bf00      	nop
    86fc:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
    8700:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    8704:	6068      	str	r0, [r5, #4]
    8706:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    870a:	60a8      	str	r0, [r5, #8]
    870c:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    8710:	60e8      	str	r0, [r5, #12]
    8712:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    8716:	f88d 0000 	strb.w	r0, [sp]
    871a:	9800      	ldr	r0, [sp, #0]
    871c:	9000      	str	r0, [sp, #0]
    871e:	f89d 0000 	ldrb.w	r0, [sp]
    8722:	2800      	cmp	r0, #0
    8724:	d1ea      	bne.n	86fc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    8726:	e04b      	b.n	87c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8728:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
    872c:	f88d 0000 	strb.w	r0, [sp]
    8730:	9800      	ldr	r0, [sp, #0]
    8732:	9000      	str	r0, [sp, #0]
    8734:	f89d 0000 	ldrb.w	r0, [sp]
    8738:	b180      	cbz	r0, 875c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    873a:	706e      	strb	r6, [r5, #1]
    873c:	2018      	movs	r0, #24
    873e:	7028      	strb	r0, [r5, #0]
    8740:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
    8744:	6068      	str	r0, [r5, #4]
    8746:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    874a:	60a8      	str	r0, [r5, #8]
    874c:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    8750:	81a8      	strh	r0, [r5, #12]
    8752:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
    8756:	f804 6c02 	strb.w	r6, [r4, #-2]
    875a:	e031      	b.n	87c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    875c:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
    8760:	f88d 0000 	strb.w	r0, [sp]
    8764:	9800      	ldr	r0, [sp, #0]
    8766:	9000      	str	r0, [sp, #0]
    8768:	f89d 0000 	ldrb.w	r0, [sp]
    876c:	b138      	cbz	r0, 877e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    876e:	2019      	movs	r0, #25
    8770:	7028      	strb	r0, [r5, #0]
    8772:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    8776:	6068      	str	r0, [r5, #4]
    8778:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
    877c:	e020      	b.n	87c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    877e:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    8782:	f88d 0000 	strb.w	r0, [sp]
    8786:	9800      	ldr	r0, [sp, #0]
    8788:	9000      	str	r0, [sp, #0]
    878a:	f89d 0000 	ldrb.w	r0, [sp]
    878e:	2800      	cmp	r0, #0
    8790:	f43f af30 	beq.w	85f4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8794:	706e      	strb	r6, [r5, #1]
    8796:	2013      	movs	r0, #19
    8798:	7028      	strb	r0, [r5, #0]
    879a:	e007      	b.n	87ac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    879c:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    87a0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    87a4:	6068      	str	r0, [r5, #4]
    87a6:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    87aa:	8128      	strh	r0, [r5, #8]
    87ac:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    87b0:	f88d 0000 	strb.w	r0, [sp]
    87b4:	9800      	ldr	r0, [sp, #0]
    87b6:	9000      	str	r0, [sp, #0]
    87b8:	f89d 0000 	ldrb.w	r0, [sp]
    87bc:	2800      	cmp	r0, #0
    87be:	d1ed      	bne.n	879c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    87c0:	2001      	movs	r0, #1
    87c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000087c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    87c4:	481b      	ldr	r0, [pc, #108]	; (8834 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    87c6:	491a      	ldr	r1, [pc, #104]	; (8830 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    87c8:	6081      	str	r1, [r0, #8]
    87ca:	491b      	ldr	r1, [pc, #108]	; (8838 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    87cc:	6041      	str	r1, [r0, #4]
    87ce:	491b      	ldr	r1, [pc, #108]	; (883c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    87d0:	6001      	str	r1, [r0, #0]
    87d2:	491b      	ldr	r1, [pc, #108]	; (8840 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    87d4:	6281      	str	r1, [r0, #40]	; 0x28
    87d6:	491b      	ldr	r1, [pc, #108]	; (8844 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    87d8:	62c1      	str	r1, [r0, #44]	; 0x2c
    87da:	491b      	ldr	r1, [pc, #108]	; (8848 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    87dc:	60c1      	str	r1, [r0, #12]
    87de:	491b      	ldr	r1, [pc, #108]	; (884c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    87e0:	6181      	str	r1, [r0, #24]
    87e2:	491b      	ldr	r1, [pc, #108]	; (8850 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    87e4:	6301      	str	r1, [r0, #48]	; 0x30
    87e6:	491b      	ldr	r1, [pc, #108]	; (8854 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    87e8:	6201      	str	r1, [r0, #32]
    87ea:	491b      	ldr	r1, [pc, #108]	; (8858 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    87ec:	64c1      	str	r1, [r0, #76]	; 0x4c
    87ee:	491b      	ldr	r1, [pc, #108]	; (885c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    87f0:	6481      	str	r1, [r0, #72]	; 0x48
    87f2:	491b      	ldr	r1, [pc, #108]	; (8860 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    87f4:	6441      	str	r1, [r0, #68]	; 0x44
    87f6:	491b      	ldr	r1, [pc, #108]	; (8864 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    87f8:	6341      	str	r1, [r0, #52]	; 0x34
    87fa:	491b      	ldr	r1, [pc, #108]	; (8868 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    87fc:	61c1      	str	r1, [r0, #28]
    87fe:	481c      	ldr	r0, [pc, #112]	; (8870 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8800:	491a      	ldr	r1, [pc, #104]	; (886c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8802:	6081      	str	r1, [r0, #8]
    8804:	491b      	ldr	r1, [pc, #108]	; (8874 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8806:	61c1      	str	r1, [r0, #28]
    8808:	491b      	ldr	r1, [pc, #108]	; (8878 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    880a:	6241      	str	r1, [r0, #36]	; 0x24
    880c:	491b      	ldr	r1, [pc, #108]	; (887c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    880e:	62c1      	str	r1, [r0, #44]	; 0x2c
    8810:	491b      	ldr	r1, [pc, #108]	; (8880 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8812:	6101      	str	r1, [r0, #16]
    8814:	491b      	ldr	r1, [pc, #108]	; (8884 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8816:	6141      	str	r1, [r0, #20]
    8818:	491b      	ldr	r1, [pc, #108]	; (8888 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    881a:	6441      	str	r1, [r0, #68]	; 0x44
    881c:	6341      	str	r1, [r0, #52]	; 0x34
    881e:	491b      	ldr	r1, [pc, #108]	; (888c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8820:	6181      	str	r1, [r0, #24]
    8822:	491b      	ldr	r1, [pc, #108]	; (8890 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8824:	6301      	str	r1, [r0, #48]	; 0x30
    8826:	491b      	ldr	r1, [pc, #108]	; (8894 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8828:	6481      	str	r1, [r0, #72]	; 0x48
    882a:	491b      	ldr	r1, [pc, #108]	; (8898 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    882c:	64c1      	str	r1, [r0, #76]	; 0x4c
    882e:	4770      	bx	lr
    8830:	00009f01 	.word	0x00009f01
    8834:	20000144 	.word	0x20000144
    8838:	0000983d 	.word	0x0000983d
    883c:	00009899 	.word	0x00009899
    8840:	00009c19 	.word	0x00009c19
    8844:	00009c5d 	.word	0x00009c5d
    8848:	00009945 	.word	0x00009945
    884c:	00009ed9 	.word	0x00009ed9
    8850:	0000a01d 	.word	0x0000a01d
    8854:	000099f1 	.word	0x000099f1
    8858:	00009bed 	.word	0x00009bed
    885c:	00009bc1 	.word	0x00009bc1
    8860:	00009e99 	.word	0x00009e99
    8864:	00009ec9 	.word	0x00009ec9
    8868:	00009f35 	.word	0x00009f35
    886c:	0000a3b5 	.word	0x0000a3b5
    8870:	200001a8 	.word	0x200001a8
    8874:	0000a3dd 	.word	0x0000a3dd
    8878:	0000a19d 	.word	0x0000a19d
    887c:	0000a275 	.word	0x0000a275
    8880:	0000a171 	.word	0x0000a171
    8884:	0000a31d 	.word	0x0000a31d
    8888:	0000a2f9 	.word	0x0000a2f9
    888c:	0000a341 	.word	0x0000a341
    8890:	0000a435 	.word	0x0000a435
    8894:	0000a22d 	.word	0x0000a22d
    8898:	0000a25d 	.word	0x0000a25d

0000889c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    889c:	4806      	ldr	r0, [pc, #24]	; (88b8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    889e:	4905      	ldr	r1, [pc, #20]	; (88b4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    88a0:	6581      	str	r1, [r0, #88]	; 0x58
    88a2:	4906      	ldr	r1, [pc, #24]	; (88bc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    88a4:	6601      	str	r1, [r0, #96]	; 0x60
    88a6:	4807      	ldr	r0, [pc, #28]	; (88c4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    88a8:	4905      	ldr	r1, [pc, #20]	; (88c0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    88aa:	6581      	str	r1, [r0, #88]	; 0x58
    88ac:	4906      	ldr	r1, [pc, #24]	; (88c8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    88ae:	65c1      	str	r1, [r0, #92]	; 0x5c
    88b0:	4770      	bx	lr
    88b2:	0000      	.short	0x0000
    88b4:	00009c7d 	.word	0x00009c7d
    88b8:	20000144 	.word	0x20000144
    88bc:	00009d55 	.word	0x00009d55
    88c0:	0000a2a1 	.word	0x0000a2a1
    88c4:	200001a8 	.word	0x200001a8
    88c8:	0000a2d1 	.word	0x0000a2d1

000088cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    88cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88d0:	2601      	movs	r6, #1
    88d2:	4c7c      	ldr	r4, [pc, #496]	; (8ac4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    88d4:	2500      	movs	r5, #0
    88d6:	f366 0107 	bfi	r1, r6, #0, #8
    88da:	8065      	strh	r5, [r4, #2]
    88dc:	7065      	strb	r5, [r4, #1]
    88de:	7025      	strb	r5, [r4, #0]
    88e0:	60a0      	str	r0, [r4, #8]
    88e2:	4689      	mov	r9, r1
    88e4:	4680      	mov	r8, r0
    88e6:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
    88ea:	8800      	ldrh	r0, [r0, #0]
    88ec:	f7fc fb5c 	bl	4fa8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    88f0:	b180      	cbz	r0, 8914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    88f2:	68a0      	ldr	r0, [r4, #8]
    88f4:	8800      	ldrh	r0, [r0, #0]
    88f6:	f7fc fe01 	bl	54fc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    88fa:	68a0      	ldr	r0, [r4, #8]
    88fc:	8800      	ldrh	r0, [r0, #0]
    88fe:	f7fc fda5 	bl	544c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8902:	68a0      	ldr	r0, [r4, #8]
    8904:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    8908:	b1c9      	cbz	r1, 893e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    890a:	3070      	adds	r0, #112	; 0x70
    890c:	f006 fb91 	bl	f032 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8910:	b118      	cbz	r0, 891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    8912:	e014      	b.n	893e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8914:	f640 31c9 	movw	r1, #3017	; 0xbc9
    8918:	e06b      	b.n	89f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126>
    891a:	68a0      	ldr	r0, [r4, #8]
    891c:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    8920:	f88d 1000 	strb.w	r1, [sp]
    8924:	9900      	ldr	r1, [sp, #0]
    8926:	9100      	str	r1, [sp, #0]
    8928:	f89d 1000 	ldrb.w	r1, [sp]
    892c:	b139      	cbz	r1, 893e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    892e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8932:	2301      	movs	r3, #1
    8934:	4619      	mov	r1, r3
    8936:	3070      	adds	r0, #112	; 0x70
    8938:	f004 ffd3 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    893c:	b180      	cbz	r0, 8960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    893e:	68a0      	ldr	r0, [r4, #8]
    8940:	3070      	adds	r0, #112	; 0x70
    8942:	f006 fb76 	bl	f032 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8946:	b128      	cbz	r0, 8954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    8948:	68a0      	ldr	r0, [r4, #8]
    894a:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    894e:	bf00      	nop
    8950:	f000 fbb0 	bl	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    8954:	68a0      	ldr	r0, [r4, #8]
    8956:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
    895a:	b189      	cbz	r1, 8980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    895c:	80a5      	strh	r5, [r4, #4]
    895e:	e01e      	b.n	899e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    8960:	68a0      	ldr	r0, [r4, #8]
    8962:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
    8966:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    896a:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    896e:	2100      	movs	r1, #0
    8970:	2002      	movs	r0, #2
    8972:	f000 fe41 	bl	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8976:	68a0      	ldr	r0, [r4, #8]
    8978:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    897c:	2002      	movs	r0, #2
    897e:	e7e7      	b.n	8950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    8980:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
    8984:	f88d 1000 	strb.w	r1, [sp]
    8988:	9900      	ldr	r1, [sp, #0]
    898a:	9100      	str	r1, [sp, #0]
    898c:	f89d 1000 	ldrb.w	r1, [sp]
    8990:	b919      	cbnz	r1, 899a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    8992:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    8994:	8a82      	ldrh	r2, [r0, #20]
    8996:	4291      	cmp	r1, r2
    8998:	d800      	bhi.n	899c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    899a:	8a81      	ldrh	r1, [r0, #20]
    899c:	80a1      	strh	r1, [r4, #4]
    899e:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
    89a2:	1e49      	subs	r1, r1, #1
    89a4:	b28f      	uxth	r7, r1
    89a6:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    89aa:	4439      	add	r1, r7
    89ac:	f820 195c 	strh.w	r1, [r0], #-92
    89b0:	8801      	ldrh	r1, [r0, #0]
    89b2:	4439      	add	r1, r7
    89b4:	8001      	strh	r1, [r0, #0]
    89b6:	f001 fd6b 	bl	a490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    89ba:	b120      	cbz	r0, 89c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa>
    89bc:	68a0      	ldr	r0, [r4, #8]
    89be:	f850 1f98 	ldr.w	r1, [r0, #152]!
    89c2:	4439      	add	r1, r7
    89c4:	6001      	str	r1, [r0, #0]
    89c6:	68a1      	ldr	r1, [r4, #8]
    89c8:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    89cc:	2801      	cmp	r0, #1
    89ce:	d802      	bhi.n	89d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a>
    89d0:	1c40      	adds	r0, r0, #1
    89d2:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
    89d6:	b10f      	cbz	r7, 89dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x110>
    89d8:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
    89dc:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    89e0:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
    89e4:	f101 0070 	add.w	r0, r1, #112	; 0x70
    89e8:	f005 f8fd 	bl	dbe6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    89ec:	b120      	cbz	r0, 89f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c>
    89ee:	f640 410d 	movw	r1, #3085	; 0xc0d
    89f2:	2031      	movs	r0, #49	; 0x31
    89f4:	f7fb fea8 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89f8:	68a0      	ldr	r0, [r4, #8]
    89fa:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    89fe:	290b      	cmp	r1, #11
    8a00:	d001      	beq.n	8a06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
    8a02:	290c      	cmp	r1, #12
    8a04:	d118      	bne.n	8a38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8a06:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    8a0a:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
    8a0e:	1ad2      	subs	r2, r2, r3
    8a10:	b212      	sxth	r2, r2
    8a12:	2a00      	cmp	r2, #0
    8a14:	db10      	blt.n	8a38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8a16:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
    8a1a:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
    8a1e:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
    8a22:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    8a26:	2103      	movs	r1, #3
    8a28:	f7fd fdcc 	bl	65c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8a2c:	68a0      	ldr	r0, [r4, #8]
    8a2e:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8a32:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
    8a36:	e026      	b.n	8a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8a38:	2924      	cmp	r1, #36	; 0x24
    8a3a:	d111      	bne.n	8a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8a3c:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8a40:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8a44:	1a89      	subs	r1, r1, r2
    8a46:	b209      	sxth	r1, r1
    8a48:	2900      	cmp	r1, #0
    8a4a:	db09      	blt.n	8a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8a4c:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8a50:	f000 fe82 	bl	9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    8a54:	2800      	cmp	r0, #0
    8a56:	68a0      	ldr	r0, [r4, #8]
    8a58:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
    8a5c:	d029      	beq.n	8ab2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8a5e:	e012      	b.n	8a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8a60:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8a64:	2924      	cmp	r1, #36	; 0x24
    8a66:	d001      	beq.n	8a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    8a68:	2925      	cmp	r1, #37	; 0x25
    8a6a:	d10c      	bne.n	8a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8a6c:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8a70:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8a74:	1a89      	subs	r1, r1, r2
    8a76:	b209      	sxth	r1, r1
    8a78:	2900      	cmp	r1, #0
    8a7a:	db04      	blt.n	8a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8a7c:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8a80:	f000 fe6a 	bl	9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    8a84:	b1a8      	cbz	r0, 8ab2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8a86:	4810      	ldr	r0, [pc, #64]	; (8ac8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8a88:	9000      	str	r0, [sp, #0]
    8a8a:	4b10      	ldr	r3, [pc, #64]	; (8acc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8a8c:	4a10      	ldr	r2, [pc, #64]	; (8ad0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
    8a8e:	4641      	mov	r1, r8
    8a90:	4648      	mov	r0, r9
    8a92:	f7fc fde9 	bl	5668 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8a96:	68a0      	ldr	r0, [r4, #8]
    8a98:	2301      	movs	r3, #1
    8a9a:	2105      	movs	r1, #5
    8a9c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8aa0:	3070      	adds	r0, #112	; 0x70
    8aa2:	f004 ff1e 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8aa6:	2800      	cmp	r0, #0
    8aa8:	d009      	beq.n	8abe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    8aaa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8aae:	f7fc bdd5 	b.w	565c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8ab2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ab6:	2100      	movs	r1, #0
    8ab8:	4608      	mov	r0, r1
    8aba:	f000 bbd5 	b.w	9268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    8abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8ac2:	0000      	.short	0x0000
    8ac4:	20000130 	.word	0x20000130
    8ac8:	00009269 	.word	0x00009269
    8acc:	00008d6d 	.word	0x00008d6d
    8ad0:	000096a5 	.word	0x000096a5
    8ad4:	b570      	push	{r4, r5, r6, lr}
    8ad6:	4c0f      	ldr	r4, [pc, #60]	; (8b14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>)
    8ad8:	68a5      	ldr	r5, [r4, #8]
    8ada:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    8ade:	2920      	cmp	r1, #32
    8ae0:	d002      	beq.n	8ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8ae2:	2926      	cmp	r1, #38	; 0x26
    8ae4:	d003      	beq.n	8aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    8ae6:	e011      	b.n	8b0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    8ae8:	f000 fe84 	bl	97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    8aec:	e008      	b.n	8b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x234>
    8aee:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    8af2:	2301      	movs	r3, #1
    8af4:	210b      	movs	r1, #11
    8af6:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8afa:	f004 fef2 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8afe:	b138      	cbz	r0, 8b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
    8b00:	68a1      	ldr	r1, [r4, #8]
    8b02:	2000      	movs	r0, #0
    8b04:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8b08:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    8b0c:	2000      	movs	r0, #0
    8b0e:	bd70      	pop	{r4, r5, r6, pc}
    8b10:	202a      	movs	r0, #42	; 0x2a
    8b12:	e7e9      	b.n	8ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8b14:	20000130 	.word	0x20000130
    8b18:	4804      	ldr	r0, [pc, #16]	; (8b2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
    8b1a:	2100      	movs	r1, #0
    8b1c:	6880      	ldr	r0, [r0, #8]
    8b1e:	f820 1fb0 	strh.w	r1, [r0, #176]!
    8b22:	7881      	ldrb	r1, [r0, #2]
    8b24:	1c49      	adds	r1, r1, #1
    8b26:	7081      	strb	r1, [r0, #2]
    8b28:	4770      	bx	lr
    8b2a:	0000      	.short	0x0000
    8b2c:	20000130 	.word	0x20000130
    8b30:	4807      	ldr	r0, [pc, #28]	; (8b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>)
    8b32:	b510      	push	{r4, lr}
    8b34:	6881      	ldr	r1, [r0, #8]
    8b36:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
    8b3a:	1e40      	subs	r0, r0, #1
    8b3c:	b240      	sxtb	r0, r0
    8b3e:	7008      	strb	r0, [r1, #0]
    8b40:	2800      	cmp	r0, #0
    8b42:	da04      	bge.n	8b4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
    8b44:	f44f 71c9 	mov.w	r1, #402	; 0x192
    8b48:	2031      	movs	r0, #49	; 0x31
    8b4a:	f7fb fdfd 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b4e:	bd10      	pop	{r4, pc}
    8b50:	20000130 	.word	0x20000130
    8b54:	491a      	ldr	r1, [pc, #104]	; (8bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>)
    8b56:	b508      	push	{r3, lr}
    8b58:	6889      	ldr	r1, [r1, #8]
    8b5a:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    8b5e:	b1b8      	cbz	r0, 8b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    8b60:	2a10      	cmp	r2, #16
    8b62:	d006      	beq.n	8b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a6>
    8b64:	2a14      	cmp	r2, #20
    8b66:	d007      	beq.n	8b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8b68:	2a15      	cmp	r2, #21
    8b6a:	d008      	beq.n	8b7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    8b6c:	2a1b      	cmp	r2, #27
    8b6e:	d122      	bne.n	8bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    8b70:	e008      	b.n	8b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>
    8b72:	2101      	movs	r1, #1
    8b74:	200b      	movs	r0, #11
    8b76:	e007      	b.n	8b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    8b78:	f001 faac 	bl	a0d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1808>
    8b7c:	e006      	b.n	8b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    8b7e:	f000 fd59 	bl	9634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    8b82:	e003      	b.n	8b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    8b84:	2101      	movs	r1, #1
    8b86:	2006      	movs	r0, #6
    8b88:	f000 fd36 	bl	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8b8c:	2001      	movs	r0, #1
    8b8e:	bd08      	pop	{r3, pc}
    8b90:	2a21      	cmp	r2, #33	; 0x21
    8b92:	d110      	bne.n	8bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    8b94:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    8b98:	2802      	cmp	r0, #2
    8b9a:	d00e      	beq.n	8bba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8b9c:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    8ba0:	2801      	cmp	r0, #1
    8ba2:	d108      	bne.n	8bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    8ba4:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
    8ba8:	f88d 0000 	strb.w	r0, [sp]
    8bac:	9800      	ldr	r0, [sp, #0]
    8bae:	9000      	str	r0, [sp, #0]
    8bb0:	f89d 0000 	ldrb.w	r0, [sp]
    8bb4:	b108      	cbz	r0, 8bba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8bb6:	2000      	movs	r0, #0
    8bb8:	bd08      	pop	{r3, pc}
    8bba:	2101      	movs	r1, #1
    8bbc:	2017      	movs	r0, #23
    8bbe:	e7e3      	b.n	8b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    8bc0:	20000130 	.word	0x20000130
    8bc4:	b538      	push	{r3, r4, r5, lr}
    8bc6:	2800      	cmp	r0, #0
    8bc8:	d16b      	bne.n	8ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    8bca:	4c37      	ldr	r4, [pc, #220]	; (8ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3dc>)
    8bcc:	68a0      	ldr	r0, [r4, #8]
    8bce:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8bd2:	07ca      	lsls	r2, r1, #31
    8bd4:	d002      	beq.n	8bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x310>
    8bd6:	2101      	movs	r1, #1
    8bd8:	2009      	movs	r0, #9
    8bda:	e05b      	b.n	8c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    8bdc:	078a      	lsls	r2, r1, #30
    8bde:	d50a      	bpl.n	8bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32a>
    8be0:	2101      	movs	r1, #1
    8be2:	200c      	movs	r0, #12
    8be4:	f000 fd08 	bl	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8be8:	68a0      	ldr	r0, [r4, #8]
    8bea:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    8bee:	f041 0101 	orr.w	r1, r1, #1
    8bf2:	7001      	strb	r1, [r0, #0]
    8bf4:	e050      	b.n	8c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    8bf6:	074a      	lsls	r2, r1, #29
    8bf8:	d502      	bpl.n	8c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
    8bfa:	2101      	movs	r1, #1
    8bfc:	2013      	movs	r0, #19
    8bfe:	e049      	b.n	8c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    8c00:	070a      	lsls	r2, r1, #28
    8c02:	d505      	bpl.n	8c10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    8c04:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
    8c08:	7141      	strb	r1, [r0, #5]
    8c0a:	2101      	movs	r1, #1
    8c0c:	2007      	movs	r0, #7
    8c0e:	e041      	b.n	8c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    8c10:	f011 0f30 	tst.w	r1, #48	; 0x30
    8c14:	d045      	beq.n	8ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    8c16:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    8c1a:	f88d 1000 	strb.w	r1, [sp]
    8c1e:	9900      	ldr	r1, [sp, #0]
    8c20:	9100      	str	r1, [sp, #0]
    8c22:	f89d 1000 	ldrb.w	r1, [sp]
    8c26:	bbc9      	cbnz	r1, 8c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    8c28:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    8c2c:	f88d 1000 	strb.w	r1, [sp]
    8c30:	9900      	ldr	r1, [sp, #0]
    8c32:	9100      	str	r1, [sp, #0]
    8c34:	f89d 1000 	ldrb.w	r1, [sp]
    8c38:	b1c9      	cbz	r1, 8c6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a2>
    8c3a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8c3e:	2924      	cmp	r1, #36	; 0x24
    8c40:	d02d      	beq.n	8c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    8c42:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8c46:	2924      	cmp	r1, #36	; 0x24
    8c48:	d029      	beq.n	8c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    8c4a:	2300      	movs	r3, #0
    8c4c:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    8c50:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8c54:	f005 fa71 	bl	e13a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8c58:	68a0      	ldr	r0, [r4, #8]
    8c5a:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    8c5e:	f021 0120 	bic.w	r1, r1, #32
    8c62:	f041 0110 	orr.w	r1, r1, #16
    8c66:	7001      	strb	r1, [r0, #0]
    8c68:	2100      	movs	r1, #0
    8c6a:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
    8c6e:	68a0      	ldr	r0, [r4, #8]
    8c70:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8c74:	06c9      	lsls	r1, r1, #27
    8c76:	d514      	bpl.n	8ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    8c78:	f005 fa7a 	bl	e170 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8c7c:	f000 f910 	bl	8ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    8c80:	68a1      	ldr	r1, [r4, #8]
    8c82:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8c86:	8bc2      	ldrh	r2, [r0, #30]
    8c88:	f821 2fee 	strh.w	r2, [r1, #238]!
    8c8c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8c8e:	8048      	strh	r0, [r1, #2]
    8c90:	2101      	movs	r1, #1
    8c92:	2015      	movs	r0, #21
    8c94:	f000 fcb0 	bl	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8c98:	2001      	movs	r0, #1
    8c9a:	bd38      	pop	{r3, r4, r5, pc}
    8c9c:	e001      	b.n	8ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    8c9e:	2301      	movs	r3, #1
    8ca0:	e7d4      	b.n	8c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    8ca2:	2000      	movs	r0, #0
    8ca4:	e7f9      	b.n	8c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ce>
    8ca6:	0000      	.short	0x0000
    8ca8:	20000130 	.word	0x20000130
    8cac:	b570      	push	{r4, r5, r6, lr}
    8cae:	460d      	mov	r5, r1
    8cb0:	4606      	mov	r6, r0
    8cb2:	f005 f884 	bl	ddbe <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    8cb6:	4604      	mov	r4, r0
    8cb8:	4630      	mov	r0, r6
    8cba:	f005 f88c 	bl	ddd6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8cbe:	4629      	mov	r1, r5
    8cc0:	f000 f81e 	bl	8d00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>
    8cc4:	b1b8      	cbz	r0, 8cf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    8cc6:	4620      	mov	r0, r4
    8cc8:	f004 fea4 	bl	da14 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8ccc:	0001      	movs	r1, r0
    8cce:	d00d      	beq.n	8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    8cd0:	480a      	ldr	r0, [pc, #40]	; (8cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>)
    8cd2:	6880      	ldr	r0, [r0, #8]
    8cd4:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    8cd8:	428a      	cmp	r2, r1
    8cda:	d007      	beq.n	8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    8cdc:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    8ce0:	2901      	cmp	r1, #1
    8ce2:	d005      	beq.n	8cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
    8ce4:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8ce8:	4220      	tst	r0, r4
    8cea:	d004      	beq.n	8cf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    8cec:	2001      	movs	r0, #1
    8cee:	bd70      	pop	{r4, r5, r6, pc}
    8cf0:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
    8cf4:	e7f8      	b.n	8ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    8cf6:	2000      	movs	r0, #0
    8cf8:	bd70      	pop	{r4, r5, r6, pc}
    8cfa:	0000      	.short	0x0000
    8cfc:	20000130 	.word	0x20000130
    8d00:	b570      	push	{r4, r5, r6, lr}
    8d02:	460d      	mov	r5, r1
    8d04:	4604      	mov	r4, r0
    8d06:	f004 fe85 	bl	da14 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8d0a:	b350      	cbz	r0, 8d62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    8d0c:	4916      	ldr	r1, [pc, #88]	; (8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>)
    8d0e:	6889      	ldr	r1, [r1, #8]
    8d10:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    8d14:	4282      	cmp	r2, r0
    8d16:	d024      	beq.n	8d62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    8d18:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
    8d1c:	2b01      	cmp	r3, #1
    8d1e:	d005      	beq.n	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    8d20:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    8d24:	4223      	tst	r3, r4
    8d26:	d013      	beq.n	8d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    8d28:	b11d      	cbz	r5, 8d32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8d2a:	e01a      	b.n	8d62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    8d2c:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
    8d30:	e7f8      	b.n	8d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
    8d32:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    8d36:	4221      	tst	r1, r4
    8d38:	d113      	bne.n	8d62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    8d3a:	b15a      	cbz	r2, 8d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    8d3c:	2a04      	cmp	r2, #4
    8d3e:	d00e      	beq.n	8d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    8d40:	2804      	cmp	r0, #4
    8d42:	d00c      	beq.n	8d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    8d44:	2a08      	cmp	r2, #8
    8d46:	d00a      	beq.n	8d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    8d48:	2808      	cmp	r0, #8
    8d4a:	d008      	beq.n	8d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    8d4c:	4282      	cmp	r2, r0
    8d4e:	d908      	bls.n	8d62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    8d50:	2000      	movs	r0, #0
    8d52:	bd70      	pop	{r4, r5, r6, pc}
    8d54:	f240 1155 	movw	r1, #341	; 0x155
    8d58:	2006      	movs	r0, #6
    8d5a:	f7fb fcf5 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d5e:	4282      	cmp	r2, r0
    8d60:	d3f6      	bcc.n	8d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    8d62:	2001      	movs	r0, #1
    8d64:	bd70      	pop	{r4, r5, r6, pc}
    8d66:	0000      	.short	0x0000
    8d68:	20000130 	.word	0x20000130
    8d6c:	490c      	ldr	r1, [pc, #48]	; (8da0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d4>)
    8d6e:	4602      	mov	r2, r0
    8d70:	7848      	ldrb	r0, [r1, #1]
    8d72:	b998      	cbnz	r0, 8d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    8d74:	4608      	mov	r0, r1
    8d76:	6880      	ldr	r0, [r0, #8]
    8d78:	b142      	cbz	r2, 8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>
    8d7a:	7889      	ldrb	r1, [r1, #2]
    8d7c:	0709      	lsls	r1, r1, #28
    8d7e:	d503      	bpl.n	8d88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    8d80:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    8d84:	2808      	cmp	r0, #8
    8d86:	d009      	beq.n	8d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    8d88:	2001      	movs	r0, #1
    8d8a:	4770      	bx	lr
    8d8c:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    8d90:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8d92:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    8d94:	428a      	cmp	r2, r1
    8d96:	d801      	bhi.n	8d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    8d98:	f7ff b81a 	b.w	7dd0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8d9c:	2000      	movs	r0, #0
    8d9e:	4770      	bx	lr
    8da0:	20000130 	.word	0x20000130
    8da4:	b538      	push	{r3, r4, r5, lr}
    8da6:	4c3d      	ldr	r4, [pc, #244]	; (8e9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>)
    8da8:	4605      	mov	r5, r0
    8daa:	68a0      	ldr	r0, [r4, #8]
    8dac:	3070      	adds	r0, #112	; 0x70
    8dae:	f006 f940 	bl	f032 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8db2:	2800      	cmp	r0, #0
    8db4:	d170      	bne.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    8db6:	2d00      	cmp	r5, #0
    8db8:	d16e      	bne.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    8dba:	68a0      	ldr	r0, [r4, #8]
    8dbc:	2301      	movs	r3, #1
    8dbe:	4619      	mov	r1, r3
    8dc0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8dc4:	3070      	adds	r0, #112	; 0x70
    8dc6:	f004 fd8c 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8dca:	2800      	cmp	r0, #0
    8dcc:	d164      	bne.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    8dce:	68a0      	ldr	r0, [r4, #8]
    8dd0:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    8dd4:	f88d 1000 	strb.w	r1, [sp]
    8dd8:	9900      	ldr	r1, [sp, #0]
    8dda:	9100      	str	r1, [sp, #0]
    8ddc:	f89d 1000 	ldrb.w	r1, [sp]
    8de0:	b149      	cbz	r1, 8df6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    8de2:	2100      	movs	r1, #0
    8de4:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    8de8:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    8dec:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    8df0:	2100      	movs	r1, #0
    8df2:	2002      	movs	r0, #2
    8df4:	e045      	b.n	8e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    8df6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8dfa:	2301      	movs	r3, #1
    8dfc:	2104      	movs	r1, #4
    8dfe:	3070      	adds	r0, #112	; 0x70
    8e00:	f004 fd6f 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e04:	4605      	mov	r5, r0
    8e06:	f7ff fedd 	bl	8bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    8e0a:	2800      	cmp	r0, #0
    8e0c:	d144      	bne.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    8e0e:	4628      	mov	r0, r5
    8e10:	f7ff fea0 	bl	8b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    8e14:	2800      	cmp	r0, #0
    8e16:	d13f      	bne.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    8e18:	68a0      	ldr	r0, [r4, #8]
    8e1a:	2301      	movs	r3, #1
    8e1c:	2100      	movs	r1, #0
    8e1e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8e22:	3070      	adds	r0, #112	; 0x70
    8e24:	f004 fd5d 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e28:	b178      	cbz	r0, 8e4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    8e2a:	68a0      	ldr	r0, [r4, #8]
    8e2c:	2301      	movs	r3, #1
    8e2e:	2104      	movs	r1, #4
    8e30:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8e34:	3070      	adds	r0, #112	; 0x70
    8e36:	f004 fd54 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e3a:	b930      	cbnz	r0, 8e4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    8e3c:	68a0      	ldr	r0, [r4, #8]
    8e3e:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
    8e42:	b110      	cbz	r0, 8e4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    8e44:	2100      	movs	r1, #0
    8e46:	2012      	movs	r0, #18
    8e48:	e01b      	b.n	8e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    8e4a:	68a0      	ldr	r0, [r4, #8]
    8e4c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8e50:	290a      	cmp	r1, #10
    8e52:	d01a      	beq.n	8e8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8e54:	2d00      	cmp	r5, #0
    8e56:	d11f      	bne.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    8e58:	f000 fb1a 	bl	9490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
    8e5c:	2800      	cmp	r0, #0
    8e5e:	d11b      	bne.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    8e60:	68a0      	ldr	r0, [r4, #8]
    8e62:	2301      	movs	r3, #1
    8e64:	2100      	movs	r1, #0
    8e66:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8e6a:	3070      	adds	r0, #112	; 0x70
    8e6c:	f004 fd39 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e70:	2800      	cmp	r0, #0
    8e72:	d011      	beq.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    8e74:	68a0      	ldr	r0, [r4, #8]
    8e76:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
    8e7a:	2800      	cmp	r0, #0
    8e7c:	d00c      	beq.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    8e7e:	2100      	movs	r1, #0
    8e80:	20ff      	movs	r0, #255	; 0xff
    8e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e86:	f000 bbb7 	b.w	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8e8a:	f810 1fea 	ldrb.w	r1, [r0, #234]!
    8e8e:	7101      	strb	r1, [r0, #4]
    8e90:	2100      	movs	r1, #0
    8e92:	2007      	movs	r0, #7
    8e94:	e7f5      	b.n	8e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    8e96:	e7ff      	b.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    8e98:	bd38      	pop	{r3, r4, r5, pc}
    8e9a:	0000      	.short	0x0000
    8e9c:	20000130 	.word	0x20000130
    8ea0:	480a      	ldr	r0, [pc, #40]	; (8ecc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>)
    8ea2:	b510      	push	{r4, lr}
    8ea4:	6881      	ldr	r1, [r0, #8]
    8ea6:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    8eaa:	2801      	cmp	r0, #1
    8eac:	d009      	beq.n	8ec2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
    8eae:	8808      	ldrh	r0, [r1, #0]
    8eb0:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    8eb4:	312c      	adds	r1, #44	; 0x2c
    8eb6:	f005 f91c 	bl	e0f2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8ebe:	f7fd bdcf 	b.w	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8ec2:	2002      	movs	r0, #2
    8ec4:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    8ec8:	bd10      	pop	{r4, pc}
    8eca:	0000      	.short	0x0000
    8ecc:	20000130 	.word	0x20000130
    8ed0:	b570      	push	{r4, r5, r6, lr}
    8ed2:	4c25      	ldr	r4, [pc, #148]	; (8f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    8ed4:	0005      	movs	r5, r0
    8ed6:	d12f      	bne.n	8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    8ed8:	f000 f8a4 	bl	9024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
    8edc:	f000 f848 	bl	8f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
    8ee0:	0005      	movs	r5, r0
    8ee2:	d129      	bne.n	8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    8ee4:	8860      	ldrh	r0, [r4, #2]
    8ee6:	0741      	lsls	r1, r0, #29
    8ee8:	d506      	bpl.n	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    8eea:	68a1      	ldr	r1, [r4, #8]
    8eec:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    8ef0:	2907      	cmp	r1, #7
    8ef2:	d101      	bne.n	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    8ef4:	2101      	movs	r1, #1
    8ef6:	7021      	strb	r1, [r4, #0]
    8ef8:	0780      	lsls	r0, r0, #30
    8efa:	d512      	bpl.n	8f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    8efc:	68e0      	ldr	r0, [r4, #12]
    8efe:	78c0      	ldrb	r0, [r0, #3]
    8f00:	2819      	cmp	r0, #25
    8f02:	d205      	bcs.n	8f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    8f04:	4919      	ldr	r1, [pc, #100]	; (8f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
    8f06:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    8f0a:	b109      	cbz	r1, 8f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    8f0c:	4788      	blx	r1
    8f0e:	e008      	b.n	8f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    8f10:	28ff      	cmp	r0, #255	; 0xff
    8f12:	d004      	beq.n	8f1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    8f14:	f240 714d 	movw	r1, #1869	; 0x74d
    8f18:	2031      	movs	r0, #49	; 0x31
    8f1a:	f7fb fc15 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f1e:	f001 f91b 	bl	a158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    8f22:	78a0      	ldrb	r0, [r4, #2]
    8f24:	06c0      	lsls	r0, r0, #27
    8f26:	d507      	bpl.n	8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    8f28:	68a0      	ldr	r0, [r4, #8]
    8f2a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8f2e:	290b      	cmp	r1, #11
    8f30:	d102      	bne.n	8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    8f32:	210c      	movs	r1, #12
    8f34:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    8f38:	7860      	ldrb	r0, [r4, #1]
    8f3a:	0700      	lsls	r0, r0, #28
    8f3c:	d511      	bpl.n	8f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
    8f3e:	68a0      	ldr	r0, [r4, #8]
    8f40:	2301      	movs	r3, #1
    8f42:	2105      	movs	r1, #5
    8f44:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8f48:	3070      	adds	r0, #112	; 0x70
    8f4a:	f004 fcca 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f4e:	b128      	cbz	r0, 8f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x690>
    8f50:	68a1      	ldr	r1, [r4, #8]
    8f52:	2508      	movs	r5, #8
    8f54:	2000      	movs	r0, #0
    8f56:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
    8f5a:	e002      	b.n	8f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
    8f5c:	2000      	movs	r0, #0
    8f5e:	f7fc fc4d 	bl	57fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8f62:	4628      	mov	r0, r5
    8f64:	bd70      	pop	{r4, r5, r6, pc}
    8f66:	0000      	.short	0x0000
    8f68:	20000130 	.word	0x20000130
    8f6c:	200001a8 	.word	0x200001a8
    8f70:	b570      	push	{r4, r5, r6, lr}
    8f72:	4c2a      	ldr	r4, [pc, #168]	; (901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    8f74:	2000      	movs	r0, #0
    8f76:	78a1      	ldrb	r1, [r4, #2]
    8f78:	07c9      	lsls	r1, r1, #31
    8f7a:	d015      	beq.n	8fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6dc>
    8f7c:	6920      	ldr	r0, [r4, #16]
    8f7e:	2301      	movs	r3, #1
    8f80:	2105      	movs	r1, #5
    8f82:	78c5      	ldrb	r5, [r0, #3]
    8f84:	68a0      	ldr	r0, [r4, #8]
    8f86:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8f8a:	3070      	adds	r0, #112	; 0x70
    8f8c:	f004 fca9 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f90:	b158      	cbz	r0, 8faa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    8f92:	1ead      	subs	r5, r5, #2
    8f94:	2d0a      	cmp	r5, #10
    8f96:	d206      	bcs.n	8fa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    8f98:	e8df f005 	tbb	[pc, r5]
    8f9c:	05050707 	.word	0x05050707
    8fa0:	05050707 	.word	0x05050707
    8fa4:	0707      	.short	0x0707
    8fa6:	2008      	movs	r0, #8
    8fa8:	bd70      	pop	{r4, r5, r6, pc}
    8faa:	6920      	ldr	r0, [r4, #16]
    8fac:	f7fd fc34 	bl	6818 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    8fb0:	b138      	cbz	r0, 8fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f6>
    8fb2:	6920      	ldr	r0, [r4, #16]
    8fb4:	78c5      	ldrb	r5, [r0, #3]
    8fb6:	b145      	cbz	r5, 8fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    8fb8:	2d01      	cmp	r5, #1
    8fba:	d006      	beq.n	8fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    8fbc:	2d16      	cmp	r5, #22
    8fbe:	d118      	bne.n	8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    8fc0:	e003      	b.n	8fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    8fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fc6:	f000 bd3d 	b.w	9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    8fca:	68a0      	ldr	r0, [r4, #8]
    8fcc:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    8fd0:	f004 fcd5 	bl	d97e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8fd4:	b168      	cbz	r0, 8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    8fd6:	68a1      	ldr	r1, [r4, #8]
    8fd8:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    8fdc:	281f      	cmp	r0, #31
    8fde:	d008      	beq.n	8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    8fe0:	2820      	cmp	r0, #32
    8fe2:	d003      	beq.n	8fec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x720>
    8fe4:	2d16      	cmp	r5, #22
    8fe6:	d00c      	beq.n	9002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    8fe8:	2002      	movs	r0, #2
    8fea:	bd70      	pop	{r4, r5, r6, pc}
    8fec:	2026      	movs	r0, #38	; 0x26
    8fee:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8ff2:	2d19      	cmp	r5, #25
    8ff4:	d207      	bcs.n	9006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    8ff6:	480a      	ldr	r0, [pc, #40]	; (9020 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
    8ff8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8ffc:	b118      	cbz	r0, 9006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    8ffe:	4780      	blx	r0
    9000:	e003      	b.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    9002:	2020      	movs	r0, #32
    9004:	bd70      	pop	{r4, r5, r6, pc}
    9006:	f000 fd1d 	bl	9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    900a:	68a2      	ldr	r2, [r4, #8]
    900c:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
    9010:	1c49      	adds	r1, r1, #1
    9012:	f143 0300 	adc.w	r3, r3, #0
    9016:	e9c2 1300 	strd	r1, r3, [r2]
    901a:	bd70      	pop	{r4, r5, r6, pc}
    901c:	20000130 	.word	0x20000130
    9020:	20000144 	.word	0x20000144
    9024:	b570      	push	{r4, r5, r6, lr}
    9026:	4c22      	ldr	r4, [pc, #136]	; (90b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    9028:	78a0      	ldrb	r0, [r4, #2]
    902a:	0700      	lsls	r0, r0, #28
    902c:	d53e      	bpl.n	90ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    902e:	68a0      	ldr	r0, [r4, #8]
    9030:	3070      	adds	r0, #112	; 0x70
    9032:	f005 fffe 	bl	f032 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9036:	b148      	cbz	r0, 904c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    9038:	68a0      	ldr	r0, [r4, #8]
    903a:	21fe      	movs	r1, #254	; 0xfe
    903c:	2500      	movs	r5, #0
    903e:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    9042:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9046:	2919      	cmp	r1, #25
    9048:	d10c      	bne.n	9064 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    904a:	e004      	b.n	9056 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    904c:	f240 7157 	movw	r1, #1879	; 0x757
    9050:	2031      	movs	r0, #49	; 0x31
    9052:	f7fb fb79 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9056:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
    905a:	f7ff fd69 	bl	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    905e:	68a0      	ldr	r0, [r4, #8]
    9060:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    9064:	68a0      	ldr	r0, [r4, #8]
    9066:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    906a:	291f      	cmp	r1, #31
    906c:	d002      	beq.n	9074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    906e:	2927      	cmp	r1, #39	; 0x27
    9070:	d113      	bne.n	909a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9072:	e00b      	b.n	908c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    9074:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    9078:	f004 fc81 	bl	d97e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    907c:	b108      	cbz	r0, 9082 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    907e:	2026      	movs	r0, #38	; 0x26
    9080:	e000      	b.n	9084 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    9082:	2020      	movs	r0, #32
    9084:	68a1      	ldr	r1, [r4, #8]
    9086:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    908a:	e006      	b.n	909a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    908c:	2101      	movs	r1, #1
    908e:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
    9092:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    9096:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    909a:	68a0      	ldr	r0, [r4, #8]
    909c:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    90a0:	2908      	cmp	r1, #8
    90a2:	d103      	bne.n	90ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    90a4:	2102      	movs	r1, #2
    90a6:	7021      	strb	r1, [r4, #0]
    90a8:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    90ac:	bd70      	pop	{r4, r5, r6, pc}
    90ae:	0000      	.short	0x0000
    90b0:	20000130 	.word	0x20000130
    90b4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    90b6:	4605      	mov	r5, r0
    90b8:	4668      	mov	r0, sp
    90ba:	f7fc fa09 	bl	54d0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    90be:	b318      	cbz	r0, 9108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
    90c0:	2222      	movs	r2, #34	; 0x22
    90c2:	2100      	movs	r1, #0
    90c4:	9800      	ldr	r0, [sp, #0]
    90c6:	f003 fa19 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    90ca:	2103      	movs	r1, #3
    90cc:	9800      	ldr	r0, [sp, #0]
    90ce:	f004 fed6 	bl	de7e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    90d2:	9800      	ldr	r0, [sp, #0]
    90d4:	7801      	ldrb	r1, [r0, #0]
    90d6:	f021 0110 	bic.w	r1, r1, #16
    90da:	7001      	strb	r1, [r0, #0]
    90dc:	4629      	mov	r1, r5
    90de:	f7fd fbc7 	bl	6870 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    90e2:	2100      	movs	r1, #0
    90e4:	4c5f      	ldr	r4, [pc, #380]	; (9264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
    90e6:	f644 162f 	movw	r6, #18735	; 0x492f
    90ea:	2d0e      	cmp	r5, #14
    90ec:	d07e      	beq.n	91ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    90ee:	dc0e      	bgt.n	910e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    90f0:	f1a5 0502 	sub.w	r5, r5, #2
    90f4:	2d0c      	cmp	r5, #12
    90f6:	d21c      	bcs.n	9132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
    90f8:	e8df f005 	tbb	[pc, r5]
    90fc:	aa491b1e 	.word	0xaa491b1e
    9100:	551b1eaa 	.word	0x551b1eaa
    9104:	3034aa1b 	.word	0x3034aa1b
    9108:	f640 1187 	movw	r1, #2439	; 0x987
    910c:	e0a6      	b.n	925c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    910e:	2d15      	cmp	r5, #21
    9110:	d05c      	beq.n	91cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    9112:	dc08      	bgt.n	9126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    9114:	2d11      	cmp	r5, #17
    9116:	d014      	beq.n	9142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x876>
    9118:	2d12      	cmp	r5, #18
    911a:	d01e      	beq.n	915a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
    911c:	2d13      	cmp	r5, #19
    911e:	d01c      	beq.n	915a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
    9120:	2d14      	cmp	r5, #20
    9122:	d106      	bne.n	9132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
    9124:	e052      	b.n	91cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    9126:	2d16      	cmp	r5, #22
    9128:	d027      	beq.n	917a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ae>
    912a:	2d17      	cmp	r5, #23
    912c:	d069      	beq.n	9202 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x936>
    912e:	2dff      	cmp	r5, #255	; 0xff
    9130:	d072      	beq.n	9218 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9132:	f640 11fd 	movw	r1, #2557	; 0x9fd
    9136:	e091      	b.n	925c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    9138:	68a1      	ldr	r1, [r4, #8]
    913a:	9800      	ldr	r0, [sp, #0]
    913c:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
    9140:	e00e      	b.n	9160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x894>
    9142:	68a0      	ldr	r0, [r4, #8]
    9144:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
    9148:	9800      	ldr	r0, [sp, #0]
    914a:	f004 fe74 	bl	de36 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    914e:	68a0      	ldr	r0, [r4, #8]
    9150:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
    9154:	9800      	ldr	r0, [sp, #0]
    9156:	f004 fe70 	bl	de3a <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    915a:	e079      	b.n	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    915c:	9800      	ldr	r0, [sp, #0]
    915e:	2106      	movs	r1, #6
    9160:	7101      	strb	r1, [r0, #4]
    9162:	e075      	b.n	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9164:	9800      	ldr	r0, [sp, #0]
    9166:	220b      	movs	r2, #11
    9168:	7102      	strb	r2, [r0, #4]
    916a:	2259      	movs	r2, #89	; 0x59
    916c:	7142      	strb	r2, [r0, #5]
    916e:	7181      	strb	r1, [r0, #6]
    9170:	21fe      	movs	r1, #254	; 0xfe
    9172:	71c1      	strb	r1, [r0, #7]
    9174:	2112      	movs	r1, #18
    9176:	7201      	strb	r1, [r0, #8]
    9178:	e06a      	b.n	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    917a:	9800      	ldr	r0, [sp, #0]
    917c:	f8d4 1008 	ldr.w	r1, [r4, #8]
    9180:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
    9184:	7102      	strb	r2, [r0, #4]
    9186:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
    918a:	7141      	strb	r1, [r0, #5]
    918c:	e060      	b.n	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    918e:	68a1      	ldr	r1, [r4, #8]
    9190:	9800      	ldr	r0, [sp, #0]
    9192:	f501 718c 	add.w	r1, r1, #280	; 0x118
    9196:	f004 fe63 	bl	de60 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    919a:	68a1      	ldr	r1, [r4, #8]
    919c:	9800      	ldr	r0, [sp, #0]
    919e:	31e4      	adds	r1, #228	; 0xe4
    91a0:	f004 fe5b 	bl	de5a <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    91a4:	e054      	b.n	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    91a6:	9101      	str	r1, [sp, #4]
    91a8:	9102      	str	r1, [sp, #8]
    91aa:	f001 fe05 	bl	adb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    91ae:	68a1      	ldr	r1, [r4, #8]
    91b0:	4030      	ands	r0, r6
    91b2:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    91b6:	4001      	ands	r1, r0
    91b8:	f88d 1004 	strb.w	r1, [sp, #4]
    91bc:	0a00      	lsrs	r0, r0, #8
    91be:	f88d 0005 	strb.w	r0, [sp, #5]
    91c2:	a901      	add	r1, sp, #4
    91c4:	9800      	ldr	r0, [sp, #0]
    91c6:	f004 fe55 	bl	de74 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    91ca:	e041      	b.n	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    91cc:	68a0      	ldr	r0, [r4, #8]
    91ce:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    91d2:	9800      	ldr	r0, [sp, #0]
    91d4:	f004 fe5b 	bl	de8e <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    91d8:	68a0      	ldr	r0, [r4, #8]
    91da:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
    91de:	9800      	ldr	r0, [sp, #0]
    91e0:	f004 fe59 	bl	de96 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    91e4:	68a0      	ldr	r0, [r4, #8]
    91e6:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    91ea:	e000      	b.n	91ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    91ec:	e015      	b.n	921a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    91ee:	9800      	ldr	r0, [sp, #0]
    91f0:	f004 fe55 	bl	de9e <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    91f4:	68a0      	ldr	r0, [r4, #8]
    91f6:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
    91fa:	9800      	ldr	r0, [sp, #0]
    91fc:	f004 fe53 	bl	dea6 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9200:	e026      	b.n	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9202:	68a1      	ldr	r1, [r4, #8]
    9204:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    9208:	2801      	cmp	r0, #1
    920a:	9800      	ldr	r0, [sp, #0]
    920c:	d0b8      	beq.n	9180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b4>
    920e:	f811 2f66 	ldrb.w	r2, [r1, #102]!
    9212:	7102      	strb	r2, [r0, #4]
    9214:	7849      	ldrb	r1, [r1, #1]
    9216:	e7b8      	b.n	918a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    9218:	e012      	b.n	9240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x974>
    921a:	9101      	str	r1, [sp, #4]
    921c:	9102      	str	r1, [sp, #8]
    921e:	f001 fdcb 	bl	adb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9222:	68a1      	ldr	r1, [r4, #8]
    9224:	4030      	ands	r0, r6
    9226:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    922a:	4001      	ands	r1, r0
    922c:	f88d 1004 	strb.w	r1, [sp, #4]
    9230:	0a00      	lsrs	r0, r0, #8
    9232:	f88d 0005 	strb.w	r0, [sp, #5]
    9236:	a901      	add	r1, sp, #4
    9238:	9800      	ldr	r0, [sp, #0]
    923a:	f004 fe16 	bl	de6a <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    923e:	e007      	b.n	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9240:	68a0      	ldr	r0, [r4, #8]
    9242:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    9246:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    924a:	9800      	ldr	r0, [sp, #0]
    924c:	f004 fdf7 	bl	de3e <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9250:	f7fc f918 	bl	5484 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9254:	2800      	cmp	r0, #0
    9256:	d104      	bne.n	9262 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9258:	f640 2101 	movw	r1, #2561	; 0xa01
    925c:	2031      	movs	r0, #49	; 0x31
    925e:	f7fb fa73 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9262:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9264:	20000130 	.word	0x20000130
    9268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    926c:	4c87      	ldr	r4, [pc, #540]	; (948c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
    926e:	4682      	mov	sl, r0
    9270:	4689      	mov	r9, r1
    9272:	68a0      	ldr	r0, [r4, #8]
    9274:	8800      	ldrh	r0, [r0, #0]
    9276:	f7fb fe97 	bl	4fa8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    927a:	0006      	movs	r6, r0
    927c:	d00a      	beq.n	9294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
    927e:	8860      	ldrh	r0, [r4, #2]
    9280:	f04f 0500 	mov.w	r5, #0
    9284:	05c0      	lsls	r0, r0, #23
    9286:	68a0      	ldr	r0, [r4, #8]
    9288:	d509      	bpl.n	929e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    928a:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
    928e:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
    9292:	e008      	b.n	92a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
    9294:	f640 51a7 	movw	r1, #3495	; 0xda7
    9298:	2031      	movs	r0, #49	; 0x31
    929a:	f7fb fa55 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    929e:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
    92a2:	1c49      	adds	r1, r1, #1
    92a4:	8001      	strh	r1, [r0, #0]
    92a6:	f001 f8f3 	bl	a490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    92aa:	f04f 0801 	mov.w	r8, #1
    92ae:	b320      	cbz	r0, 92fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    92b0:	8860      	ldrh	r0, [r4, #2]
    92b2:	0500      	lsls	r0, r0, #20
    92b4:	d506      	bpl.n	92c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    92b6:	68a0      	ldr	r0, [r4, #8]
    92b8:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    92bc:	b111      	cbz	r1, 92c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    92be:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    92c2:	e01a      	b.n	92fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    92c4:	68a0      	ldr	r0, [r4, #8]
    92c6:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    92ca:	1c49      	adds	r1, r1, #1
    92cc:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    92d0:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    92d4:	428b      	cmp	r3, r1
    92d6:	d301      	bcc.n	92dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    92d8:	1a5a      	subs	r2, r3, r1
    92da:	e000      	b.n	92de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
    92dc:	2200      	movs	r2, #0
    92de:	88a7      	ldrh	r7, [r4, #4]
    92e0:	1d7f      	adds	r7, r7, #5
    92e2:	42ba      	cmp	r2, r7
    92e4:	d801      	bhi.n	92ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    92e6:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    92ea:	4299      	cmp	r1, r3
    92ec:	d305      	bcc.n	92fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    92ee:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    92f2:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
    92f6:	f7fd fbb3 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    92fa:	8860      	ldrh	r0, [r4, #2]
    92fc:	f04f 0702 	mov.w	r7, #2
    9300:	f410 7f40 	tst.w	r0, #768	; 0x300
    9304:	d00e      	beq.n	9324 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    9306:	68a0      	ldr	r0, [r4, #8]
    9308:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    930c:	b111      	cbz	r1, 9314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa48>
    930e:	2903      	cmp	r1, #3
    9310:	d108      	bne.n	9324 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    9312:	e002      	b.n	931a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4e>
    9314:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    9318:	e001      	b.n	931e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa52>
    931a:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    931e:	2101      	movs	r1, #1
    9320:	f7fe fd7c 	bl	7e1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9324:	68a0      	ldr	r0, [r4, #8]
    9326:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    932a:	2901      	cmp	r1, #1
    932c:	d104      	bne.n	9338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    932e:	8861      	ldrh	r1, [r4, #2]
    9330:	0549      	lsls	r1, r1, #21
    9332:	d501      	bpl.n	9338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    9334:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    9338:	f1ba 0f00 	cmp.w	sl, #0
    933c:	d176      	bne.n	942c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
    933e:	78a1      	ldrb	r1, [r4, #2]
    9340:	0649      	lsls	r1, r1, #25
    9342:	d502      	bpl.n	934a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    9344:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
    9348:	e004      	b.n	9354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa88>
    934a:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    934e:	1c49      	adds	r1, r1, #1
    9350:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
    9354:	4648      	mov	r0, r9
    9356:	f7ff fdbb 	bl	8ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x604>
    935a:	ea40 0009 	orr.w	r0, r0, r9
    935e:	4681      	mov	r9, r0
    9360:	f7ff fd20 	bl	8da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    9364:	68a7      	ldr	r7, [r4, #8]
    9366:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
    936a:	1c40      	adds	r0, r0, #1
    936c:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
    9370:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    9374:	b128      	cbz	r0, 9382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab6>
    9376:	f7fc faaf 	bl	58d8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    937a:	b1b0      	cbz	r0, 93aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    937c:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    9380:	e013      	b.n	93aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    9382:	f7fc f927 	bl	55d4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9386:	b108      	cbz	r0, 938c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac0>
    9388:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    938c:	f7fc f91c 	bl	55c8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9390:	b158      	cbz	r0, 93aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    9392:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
    9396:	1c40      	adds	r0, r0, #1
    9398:	b2c0      	uxtb	r0, r0
    939a:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
    939e:	2802      	cmp	r0, #2
    93a0:	d903      	bls.n	93aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    93a2:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    93a6:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
    93aa:	68a0      	ldr	r0, [r4, #8]
    93ac:	2301      	movs	r3, #1
    93ae:	2100      	movs	r1, #0
    93b0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    93b4:	3070      	adds	r0, #112	; 0x70
    93b6:	f004 fa94 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93ba:	b920      	cbnz	r0, 93c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafa>
    93bc:	68a0      	ldr	r0, [r4, #8]
    93be:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    93c2:	280c      	cmp	r0, #12
    93c4:	d15e      	bne.n	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    93c6:	68a0      	ldr	r0, [r4, #8]
    93c8:	2301      	movs	r3, #1
    93ca:	2100      	movs	r1, #0
    93cc:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    93d0:	3070      	adds	r0, #112	; 0x70
    93d2:	f004 fa86 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93d6:	b350      	cbz	r0, 942e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    93d8:	68a0      	ldr	r0, [r4, #8]
    93da:	2301      	movs	r3, #1
    93dc:	2100      	movs	r1, #0
    93de:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    93e2:	3070      	adds	r0, #112	; 0x70
    93e4:	f004 fa7d 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93e8:	b308      	cbz	r0, 942e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    93ea:	68a0      	ldr	r0, [r4, #8]
    93ec:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    93f0:	2902      	cmp	r1, #2
    93f2:	d147      	bne.n	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    93f4:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    93f8:	b9c8      	cbnz	r0, 942e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    93fa:	4630      	mov	r0, r6
    93fc:	f003 fd4d 	bl	ce9a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9400:	b1a8      	cbz	r0, 942e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9402:	68a0      	ldr	r0, [r4, #8]
    9404:	3070      	adds	r0, #112	; 0x70
    9406:	f005 fe14 	bl	f032 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    940a:	b980      	cbnz	r0, 942e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    940c:	68a1      	ldr	r1, [r4, #8]
    940e:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    9412:	2801      	cmp	r0, #1
    9414:	d936      	bls.n	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    9416:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
    941a:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    941e:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
    9422:	1e93      	subs	r3, r2, #2
    9424:	4298      	cmp	r0, r3
    9426:	db03      	blt.n	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9428:	2001      	movs	r0, #1
    942a:	e004      	b.n	9436 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
    942c:	e01c      	b.n	9468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    942e:	e029      	b.n	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    9430:	1a10      	subs	r0, r2, r0
    9432:	1e40      	subs	r0, r0, #1
    9434:	b280      	uxth	r0, r0
    9436:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    943a:	88a3      	ldrh	r3, [r4, #4]
    943c:	429a      	cmp	r2, r3
    943e:	d301      	bcc.n	9444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb78>
    9440:	2201      	movs	r2, #1
    9442:	e002      	b.n	944a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    9444:	1a9a      	subs	r2, r3, r2
    9446:	1c52      	adds	r2, r2, #1
    9448:	b292      	uxth	r2, r2
    944a:	4290      	cmp	r0, r2
    944c:	d900      	bls.n	9450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
    944e:	4610      	mov	r0, r2
    9450:	2801      	cmp	r0, #1
    9452:	d101      	bne.n	9458 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
    9454:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    9458:	68a1      	ldr	r1, [r4, #8]
    945a:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    945e:	4410      	add	r0, r2
    9460:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
    9464:	f001 f8de 	bl	a624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d58>
    9468:	78a0      	ldrb	r0, [r4, #2]
    946a:	464a      	mov	r2, r9
    946c:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9470:	4650      	mov	r0, sl
    9472:	f001 f821 	bl	a4b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bec>
    9476:	68a0      	ldr	r0, [r4, #8]
    9478:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    947c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9480:	f7fb bfea 	b.w	5458 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9484:	2001      	movs	r0, #1
    9486:	68a1      	ldr	r1, [r4, #8]
    9488:	e7e4      	b.n	9454 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    948a:	0000      	.short	0x0000
    948c:	20000130 	.word	0x20000130
    9490:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9492:	4c58      	ldr	r4, [pc, #352]	; (95f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd28>)
    9494:	2301      	movs	r3, #1
    9496:	2100      	movs	r1, #0
    9498:	68a0      	ldr	r0, [r4, #8]
    949a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    949e:	3070      	adds	r0, #112	; 0x70
    94a0:	f004 fa1f 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94a4:	2800      	cmp	r0, #0
    94a6:	d07d      	beq.n	95a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
    94a8:	68a0      	ldr	r0, [r4, #8]
    94aa:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    94ae:	2500      	movs	r5, #0
    94b0:	b139      	cbz	r1, 94c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
    94b2:	2100      	movs	r1, #0
    94b4:	200e      	movs	r0, #14
    94b6:	f000 f89f 	bl	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    94ba:	68a0      	ldr	r0, [r4, #8]
    94bc:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
    94c0:	e095      	b.n	95ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    94c2:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    94c6:	b119      	cbz	r1, 94d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
    94c8:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    94cc:	0789      	lsls	r1, r1, #30
    94ce:	d016      	beq.n	94fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
    94d0:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    94d4:	f88d 1004 	strb.w	r1, [sp, #4]
    94d8:	9901      	ldr	r1, [sp, #4]
    94da:	9101      	str	r1, [sp, #4]
    94dc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    94e0:	b141      	cbz	r1, 94f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
    94e2:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    94e6:	f88d 1000 	strb.w	r1, [sp]
    94ea:	9900      	ldr	r1, [sp, #0]
    94ec:	9100      	str	r1, [sp, #0]
    94ee:	f89d 1000 	ldrb.w	r1, [sp]
    94f2:	b189      	cbz	r1, 9518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
    94f4:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    94f8:	2901      	cmp	r1, #1
    94fa:	d02f      	beq.n	955c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    94fc:	e071      	b.n	95e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    94fe:	2100      	movs	r1, #0
    9500:	200c      	movs	r0, #12
    9502:	f000 f879 	bl	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9506:	68a0      	ldr	r0, [r4, #8]
    9508:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    950c:	f041 0101 	orr.w	r1, r1, #1
    9510:	7001      	strb	r1, [r0, #0]
    9512:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    9516:	e06a      	b.n	95ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    9518:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    951c:	2924      	cmp	r1, #36	; 0x24
    951e:	d01b      	beq.n	9558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
    9520:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9524:	2924      	cmp	r1, #36	; 0x24
    9526:	d017      	beq.n	9558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
    9528:	f05f 0300 	movs.w	r3, #0
    952c:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    9530:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    9534:	f004 fe01 	bl	e13a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9538:	68a0      	ldr	r0, [r4, #8]
    953a:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
    953e:	2100      	movs	r1, #0
    9540:	2014      	movs	r0, #20
    9542:	f000 f859 	bl	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9546:	68a1      	ldr	r1, [r4, #8]
    9548:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    954c:	8bc2      	ldrh	r2, [r0, #30]
    954e:	f821 2fee 	strh.w	r2, [r1, #238]!
    9552:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9554:	8048      	strh	r0, [r1, #2]
    9556:	e04a      	b.n	95ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    9558:	2301      	movs	r3, #1
    955a:	e7e7      	b.n	952c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    955c:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
    9560:	f88d 1000 	strb.w	r1, [sp]
    9564:	9900      	ldr	r1, [sp, #0]
    9566:	9100      	str	r1, [sp, #0]
    9568:	f89d 1000 	ldrb.w	r1, [sp]
    956c:	bb31      	cbnz	r1, 95bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
    956e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9572:	2301      	movs	r3, #1
    9574:	210b      	movs	r1, #11
    9576:	3070      	adds	r0, #112	; 0x70
    9578:	f004 f9b3 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    957c:	b9f0      	cbnz	r0, 95bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
    957e:	68a0      	ldr	r0, [r4, #8]
    9580:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9584:	f005 fd5d 	bl	f042 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9588:	4605      	mov	r5, r0
    958a:	68a0      	ldr	r0, [r4, #8]
    958c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9590:	f005 fd57 	bl	f042 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9594:	4606      	mov	r6, r0
    9596:	68a0      	ldr	r0, [r4, #8]
    9598:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    959c:	4628      	mov	r0, r5
    959e:	f005 fd5b 	bl	f058 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    95a2:	e000      	b.n	95a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcda>
    95a4:	e01e      	b.n	95e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    95a6:	b150      	cbz	r0, 95be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
    95a8:	68a0      	ldr	r0, [r4, #8]
    95aa:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
    95ae:	4630      	mov	r0, r6
    95b0:	f005 fd52 	bl	f058 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    95b4:	b118      	cbz	r0, 95be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
    95b6:	2000      	movs	r0, #0
    95b8:	f000 f91c 	bl	97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    95bc:	e011      	b.n	95e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    95be:	68a0      	ldr	r0, [r4, #8]
    95c0:	2301      	movs	r3, #1
    95c2:	2103      	movs	r1, #3
    95c4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    95c8:	3070      	adds	r0, #112	; 0x70
    95ca:	f004 f98a 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95ce:	b940      	cbnz	r0, 95e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    95d0:	68a0      	ldr	r0, [r4, #8]
    95d2:	2301      	movs	r3, #1
    95d4:	2102      	movs	r1, #2
    95d6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    95da:	3070      	adds	r0, #112	; 0x70
    95dc:	f004 f981 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95e0:	b108      	cbz	r0, 95e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    95e2:	2000      	movs	r0, #0
    95e4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    95e6:	2100      	movs	r1, #0
    95e8:	2016      	movs	r0, #22
    95ea:	f000 f805 	bl	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    95ee:	2001      	movs	r0, #1
    95f0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    95f2:	0000      	.short	0x0000
    95f4:	20000130 	.word	0x20000130
    95f8:	b570      	push	{r4, r5, r6, lr}
    95fa:	4c0d      	ldr	r4, [pc, #52]	; (9630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd64>)
    95fc:	4606      	mov	r6, r0
    95fe:	460d      	mov	r5, r1
    9600:	68a0      	ldr	r0, [r4, #8]
    9602:	3070      	adds	r0, #112	; 0x70
    9604:	f005 fd15 	bl	f032 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9608:	b120      	cbz	r0, 9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>
    960a:	f640 2114 	movw	r1, #2580	; 0xa14
    960e:	2031      	movs	r0, #49	; 0x31
    9610:	f7fb f89a 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9614:	68a2      	ldr	r2, [r4, #8]
    9616:	2000      	movs	r0, #0
    9618:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
    961c:	b115      	cbz	r5, 9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd58>
    961e:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
    9622:	bd70      	pop	{r4, r5, r6, pc}
    9624:	f822 0faa 	strh.w	r0, [r2, #170]!
    9628:	2001      	movs	r0, #1
    962a:	7110      	strb	r0, [r2, #4]
    962c:	bd70      	pop	{r4, r5, r6, pc}
    962e:	0000      	.short	0x0000
    9630:	20000130 	.word	0x20000130
    9634:	b570      	push	{r4, r5, r6, lr}
    9636:	4d1a      	ldr	r5, [pc, #104]	; (96a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    9638:	2600      	movs	r6, #0
    963a:	68ac      	ldr	r4, [r5, #8]
    963c:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    9640:	2801      	cmp	r0, #1
    9642:	d00a      	beq.n	965a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8e>
    9644:	2802      	cmp	r0, #2
    9646:	d129      	bne.n	969c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9648:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    964c:	2106      	movs	r1, #6
    964e:	b1a0      	cbz	r0, 967a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    9650:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    9654:	2101      	movs	r1, #1
    9656:	2002      	movs	r0, #2
    9658:	e01b      	b.n	9692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    965a:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    965e:	2800      	cmp	r0, #0
    9660:	d11c      	bne.n	969c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9662:	2200      	movs	r2, #0
    9664:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    9668:	f504 7188 	add.w	r1, r4, #272	; 0x110
    966c:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    9670:	f004 f8ef 	bl	d852 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9674:	2101      	movs	r1, #1
    9676:	2005      	movs	r0, #5
    9678:	e00b      	b.n	9692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    967a:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    967e:	0740      	lsls	r0, r0, #29
    9680:	d505      	bpl.n	968e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    9682:	2011      	movs	r0, #17
    9684:	2203      	movs	r2, #3
    9686:	f804 2fee 	strb.w	r2, [r4, #238]!
    968a:	7061      	strb	r1, [r4, #1]
    968c:	e000      	b.n	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    968e:	200d      	movs	r0, #13
    9690:	2101      	movs	r1, #1
    9692:	f7ff ffb1 	bl	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9696:	68a8      	ldr	r0, [r5, #8]
    9698:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
    969c:	bd70      	pop	{r4, r5, r6, pc}
    969e:	0000      	.short	0x0000
    96a0:	20000130 	.word	0x20000130
    96a4:	b570      	push	{r4, r5, r6, lr}
    96a6:	4a2b      	ldr	r2, [pc, #172]	; (9754 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    96a8:	4603      	mov	r3, r0
    96aa:	8850      	ldrh	r0, [r2, #2]
    96ac:	4318      	orrs	r0, r3
    96ae:	8050      	strh	r0, [r2, #2]
    96b0:	4610      	mov	r0, r2
    96b2:	2b40      	cmp	r3, #64	; 0x40
    96b4:	6880      	ldr	r0, [r0, #8]
    96b6:	d00d      	beq.n	96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>
    96b8:	079e      	lsls	r6, r3, #30
    96ba:	f04f 0500 	mov.w	r5, #0
    96be:	f04f 0401 	mov.w	r4, #1
    96c2:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    96c6:	d50c      	bpl.n	96e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
    96c8:	b14e      	cbz	r6, 96de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    96ca:	f640 5114 	movw	r1, #3348	; 0xd14
    96ce:	2031      	movs	r0, #49	; 0x31
    96d0:	f7fb f83a 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    96d8:	2104      	movs	r1, #4
    96da:	f7fe bb9f 	b.w	7e1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    96de:	60d1      	str	r1, [r2, #12]
    96e0:	e01c      	b.n	971c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe50>
    96e2:	b1c6      	cbz	r6, 9716 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    96e4:	6111      	str	r1, [r2, #16]
    96e6:	78c9      	ldrb	r1, [r1, #3]
    96e8:	2906      	cmp	r1, #6
    96ea:	d002      	beq.n	96f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    96ec:	290b      	cmp	r1, #11
    96ee:	d112      	bne.n	9716 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    96f0:	e009      	b.n	9706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3a>
    96f2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    96f6:	2917      	cmp	r1, #23
    96f8:	d10d      	bne.n	9716 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    96fa:	2100      	movs	r1, #0
    96fc:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
    9700:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    9704:	e007      	b.n	9716 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9706:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    970a:	2911      	cmp	r1, #17
    970c:	d103      	bne.n	9716 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    970e:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    9712:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    9716:	0799      	lsls	r1, r3, #30
    9718:	d516      	bpl.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    971a:	68d1      	ldr	r1, [r2, #12]
    971c:	78c9      	ldrb	r1, [r1, #3]
    971e:	2905      	cmp	r1, #5
    9720:	d002      	beq.n	9728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    9722:	290b      	cmp	r1, #11
    9724:	d110      	bne.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9726:	e009      	b.n	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    9728:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    972c:	2915      	cmp	r1, #21
    972e:	d10b      	bne.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9730:	2100      	movs	r1, #0
    9732:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
    9736:	f800 4c45 	strb.w	r4, [r0, #-69]
    973a:	e005      	b.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    973c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9740:	2910      	cmp	r1, #16
    9742:	d101      	bne.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9744:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    9748:	0698      	lsls	r0, r3, #26
    974a:	d501      	bpl.n	9750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    974c:	2008      	movs	r0, #8
    974e:	7050      	strb	r0, [r2, #1]
    9750:	bd70      	pop	{r4, r5, r6, pc}
    9752:	0000      	.short	0x0000
    9754:	20000130 	.word	0x20000130
    9758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    975c:	4c24      	ldr	r4, [pc, #144]	; (97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf24>)
    975e:	2501      	movs	r5, #1
    9760:	68a2      	ldr	r2, [r4, #8]
    9762:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
    9766:	b108      	cbz	r0, 976c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    9768:	2701      	movs	r7, #1
    976a:	e000      	b.n	976e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    976c:	2700      	movs	r7, #0
    976e:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
    9772:	b109      	cbz	r1, 9778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9774:	2601      	movs	r6, #1
    9776:	e000      	b.n	977a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    9778:	2600      	movs	r6, #0
    977a:	b90f      	cbnz	r7, 9780 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    977c:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    9780:	b90e      	cbnz	r6, 9786 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    9782:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    9786:	f102 0362 	add.w	r3, r2, #98	; 0x62
    978a:	7218      	strb	r0, [r3, #8]
    978c:	7259      	strb	r1, [r3, #9]
    978e:	2001      	movs	r0, #1
    9790:	7298      	strb	r0, [r3, #10]
    9792:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
    9796:	2801      	cmp	r0, #1
    9798:	d001      	beq.n	979e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    979a:	b907      	cbnz	r7, 979e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    979c:	b116      	cbz	r6, 97a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed8>
    979e:	2000      	movs	r0, #0
    97a0:	f000 f828 	bl	97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    97a4:	68a0      	ldr	r0, [r4, #8]
    97a6:	302c      	adds	r0, #44	; 0x2c
    97a8:	f004 fd36 	bl	e218 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    97ac:	4606      	mov	r6, r0
    97ae:	68a0      	ldr	r0, [r4, #8]
    97b0:	f004 fcde 	bl	e170 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    97b4:	b1c0      	cbz	r0, 97e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    97b6:	68a0      	ldr	r0, [r4, #8]
    97b8:	302c      	adds	r0, #44	; 0x2c
    97ba:	f004 fd2d 	bl	e218 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    97be:	68a1      	ldr	r1, [r4, #8]
    97c0:	4607      	mov	r7, r0
    97c2:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    97c6:	8808      	ldrh	r0, [r1, #0]
    97c8:	312c      	adds	r1, #44	; 0x2c
    97ca:	f004 fc92 	bl	e0f2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    97ce:	42be      	cmp	r6, r7
    97d0:	d20a      	bcs.n	97e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    97d2:	f7f8 fba7 	bl	1f24 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    97d6:	4601      	mov	r1, r0
    97d8:	1bb8      	subs	r0, r7, r6
    97da:	2865      	cmp	r0, #101	; 0x65
    97dc:	d200      	bcs.n	97e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
    97de:	2065      	movs	r0, #101	; 0x65
    97e0:	f7f8 fade 	bl	1da0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    97e4:	b100      	cbz	r0, 97e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    97e6:	2500      	movs	r5, #0
    97e8:	4628      	mov	r0, r5
    97ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97ee:	0000      	.short	0x0000
    97f0:	20000130 	.word	0x20000130
    97f4:	b510      	push	{r4, lr}
    97f6:	4c10      	ldr	r4, [pc, #64]	; (9838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>)
    97f8:	68a1      	ldr	r1, [r4, #8]
    97fa:	880a      	ldrh	r2, [r1, #0]
    97fc:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
    9800:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    9804:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9808:	f005 fc1b 	bl	f042 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    980c:	68a1      	ldr	r1, [r4, #8]
    980e:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
    9812:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    9816:	f005 fc14 	bl	f042 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    981a:	68a2      	ldr	r2, [r4, #8]
    981c:	f202 2102 	addw	r1, r2, #514	; 0x202
    9820:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    9824:	2001      	movs	r0, #1
    9826:	7008      	strb	r0, [r1, #0]
    9828:	2000      	movs	r0, #0
    982a:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
    982e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9832:	f7fd b915 	b.w	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9836:	0000      	.short	0x0000
    9838:	20000130 	.word	0x20000130
    983c:	b510      	push	{r4, lr}
    983e:	4c15      	ldr	r4, [pc, #84]	; (9894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc8>)
    9840:	2301      	movs	r3, #1
    9842:	2100      	movs	r1, #0
    9844:	68a0      	ldr	r0, [r4, #8]
    9846:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    984a:	3070      	adds	r0, #112	; 0x70
    984c:	f004 f849 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9850:	b190      	cbz	r0, 9878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>
    9852:	6920      	ldr	r0, [r4, #16]
    9854:	f004 fa8c 	bl	dd70 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9858:	68a1      	ldr	r1, [r4, #8]
    985a:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    985e:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9862:	f005 fc07 	bl	f074 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9866:	b148      	cbz	r0, 987c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
    9868:	68a0      	ldr	r0, [r4, #8]
    986a:	2128      	movs	r1, #40	; 0x28
    986c:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9870:	3076      	adds	r0, #118	; 0x76
    9872:	2101      	movs	r1, #1
    9874:	7781      	strb	r1, [r0, #30]
    9876:	e00b      	b.n	9890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    9878:	2001      	movs	r0, #1
    987a:	bd10      	pop	{r4, pc}
    987c:	68a1      	ldr	r1, [r4, #8]
    987e:	6920      	ldr	r0, [r4, #16]
    9880:	f501 71cb 	add.w	r1, r1, #406	; 0x196
    9884:	f004 fa6f 	bl	dd66 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9888:	68a1      	ldr	r1, [r4, #8]
    988a:	200b      	movs	r0, #11
    988c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9890:	2000      	movs	r0, #0
    9892:	bd10      	pop	{r4, pc}
    9894:	20000130 	.word	0x20000130
    9898:	b570      	push	{r4, r5, r6, lr}
    989a:	4c29      	ldr	r4, [pc, #164]	; (9940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1074>)
    989c:	2301      	movs	r3, #1
    989e:	2100      	movs	r1, #0
    98a0:	68a0      	ldr	r0, [r4, #8]
    98a2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    98a6:	3070      	adds	r0, #112	; 0x70
    98a8:	f004 f81b 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98ac:	b1b8      	cbz	r0, 98de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1012>
    98ae:	2100      	movs	r1, #0
    98b0:	6920      	ldr	r0, [r4, #16]
    98b2:	f004 fa30 	bl	dd16 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    98b6:	b1a0      	cbz	r0, 98e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1016>
    98b8:	6920      	ldr	r0, [r4, #16]
    98ba:	68a1      	ldr	r1, [r4, #8]
    98bc:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    98c0:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    98c4:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    98c8:	f005 fbd4 	bl	f074 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    98cc:	b168      	cbz	r0, 98ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101e>
    98ce:	68a0      	ldr	r0, [r4, #8]
    98d0:	2128      	movs	r1, #40	; 0x28
    98d2:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    98d6:	3076      	adds	r0, #118	; 0x76
    98d8:	2101      	movs	r1, #1
    98da:	7781      	strb	r1, [r0, #30]
    98dc:	e02e      	b.n	993c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1070>
    98de:	2001      	movs	r0, #1
    98e0:	bd70      	pop	{r4, r5, r6, pc}
    98e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    98e6:	f000 b8ad 	b.w	9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    98ea:	6920      	ldr	r0, [r4, #16]
    98ec:	f004 fa43 	bl	dd76 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    98f0:	f003 ffda 	bl	d8a8 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    98f4:	4605      	mov	r5, r0
    98f6:	68a0      	ldr	r0, [r4, #8]
    98f8:	4629      	mov	r1, r5
    98fa:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    98fe:	6920      	ldr	r0, [r4, #16]
    9900:	7900      	ldrb	r0, [r0, #4]
    9902:	f004 f95c 	bl	dbbe <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9906:	68a1      	ldr	r1, [r4, #8]
    9908:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
    990c:	6920      	ldr	r0, [r4, #16]
    990e:	4629      	mov	r1, r5
    9910:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9914:	f004 f94f 	bl	dbb6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9918:	68a1      	ldr	r1, [r4, #8]
    991a:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
    991e:	6920      	ldr	r0, [r4, #16]
    9920:	f004 fa2c 	bl	dd7c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9924:	68a1      	ldr	r1, [r4, #8]
    9926:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    992a:	6920      	ldr	r0, [r4, #16]
    992c:	f004 fa29 	bl	dd82 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9930:	68a1      	ldr	r1, [r4, #8]
    9932:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
    9936:	200d      	movs	r0, #13
    9938:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    993c:	2000      	movs	r0, #0
    993e:	bd70      	pop	{r4, r5, r6, pc}
    9940:	20000130 	.word	0x20000130
    9944:	b538      	push	{r3, r4, r5, lr}
    9946:	4c29      	ldr	r4, [pc, #164]	; (99ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1120>)
    9948:	2301      	movs	r3, #1
    994a:	2100      	movs	r1, #0
    994c:	68a0      	ldr	r0, [r4, #8]
    994e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9952:	3070      	adds	r0, #112	; 0x70
    9954:	f003 ffc5 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9958:	b970      	cbnz	r0, 9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
    995a:	68a0      	ldr	r0, [r4, #8]
    995c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9960:	2a12      	cmp	r2, #18
    9962:	d009      	beq.n	9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
    9964:	2301      	movs	r3, #1
    9966:	2105      	movs	r1, #5
    9968:	3070      	adds	r0, #112	; 0x70
    996a:	f003 ffba 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    996e:	b108      	cbz	r0, 9974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a8>
    9970:	2008      	movs	r0, #8
    9972:	bd38      	pop	{r3, r4, r5, pc}
    9974:	2001      	movs	r0, #1
    9976:	bd38      	pop	{r3, r4, r5, pc}
    9978:	68a0      	ldr	r0, [r4, #8]
    997a:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    997e:	b908      	cbnz	r0, 9984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
    9980:	f7ff f8ca 	bl	8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9984:	68a1      	ldr	r1, [r4, #8]
    9986:	6920      	ldr	r0, [r4, #16]
    9988:	f501 7188 	add.w	r1, r1, #272	; 0x110
    998c:	f004 fa08 	bl	dda0 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9990:	68a1      	ldr	r1, [r4, #8]
    9992:	6920      	ldr	r0, [r4, #16]
    9994:	31e0      	adds	r1, #224	; 0xe0
    9996:	f004 f9fa 	bl	dd8e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    999a:	68a1      	ldr	r1, [r4, #8]
    999c:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
    99a0:	f88d 0000 	strb.w	r0, [sp]
    99a4:	9800      	ldr	r0, [sp, #0]
    99a6:	9000      	str	r0, [sp, #0]
    99a8:	f89d 0000 	ldrb.w	r0, [sp]
    99ac:	b120      	cbz	r0, 99b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    99ae:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    99b2:	2031      	movs	r0, #49	; 0x31
    99b4:	f7fa fec8 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99b8:	8808      	ldrh	r0, [r1, #0]
    99ba:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
    99be:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    99c2:	6920      	ldr	r0, [r4, #16]
    99c4:	f004 f9e7 	bl	dd96 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    99c8:	68a1      	ldr	r1, [r4, #8]
    99ca:	6920      	ldr	r0, [r4, #16]
    99cc:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
    99d0:	f004 f9da 	bl	dd88 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    99d4:	68a0      	ldr	r0, [r4, #8]
    99d6:	4601      	mov	r1, r0
    99d8:	2201      	movs	r2, #1
    99da:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
    99de:	2014      	movs	r0, #20
    99e0:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    99e4:	f7fd f83c 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    99e8:	2000      	movs	r0, #0
    99ea:	bd38      	pop	{r3, r4, r5, pc}
    99ec:	20000130 	.word	0x20000130
    99f0:	b51c      	push	{r2, r3, r4, lr}
    99f2:	4c13      	ldr	r4, [pc, #76]	; (9a40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>)
    99f4:	68a0      	ldr	r0, [r4, #8]
    99f6:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    99fa:	07c0      	lsls	r0, r0, #31
    99fc:	d001      	beq.n	9a02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1136>
    99fe:	2001      	movs	r0, #1
    9a00:	bd1c      	pop	{r2, r3, r4, pc}
    9a02:	4669      	mov	r1, sp
    9a04:	6920      	ldr	r0, [r4, #16]
    9a06:	f004 f9d1 	bl	ddac <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9a0a:	f001 f9d5 	bl	adb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9a0e:	f644 112f 	movw	r1, #18735	; 0x492f
    9a12:	4008      	ands	r0, r1
    9a14:	f89d 2000 	ldrb.w	r2, [sp]
    9a18:	68a1      	ldr	r1, [r4, #8]
    9a1a:	4002      	ands	r2, r0
    9a1c:	f801 2fbc 	strb.w	r2, [r1, #188]!
    9a20:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9a24:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9a28:	7048      	strb	r0, [r1, #1]
    9a2a:	f7ff f875 	bl	8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9a2e:	68a0      	ldr	r0, [r4, #8]
    9a30:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9a34:	f041 0101 	orr.w	r1, r1, #1
    9a38:	7001      	strb	r1, [r0, #0]
    9a3a:	2000      	movs	r0, #0
    9a3c:	bd1c      	pop	{r2, r3, r4, pc}
    9a3e:	0000      	.short	0x0000
    9a40:	20000130 	.word	0x20000130
    9a44:	4a0a      	ldr	r2, [pc, #40]	; (9a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    9a46:	b510      	push	{r4, lr}
    9a48:	6890      	ldr	r0, [r2, #8]
    9a4a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9a4e:	070b      	lsls	r3, r1, #28
    9a50:	d501      	bpl.n	9a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118a>
    9a52:	2001      	movs	r0, #1
    9a54:	bd10      	pop	{r4, pc}
    9a56:	f041 0108 	orr.w	r1, r1, #8
    9a5a:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9a5e:	6911      	ldr	r1, [r2, #16]
    9a60:	78c9      	ldrb	r1, [r1, #3]
    9a62:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
    9a66:	f7ff f857 	bl	8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9a6a:	2000      	movs	r0, #0
    9a6c:	bd10      	pop	{r4, pc}
    9a6e:	0000      	.short	0x0000
    9a70:	20000130 	.word	0x20000130
    9a74:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9a78:	4c34      	ldr	r4, [pc, #208]	; (9b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1280>)
    9a7a:	68a0      	ldr	r0, [r4, #8]
    9a7c:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9a80:	f010 0f30 	tst.w	r0, #48	; 0x30
    9a84:	d002      	beq.n	9a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    9a86:	2001      	movs	r0, #1
    9a88:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9a8c:	6920      	ldr	r0, [r4, #16]
    9a8e:	f004 f9a8 	bl	dde2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9a92:	b318      	cbz	r0, 9adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
    9a94:	6920      	ldr	r0, [r4, #16]
    9a96:	f004 f996 	bl	ddc6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9a9a:	4607      	mov	r7, r0
    9a9c:	6920      	ldr	r0, [r4, #16]
    9a9e:	f004 f996 	bl	ddce <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9aa2:	4606      	mov	r6, r0
    9aa4:	6920      	ldr	r0, [r4, #16]
    9aa6:	f004 f98c 	bl	ddc2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9aaa:	4605      	mov	r5, r0
    9aac:	6920      	ldr	r0, [r4, #16]
    9aae:	f004 f98c 	bl	ddca <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9ab2:	4601      	mov	r1, r0
    9ab4:	9700      	str	r7, [sp, #0]
    9ab6:	68a0      	ldr	r0, [r4, #8]
    9ab8:	4633      	mov	r3, r6
    9aba:	462a      	mov	r2, r5
    9abc:	302c      	adds	r0, #44	; 0x2c
    9abe:	f004 fbe5 	bl	e28c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9ac2:	78a0      	ldrb	r0, [r4, #2]
    9ac4:	0780      	lsls	r0, r0, #30
    9ac6:	d503      	bpl.n	9ad0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>
    9ac8:	68e0      	ldr	r0, [r4, #12]
    9aca:	78c0      	ldrb	r0, [r0, #3]
    9acc:	2814      	cmp	r0, #20
    9ace:	d009      	beq.n	9ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    9ad0:	68a0      	ldr	r0, [r4, #8]
    9ad2:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9ad6:	281c      	cmp	r0, #28
    9ad8:	d004      	beq.n	9ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    9ada:	e007      	b.n	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>
    9adc:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9ae0:	f7ff bfb0 	b.w	9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9ae4:	68a1      	ldr	r1, [r4, #8]
    9ae6:	2001      	movs	r0, #1
    9ae8:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9aec:	68a1      	ldr	r1, [r4, #8]
    9aee:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9af2:	2801      	cmp	r0, #1
    9af4:	d011      	beq.n	9b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
    9af6:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
    9afa:	f88d 0004 	strb.w	r0, [sp, #4]
    9afe:	9801      	ldr	r0, [sp, #4]
    9b00:	9001      	str	r0, [sp, #4]
    9b02:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9b06:	b940      	cbnz	r0, 9b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
    9b08:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
    9b0c:	f88d 0000 	strb.w	r0, [sp]
    9b10:	9800      	ldr	r0, [sp, #0]
    9b12:	9000      	str	r0, [sp, #0]
    9b14:	f89d 0000 	ldrb.w	r0, [sp]
    9b18:	b128      	cbz	r0, 9b26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125a>
    9b1a:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    9b1e:	f040 0010 	orr.w	r0, r0, #16
    9b22:	7008      	strb	r0, [r1, #0]
    9b24:	e00d      	b.n	9b42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
    9b26:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    9b2a:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
    9b2e:	f040 0020 	orr.w	r0, r0, #32
    9b32:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    9b36:	f831 0b2c 	ldrh.w	r0, [r1], #44
    9b3a:	f004 fbae 	bl	e29a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9b3e:	f7fc ff8f 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9b42:	f7fe ffe9 	bl	8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9b46:	2000      	movs	r0, #0
    9b48:	e79e      	b.n	9a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    9b4a:	0000      	.short	0x0000
    9b4c:	20000130 	.word	0x20000130
    9b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b52:	4c1a      	ldr	r4, [pc, #104]	; (9bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>)
    9b54:	2301      	movs	r3, #1
    9b56:	210a      	movs	r1, #10
    9b58:	68a0      	ldr	r0, [r4, #8]
    9b5a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9b5e:	3070      	adds	r0, #112	; 0x70
    9b60:	f003 febf 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b64:	b338      	cbz	r0, 9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ea>
    9b66:	6920      	ldr	r0, [r4, #16]
    9b68:	f004 f93b 	bl	dde2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9b6c:	b1c8      	cbz	r0, 9ba2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d6>
    9b6e:	6920      	ldr	r0, [r4, #16]
    9b70:	f004 f929 	bl	ddc6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9b74:	4607      	mov	r7, r0
    9b76:	6920      	ldr	r0, [r4, #16]
    9b78:	f004 f929 	bl	ddce <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9b7c:	4606      	mov	r6, r0
    9b7e:	6920      	ldr	r0, [r4, #16]
    9b80:	f004 f91f 	bl	ddc2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9b84:	4605      	mov	r5, r0
    9b86:	6920      	ldr	r0, [r4, #16]
    9b88:	f004 f91f 	bl	ddca <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9b8c:	4601      	mov	r1, r0
    9b8e:	9700      	str	r7, [sp, #0]
    9b90:	68a0      	ldr	r0, [r4, #8]
    9b92:	4633      	mov	r3, r6
    9b94:	462a      	mov	r2, r5
    9b96:	302c      	adds	r0, #44	; 0x2c
    9b98:	f004 fb78 	bl	e28c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9b9c:	68a0      	ldr	r0, [r4, #8]
    9b9e:	f004 fae7 	bl	e170 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9ba2:	68a1      	ldr	r1, [r4, #8]
    9ba4:	2000      	movs	r0, #0
    9ba6:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    9baa:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9bae:	f7ff f977 	bl	8ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9bb2:	2000      	movs	r0, #0
    9bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bb6:	2001      	movs	r0, #1
    9bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bba:	0000      	.short	0x0000
    9bbc:	20000130 	.word	0x20000130
    9bc0:	b510      	push	{r4, lr}
    9bc2:	4c09      	ldr	r4, [pc, #36]	; (9be8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x131c>)
    9bc4:	68a0      	ldr	r0, [r4, #8]
    9bc6:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9bca:	0740      	lsls	r0, r0, #29
    9bcc:	d501      	bpl.n	9bd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1306>
    9bce:	2001      	movs	r0, #1
    9bd0:	bd10      	pop	{r4, pc}
    9bd2:	f7fe ffa1 	bl	8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9bd6:	68a0      	ldr	r0, [r4, #8]
    9bd8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9bdc:	f041 0104 	orr.w	r1, r1, #4
    9be0:	7001      	strb	r1, [r0, #0]
    9be2:	2000      	movs	r0, #0
    9be4:	bd10      	pop	{r4, pc}
    9be6:	0000      	.short	0x0000
    9be8:	20000130 	.word	0x20000130
    9bec:	b510      	push	{r4, lr}
    9bee:	4c09      	ldr	r4, [pc, #36]	; (9c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>)
    9bf0:	2301      	movs	r3, #1
    9bf2:	2109      	movs	r1, #9
    9bf4:	68a0      	ldr	r0, [r4, #8]
    9bf6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9bfa:	3070      	adds	r0, #112	; 0x70
    9bfc:	f003 fe71 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c00:	2800      	cmp	r0, #0
    9c02:	d006      	beq.n	9c12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    9c04:	68a1      	ldr	r1, [r4, #8]
    9c06:	2000      	movs	r0, #0
    9c08:	f801 0fa2 	strb.w	r0, [r1, #162]!
    9c0c:	7308      	strb	r0, [r1, #12]
    9c0e:	f801 0c25 	strb.w	r0, [r1, #-37]
    9c12:	bd10      	pop	{r4, pc}
    9c14:	20000130 	.word	0x20000130
    9c18:	b510      	push	{r4, lr}
    9c1a:	4c0f      	ldr	r4, [pc, #60]	; (9c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>)
    9c1c:	2301      	movs	r3, #1
    9c1e:	2100      	movs	r1, #0
    9c20:	68a0      	ldr	r0, [r4, #8]
    9c22:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9c26:	3070      	adds	r0, #112	; 0x70
    9c28:	f003 fe5b 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c2c:	b138      	cbz	r0, 9c3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
    9c2e:	f7fe ff73 	bl	8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9c32:	68a1      	ldr	r1, [r4, #8]
    9c34:	2010      	movs	r0, #16
    9c36:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9c3a:	2000      	movs	r0, #0
    9c3c:	bd10      	pop	{r4, pc}
    9c3e:	68a0      	ldr	r0, [r4, #8]
    9c40:	2301      	movs	r3, #1
    9c42:	2105      	movs	r1, #5
    9c44:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9c48:	3070      	adds	r0, #112	; 0x70
    9c4a:	f003 fe4a 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c4e:	b108      	cbz	r0, 9c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    9c50:	2008      	movs	r0, #8
    9c52:	bd10      	pop	{r4, pc}
    9c54:	2001      	movs	r0, #1
    9c56:	bd10      	pop	{r4, pc}
    9c58:	20000130 	.word	0x20000130
    9c5c:	4806      	ldr	r0, [pc, #24]	; (9c78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ac>)
    9c5e:	6880      	ldr	r0, [r0, #8]
    9c60:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9c64:	2911      	cmp	r1, #17
    9c66:	d001      	beq.n	9c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a0>
    9c68:	2002      	movs	r0, #2
    9c6a:	4770      	bx	lr
    9c6c:	2112      	movs	r1, #18
    9c6e:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9c72:	2000      	movs	r0, #0
    9c74:	4770      	bx	lr
    9c76:	0000      	.short	0x0000
    9c78:	20000130 	.word	0x20000130
    9c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c7e:	4c34      	ldr	r4, [pc, #208]	; (9d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    9c80:	2301      	movs	r3, #1
    9c82:	210b      	movs	r1, #11
    9c84:	68a0      	ldr	r0, [r4, #8]
    9c86:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9c8a:	3070      	adds	r0, #112	; 0x70
    9c8c:	f003 fe29 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c90:	bb78      	cbnz	r0, 9cf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1426>
    9c92:	68a0      	ldr	r0, [r4, #8]
    9c94:	2301      	movs	r3, #1
    9c96:	2100      	movs	r1, #0
    9c98:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9c9c:	3070      	adds	r0, #112	; 0x70
    9c9e:	f003 fe20 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ca2:	b320      	cbz	r0, 9cee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1422>
    9ca4:	68a0      	ldr	r0, [r4, #8]
    9ca6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9caa:	2824      	cmp	r0, #36	; 0x24
    9cac:	d022      	beq.n	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    9cae:	6920      	ldr	r0, [r4, #16]
    9cb0:	f004 f8b3 	bl	de1a <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9cb4:	b300      	cbz	r0, 9cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
    9cb6:	68a0      	ldr	r0, [r4, #8]
    9cb8:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9cbc:	f041 0104 	orr.w	r1, r1, #4
    9cc0:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    9cc4:	6921      	ldr	r1, [r4, #16]
    9cc6:	794a      	ldrb	r2, [r1, #5]
    9cc8:	f002 0207 	and.w	r2, r2, #7
    9ccc:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    9cd0:	7909      	ldrb	r1, [r1, #4]
    9cd2:	f001 0107 	and.w	r1, r1, #7
    9cd6:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    9cda:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
    9cde:	f88d 3000 	strb.w	r3, [sp]
    9ce2:	9b00      	ldr	r3, [sp, #0]
    9ce4:	9300      	str	r3, [sp, #0]
    9ce6:	f89d 3000 	ldrb.w	r3, [sp]
    9cea:	bb43      	cbnz	r3, 9d3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    9cec:	e008      	b.n	9d00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    9cee:	2001      	movs	r0, #1
    9cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9cf2:	e7ff      	b.n	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    9cf4:	2020      	movs	r0, #32
    9cf6:	e7fb      	b.n	9cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    9cf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9cfc:	f7ff bea2 	b.w	9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9d00:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    9d04:	2b01      	cmp	r3, #1
    9d06:	d01a      	beq.n	9d3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    9d08:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    9d0c:	2501      	movs	r5, #1
    9d0e:	785e      	ldrb	r6, [r3, #1]
    9d10:	428e      	cmp	r6, r1
    9d12:	d106      	bne.n	9d22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
    9d14:	7819      	ldrb	r1, [r3, #0]
    9d16:	4291      	cmp	r1, r2
    9d18:	d103      	bne.n	9d22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
    9d1a:	2102      	movs	r1, #2
    9d1c:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
    9d20:	e00d      	b.n	9d3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    9d22:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
    9d26:	8802      	ldrh	r2, [r0, #0]
    9d28:	f821 2902 	strh.w	r2, [r1], #-2
    9d2c:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9d30:	710a      	strb	r2, [r1, #4]
    9d32:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    9d36:	7148      	strb	r0, [r1, #5]
    9d38:	700d      	strb	r5, [r1, #0]
    9d3a:	f7fc fe91 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d3e:	68a1      	ldr	r1, [r4, #8]
    9d40:	2021      	movs	r0, #33	; 0x21
    9d42:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9d46:	f7fe fee7 	bl	8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9d4a:	2000      	movs	r0, #0
    9d4c:	e7d0      	b.n	9cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    9d4e:	0000      	.short	0x0000
    9d50:	20000130 	.word	0x20000130
    9d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d58:	4c4e      	ldr	r4, [pc, #312]	; (9e94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    9d5a:	68a0      	ldr	r0, [r4, #8]
    9d5c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9d60:	2920      	cmp	r1, #32
    9d62:	d009      	beq.n	9d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ac>
    9d64:	f05f 0700 	movs.w	r7, #0
    9d68:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9d6c:	2922      	cmp	r1, #34	; 0x22
    9d6e:	d005      	beq.n	9d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b0>
    9d70:	b387      	cbz	r7, 9dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1508>
    9d72:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    9d76:	e003      	b.n	9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    9d78:	2701      	movs	r7, #1
    9d7a:	e7f5      	b.n	9d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    9d7c:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    9d80:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    9d84:	f041 0104 	orr.w	r1, r1, #4
    9d88:	7001      	strb	r1, [r0, #0]
    9d8a:	6920      	ldr	r0, [r4, #16]
    9d8c:	f7fc fd54 	bl	6838 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9d90:	f04f 0801 	mov.w	r8, #1
    9d94:	2600      	movs	r6, #0
    9d96:	b308      	cbz	r0, 9ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    9d98:	4639      	mov	r1, r7
    9d9a:	6920      	ldr	r0, [r4, #16]
    9d9c:	f7fe ff86 	bl	8cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e0>
    9da0:	b1e0      	cbz	r0, 9ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    9da2:	466a      	mov	r2, sp
    9da4:	6921      	ldr	r1, [r4, #16]
    9da6:	68a0      	ldr	r0, [r4, #8]
    9da8:	f003 febf 	bl	db2a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9dac:	b388      	cbz	r0, 9e12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
    9dae:	6920      	ldr	r0, [r4, #16]
    9db0:	f004 f80f 	bl	ddd2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    9db4:	68a1      	ldr	r1, [r4, #8]
    9db6:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    9dba:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9dbe:	f005 f959 	bl	f074 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9dc2:	b338      	cbz	r0, 9e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1548>
    9dc4:	68a0      	ldr	r0, [r4, #8]
    9dc6:	2128      	movs	r1, #40	; 0x28
    9dc8:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9dcc:	3076      	adds	r0, #118	; 0x76
    9dce:	f880 801e 	strb.w	r8, [r0, #30]
    9dd2:	e053      	b.n	9e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    9dd4:	e7ff      	b.n	9dd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    9dd6:	2002      	movs	r0, #2
    9dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9ddc:	68a0      	ldr	r0, [r4, #8]
    9dde:	f04f 0900 	mov.w	r9, #0
    9de2:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9de6:	2901      	cmp	r1, #1
    9de8:	d015      	beq.n	9e16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    9dea:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    9dee:	b1f7      	cbz	r7, 9e2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    9df0:	6920      	ldr	r0, [r4, #16]
    9df2:	68a1      	ldr	r1, [r4, #8]
    9df4:	78c0      	ldrb	r0, [r0, #3]
    9df6:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
    9dfa:	fa08 f200 	lsl.w	r2, r8, r0
    9dfe:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9e02:	b160      	cbz	r0, 9e1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1552>
    9e04:	200a      	movs	r0, #10
    9e06:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9e0a:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
    9e0e:	b9a0      	cbnz	r0, 9e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
    9e10:	e008      	b.n	9e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
    9e12:	e014      	b.n	9e3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    9e14:	e027      	b.n	9e66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x159a>
    9e16:	201e      	movs	r0, #30
    9e18:	f7ff fcec 	bl	97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    9e1c:	e7e7      	b.n	9dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1522>
    9e1e:	f240 31cb 	movw	r1, #971	; 0x3cb
    9e22:	e001      	b.n	9e28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155c>
    9e24:	f240 31d3 	movw	r1, #979	; 0x3d3
    9e28:	2031      	movs	r0, #49	; 0x31
    9e2a:	f7fa fc8d 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e2e:	702e      	strb	r6, [r5, #0]
    9e30:	f7fe fe7e 	bl	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    9e34:	f7ff fe06 	bl	9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9e38:	4681      	mov	r9, r0
    9e3a:	4648      	mov	r0, r9
    9e3c:	e7cc      	b.n	9dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
    9e3e:	68a0      	ldr	r0, [r4, #8]
    9e40:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9e44:	2901      	cmp	r1, #1
    9e46:	d009      	beq.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1590>
    9e48:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    9e4c:	68a0      	ldr	r0, [r4, #8]
    9e4e:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    9e52:	428d      	cmp	r5, r1
    9e54:	d112      	bne.n	9e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    9e56:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    9e5a:	e00f      	b.n	9e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    9e5c:	2000      	movs	r0, #0
    9e5e:	f7ff fcc9 	bl	97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    9e62:	702e      	strb	r6, [r5, #0]
    9e64:	e7f2      	b.n	9e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1580>
    9e66:	68a0      	ldr	r0, [r4, #8]
    9e68:	f89d 1000 	ldrb.w	r1, [sp]
    9e6c:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    9e70:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9e74:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
    9e78:	2024      	movs	r0, #36	; 0x24
    9e7a:	7028      	strb	r0, [r5, #0]
    9e7c:	68a0      	ldr	r0, [r4, #8]
    9e7e:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    9e82:	428d      	cmp	r5, r1
    9e84:	d102      	bne.n	9e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    9e86:	f7fe fe53 	bl	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    9e8a:	e001      	b.n	9e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    9e8c:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
    9e90:	2000      	movs	r0, #0
    9e92:	e7a1      	b.n	9dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
    9e94:	20000130 	.word	0x20000130
    9e98:	b510      	push	{r4, lr}
    9e9a:	4c0a      	ldr	r4, [pc, #40]	; (9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
    9e9c:	68a0      	ldr	r0, [r4, #8]
    9e9e:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    9ea2:	f041 0104 	orr.w	r1, r1, #4
    9ea6:	7001      	strb	r1, [r0, #0]
    9ea8:	6920      	ldr	r0, [r4, #16]
    9eaa:	f003 ffc0 	bl	de2e <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9eae:	2816      	cmp	r0, #22
    9eb0:	d001      	beq.n	9eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
    9eb2:	2000      	movs	r0, #0
    9eb4:	bd10      	pop	{r4, pc}
    9eb6:	6920      	ldr	r0, [r4, #16]
    9eb8:	f003 ffbb 	bl	de32 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ec0:	f7fe be08 	b.w	8ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
    9ec4:	20000130 	.word	0x20000130
    9ec8:	4802      	ldr	r0, [pc, #8]	; (9ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1608>)
    9eca:	6900      	ldr	r0, [r0, #16]
    9ecc:	7900      	ldrb	r0, [r0, #4]
    9ece:	f7fe be01 	b.w	8ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
    9ed2:	0000      	.short	0x0000
    9ed4:	20000130 	.word	0x20000130
    9ed8:	b510      	push	{r4, lr}
    9eda:	4c08      	ldr	r4, [pc, #32]	; (9efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>)
    9edc:	68a0      	ldr	r0, [r4, #8]
    9ede:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    9ee2:	2817      	cmp	r0, #23
    9ee4:	d001      	beq.n	9eea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161e>
    9ee6:	2002      	movs	r0, #2
    9ee8:	bd10      	pop	{r4, pc}
    9eea:	f7fe fe21 	bl	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    9eee:	68a1      	ldr	r1, [r4, #8]
    9ef0:	201b      	movs	r0, #27
    9ef2:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9ef6:	2000      	movs	r0, #0
    9ef8:	bd10      	pop	{r4, pc}
    9efa:	0000      	.short	0x0000
    9efc:	20000130 	.word	0x20000130
    9f00:	b510      	push	{r4, lr}
    9f02:	4c0b      	ldr	r4, [pc, #44]	; (9f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    9f04:	2301      	movs	r3, #1
    9f06:	4619      	mov	r1, r3
    9f08:	68a0      	ldr	r0, [r4, #8]
    9f0a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9f0e:	3070      	adds	r0, #112	; 0x70
    9f10:	f003 fce7 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f14:	b108      	cbz	r0, 9f1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164e>
    9f16:	2000      	movs	r0, #0
    9f18:	bd10      	pop	{r4, pc}
    9f1a:	6920      	ldr	r0, [r4, #16]
    9f1c:	f003 ff5d 	bl	ddda <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9f20:	68a1      	ldr	r1, [r4, #8]
    9f22:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    9f26:	2007      	movs	r0, #7
    9f28:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9f2c:	e7f3      	b.n	9f16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164a>
    9f2e:	0000      	.short	0x0000
    9f30:	20000130 	.word	0x20000130
    9f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f38:	4d37      	ldr	r5, [pc, #220]	; (a018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
    9f3a:	2600      	movs	r6, #0
    9f3c:	4628      	mov	r0, r5
    9f3e:	68a9      	ldr	r1, [r5, #8]
    9f40:	6900      	ldr	r0, [r0, #16]
    9f42:	2701      	movs	r7, #1
    9f44:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    9f48:	7900      	ldrb	r0, [r0, #4]
    9f4a:	2b0e      	cmp	r3, #14
    9f4c:	d101      	bne.n	9f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1686>
    9f4e:	2812      	cmp	r0, #18
    9f50:	d006      	beq.n	9f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
    9f52:	4a31      	ldr	r2, [pc, #196]	; (a018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
    9f54:	2400      	movs	r4, #0
    9f56:	6892      	ldr	r2, [r2, #8]
    9f58:	32bc      	adds	r2, #188	; 0xbc
    9f5a:	2b1c      	cmp	r3, #28
    9f5c:	d004      	beq.n	9f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>
    9f5e:	e005      	b.n	9f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a0>
    9f60:	f7ff fe44 	bl	9bec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1320>
    9f64:	4606      	mov	r6, r0
    9f66:	e053      	b.n	a010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    9f68:	2814      	cmp	r0, #20
    9f6a:	d002      	beq.n	9f72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a6>
    9f6c:	2b04      	cmp	r3, #4
    9f6e:	d00b      	beq.n	9f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    9f70:	e00c      	b.n	9f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c0>
    9f72:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    9f76:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    9f7a:	2105      	movs	r1, #5
    9f7c:	4610      	mov	r0, r2
    9f7e:	f005 f80a 	bl	ef96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    9f82:	f7fe ff8d 	bl	8ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9f86:	e043      	b.n	a010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    9f88:	280e      	cmp	r0, #14
    9f8a:	d002      	beq.n	9f92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c6>
    9f8c:	2b20      	cmp	r3, #32
    9f8e:	d00f      	beq.n	9fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    9f90:	e010      	b.n	9fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e8>
    9f92:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    9f96:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    9f9a:	8808      	ldrh	r0, [r1, #0]
    9f9c:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
    9fa0:	201a      	movs	r0, #26
    9fa2:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
    9fa6:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
    9faa:	f7fc fd59 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9fae:	e02f      	b.n	a010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    9fb0:	2816      	cmp	r0, #22
    9fb2:	d006      	beq.n	9fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
    9fb4:	2b26      	cmp	r3, #38	; 0x26
    9fb6:	d101      	bne.n	9fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
    9fb8:	2816      	cmp	r0, #22
    9fba:	d002      	beq.n	9fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
    9fbc:	2817      	cmp	r0, #23
    9fbe:	d014      	beq.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171e>
    9fc0:	e026      	b.n	a010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    9fc2:	f801 4f7d 	strb.w	r4, [r1, #125]!
    9fc6:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    9fca:	7848      	ldrb	r0, [r1, #1]
    9fcc:	2821      	cmp	r0, #33	; 0x21
    9fce:	d01f      	beq.n	a010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    9fd0:	2108      	movs	r1, #8
    9fd2:	4610      	mov	r0, r2
    9fd4:	f004 ffdf 	bl	ef96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    9fd8:	68a8      	ldr	r0, [r5, #8]
    9fda:	210b      	movs	r1, #11
    9fdc:	30bc      	adds	r0, #188	; 0xbc
    9fde:	f004 ffda 	bl	ef96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    9fe2:	201a      	movs	r0, #26
    9fe4:	f7ff fc06 	bl	97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    9fe8:	e012      	b.n	a010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    9fea:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    9fee:	2822      	cmp	r0, #34	; 0x22
    9ff0:	d10e      	bne.n	a010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    9ff2:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
    9ff6:	f7fe fd9b 	bl	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    9ffa:	68a8      	ldr	r0, [r5, #8]
    9ffc:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
    a000:	2801      	cmp	r0, #1
    a002:	d102      	bne.n	a00a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173e>
    a004:	2000      	movs	r0, #0
    a006:	f7ff fbf5 	bl	97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a00a:	68a8      	ldr	r0, [r5, #8]
    a00c:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
    a010:	4630      	mov	r0, r6
    a012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a016:	0000      	.short	0x0000
    a018:	20000130 	.word	0x20000130
    a01c:	b570      	push	{r4, r5, r6, lr}
    a01e:	4c2c      	ldr	r4, [pc, #176]	; (a0d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
    a020:	68a0      	ldr	r0, [r4, #8]
    a022:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a026:	0789      	lsls	r1, r1, #30
    a028:	d507      	bpl.n	a03a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176e>
    a02a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a02e:	2301      	movs	r3, #1
    a030:	2108      	movs	r1, #8
    a032:	3070      	adds	r0, #112	; 0x70
    a034:	f003 fc55 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a038:	b1e8      	cbz	r0, a076 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17aa>
    a03a:	68a0      	ldr	r0, [r4, #8]
    a03c:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
    a040:	0780      	lsls	r0, r0, #30
    a042:	d412      	bmi.n	a06a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x179e>
    a044:	6920      	ldr	r0, [r4, #16]
    a046:	f003 feca 	bl	ddde <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a04a:	68a1      	ldr	r1, [r4, #8]
    a04c:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
    a050:	6920      	ldr	r0, [r4, #16]
    a052:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a056:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    a05a:	8840      	ldrh	r0, [r0, #2]
    a05c:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
    a060:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
    a064:	f040 0002 	orr.w	r0, r0, #2
    a068:	7008      	strb	r0, [r1, #0]
    a06a:	68a0      	ldr	r0, [r4, #8]
    a06c:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a070:	07c9      	lsls	r1, r1, #31
    a072:	d002      	beq.n	a07a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a074:	e010      	b.n	a098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17cc>
    a076:	2001      	movs	r0, #1
    a078:	bd70      	pop	{r4, r5, r6, pc}
    a07a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a07e:	078a      	lsls	r2, r1, #30
    a080:	d504      	bpl.n	a08c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
    a082:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    a086:	2031      	movs	r0, #49	; 0x31
    a088:	f7fa fb5e 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a08c:	f041 0102 	orr.w	r1, r1, #2
    a090:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a094:	f7fe fd40 	bl	8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a098:	68a0      	ldr	r0, [r4, #8]
    a09a:	2500      	movs	r5, #0
    a09c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a0a0:	2906      	cmp	r1, #6
    a0a2:	d105      	bne.n	a0b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17e4>
    a0a4:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    a0a8:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    a0ac:	f7fc fcd8 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a0b0:	68a0      	ldr	r0, [r4, #8]
    a0b2:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a0b6:	b149      	cbz	r1, a0cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
    a0b8:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a0bc:	f7fc fcd0 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a0c0:	68a0      	ldr	r0, [r4, #8]
    a0c2:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a0c6:	b909      	cbnz	r1, a0cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
    a0c8:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    a0cc:	2000      	movs	r0, #0
    a0ce:	bd70      	pop	{r4, r5, r6, pc}
    a0d0:	20000130 	.word	0x20000130
    a0d4:	b510      	push	{r4, lr}
    a0d6:	4c1f      	ldr	r4, [pc, #124]	; (a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>)
    a0d8:	68a3      	ldr	r3, [r4, #8]
    a0da:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    a0de:	2808      	cmp	r0, #8
    a0e0:	d20e      	bcs.n	a100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    a0e2:	f100 0208 	add.w	r2, r0, #8
    a0e6:	f1c0 0008 	rsb	r0, r0, #8
    a0ea:	b2c1      	uxtb	r1, r0
    a0ec:	1898      	adds	r0, r3, r2
    a0ee:	f500 7088 	add.w	r0, r0, #272	; 0x110
    a0f2:	f7fa fbb5 	bl	4860 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a0f6:	68a1      	ldr	r1, [r4, #8]
    a0f8:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    a0fc:	4410      	add	r0, r2
    a0fe:	7008      	strb	r0, [r1, #0]
    a100:	68a3      	ldr	r3, [r4, #8]
    a102:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    a106:	3808      	subs	r0, #8
    a108:	2804      	cmp	r0, #4
    a10a:	d20c      	bcs.n	a126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x185a>
    a10c:	1d02      	adds	r2, r0, #4
    a10e:	f1c0 0004 	rsb	r0, r0, #4
    a112:	b2c1      	uxtb	r1, r0
    a114:	1898      	adds	r0, r3, r2
    a116:	30e0      	adds	r0, #224	; 0xe0
    a118:	f7fa fba2 	bl	4860 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a11c:	68a1      	ldr	r1, [r4, #8]
    a11e:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    a122:	4410      	add	r0, r2
    a124:	7008      	strb	r0, [r1, #0]
    a126:	68a0      	ldr	r0, [r4, #8]
    a128:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    a12c:	290c      	cmp	r1, #12
    a12e:	d30f      	bcc.n	a150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1884>
    a130:	d005      	beq.n	a13e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1872>
    a132:	f240 71bf 	movw	r1, #1983	; 0x7bf
    a136:	f04f 0031 	mov.w	r0, #49	; 0x31
    a13a:	f7fa fb05 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a13e:	2100      	movs	r1, #0
    a140:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    a144:	2101      	movs	r1, #1
    a146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a14a:	2004      	movs	r0, #4
    a14c:	f7ff ba54 	b.w	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    a150:	bd10      	pop	{r4, pc}
    a152:	0000      	.short	0x0000
    a154:	20000130 	.word	0x20000130
    a158:	4804      	ldr	r0, [pc, #16]	; (a16c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a0>)
    a15a:	2127      	movs	r1, #39	; 0x27
    a15c:	6880      	ldr	r0, [r0, #8]
    a15e:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a162:	2100      	movs	r1, #0
    a164:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
    a168:	4770      	bx	lr
    a16a:	0000      	.short	0x0000
    a16c:	20000130 	.word	0x20000130
    a170:	4809      	ldr	r0, [pc, #36]	; (a198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18cc>)
    a172:	b510      	push	{r4, lr}
    a174:	6880      	ldr	r0, [r0, #8]
    a176:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a17a:	2914      	cmp	r1, #20
    a17c:	d004      	beq.n	a188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    a17e:	f240 619a 	movw	r1, #1690	; 0x69a
    a182:	2031      	movs	r0, #49	; 0x31
    a184:	f7fa fae0 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a188:	2101      	movs	r1, #1
    a18a:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    a18e:	2115      	movs	r1, #21
    a190:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a194:	bd10      	pop	{r4, pc}
    a196:	0000      	.short	0x0000
    a198:	20000130 	.word	0x20000130
    a19c:	b510      	push	{r4, lr}
    a19e:	4c0a      	ldr	r4, [pc, #40]	; (a1c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fc>)
    a1a0:	68a0      	ldr	r0, [r4, #8]
    a1a2:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a1a6:	07c0      	lsls	r0, r0, #31
    a1a8:	d008      	beq.n	a1bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    a1aa:	f7fe fcc1 	bl	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a1ae:	68a0      	ldr	r0, [r4, #8]
    a1b0:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a1b4:	f021 0101 	bic.w	r1, r1, #1
    a1b8:	7001      	strb	r1, [r0, #0]
    a1ba:	bd10      	pop	{r4, pc}
    a1bc:	f240 6183 	movw	r1, #1667	; 0x683
    a1c0:	2031      	movs	r0, #49	; 0x31
    a1c2:	f7fa fac1 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1c6:	0000      	.short	0x0000
    a1c8:	20000130 	.word	0x20000130
    a1cc:	b510      	push	{r4, lr}
    a1ce:	4c0a      	ldr	r4, [pc, #40]	; (a1f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192c>)
    a1d0:	2301      	movs	r3, #1
    a1d2:	2100      	movs	r1, #0
    a1d4:	68a0      	ldr	r0, [r4, #8]
    a1d6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a1da:	3070      	adds	r0, #112	; 0x70
    a1dc:	f003 fb81 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1e0:	b120      	cbz	r0, a1ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    a1e2:	68a1      	ldr	r1, [r4, #8]
    a1e4:	201c      	movs	r0, #28
    a1e6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a1ea:	bd10      	pop	{r4, pc}
    a1ec:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    a1f0:	2031      	movs	r0, #49	; 0x31
    a1f2:	f7fa faa9 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1f6:	0000      	.short	0x0000
    a1f8:	20000130 	.word	0x20000130
    a1fc:	480a      	ldr	r0, [pc, #40]	; (a228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195c>)
    a1fe:	b510      	push	{r4, lr}
    a200:	6880      	ldr	r0, [r0, #8]
    a202:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a206:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a20a:	2a01      	cmp	r2, #1
    a20c:	d004      	beq.n	a218 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    a20e:	f240 710f 	movw	r1, #1807	; 0x70f
    a212:	2031      	movs	r0, #49	; 0x31
    a214:	f7fa fa98 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a218:	f021 0110 	bic.w	r1, r1, #16
    a21c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a224:	f7fe bc84 	b.w	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a228:	20000130 	.word	0x20000130
    a22c:	b510      	push	{r4, lr}
    a22e:	4c0a      	ldr	r4, [pc, #40]	; (a258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>)
    a230:	2301      	movs	r3, #1
    a232:	2100      	movs	r1, #0
    a234:	68a0      	ldr	r0, [r4, #8]
    a236:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a23a:	3070      	adds	r0, #112	; 0x70
    a23c:	f003 fb51 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a240:	b120      	cbz	r0, a24c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1980>
    a242:	68a1      	ldr	r1, [r4, #8]
    a244:	200e      	movs	r0, #14
    a246:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a24a:	bd10      	pop	{r4, pc}
    a24c:	f240 61fb 	movw	r1, #1787	; 0x6fb
    a250:	2031      	movs	r0, #49	; 0x31
    a252:	f7fa fa79 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a256:	0000      	.short	0x0000
    a258:	20000130 	.word	0x20000130
    a25c:	4804      	ldr	r0, [pc, #16]	; (a270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a4>)
    a25e:	6880      	ldr	r0, [r0, #8]
    a260:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a264:	f021 0104 	bic.w	r1, r1, #4
    a268:	7001      	strb	r1, [r0, #0]
    a26a:	f7fe bc61 	b.w	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a26e:	0000      	.short	0x0000
    a270:	20000130 	.word	0x20000130
    a274:	4809      	ldr	r0, [pc, #36]	; (a29c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d0>)
    a276:	b510      	push	{r4, lr}
    a278:	6880      	ldr	r0, [r0, #8]
    a27a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a27e:	2910      	cmp	r1, #16
    a280:	d004      	beq.n	a28c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>
    a282:	f240 6192 	movw	r1, #1682	; 0x692
    a286:	2031      	movs	r0, #49	; 0x31
    a288:	f7fa fa5e 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a28c:	2101      	movs	r1, #1
    a28e:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    a292:	2111      	movs	r1, #17
    a294:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a298:	bd10      	pop	{r4, pc}
    a29a:	0000      	.short	0x0000
    a29c:	20000130 	.word	0x20000130
    a2a0:	b510      	push	{r4, lr}
    a2a2:	4c0a      	ldr	r4, [pc, #40]	; (a2cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>)
    a2a4:	2301      	movs	r3, #1
    a2a6:	2100      	movs	r1, #0
    a2a8:	68a0      	ldr	r0, [r4, #8]
    a2aa:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a2ae:	3070      	adds	r0, #112	; 0x70
    a2b0:	f003 fb17 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2b4:	b120      	cbz	r0, a2c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    a2b6:	68a1      	ldr	r1, [r4, #8]
    a2b8:	201f      	movs	r0, #31
    a2ba:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a2be:	bd10      	pop	{r4, pc}
    a2c0:	f240 711b 	movw	r1, #1819	; 0x71b
    a2c4:	2031      	movs	r0, #49	; 0x31
    a2c6:	f7fa fa3f 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2ca:	0000      	.short	0x0000
    a2cc:	20000130 	.word	0x20000130
    a2d0:	4808      	ldr	r0, [pc, #32]	; (a2f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a28>)
    a2d2:	b510      	push	{r4, lr}
    a2d4:	6880      	ldr	r0, [r0, #8]
    a2d6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a2da:	2921      	cmp	r1, #33	; 0x21
    a2dc:	d005      	beq.n	a2ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
    a2de:	b121      	cbz	r1, a2ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
    a2e0:	f240 7122 	movw	r1, #1826	; 0x722
    a2e4:	2031      	movs	r0, #49	; 0x31
    a2e6:	f7fa fa2f 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2ea:	2122      	movs	r1, #34	; 0x22
    a2ec:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a2f0:	bd10      	pop	{r4, pc}
    a2f2:	0000      	.short	0x0000
    a2f4:	20000130 	.word	0x20000130
    a2f8:	4807      	ldr	r0, [pc, #28]	; (a318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4c>)
    a2fa:	b510      	push	{r4, lr}
    a2fc:	6880      	ldr	r0, [r0, #8]
    a2fe:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a302:	2915      	cmp	r1, #21
    a304:	d004      	beq.n	a310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a44>
    a306:	f240 61a7 	movw	r1, #1703	; 0x6a7
    a30a:	2031      	movs	r0, #49	; 0x31
    a30c:	f7fa fa1c 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a310:	2119      	movs	r1, #25
    a312:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a316:	bd10      	pop	{r4, pc}
    a318:	20000130 	.word	0x20000130
    a31c:	4807      	ldr	r0, [pc, #28]	; (a33c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>)
    a31e:	b510      	push	{r4, lr}
    a320:	6880      	ldr	r0, [r0, #8]
    a322:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a326:	2915      	cmp	r1, #21
    a328:	d004      	beq.n	a334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a68>
    a32a:	f240 61a1 	movw	r1, #1697	; 0x6a1
    a32e:	2031      	movs	r0, #49	; 0x31
    a330:	f7fa fa0a 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a334:	2117      	movs	r1, #23
    a336:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a33a:	bd10      	pop	{r4, pc}
    a33c:	20000130 	.word	0x20000130
    a340:	b570      	push	{r4, r5, r6, lr}
    a342:	4d1b      	ldr	r5, [pc, #108]	; (a3b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>)
    a344:	68a8      	ldr	r0, [r5, #8]
    a346:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a34a:	291b      	cmp	r1, #27
    a34c:	d002      	beq.n	a354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    a34e:	f240 61c1 	movw	r1, #1729	; 0x6c1
    a352:	e007      	b.n	a364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    a354:	2400      	movs	r4, #0
    a356:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
    a35a:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a35e:	b121      	cbz	r1, a36a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9e>
    a360:	f240 61c5 	movw	r1, #1733	; 0x6c5
    a364:	2031      	movs	r0, #49	; 0x31
    a366:	f7fa f9ef 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a36a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    a36e:	b141      	cbz	r1, a382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab6>
    a370:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    a374:	8801      	ldrh	r1, [r0, #0]
    a376:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    a37a:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    a37e:	210c      	movs	r1, #12
    a380:	e008      	b.n	a394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>
    a382:	8801      	ldrh	r1, [r0, #0]
    a384:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    a388:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    a38c:	2101      	movs	r1, #1
    a38e:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
    a392:	210b      	movs	r1, #11
    a394:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    a398:	8800      	ldrh	r0, [r0, #0]
    a39a:	f7fa fdef 	bl	4f7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a39e:	f002 ff15 	bl	d1cc <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a3a2:	f7fc fb5d 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a3a6:	68a8      	ldr	r0, [r5, #8]
    a3a8:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    a3ac:	bd70      	pop	{r4, r5, r6, pc}
    a3ae:	0000      	.short	0x0000
    a3b0:	20000130 	.word	0x20000130
    a3b4:	b510      	push	{r4, lr}
    a3b6:	4c08      	ldr	r4, [pc, #32]	; (a3d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0c>)
    a3b8:	2301      	movs	r3, #1
    a3ba:	4619      	mov	r1, r3
    a3bc:	68a0      	ldr	r0, [r4, #8]
    a3be:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a3c2:	3070      	adds	r0, #112	; 0x70
    a3c4:	f003 fa8d 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3c8:	2800      	cmp	r0, #0
    a3ca:	d103      	bne.n	a3d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
    a3cc:	68a1      	ldr	r1, [r4, #8]
    a3ce:	2008      	movs	r0, #8
    a3d0:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    a3d4:	bd10      	pop	{r4, pc}
    a3d6:	0000      	.short	0x0000
    a3d8:	20000130 	.word	0x20000130
    a3dc:	4814      	ldr	r0, [pc, #80]	; (a430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>)
    a3de:	b510      	push	{r4, lr}
    a3e0:	68c1      	ldr	r1, [r0, #12]
    a3e2:	6880      	ldr	r0, [r0, #8]
    a3e4:	7909      	ldrb	r1, [r1, #4]
    a3e6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a3ea:	2a0a      	cmp	r2, #10
    a3ec:	d109      	bne.n	a402 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    a3ee:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
    a3f2:	428a      	cmp	r2, r1
    a3f4:	d105      	bne.n	a402 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    a3f6:	2100      	movs	r1, #0
    a3f8:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a3fc:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    a400:	bd10      	pop	{r4, pc}
    a402:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    a406:	0713      	lsls	r3, r2, #28
    a408:	d507      	bpl.n	a41a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4e>
    a40a:	f022 0108 	bic.w	r1, r2, #8
    a40e:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a416:	f7fe bb8b 	b.w	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a41a:	29ff      	cmp	r1, #255	; 0xff
    a41c:	d004      	beq.n	a428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b5c>
    a41e:	f240 617d 	movw	r1, #1661	; 0x67d
    a422:	2031      	movs	r0, #49	; 0x31
    a424:	f7fa f990 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a42c:	f7ff be94 	b.w	a158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    a430:	20000130 	.word	0x20000130
    a434:	b510      	push	{r4, lr}
    a436:	4c15      	ldr	r4, [pc, #84]	; (a48c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc0>)
    a438:	68a0      	ldr	r0, [r4, #8]
    a43a:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a43e:	0789      	lsls	r1, r1, #30
    a440:	d411      	bmi.n	a466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9a>
    a442:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a446:	2301      	movs	r3, #1
    a448:	2100      	movs	r1, #0
    a44a:	3070      	adds	r0, #112	; 0x70
    a44c:	f003 fa49 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a450:	b120      	cbz	r0, a45c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b90>
    a452:	68a1      	ldr	r1, [r4, #8]
    a454:	2006      	movs	r0, #6
    a456:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a45a:	e009      	b.n	a470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    a45c:	f240 61e7 	movw	r1, #1767	; 0x6e7
    a460:	2031      	movs	r0, #49	; 0x31
    a462:	f7fa f971 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a466:	2100      	movs	r1, #0
    a468:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    a46c:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
    a470:	68a0      	ldr	r0, [r4, #8]
    a472:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a476:	0780      	lsls	r0, r0, #30
    a478:	d507      	bpl.n	a48a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    a47a:	f7fe fb59 	bl	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a47e:	68a0      	ldr	r0, [r4, #8]
    a480:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a484:	f021 0102 	bic.w	r1, r1, #2
    a488:	7001      	strb	r1, [r0, #0]
    a48a:	bd10      	pop	{r4, pc}
    a48c:	20000130 	.word	0x20000130
    a490:	4808      	ldr	r0, [pc, #32]	; (a4b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    a492:	b510      	push	{r4, lr}
    a494:	6880      	ldr	r0, [r0, #8]
    a496:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    a49a:	b941      	cbnz	r1, a4ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be2>
    a49c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a4a0:	2301      	movs	r3, #1
    a4a2:	2106      	movs	r1, #6
    a4a4:	3070      	adds	r0, #112	; 0x70
    a4a6:	f003 fa1c 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4aa:	2800      	cmp	r0, #0
    a4ac:	d000      	beq.n	a4b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be4>
    a4ae:	2001      	movs	r0, #1
    a4b0:	bd10      	pop	{r4, pc}
    a4b2:	0000      	.short	0x0000
    a4b4:	20000130 	.word	0x20000130
    a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4ba:	4c59      	ldr	r4, [pc, #356]	; (a620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d54>)
    a4bc:	4606      	mov	r6, r0
    a4be:	4615      	mov	r5, r2
    a4c0:	68a0      	ldr	r0, [r4, #8]
    a4c2:	b109      	cbz	r1, a4c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    a4c4:	2100      	movs	r1, #0
    a4c6:	e004      	b.n	a4d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c06>
    a4c8:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    a4cc:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
    a4d0:	4411      	add	r1, r2
    a4d2:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    a4d6:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    a4da:	f88d 1000 	strb.w	r1, [sp]
    a4de:	9900      	ldr	r1, [sp, #0]
    a4e0:	9100      	str	r1, [sp, #0]
    a4e2:	f89d 1000 	ldrb.w	r1, [sp]
    a4e6:	b939      	cbnz	r1, a4f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
    a4e8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a4ec:	2301      	movs	r3, #1
    a4ee:	4619      	mov	r1, r3
    a4f0:	3070      	adds	r0, #112	; 0x70
    a4f2:	f003 f9f6 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4f6:	b130      	cbz	r0, a506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3a>
    a4f8:	68a0      	ldr	r0, [r4, #8]
    a4fa:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
    a4fe:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    a502:	4411      	add	r1, r2
    a504:	8001      	strh	r1, [r0, #0]
    a506:	68a0      	ldr	r0, [r4, #8]
    a508:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
    a50c:	b132      	cbz	r2, a51c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c50>
    a50e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    a512:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
    a516:	4419      	add	r1, r3
    a518:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    a51c:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
    a520:	2b00      	cmp	r3, #0
    a522:	dd06      	ble.n	a532 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c66>
    a524:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    a528:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
    a52c:	4439      	add	r1, r7
    a52e:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    a532:	2101      	movs	r1, #1
    a534:	273d      	movs	r7, #61	; 0x3d
    a536:	b116      	cbz	r6, a53e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    a538:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    a53c:	e012      	b.n	a564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    a53e:	7824      	ldrb	r4, [r4, #0]
    a540:	2c02      	cmp	r4, #2
    a542:	d009      	beq.n	a558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8c>
    a544:	2c01      	cmp	r4, #1
    a546:	d011      	beq.n	a56c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca0>
    a548:	b33d      	cbz	r5, a59a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cce>
    a54a:	f100 0294 	add.w	r2, r0, #148	; 0x94
    a54e:	7011      	strb	r1, [r2, #0]
    a550:	06e9      	lsls	r1, r5, #27
    a552:	d50e      	bpl.n	a572 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca6>
    a554:	211e      	movs	r1, #30
    a556:	e018      	b.n	a58a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
    a558:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
    a55c:	2a06      	cmp	r2, #6
    a55e:	d044      	beq.n	a5ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    a560:	2216      	movs	r2, #22
    a562:	e042      	b.n	a5ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    a564:	f100 0294 	add.w	r2, r0, #148	; 0x94
    a568:	7011      	strb	r1, [r2, #0]
    a56a:	e047      	b.n	a5fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    a56c:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    a570:	e03b      	b.n	a5ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    a572:	0729      	lsls	r1, r5, #28
    a574:	d502      	bpl.n	a57c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb0>
    a576:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    a57a:	e03f      	b.n	a5fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    a57c:	06a9      	lsls	r1, r5, #26
    a57e:	d501      	bpl.n	a584 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb8>
    a580:	2123      	movs	r1, #35	; 0x23
    a582:	e002      	b.n	a58a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
    a584:	07a9      	lsls	r1, r5, #30
    a586:	d003      	beq.n	a590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>
    a588:	212a      	movs	r1, #42	; 0x2a
    a58a:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    a58e:	e035      	b.n	a5fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    a590:	f640 41c1 	movw	r1, #3265	; 0xcc1
    a594:	2031      	movs	r0, #49	; 0x31
    a596:	f7fa f8d7 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a59a:	b12a      	cbz	r2, a5a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cdc>
    a59c:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    a5a0:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    a5a4:	42a2      	cmp	r2, r4
    a5a6:	d216      	bcs.n	a5d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
    a5a8:	2b00      	cmp	r3, #0
    a5aa:	dd05      	ble.n	a5b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>
    a5ac:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
    a5b0:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    a5b4:	429a      	cmp	r2, r3
    a5b6:	d20e      	bcs.n	a5d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
    a5b8:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
    a5bc:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    a5c0:	4293      	cmp	r3, r2
    a5c2:	d30a      	bcc.n	a5da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
    a5c4:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    a5c8:	f88d 3000 	strb.w	r3, [sp]
    a5cc:	9b00      	ldr	r3, [sp, #0]
    a5ce:	9300      	str	r3, [sp, #0]
    a5d0:	f89d 3000 	ldrb.w	r3, [sp]
    a5d4:	b10b      	cbz	r3, a5da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
    a5d6:	2222      	movs	r2, #34	; 0x22
    a5d8:	e007      	b.n	a5ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    a5da:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    a5de:	b13b      	cbz	r3, a5f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d24>
    a5e0:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a5e4:	4293      	cmp	r3, r2
    a5e6:	d309      	bcc.n	a5fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    a5e8:	2208      	movs	r2, #8
    a5ea:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    a5ee:	e7b9      	b.n	a564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    a5f0:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    a5f4:	2a06      	cmp	r2, #6
    a5f6:	d301      	bcc.n	a5fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    a5f8:	223e      	movs	r2, #62	; 0x3e
    a5fa:	e7f6      	b.n	a5ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    a5fc:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    a600:	f88d 1000 	strb.w	r1, [sp]
    a604:	9900      	ldr	r1, [sp, #0]
    a606:	9100      	str	r1, [sp, #0]
    a608:	f89d 1000 	ldrb.w	r1, [sp]
    a60c:	b119      	cbz	r1, a616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4a>
    a60e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a612:	f004 bcff 	b.w	f014 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    a616:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a61a:	2100      	movs	r1, #0
    a61c:	f7fd bbfe 	b.w	7e1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a620:	20000130 	.word	0x20000130
    a624:	b570      	push	{r4, r5, r6, lr}
    a626:	4d2d      	ldr	r5, [pc, #180]	; (a6dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e10>)
    a628:	68a8      	ldr	r0, [r5, #8]
    a62a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    a62e:	b151      	cbz	r1, a646 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    a630:	2901      	cmp	r1, #1
    a632:	d008      	beq.n	a646 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    a634:	2902      	cmp	r1, #2
    a636:	d009      	beq.n	a64c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
    a638:	2903      	cmp	r1, #3
    a63a:	d007      	beq.n	a64c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
    a63c:	f640 217f 	movw	r1, #2687	; 0xa7f
    a640:	2031      	movs	r0, #49	; 0x31
    a642:	f7fa f881 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a646:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    a64a:	e035      	b.n	a6b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dec>
    a64c:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    a650:	2908      	cmp	r1, #8
    a652:	d034      	beq.n	a6be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    a654:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    a658:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    a65c:	2400      	movs	r4, #0
    a65e:	1c8b      	adds	r3, r1, #2
    a660:	429a      	cmp	r2, r3
    a662:	d306      	bcc.n	a672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
    a664:	1a51      	subs	r1, r2, r1
    a666:	1e89      	subs	r1, r1, #2
    a668:	040c      	lsls	r4, r1, #16
    a66a:	0c24      	lsrs	r4, r4, #16
    a66c:	d001      	beq.n	a672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
    a66e:	1e64      	subs	r4, r4, #1
    a670:	b2a4      	uxth	r4, r4
    a672:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    a676:	b139      	cbz	r1, a688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbc>
    a678:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a67c:	2301      	movs	r3, #1
    a67e:	2109      	movs	r1, #9
    a680:	3070      	adds	r0, #112	; 0x70
    a682:	f003 f92e 	bl	d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a686:	b330      	cbz	r0, a6d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0a>
    a688:	f7ff ff02 	bl	a490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    a68c:	b168      	cbz	r0, a6aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
    a68e:	68a9      	ldr	r1, [r5, #8]
    a690:	2000      	movs	r0, #0
    a692:	3198      	adds	r1, #152	; 0x98
    a694:	c906      	ldmia	r1, {r1, r2}
    a696:	1c8b      	adds	r3, r1, #2
    a698:	429a      	cmp	r2, r3
    a69a:	d303      	bcc.n	a6a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
    a69c:	1a50      	subs	r0, r2, r1
    a69e:	1e80      	subs	r0, r0, #2
    a6a0:	d000      	beq.n	a6a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
    a6a2:	1e40      	subs	r0, r0, #1
    a6a4:	42a0      	cmp	r0, r4
    a6a6:	d200      	bcs.n	a6aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
    a6a8:	b284      	uxth	r4, r0
    a6aa:	b10c      	cbz	r4, a6b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    a6ac:	1e64      	subs	r4, r4, #1
    a6ae:	b2a4      	uxth	r4, r4
    a6b0:	68a8      	ldr	r0, [r5, #8]
    a6b2:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    a6b6:	4421      	add	r1, r4
    a6b8:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a6bc:	bd70      	pop	{r4, r5, r6, pc}
    a6be:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    a6c2:	2903      	cmp	r1, #3
    a6c4:	d3bf      	bcc.n	a646 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    a6c6:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    a6ca:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    a6cc:	4411      	add	r1, r2
    a6ce:	1c49      	adds	r1, r1, #1
    a6d0:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    a6d4:	bd70      	pop	{r4, r5, r6, pc}
    a6d6:	2400      	movs	r4, #0
    a6d8:	e7ea      	b.n	a6b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    a6da:	0000      	.short	0x0000
    a6dc:	20000130 	.word	0x20000130

0000a6e0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a6e0:	4903      	ldr	r1, [pc, #12]	; (a6f0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a6e2:	884a      	ldrh	r2, [r1, #2]
    a6e4:	8002      	strh	r2, [r0, #0]
    a6e6:	7809      	ldrb	r1, [r1, #0]
    a6e8:	7081      	strb	r1, [r0, #2]
    a6ea:	2000      	movs	r0, #0
    a6ec:	4770      	bx	lr
    a6ee:	0000      	.short	0x0000
    a6f0:	20001388 	.word	0x20001388

0000a6f4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a6f4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a6f6:	460c      	mov	r4, r1
    a6f8:	4605      	mov	r5, r0
    a6fa:	8800      	ldrh	r0, [r0, #0]
    a6fc:	4669      	mov	r1, sp
    a6fe:	f003 f8c6 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a702:	0001      	movs	r1, r0
    a704:	f04f 0000 	mov.w	r0, #0
    a708:	d005      	beq.n	a716 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    a70a:	f8c4 0002 	str.w	r0, [r4, #2]
    a70e:	71a0      	strb	r0, [r4, #6]
    a710:	8020      	strh	r0, [r4, #0]
    a712:	2002      	movs	r0, #2
    a714:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a716:	9901      	ldr	r1, [sp, #4]
    a718:	f111 0170 	adds.w	r1, r1, #112	; 0x70
    a71c:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
    a720:	f8d1 2016 	ldr.w	r2, [r1, #22]
    a724:	f8c4 2002 	str.w	r2, [r4, #2]
    a728:	7e8a      	ldrb	r2, [r1, #26]
    a72a:	71a2      	strb	r2, [r4, #6]
    a72c:	882a      	ldrh	r2, [r5, #0]
    a72e:	8022      	strh	r2, [r4, #0]
    a730:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
    a734:	f88d 2008 	strb.w	r2, [sp, #8]
    a738:	9a02      	ldr	r2, [sp, #8]
    a73a:	9202      	str	r2, [sp, #8]
    a73c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a740:	2a00      	cmp	r2, #0
    a742:	d1eb      	bne.n	a71c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    a744:	2000      	movs	r0, #0
    a746:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000a748 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a748:	b51c      	push	{r2, r3, r4, lr}
    a74a:	8800      	ldrh	r0, [r0, #0]
    a74c:	4669      	mov	r1, sp
    a74e:	f003 f89e 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a752:	2800      	cmp	r0, #0
    a754:	d10b      	bne.n	a76e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    a756:	480b      	ldr	r0, [pc, #44]	; (a784 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    a758:	7800      	ldrb	r0, [r0, #0]
    a75a:	b188      	cbz	r0, a780 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    a75c:	9801      	ldr	r0, [sp, #4]
    a75e:	f005 fb77 	bl	fe50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    a762:	b128      	cbz	r0, a770 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    a764:	9801      	ldr	r0, [sp, #4]
    a766:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    a76a:	b118      	cbz	r0, a774 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    a76c:	203a      	movs	r0, #58	; 0x3a
    a76e:	bd1c      	pop	{r2, r3, r4, pc}
    a770:	2002      	movs	r0, #2
    a772:	bd1c      	pop	{r2, r3, r4, pc}
    a774:	9901      	ldr	r1, [sp, #4]
    a776:	2001      	movs	r0, #1
    a778:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
    a77c:	2000      	movs	r0, #0
    a77e:	bd1c      	pop	{r2, r3, r4, pc}
    a780:	2011      	movs	r0, #17
    a782:	bd1c      	pop	{r2, r3, r4, pc}
    a784:	2000020c 	.word	0x2000020c

0000a788 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a788:	b510      	push	{r4, lr}
    a78a:	4604      	mov	r4, r0
    a78c:	f005 fb57 	bl	fe3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    a790:	b130      	cbz	r0, a7a0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a792:	4804      	ldr	r0, [pc, #16]	; (a7a4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a794:	8881      	ldrh	r1, [r0, #4]
    a796:	8021      	strh	r1, [r4, #0]
    a798:	88c0      	ldrh	r0, [r0, #6]
    a79a:	8060      	strh	r0, [r4, #2]
    a79c:	2000      	movs	r0, #0
    a79e:	bd10      	pop	{r4, pc}
    a7a0:	2001      	movs	r0, #1
    a7a2:	bd10      	pop	{r4, pc}
    a7a4:	20000214 	.word	0x20000214

0000a7a8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a7a8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a7aa:	4605      	mov	r5, r0
    a7ac:	f000 fb04 	bl	adb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a7b0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a7b4:	b310      	cbz	r0, a7fc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a7b6:	2400      	movs	r4, #0
    a7b8:	a802      	add	r0, sp, #8
    a7ba:	f88d 4004 	strb.w	r4, [sp, #4]
    a7be:	f88d 4008 	strb.w	r4, [sp, #8]
    a7c2:	9000      	str	r0, [sp, #0]
    a7c4:	78aa      	ldrb	r2, [r5, #2]
    a7c6:	7869      	ldrb	r1, [r5, #1]
    a7c8:	7828      	ldrb	r0, [r5, #0]
    a7ca:	ab01      	add	r3, sp, #4
    a7cc:	f005 fb98 	bl	ff00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    a7d0:	2800      	cmp	r0, #0
    a7d2:	d112      	bne.n	a7fa <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a7d4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a7d8:	f005 fa99 	bl	fd0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    a7dc:	b180      	cbz	r0, a800 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a7de:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a7e2:	f005 fa94 	bl	fd0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    a7e6:	b158      	cbz	r0, a800 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a7e8:	4806      	ldr	r0, [pc, #24]	; (a804 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a7ea:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a7ee:	7381      	strb	r1, [r0, #14]
    a7f0:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a7f4:	73c1      	strb	r1, [r0, #15]
    a7f6:	8204      	strh	r4, [r0, #16]
    a7f8:	2000      	movs	r0, #0
    a7fa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a7fc:	2001      	movs	r0, #1
    a7fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a800:	2011      	movs	r0, #17
    a802:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a804:	20001388 	.word	0x20001388

0000a808 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a808:	7801      	ldrb	r1, [r0, #0]
    a80a:	b171      	cbz	r1, a82a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a80c:	7841      	ldrb	r1, [r0, #1]
    a80e:	b161      	cbz	r1, a82a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a810:	8841      	ldrh	r1, [r0, #2]
    a812:	291b      	cmp	r1, #27
    a814:	d309      	bcc.n	a82a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a816:	8881      	ldrh	r1, [r0, #4]
    a818:	291b      	cmp	r1, #27
    a81a:	d306      	bcc.n	a82a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a81c:	4904      	ldr	r1, [pc, #16]	; (a830 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a81e:	6802      	ldr	r2, [r0, #0]
    a820:	600a      	str	r2, [r1, #0]
    a822:	8880      	ldrh	r0, [r0, #4]
    a824:	8088      	strh	r0, [r1, #4]
    a826:	2000      	movs	r0, #0
    a828:	4770      	bx	lr
    a82a:	2012      	movs	r0, #18
    a82c:	4770      	bx	lr
    a82e:	0000      	.short	0x0000
    a830:	20001388 	.word	0x20001388

0000a834 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a834:	6800      	ldr	r0, [r0, #0]
    a836:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a83a:	4288      	cmp	r0, r1
    a83c:	d303      	bcc.n	a846 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    a83e:	4903      	ldr	r1, [pc, #12]	; (a84c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    a840:	6088      	str	r0, [r1, #8]
    a842:	2000      	movs	r0, #0
    a844:	4770      	bx	lr
    a846:	2012      	movs	r0, #18
    a848:	4770      	bx	lr
    a84a:	0000      	.short	0x0000
    a84c:	20001388 	.word	0x20001388

0000a850 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a850:	4a03      	ldr	r2, [pc, #12]	; (a860 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a852:	e9d2 1200 	ldrd	r1, r2, [r2]
    a856:	6001      	str	r1, [r0, #0]
    a858:	6042      	str	r2, [r0, #4]
    a85a:	2000      	movs	r0, #0
    a85c:	4770      	bx	lr
    a85e:	0000      	.short	0x0000
    a860:	0000ac94 	.word	0x0000ac94

0000a864 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    a864:	b510      	push	{r4, lr}
    a866:	2005      	movs	r0, #5
    a868:	f000 fa9c 	bl	ada4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    a86c:	f7fd fe52 	bl	8514 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    a870:	4902      	ldr	r1, [pc, #8]	; (a87c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    a872:	4801      	ldr	r0, [pc, #4]	; (a878 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    a874:	6048      	str	r0, [r1, #4]
    a876:	bd10      	pop	{r4, pc}
    a878:	0000a8d5 	.word	0x0000a8d5
    a87c:	2000020c 	.word	0x2000020c

0000a880 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    a880:	b510      	push	{r4, lr}
    a882:	f002 ff58 	bl	d736 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a886:	f7fb fc6f 	bl	6168 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a88a:	f000 faa5 	bl	add8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    a88e:	f003 fc00 	bl	e092 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    a892:	480e      	ldr	r0, [pc, #56]	; (a8cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    a894:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a898:	4b0d      	ldr	r3, [pc, #52]	; (a8d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    a89a:	8281      	strh	r1, [r0, #20]
    a89c:	2100      	movs	r1, #0
    a89e:	7581      	strb	r1, [r0, #22]
    a8a0:	8301      	strh	r1, [r0, #24]
    a8a2:	221b      	movs	r2, #27
    a8a4:	801a      	strh	r2, [r3, #0]
    a8a6:	f44f 74a4 	mov.w	r4, #328	; 0x148
    a8aa:	805c      	strh	r4, [r3, #2]
    a8ac:	809a      	strh	r2, [r3, #4]
    a8ae:	80dc      	strh	r4, [r3, #6]
    a8b0:	7381      	strb	r1, [r0, #14]
    a8b2:	73c1      	strb	r1, [r0, #15]
    a8b4:	2303      	movs	r3, #3
    a8b6:	7003      	strb	r3, [r0, #0]
    a8b8:	2302      	movs	r3, #2
    a8ba:	7043      	strb	r3, [r0, #1]
    a8bc:	8042      	strh	r2, [r0, #2]
    a8be:	8082      	strh	r2, [r0, #4]
    a8c0:	f640 62a6 	movw	r2, #3750	; 0xea6
    a8c4:	6082      	str	r2, [r0, #8]
    a8c6:	7481      	strb	r1, [r0, #18]
    a8c8:	7301      	strb	r1, [r0, #12]
    a8ca:	bd10      	pop	{r4, pc}
    a8cc:	20001388 	.word	0x20001388
    a8d0:	20000214 	.word	0x20000214
    a8d4:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8d8:	4692      	mov	sl, r2
    a8da:	460f      	mov	r7, r1
    a8dc:	4681      	mov	r9, r0
    a8de:	f005 faae 	bl	fe3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    a8e2:	2800      	cmp	r0, #0
    a8e4:	d063      	beq.n	a9ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    a8e6:	4933      	ldr	r1, [pc, #204]	; (a9b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    a8e8:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    a8ec:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    a8f0:	8808      	ldrh	r0, [r1, #0]
    a8f2:	4290      	cmp	r0, r2
    a8f4:	d300      	bcc.n	a8f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    a8f6:	4610      	mov	r0, r2
    a8f8:	4680      	mov	r8, r0
    a8fa:	8888      	ldrh	r0, [r1, #4]
    a8fc:	42b0      	cmp	r0, r6
    a8fe:	d200      	bcs.n	a902 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    a900:	4606      	mov	r6, r0
    a902:	884c      	ldrh	r4, [r1, #2]
    a904:	f640 0048 	movw	r0, #2120	; 0x848
    a908:	4284      	cmp	r4, r0
    a90a:	d300      	bcc.n	a90e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    a90c:	4604      	mov	r4, r0
    a90e:	88cd      	ldrh	r5, [r1, #6]
    a910:	4285      	cmp	r5, r0
    a912:	d300      	bcc.n	a916 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    a914:	4605      	mov	r5, r0
    a916:	4284      	cmp	r4, r0
    a918:	d300      	bcc.n	a91c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    a91a:	4604      	mov	r4, r0
    a91c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a920:	2e1b      	cmp	r6, #27
    a922:	d001      	beq.n	a928 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    a924:	428d      	cmp	r5, r1
    a926:	d104      	bne.n	a932 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    a928:	f1b8 0f1b 	cmp.w	r8, #27
    a92c:	d03f      	beq.n	a9ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    a92e:	428c      	cmp	r4, r1
    a930:	d03d      	beq.n	a9ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    a932:	466a      	mov	r2, sp
    a934:	4651      	mov	r1, sl
    a936:	4648      	mov	r0, r9
    a938:	f005 fa0c 	bl	fd54 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    a93c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a940:	4641      	mov	r1, r8
    a942:	4540      	cmp	r0, r8
    a944:	d900      	bls.n	a948 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    a946:	4608      	mov	r0, r1
    a948:	80f8      	strh	r0, [r7, #6]
    a94a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a94e:	42a1      	cmp	r1, r4
    a950:	d800      	bhi.n	a954 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    a952:	460c      	mov	r4, r1
    a954:	813c      	strh	r4, [r7, #8]
    a956:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a95a:	42b1      	cmp	r1, r6
    a95c:	d800      	bhi.n	a960 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    a95e:	460e      	mov	r6, r1
    a960:	807e      	strh	r6, [r7, #2]
    a962:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a966:	42a9      	cmp	r1, r5
    a968:	d900      	bls.n	a96c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    a96a:	4629      	mov	r1, r5
    a96c:	80b9      	strh	r1, [r7, #4]
    a96e:	2201      	movs	r2, #1
    a970:	703a      	strb	r2, [r7, #0]
    a972:	381b      	subs	r0, #27
    a974:	28e0      	cmp	r0, #224	; 0xe0
    a976:	d902      	bls.n	a97e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    a978:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    a97c:	e014      	b.n	a9a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    a97e:	3e1b      	subs	r6, #27
    a980:	2ee0      	cmp	r6, #224	; 0xe0
    a982:	d902      	bls.n	a98a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    a984:	f640 4182 	movw	r1, #3202	; 0xc82
    a988:	e00e      	b.n	a9a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    a98a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a98e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a992:	4284      	cmp	r4, r0
    a994:	d902      	bls.n	a99c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    a996:	f640 4184 	movw	r1, #3204	; 0xc84
    a99a:	e005      	b.n	a9a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    a99c:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    a9a0:	4281      	cmp	r1, r0
    a9a2:	d904      	bls.n	a9ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    a9a4:	f640 4186 	movw	r1, #3206	; 0xc86
    a9a8:	2039      	movs	r0, #57	; 0x39
    a9aa:	f7f9 fecd 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9ae:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9b2:	0000      	.short	0x0000
    a9b4:	20000214 	.word	0x20000214

0000a9b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9bc:	b088      	sub	sp, #32
    a9be:	460c      	mov	r4, r1
    a9c0:	4606      	mov	r6, r0
    a9c2:	f003 fd89 	bl	e4d8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a9c6:	b198      	cbz	r0, a9f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a9c8:	4630      	mov	r0, r6
    a9ca:	f003 fd78 	bl	e4be <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a9ce:	b130      	cbz	r0, a9de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a9d0:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a9d4:	2012      	movs	r0, #18
    a9d6:	2900      	cmp	r1, #0
    a9d8:	d00b      	beq.n	a9f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a9da:	2980      	cmp	r1, #128	; 0x80
    a9dc:	d809      	bhi.n	a9f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a9de:	4630      	mov	r0, r6
    a9e0:	f003 fd5c 	bl	e49c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a9e4:	b140      	cbz	r0, a9f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a9e6:	4630      	mov	r0, r6
    a9e8:	f003 fcd4 	bl	e394 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a9ec:	b130      	cbz	r0, a9fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    a9ee:	e009      	b.n	aa04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    a9f0:	2042      	movs	r0, #66	; 0x42
    a9f2:	b008      	add	sp, #32
    a9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9f8:	200c      	movs	r0, #12
    a9fa:	e7fa      	b.n	a9f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a9fc:	4630      	mov	r0, r6
    a9fe:	f003 fd58 	bl	e4b2 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    aa02:	b3a8      	cbz	r0, aa70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    aa04:	4630      	mov	r0, r6
    aa06:	f003 ff2f 	bl	e868 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    aa0a:	2800      	cmp	r0, #0
    aa0c:	d1f4      	bne.n	a9f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    aa0e:	4630      	mov	r0, r6
    aa10:	f003 fcdb 	bl	e3ca <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    aa14:	2800      	cmp	r0, #0
    aa16:	d1ef      	bne.n	a9f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    aa18:	4630      	mov	r0, r6
    aa1a:	f7fc f9d7 	bl	6dcc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    aa1e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    aa22:	f242 7110 	movw	r1, #10000	; 0x2710
    aa26:	fb00 f801 	mul.w	r8, r0, r1
    aa2a:	78e1      	ldrb	r1, [r4, #3]
    aa2c:	4630      	mov	r0, r6
    aa2e:	f003 fd2c 	bl	e48a <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    aa32:	4630      	mov	r0, r6
    aa34:	f003 fd3f 	bl	e4b6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    aa38:	b1e8      	cbz	r0, aa76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    aa3a:	2200      	movs	r2, #0
    aa3c:	4611      	mov	r1, r2
    aa3e:	a801      	add	r0, sp, #4
    aa40:	f7fa f8e0 	bl	4c04 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    aa44:	0004      	movs	r4, r0
    aa46:	d06a      	beq.n	ab1e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    aa48:	2100      	movs	r1, #0
    aa4a:	f7fb fdbb 	bl	65c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    aa4e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    aa52:	8020      	strh	r0, [r4, #0]
    aa54:	4621      	mov	r1, r4
    aa56:	4630      	mov	r0, r6
    aa58:	f003 fd51 	bl	e4fe <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    aa5c:	f005 f9ef 	bl	fe3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    aa60:	4d3a      	ldr	r5, [pc, #232]	; (ab4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    aa62:	2800      	cmp	r0, #0
    aa64:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    aa68:	d00f      	beq.n	aa8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    aa6a:	886a      	ldrh	r2, [r5, #2]
    aa6c:	88a9      	ldrh	r1, [r5, #4]
    aa6e:	e00e      	b.n	aa8e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    aa70:	e7ff      	b.n	aa72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    aa72:	2012      	movs	r0, #18
    aa74:	e7bd      	b.n	a9f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    aa76:	4642      	mov	r2, r8
    aa78:	2100      	movs	r1, #0
    aa7a:	4630      	mov	r0, r6
    aa7c:	f7fd f8f0 	bl	7c60 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    aa80:	2800      	cmp	r0, #0
    aa82:	d0b6      	beq.n	a9f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    aa84:	f241 414c 	movw	r1, #5196	; 0x144c
    aa88:	e053      	b.n	ab32 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    aa8a:	221b      	movs	r2, #27
    aa8c:	4611      	mov	r1, r2
    aa8e:	84c2      	strh	r2, [r0, #38]	; 0x26
    aa90:	8501      	strh	r1, [r0, #40]	; 0x28
    aa92:	68a8      	ldr	r0, [r5, #8]
    aa94:	62e0      	str	r0, [r4, #44]	; 0x2c
    aa96:	f641 574c 	movw	r7, #7500	; 0x1d4c
    aa9a:	4630      	mov	r0, r6
    aa9c:	f003 fd13 	bl	e4c6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    aaa0:	b910      	cbnz	r0, aaa8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    aaa2:	4630      	mov	r0, r6
    aaa4:	f003 fd29 	bl	e4fa <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    aaa8:	60e7      	str	r7, [r4, #12]
    aaaa:	8821      	ldrh	r1, [r4, #0]
    aaac:	f8ad 1008 	strh.w	r1, [sp, #8]
    aab0:	7ba9      	ldrb	r1, [r5, #14]
    aab2:	f88d 100a 	strb.w	r1, [sp, #10]
    aab6:	7be9      	ldrb	r1, [r5, #15]
    aab8:	f88d 100b 	strb.w	r1, [sp, #11]
    aabc:	8a29      	ldrh	r1, [r5, #16]
    aabe:	f8ad 100c 	strh.w	r1, [sp, #12]
    aac2:	a905      	add	r1, sp, #20
    aac4:	9100      	str	r1, [sp, #0]
    aac6:	2001      	movs	r0, #1
    aac8:	ab04      	add	r3, sp, #16
    aaca:	aa02      	add	r2, sp, #8
    aacc:	4621      	mov	r1, r4
    aace:	f005 f977 	bl	fdc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    aad2:	b140      	cbz	r0, aae6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    aad4:	2100      	movs	r1, #0
    aad6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    aada:	f7fa f8bd 	bl	4c58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    aade:	b1f0      	cbz	r0, ab1e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    aae0:	f241 4198 	movw	r1, #5272	; 0x1498
    aae4:	e025      	b.n	ab32 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    aae6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    aaea:	f88d 0018 	strb.w	r0, [sp, #24]
    aaee:	f89d 0014 	ldrb.w	r0, [sp, #20]
    aaf2:	f88d 0019 	strb.w	r0, [sp, #25]
    aaf6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    aafa:	f8ad 001a 	strh.w	r0, [sp, #26]
    aafe:	a906      	add	r1, sp, #24
    ab00:	4620      	mov	r0, r4
    ab02:	f002 ff83 	bl	da0c <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ab06:	7868      	ldrb	r0, [r5, #1]
    ab08:	9000      	str	r0, [sp, #0]
    ab0a:	782b      	ldrb	r3, [r5, #0]
    ab0c:	88aa      	ldrh	r2, [r5, #4]
    ab0e:	8869      	ldrh	r1, [r5, #2]
    ab10:	8820      	ldrh	r0, [r4, #0]
    ab12:	f7fa f96d 	bl	4df0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    ab16:	b120      	cbz	r0, ab22 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    ab18:	f241 41a3 	movw	r1, #5283	; 0x14a3
    ab1c:	e009      	b.n	ab32 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ab1e:	2009      	movs	r0, #9
    ab20:	e767      	b.n	a9f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ab22:	4642      	mov	r2, r8
    ab24:	4621      	mov	r1, r4
    ab26:	4630      	mov	r0, r6
    ab28:	f7fd f89a 	bl	7c60 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    ab2c:	b120      	cbz	r0, ab38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    ab2e:	f241 41a5 	movw	r1, #5285	; 0x14a5
    ab32:	2039      	movs	r0, #57	; 0x39
    ab34:	f7f9 fe08 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab38:	4805      	ldr	r0, [pc, #20]	; (ab50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    ab3a:	6843      	ldr	r3, [r0, #4]
    ab3c:	b123      	cbz	r3, ab48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    ab3e:	2200      	movs	r2, #0
    ab40:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
    ab44:	4620      	mov	r0, r4
    ab46:	4798      	blx	r3
    ab48:	2000      	movs	r0, #0
    ab4a:	e752      	b.n	a9f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ab4c:	20001388 	.word	0x20001388
    ab50:	2000020c 	.word	0x2000020c
    ab54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab58:	b088      	sub	sp, #32
    ab5a:	4604      	mov	r4, r0
    ab5c:	8800      	ldrh	r0, [r0, #0]
    ab5e:	a906      	add	r1, sp, #24
    ab60:	f002 fe95 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ab64:	2800      	cmp	r0, #0
    ab66:	d147      	bne.n	abf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ab68:	9807      	ldr	r0, [sp, #28]
    ab6a:	2700      	movs	r7, #0
    ab6c:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
    ab70:	f88d 1008 	strb.w	r1, [sp, #8]
    ab74:	9902      	ldr	r1, [sp, #8]
    ab76:	9102      	str	r1, [sp, #8]
    ab78:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ab7c:	f88d 100c 	strb.w	r1, [sp, #12]
    ab80:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    ab84:	3070      	adds	r0, #112	; 0x70
    ab86:	0689      	lsls	r1, r1, #26
    ab88:	d502      	bpl.n	ab90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    ab8a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    ab8e:	b149      	cbz	r1, aba4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    ab90:	f05f 0100 	movs.w	r1, #0
    ab94:	f88d 1004 	strb.w	r1, [sp, #4]
    ab98:	2105      	movs	r1, #5
    ab9a:	304c      	adds	r0, #76	; 0x4c
    ab9c:	f004 fa76 	bl	f08c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    aba0:	b110      	cbz	r0, aba8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    aba2:	e004      	b.n	abae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    aba4:	2101      	movs	r1, #1
    aba6:	e7f5      	b.n	ab94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    aba8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    abac:	b318      	cbz	r0, abf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    abae:	8921      	ldrh	r1, [r4, #8]
    abb0:	88e0      	ldrh	r0, [r4, #6]
    abb2:	f005 f8c1 	bl	fd38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    abb6:	2800      	cmp	r0, #0
    abb8:	d11e      	bne.n	abf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    abba:	88a1      	ldrh	r1, [r4, #4]
    abbc:	8860      	ldrh	r0, [r4, #2]
    abbe:	f005 f8bb 	bl	fd38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    abc2:	2800      	cmp	r0, #0
    abc4:	d118      	bne.n	abf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    abc6:	8921      	ldrh	r1, [r4, #8]
    abc8:	88e0      	ldrh	r0, [r4, #6]
    abca:	f005 f8ab 	bl	fd24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    abce:	2800      	cmp	r0, #0
    abd0:	d112      	bne.n	abf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    abd2:	88a1      	ldrh	r1, [r4, #4]
    abd4:	8860      	ldrh	r0, [r4, #2]
    abd6:	f005 f8a5 	bl	fd24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    abda:	0006      	movs	r6, r0
    abdc:	d10c      	bne.n	abf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    abde:	9807      	ldr	r0, [sp, #28]
    abe0:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    abe4:	f04f 0801 	mov.w	r8, #1
    abe8:	f885 8001 	strb.w	r8, [r5, #1]
    abec:	f89d 100c 	ldrb.w	r1, [sp, #12]
    abf0:	b129      	cbz	r1, abfe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    abf2:	263a      	movs	r6, #58	; 0x3a
    abf4:	e02f      	b.n	ac56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    abf6:	201a      	movs	r0, #26
    abf8:	b008      	add	sp, #32
    abfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abfe:	4639      	mov	r1, r7
    ac00:	aa03      	add	r2, sp, #12
    ac02:	f005 f8a7 	bl	fd54 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    ac06:	8861      	ldrh	r1, [r4, #2]
    ac08:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    ac0c:	4281      	cmp	r1, r0
    ac0e:	d200      	bcs.n	ac12 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    ac10:	4608      	mov	r0, r1
    ac12:	80e8      	strh	r0, [r5, #6]
    ac14:	88a1      	ldrh	r1, [r4, #4]
    ac16:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    ac1a:	4281      	cmp	r1, r0
    ac1c:	d200      	bcs.n	ac20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    ac1e:	4608      	mov	r0, r1
    ac20:	8128      	strh	r0, [r5, #8]
    ac22:	88e2      	ldrh	r2, [r4, #6]
    ac24:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ac28:	428a      	cmp	r2, r1
    ac2a:	d200      	bcs.n	ac2e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    ac2c:	4611      	mov	r1, r2
    ac2e:	8069      	strh	r1, [r5, #2]
    ac30:	8922      	ldrh	r2, [r4, #8]
    ac32:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    ac36:	428a      	cmp	r2, r1
    ac38:	d200      	bcs.n	ac3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    ac3a:	4611      	mov	r1, r2
    ac3c:	f640 0248 	movw	r2, #2120	; 0x848
    ac40:	80a9      	strh	r1, [r5, #4]
    ac42:	4291      	cmp	r1, r2
    ac44:	d300      	bcc.n	ac48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    ac46:	4611      	mov	r1, r2
    ac48:	80a9      	strh	r1, [r5, #4]
    ac4a:	4290      	cmp	r0, r2
    ac4c:	d200      	bcs.n	ac50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    ac4e:	4602      	mov	r2, r0
    ac50:	812a      	strh	r2, [r5, #8]
    ac52:	f885 8000 	strb.w	r8, [r5]
    ac56:	706f      	strb	r7, [r5, #1]
    ac58:	4630      	mov	r0, r6
    ac5a:	e7cd      	b.n	abf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ac5c:	b510      	push	{r4, lr}
    ac5e:	4604      	mov	r4, r0
    ac60:	88c1      	ldrh	r1, [r0, #6]
    ac62:	8880      	ldrh	r0, [r0, #4]
    ac64:	f005 f868 	bl	fd38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    ac68:	2800      	cmp	r0, #0
    ac6a:	d10f      	bne.n	ac8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    ac6c:	8861      	ldrh	r1, [r4, #2]
    ac6e:	8820      	ldrh	r0, [r4, #0]
    ac70:	f005 f862 	bl	fd38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    ac74:	2800      	cmp	r0, #0
    ac76:	d109      	bne.n	ac8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    ac78:	4805      	ldr	r0, [pc, #20]	; (ac90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    ac7a:	88a1      	ldrh	r1, [r4, #4]
    ac7c:	8081      	strh	r1, [r0, #4]
    ac7e:	8821      	ldrh	r1, [r4, #0]
    ac80:	8001      	strh	r1, [r0, #0]
    ac82:	88e1      	ldrh	r1, [r4, #6]
    ac84:	80c1      	strh	r1, [r0, #6]
    ac86:	8861      	ldrh	r1, [r4, #2]
    ac88:	8041      	strh	r1, [r0, #2]
    ac8a:	2000      	movs	r0, #0
    ac8c:	bd10      	pop	{r4, pc}
    ac8e:	0000      	.short	0x0000
    ac90:	20000214 	.word	0x20000214
    ac94:	0b12fe0b 	.word	0x0b12fe0b
    ac98:	12fe0059 	.word	0x12fe0059
    ac9c:	05060708 	.word	0x05060708
    aca0:	00020304 	.word	0x00020304
    aca4:	f0f4f8fc 	.word	0xf0f4f8fc
    aca8:	0304d8ec 	.word	0x0304d8ec
    acac:	f4f8fc00 	.word	0xf4f8fc00
    acb0:	00d8ecf0 	.word	0x00d8ecf0

0000acb4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    acb4:	b510      	push	{r4, lr}
    acb6:	f7fb fecd 	bl	6a54 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    acba:	4804      	ldr	r0, [pc, #16]	; (accc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    acbc:	6840      	ldr	r0, [r0, #4]
    acbe:	f005 f997 	bl	fff0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    acc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    acc6:	f004 bed3 	b.w	fa70 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    acca:	0000      	.short	0x0000
    accc:	2000021c 	.word	0x2000021c

0000acd0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    acd0:	b510      	push	{r4, lr}
    acd2:	4c07      	ldr	r4, [pc, #28]	; (acf0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    acd4:	68a0      	ldr	r0, [r4, #8]
    acd6:	f005 f98b 	bl	fff0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    acda:	68e0      	ldr	r0, [r4, #12]
    acdc:	f005 f988 	bl	fff0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    ace0:	f002 fd29 	bl	d736 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ace4:	f7fb fa40 	bl	6168 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ace8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    acec:	f7ff bdc8 	b.w	a880 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    acf0:	2000021c 	.word	0x2000021c

0000acf4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    acf4:	b500      	push	{lr}
    acf6:	4905      	ldr	r1, [pc, #20]	; (ad0c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    acf8:	4805      	ldr	r0, [pc, #20]	; (ad10 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    acfa:	f005 f95a 	bl	ffb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    acfe:	4804      	ldr	r0, [pc, #16]	; (ad10 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ad00:	4904      	ldr	r1, [pc, #16]	; (ad14 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    ad02:	1d00      	adds	r0, r0, #4
    ad04:	f85d eb04 	ldr.w	lr, [sp], #4
    ad08:	f005 b953 	b.w	ffb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ad0c:	2000022c 	.word	0x2000022c
    ad10:	20000220 	.word	0x20000220
    ad14:	20000234 	.word	0x20000234

0000ad18 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    ad18:	b500      	push	{lr}
    ad1a:	4908      	ldr	r1, [pc, #32]	; (ad3c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    ad1c:	4808      	ldr	r0, [pc, #32]	; (ad40 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ad1e:	f005 f948 	bl	ffb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ad22:	4807      	ldr	r0, [pc, #28]	; (ad40 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ad24:	4907      	ldr	r1, [pc, #28]	; (ad44 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    ad26:	1d00      	adds	r0, r0, #4
    ad28:	f005 f943 	bl	ffb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ad2c:	4804      	ldr	r0, [pc, #16]	; (ad40 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ad2e:	4906      	ldr	r1, [pc, #24]	; (ad48 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    ad30:	3008      	adds	r0, #8
    ad32:	f85d eb04 	ldr.w	lr, [sp], #4
    ad36:	f005 b93c 	b.w	ffb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    ad3a:	0000      	.short	0x0000
    ad3c:	20000244 	.word	0x20000244
    ad40:	20000220 	.word	0x20000220
    ad44:	2000024c 	.word	0x2000024c
    ad48:	2000023c 	.word	0x2000023c

0000ad4c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    ad4c:	4801      	ldr	r0, [pc, #4]	; (ad54 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    ad4e:	7800      	ldrb	r0, [r0, #0]
    ad50:	4770      	bx	lr
    ad52:	0000      	.short	0x0000
    ad54:	2000021c 	.word	0x2000021c
    ad58:	b510      	push	{r4, lr}
    ad5a:	f7fc f9a9 	bl	70b0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    ad5e:	f7fd f80f 	bl	7d80 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    ad62:	4803      	ldr	r0, [pc, #12]	; (ad70 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    ad64:	f7fc f98a 	bl	707c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    ad68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad6c:	f7fb be7e 	b.w	6a6c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    ad70:	20001811 	.word	0x20001811
    ad74:	4909      	ldr	r1, [pc, #36]	; (ad9c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    ad76:	b510      	push	{r4, lr}
    ad78:	2001      	movs	r0, #1
    ad7a:	7008      	strb	r0, [r1, #0]
    ad7c:	f7fc f9c8 	bl	7110 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    ad80:	f7fd fd20 	bl	87c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    ad84:	f002 fcc5 	bl	d712 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    ad88:	4805      	ldr	r0, [pc, #20]	; (ada0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    ad8a:	f7fa fc53 	bl	5634 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    ad8e:	2000      	movs	r0, #0
    ad90:	f7f9 fea8 	bl	4ae4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ad94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad98:	f7fb be70 	b.w	6a7c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    ad9c:	2000021c 	.word	0x2000021c
    ada0:	20001811 	.word	0x20001811

0000ada4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    ada4:	2101      	movs	r1, #1
    ada6:	4081      	lsls	r1, r0
    ada8:	4802      	ldr	r0, [pc, #8]	; (adb4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    adaa:	6802      	ldr	r2, [r0, #0]
    adac:	4311      	orrs	r1, r2
    adae:	6001      	str	r1, [r0, #0]
    adb0:	4770      	bx	lr
    adb2:	0000      	.short	0x0000
    adb4:	20000254 	.word	0x20000254

0000adb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    adb8:	4801      	ldr	r0, [pc, #4]	; (adc0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    adba:	6800      	ldr	r0, [r0, #0]
    adbc:	4770      	bx	lr
    adbe:	0000      	.short	0x0000
    adc0:	20000254 	.word	0x20000254

0000adc4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    adc4:	4803      	ldr	r0, [pc, #12]	; (add4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    adc6:	8800      	ldrh	r0, [r0, #0]
    adc8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    adcc:	0040      	lsls	r0, r0, #1
    adce:	1c40      	adds	r0, r0, #1
    add0:	4770      	bx	lr
    add2:	0000      	.short	0x0000
    add4:	20000254 	.word	0x20000254

0000add8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    add8:	b510      	push	{r4, lr}
    adda:	f7f9 f911 	bl	4000 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    adde:	2200      	movs	r2, #0
    ade0:	4b08      	ldr	r3, [pc, #32]	; (ae04 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    ade2:	4611      	mov	r1, r2
    ade4:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    ade8:	4284      	cmp	r4, r0
    adea:	d303      	bcc.n	adf4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    adec:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    adf0:	7882      	ldrb	r2, [r0, #2]
    adf2:	e003      	b.n	adfc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    adf4:	1c49      	adds	r1, r1, #1
    adf6:	b2c9      	uxtb	r1, r1
    adf8:	290c      	cmp	r1, #12
    adfa:	d3f3      	bcc.n	ade4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    adfc:	4802      	ldr	r0, [pc, #8]	; (ae08 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    adfe:	7002      	strb	r2, [r0, #0]
    ae00:	bd10      	pop	{r4, pc}
    ae02:	0000      	.short	0x0000
    ae04:	00010040 	.word	0x00010040
    ae08:	200002a3 	.word	0x200002a3

0000ae0c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    ae0c:	b570      	push	{r4, r5, r6, lr}
    ae0e:	4605      	mov	r5, r0
    ae10:	4616      	mov	r6, r2
    ae12:	460c      	mov	r4, r1
    ae14:	2002      	movs	r0, #2
    ae16:	f000 f9f9 	bl	b20c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ae1a:	4906      	ldr	r1, [pc, #24]	; (ae34 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    ae1c:	2001      	movs	r0, #1
    ae1e:	1ef6      	subs	r6, r6, #3
    ae20:	7008      	strb	r0, [r1, #0]
    ae22:	4805      	ldr	r0, [pc, #20]	; (ae38 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ae24:	6006      	str	r6, [r0, #0]
    ae26:	4804      	ldr	r0, [pc, #16]	; (ae38 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ae28:	3808      	subs	r0, #8
    ae2a:	6005      	str	r5, [r0, #0]
    ae2c:	1f00      	subs	r0, r0, #4
    ae2e:	6004      	str	r4, [r0, #0]
    ae30:	bd70      	pop	{r4, r5, r6, pc}
    ae32:	0000      	.short	0x0000
    ae34:	200002a4 	.word	0x200002a4
    ae38:	4000f510 	.word	0x4000f510

0000ae3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    ae3c:	b510      	push	{r4, lr}
    ae3e:	4c0c      	ldr	r4, [pc, #48]	; (ae70 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    ae40:	7820      	ldrb	r0, [r4, #0]
    ae42:	b180      	cbz	r0, ae66 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    ae44:	490b      	ldr	r1, [pc, #44]	; (ae74 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    ae46:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ae4a:	6008      	str	r0, [r1, #0]
    ae4c:	f000 f86a 	bl	af24 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    ae50:	2100      	movs	r1, #0
    ae52:	b120      	cbz	r0, ae5e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    ae54:	2001      	movs	r0, #1
    ae56:	7060      	strb	r0, [r4, #1]
    ae58:	4807      	ldr	r0, [pc, #28]	; (ae78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    ae5a:	6800      	ldr	r0, [r0, #0]
    ae5c:	e001      	b.n	ae62 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    ae5e:	7061      	strb	r1, [r4, #1]
    ae60:	2010      	movs	r0, #16
    ae62:	70a0      	strb	r0, [r4, #2]
    ae64:	7021      	strb	r1, [r4, #0]
    ae66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae6a:	2000      	movs	r0, #0
    ae6c:	f000 b9ce 	b.w	b20c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ae70:	200002a4 	.word	0x200002a4
    ae74:	4001f508 	.word	0x4001f508
    ae78:	4000f400 	.word	0x4000f400

0000ae7c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    ae7c:	b510      	push	{r4, lr}
    ae7e:	2002      	movs	r0, #2
    ae80:	f000 f9c4 	bl	b20c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ae84:	4904      	ldr	r1, [pc, #16]	; (ae98 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    ae86:	2001      	movs	r0, #1
    ae88:	7008      	strb	r0, [r1, #0]
    ae8a:	f000 f859 	bl	af40 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    ae8e:	4903      	ldr	r1, [pc, #12]	; (ae9c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    ae90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ae94:	6008      	str	r0, [r1, #0]
    ae96:	bd10      	pop	{r4, pc}
    ae98:	200002a4 	.word	0x200002a4
    ae9c:	4001f504 	.word	0x4001f504

0000aea0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    aea0:	4803      	ldr	r0, [pc, #12]	; (aeb0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    aea2:	2100      	movs	r1, #0
    aea4:	7001      	strb	r1, [r0, #0]
    aea6:	7041      	strb	r1, [r0, #1]
    aea8:	2110      	movs	r1, #16
    aeaa:	7081      	strb	r1, [r0, #2]
    aeac:	4770      	bx	lr
    aeae:	0000      	.short	0x0000
    aeb0:	200002a4 	.word	0x200002a4

0000aeb4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    aeb4:	4807      	ldr	r0, [pc, #28]	; (aed4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    aeb6:	b510      	push	{r4, lr}
    aeb8:	7801      	ldrb	r1, [r0, #0]
    aeba:	b141      	cbz	r1, aece <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    aebc:	f000 f832 	bl	af24 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    aec0:	b118      	cbz	r0, aeca <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    aec2:	4805      	ldr	r0, [pc, #20]	; (aed8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    aec4:	6800      	ldr	r0, [r0, #0]
    aec6:	b2c0      	uxtb	r0, r0
    aec8:	bd10      	pop	{r4, pc}
    aeca:	2010      	movs	r0, #16
    aecc:	bd10      	pop	{r4, pc}
    aece:	7880      	ldrb	r0, [r0, #2]
    aed0:	bd10      	pop	{r4, pc}
    aed2:	0000      	.short	0x0000
    aed4:	200002a4 	.word	0x200002a4
    aed8:	4000f400 	.word	0x4000f400

0000aedc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    aedc:	4808      	ldr	r0, [pc, #32]	; (af00 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    aede:	b510      	push	{r4, lr}
    aee0:	7801      	ldrb	r1, [r0, #0]
    aee2:	b159      	cbz	r1, aefc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    aee4:	4807      	ldr	r0, [pc, #28]	; (af04 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    aee6:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    aeea:	b128      	cbz	r0, aef8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    aeec:	f000 f80c 	bl	af08 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    aef0:	2800      	cmp	r0, #0
    aef2:	d000      	beq.n	aef6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    aef4:	2001      	movs	r0, #1
    aef6:	bd10      	pop	{r4, pc}
    aef8:	2002      	movs	r0, #2
    aefa:	bd10      	pop	{r4, pc}
    aefc:	7840      	ldrb	r0, [r0, #1]
    aefe:	bd10      	pop	{r4, pc}
    af00:	200002a4 	.word	0x200002a4
    af04:	4000f000 	.word	0x4000f000
    af08:	4805      	ldr	r0, [pc, #20]	; (af20 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    af0a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    af0e:	b111      	cbz	r1, af16 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    af10:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    af14:	b108      	cbz	r0, af1a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    af16:	2000      	movs	r0, #0
    af18:	4770      	bx	lr
    af1a:	2001      	movs	r0, #1
    af1c:	4770      	bx	lr
    af1e:	0000      	.short	0x0000
    af20:	4000f000 	.word	0x4000f000
    af24:	4805      	ldr	r0, [pc, #20]	; (af3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    af26:	b510      	push	{r4, lr}
    af28:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    af2c:	b120      	cbz	r0, af38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    af2e:	f7ff ffeb 	bl	af08 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    af32:	b108      	cbz	r0, af38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    af34:	2001      	movs	r0, #1
    af36:	bd10      	pop	{r4, pc}
    af38:	2000      	movs	r0, #0
    af3a:	bd10      	pop	{r4, pc}
    af3c:	4000f000 	.word	0x4000f000
    af40:	4804      	ldr	r0, [pc, #16]	; (af54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    af42:	2100      	movs	r1, #0
    af44:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    af48:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    af4c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    af50:	4770      	bx	lr
    af52:	0000      	.short	0x0000
    af54:	4000f000 	.word	0x4000f000

0000af58 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    af58:	4a08      	ldr	r2, [pc, #32]	; (af7c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    af5a:	b510      	push	{r4, lr}
    af5c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    af60:	4907      	ldr	r1, [pc, #28]	; (af80 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    af62:	4610      	mov	r0, r2
    af64:	f7f9 fac0 	bl	44e8 <mpsl_fem_lna_configuration_set>
    af68:	2800      	cmp	r0, #0
    af6a:	d005      	beq.n	af78 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    af6c:	1c40      	adds	r0, r0, #1
    af6e:	d003      	beq.n	af78 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    af70:	217d      	movs	r1, #125	; 0x7d
    af72:	2040      	movs	r0, #64	; 0x40
    af74:	f7f9 fbe8 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af78:	bd10      	pop	{r4, pc}
    af7a:	0000      	.short	0x0000
    af7c:	20000258 	.word	0x20000258
    af80:	0000afb0 	.word	0x0000afb0

0000af84 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    af84:	4a08      	ldr	r2, [pc, #32]	; (afa8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    af86:	b510      	push	{r4, lr}
    af88:	e9c2 0102 	strd	r0, r1, [r2, #8]
    af8c:	4907      	ldr	r1, [pc, #28]	; (afac <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    af8e:	4610      	mov	r0, r2
    af90:	f7f9 fab6 	bl	4500 <mpsl_fem_pa_configuration_set>
    af94:	2800      	cmp	r0, #0
    af96:	d005      	beq.n	afa4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    af98:	1c40      	adds	r0, r0, #1
    af9a:	d003      	beq.n	afa4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    af9c:	2172      	movs	r1, #114	; 0x72
    af9e:	2040      	movs	r0, #64	; 0x40
    afa0:	f7f9 fbd2 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afa4:	bd10      	pop	{r4, pc}
    afa6:	0000      	.short	0x0000
    afa8:	20000258 	.word	0x20000258
    afac:	0000afb0 	.word	0x0000afb0
    afb0:	00000001 	.word	0x00000001
    afb4:	40001110 	.word	0x40001110
	...

0000afc8 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    afc8:	4a07      	ldr	r2, [pc, #28]	; (afe8 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    afca:	b510      	push	{r4, lr}
    afcc:	7853      	ldrb	r3, [r2, #1]
    afce:	b133      	cbz	r3, afde <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    afd0:	4b06      	ldr	r3, [pc, #24]	; (afec <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    afd2:	6019      	str	r1, [r3, #0]
    afd4:	1d19      	adds	r1, r3, #4
    afd6:	6008      	str	r0, [r1, #0]
    afd8:	2001      	movs	r0, #1
    afda:	7090      	strb	r0, [r2, #2]
    afdc:	bd10      	pop	{r4, pc}
    afde:	21ba      	movs	r1, #186	; 0xba
    afe0:	203c      	movs	r0, #60	; 0x3c
    afe2:	f7f9 fbb1 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afe6:	0000      	.short	0x0000
    afe8:	200002a7 	.word	0x200002a7
    afec:	4000f50c 	.word	0x4000f50c

0000aff0 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    aff0:	4809      	ldr	r0, [pc, #36]	; (b018 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    aff2:	b510      	push	{r4, lr}
    aff4:	7801      	ldrb	r1, [r0, #0]
    aff6:	b151      	cbz	r1, b00e <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    aff8:	7880      	ldrb	r0, [r0, #2]
    affa:	b140      	cbz	r0, b00e <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    affc:	4907      	ldr	r1, [pc, #28]	; (b01c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    affe:	2000      	movs	r0, #0
    b000:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b004:	4906      	ldr	r1, [pc, #24]	; (b020 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b006:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b00a:	6008      	str	r0, [r1, #0]
    b00c:	bd10      	pop	{r4, pc}
    b00e:	21e1      	movs	r1, #225	; 0xe1
    b010:	203c      	movs	r0, #60	; 0x3c
    b012:	f7f9 fb99 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b016:	0000      	.short	0x0000
    b018:	200002a7 	.word	0x200002a7
    b01c:	4000f000 	.word	0x4000f000
    b020:	4001f504 	.word	0x4001f504

0000b024 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b024:	b570      	push	{r4, r5, r6, lr}
    b026:	4c0b      	ldr	r4, [pc, #44]	; (b054 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b028:	2500      	movs	r5, #0
    b02a:	7820      	ldrb	r0, [r4, #0]
    b02c:	b158      	cbz	r0, b046 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b02e:	f000 f8e5 	bl	b1fc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b032:	4809      	ldr	r0, [pc, #36]	; (b058 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b034:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b038:	b118      	cbz	r0, b042 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b03a:	4808      	ldr	r0, [pc, #32]	; (b05c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b03c:	6800      	ldr	r0, [r0, #0]
    b03e:	70e0      	strb	r0, [r4, #3]
    b040:	e000      	b.n	b044 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b042:	70e5      	strb	r5, [r4, #3]
    b044:	7025      	strb	r5, [r4, #0]
    b046:	2000      	movs	r0, #0
    b048:	f000 f8e0 	bl	b20c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b04c:	7065      	strb	r5, [r4, #1]
    b04e:	70a5      	strb	r5, [r4, #2]
    b050:	bd70      	pop	{r4, r5, r6, pc}
    b052:	0000      	.short	0x0000
    b054:	200002a7 	.word	0x200002a7
    b058:	4000f000 	.word	0x4000f000
    b05c:	4000f400 	.word	0x4000f400

0000b060 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b060:	480d      	ldr	r0, [pc, #52]	; (b098 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b062:	b510      	push	{r4, lr}
    b064:	7801      	ldrb	r1, [r0, #0]
    b066:	b191      	cbz	r1, b08e <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b068:	7880      	ldrb	r0, [r0, #2]
    b06a:	b180      	cbz	r0, b08e <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b06c:	490b      	ldr	r1, [pc, #44]	; (b09c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b06e:	2000      	movs	r0, #0
    b070:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b074:	4a0a      	ldr	r2, [pc, #40]	; (b0a0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b076:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b07a:	6010      	str	r0, [r2, #0]
    b07c:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b080:	2a01      	cmp	r2, #1
    b082:	d103      	bne.n	b08c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b084:	604a      	str	r2, [r1, #4]
    b086:	4906      	ldr	r1, [pc, #24]	; (b0a0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b088:	1d09      	adds	r1, r1, #4
    b08a:	6008      	str	r0, [r1, #0]
    b08c:	bd10      	pop	{r4, pc}
    b08e:	21d1      	movs	r1, #209	; 0xd1
    b090:	203c      	movs	r0, #60	; 0x3c
    b092:	f7f9 fb59 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b096:	0000      	.short	0x0000
    b098:	200002a7 	.word	0x200002a7
    b09c:	4000f000 	.word	0x4000f000
    b0a0:	4001f504 	.word	0x4001f504

0000b0a4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b0a4:	4803      	ldr	r0, [pc, #12]	; (b0b4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b0a6:	2100      	movs	r1, #0
    b0a8:	7001      	strb	r1, [r0, #0]
    b0aa:	7041      	strb	r1, [r0, #1]
    b0ac:	7081      	strb	r1, [r0, #2]
    b0ae:	70c1      	strb	r1, [r0, #3]
    b0b0:	4770      	bx	lr
    b0b2:	0000      	.short	0x0000
    b0b4:	200002a7 	.word	0x200002a7

0000b0b8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0bc:	4605      	mov	r5, r0
    b0be:	461c      	mov	r4, r3
    b0c0:	4690      	mov	r8, r2
    b0c2:	460f      	mov	r7, r1
    b0c4:	2001      	movs	r0, #1
    b0c6:	f000 f8a1 	bl	b20c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b0ca:	4e12      	ldr	r6, [pc, #72]	; (b114 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b0cc:	4812      	ldr	r0, [pc, #72]	; (b118 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b0ce:	7134      	strb	r4, [r6, #4]
    b0d0:	6007      	str	r7, [r0, #0]
    b0d2:	4911      	ldr	r1, [pc, #68]	; (b118 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b0d4:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b0d8:	1f09      	subs	r1, r1, #4
    b0da:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b0de:	6008      	str	r0, [r1, #0]
    b0e0:	f001 f940 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b0e4:	b938      	cbnz	r0, b0f6 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b0e6:	480c      	ldr	r0, [pc, #48]	; (b118 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b0e8:	3010      	adds	r0, #16
    b0ea:	6801      	ldr	r1, [r0, #0]
    b0ec:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b0f0:	ea41 0108 	orr.w	r1, r1, r8
    b0f4:	6001      	str	r1, [r0, #0]
    b0f6:	f000 f881 	bl	b1fc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b0fa:	b93d      	cbnz	r5, b10c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b0fc:	4808      	ldr	r0, [pc, #32]	; (b120 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b0fe:	4a07      	ldr	r2, [pc, #28]	; (b11c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b100:	4906      	ldr	r1, [pc, #24]	; (b11c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b102:	3afc      	subs	r2, #252	; 0xfc
    b104:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b108:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b10c:	2001      	movs	r0, #1
    b10e:	7070      	strb	r0, [r6, #1]
    b110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b114:	200002a7 	.word	0x200002a7
    b118:	4000f508 	.word	0x4000f508
    b11c:	4000f100 	.word	0x4000f100
    b120:	4001f088 	.word	0x4001f088

0000b124 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b124:	4808      	ldr	r0, [pc, #32]	; (b148 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b126:	b510      	push	{r4, lr}
    b128:	7841      	ldrb	r1, [r0, #1]
    b12a:	b149      	cbz	r1, b140 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b12c:	2101      	movs	r1, #1
    b12e:	7001      	strb	r1, [r0, #0]
    b130:	4806      	ldr	r0, [pc, #24]	; (b14c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b132:	2200      	movs	r2, #0
    b134:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b138:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b13c:	6001      	str	r1, [r0, #0]
    b13e:	bd10      	pop	{r4, pc}
    b140:	21c5      	movs	r1, #197	; 0xc5
    b142:	203c      	movs	r0, #60	; 0x3c
    b144:	f7f9 fb00 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b148:	200002a7 	.word	0x200002a7
    b14c:	4000f000 	.word	0x4000f000

0000b150 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b150:	4806      	ldr	r0, [pc, #24]	; (b16c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b152:	7801      	ldrb	r1, [r0, #0]
    b154:	b141      	cbz	r1, b168 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b156:	4806      	ldr	r0, [pc, #24]	; (b170 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b158:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b15c:	2800      	cmp	r0, #0
    b15e:	d002      	beq.n	b166 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b160:	4804      	ldr	r0, [pc, #16]	; (b174 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b162:	6800      	ldr	r0, [r0, #0]
    b164:	b2c0      	uxtb	r0, r0
    b166:	4770      	bx	lr
    b168:	78c0      	ldrb	r0, [r0, #3]
    b16a:	4770      	bx	lr
    b16c:	200002a7 	.word	0x200002a7
    b170:	4000f000 	.word	0x4000f000
    b174:	4000f400 	.word	0x4000f400

0000b178 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b178:	4901      	ldr	r1, [pc, #4]	; (b180 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b17a:	2001      	movs	r0, #1
    b17c:	6088      	str	r0, [r1, #8]
    b17e:	4770      	bx	lr
    b180:	4000f000 	.word	0x4000f000

0000b184 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b188:	2800      	cmp	r0, #0
    b18a:	d02e      	beq.n	b1ea <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b18c:	4818      	ldr	r0, [pc, #96]	; (b1f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b18e:	7800      	ldrb	r0, [r0, #0]
    b190:	b1b0      	cbz	r0, b1c0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b192:	4d18      	ldr	r5, [pc, #96]	; (b1f4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b194:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b198:	2800      	cmp	r0, #0
    b19a:	d126      	bne.n	b1ea <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b19c:	2702      	movs	r7, #2
    b19e:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b1a2:	4c15      	ldr	r4, [pc, #84]	; (b1f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b1a4:	6820      	ldr	r0, [r4, #0]
    b1a6:	43c0      	mvns	r0, r0
    b1a8:	f340 1600 	sbfx	r6, r0, #4, #1
    b1ac:	6820      	ldr	r0, [r4, #0]
    b1ae:	f040 0010 	orr.w	r0, r0, #16
    b1b2:	6020      	str	r0, [r4, #0]
    b1b4:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b1b8:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b1bc:	1c76      	adds	r6, r6, #1
    b1be:	e009      	b.n	b1d4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b1c0:	f240 1153 	movw	r1, #339	; 0x153
    b1c4:	203c      	movs	r0, #60	; 0x3c
    b1c6:	f7f9 fabf 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1ca:	bf00      	nop
    b1cc:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b1d0:	f7f9 f934 	bl	443c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b1d4:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b1d8:	2800      	cmp	r0, #0
    b1da:	d0f7      	beq.n	b1cc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b1dc:	b91e      	cbnz	r6, b1e6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b1de:	6820      	ldr	r0, [r4, #0]
    b1e0:	f020 0010 	bic.w	r0, r0, #16
    b1e4:	6020      	str	r0, [r4, #0]
    b1e6:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b1ee:	0000      	.short	0x0000
    b1f0:	200002a7 	.word	0x200002a7
    b1f4:	4000f000 	.word	0x4000f000
    b1f8:	e000ed10 	.word	0xe000ed10
    b1fc:	4902      	ldr	r1, [pc, #8]	; (b208 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b1fe:	4801      	ldr	r0, [pc, #4]	; (b204 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b200:	6008      	str	r0, [r1, #0]
    b202:	4770      	bx	lr
    b204:	02020000 	.word	0x02020000
    b208:	4001f508 	.word	0x4001f508

0000b20c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b20c:	b510      	push	{r4, lr}
    b20e:	4604      	mov	r4, r0
    b210:	f000 f822 	bl	b258 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b214:	2c00      	cmp	r4, #0
    b216:	d017      	beq.n	b248 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b218:	4a0c      	ldr	r2, [pc, #48]	; (b24c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b21a:	480c      	ldr	r0, [pc, #48]	; (b24c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b21c:	490c      	ldr	r1, [pc, #48]	; (b250 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b21e:	3214      	adds	r2, #20
    b220:	4b0c      	ldr	r3, [pc, #48]	; (b254 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b222:	2c01      	cmp	r4, #1
    b224:	d005      	beq.n	b232 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b226:	2c02      	cmp	r4, #2
    b228:	d008      	beq.n	b23c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b22a:	2183      	movs	r1, #131	; 0x83
    b22c:	203d      	movs	r0, #61	; 0x3d
    b22e:	f7f9 fa8b 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b232:	2402      	movs	r4, #2
    b234:	6004      	str	r4, [r0, #0]
    b236:	6011      	str	r1, [r2, #0]
    b238:	0620      	lsls	r0, r4, #24
    b23a:	e004      	b.n	b246 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b23c:	2403      	movs	r4, #3
    b23e:	6004      	str	r4, [r0, #0]
    b240:	6011      	str	r1, [r2, #0]
    b242:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b246:	6018      	str	r0, [r3, #0]
    b248:	bd10      	pop	{r4, pc}
    b24a:	0000      	.short	0x0000
    b24c:	4000f500 	.word	0x4000f500
    b250:	20001913 	.word	0x20001913
    b254:	4001f504 	.word	0x4001f504
    b258:	4804      	ldr	r0, [pc, #16]	; (b26c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b25a:	2100      	movs	r1, #0
    b25c:	6001      	str	r1, [r0, #0]
    b25e:	6001      	str	r1, [r0, #0]
    b260:	4903      	ldr	r1, [pc, #12]	; (b270 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b262:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b266:	6008      	str	r0, [r1, #0]
    b268:	4770      	bx	lr
    b26a:	0000      	.short	0x0000
    b26c:	4000f500 	.word	0x4000f500
    b270:	4001f508 	.word	0x4001f508

0000b274 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b274:	4805      	ldr	r0, [pc, #20]	; (b28c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b276:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b27a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b27e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b282:	2100      	movs	r1, #0
    b284:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b288:	4770      	bx	lr
    b28a:	0000      	.short	0x0000
    b28c:	40001000 	.word	0x40001000

0000b290 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b290:	4904      	ldr	r1, [pc, #16]	; (b2a4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b292:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b296:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b29a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b29e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b2a2:	4770      	bx	lr
    b2a4:	40001000 	.word	0x40001000

0000b2a8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b2a8:	4801      	ldr	r0, [pc, #4]	; (b2b0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b2aa:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b2ae:	4770      	bx	lr
    b2b0:	200013cc 	.word	0x200013cc

0000b2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b2b6:	4c23      	ldr	r4, [pc, #140]	; (b344 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    b2b8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b2bc:	f010 0f10 	tst.w	r0, #16
    b2c0:	d001      	beq.n	b2c6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b2c2:	2701      	movs	r7, #1
    b2c4:	e000      	b.n	b2c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b2c6:	2700      	movs	r7, #0
    b2c8:	2010      	movs	r0, #16
    b2ca:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b2ce:	2002      	movs	r0, #2
    b2d0:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b2d4:	481c      	ldr	r0, [pc, #112]	; (b348 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b2d6:	2500      	movs	r5, #0
    b2d8:	491d      	ldr	r1, [pc, #116]	; (b350 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b2da:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b2de:	481b      	ldr	r0, [pc, #108]	; (b34c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b2e0:	6008      	str	r0, [r1, #0]
    b2e2:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b2e6:	f44f 7688 	mov.w	r6, #272	; 0x110
    b2ea:	f010 0fff 	tst.w	r0, #255	; 0xff
    b2ee:	d018      	beq.n	b322 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b2f0:	20ff      	movs	r0, #255	; 0xff
    b2f2:	f88d 0000 	strb.w	r0, [sp]
    b2f6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b2fa:	2001      	movs	r0, #1
    b2fc:	6120      	str	r0, [r4, #16]
    b2fe:	e004      	b.n	b30a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    b300:	f89d 0000 	ldrb.w	r0, [sp]
    b304:	1e40      	subs	r0, r0, #1
    b306:	f88d 0000 	strb.w	r0, [sp]
    b30a:	f89d 0000 	ldrb.w	r0, [sp]
    b30e:	b128      	cbz	r0, b31c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    b310:	4631      	mov	r1, r6
    b312:	4620      	mov	r0, r4
    b314:	f004 ff63 	bl	101de <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b318:	2800      	cmp	r0, #0
    b31a:	d0f1      	beq.n	b300 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    b31c:	f89d 0000 	ldrb.w	r0, [sp]
    b320:	b158      	cbz	r0, b33a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    b322:	f000 fcdb 	bl	bcdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b326:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b32a:	f000 fe57 	bl	bfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b32e:	2f00      	cmp	r7, #0
    b330:	d002      	beq.n	b338 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    b332:	2010      	movs	r0, #16
    b334:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b33a:	f240 718f 	movw	r1, #1935	; 0x78f
    b33e:	203e      	movs	r0, #62	; 0x3e
    b340:	f7f9 fa02 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b344:	40001000 	.word	0x40001000
    b348:	200013cc 	.word	0x200013cc
    b34c:	0c0e0000 	.word	0x0c0e0000
    b350:	4001f508 	.word	0x4001f508

0000b354 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b358:	4d20      	ldr	r5, [pc, #128]	; (b3dc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b35a:	4607      	mov	r7, r0
    b35c:	4688      	mov	r8, r1
    b35e:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b362:	07c1      	lsls	r1, r0, #31
    b364:	d018      	beq.n	b398 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b366:	4a1e      	ldr	r2, [pc, #120]	; (b3e0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b368:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b36c:	6011      	str	r1, [r2, #0]
    b36e:	4c1d      	ldr	r4, [pc, #116]	; (b3e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b370:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    b374:	f041 0101 	orr.w	r1, r1, #1
    b378:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b37c:	f040 0002 	orr.w	r0, r0, #2
    b380:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b384:	4640      	mov	r0, r8
    b386:	f000 fe8d 	bl	c0a4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b38a:	f000 fc45 	bl	bc18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b38e:	2601      	movs	r6, #1
    b390:	b13f      	cbz	r7, b3a2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b392:	2f01      	cmp	r7, #1
    b394:	d00e      	beq.n	b3b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b396:	e016      	b.n	b3c6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b398:	f240 611a 	movw	r1, #1562	; 0x61a
    b39c:	203e      	movs	r0, #62	; 0x3e
    b39e:	f7f9 f9d3 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3a2:	4640      	mov	r0, r8
    b3a4:	f000 fc68 	bl	bc78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b3a8:	4640      	mov	r0, r8
    b3aa:	f000 fc19 	bl	bbe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b3ae:	726e      	strb	r6, [r5, #9]
    b3b0:	6026      	str	r6, [r4, #0]
    b3b2:	e008      	b.n	b3c6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b3b4:	f000 fc88 	bl	bcc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b3b8:	f000 fdd6 	bl	bf68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b3bc:	2002      	movs	r0, #2
    b3be:	7268      	strb	r0, [r5, #9]
    b3c0:	f000 fcfa 	bl	bdb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b3c4:	6066      	str	r6, [r4, #4]
    b3c6:	4808      	ldr	r0, [pc, #32]	; (b3e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b3c8:	64c6      	str	r6, [r0, #76]	; 0x4c
    b3ca:	4807      	ldr	r0, [pc, #28]	; (b3e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b3cc:	300c      	adds	r0, #12
    b3ce:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b3d2:	4638      	mov	r0, r7
    b3d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b3d8:	f004 bee9 	b.w	101ae <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b3dc:	200013cc 	.word	0x200013cc
    b3e0:	4001f504 	.word	0x4001f504
    b3e4:	40001000 	.word	0x40001000
    b3e8:	40008000 	.word	0x40008000

0000b3ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b3f0:	4d35      	ldr	r5, [pc, #212]	; (b4c8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b3f2:	4606      	mov	r6, r0
    b3f4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b3f8:	4689      	mov	r9, r1
    b3fa:	6028      	str	r0, [r5, #0]
    b3fc:	4c33      	ldr	r4, [pc, #204]	; (b4cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b3fe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b402:	f040 0002 	orr.w	r0, r0, #2
    b406:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b40a:	4608      	mov	r0, r1
    b40c:	f000 fe4a 	bl	c0a4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b410:	f000 fc02 	bl	bc18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b414:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b4d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b418:	2700      	movs	r7, #0
    b41a:	b116      	cbz	r6, b422 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b41c:	2e01      	cmp	r6, #1
    b41e:	d027      	beq.n	b470 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b420:	e03f      	b.n	b4a2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b422:	4648      	mov	r0, r9
    b424:	f000 fc28 	bl	bc78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b428:	79e0      	ldrb	r0, [r4, #7]
    b42a:	2801      	cmp	r0, #1
    b42c:	d105      	bne.n	b43a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b42e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b432:	f041 0108 	orr.w	r1, r1, #8
    b436:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b43a:	4648      	mov	r0, r9
    b43c:	f000 fbd0 	bl	bbe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b440:	2001      	movs	r0, #1
    b442:	7260      	strb	r0, [r4, #9]
    b444:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b446:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b44a:	62a0      	str	r0, [r4, #40]	; 0x28
    b44c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b450:	6028      	str	r0, [r5, #0]
    b452:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b456:	f1b9 0f02 	cmp.w	r9, #2
    b45a:	d007      	beq.n	b46c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b45c:	f640 0034 	movw	r0, #2100	; 0x834
    b460:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b464:	4410      	add	r0, r2
    b466:	fbb0 f7f1 	udiv	r7, r0, r1
    b46a:	e01a      	b.n	b4a2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b46c:	4608      	mov	r0, r1
    b46e:	e7f7      	b.n	b460 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b470:	f000 fc2a 	bl	bcc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b474:	f000 fd78 	bl	bf68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b478:	79e0      	ldrb	r0, [r4, #7]
    b47a:	2801      	cmp	r0, #1
    b47c:	d105      	bne.n	b48a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b47e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b482:	f041 0104 	orr.w	r1, r1, #4
    b486:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b48a:	2002      	movs	r0, #2
    b48c:	7260      	strb	r0, [r4, #9]
    b48e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b490:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b494:	62a0      	str	r0, [r4, #40]	; 0x28
    b496:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b49a:	6028      	str	r0, [r5, #0]
    b49c:	2729      	movs	r7, #41	; 0x29
    b49e:	f000 fc8b 	bl	bdb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b4a2:	f000 fc75 	bl	bd90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    b4a6:	f000 fe37 	bl	c118 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b4aa:	6800      	ldr	r0, [r0, #0]
    b4ac:	2801      	cmp	r0, #1
    b4ae:	d006      	beq.n	b4be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b4b0:	2100      	movs	r1, #0
    b4b2:	4630      	mov	r0, r6
    b4b4:	f004 fe7b 	bl	101ae <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b4b8:	4638      	mov	r0, r7
    b4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4be:	f7ff fef9 	bl	b2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b4c2:	2000      	movs	r0, #0
    b4c4:	e7f9      	b.n	b4ba <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b4c6:	0000      	.short	0x0000
    b4c8:	4001f504 	.word	0x4001f504
    b4cc:	200013cc 	.word	0x200013cc
    b4d0:	40001000 	.word	0x40001000

0000b4d4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    b4d4:	4a02      	ldr	r2, [pc, #8]	; (b4e0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    b4d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    b4d8:	6003      	str	r3, [r0, #0]
    b4da:	6b50      	ldr	r0, [r2, #52]	; 0x34
    b4dc:	6008      	str	r0, [r1, #0]
    b4de:	4770      	bx	lr
    b4e0:	200013cc 	.word	0x200013cc

0000b4e4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b4e4:	b510      	push	{r4, lr}
    b4e6:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b4e8:	4901      	ldr	r1, [pc, #4]	; (b4f0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b4ea:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b4ee:	bd10      	pop	{r4, pc}
    b4f0:	200013bc 	.word	0x200013bc

0000b4f4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b4f4:	490f      	ldr	r1, [pc, #60]	; (b534 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    b4f6:	b510      	push	{r4, lr}
    b4f8:	69ca      	ldr	r2, [r1, #28]
    b4fa:	4282      	cmp	r2, r0
    b4fc:	d302      	bcc.n	b504 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    b4fe:	f640 010a 	movw	r1, #2058	; 0x80a
    b502:	e00b      	b.n	b51c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    b504:	2201      	movs	r2, #1
    b506:	730a      	strb	r2, [r1, #12]
    b508:	6108      	str	r0, [r1, #16]
    b50a:	490b      	ldr	r1, [pc, #44]	; (b538 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    b50c:	644a      	str	r2, [r1, #68]	; 0x44
    b50e:	1d0a      	adds	r2, r1, #4
    b510:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    b514:	4283      	cmp	r3, r0
    b516:	d304      	bcc.n	b522 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    b518:	f640 0113 	movw	r1, #2067	; 0x813
    b51c:	203e      	movs	r0, #62	; 0x3e
    b51e:	f7f9 f913 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b522:	2300      	movs	r3, #0
    b524:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    b528:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b530:	f000 bd28 	b.w	bf84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    b534:	200013cc 	.word	0x200013cc
    b538:	40008000 	.word	0x40008000

0000b53c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b53c:	b570      	push	{r4, r5, r6, lr}
    b53e:	4c11      	ldr	r4, [pc, #68]	; (b584 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b540:	4606      	mov	r6, r0
    b542:	2002      	movs	r0, #2
    b544:	7320      	strb	r0, [r4, #12]
    b546:	2596      	movs	r5, #150	; 0x96
    b548:	f000 f86e 	bl	b628 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b54c:	4602      	mov	r2, r0
    b54e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b552:	f894 1020 	ldrb.w	r1, [r4, #32]
    b556:	2801      	cmp	r0, #1
    b558:	d00f      	beq.n	b57a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    b55a:	4628      	mov	r0, r5
    b55c:	f004 fe49 	bl	101f2 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b560:	6120      	str	r0, [r4, #16]
    b562:	4809      	ldr	r0, [pc, #36]	; (b588 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b564:	2100      	movs	r1, #0
    b566:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b56a:	6921      	ldr	r1, [r4, #16]
    b56c:	69e0      	ldr	r0, [r4, #28]
    b56e:	4408      	add	r0, r1
    b570:	4905      	ldr	r1, [pc, #20]	; (b588 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b572:	1d09      	adds	r1, r1, #4
    b574:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b578:	bd70      	pop	{r4, r5, r6, pc}
    b57a:	4633      	mov	r3, r6
    b57c:	4628      	mov	r0, r5
    b57e:	f004 fe54 	bl	1022a <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b582:	e7ed      	b.n	b560 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b584:	200013cc 	.word	0x200013cc
    b588:	40008000 	.word	0x40008000

0000b58c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    b58c:	b510      	push	{r4, lr}
    b58e:	f000 ff05 	bl	c39c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b592:	2800      	cmp	r0, #0
    b594:	d006      	beq.n	b5a4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    b596:	4804      	ldr	r0, [pc, #16]	; (b5a8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    b598:	6801      	ldr	r1, [r0, #0]
    b59a:	f021 0101 	bic.w	r1, r1, #1
    b59e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    b5a2:	6001      	str	r1, [r0, #0]
    b5a4:	bd10      	pop	{r4, pc}
    b5a6:	0000      	.short	0x0000
    b5a8:	40001774 	.word	0x40001774

0000b5ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5b0:	2238      	movs	r2, #56	; 0x38
    b5b2:	2100      	movs	r1, #0
    b5b4:	4813      	ldr	r0, [pc, #76]	; (b604 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b5b6:	f000 ffa1 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b5ba:	f000 fd0f 	bl	bfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b5be:	f000 fea6 	bl	c30e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b5c2:	4d11      	ldr	r5, [pc, #68]	; (b608 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b5c4:	4e10      	ldr	r6, [pc, #64]	; (b608 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b5c6:	2400      	movs	r4, #0
    b5c8:	4f0f      	ldr	r7, [pc, #60]	; (b608 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b5ca:	3508      	adds	r5, #8
    b5cc:	3610      	adds	r6, #16
    b5ce:	b928      	cbnz	r0, b5dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b5d0:	f000 feb4 	bl	c33c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b5d4:	b910      	cbnz	r0, b5dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b5d6:	f000 febb 	bl	c350 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b5da:	b108      	cbz	r0, b5e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b5dc:	2224      	movs	r2, #36	; 0x24
    b5de:	e006      	b.n	b5ee <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b5e0:	f000 fef6 	bl	c3d0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b5e4:	b910      	cbnz	r0, b5ec <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b5e6:	f000 fee9 	bl	c3bc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b5ea:	b140      	cbz	r0, b5fe <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b5ec:	2240      	movs	r2, #64	; 0x40
    b5ee:	21ff      	movs	r1, #255	; 0xff
    b5f0:	4638      	mov	r0, r7
    b5f2:	f000 ff83 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b5f6:	602c      	str	r4, [r5, #0]
    b5f8:	6034      	str	r4, [r6, #0]
    b5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5fe:	2238      	movs	r2, #56	; 0x38
    b600:	e7f5      	b.n	b5ee <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b602:	0000      	.short	0x0000
    b604:	200013cc 	.word	0x200013cc
    b608:	40000e00 	.word	0x40000e00

0000b60c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b60c:	4805      	ldr	r0, [pc, #20]	; (b624 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    b60e:	b510      	push	{r4, lr}
    b610:	69c0      	ldr	r0, [r0, #28]
    b612:	2800      	cmp	r0, #0
    b614:	d104      	bne.n	b620 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    b616:	f240 11fb 	movw	r1, #507	; 0x1fb
    b61a:	203e      	movs	r0, #62	; 0x3e
    b61c:	f7f9 f894 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b620:	bd10      	pop	{r4, pc}
    b622:	0000      	.short	0x0000
    b624:	200013cc 	.word	0x200013cc

0000b628 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b628:	4814      	ldr	r0, [pc, #80]	; (b67c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b62a:	b510      	push	{r4, lr}
    b62c:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    b630:	7a40      	ldrb	r0, [r0, #9]
    b632:	b141      	cbz	r1, b646 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b634:	2902      	cmp	r1, #2
    b636:	d00b      	beq.n	b650 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b638:	2802      	cmp	r0, #2
    b63a:	d009      	beq.n	b650 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b63c:	2901      	cmp	r1, #1
    b63e:	d00b      	beq.n	b658 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b640:	2801      	cmp	r0, #1
    b642:	d009      	beq.n	b658 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b644:	e016      	b.n	b674 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b646:	2800      	cmp	r0, #0
    b648:	d1f6      	bne.n	b638 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b64a:	f240 117d 	movw	r1, #381	; 0x17d
    b64e:	e00e      	b.n	b66e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    b650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b654:	f000 bc38 	b.w	bec8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b658:	4809      	ldr	r0, [pc, #36]	; (b680 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b65a:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    b65e:	f000 000f 	and.w	r0, r0, #15
    b662:	2803      	cmp	r0, #3
    b664:	d006      	beq.n	b674 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b666:	2804      	cmp	r0, #4
    b668:	d006      	beq.n	b678 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    b66a:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    b66e:	203e      	movs	r0, #62	; 0x3e
    b670:	f7f9 f86a 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b674:	2001      	movs	r0, #1
    b676:	bd10      	pop	{r4, pc}
    b678:	2002      	movs	r0, #2
    b67a:	bd10      	pop	{r4, pc}
    b67c:	200013cc 	.word	0x200013cc
    b680:	40001000 	.word	0x40001000

0000b684 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    b684:	4805      	ldr	r0, [pc, #20]	; (b69c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    b686:	b510      	push	{r4, lr}
    b688:	6980      	ldr	r0, [r0, #24]
    b68a:	2800      	cmp	r0, #0
    b68c:	d104      	bne.n	b698 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    b68e:	f240 11f5 	movw	r1, #501	; 0x1f5
    b692:	203e      	movs	r0, #62	; 0x3e
    b694:	f7f9 f858 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b698:	bd10      	pop	{r4, pc}
    b69a:	0000      	.short	0x0000
    b69c:	200013cc 	.word	0x200013cc

0000b6a0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b6a0:	b510      	push	{r4, lr}
    b6a2:	f000 fc7d 	bl	bfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b6a6:	f7ff fe05 	bl	b2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b6aa:	f004 fd16 	bl	100da <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b6ae:	480f      	ldr	r0, [pc, #60]	; (b6ec <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b6b0:	4a0f      	ldr	r2, [pc, #60]	; (b6f0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b6b2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b6b4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b6b8:	6011      	str	r1, [r2, #0]
    b6ba:	2400      	movs	r4, #0
    b6bc:	6284      	str	r4, [r0, #40]	; 0x28
    b6be:	7304      	strb	r4, [r0, #12]
    b6c0:	61c4      	str	r4, [r0, #28]
    b6c2:	6184      	str	r4, [r0, #24]
    b6c4:	f000 fc6c 	bl	bfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b6c8:	480a      	ldr	r0, [pc, #40]	; (b6f4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b6ca:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b6ce:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b6d2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b6d6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b6da:	2001      	movs	r0, #1
    b6dc:	f004 fd36 	bl	1014c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6e4:	2001      	movs	r0, #1
    b6e6:	f004 bd24 	b.w	10132 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b6ea:	0000      	.short	0x0000
    b6ec:	200013cc 	.word	0x200013cc
    b6f0:	4001f508 	.word	0x4001f508
    b6f4:	40008000 	.word	0x40008000

0000b6f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b6f8:	b570      	push	{r4, r5, r6, lr}
    b6fa:	2001      	movs	r0, #1
    b6fc:	f004 fd26 	bl	1014c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b700:	4c37      	ldr	r4, [pc, #220]	; (b7e0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b702:	2000      	movs	r0, #0
    b704:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b708:	2001      	movs	r0, #1
    b70a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b70e:	f000 fe35 	bl	c37c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b712:	4d34      	ldr	r5, [pc, #208]	; (b7e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b714:	b118      	cbz	r0, b71e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    b716:	6828      	ldr	r0, [r5, #0]
    b718:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b71c:	6028      	str	r0, [r5, #0]
    b71e:	f000 fe21 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b722:	b128      	cbz	r0, b730 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    b724:	6828      	ldr	r0, [r5, #0]
    b726:	4930      	ldr	r1, [pc, #192]	; (b7e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b728:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b72c:	4308      	orrs	r0, r1
    b72e:	6028      	str	r0, [r5, #0]
    b730:	f000 fe34 	bl	c39c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b734:	b138      	cbz	r0, b746 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    b736:	482b      	ldr	r0, [pc, #172]	; (b7e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b738:	1d00      	adds	r0, r0, #4
    b73a:	6801      	ldr	r1, [r0, #0]
    b73c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b740:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b744:	6001      	str	r1, [r0, #0]
    b746:	4927      	ldr	r1, [pc, #156]	; (b7e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b748:	4828      	ldr	r0, [pc, #160]	; (b7ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b74a:	313c      	adds	r1, #60	; 0x3c
    b74c:	6008      	str	r0, [r1, #0]
    b74e:	f7f8 fee3 	bl	4518 <mpsl_fem_device_config_254_apply_get>
    b752:	b140      	cbz	r0, b766 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    b754:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b758:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b75c:	1c41      	adds	r1, r0, #1
    b75e:	d002      	beq.n	b766 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    b760:	4920      	ldr	r1, [pc, #128]	; (b7e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b762:	3110      	adds	r1, #16
    b764:	6008      	str	r0, [r1, #0]
    b766:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b76a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b76c:	1c41      	adds	r1, r0, #1
    b76e:	d004      	beq.n	b77a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    b770:	491f      	ldr	r1, [pc, #124]	; (b7f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b772:	680a      	ldr	r2, [r1, #0]
    b774:	f360 4217 	bfi	r2, r0, #16, #8
    b778:	600a      	str	r2, [r1, #0]
    b77a:	f240 1103 	movw	r1, #259	; 0x103
    b77e:	f240 605b 	movw	r0, #1627	; 0x65b
    b782:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    b786:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    b78a:	2001      	movs	r0, #1
    b78c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    b790:	f000 fc88 	bl	c0a4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b794:	f240 1001 	movw	r0, #257	; 0x101
    b798:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    b79c:	2002      	movs	r0, #2
    b79e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b7a2:	4915      	ldr	r1, [pc, #84]	; (b7f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b7a4:	4813      	ldr	r0, [pc, #76]	; (b7f4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b7a6:	6008      	str	r0, [r1, #0]
    b7a8:	4914      	ldr	r1, [pc, #80]	; (b7fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b7aa:	2000      	movs	r0, #0
    b7ac:	4d14      	ldr	r5, [pc, #80]	; (b800 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b7ae:	8608      	strh	r0, [r1, #48]	; 0x30
    b7b0:	3110      	adds	r1, #16
    b7b2:	61c8      	str	r0, [r1, #28]
    b7b4:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    b7b8:	7028      	strb	r0, [r5, #0]
    b7ba:	2001      	movs	r0, #1
    b7bc:	f004 fcb9 	bl	10132 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b7c0:	2010      	movs	r0, #16
    b7c2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b7c6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b7ca:	2002      	movs	r0, #2
    b7cc:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    b7d0:	6868      	ldr	r0, [r5, #4]
    b7d2:	2800      	cmp	r0, #0
    b7d4:	d002      	beq.n	b7dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    b7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b7da:	4700      	bx	r0
    b7dc:	bd70      	pop	{r4, r5, r6, pc}
    b7de:	0000      	.short	0x0000
    b7e0:	40001000 	.word	0x40001000
    b7e4:	4000173c 	.word	0x4000173c
    b7e8:	80000096 	.word	0x80000096
    b7ec:	8900002c 	.word	0x8900002c
    b7f0:	4000158c 	.word	0x4000158c
    b7f4:	0c0e0000 	.word	0x0c0e0000
    b7f8:	4001f508 	.word	0x4001f508
    b7fc:	200013bc 	.word	0x200013bc
    b800:	20000270 	.word	0x20000270

0000b804 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b804:	4901      	ldr	r1, [pc, #4]	; (b80c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b806:	7508      	strb	r0, [r1, #20]
    b808:	4770      	bx	lr
    b80a:	0000      	.short	0x0000
    b80c:	200013cc 	.word	0x200013cc

0000b810 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b810:	4905      	ldr	r1, [pc, #20]	; (b828 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b812:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    b816:	4805      	ldr	r0, [pc, #20]	; (b82c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    b818:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    b81c:	f041 0101 	orr.w	r1, r1, #1
    b820:	7001      	strb	r1, [r0, #0]
    b822:	f000 ba7b 	b.w	bd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    b826:	0000      	.short	0x0000
    b828:	40001000 	.word	0x40001000
    b82c:	200013cc 	.word	0x200013cc

0000b830 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b834:	4e36      	ldr	r6, [pc, #216]	; (b910 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    b836:	4607      	mov	r7, r0
    b838:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b83c:	4689      	mov	r9, r1
    b83e:	4614      	mov	r4, r2
    b840:	6030      	str	r0, [r6, #0]
    b842:	4610      	mov	r0, r2
    b844:	f000 fc2e 	bl	c0a4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b848:	f000 f9e6 	bl	bc18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b84c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; b914 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    b850:	4d31      	ldr	r5, [pc, #196]	; (b918 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b852:	f04f 0801 	mov.w	r8, #1
    b856:	b127      	cbz	r7, b862 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    b858:	2f01      	cmp	r7, #1
    b85a:	d01d      	beq.n	b898 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    b85c:	f240 710f 	movw	r1, #1807	; 0x70f
    b860:	e04c      	b.n	b8fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    b862:	4620      	mov	r0, r4
    b864:	f000 fa08 	bl	bc78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b868:	4620      	mov	r0, r4
    b86a:	f000 f9b9 	bl	bbe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b86e:	2c02      	cmp	r4, #2
    b870:	d00f      	beq.n	b892 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    b872:	f640 0034 	movw	r0, #2100	; 0x834
    b876:	bf00      	nop
    b878:	f649 51f8 	movw	r1, #40440	; 0x9df8
    b87c:	4401      	add	r1, r0
    b87e:	4648      	mov	r0, r9
    b880:	f000 fbb4 	bl	bfec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    b884:	4604      	mov	r4, r0
    b886:	4650      	mov	r0, sl
    b888:	f000 fb9c 	bl	bfc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    b88c:	f885 8009 	strb.w	r8, [r5, #9]
    b890:	e014      	b.n	b8bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    b892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b896:	e7ef      	b.n	b878 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    b898:	f000 fa16 	bl	bcc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b89c:	f000 fb64 	bl	bf68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b8a0:	f000 fa8a 	bl	bdb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b8a4:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b8a8:	4648      	mov	r0, r9
    b8aa:	f000 fb9f 	bl	bfec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    b8ae:	4604      	mov	r4, r0
    b8b0:	4818      	ldr	r0, [pc, #96]	; (b914 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    b8b2:	1d00      	adds	r0, r0, #4
    b8b4:	f000 fb86 	bl	bfc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    b8b8:	2002      	movs	r0, #2
    b8ba:	7268      	strb	r0, [r5, #9]
    b8bc:	f8df 905c 	ldr.w	r9, [pc, #92]	; b91c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    b8c0:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    b8c4:	4917      	ldr	r1, [pc, #92]	; (b924 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    b8c6:	4816      	ldr	r0, [pc, #88]	; (b920 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    b8c8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b8cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    b8ce:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b8d2:	62a8      	str	r0, [r5, #40]	; 0x28
    b8d4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    b8d8:	6030      	str	r0, [r6, #0]
    b8da:	2010      	movs	r0, #16
    b8dc:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    b8e0:	03c0      	lsls	r0, r0, #15
    b8e2:	6030      	str	r0, [r6, #0]
    b8e4:	f000 fa54 	bl	bd90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    b8e8:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    b8ec:	480b      	ldr	r0, [pc, #44]	; (b91c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    b8ee:	300c      	adds	r0, #12
    b8f0:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b8f4:	42a0      	cmp	r0, r4
    b8f6:	d304      	bcc.n	b902 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    b8f8:	f240 7136 	movw	r1, #1846	; 0x736
    b8fc:	203e      	movs	r0, #62	; 0x3e
    b8fe:	f7f8 ff23 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b902:	4621      	mov	r1, r4
    b904:	4638      	mov	r0, r7
    b906:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b90a:	f004 bc50 	b.w	101ae <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b90e:	0000      	.short	0x0000
    b910:	4001f504 	.word	0x4001f504
    b914:	40001000 	.word	0x40001000
    b918:	200013cc 	.word	0x200013cc
    b91c:	40008000 	.word	0x40008000
    b920:	40008140 	.word	0x40008140
    b924:	4001f098 	.word	0x4001f098

0000b928 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b928:	4b0d      	ldr	r3, [pc, #52]	; (b960 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    b92a:	b510      	push	{r4, lr}
    b92c:	71d8      	strb	r0, [r3, #7]
    b92e:	729a      	strb	r2, [r3, #10]
    b930:	b151      	cbz	r1, b948 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    b932:	2002      	movs	r0, #2
    b934:	7218      	strb	r0, [r3, #8]
    b936:	2801      	cmp	r0, #1
    b938:	d008      	beq.n	b94c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    b93a:	2802      	cmp	r0, #2
    b93c:	d00f      	beq.n	b95e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b93e:	f640 1112 	movw	r1, #2322	; 0x912
    b942:	203e      	movs	r0, #62	; 0x3e
    b944:	f7f8 ff00 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b948:	2001      	movs	r0, #1
    b94a:	e7f3      	b.n	b934 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    b94c:	7a58      	ldrb	r0, [r3, #9]
    b94e:	2802      	cmp	r0, #2
    b950:	d105      	bne.n	b95e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b952:	f000 f9b9 	bl	bcc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b95a:	f000 bb05 	b.w	bf68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b95e:	bd10      	pop	{r4, pc}
    b960:	200013cc 	.word	0x200013cc

0000b964 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    b964:	4902      	ldr	r1, [pc, #8]	; (b970 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    b966:	2000      	movs	r0, #0
    b968:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b96c:	4770      	bx	lr
    b96e:	0000      	.short	0x0000
    b970:	40008000 	.word	0x40008000

0000b974 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b974:	b538      	push	{r3, r4, r5, lr}
    b976:	4c0b      	ldr	r4, [pc, #44]	; (b9a4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    b978:	4605      	mov	r5, r0
    b97a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    b97e:	4620      	mov	r0, r4
    b980:	f004 fc2d 	bl	101de <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b984:	2800      	cmp	r0, #0
    b986:	d00c      	beq.n	b9a2 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    b988:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    b98c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    b990:	4240      	negs	r0, r0
    b992:	7028      	strb	r0, [r5, #0]
    b994:	2000      	movs	r0, #0
    b996:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    b99a:	4803      	ldr	r0, [pc, #12]	; (b9a8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    b99c:	6800      	ldr	r0, [r0, #0]
    b99e:	9000      	str	r0, [sp, #0]
    b9a0:	2001      	movs	r0, #1
    b9a2:	bd38      	pop	{r3, r4, r5, pc}
    b9a4:	40001000 	.word	0x40001000
    b9a8:	4000111c 	.word	0x4000111c

0000b9ac <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b9ac:	4903      	ldr	r1, [pc, #12]	; (b9bc <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    b9ae:	0e02      	lsrs	r2, r0, #24
    b9b0:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    b9b4:	0200      	lsls	r0, r0, #8
    b9b6:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    b9ba:	4770      	bx	lr
    b9bc:	40001000 	.word	0x40001000

0000b9c0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b9c0:	6800      	ldr	r0, [r0, #0]
    b9c2:	4903      	ldr	r1, [pc, #12]	; (b9d0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    b9c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b9c8:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b9cc:	4770      	bx	lr
    b9ce:	0000      	.short	0x0000
    b9d0:	40001000 	.word	0x40001000

0000b9d4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    b9d4:	b510      	push	{r4, lr}
    b9d6:	f000 fb41 	bl	c05c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    b9da:	4807      	ldr	r0, [pc, #28]	; (b9f8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    b9dc:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b9e0:	b2c0      	uxtb	r0, r0
    b9e2:	2803      	cmp	r0, #3
    b9e4:	d001      	beq.n	b9ea <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    b9e6:	280b      	cmp	r0, #11
    b9e8:	d104      	bne.n	b9f4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    b9ea:	f44f 7121 	mov.w	r1, #644	; 0x284
    b9ee:	203e      	movs	r0, #62	; 0x3e
    b9f0:	f7f8 feaa 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9f4:	bd10      	pop	{r4, pc}
    b9f6:	0000      	.short	0x0000
    b9f8:	40001000 	.word	0x40001000

0000b9fc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b9fc:	4901      	ldr	r1, [pc, #4]	; (ba04 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b9fe:	7548      	strb	r0, [r1, #21]
    ba00:	4770      	bx	lr
    ba02:	0000      	.short	0x0000
    ba04:	200013cc 	.word	0x200013cc

0000ba08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    ba08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba0c:	4853      	ldr	r0, [pc, #332]	; (bb5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    ba0e:	f04f 0a01 	mov.w	sl, #1
    ba12:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    ba16:	4851      	ldr	r0, [pc, #324]	; (bb5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    ba18:	300c      	adds	r0, #12
    ba1a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    ba1e:	4850      	ldr	r0, [pc, #320]	; (bb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    ba20:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    ba24:	4c4f      	ldr	r4, [pc, #316]	; (bb64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    ba26:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    ba2a:	f000 f957 	bl	bcdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    ba2e:	494e      	ldr	r1, [pc, #312]	; (bb68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    ba30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ba32:	6008      	str	r0, [r1, #0]
    ba34:	f8df 9134 	ldr.w	r9, [pc, #308]	; bb6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    ba38:	2600      	movs	r6, #0
    ba3a:	62a6      	str	r6, [r4, #40]	; 0x28
    ba3c:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    ba40:	f240 121d 	movw	r2, #285	; 0x11d
    ba44:	4391      	bics	r1, r2
    ba46:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    ba4a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    ba4e:	f000 f9c5 	bl	bddc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    ba52:	4605      	mov	r5, r0
    ba54:	4841      	ldr	r0, [pc, #260]	; (bb5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    ba56:	3008      	adds	r0, #8
    ba58:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    ba5c:	61e0      	str	r0, [r4, #28]
    ba5e:	f7ff fde3 	bl	b628 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    ba62:	f884 0020 	strb.w	r0, [r4, #32]
    ba66:	7a60      	ldrb	r0, [r4, #9]
    ba68:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    ba6c:	61a6      	str	r6, [r4, #24]
    ba6e:	4e40      	ldr	r6, [pc, #256]	; (bb70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    ba70:	07a8      	lsls	r0, r5, #30
    ba72:	d502      	bpl.n	ba7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    ba74:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    ba78:	61a0      	str	r0, [r4, #24]
    ba7a:	0728      	lsls	r0, r5, #28
    ba7c:	d502      	bpl.n	ba84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    ba7e:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    ba82:	61a0      	str	r0, [r4, #24]
    ba84:	f04f 0800 	mov.w	r8, #0
    ba88:	4639      	mov	r1, r7
    ba8a:	4628      	mov	r0, r5
    ba8c:	f000 fa32 	bl	bef4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    ba90:	b918      	cbnz	r0, ba9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    ba92:	f8c9 a010 	str.w	sl, [r9, #16]
    ba96:	f04f 0801 	mov.w	r8, #1
    ba9a:	4f32      	ldr	r7, [pc, #200]	; (bb64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    ba9c:	07e8      	lsls	r0, r5, #31
    ba9e:	f1a7 0710 	sub.w	r7, r7, #16
    baa2:	d002      	beq.n	baaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    baa4:	6838      	ldr	r0, [r7, #0]
    baa6:	4780      	blx	r0
    baa8:	e031      	b.n	bb0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    baaa:	07a8      	lsls	r0, r5, #30
    baac:	d526      	bpl.n	bafc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    baae:	0768      	lsls	r0, r5, #29
    bab0:	d41e      	bmi.n	baf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bab2:	f000 fc73 	bl	c39c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bab6:	b9d8      	cbnz	r0, baf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bab8:	f000 fc60 	bl	c37c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    babc:	b9c0      	cbnz	r0, baf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    babe:	482d      	ldr	r0, [pc, #180]	; (bb74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bac0:	6800      	ldr	r0, [r0, #0]
    bac2:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    bac6:	f3c0 6100 	ubfx	r1, r0, #24, #1
    baca:	f000 030f 	and.w	r3, r0, #15
    bace:	f3c0 1203 	ubfx	r2, r0, #4, #4
    bad2:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bad6:	b159      	cbz	r1, baf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bad8:	b10b      	cbz	r3, bade <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bada:	b102      	cbz	r2, bade <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    badc:	b940      	cbnz	r0, baf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bade:	4825      	ldr	r0, [pc, #148]	; (bb74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bae0:	1d00      	adds	r0, r0, #4
    bae2:	6800      	ldr	r0, [r0, #0]
    bae4:	b120      	cbz	r0, baf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bae6:	f1bc 0f03 	cmp.w	ip, #3
    baea:	d201      	bcs.n	baf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    baec:	f045 0504 	orr.w	r5, r5, #4
    baf0:	f345 0080 	sbfx	r0, r5, #2, #1
    baf4:	4641      	mov	r1, r8
    baf6:	1c40      	adds	r0, r0, #1
    baf8:	687a      	ldr	r2, [r7, #4]
    bafa:	e007      	b.n	bb0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    bafc:	f015 0f28 	tst.w	r5, #40	; 0x28
    bb00:	d005      	beq.n	bb0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bb02:	f345 1140 	sbfx	r1, r5, #5, #1
    bb06:	68ba      	ldr	r2, [r7, #8]
    bb08:	4640      	mov	r0, r8
    bb0a:	1c49      	adds	r1, r1, #1
    bb0c:	4790      	blx	r2
    bb0e:	06e8      	lsls	r0, r5, #27
    bb10:	d501      	bpl.n	bb16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    bb12:	68f8      	ldr	r0, [r7, #12]
    bb14:	4780      	blx	r0
    bb16:	7a60      	ldrb	r0, [r4, #9]
    bb18:	2802      	cmp	r0, #2
    bb1a:	d11c      	bne.n	bb56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    bb1c:	7b20      	ldrb	r0, [r4, #12]
    bb1e:	2800      	cmp	r0, #0
    bb20:	d019      	beq.n	bb56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    bb22:	2802      	cmp	r0, #2
    bb24:	d004      	beq.n	bb30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    bb26:	2801      	cmp	r0, #1
    bb28:	d006      	beq.n	bb38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    bb2a:	f640 21e1 	movw	r1, #2785	; 0xae1
    bb2e:	e009      	b.n	bb44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    bb30:	6921      	ldr	r1, [r4, #16]
    bb32:	69e0      	ldr	r0, [r4, #28]
    bb34:	4408      	add	r0, r1
    bb36:	e008      	b.n	bb4a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    bb38:	69e1      	ldr	r1, [r4, #28]
    bb3a:	6920      	ldr	r0, [r4, #16]
    bb3c:	4288      	cmp	r0, r1
    bb3e:	d804      	bhi.n	bb4a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    bb40:	f640 21e2 	movw	r1, #2786	; 0xae2
    bb44:	203e      	movs	r0, #62	; 0x3e
    bb46:	f7f8 fdff 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb4a:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    bb4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb52:	f000 ba17 	b.w	bf84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    bb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb5a:	0000      	.short	0x0000
    bb5c:	40008000 	.word	0x40008000
    bb60:	4000b000 	.word	0x4000b000
    bb64:	200013cc 	.word	0x200013cc
    bb68:	4001f508 	.word	0x4001f508
    bb6c:	40001000 	.word	0x40001000
    bb70:	40008004 	.word	0x40008004
    bb74:	40001450 	.word	0x40001450

0000bb78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bb78:	b570      	push	{r4, r5, r6, lr}
    bb7a:	4b15      	ldr	r3, [pc, #84]	; (bbd0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    bb7c:	888c      	ldrh	r4, [r1, #4]
    bb7e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    bb82:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    bb86:	780c      	ldrb	r4, [r1, #0]
    bb88:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bb8c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bb90:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    bb94:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    bb98:	2101      	movs	r1, #1
    bb9a:	4081      	lsls	r1, r0
    bb9c:	430c      	orrs	r4, r1
    bb9e:	b2e4      	uxtb	r4, r4
    bba0:	b132      	cbz	r2, bbb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    bba2:	2a01      	cmp	r2, #1
    bba4:	d00a      	beq.n	bbbc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    bba6:	f240 41ac 	movw	r1, #1196	; 0x4ac
    bbaa:	203e      	movs	r0, #62	; 0x3e
    bbac:	f7f8 fdcc 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbb0:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bbb4:	f3c0 2007 	ubfx	r0, r0, #8, #8
    bbb8:	4388      	bics	r0, r1
    bbba:	e004      	b.n	bbc6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    bbbc:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bbc0:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    bbc4:	b2c0      	uxtb	r0, r0
    bbc6:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    bbca:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    bbce:	bd70      	pop	{r4, r5, r6, pc}
    bbd0:	40001000 	.word	0x40001000

0000bbd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bbd4:	4901      	ldr	r1, [pc, #4]	; (bbdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    bbd6:	2001      	movs	r0, #1
    bbd8:	7008      	strb	r0, [r1, #0]
    bbda:	4770      	bx	lr
    bbdc:	20000270 	.word	0x20000270
    bbe0:	b510      	push	{r4, lr}
    bbe2:	4604      	mov	r4, r0
    bbe4:	f000 fbda 	bl	c39c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bbe8:	2800      	cmp	r0, #0
    bbea:	d00e      	beq.n	bc0a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    bbec:	4a09      	ldr	r2, [pc, #36]	; (bc14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bbee:	6811      	ldr	r1, [r2, #0]
    bbf0:	0650      	lsls	r0, r2, #25
    bbf2:	2c02      	cmp	r4, #2
    bbf4:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bbf8:	d008      	beq.n	bc0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    bbfa:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bbfe:	bf00      	nop
    bc00:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bc04:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bc08:	6010      	str	r0, [r2, #0]
    bc0a:	bd10      	pop	{r4, pc}
    bc0c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bc10:	e7f6      	b.n	bc00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    bc12:	0000      	.short	0x0000
    bc14:	40001588 	.word	0x40001588
    bc18:	4815      	ldr	r0, [pc, #84]	; (bc70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    bc1a:	7d41      	ldrb	r1, [r0, #21]
    bc1c:	2925      	cmp	r1, #37	; 0x25
    bc1e:	d00a      	beq.n	bc36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    bc20:	2926      	cmp	r1, #38	; 0x26
    bc22:	d00b      	beq.n	bc3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    bc24:	2927      	cmp	r1, #39	; 0x27
    bc26:	d00c      	beq.n	bc42 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    bc28:	7d40      	ldrb	r0, [r0, #21]
    bc2a:	0040      	lsls	r0, r0, #1
    bc2c:	290a      	cmp	r1, #10
    bc2e:	d80b      	bhi.n	bc48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    bc30:	f600 1064 	addw	r0, r0, #2404	; 0x964
    bc34:	e00a      	b.n	bc4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    bc36:	f640 1062 	movw	r0, #2402	; 0x962
    bc3a:	e00f      	b.n	bc5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bc3c:	f640 107a 	movw	r0, #2426	; 0x97a
    bc40:	e00c      	b.n	bc5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bc42:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    bc46:	e009      	b.n	bc5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bc48:	f600 1066 	addw	r0, r0, #2406	; 0x966
    bc4c:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    bc50:	d204      	bcs.n	bc5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bc52:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    bc56:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bc5a:	e001      	b.n	bc60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    bc5c:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    bc60:	4a04      	ldr	r2, [pc, #16]	; (bc74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    bc62:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    bc66:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    bc6a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    bc6e:	4770      	bx	lr
    bc70:	200013cc 	.word	0x200013cc
    bc74:	40001000 	.word	0x40001000
    bc78:	4912      	ldr	r1, [pc, #72]	; (bcc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    bc7a:	b508      	push	{r3, lr}
    bc7c:	f991 2014 	ldrsb.w	r2, [r1, #20]
    bc80:	7d49      	ldrb	r1, [r1, #21]
    bc82:	2801      	cmp	r0, #1
    bc84:	d00a      	beq.n	bc9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    bc86:	2802      	cmp	r0, #2
    bc88:	d00a      	beq.n	bca0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    bc8a:	2804      	cmp	r0, #4
    bc8c:	d00a      	beq.n	bca4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    bc8e:	2808      	cmp	r0, #8
    bc90:	d00a      	beq.n	bca8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    bc92:	f240 31ed 	movw	r1, #1005	; 0x3ed
    bc96:	2006      	movs	r0, #6
    bc98:	f7f8 fd56 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc9c:	2000      	movs	r0, #0
    bc9e:	e004      	b.n	bcaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bca0:	2001      	movs	r0, #1
    bca2:	e002      	b.n	bcaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bca4:	2003      	movs	r0, #3
    bca6:	e000      	b.n	bcaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bca8:	2002      	movs	r0, #2
    bcaa:	466b      	mov	r3, sp
    bcac:	f7f5 f8d6 	bl	e5c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    bcb0:	b118      	cbz	r0, bcba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    bcb2:	f240 41de 	movw	r1, #1246	; 0x4de
    bcb6:	203e      	movs	r0, #62	; 0x3e
    bcb8:	e7ee      	b.n	bc98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    bcba:	f99d 0000 	ldrsb.w	r0, [sp]
    bcbe:	f000 f9eb 	bl	c098 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    bcc2:	bd08      	pop	{r3, pc}
    bcc4:	200013cc 	.word	0x200013cc
    bcc8:	4803      	ldr	r0, [pc, #12]	; (bcd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    bcca:	7a01      	ldrb	r1, [r0, #8]
    bccc:	2901      	cmp	r1, #1
    bcce:	d102      	bne.n	bcd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    bcd0:	7a80      	ldrb	r0, [r0, #10]
    bcd2:	f7ff bfd1 	b.w	bc78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bcd6:	4770      	bx	lr
    bcd8:	200013cc 	.word	0x200013cc
    bcdc:	4805      	ldr	r0, [pc, #20]	; (bcf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    bcde:	7a40      	ldrb	r0, [r0, #9]
    bce0:	2801      	cmp	r0, #1
    bce2:	d003      	beq.n	bcec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    bce4:	2802      	cmp	r0, #2
    bce6:	d103      	bne.n	bcf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    bce8:	f004 b9df 	b.w	100aa <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    bcec:	f004 b9e9 	b.w	100c2 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    bcf0:	4770      	bx	lr
    bcf2:	0000      	.short	0x0000
    bcf4:	200013cc 	.word	0x200013cc
    bcf8:	4807      	ldr	r0, [pc, #28]	; (bd18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    bcfa:	2100      	movs	r1, #0
    bcfc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bd00:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    bd04:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    bd08:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bd0c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    bd10:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    bd14:	4770      	bx	lr
    bd16:	0000      	.short	0x0000
    bd18:	40001000 	.word	0x40001000
    bd1c:	4818      	ldr	r0, [pc, #96]	; (bd80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    bd1e:	b510      	push	{r4, lr}
    bd20:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    bd24:	07c1      	lsls	r1, r0, #31
    bd26:	d029      	beq.n	bd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bd28:	0781      	lsls	r1, r0, #30
    bd2a:	d514      	bpl.n	bd56 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    bd2c:	4815      	ldr	r0, [pc, #84]	; (bd84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    bd2e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bd32:	f041 0101 	orr.w	r1, r1, #1
    bd36:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bd3a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bd3e:	b2c0      	uxtb	r0, r0
    bd40:	280b      	cmp	r0, #11
    bd42:	d005      	beq.n	bd50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    bd44:	280a      	cmp	r0, #10
    bd46:	d003      	beq.n	bd50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    bd48:	2803      	cmp	r0, #3
    bd4a:	d001      	beq.n	bd50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    bd4c:	2802      	cmp	r0, #2
    bd4e:	d115      	bne.n	bd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bd50:	f240 510f 	movw	r1, #1295	; 0x50f
    bd54:	e00f      	b.n	bd76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    bd56:	0740      	lsls	r0, r0, #29
    bd58:	d510      	bpl.n	bd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bd5a:	480a      	ldr	r0, [pc, #40]	; (bd84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    bd5c:	490a      	ldr	r1, [pc, #40]	; (bd88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    bd5e:	3008      	adds	r0, #8
    bd60:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    bd64:	f44f 71a0 	mov.w	r1, #320	; 0x140
    bd68:	4808      	ldr	r0, [pc, #32]	; (bd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    bd6a:	f004 fa3d 	bl	101e8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    bd6e:	2800      	cmp	r0, #0
    bd70:	d004      	beq.n	bd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bd72:	f240 5117 	movw	r1, #1303	; 0x517
    bd76:	203e      	movs	r0, #62	; 0x3e
    bd78:	f7f8 fce6 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd7c:	bd10      	pop	{r4, pc}
    bd7e:	0000      	.short	0x0000
    bd80:	200013cc 	.word	0x200013cc
    bd84:	40001000 	.word	0x40001000
    bd88:	4001f098 	.word	0x4001f098
    bd8c:	40008000 	.word	0x40008000
    bd90:	4808      	ldr	r0, [pc, #32]	; (bdb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    bd92:	4601      	mov	r1, r0
    bd94:	79c2      	ldrb	r2, [r0, #7]
    bd96:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    bd9a:	b112      	cbz	r2, bda2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    bd9c:	2a01      	cmp	r2, #1
    bd9e:	d003      	beq.n	bda8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    bda0:	e006      	b.n	bdb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    bda2:	f041 0102 	orr.w	r1, r1, #2
    bda6:	e001      	b.n	bdac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    bda8:	f041 0104 	orr.w	r1, r1, #4
    bdac:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    bdb0:	f7ff bfb4 	b.w	bd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    bdb4:	200013cc 	.word	0x200013cc
    bdb8:	b510      	push	{r4, lr}
    bdba:	f000 faef 	bl	c39c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bdbe:	2800      	cmp	r0, #0
    bdc0:	d108      	bne.n	bdd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    bdc2:	f000 fadb 	bl	c37c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bdc6:	2800      	cmp	r0, #0
    bdc8:	d104      	bne.n	bdd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    bdca:	4803      	ldr	r0, [pc, #12]	; (bdd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    bdcc:	6801      	ldr	r1, [r0, #0]
    bdce:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    bdd2:	6001      	str	r1, [r0, #0]
    bdd4:	bd10      	pop	{r4, pc}
    bdd6:	0000      	.short	0x0000
    bdd8:	40001568 	.word	0x40001568
    bddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bde0:	4d35      	ldr	r5, [pc, #212]	; (beb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    bde2:	2400      	movs	r4, #0
    bde4:	7b28      	ldrb	r0, [r5, #12]
    bde6:	b138      	cbz	r0, bdf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bde8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    bdec:	4833      	ldr	r0, [pc, #204]	; (bebc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    bdee:	f004 f9fb 	bl	101e8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    bdf2:	b108      	cbz	r0, bdf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bdf4:	2601      	movs	r6, #1
    bdf6:	e000      	b.n	bdfa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    bdf8:	2600      	movs	r6, #0
    bdfa:	7a68      	ldrb	r0, [r5, #9]
    bdfc:	4f30      	ldr	r7, [pc, #192]	; (bec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    bdfe:	f44f 7186 	mov.w	r1, #268	; 0x10c
    be02:	2801      	cmp	r0, #1
    be04:	d002      	beq.n	be0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    be06:	2802      	cmp	r0, #2
    be08:	d008      	beq.n	be1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    be0a:	e018      	b.n	be3e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    be0c:	4638      	mov	r0, r7
    be0e:	f004 f9e6 	bl	101de <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    be12:	b108      	cbz	r0, be18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    be14:	2408      	movs	r4, #8
    be16:	e012      	b.n	be3e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    be18:	2400      	movs	r4, #0
    be1a:	e010      	b.n	be3e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    be1c:	4638      	mov	r0, r7
    be1e:	f004 f9de 	bl	101de <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    be22:	b100      	cbz	r0, be26 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    be24:	2002      	movs	r0, #2
    be26:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    be2a:	43c9      	mvns	r1, r1
    be2c:	f341 0100 	sbfx	r1, r1, #0, #1
    be30:	1c49      	adds	r1, r1, #1
    be32:	d001      	beq.n	be38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    be34:	2400      	movs	r4, #0
    be36:	e000      	b.n	be3a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    be38:	2404      	movs	r4, #4
    be3a:	4304      	orrs	r4, r0
    be3c:	4334      	orrs	r4, r6
    be3e:	f014 0f0b 	tst.w	r4, #11
    be42:	d107      	bne.n	be54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    be44:	f44f 7188 	mov.w	r1, #272	; 0x110
    be48:	4638      	mov	r0, r7
    be4a:	f004 f9c8 	bl	101de <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    be4e:	b100      	cbz	r0, be52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    be50:	2010      	movs	r0, #16
    be52:	4304      	orrs	r4, r0
    be54:	481b      	ldr	r0, [pc, #108]	; (bec4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    be56:	7800      	ldrb	r0, [r0, #0]
    be58:	b1f8      	cbz	r0, be9a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    be5a:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    be5e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    be62:	d007      	beq.n	be74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    be64:	f44f 718a 	mov.w	r1, #276	; 0x114
    be68:	4638      	mov	r0, r7
    be6a:	f004 f9b8 	bl	101de <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    be6e:	b108      	cbz	r0, be74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    be70:	2001      	movs	r0, #1
    be72:	e000      	b.n	be76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    be74:	2000      	movs	r0, #0
    be76:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    be7a:	b13e      	cbz	r6, be8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    be7c:	f44f 718c 	mov.w	r1, #280	; 0x118
    be80:	4638      	mov	r0, r7
    be82:	f004 f9ac 	bl	101de <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    be86:	b108      	cbz	r0, be8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    be88:	2001      	movs	r0, #1
    be8a:	e000      	b.n	be8e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    be8c:	2000      	movs	r0, #0
    be8e:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    be92:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    be96:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    be9a:	f7ff ff2d 	bl	bcf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    be9e:	06e0      	lsls	r0, r4, #27
    bea0:	d506      	bpl.n	beb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    bea2:	0720      	lsls	r0, r4, #28
    bea4:	d404      	bmi.n	beb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    bea6:	7a68      	ldrb	r0, [r5, #9]
    bea8:	2801      	cmp	r0, #1
    beaa:	d101      	bne.n	beb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    beac:	f044 0420 	orr.w	r4, r4, #32
    beb0:	4620      	mov	r0, r4
    beb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    beb6:	0000      	.short	0x0000
    beb8:	200013cc 	.word	0x200013cc
    bebc:	40008000 	.word	0x40008000
    bec0:	40001000 	.word	0x40001000
    bec4:	20000270 	.word	0x20000270
    bec8:	4809      	ldr	r0, [pc, #36]	; (bef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    beca:	b510      	push	{r4, lr}
    becc:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    bed0:	f000 000f 	and.w	r0, r0, #15
    bed4:	2803      	cmp	r0, #3
    bed6:	d006      	beq.n	bee6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    bed8:	2804      	cmp	r0, #4
    beda:	d006      	beq.n	beea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    bedc:	f240 11dd 	movw	r1, #477	; 0x1dd
    bee0:	203e      	movs	r0, #62	; 0x3e
    bee2:	f7f8 fc31 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bee6:	2001      	movs	r0, #1
    bee8:	bd10      	pop	{r4, pc}
    beea:	2002      	movs	r0, #2
    beec:	bd10      	pop	{r4, pc}
    beee:	0000      	.short	0x0000
    bef0:	40001000 	.word	0x40001000
    bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bef8:	4c19      	ldr	r4, [pc, #100]	; (bf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    befa:	460d      	mov	r5, r1
    befc:	7a21      	ldrb	r1, [r4, #8]
    befe:	b129      	cbz	r1, bf0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    bf00:	f010 0f11 	tst.w	r0, #17
    bf04:	d00b      	beq.n	bf1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    bf06:	f7ff f9d5 	bl	b2b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bf0a:	e027      	b.n	bf5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    bf0c:	4915      	ldr	r1, [pc, #84]	; (bf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    bf0e:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bf12:	6008      	str	r0, [r1, #0]
    bf14:	f000 f862 	bl	bfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    bf18:	2000      	movs	r0, #0
    bf1a:	7320      	strb	r0, [r4, #12]
    bf1c:	e01e      	b.n	bf5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    bf1e:	2901      	cmp	r1, #1
    bf20:	d001      	beq.n	bf26 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    bf22:	2601      	movs	r6, #1
    bf24:	e000      	b.n	bf28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    bf26:	2600      	movs	r6, #0
    bf28:	79e0      	ldrb	r0, [r4, #7]
    bf2a:	2801      	cmp	r0, #1
    bf2c:	d00e      	beq.n	bf4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    bf2e:	2700      	movs	r7, #0
    bf30:	f000 f854 	bl	bfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    bf34:	2196      	movs	r1, #150	; 0x96
    bf36:	4630      	mov	r0, r6
    bf38:	f000 f866 	bl	c008 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    bf3c:	4601      	mov	r1, r0
    bf3e:	b14f      	cbz	r7, bf54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    bf40:	353b      	adds	r5, #59	; 0x3b
    bf42:	428d      	cmp	r5, r1
    bf44:	d904      	bls.n	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    bf46:	2000      	movs	r0, #0
    bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf4c:	2701      	movs	r7, #1
    bf4e:	e7ef      	b.n	bf30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    bf50:	2001      	movs	r0, #1
    bf52:	71e0      	strb	r0, [r4, #7]
    bf54:	7aa2      	ldrb	r2, [r4, #10]
    bf56:	4630      	mov	r0, r6
    bf58:	f7ff fc6a 	bl	b830 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    bf5c:	2001      	movs	r0, #1
    bf5e:	e7f3      	b.n	bf48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    bf60:	200013cc 	.word	0x200013cc
    bf64:	4001f508 	.word	0x4001f508
    bf68:	4805      	ldr	r0, [pc, #20]	; (bf80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    bf6a:	2100      	movs	r1, #0
    bf6c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    bf70:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bf74:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    bf78:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bf7c:	4770      	bx	lr
    bf7e:	0000      	.short	0x0000
    bf80:	40001000 	.word	0x40001000
    bf84:	4804      	ldr	r0, [pc, #16]	; (bf98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    bf86:	6a81      	ldr	r1, [r0, #40]	; 0x28
    bf88:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    bf8c:	6281      	str	r1, [r0, #40]	; 0x28
    bf8e:	4903      	ldr	r1, [pc, #12]	; (bf9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    bf90:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    bf94:	6008      	str	r0, [r1, #0]
    bf96:	4770      	bx	lr
    bf98:	200013cc 	.word	0x200013cc
    bf9c:	4001f504 	.word	0x4001f504
    bfa0:	4a07      	ldr	r2, [pc, #28]	; (bfc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    bfa2:	2000      	movs	r0, #0
    bfa4:	3208      	adds	r2, #8
    bfa6:	4906      	ldr	r1, [pc, #24]	; (bfc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    bfa8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bfac:	1d0a      	adds	r2, r1, #4
    bfae:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bfb2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bfb6:	4902      	ldr	r1, [pc, #8]	; (bfc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    bfb8:	310c      	adds	r1, #12
    bfba:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bfbe:	4770      	bx	lr
    bfc0:	40008000 	.word	0x40008000
    bfc4:	4903      	ldr	r1, [pc, #12]	; (bfd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    bfc6:	79c9      	ldrb	r1, [r1, #7]
    bfc8:	2900      	cmp	r1, #0
    bfca:	d102      	bne.n	bfd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    bfcc:	4902      	ldr	r1, [pc, #8]	; (bfd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    bfce:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    bfd2:	4770      	bx	lr
    bfd4:	200013cc 	.word	0x200013cc
    bfd8:	4001f098 	.word	0x4001f098
    bfdc:	4802      	ldr	r0, [pc, #8]	; (bfe8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    bfde:	2100      	movs	r1, #0
    bfe0:	71c1      	strb	r1, [r0, #7]
    bfe2:	7201      	strb	r1, [r0, #8]
    bfe4:	7241      	strb	r1, [r0, #9]
    bfe6:	4770      	bx	lr
    bfe8:	200013cc 	.word	0x200013cc
    bfec:	4a05      	ldr	r2, [pc, #20]	; (c004 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    bfee:	79d2      	ldrb	r2, [r2, #7]
    bff0:	2a01      	cmp	r2, #1
    bff2:	d006      	beq.n	c002 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    bff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bff8:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    bffc:	fbb1 f1f2 	udiv	r1, r1, r2
    c000:	1a40      	subs	r0, r0, r1
    c002:	4770      	bx	lr
    c004:	200013cc 	.word	0x200013cc
    c008:	b570      	push	{r4, r5, r6, lr}
    c00a:	4c13      	ldr	r4, [pc, #76]	; (c058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    c00c:	4603      	mov	r3, r0
    c00e:	460d      	mov	r5, r1
    c010:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c014:	2000      	movs	r0, #0
    c016:	b15a      	cbz	r2, c030 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c018:	4621      	mov	r1, r4
    c01a:	f891 1020 	ldrb.w	r1, [r1, #32]
    c01e:	b163      	cbz	r3, c03a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    c020:	2b01      	cmp	r3, #1
    c022:	d111      	bne.n	c048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    c024:	2a01      	cmp	r2, #1
    c026:	4628      	mov	r0, r5
    c028:	d012      	beq.n	c050 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    c02a:	f004 f922 	bl	10272 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c02e:	e009      	b.n	c044 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c030:	f240 7152 	movw	r1, #1874	; 0x752
    c034:	203e      	movs	r0, #62	; 0x3e
    c036:	f7f8 fb87 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c03a:	2a01      	cmp	r2, #1
    c03c:	4628      	mov	r0, r5
    c03e:	d004      	beq.n	c04a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c040:	f004 f925 	bl	1028e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c044:	69e1      	ldr	r1, [r4, #28]
    c046:	4408      	add	r0, r1
    c048:	bd70      	pop	{r4, r5, r6, pc}
    c04a:	f004 f93a 	bl	102c2 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c04e:	e7f9      	b.n	c044 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c050:	f004 f928 	bl	102a4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c054:	e7f6      	b.n	c044 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c056:	0000      	.short	0x0000
    c058:	200013cc 	.word	0x200013cc
    c05c:	b510      	push	{r4, lr}
    c05e:	2200      	movs	r2, #0
    c060:	2901      	cmp	r1, #1
    c062:	d008      	beq.n	c076 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    c064:	2902      	cmp	r1, #2
    c066:	d004      	beq.n	c072 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    c068:	f240 2163 	movw	r1, #611	; 0x263
    c06c:	203e      	movs	r0, #62	; 0x3e
    c06e:	f7f8 fb6b 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c072:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c076:	4905      	ldr	r1, [pc, #20]	; (c08c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    c078:	430a      	orrs	r2, r1
    c07a:	4905      	ldr	r1, [pc, #20]	; (c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c07c:	600a      	str	r2, [r1, #0]
    c07e:	4905      	ldr	r1, [pc, #20]	; (c094 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    c080:	4308      	orrs	r0, r1
    c082:	4903      	ldr	r1, [pc, #12]	; (c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c084:	1d09      	adds	r1, r1, #4
    c086:	6008      	str	r0, [r1, #0]
    c088:	bd10      	pop	{r4, pc}
    c08a:	0000      	.short	0x0000
    c08c:	00100108 	.word	0x00100108
    c090:	40001514 	.word	0x40001514
    c094:	02030000 	.word	0x02030000

0000c098 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c098:	4901      	ldr	r1, [pc, #4]	; (c0a0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c09a:	b2c0      	uxtb	r0, r0
    c09c:	6008      	str	r0, [r1, #0]
    c09e:	4770      	bx	lr
    c0a0:	4000150c 	.word	0x4000150c

0000c0a4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c0a4:	b510      	push	{r4, lr}
    c0a6:	4907      	ldr	r1, [pc, #28]	; (c0c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c0a8:	2801      	cmp	r0, #1
    c0aa:	d005      	beq.n	c0b8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c0ac:	2802      	cmp	r0, #2
    c0ae:	d005      	beq.n	c0bc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c0b0:	218b      	movs	r1, #139	; 0x8b
    c0b2:	203f      	movs	r0, #63	; 0x3f
    c0b4:	f7f8 fb48 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0b8:	2003      	movs	r0, #3
    c0ba:	e000      	b.n	c0be <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c0bc:	2004      	movs	r0, #4
    c0be:	6008      	str	r0, [r1, #0]
    c0c0:	bd10      	pop	{r4, pc}
    c0c2:	0000      	.short	0x0000
    c0c4:	40001510 	.word	0x40001510

0000c0c8 <strcmp>:
    c0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
    c0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
    c0d0:	2a01      	cmp	r2, #1
    c0d2:	bf28      	it	cs
    c0d4:	429a      	cmpcs	r2, r3
    c0d6:	d0f7      	beq.n	c0c8 <strcmp>
    c0d8:	1ad0      	subs	r0, r2, r3
    c0da:	4770      	bx	lr

0000c0dc <strlen>:
    c0dc:	4603      	mov	r3, r0
    c0de:	f813 2b01 	ldrb.w	r2, [r3], #1
    c0e2:	2a00      	cmp	r2, #0
    c0e4:	d1fb      	bne.n	c0de <strlen+0x2>
    c0e6:	1a18      	subs	r0, r3, r0
    c0e8:	3801      	subs	r0, #1
    c0ea:	4770      	bx	lr

0000c0ec <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c0ec:	4770      	bx	lr
    c0ee:	2100      	movs	r1, #0
    c0f0:	7081      	strb	r1, [r0, #2]
    c0f2:	7001      	strb	r1, [r0, #0]
    c0f4:	7041      	strb	r1, [r0, #1]
    c0f6:	4770      	bx	lr

0000c0f8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c0f8:	b570      	push	{r4, r5, r6, lr}
    c0fa:	f7f4 fec9 	bl	e90 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c0fe:	4605      	mov	r5, r0
    c100:	2400      	movs	r4, #0
    c102:	e006      	b.n	c112 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c104:	4620      	mov	r0, r4
    c106:	f7f4 fec9 	bl	e9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c10a:	f7ff fff0 	bl	c0ee <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c10e:	1c64      	adds	r4, r4, #1
    c110:	b2e4      	uxtb	r4, r4
    c112:	42ac      	cmp	r4, r5
    c114:	d3f6      	bcc.n	c104 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c116:	bd70      	pop	{r4, r5, r6, pc}

0000c118 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c118:	2000      	movs	r0, #0
    c11a:	f7f7 bc8f 	b.w	3a3c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c11e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c11e:	b510      	push	{r4, lr}
    c120:	f7f7 f962 	bl	33e8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c128:	f000 b800 	b.w	c12c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c12c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c12c:	0a41      	lsrs	r1, r0, #9
    c12e:	f643 5209 	movw	r2, #15625	; 0x3d09
    c132:	4351      	muls	r1, r2
    c134:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c138:	fb10 f002 	smulbb	r0, r0, r2
    c13c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c140:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c144:	4770      	bx	lr

0000c146 <MPSL_IRQ_RADIO_Handler>:
    c146:	f7f5 bf53 	b.w	1ff0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c14a:	2800      	cmp	r0, #0
    c14c:	db09      	blt.n	c162 <MPSL_IRQ_RADIO_Handler+0x1c>
    c14e:	f000 021f 	and.w	r2, r0, #31
    c152:	2101      	movs	r1, #1
    c154:	4091      	lsls	r1, r2
    c156:	0940      	lsrs	r0, r0, #5
    c158:	0080      	lsls	r0, r0, #2
    c15a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c15e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c162:	4770      	bx	lr
    c164:	2800      	cmp	r0, #0
    c166:	db0d      	blt.n	c184 <MPSL_IRQ_RADIO_Handler+0x3e>
    c168:	f000 021f 	and.w	r2, r0, #31
    c16c:	2101      	movs	r1, #1
    c16e:	4091      	lsls	r1, r2
    c170:	0940      	lsrs	r0, r0, #5
    c172:	0080      	lsls	r0, r0, #2
    c174:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c178:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c17c:	f3bf 8f4f 	dsb	sy
    c180:	f3bf 8f6f 	isb	sy
    c184:	4770      	bx	lr

0000c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c186:	b570      	push	{r4, r5, r6, lr}
    c188:	4602      	mov	r2, r0
    c18a:	2000      	movs	r0, #0
    c18c:	2900      	cmp	r1, #0
    c18e:	d01d      	beq.n	c1cc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c190:	fba2 0101 	umull	r0, r1, r2, r1
    c194:	0a40      	lsrs	r0, r0, #9
    c196:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c19a:	0a49      	lsrs	r1, r1, #9
    c19c:	1c40      	adds	r0, r0, #1
    c19e:	f141 0100 	adc.w	r1, r1, #0
    c1a2:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c1a6:	1883      	adds	r3, r0, r2
    c1a8:	f141 0100 	adc.w	r1, r1, #0
    c1ac:	1c5b      	adds	r3, r3, #1
    c1ae:	f141 0400 	adc.w	r4, r1, #0
    c1b2:	2100      	movs	r1, #0
    c1b4:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c1b8:	41a1      	sbcs	r1, r4
    c1ba:	d203      	bcs.n	c1c4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c1bc:	2171      	movs	r1, #113	; 0x71
    c1be:	206d      	movs	r0, #109	; 0x6d
    c1c0:	f7f8 f816 	bl	41f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c1c4:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c1c8:	fbb0 f0f2 	udiv	r0, r0, r2
    c1cc:	bd70      	pop	{r4, r5, r6, pc}
    c1ce:	5840      	ldr	r0, [r0, r1]
    c1d0:	2800      	cmp	r0, #0
    c1d2:	d000      	beq.n	c1d6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c1d4:	2001      	movs	r0, #1
    c1d6:	4770      	bx	lr
    c1d8:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c1dc:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c1e0:	f002 0201 	and.w	r2, r2, #1
    c1e4:	03c0      	lsls	r0, r0, #15
    c1e6:	d503      	bpl.n	c1f0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c1e8:	428a      	cmp	r2, r1
    c1ea:	d101      	bne.n	c1f0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c1ec:	2001      	movs	r0, #1
    c1ee:	4770      	bx	lr
    c1f0:	2000      	movs	r0, #0
    c1f2:	4770      	bx	lr

0000c1f4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c1f4:	b510      	push	{r4, lr}
    c1f6:	2101      	movs	r1, #1
    c1f8:	0788      	lsls	r0, r1, #30
    c1fa:	f7f7 ffa3 	bl	4144 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c1fe:	2800      	cmp	r0, #0
    c200:	d000      	beq.n	c204 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c202:	2001      	movs	r0, #1
    c204:	bd10      	pop	{r4, pc}

0000c206 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c206:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c20a:	2101      	movs	r1, #1
    c20c:	6001      	str	r1, [r0, #0]
    c20e:	4770      	bx	lr

0000c210 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c210:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c214:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c218:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c21c:	f002 0203 	and.w	r2, r2, #3
    c220:	03c9      	lsls	r1, r1, #15
    c222:	d503      	bpl.n	c22c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c224:	4282      	cmp	r2, r0
    c226:	d101      	bne.n	c22c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c228:	2001      	movs	r0, #1
    c22a:	4770      	bx	lr
    c22c:	2000      	movs	r0, #0
    c22e:	4770      	bx	lr

0000c230 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c230:	b510      	push	{r4, lr}
    c232:	2100      	movs	r1, #0
    c234:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c238:	f7f7 ff84 	bl	4144 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c23c:	2800      	cmp	r0, #0
    c23e:	d000      	beq.n	c242 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c240:	2001      	movs	r0, #1
    c242:	bd10      	pop	{r4, pc}
    c244:	2800      	cmp	r0, #0
    c246:	db09      	blt.n	c25c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c248:	f000 021f 	and.w	r2, r0, #31
    c24c:	2101      	movs	r1, #1
    c24e:	4091      	lsls	r1, r2
    c250:	0940      	lsrs	r0, r0, #5
    c252:	0080      	lsls	r0, r0, #2
    c254:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c258:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c25c:	4770      	bx	lr
    c25e:	2800      	cmp	r0, #0
    c260:	db0d      	blt.n	c27e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c262:	f000 021f 	and.w	r2, r0, #31
    c266:	2101      	movs	r1, #1
    c268:	4091      	lsls	r1, r2
    c26a:	0940      	lsrs	r0, r0, #5
    c26c:	0080      	lsls	r0, r0, #2
    c26e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c272:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c276:	f3bf 8f4f 	dsb	sy
    c27a:	f3bf 8f6f 	isb	sy
    c27e:	4770      	bx	lr
    c280:	00021000 	.word	0x00021000
    c284:	000000fa 	.word	0x000000fa
    c288:	24625723 	.word	0x24625723
    c28c:	578f3123 	.word	0x578f3123
    c290:	2fd1ee74 	.word	0x2fd1ee74
    c294:	4594c088 	.word	0x4594c088
    c298:	36f9a2f7 	.word	0x36f9a2f7
    c29c:	2800      	cmp	r0, #0
    c29e:	db09      	blt.n	c2b4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c2a0:	f000 021f 	and.w	r2, r0, #31
    c2a4:	2101      	movs	r1, #1
    c2a6:	4091      	lsls	r1, r2
    c2a8:	0940      	lsrs	r0, r0, #5
    c2aa:	0080      	lsls	r0, r0, #2
    c2ac:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c2b0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c2b4:	4770      	bx	lr

0000c2b6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c2b6:	f3ef 8110 	mrs	r1, PRIMASK
    c2ba:	b672      	cpsid	i
    c2bc:	7802      	ldrb	r2, [r0, #0]
    c2be:	2a01      	cmp	r2, #1
    c2c0:	d001      	beq.n	c2c6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c2c2:	2201      	movs	r2, #1
    c2c4:	e000      	b.n	c2c8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c2c6:	2200      	movs	r2, #0
    c2c8:	2301      	movs	r3, #1
    c2ca:	7003      	strb	r3, [r0, #0]
    c2cc:	b901      	cbnz	r1, c2d0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c2ce:	b662      	cpsie	i
    c2d0:	b10a      	cbz	r2, c2d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c2d2:	2000      	movs	r0, #0
    c2d4:	4770      	bx	lr
    c2d6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c2da:	4770      	bx	lr

0000c2dc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c2dc:	2100      	movs	r1, #0
    c2de:	7001      	strb	r1, [r0, #0]
    c2e0:	4608      	mov	r0, r1
    c2e2:	4770      	bx	lr

0000c2e4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c2e4:	f3ef 8110 	mrs	r1, PRIMASK
    c2e8:	b672      	cpsid	i
    c2ea:	2200      	movs	r2, #0
    c2ec:	7002      	strb	r2, [r0, #0]
    c2ee:	b901      	cbnz	r1, c2f2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c2f0:	b662      	cpsie	i
    c2f2:	2000      	movs	r0, #0
    c2f4:	4770      	bx	lr

0000c2f6 <mpsl_low_priority_process>:
    c2f6:	f7f8 b867 	b.w	43c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c2fa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c2fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c2fe:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c302:	280f      	cmp	r0, #15
    c304:	d001      	beq.n	c30a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c306:	2000      	movs	r0, #0
    c308:	4770      	bx	lr
    c30a:	2001      	movs	r0, #1
    c30c:	4770      	bx	lr

0000c30e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c30e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c312:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c316:	280a      	cmp	r0, #10
    c318:	d001      	beq.n	c31e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c31a:	2000      	movs	r0, #0
    c31c:	4770      	bx	lr
    c31e:	2001      	movs	r0, #1
    c320:	4770      	bx	lr

0000c322 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c322:	b500      	push	{lr}
    c324:	f7ff fff3 	bl	c30e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c328:	b120      	cbz	r0, c334 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c32a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c32e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c332:	b108      	cbz	r0, c338 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c334:	2000      	movs	r0, #0
    c336:	bd00      	pop	{pc}
    c338:	2001      	movs	r0, #1
    c33a:	bd00      	pop	{pc}

0000c33c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c33c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c340:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c344:	280e      	cmp	r0, #14
    c346:	d001      	beq.n	c34c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c348:	2000      	movs	r0, #0
    c34a:	4770      	bx	lr
    c34c:	2001      	movs	r0, #1
    c34e:	4770      	bx	lr

0000c350 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c350:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c354:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c358:	2810      	cmp	r0, #16
    c35a:	d001      	beq.n	c360 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c35c:	2000      	movs	r0, #0
    c35e:	4770      	bx	lr
    c360:	2001      	movs	r0, #1
    c362:	4770      	bx	lr

0000c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c364:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c368:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c36c:	2806      	cmp	r0, #6
    c36e:	d003      	beq.n	c378 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c370:	1c40      	adds	r0, r0, #1
    c372:	d001      	beq.n	c378 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c374:	2000      	movs	r0, #0
    c376:	4770      	bx	lr
    c378:	2001      	movs	r0, #1
    c37a:	4770      	bx	lr

0000c37c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c37c:	b500      	push	{lr}
    c37e:	f7ff fff1 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c382:	b148      	cbz	r0, c398 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c384:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c388:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c38c:	2806      	cmp	r0, #6
    c38e:	d303      	bcc.n	c398 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c390:	1c40      	adds	r0, r0, #1
    c392:	d001      	beq.n	c398 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c394:	2001      	movs	r0, #1
    c396:	bd00      	pop	{pc}
    c398:	2000      	movs	r0, #0
    c39a:	bd00      	pop	{pc}

0000c39c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c39c:	b500      	push	{lr}
    c39e:	f7ff ffe1 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c3a2:	b138      	cbz	r0, c3b4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c3a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3a8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c3ac:	2806      	cmp	r0, #6
    c3ae:	d303      	bcc.n	c3b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c3b0:	1c40      	adds	r0, r0, #1
    c3b2:	d001      	beq.n	c3b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c3b4:	2000      	movs	r0, #0
    c3b6:	bd00      	pop	{pc}
    c3b8:	2001      	movs	r0, #1
    c3ba:	bd00      	pop	{pc}

0000c3bc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c3bc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3c0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3c4:	280d      	cmp	r0, #13
    c3c6:	d001      	beq.n	c3cc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c3c8:	2000      	movs	r0, #0
    c3ca:	4770      	bx	lr
    c3cc:	2001      	movs	r0, #1
    c3ce:	4770      	bx	lr

0000c3d0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c3d0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3d4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3d8:	2808      	cmp	r0, #8
    c3da:	d001      	beq.n	c3e0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c3dc:	2000      	movs	r0, #0
    c3de:	4770      	bx	lr
    c3e0:	2001      	movs	r0, #1
    c3e2:	4770      	bx	lr

0000c3e4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c3e4:	2a00      	cmp	r2, #0
    c3e6:	bf04      	itt	eq
    c3e8:	2000      	moveq	r0, #0
    c3ea:	4770      	bxeq	lr
    c3ec:	1e52      	subs	r2, r2, #1
    c3ee:	d007      	beq.n	c400 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c3f0:	7803      	ldrb	r3, [r0, #0]
    c3f2:	f891 c000 	ldrb.w	ip, [r1]
    c3f6:	4563      	cmp	r3, ip
    c3f8:	bf04      	itt	eq
    c3fa:	1c40      	addeq	r0, r0, #1
    c3fc:	1c49      	addeq	r1, r1, #1
    c3fe:	d0f5      	beq.n	c3ec <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c400:	7800      	ldrb	r0, [r0, #0]
    c402:	7809      	ldrb	r1, [r1, #0]
    c404:	1a40      	subs	r0, r0, r1
    c406:	4770      	bx	lr

0000c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c408:	b4f0      	push	{r4, r5, r6, r7}
    c40a:	ea80 0c01 	eor.w	ip, r0, r1
    c40e:	4603      	mov	r3, r0
    c410:	f01c 0f03 	tst.w	ip, #3
    c414:	d13c      	bne.n	c490 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c416:	f013 0f03 	tst.w	r3, #3
    c41a:	d00b      	beq.n	c434 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c41c:	2a00      	cmp	r2, #0
    c41e:	bf04      	itt	eq
    c420:	bcf0      	popeq	{r4, r5, r6, r7}
    c422:	4770      	bxeq	lr
    c424:	f811 cb01 	ldrb.w	ip, [r1], #1
    c428:	f803 cb01 	strb.w	ip, [r3], #1
    c42c:	1e52      	subs	r2, r2, #1
    c42e:	f013 0f03 	tst.w	r3, #3
    c432:	d1f3      	bne.n	c41c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c434:	2a03      	cmp	r2, #3
    c436:	d94f      	bls.n	c4d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c438:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c43c:	d24c      	bcs.n	c4d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c43e:	f1c2 0c00 	rsb	ip, r2, #0
    c442:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c446:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c44a:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c44e:	f1cc 0c00 	rsb	ip, ip, #0
    c452:	f1bc 0f00 	cmp.w	ip, #0
    c456:	dd1b      	ble.n	c490 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c458:	1f0d      	subs	r5, r1, #4
    c45a:	1f1c      	subs	r4, r3, #4
    c45c:	f01c 0f01 	tst.w	ip, #1
    c460:	d003      	beq.n	c46a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c462:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c466:	f844 6f04 	str.w	r6, [r4, #4]!
    c46a:	ea5f 066c 	movs.w	r6, ip, asr #1
    c46e:	d007      	beq.n	c480 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c470:	686f      	ldr	r7, [r5, #4]
    c472:	6067      	str	r7, [r4, #4]
    c474:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c478:	f844 7f08 	str.w	r7, [r4, #8]!
    c47c:	1e76      	subs	r6, r6, #1
    c47e:	d1f7      	bne.n	c470 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c480:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c484:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c488:	f1cc 0c00 	rsb	ip, ip, #0
    c48c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c490:	2a00      	cmp	r2, #0
    c492:	bf04      	itt	eq
    c494:	bcf0      	popeq	{r4, r5, r6, r7}
    c496:	4770      	bxeq	lr
    c498:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c49c:	d226      	bcs.n	c4ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c49e:	2a00      	cmp	r2, #0
    c4a0:	bfdc      	itt	le
    c4a2:	bcf0      	pople	{r4, r5, r6, r7}
    c4a4:	4770      	bxle	lr
    c4a6:	1e49      	subs	r1, r1, #1
    c4a8:	1e5b      	subs	r3, r3, #1
    c4aa:	f012 0f01 	tst.w	r2, #1
    c4ae:	d003      	beq.n	c4b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c4b0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c4b4:	f803 cf01 	strb.w	ip, [r3, #1]!
    c4b8:	1052      	asrs	r2, r2, #1
    c4ba:	bf04      	itt	eq
    c4bc:	bcf0      	popeq	{r4, r5, r6, r7}
    c4be:	4770      	bxeq	lr
    c4c0:	f891 c001 	ldrb.w	ip, [r1, #1]
    c4c4:	f883 c001 	strb.w	ip, [r3, #1]
    c4c8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c4cc:	f803 cf02 	strb.w	ip, [r3, #2]!
    c4d0:	1e52      	subs	r2, r2, #1
    c4d2:	d1f5      	bne.n	c4c0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c4d4:	bcf0      	pop	{r4, r5, r6, r7}
    c4d6:	4770      	bx	lr
    c4d8:	2a04      	cmp	r2, #4
    c4da:	d3d9      	bcc.n	c490 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c4dc:	f851 cb04 	ldr.w	ip, [r1], #4
    c4e0:	1f12      	subs	r2, r2, #4
    c4e2:	f843 cb04 	str.w	ip, [r3], #4
    c4e6:	2a04      	cmp	r2, #4
    c4e8:	d2f8      	bcs.n	c4dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c4ea:	e7d1      	b.n	c490 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c4ec:	f811 cb01 	ldrb.w	ip, [r1], #1
    c4f0:	f803 cb01 	strb.w	ip, [r3], #1
    c4f4:	1e52      	subs	r2, r2, #1
    c4f6:	d1f9      	bne.n	c4ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c4f8:	bcf0      	pop	{r4, r5, r6, r7}
    c4fa:	4770      	bx	lr

0000c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c4fc:	b470      	push	{r4, r5, r6}
    c4fe:	4603      	mov	r3, r0
    c500:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c504:	f010 0f03 	tst.w	r0, #3
    c508:	d009      	beq.n	c51e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c50a:	2a00      	cmp	r2, #0
    c50c:	bf04      	itt	eq
    c50e:	bc70      	popeq	{r4, r5, r6}
    c510:	4770      	bxeq	lr
    c512:	f803 cb01 	strb.w	ip, [r3], #1
    c516:	1e52      	subs	r2, r2, #1
    c518:	f013 0f03 	tst.w	r3, #3
    c51c:	d1f5      	bne.n	c50a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c51e:	b2c9      	uxtb	r1, r1
    c520:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c524:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c528:	2a03      	cmp	r2, #3
    c52a:	d939      	bls.n	c5a0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c52c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c530:	d236      	bcs.n	c5a0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c532:	4251      	negs	r1, r2
    c534:	17cc      	asrs	r4, r1, #31
    c536:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c53a:	1089      	asrs	r1, r1, #2
    c53c:	424e      	negs	r6, r1
    c53e:	2e00      	cmp	r6, #0
    c540:	dd11      	ble.n	c566 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c542:	1f19      	subs	r1, r3, #4
    c544:	f016 0f01 	tst.w	r6, #1
    c548:	bf18      	it	ne
    c54a:	f841 5f04 	strne.w	r5, [r1, #4]!
    c54e:	1074      	asrs	r4, r6, #1
    c550:	d004      	beq.n	c55c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c552:	604d      	str	r5, [r1, #4]
    c554:	f841 5f08 	str.w	r5, [r1, #8]!
    c558:	1e64      	subs	r4, r4, #1
    c55a:	d1fa      	bne.n	c552 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c55c:	4271      	negs	r1, r6
    c55e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c562:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c566:	2a00      	cmp	r2, #0
    c568:	bf04      	itt	eq
    c56a:	bc70      	popeq	{r4, r5, r6}
    c56c:	4770      	bxeq	lr
    c56e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c572:	d21d      	bcs.n	c5b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c574:	2a00      	cmp	r2, #0
    c576:	bfdc      	itt	le
    c578:	bc70      	pople	{r4, r5, r6}
    c57a:	4770      	bxle	lr
    c57c:	1e59      	subs	r1, r3, #1
    c57e:	f012 0f01 	tst.w	r2, #1
    c582:	bf18      	it	ne
    c584:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c588:	1052      	asrs	r2, r2, #1
    c58a:	bf04      	itt	eq
    c58c:	bc70      	popeq	{r4, r5, r6}
    c58e:	4770      	bxeq	lr
    c590:	f881 c001 	strb.w	ip, [r1, #1]
    c594:	f801 cf02 	strb.w	ip, [r1, #2]!
    c598:	1e52      	subs	r2, r2, #1
    c59a:	d1f9      	bne.n	c590 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c59c:	bc70      	pop	{r4, r5, r6}
    c59e:	4770      	bx	lr
    c5a0:	2a04      	cmp	r2, #4
    c5a2:	d3e0      	bcc.n	c566 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c5a4:	1f12      	subs	r2, r2, #4
    c5a6:	f843 5b04 	str.w	r5, [r3], #4
    c5aa:	2a04      	cmp	r2, #4
    c5ac:	d2fa      	bcs.n	c5a4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c5ae:	e7da      	b.n	c566 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c5b0:	f803 cb01 	strb.w	ip, [r3], #1
    c5b4:	1e52      	subs	r2, r2, #1
    c5b6:	d1fb      	bne.n	c5b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c5b8:	bc70      	pop	{r4, r5, r6}
    c5ba:	4770      	bx	lr
    c5bc:	f04f 30ff 	mov.w	r0, #4294967295
    c5c0:	4770      	bx	lr
    c5c2:	2000      	movs	r0, #0
    c5c4:	4770      	bx	lr
    c5c6:	2000      	movs	r0, #0
    c5c8:	4770      	bx	lr
    c5ca:	f04f 30ff 	mov.w	r0, #4294967295
    c5ce:	4770      	bx	lr
    c5d0:	4770      	bx	lr
    c5d2:	4770      	bx	lr
    c5d4:	2000      	movs	r0, #0
    c5d6:	4770      	bx	lr
    c5d8:	f04f 30ff 	mov.w	r0, #4294967295
    c5dc:	4770      	bx	lr
    c5de:	f04f 30ff 	mov.w	r0, #4294967295
    c5e2:	4770      	bx	lr
    c5e4:	2100      	movs	r1, #0
    c5e6:	7001      	strb	r1, [r0, #0]
    c5e8:	4770      	bx	lr
    c5ea:	f04f 30ff 	mov.w	r0, #4294967295
    c5ee:	4770      	bx	lr
    c5f0:	f04f 30ff 	mov.w	r0, #4294967295
    c5f4:	4770      	bx	lr
    c5f6:	2000      	movs	r0, #0
    c5f8:	4770      	bx	lr
    c5fa:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c5fe:	4605      	mov	r5, r0
    c600:	f100 0003 	add.w	r0, r0, #3
    c604:	f020 0003 	bic.w	r0, r0, #3
    c608:	460c      	mov	r4, r1
    c60a:	9000      	str	r0, [sp, #0]
    c60c:	7849      	ldrb	r1, [r1, #1]
    c60e:	f88d 1004 	strb.w	r1, [sp, #4]
    c612:	78a1      	ldrb	r1, [r4, #2]
    c614:	0016      	movs	r6, r2
    c616:	f88d 1005 	strb.w	r1, [sp, #5]
    c61a:	d000      	beq.n	c61e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
    c61c:	2000      	movs	r0, #0
    c61e:	a901      	add	r1, sp, #4
    c620:	f7f8 fa8a 	bl	4b38 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c624:	9900      	ldr	r1, [sp, #0]
    c626:	4408      	add	r0, r1
    c628:	9000      	str	r0, [sp, #0]
    c62a:	78a1      	ldrb	r1, [r4, #2]
    c62c:	b141      	cbz	r1, c640 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
    c62e:	8a63      	ldrh	r3, [r4, #18]
    c630:	78e2      	ldrb	r2, [r4, #3]
    c632:	b106      	cbz	r6, c636 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
    c634:	2000      	movs	r0, #0
    c636:	f7f8 fd0f 	bl	5058 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c63a:	9900      	ldr	r1, [sp, #0]
    c63c:	4408      	add	r0, r1
    c63e:	9000      	str	r0, [sp, #0]
    c640:	4632      	mov	r2, r6
    c642:	4621      	mov	r1, r4
    c644:	4668      	mov	r0, sp
    c646:	f000 f808 	bl	c65a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
    c64a:	9800      	ldr	r0, [sp, #0]
    c64c:	1dc0      	adds	r0, r0, #7
    c64e:	f020 0007 	bic.w	r0, r0, #7
    c652:	9000      	str	r0, [sp, #0]
    c654:	1b40      	subs	r0, r0, r5
    c656:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c65a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c65e:	4606      	mov	r6, r0
    c660:	460c      	mov	r4, r1
    c662:	7808      	ldrb	r0, [r1, #0]
    c664:	7849      	ldrb	r1, [r1, #1]
    c666:	2700      	movs	r7, #0
    c668:	4408      	add	r0, r1
    c66a:	4691      	mov	r9, r2
    c66c:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c670:	463d      	mov	r5, r7
    c672:	e00e      	b.n	c692 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    c674:	7a23      	ldrb	r3, [r4, #8]
    c676:	2b02      	cmp	r3, #2
    c678:	d200      	bcs.n	c67c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    c67a:	2302      	movs	r3, #2
    c67c:	79e2      	ldrb	r2, [r4, #7]
    c67e:	2a03      	cmp	r2, #3
    c680:	d200      	bcs.n	c684 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
    c682:	2203      	movs	r2, #3
    c684:	79a1      	ldrb	r1, [r4, #6]
    c686:	7960      	ldrb	r0, [r4, #5]
    c688:	f000 fedf 	bl	d44a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c68c:	1c6d      	adds	r5, r5, #1
    c68e:	4407      	add	r7, r0
    c690:	b2ed      	uxtb	r5, r5
    c692:	4545      	cmp	r5, r8
    c694:	d3ee      	bcc.n	c674 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    c696:	6830      	ldr	r0, [r6, #0]
    c698:	1cc0      	adds	r0, r0, #3
    c69a:	f020 0003 	bic.w	r0, r0, #3
    c69e:	6030      	str	r0, [r6, #0]
    c6a0:	f1b9 0f00 	cmp.w	r9, #0
    c6a4:	d000      	beq.n	c6a8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
    c6a6:	2000      	movs	r0, #0
    c6a8:	463a      	mov	r2, r7
    c6aa:	4641      	mov	r1, r8
    c6ac:	f7f8 fc1e 	bl	4eec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c6b0:	6831      	ldr	r1, [r6, #0]
    c6b2:	4408      	add	r0, r1
    c6b4:	6030      	str	r0, [r6, #0]
    c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c6ba <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c6ba:	2000      	movs	r0, #0
    c6bc:	4770      	bx	lr

0000c6be <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c6be:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c6c0:	4604      	mov	r4, r0
    c6c2:	1d01      	adds	r1, r0, #4
    c6c4:	4668      	mov	r0, sp
    c6c6:	f7fa f8e7 	bl	6898 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c6ca:	2800      	cmp	r0, #0
    c6cc:	d004      	beq.n	c6d8 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c6ce:	4669      	mov	r1, sp
    c6d0:	4620      	mov	r0, r4
    c6d2:	f000 f848 	bl	c766 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c6d6:	2001      	movs	r0, #1
    c6d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c6da <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c6da:	b50e      	push	{r1, r2, r3, lr}
    c6dc:	4601      	mov	r1, r0
    c6de:	4668      	mov	r0, sp
    c6e0:	f000 f827 	bl	c732 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c6e4:	4668      	mov	r0, sp
    c6e6:	f001 fc76 	bl	dfd6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c6ea:	bd0e      	pop	{r1, r2, r3, pc}

0000c6ec <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c6ec:	b510      	push	{r4, lr}
    c6ee:	4604      	mov	r4, r0
    c6f0:	4620      	mov	r0, r4
    c6f2:	f7f8 f90f 	bl	4914 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c6f6:	2800      	cmp	r0, #0
    c6f8:	d006      	beq.n	c708 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c6fa:	78a1      	ldrb	r1, [r4, #2]
    c6fc:	7820      	ldrb	r0, [r4, #0]
    c6fe:	f000 f804 	bl	c70a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c702:	2800      	cmp	r0, #0
    c704:	d0f4      	beq.n	c6f0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c706:	2001      	movs	r0, #1
    c708:	bd10      	pop	{r4, pc}
    c70a:	b570      	push	{r4, r5, r6, lr}
    c70c:	460c      	mov	r4, r1
    c70e:	4605      	mov	r5, r0
    c710:	f7f8 f972 	bl	49f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c714:	2800      	cmp	r0, #0
    c716:	d002      	beq.n	c71e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c718:	2d3e      	cmp	r5, #62	; 0x3e
    c71a:	d001      	beq.n	c720 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c71c:	2001      	movs	r0, #1
    c71e:	bd70      	pop	{r4, r5, r6, pc}
    c720:	2c12      	cmp	r4, #18
    c722:	d004      	beq.n	c72e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c724:	4620      	mov	r0, r4
    c726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c72a:	f7f8 b981 	b.w	4a30 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c72e:	2000      	movs	r0, #0
    c730:	bd70      	pop	{r4, r5, r6, pc}

0000c732 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c732:	880a      	ldrh	r2, [r1, #0]
    c734:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c738:	8002      	strh	r2, [r0, #0]
    c73a:	884a      	ldrh	r2, [r1, #2]
    c73c:	8042      	strh	r2, [r0, #2]
    c73e:	784a      	ldrb	r2, [r1, #1]
    c740:	0993      	lsrs	r3, r2, #6
    c742:	2200      	movs	r2, #0
    c744:	7142      	strb	r2, [r0, #5]
    c746:	784b      	ldrb	r3, [r1, #1]
    c748:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c74c:	b11b      	cbz	r3, c756 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c74e:	2b01      	cmp	r3, #1
    c750:	d005      	beq.n	c75e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c752:	2b02      	cmp	r3, #2
    c754:	d005      	beq.n	c762 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c756:	7102      	strb	r2, [r0, #4]
    c758:	1d09      	adds	r1, r1, #4
    c75a:	6081      	str	r1, [r0, #8]
    c75c:	4770      	bx	lr
    c75e:	2201      	movs	r2, #1
    c760:	e7f9      	b.n	c756 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c762:	2202      	movs	r2, #2
    c764:	e7f7      	b.n	c756 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c766 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c766:	b510      	push	{r4, lr}
    c768:	460c      	mov	r4, r1
    c76a:	7809      	ldrb	r1, [r1, #0]
    c76c:	7001      	strb	r1, [r0, #0]
    c76e:	7841      	ldrb	r1, [r0, #1]
    c770:	f021 010f 	bic.w	r1, r1, #15
    c774:	7041      	strb	r1, [r0, #1]
    c776:	8822      	ldrh	r2, [r4, #0]
    c778:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c77c:	4311      	orrs	r1, r2
    c77e:	7041      	strb	r1, [r0, #1]
    c780:	78a2      	ldrb	r2, [r4, #2]
    c782:	7082      	strb	r2, [r0, #2]
    c784:	8862      	ldrh	r2, [r4, #2]
    c786:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c78a:	0a12      	lsrs	r2, r2, #8
    c78c:	70c2      	strb	r2, [r0, #3]
    c78e:	7041      	strb	r1, [r0, #1]
    c790:	7922      	ldrb	r2, [r4, #4]
    c792:	f002 0203 	and.w	r2, r2, #3
    c796:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c79a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c79e:	7041      	strb	r1, [r0, #1]
    c7a0:	7962      	ldrb	r2, [r4, #5]
    c7a2:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c7a6:	7041      	strb	r1, [r0, #1]
    c7a8:	68a1      	ldr	r1, [r4, #8]
    c7aa:	1d02      	adds	r2, r0, #4
    c7ac:	4291      	cmp	r1, r2
    c7ae:	d006      	beq.n	c7be <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c7b0:	8862      	ldrh	r2, [r4, #2]
    c7b2:	2afb      	cmp	r2, #251	; 0xfb
    c7b4:	d300      	bcc.n	c7b8 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c7b6:	22fb      	movs	r2, #251	; 0xfb
    c7b8:	1d00      	adds	r0, r0, #4
    c7ba:	f7ff fe25 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c7be:	78a0      	ldrb	r0, [r4, #2]
    c7c0:	1d00      	adds	r0, r0, #4
    c7c2:	b2c0      	uxtb	r0, r0
    c7c4:	bd10      	pop	{r4, pc}

0000c7c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7ca:	4604      	mov	r4, r0
    c7cc:	780f      	ldrb	r7, [r1, #0]
    c7ce:	2000      	movs	r0, #0
    c7d0:	250c      	movs	r5, #12
    c7d2:	2605      	movs	r6, #5
    c7d4:	223e      	movs	r2, #62	; 0x3e
    c7d6:	23ff      	movs	r3, #255	; 0xff
    c7d8:	2f1b      	cmp	r7, #27
    c7da:	d27d      	bcs.n	c8d8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    c7dc:	e8df f007 	tbb	[pc, r7]
    c7e0:	27250eea 	.word	0x27250eea
    c7e4:	816d632d 	.word	0x816d632d
    c7e8:	bcb1af9b 	.word	0xbcb1af9b
    c7ec:	eaf4e2c7 	.word	0xeaf4e2c7
    c7f0:	d5d231ea 	.word	0xd5d231ea
    c7f4:	eff0f1fd 	.word	0xeff0f1fd
    c7f8:	00ecedee 	.word	0x00ecedee
    c7fc:	7025      	strb	r5, [r4, #0]
    c7fe:	7908      	ldrb	r0, [r1, #4]
    c800:	70a0      	strb	r0, [r4, #2]
    c802:	7948      	ldrb	r0, [r1, #5]
    c804:	70e0      	strb	r0, [r4, #3]
    c806:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c80a:	0a00      	lsrs	r0, r0, #8
    c80c:	7120      	strb	r0, [r4, #4]
    c80e:	79c8      	ldrb	r0, [r1, #7]
    c810:	7160      	strb	r0, [r4, #5]
    c812:	7a08      	ldrb	r0, [r1, #8]
    c814:	71a0      	strb	r0, [r4, #6]
    c816:	8908      	ldrh	r0, [r1, #8]
    c818:	0a00      	lsrs	r0, r0, #8
    c81a:	71e0      	strb	r0, [r4, #7]
    c81c:	7a88      	ldrb	r0, [r1, #10]
    c81e:	7220      	strb	r0, [r4, #8]
    c820:	8948      	ldrh	r0, [r1, #10]
    c822:	0a00      	lsrs	r0, r0, #8
    c824:	7260      	strb	r0, [r4, #9]
    c826:	2008      	movs	r0, #8
    c828:	e0c2      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c82a:	2010      	movs	r0, #16
    c82c:	e000      	b.n	c830 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    c82e:	201a      	movs	r0, #26
    c830:	7020      	strb	r0, [r4, #0]
    c832:	7908      	ldrb	r0, [r1, #4]
    c834:	70a0      	strb	r0, [r4, #2]
    c836:	2001      	movs	r0, #1
    c838:	e0ba      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c83a:	4620      	mov	r0, r4
    c83c:	f000 f946 	bl	cacc <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c840:	e0b4      	b.n	c9ac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    c842:	7022      	strb	r2, [r4, #0]
    c844:	200a      	movs	r0, #10
    c846:	70a0      	strb	r0, [r4, #2]
    c848:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c84c:	70e0      	strb	r0, [r4, #3]
    c84e:	7888      	ldrb	r0, [r1, #2]
    c850:	7120      	strb	r0, [r4, #4]
    c852:	8848      	ldrh	r0, [r1, #2]
    c854:	0a00      	lsrs	r0, r0, #8
    c856:	7160      	strb	r0, [r4, #5]
    c858:	7908      	ldrb	r0, [r1, #4]
    c85a:	71a0      	strb	r0, [r4, #6]
    c85c:	7948      	ldrb	r0, [r1, #5]
    c85e:	71e0      	strb	r0, [r4, #7]
    c860:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c864:	60a0      	str	r0, [r4, #8]
    c866:	8948      	ldrh	r0, [r1, #10]
    c868:	81a0      	strh	r0, [r4, #12]
    c86a:	68c8      	ldr	r0, [r1, #12]
    c86c:	f8c4 000e 	str.w	r0, [r4, #14]
    c870:	8a08      	ldrh	r0, [r1, #16]
    c872:	8260      	strh	r0, [r4, #18]
    c874:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c878:	6160      	str	r0, [r4, #20]
    c87a:	8ac8      	ldrh	r0, [r1, #22]
    c87c:	8320      	strh	r0, [r4, #24]
    c87e:	7e08      	ldrb	r0, [r1, #24]
    c880:	76a0      	strb	r0, [r4, #26]
    c882:	8b08      	ldrh	r0, [r1, #24]
    c884:	0a00      	lsrs	r0, r0, #8
    c886:	76e0      	strb	r0, [r4, #27]
    c888:	7e88      	ldrb	r0, [r1, #26]
    c88a:	7720      	strb	r0, [r4, #28]
    c88c:	8b48      	ldrh	r0, [r1, #26]
    c88e:	0a00      	lsrs	r0, r0, #8
    c890:	7760      	strb	r0, [r4, #29]
    c892:	7f08      	ldrb	r0, [r1, #28]
    c894:	77a0      	strb	r0, [r4, #30]
    c896:	8b88      	ldrh	r0, [r1, #28]
    c898:	0a00      	lsrs	r0, r0, #8
    c89a:	77e0      	strb	r0, [r4, #31]
    c89c:	7f88      	ldrb	r0, [r1, #30]
    c89e:	f884 0020 	strb.w	r0, [r4, #32]
    c8a2:	201f      	movs	r0, #31
    c8a4:	e084      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c8a6:	7022      	strb	r2, [r4, #0]
    c8a8:	2014      	movs	r0, #20
    c8aa:	70a0      	strb	r0, [r4, #2]
    c8ac:	7908      	ldrb	r0, [r1, #4]
    c8ae:	70e0      	strb	r0, [r4, #3]
    c8b0:	8888      	ldrh	r0, [r1, #4]
    c8b2:	0a00      	lsrs	r0, r0, #8
    c8b4:	7120      	strb	r0, [r4, #4]
    c8b6:	7988      	ldrb	r0, [r1, #6]
    c8b8:	e0a7      	b.n	ca0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c8ba:	7022      	strb	r2, [r4, #0]
    c8bc:	2004      	movs	r0, #4
    c8be:	70a0      	strb	r0, [r4, #2]
    c8c0:	7908      	ldrb	r0, [r1, #4]
    c8c2:	70e0      	strb	r0, [r4, #3]
    c8c4:	7988      	ldrb	r0, [r1, #6]
    c8c6:	7120      	strb	r0, [r4, #4]
    c8c8:	88c8      	ldrh	r0, [r1, #6]
    c8ca:	0a00      	lsrs	r0, r0, #8
    c8cc:	7160      	strb	r0, [r4, #5]
    c8ce:	6888      	ldr	r0, [r1, #8]
    c8d0:	f8c4 0006 	str.w	r0, [r4, #6]
    c8d4:	68c8      	ldr	r0, [r1, #12]
    c8d6:	e000      	b.n	c8da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c8d8:	e06c      	b.n	c9b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    c8da:	f8c4 000a 	str.w	r0, [r4, #10]
    c8de:	200c      	movs	r0, #12
    c8e0:	e066      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c8e2:	7022      	strb	r2, [r4, #0]
    c8e4:	2003      	movs	r0, #3
    c8e6:	70a0      	strb	r0, [r4, #2]
    c8e8:	7908      	ldrb	r0, [r1, #4]
    c8ea:	70e0      	strb	r0, [r4, #3]
    c8ec:	7988      	ldrb	r0, [r1, #6]
    c8ee:	7120      	strb	r0, [r4, #4]
    c8f0:	88c8      	ldrh	r0, [r1, #6]
    c8f2:	0a00      	lsrs	r0, r0, #8
    c8f4:	7160      	strb	r0, [r4, #5]
    c8f6:	7a08      	ldrb	r0, [r1, #8]
    c8f8:	71a0      	strb	r0, [r4, #6]
    c8fa:	8908      	ldrh	r0, [r1, #8]
    c8fc:	0a00      	lsrs	r0, r0, #8
    c8fe:	71e0      	strb	r0, [r4, #7]
    c900:	7a88      	ldrb	r0, [r1, #10]
    c902:	7220      	strb	r0, [r4, #8]
    c904:	8948      	ldrh	r0, [r1, #10]
    c906:	0a00      	lsrs	r0, r0, #8
    c908:	7260      	strb	r0, [r4, #9]
    c90a:	7b08      	ldrb	r0, [r1, #12]
    c90c:	72a0      	strb	r0, [r4, #10]
    c90e:	8988      	ldrh	r0, [r1, #12]
    c910:	0a00      	lsrs	r0, r0, #8
    c912:	72e0      	strb	r0, [r4, #11]
    c914:	e0d8      	b.n	cac8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    c916:	7022      	strb	r2, [r4, #0]
    c918:	70a6      	strb	r6, [r4, #2]
    c91a:	7908      	ldrb	r0, [r1, #4]
    c91c:	70e0      	strb	r0, [r4, #3]
    c91e:	8888      	ldrh	r0, [r1, #4]
    c920:	0a00      	lsrs	r0, r0, #8
    c922:	7120      	strb	r0, [r4, #4]
    c924:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c928:	f8c4 0005 	str.w	r0, [r4, #5]
    c92c:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c930:	f8c4 0009 	str.w	r0, [r4, #9]
    c934:	89c8      	ldrh	r0, [r1, #14]
    c936:	f8a4 000d 	strh.w	r0, [r4, #13]
    c93a:	200d      	movs	r0, #13
    c93c:	e038      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c93e:	2011      	movs	r0, #17
    c940:	e043      	b.n	c9ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c942:	7026      	strb	r6, [r4, #0]
    c944:	7908      	ldrb	r0, [r1, #4]
    c946:	70a0      	strb	r0, [r4, #2]
    c948:	7948      	ldrb	r0, [r1, #5]
    c94a:	70e0      	strb	r0, [r4, #3]
    c94c:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c950:	0a00      	lsrs	r0, r0, #8
    c952:	7120      	strb	r0, [r4, #4]
    c954:	79c8      	ldrb	r0, [r1, #7]
    c956:	e058      	b.n	ca0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c958:	2008      	movs	r0, #8
    c95a:	7020      	strb	r0, [r4, #0]
    c95c:	7908      	ldrb	r0, [r1, #4]
    c95e:	70a0      	strb	r0, [r4, #2]
    c960:	7988      	ldrb	r0, [r1, #6]
    c962:	70e0      	strb	r0, [r4, #3]
    c964:	88c8      	ldrh	r0, [r1, #6]
    c966:	0a00      	lsrs	r0, r0, #8
    c968:	7120      	strb	r0, [r4, #4]
    c96a:	7a08      	ldrb	r0, [r1, #8]
    c96c:	e04d      	b.n	ca0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c96e:	2030      	movs	r0, #48	; 0x30
    c970:	7020      	strb	r0, [r4, #0]
    c972:	7908      	ldrb	r0, [r1, #4]
    c974:	70a0      	strb	r0, [r4, #2]
    c976:	7988      	ldrb	r0, [r1, #6]
    c978:	70e0      	strb	r0, [r4, #3]
    c97a:	88c8      	ldrh	r0, [r1, #6]
    c97c:	0a00      	lsrs	r0, r0, #8
    c97e:	7120      	strb	r0, [r4, #4]
    c980:	2003      	movs	r0, #3
    c982:	e015      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c984:	7022      	strb	r2, [r4, #0]
    c986:	2007      	movs	r0, #7
    c988:	e044      	b.n	ca14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    c98a:	7022      	strb	r2, [r4, #0]
    c98c:	70a5      	strb	r5, [r4, #2]
    c98e:	7908      	ldrb	r0, [r1, #4]
    c990:	70e0      	strb	r0, [r4, #3]
    c992:	7988      	ldrb	r0, [r1, #6]
    c994:	7120      	strb	r0, [r4, #4]
    c996:	88c8      	ldrh	r0, [r1, #6]
    c998:	0a00      	lsrs	r0, r0, #8
    c99a:	7160      	strb	r0, [r4, #5]
    c99c:	7a08      	ldrb	r0, [r1, #8]
    c99e:	71a0      	strb	r0, [r4, #6]
    c9a0:	7a48      	ldrb	r0, [r1, #9]
    c9a2:	e027      	b.n	c9f4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
    c9a4:	4620      	mov	r0, r4
    c9a6:	1d09      	adds	r1, r1, #4
    c9a8:	f7f7 fff8 	bl	499c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    c9ac:	2800      	cmp	r0, #0
    c9ae:	d001      	beq.n	c9b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    c9b0:	7060      	strb	r0, [r4, #1]
    c9b2:	1c80      	adds	r0, r0, #2
    c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9b8:	e073      	b.n	caa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    c9ba:	e047      	b.n	ca4c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    c9bc:	e028      	b.n	ca10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    c9be:	e053      	b.n	ca68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    c9c0:	e061      	b.n	ca86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    c9c2:	e01a      	b.n	c9fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    c9c4:	e009      	b.n	c9da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    c9c6:	e7ff      	b.n	c9c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    c9c8:	2057      	movs	r0, #87	; 0x57
    c9ca:	7020      	strb	r0, [r4, #0]
    c9cc:	7908      	ldrb	r0, [r1, #4]
    c9ce:	70a0      	strb	r0, [r4, #2]
    c9d0:	8888      	ldrh	r0, [r1, #4]
    c9d2:	0a00      	lsrs	r0, r0, #8
    c9d4:	70e0      	strb	r0, [r4, #3]
    c9d6:	2002      	movs	r0, #2
    c9d8:	e7ea      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c9da:	7022      	strb	r2, [r4, #0]
    c9dc:	2012      	movs	r0, #18
    c9de:	70a0      	strb	r0, [r4, #2]
    c9e0:	7908      	ldrb	r0, [r1, #4]
    c9e2:	70e0      	strb	r0, [r4, #3]
    c9e4:	7948      	ldrb	r0, [r1, #5]
    c9e6:	7120      	strb	r0, [r4, #4]
    c9e8:	7988      	ldrb	r0, [r1, #6]
    c9ea:	7160      	strb	r0, [r4, #5]
    c9ec:	88c8      	ldrh	r0, [r1, #6]
    c9ee:	0a00      	lsrs	r0, r0, #8
    c9f0:	71a0      	strb	r0, [r4, #6]
    c9f2:	7a08      	ldrb	r0, [r1, #8]
    c9f4:	71e0      	strb	r0, [r4, #7]
    c9f6:	2006      	movs	r0, #6
    c9f8:	e7da      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c9fa:	7023      	strb	r3, [r4, #0]
    c9fc:	20a1      	movs	r0, #161	; 0xa1
    c9fe:	70a0      	strb	r0, [r4, #2]
    ca00:	7908      	ldrb	r0, [r1, #4]
    ca02:	70e0      	strb	r0, [r4, #3]
    ca04:	7948      	ldrb	r0, [r1, #5]
    ca06:	7120      	strb	r0, [r4, #4]
    ca08:	2000      	movs	r0, #0
    ca0a:	7160      	strb	r0, [r4, #5]
    ca0c:	2004      	movs	r0, #4
    ca0e:	e7cf      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ca10:	7023      	strb	r3, [r4, #0]
    ca12:	20a2      	movs	r0, #162	; 0xa2
    ca14:	70a0      	strb	r0, [r4, #2]
    ca16:	7908      	ldrb	r0, [r1, #4]
    ca18:	70e0      	strb	r0, [r4, #3]
    ca1a:	8888      	ldrh	r0, [r1, #4]
    ca1c:	0a00      	lsrs	r0, r0, #8
    ca1e:	7120      	strb	r0, [r4, #4]
    ca20:	7988      	ldrb	r0, [r1, #6]
    ca22:	7160      	strb	r0, [r4, #5]
    ca24:	88c8      	ldrh	r0, [r1, #6]
    ca26:	0a00      	lsrs	r0, r0, #8
    ca28:	71a0      	strb	r0, [r4, #6]
    ca2a:	7a08      	ldrb	r0, [r1, #8]
    ca2c:	71e0      	strb	r0, [r4, #7]
    ca2e:	8908      	ldrh	r0, [r1, #8]
    ca30:	0a00      	lsrs	r0, r0, #8
    ca32:	7220      	strb	r0, [r4, #8]
    ca34:	7a88      	ldrb	r0, [r1, #10]
    ca36:	7260      	strb	r0, [r4, #9]
    ca38:	8948      	ldrh	r0, [r1, #10]
    ca3a:	0a00      	lsrs	r0, r0, #8
    ca3c:	72a0      	strb	r0, [r4, #10]
    ca3e:	7b08      	ldrb	r0, [r1, #12]
    ca40:	72e0      	strb	r0, [r4, #11]
    ca42:	8988      	ldrh	r0, [r1, #12]
    ca44:	0a00      	lsrs	r0, r0, #8
    ca46:	7320      	strb	r0, [r4, #12]
    ca48:	200b      	movs	r0, #11
    ca4a:	e7b1      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ca4c:	7023      	strb	r3, [r4, #0]
    ca4e:	20a3      	movs	r0, #163	; 0xa3
    ca50:	70a0      	strb	r0, [r4, #2]
    ca52:	7908      	ldrb	r0, [r1, #4]
    ca54:	70e0      	strb	r0, [r4, #3]
    ca56:	8888      	ldrh	r0, [r1, #4]
    ca58:	0a00      	lsrs	r0, r0, #8
    ca5a:	7120      	strb	r0, [r4, #4]
    ca5c:	7988      	ldrb	r0, [r1, #6]
    ca5e:	7160      	strb	r0, [r4, #5]
    ca60:	79c8      	ldrb	r0, [r1, #7]
    ca62:	71a0      	strb	r0, [r4, #6]
    ca64:	2005      	movs	r0, #5
    ca66:	e7a3      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ca68:	7022      	strb	r2, [r4, #0]
    ca6a:	2013      	movs	r0, #19
    ca6c:	70a0      	strb	r0, [r4, #2]
    ca6e:	7908      	ldrb	r0, [r1, #4]
    ca70:	70e0      	strb	r0, [r4, #3]
    ca72:	7948      	ldrb	r0, [r1, #5]
    ca74:	7120      	strb	r0, [r4, #4]
    ca76:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ca7a:	f8c4 0005 	str.w	r0, [r4, #5]
    ca7e:	8948      	ldrh	r0, [r1, #10]
    ca80:	f8a4 0009 	strh.w	r0, [r4, #9]
    ca84:	e020      	b.n	cac8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    ca86:	7023      	strb	r3, [r4, #0]
    ca88:	20a4      	movs	r0, #164	; 0xa4
    ca8a:	70a0      	strb	r0, [r4, #2]
    ca8c:	7908      	ldrb	r0, [r1, #4]
    ca8e:	70e0      	strb	r0, [r4, #3]
    ca90:	8888      	ldrh	r0, [r1, #4]
    ca92:	0a00      	lsrs	r0, r0, #8
    ca94:	7120      	strb	r0, [r4, #4]
    ca96:	7988      	ldrb	r0, [r1, #6]
    ca98:	7160      	strb	r0, [r4, #5]
    ca9a:	79c8      	ldrb	r0, [r1, #7]
    ca9c:	71a0      	strb	r0, [r4, #6]
    ca9e:	2007      	movs	r0, #7
    caa0:	e786      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    caa2:	7023      	strb	r3, [r4, #0]
    caa4:	2080      	movs	r0, #128	; 0x80
    caa6:	70a0      	strb	r0, [r4, #2]
    caa8:	888a      	ldrh	r2, [r1, #4]
    caaa:	f8a4 2003 	strh.w	r2, [r4, #3]
    caae:	88ca      	ldrh	r2, [r1, #6]
    cab0:	f8a4 2005 	strh.w	r2, [r4, #5]
    cab4:	7a0a      	ldrb	r2, [r1, #8]
    cab6:	71e2      	strb	r2, [r4, #7]
    cab8:	7a4a      	ldrb	r2, [r1, #9]
    caba:	8122      	strh	r2, [r4, #8]
    cabc:	7a8a      	ldrb	r2, [r1, #10]
    cabe:	72a2      	strb	r2, [r4, #10]
    cac0:	7ac9      	ldrb	r1, [r1, #11]
    cac2:	f001 0101 	and.w	r1, r1, #1
    cac6:	72e1      	strb	r1, [r4, #11]
    cac8:	200a      	movs	r0, #10
    caca:	e771      	b.n	c9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000cacc <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    cacc:	223e      	movs	r2, #62	; 0x3e
    cace:	7002      	strb	r2, [r0, #0]
    cad0:	2201      	movs	r2, #1
    cad2:	7082      	strb	r2, [r0, #2]
    cad4:	790a      	ldrb	r2, [r1, #4]
    cad6:	70c2      	strb	r2, [r0, #3]
    cad8:	798a      	ldrb	r2, [r1, #6]
    cada:	7102      	strb	r2, [r0, #4]
    cadc:	88ca      	ldrh	r2, [r1, #6]
    cade:	0a12      	lsrs	r2, r2, #8
    cae0:	7142      	strb	r2, [r0, #5]
    cae2:	7a0a      	ldrb	r2, [r1, #8]
    cae4:	7182      	strb	r2, [r0, #6]
    cae6:	7a4a      	ldrb	r2, [r1, #9]
    cae8:	71c2      	strb	r2, [r0, #7]
    caea:	f8d1 200a 	ldr.w	r2, [r1, #10]
    caee:	6082      	str	r2, [r0, #8]
    caf0:	89ca      	ldrh	r2, [r1, #14]
    caf2:	8182      	strh	r2, [r0, #12]
    caf4:	7c0a      	ldrb	r2, [r1, #16]
    caf6:	7382      	strb	r2, [r0, #14]
    caf8:	8a0a      	ldrh	r2, [r1, #16]
    cafa:	0a12      	lsrs	r2, r2, #8
    cafc:	73c2      	strb	r2, [r0, #15]
    cafe:	7c8a      	ldrb	r2, [r1, #18]
    cb00:	7402      	strb	r2, [r0, #16]
    cb02:	8a4a      	ldrh	r2, [r1, #18]
    cb04:	0a12      	lsrs	r2, r2, #8
    cb06:	7442      	strb	r2, [r0, #17]
    cb08:	7d0a      	ldrb	r2, [r1, #20]
    cb0a:	7482      	strb	r2, [r0, #18]
    cb0c:	8a8a      	ldrh	r2, [r1, #20]
    cb0e:	0a12      	lsrs	r2, r2, #8
    cb10:	74c2      	strb	r2, [r0, #19]
    cb12:	7d89      	ldrb	r1, [r1, #22]
    cb14:	7501      	strb	r1, [r0, #20]
    cb16:	2013      	movs	r0, #19
    cb18:	4770      	bx	lr

0000cb1a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cb1a:	223e      	movs	r2, #62	; 0x3e
    cb1c:	7002      	strb	r2, [r0, #0]
    cb1e:	2201      	movs	r2, #1
    cb20:	7082      	strb	r2, [r0, #2]
    cb22:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cb26:	70c2      	strb	r2, [r0, #3]
    cb28:	788a      	ldrb	r2, [r1, #2]
    cb2a:	7102      	strb	r2, [r0, #4]
    cb2c:	884a      	ldrh	r2, [r1, #2]
    cb2e:	0a12      	lsrs	r2, r2, #8
    cb30:	7142      	strb	r2, [r0, #5]
    cb32:	790a      	ldrb	r2, [r1, #4]
    cb34:	7182      	strb	r2, [r0, #6]
    cb36:	794a      	ldrb	r2, [r1, #5]
    cb38:	71c2      	strb	r2, [r0, #7]
    cb3a:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cb3e:	6082      	str	r2, [r0, #8]
    cb40:	894a      	ldrh	r2, [r1, #10]
    cb42:	8182      	strh	r2, [r0, #12]
    cb44:	7e0a      	ldrb	r2, [r1, #24]
    cb46:	7382      	strb	r2, [r0, #14]
    cb48:	8b0a      	ldrh	r2, [r1, #24]
    cb4a:	0a12      	lsrs	r2, r2, #8
    cb4c:	73c2      	strb	r2, [r0, #15]
    cb4e:	7e8a      	ldrb	r2, [r1, #26]
    cb50:	7402      	strb	r2, [r0, #16]
    cb52:	8b4a      	ldrh	r2, [r1, #26]
    cb54:	0a12      	lsrs	r2, r2, #8
    cb56:	7442      	strb	r2, [r0, #17]
    cb58:	7f0a      	ldrb	r2, [r1, #28]
    cb5a:	7482      	strb	r2, [r0, #18]
    cb5c:	8b8a      	ldrh	r2, [r1, #28]
    cb5e:	0a12      	lsrs	r2, r2, #8
    cb60:	74c2      	strb	r2, [r0, #19]
    cb62:	7f89      	ldrb	r1, [r1, #30]
    cb64:	7501      	strb	r1, [r0, #20]
    cb66:	2113      	movs	r1, #19
    cb68:	7041      	strb	r1, [r0, #1]
    cb6a:	4608      	mov	r0, r1
    cb6c:	4770      	bx	lr

0000cb6e <sdc_hci_data_get>:
    cb6e:	b510      	push	{r4, lr}
    cb70:	b120      	cbz	r0, cb7c <sdc_hci_data_get+0xe>
    cb72:	f7ff fda4 	bl	c6be <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    cb76:	b120      	cbz	r0, cb82 <sdc_hci_data_get+0x14>
    cb78:	2000      	movs	r0, #0
    cb7a:	bd10      	pop	{r4, pc}
    cb7c:	f06f 0015 	mvn.w	r0, #21
    cb80:	bd10      	pop	{r4, pc}
    cb82:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cb86:	bd10      	pop	{r4, pc}

0000cb88 <sdc_hci_data_put>:
    cb88:	b510      	push	{r4, lr}
    cb8a:	f06f 0415 	mvn.w	r4, #21
    cb8e:	b120      	cbz	r0, cb9a <sdc_hci_data_put+0x12>
    cb90:	f7ff fda3 	bl	c6da <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cb94:	b108      	cbz	r0, cb9a <sdc_hci_data_put+0x12>
    cb96:	2000      	movs	r0, #0
    cb98:	bd10      	pop	{r4, pc}
    cb9a:	4620      	mov	r0, r4
    cb9c:	bd10      	pop	{r4, pc}

0000cb9e <sdc_hci_evt_get>:
    cb9e:	b510      	push	{r4, lr}
    cba0:	b120      	cbz	r0, cbac <sdc_hci_evt_get+0xe>
    cba2:	f7ff fda3 	bl	c6ec <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    cba6:	b120      	cbz	r0, cbb2 <sdc_hci_evt_get+0x14>
    cba8:	2000      	movs	r0, #0
    cbaa:	bd10      	pop	{r4, pc}
    cbac:	f06f 0015 	mvn.w	r0, #21
    cbb0:	bd10      	pop	{r4, pc}
    cbb2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cbb6:	bd10      	pop	{r4, pc}

0000cbb8 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cbb8:	f002 beda 	b.w	f970 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cbbc <sdc_hci_cmd_cb_read_transmit_power_level>:
    cbbc:	f002 bf1c 	b.w	f9f8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cbc0 <sdc_hci_cmd_cb_set_event_mask>:
    cbc0:	b510      	push	{r4, lr}
    cbc2:	f7f7 ff49 	bl	4a58 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cbc6:	2000      	movs	r0, #0
    cbc8:	bd10      	pop	{r4, pc}

0000cbca <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cbca:	b510      	push	{r4, lr}
    cbcc:	f7f7 ff52 	bl	4a74 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cbd0:	2000      	movs	r0, #0
    cbd2:	bd10      	pop	{r4, pc}

0000cbd4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cbd4:	f002 bf2c 	b.w	fa30 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cbd8 <sdc_hci_cmd_vs_conn_event_extend>:
    cbd8:	b508      	push	{r3, lr}
    cbda:	7800      	ldrb	r0, [r0, #0]
    cbdc:	f88d 0000 	strb.w	r0, [sp]
    cbe0:	4668      	mov	r0, sp
    cbe2:	f002 fddc 	bl	f79e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    cbe6:	bd08      	pop	{r3, pc}

0000cbe8 <sdc_hci_cmd_vs_conn_update>:
    cbe8:	2001      	movs	r0, #1
    cbea:	4770      	bx	lr

0000cbec <sdc_hci_cmd_vs_event_length_set>:
    cbec:	f7fd be22 	b.w	a834 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000cbf0 <sdc_hci_cmd_vs_llpm_mode_set>:
    cbf0:	2001      	movs	r0, #1
    cbf2:	4770      	bx	lr

0000cbf4 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    cbf4:	7800      	ldrb	r0, [r0, #0]
    cbf6:	b100      	cbz	r0, cbfa <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    cbf8:	2001      	movs	r0, #1
    cbfa:	f002 bd55 	b.w	f6a8 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000cbfe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    cbfe:	b570      	push	{r4, r5, r6, lr}
    cc00:	4605      	mov	r5, r0
    cc02:	2210      	movs	r2, #16
    cc04:	2100      	movs	r1, #0
    cc06:	f7ff fc79 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cc0a:	2210      	movs	r2, #16
    cc0c:	2100      	movs	r1, #0
    cc0e:	f105 0010 	add.w	r0, r5, #16
    cc12:	f7ff fc73 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cc16:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    cc1a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cc1e:	1c40      	adds	r0, r0, #1
    cc20:	d10b      	bne.n	cc3a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cc22:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cc26:	1c40      	adds	r0, r0, #1
    cc28:	d107      	bne.n	cc3a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cc2a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cc2e:	1c40      	adds	r0, r0, #1
    cc30:	d103      	bne.n	cc3a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cc32:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cc36:	1c40      	adds	r0, r0, #1
    cc38:	d00b      	beq.n	cc52 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cc3a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cc3e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cc42:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    cc46:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    cc4a:	612a      	str	r2, [r5, #16]
    cc4c:	6168      	str	r0, [r5, #20]
    cc4e:	61a9      	str	r1, [r5, #24]
    cc50:	61eb      	str	r3, [r5, #28]
    cc52:	2000      	movs	r0, #0
    cc54:	f7f8 fca2 	bl	559c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cc58:	b918      	cbnz	r0, cc62 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cc5a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cc5e:	07c0      	lsls	r0, r0, #31
    cc60:	d118      	bne.n	cc94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cc62:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    cc66:	1c40      	adds	r0, r0, #1
    cc68:	d10b      	bne.n	cc82 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cc6a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cc6e:	1c40      	adds	r0, r0, #1
    cc70:	d107      	bne.n	cc82 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cc72:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    cc76:	1c40      	adds	r0, r0, #1
    cc78:	d103      	bne.n	cc82 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cc7a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cc7e:	1c40      	adds	r0, r0, #1
    cc80:	d008      	beq.n	cc94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cc82:	f854 0f90 	ldr.w	r0, [r4, #144]!
    cc86:	6861      	ldr	r1, [r4, #4]
    cc88:	68a2      	ldr	r2, [r4, #8]
    cc8a:	68e3      	ldr	r3, [r4, #12]
    cc8c:	6028      	str	r0, [r5, #0]
    cc8e:	6069      	str	r1, [r5, #4]
    cc90:	60aa      	str	r2, [r5, #8]
    cc92:	60eb      	str	r3, [r5, #12]
    cc94:	2000      	movs	r0, #0
    cc96:	bd70      	pop	{r4, r5, r6, pc}

0000cc98 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cc98:	b538      	push	{r3, r4, r5, lr}
    cc9a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cc9e:	4604      	mov	r4, r0
    cca0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cca4:	1c40      	adds	r0, r0, #1
    cca6:	d105      	bne.n	ccb4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    cca8:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    ccac:	43c0      	mvns	r0, r0
    ccae:	0400      	lsls	r0, r0, #16
    ccb0:	0c00      	lsrs	r0, r0, #16
    ccb2:	d03e      	beq.n	cd32 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    ccb4:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    ccb8:	07c0      	lsls	r0, r0, #31
    ccba:	d03a      	beq.n	cd32 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    ccbc:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ccc0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    ccc4:	f8ad 1000 	strh.w	r1, [sp]
    ccc8:	f8c4 0001 	str.w	r0, [r4, #1]
    cccc:	f8bd 0000 	ldrh.w	r0, [sp]
    ccd0:	f8a4 0005 	strh.w	r0, [r4, #5]
    ccd4:	79a0      	ldrb	r0, [r4, #6]
    ccd6:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    ccda:	71a0      	strb	r0, [r4, #6]
    ccdc:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cce0:	1c40      	adds	r0, r0, #1
    cce2:	d00f      	beq.n	cd04 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cce4:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cce8:	1c40      	adds	r0, r0, #1
    ccea:	d00b      	beq.n	cd04 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ccec:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    ccf0:	1c40      	adds	r0, r0, #1
    ccf2:	d007      	beq.n	cd04 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ccf4:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    ccf8:	1c40      	adds	r0, r0, #1
    ccfa:	d003      	beq.n	cd04 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ccfc:	2000      	movs	r0, #0
    ccfe:	f7f8 fc4d 	bl	559c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cd02:	b140      	cbz	r0, cd16 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    cd04:	2210      	movs	r2, #16
    cd06:	2100      	movs	r1, #0
    cd08:	1de0      	adds	r0, r4, #7
    cd0a:	f7ff fbf7 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd0e:	2001      	movs	r0, #1
    cd10:	7020      	strb	r0, [r4, #0]
    cd12:	2000      	movs	r0, #0
    cd14:	bd38      	pop	{r3, r4, r5, pc}
    cd16:	f855 2f90 	ldr.w	r2, [r5, #144]!
    cd1a:	6869      	ldr	r1, [r5, #4]
    cd1c:	68a8      	ldr	r0, [r5, #8]
    cd1e:	68eb      	ldr	r3, [r5, #12]
    cd20:	f8c4 2007 	str.w	r2, [r4, #7]
    cd24:	f8c4 100b 	str.w	r1, [r4, #11]
    cd28:	f8c4 000f 	str.w	r0, [r4, #15]
    cd2c:	f8c4 3013 	str.w	r3, [r4, #19]
    cd30:	e7ed      	b.n	cd0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    cd32:	2000      	movs	r0, #0
    cd34:	e7ec      	b.n	cd10 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000cd36 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cd36:	f002 bd24 	b.w	f782 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cd3a <sdc_hci_cmd_ip_read_bd_addr>:
    cd3a:	f002 be2a 	b.w	f992 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000cd3e <sdc_hci_cmd_ip_read_local_version_information>:
    cd3e:	f7fd bd87 	b.w	a850 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000cd42 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    cd42:	f002 ba08 	b.w	f156 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000cd46 <sdc_hci_cmd_le_add_device_to_white_list>:
    cd46:	f002 ba21 	b.w	f18c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cd4a <sdc_hci_cmd_le_clear_resolving_list>:
    cd4a:	f002 ba36 	b.w	f1ba <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000cd4e <sdc_hci_cmd_le_clear_white_list>:
    cd4e:	f002 ba41 	b.w	f1d4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000cd52 <sdc_hci_cmd_le_encrypt>:
    cd52:	f002 ba49 	b.w	f1e8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000cd56 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    cd56:	8802      	ldrh	r2, [r0, #0]
    cd58:	800a      	strh	r2, [r1, #0]
    cd5a:	f002 ba4e 	b.w	f1fa <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000cd5e <sdc_hci_cmd_le_long_term_key_request_reply>:
    cd5e:	8802      	ldrh	r2, [r0, #0]
    cd60:	800a      	strh	r2, [r1, #0]
    cd62:	f002 ba63 	b.w	f22c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000cd66 <sdc_hci_cmd_le_rand>:
    cd66:	f002 ba8b 	b.w	f280 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000cd6a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    cd6a:	f002 ba8f 	b.w	f28c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000cd6e <sdc_hci_cmd_le_read_buffer_size>:
    cd6e:	f7fd bcb7 	b.w	a6e0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000cd72 <sdc_hci_cmd_le_read_channel_map>:
    cd72:	f7fd bcbf 	b.w	a6f4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000cd76 <sdc_hci_cmd_le_read_max_data_length>:
    cd76:	f002 ba92 	b.w	f29e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000cd7a <sdc_hci_cmd_le_read_phy>:
    cd7a:	f002 baa0 	b.w	f2be <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000cd7e <sdc_hci_cmd_le_read_remote_features>:
    cd7e:	f7fd bce3 	b.w	a748 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000cd82 <sdc_hci_cmd_le_read_resolving_list_size>:
    cd82:	f002 bac7 	b.w	f314 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000cd86 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    cd86:	f7fd bcff 	b.w	a788 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cd8a <sdc_hci_cmd_le_read_transmit_power>:
    cd8a:	f002 bac7 	b.w	f31c <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cd8e <sdc_hci_cmd_le_read_white_list_size>:
    cd8e:	f002 bace 	b.w	f32e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cd92 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    cd92:	f002 bad0 	b.w	f336 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000cd96 <sdc_hci_cmd_le_remove_device_from_white_list>:
    cd96:	f002 bae7 	b.w	f368 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cd9a <sdc_hci_cmd_le_set_address_resolution_enable>:
    cd9a:	f002 bafa 	b.w	f392 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000cd9e <sdc_hci_cmd_le_set_adv_data>:
    cd9e:	f002 bb06 	b.w	f3ae <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000cda2 <sdc_hci_cmd_le_set_adv_enable>:
    cda2:	f002 bb19 	b.w	f3d8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000cda6 <sdc_hci_cmd_le_set_adv_params>:
    cda6:	f002 bb4a 	b.w	f43e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000cdaa <sdc_hci_cmd_le_set_data_length>:
    cdaa:	f002 bbdd 	b.w	f568 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000cdae <sdc_hci_cmd_le_set_default_phy>:
    cdae:	f7fd bcfb 	b.w	a7a8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000cdb2 <sdc_hci_cmd_le_set_event_mask>:
    cdb2:	b510      	push	{r4, lr}
    cdb4:	f7f7 fe4a 	bl	4a4c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cdb8:	2000      	movs	r0, #0
    cdba:	bd10      	pop	{r4, pc}

0000cdbc <sdc_hci_cmd_le_set_phy>:
    cdbc:	f002 bbfb 	b.w	f5b6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cdc0 <sdc_hci_cmd_le_set_privacy_mode>:
    cdc0:	f002 bc19 	b.w	f5f6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000cdc4 <sdc_hci_cmd_le_set_random_address>:
    cdc4:	f002 bc2d 	b.w	f622 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000cdc8 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    cdc8:	f002 bc39 	b.w	f63e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000cdcc <sdc_hci_cmd_le_set_scan_response_data>:
    cdcc:	f002 bc40 	b.w	f650 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cdd0 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cdd0:	f002 bc53 	b.w	f67a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cdd4 <sdc_hci_cmd_lc_disconnect>:
    cdd4:	f002 b96b 	b.w	f0ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cdd8 <sdc_hci_cmd_lc_read_remote_version_information>:
    cdd8:	f002 bde7 	b.w	f9aa <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    cddc:	b570      	push	{r4, r5, r6, lr}
    cdde:	880b      	ldrh	r3, [r1, #0]
    cde0:	7f04      	ldrb	r4, [r0, #28]
    cde2:	f100 0524 	add.w	r5, r0, #36	; 0x24
    cde6:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    cdea:	8802      	ldrh	r2, [r0, #0]
    cdec:	4435      	add	r5, r6
    cdee:	1da4      	adds	r4, r4, #6
    cdf0:	882d      	ldrh	r5, [r5, #0]
    cdf2:	4422      	add	r2, r4
    cdf4:	b292      	uxth	r2, r2
    cdf6:	4425      	add	r5, r4
    cdf8:	1e54      	subs	r4, r2, #1
    cdfa:	442c      	add	r4, r5
    cdfc:	fb94 f4f2 	sdiv	r4, r4, r2
    ce00:	fb02 6204 	mla	r2, r2, r4, r6
    ce04:	8840      	ldrh	r0, [r0, #2]
    ce06:	b292      	uxth	r2, r2
    ce08:	4290      	cmp	r0, r2
    ce0a:	d903      	bls.n	ce14 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    ce0c:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    ce10:	4310      	orrs	r0, r2
    ce12:	e002      	b.n	ce1a <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    ce14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ce18:	4398      	bics	r0, r3
    ce1a:	8008      	strh	r0, [r1, #0]
    ce1c:	bd70      	pop	{r4, r5, r6, pc}
    ce1e:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    ce22:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    ce26:	429a      	cmp	r2, r3
    ce28:	d107      	bne.n	ce3a <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    ce2a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    ce2e:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    ce32:	4288      	cmp	r0, r1
    ce34:	d001      	beq.n	ce3a <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    ce36:	2001      	movs	r0, #1
    ce38:	4770      	bx	lr
    ce3a:	2000      	movs	r0, #0
    ce3c:	4770      	bx	lr

0000ce3e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    ce3e:	b570      	push	{r4, r5, r6, lr}
    ce40:	7f00      	ldrb	r0, [r0, #28]
    ce42:	461c      	mov	r4, r3
    ce44:	1d80      	adds	r0, r0, #6
    ce46:	4408      	add	r0, r1
    ce48:	4613      	mov	r3, r2
    ce4a:	8809      	ldrh	r1, [r1, #0]
    ce4c:	9a04      	ldr	r2, [sp, #16]
    ce4e:	1cc9      	adds	r1, r1, #3
    ce50:	b289      	uxth	r1, r1
    ce52:	1915      	adds	r5, r2, r4
    ce54:	1ec0      	subs	r0, r0, #3
    ce56:	428d      	cmp	r5, r1
    ce58:	d805      	bhi.n	ce66 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    ce5a:	1881      	adds	r1, r0, r2
    ce5c:	4622      	mov	r2, r4
    ce5e:	4618      	mov	r0, r3
    ce60:	f7ff fad2 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce64:	e000      	b.n	ce68 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    ce66:	2400      	movs	r4, #0
    ce68:	4620      	mov	r0, r4
    ce6a:	bd70      	pop	{r4, r5, r6, pc}

0000ce6c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    ce6c:	b570      	push	{r4, r5, r6, lr}
    ce6e:	7f00      	ldrb	r0, [r0, #28]
    ce70:	461c      	mov	r4, r3
    ce72:	1d80      	adds	r0, r0, #6
    ce74:	4408      	add	r0, r1
    ce76:	4613      	mov	r3, r2
    ce78:	8809      	ldrh	r1, [r1, #0]
    ce7a:	9a04      	ldr	r2, [sp, #16]
    ce7c:	1cc9      	adds	r1, r1, #3
    ce7e:	b289      	uxth	r1, r1
    ce80:	1915      	adds	r5, r2, r4
    ce82:	1ec0      	subs	r0, r0, #3
    ce84:	428d      	cmp	r5, r1
    ce86:	d805      	bhi.n	ce94 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    ce88:	4410      	add	r0, r2
    ce8a:	4622      	mov	r2, r4
    ce8c:	4619      	mov	r1, r3
    ce8e:	f7ff fabb 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce92:	e000      	b.n	ce96 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    ce94:	2400      	movs	r4, #0
    ce96:	4620      	mov	r0, r4
    ce98:	bd70      	pop	{r4, r5, r6, pc}

0000ce9a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    ce9a:	8881      	ldrh	r1, [r0, #4]
    ce9c:	88c0      	ldrh	r0, [r0, #6]
    ce9e:	4288      	cmp	r0, r1
    cea0:	d101      	bne.n	cea6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cea2:	2001      	movs	r0, #1
    cea4:	4770      	bx	lr
    cea6:	2000      	movs	r0, #0
    cea8:	4770      	bx	lr

0000ceaa <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    ceaa:	8881      	ldrh	r1, [r0, #4]
    ceac:	8900      	ldrh	r0, [r0, #8]
    ceae:	4288      	cmp	r0, r1
    ceb0:	d101      	bne.n	ceb6 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    ceb2:	2001      	movs	r0, #1
    ceb4:	4770      	bx	lr
    ceb6:	2000      	movs	r0, #0
    ceb8:	4770      	bx	lr

0000ceba <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    ceba:	b570      	push	{r4, r5, r6, lr}
    cebc:	4604      	mov	r4, r0
    cebe:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cec2:	8880      	ldrh	r0, [r0, #4]
    cec4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cec8:	4401      	add	r1, r0
    ceca:	8a20      	ldrh	r0, [r4, #16]
    cecc:	2800      	cmp	r0, #0
    cece:	d01a      	beq.n	cf06 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    ced0:	89a2      	ldrh	r2, [r4, #12]
    ced2:	2500      	movs	r5, #0
    ced4:	4410      	add	r0, r2
    ced6:	b280      	uxth	r0, r0
    ced8:	81a0      	strh	r0, [r4, #12]
    ceda:	880a      	ldrh	r2, [r1, #0]
    cedc:	4290      	cmp	r0, r2
    cede:	d905      	bls.n	ceec <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    cee0:	f240 1163 	movw	r1, #355	; 0x163
    cee4:	f04f 0014 	mov.w	r0, #20
    cee8:	f7f7 fc2e 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ceec:	d109      	bne.n	cf02 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    ceee:	69a0      	ldr	r0, [r4, #24]
    cef0:	b108      	cbz	r0, cef6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    cef2:	7f40      	ldrb	r0, [r0, #29]
    cef4:	7088      	strb	r0, [r1, #2]
    cef6:	f104 0104 	add.w	r1, r4, #4
    cefa:	4620      	mov	r0, r4
    cefc:	f7ff ff6e 	bl	cddc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cf00:	81a5      	strh	r5, [r4, #12]
    cf02:	8225      	strh	r5, [r4, #16]
    cf04:	2001      	movs	r0, #1
    cf06:	bd70      	pop	{r4, r5, r6, pc}

0000cf08 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf0a:	4604      	mov	r4, r0
    cf0c:	f100 0324 	add.w	r3, r0, #36	; 0x24
    cf10:	88c0      	ldrh	r0, [r0, #6]
    cf12:	460e      	mov	r6, r1
    cf14:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    cf18:	8a60      	ldrh	r0, [r4, #18]
    cf1a:	19d9      	adds	r1, r3, r7
    cf1c:	b108      	cbz	r0, cf22 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    cf1e:	42b0      	cmp	r0, r6
    cf20:	d201      	bcs.n	cf26 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    cf22:	2000      	movs	r0, #0
    cf24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf26:	89e0      	ldrh	r0, [r4, #14]
    cf28:	2500      	movs	r5, #0
    cf2a:	b140      	cbz	r0, cf3e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    cf2c:	f8b1 c000 	ldrh.w	ip, [r1]
    cf30:	4560      	cmp	r0, ip
    cf32:	d008      	beq.n	cf46 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    cf34:	f240 214b 	movw	r1, #587	; 0x24b
    cf38:	2014      	movs	r0, #20
    cf3a:	f7f7 fc05 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf3e:	7f60      	ldrb	r0, [r4, #29]
    cf40:	7088      	strb	r0, [r1, #2]
    cf42:	800d      	strh	r5, [r1, #0]
    cf44:	e00e      	b.n	cf64 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    cf46:	f894 c01c 	ldrb.w	ip, [r4, #28]
    cf4a:	4418      	add	r0, r3
    cf4c:	f10c 0c06 	add.w	ip, ip, #6
    cf50:	44bc      	add	ip, r7
    cf52:	4460      	add	r0, ip
    cf54:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    cf58:	f820 cc03 	strh.w	ip, [r0, #-3]
    cf5c:	f894 c020 	ldrb.w	ip, [r4, #32]
    cf60:	f800 cc01 	strb.w	ip, [r0, #-1]
    cf64:	89e0      	ldrh	r0, [r4, #14]
    cf66:	4430      	add	r0, r6
    cf68:	81e0      	strh	r0, [r4, #14]
    cf6a:	8808      	ldrh	r0, [r1, #0]
    cf6c:	4430      	add	r0, r6
    cf6e:	8008      	strh	r0, [r1, #0]
    cf70:	b19a      	cbz	r2, cf9a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    cf72:	1da1      	adds	r1, r4, #6
    cf74:	4620      	mov	r0, r4
    cf76:	f7ff ff31 	bl	cddc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cf7a:	81e5      	strh	r5, [r4, #14]
    cf7c:	7f60      	ldrb	r0, [r4, #29]
    cf7e:	1c40      	adds	r0, r0, #1
    cf80:	7760      	strb	r0, [r4, #29]
    cf82:	7da0      	ldrb	r0, [r4, #22]
    cf84:	f88d 0000 	strb.w	r0, [sp]
    cf88:	9800      	ldr	r0, [sp, #0]
    cf8a:	9000      	str	r0, [sp, #0]
    cf8c:	f89d 0000 	ldrb.w	r0, [sp]
    cf90:	b178      	cbz	r0, cfb2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    cf92:	88e0      	ldrh	r0, [r4, #6]
    cf94:	82a0      	strh	r0, [r4, #20]
    cf96:	75a5      	strb	r5, [r4, #22]
    cf98:	e00b      	b.n	cfb2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    cf9a:	7f20      	ldrb	r0, [r4, #28]
    cf9c:	89e1      	ldrh	r1, [r4, #14]
    cf9e:	1d80      	adds	r0, r0, #6
    cfa0:	4438      	add	r0, r7
    cfa2:	4419      	add	r1, r3
    cfa4:	4408      	add	r0, r1
    cfa6:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    cfaa:	83e1      	strh	r1, [r4, #30]
    cfac:	7880      	ldrb	r0, [r0, #2]
    cfae:	f884 0020 	strb.w	r0, [r4, #32]
    cfb2:	8265      	strh	r5, [r4, #18]
    cfb4:	2001      	movs	r0, #1
    cfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cfb8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    cfb8:	b510      	push	{r4, lr}
    cfba:	4604      	mov	r4, r0
    cfbc:	88c0      	ldrh	r0, [r0, #6]
    cfbe:	88a1      	ldrh	r1, [r4, #4]
    cfc0:	4281      	cmp	r1, r0
    cfc2:	d007      	beq.n	cfd4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cfc4:	89a0      	ldrh	r0, [r4, #12]
    cfc6:	b928      	cbnz	r0, cfd4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cfc8:	8a20      	ldrh	r0, [r4, #16]
    cfca:	b918      	cbnz	r0, cfd4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cfcc:	88a0      	ldrh	r0, [r4, #4]
    cfce:	8aa1      	ldrh	r1, [r4, #20]
    cfd0:	4288      	cmp	r0, r1
    cfd2:	d101      	bne.n	cfd8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    cfd4:	2000      	movs	r0, #0
    cfd6:	bd10      	pop	{r4, pc}
    cfd8:	1d21      	adds	r1, r4, #4
    cfda:	4620      	mov	r0, r4
    cfdc:	f7ff fefe 	bl	cddc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cfe0:	2000      	movs	r0, #0
    cfe2:	8220      	strh	r0, [r4, #16]
    cfe4:	2001      	movs	r0, #1
    cfe6:	bd10      	pop	{r4, pc}

0000cfe8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    cfe8:	b510      	push	{r4, lr}
    cfea:	4604      	mov	r4, r0
    cfec:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cff0:	88c0      	ldrh	r0, [r0, #6]
    cff2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cff6:	4402      	add	r2, r0
    cff8:	8820      	ldrh	r0, [r4, #0]
    cffa:	2845      	cmp	r0, #69	; 0x45
    cffc:	d200      	bcs.n	d000 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    cffe:	2045      	movs	r0, #69	; 0x45
    d000:	4288      	cmp	r0, r1
    d002:	d204      	bcs.n	d00e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d004:	f240 1119 	movw	r1, #281	; 0x119
    d008:	2014      	movs	r0, #20
    d00a:	f7f7 fb9d 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d00e:	7de0      	ldrb	r0, [r4, #23]
    d010:	2800      	cmp	r0, #0
    d012:	d003      	beq.n	d01c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d014:	8810      	ldrh	r0, [r2, #0]
    d016:	4288      	cmp	r0, r1
    d018:	d201      	bcs.n	d01e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d01a:	2000      	movs	r0, #0
    d01c:	bd10      	pop	{r4, pc}
    d01e:	8011      	strh	r1, [r2, #0]
    d020:	1da1      	adds	r1, r4, #6
    d022:	4620      	mov	r0, r4
    d024:	f7ff feda 	bl	cddc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d028:	2000      	movs	r0, #0
    d02a:	75e0      	strb	r0, [r4, #23]
    d02c:	2001      	movs	r0, #1
    d02e:	bd10      	pop	{r4, pc}

0000d030 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d034:	8941      	ldrh	r1, [r0, #10]
    d036:	8886      	ldrh	r6, [r0, #4]
    d038:	4604      	mov	r4, r0
    d03a:	2500      	movs	r5, #0
    d03c:	f100 070a 	add.w	r7, r0, #10
    d040:	e006      	b.n	d050 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d042:	4639      	mov	r1, r7
    d044:	4620      	mov	r0, r4
    d046:	f7ff fec9 	bl	cddc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d04a:	1c6d      	adds	r5, r5, #1
    d04c:	8961      	ldrh	r1, [r4, #10]
    d04e:	b2ad      	uxth	r5, r5
    d050:	42b1      	cmp	r1, r6
    d052:	d1f6      	bne.n	d042 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d054:	4628      	mov	r0, r5
    d056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d05a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d05a:	b530      	push	{r4, r5, lr}
    d05c:	88c4      	ldrh	r4, [r0, #6]
    d05e:	8881      	ldrh	r1, [r0, #4]
    d060:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d064:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d068:	4413      	add	r3, r2
    d06a:	8882      	ldrh	r2, [r0, #4]
    d06c:	8a85      	ldrh	r5, [r0, #20]
    d06e:	42aa      	cmp	r2, r5
    d070:	d012      	beq.n	d098 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d072:	42a1      	cmp	r1, r4
    d074:	d010      	beq.n	d098 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d076:	8981      	ldrh	r1, [r0, #12]
    d078:	b971      	cbnz	r1, d098 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d07a:	6982      	ldr	r2, [r0, #24]
    d07c:	b172      	cbz	r2, d09c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d07e:	4610      	mov	r0, r2
    d080:	f7ff ff13 	bl	ceaa <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d084:	b950      	cbnz	r0, d09c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d086:	8910      	ldrh	r0, [r2, #8]
    d088:	3224      	adds	r2, #36	; 0x24
    d08a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d08e:	4410      	add	r0, r2
    d090:	7899      	ldrb	r1, [r3, #2]
    d092:	7880      	ldrb	r0, [r0, #2]
    d094:	4288      	cmp	r0, r1
    d096:	d101      	bne.n	d09c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d098:	2000      	movs	r0, #0
    d09a:	bd30      	pop	{r4, r5, pc}
    d09c:	4618      	mov	r0, r3
    d09e:	bd30      	pop	{r4, r5, pc}

0000d0a0 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d0a0:	7f00      	ldrb	r0, [r0, #28]
    d0a2:	1d80      	adds	r0, r0, #6
    d0a4:	4408      	add	r0, r1
    d0a6:	1ec0      	subs	r0, r0, #3
    d0a8:	6010      	str	r0, [r2, #0]
    d0aa:	8808      	ldrh	r0, [r1, #0]
    d0ac:	4770      	bx	lr

0000d0ae <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0b2:	460e      	mov	r6, r1
    d0b4:	88c1      	ldrh	r1, [r0, #6]
    d0b6:	8902      	ldrh	r2, [r0, #8]
    d0b8:	4604      	mov	r4, r0
    d0ba:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d0be:	8800      	ldrh	r0, [r0, #0]
    d0c0:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d0c4:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d0c8:	2845      	cmp	r0, #69	; 0x45
    d0ca:	d200      	bcs.n	d0ce <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d0cc:	2045      	movs	r0, #69	; 0x45
    d0ce:	42b0      	cmp	r0, r6
    d0d0:	d203      	bcs.n	d0da <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d0d2:	21db      	movs	r1, #219	; 0xdb
    d0d4:	2014      	movs	r0, #20
    d0d6:	f7f7 fb37 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0da:	4610      	mov	r0, r2
    d0dc:	f7ff fe9f 	bl	ce1e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d0e0:	b110      	cbz	r0, d0e8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d0e2:	2000      	movs	r0, #0
    d0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0e8:	42af      	cmp	r7, r5
    d0ea:	d908      	bls.n	d0fe <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d0ec:	7f21      	ldrb	r1, [r4, #28]
    d0ee:	1b78      	subs	r0, r7, r5
    d0f0:	1a40      	subs	r0, r0, r1
    d0f2:	1f80      	subs	r0, r0, #6
    d0f4:	4286      	cmp	r6, r0
    d0f6:	dd02      	ble.n	d0fe <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d0f8:	2000      	movs	r0, #0
    d0fa:	75e0      	strb	r0, [r4, #23]
    d0fc:	e7f1      	b.n	d0e2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d0fe:	eb08 0005 	add.w	r0, r8, r5
    d102:	2101      	movs	r1, #1
    d104:	8006      	strh	r6, [r0, #0]
    d106:	75e1      	strb	r1, [r4, #23]
    d108:	e7ec      	b.n	d0e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d10a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d10a:	b538      	push	{r3, r4, r5, lr}
    d10c:	88c4      	ldrh	r4, [r0, #6]
    d10e:	8881      	ldrh	r1, [r0, #4]
    d110:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d114:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d118:	441a      	add	r2, r3
    d11a:	42a1      	cmp	r1, r4
    d11c:	d010      	beq.n	d140 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d11e:	8983      	ldrh	r3, [r0, #12]
    d120:	8a05      	ldrh	r5, [r0, #16]
    d122:	8812      	ldrh	r2, [r2, #0]
    d124:	442b      	add	r3, r5
    d126:	4293      	cmp	r3, r2
    d128:	d308      	bcc.n	d13c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d12a:	f8ad 1000 	strh.w	r1, [sp]
    d12e:	4669      	mov	r1, sp
    d130:	f7ff fe54 	bl	cddc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d134:	f8bd 0000 	ldrh.w	r0, [sp]
    d138:	42a0      	cmp	r0, r4
    d13a:	d001      	beq.n	d140 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d13c:	2001      	movs	r0, #1
    d13e:	bd38      	pop	{r3, r4, r5, pc}
    d140:	2000      	movs	r0, #0
    d142:	bd38      	pop	{r3, r4, r5, pc}

0000d144 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d144:	b570      	push	{r4, r5, r6, lr}
    d146:	88c6      	ldrh	r6, [r0, #6]
    d148:	8885      	ldrh	r5, [r0, #4]
    d14a:	4603      	mov	r3, r0
    d14c:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d150:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d154:	4420      	add	r0, r4
    d156:	42b5      	cmp	r5, r6
    d158:	d102      	bne.n	d160 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d15a:	2000      	movs	r0, #0
    d15c:	8218      	strh	r0, [r3, #16]
    d15e:	bd70      	pop	{r4, r5, r6, pc}
    d160:	8804      	ldrh	r4, [r0, #0]
    d162:	899d      	ldrh	r5, [r3, #12]
    d164:	7f1e      	ldrb	r6, [r3, #28]
    d166:	1b64      	subs	r4, r4, r5
    d168:	4435      	add	r5, r6
    d16a:	4428      	add	r0, r5
    d16c:	880d      	ldrh	r5, [r1, #0]
    d16e:	b2a4      	uxth	r4, r4
    d170:	1cc0      	adds	r0, r0, #3
    d172:	42a5      	cmp	r5, r4
    d174:	d900      	bls.n	d178 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d176:	800c      	strh	r4, [r1, #0]
    d178:	899c      	ldrh	r4, [r3, #12]
    d17a:	b124      	cbz	r4, d186 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d17c:	2400      	movs	r4, #0
    d17e:	7014      	strb	r4, [r2, #0]
    d180:	8809      	ldrh	r1, [r1, #0]
    d182:	8219      	strh	r1, [r3, #16]
    d184:	bd70      	pop	{r4, r5, r6, pc}
    d186:	2401      	movs	r4, #1
    d188:	e7f9      	b.n	d17e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d18a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d18a:	b508      	push	{r3, lr}
    d18c:	8a81      	ldrh	r1, [r0, #20]
    d18e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d192:	3aff      	subs	r2, #255	; 0xff
    d194:	d008      	beq.n	d1a8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    d196:	7d82      	ldrb	r2, [r0, #22]
    d198:	f88d 2000 	strb.w	r2, [sp]
    d19c:	9a00      	ldr	r2, [sp, #0]
    d19e:	9200      	str	r2, [sp, #0]
    d1a0:	f89d 2000 	ldrb.w	r2, [sp]
    d1a4:	b952      	cbnz	r2, d1bc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d1a6:	e004      	b.n	d1b2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    d1a8:	f44f 7162 	mov.w	r1, #904	; 0x388
    d1ac:	2014      	movs	r0, #20
    d1ae:	f7f7 facb 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1b2:	8880      	ldrh	r0, [r0, #4]
    d1b4:	4281      	cmp	r1, r0
    d1b6:	d101      	bne.n	d1bc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d1b8:	2000      	movs	r0, #0
    d1ba:	bd08      	pop	{r3, pc}
    d1bc:	2001      	movs	r0, #1
    d1be:	bd08      	pop	{r3, pc}

0000d1c0 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d1c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d1c4:	8281      	strh	r1, [r0, #20]
    d1c6:	2100      	movs	r1, #0
    d1c8:	7581      	strb	r1, [r0, #22]
    d1ca:	4770      	bx	lr

0000d1cc <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d1cc:	b510      	push	{r4, lr}
    d1ce:	8a81      	ldrh	r1, [r0, #20]
    d1d0:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d1d4:	3aff      	subs	r2, #255	; 0xff
    d1d6:	d004      	beq.n	d1e2 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d1d8:	f44f 7159 	mov.w	r1, #868	; 0x364
    d1dc:	2014      	movs	r0, #20
    d1de:	f7f7 fab3 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1e2:	88c1      	ldrh	r1, [r0, #6]
    d1e4:	8281      	strh	r1, [r0, #20]
    d1e6:	89c1      	ldrh	r1, [r0, #14]
    d1e8:	b109      	cbz	r1, d1ee <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    d1ea:	2101      	movs	r1, #1
    d1ec:	e000      	b.n	d1f0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    d1ee:	2100      	movs	r1, #0
    d1f0:	7581      	strb	r1, [r0, #22]
    d1f2:	bd10      	pop	{r4, pc}

0000d1f4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1f8:	461d      	mov	r5, r3
    d1fa:	4616      	mov	r6, r2
    d1fc:	9f06      	ldr	r7, [sp, #24]
    d1fe:	460b      	mov	r3, r1
    d200:	4604      	mov	r4, r0
    d202:	463a      	mov	r2, r7
    d204:	4629      	mov	r1, r5
    d206:	4630      	mov	r0, r6
    d208:	f000 f84f 	bl	d2aa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d20c:	4283      	cmp	r3, r0
    d20e:	d201      	bcs.n	d214 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d210:	21a8      	movs	r1, #168	; 0xa8
    d212:	e018      	b.n	d246 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d214:	1ce0      	adds	r0, r4, #3
    d216:	f020 0103 	bic.w	r1, r0, #3
    d21a:	4620      	mov	r0, r4
    d21c:	42a1      	cmp	r1, r4
    d21e:	d001      	beq.n	d224 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d220:	21a9      	movs	r1, #169	; 0xa9
    d222:	e010      	b.n	d246 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d224:	2224      	movs	r2, #36	; 0x24
    d226:	2100      	movs	r1, #0
    d228:	f7ff f968 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d22c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d230:	82a0      	strh	r0, [r4, #20]
    d232:	19a8      	adds	r0, r5, r6
    d234:	1d80      	adds	r0, r0, #6
    d236:	4378      	muls	r0, r7
    d238:	b280      	uxth	r0, r0
    d23a:	7725      	strb	r5, [r4, #28]
    d23c:	8060      	strh	r0, [r4, #2]
    d23e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d242:	d903      	bls.n	d24c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d244:	21af      	movs	r1, #175	; 0xaf
    d246:	2014      	movs	r0, #20
    d248:	f7f7 fa7e 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d24c:	8026      	strh	r6, [r4, #0]
    d24e:	2000      	movs	r0, #0
    d250:	7760      	strb	r0, [r4, #29]
    d252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d256 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d256:	6181      	str	r1, [r0, #24]
    d258:	6188      	str	r0, [r1, #24]
    d25a:	4770      	bx	lr

0000d25c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d260:	460b      	mov	r3, r1
    d262:	4604      	mov	r4, r0
    d264:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d268:	8905      	ldrh	r5, [r0, #8]
    d26a:	8946      	ldrh	r6, [r0, #10]
    d26c:	8880      	ldrh	r0, [r0, #4]
    d26e:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d272:	4439      	add	r1, r7
    d274:	460f      	mov	r7, r1
    d276:	4285      	cmp	r5, r0
    d278:	d102      	bne.n	d280 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d27a:	2000      	movs	r0, #0
    d27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d280:	b10a      	cbz	r2, d286 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d282:	1cc8      	adds	r0, r1, #3
    d284:	6010      	str	r0, [r2, #0]
    d286:	b123      	cbz	r3, d292 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d288:	7f22      	ldrb	r2, [r4, #28]
    d28a:	1cf9      	adds	r1, r7, #3
    d28c:	4618      	mov	r0, r3
    d28e:	f7ff f8bb 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d292:	883f      	ldrh	r7, [r7, #0]
    d294:	f104 0108 	add.w	r1, r4, #8
    d298:	4620      	mov	r0, r4
    d29a:	f7ff fd9f 	bl	cddc <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d29e:	42b5      	cmp	r5, r6
    d2a0:	d101      	bne.n	d2a6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d2a2:	8920      	ldrh	r0, [r4, #8]
    d2a4:	8160      	strh	r0, [r4, #10]
    d2a6:	4638      	mov	r0, r7
    d2a8:	e7e8      	b.n	d27c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d2aa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d2aa:	4401      	add	r1, r0
    d2ac:	1d89      	adds	r1, r1, #6
    d2ae:	4351      	muls	r1, r2
    d2b0:	b28a      	uxth	r2, r1
    d2b2:	2100      	movs	r1, #0
    d2b4:	2845      	cmp	r0, #69	; 0x45
    d2b6:	d201      	bcs.n	d2bc <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d2b8:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d2bc:	3224      	adds	r2, #36	; 0x24
    d2be:	1850      	adds	r0, r2, r1
    d2c0:	b280      	uxth	r0, r0
    d2c2:	4770      	bx	lr

0000d2c4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d2c8:	4688      	mov	r8, r1
    d2ca:	88c1      	ldrh	r1, [r0, #6]
    d2cc:	4604      	mov	r4, r0
    d2ce:	8900      	ldrh	r0, [r0, #8]
    d2d0:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d2d4:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d2d8:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d2dc:	eb05 0906 	add.w	r9, r5, r6
    d2e0:	f7ff fd9d 	bl	ce1e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d2e4:	2200      	movs	r2, #0
    d2e6:	b998      	cbnz	r0, d310 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d2e8:	8820      	ldrh	r0, [r4, #0]
    d2ea:	2845      	cmp	r0, #69	; 0x45
    d2ec:	d200      	bcs.n	d2f0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d2ee:	2045      	movs	r0, #69	; 0x45
    d2f0:	42b7      	cmp	r7, r6
    d2f2:	d906      	bls.n	d302 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d2f4:	7f23      	ldrb	r3, [r4, #28]
    d2f6:	1bb9      	subs	r1, r7, r6
    d2f8:	1ac9      	subs	r1, r1, r3
    d2fa:	1f89      	subs	r1, r1, #6
    d2fc:	4281      	cmp	r1, r0
    d2fe:	da00      	bge.n	d302 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d300:	4608      	mov	r0, r1
    d302:	89e1      	ldrh	r1, [r4, #14]
    d304:	b111      	cbz	r1, d30c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d306:	f8b9 3000 	ldrh.w	r3, [r9]
    d30a:	1ac0      	subs	r0, r0, r3
    d30c:	4540      	cmp	r0, r8
    d30e:	da03      	bge.n	d318 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d310:	8262      	strh	r2, [r4, #18]
    d312:	2000      	movs	r0, #0
    d314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d318:	7f20      	ldrb	r0, [r4, #28]
    d31a:	4429      	add	r1, r5
    d31c:	1d80      	adds	r0, r0, #6
    d31e:	4430      	add	r0, r6
    d320:	4408      	add	r0, r1
    d322:	f8a4 8012 	strh.w	r8, [r4, #18]
    d326:	1ec0      	subs	r0, r0, #3
    d328:	e7f4      	b.n	d314 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d32a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d32a:	2100      	movs	r1, #0
    d32c:	81c1      	strh	r1, [r0, #14]
    d32e:	8241      	strh	r1, [r0, #18]
    d330:	7581      	strb	r1, [r0, #22]
    d332:	4770      	bx	lr

0000d334 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d334:	b570      	push	{r4, r5, r6, lr}
    d336:	2300      	movs	r3, #0
    d338:	2908      	cmp	r1, #8
    d33a:	d204      	bcs.n	d346 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d33c:	f240 11cb 	movw	r1, #459	; 0x1cb
    d340:	2015      	movs	r0, #21
    d342:	f7f7 fa01 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d346:	6802      	ldr	r2, [r0, #0]
    d348:	b90a      	cbnz	r2, d34e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d34a:	e01e      	b.n	d38a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d34c:	4610      	mov	r0, r2
    d34e:	6802      	ldr	r2, [r0, #0]
    d350:	8893      	ldrh	r3, [r2, #4]
    d352:	428b      	cmp	r3, r1
    d354:	d002      	beq.n	d35c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d356:	6813      	ldr	r3, [r2, #0]
    d358:	2b00      	cmp	r3, #0
    d35a:	d1f7      	bne.n	d34c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d35c:	8894      	ldrh	r4, [r2, #4]
    d35e:	4613      	mov	r3, r2
    d360:	428c      	cmp	r4, r1
    d362:	d101      	bne.n	d368 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d364:	6811      	ldr	r1, [r2, #0]
    d366:	e00d      	b.n	d384 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d368:	f101 0508 	add.w	r5, r1, #8
    d36c:	b2ae      	uxth	r6, r5
    d36e:	2500      	movs	r5, #0
    d370:	42b4      	cmp	r4, r6
    d372:	d309      	bcc.n	d388 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d374:	1a64      	subs	r4, r4, r1
    d376:	4411      	add	r1, r2
    d378:	600d      	str	r5, [r1, #0]
    d37a:	808c      	strh	r4, [r1, #4]
    d37c:	6802      	ldr	r2, [r0, #0]
    d37e:	6812      	ldr	r2, [r2, #0]
    d380:	6002      	str	r2, [r0, #0]
    d382:	600a      	str	r2, [r1, #0]
    d384:	6001      	str	r1, [r0, #0]
    d386:	e000      	b.n	d38a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d388:	2300      	movs	r3, #0
    d38a:	4618      	mov	r0, r3
    d38c:	bd70      	pop	{r4, r5, r6, pc}

0000d38e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d38e:	b510      	push	{r4, lr}
    d390:	000c      	movs	r4, r1
    d392:	d006      	beq.n	d3a2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d394:	2c08      	cmp	r4, #8
    d396:	d209      	bcs.n	d3ac <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d398:	f240 1195 	movw	r1, #405	; 0x195
    d39c:	2015      	movs	r0, #21
    d39e:	f7f7 f9d3 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3a2:	b108      	cbz	r0, d3a8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d3a4:	2100      	movs	r1, #0
    d3a6:	6001      	str	r1, [r0, #0]
    d3a8:	2000      	movs	r0, #0
    d3aa:	bd10      	pop	{r4, pc}
    d3ac:	b118      	cbz	r0, d3b6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d3ae:	b2a1      	uxth	r1, r4
    d3b0:	6800      	ldr	r0, [r0, #0]
    d3b2:	f000 f814 	bl	d3de <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d3b6:	1d20      	adds	r0, r4, #4
    d3b8:	bd10      	pop	{r4, pc}

0000d3ba <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d3ba:	2100      	movs	r1, #0
    d3bc:	6802      	ldr	r2, [r0, #0]
    d3be:	e003      	b.n	d3c8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d3c0:	8893      	ldrh	r3, [r2, #4]
    d3c2:	6812      	ldr	r2, [r2, #0]
    d3c4:	4419      	add	r1, r3
    d3c6:	b289      	uxth	r1, r1
    d3c8:	2a00      	cmp	r2, #0
    d3ca:	d1f9      	bne.n	d3c0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d3cc:	f000 b807 	b.w	d3de <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d3d0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d3d0:	2300      	movs	r3, #0
    d3d2:	600b      	str	r3, [r1, #0]
    d3d4:	808a      	strh	r2, [r1, #4]
    d3d6:	6802      	ldr	r2, [r0, #0]
    d3d8:	600a      	str	r2, [r1, #0]
    d3da:	6001      	str	r1, [r0, #0]
    d3dc:	4770      	bx	lr
    d3de:	2300      	movs	r3, #0
    d3e0:	6043      	str	r3, [r0, #4]
    d3e2:	1d02      	adds	r2, r0, #4
    d3e4:	8101      	strh	r1, [r0, #8]
    d3e6:	6002      	str	r2, [r0, #0]
    d3e8:	4770      	bx	lr

0000d3ea <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d3ea:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    d3ee:	3bff      	subs	r3, #255	; 0xff
    d3f0:	d001      	beq.n	d3f6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d3f2:	2902      	cmp	r1, #2
    d3f4:	d301      	bcc.n	d3fa <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d3f6:	2000      	movs	r0, #0
    d3f8:	4770      	bx	lr
    d3fa:	f7f7 bc5f 	b.w	4cbc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d3fe:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d402:	3aff      	subs	r2, #255	; 0xff
    d404:	d001      	beq.n	d40a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d406:	2902      	cmp	r1, #2
    d408:	d301      	bcc.n	d40e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d40a:	2000      	movs	r0, #0
    d40c:	4770      	bx	lr
    d40e:	f7f7 bc8f 	b.w	4d30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000d412 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d412:	b570      	push	{r4, r5, r6, lr}
    d414:	4605      	mov	r5, r0
    d416:	460c      	mov	r4, r1
    d418:	4608      	mov	r0, r1
    d41a:	f000 f973 	bl	d704 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d41e:	b108      	cbz	r0, d424 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d420:	2010      	movs	r0, #16
    d422:	bd70      	pop	{r4, r5, r6, pc}
    d424:	2d02      	cmp	r5, #2
    d426:	d301      	bcc.n	d42c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    d428:	2007      	movs	r0, #7
    d42a:	bd70      	pop	{r4, r5, r6, pc}
    d42c:	7025      	strb	r5, [r4, #0]
    d42e:	2000      	movs	r0, #0
    d430:	8060      	strh	r0, [r4, #2]
    d432:	bd70      	pop	{r4, r5, r6, pc}
    d434:	b510      	push	{r4, lr}
    d436:	4604      	mov	r4, r0
    d438:	f7f7 fcc6 	bl	4dc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    d43c:	42a0      	cmp	r0, r4
    d43e:	d901      	bls.n	d444 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    d440:	2001      	movs	r0, #1
    d442:	bd10      	pop	{r4, pc}
    d444:	2000      	movs	r0, #0
    d446:	bd10      	pop	{r4, pc}
    d448:	4770      	bx	lr

0000d44a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d44a:	b570      	push	{r4, r5, r6, lr}
    d44c:	460e      	mov	r6, r1
    d44e:	461d      	mov	r5, r3
    d450:	4611      	mov	r1, r2
    d452:	f000 f811 	bl	d478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d456:	4604      	mov	r4, r0
    d458:	4629      	mov	r1, r5
    d45a:	4630      	mov	r0, r6
    d45c:	f000 f803 	bl	d466 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d460:	4420      	add	r0, r4
    d462:	1d00      	adds	r0, r0, #4
    d464:	bd70      	pop	{r4, r5, r6, pc}
    d466:	b510      	push	{r4, lr}
    d468:	460a      	mov	r2, r1
    d46a:	2101      	movs	r1, #1
    d46c:	f7ff ff1d 	bl	d2aa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d470:	1cc0      	adds	r0, r0, #3
    d472:	f020 0003 	bic.w	r0, r0, #3
    d476:	bd10      	pop	{r4, pc}
    d478:	b510      	push	{r4, lr}
    d47a:	460a      	mov	r2, r1
    d47c:	2101      	movs	r1, #1
    d47e:	f7ff ff14 	bl	d2aa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d482:	1cc0      	adds	r0, r0, #3
    d484:	f020 0003 	bic.w	r0, r0, #3
    d488:	bd10      	pop	{r4, pc}
    d48a:	b109      	cbz	r1, d490 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d48c:	2100      	movs	r1, #0
    d48e:	e000      	b.n	d492 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    d490:	2102      	movs	r1, #2
    d492:	1843      	adds	r3, r0, r1
    d494:	7d1a      	ldrb	r2, [r3, #20]
    d496:	2a02      	cmp	r2, #2
    d498:	d008      	beq.n	d4ac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d49a:	7d5b      	ldrb	r3, [r3, #21]
    d49c:	2b02      	cmp	r3, #2
    d49e:	d009      	beq.n	d4b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    d4a0:	2a03      	cmp	r2, #3
    d4a2:	d003      	beq.n	d4ac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d4a4:	2b03      	cmp	r3, #3
    d4a6:	d005      	beq.n	d4b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    d4a8:	2000      	movs	r0, #0
    d4aa:	4770      	bx	lr
    d4ac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d4b0:	8b00      	ldrh	r0, [r0, #24]
    d4b2:	4770      	bx	lr
    d4b4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d4b8:	8b40      	ldrh	r0, [r0, #26]
    d4ba:	4770      	bx	lr
    d4bc:	b109      	cbz	r1, d4c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d4be:	2100      	movs	r1, #0
    d4c0:	e000      	b.n	d4c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    d4c2:	2102      	movs	r1, #2
    d4c4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d4c8:	8b01      	ldrh	r1, [r0, #24]
    d4ca:	b911      	cbnz	r1, d4d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    d4cc:	8b40      	ldrh	r0, [r0, #26]
    d4ce:	2800      	cmp	r0, #0
    d4d0:	d000      	beq.n	d4d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    d4d2:	2001      	movs	r0, #1
    d4d4:	4770      	bx	lr
    d4d6:	b538      	push	{r3, r4, r5, lr}
    d4d8:	7883      	ldrb	r3, [r0, #2]
    d4da:	f88d 3000 	strb.w	r3, [sp]
    d4de:	9b00      	ldr	r3, [sp, #0]
    d4e0:	9300      	str	r3, [sp, #0]
    d4e2:	f89d 3000 	ldrb.w	r3, [sp]
    d4e6:	b953      	cbnz	r3, d4fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
    d4e8:	b10a      	cbz	r2, d4ee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
    d4ea:	2300      	movs	r3, #0
    d4ec:	e000      	b.n	d4f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    d4ee:	2302      	movs	r3, #2
    d4f0:	18c2      	adds	r2, r0, r3
    d4f2:	7d14      	ldrb	r4, [r2, #20]
    d4f4:	2c02      	cmp	r4, #2
    d4f6:	d004      	beq.n	d502 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    d4f8:	7d52      	ldrb	r2, [r2, #21]
    d4fa:	2a02      	cmp	r2, #2
    d4fc:	d004      	beq.n	d508 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
    d4fe:	2000      	movs	r0, #0
    d500:	bd38      	pop	{r3, r4, r5, pc}
    d502:	461a      	mov	r2, r3
    d504:	1c5b      	adds	r3, r3, #1
    d506:	e000      	b.n	d50a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d508:	1c5a      	adds	r2, r3, #1
    d50a:	b181      	cbz	r1, d52e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    d50c:	18c5      	adds	r5, r0, r3
    d50e:	2400      	movs	r4, #0
    d510:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d514:	752c      	strb	r4, [r5, #20]
    d516:	831c      	strh	r4, [r3, #24]
    d518:	2303      	movs	r3, #3
    d51a:	1884      	adds	r4, r0, r2
    d51c:	7523      	strb	r3, [r4, #20]
    d51e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d522:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d526:	685b      	ldr	r3, [r3, #4]
    d528:	600b      	str	r3, [r1, #0]
    d52a:	8b00      	ldrh	r0, [r0, #24]
    d52c:	8088      	strh	r0, [r1, #4]
    d52e:	2001      	movs	r0, #1
    d530:	bd38      	pop	{r3, r4, r5, pc}
    d532:	b510      	push	{r4, lr}
    d534:	b109      	cbz	r1, d53a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    d536:	2100      	movs	r1, #0
    d538:	e000      	b.n	d53c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    d53a:	2102      	movs	r1, #2
    d53c:	1843      	adds	r3, r0, r1
    d53e:	7d1c      	ldrb	r4, [r3, #20]
    d540:	4294      	cmp	r4, r2
    d542:	d103      	bne.n	d54c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    d544:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d548:	8b00      	ldrh	r0, [r0, #24]
    d54a:	bd10      	pop	{r4, pc}
    d54c:	7d5b      	ldrb	r3, [r3, #21]
    d54e:	4293      	cmp	r3, r2
    d550:	d103      	bne.n	d55a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    d552:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d556:	8b40      	ldrh	r0, [r0, #26]
    d558:	bd10      	pop	{r4, pc}
    d55a:	2000      	movs	r0, #0
    d55c:	bd10      	pop	{r4, pc}
    d55e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d562:	d201      	bcs.n	d568 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    d564:	0841      	lsrs	r1, r0, #1
    d566:	e000      	b.n	d56a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    d568:	21ff      	movs	r1, #255	; 0xff
    d56a:	1a40      	subs	r0, r0, r1
    d56c:	f240 6172 	movw	r1, #1650	; 0x672
    d570:	4288      	cmp	r0, r1
    d572:	db00      	blt.n	d576 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    d574:	4608      	mov	r0, r1
    d576:	b280      	uxth	r0, r0
    d578:	4770      	bx	lr

0000d57a <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d57a:	2101      	movs	r1, #1
    d57c:	f7ff bf85 	b.w	d48a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000d580 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d584:	4606      	mov	r6, r0
    d586:	f342 0780 	sbfx	r7, r2, #2, #1
    d58a:	7848      	ldrb	r0, [r1, #1]
    d58c:	460c      	mov	r4, r1
    d58e:	f022 0504 	bic.w	r5, r2, #4
    d592:	1c7f      	adds	r7, r7, #1
    d594:	b100      	cbz	r0, d598 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d596:	b90d      	cbnz	r5, d59c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d598:	4328      	orrs	r0, r5
    d59a:	d104      	bne.n	d5a6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d59c:	b145      	cbz	r5, d5b0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d59e:	2100      	movs	r1, #0
    d5a0:	4620      	mov	r0, r4
    d5a2:	f7f7 fd19 	bl	4fd8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d5a6:	2101      	movs	r1, #1
    d5a8:	70a1      	strb	r1, [r4, #2]
    d5aa:	b11f      	cbz	r7, d5b4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d5ac:	2000      	movs	r0, #0
    d5ae:	e002      	b.n	d5b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d5b0:	2101      	movs	r1, #1
    d5b2:	e7f5      	b.n	d5a0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d5b4:	2002      	movs	r0, #2
    d5b6:	1822      	adds	r2, r4, r0
    d5b8:	7d12      	ldrb	r2, [r2, #20]
    d5ba:	2a03      	cmp	r2, #3
    d5bc:	d102      	bne.n	d5c4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d5be:	2d02      	cmp	r5, #2
    d5c0:	d000      	beq.n	d5c4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d5c2:	1c40      	adds	r0, r0, #1
    d5c4:	1822      	adds	r2, r4, r0
    d5c6:	7511      	strb	r1, [r2, #20]
    d5c8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d5cc:	2200      	movs	r2, #0
    d5ce:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d5d2:	830a      	strh	r2, [r1, #24]
    d5d4:	6840      	ldr	r0, [r0, #4]
    d5d6:	70a2      	strb	r2, [r4, #2]
    d5d8:	4631      	mov	r1, r6
    d5da:	f362 010f 	bfi	r1, r2, #0, #16
    d5de:	e9c6 0100 	strd	r0, r1, [r6]
    d5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5e6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5ea:	461e      	mov	r6, r3
    d5ec:	4613      	mov	r3, r2
    d5ee:	4604      	mov	r4, r0
    d5f0:	b109      	cbz	r1, d5f6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d5f2:	2000      	movs	r0, #0
    d5f4:	e000      	b.n	d5f8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d5f6:	2002      	movs	r0, #2
    d5f8:	2101      	movs	r1, #1
    d5fa:	70a1      	strb	r1, [r4, #2]
    d5fc:	1821      	adds	r1, r4, r0
    d5fe:	7d0a      	ldrb	r2, [r1, #20]
    d600:	2a01      	cmp	r2, #1
    d602:	d003      	beq.n	d60c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d604:	7d49      	ldrb	r1, [r1, #21]
    d606:	2901      	cmp	r1, #1
    d608:	d10c      	bne.n	d624 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d60a:	1c40      	adds	r0, r0, #1
    d60c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d610:	2700      	movs	r7, #0
    d612:	8b29      	ldrh	r1, [r5, #24]
    d614:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d618:	198a      	adds	r2, r1, r6
    d61a:	4562      	cmp	r2, ip
    d61c:	d905      	bls.n	d62a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d61e:	4420      	add	r0, r4
    d620:	832f      	strh	r7, [r5, #24]
    d622:	7507      	strb	r7, [r0, #20]
    d624:	2000      	movs	r0, #0
    d626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d62a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d62e:	4632      	mov	r2, r6
    d630:	6840      	ldr	r0, [r0, #4]
    d632:	4408      	add	r0, r1
    d634:	4619      	mov	r1, r3
    d636:	f7fe fee7 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d63a:	8b28      	ldrh	r0, [r5, #24]
    d63c:	4430      	add	r0, r6
    d63e:	8328      	strh	r0, [r5, #24]
    d640:	70a7      	strb	r7, [r4, #2]
    d642:	2001      	movs	r0, #1
    d644:	e7ef      	b.n	d626 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d646 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    d646:	2202      	movs	r2, #2
    d648:	2100      	movs	r1, #0
    d64a:	f7ff bf72 	b.w	d532 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d64e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d64e:	b510      	push	{r4, lr}
    d650:	2101      	movs	r1, #1
    d652:	f7ff ff33 	bl	d4bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    d656:	2800      	cmp	r0, #0
    d658:	d000      	beq.n	d65c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d65a:	2001      	movs	r0, #1
    d65c:	bd10      	pop	{r4, pc}

0000d65e <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d65e:	2201      	movs	r2, #1
    d660:	f7ff bf39 	b.w	d4d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000d664 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d664:	2200      	movs	r2, #0
    d666:	f7ff bf36 	b.w	d4d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000d66a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d66a:	b570      	push	{r4, r5, r6, lr}
    d66c:	b109      	cbz	r1, d672 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d66e:	2300      	movs	r3, #0
    d670:	e000      	b.n	d674 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d672:	2302      	movs	r3, #2
    d674:	2101      	movs	r1, #1
    d676:	7081      	strb	r1, [r0, #2]
    d678:	18c1      	adds	r1, r0, r3
    d67a:	2402      	movs	r4, #2
    d67c:	7d0d      	ldrb	r5, [r1, #20]
    d67e:	2d01      	cmp	r5, #1
    d680:	d007      	beq.n	d692 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d682:	7d4d      	ldrb	r5, [r1, #21]
    d684:	2d01      	cmp	r5, #1
    d686:	d009      	beq.n	d69c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d688:	f44f 718b 	mov.w	r1, #278	; 0x116
    d68c:	2009      	movs	r0, #9
    d68e:	f7f7 f85b 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d692:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d696:	831a      	strh	r2, [r3, #24]
    d698:	750c      	strb	r4, [r1, #20]
    d69a:	e003      	b.n	d6a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d69c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d6a0:	835a      	strh	r2, [r3, #26]
    d6a2:	754c      	strb	r4, [r1, #21]
    d6a4:	2100      	movs	r1, #0
    d6a6:	7081      	strb	r1, [r0, #2]
    d6a8:	bd70      	pop	{r4, r5, r6, pc}

0000d6aa <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d6aa:	2101      	movs	r1, #1
    d6ac:	7001      	strb	r1, [r0, #0]
    d6ae:	4770      	bx	lr

0000d6b0 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d6b0:	2201      	movs	r2, #1
    d6b2:	4611      	mov	r1, r2
    d6b4:	f7ff bf3d 	b.w	d532 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d6b8 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d6b8:	2201      	movs	r2, #1
    d6ba:	2100      	movs	r1, #0
    d6bc:	f7ff bf39 	b.w	d532 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d6c0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d6c0:	2100      	movs	r1, #0
    d6c2:	f7ff bee2 	b.w	d48a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    d6c6:	2800      	cmp	r0, #0
    d6c8:	db09      	blt.n	d6de <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d6ca:	f000 021f 	and.w	r2, r0, #31
    d6ce:	2101      	movs	r1, #1
    d6d0:	4091      	lsls	r1, r2
    d6d2:	0940      	lsrs	r0, r0, #5
    d6d4:	0080      	lsls	r0, r0, #2
    d6d6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6da:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d6de:	4770      	bx	lr
    d6e0:	5840      	ldr	r0, [r0, r1]
    d6e2:	2800      	cmp	r0, #0
    d6e4:	d000      	beq.n	d6e8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x28>
    d6e6:	2001      	movs	r0, #1
    d6e8:	4770      	bx	lr

0000d6ea <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d6ea:	f7f7 bdcb 	b.w	5284 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d6ee <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d6ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d6f2:	2000      	movs	r0, #0
    d6f4:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d6f8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d6fc:	2001      	movs	r0, #1
    d6fe:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d702:	4770      	bx	lr

0000d704 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d704:	b108      	cbz	r0, d70a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d706:	2000      	movs	r0, #0
    d708:	4770      	bx	lr
    d70a:	2001      	movs	r0, #1
    d70c:	4770      	bx	lr

0000d70e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d70e:	f7f7 bf0b 	b.w	5528 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d712 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d712:	f7f7 bef9 	b.w	5508 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d716 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d716:	b510      	push	{r4, lr}
    d718:	2900      	cmp	r1, #0
    d71a:	4604      	mov	r4, r0
    d71c:	f04f 0106 	mov.w	r1, #6
    d720:	d002      	beq.n	d728 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d722:	f7f7 f89d 	bl	4860 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d726:	e001      	b.n	d72c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d728:	f7f7 f8a8 	bl	487c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d72c:	7960      	ldrb	r0, [r4, #5]
    d72e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d732:	7160      	strb	r0, [r4, #5]
    d734:	bd10      	pop	{r4, pc}

0000d736 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d736:	4770      	bx	lr

0000d738 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d738:	b530      	push	{r4, r5, lr}
    d73a:	460c      	mov	r4, r1
    d73c:	4605      	mov	r5, r0
    d73e:	b08d      	sub	sp, #52	; 0x34
    d740:	f04f 0103 	mov.w	r1, #3
    d744:	f104 0003 	add.w	r0, r4, #3
    d748:	b112      	cbz	r2, d750 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d74a:	f7f7 f889 	bl	4860 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d74e:	e001      	b.n	d754 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d750:	f7f7 f894 	bl	487c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d754:	7960      	ldrb	r0, [r4, #5]
    d756:	220d      	movs	r2, #13
    d758:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d75c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d760:	7160      	strb	r0, [r4, #5]
    d762:	2100      	movs	r1, #0
    d764:	a804      	add	r0, sp, #16
    d766:	f7fe fec9 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d76a:	78e0      	ldrb	r0, [r4, #3]
    d76c:	f88d 001f 	strb.w	r0, [sp, #31]
    d770:	7920      	ldrb	r0, [r4, #4]
    d772:	f88d 001e 	strb.w	r0, [sp, #30]
    d776:	7960      	ldrb	r0, [r4, #5]
    d778:	f88d 001d 	strb.w	r0, [sp, #29]
    d77c:	2210      	movs	r2, #16
    d77e:	4629      	mov	r1, r5
    d780:	4668      	mov	r0, sp
    d782:	f7fe fe41 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d786:	4668      	mov	r0, sp
    d788:	f7ff ffaf 	bl	d6ea <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d78c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d790:	7020      	strb	r0, [r4, #0]
    d792:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d796:	7060      	strb	r0, [r4, #1]
    d798:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d79c:	70a0      	strb	r0, [r4, #2]
    d79e:	b00d      	add	sp, #52	; 0x34
    d7a0:	bd30      	pop	{r4, r5, pc}

0000d7a2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d7a2:	f7f8 ba99 	b.w	5cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    d7a6:	07c1      	lsls	r1, r0, #31
    d7a8:	d001      	beq.n	d7ae <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d7aa:	2001      	movs	r0, #1
    d7ac:	4770      	bx	lr
    d7ae:	0780      	lsls	r0, r0, #30
    d7b0:	d501      	bpl.n	d7b6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d7b2:	2002      	movs	r0, #2
    d7b4:	4770      	bx	lr
    d7b6:	2000      	movs	r0, #0
    d7b8:	4770      	bx	lr
    d7ba:	b510      	push	{r4, lr}
    d7bc:	2801      	cmp	r0, #1
    d7be:	d008      	beq.n	d7d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d7c0:	2802      	cmp	r0, #2
    d7c2:	d004      	beq.n	d7ce <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d7c4:	f240 31ad 	movw	r1, #941	; 0x3ad
    d7c8:	2006      	movs	r0, #6
    d7ca:	f7f6 ffbd 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7ce:	2001      	movs	r0, #1
    d7d0:	bd10      	pop	{r4, pc}
    d7d2:	2000      	movs	r0, #0
    d7d4:	bd10      	pop	{r4, pc}
    d7d6:	2900      	cmp	r1, #0
    d7d8:	d004      	beq.n	d7e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d7da:	2801      	cmp	r0, #1
    d7dc:	d003      	beq.n	d7e6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d7de:	2901      	cmp	r1, #1
    d7e0:	d001      	beq.n	d7e6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d7e2:	2002      	movs	r0, #2
    d7e4:	4770      	bx	lr
    d7e6:	2001      	movs	r0, #1
    d7e8:	4770      	bx	lr
    d7ea:	f7ff bcab 	b.w	d144 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d7ee <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d7ee:	2101      	movs	r1, #1
    d7f0:	f7f8 be02 	b.w	63f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d7f4 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d7f4:	b510      	push	{r4, lr}
    d7f6:	f002 fc46 	bl	10086 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d7fa:	b118      	cbz	r0, d804 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d800:	f7fd bb58 	b.w	aeb4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d804:	20ff      	movs	r0, #255	; 0xff
    d806:	bd10      	pop	{r4, pc}

0000d808 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d808:	b510      	push	{r4, lr}
    d80a:	f7f8 fe3d 	bl	6488 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d80e:	2810      	cmp	r0, #16
    d810:	d003      	beq.n	d81a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d812:	f7f8 fe09 	bl	6428 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d816:	2810      	cmp	r0, #16
    d818:	d100      	bne.n	d81c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d81a:	2008      	movs	r0, #8
    d81c:	bd10      	pop	{r4, pc}

0000d81e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d81e:	b510      	push	{r4, lr}
    d820:	f7f8 fe32 	bl	6488 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d824:	2810      	cmp	r0, #16
    d826:	d007      	beq.n	d838 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d828:	f7f8 fdfe 	bl	6428 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d82c:	2810      	cmp	r0, #16
    d82e:	d003      	beq.n	d838 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d830:	f7f8 fe72 	bl	6518 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    d834:	2001      	movs	r0, #1
    d836:	bd10      	pop	{r4, pc}
    d838:	2000      	movs	r0, #0
    d83a:	bd10      	pop	{r4, pc}

0000d83c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d83c:	b510      	push	{r4, lr}
    d83e:	f7f8 fe23 	bl	6488 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d842:	2810      	cmp	r0, #16
    d844:	d003      	beq.n	d84e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d846:	f7f8 feaf 	bl	65a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    d84a:	2001      	movs	r0, #1
    d84c:	bd10      	pop	{r4, pc}
    d84e:	2000      	movs	r0, #0
    d850:	bd10      	pop	{r4, pc}

0000d852 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d852:	b570      	push	{r4, r5, r6, lr}
    d854:	460e      	mov	r6, r1
    d856:	b08c      	sub	sp, #48	; 0x30
    d858:	4614      	mov	r4, r2
    d85a:	4601      	mov	r1, r0
    d85c:	461d      	mov	r5, r3
    d85e:	2210      	movs	r2, #16
    d860:	4668      	mov	r0, sp
    d862:	f000 f91a 	bl	da9a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d866:	2210      	movs	r2, #16
    d868:	4631      	mov	r1, r6
    d86a:	a804      	add	r0, sp, #16
    d86c:	f000 f915 	bl	da9a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d870:	4668      	mov	r0, sp
    d872:	f7ff ff3a 	bl	d6ea <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d876:	a908      	add	r1, sp, #32
    d878:	f04f 0210 	mov.w	r2, #16
    d87c:	4628      	mov	r0, r5
    d87e:	b11c      	cbz	r4, d888 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d880:	f000 f90b 	bl	da9a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d884:	b00c      	add	sp, #48	; 0x30
    d886:	bd70      	pop	{r4, r5, r6, pc}
    d888:	f7fe fdbe 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d88c:	e7fa      	b.n	d884 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d88e:	b510      	push	{r4, lr}
    d890:	460c      	mov	r4, r1
    d892:	2100      	movs	r1, #0
    d894:	f7ff fdb3 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d898:	6060      	str	r0, [r4, #4]
    d89a:	b118      	cbz	r0, d8a4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d89c:	2001      	movs	r0, #1
    d89e:	7020      	strb	r0, [r4, #0]
    d8a0:	2000      	movs	r0, #0
    d8a2:	bd10      	pop	{r4, pc}
    d8a4:	2002      	movs	r0, #2
    d8a6:	bd10      	pop	{r4, pc}

0000d8a8 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d8a8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8ac:	4348      	muls	r0, r1
    d8ae:	4770      	bx	lr

0000d8b0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d8b0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8b4:	fbb0 f0f1 	udiv	r0, r0, r1
    d8b8:	b280      	uxth	r0, r0
    d8ba:	4770      	bx	lr

0000d8bc <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d8bc:	b570      	push	{r4, r5, r6, lr}
    d8be:	4604      	mov	r4, r0
    d8c0:	4290      	cmp	r0, r2
    d8c2:	d20b      	bcs.n	d8dc <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d8c4:	1b10      	subs	r0, r2, r4
    d8c6:	2865      	cmp	r0, #101	; 0x65
    d8c8:	d200      	bcs.n	d8cc <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d8ca:	2065      	movs	r0, #101	; 0x65
    d8cc:	1825      	adds	r5, r4, r0
    d8ce:	428d      	cmp	r5, r1
    d8d0:	d803      	bhi.n	d8da <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d8d2:	2104      	movs	r1, #4
    d8d4:	f7f4 fa64 	bl	1da0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d8d8:	b108      	cbz	r0, d8de <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d8da:	4620      	mov	r0, r4
    d8dc:	bd70      	pop	{r4, r5, r6, pc}
    d8de:	4628      	mov	r0, r5
    d8e0:	bd70      	pop	{r4, r5, r6, pc}

0000d8e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d8e2:	b510      	push	{r4, lr}
    d8e4:	f1a2 030f 	sub.w	r3, r2, #15
    d8e8:	290c      	cmp	r1, #12
    d8ea:	d244      	bcs.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d8ec:	e8df f001 	tbb	[pc, r1]
    d8f0:	120d0806 	.word	0x120d0806
    d8f4:	241c1815 	.word	0x241c1815
    d8f8:	312a4127 	.word	0x312a4127
    d8fc:	b3c2      	cbz	r2, d970 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d8fe:	e03a      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d900:	2a07      	cmp	r2, #7
    d902:	d03a      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d904:	2a08      	cmp	r2, #8
    d906:	d038      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d908:	e035      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d90a:	2a0c      	cmp	r2, #12
    d90c:	d035      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d90e:	2a0b      	cmp	r2, #11
    d910:	d033      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d912:	e030      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d914:	2a0d      	cmp	r2, #13
    d916:	d030      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d918:	e02d      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d91a:	2b0c      	cmp	r3, #12
    d91c:	d92d      	bls.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d91e:	e02a      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d920:	3a10      	subs	r2, #16
    d922:	2a0b      	cmp	r2, #11
    d924:	d929      	bls.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d926:	e026      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d928:	2b03      	cmp	r3, #3
    d92a:	d926      	bls.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d92c:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    d930:	b308      	cbz	r0, d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d932:	2a1b      	cmp	r2, #27
    d934:	d921      	bls.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d936:	e01e      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d938:	2a04      	cmp	r2, #4
    d93a:	d01e      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d93c:	e01b      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d93e:	2a06      	cmp	r2, #6
    d940:	d01b      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d942:	e018      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d944:	2a1c      	cmp	r2, #28
    d946:	d018      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d948:	2a1d      	cmp	r2, #29
    d94a:	d016      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d94c:	2a1e      	cmp	r2, #30
    d94e:	d014      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d950:	e011      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d952:	2a1f      	cmp	r2, #31
    d954:	d011      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d956:	2a20      	cmp	r2, #32
    d958:	d00f      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d95a:	2a21      	cmp	r2, #33	; 0x21
    d95c:	d00d      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d95e:	2a22      	cmp	r2, #34	; 0x22
    d960:	d00b      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d962:	2a23      	cmp	r2, #35	; 0x23
    d964:	d009      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d966:	2a24      	cmp	r2, #36	; 0x24
    d968:	d007      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d96a:	2a26      	cmp	r2, #38	; 0x26
    d96c:	d005      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d96e:	e002      	b.n	d976 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d970:	e003      	b.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d972:	2a0e      	cmp	r2, #14
    d974:	d001      	beq.n	d97a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d976:	2000      	movs	r0, #0
    d978:	bd10      	pop	{r4, pc}
    d97a:	2001      	movs	r0, #1
    d97c:	bd10      	pop	{r4, pc}

0000d97e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d97e:	280c      	cmp	r0, #12
    d980:	d013      	beq.n	d9aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d982:	280b      	cmp	r0, #11
    d984:	d011      	beq.n	d9aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d986:	280d      	cmp	r0, #13
    d988:	d00f      	beq.n	d9aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d98a:	281f      	cmp	r0, #31
    d98c:	d00d      	beq.n	d9aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d98e:	2820      	cmp	r0, #32
    d990:	d00b      	beq.n	d9aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d992:	2821      	cmp	r0, #33	; 0x21
    d994:	d009      	beq.n	d9aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d996:	2822      	cmp	r0, #34	; 0x22
    d998:	d007      	beq.n	d9aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d99a:	2823      	cmp	r0, #35	; 0x23
    d99c:	d005      	beq.n	d9aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d99e:	2824      	cmp	r0, #36	; 0x24
    d9a0:	d003      	beq.n	d9aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d9a2:	2826      	cmp	r0, #38	; 0x26
    d9a4:	d001      	beq.n	d9aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d9a6:	2000      	movs	r0, #0
    d9a8:	4770      	bx	lr
    d9aa:	2001      	movs	r0, #1
    d9ac:	4770      	bx	lr

0000d9ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d9ae:	f011 0f0c 	tst.w	r1, #12
    d9b2:	d016      	beq.n	d9e2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d9b4:	074a      	lsls	r2, r1, #29
    d9b6:	f44f 7116 	mov.w	r1, #600	; 0x258
    d9ba:	2a00      	cmp	r2, #0
    d9bc:	da02      	bge.n	d9c4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d9be:	f04f 0210 	mov.w	r2, #16
    d9c2:	e001      	b.n	d9c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d9c4:	f04f 0240 	mov.w	r2, #64	; 0x40
    d9c8:	da01      	bge.n	d9ce <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d9ca:	f04f 0196 	mov.w	r1, #150	; 0x96
    d9ce:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d9d2:	eba0 0301 	sub.w	r3, r0, r1
    d9d6:	4288      	cmp	r0, r1
    d9d8:	d910      	bls.n	d9fc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d9da:	fb93 f0f2 	sdiv	r0, r3, r2
    d9de:	b280      	uxth	r0, r0
    d9e0:	4770      	bx	lr
    d9e2:	2902      	cmp	r1, #2
    d9e4:	d002      	beq.n	d9ec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d9e6:	2870      	cmp	r0, #112	; 0x70
    d9e8:	d80a      	bhi.n	da00 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d9ea:	e007      	b.n	d9fc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d9ec:	283c      	cmp	r0, #60	; 0x3c
    d9ee:	d905      	bls.n	d9fc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d9f0:	383c      	subs	r0, #60	; 0x3c
    d9f2:	17c1      	asrs	r1, r0, #31
    d9f4:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d9f8:	1080      	asrs	r0, r0, #2
    d9fa:	e7f0      	b.n	d9de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d9fc:	2000      	movs	r0, #0
    d9fe:	e7ee      	b.n	d9de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    da00:	3870      	subs	r0, #112	; 0x70
    da02:	17c1      	asrs	r1, r0, #31
    da04:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    da08:	10c0      	asrs	r0, r0, #3
    da0a:	e7e8      	b.n	d9de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000da0c <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    da0c:	6809      	ldr	r1, [r1, #0]
    da0e:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    da12:	4770      	bx	lr

0000da14 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    da14:	07c1      	lsls	r1, r0, #31
    da16:	d001      	beq.n	da1c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    da18:	2001      	movs	r0, #1
    da1a:	4770      	bx	lr
    da1c:	0781      	lsls	r1, r0, #30
    da1e:	d501      	bpl.n	da24 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    da20:	2002      	movs	r0, #2
    da22:	4770      	bx	lr
    da24:	0740      	lsls	r0, r0, #29
    da26:	d501      	bpl.n	da2c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    da28:	2008      	movs	r0, #8
    da2a:	4770      	bx	lr
    da2c:	2000      	movs	r0, #0
    da2e:	4770      	bx	lr

0000da30 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    da30:	b510      	push	{r4, lr}
    da32:	f640 12c4 	movw	r2, #2500	; 0x9c4
    da36:	2901      	cmp	r1, #1
    da38:	d006      	beq.n	da48 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    da3a:	2902      	cmp	r1, #2
    da3c:	d005      	beq.n	da4a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    da3e:	f240 31b1 	movw	r1, #945	; 0x3b1
    da42:	2029      	movs	r0, #41	; 0x29
    da44:	f7f6 fe80 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da48:	b108      	cbz	r0, da4e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    da4a:	4610      	mov	r0, r2
    da4c:	bd10      	pop	{r4, pc}
    da4e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    da52:	bd10      	pop	{r4, pc}

0000da54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    da54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da58:	460c      	mov	r4, r1
    da5a:	4605      	mov	r5, r0
    da5c:	68c6      	ldr	r6, [r0, #12]
    da5e:	f7f4 fda5 	bl	25ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    da62:	b198      	cbz	r0, da8c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    da64:	b1bc      	cbz	r4, da96 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    da66:	4630      	mov	r0, r6
    da68:	68e9      	ldr	r1, [r5, #12]
    da6a:	f7f4 fa9d 	bl	1fa8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    da6e:	2800      	cmp	r0, #0
    da70:	dd11      	ble.n	da96 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    da72:	4420      	add	r0, r4
    da74:	1e40      	subs	r0, r0, #1
    da76:	fbb0 f7f4 	udiv	r7, r0, r4
    da7a:	fb07 f104 	mul.w	r1, r7, r4
    da7e:	4630      	mov	r0, r6
    da80:	f7f4 fa60 	bl	1f44 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    da84:	60e8      	str	r0, [r5, #12]
    da86:	4638      	mov	r0, r7
    da88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da8c:	f240 2136 	movw	r1, #566	; 0x236
    da90:	2029      	movs	r0, #41	; 0x29
    da92:	f7f6 fe59 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da96:	2000      	movs	r0, #0
    da98:	e7f6      	b.n	da88 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000da9a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    da9a:	b530      	push	{r4, r5, lr}
    da9c:	4613      	mov	r3, r2
    da9e:	e006      	b.n	daae <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    daa0:	18cc      	adds	r4, r1, r3
    daa2:	1ad5      	subs	r5, r2, r3
    daa4:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    daa8:	1e5b      	subs	r3, r3, #1
    daaa:	5544      	strb	r4, [r0, r5]
    daac:	b2db      	uxtb	r3, r3
    daae:	2b00      	cmp	r3, #0
    dab0:	d1f6      	bne.n	daa0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dab2:	bd30      	pop	{r4, r5, pc}

0000dab4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    dab4:	b538      	push	{r3, r4, r5, lr}
    dab6:	4605      	mov	r5, r0
    dab8:	460c      	mov	r4, r1
    daba:	4668      	mov	r0, sp
    dabc:	f7fd ff5a 	bl	b974 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    dac0:	b310      	cbz	r0, db08 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    dac2:	f99d 0000 	ldrsb.w	r0, [sp]
    dac6:	7260      	strb	r0, [r4, #9]
    dac8:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    dacc:	72a1      	strb	r1, [r4, #10]
    dace:	f994 100b 	ldrsb.w	r1, [r4, #11]
    dad2:	2200      	movs	r2, #0
    dad4:	1a41      	subs	r1, r0, r1
    dad6:	d500      	bpl.n	dada <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    dad8:	4249      	negs	r1, r1
    dada:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    dade:	428b      	cmp	r3, r1
    dae0:	dc10      	bgt.n	db04 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dae2:	2bff      	cmp	r3, #255	; 0xff
    dae4:	d00e      	beq.n	db04 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dae6:	7b21      	ldrb	r1, [r4, #12]
    dae8:	1c49      	adds	r1, r1, #1
    daea:	b2c9      	uxtb	r1, r1
    daec:	7321      	strb	r1, [r4, #12]
    daee:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    daf2:	4299      	cmp	r1, r3
    daf4:	d802      	bhi.n	dafc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    daf6:	7ae1      	ldrb	r1, [r4, #11]
    daf8:	297f      	cmp	r1, #127	; 0x7f
    dafa:	d103      	bne.n	db04 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dafc:	72e0      	strb	r0, [r4, #11]
    dafe:	2000      	movs	r0, #0
    db00:	7320      	strb	r0, [r4, #12]
    db02:	2201      	movs	r2, #1
    db04:	4610      	mov	r0, r2
    db06:	bd38      	pop	{r3, r4, r5, pc}
    db08:	207f      	movs	r0, #127	; 0x7f
    db0a:	7260      	strb	r0, [r4, #9]
    db0c:	2000      	movs	r0, #0
    db0e:	bd38      	pop	{r3, r4, r5, pc}

0000db10 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    db10:	2300      	movs	r3, #0
    db12:	6283      	str	r3, [r0, #40]	; 0x28
    db14:	8602      	strh	r2, [r0, #48]	; 0x30
    db16:	f240 2371 	movw	r3, #625	; 0x271
    db1a:	435a      	muls	r2, r3
    db1c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    db20:	1e52      	subs	r2, r2, #1
    db22:	fbb2 f1f1 	udiv	r1, r2, r1
    db26:	62c1      	str	r1, [r0, #44]	; 0x2c
    db28:	4770      	bx	lr

0000db2a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    db2a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    db2e:	4607      	mov	r7, r0
    db30:	4690      	mov	r8, r2
    db32:	468b      	mov	fp, r1
    db34:	2601      	movs	r6, #1
    db36:	4608      	mov	r0, r1
    db38:	f000 f941 	bl	ddbe <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    db3c:	4682      	mov	sl, r0
    db3e:	4658      	mov	r0, fp
    db40:	f000 f949 	bl	ddd6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    db44:	4681      	mov	r9, r0
    db46:	f7ff ff65 	bl	da14 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db4a:	4604      	mov	r4, r0
    db4c:	4650      	mov	r0, sl
    db4e:	f7ff ff61 	bl	da14 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db52:	4605      	mov	r5, r0
    db54:	ea54 0005 	orrs.w	r0, r4, r5
    db58:	d100      	bne.n	db5c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    db5a:	2600      	movs	r6, #0
    db5c:	f7fd f932 	bl	adc4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    db60:	ea10 0f09 	tst.w	r0, r9
    db64:	d100      	bne.n	db68 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    db66:	2400      	movs	r4, #0
    db68:	f7fd f92c 	bl	adc4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    db6c:	ea10 0f0a 	tst.w	r0, sl
    db70:	d100      	bne.n	db74 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    db72:	2500      	movs	r5, #0
    db74:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    db78:	42a0      	cmp	r0, r4
    db7a:	d100      	bne.n	db7e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    db7c:	2400      	movs	r4, #0
    db7e:	f888 4000 	strb.w	r4, [r8]
    db82:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    db86:	42a8      	cmp	r0, r5
    db88:	d100      	bne.n	db8c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    db8a:	2500      	movs	r5, #0
    db8c:	f888 5001 	strb.w	r5, [r8, #1]
    db90:	b974      	cbnz	r4, dbb0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    db92:	b96d      	cbnz	r5, dbb0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    db94:	4658      	mov	r0, fp
    db96:	f000 f91c 	bl	ddd2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    db9a:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    db9e:	1a40      	subs	r0, r0, r1
    dba0:	b200      	sxth	r0, r0
    dba2:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    dba6:	4288      	cmp	r0, r1
    dba8:	dc01      	bgt.n	dbae <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    dbaa:	2800      	cmp	r0, #0
    dbac:	dc00      	bgt.n	dbb0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbae:	2600      	movs	r6, #0
    dbb0:	4630      	mov	r0, r6
    dbb2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000dbb6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dbb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbba:	4348      	muls	r0, r1
    dbbc:	4770      	bx	lr

0000dbbe <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dbbe:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbc2:	fb10 f001 	smulbb	r0, r0, r1
    dbc6:	4770      	bx	lr

0000dbc8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dbc8:	b510      	push	{r4, lr}
    dbca:	2300      	movs	r3, #0
    dbcc:	461a      	mov	r2, r3
    dbce:	e003      	b.n	dbd8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dbd0:	5c84      	ldrb	r4, [r0, r2]
    dbd2:	4323      	orrs	r3, r4
    dbd4:	1c52      	adds	r2, r2, #1
    dbd6:	b2d2      	uxtb	r2, r2
    dbd8:	428a      	cmp	r2, r1
    dbda:	d3f9      	bcc.n	dbd0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dbdc:	b10b      	cbz	r3, dbe2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dbde:	2000      	movs	r0, #0
    dbe0:	bd10      	pop	{r4, pc}
    dbe2:	2001      	movs	r0, #1
    dbe4:	bd10      	pop	{r4, pc}

0000dbe6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dbe6:	b510      	push	{r4, lr}
    dbe8:	4604      	mov	r4, r0
    dbea:	f890 0020 	ldrb.w	r0, [r0, #32]
    dbee:	b108      	cbz	r0, dbf4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dbf0:	2825      	cmp	r0, #37	; 0x25
    dbf2:	d901      	bls.n	dbf8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dbf4:	2012      	movs	r0, #18
    dbf6:	bd10      	pop	{r4, pc}
    dbf8:	b12a      	cbz	r2, dc06 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    dbfa:	7d60      	ldrb	r0, [r4, #21]
    dbfc:	b128      	cbz	r0, dc0a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    dbfe:	2801      	cmp	r0, #1
    dc00:	d009      	beq.n	dc16 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    dc02:	201f      	movs	r0, #31
    dc04:	bd10      	pop	{r4, pc}
    dc06:	2000      	movs	r0, #0
    dc08:	bd10      	pop	{r4, pc}
    dc0a:	4620      	mov	r0, r4
    dc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc10:	4611      	mov	r1, r2
    dc12:	f7f8 bdbd 	b.w	6790 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    dc16:	88a2      	ldrh	r2, [r4, #4]
    dc18:	6909      	ldr	r1, [r1, #16]
    dc1a:	f104 0015 	add.w	r0, r4, #21
    dc1e:	f7f8 fd63 	bl	66e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dc22:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    dc26:	e7ee      	b.n	dc06 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000dc28 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dc28:	b530      	push	{r4, r5, lr}
    dc2a:	1c42      	adds	r2, r0, #1
    dc2c:	428a      	cmp	r2, r1
    dc2e:	d004      	beq.n	dc3a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    dc30:	680a      	ldr	r2, [r1, #0]
    dc32:	f8c0 2001 	str.w	r2, [r0, #1]
    dc36:	7909      	ldrb	r1, [r1, #4]
    dc38:	7141      	strb	r1, [r0, #5]
    dc3a:	7941      	ldrb	r1, [r0, #5]
    dc3c:	f001 011f 	and.w	r1, r1, #31
    dc40:	7141      	strb	r1, [r0, #5]
    dc42:	2100      	movs	r1, #0
    dc44:	72c1      	strb	r1, [r0, #11]
    dc46:	1843      	adds	r3, r0, r1
    dc48:	1c49      	adds	r1, r1, #1
    dc4a:	785c      	ldrb	r4, [r3, #1]
    dc4c:	b2c9      	uxtb	r1, r1
    dc4e:	f004 0201 	and.w	r2, r4, #1
    dc52:	0864      	lsrs	r4, r4, #1
    dc54:	f004 0501 	and.w	r5, r4, #1
    dc58:	4415      	add	r5, r2
    dc5a:	0862      	lsrs	r2, r4, #1
    dc5c:	f002 0401 	and.w	r4, r2, #1
    dc60:	442c      	add	r4, r5
    dc62:	0852      	lsrs	r2, r2, #1
    dc64:	f002 0501 	and.w	r5, r2, #1
    dc68:	442c      	add	r4, r5
    dc6a:	0852      	lsrs	r2, r2, #1
    dc6c:	f002 0501 	and.w	r5, r2, #1
    dc70:	442c      	add	r4, r5
    dc72:	0852      	lsrs	r2, r2, #1
    dc74:	f002 0501 	and.w	r5, r2, #1
    dc78:	442c      	add	r4, r5
    dc7a:	0852      	lsrs	r2, r2, #1
    dc7c:	f002 0501 	and.w	r5, r2, #1
    dc80:	442c      	add	r4, r5
    dc82:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    dc86:	719a      	strb	r2, [r3, #6]
    dc88:	7ac3      	ldrb	r3, [r0, #11]
    dc8a:	2905      	cmp	r1, #5
    dc8c:	441a      	add	r2, r3
    dc8e:	72c2      	strb	r2, [r0, #11]
    dc90:	d3d9      	bcc.n	dc46 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    dc92:	bd30      	pop	{r4, r5, pc}
    dc94:	b570      	push	{r4, r5, r6, lr}
    dc96:	f8d0 201f 	ldr.w	r2, [r0, #31]
    dc9a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    dc9e:	f012 0fff 	tst.w	r2, #255	; 0xff
    dca2:	f023 031f 	bic.w	r3, r3, #31
    dca6:	d108      	bne.n	dcba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    dca8:	f3c2 2407 	ubfx	r4, r2, #8, #8
    dcac:	b92c      	cbnz	r4, dcba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    dcae:	f3c2 4407 	ubfx	r4, r2, #16, #8
    dcb2:	b914      	cbnz	r4, dcba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    dcb4:	0e12      	lsrs	r2, r2, #24
    dcb6:	d100      	bne.n	dcba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    dcb8:	b35b      	cbz	r3, dd12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dcba:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    dcbe:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    dcc2:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    dcc6:	7d83      	ldrb	r3, [r0, #22]
    dcc8:	b141      	cbz	r1, dcdc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    dcca:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dcce:	d905      	bls.n	dcdc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    dcd0:	f640 5107 	movw	r1, #3335	; 0xd07
    dcd4:	428a      	cmp	r2, r1
    dcd6:	d801      	bhi.n	dcdc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    dcd8:	2101      	movs	r1, #1
    dcda:	e000      	b.n	dcde <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    dcdc:	2100      	movs	r1, #0
    dcde:	7846      	ldrb	r6, [r0, #1]
    dce0:	2e22      	cmp	r6, #34	; 0x22
    dce2:	d116      	bne.n	dd12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dce4:	b959      	cbnz	r1, dcfe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    dce6:	1f91      	subs	r1, r2, #6
    dce8:	f640 467a 	movw	r6, #3194	; 0xc7a
    dcec:	42b1      	cmp	r1, r6
    dcee:	d810      	bhi.n	dd12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dcf0:	b17b      	cbz	r3, dd12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dcf2:	2b08      	cmp	r3, #8
    dcf4:	d80d      	bhi.n	dd12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dcf6:	4293      	cmp	r3, r2
    dcf8:	d20b      	bcs.n	dd12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dcfa:	4294      	cmp	r4, r2
    dcfc:	d809      	bhi.n	dd12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dcfe:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    dd02:	d206      	bcs.n	dd12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dd04:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    dd08:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    dd0c:	d801      	bhi.n	dd12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dd0e:	2001      	movs	r0, #1
    dd10:	bd70      	pop	{r4, r5, r6, pc}
    dd12:	2000      	movs	r0, #0
    dd14:	bd70      	pop	{r4, r5, r6, pc}

0000dd16 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    dd16:	b570      	push	{r4, r5, r6, lr}
    dd18:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    dd1c:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    dd20:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    dd24:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    dd28:	88c0      	ldrh	r0, [r0, #6]
    dd2a:	b131      	cbz	r1, dd3a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    dd2c:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dd30:	d903      	bls.n	dd3a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    dd32:	f640 5107 	movw	r1, #3335	; 0xd07
    dd36:	428a      	cmp	r2, r1
    dd38:	d90b      	bls.n	dd52 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    dd3a:	1f91      	subs	r1, r2, #6
    dd3c:	f640 467a 	movw	r6, #3194	; 0xc7a
    dd40:	42b1      	cmp	r1, r6
    dd42:	d80e      	bhi.n	dd62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd44:	b16b      	cbz	r3, dd62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd46:	2b08      	cmp	r3, #8
    dd48:	d80b      	bhi.n	dd62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd4a:	4293      	cmp	r3, r2
    dd4c:	d209      	bcs.n	dd62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd4e:	4294      	cmp	r4, r2
    dd50:	d807      	bhi.n	dd62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd52:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    dd56:	d204      	bcs.n	dd62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd58:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    dd5c:	d801      	bhi.n	dd62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    dd5e:	2001      	movs	r0, #1
    dd60:	bd70      	pop	{r4, r5, r6, pc}
    dd62:	2000      	movs	r0, #0
    dd64:	bd70      	pop	{r4, r5, r6, pc}

0000dd66 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    dd66:	6842      	ldr	r2, [r0, #4]
    dd68:	600a      	str	r2, [r1, #0]
    dd6a:	7a00      	ldrb	r0, [r0, #8]
    dd6c:	7108      	strb	r0, [r1, #4]
    dd6e:	4770      	bx	lr

0000dd70 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    dd70:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    dd74:	4770      	bx	lr

0000dd76 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    dd76:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    dd7a:	4770      	bx	lr

0000dd7c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    dd7c:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    dd80:	4770      	bx	lr

0000dd82 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    dd82:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    dd86:	4770      	bx	lr

0000dd88 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    dd88:	8980      	ldrh	r0, [r0, #12]
    dd8a:	8008      	strh	r0, [r1, #0]
    dd8c:	4770      	bx	lr

0000dd8e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    dd8e:	f8d0 0016 	ldr.w	r0, [r0, #22]
    dd92:	6008      	str	r0, [r1, #0]
    dd94:	4770      	bx	lr

0000dd96 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    dd96:	6842      	ldr	r2, [r0, #4]
    dd98:	600a      	str	r2, [r1, #0]
    dd9a:	6880      	ldr	r0, [r0, #8]
    dd9c:	6048      	str	r0, [r1, #4]
    dd9e:	4770      	bx	lr

0000dda0 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    dda0:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    dda4:	600a      	str	r2, [r1, #0]
    dda6:	6840      	ldr	r0, [r0, #4]
    dda8:	6048      	str	r0, [r1, #4]
    ddaa:	4770      	bx	lr

0000ddac <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    ddac:	6842      	ldr	r2, [r0, #4]
    ddae:	600a      	str	r2, [r1, #0]
    ddb0:	6880      	ldr	r0, [r0, #8]
    ddb2:	6048      	str	r0, [r1, #4]
    ddb4:	4770      	bx	lr

0000ddb6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    ddb6:	7800      	ldrb	r0, [r0, #0]
    ddb8:	f000 0003 	and.w	r0, r0, #3
    ddbc:	4770      	bx	lr

0000ddbe <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    ddbe:	7900      	ldrb	r0, [r0, #4]
    ddc0:	4770      	bx	lr

0000ddc2 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    ddc2:	8880      	ldrh	r0, [r0, #4]
    ddc4:	4770      	bx	lr

0000ddc6 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    ddc6:	88c0      	ldrh	r0, [r0, #6]
    ddc8:	4770      	bx	lr

0000ddca <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    ddca:	8900      	ldrh	r0, [r0, #8]
    ddcc:	4770      	bx	lr

0000ddce <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    ddce:	8940      	ldrh	r0, [r0, #10]
    ddd0:	4770      	bx	lr

0000ddd2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    ddd2:	88c0      	ldrh	r0, [r0, #6]
    ddd4:	4770      	bx	lr

0000ddd6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    ddd6:	7940      	ldrb	r0, [r0, #5]
    ddd8:	4770      	bx	lr

0000ddda <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    ddda:	7900      	ldrb	r0, [r0, #4]
    dddc:	4770      	bx	lr

0000ddde <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    ddde:	7900      	ldrb	r0, [r0, #4]
    dde0:	4770      	bx	lr

0000dde2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    dde2:	8901      	ldrh	r1, [r0, #8]
    dde4:	291b      	cmp	r1, #27
    dde6:	d30c      	bcc.n	de02 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    dde8:	8941      	ldrh	r1, [r0, #10]
    ddea:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ddee:	4291      	cmp	r1, r2
    ddf0:	d307      	bcc.n	de02 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ddf2:	8881      	ldrh	r1, [r0, #4]
    ddf4:	291b      	cmp	r1, #27
    ddf6:	d304      	bcc.n	de02 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ddf8:	88c0      	ldrh	r0, [r0, #6]
    ddfa:	4290      	cmp	r0, r2
    ddfc:	d301      	bcc.n	de02 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ddfe:	2001      	movs	r0, #1
    de00:	4770      	bx	lr
    de02:	2000      	movs	r0, #0
    de04:	4770      	bx	lr

0000de06 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    de06:	b510      	push	{r4, lr}
    de08:	29fb      	cmp	r1, #251	; 0xfb
    de0a:	d904      	bls.n	de16 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    de0c:	f44f 61af 	mov.w	r1, #1400	; 0x578
    de10:	202a      	movs	r0, #42	; 0x2a
    de12:	f7f6 fc99 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de16:	7041      	strb	r1, [r0, #1]
    de18:	bd10      	pop	{r4, pc}

0000de1a <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    de1a:	7901      	ldrb	r1, [r0, #4]
    de1c:	0749      	lsls	r1, r1, #29
    de1e:	d004      	beq.n	de2a <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    de20:	7940      	ldrb	r0, [r0, #5]
    de22:	0740      	lsls	r0, r0, #29
    de24:	d001      	beq.n	de2a <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    de26:	2001      	movs	r0, #1
    de28:	4770      	bx	lr
    de2a:	2000      	movs	r0, #0
    de2c:	4770      	bx	lr

0000de2e <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    de2e:	7900      	ldrb	r0, [r0, #4]
    de30:	4770      	bx	lr

0000de32 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    de32:	7940      	ldrb	r0, [r0, #5]
    de34:	4770      	bx	lr

0000de36 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    de36:	7101      	strb	r1, [r0, #4]
    de38:	4770      	bx	lr

0000de3a <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    de3a:	7141      	strb	r1, [r0, #5]
    de3c:	4770      	bx	lr

0000de3e <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    de3e:	b510      	push	{r4, lr}
    de40:	2a1b      	cmp	r2, #27
    de42:	d904      	bls.n	de4e <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    de44:	f240 31df 	movw	r1, #991	; 0x3df
    de48:	202a      	movs	r0, #42	; 0x2a
    de4a:	f7f6 fc7d 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de4e:	7042      	strb	r2, [r0, #1]
    de50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de54:	1cc0      	adds	r0, r0, #3
    de56:	f7fe bad7 	b.w	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000de5a <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    de5a:	6809      	ldr	r1, [r1, #0]
    de5c:	60c1      	str	r1, [r0, #12]
    de5e:	4770      	bx	lr

0000de60 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    de60:	680a      	ldr	r2, [r1, #0]
    de62:	6042      	str	r2, [r0, #4]
    de64:	6849      	ldr	r1, [r1, #4]
    de66:	6081      	str	r1, [r0, #8]
    de68:	4770      	bx	lr

0000de6a <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    de6a:	680a      	ldr	r2, [r1, #0]
    de6c:	6042      	str	r2, [r0, #4]
    de6e:	6849      	ldr	r1, [r1, #4]
    de70:	6081      	str	r1, [r0, #8]
    de72:	4770      	bx	lr

0000de74 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    de74:	680a      	ldr	r2, [r1, #0]
    de76:	6042      	str	r2, [r0, #4]
    de78:	6849      	ldr	r1, [r1, #4]
    de7a:	6081      	str	r1, [r0, #8]
    de7c:	4770      	bx	lr

0000de7e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    de7e:	7802      	ldrb	r2, [r0, #0]
    de80:	f001 0103 	and.w	r1, r1, #3
    de84:	f022 0203 	bic.w	r2, r2, #3
    de88:	430a      	orrs	r2, r1
    de8a:	7002      	strb	r2, [r0, #0]
    de8c:	4770      	bx	lr

0000de8e <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    de8e:	7101      	strb	r1, [r0, #4]
    de90:	0a09      	lsrs	r1, r1, #8
    de92:	7141      	strb	r1, [r0, #5]
    de94:	4770      	bx	lr

0000de96 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    de96:	7181      	strb	r1, [r0, #6]
    de98:	0a09      	lsrs	r1, r1, #8
    de9a:	71c1      	strb	r1, [r0, #7]
    de9c:	4770      	bx	lr

0000de9e <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    de9e:	7201      	strb	r1, [r0, #8]
    dea0:	0a09      	lsrs	r1, r1, #8
    dea2:	7241      	strb	r1, [r0, #9]
    dea4:	4770      	bx	lr

0000dea6 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    dea6:	7281      	strb	r1, [r0, #10]
    dea8:	0a09      	lsrs	r1, r1, #8
    deaa:	72c1      	strb	r1, [r0, #11]
    deac:	4770      	bx	lr

0000deae <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    deae:	7802      	ldrb	r2, [r0, #0]
    deb0:	f002 020f 	and.w	r2, r2, #15
    deb4:	2a03      	cmp	r2, #3
    deb6:	d003      	beq.n	dec0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    deb8:	2a05      	cmp	r2, #5
    deba:	d104      	bne.n	dec6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    debc:	f7ff beea 	b.w	dc94 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    dec0:	7840      	ldrb	r0, [r0, #1]
    dec2:	280c      	cmp	r0, #12
    dec4:	d001      	beq.n	deca <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    dec6:	2000      	movs	r0, #0
    dec8:	4770      	bx	lr
    deca:	2001      	movs	r0, #1
    decc:	4770      	bx	lr

0000dece <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    dece:	b570      	push	{r4, r5, r6, lr}
    ded0:	4614      	mov	r4, r2
    ded2:	4605      	mov	r5, r0
    ded4:	2a1f      	cmp	r2, #31
    ded6:	d903      	bls.n	dee0 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    ded8:	21b2      	movs	r1, #178	; 0xb2
    deda:	202a      	movs	r0, #42	; 0x2a
    dedc:	f7f6 fc34 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dee0:	f105 0009 	add.w	r0, r5, #9
    dee4:	f7fe fa90 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dee8:	1da4      	adds	r4, r4, #6
    deea:	706c      	strb	r4, [r5, #1]
    deec:	bd70      	pop	{r4, r5, r6, pc}

0000deee <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    deee:	b510      	push	{r4, lr}
    def0:	7802      	ldrb	r2, [r0, #0]
    def2:	f001 030f 	and.w	r3, r1, #15
    def6:	f022 020f 	bic.w	r2, r2, #15
    defa:	431a      	orrs	r2, r3
    defc:	7002      	strb	r2, [r0, #0]
    defe:	2907      	cmp	r1, #7
    df00:	d20c      	bcs.n	df1c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    df02:	e8df f001 	tbb	[pc, r1]
    df06:	0604      	.short	0x0604
    df08:	08040604 	.word	0x08040604
    df0c:	0004      	.short	0x0004
    df0e:	2106      	movs	r1, #6
    df10:	e002      	b.n	df18 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    df12:	210c      	movs	r1, #12
    df14:	e000      	b.n	df18 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    df16:	2122      	movs	r1, #34	; 0x22
    df18:	7041      	strb	r1, [r0, #1]
    df1a:	bd10      	pop	{r4, pc}
    df1c:	216e      	movs	r1, #110	; 0x6e
    df1e:	202a      	movs	r0, #42	; 0x2a
    df20:	f7f6 fc12 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000df24 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    df24:	680a      	ldr	r2, [r1, #0]
    df26:	f840 2f09 	str.w	r2, [r0, #9]!
    df2a:	8889      	ldrh	r1, [r1, #4]
    df2c:	8081      	strh	r1, [r0, #4]
    df2e:	4770      	bx	lr

0000df30 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    df30:	7802      	ldrb	r2, [r0, #0]
    df32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    df36:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    df3a:	7002      	strb	r2, [r0, #0]
    df3c:	4770      	bx	lr

0000df3e <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    df3e:	680a      	ldr	r2, [r1, #0]
    df40:	f840 2f03 	str.w	r2, [r0, #3]!
    df44:	8889      	ldrh	r1, [r1, #4]
    df46:	8081      	strh	r1, [r0, #4]
    df48:	4770      	bx	lr

0000df4a <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    df4a:	7802      	ldrb	r2, [r0, #0]
    df4c:	2340      	movs	r3, #64	; 0x40
    df4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    df52:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    df56:	430a      	orrs	r2, r1
    df58:	7002      	strb	r2, [r0, #0]
    df5a:	4770      	bx	lr

0000df5c <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    df5c:	b570      	push	{r4, r5, r6, lr}
    df5e:	4614      	mov	r4, r2
    df60:	4605      	mov	r5, r0
    df62:	2a1f      	cmp	r2, #31
    df64:	d903      	bls.n	df6e <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    df66:	21d4      	movs	r1, #212	; 0xd4
    df68:	202a      	movs	r0, #42	; 0x2a
    df6a:	f7f6 fbed 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df6e:	f105 0009 	add.w	r0, r5, #9
    df72:	f7fe fa49 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    df76:	1da4      	adds	r4, r4, #6
    df78:	706c      	strb	r4, [r5, #1]
    df7a:	bd70      	pop	{r4, r5, r6, pc}

0000df7c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    df7c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    df80:	4604      	mov	r4, r0
    df82:	2000      	movs	r0, #0
    df84:	f7f6 fdca 	bl	4b1c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    df88:	2600      	movs	r6, #0
    df8a:	4605      	mov	r5, r0
    df8c:	4637      	mov	r7, r6
    df8e:	e00e      	b.n	dfae <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    df90:	8820      	ldrh	r0, [r4, #0]
    df92:	1c40      	adds	r0, r0, #1
    df94:	b280      	uxth	r0, r0
    df96:	8020      	strh	r0, [r4, #0]
    df98:	42a8      	cmp	r0, r5
    df9a:	d300      	bcc.n	df9e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    df9c:	8027      	strh	r7, [r4, #0]
    df9e:	8820      	ldrh	r0, [r4, #0]
    dfa0:	4669      	mov	r1, sp
    dfa2:	f7ff fc74 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    dfa6:	2800      	cmp	r0, #0
    dfa8:	d007      	beq.n	dfba <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    dfaa:	1c76      	adds	r6, r6, #1
    dfac:	b2f6      	uxtb	r6, r6
    dfae:	42ae      	cmp	r6, r5
    dfb0:	d3ee      	bcc.n	df90 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    dfb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dfb6:	8020      	strh	r0, [r4, #0]
    dfb8:	2012      	movs	r0, #18
    dfba:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000dfbe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    dfbe:	6841      	ldr	r1, [r0, #4]
    dfc0:	2200      	movs	r2, #0
    dfc2:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
    dfc6:	2b00      	cmp	r3, #0
    dfc8:	d004      	beq.n	dfd4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    dfca:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
    dfce:	6840      	ldr	r0, [r0, #4]
    dfd0:	f000 bc64 	b.w	e89c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    dfd4:	4770      	bx	lr

0000dfd6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    dfd6:	b510      	push	{r4, lr}
    dfd8:	7901      	ldrb	r1, [r0, #4]
    dfda:	b119      	cbz	r1, dfe4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    dfdc:	2901      	cmp	r1, #1
    dfde:	d006      	beq.n	dfee <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    dfe0:	2000      	movs	r0, #0
    dfe2:	bd10      	pop	{r4, pc}
    dfe4:	8842      	ldrh	r2, [r0, #2]
    dfe6:	6883      	ldr	r3, [r0, #8]
    dfe8:	8800      	ldrh	r0, [r0, #0]
    dfea:	2102      	movs	r1, #2
    dfec:	e003      	b.n	dff6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    dfee:	8842      	ldrh	r2, [r0, #2]
    dff0:	6883      	ldr	r3, [r0, #8]
    dff2:	8800      	ldrh	r0, [r0, #0]
    dff4:	2101      	movs	r1, #1
    dff6:	f7f8 fc79 	bl	68ec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    dffa:	b908      	cbnz	r0, e000 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    dffc:	f7f8 fccc 	bl	6998 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e000:	2001      	movs	r0, #1
    e002:	bd10      	pop	{r4, pc}
    e004:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e008:	460e      	mov	r6, r1
    e00a:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e00e:	4617      	mov	r7, r2
    e010:	39ff      	subs	r1, #255	; 0xff
    e012:	d014      	beq.n	e03e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e014:	8030      	strh	r0, [r6, #0]
    e016:	2100      	movs	r1, #0
    e018:	7171      	strb	r1, [r6, #5]
    e01a:	f7f6 ffaf 	bl	4f7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e01e:	4604      	mov	r4, r0
    e020:	f7ff f81b 	bl	d05a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e024:	0005      	movs	r5, r0
    e026:	d00a      	beq.n	e03e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e028:	4620      	mov	r0, r4
    e02a:	4629      	mov	r1, r5
    e02c:	aa01      	add	r2, sp, #4
    e02e:	f7ff f837 	bl	d0a0 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e032:	8070      	strh	r0, [r6, #2]
    e034:	b130      	cbz	r0, e044 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    e036:	28fb      	cmp	r0, #251	; 0xfb
    e038:	d906      	bls.n	e048 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    e03a:	21ae      	movs	r1, #174	; 0xae
    e03c:	e026      	b.n	e08c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e03e:	2000      	movs	r0, #0
    e040:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e044:	21ad      	movs	r1, #173	; 0xad
    e046:	e021      	b.n	e08c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e048:	9801      	ldr	r0, [sp, #4]
    e04a:	f7ff feb4 	bl	ddb6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e04e:	2801      	cmp	r0, #1
    e050:	d003      	beq.n	e05a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e052:	2802      	cmp	r0, #2
    e054:	d001      	beq.n	e05a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e056:	21bd      	movs	r1, #189	; 0xbd
    e058:	e018      	b.n	e08c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e05a:	7130      	strb	r0, [r6, #4]
    e05c:	4629      	mov	r1, r5
    e05e:	8873      	ldrh	r3, [r6, #2]
    e060:	2503      	movs	r5, #3
    e062:	4620      	mov	r0, r4
    e064:	463a      	mov	r2, r7
    e066:	9500      	str	r5, [sp, #0]
    e068:	f7fe fee9 	bl	ce3e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e06c:	4620      	mov	r0, r4
    e06e:	60b7      	str	r7, [r6, #8]
    e070:	f7fe ffa2 	bl	cfb8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e074:	b138      	cbz	r0, e086 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    e076:	2100      	movs	r1, #0
    e078:	4620      	mov	r0, r4
    e07a:	460a      	mov	r2, r1
    e07c:	f7ff f8ee 	bl	d25c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e080:	b118      	cbz	r0, e08a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    e082:	2001      	movs	r0, #1
    e084:	e7dc      	b.n	e040 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    e086:	21cd      	movs	r1, #205	; 0xcd
    e088:	e000      	b.n	e08c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e08a:	21d2      	movs	r1, #210	; 0xd2
    e08c:	202b      	movs	r0, #43	; 0x2b
    e08e:	f7f6 fb5b 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e092 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e092:	f7f8 be3f 	b.w	6d14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    e096:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e09a:	4604      	mov	r4, r0
    e09c:	2000      	movs	r0, #0
    e09e:	f7f6 fd3d 	bl	4b1c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e0a2:	4605      	mov	r5, r0
    e0a4:	2001      	movs	r0, #1
    e0a6:	f7f6 fd39 	bl	4b1c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e0aa:	4428      	add	r0, r5
    e0ac:	2600      	movs	r6, #0
    e0ae:	b2c7      	uxtb	r7, r0
    e0b0:	46b0      	mov	r8, r6
    e0b2:	e017      	b.n	e0e4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    e0b4:	8820      	ldrh	r0, [r4, #0]
    e0b6:	1c40      	adds	r0, r0, #1
    e0b8:	b280      	uxth	r0, r0
    e0ba:	8020      	strh	r0, [r4, #0]
    e0bc:	42b8      	cmp	r0, r7
    e0be:	d302      	bcc.n	e0c6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    e0c0:	4640      	mov	r0, r8
    e0c2:	f8a4 8000 	strh.w	r8, [r4]
    e0c6:	b280      	uxth	r0, r0
    e0c8:	42a8      	cmp	r0, r5
    e0ca:	d304      	bcc.n	e0d6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    e0cc:	42b8      	cmp	r0, r7
    e0ce:	d202      	bcs.n	e0d6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    e0d0:	2000      	movs	r0, #0
    e0d2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e0d6:	4669      	mov	r1, sp
    e0d8:	f7ff fbd9 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e0dc:	2800      	cmp	r0, #0
    e0de:	d0f8      	beq.n	e0d2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    e0e0:	1c76      	adds	r6, r6, #1
    e0e2:	b2f6      	uxtb	r6, r6
    e0e4:	42be      	cmp	r6, r7
    e0e6:	d3e5      	bcc.n	e0b4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    e0e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e0ec:	8020      	strh	r0, [r4, #0]
    e0ee:	2012      	movs	r0, #18
    e0f0:	e7ef      	b.n	e0d2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000e0f2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e0f2:	b570      	push	{r4, r5, r6, lr}
    e0f4:	8050      	strh	r0, [r2, #2]
    e0f6:	890c      	ldrh	r4, [r1, #8]
    e0f8:	8094      	strh	r4, [r2, #4]
    e0fa:	898b      	ldrh	r3, [r1, #12]
    e0fc:	80d3      	strh	r3, [r2, #6]
    e0fe:	8948      	ldrh	r0, [r1, #10]
    e100:	8110      	strh	r0, [r2, #8]
    e102:	89cd      	ldrh	r5, [r1, #14]
    e104:	8155      	strh	r5, [r2, #10]
    e106:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e108:	42ae      	cmp	r6, r5
    e10a:	d108      	bne.n	e11e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e10c:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e10e:	4285      	cmp	r5, r0
    e110:	d105      	bne.n	e11e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e112:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e114:	429d      	cmp	r5, r3
    e116:	d102      	bne.n	e11e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e118:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e11a:	42a3      	cmp	r3, r4
    e11c:	d001      	beq.n	e122 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e11e:	2301      	movs	r3, #1
    e120:	e000      	b.n	e124 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e122:	2300      	movs	r3, #0
    e124:	7313      	strb	r3, [r2, #12]
    e126:	8548      	strh	r0, [r1, #42]	; 0x2a
    e128:	8950      	ldrh	r0, [r2, #10]
    e12a:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e12c:	8890      	ldrh	r0, [r2, #4]
    e12e:	8588      	strh	r0, [r1, #44]	; 0x2c
    e130:	88d0      	ldrh	r0, [r2, #6]
    e132:	8608      	strh	r0, [r1, #48]	; 0x30
    e134:	2001      	movs	r0, #1
    e136:	7010      	strb	r0, [r2, #0]
    e138:	bd70      	pop	{r4, r5, r6, pc}

0000e13a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e13a:	b510      	push	{r4, lr}
    e13c:	888c      	ldrh	r4, [r1, #4]
    e13e:	890a      	ldrh	r2, [r1, #8]
    e140:	884b      	ldrh	r3, [r1, #2]
    e142:	88c9      	ldrh	r1, [r1, #6]
    e144:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e148:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e14c:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e150:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e154:	bd10      	pop	{r4, pc}

0000e156 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e156:	b570      	push	{r4, r5, r6, lr}
    e158:	4615      	mov	r5, r2
    e15a:	460c      	mov	r4, r1
    e15c:	f000 f8c7 	bl	e2ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e160:	3096      	adds	r0, #150	; 0x96
    e162:	4428      	add	r0, r5
    e164:	42a0      	cmp	r0, r4
    e166:	d801      	bhi.n	e16c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e168:	1a20      	subs	r0, r4, r0
    e16a:	bd70      	pop	{r4, r5, r6, pc}
    e16c:	2000      	movs	r0, #0
    e16e:	bd70      	pop	{r4, r5, r6, pc}

0000e170 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e174:	4604      	mov	r4, r0
    e176:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e178:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e17a:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e17e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e182:	4285      	cmp	r5, r0
    e184:	d300      	bcc.n	e188 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e186:	4605      	mov	r5, r0
    e188:	4620      	mov	r0, r4
    e18a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e18e:	f000 f89e 	bl	e2ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e192:	4601      	mov	r1, r0
    e194:	86e5      	strh	r5, [r4, #54]	; 0x36
    e196:	8761      	strh	r1, [r4, #58]	; 0x3a
    e198:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e19a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e19e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e1a0:	4680      	mov	r8, r0
    e1a2:	42aa      	cmp	r2, r5
    e1a4:	d200      	bcs.n	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e1a6:	462a      	mov	r2, r5
    e1a8:	428b      	cmp	r3, r1
    e1aa:	d200      	bcs.n	e1ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e1ac:	460b      	mov	r3, r1
    e1ae:	8202      	strh	r2, [r0, #16]
    e1b0:	f8a8 3012 	strh.w	r3, [r8, #18]
    e1b4:	42bd      	cmp	r5, r7
    e1b6:	d101      	bne.n	e1bc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e1b8:	42b1      	cmp	r1, r6
    e1ba:	d001      	beq.n	e1c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e1bc:	2001      	movs	r0, #1
    e1be:	e000      	b.n	e1c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e1c0:	2000      	movs	r0, #0
    e1c2:	4681      	mov	r9, r0
    e1c4:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e1c8:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e1cc:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e1ce:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e1d0:	4285      	cmp	r5, r0
    e1d2:	d300      	bcc.n	e1d6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e1d4:	4605      	mov	r5, r0
    e1d6:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e1da:	4620      	mov	r0, r4
    e1dc:	f000 f87f 	bl	e2de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e1e0:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e1e4:	2902      	cmp	r1, #2
    e1e6:	d108      	bne.n	e1fa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e1e8:	42af      	cmp	r7, r5
    e1ea:	d200      	bcs.n	e1ee <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e1ec:	463d      	mov	r5, r7
    e1ee:	4286      	cmp	r6, r0
    e1f0:	d200      	bcs.n	e1f4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e1f2:	4630      	mov	r0, r6
    e1f4:	2100      	movs	r1, #0
    e1f6:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e1fa:	f8a8 5008 	strh.w	r5, [r8, #8]
    e1fe:	f8a8 000c 	strh.w	r0, [r8, #12]
    e202:	42bd      	cmp	r5, r7
    e204:	d101      	bne.n	e20a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e206:	42b0      	cmp	r0, r6
    e208:	d001      	beq.n	e20e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e20a:	2001      	movs	r0, #1
    e20c:	e000      	b.n	e210 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e20e:	2000      	movs	r0, #0
    e210:	ea40 0009 	orr.w	r0, r0, r9
    e214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e218 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e218:	6840      	ldr	r0, [r0, #4]
    e21a:	4770      	bx	lr

0000e21c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e220:	4616      	mov	r6, r2
    e222:	460f      	mov	r7, r1
    e224:	4604      	mov	r4, r0
    e226:	f000 f862 	bl	e2ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e22a:	4605      	mov	r5, r0
    e22c:	463a      	mov	r2, r7
    e22e:	68e1      	ldr	r1, [r4, #12]
    e230:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e232:	f000 f847 	bl	e2c4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e236:	19a9      	adds	r1, r5, r6
    e238:	4281      	cmp	r1, r0
    e23a:	d300      	bcc.n	e23e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e23c:	4608      	mov	r0, r1
    e23e:	6320      	str	r0, [r4, #48]	; 0x30
    e240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e244 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e244:	221b      	movs	r2, #27
    e246:	8402      	strh	r2, [r0, #32]
    e248:	8382      	strh	r2, [r0, #28]
    e24a:	82c2      	strh	r2, [r0, #22]
    e24c:	8282      	strh	r2, [r0, #20]
    e24e:	8142      	strh	r2, [r0, #10]
    e250:	8202      	strh	r2, [r0, #16]
    e252:	8102      	strh	r2, [r0, #8]
    e254:	8542      	strh	r2, [r0, #42]	; 0x2a
    e256:	8582      	strh	r2, [r0, #44]	; 0x2c
    e258:	8482      	strh	r2, [r0, #36]	; 0x24
    e25a:	2900      	cmp	r1, #0
    e25c:	d10a      	bne.n	e274 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e25e:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e262:	8441      	strh	r1, [r0, #34]	; 0x22
    e264:	83c1      	strh	r1, [r0, #30]
    e266:	8341      	strh	r1, [r0, #26]
    e268:	8301      	strh	r1, [r0, #24]
    e26a:	81c1      	strh	r1, [r0, #14]
    e26c:	8241      	strh	r1, [r0, #18]
    e26e:	8181      	strh	r1, [r0, #12]
    e270:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e272:	8601      	strh	r1, [r0, #48]	; 0x30
    e274:	4770      	bx	lr

0000e276 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e276:	6800      	ldr	r0, [r0, #0]
    e278:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e27c:	4290      	cmp	r0, r2
    e27e:	d903      	bls.n	e288 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e280:	1a40      	subs	r0, r0, r1
    e282:	389c      	subs	r0, #156	; 0x9c
    e284:	0840      	lsrs	r0, r0, #1
    e286:	4770      	bx	lr
    e288:	2000      	movs	r0, #0
    e28a:	4770      	bx	lr

0000e28c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e28c:	b510      	push	{r4, lr}
    e28e:	9c02      	ldr	r4, [sp, #8]
    e290:	8281      	strh	r1, [r0, #20]
    e292:	82c2      	strh	r2, [r0, #22]
    e294:	8303      	strh	r3, [r0, #24]
    e296:	8344      	strh	r4, [r0, #26]
    e298:	bd10      	pop	{r4, pc}

0000e29a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e29a:	8050      	strh	r0, [r2, #2]
    e29c:	8a88      	ldrh	r0, [r1, #20]
    e29e:	8090      	strh	r0, [r2, #4]
    e2a0:	8ac8      	ldrh	r0, [r1, #22]
    e2a2:	80d0      	strh	r0, [r2, #6]
    e2a4:	8b08      	ldrh	r0, [r1, #24]
    e2a6:	8110      	strh	r0, [r2, #8]
    e2a8:	8b48      	ldrh	r0, [r1, #26]
    e2aa:	8150      	strh	r0, [r2, #10]
    e2ac:	2001      	movs	r0, #1
    e2ae:	7010      	strb	r0, [r2, #0]
    e2b0:	4770      	bx	lr
    e2b2:	2902      	cmp	r1, #2
    e2b4:	d003      	beq.n	e2be <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e2b6:	00c0      	lsls	r0, r0, #3
    e2b8:	3070      	adds	r0, #112	; 0x70
    e2ba:	b280      	uxth	r0, r0
    e2bc:	4770      	bx	lr
    e2be:	0080      	lsls	r0, r0, #2
    e2c0:	303c      	adds	r0, #60	; 0x3c
    e2c2:	e7fa      	b.n	e2ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e2c4:	4288      	cmp	r0, r1
    e2c6:	d300      	bcc.n	e2ca <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e2c8:	4608      	mov	r0, r1
    e2ca:	1a80      	subs	r0, r0, r2
    e2cc:	4770      	bx	lr
    e2ce:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e2d2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e2d6:	4281      	cmp	r1, r0
    e2d8:	d200      	bcs.n	e2dc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e2da:	4608      	mov	r0, r1
    e2dc:	4770      	bx	lr
    e2de:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e2e2:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e2e6:	4281      	cmp	r1, r0
    e2e8:	d200      	bcs.n	e2ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e2ea:	4608      	mov	r0, r1
    e2ec:	4770      	bx	lr
    e2ee:	2196      	movs	r1, #150	; 0x96
    e2f0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e2f4:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e2f8:	f000 b800 	b.w	e2fc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e300:	460d      	mov	r5, r1
    e302:	4606      	mov	r6, r0
    e304:	4698      	mov	r8, r3
    e306:	4617      	mov	r7, r2
    e308:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e30a:	4611      	mov	r1, r2
    e30c:	f7ff ffd1 	bl	e2b2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e310:	4604      	mov	r4, r0
    e312:	4639      	mov	r1, r7
    e314:	4630      	mov	r0, r6
    e316:	f7ff ffe2 	bl	e2de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e31a:	42a0      	cmp	r0, r4
    e31c:	d200      	bcs.n	e320 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e31e:	4604      	mov	r4, r0
    e320:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e322:	4641      	mov	r1, r8
    e324:	f7ff ffc5 	bl	e2b2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e328:	4607      	mov	r7, r0
    e32a:	4641      	mov	r1, r8
    e32c:	4630      	mov	r0, r6
    e32e:	f7ff ffce 	bl	e2ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e332:	42b8      	cmp	r0, r7
    e334:	d300      	bcc.n	e338 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e336:	4638      	mov	r0, r7
    e338:	4420      	add	r0, r4
    e33a:	4428      	add	r0, r5
    e33c:	1d80      	adds	r0, r0, #6
    e33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e342 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    e342:	b510      	push	{r4, lr}
    e344:	4604      	mov	r4, r0
    e346:	2108      	movs	r1, #8
    e348:	4620      	mov	r0, r4
    e34a:	f7f6 fa97 	bl	487c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e34e:	6820      	ldr	r0, [r4, #0]
    e350:	2800      	cmp	r0, #0
    e352:	d102      	bne.n	e35a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    e354:	6860      	ldr	r0, [r4, #4]
    e356:	2800      	cmp	r0, #0
    e358:	d0f5      	beq.n	e346 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    e35a:	bd10      	pop	{r4, pc}
    e35c:	2801      	cmp	r0, #1
    e35e:	d102      	bne.n	e366 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    e360:	7948      	ldrb	r0, [r1, #5]
    e362:	0980      	lsrs	r0, r0, #6
    e364:	d001      	beq.n	e36a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    e366:	2000      	movs	r0, #0
    e368:	4770      	bx	lr
    e36a:	2001      	movs	r0, #1
    e36c:	4770      	bx	lr
    e36e:	2801      	cmp	r0, #1
    e370:	d106      	bne.n	e380 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e372:	7948      	ldrb	r0, [r1, #5]
    e374:	2101      	movs	r1, #1
    e376:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e37a:	d101      	bne.n	e380 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e37c:	2001      	movs	r0, #1
    e37e:	4770      	bx	lr
    e380:	2000      	movs	r0, #0
    e382:	4770      	bx	lr
    e384:	2802      	cmp	r0, #2
    e386:	d003      	beq.n	e390 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    e388:	2803      	cmp	r0, #3
    e38a:	d001      	beq.n	e390 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    e38c:	2000      	movs	r0, #0
    e38e:	4770      	bx	lr
    e390:	2001      	movs	r0, #1
    e392:	4770      	bx	lr

0000e394 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e394:	b510      	push	{r4, lr}
    e396:	4604      	mov	r4, r0
    e398:	7c00      	ldrb	r0, [r0, #16]
    e39a:	f7ff fff3 	bl	e384 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    e39e:	b148      	cbz	r0, e3b4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e3a0:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    e3a4:	f104 0150 	add.w	r1, r4, #80	; 0x50
    e3a8:	f7ff fa2e 	bl	d808 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e3ac:	2808      	cmp	r0, #8
    e3ae:	d001      	beq.n	e3b4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e3b0:	2001      	movs	r0, #1
    e3b2:	bd10      	pop	{r4, pc}
    e3b4:	7c20      	ldrb	r0, [r4, #16]
    e3b6:	b118      	cbz	r0, e3c0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e3b8:	2802      	cmp	r0, #2
    e3ba:	d001      	beq.n	e3c0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e3bc:	7de0      	ldrb	r0, [r4, #23]
    e3be:	bd10      	pop	{r4, pc}
    e3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3c4:	2000      	movs	r0, #0
    e3c6:	f7f7 b8e9 	b.w	559c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e3ca <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e3ca:	b508      	push	{r3, lr}
    e3cc:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    e3d0:	f88d 1000 	strb.w	r1, [sp]
    e3d4:	9900      	ldr	r1, [sp, #0]
    e3d6:	9100      	str	r1, [sp, #0]
    e3d8:	f89d 1000 	ldrb.w	r1, [sp]
    e3dc:	b109      	cbz	r1, e3e2 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e3de:	2001      	movs	r0, #1
    e3e0:	bd08      	pop	{r3, pc}
    e3e2:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    e3e6:	f88d 0000 	strb.w	r0, [sp]
    e3ea:	9800      	ldr	r0, [sp, #0]
    e3ec:	9000      	str	r0, [sp, #0]
    e3ee:	f89d 0000 	ldrb.w	r0, [sp]
    e3f2:	2000      	movs	r0, #0
    e3f4:	bd08      	pop	{r3, pc}

0000e3f6 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e3f6:	20ff      	movs	r0, #255	; 0xff
    e3f8:	7008      	strb	r0, [r1, #0]
    e3fa:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    e3fc:	f7ff b955 	b.w	d6aa <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e400 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e400:	b51c      	push	{r2, r3, r4, lr}
    e402:	4604      	mov	r4, r0
    e404:	22d4      	movs	r2, #212	; 0xd4
    e406:	2100      	movs	r1, #0
    e408:	f7fe f878 	bl	c4fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e40c:	20ff      	movs	r0, #255	; 0xff
    e40e:	7020      	strb	r0, [r4, #0]
    e410:	207f      	movs	r0, #127	; 0x7f
    e412:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e416:	2013      	movs	r0, #19
    e418:	8060      	strh	r0, [r4, #2]
    e41a:	f7f6 fe6f 	bl	50fc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e41e:	4601      	mov	r1, r0
    e420:	62e0      	str	r0, [r4, #44]	; 0x2c
    e422:	2200      	movs	r2, #0
    e424:	4668      	mov	r0, sp
    e426:	f7ff f8ab 	bl	d580 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e42a:	2200      	movs	r2, #0
    e42c:	2101      	movs	r1, #1
    e42e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e430:	f7ff f91b 	bl	d66a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e434:	2204      	movs	r2, #4
    e436:	4668      	mov	r0, sp
    e438:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e43a:	f7ff f8a1 	bl	d580 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e43e:	2200      	movs	r2, #0
    e440:	4611      	mov	r1, r2
    e442:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e444:	f7ff f911 	bl	d66a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e448:	2000      	movs	r0, #0
    e44a:	73a0      	strb	r0, [r4, #14]
    e44c:	f104 0020 	add.w	r0, r4, #32
    e450:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    e454:	f000 b962 	b.w	e71c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e458 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e458:	7880      	ldrb	r0, [r0, #2]
    e45a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e45e:	b108      	cbz	r0, e464 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e460:	2000      	movs	r0, #0
    e462:	4770      	bx	lr
    e464:	201f      	movs	r0, #31
    e466:	4770      	bx	lr

0000e468 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e468:	f7f9 b9ce 	b.w	7808 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>

0000e46c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e46c:	6880      	ldr	r0, [r0, #8]
    e46e:	4770      	bx	lr

0000e470 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e470:	2001      	movs	r0, #1
    e472:	4770      	bx	lr

0000e474 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e474:	b510      	push	{r4, lr}
    e476:	4604      	mov	r4, r0
    e478:	3020      	adds	r0, #32
    e47a:	f000 f90f 	bl	e69c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e47e:	8861      	ldrh	r1, [r4, #2]
    e480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e484:	2228      	movs	r2, #40	; 0x28
    e486:	f7f9 bb9f 	b.w	7bc8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e48a <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e48a:	2200      	movs	r2, #0
    e48c:	6282      	str	r2, [r0, #40]	; 0x28
    e48e:	8843      	ldrh	r3, [r0, #2]
    e490:	2b1d      	cmp	r3, #29
    e492:	d001      	beq.n	e498 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e494:	7341      	strb	r1, [r0, #13]
    e496:	4770      	bx	lr
    e498:	7342      	strb	r2, [r0, #13]
    e49a:	4770      	bx	lr

0000e49c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e49c:	b510      	push	{r4, lr}
    e49e:	2400      	movs	r4, #0
    e4a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    e4a2:	f7ff f8d0 	bl	d646 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    e4a6:	b100      	cbz	r0, e4aa <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    e4a8:	2001      	movs	r0, #1
    e4aa:	4384      	bics	r4, r0
    e4ac:	f084 0001 	eor.w	r0, r4, #1
    e4b0:	bd10      	pop	{r4, pc}

0000e4b2 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e4b2:	2000      	movs	r0, #0
    e4b4:	4770      	bx	lr

0000e4b6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e4b6:	7880      	ldrb	r0, [r0, #2]
    e4b8:	f000 0001 	and.w	r0, r0, #1
    e4bc:	4770      	bx	lr

0000e4be <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e4be:	7880      	ldrb	r0, [r0, #2]
    e4c0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e4c4:	4770      	bx	lr

0000e4c6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e4c6:	2001      	movs	r0, #1
    e4c8:	4770      	bx	lr

0000e4ca <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e4ca:	7880      	ldrb	r0, [r0, #2]
    e4cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e4d0:	4770      	bx	lr

0000e4d2 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e4d2:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e4d6:	4770      	bx	lr

0000e4d8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e4d8:	7800      	ldrb	r0, [r0, #0]
    e4da:	28ff      	cmp	r0, #255	; 0xff
    e4dc:	d001      	beq.n	e4e2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e4de:	2001      	movs	r0, #1
    e4e0:	4770      	bx	lr
    e4e2:	2000      	movs	r0, #0
    e4e4:	4770      	bx	lr

0000e4e6 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e4e6:	680a      	ldr	r2, [r1, #0]
    e4e8:	f840 2f11 	str.w	r2, [r0, #17]!
    e4ec:	8889      	ldrh	r1, [r1, #4]
    e4ee:	8081      	strh	r1, [r0, #4]
    e4f0:	2101      	movs	r1, #1
    e4f2:	7181      	strb	r1, [r0, #6]
    e4f4:	4770      	bx	lr

0000e4f6 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e4f6:	7b00      	ldrb	r0, [r0, #12]
    e4f8:	4770      	bx	lr

0000e4fa <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e4fa:	2001      	movs	r0, #1
    e4fc:	4770      	bx	lr

0000e4fe <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e4fe:	61c1      	str	r1, [r0, #28]
    e500:	4770      	bx	lr

0000e502 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e502:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    e506:	4770      	bx	lr

0000e508 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e508:	b570      	push	{r4, r5, r6, lr}
    e50a:	4604      	mov	r4, r0
    e50c:	7880      	ldrb	r0, [r0, #2]
    e50e:	2501      	movs	r5, #1
    e510:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e514:	b138      	cbz	r0, e526 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    e516:	233c      	movs	r3, #60	; 0x3c
    e518:	22ff      	movs	r2, #255	; 0xff
    e51a:	4620      	mov	r0, r4
    e51c:	69e1      	ldr	r1, [r4, #28]
    e51e:	f7f9 f99f 	bl	7860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    e522:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    e526:	78a0      	ldrb	r0, [r4, #2]
    e528:	07c0      	lsls	r0, r0, #31
    e52a:	f7f8 fa99 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e52e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    e532:	bd70      	pop	{r4, r5, r6, pc}

0000e534 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e534:	7bc0      	ldrb	r0, [r0, #15]
    e536:	2800      	cmp	r0, #0
    e538:	d000      	beq.n	e53c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e53a:	2001      	movs	r0, #1
    e53c:	4770      	bx	lr
    e53e:	b510      	push	{r4, lr}
    e540:	f7ff f962 	bl	d808 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e544:	4604      	mov	r4, r0
    e546:	f7f7 fecb 	bl	62e0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e54a:	b138      	cbz	r0, e55c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e54c:	4620      	mov	r0, r4
    e54e:	f7f7 fdff 	bl	6150 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e552:	b118      	cbz	r0, e55c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e554:	2110      	movs	r1, #16
    e556:	f7ff fb37 	bl	dbc8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e55a:	b108      	cbz	r0, e560 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    e55c:	2000      	movs	r0, #0
    e55e:	bd10      	pop	{r4, pc}
    e560:	2001      	movs	r0, #1
    e562:	bd10      	pop	{r4, pc}
    e564:	2101      	movs	r1, #1
    e566:	f7f8 bddb 	b.w	7120 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e56a:	2101      	movs	r1, #1
    e56c:	f7f8 bdd8 	b.w	7120 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e574:	4604      	mov	r4, r0
    e576:	2700      	movs	r7, #0
    e578:	704f      	strb	r7, [r1, #1]
    e57a:	2011      	movs	r0, #17
    e57c:	460d      	mov	r5, r1
    e57e:	7008      	strb	r0, [r1, #0]
    e580:	2220      	movs	r2, #32
    e582:	f104 0166 	add.w	r1, r4, #102	; 0x66
    e586:	1d28      	adds	r0, r5, #4
    e588:	f7fd ff3e 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e58c:	2601      	movs	r6, #1
    e58e:	722e      	strb	r6, [r5, #8]
    e590:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    e594:	7928      	ldrb	r0, [r5, #4]
    e596:	2800      	cmp	r0, #0
    e598:	d111      	bne.n	e5be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    e59a:	88e8      	ldrh	r0, [r5, #6]
    e59c:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    e5a0:	69e0      	ldr	r0, [r4, #28]
    e5a2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    e5a6:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    e5aa:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    e5ae:	8800      	ldrh	r0, [r0, #0]
    e5b0:	f7f6 fce4 	bl	4f7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e5b4:	f7fe fe04 	bl	d1c0 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    e5b8:	69e0      	ldr	r0, [r4, #28]
    e5ba:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    e5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5c6:	4604      	mov	r4, r0
    e5c8:	460f      	mov	r7, r1
    e5ca:	7e40      	ldrb	r0, [r0, #25]
    e5cc:	f7f7 fd80 	bl	60d0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e5d0:	4606      	mov	r6, r0
    e5d2:	7e20      	ldrb	r0, [r4, #24]
    e5d4:	f104 0549 	add.w	r5, r4, #73	; 0x49
    e5d8:	b120      	cbz	r0, e5e4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e5da:	b11e      	cbz	r6, e5e4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e5dc:	7e60      	ldrb	r0, [r4, #25]
    e5de:	f7f7 fd6b 	bl	60b8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e5e2:	b1a0      	cbz	r0, e60e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    e5e4:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    e5e8:	2800      	cmp	r0, #0
    e5ea:	d024      	beq.n	e636 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e5ec:	7ea0      	ldrb	r0, [r4, #26]
    e5ee:	2800      	cmp	r0, #0
    e5f0:	d021      	beq.n	e636 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e5f2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    e5f6:	4629      	mov	r1, r5
    e5f8:	f7ff feb9 	bl	e36e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    e5fc:	b1a8      	cbz	r0, e62a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    e5fe:	f7f7 fd57 	bl	60b0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e602:	463a      	mov	r2, r7
    e604:	4629      	mov	r1, r5
    e606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e60a:	f7ff b895 	b.w	d738 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e60e:	2001      	movs	r0, #1
    e610:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    e614:	463a      	mov	r2, r7
    e616:	4629      	mov	r1, r5
    e618:	4630      	mov	r0, r6
    e61a:	f7ff f88d 	bl	d738 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e61e:	7e61      	ldrb	r1, [r4, #25]
    e620:	4628      	mov	r0, r5
    e622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e626:	f7f7 bd5f 	b.w	60e8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e62a:	4639      	mov	r1, r7
    e62c:	4628      	mov	r0, r5
    e62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e632:	f7ff b870 	b.w	d716 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e63a:	b510      	push	{r4, lr}
    e63c:	4604      	mov	r4, r0
    e63e:	4608      	mov	r0, r1
    e640:	f7fd f9dc 	bl	b9fc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e644:	7921      	ldrb	r1, [r4, #4]
    e646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e64a:	2025      	movs	r0, #37	; 0x25
    e64c:	f001 bdad 	b.w	101aa <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    e650:	b510      	push	{r4, lr}
    e652:	4604      	mov	r4, r0
    e654:	3026      	adds	r0, #38	; 0x26
    e656:	f7fd f98d 	bl	b974 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e65a:	2800      	cmp	r0, #0
    e65c:	d102      	bne.n	e664 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    e65e:	207f      	movs	r0, #127	; 0x7f
    e660:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e664:	bd10      	pop	{r4, pc}
    e666:	7802      	ldrb	r2, [r0, #0]
    e668:	2320      	movs	r3, #32
    e66a:	f022 0220 	bic.w	r2, r2, #32
    e66e:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e672:	430a      	orrs	r2, r1
    e674:	7002      	strb	r2, [r0, #0]
    e676:	4770      	bx	lr

0000e678 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e678:	b570      	push	{r4, r5, r6, lr}
    e67a:	7001      	strb	r1, [r0, #0]
    e67c:	7042      	strb	r2, [r0, #1]
    e67e:	4614      	mov	r4, r2
    e680:	460d      	mov	r5, r1
    e682:	7880      	ldrb	r0, [r0, #2]
    e684:	f000 f87f 	bl	e786 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e688:	fb10 f005 	smulbb	r0, r0, r5
    e68c:	4360      	muls	r0, r4
    e68e:	28ff      	cmp	r0, #255	; 0xff
    e690:	d303      	bcc.n	e69a <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e692:	215c      	movs	r1, #92	; 0x5c
    e694:	202e      	movs	r0, #46	; 0x2e
    e696:	f7f6 f857 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e69a:	bd70      	pop	{r4, r5, r6, pc}

0000e69c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e69c:	b510      	push	{r4, lr}
    e69e:	4604      	mov	r4, r0
    e6a0:	7880      	ldrb	r0, [r0, #2]
    e6a2:	f000 f870 	bl	e786 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e6a6:	7861      	ldrb	r1, [r4, #1]
    e6a8:	7822      	ldrb	r2, [r4, #0]
    e6aa:	fb11 f102 	smulbb	r1, r1, r2
    e6ae:	4348      	muls	r0, r1
    e6b0:	b2c0      	uxtb	r0, r0
    e6b2:	bd10      	pop	{r4, pc}

0000e6b4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e6b4:	b510      	push	{r4, lr}
    e6b6:	4604      	mov	r4, r0
    e6b8:	f000 f84d 	bl	e756 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e6bc:	7961      	ldrb	r1, [r4, #5]
    e6be:	1c49      	adds	r1, r1, #1
    e6c0:	b2c9      	uxtb	r1, r1
    e6c2:	7161      	strb	r1, [r4, #5]
    e6c4:	7862      	ldrb	r2, [r4, #1]
    e6c6:	4291      	cmp	r1, r2
    e6c8:	d10b      	bne.n	e6e2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e6ca:	2200      	movs	r2, #0
    e6cc:	7162      	strb	r2, [r4, #5]
    e6ce:	78e1      	ldrb	r1, [r4, #3]
    e6d0:	4301      	orrs	r1, r0
    e6d2:	70e1      	strb	r1, [r4, #3]
    e6d4:	78a3      	ldrb	r3, [r4, #2]
    e6d6:	4299      	cmp	r1, r3
    e6d8:	d103      	bne.n	e6e2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e6da:	70e2      	strb	r2, [r4, #3]
    e6dc:	7921      	ldrb	r1, [r4, #4]
    e6de:	1c49      	adds	r1, r1, #1
    e6e0:	7121      	strb	r1, [r4, #4]
    e6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6e6:	f000 b825 	b.w	e734 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e6ea <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e6ea:	7081      	strb	r1, [r0, #2]
    e6ec:	4770      	bx	lr

0000e6ee <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e6ee:	b570      	push	{r4, r5, r6, lr}
    e6f0:	4604      	mov	r4, r0
    e6f2:	7880      	ldrb	r0, [r0, #2]
    e6f4:	f000 f847 	bl	e786 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e6f8:	7861      	ldrb	r1, [r4, #1]
    e6fa:	fb11 f500 	smulbb	r5, r1, r0
    e6fe:	78e0      	ldrb	r0, [r4, #3]
    e700:	f000 f841 	bl	e786 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e704:	7861      	ldrb	r1, [r4, #1]
    e706:	7962      	ldrb	r2, [r4, #5]
    e708:	fb10 2001 	smlabb	r0, r0, r1, r2
    e70c:	7821      	ldrb	r1, [r4, #0]
    e70e:	7922      	ldrb	r2, [r4, #4]
    e710:	1a89      	subs	r1, r1, r2
    e712:	fb11 f105 	smulbb	r1, r1, r5
    e716:	1a08      	subs	r0, r1, r0
    e718:	b2c0      	uxtb	r0, r0
    e71a:	bd70      	pop	{r4, r5, r6, pc}

0000e71c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e71c:	2100      	movs	r1, #0
    e71e:	6001      	str	r1, [r0, #0]
    e720:	8081      	strh	r1, [r0, #4]
    e722:	2101      	movs	r1, #1
    e724:	7041      	strb	r1, [r0, #1]
    e726:	7001      	strb	r1, [r0, #0]
    e728:	4770      	bx	lr

0000e72a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e72a:	2100      	movs	r1, #0
    e72c:	70c1      	strb	r1, [r0, #3]
    e72e:	7141      	strb	r1, [r0, #5]
    e730:	7101      	strb	r1, [r0, #4]
    e732:	4770      	bx	lr
    e734:	b510      	push	{r4, lr}
    e736:	2801      	cmp	r0, #1
    e738:	d007      	beq.n	e74a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e73a:	2802      	cmp	r0, #2
    e73c:	d007      	beq.n	e74e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e73e:	2804      	cmp	r0, #4
    e740:	d007      	beq.n	e752 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e742:	2139      	movs	r1, #57	; 0x39
    e744:	202e      	movs	r0, #46	; 0x2e
    e746:	f7f5 ffff 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e74a:	2025      	movs	r0, #37	; 0x25
    e74c:	bd10      	pop	{r4, pc}
    e74e:	2026      	movs	r0, #38	; 0x26
    e750:	bd10      	pop	{r4, pc}
    e752:	2027      	movs	r0, #39	; 0x27
    e754:	bd10      	pop	{r4, pc}
    e756:	4601      	mov	r1, r0
    e758:	2000      	movs	r0, #0
    e75a:	788a      	ldrb	r2, [r1, #2]
    e75c:	07d3      	lsls	r3, r2, #31
    e75e:	d002      	beq.n	e766 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e760:	78cb      	ldrb	r3, [r1, #3]
    e762:	07db      	lsls	r3, r3, #31
    e764:	d006      	beq.n	e774 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e766:	0793      	lsls	r3, r2, #30
    e768:	d506      	bpl.n	e778 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e76a:	78cb      	ldrb	r3, [r1, #3]
    e76c:	079b      	lsls	r3, r3, #30
    e76e:	d403      	bmi.n	e778 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e770:	2002      	movs	r0, #2
    e772:	4770      	bx	lr
    e774:	2001      	movs	r0, #1
    e776:	4770      	bx	lr
    e778:	0752      	lsls	r2, r2, #29
    e77a:	d5fc      	bpl.n	e776 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e77c:	78c9      	ldrb	r1, [r1, #3]
    e77e:	0749      	lsls	r1, r1, #29
    e780:	d4f9      	bmi.n	e776 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e782:	2004      	movs	r0, #4
    e784:	4770      	bx	lr
    e786:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e78a:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e78e:	4411      	add	r1, r2
    e790:	f000 0001 	and.w	r0, r0, #1
    e794:	4408      	add	r0, r1
    e796:	4770      	bx	lr

0000e798 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e798:	f240 315a 	movw	r1, #858	; 0x35a
    e79c:	4348      	muls	r0, r1
    e79e:	4770      	bx	lr

0000e7a0 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e7a0:	f240 20ef 	movw	r0, #751	; 0x2ef
    e7a4:	4770      	bx	lr
    e7a6:	020e      	.short	0x020e
    e7a8:	0630041c 	.word	0x0630041c
    e7ac:	035a0c60 	.word	0x035a0c60
    e7b0:	05c506b4 	.word	0x05c506b4
    e7b4:	12250bf5 	.word	0x12250bf5
    e7b8:	03b101a3 	.word	0x03b101a3
    e7bc:	02ef05bf 	.word	0x02ef05bf
    e7c0:	09a30649 	.word	0x09a30649

0000e7c4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e7c4:	b510      	push	{r4, lr}
    e7c6:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    e7ca:	b109      	cbz	r1, e7d0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e7cc:	2000      	movs	r0, #0
    e7ce:	bd10      	pop	{r4, pc}
    e7d0:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    e7d4:	b949      	cbnz	r1, e7ea <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e7d6:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    e7da:	b131      	cbz	r1, e7ea <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e7dc:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    e7e0:	428a      	cmp	r2, r1
    e7e2:	d902      	bls.n	e7ea <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e7e4:	f7ff fe90 	bl	e508 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e7e8:	e7f0      	b.n	e7cc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e7ea:	2001      	movs	r0, #1
    e7ec:	bd10      	pop	{r4, pc}

0000e7ee <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    e7ee:	b510      	push	{r4, lr}
    e7f0:	b131      	cbz	r1, e800 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    e7f2:	2901      	cmp	r1, #1
    e7f4:	d008      	beq.n	e808 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    e7f6:	f240 718b 	movw	r1, #1931	; 0x78b
    e7fa:	2030      	movs	r0, #48	; 0x30
    e7fc:	f7f5 ffa4 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e804:	f000 b9d4 	b.w	ebb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x314>
    e808:	2100      	movs	r1, #0
    e80a:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    e80e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e812:	f000 b93b 	b.w	ea8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>

0000e816 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    e816:	b510      	push	{r4, lr}
    e818:	4604      	mov	r4, r0
    e81a:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    e81e:	2800      	cmp	r0, #0
    e820:	d019      	beq.n	e856 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    e822:	2001      	movs	r0, #1
    e824:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    e828:	4601      	mov	r1, r0
    e82a:	4620      	mov	r0, r4
    e82c:	f7ff fe69 	bl	e502 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e830:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    e834:	b170      	cbz	r0, e854 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    e836:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    e83a:	f7f4 f819 	bl	2870 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e83e:	7820      	ldrb	r0, [r4, #0]
    e840:	f7f4 f964 	bl	2b0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e844:	f814 09a0 	ldrb.w	r0, [r4], #-160
    e848:	f7f4 f93e 	bl	2ac8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e84c:	b120      	cbz	r0, e858 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    e84e:	2000      	movs	r0, #0
    e850:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    e854:	2000      	movs	r0, #0
    e856:	bd10      	pop	{r4, pc}
    e858:	f240 2103 	movw	r1, #515	; 0x203
    e85c:	2030      	movs	r0, #48	; 0x30
    e85e:	f7f5 ff73 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e862 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    e862:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    e866:	4770      	bx	lr

0000e868 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    e868:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    e86c:	4770      	bx	lr

0000e86e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    e86e:	b50e      	push	{r1, r2, r3, lr}
    e870:	4669      	mov	r1, sp
    e872:	2001      	movs	r0, #1
    e874:	f7fe fdcd 	bl	d412 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e878:	b138      	cbz	r0, e88a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    e87a:	f44f 71a1 	mov.w	r1, #322	; 0x142
    e87e:	2030      	movs	r0, #48	; 0x30
    e880:	f7f5 ff62 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e884:	9802      	ldr	r0, [sp, #8]
    e886:	f7ff ffc6 	bl	e816 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    e88a:	4668      	mov	r0, sp
    e88c:	f7f6 f994 	bl	4bb8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e890:	2800      	cmp	r0, #0
    e892:	d0f7      	beq.n	e884 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    e894:	f7f9 fb22 	bl	7edc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    e898:	2000      	movs	r0, #0
    e89a:	bd0e      	pop	{r1, r2, r3, pc}

0000e89c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    e89c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e89e:	4604      	mov	r4, r0
    e8a0:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    e8a4:	2800      	cmp	r0, #0
    e8a6:	d153      	bne.n	e950 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e8a8:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e8ac:	2803      	cmp	r0, #3
    e8ae:	d14f      	bne.n	e950 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e8b0:	f7fd fc35 	bl	c11e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e8b4:	4601      	mov	r1, r0
    e8b6:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    e8ba:	f7f3 fb75 	bl	1fa8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e8be:	2800      	cmp	r0, #0
    e8c0:	dd46      	ble.n	e950 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e8c2:	68e1      	ldr	r1, [r4, #12]
    e8c4:	b111      	cbz	r1, e8cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    e8c6:	fbb0 f0f1 	udiv	r0, r0, r1
    e8ca:	e000      	b.n	e8ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    e8cc:	2000      	movs	r0, #0
    e8ce:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e8d2:	1c40      	adds	r0, r0, #1
    e8d4:	4408      	add	r0, r1
    e8d6:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    e8da:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e8de:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    e8e2:	1a08      	subs	r0, r1, r0
    e8e4:	b200      	sxth	r0, r0
    e8e6:	2800      	cmp	r0, #0
    e8e8:	dd32      	ble.n	e950 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e8ea:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    e8ee:	f7f3 ffbf 	bl	2870 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e8f2:	2800      	cmp	r0, #0
    e8f4:	d02c      	beq.n	e950 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e8f6:	2001      	movs	r0, #1
    e8f8:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
    e8fc:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    e900:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    e904:	ae01      	add	r6, sp, #4
    e906:	1a40      	subs	r0, r0, r1
    e908:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e90c:	1e40      	subs	r0, r0, #1
    e90e:	4408      	add	r0, r1
    e910:	b285      	uxth	r5, r0
    e912:	e017      	b.n	e944 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    e914:	9600      	str	r6, [sp, #0]
    e916:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
    e91a:	2300      	movs	r3, #0
    e91c:	2201      	movs	r2, #1
    e91e:	4620      	mov	r0, r4
    e920:	f7f9 fbac 	bl	807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>
    e924:	2800      	cmp	r0, #0
    e926:	d013      	beq.n	e950 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e928:	2801      	cmp	r0, #1
    e92a:	d004      	beq.n	e936 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    e92c:	f240 6101 	movw	r1, #1537	; 0x601
    e930:	2030      	movs	r0, #48	; 0x30
    e932:	f7f5 ff09 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e936:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e93a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e93e:	4408      	add	r0, r1
    e940:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    e944:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e948:	1a28      	subs	r0, r5, r0
    e94a:	b200      	sxth	r0, r0
    e94c:	2800      	cmp	r0, #0
    e94e:	dae1      	bge.n	e914 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    e950:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e952:	2000      	movs	r0, #0
    e954:	4770      	bx	lr
    e956:	b570      	push	{r4, r5, r6, lr}
    e958:	4604      	mov	r4, r0
    e95a:	2601      	movs	r6, #1
    e95c:	f000 f90c 	bl	eb78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    e960:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    e964:	2000      	movs	r0, #0
    e966:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    e96a:	2001      	movs	r0, #1
    e96c:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    e970:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    e974:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    e978:	b160      	cbz	r0, e994 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xf8>
    e97a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e97e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e982:	f7f3 fadf 	bl	1f44 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e986:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    e98a:	2100      	movs	r1, #0
    e98c:	4628      	mov	r0, r5
    e98e:	f7ff f861 	bl	da54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e992:	e00f      	b.n	e9b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x118>
    e994:	4620      	mov	r0, r4
    e996:	f7ff fd69 	bl	e46c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e99a:	4606      	mov	r6, r0
    e99c:	4631      	mov	r1, r6
    e99e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e9a2:	f7f3 facf 	bl	1f44 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e9a6:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    e9aa:	4631      	mov	r1, r6
    e9ac:	4628      	mov	r0, r5
    e9ae:	f7ff f851 	bl	da54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e9b2:	1c46      	adds	r6, r0, #1
    e9b4:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e9b8:	1c41      	adds	r1, r0, #1
    e9ba:	290a      	cmp	r1, #10
    e9bc:	d202      	bcs.n	e9c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x128>
    e9be:	4430      	add	r0, r6
    e9c0:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    e9c4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    e9c8:	b130      	cbz	r0, e9d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    e9ca:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e9ce:	1c40      	adds	r0, r0, #1
    e9d0:	280a      	cmp	r0, #10
    e9d2:	d301      	bcc.n	e9d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    e9d4:	2002      	movs	r0, #2
    e9d6:	e000      	b.n	e9da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13e>
    e9d8:	2003      	movs	r0, #3
    e9da:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    e9de:	2100      	movs	r1, #0
    e9e0:	4620      	mov	r0, r4
    e9e2:	f000 f822 	bl	ea2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    e9e6:	b120      	cbz	r0, e9f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    e9e8:	4620      	mov	r0, r4
    e9ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e9ee:	f000 b80d 	b.w	ea0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    e9f2:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    e9f6:	4629      	mov	r1, r5
    e9f8:	f000 f8bc 	bl	eb74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    e9fc:	2800      	cmp	r0, #0
    e9fe:	d104      	bne.n	ea0a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
    ea00:	f240 61a2 	movw	r1, #1698	; 0x6a2
    ea04:	2030      	movs	r0, #48	; 0x30
    ea06:	f7f5 fe9f 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea0a:	bd70      	pop	{r4, r5, r6, pc}
    ea0c:	b510      	push	{r4, lr}
    ea0e:	4604      	mov	r4, r0
    ea10:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    ea14:	f7f4 f858 	bl	2ac8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ea18:	2000      	movs	r0, #0
    ea1a:	7520      	strb	r0, [r4, #20]
    ea1c:	bd10      	pop	{r4, pc}
    ea1e:	b510      	push	{r4, lr}
    ea20:	f7ff fd28 	bl	e474 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    ea24:	f200 1009 	addw	r0, r0, #265	; 0x109
    ea28:	bd10      	pop	{r4, pc}
    ea2a:	b570      	push	{r4, r5, r6, lr}
    ea2c:	4604      	mov	r4, r0
    ea2e:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    ea32:	460d      	mov	r5, r1
    ea34:	b108      	cbz	r0, ea3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19e>
    ea36:	2001      	movs	r0, #1
    ea38:	bd70      	pop	{r4, r5, r6, pc}
    ea3a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ea3e:	b1a8      	cbz	r0, ea6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    ea40:	4620      	mov	r0, r4
    ea42:	f7ff fd13 	bl	e46c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ea46:	4405      	add	r5, r0
    ea48:	4620      	mov	r0, r4
    ea4a:	f7ff ffe8 	bl	ea1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    ea4e:	1941      	adds	r1, r0, r5
    ea50:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ea54:	4288      	cmp	r0, r1
    ea56:	d206      	bcs.n	ea66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ca>
    ea58:	2001      	movs	r0, #1
    ea5a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    ea5e:	4620      	mov	r0, r4
    ea60:	f7ff fd52 	bl	e508 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ea64:	e7e7      	b.n	ea36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19a>
    ea66:	1b40      	subs	r0, r0, r5
    ea68:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    ea6c:	2000      	movs	r0, #0
    ea6e:	bd70      	pop	{r4, r5, r6, pc}
    ea70:	b510      	push	{r4, lr}
    ea72:	4604      	mov	r4, r0
    ea74:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    ea78:	f000 f9e8 	bl	ee4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    ea7c:	4602      	mov	r2, r0
    ea7e:	4620      	mov	r0, r4
    ea80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea84:	f240 111b 	movw	r1, #283	; 0x11b
    ea88:	f7ff bbc8 	b.w	e21c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ea8c:	b510      	push	{r4, lr}
    ea8e:	f7fc fe07 	bl	b6a0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ea92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea96:	f7f4 b96d 	b.w	2d74 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ea9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ea9e:	4604      	mov	r4, r0
    eaa0:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    eaa4:	2800      	cmp	r0, #0
    eaa6:	d051      	beq.n	eb4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    eaa8:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    eaac:	2803      	cmp	r0, #3
    eaae:	d14d      	bne.n	eb4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    eab0:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    eab4:	f001 fac2 	bl	1003c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    eab8:	4605      	mov	r5, r0
    eaba:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    eabe:	f7f9 f9ff 	bl	7ec0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    eac2:	4428      	add	r0, r5
    eac4:	b286      	uxth	r6, r0
    eac6:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    eaca:	f7f9 f9f9 	bl	7ec0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    eace:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    ead2:	fa1f f880 	uxth.w	r8, r0
    ead6:	4648      	mov	r0, r9
    ead8:	f001 fb49 	bl	1016e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    eadc:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    eae0:	1a0d      	subs	r5, r1, r0
    eae2:	4648      	mov	r0, r9
    eae4:	f001 fb51 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    eae8:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    eaec:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    eaf0:	fbb0 f0fa 	udiv	r0, r0, sl
    eaf4:	1a2d      	subs	r5, r5, r0
    eaf6:	4648      	mov	r0, r9
    eaf8:	f001 fb39 	bl	1016e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    eafc:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    eb00:	1a0f      	subs	r7, r1, r0
    eb02:	4648      	mov	r0, r9
    eb04:	f001 fb41 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    eb08:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    eb0c:	4401      	add	r1, r0
    eb0e:	fbb1 f0fa 	udiv	r0, r1, sl
    eb12:	1a39      	subs	r1, r7, r0
    eb14:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    eb18:	4370      	muls	r0, r6
    eb1a:	fbb0 f2f8 	udiv	r2, r0, r8
    eb1e:	2029      	movs	r0, #41	; 0x29
    eb20:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    eb24:	3260      	adds	r2, #96	; 0x60
    eb26:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    eb2a:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    eb2e:	42a9      	cmp	r1, r5
    eb30:	d801      	bhi.n	eb36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29a>
    eb32:	4285      	cmp	r5, r0
    eb34:	d901      	bls.n	eb3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29e>
    eb36:	f7f5 fa69 	bl	400c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    eb3a:	4631      	mov	r1, r6
    eb3c:	68e0      	ldr	r0, [r4, #12]
    eb3e:	f7fd fb22 	bl	c186 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    eb42:	2100      	movs	r1, #0
    eb44:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    eb48:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
    eb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eb50:	b570      	push	{r4, r5, r6, lr}
    eb52:	460c      	mov	r4, r1
    eb54:	4605      	mov	r5, r0
    eb56:	f001 fb18 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    eb5a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    eb5e:	4408      	add	r0, r1
    eb60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    eb64:	fbb0 f6f1 	udiv	r6, r0, r1
    eb68:	4628      	mov	r0, r5
    eb6a:	f001 fb00 	bl	1016e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    eb6e:	4430      	add	r0, r6
    eb70:	4420      	add	r0, r4
    eb72:	bd70      	pop	{r4, r5, r6, pc}
    eb74:	f7f3 bb4c 	b.w	2210 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    eb78:	b510      	push	{r4, lr}
    eb7a:	4604      	mov	r4, r0
    eb7c:	f7ff fca3 	bl	e4c6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    eb80:	b1a0      	cbz	r0, ebac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    eb82:	4620      	mov	r0, r4
    eb84:	f7ff fc97 	bl	e4b6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    eb88:	b918      	cbnz	r0, eb92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    eb8a:	4620      	mov	r0, r4
    eb8c:	f7ff fc9d 	bl	e4ca <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eb90:	b120      	cbz	r0, eb9c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    eb92:	2449      	movs	r4, #73	; 0x49
    eb94:	f001 fab7 	bl	10106 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    eb98:	b928      	cbnz	r0, eba6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    eb9a:	e001      	b.n	eba0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    eb9c:	2442      	movs	r4, #66	; 0x42
    eb9e:	e7f9      	b.n	eb94 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f8>
    eba0:	f001 faa7 	bl	100f2 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    eba4:	b100      	cbz	r0, eba8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    eba6:	1de4      	adds	r4, r4, #7
    eba8:	4620      	mov	r0, r4
    ebaa:	bd10      	pop	{r4, pc}
    ebac:	206b      	movs	r0, #107	; 0x6b
    ebae:	bd10      	pop	{r4, pc}
    ebb0:	b570      	push	{r4, r5, r6, lr}
    ebb2:	4604      	mov	r4, r0
    ebb4:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    ebb8:	2500      	movs	r5, #0
    ebba:	b118      	cbz	r0, ebc4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    ebbc:	2001      	movs	r0, #1
    ebbe:	f000 f887 	bl	ecd0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    ebc2:	4605      	mov	r5, r0
    ebc4:	4620      	mov	r0, r4
    ebc6:	f7ff fc51 	bl	e46c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ebca:	1941      	adds	r1, r0, r5
    ebcc:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    ebd0:	34b8      	adds	r4, #184	; 0xb8
    ebd2:	f7f3 f9b7 	bl	1f44 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ebd6:	2600      	movs	r6, #0
    ebd8:	60e0      	str	r0, [r4, #12]
    ebda:	f804 6b0b 	strb.w	r6, [r4], #11
    ebde:	2001      	movs	r0, #1
    ebe0:	f804 0901 	strb.w	r0, [r4], #-1
    ebe4:	2003      	movs	r0, #3
    ebe6:	f804 09c2 	strb.w	r0, [r4], #-194
    ebea:	4620      	mov	r0, r4
    ebec:	f7ff ffc4 	bl	eb78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    ebf0:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    ebf4:	4629      	mov	r1, r5
    ebf6:	4620      	mov	r0, r4
    ebf8:	f7ff ff17 	bl	ea2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    ebfc:	b930      	cbnz	r0, ec0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x370>
    ebfe:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    ec02:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    ec06:	f7ff ffb5 	bl	eb74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    ec0a:	b128      	cbz	r0, ec18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    ec0c:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    ec10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec14:	f7ff bf3a 	b.w	ea8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    ec18:	f240 61eb 	movw	r1, #1771	; 0x6eb
    ec1c:	2030      	movs	r0, #48	; 0x30
    ec1e:	f7f5 fd93 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec22:	b510      	push	{r4, lr}
    ec24:	4604      	mov	r4, r0
    ec26:	2000      	movs	r0, #0
    ec28:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    ec2c:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    ec30:	f7f3 ff4a 	bl	2ac8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ec34:	2020      	movs	r0, #32
    ec36:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
    ec3a:	bd10      	pop	{r4, pc}
    ec3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec40:	2500      	movs	r5, #0
    ec42:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    ec46:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    ec4a:	4688      	mov	r8, r1
    ec4c:	4604      	mov	r4, r0
    ec4e:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    ec52:	2701      	movs	r7, #1
    ec54:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    ec58:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    ec5c:	4639      	mov	r1, r7
    ec5e:	34a0      	adds	r4, #160	; 0xa0
    ec60:	f7f7 fcb0 	bl	65c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ec64:	6860      	ldr	r0, [r4, #4]
    ec66:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
    ec6a:	6861      	ldr	r1, [r4, #4]
    ec6c:	7820      	ldrb	r0, [r4, #0]
    ec6e:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
    ec72:	6861      	ldr	r1, [r4, #4]
    ec74:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
    ec78:	6860      	ldr	r0, [r4, #4]
    ec7a:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
    ec7e:	6864      	ldr	r4, [r4, #4]
    ec80:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    ec84:	2300      	movs	r3, #0
    ec86:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
    ec8a:	461a      	mov	r2, r3
    ec8c:	4619      	mov	r1, r3
    ec8e:	4620      	mov	r0, r4
    ec90:	9500      	str	r5, [sp, #0]
    ec92:	f7f9 f9f3 	bl	807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>
    ec96:	b120      	cbz	r0, eca2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    ec98:	f240 2117 	movw	r1, #535	; 0x217
    ec9c:	2030      	movs	r0, #48	; 0x30
    ec9e:	f7f5 fd53 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eca2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    eca6:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    ecaa:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
    ecae:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
    ecb2:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
    ecb6:	f504 7498 	add.w	r4, r4, #304	; 0x130
    ecba:	7665      	strb	r5, [r4, #25]
    ecbc:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
    ecc0:	1e40      	subs	r0, r0, #1
    ecc2:	f824 0cbc 	strh.w	r0, [r4, #-188]
    ecc6:	86e5      	strh	r5, [r4, #54]	; 0x36
    ecc8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eccc:	f7ff bede 	b.w	ea8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    ecd0:	b510      	push	{r4, lr}
    ecd2:	f7f9 fbdf 	bl	8494 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x494>
    ecd6:	f242 7110 	movw	r1, #10000	; 0x2710
    ecda:	fbb0 f2f1 	udiv	r2, r0, r1
    ecde:	fb01 0012 	mls	r0, r1, r2, r0
    ece2:	bd10      	pop	{r4, pc}
    ece4:	b570      	push	{r4, r5, r6, lr}
    ece6:	b140      	cbz	r0, ecfa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45e>
    ece8:	2909      	cmp	r1, #9
    ecea:	d248      	bcs.n	ed7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e2>
    ecec:	e8df f001 	tbb	[pc, r1]
    ecf0:	3b3b1507 	.word	0x3b3b1507
    ecf4:	3f294737 	.word	0x3f294737
    ecf8:	0043      	.short	0x0043
    ecfa:	21cd      	movs	r1, #205	; 0xcd
    ecfc:	e03c      	b.n	ed78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    ecfe:	4604      	mov	r4, r0
    ed00:	f7f8 f9de 	bl	70c0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    ed04:	b110      	cbz	r0, ed0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x470>
    ed06:	f240 2175 	movw	r1, #629	; 0x275
    ed0a:	e035      	b.n	ed78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    ed0c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    ed10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed14:	38f8      	subs	r0, #248	; 0xf8
    ed16:	f7f4 b90f 	b.w	2f38 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ed1a:	4605      	mov	r5, r0
    ed1c:	f7ff fbcf 	bl	e4be <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ed20:	b9a8      	cbnz	r0, ed4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4b2>
    ed22:	4628      	mov	r0, r5
    ed24:	f7ff fe7b 	bl	ea1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    ed28:	4604      	mov	r4, r0
    ed2a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    ed2e:	42a0      	cmp	r0, r4
    ed30:	d20b      	bcs.n	ed4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    ed32:	1a20      	subs	r0, r4, r0
    ed34:	2104      	movs	r1, #4
    ed36:	f7f3 f833 	bl	1da0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ed3a:	b130      	cbz	r0, ed4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    ed3c:	4628      	mov	r0, r5
    ed3e:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    ed42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed46:	f7ff bb8f 	b.w	e468 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    ed4a:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    ed4e:	4628      	mov	r0, r5
    ed50:	f7f8 f9d2 	bl	70f8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    ed54:	2800      	cmp	r0, #0
    ed56:	d014      	beq.n	ed82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e6>
    ed58:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    ed5c:	e00c      	b.n	ed78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    ed5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed62:	f7fc be51 	b.w	ba08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ed66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed6a:	f7ff bdf4 	b.w	e956 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
    ed6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed72:	f7ff be4b 	b.w	ea0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    ed76:	21ed      	movs	r1, #237	; 0xed
    ed78:	2030      	movs	r0, #48	; 0x30
    ed7a:	f7f5 fce5 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed7e:	21f1      	movs	r1, #241	; 0xf1
    ed80:	e7fa      	b.n	ed78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    ed82:	bd70      	pop	{r4, r5, r6, pc}
    ed84:	b510      	push	{r4, lr}
    ed86:	0004      	movs	r4, r0
    ed88:	d008      	beq.n	ed9c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x500>
    ed8a:	2909      	cmp	r1, #9
    ed8c:	d25c      	bcs.n	ee48 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ac>
    ed8e:	e8df f001 	tbb	[pc, r1]
    ed92:	3607      	.short	0x3607
    ed94:	5b3a3e3e 	.word	0x5b3a3e3e
    ed98:	00574a43 	.word	0x00574a43
    ed9c:	2196      	movs	r1, #150	; 0x96
    ed9e:	e050      	b.n	ee42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    eda0:	2100      	movs	r1, #0
    eda2:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
    eda6:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    edaa:	4620      	mov	r0, r4
    edac:	b189      	cbz	r1, edd2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x536>
    edae:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
    edb2:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    edb6:	428a      	cmp	r2, r1
    edb8:	d106      	bne.n	edc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52c>
    edba:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
    edbe:	1a51      	subs	r1, r2, r1
    edc0:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    edc4:	4611      	mov	r1, r2
    edc6:	e00d      	b.n	ede4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    edc8:	1a51      	subs	r1, r2, r1
    edca:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    edce:	b291      	uxth	r1, r2
    edd0:	e008      	b.n	ede4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    edd2:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    edd6:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    edda:	1a89      	subs	r1, r1, r2
    eddc:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    ede0:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    ede4:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    ede8:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
    edec:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
    edf0:	f7f9 fd6c 	bl	88cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    edf4:	4620      	mov	r0, r4
    edf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edfa:	f7f9 bb55 	b.w	84a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    edfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee02:	f000 b905 	b.w	f010 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    ee06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee0a:	f7fc bdfd 	b.w	ba08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ee0e:	4620      	mov	r0, r4
    ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee14:	f000 b827 	b.w	ee66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ca>
    ee18:	2001      	movs	r0, #1
    ee1a:	f7f2 ffb1 	bl	1d80 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    ee1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee22:	f7fe bcbe 	b.w	d7a2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    ee26:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    ee2a:	2804      	cmp	r0, #4
    ee2c:	d001      	beq.n	ee32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    ee2e:	21b8      	movs	r1, #184	; 0xb8
    ee30:	e007      	b.n	ee42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    ee32:	4620      	mov	r0, r4
    ee34:	f7ff fef5 	bl	ec22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    ee38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee3c:	f7f7 be10 	b.w	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ee40:	21c1      	movs	r1, #193	; 0xc1
    ee42:	2030      	movs	r0, #48	; 0x30
    ee44:	f7f5 fc80 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee48:	21c5      	movs	r1, #197	; 0xc5
    ee4a:	e7fa      	b.n	ee42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    ee4c:	b510      	push	{r4, lr}
    ee4e:	f001 f99c 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ee52:	f64d 7141 	movw	r1, #57153	; 0xdf41
    ee56:	4408      	add	r0, r1
    ee58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ee5c:	fbb0 f0f1 	udiv	r0, r0, r1
    ee60:	f500 70bb 	add.w	r0, r0, #374	; 0x176
    ee64:	bd10      	pop	{r4, pc}
    ee66:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ee68:	4604      	mov	r4, r0
    ee6a:	f7fd f958 	bl	c11e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    ee6e:	4601      	mov	r1, r0
    ee70:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    ee74:	f7f3 f898 	bl	1fa8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ee78:	68e1      	ldr	r1, [r4, #12]
    ee7a:	b111      	cbz	r1, ee82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e6>
    ee7c:	fbb0 f0f1 	udiv	r0, r0, r1
    ee80:	e000      	b.n	ee84 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e8>
    ee82:	2000      	movs	r0, #0
    ee84:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    ee88:	290d      	cmp	r1, #13
    ee8a:	d00c      	beq.n	eea6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x60a>
    ee8c:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    ee90:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    ee94:	1813      	adds	r3, r2, r0
    ee96:	1acb      	subs	r3, r1, r3
    ee98:	b21b      	sxth	r3, r3
    ee9a:	2b00      	cmp	r3, #0
    ee9c:	db06      	blt.n	eeac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x610>
    ee9e:	1c49      	adds	r1, r1, #1
    eea0:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    eea4:	e006      	b.n	eeb4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x618>
    eea6:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    eeaa:	e012      	b.n	eed2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
    eeac:	1c40      	adds	r0, r0, #1
    eeae:	4410      	add	r0, r2
    eeb0:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    eeb4:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
    eeb8:	f88d 0000 	strb.w	r0, [sp]
    eebc:	9800      	ldr	r0, [sp, #0]
    eebe:	9000      	str	r0, [sp, #0]
    eec0:	f89d 0000 	ldrb.w	r0, [sp]
    eec4:	b940      	cbnz	r0, eed8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    eec6:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    eeca:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    eece:	4288      	cmp	r0, r1
    eed0:	d102      	bne.n	eed8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    eed2:	1c40      	adds	r0, r0, #1
    eed4:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    eed8:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    eedc:	1c40      	adds	r0, r0, #1
    eede:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    eee2:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    eee6:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    eeea:	1a40      	subs	r0, r0, r1
    eeec:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    eef0:	1e40      	subs	r0, r0, #1
    eef2:	4408      	add	r0, r1
    eef4:	b285      	uxth	r5, r0
    eef6:	e026      	b.n	ef46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    eef8:	a801      	add	r0, sp, #4
    eefa:	2300      	movs	r3, #0
    eefc:	9000      	str	r0, [sp, #0]
    eefe:	461a      	mov	r2, r3
    ef00:	4620      	mov	r0, r4
    ef02:	f7f9 f8bb 	bl	807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>
    ef06:	2800      	cmp	r0, #0
    ef08:	d038      	beq.n	ef7c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6e0>
    ef0a:	2801      	cmp	r0, #1
    ef0c:	d004      	beq.n	ef18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x67c>
    ef0e:	f240 614e 	movw	r1, #1614	; 0x64e
    ef12:	2030      	movs	r0, #48	; 0x30
    ef14:	f7f5 fc18 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef18:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    ef1c:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    ef20:	1a42      	subs	r2, r0, r1
    ef22:	b212      	sxth	r2, r2
    ef24:	2a00      	cmp	r2, #0
    ef26:	da09      	bge.n	ef3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    ef28:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ef2c:	4402      	add	r2, r0
    ef2e:	1aaa      	subs	r2, r5, r2
    ef30:	b212      	sxth	r2, r2
    ef32:	2a00      	cmp	r2, #0
    ef34:	da02      	bge.n	ef3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    ef36:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    ef3a:	e004      	b.n	ef46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    ef3c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ef40:	4408      	add	r0, r1
    ef42:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    ef46:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    ef4a:	1a68      	subs	r0, r5, r1
    ef4c:	b200      	sxth	r0, r0
    ef4e:	2800      	cmp	r0, #0
    ef50:	dad2      	bge.n	eef8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65c>
    ef52:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    ef56:	b178      	cbz	r0, ef78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6dc>
    ef58:	2008      	movs	r0, #8
    ef5a:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    ef5e:	2001      	movs	r0, #1
    ef60:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    ef64:	4620      	mov	r0, r4
    ef66:	f000 f855 	bl	f014 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    ef6a:	4620      	mov	r0, r4
    ef6c:	f7ff fe59 	bl	ec22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    ef70:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    ef74:	f7f7 bd74 	b.w	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ef78:	203e      	movs	r0, #62	; 0x3e
    ef7a:	e7ee      	b.n	ef5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6be>
    ef7c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef7e:	01f4      	.short	0x01f4
    ef80:	009600fa 	.word	0x009600fa
    ef84:	004b0064 	.word	0x004b0064
    ef88:	001e0032 	.word	0x001e0032
    ef8c:	000a0014 	.word	0x000a0014
    ef90:	00020005 	.word	0x00020005
    ef94:	0001      	.short	0x0001
    ef96:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ef9a:	f001 0307 	and.w	r3, r1, #7
    ef9e:	7802      	ldrb	r2, [r0, #0]
    efa0:	2101      	movs	r1, #1
    efa2:	4099      	lsls	r1, r3
    efa4:	438a      	bics	r2, r1
    efa6:	7002      	strb	r2, [r0, #0]
    efa8:	4770      	bx	lr

0000efaa <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    efaa:	b510      	push	{r4, lr}
    efac:	4604      	mov	r4, r0
    efae:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
    efb2:	68e1      	ldr	r1, [r4, #12]
    efb4:	4288      	cmp	r0, r1
    efb6:	d109      	bne.n	efcc <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    efb8:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    efbc:	8aa2      	ldrh	r2, [r4, #20]
    efbe:	4291      	cmp	r1, r2
    efc0:	d104      	bne.n	efcc <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    efc2:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
    efc6:	8ae2      	ldrh	r2, [r4, #22]
    efc8:	4291      	cmp	r1, r2
    efca:	d013      	beq.n	eff4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    efcc:	8821      	ldrh	r1, [r4, #0]
    efce:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
    efd2:	f7fe fc6d 	bl	d8b0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    efd6:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
    efda:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    efde:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
    efe2:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    efe6:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
    efea:	2001      	movs	r0, #1
    efec:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
    eff0:	f7f7 fd36 	bl	6a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    eff4:	2102      	movs	r1, #2
    eff6:	4620      	mov	r0, r4
    eff8:	f7f7 fae4 	bl	65c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    effc:	2000      	movs	r0, #0
    effe:	f804 0f7e 	strb.w	r0, [r4, #126]!
    f002:	2003      	movs	r0, #3
    f004:	70e0      	strb	r0, [r4, #3]
    f006:	bd10      	pop	{r4, pc}

0000f008 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f008:	f7f5 bf44 	b.w	4e94 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f00c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f00c:	2000      	movs	r0, #0
    f00e:	4770      	bx	lr

0000f010 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f010:	f7f6 bc78 	b.w	5904 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f014 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f014:	2100      	movs	r1, #0
    f016:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    f01a:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    f01e:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    f022:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    f026:	b109      	cbz	r1, f02c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f028:	2102      	movs	r1, #2
    f02a:	e000      	b.n	f02e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f02c:	2103      	movs	r1, #3
    f02e:	f7f8 bef5 	b.w	7e1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f032:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    f036:	28fe      	cmp	r0, #254	; 0xfe
    f038:	d001      	beq.n	f03e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f03a:	2001      	movs	r0, #1
    f03c:	4770      	bx	lr
    f03e:	2000      	movs	r0, #0
    f040:	4770      	bx	lr
    f042:	b510      	push	{r4, lr}
    f044:	2801      	cmp	r0, #1
    f046:	d006      	beq.n	f056 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f048:	2802      	cmp	r0, #2
    f04a:	d004      	beq.n	f056 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f04c:	f240 2163 	movw	r1, #611	; 0x263
    f050:	2006      	movs	r0, #6
    f052:	f7f5 fb79 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f056:	bd10      	pop	{r4, pc}
    f058:	2801      	cmp	r0, #1
    f05a:	d002      	beq.n	f062 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f05c:	2802      	cmp	r0, #2
    f05e:	d105      	bne.n	f06c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f060:	e002      	b.n	f068 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f062:	2901      	cmp	r1, #1
    f064:	d004      	beq.n	f070 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f066:	e001      	b.n	f06c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f068:	2902      	cmp	r1, #2
    f06a:	d001      	beq.n	f070 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f06c:	2000      	movs	r0, #0
    f06e:	4770      	bx	lr
    f070:	2001      	movs	r0, #1
    f072:	4770      	bx	lr
    f074:	1a40      	subs	r0, r0, r1
    f076:	b200      	sxth	r0, r0
    f078:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f07c:	4288      	cmp	r0, r1
    f07e:	dc01      	bgt.n	f084 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f080:	2800      	cmp	r0, #0
    f082:	dc01      	bgt.n	f088 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f084:	2001      	movs	r0, #1
    f086:	4770      	bx	lr
    f088:	2000      	movs	r0, #0
    f08a:	4770      	bx	lr
    f08c:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f090:	f001 0107 	and.w	r1, r1, #7
    f094:	7800      	ldrb	r0, [r0, #0]
    f096:	2201      	movs	r2, #1
    f098:	408a      	lsls	r2, r1
    f09a:	4010      	ands	r0, r2
    f09c:	40c8      	lsrs	r0, r1
    f09e:	4770      	bx	lr
    f0a0:	b118      	cbz	r0, f0aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    f0a2:	2802      	cmp	r0, #2
    f0a4:	d001      	beq.n	f0aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    f0a6:	2001      	movs	r0, #1
    f0a8:	4770      	bx	lr
    f0aa:	2000      	movs	r0, #0
    f0ac:	4770      	bx	lr

0000f0ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f0ae:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f0b0:	7881      	ldrb	r1, [r0, #2]
    f0b2:	4604      	mov	r4, r0
    f0b4:	291a      	cmp	r1, #26
    f0b6:	d025      	beq.n	f104 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f0b8:	dc0e      	bgt.n	f0d8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    f0ba:	2916      	cmp	r1, #22
    f0bc:	d22d      	bcs.n	f11a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f0be:	e8df f001 	tbb	[pc, r1]
    f0c2:	2c2c      	.short	0x2c2c
    f0c4:	212c2c2c 	.word	0x212c2c2c
    f0c8:	2c2c2c2c 	.word	0x2c2c2c2c
    f0cc:	2c2c2c2c 	.word	0x2c2c2c2c
    f0d0:	2c2c2c2c 	.word	0x2c2c2c2c
    f0d4:	2121212c 	.word	0x2121212c
    f0d8:	292a      	cmp	r1, #42	; 0x2a
    f0da:	d01e      	beq.n	f11a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f0dc:	dc0b      	bgt.n	f0f6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    f0de:	f1a1 011e 	sub.w	r1, r1, #30
    f0e2:	290c      	cmp	r1, #12
    f0e4:	d219      	bcs.n	f11a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f0e6:	e8df f001 	tbb	[pc, r1]
    f0ea:	1818      	.short	0x1818
    f0ec:	18181818 	.word	0x18181818
    f0f0:	18181818 	.word	0x18181818
    f0f4:	0d18      	.short	0x0d18
    f0f6:	393a      	subs	r1, #58	; 0x3a
    f0f8:	2904      	cmp	r1, #4
    f0fa:	d20e      	bcs.n	f11a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f0fc:	e8df f001 	tbb	[pc, r1]
    f100:	020d020d 	.word	0x020d020d
    f104:	8820      	ldrh	r0, [r4, #0]
    f106:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f10a:	d206      	bcs.n	f11a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f10c:	2701      	movs	r7, #1
    f10e:	4669      	mov	r1, sp
    f110:	f7fe fbbd 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f114:	b118      	cbz	r0, f11e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    f116:	2002      	movs	r0, #2
    f118:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f11a:	2012      	movs	r0, #18
    f11c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f11e:	9d01      	ldr	r5, [sp, #4]
    f120:	4668      	mov	r0, sp
    f122:	462e      	mov	r6, r5
    f124:	f505 75bc 	add.w	r5, r5, #376	; 0x178
    f128:	f206 1679 	addw	r6, r6, #377	; 0x179
    f12c:	f000 fe8d 	bl	fe4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    f130:	b138      	cbz	r0, f142 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    f132:	7828      	ldrb	r0, [r5, #0]
    f134:	f88d 0008 	strb.w	r0, [sp, #8]
    f138:	9802      	ldr	r0, [sp, #8]
    f13a:	9002      	str	r0, [sp, #8]
    f13c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f140:	b108      	cbz	r0, f146 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    f142:	200c      	movs	r0, #12
    f144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f146:	702f      	strb	r7, [r5, #0]
    f148:	78a0      	ldrb	r0, [r4, #2]
    f14a:	7030      	strb	r0, [r6, #0]
    f14c:	4668      	mov	r0, sp
    f14e:	f7fe ff36 	bl	dfbe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f152:	2000      	movs	r0, #0
    f154:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f156 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f156:	b510      	push	{r4, lr}
    f158:	4604      	mov	r4, r0
    f15a:	7800      	ldrb	r0, [r0, #0]
    f15c:	b118      	cbz	r0, f166 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f15e:	2801      	cmp	r0, #1
    f160:	d001      	beq.n	f166 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f162:	2012      	movs	r0, #18
    f164:	bd10      	pop	{r4, pc}
    f166:	f000 fe9e 	bl	fea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f16a:	b120      	cbz	r0, f176 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f16c:	f7f7 f81c 	bl	61a8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f170:	b108      	cbz	r0, f176 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f172:	200c      	movs	r0, #12
    f174:	bd10      	pop	{r4, pc}
    f176:	7820      	ldrb	r0, [r4, #0]
    f178:	f7ff ff92 	bl	f0a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f17c:	1de2      	adds	r2, r4, #7
    f17e:	f104 0317 	add.w	r3, r4, #23
    f182:	1c61      	adds	r1, r4, #1
    f184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f188:	f7f7 b840 	b.w	620c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f18c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f18c:	b510      	push	{r4, lr}
    f18e:	4604      	mov	r4, r0
    f190:	f000 fef2 	bl	ff78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f194:	b108      	cbz	r0, f19a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f196:	200c      	movs	r0, #12
    f198:	bd10      	pop	{r4, pc}
    f19a:	7820      	ldrb	r0, [r4, #0]
    f19c:	b118      	cbz	r0, f1a6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f19e:	2801      	cmp	r0, #1
    f1a0:	d001      	beq.n	f1a6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f1a2:	2012      	movs	r0, #18
    f1a4:	bd10      	pop	{r4, pc}
    f1a6:	f7ff ff7b 	bl	f0a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f1aa:	1c61      	adds	r1, r4, #1
    f1ac:	f7f7 f8a6 	bl	62fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f1b0:	b108      	cbz	r0, f1b6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f1b2:	2000      	movs	r0, #0
    f1b4:	bd10      	pop	{r4, pc}
    f1b6:	2007      	movs	r0, #7
    f1b8:	bd10      	pop	{r4, pc}

0000f1ba <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    f1ba:	b510      	push	{r4, lr}
    f1bc:	f000 fe73 	bl	fea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f1c0:	b120      	cbz	r0, f1cc <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f1c2:	f7f6 fff1 	bl	61a8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f1c6:	b108      	cbz	r0, f1cc <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f1c8:	200c      	movs	r0, #12
    f1ca:	bd10      	pop	{r4, pc}
    f1cc:	f7f7 f864 	bl	6298 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    f1d0:	2000      	movs	r0, #0
    f1d2:	bd10      	pop	{r4, pc}

0000f1d4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f1d4:	b510      	push	{r4, lr}
    f1d6:	f000 fecf 	bl	ff78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f1da:	b108      	cbz	r0, f1e0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f1dc:	200c      	movs	r0, #12
    f1de:	bd10      	pop	{r4, pc}
    f1e0:	f7f7 f8b4 	bl	634c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f1e4:	2000      	movs	r0, #0
    f1e6:	bd10      	pop	{r4, pc}

0000f1e8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f1e8:	b510      	push	{r4, lr}
    f1ea:	460b      	mov	r3, r1
    f1ec:	2201      	movs	r2, #1
    f1ee:	f100 0110 	add.w	r1, r0, #16
    f1f2:	f7fe fb2e 	bl	d852 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f1f6:	2000      	movs	r0, #0
    f1f8:	bd10      	pop	{r4, pc}

0000f1fa <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f1fa:	b510      	push	{r4, lr}
    f1fc:	8800      	ldrh	r0, [r0, #0]
    f1fe:	2100      	movs	r1, #0
    f200:	f7fe f8fd 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f204:	b118      	cbz	r0, f20e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f206:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
    f20a:	b111      	cbz	r1, f212 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f20c:	e007      	b.n	f21e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f20e:	2002      	movs	r0, #2
    f210:	bd10      	pop	{r4, pc}
    f212:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f216:	2914      	cmp	r1, #20
    f218:	d003      	beq.n	f222 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f21a:	2915      	cmp	r1, #21
    f21c:	d001      	beq.n	f222 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f21e:	200c      	movs	r0, #12
    f220:	bd10      	pop	{r4, pc}
    f222:	2102      	movs	r1, #2
    f224:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
    f228:	2000      	movs	r0, #0
    f22a:	bd10      	pop	{r4, pc}

0000f22c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f22c:	b538      	push	{r3, r4, r5, lr}
    f22e:	4605      	mov	r5, r0
    f230:	8800      	ldrh	r0, [r0, #0]
    f232:	2100      	movs	r1, #0
    f234:	f7fe f8e3 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f238:	0004      	movs	r4, r0
    f23a:	d003      	beq.n	f244 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f23c:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    f240:	b110      	cbz	r0, f248 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f242:	e010      	b.n	f266 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f244:	2002      	movs	r0, #2
    f246:	bd38      	pop	{r3, r4, r5, pc}
    f248:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    f24c:	2814      	cmp	r0, #20
    f24e:	d001      	beq.n	f254 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f250:	2815      	cmp	r0, #21
    f252:	d108      	bne.n	f266 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f254:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    f258:	f88d 0000 	strb.w	r0, [sp]
    f25c:	9800      	ldr	r0, [sp, #0]
    f25e:	9000      	str	r0, [sp, #0]
    f260:	f89d 0000 	ldrb.w	r0, [sp]
    f264:	b108      	cbz	r0, f26a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    f266:	200c      	movs	r0, #12
    f268:	bd38      	pop	{r3, r4, r5, pc}
    f26a:	2210      	movs	r2, #16
    f26c:	1ca9      	adds	r1, r5, #2
    f26e:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    f272:	f7fd f8c9 	bl	c408 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f276:	2001      	movs	r0, #1
    f278:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
    f27c:	2000      	movs	r0, #0
    f27e:	bd38      	pop	{r3, r4, r5, pc}

0000f280 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f280:	b510      	push	{r4, lr}
    f282:	2108      	movs	r1, #8
    f284:	f7f5 fafa 	bl	487c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f288:	2000      	movs	r0, #0
    f28a:	bd10      	pop	{r4, pc}

0000f28c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f28c:	b510      	push	{r4, lr}
    f28e:	4604      	mov	r4, r0
    f290:	f000 fdf2 	bl	fe78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f294:	f7ff f91d 	bl	e4d2 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f298:	7020      	strb	r0, [r4, #0]
    f29a:	2000      	movs	r0, #0
    f29c:	bd10      	pop	{r4, pc}

0000f29e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f29e:	b510      	push	{r4, lr}
    f2a0:	4604      	mov	r4, r0
    f2a2:	f000 fdcc 	bl	fe3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f2a6:	b140      	cbz	r0, f2ba <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    f2a8:	20fb      	movs	r0, #251	; 0xfb
    f2aa:	8020      	strh	r0, [r4, #0]
    f2ac:	f640 0148 	movw	r1, #2120	; 0x848
    f2b0:	8061      	strh	r1, [r4, #2]
    f2b2:	80a0      	strh	r0, [r4, #4]
    f2b4:	80e1      	strh	r1, [r4, #6]
    f2b6:	2000      	movs	r0, #0
    f2b8:	bd10      	pop	{r4, pc}
    f2ba:	2001      	movs	r0, #1
    f2bc:	bd10      	pop	{r4, pc}

0000f2be <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    f2be:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f2c0:	460d      	mov	r5, r1
    f2c2:	4606      	mov	r6, r0
    f2c4:	f7fb fd78 	bl	adb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f2c8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f2cc:	b300      	cbz	r0, f310 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    f2ce:	8830      	ldrh	r0, [r6, #0]
    f2d0:	4669      	mov	r1, sp
    f2d2:	f7fe fadc 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f2d6:	2800      	cmp	r0, #0
    f2d8:	d119      	bne.n	f30e <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    f2da:	9c01      	ldr	r4, [sp, #4]
    f2dc:	2700      	movs	r7, #0
    f2de:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    f2e2:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    f2e6:	f000 fc46 	bl	fb76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    f2ea:	70a8      	strb	r0, [r5, #2]
    f2ec:	7860      	ldrb	r0, [r4, #1]
    f2ee:	f000 fc42 	bl	fb76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    f2f2:	70e8      	strb	r0, [r5, #3]
    f2f4:	78a0      	ldrb	r0, [r4, #2]
    f2f6:	f88d 0008 	strb.w	r0, [sp, #8]
    f2fa:	9802      	ldr	r0, [sp, #8]
    f2fc:	9002      	str	r0, [sp, #8]
    f2fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f302:	3c6a      	subs	r4, #106	; 0x6a
    f304:	2800      	cmp	r0, #0
    f306:	d1ea      	bne.n	f2de <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    f308:	8830      	ldrh	r0, [r6, #0]
    f30a:	8028      	strh	r0, [r5, #0]
    f30c:	2000      	movs	r0, #0
    f30e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f310:	2001      	movs	r0, #1
    f312:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f314 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    f314:	2108      	movs	r1, #8
    f316:	7001      	strb	r1, [r0, #0]
    f318:	2000      	movs	r0, #0
    f31a:	4770      	bx	lr

0000f31c <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f31c:	b510      	push	{r4, lr}
    f31e:	4604      	mov	r4, r0
    f320:	20d8      	movs	r0, #216	; 0xd8
    f322:	7020      	strb	r0, [r4, #0]
    f324:	f000 fd6c 	bl	fe00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    f328:	7060      	strb	r0, [r4, #1]
    f32a:	2000      	movs	r0, #0
    f32c:	bd10      	pop	{r4, pc}

0000f32e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f32e:	2108      	movs	r1, #8
    f330:	7001      	strb	r1, [r0, #0]
    f332:	2000      	movs	r0, #0
    f334:	4770      	bx	lr

0000f336 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    f336:	b510      	push	{r4, lr}
    f338:	4604      	mov	r4, r0
    f33a:	7800      	ldrb	r0, [r0, #0]
    f33c:	b108      	cbz	r0, f342 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    f33e:	2801      	cmp	r0, #1
    f340:	d110      	bne.n	f364 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f342:	f000 fdb0 	bl	fea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f346:	b120      	cbz	r0, f352 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f348:	f7f6 ff2e 	bl	61a8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f34c:	b108      	cbz	r0, f352 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f34e:	200c      	movs	r0, #12
    f350:	bd10      	pop	{r4, pc}
    f352:	7820      	ldrb	r0, [r4, #0]
    f354:	f7ff fea4 	bl	f0a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f358:	1c61      	adds	r1, r4, #1
    f35a:	f7fe fa60 	bl	d81e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f35e:	b108      	cbz	r0, f364 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f360:	2000      	movs	r0, #0
    f362:	bd10      	pop	{r4, pc}
    f364:	2012      	movs	r0, #18
    f366:	bd10      	pop	{r4, pc}

0000f368 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f368:	b510      	push	{r4, lr}
    f36a:	4604      	mov	r4, r0
    f36c:	f000 fe04 	bl	ff78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f370:	b108      	cbz	r0, f376 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f372:	200c      	movs	r0, #12
    f374:	bd10      	pop	{r4, pc}
    f376:	7820      	ldrb	r0, [r4, #0]
    f378:	b108      	cbz	r0, f37e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f37a:	2801      	cmp	r0, #1
    f37c:	d107      	bne.n	f38e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f37e:	f7ff fe8f 	bl	f0a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f382:	1c61      	adds	r1, r4, #1
    f384:	f7fe fa5a 	bl	d83c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f388:	b108      	cbz	r0, f38e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f38a:	2000      	movs	r0, #0
    f38c:	bd10      	pop	{r4, pc}
    f38e:	2012      	movs	r0, #18
    f390:	bd10      	pop	{r4, pc}

0000f392 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f392:	b510      	push	{r4, lr}
    f394:	4604      	mov	r4, r0
    f396:	f000 fd86 	bl	fea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f39a:	b108      	cbz	r0, f3a0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f39c:	200c      	movs	r0, #12
    f39e:	bd10      	pop	{r4, pc}
    f3a0:	7820      	ldrb	r0, [r4, #0]
    f3a2:	f000 0001 	and.w	r0, r0, #1
    f3a6:	f7f6 fef9 	bl	619c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f3aa:	2000      	movs	r0, #0
    f3ac:	bd10      	pop	{r4, pc}

0000f3ae <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f3ae:	b51c      	push	{r2, r3, r4, lr}
    f3b0:	4604      	mov	r4, r0
    f3b2:	f000 fd61 	bl	fe78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f3b6:	2000      	movs	r0, #0
    f3b8:	f88d 0002 	strb.w	r0, [sp, #2]
    f3bc:	2103      	movs	r1, #3
    f3be:	f88d 1001 	strb.w	r1, [sp, #1]
    f3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
    f3c6:	f88d 1003 	strb.w	r1, [sp, #3]
    f3ca:	f88d 0000 	strb.w	r0, [sp]
    f3ce:	4668      	mov	r0, sp
    f3d0:	9401      	str	r4, [sp, #4]
    f3d2:	f000 f9f8 	bl	f7c6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f3d6:	bd1c      	pop	{r2, r3, r4, pc}

0000f3d8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f3d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f3da:	4605      	mov	r5, r0
    f3dc:	f000 fd4c 	bl	fe78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f3e0:	4606      	mov	r6, r0
    f3e2:	7828      	ldrb	r0, [r5, #0]
    f3e4:	2400      	movs	r4, #0
    f3e6:	b160      	cbz	r0, f402 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f3e8:	f88d 4000 	strb.w	r4, [sp]
    f3ec:	2001      	movs	r0, #1
    f3ee:	f10d 0101 	add.w	r1, sp, #1
    f3f2:	f7f6 f8a7 	bl	5544 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f3f6:	b120      	cbz	r0, f402 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f3f8:	4668      	mov	r0, sp
    f3fa:	f000 f897 	bl	f52c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f3fe:	2800      	cmp	r0, #0
    f400:	d112      	bne.n	f428 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f402:	f88d 400c 	strb.w	r4, [sp, #12]
    f406:	4630      	mov	r0, r6
    f408:	f7ff f859 	bl	e4be <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f40c:	b118      	cbz	r0, f416 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f40e:	2080      	movs	r0, #128	; 0x80
    f410:	f8ad 000d 	strh.w	r0, [sp, #13]
    f414:	e001      	b.n	f41a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f416:	f8ad 400d 	strh.w	r4, [sp, #13]
    f41a:	f88d 400f 	strb.w	r4, [sp, #15]
    f41e:	7828      	ldrb	r0, [r5, #0]
    f420:	2801      	cmp	r0, #1
    f422:	d003      	beq.n	f42c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f424:	b138      	cbz	r0, f436 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f426:	2012      	movs	r0, #18
    f428:	b004      	add	sp, #16
    f42a:	bd70      	pop	{r4, r5, r6, pc}
    f42c:	a903      	add	r1, sp, #12
    f42e:	4630      	mov	r0, r6
    f430:	f7fb fac2 	bl	a9b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f434:	e7f8      	b.n	f428 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f436:	4630      	mov	r0, r6
    f438:	f000 fd3c 	bl	feb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
    f43c:	e7f4      	b.n	f428 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f43e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f43e:	b530      	push	{r4, r5, lr}
    f440:	b08b      	sub	sp, #44	; 0x2c
    f442:	4604      	mov	r4, r0
    f444:	f000 fd18 	bl	fe78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f448:	4602      	mov	r2, r0
    f44a:	7920      	ldrb	r0, [r4, #4]
    f44c:	2804      	cmp	r0, #4
    f44e:	d803      	bhi.n	f458 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f450:	8860      	ldrh	r0, [r4, #2]
    f452:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f456:	d902      	bls.n	f45e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f458:	2012      	movs	r0, #18
    f45a:	b00b      	add	sp, #44	; 0x2c
    f45c:	bd30      	pop	{r4, r5, pc}
    f45e:	2500      	movs	r5, #0
    f460:	f88d 5004 	strb.w	r5, [sp, #4]
    f464:	7921      	ldrb	r1, [r4, #4]
    f466:	9500      	str	r5, [sp, #0]
    f468:	f89d 0000 	ldrb.w	r0, [sp]
    f46c:	2905      	cmp	r1, #5
    f46e:	f040 0010 	orr.w	r0, r0, #16
    f472:	f88d 0000 	strb.w	r0, [sp]
    f476:	d254      	bcs.n	f522 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    f478:	e8df f001 	tbb	[pc, r1]
    f47c:	11050803 	.word	0x11050803
    f480:	000b      	.short	0x000b
    f482:	f040 0001 	orr.w	r0, r0, #1
    f486:	f040 0002 	orr.w	r0, r0, #2
    f48a:	e006      	b.n	f49a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    f48c:	f040 0009 	orr.w	r0, r0, #9
    f490:	e001      	b.n	f496 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    f492:	f040 0001 	orr.w	r0, r0, #1
    f496:	f040 0004 	orr.w	r0, r0, #4
    f49a:	f88d 0000 	strb.w	r0, [sp]
    f49e:	f8bd 0000 	ldrh.w	r0, [sp]
    f4a2:	9000      	str	r0, [sp, #0]
    f4a4:	f8bd 0000 	ldrh.w	r0, [sp]
    f4a8:	f8ad 0005 	strh.w	r0, [sp, #5]
    f4ac:	8821      	ldrh	r1, [r4, #0]
    f4ae:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f4b2:	f361 201f 	bfi	r0, r1, #8, #24
    f4b6:	f8cd 0006 	str.w	r0, [sp, #6]
    f4ba:	8861      	ldrh	r1, [r4, #2]
    f4bc:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f4c0:	f361 201f 	bfi	r0, r1, #8, #24
    f4c4:	f8cd 0009 	str.w	r0, [sp, #9]
    f4c8:	7b60      	ldrb	r0, [r4, #13]
    f4ca:	f88d 000d 	strb.w	r0, [sp, #13]
    f4ce:	7960      	ldrb	r0, [r4, #5]
    f4d0:	f88d 000e 	strb.w	r0, [sp, #14]
    f4d4:	79a0      	ldrb	r0, [r4, #6]
    f4d6:	f88d 000f 	strb.w	r0, [sp, #15]
    f4da:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f4de:	9004      	str	r0, [sp, #16]
    f4e0:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f4e4:	f8ad 0014 	strh.w	r0, [sp, #20]
    f4e8:	7ba0      	ldrb	r0, [r4, #14]
    f4ea:	f88d 0016 	strb.w	r0, [sp, #22]
    f4ee:	207f      	movs	r0, #127	; 0x7f
    f4f0:	f88d 0017 	strb.w	r0, [sp, #23]
    f4f4:	2001      	movs	r0, #1
    f4f6:	f88d 0018 	strb.w	r0, [sp, #24]
    f4fa:	f88d 5019 	strb.w	r5, [sp, #25]
    f4fe:	f88d 001a 	strb.w	r0, [sp, #26]
    f502:	f88d 501b 	strb.w	r5, [sp, #27]
    f506:	4610      	mov	r0, r2
    f508:	f7fe fff5 	bl	e4f6 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f50c:	f88d 001c 	strb.w	r0, [sp, #28]
    f510:	f88d 501d 	strb.w	r5, [sp, #29]
    f514:	f88d 501e 	strb.w	r5, [sp, #30]
    f518:	a909      	add	r1, sp, #36	; 0x24
    f51a:	a801      	add	r0, sp, #4
    f51c:	f000 f8de 	bl	f6dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f520:	e79b      	b.n	f45a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f522:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
    f526:	2039      	movs	r0, #57	; 0x39
    f528:	f7f5 f90e 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f52c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f52c:	b570      	push	{r4, r5, r6, lr}
    f52e:	4604      	mov	r4, r0
    f530:	7800      	ldrb	r0, [r0, #0]
    f532:	2101      	movs	r1, #1
    f534:	f7fd ff63 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f538:	0005      	movs	r5, r0
    f53a:	d007      	beq.n	f54c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f53c:	f7ff f994 	bl	e868 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f540:	b160      	cbz	r0, f55c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f542:	4628      	mov	r0, r5
    f544:	f7fe ffc1 	bl	e4ca <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f548:	b110      	cbz	r0, f550 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f54a:	e005      	b.n	f558 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f54c:	2042      	movs	r0, #66	; 0x42
    f54e:	bd70      	pop	{r4, r5, r6, pc}
    f550:	4628      	mov	r0, r5
    f552:	f7fe ffb0 	bl	e4b6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f556:	b108      	cbz	r0, f55c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f558:	200c      	movs	r0, #12
    f55a:	bd70      	pop	{r4, r5, r6, pc}
    f55c:	1c61      	adds	r1, r4, #1
    f55e:	4628      	mov	r0, r5
    f560:	f7fe ffc1 	bl	e4e6 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f564:	2000      	movs	r0, #0
    f566:	bd70      	pop	{r4, r5, r6, pc}

0000f568 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f568:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f56a:	460d      	mov	r5, r1
    f56c:	4604      	mov	r4, r0
    f56e:	f000 fc66 	bl	fe3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f572:	b130      	cbz	r0, f582 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f574:	88a2      	ldrh	r2, [r4, #4]
    f576:	f244 2090 	movw	r0, #17040	; 0x4290
    f57a:	4282      	cmp	r2, r0
    f57c:	d903      	bls.n	f586 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    f57e:	2012      	movs	r0, #18
    f580:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f582:	2001      	movs	r0, #1
    f584:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f586:	f640 0048 	movw	r0, #2120	; 0x848
    f58a:	4282      	cmp	r2, r0
    f58c:	d300      	bcc.n	f590 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    f58e:	4602      	mov	r2, r0
    f590:	8820      	ldrh	r0, [r4, #0]
    f592:	f8ad 0000 	strh.w	r0, [sp]
    f596:	8860      	ldrh	r0, [r4, #2]
    f598:	f8ad 0002 	strh.w	r0, [sp, #2]
    f59c:	f8ad 2004 	strh.w	r2, [sp, #4]
    f5a0:	8860      	ldrh	r0, [r4, #2]
    f5a2:	f8ad 0006 	strh.w	r0, [sp, #6]
    f5a6:	f8ad 2008 	strh.w	r2, [sp, #8]
    f5aa:	8820      	ldrh	r0, [r4, #0]
    f5ac:	8028      	strh	r0, [r5, #0]
    f5ae:	4668      	mov	r0, sp
    f5b0:	f7fb fad0 	bl	ab54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f5b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f5b6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f5b6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f5b8:	4604      	mov	r4, r0
    f5ba:	f7fb fbfd 	bl	adb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f5be:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f5c2:	b1b0      	cbz	r0, f5f2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f5c4:	f10d 0007 	add.w	r0, sp, #7
    f5c8:	9000      	str	r0, [sp, #0]
    f5ca:	7922      	ldrb	r2, [r4, #4]
    f5cc:	78e1      	ldrb	r1, [r4, #3]
    f5ce:	78a0      	ldrb	r0, [r4, #2]
    f5d0:	f10d 0306 	add.w	r3, sp, #6
    f5d4:	f000 fc94 	bl	ff00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    f5d8:	2800      	cmp	r0, #0
    f5da:	d109      	bne.n	f5f0 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    f5dc:	8820      	ldrh	r0, [r4, #0]
    f5de:	f8ad 0004 	strh.w	r0, [sp, #4]
    f5e2:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f5e6:	f8ad 0008 	strh.w	r0, [sp, #8]
    f5ea:	a801      	add	r0, sp, #4
    f5ec:	f000 f9a6 	bl	f93c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f5f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f5f2:	2001      	movs	r0, #1
    f5f4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f5f6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    f5f6:	b510      	push	{r4, lr}
    f5f8:	4604      	mov	r4, r0
    f5fa:	f000 fc54 	bl	fea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f5fe:	b120      	cbz	r0, f60a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f600:	f7f6 fdd2 	bl	61a8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f604:	b108      	cbz	r0, f60a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f606:	200c      	movs	r0, #12
    f608:	bd10      	pop	{r4, pc}
    f60a:	7820      	ldrb	r0, [r4, #0]
    f60c:	f7ff fd48 	bl	f0a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f610:	79e2      	ldrb	r2, [r4, #7]
    f612:	1c61      	adds	r1, r4, #1
    f614:	f7f6 fd76 	bl	6104 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    f618:	b108      	cbz	r0, f61e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    f61a:	2000      	movs	r0, #0
    f61c:	bd10      	pop	{r4, pc}
    f61e:	2002      	movs	r0, #2
    f620:	bd10      	pop	{r4, pc}

0000f622 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f622:	b510      	push	{r4, lr}
    f624:	4604      	mov	r4, r0
    f626:	2001      	movs	r0, #1
    f628:	f000 fac8 	bl	fbbc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f62c:	b128      	cbz	r0, f63a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f62e:	4621      	mov	r1, r4
    f630:	2001      	movs	r0, #1
    f632:	f7f5 ff9f 	bl	5574 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f636:	2000      	movs	r0, #0
    f638:	bd10      	pop	{r4, pc}
    f63a:	200c      	movs	r0, #12
    f63c:	bd10      	pop	{r4, pc}

0000f63e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f63e:	b510      	push	{r4, lr}
    f640:	8800      	ldrh	r0, [r0, #0]
    f642:	f7f6 fe3f 	bl	62c4 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f646:	b108      	cbz	r0, f64c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f648:	2000      	movs	r0, #0
    f64a:	bd10      	pop	{r4, pc}
    f64c:	2030      	movs	r0, #48	; 0x30
    f64e:	bd10      	pop	{r4, pc}

0000f650 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f650:	b51c      	push	{r2, r3, r4, lr}
    f652:	4604      	mov	r4, r0
    f654:	f000 fc10 	bl	fe78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f658:	2000      	movs	r0, #0
    f65a:	f88d 0000 	strb.w	r0, [sp]
    f65e:	f88d 0002 	strb.w	r0, [sp, #2]
    f662:	2003      	movs	r0, #3
    f664:	f88d 0001 	strb.w	r0, [sp, #1]
    f668:	f814 0b01 	ldrb.w	r0, [r4], #1
    f66c:	f88d 0003 	strb.w	r0, [sp, #3]
    f670:	4668      	mov	r0, sp
    f672:	9401      	str	r4, [sp, #4]
    f674:	f000 f910 	bl	f898 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f678:	bd1c      	pop	{r2, r3, r4, pc}

0000f67a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f67a:	b51c      	push	{r2, r3, r4, lr}
    f67c:	4604      	mov	r4, r0
    f67e:	f000 fbde 	bl	fe3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f682:	b178      	cbz	r0, f6a4 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f684:	8820      	ldrh	r0, [r4, #0]
    f686:	f8ad 0000 	strh.w	r0, [sp]
    f68a:	8860      	ldrh	r0, [r4, #2]
    f68c:	f8ad 0002 	strh.w	r0, [sp, #2]
    f690:	8820      	ldrh	r0, [r4, #0]
    f692:	f8ad 0004 	strh.w	r0, [sp, #4]
    f696:	8860      	ldrh	r0, [r4, #2]
    f698:	f8ad 0006 	strh.w	r0, [sp, #6]
    f69c:	4668      	mov	r0, sp
    f69e:	f7fb fadd 	bl	ac5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    f6a2:	bd1c      	pop	{r2, r3, r4, pc}
    f6a4:	2001      	movs	r0, #1
    f6a6:	bd1c      	pop	{r2, r3, r4, pc}

0000f6a8 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f6a8:	b510      	push	{r4, lr}
    f6aa:	f7f5 ff87 	bl	55bc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f6ae:	2000      	movs	r0, #0
    f6b0:	bd10      	pop	{r4, pc}

0000f6b2 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f6b2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f6b4:	460c      	mov	r4, r1
    f6b6:	4605      	mov	r5, r0
    f6b8:	f000 fbc1 	bl	fe3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f6bc:	b160      	cbz	r0, f6d8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f6be:	4669      	mov	r1, sp
    f6c0:	4628      	mov	r0, r5
    f6c2:	f7fe f8e4 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f6c6:	2800      	cmp	r0, #0
    f6c8:	d105      	bne.n	f6d6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f6ca:	2100      	movs	r1, #0
    f6cc:	4622      	mov	r2, r4
    f6ce:	9801      	ldr	r0, [sp, #4]
    f6d0:	f000 fb40 	bl	fd54 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    f6d4:	2000      	movs	r0, #0
    f6d6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f6d8:	2001      	movs	r0, #1
    f6da:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f6dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    f6dc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f6e0:	460f      	mov	r7, r1
    f6e2:	4605      	mov	r5, r0
    f6e4:	7806      	ldrb	r6, [r0, #0]
    f6e6:	f000 fac5 	bl	fc74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
    f6ea:	2800      	cmp	r0, #0
    f6ec:	d10a      	bne.n	f704 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f6ee:	4628      	mov	r0, r5
    f6f0:	f000 fa9a 	bl	fc28 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
    f6f4:	2800      	cmp	r0, #0
    f6f6:	d105      	bne.n	f704 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f6f8:	2001      	movs	r0, #1
    f6fa:	f7f5 fa0f 	bl	4b1c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f6fe:	4286      	cmp	r6, r0
    f700:	d302      	bcc.n	f708 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    f702:	2007      	movs	r0, #7
    f704:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f708:	2101      	movs	r1, #1
    f70a:	4630      	mov	r0, r6
    f70c:	f7fd fe77 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f710:	0004      	movs	r4, r0
    f712:	d004      	beq.n	f71e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    f714:	f7ff f8a8 	bl	e868 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f718:	b150      	cbz	r0, f730 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
    f71a:	200c      	movs	r0, #12
    f71c:	e7f2      	b.n	f704 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f71e:	2200      	movs	r2, #0
    f720:	2101      	movs	r1, #1
    f722:	4630      	mov	r0, r6
    f724:	f7fd fe61 	bl	d3ea <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f728:	0004      	movs	r4, r0
    f72a:	d00f      	beq.n	f74c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
    f72c:	f7fe fe68 	bl	e400 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f730:	4620      	mov	r0, r4
    f732:	f7fe fece 	bl	e4d2 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f736:	7038      	strb	r0, [r7, #0]
    f738:	74e8      	strb	r0, [r5, #19]
    f73a:	4629      	mov	r1, r5
    f73c:	4620      	mov	r0, r4
    f73e:	f7f7 fbf7 	bl	6f30 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    f742:	4606      	mov	r6, r0
    f744:	7e68      	ldrb	r0, [r5, #25]
    f746:	b1d0      	cbz	r0, f77e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    f748:	b12e      	cbz	r6, f756 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
    f74a:	e018      	b.n	f77e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    f74c:	f241 212d 	movw	r1, #4653	; 0x122d
    f750:	2039      	movs	r0, #57	; 0x39
    f752:	f7f4 fff9 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f756:	2200      	movs	r2, #0
    f758:	4668      	mov	r0, sp
    f75a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f75c:	f7fd ff10 	bl	d580 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f760:	2200      	movs	r2, #0
    f762:	2101      	movs	r1, #1
    f764:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f766:	f7fd ff80 	bl	d66a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f76a:	2204      	movs	r2, #4
    f76c:	4668      	mov	r0, sp
    f76e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f770:	f7fd ff06 	bl	d580 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f774:	2200      	movs	r2, #0
    f776:	4611      	mov	r1, r2
    f778:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f77a:	f7fd ff76 	bl	d66a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f77e:	4630      	mov	r0, r6
    f780:	e7c0      	b.n	f704 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000f782 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f782:	b510      	push	{r4, lr}
    f784:	4604      	mov	r4, r0
    f786:	2000      	movs	r0, #0
    f788:	f000 fa18 	bl	fbbc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f78c:	b128      	cbz	r0, f79a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f78e:	4621      	mov	r1, r4
    f790:	2000      	movs	r0, #0
    f792:	f7f5 feef 	bl	5574 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f796:	2000      	movs	r0, #0
    f798:	bd10      	pop	{r4, pc}
    f79a:	200c      	movs	r0, #12
    f79c:	bd10      	pop	{r4, pc}

0000f79e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f79e:	b510      	push	{r4, lr}
    f7a0:	7800      	ldrb	r0, [r0, #0]
    f7a2:	f000 0001 	and.w	r0, r0, #1
    f7a6:	f7f8 faff 	bl	7da8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    f7aa:	2000      	movs	r0, #0
    f7ac:	bd10      	pop	{r4, pc}

0000f7ae <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f7ae:	b510      	push	{r4, lr}
    f7b0:	4604      	mov	r4, r0
    f7b2:	f000 fb44 	bl	fe3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f7b6:	b120      	cbz	r0, f7c2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f7b8:	4620      	mov	r0, r4
    f7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7be:	f7fb b9c9 	b.w	ab54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f7c2:	2001      	movs	r0, #1
    f7c4:	bd10      	pop	{r4, pc}

0000f7c6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f7c6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f7ca:	4606      	mov	r6, r0
    f7cc:	7845      	ldrb	r5, [r0, #1]
    f7ce:	7800      	ldrb	r0, [r0, #0]
    f7d0:	2101      	movs	r1, #1
    f7d2:	f7fd fe14 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f7d6:	0004      	movs	r4, r0
    f7d8:	d01e      	beq.n	f818 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    f7da:	f7fe fe3d 	bl	e458 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f7de:	78f1      	ldrb	r1, [r6, #3]
    f7e0:	4281      	cmp	r1, r0
    f7e2:	d800      	bhi.n	f7e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    f7e4:	4608      	mov	r0, r1
    f7e6:	4607      	mov	r7, r0
    f7e8:	2d04      	cmp	r5, #4
    f7ea:	d018      	beq.n	f81e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    f7ec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f7ee:	f7fd ff5f 	bl	d6b0 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f7f2:	4438      	add	r0, r7
    f7f4:	b281      	uxth	r1, r0
    f7f6:	4620      	mov	r0, r4
    f7f8:	2201      	movs	r2, #1
    f7fa:	f000 f9f1 	bl	fbe0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f7fe:	2800      	cmp	r0, #0
    f800:	d10b      	bne.n	f81a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f802:	2d03      	cmp	r5, #3
    f804:	d000      	beq.n	f808 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f806:	b1df      	cbz	r7, f840 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f808:	4620      	mov	r0, r4
    f80a:	f7fe fe5c 	bl	e4c6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f80e:	7871      	ldrb	r1, [r6, #1]
    f810:	2903      	cmp	r1, #3
    f812:	d010      	beq.n	f836 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f814:	b9a0      	cbnz	r0, f840 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f816:	e004      	b.n	f822 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    f818:	2042      	movs	r0, #66	; 0x42
    f81a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f81e:	b97f      	cbnz	r7, f840 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f820:	e7f2      	b.n	f808 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f822:	2904      	cmp	r1, #4
    f824:	d107      	bne.n	f836 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f826:	4620      	mov	r0, r4
    f828:	f7ff f81e 	bl	e868 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f82c:	b140      	cbz	r0, f840 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f82e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f830:	f7fd ff0d 	bl	d64e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    f834:	b120      	cbz	r0, f840 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f836:	2d01      	cmp	r5, #1
    f838:	d004      	beq.n	f844 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f83a:	2d03      	cmp	r5, #3
    f83c:	d002      	beq.n	f844 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f83e:	e00e      	b.n	f85e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    f840:	2012      	movs	r0, #18
    f842:	e7ea      	b.n	f81a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f844:	4620      	mov	r0, r4
    f846:	f7fe fe3e 	bl	e4c6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f84a:	b108      	cbz	r0, f850 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    f84c:	2200      	movs	r2, #0
    f84e:	e002      	b.n	f856 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f850:	2d01      	cmp	r5, #1
    f852:	d013      	beq.n	f87c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    f854:	2201      	movs	r2, #1
    f856:	4668      	mov	r0, sp
    f858:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f85a:	f7fd fe91 	bl	d580 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f85e:	2d04      	cmp	r5, #4
    f860:	d018      	beq.n	f894 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f862:	6872      	ldr	r2, [r6, #4]
    f864:	463b      	mov	r3, r7
    f866:	2101      	movs	r1, #1
    f868:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f86a:	f7fd febc 	bl	d5e6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f86e:	b138      	cbz	r0, f880 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    f870:	7870      	ldrb	r0, [r6, #1]
    f872:	2802      	cmp	r0, #2
    f874:	d006      	beq.n	f884 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f876:	2803      	cmp	r0, #3
    f878:	d004      	beq.n	f884 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f87a:	e00b      	b.n	f894 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f87c:	2202      	movs	r2, #2
    f87e:	e7ea      	b.n	f856 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f880:	2007      	movs	r0, #7
    f882:	e7ca      	b.n	f81a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f884:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f886:	f7fd ff13 	bl	d6b0 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f88a:	4602      	mov	r2, r0
    f88c:	2101      	movs	r1, #1
    f88e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f890:	f7fd feeb 	bl	d66a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f894:	2000      	movs	r0, #0
    f896:	e7c0      	b.n	f81a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000f898 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f898:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f89c:	4607      	mov	r7, r0
    f89e:	7845      	ldrb	r5, [r0, #1]
    f8a0:	78c6      	ldrb	r6, [r0, #3]
    f8a2:	7800      	ldrb	r0, [r0, #0]
    f8a4:	2101      	movs	r1, #1
    f8a6:	f7fd fdaa 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f8aa:	0004      	movs	r4, r0
    f8ac:	d003      	beq.n	f8b6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    f8ae:	f7fe fe0c 	bl	e4ca <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f8b2:	b118      	cbz	r0, f8bc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    f8b4:	e003      	b.n	f8be <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    f8b6:	2042      	movs	r0, #66	; 0x42
    f8b8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f8bc:	2600      	movs	r6, #0
    f8be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f8c0:	f7fd fefa 	bl	d6b8 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    f8c4:	4430      	add	r0, r6
    f8c6:	b281      	uxth	r1, r0
    f8c8:	4688      	mov	r8, r1
    f8ca:	4620      	mov	r0, r4
    f8cc:	2201      	movs	r2, #1
    f8ce:	f000 f987 	bl	fbe0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f8d2:	2800      	cmp	r0, #0
    f8d4:	d1f0      	bne.n	f8b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f8d6:	2d04      	cmp	r5, #4
    f8d8:	d008      	beq.n	f8ec <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f8da:	2d03      	cmp	r5, #3
    f8dc:	d00a      	beq.n	f8f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    f8de:	b12e      	cbz	r6, f8ec <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f8e0:	4620      	mov	r0, r4
    f8e2:	f7fe ffc1 	bl	e868 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f8e6:	b118      	cbz	r0, f8f0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    f8e8:	200c      	movs	r0, #12
    f8ea:	e7e5      	b.n	f8b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f8ec:	2012      	movs	r0, #18
    f8ee:	e7e3      	b.n	f8b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f8f0:	2d01      	cmp	r5, #1
    f8f2:	d10c      	bne.n	f90e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    f8f4:	4620      	mov	r0, r4
    f8f6:	f7fe fde6 	bl	e4c6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f8fa:	b108      	cbz	r0, f900 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    f8fc:	2204      	movs	r2, #4
    f8fe:	e002      	b.n	f906 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f900:	2d01      	cmp	r5, #1
    f902:	d010      	beq.n	f926 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    f904:	2205      	movs	r2, #5
    f906:	4668      	mov	r0, sp
    f908:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f90a:	f7fd fe39 	bl	d580 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f90e:	687a      	ldr	r2, [r7, #4]
    f910:	4633      	mov	r3, r6
    f912:	2100      	movs	r1, #0
    f914:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f916:	f7fd fe66 	bl	d5e6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f91a:	b130      	cbz	r0, f92a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    f91c:	2d02      	cmp	r5, #2
    f91e:	d006      	beq.n	f92e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f920:	2d03      	cmp	r5, #3
    f922:	d004      	beq.n	f92e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f924:	e008      	b.n	f938 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    f926:	2206      	movs	r2, #6
    f928:	e7ed      	b.n	f906 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f92a:	2007      	movs	r0, #7
    f92c:	e7c4      	b.n	f8b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f92e:	4642      	mov	r2, r8
    f930:	2100      	movs	r1, #0
    f932:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f934:	f7fd fe99 	bl	d66a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f938:	2000      	movs	r0, #0
    f93a:	e7bd      	b.n	f8b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000f93c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f93c:	b510      	push	{r4, lr}
    f93e:	4604      	mov	r4, r0
    f940:	8880      	ldrh	r0, [r0, #4]
    f942:	b128      	cbz	r0, f950 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f944:	2801      	cmp	r0, #1
    f946:	d003      	beq.n	f950 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f948:	2802      	cmp	r0, #2
    f94a:	d001      	beq.n	f950 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f94c:	2012      	movs	r0, #18
    f94e:	bd10      	pop	{r4, pc}
    f950:	78e0      	ldrb	r0, [r4, #3]
    f952:	f000 f9dc 	bl	fd0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f956:	b148      	cbz	r0, f96c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f958:	78a0      	ldrb	r0, [r4, #2]
    f95a:	f000 f9d8 	bl	fd0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f95e:	b128      	cbz	r0, f96c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f960:	4620      	mov	r0, r4
    f962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f966:	2101      	movs	r1, #1
    f968:	f000 b884 	b.w	fa74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f96c:	2011      	movs	r0, #17
    f96e:	bd10      	pop	{r4, pc}

0000f970 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f970:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f972:	460c      	mov	r4, r1
    f974:	4605      	mov	r5, r0
    f976:	8800      	ldrh	r0, [r0, #0]
    f978:	4669      	mov	r1, sp
    f97a:	f7fd ff88 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f97e:	2800      	cmp	r0, #0
    f980:	d106      	bne.n	f990 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f982:	9801      	ldr	r0, [sp, #4]
    f984:	8829      	ldrh	r1, [r5, #0]
    f986:	8021      	strh	r1, [r4, #0]
    f988:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    f98c:	8060      	strh	r0, [r4, #2]
    f98e:	2000      	movs	r0, #0
    f990:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f992 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f992:	b510      	push	{r4, lr}
    f994:	4604      	mov	r4, r0
    f996:	4601      	mov	r1, r0
    f998:	2000      	movs	r0, #0
    f99a:	f7f5 fdd3 	bl	5544 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f99e:	b910      	cbnz	r0, f9a6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f9a0:	2000      	movs	r0, #0
    f9a2:	6020      	str	r0, [r4, #0]
    f9a4:	80a0      	strh	r0, [r4, #4]
    f9a6:	2000      	movs	r0, #0
    f9a8:	bd10      	pop	{r4, pc}

0000f9aa <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f9aa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f9ac:	8800      	ldrh	r0, [r0, #0]
    f9ae:	4669      	mov	r1, sp
    f9b0:	f7fd ff6d 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9b4:	b958      	cbnz	r0, f9ce <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f9b6:	4668      	mov	r0, sp
    f9b8:	f000 fa47 	bl	fe4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    f9bc:	b138      	cbz	r0, f9ce <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f9be:	9c01      	ldr	r4, [sp, #4]
    f9c0:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
    f9c4:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    f9c8:	3470      	adds	r4, #112	; 0x70
    f9ca:	b929      	cbnz	r1, f9d8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    f9cc:	e001      	b.n	f9d2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f9ce:	2002      	movs	r0, #2
    f9d0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f9d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    f9d6:	b109      	cbz	r1, f9dc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f9d8:	203a      	movs	r0, #58	; 0x3a
    f9da:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f9dc:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    f9e0:	f04f 0501 	mov.w	r5, #1
    f9e4:	0789      	lsls	r1, r1, #30
    f9e6:	d103      	bne.n	f9f0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    f9e8:	7005      	strb	r5, [r0, #0]
    f9ea:	4668      	mov	r0, sp
    f9ec:	f7fe fae7 	bl	dfbe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f9f0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    f9f4:	2000      	movs	r0, #0
    f9f6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f9f8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f9f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f9fa:	460c      	mov	r4, r1
    f9fc:	4605      	mov	r5, r0
    f9fe:	8800      	ldrh	r0, [r0, #0]
    fa00:	4669      	mov	r1, sp
    fa02:	f7fd ff44 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa06:	b108      	cbz	r0, fa0c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    fa08:	2002      	movs	r0, #2
    fa0a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fa0c:	78a8      	ldrb	r0, [r5, #2]
    fa0e:	b130      	cbz	r0, fa1e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    fa10:	f000 f9f6 	bl	fe00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    fa14:	70a0      	strb	r0, [r4, #2]
    fa16:	8828      	ldrh	r0, [r5, #0]
    fa18:	8020      	strh	r0, [r4, #0]
    fa1a:	2000      	movs	r0, #0
    fa1c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fa1e:	9801      	ldr	r0, [sp, #4]
    fa20:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fa24:	e7f6      	b.n	fa14 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fa26 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fa26:	b510      	push	{r4, lr}
    fa28:	f7fb f952 	bl	acd0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fa2c:	2000      	movs	r0, #0
    fa2e:	bd10      	pop	{r4, pc}

0000fa30 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    fa30:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fa34:	4604      	mov	r4, r0
    fa36:	8840      	ldrh	r0, [r0, #2]
    fa38:	460d      	mov	r5, r1
    fa3a:	b1b8      	cbz	r0, fa6c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    fa3c:	8820      	ldrh	r0, [r4, #0]
    fa3e:	4669      	mov	r1, sp
    fa40:	f7fd ff25 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa44:	2800      	cmp	r0, #0
    fa46:	d10f      	bne.n	fa68 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    fa48:	8820      	ldrh	r0, [r4, #0]
    fa4a:	8028      	strh	r0, [r5, #0]
    fa4c:	9e01      	ldr	r6, [sp, #4]
    fa4e:	f106 050c 	add.w	r5, r6, #12
    fa52:	3670      	adds	r6, #112	; 0x70
    fa54:	682f      	ldr	r7, [r5, #0]
    fa56:	8862      	ldrh	r2, [r4, #2]
    fa58:	4639      	mov	r1, r7
    fa5a:	4630      	mov	r0, r6
    fa5c:	f7fe f858 	bl	db10 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fa60:	6828      	ldr	r0, [r5, #0]
    fa62:	42b8      	cmp	r0, r7
    fa64:	d1f6      	bne.n	fa54 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fa66:	2000      	movs	r0, #0
    fa68:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fa6c:	2012      	movs	r0, #18
    fa6e:	e7fb      	b.n	fa68 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fa70 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fa70:	f7fa bf06 	b.w	a880 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fa74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    fa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa78:	b086      	sub	sp, #24
    fa7a:	468a      	mov	sl, r1
    fa7c:	4606      	mov	r6, r0
    fa7e:	8800      	ldrh	r0, [r0, #0]
    fa80:	a901      	add	r1, sp, #4
    fa82:	f7fd ff04 	bl	d88e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa86:	2800      	cmp	r0, #0
    fa88:	d138      	bne.n	fafc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    fa8a:	9802      	ldr	r0, [sp, #8]
    fa8c:	f04f 0800 	mov.w	r8, #0
    fa90:	4601      	mov	r1, r0
    fa92:	4689      	mov	r9, r1
    fa94:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    fa98:	f88d 1000 	strb.w	r1, [sp]
    fa9c:	9900      	ldr	r1, [sp, #0]
    fa9e:	9100      	str	r1, [sp, #0]
    faa0:	f89d 5000 	ldrb.w	r5, [sp]
    faa4:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    faa8:	3070      	adds	r0, #112	; 0x70
    faaa:	2921      	cmp	r1, #33	; 0x21
    faac:	d100      	bne.n	fab0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    faae:	b13d      	cbz	r5, fac0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    fab0:	2400      	movs	r4, #0
    fab2:	304c      	adds	r0, #76	; 0x4c
    fab4:	2108      	movs	r1, #8
    fab6:	4607      	mov	r7, r0
    fab8:	f7ff fae8 	bl	f08c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    fabc:	b110      	cbz	r0, fac4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    fabe:	e007      	b.n	fad0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    fac0:	2401      	movs	r4, #1
    fac2:	e7f6      	b.n	fab2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    fac4:	210b      	movs	r1, #11
    fac6:	4638      	mov	r0, r7
    fac8:	f7ff fae0 	bl	f08c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    facc:	b900      	cbnz	r0, fad0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    face:	b1a4      	cbz	r4, fafa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    fad0:	a804      	add	r0, sp, #16
    fad2:	9000      	str	r0, [sp, #0]
    fad4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fad8:	ab03      	add	r3, sp, #12
    fada:	4632      	mov	r2, r6
    fadc:	4649      	mov	r1, r9
    fade:	f000 f96f 	bl	fdc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    fae2:	0007      	movs	r7, r0
    fae4:	d10a      	bne.n	fafc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    fae6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    faea:	9c02      	ldr	r4, [sp, #8]
    faec:	b148      	cbz	r0, fb02 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    faee:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
    faf2:	2001      	movs	r0, #1
    faf4:	7060      	strb	r0, [r4, #1]
    faf6:	b94d      	cbnz	r5, fb0c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    faf8:	e006      	b.n	fb08 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    fafa:	201a      	movs	r0, #26
    fafc:	b006      	add	sp, #24
    fafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fb02:	f504 7497 	add.w	r4, r4, #302	; 0x12e
    fb06:	e7f4      	b.n	faf2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    fb08:	7820      	ldrb	r0, [r4, #0]
    fb0a:	b108      	cbz	r0, fb10 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    fb0c:	273a      	movs	r7, #58	; 0x3a
    fb0e:	e012      	b.n	fb36 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    fb10:	f884 a000 	strb.w	sl, [r4]
    fb14:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fb18:	70a0      	strb	r0, [r4, #2]
    fb1a:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fb1e:	70e1      	strb	r1, [r4, #3]
    fb20:	f88d 0000 	strb.w	r0, [sp]
    fb24:	f88d 1001 	strb.w	r1, [sp, #1]
    fb28:	88b0      	ldrh	r0, [r6, #4]
    fb2a:	f8ad 0002 	strh.w	r0, [sp, #2]
    fb2e:	4669      	mov	r1, sp
    fb30:	4648      	mov	r0, r9
    fb32:	f7fd ff6b 	bl	da0c <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fb36:	f884 8001 	strb.w	r8, [r4, #1]
    fb3a:	4638      	mov	r0, r7
    fb3c:	e7de      	b.n	fafc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000fb3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fb3e:	b510      	push	{r4, lr}
    fb40:	2008      	movs	r0, #8
    fb42:	f7fb f92f 	bl	ada4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    fb46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb4a:	f7f8 bea7 	b.w	889c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    fb4e:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fb52:	4288      	cmp	r0, r1
    fb54:	d303      	bcc.n	fb5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    fb56:	f640 0148 	movw	r1, #2120	; 0x848
    fb5a:	4288      	cmp	r0, r1
    fb5c:	d300      	bcc.n	fb60 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    fb5e:	4608      	mov	r0, r1
    fb60:	4770      	bx	lr
    fb62:	07c1      	lsls	r1, r0, #31
    fb64:	d001      	beq.n	fb6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    fb66:	2001      	movs	r0, #1
    fb68:	4770      	bx	lr
    fb6a:	0780      	lsls	r0, r0, #30
    fb6c:	d501      	bpl.n	fb72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    fb6e:	2002      	movs	r0, #2
    fb70:	4770      	bx	lr
    fb72:	2000      	movs	r0, #0
    fb74:	4770      	bx	lr
    fb76:	b510      	push	{r4, lr}
    fb78:	2801      	cmp	r0, #1
    fb7a:	d006      	beq.n	fb8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    fb7c:	2802      	cmp	r0, #2
    fb7e:	d004      	beq.n	fb8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    fb80:	f240 2163 	movw	r1, #611	; 0x263
    fb84:	2006      	movs	r0, #6
    fb86:	f7f4 fddf 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb8a:	bd10      	pop	{r4, pc}
    fb8c:	b50e      	push	{r1, r2, r3, lr}
    fb8e:	4669      	mov	r1, sp
    fb90:	2001      	movs	r0, #1
    fb92:	f7fd fc3e 	bl	d412 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fb96:	b150      	cbz	r0, fbae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    fb98:	f240 114f 	movw	r1, #335	; 0x14f
    fb9c:	2039      	movs	r0, #57	; 0x39
    fb9e:	f7f4 fdd3 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fba2:	9802      	ldr	r0, [sp, #8]
    fba4:	f7fe fe60 	bl	e868 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fba8:	b108      	cbz	r0, fbae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    fbaa:	2001      	movs	r0, #1
    fbac:	bd0e      	pop	{r1, r2, r3, pc}
    fbae:	4668      	mov	r0, sp
    fbb0:	f7f5 f802 	bl	4bb8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fbb4:	2800      	cmp	r0, #0
    fbb6:	d0f4      	beq.n	fba2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    fbb8:	2000      	movs	r0, #0
    fbba:	bd0e      	pop	{r1, r2, r3, pc}
    fbbc:	b510      	push	{r4, lr}
    fbbe:	f7ff ffe5 	bl	fb8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    fbc2:	b158      	cbz	r0, fbdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    fbc4:	f000 f958 	bl	fe78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    fbc8:	4604      	mov	r4, r0
    fbca:	f7fe fc7e 	bl	e4ca <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fbce:	b918      	cbnz	r0, fbd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    fbd0:	4620      	mov	r0, r4
    fbd2:	f7fe fc70 	bl	e4b6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fbd6:	b108      	cbz	r0, fbdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    fbd8:	2000      	movs	r0, #0
    fbda:	bd10      	pop	{r4, pc}
    fbdc:	2001      	movs	r0, #1
    fbde:	bd10      	pop	{r4, pc}
    fbe0:	b570      	push	{r4, r5, r6, lr}
    fbe2:	460c      	mov	r4, r1
    fbe4:	4605      	mov	r5, r0
    fbe6:	b112      	cbz	r2, fbee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    fbe8:	291f      	cmp	r1, #31
    fbea:	d80c      	bhi.n	fc06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
    fbec:	e016      	b.n	fc1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    fbee:	f7f5 faa9 	bl	5144 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    fbf2:	42a0      	cmp	r0, r4
    fbf4:	d201      	bcs.n	fbfa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
    fbf6:	2007      	movs	r0, #7
    fbf8:	bd70      	pop	{r4, r5, r6, pc}
    fbfa:	4628      	mov	r0, r5
    fbfc:	f7fe fc63 	bl	e4c6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fc00:	b118      	cbz	r0, fc0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    fc02:	2c1f      	cmp	r4, #31
    fc04:	d901      	bls.n	fc0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    fc06:	2012      	movs	r0, #18
    fc08:	bd70      	pop	{r4, r5, r6, pc}
    fc0a:	4628      	mov	r0, r5
    fc0c:	f7fe fc64 	bl	e4d8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fc10:	b130      	cbz	r0, fc20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
    fc12:	4621      	mov	r1, r4
    fc14:	4628      	mov	r0, r5
    fc16:	f7fe fc2b 	bl	e470 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    fc1a:	b118      	cbz	r0, fc24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
    fc1c:	2000      	movs	r0, #0
    fc1e:	bd70      	pop	{r4, r5, r6, pc}
    fc20:	2042      	movs	r0, #66	; 0x42
    fc22:	bd70      	pop	{r4, r5, r6, pc}
    fc24:	2045      	movs	r0, #69	; 0x45
    fc26:	bd70      	pop	{r4, r5, r6, pc}
    fc28:	b510      	push	{r4, lr}
    fc2a:	4604      	mov	r4, r0
    fc2c:	7840      	ldrb	r0, [r0, #1]
    fc2e:	06c1      	lsls	r1, r0, #27
    fc30:	d51c      	bpl.n	fc6c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    fc32:	07c0      	lsls	r0, r0, #31
    fc34:	d00b      	beq.n	fc4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    fc36:	f7fb f889 	bl	ad4c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    fc3a:	b1b8      	cbz	r0, fc6c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    fc3c:	7860      	ldrb	r0, [r4, #1]
    fc3e:	06c1      	lsls	r1, r0, #27
    fc40:	d405      	bmi.n	fc4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    fc42:	0700      	lsls	r0, r0, #28
    fc44:	d503      	bpl.n	fc4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    fc46:	7d20      	ldrb	r0, [r4, #20]
    fc48:	2802      	cmp	r0, #2
    fc4a:	d10f      	bne.n	fc6c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    fc4c:	e010      	b.n	fc70 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    fc4e:	7d20      	ldrb	r0, [r4, #20]
    fc50:	2802      	cmp	r0, #2
    fc52:	d001      	beq.n	fc58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
    fc54:	7ea0      	ldrb	r0, [r4, #26]
    fc56:	b948      	cbnz	r0, fc6c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    fc58:	7860      	ldrb	r0, [r4, #1]
    fc5a:	0700      	lsls	r0, r0, #28
    fc5c:	d408      	bmi.n	fc70 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    fc5e:	f8d4 0005 	ldr.w	r0, [r4, #5]
    fc62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    fc66:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    fc6a:	d201      	bcs.n	fc70 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    fc6c:	2011      	movs	r0, #17
    fc6e:	bd10      	pop	{r4, pc}
    fc70:	2000      	movs	r0, #0
    fc72:	bd10      	pop	{r4, pc}
    fc74:	b538      	push	{r3, r4, r5, lr}
    fc76:	4604      	mov	r4, r0
    fc78:	7800      	ldrb	r0, [r0, #0]
    fc7a:	28ef      	cmp	r0, #239	; 0xef
    fc7c:	d843      	bhi.n	fd06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fc7e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fc82:	f8ad 0000 	strh.w	r0, [sp]
    fc86:	9800      	ldr	r0, [sp, #0]
    fc88:	f000 f951 	bl	ff2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    fc8c:	b3a0      	cbz	r0, fcf8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    fc8e:	7861      	ldrb	r1, [r4, #1]
    fc90:	0708      	lsls	r0, r1, #28
    fc92:	d40b      	bmi.n	fcac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
    fc94:	f8d4 0002 	ldr.w	r0, [r4, #2]
    fc98:	f8d4 3005 	ldr.w	r3, [r4, #5]
    fc9c:	0a02      	lsrs	r2, r0, #8
    fc9e:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    fca2:	d830      	bhi.n	fd06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fca4:	2220      	movs	r2, #32
    fca6:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    fcaa:	d82c      	bhi.n	fd06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fcac:	7a60      	ldrb	r0, [r4, #9]
    fcae:	b318      	cbz	r0, fcf8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    fcb0:	2807      	cmp	r0, #7
    fcb2:	d828      	bhi.n	fd06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fcb4:	7aa0      	ldrb	r0, [r4, #10]
    fcb6:	b128      	cbz	r0, fcc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    fcb8:	2801      	cmp	r0, #1
    fcba:	d003      	beq.n	fcc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    fcbc:	2802      	cmp	r0, #2
    fcbe:	d001      	beq.n	fcc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    fcc0:	2803      	cmp	r0, #3
    fcc2:	d120      	bne.n	fd06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fcc4:	074a      	lsls	r2, r1, #29
    fcc6:	d403      	bmi.n	fcd0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    fcc8:	2802      	cmp	r0, #2
    fcca:	d001      	beq.n	fcd0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    fccc:	2803      	cmp	r0, #3
    fcce:	d105      	bne.n	fcdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
    fcd0:	7ae0      	ldrb	r0, [r4, #11]
    fcd2:	b108      	cbz	r0, fcd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    fcd4:	2801      	cmp	r0, #1
    fcd6:	d116      	bne.n	fd06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fcd8:	0748      	lsls	r0, r1, #29
    fcda:	d407      	bmi.n	fcec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    fcdc:	7ca0      	ldrb	r0, [r4, #18]
    fcde:	b128      	cbz	r0, fcec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    fce0:	2801      	cmp	r0, #1
    fce2:	d003      	beq.n	fcec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    fce4:	2802      	cmp	r0, #2
    fce6:	d001      	beq.n	fcec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    fce8:	2803      	cmp	r0, #3
    fcea:	d10c      	bne.n	fd06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fcec:	06c8      	lsls	r0, r1, #27
    fcee:	7d20      	ldrb	r0, [r4, #20]
    fcf0:	d503      	bpl.n	fcfa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
    fcf2:	2801      	cmp	r0, #1
    fcf4:	d107      	bne.n	fd06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fcf6:	e002      	b.n	fcfe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    fcf8:	e005      	b.n	fd06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fcfa:	2802      	cmp	r0, #2
    fcfc:	d003      	beq.n	fd06 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fcfe:	7e20      	ldrb	r0, [r4, #24]
    fd00:	b118      	cbz	r0, fd0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    fd02:	2801      	cmp	r0, #1
    fd04:	d001      	beq.n	fd0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    fd06:	2012      	movs	r0, #18
    fd08:	bd38      	pop	{r3, r4, r5, pc}
    fd0a:	2000      	movs	r0, #0
    fd0c:	bd38      	pop	{r3, r4, r5, pc}
    fd0e:	b510      	push	{r4, lr}
    fd10:	0004      	movs	r4, r0
    fd12:	d005      	beq.n	fd20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    fd14:	f7fb f856 	bl	adc4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fd18:	4384      	bics	r4, r0
    fd1a:	d001      	beq.n	fd20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    fd1c:	2000      	movs	r0, #0
    fd1e:	bd10      	pop	{r4, pc}
    fd20:	2001      	movs	r0, #1
    fd22:	bd10      	pop	{r4, pc}
    fd24:	28fb      	cmp	r0, #251	; 0xfb
    fd26:	d803      	bhi.n	fd30 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    fd28:	f640 0048 	movw	r0, #2120	; 0x848
    fd2c:	4281      	cmp	r1, r0
    fd2e:	d901      	bls.n	fd34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    fd30:	2011      	movs	r0, #17
    fd32:	4770      	bx	lr
    fd34:	2000      	movs	r0, #0
    fd36:	4770      	bx	lr
    fd38:	381b      	subs	r0, #27
    fd3a:	28e1      	cmp	r0, #225	; 0xe1
    fd3c:	d206      	bcs.n	fd4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    fd3e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fd42:	d303      	bcc.n	fd4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    fd44:	f244 2090 	movw	r0, #17040	; 0x4290
    fd48:	4281      	cmp	r1, r0
    fd4a:	d901      	bls.n	fd50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
    fd4c:	2012      	movs	r0, #18
    fd4e:	4770      	bx	lr
    fd50:	2000      	movs	r0, #0
    fd52:	4770      	bx	lr
    fd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd58:	4606      	mov	r6, r0
    fd5a:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    fd5e:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    fd62:	4615      	mov	r5, r2
    fd64:	302c      	adds	r0, #44	; 0x2c
    fd66:	f7f8 f825 	bl	7db4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    fd6a:	4680      	mov	r8, r0
    fd6c:	2102      	movs	r1, #2
    fd6e:	f7fd fe1e 	bl	d9ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fd72:	4287      	cmp	r7, r0
    fd74:	d200      	bcs.n	fd78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
    fd76:	4638      	mov	r0, r7
    fd78:	4607      	mov	r7, r0
    fd7a:	2102      	movs	r1, #2
    fd7c:	4640      	mov	r0, r8
    fd7e:	f7fd fe16 	bl	d9ae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fd82:	4284      	cmp	r4, r0
    fd84:	d200      	bcs.n	fd88 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
    fd86:	4620      	mov	r0, r4
    fd88:	8831      	ldrh	r1, [r6, #0]
    fd8a:	8029      	strh	r1, [r5, #0]
    fd8c:	2f1b      	cmp	r7, #27
    fd8e:	d913      	bls.n	fdb8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
    fd90:	2ffb      	cmp	r7, #251	; 0xfb
    fd92:	d300      	bcc.n	fd96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    fd94:	27fb      	movs	r7, #251	; 0xfb
    fd96:	806f      	strh	r7, [r5, #2]
    fd98:	281b      	cmp	r0, #27
    fd9a:	d90f      	bls.n	fdbc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    fd9c:	28fb      	cmp	r0, #251	; 0xfb
    fd9e:	d300      	bcc.n	fda2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    fda0:	20fb      	movs	r0, #251	; 0xfb
    fda2:	80e8      	strh	r0, [r5, #6]
    fda4:	4640      	mov	r0, r8
    fda6:	f7ff fed2 	bl	fb4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    fdaa:	80a8      	strh	r0, [r5, #4]
    fdac:	4640      	mov	r0, r8
    fdae:	f7ff fece 	bl	fb4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    fdb2:	8128      	strh	r0, [r5, #8]
    fdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdb8:	271b      	movs	r7, #27
    fdba:	e7ec      	b.n	fd96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    fdbc:	201b      	movs	r0, #27
    fdbe:	e7f0      	b.n	fda2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    fdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdc4:	7890      	ldrb	r0, [r2, #2]
    fdc6:	9e06      	ldr	r6, [sp, #24]
    fdc8:	461d      	mov	r5, r3
    fdca:	4614      	mov	r4, r2
    fdcc:	b908      	cbnz	r0, fdd2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
    fdce:	f7fa fff9 	bl	adc4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fdd2:	78e4      	ldrb	r4, [r4, #3]
    fdd4:	4607      	mov	r7, r0
    fdd6:	b914      	cbnz	r4, fdde <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
    fdd8:	f7fa fff4 	bl	adc4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fddc:	4604      	mov	r4, r0
    fdde:	b16f      	cbz	r7, fdfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    fde0:	b164      	cbz	r4, fdfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    fde2:	4638      	mov	r0, r7
    fde4:	f7ff febd 	bl	fb62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    fde8:	4620      	mov	r0, r4
    fdea:	f7ff feba 	bl	fb62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    fdee:	b12f      	cbz	r7, fdfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    fdf0:	b124      	cbz	r4, fdfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    fdf2:	702f      	strb	r7, [r5, #0]
    fdf4:	7034      	strb	r4, [r6, #0]
    fdf6:	2000      	movs	r0, #0
    fdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdfc:	2009      	movs	r0, #9
    fdfe:	e7fb      	b.n	fdf8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
    fe00:	b510      	push	{r4, lr}
    fe02:	f7fc faa5 	bl	c350 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    fe06:	b928      	cbnz	r0, fe14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
    fe08:	f7fc fad8 	bl	c3bc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    fe0c:	b910      	cbnz	r0, fe14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
    fe0e:	f7fc fadf 	bl	c3d0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fe12:	b108      	cbz	r0, fe18 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
    fe14:	2008      	movs	r0, #8
    fe16:	bd10      	pop	{r4, pc}
    fe18:	f7fc fa6f 	bl	c2fa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    fe1c:	b940      	cbnz	r0, fe30 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    fe1e:	f7fc fa76 	bl	c30e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    fe22:	b928      	cbnz	r0, fe30 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    fe24:	f7fc fa8a 	bl	c33c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    fe28:	b910      	cbnz	r0, fe30 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    fe2a:	f7fc fa9b 	bl	c364 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fe2e:	b108      	cbz	r0, fe34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    fe30:	2004      	movs	r0, #4
    fe32:	bd10      	pop	{r4, pc}
    fe34:	f240 519c 	movw	r1, #1436	; 0x59c
    fe38:	2039      	movs	r0, #57	; 0x39
    fe3a:	f7f4 fc85 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe3e:	b510      	push	{r4, lr}
    fe40:	f7fa ffba 	bl	adb8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fe44:	f3c0 1040 	ubfx	r0, r0, #5, #1
    fe48:	bd10      	pop	{r4, pc}
    fe4a:	6840      	ldr	r0, [r0, #4]
    fe4c:	f000 b800 	b.w	fe50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    fe50:	b508      	push	{r3, lr}
    fe52:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    fe56:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
    fe5a:	f88d 0000 	strb.w	r0, [sp]
    fe5e:	9800      	ldr	r0, [sp, #0]
    fe60:	9000      	str	r0, [sp, #0]
    fe62:	f89d 0000 	ldrb.w	r0, [sp]
    fe66:	1e40      	subs	r0, r0, #1
    fe68:	4208      	tst	r0, r1
    fe6a:	d003      	beq.n	fe74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
    fe6c:	2904      	cmp	r1, #4
    fe6e:	d001      	beq.n	fe74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
    fe70:	2001      	movs	r0, #1
    fe72:	bd08      	pop	{r3, pc}
    fe74:	2000      	movs	r0, #0
    fe76:	bd08      	pop	{r3, pc}
    fe78:	b510      	push	{r4, lr}
    fe7a:	2101      	movs	r1, #1
    fe7c:	2000      	movs	r0, #0
    fe7e:	f7fd fabe 	bl	d3fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe82:	0004      	movs	r4, r0
    fe84:	d108      	bne.n	fe98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35a>
    fe86:	2200      	movs	r2, #0
    fe88:	2101      	movs	r1, #1
    fe8a:	4610      	mov	r0, r2
    fe8c:	f7fd faad 	bl	d3ea <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    fe90:	0004      	movs	r4, r0
    fe92:	d003      	beq.n	fe9c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35e>
    fe94:	f7fe fab4 	bl	e400 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    fe98:	4620      	mov	r0, r4
    fe9a:	bd10      	pop	{r4, pc}
    fe9c:	f240 2135 	movw	r1, #565	; 0x235
    fea0:	2039      	movs	r0, #57	; 0x39
    fea2:	f7f4 fc51 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fea6:	b510      	push	{r4, lr}
    fea8:	f7ff fe70 	bl	fb8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    feac:	2800      	cmp	r0, #0
    feae:	d000      	beq.n	feb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x374>
    feb0:	2001      	movs	r0, #1
    feb2:	bd10      	pop	{r4, pc}
    feb4:	b570      	push	{r4, r5, r6, lr}
    feb6:	4605      	mov	r5, r0
    feb8:	f7fe fb0e 	bl	e4d8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    febc:	b170      	cbz	r0, fedc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
    febe:	4628      	mov	r0, r5
    fec0:	f7fe fcd2 	bl	e868 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fec4:	2800      	cmp	r0, #0
    fec6:	d008      	beq.n	feda <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
    fec8:	4628      	mov	r0, r5
    feca:	f7fe fcca 	bl	e862 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    fece:	4604      	mov	r4, r0
    fed0:	4628      	mov	r0, r5
    fed2:	f7fe fca0 	bl	e816 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    fed6:	b118      	cbz	r0, fee0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
    fed8:	200c      	movs	r0, #12
    feda:	bd70      	pop	{r4, r5, r6, pc}
    fedc:	2042      	movs	r0, #66	; 0x42
    fede:	bd70      	pop	{r4, r5, r6, pc}
    fee0:	b164      	cbz	r4, fefc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    fee2:	8820      	ldrh	r0, [r4, #0]
    fee4:	f7fd fc13 	bl	d70e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fee8:	8820      	ldrh	r0, [r4, #0]
    feea:	2100      	movs	r1, #0
    feec:	f7f4 feb4 	bl	4c58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fef0:	b120      	cbz	r0, fefc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    fef2:	f241 41ca 	movw	r1, #5322	; 0x14ca
    fef6:	2039      	movs	r0, #57	; 0x39
    fef8:	f7f4 fc26 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fefc:	2000      	movs	r0, #0
    fefe:	bd70      	pop	{r4, r5, r6, pc}
    ff00:	b530      	push	{r4, r5, lr}
    ff02:	f340 0400 	sbfx	r4, r0, #0, #1
    ff06:	f340 0040 	sbfx	r0, r0, #1, #1
    ff0a:	1c40      	adds	r0, r0, #1
    ff0c:	9d03      	ldr	r5, [sp, #12]
    ff0e:	1c64      	adds	r4, r4, #1
    ff10:	d000      	beq.n	ff14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
    ff12:	b119      	cbz	r1, ff1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    ff14:	b100      	cbz	r0, ff18 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
    ff16:	b10a      	cbz	r2, ff1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    ff18:	b91c      	cbnz	r4, ff22 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
    ff1a:	e001      	b.n	ff20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
    ff1c:	2011      	movs	r0, #17
    ff1e:	bd30      	pop	{r4, r5, pc}
    ff20:	2100      	movs	r1, #0
    ff22:	7019      	strb	r1, [r3, #0]
    ff24:	b900      	cbnz	r0, ff28 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
    ff26:	2200      	movs	r2, #0
    ff28:	702a      	strb	r2, [r5, #0]
    ff2a:	2000      	movs	r0, #0
    ff2c:	bd30      	pop	{r4, r5, pc}
    ff2e:	b2c0      	uxtb	r0, r0
    ff30:	06c1      	lsls	r1, r0, #27
    ff32:	d40c      	bmi.n	ff4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
    ff34:	0681      	lsls	r1, r0, #26
    ff36:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    ff3a:	d503      	bpl.n	ff44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    ff3c:	b9d1      	cbnz	r1, ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    ff3e:	0781      	lsls	r1, r0, #30
    ff40:	d418      	bmi.n	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    ff42:	e001      	b.n	ff48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
    ff44:	2900      	cmp	r1, #0
    ff46:	d1fa      	bne.n	ff3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    ff48:	0700      	lsls	r0, r0, #28
    ff4a:	d413      	bmi.n	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    ff4c:	e010      	b.n	ff70 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    ff4e:	0641      	lsls	r1, r0, #25
    ff50:	d410      	bmi.n	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    ff52:	0681      	lsls	r1, r0, #26
    ff54:	d40e      	bmi.n	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    ff56:	07c1      	lsls	r1, r0, #31
    ff58:	ea4f 7180 	mov.w	r1, r0, lsl #30
    ff5c:	d004      	beq.n	ff68 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    ff5e:	2900      	cmp	r1, #0
    ff60:	db02      	blt.n	ff68 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    ff62:	0740      	lsls	r0, r0, #29
    ff64:	d404      	bmi.n	ff70 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    ff66:	e005      	b.n	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    ff68:	0701      	lsls	r1, r0, #28
    ff6a:	d403      	bmi.n	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    ff6c:	0740      	lsls	r0, r0, #29
    ff6e:	d401      	bmi.n	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    ff70:	2001      	movs	r0, #1
    ff72:	4770      	bx	lr
    ff74:	2000      	movs	r0, #0
    ff76:	4770      	bx	lr
    ff78:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ff7a:	4669      	mov	r1, sp
    ff7c:	2001      	movs	r0, #1
    ff7e:	f7fd fa48 	bl	d412 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ff82:	b178      	cbz	r0, ffa4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    ff84:	f240 116d 	movw	r1, #365	; 0x16d
    ff88:	2039      	movs	r0, #57	; 0x39
    ff8a:	f7f4 fbdd 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff8e:	9c02      	ldr	r4, [sp, #8]
    ff90:	4620      	mov	r0, r4
    ff92:	f7fe fc69 	bl	e868 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ff96:	b128      	cbz	r0, ffa4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    ff98:	4620      	mov	r0, r4
    ff9a:	f7fe facb 	bl	e534 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    ff9e:	b108      	cbz	r0, ffa4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    ffa0:	2001      	movs	r0, #1
    ffa2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ffa4:	4668      	mov	r0, sp
    ffa6:	f7f4 fe07 	bl	4bb8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ffaa:	2800      	cmp	r0, #0
    ffac:	d0ef      	beq.n	ff8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    ffae:	2000      	movs	r0, #0
    ffb0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ffb2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    ffb2:	6802      	ldr	r2, [r0, #0]
    ffb4:	b912      	cbnz	r2, ffbc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    ffb6:	6001      	str	r1, [r0, #0]
    ffb8:	4770      	bx	lr
    ffba:	4602      	mov	r2, r0
    ffbc:	6850      	ldr	r0, [r2, #4]
    ffbe:	b108      	cbz	r0, ffc4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    ffc0:	428a      	cmp	r2, r1
    ffc2:	d1fa      	bne.n	ffba <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    ffc4:	428a      	cmp	r2, r1
    ffc6:	d0f7      	beq.n	ffb8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    ffc8:	6051      	str	r1, [r2, #4]
    ffca:	4770      	bx	lr
    ffcc:	b510      	push	{r4, lr}
    ffce:	f7fe fc4e 	bl	e86e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    ffd2:	b108      	cbz	r0, ffd8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    ffd4:	21d9      	movs	r1, #217	; 0xd9
    ffd6:	e003      	b.n	ffe0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    ffd8:	f7f7 f87a 	bl	70d0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    ffdc:	b118      	cbz	r0, ffe6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    ffde:	21de      	movs	r1, #222	; 0xde
    ffe0:	2001      	movs	r0, #1
    ffe2:	f7f4 fbb1 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ffea:	2001      	movs	r0, #1
    ffec:	f7f4 bd7a 	b.w	4ae4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fff0:	b510      	push	{r4, lr}
    fff2:	4604      	mov	r4, r0
    fff4:	e002      	b.n	fffc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    fff6:	6820      	ldr	r0, [r4, #0]
    fff8:	4780      	blx	r0
    fffa:	6864      	ldr	r4, [r4, #4]
    fffc:	2c00      	cmp	r4, #0
    fffe:	d1fa      	bne.n	fff6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
   10000:	bd10      	pop	{r4, pc}
   10002:	b510      	push	{r4, lr}
   10004:	2000      	movs	r0, #0
   10006:	f7f4 fd6d 	bl	4ae4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1000a:	f7f4 ffa3 	bl	4f54 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1000e:	f7f5 fa7b 	bl	5508 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10012:	f7f5 fc69 	bl	58e8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10016:	2800      	cmp	r0, #0
   10018:	d003      	beq.n	10022 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
   1001a:	21b8      	movs	r1, #184	; 0xb8
   1001c:	2001      	movs	r0, #1
   1001e:	f7f4 fb93 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10022:	bd10      	pop	{r4, pc}
   10024:	b510      	push	{r4, lr}
   10026:	f7ff ffd1 	bl	ffcc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
   1002a:	f7fe ffef 	bl	f00c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   1002e:	2800      	cmp	r0, #0
   10030:	d003      	beq.n	1003a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
   10032:	21f5      	movs	r1, #245	; 0xf5
   10034:	2001      	movs	r0, #1
   10036:	f7f4 fb87 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1003a:	bd10      	pop	{r4, pc}

0001003c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   1003c:	f7f3 bfe0 	b.w	4000 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10040:	000b0001 	.word	0x000b0001
   10044:	000a0002 	.word	0x000a0002
   10048:	00090005 	.word	0x00090005
   1004c:	0008000a 	.word	0x0008000a
   10050:	00070014 	.word	0x00070014
   10054:	0006001e 	.word	0x0006001e
   10058:	00050032 	.word	0x00050032
   1005c:	0004004b 	.word	0x0004004b
   10060:	00030064 	.word	0x00030064
   10064:	00020096 	.word	0x00020096
   10068:	000100fa 	.word	0x000100fa
   1006c:	000001f4 	.word	0x000001f4

00010070 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10070:	b510      	push	{r4, lr}
   10072:	f7fb fa9b 	bl	b5ac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10076:	f000 f850 	bl	1011a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1007a:	f7fa ff11 	bl	aea0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1007e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10082:	f7fb b80f 	b.w	b0a4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010086 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10086:	b510      	push	{r4, lr}
   10088:	24c8      	movs	r4, #200	; 0xc8
   1008a:	1e64      	subs	r4, r4, #1
   1008c:	b2e4      	uxtb	r4, r4
   1008e:	f7fa ff25 	bl	aedc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10092:	2802      	cmp	r0, #2
   10094:	d003      	beq.n	1009e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10096:	2801      	cmp	r0, #1
   10098:	d000      	beq.n	1009c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   1009a:	2000      	movs	r0, #0
   1009c:	bd10      	pop	{r4, pc}
   1009e:	2c00      	cmp	r4, #0
   100a0:	d1f3      	bne.n	1008a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   100a2:	2193      	movs	r1, #147	; 0x93
   100a4:	203b      	movs	r0, #59	; 0x3b
   100a6:	f7f4 fb4f 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000100aa <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   100aa:	b510      	push	{r4, lr}
   100ac:	f7f4 fa16 	bl	44dc <mpsl_fem_lna_configuration_clear>
   100b0:	2800      	cmp	r0, #0
   100b2:	d005      	beq.n	100c0 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   100b4:	1c40      	adds	r0, r0, #1
   100b6:	d003      	beq.n	100c0 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   100b8:	2150      	movs	r1, #80	; 0x50
   100ba:	2040      	movs	r0, #64	; 0x40
   100bc:	f7f4 fb44 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100c0:	bd10      	pop	{r4, pc}

000100c2 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   100c2:	b510      	push	{r4, lr}
   100c4:	f7f4 fa16 	bl	44f4 <mpsl_fem_pa_configuration_clear>
   100c8:	2800      	cmp	r0, #0
   100ca:	d005      	beq.n	100d8 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   100cc:	1c40      	adds	r0, r0, #1
   100ce:	d003      	beq.n	100d8 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   100d0:	2149      	movs	r1, #73	; 0x49
   100d2:	2040      	movs	r0, #64	; 0x40
   100d4:	f7f4 fb38 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100d8:	bd10      	pop	{r4, pc}

000100da <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   100da:	b510      	push	{r4, lr}
   100dc:	f7f4 f9f8 	bl	44d0 <mpsl_fem_disable>
   100e0:	2800      	cmp	r0, #0
   100e2:	d005      	beq.n	100f0 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   100e4:	1c40      	adds	r0, r0, #1
   100e6:	d003      	beq.n	100f0 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   100e8:	2157      	movs	r1, #87	; 0x57
   100ea:	2040      	movs	r0, #64	; 0x40
   100ec:	f7f4 fb2c 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100f0:	bd10      	pop	{r4, pc}

000100f2 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   100f2:	b510      	push	{r4, lr}
   100f4:	2100      	movs	r1, #0
   100f6:	4608      	mov	r0, r1
   100f8:	f7f4 f9f6 	bl	44e8 <mpsl_fem_lna_configuration_set>
   100fc:	b108      	cbz	r0, 10102 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   100fe:	2000      	movs	r0, #0
   10100:	bd10      	pop	{r4, pc}
   10102:	2001      	movs	r0, #1
   10104:	bd10      	pop	{r4, pc}

00010106 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   10106:	b508      	push	{r3, lr}
   10108:	4668      	mov	r0, sp
   1010a:	f7f4 f9ff 	bl	450c <mpsl_fem_pa_is_configured>
   1010e:	f89d 0000 	ldrb.w	r0, [sp]
   10112:	2800      	cmp	r0, #0
   10114:	d000      	beq.n	10118 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   10116:	2001      	movs	r0, #1
   10118:	bd08      	pop	{r3, pc}

0001011a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1011a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1011e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10122:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10126:	f3bf 8f4f 	dsb	sy
   1012a:	f3bf 8f6f 	isb	sy
   1012e:	f7fb b893 	b.w	b258 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   10132:	2800      	cmp	r0, #0
   10134:	db09      	blt.n	1014a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10136:	f000 021f 	and.w	r2, r0, #31
   1013a:	2101      	movs	r1, #1
   1013c:	4091      	lsls	r1, r2
   1013e:	0940      	lsrs	r0, r0, #5
   10140:	0080      	lsls	r0, r0, #2
   10142:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10146:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1014a:	4770      	bx	lr
   1014c:	2800      	cmp	r0, #0
   1014e:	db0d      	blt.n	1016c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10150:	f000 021f 	and.w	r2, r0, #31
   10154:	2101      	movs	r1, #1
   10156:	4091      	lsls	r1, r2
   10158:	0940      	lsrs	r0, r0, #5
   1015a:	0080      	lsls	r0, r0, #2
   1015c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10160:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10164:	f3bf 8f4f 	dsb	sy
   10168:	f3bf 8f6f 	isb	sy
   1016c:	4770      	bx	lr

0001016e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   1016e:	b510      	push	{r4, lr}
   10170:	2801      	cmp	r0, #1
   10172:	d006      	beq.n	10182 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   10174:	2802      	cmp	r0, #2
   10176:	d006      	beq.n	10186 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   10178:	f640 3141 	movw	r1, #2881	; 0xb41
   1017c:	203e      	movs	r0, #62	; 0x3e
   1017e:	f7f4 fae3 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10182:	2028      	movs	r0, #40	; 0x28
   10184:	bd10      	pop	{r4, pc}
   10186:	2018      	movs	r0, #24
   10188:	bd10      	pop	{r4, pc}

0001018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   1018a:	b510      	push	{r4, lr}
   1018c:	2801      	cmp	r0, #1
   1018e:	d006      	beq.n	1019e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   10190:	2802      	cmp	r0, #2
   10192:	d007      	beq.n	101a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   10194:	f640 3155 	movw	r1, #2901	; 0xb55
   10198:	203e      	movs	r0, #62	; 0x3e
   1019a:	f7f4 fad5 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1019e:	f641 6014 	movw	r0, #7700	; 0x1e14
   101a2:	bd10      	pop	{r4, pc}
   101a4:	f241 1030 	movw	r0, #4400	; 0x1130
   101a8:	bd10      	pop	{r4, pc}

000101aa <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   101aa:	f7fb bf57 	b.w	c05c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   101ae:	b510      	push	{r4, lr}
   101b0:	460a      	mov	r2, r1
   101b2:	b130      	cbz	r0, 101c2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   101b4:	2801      	cmp	r0, #1
   101b6:	d00b      	beq.n	101d0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   101b8:	f240 6114 	movw	r1, #1556	; 0x614
   101bc:	203e      	movs	r0, #62	; 0x3e
   101be:	f7f4 fac3 	bl	4748 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101c6:	f102 0128 	add.w	r1, r2, #40	; 0x28
   101ca:	4610      	mov	r0, r2
   101cc:	f7fa beda 	b.w	af84 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   101d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101d4:	f102 0129 	add.w	r1, r2, #41	; 0x29
   101d8:	4610      	mov	r0, r2
   101da:	f7fa bebd 	b.w	af58 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
   101de:	5840      	ldr	r0, [r0, r1]
   101e0:	2800      	cmp	r0, #0
   101e2:	d000      	beq.n	101e6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
   101e4:	2001      	movs	r0, #1
   101e6:	4770      	bx	lr
   101e8:	5840      	ldr	r0, [r0, r1]
   101ea:	2800      	cmp	r0, #0
   101ec:	d000      	beq.n	101f0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
   101ee:	2001      	movs	r0, #1
   101f0:	4770      	bx	lr

000101f2 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   101f2:	b570      	push	{r4, r5, r6, lr}
   101f4:	4605      	mov	r5, r0
   101f6:	4614      	mov	r4, r2
   101f8:	4608      	mov	r0, r1
   101fa:	f7ff ffc6 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   101fe:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   10202:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   10206:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   1020a:	4620      	mov	r0, r4
   1020c:	f7ff ffbd 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10210:	4428      	add	r0, r5
   10212:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10216:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   1021a:	fbb0 f5f1 	udiv	r5, r0, r1
   1021e:	4620      	mov	r0, r4
   10220:	f7ff ffa5 	bl	1016e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10224:	4428      	add	r0, r5
   10226:	1d40      	adds	r0, r0, #5
   10228:	bd70      	pop	{r4, r5, r6, pc}

0001022a <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   1022a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1022e:	4607      	mov	r7, r0
   10230:	461d      	mov	r5, r3
   10232:	460e      	mov	r6, r1
   10234:	4614      	mov	r4, r2
   10236:	4610      	mov	r0, r2
   10238:	f7ff ffa7 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1023c:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   10240:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   10244:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   10248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1024c:	2e02      	cmp	r6, #2
   1024e:	d00e      	beq.n	1026e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   10250:	f240 52dc 	movw	r2, #1500	; 0x5dc
   10254:	4411      	add	r1, r2
   10256:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   1025a:	fbb1 f6f0 	udiv	r6, r1, r0
   1025e:	4620      	mov	r0, r4
   10260:	f7ff ff85 	bl	1016e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10264:	4430      	add	r0, r6
   10266:	4428      	add	r0, r5
   10268:	1d40      	adds	r0, r0, #5
   1026a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1026e:	4602      	mov	r2, r0
   10270:	e7f0      	b.n	10254 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

00010272 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10272:	b510      	push	{r4, lr}
   10274:	4604      	mov	r4, r0
   10276:	4608      	mov	r0, r1
   10278:	f7ff ff87 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1027c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10280:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10284:	fbb0 f0f1 	udiv	r0, r0, r1
   10288:	1a20      	subs	r0, r4, r0
   1028a:	1e80      	subs	r0, r0, #2
   1028c:	bd10      	pop	{r4, pc}

0001028e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1028e:	b510      	push	{r4, lr}
   10290:	4604      	mov	r4, r0
   10292:	4608      	mov	r0, r1
   10294:	f7ff ff79 	bl	1018a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1029c:	fbb0 f0f1 	udiv	r0, r0, r1
   102a0:	1a20      	subs	r0, r4, r0
   102a2:	bd10      	pop	{r4, pc}

000102a4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   102a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   102a8:	2902      	cmp	r1, #2
   102aa:	d008      	beq.n	102be <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   102ac:	f240 51dc 	movw	r1, #1500	; 0x5dc
   102b0:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   102b4:	fbb1 f1f2 	udiv	r1, r1, r2
   102b8:	4408      	add	r0, r1
   102ba:	1e80      	subs	r0, r0, #2
   102bc:	4770      	bx	lr
   102be:	4611      	mov	r1, r2
   102c0:	e7f6      	b.n	102b0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

000102c2 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   102c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   102c6:	2902      	cmp	r1, #2
   102c8:	d007      	beq.n	102da <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   102ca:	f240 51dc 	movw	r1, #1500	; 0x5dc
   102ce:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   102d2:	fbb1 f1f2 	udiv	r1, r1, r2
   102d6:	4408      	add	r0, r1
   102d8:	4770      	bx	lr
   102da:	4611      	mov	r1, r2
   102dc:	e7f7      	b.n	102ce <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   102de:	080c      	.short	0x080c
   102e0:	010d1702 	.word	0x010d1702
   102e4:	09090201 	.word	0x09090201
   102e8:	02060101 	.word	0x02060101
   102ec:	03181809 	.word	0x03181809
   102f0:	09090101 	.word	0x09090101
   102f4:	00050303 	.word	0x00050303

000102f8 <_dtoa_r>:
   102f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
   102fe:	b099      	sub	sp, #100	; 0x64
   10300:	4616      	mov	r6, r2
   10302:	461f      	mov	r7, r3
   10304:	e9cd 6704 	strd	r6, r7, [sp, #16]
   10308:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
   1030c:	4605      	mov	r5, r0
   1030e:	b93c      	cbnz	r4, 10320 <_dtoa_r+0x28>
   10310:	2010      	movs	r0, #16
   10312:	f01a fcb5 	bl	2ac80 <malloc>
   10316:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1031a:	6268      	str	r0, [r5, #36]	; 0x24
   1031c:	6004      	str	r4, [r0, #0]
   1031e:	60c4      	str	r4, [r0, #12]
   10320:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10322:	6819      	ldr	r1, [r3, #0]
   10324:	b151      	cbz	r1, 1033c <_dtoa_r+0x44>
   10326:	685a      	ldr	r2, [r3, #4]
   10328:	604a      	str	r2, [r1, #4]
   1032a:	2301      	movs	r3, #1
   1032c:	4093      	lsls	r3, r2
   1032e:	608b      	str	r3, [r1, #8]
   10330:	4628      	mov	r0, r5
   10332:	f020 fd76 	bl	30e22 <_Bfree>
   10336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10338:	2200      	movs	r2, #0
   1033a:	601a      	str	r2, [r3, #0]
   1033c:	1e3b      	subs	r3, r7, #0
   1033e:	bfb9      	ittee	lt
   10340:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   10344:	9305      	strlt	r3, [sp, #20]
   10346:	2300      	movge	r3, #0
   10348:	f8c8 3000 	strge.w	r3, [r8]
   1034c:	f8dd 9014 	ldr.w	r9, [sp, #20]
   10350:	4ba7      	ldr	r3, [pc, #668]	; (105f0 <_dtoa_r+0x2f8>)
   10352:	bfbc      	itt	lt
   10354:	2201      	movlt	r2, #1
   10356:	f8c8 2000 	strlt.w	r2, [r8]
   1035a:	ea33 0309 	bics.w	r3, r3, r9
   1035e:	d119      	bne.n	10394 <_dtoa_r+0x9c>
   10360:	9a24      	ldr	r2, [sp, #144]	; 0x90
   10362:	f242 730f 	movw	r3, #9999	; 0x270f
   10366:	6013      	str	r3, [r2, #0]
   10368:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1036c:	4333      	orrs	r3, r6
   1036e:	f000 856d 	beq.w	10e4c <_dtoa_r+0xb54>
   10372:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10374:	b953      	cbnz	r3, 1038c <_dtoa_r+0x94>
   10376:	4b9f      	ldr	r3, [pc, #636]	; (105f4 <_dtoa_r+0x2fc>)
   10378:	e023      	b.n	103c2 <_dtoa_r+0xca>
   1037a:	4b9f      	ldr	r3, [pc, #636]	; (105f8 <_dtoa_r+0x300>)
   1037c:	9303      	str	r3, [sp, #12]
   1037e:	3308      	adds	r3, #8
   10380:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10382:	6013      	str	r3, [r2, #0]
   10384:	9803      	ldr	r0, [sp, #12]
   10386:	b019      	add	sp, #100	; 0x64
   10388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1038c:	4b99      	ldr	r3, [pc, #612]	; (105f4 <_dtoa_r+0x2fc>)
   1038e:	9303      	str	r3, [sp, #12]
   10390:	3303      	adds	r3, #3
   10392:	e7f5      	b.n	10380 <_dtoa_r+0x88>
   10394:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10398:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   1039c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   103a0:	2200      	movs	r2, #0
   103a2:	2300      	movs	r3, #0
   103a4:	f7f0 fcea 	bl	d7c <__aeabi_dcmpeq>
   103a8:	4680      	mov	r8, r0
   103aa:	b160      	cbz	r0, 103c6 <_dtoa_r+0xce>
   103ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
   103ae:	2301      	movs	r3, #1
   103b0:	6013      	str	r3, [r2, #0]
   103b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   103b4:	2b00      	cmp	r3, #0
   103b6:	f000 8546 	beq.w	10e46 <_dtoa_r+0xb4e>
   103ba:	4b90      	ldr	r3, [pc, #576]	; (105fc <_dtoa_r+0x304>)
   103bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   103be:	6013      	str	r3, [r2, #0]
   103c0:	3b01      	subs	r3, #1
   103c2:	9303      	str	r3, [sp, #12]
   103c4:	e7de      	b.n	10384 <_dtoa_r+0x8c>
   103c6:	ab16      	add	r3, sp, #88	; 0x58
   103c8:	9301      	str	r3, [sp, #4]
   103ca:	ab17      	add	r3, sp, #92	; 0x5c
   103cc:	9300      	str	r3, [sp, #0]
   103ce:	4628      	mov	r0, r5
   103d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   103d4:	f020 ff5d 	bl	31292 <__d2b>
   103d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
   103dc:	4683      	mov	fp, r0
   103de:	2c00      	cmp	r4, #0
   103e0:	d07e      	beq.n	104e0 <_dtoa_r+0x1e8>
   103e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   103e4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   103e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   103ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   103f0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   103f4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   103f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
   103fc:	4b80      	ldr	r3, [pc, #512]	; (10600 <_dtoa_r+0x308>)
   103fe:	2200      	movs	r2, #0
   10400:	f7ef fed2 	bl	1a8 <__aeabi_dsub>
   10404:	a374      	add	r3, pc, #464	; (adr r3, 105d8 <_dtoa_r+0x2e0>)
   10406:	e9d3 2300 	ldrd	r2, r3, [r3]
   1040a:	f7f0 f885 	bl	518 <__aeabi_dmul>
   1040e:	a374      	add	r3, pc, #464	; (adr r3, 105e0 <_dtoa_r+0x2e8>)
   10410:	e9d3 2300 	ldrd	r2, r3, [r3]
   10414:	f7ef feca 	bl	1ac <__adddf3>
   10418:	4606      	mov	r6, r0
   1041a:	4620      	mov	r0, r4
   1041c:	460f      	mov	r7, r1
   1041e:	f7f0 f811 	bl	444 <__aeabi_i2d>
   10422:	a371      	add	r3, pc, #452	; (adr r3, 105e8 <_dtoa_r+0x2f0>)
   10424:	e9d3 2300 	ldrd	r2, r3, [r3]
   10428:	f7f0 f876 	bl	518 <__aeabi_dmul>
   1042c:	4602      	mov	r2, r0
   1042e:	460b      	mov	r3, r1
   10430:	4630      	mov	r0, r6
   10432:	4639      	mov	r1, r7
   10434:	f7ef feba 	bl	1ac <__adddf3>
   10438:	4606      	mov	r6, r0
   1043a:	460f      	mov	r7, r1
   1043c:	f7f0 fce6 	bl	e0c <__aeabi_d2iz>
   10440:	2200      	movs	r2, #0
   10442:	4682      	mov	sl, r0
   10444:	2300      	movs	r3, #0
   10446:	4630      	mov	r0, r6
   10448:	4639      	mov	r1, r7
   1044a:	f7f0 fca1 	bl	d90 <__aeabi_dcmplt>
   1044e:	b148      	cbz	r0, 10464 <_dtoa_r+0x16c>
   10450:	4650      	mov	r0, sl
   10452:	f7ef fff7 	bl	444 <__aeabi_i2d>
   10456:	4632      	mov	r2, r6
   10458:	463b      	mov	r3, r7
   1045a:	f7f0 fc8f 	bl	d7c <__aeabi_dcmpeq>
   1045e:	b908      	cbnz	r0, 10464 <_dtoa_r+0x16c>
   10460:	f10a 3aff 	add.w	sl, sl, #4294967295
   10464:	f1ba 0f16 	cmp.w	sl, #22
   10468:	d857      	bhi.n	1051a <_dtoa_r+0x222>
   1046a:	4b66      	ldr	r3, [pc, #408]	; (10604 <_dtoa_r+0x30c>)
   1046c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   10470:	e9d3 2300 	ldrd	r2, r3, [r3]
   10474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   10478:	f7f0 fc8a 	bl	d90 <__aeabi_dcmplt>
   1047c:	2800      	cmp	r0, #0
   1047e:	d04e      	beq.n	1051e <_dtoa_r+0x226>
   10480:	f10a 3aff 	add.w	sl, sl, #4294967295
   10484:	2300      	movs	r3, #0
   10486:	930f      	str	r3, [sp, #60]	; 0x3c
   10488:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1048a:	1b1c      	subs	r4, r3, r4
   1048c:	1e63      	subs	r3, r4, #1
   1048e:	9309      	str	r3, [sp, #36]	; 0x24
   10490:	bf45      	ittet	mi
   10492:	f1c4 0301 	rsbmi	r3, r4, #1
   10496:	9306      	strmi	r3, [sp, #24]
   10498:	2300      	movpl	r3, #0
   1049a:	2300      	movmi	r3, #0
   1049c:	bf4c      	ite	mi
   1049e:	9309      	strmi	r3, [sp, #36]	; 0x24
   104a0:	9306      	strpl	r3, [sp, #24]
   104a2:	f1ba 0f00 	cmp.w	sl, #0
   104a6:	db3c      	blt.n	10522 <_dtoa_r+0x22a>
   104a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   104aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   104ae:	4453      	add	r3, sl
   104b0:	9309      	str	r3, [sp, #36]	; 0x24
   104b2:	2300      	movs	r3, #0
   104b4:	930a      	str	r3, [sp, #40]	; 0x28
   104b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   104b8:	2b09      	cmp	r3, #9
   104ba:	f200 80b5 	bhi.w	10628 <_dtoa_r+0x330>
   104be:	2b05      	cmp	r3, #5
   104c0:	bfc4      	itt	gt
   104c2:	3b04      	subgt	r3, #4
   104c4:	9322      	strgt	r3, [sp, #136]	; 0x88
   104c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   104c8:	f1a3 0302 	sub.w	r3, r3, #2
   104cc:	bfcc      	ite	gt
   104ce:	2400      	movgt	r4, #0
   104d0:	2401      	movle	r4, #1
   104d2:	2b03      	cmp	r3, #3
   104d4:	f200 80b4 	bhi.w	10640 <_dtoa_r+0x348>
   104d8:	e8df f003 	tbb	[pc, r3]
   104dc:	a47a982d 	.word	0xa47a982d
   104e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
   104e4:	441c      	add	r4, r3
   104e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
   104ea:	2b20      	cmp	r3, #32
   104ec:	bfc3      	ittte	gt
   104ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   104f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
   104f6:	fa09 f303 	lslgt.w	r3, r9, r3
   104fa:	f1c3 0320 	rsble	r3, r3, #32
   104fe:	bfc6      	itte	gt
   10500:	fa26 f000 	lsrgt.w	r0, r6, r0
   10504:	4318      	orrgt	r0, r3
   10506:	fa06 f003 	lslle.w	r0, r6, r3
   1050a:	f7ef ff8b 	bl	424 <__aeabi_ui2d>
   1050e:	2301      	movs	r3, #1
   10510:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   10514:	3c01      	subs	r4, #1
   10516:	9313      	str	r3, [sp, #76]	; 0x4c
   10518:	e770      	b.n	103fc <_dtoa_r+0x104>
   1051a:	2301      	movs	r3, #1
   1051c:	e7b3      	b.n	10486 <_dtoa_r+0x18e>
   1051e:	900f      	str	r0, [sp, #60]	; 0x3c
   10520:	e7b2      	b.n	10488 <_dtoa_r+0x190>
   10522:	9b06      	ldr	r3, [sp, #24]
   10524:	eba3 030a 	sub.w	r3, r3, sl
   10528:	9306      	str	r3, [sp, #24]
   1052a:	f1ca 0300 	rsb	r3, sl, #0
   1052e:	930a      	str	r3, [sp, #40]	; 0x28
   10530:	2300      	movs	r3, #0
   10532:	930e      	str	r3, [sp, #56]	; 0x38
   10534:	e7bf      	b.n	104b6 <_dtoa_r+0x1be>
   10536:	2300      	movs	r3, #0
   10538:	930b      	str	r3, [sp, #44]	; 0x2c
   1053a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1053c:	2b00      	cmp	r3, #0
   1053e:	f300 8082 	bgt.w	10646 <_dtoa_r+0x34e>
   10542:	f04f 0901 	mov.w	r9, #1
   10546:	f8cd 9020 	str.w	r9, [sp, #32]
   1054a:	464b      	mov	r3, r9
   1054c:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   10550:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   10552:	2200      	movs	r2, #0
   10554:	6072      	str	r2, [r6, #4]
   10556:	2204      	movs	r2, #4
   10558:	f102 0014 	add.w	r0, r2, #20
   1055c:	4298      	cmp	r0, r3
   1055e:	6871      	ldr	r1, [r6, #4]
   10560:	d977      	bls.n	10652 <_dtoa_r+0x35a>
   10562:	4628      	mov	r0, r5
   10564:	f020 fc29 	bl	30dba <_Balloc>
   10568:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1056a:	6030      	str	r0, [r6, #0]
   1056c:	681b      	ldr	r3, [r3, #0]
   1056e:	9303      	str	r3, [sp, #12]
   10570:	9b08      	ldr	r3, [sp, #32]
   10572:	2b0e      	cmp	r3, #14
   10574:	f200 80ee 	bhi.w	10754 <_dtoa_r+0x45c>
   10578:	2c00      	cmp	r4, #0
   1057a:	f000 80eb 	beq.w	10754 <_dtoa_r+0x45c>
   1057e:	f1ba 0f00 	cmp.w	sl, #0
   10582:	dd7a      	ble.n	1067a <_dtoa_r+0x382>
   10584:	4a1f      	ldr	r2, [pc, #124]	; (10604 <_dtoa_r+0x30c>)
   10586:	f00a 030f 	and.w	r3, sl, #15
   1058a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1058e:	e9d3 3400 	ldrd	r3, r4, [r3]
   10592:	f41a 7f80 	tst.w	sl, #256	; 0x100
   10596:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   1059a:	ea4f 142a 	mov.w	r4, sl, asr #4
   1059e:	d05c      	beq.n	1065a <_dtoa_r+0x362>
   105a0:	4b19      	ldr	r3, [pc, #100]	; (10608 <_dtoa_r+0x310>)
   105a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   105a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   105aa:	f7f0 f8df 	bl	76c <__aeabi_ddiv>
   105ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
   105b2:	f004 040f 	and.w	r4, r4, #15
   105b6:	2703      	movs	r7, #3
   105b8:	4e13      	ldr	r6, [pc, #76]	; (10608 <_dtoa_r+0x310>)
   105ba:	2c00      	cmp	r4, #0
   105bc:	d14f      	bne.n	1065e <_dtoa_r+0x366>
   105be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   105c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   105c6:	f7f0 f8d1 	bl	76c <__aeabi_ddiv>
   105ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
   105ce:	e06e      	b.n	106ae <_dtoa_r+0x3b6>
   105d0:	2301      	movs	r3, #1
   105d2:	e7b1      	b.n	10538 <_dtoa_r+0x240>
   105d4:	f3af 8000 	nop.w
   105d8:	636f4361 	.word	0x636f4361
   105dc:	3fd287a7 	.word	0x3fd287a7
   105e0:	8b60c8b3 	.word	0x8b60c8b3
   105e4:	3fc68a28 	.word	0x3fc68a28
   105e8:	509f79fb 	.word	0x509f79fb
   105ec:	3fd34413 	.word	0x3fd34413
   105f0:	7ff00000 	.word	0x7ff00000
   105f4:	00036876 	.word	0x00036876
   105f8:	0003686d 	.word	0x0003686d
   105fc:	0003684a 	.word	0x0003684a
   10600:	3ff80000 	.word	0x3ff80000
   10604:	00031b30 	.word	0x00031b30
   10608:	00031b08 	.word	0x00031b08
   1060c:	2300      	movs	r3, #0
   1060e:	930b      	str	r3, [sp, #44]	; 0x2c
   10610:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10612:	eb0a 0903 	add.w	r9, sl, r3
   10616:	f109 0301 	add.w	r3, r9, #1
   1061a:	2b01      	cmp	r3, #1
   1061c:	9308      	str	r3, [sp, #32]
   1061e:	bfb8      	it	lt
   10620:	2301      	movlt	r3, #1
   10622:	e795      	b.n	10550 <_dtoa_r+0x258>
   10624:	2301      	movs	r3, #1
   10626:	e7f2      	b.n	1060e <_dtoa_r+0x316>
   10628:	2401      	movs	r4, #1
   1062a:	2300      	movs	r3, #0
   1062c:	9322      	str	r3, [sp, #136]	; 0x88
   1062e:	940b      	str	r4, [sp, #44]	; 0x2c
   10630:	f04f 39ff 	mov.w	r9, #4294967295
   10634:	2200      	movs	r2, #0
   10636:	f8cd 9020 	str.w	r9, [sp, #32]
   1063a:	2312      	movs	r3, #18
   1063c:	9223      	str	r2, [sp, #140]	; 0x8c
   1063e:	e787      	b.n	10550 <_dtoa_r+0x258>
   10640:	2301      	movs	r3, #1
   10642:	930b      	str	r3, [sp, #44]	; 0x2c
   10644:	e7f4      	b.n	10630 <_dtoa_r+0x338>
   10646:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
   1064a:	f8cd 9020 	str.w	r9, [sp, #32]
   1064e:	464b      	mov	r3, r9
   10650:	e77e      	b.n	10550 <_dtoa_r+0x258>
   10652:	3101      	adds	r1, #1
   10654:	6071      	str	r1, [r6, #4]
   10656:	0052      	lsls	r2, r2, #1
   10658:	e77e      	b.n	10558 <_dtoa_r+0x260>
   1065a:	2702      	movs	r7, #2
   1065c:	e7ac      	b.n	105b8 <_dtoa_r+0x2c0>
   1065e:	07e1      	lsls	r1, r4, #31
   10660:	d508      	bpl.n	10674 <_dtoa_r+0x37c>
   10662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10666:	e9d6 2300 	ldrd	r2, r3, [r6]
   1066a:	f7ef ff55 	bl	518 <__aeabi_dmul>
   1066e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10672:	3701      	adds	r7, #1
   10674:	1064      	asrs	r4, r4, #1
   10676:	3608      	adds	r6, #8
   10678:	e79f      	b.n	105ba <_dtoa_r+0x2c2>
   1067a:	f000 80a5 	beq.w	107c8 <_dtoa_r+0x4d0>
   1067e:	f1ca 0400 	rsb	r4, sl, #0
   10682:	4ba4      	ldr	r3, [pc, #656]	; (10914 <_dtoa_r+0x61c>)
   10684:	4ea4      	ldr	r6, [pc, #656]	; (10918 <_dtoa_r+0x620>)
   10686:	f004 020f 	and.w	r2, r4, #15
   1068a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1068e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   10696:	f7ef ff3f 	bl	518 <__aeabi_dmul>
   1069a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1069e:	1124      	asrs	r4, r4, #4
   106a0:	2300      	movs	r3, #0
   106a2:	2702      	movs	r7, #2
   106a4:	2c00      	cmp	r4, #0
   106a6:	f040 8084 	bne.w	107b2 <_dtoa_r+0x4ba>
   106aa:	2b00      	cmp	r3, #0
   106ac:	d18d      	bne.n	105ca <_dtoa_r+0x2d2>
   106ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   106b0:	2b00      	cmp	r3, #0
   106b2:	f000 808b 	beq.w	107cc <_dtoa_r+0x4d4>
   106b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   106ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   106be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   106c2:	4b96      	ldr	r3, [pc, #600]	; (1091c <_dtoa_r+0x624>)
   106c4:	2200      	movs	r2, #0
   106c6:	f7f0 fb63 	bl	d90 <__aeabi_dcmplt>
   106ca:	2800      	cmp	r0, #0
   106cc:	d07e      	beq.n	107cc <_dtoa_r+0x4d4>
   106ce:	9b08      	ldr	r3, [sp, #32]
   106d0:	2b00      	cmp	r3, #0
   106d2:	d07b      	beq.n	107cc <_dtoa_r+0x4d4>
   106d4:	f1b9 0f00 	cmp.w	r9, #0
   106d8:	dd38      	ble.n	1074c <_dtoa_r+0x454>
   106da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   106de:	4b90      	ldr	r3, [pc, #576]	; (10920 <_dtoa_r+0x628>)
   106e0:	2200      	movs	r2, #0
   106e2:	f7ef ff19 	bl	518 <__aeabi_dmul>
   106e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   106ea:	f10a 38ff 	add.w	r8, sl, #4294967295
   106ee:	3701      	adds	r7, #1
   106f0:	464c      	mov	r4, r9
   106f2:	4638      	mov	r0, r7
   106f4:	f7ef fea6 	bl	444 <__aeabi_i2d>
   106f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   106fc:	f7ef ff0c 	bl	518 <__aeabi_dmul>
   10700:	4b88      	ldr	r3, [pc, #544]	; (10924 <_dtoa_r+0x62c>)
   10702:	2200      	movs	r2, #0
   10704:	f7ef fd52 	bl	1ac <__adddf3>
   10708:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1070c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10710:	9611      	str	r6, [sp, #68]	; 0x44
   10712:	2c00      	cmp	r4, #0
   10714:	d15d      	bne.n	107d2 <_dtoa_r+0x4da>
   10716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1071a:	4b83      	ldr	r3, [pc, #524]	; (10928 <_dtoa_r+0x630>)
   1071c:	2200      	movs	r2, #0
   1071e:	f7ef fd43 	bl	1a8 <__aeabi_dsub>
   10722:	4602      	mov	r2, r0
   10724:	460b      	mov	r3, r1
   10726:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1072a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1072c:	4633      	mov	r3, r6
   1072e:	f7f0 fb4d 	bl	dcc <__aeabi_dcmpgt>
   10732:	2800      	cmp	r0, #0
   10734:	f040 8297 	bne.w	10c66 <_dtoa_r+0x96e>
   10738:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1073c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1073e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   10742:	f7f0 fb25 	bl	d90 <__aeabi_dcmplt>
   10746:	2800      	cmp	r0, #0
   10748:	f040 828b 	bne.w	10c62 <_dtoa_r+0x96a>
   1074c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   10750:	e9cd 3404 	strd	r3, r4, [sp, #16]
   10754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10756:	2b00      	cmp	r3, #0
   10758:	f2c0 8151 	blt.w	109fe <_dtoa_r+0x706>
   1075c:	f1ba 0f0e 	cmp.w	sl, #14
   10760:	f300 814d 	bgt.w	109fe <_dtoa_r+0x706>
   10764:	4b6b      	ldr	r3, [pc, #428]	; (10914 <_dtoa_r+0x61c>)
   10766:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1076a:	e9d3 3400 	ldrd	r3, r4, [r3]
   1076e:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10774:	2b00      	cmp	r3, #0
   10776:	f280 80db 	bge.w	10930 <_dtoa_r+0x638>
   1077a:	9b08      	ldr	r3, [sp, #32]
   1077c:	2b00      	cmp	r3, #0
   1077e:	f300 80d7 	bgt.w	10930 <_dtoa_r+0x638>
   10782:	f040 826d 	bne.w	10c60 <_dtoa_r+0x968>
   10786:	4b68      	ldr	r3, [pc, #416]	; (10928 <_dtoa_r+0x630>)
   10788:	2200      	movs	r2, #0
   1078a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1078e:	f7ef fec3 	bl	518 <__aeabi_dmul>
   10792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10796:	f7f0 fb0f 	bl	db8 <__aeabi_dcmpge>
   1079a:	9c08      	ldr	r4, [sp, #32]
   1079c:	4626      	mov	r6, r4
   1079e:	2800      	cmp	r0, #0
   107a0:	f040 8243 	bne.w	10c2a <_dtoa_r+0x932>
   107a4:	9f03      	ldr	r7, [sp, #12]
   107a6:	2331      	movs	r3, #49	; 0x31
   107a8:	f807 3b01 	strb.w	r3, [r7], #1
   107ac:	f10a 0a01 	add.w	sl, sl, #1
   107b0:	e23f      	b.n	10c32 <_dtoa_r+0x93a>
   107b2:	07e2      	lsls	r2, r4, #31
   107b4:	d505      	bpl.n	107c2 <_dtoa_r+0x4ca>
   107b6:	e9d6 2300 	ldrd	r2, r3, [r6]
   107ba:	f7ef fead 	bl	518 <__aeabi_dmul>
   107be:	3701      	adds	r7, #1
   107c0:	2301      	movs	r3, #1
   107c2:	1064      	asrs	r4, r4, #1
   107c4:	3608      	adds	r6, #8
   107c6:	e76d      	b.n	106a4 <_dtoa_r+0x3ac>
   107c8:	2702      	movs	r7, #2
   107ca:	e770      	b.n	106ae <_dtoa_r+0x3b6>
   107cc:	9c08      	ldr	r4, [sp, #32]
   107ce:	46d0      	mov	r8, sl
   107d0:	e78f      	b.n	106f2 <_dtoa_r+0x3fa>
   107d2:	9903      	ldr	r1, [sp, #12]
   107d4:	4b4f      	ldr	r3, [pc, #316]	; (10914 <_dtoa_r+0x61c>)
   107d6:	4421      	add	r1, r4
   107d8:	9112      	str	r1, [sp, #72]	; 0x48
   107da:	990b      	ldr	r1, [sp, #44]	; 0x2c
   107dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   107e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   107e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   107e8:	2900      	cmp	r1, #0
   107ea:	d046      	beq.n	1087a <_dtoa_r+0x582>
   107ec:	494f      	ldr	r1, [pc, #316]	; (1092c <_dtoa_r+0x634>)
   107ee:	2000      	movs	r0, #0
   107f0:	f7ef ffbc 	bl	76c <__aeabi_ddiv>
   107f4:	463b      	mov	r3, r7
   107f6:	4632      	mov	r2, r6
   107f8:	f7ef fcd6 	bl	1a8 <__aeabi_dsub>
   107fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10800:	9f03      	ldr	r7, [sp, #12]
   10802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10806:	f7f0 fb01 	bl	e0c <__aeabi_d2iz>
   1080a:	4604      	mov	r4, r0
   1080c:	f7ef fe1a 	bl	444 <__aeabi_i2d>
   10810:	4602      	mov	r2, r0
   10812:	460b      	mov	r3, r1
   10814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10818:	f7ef fcc6 	bl	1a8 <__aeabi_dsub>
   1081c:	3430      	adds	r4, #48	; 0x30
   1081e:	4602      	mov	r2, r0
   10820:	460b      	mov	r3, r1
   10822:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10826:	f807 4b01 	strb.w	r4, [r7], #1
   1082a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1082e:	f7f0 faaf 	bl	d90 <__aeabi_dcmplt>
   10832:	2800      	cmp	r0, #0
   10834:	d165      	bne.n	10902 <_dtoa_r+0x60a>
   10836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1083a:	4938      	ldr	r1, [pc, #224]	; (1091c <_dtoa_r+0x624>)
   1083c:	2000      	movs	r0, #0
   1083e:	f7ef fcb3 	bl	1a8 <__aeabi_dsub>
   10842:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   10846:	f7f0 faa3 	bl	d90 <__aeabi_dcmplt>
   1084a:	2800      	cmp	r0, #0
   1084c:	f040 80b6 	bne.w	109bc <_dtoa_r+0x6c4>
   10850:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10852:	429f      	cmp	r7, r3
   10854:	f43f af7a 	beq.w	1074c <_dtoa_r+0x454>
   10858:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1085c:	4b30      	ldr	r3, [pc, #192]	; (10920 <_dtoa_r+0x628>)
   1085e:	2200      	movs	r2, #0
   10860:	f7ef fe5a 	bl	518 <__aeabi_dmul>
   10864:	4b2e      	ldr	r3, [pc, #184]	; (10920 <_dtoa_r+0x628>)
   10866:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1086a:	2200      	movs	r2, #0
   1086c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10870:	f7ef fe52 	bl	518 <__aeabi_dmul>
   10874:	e9cd 0104 	strd	r0, r1, [sp, #16]
   10878:	e7c3      	b.n	10802 <_dtoa_r+0x50a>
   1087a:	4630      	mov	r0, r6
   1087c:	4639      	mov	r1, r7
   1087e:	f7ef fe4b 	bl	518 <__aeabi_dmul>
   10882:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10886:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10888:	9c03      	ldr	r4, [sp, #12]
   1088a:	9314      	str	r3, [sp, #80]	; 0x50
   1088c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10890:	f7f0 fabc 	bl	e0c <__aeabi_d2iz>
   10894:	9015      	str	r0, [sp, #84]	; 0x54
   10896:	f7ef fdd5 	bl	444 <__aeabi_i2d>
   1089a:	4602      	mov	r2, r0
   1089c:	460b      	mov	r3, r1
   1089e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   108a2:	f7ef fc81 	bl	1a8 <__aeabi_dsub>
   108a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   108a8:	3330      	adds	r3, #48	; 0x30
   108aa:	f804 3b01 	strb.w	r3, [r4], #1
   108ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   108b0:	429c      	cmp	r4, r3
   108b2:	4606      	mov	r6, r0
   108b4:	460f      	mov	r7, r1
   108b6:	f04f 0200 	mov.w	r2, #0
   108ba:	d124      	bne.n	10906 <_dtoa_r+0x60e>
   108bc:	4b1b      	ldr	r3, [pc, #108]	; (1092c <_dtoa_r+0x634>)
   108be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   108c2:	f7ef fc73 	bl	1ac <__adddf3>
   108c6:	4602      	mov	r2, r0
   108c8:	460b      	mov	r3, r1
   108ca:	4630      	mov	r0, r6
   108cc:	4639      	mov	r1, r7
   108ce:	f7f0 fa7d 	bl	dcc <__aeabi_dcmpgt>
   108d2:	2800      	cmp	r0, #0
   108d4:	d171      	bne.n	109ba <_dtoa_r+0x6c2>
   108d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   108da:	4914      	ldr	r1, [pc, #80]	; (1092c <_dtoa_r+0x634>)
   108dc:	2000      	movs	r0, #0
   108de:	f7ef fc63 	bl	1a8 <__aeabi_dsub>
   108e2:	4602      	mov	r2, r0
   108e4:	460b      	mov	r3, r1
   108e6:	4630      	mov	r0, r6
   108e8:	4639      	mov	r1, r7
   108ea:	f7f0 fa51 	bl	d90 <__aeabi_dcmplt>
   108ee:	2800      	cmp	r0, #0
   108f0:	f43f af2c 	beq.w	1074c <_dtoa_r+0x454>
   108f4:	9f14      	ldr	r7, [sp, #80]	; 0x50
   108f6:	1e7b      	subs	r3, r7, #1
   108f8:	9314      	str	r3, [sp, #80]	; 0x50
   108fa:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   108fe:	2b30      	cmp	r3, #48	; 0x30
   10900:	d0f8      	beq.n	108f4 <_dtoa_r+0x5fc>
   10902:	46c2      	mov	sl, r8
   10904:	e049      	b.n	1099a <_dtoa_r+0x6a2>
   10906:	4b06      	ldr	r3, [pc, #24]	; (10920 <_dtoa_r+0x628>)
   10908:	f7ef fe06 	bl	518 <__aeabi_dmul>
   1090c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   10910:	e7bc      	b.n	1088c <_dtoa_r+0x594>
   10912:	bf00      	nop
   10914:	00031b30 	.word	0x00031b30
   10918:	00031b08 	.word	0x00031b08
   1091c:	3ff00000 	.word	0x3ff00000
   10920:	40240000 	.word	0x40240000
   10924:	401c0000 	.word	0x401c0000
   10928:	40140000 	.word	0x40140000
   1092c:	3fe00000 	.word	0x3fe00000
   10930:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   10934:	9f03      	ldr	r7, [sp, #12]
   10936:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1093a:	4640      	mov	r0, r8
   1093c:	4649      	mov	r1, r9
   1093e:	f7ef ff15 	bl	76c <__aeabi_ddiv>
   10942:	f7f0 fa63 	bl	e0c <__aeabi_d2iz>
   10946:	4604      	mov	r4, r0
   10948:	f7ef fd7c 	bl	444 <__aeabi_i2d>
   1094c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10950:	f7ef fde2 	bl	518 <__aeabi_dmul>
   10954:	f104 0630 	add.w	r6, r4, #48	; 0x30
   10958:	460b      	mov	r3, r1
   1095a:	4602      	mov	r2, r0
   1095c:	4649      	mov	r1, r9
   1095e:	4640      	mov	r0, r8
   10960:	f7ef fc22 	bl	1a8 <__aeabi_dsub>
   10964:	f807 6b01 	strb.w	r6, [r7], #1
   10968:	9e03      	ldr	r6, [sp, #12]
   1096a:	9b08      	ldr	r3, [sp, #32]
   1096c:	1bbe      	subs	r6, r7, r6
   1096e:	42b3      	cmp	r3, r6
   10970:	d138      	bne.n	109e4 <_dtoa_r+0x6ec>
   10972:	4602      	mov	r2, r0
   10974:	460b      	mov	r3, r1
   10976:	f7ef fc19 	bl	1ac <__adddf3>
   1097a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1097e:	4680      	mov	r8, r0
   10980:	4689      	mov	r9, r1
   10982:	f7f0 fa23 	bl	dcc <__aeabi_dcmpgt>
   10986:	bb58      	cbnz	r0, 109e0 <_dtoa_r+0x6e8>
   10988:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1098c:	4640      	mov	r0, r8
   1098e:	4649      	mov	r1, r9
   10990:	f7f0 f9f4 	bl	d7c <__aeabi_dcmpeq>
   10994:	b108      	cbz	r0, 1099a <_dtoa_r+0x6a2>
   10996:	07e1      	lsls	r1, r4, #31
   10998:	d422      	bmi.n	109e0 <_dtoa_r+0x6e8>
   1099a:	4628      	mov	r0, r5
   1099c:	4659      	mov	r1, fp
   1099e:	f020 fa40 	bl	30e22 <_Bfree>
   109a2:	2300      	movs	r3, #0
   109a4:	703b      	strb	r3, [r7, #0]
   109a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   109a8:	f10a 0001 	add.w	r0, sl, #1
   109ac:	6018      	str	r0, [r3, #0]
   109ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   109b0:	2b00      	cmp	r3, #0
   109b2:	f43f ace7 	beq.w	10384 <_dtoa_r+0x8c>
   109b6:	601f      	str	r7, [r3, #0]
   109b8:	e4e4      	b.n	10384 <_dtoa_r+0x8c>
   109ba:	4627      	mov	r7, r4
   109bc:	463b      	mov	r3, r7
   109be:	461f      	mov	r7, r3
   109c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   109c4:	2a39      	cmp	r2, #57	; 0x39
   109c6:	d107      	bne.n	109d8 <_dtoa_r+0x6e0>
   109c8:	9a03      	ldr	r2, [sp, #12]
   109ca:	429a      	cmp	r2, r3
   109cc:	d1f7      	bne.n	109be <_dtoa_r+0x6c6>
   109ce:	9903      	ldr	r1, [sp, #12]
   109d0:	2230      	movs	r2, #48	; 0x30
   109d2:	f108 0801 	add.w	r8, r8, #1
   109d6:	700a      	strb	r2, [r1, #0]
   109d8:	781a      	ldrb	r2, [r3, #0]
   109da:	3201      	adds	r2, #1
   109dc:	701a      	strb	r2, [r3, #0]
   109de:	e790      	b.n	10902 <_dtoa_r+0x60a>
   109e0:	46d0      	mov	r8, sl
   109e2:	e7eb      	b.n	109bc <_dtoa_r+0x6c4>
   109e4:	4ba1      	ldr	r3, [pc, #644]	; (10c6c <_dtoa_r+0x974>)
   109e6:	2200      	movs	r2, #0
   109e8:	f7ef fd96 	bl	518 <__aeabi_dmul>
   109ec:	2200      	movs	r2, #0
   109ee:	2300      	movs	r3, #0
   109f0:	4680      	mov	r8, r0
   109f2:	4689      	mov	r9, r1
   109f4:	f7f0 f9c2 	bl	d7c <__aeabi_dcmpeq>
   109f8:	2800      	cmp	r0, #0
   109fa:	d09c      	beq.n	10936 <_dtoa_r+0x63e>
   109fc:	e7cd      	b.n	1099a <_dtoa_r+0x6a2>
   109fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10a00:	2a00      	cmp	r2, #0
   10a02:	f000 80cd 	beq.w	10ba0 <_dtoa_r+0x8a8>
   10a06:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10a08:	2a01      	cmp	r2, #1
   10a0a:	f300 80af 	bgt.w	10b6c <_dtoa_r+0x874>
   10a0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10a10:	2a00      	cmp	r2, #0
   10a12:	f000 80a7 	beq.w	10b64 <_dtoa_r+0x86c>
   10a16:	f203 4333 	addw	r3, r3, #1075	; 0x433
   10a1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10a1c:	9f06      	ldr	r7, [sp, #24]
   10a1e:	9a06      	ldr	r2, [sp, #24]
   10a20:	441a      	add	r2, r3
   10a22:	9206      	str	r2, [sp, #24]
   10a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a26:	2101      	movs	r1, #1
   10a28:	441a      	add	r2, r3
   10a2a:	4628      	mov	r0, r5
   10a2c:	9209      	str	r2, [sp, #36]	; 0x24
   10a2e:	f020 fa9b 	bl	30f68 <__i2b>
   10a32:	4606      	mov	r6, r0
   10a34:	2f00      	cmp	r7, #0
   10a36:	dd0c      	ble.n	10a52 <_dtoa_r+0x75a>
   10a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a3a:	2b00      	cmp	r3, #0
   10a3c:	dd09      	ble.n	10a52 <_dtoa_r+0x75a>
   10a3e:	42bb      	cmp	r3, r7
   10a40:	9a06      	ldr	r2, [sp, #24]
   10a42:	bfa8      	it	ge
   10a44:	463b      	movge	r3, r7
   10a46:	1ad2      	subs	r2, r2, r3
   10a48:	9206      	str	r2, [sp, #24]
   10a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a4c:	1aff      	subs	r7, r7, r3
   10a4e:	1ad3      	subs	r3, r2, r3
   10a50:	9309      	str	r3, [sp, #36]	; 0x24
   10a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a54:	b1f3      	cbz	r3, 10a94 <_dtoa_r+0x79c>
   10a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a58:	2b00      	cmp	r3, #0
   10a5a:	f000 80a5 	beq.w	10ba8 <_dtoa_r+0x8b0>
   10a5e:	2c00      	cmp	r4, #0
   10a60:	dd10      	ble.n	10a84 <_dtoa_r+0x78c>
   10a62:	4631      	mov	r1, r6
   10a64:	4622      	mov	r2, r4
   10a66:	4628      	mov	r0, r5
   10a68:	f01a fe30 	bl	2b6cc <__pow5mult>
   10a6c:	465a      	mov	r2, fp
   10a6e:	4601      	mov	r1, r0
   10a70:	4606      	mov	r6, r0
   10a72:	4628      	mov	r0, r5
   10a74:	f020 fa81 	bl	30f7a <__multiply>
   10a78:	4659      	mov	r1, fp
   10a7a:	4680      	mov	r8, r0
   10a7c:	4628      	mov	r0, r5
   10a7e:	f020 f9d0 	bl	30e22 <_Bfree>
   10a82:	46c3      	mov	fp, r8
   10a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a86:	1b1a      	subs	r2, r3, r4
   10a88:	d004      	beq.n	10a94 <_dtoa_r+0x79c>
   10a8a:	4659      	mov	r1, fp
   10a8c:	4628      	mov	r0, r5
   10a8e:	f01a fe1d 	bl	2b6cc <__pow5mult>
   10a92:	4683      	mov	fp, r0
   10a94:	2101      	movs	r1, #1
   10a96:	4628      	mov	r0, r5
   10a98:	f020 fa66 	bl	30f68 <__i2b>
   10a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a9e:	2b00      	cmp	r3, #0
   10aa0:	4604      	mov	r4, r0
   10aa2:	f340 8083 	ble.w	10bac <_dtoa_r+0x8b4>
   10aa6:	461a      	mov	r2, r3
   10aa8:	4601      	mov	r1, r0
   10aaa:	4628      	mov	r0, r5
   10aac:	f01a fe0e 	bl	2b6cc <__pow5mult>
   10ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10ab2:	2b01      	cmp	r3, #1
   10ab4:	4604      	mov	r4, r0
   10ab6:	dd7c      	ble.n	10bb2 <_dtoa_r+0x8ba>
   10ab8:	f04f 0800 	mov.w	r8, #0
   10abc:	6923      	ldr	r3, [r4, #16]
   10abe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   10ac2:	6918      	ldr	r0, [r3, #16]
   10ac4:	f020 fa02 	bl	30ecc <__hi0bits>
   10ac8:	f1c0 0020 	rsb	r0, r0, #32
   10acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ace:	4418      	add	r0, r3
   10ad0:	f010 001f 	ands.w	r0, r0, #31
   10ad4:	f000 808e 	beq.w	10bf4 <_dtoa_r+0x8fc>
   10ad8:	f1c0 0320 	rsb	r3, r0, #32
   10adc:	2b04      	cmp	r3, #4
   10ade:	f340 8087 	ble.w	10bf0 <_dtoa_r+0x8f8>
   10ae2:	f1c0 001c 	rsb	r0, r0, #28
   10ae6:	9b06      	ldr	r3, [sp, #24]
   10ae8:	4403      	add	r3, r0
   10aea:	9306      	str	r3, [sp, #24]
   10aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10aee:	4403      	add	r3, r0
   10af0:	4407      	add	r7, r0
   10af2:	9309      	str	r3, [sp, #36]	; 0x24
   10af4:	9b06      	ldr	r3, [sp, #24]
   10af6:	2b00      	cmp	r3, #0
   10af8:	dd05      	ble.n	10b06 <_dtoa_r+0x80e>
   10afa:	4659      	mov	r1, fp
   10afc:	461a      	mov	r2, r3
   10afe:	4628      	mov	r0, r5
   10b00:	f020 fad7 	bl	310b2 <__lshift>
   10b04:	4683      	mov	fp, r0
   10b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10b08:	2b00      	cmp	r3, #0
   10b0a:	dd05      	ble.n	10b18 <_dtoa_r+0x820>
   10b0c:	4621      	mov	r1, r4
   10b0e:	461a      	mov	r2, r3
   10b10:	4628      	mov	r0, r5
   10b12:	f020 face 	bl	310b2 <__lshift>
   10b16:	4604      	mov	r4, r0
   10b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10b1a:	2b00      	cmp	r3, #0
   10b1c:	d06c      	beq.n	10bf8 <_dtoa_r+0x900>
   10b1e:	4621      	mov	r1, r4
   10b20:	4658      	mov	r0, fp
   10b22:	f020 fb25 	bl	31170 <__mcmp>
   10b26:	2800      	cmp	r0, #0
   10b28:	da66      	bge.n	10bf8 <_dtoa_r+0x900>
   10b2a:	2300      	movs	r3, #0
   10b2c:	4659      	mov	r1, fp
   10b2e:	220a      	movs	r2, #10
   10b30:	4628      	mov	r0, r5
   10b32:	f020 f98d 	bl	30e50 <__multadd>
   10b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10b38:	f10a 3aff 	add.w	sl, sl, #4294967295
   10b3c:	4683      	mov	fp, r0
   10b3e:	2b00      	cmp	r3, #0
   10b40:	f000 818b 	beq.w	10e5a <_dtoa_r+0xb62>
   10b44:	4631      	mov	r1, r6
   10b46:	2300      	movs	r3, #0
   10b48:	220a      	movs	r2, #10
   10b4a:	4628      	mov	r0, r5
   10b4c:	f020 f980 	bl	30e50 <__multadd>
   10b50:	f1b9 0f00 	cmp.w	r9, #0
   10b54:	4606      	mov	r6, r0
   10b56:	f300 8091 	bgt.w	10c7c <_dtoa_r+0x984>
   10b5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10b5c:	2b02      	cmp	r3, #2
   10b5e:	f340 808d 	ble.w	10c7c <_dtoa_r+0x984>
   10b62:	e051      	b.n	10c08 <_dtoa_r+0x910>
   10b64:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10b66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   10b6a:	e756      	b.n	10a1a <_dtoa_r+0x722>
   10b6c:	9b08      	ldr	r3, [sp, #32]
   10b6e:	1e5c      	subs	r4, r3, #1
   10b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10b72:	42a3      	cmp	r3, r4
   10b74:	bfbf      	itttt	lt
   10b76:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
   10b78:	940a      	strlt	r4, [sp, #40]	; 0x28
   10b7a:	1ae2      	sublt	r2, r4, r3
   10b7c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   10b7e:	bfb6      	itet	lt
   10b80:	189b      	addlt	r3, r3, r2
   10b82:	1b1c      	subge	r4, r3, r4
   10b84:	930e      	strlt	r3, [sp, #56]	; 0x38
   10b86:	9b08      	ldr	r3, [sp, #32]
   10b88:	bfb8      	it	lt
   10b8a:	2400      	movlt	r4, #0
   10b8c:	2b00      	cmp	r3, #0
   10b8e:	bfb9      	ittee	lt
   10b90:	9b06      	ldrlt	r3, [sp, #24]
   10b92:	9a08      	ldrlt	r2, [sp, #32]
   10b94:	9f06      	ldrge	r7, [sp, #24]
   10b96:	9b08      	ldrge	r3, [sp, #32]
   10b98:	bfbc      	itt	lt
   10b9a:	1a9f      	sublt	r7, r3, r2
   10b9c:	2300      	movlt	r3, #0
   10b9e:	e73e      	b.n	10a1e <_dtoa_r+0x726>
   10ba0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10ba2:	9f06      	ldr	r7, [sp, #24]
   10ba4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10ba6:	e745      	b.n	10a34 <_dtoa_r+0x73c>
   10ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10baa:	e76e      	b.n	10a8a <_dtoa_r+0x792>
   10bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10bae:	2b01      	cmp	r3, #1
   10bb0:	dc19      	bgt.n	10be6 <_dtoa_r+0x8ee>
   10bb2:	9b04      	ldr	r3, [sp, #16]
   10bb4:	b9bb      	cbnz	r3, 10be6 <_dtoa_r+0x8ee>
   10bb6:	9b05      	ldr	r3, [sp, #20]
   10bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   10bbc:	b99b      	cbnz	r3, 10be6 <_dtoa_r+0x8ee>
   10bbe:	9b05      	ldr	r3, [sp, #20]
   10bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   10bc4:	0d1b      	lsrs	r3, r3, #20
   10bc6:	051b      	lsls	r3, r3, #20
   10bc8:	b183      	cbz	r3, 10bec <_dtoa_r+0x8f4>
   10bca:	9b06      	ldr	r3, [sp, #24]
   10bcc:	3301      	adds	r3, #1
   10bce:	9306      	str	r3, [sp, #24]
   10bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10bd2:	3301      	adds	r3, #1
   10bd4:	9309      	str	r3, [sp, #36]	; 0x24
   10bd6:	f04f 0801 	mov.w	r8, #1
   10bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10bdc:	2b00      	cmp	r3, #0
   10bde:	f47f af6d 	bne.w	10abc <_dtoa_r+0x7c4>
   10be2:	2001      	movs	r0, #1
   10be4:	e772      	b.n	10acc <_dtoa_r+0x7d4>
   10be6:	f04f 0800 	mov.w	r8, #0
   10bea:	e7f6      	b.n	10bda <_dtoa_r+0x8e2>
   10bec:	4698      	mov	r8, r3
   10bee:	e7f4      	b.n	10bda <_dtoa_r+0x8e2>
   10bf0:	d080      	beq.n	10af4 <_dtoa_r+0x7fc>
   10bf2:	4618      	mov	r0, r3
   10bf4:	301c      	adds	r0, #28
   10bf6:	e776      	b.n	10ae6 <_dtoa_r+0x7ee>
   10bf8:	9b08      	ldr	r3, [sp, #32]
   10bfa:	2b00      	cmp	r3, #0
   10bfc:	dc38      	bgt.n	10c70 <_dtoa_r+0x978>
   10bfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10c00:	2b02      	cmp	r3, #2
   10c02:	dd35      	ble.n	10c70 <_dtoa_r+0x978>
   10c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
   10c08:	f1b9 0f00 	cmp.w	r9, #0
   10c0c:	d10d      	bne.n	10c2a <_dtoa_r+0x932>
   10c0e:	4621      	mov	r1, r4
   10c10:	464b      	mov	r3, r9
   10c12:	2205      	movs	r2, #5
   10c14:	4628      	mov	r0, r5
   10c16:	f020 f91b 	bl	30e50 <__multadd>
   10c1a:	4601      	mov	r1, r0
   10c1c:	4604      	mov	r4, r0
   10c1e:	4658      	mov	r0, fp
   10c20:	f020 faa6 	bl	31170 <__mcmp>
   10c24:	2800      	cmp	r0, #0
   10c26:	f73f adbd 	bgt.w	107a4 <_dtoa_r+0x4ac>
   10c2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10c2c:	9f03      	ldr	r7, [sp, #12]
   10c2e:	ea6f 0a03 	mvn.w	sl, r3
   10c32:	f04f 0800 	mov.w	r8, #0
   10c36:	4621      	mov	r1, r4
   10c38:	4628      	mov	r0, r5
   10c3a:	f020 f8f2 	bl	30e22 <_Bfree>
   10c3e:	2e00      	cmp	r6, #0
   10c40:	f43f aeab 	beq.w	1099a <_dtoa_r+0x6a2>
   10c44:	f1b8 0f00 	cmp.w	r8, #0
   10c48:	d005      	beq.n	10c56 <_dtoa_r+0x95e>
   10c4a:	45b0      	cmp	r8, r6
   10c4c:	d003      	beq.n	10c56 <_dtoa_r+0x95e>
   10c4e:	4641      	mov	r1, r8
   10c50:	4628      	mov	r0, r5
   10c52:	f020 f8e6 	bl	30e22 <_Bfree>
   10c56:	4631      	mov	r1, r6
   10c58:	4628      	mov	r0, r5
   10c5a:	f020 f8e2 	bl	30e22 <_Bfree>
   10c5e:	e69c      	b.n	1099a <_dtoa_r+0x6a2>
   10c60:	2400      	movs	r4, #0
   10c62:	4626      	mov	r6, r4
   10c64:	e7e1      	b.n	10c2a <_dtoa_r+0x932>
   10c66:	46c2      	mov	sl, r8
   10c68:	4626      	mov	r6, r4
   10c6a:	e59b      	b.n	107a4 <_dtoa_r+0x4ac>
   10c6c:	40240000 	.word	0x40240000
   10c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10c72:	f8dd 9020 	ldr.w	r9, [sp, #32]
   10c76:	2b00      	cmp	r3, #0
   10c78:	f000 80f6 	beq.w	10e68 <_dtoa_r+0xb70>
   10c7c:	2f00      	cmp	r7, #0
   10c7e:	dd05      	ble.n	10c8c <_dtoa_r+0x994>
   10c80:	4631      	mov	r1, r6
   10c82:	463a      	mov	r2, r7
   10c84:	4628      	mov	r0, r5
   10c86:	f020 fa14 	bl	310b2 <__lshift>
   10c8a:	4606      	mov	r6, r0
   10c8c:	f1b8 0f00 	cmp.w	r8, #0
   10c90:	d055      	beq.n	10d3e <_dtoa_r+0xa46>
   10c92:	6871      	ldr	r1, [r6, #4]
   10c94:	4628      	mov	r0, r5
   10c96:	f020 f890 	bl	30dba <_Balloc>
   10c9a:	6932      	ldr	r2, [r6, #16]
   10c9c:	3202      	adds	r2, #2
   10c9e:	4607      	mov	r7, r0
   10ca0:	0092      	lsls	r2, r2, #2
   10ca2:	f106 010c 	add.w	r1, r6, #12
   10ca6:	300c      	adds	r0, #12
   10ca8:	f01f fe02 	bl	308b0 <memcpy>
   10cac:	2201      	movs	r2, #1
   10cae:	4639      	mov	r1, r7
   10cb0:	4628      	mov	r0, r5
   10cb2:	f020 f9fe 	bl	310b2 <__lshift>
   10cb6:	9b03      	ldr	r3, [sp, #12]
   10cb8:	3301      	adds	r3, #1
   10cba:	9308      	str	r3, [sp, #32]
   10cbc:	9b03      	ldr	r3, [sp, #12]
   10cbe:	444b      	add	r3, r9
   10cc0:	930a      	str	r3, [sp, #40]	; 0x28
   10cc2:	9b04      	ldr	r3, [sp, #16]
   10cc4:	f003 0301 	and.w	r3, r3, #1
   10cc8:	46b0      	mov	r8, r6
   10cca:	9309      	str	r3, [sp, #36]	; 0x24
   10ccc:	4606      	mov	r6, r0
   10cce:	9b08      	ldr	r3, [sp, #32]
   10cd0:	4621      	mov	r1, r4
   10cd2:	3b01      	subs	r3, #1
   10cd4:	4658      	mov	r0, fp
   10cd6:	9304      	str	r3, [sp, #16]
   10cd8:	f01f ffaf 	bl	30c3a <quorem>
   10cdc:	4603      	mov	r3, r0
   10cde:	3330      	adds	r3, #48	; 0x30
   10ce0:	9006      	str	r0, [sp, #24]
   10ce2:	4641      	mov	r1, r8
   10ce4:	4658      	mov	r0, fp
   10ce6:	930b      	str	r3, [sp, #44]	; 0x2c
   10ce8:	f020 fa42 	bl	31170 <__mcmp>
   10cec:	4632      	mov	r2, r6
   10cee:	4681      	mov	r9, r0
   10cf0:	4621      	mov	r1, r4
   10cf2:	4628      	mov	r0, r5
   10cf4:	f020 fa57 	bl	311a6 <__mdiff>
   10cf8:	68c2      	ldr	r2, [r0, #12]
   10cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10cfc:	4607      	mov	r7, r0
   10cfe:	bb02      	cbnz	r2, 10d42 <_dtoa_r+0xa4a>
   10d00:	4601      	mov	r1, r0
   10d02:	4658      	mov	r0, fp
   10d04:	f020 fa34 	bl	31170 <__mcmp>
   10d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d0a:	4602      	mov	r2, r0
   10d0c:	4639      	mov	r1, r7
   10d0e:	4628      	mov	r0, r5
   10d10:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
   10d14:	f020 f885 	bl	30e22 <_Bfree>
   10d18:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10d1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10d1c:	9f08      	ldr	r7, [sp, #32]
   10d1e:	ea43 0102 	orr.w	r1, r3, r2
   10d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d24:	430b      	orrs	r3, r1
   10d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d28:	d10d      	bne.n	10d46 <_dtoa_r+0xa4e>
   10d2a:	2b39      	cmp	r3, #57	; 0x39
   10d2c:	d029      	beq.n	10d82 <_dtoa_r+0xa8a>
   10d2e:	f1b9 0f00 	cmp.w	r9, #0
   10d32:	dd01      	ble.n	10d38 <_dtoa_r+0xa40>
   10d34:	9b06      	ldr	r3, [sp, #24]
   10d36:	3331      	adds	r3, #49	; 0x31
   10d38:	9a04      	ldr	r2, [sp, #16]
   10d3a:	7013      	strb	r3, [r2, #0]
   10d3c:	e77b      	b.n	10c36 <_dtoa_r+0x93e>
   10d3e:	4630      	mov	r0, r6
   10d40:	e7b9      	b.n	10cb6 <_dtoa_r+0x9be>
   10d42:	2201      	movs	r2, #1
   10d44:	e7e2      	b.n	10d0c <_dtoa_r+0xa14>
   10d46:	f1b9 0f00 	cmp.w	r9, #0
   10d4a:	db06      	blt.n	10d5a <_dtoa_r+0xa62>
   10d4c:	9922      	ldr	r1, [sp, #136]	; 0x88
   10d4e:	ea41 0909 	orr.w	r9, r1, r9
   10d52:	9909      	ldr	r1, [sp, #36]	; 0x24
   10d54:	ea59 0101 	orrs.w	r1, r9, r1
   10d58:	d120      	bne.n	10d9c <_dtoa_r+0xaa4>
   10d5a:	2a00      	cmp	r2, #0
   10d5c:	ddec      	ble.n	10d38 <_dtoa_r+0xa40>
   10d5e:	4659      	mov	r1, fp
   10d60:	2201      	movs	r2, #1
   10d62:	4628      	mov	r0, r5
   10d64:	9308      	str	r3, [sp, #32]
   10d66:	f020 f9a4 	bl	310b2 <__lshift>
   10d6a:	4621      	mov	r1, r4
   10d6c:	4683      	mov	fp, r0
   10d6e:	f020 f9ff 	bl	31170 <__mcmp>
   10d72:	2800      	cmp	r0, #0
   10d74:	9b08      	ldr	r3, [sp, #32]
   10d76:	dc02      	bgt.n	10d7e <_dtoa_r+0xa86>
   10d78:	d1de      	bne.n	10d38 <_dtoa_r+0xa40>
   10d7a:	07da      	lsls	r2, r3, #31
   10d7c:	d5dc      	bpl.n	10d38 <_dtoa_r+0xa40>
   10d7e:	2b39      	cmp	r3, #57	; 0x39
   10d80:	d1d8      	bne.n	10d34 <_dtoa_r+0xa3c>
   10d82:	9a04      	ldr	r2, [sp, #16]
   10d84:	2339      	movs	r3, #57	; 0x39
   10d86:	7013      	strb	r3, [r2, #0]
   10d88:	463b      	mov	r3, r7
   10d8a:	461f      	mov	r7, r3
   10d8c:	3b01      	subs	r3, #1
   10d8e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   10d92:	2a39      	cmp	r2, #57	; 0x39
   10d94:	d050      	beq.n	10e38 <_dtoa_r+0xb40>
   10d96:	3201      	adds	r2, #1
   10d98:	701a      	strb	r2, [r3, #0]
   10d9a:	e74c      	b.n	10c36 <_dtoa_r+0x93e>
   10d9c:	2a00      	cmp	r2, #0
   10d9e:	dd03      	ble.n	10da8 <_dtoa_r+0xab0>
   10da0:	2b39      	cmp	r3, #57	; 0x39
   10da2:	d0ee      	beq.n	10d82 <_dtoa_r+0xa8a>
   10da4:	3301      	adds	r3, #1
   10da6:	e7c7      	b.n	10d38 <_dtoa_r+0xa40>
   10da8:	9a08      	ldr	r2, [sp, #32]
   10daa:	990a      	ldr	r1, [sp, #40]	; 0x28
   10dac:	f802 3c01 	strb.w	r3, [r2, #-1]
   10db0:	428a      	cmp	r2, r1
   10db2:	d02a      	beq.n	10e0a <_dtoa_r+0xb12>
   10db4:	4659      	mov	r1, fp
   10db6:	2300      	movs	r3, #0
   10db8:	220a      	movs	r2, #10
   10dba:	4628      	mov	r0, r5
   10dbc:	f020 f848 	bl	30e50 <__multadd>
   10dc0:	45b0      	cmp	r8, r6
   10dc2:	4683      	mov	fp, r0
   10dc4:	f04f 0300 	mov.w	r3, #0
   10dc8:	f04f 020a 	mov.w	r2, #10
   10dcc:	4641      	mov	r1, r8
   10dce:	4628      	mov	r0, r5
   10dd0:	d107      	bne.n	10de2 <_dtoa_r+0xaea>
   10dd2:	f020 f83d 	bl	30e50 <__multadd>
   10dd6:	4680      	mov	r8, r0
   10dd8:	4606      	mov	r6, r0
   10dda:	9b08      	ldr	r3, [sp, #32]
   10ddc:	3301      	adds	r3, #1
   10dde:	9308      	str	r3, [sp, #32]
   10de0:	e775      	b.n	10cce <_dtoa_r+0x9d6>
   10de2:	f020 f835 	bl	30e50 <__multadd>
   10de6:	4631      	mov	r1, r6
   10de8:	4680      	mov	r8, r0
   10dea:	2300      	movs	r3, #0
   10dec:	220a      	movs	r2, #10
   10dee:	4628      	mov	r0, r5
   10df0:	f020 f82e 	bl	30e50 <__multadd>
   10df4:	4606      	mov	r6, r0
   10df6:	e7f0      	b.n	10dda <_dtoa_r+0xae2>
   10df8:	f1b9 0f00 	cmp.w	r9, #0
   10dfc:	9a03      	ldr	r2, [sp, #12]
   10dfe:	bfcc      	ite	gt
   10e00:	464f      	movgt	r7, r9
   10e02:	2701      	movle	r7, #1
   10e04:	4417      	add	r7, r2
   10e06:	f04f 0800 	mov.w	r8, #0
   10e0a:	4659      	mov	r1, fp
   10e0c:	2201      	movs	r2, #1
   10e0e:	4628      	mov	r0, r5
   10e10:	9308      	str	r3, [sp, #32]
   10e12:	f020 f94e 	bl	310b2 <__lshift>
   10e16:	4621      	mov	r1, r4
   10e18:	4683      	mov	fp, r0
   10e1a:	f020 f9a9 	bl	31170 <__mcmp>
   10e1e:	2800      	cmp	r0, #0
   10e20:	dcb2      	bgt.n	10d88 <_dtoa_r+0xa90>
   10e22:	d102      	bne.n	10e2a <_dtoa_r+0xb32>
   10e24:	9b08      	ldr	r3, [sp, #32]
   10e26:	07db      	lsls	r3, r3, #31
   10e28:	d4ae      	bmi.n	10d88 <_dtoa_r+0xa90>
   10e2a:	463b      	mov	r3, r7
   10e2c:	461f      	mov	r7, r3
   10e2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   10e32:	2a30      	cmp	r2, #48	; 0x30
   10e34:	d0fa      	beq.n	10e2c <_dtoa_r+0xb34>
   10e36:	e6fe      	b.n	10c36 <_dtoa_r+0x93e>
   10e38:	9a03      	ldr	r2, [sp, #12]
   10e3a:	429a      	cmp	r2, r3
   10e3c:	d1a5      	bne.n	10d8a <_dtoa_r+0xa92>
   10e3e:	f10a 0a01 	add.w	sl, sl, #1
   10e42:	2331      	movs	r3, #49	; 0x31
   10e44:	e779      	b.n	10d3a <_dtoa_r+0xa42>
   10e46:	4b13      	ldr	r3, [pc, #76]	; (10e94 <_dtoa_r+0xb9c>)
   10e48:	f7ff babb 	b.w	103c2 <_dtoa_r+0xca>
   10e4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10e4e:	2b00      	cmp	r3, #0
   10e50:	f47f aa93 	bne.w	1037a <_dtoa_r+0x82>
   10e54:	4b10      	ldr	r3, [pc, #64]	; (10e98 <_dtoa_r+0xba0>)
   10e56:	f7ff bab4 	b.w	103c2 <_dtoa_r+0xca>
   10e5a:	f1b9 0f00 	cmp.w	r9, #0
   10e5e:	dc03      	bgt.n	10e68 <_dtoa_r+0xb70>
   10e60:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10e62:	2b02      	cmp	r3, #2
   10e64:	f73f aed0 	bgt.w	10c08 <_dtoa_r+0x910>
   10e68:	9f03      	ldr	r7, [sp, #12]
   10e6a:	4621      	mov	r1, r4
   10e6c:	4658      	mov	r0, fp
   10e6e:	f01f fee4 	bl	30c3a <quorem>
   10e72:	f100 0330 	add.w	r3, r0, #48	; 0x30
   10e76:	f807 3b01 	strb.w	r3, [r7], #1
   10e7a:	9a03      	ldr	r2, [sp, #12]
   10e7c:	1aba      	subs	r2, r7, r2
   10e7e:	4591      	cmp	r9, r2
   10e80:	ddba      	ble.n	10df8 <_dtoa_r+0xb00>
   10e82:	4659      	mov	r1, fp
   10e84:	2300      	movs	r3, #0
   10e86:	220a      	movs	r2, #10
   10e88:	4628      	mov	r0, r5
   10e8a:	f01f ffe1 	bl	30e50 <__multadd>
   10e8e:	4683      	mov	fp, r0
   10e90:	e7eb      	b.n	10e6a <_dtoa_r+0xb72>
   10e92:	bf00      	nop
   10e94:	00036849 	.word	0x00036849
   10e98:	0003686d 	.word	0x0003686d

00010e9c <on_data_received>:

bool bool_ESP_is_on = false;
/* Callbacks */

void on_data_received(struct bt_conn *conn, const uint8_t *const data, uint16_t len)
{
   10e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10ea0:	af00      	add	r7, sp, #0
   10ea2:	4680      	mov	r8, r0
   10ea4:	4615      	mov	r5, r2
	uint8_t temp_str[len+1];
   10ea6:	f102 0308 	add.w	r3, r2, #8
   10eaa:	08db      	lsrs	r3, r3, #3
   10eac:	4668      	mov	r0, sp
   10eae:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
   10eb2:	469d      	mov	sp, r3
   10eb4:	4668      	mov	r0, sp
   10eb6:	f01f fcfb 	bl	308b0 <memcpy>
	memcpy(temp_str, data, len);
	temp_str[len] = 0x00;
   10eba:	2600      	movs	r6, #0
   10ebc:	f80d 6005 	strb.w	r6, [sp, r5]

	printk("firsByte: %d\n", (temp_str[0] -48 ));
   10ec0:	f89d 1000 	ldrb.w	r1, [sp]
   10ec4:	3930      	subs	r1, #48	; 0x30
   10ec6:	4821      	ldr	r0, [pc, #132]	; (10f4c <on_data_received+0xb0>)
   10ec8:	f01b f93e 	bl	2c148 <printk>
	printk("secondByte: %d\n", (temp_str[1] -48 ));
   10ecc:	f89d 1001 	ldrb.w	r1, [sp, #1]
   10ed0:	3930      	subs	r1, #48	; 0x30
   10ed2:	481f      	ldr	r0, [pc, #124]	; (10f50 <on_data_received+0xb4>)
   10ed4:	f01b f938 	bl	2c148 <printk>

	setPoint = ((temp_str[0] -48 ) * 10) +(temp_str[1] -48 ) ;
   10ed8:	f89d 2000 	ldrb.w	r2, [sp]
   10edc:	f89d 3001 	ldrb.w	r3, [sp, #1]
   10ee0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   10ee4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   10ee8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
   10eec:	4c19      	ldr	r4, [pc, #100]	; (10f54 <on_data_received+0xb8>)
   10eee:	6023      	str	r3, [r4, #0]

	printk("dataLen: %d\n", len);
   10ef0:	4629      	mov	r1, r5
   10ef2:	4819      	ldr	r0, [pc, #100]	; (10f58 <on_data_received+0xbc>)
   10ef4:	f01b f928 	bl	2c148 <printk>

	printk("setPoint: %d\n", setPoint);
   10ef8:	6821      	ldr	r1, [r4, #0]
   10efa:	4818      	ldr	r0, [pc, #96]	; (10f5c <on_data_received+0xc0>)
   10efc:	f01b f924 	bl	2c148 <printk>
   10f00:	4c17      	ldr	r4, [pc, #92]	; (10f60 <on_data_received+0xc4>)
   10f02:	4b18      	ldr	r3, [pc, #96]	; (10f64 <on_data_received+0xc8>)
   10f04:	1ae4      	subs	r4, r4, r3
   10f06:	08e4      	lsrs	r4, r4, #3

	LOG_INF("Received data on conn %p. Len: %d", (void *)conn, len);
   10f08:	f04f 0903 	mov.w	r9, #3
   10f0c:	f04f 0300 	mov.w	r3, #0
   10f10:	f369 0302 	bfi	r3, r9, #0, #3
   10f14:	f366 03c5 	bfi	r3, r6, #3, #3
   10f18:	f364 138f 	bfi	r3, r4, #6, #10
   10f1c:	462a      	mov	r2, r5
   10f1e:	4641      	mov	r1, r8
   10f20:	4811      	ldr	r0, [pc, #68]	; (10f68 <on_data_received+0xcc>)
   10f22:	f002 fd23 	bl	1396c <log_2>
	LOG_INF("Data: %s", log_strdup(temp_str));
   10f26:	f04f 0500 	mov.w	r5, #0
   10f2a:	f369 0502 	bfi	r5, r9, #0, #3
   10f2e:	f366 05c5 	bfi	r5, r6, #3, #3
   10f32:	f364 158f 	bfi	r5, r4, #6, #10
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   10f36:	4668      	mov	r0, sp
   10f38:	f002 fb40 	bl	135bc <z_log_strdup>
   10f3c:	4601      	mov	r1, r0
   10f3e:	462a      	mov	r2, r5
   10f40:	480a      	ldr	r0, [pc, #40]	; (10f6c <on_data_received+0xd0>)
   10f42:	f002 fcdd 	bl	13900 <log_1>
}
   10f46:	46bd      	mov	sp, r7
   10f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10f4c:	00031bf8 	.word	0x00031bf8
   10f50:	00031c08 	.word	0x00031c08
   10f54:	2000043c 	.word	0x2000043c
   10f58:	00031c18 	.word	0x00031c18
   10f5c:	00031c28 	.word	0x00031c28
   10f60:	00031988 	.word	0x00031988
   10f64:	00031908 	.word	0x00031908
   10f68:	00031c38 	.word	0x00031c38
   10f6c:	00031c5c 	.word	0x00031c5c

00010f70 <on_notif_changed>:
		current_conn = NULL;
	}
}

void on_notif_changed(enum bt_button_notifications_enabled status)
{
   10f70:	b508      	push	{r3, lr}
	if (status == BT_BUTTON_NOTIFICATIONS_ENABLED) 
   10f72:	b980      	cbnz	r0, 10f96 <on_notif_changed+0x26>
   10f74:	4b10      	ldr	r3, [pc, #64]	; (10fb8 <on_notif_changed+0x48>)
   10f76:	4a11      	ldr	r2, [pc, #68]	; (10fbc <on_notif_changed+0x4c>)
   10f78:	1a9b      	subs	r3, r3, r2
   10f7a:	08db      	lsrs	r3, r3, #3
	{
		LOG_INF("Notifications enabled");
   10f7c:	f04f 0100 	mov.w	r1, #0
   10f80:	2203      	movs	r2, #3
   10f82:	f362 0102 	bfi	r1, r2, #0, #3
   10f86:	f36f 01c5 	bfc	r1, #3, #3
   10f8a:	f363 118f 	bfi	r1, r3, #6, #10
   10f8e:	480c      	ldr	r0, [pc, #48]	; (10fc0 <on_notif_changed+0x50>)
   10f90:	f002 fc86 	bl	138a0 <log_0>
	}
	else 
	{
		LOG_INF("Notificatons disabled");
	}
}
   10f94:	bd08      	pop	{r3, pc}
   10f96:	4b08      	ldr	r3, [pc, #32]	; (10fb8 <on_notif_changed+0x48>)
   10f98:	4a08      	ldr	r2, [pc, #32]	; (10fbc <on_notif_changed+0x4c>)
   10f9a:	1a9b      	subs	r3, r3, r2
   10f9c:	08db      	lsrs	r3, r3, #3
		LOG_INF("Notificatons disabled");
   10f9e:	f04f 0100 	mov.w	r1, #0
   10fa2:	2203      	movs	r2, #3
   10fa4:	f362 0102 	bfi	r1, r2, #0, #3
   10fa8:	f36f 01c5 	bfc	r1, #3, #3
   10fac:	f363 118f 	bfi	r1, r3, #6, #10
   10fb0:	4804      	ldr	r0, [pc, #16]	; (10fc4 <on_notif_changed+0x54>)
   10fb2:	f002 fc75 	bl	138a0 <log_0>
}
   10fb6:	e7ed      	b.n	10f94 <on_notif_changed+0x24>
   10fb8:	00031988 	.word	0x00031988
   10fbc:	00031908 	.word	0x00031908
   10fc0:	00031c68 	.word	0x00031c68
   10fc4:	00031c80 	.word	0x00031c80

00010fc8 <on_connected>:
{
   10fc8:	b510      	push	{r4, lr}
	if(err) 
   10fca:	b9b1      	cbnz	r1, 10ffa <on_connected+0x32>
   10fcc:	4604      	mov	r4, r0
   10fce:	4b14      	ldr	r3, [pc, #80]	; (11020 <on_connected+0x58>)
   10fd0:	4a14      	ldr	r2, [pc, #80]	; (11024 <on_connected+0x5c>)
   10fd2:	1a9b      	subs	r3, r3, r2
   10fd4:	08db      	lsrs	r3, r3, #3
	LOG_INF("Connected.");
   10fd6:	f04f 0100 	mov.w	r1, #0
   10fda:	2203      	movs	r2, #3
   10fdc:	f362 0102 	bfi	r1, r2, #0, #3
   10fe0:	f36f 01c5 	bfc	r1, #3, #3
   10fe4:	f363 118f 	bfi	r1, r3, #6, #10
   10fe8:	480f      	ldr	r0, [pc, #60]	; (11028 <on_connected+0x60>)
   10fea:	f002 fc59 	bl	138a0 <log_0>
	current_conn = bt_conn_ref(conn);
   10fee:	4620      	mov	r0, r4
   10ff0:	f01c fc2c 	bl	2d84c <bt_conn_ref>
   10ff4:	4b0d      	ldr	r3, [pc, #52]	; (1102c <on_connected+0x64>)
   10ff6:	6018      	str	r0, [r3, #0]
}
   10ff8:	bd10      	pop	{r4, pc}
   10ffa:	4608      	mov	r0, r1
   10ffc:	4b08      	ldr	r3, [pc, #32]	; (11020 <on_connected+0x58>)
   10ffe:	4a09      	ldr	r2, [pc, #36]	; (11024 <on_connected+0x5c>)
   11000:	1a9b      	subs	r3, r3, r2
   11002:	08db      	lsrs	r3, r3, #3
		LOG_ERR("connection err: %d", err);
   11004:	f04f 0200 	mov.w	r2, #0
   11008:	2101      	movs	r1, #1
   1100a:	f361 0202 	bfi	r2, r1, #0, #3
   1100e:	f36f 02c5 	bfc	r2, #3, #3
   11012:	f363 128f 	bfi	r2, r3, #6, #10
   11016:	4601      	mov	r1, r0
   11018:	4805      	ldr	r0, [pc, #20]	; (11030 <on_connected+0x68>)
   1101a:	f002 fc71 	bl	13900 <log_1>
		return;
   1101e:	e7eb      	b.n	10ff8 <on_connected+0x30>
   11020:	00031988 	.word	0x00031988
   11024:	00031908 	.word	0x00031908
   11028:	00031cac 	.word	0x00031cac
   1102c:	200026e8 	.word	0x200026e8
   11030:	00031c98 	.word	0x00031c98

00011034 <on_disconnected>:
{
   11034:	b508      	push	{r3, lr}
   11036:	4b0c      	ldr	r3, [pc, #48]	; (11068 <on_disconnected+0x34>)
   11038:	4a0c      	ldr	r2, [pc, #48]	; (1106c <on_disconnected+0x38>)
   1103a:	1a9b      	subs	r3, r3, r2
   1103c:	08db      	lsrs	r3, r3, #3
	LOG_INF("Disconnected (reason: %d)", reason);
   1103e:	f04f 0200 	mov.w	r2, #0
   11042:	2003      	movs	r0, #3
   11044:	f360 0202 	bfi	r2, r0, #0, #3
   11048:	f36f 02c5 	bfc	r2, #3, #3
   1104c:	f363 128f 	bfi	r2, r3, #6, #10
   11050:	4807      	ldr	r0, [pc, #28]	; (11070 <on_disconnected+0x3c>)
   11052:	f002 fc55 	bl	13900 <log_1>
	if(current_conn) 
   11056:	4b07      	ldr	r3, [pc, #28]	; (11074 <on_disconnected+0x40>)
   11058:	6818      	ldr	r0, [r3, #0]
   1105a:	b120      	cbz	r0, 11066 <on_disconnected+0x32>
		bt_conn_unref(current_conn);
   1105c:	f008 f9f0 	bl	19440 <bt_conn_unref>
		current_conn = NULL;
   11060:	4b04      	ldr	r3, [pc, #16]	; (11074 <on_disconnected+0x40>)
   11062:	2200      	movs	r2, #0
   11064:	601a      	str	r2, [r3, #0]
}
   11066:	bd08      	pop	{r3, pc}
   11068:	00031988 	.word	0x00031988
   1106c:	00031908 	.word	0x00031908
   11070:	00031cb8 	.word	0x00031cb8
   11074:	200026e8 	.word	0x200026e8

00011078 <dhtReadingData>:

struct DHTReadings dht22;


void dhtReadingData(void)
{
   11078:	b570      	push	{r4, r5, r6, lr}
	dht22.dhtModel = DHT22;
   1107a:	4b28      	ldr	r3, [pc, #160]	; (1111c <dhtReadingData+0xa4>)
   1107c:	2201      	movs	r2, #1
   1107e:	741a      	strb	r2, [r3, #16]
   11080:	e027      	b.n	110d2 <dhtReadingData+0x5a>
			printk("Can't read temperature!\n");
			k_msleep(50);
		}
		else
		{
			printk("temperature: %d.%d C\n", dht22.temperatureIntPart, dht22.temperatureDecimalPart);
   11082:	4c26      	ldr	r4, [pc, #152]	; (1111c <dhtReadingData+0xa4>)
   11084:	6862      	ldr	r2, [r4, #4]
   11086:	6821      	ldr	r1, [r4, #0]
   11088:	4825      	ldr	r0, [pc, #148]	; (11120 <dhtReadingData+0xa8>)
   1108a:	f01b f85d 	bl	2c148 <printk>
			printk("humidity: %d.%d %%\n", dht22.humidityIntPart, dht22.humidityDecimalPart);
   1108e:	68e2      	ldr	r2, [r4, #12]
   11090:	68a1      	ldr	r1, [r4, #8]
   11092:	4824      	ldr	r0, [pc, #144]	; (11124 <dhtReadingData+0xac>)
   11094:	f01b f858 	bl	2c148 <printk>

			setTemperature(getTemperature(&dht22));
   11098:	4620      	mov	r0, r4
   1109a:	f000 fcbb 	bl	11a14 <getTemperature>
   1109e:	f000 fae9 	bl	11674 <setTemperature>
			setHumidity(getHumidity(&dht22));
   110a2:	4620      	mov	r0, r4
   110a4:	f000 fcce 	bl	11a44 <getHumidity>
   110a8:	f000 fb16 	bl	116d8 <setHumidity>

			int err = send_button_notification(current_conn, getTemperature(&dht22));
   110ac:	4b1e      	ldr	r3, [pc, #120]	; (11128 <dhtReadingData+0xb0>)
   110ae:	681d      	ldr	r5, [r3, #0]
   110b0:	4620      	mov	r0, r4
   110b2:	f000 fcaf 	bl	11a14 <getTemperature>
   110b6:	4601      	mov	r1, r0
   110b8:	4628      	mov	r0, r5
   110ba:	f000 faa9 	bl	11610 <send_button_notification>
			if (err) 
   110be:	4601      	mov	r1, r0
   110c0:	b9e0      	cbnz	r0, 110fc <dhtReadingData+0x84>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   110c2:	f44f 30a0 	mov.w	r0, #81920	; 0x14000
   110c6:	2100      	movs	r1, #0
   110c8:	f015 fbee 	bl	268a8 <z_impl_k_sleep>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   110cc:	4817      	ldr	r0, [pc, #92]	; (1112c <dhtReadingData+0xb4>)
   110ce:	f013 f895 	bl	241fc <z_impl_k_mutex_unlock>
	return z_impl_k_mutex_lock(mutex, timeout);
   110d2:	f04f 32ff 	mov.w	r2, #4294967295
   110d6:	f04f 33ff 	mov.w	r3, #4294967295
   110da:	4814      	ldr	r0, [pc, #80]	; (1112c <dhtReadingData+0xb4>)
   110dc:	f012 ff6e 	bl	23fbc <z_impl_k_mutex_lock>
		if (dhtRead(&dht22) == DHT_FAIL)
   110e0:	480e      	ldr	r0, [pc, #56]	; (1111c <dhtReadingData+0xa4>)
   110e2:	f01a ff9b 	bl	2c01c <dhtRead>
   110e6:	2801      	cmp	r0, #1
   110e8:	d1cb      	bne.n	11082 <dhtReadingData+0xa>
			printk("Can't read temperature!\n");
   110ea:	4811      	ldr	r0, [pc, #68]	; (11130 <dhtReadingData+0xb8>)
   110ec:	f01b f82c 	bl	2c148 <printk>
	return z_impl_k_sleep(timeout);
   110f0:	f240 6067 	movw	r0, #1639	; 0x667
   110f4:	2100      	movs	r1, #0
   110f6:	f015 fbd7 	bl	268a8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   110fa:	e7e7      	b.n	110cc <dhtReadingData+0x54>
   110fc:	4b0d      	ldr	r3, [pc, #52]	; (11134 <dhtReadingData+0xbc>)
   110fe:	4a0e      	ldr	r2, [pc, #56]	; (11138 <dhtReadingData+0xc0>)
   11100:	1a9b      	subs	r3, r3, r2
   11102:	08db      	lsrs	r3, r3, #3
			{
				LOG_ERR("couldn't send notification (err: %d)", err);
   11104:	2201      	movs	r2, #1
   11106:	f362 0602 	bfi	r6, r2, #0, #3
   1110a:	f36f 06c5 	bfc	r6, #3, #3
   1110e:	f363 168f 	bfi	r6, r3, #6, #10
   11112:	4632      	mov	r2, r6
   11114:	4809      	ldr	r0, [pc, #36]	; (1113c <dhtReadingData+0xc4>)
   11116:	f002 fbf3 	bl	13900 <log_1>
   1111a:	e7d2      	b.n	110c2 <dhtReadingData+0x4a>
   1111c:	200026ec 	.word	0x200026ec
   11120:	00031cf0 	.word	0x00031cf0
   11124:	00031d08 	.word	0x00031d08
   11128:	200026e8 	.word	0x200026e8
   1112c:	20000be4 	.word	0x20000be4
   11130:	00031cd4 	.word	0x00031cd4
   11134:	00031988 	.word	0x00031988
   11138:	00031908 	.word	0x00031908
   1113c:	00031d1c 	.word	0x00031d1c

00011140 <checkIfEspIsConnected>:
	}
}


void checkIfEspIsConnected (void)
{
   11140:	b538      	push	{r3, r4, r5, lr}
   11142:	e036      	b.n	111b2 <checkIfEspIsConnected+0x72>
	while(1)
	{
		k_sleep(K_MSEC(100));
		if(gpio_read(12) && !bool_ESP_is_on)
		{
			printk("first If\n");
   11144:	4836      	ldr	r0, [pc, #216]	; (11220 <checkIfEspIsConnected+0xe0>)
   11146:	f01a ffff 	bl	2c148 <printk>
	return z_impl_k_mutex_lock(mutex, timeout);
   1114a:	f04f 32ff 	mov.w	r2, #4294967295
   1114e:	f04f 33ff 	mov.w	r3, #4294967295
   11152:	4834      	ldr	r0, [pc, #208]	; (11224 <checkIfEspIsConnected+0xe4>)
   11154:	f012 ff32 	bl	23fbc <z_impl_k_mutex_lock>
			if(k_mutex_lock(&esp_mutex, K_FOREVER) == 0)
   11158:	2800      	cmp	r0, #0
   1115a:	d13f      	bne.n	111dc <checkIfEspIsConnected+0x9c>
			{
				bool_ESP_is_on = true;
   1115c:	4b32      	ldr	r3, [pc, #200]	; (11228 <checkIfEspIsConnected+0xe8>)
   1115e:	2201      	movs	r2, #1
   11160:	701a      	strb	r2, [r3, #0]
				spi_init();
   11162:	f000 fc8d 	bl	11a80 <spi_init>
	return z_impl_k_mutex_unlock(mutex);
   11166:	482f      	ldr	r0, [pc, #188]	; (11224 <checkIfEspIsConnected+0xe4>)
   11168:	f013 f848 	bl	241fc <z_impl_k_mutex_unlock>
			if(k_mutex_lock(&esp_mutex, K_FOREVER) == 0)
   1116c:	e036      	b.n	111dc <checkIfEspIsConnected+0x9c>
			}
			
		}
		else if (!gpio_read(12) && bool_ESP_is_on)
		{
			printk("second If\n");
   1116e:	482f      	ldr	r0, [pc, #188]	; (1122c <checkIfEspIsConnected+0xec>)
   11170:	f01a ffea 	bl	2c148 <printk>
	return z_impl_k_mutex_lock(mutex, timeout);
   11174:	f04f 32ff 	mov.w	r2, #4294967295
   11178:	f04f 33ff 	mov.w	r3, #4294967295
   1117c:	4829      	ldr	r0, [pc, #164]	; (11224 <checkIfEspIsConnected+0xe4>)
   1117e:	f012 ff1d 	bl	23fbc <z_impl_k_mutex_lock>
			if(k_mutex_lock(&esp_mutex, K_FOREVER) == 0)
   11182:	bb58      	cbnz	r0, 111dc <checkIfEspIsConnected+0x9c>
			{
				bool_ESP_is_on = false;
   11184:	4b28      	ldr	r3, [pc, #160]	; (11228 <checkIfEspIsConnected+0xe8>)
   11186:	2200      	movs	r2, #0
   11188:	701a      	strb	r2, [r3, #0]
				spi_uninit();
   1118a:	f000 fcab 	bl	11ae4 <spi_uninit>
				gpio_init(31);
   1118e:	201f      	movs	r0, #31
   11190:	f000 fd04 	bl	11b9c <gpio_init>
	return z_impl_k_mutex_unlock(mutex);
   11194:	4823      	ldr	r0, [pc, #140]	; (11224 <checkIfEspIsConnected+0xe4>)
   11196:	f013 f831 	bl	241fc <z_impl_k_mutex_unlock>
   1119a:	e01f      	b.n	111dc <checkIfEspIsConnected+0x9c>
				ESP_write_data(getTemperature(&dht22), getHumidity(&dht22), setPoint, heaterState);
				printf("Sent to ESP\n");
			}
			else
			{
				printf("Don't sent to ESP\n");
   1119c:	4824      	ldr	r0, [pc, #144]	; (11230 <checkIfEspIsConnected+0xf0>)
   1119e:	f01a f96f 	bl	2b480 <iprintf>
   111a2:	4820      	ldr	r0, [pc, #128]	; (11224 <checkIfEspIsConnected+0xe4>)
   111a4:	f013 f82a 	bl	241fc <z_impl_k_mutex_unlock>
	return z_impl_k_sleep(timeout);
   111a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   111ac:	2100      	movs	r1, #0
   111ae:	f015 fb7b 	bl	268a8 <z_impl_k_sleep>
   111b2:	f640 40cd 	movw	r0, #3277	; 0xccd
   111b6:	2100      	movs	r1, #0
   111b8:	f015 fb76 	bl	268a8 <z_impl_k_sleep>
		if(gpio_read(12) && !bool_ESP_is_on)
   111bc:	200c      	movs	r0, #12
   111be:	f000 fd2b 	bl	11c18 <gpio_read>
   111c2:	b118      	cbz	r0, 111cc <checkIfEspIsConnected+0x8c>
   111c4:	4b18      	ldr	r3, [pc, #96]	; (11228 <checkIfEspIsConnected+0xe8>)
   111c6:	781b      	ldrb	r3, [r3, #0]
   111c8:	2b00      	cmp	r3, #0
   111ca:	d0bb      	beq.n	11144 <checkIfEspIsConnected+0x4>
		else if (!gpio_read(12) && bool_ESP_is_on)
   111cc:	200c      	movs	r0, #12
   111ce:	f000 fd23 	bl	11c18 <gpio_read>
   111d2:	b918      	cbnz	r0, 111dc <checkIfEspIsConnected+0x9c>
   111d4:	4b14      	ldr	r3, [pc, #80]	; (11228 <checkIfEspIsConnected+0xe8>)
   111d6:	781b      	ldrb	r3, [r3, #0]
   111d8:	2b00      	cmp	r3, #0
   111da:	d1c8      	bne.n	1116e <checkIfEspIsConnected+0x2e>
	return z_impl_k_mutex_lock(mutex, timeout);
   111dc:	f04f 32ff 	mov.w	r2, #4294967295
   111e0:	f04f 33ff 	mov.w	r3, #4294967295
   111e4:	480f      	ldr	r0, [pc, #60]	; (11224 <checkIfEspIsConnected+0xe4>)
   111e6:	f012 fee9 	bl	23fbc <z_impl_k_mutex_lock>
		if(k_mutex_lock(&esp_mutex, K_FOREVER) == 0)
   111ea:	2800      	cmp	r0, #0
   111ec:	d1e1      	bne.n	111b2 <checkIfEspIsConnected+0x72>
			if(bool_ESP_is_on)
   111ee:	4b0e      	ldr	r3, [pc, #56]	; (11228 <checkIfEspIsConnected+0xe8>)
   111f0:	781b      	ldrb	r3, [r3, #0]
   111f2:	2b00      	cmp	r3, #0
   111f4:	d0d2      	beq.n	1119c <checkIfEspIsConnected+0x5c>
				ESP_write_data(getTemperature(&dht22), getHumidity(&dht22), setPoint, heaterState);
   111f6:	4d0f      	ldr	r5, [pc, #60]	; (11234 <checkIfEspIsConnected+0xf4>)
   111f8:	4628      	mov	r0, r5
   111fa:	f000 fc0b 	bl	11a14 <getTemperature>
   111fe:	4604      	mov	r4, r0
   11200:	4628      	mov	r0, r5
   11202:	f000 fc1f 	bl	11a44 <getHumidity>
   11206:	4601      	mov	r1, r0
   11208:	4b0b      	ldr	r3, [pc, #44]	; (11238 <checkIfEspIsConnected+0xf8>)
   1120a:	681b      	ldr	r3, [r3, #0]
   1120c:	4a0b      	ldr	r2, [pc, #44]	; (1123c <checkIfEspIsConnected+0xfc>)
   1120e:	6812      	ldr	r2, [r2, #0]
   11210:	4620      	mov	r0, r4
   11212:	f000 fc73 	bl	11afc <ESP_write_data>
				printf("Sent to ESP\n");
   11216:	480a      	ldr	r0, [pc, #40]	; (11240 <checkIfEspIsConnected+0x100>)
   11218:	f01a f932 	bl	2b480 <iprintf>
   1121c:	e7c1      	b.n	111a2 <checkIfEspIsConnected+0x62>
   1121e:	bf00      	nop
   11220:	00031d44 	.word	0x00031d44
   11224:	20000bf8 	.word	0x20000bf8
   11228:	20003ff2 	.word	0x20003ff2
   1122c:	00031d50 	.word	0x00031d50
   11230:	00031d6c 	.word	0x00031d6c
   11234:	200026ec 	.word	0x200026ec
   11238:	20002700 	.word	0x20002700
   1123c:	2000043c 	.word	0x2000043c
   11240:	00031d5c 	.word	0x00031d5c

00011244 <main>:
{
   11244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	gpio_init(12); // pin do czytania, czy ESP dało stan wysoki(jest włączone i gotowe do wymiany danych)
   11248:	200c      	movs	r0, #12
   1124a:	f000 fca7 	bl	11b9c <gpio_init>
	gpio_init(31); // przypisanie pinu od CS/SS żeby był PULLDOWN, by nie dawał przypadkiem stanu wysokiego
   1124e:	201f      	movs	r0, #31
   11250:	f000 fca4 	bl	11b9c <gpio_init>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11254:	4879      	ldr	r0, [pc, #484]	; (1143c <main+0x1f8>)
   11256:	f012 f82b 	bl	232b0 <z_impl_device_get_binding>
	if (dev == NULL) 
   1125a:	2800      	cmp	r0, #0
   1125c:	f000 80eb 	beq.w	11436 <main+0x1f2>
   11260:	4604      	mov	r4, r0
	const struct gpio_driver_api *api =
   11262:	6887      	ldr	r7, [r0, #8]
	const struct gpio_driver_config *const cfg =
   11264:	6843      	ldr	r3, [r0, #4]
	struct gpio_driver_data *data =
   11266:	6905      	ldr	r5, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11268:	681b      	ldr	r3, [r3, #0]
   1126a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1126e:	d030      	beq.n	112d2 <main+0x8e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11270:	682b      	ldr	r3, [r5, #0]
   11272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   11276:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   11278:	683b      	ldr	r3, [r7, #0]
   1127a:	f240 6201 	movw	r2, #1537	; 0x601
   1127e:	210d      	movs	r1, #13
   11280:	4620      	mov	r0, r4
   11282:	4798      	blx	r3
	if (ret < 0) 
   11284:	2800      	cmp	r0, #0
   11286:	f2c0 80d6 	blt.w	11436 <main+0x1f2>
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1128a:	4b6d      	ldr	r3, [pc, #436]	; (11440 <main+0x1fc>)
   1128c:	2203      	movs	r2, #3
   1128e:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   11292:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11296:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
	setState(0);
   1129a:	2000      	movs	r0, #0
   1129c:	f000 fa4e 	bl	1173c <setState>
	int err = bluetooth_init(&bluetooth_callbacks, &remote_callbacks);
   112a0:	4968      	ldr	r1, [pc, #416]	; (11444 <main+0x200>)
   112a2:	4869      	ldr	r0, [pc, #420]	; (11448 <main+0x204>)
   112a4:	f000 fa80 	bl	117a8 <bluetooth_init>
	if (err)
   112a8:	4601      	mov	r1, r0
   112aa:	bb18      	cbnz	r0, 112f4 <main+0xb0>
   112ac:	4b67      	ldr	r3, [pc, #412]	; (1144c <main+0x208>)
   112ae:	4a68      	ldr	r2, [pc, #416]	; (11450 <main+0x20c>)
   112b0:	1a9b      	subs	r3, r3, r2
   112b2:	08db      	lsrs	r3, r3, #3
	LOG_INF("Running");
   112b4:	f04f 0100 	mov.w	r1, #0
   112b8:	2203      	movs	r2, #3
   112ba:	f362 0102 	bfi	r1, r2, #0, #3
   112be:	f36f 01c5 	bfc	r1, #3, #3
   112c2:	f363 118f 	bfi	r1, r3, #6, #10
   112c6:	4863      	ldr	r0, [pc, #396]	; (11454 <main+0x210>)
   112c8:	f002 faea 	bl	138a0 <log_0>
	int i = 0;
   112cc:	2600      	movs	r6, #0
	bool led_is_on = true;
   112ce:	2501      	movs	r5, #1
   112d0:	e060      	b.n	11394 <main+0x150>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   112d2:	4e61      	ldr	r6, [pc, #388]	; (11458 <main+0x214>)
   112d4:	f240 23fd 	movw	r3, #765	; 0x2fd
   112d8:	4632      	mov	r2, r6
   112da:	4960      	ldr	r1, [pc, #384]	; (1145c <main+0x218>)
   112dc:	4860      	ldr	r0, [pc, #384]	; (11460 <main+0x21c>)
   112de:	f01a ff33 	bl	2c148 <printk>
   112e2:	4860      	ldr	r0, [pc, #384]	; (11464 <main+0x220>)
   112e4:	f01a ff30 	bl	2c148 <printk>
   112e8:	f240 21fd 	movw	r1, #765	; 0x2fd
   112ec:	4630      	mov	r0, r6
   112ee:	f01b f930 	bl	2c552 <assert_post_action>
   112f2:	e7bd      	b.n	11270 <main+0x2c>
   112f4:	4b55      	ldr	r3, [pc, #340]	; (1144c <main+0x208>)
   112f6:	4a56      	ldr	r2, [pc, #344]	; (11450 <main+0x20c>)
   112f8:	1a9b      	subs	r3, r3, r2
   112fa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Bluetooth_init returned %d", err);
   112fc:	f04f 0200 	mov.w	r2, #0
   11300:	2001      	movs	r0, #1
   11302:	f360 0202 	bfi	r2, r0, #0, #3
   11306:	f36f 02c5 	bfc	r2, #3, #3
   1130a:	f363 128f 	bfi	r2, r3, #6, #10
   1130e:	4856      	ldr	r0, [pc, #344]	; (11468 <main+0x224>)
   11310:	f002 faf6 	bl	13900 <log_1>
   11314:	e7ca      	b.n	112ac <main+0x68>
			heaterState = 1;
   11316:	2001      	movs	r0, #1
   11318:	4b54      	ldr	r3, [pc, #336]	; (1146c <main+0x228>)
   1131a:	6018      	str	r0, [r3, #0]
			setState(1);
   1131c:	f000 fa0e 	bl	1173c <setState>
    p_reg->OUTSET = set_mask;
   11320:	4b47      	ldr	r3, [pc, #284]	; (11440 <main+0x1fc>)
   11322:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11326:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			printk("Relay is ON\n");
   1132a:	4851      	ldr	r0, [pc, #324]	; (11470 <main+0x22c>)
   1132c:	f01a ff0c 	bl	2c148 <printk>
   11330:	e044      	b.n	113bc <main+0x178>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11332:	f8df 9124 	ldr.w	r9, [pc, #292]	; 11458 <main+0x214>
   11336:	f240 43bb 	movw	r3, #1211	; 0x4bb
   1133a:	464a      	mov	r2, r9
   1133c:	4947      	ldr	r1, [pc, #284]	; (1145c <main+0x218>)
   1133e:	4848      	ldr	r0, [pc, #288]	; (11460 <main+0x21c>)
   11340:	f01a ff02 	bl	2c148 <printk>
   11344:	4847      	ldr	r0, [pc, #284]	; (11464 <main+0x220>)
   11346:	f01a feff 	bl	2c148 <printk>
   1134a:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1134e:	4648      	mov	r0, r9
   11350:	f01b f8ff 	bl	2c552 <assert_post_action>
   11354:	e059      	b.n	1140a <main+0x1c6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11356:	f8df 8100 	ldr.w	r8, [pc, #256]	; 11458 <main+0x214>
   1135a:	f240 4391 	movw	r3, #1169	; 0x491
   1135e:	4642      	mov	r2, r8
   11360:	493e      	ldr	r1, [pc, #248]	; (1145c <main+0x218>)
   11362:	483f      	ldr	r0, [pc, #252]	; (11460 <main+0x21c>)
   11364:	f01a fef0 	bl	2c148 <printk>
   11368:	483e      	ldr	r0, [pc, #248]	; (11464 <main+0x220>)
   1136a:	f01a feed 	bl	2c148 <printk>
   1136e:	f240 4191 	movw	r1, #1169	; 0x491
   11372:	4640      	mov	r0, r8
   11374:	f01b f8ed 	bl	2c552 <assert_post_action>
   11378:	e054      	b.n	11424 <main+0x1e0>
	const struct gpio_driver_api *api =
   1137a:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
   1137c:	691b      	ldr	r3, [r3, #16]
   1137e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   11382:	4620      	mov	r0, r4
   11384:	4798      	blx	r3
		led_is_on = !led_is_on;
   11386:	f085 0501 	eor.w	r5, r5, #1
	return z_impl_k_sleep(timeout);
   1138a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1138e:	2100      	movs	r1, #0
   11390:	f015 fa8a 	bl	268a8 <z_impl_k_sleep>
		printk("iteration: %d\n", ++i);
   11394:	3601      	adds	r6, #1
   11396:	4631      	mov	r1, r6
   11398:	4836      	ldr	r0, [pc, #216]	; (11474 <main+0x230>)
   1139a:	f01a fed5 	bl	2c148 <printk>
		if (dht22.temperatureIntPart + (dht22.temperatureDecimalPart/10) < setPoint - hysteresis)
   1139e:	4b36      	ldr	r3, [pc, #216]	; (11478 <main+0x234>)
   113a0:	681a      	ldr	r2, [r3, #0]
   113a2:	685b      	ldr	r3, [r3, #4]
   113a4:	4935      	ldr	r1, [pc, #212]	; (1147c <main+0x238>)
   113a6:	fb81 0103 	smull	r0, r1, r1, r3
   113aa:	17db      	asrs	r3, r3, #31
   113ac:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   113b0:	4413      	add	r3, r2
   113b2:	4a33      	ldr	r2, [pc, #204]	; (11480 <main+0x23c>)
   113b4:	6812      	ldr	r2, [r2, #0]
   113b6:	3a01      	subs	r2, #1
   113b8:	4293      	cmp	r3, r2
   113ba:	dbac      	blt.n	11316 <main+0xd2>
		if (dht22.temperatureIntPart + (dht22.temperatureDecimalPart/10) > setPoint + hysteresis)
   113bc:	4b2e      	ldr	r3, [pc, #184]	; (11478 <main+0x234>)
   113be:	681a      	ldr	r2, [r3, #0]
   113c0:	685b      	ldr	r3, [r3, #4]
   113c2:	492e      	ldr	r1, [pc, #184]	; (1147c <main+0x238>)
   113c4:	fb81 0103 	smull	r0, r1, r1, r3
   113c8:	17db      	asrs	r3, r3, #31
   113ca:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   113ce:	4413      	add	r3, r2
   113d0:	4a2b      	ldr	r2, [pc, #172]	; (11480 <main+0x23c>)
   113d2:	6812      	ldr	r2, [r2, #0]
   113d4:	3201      	adds	r2, #1
   113d6:	4293      	cmp	r3, r2
   113d8:	dd0c      	ble.n	113f4 <main+0x1b0>
			heaterState = 0;
   113da:	2000      	movs	r0, #0
   113dc:	4b23      	ldr	r3, [pc, #140]	; (1146c <main+0x228>)
   113de:	6018      	str	r0, [r3, #0]
			setState(0);
   113e0:	f000 f9ac 	bl	1173c <setState>
    p_reg->OUTCLR = clr_mask;
   113e4:	4b16      	ldr	r3, [pc, #88]	; (11440 <main+0x1fc>)
   113e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   113ea:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
			printk("Relay is OFF\n");
   113ee:	4825      	ldr	r0, [pc, #148]	; (11484 <main+0x240>)
   113f0:	f01a feaa 	bl	2c148 <printk>
		printk("\n\n");
   113f4:	4824      	ldr	r0, [pc, #144]	; (11488 <main+0x244>)
   113f6:	f01a fea7 	bl	2c148 <printk>
		gpio_pin_set(dev, PIN, (int)led_is_on);
   113fa:	462f      	mov	r7, r5
	const struct gpio_driver_config *const cfg =
   113fc:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_data *const data =
   113fe:	f8d4 8010 	ldr.w	r8, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11402:	681b      	ldr	r3, [r3, #0]
   11404:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   11408:	d093      	beq.n	11332 <main+0xee>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1140a:	f8d8 3000 	ldr.w	r3, [r8]
   1140e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   11412:	d002      	beq.n	1141a <main+0x1d6>
		value = (value != 0) ? 0 : 1;
   11414:	fab7 f787 	clz	r7, r7
   11418:	097f      	lsrs	r7, r7, #5
	const struct gpio_driver_config *const cfg =
   1141a:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1141c:	681b      	ldr	r3, [r3, #0]
   1141e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   11422:	d098      	beq.n	11356 <main+0x112>
	if (value != 0)	{
   11424:	2f00      	cmp	r7, #0
   11426:	d0a8      	beq.n	1137a <main+0x136>
	const struct gpio_driver_api *api =
   11428:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
   1142a:	68db      	ldr	r3, [r3, #12]
   1142c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   11430:	4620      	mov	r0, r4
   11432:	4798      	blx	r3
   11434:	e7a7      	b.n	11386 <main+0x142>
}
   11436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1143a:	bf00      	nop
   1143c:	00031d80 	.word	0x00031d80
   11440:	50000300 	.word	0x50000300
   11444:	20000434 	.word	0x20000434
   11448:	20000420 	.word	0x20000420
   1144c:	00031988 	.word	0x00031988
   11450:	00031908 	.word	0x00031908
   11454:	00031e44 	.word	0x00031e44
   11458:	00031d88 	.word	0x00031d88
   1145c:	00031db4 	.word	0x00031db4
   11460:	00031df4 	.word	0x00031df4
   11464:	00031e14 	.word	0x00031e14
   11468:	00031e28 	.word	0x00031e28
   1146c:	20002700 	.word	0x20002700
   11470:	00031e5c 	.word	0x00031e5c
   11474:	00031e4c 	.word	0x00031e4c
   11478:	200026ec 	.word	0x200026ec
   1147c:	66666667 	.word	0x66666667
   11480:	2000043c 	.word	0x2000043c
   11484:	00031e6c 	.word	0x00031e6c
   11488:	00036284 	.word	0x00036284

0001148c <on_write>:
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &stateValue, sizeof(stateValue));
}

static ssize_t on_write(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   1148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1148e:	4606      	mov	r6, r0
   11490:	4617      	mov	r7, r2
   11492:	461d      	mov	r5, r3
   11494:	4c0d      	ldr	r4, [pc, #52]	; (114cc <on_write+0x40>)
   11496:	4b0e      	ldr	r3, [pc, #56]	; (114d0 <on_write+0x44>)
   11498:	1ae4      	subs	r4, r4, r3
   1149a:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Received data, handle %d, conn %p",
   1149c:	f04f 0300 	mov.w	r3, #0
   114a0:	2203      	movs	r2, #3
   114a2:	f362 0302 	bfi	r3, r2, #0, #3
   114a6:	f36f 03c5 	bfc	r3, #3, #3
   114aa:	f364 138f 	bfi	r3, r4, #6, #10
   114ae:	4602      	mov	r2, r0
   114b0:	8a09      	ldrh	r1, [r1, #16]
   114b2:	4808      	ldr	r0, [pc, #32]	; (114d4 <on_write+0x48>)
   114b4:	f002 fa5a 	bl	1396c <log_2>
		attr->handle, (void *)conn);

	if (remote_callbacks.data_received) 
   114b8:	4b07      	ldr	r3, [pc, #28]	; (114d8 <on_write+0x4c>)
   114ba:	685b      	ldr	r3, [r3, #4]
   114bc:	b11b      	cbz	r3, 114c6 <on_write+0x3a>
    {
		remote_callbacks.data_received(conn, buf, len);
   114be:	462a      	mov	r2, r5
   114c0:	4639      	mov	r1, r7
   114c2:	4630      	mov	r0, r6
   114c4:	4798      	blx	r3
    }
	return len;
}
   114c6:	4628      	mov	r0, r5
   114c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   114ca:	bf00      	nop
   114cc:	00031908 	.word	0x00031908
   114d0:	00031908 	.word	0x00031908
   114d4:	00031eb4 	.word	0x00031eb4
   114d8:	20002704 	.word	0x20002704

000114dc <read_state_characteristic_cb>:
{
   114dc:	b510      	push	{r4, lr}
   114de:	b084      	sub	sp, #16
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &stateValue, sizeof(stateValue));
   114e0:	2405      	movs	r4, #5
   114e2:	9402      	str	r4, [sp, #8]
   114e4:	4c04      	ldr	r4, [pc, #16]	; (114f8 <read_state_characteristic_cb+0x1c>)
   114e6:	9401      	str	r4, [sp, #4]
   114e8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   114ec:	9400      	str	r4, [sp, #0]
   114ee:	f01d fabb 	bl	2ea68 <bt_gatt_attr_read>
}
   114f2:	b004      	add	sp, #16
   114f4:	bd10      	pop	{r4, pc}
   114f6:	bf00      	nop
   114f8:	20000560 	.word	0x20000560

000114fc <read_humidity_characteristic_cb>:
{
   114fc:	b510      	push	{r4, lr}
   114fe:	b084      	sub	sp, #16
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &humidityValue, sizeof(humidityValue));
   11500:	2405      	movs	r4, #5
   11502:	9402      	str	r4, [sp, #8]
   11504:	4c04      	ldr	r4, [pc, #16]	; (11518 <read_humidity_characteristic_cb+0x1c>)
   11506:	9401      	str	r4, [sp, #4]
   11508:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   1150c:	9400      	str	r4, [sp, #0]
   1150e:	f01d faab 	bl	2ea68 <bt_gatt_attr_read>
}
   11512:	b004      	add	sp, #16
   11514:	bd10      	pop	{r4, pc}
   11516:	bf00      	nop
   11518:	20000558 	.word	0x20000558

0001151c <read_temperature_characteristic_cb>:
{
   1151c:	b510      	push	{r4, lr}
   1151e:	b084      	sub	sp, #16
	return bt_gatt_attr_read(conn, attr, buf, len, offset, temperatureValue, sizeof(temperatureValue));
   11520:	2405      	movs	r4, #5
   11522:	9402      	str	r4, [sp, #8]
   11524:	4c04      	ldr	r4, [pc, #16]	; (11538 <read_temperature_characteristic_cb+0x1c>)
   11526:	9401      	str	r4, [sp, #4]
   11528:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   1152c:	9400      	str	r4, [sp, #0]
   1152e:	f01d fa9b 	bl	2ea68 <bt_gatt_attr_read>
}
   11532:	b004      	add	sp, #16
   11534:	bd10      	pop	{r4, pc}
   11536:	bf00      	nop
   11538:	20000568 	.word	0x20000568

0001153c <on_sent>:

void on_sent(struct bt_conn *conn, void *user_data)
{
   1153c:	b508      	push	{r3, lr}
   1153e:	4601      	mov	r1, r0
   11540:	4b08      	ldr	r3, [pc, #32]	; (11564 <on_sent+0x28>)
   11542:	4a09      	ldr	r2, [pc, #36]	; (11568 <on_sent+0x2c>)
   11544:	1a9b      	subs	r3, r3, r2
   11546:	08db      	lsrs	r3, r3, #3
    ARG_UNUSED(user_data);
    LOG_INF("Notification sent on connection %p", (void *)conn);
   11548:	f04f 0200 	mov.w	r2, #0
   1154c:	2003      	movs	r0, #3
   1154e:	f360 0202 	bfi	r2, r0, #0, #3
   11552:	f36f 02c5 	bfc	r2, #3, #3
   11556:	f363 128f 	bfi	r2, r3, #6, #10
   1155a:	4804      	ldr	r0, [pc, #16]	; (1156c <on_sent+0x30>)
   1155c:	f002 f9d0 	bl	13900 <log_1>
}
   11560:	bd08      	pop	{r3, pc}
   11562:	bf00      	nop
   11564:	00031908 	.word	0x00031908
   11568:	00031908 	.word	0x00031908
   1156c:	00031ed8 	.word	0x00031ed8

00011570 <button_chrc_ccc_cfg_changed>:

void button_chrc_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
   11570:	b510      	push	{r4, lr}
   11572:	460c      	mov	r4, r1
   11574:	4b0f      	ldr	r3, [pc, #60]	; (115b4 <button_chrc_ccc_cfg_changed+0x44>)
   11576:	4a10      	ldr	r2, [pc, #64]	; (115b8 <button_chrc_ccc_cfg_changed+0x48>)
   11578:	1a9b      	subs	r3, r3, r2
   1157a:	08db      	lsrs	r3, r3, #3
    bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);
    LOG_INF("Notifications %s", notif_enabled? "enabled":"disabled");
   1157c:	f04f 0200 	mov.w	r2, #0
   11580:	2103      	movs	r1, #3
   11582:	f361 0202 	bfi	r2, r1, #0, #3
   11586:	f36f 02c5 	bfc	r2, #3, #3
   1158a:	f363 128f 	bfi	r2, r3, #6, #10
   1158e:	2c01      	cmp	r4, #1
   11590:	d00d      	beq.n	115ae <button_chrc_ccc_cfg_changed+0x3e>
   11592:	490a      	ldr	r1, [pc, #40]	; (115bc <button_chrc_ccc_cfg_changed+0x4c>)
   11594:	480a      	ldr	r0, [pc, #40]	; (115c0 <button_chrc_ccc_cfg_changed+0x50>)
   11596:	f002 f9b3 	bl	13900 <log_1>

    notifications_enabled = notif_enabled? BT_BUTTON_NOTIFICATIONS_ENABLED:BT_BUTTON_NOTIFICATIONS_DISABLED;
   1159a:	1e60      	subs	r0, r4, #1
   1159c:	bf18      	it	ne
   1159e:	2001      	movne	r0, #1
   115a0:	4b08      	ldr	r3, [pc, #32]	; (115c4 <button_chrc_ccc_cfg_changed+0x54>)
   115a2:	7018      	strb	r0, [r3, #0]
    if (remote_callbacks.notif_changed) 
   115a4:	4b08      	ldr	r3, [pc, #32]	; (115c8 <button_chrc_ccc_cfg_changed+0x58>)
   115a6:	681b      	ldr	r3, [r3, #0]
   115a8:	b103      	cbz	r3, 115ac <button_chrc_ccc_cfg_changed+0x3c>
    {
        remote_callbacks.notif_changed(notifications_enabled);
   115aa:	4798      	blx	r3
    }
}
   115ac:	bd10      	pop	{r4, pc}
    LOG_INF("Notifications %s", notif_enabled? "enabled":"disabled");
   115ae:	4907      	ldr	r1, [pc, #28]	; (115cc <button_chrc_ccc_cfg_changed+0x5c>)
   115b0:	e7f0      	b.n	11594 <button_chrc_ccc_cfg_changed+0x24>
   115b2:	bf00      	nop
   115b4:	00031908 	.word	0x00031908
   115b8:	00031908 	.word	0x00031908
   115bc:	00031f04 	.word	0x00031f04
   115c0:	00031f10 	.word	0x00031f10
   115c4:	20003ff3 	.word	0x20003ff3
   115c8:	20002704 	.word	0x20002704
   115cc:	00031efc 	.word	0x00031efc

000115d0 <bt_ready>:


void bt_ready(int err)
{
   115d0:	b508      	push	{r3, lr}
    if (err)
   115d2:	b918      	cbnz	r0, 115dc <bt_ready+0xc>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   115d4:	480a      	ldr	r0, [pc, #40]	; (11600 <bt_ready+0x30>)
   115d6:	f013 f87b 	bl	246d0 <z_impl_k_sem_give>
    {
        LOG_ERR("bt_ready returned %d", err);
    }
    k_sem_give(&bt_init_ok);
}
   115da:	bd08      	pop	{r3, pc}
   115dc:	4601      	mov	r1, r0
   115de:	4b09      	ldr	r3, [pc, #36]	; (11604 <bt_ready+0x34>)
   115e0:	4a09      	ldr	r2, [pc, #36]	; (11608 <bt_ready+0x38>)
   115e2:	1a9b      	subs	r3, r3, r2
   115e4:	08db      	lsrs	r3, r3, #3
        LOG_ERR("bt_ready returned %d", err);
   115e6:	f04f 0200 	mov.w	r2, #0
   115ea:	2001      	movs	r0, #1
   115ec:	f360 0202 	bfi	r2, r0, #0, #3
   115f0:	f36f 02c5 	bfc	r2, #3, #3
   115f4:	f363 128f 	bfi	r2, r3, #6, #10
   115f8:	4804      	ldr	r0, [pc, #16]	; (1160c <bt_ready+0x3c>)
   115fa:	f002 f981 	bl	13900 <log_1>
   115fe:	e7e9      	b.n	115d4 <bt_ready+0x4>
   11600:	20000c5c 	.word	0x20000c5c
   11604:	00031908 	.word	0x00031908
   11608:	00031908 	.word	0x00031908
   1160c:	00031f24 	.word	0x00031f24

00011610 <send_button_notification>:



int send_button_notification(struct bt_conn *conn, float temperature)
{
   11610:	b530      	push	{r4, r5, lr}
   11612:	b08b      	sub	sp, #44	; 0x2c
   11614:	4605      	mov	r5, r0
    int err = 0;

    struct bt_gatt_notify_params params = {0};
   11616:	2400      	movs	r4, #0
   11618:	9404      	str	r4, [sp, #16]
   1161a:	9405      	str	r4, [sp, #20]
   1161c:	9406      	str	r4, [sp, #24]
   1161e:	9407      	str	r4, [sp, #28]
   11620:	9408      	str	r4, [sp, #32]
   11622:	9409      	str	r4, [sp, #36]	; 0x24
    const struct bt_gatt_attr *attr = &remote_srv.attrs[2];

    char buf[5];
    sprintf(buf, "%0.1f", temperature);
   11624:	4608      	mov	r0, r1
   11626:	f7ee ff1f 	bl	468 <__aeabi_f2d>
   1162a:	e9cd 0100 	strd	r0, r1, [sp]
   1162e:	4b0d      	ldr	r3, [pc, #52]	; (11664 <send_button_notification+0x54>)
   11630:	2205      	movs	r2, #5
   11632:	4621      	mov	r1, r4
   11634:	a802      	add	r0, sp, #8
   11636:	f01f fa76 	bl	30b26 <__sprintf_chk>
    strcpy(temperatureValue,buf);
   1163a:	4c0b      	ldr	r4, [pc, #44]	; (11668 <send_button_notification+0x58>)
   1163c:	2205      	movs	r2, #5
   1163e:	a902      	add	r1, sp, #8
   11640:	4620      	mov	r0, r4
   11642:	f01f fa92 	bl	30b6a <__strcpy_chk>

    params.attr = attr;
   11646:	4b09      	ldr	r3, [pc, #36]	; (1166c <send_button_notification+0x5c>)
   11648:	9305      	str	r3, [sp, #20]
    params.data = &temperatureValue;
   1164a:	9406      	str	r4, [sp, #24]
    params.len = sizeof(temperatureValue);
   1164c:	2305      	movs	r3, #5
   1164e:	f8ad 301c 	strh.w	r3, [sp, #28]
    params.func = on_sent;
   11652:	4b07      	ldr	r3, [pc, #28]	; (11670 <send_button_notification+0x60>)
   11654:	9308      	str	r3, [sp, #32]

    err = bt_gatt_notify_cb(conn, &params);
   11656:	a904      	add	r1, sp, #16
   11658:	4628      	mov	r0, r5
   1165a:	f00a fcab 	bl	1bfb4 <bt_gatt_notify_cb>

    return err;
}
   1165e:	b00b      	add	sp, #44	; 0x2c
   11660:	bd30      	pop	{r4, r5, pc}
   11662:	bf00      	nop
   11664:	00031f3c 	.word	0x00031f3c
   11668:	20000568 	.word	0x20000568
   1166c:	00032030 	.word	0x00032030
   11670:	0001153d 	.word	0x0001153d

00011674 <setTemperature>:

void setTemperature(float temperature)
{
   11674:	b510      	push	{r4, lr}
   11676:	b084      	sub	sp, #16
    char buf[5];
    sprintf(buf, "%0.1f", temperature);
   11678:	f7ee fef6 	bl	468 <__aeabi_f2d>
   1167c:	e9cd 0100 	strd	r0, r1, [sp]
   11680:	4b10      	ldr	r3, [pc, #64]	; (116c4 <setTemperature+0x50>)
   11682:	2205      	movs	r2, #5
   11684:	2100      	movs	r1, #0
   11686:	a802      	add	r0, sp, #8
   11688:	f01f fa4d 	bl	30b26 <__sprintf_chk>
    strcpy(temperatureValue,buf);
   1168c:	2205      	movs	r2, #5
   1168e:	a902      	add	r1, sp, #8
   11690:	480d      	ldr	r0, [pc, #52]	; (116c8 <setTemperature+0x54>)
   11692:	f01f fa6a 	bl	30b6a <__strcpy_chk>
   11696:	4b0d      	ldr	r3, [pc, #52]	; (116cc <setTemperature+0x58>)
   11698:	4a0d      	ldr	r2, [pc, #52]	; (116d0 <setTemperature+0x5c>)
   1169a:	1a9b      	subs	r3, r3, r2
   1169c:	08db      	lsrs	r3, r3, #3
    LOG_WRN("temperature: %s", log_strdup(buf)); //Yields: "sprintf 1.234500"
   1169e:	f04f 0400 	mov.w	r4, #0
   116a2:	2202      	movs	r2, #2
   116a4:	f362 0402 	bfi	r4, r2, #0, #3
   116a8:	f36f 04c5 	bfc	r4, #3, #3
   116ac:	f363 148f 	bfi	r4, r3, #6, #10
   116b0:	a802      	add	r0, sp, #8
   116b2:	f001 ff83 	bl	135bc <z_log_strdup>
   116b6:	4601      	mov	r1, r0
   116b8:	4622      	mov	r2, r4
   116ba:	4806      	ldr	r0, [pc, #24]	; (116d4 <setTemperature+0x60>)
   116bc:	f002 f920 	bl	13900 <log_1>
}
   116c0:	b004      	add	sp, #16
   116c2:	bd10      	pop	{r4, pc}
   116c4:	00031f3c 	.word	0x00031f3c
   116c8:	20000568 	.word	0x20000568
   116cc:	00031908 	.word	0x00031908
   116d0:	00031908 	.word	0x00031908
   116d4:	00031f44 	.word	0x00031f44

000116d8 <setHumidity>:

void setHumidity(float humidity)
{
   116d8:	b510      	push	{r4, lr}
   116da:	b084      	sub	sp, #16
    char buf[5];
    sprintf(buf, "%0.1f", humidity);
   116dc:	f7ee fec4 	bl	468 <__aeabi_f2d>
   116e0:	e9cd 0100 	strd	r0, r1, [sp]
   116e4:	4b10      	ldr	r3, [pc, #64]	; (11728 <setHumidity+0x50>)
   116e6:	2205      	movs	r2, #5
   116e8:	2100      	movs	r1, #0
   116ea:	a802      	add	r0, sp, #8
   116ec:	f01f fa1b 	bl	30b26 <__sprintf_chk>
    strcpy(humidityValue,buf);
   116f0:	2205      	movs	r2, #5
   116f2:	a902      	add	r1, sp, #8
   116f4:	480d      	ldr	r0, [pc, #52]	; (1172c <setHumidity+0x54>)
   116f6:	f01f fa38 	bl	30b6a <__strcpy_chk>
   116fa:	4b0d      	ldr	r3, [pc, #52]	; (11730 <setHumidity+0x58>)
   116fc:	4a0d      	ldr	r2, [pc, #52]	; (11734 <setHumidity+0x5c>)
   116fe:	1a9b      	subs	r3, r3, r2
   11700:	08db      	lsrs	r3, r3, #3
    LOG_WRN("Humidity: %s", log_strdup(buf)); //Yields: "sprintf 1.234500"
   11702:	f04f 0400 	mov.w	r4, #0
   11706:	2202      	movs	r2, #2
   11708:	f362 0402 	bfi	r4, r2, #0, #3
   1170c:	f36f 04c5 	bfc	r4, #3, #3
   11710:	f363 148f 	bfi	r4, r3, #6, #10
   11714:	a802      	add	r0, sp, #8
   11716:	f001 ff51 	bl	135bc <z_log_strdup>
   1171a:	4601      	mov	r1, r0
   1171c:	4622      	mov	r2, r4
   1171e:	4806      	ldr	r0, [pc, #24]	; (11738 <setHumidity+0x60>)
   11720:	f002 f8ee 	bl	13900 <log_1>
}
   11724:	b004      	add	sp, #16
   11726:	bd10      	pop	{r4, pc}
   11728:	00031f3c 	.word	0x00031f3c
   1172c:	20000558 	.word	0x20000558
   11730:	00031908 	.word	0x00031908
   11734:	00031908 	.word	0x00031908
   11738:	00031f54 	.word	0x00031f54

0001173c <setState>:

void setState(bool state)
{
   1173c:	b510      	push	{r4, lr}
   1173e:	b082      	sub	sp, #8
    char buf[5];
    if (state)
   11740:	b310      	cbz	r0, 11788 <setState+0x4c>
    {
        strcpy(buf, "ON");
   11742:	4b13      	ldr	r3, [pc, #76]	; (11790 <setState+0x54>)
   11744:	681b      	ldr	r3, [r3, #0]
   11746:	f8ad 3000 	strh.w	r3, [sp]
   1174a:	0c1b      	lsrs	r3, r3, #16
   1174c:	f88d 3002 	strb.w	r3, [sp, #2]
    else
    {
        strcpy(buf, "OFF");
    }
    
    strcpy(stateValue,buf);
   11750:	2205      	movs	r2, #5
   11752:	4669      	mov	r1, sp
   11754:	480f      	ldr	r0, [pc, #60]	; (11794 <setState+0x58>)
   11756:	f01f fa08 	bl	30b6a <__strcpy_chk>
   1175a:	4b0f      	ldr	r3, [pc, #60]	; (11798 <setState+0x5c>)
   1175c:	4a0f      	ldr	r2, [pc, #60]	; (1179c <setState+0x60>)
   1175e:	1a9b      	subs	r3, r3, r2
   11760:	08db      	lsrs	r3, r3, #3
    LOG_WRN("State: %s", log_strdup(buf)); //Yields: "sprintf 1.234500"
   11762:	f04f 0400 	mov.w	r4, #0
   11766:	2202      	movs	r2, #2
   11768:	f362 0402 	bfi	r4, r2, #0, #3
   1176c:	f36f 04c5 	bfc	r4, #3, #3
   11770:	f363 148f 	bfi	r4, r3, #6, #10
   11774:	4668      	mov	r0, sp
   11776:	f001 ff21 	bl	135bc <z_log_strdup>
   1177a:	4601      	mov	r1, r0
   1177c:	4622      	mov	r2, r4
   1177e:	4808      	ldr	r0, [pc, #32]	; (117a0 <setState+0x64>)
   11780:	f002 f8be 	bl	13900 <log_1>
}
   11784:	b002      	add	sp, #8
   11786:	bd10      	pop	{r4, pc}
        strcpy(buf, "OFF");
   11788:	4b06      	ldr	r3, [pc, #24]	; (117a4 <setState+0x68>)
   1178a:	9300      	str	r3, [sp, #0]
   1178c:	e7e0      	b.n	11750 <setState+0x14>
   1178e:	bf00      	nop
   11790:	00031f64 	.word	0x00031f64
   11794:	20000560 	.word	0x20000560
   11798:	00031908 	.word	0x00031908
   1179c:	00031908 	.word	0x00031908
   117a0:	00031f68 	.word	0x00031f68
   117a4:	0046464f 	.word	0x0046464f

000117a8 <bluetooth_init>:

int bluetooth_init(struct bt_conn_cb *bt_cb, struct bt_remote_service_cb *remote_cb)
{
   117a8:	b530      	push	{r4, r5, lr}
   117aa:	b089      	sub	sp, #36	; 0x24
   117ac:	4605      	mov	r5, r0
   117ae:	460c      	mov	r4, r1
   117b0:	4b31      	ldr	r3, [pc, #196]	; (11878 <bluetooth_init+0xd0>)
   117b2:	4a32      	ldr	r2, [pc, #200]	; (1187c <bluetooth_init+0xd4>)
   117b4:	1a9b      	subs	r3, r3, r2
   117b6:	08db      	lsrs	r3, r3, #3
    int err;
    LOG_INF("Initializing bluetooth...");
   117b8:	f04f 0100 	mov.w	r1, #0
   117bc:	2203      	movs	r2, #3
   117be:	f362 0102 	bfi	r1, r2, #0, #3
   117c2:	f36f 01c5 	bfc	r1, #3, #3
   117c6:	f363 118f 	bfi	r1, r3, #6, #10
   117ca:	482d      	ldr	r0, [pc, #180]	; (11880 <bluetooth_init+0xd8>)
   117cc:	f002 f868 	bl	138a0 <log_0>

    if (bt_cb == NULL || remote_cb == NULL) 
   117d0:	2d00      	cmp	r5, #0
   117d2:	d04c      	beq.n	1186e <bluetooth_init+0xc6>
   117d4:	2c00      	cmp	r4, #0
   117d6:	d04c      	beq.n	11872 <bluetooth_init+0xca>
    {
        return -NRFX_ERROR_NULL;
    }

    bt_conn_cb_register(bt_cb);
   117d8:	4628      	mov	r0, r5
   117da:	f008 f8a5 	bl	19928 <bt_conn_cb_register>
    remote_callbacks.notif_changed = remote_cb->notif_changed;
   117de:	6822      	ldr	r2, [r4, #0]
   117e0:	4b28      	ldr	r3, [pc, #160]	; (11884 <bluetooth_init+0xdc>)
   117e2:	601a      	str	r2, [r3, #0]
    remote_callbacks.data_received = remote_cb->data_received;
   117e4:	6862      	ldr	r2, [r4, #4]
   117e6:	605a      	str	r2, [r3, #4]

    err = bt_enable(bt_ready);
   117e8:	4827      	ldr	r0, [pc, #156]	; (11888 <bluetooth_init+0xe0>)
   117ea:	f006 fbfb 	bl	17fe4 <bt_enable>
    if (err) 
   117ee:	4604      	mov	r4, r0
   117f0:	b9c8      	cbnz	r0, 11826 <bluetooth_init+0x7e>
	return z_impl_k_sem_take(sem, timeout);
   117f2:	f04f 32ff 	mov.w	r2, #4294967295
   117f6:	f04f 33ff 	mov.w	r3, #4294967295
   117fa:	4824      	ldr	r0, [pc, #144]	; (1188c <bluetooth_init+0xe4>)
   117fc:	f012 ffb0 	bl	24760 <z_impl_k_sem_take>
        return err;
    }
    
    k_sem_take(&bt_init_ok, K_FOREVER);

    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
   11800:	ac03      	add	r4, sp, #12
   11802:	4d23      	ldr	r5, [pc, #140]	; (11890 <bluetooth_init+0xe8>)
   11804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11808:	682b      	ldr	r3, [r5, #0]
   1180a:	6023      	str	r3, [r4, #0]
   1180c:	2301      	movs	r3, #1
   1180e:	9300      	str	r3, [sp, #0]
   11810:	4b20      	ldr	r3, [pc, #128]	; (11894 <bluetooth_init+0xec>)
   11812:	2202      	movs	r2, #2
   11814:	4920      	ldr	r1, [pc, #128]	; (11898 <bluetooth_init+0xf0>)
   11816:	a803      	add	r0, sp, #12
   11818:	f007 fa66 	bl	18ce8 <bt_le_adv_start>
    if (err) 
   1181c:	4604      	mov	r4, r0
   1181e:	b9a0      	cbnz	r0, 1184a <bluetooth_init+0xa2>
        LOG_ERR("Couldn't start advertising (err = %d)", err);
        return err;
    }

    return err;
   11820:	4620      	mov	r0, r4
   11822:	b009      	add	sp, #36	; 0x24
   11824:	bd30      	pop	{r4, r5, pc}
   11826:	4b14      	ldr	r3, [pc, #80]	; (11878 <bluetooth_init+0xd0>)
   11828:	4a14      	ldr	r2, [pc, #80]	; (1187c <bluetooth_init+0xd4>)
   1182a:	1a9b      	subs	r3, r3, r2
   1182c:	08db      	lsrs	r3, r3, #3
        LOG_ERR("bt_enable returned %d", err);
   1182e:	f04f 0200 	mov.w	r2, #0
   11832:	2101      	movs	r1, #1
   11834:	f361 0202 	bfi	r2, r1, #0, #3
   11838:	f36f 02c5 	bfc	r2, #3, #3
   1183c:	f363 128f 	bfi	r2, r3, #6, #10
   11840:	4601      	mov	r1, r0
   11842:	4816      	ldr	r0, [pc, #88]	; (1189c <bluetooth_init+0xf4>)
   11844:	f002 f85c 	bl	13900 <log_1>
        return err;
   11848:	e7ea      	b.n	11820 <bluetooth_init+0x78>
   1184a:	4b0b      	ldr	r3, [pc, #44]	; (11878 <bluetooth_init+0xd0>)
   1184c:	4a0b      	ldr	r2, [pc, #44]	; (1187c <bluetooth_init+0xd4>)
   1184e:	1a9b      	subs	r3, r3, r2
   11850:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Couldn't start advertising (err = %d)", err);
   11852:	f04f 0200 	mov.w	r2, #0
   11856:	2101      	movs	r1, #1
   11858:	f361 0202 	bfi	r2, r1, #0, #3
   1185c:	f36f 02c5 	bfc	r2, #3, #3
   11860:	f363 128f 	bfi	r2, r3, #6, #10
   11864:	4601      	mov	r1, r0
   11866:	480e      	ldr	r0, [pc, #56]	; (118a0 <bluetooth_init+0xf8>)
   11868:	f002 f84a 	bl	13900 <log_1>
        return err;
   1186c:	e7d8      	b.n	11820 <bluetooth_init+0x78>
        return -NRFX_ERROR_NULL;
   1186e:	4c0d      	ldr	r4, [pc, #52]	; (118a4 <bluetooth_init+0xfc>)
   11870:	e7d6      	b.n	11820 <bluetooth_init+0x78>
   11872:	4c0c      	ldr	r4, [pc, #48]	; (118a4 <bluetooth_init+0xfc>)
   11874:	e7d4      	b.n	11820 <bluetooth_init+0x78>
   11876:	bf00      	nop
   11878:	00031908 	.word	0x00031908
   1187c:	00031908 	.word	0x00031908
   11880:	00031f74 	.word	0x00031f74
   11884:	20002704 	.word	0x20002704
   11888:	000115d1 	.word	0x000115d1
   1188c:	20000c5c 	.word	0x20000c5c
   11890:	00031a80 	.word	0x00031a80
   11894:	000320d0 	.word	0x000320d0
   11898:	00031ff8 	.word	0x00031ff8
   1189c:	00031f90 	.word	0x00031f90
   118a0:	00031fa8 	.word	0x00031fa8
   118a4:	f452fff7 	.word	0xf452fff7

000118a8 <sendSignalToDHTSensor>:


//--------------------------------------------------------
// PRIVATE FUNCTIONS
void sendSignalToDHTSensor()
{
   118a8:	b510      	push	{r4, lr}
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   118aa:	4c0c      	ldr	r4, [pc, #48]	; (118dc <sendSignalToDHTSensor+0x34>)
   118ac:	2300      	movs	r3, #0
   118ae:	f8c4 372c 	str.w	r3, [r4, #1836]	; 0x72c
    {
        return;
    }

    do {
        nrf_delay_us(1000);
   118b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   118b6:	f01e fd22 	bl	302fe <nrfx_busy_wait>
   118ba:	2303      	movs	r3, #3
   118bc:	f8c4 372c 	str.w	r3, [r4, #1836]	; 0x72c
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   118c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   118c4:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   118c8:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
   118cc:	2412      	movs	r4, #18
   118ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   118d2:	f01e fd14 	bl	302fe <nrfx_busy_wait>
    } while (--ms_time);
   118d6:	3c01      	subs	r4, #1
   118d8:	d1f9      	bne.n	118ce <sendSignalToDHTSensor+0x26>
  /* MCU sends out start signal and pulls down voltage for at least 18ms to lest DHT detect the signal */
  nrf_gpio_cfg_output(DHT_PIN);
  nrf_gpio_pin_set(DHT_PIN);
  nrf_gpio_pin_clear(DHT_PIN);
  nrf_delay_ms(18);
}
   118da:	bd10      	pop	{r4, pc}
   118dc:	50000300 	.word	0x50000300

000118e0 <waitForDHTResponse>:

DHTErrorCode waitForDHTResponse()
{
   118e0:	b510      	push	{r4, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   118e2:	4c1a      	ldr	r4, [pc, #104]	; (1194c <waitForDHTResponse+0x6c>)
   118e4:	2300      	movs	r3, #0
   118e6:	f8c4 372c 	str.w	r3, [r4, #1836]	; 0x72c
  /* MCU waits for DHT response */
  nrf_gpio_cfg_input(DHT_PIN, NRF_GPIO_PIN_NOPULL);
  nrf_delay_us(50);
   118ea:	2032      	movs	r0, #50	; 0x32
   118ec:	f01e fd07 	bl	302fe <nrfx_busy_wait>
    return p_reg->IN;
   118f0:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510

  if(nrf_gpio_pin_read(DHT_PIN)!=0) 
   118f4:	f413 6f00 	tst.w	r3, #2048	; 0x800
   118f8:	d110      	bne.n	1191c <waitForDHTResponse+0x3c>
  {
      printk("no ACK\n");
      return DHT_FAIL;
  }

  int cntr = 18;
   118fa:	2412      	movs	r4, #18
   118fc:	4b13      	ldr	r3, [pc, #76]	; (1194c <waitForDHTResponse+0x6c>)
   118fe:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510

  /* DHT sends out response signal and keeps it for 80us */
  while(nrf_gpio_pin_read(DHT_PIN)==0) 
   11902:	f413 6f00 	tst.w	r3, #2048	; 0x800
   11906:	d10e      	bne.n	11926 <waitForDHTResponse+0x46>
  {  
	  nrf_delay_us(5);
   11908:	2005      	movs	r0, #5
   1190a:	f01e fcf8 	bl	302fe <nrfx_busy_wait>
    if (--cntr==0) 
   1190e:	3c01      	subs	r4, #1
   11910:	d1f4      	bne.n	118fc <waitForDHTResponse+0x1c>
    {
      printk("no ACK2\n"); 
   11912:	480f      	ldr	r0, [pc, #60]	; (11950 <waitForDHTResponse+0x70>)
   11914:	f01a fc18 	bl	2c148 <printk>
      return DHT_FAIL;
   11918:	2001      	movs	r0, #1
      printk("no ACK3\n"); /* signal should be up for the ACK here */
      return DHT_FAIL;
    }
  }
  return DHT_SUCCESS;
}
   1191a:	bd10      	pop	{r4, pc}
      printk("no ACK\n");
   1191c:	480d      	ldr	r0, [pc, #52]	; (11954 <waitForDHTResponse+0x74>)
   1191e:	f01a fc13 	bl	2c148 <printk>
      return DHT_FAIL;
   11922:	2001      	movs	r0, #1
   11924:	e7f9      	b.n	1191a <waitForDHTResponse+0x3a>
  cntr = 18;
   11926:	2412      	movs	r4, #18
   11928:	4b08      	ldr	r3, [pc, #32]	; (1194c <waitForDHTResponse+0x6c>)
   1192a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
  while(nrf_gpio_pin_read(DHT_PIN)!=0) 
   1192e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   11932:	d009      	beq.n	11948 <waitForDHTResponse+0x68>
	  nrf_delay_us(5);
   11934:	2005      	movs	r0, #5
   11936:	f01e fce2 	bl	302fe <nrfx_busy_wait>
    if (--cntr==0) 
   1193a:	3c01      	subs	r4, #1
   1193c:	d1f4      	bne.n	11928 <waitForDHTResponse+0x48>
      printk("no ACK3\n"); /* signal should be up for the ACK here */
   1193e:	4806      	ldr	r0, [pc, #24]	; (11958 <waitForDHTResponse+0x78>)
   11940:	f01a fc02 	bl	2c148 <printk>
      return DHT_FAIL;
   11944:	2001      	movs	r0, #1
   11946:	e7e8      	b.n	1191a <waitForDHTResponse+0x3a>
  return DHT_SUCCESS;
   11948:	2000      	movs	r0, #0
   1194a:	e7e6      	b.n	1191a <waitForDHTResponse+0x3a>
   1194c:	50000300 	.word	0x50000300
   11950:	000320e0 	.word	0x000320e0
   11954:	000320d8 	.word	0x000320d8
   11958:	000320ec 	.word	0x000320ec

0001195c <readingDataFromDHTSensor>:

DHTErrorCode readingDataFromDHTSensor(uint8_t *buffer)
{
   1195c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11960:	4605      	mov	r5, r0
  int i = 0;
  int data = 0;
  int loopBits = 40;
   11962:	2728      	movs	r7, #40	; 0x28
  int data = 0;
   11964:	2600      	movs	r6, #0
  int i = 0;
   11966:	46b0      	mov	r8, r6
  do 
  {
    int cntr = 11; /* wait max 55 us */
   11968:	240b      	movs	r4, #11
   1196a:	4b1a      	ldr	r3, [pc, #104]	; (119d4 <readingDataFromDHTSensor+0x78>)
   1196c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    while(nrf_gpio_pin_read(DHT_PIN)==0) 
   11970:	f413 6f00 	tst.w	r3, #2048	; 0x800
   11974:	d10a      	bne.n	1198c <readingDataFromDHTSensor+0x30>
    {
      nrf_delay_us(5);
   11976:	2005      	movs	r0, #5
   11978:	f01e fcc1 	bl	302fe <nrfx_busy_wait>
      if (--cntr==0) 
   1197c:	3c01      	subs	r4, #1
   1197e:	d1f4      	bne.n	1196a <readingDataFromDHTSensor+0xe>
      {
        printk("DHT11_NO_DATA_0\n");
   11980:	4815      	ldr	r0, [pc, #84]	; (119d8 <readingDataFromDHTSensor+0x7c>)
   11982:	f01a fbe1 	bl	2c148 <printk>
        return DHT_FAIL;
   11986:	2001      	movs	r0, #1
      data = 0;
    }
  } while(--loopBits!=0);

  return DHT_SUCCESS;
}
   11988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cntr = 15; /* wait max 75 us */
   1198c:	240f      	movs	r4, #15
   1198e:	4b11      	ldr	r3, [pc, #68]	; (119d4 <readingDataFromDHTSensor+0x78>)
   11990:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    while(nrf_gpio_pin_read(DHT_PIN)!=0) 
   11994:	f413 6f00 	tst.w	r3, #2048	; 0x800
   11998:	d009      	beq.n	119ae <readingDataFromDHTSensor+0x52>
      nrf_delay_us(5);
   1199a:	2005      	movs	r0, #5
   1199c:	f01e fcaf 	bl	302fe <nrfx_busy_wait>
      if (--cntr==0) 
   119a0:	3c01      	subs	r4, #1
   119a2:	d1f4      	bne.n	1198e <readingDataFromDHTSensor+0x32>
        printk("DHT11_NO_DATA_1\n");
   119a4:	480d      	ldr	r0, [pc, #52]	; (119dc <readingDataFromDHTSensor+0x80>)
   119a6:	f01a fbcf 	bl	2c148 <printk>
        return DHT_FAIL;
   119aa:	2001      	movs	r0, #1
   119ac:	e7ec      	b.n	11988 <readingDataFromDHTSensor+0x2c>
    data <<= 1; /* next data bit */
   119ae:	0076      	lsls	r6, r6, #1
    if (cntr<10) /* data signal high > 30 us ==> data bit 1 */
   119b0:	2c09      	cmp	r4, #9
   119b2:	dc01      	bgt.n	119b8 <readingDataFromDHTSensor+0x5c>
      data |= 1;
   119b4:	f046 0601 	orr.w	r6, r6, #1
    if ((loopBits&0x7)==1) /* next byte */
   119b8:	f007 0307 	and.w	r3, r7, #7
   119bc:	2b01      	cmp	r3, #1
   119be:	d003      	beq.n	119c8 <readingDataFromDHTSensor+0x6c>
  } while(--loopBits!=0);
   119c0:	3f01      	subs	r7, #1
   119c2:	d1d1      	bne.n	11968 <readingDataFromDHTSensor+0xc>
  return DHT_SUCCESS;
   119c4:	2000      	movs	r0, #0
   119c6:	e7df      	b.n	11988 <readingDataFromDHTSensor+0x2c>
      buffer[i] = data;
   119c8:	f805 6008 	strb.w	r6, [r5, r8]
      i++;
   119cc:	f108 0801 	add.w	r8, r8, #1
      data = 0;
   119d0:	2600      	movs	r6, #0
   119d2:	e7f5      	b.n	119c0 <readingDataFromDHTSensor+0x64>
   119d4:	50000300 	.word	0x50000300
   119d8:	000320f8 	.word	0x000320f8
   119dc:	0003210c 	.word	0x0003210c

000119e0 <verifyReturnedBuffer>:
  
DHTErrorCode verifyReturnedBuffer(uint8_t *buffer)
{
   119e0:	b508      	push	{r3, lr}
  if ((uint8_t)(buffer[0]+buffer[1]+buffer[2]+buffer[3])!=buffer[4]) 
   119e2:	7803      	ldrb	r3, [r0, #0]
   119e4:	7842      	ldrb	r2, [r0, #1]
   119e6:	4413      	add	r3, r2
   119e8:	f990 2002 	ldrsb.w	r2, [r0, #2]
   119ec:	fa42 f383 	sxtab	r3, r2, r3
   119f0:	f990 2003 	ldrsb.w	r2, [r0, #3]
   119f4:	fa42 f383 	sxtab	r3, r2, r3
   119f8:	b25b      	sxtb	r3, r3
   119fa:	f990 2004 	ldrsb.w	r2, [r0, #4]
   119fe:	4293      	cmp	r3, r2
   11a00:	d101      	bne.n	11a06 <verifyReturnedBuffer+0x26>
  {
      printk("DHT11_BAD_CRC\n");
      return DHT_FAIL;
  }
  return DHT_SUCCESS;
   11a02:	2000      	movs	r0, #0
}
   11a04:	bd08      	pop	{r3, pc}
      printk("DHT11_BAD_CRC\n");
   11a06:	4802      	ldr	r0, [pc, #8]	; (11a10 <verifyReturnedBuffer+0x30>)
   11a08:	f01a fb9e 	bl	2c148 <printk>
      return DHT_FAIL;
   11a0c:	2001      	movs	r0, #1
   11a0e:	e7f9      	b.n	11a04 <verifyReturnedBuffer+0x24>
   11a10:	00032120 	.word	0x00032120

00011a14 <getTemperature>:

  return DHT_SUCCESS;
}

float getTemperature(struct DHTReadings* dht)
{
   11a14:	b570      	push	{r4, r5, r6, lr}
  float temperature = (float) (dht->temperatureIntPart + (dht->temperatureDecimalPart / 10.0));
   11a16:	6806      	ldr	r6, [r0, #0]
   11a18:	6840      	ldr	r0, [r0, #4]
   11a1a:	f7ee fd13 	bl	444 <__aeabi_i2d>
   11a1e:	2200      	movs	r2, #0
   11a20:	4b07      	ldr	r3, [pc, #28]	; (11a40 <getTemperature+0x2c>)
   11a22:	f7ee fea3 	bl	76c <__aeabi_ddiv>
   11a26:	4604      	mov	r4, r0
   11a28:	460d      	mov	r5, r1
   11a2a:	4630      	mov	r0, r6
   11a2c:	f7ee fd0a 	bl	444 <__aeabi_i2d>
   11a30:	4622      	mov	r2, r4
   11a32:	462b      	mov	r3, r5
   11a34:	f7ee fbba 	bl	1ac <__adddf3>
   11a38:	f7ee ff80 	bl	93c <__aeabi_d2f>
  return temperature;
}
   11a3c:	bd70      	pop	{r4, r5, r6, pc}
   11a3e:	bf00      	nop
   11a40:	40240000 	.word	0x40240000

00011a44 <getHumidity>:

float getHumidity(struct DHTReadings* dht)
{
   11a44:	b570      	push	{r4, r5, r6, lr}
  float humidity = (float) (dht->humidityIntPart + (dht->humidityDecimalPart / 10.0));
   11a46:	6886      	ldr	r6, [r0, #8]
   11a48:	68c0      	ldr	r0, [r0, #12]
   11a4a:	f7ee fcfb 	bl	444 <__aeabi_i2d>
   11a4e:	2200      	movs	r2, #0
   11a50:	4b07      	ldr	r3, [pc, #28]	; (11a70 <getHumidity+0x2c>)
   11a52:	f7ee fe8b 	bl	76c <__aeabi_ddiv>
   11a56:	4604      	mov	r4, r0
   11a58:	460d      	mov	r5, r1
   11a5a:	4630      	mov	r0, r6
   11a5c:	f7ee fcf2 	bl	444 <__aeabi_i2d>
   11a60:	4622      	mov	r2, r4
   11a62:	462b      	mov	r3, r5
   11a64:	f7ee fba2 	bl	1ac <__adddf3>
   11a68:	f7ee ff68 	bl	93c <__aeabi_d2f>
  return humidity;
}
   11a6c:	bd70      	pop	{r4, r5, r6, pc}
   11a6e:	bf00      	nop
   11a70:	40240000 	.word	0x40240000

00011a74 <spi_event_handler>:
	.rx_length = SPI_TX_BUFSIZE
};

static void spi_event_handler(nrfx_spi_evt_t const * p_event, void * p_context)
{
	spi_xfer_done = true;
   11a74:	4b01      	ldr	r3, [pc, #4]	; (11a7c <spi_event_handler+0x8>)
   11a76:	2201      	movs	r2, #1
   11a78:	701a      	strb	r2, [r3, #0]
}
   11a7a:	4770      	bx	lr
   11a7c:	20003ff4 	.word	0x20003ff4

00011a80 <spi_init>:
void spi_init(void)
{
   11a80:	b500      	push	{lr}
   11a82:	b087      	sub	sp, #28
	nrfx_spi_config_t spi_config = NRFX_SPI_DEFAULT_CONFIG(
   11a84:	2300      	movs	r3, #0
   11a86:	9302      	str	r3, [sp, #8]
   11a88:	9304      	str	r3, [sp, #16]
   11a8a:	9305      	str	r3, [sp, #20]
   11a8c:	221c      	movs	r2, #28
   11a8e:	f88d 2004 	strb.w	r2, [sp, #4]
   11a92:	221d      	movs	r2, #29
   11a94:	f88d 2005 	strb.w	r2, [sp, #5]
   11a98:	221e      	movs	r2, #30
   11a9a:	f88d 2006 	strb.w	r2, [sp, #6]
   11a9e:	221f      	movs	r2, #31
   11aa0:	f88d 2007 	strb.w	r2, [sp, #7]
   11aa4:	2207      	movs	r2, #7
   11aa6:	f88d 2008 	strb.w	r2, [sp, #8]
   11aaa:	22ff      	movs	r2, #255	; 0xff
   11aac:	f88d 2009 	strb.w	r2, [sp, #9]
   11ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11ab4:	9203      	str	r2, [sp, #12]
		SPI_SCK_PIN, SPI_MOSI_PIN,
		SPI_MISO_PIN, SPI_SS_PIN
	);

	nrfx_err_t err_spi_init = nrfx_spi_init(&spi, &spi_config, spi_event_handler, NULL);
   11ab6:	4a07      	ldr	r2, [pc, #28]	; (11ad4 <spi_init+0x54>)
   11ab8:	a901      	add	r1, sp, #4
   11aba:	4807      	ldr	r0, [pc, #28]	; (11ad8 <spi_init+0x58>)
   11abc:	f010 fa6a 	bl	21f94 <nrfx_spi_init>
	if(err_spi_init == NRFX_SUCCESS)
   11ac0:	4b06      	ldr	r3, [pc, #24]	; (11adc <spi_init+0x5c>)
   11ac2:	4298      	cmp	r0, r3
   11ac4:	d002      	beq.n	11acc <spi_init+0x4c>
	{
		printk("Init SPI success\n");
	}
}
   11ac6:	b007      	add	sp, #28
   11ac8:	f85d fb04 	ldr.w	pc, [sp], #4
		printk("Init SPI success\n");
   11acc:	4804      	ldr	r0, [pc, #16]	; (11ae0 <spi_init+0x60>)
   11ace:	f01a fb3b 	bl	2c148 <printk>
}
   11ad2:	e7f8      	b.n	11ac6 <spi_init+0x46>
   11ad4:	00011a75 	.word	0x00011a75
   11ad8:	000321d0 	.word	0x000321d0
   11adc:	0bad0000 	.word	0x0bad0000
   11ae0:	00032130 	.word	0x00032130

00011ae4 <spi_uninit>:
void spi_uninit()
{
   11ae4:	b508      	push	{r3, lr}
	nrfx_spi_uninit(&spi);
   11ae6:	4803      	ldr	r0, [pc, #12]	; (11af4 <spi_uninit+0x10>)
   11ae8:	f010 fac6 	bl	22078 <nrfx_spi_uninit>
	printk("Uinit SPI success\n");
   11aec:	4802      	ldr	r0, [pc, #8]	; (11af8 <spi_uninit+0x14>)
   11aee:	f01a fb2b 	bl	2c148 <printk>
}
   11af2:	bd08      	pop	{r3, pc}
   11af4:	000321d0 	.word	0x000321d0
   11af8:	00032144 	.word	0x00032144

00011afc <ESP_write_data>:
	}
	while (!spi_xfer_done);
}

void ESP_write_data(float temperature, float humidity, int setPoint, int heaterState)
{
   11afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11afe:	b08f      	sub	sp, #60	; 0x3c
   11b00:	4604      	mov	r4, r0
	char str[30];
	sprintf(str, "t_%0.1f_h_%0.1f_s_%0.1d_hS_%d_end", temperature, humidity, setPoint, heaterState);
   11b02:	9305      	str	r3, [sp, #20]
   11b04:	9204      	str	r2, [sp, #16]
   11b06:	4608      	mov	r0, r1
   11b08:	f7ee fcae 	bl	468 <__aeabi_f2d>
   11b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   11b10:	4620      	mov	r0, r4
   11b12:	f7ee fca9 	bl	468 <__aeabi_f2d>
   11b16:	e9cd 0100 	strd	r0, r1, [sp]
   11b1a:	4b18      	ldr	r3, [pc, #96]	; (11b7c <ESP_write_data+0x80>)
   11b1c:	221e      	movs	r2, #30
   11b1e:	2100      	movs	r1, #0
   11b20:	a806      	add	r0, sp, #24
   11b22:	f01f f800 	bl	30b26 <__sprintf_chk>
	//sprintf(str, "hello world");
	nrfx_err_t err_com;
    spi_xfer_done = false;
   11b26:	2400      	movs	r4, #0
   11b28:	4b15      	ldr	r3, [pc, #84]	; (11b80 <ESP_write_data+0x84>)
   11b2a:	701c      	strb	r4, [r3, #0]
    memset(spi_tx_buf, 0, 32*sizeof(uint8_t));
   11b2c:	4d15      	ldr	r5, [pc, #84]	; (11b84 <ESP_write_data+0x88>)
   11b2e:	2720      	movs	r7, #32
   11b30:	463a      	mov	r2, r7
   11b32:	4621      	mov	r1, r4
   11b34:	4628      	mov	r0, r5
   11b36:	f01e fee3 	bl	30900 <memset>
	memset(spi_rx_buf, 0, 32*sizeof(uint8_t));
   11b3a:	463a      	mov	r2, r7
   11b3c:	4621      	mov	r1, r4
   11b3e:	4812      	ldr	r0, [pc, #72]	; (11b88 <ESP_write_data+0x8c>)
   11b40:	f01e fede 	bl	30900 <memset>
    spi_desc.tx_length = 32;
   11b44:	4e11      	ldr	r6, [pc, #68]	; (11b8c <ESP_write_data+0x90>)
   11b46:	6077      	str	r7, [r6, #4]
    spi_desc.rx_length = 0;
   11b48:	60f4      	str	r4, [r6, #12]
    spi_tx_buf[0] = 0x02;
   11b4a:	2302      	movs	r3, #2
   11b4c:	702b      	strb	r3, [r5, #0]
	spi_tx_buf[1] = 0x00;
   11b4e:	706c      	strb	r4, [r5, #1]
	strcat_MY(spi_tx_buf, str);
   11b50:	a906      	add	r1, sp, #24
   11b52:	4628      	mov	r0, r5
   11b54:	f01a fab3 	bl	2c0be <strcat_MY>
	//strcat_MY(spi_tx_buf, "Are you alive?");
	err_com = nrfx_spi_xfer(&spi, &spi_desc,0);
   11b58:	4622      	mov	r2, r4
   11b5a:	4631      	mov	r1, r6
   11b5c:	480c      	ldr	r0, [pc, #48]	; (11b90 <ESP_write_data+0x94>)
   11b5e:	f010 fbe7 	bl	22330 <nrfx_spi_xfer>
	if (err_com == NRFX_SUCCESS)
   11b62:	4b0c      	ldr	r3, [pc, #48]	; (11b94 <ESP_write_data+0x98>)
   11b64:	4298      	cmp	r0, r3
   11b66:	d105      	bne.n	11b74 <ESP_write_data+0x78>
	}
	else
	{
		printf("Config Mode No Success!\n");
	}
	while (!spi_xfer_done);
   11b68:	4b05      	ldr	r3, [pc, #20]	; (11b80 <ESP_write_data+0x84>)
   11b6a:	781b      	ldrb	r3, [r3, #0]
   11b6c:	2b00      	cmp	r3, #0
   11b6e:	d0fb      	beq.n	11b68 <ESP_write_data+0x6c>
}
   11b70:	b00f      	add	sp, #60	; 0x3c
   11b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Config Mode No Success!\n");
   11b74:	4808      	ldr	r0, [pc, #32]	; (11b98 <ESP_write_data+0x9c>)
   11b76:	f019 fc83 	bl	2b480 <iprintf>
   11b7a:	e7f5      	b.n	11b68 <ESP_write_data+0x6c>
   11b7c:	000321ac 	.word	0x000321ac
   11b80:	20003ff4 	.word	0x20003ff4
   11b84:	2000272c 	.word	0x2000272c
   11b88:	2000270c 	.word	0x2000270c
   11b8c:	20000570 	.word	0x20000570
   11b90:	000321d0 	.word	0x000321d0
   11b94:	0bad0000 	.word	0x0bad0000
   11b98:	00032190 	.word	0x00032190

00011b9c <gpio_init>:
#include "gpio_drv.h"

  

void gpio_init(uint8_t num_pin)
{
   11b9c:	b538      	push	{r3, r4, r5, lr}
    uint8_t num_pin_local;
    num_pin_local = NRF_GPIO_PIN_MAP(0,num_pin);
   11b9e:	f000 041f 	and.w	r4, r0, #31
}
#endif

NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
   11ba2:	2300      	movs	r3, #0
    uint32_t mask = 0;

    switch (port)
   11ba4:	b1b3      	cbz	r3, 11bd4 <gpio_init+0x38>
   11ba6:	2300      	movs	r3, #0
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   11ba8:	40e3      	lsrs	r3, r4
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   11baa:	f013 0f01 	tst.w	r3, #1
   11bae:	d014      	beq.n	11bda <gpio_init+0x3e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   11bb0:	0963      	lsrs	r3, r4, #5
   11bb2:	d020      	beq.n	11bf6 <gpio_init+0x5a>
            NRFX_ASSERT(0);
   11bb4:	4d14      	ldr	r5, [pc, #80]	; (11c08 <gpio_init+0x6c>)
   11bb6:	f240 232e 	movw	r3, #558	; 0x22e
   11bba:	462a      	mov	r2, r5
   11bbc:	4913      	ldr	r1, [pc, #76]	; (11c0c <gpio_init+0x70>)
   11bbe:	4814      	ldr	r0, [pc, #80]	; (11c10 <gpio_init+0x74>)
   11bc0:	f01a fac2 	bl	2c148 <printk>
   11bc4:	f240 212e 	movw	r1, #558	; 0x22e
   11bc8:	4628      	mov	r0, r5
   11bca:	f01a fcc2 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   11bce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   11bd2:	e012      	b.n	11bfa <gpio_init+0x5e>
            mask = P0_FEATURE_PINS_PRESENT;
   11bd4:	f04f 33ff 	mov.w	r3, #4294967295
   11bd8:	e7e6      	b.n	11ba8 <gpio_init+0xc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   11bda:	4d0b      	ldr	r5, [pc, #44]	; (11c08 <gpio_init+0x6c>)
   11bdc:	f240 2329 	movw	r3, #553	; 0x229
   11be0:	462a      	mov	r2, r5
   11be2:	490c      	ldr	r1, [pc, #48]	; (11c14 <gpio_init+0x78>)
   11be4:	480a      	ldr	r0, [pc, #40]	; (11c10 <gpio_init+0x74>)
   11be6:	f01a faaf 	bl	2c148 <printk>
   11bea:	f240 2129 	movw	r1, #553	; 0x229
   11bee:	4628      	mov	r0, r5
   11bf0:	f01a fcaf 	bl	2c552 <assert_post_action>
   11bf4:	e7dc      	b.n	11bb0 <gpio_init+0x14>
        case 0: return NRF_P0;
   11bf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   11bfa:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   11bfe:	2304      	movs	r3, #4
   11c00:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    nrf_gpio_cfg_input(num_pin_local, NRF_GPIO_PIN_PULLDOWN);
}
   11c04:	bd38      	pop	{r3, r4, r5, pc}
   11c06:	bf00      	nop
   11c08:	000321d8 	.word	0x000321d8
   11c0c:	000364dc 	.word	0x000364dc
   11c10:	00031df4 	.word	0x00031df4
   11c14:	0003220c 	.word	0x0003220c

00011c18 <gpio_read>:
uint32_t gpio_read(uint8_t num_pin)
{
   11c18:	b538      	push	{r3, r4, r5, lr}
    uint8_t num_pin_local;
    uint32_t pin_level = false;
    num_pin_local = NRF_GPIO_PIN_MAP(0,num_pin);
   11c1a:	f000 041f 	and.w	r4, r0, #31
    uint32_t port = pin_number >> 5;
   11c1e:	2300      	movs	r3, #0
    switch (port)
   11c20:	b1b3      	cbz	r3, 11c50 <gpio_read+0x38>
   11c22:	2300      	movs	r3, #0
    return (mask & (1UL << pin_number)) ? true : false;
   11c24:	40e3      	lsrs	r3, r4
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   11c26:	f013 0f01 	tst.w	r3, #1
   11c2a:	d014      	beq.n	11c56 <gpio_read+0x3e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   11c2c:	0963      	lsrs	r3, r4, #5
   11c2e:	d020      	beq.n	11c72 <gpio_read+0x5a>
            NRFX_ASSERT(0);
   11c30:	4d14      	ldr	r5, [pc, #80]	; (11c84 <gpio_read+0x6c>)
   11c32:	f240 232e 	movw	r3, #558	; 0x22e
   11c36:	462a      	mov	r2, r5
   11c38:	4913      	ldr	r1, [pc, #76]	; (11c88 <gpio_read+0x70>)
   11c3a:	4814      	ldr	r0, [pc, #80]	; (11c8c <gpio_read+0x74>)
   11c3c:	f01a fa84 	bl	2c148 <printk>
   11c40:	f240 212e 	movw	r1, #558	; 0x22e
   11c44:	4628      	mov	r0, r5
   11c46:	f01a fc84 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   11c4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   11c4e:	e012      	b.n	11c76 <gpio_read+0x5e>
            mask = P0_FEATURE_PINS_PRESENT;
   11c50:	f04f 33ff 	mov.w	r3, #4294967295
   11c54:	e7e6      	b.n	11c24 <gpio_read+0xc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   11c56:	4d0b      	ldr	r5, [pc, #44]	; (11c84 <gpio_read+0x6c>)
   11c58:	f240 2329 	movw	r3, #553	; 0x229
   11c5c:	462a      	mov	r2, r5
   11c5e:	490c      	ldr	r1, [pc, #48]	; (11c90 <gpio_read+0x78>)
   11c60:	480a      	ldr	r0, [pc, #40]	; (11c8c <gpio_read+0x74>)
   11c62:	f01a fa71 	bl	2c148 <printk>
   11c66:	f240 2129 	movw	r1, #553	; 0x229
   11c6a:	4628      	mov	r0, r5
   11c6c:	f01a fc71 	bl	2c552 <assert_post_action>
   11c70:	e7dc      	b.n	11c2c <gpio_read+0x14>
        case 0: return NRF_P0;
   11c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   11c76:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   11c7a:	40e0      	lsrs	r0, r4
    pin_level = nrf_gpio_pin_read(num_pin_local);
    return pin_level;

   11c7c:	f000 0001 	and.w	r0, r0, #1
   11c80:	bd38      	pop	{r3, r4, r5, pc}
   11c82:	bf00      	nop
   11c84:	000321d8 	.word	0x000321d8
   11c88:	000364dc 	.word	0x000364dc
   11c8c:	00031df4 	.word	0x00031df4
   11c90:	0003220c 	.word	0x0003220c

00011c94 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   11c94:	b570      	push	{r4, r5, r6, lr}
   11c96:	4604      	mov	r4, r0
   11c98:	460d      	mov	r5, r1
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11c9a:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   11c9c:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   11ca0:	6081      	str	r1, [r0, #8]
	switch (method) {
   11ca2:	2b02      	cmp	r3, #2
   11ca4:	d014      	beq.n	11cd0 <sys_notify_finalize+0x3c>
   11ca6:	2b03      	cmp	r3, #3
   11ca8:	d00f      	beq.n	11cca <sys_notify_finalize+0x36>
   11caa:	2b01      	cmp	r3, #1
   11cac:	d013      	beq.n	11cd6 <sys_notify_finalize+0x42>
		break;
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
   11cae:	4e0f      	ldr	r6, [pc, #60]	; (11cec <sys_notify_finalize+0x58>)
   11cb0:	2345      	movs	r3, #69	; 0x45
   11cb2:	4632      	mov	r2, r6
   11cb4:	490e      	ldr	r1, [pc, #56]	; (11cf0 <sys_notify_finalize+0x5c>)
   11cb6:	480f      	ldr	r0, [pc, #60]	; (11cf4 <sys_notify_finalize+0x60>)
   11cb8:	f01a fa46 	bl	2c148 <printk>
   11cbc:	2145      	movs	r1, #69	; 0x45
   11cbe:	4630      	mov	r0, r6
   11cc0:	f01a fc47 	bl	2c552 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   11cc4:	2600      	movs	r6, #0
	struct k_poll_signal *sig = NULL;
   11cc6:	4630      	mov	r0, r6
   11cc8:	e007      	b.n	11cda <sys_notify_finalize+0x46>
		rv = notify->method.callback;
   11cca:	6806      	ldr	r6, [r0, #0]
	struct k_poll_signal *sig = NULL;
   11ccc:	2000      	movs	r0, #0
		break;
   11cce:	e004      	b.n	11cda <sys_notify_finalize+0x46>
		sig = notify->method.signal;
   11cd0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   11cd2:	2600      	movs	r6, #0
		break;
   11cd4:	e001      	b.n	11cda <sys_notify_finalize+0x46>
	switch (method) {
   11cd6:	2600      	movs	r6, #0
   11cd8:	4630      	mov	r0, r6
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11cda:	2300      	movs	r3, #0
   11cdc:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11cde:	b110      	cbz	r0, 11ce6 <sys_notify_finalize+0x52>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11ce0:	4629      	mov	r1, r5
   11ce2:	f016 fa9f 	bl	28224 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11ce6:	4630      	mov	r0, r6
   11ce8:	bd70      	pop	{r4, r5, r6, pc}
   11cea:	bf00      	nop
   11cec:	00032230 	.word	0x00032230
   11cf0:	000364dc 	.word	0x000364dc
   11cf4:	00031df4 	.word	0x00031df4

00011cf8 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   11cf8:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   11cfa:	680b      	ldr	r3, [r1, #0]
   11cfc:	3301      	adds	r3, #1
   11cfe:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   11d00:	4b01      	ldr	r3, [pc, #4]	; (11d08 <char_out+0x10>)
   11d02:	681b      	ldr	r3, [r3, #0]
   11d04:	4798      	blx	r3
}
   11d06:	bd08      	pop	{r3, pc}
   11d08:	20000580 	.word	0x20000580

00011d0c <__printk_hook_install>:
	_char_out = fn;
   11d0c:	4b01      	ldr	r3, [pc, #4]	; (11d14 <__printk_hook_install+0x8>)
   11d0e:	6018      	str	r0, [r3, #0]
}
   11d10:	4770      	bx	lr
   11d12:	bf00      	nop
   11d14:	20000580 	.word	0x20000580

00011d18 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   11d18:	b500      	push	{lr}
   11d1a:	b083      	sub	sp, #12
   11d1c:	4602      	mov	r2, r0
   11d1e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   11d20:	2100      	movs	r1, #0
   11d22:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   11d24:	a901      	add	r1, sp, #4
   11d26:	4803      	ldr	r0, [pc, #12]	; (11d34 <vprintk+0x1c>)
   11d28:	f000 fd84 	bl	12834 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   11d2c:	b003      	add	sp, #12
   11d2e:	f85d fb04 	ldr.w	pc, [sp], #4
   11d32:	bf00      	nop
   11d34:	00011cf9 	.word	0x00011cf9

00011d38 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11d38:	b510      	push	{r4, lr}
   11d3a:	b084      	sub	sp, #16
   11d3c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   11d3e:	9001      	str	r0, [sp, #4]
   11d40:	9102      	str	r1, [sp, #8]
   11d42:	2100      	movs	r1, #0
   11d44:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   11d46:	a901      	add	r1, sp, #4
   11d48:	4805      	ldr	r0, [pc, #20]	; (11d60 <vsnprintk+0x28>)
   11d4a:	f000 fd73 	bl	12834 <cbvprintf>

	if (ctx.count < ctx.max) {
   11d4e:	9b03      	ldr	r3, [sp, #12]
   11d50:	9a02      	ldr	r2, [sp, #8]
   11d52:	4293      	cmp	r3, r2
   11d54:	da01      	bge.n	11d5a <vsnprintk+0x22>
		str[ctx.count] = '\0';
   11d56:	2200      	movs	r2, #0
   11d58:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   11d5a:	9803      	ldr	r0, [sp, #12]
   11d5c:	b004      	add	sp, #16
   11d5e:	bd10      	pop	{r4, pc}
   11d60:	0002c119 	.word	0x0002c119

00011d64 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
   11d64:	b538      	push	{r3, r4, r5, lr}
   11d66:	4604      	mov	r4, r0
   11d68:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11d6a:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
   11d6c:	2a00      	cmp	r2, #0
   11d6e:	db14      	blt.n	11d9a <process_complete+0x36>
   11d70:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
   11d74:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11d76:	2a01      	cmp	r2, #1
   11d78:	d91b      	bls.n	11db2 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
   11d7a:	2b04      	cmp	r3, #4
   11d7c:	d04f      	beq.n	11e1e <process_complete+0xba>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
   11d7e:	4c2e      	ldr	r4, [pc, #184]	; (11e38 <process_complete+0xd4>)
   11d80:	f240 131b 	movw	r3, #283	; 0x11b
   11d84:	4622      	mov	r2, r4
   11d86:	492d      	ldr	r1, [pc, #180]	; (11e3c <process_complete+0xd8>)
   11d88:	482d      	ldr	r0, [pc, #180]	; (11e40 <process_complete+0xdc>)
   11d8a:	f01a f9dd 	bl	2c148 <printk>
   11d8e:	f240 111b 	movw	r1, #283	; 0x11b
   11d92:	4620      	mov	r0, r4
   11d94:	f01a fbdd 	bl	2c552 <assert_post_action>
	}
}
   11d98:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   11d9a:	e9d0 0100 	ldrd	r0, r1, [r0]
   11d9e:	e885 0003 	stmia.w	r5, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11da2:	2300      	movs	r3, #0
   11da4:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   11da6:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   11da8:	2101      	movs	r1, #1
   11daa:	4620      	mov	r0, r4
   11dac:	f01a f9e8 	bl	2c180 <set_state>
   11db0:	e7f2      	b.n	11d98 <process_complete+0x34>
		*clients = mgr->clients;
   11db2:	e9d0 0100 	ldrd	r0, r1, [r0]
   11db6:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   11dba:	2200      	movs	r2, #0
   11dbc:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   11dbe:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   11dc0:	2b06      	cmp	r3, #6
   11dc2:	d00f      	beq.n	11de4 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   11dc4:	2b05      	cmp	r3, #5
   11dc6:	d11c      	bne.n	11e02 <process_complete+0x9e>
			set_state(mgr, ONOFF_STATE_OFF);
   11dc8:	2100      	movs	r1, #0
   11dca:	4620      	mov	r0, r4
   11dcc:	f01a f9d8 	bl	2c180 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11dd0:	4620      	mov	r0, r4
   11dd2:	f01a f9fc 	bl	2c1ce <process_recheck>
   11dd6:	2800      	cmp	r0, #0
   11dd8:	d0de      	beq.n	11d98 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11dda:	8ba3      	ldrh	r3, [r4, #28]
   11ddc:	f043 0320 	orr.w	r3, r3, #32
   11de0:	83a3      	strh	r3, [r4, #28]
   11de2:	e7d9      	b.n	11d98 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11de4:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11de6:	b13b      	cbz	r3, 11df8 <process_complete+0x94>
				mgr->refs += 1U;
   11de8:	8be2      	ldrh	r2, [r4, #30]
   11dea:	3201      	adds	r2, #1
   11dec:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   11dee:	2b00      	cmp	r3, #0
   11df0:	d0f9      	beq.n	11de6 <process_complete+0x82>
	return node->next;
   11df2:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11df4:	2b00      	cmp	r3, #0
   11df6:	d1f6      	bne.n	11de6 <process_complete+0x82>
			set_state(mgr, ONOFF_STATE_ON);
   11df8:	2102      	movs	r1, #2
   11dfa:	4620      	mov	r0, r4
   11dfc:	f01a f9c0 	bl	2c180 <set_state>
   11e00:	e7e6      	b.n	11dd0 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   11e02:	4d0d      	ldr	r5, [pc, #52]	; (11e38 <process_complete+0xd4>)
   11e04:	f240 1309 	movw	r3, #265	; 0x109
   11e08:	462a      	mov	r2, r5
   11e0a:	490e      	ldr	r1, [pc, #56]	; (11e44 <process_complete+0xe0>)
   11e0c:	480c      	ldr	r0, [pc, #48]	; (11e40 <process_complete+0xdc>)
   11e0e:	f01a f99b 	bl	2c148 <printk>
   11e12:	f240 1109 	movw	r1, #265	; 0x109
   11e16:	4628      	mov	r0, r5
   11e18:	f01a fb9b 	bl	2c552 <assert_post_action>
   11e1c:	e7d4      	b.n	11dc8 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
   11e1e:	2100      	movs	r1, #0
   11e20:	f01a f9ae 	bl	2c180 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11e24:	4620      	mov	r0, r4
   11e26:	f01a f9d2 	bl	2c1ce <process_recheck>
   11e2a:	2800      	cmp	r0, #0
   11e2c:	d0b4      	beq.n	11d98 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11e2e:	8ba3      	ldrh	r3, [r4, #28]
   11e30:	f043 0320 	orr.w	r3, r3, #32
   11e34:	83a3      	strh	r3, [r4, #28]
   11e36:	e7af      	b.n	11d98 <process_complete+0x34>
   11e38:	00032254 	.word	0x00032254
   11e3c:	000364dc 	.word	0x000364dc
   11e40:	00031df4 	.word	0x00031df4
   11e44:	00032278 	.word	0x00032278

00011e48 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e4c:	b083      	sub	sp, #12
   11e4e:	4604      	mov	r4, r0
   11e50:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11e52:	8b83      	ldrh	r3, [r0, #28]
   11e54:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
   11e58:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
   11e5c:	460d      	mov	r5, r1
   11e5e:	b131      	cbz	r1, 11e6e <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11e60:	f1b8 0f00 	cmp.w	r8, #0
   11e64:	d112      	bne.n	11e8c <process_event+0x44>
	list->head = NULL;
   11e66:	2300      	movs	r3, #0
   11e68:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   11e6a:	9301      	str	r3, [sp, #4]
}
   11e6c:	e0aa      	b.n	11fc4 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
   11e6e:	f8df 930c 	ldr.w	r9, [pc, #780]	; 1217c <process_event+0x334>
   11e72:	f240 1333 	movw	r3, #307	; 0x133
   11e76:	464a      	mov	r2, r9
   11e78:	49be      	ldr	r1, [pc, #760]	; (12174 <process_event+0x32c>)
   11e7a:	48bf      	ldr	r0, [pc, #764]	; (12178 <process_event+0x330>)
   11e7c:	f01a f964 	bl	2c148 <printk>
   11e80:	f240 1133 	movw	r1, #307	; 0x133
   11e84:	4648      	mov	r0, r9
   11e86:	f01a fb64 	bl	2c552 <assert_post_action>
   11e8a:	e7e9      	b.n	11e60 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
   11e8c:	2d01      	cmp	r5, #1
   11e8e:	d013      	beq.n	11eb8 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   11e90:	2d02      	cmp	r5, #2
   11e92:	d116      	bne.n	11ec2 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11e94:	8ba3      	ldrh	r3, [r4, #28]
   11e96:	f043 0320 	orr.w	r3, r3, #32
   11e9a:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   11e9c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11e9e:	4620      	mov	r0, r4
   11ea0:	f011 fe60 	bl	23b64 <z_spin_unlock_valid>
   11ea4:	2800      	cmp	r0, #0
   11ea6:	f000 81a3 	beq.w	121f0 <process_event+0x3a8>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11eaa:	f386 8811 	msr	BASEPRI, r6
   11eae:	f3bf 8f6f 	isb	sy
}
   11eb2:	b003      	add	sp, #12
   11eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11eb8:	8ba3      	ldrh	r3, [r4, #28]
   11eba:	f043 0310 	orr.w	r3, r3, #16
   11ebe:	83a3      	strh	r3, [r4, #28]
   11ec0:	e7ec      	b.n	11e9c <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   11ec2:	4dae      	ldr	r5, [pc, #696]	; (1217c <process_event+0x334>)
   11ec4:	f44f 739e 	mov.w	r3, #316	; 0x13c
   11ec8:	462a      	mov	r2, r5
   11eca:	49ad      	ldr	r1, [pc, #692]	; (12180 <process_event+0x338>)
   11ecc:	48aa      	ldr	r0, [pc, #680]	; (12178 <process_event+0x330>)
   11ece:	f01a f93b 	bl	2c148 <printk>
   11ed2:	f44f 719e 	mov.w	r1, #316	; 0x13c
   11ed6:	4628      	mov	r0, r5
   11ed8:	f01a fb3b 	bl	2c552 <assert_post_action>
   11edc:	e7da      	b.n	11e94 <process_event+0x4c>
			evt = process_recheck(mgr);
   11ede:	4620      	mov	r0, r4
   11ee0:	f01a f975 	bl	2c1ce <process_recheck>
   11ee4:	4605      	mov	r5, r0
   11ee6:	e06f      	b.n	11fc8 <process_event+0x180>
			res = mgr->last_res;
   11ee8:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
   11eec:	464a      	mov	r2, r9
   11eee:	4669      	mov	r1, sp
   11ef0:	4620      	mov	r0, r4
   11ef2:	f7ff ff37 	bl	11d64 <process_complete>
		onoff_transition_fn transit = NULL;
   11ef6:	2500      	movs	r5, #0
   11ef8:	e011      	b.n	11f1e <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   11efa:	2f00      	cmp	r7, #0
   11efc:	f040 8081 	bne.w	12002 <process_event+0x1ba>
	return list->head;
   11f00:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11f02:	2b00      	cmp	r3, #0
   11f04:	f000 808b 	beq.w	1201e <process_event+0x1d6>
			transit = mgr->transitions->start;
   11f08:	6923      	ldr	r3, [r4, #16]
   11f0a:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   11f0c:	2d00      	cmp	r5, #0
   11f0e:	f000 8094 	beq.w	1203a <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
   11f12:	2106      	movs	r1, #6
   11f14:	4620      	mov	r0, r4
   11f16:	f01a f933 	bl	2c180 <set_state>
		res = 0;
   11f1a:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11f1e:	8ba3      	ldrh	r3, [r4, #28]
   11f20:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11f24:	45b8      	cmp	r8, r7
   11f26:	f000 810b 	beq.w	12140 <process_event+0x2f8>
   11f2a:	68a2      	ldr	r2, [r4, #8]
   11f2c:	2a00      	cmp	r2, #0
   11f2e:	f000 8109 	beq.w	12144 <process_event+0x2fc>
   11f32:	2201      	movs	r2, #1
		if (do_monitors
   11f34:	4617      	mov	r7, r2
   11f36:	b91a      	cbnz	r2, 11f40 <process_event+0xf8>
   11f38:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   11f3a:	2a00      	cmp	r2, #0
   11f3c:	f000 8104 	beq.w	12148 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11f40:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   11f44:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   11f46:	f104 0a14 	add.w	sl, r4, #20
   11f4a:	4650      	mov	r0, sl
   11f4c:	f011 fe0a 	bl	23b64 <z_spin_unlock_valid>
   11f50:	2800      	cmp	r0, #0
   11f52:	f000 80fd 	beq.w	12150 <process_event+0x308>
   11f56:	f386 8811 	msr	BASEPRI, r6
   11f5a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11f5e:	2f00      	cmp	r7, #0
   11f60:	f040 8126 	bne.w	121b0 <process_event+0x368>
   11f64:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   11f66:	b12b      	cbz	r3, 11f74 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
   11f68:	464b      	mov	r3, r9
   11f6a:	4642      	mov	r2, r8
   11f6c:	4669      	mov	r1, sp
   11f6e:	4620      	mov	r0, r4
   11f70:	f01a f96f 	bl	2c252 <notify_all>
			if (transit != NULL) {
   11f74:	b115      	cbz	r5, 11f7c <process_event+0x134>
				transit(mgr, transition_complete);
   11f76:	4983      	ldr	r1, [pc, #524]	; (12184 <process_event+0x33c>)
   11f78:	4620      	mov	r0, r4
   11f7a:	47a8      	blx	r5
	__asm__ volatile(
   11f7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f80:	f3ef 8611 	mrs	r6, BASEPRI
   11f84:	f383 8812 	msr	BASEPRI_MAX, r3
   11f88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11f8c:	4650      	mov	r0, sl
   11f8e:	f011 fdd9 	bl	23b44 <z_spin_lock_valid>
   11f92:	2800      	cmp	r0, #0
   11f94:	f000 8112 	beq.w	121bc <process_event+0x374>
	z_spin_lock_set_owner(l);
   11f98:	4650      	mov	r0, sl
   11f9a:	f011 fdf3 	bl	23b84 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11f9e:	8ba3      	ldrh	r3, [r4, #28]
   11fa0:	f023 0308 	bic.w	r3, r3, #8
   11fa4:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11fa6:	8ba3      	ldrh	r3, [r4, #28]
   11fa8:	f013 0f10 	tst.w	r3, #16
   11fac:	f000 8116 	beq.w	121dc <process_event+0x394>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11fb0:	f023 0310 	bic.w	r3, r3, #16
   11fb4:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   11fb6:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   11fb8:	8ba7      	ldrh	r7, [r4, #28]
   11fba:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
   11fbe:	2d00      	cmp	r5, #0
   11fc0:	f43f af6c 	beq.w	11e9c <process_event+0x54>
		if (evt == EVT_RECHECK) {
   11fc4:	2d02      	cmp	r5, #2
   11fc6:	d08a      	beq.n	11ede <process_event+0x96>
		if (evt == EVT_NOP) {
   11fc8:	2d00      	cmp	r5, #0
   11fca:	f43f af67 	beq.w	11e9c <process_event+0x54>
		if (evt == EVT_COMPLETE) {
   11fce:	2d01      	cmp	r5, #1
   11fd0:	d08a      	beq.n	11ee8 <process_event+0xa0>
		} else if (evt == EVT_START) {
   11fd2:	2d03      	cmp	r5, #3
   11fd4:	d091      	beq.n	11efa <process_event+0xb2>
		} else if (evt == EVT_STOP) {
   11fd6:	2d04      	cmp	r5, #4
   11fd8:	d03e      	beq.n	12058 <process_event+0x210>
		} else if (evt == EVT_RESET) {
   11fda:	2d05      	cmp	r5, #5
   11fdc:	f040 80a0 	bne.w	12120 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11fe0:	2f01      	cmp	r7, #1
   11fe2:	d172      	bne.n	120ca <process_event+0x282>
   11fe4:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11fe6:	2b00      	cmp	r3, #0
   11fe8:	d07d      	beq.n	120e6 <process_event+0x29e>
			transit = mgr->transitions->reset;
   11fea:	6923      	ldr	r3, [r4, #16]
   11fec:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   11fee:	2d00      	cmp	r5, #0
   11ff0:	f000 8087 	beq.w	12102 <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
   11ff4:	2105      	movs	r1, #5
   11ff6:	4620      	mov	r0, r4
   11ff8:	f01a f8c2 	bl	2c180 <set_state>
		res = 0;
   11ffc:	f04f 0900 	mov.w	r9, #0
   12000:	e78d      	b.n	11f1e <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   12002:	4d5e      	ldr	r5, [pc, #376]	; (1217c <process_event+0x334>)
   12004:	f44f 73ab 	mov.w	r3, #342	; 0x156
   12008:	462a      	mov	r2, r5
   1200a:	495f      	ldr	r1, [pc, #380]	; (12188 <process_event+0x340>)
   1200c:	485a      	ldr	r0, [pc, #360]	; (12178 <process_event+0x330>)
   1200e:	f01a f89b 	bl	2c148 <printk>
   12012:	f44f 71ab 	mov.w	r1, #342	; 0x156
   12016:	4628      	mov	r0, r5
   12018:	f01a fa9b 	bl	2c552 <assert_post_action>
   1201c:	e770      	b.n	11f00 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1201e:	4d57      	ldr	r5, [pc, #348]	; (1217c <process_event+0x334>)
   12020:	f240 1357 	movw	r3, #343	; 0x157
   12024:	462a      	mov	r2, r5
   12026:	4959      	ldr	r1, [pc, #356]	; (1218c <process_event+0x344>)
   12028:	4853      	ldr	r0, [pc, #332]	; (12178 <process_event+0x330>)
   1202a:	f01a f88d 	bl	2c148 <printk>
   1202e:	f240 1157 	movw	r1, #343	; 0x157
   12032:	4628      	mov	r0, r5
   12034:	f01a fa8d 	bl	2c552 <assert_post_action>
   12038:	e766      	b.n	11f08 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
   1203a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 1217c <process_event+0x334>
   1203e:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   12042:	4642      	mov	r2, r8
   12044:	4952      	ldr	r1, [pc, #328]	; (12190 <process_event+0x348>)
   12046:	484c      	ldr	r0, [pc, #304]	; (12178 <process_event+0x330>)
   12048:	f01a f87e 	bl	2c148 <printk>
   1204c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   12050:	4640      	mov	r0, r8
   12052:	f01a fa7e 	bl	2c552 <assert_post_action>
   12056:	e75c      	b.n	11f12 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   12058:	2f02      	cmp	r7, #2
   1205a:	d10b      	bne.n	12074 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1205c:	8be3      	ldrh	r3, [r4, #30]
   1205e:	b9bb      	cbnz	r3, 12090 <process_event+0x248>
			transit = mgr->transitions->stop;
   12060:	6923      	ldr	r3, [r4, #16]
   12062:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   12064:	b315      	cbz	r5, 120ac <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
   12066:	2104      	movs	r1, #4
   12068:	4620      	mov	r0, r4
   1206a:	f01a f889 	bl	2c180 <set_state>
		res = 0;
   1206e:	f04f 0900 	mov.w	r9, #0
   12072:	e754      	b.n	11f1e <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   12074:	4d41      	ldr	r5, [pc, #260]	; (1217c <process_event+0x334>)
   12076:	f240 135d 	movw	r3, #349	; 0x15d
   1207a:	462a      	mov	r2, r5
   1207c:	4945      	ldr	r1, [pc, #276]	; (12194 <process_event+0x34c>)
   1207e:	483e      	ldr	r0, [pc, #248]	; (12178 <process_event+0x330>)
   12080:	f01a f862 	bl	2c148 <printk>
   12084:	f240 115d 	movw	r1, #349	; 0x15d
   12088:	4628      	mov	r0, r5
   1208a:	f01a fa62 	bl	2c552 <assert_post_action>
   1208e:	e7e5      	b.n	1205c <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
   12090:	4d3a      	ldr	r5, [pc, #232]	; (1217c <process_event+0x334>)
   12092:	f44f 73af 	mov.w	r3, #350	; 0x15e
   12096:	462a      	mov	r2, r5
   12098:	493f      	ldr	r1, [pc, #252]	; (12198 <process_event+0x350>)
   1209a:	4837      	ldr	r0, [pc, #220]	; (12178 <process_event+0x330>)
   1209c:	f01a f854 	bl	2c148 <printk>
   120a0:	f44f 71af 	mov.w	r1, #350	; 0x15e
   120a4:	4628      	mov	r0, r5
   120a6:	f01a fa54 	bl	2c552 <assert_post_action>
   120aa:	e7d9      	b.n	12060 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
   120ac:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1217c <process_event+0x334>
   120b0:	f240 1361 	movw	r3, #353	; 0x161
   120b4:	4642      	mov	r2, r8
   120b6:	4936      	ldr	r1, [pc, #216]	; (12190 <process_event+0x348>)
   120b8:	482f      	ldr	r0, [pc, #188]	; (12178 <process_event+0x330>)
   120ba:	f01a f845 	bl	2c148 <printk>
   120be:	f240 1161 	movw	r1, #353	; 0x161
   120c2:	4640      	mov	r0, r8
   120c4:	f01a fa45 	bl	2c552 <assert_post_action>
   120c8:	e7cd      	b.n	12066 <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   120ca:	4d2c      	ldr	r5, [pc, #176]	; (1217c <process_event+0x334>)
   120cc:	f44f 73b2 	mov.w	r3, #356	; 0x164
   120d0:	462a      	mov	r2, r5
   120d2:	4932      	ldr	r1, [pc, #200]	; (1219c <process_event+0x354>)
   120d4:	4828      	ldr	r0, [pc, #160]	; (12178 <process_event+0x330>)
   120d6:	f01a f837 	bl	2c148 <printk>
   120da:	f44f 71b2 	mov.w	r1, #356	; 0x164
   120de:	4628      	mov	r0, r5
   120e0:	f01a fa37 	bl	2c552 <assert_post_action>
   120e4:	e77e      	b.n	11fe4 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   120e6:	4d25      	ldr	r5, [pc, #148]	; (1217c <process_event+0x334>)
   120e8:	f240 1365 	movw	r3, #357	; 0x165
   120ec:	462a      	mov	r2, r5
   120ee:	4927      	ldr	r1, [pc, #156]	; (1218c <process_event+0x344>)
   120f0:	4821      	ldr	r0, [pc, #132]	; (12178 <process_event+0x330>)
   120f2:	f01a f829 	bl	2c148 <printk>
   120f6:	f240 1165 	movw	r1, #357	; 0x165
   120fa:	4628      	mov	r0, r5
   120fc:	f01a fa29 	bl	2c552 <assert_post_action>
   12100:	e773      	b.n	11fea <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
   12102:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1217c <process_event+0x334>
   12106:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1210a:	4642      	mov	r2, r8
   1210c:	4920      	ldr	r1, [pc, #128]	; (12190 <process_event+0x348>)
   1210e:	481a      	ldr	r0, [pc, #104]	; (12178 <process_event+0x330>)
   12110:	f01a f81a 	bl	2c148 <printk>
   12114:	f44f 71b4 	mov.w	r1, #360	; 0x168
   12118:	4640      	mov	r0, r8
   1211a:	f01a fa1a 	bl	2c552 <assert_post_action>
   1211e:	e769      	b.n	11ff4 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
   12120:	4d16      	ldr	r5, [pc, #88]	; (1217c <process_event+0x334>)
   12122:	f240 136b 	movw	r3, #363	; 0x16b
   12126:	462a      	mov	r2, r5
   12128:	491d      	ldr	r1, [pc, #116]	; (121a0 <process_event+0x358>)
   1212a:	4813      	ldr	r0, [pc, #76]	; (12178 <process_event+0x330>)
   1212c:	f01a f80c 	bl	2c148 <printk>
   12130:	f240 116b 	movw	r1, #363	; 0x16b
   12134:	4628      	mov	r0, r5
   12136:	f01a fa0c 	bl	2c552 <assert_post_action>
		onoff_transition_fn transit = NULL;
   1213a:	2500      	movs	r5, #0
		res = 0;
   1213c:	46a9      	mov	r9, r5
   1213e:	e6ee      	b.n	11f1e <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
   12140:	2200      	movs	r2, #0
   12142:	e6f7      	b.n	11f34 <process_event+0xec>
   12144:	2200      	movs	r2, #0
   12146:	e6f5      	b.n	11f34 <process_event+0xec>
		    || (transit != NULL)) {
   12148:	2d00      	cmp	r5, #0
   1214a:	f47f aef9 	bne.w	11f40 <process_event+0xf8>
   1214e:	e72a      	b.n	11fa6 <process_event+0x15e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12150:	f8df b058 	ldr.w	fp, [pc, #88]	; 121ac <process_event+0x364>
   12154:	23ac      	movs	r3, #172	; 0xac
   12156:	465a      	mov	r2, fp
   12158:	4912      	ldr	r1, [pc, #72]	; (121a4 <process_event+0x35c>)
   1215a:	4807      	ldr	r0, [pc, #28]	; (12178 <process_event+0x330>)
   1215c:	f019 fff4 	bl	2c148 <printk>
   12160:	4651      	mov	r1, sl
   12162:	4811      	ldr	r0, [pc, #68]	; (121a8 <process_event+0x360>)
   12164:	f019 fff0 	bl	2c148 <printk>
   12168:	21ac      	movs	r1, #172	; 0xac
   1216a:	4658      	mov	r0, fp
   1216c:	f01a f9f1 	bl	2c552 <assert_post_action>
   12170:	e6f1      	b.n	11f56 <process_event+0x10e>
   12172:	bf00      	nop
   12174:	000322a0 	.word	0x000322a0
   12178:	00031df4 	.word	0x00031df4
   1217c:	00032254 	.word	0x00032254
   12180:	000322b0 	.word	0x000322b0
   12184:	00012229 	.word	0x00012229
   12188:	000322c4 	.word	0x000322c4
   1218c:	000322d0 	.word	0x000322d0
   12190:	000322f4 	.word	0x000322f4
   12194:	0003230c 	.word	0x0003230c
   12198:	00032324 	.word	0x00032324
   1219c:	00032334 	.word	0x00032334
   121a0:	000364dc 	.word	0x000364dc
   121a4:	00032374 	.word	0x00032374
   121a8:	0003238c 	.word	0x0003238c
   121ac:	0003234c 	.word	0x0003234c
				notify_monitors(mgr, state, res);
   121b0:	464a      	mov	r2, r9
   121b2:	4641      	mov	r1, r8
   121b4:	4620      	mov	r0, r4
   121b6:	f019 ffeb 	bl	2c190 <notify_monitors>
   121ba:	e6d3      	b.n	11f64 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   121bc:	4d14      	ldr	r5, [pc, #80]	; (12210 <process_event+0x3c8>)
   121be:	2381      	movs	r3, #129	; 0x81
   121c0:	462a      	mov	r2, r5
   121c2:	4914      	ldr	r1, [pc, #80]	; (12214 <process_event+0x3cc>)
   121c4:	4814      	ldr	r0, [pc, #80]	; (12218 <process_event+0x3d0>)
   121c6:	f019 ffbf 	bl	2c148 <printk>
   121ca:	4651      	mov	r1, sl
   121cc:	4813      	ldr	r0, [pc, #76]	; (1221c <process_event+0x3d4>)
   121ce:	f019 ffbb 	bl	2c148 <printk>
   121d2:	2181      	movs	r1, #129	; 0x81
   121d4:	4628      	mov	r0, r5
   121d6:	f01a f9bc 	bl	2c552 <assert_post_action>
   121da:	e6dd      	b.n	11f98 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   121dc:	f013 0f20 	tst.w	r3, #32
   121e0:	d004      	beq.n	121ec <process_event+0x3a4>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   121e2:	f023 0320 	bic.w	r3, r3, #32
   121e6:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
   121e8:	2502      	movs	r5, #2
   121ea:	e6e5      	b.n	11fb8 <process_event+0x170>
		evt = EVT_NOP;
   121ec:	2500      	movs	r5, #0
   121ee:	e6e3      	b.n	11fb8 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   121f0:	4d07      	ldr	r5, [pc, #28]	; (12210 <process_event+0x3c8>)
   121f2:	23ac      	movs	r3, #172	; 0xac
   121f4:	462a      	mov	r2, r5
   121f6:	490a      	ldr	r1, [pc, #40]	; (12220 <process_event+0x3d8>)
   121f8:	4807      	ldr	r0, [pc, #28]	; (12218 <process_event+0x3d0>)
   121fa:	f019 ffa5 	bl	2c148 <printk>
   121fe:	4621      	mov	r1, r4
   12200:	4808      	ldr	r0, [pc, #32]	; (12224 <process_event+0x3dc>)
   12202:	f019 ffa1 	bl	2c148 <printk>
   12206:	21ac      	movs	r1, #172	; 0xac
   12208:	4628      	mov	r0, r5
   1220a:	f01a f9a2 	bl	2c552 <assert_post_action>
   1220e:	e64c      	b.n	11eaa <process_event+0x62>
   12210:	0003234c 	.word	0x0003234c
   12214:	000323a4 	.word	0x000323a4
   12218:	00031df4 	.word	0x00031df4
   1221c:	000323bc 	.word	0x000323bc
   12220:	00032374 	.word	0x00032374
   12224:	0003238c 	.word	0x0003238c

00012228 <transition_complete>:
{
   12228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1222c:	4604      	mov	r4, r0
   1222e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12230:	f100 0614 	add.w	r6, r0, #20
   12234:	f04f 0340 	mov.w	r3, #64	; 0x40
   12238:	f3ef 8711 	mrs	r7, BASEPRI
   1223c:	f383 8812 	msr	BASEPRI_MAX, r3
   12240:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12244:	4630      	mov	r0, r6
   12246:	f011 fc7d 	bl	23b44 <z_spin_lock_valid>
   1224a:	b150      	cbz	r0, 12262 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
   1224c:	4630      	mov	r0, r6
   1224e:	f011 fc99 	bl	23b84 <z_spin_lock_set_owner>
	mgr->last_res = res;
   12252:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   12254:	463a      	mov	r2, r7
   12256:	2101      	movs	r1, #1
   12258:	4620      	mov	r0, r4
   1225a:	f7ff fdf5 	bl	11e48 <process_event>
}
   1225e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12262:	f8df 802c 	ldr.w	r8, [pc, #44]	; 12290 <transition_complete+0x68>
   12266:	2381      	movs	r3, #129	; 0x81
   12268:	4642      	mov	r2, r8
   1226a:	4906      	ldr	r1, [pc, #24]	; (12284 <transition_complete+0x5c>)
   1226c:	4806      	ldr	r0, [pc, #24]	; (12288 <transition_complete+0x60>)
   1226e:	f019 ff6b 	bl	2c148 <printk>
   12272:	4631      	mov	r1, r6
   12274:	4805      	ldr	r0, [pc, #20]	; (1228c <transition_complete+0x64>)
   12276:	f019 ff67 	bl	2c148 <printk>
   1227a:	2181      	movs	r1, #129	; 0x81
   1227c:	4640      	mov	r0, r8
   1227e:	f01a f968 	bl	2c552 <assert_post_action>
   12282:	e7e3      	b.n	1224c <transition_complete+0x24>
   12284:	000323a4 	.word	0x000323a4
   12288:	00031df4 	.word	0x00031df4
   1228c:	000323bc 	.word	0x000323bc
   12290:	0003234c 	.word	0x0003234c

00012294 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12298:	4604      	mov	r4, r0
   1229a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1229c:	f019 ffb0 	bl	2c200 <validate_args>

	if (rv < 0) {
   122a0:	1e06      	subs	r6, r0, #0
   122a2:	db58      	blt.n	12356 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   122a4:	f104 0714 	add.w	r7, r4, #20
   122a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   122ac:	f3ef 8911 	mrs	r9, BASEPRI
   122b0:	f383 8812 	msr	BASEPRI_MAX, r3
   122b4:	f3bf 8f6f 	isb	sy
   122b8:	4638      	mov	r0, r7
   122ba:	f011 fc43 	bl	23b44 <z_spin_lock_valid>
   122be:	b1e8      	cbz	r0, 122fc <onoff_request+0x68>
	z_spin_lock_set_owner(l);
   122c0:	4638      	mov	r0, r7
   122c2:	f011 fc5f 	bl	23b84 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   122c6:	8ba5      	ldrh	r5, [r4, #28]
   122c8:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   122cc:	8be3      	ldrh	r3, [r4, #30]
   122ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   122d2:	4293      	cmp	r3, r2
   122d4:	d056      	beq.n	12384 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   122d6:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   122d8:	2d02      	cmp	r5, #2
   122da:	d01f      	beq.n	1231c <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   122dc:	b32d      	cbz	r5, 1232a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
   122de:	2d04      	cmp	r5, #4
   122e0:	d023      	beq.n	1232a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
   122e2:	2d06      	cmp	r5, #6
   122e4:	d021      	beq.n	1232a <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   122e6:	2d05      	cmp	r5, #5
   122e8:	d053      	beq.n	12392 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   122ea:	2d01      	cmp	r5, #1
   122ec:	d136      	bne.n	1235c <onoff_request+0xc8>
		rv = -EIO;
   122ee:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   122f2:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   122f6:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   122f8:	4652      	mov	r2, sl
   122fa:	e01c      	b.n	12336 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   122fc:	4d3c      	ldr	r5, [pc, #240]	; (123f0 <onoff_request+0x15c>)
   122fe:	2381      	movs	r3, #129	; 0x81
   12300:	462a      	mov	r2, r5
   12302:	493c      	ldr	r1, [pc, #240]	; (123f4 <onoff_request+0x160>)
   12304:	483c      	ldr	r0, [pc, #240]	; (123f8 <onoff_request+0x164>)
   12306:	f019 ff1f 	bl	2c148 <printk>
   1230a:	4639      	mov	r1, r7
   1230c:	483b      	ldr	r0, [pc, #236]	; (123fc <onoff_request+0x168>)
   1230e:	f019 ff1b 	bl	2c148 <printk>
   12312:	2181      	movs	r1, #129	; 0x81
   12314:	4628      	mov	r0, r5
   12316:	f01a f91c 	bl	2c552 <assert_post_action>
   1231a:	e7d1      	b.n	122c0 <onoff_request+0x2c>
		mgr->refs += 1U;
   1231c:	3301      	adds	r3, #1
   1231e:	83e3      	strh	r3, [r4, #30]
		notify = true;
   12320:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
   12324:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   12326:	461a      	mov	r2, r3
   12328:	e005      	b.n	12336 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
   1232a:	fab5 f385 	clz	r3, r5
   1232e:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   12330:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
   12334:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
   12336:	b142      	cbz	r2, 1234a <onoff_request+0xb6>
	parent->next = child;
   12338:	2200      	movs	r2, #0
   1233a:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   1233e:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12340:	b372      	cbz	r2, 123a0 <onoff_request+0x10c>
	parent->next = child;
   12342:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   12346:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1234a:	b373      	cbz	r3, 123aa <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
   1234c:	464a      	mov	r2, r9
   1234e:	2102      	movs	r1, #2
   12350:	4620      	mov	r0, r4
   12352:	f7ff fd79 	bl	11e48 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   12356:	4630      	mov	r0, r6
   12358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1235c:	4e28      	ldr	r6, [pc, #160]	; (12400 <onoff_request+0x16c>)
   1235e:	f240 13c9 	movw	r3, #457	; 0x1c9
   12362:	4632      	mov	r2, r6
   12364:	4927      	ldr	r1, [pc, #156]	; (12404 <onoff_request+0x170>)
   12366:	4824      	ldr	r0, [pc, #144]	; (123f8 <onoff_request+0x164>)
   12368:	f019 feee 	bl	2c148 <printk>
   1236c:	f240 11c9 	movw	r1, #457	; 0x1c9
   12370:	4630      	mov	r0, r6
   12372:	f01a f8ee 	bl	2c552 <assert_post_action>
		rv = -EIO;
   12376:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1237a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   1237e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   12380:	4652      	mov	r2, sl
   12382:	e7d8      	b.n	12336 <onoff_request+0xa2>
		rv = -EAGAIN;
   12384:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   12388:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   1238c:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   1238e:	4652      	mov	r2, sl
   12390:	e7d1      	b.n	12336 <onoff_request+0xa2>
		rv = -ENOTSUP;
   12392:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   12396:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   1239a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   1239c:	4652      	mov	r2, sl
   1239e:	e7ca      	b.n	12336 <onoff_request+0xa2>
   123a0:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
   123a4:	f8c4 8000 	str.w	r8, [r4]
}
   123a8:	e7cf      	b.n	1234a <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   123aa:	4638      	mov	r0, r7
   123ac:	f011 fbda 	bl	23b64 <z_spin_unlock_valid>
   123b0:	b168      	cbz	r0, 123ce <onoff_request+0x13a>
	__asm__ volatile(
   123b2:	f389 8811 	msr	BASEPRI, r9
   123b6:	f3bf 8f6f 	isb	sy
		if (notify) {
   123ba:	f1ba 0f00 	cmp.w	sl, #0
   123be:	d0ca      	beq.n	12356 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
   123c0:	2300      	movs	r3, #0
   123c2:	462a      	mov	r2, r5
   123c4:	4641      	mov	r1, r8
   123c6:	4620      	mov	r0, r4
   123c8:	f019 ff30 	bl	2c22c <notify_one>
   123cc:	e7c3      	b.n	12356 <onoff_request+0xc2>
   123ce:	f8df b020 	ldr.w	fp, [pc, #32]	; 123f0 <onoff_request+0x15c>
   123d2:	23ac      	movs	r3, #172	; 0xac
   123d4:	465a      	mov	r2, fp
   123d6:	490c      	ldr	r1, [pc, #48]	; (12408 <onoff_request+0x174>)
   123d8:	4807      	ldr	r0, [pc, #28]	; (123f8 <onoff_request+0x164>)
   123da:	f019 feb5 	bl	2c148 <printk>
   123de:	4639      	mov	r1, r7
   123e0:	480a      	ldr	r0, [pc, #40]	; (1240c <onoff_request+0x178>)
   123e2:	f019 feb1 	bl	2c148 <printk>
   123e6:	21ac      	movs	r1, #172	; 0xac
   123e8:	4658      	mov	r0, fp
   123ea:	f01a f8b2 	bl	2c552 <assert_post_action>
   123ee:	e7e0      	b.n	123b2 <onoff_request+0x11e>
   123f0:	0003234c 	.word	0x0003234c
   123f4:	000323a4 	.word	0x000323a4
   123f8:	00031df4 	.word	0x00031df4
   123fc:	000323bc 	.word	0x000323bc
   12400:	00032254 	.word	0x00032254
   12404:	00032334 	.word	0x00032334
   12408:	00032374 	.word	0x00032374
   1240c:	0003238c 	.word	0x0003238c

00012410 <sys_heap_free>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
	if (mem == NULL) {
   12410:	2900      	cmp	r1, #0
   12412:	d045      	beq.n	124a0 <sys_heap_free+0x90>
{
   12414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12418:	460f      	mov	r7, r1
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1241a:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   1241c:	4620      	mov	r0, r4
   1241e:	f019 ffc7 	bl	2c3b0 <mem_to_chunkid>
   12422:	4605      	mov	r5, r0

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12424:	00c6      	lsls	r6, r0, #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   12426:	f106 0802 	add.w	r8, r6, #2
   1242a:	f834 3008 	ldrh.w	r3, [r4, r8]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   1242e:	f013 0f01 	tst.w	r3, #1
   12432:	d013      	beq.n	1245c <sys_heap_free+0x4c>
   12434:	f834 3008 	ldrh.w	r3, [r4, r8]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   12438:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		return ((uint16_t *)cmem)[f];
   1243c:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   12440:	1a9b      	subs	r3, r3, r2
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12442:	429d      	cmp	r5, r3
   12444:	d11b      	bne.n	1247e <sys_heap_free+0x6e>
	void *cmem = &buf[c];
   12446:	4426      	add	r6, r4
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   12448:	8873      	ldrh	r3, [r6, #2]
   1244a:	f023 0301 	bic.w	r3, r3, #1
   1244e:	8073      	strh	r3, [r6, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
   12450:	4629      	mov	r1, r5
   12452:	4620      	mov	r0, r4
   12454:	f019 ffc8 	bl	2c3e8 <free_chunk>
}
   12458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(chunk_used(h, c),
   1245c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 124b8 <sys_heap_free+0xa8>
   12460:	23a3      	movs	r3, #163	; 0xa3
   12462:	464a      	mov	r2, r9
   12464:	490f      	ldr	r1, [pc, #60]	; (124a4 <sys_heap_free+0x94>)
   12466:	4810      	ldr	r0, [pc, #64]	; (124a8 <sys_heap_free+0x98>)
   12468:	f019 fe6e 	bl	2c148 <printk>
   1246c:	4639      	mov	r1, r7
   1246e:	480f      	ldr	r0, [pc, #60]	; (124ac <sys_heap_free+0x9c>)
   12470:	f019 fe6a 	bl	2c148 <printk>
   12474:	21a3      	movs	r1, #163	; 0xa3
   12476:	4648      	mov	r0, r9
   12478:	f01a f86b 	bl	2c552 <assert_post_action>
   1247c:	e7da      	b.n	12434 <sys_heap_free+0x24>
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   1247e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 124b8 <sys_heap_free+0xa8>
   12482:	23ab      	movs	r3, #171	; 0xab
   12484:	4642      	mov	r2, r8
   12486:	490a      	ldr	r1, [pc, #40]	; (124b0 <sys_heap_free+0xa0>)
   12488:	4807      	ldr	r0, [pc, #28]	; (124a8 <sys_heap_free+0x98>)
   1248a:	f019 fe5d 	bl	2c148 <printk>
   1248e:	4639      	mov	r1, r7
   12490:	4808      	ldr	r0, [pc, #32]	; (124b4 <sys_heap_free+0xa4>)
   12492:	f019 fe59 	bl	2c148 <printk>
   12496:	21ab      	movs	r1, #171	; 0xab
   12498:	4640      	mov	r0, r8
   1249a:	f01a f85a 	bl	2c552 <assert_post_action>
   1249e:	e7d2      	b.n	12446 <sys_heap_free+0x36>
   124a0:	4770      	bx	lr
   124a2:	bf00      	nop
   124a4:	000323f8 	.word	0x000323f8
   124a8:	00031df4 	.word	0x00031df4
   124ac:	0003240c 	.word	0x0003240c
   124b0:	00032444 	.word	0x00032444
   124b4:	0003246c 	.word	0x0003246c
   124b8:	000323d4 	.word	0x000323d4

000124bc <sys_heap_aligned_alloc>:
#endif
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   124bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   124c0:	460c      	mov	r4, r1
   124c2:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   124c4:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   124c6:	424b      	negs	r3, r1
   124c8:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   124cc:	ea31 0303 	bics.w	r3, r1, r3
   124d0:	d041      	beq.n	12556 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   124d2:	eba1 0408 	sub.w	r4, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   124d6:	f1b8 0f03 	cmp.w	r8, #3
   124da:	d847      	bhi.n	1256c <sys_heap_aligned_alloc+0xb0>
   124dc:	4647      	mov	r7, r8
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   124de:	1e63      	subs	r3, r4, #1
   124e0:	4223      	tst	r3, r4
   124e2:	d145      	bne.n	12570 <sys_heap_aligned_alloc+0xb4>

	if (bytes == 0 || size_too_big(h, bytes)) {
   124e4:	2d00      	cmp	r5, #0
   124e6:	d069      	beq.n	125bc <sys_heap_aligned_alloc+0x100>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   124e8:	68b3      	ldr	r3, [r6, #8]
   124ea:	ebb3 0fd5 	cmp.w	r3, r5, lsr #3
   124ee:	d967      	bls.n	125c0 <sys_heap_aligned_alloc+0x104>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   124f0:	1961      	adds	r1, r4, r5
   124f2:	1bc9      	subs	r1, r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   124f4:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   124f6:	08c9      	lsrs	r1, r1, #3
   124f8:	4630      	mov	r0, r6
   124fa:	f019 ffa6 	bl	2c44a <alloc_chunk>

	if (c0 == 0) {
   124fe:	4607      	mov	r7, r0
   12500:	2800      	cmp	r0, #0
   12502:	d05f      	beq.n	125c4 <sys_heap_aligned_alloc+0x108>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   12504:	4601      	mov	r1, r0
   12506:	4630      	mov	r0, r6
   12508:	f019 fee0 	bl	2c2cc <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1250c:	4440      	add	r0, r8
   1250e:	4420      	add	r0, r4
   12510:	3801      	subs	r0, #1
   12512:	4264      	negs	r4, r4
   12514:	4004      	ands	r4, r0
   12516:	eba4 0408 	sub.w	r4, r4, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1251a:	4425      	add	r5, r4
   1251c:	3507      	adds	r5, #7
   1251e:	f025 0507 	bic.w	r5, r5, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   12522:	4621      	mov	r1, r4
   12524:	4630      	mov	r0, r6
   12526:	f019 ff43 	bl	2c3b0 <mem_to_chunkid>
   1252a:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   1252c:	1bad      	subs	r5, r5, r6
   1252e:	10ed      	asrs	r5, r5, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   12530:	4287      	cmp	r7, r0
   12532:	d32f      	bcc.n	12594 <sys_heap_aligned_alloc+0xd8>
	void *cmem = &buf[c];
   12534:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   12538:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   1253c:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   1253e:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   12542:	429d      	cmp	r5, r3
   12544:	d330      	bcc.n	125a8 <sys_heap_aligned_alloc+0xec>
	void *cmem = &buf[c];
   12546:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12548:	8873      	ldrh	r3, [r6, #2]
   1254a:	f043 0301 	orr.w	r3, r3, #1
   1254e:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   12550:	4620      	mov	r0, r4
   12552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   12556:	2904      	cmp	r1, #4
   12558:	d903      	bls.n	12562 <sys_heap_aligned_alloc+0xa6>
		rew = 0;
   1255a:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   1255e:	2704      	movs	r7, #4
   12560:	e7bd      	b.n	124de <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   12562:	4611      	mov	r1, r2
   12564:	f019 ffa9 	bl	2c4ba <sys_heap_alloc>
   12568:	4604      	mov	r4, r0
   1256a:	e7f1      	b.n	12550 <sys_heap_aligned_alloc+0x94>
		gap = MIN(rew, chunk_header_bytes(h));
   1256c:	2704      	movs	r7, #4
   1256e:	e7b6      	b.n	124de <sys_heap_aligned_alloc+0x22>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12570:	f8df 9060 	ldr.w	r9, [pc, #96]	; 125d4 <sys_heap_aligned_alloc+0x118>
   12574:	f240 1327 	movw	r3, #295	; 0x127
   12578:	464a      	mov	r2, r9
   1257a:	4913      	ldr	r1, [pc, #76]	; (125c8 <sys_heap_aligned_alloc+0x10c>)
   1257c:	4813      	ldr	r0, [pc, #76]	; (125cc <sys_heap_aligned_alloc+0x110>)
   1257e:	f019 fde3 	bl	2c148 <printk>
   12582:	4813      	ldr	r0, [pc, #76]	; (125d0 <sys_heap_aligned_alloc+0x114>)
   12584:	f019 fde0 	bl	2c148 <printk>
   12588:	f240 1127 	movw	r1, #295	; 0x127
   1258c:	4648      	mov	r0, r9
   1258e:	f019 ffe0 	bl	2c552 <assert_post_action>
   12592:	e7a7      	b.n	124e4 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   12594:	4602      	mov	r2, r0
   12596:	4639      	mov	r1, r7
   12598:	4630      	mov	r0, r6
   1259a:	f019 fedf 	bl	2c35c <split_chunks>
		free_list_add(h, c0);
   1259e:	4639      	mov	r1, r7
   125a0:	4630      	mov	r0, r6
   125a2:	f019 ff15 	bl	2c3d0 <free_list_add>
   125a6:	e7c5      	b.n	12534 <sys_heap_aligned_alloc+0x78>
		split_chunks(h, c, c_end);
   125a8:	462a      	mov	r2, r5
   125aa:	4641      	mov	r1, r8
   125ac:	4630      	mov	r0, r6
   125ae:	f019 fed5 	bl	2c35c <split_chunks>
		free_list_add(h, c_end);
   125b2:	4629      	mov	r1, r5
   125b4:	4630      	mov	r0, r6
   125b6:	f019 ff0b 	bl	2c3d0 <free_list_add>
   125ba:	e7c4      	b.n	12546 <sys_heap_aligned_alloc+0x8a>
		return NULL;
   125bc:	2400      	movs	r4, #0
   125be:	e7c7      	b.n	12550 <sys_heap_aligned_alloc+0x94>
   125c0:	2400      	movs	r4, #0
   125c2:	e7c5      	b.n	12550 <sys_heap_aligned_alloc+0x94>
		return NULL;
   125c4:	2400      	movs	r4, #0
   125c6:	e7c3      	b.n	12550 <sys_heap_aligned_alloc+0x94>
   125c8:	000324a8 	.word	0x000324a8
   125cc:	00031df4 	.word	0x00031df4
   125d0:	000324c4 	.word	0x000324c4
   125d4:	000323d4 	.word	0x000323d4

000125d8 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   125d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125dc:	4606      	mov	r6, r0
   125de:	460c      	mov	r4, r1
   125e0:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   125e2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   125e6:	d22a      	bcs.n	1263e <sys_heap_init+0x66>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   125e8:	2d04      	cmp	r5, #4
   125ea:	d939      	bls.n	12660 <sys_heap_init+0x88>
	bytes -= heap_footer_bytes(bytes);
   125ec:	1f2a      	subs	r2, r5, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   125ee:	1de5      	adds	r5, r4, #7
   125f0:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   125f4:	4414      	add	r4, r2
   125f6:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   125fa:	1b64      	subs	r4, r4, r5
   125fc:	ea4f 09d4 	mov.w	r9, r4, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12600:	2c17      	cmp	r4, #23
   12602:	d93e      	bls.n	12682 <sys_heap_init+0xaa>

	struct z_heap *h = (struct z_heap *)addr;
   12604:	46a8      	mov	r8, r5
	heap->heap = h;
   12606:	6035      	str	r5, [r6, #0]
	h->end_chunk = heap_sz;
   12608:	f8c5 9008 	str.w	r9, [r5, #8]
	h->avail_buckets = 0;
   1260c:	2300      	movs	r3, #0
   1260e:	60eb      	str	r3, [r5, #12]
	return 31 - __builtin_clz(usable_sz);
   12610:	fab9 f689 	clz	r6, r9
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   12614:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12618:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
   1261c:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1261e:	3607      	adds	r6, #7
   12620:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12624:	f10a 0301 	add.w	r3, sl, #1
   12628:	454b      	cmp	r3, r9
   1262a:	d83b      	bhi.n	126a4 <sys_heap_init+0xcc>
{
   1262c:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
   1262e:	42bb      	cmp	r3, r7
   12630:	da4a      	bge.n	126c8 <sys_heap_init+0xf0>
		h->buckets[i].next = 0;
   12632:	1d1a      	adds	r2, r3, #4
   12634:	2100      	movs	r1, #0
   12636:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1263a:	3301      	adds	r3, #1
   1263c:	e7f7      	b.n	1262e <sys_heap_init+0x56>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1263e:	4f32      	ldr	r7, [pc, #200]	; (12708 <sys_heap_init+0x130>)
   12640:	f240 13a5 	movw	r3, #421	; 0x1a5
   12644:	463a      	mov	r2, r7
   12646:	4931      	ldr	r1, [pc, #196]	; (1270c <sys_heap_init+0x134>)
   12648:	4831      	ldr	r0, [pc, #196]	; (12710 <sys_heap_init+0x138>)
   1264a:	f019 fd7d 	bl	2c148 <printk>
   1264e:	4831      	ldr	r0, [pc, #196]	; (12714 <sys_heap_init+0x13c>)
   12650:	f019 fd7a 	bl	2c148 <printk>
   12654:	f240 11a5 	movw	r1, #421	; 0x1a5
   12658:	4638      	mov	r0, r7
   1265a:	f019 ff7a 	bl	2c552 <assert_post_action>
   1265e:	e7c3      	b.n	125e8 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12660:	4f29      	ldr	r7, [pc, #164]	; (12708 <sys_heap_init+0x130>)
   12662:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   12666:	463a      	mov	r2, r7
   12668:	492b      	ldr	r1, [pc, #172]	; (12718 <sys_heap_init+0x140>)
   1266a:	4829      	ldr	r0, [pc, #164]	; (12710 <sys_heap_init+0x138>)
   1266c:	f019 fd6c 	bl	2c148 <printk>
   12670:	482a      	ldr	r0, [pc, #168]	; (1271c <sys_heap_init+0x144>)
   12672:	f019 fd69 	bl	2c148 <printk>
   12676:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   1267a:	4638      	mov	r0, r7
   1267c:	f019 ff69 	bl	2c552 <assert_post_action>
   12680:	e7b4      	b.n	125ec <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12682:	4f21      	ldr	r7, [pc, #132]	; (12708 <sys_heap_init+0x130>)
   12684:	f240 13b5 	movw	r3, #437	; 0x1b5
   12688:	463a      	mov	r2, r7
   1268a:	4925      	ldr	r1, [pc, #148]	; (12720 <sys_heap_init+0x148>)
   1268c:	4820      	ldr	r0, [pc, #128]	; (12710 <sys_heap_init+0x138>)
   1268e:	f019 fd5b 	bl	2c148 <printk>
   12692:	4822      	ldr	r0, [pc, #136]	; (1271c <sys_heap_init+0x144>)
   12694:	f019 fd58 	bl	2c148 <printk>
   12698:	f240 11b5 	movw	r1, #437	; 0x1b5
   1269c:	4638      	mov	r0, r7
   1269e:	f019 ff58 	bl	2c552 <assert_post_action>
   126a2:	e7af      	b.n	12604 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   126a4:	f8df b060 	ldr.w	fp, [pc, #96]	; 12708 <sys_heap_init+0x130>
   126a8:	f240 13c5 	movw	r3, #453	; 0x1c5
   126ac:	465a      	mov	r2, fp
   126ae:	491d      	ldr	r1, [pc, #116]	; (12724 <sys_heap_init+0x14c>)
   126b0:	4817      	ldr	r0, [pc, #92]	; (12710 <sys_heap_init+0x138>)
   126b2:	f019 fd49 	bl	2c148 <printk>
   126b6:	4819      	ldr	r0, [pc, #100]	; (1271c <sys_heap_init+0x144>)
   126b8:	f019 fd46 	bl	2c148 <printk>
   126bc:	f240 11c5 	movw	r1, #453	; 0x1c5
   126c0:	4658      	mov	r0, fp
   126c2:	f019 ff46 	bl	2c552 <assert_post_action>
   126c6:	e7b1      	b.n	1262c <sys_heap_init+0x54>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   126c8:	ea4f 034a 	mov.w	r3, sl, lsl #1
		((uint16_t *)cmem)[f] = val;
   126cc:	b29b      	uxth	r3, r3
   126ce:	2200      	movs	r2, #0
   126d0:	802a      	strh	r2, [r5, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   126d2:	f043 0301 	orr.w	r3, r3, #1
   126d6:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   126d8:	eba9 090a 	sub.w	r9, r9, sl
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   126dc:	ea4f 0249 	mov.w	r2, r9, lsl #1
	void *cmem = &buf[c];
   126e0:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
   126e4:	1cb3      	adds	r3, r6, #2
   126e6:	52ea      	strh	r2, [r5, r3]
   126e8:	f825 a006 	strh.w	sl, [r5, r6]
	void *cmem = &buf[c];
   126ec:	f024 0307 	bic.w	r3, r4, #7
		((uint16_t *)cmem)[f] = val;
   126f0:	442c      	add	r4, r5
   126f2:	f825 9003 	strh.w	r9, [r5, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   126f6:	2301      	movs	r3, #1
   126f8:	8063      	strh	r3, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   126fa:	4651      	mov	r1, sl
   126fc:	4628      	mov	r0, r5
   126fe:	f019 fe67 	bl	2c3d0 <free_list_add>
}
   12702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12706:	bf00      	nop
   12708:	000323d4 	.word	0x000323d4
   1270c:	000324e4 	.word	0x000324e4
   12710:	00031df4 	.word	0x00031df4
   12714:	000324fc 	.word	0x000324fc
   12718:	00032514 	.word	0x00032514
   1271c:	00032538 	.word	0x00032538
   12720:	00032554 	.word	0x00032554
   12724:	00032580 	.word	0x00032580

00012728 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   12728:	b410      	push	{r4}
   1272a:	4604      	mov	r4, r0
	const char *sp = *str;
   1272c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   1272e:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   12730:	7813      	ldrb	r3, [r2, #0]
   12732:	4907      	ldr	r1, [pc, #28]	; (12750 <extract_decimal+0x28>)
   12734:	5c59      	ldrb	r1, [r3, r1]
   12736:	f011 0f04 	tst.w	r1, #4
   1273a:	d006      	beq.n	1274a <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
   1273c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   12740:	3201      	adds	r2, #1
   12742:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   12746:	3830      	subs	r0, #48	; 0x30
   12748:	e7f2      	b.n	12730 <extract_decimal+0x8>
	}
	*str = sp;
   1274a:	6022      	str	r2, [r4, #0]
	return val;
}
   1274c:	bc10      	pop	{r4}
   1274e:	4770      	bx	lr
   12750:	00036739 	.word	0x00036739

00012754 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   12754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12758:	b083      	sub	sp, #12
   1275a:	4604      	mov	r4, r0
   1275c:	460d      	mov	r5, r1
   1275e:	9201      	str	r2, [sp, #4]
   12760:	469a      	mov	sl, r3
   12762:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   12766:	78d3      	ldrb	r3, [r2, #3]
   12768:	4a31      	ldr	r2, [pc, #196]	; (12830 <encode_uint+0xdc>)
   1276a:	f813 b002 	ldrb.w	fp, [r3, r2]
   1276e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   12772:	2b6f      	cmp	r3, #111	; 0x6f
   12774:	d00f      	beq.n	12796 <encode_uint+0x42>
   12776:	d906      	bls.n	12786 <encode_uint+0x32>
   12778:	2b70      	cmp	r3, #112	; 0x70
   1277a:	d00f      	beq.n	1279c <encode_uint+0x48>
   1277c:	2b78      	cmp	r3, #120	; 0x78
   1277e:	d110      	bne.n	127a2 <encode_uint+0x4e>
		return 16;
   12780:	f04f 0910 	mov.w	r9, #16
   12784:	e023      	b.n	127ce <encode_uint+0x7a>
	switch (specifier) {
   12786:	2b58      	cmp	r3, #88	; 0x58
   12788:	d002      	beq.n	12790 <encode_uint+0x3c>
   1278a:	f04f 090a 	mov.w	r9, #10
   1278e:	e01e      	b.n	127ce <encode_uint+0x7a>
		return 16;
   12790:	f04f 0910 	mov.w	r9, #16
   12794:	e01b      	b.n	127ce <encode_uint+0x7a>
		return 8;
   12796:	f04f 0908 	mov.w	r9, #8
   1279a:	e018      	b.n	127ce <encode_uint+0x7a>
		return 16;
   1279c:	f04f 0910 	mov.w	r9, #16
   127a0:	e015      	b.n	127ce <encode_uint+0x7a>
	switch (specifier) {
   127a2:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   127a6:	e012      	b.n	127ce <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   127a8:	b2d2      	uxtb	r2, r2
   127aa:	3230      	adds	r2, #48	; 0x30
   127ac:	b2d2      	uxtb	r2, r2
   127ae:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
   127b2:	4632      	mov	r2, r6
   127b4:	463b      	mov	r3, r7
   127b6:	4620      	mov	r0, r4
   127b8:	4629      	mov	r1, r5
   127ba:	f7ee f90f 	bl	9dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   127be:	42bd      	cmp	r5, r7
   127c0:	bf08      	it	eq
   127c2:	42b4      	cmpeq	r4, r6
   127c4:	d318      	bcc.n	127f8 <encode_uint+0xa4>
   127c6:	45d0      	cmp	r8, sl
   127c8:	d916      	bls.n	127f8 <encode_uint+0xa4>
		value /= radix;
   127ca:	4604      	mov	r4, r0
   127cc:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   127ce:	464e      	mov	r6, r9
   127d0:	2700      	movs	r7, #0
   127d2:	464a      	mov	r2, r9
   127d4:	463b      	mov	r3, r7
   127d6:	4620      	mov	r0, r4
   127d8:	4629      	mov	r1, r5
   127da:	f7ee f8ff 	bl	9dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   127de:	2a09      	cmp	r2, #9
   127e0:	d9e2      	bls.n	127a8 <encode_uint+0x54>
   127e2:	f1bb 0f01 	cmp.w	fp, #1
   127e6:	d003      	beq.n	127f0 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   127e8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   127ea:	3257      	adds	r2, #87	; 0x57
   127ec:	b2d2      	uxtb	r2, r2
   127ee:	e7de      	b.n	127ae <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   127f0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   127f2:	3237      	adds	r2, #55	; 0x37
   127f4:	b2d2      	uxtb	r2, r2
   127f6:	e7da      	b.n	127ae <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   127f8:	9b01      	ldr	r3, [sp, #4]
   127fa:	781b      	ldrb	r3, [r3, #0]
   127fc:	f013 0f20 	tst.w	r3, #32
   12800:	d005      	beq.n	1280e <encode_uint+0xba>
		if (radix == 8) {
   12802:	f1b9 0f08 	cmp.w	r9, #8
   12806:	d006      	beq.n	12816 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
   12808:	f1b9 0f10 	cmp.w	r9, #16
   1280c:	d009      	beq.n	12822 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
   1280e:	4640      	mov	r0, r8
   12810:	b003      	add	sp, #12
   12812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   12816:	9a01      	ldr	r2, [sp, #4]
   12818:	7893      	ldrb	r3, [r2, #2]
   1281a:	f043 0308 	orr.w	r3, r3, #8
   1281e:	7093      	strb	r3, [r2, #2]
   12820:	e7f5      	b.n	1280e <encode_uint+0xba>
			conv->altform_0c = true;
   12822:	9a01      	ldr	r2, [sp, #4]
   12824:	7893      	ldrb	r3, [r2, #2]
   12826:	f043 0310 	orr.w	r3, r3, #16
   1282a:	7093      	strb	r3, [r2, #2]
   1282c:	e7ef      	b.n	1280e <encode_uint+0xba>
   1282e:	bf00      	nop
   12830:	00036739 	.word	0x00036739

00012834 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   12834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12838:	b093      	sub	sp, #76	; 0x4c
   1283a:	4606      	mov	r6, r0
   1283c:	460d      	mov	r5, r1
   1283e:	4692      	mov	sl, r2
   12840:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   12842:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12844:	f89a 0000 	ldrb.w	r0, [sl]
   12848:	2800      	cmp	r0, #0
   1284a:	f000 84d6 	beq.w	131fa <cbvprintf+0x9c6>
		if (*fp != '%') {
   1284e:	2825      	cmp	r0, #37	; 0x25
   12850:	d008      	beq.n	12864 <cbvprintf+0x30>
			OUTC(*fp++);
   12852:	f10a 0a01 	add.w	sl, sl, #1
   12856:	4629      	mov	r1, r5
   12858:	47b0      	blx	r6
   1285a:	2800      	cmp	r0, #0
   1285c:	f2c0 84ce 	blt.w	131fc <cbvprintf+0x9c8>
   12860:	3401      	adds	r4, #1
			continue;
   12862:	e7ef      	b.n	12844 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   12864:	2300      	movs	r3, #0
   12866:	9306      	str	r3, [sp, #24]
   12868:	9307      	str	r3, [sp, #28]
   1286a:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
   1286c:	9308      	str	r3, [sp, #32]
   1286e:	9309      	str	r3, [sp, #36]	; 0x24
   12870:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
   12872:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
   12876:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1287a:	2b25      	cmp	r3, #37	; 0x25
   1287c:	d001      	beq.n	12882 <cbvprintf+0x4e>
	bool loop = true;
   1287e:	2701      	movs	r7, #1
   12880:	e02c      	b.n	128dc <cbvprintf+0xa8>
		conv->specifier = *sp++;
   12882:	f10a 0802 	add.w	r8, sl, #2
   12886:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
   1288a:	e1a8      	b.n	12bde <cbvprintf+0x3aa>
			conv->flag_dash = true;
   1288c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12890:	f043 0304 	orr.w	r3, r3, #4
   12894:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
   12898:	b1ff      	cbz	r7, 128da <cbvprintf+0xa6>
			++sp;
   1289a:	f108 0801 	add.w	r8, r8, #1
   1289e:	e01c      	b.n	128da <cbvprintf+0xa6>
			conv->flag_plus = true;
   128a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   128a4:	f043 0308 	orr.w	r3, r3, #8
   128a8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   128ac:	e7f4      	b.n	12898 <cbvprintf+0x64>
			conv->flag_space = true;
   128ae:	f89d 3020 	ldrb.w	r3, [sp, #32]
   128b2:	f043 0310 	orr.w	r3, r3, #16
   128b6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   128ba:	e7ed      	b.n	12898 <cbvprintf+0x64>
			conv->flag_hash = true;
   128bc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   128c0:	f043 0320 	orr.w	r3, r3, #32
   128c4:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   128c8:	e7e6      	b.n	12898 <cbvprintf+0x64>
			conv->flag_zero = true;
   128ca:	f89d 3020 	ldrb.w	r3, [sp, #32]
   128ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   128d2:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   128d6:	e7df      	b.n	12898 <cbvprintf+0x64>
		switch (*sp) {
   128d8:	2700      	movs	r7, #0
	} while (loop);
   128da:	b34f      	cbz	r7, 12930 <cbvprintf+0xfc>
		switch (*sp) {
   128dc:	f898 3000 	ldrb.w	r3, [r8]
   128e0:	3b20      	subs	r3, #32
   128e2:	2b10      	cmp	r3, #16
   128e4:	d8f8      	bhi.n	128d8 <cbvprintf+0xa4>
   128e6:	a201      	add	r2, pc, #4	; (adr r2, 128ec <cbvprintf+0xb8>)
   128e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   128ec:	000128af 	.word	0x000128af
   128f0:	000128d9 	.word	0x000128d9
   128f4:	000128d9 	.word	0x000128d9
   128f8:	000128bd 	.word	0x000128bd
   128fc:	000128d9 	.word	0x000128d9
   12900:	000128d9 	.word	0x000128d9
   12904:	000128d9 	.word	0x000128d9
   12908:	000128d9 	.word	0x000128d9
   1290c:	000128d9 	.word	0x000128d9
   12910:	000128d9 	.word	0x000128d9
   12914:	000128d9 	.word	0x000128d9
   12918:	000128a1 	.word	0x000128a1
   1291c:	000128d9 	.word	0x000128d9
   12920:	0001288d 	.word	0x0001288d
   12924:	000128d9 	.word	0x000128d9
   12928:	000128d9 	.word	0x000128d9
   1292c:	000128cb 	.word	0x000128cb
	if (conv->flag_zero && conv->flag_dash) {
   12930:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12934:	f003 0344 	and.w	r3, r3, #68	; 0x44
   12938:	2b44      	cmp	r3, #68	; 0x44
   1293a:	d06d      	beq.n	12a18 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
   1293c:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
   12940:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12948:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
   1294c:	f898 3000 	ldrb.w	r3, [r8]
   12950:	2b2a      	cmp	r3, #42	; 0x2a
   12952:	d068      	beq.n	12a26 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
   12954:	a805      	add	r0, sp, #20
   12956:	f7ff fee7 	bl	12728 <extract_decimal>
	if (sp != wp) {
   1295a:	9b05      	ldr	r3, [sp, #20]
   1295c:	4598      	cmp	r8, r3
   1295e:	d012      	beq.n	12986 <cbvprintf+0x152>
		conv->width_present = true;
   12960:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12968:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   1296c:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   1296e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   12972:	2800      	cmp	r0, #0
   12974:	db60      	blt.n	12a38 <cbvprintf+0x204>
   12976:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   12978:	4313      	orrs	r3, r2
   1297a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1297e:	f363 0241 	bfi	r2, r3, #1, #1
   12982:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   12986:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   12988:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   1298a:	781b      	ldrb	r3, [r3, #0]
   1298c:	2b2e      	cmp	r3, #46	; 0x2e
   1298e:	bf14      	ite	ne
   12990:	2300      	movne	r3, #0
   12992:	2301      	moveq	r3, #1
   12994:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   12998:	f363 0241 	bfi	r2, r3, #1, #1
   1299c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   129a0:	2b00      	cmp	r3, #0
   129a2:	d04b      	beq.n	12a3c <cbvprintf+0x208>
	++sp;
   129a4:	9b05      	ldr	r3, [sp, #20]
   129a6:	1c5a      	adds	r2, r3, #1
   129a8:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   129aa:	785b      	ldrb	r3, [r3, #1]
   129ac:	2b2a      	cmp	r3, #42	; 0x2a
   129ae:	d048      	beq.n	12a42 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   129b0:	a805      	add	r0, sp, #20
   129b2:	f7ff feb9 	bl	12728 <extract_decimal>
	conv->prec_value = prec;
   129b6:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   129b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   129bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   129c0:	2800      	cmp	r0, #0
   129c2:	db47      	blt.n	12a54 <cbvprintf+0x220>
   129c4:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   129c6:	4313      	orrs	r3, r2
   129c8:	f89d 2020 	ldrb.w	r2, [sp, #32]
   129cc:	f363 0241 	bfi	r2, r3, #1, #1
   129d0:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   129d4:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   129d8:	f898 3000 	ldrb.w	r3, [r8]
   129dc:	3b4c      	subs	r3, #76	; 0x4c
   129de:	2b2e      	cmp	r3, #46	; 0x2e
   129e0:	f200 80dc 	bhi.w	12b9c <cbvprintf+0x368>
   129e4:	e8df f003 	tbb	[pc, r3]
   129e8:	dadadaca 	.word	0xdadadaca
   129ec:	dadadada 	.word	0xdadadada
   129f0:	dadadada 	.word	0xdadadada
   129f4:	dadadada 	.word	0xdadadada
   129f8:	dadadada 	.word	0xdadadada
   129fc:	dadadada 	.word	0xdadadada
   12a00:	dadadada 	.word	0xdadadada
   12a04:	da6ada38 	.word	0xda6ada38
   12a08:	dadada51 	.word	0xdadada51
   12a0c:	dadadada 	.word	0xdadadada
   12a10:	dadadac0 	.word	0xdadadac0
   12a14:	dada      	.short	0xdada
   12a16:	b6          	.byte	0xb6
   12a17:	00          	.byte	0x00
		conv->flag_zero = false;
   12a18:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12a1c:	f36f 1386 	bfc	r3, #6, #1
   12a20:	f88d 3020 	strb.w	r3, [sp, #32]
   12a24:	e78a      	b.n	1293c <cbvprintf+0x108>
		conv->width_star = true;
   12a26:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12a2a:	f043 0301 	orr.w	r3, r3, #1
   12a2e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   12a32:	4643      	mov	r3, r8
   12a34:	3301      	adds	r3, #1
   12a36:	e7a7      	b.n	12988 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   12a38:	2201      	movs	r2, #1
   12a3a:	e79d      	b.n	12978 <cbvprintf+0x144>
		return sp;
   12a3c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   12a40:	e7ca      	b.n	129d8 <cbvprintf+0x1a4>
		conv->prec_star = true;
   12a42:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12a46:	f043 0304 	orr.w	r3, r3, #4
   12a4a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   12a4e:	f102 0801 	add.w	r8, r2, #1
   12a52:	e7c1      	b.n	129d8 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   12a54:	2201      	movs	r2, #1
   12a56:	e7b6      	b.n	129c6 <cbvprintf+0x192>
		if (*++sp == 'h') {
   12a58:	f108 0201 	add.w	r2, r8, #1
   12a5c:	f898 3001 	ldrb.w	r3, [r8, #1]
   12a60:	2b68      	cmp	r3, #104	; 0x68
   12a62:	d008      	beq.n	12a76 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   12a64:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12a68:	2102      	movs	r1, #2
   12a6a:	f361 03c6 	bfi	r3, r1, #3, #4
   12a6e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   12a72:	4690      	mov	r8, r2
   12a74:	e02b      	b.n	12ace <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   12a76:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12a7a:	2201      	movs	r2, #1
   12a7c:	f362 03c6 	bfi	r3, r2, #3, #4
   12a80:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   12a84:	f108 0802 	add.w	r8, r8, #2
   12a88:	e021      	b.n	12ace <cbvprintf+0x29a>
		if (*++sp == 'l') {
   12a8a:	f108 0201 	add.w	r2, r8, #1
   12a8e:	f898 3001 	ldrb.w	r3, [r8, #1]
   12a92:	2b6c      	cmp	r3, #108	; 0x6c
   12a94:	d008      	beq.n	12aa8 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   12a96:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12a9a:	2103      	movs	r1, #3
   12a9c:	f361 03c6 	bfi	r3, r1, #3, #4
   12aa0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   12aa4:	4690      	mov	r8, r2
   12aa6:	e012      	b.n	12ace <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   12aa8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12aac:	2204      	movs	r2, #4
   12aae:	f362 03c6 	bfi	r3, r2, #3, #4
   12ab2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   12ab6:	f108 0802 	add.w	r8, r8, #2
   12aba:	e008      	b.n	12ace <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   12abc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12ac0:	2205      	movs	r2, #5
   12ac2:	f362 03c6 	bfi	r3, r2, #3, #4
   12ac6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   12aca:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   12ace:	f818 3b01 	ldrb.w	r3, [r8], #1
   12ad2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   12ad6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   12ada:	2a37      	cmp	r2, #55	; 0x37
   12adc:	f200 8150 	bhi.w	12d80 <cbvprintf+0x54c>
   12ae0:	e8df f012 	tbh	[pc, r2, lsl #1]
   12ae4:	014e0126 	.word	0x014e0126
   12ae8:	014e014e 	.word	0x014e014e
   12aec:	01260126 	.word	0x01260126
   12af0:	014e0126 	.word	0x014e0126
   12af4:	014e014e 	.word	0x014e014e
   12af8:	014e014e 	.word	0x014e014e
   12afc:	014e014e 	.word	0x014e014e
   12b00:	014e014e 	.word	0x014e014e
   12b04:	014e014e 	.word	0x014e014e
   12b08:	014e014e 	.word	0x014e014e
   12b0c:	014e014e 	.word	0x014e014e
   12b10:	0113014e 	.word	0x0113014e
   12b14:	014e014e 	.word	0x014e014e
   12b18:	014e014e 	.word	0x014e014e
   12b1c:	014e014e 	.word	0x014e014e
   12b20:	014e014e 	.word	0x014e014e
   12b24:	014e0126 	.word	0x014e0126
   12b28:	00630113 	.word	0x00630113
   12b2c:	01260126 	.word	0x01260126
   12b30:	014e0126 	.word	0x014e0126
   12b34:	014e0063 	.word	0x014e0063
   12b38:	014e014e 	.word	0x014e014e
   12b3c:	012f014e 	.word	0x012f014e
   12b40:	013f0113 	.word	0x013f0113
   12b44:	014e014e 	.word	0x014e014e
   12b48:	014e013f 	.word	0x014e013f
   12b4c:	014e0113 	.word	0x014e0113
   12b50:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   12b54:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12b58:	2206      	movs	r2, #6
   12b5a:	f362 03c6 	bfi	r3, r2, #3, #4
   12b5e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   12b62:	f108 0801 	add.w	r8, r8, #1
		break;
   12b66:	e7b2      	b.n	12ace <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   12b68:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12b6c:	2207      	movs	r2, #7
   12b6e:	f362 03c6 	bfi	r3, r2, #3, #4
   12b72:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   12b76:	f108 0801 	add.w	r8, r8, #1
		break;
   12b7a:	e7a8      	b.n	12ace <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   12b7c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12b80:	2208      	movs	r2, #8
   12b82:	f362 03c6 	bfi	r3, r2, #3, #4
   12b86:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   12b8a:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   12b8e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12b92:	f043 0302 	orr.w	r3, r3, #2
   12b96:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   12b9a:	e798      	b.n	12ace <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   12b9c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12ba0:	f36f 03c6 	bfc	r3, #3, #4
   12ba4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   12ba8:	e791      	b.n	12ace <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   12baa:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   12bae:	2101      	movs	r1, #1
   12bb0:	f361 0202 	bfi	r2, r1, #0, #3
   12bb4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   12bb8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   12bbc:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12bc0:	2a40      	cmp	r2, #64	; 0x40
   12bc2:	f000 80aa 	beq.w	12d1a <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   12bc6:	2b63      	cmp	r3, #99	; 0x63
   12bc8:	f000 80ae 	beq.w	12d28 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   12bcc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12bd0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   12bd4:	4317      	orrs	r7, r2
   12bd6:	f367 0341 	bfi	r3, r7, #1, #1
   12bda:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   12bde:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12be2:	f013 0f01 	tst.w	r3, #1
   12be6:	f000 80da 	beq.w	12d9e <cbvprintf+0x56a>
			width = va_arg(ap, int);
   12bea:	9b03      	ldr	r3, [sp, #12]
   12bec:	1d1a      	adds	r2, r3, #4
   12bee:	9203      	str	r2, [sp, #12]
   12bf0:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   12bf2:	2f00      	cmp	r7, #0
   12bf4:	f2c0 80cb 	blt.w	12d8e <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   12bf8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12bfc:	f013 0f04 	tst.w	r3, #4
   12c00:	f000 80df 	beq.w	12dc2 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   12c04:	9b03      	ldr	r3, [sp, #12]
   12c06:	1d1a      	adds	r2, r3, #4
   12c08:	9203      	str	r2, [sp, #12]
   12c0a:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   12c0e:	f1bb 0f00 	cmp.w	fp, #0
   12c12:	f2c0 80cd 	blt.w	12db0 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   12c16:	2300      	movs	r3, #0
   12c18:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   12c1a:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   12c1c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   12c20:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   12c24:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   12c28:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   12c2c:	2b01      	cmp	r3, #1
   12c2e:	f000 80d1 	beq.w	12dd4 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   12c32:	2b02      	cmp	r3, #2
   12c34:	f000 8116 	beq.w	12e64 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   12c38:	2b04      	cmp	r3, #4
   12c3a:	f000 8167 	beq.w	12f0c <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   12c3e:	2b03      	cmp	r3, #3
   12c40:	f000 817e 	beq.w	12f40 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   12c44:	f89d 9020 	ldrb.w	r9, [sp, #32]
   12c48:	f019 0303 	ands.w	r3, r9, #3
   12c4c:	9302      	str	r3, [sp, #8]
   12c4e:	f040 817d 	bne.w	12f4c <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   12c52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12c56:	3b25      	subs	r3, #37	; 0x25
   12c58:	2b53      	cmp	r3, #83	; 0x53
   12c5a:	f200 8233 	bhi.w	130c4 <cbvprintf+0x890>
   12c5e:	e8df f013 	tbh	[pc, r3, lsl #1]
   12c62:	0181      	.short	0x0181
   12c64:	02310231 	.word	0x02310231
   12c68:	02310231 	.word	0x02310231
   12c6c:	02310231 	.word	0x02310231
   12c70:	02310231 	.word	0x02310231
   12c74:	02310231 	.word	0x02310231
   12c78:	02310231 	.word	0x02310231
   12c7c:	02310231 	.word	0x02310231
   12c80:	02310231 	.word	0x02310231
   12c84:	02310231 	.word	0x02310231
   12c88:	02310231 	.word	0x02310231
   12c8c:	02310231 	.word	0x02310231
   12c90:	02310231 	.word	0x02310231
   12c94:	02310231 	.word	0x02310231
   12c98:	02310231 	.word	0x02310231
   12c9c:	02310231 	.word	0x02310231
   12ca0:	02310231 	.word	0x02310231
   12ca4:	02310231 	.word	0x02310231
   12ca8:	02310231 	.word	0x02310231
   12cac:	02310231 	.word	0x02310231
   12cb0:	02310231 	.word	0x02310231
   12cb4:	02310231 	.word	0x02310231
   12cb8:	02310231 	.word	0x02310231
   12cbc:	02310231 	.word	0x02310231
   12cc0:	02310231 	.word	0x02310231
   12cc4:	02310231 	.word	0x02310231
   12cc8:	023101c7 	.word	0x023101c7
   12ccc:	02310231 	.word	0x02310231
   12cd0:	02310231 	.word	0x02310231
   12cd4:	02310231 	.word	0x02310231
   12cd8:	02310231 	.word	0x02310231
   12cdc:	01a10231 	.word	0x01a10231
   12ce0:	023101ab 	.word	0x023101ab
   12ce4:	02310231 	.word	0x02310231
   12ce8:	01ab0231 	.word	0x01ab0231
   12cec:	02310231 	.word	0x02310231
   12cf0:	02310231 	.word	0x02310231
   12cf4:	01c70208 	.word	0x01c70208
   12cf8:	023101ea 	.word	0x023101ea
   12cfc:	018f0231 	.word	0x018f0231
   12d00:	01c70231 	.word	0x01c70231
   12d04:	02310231 	.word	0x02310231
   12d08:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   12d0a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   12d0e:	2102      	movs	r1, #2
   12d10:	f361 0202 	bfi	r2, r1, #0, #3
   12d14:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   12d18:	e74e      	b.n	12bb8 <cbvprintf+0x384>
			conv->invalid = true;
   12d1a:	f89d 1020 	ldrb.w	r1, [sp, #32]
   12d1e:	f041 0101 	orr.w	r1, r1, #1
   12d22:	f88d 1020 	strb.w	r1, [sp, #32]
   12d26:	e74e      	b.n	12bc6 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12d28:	1e17      	subs	r7, r2, #0
   12d2a:	bf18      	it	ne
   12d2c:	2701      	movne	r7, #1
   12d2e:	e74d      	b.n	12bcc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   12d30:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   12d34:	2204      	movs	r2, #4
   12d36:	f362 0302 	bfi	r3, r2, #0, #3
   12d3a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   12d3e:	2701      	movs	r7, #1
			break;
   12d40:	e744      	b.n	12bcc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   12d42:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   12d46:	2203      	movs	r2, #3
   12d48:	f362 0302 	bfi	r3, r2, #0, #3
   12d4c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   12d50:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12d54:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12d58:	2b40      	cmp	r3, #64	; 0x40
   12d5a:	f47f af37 	bne.w	12bcc <cbvprintf+0x398>
			unsupported = true;
   12d5e:	2701      	movs	r7, #1
   12d60:	e734      	b.n	12bcc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   12d62:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   12d66:	2203      	movs	r2, #3
   12d68:	f362 0302 	bfi	r3, r2, #0, #3
   12d6c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   12d70:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12d74:	f013 0f78 	tst.w	r3, #120	; 0x78
   12d78:	f43f af28 	beq.w	12bcc <cbvprintf+0x398>
			unsupported = true;
   12d7c:	2701      	movs	r7, #1
   12d7e:	e725      	b.n	12bcc <cbvprintf+0x398>
		conv->invalid = true;
   12d80:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12d84:	f043 0301 	orr.w	r3, r3, #1
   12d88:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   12d8c:	e71e      	b.n	12bcc <cbvprintf+0x398>
				conv->flag_dash = true;
   12d8e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12d92:	f043 0304 	orr.w	r3, r3, #4
   12d96:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   12d9a:	427f      	negs	r7, r7
   12d9c:	e72c      	b.n	12bf8 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   12d9e:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   12da2:	2b00      	cmp	r3, #0
   12da4:	db02      	blt.n	12dac <cbvprintf+0x578>
		int width = -1;
   12da6:	f04f 37ff 	mov.w	r7, #4294967295
   12daa:	e725      	b.n	12bf8 <cbvprintf+0x3c4>
			width = conv->width_value;
   12dac:	9f09      	ldr	r7, [sp, #36]	; 0x24
   12dae:	e723      	b.n	12bf8 <cbvprintf+0x3c4>
				conv->prec_present = false;
   12db0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   12db4:	f36f 0341 	bfc	r3, #1, #1
   12db8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   12dbc:	f04f 3bff 	mov.w	fp, #4294967295
   12dc0:	e729      	b.n	12c16 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   12dc2:	f013 0f02 	tst.w	r3, #2
   12dc6:	d002      	beq.n	12dce <cbvprintf+0x59a>
			precision = conv->prec_value;
   12dc8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   12dcc:	e723      	b.n	12c16 <cbvprintf+0x3e2>
		int precision = -1;
   12dce:	f04f 3bff 	mov.w	fp, #4294967295
   12dd2:	e720      	b.n	12c16 <cbvprintf+0x3e2>
			switch (length_mod) {
   12dd4:	1ecb      	subs	r3, r1, #3
   12dd6:	2b04      	cmp	r3, #4
   12dd8:	d804      	bhi.n	12de4 <cbvprintf+0x5b0>
   12dda:	e8df f003 	tbb	[pc, r3]
   12dde:	1d0b      	.short	0x1d0b
   12de0:	3529      	.short	0x3529
   12de2:	35          	.byte	0x35
   12de3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   12de4:	9b03      	ldr	r3, [sp, #12]
   12de6:	1d1a      	adds	r2, r3, #4
   12de8:	9203      	str	r2, [sp, #12]
   12dea:	681a      	ldr	r2, [r3, #0]
   12dec:	17d3      	asrs	r3, r2, #31
   12dee:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   12df2:	e006      	b.n	12e02 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   12df4:	9b03      	ldr	r3, [sp, #12]
   12df6:	1d1a      	adds	r2, r3, #4
   12df8:	9203      	str	r2, [sp, #12]
   12dfa:	681a      	ldr	r2, [r3, #0]
   12dfc:	17d3      	asrs	r3, r2, #31
   12dfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   12e02:	2901      	cmp	r1, #1
   12e04:	d028      	beq.n	12e58 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   12e06:	2902      	cmp	r1, #2
   12e08:	f47f af1c 	bne.w	12c44 <cbvprintf+0x410>
				value->sint = (short)value->sint;
   12e0c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   12e10:	17d3      	asrs	r3, r2, #31
   12e12:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12e16:	e715      	b.n	12c44 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   12e18:	9b03      	ldr	r3, [sp, #12]
   12e1a:	3307      	adds	r3, #7
   12e1c:	f023 0307 	bic.w	r3, r3, #7
   12e20:	f103 0208 	add.w	r2, r3, #8
   12e24:	9203      	str	r2, [sp, #12]
   12e26:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   12e2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   12e2e:	e7e8      	b.n	12e02 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   12e30:	9b03      	ldr	r3, [sp, #12]
   12e32:	3307      	adds	r3, #7
   12e34:	f023 0307 	bic.w	r3, r3, #7
   12e38:	f103 0208 	add.w	r2, r3, #8
   12e3c:	9203      	str	r2, [sp, #12]
   12e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   12e42:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   12e46:	e7dc      	b.n	12e02 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12e48:	9b03      	ldr	r3, [sp, #12]
   12e4a:	1d1a      	adds	r2, r3, #4
   12e4c:	9203      	str	r2, [sp, #12]
   12e4e:	681a      	ldr	r2, [r3, #0]
   12e50:	17d3      	asrs	r3, r2, #31
				value->sint =
   12e52:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   12e56:	e7d4      	b.n	12e02 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   12e58:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12e5c:	9306      	str	r3, [sp, #24]
   12e5e:	2300      	movs	r3, #0
   12e60:	9307      	str	r3, [sp, #28]
   12e62:	e6ef      	b.n	12c44 <cbvprintf+0x410>
			switch (length_mod) {
   12e64:	1ecb      	subs	r3, r1, #3
   12e66:	2b04      	cmp	r3, #4
   12e68:	d804      	bhi.n	12e74 <cbvprintf+0x640>
   12e6a:	e8df f003 	tbb	[pc, r3]
   12e6e:	1f0b      	.short	0x1f0b
   12e70:	4135      	.short	0x4135
   12e72:	41          	.byte	0x41
   12e73:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   12e74:	9b03      	ldr	r3, [sp, #12]
   12e76:	1d1a      	adds	r2, r3, #4
   12e78:	9203      	str	r2, [sp, #12]
   12e7a:	681b      	ldr	r3, [r3, #0]
   12e7c:	9306      	str	r3, [sp, #24]
   12e7e:	2300      	movs	r3, #0
   12e80:	9307      	str	r3, [sp, #28]
				break;
   12e82:	e01e      	b.n	12ec2 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   12e84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   12e88:	2b63      	cmp	r3, #99	; 0x63
   12e8a:	d007      	beq.n	12e9c <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   12e8c:	9b03      	ldr	r3, [sp, #12]
   12e8e:	1d1a      	adds	r2, r3, #4
   12e90:	9203      	str	r2, [sp, #12]
   12e92:	681b      	ldr	r3, [r3, #0]
   12e94:	9306      	str	r3, [sp, #24]
   12e96:	2300      	movs	r3, #0
   12e98:	9307      	str	r3, [sp, #28]
   12e9a:	e012      	b.n	12ec2 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   12e9c:	9b03      	ldr	r3, [sp, #12]
   12e9e:	1d1a      	adds	r2, r3, #4
   12ea0:	9203      	str	r2, [sp, #12]
   12ea2:	681b      	ldr	r3, [r3, #0]
   12ea4:	9306      	str	r3, [sp, #24]
   12ea6:	2300      	movs	r3, #0
   12ea8:	9307      	str	r3, [sp, #28]
   12eaa:	e00a      	b.n	12ec2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   12eac:	9b03      	ldr	r3, [sp, #12]
   12eae:	3307      	adds	r3, #7
   12eb0:	f023 0307 	bic.w	r3, r3, #7
   12eb4:	f103 0208 	add.w	r2, r3, #8
   12eb8:	9203      	str	r2, [sp, #12]
   12eba:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   12ebe:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   12ec2:	2901      	cmp	r1, #1
   12ec4:	d01c      	beq.n	12f00 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   12ec6:	2902      	cmp	r1, #2
   12ec8:	f47f aebc 	bne.w	12c44 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   12ecc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   12ed0:	9306      	str	r3, [sp, #24]
   12ed2:	2300      	movs	r3, #0
   12ed4:	9307      	str	r3, [sp, #28]
   12ed6:	e6b5      	b.n	12c44 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   12ed8:	9b03      	ldr	r3, [sp, #12]
   12eda:	3307      	adds	r3, #7
   12edc:	f023 0307 	bic.w	r3, r3, #7
   12ee0:	f103 0208 	add.w	r2, r3, #8
   12ee4:	9203      	str	r2, [sp, #12]
   12ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   12eea:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   12eee:	e7e8      	b.n	12ec2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   12ef0:	9b03      	ldr	r3, [sp, #12]
   12ef2:	1d1a      	adds	r2, r3, #4
   12ef4:	9203      	str	r2, [sp, #12]
   12ef6:	681b      	ldr	r3, [r3, #0]
				value->uint =
   12ef8:	9306      	str	r3, [sp, #24]
   12efa:	2300      	movs	r3, #0
   12efc:	9307      	str	r3, [sp, #28]
				break;
   12efe:	e7e0      	b.n	12ec2 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   12f00:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12f04:	9306      	str	r3, [sp, #24]
   12f06:	2300      	movs	r3, #0
   12f08:	9307      	str	r3, [sp, #28]
   12f0a:	e69b      	b.n	12c44 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   12f0c:	2908      	cmp	r1, #8
   12f0e:	d00b      	beq.n	12f28 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   12f10:	9b03      	ldr	r3, [sp, #12]
   12f12:	3307      	adds	r3, #7
   12f14:	f023 0307 	bic.w	r3, r3, #7
   12f18:	f103 0208 	add.w	r2, r3, #8
   12f1c:	9203      	str	r2, [sp, #12]
   12f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f22:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12f26:	e68d      	b.n	12c44 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   12f28:	9b03      	ldr	r3, [sp, #12]
   12f2a:	3307      	adds	r3, #7
   12f2c:	f023 0307 	bic.w	r3, r3, #7
   12f30:	f103 0208 	add.w	r2, r3, #8
   12f34:	9203      	str	r2, [sp, #12]
   12f36:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12f3e:	e681      	b.n	12c44 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   12f40:	9b03      	ldr	r3, [sp, #12]
   12f42:	1d1a      	adds	r2, r3, #4
   12f44:	9203      	str	r2, [sp, #12]
   12f46:	681b      	ldr	r3, [r3, #0]
   12f48:	9306      	str	r3, [sp, #24]
   12f4a:	e67b      	b.n	12c44 <cbvprintf+0x410>
			OUTS(sp, fp);
   12f4c:	4643      	mov	r3, r8
   12f4e:	4652      	mov	r2, sl
   12f50:	4629      	mov	r1, r5
   12f52:	4630      	mov	r0, r6
   12f54:	f019 fae3 	bl	2c51e <outs>
   12f58:	2800      	cmp	r0, #0
   12f5a:	f2c0 814f 	blt.w	131fc <cbvprintf+0x9c8>
   12f5e:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   12f60:	46c2      	mov	sl, r8
			continue;
   12f62:	e46f      	b.n	12844 <cbvprintf+0x10>
		case '%':
			OUTC('%');
   12f64:	4629      	mov	r1, r5
   12f66:	2025      	movs	r0, #37	; 0x25
   12f68:	47b0      	blx	r6
   12f6a:	2800      	cmp	r0, #0
   12f6c:	f2c0 8146 	blt.w	131fc <cbvprintf+0x9c8>
   12f70:	3401      	adds	r4, #1
		char sign = 0;
   12f72:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   12f76:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   12f7a:	f04f 0a00 	mov.w	sl, #0
			break;
   12f7e:	e0a7      	b.n	130d0 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   12f80:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   12f84:	f1bb 0f00 	cmp.w	fp, #0
   12f88:	db08      	blt.n	12f9c <cbvprintf+0x768>
				len = strnlen(bps, precision);
   12f8a:	4659      	mov	r1, fp
   12f8c:	4650      	mov	r0, sl
   12f8e:	f01d fe1b 	bl	30bc8 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   12f92:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   12f96:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   12f9a:	e099      	b.n	130d0 <cbvprintf+0x89c>
				len = strlen(bps);
   12f9c:	4650      	mov	r0, sl
   12f9e:	f7f9 f89d 	bl	c0dc <strlen>
   12fa2:	e7f6      	b.n	12f92 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12fa4:	9b06      	ldr	r3, [sp, #24]
   12fa6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   12faa:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   12fae:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   12fb2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   12fb6:	e08b      	b.n	130d0 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   12fb8:	f019 0f08 	tst.w	r9, #8
   12fbc:	d105      	bne.n	12fca <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   12fbe:	f019 0910 	ands.w	r9, r9, #16
   12fc2:	d004      	beq.n	12fce <cbvprintf+0x79a>
				sign = ' ';
   12fc4:	f04f 0920 	mov.w	r9, #32
   12fc8:	e001      	b.n	12fce <cbvprintf+0x79a>
				sign = '+';
   12fca:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   12fce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   12fd2:	2a00      	cmp	r2, #0
   12fd4:	f173 0100 	sbcs.w	r1, r3, #0
   12fd8:	db02      	blt.n	12fe0 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   12fda:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12fde:	e009      	b.n	12ff4 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   12fe0:	4252      	negs	r2, r2
   12fe2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12fe6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   12fea:	f04f 092d 	mov.w	r9, #45	; 0x2d
   12fee:	e001      	b.n	12ff4 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   12ff0:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   12ff4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   12ff8:	9300      	str	r3, [sp, #0]
   12ffa:	ab0c      	add	r3, sp, #48	; 0x30
   12ffc:	aa08      	add	r2, sp, #32
   12ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   13002:	f7ff fba7 	bl	12754 <encode_uint>
   13006:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   13008:	f1bb 0f00 	cmp.w	fp, #0
   1300c:	f2c0 8090 	blt.w	13130 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   13010:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   13014:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   13018:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1301c:	f36f 1286 	bfc	r2, #6, #1
   13020:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   13024:	459b      	cmp	fp, r3
   13026:	f240 8086 	bls.w	13136 <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   1302a:	ebab 0303 	sub.w	r3, fp, r3
   1302e:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   13030:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   13034:	e04c      	b.n	130d0 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   13036:	9806      	ldr	r0, [sp, #24]
   13038:	b930      	cbnz	r0, 13048 <cbvprintf+0x814>
		char sign = 0;
   1303a:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   1303e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 13204 <cbvprintf+0x9d0>
			bps = "(nil)";
   13042:	f1ab 0a05 	sub.w	sl, fp, #5
   13046:	e043      	b.n	130d0 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13048:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   1304c:	9300      	str	r3, [sp, #0]
   1304e:	ab0c      	add	r3, sp, #48	; 0x30
   13050:	aa08      	add	r2, sp, #32
   13052:	2100      	movs	r1, #0
   13054:	f7ff fb7e 	bl	12754 <encode_uint>
   13058:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1305a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1305e:	f043 0310 	orr.w	r3, r3, #16
   13062:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   13066:	2378      	movs	r3, #120	; 0x78
   13068:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   1306c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   13070:	e7ca      	b.n	13008 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   13072:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   13074:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   13078:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1307c:	2b07      	cmp	r3, #7
   1307e:	d806      	bhi.n	1308e <cbvprintf+0x85a>
   13080:	e8df f003 	tbb	[pc, r3]
   13084:	100e0c04 	.word	0x100e0c04
   13088:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   1308c:	6014      	str	r4, [r2, #0]
		char sign = 0;
   1308e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   13092:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   13096:	f04f 0a00 	mov.w	sl, #0
}
   1309a:	e019      	b.n	130d0 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   1309c:	7014      	strb	r4, [r2, #0]
		break;
   1309e:	e7f6      	b.n	1308e <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   130a0:	8014      	strh	r4, [r2, #0]
		break;
   130a2:	e7f4      	b.n	1308e <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   130a4:	6014      	str	r4, [r2, #0]
		break;
   130a6:	e7f2      	b.n	1308e <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   130a8:	4620      	mov	r0, r4
   130aa:	17e1      	asrs	r1, r4, #31
   130ac:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   130b0:	e7ed      	b.n	1308e <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   130b2:	4620      	mov	r0, r4
   130b4:	17e1      	asrs	r1, r4, #31
   130b6:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   130ba:	e7e8      	b.n	1308e <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   130bc:	6014      	str	r4, [r2, #0]
		break;
   130be:	e7e6      	b.n	1308e <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   130c0:	6014      	str	r4, [r2, #0]
		break;
   130c2:	e7e4      	b.n	1308e <cbvprintf+0x85a>
		switch (conv->specifier) {
   130c4:	f8dd 9008 	ldr.w	r9, [sp, #8]
   130c8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   130cc:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   130d0:	f1ba 0f00 	cmp.w	sl, #0
   130d4:	f000 808e 	beq.w	131f4 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   130d8:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   130dc:	f1b9 0f00 	cmp.w	r9, #0
   130e0:	d000      	beq.n	130e4 <cbvprintf+0x8b0>
			nj_len += 1U;
   130e2:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   130e4:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   130e8:	f011 0f10 	tst.w	r1, #16
   130ec:	d026      	beq.n	1313c <cbvprintf+0x908>
			nj_len += 2U;
   130ee:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   130f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   130f2:	4413      	add	r3, r2
		if (conv->pad_fp) {
   130f4:	f011 0f40 	tst.w	r1, #64	; 0x40
   130f8:	d001      	beq.n	130fe <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   130fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   130fc:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   130fe:	2f00      	cmp	r7, #0
   13100:	dd32      	ble.n	13168 <cbvprintf+0x934>
			width -= (int)nj_len;
   13102:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   13104:	f89d 3020 	ldrb.w	r3, [sp, #32]
   13108:	f013 0f04 	tst.w	r3, #4
   1310c:	d12c      	bne.n	13168 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1310e:	f013 0f40 	tst.w	r3, #64	; 0x40
   13112:	d018      	beq.n	13146 <cbvprintf+0x912>
					if (sign != 0) {
   13114:	f1b9 0f00 	cmp.w	r9, #0
   13118:	d018      	beq.n	1314c <cbvprintf+0x918>
						OUTC(sign);
   1311a:	4629      	mov	r1, r5
   1311c:	4648      	mov	r0, r9
   1311e:	47b0      	blx	r6
   13120:	2800      	cmp	r0, #0
   13122:	db6b      	blt.n	131fc <cbvprintf+0x9c8>
   13124:	3401      	adds	r4, #1
						sign = 0;
   13126:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   1312a:	2330      	movs	r3, #48	; 0x30
   1312c:	9302      	str	r3, [sp, #8]
   1312e:	e00f      	b.n	13150 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   13130:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   13134:	e7cc      	b.n	130d0 <cbvprintf+0x89c>
   13136:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1313a:	e7c9      	b.n	130d0 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   1313c:	f011 0f08 	tst.w	r1, #8
   13140:	d0d6      	beq.n	130f0 <cbvprintf+0x8bc>
			nj_len += 1U;
   13142:	3201      	adds	r2, #1
   13144:	e7d4      	b.n	130f0 <cbvprintf+0x8bc>
				char pad = ' ';
   13146:	2320      	movs	r3, #32
   13148:	9302      	str	r3, [sp, #8]
   1314a:	e001      	b.n	13150 <cbvprintf+0x91c>
					pad = '0';
   1314c:	2330      	movs	r3, #48	; 0x30
   1314e:	9302      	str	r3, [sp, #8]
   13150:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   13152:	1e5f      	subs	r7, r3, #1
   13154:	2b00      	cmp	r3, #0
   13156:	dd07      	ble.n	13168 <cbvprintf+0x934>
					OUTC(pad);
   13158:	4629      	mov	r1, r5
   1315a:	9802      	ldr	r0, [sp, #8]
   1315c:	47b0      	blx	r6
   1315e:	2800      	cmp	r0, #0
   13160:	db4c      	blt.n	131fc <cbvprintf+0x9c8>
   13162:	3401      	adds	r4, #1
				while (width-- > 0) {
   13164:	463b      	mov	r3, r7
   13166:	e7f4      	b.n	13152 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   13168:	f1b9 0f00 	cmp.w	r9, #0
   1316c:	d005      	beq.n	1317a <cbvprintf+0x946>
			OUTC(sign);
   1316e:	4629      	mov	r1, r5
   13170:	4648      	mov	r0, r9
   13172:	47b0      	blx	r6
   13174:	2800      	cmp	r0, #0
   13176:	db41      	blt.n	131fc <cbvprintf+0x9c8>
   13178:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   1317a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1317e:	f3c3 1200 	ubfx	r2, r3, #4, #1
   13182:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13186:	4313      	orrs	r3, r2
   13188:	d005      	beq.n	13196 <cbvprintf+0x962>
				OUTC('0');
   1318a:	4629      	mov	r1, r5
   1318c:	2030      	movs	r0, #48	; 0x30
   1318e:	47b0      	blx	r6
   13190:	2800      	cmp	r0, #0
   13192:	db33      	blt.n	131fc <cbvprintf+0x9c8>
   13194:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   13196:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1319a:	f013 0f10 	tst.w	r3, #16
   1319e:	d006      	beq.n	131ae <cbvprintf+0x97a>
				OUTC(conv->specifier);
   131a0:	4629      	mov	r1, r5
   131a2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   131a6:	47b0      	blx	r6
   131a8:	2800      	cmp	r0, #0
   131aa:	db27      	blt.n	131fc <cbvprintf+0x9c8>
   131ac:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   131ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   131b0:	f103 39ff 	add.w	r9, r3, #4294967295
   131b4:	2b00      	cmp	r3, #0
   131b6:	dd07      	ble.n	131c8 <cbvprintf+0x994>
				OUTC('0');
   131b8:	4629      	mov	r1, r5
   131ba:	2030      	movs	r0, #48	; 0x30
   131bc:	47b0      	blx	r6
   131be:	2800      	cmp	r0, #0
   131c0:	db1c      	blt.n	131fc <cbvprintf+0x9c8>
   131c2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   131c4:	464b      	mov	r3, r9
   131c6:	e7f3      	b.n	131b0 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   131c8:	465b      	mov	r3, fp
   131ca:	4652      	mov	r2, sl
   131cc:	4629      	mov	r1, r5
   131ce:	4630      	mov	r0, r6
   131d0:	f019 f9a5 	bl	2c51e <outs>
   131d4:	2800      	cmp	r0, #0
   131d6:	db11      	blt.n	131fc <cbvprintf+0x9c8>
   131d8:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   131da:	2f00      	cmp	r7, #0
   131dc:	dd07      	ble.n	131ee <cbvprintf+0x9ba>
			OUTC(' ');
   131de:	4629      	mov	r1, r5
   131e0:	2020      	movs	r0, #32
   131e2:	47b0      	blx	r6
   131e4:	2800      	cmp	r0, #0
   131e6:	db09      	blt.n	131fc <cbvprintf+0x9c8>
   131e8:	3401      	adds	r4, #1
			--width;
   131ea:	3f01      	subs	r7, #1
   131ec:	e7f5      	b.n	131da <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   131ee:	46c2      	mov	sl, r8
   131f0:	f7ff bb28 	b.w	12844 <cbvprintf+0x10>
   131f4:	46c2      	mov	sl, r8
   131f6:	f7ff bb25 	b.w	12844 <cbvprintf+0x10>
		}
	}

	return count;
   131fa:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   131fc:	b013      	add	sp, #76	; 0x4c
   131fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13202:	bf00      	nop
   13204:	000325b1 	.word	0x000325b1

00013208 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   13208:	b508      	push	{r3, lr}
	__asm__ volatile(
   1320a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1320e:	f3ef 8311 	mrs	r3, BASEPRI
   13212:	f382 8812 	msr	BASEPRI_MAX, r2
   13216:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   1321a:	f003 f851 	bl	162c0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1321e:	4803      	ldr	r0, [pc, #12]	; (1322c <sys_reboot+0x24>)
   13220:	f018 ff92 	bl	2c148 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   13224:	f001 ff08 	bl	15038 <arch_cpu_idle>
   13228:	e7fc      	b.n	13224 <sys_reboot+0x1c>
   1322a:	bf00      	nop
   1322c:	000325b4 	.word	0x000325b4

00013230 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   13230:	4b05      	ldr	r3, [pc, #20]	; (13248 <is_rodata+0x18>)
   13232:	4298      	cmp	r0, r3
   13234:	d304      	bcc.n	13240 <is_rodata+0x10>
   13236:	4b05      	ldr	r3, [pc, #20]	; (1324c <is_rodata+0x1c>)
   13238:	4298      	cmp	r0, r3
   1323a:	d303      	bcc.n	13244 <is_rodata+0x14>
   1323c:	2000      	movs	r0, #0
   1323e:	4770      	bx	lr
   13240:	2000      	movs	r0, #0
   13242:	4770      	bx	lr
   13244:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   13246:	4770      	bx	lr
   13248:	000315c4 	.word	0x000315c4
   1324c:	00036898 	.word	0x00036898

00013250 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   13250:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   13252:	4b06      	ldr	r3, [pc, #24]	; (1326c <thread_set+0x1c>)
   13254:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13256:	b118      	cbz	r0, 13260 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13258:	4b05      	ldr	r3, [pc, #20]	; (13270 <thread_set+0x20>)
   1325a:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   1325c:	2b09      	cmp	r3, #9
   1325e:	dc00      	bgt.n	13262 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   13260:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   13262:	4804      	ldr	r0, [pc, #16]	; (13274 <thread_set+0x24>)
   13264:	f011 fa34 	bl	246d0 <z_impl_k_sem_give>
}
   13268:	e7fa      	b.n	13260 <thread_set+0x10>
   1326a:	bf00      	nop
   1326c:	20002780 	.word	0x20002780
   13270:	2000274c 	.word	0x2000274c
   13274:	20000c74 	.word	0x20000c74

00013278 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   13278:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1327a:	4802      	ldr	r0, [pc, #8]	; (13284 <log_process_thread_timer_expiry_fn+0xc>)
   1327c:	f011 fa28 	bl	246d0 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   13280:	bd08      	pop	{r3, pc}
   13282:	bf00      	nop
   13284:	20000c74 	.word	0x20000c74

00013288 <next_pending>:
{
   13288:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   1328a:	4803      	ldr	r0, [pc, #12]	; (13298 <next_pending+0x10>)
   1328c:	f019 f977 	bl	2c57e <log_list_head_peek>
}
   13290:	3800      	subs	r0, #0
   13292:	bf18      	it	ne
   13294:	2001      	movne	r0, #1
   13296:	bd08      	pop	{r3, pc}
   13298:	20002758 	.word	0x20002758

0001329c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1329c:	b530      	push	{r4, r5, lr}
   1329e:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   132a0:	2200      	movs	r2, #0
   132a2:	490f      	ldr	r1, [pc, #60]	; (132e0 <enable_logger+0x44>)
   132a4:	480f      	ldr	r0, [pc, #60]	; (132e4 <enable_logger+0x48>)
   132a6:	f01d fa79 	bl	3079c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   132aa:	4d0f      	ldr	r5, [pc, #60]	; (132e8 <enable_logger+0x4c>)
   132ac:	2200      	movs	r2, #0
   132ae:	2300      	movs	r3, #0
   132b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   132b4:	2400      	movs	r4, #0
   132b6:	9404      	str	r4, [sp, #16]
   132b8:	230e      	movs	r3, #14
   132ba:	9303      	str	r3, [sp, #12]
   132bc:	9402      	str	r4, [sp, #8]
   132be:	9401      	str	r4, [sp, #4]
   132c0:	9400      	str	r4, [sp, #0]
   132c2:	4b0a      	ldr	r3, [pc, #40]	; (132ec <enable_logger+0x50>)
   132c4:	f44f 7240 	mov.w	r2, #768	; 0x300
   132c8:	4909      	ldr	r1, [pc, #36]	; (132f0 <enable_logger+0x54>)
   132ca:	4628      	mov	r0, r5
   132cc:	f010 fd82 	bl	23dd4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   132d0:	4908      	ldr	r1, [pc, #32]	; (132f4 <enable_logger+0x58>)
   132d2:	4628      	mov	r0, r5
   132d4:	f010 fc12 	bl	23afc <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   132d8:	4620      	mov	r0, r4
   132da:	b009      	add	sp, #36	; 0x24
   132dc:	bd30      	pop	{r4, r5, pc}
   132de:	bf00      	nop
   132e0:	00013279 	.word	0x00013279
   132e4:	20001b90 	.word	0x20001b90
   132e8:	20001bc8 	.word	0x20001bc8
   132ec:	00013b8d 	.word	0x00013b8d
   132f0:	20004a00 	.word	0x20004a00
   132f4:	000325e0 	.word	0x000325e0

000132f8 <z_log_get_s_mask>:
{
   132f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132fa:	4604      	mov	r4, r0
   132fc:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   132fe:	2920      	cmp	r1, #32
   13300:	d803      	bhi.n	1330a <z_log_get_s_mask+0x12>
			arm = false;
   13302:	2000      	movs	r0, #0
   13304:	4606      	mov	r6, r0
   13306:	4605      	mov	r5, r0
   13308:	e00e      	b.n	13328 <z_log_get_s_mask+0x30>
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   1330a:	4d14      	ldr	r5, [pc, #80]	; (1335c <z_log_get_s_mask+0x64>)
   1330c:	2387      	movs	r3, #135	; 0x87
   1330e:	462a      	mov	r2, r5
   13310:	4913      	ldr	r1, [pc, #76]	; (13360 <z_log_get_s_mask+0x68>)
   13312:	4814      	ldr	r0, [pc, #80]	; (13364 <z_log_get_s_mask+0x6c>)
   13314:	f018 ff18 	bl	2c148 <printk>
   13318:	2187      	movs	r1, #135	; 0x87
   1331a:	4628      	mov	r0, r5
   1331c:	f019 f919 	bl	2c552 <assert_post_action>
   13320:	e7ef      	b.n	13302 <z_log_get_s_mask+0xa>
			arm = !arm;
   13322:	f085 0501 	eor.w	r5, r5, #1
			arm = false;
   13326:	461c      	mov	r4, r3
	while ((curr = *str++) && arg < nargs) {
   13328:	4623      	mov	r3, r4
   1332a:	f813 2b01 	ldrb.w	r2, [r3], #1
   1332e:	b19a      	cbz	r2, 13358 <z_log_get_s_mask+0x60>
   13330:	42be      	cmp	r6, r7
   13332:	d211      	bcs.n	13358 <z_log_get_s_mask+0x60>
		if (curr == '%') {
   13334:	2a25      	cmp	r2, #37	; 0x25
   13336:	d0f4      	beq.n	13322 <z_log_get_s_mask+0x2a>
		} else if (arm && isalpha((int)curr)) {
   13338:	2d00      	cmp	r5, #0
   1333a:	d0f4      	beq.n	13326 <z_log_get_s_mask+0x2e>
   1333c:	490a      	ldr	r1, [pc, #40]	; (13368 <z_log_get_s_mask+0x70>)
   1333e:	5c51      	ldrb	r1, [r2, r1]
   13340:	f011 0f03 	tst.w	r1, #3
   13344:	d0ef      	beq.n	13326 <z_log_get_s_mask+0x2e>
			if (curr == 's') {
   13346:	2a73      	cmp	r2, #115	; 0x73
   13348:	d002      	beq.n	13350 <z_log_get_s_mask+0x58>
			arg++;
   1334a:	3601      	adds	r6, #1
			arm = false;
   1334c:	2500      	movs	r5, #0
   1334e:	e7ea      	b.n	13326 <z_log_get_s_mask+0x2e>
				mask |= BIT(arg);
   13350:	2201      	movs	r2, #1
   13352:	40b2      	lsls	r2, r6
   13354:	4310      	orrs	r0, r2
   13356:	e7f8      	b.n	1334a <z_log_get_s_mask+0x52>
}
   13358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1335a:	bf00      	nop
   1335c:	000325e8 	.word	0x000325e8
   13360:	00032618 	.word	0x00032618
   13364:	00031df4 	.word	0x00031df4
   13368:	00036739 	.word	0x00036739

0001336c <log_init>:
{
   1336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1336e:	4b20      	ldr	r3, [pc, #128]	; (133f0 <log_init+0x84>)
   13370:	4a20      	ldr	r2, [pc, #128]	; (133f4 <log_init+0x88>)
   13372:	1a9b      	subs	r3, r3, r2
   13374:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   13376:	2b9f      	cmp	r3, #159	; 0x9f
   13378:	d80e      	bhi.n	13398 <log_init+0x2c>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1337a:	4b1f      	ldr	r3, [pc, #124]	; (133f8 <log_init+0x8c>)
   1337c:	f3bf 8f5b 	dmb	ish
   13380:	e853 2f00 	ldrex	r2, [r3]
   13384:	1c51      	adds	r1, r2, #1
   13386:	e843 1000 	strex	r0, r1, [r3]
   1338a:	2800      	cmp	r0, #0
   1338c:	d1f8      	bne.n	13380 <log_init+0x14>
   1338e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   13392:	bb5a      	cbnz	r2, 133ec <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
   13394:	2400      	movs	r4, #0
   13396:	e017      	b.n	133c8 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   13398:	4c18      	ldr	r4, [pc, #96]	; (133fc <log_init+0x90>)
   1339a:	f240 234a 	movw	r3, #586	; 0x24a
   1339e:	4622      	mov	r2, r4
   133a0:	4917      	ldr	r1, [pc, #92]	; (13400 <log_init+0x94>)
   133a2:	4818      	ldr	r0, [pc, #96]	; (13404 <log_init+0x98>)
   133a4:	f018 fed0 	bl	2c148 <printk>
   133a8:	f240 214a 	movw	r1, #586	; 0x24a
   133ac:	4620      	mov	r0, r4
   133ae:	f019 f8d0 	bl	2c552 <assert_post_action>
   133b2:	e7e2      	b.n	1337a <log_init+0xe>
					   backend->cb->ctx,
   133b4:	4b0f      	ldr	r3, [pc, #60]	; (133f4 <log_init+0x88>)
   133b6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   133ba:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   133bc:	2204      	movs	r2, #4
   133be:	6819      	ldr	r1, [r3, #0]
   133c0:	4628      	mov	r0, r5
   133c2:	f000 fc43 	bl	13c4c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   133c6:	3401      	adds	r4, #1
   133c8:	42b4      	cmp	r4, r6
   133ca:	da0f      	bge.n	133ec <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
   133cc:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
   133ce:	4d09      	ldr	r5, [pc, #36]	; (133f4 <log_init+0x88>)
   133d0:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   133d4:	7b2b      	ldrb	r3, [r5, #12]
   133d6:	2b00      	cmp	r3, #0
   133d8:	d0f5      	beq.n	133c6 <log_init+0x5a>
			if (backend->api->init != NULL) {
   133da:	0123      	lsls	r3, r4, #4
   133dc:	4a05      	ldr	r2, [pc, #20]	; (133f4 <log_init+0x88>)
   133de:	58d3      	ldr	r3, [r2, r3]
   133e0:	699b      	ldr	r3, [r3, #24]
   133e2:	2b00      	cmp	r3, #0
   133e4:	d0e6      	beq.n	133b4 <log_init+0x48>
				backend->api->init(backend);
   133e6:	4628      	mov	r0, r5
   133e8:	4798      	blx	r3
   133ea:	e7e3      	b.n	133b4 <log_init+0x48>
}
   133ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   133ee:	bf00      	nop
   133f0:	00031a00 	.word	0x00031a00
   133f4:	000319f0 	.word	0x000319f0
   133f8:	20002754 	.word	0x20002754
   133fc:	000325e8 	.word	0x000325e8
   13400:	0003267c 	.word	0x0003267c
   13404:	00031df4 	.word	0x00031df4

00013408 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   13408:	b138      	cbz	r0, 1341a <log_set_timestamp_func+0x12>
{
   1340a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   1340c:	4a04      	ldr	r2, [pc, #16]	; (13420 <log_set_timestamp_func+0x18>)
   1340e:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
   13410:	4608      	mov	r0, r1
   13412:	f000 ff2f 	bl	14274 <log_output_timestamp_freq_set>
	return 0;
   13416:	2000      	movs	r0, #0
}
   13418:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1341a:	f06f 0015 	mvn.w	r0, #21
}
   1341e:	4770      	bx	lr
   13420:	20000584 	.word	0x20000584

00013424 <log_core_init>:
{
   13424:	b508      	push	{r3, lr}
	panic_mode = false;
   13426:	2300      	movs	r3, #0
   13428:	4a0a      	ldr	r2, [pc, #40]	; (13454 <log_core_init+0x30>)
   1342a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1342c:	4a0a      	ldr	r2, [pc, #40]	; (13458 <log_core_init+0x34>)
   1342e:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
   13430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13434:	4809      	ldr	r0, [pc, #36]	; (1345c <log_core_init+0x38>)
   13436:	f7ff ffe7 	bl	13408 <log_set_timestamp_func>
		log_msg_pool_init();
   1343a:	f000 fc4d 	bl	13cd8 <log_msg_pool_init>
		log_list_init(&list);
   1343e:	4808      	ldr	r0, [pc, #32]	; (13460 <log_core_init+0x3c>)
   13440:	f019 f88f 	bl	2c562 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   13444:	2308      	movs	r3, #8
   13446:	2248      	movs	r2, #72	; 0x48
   13448:	4906      	ldr	r1, [pc, #24]	; (13464 <log_core_init+0x40>)
   1344a:	4807      	ldr	r0, [pc, #28]	; (13468 <log_core_init+0x44>)
   1344c:	f01d f81c 	bl	30488 <k_mem_slab_init>
}
   13450:	bd08      	pop	{r3, pc}
   13452:	bf00      	nop
   13454:	20003ff6 	.word	0x20003ff6
   13458:	20002750 	.word	0x20002750
   1345c:	0002c597 	.word	0x0002c597
   13460:	20002758 	.word	0x20002758
   13464:	20007ab8 	.word	0x20007ab8
   13468:	20002760 	.word	0x20002760

0001346c <get_msg>:
{
   1346c:	b510      	push	{r4, lr}
   1346e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13472:	f3ef 8411 	mrs	r4, BASEPRI
   13476:	f383 8812 	msr	BASEPRI_MAX, r3
   1347a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   1347e:	4804      	ldr	r0, [pc, #16]	; (13490 <get_msg+0x24>)
   13480:	f019 f87f 	bl	2c582 <log_list_head_get>
	__asm__ volatile(
   13484:	f384 8811 	msr	BASEPRI, r4
   13488:	f3bf 8f6f 	isb	sy
}
   1348c:	bd10      	pop	{r4, pc}
   1348e:	bf00      	nop
   13490:	20002758 	.word	0x20002758

00013494 <z_log_notify_backend_enabled>:
{
   13494:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13496:	4b05      	ldr	r3, [pc, #20]	; (134ac <z_log_notify_backend_enabled+0x18>)
   13498:	781b      	ldrb	r3, [r3, #0]
   1349a:	b11b      	cbz	r3, 134a4 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   1349c:	4b03      	ldr	r3, [pc, #12]	; (134ac <z_log_notify_backend_enabled+0x18>)
   1349e:	2201      	movs	r2, #1
   134a0:	701a      	strb	r2, [r3, #0]
}
   134a2:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   134a4:	4802      	ldr	r0, [pc, #8]	; (134b0 <z_log_notify_backend_enabled+0x1c>)
   134a6:	f011 f913 	bl	246d0 <z_impl_k_sem_give>
}
   134aa:	e7f7      	b.n	1349c <z_log_notify_backend_enabled+0x8>
   134ac:	20003ff5 	.word	0x20003ff5
   134b0:	20000c74 	.word	0x20000c74

000134b4 <z_log_dropped>:
   134b4:	4b0c      	ldr	r3, [pc, #48]	; (134e8 <z_log_dropped+0x34>)
   134b6:	f3bf 8f5b 	dmb	ish
   134ba:	e853 2f00 	ldrex	r2, [r3]
   134be:	3201      	adds	r2, #1
   134c0:	e843 2100 	strex	r1, r2, [r3]
   134c4:	2900      	cmp	r1, #0
   134c6:	d1f8      	bne.n	134ba <z_log_dropped+0x6>
   134c8:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   134cc:	4b07      	ldr	r3, [pc, #28]	; (134ec <z_log_dropped+0x38>)
   134ce:	f3bf 8f5b 	dmb	ish
   134d2:	e853 2f00 	ldrex	r2, [r3]
   134d6:	3a01      	subs	r2, #1
   134d8:	e843 2100 	strex	r1, r2, [r3]
   134dc:	2900      	cmp	r1, #0
   134de:	d1f8      	bne.n	134d2 <z_log_dropped+0x1e>
   134e0:	f3bf 8f5b 	dmb	ish
}
   134e4:	4770      	bx	lr
   134e6:	bf00      	nop
   134e8:	20002750 	.word	0x20002750
   134ec:	2000274c 	.word	0x2000274c

000134f0 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   134f0:	4b06      	ldr	r3, [pc, #24]	; (1350c <z_log_dropped_read_and_clear+0x1c>)
}
   134f2:	2000      	movs	r0, #0
   134f4:	4602      	mov	r2, r0
   134f6:	f3bf 8f5b 	dmb	ish
   134fa:	e853 0f00 	ldrex	r0, [r3]
   134fe:	e843 2100 	strex	r1, r2, [r3]
   13502:	2900      	cmp	r1, #0
   13504:	d1f9      	bne.n	134fa <z_log_dropped_read_and_clear+0xa>
   13506:	f3bf 8f5b 	dmb	ish
   1350a:	4770      	bx	lr
   1350c:	20002750 	.word	0x20002750

00013510 <dropped_notify>:
{
   13510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13514:	f7ff ffec 	bl	134f0 <z_log_dropped_read_and_clear>
   13518:	4607      	mov	r7, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   1351a:	2400      	movs	r4, #0
   1351c:	e01c      	b.n	13558 <dropped_notify+0x48>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   1351e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 135a4 <dropped_notify+0x94>
   13522:	f240 131d 	movw	r3, #285	; 0x11d
   13526:	464a      	mov	r2, r9
   13528:	491a      	ldr	r1, [pc, #104]	; (13594 <dropped_notify+0x84>)
   1352a:	481b      	ldr	r0, [pc, #108]	; (13598 <dropped_notify+0x88>)
   1352c:	f018 fe0c 	bl	2c148 <printk>
   13530:	f240 111d 	movw	r1, #285	; 0x11d
   13534:	4648      	mov	r0, r9
   13536:	f019 f80c 	bl	2c552 <assert_post_action>
   1353a:	e019      	b.n	13570 <dropped_notify+0x60>
	__ASSERT_NO_MSG(backend != NULL);
   1353c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 135a4 <dropped_notify+0x94>
   13540:	23b4      	movs	r3, #180	; 0xb4
   13542:	464a      	mov	r2, r9
   13544:	4913      	ldr	r1, [pc, #76]	; (13594 <dropped_notify+0x84>)
   13546:	4814      	ldr	r0, [pc, #80]	; (13598 <dropped_notify+0x88>)
   13548:	f018 fdfe 	bl	2c148 <printk>
   1354c:	21b4      	movs	r1, #180	; 0xb4
   1354e:	4648      	mov	r0, r9
   13550:	f018 ffff 	bl	2c552 <assert_post_action>
   13554:	e012      	b.n	1357c <dropped_notify+0x6c>
   13556:	3401      	adds	r4, #1
   13558:	4b10      	ldr	r3, [pc, #64]	; (1359c <dropped_notify+0x8c>)
   1355a:	4a11      	ldr	r2, [pc, #68]	; (135a0 <dropped_notify+0x90>)
   1355c:	1a9b      	subs	r3, r3, r2
   1355e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   13562:	da14      	bge.n	1358e <dropped_notify+0x7e>
	return &__log_backends_start[idx];
   13564:	ea4f 1804 	mov.w	r8, r4, lsl #4
   13568:	4d0d      	ldr	r5, [pc, #52]	; (135a0 <dropped_notify+0x90>)
	__ASSERT_NO_MSG(backend != NULL);
   1356a:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
   1356e:	d0d6      	beq.n	1351e <dropped_notify+0xe>
	return backend->cb->active;
   13570:	6873      	ldr	r3, [r6, #4]
   13572:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   13574:	2b00      	cmp	r3, #0
   13576:	d0ee      	beq.n	13556 <dropped_notify+0x46>
	__ASSERT_NO_MSG(backend != NULL);
   13578:	2e00      	cmp	r6, #0
   1357a:	d0df      	beq.n	1353c <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
   1357c:	f858 3005 	ldr.w	r3, [r8, r5]
   13580:	691b      	ldr	r3, [r3, #16]
   13582:	2b00      	cmp	r3, #0
   13584:	d0e7      	beq.n	13556 <dropped_notify+0x46>
		backend->api->dropped(backend, cnt);
   13586:	4639      	mov	r1, r7
   13588:	4630      	mov	r0, r6
   1358a:	4798      	blx	r3
}
   1358c:	e7e3      	b.n	13556 <dropped_notify+0x46>
}
   1358e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13592:	bf00      	nop
   13594:	00032664 	.word	0x00032664
   13598:	00031df4 	.word	0x00031df4
   1359c:	00031a00 	.word	0x00031a00
   135a0:	000319f0 	.word	0x000319f0
   135a4:	00032630 	.word	0x00032630

000135a8 <z_log_dropped_pending>:
	return dropped_cnt > 0;
   135a8:	4b03      	ldr	r3, [pc, #12]	; (135b8 <z_log_dropped_pending+0x10>)
   135aa:	6818      	ldr	r0, [r3, #0]
}
   135ac:	2800      	cmp	r0, #0
   135ae:	bfd4      	ite	le
   135b0:	2000      	movle	r0, #0
   135b2:	2001      	movgt	r0, #1
   135b4:	4770      	bx	lr
   135b6:	bf00      	nop
   135b8:	20002750 	.word	0x20002750

000135bc <z_log_strdup>:
{
   135bc:	b570      	push	{r4, r5, r6, lr}
   135be:	b082      	sub	sp, #8
   135c0:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   135c2:	f7ff fe35 	bl	13230 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   135c6:	bb10      	cbnz	r0, 1360e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   135c8:	2200      	movs	r2, #0
   135ca:	2300      	movs	r3, #0
   135cc:	a901      	add	r1, sp, #4
   135ce:	4811      	ldr	r0, [pc, #68]	; (13614 <z_log_strdup+0x58>)
   135d0:	f010 f9b8 	bl	23944 <k_mem_slab_alloc>
	if (err != 0) {
   135d4:	b108      	cbz	r0, 135da <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   135d6:	4c10      	ldr	r4, [pc, #64]	; (13618 <z_log_strdup+0x5c>)
   135d8:	e019      	b.n	1360e <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
   135da:	9b01      	ldr	r3, [sp, #4]
   135dc:	2201      	movs	r2, #1
   135de:	f3bf 8f5b 	dmb	ish
   135e2:	e853 1f00 	ldrex	r1, [r3]
   135e6:	e843 2000 	strex	r0, r2, [r3]
   135ea:	2800      	cmp	r0, #0
   135ec:	d1f9      	bne.n	135e2 <z_log_strdup+0x26>
   135ee:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   135f2:	9d01      	ldr	r5, [sp, #4]
   135f4:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   135f6:	2241      	movs	r2, #65	; 0x41
   135f8:	4621      	mov	r1, r4
   135fa:	4630      	mov	r0, r6
   135fc:	f01d fad1 	bl	30ba2 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   13600:	237e      	movs	r3, #126	; 0x7e
   13602:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   13606:	2300      	movs	r3, #0
   13608:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
	return dup->buf;
   1360c:	4634      	mov	r4, r6
}
   1360e:	4620      	mov	r0, r4
   13610:	b002      	add	sp, #8
   13612:	bd70      	pop	{r4, r5, r6, pc}
   13614:	20002760 	.word	0x20002760
   13618:	000326a0 	.word	0x000326a0

0001361c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   1361c:	b140      	cbz	r0, 13630 <log_is_strdup+0x14>
   1361e:	4a07      	ldr	r2, [pc, #28]	; (1363c <log_is_strdup+0x20>)
   13620:	4290      	cmp	r0, r2
   13622:	d307      	bcc.n	13634 <log_is_strdup+0x18>
   13624:	f502 7210 	add.w	r2, r2, #576	; 0x240
   13628:	4290      	cmp	r0, r2
   1362a:	d305      	bcc.n	13638 <log_is_strdup+0x1c>
   1362c:	2000      	movs	r0, #0
   1362e:	4770      	bx	lr
   13630:	2000      	movs	r0, #0
   13632:	4770      	bx	lr
   13634:	2000      	movs	r0, #0
   13636:	4770      	bx	lr
   13638:	2001      	movs	r0, #1
}
   1363a:	4770      	bx	lr
   1363c:	20007ab8 	.word	0x20007ab8

00013640 <detect_missed_strdup>:
{
   13640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13644:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   13646:	f013 0f01 	tst.w	r3, #1
   1364a:	d001      	beq.n	13650 <detect_missed_strdup+0x10>
}
   1364c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13650:	4607      	mov	r7, r0
	msg_str = log_msg_str_get(msg);
   13652:	f019 f861 	bl	2c718 <log_msg_str_get>
   13656:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   13658:	4638      	mov	r0, r7
   1365a:	f019 f848 	bl	2c6ee <log_msg_nargs_get>
   1365e:	4601      	mov	r1, r0
   13660:	4640      	mov	r0, r8
   13662:	f7ff fe49 	bl	132f8 <z_log_get_s_mask>
   13666:	4605      	mov	r5, r0
	while (mask) {
   13668:	e004      	b.n	13674 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   1366a:	2301      	movs	r3, #1
   1366c:	fa03 f404 	lsl.w	r4, r3, r4
   13670:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   13674:	2d00      	cmp	r5, #0
   13676:	d0e9      	beq.n	1364c <detect_missed_strdup+0xc>
		idx = 31 - __builtin_clz(mask);
   13678:	fab5 f485 	clz	r4, r5
   1367c:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   13680:	4621      	mov	r1, r4
   13682:	4638      	mov	r0, r7
   13684:	f019 f836 	bl	2c6f4 <log_msg_arg_get>
   13688:	4606      	mov	r6, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1368a:	f7ff fdd1 	bl	13230 <is_rodata>
   1368e:	2800      	cmp	r0, #0
   13690:	d1eb      	bne.n	1366a <detect_missed_strdup+0x2a>
   13692:	4630      	mov	r0, r6
   13694:	f7ff ffc2 	bl	1361c <log_is_strdup>
   13698:	2800      	cmp	r0, #0
   1369a:	d1e6      	bne.n	1366a <detect_missed_strdup+0x2a>
   1369c:	4b0d      	ldr	r3, [pc, #52]	; (136d4 <detect_missed_strdup+0x94>)
   1369e:	429e      	cmp	r6, r3
   136a0:	d0e3      	beq.n	1366a <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   136a2:	8979      	ldrh	r1, [r7, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   136a4:	f3c1 1189 	ubfx	r1, r1, #6, #10
   136a8:	f000 fac0 	bl	13c2c <log_source_name_get>
   136ac:	4606      	mov	r6, r0
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   136ae:	f8df 9034 	ldr.w	r9, [pc, #52]	; 136e4 <detect_missed_strdup+0xa4>
   136b2:	23d8      	movs	r3, #216	; 0xd8
   136b4:	464a      	mov	r2, r9
   136b6:	4908      	ldr	r1, [pc, #32]	; (136d8 <detect_missed_strdup+0x98>)
   136b8:	4808      	ldr	r0, [pc, #32]	; (136dc <detect_missed_strdup+0x9c>)
   136ba:	f018 fd45 	bl	2c148 <printk>
   136be:	4643      	mov	r3, r8
   136c0:	4632      	mov	r2, r6
   136c2:	4621      	mov	r1, r4
   136c4:	4806      	ldr	r0, [pc, #24]	; (136e0 <detect_missed_strdup+0xa0>)
   136c6:	f018 fd3f 	bl	2c148 <printk>
   136ca:	21d8      	movs	r1, #216	; 0xd8
   136cc:	4648      	mov	r0, r9
   136ce:	f018 ff40 	bl	2c552 <assert_post_action>
   136d2:	e7ca      	b.n	1366a <detect_missed_strdup+0x2a>
   136d4:	000326a0 	.word	0x000326a0
   136d8:	000364dc 	.word	0x000364dc
   136dc:	00031df4 	.word	0x00031df4
   136e0:	000326bc 	.word	0x000326bc
   136e4:	000325e8 	.word	0x000325e8

000136e8 <msg_process>:
{
   136e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   136ec:	4607      	mov	r7, r0
	if (!bypass) {
   136ee:	2900      	cmp	r1, #0
   136f0:	d151      	bne.n	13796 <msg_process+0xae>
		    !panic_mode) {
   136f2:	4b2b      	ldr	r3, [pc, #172]	; (137a0 <msg_process+0xb8>)
   136f4:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   136f6:	b10b      	cbz	r3, 136fc <msg_process+0x14>
{
   136f8:	2400      	movs	r4, #0
   136fa:	e025      	b.n	13748 <msg_process+0x60>
			detect_missed_strdup(msg.msg);
   136fc:	f7ff ffa0 	bl	13640 <detect_missed_strdup>
   13700:	e7fa      	b.n	136f8 <msg_process+0x10>
	__ASSERT_NO_MSG(backend != NULL);
   13702:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 137b8 <msg_process+0xd0>
   13706:	f240 131d 	movw	r3, #285	; 0x11d
   1370a:	464a      	mov	r2, r9
   1370c:	4925      	ldr	r1, [pc, #148]	; (137a4 <msg_process+0xbc>)
   1370e:	4826      	ldr	r0, [pc, #152]	; (137a8 <msg_process+0xc0>)
   13710:	f018 fd1a 	bl	2c148 <printk>
   13714:	f240 111d 	movw	r1, #285	; 0x11d
   13718:	4648      	mov	r0, r9
   1371a:	f018 ff1a 	bl	2c552 <assert_post_action>
   1371e:	e01f      	b.n	13760 <msg_process+0x78>
	__ASSERT_NO_MSG(backend != NULL);
   13720:	f8df 9094 	ldr.w	r9, [pc, #148]	; 137b8 <msg_process+0xd0>
   13724:	236b      	movs	r3, #107	; 0x6b
   13726:	464a      	mov	r2, r9
   13728:	491e      	ldr	r1, [pc, #120]	; (137a4 <msg_process+0xbc>)
   1372a:	481f      	ldr	r0, [pc, #124]	; (137a8 <msg_process+0xc0>)
   1372c:	f018 fd0c 	bl	2c148 <printk>
   13730:	216b      	movs	r1, #107	; 0x6b
   13732:	4648      	mov	r0, r9
   13734:	f018 ff0d 	bl	2c552 <assert_post_action>
   13738:	e01e      	b.n	13778 <msg_process+0x90>
	backend->api->put(backend, msg);
   1373a:	f858 3005 	ldr.w	r3, [r8, r5]
   1373e:	685b      	ldr	r3, [r3, #4]
   13740:	4639      	mov	r1, r7
   13742:	4630      	mov	r0, r6
   13744:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   13746:	3401      	adds	r4, #1
   13748:	4b18      	ldr	r3, [pc, #96]	; (137ac <msg_process+0xc4>)
   1374a:	4a19      	ldr	r2, [pc, #100]	; (137b0 <msg_process+0xc8>)
   1374c:	1a9b      	subs	r3, r3, r2
   1374e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   13752:	da20      	bge.n	13796 <msg_process+0xae>
	return &__log_backends_start[idx];
   13754:	ea4f 1804 	mov.w	r8, r4, lsl #4
   13758:	4d15      	ldr	r5, [pc, #84]	; (137b0 <msg_process+0xc8>)
	__ASSERT_NO_MSG(backend != NULL);
   1375a:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
   1375e:	d0d0      	beq.n	13702 <msg_process+0x1a>
	return backend->cb->active;
   13760:	6873      	ldr	r3, [r6, #4]
   13762:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   13764:	2b00      	cmp	r3, #0
   13766:	d0ee      	beq.n	13746 <msg_process+0x5e>
			    msg_filter_check(backend, msg)) {
   13768:	4639      	mov	r1, r7
   1376a:	4630      	mov	r0, r6
   1376c:	f018 ff11 	bl	2c592 <msg_filter_check>
			if (log_backend_is_active(backend) &&
   13770:	2800      	cmp	r0, #0
   13772:	d0e8      	beq.n	13746 <msg_process+0x5e>
	__ASSERT_NO_MSG(backend != NULL);
   13774:	2e00      	cmp	r6, #0
   13776:	d0d3      	beq.n	13720 <msg_process+0x38>
	__ASSERT_NO_MSG(msg != NULL);
   13778:	2f00      	cmp	r7, #0
   1377a:	d1de      	bne.n	1373a <msg_process+0x52>
   1377c:	f8df 9038 	ldr.w	r9, [pc, #56]	; 137b8 <msg_process+0xd0>
   13780:	236c      	movs	r3, #108	; 0x6c
   13782:	464a      	mov	r2, r9
   13784:	490b      	ldr	r1, [pc, #44]	; (137b4 <msg_process+0xcc>)
   13786:	4808      	ldr	r0, [pc, #32]	; (137a8 <msg_process+0xc0>)
   13788:	f018 fcde 	bl	2c148 <printk>
   1378c:	216c      	movs	r1, #108	; 0x6c
   1378e:	4648      	mov	r0, r9
   13790:	f018 fedf 	bl	2c552 <assert_post_action>
   13794:	e7d1      	b.n	1373a <msg_process+0x52>
			log_msg_put(msg.msg);
   13796:	4638      	mov	r0, r7
   13798:	f018 ffc0 	bl	2c71c <log_msg_put>
}
   1379c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   137a0:	20003ff6 	.word	0x20003ff6
   137a4:	00032664 	.word	0x00032664
   137a8:	00031df4 	.word	0x00031df4
   137ac:	00031a00 	.word	0x00031a00
   137b0:	000319f0 	.word	0x000319f0
   137b4:	00032700 	.word	0x00032700
   137b8:	00032630 	.word	0x00032630

000137bc <z_impl_log_process>:
{
   137bc:	b510      	push	{r4, lr}
   137be:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   137c0:	4b11      	ldr	r3, [pc, #68]	; (13808 <z_impl_log_process+0x4c>)
   137c2:	781b      	ldrb	r3, [r3, #0]
   137c4:	b903      	cbnz	r3, 137c8 <z_impl_log_process+0xc>
   137c6:	b1d0      	cbz	r0, 137fe <z_impl_log_process+0x42>
	msg = get_msg();
   137c8:	f7ff fe50 	bl	1346c <get_msg>
	if (msg.msg) {
   137cc:	4603      	mov	r3, r0
   137ce:	b180      	cbz	r0, 137f2 <z_impl_log_process+0x36>
		if (!bypass) {
   137d0:	b95c      	cbnz	r4, 137ea <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   137d2:	4a0e      	ldr	r2, [pc, #56]	; (1380c <z_impl_log_process+0x50>)
   137d4:	f3bf 8f5b 	dmb	ish
   137d8:	e852 1f00 	ldrex	r1, [r2]
   137dc:	3901      	subs	r1, #1
   137de:	e842 1000 	strex	r0, r1, [r2]
   137e2:	2800      	cmp	r0, #0
   137e4:	d1f8      	bne.n	137d8 <z_impl_log_process+0x1c>
   137e6:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
   137ea:	4621      	mov	r1, r4
   137ec:	4618      	mov	r0, r3
   137ee:	f7ff ff7b 	bl	136e8 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   137f2:	b914      	cbnz	r4, 137fa <z_impl_log_process+0x3e>
   137f4:	f7ff fed8 	bl	135a8 <z_log_dropped_pending>
   137f8:	b910      	cbnz	r0, 13800 <z_impl_log_process+0x44>
	return next_pending();
   137fa:	f7ff fd45 	bl	13288 <next_pending>
}
   137fe:	bd10      	pop	{r4, pc}
		dropped_notify();
   13800:	f7ff fe86 	bl	13510 <dropped_notify>
   13804:	e7f9      	b.n	137fa <z_impl_log_process+0x3e>
   13806:	bf00      	nop
   13808:	20003ff5 	.word	0x20003ff5
   1380c:	2000274c 	.word	0x2000274c

00013810 <z_log_msg_post_finalize>:
{
   13810:	b510      	push	{r4, lr}
   13812:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13814:	4b1d      	ldr	r3, [pc, #116]	; (1388c <z_log_msg_post_finalize+0x7c>)
   13816:	f3bf 8f5b 	dmb	ish
   1381a:	e853 2f00 	ldrex	r2, [r3]
   1381e:	1c51      	adds	r1, r2, #1
   13820:	e843 1000 	strex	r0, r1, [r3]
   13824:	2800      	cmp	r0, #0
   13826:	d1f8      	bne.n	1381a <z_log_msg_post_finalize+0xa>
   13828:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   1382c:	4b18      	ldr	r3, [pc, #96]	; (13890 <z_log_msg_post_finalize+0x80>)
   1382e:	781b      	ldrb	r3, [r3, #0]
   13830:	b93b      	cbnz	r3, 13842 <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
   13832:	4b18      	ldr	r3, [pc, #96]	; (13894 <z_log_msg_post_finalize+0x84>)
   13834:	681b      	ldr	r3, [r3, #0]
   13836:	b103      	cbz	r3, 1383a <z_log_msg_post_finalize+0x2a>
   13838:	b19a      	cbz	r2, 13862 <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1383a:	2a0a      	cmp	r2, #10
   1383c:	d01c      	beq.n	13878 <z_log_msg_post_finalize+0x68>
}
   1383e:	b002      	add	sp, #8
   13840:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   13842:	f04f 0340 	mov.w	r3, #64	; 0x40
   13846:	f3ef 8411 	mrs	r4, BASEPRI
   1384a:	f383 8812 	msr	BASEPRI_MAX, r3
   1384e:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   13852:	2000      	movs	r0, #0
   13854:	f7ff ffb2 	bl	137bc <z_impl_log_process>
	__asm__ volatile(
   13858:	f384 8811 	msr	BASEPRI, r4
   1385c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13860:	e7ed      	b.n	1383e <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
   13862:	2200      	movs	r2, #0
   13864:	2300      	movs	r3, #0
   13866:	e9cd 2300 	strd	r2, r3, [sp]
   1386a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1386e:	2300      	movs	r3, #0
   13870:	4809      	ldr	r0, [pc, #36]	; (13898 <z_log_msg_post_finalize+0x88>)
   13872:	f013 fdfd 	bl	27470 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
   13876:	e7e2      	b.n	1383e <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   13878:	2b00      	cmp	r3, #0
   1387a:	d0e0      	beq.n	1383e <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
   1387c:	4806      	ldr	r0, [pc, #24]	; (13898 <z_log_msg_post_finalize+0x88>)
   1387e:	f01c ff99 	bl	307b4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13882:	4806      	ldr	r0, [pc, #24]	; (1389c <z_log_msg_post_finalize+0x8c>)
   13884:	f010 ff24 	bl	246d0 <z_impl_k_sem_give>
}
   13888:	e7d9      	b.n	1383e <z_log_msg_post_finalize+0x2e>
   1388a:	bf00      	nop
   1388c:	2000274c 	.word	0x2000274c
   13890:	20003ff6 	.word	0x20003ff6
   13894:	20002780 	.word	0x20002780
   13898:	20001b90 	.word	0x20001b90
   1389c:	20000c74 	.word	0x20000c74

000138a0 <log_0>:
{
   138a0:	b570      	push	{r4, r5, r6, lr}
   138a2:	4605      	mov	r5, r0
   138a4:	460e      	mov	r6, r1
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   138a6:	f000 fa3b 	bl	13d20 <log_msg_chunk_alloc>

	if (msg != NULL) {
   138aa:	4604      	mov	r4, r0
   138ac:	b140      	cbz	r0, 138c0 <log_0+0x20>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   138ae:	2301      	movs	r3, #1
   138b0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   138b2:	2200      	movs	r2, #0
   138b4:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   138b6:	f04f 0300 	mov.w	r3, #0
   138ba:	f362 0300 	bfi	r3, r2, #0, #1
   138be:	7203      	strb	r3, [r0, #8]
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   138c0:	b104      	cbz	r4, 138c4 <log_0+0x24>
		msg->str = str;
   138c2:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   138c4:	b1b4      	cbz	r4, 138f4 <log_0+0x54>
	msg->hdr.ids = src_level;
   138c6:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   138c8:	4b0b      	ldr	r3, [pc, #44]	; (138f8 <log_0+0x58>)
   138ca:	681b      	ldr	r3, [r3, #0]
   138cc:	4798      	blx	r3
   138ce:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   138d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   138d4:	f3ef 8511 	mrs	r5, BASEPRI
   138d8:	f383 8812 	msr	BASEPRI_MAX, r3
   138dc:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   138e0:	4621      	mov	r1, r4
   138e2:	4806      	ldr	r0, [pc, #24]	; (138fc <log_0+0x5c>)
   138e4:	f018 fe41 	bl	2c56a <log_list_add_tail>
	__asm__ volatile(
   138e8:	f385 8811 	msr	BASEPRI, r5
   138ec:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   138f0:	f7ff ff8e 	bl	13810 <z_log_msg_post_finalize>
}
   138f4:	bd70      	pop	{r4, r5, r6, pc}
   138f6:	bf00      	nop
   138f8:	20000584 	.word	0x20000584
   138fc:	20002758 	.word	0x20002758

00013900 <log_1>:
{
   13900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13902:	4606      	mov	r6, r0
   13904:	460d      	mov	r5, r1
   13906:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   13908:	f000 fa0a 	bl	13d20 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1390c:	4604      	mov	r4, r0
   1390e:	b140      	cbz	r0, 13922 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
   13910:	2301      	movs	r3, #1
   13912:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   13914:	2100      	movs	r1, #0
   13916:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   13918:	f04f 0300 	mov.w	r3, #0
   1391c:	f361 0300 	bfi	r3, r1, #0, #1
   13920:	7203      	strb	r3, [r0, #8]
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   13922:	b134      	cbz	r4, 13932 <log_1+0x32>
		msg->str = str;
   13924:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   13926:	7a63      	ldrb	r3, [r4, #9]
   13928:	2201      	movs	r2, #1
   1392a:	f362 1307 	bfi	r3, r2, #4, #4
   1392e:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   13930:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
   13932:	b1b4      	cbz	r4, 13962 <log_1+0x62>
	msg->hdr.ids = src_level;
   13934:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   13936:	4b0b      	ldr	r3, [pc, #44]	; (13964 <log_1+0x64>)
   13938:	681b      	ldr	r3, [r3, #0]
   1393a:	4798      	blx	r3
   1393c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1393e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13942:	f3ef 8511 	mrs	r5, BASEPRI
   13946:	f383 8812 	msr	BASEPRI_MAX, r3
   1394a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1394e:	4621      	mov	r1, r4
   13950:	4805      	ldr	r0, [pc, #20]	; (13968 <log_1+0x68>)
   13952:	f018 fe0a 	bl	2c56a <log_list_add_tail>
	__asm__ volatile(
   13956:	f385 8811 	msr	BASEPRI, r5
   1395a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   1395e:	f7ff ff57 	bl	13810 <z_log_msg_post_finalize>
}
   13962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13964:	20000584 	.word	0x20000584
   13968:	20002758 	.word	0x20002758

0001396c <log_2>:
{
   1396c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13970:	4607      	mov	r7, r0
   13972:	460e      	mov	r6, r1
   13974:	4615      	mov	r5, r2
   13976:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   13978:	f000 f9d2 	bl	13d20 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1397c:	4604      	mov	r4, r0
   1397e:	b140      	cbz	r0, 13992 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
   13980:	2301      	movs	r3, #1
   13982:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   13984:	2200      	movs	r2, #0
   13986:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   13988:	f04f 0300 	mov.w	r3, #0
   1398c:	f362 0300 	bfi	r3, r2, #0, #1
   13990:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   13992:	b13c      	cbz	r4, 139a4 <log_2+0x38>
		msg->str = str;
   13994:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   13996:	7a63      	ldrb	r3, [r4, #9]
   13998:	2202      	movs	r2, #2
   1399a:	f362 1307 	bfi	r3, r2, #4, #4
   1399e:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   139a0:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
   139a2:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
   139a4:	b1bc      	cbz	r4, 139d6 <log_2+0x6a>
	msg->hdr.ids = src_level;
   139a6:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   139aa:	4b0c      	ldr	r3, [pc, #48]	; (139dc <log_2+0x70>)
   139ac:	681b      	ldr	r3, [r3, #0]
   139ae:	4798      	blx	r3
   139b0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   139b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   139b6:	f3ef 8511 	mrs	r5, BASEPRI
   139ba:	f383 8812 	msr	BASEPRI_MAX, r3
   139be:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   139c2:	4621      	mov	r1, r4
   139c4:	4806      	ldr	r0, [pc, #24]	; (139e0 <log_2+0x74>)
   139c6:	f018 fdd0 	bl	2c56a <log_list_add_tail>
	__asm__ volatile(
   139ca:	f385 8811 	msr	BASEPRI, r5
   139ce:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   139d2:	f7ff ff1d 	bl	13810 <z_log_msg_post_finalize>
}
   139d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   139da:	bf00      	nop
   139dc:	20000584 	.word	0x20000584
   139e0:	20002758 	.word	0x20002758

000139e4 <log_hexdump>:
{
   139e4:	b538      	push	{r3, r4, r5, lr}
   139e6:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   139e8:	f018 fedc 	bl	2c7a4 <log_msg_hexdump_create>
		if (msg == NULL) {
   139ec:	b1b8      	cbz	r0, 13a1e <log_hexdump+0x3a>
   139ee:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   139f0:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   139f2:	4b0b      	ldr	r3, [pc, #44]	; (13a20 <log_hexdump+0x3c>)
   139f4:	681b      	ldr	r3, [r3, #0]
   139f6:	4798      	blx	r3
   139f8:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   139fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   139fe:	f3ef 8411 	mrs	r4, BASEPRI
   13a02:	f383 8812 	msr	BASEPRI_MAX, r3
   13a06:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   13a0a:	4629      	mov	r1, r5
   13a0c:	4805      	ldr	r0, [pc, #20]	; (13a24 <log_hexdump+0x40>)
   13a0e:	f018 fdac 	bl	2c56a <log_list_add_tail>
	__asm__ volatile(
   13a12:	f384 8811 	msr	BASEPRI, r4
   13a16:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   13a1a:	f7ff fef9 	bl	13810 <z_log_msg_post_finalize>
}
   13a1e:	bd38      	pop	{r3, r4, r5, pc}
   13a20:	20000584 	.word	0x20000584
   13a24:	20002758 	.word	0x20002758

00013a28 <log_n>:
{
   13a28:	b538      	push	{r3, r4, r5, lr}
   13a2a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   13a2c:	f000 f9d4 	bl	13dd8 <log_msg_create_n>
		if (msg == NULL) {
   13a30:	b1b8      	cbz	r0, 13a62 <log_n+0x3a>
   13a32:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   13a34:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   13a36:	4b0b      	ldr	r3, [pc, #44]	; (13a64 <log_n+0x3c>)
   13a38:	681b      	ldr	r3, [r3, #0]
   13a3a:	4798      	blx	r3
   13a3c:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   13a3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13a42:	f3ef 8411 	mrs	r4, BASEPRI
   13a46:	f383 8812 	msr	BASEPRI_MAX, r3
   13a4a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   13a4e:	4629      	mov	r1, r5
   13a50:	4805      	ldr	r0, [pc, #20]	; (13a68 <log_n+0x40>)
   13a52:	f018 fd8a 	bl	2c56a <log_list_add_tail>
	__asm__ volatile(
   13a56:	f384 8811 	msr	BASEPRI, r4
   13a5a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   13a5e:	f7ff fed7 	bl	13810 <z_log_msg_post_finalize>
}
   13a62:	bd38      	pop	{r3, r4, r5, pc}
   13a64:	20000584 	.word	0x20000584
   13a68:	20002758 	.word	0x20002758

00013a6c <log_3>:
{
   13a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a70:	4680      	mov	r8, r0
   13a72:	460f      	mov	r7, r1
   13a74:	4616      	mov	r6, r2
   13a76:	461d      	mov	r5, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   13a78:	f000 f952 	bl	13d20 <log_msg_chunk_alloc>
	if (msg != NULL) {
   13a7c:	4604      	mov	r4, r0
   13a7e:	b140      	cbz	r0, 13a92 <log_3+0x26>
		msg->hdr.ref_cnt = 1;
   13a80:	2301      	movs	r3, #1
   13a82:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   13a84:	2200      	movs	r2, #0
   13a86:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   13a88:	f04f 0300 	mov.w	r3, #0
   13a8c:	f362 0300 	bfi	r3, r2, #0, #1
   13a90:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   13a92:	b14c      	cbz	r4, 13aa8 <log_3+0x3c>
		msg->str = str;
   13a94:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   13a98:	7a63      	ldrb	r3, [r4, #9]
   13a9a:	2203      	movs	r2, #3
   13a9c:	f362 1307 	bfi	r3, r2, #4, #4
   13aa0:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   13aa2:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   13aa4:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   13aa6:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   13aa8:	b1c4      	cbz	r4, 13adc <log_3+0x70>
	msg->hdr.ids = src_level;
   13aaa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   13aae:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   13ab0:	4b0b      	ldr	r3, [pc, #44]	; (13ae0 <log_3+0x74>)
   13ab2:	681b      	ldr	r3, [r3, #0]
   13ab4:	4798      	blx	r3
   13ab6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   13ab8:	f04f 0340 	mov.w	r3, #64	; 0x40
   13abc:	f3ef 8511 	mrs	r5, BASEPRI
   13ac0:	f383 8812 	msr	BASEPRI_MAX, r3
   13ac4:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   13ac8:	4621      	mov	r1, r4
   13aca:	4806      	ldr	r0, [pc, #24]	; (13ae4 <log_3+0x78>)
   13acc:	f018 fd4d 	bl	2c56a <log_list_add_tail>
	__asm__ volatile(
   13ad0:	f385 8811 	msr	BASEPRI, r5
   13ad4:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   13ad8:	f7ff fe9a 	bl	13810 <z_log_msg_post_finalize>
}
   13adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ae0:	20000584 	.word	0x20000584
   13ae4:	20002758 	.word	0x20002758

00013ae8 <z_impl_log_panic>:
	if (panic_mode) {
   13ae8:	4b22      	ldr	r3, [pc, #136]	; (13b74 <z_impl_log_panic+0x8c>)
   13aea:	781b      	ldrb	r3, [r3, #0]
   13aec:	b103      	cbz	r3, 13af0 <z_impl_log_panic+0x8>
   13aee:	4770      	bx	lr
{
   13af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
   13af4:	f7ff fc3a 	bl	1336c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   13af8:	2400      	movs	r4, #0
   13afa:	e013      	b.n	13b24 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
   13afc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 13b88 <z_impl_log_panic+0xa0>
   13b00:	f240 131d 	movw	r3, #285	; 0x11d
   13b04:	4642      	mov	r2, r8
   13b06:	491c      	ldr	r1, [pc, #112]	; (13b78 <z_impl_log_panic+0x90>)
   13b08:	481c      	ldr	r0, [pc, #112]	; (13b7c <z_impl_log_panic+0x94>)
   13b0a:	f018 fb1d 	bl	2c148 <printk>
   13b0e:	f240 111d 	movw	r1, #285	; 0x11d
   13b12:	4640      	mov	r0, r8
   13b14:	f018 fd1d 	bl	2c552 <assert_post_action>
   13b18:	e00f      	b.n	13b3a <z_impl_log_panic+0x52>
	backend->api->panic(backend);
   13b1a:	597b      	ldr	r3, [r7, r5]
   13b1c:	695b      	ldr	r3, [r3, #20]
   13b1e:	4630      	mov	r0, r6
   13b20:	4798      	blx	r3
   13b22:	3401      	adds	r4, #1
   13b24:	4b16      	ldr	r3, [pc, #88]	; (13b80 <z_impl_log_panic+0x98>)
   13b26:	4a17      	ldr	r2, [pc, #92]	; (13b84 <z_impl_log_panic+0x9c>)
   13b28:	1a9b      	subs	r3, r3, r2
   13b2a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   13b2e:	da17      	bge.n	13b60 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
   13b30:	0127      	lsls	r7, r4, #4
   13b32:	4d14      	ldr	r5, [pc, #80]	; (13b84 <z_impl_log_panic+0x9c>)
	__ASSERT_NO_MSG(backend != NULL);
   13b34:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
   13b38:	d0e0      	beq.n	13afc <z_impl_log_panic+0x14>
	return backend->cb->active;
   13b3a:	6873      	ldr	r3, [r6, #4]
   13b3c:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   13b3e:	2b00      	cmp	r3, #0
   13b40:	d0ef      	beq.n	13b22 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
   13b42:	2e00      	cmp	r6, #0
   13b44:	d1e9      	bne.n	13b1a <z_impl_log_panic+0x32>
   13b46:	f8df 8040 	ldr.w	r8, [pc, #64]	; 13b88 <z_impl_log_panic+0xa0>
   13b4a:	23c2      	movs	r3, #194	; 0xc2
   13b4c:	4642      	mov	r2, r8
   13b4e:	490a      	ldr	r1, [pc, #40]	; (13b78 <z_impl_log_panic+0x90>)
   13b50:	480a      	ldr	r0, [pc, #40]	; (13b7c <z_impl_log_panic+0x94>)
   13b52:	f018 faf9 	bl	2c148 <printk>
   13b56:	21c2      	movs	r1, #194	; 0xc2
   13b58:	4640      	mov	r0, r8
   13b5a:	f018 fcfa 	bl	2c552 <assert_post_action>
   13b5e:	e7dc      	b.n	13b1a <z_impl_log_panic+0x32>
   13b60:	2000      	movs	r0, #0
   13b62:	f7ff fe2b 	bl	137bc <z_impl_log_process>
		while (log_process(false) == true) {
   13b66:	2800      	cmp	r0, #0
   13b68:	d1fa      	bne.n	13b60 <z_impl_log_panic+0x78>
	panic_mode = true;
   13b6a:	4b02      	ldr	r3, [pc, #8]	; (13b74 <z_impl_log_panic+0x8c>)
   13b6c:	2201      	movs	r2, #1
   13b6e:	701a      	strb	r2, [r3, #0]
}
   13b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b74:	20003ff6 	.word	0x20003ff6
   13b78:	00032664 	.word	0x00032664
   13b7c:	00031df4 	.word	0x00031df4
   13b80:	00031a00 	.word	0x00031a00
   13b84:	000319f0 	.word	0x000319f0
   13b88:	00032630 	.word	0x00032630

00013b8c <log_process_thread_func>:
{
   13b8c:	b510      	push	{r4, lr}
	return __log_backends_end - __log_backends_start;
   13b8e:	4b13      	ldr	r3, [pc, #76]	; (13bdc <log_process_thread_func+0x50>)
   13b90:	4a13      	ldr	r2, [pc, #76]	; (13be0 <log_process_thread_func+0x54>)
   13b92:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   13b94:	2b00      	cmp	r3, #0
   13b96:	dd06      	ble.n	13ba6 <log_process_thread_func+0x1a>
	log_init();
   13b98:	f7ff fbe8 	bl	1336c <log_init>
	return z_impl_z_current_get();
   13b9c:	f012 fed0 	bl	26940 <z_impl_z_current_get>
	thread_set(k_current_get());
   13ba0:	f7ff fb56 	bl	13250 <thread_set>
   13ba4:	e014      	b.n	13bd0 <log_process_thread_func+0x44>
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   13ba6:	4c0f      	ldr	r4, [pc, #60]	; (13be4 <log_process_thread_func+0x58>)
   13ba8:	f240 43f1 	movw	r3, #1265	; 0x4f1
   13bac:	4622      	mov	r2, r4
   13bae:	490e      	ldr	r1, [pc, #56]	; (13be8 <log_process_thread_func+0x5c>)
   13bb0:	480e      	ldr	r0, [pc, #56]	; (13bec <log_process_thread_func+0x60>)
   13bb2:	f018 fac9 	bl	2c148 <printk>
   13bb6:	f240 41f1 	movw	r1, #1265	; 0x4f1
   13bba:	4620      	mov	r0, r4
   13bbc:	f018 fcc9 	bl	2c552 <assert_post_action>
   13bc0:	e7ea      	b.n	13b98 <log_process_thread_func+0xc>
	return z_impl_k_sem_take(sem, timeout);
   13bc2:	f04f 32ff 	mov.w	r2, #4294967295
   13bc6:	f04f 33ff 	mov.w	r3, #4294967295
   13bca:	4809      	ldr	r0, [pc, #36]	; (13bf0 <log_process_thread_func+0x64>)
   13bcc:	f010 fdc8 	bl	24760 <z_impl_k_sem_take>
   13bd0:	2000      	movs	r0, #0
   13bd2:	f7ff fdf3 	bl	137bc <z_impl_log_process>
		if (log_process(false) == false) {
   13bd6:	2800      	cmp	r0, #0
   13bd8:	d1fa      	bne.n	13bd0 <log_process_thread_func+0x44>
   13bda:	e7f2      	b.n	13bc2 <log_process_thread_func+0x36>
   13bdc:	00031a00 	.word	0x00031a00
   13be0:	000319f0 	.word	0x000319f0
   13be4:	000325e8 	.word	0x000325e8
   13be8:	00032714 	.word	0x00032714
   13bec:	00031df4 	.word	0x00031df4
   13bf0:	20000c74 	.word	0x20000c74

00013bf4 <z_log_free>:
{
   13bf4:	b500      	push	{lr}
   13bf6:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   13bf8:	3804      	subs	r0, #4
   13bfa:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13bfc:	f3bf 8f5b 	dmb	ish
   13c00:	e850 3f00 	ldrex	r3, [r0]
   13c04:	1e5a      	subs	r2, r3, #1
   13c06:	e840 2100 	strex	r1, r2, [r0]
   13c0a:	2900      	cmp	r1, #0
   13c0c:	d1f8      	bne.n	13c00 <z_log_free+0xc>
   13c0e:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   13c12:	2b01      	cmp	r3, #1
   13c14:	d002      	beq.n	13c1c <z_log_free+0x28>
}
   13c16:	b003      	add	sp, #12
   13c18:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   13c1c:	a901      	add	r1, sp, #4
   13c1e:	4802      	ldr	r0, [pc, #8]	; (13c28 <z_log_free+0x34>)
   13c20:	f00f ff04 	bl	23a2c <k_mem_slab_free>
}
   13c24:	e7f7      	b.n	13c16 <z_log_free+0x22>
   13c26:	bf00      	nop
   13c28:	20002760 	.word	0x20002760

00013c2c <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13c2c:	4b05      	ldr	r3, [pc, #20]	; (13c44 <log_source_name_get+0x18>)
   13c2e:	4a06      	ldr	r2, [pc, #24]	; (13c48 <log_source_name_get+0x1c>)
   13c30:	1a9b      	subs	r3, r3, r2
   13c32:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   13c36:	d202      	bcs.n	13c3e <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   13c38:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   13c3c:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13c3e:	2000      	movs	r0, #0
}
   13c40:	4770      	bx	lr
   13c42:	bf00      	nop
   13c44:	000319f0 	.word	0x000319f0
   13c48:	00031908 	.word	0x00031908

00013c4c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   13c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c4e:	4605      	mov	r5, r0
   13c50:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13c52:	4c15      	ldr	r4, [pc, #84]	; (13ca8 <log_backend_enable+0x5c>)
   13c54:	1b04      	subs	r4, r0, r4
   13c56:	1124      	asrs	r4, r4, #4
   13c58:	3401      	adds	r4, #1

	log_backend_id_set(backend, id);
   13c5a:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   13c5c:	b150      	cbz	r0, 13c74 <log_backend_enable+0x28>
	backend->cb->id = id;
   13c5e:	686b      	ldr	r3, [r5, #4]
   13c60:	711c      	strb	r4, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
   13c62:	b19d      	cbz	r5, 13c8c <log_backend_enable+0x40>
	backend->cb->ctx = ctx;
   13c64:	686b      	ldr	r3, [r5, #4]
   13c66:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   13c68:	686b      	ldr	r3, [r5, #4]
   13c6a:	2201      	movs	r2, #1
   13c6c:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   13c6e:	f7ff fc11 	bl	13494 <z_log_notify_backend_enabled>
}
   13c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(backend != NULL);
   13c74:	4f0d      	ldr	r7, [pc, #52]	; (13cac <log_backend_enable+0x60>)
   13c76:	23d1      	movs	r3, #209	; 0xd1
   13c78:	463a      	mov	r2, r7
   13c7a:	490d      	ldr	r1, [pc, #52]	; (13cb0 <log_backend_enable+0x64>)
   13c7c:	480d      	ldr	r0, [pc, #52]	; (13cb4 <log_backend_enable+0x68>)
   13c7e:	f018 fa63 	bl	2c148 <printk>
   13c82:	21d1      	movs	r1, #209	; 0xd1
   13c84:	4638      	mov	r0, r7
   13c86:	f018 fc64 	bl	2c552 <assert_post_action>
   13c8a:	e7e8      	b.n	13c5e <log_backend_enable+0x12>
	__ASSERT_NO_MSG(backend != NULL);
   13c8c:	4c07      	ldr	r4, [pc, #28]	; (13cac <log_backend_enable+0x60>)
   13c8e:	f44f 7381 	mov.w	r3, #258	; 0x102
   13c92:	4622      	mov	r2, r4
   13c94:	4906      	ldr	r1, [pc, #24]	; (13cb0 <log_backend_enable+0x64>)
   13c96:	4807      	ldr	r0, [pc, #28]	; (13cb4 <log_backend_enable+0x68>)
   13c98:	f018 fa56 	bl	2c148 <printk>
   13c9c:	f44f 7181 	mov.w	r1, #258	; 0x102
   13ca0:	4620      	mov	r0, r4
   13ca2:	f018 fc56 	bl	2c552 <assert_post_action>
   13ca6:	e7dd      	b.n	13c64 <log_backend_enable+0x18>
   13ca8:	000319f0 	.word	0x000319f0
   13cac:	00032630 	.word	0x00032630
   13cb0:	00032664 	.word	0x00032664
   13cb4:	00031df4 	.word	0x00031df4

00013cb8 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   13cb8:	b510      	push	{r4, lr}
   13cba:	b082      	sub	sp, #8
   13cbc:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   13cbe:	9b01      	ldr	r3, [sp, #4]
   13cc0:	b133      	cbz	r3, 13cd0 <cont_free+0x18>
		next = cont->next;
   13cc2:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   13cc4:	a901      	add	r1, sp, #4
   13cc6:	4803      	ldr	r0, [pc, #12]	; (13cd4 <cont_free+0x1c>)
   13cc8:	f00f feb0 	bl	23a2c <k_mem_slab_free>
		cont = next;
   13ccc:	9401      	str	r4, [sp, #4]
   13cce:	e7f6      	b.n	13cbe <cont_free+0x6>
	}
}
   13cd0:	b002      	add	sp, #8
   13cd2:	bd10      	pop	{r4, pc}
   13cd4:	20002784 	.word	0x20002784

00013cd8 <log_msg_pool_init>:
{
   13cd8:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   13cda:	2320      	movs	r3, #32
   13cdc:	461a      	mov	r2, r3
   13cde:	4902      	ldr	r1, [pc, #8]	; (13ce8 <log_msg_pool_init+0x10>)
   13ce0:	4802      	ldr	r0, [pc, #8]	; (13cec <log_msg_pool_init+0x14>)
   13ce2:	f01c fbd1 	bl	30488 <k_mem_slab_init>
}
   13ce6:	bd08      	pop	{r3, pc}
   13ce8:	20007cf8 	.word	0x20007cf8
   13cec:	20002784 	.word	0x20002784

00013cf0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   13cf0:	b510      	push	{r4, lr}
   13cf2:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   13cf4:	2300      	movs	r3, #0
   13cf6:	9301      	str	r3, [sp, #4]
   13cf8:	2001      	movs	r0, #1
   13cfa:	f7ff fd5f 	bl	137bc <z_impl_log_process>
   13cfe:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   13d00:	f7ff fbd8 	bl	134b4 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   13d04:	2200      	movs	r2, #0
   13d06:	2300      	movs	r3, #0
   13d08:	a901      	add	r1, sp, #4
   13d0a:	4804      	ldr	r0, [pc, #16]	; (13d1c <log_msg_no_space_handle+0x2c>)
   13d0c:	f00f fe1a 	bl	23944 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   13d10:	b108      	cbz	r0, 13d16 <log_msg_no_space_handle+0x26>
   13d12:	2c00      	cmp	r4, #0
   13d14:	d1f0      	bne.n	13cf8 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   13d16:	9801      	ldr	r0, [sp, #4]
   13d18:	b002      	add	sp, #8
   13d1a:	bd10      	pop	{r4, pc}
   13d1c:	20002784 	.word	0x20002784

00013d20 <log_msg_chunk_alloc>:
{
   13d20:	b500      	push	{lr}
   13d22:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   13d24:	2300      	movs	r3, #0
   13d26:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   13d28:	f018 fc3b 	bl	2c5a2 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   13d2c:	b150      	cbz	r0, 13d44 <log_msg_chunk_alloc+0x24>
   13d2e:	2200      	movs	r2, #0
   13d30:	2300      	movs	r3, #0
   13d32:	a901      	add	r1, sp, #4
   13d34:	4807      	ldr	r0, [pc, #28]	; (13d54 <log_msg_chunk_alloc+0x34>)
   13d36:	f00f fe05 	bl	23944 <k_mem_slab_alloc>
	if (err != 0) {
   13d3a:	b930      	cbnz	r0, 13d4a <log_msg_chunk_alloc+0x2a>
}
   13d3c:	9801      	ldr	r0, [sp, #4]
   13d3e:	b003      	add	sp, #12
   13d40:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   13d44:	2200      	movs	r2, #0
   13d46:	2300      	movs	r3, #0
   13d48:	e7f3      	b.n	13d32 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   13d4a:	f7ff ffd1 	bl	13cf0 <log_msg_no_space_handle>
   13d4e:	9001      	str	r0, [sp, #4]
   13d50:	e7f4      	b.n	13d3c <log_msg_chunk_alloc+0x1c>
   13d52:	bf00      	nop
   13d54:	20002784 	.word	0x20002784

00013d58 <msg_free>:
{
   13d58:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d5a:	b083      	sub	sp, #12
   13d5c:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   13d5e:	4604      	mov	r4, r0
   13d60:	f018 fcc5 	bl	2c6ee <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13d64:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   13d66:	f013 0f01 	tst.w	r3, #1
   13d6a:	d101      	bne.n	13d70 <msg_free+0x18>
   13d6c:	4606      	mov	r6, r0
   13d6e:	bb50      	cbnz	r0, 13dc6 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   13d70:	9b01      	ldr	r3, [sp, #4]
   13d72:	7a1a      	ldrb	r2, [r3, #8]
   13d74:	f012 0f02 	tst.w	r2, #2
   13d78:	d128      	bne.n	13dcc <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   13d7a:	a901      	add	r1, sp, #4
   13d7c:	4815      	ldr	r0, [pc, #84]	; (13dd4 <msg_free+0x7c>)
   13d7e:	f00f fe55 	bl	23a2c <k_mem_slab_free>
}
   13d82:	b003      	add	sp, #12
   13d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   13d86:	9801      	ldr	r0, [sp, #4]
   13d88:	f018 fcc6 	bl	2c718 <log_msg_str_get>
   13d8c:	4631      	mov	r1, r6
   13d8e:	f7ff fab3 	bl	132f8 <z_log_get_s_mask>
					if (smask == 0U) {
   13d92:	4607      	mov	r7, r0
   13d94:	b988      	cbnz	r0, 13dba <msg_free+0x62>
   13d96:	e7eb      	b.n	13d70 <msg_free+0x18>
					z_log_free(buf);
   13d98:	4628      	mov	r0, r5
   13d9a:	f7ff ff2b 	bl	13bf4 <z_log_free>
		for (i = 0U; i < nargs; i++) {
   13d9e:	3401      	adds	r4, #1
   13da0:	42b4      	cmp	r4, r6
   13da2:	d2e5      	bcs.n	13d70 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   13da4:	4621      	mov	r1, r4
   13da6:	9801      	ldr	r0, [sp, #4]
   13da8:	f018 fca4 	bl	2c6f4 <log_msg_arg_get>
   13dac:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   13dae:	f7ff fc35 	bl	1361c <log_is_strdup>
   13db2:	2800      	cmp	r0, #0
   13db4:	d0f3      	beq.n	13d9e <msg_free+0x46>
				if (smask == 0U) {
   13db6:	2f00      	cmp	r7, #0
   13db8:	d0e5      	beq.n	13d86 <msg_free+0x2e>
				if (smask & BIT(i)) {
   13dba:	fa27 f304 	lsr.w	r3, r7, r4
   13dbe:	f013 0f01 	tst.w	r3, #1
   13dc2:	d0ec      	beq.n	13d9e <msg_free+0x46>
   13dc4:	e7e8      	b.n	13d98 <msg_free+0x40>
		uint32_t smask = 0U;
   13dc6:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   13dc8:	463c      	mov	r4, r7
   13dca:	e7e9      	b.n	13da0 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
   13dcc:	6958      	ldr	r0, [r3, #20]
   13dce:	f7ff ff73 	bl	13cb8 <cont_free>
   13dd2:	e7d2      	b.n	13d7a <msg_free+0x22>
   13dd4:	20002784 	.word	0x20002784

00013dd8 <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
   13dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13dda:	4607      	mov	r7, r0
   13ddc:	460e      	mov	r6, r1
   13dde:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   13de0:	2a0e      	cmp	r2, #14
   13de2:	d80f      	bhi.n	13e04 <log_msg_create_n+0x2c>

	struct  log_msg *msg = NULL;

	msg = msg_alloc(nargs);
   13de4:	4620      	mov	r0, r4
   13de6:	f018 fcac 	bl	2c742 <msg_alloc>

	if (msg != NULL) {
   13dea:	4605      	mov	r5, r0
   13dec:	b140      	cbz	r0, 13e00 <log_msg_create_n+0x28>
		msg->str = str;
   13dee:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   13df0:	7a43      	ldrb	r3, [r0, #9]
   13df2:	f364 1307 	bfi	r3, r4, #4, #4
   13df6:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   13df8:	4622      	mov	r2, r4
   13dfa:	4631      	mov	r1, r6
   13dfc:	f018 fbe5 	bl	2c5ca <copy_args_to_msg>
	}

	return msg;
}
   13e00:	4628      	mov	r0, r5
   13e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   13e04:	4d06      	ldr	r5, [pc, #24]	; (13e20 <log_msg_create_n+0x48>)
   13e06:	f240 133b 	movw	r3, #315	; 0x13b
   13e0a:	462a      	mov	r2, r5
   13e0c:	4905      	ldr	r1, [pc, #20]	; (13e24 <log_msg_create_n+0x4c>)
   13e0e:	4806      	ldr	r0, [pc, #24]	; (13e28 <log_msg_create_n+0x50>)
   13e10:	f018 f99a 	bl	2c148 <printk>
   13e14:	f240 113b 	movw	r1, #315	; 0x13b
   13e18:	4628      	mov	r0, r5
   13e1a:	f018 fb9a 	bl	2c552 <assert_post_action>
   13e1e:	e7e1      	b.n	13de4 <log_msg_create_n+0xc>
   13e20:	00032790 	.word	0x00032790
   13e24:	000327bc 	.word	0x000327bc
   13e28:	00031df4 	.word	0x00031df4

00013e2c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   13e2c:	b40e      	push	{r1, r2, r3}
   13e2e:	b500      	push	{lr}
   13e30:	b082      	sub	sp, #8
   13e32:	4601      	mov	r1, r0
   13e34:	ab03      	add	r3, sp, #12
   13e36:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   13e3a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13e3c:	4803      	ldr	r0, [pc, #12]	; (13e4c <print_formatted+0x20>)
   13e3e:	f7fe fcf9 	bl	12834 <cbvprintf>
	va_end(args);

	return length;
}
   13e42:	b002      	add	sp, #8
   13e44:	f85d eb04 	ldr.w	lr, [sp], #4
   13e48:	b003      	add	sp, #12
   13e4a:	4770      	bx	lr
   13e4c:	0001412d 	.word	0x0001412d

00013e50 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   13e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e52:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   13e54:	f011 0f44 	tst.w	r1, #68	; 0x44
   13e58:	d005      	beq.n	13e66 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   13e5a:	4b1a      	ldr	r3, [pc, #104]	; (13ec4 <timestamp_print+0x74>)
   13e5c:	681c      	ldr	r4, [r3, #0]
   13e5e:	b934      	cbnz	r4, 13e6e <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   13e60:	2000      	movs	r0, #0
	}

	return length;
}
   13e62:	b005      	add	sp, #20
   13e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   13e66:	4918      	ldr	r1, [pc, #96]	; (13ec8 <timestamp_print+0x78>)
   13e68:	f7ff ffe0 	bl	13e2c <print_formatted>
   13e6c:	e7f9      	b.n	13e62 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   13e6e:	4b17      	ldr	r3, [pc, #92]	; (13ecc <timestamp_print+0x7c>)
   13e70:	6819      	ldr	r1, [r3, #0]
   13e72:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   13e76:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   13e7a:	4a15      	ldr	r2, [pc, #84]	; (13ed0 <timestamp_print+0x80>)
   13e7c:	fba2 3205 	umull	r3, r2, r2, r5
   13e80:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   13e82:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   13e86:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   13e8a:	4b12      	ldr	r3, [pc, #72]	; (13ed4 <timestamp_print+0x84>)
   13e8c:	fba3 7306 	umull	r7, r3, r3, r6
   13e90:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   13e92:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   13e96:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   13e9a:	fb05 f101 	mul.w	r1, r5, r1
   13e9e:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13ea2:	fb07 1114 	mls	r1, r7, r4, r1
   13ea6:	fb05 f101 	mul.w	r1, r5, r1
   13eaa:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   13eae:	9402      	str	r4, [sp, #8]
   13eb0:	9701      	str	r7, [sp, #4]
   13eb2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   13eb6:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   13eba:	9100      	str	r1, [sp, #0]
   13ebc:	4906      	ldr	r1, [pc, #24]	; (13ed8 <timestamp_print+0x88>)
   13ebe:	f7ff ffb5 	bl	13e2c <print_formatted>
   13ec2:	e7ce      	b.n	13e62 <timestamp_print+0x12>
   13ec4:	200027a4 	.word	0x200027a4
   13ec8:	000327c8 	.word	0x000327c8
   13ecc:	200027a8 	.word	0x200027a8
   13ed0:	91a2b3c5 	.word	0x91a2b3c5
   13ed4:	88888889 	.word	0x88888889
   13ed8:	000327d4 	.word	0x000327d4

00013edc <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   13edc:	b161      	cbz	r1, 13ef8 <color_print+0x1c>
{
   13ede:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   13ee0:	b12a      	cbz	r2, 13eee <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   13ee2:	4a06      	ldr	r2, [pc, #24]	; (13efc <color_print+0x20>)
   13ee4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   13ee8:	b912      	cbnz	r2, 13ef0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   13eea:	4a05      	ldr	r2, [pc, #20]	; (13f00 <color_print+0x24>)
   13eec:	e000      	b.n	13ef0 <color_print+0x14>
   13eee:	4a04      	ldr	r2, [pc, #16]	; (13f00 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   13ef0:	4904      	ldr	r1, [pc, #16]	; (13f04 <color_print+0x28>)
   13ef2:	f7ff ff9b 	bl	13e2c <print_formatted>
	}
}
   13ef6:	bd08      	pop	{r3, pc}
   13ef8:	4770      	bx	lr
   13efa:	bf00      	nop
   13efc:	000328bc 	.word	0x000328bc
   13f00:	000327f0 	.word	0x000327f0
   13f04:	000327f8 	.word	0x000327f8

00013f08 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13f08:	f011 0f10 	tst.w	r1, #16
   13f0c:	d10b      	bne.n	13f26 <newline_print+0x1e>
{
   13f0e:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13f10:	f011 0f20 	tst.w	r1, #32
   13f14:	d003      	beq.n	13f1e <newline_print+0x16>
		print_formatted(ctx, "\n");
   13f16:	4904      	ldr	r1, [pc, #16]	; (13f28 <newline_print+0x20>)
   13f18:	f7ff ff88 	bl	13e2c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   13f1c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   13f1e:	4903      	ldr	r1, [pc, #12]	; (13f2c <newline_print+0x24>)
   13f20:	f7ff ff84 	bl	13e2c <print_formatted>
   13f24:	e7fa      	b.n	13f1c <newline_print+0x14>
   13f26:	4770      	bx	lr
   13f28:	000363b8 	.word	0x000363b8
   13f2c:	000365a4 	.word	0x000365a4

00013f30 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   13f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f34:	4605      	mov	r5, r0
   13f36:	460f      	mov	r7, r1
   13f38:	4616      	mov	r6, r2
   13f3a:	4698      	mov	r8, r3
	newline_print(output, flags);
   13f3c:	9906      	ldr	r1, [sp, #24]
   13f3e:	f7ff ffe3 	bl	13f08 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   13f42:	2400      	movs	r4, #0
   13f44:	4544      	cmp	r4, r8
   13f46:	da05      	bge.n	13f54 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   13f48:	4924      	ldr	r1, [pc, #144]	; (13fdc <hexdump_line_print+0xac>)
   13f4a:	4628      	mov	r0, r5
   13f4c:	f7ff ff6e 	bl	13e2c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13f50:	3401      	adds	r4, #1
   13f52:	e7f7      	b.n	13f44 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13f54:	2400      	movs	r4, #0
   13f56:	e009      	b.n	13f6c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   13f58:	4920      	ldr	r1, [pc, #128]	; (13fdc <hexdump_line_print+0xac>)
   13f5a:	4628      	mov	r0, r5
   13f5c:	f7ff ff66 	bl	13e2c <print_formatted>
   13f60:	e00b      	b.n	13f7a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   13f62:	491f      	ldr	r1, [pc, #124]	; (13fe0 <hexdump_line_print+0xb0>)
   13f64:	4628      	mov	r0, r5
   13f66:	f7ff ff61 	bl	13e2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13f6a:	3401      	adds	r4, #1
   13f6c:	2c0f      	cmp	r4, #15
   13f6e:	dc0c      	bgt.n	13f8a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   13f70:	2c00      	cmp	r4, #0
   13f72:	dd02      	ble.n	13f7a <hexdump_line_print+0x4a>
   13f74:	f014 0f07 	tst.w	r4, #7
   13f78:	d0ee      	beq.n	13f58 <hexdump_line_print+0x28>
		if (i < length) {
   13f7a:	42b4      	cmp	r4, r6
   13f7c:	d2f1      	bcs.n	13f62 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   13f7e:	5d3a      	ldrb	r2, [r7, r4]
   13f80:	4918      	ldr	r1, [pc, #96]	; (13fe4 <hexdump_line_print+0xb4>)
   13f82:	4628      	mov	r0, r5
   13f84:	f7ff ff52 	bl	13e2c <print_formatted>
   13f88:	e7ef      	b.n	13f6a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   13f8a:	4917      	ldr	r1, [pc, #92]	; (13fe8 <hexdump_line_print+0xb8>)
   13f8c:	4628      	mov	r0, r5
   13f8e:	f7ff ff4d 	bl	13e2c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13f92:	2400      	movs	r4, #0
   13f94:	e009      	b.n	13faa <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   13f96:	4911      	ldr	r1, [pc, #68]	; (13fdc <hexdump_line_print+0xac>)
   13f98:	4628      	mov	r0, r5
   13f9a:	f7ff ff47 	bl	13e2c <print_formatted>
   13f9e:	e00b      	b.n	13fb8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   13fa0:	4912      	ldr	r1, [pc, #72]	; (13fec <hexdump_line_print+0xbc>)
   13fa2:	4628      	mov	r0, r5
   13fa4:	f7ff ff42 	bl	13e2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13fa8:	3401      	adds	r4, #1
   13faa:	2c0f      	cmp	r4, #15
   13fac:	dc13      	bgt.n	13fd6 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
   13fae:	2c00      	cmp	r4, #0
   13fb0:	dd02      	ble.n	13fb8 <hexdump_line_print+0x88>
   13fb2:	f014 0f07 	tst.w	r4, #7
   13fb6:	d0ee      	beq.n	13f96 <hexdump_line_print+0x66>
		if (i < length) {
   13fb8:	42b4      	cmp	r4, r6
   13fba:	d207      	bcs.n	13fcc <hexdump_line_print+0x9c>
			char c = (char)data[i];
   13fbc:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
   13fbe:	4b0c      	ldr	r3, [pc, #48]	; (13ff0 <hexdump_line_print+0xc0>)
   13fc0:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
   13fc2:	f013 0f97 	tst.w	r3, #151	; 0x97
   13fc6:	d1eb      	bne.n	13fa0 <hexdump_line_print+0x70>
   13fc8:	222e      	movs	r2, #46	; 0x2e
   13fca:	e7e9      	b.n	13fa0 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
   13fcc:	4903      	ldr	r1, [pc, #12]	; (13fdc <hexdump_line_print+0xac>)
   13fce:	4628      	mov	r0, r5
   13fd0:	f7ff ff2c 	bl	13e2c <print_formatted>
   13fd4:	e7e8      	b.n	13fa8 <hexdump_line_print+0x78>
		}
	}
}
   13fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fda:	bf00      	nop
   13fdc:	00032820 	.word	0x00032820
   13fe0:	00032804 	.word	0x00032804
   13fe4:	000327fc 	.word	0x000327fc
   13fe8:	00032808 	.word	0x00032808
   13fec:	0003280c 	.word	0x0003280c
   13ff0:	00036739 	.word	0x00036739

00013ff4 <ids_print>:
{
   13ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ff8:	4680      	mov	r8, r0
   13ffa:	4616      	mov	r6, r2
   13ffc:	461d      	mov	r5, r3
   13ffe:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   14002:	b959      	cbnz	r1, 1401c <ids_print+0x28>
	int total = 0;
   14004:	2400      	movs	r4, #0
	if (source_id >= 0) {
   14006:	2f00      	cmp	r7, #0
   14008:	db1c      	blt.n	14044 <ids_print+0x50>
		total += print_formatted(output,
   1400a:	b186      	cbz	r6, 1402e <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1400c:	2301      	movs	r3, #1
   1400e:	9a07      	ldr	r2, [sp, #28]
   14010:	4093      	lsls	r3, r2
				(func_on &&
   14012:	f013 0f10 	tst.w	r3, #16
   14016:	d118      	bne.n	1404a <ids_print+0x56>
		total += print_formatted(output,
   14018:	4e0d      	ldr	r6, [pc, #52]	; (14050 <ids_print+0x5c>)
   1401a:	e009      	b.n	14030 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   1401c:	4b0d      	ldr	r3, [pc, #52]	; (14054 <ids_print+0x60>)
   1401e:	9a07      	ldr	r2, [sp, #28]
   14020:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14024:	490c      	ldr	r1, [pc, #48]	; (14058 <ids_print+0x64>)
   14026:	f7ff ff01 	bl	13e2c <print_formatted>
   1402a:	4604      	mov	r4, r0
   1402c:	e7eb      	b.n	14006 <ids_print+0x12>
		total += print_formatted(output,
   1402e:	4e08      	ldr	r6, [pc, #32]	; (14050 <ids_print+0x5c>)
   14030:	4639      	mov	r1, r7
   14032:	4628      	mov	r0, r5
   14034:	f7ff fdfa 	bl	13c2c <log_source_name_get>
   14038:	4602      	mov	r2, r0
   1403a:	4631      	mov	r1, r6
   1403c:	4640      	mov	r0, r8
   1403e:	f7ff fef5 	bl	13e2c <print_formatted>
   14042:	4404      	add	r4, r0
}
   14044:	4620      	mov	r0, r4
   14046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   1404a:	4e04      	ldr	r6, [pc, #16]	; (1405c <ids_print+0x68>)
   1404c:	e7f0      	b.n	14030 <ids_print+0x3c>
   1404e:	bf00      	nop
   14050:	00032810 	.word	0x00032810
   14054:	000328f8 	.word	0x000328f8
   14058:	0003281c 	.word	0x0003281c
   1405c:	00032818 	.word	0x00032818

00014060 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   14060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14064:	b085      	sub	sp, #20
   14066:	4605      	mov	r5, r0
   14068:	460c      	mov	r4, r1
   1406a:	4616      	mov	r6, r2
   1406c:	9303      	str	r3, [sp, #12]
   1406e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   14072:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   14076:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1407a:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
   1407e:	f018 fa8e 	bl	2c59e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   14082:	b1e8      	cbz	r0, 140c0 <prefix_print+0x60>
   14084:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   14086:	4913      	ldr	r1, [pc, #76]	; (140d4 <prefix_print+0x74>)
   14088:	4628      	mov	r0, r5
   1408a:	f7ff fecf 	bl	13e2c <print_formatted>
   1408e:	4607      	mov	r7, r0
	}

	if (stamp) {
   14090:	f1bb 0f00 	cmp.w	fp, #0
   14094:	d116      	bne.n	140c4 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   14096:	4642      	mov	r2, r8
   14098:	4651      	mov	r1, sl
   1409a:	4628      	mov	r0, r5
   1409c:	f018 fbeb 	bl	2c876 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
   140a0:	f8cd 8004 	str.w	r8, [sp, #4]
   140a4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   140a8:	9300      	str	r3, [sp, #0]
   140aa:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   140ae:	4632      	mov	r2, r6
   140b0:	4649      	mov	r1, r9
   140b2:	4628      	mov	r0, r5
   140b4:	f7ff ff9e 	bl	13ff4 <ids_print>
			domain_id, source_id, level);


	return length;
}
   140b8:	4438      	add	r0, r7
   140ba:	b005      	add	sp, #20
   140bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   140c0:	2700      	movs	r7, #0
   140c2:	e7e5      	b.n	14090 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   140c4:	9a03      	ldr	r2, [sp, #12]
   140c6:	4621      	mov	r1, r4
   140c8:	4628      	mov	r0, r5
   140ca:	f7ff fec1 	bl	13e50 <timestamp_print>
   140ce:	4407      	add	r7, r0
   140d0:	e7e1      	b.n	14096 <prefix_print+0x36>
   140d2:	bf00      	nop
   140d4:	00032824 	.word	0x00032824

000140d8 <hexdump_print>:
{
   140d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   140dc:	b089      	sub	sp, #36	; 0x24
   140de:	4607      	mov	r7, r0
   140e0:	460e      	mov	r6, r1
   140e2:	4691      	mov	r9, r2
   140e4:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
   140e6:	f018 fb17 	bl	2c718 <log_msg_str_get>
   140ea:	4602      	mov	r2, r0
   140ec:	490e      	ldr	r1, [pc, #56]	; (14128 <hexdump_print+0x50>)
   140ee:	4630      	mov	r0, r6
   140f0:	f7ff fe9c 	bl	13e2c <print_formatted>
	uint32_t offset = 0U;
   140f4:	2400      	movs	r4, #0
		length = sizeof(buf);
   140f6:	2510      	movs	r5, #16
   140f8:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   140fa:	4623      	mov	r3, r4
   140fc:	aa03      	add	r2, sp, #12
   140fe:	eb0d 0105 	add.w	r1, sp, r5
   14102:	4638      	mov	r0, r7
   14104:	f018 fba2 	bl	2c84c <log_msg_hexdump_data_get>
		if (length) {
   14108:	9a03      	ldr	r2, [sp, #12]
   1410a:	b152      	cbz	r2, 14122 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
   1410c:	f8cd 8000 	str.w	r8, [sp]
   14110:	464b      	mov	r3, r9
   14112:	eb0d 0105 	add.w	r1, sp, r5
   14116:	4630      	mov	r0, r6
   14118:	f7ff ff0a 	bl	13f30 <hexdump_line_print>
			offset += length;
   1411c:	9d03      	ldr	r5, [sp, #12]
   1411e:	442c      	add	r4, r5
		length = sizeof(buf);
   14120:	e7e9      	b.n	140f6 <hexdump_print+0x1e>
}
   14122:	b009      	add	sp, #36	; 0x24
   14124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14128:	000327f8 	.word	0x000327f8

0001412c <out_func>:
{
   1412c:	b538      	push	{r3, r4, r5, lr}
   1412e:	4605      	mov	r5, r0
   14130:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   14132:	684b      	ldr	r3, [r1, #4]
   14134:	681a      	ldr	r2, [r3, #0]
   14136:	68cb      	ldr	r3, [r1, #12]
   14138:	429a      	cmp	r2, r3
   1413a:	d014      	beq.n	14166 <out_func+0x3a>
	idx = atomic_inc(&out_ctx->control_block->offset);
   1413c:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1413e:	f3bf 8f5b 	dmb	ish
   14142:	e853 2f00 	ldrex	r2, [r3]
   14146:	1c51      	adds	r1, r2, #1
   14148:	e843 1000 	strex	r0, r1, [r3]
   1414c:	2800      	cmp	r0, #0
   1414e:	d1f8      	bne.n	14142 <out_func+0x16>
   14150:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   14154:	68a3      	ldr	r3, [r4, #8]
   14156:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   14158:	6863      	ldr	r3, [r4, #4]
   1415a:	681a      	ldr	r2, [r3, #0]
   1415c:	68e3      	ldr	r3, [r4, #12]
   1415e:	429a      	cmp	r2, r3
   14160:	d805      	bhi.n	1416e <out_func+0x42>
}
   14162:	2000      	movs	r0, #0
   14164:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   14166:	4608      	mov	r0, r1
   14168:	f018 fcf8 	bl	2cb5c <log_output_flush>
   1416c:	e7e6      	b.n	1413c <out_func+0x10>
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1416e:	4c06      	ldr	r4, [pc, #24]	; (14188 <out_func+0x5c>)
   14170:	2374      	movs	r3, #116	; 0x74
   14172:	4622      	mov	r2, r4
   14174:	4905      	ldr	r1, [pc, #20]	; (1418c <out_func+0x60>)
   14176:	4806      	ldr	r0, [pc, #24]	; (14190 <out_func+0x64>)
   14178:	f017 ffe6 	bl	2c148 <printk>
   1417c:	2174      	movs	r1, #116	; 0x74
   1417e:	4620      	mov	r0, r4
   14180:	f018 f9e7 	bl	2c552 <assert_post_action>
   14184:	e7ed      	b.n	14162 <out_func+0x36>
   14186:	bf00      	nop
   14188:	00032828 	.word	0x00032828
   1418c:	00032858 	.word	0x00032858
   14190:	00031df4 	.word	0x00031df4

00014194 <raw_string_print>:
{
   14194:	b5f0      	push	{r4, r5, r6, r7, lr}
   14196:	b083      	sub	sp, #12
   14198:	4606      	mov	r6, r0
   1419a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);
   1419c:	68cb      	ldr	r3, [r1, #12]
   1419e:	b113      	cbz	r3, 141a6 <raw_string_print+0x12>
{
   141a0:	2700      	movs	r7, #0
   141a2:	463d      	mov	r5, r7
   141a4:	e01b      	b.n	141de <raw_string_print+0x4a>
	__ASSERT_NO_MSG(output->size);
   141a6:	4d19      	ldr	r5, [pc, #100]	; (1420c <raw_string_print+0x78>)
   141a8:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   141ac:	462a      	mov	r2, r5
   141ae:	4918      	ldr	r1, [pc, #96]	; (14210 <raw_string_print+0x7c>)
   141b0:	4818      	ldr	r0, [pc, #96]	; (14214 <raw_string_print+0x80>)
   141b2:	f017 ffc9 	bl	2c148 <printk>
   141b6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   141ba:	4628      	mov	r0, r5
   141bc:	f018 f9c9 	bl	2c552 <assert_post_action>
   141c0:	e7ee      	b.n	141a0 <raw_string_print+0xc>
			eol = (output->buf[length - 1] == '\n');
   141c2:	68a2      	ldr	r2, [r4, #8]
   141c4:	4413      	add	r3, r2
   141c6:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   141ca:	2f0a      	cmp	r7, #10
   141cc:	bf14      	ite	ne
   141ce:	2700      	movne	r7, #0
   141d0:	2701      	moveq	r7, #1
		log_output_flush(output);
   141d2:	4620      	mov	r0, r4
   141d4:	f018 fcc2 	bl	2cb5c <log_output_flush>
		offset += length;
   141d8:	9b01      	ldr	r3, [sp, #4]
   141da:	441d      	add	r5, r3
	} while (length > 0);
   141dc:	b173      	cbz	r3, 141fc <raw_string_print+0x68>
		length = output->size;
   141de:	68e3      	ldr	r3, [r4, #12]
   141e0:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   141e2:	462b      	mov	r3, r5
   141e4:	aa01      	add	r2, sp, #4
   141e6:	68a1      	ldr	r1, [r4, #8]
   141e8:	4630      	mov	r0, r6
   141ea:	f018 fb2f 	bl	2c84c <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   141ee:	6863      	ldr	r3, [r4, #4]
   141f0:	9a01      	ldr	r2, [sp, #4]
   141f2:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   141f4:	9b01      	ldr	r3, [sp, #4]
   141f6:	2b00      	cmp	r3, #0
   141f8:	d0eb      	beq.n	141d2 <raw_string_print+0x3e>
   141fa:	e7e2      	b.n	141c2 <raw_string_print+0x2e>
	if (eol) {
   141fc:	b90f      	cbnz	r7, 14202 <raw_string_print+0x6e>
}
   141fe:	b003      	add	sp, #12
   14200:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   14202:	4905      	ldr	r1, [pc, #20]	; (14218 <raw_string_print+0x84>)
   14204:	4620      	mov	r0, r4
   14206:	f7ff fe11 	bl	13e2c <print_formatted>
}
   1420a:	e7f8      	b.n	141fe <raw_string_print+0x6a>
   1420c:	00032828 	.word	0x00032828
   14210:	00032888 	.word	0x00032888
   14214:	00031df4 	.word	0x00031df4
   14218:	00032898 	.word	0x00032898

0001421c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   1421c:	b570      	push	{r4, r5, r6, lr}
   1421e:	b082      	sub	sp, #8
   14220:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   14222:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   14224:	f242 730f 	movw	r3, #9999	; 0x270f
   14228:	428b      	cmp	r3, r1
   1422a:	bf28      	it	cs
   1422c:	460b      	movcs	r3, r1
   1422e:	4a0e      	ldr	r2, [pc, #56]	; (14268 <log_output_dropped_process+0x4c>)
   14230:	2105      	movs	r1, #5
   14232:	4668      	mov	r0, sp
   14234:	f017 ff96 	bl	2c164 <snprintk>
   14238:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   1423a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1423c:	685b      	ldr	r3, [r3, #4]
   1423e:	220b      	movs	r2, #11
   14240:	490a      	ldr	r1, [pc, #40]	; (1426c <log_output_dropped_process+0x50>)
   14242:	4628      	mov	r0, r5
   14244:	f018 fb0a 	bl	2c85c <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   14248:	6863      	ldr	r3, [r4, #4]
   1424a:	685b      	ldr	r3, [r3, #4]
   1424c:	4632      	mov	r2, r6
   1424e:	4669      	mov	r1, sp
   14250:	4628      	mov	r0, r5
   14252:	f018 fb03 	bl	2c85c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   14256:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   14258:	685b      	ldr	r3, [r3, #4]
   1425a:	221b      	movs	r2, #27
   1425c:	4904      	ldr	r1, [pc, #16]	; (14270 <log_output_dropped_process+0x54>)
   1425e:	4628      	mov	r0, r5
   14260:	f018 fafc 	bl	2c85c <buffer_write>
}
   14264:	b002      	add	sp, #8
   14266:	bd70      	pop	{r4, r5, r6, pc}
   14268:	000343d8 	.word	0x000343d8
   1426c:	000328ec 	.word	0x000328ec
   14270:	000328d0 	.word	0x000328d0

00014274 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   14274:	4b07      	ldr	r3, [pc, #28]	; (14294 <log_output_timestamp_freq_set+0x20>)
   14276:	2201      	movs	r2, #1
   14278:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1427a:	4b07      	ldr	r3, [pc, #28]	; (14298 <log_output_timestamp_freq_set+0x24>)
   1427c:	4298      	cmp	r0, r3
   1427e:	d905      	bls.n	1428c <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   14280:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   14282:	4a04      	ldr	r2, [pc, #16]	; (14294 <log_output_timestamp_freq_set+0x20>)
   14284:	6813      	ldr	r3, [r2, #0]
   14286:	005b      	lsls	r3, r3, #1
   14288:	6013      	str	r3, [r2, #0]
   1428a:	e7f6      	b.n	1427a <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   1428c:	4b03      	ldr	r3, [pc, #12]	; (1429c <log_output_timestamp_freq_set+0x28>)
   1428e:	6018      	str	r0, [r3, #0]
}
   14290:	4770      	bx	lr
   14292:	bf00      	nop
   14294:	200027a8 	.word	0x200027a8
   14298:	000f4240 	.word	0x000f4240
   1429c:	200027a4 	.word	0x200027a4

000142a0 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   142a0:	b570      	push	{r4, r5, r6, lr}
   142a2:	4606      	mov	r6, r0
   142a4:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   142a6:	2400      	movs	r4, #0
   142a8:	42ac      	cmp	r4, r5
   142aa:	d207      	bcs.n	142bc <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
   142ac:	4b04      	ldr	r3, [pc, #16]	; (142c0 <char_out+0x20>)
   142ae:	6818      	ldr	r0, [r3, #0]
   142b0:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   142b2:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   142b4:	69db      	ldr	r3, [r3, #28]
   142b6:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   142b8:	3401      	adds	r4, #1
   142ba:	e7f5      	b.n	142a8 <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   142bc:	4628      	mov	r0, r5
   142be:	bd70      	pop	{r4, r5, r6, pc}
   142c0:	200027c0 	.word	0x200027c0

000142c4 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
   142c4:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   142c6:	4809      	ldr	r0, [pc, #36]	; (142ec <log_backend_uart_init+0x28>)
   142c8:	4b09      	ldr	r3, [pc, #36]	; (142f0 <log_backend_uart_init+0x2c>)
   142ca:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   142cc:	f01c f8b0 	bl	30430 <z_device_ready>
   142d0:	b100      	cbz	r0, 142d4 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   142d2:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   142d4:	4c07      	ldr	r4, [pc, #28]	; (142f4 <log_backend_uart_init+0x30>)
   142d6:	2375      	movs	r3, #117	; 0x75
   142d8:	4622      	mov	r2, r4
   142da:	4907      	ldr	r1, [pc, #28]	; (142f8 <log_backend_uart_init+0x34>)
   142dc:	4807      	ldr	r0, [pc, #28]	; (142fc <log_backend_uart_init+0x38>)
   142de:	f017 ff33 	bl	2c148 <printk>
   142e2:	2175      	movs	r1, #117	; 0x75
   142e4:	4620      	mov	r0, r4
   142e6:	f018 f934 	bl	2c552 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
   142ea:	e7f2      	b.n	142d2 <log_backend_uart_init+0xe>
   142ec:	00031704 	.word	0x00031704
   142f0:	200027c0 	.word	0x200027c0
   142f4:	0003290c 	.word	0x0003290c
   142f8:	00032944 	.word	0x00032944
   142fc:	00031df4 	.word	0x00031df4

00014300 <panic>:

static void panic(struct log_backend const *const backend)
{
   14300:	b508      	push	{r3, lr}
	in_panic = true;
   14302:	4b03      	ldr	r3, [pc, #12]	; (14310 <panic+0x10>)
   14304:	2201      	movs	r2, #1
   14306:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   14308:	4802      	ldr	r0, [pc, #8]	; (14314 <panic+0x14>)
   1430a:	f018 fc27 	bl	2cb5c <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   1430e:	bd08      	pop	{r3, pc}
   14310:	20003ff7 	.word	0x20003ff7
   14314:	0003299c 	.word	0x0003299c

00014318 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   14318:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1431a:	4802      	ldr	r0, [pc, #8]	; (14324 <dropped+0xc>)
   1431c:	f7ff ff7e 	bl	1421c <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   14320:	bd08      	pop	{r3, pc}
   14322:	bf00      	nop
   14324:	0003299c 	.word	0x0003299c

00014328 <put>:
{
   14328:	b510      	push	{r4, lr}
   1432a:	460c      	mov	r4, r1
	log_msg_get(msg);
   1432c:	4608      	mov	r0, r1
   1432e:	f018 f9d1 	bl	2c6d4 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   14332:	220f      	movs	r2, #15
   14334:	4621      	mov	r1, r4
   14336:	4803      	ldr	r0, [pc, #12]	; (14344 <put+0x1c>)
   14338:	f018 fc1d 	bl	2cb76 <log_output_msg_process>
	log_msg_put(msg);
   1433c:	4620      	mov	r0, r4
   1433e:	f018 f9ed 	bl	2c71c <log_msg_put>
}
   14342:	bd10      	pop	{r4, pc}
   14344:	0003299c 	.word	0x0003299c

00014348 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   14348:	b570      	push	{r4, r5, r6, lr}
   1434a:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   1434c:	4b42      	ldr	r3, [pc, #264]	; (14458 <pm_system_resume+0x110>)
   1434e:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14350:	f004 031f 	and.w	r3, r4, #31
   14354:	2201      	movs	r2, #1
   14356:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14358:	0961      	lsrs	r1, r4, #5
   1435a:	4b40      	ldr	r3, [pc, #256]	; (1445c <pm_system_resume+0x114>)
   1435c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14360:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14362:	f3bf 8f5b 	dmb	ish
   14366:	e853 1f00 	ldrex	r1, [r3]
   1436a:	ea01 0500 	and.w	r5, r1, r0
   1436e:	e843 5600 	strex	r6, r5, [r3]
   14372:	2e00      	cmp	r6, #0
   14374:	d1f7      	bne.n	14366 <pm_system_resume+0x1e>
   14376:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1437a:	420a      	tst	r2, r1
   1437c:	d05a      	beq.n	14434 <pm_system_resume+0xec>
		exit_pos_ops(z_power_states[id]);
   1437e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14382:	4a37      	ldr	r2, [pc, #220]	; (14460 <pm_system_resume+0x118>)
   14384:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14388:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1438c:	ab04      	add	r3, sp, #16
   1438e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   14392:	4b34      	ldr	r3, [pc, #208]	; (14464 <pm_system_resume+0x11c>)
   14394:	b19b      	cbz	r3, 143be <pm_system_resume+0x76>
		pm_power_state_exit_post_ops(info);
   14396:	f018 fe01 	bl	2cf9c <pm_power_state_exit_post_ops>
	__asm__ volatile(
   1439a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1439e:	f3ef 8611 	mrs	r6, BASEPRI
   143a2:	f383 8812 	msr	BASEPRI_MAX, r3
   143a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   143aa:	482f      	ldr	r0, [pc, #188]	; (14468 <pm_system_resume+0x120>)
   143ac:	f00f fbca 	bl	23b44 <z_spin_lock_valid>
   143b0:	b158      	cbz	r0, 143ca <pm_system_resume+0x82>
	z_spin_lock_set_owner(l);
   143b2:	482d      	ldr	r0, [pc, #180]	; (14468 <pm_system_resume+0x120>)
   143b4:	f00f fbe6 	bl	23b84 <z_spin_lock_set_owner>
	return list->head;
   143b8:	4b2c      	ldr	r3, [pc, #176]	; (1446c <pm_system_resume+0x124>)
   143ba:	681d      	ldr	r5, [r3, #0]
   143bc:	e01a      	b.n	143f4 <pm_system_resume+0xac>
	__asm__ volatile(
   143be:	2300      	movs	r3, #0
   143c0:	f383 8811 	msr	BASEPRI, r3
   143c4:	f3bf 8f6f 	isb	sy
}
   143c8:	e7e7      	b.n	1439a <pm_system_resume+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   143ca:	4d29      	ldr	r5, [pc, #164]	; (14470 <pm_system_resume+0x128>)
   143cc:	2381      	movs	r3, #129	; 0x81
   143ce:	462a      	mov	r2, r5
   143d0:	4928      	ldr	r1, [pc, #160]	; (14474 <pm_system_resume+0x12c>)
   143d2:	4829      	ldr	r0, [pc, #164]	; (14478 <pm_system_resume+0x130>)
   143d4:	f017 feb8 	bl	2c148 <printk>
   143d8:	4923      	ldr	r1, [pc, #140]	; (14468 <pm_system_resume+0x120>)
   143da:	4828      	ldr	r0, [pc, #160]	; (1447c <pm_system_resume+0x134>)
   143dc:	f017 feb4 	bl	2c148 <printk>
   143e0:	2181      	movs	r1, #129	; 0x81
   143e2:	4628      	mov	r0, r5
   143e4:	f018 f8b5 	bl	2c552 <assert_post_action>
   143e8:	e7e3      	b.n	143b2 <pm_system_resume+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   143ea:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   143ec:	b10d      	cbz	r5, 143f2 <pm_system_resume+0xaa>
	return node->next;
   143ee:	682b      	ldr	r3, [r5, #0]
   143f0:	b16b      	cbz	r3, 1440e <pm_system_resume+0xc6>
{
   143f2:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   143f4:	b15d      	cbz	r5, 1440e <pm_system_resume+0xc6>
			callback = notifier->state_exit;
   143f6:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
   143f8:	2a00      	cmp	r2, #0
   143fa:	d0f6      	beq.n	143ea <pm_system_resume+0xa2>
			callback(z_power_states[_current_cpu->id].state);
   143fc:	4b16      	ldr	r3, [pc, #88]	; (14458 <pm_system_resume+0x110>)
   143fe:	7d1b      	ldrb	r3, [r3, #20]
   14400:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14404:	4916      	ldr	r1, [pc, #88]	; (14460 <pm_system_resume+0x118>)
   14406:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   1440a:	4790      	blx	r2
   1440c:	e7ed      	b.n	143ea <pm_system_resume+0xa2>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
   1440e:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14410:	4815      	ldr	r0, [pc, #84]	; (14468 <pm_system_resume+0x120>)
   14412:	f00f fba7 	bl	23b64 <z_spin_unlock_valid>
   14416:	b178      	cbz	r0, 14438 <pm_system_resume+0xf0>
	__asm__ volatile(
   14418:	f385 8811 	msr	BASEPRI, r5
   1441c:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   14420:	4a0f      	ldr	r2, [pc, #60]	; (14460 <pm_system_resume+0x118>)
   14422:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   14426:	00a1      	lsls	r1, r4, #2
   14428:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   1442c:	2300      	movs	r3, #0
   1442e:	5053      	str	r3, [r2, r1]
   14430:	6063      	str	r3, [r4, #4]
   14432:	60a3      	str	r3, [r4, #8]
			0, 0};
	}
}
   14434:	b004      	add	sp, #16
   14436:	bd70      	pop	{r4, r5, r6, pc}
   14438:	4e0d      	ldr	r6, [pc, #52]	; (14470 <pm_system_resume+0x128>)
   1443a:	23ac      	movs	r3, #172	; 0xac
   1443c:	4632      	mov	r2, r6
   1443e:	4910      	ldr	r1, [pc, #64]	; (14480 <pm_system_resume+0x138>)
   14440:	480d      	ldr	r0, [pc, #52]	; (14478 <pm_system_resume+0x130>)
   14442:	f017 fe81 	bl	2c148 <printk>
   14446:	4908      	ldr	r1, [pc, #32]	; (14468 <pm_system_resume+0x120>)
   14448:	480e      	ldr	r0, [pc, #56]	; (14484 <pm_system_resume+0x13c>)
   1444a:	f017 fe7d 	bl	2c148 <printk>
   1444e:	21ac      	movs	r1, #172	; 0xac
   14450:	4630      	mov	r0, r6
   14452:	f018 f87e 	bl	2c552 <assert_post_action>
   14456:	e7df      	b.n	14418 <pm_system_resume+0xd0>
   14458:	200035ac 	.word	0x200035ac
   1445c:	200027d4 	.word	0x200027d4
   14460:	200027d8 	.word	0x200027d8
   14464:	0002cf9d 	.word	0x0002cf9d
   14468:	200027c8 	.word	0x200027c8
   1446c:	200027cc 	.word	0x200027cc
   14470:	0003234c 	.word	0x0003234c
   14474:	000323a4 	.word	0x000323a4
   14478:	00031df4 	.word	0x00031df4
   1447c:	000323bc 	.word	0x000323bc
   14480:	00032374 	.word	0x00032374
   14484:	0003238c 	.word	0x0003238c

00014488 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   14488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1448a:	b089      	sub	sp, #36	; 0x24
   1448c:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   1448e:	4b6b      	ldr	r3, [pc, #428]	; (1463c <pm_system_suspend+0x1b4>)
   14490:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14492:	f004 031f 	and.w	r3, r4, #31
   14496:	2201      	movs	r2, #1
   14498:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1449a:	0961      	lsrs	r1, r4, #5
   1449c:	4b68      	ldr	r3, [pc, #416]	; (14640 <pm_system_suspend+0x1b8>)
   1449e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   144a2:	f3bf 8f5b 	dmb	ish
   144a6:	e853 1f00 	ldrex	r1, [r3]
   144aa:	ea41 0002 	orr.w	r0, r1, r2
   144ae:	e843 0600 	strex	r6, r0, [r3]
   144b2:	2e00      	cmp	r6, #0
   144b4:	d1f7      	bne.n	144a6 <pm_system_suspend+0x1e>
   144b6:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   144ba:	420a      	tst	r2, r1
   144bc:	d01e      	beq.n	144fc <pm_system_suspend+0x74>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   144be:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   144c2:	4a60      	ldr	r2, [pc, #384]	; (14644 <pm_system_suspend+0x1bc>)
   144c4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   144c8:	2b00      	cmp	r3, #0
   144ca:	f000 80b5 	beq.w	14638 <pm_system_suspend+0x1b0>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   144ce:	f1b5 3fff 	cmp.w	r5, #4294967295
   144d2:	d123      	bne.n	1451c <pm_system_suspend+0x94>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   144d4:	f011 f900 	bl	256d8 <k_sched_lock>
	__asm__ volatile(
   144d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   144dc:	f3ef 8611 	mrs	r6, BASEPRI
   144e0:	f383 8812 	msr	BASEPRI_MAX, r3
   144e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   144e8:	4857      	ldr	r0, [pc, #348]	; (14648 <pm_system_suspend+0x1c0>)
   144ea:	f00f fb2b 	bl	23b44 <z_spin_lock_valid>
   144ee:	b358      	cbz	r0, 14548 <pm_system_suspend+0xc0>
	z_spin_lock_set_owner(l);
   144f0:	4855      	ldr	r0, [pc, #340]	; (14648 <pm_system_suspend+0x1c0>)
   144f2:	f00f fb47 	bl	23b84 <z_spin_lock_set_owner>
	return list->head;
   144f6:	4b55      	ldr	r3, [pc, #340]	; (1464c <pm_system_suspend+0x1c4>)
   144f8:	681d      	ldr	r5, [r3, #0]
   144fa:	e03a      	b.n	14572 <pm_system_suspend+0xea>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   144fc:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   14500:	4b50      	ldr	r3, [pc, #320]	; (14644 <pm_system_suspend+0x1bc>)
   14502:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   14506:	466f      	mov	r7, sp
   14508:	462a      	mov	r2, r5
   1450a:	4621      	mov	r1, r4
   1450c:	4638      	mov	r0, r7
   1450e:	f018 fb71 	bl	2cbf4 <pm_policy_next_state>
   14512:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   14516:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   1451a:	e7d0      	b.n	144be <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
   1451c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14520:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14524:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   14526:	0c59      	lsrs	r1, r3, #17
   14528:	03d8      	lsls	r0, r3, #15
   1452a:	4e49      	ldr	r6, [pc, #292]	; (14650 <pm_system_suspend+0x1c8>)
   1452c:	4a49      	ldr	r2, [pc, #292]	; (14654 <pm_system_suspend+0x1cc>)
   1452e:	2300      	movs	r3, #0
   14530:	1980      	adds	r0, r0, r6
   14532:	f04f 0600 	mov.w	r6, #0
   14536:	eb46 0101 	adc.w	r1, r6, r1
   1453a:	f7ec fa4f 	bl	9dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   1453e:	2101      	movs	r1, #1
   14540:	1a28      	subs	r0, r5, r0
   14542:	f012 fd45 	bl	26fd0 <z_set_timeout_expiry>
   14546:	e7c5      	b.n	144d4 <pm_system_suspend+0x4c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14548:	4d43      	ldr	r5, [pc, #268]	; (14658 <pm_system_suspend+0x1d0>)
   1454a:	2381      	movs	r3, #129	; 0x81
   1454c:	462a      	mov	r2, r5
   1454e:	4943      	ldr	r1, [pc, #268]	; (1465c <pm_system_suspend+0x1d4>)
   14550:	4843      	ldr	r0, [pc, #268]	; (14660 <pm_system_suspend+0x1d8>)
   14552:	f017 fdf9 	bl	2c148 <printk>
   14556:	493c      	ldr	r1, [pc, #240]	; (14648 <pm_system_suspend+0x1c0>)
   14558:	4842      	ldr	r0, [pc, #264]	; (14664 <pm_system_suspend+0x1dc>)
   1455a:	f017 fdf5 	bl	2c148 <printk>
   1455e:	2181      	movs	r1, #129	; 0x81
   14560:	4628      	mov	r0, r5
   14562:	f017 fff6 	bl	2c552 <assert_post_action>
   14566:	e7c3      	b.n	144f0 <pm_system_suspend+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14568:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1456a:	b10d      	cbz	r5, 14570 <pm_system_suspend+0xe8>
	return node->next;
   1456c:	682b      	ldr	r3, [r5, #0]
   1456e:	b16b      	cbz	r3, 1458c <pm_system_suspend+0x104>
{
   14570:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14572:	b15d      	cbz	r5, 1458c <pm_system_suspend+0x104>
			callback = notifier->state_entry;
   14574:	686a      	ldr	r2, [r5, #4]
		if (callback) {
   14576:	2a00      	cmp	r2, #0
   14578:	d0f6      	beq.n	14568 <pm_system_suspend+0xe0>
			callback(z_power_states[_current_cpu->id].state);
   1457a:	4b30      	ldr	r3, [pc, #192]	; (1463c <pm_system_suspend+0x1b4>)
   1457c:	7d1b      	ldrb	r3, [r3, #20]
   1457e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14582:	4930      	ldr	r1, [pc, #192]	; (14644 <pm_system_suspend+0x1bc>)
   14584:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   14588:	4790      	blx	r2
   1458a:	e7ed      	b.n	14568 <pm_system_suspend+0xe0>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
   1458c:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1458e:	482e      	ldr	r0, [pc, #184]	; (14648 <pm_system_suspend+0x1c0>)
   14590:	f00f fae8 	bl	23b64 <z_spin_unlock_valid>
   14594:	2800      	cmp	r0, #0
   14596:	d03f      	beq.n	14618 <pm_system_suspend+0x190>
	__asm__ volatile(
   14598:	f385 8811 	msr	BASEPRI, r5
   1459c:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   145a0:	f004 031f 	and.w	r3, r4, #31
   145a4:	2101      	movs	r1, #1
   145a6:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   145a8:	0963      	lsrs	r3, r4, #5
   145aa:	4a2f      	ldr	r2, [pc, #188]	; (14668 <pm_system_suspend+0x1e0>)
   145ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   145b0:	f3bf 8f5b 	dmb	ish
   145b4:	e853 2f00 	ldrex	r2, [r3]
   145b8:	430a      	orrs	r2, r1
   145ba:	e843 2000 	strex	r0, r2, [r3]
   145be:	2800      	cmp	r0, #0
   145c0:	d1f8      	bne.n	145b4 <pm_system_suspend+0x12c>
   145c2:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   145c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   145ca:	4a1e      	ldr	r2, [pc, #120]	; (14644 <pm_system_suspend+0x1bc>)
   145cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   145d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   145d4:	ab08      	add	r3, sp, #32
   145d6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   145da:	4b24      	ldr	r3, [pc, #144]	; (1466c <pm_system_suspend+0x1e4>)
   145dc:	b10b      	cbz	r3, 145e2 <pm_system_suspend+0x15a>
		pm_power_state_set(info);
   145de:	f018 fcca 	bl	2cf76 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   145e2:	f7ff feb1 	bl	14348 <pm_system_resume>
	k_sched_unlock();
   145e6:	f011 fe3d 	bl	26264 <k_sched_unlock>
	bool ret = true;
   145ea:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   145ec:	f004 021f 	and.w	r2, r4, #31
   145f0:	2301      	movs	r3, #1
   145f2:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   145f4:	0964      	lsrs	r4, r4, #5
   145f6:	4a12      	ldr	r2, [pc, #72]	; (14640 <pm_system_suspend+0x1b8>)
   145f8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   145fc:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   145fe:	f3bf 8f5b 	dmb	ish
   14602:	e854 2f00 	ldrex	r2, [r4]
   14606:	401a      	ands	r2, r3
   14608:	e844 2100 	strex	r1, r2, [r4]
   1460c:	2900      	cmp	r1, #0
   1460e:	d1f8      	bne.n	14602 <pm_system_suspend+0x17a>
   14610:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   14614:	b009      	add	sp, #36	; 0x24
   14616:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14618:	4e0f      	ldr	r6, [pc, #60]	; (14658 <pm_system_suspend+0x1d0>)
   1461a:	23ac      	movs	r3, #172	; 0xac
   1461c:	4632      	mov	r2, r6
   1461e:	4914      	ldr	r1, [pc, #80]	; (14670 <pm_system_suspend+0x1e8>)
   14620:	480f      	ldr	r0, [pc, #60]	; (14660 <pm_system_suspend+0x1d8>)
   14622:	f017 fd91 	bl	2c148 <printk>
   14626:	4908      	ldr	r1, [pc, #32]	; (14648 <pm_system_suspend+0x1c0>)
   14628:	4812      	ldr	r0, [pc, #72]	; (14674 <pm_system_suspend+0x1ec>)
   1462a:	f017 fd8d 	bl	2c148 <printk>
   1462e:	21ac      	movs	r1, #172	; 0xac
   14630:	4630      	mov	r0, r6
   14632:	f017 ff8e 	bl	2c552 <assert_post_action>
   14636:	e7af      	b.n	14598 <pm_system_suspend+0x110>
		ret = false;
   14638:	2000      	movs	r0, #0
   1463a:	e7d7      	b.n	145ec <pm_system_suspend+0x164>
   1463c:	200035ac 	.word	0x200035ac
   14640:	200027e4 	.word	0x200027e4
   14644:	200027d8 	.word	0x200027d8
   14648:	200027c8 	.word	0x200027c8
   1464c:	200027cc 	.word	0x200027cc
   14650:	000f423f 	.word	0x000f423f
   14654:	000f4240 	.word	0x000f4240
   14658:	0003234c 	.word	0x0003234c
   1465c:	000323a4 	.word	0x000323a4
   14660:	00031df4 	.word	0x00031df4
   14664:	000323bc 	.word	0x000323bc
   14668:	200027d4 	.word	0x200027d4
   1466c:	0002cf77 	.word	0x0002cf77
   14670:	00032374 	.word	0x00032374
   14674:	0003238c 	.word	0x0003238c

00014678 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   14678:	b4f0      	push	{r4, r5, r6, r7}
   1467a:	b08c      	sub	sp, #48	; 0x30
   1467c:	4607      	mov	r7, r0
   1467e:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   14680:	ac01      	add	r4, sp, #4
   14682:	4d2a      	ldr	r5, [pc, #168]	; (1472c <tc_aes128_set_encrypt_key+0xb4>)
   14684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1468a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1468c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   14690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   14694:	2f00      	cmp	r7, #0
   14696:	d045      	beq.n	14724 <tc_aes128_set_encrypt_key+0xac>
   14698:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1469a:	2e00      	cmp	r6, #0
   1469c:	d044      	beq.n	14728 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   1469e:	2300      	movs	r3, #0
   146a0:	e00f      	b.n	146c2 <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   146a2:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   146a6:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   146aa:	784a      	ldrb	r2, [r1, #1]
   146ac:	0412      	lsls	r2, r2, #16
   146ae:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   146b2:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   146b4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   146b8:	78c9      	ldrb	r1, [r1, #3]
   146ba:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   146bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   146c0:	3301      	adds	r3, #1
   146c2:	2b03      	cmp	r3, #3
   146c4:	d9ed      	bls.n	146a2 <tc_aes128_set_encrypt_key+0x2a>
   146c6:	e006      	b.n	146d6 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   146c8:	1f19      	subs	r1, r3, #4
   146ca:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   146ce:	404a      	eors	r2, r1
   146d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   146d4:	3301      	adds	r3, #1
   146d6:	2b2b      	cmp	r3, #43	; 0x2b
   146d8:	d820      	bhi.n	1471c <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   146da:	1e5a      	subs	r2, r3, #1
   146dc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   146e0:	f013 0f03 	tst.w	r3, #3
   146e4:	d1f0      	bne.n	146c8 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   146e6:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   146ea:	0e11      	lsrs	r1, r2, #24
   146ec:	4c10      	ldr	r4, [pc, #64]	; (14730 <tc_aes128_set_encrypt_key+0xb8>)
   146ee:	5c65      	ldrb	r5, [r4, r1]
   146f0:	f3c2 4107 	ubfx	r1, r2, #16, #8
   146f4:	5c61      	ldrb	r1, [r4, r1]
   146f6:	0409      	lsls	r1, r1, #16
   146f8:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   146fc:	f3c2 2507 	ubfx	r5, r2, #8, #8
   14700:	5d65      	ldrb	r5, [r4, r5]
   14702:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14706:	b2d2      	uxtb	r2, r2
   14708:	5ca2      	ldrb	r2, [r4, r2]
   1470a:	4311      	orrs	r1, r2
   1470c:	f023 0203 	bic.w	r2, r3, #3
   14710:	ac0c      	add	r4, sp, #48	; 0x30
   14712:	4422      	add	r2, r4
   14714:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   14718:	404a      	eors	r2, r1
   1471a:	e7d5      	b.n	146c8 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1471c:	2001      	movs	r0, #1
}
   1471e:	b00c      	add	sp, #48	; 0x30
   14720:	bcf0      	pop	{r4, r5, r6, r7}
   14722:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14724:	2000      	movs	r0, #0
   14726:	e7fa      	b.n	1471e <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   14728:	2000      	movs	r0, #0
   1472a:	e7f8      	b.n	1471e <tc_aes128_set_encrypt_key+0xa6>
   1472c:	00031a94 	.word	0x00031a94
   14730:	000329b0 	.word	0x000329b0

00014734 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   14734:	2800      	cmp	r0, #0
   14736:	f000 839a 	beq.w	14e6e <tc_aes_encrypt+0x73a>
{
   1473a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1473e:	b088      	sub	sp, #32
   14740:	4616      	mov	r6, r2
   14742:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   14744:	2900      	cmp	r1, #0
   14746:	f000 8394 	beq.w	14e72 <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1474a:	2a00      	cmp	r2, #0
   1474c:	f000 8393 	beq.w	14e76 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   14750:	2310      	movs	r3, #16
   14752:	460a      	mov	r2, r1
   14754:	4619      	mov	r1, r3
   14756:	eb0d 0003 	add.w	r0, sp, r3
   1475a:	f018 fa50 	bl	2cbfe <_copy>
	add_round_key(state, s->words);
   1475e:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   14760:	6833      	ldr	r3, [r6, #0]
   14762:	f89d 2010 	ldrb.w	r2, [sp, #16]
   14766:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1476a:	f88d 2010 	strb.w	r2, [sp, #16]
   1476e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14772:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14776:	404a      	eors	r2, r1
   14778:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1477c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14780:	f89d 1012 	ldrb.w	r1, [sp, #18]
   14784:	404a      	eors	r2, r1
   14786:	f88d 2012 	strb.w	r2, [sp, #18]
   1478a:	b2db      	uxtb	r3, r3
   1478c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   14790:	4053      	eors	r3, r2
   14792:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   14796:	6873      	ldr	r3, [r6, #4]
   14798:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1479c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   147a0:	f88d 2014 	strb.w	r2, [sp, #20]
   147a4:	f3c3 4207 	ubfx	r2, r3, #16, #8
   147a8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   147ac:	404a      	eors	r2, r1
   147ae:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   147b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   147b6:	f89d 1016 	ldrb.w	r1, [sp, #22]
   147ba:	404a      	eors	r2, r1
   147bc:	f88d 2016 	strb.w	r2, [sp, #22]
   147c0:	b2db      	uxtb	r3, r3
   147c2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   147c6:	4053      	eors	r3, r2
   147c8:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   147cc:	68b3      	ldr	r3, [r6, #8]
   147ce:	f89d 2018 	ldrb.w	r2, [sp, #24]
   147d2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   147d6:	f88d 2018 	strb.w	r2, [sp, #24]
   147da:	f3c3 4207 	ubfx	r2, r3, #16, #8
   147de:	f89d 1019 	ldrb.w	r1, [sp, #25]
   147e2:	404a      	eors	r2, r1
   147e4:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   147e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   147ec:	f89d 101a 	ldrb.w	r1, [sp, #26]
   147f0:	404a      	eors	r2, r1
   147f2:	f88d 201a 	strb.w	r2, [sp, #26]
   147f6:	b2db      	uxtb	r3, r3
   147f8:	f89d 201b 	ldrb.w	r2, [sp, #27]
   147fc:	4053      	eors	r3, r2
   147fe:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   14802:	68f3      	ldr	r3, [r6, #12]
   14804:	f89d 201c 	ldrb.w	r2, [sp, #28]
   14808:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1480c:	f88d 201c 	strb.w	r2, [sp, #28]
   14810:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14814:	f89d 101d 	ldrb.w	r1, [sp, #29]
   14818:	404a      	eors	r2, r1
   1481a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1481e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14822:	f89d 101e 	ldrb.w	r1, [sp, #30]
   14826:	404a      	eors	r2, r1
   14828:	f88d 201e 	strb.w	r2, [sp, #30]
   1482c:	b2db      	uxtb	r3, r3
   1482e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   14832:	4053      	eors	r3, r2
   14834:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   14838:	2400      	movs	r4, #0
}
   1483a:	e239      	b.n	14cb0 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1483c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14840:	f88d 3000 	strb.w	r3, [sp]
   14844:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14848:	f88d 3001 	strb.w	r3, [sp, #1]
   1484c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14850:	f88d 3002 	strb.w	r3, [sp, #2]
   14854:	f89d 301f 	ldrb.w	r3, [sp, #31]
   14858:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1485c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   14860:	f88d 3004 	strb.w	r3, [sp, #4]
   14864:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14868:	f88d 3005 	strb.w	r3, [sp, #5]
   1486c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   14870:	f88d 3006 	strb.w	r3, [sp, #6]
   14874:	f89d 3013 	ldrb.w	r3, [sp, #19]
   14878:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1487c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14880:	f88d 3008 	strb.w	r3, [sp, #8]
   14884:	f89d 301d 	ldrb.w	r3, [sp, #29]
   14888:	f88d 3009 	strb.w	r3, [sp, #9]
   1488c:	f89d 3012 	ldrb.w	r3, [sp, #18]
   14890:	f88d 300a 	strb.w	r3, [sp, #10]
   14894:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14898:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1489c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   148a0:	f88d 300c 	strb.w	r3, [sp, #12]
   148a4:	f89d 3011 	ldrb.w	r3, [sp, #17]
   148a8:	f88d 300d 	strb.w	r3, [sp, #13]
   148ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
   148b0:	f88d 300e 	strb.w	r3, [sp, #14]
   148b4:	f89d 301b 	ldrb.w	r3, [sp, #27]
   148b8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   148bc:	2310      	movs	r3, #16
   148be:	466a      	mov	r2, sp
   148c0:	4619      	mov	r1, r3
   148c2:	eb0d 0003 	add.w	r0, sp, r3
   148c6:	f018 f99a 	bl	2cbfe <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   148ca:	f89d 0010 	ldrb.w	r0, [sp, #16]
   148ce:	f018 f9a7 	bl	2cc20 <_double_byte>
   148d2:	4680      	mov	r8, r0
   148d4:	f89d 0011 	ldrb.w	r0, [sp, #17]
   148d8:	f018 f9a2 	bl	2cc20 <_double_byte>
   148dc:	4601      	mov	r1, r0
   148de:	f89d 0011 	ldrb.w	r0, [sp, #17]
   148e2:	f89d 2012 	ldrb.w	r2, [sp, #18]
   148e6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   148ea:	4041      	eors	r1, r0
   148ec:	ea88 0801 	eor.w	r8, r8, r1
   148f0:	ea82 0208 	eor.w	r2, r2, r8
   148f4:	4053      	eors	r3, r2
   148f6:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   148fa:	f89d 8010 	ldrb.w	r8, [sp, #16]
   148fe:	f018 f98f 	bl	2cc20 <_double_byte>
   14902:	ea88 0800 	eor.w	r8, r8, r0
   14906:	fa5f f888 	uxtb.w	r8, r8
   1490a:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1490e:	f018 f987 	bl	2cc20 <_double_byte>
   14912:	4602      	mov	r2, r0
   14914:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14918:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1491c:	4042      	eors	r2, r0
   1491e:	ea88 0802 	eor.w	r8, r8, r2
   14922:	ea83 0308 	eor.w	r3, r3, r8
   14926:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1492a:	f89d 8010 	ldrb.w	r8, [sp, #16]
   1492e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   14932:	ea88 0803 	eor.w	r8, r8, r3
   14936:	f018 f973 	bl	2cc20 <_double_byte>
   1493a:	ea88 0800 	eor.w	r8, r8, r0
   1493e:	fa5f f888 	uxtb.w	r8, r8
   14942:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14946:	f018 f96b 	bl	2cc20 <_double_byte>
   1494a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1494e:	4058      	eors	r0, r3
   14950:	ea88 0800 	eor.w	r8, r8, r0
   14954:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   14958:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1495c:	f018 f960 	bl	2cc20 <_double_byte>
   14960:	f89d 2010 	ldrb.w	r2, [sp, #16]
   14964:	f89d 3011 	ldrb.w	r3, [sp, #17]
   14968:	f89d 8012 	ldrb.w	r8, [sp, #18]
   1496c:	4050      	eors	r0, r2
   1496e:	4043      	eors	r3, r0
   14970:	ea88 0803 	eor.w	r8, r8, r3
   14974:	fa5f f888 	uxtb.w	r8, r8
   14978:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1497c:	f018 f950 	bl	2cc20 <_double_byte>
   14980:	ea88 0800 	eor.w	r8, r8, r0
   14984:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   14988:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1498c:	f018 f948 	bl	2cc20 <_double_byte>
   14990:	4680      	mov	r8, r0
   14992:	f89d 0015 	ldrb.w	r0, [sp, #21]
   14996:	f018 f943 	bl	2cc20 <_double_byte>
   1499a:	4601      	mov	r1, r0
   1499c:	f89d 0015 	ldrb.w	r0, [sp, #21]
   149a0:	f89d 2016 	ldrb.w	r2, [sp, #22]
   149a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   149a8:	4041      	eors	r1, r0
   149aa:	ea88 0801 	eor.w	r8, r8, r1
   149ae:	ea82 0208 	eor.w	r2, r2, r8
   149b2:	4053      	eors	r3, r2
   149b4:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   149b8:	f89d 8014 	ldrb.w	r8, [sp, #20]
   149bc:	f018 f930 	bl	2cc20 <_double_byte>
   149c0:	ea88 0800 	eor.w	r8, r8, r0
   149c4:	fa5f f888 	uxtb.w	r8, r8
   149c8:	f89d 0016 	ldrb.w	r0, [sp, #22]
   149cc:	f018 f928 	bl	2cc20 <_double_byte>
   149d0:	4602      	mov	r2, r0
   149d2:	f89d 0016 	ldrb.w	r0, [sp, #22]
   149d6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   149da:	4042      	eors	r2, r0
   149dc:	ea88 0802 	eor.w	r8, r8, r2
   149e0:	ea83 0308 	eor.w	r3, r3, r8
   149e4:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   149e8:	f89d 8014 	ldrb.w	r8, [sp, #20]
   149ec:	f89d 3015 	ldrb.w	r3, [sp, #21]
   149f0:	ea88 0803 	eor.w	r8, r8, r3
   149f4:	f018 f914 	bl	2cc20 <_double_byte>
   149f8:	ea88 0800 	eor.w	r8, r8, r0
   149fc:	fa5f f888 	uxtb.w	r8, r8
   14a00:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14a04:	f018 f90c 	bl	2cc20 <_double_byte>
   14a08:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14a0c:	4058      	eors	r0, r3
   14a0e:	ea88 0800 	eor.w	r8, r8, r0
   14a12:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   14a16:	f89d 0014 	ldrb.w	r0, [sp, #20]
   14a1a:	f018 f901 	bl	2cc20 <_double_byte>
   14a1e:	f89d 2014 	ldrb.w	r2, [sp, #20]
   14a22:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14a26:	f89d 8016 	ldrb.w	r8, [sp, #22]
   14a2a:	4050      	eors	r0, r2
   14a2c:	4043      	eors	r3, r0
   14a2e:	ea88 0803 	eor.w	r8, r8, r3
   14a32:	fa5f f888 	uxtb.w	r8, r8
   14a36:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14a3a:	f018 f8f1 	bl	2cc20 <_double_byte>
   14a3e:	ea88 0800 	eor.w	r8, r8, r0
   14a42:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   14a46:	f89d 0018 	ldrb.w	r0, [sp, #24]
   14a4a:	f018 f8e9 	bl	2cc20 <_double_byte>
   14a4e:	4680      	mov	r8, r0
   14a50:	f89d 0019 	ldrb.w	r0, [sp, #25]
   14a54:	f018 f8e4 	bl	2cc20 <_double_byte>
   14a58:	4601      	mov	r1, r0
   14a5a:	f89d 0019 	ldrb.w	r0, [sp, #25]
   14a5e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   14a62:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14a66:	4041      	eors	r1, r0
   14a68:	ea88 0801 	eor.w	r8, r8, r1
   14a6c:	ea82 0208 	eor.w	r2, r2, r8
   14a70:	4053      	eors	r3, r2
   14a72:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   14a76:	f89d 8018 	ldrb.w	r8, [sp, #24]
   14a7a:	f018 f8d1 	bl	2cc20 <_double_byte>
   14a7e:	ea88 0800 	eor.w	r8, r8, r0
   14a82:	fa5f f888 	uxtb.w	r8, r8
   14a86:	f89d 001a 	ldrb.w	r0, [sp, #26]
   14a8a:	f018 f8c9 	bl	2cc20 <_double_byte>
   14a8e:	4602      	mov	r2, r0
   14a90:	f89d 001a 	ldrb.w	r0, [sp, #26]
   14a94:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14a98:	4042      	eors	r2, r0
   14a9a:	ea88 0802 	eor.w	r8, r8, r2
   14a9e:	ea83 0308 	eor.w	r3, r3, r8
   14aa2:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   14aa6:	f89d 8018 	ldrb.w	r8, [sp, #24]
   14aaa:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14aae:	ea88 0803 	eor.w	r8, r8, r3
   14ab2:	f018 f8b5 	bl	2cc20 <_double_byte>
   14ab6:	ea88 0800 	eor.w	r8, r8, r0
   14aba:	fa5f f888 	uxtb.w	r8, r8
   14abe:	f89d 001b 	ldrb.w	r0, [sp, #27]
   14ac2:	f018 f8ad 	bl	2cc20 <_double_byte>
   14ac6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14aca:	4058      	eors	r0, r3
   14acc:	ea88 0800 	eor.w	r8, r8, r0
   14ad0:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   14ad4:	f89d 0018 	ldrb.w	r0, [sp, #24]
   14ad8:	f018 f8a2 	bl	2cc20 <_double_byte>
   14adc:	f89d 2018 	ldrb.w	r2, [sp, #24]
   14ae0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14ae4:	f89d 801a 	ldrb.w	r8, [sp, #26]
   14ae8:	4050      	eors	r0, r2
   14aea:	4043      	eors	r3, r0
   14aec:	ea88 0803 	eor.w	r8, r8, r3
   14af0:	fa5f f888 	uxtb.w	r8, r8
   14af4:	f89d 001b 	ldrb.w	r0, [sp, #27]
   14af8:	f018 f892 	bl	2cc20 <_double_byte>
   14afc:	ea88 0800 	eor.w	r8, r8, r0
   14b00:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   14b04:	f89d 001c 	ldrb.w	r0, [sp, #28]
   14b08:	f018 f88a 	bl	2cc20 <_double_byte>
   14b0c:	4680      	mov	r8, r0
   14b0e:	f89d 001d 	ldrb.w	r0, [sp, #29]
   14b12:	f018 f885 	bl	2cc20 <_double_byte>
   14b16:	4601      	mov	r1, r0
   14b18:	f89d 001d 	ldrb.w	r0, [sp, #29]
   14b1c:	f89d 201e 	ldrb.w	r2, [sp, #30]
   14b20:	f89d 301f 	ldrb.w	r3, [sp, #31]
   14b24:	4041      	eors	r1, r0
   14b26:	ea88 0801 	eor.w	r8, r8, r1
   14b2a:	ea82 0208 	eor.w	r2, r2, r8
   14b2e:	4053      	eors	r3, r2
   14b30:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   14b34:	f89d 801c 	ldrb.w	r8, [sp, #28]
   14b38:	f018 f872 	bl	2cc20 <_double_byte>
   14b3c:	ea88 0800 	eor.w	r8, r8, r0
   14b40:	fa5f f888 	uxtb.w	r8, r8
   14b44:	f89d 001e 	ldrb.w	r0, [sp, #30]
   14b48:	f018 f86a 	bl	2cc20 <_double_byte>
   14b4c:	4602      	mov	r2, r0
   14b4e:	f89d 001e 	ldrb.w	r0, [sp, #30]
   14b52:	f89d 301f 	ldrb.w	r3, [sp, #31]
   14b56:	4042      	eors	r2, r0
   14b58:	ea88 0802 	eor.w	r8, r8, r2
   14b5c:	ea83 0308 	eor.w	r3, r3, r8
   14b60:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   14b64:	f89d 801c 	ldrb.w	r8, [sp, #28]
   14b68:	f89d 301d 	ldrb.w	r3, [sp, #29]
   14b6c:	ea88 0803 	eor.w	r8, r8, r3
   14b70:	f018 f856 	bl	2cc20 <_double_byte>
   14b74:	ea88 0800 	eor.w	r8, r8, r0
   14b78:	fa5f f888 	uxtb.w	r8, r8
   14b7c:	f89d 001f 	ldrb.w	r0, [sp, #31]
   14b80:	f018 f84e 	bl	2cc20 <_double_byte>
   14b84:	f89d 301f 	ldrb.w	r3, [sp, #31]
   14b88:	4058      	eors	r0, r3
   14b8a:	ea88 0800 	eor.w	r8, r8, r0
   14b8e:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   14b92:	f89d 001c 	ldrb.w	r0, [sp, #28]
   14b96:	f018 f843 	bl	2cc20 <_double_byte>
   14b9a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   14b9e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   14ba2:	f89d 801e 	ldrb.w	r8, [sp, #30]
   14ba6:	4050      	eors	r0, r2
   14ba8:	4043      	eors	r3, r0
   14baa:	ea88 0803 	eor.w	r8, r8, r3
   14bae:	fa5f f888 	uxtb.w	r8, r8
   14bb2:	f89d 001f 	ldrb.w	r0, [sp, #31]
   14bb6:	f018 f833 	bl	2cc20 <_double_byte>
   14bba:	ea88 0800 	eor.w	r8, r8, r0
   14bbe:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   14bc2:	2310      	movs	r3, #16
   14bc4:	466a      	mov	r2, sp
   14bc6:	4619      	mov	r1, r3
   14bc8:	eb0d 0003 	add.w	r0, sp, r3
   14bcc:	f018 f817 	bl	2cbfe <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   14bd0:	3401      	adds	r4, #1
   14bd2:	0123      	lsls	r3, r4, #4
   14bd4:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   14bd8:	58eb      	ldr	r3, [r5, r3]
   14bda:	f89d 1010 	ldrb.w	r1, [sp, #16]
   14bde:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   14be2:	f88d 1010 	strb.w	r1, [sp, #16]
   14be6:	f3c3 4107 	ubfx	r1, r3, #16, #8
   14bea:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14bee:	4041      	eors	r1, r0
   14bf0:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   14bf4:	f3c3 2107 	ubfx	r1, r3, #8, #8
   14bf8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14bfc:	4041      	eors	r1, r0
   14bfe:	f88d 1012 	strb.w	r1, [sp, #18]
   14c02:	b2db      	uxtb	r3, r3
   14c04:	f89d 1013 	ldrb.w	r1, [sp, #19]
   14c08:	404b      	eors	r3, r1
   14c0a:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   14c0e:	6853      	ldr	r3, [r2, #4]
   14c10:	f89d 1014 	ldrb.w	r1, [sp, #20]
   14c14:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   14c18:	f88d 1014 	strb.w	r1, [sp, #20]
   14c1c:	f3c3 4107 	ubfx	r1, r3, #16, #8
   14c20:	f89d 0015 	ldrb.w	r0, [sp, #21]
   14c24:	4041      	eors	r1, r0
   14c26:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   14c2a:	f3c3 2107 	ubfx	r1, r3, #8, #8
   14c2e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   14c32:	4041      	eors	r1, r0
   14c34:	f88d 1016 	strb.w	r1, [sp, #22]
   14c38:	b2db      	uxtb	r3, r3
   14c3a:	f89d 1017 	ldrb.w	r1, [sp, #23]
   14c3e:	404b      	eors	r3, r1
   14c40:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   14c44:	6893      	ldr	r3, [r2, #8]
   14c46:	f89d 1018 	ldrb.w	r1, [sp, #24]
   14c4a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   14c4e:	f88d 1018 	strb.w	r1, [sp, #24]
   14c52:	f3c3 4107 	ubfx	r1, r3, #16, #8
   14c56:	f89d 0019 	ldrb.w	r0, [sp, #25]
   14c5a:	4041      	eors	r1, r0
   14c5c:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   14c60:	f3c3 2107 	ubfx	r1, r3, #8, #8
   14c64:	f89d 001a 	ldrb.w	r0, [sp, #26]
   14c68:	4041      	eors	r1, r0
   14c6a:	f88d 101a 	strb.w	r1, [sp, #26]
   14c6e:	b2db      	uxtb	r3, r3
   14c70:	f89d 101b 	ldrb.w	r1, [sp, #27]
   14c74:	404b      	eors	r3, r1
   14c76:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   14c7a:	68d3      	ldr	r3, [r2, #12]
   14c7c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   14c80:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   14c84:	f88d 201c 	strb.w	r2, [sp, #28]
   14c88:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14c8c:	f89d 101d 	ldrb.w	r1, [sp, #29]
   14c90:	404a      	eors	r2, r1
   14c92:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   14c96:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14c9a:	f89d 101e 	ldrb.w	r1, [sp, #30]
   14c9e:	404a      	eors	r2, r1
   14ca0:	f88d 201e 	strb.w	r2, [sp, #30]
   14ca4:	b2db      	uxtb	r3, r3
   14ca6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   14caa:	4053      	eors	r3, r2
   14cac:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   14cb0:	2c08      	cmp	r4, #8
   14cb2:	d80a      	bhi.n	14cca <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   14cb4:	2300      	movs	r3, #0
   14cb6:	2b0f      	cmp	r3, #15
   14cb8:	f63f adc0 	bhi.w	1483c <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   14cbc:	a904      	add	r1, sp, #16
   14cbe:	5cc8      	ldrb	r0, [r1, r3]
   14cc0:	4a6e      	ldr	r2, [pc, #440]	; (14e7c <tc_aes_encrypt+0x748>)
   14cc2:	5c10      	ldrb	r0, [r2, r0]
   14cc4:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   14cc6:	3301      	adds	r3, #1
   14cc8:	e7f5      	b.n	14cb6 <tc_aes_encrypt+0x582>
   14cca:	2300      	movs	r3, #0
   14ccc:	e005      	b.n	14cda <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   14cce:	aa04      	add	r2, sp, #16
   14cd0:	5cd1      	ldrb	r1, [r2, r3]
   14cd2:	486a      	ldr	r0, [pc, #424]	; (14e7c <tc_aes_encrypt+0x748>)
   14cd4:	5c41      	ldrb	r1, [r0, r1]
   14cd6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   14cd8:	3301      	adds	r3, #1
   14cda:	2b0f      	cmp	r3, #15
   14cdc:	d9f7      	bls.n	14cce <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   14cde:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14ce2:	f88d 3000 	strb.w	r3, [sp]
   14ce6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14cea:	f88d 3001 	strb.w	r3, [sp, #1]
   14cee:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14cf2:	f88d 3002 	strb.w	r3, [sp, #2]
   14cf6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   14cfa:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   14cfe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   14d02:	f88d 3004 	strb.w	r3, [sp, #4]
   14d06:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14d0a:	f88d 3005 	strb.w	r3, [sp, #5]
   14d0e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   14d12:	f88d 3006 	strb.w	r3, [sp, #6]
   14d16:	f89d 3013 	ldrb.w	r3, [sp, #19]
   14d1a:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   14d1e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14d22:	f88d 3008 	strb.w	r3, [sp, #8]
   14d26:	f89d 301d 	ldrb.w	r3, [sp, #29]
   14d2a:	f88d 3009 	strb.w	r3, [sp, #9]
   14d2e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   14d32:	f88d 300a 	strb.w	r3, [sp, #10]
   14d36:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14d3a:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   14d3e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   14d42:	f88d 300c 	strb.w	r3, [sp, #12]
   14d46:	f89d 3011 	ldrb.w	r3, [sp, #17]
   14d4a:	f88d 300d 	strb.w	r3, [sp, #13]
   14d4e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   14d52:	f88d 300e 	strb.w	r3, [sp, #14]
   14d56:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14d5a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   14d5e:	2310      	movs	r3, #16
   14d60:	466a      	mov	r2, sp
   14d62:	4619      	mov	r1, r3
   14d64:	eb0d 0003 	add.w	r0, sp, r3
   14d68:	f017 ff49 	bl	2cbfe <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   14d6c:	1c63      	adds	r3, r4, #1
   14d6e:	011a      	lsls	r2, r3, #4
   14d70:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   14d74:	58b2      	ldr	r2, [r6, r2]
   14d76:	f89d 1010 	ldrb.w	r1, [sp, #16]
   14d7a:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   14d7e:	f88d 1010 	strb.w	r1, [sp, #16]
   14d82:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14d86:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14d8a:	4041      	eors	r1, r0
   14d8c:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   14d90:	f3c2 2107 	ubfx	r1, r2, #8, #8
   14d94:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14d98:	4041      	eors	r1, r0
   14d9a:	f88d 1012 	strb.w	r1, [sp, #18]
   14d9e:	b2d2      	uxtb	r2, r2
   14da0:	f89d 1013 	ldrb.w	r1, [sp, #19]
   14da4:	404a      	eors	r2, r1
   14da6:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   14daa:	685a      	ldr	r2, [r3, #4]
   14dac:	f89d 1014 	ldrb.w	r1, [sp, #20]
   14db0:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   14db4:	f88d 1014 	strb.w	r1, [sp, #20]
   14db8:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14dbc:	f89d 0015 	ldrb.w	r0, [sp, #21]
   14dc0:	4041      	eors	r1, r0
   14dc2:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   14dc6:	f3c2 2107 	ubfx	r1, r2, #8, #8
   14dca:	f89d 0016 	ldrb.w	r0, [sp, #22]
   14dce:	4041      	eors	r1, r0
   14dd0:	f88d 1016 	strb.w	r1, [sp, #22]
   14dd4:	b2d2      	uxtb	r2, r2
   14dd6:	f89d 1017 	ldrb.w	r1, [sp, #23]
   14dda:	404a      	eors	r2, r1
   14ddc:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   14de0:	689a      	ldr	r2, [r3, #8]
   14de2:	f89d 1018 	ldrb.w	r1, [sp, #24]
   14de6:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   14dea:	f88d 1018 	strb.w	r1, [sp, #24]
   14dee:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14df2:	f89d 0019 	ldrb.w	r0, [sp, #25]
   14df6:	4041      	eors	r1, r0
   14df8:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   14dfc:	f3c2 2107 	ubfx	r1, r2, #8, #8
   14e00:	f89d 001a 	ldrb.w	r0, [sp, #26]
   14e04:	4041      	eors	r1, r0
   14e06:	f88d 101a 	strb.w	r1, [sp, #26]
   14e0a:	b2d2      	uxtb	r2, r2
   14e0c:	f89d 101b 	ldrb.w	r1, [sp, #27]
   14e10:	404a      	eors	r2, r1
   14e12:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   14e16:	68db      	ldr	r3, [r3, #12]
   14e18:	f89d 201c 	ldrb.w	r2, [sp, #28]
   14e1c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   14e20:	f88d 201c 	strb.w	r2, [sp, #28]
   14e24:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14e28:	f89d 101d 	ldrb.w	r1, [sp, #29]
   14e2c:	404a      	eors	r2, r1
   14e2e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   14e32:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14e36:	f89d 101e 	ldrb.w	r1, [sp, #30]
   14e3a:	404a      	eors	r2, r1
   14e3c:	f88d 201e 	strb.w	r2, [sp, #30]
   14e40:	b2db      	uxtb	r3, r3
   14e42:	f89d 201f 	ldrb.w	r2, [sp, #31]
   14e46:	4053      	eors	r3, r2
   14e48:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   14e4c:	2310      	movs	r3, #16
   14e4e:	eb0d 0203 	add.w	r2, sp, r3
   14e52:	4619      	mov	r1, r3
   14e54:	4638      	mov	r0, r7
   14e56:	f017 fed2 	bl	2cbfe <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   14e5a:	2210      	movs	r2, #16
   14e5c:	2100      	movs	r1, #0
   14e5e:	eb0d 0002 	add.w	r0, sp, r2
   14e62:	f017 fed9 	bl	2cc18 <_set>

	return TC_CRYPTO_SUCCESS;
   14e66:	2001      	movs	r0, #1
}
   14e68:	b008      	add	sp, #32
   14e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   14e6e:	2000      	movs	r0, #0
}
   14e70:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14e72:	2000      	movs	r0, #0
   14e74:	e7f8      	b.n	14e68 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   14e76:	2000      	movs	r0, #0
   14e78:	e7f6      	b.n	14e68 <tc_aes_encrypt+0x734>
   14e7a:	bf00      	nop
   14e7c:	000329b0 	.word	0x000329b0

00014e80 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   14e80:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   14e82:	4802      	ldr	r0, [pc, #8]	; (14e8c <nrf_cc3xx_platform_abort_init+0xc>)
   14e84:	f013 fada 	bl	2843c <nrf_cc3xx_platform_set_abort>
}
   14e88:	bd08      	pop	{r3, pc}
   14e8a:	bf00      	nop
   14e8c:	00032ab0 	.word	0x00032ab0

00014e90 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14e90:	b1d0      	cbz	r0, 14ec8 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14e92:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14e94:	6842      	ldr	r2, [r0, #4]
   14e96:	2a04      	cmp	r2, #4
   14e98:	d005      	beq.n	14ea6 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14e9a:	b1d2      	cbz	r2, 14ed2 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   14e9c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   14e9e:	f00f f9ad 	bl	241fc <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   14ea2:	2000      	movs	r0, #0
    }
}
   14ea4:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   14ea6:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14ea8:	2200      	movs	r2, #0
   14eaa:	f3bf 8f5b 	dmb	ish
   14eae:	e853 1f00 	ldrex	r1, [r3]
   14eb2:	2901      	cmp	r1, #1
   14eb4:	d103      	bne.n	14ebe <mutex_unlock_platform+0x2e>
   14eb6:	e843 2000 	strex	r0, r2, [r3]
   14eba:	2800      	cmp	r0, #0
   14ebc:	d1f7      	bne.n	14eae <mutex_unlock_platform+0x1e>
   14ebe:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14ec2:	d104      	bne.n	14ece <mutex_unlock_platform+0x3e>
   14ec4:	4610      	mov	r0, r2
   14ec6:	e7ed      	b.n	14ea4 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14ec8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   14ecc:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14ece:	4802      	ldr	r0, [pc, #8]	; (14ed8 <mutex_unlock_platform+0x48>)
   14ed0:	e7e8      	b.n	14ea4 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14ed2:	4802      	ldr	r0, [pc, #8]	; (14edc <mutex_unlock_platform+0x4c>)
   14ed4:	e7e6      	b.n	14ea4 <mutex_unlock_platform+0x14>
   14ed6:	bf00      	nop
   14ed8:	ffff8fe9 	.word	0xffff8fe9
   14edc:	ffff8fea 	.word	0xffff8fea

00014ee0 <mutex_lock_platform>:
    if(mutex == NULL) {
   14ee0:	b320      	cbz	r0, 14f2c <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14ee2:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   14ee4:	6842      	ldr	r2, [r0, #4]
   14ee6:	2a04      	cmp	r2, #4
   14ee8:	d002      	beq.n	14ef0 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14eea:	b992      	cbnz	r2, 14f12 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14eec:	4811      	ldr	r0, [pc, #68]	; (14f34 <mutex_lock_platform+0x54>)
   14eee:	e00f      	b.n	14f10 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   14ef0:	6803      	ldr	r3, [r0, #0]
   14ef2:	2201      	movs	r2, #1
   14ef4:	f3bf 8f5b 	dmb	ish
   14ef8:	e853 1f00 	ldrex	r1, [r3]
   14efc:	2900      	cmp	r1, #0
   14efe:	d103      	bne.n	14f08 <mutex_lock_platform+0x28>
   14f00:	e843 2000 	strex	r0, r2, [r3]
   14f04:	2800      	cmp	r0, #0
   14f06:	d1f7      	bne.n	14ef8 <mutex_lock_platform+0x18>
   14f08:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14f0c:	d10c      	bne.n	14f28 <mutex_lock_platform+0x48>
   14f0e:	2000      	movs	r0, #0
}
   14f10:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   14f12:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14f14:	f04f 32ff 	mov.w	r2, #4294967295
   14f18:	f04f 33ff 	mov.w	r3, #4294967295
   14f1c:	f00f f84e 	bl	23fbc <z_impl_k_mutex_lock>
        if (ret == 0) {
   14f20:	2800      	cmp	r0, #0
   14f22:	d0f5      	beq.n	14f10 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   14f24:	4804      	ldr	r0, [pc, #16]	; (14f38 <mutex_lock_platform+0x58>)
   14f26:	e7f3      	b.n	14f10 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14f28:	4803      	ldr	r0, [pc, #12]	; (14f38 <mutex_lock_platform+0x58>)
   14f2a:	e7f1      	b.n	14f10 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14f2c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   14f30:	4770      	bx	lr
   14f32:	bf00      	nop
   14f34:	ffff8fea 	.word	0xffff8fea
   14f38:	ffff8fe9 	.word	0xffff8fe9

00014f3c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14f3c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14f3e:	4604      	mov	r4, r0
   14f40:	b190      	cbz	r0, 14f68 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14f42:	6863      	ldr	r3, [r4, #4]
   14f44:	2b04      	cmp	r3, #4
   14f46:	d00e      	beq.n	14f66 <mutex_free_platform+0x2a>
   14f48:	2b08      	cmp	r3, #8
   14f4a:	d00c      	beq.n	14f66 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14f4c:	b15b      	cbz	r3, 14f66 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   14f4e:	f013 0f02 	tst.w	r3, #2
   14f52:	d10e      	bne.n	14f72 <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14f54:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memset, void *, int)
   14f56:	2200      	movs	r2, #0
   14f58:	601a      	str	r2, [r3, #0]
   14f5a:	605a      	str	r2, [r3, #4]
   14f5c:	609a      	str	r2, [r3, #8]
   14f5e:	60da      	str	r2, [r3, #12]
   14f60:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   14f62:	2300      	movs	r3, #0
   14f64:	6063      	str	r3, [r4, #4]
}
   14f66:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   14f68:	4b05      	ldr	r3, [pc, #20]	; (14f80 <mutex_free_platform+0x44>)
   14f6a:	685b      	ldr	r3, [r3, #4]
   14f6c:	4805      	ldr	r0, [pc, #20]	; (14f84 <mutex_free_platform+0x48>)
   14f6e:	4798      	blx	r3
   14f70:	e7e7      	b.n	14f42 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   14f72:	4621      	mov	r1, r4
   14f74:	4804      	ldr	r0, [pc, #16]	; (14f88 <mutex_free_platform+0x4c>)
   14f76:	f00e fd59 	bl	23a2c <k_mem_slab_free>
        mutex->mutex = NULL;
   14f7a:	2300      	movs	r3, #0
   14f7c:	6023      	str	r3, [r4, #0]
   14f7e:	e7f0      	b.n	14f62 <mutex_free_platform+0x26>
   14f80:	20000870 	.word	0x20000870
   14f84:	00032ab8 	.word	0x00032ab8
   14f88:	200027e8 	.word	0x200027e8

00014f8c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14f8c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14f8e:	4604      	mov	r4, r0
   14f90:	b178      	cbz	r0, 14fb2 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14f92:	6863      	ldr	r3, [r4, #4]
   14f94:	2b04      	cmp	r3, #4
   14f96:	d00b      	beq.n	14fb0 <mutex_init_platform+0x24>
   14f98:	2b08      	cmp	r3, #8
   14f9a:	d009      	beq.n	14fb0 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   14f9c:	b90b      	cbnz	r3, 14fa2 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   14f9e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   14fa0:	b163      	cbz	r3, 14fbc <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   14fa2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   14fa4:	f01b fac4 	bl	30530 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   14fa8:	6863      	ldr	r3, [r4, #4]
   14faa:	f043 0301 	orr.w	r3, r3, #1
   14fae:	6063      	str	r3, [r4, #4]
}
   14fb0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   14fb2:	4b10      	ldr	r3, [pc, #64]	; (14ff4 <mutex_init_platform+0x68>)
   14fb4:	685b      	ldr	r3, [r3, #4]
   14fb6:	4810      	ldr	r0, [pc, #64]	; (14ff8 <mutex_init_platform+0x6c>)
   14fb8:	4798      	blx	r3
   14fba:	e7ea      	b.n	14f92 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   14fbc:	f04f 32ff 	mov.w	r2, #4294967295
   14fc0:	f04f 33ff 	mov.w	r3, #4294967295
   14fc4:	4621      	mov	r1, r4
   14fc6:	480d      	ldr	r0, [pc, #52]	; (14ffc <mutex_init_platform+0x70>)
   14fc8:	f00e fcbc 	bl	23944 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   14fcc:	b908      	cbnz	r0, 14fd2 <mutex_init_platform+0x46>
   14fce:	6823      	ldr	r3, [r4, #0]
   14fd0:	b91b      	cbnz	r3, 14fda <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   14fd2:	4b08      	ldr	r3, [pc, #32]	; (14ff4 <mutex_init_platform+0x68>)
   14fd4:	685b      	ldr	r3, [r3, #4]
   14fd6:	480a      	ldr	r0, [pc, #40]	; (15000 <mutex_init_platform+0x74>)
   14fd8:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14fda:	6823      	ldr	r3, [r4, #0]
   14fdc:	2200      	movs	r2, #0
   14fde:	601a      	str	r2, [r3, #0]
   14fe0:	605a      	str	r2, [r3, #4]
   14fe2:	609a      	str	r2, [r3, #8]
   14fe4:	60da      	str	r2, [r3, #12]
   14fe6:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   14fe8:	6863      	ldr	r3, [r4, #4]
   14fea:	f043 0302 	orr.w	r3, r3, #2
   14fee:	6063      	str	r3, [r4, #4]
   14ff0:	e7d7      	b.n	14fa2 <mutex_init_platform+0x16>
   14ff2:	bf00      	nop
   14ff4:	20000870 	.word	0x20000870
   14ff8:	00032ab8 	.word	0x00032ab8
   14ffc:	200027e8 	.word	0x200027e8
   15000:	00032ae0 	.word	0x00032ae0

00015004 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   15004:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   15006:	2340      	movs	r3, #64	; 0x40
   15008:	2214      	movs	r2, #20
   1500a:	4904      	ldr	r1, [pc, #16]	; (1501c <nrf_cc3xx_platform_mutex_init+0x18>)
   1500c:	4804      	ldr	r0, [pc, #16]	; (15020 <nrf_cc3xx_platform_mutex_init+0x1c>)
   1500e:	f01b fa3b 	bl	30488 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   15012:	4904      	ldr	r1, [pc, #16]	; (15024 <nrf_cc3xx_platform_mutex_init+0x20>)
   15014:	4804      	ldr	r0, [pc, #16]	; (15028 <nrf_cc3xx_platform_mutex_init+0x24>)
   15016:	f013 fac9 	bl	285ac <nrf_cc3xx_platform_set_mutexes>
}
   1501a:	bd08      	pop	{r3, pc}
   1501c:	20002808 	.word	0x20002808
   15020:	200027e8 	.word	0x200027e8
   15024:	00032b20 	.word	0x00032b20
   15028:	00032b10 	.word	0x00032b10

0001502c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1502c:	4901      	ldr	r1, [pc, #4]	; (15034 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1502e:	2210      	movs	r2, #16
	str	r2, [r1]
   15030:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   15032:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   15034:	e000ed10 	.word	0xe000ed10

00015038 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   15038:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1503a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1503c:	f380 8811 	msr	BASEPRI, r0
	isb
   15040:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   15044:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   15048:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1504a:	b662      	cpsie	i
	isb
   1504c:	f3bf 8f6f 	isb	sy

	bx	lr
   15050:	4770      	bx	lr
   15052:	bf00      	nop

00015054 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   15054:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   15056:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   15058:	f381 8811 	msr	BASEPRI, r1

	wfe
   1505c:	bf20      	wfe

	msr	BASEPRI, r0
   1505e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   15062:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   15064:	4770      	bx	lr
   15066:	bf00      	nop

00015068 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   15068:	b570      	push	{r4, r5, r6, lr}
   1506a:	b082      	sub	sp, #8
   1506c:	4604      	mov	r4, r0
   1506e:	4d1f      	ldr	r5, [pc, #124]	; (150ec <esf_dump+0x84>)
   15070:	4b1f      	ldr	r3, [pc, #124]	; (150f0 <esf_dump+0x88>)
   15072:	1aed      	subs	r5, r5, r3
   15074:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   15076:	2601      	movs	r6, #1
   15078:	f04f 0300 	mov.w	r3, #0
   1507c:	f366 0302 	bfi	r3, r6, #0, #3
   15080:	f36f 03c5 	bfc	r3, #3, #3
   15084:	f365 138f 	bfi	r3, r5, #6, #10
   15088:	f8ad 3000 	strh.w	r3, [sp]
   1508c:	6883      	ldr	r3, [r0, #8]
   1508e:	6842      	ldr	r2, [r0, #4]
   15090:	6801      	ldr	r1, [r0, #0]
   15092:	4818      	ldr	r0, [pc, #96]	; (150f4 <esf_dump+0x8c>)
   15094:	f7fe fcea 	bl	13a6c <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   15098:	f04f 0300 	mov.w	r3, #0
   1509c:	f366 0302 	bfi	r3, r6, #0, #3
   150a0:	f36f 03c5 	bfc	r3, #3, #3
   150a4:	f365 138f 	bfi	r3, r5, #6, #10
   150a8:	f8ad 3000 	strh.w	r3, [sp]
   150ac:	6963      	ldr	r3, [r4, #20]
   150ae:	6922      	ldr	r2, [r4, #16]
   150b0:	68e1      	ldr	r1, [r4, #12]
   150b2:	4811      	ldr	r0, [pc, #68]	; (150f8 <esf_dump+0x90>)
   150b4:	f7fe fcda 	bl	13a6c <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   150b8:	f04f 0200 	mov.w	r2, #0
   150bc:	f366 0202 	bfi	r2, r6, #0, #3
   150c0:	f36f 02c5 	bfc	r2, #3, #3
   150c4:	f365 128f 	bfi	r2, r5, #6, #10
   150c8:	69e1      	ldr	r1, [r4, #28]
   150ca:	480c      	ldr	r0, [pc, #48]	; (150fc <esf_dump+0x94>)
   150cc:	f7fe fc18 	bl	13900 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   150d0:	f04f 0200 	mov.w	r2, #0
   150d4:	f366 0202 	bfi	r2, r6, #0, #3
   150d8:	f36f 02c5 	bfc	r2, #3, #3
   150dc:	f365 128f 	bfi	r2, r5, #6, #10
   150e0:	69a1      	ldr	r1, [r4, #24]
   150e2:	4807      	ldr	r0, [pc, #28]	; (15100 <esf_dump+0x98>)
   150e4:	f7fe fc0c 	bl	13900 <log_1>
		esf->basic.pc);
}
   150e8:	b002      	add	sp, #8
   150ea:	bd70      	pop	{r4, r5, r6, pc}
   150ec:	000319a8 	.word	0x000319a8
   150f0:	00031908 	.word	0x00031908
   150f4:	00032b34 	.word	0x00032b34
   150f8:	00032b64 	.word	0x00032b64
   150fc:	00032b94 	.word	0x00032b94
   15100:	00032ba4 	.word	0x00032ba4

00015104 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   15104:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15106:	2b00      	cmp	r3, #0
   15108:	db08      	blt.n	1511c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1510a:	f000 001f 	and.w	r0, r0, #31
   1510e:	095b      	lsrs	r3, r3, #5
   15110:	2201      	movs	r2, #1
   15112:	fa02 f000 	lsl.w	r0, r2, r0
   15116:	4a02      	ldr	r2, [pc, #8]	; (15120 <arch_irq_enable+0x1c>)
   15118:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1511c:	4770      	bx	lr
   1511e:	bf00      	nop
   15120:	e000e100 	.word	0xe000e100

00015124 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   15124:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15126:	2b00      	cmp	r3, #0
   15128:	db0d      	blt.n	15146 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1512a:	f000 001f 	and.w	r0, r0, #31
   1512e:	095b      	lsrs	r3, r3, #5
   15130:	2201      	movs	r2, #1
   15132:	fa02 f000 	lsl.w	r0, r2, r0
   15136:	3320      	adds	r3, #32
   15138:	4a03      	ldr	r2, [pc, #12]	; (15148 <arch_irq_disable+0x24>)
   1513a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1513e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15142:	f3bf 8f6f 	isb	sy
}
   15146:	4770      	bx	lr
   15148:	e000e100 	.word	0xe000e100

0001514c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1514c:	0942      	lsrs	r2, r0, #5
   1514e:	4b05      	ldr	r3, [pc, #20]	; (15164 <arch_irq_is_enabled+0x18>)
   15150:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15154:	f000 001f 	and.w	r0, r0, #31
   15158:	2301      	movs	r3, #1
   1515a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1515e:	4010      	ands	r0, r2
   15160:	4770      	bx	lr
   15162:	bf00      	nop
   15164:	e000e100 	.word	0xe000e100

00015168 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   15168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1516a:	4605      	mov	r5, r0
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1516c:	f012 0f01 	tst.w	r2, #1
   15170:	d115      	bne.n	1519e <z_arm_irq_priority_set+0x36>
   15172:	460e      	mov	r6, r1
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   15174:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   15176:	2c07      	cmp	r4, #7
   15178:	d912      	bls.n	151a0 <z_arm_irq_priority_set+0x38>
   1517a:	4f13      	ldr	r7, [pc, #76]	; (151c8 <z_arm_irq_priority_set+0x60>)
   1517c:	2359      	movs	r3, #89	; 0x59
   1517e:	463a      	mov	r2, r7
   15180:	4912      	ldr	r1, [pc, #72]	; (151cc <z_arm_irq_priority_set+0x64>)
   15182:	4813      	ldr	r0, [pc, #76]	; (151d0 <z_arm_irq_priority_set+0x68>)
   15184:	f016 ffe0 	bl	2c148 <printk>
   15188:	2306      	movs	r3, #6
   1518a:	462a      	mov	r2, r5
   1518c:	4631      	mov	r1, r6
   1518e:	4811      	ldr	r0, [pc, #68]	; (151d4 <z_arm_irq_priority_set+0x6c>)
   15190:	f016 ffda 	bl	2c148 <printk>
   15194:	2159      	movs	r1, #89	; 0x59
   15196:	4638      	mov	r0, r7
   15198:	f017 f9db 	bl	2c552 <assert_post_action>
   1519c:	e000      	b.n	151a0 <z_arm_irq_priority_set+0x38>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1519e:	2400      	movs	r4, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   151a0:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   151a2:	2b00      	cmp	r3, #0
   151a4:	db08      	blt.n	151b8 <z_arm_irq_priority_set+0x50>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   151a6:	0164      	lsls	r4, r4, #5
   151a8:	b2e4      	uxtb	r4, r4
   151aa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   151ae:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   151b2:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
}
   151b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   151b8:	f005 050f 	and.w	r5, r5, #15
   151bc:	0164      	lsls	r4, r4, #5
   151be:	b2e4      	uxtb	r4, r4
   151c0:	4b05      	ldr	r3, [pc, #20]	; (151d8 <z_arm_irq_priority_set+0x70>)
   151c2:	555c      	strb	r4, [r3, r5]
   151c4:	e7f7      	b.n	151b6 <z_arm_irq_priority_set+0x4e>
   151c6:	bf00      	nop
   151c8:	00032bd4 	.word	0x00032bd4
   151cc:	00032c0c 	.word	0x00032c0c
   151d0:	00031df4 	.word	0x00031df4
   151d4:	00032c28 	.word	0x00032c28
   151d8:	e000ed14 	.word	0xe000ed14

000151dc <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   151dc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   151de:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   151e0:	4b05      	ldr	r3, [pc, #20]	; (151f8 <_arch_isr_direct_pm+0x1c>)
   151e2:	699b      	ldr	r3, [r3, #24]
   151e4:	b90b      	cbnz	r3, 151ea <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   151e6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   151e8:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   151ea:	4b03      	ldr	r3, [pc, #12]	; (151f8 <_arch_isr_direct_pm+0x1c>)
   151ec:	2200      	movs	r2, #0
   151ee:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   151f0:	f01b f982 	bl	304f8 <z_pm_save_idle_exit>
   151f4:	e7f7      	b.n	151e6 <_arch_isr_direct_pm+0xa>
   151f6:	bf00      	nop
   151f8:	200035ac 	.word	0x200035ac

000151fc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   151fc:	bf30      	wfi
    b z_SysNmiOnReset
   151fe:	f7ff bffd 	b.w	151fc <z_SysNmiOnReset>
   15202:	bf00      	nop

00015204 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   15204:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15206:	4b0b      	ldr	r3, [pc, #44]	; (15234 <z_arm_prep_c+0x30>)
   15208:	4a0b      	ldr	r2, [pc, #44]	; (15238 <z_arm_prep_c+0x34>)
   1520a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1520e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   15210:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15214:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   15218:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1521c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   15220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   15224:	f00e f9d4 	bl	235d0 <z_bss_zero>
	z_data_copy();
   15228:	f011 fcc8 	bl	26bbc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1522c:	f000 fd26 	bl	15c7c <z_arm_interrupt_init>
	z_cstart();
   15230:	f00e f9da 	bl	235e8 <z_cstart>
   15234:	e000ed00 	.word	0xe000ed00
   15238:	00000000 	.word	0x00000000

0001523c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1523c:	4a0a      	ldr	r2, [pc, #40]	; (15268 <arch_swap+0x2c>)
   1523e:	6893      	ldr	r3, [r2, #8]
   15240:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   15244:	4909      	ldr	r1, [pc, #36]	; (1526c <arch_swap+0x30>)
   15246:	6809      	ldr	r1, [r1, #0]
   15248:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1524c:	4908      	ldr	r1, [pc, #32]	; (15270 <arch_swap+0x34>)
   1524e:	684b      	ldr	r3, [r1, #4]
   15250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15254:	604b      	str	r3, [r1, #4]
   15256:	2300      	movs	r3, #0
   15258:	f383 8811 	msr	BASEPRI, r3
   1525c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   15260:	6893      	ldr	r3, [r2, #8]
}
   15262:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   15266:	4770      	bx	lr
   15268:	200035ac 	.word	0x200035ac
   1526c:	00035a90 	.word	0x00035a90
   15270:	e000ed00 	.word	0xe000ed00

00015274 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15274:	4913      	ldr	r1, [pc, #76]	; (152c4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   15276:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   15278:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1527c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1527e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15282:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15286:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   15288:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1528c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15290:	4f0d      	ldr	r7, [pc, #52]	; (152c8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15292:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15296:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   15298:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1529a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1529c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   152a0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   152a2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   152a6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   152aa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   152ac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   152ae:	f000 fd87 	bl	15dc0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   152b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   152b6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   152ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   152be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   152c2:	4770      	bx	lr
    ldr r1, =_kernel
   152c4:	200035ac 	.word	0x200035ac
    ldr v4, =_SCS_ICSR
   152c8:	e000ed04 	.word	0xe000ed04

000152cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   152cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   152d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   152d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   152d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   152da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   152dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   152e0:	2902      	cmp	r1, #2
    beq _oops
   152e2:	d0ff      	beq.n	152e4 <_oops>

000152e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   152e4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   152e6:	f017 fdbd 	bl	2ce64 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   152ea:	bd01      	pop	{r0, pc}

000152ec <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   152ec:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   152ee:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   152f2:	490d      	ldr	r1, [pc, #52]	; (15328 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   152f4:	f021 0101 	bic.w	r1, r1, #1
   152f8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   152fc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   15300:	9b01      	ldr	r3, [sp, #4]
   15302:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   15306:	9b02      	ldr	r3, [sp, #8]
   15308:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1530c:	9b03      	ldr	r3, [sp, #12]
   1530e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   15312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   15316:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   1531a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1531c:	2300      	movs	r3, #0
   1531e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   15322:	bc10      	pop	{r4}
   15324:	4770      	bx	lr
   15326:	bf00      	nop
   15328:	0002c2b9 	.word	0x0002c2b9

0001532c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   1532c:	4b16      	ldr	r3, [pc, #88]	; (15388 <z_check_thread_stack_fail+0x5c>)
   1532e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   15330:	b1da      	cbz	r2, 1536a <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15332:	f110 0f16 	cmn.w	r0, #22
   15336:	d01a      	beq.n	1536e <z_check_thread_stack_fail+0x42>
{
   15338:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1533a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1533e:	f1a3 0420 	sub.w	r4, r3, #32
   15342:	4284      	cmp	r4, r0
   15344:	d805      	bhi.n	15352 <z_check_thread_stack_fail+0x26>
   15346:	4283      	cmp	r3, r0
   15348:	d908      	bls.n	1535c <z_check_thread_stack_fail+0x30>
   1534a:	428b      	cmp	r3, r1
   1534c:	d808      	bhi.n	15360 <z_check_thread_stack_fail+0x34>
   1534e:	2100      	movs	r1, #0
   15350:	e000      	b.n	15354 <z_check_thread_stack_fail+0x28>
   15352:	2100      	movs	r1, #0
   15354:	b931      	cbnz	r1, 15364 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   15356:	2000      	movs	r0, #0
}
   15358:	bc10      	pop	{r4}
   1535a:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1535c:	2100      	movs	r1, #0
   1535e:	e7f9      	b.n	15354 <z_check_thread_stack_fail+0x28>
   15360:	2101      	movs	r1, #1
   15362:	e7f7      	b.n	15354 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   15364:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   15368:	e7f6      	b.n	15358 <z_check_thread_stack_fail+0x2c>
		return 0;
   1536a:	2000      	movs	r0, #0
   1536c:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1536e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   15372:	428b      	cmp	r3, r1
   15374:	bf94      	ite	ls
   15376:	2100      	movls	r1, #0
   15378:	2101      	movhi	r1, #1
   1537a:	b909      	cbnz	r1, 15380 <z_check_thread_stack_fail+0x54>
	return 0;
   1537c:	2000      	movs	r0, #0
}
   1537e:	4770      	bx	lr
		return thread->stack_info.start;
   15380:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   15384:	4770      	bx	lr
   15386:	bf00      	nop
   15388:	200035ac 	.word	0x200035ac

0001538c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1538c:	b508      	push	{r3, lr}
   1538e:	460d      	mov	r5, r1
   15390:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   15392:	4b08      	ldr	r3, [pc, #32]	; (153b4 <arch_switch_to_main_thread+0x28>)
   15394:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   15396:	f000 fd13 	bl	15dc0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1539a:	4620      	mov	r0, r4
   1539c:	f385 8809 	msr	PSP, r5
   153a0:	2100      	movs	r1, #0
   153a2:	b663      	cpsie	if
   153a4:	f381 8811 	msr	BASEPRI, r1
   153a8:	f3bf 8f6f 	isb	sy
   153ac:	2200      	movs	r2, #0
   153ae:	2300      	movs	r3, #0
   153b0:	f016 ff82 	bl	2c2b8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   153b4:	200035ac 	.word	0x200035ac

000153b8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   153b8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   153ba:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   153bc:	4a0b      	ldr	r2, [pc, #44]	; (153ec <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   153be:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   153c0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   153c2:	bf1e      	ittt	ne
	movne	r1, #0
   153c4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   153c6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   153c8:	f01b f896 	blne	304f8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   153cc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   153ce:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   153d2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   153d6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   153da:	4905      	ldr	r1, [pc, #20]	; (153f0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   153dc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   153de:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   153e0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   153e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   153e6:	4903      	ldr	r1, [pc, #12]	; (153f4 <_isr_wrapper+0x3c>)
	bx r1
   153e8:	4708      	bx	r1
   153ea:	0000      	.short	0x0000
	ldr r2, =_kernel
   153ec:	200035ac 	.word	0x200035ac
	ldr r1, =_sw_isr_table
   153f0:	0003174c 	.word	0x0003174c
	ldr r1, =z_arm_int_exit
   153f4:	000153f9 	.word	0x000153f9

000153f8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   153f8:	4b04      	ldr	r3, [pc, #16]	; (1540c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   153fa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   153fc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   153fe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15400:	d003      	beq.n	1540a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15402:	4903      	ldr	r1, [pc, #12]	; (15410 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   15408:	600a      	str	r2, [r1, #0]

0001540a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1540a:	4770      	bx	lr
	ldr r3, =_kernel
   1540c:	200035ac 	.word	0x200035ac
	ldr r1, =_SCS_ICSR
   15410:	e000ed04 	.word	0xe000ed04

00015414 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   15414:	b508      	push	{r3, lr}
   15416:	4b4e      	ldr	r3, [pc, #312]	; (15550 <usage_fault+0x13c>)
   15418:	4a4e      	ldr	r2, [pc, #312]	; (15554 <usage_fault+0x140>)
   1541a:	1a9b      	subs	r3, r3, r2
   1541c:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1541e:	f04f 0100 	mov.w	r1, #0
   15422:	2201      	movs	r2, #1
   15424:	f362 0102 	bfi	r1, r2, #0, #3
   15428:	f36f 01c5 	bfc	r1, #3, #3
   1542c:	f363 118f 	bfi	r1, r3, #6, #10
   15430:	4849      	ldr	r0, [pc, #292]	; (15558 <usage_fault+0x144>)
   15432:	f7fe fa35 	bl	138a0 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15436:	4b49      	ldr	r3, [pc, #292]	; (1555c <usage_fault+0x148>)
   15438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1543a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   1543e:	d121      	bne.n	15484 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   15440:	4b46      	ldr	r3, [pc, #280]	; (1555c <usage_fault+0x148>)
   15442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15444:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   15448:	d12d      	bne.n	154a6 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1544a:	4b44      	ldr	r3, [pc, #272]	; (1555c <usage_fault+0x148>)
   1544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1544e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   15452:	d139      	bne.n	154c8 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15454:	4b41      	ldr	r3, [pc, #260]	; (1555c <usage_fault+0x148>)
   15456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15458:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1545c:	d145      	bne.n	154ea <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1545e:	4b3f      	ldr	r3, [pc, #252]	; (1555c <usage_fault+0x148>)
   15460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15462:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   15466:	d151      	bne.n	1550c <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15468:	4b3c      	ldr	r3, [pc, #240]	; (1555c <usage_fault+0x148>)
   1546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1546c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   15470:	d15d      	bne.n	1552e <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15472:	4a3a      	ldr	r2, [pc, #232]	; (1555c <usage_fault+0x148>)
   15474:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15476:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1547a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1547e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15480:	2000      	movs	r0, #0
   15482:	bd08      	pop	{r3, pc}
   15484:	4b32      	ldr	r3, [pc, #200]	; (15550 <usage_fault+0x13c>)
   15486:	4a33      	ldr	r2, [pc, #204]	; (15554 <usage_fault+0x140>)
   15488:	1a9b      	subs	r3, r3, r2
   1548a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   1548c:	f04f 0100 	mov.w	r1, #0
   15490:	2201      	movs	r2, #1
   15492:	f362 0102 	bfi	r1, r2, #0, #3
   15496:	f36f 01c5 	bfc	r1, #3, #3
   1549a:	f363 118f 	bfi	r1, r3, #6, #10
   1549e:	4830      	ldr	r0, [pc, #192]	; (15560 <usage_fault+0x14c>)
   154a0:	f7fe f9fe 	bl	138a0 <log_0>
   154a4:	e7cc      	b.n	15440 <usage_fault+0x2c>
   154a6:	4b2a      	ldr	r3, [pc, #168]	; (15550 <usage_fault+0x13c>)
   154a8:	4a2a      	ldr	r2, [pc, #168]	; (15554 <usage_fault+0x140>)
   154aa:	1a9b      	subs	r3, r3, r2
   154ac:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   154ae:	f04f 0100 	mov.w	r1, #0
   154b2:	2201      	movs	r2, #1
   154b4:	f362 0102 	bfi	r1, r2, #0, #3
   154b8:	f36f 01c5 	bfc	r1, #3, #3
   154bc:	f363 118f 	bfi	r1, r3, #6, #10
   154c0:	4828      	ldr	r0, [pc, #160]	; (15564 <usage_fault+0x150>)
   154c2:	f7fe f9ed 	bl	138a0 <log_0>
   154c6:	e7c0      	b.n	1544a <usage_fault+0x36>
   154c8:	4b21      	ldr	r3, [pc, #132]	; (15550 <usage_fault+0x13c>)
   154ca:	4a22      	ldr	r2, [pc, #136]	; (15554 <usage_fault+0x140>)
   154cc:	1a9b      	subs	r3, r3, r2
   154ce:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   154d0:	f04f 0100 	mov.w	r1, #0
   154d4:	2201      	movs	r2, #1
   154d6:	f362 0102 	bfi	r1, r2, #0, #3
   154da:	f36f 01c5 	bfc	r1, #3, #3
   154de:	f363 118f 	bfi	r1, r3, #6, #10
   154e2:	4821      	ldr	r0, [pc, #132]	; (15568 <usage_fault+0x154>)
   154e4:	f7fe f9dc 	bl	138a0 <log_0>
   154e8:	e7b4      	b.n	15454 <usage_fault+0x40>
   154ea:	4b19      	ldr	r3, [pc, #100]	; (15550 <usage_fault+0x13c>)
   154ec:	4a19      	ldr	r2, [pc, #100]	; (15554 <usage_fault+0x140>)
   154ee:	1a9b      	subs	r3, r3, r2
   154f0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   154f2:	f04f 0100 	mov.w	r1, #0
   154f6:	2201      	movs	r2, #1
   154f8:	f362 0102 	bfi	r1, r2, #0, #3
   154fc:	f36f 01c5 	bfc	r1, #3, #3
   15500:	f363 118f 	bfi	r1, r3, #6, #10
   15504:	4819      	ldr	r0, [pc, #100]	; (1556c <usage_fault+0x158>)
   15506:	f7fe f9cb 	bl	138a0 <log_0>
   1550a:	e7a8      	b.n	1545e <usage_fault+0x4a>
   1550c:	4b10      	ldr	r3, [pc, #64]	; (15550 <usage_fault+0x13c>)
   1550e:	4a11      	ldr	r2, [pc, #68]	; (15554 <usage_fault+0x140>)
   15510:	1a9b      	subs	r3, r3, r2
   15512:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15514:	f04f 0100 	mov.w	r1, #0
   15518:	2201      	movs	r2, #1
   1551a:	f362 0102 	bfi	r1, r2, #0, #3
   1551e:	f36f 01c5 	bfc	r1, #3, #3
   15522:	f363 118f 	bfi	r1, r3, #6, #10
   15526:	4812      	ldr	r0, [pc, #72]	; (15570 <usage_fault+0x15c>)
   15528:	f7fe f9ba 	bl	138a0 <log_0>
   1552c:	e79c      	b.n	15468 <usage_fault+0x54>
   1552e:	4b08      	ldr	r3, [pc, #32]	; (15550 <usage_fault+0x13c>)
   15530:	4a08      	ldr	r2, [pc, #32]	; (15554 <usage_fault+0x140>)
   15532:	1a9b      	subs	r3, r3, r2
   15534:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   15536:	f04f 0100 	mov.w	r1, #0
   1553a:	2201      	movs	r2, #1
   1553c:	f362 0102 	bfi	r1, r2, #0, #3
   15540:	f36f 01c5 	bfc	r1, #3, #3
   15544:	f363 118f 	bfi	r1, r3, #6, #10
   15548:	480a      	ldr	r0, [pc, #40]	; (15574 <usage_fault+0x160>)
   1554a:	f7fe f9a9 	bl	138a0 <log_0>
   1554e:	e790      	b.n	15472 <usage_fault+0x5e>
   15550:	000319a8 	.word	0x000319a8
   15554:	00031908 	.word	0x00031908
   15558:	00032c68 	.word	0x00032c68
   1555c:	e000ed00 	.word	0xe000ed00
   15560:	00032c80 	.word	0x00032c80
   15564:	00032c94 	.word	0x00032c94
   15568:	00032cb0 	.word	0x00032cb0
   1556c:	00032cd0 	.word	0x00032cd0
   15570:	00032cf8 	.word	0x00032cf8
   15574:	00032d14 	.word	0x00032d14

00015578 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   15578:	b508      	push	{r3, lr}
	*recoverable = false;
   1557a:	2200      	movs	r2, #0
   1557c:	700a      	strb	r2, [r1, #0]
   1557e:	4b08      	ldr	r3, [pc, #32]	; (155a0 <debug_monitor+0x28>)
   15580:	4908      	ldr	r1, [pc, #32]	; (155a4 <debug_monitor+0x2c>)
   15582:	1a5b      	subs	r3, r3, r1
   15584:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   15586:	f04f 0100 	mov.w	r1, #0
   1558a:	2001      	movs	r0, #1
   1558c:	f360 0102 	bfi	r1, r0, #0, #3
   15590:	f362 01c5 	bfi	r1, r2, #3, #3
   15594:	f363 118f 	bfi	r1, r3, #6, #10
   15598:	4803      	ldr	r0, [pc, #12]	; (155a8 <debug_monitor+0x30>)
   1559a:	f7fe f981 	bl	138a0 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   1559e:	bd08      	pop	{r3, pc}
   155a0:	000319a8 	.word	0x000319a8
   155a4:	00031908 	.word	0x00031908
   155a8:	00032d40 	.word	0x00032d40

000155ac <bus_fault>:
{
   155ac:	b570      	push	{r4, r5, r6, lr}
   155ae:	4605      	mov	r5, r0
   155b0:	460e      	mov	r6, r1
   155b2:	4614      	mov	r4, r2
   155b4:	4b5e      	ldr	r3, [pc, #376]	; (15730 <bus_fault+0x184>)
   155b6:	4a5f      	ldr	r2, [pc, #380]	; (15734 <bus_fault+0x188>)
   155b8:	1a9b      	subs	r3, r3, r2
   155ba:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   155bc:	f04f 0100 	mov.w	r1, #0
   155c0:	2201      	movs	r2, #1
   155c2:	f362 0102 	bfi	r1, r2, #0, #3
   155c6:	f36f 01c5 	bfc	r1, #3, #3
   155ca:	f363 118f 	bfi	r1, r3, #6, #10
   155ce:	485a      	ldr	r0, [pc, #360]	; (15738 <bus_fault+0x18c>)
   155d0:	f7fe f966 	bl	138a0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   155d4:	4b59      	ldr	r3, [pc, #356]	; (1573c <bus_fault+0x190>)
   155d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155d8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   155dc:	d124      	bne.n	15628 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   155de:	4b57      	ldr	r3, [pc, #348]	; (1573c <bus_fault+0x190>)
   155e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155e2:	f413 6f00 	tst.w	r3, #2048	; 0x800
   155e6:	d130      	bne.n	1564a <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   155e8:	4b54      	ldr	r3, [pc, #336]	; (1573c <bus_fault+0x190>)
   155ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155ec:	f413 7f00 	tst.w	r3, #512	; 0x200
   155f0:	d13c      	bne.n	1566c <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   155f2:	4b52      	ldr	r3, [pc, #328]	; (1573c <bus_fault+0x190>)
   155f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   155fa:	d165      	bne.n	156c8 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   155fc:	4b4f      	ldr	r3, [pc, #316]	; (1573c <bus_fault+0x190>)
   155fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15600:	f413 7f80 	tst.w	r3, #256	; 0x100
   15604:	d171      	bne.n	156ea <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   15606:	4b4d      	ldr	r3, [pc, #308]	; (1573c <bus_fault+0x190>)
   15608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1560a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1560e:	d17d      	bne.n	1570c <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15610:	4a4a      	ldr	r2, [pc, #296]	; (1573c <bus_fault+0x190>)
   15612:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15614:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   15618:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1561a:	2101      	movs	r1, #1
   1561c:	4628      	mov	r0, r5
   1561e:	f017 fc33 	bl	2ce88 <memory_fault_recoverable>
   15622:	7020      	strb	r0, [r4, #0]
}
   15624:	2000      	movs	r0, #0
   15626:	bd70      	pop	{r4, r5, r6, pc}
   15628:	4b41      	ldr	r3, [pc, #260]	; (15730 <bus_fault+0x184>)
   1562a:	4a42      	ldr	r2, [pc, #264]	; (15734 <bus_fault+0x188>)
   1562c:	1a9b      	subs	r3, r3, r2
   1562e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   15630:	f04f 0100 	mov.w	r1, #0
   15634:	2201      	movs	r2, #1
   15636:	f362 0102 	bfi	r1, r2, #0, #3
   1563a:	f36f 01c5 	bfc	r1, #3, #3
   1563e:	f363 118f 	bfi	r1, r3, #6, #10
   15642:	483f      	ldr	r0, [pc, #252]	; (15740 <bus_fault+0x194>)
   15644:	f7fe f92c 	bl	138a0 <log_0>
   15648:	e7c9      	b.n	155de <bus_fault+0x32>
   1564a:	4b39      	ldr	r3, [pc, #228]	; (15730 <bus_fault+0x184>)
   1564c:	4a39      	ldr	r2, [pc, #228]	; (15734 <bus_fault+0x188>)
   1564e:	1a9b      	subs	r3, r3, r2
   15650:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   15652:	f04f 0100 	mov.w	r1, #0
   15656:	2201      	movs	r2, #1
   15658:	f362 0102 	bfi	r1, r2, #0, #3
   1565c:	f36f 01c5 	bfc	r1, #3, #3
   15660:	f363 118f 	bfi	r1, r3, #6, #10
   15664:	4837      	ldr	r0, [pc, #220]	; (15744 <bus_fault+0x198>)
   15666:	f7fe f91b 	bl	138a0 <log_0>
   1566a:	e7bd      	b.n	155e8 <bus_fault+0x3c>
   1566c:	4b30      	ldr	r3, [pc, #192]	; (15730 <bus_fault+0x184>)
   1566e:	4a31      	ldr	r2, [pc, #196]	; (15734 <bus_fault+0x188>)
   15670:	1a9b      	subs	r3, r3, r2
   15672:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   15674:	f04f 0100 	mov.w	r1, #0
   15678:	2201      	movs	r2, #1
   1567a:	f362 0102 	bfi	r1, r2, #0, #3
   1567e:	f36f 01c5 	bfc	r1, #3, #3
   15682:	f363 118f 	bfi	r1, r3, #6, #10
   15686:	4830      	ldr	r0, [pc, #192]	; (15748 <bus_fault+0x19c>)
   15688:	f7fe f90a 	bl	138a0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   1568c:	4b2b      	ldr	r3, [pc, #172]	; (1573c <bus_fault+0x190>)
   1568e:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15692:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   15696:	d0ac      	beq.n	155f2 <bus_fault+0x46>
   15698:	4b25      	ldr	r3, [pc, #148]	; (15730 <bus_fault+0x184>)
   1569a:	4a26      	ldr	r2, [pc, #152]	; (15734 <bus_fault+0x188>)
   1569c:	1a9b      	subs	r3, r3, r2
   1569e:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   156a0:	f04f 0200 	mov.w	r2, #0
   156a4:	2001      	movs	r0, #1
   156a6:	f360 0202 	bfi	r2, r0, #0, #3
   156aa:	f36f 02c5 	bfc	r2, #3, #3
   156ae:	f363 128f 	bfi	r2, r3, #6, #10
   156b2:	4826      	ldr	r0, [pc, #152]	; (1574c <bus_fault+0x1a0>)
   156b4:	f7fe f924 	bl	13900 <log_1>
			if (from_hard_fault != 0) {
   156b8:	2e00      	cmp	r6, #0
   156ba:	d09a      	beq.n	155f2 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   156bc:	4a1f      	ldr	r2, [pc, #124]	; (1573c <bus_fault+0x190>)
   156be:	6a93      	ldr	r3, [r2, #40]	; 0x28
   156c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   156c4:	6293      	str	r3, [r2, #40]	; 0x28
   156c6:	e794      	b.n	155f2 <bus_fault+0x46>
   156c8:	4b19      	ldr	r3, [pc, #100]	; (15730 <bus_fault+0x184>)
   156ca:	4a1a      	ldr	r2, [pc, #104]	; (15734 <bus_fault+0x188>)
   156cc:	1a9b      	subs	r3, r3, r2
   156ce:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   156d0:	f04f 0100 	mov.w	r1, #0
   156d4:	2201      	movs	r2, #1
   156d6:	f362 0102 	bfi	r1, r2, #0, #3
   156da:	f36f 01c5 	bfc	r1, #3, #3
   156de:	f363 118f 	bfi	r1, r3, #6, #10
   156e2:	481b      	ldr	r0, [pc, #108]	; (15750 <bus_fault+0x1a4>)
   156e4:	f7fe f8dc 	bl	138a0 <log_0>
   156e8:	e788      	b.n	155fc <bus_fault+0x50>
   156ea:	4b11      	ldr	r3, [pc, #68]	; (15730 <bus_fault+0x184>)
   156ec:	4a11      	ldr	r2, [pc, #68]	; (15734 <bus_fault+0x188>)
   156ee:	1a9b      	subs	r3, r3, r2
   156f0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   156f2:	f04f 0100 	mov.w	r1, #0
   156f6:	2201      	movs	r2, #1
   156f8:	f362 0102 	bfi	r1, r2, #0, #3
   156fc:	f36f 01c5 	bfc	r1, #3, #3
   15700:	f363 118f 	bfi	r1, r3, #6, #10
   15704:	4813      	ldr	r0, [pc, #76]	; (15754 <bus_fault+0x1a8>)
   15706:	f7fe f8cb 	bl	138a0 <log_0>
   1570a:	e781      	b.n	15610 <bus_fault+0x64>
   1570c:	4b08      	ldr	r3, [pc, #32]	; (15730 <bus_fault+0x184>)
   1570e:	4a09      	ldr	r2, [pc, #36]	; (15734 <bus_fault+0x188>)
   15710:	1a9b      	subs	r3, r3, r2
   15712:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15714:	f04f 0100 	mov.w	r1, #0
   15718:	2201      	movs	r2, #1
   1571a:	f362 0102 	bfi	r1, r2, #0, #3
   1571e:	f36f 01c5 	bfc	r1, #3, #3
   15722:	f363 118f 	bfi	r1, r3, #6, #10
   15726:	480c      	ldr	r0, [pc, #48]	; (15758 <bus_fault+0x1ac>)
   15728:	f7fe f8ba 	bl	138a0 <log_0>
   1572c:	e770      	b.n	15610 <bus_fault+0x64>
   1572e:	bf00      	nop
   15730:	000319a8 	.word	0x000319a8
   15734:	00031908 	.word	0x00031908
   15738:	00032d64 	.word	0x00032d64
   1573c:	e000ed00 	.word	0xe000ed00
   15740:	00032d7c 	.word	0x00032d7c
   15744:	00032d90 	.word	0x00032d90
   15748:	00032da4 	.word	0x00032da4
   1574c:	00032dc0 	.word	0x00032dc0
   15750:	00032dd8 	.word	0x00032dd8
   15754:	00032df4 	.word	0x00032df4
   15758:	00032e0c 	.word	0x00032e0c

0001575c <mem_manage_fault>:
{
   1575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1575e:	4605      	mov	r5, r0
   15760:	460c      	mov	r4, r1
   15762:	4616      	mov	r6, r2
   15764:	4b6f      	ldr	r3, [pc, #444]	; (15924 <mem_manage_fault+0x1c8>)
   15766:	4a70      	ldr	r2, [pc, #448]	; (15928 <mem_manage_fault+0x1cc>)
   15768:	1a9b      	subs	r3, r3, r2
   1576a:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   1576c:	f04f 0100 	mov.w	r1, #0
   15770:	2201      	movs	r2, #1
   15772:	f362 0102 	bfi	r1, r2, #0, #3
   15776:	f36f 01c5 	bfc	r1, #3, #3
   1577a:	f363 118f 	bfi	r1, r3, #6, #10
   1577e:	486b      	ldr	r0, [pc, #428]	; (1592c <mem_manage_fault+0x1d0>)
   15780:	f7fe f88e 	bl	138a0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15784:	4b6a      	ldr	r3, [pc, #424]	; (15930 <mem_manage_fault+0x1d4>)
   15786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15788:	f013 0f10 	tst.w	r3, #16
   1578c:	d132      	bne.n	157f4 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1578e:	4b68      	ldr	r3, [pc, #416]	; (15930 <mem_manage_fault+0x1d4>)
   15790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15792:	f013 0f08 	tst.w	r3, #8
   15796:	d13e      	bne.n	15816 <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   15798:	4b65      	ldr	r3, [pc, #404]	; (15930 <mem_manage_fault+0x1d4>)
   1579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1579c:	f013 0f02 	tst.w	r3, #2
   157a0:	d14a      	bne.n	15838 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
   157a2:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   157a6:	4b62      	ldr	r3, [pc, #392]	; (15930 <mem_manage_fault+0x1d4>)
   157a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157aa:	f013 0f01 	tst.w	r3, #1
   157ae:	d175      	bne.n	1589c <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   157b0:	4b5f      	ldr	r3, [pc, #380]	; (15930 <mem_manage_fault+0x1d4>)
   157b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157b4:	f013 0f20 	tst.w	r3, #32
   157b8:	f040 8081 	bne.w	158be <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   157bc:	4b5c      	ldr	r3, [pc, #368]	; (15930 <mem_manage_fault+0x1d4>)
   157be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157c0:	f013 0f10 	tst.w	r3, #16
   157c4:	d104      	bne.n	157d0 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   157c6:	4b5a      	ldr	r3, [pc, #360]	; (15930 <mem_manage_fault+0x1d4>)
   157c8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   157ca:	f014 0402 	ands.w	r4, r4, #2
   157ce:	d005      	beq.n	157dc <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   157d0:	4b57      	ldr	r3, [pc, #348]	; (15930 <mem_manage_fault+0x1d4>)
   157d2:	685c      	ldr	r4, [r3, #4]
   157d4:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   157d8:	f040 8082 	bne.w	158e0 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   157dc:	4a54      	ldr	r2, [pc, #336]	; (15930 <mem_manage_fault+0x1d4>)
   157de:	6a93      	ldr	r3, [r2, #40]	; 0x28
   157e0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   157e4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   157e6:	2101      	movs	r1, #1
   157e8:	4628      	mov	r0, r5
   157ea:	f017 fb4d 	bl	2ce88 <memory_fault_recoverable>
   157ee:	7030      	strb	r0, [r6, #0]
}
   157f0:	4620      	mov	r0, r4
   157f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157f4:	4b4b      	ldr	r3, [pc, #300]	; (15924 <mem_manage_fault+0x1c8>)
   157f6:	4a4c      	ldr	r2, [pc, #304]	; (15928 <mem_manage_fault+0x1cc>)
   157f8:	1a9b      	subs	r3, r3, r2
   157fa:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   157fc:	f04f 0100 	mov.w	r1, #0
   15800:	2201      	movs	r2, #1
   15802:	f362 0102 	bfi	r1, r2, #0, #3
   15806:	f36f 01c5 	bfc	r1, #3, #3
   1580a:	f363 118f 	bfi	r1, r3, #6, #10
   1580e:	4849      	ldr	r0, [pc, #292]	; (15934 <mem_manage_fault+0x1d8>)
   15810:	f7fe f846 	bl	138a0 <log_0>
   15814:	e7bb      	b.n	1578e <mem_manage_fault+0x32>
   15816:	4b43      	ldr	r3, [pc, #268]	; (15924 <mem_manage_fault+0x1c8>)
   15818:	4a43      	ldr	r2, [pc, #268]	; (15928 <mem_manage_fault+0x1cc>)
   1581a:	1a9b      	subs	r3, r3, r2
   1581c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   1581e:	f04f 0100 	mov.w	r1, #0
   15822:	2201      	movs	r2, #1
   15824:	f362 0102 	bfi	r1, r2, #0, #3
   15828:	f36f 01c5 	bfc	r1, #3, #3
   1582c:	f363 118f 	bfi	r1, r3, #6, #10
   15830:	4841      	ldr	r0, [pc, #260]	; (15938 <mem_manage_fault+0x1dc>)
   15832:	f7fe f835 	bl	138a0 <log_0>
   15836:	e7af      	b.n	15798 <mem_manage_fault+0x3c>
   15838:	4b3a      	ldr	r3, [pc, #232]	; (15924 <mem_manage_fault+0x1c8>)
   1583a:	4a3b      	ldr	r2, [pc, #236]	; (15928 <mem_manage_fault+0x1cc>)
   1583c:	1a9b      	subs	r3, r3, r2
   1583e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   15840:	f04f 0100 	mov.w	r1, #0
   15844:	2201      	movs	r2, #1
   15846:	f362 0102 	bfi	r1, r2, #0, #3
   1584a:	f36f 01c5 	bfc	r1, #3, #3
   1584e:	f363 118f 	bfi	r1, r3, #6, #10
   15852:	483a      	ldr	r0, [pc, #232]	; (1593c <mem_manage_fault+0x1e0>)
   15854:	f7fe f824 	bl	138a0 <log_0>
		uint32_t temp = SCB->MMFAR;
   15858:	4b35      	ldr	r3, [pc, #212]	; (15930 <mem_manage_fault+0x1d4>)
   1585a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1585e:	f013 0f80 	tst.w	r3, #128	; 0x80
   15862:	d102      	bne.n	1586a <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
   15864:	f06f 0715 	mvn.w	r7, #21
   15868:	e79d      	b.n	157a6 <mem_manage_fault+0x4a>
   1586a:	4b2e      	ldr	r3, [pc, #184]	; (15924 <mem_manage_fault+0x1c8>)
   1586c:	4a2e      	ldr	r2, [pc, #184]	; (15928 <mem_manage_fault+0x1cc>)
   1586e:	1a9b      	subs	r3, r3, r2
   15870:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15872:	f04f 0200 	mov.w	r2, #0
   15876:	2101      	movs	r1, #1
   15878:	f361 0202 	bfi	r2, r1, #0, #3
   1587c:	f36f 02c5 	bfc	r2, #3, #3
   15880:	f363 128f 	bfi	r2, r3, #6, #10
   15884:	4639      	mov	r1, r7
   15886:	482e      	ldr	r0, [pc, #184]	; (15940 <mem_manage_fault+0x1e4>)
   15888:	f7fe f83a 	bl	13900 <log_1>
			if (from_hard_fault != 0) {
   1588c:	2c00      	cmp	r4, #0
   1588e:	d08a      	beq.n	157a6 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15890:	4a27      	ldr	r2, [pc, #156]	; (15930 <mem_manage_fault+0x1d4>)
   15892:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15898:	6293      	str	r3, [r2, #40]	; 0x28
   1589a:	e784      	b.n	157a6 <mem_manage_fault+0x4a>
   1589c:	4b21      	ldr	r3, [pc, #132]	; (15924 <mem_manage_fault+0x1c8>)
   1589e:	4a22      	ldr	r2, [pc, #136]	; (15928 <mem_manage_fault+0x1cc>)
   158a0:	1a9b      	subs	r3, r3, r2
   158a2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   158a4:	f04f 0100 	mov.w	r1, #0
   158a8:	2201      	movs	r2, #1
   158aa:	f362 0102 	bfi	r1, r2, #0, #3
   158ae:	f36f 01c5 	bfc	r1, #3, #3
   158b2:	f363 118f 	bfi	r1, r3, #6, #10
   158b6:	4823      	ldr	r0, [pc, #140]	; (15944 <mem_manage_fault+0x1e8>)
   158b8:	f7fd fff2 	bl	138a0 <log_0>
   158bc:	e778      	b.n	157b0 <mem_manage_fault+0x54>
   158be:	4b19      	ldr	r3, [pc, #100]	; (15924 <mem_manage_fault+0x1c8>)
   158c0:	4a19      	ldr	r2, [pc, #100]	; (15928 <mem_manage_fault+0x1cc>)
   158c2:	1a9b      	subs	r3, r3, r2
   158c4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   158c6:	f04f 0100 	mov.w	r1, #0
   158ca:	2201      	movs	r2, #1
   158cc:	f362 0102 	bfi	r1, r2, #0, #3
   158d0:	f36f 01c5 	bfc	r1, #3, #3
   158d4:	f363 118f 	bfi	r1, r3, #6, #10
   158d8:	481b      	ldr	r0, [pc, #108]	; (15948 <mem_manage_fault+0x1ec>)
   158da:	f7fd ffe1 	bl	138a0 <log_0>
   158de:	e76d      	b.n	157bc <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   158e0:	4629      	mov	r1, r5
   158e2:	4638      	mov	r0, r7
   158e4:	f7ff fd22 	bl	1532c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   158e8:	4607      	mov	r7, r0
   158ea:	b9b8      	cbnz	r0, 1591c <mem_manage_fault+0x1c0>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   158ec:	4b10      	ldr	r3, [pc, #64]	; (15930 <mem_manage_fault+0x1d4>)
   158ee:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   158f0:	f014 0410 	ands.w	r4, r4, #16
   158f4:	f43f af72 	beq.w	157dc <mem_manage_fault+0x80>
   158f8:	4c14      	ldr	r4, [pc, #80]	; (1594c <mem_manage_fault+0x1f0>)
   158fa:	f240 1349 	movw	r3, #329	; 0x149
   158fe:	4622      	mov	r2, r4
   15900:	4913      	ldr	r1, [pc, #76]	; (15950 <mem_manage_fault+0x1f4>)
   15902:	4814      	ldr	r0, [pc, #80]	; (15954 <mem_manage_fault+0x1f8>)
   15904:	f016 fc20 	bl	2c148 <printk>
   15908:	4813      	ldr	r0, [pc, #76]	; (15958 <mem_manage_fault+0x1fc>)
   1590a:	f016 fc1d 	bl	2c148 <printk>
   1590e:	f240 1149 	movw	r1, #329	; 0x149
   15912:	4620      	mov	r0, r4
   15914:	f016 fe1d 	bl	2c552 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15918:	463c      	mov	r4, r7
   1591a:	e75f      	b.n	157dc <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1591c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   15920:	2402      	movs	r4, #2
   15922:	e75b      	b.n	157dc <mem_manage_fault+0x80>
   15924:	000319a8 	.word	0x000319a8
   15928:	00031908 	.word	0x00031908
   1592c:	00032e3c 	.word	0x00032e3c
   15930:	e000ed00 	.word	0xe000ed00
   15934:	00032e54 	.word	0x00032e54
   15938:	00032d90 	.word	0x00032d90
   1593c:	00032e88 	.word	0x00032e88
   15940:	00032ea0 	.word	0x00032ea0
   15944:	00032eb8 	.word	0x00032eb8
   15948:	00032e0c 	.word	0x00032e0c
   1594c:	00032ed8 	.word	0x00032ed8
   15950:	00032f14 	.word	0x00032f14
   15954:	00031df4 	.word	0x00031df4
   15958:	00032f60 	.word	0x00032f60

0001595c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   1595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1595e:	4606      	mov	r6, r0
   15960:	460c      	mov	r4, r1
   15962:	4b5b      	ldr	r3, [pc, #364]	; (15ad0 <hard_fault+0x174>)
   15964:	4a5b      	ldr	r2, [pc, #364]	; (15ad4 <hard_fault+0x178>)
   15966:	1a9b      	subs	r3, r3, r2
   15968:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   1596a:	f04f 0100 	mov.w	r1, #0
   1596e:	2201      	movs	r2, #1
   15970:	f362 0102 	bfi	r1, r2, #0, #3
   15974:	f36f 01c5 	bfc	r1, #3, #3
   15978:	f363 118f 	bfi	r1, r3, #6, #10
   1597c:	4856      	ldr	r0, [pc, #344]	; (15ad8 <hard_fault+0x17c>)
   1597e:	f7fd ff8f 	bl	138a0 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   15982:	2300      	movs	r3, #0
   15984:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15986:	4b55      	ldr	r3, [pc, #340]	; (15adc <hard_fault+0x180>)
   15988:	6adf      	ldr	r7, [r3, #44]	; 0x2c
   1598a:	f017 0702 	ands.w	r7, r7, #2
   1598e:	d135      	bne.n	159fc <hard_fault+0xa0>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   15990:	4b52      	ldr	r3, [pc, #328]	; (15adc <hard_fault+0x180>)
   15992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15994:	2b00      	cmp	r3, #0
   15996:	db44      	blt.n	15a22 <hard_fault+0xc6>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15998:	4b50      	ldr	r3, [pc, #320]	; (15adc <hard_fault+0x180>)
   1599a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1599c:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
   159a0:	f000 8084 	beq.w	15aac <hard_fault+0x150>
   159a4:	4b4a      	ldr	r3, [pc, #296]	; (15ad0 <hard_fault+0x174>)
   159a6:	4a4b      	ldr	r2, [pc, #300]	; (15ad4 <hard_fault+0x178>)
   159a8:	1a9b      	subs	r3, r3, r2
   159aa:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   159ac:	f04f 0100 	mov.w	r1, #0
   159b0:	2201      	movs	r2, #1
   159b2:	f362 0102 	bfi	r1, r2, #0, #3
   159b6:	f36f 01c5 	bfc	r1, #3, #3
   159ba:	f363 118f 	bfi	r1, r3, #6, #10
   159be:	4848      	ldr	r0, [pc, #288]	; (15ae0 <hard_fault+0x184>)
   159c0:	f7fd ff6e 	bl	138a0 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   159c4:	69b3      	ldr	r3, [r6, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   159c6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   159ca:	f64d 7302 	movw	r3, #57090	; 0xdf02
   159ce:	429a      	cmp	r2, r3
   159d0:	d039      	beq.n	15a46 <hard_fault+0xea>
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
   159d2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   159d6:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   159da:	781b      	ldrb	r3, [r3, #0]
   159dc:	2b00      	cmp	r3, #0
   159de:	d145      	bne.n	15a6c <hard_fault+0x110>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
   159e0:	4b40      	ldr	r3, [pc, #256]	; (15ae4 <hard_fault+0x188>)
   159e2:	781b      	ldrb	r3, [r3, #0]
   159e4:	2b00      	cmp	r3, #0
   159e6:	d148      	bne.n	15a7a <hard_fault+0x11e>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
   159e8:	4b3f      	ldr	r3, [pc, #252]	; (15ae8 <hard_fault+0x18c>)
   159ea:	881b      	ldrh	r3, [r3, #0]
   159ec:	b29b      	uxth	r3, r3
   159ee:	2b00      	cmp	r3, #0
   159f0:	d04a      	beq.n	15a88 <hard_fault+0x12c>
			reason = usage_fault(esf);
   159f2:	4630      	mov	r0, r6
   159f4:	f7ff fd0e 	bl	15414 <usage_fault>
   159f8:	4605      	mov	r5, r0
   159fa:	e010      	b.n	15a1e <hard_fault+0xc2>
   159fc:	4b34      	ldr	r3, [pc, #208]	; (15ad0 <hard_fault+0x174>)
   159fe:	4a35      	ldr	r2, [pc, #212]	; (15ad4 <hard_fault+0x178>)
   15a00:	1a9b      	subs	r3, r3, r2
   15a02:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   15a04:	f04f 0100 	mov.w	r1, #0
   15a08:	2201      	movs	r2, #1
   15a0a:	f362 0102 	bfi	r1, r2, #0, #3
   15a0e:	f36f 01c5 	bfc	r1, #3, #3
   15a12:	f363 118f 	bfi	r1, r3, #6, #10
   15a16:	4835      	ldr	r0, [pc, #212]	; (15aec <hard_fault+0x190>)
   15a18:	f7fd ff42 	bl	138a0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15a1c:	2500      	movs	r5, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   15a1e:	4628      	mov	r0, r5
   15a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15a22:	4b2b      	ldr	r3, [pc, #172]	; (15ad0 <hard_fault+0x174>)
   15a24:	4a2b      	ldr	r2, [pc, #172]	; (15ad4 <hard_fault+0x178>)
   15a26:	1a9b      	subs	r3, r3, r2
   15a28:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   15a2a:	f04f 0100 	mov.w	r1, #0
   15a2e:	2201      	movs	r2, #1
   15a30:	f362 0102 	bfi	r1, r2, #0, #3
   15a34:	f36f 01c5 	bfc	r1, #3, #3
   15a38:	f363 118f 	bfi	r1, r3, #6, #10
   15a3c:	482c      	ldr	r0, [pc, #176]	; (15af0 <hard_fault+0x194>)
   15a3e:	f7fd ff2f 	bl	138a0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15a42:	463d      	mov	r5, r7
   15a44:	e7eb      	b.n	15a1e <hard_fault+0xc2>
   15a46:	4b22      	ldr	r3, [pc, #136]	; (15ad0 <hard_fault+0x174>)
   15a48:	4a22      	ldr	r2, [pc, #136]	; (15ad4 <hard_fault+0x178>)
   15a4a:	1a9b      	subs	r3, r3, r2
   15a4c:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15a4e:	f04f 0200 	mov.w	r2, #0
   15a52:	2101      	movs	r1, #1
   15a54:	f361 0202 	bfi	r2, r1, #0, #3
   15a58:	f36f 02c5 	bfc	r2, #3, #3
   15a5c:	f363 128f 	bfi	r2, r3, #6, #10
   15a60:	6831      	ldr	r1, [r6, #0]
   15a62:	4824      	ldr	r0, [pc, #144]	; (15af4 <hard_fault+0x198>)
   15a64:	f7fd ff4c 	bl	13900 <log_1>
			reason = esf->basic.r0;
   15a68:	6835      	ldr	r5, [r6, #0]
   15a6a:	e7d8      	b.n	15a1e <hard_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
   15a6c:	4622      	mov	r2, r4
   15a6e:	2101      	movs	r1, #1
   15a70:	4630      	mov	r0, r6
   15a72:	f7ff fe73 	bl	1575c <mem_manage_fault>
   15a76:	4605      	mov	r5, r0
   15a78:	e7d1      	b.n	15a1e <hard_fault+0xc2>
			reason = bus_fault(esf, 1, recoverable);
   15a7a:	4622      	mov	r2, r4
   15a7c:	2101      	movs	r1, #1
   15a7e:	4630      	mov	r0, r6
   15a80:	f7ff fd94 	bl	155ac <bus_fault>
   15a84:	4605      	mov	r5, r0
   15a86:	e7ca      	b.n	15a1e <hard_fault+0xc2>
			__ASSERT(0,
   15a88:	4c1b      	ldr	r4, [pc, #108]	; (15af8 <hard_fault+0x19c>)
   15a8a:	f240 23c3 	movw	r3, #707	; 0x2c3
   15a8e:	4622      	mov	r2, r4
   15a90:	491a      	ldr	r1, [pc, #104]	; (15afc <hard_fault+0x1a0>)
   15a92:	481b      	ldr	r0, [pc, #108]	; (15b00 <hard_fault+0x1a4>)
   15a94:	f016 fb58 	bl	2c148 <printk>
   15a98:	481a      	ldr	r0, [pc, #104]	; (15b04 <hard_fault+0x1a8>)
   15a9a:	f016 fb55 	bl	2c148 <printk>
   15a9e:	f240 21c3 	movw	r1, #707	; 0x2c3
   15aa2:	4620      	mov	r0, r4
   15aa4:	f016 fd55 	bl	2c552 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15aa8:	463d      	mov	r5, r7
   15aaa:	e7b8      	b.n	15a1e <hard_fault+0xc2>
		__ASSERT(0,
   15aac:	4c12      	ldr	r4, [pc, #72]	; (15af8 <hard_fault+0x19c>)
   15aae:	f240 23c7 	movw	r3, #711	; 0x2c7
   15ab2:	4622      	mov	r2, r4
   15ab4:	4911      	ldr	r1, [pc, #68]	; (15afc <hard_fault+0x1a0>)
   15ab6:	4812      	ldr	r0, [pc, #72]	; (15b00 <hard_fault+0x1a4>)
   15ab8:	f016 fb46 	bl	2c148 <printk>
   15abc:	4812      	ldr	r0, [pc, #72]	; (15b08 <hard_fault+0x1ac>)
   15abe:	f016 fb43 	bl	2c148 <printk>
   15ac2:	f240 21c7 	movw	r1, #711	; 0x2c7
   15ac6:	4620      	mov	r0, r4
   15ac8:	f016 fd43 	bl	2c552 <assert_post_action>
	return reason;
   15acc:	e7a7      	b.n	15a1e <hard_fault+0xc2>
   15ace:	bf00      	nop
   15ad0:	000319a8 	.word	0x000319a8
   15ad4:	00031908 	.word	0x00031908
   15ad8:	00032f84 	.word	0x00032f84
   15adc:	e000ed00 	.word	0xe000ed00
   15ae0:	00032fd0 	.word	0x00032fd0
   15ae4:	e000ed29 	.word	0xe000ed29
   15ae8:	e000ed2a 	.word	0xe000ed2a
   15aec:	00032f9c 	.word	0x00032f9c
   15af0:	00032fc0 	.word	0x00032fc0
   15af4:	00032ff0 	.word	0x00032ff0
   15af8:	00032ed8 	.word	0x00032ed8
   15afc:	000364dc 	.word	0x000364dc
   15b00:	00031df4 	.word	0x00031df4
   15b04:	0003300c 	.word	0x0003300c
   15b08:	00033030 	.word	0x00033030

00015b0c <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   15b0c:	b508      	push	{r3, lr}
   15b0e:	460a      	mov	r2, r1
   15b10:	480b      	ldr	r0, [pc, #44]	; (15b40 <reserved_exception+0x34>)
   15b12:	4b0c      	ldr	r3, [pc, #48]	; (15b44 <reserved_exception+0x38>)
   15b14:	1ac0      	subs	r0, r0, r3
   15b16:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   15b18:	f04f 0300 	mov.w	r3, #0
   15b1c:	2101      	movs	r1, #1
   15b1e:	f361 0302 	bfi	r3, r1, #0, #3
   15b22:	f36f 03c5 	bfc	r3, #3, #3
   15b26:	f360 138f 	bfi	r3, r0, #6, #10
   15b2a:	2a0f      	cmp	r2, #15
   15b2c:	dc05      	bgt.n	15b3a <reserved_exception+0x2e>
   15b2e:	4906      	ldr	r1, [pc, #24]	; (15b48 <reserved_exception+0x3c>)
   15b30:	3a10      	subs	r2, #16
   15b32:	4806      	ldr	r0, [pc, #24]	; (15b4c <reserved_exception+0x40>)
   15b34:	f7fd ff1a 	bl	1396c <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   15b38:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   15b3a:	4905      	ldr	r1, [pc, #20]	; (15b50 <reserved_exception+0x44>)
   15b3c:	e7f8      	b.n	15b30 <reserved_exception+0x24>
   15b3e:	bf00      	nop
   15b40:	000319a8 	.word	0x000319a8
   15b44:	00031908 	.word	0x00031908
   15b48:	00033060 	.word	0x00033060
   15b4c:	00033094 	.word	0x00033094
   15b50:	00033078 	.word	0x00033078

00015b54 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b56:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15b58:	4b37      	ldr	r3, [pc, #220]	; (15c38 <z_arm_fault+0xe4>)
   15b5a:	685d      	ldr	r5, [r3, #4]
   15b5c:	f3c5 0508 	ubfx	r5, r5, #0, #9
   15b60:	2300      	movs	r3, #0
   15b62:	f383 8811 	msr	BASEPRI, r3
   15b66:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15b6a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   15b6e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   15b72:	d12b      	bne.n	15bcc <z_arm_fault+0x78>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   15b74:	f002 030c 	and.w	r3, r2, #12
   15b78:	2b08      	cmp	r3, #8
   15b7a:	d011      	beq.n	15ba0 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15b7c:	f012 0f08 	tst.w	r2, #8
   15b80:	d021      	beq.n	15bc6 <z_arm_fault+0x72>
			ptr_esf =  (z_arch_esf_t *)psp;
   15b82:	460c      	mov	r4, r1
	*nested_exc = false;
   15b84:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   15b86:	b324      	cbz	r4, 15bd2 <z_arm_fault+0x7e>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   15b88:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   15b8c:	4629      	mov	r1, r5
   15b8e:	4620      	mov	r0, r4
   15b90:	f017 f97c 	bl	2ce8c <fault_handle>
   15b94:	4606      	mov	r6, r0
	if (recoverable) {
   15b96:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15b9a:	b35b      	cbz	r3, 15bf4 <z_arm_fault+0xa0>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   15b9c:	b00b      	add	sp, #44	; 0x2c
   15b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ba0:	4b26      	ldr	r3, [pc, #152]	; (15c3c <z_arm_fault+0xe8>)
   15ba2:	4a27      	ldr	r2, [pc, #156]	; (15c40 <z_arm_fault+0xec>)
   15ba4:	1a9b      	subs	r3, r3, r2
   15ba6:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15ba8:	f04f 0100 	mov.w	r1, #0
   15bac:	2201      	movs	r2, #1
   15bae:	f362 0102 	bfi	r1, r2, #0, #3
   15bb2:	f36f 01c5 	bfc	r1, #3, #3
   15bb6:	f363 118f 	bfi	r1, r3, #6, #10
   15bba:	4822      	ldr	r0, [pc, #136]	; (15c44 <z_arm_fault+0xf0>)
   15bbc:	f7fd fe70 	bl	138a0 <log_0>
	*nested_exc = false;
   15bc0:	2700      	movs	r7, #0
		return NULL;
   15bc2:	463c      	mov	r4, r7
   15bc4:	e7df      	b.n	15b86 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   15bc6:	4604      	mov	r4, r0
			*nested_exc = true;
   15bc8:	2701      	movs	r7, #1
   15bca:	e7dc      	b.n	15b86 <z_arm_fault+0x32>
	*nested_exc = false;
   15bcc:	2700      	movs	r7, #0
		return NULL;
   15bce:	463c      	mov	r4, r7
   15bd0:	e7d9      	b.n	15b86 <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
   15bd2:	4e1d      	ldr	r6, [pc, #116]	; (15c48 <z_arm_fault+0xf4>)
   15bd4:	f240 33f2 	movw	r3, #1010	; 0x3f2
   15bd8:	4632      	mov	r2, r6
   15bda:	491c      	ldr	r1, [pc, #112]	; (15c4c <z_arm_fault+0xf8>)
   15bdc:	481c      	ldr	r0, [pc, #112]	; (15c50 <z_arm_fault+0xfc>)
   15bde:	f016 fab3 	bl	2c148 <printk>
   15be2:	481c      	ldr	r0, [pc, #112]	; (15c54 <z_arm_fault+0x100>)
   15be4:	f016 fab0 	bl	2c148 <printk>
   15be8:	f240 31f2 	movw	r1, #1010	; 0x3f2
   15bec:	4630      	mov	r0, r6
   15bee:	f016 fcb0 	bl	2c552 <assert_post_action>
   15bf2:	e7c9      	b.n	15b88 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   15bf4:	ad01      	add	r5, sp, #4
   15bf6:	6820      	ldr	r0, [r4, #0]
   15bf8:	6861      	ldr	r1, [r4, #4]
   15bfa:	68a2      	ldr	r2, [r4, #8]
   15bfc:	68e3      	ldr	r3, [r4, #12]
   15bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15c00:	6920      	ldr	r0, [r4, #16]
   15c02:	6961      	ldr	r1, [r4, #20]
   15c04:	69a2      	ldr	r2, [r4, #24]
   15c06:	69e3      	ldr	r3, [r4, #28]
   15c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
   15c0a:	b14f      	cbz	r7, 15c20 <z_arm_fault+0xcc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   15c0c:	9b08      	ldr	r3, [sp, #32]
   15c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   15c12:	b95a      	cbnz	r2, 15c2c <z_arm_fault+0xd8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   15c14:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15c18:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   15c1c:	9308      	str	r3, [sp, #32]
   15c1e:	e005      	b.n	15c2c <z_arm_fault+0xd8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15c20:	9b08      	ldr	r3, [sp, #32]
   15c22:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   15c26:	f023 0301 	bic.w	r3, r3, #1
   15c2a:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   15c2c:	a901      	add	r1, sp, #4
   15c2e:	4630      	mov	r0, r6
   15c30:	f017 f90c 	bl	2ce4c <z_arm_fatal_error>
   15c34:	e7b2      	b.n	15b9c <z_arm_fault+0x48>
   15c36:	bf00      	nop
   15c38:	e000ed00 	.word	0xe000ed00
   15c3c:	000319a8 	.word	0x000319a8
   15c40:	00031908 	.word	0x00031908
   15c44:	000330a8 	.word	0x000330a8
   15c48:	00032ed8 	.word	0x00032ed8
   15c4c:	000330d4 	.word	0x000330d4
   15c50:	00031df4 	.word	0x00031df4
   15c54:	000330e8 	.word	0x000330e8

00015c58 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15c58:	4a02      	ldr	r2, [pc, #8]	; (15c64 <z_arm_fault_init+0xc>)
   15c5a:	6953      	ldr	r3, [r2, #20]
   15c5c:	f043 0310 	orr.w	r3, r3, #16
   15c60:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   15c62:	4770      	bx	lr
   15c64:	e000ed00 	.word	0xe000ed00

00015c68 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15c68:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15c6c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15c70:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15c72:	4672      	mov	r2, lr
	bl z_arm_fault
   15c74:	f7ff ff6e 	bl	15b54 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15c78:	bd01      	pop	{r0, pc}
   15c7a:	bf00      	nop

00015c7c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   15c7c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15c7e:	e006      	b.n	15c8e <z_arm_interrupt_init+0x12>
   15c80:	f002 010f 	and.w	r1, r2, #15
   15c84:	4b09      	ldr	r3, [pc, #36]	; (15cac <z_arm_interrupt_init+0x30>)
   15c86:	440b      	add	r3, r1
   15c88:	2140      	movs	r1, #64	; 0x40
   15c8a:	7619      	strb	r1, [r3, #24]
   15c8c:	3201      	adds	r2, #1
   15c8e:	2a2f      	cmp	r2, #47	; 0x2f
   15c90:	dc0a      	bgt.n	15ca8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   15c92:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   15c94:	2b00      	cmp	r3, #0
   15c96:	dbf3      	blt.n	15c80 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15c98:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   15c9c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   15ca0:	2140      	movs	r1, #64	; 0x40
   15ca2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   15ca6:	e7f1      	b.n	15c8c <z_arm_interrupt_init+0x10>
	}
}
   15ca8:	4770      	bx	lr
   15caa:	bf00      	nop
   15cac:	e000ecfc 	.word	0xe000ecfc

00015cb0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15cb0:	2000      	movs	r0, #0
    msr CONTROL, r0
   15cb2:	f380 8814 	msr	CONTROL, r0
    isb
   15cb6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   15cba:	f01b fc7d 	bl	315b8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15cbe:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15cc0:	490d      	ldr	r1, [pc, #52]	; (15cf8 <__start+0x48>)
    str r0, [r1]
   15cc2:	6008      	str	r0, [r1, #0]
    dsb
   15cc4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15cc8:	480c      	ldr	r0, [pc, #48]	; (15cfc <__start+0x4c>)
    msr msp, r0
   15cca:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15cce:	f000 f829 	bl	15d24 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15cd2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15cd4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15cd8:	4809      	ldr	r0, [pc, #36]	; (15d00 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15cda:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   15cde:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15ce0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15ce4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15ce8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15cea:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15cec:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15cf0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15cf4:	f7ff fa86 	bl	15204 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   15cf8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15cfc:	200067a0 	.word	0x200067a0
    ldr r0, =z_interrupt_stacks
   15d00:	20006920 	.word	0x20006920

00015d04 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15d04:	4b06      	ldr	r3, [pc, #24]	; (15d20 <z_arm_clear_arm_mpu_config+0x1c>)
   15d06:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   15d08:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   15d0c:	2300      	movs	r3, #0
   15d0e:	4283      	cmp	r3, r0
   15d10:	da05      	bge.n	15d1e <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   15d12:	4a03      	ldr	r2, [pc, #12]	; (15d20 <z_arm_clear_arm_mpu_config+0x1c>)
   15d14:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   15d16:	2100      	movs	r1, #0
   15d18:	6111      	str	r1, [r2, #16]
   15d1a:	3301      	adds	r3, #1
   15d1c:	e7f7      	b.n	15d0e <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   15d1e:	4770      	bx	lr
   15d20:	e000ed90 	.word	0xe000ed90

00015d24 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   15d24:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   15d26:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   15d28:	2400      	movs	r4, #0
   15d2a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   15d2e:	f7ff ffe9 	bl	15d04 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   15d32:	4623      	mov	r3, r4
   15d34:	e008      	b.n	15d48 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   15d36:	f103 0120 	add.w	r1, r3, #32
   15d3a:	4a0e      	ldr	r2, [pc, #56]	; (15d74 <z_arm_init_arch_hw_at_boot+0x50>)
   15d3c:	f04f 30ff 	mov.w	r0, #4294967295
   15d40:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   15d44:	3301      	adds	r3, #1
   15d46:	b2db      	uxtb	r3, r3
   15d48:	2b07      	cmp	r3, #7
   15d4a:	d9f4      	bls.n	15d36 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   15d4c:	2300      	movs	r3, #0
   15d4e:	e008      	b.n	15d62 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   15d50:	f103 0160 	add.w	r1, r3, #96	; 0x60
   15d54:	4a07      	ldr	r2, [pc, #28]	; (15d74 <z_arm_init_arch_hw_at_boot+0x50>)
   15d56:	f04f 30ff 	mov.w	r0, #4294967295
   15d5a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   15d5e:	3301      	adds	r3, #1
   15d60:	b2db      	uxtb	r3, r3
   15d62:	2b07      	cmp	r3, #7
   15d64:	d9f4      	bls.n	15d50 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   15d66:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   15d68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15d6c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   15d70:	bd10      	pop	{r4, pc}
   15d72:	bf00      	nop
   15d74:	e000e100 	.word	0xe000e100

00015d78 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   15d78:	b508      	push	{r3, lr}
	if (_current == thread) {
   15d7a:	4b08      	ldr	r3, [pc, #32]	; (15d9c <z_impl_k_thread_abort+0x24>)
   15d7c:	689b      	ldr	r3, [r3, #8]
   15d7e:	4283      	cmp	r3, r0
   15d80:	d002      	beq.n	15d88 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   15d82:	f010 fdf3 	bl	2696c <z_thread_abort>
}
   15d86:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15d88:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   15d8c:	2b00      	cmp	r3, #0
   15d8e:	d0f8      	beq.n	15d82 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15d90:	4a03      	ldr	r2, [pc, #12]	; (15da0 <z_impl_k_thread_abort+0x28>)
   15d92:	6853      	ldr	r3, [r2, #4]
   15d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15d98:	6053      	str	r3, [r2, #4]
   15d9a:	e7f2      	b.n	15d82 <z_impl_k_thread_abort+0xa>
   15d9c:	200035ac 	.word	0x200035ac
   15da0:	e000ed00 	.word	0xe000ed00

00015da4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   15da4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15da6:	4b03      	ldr	r3, [pc, #12]	; (15db4 <z_arm_configure_static_mpu_regions+0x10>)
   15da8:	4a03      	ldr	r2, [pc, #12]	; (15db8 <z_arm_configure_static_mpu_regions+0x14>)
   15daa:	2101      	movs	r1, #1
   15dac:	4803      	ldr	r0, [pc, #12]	; (15dbc <z_arm_configure_static_mpu_regions+0x18>)
   15dae:	f000 f8bf 	bl	15f30 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   15db2:	bd08      	pop	{r3, pc}
   15db4:	20040000 	.word	0x20040000
   15db8:	20000000 	.word	0x20000000
   15dbc:	0003312c 	.word	0x0003312c

00015dc0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   15dc0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   15dc2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   15dc6:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   15dc8:	4804      	ldr	r0, [pc, #16]	; (15ddc <z_arm_configure_dynamic_mpu_regions+0x1c>)
   15dca:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   15dcc:	2320      	movs	r3, #32
   15dce:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15dd0:	4b03      	ldr	r3, [pc, #12]	; (15de0 <z_arm_configure_dynamic_mpu_regions+0x20>)
   15dd2:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15dd4:	2101      	movs	r1, #1
   15dd6:	f000 f8cd 	bl	15f74 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   15dda:	bd08      	pop	{r3, pc}
   15ddc:	20002d08 	.word	0x20002d08
   15de0:	150b0000 	.word	0x150b0000

00015de4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15de4:	4a06      	ldr	r2, [pc, #24]	; (15e00 <region_init+0x1c>)
   15de6:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15de8:	680b      	ldr	r3, [r1, #0]
   15dea:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15dee:	4303      	orrs	r3, r0
   15df0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15df4:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15df6:	688b      	ldr	r3, [r1, #8]
   15df8:	f043 0301 	orr.w	r3, r3, #1
   15dfc:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   15dfe:	4770      	bx	lr
   15e00:	e000ed90 	.word	0xe000ed90

00015e04 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   15e04:	b510      	push	{r4, lr}
   15e06:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   15e08:	2807      	cmp	r0, #7
   15e0a:	d803      	bhi.n	15e14 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   15e0c:	f7ff ffea 	bl	15de4 <region_init>

	return index;
   15e10:	4620      	mov	r0, r4
}
   15e12:	bd10      	pop	{r4, pc}
   15e14:	4b09      	ldr	r3, [pc, #36]	; (15e3c <region_allocate_and_init+0x38>)
   15e16:	4a0a      	ldr	r2, [pc, #40]	; (15e40 <region_allocate_and_init+0x3c>)
   15e18:	1a9b      	subs	r3, r3, r2
   15e1a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15e1c:	f04f 0200 	mov.w	r2, #0
   15e20:	2101      	movs	r1, #1
   15e22:	f361 0202 	bfi	r2, r1, #0, #3
   15e26:	f36f 02c5 	bfc	r2, #3, #3
   15e2a:	f363 128f 	bfi	r2, r3, #6, #10
   15e2e:	4601      	mov	r1, r0
   15e30:	4804      	ldr	r0, [pc, #16]	; (15e44 <region_allocate_and_init+0x40>)
   15e32:	f7fd fd65 	bl	13900 <log_1>
		return -EINVAL;
   15e36:	f06f 0015 	mvn.w	r0, #21
   15e3a:	e7ea      	b.n	15e12 <region_allocate_and_init+0xe>
   15e3c:	00031998 	.word	0x00031998
   15e40:	00031908 	.word	0x00031908
   15e44:	00033138 	.word	0x00033138

00015e48 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15e4c:	4680      	mov	r8, r0
   15e4e:	460f      	mov	r7, r1
   15e50:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   15e52:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   15e54:	2400      	movs	r4, #0
   15e56:	e009      	b.n	15e6c <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15e58:	4629      	mov	r1, r5
   15e5a:	b2f0      	uxtb	r0, r6
   15e5c:	f017 f84c 	bl	2cef8 <mpu_configure_region>
   15e60:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   15e62:	f110 0f16 	cmn.w	r0, #22
   15e66:	d025      	beq.n	15eb4 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   15e68:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   15e6a:	3401      	adds	r4, #1
   15e6c:	42bc      	cmp	r4, r7
   15e6e:	da21      	bge.n	15eb4 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
   15e70:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   15e74:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   15e78:	686a      	ldr	r2, [r5, #4]
   15e7a:	2a00      	cmp	r2, #0
   15e7c:	d0f5      	beq.n	15e6a <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   15e7e:	f1ba 0f00 	cmp.w	sl, #0
   15e82:	d0e9      	beq.n	15e58 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   15e84:	4628      	mov	r0, r5
   15e86:	f017 f826 	bl	2ced6 <mpu_partition_is_valid>
		if (do_sanity_check &&
   15e8a:	2800      	cmp	r0, #0
   15e8c:	d1e4      	bne.n	15e58 <mpu_configure_regions+0x10>
   15e8e:	4b0b      	ldr	r3, [pc, #44]	; (15ebc <mpu_configure_regions+0x74>)
   15e90:	4a0b      	ldr	r2, [pc, #44]	; (15ec0 <mpu_configure_regions+0x78>)
   15e92:	1a9b      	subs	r3, r3, r2
   15e94:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
   15e96:	f04f 0200 	mov.w	r2, #0
   15e9a:	2101      	movs	r1, #1
   15e9c:	f361 0202 	bfi	r2, r1, #0, #3
   15ea0:	f36f 02c5 	bfc	r2, #3, #3
   15ea4:	f363 128f 	bfi	r2, r3, #6, #10
   15ea8:	4621      	mov	r1, r4
   15eaa:	4806      	ldr	r0, [pc, #24]	; (15ec4 <mpu_configure_regions+0x7c>)
   15eac:	f7fd fd28 	bl	13900 <log_1>
			return -EINVAL;
   15eb0:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   15eb4:	4630      	mov	r0, r6
   15eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15eba:	bf00      	nop
   15ebc:	00031998 	.word	0x00031998
   15ec0:	00031908 	.word	0x00031908
   15ec4:	00033160 	.word	0x00033160

00015ec8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   15ec8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   15eca:	4c03      	ldr	r4, [pc, #12]	; (15ed8 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15ecc:	2301      	movs	r3, #1
   15ece:	7822      	ldrb	r2, [r4, #0]
   15ed0:	f7ff ffba 	bl	15e48 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15ed4:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   15ed6:	bd10      	pop	{r4, pc}
   15ed8:	20003ff8 	.word	0x20003ff8

00015edc <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   15edc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15ede:	2300      	movs	r3, #0
   15ee0:	4a08      	ldr	r2, [pc, #32]	; (15f04 <mpu_configure_dynamic_mpu_regions+0x28>)
   15ee2:	7812      	ldrb	r2, [r2, #0]
   15ee4:	f7ff ffb0 	bl	15e48 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15ee8:	f110 0f16 	cmn.w	r0, #22
   15eec:	d008      	beq.n	15f00 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15eee:	4603      	mov	r3, r0
   15ef0:	2b07      	cmp	r3, #7
   15ef2:	dc05      	bgt.n	15f00 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   15ef4:	4a04      	ldr	r2, [pc, #16]	; (15f08 <mpu_configure_dynamic_mpu_regions+0x2c>)
   15ef6:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   15ef8:	2100      	movs	r1, #0
   15efa:	6111      	str	r1, [r2, #16]
   15efc:	3301      	adds	r3, #1
   15efe:	e7f7      	b.n	15ef0 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   15f00:	bd08      	pop	{r3, pc}
   15f02:	bf00      	nop
   15f04:	20003ff8 	.word	0x20003ff8
   15f08:	e000ed90 	.word	0xe000ed90

00015f0c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15f0c:	4b03      	ldr	r3, [pc, #12]	; (15f1c <arm_core_mpu_enable+0x10>)
   15f0e:	2205      	movs	r2, #5
   15f10:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   15f12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15f16:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15f1a:	4770      	bx	lr
   15f1c:	e000ed90 	.word	0xe000ed90

00015f20 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15f20:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15f24:	4b01      	ldr	r3, [pc, #4]	; (15f2c <arm_core_mpu_disable+0xc>)
   15f26:	2200      	movs	r2, #0
   15f28:	605a      	str	r2, [r3, #4]
}
   15f2a:	4770      	bx	lr
   15f2c:	e000ed90 	.word	0xe000ed90

00015f30 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15f30:	b538      	push	{r3, r4, r5, lr}
   15f32:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   15f34:	f7ff ffc8 	bl	15ec8 <mpu_configure_static_mpu_regions>
   15f38:	f110 0f16 	cmn.w	r0, #22
   15f3c:	d000      	beq.n	15f40 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   15f3e:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   15f40:	4d08      	ldr	r5, [pc, #32]	; (15f64 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   15f42:	f240 1311 	movw	r3, #273	; 0x111
   15f46:	462a      	mov	r2, r5
   15f48:	4907      	ldr	r1, [pc, #28]	; (15f68 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   15f4a:	4808      	ldr	r0, [pc, #32]	; (15f6c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15f4c:	f016 f8fc 	bl	2c148 <printk>
   15f50:	4621      	mov	r1, r4
   15f52:	4807      	ldr	r0, [pc, #28]	; (15f70 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   15f54:	f016 f8f8 	bl	2c148 <printk>
   15f58:	f240 1111 	movw	r1, #273	; 0x111
   15f5c:	4628      	mov	r0, r5
   15f5e:	f016 faf8 	bl	2c552 <assert_post_action>
}
   15f62:	e7ec      	b.n	15f3e <arm_core_mpu_configure_static_mpu_regions+0xe>
   15f64:	00033184 	.word	0x00033184
   15f68:	000364dc 	.word	0x000364dc
   15f6c:	00031df4 	.word	0x00031df4
   15f70:	000331bc 	.word	0x000331bc

00015f74 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   15f74:	b538      	push	{r3, r4, r5, lr}
   15f76:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   15f78:	f7ff ffb0 	bl	15edc <mpu_configure_dynamic_mpu_regions>
   15f7c:	f110 0f16 	cmn.w	r0, #22
   15f80:	d000      	beq.n	15f84 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   15f82:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   15f84:	4d08      	ldr	r5, [pc, #32]	; (15fa8 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
   15f86:	f44f 7398 	mov.w	r3, #304	; 0x130
   15f8a:	462a      	mov	r2, r5
   15f8c:	4907      	ldr	r1, [pc, #28]	; (15fac <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
   15f8e:	4808      	ldr	r0, [pc, #32]	; (15fb0 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
   15f90:	f016 f8da 	bl	2c148 <printk>
   15f94:	4621      	mov	r1, r4
   15f96:	4807      	ldr	r0, [pc, #28]	; (15fb4 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
   15f98:	f016 f8d6 	bl	2c148 <printk>
   15f9c:	f44f 7198 	mov.w	r1, #304	; 0x130
   15fa0:	4628      	mov	r0, r5
   15fa2:	f016 fad6 	bl	2c552 <assert_post_action>
}
   15fa6:	e7ec      	b.n	15f82 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
   15fa8:	00033184 	.word	0x00033184
   15fac:	000364dc 	.word	0x000364dc
   15fb0:	00031df4 	.word	0x00031df4
   15fb4:	000331e8 	.word	0x000331e8

00015fb8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   15fb8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15fba:	4b23      	ldr	r3, [pc, #140]	; (16048 <z_arm_mpu_init+0x90>)
   15fbc:	681d      	ldr	r5, [r3, #0]
   15fbe:	2d08      	cmp	r5, #8
   15fc0:	d803      	bhi.n	15fca <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   15fc2:	f7ff ffad 	bl	15f20 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15fc6:	2400      	movs	r4, #0
   15fc8:	e01e      	b.n	16008 <z_arm_mpu_init+0x50>
		__ASSERT(0,
   15fca:	4c20      	ldr	r4, [pc, #128]	; (1604c <z_arm_mpu_init+0x94>)
   15fcc:	f44f 73a4 	mov.w	r3, #328	; 0x148
   15fd0:	4622      	mov	r2, r4
   15fd2:	491f      	ldr	r1, [pc, #124]	; (16050 <z_arm_mpu_init+0x98>)
   15fd4:	481f      	ldr	r0, [pc, #124]	; (16054 <z_arm_mpu_init+0x9c>)
   15fd6:	f016 f8b7 	bl	2c148 <printk>
   15fda:	2208      	movs	r2, #8
   15fdc:	4629      	mov	r1, r5
   15fde:	481e      	ldr	r0, [pc, #120]	; (16058 <z_arm_mpu_init+0xa0>)
   15fe0:	f016 f8b2 	bl	2c148 <printk>
   15fe4:	f44f 71a4 	mov.w	r1, #328	; 0x148
   15fe8:	4620      	mov	r0, r4
   15fea:	f016 fab2 	bl	2c552 <assert_post_action>
		return -1;
   15fee:	f04f 30ff 	mov.w	r0, #4294967295
   15ff2:	e016      	b.n	16022 <z_arm_mpu_init+0x6a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   15ff4:	4b14      	ldr	r3, [pc, #80]	; (16048 <z_arm_mpu_init+0x90>)
   15ff6:	6859      	ldr	r1, [r3, #4]
   15ff8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   15ffc:	0093      	lsls	r3, r2, #2
   15ffe:	4419      	add	r1, r3
   16000:	4620      	mov	r0, r4
   16002:	f7ff feef 	bl	15de4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16006:	3401      	adds	r4, #1
   16008:	42a5      	cmp	r5, r4
   1600a:	d8f3      	bhi.n	15ff4 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1600c:	4b13      	ldr	r3, [pc, #76]	; (1605c <z_arm_mpu_init+0xa4>)
   1600e:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   16010:	f7ff ff7c 	bl	15f0c <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   16014:	4b12      	ldr	r3, [pc, #72]	; (16060 <z_arm_mpu_init+0xa8>)
   16016:	681b      	ldr	r3, [r3, #0]
   16018:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1601c:	2b08      	cmp	r3, #8
   1601e:	d101      	bne.n	16024 <z_arm_mpu_init+0x6c>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   16020:	2000      	movs	r0, #0
}
   16022:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
   16024:	4c09      	ldr	r4, [pc, #36]	; (1604c <z_arm_mpu_init+0x94>)
   16026:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   1602a:	4622      	mov	r2, r4
   1602c:	490d      	ldr	r1, [pc, #52]	; (16064 <z_arm_mpu_init+0xac>)
   1602e:	4809      	ldr	r0, [pc, #36]	; (16054 <z_arm_mpu_init+0x9c>)
   16030:	f016 f88a 	bl	2c148 <printk>
   16034:	480c      	ldr	r0, [pc, #48]	; (16068 <z_arm_mpu_init+0xb0>)
   16036:	f016 f887 	bl	2c148 <printk>
   1603a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   1603e:	4620      	mov	r0, r4
   16040:	f016 fa87 	bl	2c552 <assert_post_action>
	return 0;
   16044:	2000      	movs	r0, #0
   16046:	e7ec      	b.n	16022 <z_arm_mpu_init+0x6a>
   16048:	00033468 	.word	0x00033468
   1604c:	00033184 	.word	0x00033184
   16050:	000364dc 	.word	0x000364dc
   16054:	00031df4 	.word	0x00031df4
   16058:	00033218 	.word	0x00033218
   1605c:	20003ff8 	.word	0x20003ff8
   16060:	e000ed90 	.word	0xe000ed90
   16064:	0003324c 	.word	0x0003324c
   16068:	0003329c 	.word	0x0003329c

0001606c <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   1606c:	4b0d      	ldr	r3, [pc, #52]	; (160a4 <malloc_prepare+0x38>)
   1606e:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   16072:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   16076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1607a:	d301      	bcc.n	16080 <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   1607c:	2000      	movs	r0, #0
   1607e:	4770      	bx	lr
{
   16080:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   16082:	4c09      	ldr	r4, [pc, #36]	; (160a8 <malloc_prepare+0x3c>)
   16084:	2381      	movs	r3, #129	; 0x81
   16086:	4622      	mov	r2, r4
   16088:	4908      	ldr	r1, [pc, #32]	; (160ac <malloc_prepare+0x40>)
   1608a:	4809      	ldr	r0, [pc, #36]	; (160b0 <malloc_prepare+0x44>)
   1608c:	f016 f85c 	bl	2c148 <printk>
   16090:	4808      	ldr	r0, [pc, #32]	; (160b4 <malloc_prepare+0x48>)
   16092:	f016 f859 	bl	2c148 <printk>
   16096:	2181      	movs	r1, #129	; 0x81
   16098:	4620      	mov	r0, r4
   1609a:	f016 fa5a 	bl	2c552 <assert_post_action>
}
   1609e:	2000      	movs	r0, #0
   160a0:	bd10      	pop	{r4, pc}
   160a2:	bf00      	nop
   160a4:	20008810 	.word	0x20008810
   160a8:	000332c0 	.word	0x000332c0
   160ac:	000332f0 	.word	0x000332f0
   160b0:	00031df4 	.word	0x00031df4
   160b4:	00033338 	.word	0x00033338

000160b8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   160b8:	4b01      	ldr	r3, [pc, #4]	; (160c0 <__stdout_hook_install+0x8>)
   160ba:	6018      	str	r0, [r3, #0]
}
   160bc:	4770      	bx	lr
   160be:	bf00      	nop
   160c0:	200005ac 	.word	0x200005ac

000160c4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   160c4:	b570      	push	{r4, r5, r6, lr}
   160c6:	4606      	mov	r6, r0
   160c8:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   160ca:	2400      	movs	r4, #0
   160cc:	e000      	b.n	160d0 <z_impl_zephyr_read_stdin+0xc>
   160ce:	3401      	adds	r4, #1
   160d0:	42ac      	cmp	r4, r5
   160d2:	da08      	bge.n	160e6 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
   160d4:	4b05      	ldr	r3, [pc, #20]	; (160ec <z_impl_zephyr_read_stdin+0x28>)
   160d6:	681b      	ldr	r3, [r3, #0]
   160d8:	4798      	blx	r3
   160da:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   160dc:	280a      	cmp	r0, #10
   160de:	d001      	beq.n	160e4 <z_impl_zephyr_read_stdin+0x20>
   160e0:	280d      	cmp	r0, #13
   160e2:	d1f4      	bne.n	160ce <z_impl_zephyr_read_stdin+0xa>
			i++;
   160e4:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
   160e6:	4620      	mov	r0, r4
   160e8:	bd70      	pop	{r4, r5, r6, pc}
   160ea:	bf00      	nop
   160ec:	200005a8 	.word	0x200005a8

000160f0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   160f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160f2:	4605      	mov	r5, r0
   160f4:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   160f6:	2400      	movs	r4, #0
   160f8:	e004      	b.n	16104 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
   160fa:	4b09      	ldr	r3, [pc, #36]	; (16120 <z_impl_zephyr_write_stdout+0x30>)
   160fc:	681b      	ldr	r3, [r3, #0]
   160fe:	7830      	ldrb	r0, [r6, #0]
   16100:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   16102:	3401      	adds	r4, #1
   16104:	42bc      	cmp	r4, r7
   16106:	da08      	bge.n	1611a <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
   16108:	192e      	adds	r6, r5, r4
   1610a:	5d2b      	ldrb	r3, [r5, r4]
   1610c:	2b0a      	cmp	r3, #10
   1610e:	d1f4      	bne.n	160fa <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
   16110:	4b03      	ldr	r3, [pc, #12]	; (16120 <z_impl_zephyr_write_stdout+0x30>)
   16112:	681b      	ldr	r3, [r3, #0]
   16114:	200d      	movs	r0, #13
   16116:	4798      	blx	r3
   16118:	e7ef      	b.n	160fa <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
   1611a:	4638      	mov	r0, r7
   1611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1611e:	bf00      	nop
   16120:	200005ac 	.word	0x200005ac

00016124 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   16124:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   16126:	4b08      	ldr	r3, [pc, #32]	; (16148 <_sbrk+0x24>)
   16128:	6819      	ldr	r1, [r3, #0]
   1612a:	4b08      	ldr	r3, [pc, #32]	; (1614c <_sbrk+0x28>)
   1612c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1612e:	440a      	add	r2, r1
   16130:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   16134:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   16138:	429a      	cmp	r2, r3
   1613a:	d202      	bcs.n	16142 <_sbrk+0x1e>
		heap_sz += count;
   1613c:	4b02      	ldr	r3, [pc, #8]	; (16148 <_sbrk+0x24>)
   1613e:	601a      	str	r2, [r3, #0]
		ret = ptr;
   16140:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   16142:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
   16146:	4770      	bx	lr
   16148:	20002d14 	.word	0x20002d14
   1614c:	20008810 	.word	0x20008810

00016150 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   16150:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
   16152:	4604      	mov	r4, r0
   16154:	b140      	cbz	r0, 16168 <__retarget_lock_init_recursive+0x18>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   16156:	2014      	movs	r0, #20
   16158:	f014 fd92 	bl	2ac80 <malloc>
   1615c:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   1615e:	b188      	cbz	r0, 16184 <__retarget_lock_init_recursive+0x34>

	k_mutex_init((struct k_mutex *)*lock);
   16160:	6820      	ldr	r0, [r4, #0]
   16162:	f01a f9e5 	bl	30530 <z_impl_k_mutex_init>
}
   16166:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
   16168:	4d0f      	ldr	r5, [pc, #60]	; (161a8 <__retarget_lock_init_recursive+0x58>)
   1616a:	f240 1377 	movw	r3, #375	; 0x177
   1616e:	462a      	mov	r2, r5
   16170:	490e      	ldr	r1, [pc, #56]	; (161ac <__retarget_lock_init_recursive+0x5c>)
   16172:	480f      	ldr	r0, [pc, #60]	; (161b0 <__retarget_lock_init_recursive+0x60>)
   16174:	f015 ffe8 	bl	2c148 <printk>
   16178:	f240 1177 	movw	r1, #375	; 0x177
   1617c:	4628      	mov	r0, r5
   1617e:	f016 f9e8 	bl	2c552 <assert_post_action>
   16182:	e7e8      	b.n	16156 <__retarget_lock_init_recursive+0x6>
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   16184:	4d08      	ldr	r5, [pc, #32]	; (161a8 <__retarget_lock_init_recursive+0x58>)
   16186:	f240 137f 	movw	r3, #383	; 0x17f
   1618a:	462a      	mov	r2, r5
   1618c:	4909      	ldr	r1, [pc, #36]	; (161b4 <__retarget_lock_init_recursive+0x64>)
   1618e:	4808      	ldr	r0, [pc, #32]	; (161b0 <__retarget_lock_init_recursive+0x60>)
   16190:	f015 ffda 	bl	2c148 <printk>
   16194:	4808      	ldr	r0, [pc, #32]	; (161b8 <__retarget_lock_init_recursive+0x68>)
   16196:	f015 ffd7 	bl	2c148 <printk>
   1619a:	f240 117f 	movw	r1, #383	; 0x17f
   1619e:	4628      	mov	r0, r5
   161a0:	f016 f9d7 	bl	2c552 <assert_post_action>
   161a4:	e7dc      	b.n	16160 <__retarget_lock_init_recursive+0x10>
   161a6:	bf00      	nop
   161a8:	000332c0 	.word	0x000332c0
   161ac:	000333c0 	.word	0x000333c0
   161b0:	00031df4 	.word	0x00031df4
   161b4:	000333d4 	.word	0x000333d4
   161b8:	00033414 	.word	0x00033414

000161bc <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   161bc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
   161be:	4604      	mov	r4, r0
   161c0:	b138      	cbz	r0, 161d2 <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
   161c2:	f04f 32ff 	mov.w	r2, #4294967295
   161c6:	f04f 33ff 	mov.w	r3, #4294967295
   161ca:	4620      	mov	r0, r4
   161cc:	f00d fef6 	bl	23fbc <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   161d0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
   161d2:	4d07      	ldr	r5, [pc, #28]	; (161f0 <__retarget_lock_acquire_recursive+0x34>)
   161d4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   161d8:	462a      	mov	r2, r5
   161da:	4906      	ldr	r1, [pc, #24]	; (161f4 <__retarget_lock_acquire_recursive+0x38>)
   161dc:	4806      	ldr	r0, [pc, #24]	; (161f8 <__retarget_lock_acquire_recursive+0x3c>)
   161de:	f015 ffb3 	bl	2c148 <printk>
   161e2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   161e6:	4628      	mov	r0, r5
   161e8:	f016 f9b3 	bl	2c552 <assert_post_action>
   161ec:	e7e9      	b.n	161c2 <__retarget_lock_acquire_recursive+0x6>
   161ee:	bf00      	nop
   161f0:	000332c0 	.word	0x000332c0
   161f4:	000333c0 	.word	0x000333c0
   161f8:	00031df4 	.word	0x00031df4

000161fc <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   161fc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
   161fe:	4604      	mov	r4, r0
   16200:	b118      	cbz	r0, 1620a <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
   16202:	4620      	mov	r0, r4
   16204:	f00d fffa 	bl	241fc <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
   16208:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
   1620a:	4d07      	ldr	r5, [pc, #28]	; (16228 <__retarget_lock_release_recursive+0x2c>)
   1620c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   16210:	462a      	mov	r2, r5
   16212:	4906      	ldr	r1, [pc, #24]	; (1622c <__retarget_lock_release_recursive+0x30>)
   16214:	4806      	ldr	r0, [pc, #24]	; (16230 <__retarget_lock_release_recursive+0x34>)
   16216:	f015 ff97 	bl	2c148 <printk>
   1621a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1621e:	4628      	mov	r0, r5
   16220:	f016 f997 	bl	2c552 <assert_post_action>
   16224:	e7ed      	b.n	16202 <__retarget_lock_release_recursive+0x6>
   16226:	bf00      	nop
   16228:	000332c0 	.word	0x000332c0
   1622c:	000333c0 	.word	0x000333c0
   16230:	00031df4 	.word	0x00031df4

00016234 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   16234:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
   16236:	221d      	movs	r2, #29
   16238:	4904      	ldr	r1, [pc, #16]	; (1624c <__chk_fail+0x18>)
   1623a:	2002      	movs	r0, #2
   1623c:	f016 fe86 	bl	2cf4c <_write>
	k_oops();
   16240:	4040      	eors	r0, r0
   16242:	f380 8811 	msr	BASEPRI, r0
   16246:	f04f 0003 	mov.w	r0, #3
   1624a:	df02      	svc	2
	CODE_UNREACHABLE;
   1624c:	00033438 	.word	0x00033438

00016250 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16250:	4b06      	ldr	r3, [pc, #24]	; (1626c <nrf52_errata_197+0x1c>)
   16252:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   16254:	4a06      	ldr	r2, [pc, #24]	; (16270 <nrf52_errata_197+0x20>)
   16256:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   16258:	2b08      	cmp	r3, #8
   1625a:	d001      	beq.n	16260 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1625c:	2000      	movs	r0, #0
   1625e:	4770      	bx	lr
                switch(var2)
   16260:	2a02      	cmp	r2, #2
   16262:	d001      	beq.n	16268 <nrf52_errata_197+0x18>
                        return false;
   16264:	2000      	movs	r0, #0
   16266:	4770      	bx	lr
                        return true;
   16268:	2001      	movs	r0, #1
    #endif
}
   1626a:	4770      	bx	lr
   1626c:	10000130 	.word	0x10000130
   16270:	10000134 	.word	0x10000134

00016274 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   16274:	b510      	push	{r4, lr}
	__asm__ volatile(
   16276:	f04f 0340 	mov.w	r3, #64	; 0x40
   1627a:	f3ef 8411 	mrs	r4, BASEPRI
   1627e:	f383 8812 	msr	BASEPRI_MAX, r3
   16282:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   16286:	2301      	movs	r3, #1
   16288:	4a0b      	ldr	r2, [pc, #44]	; (162b8 <nordicsemi_nrf52_init+0x44>)
   1628a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1628e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16292:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   16296:	f7ff ffdb 	bl	16250 <nrf52_errata_197>
   1629a:	b110      	cbz	r0, 162a2 <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1629c:	4b07      	ldr	r3, [pc, #28]	; (162bc <nordicsemi_nrf52_init+0x48>)
   1629e:	2201      	movs	r2, #1
   162a0:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   162a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   162a6:	2201      	movs	r2, #1
   162a8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   162ac:	f384 8811 	msr	BASEPRI, r4
   162b0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   162b4:	2000      	movs	r0, #0
   162b6:	bd10      	pop	{r4, pc}
   162b8:	4001e000 	.word	0x4001e000
   162bc:	40000638 	.word	0x40000638

000162c0 <sys_arch_reboot>:
    *p_gpregret = val;
   162c0:	b2c0      	uxtb	r0, r0
   162c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   162c6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   162ca:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   162ce:	4905      	ldr	r1, [pc, #20]	; (162e4 <sys_arch_reboot+0x24>)
   162d0:	68ca      	ldr	r2, [r1, #12]
   162d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   162d6:	4b04      	ldr	r3, [pc, #16]	; (162e8 <sys_arch_reboot+0x28>)
   162d8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   162da:	60cb      	str	r3, [r1, #12]
   162dc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   162e0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   162e2:	e7fd      	b.n	162e0 <sys_arch_reboot+0x20>
   162e4:	e000ed00 	.word	0xe000ed00
   162e8:	05fa0004 	.word	0x05fa0004

000162ec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   162ec:	b130      	cbz	r0, 162fc <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   162ee:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   162f0:	0180      	lsls	r0, r0, #6
   162f2:	4b03      	ldr	r3, [pc, #12]	; (16300 <arch_busy_wait+0x14>)
   162f4:	f043 0301 	orr.w	r3, r3, #1
   162f8:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   162fa:	bd08      	pop	{r3, pc}
   162fc:	4770      	bx	lr
   162fe:	bf00      	nop
   16300:	00031b00 	.word	0x00031b00

00016304 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   16304:	2940      	cmp	r1, #64	; 0x40
   16306:	bf28      	it	cs
   16308:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   1630a:	2300      	movs	r3, #0
   1630c:	428b      	cmp	r3, r1
   1630e:	d217      	bcs.n	16340 <bt_hex_real+0x3c>
{
   16310:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   16312:	5cc4      	ldrb	r4, [r0, r3]
   16314:	0924      	lsrs	r4, r4, #4
   16316:	005a      	lsls	r2, r3, #1
   16318:	4e0c      	ldr	r6, [pc, #48]	; (1634c <bt_hex_real+0x48>)
   1631a:	5d34      	ldrb	r4, [r6, r4]
   1631c:	4d0c      	ldr	r5, [pc, #48]	; (16350 <bt_hex_real+0x4c>)
   1631e:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   16322:	5cc4      	ldrb	r4, [r0, r3]
   16324:	f004 040f 	and.w	r4, r4, #15
   16328:	3201      	adds	r2, #1
   1632a:	5d34      	ldrb	r4, [r6, r4]
   1632c:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   1632e:	3301      	adds	r3, #1
   16330:	428b      	cmp	r3, r1
   16332:	d3ee      	bcc.n	16312 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   16334:	4806      	ldr	r0, [pc, #24]	; (16350 <bt_hex_real+0x4c>)
   16336:	2200      	movs	r2, #0
   16338:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   1633c:	bc70      	pop	{r4, r5, r6}
   1633e:	4770      	bx	lr
	str[i * 2] = '\0';
   16340:	4803      	ldr	r0, [pc, #12]	; (16350 <bt_hex_real+0x4c>)
   16342:	2200      	movs	r2, #0
   16344:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   16348:	4770      	bx	lr
   1634a:	bf00      	nop
   1634c:	000334d8 	.word	0x000334d8
   16350:	20002d18 	.word	0x20002d18

00016354 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   16354:	b5f0      	push	{r4, r5, r6, r7, lr}
   16356:	b08b      	sub	sp, #44	; 0x2c
   16358:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1635a:	7803      	ldrb	r3, [r0, #0]
   1635c:	2b03      	cmp	r3, #3
   1635e:	d838      	bhi.n	163d2 <bt_addr_le_str_real+0x7e>
   16360:	e8df f003 	tbb	[pc, r3]
   16364:	312b2102 	.word	0x312b2102
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   16368:	4b1d      	ldr	r3, [pc, #116]	; (163e0 <bt_addr_le_str_real+0x8c>)
   1636a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1636e:	9007      	str	r0, [sp, #28]
   16370:	f8ad 1020 	strh.w	r1, [sp, #32]
   16374:	0c09      	lsrs	r1, r1, #16
   16376:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1637a:	7963      	ldrb	r3, [r4, #5]
   1637c:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   1637e:	78e1      	ldrb	r1, [r4, #3]
   16380:	78a0      	ldrb	r0, [r4, #2]
   16382:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   16384:	4d17      	ldr	r5, [pc, #92]	; (163e4 <bt_addr_le_str_real+0x90>)
   16386:	af07      	add	r7, sp, #28
   16388:	9705      	str	r7, [sp, #20]
   1638a:	9604      	str	r6, [sp, #16]
   1638c:	9003      	str	r0, [sp, #12]
   1638e:	9102      	str	r1, [sp, #8]
   16390:	9201      	str	r2, [sp, #4]
   16392:	9300      	str	r3, [sp, #0]
   16394:	79a3      	ldrb	r3, [r4, #6]
   16396:	4a14      	ldr	r2, [pc, #80]	; (163e8 <bt_addr_le_str_real+0x94>)
   16398:	211e      	movs	r1, #30
   1639a:	4628      	mov	r0, r5
   1639c:	f015 fee2 	bl	2c164 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   163a0:	4628      	mov	r0, r5
   163a2:	b00b      	add	sp, #44	; 0x2c
   163a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   163a6:	4b11      	ldr	r3, [pc, #68]	; (163ec <bt_addr_le_str_real+0x98>)
   163a8:	e893 0003 	ldmia.w	r3, {r0, r1}
   163ac:	9007      	str	r0, [sp, #28]
   163ae:	f8ad 1020 	strh.w	r1, [sp, #32]
   163b2:	0c09      	lsrs	r1, r1, #16
   163b4:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   163b8:	e7df      	b.n	1637a <bt_addr_le_str_real+0x26>
		strcpy(type, "public-id");
   163ba:	4a0d      	ldr	r2, [pc, #52]	; (163f0 <bt_addr_le_str_real+0x9c>)
   163bc:	ab07      	add	r3, sp, #28
   163be:	ca07      	ldmia	r2, {r0, r1, r2}
   163c0:	c303      	stmia	r3!, {r0, r1}
   163c2:	801a      	strh	r2, [r3, #0]
		break;
   163c4:	e7d9      	b.n	1637a <bt_addr_le_str_real+0x26>
		strcpy(type, "random-id");
   163c6:	4a0b      	ldr	r2, [pc, #44]	; (163f4 <bt_addr_le_str_real+0xa0>)
   163c8:	ab07      	add	r3, sp, #28
   163ca:	ca07      	ldmia	r2, {r0, r1, r2}
   163cc:	c303      	stmia	r3!, {r0, r1}
   163ce:	801a      	strh	r2, [r3, #0]
		break;
   163d0:	e7d3      	b.n	1637a <bt_addr_le_str_real+0x26>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   163d2:	4a09      	ldr	r2, [pc, #36]	; (163f8 <bt_addr_le_str_real+0xa4>)
   163d4:	210a      	movs	r1, #10
   163d6:	a807      	add	r0, sp, #28
   163d8:	f015 fec4 	bl	2c164 <snprintk>
		break;
   163dc:	e7cd      	b.n	1637a <bt_addr_le_str_real+0x26>
   163de:	bf00      	nop
   163e0:	0003348c 	.word	0x0003348c
   163e4:	20002d9c 	.word	0x20002d9c
   163e8:	0003349c 	.word	0x0003349c
   163ec:	00033494 	.word	0x00033494
   163f0:	000334c0 	.word	0x000334c0
   163f4:	000334cc 	.word	0x000334cc
   163f8:	000345a0 	.word	0x000345a0

000163fc <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   163fc:	b470      	push	{r4, r5, r6}
   163fe:	4605      	mov	r5, r0
   16400:	460c      	mov	r4, r1
	switch (src->type) {
   16402:	7803      	ldrb	r3, [r0, #0]
   16404:	2b01      	cmp	r3, #1
   16406:	d011      	beq.n	1642c <uuid_to_uuid128+0x30>
   16408:	2b02      	cmp	r3, #2
   1640a:	d021      	beq.n	16450 <uuid_to_uuid128+0x54>
   1640c:	b10b      	cbz	r3, 16412 <uuid_to_uuid128+0x16>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1640e:	bc70      	pop	{r4, r5, r6}
   16410:	4770      	bx	lr
		*dst = uuid128_base;
   16412:	4e15      	ldr	r6, [pc, #84]	; (16468 <uuid_to_uuid128+0x6c>)
   16414:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16416:	6020      	str	r0, [r4, #0]
   16418:	6061      	str	r1, [r4, #4]
   1641a:	60a2      	str	r2, [r4, #8]
   1641c:	60e3      	str	r3, [r4, #12]
   1641e:	7833      	ldrb	r3, [r6, #0]
   16420:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   16422:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   16424:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   16426:	0a1b      	lsrs	r3, r3, #8
   16428:	73a3      	strb	r3, [r4, #14]
}
   1642a:	e7f0      	b.n	1640e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   1642c:	4e0e      	ldr	r6, [pc, #56]	; (16468 <uuid_to_uuid128+0x6c>)
   1642e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16430:	6020      	str	r0, [r4, #0]
   16432:	6061      	str	r1, [r4, #4]
   16434:	60a2      	str	r2, [r4, #8]
   16436:	60e3      	str	r3, [r4, #12]
   16438:	7833      	ldrb	r3, [r6, #0]
   1643a:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   1643c:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   1643e:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   16440:	f3c3 2207 	ubfx	r2, r3, #8, #8
   16444:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   16446:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   16448:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   1644a:	0e1b      	lsrs	r3, r3, #24
   1644c:	7423      	strb	r3, [r4, #16]
}
   1644e:	e7de      	b.n	1640e <uuid_to_uuid128+0x12>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16450:	6800      	ldr	r0, [r0, #0]
   16452:	6869      	ldr	r1, [r5, #4]
   16454:	68aa      	ldr	r2, [r5, #8]
   16456:	68eb      	ldr	r3, [r5, #12]
   16458:	6020      	str	r0, [r4, #0]
   1645a:	6061      	str	r1, [r4, #4]
   1645c:	60a2      	str	r2, [r4, #8]
   1645e:	60e3      	str	r3, [r4, #12]
   16460:	7c2b      	ldrb	r3, [r5, #16]
   16462:	7423      	strb	r3, [r4, #16]
   16464:	e7d3      	b.n	1640e <uuid_to_uuid128+0x12>
   16466:	bf00      	nop
   16468:	000334f4 	.word	0x000334f4

0001646c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1646e:	4604      	mov	r4, r0
   16470:	4616      	mov	r6, r2
   16472:	461d      	mov	r5, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   16474:	2801      	cmp	r0, #1
   16476:	d003      	beq.n	16480 <bt_buf_get_rx+0x14>
   16478:	2803      	cmp	r0, #3
   1647a:	d001      	beq.n	16480 <bt_buf_get_rx+0x14>
   1647c:	2805      	cmp	r0, #5
   1647e:	d10d      	bne.n	1649c <bt_buf_get_rx+0x30>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   16480:	4632      	mov	r2, r6
   16482:	462b      	mov	r3, r5
   16484:	480d      	ldr	r0, [pc, #52]	; (164bc <bt_buf_get_rx+0x50>)
   16486:	f018 fcf3 	bl	2ee70 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1648a:	4605      	mov	r5, r0
   1648c:	b120      	cbz	r0, 16498 <bt_buf_get_rx+0x2c>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   1648e:	2100      	movs	r1, #0
   16490:	3008      	adds	r0, #8
   16492:	f006 f981 	bl	1c798 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16496:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   16498:	4628      	mov	r0, r5
   1649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1649c:	4f08      	ldr	r7, [pc, #32]	; (164c0 <bt_buf_get_rx+0x54>)
   1649e:	2341      	movs	r3, #65	; 0x41
   164a0:	463a      	mov	r2, r7
   164a2:	4908      	ldr	r1, [pc, #32]	; (164c4 <bt_buf_get_rx+0x58>)
   164a4:	4808      	ldr	r0, [pc, #32]	; (164c8 <bt_buf_get_rx+0x5c>)
   164a6:	f015 fe4f 	bl	2c148 <printk>
   164aa:	4808      	ldr	r0, [pc, #32]	; (164cc <bt_buf_get_rx+0x60>)
   164ac:	f015 fe4c 	bl	2c148 <printk>
   164b0:	2141      	movs	r1, #65	; 0x41
   164b2:	4638      	mov	r0, r7
   164b4:	f016 f84d 	bl	2c552 <assert_post_action>
   164b8:	e7e2      	b.n	16480 <bt_buf_get_rx+0x14>
   164ba:	bf00      	nop
   164bc:	20000da8 	.word	0x20000da8
   164c0:	00033508 	.word	0x00033508
   164c4:	00033538 	.word	0x00033538
   164c8:	00031df4 	.word	0x00031df4
   164cc:	00033580 	.word	0x00033580

000164d0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   164d0:	b510      	push	{r4, lr}
   164d2:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   164d4:	4b0a      	ldr	r3, [pc, #40]	; (16500 <bt_buf_get_cmd_complete+0x30>)
   164d6:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   164da:	b158      	cbz	r0, 164f4 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   164dc:	f006 f9fc 	bl	1c8d8 <net_buf_ref>
   164e0:	4604      	mov	r4, r0
   164e2:	2301      	movs	r3, #1
   164e4:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   164e6:	2100      	movs	r1, #0
   164e8:	8181      	strh	r1, [r0, #12]
   164ea:	3008      	adds	r0, #8
   164ec:	f006 f954 	bl	1c798 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   164f0:	4620      	mov	r0, r4
   164f2:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   164f4:	460b      	mov	r3, r1
   164f6:	2001      	movs	r0, #1
   164f8:	f7ff ffb8 	bl	1646c <bt_buf_get_rx>
   164fc:	4604      	mov	r4, r0
   164fe:	e7f7      	b.n	164f0 <bt_buf_get_cmd_complete+0x20>
   16500:	200002b0 	.word	0x200002b0

00016504 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16504:	b510      	push	{r4, lr}
	switch (evt) {
   16506:	280f      	cmp	r0, #15
   16508:	d90d      	bls.n	16526 <bt_buf_get_evt+0x22>
   1650a:	2813      	cmp	r0, #19
   1650c:	d10d      	bne.n	1652a <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   1650e:	4814      	ldr	r0, [pc, #80]	; (16560 <bt_buf_get_evt+0x5c>)
   16510:	f018 fcae 	bl	2ee70 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   16514:	4604      	mov	r4, r0
   16516:	b198      	cbz	r0, 16540 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16518:	2100      	movs	r1, #0
   1651a:	3008      	adds	r0, #8
   1651c:	f006 f93c 	bl	1c798 <net_buf_simple_reserve>
   16520:	2301      	movs	r3, #1
   16522:	7523      	strb	r3, [r4, #20]
}
   16524:	e00c      	b.n	16540 <bt_buf_get_evt+0x3c>
	switch (evt) {
   16526:	280e      	cmp	r0, #14
   16528:	d205      	bcs.n	16536 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   1652a:	b959      	cbnz	r1, 16544 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1652c:	2001      	movs	r0, #1
   1652e:	f7ff ff9d 	bl	1646c <bt_buf_get_rx>
   16532:	4604      	mov	r4, r0
   16534:	e004      	b.n	16540 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   16536:	4610      	mov	r0, r2
   16538:	4619      	mov	r1, r3
   1653a:	f7ff ffc9 	bl	164d0 <bt_buf_get_cmd_complete>
   1653e:	4604      	mov	r4, r0
	}
}
   16540:	4620      	mov	r0, r4
   16542:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   16544:	4807      	ldr	r0, [pc, #28]	; (16564 <bt_buf_get_evt+0x60>)
   16546:	f018 fc93 	bl	2ee70 <net_buf_alloc_fixed>
			if (buf) {
   1654a:	4604      	mov	r4, r0
   1654c:	2800      	cmp	r0, #0
   1654e:	d0f7      	beq.n	16540 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16550:	2100      	movs	r1, #0
   16552:	3008      	adds	r0, #8
   16554:	f006 f920 	bl	1c798 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16558:	2301      	movs	r3, #1
   1655a:	7523      	strb	r3, [r4, #20]
			return buf;
   1655c:	e7f0      	b.n	16540 <bt_buf_get_evt+0x3c>
   1655e:	bf00      	nop
   16560:	20000ddc 	.word	0x20000ddc
   16564:	20000d0c 	.word	0x20000d0c

00016568 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16568:	2300      	movs	r3, #0
   1656a:	2b00      	cmp	r3, #0
   1656c:	dd00      	ble.n	16570 <conn_handle_disconnected+0x8>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   1656e:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   16570:	4a05      	ldr	r2, [pc, #20]	; (16588 <conn_handle_disconnected+0x20>)
   16572:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16576:	b922      	cbnz	r2, 16582 <conn_handle_disconnected+0x1a>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   16578:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   1657c:	4902      	ldr	r1, [pc, #8]	; (16588 <conn_handle_disconnected+0x20>)
   1657e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16582:	3301      	adds	r3, #1
   16584:	e7f1      	b.n	1656a <conn_handle_disconnected+0x2>
   16586:	bf00      	nop
   16588:	20002dd4 	.word	0x20002dd4

0001658c <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   1658c:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16590:	2300      	movs	r3, #0
   16592:	2b00      	cmp	r3, #0
   16594:	dd01      	ble.n	1659a <conn_handle_is_disconnected+0xe>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   16596:	2000      	movs	r0, #0
}
   16598:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   1659a:	4a06      	ldr	r2, [pc, #24]	; (165b4 <conn_handle_is_disconnected+0x28>)
   1659c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   165a0:	4282      	cmp	r2, r0
   165a2:	d001      	beq.n	165a8 <conn_handle_is_disconnected+0x1c>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   165a4:	3301      	adds	r3, #1
   165a6:	e7f4      	b.n	16592 <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   165a8:	4a02      	ldr	r2, [pc, #8]	; (165b4 <conn_handle_is_disconnected+0x28>)
   165aa:	2100      	movs	r1, #0
   165ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   165b0:	2001      	movs	r0, #1
   165b2:	4770      	bx	lr
   165b4:	20002dd4 	.word	0x20002dd4

000165b8 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   165b8:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   165ba:	7851      	ldrb	r1, [r2, #1]
   165bc:	4b08      	ldr	r3, [pc, #32]	; (165e0 <read_local_ver_complete+0x28>)
   165be:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   165c2:	8851      	ldrh	r1, [r2, #2]
   165c4:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   165c8:	7911      	ldrb	r1, [r2, #4]
   165ca:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   165ce:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   165d2:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   165d6:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   165da:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   165de:	4770      	bx	lr
   165e0:	200002b0 	.word	0x200002b0

000165e4 <read_le_features_complete>:
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   165e4:	4b03      	ldr	r3, [pc, #12]	; (165f4 <read_le_features_complete+0x10>)
   165e6:	6882      	ldr	r2, [r0, #8]
   165e8:	f852 0f01 	ldr.w	r0, [r2, #1]!
   165ec:	6851      	ldr	r1, [r2, #4]
   165ee:	c303      	stmia	r3!, {r0, r1}
}
   165f0:	4770      	bx	lr
   165f2:	bf00      	nop
   165f4:	20000380 	.word	0x20000380

000165f8 <read_supported_commands_complete>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_FEATURE, buf, NULL);
}

static void read_supported_commands_complete(struct net_buf *buf)
{
   165f8:	b4f0      	push	{r4, r5, r6, r7}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   165fa:	6886      	ldr	r6, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
   165fc:	1c74      	adds	r4, r6, #1
   165fe:	4f07      	ldr	r7, [pc, #28]	; (1661c <read_supported_commands_complete+0x24>)
   16600:	3641      	adds	r6, #65	; 0x41
   16602:	463d      	mov	r5, r7
   16604:	6820      	ldr	r0, [r4, #0]
   16606:	6861      	ldr	r1, [r4, #4]
   16608:	68a2      	ldr	r2, [r4, #8]
   1660a:	68e3      	ldr	r3, [r4, #12]
   1660c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1660e:	3410      	adds	r4, #16
   16610:	462f      	mov	r7, r5
   16612:	42b4      	cmp	r4, r6
   16614:	d1f5      	bne.n	16602 <read_supported_commands_complete+0xa>
	 * supported if TinyCrypt ECC is used for emulation.
	 */
	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
	}
}
   16616:	bcf0      	pop	{r4, r5, r6, r7}
   16618:	4770      	bx	lr
   1661a:	bf00      	nop
   1661c:	20000328 	.word	0x20000328

00016620 <read_local_features_complete>:
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   16620:	4b03      	ldr	r3, [pc, #12]	; (16630 <read_local_features_complete+0x10>)
   16622:	6882      	ldr	r2, [r0, #8]
   16624:	f852 0f01 	ldr.w	r0, [r2, #1]!
   16628:	6851      	ldr	r1, [r2, #4]
   1662a:	c303      	stmia	r3!, {r0, r1}
}
   1662c:	4770      	bx	lr
   1662e:	bf00      	nop
   16630:	20000320 	.word	0x20000320

00016634 <le_read_supp_states_complete>:

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   16634:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   16636:	7a19      	ldrb	r1, [r3, #8]
   16638:	79da      	ldrb	r2, [r3, #7]
   1663a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   1663e:	7998      	ldrb	r0, [r3, #6]
   16640:	795a      	ldrb	r2, [r3, #5]
   16642:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   16646:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   1664a:	7918      	ldrb	r0, [r3, #4]
   1664c:	78d9      	ldrb	r1, [r3, #3]
   1664e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   16652:	7898      	ldrb	r0, [r3, #2]
   16654:	785b      	ldrb	r3, [r3, #1]
   16656:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1665a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   1665e:	4903      	ldr	r1, [pc, #12]	; (1666c <le_read_supp_states_complete+0x38>)
   16660:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   16664:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   16668:	4770      	bx	lr
   1666a:	bf00      	nop
   1666c:	200002b0 	.word	0x200002b0

00016670 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   16670:	6883      	ldr	r3, [r0, #8]
   16672:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   16674:	b993      	cbnz	r3, 1669c <hci_reset_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16676:	f3bf 8f5b 	dmb	ish
   1667a:	4b09      	ldr	r3, [pc, #36]	; (166a0 <hci_reset_complete+0x30>)
   1667c:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   16680:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   16684:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16688:	f3bf 8f5b 	dmb	ish
   1668c:	e853 1f00 	ldrex	r1, [r3]
   16690:	e843 2000 	strex	r0, r2, [r3]
   16694:	2800      	cmp	r0, #0
   16696:	d1f9      	bne.n	1668c <hci_reset_complete+0x1c>
   16698:	f3bf 8f5b 	dmb	ish
}
   1669c:	4770      	bx	lr
   1669e:	bf00      	nop
   166a0:	200002b0 	.word	0x200002b0

000166a4 <le_read_buffer_size_complete>:
{
   166a4:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   166a6:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   166a8:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   166ac:	b299      	uxth	r1, r3
   166ae:	4806      	ldr	r0, [pc, #24]	; (166c8 <le_read_buffer_size_complete+0x24>)
   166b0:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   166b4:	b901      	cbnz	r1, 166b8 <le_read_buffer_size_complete+0x14>
}
   166b6:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   166b8:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   166ba:	460a      	mov	r2, r1
   166bc:	f500 7080 	add.w	r0, r0, #256	; 0x100
   166c0:	f019 ff78 	bl	305b4 <z_impl_k_sem_init>
   166c4:	e7f7      	b.n	166b6 <le_read_buffer_size_complete+0x12>
   166c6:	bf00      	nop
   166c8:	200002b0 	.word	0x200002b0

000166cc <read_buffer_size_complete>:
{
   166cc:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   166ce:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   166d0:	4b08      	ldr	r3, [pc, #32]	; (166f4 <read_buffer_size_complete+0x28>)
   166d2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   166d6:	b103      	cbz	r3, 166da <read_buffer_size_complete+0xe>
}
   166d8:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   166da:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   166de:	4805      	ldr	r0, [pc, #20]	; (166f4 <read_buffer_size_complete+0x28>)
   166e0:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   166e4:	8891      	ldrh	r1, [r2, #4]
   166e6:	460a      	mov	r2, r1
   166e8:	f500 7080 	add.w	r0, r0, #256	; 0x100
   166ec:	f019 ff62 	bl	305b4 <z_impl_k_sem_init>
   166f0:	e7f2      	b.n	166d8 <read_buffer_size_complete+0xc>
   166f2:	bf00      	nop
   166f4:	200002b0 	.word	0x200002b0

000166f8 <hci_data_buf_overflow>:
{
   166f8:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   166fa:	6881      	ldr	r1, [r0, #8]
   166fc:	4b08      	ldr	r3, [pc, #32]	; (16720 <hci_data_buf_overflow+0x28>)
   166fe:	4a09      	ldr	r2, [pc, #36]	; (16724 <hci_data_buf_overflow+0x2c>)
   16700:	1a9b      	subs	r3, r3, r2
   16702:	08db      	lsrs	r3, r3, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16704:	f04f 0200 	mov.w	r2, #0
   16708:	2002      	movs	r0, #2
   1670a:	f360 0202 	bfi	r2, r0, #0, #3
   1670e:	f36f 02c5 	bfc	r2, #3, #3
   16712:	f363 128f 	bfi	r2, r3, #6, #10
   16716:	7809      	ldrb	r1, [r1, #0]
   16718:	4803      	ldr	r0, [pc, #12]	; (16728 <hci_data_buf_overflow+0x30>)
   1671a:	f7fd f8f1 	bl	13900 <log_1>
}
   1671e:	bd08      	pop	{r3, pc}
   16720:	00031938 	.word	0x00031938
   16724:	00031908 	.word	0x00031908
   16728:	000335d8 	.word	0x000335d8

0001672c <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1672c:	2801      	cmp	r0, #1
   1672e:	d001      	beq.n	16734 <find_pending_connect+0x8>
	return NULL;
   16730:	2000      	movs	r0, #0
}
   16732:	4770      	bx	lr
{
   16734:	b500      	push	{lr}
   16736:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   16738:	2205      	movs	r2, #5
   1673a:	4b0d      	ldr	r3, [pc, #52]	; (16770 <find_pending_connect+0x44>)
   1673c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   16740:	f003 f972 	bl	19a28 <bt_conn_lookup_state_le>
		if (!conn) {
   16744:	b110      	cbz	r0, 1674c <find_pending_connect+0x20>
}
   16746:	b003      	add	sp, #12
   16748:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   1674c:	4b09      	ldr	r3, [pc, #36]	; (16774 <find_pending_connect+0x48>)
   1674e:	e893 0003 	ldmia.w	r3, {r0, r1}
   16752:	9000      	str	r0, [sp, #0]
   16754:	f8ad 1004 	strh.w	r1, [sp, #4]
   16758:	0c09      	lsrs	r1, r1, #16
   1675a:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1675e:	2204      	movs	r2, #4
   16760:	4669      	mov	r1, sp
   16762:	4b03      	ldr	r3, [pc, #12]	; (16770 <find_pending_connect+0x44>)
   16764:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   16768:	f003 f95e 	bl	19a28 <bt_conn_lookup_state_le>
		return conn;
   1676c:	e7eb      	b.n	16746 <find_pending_connect+0x1a>
   1676e:	bf00      	nop
   16770:	200002b0 	.word	0x200002b0
   16774:	00031ac0 	.word	0x00031ac0

00016778 <le_conn_complete_adv_timeout>:
{
   16778:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1677a:	f002 f8c3 	bl	18904 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   1677e:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16780:	f3bf 8f5b 	dmb	ish
   16784:	e850 3f00 	ldrex	r3, [r0]
   16788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1678c:	e840 3200 	strex	r2, r3, [r0]
   16790:	2a00      	cmp	r2, #0
   16792:	d1f7      	bne.n	16784 <le_conn_complete_adv_timeout+0xc>
   16794:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   16798:	2100      	movs	r1, #0
   1679a:	2001      	movs	r0, #1
   1679c:	f7ff ffc6 	bl	1672c <find_pending_connect>
		if (!conn) {
   167a0:	4604      	mov	r4, r0
   167a2:	b140      	cbz	r0, 167b6 <le_conn_complete_adv_timeout+0x3e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   167a4:	233c      	movs	r3, #60	; 0x3c
   167a6:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   167a8:	2100      	movs	r1, #0
   167aa:	f002 fe8d 	bl	194c8 <bt_conn_set_state>
		bt_conn_unref(conn);
   167ae:	4620      	mov	r0, r4
   167b0:	f002 fe46 	bl	19440 <bt_conn_unref>
}
   167b4:	bd10      	pop	{r4, pc}
   167b6:	4b08      	ldr	r3, [pc, #32]	; (167d8 <le_conn_complete_adv_timeout+0x60>)
   167b8:	4a08      	ldr	r2, [pc, #32]	; (167dc <le_conn_complete_adv_timeout+0x64>)
   167ba:	1a9b      	subs	r3, r3, r2
   167bc:	08db      	lsrs	r3, r3, #3
			BT_ERR("No pending peripheral connection");
   167be:	f04f 0100 	mov.w	r1, #0
   167c2:	2201      	movs	r2, #1
   167c4:	f362 0102 	bfi	r1, r2, #0, #3
   167c8:	f36f 01c5 	bfc	r1, #3, #3
   167cc:	f363 118f 	bfi	r1, r3, #6, #10
   167d0:	4803      	ldr	r0, [pc, #12]	; (167e0 <le_conn_complete_adv_timeout+0x68>)
   167d2:	f7fd f865 	bl	138a0 <log_0>
			return;
   167d6:	e7ed      	b.n	167b4 <le_conn_complete_adv_timeout+0x3c>
   167d8:	00031938 	.word	0x00031938
   167dc:	00031908 	.word	0x00031908
   167e0:	00033600 	.word	0x00033600

000167e4 <hci_disconn_complete>:
{
   167e4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   167e6:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   167e8:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   167ec:	7823      	ldrb	r3, [r4, #0]
   167ee:	b103      	cbz	r3, 167f2 <hci_disconn_complete+0xe>
}
   167f0:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   167f2:	4630      	mov	r0, r6
   167f4:	f002 fe5e 	bl	194b4 <bt_conn_lookup_handle>
	if (!conn) {
   167f8:	4605      	mov	r5, r0
   167fa:	b158      	cbz	r0, 16814 <hci_disconn_complete+0x30>
	conn->err = evt->reason;
   167fc:	78e3      	ldrb	r3, [r4, #3]
   167fe:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16800:	2100      	movs	r1, #0
   16802:	f002 fe61 	bl	194c8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   16806:	78ab      	ldrb	r3, [r5, #2]
   16808:	2b01      	cmp	r3, #1
   1680a:	d015      	beq.n	16838 <hci_disconn_complete+0x54>
		bt_conn_unref(conn);
   1680c:	4628      	mov	r0, r5
   1680e:	f002 fe17 	bl	19440 <bt_conn_unref>
		return;
   16812:	e7ed      	b.n	167f0 <hci_disconn_complete+0xc>
   16814:	4b0a      	ldr	r3, [pc, #40]	; (16840 <hci_disconn_complete+0x5c>)
   16816:	4a0b      	ldr	r2, [pc, #44]	; (16844 <hci_disconn_complete+0x60>)
   16818:	1a9b      	subs	r3, r3, r2
   1681a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   1681c:	f04f 0200 	mov.w	r2, #0
   16820:	2101      	movs	r1, #1
   16822:	f361 0202 	bfi	r2, r1, #0, #3
   16826:	f36f 02c5 	bfc	r2, #3, #3
   1682a:	f363 128f 	bfi	r2, r3, #6, #10
   1682e:	4631      	mov	r1, r6
   16830:	4805      	ldr	r0, [pc, #20]	; (16848 <hci_disconn_complete+0x64>)
   16832:	f7fd f865 	bl	13900 <log_1>
		return;
   16836:	e7db      	b.n	167f0 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   16838:	4628      	mov	r0, r5
   1683a:	f002 fe01 	bl	19440 <bt_conn_unref>
   1683e:	e7d7      	b.n	167f0 <hci_disconn_complete+0xc>
   16840:	00031938 	.word	0x00031938
   16844:	00031908 	.word	0x00031908
   16848:	00033624 	.word	0x00033624

0001684c <le_data_len_change>:
{
   1684c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   1684e:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16850:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   16852:	4620      	mov	r0, r4
   16854:	f002 fe2e 	bl	194b4 <bt_conn_lookup_handle>
	if (!conn) {
   16858:	b110      	cbz	r0, 16860 <le_data_len_change+0x14>
	bt_conn_unref(conn);
   1685a:	f002 fdf1 	bl	19440 <bt_conn_unref>
}
   1685e:	bd10      	pop	{r4, pc}
   16860:	4b08      	ldr	r3, [pc, #32]	; (16884 <le_data_len_change+0x38>)
   16862:	4a09      	ldr	r2, [pc, #36]	; (16888 <le_data_len_change+0x3c>)
   16864:	1a9b      	subs	r3, r3, r2
   16866:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16868:	f04f 0200 	mov.w	r2, #0
   1686c:	2101      	movs	r1, #1
   1686e:	f361 0202 	bfi	r2, r1, #0, #3
   16872:	f36f 02c5 	bfc	r2, #3, #3
   16876:	f363 128f 	bfi	r2, r3, #6, #10
   1687a:	4621      	mov	r1, r4
   1687c:	4803      	ldr	r0, [pc, #12]	; (1688c <le_data_len_change+0x40>)
   1687e:	f7fd f83f 	bl	13900 <log_1>
		return;
   16882:	e7ec      	b.n	1685e <le_data_len_change+0x12>
   16884:	00031938 	.word	0x00031938
   16888:	00031908 	.word	0x00031908
   1688c:	0003364c 	.word	0x0003364c

00016890 <hci_num_completed_packets>:
{
   16890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   16894:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   16898:	2700      	movs	r7, #0
   1689a:	e05c      	b.n	16956 <hci_num_completed_packets+0xc6>
				conn->pending_no_cb--;
   1689c:	3b01      	subs	r3, #1
   1689e:	61e3      	str	r3, [r4, #28]
   168a0:	f382 8811 	msr	BASEPRI, r2
   168a4:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   168a8:	4620      	mov	r0, r4
   168aa:	f002 fb59 	bl	18f60 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   168ae:	f00d ff0f 	bl	246d0 <z_impl_k_sem_give>
				continue;
   168b2:	e025      	b.n	16900 <hci_num_completed_packets+0x70>
	list->tail = node;
   168b4:	61a1      	str	r1, [r4, #24]
   168b6:	f382 8811 	msr	BASEPRI, r2
   168ba:	f3bf 8f6f 	isb	sy
			if (!node) {
   168be:	2b00      	cmp	r3, #0
   168c0:	d036      	beq.n	16930 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   168c2:	f04f 0240 	mov.w	r2, #64	; 0x40
   168c6:	f3ef 8111 	mrs	r1, BASEPRI
   168ca:	f382 8812 	msr	BASEPRI_MAX, r2
   168ce:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   168d2:	68da      	ldr	r2, [r3, #12]
   168d4:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   168d6:	2200      	movs	r2, #0
   168d8:	60da      	str	r2, [r3, #12]
	parent->next = child;
   168da:	601a      	str	r2, [r3, #0]
	return list->tail;
   168dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   168de:	2a00      	cmp	r2, #0
   168e0:	d05a      	beq.n	16998 <hci_num_completed_packets+0x108>
	parent->next = child;
   168e2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   168e4:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   168e6:	f381 8811 	msr	BASEPRI, r1
   168ea:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   168ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   168f2:	f00e facf 	bl	24e94 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   168f6:	4620      	mov	r0, r4
   168f8:	f002 fb32 	bl	18f60 <bt_conn_get_pkts>
   168fc:	f00d fee8 	bl	246d0 <z_impl_k_sem_give>
{
   16900:	462e      	mov	r6, r5
		while (count--) {
   16902:	1e75      	subs	r5, r6, #1
   16904:	b2ad      	uxth	r5, r5
   16906:	b316      	cbz	r6, 1694e <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   16908:	f04f 0340 	mov.w	r3, #64	; 0x40
   1690c:	f3ef 8211 	mrs	r2, BASEPRI
   16910:	f383 8812 	msr	BASEPRI_MAX, r3
   16914:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16918:	69e3      	ldr	r3, [r4, #28]
   1691a:	2b00      	cmp	r3, #0
   1691c:	d1be      	bne.n	1689c <hci_num_completed_packets+0xc>
	return list->head;
   1691e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   16920:	2b00      	cmp	r3, #0
   16922:	d0c8      	beq.n	168b6 <hci_num_completed_packets+0x26>
	return node->next;
   16924:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   16926:	6161      	str	r1, [r4, #20]
	return list->tail;
   16928:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1692a:	4298      	cmp	r0, r3
   1692c:	d1c3      	bne.n	168b6 <hci_num_completed_packets+0x26>
   1692e:	e7c1      	b.n	168b4 <hci_num_completed_packets+0x24>
   16930:	4b1c      	ldr	r3, [pc, #112]	; (169a4 <hci_num_completed_packets+0x114>)
   16932:	4a1d      	ldr	r2, [pc, #116]	; (169a8 <hci_num_completed_packets+0x118>)
   16934:	1a9b      	subs	r3, r3, r2
   16936:	08db      	lsrs	r3, r3, #3
				BT_ERR("packets count mismatch");
   16938:	2201      	movs	r2, #1
   1693a:	f362 0902 	bfi	r9, r2, #0, #3
   1693e:	f36f 09c5 	bfc	r9, #3, #3
   16942:	f363 198f 	bfi	r9, r3, #6, #10
   16946:	4649      	mov	r1, r9
   16948:	4818      	ldr	r0, [pc, #96]	; (169ac <hci_num_completed_packets+0x11c>)
   1694a:	f7fc ffa9 	bl	138a0 <log_0>
		bt_conn_unref(conn);
   1694e:	4620      	mov	r0, r4
   16950:	f002 fd76 	bl	19440 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   16954:	3701      	adds	r7, #1
   16956:	f898 3000 	ldrb.w	r3, [r8]
   1695a:	429f      	cmp	r7, r3
   1695c:	da1f      	bge.n	1699e <hci_num_completed_packets+0x10e>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1695e:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   16962:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16966:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1696a:	4628      	mov	r0, r5
   1696c:	f002 fda2 	bl	194b4 <bt_conn_lookup_handle>
		if (!conn) {
   16970:	4604      	mov	r4, r0
   16972:	2800      	cmp	r0, #0
   16974:	d1c5      	bne.n	16902 <hci_num_completed_packets+0x72>
   16976:	4b0b      	ldr	r3, [pc, #44]	; (169a4 <hci_num_completed_packets+0x114>)
   16978:	4a0b      	ldr	r2, [pc, #44]	; (169a8 <hci_num_completed_packets+0x118>)
   1697a:	1a9b      	subs	r3, r3, r2
   1697c:	08db      	lsrs	r3, r3, #3
			BT_ERR("No connection for handle %u", handle);
   1697e:	2201      	movs	r2, #1
   16980:	f362 0a02 	bfi	sl, r2, #0, #3
   16984:	f36f 0ac5 	bfc	sl, #3, #3
   16988:	f363 1a8f 	bfi	sl, r3, #6, #10
   1698c:	4652      	mov	r2, sl
   1698e:	4629      	mov	r1, r5
   16990:	4807      	ldr	r0, [pc, #28]	; (169b0 <hci_num_completed_packets+0x120>)
   16992:	f7fc ffb5 	bl	13900 <log_1>
			continue;
   16996:	e7dd      	b.n	16954 <hci_num_completed_packets+0xc4>
	list->tail = node;
   16998:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   1699a:	6223      	str	r3, [r4, #32]
}
   1699c:	e7a3      	b.n	168e6 <hci_num_completed_packets+0x56>
}
   1699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   169a2:	bf00      	nop
   169a4:	00031938 	.word	0x00031938
   169a8:	00031908 	.word	0x00031908
   169ac:	0003368c 	.word	0x0003368c
   169b0:	00033670 	.word	0x00033670

000169b4 <hci_cmd_done>:
{
   169b4:	b570      	push	{r4, r5, r6, lr}
   169b6:	b084      	sub	sp, #16
   169b8:	4605      	mov	r5, r0
   169ba:	460e      	mov	r6, r1
   169bc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   169be:	7990      	ldrb	r0, [r2, #6]
   169c0:	f005 fd5a 	bl	1c478 <net_buf_pool_get>
   169c4:	4b55      	ldr	r3, [pc, #340]	; (16b1c <hci_cmd_done+0x168>)
   169c6:	4283      	cmp	r3, r0
   169c8:	d01c      	beq.n	16a04 <hci_cmd_done+0x50>
   169ca:	4b55      	ldr	r3, [pc, #340]	; (16b20 <hci_cmd_done+0x16c>)
   169cc:	4a55      	ldr	r2, [pc, #340]	; (16b24 <hci_cmd_done+0x170>)
   169ce:	1a9b      	subs	r3, r3, r2
   169d0:	08db      	lsrs	r3, r3, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   169d2:	f04f 0600 	mov.w	r6, #0
   169d6:	2202      	movs	r2, #2
   169d8:	f362 0602 	bfi	r6, r2, #0, #3
   169dc:	f36f 06c5 	bfc	r6, #3, #3
   169e0:	f363 168f 	bfi	r6, r3, #6, #10
   169e4:	9500      	str	r5, [sp, #0]
   169e6:	79a0      	ldrb	r0, [r4, #6]
   169e8:	9001      	str	r0, [sp, #4]
   169ea:	f005 fd45 	bl	1c478 <net_buf_pool_get>
   169ee:	9002      	str	r0, [sp, #8]
   169f0:	4b4a      	ldr	r3, [pc, #296]	; (16b1c <hci_cmd_done+0x168>)
   169f2:	9303      	str	r3, [sp, #12]
   169f4:	4633      	mov	r3, r6
   169f6:	2204      	movs	r2, #4
   169f8:	4669      	mov	r1, sp
   169fa:	484b      	ldr	r0, [pc, #300]	; (16b28 <hci_cmd_done+0x174>)
   169fc:	f7fd f814 	bl	13a28 <log_n>
}
   16a00:	b004      	add	sp, #16
   16a02:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   16a04:	4620      	mov	r0, r4
   16a06:	f018 fa0e 	bl	2ee26 <net_buf_id>
   16a0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16a0e:	4b47      	ldr	r3, [pc, #284]	; (16b2c <hci_cmd_done+0x178>)
   16a10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16a14:	8843      	ldrh	r3, [r0, #2]
   16a16:	42ab      	cmp	r3, r5
   16a18:	d133      	bne.n	16a82 <hci_cmd_done+0xce>
	if (bt_dev.sent_cmd) {
   16a1a:	4b45      	ldr	r3, [pc, #276]	; (16b30 <hci_cmd_done+0x17c>)
   16a1c:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   16a20:	b128      	cbz	r0, 16a2e <hci_cmd_done+0x7a>
		net_buf_unref(bt_dev.sent_cmd);
   16a22:	f005 ff1f 	bl	1c864 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16a26:	4b42      	ldr	r3, [pc, #264]	; (16b30 <hci_cmd_done+0x17c>)
   16a28:	2200      	movs	r2, #0
   16a2a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   16a2e:	4620      	mov	r0, r4
   16a30:	f018 f9f9 	bl	2ee26 <net_buf_id>
   16a34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16a38:	4b3c      	ldr	r3, [pc, #240]	; (16b2c <hci_cmd_done+0x178>)
   16a3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16a3e:	6843      	ldr	r3, [r0, #4]
   16a40:	b10b      	cbz	r3, 16a46 <hci_cmd_done+0x92>
   16a42:	2e00      	cmp	r6, #0
   16a44:	d039      	beq.n	16aba <hci_cmd_done+0x106>
	if (cmd(buf)->sync) {
   16a46:	4620      	mov	r0, r4
   16a48:	f018 f9ed 	bl	2ee26 <net_buf_id>
   16a4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16a50:	4b36      	ldr	r3, [pc, #216]	; (16b2c <hci_cmd_done+0x178>)
   16a52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16a56:	6883      	ldr	r3, [r0, #8]
   16a58:	2b00      	cmp	r3, #0
   16a5a:	d0d1      	beq.n	16a00 <hci_cmd_done+0x4c>
		cmd(buf)->status = status;
   16a5c:	4620      	mov	r0, r4
   16a5e:	f018 f9e2 	bl	2ee26 <net_buf_id>
   16a62:	4d32      	ldr	r5, [pc, #200]	; (16b2c <hci_cmd_done+0x178>)
   16a64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16a68:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   16a6c:	4620      	mov	r0, r4
   16a6e:	f018 f9da 	bl	2ee26 <net_buf_id>
   16a72:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16a76:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   16a7a:	68a8      	ldr	r0, [r5, #8]
   16a7c:	f00d fe28 	bl	246d0 <z_impl_k_sem_give>
}
   16a80:	e7be      	b.n	16a00 <hci_cmd_done+0x4c>
   16a82:	4b27      	ldr	r3, [pc, #156]	; (16b20 <hci_cmd_done+0x16c>)
   16a84:	4a27      	ldr	r2, [pc, #156]	; (16b24 <hci_cmd_done+0x170>)
   16a86:	1a9b      	subs	r3, r3, r2
   16a88:	08db      	lsrs	r3, r3, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   16a8a:	f04f 0600 	mov.w	r6, #0
   16a8e:	2202      	movs	r2, #2
   16a90:	f362 0602 	bfi	r6, r2, #0, #3
   16a94:	f36f 06c5 	bfc	r6, #3, #3
   16a98:	f363 168f 	bfi	r6, r3, #6, #10
   16a9c:	4620      	mov	r0, r4
   16a9e:	f018 f9c2 	bl	2ee26 <net_buf_id>
   16aa2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16aa6:	4b21      	ldr	r3, [pc, #132]	; (16b2c <hci_cmd_done+0x178>)
   16aa8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16aac:	4633      	mov	r3, r6
   16aae:	8842      	ldrh	r2, [r0, #2]
   16ab0:	4629      	mov	r1, r5
   16ab2:	4820      	ldr	r0, [pc, #128]	; (16b34 <hci_cmd_done+0x180>)
   16ab4:	f7fc ff5a 	bl	1396c <log_2>
		return;
   16ab8:	e7a2      	b.n	16a00 <hci_cmd_done+0x4c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   16aba:	4620      	mov	r0, r4
   16abc:	f018 f9b3 	bl	2ee26 <net_buf_id>
   16ac0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16ac4:	4b19      	ldr	r3, [pc, #100]	; (16b2c <hci_cmd_done+0x178>)
   16ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16aca:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   16acc:	6813      	ldr	r3, [r2, #0]
   16ace:	6851      	ldr	r1, [r2, #4]
   16ad0:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   16ad2:	f001 051f 	and.w	r5, r1, #31
   16ad6:	2201      	movs	r2, #1
   16ad8:	40aa      	lsls	r2, r5

	if (val) {
   16ada:	b170      	cbz	r0, 16afa <hci_cmd_done+0x146>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16adc:	0949      	lsrs	r1, r1, #5
   16ade:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16ae2:	f3bf 8f5b 	dmb	ish
   16ae6:	e853 1f00 	ldrex	r1, [r3]
   16aea:	4311      	orrs	r1, r2
   16aec:	e843 1000 	strex	r0, r1, [r3]
   16af0:	2800      	cmp	r0, #0
   16af2:	d1f8      	bne.n	16ae6 <hci_cmd_done+0x132>
   16af4:	f3bf 8f5b 	dmb	ish
   16af8:	e7a5      	b.n	16a46 <hci_cmd_done+0x92>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16afa:	0949      	lsrs	r1, r1, #5
   16afc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16b00:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16b02:	f3bf 8f5b 	dmb	ish
   16b06:	e853 1f00 	ldrex	r1, [r3]
   16b0a:	4011      	ands	r1, r2
   16b0c:	e843 1000 	strex	r0, r1, [r3]
   16b10:	2800      	cmp	r0, #0
   16b12:	d1f8      	bne.n	16b06 <hci_cmd_done+0x152>
   16b14:	f3bf 8f5b 	dmb	ish
	}
}
   16b18:	e795      	b.n	16a46 <hci_cmd_done+0x92>
   16b1a:	bf00      	nop
   16b1c:	20000d74 	.word	0x20000d74
   16b20:	00031938 	.word	0x00031938
   16b24:	00031908 	.word	0x00031908
   16b28:	000336a4 	.word	0x000336a4
   16b2c:	20002dbc 	.word	0x20002dbc
   16b30:	200002b0 	.word	0x200002b0
   16b34:	000336dc 	.word	0x000336dc

00016b38 <hci_cmd_status>:
{
   16b38:	b538      	push	{r3, r4, r5, lr}
   16b3a:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   16b3c:	2104      	movs	r1, #4
   16b3e:	3008      	adds	r0, #8
   16b40:	f005 ff7c 	bl	1ca3c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16b44:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16b46:	4622      	mov	r2, r4
   16b48:	7801      	ldrb	r1, [r0, #0]
   16b4a:	8840      	ldrh	r0, [r0, #2]
   16b4c:	f7ff ff32 	bl	169b4 <hci_cmd_done>
	if (ncmd) {
   16b50:	b905      	cbnz	r5, 16b54 <hci_cmd_status+0x1c>
}
   16b52:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   16b54:	4801      	ldr	r0, [pc, #4]	; (16b5c <hci_cmd_status+0x24>)
   16b56:	f00d fdbb 	bl	246d0 <z_impl_k_sem_give>
   16b5a:	e7fa      	b.n	16b52 <hci_cmd_status+0x1a>
   16b5c:	200003c8 	.word	0x200003c8

00016b60 <hci_cmd_complete>:
{
   16b60:	b538      	push	{r3, r4, r5, lr}
   16b62:	4604      	mov	r4, r0
   16b64:	2103      	movs	r1, #3
   16b66:	3008      	adds	r0, #8
   16b68:	f005 ff68 	bl	1ca3c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16b6c:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   16b6e:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   16b70:	4622      	mov	r2, r4
   16b72:	7819      	ldrb	r1, [r3, #0]
   16b74:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   16b78:	f7ff ff1c 	bl	169b4 <hci_cmd_done>
	if (ncmd) {
   16b7c:	b905      	cbnz	r5, 16b80 <hci_cmd_complete+0x20>
}
   16b7e:	bd38      	pop	{r3, r4, r5, pc}
   16b80:	4801      	ldr	r0, [pc, #4]	; (16b88 <hci_cmd_complete+0x28>)
   16b82:	f00d fda5 	bl	246d0 <z_impl_k_sem_give>
   16b86:	e7fa      	b.n	16b7e <hci_cmd_complete+0x1e>
   16b88:	200003c8 	.word	0x200003c8

00016b8c <hci_hardware_error>:
{
   16b8c:	b508      	push	{r3, lr}
   16b8e:	2101      	movs	r1, #1
   16b90:	3008      	adds	r0, #8
   16b92:	f005 ff53 	bl	1ca3c <net_buf_simple_pull_mem>
   16b96:	4b09      	ldr	r3, [pc, #36]	; (16bbc <hci_hardware_error+0x30>)
   16b98:	4a09      	ldr	r2, [pc, #36]	; (16bc0 <hci_hardware_error+0x34>)
   16b9a:	1a9b      	subs	r3, r3, r2
   16b9c:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16b9e:	f04f 0200 	mov.w	r2, #0
   16ba2:	2101      	movs	r1, #1
   16ba4:	f361 0202 	bfi	r2, r1, #0, #3
   16ba8:	f36f 02c5 	bfc	r2, #3, #3
   16bac:	f363 128f 	bfi	r2, r3, #6, #10
   16bb0:	7801      	ldrb	r1, [r0, #0]
   16bb2:	4804      	ldr	r0, [pc, #16]	; (16bc4 <hci_hardware_error+0x38>)
   16bb4:	f7fc fea4 	bl	13900 <log_1>
}
   16bb8:	bd08      	pop	{r3, pc}
   16bba:	bf00      	nop
   16bbc:	00031938 	.word	0x00031938
   16bc0:	00031908 	.word	0x00031908
   16bc4:	00033710 	.word	0x00033710

00016bc8 <hci_vendor_event>:
{
   16bc8:	b510      	push	{r4, lr}
   16bca:	4b0c      	ldr	r3, [pc, #48]	; (16bfc <hci_vendor_event+0x34>)
   16bcc:	4a0c      	ldr	r2, [pc, #48]	; (16c00 <hci_vendor_event+0x38>)
   16bce:	1a9b      	subs	r3, r3, r2
   16bd0:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled vendor-specific event: %s",
   16bd2:	f04f 0400 	mov.w	r4, #0
   16bd6:	2202      	movs	r2, #2
   16bd8:	f362 0402 	bfi	r4, r2, #0, #3
   16bdc:	f36f 04c5 	bfc	r4, #3, #3
   16be0:	f363 148f 	bfi	r4, r3, #6, #10
   16be4:	8981      	ldrh	r1, [r0, #12]
   16be6:	6880      	ldr	r0, [r0, #8]
   16be8:	f7ff fb8c 	bl	16304 <bt_hex_real>
   16bec:	f7fc fce6 	bl	135bc <z_log_strdup>
   16bf0:	4601      	mov	r1, r0
   16bf2:	4622      	mov	r2, r4
   16bf4:	4803      	ldr	r0, [pc, #12]	; (16c04 <hci_vendor_event+0x3c>)
   16bf6:	f7fc fe83 	bl	13900 <log_1>
}
   16bfa:	bd10      	pop	{r4, pc}
   16bfc:	00031938 	.word	0x00031938
   16c00:	00031908 	.word	0x00031908
   16c04:	00033734 	.word	0x00033734

00016c08 <hci_acl>:
{
   16c08:	b570      	push	{r4, r5, r6, lr}
   16c0a:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16c0c:	8983      	ldrh	r3, [r0, #12]
   16c0e:	2b03      	cmp	r3, #3
   16c10:	d923      	bls.n	16c5a <hci_acl+0x52>
   16c12:	2104      	movs	r1, #4
   16c14:	f104 0008 	add.w	r0, r4, #8
   16c18:	f005 ff10 	bl	1ca3c <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   16c1c:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   16c1e:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   16c20:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   16c22:	f3c0 000b 	ubfx	r0, r0, #0, #12
   16c26:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   16c28:	23ff      	movs	r3, #255	; 0xff
   16c2a:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   16c2c:	89a1      	ldrh	r1, [r4, #12]
   16c2e:	4291      	cmp	r1, r2
   16c30:	d021      	beq.n	16c76 <hci_acl+0x6e>
   16c32:	4823      	ldr	r0, [pc, #140]	; (16cc0 <hci_acl+0xb8>)
   16c34:	4b23      	ldr	r3, [pc, #140]	; (16cc4 <hci_acl+0xbc>)
   16c36:	1ac0      	subs	r0, r0, r3
   16c38:	08c0      	lsrs	r0, r0, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   16c3a:	f04f 0300 	mov.w	r3, #0
   16c3e:	2501      	movs	r5, #1
   16c40:	f365 0302 	bfi	r3, r5, #0, #3
   16c44:	f36f 03c5 	bfc	r3, #3, #3
   16c48:	f360 138f 	bfi	r3, r0, #6, #10
   16c4c:	481e      	ldr	r0, [pc, #120]	; (16cc8 <hci_acl+0xc0>)
   16c4e:	f7fc fe8d 	bl	1396c <log_2>
		net_buf_unref(buf);
   16c52:	4620      	mov	r0, r4
   16c54:	f005 fe06 	bl	1c864 <net_buf_unref>
}
   16c58:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16c5a:	f240 13b5 	movw	r3, #437	; 0x1b5
   16c5e:	4a1b      	ldr	r2, [pc, #108]	; (16ccc <hci_acl+0xc4>)
   16c60:	491b      	ldr	r1, [pc, #108]	; (16cd0 <hci_acl+0xc8>)
   16c62:	481c      	ldr	r0, [pc, #112]	; (16cd4 <hci_acl+0xcc>)
   16c64:	f015 fa70 	bl	2c148 <printk>
   16c68:	4040      	eors	r0, r0
   16c6a:	f380 8811 	msr	BASEPRI, r0
   16c6e:	f04f 0003 	mov.w	r0, #3
   16c72:	df02      	svc	2
   16c74:	e7cd      	b.n	16c12 <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   16c76:	f002 fc1d 	bl	194b4 <bt_conn_lookup_handle>
	if (!conn) {
   16c7a:	4605      	mov	r5, r0
   16c7c:	b158      	cbz	r0, 16c96 <hci_acl+0x8e>
	acl(buf)->index = bt_conn_index(conn);
   16c7e:	f002 fd1d 	bl	196bc <bt_conn_index>
   16c82:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   16c84:	4632      	mov	r2, r6
   16c86:	4621      	mov	r1, r4
   16c88:	4628      	mov	r0, r5
   16c8a:	f016 fdd3 	bl	2d834 <bt_conn_recv>
	bt_conn_unref(conn);
   16c8e:	4628      	mov	r0, r5
   16c90:	f002 fbd6 	bl	19440 <bt_conn_unref>
   16c94:	e7e0      	b.n	16c58 <hci_acl+0x50>
   16c96:	4b0a      	ldr	r3, [pc, #40]	; (16cc0 <hci_acl+0xb8>)
   16c98:	4a0a      	ldr	r2, [pc, #40]	; (16cc4 <hci_acl+0xbc>)
   16c9a:	1a9b      	subs	r3, r3, r2
   16c9c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   16c9e:	f04f 0200 	mov.w	r2, #0
   16ca2:	2101      	movs	r1, #1
   16ca4:	f361 0202 	bfi	r2, r1, #0, #3
   16ca8:	f36f 02c5 	bfc	r2, #3, #3
   16cac:	f363 128f 	bfi	r2, r3, #6, #10
   16cb0:	8ae1      	ldrh	r1, [r4, #22]
   16cb2:	4809      	ldr	r0, [pc, #36]	; (16cd8 <hci_acl+0xd0>)
   16cb4:	f7fc fe24 	bl	13900 <log_1>
		net_buf_unref(buf);
   16cb8:	4620      	mov	r0, r4
   16cba:	f005 fdd3 	bl	1c864 <net_buf_unref>
		return;
   16cbe:	e7cb      	b.n	16c58 <hci_acl+0x50>
   16cc0:	00031938 	.word	0x00031938
   16cc4:	00031908 	.word	0x00031908
   16cc8:	000337a8 	.word	0x000337a8
   16ccc:	00033758 	.word	0x00033758
   16cd0:	0003378c 	.word	0x0003378c
   16cd4:	00031df4 	.word	0x00031df4
   16cd8:	000337cc 	.word	0x000337cc

00016cdc <le_conn_update_complete>:
{
   16cdc:	b570      	push	{r4, r5, r6, lr}
   16cde:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   16ce0:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16ce2:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   16ce6:	4630      	mov	r0, r6
   16ce8:	f002 fbe4 	bl	194b4 <bt_conn_lookup_handle>
	if (!conn) {
   16cec:	b148      	cbz	r0, 16d02 <le_conn_update_complete+0x26>
   16cee:	4605      	mov	r5, r0
	if (!evt->status) {
   16cf0:	7823      	ldrb	r3, [r4, #0]
   16cf2:	b1c3      	cbz	r3, 16d26 <le_conn_update_complete+0x4a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16cf4:	2b1a      	cmp	r3, #26
   16cf6:	d025      	beq.n	16d44 <le_conn_update_complete+0x68>
	bt_conn_unref(conn);
   16cf8:	4628      	mov	r0, r5
   16cfa:	f002 fba1 	bl	19440 <bt_conn_unref>
}
   16cfe:	b002      	add	sp, #8
   16d00:	bd70      	pop	{r4, r5, r6, pc}
   16d02:	4b24      	ldr	r3, [pc, #144]	; (16d94 <le_conn_update_complete+0xb8>)
   16d04:	4a24      	ldr	r2, [pc, #144]	; (16d98 <le_conn_update_complete+0xbc>)
   16d06:	1a9b      	subs	r3, r3, r2
   16d08:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16d0a:	f04f 0200 	mov.w	r2, #0
   16d0e:	2101      	movs	r1, #1
   16d10:	f361 0202 	bfi	r2, r1, #0, #3
   16d14:	f36f 02c5 	bfc	r2, #3, #3
   16d18:	f363 128f 	bfi	r2, r3, #6, #10
   16d1c:	4631      	mov	r1, r6
   16d1e:	481f      	ldr	r0, [pc, #124]	; (16d9c <le_conn_update_complete+0xc0>)
   16d20:	f7fc fdee 	bl	13900 <log_1>
		return;
   16d24:	e7eb      	b.n	16cfe <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   16d26:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   16d2a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   16d2e:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   16d32:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16d36:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   16d3a:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   16d3e:	f002 fd2d 	bl	1979c <notify_le_param_updated>
   16d42:	e7d9      	b.n	16cf8 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16d44:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16d46:	2b01      	cmp	r3, #1
   16d48:	d1d6      	bne.n	16cf8 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   16d4a:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16d4c:	f3bf 8f5b 	dmb	ish
   16d50:	e853 2f00 	ldrex	r2, [r3]
   16d54:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   16d58:	e843 1000 	strex	r0, r1, [r3]
   16d5c:	2800      	cmp	r0, #0
   16d5e:	d1f7      	bne.n	16d50 <le_conn_update_complete+0x74>
   16d60:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16d64:	f412 6f80 	tst.w	r2, #1024	; 0x400
   16d68:	d1c6      	bne.n	16cf8 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   16d6a:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   16d6e:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   16d72:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   16d76:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   16d7a:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
   16d7e:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   16d82:	f8b5 30b2 	ldrh.w	r3, [r5, #178]	; 0xb2
   16d86:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   16d8a:	4669      	mov	r1, sp
   16d8c:	4628      	mov	r0, r5
   16d8e:	f016 ff09 	bl	2dba4 <bt_l2cap_update_conn_param>
   16d92:	e7b1      	b.n	16cf8 <le_conn_update_complete+0x1c>
   16d94:	00031938 	.word	0x00031938
   16d98:	00031908 	.word	0x00031908
   16d9c:	0003364c 	.word	0x0003364c

00016da0 <hci_le_meta_event>:
{
   16da0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16da2:	b083      	sub	sp, #12
   16da4:	4604      	mov	r4, r0
   16da6:	2101      	movs	r1, #1
   16da8:	3008      	adds	r0, #8
   16daa:	f005 fe47 	bl	1ca3c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16dae:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   16db0:	2300      	movs	r3, #0
   16db2:	2b06      	cmp	r3, #6
   16db4:	d823      	bhi.n	16dfe <hci_le_meta_event+0x5e>
		const struct event_handler *handler = &handlers[i];
   16db6:	4a20      	ldr	r2, [pc, #128]	; (16e38 <hci_le_meta_event+0x98>)
   16db8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   16dbc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   16dc0:	4295      	cmp	r5, r2
   16dc2:	d108      	bne.n	16dd6 <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
   16dc4:	89a1      	ldrh	r1, [r4, #12]
   16dc6:	7843      	ldrb	r3, [r0, #1]
   16dc8:	4299      	cmp	r1, r3
   16dca:	d306      	bcc.n	16dda <hci_le_meta_event+0x3a>
		handler->handler(buf);
   16dcc:	6843      	ldr	r3, [r0, #4]
   16dce:	4620      	mov	r0, r4
   16dd0:	4798      	blx	r3
}
   16dd2:	b003      	add	sp, #12
   16dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   16dd6:	3301      	adds	r3, #1
   16dd8:	e7eb      	b.n	16db2 <hci_le_meta_event+0x12>
   16dda:	4a18      	ldr	r2, [pc, #96]	; (16e3c <hci_le_meta_event+0x9c>)
   16ddc:	4b18      	ldr	r3, [pc, #96]	; (16e40 <hci_le_meta_event+0xa0>)
   16dde:	1ad2      	subs	r2, r2, r3
   16de0:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   16de2:	f04f 0300 	mov.w	r3, #0
   16de6:	2001      	movs	r0, #1
   16de8:	f360 0302 	bfi	r3, r0, #0, #3
   16dec:	f36f 03c5 	bfc	r3, #3, #3
   16df0:	f362 138f 	bfi	r3, r2, #6, #10
   16df4:	462a      	mov	r2, r5
   16df6:	4813      	ldr	r0, [pc, #76]	; (16e44 <hci_le_meta_event+0xa4>)
   16df8:	f7fc fdb8 	bl	1396c <log_2>
			return;
   16dfc:	e7e9      	b.n	16dd2 <hci_le_meta_event+0x32>
   16dfe:	4b0f      	ldr	r3, [pc, #60]	; (16e3c <hci_le_meta_event+0x9c>)
   16e00:	4a0f      	ldr	r2, [pc, #60]	; (16e40 <hci_le_meta_event+0xa0>)
   16e02:	1a9b      	subs	r3, r3, r2
   16e04:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   16e06:	f04f 0600 	mov.w	r6, #0
   16e0a:	2202      	movs	r2, #2
   16e0c:	f362 0602 	bfi	r6, r2, #0, #3
   16e10:	f36f 06c5 	bfc	r6, #3, #3
   16e14:	f363 168f 	bfi	r6, r3, #6, #10
   16e18:	89a7      	ldrh	r7, [r4, #12]
   16e1a:	4639      	mov	r1, r7
   16e1c:	68a0      	ldr	r0, [r4, #8]
   16e1e:	f7ff fa71 	bl	16304 <bt_hex_real>
   16e22:	f7fc fbcb 	bl	135bc <z_log_strdup>
   16e26:	4603      	mov	r3, r0
   16e28:	f8ad 6000 	strh.w	r6, [sp]
   16e2c:	463a      	mov	r2, r7
   16e2e:	4629      	mov	r1, r5
   16e30:	4805      	ldr	r0, [pc, #20]	; (16e48 <hci_le_meta_event+0xa8>)
   16e32:	f7fc fe1b 	bl	13a6c <log_3>
}
   16e36:	e7cc      	b.n	16dd2 <hci_le_meta_event+0x32>
   16e38:	00033b1c 	.word	0x00033b1c
   16e3c:	00031938 	.word	0x00031938
   16e40:	00031908 	.word	0x00031908
   16e44:	000337f0 	.word	0x000337f0
   16e48:	00033814 	.word	0x00033814

00016e4c <hci_event>:
{
   16e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e4e:	b083      	sub	sp, #12
   16e50:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16e52:	8983      	ldrh	r3, [r0, #12]
   16e54:	2b01      	cmp	r3, #1
   16e56:	d916      	bls.n	16e86 <hci_event+0x3a>
   16e58:	2102      	movs	r1, #2
   16e5a:	f104 0008 	add.w	r0, r4, #8
   16e5e:	f005 fded 	bl	1ca3c <net_buf_simple_pull_mem>
   16e62:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16e64:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   16e66:	3b05      	subs	r3, #5
   16e68:	2b15      	cmp	r3, #21
   16e6a:	d81c      	bhi.n	16ea6 <hci_event+0x5a>
   16e6c:	e8df f003 	tbb	[pc, r3]
   16e70:	1b1b1b19 	.word	0x1b1b1b19
   16e74:	1b1b1b1b 	.word	0x1b1b1b1b
   16e78:	1b36361b 	.word	0x1b36361b
   16e7c:	1b361b1b 	.word	0x1b361b1b
   16e80:	1b1b1b1b 	.word	0x1b1b1b1b
   16e84:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16e86:	f640 1317 	movw	r3, #2327	; 0x917
   16e8a:	4a35      	ldr	r2, [pc, #212]	; (16f60 <hci_event+0x114>)
   16e8c:	4935      	ldr	r1, [pc, #212]	; (16f64 <hci_event+0x118>)
   16e8e:	4836      	ldr	r0, [pc, #216]	; (16f68 <hci_event+0x11c>)
   16e90:	f015 f95a 	bl	2c148 <printk>
   16e94:	4040      	eors	r0, r0
   16e96:	f380 8811 	msr	BASEPRI, r0
   16e9a:	f04f 0003 	mov.w	r0, #3
   16e9e:	df02      	svc	2
   16ea0:	e7da      	b.n	16e58 <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16ea2:	2303      	movs	r3, #3
   16ea4:	e000      	b.n	16ea8 <hci_event+0x5c>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   16ea6:	2302      	movs	r3, #2
   16ea8:	f013 0f02 	tst.w	r3, #2
   16eac:	d018      	beq.n	16ee0 <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16eae:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   16eb0:	2300      	movs	r3, #0
   16eb2:	2b03      	cmp	r3, #3
   16eb4:	d836      	bhi.n	16f24 <hci_event+0xd8>
		const struct event_handler *handler = &handlers[i];
   16eb6:	4a2d      	ldr	r2, [pc, #180]	; (16f6c <hci_event+0x120>)
   16eb8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   16ebc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   16ec0:	4295      	cmp	r5, r2
   16ec2:	d11b      	bne.n	16efc <hci_event+0xb0>
		if (buf->len < handler->min_len) {
   16ec4:	89a1      	ldrh	r1, [r4, #12]
   16ec6:	7843      	ldrb	r3, [r0, #1]
   16ec8:	4299      	cmp	r1, r3
   16eca:	d319      	bcc.n	16f00 <hci_event+0xb4>
		handler->handler(buf);
   16ecc:	6843      	ldr	r3, [r0, #4]
   16ece:	4620      	mov	r0, r4
   16ed0:	4798      	blx	r3
	net_buf_unref(buf);
   16ed2:	4620      	mov	r0, r4
   16ed4:	f005 fcc6 	bl	1c864 <net_buf_unref>
}
   16ed8:	b003      	add	sp, #12
   16eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   16edc:	2301      	movs	r3, #1
   16ede:	e7e3      	b.n	16ea8 <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16ee0:	f640 131b 	movw	r3, #2331	; 0x91b
   16ee4:	4a1e      	ldr	r2, [pc, #120]	; (16f60 <hci_event+0x114>)
   16ee6:	4922      	ldr	r1, [pc, #136]	; (16f70 <hci_event+0x124>)
   16ee8:	481f      	ldr	r0, [pc, #124]	; (16f68 <hci_event+0x11c>)
   16eea:	f015 f92d 	bl	2c148 <printk>
   16eee:	4040      	eors	r0, r0
   16ef0:	f380 8811 	msr	BASEPRI, r0
   16ef4:	f04f 0003 	mov.w	r0, #3
   16ef8:	df02      	svc	2
   16efa:	e7d8      	b.n	16eae <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
   16efc:	3301      	adds	r3, #1
   16efe:	e7d8      	b.n	16eb2 <hci_event+0x66>
   16f00:	4a1c      	ldr	r2, [pc, #112]	; (16f74 <hci_event+0x128>)
   16f02:	4b1d      	ldr	r3, [pc, #116]	; (16f78 <hci_event+0x12c>)
   16f04:	1ad2      	subs	r2, r2, r3
   16f06:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   16f08:	f04f 0300 	mov.w	r3, #0
   16f0c:	2001      	movs	r0, #1
   16f0e:	f360 0302 	bfi	r3, r0, #0, #3
   16f12:	f36f 03c5 	bfc	r3, #3, #3
   16f16:	f362 138f 	bfi	r3, r2, #6, #10
   16f1a:	462a      	mov	r2, r5
   16f1c:	4817      	ldr	r0, [pc, #92]	; (16f7c <hci_event+0x130>)
   16f1e:	f7fc fd25 	bl	1396c <log_2>
			return;
   16f22:	e7d6      	b.n	16ed2 <hci_event+0x86>
   16f24:	4b13      	ldr	r3, [pc, #76]	; (16f74 <hci_event+0x128>)
   16f26:	4a14      	ldr	r2, [pc, #80]	; (16f78 <hci_event+0x12c>)
   16f28:	1a9b      	subs	r3, r3, r2
   16f2a:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   16f2c:	f04f 0600 	mov.w	r6, #0
   16f30:	2202      	movs	r2, #2
   16f32:	f362 0602 	bfi	r6, r2, #0, #3
   16f36:	f36f 06c5 	bfc	r6, #3, #3
   16f3a:	f363 168f 	bfi	r6, r3, #6, #10
   16f3e:	89a7      	ldrh	r7, [r4, #12]
   16f40:	4639      	mov	r1, r7
   16f42:	68a0      	ldr	r0, [r4, #8]
   16f44:	f7ff f9de 	bl	16304 <bt_hex_real>
   16f48:	f7fc fb38 	bl	135bc <z_log_strdup>
   16f4c:	4603      	mov	r3, r0
   16f4e:	f8ad 6000 	strh.w	r6, [sp]
   16f52:	463a      	mov	r2, r7
   16f54:	4629      	mov	r1, r5
   16f56:	480a      	ldr	r0, [pc, #40]	; (16f80 <hci_event+0x134>)
   16f58:	f7fc fd88 	bl	13a6c <log_3>
   16f5c:	e7b9      	b.n	16ed2 <hci_event+0x86>
   16f5e:	bf00      	nop
   16f60:	00033758 	.word	0x00033758
   16f64:	0003378c 	.word	0x0003378c
   16f68:	00031df4 	.word	0x00031df4
   16f6c:	00033b64 	.word	0x00033b64
   16f70:	00033838 	.word	0x00033838
   16f74:	00031938 	.word	0x00031938
   16f78:	00031908 	.word	0x00031908
   16f7c:	000337f0 	.word	0x000337f0
   16f80:	00033814 	.word	0x00033814

00016f84 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   16f84:	b538      	push	{r3, r4, r5, lr}
   16f86:	e003      	b.n	16f90 <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   16f88:	f7ff ff60 	bl	16e4c <hci_event>
	z_impl_k_yield();
   16f8c:	f00f fb1c 	bl	265c8 <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   16f90:	f04f 32ff 	mov.w	r2, #4294967295
   16f94:	f04f 33ff 	mov.w	r3, #4294967295
   16f98:	480f      	ldr	r0, [pc, #60]	; (16fd8 <hci_rx_thread+0x54>)
   16f9a:	f005 fbcb 	bl	1c734 <net_buf_get>
   16f9e:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16fa0:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   16fa2:	2901      	cmp	r1, #1
   16fa4:	d0f0      	beq.n	16f88 <hci_rx_thread+0x4>
   16fa6:	2903      	cmp	r1, #3
   16fa8:	d102      	bne.n	16fb0 <hci_rx_thread+0x2c>
			hci_acl(buf);
   16faa:	f7ff fe2d 	bl	16c08 <hci_acl>
			break;
   16fae:	e7ed      	b.n	16f8c <hci_rx_thread+0x8>
   16fb0:	4b0a      	ldr	r3, [pc, #40]	; (16fdc <hci_rx_thread+0x58>)
   16fb2:	4a0b      	ldr	r2, [pc, #44]	; (16fe0 <hci_rx_thread+0x5c>)
   16fb4:	1a9b      	subs	r3, r3, r2
   16fb6:	08db      	lsrs	r3, r3, #3
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16fb8:	2201      	movs	r2, #1
   16fba:	f362 0502 	bfi	r5, r2, #0, #3
   16fbe:	f36f 05c5 	bfc	r5, #3, #3
   16fc2:	f363 158f 	bfi	r5, r3, #6, #10
   16fc6:	462a      	mov	r2, r5
   16fc8:	4806      	ldr	r0, [pc, #24]	; (16fe4 <hci_rx_thread+0x60>)
   16fca:	f7fc fc99 	bl	13900 <log_1>
			net_buf_unref(buf);
   16fce:	4620      	mov	r0, r4
   16fd0:	f005 fc48 	bl	1c864 <net_buf_unref>
			break;
   16fd4:	e7da      	b.n	16f8c <hci_rx_thread+0x8>
   16fd6:	bf00      	nop
   16fd8:	200003e4 	.word	0x200003e4
   16fdc:	00031938 	.word	0x00031938
   16fe0:	00031908 	.word	0x00031908
   16fe4:	00033868 	.word	0x00033868

00016fe8 <bt_hci_cmd_state_set_init>:
{
   16fe8:	b510      	push	{r4, lr}
   16fea:	460c      	mov	r4, r1
	state->target = target;
   16fec:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   16fee:	604b      	str	r3, [r1, #4]
	state->val = val;
   16ff0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16ff4:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   16ff6:	f017 ff16 	bl	2ee26 <net_buf_id>
   16ffa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16ffe:	4b02      	ldr	r3, [pc, #8]	; (17008 <bt_hci_cmd_state_set_init+0x20>)
   17000:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17004:	6044      	str	r4, [r0, #4]
}
   17006:	bd10      	pop	{r4, pc}
   17008:	20002dbc 	.word	0x20002dbc

0001700c <bt_hci_cmd_create>:
{
   1700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17010:	4682      	mov	sl, r0
   17012:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   17014:	f04f 32ff 	mov.w	r2, #4294967295
   17018:	f04f 33ff 	mov.w	r3, #4294967295
   1701c:	481e      	ldr	r0, [pc, #120]	; (17098 <bt_hci_cmd_create+0x8c>)
   1701e:	f017 ff27 	bl	2ee70 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   17022:	4604      	mov	r4, r0
   17024:	b358      	cbz	r0, 1707e <bt_hci_cmd_create+0x72>
	net_buf_simple_reserve(&buf->b, reserve);
   17026:	f104 0808 	add.w	r8, r4, #8
   1702a:	2100      	movs	r1, #0
   1702c:	4640      	mov	r0, r8
   1702e:	f005 fbb3 	bl	1c798 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17032:	2700      	movs	r7, #0
   17034:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   17036:	4620      	mov	r0, r4
   17038:	f017 fef5 	bl	2ee26 <net_buf_id>
   1703c:	4d17      	ldr	r5, [pc, #92]	; (1709c <bt_hci_cmd_create+0x90>)
   1703e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17042:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   17046:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   1704a:	4620      	mov	r0, r4
   1704c:	f017 feeb 	bl	2ee26 <net_buf_id>
   17050:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17054:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   17058:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   1705a:	4620      	mov	r0, r4
   1705c:	f017 fee3 	bl	2ee26 <net_buf_id>
   17060:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17064:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   17068:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   1706a:	2103      	movs	r1, #3
   1706c:	4640      	mov	r0, r8
   1706e:	f005 fd2b 	bl	1cac8 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   17072:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   17076:	7086      	strb	r6, [r0, #2]
}
   17078:	4620      	mov	r0, r4
   1707a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT_NO_MSG(buf);
   1707e:	4d08      	ldr	r5, [pc, #32]	; (170a0 <bt_hci_cmd_create+0x94>)
   17080:	23e9      	movs	r3, #233	; 0xe9
   17082:	462a      	mov	r2, r5
   17084:	4907      	ldr	r1, [pc, #28]	; (170a4 <bt_hci_cmd_create+0x98>)
   17086:	4808      	ldr	r0, [pc, #32]	; (170a8 <bt_hci_cmd_create+0x9c>)
   17088:	f015 f85e 	bl	2c148 <printk>
   1708c:	21e9      	movs	r1, #233	; 0xe9
   1708e:	4628      	mov	r0, r5
   17090:	f015 fa5f 	bl	2c552 <assert_post_action>
   17094:	e7c7      	b.n	17026 <bt_hci_cmd_create+0x1a>
   17096:	bf00      	nop
   17098:	20000d74 	.word	0x20000d74
   1709c:	20002dbc 	.word	0x20002dbc
   170a0:	00033758 	.word	0x00033758
   170a4:	00034b64 	.word	0x00034b64
   170a8:	00031df4 	.word	0x00031df4

000170ac <bt_hci_cmd_send_sync>:
{
   170ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   170ae:	b087      	sub	sp, #28
   170b0:	4606      	mov	r6, r0
   170b2:	4615      	mov	r5, r2
	if (!buf) {
   170b4:	460c      	mov	r4, r1
   170b6:	b361      	cbz	r1, 17112 <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   170b8:	2201      	movs	r2, #1
   170ba:	2100      	movs	r1, #0
   170bc:	4668      	mov	r0, sp
   170be:	f019 fa79 	bl	305b4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   170c2:	4620      	mov	r0, r4
   170c4:	f017 feaf 	bl	2ee26 <net_buf_id>
   170c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   170cc:	4b2f      	ldr	r3, [pc, #188]	; (1718c <bt_hci_cmd_send_sync+0xe0>)
   170ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   170d2:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   170d6:	4620      	mov	r0, r4
   170d8:	f005 fbfe 	bl	1c8d8 <net_buf_ref>
   170dc:	4601      	mov	r1, r0
   170de:	482c      	ldr	r0, [pc, #176]	; (17190 <bt_hci_cmd_send_sync+0xe4>)
   170e0:	f005 fb88 	bl	1c7f4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   170e4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   170e8:	2300      	movs	r3, #0
   170ea:	4668      	mov	r0, sp
   170ec:	f00d fb38 	bl	24760 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   170f0:	4607      	mov	r7, r0
   170f2:	b9b0      	cbnz	r0, 17122 <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   170f4:	4620      	mov	r0, r4
   170f6:	f017 fe96 	bl	2ee26 <net_buf_id>
   170fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   170fe:	4b23      	ldr	r3, [pc, #140]	; (1718c <bt_hci_cmd_send_sync+0xe0>)
   17100:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   17104:	b9ff      	cbnz	r7, 17146 <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   17106:	2d00      	cmp	r5, #0
   17108:	d03a      	beq.n	17180 <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
   1710a:	602c      	str	r4, [r5, #0]
	return 0;
   1710c:	2000      	movs	r0, #0
}
   1710e:	b007      	add	sp, #28
   17110:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   17112:	f7ff ff7b 	bl	1700c <bt_hci_cmd_create>
		if (!buf) {
   17116:	4604      	mov	r4, r0
   17118:	2800      	cmp	r0, #0
   1711a:	d1cd      	bne.n	170b8 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   1711c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17120:	e7f5      	b.n	1710e <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   17122:	f240 1331 	movw	r3, #305	; 0x131
   17126:	4a1b      	ldr	r2, [pc, #108]	; (17194 <bt_hci_cmd_send_sync+0xe8>)
   17128:	491b      	ldr	r1, [pc, #108]	; (17198 <bt_hci_cmd_send_sync+0xec>)
   1712a:	481c      	ldr	r0, [pc, #112]	; (1719c <bt_hci_cmd_send_sync+0xf0>)
   1712c:	f015 f80c 	bl	2c148 <printk>
   17130:	4639      	mov	r1, r7
   17132:	481b      	ldr	r0, [pc, #108]	; (171a0 <bt_hci_cmd_send_sync+0xf4>)
   17134:	f015 f808 	bl	2c148 <printk>
   17138:	4040      	eors	r0, r0
   1713a:	f380 8811 	msr	BASEPRI, r0
   1713e:	f04f 0003 	mov.w	r0, #3
   17142:	df02      	svc	2
   17144:	e7d6      	b.n	170f4 <bt_hci_cmd_send_sync+0x48>
   17146:	4a17      	ldr	r2, [pc, #92]	; (171a4 <bt_hci_cmd_send_sync+0xf8>)
   17148:	4b17      	ldr	r3, [pc, #92]	; (171a8 <bt_hci_cmd_send_sync+0xfc>)
   1714a:	1ad2      	subs	r2, r2, r3
   1714c:	08d2      	lsrs	r2, r2, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   1714e:	f04f 0300 	mov.w	r3, #0
   17152:	2102      	movs	r1, #2
   17154:	f361 0302 	bfi	r3, r1, #0, #3
   17158:	f36f 03c5 	bfc	r3, #3, #3
   1715c:	f362 138f 	bfi	r3, r2, #6, #10
   17160:	463a      	mov	r2, r7
   17162:	4631      	mov	r1, r6
   17164:	4811      	ldr	r0, [pc, #68]	; (171ac <bt_hci_cmd_send_sync+0x100>)
   17166:	f7fc fc01 	bl	1396c <log_2>
		net_buf_unref(buf);
   1716a:	4620      	mov	r0, r4
   1716c:	f005 fb7a 	bl	1c864 <net_buf_unref>
		switch (status) {
   17170:	2f09      	cmp	r7, #9
   17172:	d002      	beq.n	1717a <bt_hci_cmd_send_sync+0xce>
			return -EIO;
   17174:	f06f 0004 	mvn.w	r0, #4
   17178:	e7c9      	b.n	1710e <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   1717a:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   1717e:	e7c6      	b.n	1710e <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   17180:	4620      	mov	r0, r4
   17182:	f005 fb6f 	bl	1c864 <net_buf_unref>
	return 0;
   17186:	2000      	movs	r0, #0
   17188:	e7c1      	b.n	1710e <bt_hci_cmd_send_sync+0x62>
   1718a:	bf00      	nop
   1718c:	20002dbc 	.word	0x20002dbc
   17190:	20000400 	.word	0x20000400
   17194:	00033758 	.word	0x00033758
   17198:	0003387c 	.word	0x0003387c
   1719c:	00031df4 	.word	0x00031df4
   171a0:	00033888 	.word	0x00033888
   171a4:	00031938 	.word	0x00031938
   171a8:	00031908 	.word	0x00031908
   171ac:	000338a8 	.word	0x000338a8

000171b0 <common_init>:
{
   171b0:	b510      	push	{r4, lr}
   171b2:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   171b4:	4b22      	ldr	r3, [pc, #136]	; (17240 <common_init+0x90>)
   171b6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   171ba:	689b      	ldr	r3, [r3, #8]
   171bc:	f013 0f01 	tst.w	r3, #1
   171c0:	d10d      	bne.n	171de <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   171c2:	aa01      	add	r2, sp, #4
   171c4:	2100      	movs	r1, #0
   171c6:	f640 4003 	movw	r0, #3075	; 0xc03
   171ca:	f7ff ff6f 	bl	170ac <bt_hci_cmd_send_sync>
		if (err) {
   171ce:	4604      	mov	r4, r0
   171d0:	b968      	cbnz	r0, 171ee <common_init+0x3e>
		hci_reset_complete(rsp);
   171d2:	9801      	ldr	r0, [sp, #4]
   171d4:	f7ff fa4c 	bl	16670 <hci_reset_complete>
		net_buf_unref(rsp);
   171d8:	9801      	ldr	r0, [sp, #4]
   171da:	f005 fb43 	bl	1c864 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   171de:	aa01      	add	r2, sp, #4
   171e0:	2100      	movs	r1, #0
   171e2:	f241 0003 	movw	r0, #4099	; 0x1003
   171e6:	f7ff ff61 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   171ea:	4604      	mov	r4, r0
   171ec:	b110      	cbz	r0, 171f4 <common_init+0x44>
}
   171ee:	4620      	mov	r0, r4
   171f0:	b002      	add	sp, #8
   171f2:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   171f4:	9801      	ldr	r0, [sp, #4]
   171f6:	f7ff fa13 	bl	16620 <read_local_features_complete>
	net_buf_unref(rsp);
   171fa:	9801      	ldr	r0, [sp, #4]
   171fc:	f005 fb32 	bl	1c864 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   17200:	aa01      	add	r2, sp, #4
   17202:	2100      	movs	r1, #0
   17204:	f241 0001 	movw	r0, #4097	; 0x1001
   17208:	f7ff ff50 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   1720c:	4604      	mov	r4, r0
   1720e:	2800      	cmp	r0, #0
   17210:	d1ed      	bne.n	171ee <common_init+0x3e>
	read_local_ver_complete(rsp);
   17212:	9801      	ldr	r0, [sp, #4]
   17214:	f7ff f9d0 	bl	165b8 <read_local_ver_complete>
	net_buf_unref(rsp);
   17218:	9801      	ldr	r0, [sp, #4]
   1721a:	f005 fb23 	bl	1c864 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1721e:	aa01      	add	r2, sp, #4
   17220:	2100      	movs	r1, #0
   17222:	f241 0002 	movw	r0, #4098	; 0x1002
   17226:	f7ff ff41 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   1722a:	4604      	mov	r4, r0
   1722c:	2800      	cmp	r0, #0
   1722e:	d1de      	bne.n	171ee <common_init+0x3e>
	read_supported_commands_complete(rsp);
   17230:	9801      	ldr	r0, [sp, #4]
   17232:	f7ff f9e1 	bl	165f8 <read_supported_commands_complete>
	net_buf_unref(rsp);
   17236:	9801      	ldr	r0, [sp, #4]
   17238:	f005 fb14 	bl	1c864 <net_buf_unref>
	return 0;
   1723c:	e7d7      	b.n	171ee <common_init+0x3e>
   1723e:	bf00      	nop
   17240:	200002b0 	.word	0x200002b0

00017244 <hci_le_read_max_data_len>:
{
   17244:	b570      	push	{r4, r5, r6, lr}
   17246:	b082      	sub	sp, #8
   17248:	4605      	mov	r5, r0
   1724a:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1724c:	aa01      	add	r2, sp, #4
   1724e:	2100      	movs	r1, #0
   17250:	f242 002f 	movw	r0, #8239	; 0x202f
   17254:	f7ff ff2a 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   17258:	4606      	mov	r6, r0
   1725a:	b960      	cbnz	r0, 17276 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   1725c:	9801      	ldr	r0, [sp, #4]
   1725e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   17260:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17264:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17266:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1726a:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   1726c:	f005 fafa 	bl	1c864 <net_buf_unref>
}
   17270:	4630      	mov	r0, r6
   17272:	b002      	add	sp, #8
   17274:	bd70      	pop	{r4, r5, r6, pc}
   17276:	4b08      	ldr	r3, [pc, #32]	; (17298 <hci_le_read_max_data_len+0x54>)
   17278:	4a08      	ldr	r2, [pc, #32]	; (1729c <hci_le_read_max_data_len+0x58>)
   1727a:	1a9b      	subs	r3, r3, r2
   1727c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to read DLE max data len");
   1727e:	f04f 0100 	mov.w	r1, #0
   17282:	2201      	movs	r2, #1
   17284:	f362 0102 	bfi	r1, r2, #0, #3
   17288:	f36f 01c5 	bfc	r1, #3, #3
   1728c:	f363 118f 	bfi	r1, r3, #6, #10
   17290:	4803      	ldr	r0, [pc, #12]	; (172a0 <hci_le_read_max_data_len+0x5c>)
   17292:	f7fc fb05 	bl	138a0 <log_0>
		return err;
   17296:	e7eb      	b.n	17270 <hci_le_read_max_data_len+0x2c>
   17298:	00031938 	.word	0x00031938
   1729c:	00031908 	.word	0x00031908
   172a0:	000338c4 	.word	0x000338c4

000172a4 <le_set_event_mask>:
{
   172a4:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   172a6:	2108      	movs	r1, #8
   172a8:	f242 0001 	movw	r0, #8193	; 0x2001
   172ac:	f7ff feae 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   172b0:	b398      	cbz	r0, 1731a <le_set_event_mask+0x76>
   172b2:	4604      	mov	r4, r0
   172b4:	2108      	movs	r1, #8
   172b6:	4408      	add	r0, r1
   172b8:	f005 fc06 	bl	1cac8 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   172bc:	4b18      	ldr	r3, [pc, #96]	; (17320 <le_set_event_mask+0x7c>)
   172be:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
   172c2:	f011 0f02 	tst.w	r1, #2
   172c6:	d125      	bne.n	17314 <le_set_event_mask+0x70>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   172c8:	220f      	movs	r2, #15
   172ca:	2300      	movs	r3, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   172cc:	f011 0f20 	tst.w	r1, #32
   172d0:	d001      	beq.n	172d6 <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   172d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   172d6:	4912      	ldr	r1, [pc, #72]	; (17320 <le_set_event_mask+0x7c>)
   172d8:	f891 10d1 	ldrb.w	r1, [r1, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   172dc:	f011 0f09 	tst.w	r1, #9
   172e0:	d001      	beq.n	172e6 <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   172e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	dst[0] = val;
   172e6:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   172e8:	f3c2 2107 	ubfx	r1, r2, #8, #8
   172ec:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   172ee:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   172f0:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   172f2:	0e12      	lsrs	r2, r2, #24
   172f4:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   172f6:	b29a      	uxth	r2, r3
	dst[0] = val;
   172f8:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   172fa:	0a12      	lsrs	r2, r2, #8
   172fc:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   172fe:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   17300:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   17302:	0a13      	lsrs	r3, r2, #8
   17304:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   17306:	2200      	movs	r2, #0
   17308:	4621      	mov	r1, r4
   1730a:	f242 0001 	movw	r0, #8193	; 0x2001
   1730e:	f7ff fecd 	bl	170ac <bt_hci_cmd_send_sync>
}
   17312:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   17314:	222f      	movs	r2, #47	; 0x2f
   17316:	2300      	movs	r3, #0
   17318:	e7d8      	b.n	172cc <le_set_event_mask+0x28>
		return -ENOBUFS;
   1731a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1731e:	e7f8      	b.n	17312 <le_set_event_mask+0x6e>
   17320:	200002b0 	.word	0x200002b0

00017324 <le_init>:
{
   17324:	b510      	push	{r4, lr}
   17326:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   17328:	4b50      	ldr	r3, [pc, #320]	; (1746c <le_init+0x148>)
   1732a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1732e:	f013 0f40 	tst.w	r3, #64	; 0x40
   17332:	d00a      	beq.n	1734a <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   17334:	aa01      	add	r2, sp, #4
   17336:	2100      	movs	r1, #0
   17338:	f242 0003 	movw	r0, #8195	; 0x2003
   1733c:	f7ff feb6 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   17340:	4603      	mov	r3, r0
   17342:	b1a8      	cbz	r0, 17370 <le_init+0x4c>
}
   17344:	4618      	mov	r0, r3
   17346:	b002      	add	sp, #8
   17348:	bd10      	pop	{r4, pc}
   1734a:	4b49      	ldr	r3, [pc, #292]	; (17470 <le_init+0x14c>)
   1734c:	4a49      	ldr	r2, [pc, #292]	; (17474 <le_init+0x150>)
   1734e:	1a9b      	subs	r3, r3, r2
   17350:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
   17352:	f04f 0100 	mov.w	r1, #0
   17356:	2201      	movs	r2, #1
   17358:	f362 0102 	bfi	r1, r2, #0, #3
   1735c:	f36f 01c5 	bfc	r1, #3, #3
   17360:	f363 118f 	bfi	r1, r3, #6, #10
   17364:	4844      	ldr	r0, [pc, #272]	; (17478 <le_init+0x154>)
   17366:	f7fc fa9b 	bl	138a0 <log_0>
		return -ENODEV;
   1736a:	f06f 0312 	mvn.w	r3, #18
   1736e:	e7e9      	b.n	17344 <le_init+0x20>
	read_le_features_complete(rsp);
   17370:	9801      	ldr	r0, [sp, #4]
   17372:	f7ff f937 	bl	165e4 <read_le_features_complete>
	net_buf_unref(rsp);
   17376:	9801      	ldr	r0, [sp, #4]
   17378:	f005 fa74 	bl	1c864 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1737c:	aa01      	add	r2, sp, #4
   1737e:	2100      	movs	r1, #0
   17380:	f242 0002 	movw	r0, #8194	; 0x2002
   17384:	f7ff fe92 	bl	170ac <bt_hci_cmd_send_sync>
		if (err) {
   17388:	4603      	mov	r3, r0
   1738a:	2800      	cmp	r0, #0
   1738c:	d1da      	bne.n	17344 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   1738e:	9801      	ldr	r0, [sp, #4]
   17390:	f7ff f988 	bl	166a4 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   17394:	9801      	ldr	r0, [sp, #4]
   17396:	f005 fa65 	bl	1c864 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1739a:	4b34      	ldr	r3, [pc, #208]	; (1746c <le_init+0x148>)
   1739c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   173a0:	f013 0f20 	tst.w	r3, #32
   173a4:	d032      	beq.n	1740c <le_init+0xe8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   173a6:	4b31      	ldr	r3, [pc, #196]	; (1746c <le_init+0x148>)
   173a8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   173ac:	f013 0f08 	tst.w	r3, #8
   173b0:	d144      	bne.n	1743c <le_init+0x118>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   173b2:	4b2e      	ldr	r3, [pc, #184]	; (1746c <le_init+0x148>)
   173b4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   173b8:	f013 0f20 	tst.w	r3, #32
   173bc:	d022      	beq.n	17404 <le_init+0xe0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   173be:	f10d 0102 	add.w	r1, sp, #2
   173c2:	4668      	mov	r0, sp
   173c4:	f7ff ff3e 	bl	17244 <hci_le_read_max_data_len>
		if (err) {
   173c8:	4603      	mov	r3, r0
   173ca:	2800      	cmp	r0, #0
   173cc:	d1ba      	bne.n	17344 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   173ce:	2104      	movs	r1, #4
   173d0:	f242 0024 	movw	r0, #8228	; 0x2024
   173d4:	f7ff fe1a 	bl	1700c <bt_hci_cmd_create>
		if (!buf) {
   173d8:	4604      	mov	r4, r0
   173da:	2800      	cmp	r0, #0
   173dc:	d03f      	beq.n	1745e <le_init+0x13a>
   173de:	2104      	movs	r1, #4
   173e0:	3008      	adds	r0, #8
   173e2:	f005 fb71 	bl	1cac8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   173e6:	f8bd 3000 	ldrh.w	r3, [sp]
   173ea:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   173ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   173f0:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   173f2:	2200      	movs	r2, #0
   173f4:	4621      	mov	r1, r4
   173f6:	f242 0024 	movw	r0, #8228	; 0x2024
   173fa:	f7ff fe57 	bl	170ac <bt_hci_cmd_send_sync>
		if (err) {
   173fe:	4603      	mov	r3, r0
   17400:	2800      	cmp	r0, #0
   17402:	d19f      	bne.n	17344 <le_init+0x20>
	return  le_set_event_mask();
   17404:	f7ff ff4e 	bl	172a4 <le_set_event_mask>
   17408:	4603      	mov	r3, r0
   1740a:	e79b      	b.n	17344 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1740c:	2102      	movs	r1, #2
   1740e:	f640 406d 	movw	r0, #3181	; 0xc6d
   17412:	f7ff fdfb 	bl	1700c <bt_hci_cmd_create>
		if (!buf) {
   17416:	4604      	mov	r4, r0
   17418:	b320      	cbz	r0, 17464 <le_init+0x140>
   1741a:	2102      	movs	r1, #2
   1741c:	3008      	adds	r0, #8
   1741e:	f005 fb53 	bl	1cac8 <net_buf_simple_add>
		cp_le->le = 0x01;
   17422:	2301      	movs	r3, #1
   17424:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   17426:	2200      	movs	r2, #0
   17428:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1742a:	4621      	mov	r1, r4
   1742c:	f640 406d 	movw	r0, #3181	; 0xc6d
   17430:	f7ff fe3c 	bl	170ac <bt_hci_cmd_send_sync>
		if (err) {
   17434:	4603      	mov	r3, r0
   17436:	2800      	cmp	r0, #0
   17438:	d0b5      	beq.n	173a6 <le_init+0x82>
   1743a:	e783      	b.n	17344 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1743c:	aa01      	add	r2, sp, #4
   1743e:	2100      	movs	r1, #0
   17440:	f242 001c 	movw	r0, #8220	; 0x201c
   17444:	f7ff fe32 	bl	170ac <bt_hci_cmd_send_sync>
		if (err) {
   17448:	4603      	mov	r3, r0
   1744a:	2800      	cmp	r0, #0
   1744c:	f47f af7a 	bne.w	17344 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   17450:	9801      	ldr	r0, [sp, #4]
   17452:	f7ff f8ef 	bl	16634 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   17456:	9801      	ldr	r0, [sp, #4]
   17458:	f005 fa04 	bl	1c864 <net_buf_unref>
   1745c:	e7a9      	b.n	173b2 <le_init+0x8e>
			return -ENOBUFS;
   1745e:	f06f 0368 	mvn.w	r3, #104	; 0x68
   17462:	e76f      	b.n	17344 <le_init+0x20>
			return -ENOBUFS;
   17464:	f06f 0368 	mvn.w	r3, #104	; 0x68
   17468:	e76c      	b.n	17344 <le_init+0x20>
   1746a:	bf00      	nop
   1746c:	200002b0 	.word	0x200002b0
   17470:	00031938 	.word	0x00031938
   17474:	00031908 	.word	0x00031908
   17478:	000338e4 	.word	0x000338e4

0001747c <bt_br_init>:
{
   1747c:	b510      	push	{r4, lr}
   1747e:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   17480:	4b0b      	ldr	r3, [pc, #44]	; (174b0 <bt_br_init+0x34>)
   17482:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   17486:	b11b      	cbz	r3, 17490 <bt_br_init+0x14>
		return 0;
   17488:	2400      	movs	r4, #0
}
   1748a:	4620      	mov	r0, r4
   1748c:	b002      	add	sp, #8
   1748e:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   17490:	aa01      	add	r2, sp, #4
   17492:	2100      	movs	r1, #0
   17494:	f241 0005 	movw	r0, #4101	; 0x1005
   17498:	f7ff fe08 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   1749c:	4604      	mov	r4, r0
   1749e:	2800      	cmp	r0, #0
   174a0:	d1f3      	bne.n	1748a <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   174a2:	9801      	ldr	r0, [sp, #4]
   174a4:	f7ff f912 	bl	166cc <read_buffer_size_complete>
	net_buf_unref(rsp);
   174a8:	9801      	ldr	r0, [sp, #4]
   174aa:	f005 f9db 	bl	1c864 <net_buf_unref>
	return 0;
   174ae:	e7ec      	b.n	1748a <bt_br_init+0xe>
   174b0:	200002b0 	.word	0x200002b0

000174b4 <hci_vs_init>:
{
   174b4:	b510      	push	{r4, lr}
   174b6:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   174b8:	aa01      	add	r2, sp, #4
   174ba:	2100      	movs	r1, #0
   174bc:	f64f 4001 	movw	r0, #64513	; 0xfc01
   174c0:	f7ff fdf4 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   174c4:	bb38      	cbnz	r0, 17516 <hci_vs_init+0x62>
	net_buf_unref(rsp);
   174c6:	9801      	ldr	r0, [sp, #4]
   174c8:	f005 f9cc 	bl	1c864 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   174cc:	aa01      	add	r2, sp, #4
   174ce:	2100      	movs	r1, #0
   174d0:	f64f 4002 	movw	r0, #64514	; 0xfc02
   174d4:	f7ff fdea 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   174d8:	bb78      	cbnz	r0, 1753a <hci_vs_init+0x86>
	rp.cmds = (void *)rsp->data;
   174da:	9801      	ldr	r0, [sp, #4]
   174dc:	6883      	ldr	r3, [r0, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   174de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   174e2:	4c27      	ldr	r4, [pc, #156]	; (17580 <hci_vs_init+0xcc>)
   174e4:	f8a4 30b9 	strh.w	r3, [r4, #185]	; 0xb9
	net_buf_unref(rsp);
   174e8:	f005 f9bc 	bl	1c864 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   174ec:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   174f0:	f013 0f04 	tst.w	r3, #4
   174f4:	d01f      	beq.n	17536 <hci_vs_init+0x82>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   174f6:	aa01      	add	r2, sp, #4
   174f8:	2100      	movs	r1, #0
   174fa:	f64f 4003 	movw	r0, #64515	; 0xfc03
   174fe:	f7ff fdd5 	bl	170ac <bt_hci_cmd_send_sync>
		if (err) {
   17502:	bb58      	cbnz	r0, 1755c <hci_vs_init+0xa8>
		rp.feat = (void *)rsp->data;
   17504:	9801      	ldr	r0, [sp, #4]
   17506:	6883      	ldr	r3, [r0, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   17508:	785a      	ldrb	r2, [r3, #1]
   1750a:	4b1d      	ldr	r3, [pc, #116]	; (17580 <hci_vs_init+0xcc>)
   1750c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		net_buf_unref(rsp);
   17510:	f005 f9a8 	bl	1c864 <net_buf_unref>
   17514:	e00f      	b.n	17536 <hci_vs_init+0x82>
   17516:	4b1b      	ldr	r3, [pc, #108]	; (17584 <hci_vs_init+0xd0>)
   17518:	4a1b      	ldr	r2, [pc, #108]	; (17588 <hci_vs_init+0xd4>)
   1751a:	1a9b      	subs	r3, r3, r2
   1751c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Vendor HCI extensions not available");
   1751e:	f04f 0100 	mov.w	r1, #0
   17522:	2202      	movs	r2, #2
   17524:	f362 0102 	bfi	r1, r2, #0, #3
   17528:	f36f 01c5 	bfc	r1, #3, #3
   1752c:	f363 118f 	bfi	r1, r3, #6, #10
   17530:	4816      	ldr	r0, [pc, #88]	; (1758c <hci_vs_init+0xd8>)
   17532:	f7fc f9b5 	bl	138a0 <log_0>
}
   17536:	b002      	add	sp, #8
   17538:	bd10      	pop	{r4, pc}
   1753a:	4b12      	ldr	r3, [pc, #72]	; (17584 <hci_vs_init+0xd0>)
   1753c:	4a12      	ldr	r2, [pc, #72]	; (17588 <hci_vs_init+0xd4>)
   1753e:	1a9b      	subs	r3, r3, r2
   17540:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read supported vendor commands");
   17542:	f04f 0100 	mov.w	r1, #0
   17546:	2202      	movs	r2, #2
   17548:	f362 0102 	bfi	r1, r2, #0, #3
   1754c:	f36f 01c5 	bfc	r1, #3, #3
   17550:	f363 118f 	bfi	r1, r3, #6, #10
   17554:	480e      	ldr	r0, [pc, #56]	; (17590 <hci_vs_init+0xdc>)
   17556:	f7fc f9a3 	bl	138a0 <log_0>
		return;
   1755a:	e7ec      	b.n	17536 <hci_vs_init+0x82>
   1755c:	4b09      	ldr	r3, [pc, #36]	; (17584 <hci_vs_init+0xd0>)
   1755e:	4a0a      	ldr	r2, [pc, #40]	; (17588 <hci_vs_init+0xd4>)
   17560:	1a9b      	subs	r3, r3, r2
   17562:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to read supported vendor features");
   17564:	f04f 0100 	mov.w	r1, #0
   17568:	2202      	movs	r2, #2
   1756a:	f362 0102 	bfi	r1, r2, #0, #3
   1756e:	f36f 01c5 	bfc	r1, #3, #3
   17572:	f363 118f 	bfi	r1, r3, #6, #10
   17576:	4807      	ldr	r0, [pc, #28]	; (17594 <hci_vs_init+0xe0>)
   17578:	f7fc f992 	bl	138a0 <log_0>
			return;
   1757c:	e7db      	b.n	17536 <hci_vs_init+0x82>
   1757e:	bf00      	nop
   17580:	200002b0 	.word	0x200002b0
   17584:	00031938 	.word	0x00031938
   17588:	00031908 	.word	0x00031908
   1758c:	00033908 	.word	0x00033908
   17590:	0003392c 	.word	0x0003392c
   17594:	00033958 	.word	0x00033958

00017598 <hci_init>:
{
   17598:	b508      	push	{r3, lr}
	err = common_init();
   1759a:	f7ff fe09 	bl	171b0 <common_init>
	if (err) {
   1759e:	4603      	mov	r3, r0
   175a0:	b108      	cbz	r0, 175a6 <hci_init+0xe>
}
   175a2:	4618      	mov	r0, r3
   175a4:	bd08      	pop	{r3, pc}
	err = le_init();
   175a6:	f7ff febd 	bl	17324 <le_init>
	if (err) {
   175aa:	4603      	mov	r3, r0
   175ac:	2800      	cmp	r0, #0
   175ae:	d1f8      	bne.n	175a2 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   175b0:	4b16      	ldr	r3, [pc, #88]	; (1760c <hci_init+0x74>)
   175b2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   175b6:	f013 0f20 	tst.w	r3, #32
   175ba:	d00e      	beq.n	175da <hci_init+0x42>
	else if (!bt_dev.le.acl_mtu) {
   175bc:	4b13      	ldr	r3, [pc, #76]	; (1760c <hci_init+0x74>)
   175be:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   175c2:	b183      	cbz	r3, 175e6 <hci_init+0x4e>
	err = set_event_mask();
   175c4:	f015 fd7c 	bl	2d0c0 <set_event_mask>
	if (err) {
   175c8:	4603      	mov	r3, r0
   175ca:	2800      	cmp	r0, #0
   175cc:	d1e9      	bne.n	175a2 <hci_init+0xa>
	hci_vs_init();
   175ce:	f7ff ff71 	bl	174b4 <hci_vs_init>
	err = bt_id_init();
   175d2:	f001 f80b 	bl	185ec <bt_id_init>
   175d6:	4603      	mov	r3, r0
	if (err) {
   175d8:	e7e3      	b.n	175a2 <hci_init+0xa>
		err = bt_br_init();
   175da:	f7ff ff4f 	bl	1747c <bt_br_init>
		if (err) {
   175de:	4603      	mov	r3, r0
   175e0:	2800      	cmp	r0, #0
   175e2:	d0ef      	beq.n	175c4 <hci_init+0x2c>
   175e4:	e7dd      	b.n	175a2 <hci_init+0xa>
   175e6:	4b0a      	ldr	r3, [pc, #40]	; (17610 <hci_init+0x78>)
   175e8:	4a0a      	ldr	r2, [pc, #40]	; (17614 <hci_init+0x7c>)
   175ea:	1a9b      	subs	r3, r3, r2
   175ec:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL BR/EDR buffers not initialized");
   175ee:	f04f 0100 	mov.w	r1, #0
   175f2:	2201      	movs	r2, #1
   175f4:	f362 0102 	bfi	r1, r2, #0, #3
   175f8:	f36f 01c5 	bfc	r1, #3, #3
   175fc:	f363 118f 	bfi	r1, r3, #6, #10
   17600:	4805      	ldr	r0, [pc, #20]	; (17618 <hci_init+0x80>)
   17602:	f7fc f94d 	bl	138a0 <log_0>
		return -EIO;
   17606:	f06f 0304 	mvn.w	r3, #4
   1760a:	e7ca      	b.n	175a2 <hci_init+0xa>
   1760c:	200002b0 	.word	0x200002b0
   17610:	00031938 	.word	0x00031938
   17614:	00031908 	.word	0x00031908
   17618:	00033984 	.word	0x00033984

0001761c <bt_send>:
{
   1761c:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   1761e:	4b03      	ldr	r3, [pc, #12]	; (1762c <bt_send+0x10>)
   17620:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   17624:	691b      	ldr	r3, [r3, #16]
   17626:	4798      	blx	r3
}
   17628:	bd08      	pop	{r3, pc}
   1762a:	bf00      	nop
   1762c:	200002b0 	.word	0x200002b0

00017630 <bt_hci_cmd_send>:
{
   17630:	b538      	push	{r3, r4, r5, lr}
   17632:	4604      	mov	r4, r0
	if (!buf) {
   17634:	460d      	mov	r5, r1
   17636:	b151      	cbz	r1, 1764e <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   17638:	f640 4335 	movw	r3, #3125	; 0xc35
   1763c:	429c      	cmp	r4, r3
   1763e:	d00e      	beq.n	1765e <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   17640:	4629      	mov	r1, r5
   17642:	4814      	ldr	r0, [pc, #80]	; (17694 <bt_hci_cmd_send+0x64>)
   17644:	f005 f8d6 	bl	1c7f4 <net_buf_put>
	return 0;
   17648:	2400      	movs	r4, #0
}
   1764a:	4620      	mov	r0, r4
   1764c:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   1764e:	f7ff fcdd 	bl	1700c <bt_hci_cmd_create>
		if (!buf) {
   17652:	4605      	mov	r5, r0
   17654:	2800      	cmp	r0, #0
   17656:	d1ef      	bne.n	17638 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   17658:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1765c:	e7f5      	b.n	1764a <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   1765e:	4628      	mov	r0, r5
   17660:	f7ff ffdc 	bl	1761c <bt_send>
		if (err) {
   17664:	4604      	mov	r4, r0
   17666:	2800      	cmp	r0, #0
   17668:	d0ef      	beq.n	1764a <bt_hci_cmd_send+0x1a>
   1766a:	4b0b      	ldr	r3, [pc, #44]	; (17698 <bt_hci_cmd_send+0x68>)
   1766c:	4a0b      	ldr	r2, [pc, #44]	; (1769c <bt_hci_cmd_send+0x6c>)
   1766e:	1a9b      	subs	r3, r3, r2
   17670:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   17672:	f04f 0200 	mov.w	r2, #0
   17676:	2101      	movs	r1, #1
   17678:	f361 0202 	bfi	r2, r1, #0, #3
   1767c:	f36f 02c5 	bfc	r2, #3, #3
   17680:	f363 128f 	bfi	r2, r3, #6, #10
   17684:	4601      	mov	r1, r0
   17686:	4806      	ldr	r0, [pc, #24]	; (176a0 <bt_hci_cmd_send+0x70>)
   17688:	f7fc f93a 	bl	13900 <log_1>
			net_buf_unref(buf);
   1768c:	4628      	mov	r0, r5
   1768e:	f005 f8e9 	bl	1c864 <net_buf_unref>
		return err;
   17692:	e7da      	b.n	1764a <bt_hci_cmd_send+0x1a>
   17694:	20000400 	.word	0x20000400
   17698:	00031938 	.word	0x00031938
   1769c:	00031908 	.word	0x00031908
   176a0:	000339a8 	.word	0x000339a8

000176a4 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   176a4:	7a83      	ldrb	r3, [r0, #10]
   176a6:	2b07      	cmp	r3, #7
   176a8:	d000      	beq.n	176ac <conn_auto_initiate+0x8>
   176aa:	4770      	bx	lr
{
   176ac:	b530      	push	{r4, r5, lr}
   176ae:	b085      	sub	sp, #20
   176b0:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   176b2:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   176b4:	f3bf 8f5b 	dmb	ish
   176b8:	6843      	ldr	r3, [r0, #4]
   176ba:	f3bf 8f5b 	dmb	ish
   176be:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   176c2:	d10b      	bne.n	176dc <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   176c4:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   176c6:	b12b      	cbz	r3, 176d4 <conn_auto_initiate+0x30>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   176c8:	4b37      	ldr	r3, [pc, #220]	; (177a8 <conn_auto_initiate+0x104>)
   176ca:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   176ce:	f013 0f08 	tst.w	r3, #8
   176d2:	d003      	beq.n	176dc <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   176d4:	4620      	mov	r0, r4
   176d6:	f015 fd99 	bl	2d20c <hci_le_read_remote_features>
		if (!err) {
   176da:	b1d0      	cbz	r0, 17712 <conn_auto_initiate+0x6e>
   176dc:	f3bf 8f5b 	dmb	ish
   176e0:	6863      	ldr	r3, [r4, #4]
   176e2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   176e6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   176ea:	d105      	bne.n	176f8 <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   176ec:	4b2e      	ldr	r3, [pc, #184]	; (177a8 <conn_auto_initiate+0x104>)
   176ee:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   176f2:	f013 0f01 	tst.w	r3, #1
   176f6:	d10e      	bne.n	17716 <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   176f8:	4b2b      	ldr	r3, [pc, #172]	; (177a8 <conn_auto_initiate+0x104>)
   176fa:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   176fe:	f013 0f20 	tst.w	r3, #32
   17702:	d006      	beq.n	17712 <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   17704:	4b28      	ldr	r3, [pc, #160]	; (177a8 <conn_auto_initiate+0x104>)
   17706:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   1770a:	689b      	ldr	r3, [r3, #8]
   1770c:	f013 0f02 	tst.w	r3, #2
   17710:	d128      	bne.n	17764 <conn_auto_initiate+0xc0>
}
   17712:	b005      	add	sp, #20
   17714:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   17716:	2100      	movs	r1, #0
   17718:	9100      	str	r1, [sp, #0]
   1771a:	2302      	movs	r3, #2
   1771c:	461a      	mov	r2, r3
   1771e:	4620      	mov	r0, r4
   17720:	f015 fd50 	bl	2d1c4 <bt_le_set_phy>
		if (!err) {
   17724:	4601      	mov	r1, r0
   17726:	b180      	cbz	r0, 1774a <conn_auto_initiate+0xa6>
   17728:	4b20      	ldr	r3, [pc, #128]	; (177ac <conn_auto_initiate+0x108>)
   1772a:	4a21      	ldr	r2, [pc, #132]	; (177b0 <conn_auto_initiate+0x10c>)
   1772c:	1a9b      	subs	r3, r3, r2
   1772e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set LE PHY (%d)", err);
   17730:	f04f 0200 	mov.w	r2, #0
   17734:	2001      	movs	r0, #1
   17736:	f360 0202 	bfi	r2, r0, #0, #3
   1773a:	f36f 02c5 	bfc	r2, #3, #3
   1773e:	f363 128f 	bfi	r2, r3, #6, #10
   17742:	481c      	ldr	r0, [pc, #112]	; (177b4 <conn_auto_initiate+0x110>)
   17744:	f7fc f8dc 	bl	13900 <log_1>
   17748:	e7d6      	b.n	176f8 <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1774a:	f3bf 8f5b 	dmb	ish
   1774e:	e855 3f00 	ldrex	r3, [r5]
   17752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17756:	e845 3200 	strex	r2, r3, [r5]
   1775a:	2a00      	cmp	r2, #0
   1775c:	d1f7      	bne.n	1774e <conn_auto_initiate+0xaa>
   1775e:	f3bf 8f5b 	dmb	ish
			return;
   17762:	e7d6      	b.n	17712 <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17764:	f10d 010e 	add.w	r1, sp, #14
   17768:	a803      	add	r0, sp, #12
   1776a:	f7ff fd6b 	bl	17244 <hci_le_read_max_data_len>
			if (!err) {
   1776e:	2800      	cmp	r0, #0
   17770:	d1cf      	bne.n	17712 <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   17772:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   17776:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1777a:	4620      	mov	r0, r4
   1777c:	f015 fd06 	bl	2d18c <bt_le_set_data_len>
				if (err) {
   17780:	4601      	mov	r1, r0
   17782:	2800      	cmp	r0, #0
   17784:	d0c5      	beq.n	17712 <conn_auto_initiate+0x6e>
   17786:	4b09      	ldr	r3, [pc, #36]	; (177ac <conn_auto_initiate+0x108>)
   17788:	4a09      	ldr	r2, [pc, #36]	; (177b0 <conn_auto_initiate+0x10c>)
   1778a:	1a9b      	subs	r3, r3, r2
   1778c:	08db      	lsrs	r3, r3, #3
					BT_ERR("Failed to set data len (%d)", err);
   1778e:	f04f 0200 	mov.w	r2, #0
   17792:	2001      	movs	r0, #1
   17794:	f360 0202 	bfi	r2, r0, #0, #3
   17798:	f36f 02c5 	bfc	r2, #3, #3
   1779c:	f363 128f 	bfi	r2, r3, #6, #10
   177a0:	4805      	ldr	r0, [pc, #20]	; (177b8 <conn_auto_initiate+0x114>)
   177a2:	f7fc f8ad 	bl	13900 <log_1>
		}
   177a6:	e7b4      	b.n	17712 <conn_auto_initiate+0x6e>
   177a8:	200002b0 	.word	0x200002b0
   177ac:	00031938 	.word	0x00031938
   177b0:	00031908 	.word	0x00031908
   177b4:	000339cc 	.word	0x000339cc
   177b8:	000339e8 	.word	0x000339e8

000177bc <bt_hci_le_enh_conn_complete>:
{
   177bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177c0:	b084      	sub	sp, #16
   177c2:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   177c4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   177c8:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   177cc:	4640      	mov	r0, r8
   177ce:	f7fe fedd 	bl	1658c <conn_handle_is_disconnected>
   177d2:	4606      	mov	r6, r0
	if (evt->status) {
   177d4:	7820      	ldrb	r0, [r4, #0]
   177d6:	b1b0      	cbz	r0, 17806 <bt_hci_le_enh_conn_complete+0x4a>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   177d8:	283c      	cmp	r0, #60	; 0x3c
   177da:	d011      	beq.n	17800 <bt_hci_le_enh_conn_complete+0x44>
   177dc:	4b70      	ldr	r3, [pc, #448]	; (179a0 <bt_hci_le_enh_conn_complete+0x1e4>)
   177de:	4a71      	ldr	r2, [pc, #452]	; (179a4 <bt_hci_le_enh_conn_complete+0x1e8>)
   177e0:	1a9b      	subs	r3, r3, r2
   177e2:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected status 0x%02x", evt->status);
   177e4:	f04f 0200 	mov.w	r2, #0
   177e8:	2102      	movs	r1, #2
   177ea:	f361 0202 	bfi	r2, r1, #0, #3
   177ee:	f36f 02c5 	bfc	r2, #3, #3
   177f2:	f363 128f 	bfi	r2, r3, #6, #10
   177f6:	4601      	mov	r1, r0
   177f8:	486b      	ldr	r0, [pc, #428]	; (179a8 <bt_hci_le_enh_conn_complete+0x1ec>)
   177fa:	f7fc f881 	bl	13900 <log_1>
		return;
   177fe:	e056      	b.n	178ae <bt_hci_le_enh_conn_complete+0xf2>
			le_conn_complete_adv_timeout();
   17800:	f7fe ffba 	bl	16778 <le_conn_complete_adv_timeout>
			return;
   17804:	e053      	b.n	178ae <bt_hci_le_enh_conn_complete+0xf2>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   17806:	7923      	ldrb	r3, [r4, #4]
   17808:	3b02      	subs	r3, #2
   1780a:	b2db      	uxtb	r3, r3
   1780c:	2b01      	cmp	r3, #1
   1780e:	d951      	bls.n	178b4 <bt_hci_le_enh_conn_complete+0xf8>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   17810:	78e3      	ldrb	r3, [r4, #3]
   17812:	2b01      	cmp	r3, #1
   17814:	d068      	beq.n	178e8 <bt_hci_le_enh_conn_complete+0x12c>
				bt_lookup_id_addr(id, &evt->peer_addr));
   17816:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   17818:	4629      	mov	r1, r5
   1781a:	f015 fd83 	bl	2d324 <bt_lookup_id_addr>
   1781e:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   17820:	6800      	ldr	r0, [r0, #0]
   17822:	9000      	str	r0, [sp, #0]
   17824:	889a      	ldrh	r2, [r3, #4]
   17826:	799b      	ldrb	r3, [r3, #6]
   17828:	f8ad 2004 	strh.w	r2, [sp, #4]
   1782c:	f88d 3006 	strb.w	r3, [sp, #6]
   17830:	6860      	ldr	r0, [r4, #4]
   17832:	9002      	str	r0, [sp, #8]
   17834:	8922      	ldrh	r2, [r4, #8]
   17836:	7aa3      	ldrb	r3, [r4, #10]
   17838:	f8ad 200c 	strh.w	r2, [sp, #12]
   1783c:	f88d 300e 	strb.w	r3, [sp, #14]
	conn = find_pending_connect(evt->role, &id_addr);
   17840:	4669      	mov	r1, sp
   17842:	78e0      	ldrb	r0, [r4, #3]
   17844:	f7fe ff72 	bl	1672c <find_pending_connect>
   17848:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   1784a:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1784c:	2b01      	cmp	r3, #1
   1784e:	d04f      	beq.n	178f0 <bt_hci_le_enh_conn_complete+0x134>
	if (!conn) {
   17850:	2d00      	cmp	r5, #0
   17852:	d060      	beq.n	17916 <bt_hci_le_enh_conn_complete+0x15a>
	conn->handle = handle;
   17854:	462b      	mov	r3, r5
   17856:	f823 7b90 	strh.w	r7, [r3], #144
   1785a:	9800      	ldr	r0, [sp, #0]
   1785c:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
   17860:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   17864:	f89d 2006 	ldrb.w	r2, [sp, #6]
   17868:	8099      	strh	r1, [r3, #4]
   1786a:	719a      	strb	r2, [r3, #6]
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1786c:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   17870:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   17874:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   17878:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1787c:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   17880:	f8a5 30ae 	strh.w	r3, [r5, #174]	; 0xae
	conn->role = evt->role;
   17884:	78e3      	ldrb	r3, [r4, #3]
   17886:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   17888:	2200      	movs	r2, #0
   1788a:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1788c:	2b01      	cmp	r3, #1
   1788e:	d05c      	beq.n	1794a <bt_hci_le_enh_conn_complete+0x18e>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   17890:	2107      	movs	r1, #7
   17892:	4628      	mov	r0, r5
   17894:	f001 fe18 	bl	194c8 <bt_conn_set_state>
	if (is_disconnected) {
   17898:	2e00      	cmp	r6, #0
   1789a:	d17b      	bne.n	17994 <bt_hci_le_enh_conn_complete+0x1d8>
	bt_conn_connected(conn);
   1789c:	4628      	mov	r0, r5
   1789e:	f016 f827 	bl	2d8f0 <bt_conn_connected>
	conn_auto_initiate(conn);
   178a2:	4628      	mov	r0, r5
   178a4:	f7ff fefe 	bl	176a4 <conn_auto_initiate>
	bt_conn_unref(conn);
   178a8:	4628      	mov	r0, r5
   178aa:	f001 fdc9 	bl	19440 <bt_conn_unref>
}
   178ae:	b004      	add	sp, #16
   178b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   178b4:	4623      	mov	r3, r4
   178b6:	f853 0f04 	ldr.w	r0, [r3, #4]!
   178ba:	9000      	str	r0, [sp, #0]
   178bc:	889a      	ldrh	r2, [r3, #4]
   178be:	799b      	ldrb	r3, [r3, #6]
   178c0:	f8ad 2004 	strh.w	r2, [sp, #4]
   178c4:	f88d 3006 	strb.w	r3, [sp, #6]
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   178c8:	b2c0      	uxtb	r0, r0
   178ca:	3802      	subs	r0, #2
   178cc:	f88d 0000 	strb.w	r0, [sp]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   178d0:	4623      	mov	r3, r4
	memcpy(dst, src, sizeof(*dst));
   178d2:	f853 2f11 	ldr.w	r2, [r3, #17]!
   178d6:	f8cd 2009 	str.w	r2, [sp, #9]
   178da:	889b      	ldrh	r3, [r3, #4]
   178dc:	f8ad 300d 	strh.w	r3, [sp, #13]
		peer_addr.type = BT_ADDR_LE_RANDOM;
   178e0:	2301      	movs	r3, #1
   178e2:	f88d 3008 	strb.w	r3, [sp, #8]
   178e6:	e7ab      	b.n	17840 <bt_hci_le_enh_conn_complete+0x84>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   178e8:	4b30      	ldr	r3, [pc, #192]	; (179ac <bt_hci_le_enh_conn_complete+0x1f0>)
   178ea:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   178ee:	e792      	b.n	17816 <bt_hci_le_enh_conn_complete+0x5a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   178f0:	f001 f808 	bl	18904 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   178f4:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   178f8:	f3bf 8f5b 	dmb	ish
   178fc:	e853 2f00 	ldrex	r2, [r3]
   17900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   17904:	e843 2100 	strex	r1, r2, [r3]
   17908:	2900      	cmp	r1, #0
   1790a:	d1f7      	bne.n	178fc <bt_hci_le_enh_conn_complete+0x140>
   1790c:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   17910:	f015 fe6e 	bl	2d5f0 <bt_le_lim_adv_cancel_timeout>
   17914:	e79c      	b.n	17850 <bt_hci_le_enh_conn_complete+0x94>
   17916:	4b22      	ldr	r3, [pc, #136]	; (179a0 <bt_hci_le_enh_conn_complete+0x1e4>)
   17918:	4a22      	ldr	r2, [pc, #136]	; (179a4 <bt_hci_le_enh_conn_complete+0x1e8>)
   1791a:	1a9b      	subs	r3, r3, r2
   1791c:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending conn for peer %s",
   1791e:	2201      	movs	r2, #1
   17920:	f362 0502 	bfi	r5, r2, #0, #3
   17924:	f36f 05c5 	bfc	r5, #3, #3
   17928:	f363 158f 	bfi	r5, r3, #6, #10
   1792c:	1d20      	adds	r0, r4, #4
   1792e:	f7fe fd11 	bl	16354 <bt_addr_le_str_real>
   17932:	f7fb fe43 	bl	135bc <z_log_strdup>
   17936:	4601      	mov	r1, r0
   17938:	462a      	mov	r2, r5
   1793a:	481d      	ldr	r0, [pc, #116]	; (179b0 <bt_hci_le_enh_conn_complete+0x1f4>)
   1793c:	f7fb ffe0 	bl	13900 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   17940:	211f      	movs	r1, #31
   17942:	4640      	mov	r0, r8
   17944:	f015 fbde 	bl	2d104 <bt_hci_disconnect>
		return;
   17948:	e7b1      	b.n	178ae <bt_hci_le_enh_conn_complete+0xf2>
   1794a:	9802      	ldr	r0, [sp, #8]
   1794c:	f8c5 0097 	str.w	r0, [r5, #151]	; 0x97
   17950:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   17954:	f89d 300e 	ldrb.w	r3, [sp, #14]
   17958:	f8a5 209b 	strh.w	r2, [r5, #155]	; 0x9b
   1795c:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   17960:	f000 ffd0 	bl	18904 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   17964:	7a2b      	ldrb	r3, [r5, #8]
   17966:	4a11      	ldr	r2, [pc, #68]	; (179ac <bt_hci_le_enh_conn_complete+0x1f0>)
   17968:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1796c:	18d1      	adds	r1, r2, r3
   1796e:	58d3      	ldr	r3, [r2, r3]
   17970:	f8c5 309e 	str.w	r3, [r5, #158]	; 0x9e
   17974:	8888      	ldrh	r0, [r1, #4]
   17976:	798b      	ldrb	r3, [r1, #6]
   17978:	f8a5 00a2 	strh.w	r0, [r5, #162]	; 0xa2
   1797c:	f885 30a4 	strb.w	r3, [r5, #164]	; 0xa4
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   17980:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   17984:	2200      	movs	r2, #0
   17986:	f001 0340 	and.w	r3, r1, #64	; 0x40
   1798a:	4313      	orrs	r3, r2
   1798c:	d080      	beq.n	17890 <bt_hci_le_enh_conn_complete+0xd4>
			bt_le_adv_resume();
   1798e:	f015 fe34 	bl	2d5fa <bt_le_adv_resume>
   17992:	e77d      	b.n	17890 <bt_hci_le_enh_conn_complete+0xd4>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   17994:	2101      	movs	r1, #1
   17996:	4628      	mov	r0, r5
   17998:	f001 fd96 	bl	194c8 <bt_conn_set_state>
   1799c:	e77e      	b.n	1789c <bt_hci_le_enh_conn_complete+0xe0>
   1799e:	bf00      	nop
   179a0:	00031938 	.word	0x00031938
   179a4:	00031908 	.word	0x00031908
   179a8:	00033a04 	.word	0x00033a04
   179ac:	200002b0 	.word	0x200002b0
   179b0:	00033a20 	.word	0x00033a20

000179b4 <le_phy_update_complete>:
{
   179b4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   179b6:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   179b8:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   179bc:	4628      	mov	r0, r5
   179be:	f001 fd79 	bl	194b4 <bt_conn_lookup_handle>
	if (!conn) {
   179c2:	b1a0      	cbz	r0, 179ee <le_phy_update_complete+0x3a>
   179c4:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   179c6:	1d03      	adds	r3, r0, #4
   179c8:	f3bf 8f5b 	dmb	ish
   179cc:	e853 2f00 	ldrex	r2, [r3]
   179d0:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   179d4:	e843 1000 	strex	r0, r1, [r3]
   179d8:	2800      	cmp	r0, #0
   179da:	d1f7      	bne.n	179cc <le_phy_update_complete+0x18>
   179dc:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   179e0:	f012 0f80 	tst.w	r2, #128	; 0x80
   179e4:	d115      	bne.n	17a12 <le_phy_update_complete+0x5e>
	bt_conn_unref(conn);
   179e6:	4620      	mov	r0, r4
   179e8:	f001 fd2a 	bl	19440 <bt_conn_unref>
}
   179ec:	bd38      	pop	{r3, r4, r5, pc}
   179ee:	4b11      	ldr	r3, [pc, #68]	; (17a34 <le_phy_update_complete+0x80>)
   179f0:	4a11      	ldr	r2, [pc, #68]	; (17a38 <le_phy_update_complete+0x84>)
   179f2:	1a9b      	subs	r3, r3, r2
   179f4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   179f6:	f04f 0200 	mov.w	r2, #0
   179fa:	2101      	movs	r1, #1
   179fc:	f361 0202 	bfi	r2, r1, #0, #3
   17a00:	f36f 02c5 	bfc	r2, #3, #3
   17a04:	f363 128f 	bfi	r2, r3, #6, #10
   17a08:	4629      	mov	r1, r5
   17a0a:	480c      	ldr	r0, [pc, #48]	; (17a3c <le_phy_update_complete+0x88>)
   17a0c:	f7fb ff78 	bl	13900 <log_1>
		return;
   17a10:	e7ec      	b.n	179ec <le_phy_update_complete+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17a12:	f3bf 8f5b 	dmb	ish
   17a16:	e853 2f00 	ldrex	r2, [r3]
   17a1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   17a1e:	e843 2100 	strex	r1, r2, [r3]
   17a22:	2900      	cmp	r1, #0
   17a24:	d1f7      	bne.n	17a16 <le_phy_update_complete+0x62>
   17a26:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   17a2a:	4620      	mov	r0, r4
   17a2c:	f7ff fe3a 	bl	176a4 <conn_auto_initiate>
   17a30:	e7d9      	b.n	179e6 <le_phy_update_complete+0x32>
   17a32:	bf00      	nop
   17a34:	00031938 	.word	0x00031938
   17a38:	00031908 	.word	0x00031908
   17a3c:	0003364c 	.word	0x0003364c

00017a40 <le_remote_feat_complete>:
{
   17a40:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   17a42:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17a44:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   17a48:	4630      	mov	r0, r6
   17a4a:	f001 fd33 	bl	194b4 <bt_conn_lookup_handle>
	if (!conn) {
   17a4e:	b1e8      	cbz	r0, 17a8c <le_remote_feat_complete+0x4c>
   17a50:	4605      	mov	r5, r0
	if (!evt->status) {
   17a52:	7823      	ldrb	r3, [r4, #0]
   17a54:	b933      	cbnz	r3, 17a64 <le_remote_feat_complete+0x24>
   17a56:	f854 2f03 	ldr.w	r2, [r4, #3]!
   17a5a:	6863      	ldr	r3, [r4, #4]
   17a5c:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
   17a60:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   17a64:	1d2b      	adds	r3, r5, #4
   17a66:	f3bf 8f5b 	dmb	ish
   17a6a:	e853 2f00 	ldrex	r2, [r3]
   17a6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   17a72:	e843 2100 	strex	r1, r2, [r3]
   17a76:	2900      	cmp	r1, #0
   17a78:	d1f7      	bne.n	17a6a <le_remote_feat_complete+0x2a>
   17a7a:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   17a7e:	4628      	mov	r0, r5
   17a80:	f7ff fe10 	bl	176a4 <conn_auto_initiate>
	bt_conn_unref(conn);
   17a84:	4628      	mov	r0, r5
   17a86:	f001 fcdb 	bl	19440 <bt_conn_unref>
}
   17a8a:	bd70      	pop	{r4, r5, r6, pc}
   17a8c:	4b08      	ldr	r3, [pc, #32]	; (17ab0 <le_remote_feat_complete+0x70>)
   17a8e:	4a09      	ldr	r2, [pc, #36]	; (17ab4 <le_remote_feat_complete+0x74>)
   17a90:	1a9b      	subs	r3, r3, r2
   17a92:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17a94:	f04f 0200 	mov.w	r2, #0
   17a98:	2101      	movs	r1, #1
   17a9a:	f361 0202 	bfi	r2, r1, #0, #3
   17a9e:	f36f 02c5 	bfc	r2, #3, #3
   17aa2:	f363 128f 	bfi	r2, r3, #6, #10
   17aa6:	4631      	mov	r1, r6
   17aa8:	4803      	ldr	r0, [pc, #12]	; (17ab8 <le_remote_feat_complete+0x78>)
   17aaa:	f7fb ff29 	bl	13900 <log_1>
		return;
   17aae:	e7ec      	b.n	17a8a <le_remote_feat_complete+0x4a>
   17ab0:	00031938 	.word	0x00031938
   17ab4:	00031908 	.word	0x00031908
   17ab8:	0003364c 	.word	0x0003364c

00017abc <le_conn_param_neg_reply>:
{
   17abc:	b570      	push	{r4, r5, r6, lr}
   17abe:	4605      	mov	r5, r0
   17ac0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   17ac2:	2103      	movs	r1, #3
   17ac4:	f242 0021 	movw	r0, #8225	; 0x2021
   17ac8:	f7ff faa0 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   17acc:	b160      	cbz	r0, 17ae8 <le_conn_param_neg_reply+0x2c>
   17ace:	4606      	mov	r6, r0
   17ad0:	2103      	movs	r1, #3
   17ad2:	3008      	adds	r0, #8
   17ad4:	f004 fff8 	bl	1cac8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   17ad8:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   17ada:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   17adc:	4631      	mov	r1, r6
   17ade:	f242 0021 	movw	r0, #8225	; 0x2021
   17ae2:	f7ff fda5 	bl	17630 <bt_hci_cmd_send>
}
   17ae6:	bd70      	pop	{r4, r5, r6, pc}
   17ae8:	4b08      	ldr	r3, [pc, #32]	; (17b0c <le_conn_param_neg_reply+0x50>)
   17aea:	4a09      	ldr	r2, [pc, #36]	; (17b10 <le_conn_param_neg_reply+0x54>)
   17aec:	1a9b      	subs	r3, r3, r2
   17aee:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer");
   17af0:	f04f 0100 	mov.w	r1, #0
   17af4:	2201      	movs	r2, #1
   17af6:	f362 0102 	bfi	r1, r2, #0, #3
   17afa:	f36f 01c5 	bfc	r1, #3, #3
   17afe:	f363 118f 	bfi	r1, r3, #6, #10
   17b02:	4804      	ldr	r0, [pc, #16]	; (17b14 <le_conn_param_neg_reply+0x58>)
   17b04:	f7fb fecc 	bl	138a0 <log_0>
		return;
   17b08:	e7ed      	b.n	17ae6 <le_conn_param_neg_reply+0x2a>
   17b0a:	bf00      	nop
   17b0c:	00031938 	.word	0x00031938
   17b10:	00031908 	.word	0x00031908
   17b14:	00033a3c 	.word	0x00033a3c

00017b18 <le_conn_param_req>:
{
   17b18:	b530      	push	{r4, r5, lr}
   17b1a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   17b1c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   17b1e:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   17b20:	885a      	ldrh	r2, [r3, #2]
   17b22:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   17b26:	889a      	ldrh	r2, [r3, #4]
   17b28:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   17b2c:	88da      	ldrh	r2, [r3, #6]
   17b2e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17b32:	891b      	ldrh	r3, [r3, #8]
   17b34:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   17b38:	4620      	mov	r0, r4
   17b3a:	f001 fcbb 	bl	194b4 <bt_conn_lookup_handle>
	if (!conn) {
   17b3e:	b168      	cbz	r0, 17b5c <le_conn_param_req+0x44>
   17b40:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   17b42:	4669      	mov	r1, sp
   17b44:	f001 fe98 	bl	19878 <le_param_req>
   17b48:	b9f0      	cbnz	r0, 17b88 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   17b4a:	211e      	movs	r1, #30
   17b4c:	4620      	mov	r0, r4
   17b4e:	f7ff ffb5 	bl	17abc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   17b52:	4628      	mov	r0, r5
   17b54:	f001 fc74 	bl	19440 <bt_conn_unref>
}
   17b58:	b003      	add	sp, #12
   17b5a:	bd30      	pop	{r4, r5, pc}
   17b5c:	4b0d      	ldr	r3, [pc, #52]	; (17b94 <le_conn_param_req+0x7c>)
   17b5e:	4a0e      	ldr	r2, [pc, #56]	; (17b98 <le_conn_param_req+0x80>)
   17b60:	1a9b      	subs	r3, r3, r2
   17b62:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17b64:	f04f 0200 	mov.w	r2, #0
   17b68:	2101      	movs	r1, #1
   17b6a:	f361 0202 	bfi	r2, r1, #0, #3
   17b6e:	f36f 02c5 	bfc	r2, #3, #3
   17b72:	f363 128f 	bfi	r2, r3, #6, #10
   17b76:	4621      	mov	r1, r4
   17b78:	4808      	ldr	r0, [pc, #32]	; (17b9c <le_conn_param_req+0x84>)
   17b7a:	f7fb fec1 	bl	13900 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   17b7e:	2102      	movs	r1, #2
   17b80:	4620      	mov	r0, r4
   17b82:	f7ff ff9b 	bl	17abc <le_conn_param_neg_reply>
		return;
   17b86:	e7e7      	b.n	17b58 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   17b88:	4669      	mov	r1, sp
   17b8a:	4620      	mov	r0, r4
   17b8c:	f015 fb94 	bl	2d2b8 <le_conn_param_req_reply>
   17b90:	e7df      	b.n	17b52 <le_conn_param_req+0x3a>
   17b92:	bf00      	nop
   17b94:	00031938 	.word	0x00031938
   17b98:	00031908 	.word	0x00031908
   17b9c:	0003364c 	.word	0x0003364c

00017ba0 <send_cmd>:
{
   17ba0:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   17ba2:	2200      	movs	r2, #0
   17ba4:	2300      	movs	r3, #0
   17ba6:	4837      	ldr	r0, [pc, #220]	; (17c84 <send_cmd+0xe4>)
   17ba8:	f004 fdc4 	bl	1c734 <net_buf_get>
	BT_ASSERT(buf);
   17bac:	4604      	mov	r4, r0
   17bae:	b370      	cbz	r0, 17c0e <send_cmd+0x6e>
   17bb0:	4d35      	ldr	r5, [pc, #212]	; (17c88 <send_cmd+0xe8>)
   17bb2:	f04f 32ff 	mov.w	r2, #4294967295
   17bb6:	f04f 33ff 	mov.w	r3, #4294967295
   17bba:	f505 708c 	add.w	r0, r5, #280	; 0x118
   17bbe:	f00c fdcf 	bl	24760 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   17bc2:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
   17bc6:	b1b3      	cbz	r3, 17bf6 <send_cmd+0x56>
   17bc8:	4b30      	ldr	r3, [pc, #192]	; (17c8c <send_cmd+0xec>)
   17bca:	4a31      	ldr	r2, [pc, #196]	; (17c90 <send_cmd+0xf0>)
   17bcc:	1a9b      	subs	r3, r3, r2
   17bce:	08db      	lsrs	r3, r3, #3
		BT_ERR("Uncleared pending sent_cmd");
   17bd0:	f04f 0100 	mov.w	r1, #0
   17bd4:	2201      	movs	r2, #1
   17bd6:	f362 0102 	bfi	r1, r2, #0, #3
   17bda:	f36f 01c5 	bfc	r1, #3, #3
   17bde:	f363 118f 	bfi	r1, r3, #6, #10
   17be2:	482c      	ldr	r0, [pc, #176]	; (17c94 <send_cmd+0xf4>)
   17be4:	f7fb fe5c 	bl	138a0 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   17be8:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   17bec:	f004 fe3a 	bl	1c864 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17bf0:	2300      	movs	r3, #0
   17bf2:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   17bf6:	4620      	mov	r0, r4
   17bf8:	f004 fe6e 	bl	1c8d8 <net_buf_ref>
   17bfc:	4b22      	ldr	r3, [pc, #136]	; (17c88 <send_cmd+0xe8>)
   17bfe:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   17c02:	4620      	mov	r0, r4
   17c04:	f7ff fd0a 	bl	1761c <bt_send>
	if (err) {
   17c08:	4601      	mov	r1, r0
   17c0a:	b970      	cbnz	r0, 17c2a <send_cmd+0x8a>
}
   17c0c:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   17c0e:	f640 132a 	movw	r3, #2346	; 0x92a
   17c12:	4a21      	ldr	r2, [pc, #132]	; (17c98 <send_cmd+0xf8>)
   17c14:	4921      	ldr	r1, [pc, #132]	; (17c9c <send_cmd+0xfc>)
   17c16:	4822      	ldr	r0, [pc, #136]	; (17ca0 <send_cmd+0x100>)
   17c18:	f014 fa96 	bl	2c148 <printk>
   17c1c:	4040      	eors	r0, r0
   17c1e:	f380 8811 	msr	BASEPRI, r0
   17c22:	f04f 0003 	mov.w	r0, #3
   17c26:	df02      	svc	2
   17c28:	e7c2      	b.n	17bb0 <send_cmd+0x10>
   17c2a:	4b18      	ldr	r3, [pc, #96]	; (17c8c <send_cmd+0xec>)
   17c2c:	4a18      	ldr	r2, [pc, #96]	; (17c90 <send_cmd+0xf0>)
   17c2e:	1a9b      	subs	r3, r3, r2
   17c30:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   17c32:	f04f 0200 	mov.w	r2, #0
   17c36:	2001      	movs	r0, #1
   17c38:	f360 0202 	bfi	r2, r0, #0, #3
   17c3c:	f36f 02c5 	bfc	r2, #3, #3
   17c40:	f363 128f 	bfi	r2, r3, #6, #10
   17c44:	4817      	ldr	r0, [pc, #92]	; (17ca4 <send_cmd+0x104>)
   17c46:	f7fb fe5b 	bl	13900 <log_1>
	z_impl_k_sem_give(sem);
   17c4a:	4d0f      	ldr	r5, [pc, #60]	; (17c88 <send_cmd+0xe8>)
   17c4c:	f505 708c 	add.w	r0, r5, #280	; 0x118
   17c50:	f00c fd3e 	bl	246d0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   17c54:	4620      	mov	r0, r4
   17c56:	f017 f8e6 	bl	2ee26 <net_buf_id>
   17c5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17c5e:	4b12      	ldr	r3, [pc, #72]	; (17ca8 <send_cmd+0x108>)
   17c60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17c64:	4622      	mov	r2, r4
   17c66:	211f      	movs	r1, #31
   17c68:	8840      	ldrh	r0, [r0, #2]
   17c6a:	f7fe fea3 	bl	169b4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   17c6e:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   17c72:	f004 fdf7 	bl	1c864 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17c76:	2300      	movs	r3, #0
   17c78:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
		net_buf_unref(buf);
   17c7c:	4620      	mov	r0, r4
   17c7e:	f004 fdf1 	bl	1c864 <net_buf_unref>
   17c82:	e7c3      	b.n	17c0c <send_cmd+0x6c>
   17c84:	20000400 	.word	0x20000400
   17c88:	200002b0 	.word	0x200002b0
   17c8c:	00031938 	.word	0x00031938
   17c90:	00031908 	.word	0x00031908
   17c94:	00033a58 	.word	0x00033a58
   17c98:	00033758 	.word	0x00033758
   17c9c:	00034b64 	.word	0x00034b64
   17ca0:	00031df4 	.word	0x00031df4
   17ca4:	000339a8 	.word	0x000339a8
   17ca8:	20002dbc 	.word	0x20002dbc

00017cac <process_events>:
{
   17cac:	b570      	push	{r4, r5, r6, lr}
   17cae:	4604      	mov	r4, r0
   17cb0:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   17cb2:	e013      	b.n	17cdc <process_events+0x30>
				send_cmd();
   17cb4:	f7ff ff74 	bl	17ba0 <send_cmd>
   17cb8:	e00e      	b.n	17cd8 <process_events+0x2c>
   17cba:	4b12      	ldr	r3, [pc, #72]	; (17d04 <process_events+0x58>)
   17cbc:	4a12      	ldr	r2, [pc, #72]	; (17d08 <process_events+0x5c>)
   17cbe:	1a9b      	subs	r3, r3, r2
   17cc0:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   17cc2:	2202      	movs	r2, #2
   17cc4:	f362 0602 	bfi	r6, r2, #0, #3
   17cc8:	f36f 06c5 	bfc	r6, #3, #3
   17ccc:	f363 168f 	bfi	r6, r3, #6, #10
   17cd0:	4632      	mov	r2, r6
   17cd2:	480e      	ldr	r0, [pc, #56]	; (17d0c <process_events+0x60>)
   17cd4:	f7fb fe14 	bl	13900 <log_1>
	for (; count; ev++, count--) {
   17cd8:	3414      	adds	r4, #20
   17cda:	3d01      	subs	r5, #1
   17cdc:	b185      	cbz	r5, 17d00 <process_events+0x54>
		switch (ev->state) {
   17cde:	68e1      	ldr	r1, [r4, #12]
   17ce0:	f3c1 3145 	ubfx	r1, r1, #13, #6
   17ce4:	2901      	cmp	r1, #1
   17ce6:	d9f7      	bls.n	17cd8 <process_events+0x2c>
   17ce8:	2904      	cmp	r1, #4
   17cea:	d1e6      	bne.n	17cba <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   17cec:	7b23      	ldrb	r3, [r4, #12]
   17cee:	2b00      	cmp	r3, #0
   17cf0:	d0e0      	beq.n	17cb4 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   17cf2:	2b01      	cmp	r3, #1
   17cf4:	d1f0      	bne.n	17cd8 <process_events+0x2c>
					conn = CONTAINER_OF(ev->fifo,
   17cf6:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   17cf8:	3838      	subs	r0, #56	; 0x38
   17cfa:	f001 ffd1 	bl	19ca0 <bt_conn_process_tx>
   17cfe:	e7eb      	b.n	17cd8 <process_events+0x2c>
}
   17d00:	bd70      	pop	{r4, r5, r6, pc}
   17d02:	bf00      	nop
   17d04:	00031938 	.word	0x00031938
   17d08:	00031908 	.word	0x00031908
   17d0c:	00033a74 	.word	0x00033a74

00017d10 <hci_tx_thread>:
{
   17d10:	b538      	push	{r3, r4, r5, lr}
   17d12:	e005      	b.n	17d20 <hci_tx_thread+0x10>
		process_events(events, ev_count);
   17d14:	4621      	mov	r1, r4
   17d16:	4813      	ldr	r0, [pc, #76]	; (17d64 <hci_tx_thread+0x54>)
   17d18:	f7ff ffc8 	bl	17cac <process_events>
	z_impl_k_yield();
   17d1c:	f00e fc54 	bl	265c8 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   17d20:	4d10      	ldr	r5, [pc, #64]	; (17d64 <hci_tx_thread+0x54>)
   17d22:	68eb      	ldr	r3, [r5, #12]
   17d24:	f36f 3352 	bfc	r3, #13, #6
   17d28:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   17d2a:	f105 0014 	add.w	r0, r5, #20
   17d2e:	f001 fb67 	bl	19400 <bt_conn_prepare_events>
   17d32:	1c44      	adds	r4, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   17d34:	f04f 32ff 	mov.w	r2, #4294967295
   17d38:	f04f 33ff 	mov.w	r3, #4294967295
   17d3c:	4621      	mov	r1, r4
   17d3e:	4628      	mov	r0, r5
   17d40:	f00f fcb8 	bl	276b4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   17d44:	2800      	cmp	r0, #0
   17d46:	d0e5      	beq.n	17d14 <hci_tx_thread+0x4>
   17d48:	f640 1393 	movw	r3, #2451	; 0x993
   17d4c:	4a06      	ldr	r2, [pc, #24]	; (17d68 <hci_tx_thread+0x58>)
   17d4e:	4907      	ldr	r1, [pc, #28]	; (17d6c <hci_tx_thread+0x5c>)
   17d50:	4807      	ldr	r0, [pc, #28]	; (17d70 <hci_tx_thread+0x60>)
   17d52:	f014 f9f9 	bl	2c148 <printk>
   17d56:	4040      	eors	r0, r0
   17d58:	f380 8811 	msr	BASEPRI, r0
   17d5c:	f04f 0003 	mov.w	r0, #3
   17d60:	df02      	svc	2
   17d62:	e7d7      	b.n	17d14 <hci_tx_thread+0x4>
   17d64:	200005b0 	.word	0x200005b0
   17d68:	00033758 	.word	0x00033758
   17d6c:	0003387c 	.word	0x0003387c
   17d70:	00031df4 	.word	0x00031df4

00017d74 <hci_event_prio>:
{
   17d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d78:	b084      	sub	sp, #16
   17d7a:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   17d7c:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   17d80:	4628      	mov	r0, r5
   17d82:	f017 f884 	bl	2ee8e <net_buf_simple_headroom>
   17d86:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   17d8a:	89a3      	ldrh	r3, [r4, #12]
   17d8c:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17d90:	2b01      	cmp	r3, #1
   17d92:	d915      	bls.n	17dc0 <hci_event_prio+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   17d94:	2102      	movs	r1, #2
   17d96:	4628      	mov	r0, r5
   17d98:	f004 fe50 	bl	1ca3c <net_buf_simple_pull_mem>
   17d9c:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17d9e:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   17da0:	3b05      	subs	r3, #5
   17da2:	2b15      	cmp	r3, #21
   17da4:	d81c      	bhi.n	17de0 <hci_event_prio+0x6c>
   17da6:	e8df f003 	tbb	[pc, r3]
   17daa:	1b19      	.short	0x1b19
   17dac:	1b1b1b1b 	.word	0x1b1b1b1b
   17db0:	3f1b1b1b 	.word	0x3f1b1b1b
   17db4:	1b1b1b3f 	.word	0x1b1b1b3f
   17db8:	1b1b1b3f 	.word	0x1b1b1b3f
   17dbc:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17dc0:	f640 5327 	movw	r3, #3367	; 0xd27
   17dc4:	4a3b      	ldr	r2, [pc, #236]	; (17eb4 <hci_event_prio+0x140>)
   17dc6:	493c      	ldr	r1, [pc, #240]	; (17eb8 <hci_event_prio+0x144>)
   17dc8:	483c      	ldr	r0, [pc, #240]	; (17ebc <hci_event_prio+0x148>)
   17dca:	f014 f9bd 	bl	2c148 <printk>
   17dce:	4040      	eors	r0, r0
   17dd0:	f380 8811 	msr	BASEPRI, r0
   17dd4:	f04f 0003 	mov.w	r0, #3
   17dd8:	df02      	svc	2
   17dda:	e7db      	b.n	17d94 <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17ddc:	2603      	movs	r6, #3
   17dde:	e000      	b.n	17de2 <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
   17de0:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17de2:	f016 0f01 	tst.w	r6, #1
   17de6:	d021      	beq.n	17e2c <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   17de8:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   17dea:	2300      	movs	r3, #0
   17dec:	2b04      	cmp	r3, #4
   17dee:	d83f      	bhi.n	17e70 <hci_event_prio+0xfc>
		const struct event_handler *handler = &handlers[i];
   17df0:	4a33      	ldr	r2, [pc, #204]	; (17ec0 <hci_event_prio+0x14c>)
   17df2:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   17df6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   17dfa:	4295      	cmp	r5, r2
   17dfc:	d124      	bne.n	17e48 <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
   17dfe:	89a1      	ldrh	r1, [r4, #12]
   17e00:	7843      	ldrb	r3, [r0, #1]
   17e02:	4299      	cmp	r1, r3
   17e04:	d322      	bcc.n	17e4c <hci_event_prio+0xd8>
		handler->handler(buf);
   17e06:	6843      	ldr	r3, [r0, #4]
   17e08:	4620      	mov	r0, r4
   17e0a:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17e0c:	f016 0f02 	tst.w	r6, #2
   17e10:	d04c      	beq.n	17eac <hci_event_prio+0x138>
	buf->data = buf->__buf + state->offset;
   17e12:	6923      	ldr	r3, [r4, #16]
   17e14:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   17e18:	4413      	add	r3, r2
   17e1a:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   17e1c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   17e20:	81a3      	strh	r3, [r4, #12]
}
   17e22:	b004      	add	sp, #16
   17e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   17e28:	2601      	movs	r6, #1
   17e2a:	e7da      	b.n	17de2 <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17e2c:	f640 532b 	movw	r3, #3371	; 0xd2b
   17e30:	4a20      	ldr	r2, [pc, #128]	; (17eb4 <hci_event_prio+0x140>)
   17e32:	4924      	ldr	r1, [pc, #144]	; (17ec4 <hci_event_prio+0x150>)
   17e34:	4821      	ldr	r0, [pc, #132]	; (17ebc <hci_event_prio+0x148>)
   17e36:	f014 f987 	bl	2c148 <printk>
   17e3a:	4040      	eors	r0, r0
   17e3c:	f380 8811 	msr	BASEPRI, r0
   17e40:	f04f 0003 	mov.w	r0, #3
   17e44:	df02      	svc	2
   17e46:	e7cf      	b.n	17de8 <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
   17e48:	3301      	adds	r3, #1
   17e4a:	e7cf      	b.n	17dec <hci_event_prio+0x78>
   17e4c:	4a1e      	ldr	r2, [pc, #120]	; (17ec8 <hci_event_prio+0x154>)
   17e4e:	4b1f      	ldr	r3, [pc, #124]	; (17ecc <hci_event_prio+0x158>)
   17e50:	1ad2      	subs	r2, r2, r3
   17e52:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17e54:	f04f 0300 	mov.w	r3, #0
   17e58:	2001      	movs	r0, #1
   17e5a:	f360 0302 	bfi	r3, r0, #0, #3
   17e5e:	f36f 03c5 	bfc	r3, #3, #3
   17e62:	f362 138f 	bfi	r3, r2, #6, #10
   17e66:	462a      	mov	r2, r5
   17e68:	4819      	ldr	r0, [pc, #100]	; (17ed0 <hci_event_prio+0x15c>)
   17e6a:	f7fb fd7f 	bl	1396c <log_2>
			return;
   17e6e:	e7cd      	b.n	17e0c <hci_event_prio+0x98>
   17e70:	4b15      	ldr	r3, [pc, #84]	; (17ec8 <hci_event_prio+0x154>)
   17e72:	4a16      	ldr	r2, [pc, #88]	; (17ecc <hci_event_prio+0x158>)
   17e74:	1a9b      	subs	r3, r3, r2
   17e76:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   17e78:	f04f 0700 	mov.w	r7, #0
   17e7c:	2202      	movs	r2, #2
   17e7e:	f362 0702 	bfi	r7, r2, #0, #3
   17e82:	f36f 07c5 	bfc	r7, #3, #3
   17e86:	f363 178f 	bfi	r7, r3, #6, #10
   17e8a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   17e8e:	4641      	mov	r1, r8
   17e90:	68a0      	ldr	r0, [r4, #8]
   17e92:	f7fe fa37 	bl	16304 <bt_hex_real>
   17e96:	f7fb fb91 	bl	135bc <z_log_strdup>
   17e9a:	4603      	mov	r3, r0
   17e9c:	f8ad 7000 	strh.w	r7, [sp]
   17ea0:	4642      	mov	r2, r8
   17ea2:	4629      	mov	r1, r5
   17ea4:	480b      	ldr	r0, [pc, #44]	; (17ed4 <hci_event_prio+0x160>)
   17ea6:	f7fb fde1 	bl	13a6c <log_3>
   17eaa:	e7af      	b.n	17e0c <hci_event_prio+0x98>
		net_buf_unref(buf);
   17eac:	4620      	mov	r0, r4
   17eae:	f004 fcd9 	bl	1c864 <net_buf_unref>
}
   17eb2:	e7b6      	b.n	17e22 <hci_event_prio+0xae>
   17eb4:	00033758 	.word	0x00033758
   17eb8:	0003378c 	.word	0x0003378c
   17ebc:	00031df4 	.word	0x00031df4
   17ec0:	00033b84 	.word	0x00033b84
   17ec4:	00033a98 	.word	0x00033a98
   17ec8:	00031938 	.word	0x00031938
   17ecc:	00031908 	.word	0x00031908
   17ed0:	000337f0 	.word	0x000337f0
   17ed4:	00033814 	.word	0x00033814

00017ed8 <bt_recv>:
{
   17ed8:	b538      	push	{r3, r4, r5, lr}
   17eda:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17edc:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   17ede:	2d01      	cmp	r5, #1
   17ee0:	d007      	beq.n	17ef2 <bt_recv+0x1a>
   17ee2:	2d03      	cmp	r5, #3
   17ee4:	d12c      	bne.n	17f40 <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   17ee6:	4601      	mov	r1, r0
   17ee8:	4821      	ldr	r0, [pc, #132]	; (17f70 <bt_recv+0x98>)
   17eea:	f004 fc83 	bl	1c7f4 <net_buf_put>
		return 0;
   17eee:	2000      	movs	r0, #0
}
   17ef0:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   17ef2:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17ef4:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   17ef6:	3b05      	subs	r3, #5
   17ef8:	2b15      	cmp	r3, #21
   17efa:	d80e      	bhi.n	17f1a <bt_recv+0x42>
   17efc:	e8df f003 	tbb	[pc, r3]
   17f00:	0d0d0d0b 	.word	0x0d0d0d0b
   17f04:	0d0d0d0d 	.word	0x0d0d0d0d
   17f08:	0d0e0e0d 	.word	0x0d0e0e0d
   17f0c:	0d0e0d0d 	.word	0x0d0e0d0d
   17f10:	0d0d0d0d 	.word	0x0d0d0d0d
   17f14:	0e0d      	.short	0x0e0d
   17f16:	2503      	movs	r5, #3
   17f18:	e000      	b.n	17f1c <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   17f1a:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   17f1c:	f015 0f01 	tst.w	r5, #1
   17f20:	d104      	bne.n	17f2c <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17f22:	f015 0f02 	tst.w	r5, #2
   17f26:	d105      	bne.n	17f34 <bt_recv+0x5c>
		return 0;
   17f28:	2000      	movs	r0, #0
   17f2a:	e7e1      	b.n	17ef0 <bt_recv+0x18>
			hci_event_prio(buf);
   17f2c:	4620      	mov	r0, r4
   17f2e:	f7ff ff21 	bl	17d74 <hci_event_prio>
   17f32:	e7f6      	b.n	17f22 <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   17f34:	4621      	mov	r1, r4
   17f36:	480e      	ldr	r0, [pc, #56]	; (17f70 <bt_recv+0x98>)
   17f38:	f004 fc5c 	bl	1c7f4 <net_buf_put>
		return 0;
   17f3c:	2000      	movs	r0, #0
   17f3e:	e7d7      	b.n	17ef0 <bt_recv+0x18>
   17f40:	4b0c      	ldr	r3, [pc, #48]	; (17f74 <bt_recv+0x9c>)
   17f42:	4a0d      	ldr	r2, [pc, #52]	; (17f78 <bt_recv+0xa0>)
   17f44:	1a9b      	subs	r3, r3, r2
   17f46:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   17f48:	f04f 0200 	mov.w	r2, #0
   17f4c:	2101      	movs	r1, #1
   17f4e:	f361 0202 	bfi	r2, r1, #0, #3
   17f52:	f36f 02c5 	bfc	r2, #3, #3
   17f56:	f363 128f 	bfi	r2, r3, #6, #10
   17f5a:	4629      	mov	r1, r5
   17f5c:	4807      	ldr	r0, [pc, #28]	; (17f7c <bt_recv+0xa4>)
   17f5e:	f7fb fccf 	bl	13900 <log_1>
		net_buf_unref(buf);
   17f62:	4620      	mov	r0, r4
   17f64:	f004 fc7e 	bl	1c864 <net_buf_unref>
		return -EINVAL;
   17f68:	f06f 0015 	mvn.w	r0, #21
   17f6c:	e7c0      	b.n	17ef0 <bt_recv+0x18>
   17f6e:	bf00      	nop
   17f70:	200003e4 	.word	0x200003e4
   17f74:	00031938 	.word	0x00031938
   17f78:	00031908 	.word	0x00031908
   17f7c:	00033ab4 	.word	0x00033ab4

00017f80 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   17f80:	4b0a      	ldr	r3, [pc, #40]	; (17fac <bt_hci_driver_register+0x2c>)
   17f82:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   17f86:	b943      	cbnz	r3, 17f9a <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   17f88:	68c3      	ldr	r3, [r0, #12]
   17f8a:	b14b      	cbz	r3, 17fa0 <bt_hci_driver_register+0x20>
   17f8c:	6903      	ldr	r3, [r0, #16]
   17f8e:	b153      	cbz	r3, 17fa6 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   17f90:	4b06      	ldr	r3, [pc, #24]	; (17fac <bt_hci_driver_register+0x2c>)
   17f92:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
	return 0;
   17f96:	2000      	movs	r0, #0
   17f98:	4770      	bx	lr
		return -EALREADY;
   17f9a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17f9e:	4770      	bx	lr
		return -EINVAL;
   17fa0:	f06f 0015 	mvn.w	r0, #21
   17fa4:	4770      	bx	lr
   17fa6:	f06f 0015 	mvn.w	r0, #21
}
   17faa:	4770      	bx	lr
   17fac:	200002b0 	.word	0x200002b0

00017fb0 <bt_finalize_init>:
   17fb0:	4b06      	ldr	r3, [pc, #24]	; (17fcc <bt_finalize_init+0x1c>)
   17fb2:	f3bf 8f5b 	dmb	ish
   17fb6:	e853 2f00 	ldrex	r2, [r3]
   17fba:	f042 0202 	orr.w	r2, r2, #2
   17fbe:	e843 2100 	strex	r1, r2, [r3]
   17fc2:	2900      	cmp	r1, #0
   17fc4:	d1f7      	bne.n	17fb6 <bt_finalize_init+0x6>
   17fc6:	f3bf 8f5b 	dmb	ish
}
   17fca:	4770      	bx	lr
   17fcc:	2000037c 	.word	0x2000037c

00017fd0 <init_work>:
{
   17fd0:	b508      	push	{r3, lr}
	err = bt_init();
   17fd2:	f015 f996 	bl	2d302 <bt_init>
	if (ready_cb) {
   17fd6:	4b02      	ldr	r3, [pc, #8]	; (17fe0 <init_work+0x10>)
   17fd8:	681b      	ldr	r3, [r3, #0]
   17fda:	b103      	cbz	r3, 17fde <init_work+0xe>
		ready_cb(err);
   17fdc:	4798      	blx	r3
}
   17fde:	bd08      	pop	{r3, pc}
   17fe0:	20002dd8 	.word	0x20002dd8

00017fe4 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   17fe4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   17fe8:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   17fea:	4b41      	ldr	r3, [pc, #260]	; (180f0 <bt_enable+0x10c>)
   17fec:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   17ff0:	2b00      	cmp	r3, #0
   17ff2:	d050      	beq.n	18096 <bt_enable+0xb2>
   17ff4:	4605      	mov	r5, r0
   17ff6:	4b3f      	ldr	r3, [pc, #252]	; (180f4 <bt_enable+0x110>)
   17ff8:	f3bf 8f5b 	dmb	ish
   17ffc:	e853 2f00 	ldrex	r2, [r3]
   18000:	f042 0101 	orr.w	r1, r2, #1
   18004:	e843 1000 	strex	r0, r1, [r3]
   18008:	2800      	cmp	r0, #0
   1800a:	d1f7      	bne.n	17ffc <bt_enable+0x18>
   1800c:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   18010:	f012 0f01 	tst.w	r2, #1
   18014:	d168      	bne.n	180e8 <bt_enable+0x104>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   18016:	4b38      	ldr	r3, [pc, #224]	; (180f8 <bt_enable+0x114>)
   18018:	601d      	str	r5, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   1801a:	f04f 0800 	mov.w	r8, #0
   1801e:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18022:	4e36      	ldr	r6, [pc, #216]	; (180fc <bt_enable+0x118>)
   18024:	e9cd 8906 	strd	r8, r9, [sp, #24]
   18028:	2400      	movs	r4, #0
   1802a:	9404      	str	r4, [sp, #16]
   1802c:	f06f 0308 	mvn.w	r3, #8
   18030:	9303      	str	r3, [sp, #12]
   18032:	9402      	str	r4, [sp, #8]
   18034:	9401      	str	r4, [sp, #4]
   18036:	9400      	str	r4, [sp, #0]
   18038:	4b31      	ldr	r3, [pc, #196]	; (18100 <bt_enable+0x11c>)
   1803a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1803e:	4931      	ldr	r1, [pc, #196]	; (18104 <bt_enable+0x120>)
   18040:	4630      	mov	r0, r6
   18042:	f00b fec7 	bl	23dd4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18046:	4930      	ldr	r1, [pc, #192]	; (18108 <bt_enable+0x124>)
   18048:	4630      	mov	r0, r6
   1804a:	f00b fd57 	bl	23afc <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1804e:	4e2f      	ldr	r6, [pc, #188]	; (1810c <bt_enable+0x128>)
   18050:	e9cd 8906 	strd	r8, r9, [sp, #24]
   18054:	9404      	str	r4, [sp, #16]
   18056:	f06f 0307 	mvn.w	r3, #7
   1805a:	9303      	str	r3, [sp, #12]
   1805c:	9402      	str	r4, [sp, #8]
   1805e:	9401      	str	r4, [sp, #4]
   18060:	9400      	str	r4, [sp, #0]
   18062:	4b2b      	ldr	r3, [pc, #172]	; (18110 <bt_enable+0x12c>)
   18064:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18068:	492a      	ldr	r1, [pc, #168]	; (18114 <bt_enable+0x130>)
   1806a:	4630      	mov	r0, r6
   1806c:	f00b feb2 	bl	23dd4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18070:	4929      	ldr	r1, [pc, #164]	; (18118 <bt_enable+0x134>)
   18072:	4630      	mov	r0, r6
   18074:	f00b fd42 	bl	23afc <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   18078:	4b1d      	ldr	r3, [pc, #116]	; (180f0 <bt_enable+0x10c>)
   1807a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   1807e:	68db      	ldr	r3, [r3, #12]
   18080:	4798      	blx	r3
	if (err) {
   18082:	4604      	mov	r4, r0
   18084:	b9d0      	cbnz	r0, 180bc <bt_enable+0xd8>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   18086:	b35d      	cbz	r5, 180e0 <bt_enable+0xfc>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   18088:	4824      	ldr	r0, [pc, #144]	; (1811c <bt_enable+0x138>)
   1808a:	f00c ff03 	bl	24e94 <k_work_submit>
	return 0;
}
   1808e:	4620      	mov	r0, r4
   18090:	b008      	add	sp, #32
   18092:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   18096:	4b22      	ldr	r3, [pc, #136]	; (18120 <bt_enable+0x13c>)
   18098:	4a22      	ldr	r2, [pc, #136]	; (18124 <bt_enable+0x140>)
   1809a:	1a9b      	subs	r3, r3, r2
   1809c:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
   1809e:	f04f 0100 	mov.w	r1, #0
   180a2:	2201      	movs	r2, #1
   180a4:	f362 0102 	bfi	r1, r2, #0, #3
   180a8:	f36f 01c5 	bfc	r1, #3, #3
   180ac:	f363 118f 	bfi	r1, r3, #6, #10
   180b0:	481d      	ldr	r0, [pc, #116]	; (18128 <bt_enable+0x144>)
   180b2:	f7fb fbf5 	bl	138a0 <log_0>
		return -ENODEV;
   180b6:	f06f 0412 	mvn.w	r4, #18
   180ba:	e7e8      	b.n	1808e <bt_enable+0xaa>
   180bc:	4b18      	ldr	r3, [pc, #96]	; (18120 <bt_enable+0x13c>)
   180be:	4a19      	ldr	r2, [pc, #100]	; (18124 <bt_enable+0x140>)
   180c0:	1a9b      	subs	r3, r3, r2
   180c2:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
   180c4:	f04f 0200 	mov.w	r2, #0
   180c8:	2101      	movs	r1, #1
   180ca:	f361 0202 	bfi	r2, r1, #0, #3
   180ce:	f36f 02c5 	bfc	r2, #3, #3
   180d2:	f363 128f 	bfi	r2, r3, #6, #10
   180d6:	4601      	mov	r1, r0
   180d8:	4814      	ldr	r0, [pc, #80]	; (1812c <bt_enable+0x148>)
   180da:	f7fb fc11 	bl	13900 <log_1>
		return err;
   180de:	e7d6      	b.n	1808e <bt_enable+0xaa>
		return bt_init();
   180e0:	f015 f90f 	bl	2d302 <bt_init>
   180e4:	4604      	mov	r4, r0
   180e6:	e7d2      	b.n	1808e <bt_enable+0xaa>
		return -EALREADY;
   180e8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   180ec:	e7cf      	b.n	1808e <bt_enable+0xaa>
   180ee:	bf00      	nop
   180f0:	200002b0 	.word	0x200002b0
   180f4:	2000037c 	.word	0x2000037c
   180f8:	20002dd8 	.word	0x20002dd8
   180fc:	20001d38 	.word	0x20001d38
   18100:	00017d11 	.word	0x00017d11
   18104:	20005140 	.word	0x20005140
   18108:	00033ae4 	.word	0x00033ae4
   1810c:	20001c80 	.word	0x20001c80
   18110:	00016f85 	.word	0x00016f85
   18114:	20004d20 	.word	0x20004d20
   18118:	00033aec 	.word	0x00033aec
   1811c:	2000036c 	.word	0x2000036c
   18120:	00031938 	.word	0x00031938
   18124:	00031908 	.word	0x00031908
   18128:	00033ac8 	.word	0x00033ac8
   1812c:	00033af4 	.word	0x00033af4

00018130 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   18130:	4800      	ldr	r0, [pc, #0]	; (18134 <bt_get_name+0x4>)
   18132:	4770      	bx	lr
   18134:	00031fd0 	.word	0x00031fd0

00018138 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   18138:	b570      	push	{r4, r5, r6, lr}
   1813a:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1813c:	2400      	movs	r4, #0
   1813e:	4b0a      	ldr	r3, [pc, #40]	; (18168 <id_find+0x30>)
   18140:	79db      	ldrb	r3, [r3, #7]
   18142:	42a3      	cmp	r3, r4
   18144:	d90c      	bls.n	18160 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   18146:	4626      	mov	r6, r4
   18148:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1814c:	2207      	movs	r2, #7
   1814e:	4b06      	ldr	r3, [pc, #24]	; (18168 <id_find+0x30>)
   18150:	4419      	add	r1, r3
   18152:	4628      	mov	r0, r5
   18154:	f018 fb9e 	bl	30894 <memcmp>
   18158:	b120      	cbz	r0, 18164 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   1815a:	3401      	adds	r4, #1
   1815c:	b2e4      	uxtb	r4, r4
   1815e:	e7ee      	b.n	1813e <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   18160:	f06f 0601 	mvn.w	r6, #1
}
   18164:	4630      	mov	r0, r6
   18166:	bd70      	pop	{r4, r5, r6, pc}
   18168:	200002b0 	.word	0x200002b0

0001816c <set_random_address>:
{
   1816c:	b538      	push	{r3, r4, r5, lr}
   1816e:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   18170:	2206      	movs	r2, #6
   18172:	4913      	ldr	r1, [pc, #76]	; (181c0 <set_random_address+0x54>)
   18174:	f018 fb8e 	bl	30894 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   18178:	b900      	cbnz	r0, 1817c <set_random_address+0x10>
}
   1817a:	bd38      	pop	{r3, r4, r5, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1817c:	2106      	movs	r1, #6
   1817e:	f242 0005 	movw	r0, #8197	; 0x2005
   18182:	f7fe ff43 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   18186:	4605      	mov	r5, r0
   18188:	b1b8      	cbz	r0, 181ba <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1818a:	2206      	movs	r2, #6
   1818c:	4621      	mov	r1, r4
   1818e:	3008      	adds	r0, #8
   18190:	f016 fe8a 	bl	2eea8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   18194:	2200      	movs	r2, #0
   18196:	4629      	mov	r1, r5
   18198:	f242 0005 	movw	r0, #8197	; 0x2005
   1819c:	f7fe ff86 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   181a0:	2800      	cmp	r0, #0
   181a2:	d1ea      	bne.n	1817a <set_random_address+0xe>
	memcpy(dst, src, sizeof(*dst));
   181a4:	4b07      	ldr	r3, [pc, #28]	; (181c4 <set_random_address+0x58>)
   181a6:	6822      	ldr	r2, [r4, #0]
   181a8:	f8c3 2061 	str.w	r2, [r3, #97]	; 0x61
   181ac:	88a2      	ldrh	r2, [r4, #4]
   181ae:	f8a3 2065 	strh.w	r2, [r3, #101]	; 0x65
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   181b2:	2201      	movs	r2, #1
   181b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	return 0;
   181b8:	e7df      	b.n	1817a <set_random_address+0xe>
		return -ENOBUFS;
   181ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
   181be:	e7dc      	b.n	1817a <set_random_address+0xe>
   181c0:	20000311 	.word	0x20000311
   181c4:	200002b0 	.word	0x200002b0

000181c8 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   181c8:	b530      	push	{r4, r5, lr}
   181ca:	b085      	sub	sp, #20
   181cc:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   181ce:	460d      	mov	r5, r1
   181d0:	b149      	cbz	r1, 181e6 <id_create+0x1e>
   181d2:	2300      	movs	r3, #0
   181d4:	9302      	str	r3, [sp, #8]
   181d6:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   181da:	2207      	movs	r2, #7
   181dc:	a902      	add	r1, sp, #8
   181de:	4628      	mov	r0, r5
   181e0:	f018 fb58 	bl	30894 <memcmp>
   181e4:	bb00      	cbnz	r0, 18228 <id_create+0x60>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   181e6:	4668      	mov	r0, sp
   181e8:	f014 ff45 	bl	2d076 <bt_addr_le_create_static>
			if (err) {
   181ec:	4603      	mov	r3, r0
   181ee:	b9c0      	cbnz	r0, 18222 <id_create+0x5a>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   181f0:	4668      	mov	r0, sp
   181f2:	f7ff ffa1 	bl	18138 <id_find>
   181f6:	2800      	cmp	r0, #0
   181f8:	daf5      	bge.n	181e6 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   181fa:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   181fe:	4a10      	ldr	r2, [pc, #64]	; (18240 <id_create+0x78>)
   18200:	18a3      	adds	r3, r4, r2
   18202:	9800      	ldr	r0, [sp, #0]
   18204:	50a0      	str	r0, [r4, r2]
   18206:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1820a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1820e:	8099      	strh	r1, [r3, #4]
   18210:	719a      	strb	r2, [r3, #6]

		if (addr) {
   18212:	b12d      	cbz	r5, 18220 <id_create+0x58>
   18214:	681a      	ldr	r2, [r3, #0]
   18216:	602a      	str	r2, [r5, #0]
   18218:	889a      	ldrh	r2, [r3, #4]
   1821a:	799b      	ldrb	r3, [r3, #6]
   1821c:	80aa      	strh	r2, [r5, #4]
   1821e:	71ab      	strb	r3, [r5, #6]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   18220:	2300      	movs	r3, #0
}
   18222:	4618      	mov	r0, r3
   18224:	b005      	add	sp, #20
   18226:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   18228:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1822c:	4a04      	ldr	r2, [pc, #16]	; (18240 <id_create+0x78>)
   1822e:	18a3      	adds	r3, r4, r2
   18230:	6829      	ldr	r1, [r5, #0]
   18232:	50a1      	str	r1, [r4, r2]
   18234:	88a9      	ldrh	r1, [r5, #4]
   18236:	79aa      	ldrb	r2, [r5, #6]
   18238:	8099      	strh	r1, [r3, #4]
   1823a:	719a      	strb	r2, [r3, #6]
}
   1823c:	e7f0      	b.n	18220 <id_create+0x58>
   1823e:	bf00      	nop
   18240:	200002b0 	.word	0x200002b0

00018244 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   18244:	b570      	push	{r4, r5, r6, lr}
   18246:	b084      	sub	sp, #16
   18248:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1824a:	4605      	mov	r5, r0
   1824c:	b340      	cbz	r0, 182a0 <bt_id_create+0x5c>
   1824e:	2300      	movs	r3, #0
   18250:	9300      	str	r3, [sp, #0]
   18252:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   18256:	2207      	movs	r2, #7
   18258:	4669      	mov	r1, sp
   1825a:	f018 fb1b 	bl	30894 <memcmp>
   1825e:	b1f8      	cbz	r0, 182a0 <bt_id_create+0x5c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18260:	782b      	ldrb	r3, [r5, #0]
   18262:	2b01      	cmp	r3, #1
   18264:	d104      	bne.n	18270 <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   18266:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18268:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1826c:	2bc0      	cmp	r3, #192	; 0xc0
   1826e:	d012      	beq.n	18296 <bt_id_create+0x52>
   18270:	4b24      	ldr	r3, [pc, #144]	; (18304 <bt_id_create+0xc0>)
   18272:	4a25      	ldr	r2, [pc, #148]	; (18308 <bt_id_create+0xc4>)
   18274:	1a9b      	subs	r3, r3, r2
   18276:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
   18278:	f04f 0100 	mov.w	r1, #0
   1827c:	2201      	movs	r2, #1
   1827e:	f362 0102 	bfi	r1, r2, #0, #3
   18282:	f36f 01c5 	bfc	r1, #3, #3
   18286:	f363 118f 	bfi	r1, r3, #6, #10
   1828a:	4820      	ldr	r0, [pc, #128]	; (1830c <bt_id_create+0xc8>)
   1828c:	f7fb fb08 	bl	138a0 <log_0>
			return -EINVAL;
   18290:	f06f 0015 	mvn.w	r0, #21
   18294:	e028      	b.n	182e8 <bt_id_create+0xa4>
		}

		if (id_find(addr) >= 0) {
   18296:	4628      	mov	r0, r5
   18298:	f7ff ff4e 	bl	18138 <id_find>
   1829c:	2800      	cmp	r0, #0
   1829e:	da25      	bge.n	182ec <bt_id_create+0xa8>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   182a0:	bb54      	cbnz	r4, 182f8 <bt_id_create+0xb4>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   182a2:	4b1b      	ldr	r3, [pc, #108]	; (18310 <bt_id_create+0xcc>)
   182a4:	79db      	ldrb	r3, [r3, #7]
   182a6:	2b01      	cmp	r3, #1
   182a8:	d029      	beq.n	182fe <bt_id_create+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   182aa:	f3bf 8f5b 	dmb	ish
   182ae:	4b19      	ldr	r3, [pc, #100]	; (18314 <bt_id_create+0xd0>)
   182b0:	681b      	ldr	r3, [r3, #0]
   182b2:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   182b6:	f013 0f01 	tst.w	r3, #1
   182ba:	d10a      	bne.n	182d2 <bt_id_create+0x8e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   182bc:	b1cd      	cbz	r5, 182f2 <bt_id_create+0xae>
   182be:	2300      	movs	r3, #0
   182c0:	9302      	str	r3, [sp, #8]
   182c2:	f8cd 300b 	str.w	r3, [sp, #11]
   182c6:	2207      	movs	r2, #7
   182c8:	a902      	add	r1, sp, #8
   182ca:	4628      	mov	r0, r5
   182cc:	f018 fae2 	bl	30894 <memcmp>
   182d0:	b178      	cbz	r0, 182f2 <bt_id_create+0xae>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   182d2:	4b0f      	ldr	r3, [pc, #60]	; (18310 <bt_id_create+0xcc>)
   182d4:	79de      	ldrb	r6, [r3, #7]
   182d6:	1c72      	adds	r2, r6, #1
   182d8:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   182da:	4622      	mov	r2, r4
   182dc:	4629      	mov	r1, r5
   182de:	4630      	mov	r0, r6
   182e0:	f7ff ff72 	bl	181c8 <id_create>
	if (err) {
   182e4:	b900      	cbnz	r0, 182e8 <bt_id_create+0xa4>
		return err;
	}

	return new_id;
   182e6:	4630      	mov	r0, r6
}
   182e8:	b004      	add	sp, #16
   182ea:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   182ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   182f0:	e7fa      	b.n	182e8 <bt_id_create+0xa4>
			return -EINVAL;
   182f2:	f06f 0015 	mvn.w	r0, #21
   182f6:	e7f7      	b.n	182e8 <bt_id_create+0xa4>
		return -EINVAL;
   182f8:	f06f 0015 	mvn.w	r0, #21
   182fc:	e7f4      	b.n	182e8 <bt_id_create+0xa4>
		return -ENOMEM;
   182fe:	f06f 000b 	mvn.w	r0, #11
   18302:	e7f1      	b.n	182e8 <bt_id_create+0xa4>
   18304:	00031940 	.word	0x00031940
   18308:	00031908 	.word	0x00031908
   1830c:	00033bac 	.word	0x00033bac
   18310:	200002b0 	.word	0x200002b0
   18314:	2000037c 	.word	0x2000037c

00018318 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   18318:	b530      	push	{r4, r5, lr}
   1831a:	b087      	sub	sp, #28
   1831c:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1831e:	aa01      	add	r2, sp, #4
   18320:	2100      	movs	r1, #0
   18322:	f241 0009 	movw	r0, #4105	; 0x1009
   18326:	f7fe fec1 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   1832a:	b9f0      	cbnz	r0, 1836a <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   1832c:	9b01      	ldr	r3, [sp, #4]
   1832e:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18330:	3401      	adds	r4, #1
   18332:	2300      	movs	r3, #0
   18334:	9302      	str	r3, [sp, #8]
   18336:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   1833a:	2206      	movs	r2, #6
   1833c:	a902      	add	r1, sp, #8
   1833e:	4620      	mov	r0, r4
   18340:	f018 faa8 	bl	30894 <memcmp>
   18344:	b158      	cbz	r0, 1835e <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   18346:	4b18      	ldr	r3, [pc, #96]	; (183a8 <bt_id_read_public_addr+0x90>)
   18348:	e893 0003 	ldmia.w	r3, {r0, r1}
   1834c:	9004      	str	r0, [sp, #16]
   1834e:	f8ad 1014 	strh.w	r1, [sp, #20]
   18352:	2206      	movs	r2, #6
   18354:	a904      	add	r1, sp, #16
   18356:	4620      	mov	r0, r4
   18358:	f018 fa9c 	bl	30894 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1835c:	b9b8      	cbnz	r0, 1838e <bt_id_read_public_addr+0x76>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1835e:	9801      	ldr	r0, [sp, #4]
   18360:	f004 fa80 	bl	1c864 <net_buf_unref>
		return 0U;
   18364:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   18366:	b007      	add	sp, #28
   18368:	bd30      	pop	{r4, r5, pc}
   1836a:	4b10      	ldr	r3, [pc, #64]	; (183ac <bt_id_read_public_addr+0x94>)
   1836c:	4a10      	ldr	r2, [pc, #64]	; (183b0 <bt_id_read_public_addr+0x98>)
   1836e:	1a9b      	subs	r3, r3, r2
   18370:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
   18372:	f04f 0100 	mov.w	r1, #0
   18376:	2202      	movs	r2, #2
   18378:	f362 0102 	bfi	r1, r2, #0, #3
   1837c:	f36f 01c5 	bfc	r1, #3, #3
   18380:	f363 118f 	bfi	r1, r3, #6, #10
   18384:	480b      	ldr	r0, [pc, #44]	; (183b4 <bt_id_read_public_addr+0x9c>)
   18386:	f7fb fa8b 	bl	138a0 <log_0>
		return 0U;
   1838a:	2000      	movs	r0, #0
   1838c:	e7eb      	b.n	18366 <bt_id_read_public_addr+0x4e>
   1838e:	6823      	ldr	r3, [r4, #0]
   18390:	f8c5 3001 	str.w	r3, [r5, #1]
   18394:	88a3      	ldrh	r3, [r4, #4]
   18396:	f8a5 3005 	strh.w	r3, [r5, #5]
	addr->type = BT_ADDR_LE_PUBLIC;
   1839a:	2300      	movs	r3, #0
   1839c:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   1839e:	9801      	ldr	r0, [sp, #4]
   183a0:	f004 fa60 	bl	1c864 <net_buf_unref>
	return 1U;
   183a4:	2001      	movs	r0, #1
   183a6:	e7de      	b.n	18366 <bt_id_read_public_addr+0x4e>
   183a8:	00031ac8 	.word	0x00031ac8
   183ac:	00031940 	.word	0x00031940
   183b0:	00031908 	.word	0x00031908
   183b4:	00033bdc 	.word	0x00033bdc

000183b8 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   183b8:	b500      	push	{lr}
   183ba:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   183bc:	4668      	mov	r0, sp
   183be:	f7ff ffab 	bl	18318 <bt_id_read_public_addr>
   183c2:	4b06      	ldr	r3, [pc, #24]	; (183dc <bt_setup_public_id_addr+0x24>)
   183c4:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   183c6:	b918      	cbnz	r0, 183d0 <bt_setup_public_id_addr+0x18>
		return 0;
   183c8:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   183ca:	b003      	add	sp, #12
   183cc:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   183d0:	2200      	movs	r2, #0
   183d2:	4669      	mov	r1, sp
   183d4:	4610      	mov	r0, r2
   183d6:	f7ff fef7 	bl	181c8 <id_create>
   183da:	e7f6      	b.n	183ca <bt_setup_public_id_addr+0x12>
   183dc:	200002b0 	.word	0x200002b0

000183e0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   183e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183e4:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   183e6:	4b37      	ldr	r3, [pc, #220]	; (184c4 <bt_read_static_addr+0xe4>)
   183e8:	f893 60ba 	ldrb.w	r6, [r3, #186]	; 0xba
   183ec:	f016 0601 	ands.w	r6, r6, #1
   183f0:	d012      	beq.n	18418 <bt_read_static_addr+0x38>
   183f2:	4607      	mov	r7, r0
   183f4:	460d      	mov	r5, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   183f6:	aa01      	add	r2, sp, #4
   183f8:	2100      	movs	r1, #0
   183fa:	f64f 4009 	movw	r0, #64521	; 0xfc09
   183fe:	f7fe fe55 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   18402:	4604      	mov	r4, r0
   18404:	b9c8      	cbnz	r0, 1843a <bt_read_static_addr+0x5a>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   18406:	9b01      	ldr	r3, [sp, #4]
   18408:	f8d3 8008 	ldr.w	r8, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1840c:	f898 6001 	ldrb.w	r6, [r8, #1]
   18410:	42ae      	cmp	r6, r5
   18412:	bf28      	it	cs
   18414:	462e      	movcs	r6, r5
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   18416:	e039      	b.n	1848c <bt_read_static_addr+0xac>
   18418:	4b2b      	ldr	r3, [pc, #172]	; (184c8 <bt_read_static_addr+0xe8>)
   1841a:	4a2c      	ldr	r2, [pc, #176]	; (184cc <bt_read_static_addr+0xec>)
   1841c:	1a9b      	subs	r3, r3, r2
   1841e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
   18420:	f04f 0100 	mov.w	r1, #0
   18424:	2202      	movs	r2, #2
   18426:	f362 0102 	bfi	r1, r2, #0, #3
   1842a:	f36f 01c5 	bfc	r1, #3, #3
   1842e:	f363 118f 	bfi	r1, r3, #6, #10
   18432:	4827      	ldr	r0, [pc, #156]	; (184d0 <bt_read_static_addr+0xf0>)
   18434:	f7fb fa34 	bl	138a0 <log_0>
		return 0;
   18438:	e02e      	b.n	18498 <bt_read_static_addr+0xb8>
   1843a:	4b23      	ldr	r3, [pc, #140]	; (184c8 <bt_read_static_addr+0xe8>)
   1843c:	4a23      	ldr	r2, [pc, #140]	; (184cc <bt_read_static_addr+0xec>)
   1843e:	1a9b      	subs	r3, r3, r2
   18440:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
   18442:	f04f 0100 	mov.w	r1, #0
   18446:	2202      	movs	r2, #2
   18448:	f362 0102 	bfi	r1, r2, #0, #3
   1844c:	f36f 01c5 	bfc	r1, #3, #3
   18450:	f363 118f 	bfi	r1, r3, #6, #10
   18454:	481f      	ldr	r0, [pc, #124]	; (184d4 <bt_read_static_addr+0xf4>)
   18456:	f7fb fa23 	bl	138a0 <log_0>
		return 0;
   1845a:	2600      	movs	r6, #0
   1845c:	e01c      	b.n	18498 <bt_read_static_addr+0xb8>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1845e:	2116      	movs	r1, #22
   18460:	fb01 f104 	mul.w	r1, r1, r4
   18464:	187a      	adds	r2, r7, r1
   18466:	4643      	mov	r3, r8
   18468:	f853 5f02 	ldr.w	r5, [r3, #2]!
   1846c:	f8d3 e004 	ldr.w	lr, [r3, #4]
   18470:	f8d3 c008 	ldr.w	ip, [r3, #8]
   18474:	68d8      	ldr	r0, [r3, #12]
   18476:	507d      	str	r5, [r7, r1]
   18478:	f8c2 e004 	str.w	lr, [r2, #4]
   1847c:	f8c2 c008 	str.w	ip, [r2, #8]
   18480:	60d0      	str	r0, [r2, #12]
   18482:	691d      	ldr	r5, [r3, #16]
   18484:	6115      	str	r5, [r2, #16]
   18486:	8a9b      	ldrh	r3, [r3, #20]
   18488:	8293      	strh	r3, [r2, #20]
	for (i = 0; i < cnt; i++) {
   1848a:	3401      	adds	r4, #1
   1848c:	42a6      	cmp	r6, r4
   1848e:	dce6      	bgt.n	1845e <bt_read_static_addr+0x7e>
	}

	net_buf_unref(rsp);
   18490:	9801      	ldr	r0, [sp, #4]
   18492:	f004 f9e7 	bl	1c864 <net_buf_unref>
	if (!cnt) {
   18496:	b11e      	cbz	r6, 184a0 <bt_read_static_addr+0xc0>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   18498:	4630      	mov	r0, r6
   1849a:	b002      	add	sp, #8
   1849c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   184a0:	4b09      	ldr	r3, [pc, #36]	; (184c8 <bt_read_static_addr+0xe8>)
   184a2:	4a0a      	ldr	r2, [pc, #40]	; (184cc <bt_read_static_addr+0xec>)
   184a4:	1a9b      	subs	r3, r3, r2
   184a6:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
   184a8:	f04f 0100 	mov.w	r1, #0
   184ac:	2202      	movs	r2, #2
   184ae:	f362 0102 	bfi	r1, r2, #0, #3
   184b2:	f36f 01c5 	bfc	r1, #3, #3
   184b6:	f363 118f 	bfi	r1, r3, #6, #10
   184ba:	4807      	ldr	r0, [pc, #28]	; (184d8 <bt_read_static_addr+0xf8>)
   184bc:	f7fb f9f0 	bl	138a0 <log_0>
   184c0:	e7ea      	b.n	18498 <bt_read_static_addr+0xb8>
   184c2:	bf00      	nop
   184c4:	200002b0 	.word	0x200002b0
   184c8:	00031940 	.word	0x00031940
   184cc:	00031908 	.word	0x00031908
   184d0:	00033bfc 	.word	0x00033bfc
   184d4:	00033c28 	.word	0x00033c28
   184d8:	00033c48 	.word	0x00033c48

000184dc <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   184dc:	b510      	push	{r4, lr}
   184de:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   184e0:	4b17      	ldr	r3, [pc, #92]	; (18540 <bt_setup_random_id_addr+0x64>)
   184e2:	79dc      	ldrb	r4, [r3, #7]
   184e4:	b934      	cbnz	r4, 184f4 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   184e6:	2101      	movs	r1, #1
   184e8:	a802      	add	r0, sp, #8
   184ea:	f7ff ff79 	bl	183e0 <bt_read_static_addr>
   184ee:	4b14      	ldr	r3, [pc, #80]	; (18540 <bt_setup_random_id_addr+0x64>)
   184f0:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   184f2:	b938      	cbnz	r0, 18504 <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   184f4:	2100      	movs	r1, #0
   184f6:	4608      	mov	r0, r1
   184f8:	f7ff fea4 	bl	18244 <bt_id_create>
   184fc:	4603      	mov	r3, r0
}
   184fe:	4618      	mov	r0, r3
   18500:	b008      	add	sp, #32
   18502:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   18504:	4b0e      	ldr	r3, [pc, #56]	; (18540 <bt_setup_random_id_addr+0x64>)
   18506:	79db      	ldrb	r3, [r3, #7]
   18508:	42a3      	cmp	r3, r4
   1850a:	d917      	bls.n	1853c <bt_setup_random_id_addr+0x60>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1850c:	2316      	movs	r3, #22
   1850e:	aa02      	add	r2, sp, #8
   18510:	fb03 2304 	mla	r3, r3, r4, r2
	memcpy(dst, src, sizeof(*dst));
   18514:	681a      	ldr	r2, [r3, #0]
   18516:	f8cd 2001 	str.w	r2, [sp, #1]
   1851a:	889b      	ldrh	r3, [r3, #4]
   1851c:	f8ad 3005 	strh.w	r3, [sp, #5]
				addr.type = BT_ADDR_LE_RANDOM;
   18520:	2301      	movs	r3, #1
   18522:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   18526:	2200      	movs	r2, #0
   18528:	4669      	mov	r1, sp
   1852a:	4620      	mov	r0, r4
   1852c:	f7ff fe4c 	bl	181c8 <id_create>
				if (err) {
   18530:	4603      	mov	r3, r0
   18532:	2800      	cmp	r0, #0
   18534:	d1e3      	bne.n	184fe <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   18536:	3401      	adds	r4, #1
   18538:	b2e4      	uxtb	r4, r4
   1853a:	e7e3      	b.n	18504 <bt_setup_random_id_addr+0x28>
			return 0;
   1853c:	2300      	movs	r3, #0
   1853e:	e7de      	b.n	184fe <bt_setup_random_id_addr+0x22>
   18540:	200002b0 	.word	0x200002b0

00018544 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   18544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18546:	460d      	mov	r5, r1
   18548:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   1854a:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1854c:	f011 0f01 	tst.w	r1, #1
   18550:	d027      	beq.n	185a2 <bt_id_set_adv_own_addr+0x5e>
   18552:	4617      	mov	r7, r2
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   18554:	b142      	cbz	r2, 18568 <bt_id_set_adv_own_addr+0x24>
   18556:	f011 0f20 	tst.w	r1, #32
   1855a:	d005      	beq.n	18568 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1855c:	4b22      	ldr	r3, [pc, #136]	; (185e8 <bt_id_set_adv_own_addr+0xa4>)
   1855e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   18562:	f013 0f40 	tst.w	r3, #64	; 0x40
   18566:	d038      	beq.n	185da <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   18568:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1856c:	4a1e      	ldr	r2, [pc, #120]	; (185e8 <bt_id_set_adv_own_addr+0xa4>)
   1856e:	5cd3      	ldrb	r3, [r2, r3]
   18570:	2b01      	cmp	r3, #1
   18572:	d00d      	beq.n	18590 <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   18574:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   18578:	4b1b      	ldr	r3, [pc, #108]	; (185e8 <bt_id_set_adv_own_addr+0xa4>)
   1857a:	5d1b      	ldrb	r3, [r3, r4]
   1857c:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1857e:	b37f      	cbz	r7, 185e0 <bt_id_set_adv_own_addr+0x9c>
   18580:	f015 0f20 	tst.w	r5, #32
   18584:	d02e      	beq.n	185e4 <bt_id_set_adv_own_addr+0xa0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   18586:	f043 0302 	orr.w	r3, r3, #2
   1858a:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1858c:	2000      	movs	r0, #0
   1858e:	e017      	b.n	185c0 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   18590:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   18594:	4411      	add	r1, r2
   18596:	3101      	adds	r1, #1
   18598:	f014 fec6 	bl	2d328 <bt_id_set_adv_random_addr>
				if (err) {
   1859c:	2800      	cmp	r0, #0
   1859e:	d0e9      	beq.n	18574 <bt_id_set_adv_own_addr+0x30>
   185a0:	e00e      	b.n	185c0 <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   185a2:	f011 0f04 	tst.w	r1, #4
   185a6:	d013      	beq.n	185d0 <bt_id_set_adv_own_addr+0x8c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   185a8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   185ac:	4a0e      	ldr	r2, [pc, #56]	; (185e8 <bt_id_set_adv_own_addr+0xa4>)
   185ae:	5cd3      	ldrb	r3, [r2, r3]
   185b0:	2b01      	cmp	r3, #1
   185b2:	d006      	beq.n	185c2 <bt_id_set_adv_own_addr+0x7e>
	int err = 0;
   185b4:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   185b6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   185ba:	4b0b      	ldr	r3, [pc, #44]	; (185e8 <bt_id_set_adv_own_addr+0xa4>)
   185bc:	5d1b      	ldrb	r3, [r3, r4]
   185be:	7033      	strb	r3, [r6, #0]
}
   185c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   185c2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   185c6:	4411      	add	r1, r2
   185c8:	3101      	adds	r1, #1
   185ca:	f014 fead 	bl	2d328 <bt_id_set_adv_random_addr>
   185ce:	e7f2      	b.n	185b6 <bt_id_set_adv_own_addr+0x72>
			err = bt_id_set_adv_private_addr(adv);
   185d0:	f014 feaf 	bl	2d332 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   185d4:	2301      	movs	r3, #1
   185d6:	7033      	strb	r3, [r6, #0]
		if (err) {
   185d8:	e7f2      	b.n	185c0 <bt_id_set_adv_own_addr+0x7c>
			return -ENOTSUP;
   185da:	f06f 0085 	mvn.w	r0, #133	; 0x85
   185de:	e7ef      	b.n	185c0 <bt_id_set_adv_own_addr+0x7c>
	return 0;
   185e0:	2000      	movs	r0, #0
   185e2:	e7ed      	b.n	185c0 <bt_id_set_adv_own_addr+0x7c>
   185e4:	2000      	movs	r0, #0
   185e6:	e7eb      	b.n	185c0 <bt_id_set_adv_own_addr+0x7c>
   185e8:	200002b0 	.word	0x200002b0

000185ec <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   185ec:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   185ee:	4b25      	ldr	r3, [pc, #148]	; (18684 <bt_id_init+0x98>)
   185f0:	79db      	ldrb	r3, [r3, #7]
   185f2:	b12b      	cbz	r3, 18600 <bt_id_init+0x14>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   185f4:	4b23      	ldr	r3, [pc, #140]	; (18684 <bt_id_init+0x98>)
   185f6:	79db      	ldrb	r3, [r3, #7]
   185f8:	b1c3      	cbz	r3, 1862c <bt_id_init+0x40>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   185fa:	2400      	movs	r4, #0
}
   185fc:	4620      	mov	r0, r4
   185fe:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   18600:	f7ff feda 	bl	183b8 <bt_setup_public_id_addr>
		if (err) {
   18604:	4604      	mov	r4, r0
   18606:	2800      	cmp	r0, #0
   18608:	d0f4      	beq.n	185f4 <bt_id_init+0x8>
   1860a:	4b1f      	ldr	r3, [pc, #124]	; (18688 <bt_id_init+0x9c>)
   1860c:	4a1f      	ldr	r2, [pc, #124]	; (1868c <bt_id_init+0xa0>)
   1860e:	1a9b      	subs	r3, r3, r2
   18610:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   18612:	f04f 0100 	mov.w	r1, #0
   18616:	2201      	movs	r2, #1
   18618:	f362 0102 	bfi	r1, r2, #0, #3
   1861c:	f36f 01c5 	bfc	r1, #3, #3
   18620:	f363 118f 	bfi	r1, r3, #6, #10
   18624:	481a      	ldr	r0, [pc, #104]	; (18690 <bt_id_init+0xa4>)
   18626:	f7fb f93b 	bl	138a0 <log_0>
			return err;
   1862a:	e7e7      	b.n	185fc <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   1862c:	f7ff ff56 	bl	184dc <bt_setup_random_id_addr>
		if (err) {
   18630:	4604      	mov	r4, r0
   18632:	b9b0      	cbnz	r0, 18662 <bt_id_init+0x76>
		err = set_random_address(&bt_dev.id_addr[0].a);
   18634:	4817      	ldr	r0, [pc, #92]	; (18694 <bt_id_init+0xa8>)
   18636:	f7ff fd99 	bl	1816c <set_random_address>
		if (err) {
   1863a:	4604      	mov	r4, r0
   1863c:	2800      	cmp	r0, #0
   1863e:	d0dd      	beq.n	185fc <bt_id_init+0x10>
   18640:	4b11      	ldr	r3, [pc, #68]	; (18688 <bt_id_init+0x9c>)
   18642:	4a12      	ldr	r2, [pc, #72]	; (1868c <bt_id_init+0xa0>)
   18644:	1a9b      	subs	r3, r3, r2
   18646:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set random address");
   18648:	f04f 0100 	mov.w	r1, #0
   1864c:	2201      	movs	r2, #1
   1864e:	f362 0102 	bfi	r1, r2, #0, #3
   18652:	f36f 01c5 	bfc	r1, #3, #3
   18656:	f363 118f 	bfi	r1, r3, #6, #10
   1865a:	480f      	ldr	r0, [pc, #60]	; (18698 <bt_id_init+0xac>)
   1865c:	f7fb f920 	bl	138a0 <log_0>
			return err;
   18660:	e7cc      	b.n	185fc <bt_id_init+0x10>
   18662:	4b09      	ldr	r3, [pc, #36]	; (18688 <bt_id_init+0x9c>)
   18664:	4a09      	ldr	r2, [pc, #36]	; (1868c <bt_id_init+0xa0>)
   18666:	1a9b      	subs	r3, r3, r2
   18668:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   1866a:	f04f 0100 	mov.w	r1, #0
   1866e:	2201      	movs	r2, #1
   18670:	f362 0102 	bfi	r1, r2, #0, #3
   18674:	f36f 01c5 	bfc	r1, #3, #3
   18678:	f363 118f 	bfi	r1, r3, #6, #10
   1867c:	4804      	ldr	r0, [pc, #16]	; (18690 <bt_id_init+0xa4>)
   1867e:	f7fb f90f 	bl	138a0 <log_0>
			return err;
   18682:	e7bb      	b.n	185fc <bt_id_init+0x10>
   18684:	200002b0 	.word	0x200002b0
   18688:	00031940 	.word	0x00031940
   1868c:	00031908 	.word	0x00031908
   18690:	00033c74 	.word	0x00033c74
   18694:	200002b1 	.word	0x200002b1
   18698:	00033c94 	.word	0x00033c94

0001869c <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   1869c:	4800      	ldr	r0, [pc, #0]	; (186a0 <adv_new_legacy+0x4>)
   1869e:	4770      	bx	lr
   186a0:	200002c8 	.word	0x200002c8

000186a4 <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   186a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186a8:	b083      	sub	sp, #12
   186aa:	4605      	mov	r5, r0
   186ac:	4688      	mov	r8, r1
   186ae:	9201      	str	r2, [sp, #4]
   186b0:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   186b2:	f04f 0a00 	mov.w	sl, #0
	uint8_t set_data_len = 0;
   186b6:	4653      	mov	r3, sl
	for (size_t i = 0; i < ad_len; i++) {
   186b8:	9a00      	ldr	r2, [sp, #0]
   186ba:	4552      	cmp	r2, sl
   186bc:	d94b      	bls.n	18756 <set_data_add_complete+0xb2>
		const struct bt_data *data = ad[i].data;
   186be:	9a01      	ldr	r2, [sp, #4]
   186c0:	eb02 09ca 	add.w	r9, r2, sl, lsl #3
   186c4:	f852 703a 	ldr.w	r7, [r2, sl, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   186c8:	2400      	movs	r4, #0
   186ca:	e016      	b.n	186fa <set_data_add_complete+0x56>
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
					return -EINVAL;
				}

				type = BT_DATA_NAME_SHORTENED;
   186cc:	f04f 0c08 	mov.w	ip, #8
				len = shortened_len;
			}

			set_data[set_data_len++] = len + 1;
   186d0:	b2d6      	uxtb	r6, r2
   186d2:	1c59      	adds	r1, r3, #1
   186d4:	b2c9      	uxtb	r1, r1
   186d6:	f106 0b01 	add.w	fp, r6, #1
   186da:	f805 b00e 	strb.w	fp, [r5, lr]
			set_data[set_data_len++] = type;
   186de:	3302      	adds	r3, #2
   186e0:	fa5f fb83 	uxtb.w	fp, r3
   186e4:	f805 c001 	strb.w	ip, [r5, r1]
   186e8:	6841      	ldr	r1, [r0, #4]
   186ea:	eb05 000b 	add.w	r0, r5, fp
   186ee:	f018 f8df 	bl	308b0 <memcpy>

			memcpy(&set_data[set_data_len], data[j].data, len);
			set_data_len += len;
   186f2:	eb0b 0306 	add.w	r3, fp, r6
   186f6:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   186f8:	3401      	adds	r4, #1
   186fa:	f8d9 2004 	ldr.w	r2, [r9, #4]
   186fe:	4294      	cmp	r4, r2
   18700:	d226      	bcs.n	18750 <set_data_add_complete+0xac>
			size_t len = data[j].data_len;
   18702:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   18706:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   18708:	f817 c034 	ldrb.w	ip, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1870c:	469e      	mov	lr, r3
   1870e:	1899      	adds	r1, r3, r2
   18710:	3102      	adds	r1, #2
   18712:	4541      	cmp	r1, r8
   18714:	d9dc      	bls.n	186d0 <set_data_add_complete+0x2c>
				ssize_t shortened_len = set_data_len_max -
   18716:	eba8 0203 	sub.w	r2, r8, r3
   1871a:	3a02      	subs	r2, #2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1871c:	f1bc 0f09 	cmp.w	ip, #9
   18720:	d101      	bne.n	18726 <set_data_add_complete+0x82>
   18722:	2a00      	cmp	r2, #0
   18724:	dcd2      	bgt.n	186cc <set_data_add_complete+0x28>
   18726:	4b0e      	ldr	r3, [pc, #56]	; (18760 <set_data_add_complete+0xbc>)
   18728:	4a0e      	ldr	r2, [pc, #56]	; (18764 <set_data_add_complete+0xc0>)
   1872a:	1a9b      	subs	r3, r3, r2
   1872c:	08db      	lsrs	r3, r3, #3
					BT_ERR("Too big advertising data");
   1872e:	f04f 0100 	mov.w	r1, #0
   18732:	2201      	movs	r2, #1
   18734:	f362 0102 	bfi	r1, r2, #0, #3
   18738:	f36f 01c5 	bfc	r1, #3, #3
   1873c:	f363 118f 	bfi	r1, r3, #6, #10
   18740:	4809      	ldr	r0, [pc, #36]	; (18768 <set_data_add_complete+0xc4>)
   18742:	f7fb f8ad 	bl	138a0 <log_0>
					return -EINVAL;
   18746:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   1874a:	b003      	add	sp, #12
   1874c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ad_len; i++) {
   18750:	f10a 0a01 	add.w	sl, sl, #1
   18754:	e7b0      	b.n	186b8 <set_data_add_complete+0x14>
	*data_len = set_data_len;
   18756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18758:	7013      	strb	r3, [r2, #0]
	return 0;
   1875a:	2000      	movs	r0, #0
   1875c:	e7f5      	b.n	1874a <set_data_add_complete+0xa6>
   1875e:	bf00      	nop
   18760:	00031910 	.word	0x00031910
   18764:	00031908 	.word	0x00031908
   18768:	00033cbc 	.word	0x00033cbc

0001876c <valid_adv_ext_param>:
{
   1876c:	b510      	push	{r4, lr}
   1876e:	b082      	sub	sp, #8
   18770:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   18772:	7800      	ldrb	r0, [r0, #0]
   18774:	4b23      	ldr	r3, [pc, #140]	; (18804 <valid_adv_ext_param+0x98>)
   18776:	79db      	ldrb	r3, [r3, #7]
   18778:	4298      	cmp	r0, r3
   1877a:	d302      	bcc.n	18782 <valid_adv_ext_param+0x16>
		return false;
   1877c:	2000      	movs	r0, #0
}
   1877e:	b002      	add	sp, #8
   18780:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   18782:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18786:	2300      	movs	r3, #0
   18788:	9300      	str	r3, [sp, #0]
   1878a:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1878e:	2207      	movs	r2, #7
   18790:	4669      	mov	r1, sp
   18792:	4b1c      	ldr	r3, [pc, #112]	; (18804 <valid_adv_ext_param+0x98>)
   18794:	4418      	add	r0, r3
   18796:	f018 f87d 	bl	30894 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1879a:	2800      	cmp	r0, #0
   1879c:	d0ee      	beq.n	1877c <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1879e:	6863      	ldr	r3, [r4, #4]
   187a0:	f013 0f01 	tst.w	r3, #1
   187a4:	d107      	bne.n	187b6 <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   187a6:	4a17      	ldr	r2, [pc, #92]	; (18804 <valid_adv_ext_param+0x98>)
   187a8:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   187ac:	2a08      	cmp	r2, #8
   187ae:	d802      	bhi.n	187b6 <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
   187b0:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   187b2:	2a9f      	cmp	r2, #159	; 0x9f
   187b4:	d91b      	bls.n	187ee <valid_adv_ext_param+0x82>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   187b6:	f013 0f30 	tst.w	r3, #48	; 0x30
   187ba:	d001      	beq.n	187c0 <valid_adv_ext_param+0x54>
	    !param->peer) {
   187bc:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   187be:	b1c2      	cbz	r2, 187f2 <valid_adv_ext_param+0x86>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   187c0:	f013 0f10 	tst.w	r3, #16
   187c4:	d108      	bne.n	187d8 <valid_adv_ext_param+0x6c>
	    !param->peer) {
   187c6:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   187c8:	b132      	cbz	r2, 187d8 <valid_adv_ext_param+0x6c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   187ca:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   187ce:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   187d2:	d014      	beq.n	187fe <valid_adv_ext_param+0x92>
	return true;
   187d4:	2001      	movs	r0, #1
   187d6:	e7d2      	b.n	1877e <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
   187d8:	68a2      	ldr	r2, [r4, #8]
   187da:	68e1      	ldr	r1, [r4, #12]
   187dc:	428a      	cmp	r2, r1
   187de:	d80a      	bhi.n	187f6 <valid_adv_ext_param+0x8a>
   187e0:	2a1f      	cmp	r2, #31
   187e2:	d90a      	bls.n	187fa <valid_adv_ext_param+0x8e>
		    param->interval_min < 0x0020 ||
   187e4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   187e8:	d9ef      	bls.n	187ca <valid_adv_ext_param+0x5e>
			return false;
   187ea:	2000      	movs	r0, #0
   187ec:	e7c7      	b.n	1877e <valid_adv_ext_param+0x12>
			return false;
   187ee:	2000      	movs	r0, #0
   187f0:	e7c5      	b.n	1877e <valid_adv_ext_param+0x12>
		return false;
   187f2:	2000      	movs	r0, #0
   187f4:	e7c3      	b.n	1877e <valid_adv_ext_param+0x12>
			return false;
   187f6:	2000      	movs	r0, #0
   187f8:	e7c1      	b.n	1877e <valid_adv_ext_param+0x12>
   187fa:	2000      	movs	r0, #0
   187fc:	e7bf      	b.n	1877e <valid_adv_ext_param+0x12>
		return false;
   187fe:	2000      	movs	r0, #0
   18800:	e7bd      	b.n	1877e <valid_adv_ext_param+0x12>
   18802:	bf00      	nop
   18804:	200002b0 	.word	0x200002b0

00018808 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   18808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1880a:	b085      	sub	sp, #20
   1880c:	4604      	mov	r4, r0
   1880e:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   18810:	4605      	mov	r5, r0
   18812:	f815 2b09 	ldrb.w	r2, [r5], #9
   18816:	4b1f      	ldr	r3, [pc, #124]	; (18894 <le_adv_start_add_conn+0x8c>)
   18818:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1881c:	2300      	movs	r3, #0
   1881e:	9300      	str	r3, [sp, #0]
   18820:	f8cd 3003 	str.w	r3, [sp, #3]
   18824:	2207      	movs	r2, #7
   18826:	4669      	mov	r1, sp
   18828:	4628      	mov	r0, r5
   1882a:	f018 f833 	bl	30894 <memcmp>
   1882e:	b9b8      	cbnz	r0, 18860 <le_adv_start_add_conn+0x58>
   18830:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   18832:	4b19      	ldr	r3, [pc, #100]	; (18898 <le_adv_start_add_conn+0x90>)
   18834:	e893 0003 	ldmia.w	r3, {r0, r1}
   18838:	9002      	str	r0, [sp, #8]
   1883a:	f8ad 100c 	strh.w	r1, [sp, #12]
   1883e:	0c09      	lsrs	r1, r1, #16
   18840:	f88d 100e 	strb.w	r1, [sp, #14]
   18844:	a902      	add	r1, sp, #8
   18846:	7820      	ldrb	r0, [r4, #0]
   18848:	f015 f85c 	bl	2d904 <bt_conn_add_le>
		if (!conn) {
   1884c:	4604      	mov	r4, r0
   1884e:	b120      	cbz	r0, 1885a <le_adv_start_add_conn+0x52>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   18850:	2104      	movs	r1, #4
   18852:	f000 fe39 	bl	194c8 <bt_conn_set_state>
		*out_conn = conn;
   18856:	603c      	str	r4, [r7, #0]
		return 0;
   18858:	e012      	b.n	18880 <le_adv_start_add_conn+0x78>
			return -ENOMEM;
   1885a:	f06f 060b 	mvn.w	r6, #11
   1885e:	e00f      	b.n	18880 <le_adv_start_add_conn+0x78>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   18860:	4629      	mov	r1, r5
   18862:	7820      	ldrb	r0, [r4, #0]
   18864:	f001 f88c 	bl	19980 <bt_conn_exists_le>
   18868:	b968      	cbnz	r0, 18886 <le_adv_start_add_conn+0x7e>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1886a:	4629      	mov	r1, r5
   1886c:	7820      	ldrb	r0, [r4, #0]
   1886e:	f015 f849 	bl	2d904 <bt_conn_add_le>
	if (!conn) {
   18872:	4604      	mov	r4, r0
   18874:	b150      	cbz	r0, 1888c <le_adv_start_add_conn+0x84>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   18876:	2105      	movs	r1, #5
   18878:	f000 fe26 	bl	194c8 <bt_conn_set_state>
	*out_conn = conn;
   1887c:	603c      	str	r4, [r7, #0]
	return 0;
   1887e:	2600      	movs	r6, #0
}
   18880:	4630      	mov	r0, r6
   18882:	b005      	add	sp, #20
   18884:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   18886:	f06f 0615 	mvn.w	r6, #21
   1888a:	e7f9      	b.n	18880 <le_adv_start_add_conn+0x78>
		return -ENOMEM;
   1888c:	f06f 060b 	mvn.w	r6, #11
   18890:	e7f6      	b.n	18880 <le_adv_start_add_conn+0x78>
   18892:	bf00      	nop
   18894:	200002b0 	.word	0x200002b0
   18898:	00031ad0 	.word	0x00031ad0

0001889c <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   1889c:	b570      	push	{r4, r5, r6, lr}
   1889e:	b084      	sub	sp, #16
   188a0:	4604      	mov	r4, r0
   188a2:	460e      	mov	r6, r1
	struct bt_conn *conn;

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   188a4:	f100 0509 	add.w	r5, r0, #9
   188a8:	2300      	movs	r3, #0
   188aa:	9300      	str	r3, [sp, #0]
   188ac:	f8cd 3003 	str.w	r3, [sp, #3]
   188b0:	2207      	movs	r2, #7
   188b2:	4669      	mov	r1, sp
   188b4:	4628      	mov	r0, r5
   188b6:	f017 ffed 	bl	30894 <memcmp>
   188ba:	b9c8      	cbnz	r0, 188f0 <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   188bc:	4b10      	ldr	r3, [pc, #64]	; (18900 <le_adv_stop_free_conn+0x64>)
   188be:	e893 0003 	ldmia.w	r3, {r0, r1}
   188c2:	9002      	str	r0, [sp, #8]
   188c4:	f8ad 100c 	strh.w	r1, [sp, #12]
   188c8:	0c09      	lsrs	r1, r1, #16
   188ca:	f88d 100e 	strb.w	r1, [sp, #14]
   188ce:	2204      	movs	r2, #4
   188d0:	a902      	add	r1, sp, #8
   188d2:	7820      	ldrb	r0, [r4, #0]
   188d4:	f001 f8a8 	bl	19a28 <bt_conn_lookup_state_le>
   188d8:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECT_DIR_ADV);
	}

	if (conn) {
   188da:	b13c      	cbz	r4, 188ec <le_adv_stop_free_conn+0x50>
		conn->err = status;
   188dc:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   188de:	2100      	movs	r1, #0
   188e0:	4620      	mov	r0, r4
   188e2:	f000 fdf1 	bl	194c8 <bt_conn_set_state>
		bt_conn_unref(conn);
   188e6:	4620      	mov	r0, r4
   188e8:	f000 fdaa 	bl	19440 <bt_conn_unref>
	}
}
   188ec:	b004      	add	sp, #16
   188ee:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   188f0:	2205      	movs	r2, #5
   188f2:	4629      	mov	r1, r5
   188f4:	7820      	ldrb	r0, [r4, #0]
   188f6:	f001 f897 	bl	19a28 <bt_conn_lookup_state_le>
   188fa:	4604      	mov	r4, r0
   188fc:	e7ed      	b.n	188da <le_adv_stop_free_conn+0x3e>
   188fe:	bf00      	nop
   18900:	00031ad0 	.word	0x00031ad0

00018904 <bt_le_adv_lookup_legacy>:
}
   18904:	4800      	ldr	r0, [pc, #0]	; (18908 <bt_le_adv_lookup_legacy+0x4>)
   18906:	4770      	bx	lr
   18908:	200002c8 	.word	0x200002c8

0001890c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1890c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18910:	b08f      	sub	sp, #60	; 0x3c
   18912:	9205      	str	r2, [sp, #20]
   18914:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   18916:	2300      	movs	r3, #0
   18918:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1891a:	690f      	ldr	r7, [r1, #16]
   1891c:	ebb7 0b03 	subs.w	fp, r7, r3
   18920:	bf18      	it	ne
   18922:	f04f 0b01 	movne.w	fp, #1
   18926:	f3bf 8f5b 	dmb	ish
   1892a:	4bc7      	ldr	r3, [pc, #796]	; (18c48 <bt_le_adv_start_legacy+0x33c>)
   1892c:	681b      	ldr	r3, [r3, #0]
   1892e:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18932:	f013 0f02 	tst.w	r3, #2
   18936:	f000 81c5 	beq.w	18cc4 <bt_le_adv_start_legacy+0x3b8>
   1893a:	4605      	mov	r5, r0
   1893c:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1893e:	4608      	mov	r0, r1
   18940:	f014 fe05 	bl	2d54e <valid_adv_param>
   18944:	2800      	cmp	r0, #0
   18946:	f000 81c0 	beq.w	18cca <bt_le_adv_start_legacy+0x3be>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   1894a:	4620      	mov	r0, r4
   1894c:	f014 fd06 	bl	2d35c <bt_id_adv_random_addr_check>
   18950:	4682      	mov	sl, r0
   18952:	2800      	cmp	r0, #0
   18954:	f000 81bc 	beq.w	18cd0 <bt_le_adv_start_legacy+0x3c4>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   18958:	f105 0610 	add.w	r6, r5, #16
   1895c:	f3bf 8f5b 	dmb	ish
   18960:	692b      	ldr	r3, [r5, #16]
   18962:	f3bf 8f5b 	dmb	ish
   18966:	f013 0f40 	tst.w	r3, #64	; 0x40
   1896a:	f040 81b4 	bne.w	18cd6 <bt_le_adv_start_legacy+0x3ca>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   1896e:	2300      	movs	r3, #0
   18970:	9309      	str	r3, [sp, #36]	; 0x24
   18972:	930a      	str	r3, [sp, #40]	; 0x28
   18974:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   18978:	68a3      	ldr	r3, [r4, #8]
   1897a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1897e:	68e3      	ldr	r3, [r4, #12]
   18980:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   18984:	f8d4 9004 	ldr.w	r9, [r4, #4]
   18988:	4648      	mov	r0, r9
   1898a:	f014 fd09 	bl	2d3a0 <get_adv_channel_map>
   1898e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   18992:	4648      	mov	r0, r9
   18994:	f014 fd02 	bl	2d39c <get_filter_policy>
   18998:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   1899c:	782a      	ldrb	r2, [r5, #0]
   1899e:	7823      	ldrb	r3, [r4, #0]
   189a0:	429a      	cmp	r2, r3
   189a2:	d00c      	beq.n	189be <bt_le_adv_start_legacy+0xb2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   189a4:	4ba8      	ldr	r3, [pc, #672]	; (18c48 <bt_le_adv_start_legacy+0x33c>)
   189a6:	f3bf 8f5b 	dmb	ish
   189aa:	e853 2f00 	ldrex	r2, [r3]
   189ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   189b2:	e843 2100 	strex	r1, r2, [r3]
   189b6:	2900      	cmp	r1, #0
   189b8:	d1f7      	bne.n	189aa <bt_le_adv_start_legacy+0x9e>
   189ba:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   189be:	7823      	ldrb	r3, [r4, #0]
   189c0:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   189c2:	4aa2      	ldr	r2, [pc, #648]	; (18c4c <bt_le_adv_start_legacy+0x340>)
   189c4:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   189c8:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   189cc:	465a      	mov	r2, fp
   189ce:	6861      	ldr	r1, [r4, #4]
   189d0:	4628      	mov	r0, r5
   189d2:	f7ff fdb7 	bl	18544 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   189d6:	4681      	mov	r9, r0
   189d8:	2800      	cmp	r0, #0
   189da:	f040 80f5 	bne.w	18bc8 <bt_le_adv_start_legacy+0x2bc>
		return err;
	}

	if (dir_adv) {
   189de:	b327      	cbz	r7, 18a2a <bt_le_adv_start_legacy+0x11e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   189e0:	6923      	ldr	r3, [r4, #16]
   189e2:	681a      	ldr	r2, [r3, #0]
   189e4:	f8c5 2009 	str.w	r2, [r5, #9]
   189e8:	889a      	ldrh	r2, [r3, #4]
   189ea:	799b      	ldrb	r3, [r3, #6]
   189ec:	f8a5 200d 	strh.w	r2, [r5, #13]
   189f0:	73eb      	strb	r3, [r5, #15]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   189f2:	4620      	mov	r0, r4
   189f4:	f014 fdbc 	bl	2d570 <get_adv_name_type_param>
   189f8:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   189fa:	6863      	ldr	r3, [r4, #4]
   189fc:	f013 0f01 	tst.w	r3, #1
   18a00:	d023      	beq.n	18a4a <bt_le_adv_start_legacy+0x13e>
		if (dir_adv) {
   18a02:	b1f7      	cbz	r7, 18a42 <bt_le_adv_start_legacy+0x136>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   18a04:	f013 0f10 	tst.w	r3, #16
   18a08:	d017      	beq.n	18a3a <bt_le_adv_start_legacy+0x12e>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   18a0a:	2304      	movs	r3, #4
   18a0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   18a10:	6923      	ldr	r3, [r4, #16]
	memcpy(dst, src, sizeof(*dst));
   18a12:	681a      	ldr	r2, [r3, #0]
   18a14:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
   18a18:	889a      	ldrh	r2, [r3, #4]
   18a1a:	799b      	ldrb	r3, [r3, #6]
   18a1c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   18a20:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bool dir_adv = (param->peer != NULL), scannable = false;
   18a24:	f04f 0a00 	mov.w	sl, #0
}
   18a28:	e017      	b.n	18a5a <bt_le_adv_start_legacy+0x14e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   18a2a:	2300      	movs	r3, #0
   18a2c:	930c      	str	r3, [sp, #48]	; 0x30
   18a2e:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
   18a32:	f8c5 3009 	str.w	r3, [r5, #9]
   18a36:	60eb      	str	r3, [r5, #12]
   18a38:	e7db      	b.n	189f2 <bt_le_adv_start_legacy+0xe6>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   18a3a:	2301      	movs	r3, #1
   18a3c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18a40:	e7e6      	b.n	18a10 <bt_le_adv_start_legacy+0x104>
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   18a42:	2300      	movs	r3, #0
   18a44:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18a48:	e007      	b.n	18a5a <bt_le_adv_start_legacy+0x14e>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   18a4a:	f413 7f00 	tst.w	r3, #512	; 0x200
   18a4e:	d101      	bne.n	18a54 <bt_le_adv_start_legacy+0x148>
   18a50:	9b18      	ldr	r3, [sp, #96]	; 0x60
   18a52:	b35b      	cbz	r3, 18aac <bt_le_adv_start_legacy+0x1a0>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   18a54:	2302      	movs	r3, #2
   18a56:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   18a5a:	210f      	movs	r1, #15
   18a5c:	f242 0006 	movw	r0, #8198	; 0x2006
   18a60:	f7fe fad4 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   18a64:	4681      	mov	r9, r0
   18a66:	2800      	cmp	r0, #0
   18a68:	f000 8138 	beq.w	18cdc <bt_le_adv_start_legacy+0x3d0>
   18a6c:	220f      	movs	r2, #15
   18a6e:	a908      	add	r1, sp, #32
   18a70:	3008      	adds	r0, #8
   18a72:	f016 fa19 	bl	2eea8 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   18a76:	2200      	movs	r2, #0
   18a78:	4649      	mov	r1, r9
   18a7a:	f242 0006 	movw	r0, #8198	; 0x2006
   18a7e:	f7fe fb15 	bl	170ac <bt_hci_cmd_send_sync>
	if (err) {
   18a82:	4681      	mov	r9, r0
   18a84:	2800      	cmp	r0, #0
   18a86:	f040 809f 	bne.w	18bc8 <bt_le_adv_start_legacy+0x2bc>
		return err;
	}

	if (!dir_adv) {
   18a8a:	b1bf      	cbz	r7, 18abc <bt_le_adv_start_legacy+0x1b0>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   18a8c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18a8e:	f013 0f01 	tst.w	r3, #1
   18a92:	d02b      	beq.n	18aec <bt_le_adv_start_legacy+0x1e0>
		err = le_adv_start_add_conn(adv, &conn);
   18a94:	a907      	add	r1, sp, #28
   18a96:	4628      	mov	r0, r5
   18a98:	f7ff feb6 	bl	18808 <le_adv_start_add_conn>
		if (err) {
   18a9c:	b330      	cbz	r0, 18aec <bt_le_adv_start_legacy+0x1e0>
			if (err == -ENOMEM && !dir_adv &&
   18a9e:	f110 0f0c 	cmn.w	r0, #12
   18aa2:	f040 811e 	bne.w	18ce2 <bt_le_adv_start_legacy+0x3d6>
   18aa6:	b1df      	cbz	r7, 18ae0 <bt_le_adv_start_legacy+0x1d4>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   18aa8:	4681      	mov	r9, r0
   18aaa:	e08d      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   18aac:	2802      	cmp	r0, #2
   18aae:	d0d1      	beq.n	18a54 <bt_le_adv_start_legacy+0x148>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   18ab0:	2303      	movs	r3, #3
   18ab2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   18ab6:	f04f 0a00 	mov.w	sl, #0
   18aba:	e7ce      	b.n	18a5a <bt_le_adv_start_legacy+0x14e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   18abc:	f8cd b00c 	str.w	fp, [sp, #12]
   18ac0:	f8cd a008 	str.w	sl, [sp, #8]
   18ac4:	2300      	movs	r3, #0
   18ac6:	9301      	str	r3, [sp, #4]
   18ac8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18aca:	9300      	str	r3, [sp, #0]
   18acc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   18ace:	4642      	mov	r2, r8
   18ad0:	9905      	ldr	r1, [sp, #20]
   18ad2:	4628      	mov	r0, r5
   18ad4:	f014 fcb0 	bl	2d438 <le_adv_update>
		if (err) {
   18ad8:	2800      	cmp	r0, #0
   18ada:	d0d7      	beq.n	18a8c <bt_le_adv_start_legacy+0x180>
			return err;
   18adc:	4681      	mov	r9, r0
   18ade:	e073      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   18ae0:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   18ae2:	f012 0f02 	tst.w	r2, #2
   18ae6:	d00c      	beq.n	18b02 <bt_le_adv_start_legacy+0x1f6>
			return err;
   18ae8:	4681      	mov	r9, r0
   18aea:	e06d      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   18aec:	2101      	movs	r1, #1
   18aee:	4628      	mov	r0, r5
   18af0:	f014 fd7a 	bl	2d5e8 <bt_le_adv_set_enable>
	if (err) {
   18af4:	4605      	mov	r5, r0
   18af6:	2800      	cmp	r0, #0
   18af8:	d16a      	bne.n	18bd0 <bt_le_adv_start_legacy+0x2c4>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   18afa:	9807      	ldr	r0, [sp, #28]
   18afc:	b108      	cbz	r0, 18b02 <bt_le_adv_start_legacy+0x1f6>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   18afe:	f000 fc9f 	bl	19440 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   18b02:	2f00      	cmp	r7, #0
   18b04:	d07e      	beq.n	18c04 <bt_le_adv_start_legacy+0x2f8>
   18b06:	464b      	mov	r3, r9
	if (val) {
   18b08:	f013 0f01 	tst.w	r3, #1
   18b0c:	f000 8082 	beq.w	18c14 <bt_le_adv_start_legacy+0x308>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18b10:	f3bf 8f5b 	dmb	ish
   18b14:	e856 3f00 	ldrex	r3, [r6]
   18b18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   18b1c:	e846 3200 	strex	r2, r3, [r6]
   18b20:	2a00      	cmp	r2, #0
   18b22:	d1f7      	bne.n	18b14 <bt_le_adv_start_legacy+0x208>
   18b24:	f3bf 8f5b 	dmb	ish
   18b28:	f1bb 0f01 	cmp.w	fp, #1
   18b2c:	d17f      	bne.n	18c2e <bt_le_adv_start_legacy+0x322>
   18b2e:	f3bf 8f5b 	dmb	ish
   18b32:	e856 3f00 	ldrex	r3, [r6]
   18b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18b3a:	e846 3200 	strex	r2, r3, [r6]
   18b3e:	2a00      	cmp	r2, #0
   18b40:	d1f7      	bne.n	18b32 <bt_le_adv_start_legacy+0x226>
   18b42:	f3bf 8f5b 	dmb	ish
   18b46:	f1bb 0f02 	cmp.w	fp, #2
   18b4a:	f040 8087 	bne.w	18c5c <bt_le_adv_start_legacy+0x350>
   18b4e:	f3bf 8f5b 	dmb	ish
   18b52:	e856 3f00 	ldrex	r3, [r6]
   18b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18b5a:	e846 3200 	strex	r2, r3, [r6]
   18b5e:	2a00      	cmp	r2, #0
   18b60:	d1f7      	bne.n	18b52 <bt_le_adv_start_legacy+0x246>
   18b62:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   18b66:	6863      	ldr	r3, [r4, #4]
   18b68:	f013 0f01 	tst.w	r3, #1
   18b6c:	f000 8083 	beq.w	18c76 <bt_le_adv_start_legacy+0x36a>
   18b70:	f3bf 8f5b 	dmb	ish
   18b74:	e856 3f00 	ldrex	r3, [r6]
   18b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   18b7c:	e846 3200 	strex	r2, r3, [r6]
   18b80:	2a00      	cmp	r2, #0
   18b82:	d1f7      	bne.n	18b74 <bt_le_adv_start_legacy+0x268>
   18b84:	f3bf 8f5b 	dmb	ish
   18b88:	f1ba 0f00 	cmp.w	sl, #0
   18b8c:	f000 8080 	beq.w	18c90 <bt_le_adv_start_legacy+0x384>
   18b90:	f3bf 8f5b 	dmb	ish
   18b94:	e856 3f00 	ldrex	r3, [r6]
   18b98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   18b9c:	e846 3200 	strex	r2, r3, [r6]
   18ba0:	2a00      	cmp	r2, #0
   18ba2:	d1f7      	bne.n	18b94 <bt_le_adv_start_legacy+0x288>
   18ba4:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   18ba8:	6863      	ldr	r3, [r4, #4]
   18baa:	f013 0f04 	tst.w	r3, #4
   18bae:	d07c      	beq.n	18caa <bt_le_adv_start_legacy+0x39e>
   18bb0:	f3bf 8f5b 	dmb	ish
   18bb4:	e856 3f00 	ldrex	r3, [r6]
   18bb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   18bbc:	e846 3200 	strex	r2, r3, [r6]
   18bc0:	2a00      	cmp	r2, #0
   18bc2:	d1f7      	bne.n	18bb4 <bt_le_adv_start_legacy+0x2a8>
   18bc4:	f3bf 8f5b 	dmb	ish

	return 0;
}
   18bc8:	4648      	mov	r0, r9
   18bca:	b00f      	add	sp, #60	; 0x3c
   18bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bd0:	4b1f      	ldr	r3, [pc, #124]	; (18c50 <bt_le_adv_start_legacy+0x344>)
   18bd2:	4a20      	ldr	r2, [pc, #128]	; (18c54 <bt_le_adv_start_legacy+0x348>)
   18bd4:	1a9b      	subs	r3, r3, r2
   18bd6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to start advertiser");
   18bd8:	f04f 0100 	mov.w	r1, #0
   18bdc:	2201      	movs	r2, #1
   18bde:	f362 0102 	bfi	r1, r2, #0, #3
   18be2:	f36f 01c5 	bfc	r1, #3, #3
   18be6:	f363 118f 	bfi	r1, r3, #6, #10
   18bea:	481b      	ldr	r0, [pc, #108]	; (18c58 <bt_le_adv_start_legacy+0x34c>)
   18bec:	f7fa fe58 	bl	138a0 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   18bf0:	9807      	ldr	r0, [sp, #28]
   18bf2:	b128      	cbz	r0, 18c00 <bt_le_adv_start_legacy+0x2f4>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18bf4:	2100      	movs	r1, #0
   18bf6:	f000 fc67 	bl	194c8 <bt_conn_set_state>
			bt_conn_unref(conn);
   18bfa:	9807      	ldr	r0, [sp, #28]
   18bfc:	f000 fc20 	bl	19440 <bt_conn_unref>
		return err;
   18c00:	46a9      	mov	r9, r5
   18c02:	e7e1      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   18c04:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   18c06:	f013 0f02 	tst.w	r3, #2
   18c0a:	d001      	beq.n	18c10 <bt_le_adv_start_legacy+0x304>
   18c0c:	464b      	mov	r3, r9
   18c0e:	e77b      	b.n	18b08 <bt_le_adv_start_legacy+0x1fc>
   18c10:	2301      	movs	r3, #1
   18c12:	e779      	b.n	18b08 <bt_le_adv_start_legacy+0x1fc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18c14:	f3bf 8f5b 	dmb	ish
   18c18:	e856 3f00 	ldrex	r3, [r6]
   18c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   18c20:	e846 3200 	strex	r2, r3, [r6]
   18c24:	2a00      	cmp	r2, #0
   18c26:	d1f7      	bne.n	18c18 <bt_le_adv_start_legacy+0x30c>
   18c28:	f3bf 8f5b 	dmb	ish
   18c2c:	e77c      	b.n	18b28 <bt_le_adv_start_legacy+0x21c>
   18c2e:	f3bf 8f5b 	dmb	ish
   18c32:	e856 3f00 	ldrex	r3, [r6]
   18c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   18c3a:	e846 3200 	strex	r2, r3, [r6]
   18c3e:	2a00      	cmp	r2, #0
   18c40:	d1f7      	bne.n	18c32 <bt_le_adv_start_legacy+0x326>
   18c42:	f3bf 8f5b 	dmb	ish
   18c46:	e77e      	b.n	18b46 <bt_le_adv_start_legacy+0x23a>
   18c48:	2000037c 	.word	0x2000037c
   18c4c:	200002b0 	.word	0x200002b0
   18c50:	00031910 	.word	0x00031910
   18c54:	00031908 	.word	0x00031908
   18c58:	00033cd8 	.word	0x00033cd8
   18c5c:	f3bf 8f5b 	dmb	ish
   18c60:	e856 3f00 	ldrex	r3, [r6]
   18c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   18c68:	e846 3200 	strex	r2, r3, [r6]
   18c6c:	2a00      	cmp	r2, #0
   18c6e:	d1f7      	bne.n	18c60 <bt_le_adv_start_legacy+0x354>
   18c70:	f3bf 8f5b 	dmb	ish
   18c74:	e777      	b.n	18b66 <bt_le_adv_start_legacy+0x25a>
   18c76:	f3bf 8f5b 	dmb	ish
   18c7a:	e856 3f00 	ldrex	r3, [r6]
   18c7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   18c82:	e846 3200 	strex	r2, r3, [r6]
   18c86:	2a00      	cmp	r2, #0
   18c88:	d1f7      	bne.n	18c7a <bt_le_adv_start_legacy+0x36e>
   18c8a:	f3bf 8f5b 	dmb	ish
   18c8e:	e77b      	b.n	18b88 <bt_le_adv_start_legacy+0x27c>
   18c90:	f3bf 8f5b 	dmb	ish
   18c94:	e856 3f00 	ldrex	r3, [r6]
   18c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   18c9c:	e846 3200 	strex	r2, r3, [r6]
   18ca0:	2a00      	cmp	r2, #0
   18ca2:	d1f7      	bne.n	18c94 <bt_le_adv_start_legacy+0x388>
   18ca4:	f3bf 8f5b 	dmb	ish
   18ca8:	e77e      	b.n	18ba8 <bt_le_adv_start_legacy+0x29c>
   18caa:	f3bf 8f5b 	dmb	ish
   18cae:	e856 3f00 	ldrex	r3, [r6]
   18cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   18cb6:	e846 3200 	strex	r2, r3, [r6]
   18cba:	2a00      	cmp	r2, #0
   18cbc:	d1f7      	bne.n	18cae <bt_le_adv_start_legacy+0x3a2>
   18cbe:	f3bf 8f5b 	dmb	ish
}
   18cc2:	e781      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
		return -EAGAIN;
   18cc4:	f06f 090a 	mvn.w	r9, #10
   18cc8:	e77e      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
		return -EINVAL;
   18cca:	f06f 0915 	mvn.w	r9, #21
   18cce:	e77b      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
		return -EINVAL;
   18cd0:	f06f 0915 	mvn.w	r9, #21
   18cd4:	e778      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
		return -EALREADY;
   18cd6:	f06f 0977 	mvn.w	r9, #119	; 0x77
   18cda:	e775      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
		return -ENOBUFS;
   18cdc:	f06f 0968 	mvn.w	r9, #104	; 0x68
   18ce0:	e772      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
			return err;
   18ce2:	4681      	mov	r9, r0
   18ce4:	e770      	b.n	18bc8 <bt_le_adv_start_legacy+0x2bc>
   18ce6:	bf00      	nop

00018ce8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   18ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cec:	b082      	sub	sp, #8
   18cee:	4606      	mov	r6, r0
   18cf0:	460c      	mov	r4, r1
   18cf2:	4615      	mov	r5, r2
   18cf4:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
   18cf6:	f7ff fcd1 	bl	1869c <adv_new_legacy>
	int err;

	if (!adv) {
   18cfa:	b1f8      	cbz	r0, 18d3c <bt_le_adv_start+0x54>
   18cfc:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   18cfe:	9b08      	ldr	r3, [sp, #32]
   18d00:	9301      	str	r3, [sp, #4]
   18d02:	9700      	str	r7, [sp, #0]
   18d04:	462b      	mov	r3, r5
   18d06:	4622      	mov	r2, r4
   18d08:	4631      	mov	r1, r6
   18d0a:	f7ff fdff 	bl	1890c <bt_le_adv_start_legacy>
   18d0e:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   18d10:	4629      	mov	r1, r5
   18d12:	4620      	mov	r0, r4
   18d14:	f014 fb24 	bl	2d360 <ad_is_limited>
   18d18:	b918      	cbnz	r0, 18d22 <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   18d1a:	4630      	mov	r0, r6
   18d1c:	b002      	add	sp, #8
   18d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   18d22:	f108 0818 	add.w	r8, r8, #24
   18d26:	4907      	ldr	r1, [pc, #28]	; (18d44 <bt_le_adv_start+0x5c>)
   18d28:	4640      	mov	r0, r8
   18d2a:	f00c f943 	bl	24fb4 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   18d2e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18d32:	2300      	movs	r3, #0
   18d34:	4640      	mov	r0, r8
   18d36:	f00c fa63 	bl	25200 <k_work_reschedule>
   18d3a:	e7ee      	b.n	18d1a <bt_le_adv_start+0x32>
		return -ENOMEM;
   18d3c:	f06f 060b 	mvn.w	r6, #11
   18d40:	e7eb      	b.n	18d1a <bt_le_adv_start+0x32>
   18d42:	bf00      	nop
   18d44:	00018ddd 	.word	0x00018ddd

00018d48 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   18d48:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18d4a:	f7ff fddb 	bl	18904 <bt_le_adv_lookup_legacy>
   18d4e:	4604      	mov	r4, r0
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   18d50:	f014 fc4e 	bl	2d5f0 <bt_le_lim_adv_cancel_timeout>

	if (!adv) {
   18d54:	b1c4      	cbz	r4, 18d88 <bt_le_adv_stop+0x40>
	}

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   18d56:	f104 0310 	add.w	r3, r4, #16
   18d5a:	f3bf 8f5b 	dmb	ish
   18d5e:	e853 2f00 	ldrex	r2, [r3]
   18d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   18d66:	e843 2100 	strex	r1, r2, [r3]
   18d6a:	2900      	cmp	r1, #0
   18d6c:	d1f7      	bne.n	18d5e <bt_le_adv_stop+0x16>
   18d6e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18d72:	f3bf 8f5b 	dmb	ish
   18d76:	6923      	ldr	r3, [r4, #16]
   18d78:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18d7c:	f3c3 1080 	ubfx	r0, r3, #6, #1

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   18d80:	f013 0f40 	tst.w	r3, #64	; 0x40
   18d84:	d112      	bne.n	18dac <bt_le_adv_stop+0x64>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   18d86:	bd10      	pop	{r4, pc}
   18d88:	4b11      	ldr	r3, [pc, #68]	; (18dd0 <bt_le_adv_stop+0x88>)
   18d8a:	4a12      	ldr	r2, [pc, #72]	; (18dd4 <bt_le_adv_stop+0x8c>)
   18d8c:	1a9b      	subs	r3, r3, r2
   18d8e:	08db      	lsrs	r3, r3, #3
		BT_ERR("No valid legacy adv");
   18d90:	f04f 0100 	mov.w	r1, #0
   18d94:	2201      	movs	r2, #1
   18d96:	f362 0102 	bfi	r1, r2, #0, #3
   18d9a:	f36f 01c5 	bfc	r1, #3, #3
   18d9e:	f363 118f 	bfi	r1, r3, #6, #10
   18da2:	480d      	ldr	r0, [pc, #52]	; (18dd8 <bt_le_adv_stop+0x90>)
   18da4:	f7fa fd7c 	bl	138a0 <log_0>
		return 0;
   18da8:	2000      	movs	r0, #0
   18daa:	e7ec      	b.n	18d86 <bt_le_adv_stop+0x3e>
   18dac:	f3bf 8f5b 	dmb	ish
   18db0:	6923      	ldr	r3, [r4, #16]
   18db2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18db6:	f413 7f00 	tst.w	r3, #512	; 0x200
   18dba:	d104      	bne.n	18dc6 <bt_le_adv_stop+0x7e>
		err = bt_le_adv_set_enable_legacy(adv, false);
   18dbc:	2100      	movs	r1, #0
   18dbe:	4620      	mov	r0, r4
   18dc0:	f014 fbea 	bl	2d598 <bt_le_adv_set_enable_legacy>
		if (err) {
   18dc4:	e7df      	b.n	18d86 <bt_le_adv_stop+0x3e>
		le_adv_stop_free_conn(adv, 0);
   18dc6:	2100      	movs	r1, #0
   18dc8:	4620      	mov	r0, r4
   18dca:	f7ff fd67 	bl	1889c <le_adv_stop_free_conn>
   18dce:	e7f5      	b.n	18dbc <bt_le_adv_stop+0x74>
   18dd0:	00031910 	.word	0x00031910
   18dd4:	00031908 	.word	0x00031908
   18dd8:	00033cf4 	.word	0x00033cf4

00018ddc <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   18ddc:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   18dde:	f7ff ffb3 	bl	18d48 <bt_le_adv_stop>
   18de2:	4601      	mov	r1, r0
   18de4:	4b08      	ldr	r3, [pc, #32]	; (18e08 <adv_timeout+0x2c>)
   18de6:	4a09      	ldr	r2, [pc, #36]	; (18e0c <adv_timeout+0x30>)
   18de8:	1a9b      	subs	r3, r3, r2
   18dea:	08db      	lsrs	r3, r3, #3
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   18dec:	f04f 0200 	mov.w	r2, #0
   18df0:	2002      	movs	r0, #2
   18df2:	f360 0202 	bfi	r2, r0, #0, #3
   18df6:	f36f 02c5 	bfc	r2, #3, #3
   18dfa:	f363 128f 	bfi	r2, r3, #6, #10
   18dfe:	4804      	ldr	r0, [pc, #16]	; (18e10 <adv_timeout+0x34>)
   18e00:	f7fa fd7e 	bl	13900 <log_1>
}
   18e04:	bd08      	pop	{r3, pc}
   18e06:	bf00      	nop
   18e08:	00031910 	.word	0x00031910
   18e0c:	00031908 	.word	0x00031908
   18e10:	00033d08 	.word	0x00033d08

00018e14 <tx_free>:
		return "(unknown)";
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
   18e14:	b508      	push	{r3, lr}
   18e16:	4601      	mov	r1, r0
	tx->cb = NULL;
   18e18:	2300      	movs	r3, #0
   18e1a:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   18e1c:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   18e1e:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   18e20:	4801      	ldr	r0, [pc, #4]	; (18e28 <tx_free+0x14>)
   18e22:	f017 fbb0 	bl	30586 <k_queue_append>
}
   18e26:	bd08      	pop	{r3, pc}
   18e28:	20000cbc 	.word	0x20000cbc

00018e2c <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   18e2c:	b570      	push	{r4, r5, r6, lr}
   18e2e:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   18e30:	4b16      	ldr	r3, [pc, #88]	; (18e8c <notify_disconnected+0x60>)
   18e32:	681c      	ldr	r4, [r3, #0]
   18e34:	e000      	b.n	18e38 <notify_disconnected+0xc>
   18e36:	6924      	ldr	r4, [r4, #16]
   18e38:	b134      	cbz	r4, 18e48 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   18e3a:	6863      	ldr	r3, [r4, #4]
   18e3c:	2b00      	cmp	r3, #0
   18e3e:	d0fa      	beq.n	18e36 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   18e40:	7a69      	ldrb	r1, [r5, #9]
   18e42:	4628      	mov	r0, r5
   18e44:	4798      	blx	r3
   18e46:	e7f6      	b.n	18e36 <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18e48:	4c11      	ldr	r4, [pc, #68]	; (18e90 <notify_disconnected+0x64>)
   18e4a:	e000      	b.n	18e4e <notify_disconnected+0x22>
   18e4c:	3414      	adds	r4, #20
   18e4e:	4b11      	ldr	r3, [pc, #68]	; (18e94 <notify_disconnected+0x68>)
   18e50:	429c      	cmp	r4, r3
   18e52:	d809      	bhi.n	18e68 <notify_disconnected+0x3c>
   18e54:	4b0f      	ldr	r3, [pc, #60]	; (18e94 <notify_disconnected+0x68>)
   18e56:	429c      	cmp	r4, r3
   18e58:	d217      	bcs.n	18e8a <notify_disconnected+0x5e>
		if (cb->disconnected) {
   18e5a:	6863      	ldr	r3, [r4, #4]
   18e5c:	2b00      	cmp	r3, #0
   18e5e:	d0f5      	beq.n	18e4c <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   18e60:	7a69      	ldrb	r1, [r5, #9]
   18e62:	4628      	mov	r0, r5
   18e64:	4798      	blx	r3
   18e66:	e7f1      	b.n	18e4c <notify_disconnected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18e68:	4e0b      	ldr	r6, [pc, #44]	; (18e98 <notify_disconnected+0x6c>)
   18e6a:	f240 5326 	movw	r3, #1318	; 0x526
   18e6e:	4632      	mov	r2, r6
   18e70:	490a      	ldr	r1, [pc, #40]	; (18e9c <notify_disconnected+0x70>)
   18e72:	480b      	ldr	r0, [pc, #44]	; (18ea0 <notify_disconnected+0x74>)
   18e74:	f013 f968 	bl	2c148 <printk>
   18e78:	480a      	ldr	r0, [pc, #40]	; (18ea4 <notify_disconnected+0x78>)
   18e7a:	f013 f965 	bl	2c148 <printk>
   18e7e:	f240 5126 	movw	r1, #1318	; 0x526
   18e82:	4630      	mov	r0, r6
   18e84:	f013 fb65 	bl	2c552 <assert_post_action>
   18e88:	e7e4      	b.n	18e54 <notify_disconnected+0x28>
		}
	}
}
   18e8a:	bd70      	pop	{r4, r5, r6, pc}
   18e8c:	20002ddc 	.word	0x20002ddc
   18e90:	000318f0 	.word	0x000318f0
   18e94:	000318f0 	.word	0x000318f0
   18e98:	00033d30 	.word	0x00033d30
   18e9c:	00033d60 	.word	0x00033d60
   18ea0:	00031df4 	.word	0x00031df4
   18ea4:	00033d7c 	.word	0x00033d7c

00018ea8 <conn_tx_alloc>:
{
   18ea8:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   18eaa:	f00d fd49 	bl	26940 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   18eae:	4b08      	ldr	r3, [pc, #32]	; (18ed0 <conn_tx_alloc+0x28>)
   18eb0:	4283      	cmp	r3, r0
   18eb2:	d007      	beq.n	18ec4 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   18eb4:	f04f 32ff 	mov.w	r2, #4294967295
   18eb8:	f04f 33ff 	mov.w	r3, #4294967295
   18ebc:	4805      	ldr	r0, [pc, #20]	; (18ed4 <conn_tx_alloc+0x2c>)
   18ebe:	f00b fb79 	bl	245b4 <z_impl_k_queue_get>
}
   18ec2:	bd08      	pop	{r3, pc}
   18ec4:	2200      	movs	r2, #0
   18ec6:	2300      	movs	r3, #0
   18ec8:	4802      	ldr	r0, [pc, #8]	; (18ed4 <conn_tx_alloc+0x2c>)
   18eca:	f00b fb73 	bl	245b4 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   18ece:	e7f8      	b.n	18ec2 <conn_tx_alloc+0x1a>
   18ed0:	20002608 	.word	0x20002608
   18ed4:	20000cbc 	.word	0x20000cbc

00018ed8 <notify_connected>:
{
   18ed8:	b570      	push	{r4, r5, r6, lr}
   18eda:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18edc:	4b19      	ldr	r3, [pc, #100]	; (18f44 <notify_connected+0x6c>)
   18ede:	681c      	ldr	r4, [r3, #0]
   18ee0:	e000      	b.n	18ee4 <notify_connected+0xc>
   18ee2:	6924      	ldr	r4, [r4, #16]
   18ee4:	b134      	cbz	r4, 18ef4 <notify_connected+0x1c>
		if (cb->connected) {
   18ee6:	6823      	ldr	r3, [r4, #0]
   18ee8:	2b00      	cmp	r3, #0
   18eea:	d0fa      	beq.n	18ee2 <notify_connected+0xa>
			cb->connected(conn, conn->err);
   18eec:	7a69      	ldrb	r1, [r5, #9]
   18eee:	4628      	mov	r0, r5
   18ef0:	4798      	blx	r3
   18ef2:	e7f6      	b.n	18ee2 <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18ef4:	4c14      	ldr	r4, [pc, #80]	; (18f48 <notify_connected+0x70>)
   18ef6:	e000      	b.n	18efa <notify_connected+0x22>
   18ef8:	3414      	adds	r4, #20
   18efa:	4b14      	ldr	r3, [pc, #80]	; (18f4c <notify_connected+0x74>)
   18efc:	429c      	cmp	r4, r3
   18efe:	d809      	bhi.n	18f14 <notify_connected+0x3c>
   18f00:	4b12      	ldr	r3, [pc, #72]	; (18f4c <notify_connected+0x74>)
   18f02:	429c      	cmp	r4, r3
   18f04:	d217      	bcs.n	18f36 <notify_connected+0x5e>
		if (cb->connected) {
   18f06:	6823      	ldr	r3, [r4, #0]
   18f08:	2b00      	cmp	r3, #0
   18f0a:	d0f5      	beq.n	18ef8 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   18f0c:	7a69      	ldrb	r1, [r5, #9]
   18f0e:	4628      	mov	r0, r5
   18f10:	4798      	blx	r3
   18f12:	e7f1      	b.n	18ef8 <notify_connected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18f14:	4e0e      	ldr	r6, [pc, #56]	; (18f50 <notify_connected+0x78>)
   18f16:	f240 5311 	movw	r3, #1297	; 0x511
   18f1a:	4632      	mov	r2, r6
   18f1c:	490d      	ldr	r1, [pc, #52]	; (18f54 <notify_connected+0x7c>)
   18f1e:	480e      	ldr	r0, [pc, #56]	; (18f58 <notify_connected+0x80>)
   18f20:	f013 f912 	bl	2c148 <printk>
   18f24:	480d      	ldr	r0, [pc, #52]	; (18f5c <notify_connected+0x84>)
   18f26:	f013 f90f 	bl	2c148 <printk>
   18f2a:	f240 5111 	movw	r1, #1297	; 0x511
   18f2e:	4630      	mov	r0, r6
   18f30:	f013 fb0f 	bl	2c552 <assert_post_action>
   18f34:	e7e4      	b.n	18f00 <notify_connected+0x28>
	if (!conn->err) {
   18f36:	7a6b      	ldrb	r3, [r5, #9]
   18f38:	b103      	cbz	r3, 18f3c <notify_connected+0x64>
}
   18f3a:	bd70      	pop	{r4, r5, r6, pc}
		bt_gatt_connected(conn);
   18f3c:	4628      	mov	r0, r5
   18f3e:	f003 f9e3 	bl	1c308 <bt_gatt_connected>
}
   18f42:	e7fa      	b.n	18f3a <notify_connected+0x62>
   18f44:	20002ddc 	.word	0x20002ddc
   18f48:	000318f0 	.word	0x000318f0
   18f4c:	000318f0 	.word	0x000318f0
   18f50:	00033d30 	.word	0x00033d30
   18f54:	00033d60 	.word	0x00033d60
   18f58:	00031df4 	.word	0x00031df4
   18f5c:	00033d7c 	.word	0x00033d7c

00018f60 <bt_conn_get_pkts>:
}
   18f60:	4800      	ldr	r0, [pc, #0]	; (18f64 <bt_conn_get_pkts+0x4>)
   18f62:	4770      	bx	lr
   18f64:	200003b0 	.word	0x200003b0

00018f68 <send_frag>:
{
   18f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18f6c:	4605      	mov	r5, r0
   18f6e:	460e      	mov	r6, r1
   18f70:	4691      	mov	r9, r2
   18f72:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18f74:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   18f76:	f7ff fff3 	bl	18f60 <bt_conn_get_pkts>
   18f7a:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   18f7c:	f04f 32ff 	mov.w	r2, #4294967295
   18f80:	f04f 33ff 	mov.w	r3, #4294967295
   18f84:	f00b fbec 	bl	24760 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   18f88:	7aab      	ldrb	r3, [r5, #10]
   18f8a:	2b07      	cmp	r3, #7
   18f8c:	d159      	bne.n	19042 <send_frag+0xda>
   18f8e:	f04f 0240 	mov.w	r2, #64	; 0x40
   18f92:	f3ef 8311 	mrs	r3, BASEPRI
   18f96:	f382 8812 	msr	BASEPRI_MAX, r2
   18f9a:	f3bf 8f6f 	isb	sy
	if (tx) {
   18f9e:	b1af      	cbz	r7, 18fcc <send_frag+0x64>
	parent->next = child;
   18fa0:	2200      	movs	r2, #0
   18fa2:	603a      	str	r2, [r7, #0]
	return list->tail;
   18fa4:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   18fa6:	b172      	cbz	r2, 18fc6 <send_frag+0x5e>
	parent->next = child;
   18fa8:	6017      	str	r7, [r2, #0]
	list->tail = node;
   18faa:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   18fac:	f383 8811 	msr	BASEPRI, r3
   18fb0:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   18fb4:	464a      	mov	r2, r9
   18fb6:	4631      	mov	r1, r6
   18fb8:	4628      	mov	r0, r5
   18fba:	f014 fb9a 	bl	2d6f2 <send_acl>
	if (err) {
   18fbe:	4601      	mov	r1, r0
   18fc0:	b988      	cbnz	r0, 18fe6 <send_frag+0x7e>
	return true;
   18fc2:	2001      	movs	r0, #1
   18fc4:	e046      	b.n	19054 <send_frag+0xec>
   18fc6:	61af      	str	r7, [r5, #24]
	list->head = node;
   18fc8:	616f      	str	r7, [r5, #20]
}
   18fca:	e7ef      	b.n	18fac <send_frag+0x44>
	return list->tail;
   18fcc:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   18fce:	b13a      	cbz	r2, 18fe0 <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   18fd0:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   18fd4:	f8da 2000 	ldr.w	r2, [sl]
   18fd8:	3201      	adds	r2, #1
   18fda:	f8ca 2000 	str.w	r2, [sl]
   18fde:	e7e5      	b.n	18fac <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   18fe0:	f105 0a1c 	add.w	sl, r5, #28
   18fe4:	e7f6      	b.n	18fd4 <send_frag+0x6c>
   18fe6:	4b2f      	ldr	r3, [pc, #188]	; (190a4 <send_frag+0x13c>)
   18fe8:	4a2f      	ldr	r2, [pc, #188]	; (190a8 <send_frag+0x140>)
   18fea:	1a9b      	subs	r3, r3, r2
   18fec:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   18fee:	f04f 0200 	mov.w	r2, #0
   18ff2:	2001      	movs	r0, #1
   18ff4:	f360 0202 	bfi	r2, r0, #0, #3
   18ff8:	f36f 02c5 	bfc	r2, #3, #3
   18ffc:	f363 128f 	bfi	r2, r3, #6, #10
   19000:	482a      	ldr	r0, [pc, #168]	; (190ac <send_frag+0x144>)
   19002:	f7fa fc7d 	bl	13900 <log_1>
	__asm__ volatile(
   19006:	f04f 0340 	mov.w	r3, #64	; 0x40
   1900a:	f3ef 8911 	mrs	r9, BASEPRI
   1900e:	f383 8812 	msr	BASEPRI_MAX, r3
   19012:	f3bf 8f6f 	isb	sy
		if (tx) {
   19016:	b347      	cbz	r7, 1906a <send_frag+0x102>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   19018:	4639      	mov	r1, r7
	return list->head;
   1901a:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1901c:	2200      	movs	r2, #0
   1901e:	b163      	cbz	r3, 1903a <send_frag+0xd2>
   19020:	428b      	cmp	r3, r1
   19022:	d002      	beq.n	1902a <send_frag+0xc2>
   19024:	461a      	mov	r2, r3
   19026:	681b      	ldr	r3, [r3, #0]
   19028:	e7f9      	b.n	1901e <send_frag+0xb6>
Z_GENLIST_REMOVE(slist, snode)
   1902a:	b1aa      	cbz	r2, 19058 <send_frag+0xf0>
	return node->next;
   1902c:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   1902e:	6013      	str	r3, [r2, #0]
	return list->tail;
   19030:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   19032:	42bb      	cmp	r3, r7
   19034:	d017      	beq.n	19066 <send_frag+0xfe>
	parent->next = child;
   19036:	2300      	movs	r3, #0
   19038:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   1903a:	f389 8811 	msr	BASEPRI, r9
   1903e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   19042:	4640      	mov	r0, r8
   19044:	f00b fb44 	bl	246d0 <z_impl_k_sem_give>
	if (tx) {
   19048:	b117      	cbz	r7, 19050 <send_frag+0xe8>
		tx_free(tx);
   1904a:	4638      	mov	r0, r7
   1904c:	f7ff fee2 	bl	18e14 <tx_free>
	if (always_consume) {
   19050:	bb14      	cbnz	r4, 19098 <send_frag+0x130>
	return false;
   19052:	4620      	mov	r0, r4
}
   19054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   19058:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   1905a:	616b      	str	r3, [r5, #20]
	return list->tail;
   1905c:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   1905e:	42ba      	cmp	r2, r7
   19060:	d1e9      	bne.n	19036 <send_frag+0xce>
	list->tail = node;
   19062:	61ab      	str	r3, [r5, #24]
}
   19064:	e7e7      	b.n	19036 <send_frag+0xce>
	list->tail = node;
   19066:	61aa      	str	r2, [r5, #24]
}
   19068:	e7e5      	b.n	19036 <send_frag+0xce>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1906a:	f8da 3000 	ldr.w	r3, [sl]
   1906e:	b12b      	cbz	r3, 1907c <send_frag+0x114>
			(*pending_no_cb)--;
   19070:	f8da 3000 	ldr.w	r3, [sl]
   19074:	3b01      	subs	r3, #1
   19076:	f8ca 3000 	str.w	r3, [sl]
   1907a:	e7de      	b.n	1903a <send_frag+0xd2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1907c:	4d0c      	ldr	r5, [pc, #48]	; (190b0 <send_frag+0x148>)
   1907e:	f240 230f 	movw	r3, #527	; 0x20f
   19082:	462a      	mov	r2, r5
   19084:	490b      	ldr	r1, [pc, #44]	; (190b4 <send_frag+0x14c>)
   19086:	480c      	ldr	r0, [pc, #48]	; (190b8 <send_frag+0x150>)
   19088:	f013 f85e 	bl	2c148 <printk>
   1908c:	f240 210f 	movw	r1, #527	; 0x20f
   19090:	4628      	mov	r0, r5
   19092:	f013 fa5e 	bl	2c552 <assert_post_action>
   19096:	e7eb      	b.n	19070 <send_frag+0x108>
		net_buf_unref(buf);
   19098:	4630      	mov	r0, r6
   1909a:	f003 fbe3 	bl	1c864 <net_buf_unref>
	return false;
   1909e:	2000      	movs	r0, #0
   190a0:	e7d8      	b.n	19054 <send_frag+0xec>
   190a2:	bf00      	nop
   190a4:	00031928 	.word	0x00031928
   190a8:	00031908 	.word	0x00031908
   190ac:	000339a8 	.word	0x000339a8
   190b0:	00033d30 	.word	0x00033d30
   190b4:	00033d9c 	.word	0x00033d9c
   190b8:	00031df4 	.word	0x00031df4

000190bc <bt_conn_new>:
{
   190bc:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   190be:	2300      	movs	r3, #0
   190c0:	428b      	cmp	r3, r1
   190c2:	d227      	bcs.n	19114 <bt_conn_new+0x58>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   190c4:	24c8      	movs	r4, #200	; 0xc8
   190c6:	fb04 0403 	mla	r4, r4, r3, r0
   190ca:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   190ce:	2501      	movs	r5, #1
   190d0:	f3bf 8f5b 	dmb	ish
   190d4:	e852 6f00 	ldrex	r6, [r2]
   190d8:	2e00      	cmp	r6, #0
   190da:	d104      	bne.n	190e6 <bt_conn_new+0x2a>
   190dc:	e842 5c00 	strex	ip, r5, [r2]
   190e0:	f1bc 0f00 	cmp.w	ip, #0
   190e4:	d1f6      	bne.n	190d4 <bt_conn_new+0x18>
   190e6:	f3bf 8f5b 	dmb	ish
   190ea:	d111      	bne.n	19110 <bt_conn_new+0x54>
	if (!conn) {
   190ec:	b174      	cbz	r4, 1910c <bt_conn_new+0x50>
__ssp_bos_icheck3(memset, void *, int)
   190ee:	22c0      	movs	r2, #192	; 0xc0
   190f0:	2100      	movs	r1, #0
   190f2:	4620      	mov	r0, r4
   190f4:	f017 fc04 	bl	30900 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   190f8:	4907      	ldr	r1, [pc, #28]	; (19118 <bt_conn_new+0x5c>)
   190fa:	f104 0060 	add.w	r0, r4, #96	; 0x60
   190fe:	f00b ff59 	bl	24fb4 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   19102:	4906      	ldr	r1, [pc, #24]	; (1911c <bt_conn_new+0x60>)
   19104:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19108:	f00b fe2a 	bl	24d60 <k_work_init>
}
   1910c:	4620      	mov	r0, r4
   1910e:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   19110:	442b      	add	r3, r5
   19112:	e7d5      	b.n	190c0 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   19114:	2400      	movs	r4, #0
   19116:	e7e9      	b.n	190ec <bt_conn_new+0x30>
   19118:	00019b01 	.word	0x00019b01
   1911c:	0002d6e9 	.word	0x0002d6e9

00019120 <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   19120:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   19122:	2101      	movs	r1, #1
   19124:	4801      	ldr	r0, [pc, #4]	; (1912c <acl_conn_new+0xc>)
   19126:	f7ff ffc9 	bl	190bc <bt_conn_new>
}
   1912a:	bd08      	pop	{r3, pc}
   1912c:	20001df0 	.word	0x20001df0

00019130 <bt_acl_recv>:
{
   19130:	b570      	push	{r4, r5, r6, lr}
   19132:	4604      	mov	r4, r0
   19134:	460d      	mov	r5, r1
	switch (flags) {
   19136:	2a01      	cmp	r2, #1
   19138:	d02d      	beq.n	19196 <bt_acl_recv+0x66>
   1913a:	4611      	mov	r1, r2
   1913c:	2a02      	cmp	r2, #2
   1913e:	d173      	bne.n	19228 <bt_acl_recv+0xf8>
		if (conn->rx) {
   19140:	6903      	ldr	r3, [r0, #16]
   19142:	b193      	cbz	r3, 1916a <bt_acl_recv+0x3a>
   19144:	4b4e      	ldr	r3, [pc, #312]	; (19280 <bt_acl_recv+0x150>)
   19146:	4a4f      	ldr	r2, [pc, #316]	; (19284 <bt_acl_recv+0x154>)
   19148:	1a9b      	subs	r3, r3, r2
   1914a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected first L2CAP frame");
   1914c:	f04f 0100 	mov.w	r1, #0
   19150:	2201      	movs	r2, #1
   19152:	f362 0102 	bfi	r1, r2, #0, #3
   19156:	f36f 01c5 	bfc	r1, #3, #3
   1915a:	f363 118f 	bfi	r1, r3, #6, #10
   1915e:	484a      	ldr	r0, [pc, #296]	; (19288 <bt_acl_recv+0x158>)
   19160:	f7fa fb9e 	bl	138a0 <log_0>
			bt_conn_reset_rx_state(conn);
   19164:	4620      	mov	r0, r4
   19166:	f014 fb27 	bl	2d7b8 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1916a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1916c:	6921      	ldr	r1, [r4, #16]
   1916e:	8988      	ldrh	r0, [r1, #12]
   19170:	2801      	cmp	r0, #1
   19172:	d96f      	bls.n	19254 <bt_acl_recv+0x124>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   19174:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   19176:	785d      	ldrb	r5, [r3, #1]
   19178:	781a      	ldrb	r2, [r3, #0]
   1917a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1917e:	3204      	adds	r2, #4
   19180:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   19182:	4290      	cmp	r0, r2
   19184:	d366      	bcc.n	19254 <bt_acl_recv+0x124>
	if (conn->rx->len > acl_total_len) {
   19186:	d866      	bhi.n	19256 <bt_acl_recv+0x126>
	conn->rx = NULL;
   19188:	2300      	movs	r3, #0
   1918a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1918c:	2201      	movs	r2, #1
   1918e:	4620      	mov	r0, r4
   19190:	f000 ff94 	bl	1a0bc <bt_l2cap_recv>
   19194:	e05e      	b.n	19254 <bt_acl_recv+0x124>
		if (!conn->rx) {
   19196:	6900      	ldr	r0, [r0, #16]
   19198:	b180      	cbz	r0, 191bc <bt_acl_recv+0x8c>
		if (!buf->len) {
   1919a:	898e      	ldrh	r6, [r1, #12]
   1919c:	b32e      	cbz	r6, 191ea <bt_acl_recv+0xba>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1919e:	3008      	adds	r0, #8
   191a0:	f015 fe79 	bl	2ee96 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   191a4:	4286      	cmp	r6, r0
   191a6:	d824      	bhi.n	191f2 <bt_acl_recv+0xc2>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   191a8:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   191aa:	89aa      	ldrh	r2, [r5, #12]
   191ac:	68a9      	ldr	r1, [r5, #8]
   191ae:	3008      	adds	r0, #8
   191b0:	f015 fe7a 	bl	2eea8 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   191b4:	4628      	mov	r0, r5
   191b6:	f003 fb55 	bl	1c864 <net_buf_unref>
		break;
   191ba:	e7d7      	b.n	1916c <bt_acl_recv+0x3c>
   191bc:	4b30      	ldr	r3, [pc, #192]	; (19280 <bt_acl_recv+0x150>)
   191be:	4a31      	ldr	r2, [pc, #196]	; (19284 <bt_acl_recv+0x154>)
   191c0:	1a9b      	subs	r3, r3, r2
   191c2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected L2CAP continuation");
   191c4:	f04f 0100 	mov.w	r1, #0
   191c8:	2201      	movs	r2, #1
   191ca:	f362 0102 	bfi	r1, r2, #0, #3
   191ce:	f36f 01c5 	bfc	r1, #3, #3
   191d2:	f363 118f 	bfi	r1, r3, #6, #10
   191d6:	482d      	ldr	r0, [pc, #180]	; (1928c <bt_acl_recv+0x15c>)
   191d8:	f7fa fb62 	bl	138a0 <log_0>
			bt_conn_reset_rx_state(conn);
   191dc:	4620      	mov	r0, r4
   191de:	f014 faeb 	bl	2d7b8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   191e2:	4628      	mov	r0, r5
   191e4:	f003 fb3e 	bl	1c864 <net_buf_unref>
			return;
   191e8:	e034      	b.n	19254 <bt_acl_recv+0x124>
			net_buf_unref(buf);
   191ea:	4608      	mov	r0, r1
   191ec:	f003 fb3a 	bl	1c864 <net_buf_unref>
			return;
   191f0:	e030      	b.n	19254 <bt_acl_recv+0x124>
   191f2:	4b23      	ldr	r3, [pc, #140]	; (19280 <bt_acl_recv+0x150>)
   191f4:	4a23      	ldr	r2, [pc, #140]	; (19284 <bt_acl_recv+0x154>)
   191f6:	1a9b      	subs	r3, r3, r2
   191f8:	08db      	lsrs	r3, r3, #3
			BT_ERR("Not enough buffer space for L2CAP data");
   191fa:	f04f 0100 	mov.w	r1, #0
   191fe:	2201      	movs	r2, #1
   19200:	f362 0102 	bfi	r1, r2, #0, #3
   19204:	f36f 01c5 	bfc	r1, #3, #3
   19208:	f363 118f 	bfi	r1, r3, #6, #10
   1920c:	4820      	ldr	r0, [pc, #128]	; (19290 <bt_acl_recv+0x160>)
   1920e:	f7fa fb47 	bl	138a0 <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   19212:	2200      	movs	r2, #0
   19214:	6921      	ldr	r1, [r4, #16]
   19216:	4620      	mov	r0, r4
   19218:	f000 ff50 	bl	1a0bc <bt_l2cap_recv>
			conn->rx = NULL;
   1921c:	2300      	movs	r3, #0
   1921e:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   19220:	4628      	mov	r0, r5
   19222:	f003 fb1f 	bl	1c864 <net_buf_unref>
			return;
   19226:	e015      	b.n	19254 <bt_acl_recv+0x124>
   19228:	4b15      	ldr	r3, [pc, #84]	; (19280 <bt_acl_recv+0x150>)
   1922a:	4a16      	ldr	r2, [pc, #88]	; (19284 <bt_acl_recv+0x154>)
   1922c:	1a9b      	subs	r3, r3, r2
   1922e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   19230:	f04f 0200 	mov.w	r2, #0
   19234:	2001      	movs	r0, #1
   19236:	f360 0202 	bfi	r2, r0, #0, #3
   1923a:	f36f 02c5 	bfc	r2, #3, #3
   1923e:	f363 128f 	bfi	r2, r3, #6, #10
   19242:	4814      	ldr	r0, [pc, #80]	; (19294 <bt_acl_recv+0x164>)
   19244:	f7fa fb5c 	bl	13900 <log_1>
		bt_conn_reset_rx_state(conn);
   19248:	4620      	mov	r0, r4
   1924a:	f014 fab5 	bl	2d7b8 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1924e:	4628      	mov	r0, r5
   19250:	f003 fb08 	bl	1c864 <net_buf_unref>
}
   19254:	bd70      	pop	{r4, r5, r6, pc}
   19256:	490a      	ldr	r1, [pc, #40]	; (19280 <bt_acl_recv+0x150>)
   19258:	4b0a      	ldr	r3, [pc, #40]	; (19284 <bt_acl_recv+0x154>)
   1925a:	1ac9      	subs	r1, r1, r3
   1925c:	08c9      	lsrs	r1, r1, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   1925e:	f04f 0300 	mov.w	r3, #0
   19262:	2501      	movs	r5, #1
   19264:	f365 0302 	bfi	r3, r5, #0, #3
   19268:	f36f 03c5 	bfc	r3, #3, #3
   1926c:	f361 138f 	bfi	r3, r1, #6, #10
   19270:	4601      	mov	r1, r0
   19272:	4809      	ldr	r0, [pc, #36]	; (19298 <bt_acl_recv+0x168>)
   19274:	f7fa fb7a 	bl	1396c <log_2>
		bt_conn_reset_rx_state(conn);
   19278:	4620      	mov	r0, r4
   1927a:	f014 fa9d 	bl	2d7b8 <bt_conn_reset_rx_state>
		return;
   1927e:	e7e9      	b.n	19254 <bt_acl_recv+0x124>
   19280:	00031928 	.word	0x00031928
   19284:	00031908 	.word	0x00031908
   19288:	00033db0 	.word	0x00033db0
   1928c:	00033dd0 	.word	0x00033dd0
   19290:	00033df0 	.word	0x00033df0
   19294:	00033e18 	.word	0x00033e18
   19298:	00033e38 	.word	0x00033e38

0001929c <conn_cleanup>:
{
   1929c:	b538      	push	{r3, r4, r5, lr}
   1929e:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   192a0:	e004      	b.n	192ac <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   192a2:	f7ff fdb7 	bl	18e14 <tx_free>
		net_buf_unref(buf);
   192a6:	4620      	mov	r0, r4
   192a8:	f003 fadc 	bl	1c864 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   192ac:	2200      	movs	r2, #0
   192ae:	2300      	movs	r3, #0
   192b0:	f105 0038 	add.w	r0, r5, #56	; 0x38
   192b4:	f003 fa3e 	bl	1c734 <net_buf_get>
   192b8:	4604      	mov	r4, r0
   192ba:	b118      	cbz	r0, 192c4 <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   192bc:	6960      	ldr	r0, [r4, #20]
   192be:	2800      	cmp	r0, #0
   192c0:	d1ef      	bne.n	192a2 <conn_cleanup+0x6>
   192c2:	e7f0      	b.n	192a6 <conn_cleanup+0xa>
	return list->head;
   192c4:	696b      	ldr	r3, [r5, #20]
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   192c6:	b17b      	cbz	r3, 192e8 <conn_cleanup+0x4c>
   192c8:	4c14      	ldr	r4, [pc, #80]	; (1931c <conn_cleanup+0x80>)
   192ca:	f240 2392 	movw	r3, #658	; 0x292
   192ce:	4622      	mov	r2, r4
   192d0:	4913      	ldr	r1, [pc, #76]	; (19320 <conn_cleanup+0x84>)
   192d2:	4814      	ldr	r0, [pc, #80]	; (19324 <conn_cleanup+0x88>)
   192d4:	f012 ff38 	bl	2c148 <printk>
   192d8:	4813      	ldr	r0, [pc, #76]	; (19328 <conn_cleanup+0x8c>)
   192da:	f012 ff35 	bl	2c148 <printk>
   192de:	f240 2192 	movw	r1, #658	; 0x292
   192e2:	4620      	mov	r0, r4
   192e4:	f013 f935 	bl	2c552 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   192e8:	69eb      	ldr	r3, [r5, #28]
   192ea:	b94b      	cbnz	r3, 19300 <conn_cleanup+0x64>
	bt_conn_reset_rx_state(conn);
   192ec:	4628      	mov	r0, r5
   192ee:	f014 fa63 	bl	2d7b8 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   192f2:	2200      	movs	r2, #0
   192f4:	2300      	movs	r3, #0
   192f6:	f105 0060 	add.w	r0, r5, #96	; 0x60
   192fa:	f00b ff81 	bl	25200 <k_work_reschedule>
}
   192fe:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   19300:	4c06      	ldr	r4, [pc, #24]	; (1931c <conn_cleanup+0x80>)
   19302:	f240 2393 	movw	r3, #659	; 0x293
   19306:	4622      	mov	r2, r4
   19308:	4908      	ldr	r1, [pc, #32]	; (1932c <conn_cleanup+0x90>)
   1930a:	4806      	ldr	r0, [pc, #24]	; (19324 <conn_cleanup+0x88>)
   1930c:	f012 ff1c 	bl	2c148 <printk>
   19310:	f240 2193 	movw	r1, #659	; 0x293
   19314:	4620      	mov	r0, r4
   19316:	f013 f91c 	bl	2c552 <assert_post_action>
   1931a:	e7e7      	b.n	192ec <conn_cleanup+0x50>
   1931c:	00033d30 	.word	0x00033d30
   19320:	00033e54 	.word	0x00033e54
   19324:	00031df4 	.word	0x00031df4
   19328:	00033e7c 	.word	0x00033e7c
   1932c:	00033e94 	.word	0x00033e94

00019330 <bt_conn_send_cb>:
{
   19330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19334:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   19336:	7a83      	ldrb	r3, [r0, #10]
   19338:	2b07      	cmp	r3, #7
   1933a:	d118      	bne.n	1936e <bt_conn_send_cb+0x3e>
   1933c:	4604      	mov	r4, r0
   1933e:	460d      	mov	r5, r1
   19340:	4616      	mov	r6, r2
	if (cb) {
   19342:	2a00      	cmp	r2, #0
   19344:	d04f      	beq.n	193e6 <bt_conn_send_cb+0xb6>
		tx = conn_tx_alloc();
   19346:	f7ff fdaf 	bl	18ea8 <conn_tx_alloc>
		if (!tx) {
   1934a:	4680      	mov	r8, r0
   1934c:	b310      	cbz	r0, 19394 <bt_conn_send_cb+0x64>
		if (conn->state != BT_CONN_CONNECTED) {
   1934e:	7aa3      	ldrb	r3, [r4, #10]
   19350:	2b07      	cmp	r3, #7
   19352:	d132      	bne.n	193ba <bt_conn_send_cb+0x8a>
		tx->cb = cb;
   19354:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   19356:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   19358:	2300      	movs	r3, #0
   1935a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1935c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1935e:	4629      	mov	r1, r5
   19360:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19364:	f003 fa46 	bl	1c7f4 <net_buf_put>
	return 0;
   19368:	2000      	movs	r0, #0
}
   1936a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1936e:	4b1f      	ldr	r3, [pc, #124]	; (193ec <bt_conn_send_cb+0xbc>)
   19370:	4a1f      	ldr	r2, [pc, #124]	; (193f0 <bt_conn_send_cb+0xc0>)
   19372:	1a9b      	subs	r3, r3, r2
   19374:	08db      	lsrs	r3, r3, #3
		BT_ERR("not connected!");
   19376:	f04f 0100 	mov.w	r1, #0
   1937a:	2201      	movs	r2, #1
   1937c:	f362 0102 	bfi	r1, r2, #0, #3
   19380:	f36f 01c5 	bfc	r1, #3, #3
   19384:	f363 118f 	bfi	r1, r3, #6, #10
   19388:	481a      	ldr	r0, [pc, #104]	; (193f4 <bt_conn_send_cb+0xc4>)
   1938a:	f7fa fa89 	bl	138a0 <log_0>
		return -ENOTCONN;
   1938e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19392:	e7ea      	b.n	1936a <bt_conn_send_cb+0x3a>
   19394:	4b15      	ldr	r3, [pc, #84]	; (193ec <bt_conn_send_cb+0xbc>)
   19396:	4a16      	ldr	r2, [pc, #88]	; (193f0 <bt_conn_send_cb+0xc0>)
   19398:	1a9b      	subs	r3, r3, r2
   1939a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate TX context");
   1939c:	f04f 0100 	mov.w	r1, #0
   193a0:	2201      	movs	r2, #1
   193a2:	f362 0102 	bfi	r1, r2, #0, #3
   193a6:	f36f 01c5 	bfc	r1, #3, #3
   193aa:	f363 118f 	bfi	r1, r3, #6, #10
   193ae:	4812      	ldr	r0, [pc, #72]	; (193f8 <bt_conn_send_cb+0xc8>)
   193b0:	f7fa fa76 	bl	138a0 <log_0>
			return -ENOBUFS;
   193b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   193b8:	e7d7      	b.n	1936a <bt_conn_send_cb+0x3a>
   193ba:	4b0c      	ldr	r3, [pc, #48]	; (193ec <bt_conn_send_cb+0xbc>)
   193bc:	4a0c      	ldr	r2, [pc, #48]	; (193f0 <bt_conn_send_cb+0xc0>)
   193be:	1a9b      	subs	r3, r3, r2
   193c0:	08db      	lsrs	r3, r3, #3
			BT_WARN("Disconnected while allocating context");
   193c2:	f04f 0100 	mov.w	r1, #0
   193c6:	2202      	movs	r2, #2
   193c8:	f362 0102 	bfi	r1, r2, #0, #3
   193cc:	f36f 01c5 	bfc	r1, #3, #3
   193d0:	f363 118f 	bfi	r1, r3, #6, #10
   193d4:	4809      	ldr	r0, [pc, #36]	; (193fc <bt_conn_send_cb+0xcc>)
   193d6:	f7fa fa63 	bl	138a0 <log_0>
			tx_free(tx);
   193da:	4640      	mov	r0, r8
   193dc:	f7ff fd1a 	bl	18e14 <tx_free>
			return -ENOTCONN;
   193e0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   193e4:	e7c1      	b.n	1936a <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
   193e6:	2300      	movs	r3, #0
   193e8:	614b      	str	r3, [r1, #20]
   193ea:	e7b8      	b.n	1935e <bt_conn_send_cb+0x2e>
   193ec:	00031928 	.word	0x00031928
   193f0:	00031908 	.word	0x00031908
   193f4:	00033eb0 	.word	0x00033eb0
   193f8:	00033ec0 	.word	0x00033ec0
   193fc:	00033ee0 	.word	0x00033ee0

00019400 <bt_conn_prepare_events>:
{
   19400:	b570      	push	{r4, r5, r6, lr}
   19402:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   19404:	4b0c      	ldr	r3, [pc, #48]	; (19438 <bt_conn_prepare_events+0x38>)
   19406:	2400      	movs	r4, #0
   19408:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1940a:	4622      	mov	r2, r4
   1940c:	2101      	movs	r1, #1
   1940e:	f00e f8ef 	bl	275f0 <k_poll_event_init>
   19412:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19414:	2c00      	cmp	r4, #0
   19416:	dd01      	ble.n	1941c <bt_conn_prepare_events+0x1c>
}
   19418:	4628      	mov	r0, r5
   1941a:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1941c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   19420:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   19424:	4b05      	ldr	r3, [pc, #20]	; (1943c <bt_conn_prepare_events+0x3c>)
   19426:	20c8      	movs	r0, #200	; 0xc8
   19428:	fb00 3004 	mla	r0, r0, r4, r3
   1942c:	f014 f9cd 	bl	2d7ca <conn_prepare_events>
   19430:	b900      	cbnz	r0, 19434 <bt_conn_prepare_events+0x34>
			ev_count++;
   19432:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19434:	3401      	adds	r4, #1
   19436:	e7ed      	b.n	19414 <bt_conn_prepare_events+0x14>
   19438:	200005ec 	.word	0x200005ec
   1943c:	20001df0 	.word	0x20001df0

00019440 <bt_conn_unref>:
{
   19440:	b538      	push	{r3, r4, r5, lr}
   19442:	4604      	mov	r4, r0
	old = atomic_dec(&conn->ref);
   19444:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19448:	f3bf 8f5b 	dmb	ish
   1944c:	e853 2f00 	ldrex	r2, [r3]
   19450:	1e51      	subs	r1, r2, #1
   19452:	e843 1000 	strex	r0, r1, [r3]
   19456:	2800      	cmp	r0, #0
   19458:	d1f8      	bne.n	1944c <bt_conn_unref+0xc>
   1945a:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   1945e:	2a00      	cmp	r2, #0
   19460:	dd03      	ble.n	1946a <bt_conn_unref+0x2a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   19462:	78a3      	ldrb	r3, [r4, #2]
   19464:	2b01      	cmp	r3, #1
   19466:	d011      	beq.n	1948c <bt_conn_unref+0x4c>
}
   19468:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(old > 0, "Conn reference counter is 0");
   1946a:	4d0e      	ldr	r5, [pc, #56]	; (194a4 <bt_conn_unref+0x64>)
   1946c:	f240 434e 	movw	r3, #1102	; 0x44e
   19470:	462a      	mov	r2, r5
   19472:	490d      	ldr	r1, [pc, #52]	; (194a8 <bt_conn_unref+0x68>)
   19474:	480d      	ldr	r0, [pc, #52]	; (194ac <bt_conn_unref+0x6c>)
   19476:	f012 fe67 	bl	2c148 <printk>
   1947a:	480d      	ldr	r0, [pc, #52]	; (194b0 <bt_conn_unref+0x70>)
   1947c:	f012 fe64 	bl	2c148 <printk>
   19480:	f240 414e 	movw	r1, #1102	; 0x44e
   19484:	4628      	mov	r0, r5
   19486:	f013 f864 	bl	2c552 <assert_post_action>
   1948a:	e7ea      	b.n	19462 <bt_conn_unref+0x22>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1948c:	f3bf 8f5b 	dmb	ish
   19490:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19494:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   19498:	2b00      	cmp	r3, #0
   1949a:	d1e5      	bne.n	19468 <bt_conn_unref+0x28>
		bt_le_adv_resume();
   1949c:	f014 f8ad 	bl	2d5fa <bt_le_adv_resume>
}
   194a0:	e7e2      	b.n	19468 <bt_conn_unref+0x28>
   194a2:	bf00      	nop
   194a4:	00033d30 	.word	0x00033d30
   194a8:	00033f08 	.word	0x00033f08
   194ac:	00031df4 	.word	0x00031df4
   194b0:	00033f10 	.word	0x00033f10

000194b4 <bt_conn_lookup_handle>:
{
   194b4:	b508      	push	{r3, lr}
   194b6:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   194b8:	2101      	movs	r1, #1
   194ba:	4802      	ldr	r0, [pc, #8]	; (194c4 <bt_conn_lookup_handle+0x10>)
   194bc:	f014 f9ed 	bl	2d89a <conn_lookup_handle>
}
   194c0:	bd08      	pop	{r3, pc}
   194c2:	bf00      	nop
   194c4:	20001df0 	.word	0x20001df0

000194c8 <bt_conn_set_state>:
{
   194c8:	b570      	push	{r4, r5, r6, lr}
   194ca:	460e      	mov	r6, r1
	if (conn->state == state) {
   194cc:	7a85      	ldrb	r5, [r0, #10]
   194ce:	428d      	cmp	r5, r1
   194d0:	d010      	beq.n	194f4 <bt_conn_set_state+0x2c>
   194d2:	4604      	mov	r4, r0
	conn->state = state;
   194d4:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   194d6:	b915      	cbnz	r5, 194de <bt_conn_set_state+0x16>
		if (conn->type != BT_CONN_TYPE_ISO) {
   194d8:	7883      	ldrb	r3, [r0, #2]
   194da:	2b08      	cmp	r3, #8
   194dc:	d137      	bne.n	1954e <bt_conn_set_state+0x86>
	switch (conn->state) {
   194de:	7aa3      	ldrb	r3, [r4, #10]
   194e0:	2b08      	cmp	r3, #8
   194e2:	f200 80b9 	bhi.w	19658 <bt_conn_set_state+0x190>
   194e6:	e8df f003 	tbb	[pc, r3]
   194ea:	b34e      	.short	0xb34e
   194ec:	b6b6b6b6 	.word	0xb6b6b6b6
   194f0:	35b6      	.short	0x35b6
   194f2:	b6          	.byte	0xb6
   194f3:	00          	.byte	0x00
   194f4:	4b61      	ldr	r3, [pc, #388]	; (1967c <bt_conn_set_state+0x1b4>)
   194f6:	4a62      	ldr	r2, [pc, #392]	; (19680 <bt_conn_set_state+0x1b8>)
   194f8:	1a9b      	subs	r3, r3, r2
   194fa:	08db      	lsrs	r3, r3, #3
		BT_WARN("no transition %s", state2str(state));
   194fc:	f04f 0200 	mov.w	r2, #0
   19500:	2102      	movs	r1, #2
   19502:	f361 0202 	bfi	r2, r1, #0, #3
   19506:	f36f 02c5 	bfc	r2, #3, #3
   1950a:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
   1950e:	2e08      	cmp	r6, #8
   19510:	d819      	bhi.n	19546 <bt_conn_set_state+0x7e>
   19512:	e8df f006 	tbb	[pc, r6]
   19516:	1a05      	.short	0x1a05
   19518:	0c0e100a 	.word	0x0c0e100a
   1951c:	1412      	.short	0x1412
   1951e:	16          	.byte	0x16
   1951f:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
   19520:	4958      	ldr	r1, [pc, #352]	; (19684 <bt_conn_set_state+0x1bc>)
   19522:	4859      	ldr	r0, [pc, #356]	; (19688 <bt_conn_set_state+0x1c0>)
   19524:	f7fa f9ec 	bl	13900 <log_1>
		return;
   19528:	e095      	b.n	19656 <bt_conn_set_state+0x18e>
		return "connect-scan";
   1952a:	4958      	ldr	r1, [pc, #352]	; (1968c <bt_conn_set_state+0x1c4>)
   1952c:	e7f9      	b.n	19522 <bt_conn_set_state+0x5a>
		return "connect-dir-adv";
   1952e:	4958      	ldr	r1, [pc, #352]	; (19690 <bt_conn_set_state+0x1c8>)
   19530:	e7f7      	b.n	19522 <bt_conn_set_state+0x5a>
		return "connect-adv";
   19532:	4958      	ldr	r1, [pc, #352]	; (19694 <bt_conn_set_state+0x1cc>)
   19534:	e7f5      	b.n	19522 <bt_conn_set_state+0x5a>
		return "connect-auto";
   19536:	4958      	ldr	r1, [pc, #352]	; (19698 <bt_conn_set_state+0x1d0>)
   19538:	e7f3      	b.n	19522 <bt_conn_set_state+0x5a>
		return "connect";
   1953a:	4958      	ldr	r1, [pc, #352]	; (1969c <bt_conn_set_state+0x1d4>)
   1953c:	e7f1      	b.n	19522 <bt_conn_set_state+0x5a>
		return "connected";
   1953e:	4958      	ldr	r1, [pc, #352]	; (196a0 <bt_conn_set_state+0x1d8>)
   19540:	e7ef      	b.n	19522 <bt_conn_set_state+0x5a>
		return "disconnect";
   19542:	4958      	ldr	r1, [pc, #352]	; (196a4 <bt_conn_set_state+0x1dc>)
   19544:	e7ed      	b.n	19522 <bt_conn_set_state+0x5a>
		return "(unknown)";
   19546:	4958      	ldr	r1, [pc, #352]	; (196a8 <bt_conn_set_state+0x1e0>)
   19548:	e7eb      	b.n	19522 <bt_conn_set_state+0x5a>
		return "disconnect-complete";
   1954a:	4958      	ldr	r1, [pc, #352]	; (196ac <bt_conn_set_state+0x1e4>)
   1954c:	e7e9      	b.n	19522 <bt_conn_set_state+0x5a>
			bt_conn_ref(conn);
   1954e:	f014 f97d 	bl	2d84c <bt_conn_ref>
   19552:	e7c4      	b.n	194de <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19554:	78a3      	ldrb	r3, [r4, #2]
   19556:	2b04      	cmp	r3, #4
   19558:	d07d      	beq.n	19656 <bt_conn_set_state+0x18e>
		k_fifo_init(&conn->tx_queue);
   1955a:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1955e:	f017 f805 	bl	3056c <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   19562:	2100      	movs	r1, #0
   19564:	4852      	ldr	r0, [pc, #328]	; (196b0 <bt_conn_set_state+0x1e8>)
   19566:	f00e fe5d 	bl	28224 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1956a:	2300      	movs	r3, #0
   1956c:	6563      	str	r3, [r4, #84]	; 0x54
	list->tail = NULL;
   1956e:	65a3      	str	r3, [r4, #88]	; 0x58
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   19570:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19572:	2b01      	cmp	r3, #1
   19574:	d16f      	bne.n	19656 <bt_conn_set_state+0x18e>
			k_work_schedule(&conn->deferred_work,
   19576:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1957a:	2300      	movs	r3, #0
   1957c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   19580:	f00b fdbe 	bl	25100 <k_work_schedule>
   19584:	e067      	b.n	19656 <bt_conn_set_state+0x18e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19586:	78a3      	ldrb	r3, [r4, #2]
   19588:	2b04      	cmp	r3, #4
   1958a:	d008      	beq.n	1959e <bt_conn_set_state+0xd6>
		switch (old_state) {
   1958c:	2d08      	cmp	r5, #8
   1958e:	d862      	bhi.n	19656 <bt_conn_set_state+0x18e>
   19590:	e8df f005 	tbb	[pc, r5]
   19594:	4430094c 	.word	0x4430094c
   19598:	4c263a48 	.word	0x4c263a48
   1959c:	4c          	.byte	0x4c
   1959d:	00          	.byte	0x00
			bt_conn_unref(conn);
   1959e:	4620      	mov	r0, r4
   195a0:	f7ff ff4e 	bl	19440 <bt_conn_unref>
			break;
   195a4:	e057      	b.n	19656 <bt_conn_set_state+0x18e>
			tx_notify(conn);
   195a6:	4620      	mov	r0, r4
   195a8:	f014 f879 	bl	2d69e <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   195ac:	78a3      	ldrb	r3, [r4, #2]
   195ae:	2b01      	cmp	r3, #1
   195b0:	d011      	beq.n	195d6 <bt_conn_set_state+0x10e>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   195b2:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   195b4:	f3bf 8f5b 	dmb	ish
   195b8:	e854 3f00 	ldrex	r3, [r4]
   195bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   195c0:	e844 3200 	strex	r2, r3, [r4]
   195c4:	2a00      	cmp	r2, #0
   195c6:	d1f7      	bne.n	195b8 <bt_conn_set_state+0xf0>
   195c8:	f3bf 8f5b 	dmb	ish
   195cc:	2100      	movs	r1, #0
   195ce:	4838      	ldr	r0, [pc, #224]	; (196b0 <bt_conn_set_state+0x1e8>)
   195d0:	f00e fe28 	bl	28224 <z_impl_k_poll_signal_raise>
   195d4:	e03f      	b.n	19656 <bt_conn_set_state+0x18e>
				k_work_cancel_delayable(&conn->deferred_work);
   195d6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   195da:	f00b fe19 	bl	25210 <k_work_cancel_delayable>
   195de:	e7e8      	b.n	195b2 <bt_conn_set_state+0xea>
			if (conn->err) {
   195e0:	7a63      	ldrb	r3, [r4, #9]
   195e2:	b91b      	cbnz	r3, 195ec <bt_conn_set_state+0x124>
			bt_conn_unref(conn);
   195e4:	4620      	mov	r0, r4
   195e6:	f7ff ff2b 	bl	19440 <bt_conn_unref>
			break;
   195ea:	e034      	b.n	19656 <bt_conn_set_state+0x18e>
				notify_connected(conn);
   195ec:	4620      	mov	r0, r4
   195ee:	f7ff fc73 	bl	18ed8 <notify_connected>
   195f2:	e7f7      	b.n	195e4 <bt_conn_set_state+0x11c>
			if (conn->err) {
   195f4:	7a63      	ldrb	r3, [r4, #9]
   195f6:	b91b      	cbnz	r3, 19600 <bt_conn_set_state+0x138>
			bt_conn_unref(conn);
   195f8:	4620      	mov	r0, r4
   195fa:	f7ff ff21 	bl	19440 <bt_conn_unref>
			break;
   195fe:	e02a      	b.n	19656 <bt_conn_set_state+0x18e>
				notify_connected(conn);
   19600:	4620      	mov	r0, r4
   19602:	f7ff fc69 	bl	18ed8 <notify_connected>
   19606:	e7f7      	b.n	195f8 <bt_conn_set_state+0x130>
			if (conn->err) {
   19608:	7a63      	ldrb	r3, [r4, #9]
   1960a:	b91b      	cbnz	r3, 19614 <bt_conn_set_state+0x14c>
			bt_conn_unref(conn);
   1960c:	4620      	mov	r0, r4
   1960e:	f7ff ff17 	bl	19440 <bt_conn_unref>
			break;
   19612:	e020      	b.n	19656 <bt_conn_set_state+0x18e>
				notify_connected(conn);
   19614:	4620      	mov	r0, r4
   19616:	f7ff fc5f 	bl	18ed8 <notify_connected>
   1961a:	e7f7      	b.n	1960c <bt_conn_set_state+0x144>
			bt_conn_unref(conn);
   1961c:	4620      	mov	r0, r4
   1961e:	f7ff ff0f 	bl	19440 <bt_conn_unref>
			break;
   19622:	e018      	b.n	19656 <bt_conn_set_state+0x18e>
			bt_conn_unref(conn);
   19624:	4620      	mov	r0, r4
   19626:	f7ff ff0b 	bl	19440 <bt_conn_unref>
			break;
   1962a:	e014      	b.n	19656 <bt_conn_set_state+0x18e>
   1962c:	4b13      	ldr	r3, [pc, #76]	; (1967c <bt_conn_set_state+0x1b4>)
   1962e:	4a14      	ldr	r2, [pc, #80]	; (19680 <bt_conn_set_state+0x1b8>)
   19630:	1a9b      	subs	r3, r3, r2
   19632:	08db      	lsrs	r3, r3, #3
			BT_WARN("Invalid (%u) old state", state);
   19634:	f04f 0200 	mov.w	r2, #0
   19638:	2102      	movs	r1, #2
   1963a:	f361 0202 	bfi	r2, r1, #0, #3
   1963e:	f36f 02c5 	bfc	r2, #3, #3
   19642:	f363 128f 	bfi	r2, r3, #6, #10
   19646:	4631      	mov	r1, r6
   19648:	481a      	ldr	r0, [pc, #104]	; (196b4 <bt_conn_set_state+0x1ec>)
   1964a:	f7fa f959 	bl	13900 <log_1>
   1964e:	e002      	b.n	19656 <bt_conn_set_state+0x18e>
		process_unack_tx(conn);
   19650:	4620      	mov	r0, r4
   19652:	f014 f870 	bl	2d736 <process_unack_tx>
}
   19656:	bd70      	pop	{r4, r5, r6, pc}
   19658:	4b08      	ldr	r3, [pc, #32]	; (1967c <bt_conn_set_state+0x1b4>)
   1965a:	4a09      	ldr	r2, [pc, #36]	; (19680 <bt_conn_set_state+0x1b8>)
   1965c:	1a9b      	subs	r3, r3, r2
   1965e:	08db      	lsrs	r3, r3, #3
		BT_WARN("no valid (%u) state was set", state);
   19660:	f04f 0200 	mov.w	r2, #0
   19664:	2102      	movs	r1, #2
   19666:	f361 0202 	bfi	r2, r1, #0, #3
   1966a:	f36f 02c5 	bfc	r2, #3, #3
   1966e:	f363 128f 	bfi	r2, r3, #6, #10
   19672:	4631      	mov	r1, r6
   19674:	4810      	ldr	r0, [pc, #64]	; (196b8 <bt_conn_set_state+0x1f0>)
   19676:	f7fa f943 	bl	13900 <log_1>
   1967a:	e7ec      	b.n	19656 <bt_conn_set_state+0x18e>
   1967c:	00031928 	.word	0x00031928
   19680:	00031908 	.word	0x00031908
   19684:	00033fa0 	.word	0x00033fa0
   19688:	00033fb0 	.word	0x00033fb0
   1968c:	00033f50 	.word	0x00033f50
   19690:	00033f60 	.word	0x00033f60
   19694:	00033f70 	.word	0x00033f70
   19698:	00033f7c 	.word	0x00033f7c
   1969c:	00033f8c 	.word	0x00033f8c
   196a0:	00034368 	.word	0x00034368
   196a4:	00033f94 	.word	0x00033f94
   196a8:	00033f30 	.word	0x00033f30
   196ac:	00033f3c 	.word	0x00033f3c
   196b0:	200005ec 	.word	0x200005ec
   196b4:	00033fc4 	.word	0x00033fc4
   196b8:	00033fdc 	.word	0x00033fdc

000196bc <bt_conn_index>:
{
   196bc:	b538      	push	{r3, r4, r5, lr}
		index = conn - acl_conns;
   196be:	4a0d      	ldr	r2, [pc, #52]	; (196f4 <bt_conn_index+0x38>)
   196c0:	1a84      	subs	r4, r0, r2
   196c2:	10e3      	asrs	r3, r4, #3
   196c4:	4c0c      	ldr	r4, [pc, #48]	; (196f8 <bt_conn_index+0x3c>)
   196c6:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   196ca:	4290      	cmp	r0, r2
   196cc:	d00f      	beq.n	196ee <bt_conn_index+0x32>
   196ce:	4d0b      	ldr	r5, [pc, #44]	; (196fc <bt_conn_index+0x40>)
   196d0:	f240 436c 	movw	r3, #1132	; 0x46c
   196d4:	462a      	mov	r2, r5
   196d6:	490a      	ldr	r1, [pc, #40]	; (19700 <bt_conn_index+0x44>)
   196d8:	480a      	ldr	r0, [pc, #40]	; (19704 <bt_conn_index+0x48>)
   196da:	f012 fd35 	bl	2c148 <printk>
   196de:	480a      	ldr	r0, [pc, #40]	; (19708 <bt_conn_index+0x4c>)
   196e0:	f012 fd32 	bl	2c148 <printk>
   196e4:	f240 416c 	movw	r1, #1132	; 0x46c
   196e8:	4628      	mov	r0, r5
   196ea:	f012 ff32 	bl	2c552 <assert_post_action>
}
   196ee:	b2e0      	uxtb	r0, r4
   196f0:	bd38      	pop	{r3, r4, r5, pc}
   196f2:	bf00      	nop
   196f4:	20001df0 	.word	0x20001df0
   196f8:	c28f5c29 	.word	0xc28f5c29
   196fc:	00033d30 	.word	0x00033d30
   19700:	00033ff8 	.word	0x00033ff8
   19704:	00031df4 	.word	0x00031df4
   19708:	000340c0 	.word	0x000340c0

0001970c <bt_conn_create_pdu_timeout>:
{
   1970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19710:	4604      	mov	r4, r0
   19712:	460f      	mov	r7, r1
   19714:	4616      	mov	r6, r2
   19716:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   19718:	f016 fed7 	bl	304ca <k_is_in_isr>
   1971c:	b970      	cbnz	r0, 1973c <bt_conn_create_pdu_timeout+0x30>
	if (!pool) {
   1971e:	b1e4      	cbz	r4, 1975a <bt_conn_create_pdu_timeout+0x4e>
	return net_buf_alloc_fixed(pool, timeout);
   19720:	4632      	mov	r2, r6
   19722:	462b      	mov	r3, r5
   19724:	4620      	mov	r0, r4
   19726:	f015 fba3 	bl	2ee70 <net_buf_alloc_fixed>
	if (!buf) {
   1972a:	4604      	mov	r4, r0
   1972c:	b1b8      	cbz	r0, 1975e <bt_conn_create_pdu_timeout+0x52>
	net_buf_simple_reserve(&buf->b, reserve);
   1972e:	1d39      	adds	r1, r7, #4
   19730:	3008      	adds	r0, #8
   19732:	f003 f831 	bl	1c798 <net_buf_simple_reserve>
}
   19736:	4620      	mov	r0, r4
   19738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(!k_is_in_isr());
   1973c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 19798 <bt_conn_create_pdu_timeout+0x8c>
   19740:	f44f 6391 	mov.w	r3, #1160	; 0x488
   19744:	4642      	mov	r2, r8
   19746:	490e      	ldr	r1, [pc, #56]	; (19780 <bt_conn_create_pdu_timeout+0x74>)
   19748:	480e      	ldr	r0, [pc, #56]	; (19784 <bt_conn_create_pdu_timeout+0x78>)
   1974a:	f012 fcfd 	bl	2c148 <printk>
   1974e:	f44f 6191 	mov.w	r1, #1160	; 0x488
   19752:	4640      	mov	r0, r8
   19754:	f012 fefd 	bl	2c552 <assert_post_action>
   19758:	e7e1      	b.n	1971e <bt_conn_create_pdu_timeout+0x12>
		pool = &acl_tx_pool;
   1975a:	4c0b      	ldr	r4, [pc, #44]	; (19788 <bt_conn_create_pdu_timeout+0x7c>)
   1975c:	e7e0      	b.n	19720 <bt_conn_create_pdu_timeout+0x14>
   1975e:	4b0b      	ldr	r3, [pc, #44]	; (1978c <bt_conn_create_pdu_timeout+0x80>)
   19760:	4a0b      	ldr	r2, [pc, #44]	; (19790 <bt_conn_create_pdu_timeout+0x84>)
   19762:	1a9b      	subs	r3, r3, r2
   19764:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unable to allocate buffer within timeout");
   19766:	f04f 0100 	mov.w	r1, #0
   1976a:	2202      	movs	r2, #2
   1976c:	f362 0102 	bfi	r1, r2, #0, #3
   19770:	f36f 01c5 	bfc	r1, #3, #3
   19774:	f363 118f 	bfi	r1, r3, #6, #10
   19778:	4806      	ldr	r0, [pc, #24]	; (19794 <bt_conn_create_pdu_timeout+0x88>)
   1977a:	f7fa f891 	bl	138a0 <log_0>
		return NULL;
   1977e:	e7da      	b.n	19736 <bt_conn_create_pdu_timeout+0x2a>
   19780:	000340dc 	.word	0x000340dc
   19784:	00031df4 	.word	0x00031df4
   19788:	20000cd8 	.word	0x20000cd8
   1978c:	00031928 	.word	0x00031928
   19790:	00031908 	.word	0x00031908
   19794:	000340ec 	.word	0x000340ec
   19798:	00033d30 	.word	0x00033d30

0001979c <notify_le_param_updated>:
{
   1979c:	b570      	push	{r4, r5, r6, lr}
   1979e:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   197a0:	f3bf 8f5b 	dmb	ish
   197a4:	6843      	ldr	r3, [r0, #4]
   197a6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   197aa:	f413 7f00 	tst.w	r3, #512	; 0x200
   197ae:	d010      	beq.n	197d2 <notify_le_param_updated+0x36>
   197b0:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   197b2:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   197b6:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   197ba:	428b      	cmp	r3, r1
   197bc:	d309      	bcc.n	197d2 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   197be:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
	    conn->le.interval >= conn->le.interval_min &&
   197c2:	428b      	cmp	r3, r1
   197c4:	d805      	bhi.n	197d2 <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   197c6:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
   197ca:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
   197ce:	4299      	cmp	r1, r3
   197d0:	d002      	beq.n	197d8 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   197d2:	4b22      	ldr	r3, [pc, #136]	; (1985c <notify_le_param_updated+0xc0>)
   197d4:	681d      	ldr	r5, [r3, #0]
   197d6:	e00d      	b.n	197f4 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   197d8:	f3bf 8f5b 	dmb	ish
   197dc:	e852 3f00 	ldrex	r3, [r2]
   197e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   197e4:	e842 3100 	strex	r1, r3, [r2]
   197e8:	2900      	cmp	r1, #0
   197ea:	d1f7      	bne.n	197dc <notify_le_param_updated+0x40>
   197ec:	f3bf 8f5b 	dmb	ish
}
   197f0:	e7ef      	b.n	197d2 <notify_le_param_updated+0x36>
   197f2:	692d      	ldr	r5, [r5, #16]
   197f4:	b15d      	cbz	r5, 1980e <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   197f6:	68ee      	ldr	r6, [r5, #12]
   197f8:	2e00      	cmp	r6, #0
   197fa:	d0fa      	beq.n	197f2 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   197fc:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   19800:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   19804:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   19808:	4620      	mov	r0, r4
   1980a:	47b0      	blx	r6
   1980c:	e7f1      	b.n	197f2 <notify_le_param_updated+0x56>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1980e:	4d14      	ldr	r5, [pc, #80]	; (19860 <notify_le_param_updated+0xc4>)
   19810:	e000      	b.n	19814 <notify_le_param_updated+0x78>
   19812:	3514      	adds	r5, #20
   19814:	4b13      	ldr	r3, [pc, #76]	; (19864 <notify_le_param_updated+0xc8>)
   19816:	429d      	cmp	r5, r3
   19818:	d80e      	bhi.n	19838 <notify_le_param_updated+0x9c>
   1981a:	4b12      	ldr	r3, [pc, #72]	; (19864 <notify_le_param_updated+0xc8>)
   1981c:	429d      	cmp	r5, r3
   1981e:	d21c      	bcs.n	1985a <notify_le_param_updated+0xbe>
		if (cb->le_param_updated) {
   19820:	68ee      	ldr	r6, [r5, #12]
   19822:	2e00      	cmp	r6, #0
   19824:	d0f5      	beq.n	19812 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   19826:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1982a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1982e:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   19832:	4620      	mov	r0, r4
   19834:	47b0      	blx	r6
   19836:	e7ec      	b.n	19812 <notify_le_param_updated+0x76>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19838:	4e0b      	ldr	r6, [pc, #44]	; (19868 <notify_le_param_updated+0xcc>)
   1983a:	f240 535f 	movw	r3, #1375	; 0x55f
   1983e:	4632      	mov	r2, r6
   19840:	490a      	ldr	r1, [pc, #40]	; (1986c <notify_le_param_updated+0xd0>)
   19842:	480b      	ldr	r0, [pc, #44]	; (19870 <notify_le_param_updated+0xd4>)
   19844:	f012 fc80 	bl	2c148 <printk>
   19848:	480a      	ldr	r0, [pc, #40]	; (19874 <notify_le_param_updated+0xd8>)
   1984a:	f012 fc7d 	bl	2c148 <printk>
   1984e:	f240 515f 	movw	r1, #1375	; 0x55f
   19852:	4630      	mov	r0, r6
   19854:	f012 fe7d 	bl	2c552 <assert_post_action>
   19858:	e7df      	b.n	1981a <notify_le_param_updated+0x7e>
}
   1985a:	bd70      	pop	{r4, r5, r6, pc}
   1985c:	20002ddc 	.word	0x20002ddc
   19860:	000318f0 	.word	0x000318f0
   19864:	000318f0 	.word	0x000318f0
   19868:	00033d30 	.word	0x00033d30
   1986c:	00033d60 	.word	0x00033d60
   19870:	00031df4 	.word	0x00031df4
   19874:	00033d7c 	.word	0x00033d7c

00019878 <le_param_req>:
{
   19878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1987c:	4606      	mov	r6, r0
   1987e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19880:	4608      	mov	r0, r1
   19882:	f013 fc59 	bl	2d138 <bt_le_conn_params_valid>
   19886:	4607      	mov	r7, r0
   19888:	2800      	cmp	r0, #0
   1988a:	d038      	beq.n	198fe <le_param_req+0x86>
	for (cb = callback_list; cb; cb = cb->_next) {
   1988c:	4b1f      	ldr	r3, [pc, #124]	; (1990c <le_param_req+0x94>)
   1988e:	681c      	ldr	r4, [r3, #0]
   19890:	e000      	b.n	19894 <le_param_req+0x1c>
   19892:	6924      	ldr	r4, [r4, #16]
   19894:	b16c      	cbz	r4, 198b2 <le_param_req+0x3a>
		if (!cb->le_param_req) {
   19896:	68a3      	ldr	r3, [r4, #8]
   19898:	2b00      	cmp	r3, #0
   1989a:	d0fa      	beq.n	19892 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1989c:	4629      	mov	r1, r5
   1989e:	4630      	mov	r0, r6
   198a0:	4798      	blx	r3
   198a2:	b358      	cbz	r0, 198fc <le_param_req+0x84>
		if (!bt_le_conn_params_valid(param)) {
   198a4:	4628      	mov	r0, r5
   198a6:	f013 fc47 	bl	2d138 <bt_le_conn_params_valid>
   198aa:	2800      	cmp	r0, #0
   198ac:	d1f1      	bne.n	19892 <le_param_req+0x1a>
			return false;
   198ae:	4607      	mov	r7, r0
   198b0:	e025      	b.n	198fe <le_param_req+0x86>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   198b2:	4c17      	ldr	r4, [pc, #92]	; (19910 <le_param_req+0x98>)
   198b4:	e01e      	b.n	198f4 <le_param_req+0x7c>
   198b6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 19924 <le_param_req+0xac>
   198ba:	f240 53a7 	movw	r3, #1447	; 0x5a7
   198be:	4642      	mov	r2, r8
   198c0:	4914      	ldr	r1, [pc, #80]	; (19914 <le_param_req+0x9c>)
   198c2:	4815      	ldr	r0, [pc, #84]	; (19918 <le_param_req+0xa0>)
   198c4:	f012 fc40 	bl	2c148 <printk>
   198c8:	4814      	ldr	r0, [pc, #80]	; (1991c <le_param_req+0xa4>)
   198ca:	f012 fc3d 	bl	2c148 <printk>
   198ce:	f240 51a7 	movw	r1, #1447	; 0x5a7
   198d2:	4640      	mov	r0, r8
   198d4:	f012 fe3d 	bl	2c552 <assert_post_action>
   198d8:	4b11      	ldr	r3, [pc, #68]	; (19920 <le_param_req+0xa8>)
   198da:	429c      	cmp	r4, r3
   198dc:	d20f      	bcs.n	198fe <le_param_req+0x86>
		if (!cb->le_param_req) {
   198de:	68a3      	ldr	r3, [r4, #8]
   198e0:	b13b      	cbz	r3, 198f2 <le_param_req+0x7a>
		if (!cb->le_param_req(conn, param)) {
   198e2:	4629      	mov	r1, r5
   198e4:	4630      	mov	r0, r6
   198e6:	4798      	blx	r3
   198e8:	b160      	cbz	r0, 19904 <le_param_req+0x8c>
		if (!bt_le_conn_params_valid(param)) {
   198ea:	4628      	mov	r0, r5
   198ec:	f013 fc24 	bl	2d138 <bt_le_conn_params_valid>
   198f0:	b150      	cbz	r0, 19908 <le_param_req+0x90>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   198f2:	3414      	adds	r4, #20
   198f4:	4b0a      	ldr	r3, [pc, #40]	; (19920 <le_param_req+0xa8>)
   198f6:	429c      	cmp	r4, r3
   198f8:	d9ee      	bls.n	198d8 <le_param_req+0x60>
   198fa:	e7dc      	b.n	198b6 <le_param_req+0x3e>
			return false;
   198fc:	4607      	mov	r7, r0
}
   198fe:	4638      	mov	r0, r7
   19900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
   19904:	4607      	mov	r7, r0
   19906:	e7fa      	b.n	198fe <le_param_req+0x86>
			return false;
   19908:	4607      	mov	r7, r0
   1990a:	e7f8      	b.n	198fe <le_param_req+0x86>
   1990c:	20002ddc 	.word	0x20002ddc
   19910:	000318f0 	.word	0x000318f0
   19914:	00033d60 	.word	0x00033d60
   19918:	00031df4 	.word	0x00031df4
   1991c:	00033d7c 	.word	0x00033d7c
   19920:	000318f0 	.word	0x000318f0
   19924:	00033d30 	.word	0x00033d30

00019928 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   19928:	4b02      	ldr	r3, [pc, #8]	; (19934 <bt_conn_cb_register+0xc>)
   1992a:	681a      	ldr	r2, [r3, #0]
   1992c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1992e:	6018      	str	r0, [r3, #0]
}
   19930:	4770      	bx	lr
   19932:	bf00      	nop
   19934:	20002ddc 	.word	0x20002ddc

00019938 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   19938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1993a:	4607      	mov	r7, r0
   1993c:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1993e:	2400      	movs	r4, #0
   19940:	2c00      	cmp	r4, #0
   19942:	dd02      	ble.n	1994a <bt_conn_lookup_addr_le+0x12>
		}

		return conn;
	}

	return NULL;
   19944:	2500      	movs	r5, #0
}
   19946:	4628      	mov	r0, r5
   19948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1994a:	4b0c      	ldr	r3, [pc, #48]	; (1997c <bt_conn_lookup_addr_le+0x44>)
   1994c:	20c8      	movs	r0, #200	; 0xc8
   1994e:	fb00 3004 	mla	r0, r0, r4, r3
   19952:	f013 ff7b 	bl	2d84c <bt_conn_ref>
		if (!conn) {
   19956:	4605      	mov	r5, r0
   19958:	b170      	cbz	r0, 19978 <bt_conn_lookup_addr_le+0x40>
		if (conn->type != BT_CONN_TYPE_LE) {
   1995a:	7883      	ldrb	r3, [r0, #2]
   1995c:	2b01      	cmp	r3, #1
   1995e:	d109      	bne.n	19974 <bt_conn_lookup_addr_le+0x3c>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   19960:	4632      	mov	r2, r6
   19962:	4639      	mov	r1, r7
   19964:	f013 ffe9 	bl	2d93a <bt_conn_is_peer_addr_le>
   19968:	2800      	cmp	r0, #0
   1996a:	d1ec      	bne.n	19946 <bt_conn_lookup_addr_le+0xe>
			bt_conn_unref(conn);
   1996c:	4628      	mov	r0, r5
   1996e:	f7ff fd67 	bl	19440 <bt_conn_unref>
			continue;
   19972:	e001      	b.n	19978 <bt_conn_lookup_addr_le+0x40>
			bt_conn_unref(conn);
   19974:	f7ff fd64 	bl	19440 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19978:	3401      	adds	r4, #1
   1997a:	e7e1      	b.n	19940 <bt_conn_lookup_addr_le+0x8>
   1997c:	20001df0 	.word	0x20001df0

00019980 <bt_conn_exists_le>:
{
   19980:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   19982:	f7ff ffd9 	bl	19938 <bt_conn_lookup_addr_le>
	if (conn) {
   19986:	b908      	cbnz	r0, 1998c <bt_conn_exists_le+0xc>
	return false;
   19988:	2000      	movs	r0, #0
}
   1998a:	bd10      	pop	{r4, pc}
   1998c:	4604      	mov	r4, r0
   1998e:	4b19      	ldr	r3, [pc, #100]	; (199f4 <bt_conn_exists_le+0x74>)
   19990:	4a19      	ldr	r2, [pc, #100]	; (199f8 <bt_conn_exists_le+0x78>)
   19992:	1a9b      	subs	r3, r3, r2
   19994:	08db      	lsrs	r3, r3, #3
		BT_WARN("Found valid connection in %s state",
   19996:	f04f 0200 	mov.w	r2, #0
   1999a:	2102      	movs	r1, #2
   1999c:	f361 0202 	bfi	r2, r1, #0, #3
   199a0:	f36f 02c5 	bfc	r2, #3, #3
   199a4:	f363 128f 	bfi	r2, r3, #6, #10
   199a8:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   199aa:	2b08      	cmp	r3, #8
   199ac:	d81d      	bhi.n	199ea <bt_conn_exists_le+0x6a>
   199ae:	e8df f003 	tbb	[pc, r3]
   199b2:	1e05      	.short	0x1e05
   199b4:	1012140e 	.word	0x1012140e
   199b8:	1816      	.short	0x1816
   199ba:	1a          	.byte	0x1a
   199bb:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
   199bc:	490f      	ldr	r1, [pc, #60]	; (199fc <bt_conn_exists_le+0x7c>)
   199be:	4810      	ldr	r0, [pc, #64]	; (19a00 <bt_conn_exists_le+0x80>)
   199c0:	f7f9 ff9e 	bl	13900 <log_1>
		bt_conn_unref(conn);
   199c4:	4620      	mov	r0, r4
   199c6:	f7ff fd3b 	bl	19440 <bt_conn_unref>
		return true;
   199ca:	2001      	movs	r0, #1
   199cc:	e7dd      	b.n	1998a <bt_conn_exists_le+0xa>
		return "connect-scan";
   199ce:	490d      	ldr	r1, [pc, #52]	; (19a04 <bt_conn_exists_le+0x84>)
   199d0:	e7f5      	b.n	199be <bt_conn_exists_le+0x3e>
		return "connect-dir-adv";
   199d2:	490d      	ldr	r1, [pc, #52]	; (19a08 <bt_conn_exists_le+0x88>)
   199d4:	e7f3      	b.n	199be <bt_conn_exists_le+0x3e>
		return "connect-adv";
   199d6:	490d      	ldr	r1, [pc, #52]	; (19a0c <bt_conn_exists_le+0x8c>)
   199d8:	e7f1      	b.n	199be <bt_conn_exists_le+0x3e>
		return "connect-auto";
   199da:	490d      	ldr	r1, [pc, #52]	; (19a10 <bt_conn_exists_le+0x90>)
   199dc:	e7ef      	b.n	199be <bt_conn_exists_le+0x3e>
		return "connect";
   199de:	490d      	ldr	r1, [pc, #52]	; (19a14 <bt_conn_exists_le+0x94>)
   199e0:	e7ed      	b.n	199be <bt_conn_exists_le+0x3e>
		return "connected";
   199e2:	490d      	ldr	r1, [pc, #52]	; (19a18 <bt_conn_exists_le+0x98>)
   199e4:	e7eb      	b.n	199be <bt_conn_exists_le+0x3e>
		return "disconnect";
   199e6:	490d      	ldr	r1, [pc, #52]	; (19a1c <bt_conn_exists_le+0x9c>)
   199e8:	e7e9      	b.n	199be <bt_conn_exists_le+0x3e>
		return "(unknown)";
   199ea:	490d      	ldr	r1, [pc, #52]	; (19a20 <bt_conn_exists_le+0xa0>)
   199ec:	e7e7      	b.n	199be <bt_conn_exists_le+0x3e>
		return "disconnect-complete";
   199ee:	490d      	ldr	r1, [pc, #52]	; (19a24 <bt_conn_exists_le+0xa4>)
   199f0:	e7e5      	b.n	199be <bt_conn_exists_le+0x3e>
   199f2:	bf00      	nop
   199f4:	00031928 	.word	0x00031928
   199f8:	00031908 	.word	0x00031908
   199fc:	00033fa0 	.word	0x00033fa0
   19a00:	00034118 	.word	0x00034118
   19a04:	00033f50 	.word	0x00033f50
   19a08:	00033f60 	.word	0x00033f60
   19a0c:	00033f70 	.word	0x00033f70
   19a10:	00033f7c 	.word	0x00033f7c
   19a14:	00033f8c 	.word	0x00033f8c
   19a18:	00034368 	.word	0x00034368
   19a1c:	00033f94 	.word	0x00033f94
   19a20:	00033f30 	.word	0x00033f30
   19a24:	00033f3c 	.word	0x00033f3c

00019a28 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   19a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a2c:	4680      	mov	r8, r0
   19a2e:	460f      	mov	r7, r1
   19a30:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19a32:	2400      	movs	r4, #0
   19a34:	2c00      	cmp	r4, #0
   19a36:	dd03      	ble.n	19a40 <bt_conn_lookup_state_le+0x18>
		}

		return conn;
	}

	return NULL;
   19a38:	2500      	movs	r5, #0
}
   19a3a:	4628      	mov	r0, r5
   19a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19a40:	4b11      	ldr	r3, [pc, #68]	; (19a88 <bt_conn_lookup_state_le+0x60>)
   19a42:	20c8      	movs	r0, #200	; 0xc8
   19a44:	fb00 3004 	mla	r0, r0, r4, r3
   19a48:	f013 ff00 	bl	2d84c <bt_conn_ref>
		if (!conn) {
   19a4c:	4605      	mov	r5, r0
   19a4e:	b188      	cbz	r0, 19a74 <bt_conn_lookup_state_le+0x4c>
		if (conn->type != BT_CONN_TYPE_LE) {
   19a50:	7883      	ldrb	r3, [r0, #2]
   19a52:	2b01      	cmp	r3, #1
   19a54:	d110      	bne.n	19a78 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   19a56:	b127      	cbz	r7, 19a62 <bt_conn_lookup_state_le+0x3a>
   19a58:	463a      	mov	r2, r7
   19a5a:	4641      	mov	r1, r8
   19a5c:	f013 ff6d 	bl	2d93a <bt_conn_is_peer_addr_le>
   19a60:	b168      	cbz	r0, 19a7e <bt_conn_lookup_state_le+0x56>
		if (!(conn->state == state && conn->id == id)) {
   19a62:	7aab      	ldrb	r3, [r5, #10]
   19a64:	42b3      	cmp	r3, r6
   19a66:	d102      	bne.n	19a6e <bt_conn_lookup_state_le+0x46>
   19a68:	7a2b      	ldrb	r3, [r5, #8]
   19a6a:	4543      	cmp	r3, r8
   19a6c:	d0e5      	beq.n	19a3a <bt_conn_lookup_state_le+0x12>
			bt_conn_unref(conn);
   19a6e:	4628      	mov	r0, r5
   19a70:	f7ff fce6 	bl	19440 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19a74:	3401      	adds	r4, #1
   19a76:	e7dd      	b.n	19a34 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   19a78:	f7ff fce2 	bl	19440 <bt_conn_unref>
			continue;
   19a7c:	e7fa      	b.n	19a74 <bt_conn_lookup_state_le+0x4c>
			bt_conn_unref(conn);
   19a7e:	4628      	mov	r0, r5
   19a80:	f7ff fcde 	bl	19440 <bt_conn_unref>
			continue;
   19a84:	e7f6      	b.n	19a74 <bt_conn_lookup_state_le+0x4c>
   19a86:	bf00      	nop
   19a88:	20001df0 	.word	0x20001df0

00019a8c <send_conn_le_param_update>:
{
   19a8c:	b538      	push	{r3, r4, r5, lr}
   19a8e:	4604      	mov	r4, r0
   19a90:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19a92:	4608      	mov	r0, r1
   19a94:	f013 fb50 	bl	2d138 <bt_le_conn_params_valid>
   19a98:	b360      	cbz	r0, 19af4 <send_conn_le_param_update+0x68>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   19a9a:	4b18      	ldr	r3, [pc, #96]	; (19afc <send_conn_le_param_update+0x70>)
   19a9c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   19aa0:	f013 0f02 	tst.w	r3, #2
   19aa4:	d004      	beq.n	19ab0 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   19aa6:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   19aaa:	f013 0f02 	tst.w	r3, #2
   19aae:	d113      	bne.n	19ad8 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   19ab0:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   19ab2:	b9d3      	cbnz	r3, 19aea <send_conn_le_param_update+0x5e>
		rc = bt_conn_le_conn_update(conn, param);
   19ab4:	4629      	mov	r1, r5
   19ab6:	4620      	mov	r0, r4
   19ab8:	f013 ff66 	bl	2d988 <bt_conn_le_conn_update>
		if (rc == 0) {
   19abc:	b9c8      	cbnz	r0, 19af2 <send_conn_le_param_update+0x66>
			conn->le.interval_min = param->interval_min;
   19abe:	882b      	ldrh	r3, [r5, #0]
   19ac0:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   19ac4:	886b      	ldrh	r3, [r5, #2]
   19ac6:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   19aca:	88ab      	ldrh	r3, [r5, #4]
   19acc:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   19ad0:	88eb      	ldrh	r3, [r5, #6]
   19ad2:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
		return rc;
   19ad6:	e00c      	b.n	19af2 <send_conn_le_param_update+0x66>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19ad8:	f3bf 8f5b 	dmb	ish
   19adc:	6863      	ldr	r3, [r4, #4]
   19ade:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   19ae2:	f413 6f80 	tst.w	r3, #1024	; 0x400
   19ae6:	d1e3      	bne.n	19ab0 <send_conn_le_param_update+0x24>
   19ae8:	e7e4      	b.n	19ab4 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   19aea:	4629      	mov	r1, r5
   19aec:	4620      	mov	r0, r4
   19aee:	f014 f859 	bl	2dba4 <bt_l2cap_update_conn_param>
}
   19af2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19af4:	f06f 0015 	mvn.w	r0, #21
   19af8:	e7fb      	b.n	19af2 <send_conn_le_param_update+0x66>
   19afa:	bf00      	nop
   19afc:	200002b0 	.word	0x200002b0

00019b00 <deferred_work>:
{
   19b00:	b530      	push	{r4, r5, lr}
   19b02:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   19b04:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   19b08:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   19b0c:	b3b3      	cbz	r3, 19b7c <deferred_work+0x7c>
	if (conn->type != BT_CONN_TYPE_LE) {
   19b0e:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   19b12:	2b01      	cmp	r3, #1
   19b14:	d130      	bne.n	19b78 <deferred_work+0x78>
	if (atomic_test_and_clear_bit(conn->flags,
   19b16:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19b1a:	f3bf 8f5b 	dmb	ish
   19b1e:	e855 3f00 	ldrex	r3, [r5]
   19b22:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   19b26:	e845 2100 	strex	r1, r2, [r5]
   19b2a:	2900      	cmp	r1, #0
   19b2c:	d1f7      	bne.n	19b1e <deferred_work+0x1e>
   19b2e:	f3bf 8f5b 	dmb	ish
   19b32:	f413 7f00 	tst.w	r3, #512	; 0x200
   19b36:	d02b      	beq.n	19b90 <deferred_work+0x90>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   19b38:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   19b3c:	f8ad 3000 	strh.w	r3, [sp]
   19b40:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   19b44:	f8ad 3002 	strh.w	r3, [sp, #2]
   19b48:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   19b4c:	f8ad 3004 	strh.w	r3, [sp, #4]
   19b50:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   19b54:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   19b58:	4669      	mov	r1, sp
   19b5a:	4620      	mov	r0, r4
   19b5c:	f7ff ff96 	bl	19a8c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19b60:	f3bf 8f5b 	dmb	ish
   19b64:	e855 3f00 	ldrex	r3, [r5]
   19b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19b6c:	e845 3200 	strex	r2, r3, [r5]
   19b70:	2a00      	cmp	r2, #0
   19b72:	d1f7      	bne.n	19b64 <deferred_work+0x64>
   19b74:	f3bf 8f5b 	dmb	ish
}
   19b78:	b005      	add	sp, #20
   19b7a:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   19b7c:	4620      	mov	r0, r4
   19b7e:	f013 ff83 	bl	2da88 <bt_l2cap_disconnected>
		notify_disconnected(conn);
   19b82:	4620      	mov	r0, r4
   19b84:	f7ff f952 	bl	18e2c <notify_disconnected>
		bt_conn_unref(conn);
   19b88:	4620      	mov	r0, r4
   19b8a:	f7ff fc59 	bl	19440 <bt_conn_unref>
		return;
   19b8e:	e7f3      	b.n	19b78 <deferred_work+0x78>
		param = BT_LE_CONN_PARAM(
   19b90:	4a05      	ldr	r2, [pc, #20]	; (19ba8 <deferred_work+0xa8>)
   19b92:	ab02      	add	r3, sp, #8
   19b94:	e892 0003 	ldmia.w	r2, {r0, r1}
   19b98:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   19b9c:	4619      	mov	r1, r3
   19b9e:	4620      	mov	r0, r4
   19ba0:	f7ff ff74 	bl	19a8c <send_conn_le_param_update>
   19ba4:	e7dc      	b.n	19b60 <deferred_work+0x60>
   19ba6:	bf00      	nop
   19ba8:	00031ad8 	.word	0x00031ad8

00019bac <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   19bac:	b508      	push	{r3, lr}
   19bae:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   19bb0:	4801      	ldr	r0, [pc, #4]	; (19bb8 <bt_conn_create_frag_timeout+0xc>)
   19bb2:	f7ff fdab 	bl	1970c <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   19bb6:	bd08      	pop	{r3, pc}
   19bb8:	20000d40 	.word	0x20000d40

00019bbc <create_frag>:
{
   19bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19bbe:	4606      	mov	r6, r0
   19bc0:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   19bc2:	f04f 32ff 	mov.w	r2, #4294967295
   19bc6:	f04f 33ff 	mov.w	r3, #4294967295
   19bca:	2000      	movs	r0, #0
   19bcc:	f7ff ffee 	bl	19bac <bt_conn_create_frag_timeout>
   19bd0:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19bd2:	7ab3      	ldrb	r3, [r6, #10]
   19bd4:	2b07      	cmp	r3, #7
   19bd6:	d11a      	bne.n	19c0e <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   19bd8:	2300      	movs	r3, #0
   19bda:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   19bdc:	4b10      	ldr	r3, [pc, #64]	; (19c20 <create_frag+0x64>)
   19bde:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   19be2:	f100 0708 	add.w	r7, r0, #8
   19be6:	4638      	mov	r0, r7
   19be8:	f015 f955 	bl	2ee96 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   19bec:	4286      	cmp	r6, r0
   19bee:	d212      	bcs.n	19c16 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   19bf0:	4b0b      	ldr	r3, [pc, #44]	; (19c20 <create_frag+0x64>)
   19bf2:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19bf6:	4632      	mov	r2, r6
   19bf8:	f855 1f08 	ldr.w	r1, [r5, #8]!
   19bfc:	4638      	mov	r0, r7
   19bfe:	f015 f953 	bl	2eea8 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   19c02:	4631      	mov	r1, r6
   19c04:	4628      	mov	r0, r5
   19c06:	f002 fef7 	bl	1c9f8 <net_buf_simple_pull>
}
   19c0a:	4620      	mov	r0, r4
   19c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   19c0e:	f002 fe29 	bl	1c864 <net_buf_unref>
		return NULL;
   19c12:	2400      	movs	r4, #0
   19c14:	e7f9      	b.n	19c0a <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   19c16:	4638      	mov	r0, r7
   19c18:	f015 f93d 	bl	2ee96 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   19c1c:	b286      	uxth	r6, r0
   19c1e:	e7ea      	b.n	19bf6 <create_frag+0x3a>
   19c20:	200002b0 	.word	0x200002b0

00019c24 <send_buf>:
{
   19c24:	b538      	push	{r3, r4, r5, lr}
   19c26:	4605      	mov	r5, r0
   19c28:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   19c2a:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   19c2c:	4a1b      	ldr	r2, [pc, #108]	; (19c9c <send_buf+0x78>)
   19c2e:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   19c32:	429a      	cmp	r2, r3
   19c34:	d21f      	bcs.n	19c76 <send_buf+0x52>
	frag = create_frag(conn, buf);
   19c36:	f7ff ffc1 	bl	19bbc <create_frag>
	if (!frag) {
   19c3a:	4601      	mov	r1, r0
   19c3c:	b350      	cbz	r0, 19c94 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   19c3e:	2301      	movs	r3, #1
   19c40:	2200      	movs	r2, #0
   19c42:	4628      	mov	r0, r5
   19c44:	f7ff f990 	bl	18f68 <send_frag>
   19c48:	4603      	mov	r3, r0
   19c4a:	b1c8      	cbz	r0, 19c80 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   19c4c:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   19c4e:	4a13      	ldr	r2, [pc, #76]	; (19c9c <send_buf+0x78>)
   19c50:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   19c54:	429a      	cmp	r2, r3
   19c56:	d215      	bcs.n	19c84 <send_buf+0x60>
		frag = create_frag(conn, buf);
   19c58:	4621      	mov	r1, r4
   19c5a:	4628      	mov	r0, r5
   19c5c:	f7ff ffae 	bl	19bbc <create_frag>
		if (!frag) {
   19c60:	4601      	mov	r1, r0
   19c62:	b1c8      	cbz	r0, 19c98 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   19c64:	2301      	movs	r3, #1
   19c66:	461a      	mov	r2, r3
   19c68:	4628      	mov	r0, r5
   19c6a:	f7ff f97d 	bl	18f68 <send_frag>
   19c6e:	4603      	mov	r3, r0
   19c70:	2800      	cmp	r0, #0
   19c72:	d1eb      	bne.n	19c4c <send_buf+0x28>
   19c74:	e004      	b.n	19c80 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   19c76:	2300      	movs	r3, #0
   19c78:	2202      	movs	r2, #2
   19c7a:	f7ff f975 	bl	18f68 <send_frag>
   19c7e:	4603      	mov	r3, r0
}
   19c80:	4618      	mov	r0, r3
   19c82:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   19c84:	2300      	movs	r3, #0
   19c86:	2203      	movs	r2, #3
   19c88:	4621      	mov	r1, r4
   19c8a:	4628      	mov	r0, r5
   19c8c:	f7ff f96c 	bl	18f68 <send_frag>
   19c90:	4603      	mov	r3, r0
   19c92:	e7f5      	b.n	19c80 <send_buf+0x5c>
		return false;
   19c94:	2300      	movs	r3, #0
   19c96:	e7f3      	b.n	19c80 <send_buf+0x5c>
			return false;
   19c98:	2300      	movs	r3, #0
   19c9a:	e7f1      	b.n	19c80 <send_buf+0x5c>
   19c9c:	200002b0 	.word	0x200002b0

00019ca0 <bt_conn_process_tx>:
{
   19ca0:	b538      	push	{r3, r4, r5, lr}
   19ca2:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   19ca4:	7a83      	ldrb	r3, [r0, #10]
   19ca6:	b97b      	cbnz	r3, 19cc8 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   19ca8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19caa:	f3bf 8f5b 	dmb	ish
   19cae:	e853 2f00 	ldrex	r2, [r3]
   19cb2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   19cb6:	e843 1000 	strex	r0, r1, [r3]
   19cba:	2800      	cmp	r0, #0
   19cbc:	d1f7      	bne.n	19cae <bt_conn_process_tx+0xe>
   19cbe:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   19cc2:	f012 0f40 	tst.w	r2, #64	; 0x40
   19cc6:	d10d      	bne.n	19ce4 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   19cc8:	2200      	movs	r2, #0
   19cca:	2300      	movs	r3, #0
   19ccc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19cd0:	f002 fd30 	bl	1c734 <net_buf_get>
	BT_ASSERT(buf);
   19cd4:	4605      	mov	r5, r0
   19cd6:	b148      	cbz	r0, 19cec <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   19cd8:	4629      	mov	r1, r5
   19cda:	4620      	mov	r0, r4
   19cdc:	f7ff ffa2 	bl	19c24 <send_buf>
   19ce0:	b190      	cbz	r0, 19d08 <bt_conn_process_tx+0x68>
}
   19ce2:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   19ce4:	4620      	mov	r0, r4
   19ce6:	f7ff fad9 	bl	1929c <conn_cleanup>
		return;
   19cea:	e7fa      	b.n	19ce2 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   19cec:	f240 23e7 	movw	r3, #743	; 0x2e7
   19cf0:	4a07      	ldr	r2, [pc, #28]	; (19d10 <bt_conn_process_tx+0x70>)
   19cf2:	4908      	ldr	r1, [pc, #32]	; (19d14 <bt_conn_process_tx+0x74>)
   19cf4:	4808      	ldr	r0, [pc, #32]	; (19d18 <bt_conn_process_tx+0x78>)
   19cf6:	f012 fa27 	bl	2c148 <printk>
   19cfa:	4040      	eors	r0, r0
   19cfc:	f380 8811 	msr	BASEPRI, r0
   19d00:	f04f 0003 	mov.w	r0, #3
   19d04:	df02      	svc	2
   19d06:	e7e7      	b.n	19cd8 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   19d08:	4628      	mov	r0, r5
   19d0a:	f002 fdab 	bl	1c864 <net_buf_unref>
   19d0e:	e7e8      	b.n	19ce2 <bt_conn_process_tx+0x42>
   19d10:	00033d30 	.word	0x00033d30
   19d14:	00034b64 	.word	0x00034b64
   19d18:	00031df4 	.word	0x00031df4

00019d1c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   19d1c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   19d1e:	2400      	movs	r4, #0
   19d20:	e006      	b.n	19d30 <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   19d22:	490a      	ldr	r1, [pc, #40]	; (19d4c <bt_conn_init+0x30>)
   19d24:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   19d28:	4809      	ldr	r0, [pc, #36]	; (19d50 <bt_conn_init+0x34>)
   19d2a:	f016 fc2c 	bl	30586 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   19d2e:	3401      	adds	r4, #1
   19d30:	2c02      	cmp	r4, #2
   19d32:	ddf6      	ble.n	19d22 <bt_conn_init+0x6>
	}

	bt_att_init();
   19d34:	f014 fc72 	bl	2e61c <bt_att_init>

	err = bt_smp_init();
   19d38:	f015 f84d 	bl	2edd6 <bt_smp_init>
	if (err) {
   19d3c:	4604      	mov	r4, r0
   19d3e:	b108      	cbz	r0, 19d44 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   19d40:	4620      	mov	r0, r4
   19d42:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   19d44:	f013 ff5b 	bl	2dbfe <bt_l2cap_init>
	return 0;
   19d48:	e7fa      	b.n	19d40 <bt_conn_init+0x24>
   19d4a:	bf00      	nop
   19d4c:	20002de0 	.word	0x20002de0
   19d50:	20000cbc 	.word	0x20000cbc

00019d54 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   19d54:	4a05      	ldr	r2, [pc, #20]	; (19d6c <get_ident+0x18>)
   19d56:	7813      	ldrb	r3, [r2, #0]
   19d58:	3301      	adds	r3, #1
   19d5a:	b2db      	uxtb	r3, r3
   19d5c:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   19d5e:	b90b      	cbnz	r3, 19d64 <get_ident+0x10>
		ident++;
   19d60:	3301      	adds	r3, #1
   19d62:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   19d64:	4b01      	ldr	r3, [pc, #4]	; (19d6c <get_ident+0x18>)
   19d66:	7818      	ldrb	r0, [r3, #0]
   19d68:	4770      	bx	lr
   19d6a:	bf00      	nop
   19d6c:	20003ff9 	.word	0x20003ff9

00019d70 <le_conn_param_rsp>:

	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
   19d70:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
   19d72:	898b      	ldrh	r3, [r1, #12]
   19d74:	2b01      	cmp	r3, #1
   19d76:	d900      	bls.n	19d7a <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
   19d78:	bd08      	pop	{r3, pc}
   19d7a:	4b08      	ldr	r3, [pc, #32]	; (19d9c <le_conn_param_rsp+0x2c>)
   19d7c:	4a08      	ldr	r2, [pc, #32]	; (19da0 <le_conn_param_rsp+0x30>)
   19d7e:	1a9b      	subs	r3, r3, r2
   19d80:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn param rsp");
   19d82:	f04f 0100 	mov.w	r1, #0
   19d86:	2201      	movs	r2, #1
   19d88:	f362 0102 	bfi	r1, r2, #0, #3
   19d8c:	f36f 01c5 	bfc	r1, #3, #3
   19d90:	f363 118f 	bfi	r1, r3, #6, #10
   19d94:	4803      	ldr	r0, [pc, #12]	; (19da4 <le_conn_param_rsp+0x34>)
   19d96:	f7f9 fd83 	bl	138a0 <log_0>
		return;
   19d9a:	e7ed      	b.n	19d78 <le_conn_param_rsp+0x8>
   19d9c:	00031948 	.word	0x00031948
   19da0:	00031908 	.word	0x00031908
   19da4:	00034164 	.word	0x00034164

00019da8 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   19da8:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   19daa:	2300      	movs	r3, #0
   19dac:	2b00      	cmp	r3, #0
   19dae:	dd13      	ble.n	19dd8 <l2cap_accept+0x30>
   19db0:	4b12      	ldr	r3, [pc, #72]	; (19dfc <l2cap_accept+0x54>)
   19db2:	4a13      	ldr	r2, [pc, #76]	; (19e00 <l2cap_accept+0x58>)
   19db4:	1a9b      	subs	r3, r3, r2
   19db6:	08db      	lsrs	r3, r3, #3
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   19db8:	f04f 0200 	mov.w	r2, #0
   19dbc:	2101      	movs	r1, #1
   19dbe:	f361 0202 	bfi	r2, r1, #0, #3
   19dc2:	f36f 02c5 	bfc	r2, #3, #3
   19dc6:	f363 128f 	bfi	r2, r3, #6, #10
   19dca:	4601      	mov	r1, r0
   19dcc:	480d      	ldr	r0, [pc, #52]	; (19e04 <l2cap_accept+0x5c>)
   19dce:	f7f9 fd97 	bl	13900 <log_1>

	return -ENOMEM;
   19dd2:	f06f 000b 	mvn.w	r0, #11
}
   19dd6:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   19dd8:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
   19ddc:	0112      	lsls	r2, r2, #4
   19dde:	4c0a      	ldr	r4, [pc, #40]	; (19e08 <l2cap_accept+0x60>)
   19de0:	58a2      	ldr	r2, [r4, r2]
   19de2:	b10a      	cbz	r2, 19de8 <l2cap_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   19de4:	3301      	adds	r3, #1
   19de6:	e7e1      	b.n	19dac <l2cap_accept+0x4>
		l2cap->chan.chan.ops = &ops;
   19de8:	4a07      	ldr	r2, [pc, #28]	; (19e08 <l2cap_accept+0x60>)
   19dea:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   19dee:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   19df2:	4c06      	ldr	r4, [pc, #24]	; (19e0c <l2cap_accept+0x64>)
   19df4:	6044      	str	r4, [r0, #4]
		*chan = &l2cap->chan.chan;
   19df6:	6008      	str	r0, [r1, #0]
		return 0;
   19df8:	2000      	movs	r0, #0
   19dfa:	e7ec      	b.n	19dd6 <l2cap_accept+0x2e>
   19dfc:	00031948 	.word	0x00031948
   19e00:	00031908 	.word	0x00031908
   19e04:	00034180 	.word	0x00034180
   19e08:	20001eb8 	.word	0x20001eb8
   19e0c:	00034340 	.word	0x00034340

00019e10 <l2cap_rtx_timeout>:
{
   19e10:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   19e12:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   19e16:	f850 5c10 	ldr.w	r5, [r0, #-16]
   19e1a:	4b0c      	ldr	r3, [pc, #48]	; (19e4c <l2cap_rtx_timeout+0x3c>)
   19e1c:	4a0c      	ldr	r2, [pc, #48]	; (19e50 <l2cap_rtx_timeout+0x40>)
   19e1e:	1a9b      	subs	r3, r3, r2
   19e20:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
   19e22:	f04f 0200 	mov.w	r2, #0
   19e26:	2101      	movs	r1, #1
   19e28:	f361 0202 	bfi	r2, r1, #0, #3
   19e2c:	f36f 02c5 	bfc	r2, #3, #3
   19e30:	f363 128f 	bfi	r2, r3, #6, #10
   19e34:	4621      	mov	r1, r4
   19e36:	4807      	ldr	r0, [pc, #28]	; (19e54 <l2cap_rtx_timeout+0x44>)
   19e38:	f7f9 fd62 	bl	13900 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   19e3c:	4621      	mov	r1, r4
   19e3e:	4628      	mov	r0, r5
   19e40:	f013 fdd7 	bl	2d9f2 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   19e44:	4620      	mov	r0, r4
   19e46:	f013 fdfc 	bl	2da42 <bt_l2cap_chan_del>
}
   19e4a:	bd38      	pop	{r3, r4, r5, pc}
   19e4c:	00031948 	.word	0x00031948
   19e50:	00031908 	.word	0x00031908
   19e54:	000341a8 	.word	0x000341a8

00019e58 <l2cap_chan_add>:
{
   19e58:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
   19e5a:	b1d9      	cbz	r1, 19e94 <l2cap_chan_add+0x3c>
   19e5c:	4604      	mov	r4, r0
   19e5e:	4615      	mov	r5, r2
   19e60:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   19e62:	4914      	ldr	r1, [pc, #80]	; (19eb4 <l2cap_chan_add+0x5c>)
   19e64:	f106 0010 	add.w	r0, r6, #16
   19e68:	f00b f8a4 	bl	24fb4 <k_work_init_delayable>
	atomic_clear(chan->status);
   19e6c:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19e70:	2200      	movs	r2, #0
   19e72:	f3bf 8f5b 	dmb	ish
   19e76:	e853 1f00 	ldrex	r1, [r3]
   19e7a:	e843 2000 	strex	r0, r2, [r3]
   19e7e:	2800      	cmp	r0, #0
   19e80:	d1f9      	bne.n	19e76 <l2cap_chan_add+0x1e>
   19e82:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   19e86:	462a      	mov	r2, r5
   19e88:	4631      	mov	r1, r6
   19e8a:	4620      	mov	r0, r4
   19e8c:	f013 fdec 	bl	2da68 <bt_l2cap_chan_add>
	return true;
   19e90:	2001      	movs	r0, #1
}
   19e92:	bd70      	pop	{r4, r5, r6, pc}
   19e94:	4b08      	ldr	r3, [pc, #32]	; (19eb8 <l2cap_chan_add+0x60>)
   19e96:	4a09      	ldr	r2, [pc, #36]	; (19ebc <l2cap_chan_add+0x64>)
   19e98:	1a9b      	subs	r3, r3, r2
   19e9a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate L2CAP channel ID");
   19e9c:	2201      	movs	r2, #1
   19e9e:	f362 0102 	bfi	r1, r2, #0, #3
   19ea2:	f36f 01c5 	bfc	r1, #3, #3
   19ea6:	f363 118f 	bfi	r1, r3, #6, #10
   19eaa:	4805      	ldr	r0, [pc, #20]	; (19ec0 <l2cap_chan_add+0x68>)
   19eac:	f7f9 fcf8 	bl	138a0 <log_0>
		return false;
   19eb0:	2000      	movs	r0, #0
   19eb2:	e7ee      	b.n	19e92 <l2cap_chan_add+0x3a>
   19eb4:	00019e11 	.word	0x00019e11
   19eb8:	00031948 	.word	0x00031948
   19ebc:	00031908 	.word	0x00031908
   19ec0:	000341b8 	.word	0x000341b8

00019ec4 <bt_l2cap_connected>:
{
   19ec4:	b570      	push	{r4, r5, r6, lr}
   19ec6:	b082      	sub	sp, #8
   19ec8:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19eca:	4c24      	ldr	r4, [pc, #144]	; (19f5c <bt_l2cap_connected+0x98>)
   19ecc:	e000      	b.n	19ed0 <bt_l2cap_connected+0xc>
   19ece:	340c      	adds	r4, #12
   19ed0:	4b23      	ldr	r3, [pc, #140]	; (19f60 <bt_l2cap_connected+0x9c>)
   19ed2:	429c      	cmp	r4, r3
   19ed4:	d82f      	bhi.n	19f36 <bt_l2cap_connected+0x72>
   19ed6:	4b22      	ldr	r3, [pc, #136]	; (19f60 <bt_l2cap_connected+0x9c>)
   19ed8:	429c      	cmp	r4, r3
   19eda:	d23d      	bcs.n	19f58 <bt_l2cap_connected+0x94>
		if (fchan->accept(conn, &chan) < 0) {
   19edc:	6863      	ldr	r3, [r4, #4]
   19ede:	a901      	add	r1, sp, #4
   19ee0:	4628      	mov	r0, r5
   19ee2:	4798      	blx	r3
   19ee4:	2800      	cmp	r0, #0
   19ee6:	dbf2      	blt.n	19ece <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   19ee8:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   19eea:	8823      	ldrh	r3, [r4, #0]
   19eec:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   19ef0:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   19ef4:	68a2      	ldr	r2, [r4, #8]
   19ef6:	4628      	mov	r0, r5
   19ef8:	f7ff ffae 	bl	19e58 <l2cap_chan_add>
   19efc:	b360      	cbz	r0, 19f58 <bt_l2cap_connected+0x94>
		if (chan->ops->connected) {
   19efe:	9801      	ldr	r0, [sp, #4]
   19f00:	6843      	ldr	r3, [r0, #4]
   19f02:	681b      	ldr	r3, [r3, #0]
   19f04:	b103      	cbz	r3, 19f08 <bt_l2cap_connected+0x44>
			chan->ops->connected(chan);
   19f06:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   19f08:	9b01      	ldr	r3, [sp, #4]
   19f0a:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19f0c:	f3bf 8f5b 	dmb	ish
   19f10:	e853 2f00 	ldrex	r2, [r3]
   19f14:	f042 0201 	orr.w	r2, r2, #1
   19f18:	e843 2100 	strex	r1, r2, [r3]
   19f1c:	2900      	cmp	r1, #0
   19f1e:	d1f7      	bne.n	19f10 <bt_l2cap_connected+0x4c>
   19f20:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   19f24:	9801      	ldr	r0, [sp, #4]
   19f26:	6843      	ldr	r3, [r0, #4]
   19f28:	699b      	ldr	r3, [r3, #24]
   19f2a:	2b00      	cmp	r3, #0
   19f2c:	d0cf      	beq.n	19ece <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   19f2e:	f100 0168 	add.w	r1, r0, #104	; 0x68
   19f32:	4798      	blx	r3
   19f34:	e7cb      	b.n	19ece <bt_l2cap_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19f36:	4e0b      	ldr	r6, [pc, #44]	; (19f64 <bt_l2cap_connected+0xa0>)
   19f38:	f44f 73b3 	mov.w	r3, #358	; 0x166
   19f3c:	4632      	mov	r2, r6
   19f3e:	490a      	ldr	r1, [pc, #40]	; (19f68 <bt_l2cap_connected+0xa4>)
   19f40:	480a      	ldr	r0, [pc, #40]	; (19f6c <bt_l2cap_connected+0xa8>)
   19f42:	f012 f901 	bl	2c148 <printk>
   19f46:	480a      	ldr	r0, [pc, #40]	; (19f70 <bt_l2cap_connected+0xac>)
   19f48:	f012 f8fe 	bl	2c148 <printk>
   19f4c:	f44f 71b3 	mov.w	r1, #358	; 0x166
   19f50:	4630      	mov	r0, r6
   19f52:	f012 fafe 	bl	2c552 <assert_post_action>
   19f56:	e7be      	b.n	19ed6 <bt_l2cap_connected+0x12>
}
   19f58:	b002      	add	sp, #8
   19f5a:	bd70      	pop	{r4, r5, r6, pc}
   19f5c:	000318cc 	.word	0x000318cc
   19f60:	000318f0 	.word	0x000318f0
   19f64:	000341dc 	.word	0x000341dc
   19f68:	00034210 	.word	0x00034210
   19f6c:	00031df4 	.word	0x00031df4
   19f70:	00033d7c 	.word	0x00033d7c

00019f74 <l2cap_create_le_sig_pdu>:
{
   19f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f76:	460c      	mov	r4, r1
   19f78:	4616      	mov	r6, r2
   19f7a:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   19f7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19f80:	2300      	movs	r3, #0
   19f82:	2100      	movs	r1, #0
   19f84:	4608      	mov	r0, r1
   19f86:	f013 fda0 	bl	2daca <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   19f8a:	4607      	mov	r7, r0
   19f8c:	b140      	cbz	r0, 19fa0 <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   19f8e:	2104      	movs	r1, #4
   19f90:	3008      	adds	r0, #8
   19f92:	f002 fd99 	bl	1cac8 <net_buf_simple_add>
	hdr->code = code;
   19f96:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   19f98:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   19f9a:	8045      	strh	r5, [r0, #2]
}
   19f9c:	4638      	mov	r0, r7
   19f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19fa0:	4b08      	ldr	r3, [pc, #32]	; (19fc4 <l2cap_create_le_sig_pdu+0x50>)
   19fa2:	4a09      	ldr	r2, [pc, #36]	; (19fc8 <l2cap_create_le_sig_pdu+0x54>)
   19fa4:	1a9b      	subs	r3, r3, r2
   19fa6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   19fa8:	f04f 0200 	mov.w	r2, #0
   19fac:	2101      	movs	r1, #1
   19fae:	f361 0202 	bfi	r2, r1, #0, #3
   19fb2:	f36f 02c5 	bfc	r2, #3, #3
   19fb6:	f363 128f 	bfi	r2, r3, #6, #10
   19fba:	4621      	mov	r1, r4
   19fbc:	4803      	ldr	r0, [pc, #12]	; (19fcc <l2cap_create_le_sig_pdu+0x58>)
   19fbe:	f7f9 fc9f 	bl	13900 <log_1>
		return NULL;
   19fc2:	e7eb      	b.n	19f9c <l2cap_create_le_sig_pdu+0x28>
   19fc4:	00031948 	.word	0x00031948
   19fc8:	00031908 	.word	0x00031908
   19fcc:	00034238 	.word	0x00034238

00019fd0 <l2cap_recv>:
{
   19fd0:	b570      	push	{r4, r5, r6, lr}
   19fd2:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   19fd4:	898b      	ldrh	r3, [r1, #12]
   19fd6:	2b03      	cmp	r3, #3
   19fd8:	d917      	bls.n	1a00a <l2cap_recv+0x3a>
   19fda:	4606      	mov	r6, r0
   19fdc:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   19fde:	2104      	movs	r1, #4
   19fe0:	f104 0008 	add.w	r0, r4, #8
   19fe4:	f002 fd2a 	bl	1ca3c <net_buf_simple_pull_mem>
   19fe8:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   19fea:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   19fec:	89a1      	ldrh	r1, [r4, #12]
   19fee:	4291      	cmp	r1, r2
   19ff0:	d11e      	bne.n	1a030 <l2cap_recv+0x60>
	if (!hdr->ident) {
   19ff2:	7843      	ldrb	r3, [r0, #1]
   19ff4:	b36b      	cbz	r3, 1a052 <l2cap_recv+0x82>
	switch (hdr->code) {
   19ff6:	7801      	ldrb	r1, [r0, #0]
   19ff8:	2901      	cmp	r1, #1
   19ffa:	d016      	beq.n	1a02a <l2cap_recv+0x5a>
   19ffc:	2913      	cmp	r1, #19
   19ffe:	d139      	bne.n	1a074 <l2cap_recv+0xa4>
		le_conn_param_rsp(l2cap, buf);
   1a000:	4621      	mov	r1, r4
   1a002:	4630      	mov	r0, r6
   1a004:	f7ff feb4 	bl	19d70 <le_conn_param_rsp>
		break;
   1a008:	e00f      	b.n	1a02a <l2cap_recv+0x5a>
   1a00a:	4b26      	ldr	r3, [pc, #152]	; (1a0a4 <l2cap_recv+0xd4>)
   1a00c:	4a26      	ldr	r2, [pc, #152]	; (1a0a8 <l2cap_recv+0xd8>)
   1a00e:	1a9b      	subs	r3, r3, r2
   1a010:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP signaling PDU");
   1a012:	f04f 0100 	mov.w	r1, #0
   1a016:	2201      	movs	r2, #1
   1a018:	f362 0102 	bfi	r1, r2, #0, #3
   1a01c:	f36f 01c5 	bfc	r1, #3, #3
   1a020:	f363 118f 	bfi	r1, r3, #6, #10
   1a024:	4821      	ldr	r0, [pc, #132]	; (1a0ac <l2cap_recv+0xdc>)
   1a026:	f7f9 fc3b 	bl	138a0 <log_0>
}
   1a02a:	2000      	movs	r0, #0
   1a02c:	b002      	add	sp, #8
   1a02e:	bd70      	pop	{r4, r5, r6, pc}
   1a030:	481c      	ldr	r0, [pc, #112]	; (1a0a4 <l2cap_recv+0xd4>)
   1a032:	4b1d      	ldr	r3, [pc, #116]	; (1a0a8 <l2cap_recv+0xd8>)
   1a034:	1ac0      	subs	r0, r0, r3
   1a036:	08c0      	lsrs	r0, r0, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1a038:	f04f 0300 	mov.w	r3, #0
   1a03c:	2401      	movs	r4, #1
   1a03e:	f364 0302 	bfi	r3, r4, #0, #3
   1a042:	f36f 03c5 	bfc	r3, #3, #3
   1a046:	f360 138f 	bfi	r3, r0, #6, #10
   1a04a:	4819      	ldr	r0, [pc, #100]	; (1a0b0 <l2cap_recv+0xe0>)
   1a04c:	f7f9 fc8e 	bl	1396c <log_2>
		return 0;
   1a050:	e7eb      	b.n	1a02a <l2cap_recv+0x5a>
   1a052:	4b14      	ldr	r3, [pc, #80]	; (1a0a4 <l2cap_recv+0xd4>)
   1a054:	4a14      	ldr	r2, [pc, #80]	; (1a0a8 <l2cap_recv+0xd8>)
   1a056:	1a9b      	subs	r3, r3, r2
   1a058:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid ident value in L2CAP PDU");
   1a05a:	f04f 0100 	mov.w	r1, #0
   1a05e:	2201      	movs	r2, #1
   1a060:	f362 0102 	bfi	r1, r2, #0, #3
   1a064:	f36f 01c5 	bfc	r1, #3, #3
   1a068:	f363 118f 	bfi	r1, r3, #6, #10
   1a06c:	4811      	ldr	r0, [pc, #68]	; (1a0b4 <l2cap_recv+0xe4>)
   1a06e:	f7f9 fc17 	bl	138a0 <log_0>
		return 0;
   1a072:	e7da      	b.n	1a02a <l2cap_recv+0x5a>
   1a074:	4b0b      	ldr	r3, [pc, #44]	; (1a0a4 <l2cap_recv+0xd4>)
   1a076:	4a0c      	ldr	r2, [pc, #48]	; (1a0a8 <l2cap_recv+0xd8>)
   1a078:	1a9b      	subs	r3, r3, r2
   1a07a:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1a07c:	f04f 0200 	mov.w	r2, #0
   1a080:	2002      	movs	r0, #2
   1a082:	f360 0202 	bfi	r2, r0, #0, #3
   1a086:	f36f 02c5 	bfc	r2, #3, #3
   1a08a:	f363 128f 	bfi	r2, r3, #6, #10
   1a08e:	480a      	ldr	r0, [pc, #40]	; (1a0b8 <l2cap_recv+0xe8>)
   1a090:	f7f9 fc36 	bl	13900 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   1a094:	7869      	ldrb	r1, [r5, #1]
   1a096:	2200      	movs	r2, #0
   1a098:	9200      	str	r2, [sp, #0]
   1a09a:	4613      	mov	r3, r2
   1a09c:	6830      	ldr	r0, [r6, #0]
   1a09e:	f013 fd2e 	bl	2dafe <l2cap_send_reject>
		break;
   1a0a2:	e7c2      	b.n	1a02a <l2cap_recv+0x5a>
   1a0a4:	00031948 	.word	0x00031948
   1a0a8:	00031908 	.word	0x00031908
   1a0ac:	00034260 	.word	0x00034260
   1a0b0:	00034280 	.word	0x00034280
   1a0b4:	000342a4 	.word	0x000342a4
   1a0b8:	000342c8 	.word	0x000342c8

0001a0bc <bt_l2cap_recv>:
{
   1a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a0be:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a0c0:	898b      	ldrh	r3, [r1, #12]
   1a0c2:	2b03      	cmp	r3, #3
   1a0c4:	d911      	bls.n	1a0ea <bt_l2cap_recv+0x2e>
   1a0c6:	4605      	mov	r5, r0
   1a0c8:	4616      	mov	r6, r2
   1a0ca:	2104      	movs	r1, #4
   1a0cc:	f104 0008 	add.w	r0, r4, #8
   1a0d0:	f002 fcb4 	bl	1ca3c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1a0d4:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1a0d6:	4639      	mov	r1, r7
   1a0d8:	4628      	mov	r0, r5
   1a0da:	f013 fd50 	bl	2db7e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a0de:	b1c0      	cbz	r0, 1a112 <bt_l2cap_recv+0x56>
	l2cap_chan_recv(chan, buf, complete);
   1a0e0:	4632      	mov	r2, r6
   1a0e2:	4621      	mov	r1, r4
   1a0e4:	f013 fc77 	bl	2d9d6 <l2cap_chan_recv>
}
   1a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0ea:	4b14      	ldr	r3, [pc, #80]	; (1a13c <bt_l2cap_recv+0x80>)
   1a0ec:	4a14      	ldr	r2, [pc, #80]	; (1a140 <bt_l2cap_recv+0x84>)
   1a0ee:	1a9b      	subs	r3, r3, r2
   1a0f0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP PDU received");
   1a0f2:	f04f 0100 	mov.w	r1, #0
   1a0f6:	2201      	movs	r2, #1
   1a0f8:	f362 0102 	bfi	r1, r2, #0, #3
   1a0fc:	f36f 01c5 	bfc	r1, #3, #3
   1a100:	f363 118f 	bfi	r1, r3, #6, #10
   1a104:	480f      	ldr	r0, [pc, #60]	; (1a144 <bt_l2cap_recv+0x88>)
   1a106:	f7f9 fbcb 	bl	138a0 <log_0>
		net_buf_unref(buf);
   1a10a:	4620      	mov	r0, r4
   1a10c:	f002 fbaa 	bl	1c864 <net_buf_unref>
		return;
   1a110:	e7ea      	b.n	1a0e8 <bt_l2cap_recv+0x2c>
   1a112:	4b0a      	ldr	r3, [pc, #40]	; (1a13c <bt_l2cap_recv+0x80>)
   1a114:	4a0a      	ldr	r2, [pc, #40]	; (1a140 <bt_l2cap_recv+0x84>)
   1a116:	1a9b      	subs	r3, r3, r2
   1a118:	08db      	lsrs	r3, r3, #3
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a11a:	f04f 0200 	mov.w	r2, #0
   1a11e:	2102      	movs	r1, #2
   1a120:	f361 0202 	bfi	r2, r1, #0, #3
   1a124:	f36f 02c5 	bfc	r2, #3, #3
   1a128:	f363 128f 	bfi	r2, r3, #6, #10
   1a12c:	4639      	mov	r1, r7
   1a12e:	4806      	ldr	r0, [pc, #24]	; (1a148 <bt_l2cap_recv+0x8c>)
   1a130:	f7f9 fbe6 	bl	13900 <log_1>
		net_buf_unref(buf);
   1a134:	4620      	mov	r0, r4
   1a136:	f002 fb95 	bl	1c864 <net_buf_unref>
		return;
   1a13a:	e7d5      	b.n	1a0e8 <bt_l2cap_recv+0x2c>
   1a13c:	00031948 	.word	0x00031948
   1a140:	00031908 	.word	0x00031908
   1a144:	000342e8 	.word	0x000342e8
   1a148:	00034308 	.word	0x00034308

0001a14c <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   1a14c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1a14e:	4b03      	ldr	r3, [pc, #12]	; (1a15c <att_cfm_sent+0x10>)
   1a150:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1a154:	f013 fd54 	bl	2dc00 <att_sent>
}
   1a158:	bd08      	pop	{r3, pc}
   1a15a:	bf00      	nop
   1a15c:	0002def3 	.word	0x0002def3

0001a160 <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   1a160:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1a162:	4b03      	ldr	r3, [pc, #12]	; (1a170 <att_rsp_sent+0x10>)
   1a164:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1a168:	f013 fd4a 	bl	2dc00 <att_sent>
}
   1a16c:	bd08      	pop	{r3, pc}
   1a16e:	bf00      	nop
   1a170:	0002df0f 	.word	0x0002df0f

0001a174 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   1a174:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1a176:	4b03      	ldr	r3, [pc, #12]	; (1a184 <att_req_sent+0x10>)
   1a178:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1a17c:	f013 fd40 	bl	2dc00 <att_sent>
}
   1a180:	bd08      	pop	{r3, pc}
   1a182:	bf00      	nop
   1a184:	0002dedb 	.word	0x0002dedb

0001a188 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   1a188:	4b08      	ldr	r3, [pc, #32]	; (1a1ac <att_cb+0x24>)
   1a18a:	4298      	cmp	r0, r3
   1a18c:	d009      	beq.n	1a1a2 <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   1a18e:	4b08      	ldr	r3, [pc, #32]	; (1a1b0 <att_cb+0x28>)
   1a190:	4298      	cmp	r0, r3
   1a192:	d008      	beq.n	1a1a6 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   1a194:	4b07      	ldr	r3, [pc, #28]	; (1a1b4 <att_cb+0x2c>)
   1a196:	4298      	cmp	r0, r3
   1a198:	d001      	beq.n	1a19e <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   1a19a:	4807      	ldr	r0, [pc, #28]	; (1a1b8 <att_cb+0x30>)
	}
}
   1a19c:	4770      	bx	lr
		return att_req_sent;
   1a19e:	4807      	ldr	r0, [pc, #28]	; (1a1bc <att_cb+0x34>)
   1a1a0:	4770      	bx	lr
		return att_rsp_sent;
   1a1a2:	4807      	ldr	r0, [pc, #28]	; (1a1c0 <att_cb+0x38>)
   1a1a4:	4770      	bx	lr
		return att_cfm_sent;
   1a1a6:	4807      	ldr	r0, [pc, #28]	; (1a1c4 <att_cb+0x3c>)
   1a1a8:	4770      	bx	lr
   1a1aa:	bf00      	nop
   1a1ac:	0002df0f 	.word	0x0002df0f
   1a1b0:	0002def3 	.word	0x0002def3
   1a1b4:	0002dedb 	.word	0x0002dedb
   1a1b8:	0002dc01 	.word	0x0002dc01
   1a1bc:	0001a175 	.word	0x0001a175
   1a1c0:	0001a161 	.word	0x0001a161
   1a1c4:	0001a14d 	.word	0x0001a14d

0001a1c8 <chan_cb>:
{
   1a1c8:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   1a1ca:	6883      	ldr	r3, [r0, #8]
   1a1cc:	7818      	ldrb	r0, [r3, #0]
   1a1ce:	f013 fd60 	bl	2dc92 <att_op_get_type>
   1a1d2:	3801      	subs	r0, #1
   1a1d4:	2804      	cmp	r0, #4
   1a1d6:	d808      	bhi.n	1a1ea <chan_cb+0x22>
   1a1d8:	e8df f000 	tbb	[pc, r0]
   1a1dc:	09070305 	.word	0x09070305
   1a1e0:	05          	.byte	0x05
   1a1e1:	00          	.byte	0x00
   1a1e2:	4804      	ldr	r0, [pc, #16]	; (1a1f4 <chan_cb+0x2c>)
   1a1e4:	e000      	b.n	1a1e8 <chan_cb+0x20>
		return chan_req_sent;
   1a1e6:	4804      	ldr	r0, [pc, #16]	; (1a1f8 <chan_cb+0x30>)
}
   1a1e8:	bd08      	pop	{r3, pc}
		return NULL;
   1a1ea:	2000      	movs	r0, #0
   1a1ec:	e7fc      	b.n	1a1e8 <chan_cb+0x20>
		return chan_cfm_sent;
   1a1ee:	4803      	ldr	r0, [pc, #12]	; (1a1fc <chan_cb+0x34>)
   1a1f0:	e7fa      	b.n	1a1e8 <chan_cb+0x20>
   1a1f2:	bf00      	nop
   1a1f4:	0002df0f 	.word	0x0002df0f
   1a1f8:	0002dedb 	.word	0x0002dedb
   1a1fc:	0002def3 	.word	0x0002def3

0001a200 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1a200:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1a202:	7a83      	ldrb	r3, [r0, #10]
   1a204:	2b07      	cmp	r3, #7
   1a206:	d111      	bne.n	1a22c <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1a208:	2104      	movs	r1, #4
   1a20a:	f013 fcb8 	bl	2db7e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a20e:	4604      	mov	r4, r0
   1a210:	b1f0      	cbz	r0, 1a250 <att_get+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a212:	f3bf 8f5b 	dmb	ish
   1a216:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1a21a:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1a21e:	f013 0f04 	tst.w	r3, #4
   1a222:	d126      	bne.n	1a272 <att_get+0x72>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   1a224:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   1a228:	4620      	mov	r0, r4
   1a22a:	bd10      	pop	{r4, pc}
   1a22c:	4b1a      	ldr	r3, [pc, #104]	; (1a298 <att_get+0x98>)
   1a22e:	4a1b      	ldr	r2, [pc, #108]	; (1a29c <att_get+0x9c>)
   1a230:	1a9b      	subs	r3, r3, r2
   1a232:	08db      	lsrs	r3, r3, #3
		BT_WARN("Not connected");
   1a234:	f04f 0100 	mov.w	r1, #0
   1a238:	2202      	movs	r2, #2
   1a23a:	f362 0102 	bfi	r1, r2, #0, #3
   1a23e:	f36f 01c5 	bfc	r1, #3, #3
   1a242:	f363 118f 	bfi	r1, r3, #6, #10
   1a246:	4816      	ldr	r0, [pc, #88]	; (1a2a0 <att_get+0xa0>)
   1a248:	f7f9 fb2a 	bl	138a0 <log_0>
		return NULL;
   1a24c:	2400      	movs	r4, #0
   1a24e:	e7eb      	b.n	1a228 <att_get+0x28>
   1a250:	4b11      	ldr	r3, [pc, #68]	; (1a298 <att_get+0x98>)
   1a252:	4a12      	ldr	r2, [pc, #72]	; (1a29c <att_get+0x9c>)
   1a254:	1a9b      	subs	r3, r3, r2
   1a256:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find ATT channel");
   1a258:	f04f 0100 	mov.w	r1, #0
   1a25c:	2201      	movs	r2, #1
   1a25e:	f362 0102 	bfi	r1, r2, #0, #3
   1a262:	f36f 01c5 	bfc	r1, #3, #3
   1a266:	f363 118f 	bfi	r1, r3, #6, #10
   1a26a:	480e      	ldr	r0, [pc, #56]	; (1a2a4 <att_get+0xa4>)
   1a26c:	f7f9 fb18 	bl	138a0 <log_0>
		return NULL;
   1a270:	e7da      	b.n	1a228 <att_get+0x28>
   1a272:	4b09      	ldr	r3, [pc, #36]	; (1a298 <att_get+0x98>)
   1a274:	4a09      	ldr	r2, [pc, #36]	; (1a29c <att_get+0x9c>)
   1a276:	1a9b      	subs	r3, r3, r2
   1a278:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT channel flagged as disconnected");
   1a27a:	f04f 0100 	mov.w	r1, #0
   1a27e:	2202      	movs	r2, #2
   1a280:	f362 0102 	bfi	r1, r2, #0, #3
   1a284:	f36f 01c5 	bfc	r1, #3, #3
   1a288:	f363 118f 	bfi	r1, r3, #6, #10
   1a28c:	4806      	ldr	r0, [pc, #24]	; (1a2a8 <att_get+0xa8>)
   1a28e:	f7f9 fb07 	bl	138a0 <log_0>
		return NULL;
   1a292:	2400      	movs	r4, #0
   1a294:	e7c8      	b.n	1a228 <att_get+0x28>
   1a296:	bf00      	nop
   1a298:	00031918 	.word	0x00031918
   1a29c:	00031908 	.word	0x00031908
   1a2a0:	00034364 	.word	0x00034364
   1a2a4:	00034374 	.word	0x00034374
   1a2a8:	00034390 	.word	0x00034390

0001a2ac <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   1a2ac:	b570      	push	{r4, r5, r6, lr}
   1a2ae:	b082      	sub	sp, #8
   1a2b0:	4605      	mov	r5, r0
   1a2b2:	460e      	mov	r6, r1
	return list->head;
   1a2b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a2b6:	b10b      	cbz	r3, 1a2bc <att_chan_new+0x10>
   1a2b8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   1a2bc:	9301      	str	r3, [sp, #4]
	int quota = 0;
   1a2be:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a2c0:	e014      	b.n	1a2ec <att_chan_new+0x40>
		if (chan->att == att) {
			quota++;
   1a2c2:	3101      	adds	r1, #1
   1a2c4:	e017      	b.n	1a2f6 <att_chan_new+0x4a>
   1a2c6:	4b2e      	ldr	r3, [pc, #184]	; (1a380 <att_chan_new+0xd4>)
   1a2c8:	4a2e      	ldr	r2, [pc, #184]	; (1a384 <att_chan_new+0xd8>)
   1a2ca:	1a9b      	subs	r3, r3, r2
   1a2cc:	08db      	lsrs	r3, r3, #3
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   1a2ce:	f04f 0200 	mov.w	r2, #0
   1a2d2:	2001      	movs	r0, #1
   1a2d4:	f360 0202 	bfi	r2, r0, #0, #3
   1a2d8:	f36f 02c5 	bfc	r2, #3, #3
   1a2dc:	f363 128f 	bfi	r2, r3, #6, #10
   1a2e0:	4829      	ldr	r0, [pc, #164]	; (1a388 <att_chan_new+0xdc>)
   1a2e2:	f7f9 fb0d 	bl	13900 <log_1>
			return NULL;
   1a2e6:	2400      	movs	r4, #0
   1a2e8:	e034      	b.n	1a354 <att_chan_new+0xa8>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a2ea:	9301      	str	r3, [sp, #4]
   1a2ec:	9c01      	ldr	r4, [sp, #4]
   1a2ee:	b174      	cbz	r4, 1a30e <att_chan_new+0x62>
		if (chan->att == att) {
   1a2f0:	6823      	ldr	r3, [r4, #0]
   1a2f2:	42ab      	cmp	r3, r5
   1a2f4:	d0e5      	beq.n	1a2c2 <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   1a2f6:	2901      	cmp	r1, #1
   1a2f8:	d0e5      	beq.n	1a2c6 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a2fa:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1a2fe:	d0f4      	beq.n	1a2ea <att_chan_new+0x3e>
	return node->next;
   1a300:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a304:	2b00      	cmp	r3, #0
   1a306:	d0f0      	beq.n	1a2ea <att_chan_new+0x3e>
   1a308:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   1a30c:	e7ed      	b.n	1a2ea <att_chan_new+0x3e>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a30e:	2200      	movs	r2, #0
   1a310:	2300      	movs	r3, #0
   1a312:	a901      	add	r1, sp, #4
   1a314:	481d      	ldr	r0, [pc, #116]	; (1a38c <att_chan_new+0xe0>)
   1a316:	f009 fb15 	bl	23944 <k_mem_slab_alloc>
   1a31a:	b9f0      	cbnz	r0, 1a35a <att_chan_new+0xae>
   1a31c:	f44f 72ac 	mov.w	r2, #344	; 0x158
   1a320:	2100      	movs	r1, #0
   1a322:	9801      	ldr	r0, [sp, #4]
   1a324:	f016 faec 	bl	30900 <memset>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
	chan->chan.chan.ops = &ops;
   1a328:	9801      	ldr	r0, [sp, #4]
   1a32a:	4b19      	ldr	r3, [pc, #100]	; (1a390 <att_chan_new+0xe4>)
   1a32c:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   1a32e:	f500 7080 	add.w	r0, r0, #256	; 0x100
	z_impl_k_queue_init(queue);
   1a332:	f016 f91b 	bl	3056c <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1a336:	9b01      	ldr	r3, [sp, #4]
   1a338:	33f8      	adds	r3, #248	; 0xf8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a33a:	f3bf 8f5b 	dmb	ish
   1a33e:	e853 2f00 	ldrex	r2, [r3]
   1a342:	e843 6100 	strex	r1, r6, [r3]
   1a346:	2900      	cmp	r1, #0
   1a348:	d1f9      	bne.n	1a33e <att_chan_new+0x92>
   1a34a:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1a34e:	9b01      	ldr	r3, [sp, #4]
   1a350:	601d      	str	r5, [r3, #0]

	return chan;
   1a352:	9c01      	ldr	r4, [sp, #4]
}
   1a354:	4620      	mov	r0, r4
   1a356:	b002      	add	sp, #8
   1a358:	bd70      	pop	{r4, r5, r6, pc}
   1a35a:	4b09      	ldr	r3, [pc, #36]	; (1a380 <att_chan_new+0xd4>)
   1a35c:	4a09      	ldr	r2, [pc, #36]	; (1a384 <att_chan_new+0xd8>)
   1a35e:	1a9b      	subs	r3, r3, r2
   1a360:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1a362:	f04f 0200 	mov.w	r2, #0
   1a366:	2101      	movs	r1, #1
   1a368:	f361 0202 	bfi	r2, r1, #0, #3
   1a36c:	f36f 02c5 	bfc	r2, #3, #3
   1a370:	f363 128f 	bfi	r2, r3, #6, #10
   1a374:	6829      	ldr	r1, [r5, #0]
   1a376:	4807      	ldr	r0, [pc, #28]	; (1a394 <att_chan_new+0xe8>)
   1a378:	f7f9 fac2 	bl	13900 <log_1>
		return NULL;
   1a37c:	e7ea      	b.n	1a354 <att_chan_new+0xa8>
   1a37e:	bf00      	nop
   1a380:	00031918 	.word	0x00031918
   1a384:	00031908 	.word	0x00031908
   1a388:	000343b4 	.word	0x000343b4
   1a38c:	20000b54 	.word	0x20000b54
   1a390:	200005fc 	.word	0x200005fc
   1a394:	000343dc 	.word	0x000343dc

0001a398 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1a398:	b570      	push	{r4, r5, r6, lr}
   1a39a:	b082      	sub	sp, #8
   1a39c:	4606      	mov	r6, r0
   1a39e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1a3a0:	2200      	movs	r2, #0
   1a3a2:	2300      	movs	r3, #0
   1a3a4:	a901      	add	r1, sp, #4
   1a3a6:	4819      	ldr	r0, [pc, #100]	; (1a40c <bt_att_accept+0x74>)
   1a3a8:	f009 facc 	bl	23944 <k_mem_slab_alloc>
   1a3ac:	b9b0      	cbnz	r0, 1a3dc <bt_att_accept+0x44>
   1a3ae:	4605      	mov	r5, r0
   1a3b0:	2230      	movs	r2, #48	; 0x30
   1a3b2:	2100      	movs	r1, #0
   1a3b4:	9801      	ldr	r0, [sp, #4]
   1a3b6:	f016 faa3 	bl	30900 <memset>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
	att->conn = conn;
   1a3ba:	9b01      	ldr	r3, [sp, #4]
   1a3bc:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   1a3be:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   1a3c0:	2100      	movs	r1, #0
   1a3c2:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   1a3c4:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1a3c6:	6281      	str	r1, [r0, #40]	; 0x28
	list->tail = NULL;
   1a3c8:	62c1      	str	r1, [r0, #44]	; 0x2c
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   1a3ca:	f7ff ff6f 	bl	1a2ac <att_chan_new>
	if (!chan) {
   1a3ce:	4603      	mov	r3, r0
   1a3d0:	b1c0      	cbz	r0, 1a404 <bt_att_accept+0x6c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1a3d2:	3308      	adds	r3, #8
   1a3d4:	6023      	str	r3, [r4, #0]

	return 0;
}
   1a3d6:	4628      	mov	r0, r5
   1a3d8:	b002      	add	sp, #8
   1a3da:	bd70      	pop	{r4, r5, r6, pc}
   1a3dc:	4b0c      	ldr	r3, [pc, #48]	; (1a410 <bt_att_accept+0x78>)
   1a3de:	4a0d      	ldr	r2, [pc, #52]	; (1a414 <bt_att_accept+0x7c>)
   1a3e0:	1a9b      	subs	r3, r3, r2
   1a3e2:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT context for conn %p", conn);
   1a3e4:	f04f 0200 	mov.w	r2, #0
   1a3e8:	2101      	movs	r1, #1
   1a3ea:	f361 0202 	bfi	r2, r1, #0, #3
   1a3ee:	f36f 02c5 	bfc	r2, #3, #3
   1a3f2:	f363 128f 	bfi	r2, r3, #6, #10
   1a3f6:	4631      	mov	r1, r6
   1a3f8:	4807      	ldr	r0, [pc, #28]	; (1a418 <bt_att_accept+0x80>)
   1a3fa:	f7f9 fa81 	bl	13900 <log_1>
		return -ENOMEM;
   1a3fe:	f06f 050b 	mvn.w	r5, #11
   1a402:	e7e8      	b.n	1a3d6 <bt_att_accept+0x3e>
		return -ENOMEM;
   1a404:	f06f 050b 	mvn.w	r5, #11
   1a408:	e7e5      	b.n	1a3d6 <bt_att_accept+0x3e>
   1a40a:	bf00      	nop
   1a40c:	20000b34 	.word	0x20000b34
   1a410:	00031918 	.word	0x00031918
   1a414:	00031908 	.word	0x00031908
   1a418:	00034404 	.word	0x00034404

0001a41c <bt_att_released>:
{
   1a41c:	b500      	push	{lr}
   1a41e:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1a420:	3808      	subs	r0, #8
   1a422:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1a424:	a901      	add	r1, sp, #4
   1a426:	4803      	ldr	r0, [pc, #12]	; (1a434 <bt_att_released+0x18>)
   1a428:	f009 fb00 	bl	23a2c <k_mem_slab_free>
}
   1a42c:	b003      	add	sp, #12
   1a42e:	f85d fb04 	ldr.w	pc, [sp], #4
   1a432:	bf00      	nop
   1a434:	20000b54 	.word	0x20000b54

0001a438 <chan_send>:
{
   1a438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a43c:	b083      	sub	sp, #12
   1a43e:	4604      	mov	r4, r0
   1a440:	460d      	mov	r5, r1
   1a442:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   1a444:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1a446:	781b      	ldrb	r3, [r3, #0]
   1a448:	2bd2      	cmp	r3, #210	; 0xd2
   1a44a:	d021      	beq.n	1a490 <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   1a44c:	f105 0008 	add.w	r0, r5, #8
   1a450:	f014 fd1d 	bl	2ee8e <net_buf_simple_headroom>
   1a454:	b287      	uxth	r7, r0
	state->len = buf->len;
   1a456:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   1a45a:	b3a6      	cbz	r6, 1a4c6 <chan_send+0x8e>
   1a45c:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1a460:	f854 8b08 	ldr.w	r8, [r4], #8
   1a464:	4630      	mov	r0, r6
   1a466:	f7ff fe8f 	bl	1a188 <att_cb>
   1a46a:	4603      	mov	r3, r0
   1a46c:	f8d8 0000 	ldr.w	r0, [r8]
   1a470:	9400      	str	r4, [sp, #0]
   1a472:	462a      	mov	r2, r5
   1a474:	2104      	movs	r1, #4
   1a476:	f013 fb2d 	bl	2dad4 <bt_l2cap_send_cb>
	if (err) {
   1a47a:	4680      	mov	r8, r0
   1a47c:	b120      	cbz	r0, 1a488 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1a47e:	6928      	ldr	r0, [r5, #16]
   1a480:	4438      	add	r0, r7
   1a482:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   1a484:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   1a488:	4640      	mov	r0, r8
   1a48a:	b003      	add	sp, #12
   1a48c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1a490:	6803      	ldr	r3, [r0, #0]
   1a492:	6818      	ldr	r0, [r3, #0]
   1a494:	f014 fc9c 	bl	2edd0 <bt_smp_sign>
		if (err) {
   1a498:	4680      	mov	r8, r0
   1a49a:	2800      	cmp	r0, #0
   1a49c:	d0d6      	beq.n	1a44c <chan_send+0x14>
   1a49e:	4b0c      	ldr	r3, [pc, #48]	; (1a4d0 <chan_send+0x98>)
   1a4a0:	4a0c      	ldr	r2, [pc, #48]	; (1a4d4 <chan_send+0x9c>)
   1a4a2:	1a9b      	subs	r3, r3, r2
   1a4a4:	08db      	lsrs	r3, r3, #3
			BT_ERR("Error signing data");
   1a4a6:	f04f 0100 	mov.w	r1, #0
   1a4aa:	2201      	movs	r2, #1
   1a4ac:	f362 0102 	bfi	r1, r2, #0, #3
   1a4b0:	f36f 01c5 	bfc	r1, #3, #3
   1a4b4:	f363 118f 	bfi	r1, r3, #6, #10
   1a4b8:	4807      	ldr	r0, [pc, #28]	; (1a4d8 <chan_send+0xa0>)
   1a4ba:	f7f9 f9f1 	bl	138a0 <log_0>
			net_buf_unref(buf);
   1a4be:	4628      	mov	r0, r5
   1a4c0:	f002 f9d0 	bl	1c864 <net_buf_unref>
			return err;
   1a4c4:	e7e0      	b.n	1a488 <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   1a4c6:	4628      	mov	r0, r5
   1a4c8:	f7ff fe7e 	bl	1a1c8 <chan_cb>
   1a4cc:	4606      	mov	r6, r0
   1a4ce:	e7c5      	b.n	1a45c <chan_send+0x24>
   1a4d0:	00031918 	.word	0x00031918
   1a4d4:	00031908 	.word	0x00031908
   1a4d8:	0003442c 	.word	0x0003442c

0001a4dc <bt_att_chan_req_send>:
{
   1a4dc:	b570      	push	{r4, r5, r6, lr}
   1a4de:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(chan);
   1a4e0:	4605      	mov	r5, r0
   1a4e2:	b1b8      	cbz	r0, 1a514 <bt_att_chan_req_send+0x38>
	__ASSERT_NO_MSG(req);
   1a4e4:	b324      	cbz	r4, 1a530 <bt_att_chan_req_send+0x54>
	__ASSERT_NO_MSG(req->func);
   1a4e6:	6863      	ldr	r3, [r4, #4]
   1a4e8:	b383      	cbz	r3, 1a54c <bt_att_chan_req_send+0x70>
	__ASSERT_NO_MSG(!chan->req);
   1a4ea:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
   1a4ee:	b163      	cbz	r3, 1a50a <bt_att_chan_req_send+0x2e>
   1a4f0:	4e1d      	ldr	r6, [pc, #116]	; (1a568 <bt_att_chan_req_send+0x8c>)
   1a4f2:	f240 2336 	movw	r3, #566	; 0x236
   1a4f6:	4632      	mov	r2, r6
   1a4f8:	491c      	ldr	r1, [pc, #112]	; (1a56c <bt_att_chan_req_send+0x90>)
   1a4fa:	481d      	ldr	r0, [pc, #116]	; (1a570 <bt_att_chan_req_send+0x94>)
   1a4fc:	f011 fe24 	bl	2c148 <printk>
   1a500:	f240 2136 	movw	r1, #566	; 0x236
   1a504:	4630      	mov	r0, r6
   1a506:	f012 f824 	bl	2c552 <assert_post_action>
	return chan_req_send(chan, req);
   1a50a:	4621      	mov	r1, r4
   1a50c:	4628      	mov	r0, r5
   1a50e:	f013 fc55 	bl	2ddbc <chan_req_send>
}
   1a512:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(chan);
   1a514:	4e14      	ldr	r6, [pc, #80]	; (1a568 <bt_att_chan_req_send+0x8c>)
   1a516:	f240 2333 	movw	r3, #563	; 0x233
   1a51a:	4632      	mov	r2, r6
   1a51c:	4915      	ldr	r1, [pc, #84]	; (1a574 <bt_att_chan_req_send+0x98>)
   1a51e:	4814      	ldr	r0, [pc, #80]	; (1a570 <bt_att_chan_req_send+0x94>)
   1a520:	f011 fe12 	bl	2c148 <printk>
   1a524:	f240 2133 	movw	r1, #563	; 0x233
   1a528:	4630      	mov	r0, r6
   1a52a:	f012 f812 	bl	2c552 <assert_post_action>
   1a52e:	e7d9      	b.n	1a4e4 <bt_att_chan_req_send+0x8>
	__ASSERT_NO_MSG(req);
   1a530:	4e0d      	ldr	r6, [pc, #52]	; (1a568 <bt_att_chan_req_send+0x8c>)
   1a532:	f44f 730d 	mov.w	r3, #564	; 0x234
   1a536:	4632      	mov	r2, r6
   1a538:	490f      	ldr	r1, [pc, #60]	; (1a578 <bt_att_chan_req_send+0x9c>)
   1a53a:	480d      	ldr	r0, [pc, #52]	; (1a570 <bt_att_chan_req_send+0x94>)
   1a53c:	f011 fe04 	bl	2c148 <printk>
   1a540:	f44f 710d 	mov.w	r1, #564	; 0x234
   1a544:	4630      	mov	r0, r6
   1a546:	f012 f804 	bl	2c552 <assert_post_action>
   1a54a:	e7cc      	b.n	1a4e6 <bt_att_chan_req_send+0xa>
	__ASSERT_NO_MSG(req->func);
   1a54c:	4e06      	ldr	r6, [pc, #24]	; (1a568 <bt_att_chan_req_send+0x8c>)
   1a54e:	f240 2335 	movw	r3, #565	; 0x235
   1a552:	4632      	mov	r2, r6
   1a554:	4909      	ldr	r1, [pc, #36]	; (1a57c <bt_att_chan_req_send+0xa0>)
   1a556:	4806      	ldr	r0, [pc, #24]	; (1a570 <bt_att_chan_req_send+0x94>)
   1a558:	f011 fdf6 	bl	2c148 <printk>
   1a55c:	f240 2135 	movw	r1, #565	; 0x235
   1a560:	4630      	mov	r0, r6
   1a562:	f011 fff6 	bl	2c552 <assert_post_action>
   1a566:	e7c0      	b.n	1a4ea <bt_att_chan_req_send+0xe>
   1a568:	00034440 	.word	0x00034440
   1a56c:	00034488 	.word	0x00034488
   1a570:	00031df4 	.word	0x00031df4
   1a574:	00034470 	.word	0x00034470
   1a578:	00034478 	.word	0x00034478
   1a57c:	0003447c 	.word	0x0003447c

0001a580 <read_group_cb>:
{
   1a580:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a582:	b085      	sub	sp, #20
   1a584:	4605      	mov	r5, r0
   1a586:	460e      	mov	r6, r1
   1a588:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1a58a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a58c:	2300      	movs	r3, #0
   1a58e:	f88d 3008 	strb.w	r3, [sp, #8]
   1a592:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a596:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a59a:	a902      	add	r1, sp, #8
   1a59c:	6800      	ldr	r0, [r0, #0]
   1a59e:	f012 fd1b 	bl	2cfd8 <bt_uuid_cmp>
   1a5a2:	b158      	cbz	r0, 1a5bc <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a5a4:	2300      	movs	r3, #0
   1a5a6:	f88d 300c 	strb.w	r3, [sp, #12]
   1a5aa:	f642 0301 	movw	r3, #10241	; 0x2801
   1a5ae:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a5b2:	a903      	add	r1, sp, #12
   1a5b4:	6828      	ldr	r0, [r5, #0]
   1a5b6:	f012 fd0f 	bl	2cfd8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a5ba:	bb30      	cbnz	r0, 1a60a <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a5bc:	6861      	ldr	r1, [r4, #4]
   1a5be:	6828      	ldr	r0, [r5, #0]
   1a5c0:	f012 fd0a 	bl	2cfd8 <bt_uuid_cmp>
   1a5c4:	bb48      	cbnz	r0, 1a61a <read_group_cb+0x9a>
	if (data->rsp->len &&
   1a5c6:	68e3      	ldr	r3, [r4, #12]
   1a5c8:	781a      	ldrb	r2, [r3, #0]
   1a5ca:	b132      	cbz	r2, 1a5da <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a5cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   1a5d0:	68a1      	ldr	r1, [r4, #8]
   1a5d2:	8989      	ldrh	r1, [r1, #12]
   1a5d4:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1a5d6:	4293      	cmp	r3, r2
   1a5d8:	db24      	blt.n	1a624 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1a5da:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1a5dc:	2104      	movs	r1, #4
   1a5de:	3008      	adds	r0, #8
   1a5e0:	f002 fa72 	bl	1cac8 <net_buf_simple_add>
   1a5e4:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a5e6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a5e8:	6923      	ldr	r3, [r4, #16]
   1a5ea:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1a5ec:	9401      	str	r4, [sp, #4]
   1a5ee:	4b10      	ldr	r3, [pc, #64]	; (1a630 <read_group_cb+0xb0>)
   1a5f0:	9300      	str	r3, [sp, #0]
   1a5f2:	2300      	movs	r3, #0
   1a5f4:	68a2      	ldr	r2, [r4, #8]
   1a5f6:	4629      	mov	r1, r5
   1a5f8:	4638      	mov	r0, r7
   1a5fa:	f013 fd6b 	bl	2e0d4 <att_chan_read>
	if (read < 0) {
   1a5fe:	2800      	cmp	r0, #0
   1a600:	db12      	blt.n	1a628 <read_group_cb+0xa8>
	if (!data->group) {
   1a602:	6923      	ldr	r3, [r4, #16]
   1a604:	b193      	cbz	r3, 1a62c <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   1a606:	2001      	movs	r0, #1
   1a608:	e00a      	b.n	1a620 <read_group_cb+0xa0>
		if (data->group &&
   1a60a:	6923      	ldr	r3, [r4, #16]
   1a60c:	b11b      	cbz	r3, 1a616 <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1a60e:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1a610:	42b2      	cmp	r2, r6
   1a612:	d200      	bcs.n	1a616 <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1a614:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a616:	2001      	movs	r0, #1
   1a618:	e002      	b.n	1a620 <read_group_cb+0xa0>
		data->group = NULL;
   1a61a:	2300      	movs	r3, #0
   1a61c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1a61e:	2001      	movs	r0, #1
}
   1a620:	b005      	add	sp, #20
   1a622:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1a624:	2000      	movs	r0, #0
   1a626:	e7fb      	b.n	1a620 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   1a628:	2000      	movs	r0, #0
   1a62a:	e7f9      	b.n	1a620 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   1a62c:	2000      	movs	r0, #0
   1a62e:	e7f7      	b.n	1a620 <read_group_cb+0xa0>
   1a630:	0002dc65 	.word	0x0002dc65

0001a634 <read_type_cb>:
{
   1a634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a638:	b083      	sub	sp, #12
   1a63a:	4606      	mov	r6, r0
   1a63c:	4688      	mov	r8, r1
   1a63e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1a640:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a642:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a644:	6851      	ldr	r1, [r2, #4]
   1a646:	6800      	ldr	r0, [r0, #0]
   1a648:	f012 fcc6 	bl	2cfd8 <bt_uuid_cmp>
   1a64c:	b120      	cbz	r0, 1a658 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1a64e:	2501      	movs	r5, #1
}
   1a650:	4628      	mov	r0, r5
   1a652:	b003      	add	sp, #12
   1a654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a658:	2215      	movs	r2, #21
   1a65a:	4631      	mov	r1, r6
   1a65c:	4628      	mov	r0, r5
   1a65e:	f014 fb16 	bl	2ec8e <bt_gatt_check_perm>
   1a662:	4605      	mov	r5, r0
   1a664:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1a666:	b130      	cbz	r0, 1a676 <read_type_cb+0x42>
		if (data->rsp->len) {
   1a668:	68e3      	ldr	r3, [r4, #12]
   1a66a:	781b      	ldrb	r3, [r3, #0]
   1a66c:	b10b      	cbz	r3, 1a672 <read_type_cb+0x3e>
			data->err = 0x00;
   1a66e:	2300      	movs	r3, #0
   1a670:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a672:	2500      	movs	r5, #0
   1a674:	e7ec      	b.n	1a650 <read_type_cb+0x1c>
	data->err = 0x00;
   1a676:	f04f 0900 	mov.w	r9, #0
   1a67a:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a67e:	68a0      	ldr	r0, [r4, #8]
   1a680:	f002 f946 	bl	1c910 <net_buf_frag_last>
   1a684:	2102      	movs	r1, #2
   1a686:	3008      	adds	r0, #8
   1a688:	f002 fa1e 	bl	1cac8 <net_buf_simple_add>
   1a68c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1a68e:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a692:	9401      	str	r4, [sp, #4]
   1a694:	4b11      	ldr	r3, [pc, #68]	; (1a6dc <read_type_cb+0xa8>)
   1a696:	9300      	str	r3, [sp, #0]
   1a698:	464b      	mov	r3, r9
   1a69a:	68a2      	ldr	r2, [r4, #8]
   1a69c:	4631      	mov	r1, r6
   1a69e:	4638      	mov	r0, r7
   1a6a0:	f013 fd18 	bl	2e0d4 <att_chan_read>
	if (read < 0) {
   1a6a4:	2800      	cmp	r0, #0
   1a6a6:	db07      	blt.n	1a6b8 <read_type_cb+0x84>
	if (!data->item) {
   1a6a8:	6923      	ldr	r3, [r4, #16]
   1a6aa:	2b00      	cmp	r3, #0
   1a6ac:	d0d0      	beq.n	1a650 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a6ae:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   1a6b2:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1a6b4:	2200      	movs	r2, #0

	while (buf) {
   1a6b6:	e006      	b.n	1a6c6 <read_type_cb+0x92>
		data->err = err_to_att(read);
   1a6b8:	f013 fab8 	bl	2dc2c <err_to_att>
   1a6bc:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a6be:	e7c7      	b.n	1a650 <read_type_cb+0x1c>
		bytes += buf->len;
   1a6c0:	8999      	ldrh	r1, [r3, #12]
   1a6c2:	440a      	add	r2, r1
		buf = buf->frags;
   1a6c4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1a6c6:	2b00      	cmp	r3, #0
   1a6c8:	d1fa      	bne.n	1a6c0 <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a6ca:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a6cc:	68e3      	ldr	r3, [r4, #12]
   1a6ce:	781d      	ldrb	r5, [r3, #0]
   1a6d0:	42aa      	cmp	r2, r5
   1a6d2:	bf94      	ite	ls
   1a6d4:	2500      	movls	r5, #0
   1a6d6:	2501      	movhi	r5, #1
   1a6d8:	e7ba      	b.n	1a650 <read_type_cb+0x1c>
   1a6da:	bf00      	nop
   1a6dc:	0002dc3d 	.word	0x0002dc3d

0001a6e0 <find_type_cb>:
{
   1a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6e4:	b093      	sub	sp, #76	; 0x4c
   1a6e6:	4606      	mov	r6, r0
   1a6e8:	460f      	mov	r7, r1
   1a6ea:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   1a6ec:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a6f0:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a6f4:	2300      	movs	r3, #0
   1a6f6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1a6fa:	f642 0301 	movw	r3, #10241	; 0x2801
   1a6fe:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   1a702:	a910      	add	r1, sp, #64	; 0x40
   1a704:	6800      	ldr	r0, [r0, #0]
   1a706:	f012 fc67 	bl	2cfd8 <bt_uuid_cmp>
   1a70a:	b928      	cbnz	r0, 1a718 <find_type_cb+0x38>
	data->group = NULL;
   1a70c:	2300      	movs	r3, #0
   1a70e:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   1a710:	2001      	movs	r0, #1
}
   1a712:	b013      	add	sp, #76	; 0x4c
   1a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1a718:	2300      	movs	r3, #0
   1a71a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   1a71e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a722:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1a726:	a911      	add	r1, sp, #68	; 0x44
   1a728:	6830      	ldr	r0, [r6, #0]
   1a72a:	f012 fc55 	bl	2cfd8 <bt_uuid_cmp>
   1a72e:	b928      	cbnz	r0, 1a73c <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1a730:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   1a734:	6868      	ldr	r0, [r5, #4]
   1a736:	4603      	mov	r3, r0
	size_t bytes = 0;
   1a738:	2400      	movs	r4, #0
	while (buf) {
   1a73a:	e00a      	b.n	1a752 <find_type_cb+0x72>
		if (data->group &&
   1a73c:	68ab      	ldr	r3, [r5, #8]
   1a73e:	b11b      	cbz	r3, 1a748 <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1a740:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1a742:	42ba      	cmp	r2, r7
   1a744:	d200      	bcs.n	1a748 <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1a746:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a748:	2001      	movs	r0, #1
   1a74a:	e7e2      	b.n	1a712 <find_type_cb+0x32>
		bytes += buf->len;
   1a74c:	899a      	ldrh	r2, [r3, #12]
   1a74e:	4414      	add	r4, r2
		buf = buf->frags;
   1a750:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1a752:	2b00      	cmp	r3, #0
   1a754:	d1fa      	bne.n	1a74c <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1a756:	1b0c      	subs	r4, r1, r4
   1a758:	2c03      	cmp	r4, #3
   1a75a:	d801      	bhi.n	1a760 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   1a75c:	2000      	movs	r0, #0
   1a75e:	e7d8      	b.n	1a712 <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   1a760:	f002 f8d6 	bl	1c910 <net_buf_frag_last>
   1a764:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1a766:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   1a76a:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   1a76c:	2200      	movs	r2, #0
	while (buf) {
   1a76e:	b11b      	cbz	r3, 1a778 <find_type_cb+0x98>
		bytes += buf->len;
   1a770:	8999      	ldrh	r1, [r3, #12]
   1a772:	440a      	add	r2, r1
		buf = buf->frags;
   1a774:	681b      	ldr	r3, [r3, #0]
   1a776:	e7fa      	b.n	1a76e <find_type_cb+0x8e>
   1a778:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1a77c:	f104 0b08 	add.w	fp, r4, #8
   1a780:	4658      	mov	r0, fp
   1a782:	f014 fb88 	bl	2ee96 <net_buf_simple_tailroom>
   1a786:	4582      	cmp	sl, r0
   1a788:	d22b      	bcs.n	1a7e2 <find_type_cb+0x102>
   1a78a:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   1a78e:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   1a790:	2200      	movs	r2, #0
	while (buf) {
   1a792:	e002      	b.n	1a79a <find_type_cb+0xba>
		bytes += buf->len;
   1a794:	8999      	ldrh	r1, [r3, #12]
   1a796:	440a      	add	r2, r1
		buf = buf->frags;
   1a798:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1a79a:	2b00      	cmp	r3, #0
   1a79c:	d1fa      	bne.n	1a794 <find_type_cb+0xb4>
   1a79e:	1a80      	subs	r0, r0, r2
	if (!len) {
   1a7a0:	b318      	cbz	r0, 1a7ea <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1a7a2:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1a7a6:	2300      	movs	r3, #0
   1a7a8:	9300      	str	r3, [sp, #0]
   1a7aa:	2310      	movs	r3, #16
   1a7ac:	aa0c      	add	r2, sp, #48	; 0x30
   1a7ae:	4631      	mov	r1, r6
   1a7b0:	4648      	mov	r0, r9
   1a7b2:	47c0      	blx	r8
	if (read < 0) {
   1a7b4:	1e06      	subs	r6, r0, #0
   1a7b6:	dba9      	blt.n	1a70c <find_type_cb+0x2c>
	if (read != data->value_len) {
   1a7b8:	7c2a      	ldrb	r2, [r5, #16]
   1a7ba:	42b2      	cmp	r2, r6
   1a7bc:	d049      	beq.n	1a852 <find_type_cb+0x172>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a7be:	68e9      	ldr	r1, [r5, #12]
   1a7c0:	a807      	add	r0, sp, #28
   1a7c2:	f012 fc27 	bl	2d014 <bt_uuid_create>
   1a7c6:	b300      	cbz	r0, 1a80a <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1a7c8:	b2f2      	uxtb	r2, r6
   1a7ca:	a90c      	add	r1, sp, #48	; 0x30
   1a7cc:	a802      	add	r0, sp, #8
   1a7ce:	f012 fc21 	bl	2d014 <bt_uuid_create>
   1a7d2:	b360      	cbz	r0, 1a82e <find_type_cb+0x14e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1a7d4:	a902      	add	r1, sp, #8
   1a7d6:	a807      	add	r0, sp, #28
   1a7d8:	f012 fbfe 	bl	2cfd8 <bt_uuid_cmp>
   1a7dc:	2800      	cmp	r0, #0
   1a7de:	d040      	beq.n	1a862 <find_type_cb+0x182>
   1a7e0:	e794      	b.n	1a70c <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   1a7e2:	4658      	mov	r0, fp
   1a7e4:	f014 fb57 	bl	2ee96 <net_buf_simple_tailroom>
   1a7e8:	e7da      	b.n	1a7a0 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1a7ea:	686b      	ldr	r3, [r5, #4]
   1a7ec:	7998      	ldrb	r0, [r3, #6]
   1a7ee:	f001 fe43 	bl	1c478 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1a7f2:	2200      	movs	r2, #0
   1a7f4:	2300      	movs	r3, #0
   1a7f6:	f014 fb3b 	bl	2ee70 <net_buf_alloc_fixed>
		if (!frag) {
   1a7fa:	4604      	mov	r4, r0
   1a7fc:	2800      	cmp	r0, #0
   1a7fe:	d088      	beq.n	1a712 <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   1a800:	4601      	mov	r1, r0
   1a802:	6868      	ldr	r0, [r5, #4]
   1a804:	f002 f8d2 	bl	1c9ac <net_buf_frag_add>
   1a808:	e7cb      	b.n	1a7a2 <find_type_cb+0xc2>
   1a80a:	4b1c      	ldr	r3, [pc, #112]	; (1a87c <find_type_cb+0x19c>)
   1a80c:	4a1c      	ldr	r2, [pc, #112]	; (1a880 <find_type_cb+0x1a0>)
   1a80e:	1a9b      	subs	r3, r3, r2
   1a810:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1a812:	f04f 0200 	mov.w	r2, #0
   1a816:	2102      	movs	r1, #2
   1a818:	f361 0202 	bfi	r2, r1, #0, #3
   1a81c:	f36f 02c5 	bfc	r2, #3, #3
   1a820:	f363 128f 	bfi	r2, r3, #6, #10
   1a824:	7c29      	ldrb	r1, [r5, #16]
   1a826:	4817      	ldr	r0, [pc, #92]	; (1a884 <find_type_cb+0x1a4>)
   1a828:	f7f9 f86a 	bl	13900 <log_1>
			goto skip;
   1a82c:	e76e      	b.n	1a70c <find_type_cb+0x2c>
   1a82e:	4b13      	ldr	r3, [pc, #76]	; (1a87c <find_type_cb+0x19c>)
   1a830:	4a13      	ldr	r2, [pc, #76]	; (1a880 <find_type_cb+0x1a0>)
   1a832:	1a9b      	subs	r3, r3, r2
   1a834:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %d", read);
   1a836:	f04f 0200 	mov.w	r2, #0
   1a83a:	2102      	movs	r1, #2
   1a83c:	f361 0202 	bfi	r2, r1, #0, #3
   1a840:	f36f 02c5 	bfc	r2, #3, #3
   1a844:	f363 128f 	bfi	r2, r3, #6, #10
   1a848:	4631      	mov	r1, r6
   1a84a:	480f      	ldr	r0, [pc, #60]	; (1a888 <find_type_cb+0x1a8>)
   1a84c:	f7f9 f858 	bl	13900 <log_1>
			goto skip;
   1a850:	e75c      	b.n	1a70c <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   1a852:	4632      	mov	r2, r6
   1a854:	a90c      	add	r1, sp, #48	; 0x30
   1a856:	68e8      	ldr	r0, [r5, #12]
   1a858:	f016 f81c 	bl	30894 <memcmp>
   1a85c:	2800      	cmp	r0, #0
   1a85e:	f47f af55 	bne.w	1a70c <find_type_cb+0x2c>
	data->err = 0x00;
   1a862:	2300      	movs	r3, #0
   1a864:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   1a866:	2104      	movs	r1, #4
   1a868:	f104 0008 	add.w	r0, r4, #8
   1a86c:	f002 f92c 	bl	1cac8 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1a870:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a872:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a874:	68ab      	ldr	r3, [r5, #8]
   1a876:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1a878:	2001      	movs	r0, #1
   1a87a:	e74a      	b.n	1a712 <find_type_cb+0x32>
   1a87c:	00031918 	.word	0x00031918
   1a880:	00031908 	.word	0x00031908
   1a884:	00034494 	.word	0x00034494
   1a888:	000344b4 	.word	0x000344b4

0001a88c <att_get_fixed_chan>:
{
   1a88c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1a88e:	2104      	movs	r1, #4
   1a890:	f013 f962 	bl	2db58 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   1a894:	4604      	mov	r4, r0
   1a896:	b110      	cbz	r0, 1a89e <att_get_fixed_chan+0x12>
}
   1a898:	f1a4 0008 	sub.w	r0, r4, #8
   1a89c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(chan, "No ATT channel found");
   1a89e:	4d08      	ldr	r5, [pc, #32]	; (1a8c0 <att_get_fixed_chan+0x34>)
   1a8a0:	f640 2381 	movw	r3, #2689	; 0xa81
   1a8a4:	462a      	mov	r2, r5
   1a8a6:	4907      	ldr	r1, [pc, #28]	; (1a8c4 <att_get_fixed_chan+0x38>)
   1a8a8:	4807      	ldr	r0, [pc, #28]	; (1a8c8 <att_get_fixed_chan+0x3c>)
   1a8aa:	f011 fc4d 	bl	2c148 <printk>
   1a8ae:	4807      	ldr	r0, [pc, #28]	; (1a8cc <att_get_fixed_chan+0x40>)
   1a8b0:	f011 fc4a 	bl	2c148 <printk>
   1a8b4:	f640 2181 	movw	r1, #2689	; 0xa81
   1a8b8:	4628      	mov	r0, r5
   1a8ba:	f011 fe4a 	bl	2c552 <assert_post_action>
   1a8be:	e7eb      	b.n	1a898 <att_get_fixed_chan+0xc>
   1a8c0:	00034440 	.word	0x00034440
   1a8c4:	00034470 	.word	0x00034470
   1a8c8:	00031df4 	.word	0x00031df4
   1a8cc:	000344d4 	.word	0x000344d4

0001a8d0 <bt_att_connected>:
{
   1a8d0:	b538      	push	{r3, r4, r5, lr}
   1a8d2:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   1a8d4:	4605      	mov	r5, r0
   1a8d6:	f855 0908 	ldr.w	r0, [r5], #-8
   1a8da:	f7ff ffd7 	bl	1a88c <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   1a8de:	4629      	mov	r1, r5
   1a8e0:	6800      	ldr	r0, [r0, #0]
   1a8e2:	f013 fa57 	bl	2dd94 <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a8e6:	f3bf 8f5b 	dmb	ish
   1a8ea:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1a8ee:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1a8f2:	f013 0f08 	tst.w	r3, #8
   1a8f6:	d104      	bne.n	1a902 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a8f8:	2317      	movs	r3, #23
   1a8fa:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a8fe:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   1a902:	4628      	mov	r0, r5
   1a904:	f013 fd19 	bl	2e33a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1a908:	4902      	ldr	r1, [pc, #8]	; (1a914 <bt_att_connected+0x44>)
   1a90a:	f504 708c 	add.w	r0, r4, #280	; 0x118
   1a90e:	f00a fb51 	bl	24fb4 <k_work_init_delayable>
}
   1a912:	bd38      	pop	{r3, r4, r5, pc}
   1a914:	0001b23d 	.word	0x0001b23d

0001a918 <bt_att_chan_create_pdu>:
{
   1a918:	b538      	push	{r3, r4, r5, lr}
   1a91a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a91c:	3201      	adds	r2, #1
   1a91e:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1a922:	428a      	cmp	r2, r1
   1a924:	d810      	bhi.n	1a948 <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
   1a926:	4628      	mov	r0, r5
   1a928:	f013 f9b3 	bl	2dc92 <att_op_get_type>
   1a92c:	2802      	cmp	r0, #2
   1a92e:	d01d      	beq.n	1a96c <bt_att_chan_create_pdu+0x54>
   1a930:	2804      	cmp	r0, #4
   1a932:	d01b      	beq.n	1a96c <bt_att_chan_create_pdu+0x54>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1a934:	f04f 32ff 	mov.w	r2, #4294967295
   1a938:	f04f 33ff 	mov.w	r3, #4294967295
   1a93c:	2100      	movs	r1, #0
   1a93e:	4608      	mov	r0, r1
   1a940:	f013 f8c3 	bl	2daca <bt_l2cap_create_pdu_timeout>
   1a944:	4604      	mov	r4, r0
   1a946:	e019      	b.n	1a97c <bt_att_chan_create_pdu+0x64>
   1a948:	481a      	ldr	r0, [pc, #104]	; (1a9b4 <bt_att_chan_create_pdu+0x9c>)
   1a94a:	4b1b      	ldr	r3, [pc, #108]	; (1a9b8 <bt_att_chan_create_pdu+0xa0>)
   1a94c:	1ac0      	subs	r0, r0, r3
   1a94e:	08c0      	lsrs	r0, r0, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1a950:	f04f 0300 	mov.w	r3, #0
   1a954:	2402      	movs	r4, #2
   1a956:	f364 0302 	bfi	r3, r4, #0, #3
   1a95a:	f36f 03c5 	bfc	r3, #3, #3
   1a95e:	f360 138f 	bfi	r3, r0, #6, #10
   1a962:	4816      	ldr	r0, [pc, #88]	; (1a9bc <bt_att_chan_create_pdu+0xa4>)
   1a964:	f7f9 f802 	bl	1396c <log_2>
		return NULL;
   1a968:	2400      	movs	r4, #0
   1a96a:	e00e      	b.n	1a98a <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1a96c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1a970:	2300      	movs	r3, #0
   1a972:	2100      	movs	r1, #0
   1a974:	4608      	mov	r0, r1
   1a976:	f013 f8a8 	bl	2daca <bt_l2cap_create_pdu_timeout>
   1a97a:	4604      	mov	r4, r0
	if (!buf) {
   1a97c:	b13c      	cbz	r4, 1a98e <bt_att_chan_create_pdu+0x76>
   1a97e:	2101      	movs	r1, #1
   1a980:	f104 0008 	add.w	r0, r4, #8
   1a984:	f002 f8a0 	bl	1cac8 <net_buf_simple_add>
	hdr->code = op;
   1a988:	7005      	strb	r5, [r0, #0]
}
   1a98a:	4620      	mov	r0, r4
   1a98c:	bd38      	pop	{r3, r4, r5, pc}
   1a98e:	4b09      	ldr	r3, [pc, #36]	; (1a9b4 <bt_att_chan_create_pdu+0x9c>)
   1a990:	4a09      	ldr	r2, [pc, #36]	; (1a9b8 <bt_att_chan_create_pdu+0xa0>)
   1a992:	1a9b      	subs	r3, r3, r2
   1a994:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a996:	f04f 0200 	mov.w	r2, #0
   1a99a:	2101      	movs	r1, #1
   1a99c:	f361 0202 	bfi	r2, r1, #0, #3
   1a9a0:	f36f 02c5 	bfc	r2, #3, #3
   1a9a4:	f363 128f 	bfi	r2, r3, #6, #10
   1a9a8:	4629      	mov	r1, r5
   1a9aa:	4805      	ldr	r0, [pc, #20]	; (1a9c0 <bt_att_chan_create_pdu+0xa8>)
   1a9ac:	f7f8 ffa8 	bl	13900 <log_1>
		return NULL;
   1a9b0:	e7eb      	b.n	1a98a <bt_att_chan_create_pdu+0x72>
   1a9b2:	bf00      	nop
   1a9b4:	00031918 	.word	0x00031918
   1a9b8:	00031908 	.word	0x00031908
   1a9bc:	000344ec 	.word	0x000344ec
   1a9c0:	00034238 	.word	0x00034238

0001a9c4 <send_err_rsp>:
	if (!req) {
   1a9c4:	b901      	cbnz	r1, 1a9c8 <send_err_rsp+0x4>
   1a9c6:	4770      	bx	lr
{
   1a9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9cc:	4606      	mov	r6, r0
   1a9ce:	4615      	mov	r5, r2
   1a9d0:	461c      	mov	r4, r3
   1a9d2:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1a9d4:	2204      	movs	r2, #4
   1a9d6:	2101      	movs	r1, #1
   1a9d8:	f7ff ff9e 	bl	1a918 <bt_att_chan_create_pdu>
	if (!buf) {
   1a9dc:	4680      	mov	r8, r0
   1a9de:	b160      	cbz	r0, 1a9fa <send_err_rsp+0x36>
   1a9e0:	2104      	movs	r1, #4
   1a9e2:	3008      	adds	r0, #8
   1a9e4:	f002 f870 	bl	1cac8 <net_buf_simple_add>
	rsp->request = req;
   1a9e8:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   1a9ea:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   1a9ee:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1a9f0:	4a03      	ldr	r2, [pc, #12]	; (1aa00 <send_err_rsp+0x3c>)
   1a9f2:	4641      	mov	r1, r8
   1a9f4:	4630      	mov	r0, r6
   1a9f6:	f013 fb60 	bl	2e0ba <bt_att_chan_send_rsp>
}
   1a9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a9fe:	bf00      	nop
   1aa00:	0002df0f 	.word	0x0002df0f

0001aa04 <bt_att_recv>:
{
   1aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1aa08:	898b      	ldrh	r3, [r1, #12]
   1aa0a:	b1bb      	cbz	r3, 1aa3c <bt_att_recv+0x38>
   1aa0c:	4607      	mov	r7, r0
   1aa0e:	460e      	mov	r6, r1
   1aa10:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   1aa14:	2101      	movs	r1, #1
   1aa16:	f106 0008 	add.w	r0, r6, #8
   1aa1a:	f002 f80f 	bl	1ca3c <net_buf_simple_pull_mem>
   1aa1e:	4605      	mov	r5, r0
	if (!att_chan->att) {
   1aa20:	f857 3c08 	ldr.w	r3, [r7, #-8]
   1aa24:	b1d3      	cbz	r3, 1aa5c <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1aa26:	2300      	movs	r3, #0
   1aa28:	2b0c      	cmp	r3, #12
   1aa2a:	d81e      	bhi.n	1aa6a <bt_att_recv+0x66>
		if (hdr->code == handlers[i].op) {
   1aa2c:	782c      	ldrb	r4, [r5, #0]
   1aa2e:	4a58      	ldr	r2, [pc, #352]	; (1ab90 <bt_att_recv+0x18c>)
   1aa30:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1aa34:	4294      	cmp	r4, r2
   1aa36:	d014      	beq.n	1aa62 <bt_att_recv+0x5e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1aa38:	3301      	adds	r3, #1
   1aa3a:	e7f5      	b.n	1aa28 <bt_att_recv+0x24>
   1aa3c:	4b55      	ldr	r3, [pc, #340]	; (1ab94 <bt_att_recv+0x190>)
   1aa3e:	4a56      	ldr	r2, [pc, #344]	; (1ab98 <bt_att_recv+0x194>)
   1aa40:	1a9b      	subs	r3, r3, r2
   1aa42:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small ATT PDU received");
   1aa44:	f04f 0100 	mov.w	r1, #0
   1aa48:	2201      	movs	r2, #1
   1aa4a:	f362 0102 	bfi	r1, r2, #0, #3
   1aa4e:	f36f 01c5 	bfc	r1, #3, #3
   1aa52:	f363 118f 	bfi	r1, r3, #6, #10
   1aa56:	4851      	ldr	r0, [pc, #324]	; (1ab9c <bt_att_recv+0x198>)
   1aa58:	f7f8 ff22 	bl	138a0 <log_0>
}
   1aa5c:	2000      	movs	r0, #0
   1aa5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   1aa62:	4c4b      	ldr	r4, [pc, #300]	; (1ab90 <bt_att_recv+0x18c>)
   1aa64:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
   1aa68:	e000      	b.n	1aa6c <bt_att_recv+0x68>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1aa6a:	2400      	movs	r4, #0
	if (!handler) {
   1aa6c:	b1cc      	cbz	r4, 1aaa2 <bt_att_recv+0x9e>
		if (handler->type == ATT_REQUEST &&
   1aa6e:	78a3      	ldrb	r3, [r4, #2]
   1aa70:	2b01      	cmp	r3, #1
   1aa72:	d036      	beq.n	1aae2 <bt_att_recv+0xde>
		} else if (handler->type == ATT_INDICATION &&
   1aa74:	78a3      	ldrb	r3, [r4, #2]
   1aa76:	2b05      	cmp	r3, #5
   1aa78:	d055      	beq.n	1ab26 <bt_att_recv+0x122>
	if (buf->len < handler->expect_len) {
   1aa7a:	89b1      	ldrh	r1, [r6, #12]
   1aa7c:	7863      	ldrb	r3, [r4, #1]
   1aa7e:	4299      	cmp	r1, r3
   1aa80:	d372      	bcc.n	1ab68 <bt_att_recv+0x164>
		err = handler->func(att_chan, buf);
   1aa82:	6863      	ldr	r3, [r4, #4]
   1aa84:	4631      	mov	r1, r6
   1aa86:	4640      	mov	r0, r8
   1aa88:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1aa8a:	78a3      	ldrb	r3, [r4, #2]
   1aa8c:	2b01      	cmp	r3, #1
   1aa8e:	d1e5      	bne.n	1aa5c <bt_att_recv+0x58>
   1aa90:	2800      	cmp	r0, #0
   1aa92:	d0e3      	beq.n	1aa5c <bt_att_recv+0x58>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1aa94:	4603      	mov	r3, r0
   1aa96:	2200      	movs	r2, #0
   1aa98:	7829      	ldrb	r1, [r5, #0]
   1aa9a:	4640      	mov	r0, r8
   1aa9c:	f7ff ff92 	bl	1a9c4 <send_err_rsp>
   1aaa0:	e7dc      	b.n	1aa5c <bt_att_recv+0x58>
   1aaa2:	4b3c      	ldr	r3, [pc, #240]	; (1ab94 <bt_att_recv+0x190>)
   1aaa4:	4a3c      	ldr	r2, [pc, #240]	; (1ab98 <bt_att_recv+0x194>)
   1aaa6:	1a9b      	subs	r3, r3, r2
   1aaa8:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1aaaa:	f04f 0200 	mov.w	r2, #0
   1aaae:	2102      	movs	r1, #2
   1aab0:	f361 0202 	bfi	r2, r1, #0, #3
   1aab4:	f36f 02c5 	bfc	r2, #3, #3
   1aab8:	f363 128f 	bfi	r2, r3, #6, #10
   1aabc:	7829      	ldrb	r1, [r5, #0]
   1aabe:	4838      	ldr	r0, [pc, #224]	; (1aba0 <bt_att_recv+0x19c>)
   1aac0:	f7f8 ff1e 	bl	13900 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1aac4:	782c      	ldrb	r4, [r5, #0]
   1aac6:	4620      	mov	r0, r4
   1aac8:	f013 f8e3 	bl	2dc92 <att_op_get_type>
   1aacc:	2800      	cmp	r0, #0
   1aace:	d0c5      	beq.n	1aa5c <bt_att_recv+0x58>
   1aad0:	2805      	cmp	r0, #5
   1aad2:	d0c3      	beq.n	1aa5c <bt_att_recv+0x58>
			send_err_rsp(att_chan, hdr->code, 0,
   1aad4:	2306      	movs	r3, #6
   1aad6:	2200      	movs	r2, #0
   1aad8:	4621      	mov	r1, r4
   1aada:	4640      	mov	r0, r8
   1aadc:	f7ff ff72 	bl	1a9c4 <send_err_rsp>
		return 0;
   1aae0:	e7bc      	b.n	1aa5c <bt_att_recv+0x58>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1aae2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1aae6:	f3bf 8f5b 	dmb	ish
   1aaea:	e853 2f00 	ldrex	r2, [r3]
   1aaee:	f042 0101 	orr.w	r1, r2, #1
   1aaf2:	e843 1000 	strex	r0, r1, [r3]
   1aaf6:	2800      	cmp	r0, #0
   1aaf8:	d1f7      	bne.n	1aaea <bt_att_recv+0xe6>
   1aafa:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   1aafe:	f012 0f01 	tst.w	r2, #1
   1ab02:	d0b7      	beq.n	1aa74 <bt_att_recv+0x70>
   1ab04:	4b23      	ldr	r3, [pc, #140]	; (1ab94 <bt_att_recv+0x190>)
   1ab06:	4a24      	ldr	r2, [pc, #144]	; (1ab98 <bt_att_recv+0x194>)
   1ab08:	1a9b      	subs	r3, r3, r2
   1ab0a:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected request");
   1ab0c:	f04f 0100 	mov.w	r1, #0
   1ab10:	2202      	movs	r2, #2
   1ab12:	f362 0102 	bfi	r1, r2, #0, #3
   1ab16:	f36f 01c5 	bfc	r1, #3, #3
   1ab1a:	f363 118f 	bfi	r1, r3, #6, #10
   1ab1e:	4821      	ldr	r0, [pc, #132]	; (1aba4 <bt_att_recv+0x1a0>)
   1ab20:	f7f8 febe 	bl	138a0 <log_0>
			return 0;
   1ab24:	e79a      	b.n	1aa5c <bt_att_recv+0x58>
			   atomic_test_and_set_bit(att_chan->flags,
   1ab26:	37f0      	adds	r7, #240	; 0xf0
   1ab28:	f3bf 8f5b 	dmb	ish
   1ab2c:	e857 3f00 	ldrex	r3, [r7]
   1ab30:	f043 0202 	orr.w	r2, r3, #2
   1ab34:	e847 2100 	strex	r1, r2, [r7]
   1ab38:	2900      	cmp	r1, #0
   1ab3a:	d1f7      	bne.n	1ab2c <bt_att_recv+0x128>
   1ab3c:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   1ab40:	f013 0f02 	tst.w	r3, #2
   1ab44:	d099      	beq.n	1aa7a <bt_att_recv+0x76>
   1ab46:	4b13      	ldr	r3, [pc, #76]	; (1ab94 <bt_att_recv+0x190>)
   1ab48:	4a13      	ldr	r2, [pc, #76]	; (1ab98 <bt_att_recv+0x194>)
   1ab4a:	1a9b      	subs	r3, r3, r2
   1ab4c:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected indication");
   1ab4e:	f04f 0100 	mov.w	r1, #0
   1ab52:	2202      	movs	r2, #2
   1ab54:	f362 0102 	bfi	r1, r2, #0, #3
   1ab58:	f36f 01c5 	bfc	r1, #3, #3
   1ab5c:	f363 118f 	bfi	r1, r3, #6, #10
   1ab60:	4811      	ldr	r0, [pc, #68]	; (1aba8 <bt_att_recv+0x1a4>)
   1ab62:	f7f8 fe9d 	bl	138a0 <log_0>
			return 0;
   1ab66:	e779      	b.n	1aa5c <bt_att_recv+0x58>
   1ab68:	4a0a      	ldr	r2, [pc, #40]	; (1ab94 <bt_att_recv+0x190>)
   1ab6a:	4b0b      	ldr	r3, [pc, #44]	; (1ab98 <bt_att_recv+0x194>)
   1ab6c:	1ad2      	subs	r2, r2, r3
   1ab6e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1ab70:	f04f 0300 	mov.w	r3, #0
   1ab74:	2001      	movs	r0, #1
   1ab76:	f360 0302 	bfi	r3, r0, #0, #3
   1ab7a:	f36f 03c5 	bfc	r3, #3, #3
   1ab7e:	f362 138f 	bfi	r3, r2, #6, #10
   1ab82:	782a      	ldrb	r2, [r5, #0]
   1ab84:	4809      	ldr	r0, [pc, #36]	; (1abac <bt_att_recv+0x1a8>)
   1ab86:	f7f8 fef1 	bl	1396c <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
   1ab8a:	2004      	movs	r0, #4
   1ab8c:	e77d      	b.n	1aa8a <bt_att_recv+0x86>
   1ab8e:	bf00      	nop
   1ab90:	000345f8 	.word	0x000345f8
   1ab94:	00031918 	.word	0x00031918
   1ab98:	00031908 	.word	0x00031908
   1ab9c:	00034514 	.word	0x00034514
   1aba0:	00034530 	.word	0x00034530
   1aba4:	0003454c 	.word	0x0003454c
   1aba8:	00034568 	.word	0x00034568
   1abac:	00034588 	.word	0x00034588

0001abb0 <att_write_rsp>:
{
   1abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abb4:	b08a      	sub	sp, #40	; 0x28
   1abb6:	4604      	mov	r4, r0
   1abb8:	4616      	mov	r6, r2
   1abba:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1abbc:	6803      	ldr	r3, [r0, #0]
   1abbe:	4688      	mov	r8, r1
   1abc0:	3900      	subs	r1, #0
   1abc2:	bf18      	it	ne
   1abc4:	2101      	movne	r1, #1
   1abc6:	6818      	ldr	r0, [r3, #0]
   1abc8:	f014 f88d 	bl	2ece6 <bt_gatt_change_aware>
   1abcc:	2800      	cmp	r0, #0
   1abce:	d051      	beq.n	1ac74 <att_write_rsp+0xc4>
	if (!handle) {
   1abd0:	b925      	cbnz	r5, 1abdc <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1abd2:	2701      	movs	r7, #1
}
   1abd4:	4638      	mov	r0, r7
   1abd6:	b00a      	add	sp, #40	; 0x28
   1abd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   1abdc:	2300      	movs	r3, #0
   1abde:	9304      	str	r3, [sp, #16]
   1abe0:	9305      	str	r3, [sp, #20]
   1abe2:	9306      	str	r3, [sp, #24]
   1abe4:	9307      	str	r3, [sp, #28]
   1abe6:	9308      	str	r3, [sp, #32]
   1abe8:	9309      	str	r3, [sp, #36]	; 0x24
	if (rsp) {
   1abea:	b13e      	cbz	r6, 1abfc <att_write_rsp+0x4c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1abec:	461a      	mov	r2, r3
   1abee:	4631      	mov	r1, r6
   1abf0:	4620      	mov	r0, r4
   1abf2:	f7ff fe91 	bl	1a918 <bt_att_chan_create_pdu>
   1abf6:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1abf8:	2800      	cmp	r0, #0
   1abfa:	d03d      	beq.n	1ac78 <att_write_rsp+0xc8>
	data.conn = chan->att->conn;
   1abfc:	6823      	ldr	r3, [r4, #0]
   1abfe:	681b      	ldr	r3, [r3, #0]
   1ac00:	9304      	str	r3, [sp, #16]
	data.req = req;
   1ac02:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1ac06:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1ac0a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1ac0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ac10:	9307      	str	r3, [sp, #28]
	data.len = len;
   1ac12:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1ac16:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ac1a:	2301      	movs	r3, #1
   1ac1c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ac20:	ab04      	add	r3, sp, #16
   1ac22:	9302      	str	r3, [sp, #8]
   1ac24:	4b15      	ldr	r3, [pc, #84]	; (1ac7c <att_write_rsp+0xcc>)
   1ac26:	9301      	str	r3, [sp, #4]
   1ac28:	2200      	movs	r2, #0
   1ac2a:	9200      	str	r2, [sp, #0]
   1ac2c:	4613      	mov	r3, r2
   1ac2e:	4629      	mov	r1, r5
   1ac30:	4628      	mov	r0, r5
   1ac32:	f000 fead 	bl	1b990 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1ac36:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   1ac3a:	b93f      	cbnz	r7, 1ac4c <att_write_rsp+0x9c>
	if (data.buf) {
   1ac3c:	9905      	ldr	r1, [sp, #20]
   1ac3e:	2900      	cmp	r1, #0
   1ac40:	d0c8      	beq.n	1abd4 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1ac42:	4a0f      	ldr	r2, [pc, #60]	; (1ac80 <att_write_rsp+0xd0>)
   1ac44:	4620      	mov	r0, r4
   1ac46:	f013 fa38 	bl	2e0ba <bt_att_chan_send_rsp>
   1ac4a:	e7c3      	b.n	1abd4 <att_write_rsp+0x24>
		if (rsp) {
   1ac4c:	b926      	cbnz	r6, 1ac58 <att_write_rsp+0xa8>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1ac4e:	f1b8 0f18 	cmp.w	r8, #24
   1ac52:	d00c      	beq.n	1ac6e <att_write_rsp+0xbe>
   1ac54:	2700      	movs	r7, #0
   1ac56:	e7bd      	b.n	1abd4 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   1ac58:	9805      	ldr	r0, [sp, #20]
   1ac5a:	f001 fe03 	bl	1c864 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1ac5e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1ac62:	462a      	mov	r2, r5
   1ac64:	4641      	mov	r1, r8
   1ac66:	4620      	mov	r0, r4
   1ac68:	f7ff feac 	bl	1a9c4 <send_err_rsp>
   1ac6c:	e7ef      	b.n	1ac4e <att_write_rsp+0x9e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1ac6e:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   1ac72:	e7af      	b.n	1abd4 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ac74:	2712      	movs	r7, #18
   1ac76:	e7ad      	b.n	1abd4 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   1ac78:	270e      	movs	r7, #14
   1ac7a:	e7ab      	b.n	1abd4 <att_write_rsp+0x24>
   1ac7c:	0002e05d 	.word	0x0002e05d
   1ac80:	0002df0f 	.word	0x0002df0f

0001ac84 <bt_att_create_pdu>:
{
   1ac84:	b570      	push	{r4, r5, r6, lr}
   1ac86:	460e      	mov	r6, r1
   1ac88:	4615      	mov	r5, r2
	att = att_get(conn);
   1ac8a:	f7ff fab9 	bl	1a200 <att_get>
	if (!att) {
   1ac8e:	4604      	mov	r4, r0
   1ac90:	b340      	cbz	r0, 1ace4 <bt_att_create_pdu+0x60>
	return list->head;
   1ac92:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ac94:	b344      	cbz	r4, 1ace8 <bt_att_create_pdu+0x64>
   1ac96:	f5b4 74aa 	subs.w	r4, r4, #340	; 0x154
   1ac9a:	d027      	beq.n	1acec <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ac9c:	f514 70aa 	adds.w	r0, r4, #340	; 0x154
   1aca0:	d008      	beq.n	1acb4 <bt_att_create_pdu+0x30>
	return node->next;
   1aca2:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   1aca6:	b128      	cbz	r0, 1acb4 <bt_att_create_pdu+0x30>
   1aca8:	f5a0 70aa 	sub.w	r0, r0, #340	; 0x154
   1acac:	e002      	b.n	1acb4 <bt_att_create_pdu+0x30>
   1acae:	4603      	mov	r3, r0
   1acb0:	4604      	mov	r4, r0
   1acb2:	4618      	mov	r0, r3
   1acb4:	b1e4      	cbz	r4, 1acf0 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1acb6:	1c6b      	adds	r3, r5, #1
   1acb8:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
   1acbc:	4293      	cmp	r3, r2
   1acbe:	d90b      	bls.n	1acd8 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1acc0:	2800      	cmp	r0, #0
   1acc2:	d0f4      	beq.n	1acae <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1acc4:	f510 73aa 	adds.w	r3, r0, #340	; 0x154
   1acc8:	d0f2      	beq.n	1acb0 <bt_att_create_pdu+0x2c>
	return node->next;
   1acca:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
   1acce:	2b00      	cmp	r3, #0
   1acd0:	d0ee      	beq.n	1acb0 <bt_att_create_pdu+0x2c>
   1acd2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   1acd6:	e7eb      	b.n	1acb0 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   1acd8:	462a      	mov	r2, r5
   1acda:	4631      	mov	r1, r6
   1acdc:	4620      	mov	r0, r4
   1acde:	f7ff fe1b 	bl	1a918 <bt_att_chan_create_pdu>
   1ace2:	4604      	mov	r4, r0
}
   1ace4:	4620      	mov	r0, r4
   1ace6:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ace8:	4620      	mov	r0, r4
   1acea:	e7e3      	b.n	1acb4 <bt_att_create_pdu+0x30>
   1acec:	4620      	mov	r0, r4
   1acee:	e7e1      	b.n	1acb4 <bt_att_create_pdu+0x30>
   1acf0:	4b08      	ldr	r3, [pc, #32]	; (1ad14 <bt_att_create_pdu+0x90>)
   1acf2:	4a09      	ldr	r2, [pc, #36]	; (1ad18 <bt_att_create_pdu+0x94>)
   1acf4:	1a9b      	subs	r3, r3, r2
   1acf6:	08db      	lsrs	r3, r3, #3
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1acf8:	f04f 0200 	mov.w	r2, #0
   1acfc:	2102      	movs	r1, #2
   1acfe:	f361 0202 	bfi	r2, r1, #0, #3
   1ad02:	f36f 02c5 	bfc	r2, #3, #3
   1ad06:	f363 128f 	bfi	r2, r3, #6, #10
   1ad0a:	1c69      	adds	r1, r5, #1
   1ad0c:	4803      	ldr	r0, [pc, #12]	; (1ad1c <bt_att_create_pdu+0x98>)
   1ad0e:	f7f8 fdf7 	bl	13900 <log_1>
	return NULL;
   1ad12:	e7e7      	b.n	1ace4 <bt_att_create_pdu+0x60>
   1ad14:	00031918 	.word	0x00031918
   1ad18:	00031908 	.word	0x00031908
   1ad1c:	000345a8 	.word	0x000345a8

0001ad20 <att_read_group_rsp>:
{
   1ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad24:	b08a      	sub	sp, #40	; 0x28
   1ad26:	4605      	mov	r5, r0
   1ad28:	4688      	mov	r8, r1
   1ad2a:	4616      	mov	r6, r2
   1ad2c:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1ad2e:	2400      	movs	r4, #0
   1ad30:	9405      	str	r4, [sp, #20]
   1ad32:	9406      	str	r4, [sp, #24]
   1ad34:	9407      	str	r4, [sp, #28]
   1ad36:	9408      	str	r4, [sp, #32]
   1ad38:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1ad3a:	2201      	movs	r2, #1
   1ad3c:	2111      	movs	r1, #17
   1ad3e:	6880      	ldr	r0, [r0, #8]
   1ad40:	f7ff ffa0 	bl	1ac84 <bt_att_create_pdu>
   1ad44:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1ad46:	b358      	cbz	r0, 1ada0 <att_read_group_rsp+0x80>
	data.chan = chan;
   1ad48:	9505      	str	r5, [sp, #20]
	data.uuid = uuid;
   1ad4a:	f8cd 8018 	str.w	r8, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1ad4e:	2101      	movs	r1, #1
   1ad50:	3008      	adds	r0, #8
   1ad52:	f001 feb9 	bl	1cac8 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1ad56:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1ad58:	4622      	mov	r2, r4
   1ad5a:	7004      	strb	r4, [r0, #0]
	data.group = NULL;
   1ad5c:	9409      	str	r4, [sp, #36]	; 0x24
   1ad5e:	ab05      	add	r3, sp, #20
   1ad60:	9302      	str	r3, [sp, #8]
   1ad62:	4b10      	ldr	r3, [pc, #64]	; (1ada4 <att_read_group_rsp+0x84>)
   1ad64:	9301      	str	r3, [sp, #4]
   1ad66:	9400      	str	r4, [sp, #0]
   1ad68:	4623      	mov	r3, r4
   1ad6a:	4639      	mov	r1, r7
   1ad6c:	4630      	mov	r0, r6
   1ad6e:	f000 fe0f 	bl	1b990 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1ad72:	9b08      	ldr	r3, [sp, #32]
   1ad74:	781c      	ldrb	r4, [r3, #0]
   1ad76:	b14c      	cbz	r4, 1ad8c <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1ad78:	4a0b      	ldr	r2, [pc, #44]	; (1ada8 <att_read_group_rsp+0x88>)
   1ad7a:	9907      	ldr	r1, [sp, #28]
   1ad7c:	4628      	mov	r0, r5
   1ad7e:	f013 f99c 	bl	2e0ba <bt_att_chan_send_rsp>
	return 0;
   1ad82:	2400      	movs	r4, #0
}
   1ad84:	4620      	mov	r0, r4
   1ad86:	b00a      	add	sp, #40	; 0x28
   1ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   1ad8c:	9807      	ldr	r0, [sp, #28]
   1ad8e:	f001 fd69 	bl	1c864 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1ad92:	230a      	movs	r3, #10
   1ad94:	4632      	mov	r2, r6
   1ad96:	2110      	movs	r1, #16
   1ad98:	4628      	mov	r0, r5
   1ad9a:	f7ff fe13 	bl	1a9c4 <send_err_rsp>
		return 0;
   1ad9e:	e7f1      	b.n	1ad84 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1ada0:	240e      	movs	r4, #14
   1ada2:	e7ef      	b.n	1ad84 <att_read_group_rsp+0x64>
   1ada4:	0001a581 	.word	0x0001a581
   1ada8:	0002df0f 	.word	0x0002df0f

0001adac <att_read_mult_req>:
{
   1adac:	b570      	push	{r4, r5, r6, lr}
   1adae:	b088      	sub	sp, #32
   1adb0:	4606      	mov	r6, r0
   1adb2:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1adb4:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   1adb6:	2101      	movs	r1, #1
   1adb8:	4620      	mov	r0, r4
   1adba:	f013 ff94 	bl	2ece6 <bt_gatt_change_aware>
   1adbe:	2800      	cmp	r0, #0
   1adc0:	d037      	beq.n	1ae32 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   1adc2:	2200      	movs	r2, #0
   1adc4:	9204      	str	r2, [sp, #16]
   1adc6:	9205      	str	r2, [sp, #20]
   1adc8:	9206      	str	r2, [sp, #24]
   1adca:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1adcc:	210f      	movs	r1, #15
   1adce:	4620      	mov	r0, r4
   1add0:	f7ff ff58 	bl	1ac84 <bt_att_create_pdu>
   1add4:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1add6:	b378      	cbz	r0, 1ae38 <att_read_mult_req+0x8c>
	data.chan = chan;
   1add8:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1adda:	89ab      	ldrh	r3, [r5, #12]
   1addc:	2b01      	cmp	r3, #1
   1adde:	d921      	bls.n	1ae24 <att_read_mult_req+0x78>
	return net_buf_simple_pull_le16(&buf->b);
   1ade0:	f105 0008 	add.w	r0, r5, #8
   1ade4:	f014 f84b 	bl	2ee7e <net_buf_simple_pull_le16>
   1ade8:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1adea:	2301      	movs	r3, #1
   1adec:	f88d 301c 	strb.w	r3, [sp, #28]
   1adf0:	ab04      	add	r3, sp, #16
   1adf2:	9302      	str	r3, [sp, #8]
   1adf4:	4b11      	ldr	r3, [pc, #68]	; (1ae3c <att_read_mult_req+0x90>)
   1adf6:	9301      	str	r3, [sp, #4]
   1adf8:	2200      	movs	r2, #0
   1adfa:	9200      	str	r2, [sp, #0]
   1adfc:	4613      	mov	r3, r2
   1adfe:	4601      	mov	r1, r0
   1ae00:	f000 fdc6 	bl	1b990 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1ae04:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1ae08:	2b00      	cmp	r3, #0
   1ae0a:	d0e6      	beq.n	1adda <att_read_mult_req+0x2e>
			net_buf_unref(data.buf);
   1ae0c:	9806      	ldr	r0, [sp, #24]
   1ae0e:	f001 fd29 	bl	1c864 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1ae12:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1ae16:	4622      	mov	r2, r4
   1ae18:	210e      	movs	r1, #14
   1ae1a:	4630      	mov	r0, r6
   1ae1c:	f7ff fdd2 	bl	1a9c4 <send_err_rsp>
			return 0;
   1ae20:	2000      	movs	r0, #0
   1ae22:	e007      	b.n	1ae34 <att_read_mult_req+0x88>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1ae24:	4a06      	ldr	r2, [pc, #24]	; (1ae40 <att_read_mult_req+0x94>)
   1ae26:	9906      	ldr	r1, [sp, #24]
   1ae28:	4630      	mov	r0, r6
   1ae2a:	f013 f946 	bl	2e0ba <bt_att_chan_send_rsp>
	return 0;
   1ae2e:	2000      	movs	r0, #0
   1ae30:	e000      	b.n	1ae34 <att_read_mult_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ae32:	2012      	movs	r0, #18
}
   1ae34:	b008      	add	sp, #32
   1ae36:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   1ae38:	200e      	movs	r0, #14
   1ae3a:	e7fb      	b.n	1ae34 <att_read_mult_req+0x88>
   1ae3c:	0002e22b 	.word	0x0002e22b
   1ae40:	0002df0f 	.word	0x0002df0f

0001ae44 <att_read_rsp>:
{
   1ae44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae48:	b088      	sub	sp, #32
   1ae4a:	4604      	mov	r4, r0
   1ae4c:	4688      	mov	r8, r1
   1ae4e:	4616      	mov	r6, r2
   1ae50:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1ae52:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   1ae54:	2101      	movs	r1, #1
   1ae56:	4638      	mov	r0, r7
   1ae58:	f013 ff45 	bl	2ece6 <bt_gatt_change_aware>
   1ae5c:	2800      	cmp	r0, #0
   1ae5e:	d038      	beq.n	1aed2 <att_read_rsp+0x8e>
	if (!handle) {
   1ae60:	b925      	cbnz	r5, 1ae6c <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   1ae62:	2601      	movs	r6, #1
}
   1ae64:	4630      	mov	r0, r6
   1ae66:	b008      	add	sp, #32
   1ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   1ae6c:	2200      	movs	r2, #0
   1ae6e:	9204      	str	r2, [sp, #16]
   1ae70:	9205      	str	r2, [sp, #20]
   1ae72:	9206      	str	r2, [sp, #24]
   1ae74:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1ae76:	4631      	mov	r1, r6
   1ae78:	4638      	mov	r0, r7
   1ae7a:	f7ff ff03 	bl	1ac84 <bt_att_create_pdu>
   1ae7e:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1ae80:	b348      	cbz	r0, 1aed6 <att_read_rsp+0x92>
	data.chan = chan;
   1ae82:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1ae84:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1ae88:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ae8c:	2301      	movs	r3, #1
   1ae8e:	f88d 301c 	strb.w	r3, [sp, #28]
   1ae92:	ab04      	add	r3, sp, #16
   1ae94:	9302      	str	r3, [sp, #8]
   1ae96:	4b11      	ldr	r3, [pc, #68]	; (1aedc <att_read_rsp+0x98>)
   1ae98:	9301      	str	r3, [sp, #4]
   1ae9a:	2200      	movs	r2, #0
   1ae9c:	9200      	str	r2, [sp, #0]
   1ae9e:	4613      	mov	r3, r2
   1aea0:	4629      	mov	r1, r5
   1aea2:	4628      	mov	r0, r5
   1aea4:	f000 fd74 	bl	1b990 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1aea8:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1aeac:	b92e      	cbnz	r6, 1aeba <att_read_rsp+0x76>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1aeae:	4a0c      	ldr	r2, [pc, #48]	; (1aee0 <att_read_rsp+0x9c>)
   1aeb0:	9906      	ldr	r1, [sp, #24]
   1aeb2:	4620      	mov	r0, r4
   1aeb4:	f013 f901 	bl	2e0ba <bt_att_chan_send_rsp>
	return 0;
   1aeb8:	e7d4      	b.n	1ae64 <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   1aeba:	9806      	ldr	r0, [sp, #24]
   1aebc:	f001 fcd2 	bl	1c864 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1aec0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1aec4:	462a      	mov	r2, r5
   1aec6:	4641      	mov	r1, r8
   1aec8:	4620      	mov	r0, r4
   1aeca:	f7ff fd7b 	bl	1a9c4 <send_err_rsp>
		return 0;
   1aece:	2600      	movs	r6, #0
   1aed0:	e7c8      	b.n	1ae64 <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1aed2:	2612      	movs	r6, #18
   1aed4:	e7c6      	b.n	1ae64 <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   1aed6:	260e      	movs	r6, #14
   1aed8:	e7c4      	b.n	1ae64 <att_read_rsp+0x20>
   1aeda:	bf00      	nop
   1aedc:	0002e22b 	.word	0x0002e22b
   1aee0:	0002df0f 	.word	0x0002df0f

0001aee4 <att_read_type_rsp>:
{
   1aee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aee8:	b08a      	sub	sp, #40	; 0x28
   1aeea:	4605      	mov	r5, r0
   1aeec:	4688      	mov	r8, r1
   1aeee:	4616      	mov	r6, r2
   1aef0:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1aef2:	2400      	movs	r4, #0
   1aef4:	9404      	str	r4, [sp, #16]
   1aef6:	9405      	str	r4, [sp, #20]
   1aef8:	9406      	str	r4, [sp, #24]
   1aefa:	9407      	str	r4, [sp, #28]
   1aefc:	9408      	str	r4, [sp, #32]
   1aefe:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1af00:	2201      	movs	r2, #1
   1af02:	2109      	movs	r1, #9
   1af04:	6880      	ldr	r0, [r0, #8]
   1af06:	f7ff febd 	bl	1ac84 <bt_att_create_pdu>
   1af0a:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1af0c:	b370      	cbz	r0, 1af6c <att_read_type_rsp+0x88>
	data.chan = chan;
   1af0e:	9504      	str	r5, [sp, #16]
	data.uuid = uuid;
   1af10:	f8cd 8014 	str.w	r8, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1af14:	2101      	movs	r1, #1
   1af16:	3008      	adds	r0, #8
   1af18:	f001 fdd6 	bl	1cac8 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1af1c:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1af1e:	4622      	mov	r2, r4
   1af20:	7004      	strb	r4, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1af22:	230a      	movs	r3, #10
   1af24:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1af28:	ab04      	add	r3, sp, #16
   1af2a:	9302      	str	r3, [sp, #8]
   1af2c:	4b10      	ldr	r3, [pc, #64]	; (1af70 <att_read_type_rsp+0x8c>)
   1af2e:	9301      	str	r3, [sp, #4]
   1af30:	9400      	str	r4, [sp, #0]
   1af32:	4623      	mov	r3, r4
   1af34:	4639      	mov	r1, r7
   1af36:	4630      	mov	r0, r6
   1af38:	f000 fd2a 	bl	1b990 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1af3c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   1af40:	b944      	cbnz	r4, 1af54 <att_read_type_rsp+0x70>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1af42:	4a0c      	ldr	r2, [pc, #48]	; (1af74 <att_read_type_rsp+0x90>)
   1af44:	9906      	ldr	r1, [sp, #24]
   1af46:	4628      	mov	r0, r5
   1af48:	f013 f8b7 	bl	2e0ba <bt_att_chan_send_rsp>
}
   1af4c:	4620      	mov	r0, r4
   1af4e:	b00a      	add	sp, #40	; 0x28
   1af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   1af54:	9806      	ldr	r0, [sp, #24]
   1af56:	f001 fc85 	bl	1c864 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1af5a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1af5e:	4632      	mov	r2, r6
   1af60:	2108      	movs	r1, #8
   1af62:	4628      	mov	r0, r5
   1af64:	f7ff fd2e 	bl	1a9c4 <send_err_rsp>
		return 0;
   1af68:	2400      	movs	r4, #0
   1af6a:	e7ef      	b.n	1af4c <att_read_type_rsp+0x68>
		return BT_ATT_ERR_UNLIKELY;
   1af6c:	240e      	movs	r4, #14
   1af6e:	e7ed      	b.n	1af4c <att_read_type_rsp+0x68>
   1af70:	0001a635 	.word	0x0001a635
   1af74:	0002df0f 	.word	0x0002df0f

0001af78 <att_find_type_rsp>:
{
   1af78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af7a:	b08b      	sub	sp, #44	; 0x2c
   1af7c:	4604      	mov	r4, r0
   1af7e:	460d      	mov	r5, r1
   1af80:	4616      	mov	r6, r2
   1af82:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1af84:	2200      	movs	r2, #0
   1af86:	9205      	str	r2, [sp, #20]
   1af88:	9206      	str	r2, [sp, #24]
   1af8a:	9207      	str	r2, [sp, #28]
   1af8c:	9208      	str	r2, [sp, #32]
   1af8e:	9209      	str	r2, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1af90:	2107      	movs	r1, #7
   1af92:	6880      	ldr	r0, [r0, #8]
   1af94:	f7ff fe76 	bl	1ac84 <bt_att_create_pdu>
   1af98:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1af9a:	b358      	cbz	r0, 1aff4 <att_find_type_rsp+0x7c>
	data.chan = chan;
   1af9c:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1af9e:	2200      	movs	r2, #0
   1afa0:	9207      	str	r2, [sp, #28]
	data.value = value;
   1afa2:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1afa4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1afa8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1afac:	230a      	movs	r3, #10
   1afae:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1afb2:	ab05      	add	r3, sp, #20
   1afb4:	9302      	str	r3, [sp, #8]
   1afb6:	4b10      	ldr	r3, [pc, #64]	; (1aff8 <att_find_type_rsp+0x80>)
   1afb8:	9301      	str	r3, [sp, #4]
   1afba:	9200      	str	r2, [sp, #0]
   1afbc:	4613      	mov	r3, r2
   1afbe:	4631      	mov	r1, r6
   1afc0:	4628      	mov	r0, r5
   1afc2:	f000 fce5 	bl	1b990 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1afc6:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1afca:	b93e      	cbnz	r6, 1afdc <att_find_type_rsp+0x64>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1afcc:	4a0b      	ldr	r2, [pc, #44]	; (1affc <att_find_type_rsp+0x84>)
   1afce:	9906      	ldr	r1, [sp, #24]
   1afd0:	4620      	mov	r0, r4
   1afd2:	f013 f872 	bl	2e0ba <bt_att_chan_send_rsp>
}
   1afd6:	4630      	mov	r0, r6
   1afd8:	b00b      	add	sp, #44	; 0x2c
   1afda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   1afdc:	9806      	ldr	r0, [sp, #24]
   1afde:	f001 fc41 	bl	1c864 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1afe2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1afe6:	462a      	mov	r2, r5
   1afe8:	2106      	movs	r1, #6
   1afea:	4620      	mov	r0, r4
   1afec:	f7ff fcea 	bl	1a9c4 <send_err_rsp>
		return 0;
   1aff0:	2600      	movs	r6, #0
   1aff2:	e7f0      	b.n	1afd6 <att_find_type_rsp+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   1aff4:	260e      	movs	r6, #14
   1aff6:	e7ee      	b.n	1afd6 <att_find_type_rsp+0x5e>
   1aff8:	0001a6e1 	.word	0x0001a6e1
   1affc:	0002df0f 	.word	0x0002df0f

0001b000 <att_find_info_rsp>:
{
   1b000:	b570      	push	{r4, r5, r6, lr}
   1b002:	b088      	sub	sp, #32
   1b004:	4604      	mov	r4, r0
   1b006:	460e      	mov	r6, r1
   1b008:	4615      	mov	r5, r2
	(void)memset(&data, 0, sizeof(data));
   1b00a:	2200      	movs	r2, #0
   1b00c:	9204      	str	r2, [sp, #16]
   1b00e:	9205      	str	r2, [sp, #20]
   1b010:	9206      	str	r2, [sp, #24]
   1b012:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1b014:	2105      	movs	r1, #5
   1b016:	6880      	ldr	r0, [r0, #8]
   1b018:	f7ff fe34 	bl	1ac84 <bt_att_create_pdu>
   1b01c:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1b01e:	b300      	cbz	r0, 1b062 <att_find_info_rsp+0x62>
	data.chan = chan;
   1b020:	9404      	str	r4, [sp, #16]
   1b022:	ab04      	add	r3, sp, #16
   1b024:	9302      	str	r3, [sp, #8]
   1b026:	4b10      	ldr	r3, [pc, #64]	; (1b068 <att_find_info_rsp+0x68>)
   1b028:	9301      	str	r3, [sp, #4]
   1b02a:	2200      	movs	r2, #0
   1b02c:	9200      	str	r2, [sp, #0]
   1b02e:	4613      	mov	r3, r2
   1b030:	4629      	mov	r1, r5
   1b032:	4630      	mov	r0, r6
   1b034:	f000 fcac 	bl	1b990 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1b038:	9b06      	ldr	r3, [sp, #24]
   1b03a:	b13b      	cbz	r3, 1b04c <att_find_info_rsp+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b03c:	4a0b      	ldr	r2, [pc, #44]	; (1b06c <att_find_info_rsp+0x6c>)
   1b03e:	9905      	ldr	r1, [sp, #20]
   1b040:	4620      	mov	r0, r4
   1b042:	f013 f83a 	bl	2e0ba <bt_att_chan_send_rsp>
	return 0;
   1b046:	2000      	movs	r0, #0
}
   1b048:	b008      	add	sp, #32
   1b04a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(data.buf);
   1b04c:	9805      	ldr	r0, [sp, #20]
   1b04e:	f001 fc09 	bl	1c864 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1b052:	230a      	movs	r3, #10
   1b054:	4632      	mov	r2, r6
   1b056:	2104      	movs	r1, #4
   1b058:	4620      	mov	r0, r4
   1b05a:	f7ff fcb3 	bl	1a9c4 <send_err_rsp>
		return 0;
   1b05e:	2000      	movs	r0, #0
   1b060:	e7f2      	b.n	1b048 <att_find_info_rsp+0x48>
		return BT_ATT_ERR_UNLIKELY;
   1b062:	200e      	movs	r0, #14
   1b064:	e7f0      	b.n	1b048 <att_find_info_rsp+0x48>
   1b066:	bf00      	nop
   1b068:	0002e273 	.word	0x0002e273
   1b06c:	0002df0f 	.word	0x0002df0f

0001b070 <att_mtu_req>:
{
   1b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b072:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1b074:	6803      	ldr	r3, [r0, #0]
   1b076:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b078:	f3bf 8f5b 	dmb	ish
   1b07c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1b080:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b084:	f013 0f08 	tst.w	r3, #8
   1b088:	d122      	bne.n	1b0d0 <att_mtu_req+0x60>
	req = (void *)buf->data;
   1b08a:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   1b08c:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1b08e:	2e16      	cmp	r6, #22
   1b090:	d920      	bls.n	1b0d4 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1b092:	2202      	movs	r2, #2
   1b094:	2103      	movs	r1, #3
   1b096:	f7ff fdf5 	bl	1ac84 <bt_att_create_pdu>
	if (!pdu) {
   1b09a:	4607      	mov	r7, r0
   1b09c:	b1e0      	cbz	r0, 1b0d8 <att_mtu_req+0x68>
   1b09e:	2102      	movs	r1, #2
   1b0a0:	3008      	adds	r0, #8
   1b0a2:	f001 fd11 	bl	1cac8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1b0a6:	2500      	movs	r5, #0
   1b0a8:	2317      	movs	r3, #23
   1b0aa:	7003      	strb	r3, [r0, #0]
   1b0ac:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1b0ae:	4a0b      	ldr	r2, [pc, #44]	; (1b0dc <att_mtu_req+0x6c>)
   1b0b0:	4639      	mov	r1, r7
   1b0b2:	4620      	mov	r0, r4
   1b0b4:	f013 f801 	bl	2e0ba <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b0b8:	2e17      	cmp	r6, #23
   1b0ba:	bf28      	it	cs
   1b0bc:	2617      	movcs	r6, #23
   1b0be:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1b0c2:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1b0c6:	4620      	mov	r0, r4
   1b0c8:	f013 f937 	bl	2e33a <att_chan_mtu_updated>
	return 0;
   1b0cc:	4628      	mov	r0, r5
}
   1b0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1b0d0:	2006      	movs	r0, #6
   1b0d2:	e7fc      	b.n	1b0ce <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   1b0d4:	2004      	movs	r0, #4
   1b0d6:	e7fa      	b.n	1b0ce <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   1b0d8:	200e      	movs	r0, #14
   1b0da:	e7f8      	b.n	1b0ce <att_mtu_req+0x5e>
   1b0dc:	0002df0f 	.word	0x0002df0f

0001b0e0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1b0e0:	b500      	push	{lr}
   1b0e2:	b083      	sub	sp, #12
   1b0e4:	4602      	mov	r2, r0
   1b0e6:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   1b0e8:	2100      	movs	r1, #0
   1b0ea:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1b0ec:	a901      	add	r1, sp, #4
   1b0ee:	4808      	ldr	r0, [pc, #32]	; (1b110 <bt_att_req_alloc+0x30>)
   1b0f0:	f008 fc28 	bl	23944 <k_mem_slab_alloc>
   1b0f4:	b948      	cbnz	r0, 1b10a <bt_att_req_alloc+0x2a>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1b0f6:	9b01      	ldr	r3, [sp, #4]
   1b0f8:	2200      	movs	r2, #0
   1b0fa:	601a      	str	r2, [r3, #0]
   1b0fc:	605a      	str	r2, [r3, #4]
   1b0fe:	609a      	str	r2, [r3, #8]
   1b100:	60da      	str	r2, [r3, #12]

	return req;
   1b102:	9801      	ldr	r0, [sp, #4]
}
   1b104:	b003      	add	sp, #12
   1b106:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1b10a:	2000      	movs	r0, #0
   1b10c:	e7fa      	b.n	1b104 <bt_att_req_alloc+0x24>
   1b10e:	bf00      	nop
   1b110:	20000b74 	.word	0x20000b74

0001b114 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1b114:	b500      	push	{lr}
   1b116:	b083      	sub	sp, #12
   1b118:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1b11a:	6880      	ldr	r0, [r0, #8]
   1b11c:	b120      	cbz	r0, 1b128 <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   1b11e:	f001 fba1 	bl	1c864 <net_buf_unref>
		req->buf = NULL;
   1b122:	9b01      	ldr	r3, [sp, #4]
   1b124:	2200      	movs	r2, #0
   1b126:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1b128:	a901      	add	r1, sp, #4
   1b12a:	4803      	ldr	r0, [pc, #12]	; (1b138 <bt_att_req_free+0x24>)
   1b12c:	f008 fc7e 	bl	23a2c <k_mem_slab_free>
}
   1b130:	b003      	add	sp, #12
   1b132:	f85d fb04 	ldr.w	pc, [sp], #4
   1b136:	bf00      	nop
   1b138:	20000b74 	.word	0x20000b74

0001b13c <att_handle_rsp>:
{
   1b13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b140:	b082      	sub	sp, #8
   1b142:	4604      	mov	r4, r0
   1b144:	460f      	mov	r7, r1
   1b146:	4691      	mov	r9, r2
   1b148:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1b14a:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1b14e:	f00a f85f 	bl	25210 <k_work_cancel_delayable>
	if (!chan->req) {
   1b152:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   1b156:	b1f8      	cbz	r0, 1b198 <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   1b158:	4b1a      	ldr	r3, [pc, #104]	; (1b1c4 <att_handle_rsp+0x88>)
   1b15a:	4298      	cmp	r0, r3
   1b15c:	d02e      	beq.n	1b1bc <att_handle_rsp+0x80>
	func = chan->req->func;
   1b15e:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1b160:	f04f 0a00 	mov.w	sl, #0
   1b164:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1b168:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   1b16c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1b170:	f7ff ffd0 	bl	1b114 <bt_att_req_free>
	chan->req = NULL;
   1b174:	f8c4 a0fc 	str.w	sl, [r4, #252]	; 0xfc
	att_req_send_process(chan->att);
   1b178:	6820      	ldr	r0, [r4, #0]
   1b17a:	f012 fe6a 	bl	2de52 <att_req_send_process>
	if (func) {
   1b17e:	b13d      	cbz	r5, 1b190 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   1b180:	6823      	ldr	r3, [r4, #0]
   1b182:	6818      	ldr	r0, [r3, #0]
   1b184:	f8cd 8000 	str.w	r8, [sp]
   1b188:	464b      	mov	r3, r9
   1b18a:	463a      	mov	r2, r7
   1b18c:	4631      	mov	r1, r6
   1b18e:	47a8      	blx	r5
}
   1b190:	2000      	movs	r0, #0
   1b192:	b002      	add	sp, #8
   1b194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b198:	4b0b      	ldr	r3, [pc, #44]	; (1b1c8 <att_handle_rsp+0x8c>)
   1b19a:	4a0c      	ldr	r2, [pc, #48]	; (1b1cc <att_handle_rsp+0x90>)
   1b19c:	1a9b      	subs	r3, r3, r2
   1b19e:	08db      	lsrs	r3, r3, #3
		BT_WARN("No pending ATT request");
   1b1a0:	f04f 0100 	mov.w	r1, #0
   1b1a4:	2202      	movs	r2, #2
   1b1a6:	f362 0102 	bfi	r1, r2, #0, #3
   1b1aa:	f36f 01c5 	bfc	r1, #3, #3
   1b1ae:	f363 118f 	bfi	r1, r3, #6, #10
   1b1b2:	4807      	ldr	r0, [pc, #28]	; (1b1d0 <att_handle_rsp+0x94>)
   1b1b4:	f7f8 fb74 	bl	138a0 <log_0>
	bt_att_func_t func = NULL;
   1b1b8:	2500      	movs	r5, #0
		goto process;
   1b1ba:	e7dd      	b.n	1b178 <att_handle_rsp+0x3c>
		chan->req = NULL;
   1b1bc:	2500      	movs	r5, #0
   1b1be:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
		goto process;
   1b1c2:	e7d9      	b.n	1b178 <att_handle_rsp+0x3c>
   1b1c4:	20002e10 	.word	0x20002e10
   1b1c8:	00031918 	.word	0x00031918
   1b1cc:	00031908 	.word	0x00031908
   1b1d0:	000345c4 	.word	0x000345c4

0001b1d4 <att_reset>:
{
   1b1d4:	b530      	push	{r4, r5, lr}
   1b1d6:	b085      	sub	sp, #20
   1b1d8:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1b1da:	2200      	movs	r2, #0
   1b1dc:	2300      	movs	r3, #0
   1b1de:	9803      	ldr	r0, [sp, #12]
   1b1e0:	300c      	adds	r0, #12
   1b1e2:	f001 faa7 	bl	1c734 <net_buf_get>
   1b1e6:	4603      	mov	r3, r0
   1b1e8:	b118      	cbz	r0, 1b1f2 <att_reset+0x1e>
		net_buf_unref(buf);
   1b1ea:	4618      	mov	r0, r3
   1b1ec:	f001 fb3a 	bl	1c864 <net_buf_unref>
   1b1f0:	e7f3      	b.n	1b1da <att_reset+0x6>
	att->conn = NULL;
   1b1f2:	9b03      	ldr	r3, [sp, #12]
   1b1f4:	2200      	movs	r2, #0
   1b1f6:	601a      	str	r2, [r3, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   1b1f8:	e004      	b.n	1b204 <att_reset+0x30>
	list->tail = node;
   1b1fa:	609a      	str	r2, [r3, #8]
}
   1b1fc:	e00a      	b.n	1b214 <att_reset+0x40>
		bt_att_req_free(req);
   1b1fe:	4620      	mov	r0, r4
   1b200:	f7ff ff88 	bl	1b114 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   1b204:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1b206:	685c      	ldr	r4, [r3, #4]
   1b208:	b17c      	cbz	r4, 1b22a <att_reset+0x56>
	return node->next;
   1b20a:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   1b20c:	605a      	str	r2, [r3, #4]
	return list->tail;
   1b20e:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b210:	42a1      	cmp	r1, r4
   1b212:	d0f2      	beq.n	1b1fa <att_reset+0x26>
		if (req->func) {
   1b214:	6865      	ldr	r5, [r4, #4]
   1b216:	2d00      	cmp	r5, #0
   1b218:	d0f1      	beq.n	1b1fe <att_reset+0x2a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1b21a:	68e3      	ldr	r3, [r4, #12]
   1b21c:	9300      	str	r3, [sp, #0]
   1b21e:	2300      	movs	r3, #0
   1b220:	461a      	mov	r2, r3
   1b222:	210e      	movs	r1, #14
   1b224:	4618      	mov	r0, r3
   1b226:	47a8      	blx	r5
   1b228:	e7e9      	b.n	1b1fe <att_reset+0x2a>
	k_mem_slab_free(&att_slab, (void **)&att);
   1b22a:	a903      	add	r1, sp, #12
   1b22c:	4802      	ldr	r0, [pc, #8]	; (1b238 <att_reset+0x64>)
   1b22e:	f008 fbfd 	bl	23a2c <k_mem_slab_free>
}
   1b232:	b005      	add	sp, #20
   1b234:	bd30      	pop	{r4, r5, pc}
   1b236:	bf00      	nop
   1b238:	20000b34 	.word	0x20000b34

0001b23c <att_timeout>:
{
   1b23c:	b510      	push	{r4, lr}
   1b23e:	4604      	mov	r4, r0
   1b240:	4b0a      	ldr	r3, [pc, #40]	; (1b26c <att_timeout+0x30>)
   1b242:	4a0b      	ldr	r2, [pc, #44]	; (1b270 <att_timeout+0x34>)
   1b244:	1a9b      	subs	r3, r3, r2
   1b246:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
   1b248:	f04f 0100 	mov.w	r1, #0
   1b24c:	2201      	movs	r2, #1
   1b24e:	f362 0102 	bfi	r1, r2, #0, #3
   1b252:	f36f 01c5 	bfc	r1, #3, #3
   1b256:	f363 118f 	bfi	r1, r3, #6, #10
   1b25a:	4806      	ldr	r0, [pc, #24]	; (1b274 <att_timeout+0x38>)
   1b25c:	f7f8 fb20 	bl	138a0 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   1b260:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
   1b264:	f013 fa1f 	bl	2e6a6 <bt_att_disconnected>
}
   1b268:	bd10      	pop	{r4, pc}
   1b26a:	bf00      	nop
   1b26c:	00031918 	.word	0x00031918
   1b270:	00031908 	.word	0x00031908
   1b274:	000345dc 	.word	0x000345dc

0001b278 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b27c:	b082      	sub	sp, #8
   1b27e:	460c      	mov	r4, r1
   1b280:	4615      	mov	r5, r2
   1b282:	461f      	mov	r7, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1b284:	4606      	mov	r6, r0
   1b286:	b180      	cbz	r0, 1b2aa <bt_att_send+0x32>
	__ASSERT_NO_MSG(buf);
   1b288:	b1f4      	cbz	r4, 1b2c8 <bt_att_send+0x50>

	att = att_get(conn);
   1b28a:	4630      	mov	r0, r6
   1b28c:	f7fe ffb8 	bl	1a200 <att_get>
	if (!att) {
   1b290:	4680      	mov	r8, r0
   1b292:	b340      	cbz	r0, 1b2e6 <bt_att_send+0x6e>
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
   1b294:	b36d      	cbz	r5, 1b2f2 <bt_att_send+0x7a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1b296:	9700      	str	r7, [sp, #0]
   1b298:	462b      	mov	r3, r5
   1b29a:	4622      	mov	r2, r4
   1b29c:	2104      	movs	r1, #4
   1b29e:	4630      	mov	r0, r6
   1b2a0:	f012 fc18 	bl	2dad4 <bt_l2cap_send_cb>

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1b2a4:	b002      	add	sp, #8
   1b2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(conn);
   1b2aa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1b310 <bt_att_send+0x98>
   1b2ae:	f640 434a 	movw	r3, #3146	; 0xc4a
   1b2b2:	4642      	mov	r2, r8
   1b2b4:	4913      	ldr	r1, [pc, #76]	; (1b304 <bt_att_send+0x8c>)
   1b2b6:	4814      	ldr	r0, [pc, #80]	; (1b308 <bt_att_send+0x90>)
   1b2b8:	f010 ff46 	bl	2c148 <printk>
   1b2bc:	f640 414a 	movw	r1, #3146	; 0xc4a
   1b2c0:	4640      	mov	r0, r8
   1b2c2:	f011 f946 	bl	2c552 <assert_post_action>
   1b2c6:	e7df      	b.n	1b288 <bt_att_send+0x10>
	__ASSERT_NO_MSG(buf);
   1b2c8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1b310 <bt_att_send+0x98>
   1b2cc:	f640 434b 	movw	r3, #3147	; 0xc4b
   1b2d0:	4642      	mov	r2, r8
   1b2d2:	490e      	ldr	r1, [pc, #56]	; (1b30c <bt_att_send+0x94>)
   1b2d4:	480c      	ldr	r0, [pc, #48]	; (1b308 <bt_att_send+0x90>)
   1b2d6:	f010 ff37 	bl	2c148 <printk>
   1b2da:	f640 414b 	movw	r1, #3147	; 0xc4b
   1b2de:	4640      	mov	r0, r8
   1b2e0:	f011 f937 	bl	2c552 <assert_post_action>
   1b2e4:	e7d1      	b.n	1b28a <bt_att_send+0x12>
		net_buf_unref(buf);
   1b2e6:	4620      	mov	r0, r4
   1b2e8:	f001 fabc 	bl	1c864 <net_buf_unref>
		return -ENOTCONN;
   1b2ec:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b2f0:	e7d8      	b.n	1b2a4 <bt_att_send+0x2c>
	net_buf_put(&att->tx_queue, buf);
   1b2f2:	4621      	mov	r1, r4
   1b2f4:	300c      	adds	r0, #12
   1b2f6:	f001 fa7d 	bl	1c7f4 <net_buf_put>
	att_send_process(att);
   1b2fa:	4640      	mov	r0, r8
   1b2fc:	f012 fe72 	bl	2dfe4 <att_send_process>
	return 0;
   1b300:	2000      	movs	r0, #0
   1b302:	e7cf      	b.n	1b2a4 <bt_att_send+0x2c>
   1b304:	000345e8 	.word	0x000345e8
   1b308:	00031df4 	.word	0x00031df4
   1b30c:	00034b64 	.word	0x00034b64
   1b310:	00034440 	.word	0x00034440

0001b314 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1b314:	b570      	push	{r4, r5, r6, lr}
   1b316:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1b318:	4605      	mov	r5, r0
   1b31a:	b180      	cbz	r0, 1b33e <bt_att_req_send+0x2a>
	__ASSERT_NO_MSG(req);
   1b31c:	b1ec      	cbz	r4, 1b35a <bt_att_req_send+0x46>

	att = att_get(conn);
   1b31e:	4628      	mov	r0, r5
   1b320:	f7fe ff6e 	bl	1a200 <att_get>
	if (!att) {
   1b324:	4603      	mov	r3, r0
   1b326:	b348      	cbz	r0, 1b37c <bt_att_req_send+0x68>
	parent->next = child;
   1b328:	2200      	movs	r2, #0
   1b32a:	6022      	str	r2, [r4, #0]
	return list->tail;
   1b32c:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1b32e:	b312      	cbz	r2, 1b376 <bt_att_req_send+0x62>
	parent->next = child;
   1b330:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b332:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1b334:	4618      	mov	r0, r3
   1b336:	f012 fd8c 	bl	2de52 <att_req_send_process>

	return 0;
   1b33a:	2000      	movs	r0, #0
}
   1b33c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(conn);
   1b33e:	4e11      	ldr	r6, [pc, #68]	; (1b384 <bt_att_req_send+0x70>)
   1b340:	f640 4367 	movw	r3, #3175	; 0xc67
   1b344:	4632      	mov	r2, r6
   1b346:	4910      	ldr	r1, [pc, #64]	; (1b388 <bt_att_req_send+0x74>)
   1b348:	4810      	ldr	r0, [pc, #64]	; (1b38c <bt_att_req_send+0x78>)
   1b34a:	f010 fefd 	bl	2c148 <printk>
   1b34e:	f640 4167 	movw	r1, #3175	; 0xc67
   1b352:	4630      	mov	r0, r6
   1b354:	f011 f8fd 	bl	2c552 <assert_post_action>
   1b358:	e7e0      	b.n	1b31c <bt_att_req_send+0x8>
	__ASSERT_NO_MSG(req);
   1b35a:	4e0a      	ldr	r6, [pc, #40]	; (1b384 <bt_att_req_send+0x70>)
   1b35c:	f640 4368 	movw	r3, #3176	; 0xc68
   1b360:	4632      	mov	r2, r6
   1b362:	490b      	ldr	r1, [pc, #44]	; (1b390 <bt_att_req_send+0x7c>)
   1b364:	4809      	ldr	r0, [pc, #36]	; (1b38c <bt_att_req_send+0x78>)
   1b366:	f010 feef 	bl	2c148 <printk>
   1b36a:	f640 4168 	movw	r1, #3176	; 0xc68
   1b36e:	4630      	mov	r0, r6
   1b370:	f011 f8ef 	bl	2c552 <assert_post_action>
   1b374:	e7d3      	b.n	1b31e <bt_att_req_send+0xa>
   1b376:	6084      	str	r4, [r0, #8]
	list->head = node;
   1b378:	6044      	str	r4, [r0, #4]
}
   1b37a:	e7db      	b.n	1b334 <bt_att_req_send+0x20>
		return -ENOTCONN;
   1b37c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b380:	e7dc      	b.n	1b33c <bt_att_req_send+0x28>
   1b382:	bf00      	nop
   1b384:	00034440 	.word	0x00034440
   1b388:	000345e8 	.word	0x000345e8
   1b38c:	00031df4 	.word	0x00031df4
   1b390:	00034478 	.word	0x00034478

0001b394 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1b394:	b570      	push	{r4, r5, r6, lr}
   1b396:	b082      	sub	sp, #8
   1b398:	4606      	mov	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1b39a:	2400      	movs	r4, #0
   1b39c:	2c00      	cmp	r4, #0
   1b39e:	dd03      	ble.n	1b3a8 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
			return cfg;
		}
	}

	return NULL;
   1b3a0:	2500      	movs	r5, #0
}
   1b3a2:	4628      	mov	r0, r5
   1b3a4:	b002      	add	sp, #8
   1b3a6:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1b3a8:	4d0e      	ldr	r5, [pc, #56]	; (1b3e4 <find_cf_cfg+0x50>)
   1b3aa:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1b3ae:	b166      	cbz	r6, 1b3ca <find_cf_cfg+0x36>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b3b0:	490c      	ldr	r1, [pc, #48]	; (1b3e4 <find_cf_cfg+0x50>)
   1b3b2:	0123      	lsls	r3, r4, #4
   1b3b4:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1b3b8:	3201      	adds	r2, #1
   1b3ba:	5cc9      	ldrb	r1, [r1, r3]
   1b3bc:	4630      	mov	r0, r6
   1b3be:	f012 fabc 	bl	2d93a <bt_conn_is_peer_addr_le>
   1b3c2:	2800      	cmp	r0, #0
   1b3c4:	d1ed      	bne.n	1b3a2 <find_cf_cfg+0xe>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1b3c6:	3401      	adds	r4, #1
   1b3c8:	e7e8      	b.n	1b39c <find_cf_cfg+0x8>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b3ca:	4628      	mov	r0, r5
   1b3cc:	2300      	movs	r3, #0
   1b3ce:	9300      	str	r3, [sp, #0]
   1b3d0:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1b3d4:	2207      	movs	r2, #7
   1b3d6:	4669      	mov	r1, sp
   1b3d8:	3001      	adds	r0, #1
   1b3da:	f015 fa5b 	bl	30894 <memcmp>
   1b3de:	2800      	cmp	r0, #0
   1b3e0:	d1f1      	bne.n	1b3c6 <find_cf_cfg+0x32>
   1b3e2:	e7de      	b.n	1b3a2 <find_cf_cfg+0xe>
   1b3e4:	20002e28 	.word	0x20002e28

0001b3e8 <find_sc_cfg>:
{
   1b3e8:	b570      	push	{r4, r5, r6, lr}
   1b3ea:	4606      	mov	r6, r0
   1b3ec:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b3ee:	2400      	movs	r4, #0
   1b3f0:	b10c      	cbz	r4, 1b3f6 <find_sc_cfg+0xe>
	return NULL;
   1b3f2:	2000      	movs	r0, #0
}
   1b3f4:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   1b3f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b3fa:	4a0c      	ldr	r2, [pc, #48]	; (1b42c <find_sc_cfg+0x44>)
   1b3fc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1b400:	429e      	cmp	r6, r3
   1b402:	d001      	beq.n	1b408 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b404:	3401      	adds	r4, #1
   1b406:	e7f3      	b.n	1b3f0 <find_sc_cfg+0x8>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1b408:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1b40c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1b410:	2207      	movs	r2, #7
   1b412:	4629      	mov	r1, r5
   1b414:	3001      	adds	r0, #1
   1b416:	f015 fa3d 	bl	30894 <memcmp>
		if (id == sc_cfg[i].id &&
   1b41a:	2800      	cmp	r0, #0
   1b41c:	d1f2      	bne.n	1b404 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   1b41e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b422:	4802      	ldr	r0, [pc, #8]	; (1b42c <find_sc_cfg+0x44>)
   1b424:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1b428:	e7e4      	b.n	1b3f4 <find_sc_cfg+0xc>
   1b42a:	bf00      	nop
   1b42c:	20002e3c 	.word	0x20002e3c

0001b430 <sc_clear>:
{
   1b430:	b538      	push	{r3, r4, r5, lr}
   1b432:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b434:	f100 0590 	add.w	r5, r0, #144	; 0x90
   1b438:	4629      	mov	r1, r5
   1b43a:	7a00      	ldrb	r0, [r0, #8]
   1b43c:	f011 ff70 	bl	2d320 <bt_addr_le_is_bonded>
   1b440:	b1b8      	cbz	r0, 1b472 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1b442:	4629      	mov	r1, r5
   1b444:	7a20      	ldrb	r0, [r4, #8]
   1b446:	f013 fa54 	bl	2e8f2 <bt_gatt_clear_sc>
		if (err) {
   1b44a:	4601      	mov	r1, r0
   1b44c:	b900      	cbnz	r0, 1b450 <sc_clear+0x20>
}
   1b44e:	bd38      	pop	{r3, r4, r5, pc}
   1b450:	4b0c      	ldr	r3, [pc, #48]	; (1b484 <sc_clear+0x54>)
   1b452:	4a0d      	ldr	r2, [pc, #52]	; (1b488 <sc_clear+0x58>)
   1b454:	1a9b      	subs	r3, r3, r2
   1b456:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear SC %d", err);
   1b458:	f04f 0200 	mov.w	r2, #0
   1b45c:	2001      	movs	r0, #1
   1b45e:	f360 0202 	bfi	r2, r0, #0, #3
   1b462:	f36f 02c5 	bfc	r2, #3, #3
   1b466:	f363 128f 	bfi	r2, r3, #6, #10
   1b46a:	4808      	ldr	r0, [pc, #32]	; (1b48c <sc_clear+0x5c>)
   1b46c:	f7f8 fa48 	bl	13900 <log_1>
   1b470:	e7ed      	b.n	1b44e <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b472:	4629      	mov	r1, r5
   1b474:	7a20      	ldrb	r0, [r4, #8]
   1b476:	f7ff ffb7 	bl	1b3e8 <find_sc_cfg>
		if (cfg) {
   1b47a:	2800      	cmp	r0, #0
   1b47c:	d0e7      	beq.n	1b44e <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   1b47e:	f013 fa33 	bl	2e8e8 <clear_sc_cfg>
}
   1b482:	e7e4      	b.n	1b44e <sc_clear+0x1e>
   1b484:	00031930 	.word	0x00031930
   1b488:	00031908 	.word	0x00031908
   1b48c:	00034660 	.word	0x00034660

0001b490 <bt_gatt_service_init>:
	}
}
#endif

static void bt_gatt_service_init(void)
{
   1b490:	b538      	push	{r3, r4, r5, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b492:	4b17      	ldr	r3, [pc, #92]	; (1b4f0 <bt_gatt_service_init+0x60>)
   1b494:	2201      	movs	r2, #1
   1b496:	f3bf 8f5b 	dmb	ish
   1b49a:	e853 1f00 	ldrex	r1, [r3]
   1b49e:	2900      	cmp	r1, #0
   1b4a0:	d103      	bne.n	1b4aa <bt_gatt_service_init+0x1a>
   1b4a2:	e843 2000 	strex	r0, r2, [r3]
   1b4a6:	2800      	cmp	r0, #0
   1b4a8:	d1f7      	bne.n	1b49a <bt_gatt_service_init+0xa>
   1b4aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1b4ae:	d11e      	bne.n	1b4ee <bt_gatt_service_init+0x5e>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b4b0:	4c10      	ldr	r4, [pc, #64]	; (1b4f4 <bt_gatt_service_init+0x64>)
   1b4b2:	e018      	b.n	1b4e6 <bt_gatt_service_init+0x56>
   1b4b4:	4d10      	ldr	r5, [pc, #64]	; (1b4f8 <bt_gatt_service_init+0x68>)
   1b4b6:	f240 4351 	movw	r3, #1105	; 0x451
   1b4ba:	462a      	mov	r2, r5
   1b4bc:	490f      	ldr	r1, [pc, #60]	; (1b4fc <bt_gatt_service_init+0x6c>)
   1b4be:	4810      	ldr	r0, [pc, #64]	; (1b500 <bt_gatt_service_init+0x70>)
   1b4c0:	f010 fe42 	bl	2c148 <printk>
   1b4c4:	480f      	ldr	r0, [pc, #60]	; (1b504 <bt_gatt_service_init+0x74>)
   1b4c6:	f010 fe3f 	bl	2c148 <printk>
   1b4ca:	f240 4151 	movw	r1, #1105	; 0x451
   1b4ce:	4628      	mov	r0, r5
   1b4d0:	f011 f83f 	bl	2c552 <assert_post_action>
   1b4d4:	4b0c      	ldr	r3, [pc, #48]	; (1b508 <bt_gatt_service_init+0x78>)
   1b4d6:	429c      	cmp	r4, r3
   1b4d8:	d209      	bcs.n	1b4ee <bt_gatt_service_init+0x5e>
		last_static_handle += svc->attr_count;
   1b4da:	6863      	ldr	r3, [r4, #4]
   1b4dc:	4a0b      	ldr	r2, [pc, #44]	; (1b50c <bt_gatt_service_init+0x7c>)
   1b4de:	8811      	ldrh	r1, [r2, #0]
   1b4e0:	440b      	add	r3, r1
   1b4e2:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b4e4:	3408      	adds	r4, #8
   1b4e6:	4b08      	ldr	r3, [pc, #32]	; (1b508 <bt_gatt_service_init+0x78>)
   1b4e8:	429c      	cmp	r4, r3
   1b4ea:	d9f3      	bls.n	1b4d4 <bt_gatt_service_init+0x44>
   1b4ec:	e7e2      	b.n	1b4b4 <bt_gatt_service_init+0x24>
	}
}
   1b4ee:	bd38      	pop	{r3, r4, r5, pc}
   1b4f0:	20002e60 	.word	0x20002e60
   1b4f4:	000318f0 	.word	0x000318f0
   1b4f8:	00034678 	.word	0x00034678
   1b4fc:	000346a8 	.word	0x000346a8
   1b500:	00031df4 	.word	0x00031df4
   1b504:	00033d7c 	.word	0x00033d7c
   1b508:	00031908 	.word	0x00031908
   1b50c:	20003ff0 	.word	0x20003ff0

0001b510 <sc_indicate_rsp>:
{
   1b510:	b510      	push	{r4, lr}
   1b512:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b514:	4b19      	ldr	r3, [pc, #100]	; (1b57c <sc_indicate_rsp+0x6c>)
   1b516:	f103 0250 	add.w	r2, r3, #80	; 0x50
   1b51a:	f3bf 8f5b 	dmb	ish
   1b51e:	e852 1f00 	ldrex	r1, [r2]
   1b522:	f021 0102 	bic.w	r1, r1, #2
   1b526:	e842 1000 	strex	r0, r1, [r2]
   1b52a:	2800      	cmp	r0, #0
   1b52c:	d1f7      	bne.n	1b51e <sc_indicate_rsp+0xe>
   1b52e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b532:	f3bf 8f5b 	dmb	ish
   1b536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b538:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b53c:	f013 0f01 	tst.w	r3, #1
   1b540:	d116      	bne.n	1b570 <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   1b542:	4620      	mov	r0, r4
   1b544:	f7ff ff26 	bl	1b394 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b548:	4603      	mov	r3, r0
   1b54a:	b180      	cbz	r0, 1b56e <sc_indicate_rsp+0x5e>
   1b54c:	7a02      	ldrb	r2, [r0, #8]
   1b54e:	f012 0f01 	tst.w	r2, #1
   1b552:	d00c      	beq.n	1b56e <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1b554:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b556:	f3bf 8f5b 	dmb	ish
   1b55a:	e853 2f00 	ldrex	r2, [r3]
   1b55e:	f042 0201 	orr.w	r2, r2, #1
   1b562:	e843 2100 	strex	r1, r2, [r3]
   1b566:	2900      	cmp	r1, #0
   1b568:	d1f7      	bne.n	1b55a <sc_indicate_rsp+0x4a>
   1b56a:	f3bf 8f5b 	dmb	ish
}
   1b56e:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1b570:	2200      	movs	r2, #0
   1b572:	2300      	movs	r3, #0
   1b574:	4802      	ldr	r0, [pc, #8]	; (1b580 <sc_indicate_rsp+0x70>)
   1b576:	f009 fe43 	bl	25200 <k_work_reschedule>
   1b57a:	e7e2      	b.n	1b542 <sc_indicate_rsp+0x32>
   1b57c:	20002010 	.word	0x20002010
   1b580:	20002030 	.word	0x20002030

0001b584 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1b584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b588:	b083      	sub	sp, #12
   1b58a:	4615      	mov	r5, r2
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b58c:	6882      	ldr	r2, [r0, #8]
   1b58e:	4b30      	ldr	r3, [pc, #192]	; (1b650 <disconnected_cb+0xcc>)
   1b590:	429a      	cmp	r2, r3
   1b592:	d003      	beq.n	1b59c <disconnected_cb+0x18>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1b594:	2001      	movs	r0, #1
   1b596:	b003      	add	sp, #12
   1b598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b59c:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1b59e:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   1b5a0:	897b      	ldrh	r3, [r7, #10]
   1b5a2:	2b00      	cmp	r3, #0
   1b5a4:	d0f6      	beq.n	1b594 <disconnected_cb+0x10>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b5a6:	2600      	movs	r6, #0
	value_used = false;
   1b5a8:	46b1      	mov	r9, r6
   1b5aa:	e021      	b.n	1b5f0 <disconnected_cb+0x6c>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1b5ac:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   1b5b0:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   1b5b4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1b5b8:	b1cb      	cbz	r3, 1b5ee <disconnected_cb+0x6a>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b5ba:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1b5be:	f108 0a01 	add.w	sl, r8, #1
   1b5c2:	4652      	mov	r2, sl
   1b5c4:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1b5c8:	4628      	mov	r0, r5
   1b5ca:	f012 f9b6 	bl	2d93a <bt_conn_is_peer_addr_le>
   1b5ce:	bb00      	cbnz	r0, 1b612 <disconnected_cb+0x8e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1b5d0:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1b5d4:	4651      	mov	r1, sl
   1b5d6:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   1b5da:	f7fe f9ad 	bl	19938 <bt_conn_lookup_addr_le>
			if (tmp) {
   1b5de:	4603      	mov	r3, r0
   1b5e0:	b128      	cbz	r0, 1b5ee <disconnected_cb+0x6a>
				if (tmp->state == BT_CONN_CONNECTED) {
   1b5e2:	7a82      	ldrb	r2, [r0, #10]
   1b5e4:	2a07      	cmp	r2, #7
   1b5e6:	d011      	beq.n	1b60c <disconnected_cb+0x88>
				bt_conn_unref(tmp);
   1b5e8:	4618      	mov	r0, r3
   1b5ea:	f7fd ff29 	bl	19440 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b5ee:	3601      	adds	r6, #1
   1b5f0:	2e00      	cmp	r6, #0
   1b5f2:	d0db      	beq.n	1b5ac <disconnected_cb+0x28>
	if (!value_used) {
   1b5f4:	f1b9 0f00 	cmp.w	r9, #0
   1b5f8:	d1cc      	bne.n	1b594 <disconnected_cb+0x10>
		ccc->value = 0U;
   1b5fa:	2300      	movs	r3, #0
   1b5fc:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   1b5fe:	68fb      	ldr	r3, [r7, #12]
   1b600:	2b00      	cmp	r3, #0
   1b602:	d0c7      	beq.n	1b594 <disconnected_cb+0x10>
			ccc->cfg_changed(attr, ccc->value);
   1b604:	2100      	movs	r1, #0
   1b606:	4620      	mov	r0, r4
   1b608:	4798      	blx	r3
   1b60a:	e7c3      	b.n	1b594 <disconnected_cb+0x10>
					value_used = true;
   1b60c:	f04f 0901 	mov.w	r9, #1
   1b610:	e7ea      	b.n	1b5e8 <disconnected_cb+0x64>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b612:	f105 0390 	add.w	r3, r5, #144	; 0x90
   1b616:	9301      	str	r3, [sp, #4]
   1b618:	4619      	mov	r1, r3
   1b61a:	7a28      	ldrb	r0, [r5, #8]
   1b61c:	f011 fe80 	bl	2d320 <bt_addr_le_is_bonded>
   1b620:	b950      	cbnz	r0, 1b638 <disconnected_cb+0xb4>
				if (ccc == &sc_ccc) {
   1b622:	4b0c      	ldr	r3, [pc, #48]	; (1b654 <disconnected_cb+0xd0>)
   1b624:	429f      	cmp	r7, r3
   1b626:	d003      	beq.n	1b630 <disconnected_cb+0xac>
				clear_ccc_cfg(cfg);
   1b628:	4640      	mov	r0, r8
   1b62a:	f013 f9ca 	bl	2e9c2 <clear_ccc_cfg>
   1b62e:	e7de      	b.n	1b5ee <disconnected_cb+0x6a>
					sc_clear(conn);
   1b630:	4628      	mov	r0, r5
   1b632:	f7ff fefd 	bl	1b430 <sc_clear>
   1b636:	e7f7      	b.n	1b628 <disconnected_cb+0xa4>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b638:	9a01      	ldr	r2, [sp, #4]
   1b63a:	6813      	ldr	r3, [r2, #0]
   1b63c:	f8c8 3001 	str.w	r3, [r8, #1]
   1b640:	4613      	mov	r3, r2
   1b642:	8892      	ldrh	r2, [r2, #4]
   1b644:	799b      	ldrb	r3, [r3, #6]
   1b646:	f8aa 2004 	strh.w	r2, [sl, #4]
   1b64a:	f88a 3006 	strb.w	r3, [sl, #6]
}
   1b64e:	e7ce      	b.n	1b5ee <disconnected_cb+0x6a>
   1b650:	0001b7a1 	.word	0x0001b7a1
   1b654:	200006ac 	.word	0x200006ac

0001b658 <cf_write>:
{
   1b658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b65c:	461d      	mov	r5, r3
   1b65e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1b662:	2b01      	cmp	r3, #1
   1b664:	d843      	bhi.n	1b6ee <cf_write+0x96>
   1b666:	4606      	mov	r6, r0
   1b668:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   1b66a:	462f      	mov	r7, r5
   1b66c:	442b      	add	r3, r5
   1b66e:	2b01      	cmp	r3, #1
   1b670:	d840      	bhi.n	1b6f4 <cf_write+0x9c>
	cfg = find_cf_cfg(conn);
   1b672:	f7ff fe8f 	bl	1b394 <find_cf_cfg>
	if (!cfg) {
   1b676:	4604      	mov	r4, r0
   1b678:	b310      	cbz	r0, 1b6c0 <cf_write+0x68>
	if (!cfg) {
   1b67a:	b32c      	cbz	r4, 1b6c8 <cf_write+0x70>
	if (!cf_set_value(cfg, value, len)) {
   1b67c:	462a      	mov	r2, r5
   1b67e:	4641      	mov	r1, r8
   1b680:	4620      	mov	r0, r4
   1b682:	f013 f837 	bl	2e6f4 <cf_set_value>
   1b686:	b3c0      	cbz	r0, 1b6fa <cf_write+0xa2>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b688:	4633      	mov	r3, r6
   1b68a:	f853 2f90 	ldr.w	r2, [r3, #144]!
   1b68e:	f8c4 2001 	str.w	r2, [r4, #1]
   1b692:	889a      	ldrh	r2, [r3, #4]
   1b694:	799b      	ldrb	r3, [r3, #6]
   1b696:	f8a4 2005 	strh.w	r2, [r4, #5]
   1b69a:	71e3      	strb	r3, [r4, #7]
	cfg->id = conn->id;
   1b69c:	7a33      	ldrb	r3, [r6, #8]
   1b69e:	f804 3b0c 	strb.w	r3, [r4], #12
   1b6a2:	f3bf 8f5b 	dmb	ish
   1b6a6:	e854 3f00 	ldrex	r3, [r4]
   1b6aa:	f043 0301 	orr.w	r3, r3, #1
   1b6ae:	e844 3200 	strex	r2, r3, [r4]
   1b6b2:	2a00      	cmp	r2, #0
   1b6b4:	d1f7      	bne.n	1b6a6 <cf_write+0x4e>
   1b6b6:	f3bf 8f5b 	dmb	ish
}
   1b6ba:	4638      	mov	r0, r7
   1b6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1b6c0:	f7ff fe68 	bl	1b394 <find_cf_cfg>
   1b6c4:	4604      	mov	r4, r0
   1b6c6:	e7d8      	b.n	1b67a <cf_write+0x22>
   1b6c8:	4b0d      	ldr	r3, [pc, #52]	; (1b700 <cf_write+0xa8>)
   1b6ca:	4a0e      	ldr	r2, [pc, #56]	; (1b704 <cf_write+0xac>)
   1b6cc:	1a9b      	subs	r3, r3, r2
   1b6ce:	08db      	lsrs	r3, r3, #3
		BT_WARN("No space to store Client Supported Features");
   1b6d0:	f04f 0100 	mov.w	r1, #0
   1b6d4:	2202      	movs	r2, #2
   1b6d6:	f362 0102 	bfi	r1, r2, #0, #3
   1b6da:	f36f 01c5 	bfc	r1, #3, #3
   1b6de:	f363 118f 	bfi	r1, r3, #6, #10
   1b6e2:	4809      	ldr	r0, [pc, #36]	; (1b708 <cf_write+0xb0>)
   1b6e4:	f7f8 f8dc 	bl	138a0 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b6e8:	f06f 0710 	mvn.w	r7, #16
   1b6ec:	e7e5      	b.n	1b6ba <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b6ee:	f06f 0706 	mvn.w	r7, #6
   1b6f2:	e7e2      	b.n	1b6ba <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b6f4:	f06f 070c 	mvn.w	r7, #12
   1b6f8:	e7df      	b.n	1b6ba <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1b6fa:	f06f 0712 	mvn.w	r7, #18
   1b6fe:	e7dc      	b.n	1b6ba <cf_write+0x62>
   1b700:	00031930 	.word	0x00031930
   1b704:	00031908 	.word	0x00031908
   1b708:	000346d0 	.word	0x000346d0

0001b70c <sc_save>:
{
   1b70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b710:	b082      	sub	sp, #8
   1b712:	4607      	mov	r7, r0
   1b714:	4688      	mov	r8, r1
   1b716:	4616      	mov	r6, r2
   1b718:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1b71a:	f7ff fe65 	bl	1b3e8 <find_sc_cfg>
	if (!cfg) {
   1b71e:	4604      	mov	r4, r0
   1b720:	b170      	cbz	r0, 1b740 <sc_save+0x34>
	if (!(cfg->data.start || cfg->data.end)) {
   1b722:	8923      	ldrh	r3, [r4, #8]
   1b724:	b90b      	cbnz	r3, 1b72a <sc_save+0x1e>
   1b726:	8963      	ldrh	r3, [r4, #10]
   1b728:	b38b      	cbz	r3, 1b78e <sc_save+0x82>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1b72a:	462b      	mov	r3, r5
   1b72c:	4632      	mov	r2, r6
   1b72e:	f104 010a 	add.w	r1, r4, #10
   1b732:	f104 0008 	add.w	r0, r4, #8
   1b736:	f012 ffc8 	bl	2e6ca <update_range>
}
   1b73a:	b002      	add	sp, #8
   1b73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1b740:	9000      	str	r0, [sp, #0]
   1b742:	f8cd 0003 	str.w	r0, [sp, #3]
   1b746:	4669      	mov	r1, sp
   1b748:	f7ff fe4e 	bl	1b3e8 <find_sc_cfg>
		if (!cfg) {
   1b74c:	4604      	mov	r4, r0
   1b74e:	b168      	cbz	r0, 1b76c <sc_save+0x60>
		cfg->id = id;
   1b750:	4603      	mov	r3, r0
   1b752:	f803 7b01 	strb.w	r7, [r3], #1
   1b756:	f8d8 2000 	ldr.w	r2, [r8]
   1b75a:	f8c0 2001 	str.w	r2, [r0, #1]
   1b75e:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   1b762:	f898 2006 	ldrb.w	r2, [r8, #6]
   1b766:	8099      	strh	r1, [r3, #4]
   1b768:	719a      	strb	r2, [r3, #6]
   1b76a:	e7da      	b.n	1b722 <sc_save+0x16>
   1b76c:	4b09      	ldr	r3, [pc, #36]	; (1b794 <sc_save+0x88>)
   1b76e:	4a0a      	ldr	r2, [pc, #40]	; (1b798 <sc_save+0x8c>)
   1b770:	1a9b      	subs	r3, r3, r2
   1b772:	08db      	lsrs	r3, r3, #3
			BT_ERR("unable to save SC: no cfg left");
   1b774:	f04f 0100 	mov.w	r1, #0
   1b778:	2201      	movs	r2, #1
   1b77a:	f362 0102 	bfi	r1, r2, #0, #3
   1b77e:	f36f 01c5 	bfc	r1, #3, #3
   1b782:	f363 118f 	bfi	r1, r3, #6, #10
   1b786:	4805      	ldr	r0, [pc, #20]	; (1b79c <sc_save+0x90>)
   1b788:	f7f8 f88a 	bl	138a0 <log_0>
			return;
   1b78c:	e7d5      	b.n	1b73a <sc_save+0x2e>
		cfg->data.start = start;
   1b78e:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1b790:	8165      	strh	r5, [r4, #10]
		goto done;
   1b792:	e7d2      	b.n	1b73a <sc_save+0x2e>
   1b794:	00031930 	.word	0x00031930
   1b798:	00031908 	.word	0x00031908
   1b79c:	000346fc 	.word	0x000346fc

0001b7a0 <bt_gatt_attr_write_ccc>:
{
   1b7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b7a4:	461c      	mov	r4, r3
   1b7a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1b7aa:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   1b7ac:	2b00      	cmp	r3, #0
   1b7ae:	d15a      	bne.n	1b866 <bt_gatt_attr_write_ccc+0xc6>
   1b7b0:	4681      	mov	r9, r0
   1b7b2:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   1b7b4:	1e63      	subs	r3, r4, #1
   1b7b6:	b29b      	uxth	r3, r3
   1b7b8:	2b01      	cmp	r3, #1
   1b7ba:	d857      	bhi.n	1b86c <bt_gatt_attr_write_ccc+0xcc>
	if (len < sizeof(uint16_t)) {
   1b7bc:	2c01      	cmp	r4, #1
   1b7be:	d91d      	bls.n	1b7fc <bt_gatt_attr_write_ccc+0x5c>
   1b7c0:	7853      	ldrb	r3, [r2, #1]
   1b7c2:	7815      	ldrb	r5, [r2, #0]
   1b7c4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1b7c8:	4639      	mov	r1, r7
   1b7ca:	4648      	mov	r0, r9
   1b7cc:	f013 f860 	bl	2e890 <find_ccc_cfg>
	if (!cfg) {
   1b7d0:	4680      	mov	r8, r0
   1b7d2:	b1a8      	cbz	r0, 1b800 <bt_gatt_attr_write_ccc+0x60>
	if (ccc->cfg_write) {
   1b7d4:	693b      	ldr	r3, [r7, #16]
   1b7d6:	b143      	cbz	r3, 1b7ea <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1b7d8:	462a      	mov	r2, r5
   1b7da:	4631      	mov	r1, r6
   1b7dc:	4648      	mov	r0, r9
   1b7de:	4798      	blx	r3
		if (write < 0) {
   1b7e0:	2800      	cmp	r0, #0
   1b7e2:	db09      	blt.n	1b7f8 <bt_gatt_attr_write_ccc+0x58>
		if (write != sizeof(value) && write != 1) {
   1b7e4:	3801      	subs	r0, #1
   1b7e6:	2801      	cmp	r0, #1
   1b7e8:	d843      	bhi.n	1b872 <bt_gatt_attr_write_ccc+0xd2>
	cfg->value = value;
   1b7ea:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   1b7ee:	897b      	ldrh	r3, [r7, #10]
   1b7f0:	429d      	cmp	r5, r3
   1b7f2:	d12f      	bne.n	1b854 <bt_gatt_attr_write_ccc+0xb4>
	if (!value) {
   1b7f4:	b39d      	cbz	r5, 1b85e <bt_gatt_attr_write_ccc+0xbe>
	return len;
   1b7f6:	4620      	mov	r0, r4
}
   1b7f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1b7fc:	7815      	ldrb	r5, [r2, #0]
   1b7fe:	e7e3      	b.n	1b7c8 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   1b800:	b90d      	cbnz	r5, 1b806 <bt_gatt_attr_write_ccc+0x66>
			return len;
   1b802:	4620      	mov	r0, r4
   1b804:	e7f8      	b.n	1b7f8 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   1b806:	4639      	mov	r1, r7
   1b808:	2000      	movs	r0, #0
   1b80a:	f013 f841 	bl	2e890 <find_ccc_cfg>
		if (!cfg) {
   1b80e:	4680      	mov	r8, r0
   1b810:	b168      	cbz	r0, 1b82e <bt_gatt_attr_write_ccc+0x8e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b812:	464b      	mov	r3, r9
   1b814:	f853 2f90 	ldr.w	r2, [r3, #144]!
   1b818:	f8c0 2001 	str.w	r2, [r0, #1]
   1b81c:	889a      	ldrh	r2, [r3, #4]
   1b81e:	799b      	ldrb	r3, [r3, #6]
   1b820:	f8a0 2005 	strh.w	r2, [r0, #5]
   1b824:	71c3      	strb	r3, [r0, #7]
		cfg->id = conn->id;
   1b826:	f899 3008 	ldrb.w	r3, [r9, #8]
   1b82a:	7003      	strb	r3, [r0, #0]
   1b82c:	e7d2      	b.n	1b7d4 <bt_gatt_attr_write_ccc+0x34>
   1b82e:	4b12      	ldr	r3, [pc, #72]	; (1b878 <bt_gatt_attr_write_ccc+0xd8>)
   1b830:	4a12      	ldr	r2, [pc, #72]	; (1b87c <bt_gatt_attr_write_ccc+0xdc>)
   1b832:	1a9b      	subs	r3, r3, r2
   1b834:	08db      	lsrs	r3, r3, #3
			BT_WARN("No space to store CCC cfg");
   1b836:	f04f 0100 	mov.w	r1, #0
   1b83a:	2202      	movs	r2, #2
   1b83c:	f362 0102 	bfi	r1, r2, #0, #3
   1b840:	f36f 01c5 	bfc	r1, #3, #3
   1b844:	f363 118f 	bfi	r1, r3, #6, #10
   1b848:	480d      	ldr	r0, [pc, #52]	; (1b880 <bt_gatt_attr_write_ccc+0xe0>)
   1b84a:	f7f8 f829 	bl	138a0 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b84e:	f06f 0010 	mvn.w	r0, #16
   1b852:	e7d1      	b.n	1b7f8 <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
   1b854:	4639      	mov	r1, r7
   1b856:	4630      	mov	r0, r6
   1b858:	f012 ff7d 	bl	2e756 <gatt_ccc_changed>
   1b85c:	e7ca      	b.n	1b7f4 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   1b85e:	4640      	mov	r0, r8
   1b860:	f013 f8af 	bl	2e9c2 <clear_ccc_cfg>
   1b864:	e7c7      	b.n	1b7f6 <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b866:	f06f 0006 	mvn.w	r0, #6
   1b86a:	e7c5      	b.n	1b7f8 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b86c:	f06f 000c 	mvn.w	r0, #12
   1b870:	e7c2      	b.n	1b7f8 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1b872:	f06f 000d 	mvn.w	r0, #13
   1b876:	e7bf      	b.n	1b7f8 <bt_gatt_attr_write_ccc+0x58>
   1b878:	00031930 	.word	0x00031930
   1b87c:	00031908 	.word	0x00031908
   1b880:	0003471c 	.word	0x0003471c

0001b884 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b884:	4b13      	ldr	r3, [pc, #76]	; (1b8d4 <bt_gatt_init+0x50>)
   1b886:	2201      	movs	r2, #1
   1b888:	f3bf 8f5b 	dmb	ish
   1b88c:	e853 1f00 	ldrex	r1, [r3]
   1b890:	2900      	cmp	r1, #0
   1b892:	d103      	bne.n	1b89c <bt_gatt_init+0x18>
   1b894:	e843 2000 	strex	r0, r2, [r3]
   1b898:	2800      	cmp	r0, #0
   1b89a:	d1f7      	bne.n	1b88c <bt_gatt_init+0x8>
   1b89c:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1b8a0:	d116      	bne.n	1b8d0 <bt_gatt_init+0x4c>
{
   1b8a2:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1b8a4:	f7ff fdf4 	bl	1b490 <bt_gatt_service_init>
	list->head = NULL;
   1b8a8:	4b0b      	ldr	r3, [pc, #44]	; (1b8d8 <bt_gatt_init+0x54>)
   1b8aa:	2200      	movs	r2, #0
   1b8ac:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1b8ae:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1b8b0:	4c0a      	ldr	r4, [pc, #40]	; (1b8dc <bt_gatt_init+0x58>)
   1b8b2:	490b      	ldr	r1, [pc, #44]	; (1b8e0 <bt_gatt_init+0x5c>)
   1b8b4:	4620      	mov	r0, r4
   1b8b6:	f009 fb7d 	bl	24fb4 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1b8ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b8be:	2300      	movs	r3, #0
   1b8c0:	4620      	mov	r0, r4
   1b8c2:	f009 fc1d 	bl	25100 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1b8c6:	4907      	ldr	r1, [pc, #28]	; (1b8e4 <bt_gatt_init+0x60>)
   1b8c8:	4807      	ldr	r0, [pc, #28]	; (1b8e8 <bt_gatt_init+0x64>)
   1b8ca:	f009 fb73 	bl	24fb4 <k_work_init_delayable>
}
   1b8ce:	bd10      	pop	{r4, pc}
   1b8d0:	4770      	bx	lr
   1b8d2:	bf00      	nop
   1b8d4:	20002e38 	.word	0x20002e38
   1b8d8:	20002e20 	.word	0x20002e20
   1b8dc:	20001fb8 	.word	0x20001fb8
   1b8e0:	0002ec85 	.word	0x0002ec85
   1b8e4:	0001bda9 	.word	0x0001bda9
   1b8e8:	20002030 	.word	0x20002030

0001b8ec <bt_gatt_attr_get_handle>:
{
   1b8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1b8f0:	2800      	cmp	r0, #0
   1b8f2:	d03a      	beq.n	1b96a <bt_gatt_attr_get_handle+0x7e>
   1b8f4:	4606      	mov	r6, r0
	if (attr->handle) {
   1b8f6:	8a07      	ldrh	r7, [r0, #16]
   1b8f8:	2f00      	cmp	r7, #0
   1b8fa:	d139      	bne.n	1b970 <bt_gatt_attr_get_handle+0x84>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b8fc:	4d1e      	ldr	r5, [pc, #120]	; (1b978 <bt_gatt_attr_get_handle+0x8c>)
	uint16_t handle = 1;
   1b8fe:	2401      	movs	r4, #1
   1b900:	e003      	b.n	1b90a <bt_gatt_attr_get_handle+0x1e>
			handle += static_svc->attr_count;
   1b902:	686b      	ldr	r3, [r5, #4]
   1b904:	441c      	add	r4, r3
   1b906:	b2a4      	uxth	r4, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b908:	3508      	adds	r5, #8
   1b90a:	4b1c      	ldr	r3, [pc, #112]	; (1b97c <bt_gatt_attr_get_handle+0x90>)
   1b90c:	429d      	cmp	r5, r3
   1b90e:	d81a      	bhi.n	1b946 <bt_gatt_attr_get_handle+0x5a>
   1b910:	4b1a      	ldr	r3, [pc, #104]	; (1b97c <bt_gatt_attr_get_handle+0x90>)
   1b912:	429d      	cmp	r5, r3
   1b914:	d22c      	bcs.n	1b970 <bt_gatt_attr_get_handle+0x84>
		if ((attr < &static_svc->attrs[0]) ||
   1b916:	6829      	ldr	r1, [r5, #0]
   1b918:	42b1      	cmp	r1, r6
   1b91a:	d8f2      	bhi.n	1b902 <bt_gatt_attr_get_handle+0x16>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b91c:	6868      	ldr	r0, [r5, #4]
   1b91e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1b922:	009b      	lsls	r3, r3, #2
   1b924:	3b14      	subs	r3, #20
   1b926:	440b      	add	r3, r1
		if ((attr < &static_svc->attrs[0]) ||
   1b928:	42b3      	cmp	r3, r6
   1b92a:	d3ea      	bcc.n	1b902 <bt_gatt_attr_get_handle+0x16>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1b92c:	2300      	movs	r3, #0
   1b92e:	4298      	cmp	r0, r3
   1b930:	d9ea      	bls.n	1b908 <bt_gatt_attr_get_handle+0x1c>
			if (attr == &static_svc->attrs[i]) {
   1b932:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1b936:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1b93a:	42b2      	cmp	r2, r6
   1b93c:	d017      	beq.n	1b96e <bt_gatt_attr_get_handle+0x82>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1b93e:	3301      	adds	r3, #1
   1b940:	3401      	adds	r4, #1
   1b942:	b2a4      	uxth	r4, r4
   1b944:	e7f3      	b.n	1b92e <bt_gatt_attr_get_handle+0x42>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b946:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1b98c <bt_gatt_attr_get_handle+0xa0>
   1b94a:	f240 538c 	movw	r3, #1420	; 0x58c
   1b94e:	4642      	mov	r2, r8
   1b950:	490b      	ldr	r1, [pc, #44]	; (1b980 <bt_gatt_attr_get_handle+0x94>)
   1b952:	480c      	ldr	r0, [pc, #48]	; (1b984 <bt_gatt_attr_get_handle+0x98>)
   1b954:	f010 fbf8 	bl	2c148 <printk>
   1b958:	480b      	ldr	r0, [pc, #44]	; (1b988 <bt_gatt_attr_get_handle+0x9c>)
   1b95a:	f010 fbf5 	bl	2c148 <printk>
   1b95e:	f240 518c 	movw	r1, #1420	; 0x58c
   1b962:	4640      	mov	r0, r8
   1b964:	f010 fdf5 	bl	2c552 <assert_post_action>
   1b968:	e7d2      	b.n	1b910 <bt_gatt_attr_get_handle+0x24>
		return 0;
   1b96a:	2700      	movs	r7, #0
   1b96c:	e000      	b.n	1b970 <bt_gatt_attr_get_handle+0x84>
				return handle;
   1b96e:	4627      	mov	r7, r4
}
   1b970:	4638      	mov	r0, r7
   1b972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b976:	bf00      	nop
   1b978:	000318f0 	.word	0x000318f0
   1b97c:	00031908 	.word	0x00031908
   1b980:	00034738 	.word	0x00034738
   1b984:	00031df4 	.word	0x00031df4
   1b988:	00033d7c 	.word	0x00033d7c
   1b98c:	00034678 	.word	0x00034678

0001b990 <bt_gatt_foreach_attr_type>:
{
   1b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b994:	b089      	sub	sp, #36	; 0x24
   1b996:	4607      	mov	r7, r0
   1b998:	468a      	mov	sl, r1
   1b99a:	4690      	mov	r8, r2
   1b99c:	4699      	mov	r9, r3
   1b99e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1b9a2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1b9a6:	b91b      	cbnz	r3, 1b9b0 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   1b9a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b9ac:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1b9b0:	4b23      	ldr	r3, [pc, #140]	; (1ba40 <bt_gatt_foreach_attr_type+0xb0>)
   1b9b2:	881b      	ldrh	r3, [r3, #0]
   1b9b4:	42bb      	cmp	r3, r7
   1b9b6:	d22f      	bcs.n	1ba18 <bt_gatt_foreach_attr_type+0x88>
}
   1b9b8:	b009      	add	sp, #36	; 0x24
   1b9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1b9be:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b9c0:	3608      	adds	r6, #8
   1b9c2:	4b20      	ldr	r3, [pc, #128]	; (1ba44 <bt_gatt_foreach_attr_type+0xb4>)
   1b9c4:	429e      	cmp	r6, r3
   1b9c6:	d82a      	bhi.n	1ba1e <bt_gatt_foreach_attr_type+0x8e>
   1b9c8:	4b1e      	ldr	r3, [pc, #120]	; (1ba44 <bt_gatt_foreach_attr_type+0xb4>)
   1b9ca:	429e      	cmp	r6, r3
   1b9cc:	d2f4      	bcs.n	1b9b8 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   1b9ce:	6873      	ldr	r3, [r6, #4]
   1b9d0:	18e2      	adds	r2, r4, r3
   1b9d2:	42ba      	cmp	r2, r7
   1b9d4:	d3f3      	bcc.n	1b9be <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b9d6:	2500      	movs	r5, #0
   1b9d8:	9707      	str	r7, [sp, #28]
   1b9da:	6873      	ldr	r3, [r6, #4]
   1b9dc:	42ab      	cmp	r3, r5
   1b9de:	d919      	bls.n	1ba14 <bt_gatt_foreach_attr_type+0x84>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b9e0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1b9e4:	f8cd b010 	str.w	fp, [sp, #16]
   1b9e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b9ea:	9303      	str	r3, [sp, #12]
   1b9ec:	ab12      	add	r3, sp, #72	; 0x48
   1b9ee:	9302      	str	r3, [sp, #8]
   1b9f0:	f8cd 9004 	str.w	r9, [sp, #4]
   1b9f4:	f8cd 8000 	str.w	r8, [sp]
   1b9f8:	4653      	mov	r3, sl
   1b9fa:	9a07      	ldr	r2, [sp, #28]
   1b9fc:	4621      	mov	r1, r4
   1b9fe:	6837      	ldr	r7, [r6, #0]
   1ba00:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1ba04:	f012 ffa4 	bl	2e950 <gatt_foreach_iter>
   1ba08:	2800      	cmp	r0, #0
   1ba0a:	d0d5      	beq.n	1b9b8 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1ba0c:	3501      	adds	r5, #1
   1ba0e:	3401      	adds	r4, #1
   1ba10:	b2a4      	uxth	r4, r4
   1ba12:	e7e2      	b.n	1b9da <bt_gatt_foreach_attr_type+0x4a>
   1ba14:	9f07      	ldr	r7, [sp, #28]
   1ba16:	e7d3      	b.n	1b9c0 <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ba18:	4e0b      	ldr	r6, [pc, #44]	; (1ba48 <bt_gatt_foreach_attr_type+0xb8>)
		uint16_t handle = 1;
   1ba1a:	2401      	movs	r4, #1
   1ba1c:	e7d1      	b.n	1b9c2 <bt_gatt_foreach_attr_type+0x32>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ba1e:	4d0b      	ldr	r5, [pc, #44]	; (1ba4c <bt_gatt_foreach_attr_type+0xbc>)
   1ba20:	f44f 63ca 	mov.w	r3, #1616	; 0x650
   1ba24:	462a      	mov	r2, r5
   1ba26:	490a      	ldr	r1, [pc, #40]	; (1ba50 <bt_gatt_foreach_attr_type+0xc0>)
   1ba28:	480a      	ldr	r0, [pc, #40]	; (1ba54 <bt_gatt_foreach_attr_type+0xc4>)
   1ba2a:	f010 fb8d 	bl	2c148 <printk>
   1ba2e:	480a      	ldr	r0, [pc, #40]	; (1ba58 <bt_gatt_foreach_attr_type+0xc8>)
   1ba30:	f010 fb8a 	bl	2c148 <printk>
   1ba34:	f44f 61ca 	mov.w	r1, #1616	; 0x650
   1ba38:	4628      	mov	r0, r5
   1ba3a:	f010 fd8a 	bl	2c552 <assert_post_action>
   1ba3e:	e7c3      	b.n	1b9c8 <bt_gatt_foreach_attr_type+0x38>
   1ba40:	20003ff0 	.word	0x20003ff0
   1ba44:	00031908 	.word	0x00031908
   1ba48:	000318f0 	.word	0x000318f0
   1ba4c:	00034678 	.word	0x00034678
   1ba50:	00034738 	.word	0x00034738
   1ba54:	00031df4 	.word	0x00031df4
   1ba58:	00033d7c 	.word	0x00033d7c

0001ba5c <db_hash_gen>:
{
   1ba5c:	b510      	push	{r4, lr}
   1ba5e:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   1ba60:	2300      	movs	r3, #0
   1ba62:	9348      	str	r3, [sp, #288]	; 0x120
   1ba64:	9349      	str	r3, [sp, #292]	; 0x124
   1ba66:	934a      	str	r3, [sp, #296]	; 0x128
   1ba68:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1ba6a:	aa1c      	add	r2, sp, #112	; 0x70
   1ba6c:	a948      	add	r1, sp, #288	; 0x120
   1ba6e:	a804      	add	r0, sp, #16
   1ba70:	f011 f919 	bl	2cca6 <tc_cmac_setup>
   1ba74:	b190      	cbz	r0, 1ba9c <db_hash_gen+0x40>
   1ba76:	ac04      	add	r4, sp, #16
   1ba78:	9402      	str	r4, [sp, #8]
   1ba7a:	4b26      	ldr	r3, [pc, #152]	; (1bb14 <db_hash_gen+0xb8>)
   1ba7c:	9301      	str	r3, [sp, #4]
   1ba7e:	2200      	movs	r2, #0
   1ba80:	9200      	str	r2, [sp, #0]
   1ba82:	4613      	mov	r3, r2
   1ba84:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ba88:	2001      	movs	r0, #1
   1ba8a:	f7ff ff81 	bl	1b990 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1ba8e:	4621      	mov	r1, r4
   1ba90:	4821      	ldr	r0, [pc, #132]	; (1bb18 <db_hash_gen+0xbc>)
   1ba92:	f011 f9a3 	bl	2cddc <tc_cmac_final>
   1ba96:	b190      	cbz	r0, 1babe <db_hash_gen+0x62>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1ba98:	2300      	movs	r3, #0
   1ba9a:	e029      	b.n	1baf0 <db_hash_gen+0x94>
   1ba9c:	4b1f      	ldr	r3, [pc, #124]	; (1bb1c <db_hash_gen+0xc0>)
   1ba9e:	4a20      	ldr	r2, [pc, #128]	; (1bb20 <db_hash_gen+0xc4>)
   1baa0:	1a9b      	subs	r3, r3, r2
   1baa2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to setup AES CMAC");
   1baa4:	f04f 0100 	mov.w	r1, #0
   1baa8:	2201      	movs	r2, #1
   1baaa:	f362 0102 	bfi	r1, r2, #0, #3
   1baae:	f36f 01c5 	bfc	r1, #3, #3
   1bab2:	f363 118f 	bfi	r1, r3, #6, #10
   1bab6:	481b      	ldr	r0, [pc, #108]	; (1bb24 <db_hash_gen+0xc8>)
   1bab8:	f7f7 fef2 	bl	138a0 <log_0>
		return;
   1babc:	e027      	b.n	1bb0e <db_hash_gen+0xb2>
   1babe:	4b17      	ldr	r3, [pc, #92]	; (1bb1c <db_hash_gen+0xc0>)
   1bac0:	4a17      	ldr	r2, [pc, #92]	; (1bb20 <db_hash_gen+0xc4>)
   1bac2:	1a9b      	subs	r3, r3, r2
   1bac4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to calculate hash");
   1bac6:	f04f 0100 	mov.w	r1, #0
   1baca:	2201      	movs	r2, #1
   1bacc:	f362 0102 	bfi	r1, r2, #0, #3
   1bad0:	f36f 01c5 	bfc	r1, #3, #3
   1bad4:	f363 118f 	bfi	r1, r3, #6, #10
   1bad8:	4813      	ldr	r0, [pc, #76]	; (1bb28 <db_hash_gen+0xcc>)
   1bada:	f7f7 fee1 	bl	138a0 <log_0>
		return;
   1bade:	e016      	b.n	1bb0e <db_hash_gen+0xb2>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1bae0:	4a0d      	ldr	r2, [pc, #52]	; (1bb18 <db_hash_gen+0xbc>)
   1bae2:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1bae4:	f1c3 010f 	rsb	r1, r3, #15
   1bae8:	5c54      	ldrb	r4, [r2, r1]
   1baea:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1baec:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   1baee:	3301      	adds	r3, #1
   1baf0:	2b07      	cmp	r3, #7
   1baf2:	d9f5      	bls.n	1bae0 <db_hash_gen+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1baf4:	4b0d      	ldr	r3, [pc, #52]	; (1bb2c <db_hash_gen+0xd0>)
   1baf6:	f3bf 8f5b 	dmb	ish
   1bafa:	e853 2f00 	ldrex	r2, [r3]
   1bafe:	f042 0204 	orr.w	r2, r2, #4
   1bb02:	e843 2100 	strex	r1, r2, [r3]
   1bb06:	2900      	cmp	r1, #0
   1bb08:	d1f7      	bne.n	1bafa <db_hash_gen+0x9e>
   1bb0a:	f3bf 8f5b 	dmb	ish
}
   1bb0e:	b04c      	add	sp, #304	; 0x130
   1bb10:	bd10      	pop	{r4, pc}
   1bb12:	bf00      	nop
   1bb14:	0002e7b1 	.word	0x0002e7b1
   1bb18:	20001fa8 	.word	0x20001fa8
   1bb1c:	00031930 	.word	0x00031930
   1bb20:	00031908 	.word	0x00031908
   1bb24:	00034768 	.word	0x00034768
   1bb28:	00034784 	.word	0x00034784
   1bb2c:	20002060 	.word	0x20002060

0001bb30 <gatt_find_by_uuid>:
{
   1bb30:	b510      	push	{r4, lr}
   1bb32:	b084      	sub	sp, #16
   1bb34:	4604      	mov	r4, r0
   1bb36:	460a      	mov	r2, r1
	found->attr = NULL;
   1bb38:	2300      	movs	r3, #0
   1bb3a:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1bb3c:	9002      	str	r0, [sp, #8]
   1bb3e:	4907      	ldr	r1, [pc, #28]	; (1bb5c <gatt_find_by_uuid+0x2c>)
   1bb40:	9101      	str	r1, [sp, #4]
   1bb42:	2101      	movs	r1, #1
   1bb44:	9100      	str	r1, [sp, #0]
   1bb46:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1bb4a:	8880      	ldrh	r0, [r0, #4]
   1bb4c:	f7ff ff20 	bl	1b990 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1bb50:	6820      	ldr	r0, [r4, #0]
}
   1bb52:	3800      	subs	r0, #0
   1bb54:	bf18      	it	ne
   1bb56:	2001      	movne	r0, #1
   1bb58:	b004      	add	sp, #16
   1bb5a:	bd10      	pop	{r4, pc}
   1bb5c:	0002e7a9 	.word	0x0002e7a9

0001bb60 <gatt_indicate>:
{
   1bb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bb64:	b082      	sub	sp, #8
   1bb66:	4606      	mov	r6, r0
   1bb68:	460f      	mov	r7, r1
   1bb6a:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1bb6c:	2214      	movs	r2, #20
   1bb6e:	6861      	ldr	r1, [r4, #4]
   1bb70:	f013 f88d 	bl	2ec8e <bt_gatt_check_perm>
   1bb74:	bb80      	cbnz	r0, 1bbd8 <gatt_indicate+0x78>
	len = sizeof(*ind) + params->len;
   1bb76:	8aa5      	ldrh	r5, [r4, #20]
   1bb78:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1bb7a:	9500      	str	r5, [sp, #0]
   1bb7c:	231d      	movs	r3, #29
   1bb7e:	2200      	movs	r2, #0
   1bb80:	4621      	mov	r1, r4
   1bb82:	482d      	ldr	r0, [pc, #180]	; (1bc38 <gatt_indicate+0xd8>)
   1bb84:	f012 ff0f 	bl	2e9a6 <gatt_req_alloc>
	if (!req) {
   1bb88:	4680      	mov	r8, r0
   1bb8a:	2800      	cmp	r0, #0
   1bb8c:	d051      	beq.n	1bc32 <gatt_indicate+0xd2>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1bb8e:	462a      	mov	r2, r5
   1bb90:	211d      	movs	r1, #29
   1bb92:	4630      	mov	r0, r6
   1bb94:	f7ff f876 	bl	1ac84 <bt_att_create_pdu>
	if (!buf) {
   1bb98:	4681      	mov	r9, r0
   1bb9a:	b380      	cbz	r0, 1bbfe <gatt_indicate+0x9e>
   1bb9c:	f100 0a08 	add.w	sl, r0, #8
   1bba0:	2102      	movs	r1, #2
   1bba2:	4650      	mov	r0, sl
   1bba4:	f000 ff90 	bl	1cac8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1bba8:	4605      	mov	r5, r0
   1bbaa:	f825 7b02 	strh.w	r7, [r5], #2
   1bbae:	8aa1      	ldrh	r1, [r4, #20]
   1bbb0:	4650      	mov	r0, sl
   1bbb2:	f000 ff89 	bl	1cac8 <net_buf_simple_add>
   1bbb6:	8aa2      	ldrh	r2, [r4, #20]
   1bbb8:	6921      	ldr	r1, [r4, #16]
   1bbba:	4628      	mov	r0, r5
   1bbbc:	f014 fe78 	bl	308b0 <memcpy>
	req->buf = buf;
   1bbc0:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   1bbc4:	4641      	mov	r1, r8
   1bbc6:	4630      	mov	r0, r6
   1bbc8:	f7ff fba4 	bl	1b314 <bt_att_req_send>
	if (err) {
   1bbcc:	4604      	mov	r4, r0
   1bbce:	bb60      	cbnz	r0, 1bc2a <gatt_indicate+0xca>
}
   1bbd0:	4620      	mov	r0, r4
   1bbd2:	b002      	add	sp, #8
   1bbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bbd8:	4b18      	ldr	r3, [pc, #96]	; (1bc3c <gatt_indicate+0xdc>)
   1bbda:	4a19      	ldr	r2, [pc, #100]	; (1bc40 <gatt_indicate+0xe0>)
   1bbdc:	1a9b      	subs	r3, r3, r2
   1bbde:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   1bbe0:	f04f 0100 	mov.w	r1, #0
   1bbe4:	2202      	movs	r2, #2
   1bbe6:	f362 0102 	bfi	r1, r2, #0, #3
   1bbea:	f36f 01c5 	bfc	r1, #3, #3
   1bbee:	f363 118f 	bfi	r1, r3, #6, #10
   1bbf2:	4814      	ldr	r0, [pc, #80]	; (1bc44 <gatt_indicate+0xe4>)
   1bbf4:	f7f7 fe54 	bl	138a0 <log_0>
		return -EPERM;
   1bbf8:	f04f 34ff 	mov.w	r4, #4294967295
   1bbfc:	e7e8      	b.n	1bbd0 <gatt_indicate+0x70>
   1bbfe:	4b0f      	ldr	r3, [pc, #60]	; (1bc3c <gatt_indicate+0xdc>)
   1bc00:	4a0f      	ldr	r2, [pc, #60]	; (1bc40 <gatt_indicate+0xe0>)
   1bc02:	1a9b      	subs	r3, r3, r2
   1bc04:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send indication");
   1bc06:	f04f 0100 	mov.w	r1, #0
   1bc0a:	2202      	movs	r2, #2
   1bc0c:	f362 0102 	bfi	r1, r2, #0, #3
   1bc10:	f36f 01c5 	bfc	r1, #3, #3
   1bc14:	f363 118f 	bfi	r1, r3, #6, #10
   1bc18:	480b      	ldr	r0, [pc, #44]	; (1bc48 <gatt_indicate+0xe8>)
   1bc1a:	f7f7 fe41 	bl	138a0 <log_0>
		bt_att_req_free(req);
   1bc1e:	4640      	mov	r0, r8
   1bc20:	f7ff fa78 	bl	1b114 <bt_att_req_free>
		return -ENOMEM;
   1bc24:	f06f 040b 	mvn.w	r4, #11
   1bc28:	e7d2      	b.n	1bbd0 <gatt_indicate+0x70>
		bt_att_req_free(req);
   1bc2a:	4640      	mov	r0, r8
   1bc2c:	f7ff fa72 	bl	1b114 <bt_att_req_free>
   1bc30:	e7ce      	b.n	1bbd0 <gatt_indicate+0x70>
		return -ENOMEM;
   1bc32:	f06f 040b 	mvn.w	r4, #11
   1bc36:	e7cb      	b.n	1bbd0 <gatt_indicate+0x70>
   1bc38:	0002e787 	.word	0x0002e787
   1bc3c:	00031930 	.word	0x00031930
   1bc40:	00031908 	.word	0x00031908
   1bc44:	000347a0 	.word	0x000347a0
   1bc48:	000347b8 	.word	0x000347b8

0001bc4c <bt_gatt_indicate>:
{
   1bc4c:	b570      	push	{r4, r5, r6, lr}
   1bc4e:	b08c      	sub	sp, #48	; 0x30
   1bc50:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1bc52:	460c      	mov	r4, r1
   1bc54:	2900      	cmp	r1, #0
   1bc56:	d044      	beq.n	1bce2 <bt_gatt_indicate+0x96>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1bc58:	6863      	ldr	r3, [r4, #4]
   1bc5a:	2b00      	cmp	r3, #0
   1bc5c:	d052      	beq.n	1bd04 <bt_gatt_indicate+0xb8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bc5e:	f3bf 8f5b 	dmb	ish
   1bc62:	4b4a      	ldr	r3, [pc, #296]	; (1bd8c <bt_gatt_indicate+0x140>)
   1bc64:	681b      	ldr	r3, [r3, #0]
   1bc66:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1bc6a:	f013 0f02 	tst.w	r3, #2
   1bc6e:	f000 8083 	beq.w	1bd78 <bt_gatt_indicate+0x12c>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1bc72:	b11d      	cbz	r5, 1bc7c <bt_gatt_indicate+0x30>
   1bc74:	7aab      	ldrb	r3, [r5, #10]
   1bc76:	2b07      	cmp	r3, #7
   1bc78:	f040 8081 	bne.w	1bd7e <bt_gatt_indicate+0x132>
	data.attr = params->attr;
   1bc7c:	6860      	ldr	r0, [r4, #4]
   1bc7e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1bc80:	f7ff fe34 	bl	1b8ec <bt_gatt_attr_get_handle>
   1bc84:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1bc88:	6821      	ldr	r1, [r4, #0]
   1bc8a:	2900      	cmp	r1, #0
   1bc8c:	d04e      	beq.n	1bd2c <bt_gatt_indicate+0xe0>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1bc8e:	a805      	add	r0, sp, #20
   1bc90:	f7ff ff4e 	bl	1bb30 <gatt_find_by_uuid>
   1bc94:	2800      	cmp	r0, #0
   1bc96:	d075      	beq.n	1bd84 <bt_gatt_indicate+0x138>
		params->attr = data.attr;
   1bc98:	9b05      	ldr	r3, [sp, #20]
   1bc9a:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1bc9c:	9b05      	ldr	r3, [sp, #20]
   1bc9e:	6818      	ldr	r0, [r3, #0]
   1bca0:	2300      	movs	r3, #0
   1bca2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1bca6:	f642 0303 	movw	r3, #10243	; 0x2803
   1bcaa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1bcae:	a90b      	add	r1, sp, #44	; 0x2c
   1bcb0:	f011 f992 	bl	2cfd8 <bt_uuid_cmp>
   1bcb4:	b948      	cbnz	r0, 1bcca <bt_gatt_indicate+0x7e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1bcb6:	9805      	ldr	r0, [sp, #20]
   1bcb8:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1bcba:	799b      	ldrb	r3, [r3, #6]
   1bcbc:	f013 0f20 	tst.w	r3, #32
   1bcc0:	d039      	beq.n	1bd36 <bt_gatt_indicate+0xea>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1bcc2:	f012 ff89 	bl	2ebd8 <bt_gatt_attr_value_handle>
   1bcc6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1bcca:	2d00      	cmp	r5, #0
   1bccc:	d036      	beq.n	1bd3c <bt_gatt_indicate+0xf0>
		params->_ref = 1;
   1bcce:	2301      	movs	r3, #1
   1bcd0:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1bcd2:	4622      	mov	r2, r4
   1bcd4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1bcd8:	4628      	mov	r0, r5
   1bcda:	f7ff ff41 	bl	1bb60 <gatt_indicate>
}
   1bcde:	b00c      	add	sp, #48	; 0x30
   1bce0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(params, "invalid parameters\n");
   1bce2:	4e2b      	ldr	r6, [pc, #172]	; (1bd90 <bt_gatt_indicate+0x144>)
   1bce4:	f640 1348 	movw	r3, #2376	; 0x948
   1bce8:	4632      	mov	r2, r6
   1bcea:	492a      	ldr	r1, [pc, #168]	; (1bd94 <bt_gatt_indicate+0x148>)
   1bcec:	482a      	ldr	r0, [pc, #168]	; (1bd98 <bt_gatt_indicate+0x14c>)
   1bcee:	f010 fa2b 	bl	2c148 <printk>
   1bcf2:	482a      	ldr	r0, [pc, #168]	; (1bd9c <bt_gatt_indicate+0x150>)
   1bcf4:	f010 fa28 	bl	2c148 <printk>
   1bcf8:	f640 1148 	movw	r1, #2376	; 0x948
   1bcfc:	4630      	mov	r0, r6
   1bcfe:	f010 fc28 	bl	2c552 <assert_post_action>
   1bd02:	e7a9      	b.n	1bc58 <bt_gatt_indicate+0xc>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1bd04:	6823      	ldr	r3, [r4, #0]
   1bd06:	2b00      	cmp	r3, #0
   1bd08:	d1a9      	bne.n	1bc5e <bt_gatt_indicate+0x12>
   1bd0a:	4e21      	ldr	r6, [pc, #132]	; (1bd90 <bt_gatt_indicate+0x144>)
   1bd0c:	f640 1349 	movw	r3, #2377	; 0x949
   1bd10:	4632      	mov	r2, r6
   1bd12:	4923      	ldr	r1, [pc, #140]	; (1bda0 <bt_gatt_indicate+0x154>)
   1bd14:	4820      	ldr	r0, [pc, #128]	; (1bd98 <bt_gatt_indicate+0x14c>)
   1bd16:	f010 fa17 	bl	2c148 <printk>
   1bd1a:	4820      	ldr	r0, [pc, #128]	; (1bd9c <bt_gatt_indicate+0x150>)
   1bd1c:	f010 fa14 	bl	2c148 <printk>
   1bd20:	f640 1149 	movw	r1, #2377	; 0x949
   1bd24:	4630      	mov	r0, r6
   1bd26:	f010 fc14 	bl	2c552 <assert_post_action>
   1bd2a:	e798      	b.n	1bc5e <bt_gatt_indicate+0x12>
		if (!data.handle) {
   1bd2c:	2800      	cmp	r0, #0
   1bd2e:	d1b5      	bne.n	1bc9c <bt_gatt_indicate+0x50>
			return -ENOENT;
   1bd30:	f06f 0001 	mvn.w	r0, #1
   1bd34:	e7d3      	b.n	1bcde <bt_gatt_indicate+0x92>
			return -EINVAL;
   1bd36:	f06f 0015 	mvn.w	r0, #21
   1bd3a:	e7d0      	b.n	1bcde <bt_gatt_indicate+0x92>
	data.err = -ENOTCONN;
   1bd3c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1bd40:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1bd42:	2302      	movs	r3, #2
   1bd44:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1bd48:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1bd4a:	2300      	movs	r3, #0
   1bd4c:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1bd4e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1bd52:	f642 1202 	movw	r2, #10498	; 0x2902
   1bd56:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1bd5a:	aa05      	add	r2, sp, #20
   1bd5c:	9202      	str	r2, [sp, #8]
   1bd5e:	4a11      	ldr	r2, [pc, #68]	; (1bda4 <bt_gatt_indicate+0x158>)
   1bd60:	9201      	str	r2, [sp, #4]
   1bd62:	2201      	movs	r2, #1
   1bd64:	9200      	str	r2, [sp, #0]
   1bd66:	aa0a      	add	r2, sp, #40	; 0x28
   1bd68:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1bd6c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1bd70:	f7ff fe0e 	bl	1b990 <bt_gatt_foreach_attr_type>
	return data.err;
   1bd74:	9807      	ldr	r0, [sp, #28]
   1bd76:	e7b2      	b.n	1bcde <bt_gatt_indicate+0x92>
		return -EAGAIN;
   1bd78:	f06f 000a 	mvn.w	r0, #10
   1bd7c:	e7af      	b.n	1bcde <bt_gatt_indicate+0x92>
		return -ENOTCONN;
   1bd7e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bd82:	e7ac      	b.n	1bcde <bt_gatt_indicate+0x92>
			return -ENOENT;
   1bd84:	f06f 0001 	mvn.w	r0, #1
   1bd88:	e7a9      	b.n	1bcde <bt_gatt_indicate+0x92>
   1bd8a:	bf00      	nop
   1bd8c:	2000037c 	.word	0x2000037c
   1bd90:	00034678 	.word	0x00034678
   1bd94:	000347e0 	.word	0x000347e0
   1bd98:	00031df4 	.word	0x00031df4
   1bd9c:	000347e8 	.word	0x000347e8
   1bda0:	00034800 	.word	0x00034800
   1bda4:	0001c105 	.word	0x0001c105

0001bda8 <sc_process>:
{
   1bda8:	b570      	push	{r4, r5, r6, lr}
   1bdaa:	b082      	sub	sp, #8
   1bdac:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1bdae:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1bdb2:	f3bf 8f5b 	dmb	ish
   1bdb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1bdb8:	f3bf 8f5b 	dmb	ish
   1bdbc:	f013 0f02 	tst.w	r3, #2
   1bdc0:	d12b      	bne.n	1be1a <sc_process+0x72>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1bdc2:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1bdc6:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1bdca:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1bdce:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bdd2:	f3bf 8f5b 	dmb	ish
   1bdd6:	e855 3f00 	ldrex	r3, [r5]
   1bdda:	f023 0301 	bic.w	r3, r3, #1
   1bdde:	e845 3200 	strex	r2, r3, [r5]
   1bde2:	2a00      	cmp	r2, #0
   1bde4:	d1f7      	bne.n	1bdd6 <sc_process+0x2e>
   1bde6:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1bdea:	2000      	movs	r0, #0
   1bdec:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1bdf0:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1bdf4:	4b18      	ldr	r3, [pc, #96]	; (1be58 <sc_process+0xb0>)
   1bdf6:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1bdfa:	4b18      	ldr	r3, [pc, #96]	; (1be5c <sc_process+0xb4>)
   1bdfc:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1be00:	ab01      	add	r3, sp, #4
   1be02:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1be06:	2304      	movs	r3, #4
   1be08:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1be0c:	f1a4 0120 	sub.w	r1, r4, #32
   1be10:	f7ff ff1c 	bl	1bc4c <bt_gatt_indicate>
   1be14:	b190      	cbz	r0, 1be3c <sc_process+0x94>
}
   1be16:	b002      	add	sp, #8
   1be18:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1be1a:	4e11      	ldr	r6, [pc, #68]	; (1be60 <sc_process+0xb8>)
   1be1c:	f240 33e7 	movw	r3, #999	; 0x3e7
   1be20:	4632      	mov	r2, r6
   1be22:	4910      	ldr	r1, [pc, #64]	; (1be64 <sc_process+0xbc>)
   1be24:	4810      	ldr	r0, [pc, #64]	; (1be68 <sc_process+0xc0>)
   1be26:	f010 f98f 	bl	2c148 <printk>
   1be2a:	4810      	ldr	r0, [pc, #64]	; (1be6c <sc_process+0xc4>)
   1be2c:	f010 f98c 	bl	2c148 <printk>
   1be30:	f240 31e7 	movw	r1, #999	; 0x3e7
   1be34:	4630      	mov	r0, r6
   1be36:	f010 fb8c 	bl	2c552 <assert_post_action>
   1be3a:	e7c2      	b.n	1bdc2 <sc_process+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1be3c:	f3bf 8f5b 	dmb	ish
   1be40:	e855 3f00 	ldrex	r3, [r5]
   1be44:	f043 0302 	orr.w	r3, r3, #2
   1be48:	e845 3200 	strex	r2, r3, [r5]
   1be4c:	2a00      	cmp	r2, #0
   1be4e:	d1f7      	bne.n	1be40 <sc_process+0x98>
   1be50:	f3bf 8f5b 	dmb	ish
   1be54:	e7df      	b.n	1be16 <sc_process+0x6e>
   1be56:	bf00      	nop
   1be58:	00034908 	.word	0x00034908
   1be5c:	0001b511 	.word	0x0001b511
   1be60:	00034678 	.word	0x00034678
   1be64:	00034820 	.word	0x00034820
   1be68:	00031df4 	.word	0x00031df4
   1be6c:	00034854 	.word	0x00034854

0001be70 <sc_restore>:
{
   1be70:	b510      	push	{r4, lr}
   1be72:	b082      	sub	sp, #8
   1be74:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1be76:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1be7a:	7a00      	ldrb	r0, [r0, #8]
   1be7c:	f7ff fab4 	bl	1b3e8 <find_sc_cfg>
	if (!cfg) {
   1be80:	b1f0      	cbz	r0, 1bec0 <sc_restore+0x50>
   1be82:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1be84:	8902      	ldrh	r2, [r0, #8]
   1be86:	b90a      	cbnz	r2, 1be8c <sc_restore+0x1c>
   1be88:	8941      	ldrh	r1, [r0, #10]
   1be8a:	b1c9      	cbz	r1, 1bec0 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1be8c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1be90:	895b      	ldrh	r3, [r3, #10]
   1be92:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1be96:	4620      	mov	r0, r4
   1be98:	f7fd fc10 	bl	196bc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1be9c:	4912      	ldr	r1, [pc, #72]	; (1bee8 <sc_restore+0x78>)
   1be9e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1bea2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1bea6:	4a11      	ldr	r2, [pc, #68]	; (1beec <sc_restore+0x7c>)
   1bea8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1beaa:	4a11      	ldr	r2, [pc, #68]	; (1bef0 <sc_restore+0x80>)
   1beac:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1beae:	aa01      	add	r2, sp, #4
   1beb0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1beb2:	2204      	movs	r2, #4
   1beb4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1beb6:	4619      	mov	r1, r3
   1beb8:	4620      	mov	r0, r4
   1beba:	f7ff fec7 	bl	1bc4c <bt_gatt_indicate>
   1bebe:	b908      	cbnz	r0, 1bec4 <sc_restore+0x54>
}
   1bec0:	b002      	add	sp, #8
   1bec2:	bd10      	pop	{r4, pc}
   1bec4:	4b0b      	ldr	r3, [pc, #44]	; (1bef4 <sc_restore+0x84>)
   1bec6:	4a0c      	ldr	r2, [pc, #48]	; (1bef8 <sc_restore+0x88>)
   1bec8:	1a9b      	subs	r3, r3, r2
   1beca:	08db      	lsrs	r3, r3, #3
		BT_ERR("SC restore indication failed");
   1becc:	f04f 0100 	mov.w	r1, #0
   1bed0:	2201      	movs	r2, #1
   1bed2:	f362 0102 	bfi	r1, r2, #0, #3
   1bed6:	f36f 01c5 	bfc	r1, #3, #3
   1beda:	f363 118f 	bfi	r1, r3, #6, #10
   1bede:	4807      	ldr	r0, [pc, #28]	; (1befc <sc_restore+0x8c>)
   1bee0:	f7f7 fcde 	bl	138a0 <log_0>
   1bee4:	e7ec      	b.n	1bec0 <sc_restore+0x50>
   1bee6:	bf00      	nop
   1bee8:	20002e48 	.word	0x20002e48
   1beec:	00034908 	.word	0x00034908
   1bef0:	0002e909 	.word	0x0002e909
   1bef4:	00031930 	.word	0x00031930
   1bef8:	00031908 	.word	0x00031908
   1befc:	00034870 	.word	0x00034870

0001bf00 <gatt_notify>:
{
   1bf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bf04:	4606      	mov	r6, r0
   1bf06:	460f      	mov	r7, r1
   1bf08:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1bf0a:	2214      	movs	r2, #20
   1bf0c:	6861      	ldr	r1, [r4, #4]
   1bf0e:	f012 febe 	bl	2ec8e <bt_gatt_check_perm>
   1bf12:	bb08      	cbnz	r0, 1bf58 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1bf14:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1bf16:	3202      	adds	r2, #2
   1bf18:	211b      	movs	r1, #27
   1bf1a:	4630      	mov	r0, r6
   1bf1c:	f7fe feb2 	bl	1ac84 <bt_att_create_pdu>
	if (!buf) {
   1bf20:	4680      	mov	r8, r0
   1bf22:	b360      	cbz	r0, 1bf7e <gatt_notify+0x7e>
   1bf24:	f100 0908 	add.w	r9, r0, #8
   1bf28:	2102      	movs	r1, #2
   1bf2a:	4648      	mov	r0, r9
   1bf2c:	f000 fdcc 	bl	1cac8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1bf30:	4605      	mov	r5, r0
   1bf32:	f825 7b02 	strh.w	r7, [r5], #2
   1bf36:	89a1      	ldrh	r1, [r4, #12]
   1bf38:	4648      	mov	r0, r9
   1bf3a:	f000 fdc5 	bl	1cac8 <net_buf_simple_add>
   1bf3e:	89a2      	ldrh	r2, [r4, #12]
   1bf40:	68a1      	ldr	r1, [r4, #8]
   1bf42:	4628      	mov	r0, r5
   1bf44:	f014 fcb4 	bl	308b0 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1bf48:	6963      	ldr	r3, [r4, #20]
   1bf4a:	6922      	ldr	r2, [r4, #16]
   1bf4c:	4641      	mov	r1, r8
   1bf4e:	4630      	mov	r0, r6
   1bf50:	f7ff f992 	bl	1b278 <bt_att_send>
}
   1bf54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bf58:	4b12      	ldr	r3, [pc, #72]	; (1bfa4 <gatt_notify+0xa4>)
   1bf5a:	4a13      	ldr	r2, [pc, #76]	; (1bfa8 <gatt_notify+0xa8>)
   1bf5c:	1a9b      	subs	r3, r3, r2
   1bf5e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   1bf60:	f04f 0100 	mov.w	r1, #0
   1bf64:	2202      	movs	r2, #2
   1bf66:	f362 0102 	bfi	r1, r2, #0, #3
   1bf6a:	f36f 01c5 	bfc	r1, #3, #3
   1bf6e:	f363 118f 	bfi	r1, r3, #6, #10
   1bf72:	480e      	ldr	r0, [pc, #56]	; (1bfac <gatt_notify+0xac>)
   1bf74:	f7f7 fc94 	bl	138a0 <log_0>
		return -EPERM;
   1bf78:	f04f 30ff 	mov.w	r0, #4294967295
   1bf7c:	e7ea      	b.n	1bf54 <gatt_notify+0x54>
   1bf7e:	4b09      	ldr	r3, [pc, #36]	; (1bfa4 <gatt_notify+0xa4>)
   1bf80:	4a09      	ldr	r2, [pc, #36]	; (1bfa8 <gatt_notify+0xa8>)
   1bf82:	1a9b      	subs	r3, r3, r2
   1bf84:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send notification");
   1bf86:	f04f 0100 	mov.w	r1, #0
   1bf8a:	2202      	movs	r2, #2
   1bf8c:	f362 0102 	bfi	r1, r2, #0, #3
   1bf90:	f36f 01c5 	bfc	r1, #3, #3
   1bf94:	f363 118f 	bfi	r1, r3, #6, #10
   1bf98:	4805      	ldr	r0, [pc, #20]	; (1bfb0 <gatt_notify+0xb0>)
   1bf9a:	f7f7 fc81 	bl	138a0 <log_0>
		return -ENOMEM;
   1bf9e:	f06f 000b 	mvn.w	r0, #11
   1bfa2:	e7d7      	b.n	1bf54 <gatt_notify+0x54>
   1bfa4:	00031930 	.word	0x00031930
   1bfa8:	00031908 	.word	0x00031908
   1bfac:	000347a0 	.word	0x000347a0
   1bfb0:	00034890 	.word	0x00034890

0001bfb4 <bt_gatt_notify_cb>:
{
   1bfb4:	b570      	push	{r4, r5, r6, lr}
   1bfb6:	b08c      	sub	sp, #48	; 0x30
   1bfb8:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   1bfba:	460d      	mov	r5, r1
   1bfbc:	2900      	cmp	r1, #0
   1bfbe:	d040      	beq.n	1c042 <bt_gatt_notify_cb+0x8e>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1bfc0:	686b      	ldr	r3, [r5, #4]
   1bfc2:	2b00      	cmp	r3, #0
   1bfc4:	d04e      	beq.n	1c064 <bt_gatt_notify_cb+0xb0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bfc6:	f3bf 8f5b 	dmb	ish
   1bfca:	4b47      	ldr	r3, [pc, #284]	; (1c0e8 <bt_gatt_notify_cb+0x134>)
   1bfcc:	681b      	ldr	r3, [r3, #0]
   1bfce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1bfd2:	f013 0f02 	tst.w	r3, #2
   1bfd6:	d07d      	beq.n	1c0d4 <bt_gatt_notify_cb+0x120>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1bfd8:	b114      	cbz	r4, 1bfe0 <bt_gatt_notify_cb+0x2c>
   1bfda:	7aa3      	ldrb	r3, [r4, #10]
   1bfdc:	2b07      	cmp	r3, #7
   1bfde:	d17c      	bne.n	1c0da <bt_gatt_notify_cb+0x126>
	data.attr = params->attr;
   1bfe0:	6868      	ldr	r0, [r5, #4]
   1bfe2:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1bfe4:	f7ff fc82 	bl	1b8ec <bt_gatt_attr_get_handle>
   1bfe8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1bfec:	6829      	ldr	r1, [r5, #0]
   1bfee:	2900      	cmp	r1, #0
   1bff0:	d04c      	beq.n	1c08c <bt_gatt_notify_cb+0xd8>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1bff2:	a805      	add	r0, sp, #20
   1bff4:	f7ff fd9c 	bl	1bb30 <gatt_find_by_uuid>
   1bff8:	2800      	cmp	r0, #0
   1bffa:	d071      	beq.n	1c0e0 <bt_gatt_notify_cb+0x12c>
		params->attr = data.attr;
   1bffc:	9b05      	ldr	r3, [sp, #20]
   1bffe:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1c000:	9b05      	ldr	r3, [sp, #20]
   1c002:	6818      	ldr	r0, [r3, #0]
   1c004:	2300      	movs	r3, #0
   1c006:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1c00a:	f642 0303 	movw	r3, #10243	; 0x2803
   1c00e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1c012:	a90b      	add	r1, sp, #44	; 0x2c
   1c014:	f010 ffe0 	bl	2cfd8 <bt_uuid_cmp>
   1c018:	b948      	cbnz	r0, 1c02e <bt_gatt_notify_cb+0x7a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1c01a:	9805      	ldr	r0, [sp, #20]
   1c01c:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1c01e:	799b      	ldrb	r3, [r3, #6]
   1c020:	f013 0f10 	tst.w	r3, #16
   1c024:	d037      	beq.n	1c096 <bt_gatt_notify_cb+0xe2>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1c026:	f012 fdd7 	bl	2ebd8 <bt_gatt_attr_value_handle>
   1c02a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1c02e:	2c00      	cmp	r4, #0
   1c030:	d034      	beq.n	1c09c <bt_gatt_notify_cb+0xe8>
		return gatt_notify(conn, data.handle, params);
   1c032:	462a      	mov	r2, r5
   1c034:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1c038:	4620      	mov	r0, r4
   1c03a:	f7ff ff61 	bl	1bf00 <gatt_notify>
}
   1c03e:	b00c      	add	sp, #48	; 0x30
   1c040:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(params, "invalid parameters\n");
   1c042:	4e2a      	ldr	r6, [pc, #168]	; (1c0ec <bt_gatt_notify_cb+0x138>)
   1c044:	f640 03fa 	movw	r3, #2298	; 0x8fa
   1c048:	4632      	mov	r2, r6
   1c04a:	4929      	ldr	r1, [pc, #164]	; (1c0f0 <bt_gatt_notify_cb+0x13c>)
   1c04c:	4829      	ldr	r0, [pc, #164]	; (1c0f4 <bt_gatt_notify_cb+0x140>)
   1c04e:	f010 f87b 	bl	2c148 <printk>
   1c052:	4829      	ldr	r0, [pc, #164]	; (1c0f8 <bt_gatt_notify_cb+0x144>)
   1c054:	f010 f878 	bl	2c148 <printk>
   1c058:	f640 01fa 	movw	r1, #2298	; 0x8fa
   1c05c:	4630      	mov	r0, r6
   1c05e:	f010 fa78 	bl	2c552 <assert_post_action>
   1c062:	e7ad      	b.n	1bfc0 <bt_gatt_notify_cb+0xc>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1c064:	682b      	ldr	r3, [r5, #0]
   1c066:	2b00      	cmp	r3, #0
   1c068:	d1ad      	bne.n	1bfc6 <bt_gatt_notify_cb+0x12>
   1c06a:	4e20      	ldr	r6, [pc, #128]	; (1c0ec <bt_gatt_notify_cb+0x138>)
   1c06c:	f640 03fb 	movw	r3, #2299	; 0x8fb
   1c070:	4632      	mov	r2, r6
   1c072:	4922      	ldr	r1, [pc, #136]	; (1c0fc <bt_gatt_notify_cb+0x148>)
   1c074:	481f      	ldr	r0, [pc, #124]	; (1c0f4 <bt_gatt_notify_cb+0x140>)
   1c076:	f010 f867 	bl	2c148 <printk>
   1c07a:	481f      	ldr	r0, [pc, #124]	; (1c0f8 <bt_gatt_notify_cb+0x144>)
   1c07c:	f010 f864 	bl	2c148 <printk>
   1c080:	f640 01fb 	movw	r1, #2299	; 0x8fb
   1c084:	4630      	mov	r0, r6
   1c086:	f010 fa64 	bl	2c552 <assert_post_action>
   1c08a:	e79c      	b.n	1bfc6 <bt_gatt_notify_cb+0x12>
		if (!data.handle) {
   1c08c:	2800      	cmp	r0, #0
   1c08e:	d1b7      	bne.n	1c000 <bt_gatt_notify_cb+0x4c>
			return -ENOENT;
   1c090:	f06f 0001 	mvn.w	r0, #1
   1c094:	e7d3      	b.n	1c03e <bt_gatt_notify_cb+0x8a>
			return -EINVAL;
   1c096:	f06f 0015 	mvn.w	r0, #21
   1c09a:	e7d0      	b.n	1c03e <bt_gatt_notify_cb+0x8a>
	data.err = -ENOTCONN;
   1c09c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c0a0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1c0a2:	2201      	movs	r2, #1
   1c0a4:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
   1c0a8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c0aa:	2300      	movs	r3, #0
   1c0ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1c0b0:	f642 1102 	movw	r1, #10498	; 0x2902
   1c0b4:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
   1c0b8:	a905      	add	r1, sp, #20
   1c0ba:	9102      	str	r1, [sp, #8]
   1c0bc:	4910      	ldr	r1, [pc, #64]	; (1c100 <bt_gatt_notify_cb+0x14c>)
   1c0be:	9101      	str	r1, [sp, #4]
   1c0c0:	9200      	str	r2, [sp, #0]
   1c0c2:	aa0a      	add	r2, sp, #40	; 0x28
   1c0c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c0c8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1c0cc:	f7ff fc60 	bl	1b990 <bt_gatt_foreach_attr_type>
	return data.err;
   1c0d0:	9807      	ldr	r0, [sp, #28]
   1c0d2:	e7b4      	b.n	1c03e <bt_gatt_notify_cb+0x8a>
		return -EAGAIN;
   1c0d4:	f06f 000a 	mvn.w	r0, #10
   1c0d8:	e7b1      	b.n	1c03e <bt_gatt_notify_cb+0x8a>
		return -ENOTCONN;
   1c0da:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c0de:	e7ae      	b.n	1c03e <bt_gatt_notify_cb+0x8a>
			return -ENOENT;
   1c0e0:	f06f 0001 	mvn.w	r0, #1
   1c0e4:	e7ab      	b.n	1c03e <bt_gatt_notify_cb+0x8a>
   1c0e6:	bf00      	nop
   1c0e8:	2000037c 	.word	0x2000037c
   1c0ec:	00034678 	.word	0x00034678
   1c0f0:	000347e0 	.word	0x000347e0
   1c0f4:	00031df4 	.word	0x00031df4
   1c0f8:	000347e8 	.word	0x000347e8
   1c0fc:	00034800 	.word	0x00034800
   1c100:	0001c105 	.word	0x0001c105

0001c104 <notify_cb>:
{
   1c104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c108:	b083      	sub	sp, #12
   1c10a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c10c:	6882      	ldr	r2, [r0, #8]
   1c10e:	4b50      	ldr	r3, [pc, #320]	; (1c250 <notify_cb+0x14c>)
   1c110:	429a      	cmp	r2, r3
   1c112:	d005      	beq.n	1c120 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1c114:	f04f 0a01 	mov.w	sl, #1
}
   1c118:	4650      	mov	r0, sl
   1c11a:	b003      	add	sp, #12
   1c11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c120:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1c122:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1c124:	4b4b      	ldr	r3, [pc, #300]	; (1c254 <notify_cb+0x150>)
   1c126:	429d      	cmp	r5, r3
   1c128:	d031      	beq.n	1c18e <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c12a:	2400      	movs	r4, #0
   1c12c:	e05c      	b.n	1c1e8 <notify_cb+0xe4>
				sc = (struct sc_data *)data->ind_params->data;
   1c12e:	6933      	ldr	r3, [r6, #16]
   1c130:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1c132:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1c136:	8853      	ldrh	r3, [r2, #2]
   1c138:	8812      	ldrh	r2, [r2, #0]
   1c13a:	4649      	mov	r1, r9
   1c13c:	f8df c118 	ldr.w	ip, [pc, #280]	; 1c258 <notify_cb+0x154>
   1c140:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   1c144:	f7ff fae2 	bl	1b70c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c148:	3401      	adds	r4, #1
   1c14a:	2c00      	cmp	r4, #0
   1c14c:	d1ed      	bne.n	1c12a <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c14e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
   1c152:	4b41      	ldr	r3, [pc, #260]	; (1c258 <notify_cb+0x154>)
   1c154:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   1c158:	f109 0901 	add.w	r9, r9, #1
   1c15c:	2300      	movs	r3, #0
   1c15e:	9300      	str	r3, [sp, #0]
   1c160:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1c164:	2207      	movs	r2, #7
   1c166:	4669      	mov	r1, sp
   1c168:	4648      	mov	r0, r9
   1c16a:	f014 fb93 	bl	30894 <memcmp>
   1c16e:	2800      	cmp	r0, #0
   1c170:	d0ea      	beq.n	1c148 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1c172:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c176:	2207      	movs	r2, #7
   1c178:	4649      	mov	r1, r9
   1c17a:	4837      	ldr	r0, [pc, #220]	; (1c258 <notify_cb+0x154>)
   1c17c:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1c180:	f7fd fc52 	bl	19a28 <bt_conn_lookup_state_le>
			if (!conn) {
   1c184:	2800      	cmp	r0, #0
   1c186:	d0d2      	beq.n	1c12e <notify_cb+0x2a>
			bt_conn_unref(conn);
   1c188:	f7fd f95a 	bl	19440 <bt_conn_unref>
   1c18c:	e7dc      	b.n	1c148 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c18e:	2400      	movs	r4, #0
   1c190:	e7db      	b.n	1c14a <notify_cb+0x46>
			bt_conn_unref(conn);
   1c192:	f7fd f955 	bl	19440 <bt_conn_unref>
			continue;
   1c196:	e026      	b.n	1c1e6 <notify_cb+0xe2>
			bt_conn_unref(conn);
   1c198:	4648      	mov	r0, r9
   1c19a:	f7fd f951 	bl	19440 <bt_conn_unref>
			continue;
   1c19e:	e022      	b.n	1c1e6 <notify_cb+0xe2>
   1c1a0:	4b2e      	ldr	r3, [pc, #184]	; (1c25c <notify_cb+0x158>)
   1c1a2:	4a2f      	ldr	r2, [pc, #188]	; (1c260 <notify_cb+0x15c>)
   1c1a4:	1a9b      	subs	r3, r3, r2
   1c1a6:	08db      	lsrs	r3, r3, #3
			BT_WARN("Link is not encrypted");
   1c1a8:	2202      	movs	r2, #2
   1c1aa:	f362 0802 	bfi	r8, r2, #0, #3
   1c1ae:	f36f 08c5 	bfc	r8, #3, #3
   1c1b2:	f363 188f 	bfi	r8, r3, #6, #10
   1c1b6:	4641      	mov	r1, r8
   1c1b8:	482a      	ldr	r0, [pc, #168]	; (1c264 <notify_cb+0x160>)
   1c1ba:	f7f7 fb71 	bl	138a0 <log_0>
			continue;
   1c1be:	e012      	b.n	1c1e6 <notify_cb+0xe2>
			err = gatt_indicate(conn, data->handle,
   1c1c0:	6932      	ldr	r2, [r6, #16]
   1c1c2:	88b1      	ldrh	r1, [r6, #4]
   1c1c4:	4648      	mov	r0, r9
   1c1c6:	f7ff fccb 	bl	1bb60 <gatt_indicate>
			if (err == 0) {
   1c1ca:	4683      	mov	fp, r0
   1c1cc:	b918      	cbnz	r0, 1c1d6 <notify_cb+0xd2>
				data->ind_params->_ref++;
   1c1ce:	6932      	ldr	r2, [r6, #16]
   1c1d0:	7d93      	ldrb	r3, [r2, #22]
   1c1d2:	3301      	adds	r3, #1
   1c1d4:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1c1d6:	4648      	mov	r0, r9
   1c1d8:	f7fd f932 	bl	19440 <bt_conn_unref>
		if (err < 0) {
   1c1dc:	f1bb 0f00 	cmp.w	fp, #0
   1c1e0:	db9a      	blt.n	1c118 <notify_cb+0x14>
		data->err = 0;
   1c1e2:	2300      	movs	r3, #0
   1c1e4:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c1e6:	3401      	adds	r4, #1
   1c1e8:	bb74      	cbnz	r4, 1c248 <notify_cb+0x144>
		if (cfg->value != data->type) {
   1c1ea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c1ee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1c1f2:	891a      	ldrh	r2, [r3, #8]
   1c1f4:	89b3      	ldrh	r3, [r6, #12]
   1c1f6:	429a      	cmp	r2, r3
   1c1f8:	d1f5      	bne.n	1c1e6 <notify_cb+0xe2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c1fa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c1fe:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1c202:	3101      	adds	r1, #1
   1c204:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1c208:	f7fd fb96 	bl	19938 <bt_conn_lookup_addr_le>
		if (!conn) {
   1c20c:	4681      	mov	r9, r0
   1c20e:	2800      	cmp	r0, #0
   1c210:	d0e9      	beq.n	1c1e6 <notify_cb+0xe2>
		if (conn->state != BT_CONN_CONNECTED) {
   1c212:	7a83      	ldrb	r3, [r0, #10]
   1c214:	2b07      	cmp	r3, #7
   1c216:	d1bc      	bne.n	1c192 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1c218:	696b      	ldr	r3, [r5, #20]
   1c21a:	b11b      	cbz	r3, 1c224 <notify_cb+0x120>
   1c21c:	4639      	mov	r1, r7
   1c21e:	4798      	blx	r3
   1c220:	2800      	cmp	r0, #0
   1c222:	d0b9      	beq.n	1c198 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   1c224:	2214      	movs	r2, #20
   1c226:	4639      	mov	r1, r7
   1c228:	4648      	mov	r0, r9
   1c22a:	f012 fd30 	bl	2ec8e <bt_gatt_check_perm>
   1c22e:	4682      	mov	sl, r0
   1c230:	2800      	cmp	r0, #0
   1c232:	d1b5      	bne.n	1c1a0 <notify_cb+0x9c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1c234:	89b3      	ldrh	r3, [r6, #12]
   1c236:	2b02      	cmp	r3, #2
   1c238:	d0c2      	beq.n	1c1c0 <notify_cb+0xbc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1c23a:	6932      	ldr	r2, [r6, #16]
   1c23c:	88b1      	ldrh	r1, [r6, #4]
   1c23e:	4648      	mov	r0, r9
   1c240:	f7ff fe5e 	bl	1bf00 <gatt_notify>
   1c244:	4683      	mov	fp, r0
   1c246:	e7c6      	b.n	1c1d6 <notify_cb+0xd2>
	return BT_GATT_ITER_CONTINUE;
   1c248:	f04f 0a01 	mov.w	sl, #1
   1c24c:	e764      	b.n	1c118 <notify_cb+0x14>
   1c24e:	bf00      	nop
   1c250:	0001b7a1 	.word	0x0001b7a1
   1c254:	200006ac 	.word	0x200006ac
   1c258:	20002e3c 	.word	0x20002e3c
   1c25c:	00031930 	.word	0x00031930
   1c260:	00031908 	.word	0x00031908
   1c264:	000347a0 	.word	0x000347a0

0001c268 <update_ccc>:
{
   1c268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = data->conn;
   1c26c:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c26e:	6882      	ldr	r2, [r0, #8]
   1c270:	4b20      	ldr	r3, [pc, #128]	; (1c2f4 <update_ccc+0x8c>)
   1c272:	429a      	cmp	r2, r3
   1c274:	d002      	beq.n	1c27c <update_ccc+0x14>
}
   1c276:	2001      	movs	r0, #1
   1c278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c27c:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1c27e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c282:	2500      	movs	r5, #0
   1c284:	2d00      	cmp	r5, #0
   1c286:	d1f6      	bne.n	1c276 <update_ccc+0xe>
		if (!cfg->value ||
   1c288:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1c28c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   1c290:	891b      	ldrh	r3, [r3, #8]
   1c292:	b36b      	cbz	r3, 1c2f0 <update_ccc+0x88>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c294:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1c298:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   1c29c:	3201      	adds	r2, #1
   1c29e:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   1c2a2:	4638      	mov	r0, r7
   1c2a4:	f011 fb49 	bl	2d93a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1c2a8:	b310      	cbz	r0, 1c2f0 <update_ccc+0x88>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1c2aa:	222a      	movs	r2, #42	; 0x2a
   1c2ac:	4621      	mov	r1, r4
   1c2ae:	4638      	mov	r0, r7
   1c2b0:	f012 fced 	bl	2ec8e <bt_gatt_check_perm>
		if (err) {
   1c2b4:	b108      	cbz	r0, 1c2ba <update_ccc+0x52>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1c2b6:	2803      	cmp	r0, #3
   1c2b8:	d00a      	beq.n	1c2d0 <update_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   1c2ba:	4641      	mov	r1, r8
   1c2bc:	4620      	mov	r0, r4
   1c2be:	f012 fa4a 	bl	2e756 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1c2c2:	4b0d      	ldr	r3, [pc, #52]	; (1c2f8 <update_ccc+0x90>)
   1c2c4:	4598      	cmp	r8, r3
   1c2c6:	d1d6      	bne.n	1c276 <update_ccc+0xe>
			sc_restore(conn);
   1c2c8:	4638      	mov	r0, r7
   1c2ca:	f7ff fdd1 	bl	1be70 <sc_restore>
   1c2ce:	e7d2      	b.n	1c276 <update_ccc+0xe>
   1c2d0:	4b0a      	ldr	r3, [pc, #40]	; (1c2fc <update_ccc+0x94>)
   1c2d2:	4a0b      	ldr	r2, [pc, #44]	; (1c300 <update_ccc+0x98>)
   1c2d4:	1a9b      	subs	r3, r3, r2
   1c2d6:	08db      	lsrs	r3, r3, #3
				BT_WARN("CCC %p not writable", attr);
   1c2d8:	2202      	movs	r2, #2
   1c2da:	f362 0602 	bfi	r6, r2, #0, #3
   1c2de:	f36f 06c5 	bfc	r6, #3, #3
   1c2e2:	f363 168f 	bfi	r6, r3, #6, #10
   1c2e6:	4632      	mov	r2, r6
   1c2e8:	4621      	mov	r1, r4
   1c2ea:	4806      	ldr	r0, [pc, #24]	; (1c304 <update_ccc+0x9c>)
   1c2ec:	f7f7 fb08 	bl	13900 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c2f0:	3501      	adds	r5, #1
   1c2f2:	e7c7      	b.n	1c284 <update_ccc+0x1c>
   1c2f4:	0001b7a1 	.word	0x0001b7a1
   1c2f8:	200006ac 	.word	0x200006ac
   1c2fc:	00031930 	.word	0x00031930
   1c300:	00031908 	.word	0x00031908
   1c304:	000348bc 	.word	0x000348bc

0001c308 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1c308:	b500      	push	{lr}
   1c30a:	b087      	sub	sp, #28
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1c30c:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1c30e:	2001      	movs	r0, #1
   1c310:	f88d 0014 	strb.w	r0, [sp, #20]
   1c314:	ab04      	add	r3, sp, #16
   1c316:	9302      	str	r3, [sp, #8]
   1c318:	4b05      	ldr	r3, [pc, #20]	; (1c330 <bt_gatt_connected+0x28>)
   1c31a:	9301      	str	r3, [sp, #4]
   1c31c:	2200      	movs	r2, #0
   1c31e:	9200      	str	r2, [sp, #0]
   1c320:	4613      	mov	r3, r2
   1c322:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c326:	f7ff fb33 	bl	1b990 <bt_gatt_foreach_attr_type>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1c32a:	b007      	add	sp, #28
   1c32c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c330:	0001c269 	.word	0x0001c269

0001c334 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1c334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c336:	4605      	mov	r5, r0
   1c338:	460e      	mov	r6, r1
   1c33a:	4617      	mov	r7, r2
	return list->head;
   1c33c:	4b0a      	ldr	r3, [pc, #40]	; (1c368 <bt_gatt_att_max_mtu_changed+0x34>)
   1c33e:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1c340:	b134      	cbz	r4, 1c350 <bt_gatt_att_max_mtu_changed+0x1c>
   1c342:	3c04      	subs	r4, #4
   1c344:	e004      	b.n	1c350 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c346:	1d23      	adds	r3, r4, #4
   1c348:	d00b      	beq.n	1c362 <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   1c34a:	6864      	ldr	r4, [r4, #4]
   1c34c:	b15c      	cbz	r4, 1c366 <bt_gatt_att_max_mtu_changed+0x32>
   1c34e:	3c04      	subs	r4, #4
   1c350:	b14c      	cbz	r4, 1c366 <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   1c352:	6823      	ldr	r3, [r4, #0]
   1c354:	2b00      	cmp	r3, #0
   1c356:	d0f6      	beq.n	1c346 <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   1c358:	463a      	mov	r2, r7
   1c35a:	4631      	mov	r1, r6
   1c35c:	4628      	mov	r0, r5
   1c35e:	4798      	blx	r3
   1c360:	e7f1      	b.n	1c346 <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1c362:	461c      	mov	r4, r3
   1c364:	e7f4      	b.n	1c350 <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   1c366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c368:	20002e20 	.word	0x20002e20

0001c36c <db_hash_read>:
{
   1c36c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c36e:	b085      	sub	sp, #20
   1c370:	4604      	mov	r4, r0
   1c372:	460d      	mov	r5, r1
   1c374:	4616      	mov	r6, r2
   1c376:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c378:	4812      	ldr	r0, [pc, #72]	; (1c3c4 <db_hash_read+0x58>)
   1c37a:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1c37e:	3010      	adds	r0, #16
   1c380:	f008 ffa8 	bl	252d4 <k_work_cancel_delayable_sync>
   1c384:	f3bf 8f5b 	dmb	ish
   1c388:	4b0f      	ldr	r3, [pc, #60]	; (1c3c8 <db_hash_read+0x5c>)
   1c38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1c38c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1c390:	f013 0f04 	tst.w	r3, #4
   1c394:	d012      	beq.n	1c3bc <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   1c396:	2101      	movs	r1, #1
   1c398:	4620      	mov	r0, r4
   1c39a:	f012 fca4 	bl	2ece6 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1c39e:	2310      	movs	r3, #16
   1c3a0:	9302      	str	r3, [sp, #8]
   1c3a2:	4b08      	ldr	r3, [pc, #32]	; (1c3c4 <db_hash_read+0x58>)
   1c3a4:	9301      	str	r3, [sp, #4]
   1c3a6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1c3aa:	9300      	str	r3, [sp, #0]
   1c3ac:	463b      	mov	r3, r7
   1c3ae:	4632      	mov	r2, r6
   1c3b0:	4629      	mov	r1, r5
   1c3b2:	4620      	mov	r0, r4
   1c3b4:	f012 fb58 	bl	2ea68 <bt_gatt_attr_read>
}
   1c3b8:	b005      	add	sp, #20
   1c3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   1c3bc:	2001      	movs	r0, #1
   1c3be:	f7ff fb4d 	bl	1ba5c <db_hash_gen>
   1c3c2:	e7e8      	b.n	1c396 <db_hash_read+0x2a>
   1c3c4:	20001fa8 	.word	0x20001fa8
   1c3c8:	20002010 	.word	0x20002010

0001c3cc <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1c3cc:	b510      	push	{r4, lr}
   1c3ce:	b084      	sub	sp, #16
   1c3d0:	4604      	mov	r4, r0
   1c3d2:	9002      	str	r0, [sp, #8]
   1c3d4:	4b07      	ldr	r3, [pc, #28]	; (1c3f4 <bt_gatt_disconnected+0x28>)
   1c3d6:	9301      	str	r3, [sp, #4]
   1c3d8:	2200      	movs	r2, #0
   1c3da:	9200      	str	r2, [sp, #0]
   1c3dc:	4613      	mov	r3, r2
   1c3de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c3e2:	2001      	movs	r0, #1
   1c3e4:	f7ff fad4 	bl	1b990 <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1c3e8:	4620      	mov	r0, r4
   1c3ea:	f012 fb07 	bl	2e9fc <remove_cf_cfg>
#endif
}
   1c3ee:	b004      	add	sp, #16
   1c3f0:	bd10      	pop	{r4, pc}
   1c3f2:	bf00      	nop
   1c3f4:	0001b585 	.word	0x0001b585

0001c3f8 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1c3f8:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1c3fa:	2300      	movs	r3, #0
   1c3fc:	2b00      	cmp	r3, #0
   1c3fe:	dd13      	ble.n	1c428 <bt_smp_accept+0x30>
   1c400:	4b12      	ldr	r3, [pc, #72]	; (1c44c <bt_smp_accept+0x54>)
   1c402:	4a13      	ldr	r2, [pc, #76]	; (1c450 <bt_smp_accept+0x58>)
   1c404:	1a9b      	subs	r3, r3, r2
   1c406:	08db      	lsrs	r3, r3, #3
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1c408:	f04f 0200 	mov.w	r2, #0
   1c40c:	2101      	movs	r1, #1
   1c40e:	f361 0202 	bfi	r2, r1, #0, #3
   1c412:	f36f 02c5 	bfc	r2, #3, #3
   1c416:	f363 128f 	bfi	r2, r3, #6, #10
   1c41a:	4601      	mov	r1, r0
   1c41c:	480d      	ldr	r0, [pc, #52]	; (1c454 <bt_smp_accept+0x5c>)
   1c41e:	f7f7 fa6f 	bl	13900 <log_1>

	return -ENOMEM;
   1c422:	f06f 000b 	mvn.w	r0, #11
}
   1c426:	bd10      	pop	{r4, pc}
		if (smp->chan.conn) {
   1c428:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
   1c42c:	0112      	lsls	r2, r2, #4
   1c42e:	4c0a      	ldr	r4, [pc, #40]	; (1c458 <bt_smp_accept+0x60>)
   1c430:	58a2      	ldr	r2, [r4, r2]
   1c432:	b10a      	cbz	r2, 1c438 <bt_smp_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1c434:	3301      	adds	r3, #1
   1c436:	e7e1      	b.n	1c3fc <bt_smp_accept+0x4>
		smp->chan.ops = &ops;
   1c438:	4a07      	ldr	r2, [pc, #28]	; (1c458 <bt_smp_accept+0x60>)
   1c43a:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   1c43e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   1c442:	4c06      	ldr	r4, [pc, #24]	; (1c45c <bt_smp_accept+0x64>)
   1c444:	6044      	str	r4, [r0, #4]
		*chan = &smp->chan;
   1c446:	6008      	str	r0, [r1, #0]
		return 0;
   1c448:	2000      	movs	r0, #0
   1c44a:	e7ec      	b.n	1c426 <bt_smp_accept+0x2e>
   1c44c:	00031958 	.word	0x00031958
   1c450:	00031908 	.word	0x00031908
   1c454:	00034a0c 	.word	0x00034a0c
   1c458:	20002068 	.word	0x20002068
   1c45c:	00034a3c 	.word	0x00034a3c

0001c460 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1c460:	4b03      	ldr	r3, [pc, #12]	; (1c470 <pool_id+0x10>)
   1c462:	1ac0      	subs	r0, r0, r3
   1c464:	1080      	asrs	r0, r0, #2
}
   1c466:	4b03      	ldr	r3, [pc, #12]	; (1c474 <pool_id+0x14>)
   1c468:	fb03 f000 	mul.w	r0, r3, r0
   1c46c:	4770      	bx	lr
   1c46e:	bf00      	nop
   1c470:	20000cd8 	.word	0x20000cd8
   1c474:	c4ec4ec5 	.word	0xc4ec4ec5

0001c478 <net_buf_pool_get>:
}
   1c478:	2234      	movs	r2, #52	; 0x34
   1c47a:	4b02      	ldr	r3, [pc, #8]	; (1c484 <net_buf_pool_get+0xc>)
   1c47c:	fb02 3000 	mla	r0, r2, r0, r3
   1c480:	4770      	bx	lr
   1c482:	bf00      	nop
   1c484:	20000cd8 	.word	0x20000cd8

0001c488 <net_buf_reset>:

	return buf;
}

void net_buf_reset(struct net_buf *buf)
{
   1c488:	b538      	push	{r3, r4, r5, lr}
   1c48a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1c48c:	7943      	ldrb	r3, [r0, #5]
   1c48e:	b98b      	cbnz	r3, 1c4b4 <net_buf_reset+0x2c>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1c490:	6823      	ldr	r3, [r4, #0]
   1c492:	b153      	cbz	r3, 1c4aa <net_buf_reset+0x22>
   1c494:	4d0d      	ldr	r5, [pc, #52]	; (1c4cc <net_buf_reset+0x44>)
   1c496:	2357      	movs	r3, #87	; 0x57
   1c498:	462a      	mov	r2, r5
   1c49a:	490d      	ldr	r1, [pc, #52]	; (1c4d0 <net_buf_reset+0x48>)
   1c49c:	480d      	ldr	r0, [pc, #52]	; (1c4d4 <net_buf_reset+0x4c>)
   1c49e:	f00f fe53 	bl	2c148 <printk>
   1c4a2:	2157      	movs	r1, #87	; 0x57
   1c4a4:	4628      	mov	r0, r5
   1c4a6:	f010 f854 	bl	2c552 <assert_post_action>
	buf->len  = 0U;
   1c4aa:	2300      	movs	r3, #0
   1c4ac:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1c4ae:	6923      	ldr	r3, [r4, #16]
   1c4b0:	60a3      	str	r3, [r4, #8]

	net_buf_simple_reset(&buf->b);
}
   1c4b2:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1c4b4:	4d05      	ldr	r5, [pc, #20]	; (1c4cc <net_buf_reset+0x44>)
   1c4b6:	2356      	movs	r3, #86	; 0x56
   1c4b8:	462a      	mov	r2, r5
   1c4ba:	4907      	ldr	r1, [pc, #28]	; (1c4d8 <net_buf_reset+0x50>)
   1c4bc:	4805      	ldr	r0, [pc, #20]	; (1c4d4 <net_buf_reset+0x4c>)
   1c4be:	f00f fe43 	bl	2c148 <printk>
   1c4c2:	2156      	movs	r1, #86	; 0x56
   1c4c4:	4628      	mov	r0, r5
   1c4c6:	f010 f844 	bl	2c552 <assert_post_action>
   1c4ca:	e7e1      	b.n	1c490 <net_buf_reset+0x8>
   1c4cc:	00034a60 	.word	0x00034a60
   1c4d0:	00034a98 	.word	0x00034a98
   1c4d4:	00031df4 	.word	0x00031df4
   1c4d8:	00034a84 	.word	0x00034a84

0001c4dc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1c4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4e0:	b085      	sub	sp, #20
   1c4e2:	4604      	mov	r4, r0
   1c4e4:	9103      	str	r1, [sp, #12]
   1c4e6:	4616      	mov	r6, r2
   1c4e8:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c4ea:	4610      	mov	r0, r2
   1c4ec:	4619      	mov	r1, r3
   1c4ee:	f014 f925 	bl	3073c <sys_clock_timeout_end_calc>
   1c4f2:	4681      	mov	r9, r0
   1c4f4:	9102      	str	r1, [sp, #8]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1c4f6:	b344      	cbz	r4, 1c54a <net_buf_alloc_len+0x6e>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1c4f8:	f104 051c 	add.w	r5, r4, #28
	__asm__ volatile(
   1c4fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c500:	f3ef 8811 	mrs	r8, BASEPRI
   1c504:	f383 8812 	msr	BASEPRI_MAX, r3
   1c508:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c50c:	4628      	mov	r0, r5
   1c50e:	f007 fb19 	bl	23b44 <z_spin_lock_valid>
   1c512:	b330      	cbz	r0, 1c562 <net_buf_alloc_len+0x86>
	z_spin_lock_set_owner(l);
   1c514:	4628      	mov	r0, r5
   1c516:	f007 fb35 	bl	23b84 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1c51a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1c51c:	2b00      	cmp	r3, #0
   1c51e:	f000 809f 	beq.w	1c660 <net_buf_alloc_len+0x184>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1c522:	8c22      	ldrh	r2, [r4, #32]
   1c524:	4293      	cmp	r3, r2
   1c526:	d23d      	bcs.n	1c5a4 <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
   1c528:	2200      	movs	r2, #0
   1c52a:	2300      	movs	r3, #0
   1c52c:	4620      	mov	r0, r4
   1c52e:	f008 f841 	bl	245b4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1c532:	4682      	mov	sl, r0
   1c534:	2800      	cmp	r0, #0
   1c536:	d035      	beq.n	1c5a4 <net_buf_alloc_len+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c538:	4628      	mov	r0, r5
   1c53a:	f007 fb13 	bl	23b64 <z_spin_unlock_valid>
   1c53e:	b308      	cbz	r0, 1c584 <net_buf_alloc_len+0xa8>
	__asm__ volatile(
   1c540:	f388 8811 	msr	BASEPRI, r8
   1c544:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1c548:	e04e      	b.n	1c5e8 <net_buf_alloc_len+0x10c>
	__ASSERT_NO_MSG(pool);
   1c54a:	4d70      	ldr	r5, [pc, #448]	; (1c70c <net_buf_alloc_len+0x230>)
   1c54c:	23f4      	movs	r3, #244	; 0xf4
   1c54e:	462a      	mov	r2, r5
   1c550:	496f      	ldr	r1, [pc, #444]	; (1c710 <net_buf_alloc_len+0x234>)
   1c552:	4870      	ldr	r0, [pc, #448]	; (1c714 <net_buf_alloc_len+0x238>)
   1c554:	f00f fdf8 	bl	2c148 <printk>
   1c558:	21f4      	movs	r1, #244	; 0xf4
   1c55a:	4628      	mov	r0, r5
   1c55c:	f00f fff9 	bl	2c552 <assert_post_action>
   1c560:	e7ca      	b.n	1c4f8 <net_buf_alloc_len+0x1c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c562:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 1c720 <net_buf_alloc_len+0x244>
   1c566:	2381      	movs	r3, #129	; 0x81
   1c568:	4652      	mov	r2, sl
   1c56a:	496b      	ldr	r1, [pc, #428]	; (1c718 <net_buf_alloc_len+0x23c>)
   1c56c:	4869      	ldr	r0, [pc, #420]	; (1c714 <net_buf_alloc_len+0x238>)
   1c56e:	f00f fdeb 	bl	2c148 <printk>
   1c572:	4629      	mov	r1, r5
   1c574:	4869      	ldr	r0, [pc, #420]	; (1c71c <net_buf_alloc_len+0x240>)
   1c576:	f00f fde7 	bl	2c148 <printk>
   1c57a:	2181      	movs	r1, #129	; 0x81
   1c57c:	4650      	mov	r0, sl
   1c57e:	f00f ffe8 	bl	2c552 <assert_post_action>
   1c582:	e7c7      	b.n	1c514 <net_buf_alloc_len+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c584:	4c66      	ldr	r4, [pc, #408]	; (1c720 <net_buf_alloc_len+0x244>)
   1c586:	23ac      	movs	r3, #172	; 0xac
   1c588:	4622      	mov	r2, r4
   1c58a:	4966      	ldr	r1, [pc, #408]	; (1c724 <net_buf_alloc_len+0x248>)
   1c58c:	4861      	ldr	r0, [pc, #388]	; (1c714 <net_buf_alloc_len+0x238>)
   1c58e:	f00f fddb 	bl	2c148 <printk>
   1c592:	4629      	mov	r1, r5
   1c594:	4864      	ldr	r0, [pc, #400]	; (1c728 <net_buf_alloc_len+0x24c>)
   1c596:	f00f fdd7 	bl	2c148 <printk>
   1c59a:	21ac      	movs	r1, #172	; 0xac
   1c59c:	4620      	mov	r0, r4
   1c59e:	f00f ffd8 	bl	2c552 <assert_post_action>
   1c5a2:	e7cd      	b.n	1c540 <net_buf_alloc_len+0x64>
			}
		}

		uninit_count = pool->uninit_count--;
   1c5a4:	f8b4 a022 	ldrh.w	sl, [r4, #34]	; 0x22
   1c5a8:	f10a 33ff 	add.w	r3, sl, #4294967295
   1c5ac:	8463      	strh	r3, [r4, #34]	; 0x22
   1c5ae:	4628      	mov	r0, r5
   1c5b0:	f007 fad8 	bl	23b64 <z_spin_unlock_valid>
   1c5b4:	2800      	cmp	r0, #0
   1c5b6:	d042      	beq.n	1c63e <net_buf_alloc_len+0x162>
   1c5b8:	f388 8811 	msr	BASEPRI, r8
   1c5bc:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c5c0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c5c4:	3317      	adds	r3, #23
   1c5c6:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1c5ca:	8c22      	ldrh	r2, [r4, #32]
   1c5cc:	eba2 0a0a 	sub.w	sl, r2, sl
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1c5d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1c5d2:	fb0a 2a03 	mla	sl, sl, r3, r2
	buf->pool_id = pool_id(pool);
   1c5d6:	4620      	mov	r0, r4
   1c5d8:	f7ff ff42 	bl	1c460 <pool_id>
   1c5dc:	f88a 0006 	strb.w	r0, [sl, #6]
	buf->user_data_size = pool->user_data_size;
   1c5e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c5e4:	f88a 3007 	strb.w	r3, [sl, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1c5e8:	9c03      	ldr	r4, [sp, #12]
   1c5ea:	2c00      	cmp	r4, #0
   1c5ec:	d078      	beq.n	1c6e0 <net_buf_alloc_len+0x204>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c5ee:	ea56 0307 	orrs.w	r3, r6, r7
   1c5f2:	d005      	beq.n	1c600 <net_buf_alloc_len+0x124>
   1c5f4:	f1b7 3fff 	cmp.w	r7, #4294967295
   1c5f8:	bf08      	it	eq
   1c5fa:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1c5fe:	d151      	bne.n	1c6a4 <net_buf_alloc_len+0x1c8>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1c600:	4632      	mov	r2, r6
   1c602:	463b      	mov	r3, r7
   1c604:	a903      	add	r1, sp, #12
   1c606:	4650      	mov	r0, sl
   1c608:	f012 fbe8 	bl	2eddc <data_alloc>
   1c60c:	4605      	mov	r5, r0
   1c60e:	f8ca 0010 	str.w	r0, [sl, #16]
		if (!buf->__buf) {
   1c612:	2800      	cmp	r0, #0
   1c614:	d05b      	beq.n	1c6ce <net_buf_alloc_len+0x1f2>
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1c616:	9b03      	ldr	r3, [sp, #12]
   1c618:	429c      	cmp	r4, r3
   1c61a:	d964      	bls.n	1c6e6 <net_buf_alloc_len+0x20a>
   1c61c:	4c3b      	ldr	r4, [pc, #236]	; (1c70c <net_buf_alloc_len+0x230>)
   1c61e:	f240 1355 	movw	r3, #341	; 0x155
   1c622:	4622      	mov	r2, r4
   1c624:	4941      	ldr	r1, [pc, #260]	; (1c72c <net_buf_alloc_len+0x250>)
   1c626:	483b      	ldr	r0, [pc, #236]	; (1c714 <net_buf_alloc_len+0x238>)
   1c628:	f00f fd8e 	bl	2c148 <printk>
   1c62c:	4840      	ldr	r0, [pc, #256]	; (1c730 <net_buf_alloc_len+0x254>)
   1c62e:	f00f fd8b 	bl	2c148 <printk>
   1c632:	f240 1155 	movw	r1, #341	; 0x155
   1c636:	4620      	mov	r0, r4
   1c638:	f00f ff8b 	bl	2c552 <assert_post_action>
   1c63c:	e053      	b.n	1c6e6 <net_buf_alloc_len+0x20a>
   1c63e:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 1c720 <net_buf_alloc_len+0x244>
   1c642:	23ac      	movs	r3, #172	; 0xac
   1c644:	465a      	mov	r2, fp
   1c646:	4937      	ldr	r1, [pc, #220]	; (1c724 <net_buf_alloc_len+0x248>)
   1c648:	4832      	ldr	r0, [pc, #200]	; (1c714 <net_buf_alloc_len+0x238>)
   1c64a:	f00f fd7d 	bl	2c148 <printk>
   1c64e:	4629      	mov	r1, r5
   1c650:	4835      	ldr	r0, [pc, #212]	; (1c728 <net_buf_alloc_len+0x24c>)
   1c652:	f00f fd79 	bl	2c148 <printk>
   1c656:	21ac      	movs	r1, #172	; 0xac
   1c658:	4658      	mov	r0, fp
   1c65a:	f00f ff7a 	bl	2c552 <assert_post_action>
   1c65e:	e7ab      	b.n	1c5b8 <net_buf_alloc_len+0xdc>
   1c660:	4628      	mov	r0, r5
   1c662:	f007 fa7f 	bl	23b64 <z_spin_unlock_valid>
   1c666:	b160      	cbz	r0, 1c682 <net_buf_alloc_len+0x1a6>
   1c668:	f388 8811 	msr	BASEPRI, r8
   1c66c:	f3bf 8f6f 	isb	sy
   1c670:	4632      	mov	r2, r6
   1c672:	463b      	mov	r3, r7
   1c674:	4620      	mov	r0, r4
   1c676:	f007 ff9d 	bl	245b4 <z_impl_k_queue_get>
	if (!buf) {
   1c67a:	4682      	mov	sl, r0
   1c67c:	2800      	cmp	r0, #0
   1c67e:	d1b3      	bne.n	1c5e8 <net_buf_alloc_len+0x10c>
   1c680:	e03f      	b.n	1c702 <net_buf_alloc_len+0x226>
   1c682:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1c720 <net_buf_alloc_len+0x244>
   1c686:	23ac      	movs	r3, #172	; 0xac
   1c688:	4652      	mov	r2, sl
   1c68a:	4926      	ldr	r1, [pc, #152]	; (1c724 <net_buf_alloc_len+0x248>)
   1c68c:	4821      	ldr	r0, [pc, #132]	; (1c714 <net_buf_alloc_len+0x238>)
   1c68e:	f00f fd5b 	bl	2c148 <printk>
   1c692:	4629      	mov	r1, r5
   1c694:	4824      	ldr	r0, [pc, #144]	; (1c728 <net_buf_alloc_len+0x24c>)
   1c696:	f00f fd57 	bl	2c148 <printk>
   1c69a:	21ac      	movs	r1, #172	; 0xac
   1c69c:	4650      	mov	r0, sl
   1c69e:	f00f ff58 	bl	2c552 <assert_post_action>
   1c6a2:	e7e1      	b.n	1c668 <net_buf_alloc_len+0x18c>
			int64_t remaining = end - sys_clock_tick_get();
   1c6a4:	f00a fdc2 	bl	2722c <sys_clock_tick_get>
   1c6a8:	ebb9 0300 	subs.w	r3, r9, r0
   1c6ac:	9300      	str	r3, [sp, #0]
   1c6ae:	9b02      	ldr	r3, [sp, #8]
   1c6b0:	eb63 0301 	sbc.w	r3, r3, r1
   1c6b4:	9301      	str	r3, [sp, #4]
			if (remaining <= 0) {
   1c6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
   1c6ba:	2a01      	cmp	r2, #1
   1c6bc:	f173 0300 	sbcs.w	r3, r3, #0
   1c6c0:	db02      	blt.n	1c6c8 <net_buf_alloc_len+0x1ec>
				timeout = Z_TIMEOUT_TICKS(remaining);
   1c6c2:	e9dd 6700 	ldrd	r6, r7, [sp]
   1c6c6:	e79b      	b.n	1c600 <net_buf_alloc_len+0x124>
				timeout = K_NO_WAIT;
   1c6c8:	2600      	movs	r6, #0
   1c6ca:	2700      	movs	r7, #0
   1c6cc:	e798      	b.n	1c600 <net_buf_alloc_len+0x124>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c6ce:	f89a 0006 	ldrb.w	r0, [sl, #6]
   1c6d2:	f7ff fed1 	bl	1c478 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1c6d6:	4651      	mov	r1, sl
   1c6d8:	f013 ff61 	bl	3059e <k_queue_prepend>
			return NULL;
   1c6dc:	46aa      	mov	sl, r5
}
   1c6de:	e010      	b.n	1c702 <net_buf_alloc_len+0x226>
#endif
	} else {
		buf->__buf = NULL;
   1c6e0:	2300      	movs	r3, #0
   1c6e2:	f8ca 3010 	str.w	r3, [sl, #16]
	}

	buf->ref   = 1U;
   1c6e6:	2301      	movs	r3, #1
   1c6e8:	f88a 3004 	strb.w	r3, [sl, #4]
	buf->flags = 0U;
   1c6ec:	2300      	movs	r3, #0
   1c6ee:	f88a 3005 	strb.w	r3, [sl, #5]
	buf->frags = NULL;
   1c6f2:	f8ca 3000 	str.w	r3, [sl]
	buf->size  = size;
   1c6f6:	9b03      	ldr	r3, [sp, #12]
   1c6f8:	f8aa 300e 	strh.w	r3, [sl, #14]
	net_buf_reset(buf);
   1c6fc:	4650      	mov	r0, sl
   1c6fe:	f7ff fec3 	bl	1c488 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1c702:	4650      	mov	r0, sl
   1c704:	b005      	add	sp, #20
   1c706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c70a:	bf00      	nop
   1c70c:	00034a60 	.word	0x00034a60
   1c710:	00034ab4 	.word	0x00034ab4
   1c714:	00031df4 	.word	0x00031df4
   1c718:	000323a4 	.word	0x000323a4
   1c71c:	000323bc 	.word	0x000323bc
   1c720:	0003234c 	.word	0x0003234c
   1c724:	00032374 	.word	0x00032374
   1c728:	0003238c 	.word	0x0003238c
   1c72c:	00034abc 	.word	0x00034abc
   1c730:	00034ad0 	.word	0x00034ad0

0001c734 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   1c736:	4605      	mov	r5, r0
   1c738:	f007 ff3c 	bl	245b4 <z_impl_k_queue_get>
	if (!buf) {
   1c73c:	4606      	mov	r6, r0
   1c73e:	b310      	cbz	r0, 1c786 <net_buf_get+0x52>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c740:	4604      	mov	r4, r0
   1c742:	e004      	b.n	1c74e <net_buf_get+0x1a>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1c744:	7963      	ldrb	r3, [r4, #5]
   1c746:	f023 0301 	bic.w	r3, r3, #1
   1c74a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c74c:	6824      	ldr	r4, [r4, #0]
   1c74e:	7963      	ldrb	r3, [r4, #5]
   1c750:	f013 0f01 	tst.w	r3, #1
   1c754:	d015      	beq.n	1c782 <net_buf_get+0x4e>
   1c756:	2200      	movs	r2, #0
   1c758:	2300      	movs	r3, #0
   1c75a:	4628      	mov	r0, r5
   1c75c:	f007 ff2a 	bl	245b4 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1c760:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1c762:	2800      	cmp	r0, #0
   1c764:	d1ee      	bne.n	1c744 <net_buf_get+0x10>
   1c766:	4f09      	ldr	r7, [pc, #36]	; (1c78c <net_buf_get+0x58>)
   1c768:	f240 13ad 	movw	r3, #429	; 0x1ad
   1c76c:	463a      	mov	r2, r7
   1c76e:	4908      	ldr	r1, [pc, #32]	; (1c790 <net_buf_get+0x5c>)
   1c770:	4808      	ldr	r0, [pc, #32]	; (1c794 <net_buf_get+0x60>)
   1c772:	f00f fce9 	bl	2c148 <printk>
   1c776:	f240 11ad 	movw	r1, #429	; 0x1ad
   1c77a:	4638      	mov	r0, r7
   1c77c:	f00f fee9 	bl	2c552 <assert_post_action>
   1c780:	e7e0      	b.n	1c744 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1c782:	2300      	movs	r3, #0
   1c784:	6023      	str	r3, [r4, #0]

	return buf;
}
   1c786:	4630      	mov	r0, r6
   1c788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c78a:	bf00      	nop
   1c78c:	00034a60 	.word	0x00034a60
   1c790:	00034ad4 	.word	0x00034ad4
   1c794:	00031df4 	.word	0x00031df4

0001c798 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1c798:	b570      	push	{r4, r5, r6, lr}
   1c79a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1c79c:	4604      	mov	r4, r0
   1c79e:	b128      	cbz	r0, 1c7ac <net_buf_simple_reserve+0x14>
	__ASSERT_NO_MSG(buf->len == 0U);
   1c7a0:	88a3      	ldrh	r3, [r4, #4]
   1c7a2:	b98b      	cbnz	r3, 1c7c8 <net_buf_simple_reserve+0x30>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1c7a4:	68a3      	ldr	r3, [r4, #8]
   1c7a6:	442b      	add	r3, r5
   1c7a8:	6023      	str	r3, [r4, #0]
}
   1c7aa:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(buf);
   1c7ac:	4e0d      	ldr	r6, [pc, #52]	; (1c7e4 <net_buf_simple_reserve+0x4c>)
   1c7ae:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   1c7b2:	4632      	mov	r2, r6
   1c7b4:	490c      	ldr	r1, [pc, #48]	; (1c7e8 <net_buf_simple_reserve+0x50>)
   1c7b6:	480d      	ldr	r0, [pc, #52]	; (1c7ec <net_buf_simple_reserve+0x54>)
   1c7b8:	f00f fcc6 	bl	2c148 <printk>
   1c7bc:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1c7c0:	4630      	mov	r0, r6
   1c7c2:	f00f fec6 	bl	2c552 <assert_post_action>
   1c7c6:	e7eb      	b.n	1c7a0 <net_buf_simple_reserve+0x8>
	__ASSERT_NO_MSG(buf->len == 0U);
   1c7c8:	4e06      	ldr	r6, [pc, #24]	; (1c7e4 <net_buf_simple_reserve+0x4c>)
   1c7ca:	f240 13c5 	movw	r3, #453	; 0x1c5
   1c7ce:	4632      	mov	r2, r6
   1c7d0:	4907      	ldr	r1, [pc, #28]	; (1c7f0 <net_buf_simple_reserve+0x58>)
   1c7d2:	4806      	ldr	r0, [pc, #24]	; (1c7ec <net_buf_simple_reserve+0x54>)
   1c7d4:	f00f fcb8 	bl	2c148 <printk>
   1c7d8:	f240 11c5 	movw	r1, #453	; 0x1c5
   1c7dc:	4630      	mov	r0, r6
   1c7de:	f00f feb8 	bl	2c552 <assert_post_action>
   1c7e2:	e7df      	b.n	1c7a4 <net_buf_simple_reserve+0xc>
   1c7e4:	00034a60 	.word	0x00034a60
   1c7e8:	00034b64 	.word	0x00034b64
   1c7ec:	00031df4 	.word	0x00031df4
   1c7f0:	00034ae0 	.word	0x00034ae0

0001c7f4 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1c7f4:	b570      	push	{r4, r5, r6, lr}
   1c7f6:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1c7f8:	4605      	mov	r5, r0
   1c7fa:	b148      	cbz	r0, 1c810 <net_buf_put+0x1c>
	__ASSERT_NO_MSG(buf);
   1c7fc:	b1b4      	cbz	r4, 1c82c <net_buf_put+0x38>
{
   1c7fe:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1c800:	6810      	ldr	r0, [r2, #0]
   1c802:	b308      	cbz	r0, 1c848 <net_buf_put+0x54>
		tail->flags |= NET_BUF_FRAGS;
   1c804:	7953      	ldrb	r3, [r2, #5]
   1c806:	f043 0301 	orr.w	r3, r3, #1
   1c80a:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1c80c:	4602      	mov	r2, r0
   1c80e:	e7f7      	b.n	1c800 <net_buf_put+0xc>
	__ASSERT_NO_MSG(fifo);
   1c810:	4e10      	ldr	r6, [pc, #64]	; (1c854 <net_buf_put+0x60>)
   1c812:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c816:	4632      	mov	r2, r6
   1c818:	490f      	ldr	r1, [pc, #60]	; (1c858 <net_buf_put+0x64>)
   1c81a:	4810      	ldr	r0, [pc, #64]	; (1c85c <net_buf_put+0x68>)
   1c81c:	f00f fc94 	bl	2c148 <printk>
   1c820:	f44f 7100 	mov.w	r1, #512	; 0x200
   1c824:	4630      	mov	r0, r6
   1c826:	f00f fe94 	bl	2c552 <assert_post_action>
   1c82a:	e7e7      	b.n	1c7fc <net_buf_put+0x8>
	__ASSERT_NO_MSG(buf);
   1c82c:	4e09      	ldr	r6, [pc, #36]	; (1c854 <net_buf_put+0x60>)
   1c82e:	f240 2301 	movw	r3, #513	; 0x201
   1c832:	4632      	mov	r2, r6
   1c834:	490a      	ldr	r1, [pc, #40]	; (1c860 <net_buf_put+0x6c>)
   1c836:	4809      	ldr	r0, [pc, #36]	; (1c85c <net_buf_put+0x68>)
   1c838:	f00f fc86 	bl	2c148 <printk>
   1c83c:	f240 2101 	movw	r1, #513	; 0x201
   1c840:	4630      	mov	r0, r6
   1c842:	f00f fe86 	bl	2c552 <assert_post_action>
   1c846:	e7da      	b.n	1c7fe <net_buf_put+0xa>
	}

	k_fifo_put_list(fifo, buf, tail);
   1c848:	4621      	mov	r1, r4
   1c84a:	4628      	mov	r0, r5
   1c84c:	f007 fe52 	bl	244f4 <k_queue_append_list>
}
   1c850:	bd70      	pop	{r4, r5, r6, pc}
   1c852:	bf00      	nop
   1c854:	00034a60 	.word	0x00034a60
   1c858:	00034af0 	.word	0x00034af0
   1c85c:	00031df4 	.word	0x00031df4
   1c860:	00034b64 	.word	0x00034b64

0001c864 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1c864:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1c866:	4604      	mov	r4, r0
   1c868:	b9e8      	cbnz	r0, 1c8a6 <net_buf_unref+0x42>
   1c86a:	4d18      	ldr	r5, [pc, #96]	; (1c8cc <net_buf_unref+0x68>)
   1c86c:	f44f 7304 	mov.w	r3, #528	; 0x210
   1c870:	462a      	mov	r2, r5
   1c872:	4917      	ldr	r1, [pc, #92]	; (1c8d0 <net_buf_unref+0x6c>)
   1c874:	4817      	ldr	r0, [pc, #92]	; (1c8d4 <net_buf_unref+0x70>)
   1c876:	f00f fc67 	bl	2c148 <printk>
   1c87a:	f44f 7104 	mov.w	r1, #528	; 0x210
   1c87e:	4628      	mov	r0, r5
   1c880:	f00f fe67 	bl	2c552 <assert_post_action>
   1c884:	e00f      	b.n	1c8a6 <net_buf_unref+0x42>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   1c886:	4620      	mov	r0, r4
   1c888:	f012 fabc 	bl	2ee04 <data_unref>
			buf->__buf = NULL;
   1c88c:	2300      	movs	r3, #0
   1c88e:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   1c890:	2300      	movs	r3, #0
   1c892:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   1c894:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1c896:	79a0      	ldrb	r0, [r4, #6]
   1c898:	f7ff fdee 	bl	1c478 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1c89c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1c89e:	b16b      	cbz	r3, 1c8bc <net_buf_unref+0x58>
			pool->destroy(buf);
   1c8a0:	4620      	mov	r0, r4
   1c8a2:	4798      	blx	r3
{
   1c8a4:	462c      	mov	r4, r5
	while (buf) {
   1c8a6:	b184      	cbz	r4, 1c8ca <net_buf_unref+0x66>
		struct net_buf *frags = buf->frags;
   1c8a8:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   1c8aa:	7923      	ldrb	r3, [r4, #4]
   1c8ac:	3b01      	subs	r3, #1
   1c8ae:	b2db      	uxtb	r3, r3
   1c8b0:	7123      	strb	r3, [r4, #4]
   1c8b2:	b953      	cbnz	r3, 1c8ca <net_buf_unref+0x66>
		if (buf->__buf) {
   1c8b4:	6921      	ldr	r1, [r4, #16]
   1c8b6:	2900      	cmp	r1, #0
   1c8b8:	d1e5      	bne.n	1c886 <net_buf_unref+0x22>
   1c8ba:	e7e9      	b.n	1c890 <net_buf_unref+0x2c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c8bc:	79a0      	ldrb	r0, [r4, #6]
   1c8be:	f7ff fddb 	bl	1c478 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1c8c2:	4621      	mov	r1, r4
   1c8c4:	f013 fe6b 	bl	3059e <k_queue_prepend>
}
   1c8c8:	e7ec      	b.n	1c8a4 <net_buf_unref+0x40>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1c8ca:	bd38      	pop	{r3, r4, r5, pc}
   1c8cc:	00034a60 	.word	0x00034a60
   1c8d0:	00034b64 	.word	0x00034b64
   1c8d4:	00031df4 	.word	0x00031df4

0001c8d8 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1c8d8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1c8da:	4604      	mov	r4, r0
   1c8dc:	b120      	cbz	r0, 1c8e8 <net_buf_ref+0x10>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1c8de:	7923      	ldrb	r3, [r4, #4]
   1c8e0:	3301      	adds	r3, #1
   1c8e2:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1c8e4:	4620      	mov	r0, r4
   1c8e6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf);
   1c8e8:	4d06      	ldr	r5, [pc, #24]	; (1c904 <net_buf_ref+0x2c>)
   1c8ea:	f240 233f 	movw	r3, #575	; 0x23f
   1c8ee:	462a      	mov	r2, r5
   1c8f0:	4905      	ldr	r1, [pc, #20]	; (1c908 <net_buf_ref+0x30>)
   1c8f2:	4806      	ldr	r0, [pc, #24]	; (1c90c <net_buf_ref+0x34>)
   1c8f4:	f00f fc28 	bl	2c148 <printk>
   1c8f8:	f240 213f 	movw	r1, #575	; 0x23f
   1c8fc:	4628      	mov	r0, r5
   1c8fe:	f00f fe28 	bl	2c552 <assert_post_action>
   1c902:	e7ec      	b.n	1c8de <net_buf_ref+0x6>
   1c904:	00034a60 	.word	0x00034a60
   1c908:	00034b64 	.word	0x00034b64
   1c90c:	00031df4 	.word	0x00031df4

0001c910 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1c910:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1c912:	4604      	mov	r4, r0
   1c914:	b120      	cbz	r0, 1c920 <net_buf_frag_last+0x10>

	while (buf->frags) {
   1c916:	4620      	mov	r0, r4
   1c918:	6824      	ldr	r4, [r4, #0]
   1c91a:	2c00      	cmp	r4, #0
   1c91c:	d1fb      	bne.n	1c916 <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   1c91e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf);
   1c920:	4d06      	ldr	r5, [pc, #24]	; (1c93c <net_buf_frag_last+0x2c>)
   1c922:	f44f 731f 	mov.w	r3, #636	; 0x27c
   1c926:	462a      	mov	r2, r5
   1c928:	4905      	ldr	r1, [pc, #20]	; (1c940 <net_buf_frag_last+0x30>)
   1c92a:	4806      	ldr	r0, [pc, #24]	; (1c944 <net_buf_frag_last+0x34>)
   1c92c:	f00f fc0c 	bl	2c148 <printk>
   1c930:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1c934:	4628      	mov	r0, r5
   1c936:	f00f fe0c 	bl	2c552 <assert_post_action>
   1c93a:	e7ec      	b.n	1c916 <net_buf_frag_last+0x6>
   1c93c:	00034a60 	.word	0x00034a60
   1c940:	00034b64 	.word	0x00034b64
   1c944:	00031df4 	.word	0x00031df4

0001c948 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1c948:	b570      	push	{r4, r5, r6, lr}
   1c94a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(parent);
   1c94c:	4605      	mov	r5, r0
   1c94e:	b148      	cbz	r0, 1c964 <net_buf_frag_insert+0x1c>
	__ASSERT_NO_MSG(frag);
   1c950:	b1b4      	cbz	r4, 1c980 <net_buf_frag_insert+0x38>

	if (parent->frags) {
   1c952:	682b      	ldr	r3, [r5, #0]
   1c954:	b123      	cbz	r3, 1c960 <net_buf_frag_insert+0x18>
		net_buf_frag_last(frag)->frags = parent->frags;
   1c956:	4620      	mov	r0, r4
   1c958:	f7ff ffda 	bl	1c910 <net_buf_frag_last>
   1c95c:	682b      	ldr	r3, [r5, #0]
   1c95e:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1c960:	602c      	str	r4, [r5, #0]
}
   1c962:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(parent);
   1c964:	4e0d      	ldr	r6, [pc, #52]	; (1c99c <net_buf_frag_insert+0x54>)
   1c966:	f240 2387 	movw	r3, #647	; 0x287
   1c96a:	4632      	mov	r2, r6
   1c96c:	490c      	ldr	r1, [pc, #48]	; (1c9a0 <net_buf_frag_insert+0x58>)
   1c96e:	480d      	ldr	r0, [pc, #52]	; (1c9a4 <net_buf_frag_insert+0x5c>)
   1c970:	f00f fbea 	bl	2c148 <printk>
   1c974:	f240 2187 	movw	r1, #647	; 0x287
   1c978:	4630      	mov	r0, r6
   1c97a:	f00f fdea 	bl	2c552 <assert_post_action>
   1c97e:	e7e7      	b.n	1c950 <net_buf_frag_insert+0x8>
	__ASSERT_NO_MSG(frag);
   1c980:	4e06      	ldr	r6, [pc, #24]	; (1c99c <net_buf_frag_insert+0x54>)
   1c982:	f44f 7322 	mov.w	r3, #648	; 0x288
   1c986:	4632      	mov	r2, r6
   1c988:	4907      	ldr	r1, [pc, #28]	; (1c9a8 <net_buf_frag_insert+0x60>)
   1c98a:	4806      	ldr	r0, [pc, #24]	; (1c9a4 <net_buf_frag_insert+0x5c>)
   1c98c:	f00f fbdc 	bl	2c148 <printk>
   1c990:	f44f 7122 	mov.w	r1, #648	; 0x288
   1c994:	4630      	mov	r0, r6
   1c996:	f00f fddc 	bl	2c552 <assert_post_action>
   1c99a:	e7da      	b.n	1c952 <net_buf_frag_insert+0xa>
   1c99c:	00034a60 	.word	0x00034a60
   1c9a0:	00034af8 	.word	0x00034af8
   1c9a4:	00031df4 	.word	0x00031df4
   1c9a8:	00034b00 	.word	0x00034b00

0001c9ac <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1c9ac:	b570      	push	{r4, r5, r6, lr}
   1c9ae:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1c9b0:	460d      	mov	r5, r1
   1c9b2:	b141      	cbz	r1, 1c9c6 <net_buf_frag_add+0x1a>

	if (!head) {
   1c9b4:	b1ac      	cbz	r4, 1c9e2 <net_buf_frag_add+0x36>
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1c9b6:	4620      	mov	r0, r4
   1c9b8:	f7ff ffaa 	bl	1c910 <net_buf_frag_last>
   1c9bc:	4629      	mov	r1, r5
   1c9be:	f7ff ffc3 	bl	1c948 <net_buf_frag_insert>

	return head;
   1c9c2:	4620      	mov	r0, r4
}
   1c9c4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(frag);
   1c9c6:	4e09      	ldr	r6, [pc, #36]	; (1c9ec <net_buf_frag_add+0x40>)
   1c9c8:	f240 2393 	movw	r3, #659	; 0x293
   1c9cc:	4632      	mov	r2, r6
   1c9ce:	4908      	ldr	r1, [pc, #32]	; (1c9f0 <net_buf_frag_add+0x44>)
   1c9d0:	4808      	ldr	r0, [pc, #32]	; (1c9f4 <net_buf_frag_add+0x48>)
   1c9d2:	f00f fbb9 	bl	2c148 <printk>
   1c9d6:	f240 2193 	movw	r1, #659	; 0x293
   1c9da:	4630      	mov	r0, r6
   1c9dc:	f00f fdb9 	bl	2c552 <assert_post_action>
   1c9e0:	e7e8      	b.n	1c9b4 <net_buf_frag_add+0x8>
		return net_buf_ref(frag);
   1c9e2:	4628      	mov	r0, r5
   1c9e4:	f7ff ff78 	bl	1c8d8 <net_buf_ref>
   1c9e8:	e7ec      	b.n	1c9c4 <net_buf_frag_add+0x18>
   1c9ea:	bf00      	nop
   1c9ec:	00034a60 	.word	0x00034a60
   1c9f0:	00034b00 	.word	0x00034b00
   1c9f4:	00031df4 	.word	0x00031df4

0001c9f8 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1c9f8:	b570      	push	{r4, r5, r6, lr}
   1c9fa:	4604      	mov	r4, r0
   1c9fc:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   1c9fe:	8883      	ldrh	r3, [r0, #4]
   1ca00:	428b      	cmp	r3, r1
   1ca02:	d306      	bcc.n	1ca12 <net_buf_simple_pull+0x1a>

	buf->len -= len;
   1ca04:	88a3      	ldrh	r3, [r4, #4]
   1ca06:	1b5b      	subs	r3, r3, r5
   1ca08:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1ca0a:	6820      	ldr	r0, [r4, #0]
   1ca0c:	4428      	add	r0, r5
   1ca0e:	6020      	str	r0, [r4, #0]
}
   1ca10:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(buf->len >= len);
   1ca12:	4e07      	ldr	r6, [pc, #28]	; (1ca30 <net_buf_simple_pull+0x38>)
   1ca14:	f240 4377 	movw	r3, #1143	; 0x477
   1ca18:	4632      	mov	r2, r6
   1ca1a:	4906      	ldr	r1, [pc, #24]	; (1ca34 <net_buf_simple_pull+0x3c>)
   1ca1c:	4806      	ldr	r0, [pc, #24]	; (1ca38 <net_buf_simple_pull+0x40>)
   1ca1e:	f00f fb93 	bl	2c148 <printk>
   1ca22:	f240 4177 	movw	r1, #1143	; 0x477
   1ca26:	4630      	mov	r0, r6
   1ca28:	f00f fd93 	bl	2c552 <assert_post_action>
   1ca2c:	e7ea      	b.n	1ca04 <net_buf_simple_pull+0xc>
   1ca2e:	bf00      	nop
   1ca30:	00034a60 	.word	0x00034a60
   1ca34:	00034b08 	.word	0x00034b08
   1ca38:	00031df4 	.word	0x00031df4

0001ca3c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca3e:	4604      	mov	r4, r0
   1ca40:	460d      	mov	r5, r1
	void *data = buf->data;
   1ca42:	6806      	ldr	r6, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   1ca44:	8883      	ldrh	r3, [r0, #4]
   1ca46:	428b      	cmp	r3, r1
   1ca48:	d307      	bcc.n	1ca5a <net_buf_simple_pull_mem+0x1e>

	buf->len -= len;
   1ca4a:	88a3      	ldrh	r3, [r4, #4]
   1ca4c:	1b5b      	subs	r3, r3, r5
   1ca4e:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1ca50:	6821      	ldr	r1, [r4, #0]
   1ca52:	4429      	add	r1, r5
   1ca54:	6021      	str	r1, [r4, #0]

	return data;
}
   1ca56:	4630      	mov	r0, r6
   1ca58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(buf->len >= len);
   1ca5a:	4f07      	ldr	r7, [pc, #28]	; (1ca78 <net_buf_simple_pull_mem+0x3c>)
   1ca5c:	f240 4383 	movw	r3, #1155	; 0x483
   1ca60:	463a      	mov	r2, r7
   1ca62:	4906      	ldr	r1, [pc, #24]	; (1ca7c <net_buf_simple_pull_mem+0x40>)
   1ca64:	4806      	ldr	r0, [pc, #24]	; (1ca80 <net_buf_simple_pull_mem+0x44>)
   1ca66:	f00f fb6f 	bl	2c148 <printk>
   1ca6a:	f240 4183 	movw	r1, #1155	; 0x483
   1ca6e:	4638      	mov	r0, r7
   1ca70:	f00f fd6f 	bl	2c552 <assert_post_action>
   1ca74:	e7e9      	b.n	1ca4a <net_buf_simple_pull_mem+0xe>
   1ca76:	bf00      	nop
   1ca78:	00034a60 	.word	0x00034a60
   1ca7c:	00034b08 	.word	0x00034b08
   1ca80:	00031df4 	.word	0x00031df4

0001ca84 <net_buf_simple_push>:
{
   1ca84:	b570      	push	{r4, r5, r6, lr}
   1ca86:	4605      	mov	r5, r0
   1ca88:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1ca8a:	f012 fa00 	bl	2ee8e <net_buf_simple_headroom>
   1ca8e:	42a0      	cmp	r0, r4
   1ca90:	d306      	bcc.n	1caa0 <net_buf_simple_push+0x1c>
	buf->data -= len;
   1ca92:	6828      	ldr	r0, [r5, #0]
   1ca94:	1b00      	subs	r0, r0, r4
   1ca96:	6028      	str	r0, [r5, #0]
	buf->len += len;
   1ca98:	88a9      	ldrh	r1, [r5, #4]
   1ca9a:	440c      	add	r4, r1
   1ca9c:	80ac      	strh	r4, [r5, #4]
}
   1ca9e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1caa0:	4e06      	ldr	r6, [pc, #24]	; (1cabc <net_buf_simple_push+0x38>)
   1caa2:	f240 4317 	movw	r3, #1047	; 0x417
   1caa6:	4632      	mov	r2, r6
   1caa8:	4905      	ldr	r1, [pc, #20]	; (1cac0 <net_buf_simple_push+0x3c>)
   1caaa:	4806      	ldr	r0, [pc, #24]	; (1cac4 <net_buf_simple_push+0x40>)
   1caac:	f00f fb4c 	bl	2c148 <printk>
   1cab0:	f240 4117 	movw	r1, #1047	; 0x417
   1cab4:	4630      	mov	r0, r6
   1cab6:	f00f fd4c 	bl	2c552 <assert_post_action>
   1caba:	e7ea      	b.n	1ca92 <net_buf_simple_push+0xe>
   1cabc:	00034a60 	.word	0x00034a60
   1cac0:	00034b18 	.word	0x00034b18
   1cac4:	00031df4 	.word	0x00031df4

0001cac8 <net_buf_simple_add>:
{
   1cac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1caca:	4604      	mov	r4, r0
   1cacc:	460d      	mov	r5, r1
	return buf->data + buf->len;
   1cace:	6803      	ldr	r3, [r0, #0]
   1cad0:	8886      	ldrh	r6, [r0, #4]
   1cad2:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1cad4:	f012 f9df 	bl	2ee96 <net_buf_simple_tailroom>
   1cad8:	42a8      	cmp	r0, r5
   1cada:	d304      	bcc.n	1cae6 <net_buf_simple_add+0x1e>
	buf->len += len;
   1cadc:	88a1      	ldrh	r1, [r4, #4]
   1cade:	440d      	add	r5, r1
   1cae0:	80a5      	strh	r5, [r4, #4]
}
   1cae2:	4630      	mov	r0, r6
   1cae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1cae6:	4f07      	ldr	r7, [pc, #28]	; (1cb04 <net_buf_simple_add+0x3c>)
   1cae8:	f44f 734a 	mov.w	r3, #808	; 0x328
   1caec:	463a      	mov	r2, r7
   1caee:	4906      	ldr	r1, [pc, #24]	; (1cb08 <net_buf_simple_add+0x40>)
   1caf0:	4806      	ldr	r0, [pc, #24]	; (1cb0c <net_buf_simple_add+0x44>)
   1caf2:	f00f fb29 	bl	2c148 <printk>
   1caf6:	f44f 714a 	mov.w	r1, #808	; 0x328
   1cafa:	4638      	mov	r0, r7
   1cafc:	f00f fd29 	bl	2c552 <assert_post_action>
   1cb00:	e7ec      	b.n	1cadc <net_buf_simple_add+0x14>
   1cb02:	bf00      	nop
   1cb04:	00034a60 	.word	0x00034a60
   1cb08:	00034b3c 	.word	0x00034b3c
   1cb0c:	00031df4 	.word	0x00031df4

0001cb10 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1cb10:	4800      	ldr	r0, [pc, #0]	; (1cb14 <get_hf_flags+0x4>)
   1cb12:	4770      	bx	lr
   1cb14:	20002ebc 	.word	0x20002ebc

0001cb18 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1cb18:	4b01      	ldr	r3, [pc, #4]	; (1cb20 <get_subsys+0x8>)
   1cb1a:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
   1cb1c:	1140      	asrs	r0, r0, #5
   1cb1e:	4770      	bx	lr
   1cb20:	20002e74 	.word	0x20002e74

0001cb24 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1cb24:	b530      	push	{r4, r5, lr}
   1cb26:	b083      	sub	sp, #12
   1cb28:	4605      	mov	r5, r0
   1cb2a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1cb2c:	f7ff fff4 	bl	1cb18 <get_subsys>
   1cb30:	4601      	mov	r1, r0
   1cb32:	2340      	movs	r3, #64	; 0x40
   1cb34:	9300      	str	r3, [sp, #0]
   1cb36:	4623      	mov	r3, r4
   1cb38:	4a05      	ldr	r2, [pc, #20]	; (1cb50 <onoff_start+0x2c>)
   1cb3a:	4806      	ldr	r0, [pc, #24]	; (1cb54 <onoff_start+0x30>)
   1cb3c:	f012 fa35 	bl	2efaa <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1cb40:	1e01      	subs	r1, r0, #0
   1cb42:	db01      	blt.n	1cb48 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1cb44:	b003      	add	sp, #12
   1cb46:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1cb48:	4628      	mov	r0, r5
   1cb4a:	47a0      	blx	r4
}
   1cb4c:	e7fa      	b.n	1cb44 <onoff_start+0x20>
   1cb4e:	bf00      	nop
   1cb50:	0002eff3 	.word	0x0002eff3
   1cb54:	00031674 	.word	0x00031674

0001cb58 <generic_hfclk_stop>:
{
   1cb58:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cb5a:	4b0a      	ldr	r3, [pc, #40]	; (1cb84 <generic_hfclk_stop+0x2c>)
   1cb5c:	f3bf 8f5b 	dmb	ish
   1cb60:	e853 2f00 	ldrex	r2, [r3]
   1cb64:	f022 0102 	bic.w	r1, r2, #2
   1cb68:	e843 1000 	strex	r0, r1, [r3]
   1cb6c:	2800      	cmp	r0, #0
   1cb6e:	d1f7      	bne.n	1cb60 <generic_hfclk_stop+0x8>
   1cb70:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1cb74:	f012 0f01 	tst.w	r2, #1
   1cb78:	d000      	beq.n	1cb7c <generic_hfclk_stop+0x24>
}
   1cb7a:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1cb7c:	f012 fa4b 	bl	2f016 <hfclk_stop>
   1cb80:	e7fb      	b.n	1cb7a <generic_hfclk_stop+0x22>
   1cb82:	bf00      	nop
   1cb84:	20002ecc 	.word	0x20002ecc

0001cb88 <generic_hfclk_start>:
{
   1cb88:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cb8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb8e:	f3ef 8411 	mrs	r4, BASEPRI
   1cb92:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb96:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1cb9a:	4a13      	ldr	r2, [pc, #76]	; (1cbe8 <generic_hfclk_start+0x60>)
   1cb9c:	6813      	ldr	r3, [r2, #0]
   1cb9e:	f043 0302 	orr.w	r3, r3, #2
   1cba2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1cba4:	f013 0f01 	tst.w	r3, #1
   1cba8:	d108      	bne.n	1cbbc <generic_hfclk_start+0x34>
	bool already_started = false;
   1cbaa:	2300      	movs	r3, #0
	__asm__ volatile(
   1cbac:	f384 8811 	msr	BASEPRI, r4
   1cbb0:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1cbb4:	b99b      	cbnz	r3, 1cbde <generic_hfclk_start+0x56>
	hfclk_start();
   1cbb6:	f012 fa24 	bl	2f002 <hfclk_start>
}
   1cbba:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1cbbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cbc0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1cbc4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1cbc8:	f012 0f01 	tst.w	r2, #1
   1cbcc:	d101      	bne.n	1cbd2 <generic_hfclk_start+0x4a>
	bool already_started = false;
   1cbce:	2300      	movs	r3, #0
   1cbd0:	e7ec      	b.n	1cbac <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   1cbd2:	f7ff ff9d 	bl	1cb10 <get_hf_flags>
   1cbd6:	f012 f9c3 	bl	2ef60 <set_on_state>
			already_started = true;
   1cbda:	2301      	movs	r3, #1
   1cbdc:	e7e6      	b.n	1cbac <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   1cbde:	2100      	movs	r1, #0
   1cbe0:	4802      	ldr	r0, [pc, #8]	; (1cbec <generic_hfclk_start+0x64>)
   1cbe2:	f012 f9d0 	bl	2ef86 <clkstarted_handle>
		return;
   1cbe6:	e7e8      	b.n	1cbba <generic_hfclk_start+0x32>
   1cbe8:	20002ecc 	.word	0x20002ecc
   1cbec:	00031674 	.word	0x00031674

0001cbf0 <get_status>:
{
   1cbf0:	b570      	push	{r4, r5, r6, lr}
   1cbf2:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1cbf4:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cbf6:	2c01      	cmp	r4, #1
   1cbf8:	d807      	bhi.n	1cc0a <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1cbfa:	4621      	mov	r1, r4
   1cbfc:	4628      	mov	r0, r5
   1cbfe:	f012 f965 	bl	2eecc <get_sub_data>
   1cc02:	6880      	ldr	r0, [r0, #8]
}
   1cc04:	f000 0007 	and.w	r0, r0, #7
   1cc08:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cc0a:	4e06      	ldr	r6, [pc, #24]	; (1cc24 <get_status+0x34>)
   1cc0c:	2379      	movs	r3, #121	; 0x79
   1cc0e:	4632      	mov	r2, r6
   1cc10:	4905      	ldr	r1, [pc, #20]	; (1cc28 <get_status+0x38>)
   1cc12:	4806      	ldr	r0, [pc, #24]	; (1cc2c <get_status+0x3c>)
   1cc14:	f00f fa98 	bl	2c148 <printk>
   1cc18:	2179      	movs	r1, #121	; 0x79
   1cc1a:	4630      	mov	r0, r6
   1cc1c:	f00f fc99 	bl	2c552 <assert_post_action>
   1cc20:	e7eb      	b.n	1cbfa <get_status+0xa>
   1cc22:	bf00      	nop
   1cc24:	00034b74 	.word	0x00034b74
   1cc28:	00034bb4 	.word	0x00034bb4
   1cc2c:	00031df4 	.word	0x00031df4

0001cc30 <stop>:
{
   1cc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc34:	4607      	mov	r7, r0
   1cc36:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1cc38:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1cc3a:	4621      	mov	r1, r4
   1cc3c:	f012 f946 	bl	2eecc <get_sub_data>
   1cc40:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cc42:	2c01      	cmp	r4, #1
   1cc44:	d80f      	bhi.n	1cc66 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
   1cc46:	4631      	mov	r1, r6
   1cc48:	f105 0008 	add.w	r0, r5, #8
   1cc4c:	f012 f94f 	bl	2eeee <set_off_state>
	if (err < 0) {
   1cc50:	2800      	cmp	r0, #0
   1cc52:	db06      	blt.n	1cc62 <stop+0x32>
	get_sub_config(dev, type)->stop();
   1cc54:	4621      	mov	r1, r4
   1cc56:	4638      	mov	r0, r7
   1cc58:	f012 f93f 	bl	2eeda <get_sub_config>
   1cc5c:	6843      	ldr	r3, [r0, #4]
   1cc5e:	4798      	blx	r3
	return 0;
   1cc60:	2000      	movs	r0, #0
}
   1cc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cc66:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1cc8c <stop+0x5c>
   1cc6a:	f240 134d 	movw	r3, #333	; 0x14d
   1cc6e:	4642      	mov	r2, r8
   1cc70:	4904      	ldr	r1, [pc, #16]	; (1cc84 <stop+0x54>)
   1cc72:	4805      	ldr	r0, [pc, #20]	; (1cc88 <stop+0x58>)
   1cc74:	f00f fa68 	bl	2c148 <printk>
   1cc78:	f240 114d 	movw	r1, #333	; 0x14d
   1cc7c:	4640      	mov	r0, r8
   1cc7e:	f00f fc68 	bl	2c552 <assert_post_action>
   1cc82:	e7e0      	b.n	1cc46 <stop+0x16>
   1cc84:	00034bb4 	.word	0x00034bb4
   1cc88:	00031df4 	.word	0x00031df4
   1cc8c:	00034b74 	.word	0x00034b74

0001cc90 <onoff_stop>:
{
   1cc90:	b538      	push	{r3, r4, r5, lr}
   1cc92:	4605      	mov	r5, r0
   1cc94:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1cc96:	f7ff ff3f 	bl	1cb18 <get_subsys>
   1cc9a:	4601      	mov	r1, r0
   1cc9c:	2240      	movs	r2, #64	; 0x40
   1cc9e:	4803      	ldr	r0, [pc, #12]	; (1ccac <onoff_stop+0x1c>)
   1cca0:	f7ff ffc6 	bl	1cc30 <stop>
   1cca4:	4601      	mov	r1, r0
	notify(mgr, res);
   1cca6:	4628      	mov	r0, r5
   1cca8:	47a0      	blx	r4
}
   1ccaa:	bd38      	pop	{r3, r4, r5, pc}
   1ccac:	00031674 	.word	0x00031674

0001ccb0 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1ccb0:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1ccb2:	2801      	cmp	r0, #1
   1ccb4:	d01d      	beq.n	1ccf2 <clock_event_handler+0x42>
   1ccb6:	2803      	cmp	r0, #3
   1ccb8:	d020      	beq.n	1ccfc <clock_event_handler+0x4c>
   1ccba:	b168      	cbz	r0, 1ccd8 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
   1ccbc:	4c16      	ldr	r4, [pc, #88]	; (1cd18 <clock_event_handler+0x68>)
   1ccbe:	f240 2362 	movw	r3, #610	; 0x262
   1ccc2:	4622      	mov	r2, r4
   1ccc4:	4915      	ldr	r1, [pc, #84]	; (1cd1c <clock_event_handler+0x6c>)
   1ccc6:	4816      	ldr	r0, [pc, #88]	; (1cd20 <clock_event_handler+0x70>)
   1ccc8:	f00f fa3e 	bl	2c148 <printk>
   1cccc:	f240 2162 	movw	r1, #610	; 0x262
   1ccd0:	4620      	mov	r0, r4
   1ccd2:	f00f fc3e 	bl	2c552 <assert_post_action>
		break;
	}
}
   1ccd6:	e010      	b.n	1ccfa <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1ccd8:	2100      	movs	r1, #0
   1ccda:	4812      	ldr	r0, [pc, #72]	; (1cd24 <clock_event_handler+0x74>)
   1ccdc:	f012 f8f6 	bl	2eecc <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1cce0:	6883      	ldr	r3, [r0, #8]
   1cce2:	f013 0f07 	tst.w	r3, #7
   1cce6:	d108      	bne.n	1ccfa <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1cce8:	2100      	movs	r1, #0
   1ccea:	480e      	ldr	r0, [pc, #56]	; (1cd24 <clock_event_handler+0x74>)
   1ccec:	f012 f94b 	bl	2ef86 <clkstarted_handle>
   1ccf0:	e003      	b.n	1ccfa <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ccf2:	2101      	movs	r1, #1
   1ccf4:	480b      	ldr	r0, [pc, #44]	; (1cd24 <clock_event_handler+0x74>)
   1ccf6:	f012 f946 	bl	2ef86 <clkstarted_handle>
}
   1ccfa:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
   1ccfc:	4c06      	ldr	r4, [pc, #24]	; (1cd18 <clock_event_handler+0x68>)
   1ccfe:	f240 235e 	movw	r3, #606	; 0x25e
   1cd02:	4622      	mov	r2, r4
   1cd04:	4905      	ldr	r1, [pc, #20]	; (1cd1c <clock_event_handler+0x6c>)
   1cd06:	4806      	ldr	r0, [pc, #24]	; (1cd20 <clock_event_handler+0x70>)
   1cd08:	f00f fa1e 	bl	2c148 <printk>
   1cd0c:	f240 215e 	movw	r1, #606	; 0x25e
   1cd10:	4620      	mov	r0, r4
   1cd12:	f00f fc1e 	bl	2c552 <assert_post_action>
		break;
   1cd16:	e7f0      	b.n	1ccfa <clock_event_handler+0x4a>
   1cd18:	00034b74 	.word	0x00034b74
   1cd1c:	000364dc 	.word	0x000364dc
   1cd20:	00031df4 	.word	0x00031df4
   1cd24:	00031674 	.word	0x00031674

0001cd28 <api_blocking_start>:
{
   1cd28:	b500      	push	{lr}
   1cd2a:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1cd2c:	f8cd d000 	str.w	sp, [sp]
   1cd30:	f8cd d004 	str.w	sp, [sp, #4]
   1cd34:	2300      	movs	r3, #0
   1cd36:	9302      	str	r3, [sp, #8]
   1cd38:	2301      	movs	r3, #1
   1cd3a:	9303      	str	r3, [sp, #12]
   1cd3c:	ab04      	add	r3, sp, #16
   1cd3e:	9304      	str	r3, [sp, #16]
   1cd40:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1cd42:	466b      	mov	r3, sp
   1cd44:	4a06      	ldr	r2, [pc, #24]	; (1cd60 <api_blocking_start+0x38>)
   1cd46:	f012 f94c 	bl	2efe2 <api_start>
	if (err < 0) {
   1cd4a:	2800      	cmp	r0, #0
   1cd4c:	db05      	blt.n	1cd5a <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1cd4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1cd52:	2300      	movs	r3, #0
   1cd54:	4668      	mov	r0, sp
   1cd56:	f007 fd03 	bl	24760 <z_impl_k_sem_take>
}
   1cd5a:	b007      	add	sp, #28
   1cd5c:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd60:	0002f035 	.word	0x0002f035

0001cd64 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1cd64:	b570      	push	{r4, r5, r6, lr}
   1cd66:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1cd68:	2200      	movs	r2, #0
   1cd6a:	2101      	movs	r1, #1
   1cd6c:	4610      	mov	r0, r2
   1cd6e:	f7f8 f9fb 	bl	15168 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1cd72:	2000      	movs	r0, #0
   1cd74:	f7f8 f9c6 	bl	15104 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1cd78:	4811      	ldr	r0, [pc, #68]	; (1cdc0 <clk_init+0x5c>)
   1cd7a:	f003 fc27 	bl	205cc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1cd7e:	4b11      	ldr	r3, [pc, #68]	; (1cdc4 <clk_init+0x60>)
   1cd80:	4298      	cmp	r0, r3
   1cd82:	d11a      	bne.n	1cdba <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1cd84:	f013 faa5 	bl	302d2 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1cd88:	2400      	movs	r4, #0
   1cd8a:	e003      	b.n	1cd94 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1cd8c:	2301      	movs	r3, #1
   1cd8e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1cd90:	441c      	add	r4, r3
   1cd92:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   1cd94:	2c01      	cmp	r4, #1
   1cd96:	d80e      	bhi.n	1cdb6 <clk_init+0x52>
						get_sub_data(dev, i);
   1cd98:	4621      	mov	r1, r4
   1cd9a:	4630      	mov	r0, r6
   1cd9c:	f012 f896 	bl	2eecc <get_sub_data>
   1cda0:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1cda2:	4621      	mov	r1, r4
   1cda4:	4630      	mov	r0, r6
   1cda6:	f012 f89e 	bl	2eee6 <get_onoff_manager>
   1cdaa:	4907      	ldr	r1, [pc, #28]	; (1cdc8 <clk_init+0x64>)
   1cdac:	f00f fa68 	bl	2c280 <onoff_manager_init>
		if (err < 0) {
   1cdb0:	2800      	cmp	r0, #0
   1cdb2:	daeb      	bge.n	1cd8c <clk_init+0x28>
   1cdb4:	e000      	b.n	1cdb8 <clk_init+0x54>
	}

	return 0;
   1cdb6:	2000      	movs	r0, #0
}
   1cdb8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1cdba:	f06f 0004 	mvn.w	r0, #4
   1cdbe:	e7fb      	b.n	1cdb8 <clk_init+0x54>
   1cdc0:	0001ccb1 	.word	0x0001ccb1
   1cdc4:	0bad0000 	.word	0x0bad0000
   1cdc8:	00034c3c 	.word	0x00034c3c

0001cdcc <lfclk_spinwait>:
{
   1cdcc:	b570      	push	{r4, r5, r6, lr}
   1cdce:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1cdd0:	2801      	cmp	r0, #1
   1cdd2:	d107      	bne.n	1cde4 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1cdd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cdd8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1cddc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1cde0:	2b01      	cmp	r3, #1
   1cde2:	d058      	beq.n	1ce96 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1cde4:	f013 fb71 	bl	304ca <k_is_in_isr>
   1cde8:	b928      	cbnz	r0, 1cdf6 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   1cdea:	4b2e      	ldr	r3, [pc, #184]	; (1cea4 <lfclk_spinwait+0xd8>)
   1cdec:	781b      	ldrb	r3, [r3, #0]
   1cdee:	2b00      	cmp	r3, #0
   1cdf0:	d041      	beq.n	1ce76 <lfclk_spinwait+0xaa>
   1cdf2:	2300      	movs	r3, #0
   1cdf4:	e000      	b.n	1cdf8 <lfclk_spinwait+0x2c>
   1cdf6:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   1cdf8:	461c      	mov	r4, r3
   1cdfa:	2b00      	cmp	r3, #0
   1cdfc:	d03d      	beq.n	1ce7a <lfclk_spinwait+0xae>
	__asm__ volatile(
   1cdfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce02:	f3ef 8611 	mrs	r6, BASEPRI
   1ce06:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce0a:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   1ce0e:	b924      	cbnz	r4, 1ce1a <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   1ce10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ce14:	2202      	movs	r2, #2
   1ce16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ce1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ce1e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1ce22:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ce26:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1ce2a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1ce2e:	d12b      	bne.n	1ce88 <lfclk_spinwait+0xbc>
    return false;
   1ce30:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1ce32:	b11a      	cbz	r2, 1ce3c <lfclk_spinwait+0x70>
   1ce34:	2b01      	cmp	r3, #1
   1ce36:	d029      	beq.n	1ce8c <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1ce38:	2d01      	cmp	r5, #1
   1ce3a:	d027      	beq.n	1ce8c <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1ce3c:	b1fc      	cbz	r4, 1ce7e <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1ce3e:	4630      	mov	r0, r6
   1ce40:	f7f8 f908 	bl	15054 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1ce44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ce48:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1ce4c:	2b00      	cmp	r3, #0
   1ce4e:	d1e4      	bne.n	1ce1a <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ce50:	4b15      	ldr	r3, [pc, #84]	; (1cea8 <lfclk_spinwait+0xdc>)
   1ce52:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1ce54:	2b00      	cmp	r3, #0
   1ce56:	d0e0      	beq.n	1ce1a <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ce58:	4b13      	ldr	r3, [pc, #76]	; (1cea8 <lfclk_spinwait+0xdc>)
   1ce5a:	2200      	movs	r2, #0
   1ce5c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1ce5e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ce60:	2301      	movs	r3, #1
   1ce62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ce66:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ce6a:	4a10      	ldr	r2, [pc, #64]	; (1ceac <lfclk_spinwait+0xe0>)
   1ce6c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ce70:	4a0f      	ldr	r2, [pc, #60]	; (1ceb0 <lfclk_spinwait+0xe4>)
   1ce72:	6013      	str	r3, [r2, #0]
}
   1ce74:	e7d1      	b.n	1ce1a <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ce76:	2301      	movs	r3, #1
   1ce78:	e7be      	b.n	1cdf8 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   1ce7a:	2600      	movs	r6, #0
   1ce7c:	e7c7      	b.n	1ce0e <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   1ce7e:	2021      	movs	r0, #33	; 0x21
   1ce80:	2100      	movs	r1, #0
   1ce82:	f009 fd11 	bl	268a8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ce86:	e7dd      	b.n	1ce44 <lfclk_spinwait+0x78>
                return true;
   1ce88:	2201      	movs	r2, #1
   1ce8a:	e7d2      	b.n	1ce32 <lfclk_spinwait+0x66>
	if (isr_mode) {
   1ce8c:	b124      	cbz	r4, 1ce98 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   1ce8e:	f386 8811 	msr	BASEPRI, r6
   1ce92:	f3bf 8f6f 	isb	sy
}
   1ce96:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   1ce98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ce9c:	2202      	movs	r2, #2
   1ce9e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1cea2:	e7f8      	b.n	1ce96 <lfclk_spinwait+0xca>
   1cea4:	20003ffa 	.word	0x20003ffa
   1cea8:	40000104 	.word	0x40000104
   1ceac:	e000e100 	.word	0xe000e100
   1ceb0:	40000008 	.word	0x40000008

0001ceb4 <z_nrf_clock_control_lf_on>:
{
   1ceb4:	b538      	push	{r3, r4, r5, lr}
   1ceb6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ceb8:	4b1f      	ldr	r3, [pc, #124]	; (1cf38 <z_nrf_clock_control_lf_on+0x84>)
   1ceba:	2101      	movs	r1, #1
   1cebc:	f3bf 8f5b 	dmb	ish
   1cec0:	e853 2f00 	ldrex	r2, [r3]
   1cec4:	e843 1000 	strex	r0, r1, [r3]
   1cec8:	2800      	cmp	r0, #0
   1ceca:	d1f9      	bne.n	1cec0 <z_nrf_clock_control_lf_on+0xc>
   1cecc:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1ced0:	b142      	cbz	r2, 1cee4 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
   1ced2:	b134      	cbz	r4, 1cee2 <z_nrf_clock_control_lf_on+0x2e>
   1ced4:	1e63      	subs	r3, r4, #1
   1ced6:	b2db      	uxtb	r3, r3
   1ced8:	2b01      	cmp	r3, #1
   1ceda:	d81e      	bhi.n	1cf1a <z_nrf_clock_control_lf_on+0x66>
		lfclk_spinwait(start_mode);
   1cedc:	4620      	mov	r0, r4
   1cede:	f7ff ff75 	bl	1cdcc <lfclk_spinwait>
}
   1cee2:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1cee4:	4815      	ldr	r0, [pc, #84]	; (1cf3c <z_nrf_clock_control_lf_on+0x88>)
   1cee6:	f011 fffe 	bl	2eee6 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1ceea:	4915      	ldr	r1, [pc, #84]	; (1cf40 <z_nrf_clock_control_lf_on+0x8c>)
   1ceec:	2300      	movs	r3, #0
   1ceee:	604b      	str	r3, [r1, #4]
   1cef0:	60cb      	str	r3, [r1, #12]
   1cef2:	2301      	movs	r3, #1
   1cef4:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   1cef6:	f7f5 f9cd 	bl	12294 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1cefa:	2800      	cmp	r0, #0
   1cefc:	dae9      	bge.n	1ced2 <z_nrf_clock_control_lf_on+0x1e>
   1cefe:	4d11      	ldr	r5, [pc, #68]	; (1cf44 <z_nrf_clock_control_lf_on+0x90>)
   1cf00:	f44f 7308 	mov.w	r3, #544	; 0x220
   1cf04:	462a      	mov	r2, r5
   1cf06:	4910      	ldr	r1, [pc, #64]	; (1cf48 <z_nrf_clock_control_lf_on+0x94>)
   1cf08:	4810      	ldr	r0, [pc, #64]	; (1cf4c <z_nrf_clock_control_lf_on+0x98>)
   1cf0a:	f00f f91d 	bl	2c148 <printk>
   1cf0e:	f44f 7108 	mov.w	r1, #544	; 0x220
   1cf12:	4628      	mov	r0, r5
   1cf14:	f00f fb1d 	bl	2c552 <assert_post_action>
   1cf18:	e7db      	b.n	1ced2 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
   1cf1a:	4c0a      	ldr	r4, [pc, #40]	; (1cf44 <z_nrf_clock_control_lf_on+0x90>)
   1cf1c:	f240 2332 	movw	r3, #562	; 0x232
   1cf20:	4622      	mov	r2, r4
   1cf22:	490b      	ldr	r1, [pc, #44]	; (1cf50 <z_nrf_clock_control_lf_on+0x9c>)
   1cf24:	4809      	ldr	r0, [pc, #36]	; (1cf4c <z_nrf_clock_control_lf_on+0x98>)
   1cf26:	f00f f90f 	bl	2c148 <printk>
   1cf2a:	f240 2132 	movw	r1, #562	; 0x232
   1cf2e:	4620      	mov	r0, r4
   1cf30:	f00f fb0f 	bl	2c552 <assert_post_action>
   1cf34:	e7d5      	b.n	1cee2 <z_nrf_clock_control_lf_on+0x2e>
   1cf36:	bf00      	nop
   1cf38:	20002ed0 	.word	0x20002ed0
   1cf3c:	00031674 	.word	0x00031674
   1cf40:	20002e64 	.word	0x20002e64
   1cf44:	00034b74 	.word	0x00034b74
   1cf48:	00034bd8 	.word	0x00034bd8
   1cf4c:	00031df4 	.word	0x00031df4
   1cf50:	000364dc 	.word	0x000364dc

0001cf54 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1cf54:	b510      	push	{r4, lr}
   1cf56:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1cf58:	280a      	cmp	r0, #10
   1cf5a:	d007      	beq.n	1cf6c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1cf5c:	4b07      	ldr	r3, [pc, #28]	; (1cf7c <console_out+0x28>)
   1cf5e:	6818      	ldr	r0, [r3, #0]
   1cf60:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1cf62:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1cf64:	69db      	ldr	r3, [r3, #28]
   1cf66:	4798      	blx	r3

	return c;
}
   1cf68:	4620      	mov	r0, r4
   1cf6a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   1cf6c:	4b03      	ldr	r3, [pc, #12]	; (1cf7c <console_out+0x28>)
   1cf6e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   1cf70:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1cf72:	69db      	ldr	r3, [r3, #28]
   1cf74:	210d      	movs	r1, #13
   1cf76:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   1cf78:	e7f0      	b.n	1cf5c <console_out+0x8>
   1cf7a:	bf00      	nop
   1cf7c:	20002ed4 	.word	0x20002ed4

0001cf80 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   1cf80:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1cf82:	4c04      	ldr	r4, [pc, #16]	; (1cf94 <uart_console_hook_install+0x14>)
   1cf84:	4620      	mov	r0, r4
   1cf86:	f7f9 f897 	bl	160b8 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   1cf8a:	4620      	mov	r0, r4
   1cf8c:	f7f4 febe 	bl	11d0c <__printk_hook_install>
#endif
}
   1cf90:	bd10      	pop	{r4, pc}
   1cf92:	bf00      	nop
   1cf94:	0001cf55 	.word	0x0001cf55

0001cf98 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1cf98:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1cf9a:	4806      	ldr	r0, [pc, #24]	; (1cfb4 <uart_console_init+0x1c>)
   1cf9c:	4b06      	ldr	r3, [pc, #24]	; (1cfb8 <uart_console_init+0x20>)
   1cf9e:	6018      	str	r0, [r3, #0]
   1cfa0:	f013 fa46 	bl	30430 <z_device_ready>
   1cfa4:	b118      	cbz	r0, 1cfae <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   1cfa6:	f7ff ffeb 	bl	1cf80 <uart_console_hook_install>

	return 0;
   1cfaa:	2000      	movs	r0, #0
}
   1cfac:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1cfae:	f06f 0012 	mvn.w	r0, #18
   1cfb2:	e7fb      	b.n	1cfac <uart_console_init+0x14>
   1cfb4:	00031704 	.word	0x00031704
   1cfb8:	20002ed4 	.word	0x20002ed4

0001cfbc <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1cfbc:	4b1f      	ldr	r3, [pc, #124]	; (1d03c <get_drive+0x80>)
   1cfbe:	4003      	ands	r3, r0
   1cfc0:	4a1f      	ldr	r2, [pc, #124]	; (1d040 <get_drive+0x84>)
   1cfc2:	4293      	cmp	r3, r2
   1cfc4:	d032      	beq.n	1d02c <get_drive+0x70>
   1cfc6:	d816      	bhi.n	1cff6 <get_drive+0x3a>
   1cfc8:	2b06      	cmp	r3, #6
   1cfca:	d02b      	beq.n	1d024 <get_drive+0x68>
   1cfcc:	d906      	bls.n	1cfdc <get_drive+0x20>
   1cfce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1cfd2:	d10d      	bne.n	1cff0 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   1cfd4:	2301      	movs	r3, #1
   1cfd6:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1cfd8:	2000      	movs	r0, #0
		break;
   1cfda:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1cfdc:	b1fb      	cbz	r3, 1d01e <get_drive+0x62>
   1cfde:	2b02      	cmp	r3, #2
   1cfe0:	d103      	bne.n	1cfea <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   1cfe2:	2304      	movs	r3, #4
   1cfe4:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1cfe6:	2000      	movs	r0, #0
		break;
   1cfe8:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1cfea:	f06f 0015 	mvn.w	r0, #21
   1cfee:	4770      	bx	lr
   1cff0:	f06f 0015 	mvn.w	r0, #21
   1cff4:	4770      	bx	lr
   1cff6:	4a13      	ldr	r2, [pc, #76]	; (1d044 <get_drive+0x88>)
   1cff8:	4293      	cmp	r3, r2
   1cffa:	d01b      	beq.n	1d034 <get_drive+0x78>
   1cffc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d000:	d103      	bne.n	1d00a <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   1d002:	2303      	movs	r3, #3
   1d004:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d006:	2000      	movs	r0, #0
		break;
   1d008:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d00a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d00e:	d103      	bne.n	1d018 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   1d010:	2302      	movs	r3, #2
   1d012:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d014:	2000      	movs	r0, #0
		break;
   1d016:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d018:	f06f 0015 	mvn.w	r0, #21
   1d01c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   1d01e:	2000      	movs	r0, #0
   1d020:	7008      	strb	r0, [r1, #0]
		break;
   1d022:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   1d024:	2306      	movs	r3, #6
   1d026:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d028:	2000      	movs	r0, #0
		break;
   1d02a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   1d02c:	2307      	movs	r3, #7
   1d02e:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d030:	2000      	movs	r0, #0
		break;
   1d032:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   1d034:	2305      	movs	r3, #5
   1d036:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d038:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   1d03a:	4770      	bx	lr
   1d03c:	00f00006 	.word	0x00f00006
   1d040:	00100006 	.word	0x00100006
   1d044:	00400002 	.word	0x00400002

0001d048 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d048:	b128      	cbz	r0, 1d056 <get_dev+0xe>
   1d04a:	2801      	cmp	r0, #1
   1d04c:	d101      	bne.n	1d052 <get_dev+0xa>
   1d04e:	4803      	ldr	r0, [pc, #12]	; (1d05c <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   1d050:	4770      	bx	lr
	const struct device *dev = NULL;
   1d052:	2000      	movs	r0, #0
   1d054:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d056:	4802      	ldr	r0, [pc, #8]	; (1d060 <get_dev+0x18>)
   1d058:	4770      	bx	lr
   1d05a:	bf00      	nop
   1d05c:	0003168c 	.word	0x0003168c
   1d060:	000316a4 	.word	0x000316a4

0001d064 <gpio_nrfx_manage_callback>:
{
   1d064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d068:	4615      	mov	r5, r2
	return port->data;
   1d06a:	6906      	ldr	r6, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d06c:	1d37      	adds	r7, r6, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1d06e:	460c      	mov	r4, r1
   1d070:	b139      	cbz	r1, 1d082 <gpio_nrfx_manage_callback+0x1e>
	__ASSERT(callback->handler, "No callback handler!");
   1d072:	6863      	ldr	r3, [r4, #4]
   1d074:	b1ab      	cbz	r3, 1d0a2 <gpio_nrfx_manage_callback+0x3e>
	return list->head;
   1d076:	6873      	ldr	r3, [r6, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1d078:	2b00      	cmp	r3, #0
   1d07a:	d03b      	beq.n	1d0f4 <gpio_nrfx_manage_callback+0x90>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1d07c:	4621      	mov	r1, r4
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d07e:	2200      	movs	r2, #0
   1d080:	e02a      	b.n	1d0d8 <gpio_nrfx_manage_callback+0x74>
	__ASSERT(callback, "No callback!");
   1d082:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1d12c <gpio_nrfx_manage_callback+0xc8>
   1d086:	2324      	movs	r3, #36	; 0x24
   1d088:	4642      	mov	r2, r8
   1d08a:	4923      	ldr	r1, [pc, #140]	; (1d118 <gpio_nrfx_manage_callback+0xb4>)
   1d08c:	4823      	ldr	r0, [pc, #140]	; (1d11c <gpio_nrfx_manage_callback+0xb8>)
   1d08e:	f00f f85b 	bl	2c148 <printk>
   1d092:	4823      	ldr	r0, [pc, #140]	; (1d120 <gpio_nrfx_manage_callback+0xbc>)
   1d094:	f00f f858 	bl	2c148 <printk>
   1d098:	2124      	movs	r1, #36	; 0x24
   1d09a:	4640      	mov	r0, r8
   1d09c:	f00f fa59 	bl	2c552 <assert_post_action>
   1d0a0:	e7e7      	b.n	1d072 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
   1d0a2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1d12c <gpio_nrfx_manage_callback+0xc8>
   1d0a6:	2325      	movs	r3, #37	; 0x25
   1d0a8:	4642      	mov	r2, r8
   1d0aa:	491e      	ldr	r1, [pc, #120]	; (1d124 <gpio_nrfx_manage_callback+0xc0>)
   1d0ac:	481b      	ldr	r0, [pc, #108]	; (1d11c <gpio_nrfx_manage_callback+0xb8>)
   1d0ae:	f00f f84b 	bl	2c148 <printk>
   1d0b2:	481d      	ldr	r0, [pc, #116]	; (1d128 <gpio_nrfx_manage_callback+0xc4>)
   1d0b4:	f00f f848 	bl	2c148 <printk>
   1d0b8:	2125      	movs	r1, #37	; 0x25
   1d0ba:	4640      	mov	r0, r8
   1d0bc:	f00f fa49 	bl	2c552 <assert_post_action>
   1d0c0:	e7d9      	b.n	1d076 <gpio_nrfx_manage_callback+0x12>
	return node->next;
   1d0c2:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1d0c4:	6073      	str	r3, [r6, #4]
	return list->tail;
   1d0c6:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d0c8:	4294      	cmp	r4, r2
   1d0ca:	d10f      	bne.n	1d0ec <gpio_nrfx_manage_callback+0x88>
	list->tail = node;
   1d0cc:	607b      	str	r3, [r7, #4]
}
   1d0ce:	e00d      	b.n	1d0ec <gpio_nrfx_manage_callback+0x88>
	list->tail = node;
   1d0d0:	607a      	str	r2, [r7, #4]
}
   1d0d2:	e00b      	b.n	1d0ec <gpio_nrfx_manage_callback+0x88>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d0d4:	461a      	mov	r2, r3
   1d0d6:	681b      	ldr	r3, [r3, #0]
   1d0d8:	b15b      	cbz	r3, 1d0f2 <gpio_nrfx_manage_callback+0x8e>
   1d0da:	4299      	cmp	r1, r3
   1d0dc:	d1fa      	bne.n	1d0d4 <gpio_nrfx_manage_callback+0x70>
Z_GENLIST_REMOVE(slist, snode)
   1d0de:	2a00      	cmp	r2, #0
   1d0e0:	d0ef      	beq.n	1d0c2 <gpio_nrfx_manage_callback+0x5e>
	return node->next;
   1d0e2:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   1d0e4:	6013      	str	r3, [r2, #0]
	return list->tail;
   1d0e6:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d0e8:	429c      	cmp	r4, r3
   1d0ea:	d0f1      	beq.n	1d0d0 <gpio_nrfx_manage_callback+0x6c>
	parent->next = child;
   1d0ec:	2300      	movs	r3, #0
   1d0ee:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d0f0:	e000      	b.n	1d0f4 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
   1d0f2:	b155      	cbz	r5, 1d10a <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d0f4:	b165      	cbz	r5, 1d110 <gpio_nrfx_manage_callback+0xac>
	return list->head;
   1d0f6:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
   1d0f8:	6023      	str	r3, [r4, #0]
	list->head = node;
   1d0fa:	6074      	str	r4, [r6, #4]
	return list->tail;
   1d0fc:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d0fe:	b10b      	cbz	r3, 1d104 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d100:	2000      	movs	r0, #0
   1d102:	e006      	b.n	1d112 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
   1d104:	607c      	str	r4, [r7, #4]
   1d106:	2000      	movs	r0, #0
}
   1d108:	e003      	b.n	1d112 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
   1d10a:	f06f 0015 	mvn.w	r0, #21
   1d10e:	e000      	b.n	1d112 <gpio_nrfx_manage_callback+0xae>
	return 0;
   1d110:	2000      	movs	r0, #0
}
   1d112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d116:	bf00      	nop
   1d118:	00034c78 	.word	0x00034c78
   1d11c:	00031df4 	.word	0x00031df4
   1d120:	00034c84 	.word	0x00034c84
   1d124:	00034c94 	.word	0x00034c94
   1d128:	00034ca8 	.word	0x00034ca8
   1d12c:	00034c48 	.word	0x00034c48

0001d130 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   1d130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1d134:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
   1d138:	0940      	lsrs	r0, r0, #5
   1d13a:	f7ff ff85 	bl	1d048 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
   1d13e:	b380      	cbz	r0, 1d1a2 <nrfx_gpio_handler+0x72>
   1d140:	4607      	mov	r7, r0
	return port->data;
   1d142:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
   1d144:	2601      	movs	r6, #1
   1d146:	40a6      	lsls	r6, r4
	return list->head;
   1d148:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d14a:	b11c      	cbz	r4, 1d154 <nrfx_gpio_handler+0x24>
   1d14c:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d14e:	b17c      	cbz	r4, 1d170 <nrfx_gpio_handler+0x40>
	return node->next;
   1d150:	6825      	ldr	r5, [r4, #0]
   1d152:	e00d      	b.n	1d170 <nrfx_gpio_handler+0x40>
   1d154:	4625      	mov	r5, r4
   1d156:	e00b      	b.n	1d170 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d158:	6863      	ldr	r3, [r4, #4]
   1d15a:	68a2      	ldr	r2, [r4, #8]
   1d15c:	4032      	ands	r2, r6
   1d15e:	4621      	mov	r1, r4
   1d160:	4638      	mov	r0, r7
   1d162:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d164:	b1dd      	cbz	r5, 1d19e <nrfx_gpio_handler+0x6e>
   1d166:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d168:	b105      	cbz	r5, 1d16c <nrfx_gpio_handler+0x3c>
	return node->next;
   1d16a:	682b      	ldr	r3, [r5, #0]
   1d16c:	462c      	mov	r4, r5
   1d16e:	461d      	mov	r5, r3
   1d170:	b1bc      	cbz	r4, 1d1a2 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
   1d172:	68a3      	ldr	r3, [r4, #8]
   1d174:	421e      	tst	r6, r3
   1d176:	d0f5      	beq.n	1d164 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
   1d178:	6863      	ldr	r3, [r4, #4]
   1d17a:	2b00      	cmp	r3, #0
   1d17c:	d1ec      	bne.n	1d158 <nrfx_gpio_handler+0x28>
   1d17e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1d1b4 <nrfx_gpio_handler+0x84>
   1d182:	2345      	movs	r3, #69	; 0x45
   1d184:	4642      	mov	r2, r8
   1d186:	4908      	ldr	r1, [pc, #32]	; (1d1a8 <nrfx_gpio_handler+0x78>)
   1d188:	4808      	ldr	r0, [pc, #32]	; (1d1ac <nrfx_gpio_handler+0x7c>)
   1d18a:	f00e ffdd 	bl	2c148 <printk>
   1d18e:	4808      	ldr	r0, [pc, #32]	; (1d1b0 <nrfx_gpio_handler+0x80>)
   1d190:	f00e ffda 	bl	2c148 <printk>
   1d194:	2145      	movs	r1, #69	; 0x45
   1d196:	4640      	mov	r0, r8
   1d198:	f00f f9db 	bl	2c552 <assert_post_action>
   1d19c:	e7dc      	b.n	1d158 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d19e:	462b      	mov	r3, r5
   1d1a0:	e7e4      	b.n	1d16c <nrfx_gpio_handler+0x3c>
}
   1d1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d1a6:	bf00      	nop
   1d1a8:	00034cc0 	.word	0x00034cc0
   1d1ac:	00031df4 	.word	0x00031df4
   1d1b0:	00034ca8 	.word	0x00034ca8
   1d1b4:	00034c48 	.word	0x00034c48

0001d1b8 <gpio_nrfx_pin_interrupt_configure>:
{
   1d1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1ba:	b085      	sub	sp, #20
   1d1bc:	460e      	mov	r6, r1
   1d1be:	4619      	mov	r1, r3
	return port->config;
   1d1c0:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d1c2:	7b1b      	ldrb	r3, [r3, #12]
   1d1c4:	f006 041f 	and.w	r4, r6, #31
   1d1c8:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d1cc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1d1d0:	d022      	beq.n	1d218 <gpio_nrfx_pin_interrupt_configure+0x60>
   1d1d2:	4607      	mov	r7, r0
   1d1d4:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d1d6:	2300      	movs	r3, #0
   1d1d8:	9302      	str	r3, [sp, #8]
   1d1da:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   1d1dc:	4610      	mov	r0, r2
   1d1de:	f011 ff61 	bl	2f0a4 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d1e2:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   1d1e6:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1d1e8:	6899      	ldr	r1, [r3, #8]
   1d1ea:	40f1      	lsrs	r1, r6
   1d1ec:	f011 0101 	ands.w	r1, r1, #1
   1d1f0:	d102      	bne.n	1d1f8 <gpio_nrfx_pin_interrupt_configure+0x40>
   1d1f2:	f5b5 3fa0 	cmp.w	r5, #81920	; 0x14000
   1d1f6:	d014      	beq.n	1d222 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d1f8:	2300      	movs	r3, #0
   1d1fa:	aa02      	add	r2, sp, #8
   1d1fc:	4619      	mov	r1, r3
   1d1fe:	4620      	mov	r0, r4
   1d200:	f003 ff1e 	bl	21040 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d204:	4b32      	ldr	r3, [pc, #200]	; (1d2d0 <gpio_nrfx_pin_interrupt_configure+0x118>)
   1d206:	4298      	cmp	r0, r3
   1d208:	d15f      	bne.n	1d2ca <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1d20a:	2101      	movs	r1, #1
   1d20c:	4620      	mov	r0, r4
   1d20e:	f004 f979 	bl	21504 <nrfx_gpiote_trigger_enable>
	return 0;
   1d212:	2000      	movs	r0, #0
}
   1d214:	b005      	add	sp, #20
   1d216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   1d218:	4620      	mov	r0, r4
   1d21a:	f004 fa7f 	bl	2171c <nrfx_gpiote_trigger_disable>
		return 0;
   1d21e:	2000      	movs	r0, #0
   1d220:	e7f8      	b.n	1d214 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
   1d222:	0963      	lsrs	r3, r4, #5
   1d224:	d01f      	beq.n	1d266 <gpio_nrfx_pin_interrupt_configure+0xae>
   1d226:	2b01      	cmp	r3, #1
   1d228:	d101      	bne.n	1d22e <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
   1d22a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
   1d22e:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d232:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d234:	f011 0f01 	tst.w	r1, #1
   1d238:	d018      	beq.n	1d26c <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
   1d23a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d23e:	0963      	lsrs	r3, r4, #5
   1d240:	d022      	beq.n	1d288 <gpio_nrfx_pin_interrupt_configure+0xd0>
   1d242:	2b01      	cmp	r3, #1
   1d244:	d023      	beq.n	1d28e <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
   1d246:	4e23      	ldr	r6, [pc, #140]	; (1d2d4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1d248:	f240 232e 	movw	r3, #558	; 0x22e
   1d24c:	4632      	mov	r2, r6
   1d24e:	4922      	ldr	r1, [pc, #136]	; (1d2d8 <gpio_nrfx_pin_interrupt_configure+0x120>)
   1d250:	4822      	ldr	r0, [pc, #136]	; (1d2dc <gpio_nrfx_pin_interrupt_configure+0x124>)
   1d252:	f00e ff79 	bl	2c148 <printk>
   1d256:	f240 212e 	movw	r1, #558	; 0x22e
   1d25a:	4630      	mov	r0, r6
   1d25c:	f00f f979 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1d260:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1d264:	e014      	b.n	1d290 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
   1d266:	f04f 31ff 	mov.w	r1, #4294967295
   1d26a:	e7e0      	b.n	1d22e <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d26c:	4d19      	ldr	r5, [pc, #100]	; (1d2d4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1d26e:	f240 2329 	movw	r3, #553	; 0x229
   1d272:	462a      	mov	r2, r5
   1d274:	491a      	ldr	r1, [pc, #104]	; (1d2e0 <gpio_nrfx_pin_interrupt_configure+0x128>)
   1d276:	4819      	ldr	r0, [pc, #100]	; (1d2dc <gpio_nrfx_pin_interrupt_configure+0x124>)
   1d278:	f00e ff66 	bl	2c148 <printk>
   1d27c:	f240 2129 	movw	r1, #553	; 0x229
   1d280:	4628      	mov	r0, r5
   1d282:	f00f f966 	bl	2c552 <assert_post_action>
   1d286:	e7d8      	b.n	1d23a <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
   1d288:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1d28c:	e000      	b.n	1d290 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d28e:	4b15      	ldr	r3, [pc, #84]	; (1d2e4 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d290:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1d294:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d298:	f013 0f01 	tst.w	r3, #1
   1d29c:	d1ac      	bne.n	1d1f8 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d29e:	f10d 0107 	add.w	r1, sp, #7
   1d2a2:	4620      	mov	r0, r4
   1d2a4:	f004 f8be 	bl	21424 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1d2a8:	4b0f      	ldr	r3, [pc, #60]	; (1d2e8 <gpio_nrfx_pin_interrupt_configure+0x130>)
   1d2aa:	4298      	cmp	r0, r3
   1d2ac:	d003      	beq.n	1d2b6 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
   1d2ae:	f10d 0307 	add.w	r3, sp, #7
   1d2b2:	9303      	str	r3, [sp, #12]
   1d2b4:	e7a0      	b.n	1d1f8 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   1d2b6:	f10d 0007 	add.w	r0, sp, #7
   1d2ba:	f004 f91b 	bl	214f4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1d2be:	4b04      	ldr	r3, [pc, #16]	; (1d2d0 <gpio_nrfx_pin_interrupt_configure+0x118>)
   1d2c0:	4298      	cmp	r0, r3
   1d2c2:	d0f4      	beq.n	1d2ae <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
   1d2c4:	f06f 000b 	mvn.w	r0, #11
   1d2c8:	e7a4      	b.n	1d214 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   1d2ca:	f06f 0004 	mvn.w	r0, #4
   1d2ce:	e7a1      	b.n	1d214 <gpio_nrfx_pin_interrupt_configure+0x5c>
   1d2d0:	0bad0000 	.word	0x0bad0000
   1d2d4:	000321d8 	.word	0x000321d8
   1d2d8:	000364dc 	.word	0x000364dc
   1d2dc:	00031df4 	.word	0x00031df4
   1d2e0:	0003220c 	.word	0x0003220c
   1d2e4:	50000300 	.word	0x50000300
   1d2e8:	0bad0004 	.word	0x0bad0004

0001d2ec <pin_uninit>:
{
   1d2ec:	b530      	push	{r4, r5, lr}
   1d2ee:	b083      	sub	sp, #12
   1d2f0:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d2f2:	f10d 0107 	add.w	r1, sp, #7
   1d2f6:	f004 f895 	bl	21424 <nrfx_gpiote_channel_get>
   1d2fa:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1d2fc:	4620      	mov	r0, r4
   1d2fe:	f004 fa75 	bl	217ec <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1d302:	4b0b      	ldr	r3, [pc, #44]	; (1d330 <pin_uninit+0x44>)
   1d304:	4298      	cmp	r0, r3
   1d306:	d10f      	bne.n	1d328 <pin_uninit+0x3c>
	if (free_ch) {
   1d308:	429d      	cmp	r5, r3
   1d30a:	d005      	beq.n	1d318 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1d30c:	4b08      	ldr	r3, [pc, #32]	; (1d330 <pin_uninit+0x44>)
   1d30e:	4298      	cmp	r0, r3
   1d310:	d107      	bne.n	1d322 <pin_uninit+0x36>
   1d312:	2000      	movs	r0, #0
}
   1d314:	b003      	add	sp, #12
   1d316:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   1d318:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d31c:	f004 f8e2 	bl	214e4 <nrfx_gpiote_channel_free>
   1d320:	e7f4      	b.n	1d30c <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1d322:	f06f 0004 	mvn.w	r0, #4
   1d326:	e7f5      	b.n	1d314 <pin_uninit+0x28>
		return -EIO;
   1d328:	f06f 0004 	mvn.w	r0, #4
   1d32c:	e7f2      	b.n	1d314 <pin_uninit+0x28>
   1d32e:	bf00      	nop
   1d330:	0bad0000 	.word	0x0bad0000

0001d334 <gpio_nrfx_pin_configure>:
{
   1d334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d338:	b087      	sub	sp, #28
	return port->config;
   1d33a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d33e:	f898 300c 	ldrb.w	r3, [r8, #12]
   1d342:	f001 051f 	and.w	r5, r1, #31
   1d346:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1d34a:	2a00      	cmp	r2, #0
   1d34c:	d044      	beq.n	1d3d8 <gpio_nrfx_pin_configure+0xa4>
   1d34e:	460c      	mov	r4, r1
   1d350:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d352:	2600      	movs	r6, #0
   1d354:	9603      	str	r6, [sp, #12]
   1d356:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d358:	f10d 0117 	add.w	r1, sp, #23
   1d35c:	4620      	mov	r0, r4
   1d35e:	f004 f861 	bl	21424 <nrfx_gpiote_channel_get>
   1d362:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d364:	4633      	mov	r3, r6
   1d366:	aa03      	add	r2, sp, #12
   1d368:	4631      	mov	r1, r6
   1d36a:	4628      	mov	r0, r5
   1d36c:	f003 fe68 	bl	21040 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d370:	4b30      	ldr	r3, [pc, #192]	; (1d434 <gpio_nrfx_pin_configure+0x100>)
   1d372:	4298      	cmp	r0, r3
   1d374:	d15b      	bne.n	1d42e <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
   1d376:	4599      	cmp	r9, r3
   1d378:	d036      	beq.n	1d3e8 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
   1d37a:	f417 7f00 	tst.w	r7, #512	; 0x200
   1d37e:	d043      	beq.n	1d408 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
   1d380:	f10d 0103 	add.w	r1, sp, #3
   1d384:	4638      	mov	r0, r7
   1d386:	f7ff fe19 	bl	1cfbc <get_drive>
		if (rv != 0) {
   1d38a:	4606      	mov	r6, r0
   1d38c:	bb40      	cbnz	r0, 1d3e0 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
   1d38e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1d392:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1d396:	f417 7f80 	tst.w	r7, #256	; 0x100
   1d39a:	bf0c      	ite	eq
   1d39c:	2301      	moveq	r3, #1
   1d39e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   1d3a0:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   1d3a4:	4638      	mov	r0, r7
   1d3a6:	f011 fe4a 	bl	2f03e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1d3aa:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d3ae:	f417 6f00 	tst.w	r7, #2048	; 0x800
   1d3b2:	d01e      	beq.n	1d3f2 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d3b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d3b8:	2101      	movs	r1, #1
   1d3ba:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   1d3be:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d3c2:	2200      	movs	r2, #0
   1d3c4:	a901      	add	r1, sp, #4
   1d3c6:	4628      	mov	r0, r5
   1d3c8:	f003 ff2c 	bl	21224 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d3cc:	4b19      	ldr	r3, [pc, #100]	; (1d434 <gpio_nrfx_pin_configure+0x100>)
   1d3ce:	4298      	cmp	r0, r3
   1d3d0:	d006      	beq.n	1d3e0 <gpio_nrfx_pin_configure+0xac>
   1d3d2:	f06f 0615 	mvn.w	r6, #21
   1d3d6:	e003      	b.n	1d3e0 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
   1d3d8:	4628      	mov	r0, r5
   1d3da:	f7ff ff87 	bl	1d2ec <pin_uninit>
   1d3de:	4606      	mov	r6, r0
}
   1d3e0:	4630      	mov	r0, r6
   1d3e2:	b007      	add	sp, #28
   1d3e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   1d3e8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1d3ec:	f004 f87a 	bl	214e4 <nrfx_gpiote_channel_free>
   1d3f0:	e7c3      	b.n	1d37a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d3f2:	f417 6f80 	tst.w	r7, #1024	; 0x400
   1d3f6:	d0e4      	beq.n	1d3c2 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d3f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1d3fc:	2301      	movs	r3, #1
   1d3fe:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   1d402:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
   1d406:	e7dc      	b.n	1d3c2 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   1d408:	4638      	mov	r0, r7
   1d40a:	f011 fe18 	bl	2f03e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1d40e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d412:	2300      	movs	r3, #0
   1d414:	461a      	mov	r2, r3
   1d416:	a902      	add	r1, sp, #8
   1d418:	4628      	mov	r0, r5
   1d41a:	f003 fe11 	bl	21040 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d41e:	4b05      	ldr	r3, [pc, #20]	; (1d434 <gpio_nrfx_pin_configure+0x100>)
   1d420:	4298      	cmp	r0, r3
   1d422:	d101      	bne.n	1d428 <gpio_nrfx_pin_configure+0xf4>
   1d424:	2600      	movs	r6, #0
   1d426:	e7db      	b.n	1d3e0 <gpio_nrfx_pin_configure+0xac>
   1d428:	f06f 0615 	mvn.w	r6, #21
   1d42c:	e7d8      	b.n	1d3e0 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
   1d42e:	f06f 0615 	mvn.w	r6, #21
   1d432:	e7d5      	b.n	1d3e0 <gpio_nrfx_pin_configure+0xac>
   1d434:	0bad0000 	.word	0x0bad0000

0001d438 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d438:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1d43a:	f004 f849 	bl	214d0 <nrfx_gpiote_is_init>
   1d43e:	b108      	cbz	r0, 1d444 <gpio_nrfx_init+0xc>
		return 0;
   1d440:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1d442:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   1d444:	f004 f81a 	bl	2147c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1d448:	4b08      	ldr	r3, [pc, #32]	; (1d46c <gpio_nrfx_init+0x34>)
   1d44a:	4298      	cmp	r0, r3
   1d44c:	d10a      	bne.n	1d464 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1d44e:	2100      	movs	r1, #0
   1d450:	4807      	ldr	r0, [pc, #28]	; (1d470 <gpio_nrfx_init+0x38>)
   1d452:	f003 ffe1 	bl	21418 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d456:	2200      	movs	r2, #0
   1d458:	2105      	movs	r1, #5
   1d45a:	2006      	movs	r0, #6
   1d45c:	f7f7 fe84 	bl	15168 <z_arm_irq_priority_set>
	return 0;
   1d460:	2000      	movs	r0, #0
   1d462:	e7ee      	b.n	1d442 <gpio_nrfx_init+0xa>
		return -EIO;
   1d464:	f06f 0004 	mvn.w	r0, #4
   1d468:	e7eb      	b.n	1d442 <gpio_nrfx_init+0xa>
   1d46a:	bf00      	nop
   1d46c:	0bad0000 	.word	0x0bad0000
   1d470:	0001d131 	.word	0x0001d131

0001d474 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   1d474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d478:	b086      	sub	sp, #24
   1d47a:	460c      	mov	r4, r1
	return dev->data;
   1d47c:	6907      	ldr	r7, [r0, #16]
	return dev->config;
   1d47e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
	struct spi_context *ctx = &dev_data->ctx;
	nrfx_spi_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1d482:	f897 c06d 	ldrb.w	ip, [r7, #109]	; 0x6d
   1d486:	f1bc 0f00 	cmp.w	ip, #0
   1d48a:	d003      	beq.n	1d494 <configure+0x20>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
   1d48c:	683b      	ldr	r3, [r7, #0]
   1d48e:	428b      	cmp	r3, r1
   1d490:	f000 80f9 	beq.w	1d686 <configure+0x212>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1d494:	88a3      	ldrh	r3, [r4, #4]
   1d496:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1d49a:	d15c      	bne.n	1d556 <configure+0xe2>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1d49c:	f013 0f01 	tst.w	r3, #1
   1d4a0:	d16c      	bne.n	1d57c <configure+0x108>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1d4a2:	f013 0f08 	tst.w	r3, #8
   1d4a6:	d17d      	bne.n	1d5a4 <configure+0x130>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1d4a8:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1d4ac:	2b08      	cmp	r3, #8
   1d4ae:	f040 808c 	bne.w	1d5ca <configure+0x156>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   1d4b2:	6822      	ldr	r2, [r4, #0]
   1d4b4:	4b75      	ldr	r3, [pc, #468]	; (1d68c <configure+0x218>)
   1d4b6:	429a      	cmp	r2, r3
   1d4b8:	f240 809a 	bls.w	1d5f0 <configure+0x17c>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
		return -EINVAL;
	}

	config = dev_config->def_config;
   1d4bc:	ad01      	add	r5, sp, #4
   1d4be:	f108 0608 	add.w	r6, r8, #8
   1d4c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d4c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d4c6:	6833      	ldr	r3, [r6, #0]
   1d4c8:	602b      	str	r3, [r5, #0]

	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   1d4ca:	6823      	ldr	r3, [r4, #0]
	if (frequency < 250000) {
   1d4cc:	4a70      	ldr	r2, [pc, #448]	; (1d690 <configure+0x21c>)
   1d4ce:	4293      	cmp	r3, r2
   1d4d0:	f240 80a1 	bls.w	1d616 <configure+0x1a2>
	} else if (frequency < 500000) {
   1d4d4:	4a6f      	ldr	r2, [pc, #444]	; (1d694 <configure+0x220>)
   1d4d6:	4293      	cmp	r3, r2
   1d4d8:	f240 80a0 	bls.w	1d61c <configure+0x1a8>
	} else if (frequency < 1000000) {
   1d4dc:	4a6e      	ldr	r2, [pc, #440]	; (1d698 <configure+0x224>)
   1d4de:	4293      	cmp	r3, r2
   1d4e0:	f240 809f 	bls.w	1d622 <configure+0x1ae>
	} else if (frequency < 2000000) {
   1d4e4:	4a6d      	ldr	r2, [pc, #436]	; (1d69c <configure+0x228>)
   1d4e6:	4293      	cmp	r3, r2
   1d4e8:	f240 809e 	bls.w	1d628 <configure+0x1b4>
	} else if (frequency < 4000000) {
   1d4ec:	4a6c      	ldr	r2, [pc, #432]	; (1d6a0 <configure+0x22c>)
   1d4ee:	4293      	cmp	r3, r2
   1d4f0:	f240 809d 	bls.w	1d62e <configure+0x1ba>
	} else if (frequency < 8000000) {
   1d4f4:	4a6b      	ldr	r2, [pc, #428]	; (1d6a4 <configure+0x230>)
   1d4f6:	4293      	cmp	r3, r2
   1d4f8:	f080 809c 	bcs.w	1d634 <configure+0x1c0>
		return NRF_SPI_FREQ_4M;
   1d4fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   1d500:	9303      	str	r3, [sp, #12]
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   1d502:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d504:	f013 0f02 	tst.w	r3, #2
   1d508:	f000 8097 	beq.w	1d63a <configure+0x1c6>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1d50c:	f013 0f04 	tst.w	r3, #4
   1d510:	f000 8098 	beq.w	1d644 <configure+0x1d0>
			return NRF_SPI_MODE_3;
   1d514:	2303      	movs	r3, #3
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   1d516:	f88d 3010 	strb.w	r3, [sp, #16]
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   1d51a:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1d51c:	f013 0f10 	tst.w	r3, #16
   1d520:	f000 8094 	beq.w	1d64c <configure+0x1d8>
		return NRF_SPI_BIT_ORDER_LSB_FIRST;
   1d524:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   1d526:	f88d 3011 	strb.w	r3, [sp, #17]

	if (dev_data->initialized) {
   1d52a:	f1bc 0f00 	cmp.w	ip, #0
   1d52e:	f040 808f 	bne.w	1d650 <configure+0x1dc>
		nrfx_spi_uninit(&dev_config->spi);
		dev_data->initialized = false;
	}

	result = nrfx_spi_init(&dev_config->spi, &config,
   1d532:	463b      	mov	r3, r7
   1d534:	4a5c      	ldr	r2, [pc, #368]	; (1d6a8 <configure+0x234>)
   1d536:	a901      	add	r1, sp, #4
   1d538:	4640      	mov	r0, r8
   1d53a:	f004 fd2b 	bl	21f94 <nrfx_spi_init>
			       event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   1d53e:	4b5b      	ldr	r3, [pc, #364]	; (1d6ac <configure+0x238>)
   1d540:	4298      	cmp	r0, r3
   1d542:	f040 808c 	bne.w	1d65e <configure+0x1ea>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   1d546:	2301      	movs	r3, #1
   1d548:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	ctx->config = spi_cfg;
   1d54c:	603c      	str	r4, [r7, #0]

	return 0;
   1d54e:	2000      	movs	r0, #0
}
   1d550:	b006      	add	sp, #24
   1d552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d556:	4b56      	ldr	r3, [pc, #344]	; (1d6b0 <configure+0x23c>)
   1d558:	4a56      	ldr	r2, [pc, #344]	; (1d6b4 <configure+0x240>)
   1d55a:	1a9b      	subs	r3, r3, r2
   1d55c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Half-duplex not supported");
   1d55e:	f04f 0100 	mov.w	r1, #0
   1d562:	2201      	movs	r2, #1
   1d564:	f362 0102 	bfi	r1, r2, #0, #3
   1d568:	f36f 01c5 	bfc	r1, #3, #3
   1d56c:	f363 118f 	bfi	r1, r3, #6, #10
   1d570:	4851      	ldr	r0, [pc, #324]	; (1d6b8 <configure+0x244>)
   1d572:	f7f6 f995 	bl	138a0 <log_0>
		return -ENOTSUP;
   1d576:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d57a:	e7e9      	b.n	1d550 <configure+0xdc>
   1d57c:	4b4c      	ldr	r3, [pc, #304]	; (1d6b0 <configure+0x23c>)
   1d57e:	4a4d      	ldr	r2, [pc, #308]	; (1d6b4 <configure+0x240>)
   1d580:	1a9b      	subs	r3, r3, r2
   1d582:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1d584:	f04f 0200 	mov.w	r2, #0
   1d588:	2101      	movs	r1, #1
   1d58a:	f361 0202 	bfi	r2, r1, #0, #3
   1d58e:	f36f 02c5 	bfc	r2, #3, #3
   1d592:	f363 128f 	bfi	r2, r3, #6, #10
   1d596:	6801      	ldr	r1, [r0, #0]
   1d598:	4848      	ldr	r0, [pc, #288]	; (1d6bc <configure+0x248>)
   1d59a:	f7f6 f9b1 	bl	13900 <log_1>
		return -EINVAL;
   1d59e:	f06f 0015 	mvn.w	r0, #21
   1d5a2:	e7d5      	b.n	1d550 <configure+0xdc>
   1d5a4:	4b42      	ldr	r3, [pc, #264]	; (1d6b0 <configure+0x23c>)
   1d5a6:	4a43      	ldr	r2, [pc, #268]	; (1d6b4 <configure+0x240>)
   1d5a8:	1a9b      	subs	r3, r3, r2
   1d5aa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Loopback mode is not supported");
   1d5ac:	f04f 0100 	mov.w	r1, #0
   1d5b0:	2201      	movs	r2, #1
   1d5b2:	f362 0102 	bfi	r1, r2, #0, #3
   1d5b6:	f36f 01c5 	bfc	r1, #3, #3
   1d5ba:	f363 118f 	bfi	r1, r3, #6, #10
   1d5be:	4840      	ldr	r0, [pc, #256]	; (1d6c0 <configure+0x24c>)
   1d5c0:	f7f6 f96e 	bl	138a0 <log_0>
		return -EINVAL;
   1d5c4:	f06f 0015 	mvn.w	r0, #21
   1d5c8:	e7c2      	b.n	1d550 <configure+0xdc>
   1d5ca:	4b39      	ldr	r3, [pc, #228]	; (1d6b0 <configure+0x23c>)
   1d5cc:	4a39      	ldr	r2, [pc, #228]	; (1d6b4 <configure+0x240>)
   1d5ce:	1a9b      	subs	r3, r3, r2
   1d5d0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1d5d2:	f04f 0100 	mov.w	r1, #0
   1d5d6:	2201      	movs	r2, #1
   1d5d8:	f362 0102 	bfi	r1, r2, #0, #3
   1d5dc:	f36f 01c5 	bfc	r1, #3, #3
   1d5e0:	f363 118f 	bfi	r1, r3, #6, #10
   1d5e4:	4837      	ldr	r0, [pc, #220]	; (1d6c4 <configure+0x250>)
   1d5e6:	f7f6 f95b 	bl	138a0 <log_0>
		return -EINVAL;
   1d5ea:	f06f 0015 	mvn.w	r0, #21
   1d5ee:	e7af      	b.n	1d550 <configure+0xdc>
   1d5f0:	4b2f      	ldr	r3, [pc, #188]	; (1d6b0 <configure+0x23c>)
   1d5f2:	4a30      	ldr	r2, [pc, #192]	; (1d6b4 <configure+0x240>)
   1d5f4:	1a9b      	subs	r3, r3, r2
   1d5f6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1d5f8:	f04f 0100 	mov.w	r1, #0
   1d5fc:	2201      	movs	r2, #1
   1d5fe:	f362 0102 	bfi	r1, r2, #0, #3
   1d602:	f36f 01c5 	bfc	r1, #3, #3
   1d606:	f363 118f 	bfi	r1, r3, #6, #10
   1d60a:	482f      	ldr	r0, [pc, #188]	; (1d6c8 <configure+0x254>)
   1d60c:	f7f6 f948 	bl	138a0 <log_0>
		return -EINVAL;
   1d610:	f06f 0015 	mvn.w	r0, #21
   1d614:	e79c      	b.n	1d550 <configure+0xdc>
		return NRF_SPI_FREQ_125K;
   1d616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1d61a:	e771      	b.n	1d500 <configure+0x8c>
		return NRF_SPI_FREQ_250K;
   1d61c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d620:	e76e      	b.n	1d500 <configure+0x8c>
		return NRF_SPI_FREQ_500K;
   1d622:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1d626:	e76b      	b.n	1d500 <configure+0x8c>
		return NRF_SPI_FREQ_1M;
   1d628:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d62c:	e768      	b.n	1d500 <configure+0x8c>
		return NRF_SPI_FREQ_2M;
   1d62e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1d632:	e765      	b.n	1d500 <configure+0x8c>
		return NRF_SPI_FREQ_8M;
   1d634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d638:	e762      	b.n	1d500 <configure+0x8c>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1d63a:	f013 0f04 	tst.w	r3, #4
   1d63e:	d003      	beq.n	1d648 <configure+0x1d4>
			return NRF_SPI_MODE_1;
   1d640:	2301      	movs	r3, #1
   1d642:	e768      	b.n	1d516 <configure+0xa2>
			return NRF_SPI_MODE_2;
   1d644:	2302      	movs	r3, #2
   1d646:	e766      	b.n	1d516 <configure+0xa2>
			return NRF_SPI_MODE_0;
   1d648:	2300      	movs	r3, #0
   1d64a:	e764      	b.n	1d516 <configure+0xa2>
		return NRF_SPI_BIT_ORDER_MSB_FIRST;
   1d64c:	2300      	movs	r3, #0
   1d64e:	e76a      	b.n	1d526 <configure+0xb2>
		nrfx_spi_uninit(&dev_config->spi);
   1d650:	4640      	mov	r0, r8
   1d652:	f004 fd11 	bl	22078 <nrfx_spi_uninit>
		dev_data->initialized = false;
   1d656:	2300      	movs	r3, #0
   1d658:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1d65c:	e769      	b.n	1d532 <configure+0xbe>
   1d65e:	4b14      	ldr	r3, [pc, #80]	; (1d6b0 <configure+0x23c>)
   1d660:	4a14      	ldr	r2, [pc, #80]	; (1d6b4 <configure+0x240>)
   1d662:	1a9b      	subs	r3, r3, r2
   1d664:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1d666:	f04f 0200 	mov.w	r2, #0
   1d66a:	2101      	movs	r1, #1
   1d66c:	f361 0202 	bfi	r2, r1, #0, #3
   1d670:	f36f 02c5 	bfc	r2, #3, #3
   1d674:	f363 128f 	bfi	r2, r3, #6, #10
   1d678:	4601      	mov	r1, r0
   1d67a:	4814      	ldr	r0, [pc, #80]	; (1d6cc <configure+0x258>)
   1d67c:	f7f6 f940 	bl	13900 <log_1>
		return -EIO;
   1d680:	f06f 0004 	mvn.w	r0, #4
   1d684:	e764      	b.n	1d550 <configure+0xdc>
		return 0;
   1d686:	2000      	movs	r0, #0
   1d688:	e762      	b.n	1d550 <configure+0xdc>
   1d68a:	bf00      	nop
   1d68c:	0001e847 	.word	0x0001e847
   1d690:	0003d08f 	.word	0x0003d08f
   1d694:	0007a11f 	.word	0x0007a11f
   1d698:	000f423f 	.word	0x000f423f
   1d69c:	001e847f 	.word	0x001e847f
   1d6a0:	003d08ff 	.word	0x003d08ff
   1d6a4:	007a1200 	.word	0x007a1200
   1d6a8:	0001de19 	.word	0x0001de19
   1d6ac:	0bad0000 	.word	0x0bad0000
   1d6b0:	000319d8 	.word	0x000319d8
   1d6b4:	00031908 	.word	0x00031908
   1d6b8:	00034d18 	.word	0x00034d18
   1d6bc:	00034d34 	.word	0x00034d34
   1d6c0:	00034d58 	.word	0x00034d58
   1d6c4:	00034d78 	.word	0x00034d78
   1d6c8:	00034da8 	.word	0x00034da8
   1d6cc:	00034ddc 	.word	0x00034ddc

0001d6d0 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
   1d6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return dev->data;
   1d6d4:	6904      	ldr	r4, [r0, #16]
   1d6d6:	6823      	ldr	r3, [r4, #0]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1d6d8:	428b      	cmp	r3, r1
   1d6da:	d163      	bne.n	1d7a4 <spi_nrfx_release+0xd4>
		return -EINVAL;
	}

	if (dev_data->busy) {
   1d6dc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   1d6e0:	2b00      	cmp	r3, #0
   1d6e2:	d162      	bne.n	1d7aa <spi_nrfx_release+0xda>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1d6e4:	6823      	ldr	r3, [r4, #0]
   1d6e6:	b333      	cbz	r3, 1d736 <spi_nrfx_release+0x66>
   1d6e8:	689b      	ldr	r3, [r3, #8]
   1d6ea:	b323      	cbz	r3, 1d736 <spi_nrfx_release+0x66>
   1d6ec:	681a      	ldr	r2, [r3, #0]
   1d6ee:	b312      	cbz	r2, 1d736 <spi_nrfx_release+0x66>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
   1d6f0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1d6f2:	f013 f81d 	bl	30730 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1d6f6:	6823      	ldr	r3, [r4, #0]
   1d6f8:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1d6fa:	681d      	ldr	r5, [r3, #0]
   1d6fc:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_config *const cfg =
   1d6fe:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
   1d700:	f8d5 8010 	ldr.w	r8, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d704:	681b      	ldr	r3, [r3, #0]
   1d706:	2601      	movs	r6, #1
   1d708:	40be      	lsls	r6, r7
   1d70a:	4233      	tst	r3, r6
   1d70c:	d018      	beq.n	1d740 <spi_nrfx_release+0x70>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1d70e:	f8d8 3000 	ldr.w	r3, [r8]
   1d712:	421e      	tst	r6, r3
   1d714:	d126      	bne.n	1d764 <spi_nrfx_release+0x94>
   1d716:	f04f 0800 	mov.w	r8, #0
	const struct gpio_driver_config *const cfg =
   1d71a:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d71c:	681b      	ldr	r3, [r3, #0]
   1d71e:	2601      	movs	r6, #1
   1d720:	40be      	lsls	r6, r7
   1d722:	4233      	tst	r3, r6
   1d724:	d021      	beq.n	1d76a <spi_nrfx_release+0x9a>
	if (value != 0)	{
   1d726:	f1b8 0f00 	cmp.w	r8, #0
   1d72a:	d02f      	beq.n	1d78c <spi_nrfx_release+0xbc>
	const struct gpio_driver_api *api =
   1d72c:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
   1d72e:	68db      	ldr	r3, [r3, #12]
   1d730:	4631      	mov	r1, r6
   1d732:	4628      	mov	r0, r5
   1d734:	4798      	blx	r3
	return sem->count;
   1d736:	69a3      	ldr	r3, [r4, #24]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
   1d738:	b373      	cbz	r3, 1d798 <spi_nrfx_release+0xc8>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);

	return 0;
   1d73a:	2000      	movs	r0, #0
}
   1d73c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d740:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1d7bc <spi_nrfx_release+0xec>
   1d744:	f240 43bb 	movw	r3, #1211	; 0x4bb
   1d748:	464a      	mov	r2, r9
   1d74a:	4919      	ldr	r1, [pc, #100]	; (1d7b0 <spi_nrfx_release+0xe0>)
   1d74c:	4819      	ldr	r0, [pc, #100]	; (1d7b4 <spi_nrfx_release+0xe4>)
   1d74e:	f00e fcfb 	bl	2c148 <printk>
   1d752:	4819      	ldr	r0, [pc, #100]	; (1d7b8 <spi_nrfx_release+0xe8>)
   1d754:	f00e fcf8 	bl	2c148 <printk>
   1d758:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1d75c:	4648      	mov	r0, r9
   1d75e:	f00e fef8 	bl	2c552 <assert_post_action>
   1d762:	e7d4      	b.n	1d70e <spi_nrfx_release+0x3e>
		value = (value != 0) ? 0 : 1;
   1d764:	f04f 0801 	mov.w	r8, #1
   1d768:	e7d7      	b.n	1d71a <spi_nrfx_release+0x4a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d76a:	4f14      	ldr	r7, [pc, #80]	; (1d7bc <spi_nrfx_release+0xec>)
   1d76c:	f240 4391 	movw	r3, #1169	; 0x491
   1d770:	463a      	mov	r2, r7
   1d772:	490f      	ldr	r1, [pc, #60]	; (1d7b0 <spi_nrfx_release+0xe0>)
   1d774:	480f      	ldr	r0, [pc, #60]	; (1d7b4 <spi_nrfx_release+0xe4>)
   1d776:	f00e fce7 	bl	2c148 <printk>
   1d77a:	480f      	ldr	r0, [pc, #60]	; (1d7b8 <spi_nrfx_release+0xe8>)
   1d77c:	f00e fce4 	bl	2c148 <printk>
   1d780:	f240 4191 	movw	r1, #1169	; 0x491
   1d784:	4638      	mov	r0, r7
   1d786:	f00e fee4 	bl	2c552 <assert_post_action>
   1d78a:	e7cc      	b.n	1d726 <spi_nrfx_release+0x56>
	const struct gpio_driver_api *api =
   1d78c:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
   1d78e:	691b      	ldr	r3, [r3, #16]
   1d790:	4631      	mov	r1, r6
   1d792:	4628      	mov	r0, r5
   1d794:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1d796:	e7ce      	b.n	1d736 <spi_nrfx_release+0x66>
		ctx->owner = NULL;
   1d798:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1d79a:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1d79e:	f006 ff97 	bl	246d0 <z_impl_k_sem_give>
}
   1d7a2:	e7ca      	b.n	1d73a <spi_nrfx_release+0x6a>
		return -EINVAL;
   1d7a4:	f06f 0015 	mvn.w	r0, #21
   1d7a8:	e7c8      	b.n	1d73c <spi_nrfx_release+0x6c>
		return -EBUSY;
   1d7aa:	f06f 000f 	mvn.w	r0, #15
   1d7ae:	e7c5      	b.n	1d73c <spi_nrfx_release+0x6c>
   1d7b0:	00031db4 	.word	0x00031db4
   1d7b4:	00031df4 	.word	0x00031df4
   1d7b8:	00031e14 	.word	0x00031e14
   1d7bc:	00031d88 	.word	0x00031d88

0001d7c0 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   1d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7c4:	b085      	sub	sp, #20
   1d7c6:	4604      	mov	r4, r0
   1d7c8:	9003      	str	r0, [sp, #12]
   1d7ca:	2200      	movs	r2, #0
   1d7cc:	2101      	movs	r1, #1
   1d7ce:	2004      	movs	r0, #4
   1d7d0:	f7f7 fcca 	bl	15168 <z_arm_irq_priority_set>
	return dev->data;
   1d7d4:	f8d4 8010 	ldr.w	r8, [r4, #16]
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1d7d8:	f8d8 a008 	ldr.w	sl, [r8, #8]
   1d7dc:	e06c      	b.n	1d8b8 <spi_1_init+0xf8>
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1d7de:	4d9c      	ldr	r5, [pc, #624]	; (1da50 <spi_1_init+0x290>)
   1d7e0:	f240 23de 	movw	r3, #734	; 0x2de
   1d7e4:	462a      	mov	r2, r5
   1d7e6:	499b      	ldr	r1, [pc, #620]	; (1da54 <spi_1_init+0x294>)
   1d7e8:	489b      	ldr	r0, [pc, #620]	; (1da58 <spi_1_init+0x298>)
   1d7ea:	f00e fcad 	bl	2c148 <printk>
   1d7ee:	489b      	ldr	r0, [pc, #620]	; (1da5c <spi_1_init+0x29c>)
   1d7f0:	f00e fcaa 	bl	2c148 <printk>
   1d7f4:	f240 21de 	movw	r1, #734	; 0x2de
   1d7f8:	4628      	mov	r0, r5
   1d7fa:	f00e feaa 	bl	2c552 <assert_post_action>
   1d7fe:	e07a      	b.n	1d8f6 <spi_1_init+0x136>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1d800:	4d93      	ldr	r5, [pc, #588]	; (1da50 <spi_1_init+0x290>)
   1d802:	f240 23e1 	movw	r3, #737	; 0x2e1
   1d806:	462a      	mov	r2, r5
   1d808:	4995      	ldr	r1, [pc, #596]	; (1da60 <spi_1_init+0x2a0>)
   1d80a:	4893      	ldr	r0, [pc, #588]	; (1da58 <spi_1_init+0x298>)
   1d80c:	f00e fc9c 	bl	2c148 <printk>
   1d810:	4894      	ldr	r0, [pc, #592]	; (1da64 <spi_1_init+0x2a4>)
   1d812:	f00e fc99 	bl	2c148 <printk>
   1d816:	f240 21e1 	movw	r1, #737	; 0x2e1
   1d81a:	4628      	mov	r0, r5
   1d81c:	f00e fe99 	bl	2c552 <assert_post_action>
   1d820:	e06d      	b.n	1d8fe <spi_1_init+0x13e>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   1d822:	4d8b      	ldr	r5, [pc, #556]	; (1da50 <spi_1_init+0x290>)
   1d824:	f240 23e5 	movw	r3, #741	; 0x2e5
   1d828:	462a      	mov	r2, r5
   1d82a:	498f      	ldr	r1, [pc, #572]	; (1da68 <spi_1_init+0x2a8>)
   1d82c:	488a      	ldr	r0, [pc, #552]	; (1da58 <spi_1_init+0x298>)
   1d82e:	f00e fc8b 	bl	2c148 <printk>
   1d832:	488e      	ldr	r0, [pc, #568]	; (1da6c <spi_1_init+0x2ac>)
   1d834:	f00e fc88 	bl	2c148 <printk>
   1d838:	f240 21e5 	movw	r1, #741	; 0x2e5
   1d83c:	4628      	mov	r0, r5
   1d83e:	f00e fe88 	bl	2c552 <assert_post_action>
   1d842:	e061      	b.n	1d908 <spi_1_init+0x148>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1d844:	4d82      	ldr	r5, [pc, #520]	; (1da50 <spi_1_init+0x290>)
   1d846:	f240 23e9 	movw	r3, #745	; 0x2e9
   1d84a:	462a      	mov	r2, r5
   1d84c:	4988      	ldr	r1, [pc, #544]	; (1da70 <spi_1_init+0x2b0>)
   1d84e:	4882      	ldr	r0, [pc, #520]	; (1da58 <spi_1_init+0x298>)
   1d850:	f00e fc7a 	bl	2c148 <printk>
   1d854:	f240 21e9 	movw	r1, #745	; 0x2e9
   1d858:	4628      	mov	r0, r5
   1d85a:	f00e fe7a 	bl	2c552 <assert_post_action>
   1d85e:	e057      	b.n	1d910 <spi_1_init+0x150>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1d860:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 1da50 <spi_1_init+0x290>
   1d864:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   1d868:	464a      	mov	r2, r9
   1d86a:	4982      	ldr	r1, [pc, #520]	; (1da74 <spi_1_init+0x2b4>)
   1d86c:	487a      	ldr	r0, [pc, #488]	; (1da58 <spi_1_init+0x298>)
   1d86e:	f00e fc6b 	bl	2c148 <printk>
   1d872:	4881      	ldr	r0, [pc, #516]	; (1da78 <spi_1_init+0x2b8>)
   1d874:	f00e fc68 	bl	2c148 <printk>
   1d878:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1d87c:	4648      	mov	r0, r9
   1d87e:	f00e fe68 	bl	2c552 <assert_post_action>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1d882:	e04a      	b.n	1d91a <spi_1_init+0x15a>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1d884:	f424 5380 	bic.w	r3, r4, #4096	; 0x1000
   1d888:	9302      	str	r3, [sp, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d88a:	9b01      	ldr	r3, [sp, #4]
   1d88c:	681b      	ldr	r3, [r3, #0]
   1d88e:	2501      	movs	r5, #1
   1d890:	fa05 f50b 	lsl.w	r5, r5, fp
   1d894:	422b      	tst	r3, r5
   1d896:	d048      	beq.n	1d92a <spi_1_init+0x16a>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1d898:	f014 0f01 	tst.w	r4, #1
   1d89c:	d057      	beq.n	1d94e <spi_1_init+0x18e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d89e:	683b      	ldr	r3, [r7, #0]
   1d8a0:	431d      	orrs	r5, r3
   1d8a2:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
   1d8a4:	9b00      	ldr	r3, [sp, #0]
   1d8a6:	681b      	ldr	r3, [r3, #0]
   1d8a8:	9a02      	ldr	r2, [sp, #8]
   1d8aa:	4659      	mov	r1, fp
   1d8ac:	4630      	mov	r0, r6
   1d8ae:	4798      	blx	r3
		if (ret < 0) {
   1d8b0:	2800      	cmp	r0, #0
   1d8b2:	db6a      	blt.n	1d98a <spi_1_init+0x1ca>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1d8b4:	f10a 0a08 	add.w	sl, sl, #8
   1d8b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d8bc:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1d8c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d8c4:	459a      	cmp	sl, r3
   1d8c6:	d25f      	bcs.n	1d988 <spi_1_init+0x1c8>
		if (!device_is_ready(cs_gpio->port)) {
   1d8c8:	f8da 0000 	ldr.w	r0, [sl]
   1d8cc:	f012 fdb0 	bl	30430 <z_device_ready>
   1d8d0:	2800      	cmp	r0, #0
   1d8d2:	d041      	beq.n	1d958 <spi_1_init+0x198>
	return gpio_pin_configure(spec->port,
   1d8d4:	f8da 6000 	ldr.w	r6, [sl]
   1d8d8:	f89a b004 	ldrb.w	fp, [sl, #4]
				  spec->dt_flags | extra_flags);
   1d8dc:	f89a 4005 	ldrb.w	r4, [sl, #5]
	return gpio_pin_configure(spec->port,
   1d8e0:	f444 54b0 	orr.w	r4, r4, #5632	; 0x1600
	const struct gpio_driver_api *api =
   1d8e4:	68b3      	ldr	r3, [r6, #8]
   1d8e6:	9300      	str	r3, [sp, #0]
	const struct gpio_driver_config *const cfg =
   1d8e8:	6873      	ldr	r3, [r6, #4]
   1d8ea:	9301      	str	r3, [sp, #4]
	struct gpio_driver_data *data =
   1d8ec:	6937      	ldr	r7, [r6, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1d8ee:	f414 2ffc 	tst.w	r4, #516096	; 0x7e000
   1d8f2:	f47f af74 	bne.w	1d7de <spi_1_init+0x1e>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1d8f6:	f004 0330 	and.w	r3, r4, #48	; 0x30
   1d8fa:	2b30      	cmp	r3, #48	; 0x30
   1d8fc:	d080      	beq.n	1d800 <spi_1_init+0x40>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   1d8fe:	f240 2302 	movw	r3, #514	; 0x202
   1d902:	4023      	ands	r3, r4
   1d904:	2b02      	cmp	r3, #2
   1d906:	d08c      	beq.n	1d822 <spi_1_init+0x62>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1d908:	f004 0306 	and.w	r3, r4, #6
   1d90c:	2b04      	cmp	r3, #4
   1d90e:	d099      	beq.n	1d844 <spi_1_init+0x84>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1d910:	f414 6540 	ands.w	r5, r4, #3072	; 0xc00
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1d914:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
   1d918:	d0a2      	beq.n	1d860 <spi_1_init+0xa0>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1d91a:	2d00      	cmp	r5, #0
   1d91c:	d0b2      	beq.n	1d884 <spi_1_init+0xc4>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1d91e:	f014 0f01 	tst.w	r4, #1
   1d922:	d0af      	beq.n	1d884 <spi_1_init+0xc4>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1d924:	f484 6440 	eor.w	r4, r4, #3072	; 0xc00
   1d928:	e7ac      	b.n	1d884 <spi_1_init+0xc4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d92a:	f8df 9124 	ldr.w	r9, [pc, #292]	; 1da50 <spi_1_init+0x290>
   1d92e:	f240 23fd 	movw	r3, #765	; 0x2fd
   1d932:	464a      	mov	r2, r9
   1d934:	4951      	ldr	r1, [pc, #324]	; (1da7c <spi_1_init+0x2bc>)
   1d936:	4848      	ldr	r0, [pc, #288]	; (1da58 <spi_1_init+0x298>)
   1d938:	f00e fc06 	bl	2c148 <printk>
   1d93c:	4850      	ldr	r0, [pc, #320]	; (1da80 <spi_1_init+0x2c0>)
   1d93e:	f00e fc03 	bl	2c148 <printk>
   1d942:	f240 21fd 	movw	r1, #765	; 0x2fd
   1d946:	4648      	mov	r0, r9
   1d948:	f00e fe03 	bl	2c552 <assert_post_action>
   1d94c:	e7a4      	b.n	1d898 <spi_1_init+0xd8>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d94e:	683b      	ldr	r3, [r7, #0]
   1d950:	ea23 0505 	bic.w	r5, r3, r5
   1d954:	603d      	str	r5, [r7, #0]
   1d956:	e7a5      	b.n	1d8a4 <spi_1_init+0xe4>
   1d958:	4a4a      	ldr	r2, [pc, #296]	; (1da84 <spi_1_init+0x2c4>)
   1d95a:	4b4b      	ldr	r3, [pc, #300]	; (1da88 <spi_1_init+0x2c8>)
   1d95c:	1ad2      	subs	r2, r2, r3
   1d95e:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1d960:	f04f 0300 	mov.w	r3, #0
   1d964:	2101      	movs	r1, #1
   1d966:	f361 0302 	bfi	r3, r1, #0, #3
   1d96a:	f36f 03c5 	bfc	r3, #3, #3
   1d96e:	f362 138f 	bfi	r3, r2, #6, #10
   1d972:	f8da 1000 	ldr.w	r1, [sl]
   1d976:	f89a 2004 	ldrb.w	r2, [sl, #4]
   1d97a:	6809      	ldr	r1, [r1, #0]
   1d97c:	4843      	ldr	r0, [pc, #268]	; (1da8c <spi_1_init+0x2cc>)
   1d97e:	f7f5 fff5 	bl	1396c <log_2>
			return -ENODEV;
   1d982:	f06f 0012 	mvn.w	r0, #18
   1d986:	e000      	b.n	1d98a <spi_1_init+0x1ca>
	return 0;
   1d988:	2000      	movs	r0, #0
SPI_NRFX_SPI_DEVICE(1);
   1d98a:	2800      	cmp	r0, #0
   1d98c:	db2b      	blt.n	1d9e6 <spi_1_init+0x226>
	return dev->data;
   1d98e:	9b03      	ldr	r3, [sp, #12]
   1d990:	691c      	ldr	r4, [r3, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1d992:	6823      	ldr	r3, [r4, #0]
   1d994:	b323      	cbz	r3, 1d9e0 <spi_1_init+0x220>
   1d996:	689b      	ldr	r3, [r3, #8]
   1d998:	b313      	cbz	r3, 1d9e0 <spi_1_init+0x220>
   1d99a:	681a      	ldr	r2, [r3, #0]
   1d99c:	b302      	cbz	r2, 1d9e0 <spi_1_init+0x220>
			k_busy_wait(ctx->config->cs->delay);
   1d99e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1d9a0:	f012 fec6 	bl	30730 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1d9a4:	6823      	ldr	r3, [r4, #0]
   1d9a6:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1d9a8:	681d      	ldr	r5, [r3, #0]
   1d9aa:	f893 8004 	ldrb.w	r8, [r3, #4]
	const struct gpio_driver_config *const cfg =
   1d9ae:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
   1d9b0:	692e      	ldr	r6, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d9b2:	681b      	ldr	r3, [r3, #0]
   1d9b4:	2701      	movs	r7, #1
   1d9b6:	fa07 f708 	lsl.w	r7, r7, r8
   1d9ba:	423b      	tst	r3, r7
   1d9bc:	d016      	beq.n	1d9ec <spi_1_init+0x22c>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1d9be:	6833      	ldr	r3, [r6, #0]
   1d9c0:	421f      	tst	r7, r3
   1d9c2:	d125      	bne.n	1da10 <spi_1_init+0x250>
   1d9c4:	2700      	movs	r7, #0
	const struct gpio_driver_config *const cfg =
   1d9c6:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d9c8:	681b      	ldr	r3, [r3, #0]
   1d9ca:	2601      	movs	r6, #1
   1d9cc:	fa06 f608 	lsl.w	r6, r6, r8
   1d9d0:	4233      	tst	r3, r6
   1d9d2:	d01f      	beq.n	1da14 <spi_1_init+0x254>
	if (value != 0)	{
   1d9d4:	b387      	cbz	r7, 1da38 <spi_1_init+0x278>
	const struct gpio_driver_api *api =
   1d9d6:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
   1d9d8:	68db      	ldr	r3, [r3, #12]
   1d9da:	4631      	mov	r1, r6
   1d9dc:	4628      	mov	r0, r5
   1d9de:	4798      	blx	r3
   1d9e0:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   1d9e2:	b37b      	cbz	r3, 1da44 <spi_1_init+0x284>
SPI_NRFX_SPI_DEVICE(1);
   1d9e4:	2000      	movs	r0, #0
   1d9e6:	b005      	add	sp, #20
   1d9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d9ec:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1da50 <spi_1_init+0x290>
   1d9f0:	f240 43bb 	movw	r3, #1211	; 0x4bb
   1d9f4:	464a      	mov	r2, r9
   1d9f6:	4921      	ldr	r1, [pc, #132]	; (1da7c <spi_1_init+0x2bc>)
   1d9f8:	4817      	ldr	r0, [pc, #92]	; (1da58 <spi_1_init+0x298>)
   1d9fa:	f00e fba5 	bl	2c148 <printk>
   1d9fe:	4820      	ldr	r0, [pc, #128]	; (1da80 <spi_1_init+0x2c0>)
   1da00:	f00e fba2 	bl	2c148 <printk>
   1da04:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1da08:	4648      	mov	r0, r9
   1da0a:	f00e fda2 	bl	2c552 <assert_post_action>
   1da0e:	e7d6      	b.n	1d9be <spi_1_init+0x1fe>
		value = (value != 0) ? 0 : 1;
   1da10:	2701      	movs	r7, #1
   1da12:	e7d8      	b.n	1d9c6 <spi_1_init+0x206>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1da14:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1da50 <spi_1_init+0x290>
   1da18:	f240 4391 	movw	r3, #1169	; 0x491
   1da1c:	4642      	mov	r2, r8
   1da1e:	4917      	ldr	r1, [pc, #92]	; (1da7c <spi_1_init+0x2bc>)
   1da20:	480d      	ldr	r0, [pc, #52]	; (1da58 <spi_1_init+0x298>)
   1da22:	f00e fb91 	bl	2c148 <printk>
   1da26:	4816      	ldr	r0, [pc, #88]	; (1da80 <spi_1_init+0x2c0>)
   1da28:	f00e fb8e 	bl	2c148 <printk>
   1da2c:	f240 4191 	movw	r1, #1169	; 0x491
   1da30:	4640      	mov	r0, r8
   1da32:	f00e fd8e 	bl	2c552 <assert_post_action>
   1da36:	e7cd      	b.n	1d9d4 <spi_1_init+0x214>
	const struct gpio_driver_api *api =
   1da38:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
   1da3a:	691b      	ldr	r3, [r3, #16]
   1da3c:	4631      	mov	r1, r6
   1da3e:	4628      	mov	r0, r5
   1da40:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1da42:	e7cd      	b.n	1d9e0 <spi_1_init+0x220>
		ctx->owner = NULL;
   1da44:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1da46:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1da4a:	f006 fe41 	bl	246d0 <z_impl_k_sem_give>
}
   1da4e:	e7c9      	b.n	1d9e4 <spi_1_init+0x224>
   1da50:	00031d88 	.word	0x00031d88
   1da54:	00034e04 	.word	0x00034e04
   1da58:	00031df4 	.word	0x00031df4
   1da5c:	00034e64 	.word	0x00034e64
   1da60:	00034e88 	.word	0x00034e88
   1da64:	00034ec4 	.word	0x00034ec4
   1da68:	00034f04 	.word	0x00034f04
   1da6c:	00034f38 	.word	0x00034f38
   1da70:	00034f8c 	.word	0x00034f8c
   1da74:	00035044 	.word	0x00035044
   1da78:	00035088 	.word	0x00035088
   1da7c:	00031db4 	.word	0x00031db4
   1da80:	00031e14 	.word	0x00031e14
   1da84:	000319d8 	.word	0x000319d8
   1da88:	00031908 	.word	0x00031908
   1da8c:	000350b4 	.word	0x000350b4

0001da90 <transfer_next_chunk>:
{
   1da90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1da94:	b084      	sub	sp, #16
	return dev->data;
   1da96:	6904      	ldr	r4, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1da98:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1da9a:	2a00      	cmp	r2, #0
   1da9c:	d063      	beq.n	1db66 <transfer_next_chunk+0xd6>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1da9e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1daa0:	2b00      	cmp	r3, #0
   1daa2:	d062      	beq.n	1db6a <transfer_next_chunk+0xda>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1daa4:	4293      	cmp	r3, r2
   1daa6:	bf28      	it	cs
   1daa8:	4613      	movcs	r3, r2
	if (chunk_len > 0) {
   1daaa:	2b00      	cmp	r3, #0
   1daac:	d069      	beq.n	1db82 <transfer_next_chunk+0xf2>
		dev_data->chunk_len = chunk_len;
   1daae:	66a3      	str	r3, [r4, #104]	; 0x68
		xfer.p_tx_buffer = ctx->tx_buf;
   1dab0:	6d61      	ldr	r1, [r4, #84]	; 0x54
   1dab2:	9100      	str	r1, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1dab4:	2900      	cmp	r1, #0
   1dab6:	d05a      	beq.n	1db6e <transfer_next_chunk+0xde>
   1dab8:	2a00      	cmp	r2, #0
   1daba:	d15a      	bne.n	1db72 <transfer_next_chunk+0xe2>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dabc:	2a00      	cmp	r2, #0
   1dabe:	d05a      	beq.n	1db76 <transfer_next_chunk+0xe6>
   1dac0:	461a      	mov	r2, r3
   1dac2:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1dac4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1dac6:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1dac8:	2a00      	cmp	r2, #0
   1daca:	d056      	beq.n	1db7a <transfer_next_chunk+0xea>
   1dacc:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1dace:	2a00      	cmp	r2, #0
   1dad0:	d155      	bne.n	1db7e <transfer_next_chunk+0xee>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dad2:	b902      	cbnz	r2, 1dad6 <transfer_next_chunk+0x46>
   1dad4:	2300      	movs	r3, #0
   1dad6:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1dad8:	2200      	movs	r2, #0
   1dada:	4669      	mov	r1, sp
   1dadc:	6840      	ldr	r0, [r0, #4]
   1dade:	f004 fc27 	bl	22330 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1dae2:	4b3f      	ldr	r3, [pc, #252]	; (1dbe0 <transfer_next_chunk+0x150>)
   1dae4:	4298      	cmp	r0, r3
   1dae6:	d03b      	beq.n	1db60 <transfer_next_chunk+0xd0>
		error = -EIO;
   1dae8:	f06f 0504 	mvn.w	r5, #4
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1daec:	6823      	ldr	r3, [r4, #0]
   1daee:	2b00      	cmp	r3, #0
   1daf0:	d02e      	beq.n	1db50 <transfer_next_chunk+0xc0>
   1daf2:	689a      	ldr	r2, [r3, #8]
   1daf4:	b362      	cbz	r2, 1db50 <transfer_next_chunk+0xc0>
   1daf6:	6811      	ldr	r1, [r2, #0]
   1daf8:	b351      	cbz	r1, 1db50 <transfer_next_chunk+0xc0>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   1dafa:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   1dafc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1db00:	d126      	bne.n	1db50 <transfer_next_chunk+0xc0>
			k_busy_wait(ctx->config->cs->delay);
   1db02:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1db04:	f012 fe14 	bl	30730 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1db08:	6823      	ldr	r3, [r4, #0]
   1db0a:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1db0c:	681e      	ldr	r6, [r3, #0]
   1db0e:	f893 9004 	ldrb.w	r9, [r3, #4]
	const struct gpio_driver_config *const cfg =
   1db12:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   1db14:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1db16:	681b      	ldr	r3, [r3, #0]
   1db18:	f04f 0801 	mov.w	r8, #1
   1db1c:	fa08 f809 	lsl.w	r8, r8, r9
   1db20:	ea13 0f08 	tst.w	r3, r8
   1db24:	d02f      	beq.n	1db86 <transfer_next_chunk+0xf6>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1db26:	683b      	ldr	r3, [r7, #0]
   1db28:	ea18 0f03 	tst.w	r8, r3
   1db2c:	d13d      	bne.n	1dbaa <transfer_next_chunk+0x11a>
   1db2e:	f04f 0800 	mov.w	r8, #0
	const struct gpio_driver_config *const cfg =
   1db32:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1db34:	681b      	ldr	r3, [r3, #0]
   1db36:	2701      	movs	r7, #1
   1db38:	fa07 f709 	lsl.w	r7, r7, r9
   1db3c:	423b      	tst	r3, r7
   1db3e:	d037      	beq.n	1dbb0 <transfer_next_chunk+0x120>
	if (value != 0)	{
   1db40:	f1b8 0f00 	cmp.w	r8, #0
   1db44:	d046      	beq.n	1dbd4 <transfer_next_chunk+0x144>
	const struct gpio_driver_api *api =
   1db46:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   1db48:	68db      	ldr	r3, [r3, #12]
   1db4a:	4639      	mov	r1, r7
   1db4c:	4630      	mov	r0, r6
   1db4e:	4798      	blx	r3
	ctx->sync_status = status;
   1db50:	6425      	str	r5, [r4, #64]	; 0x40
	k_sem_give(&ctx->sync);
   1db52:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   1db56:	f006 fdbb 	bl	246d0 <z_impl_k_sem_give>
	dev_data->busy = false;
   1db5a:	2300      	movs	r3, #0
   1db5c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1db60:	b004      	add	sp, #16
   1db62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ctx->rx_len;
   1db66:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1db68:	e79f      	b.n	1daaa <transfer_next_chunk+0x1a>
		return ctx->tx_len;
   1db6a:	4613      	mov	r3, r2
   1db6c:	e79d      	b.n	1daaa <transfer_next_chunk+0x1a>
	return !!(ctx->tx_buf && ctx->tx_len);
   1db6e:	2200      	movs	r2, #0
   1db70:	e7a4      	b.n	1dabc <transfer_next_chunk+0x2c>
   1db72:	2201      	movs	r2, #1
   1db74:	e7a2      	b.n	1dabc <transfer_next_chunk+0x2c>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1db76:	2200      	movs	r2, #0
   1db78:	e7a3      	b.n	1dac2 <transfer_next_chunk+0x32>
	return !!(ctx->rx_buf && ctx->rx_len);
   1db7a:	2200      	movs	r2, #0
   1db7c:	e7a9      	b.n	1dad2 <transfer_next_chunk+0x42>
   1db7e:	2201      	movs	r2, #1
   1db80:	e7a7      	b.n	1dad2 <transfer_next_chunk+0x42>
	int error = 0;
   1db82:	2500      	movs	r5, #0
   1db84:	e7b2      	b.n	1daec <transfer_next_chunk+0x5c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1db86:	f8df a068 	ldr.w	sl, [pc, #104]	; 1dbf0 <transfer_next_chunk+0x160>
   1db8a:	f240 43bb 	movw	r3, #1211	; 0x4bb
   1db8e:	4652      	mov	r2, sl
   1db90:	4914      	ldr	r1, [pc, #80]	; (1dbe4 <transfer_next_chunk+0x154>)
   1db92:	4815      	ldr	r0, [pc, #84]	; (1dbe8 <transfer_next_chunk+0x158>)
   1db94:	f00e fad8 	bl	2c148 <printk>
   1db98:	4814      	ldr	r0, [pc, #80]	; (1dbec <transfer_next_chunk+0x15c>)
   1db9a:	f00e fad5 	bl	2c148 <printk>
   1db9e:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1dba2:	4650      	mov	r0, sl
   1dba4:	f00e fcd5 	bl	2c552 <assert_post_action>
   1dba8:	e7bd      	b.n	1db26 <transfer_next_chunk+0x96>
		value = (value != 0) ? 0 : 1;
   1dbaa:	f04f 0801 	mov.w	r8, #1
   1dbae:	e7c0      	b.n	1db32 <transfer_next_chunk+0xa2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dbb0:	f8df 903c 	ldr.w	r9, [pc, #60]	; 1dbf0 <transfer_next_chunk+0x160>
   1dbb4:	f240 4391 	movw	r3, #1169	; 0x491
   1dbb8:	464a      	mov	r2, r9
   1dbba:	490a      	ldr	r1, [pc, #40]	; (1dbe4 <transfer_next_chunk+0x154>)
   1dbbc:	480a      	ldr	r0, [pc, #40]	; (1dbe8 <transfer_next_chunk+0x158>)
   1dbbe:	f00e fac3 	bl	2c148 <printk>
   1dbc2:	480a      	ldr	r0, [pc, #40]	; (1dbec <transfer_next_chunk+0x15c>)
   1dbc4:	f00e fac0 	bl	2c148 <printk>
   1dbc8:	f240 4191 	movw	r1, #1169	; 0x491
   1dbcc:	4648      	mov	r0, r9
   1dbce:	f00e fcc0 	bl	2c552 <assert_post_action>
   1dbd2:	e7b5      	b.n	1db40 <transfer_next_chunk+0xb0>
	const struct gpio_driver_api *api =
   1dbd4:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   1dbd6:	691b      	ldr	r3, [r3, #16]
   1dbd8:	4639      	mov	r1, r7
   1dbda:	4630      	mov	r0, r6
   1dbdc:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1dbde:	e7b7      	b.n	1db50 <transfer_next_chunk+0xc0>
   1dbe0:	0bad0000 	.word	0x0bad0000
   1dbe4:	00031db4 	.word	0x00031db4
   1dbe8:	00031df4 	.word	0x00031df4
   1dbec:	00031e14 	.word	0x00031e14
   1dbf0:	00031d88 	.word	0x00031d88

0001dbf4 <transceive>:
{
   1dbf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbf8:	4607      	mov	r7, r0
   1dbfa:	460e      	mov	r6, r1
   1dbfc:	4691      	mov	r9, r2
   1dbfe:	4698      	mov	r8, r3
	return dev->data;
   1dc00:	6904      	ldr	r4, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, signal, spi_cfg);
   1dc02:	4625      	mov	r5, r4
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1dc04:	888b      	ldrh	r3, [r1, #4]
   1dc06:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1dc0a:	d004      	beq.n	1dc16 <transceive+0x22>
   1dc0c:	69a3      	ldr	r3, [r4, #24]
   1dc0e:	b913      	cbnz	r3, 1dc16 <transceive+0x22>
		(ctx->owner == spi_cfg)) {
   1dc10:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   1dc12:	4299      	cmp	r1, r3
   1dc14:	d008      	beq.n	1dc28 <transceive+0x34>
	k_sem_take(&ctx->lock, K_FOREVER);
   1dc16:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   1dc1a:	f04f 32ff 	mov.w	r2, #4294967295
   1dc1e:	f04f 33ff 	mov.w	r3, #4294967295
   1dc22:	f006 fd9d 	bl	24760 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1dc26:	6066      	str	r6, [r4, #4]
	error = configure(dev, spi_cfg);
   1dc28:	4631      	mov	r1, r6
   1dc2a:	4638      	mov	r0, r7
   1dc2c:	f7ff fc22 	bl	1d474 <configure>
	if (error == 0) {
   1dc30:	4606      	mov	r6, r0
   1dc32:	b140      	cbz	r0, 1dc46 <transceive+0x52>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1dc34:	6823      	ldr	r3, [r4, #0]
   1dc36:	889b      	ldrh	r3, [r3, #4]
   1dc38:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1dc3c:	f000 80d7 	beq.w	1ddee <transceive+0x1fa>
}
   1dc40:	4630      	mov	r0, r6
   1dc42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dev_data->busy = true;
   1dc46:	2301      	movs	r3, #1
   1dc48:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1dc4c:	f1b9 0f00 	cmp.w	r9, #0
   1dc50:	d010      	beq.n	1dc74 <transceive+0x80>
   1dc52:	f8d9 3000 	ldr.w	r3, [r9]
   1dc56:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1dc58:	b173      	cbz	r3, 1dc78 <transceive+0x84>
   1dc5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1dc5e:	64a3      	str	r3, [r4, #72]	; 0x48
	while (*count) {
   1dc60:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1dc62:	b173      	cbz	r3, 1dc82 <transceive+0x8e>
		if (((*current)->len / dfs) != 0) {
   1dc64:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   1dc66:	6851      	ldr	r1, [r2, #4]
   1dc68:	b941      	cbnz	r1, 1dc7c <transceive+0x88>
		++(*current);
   1dc6a:	3208      	adds	r2, #8
   1dc6c:	646a      	str	r2, [r5, #68]	; 0x44
		--(*count);
   1dc6e:	3b01      	subs	r3, #1
   1dc70:	64ab      	str	r3, [r5, #72]	; 0x48
   1dc72:	e7f5      	b.n	1dc60 <transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1dc74:	464b      	mov	r3, r9
   1dc76:	e7ee      	b.n	1dc56 <transceive+0x62>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1dc78:	2300      	movs	r3, #0
   1dc7a:	e7f0      	b.n	1dc5e <transceive+0x6a>
			*buf_len = (*current)->len / dfs;
   1dc7c:	65a1      	str	r1, [r4, #88]	; 0x58
			return (*current)->buf;
   1dc7e:	6813      	ldr	r3, [r2, #0]
   1dc80:	e000      	b.n	1dc84 <transceive+0x90>
	*buf_len = 0;
   1dc82:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
   1dc84:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1dc86:	f1b8 0f00 	cmp.w	r8, #0
   1dc8a:	d010      	beq.n	1dcae <transceive+0xba>
   1dc8c:	f8d8 3000 	ldr.w	r3, [r8]
   1dc90:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1dc92:	b173      	cbz	r3, 1dcb2 <transceive+0xbe>
   1dc94:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1dc98:	6523      	str	r3, [r4, #80]	; 0x50
	while (*count) {
   1dc9a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1dc9c:	b172      	cbz	r2, 1dcbc <transceive+0xc8>
		if (((*current)->len / dfs) != 0) {
   1dc9e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1dca0:	6859      	ldr	r1, [r3, #4]
   1dca2:	b941      	cbnz	r1, 1dcb6 <transceive+0xc2>
		++(*current);
   1dca4:	3308      	adds	r3, #8
   1dca6:	64eb      	str	r3, [r5, #76]	; 0x4c
		--(*count);
   1dca8:	3a01      	subs	r2, #1
   1dcaa:	652a      	str	r2, [r5, #80]	; 0x50
   1dcac:	e7f5      	b.n	1dc9a <transceive+0xa6>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1dcae:	4643      	mov	r3, r8
   1dcb0:	e7ee      	b.n	1dc90 <transceive+0x9c>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1dcb2:	2300      	movs	r3, #0
   1dcb4:	e7f0      	b.n	1dc98 <transceive+0xa4>
			*buf_len = (*current)->len / dfs;
   1dcb6:	6621      	str	r1, [r4, #96]	; 0x60
			return (*current)->buf;
   1dcb8:	681b      	ldr	r3, [r3, #0]
   1dcba:	e001      	b.n	1dcc0 <transceive+0xcc>
	*buf_len = 0;
   1dcbc:	2300      	movs	r3, #0
   1dcbe:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
   1dcc0:	65e3      	str	r3, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1dcc2:	2300      	movs	r3, #0
   1dcc4:	6423      	str	r3, [r4, #64]	; 0x40
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1dcc6:	6823      	ldr	r3, [r4, #0]
   1dcc8:	b35b      	cbz	r3, 1dd22 <transceive+0x12e>
   1dcca:	689b      	ldr	r3, [r3, #8]
   1dccc:	b34b      	cbz	r3, 1dd22 <transceive+0x12e>
   1dcce:	681d      	ldr	r5, [r3, #0]
   1dcd0:	b33d      	cbz	r5, 1dd22 <transceive+0x12e>
	return gpio_pin_set(spec->port, spec->pin, value);
   1dcd2:	f893 9004 	ldrb.w	r9, [r3, #4]
	const struct gpio_driver_config *const cfg =
   1dcd6:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
   1dcd8:	f8d5 a010 	ldr.w	sl, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dcdc:	681b      	ldr	r3, [r3, #0]
   1dcde:	f04f 0801 	mov.w	r8, #1
   1dce2:	fa08 f809 	lsl.w	r8, r8, r9
   1dce6:	ea13 0f08 	tst.w	r3, r8
   1dcea:	d043      	beq.n	1dd74 <transceive+0x180>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1dcec:	f8da 3000 	ldr.w	r3, [sl]
   1dcf0:	ea18 0f03 	tst.w	r8, r3
   1dcf4:	d100      	bne.n	1dcf8 <transceive+0x104>
   1dcf6:	2601      	movs	r6, #1
	const struct gpio_driver_config *const cfg =
   1dcf8:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dcfa:	681b      	ldr	r3, [r3, #0]
   1dcfc:	f04f 0801 	mov.w	r8, #1
   1dd00:	fa08 f809 	lsl.w	r8, r8, r9
   1dd04:	ea13 0f08 	tst.w	r3, r8
   1dd08:	d046      	beq.n	1dd98 <transceive+0x1a4>
	if (value != 0)	{
   1dd0a:	2e00      	cmp	r6, #0
   1dd0c:	d056      	beq.n	1ddbc <transceive+0x1c8>
	const struct gpio_driver_api *api =
   1dd0e:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
   1dd10:	68db      	ldr	r3, [r3, #12]
   1dd12:	4641      	mov	r1, r8
   1dd14:	4628      	mov	r0, r5
   1dd16:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
   1dd18:	6823      	ldr	r3, [r4, #0]
   1dd1a:	689b      	ldr	r3, [r3, #8]
   1dd1c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1dd1e:	f012 fd07 	bl	30730 <z_impl_k_busy_wait>
		transfer_next_chunk(dev);
   1dd22:	4638      	mov	r0, r7
   1dd24:	f7ff feb4 	bl	1da90 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1dd28:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1dd2a:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1dd2c:	429a      	cmp	r2, r3
   1dd2e:	bf38      	it	cc
   1dd30:	461a      	movcc	r2, r3
   1dd32:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1dd36:	fb03 f302 	mul.w	r3, r3, r2
			     ctx->config->frequency;
   1dd3a:	4625      	mov	r5, r4
   1dd3c:	f855 2b28 	ldr.w	r2, [r5], #40
   1dd40:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1dd42:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1dd46:	33c8      	adds	r3, #200	; 0xc8
		} else {
			return (t * to_hz + off) / from_hz;
   1dd48:	0c59      	lsrs	r1, r3, #17
   1dd4a:	03d8      	lsls	r0, r3, #15
   1dd4c:	f240 36e7 	movw	r6, #999	; 0x3e7
   1dd50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1dd54:	2300      	movs	r3, #0
   1dd56:	1980      	adds	r0, r0, r6
   1dd58:	f04f 0600 	mov.w	r6, #0
   1dd5c:	eb46 0101 	adc.w	r1, r6, r1
   1dd60:	f7e2 fe3c 	bl	9dc <__aeabi_uldivmod>
   1dd64:	4602      	mov	r2, r0
   1dd66:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1dd68:	4628      	mov	r0, r5
   1dd6a:	f006 fcf9 	bl	24760 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1dd6e:	bb58      	cbnz	r0, 1ddc8 <transceive+0x1d4>
	status = ctx->sync_status;
   1dd70:	6c26      	ldr	r6, [r4, #64]	; 0x40
	return status;
   1dd72:	e75f      	b.n	1dc34 <transceive+0x40>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dd74:	f8df b09c 	ldr.w	fp, [pc, #156]	; 1de14 <transceive+0x220>
   1dd78:	f240 43bb 	movw	r3, #1211	; 0x4bb
   1dd7c:	465a      	mov	r2, fp
   1dd7e:	491f      	ldr	r1, [pc, #124]	; (1ddfc <transceive+0x208>)
   1dd80:	481f      	ldr	r0, [pc, #124]	; (1de00 <transceive+0x20c>)
   1dd82:	f00e f9e1 	bl	2c148 <printk>
   1dd86:	481f      	ldr	r0, [pc, #124]	; (1de04 <transceive+0x210>)
   1dd88:	f00e f9de 	bl	2c148 <printk>
   1dd8c:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1dd90:	4658      	mov	r0, fp
   1dd92:	f00e fbde 	bl	2c552 <assert_post_action>
   1dd96:	e7a9      	b.n	1dcec <transceive+0xf8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dd98:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1de14 <transceive+0x220>
   1dd9c:	f240 4391 	movw	r3, #1169	; 0x491
   1dda0:	464a      	mov	r2, r9
   1dda2:	4916      	ldr	r1, [pc, #88]	; (1ddfc <transceive+0x208>)
   1dda4:	4816      	ldr	r0, [pc, #88]	; (1de00 <transceive+0x20c>)
   1dda6:	f00e f9cf 	bl	2c148 <printk>
   1ddaa:	4816      	ldr	r0, [pc, #88]	; (1de04 <transceive+0x210>)
   1ddac:	f00e f9cc 	bl	2c148 <printk>
   1ddb0:	f240 4191 	movw	r1, #1169	; 0x491
   1ddb4:	4648      	mov	r0, r9
   1ddb6:	f00e fbcc 	bl	2c552 <assert_post_action>
   1ddba:	e7a6      	b.n	1dd0a <transceive+0x116>
	const struct gpio_driver_api *api =
   1ddbc:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
   1ddbe:	691b      	ldr	r3, [r3, #16]
   1ddc0:	4641      	mov	r1, r8
   1ddc2:	4628      	mov	r0, r5
   1ddc4:	4798      	blx	r3
   1ddc6:	e7a7      	b.n	1dd18 <transceive+0x124>
   1ddc8:	4b0f      	ldr	r3, [pc, #60]	; (1de08 <transceive+0x214>)
   1ddca:	4a10      	ldr	r2, [pc, #64]	; (1de0c <transceive+0x218>)
   1ddcc:	1a9b      	subs	r3, r3, r2
   1ddce:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Timeout waiting for transfer complete");
   1ddd0:	f04f 0100 	mov.w	r1, #0
   1ddd4:	2201      	movs	r2, #1
   1ddd6:	f362 0102 	bfi	r1, r2, #0, #3
   1ddda:	f36f 01c5 	bfc	r1, #3, #3
   1ddde:	f363 118f 	bfi	r1, r3, #6, #10
   1dde2:	480b      	ldr	r0, [pc, #44]	; (1de10 <transceive+0x21c>)
   1dde4:	f7f5 fd5c 	bl	138a0 <log_0>
		return -ETIMEDOUT;
   1dde8:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1ddec:	e722      	b.n	1dc34 <transceive+0x40>
		ctx->owner = NULL;
   1ddee:	2300      	movs	r3, #0
   1ddf0:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1ddf2:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1ddf6:	f006 fc6b 	bl	246d0 <z_impl_k_sem_give>
	return error;
   1ddfa:	e721      	b.n	1dc40 <transceive+0x4c>
   1ddfc:	00031db4 	.word	0x00031db4
   1de00:	00031df4 	.word	0x00031df4
   1de04:	00031e14 	.word	0x00031e14
   1de08:	000319d8 	.word	0x000319d8
   1de0c:	00031908 	.word	0x00031908
   1de10:	000350d8 	.word	0x000350d8
   1de14:	00031d88 	.word	0x00031d88

0001de18 <event_handler>:
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1de18:	7803      	ldrb	r3, [r0, #0]
   1de1a:	2b00      	cmp	r3, #0
   1de1c:	d16d      	bne.n	1defa <event_handler+0xe2>
{
   1de1e:	b510      	push	{r4, lr}
   1de20:	460c      	mov	r4, r1
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1de22:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (!ctx->tx_len) {
   1de24:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1de26:	b1cb      	cbz	r3, 1de5c <event_handler+0x44>
	if (len > ctx->tx_len) {
   1de28:	429a      	cmp	r2, r3
   1de2a:	d807      	bhi.n	1de3c <event_handler+0x24>
	ctx->tx_len -= len;
   1de2c:	1a9b      	subs	r3, r3, r2
   1de2e:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1de30:	b31b      	cbz	r3, 1de7a <event_handler+0x62>
	} else if (ctx->tx_buf) {
   1de32:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1de34:	b193      	cbz	r3, 1de5c <event_handler+0x44>
		ctx->tx_buf += dfs * len;
   1de36:	441a      	add	r2, r3
   1de38:	654a      	str	r2, [r1, #84]	; 0x54
   1de3a:	e00f      	b.n	1de5c <event_handler+0x44>
   1de3c:	4b2f      	ldr	r3, [pc, #188]	; (1defc <event_handler+0xe4>)
   1de3e:	4a30      	ldr	r2, [pc, #192]	; (1df00 <event_handler+0xe8>)
   1de40:	1a9b      	subs	r3, r3, r2
   1de42:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Update exceeds current buffer");
   1de44:	f04f 0100 	mov.w	r1, #0
   1de48:	2201      	movs	r2, #1
   1de4a:	f362 0102 	bfi	r1, r2, #0, #3
   1de4e:	f36f 01c5 	bfc	r1, #3, #3
   1de52:	f363 118f 	bfi	r1, r3, #6, #10
   1de56:	482b      	ldr	r0, [pc, #172]	; (1df04 <event_handler+0xec>)
   1de58:	f7f5 fd22 	bl	138a0 <log_0>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1de5c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (!ctx->rx_len) {
   1de5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1de60:	2b00      	cmp	r3, #0
   1de62:	d030      	beq.n	1dec6 <event_handler+0xae>
	if (len > ctx->rx_len) {
   1de64:	429a      	cmp	r2, r3
   1de66:	d81e      	bhi.n	1dea6 <event_handler+0x8e>
	ctx->rx_len -= len;
   1de68:	1a9b      	subs	r3, r3, r2
   1de6a:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1de6c:	2b00      	cmp	r3, #0
   1de6e:	d02e      	beq.n	1dece <event_handler+0xb6>
	} else if (ctx->rx_buf) {
   1de70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1de72:	b343      	cbz	r3, 1dec6 <event_handler+0xae>
		ctx->rx_buf += dfs * len;
   1de74:	441a      	add	r2, r3
   1de76:	65e2      	str	r2, [r4, #92]	; 0x5c
   1de78:	e025      	b.n	1dec6 <event_handler+0xae>
		++ctx->current_tx;
   1de7a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1de7c:	3308      	adds	r3, #8
   1de7e:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1de80:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1de82:	3b01      	subs	r3, #1
   1de84:	648b      	str	r3, [r1, #72]	; 0x48
	while (*count) {
   1de86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1de88:	b153      	cbz	r3, 1dea0 <event_handler+0x88>
		if (((*current)->len / dfs) != 0) {
   1de8a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1de8c:	6851      	ldr	r1, [r2, #4]
   1de8e:	b921      	cbnz	r1, 1de9a <event_handler+0x82>
		++(*current);
   1de90:	3208      	adds	r2, #8
   1de92:	6462      	str	r2, [r4, #68]	; 0x44
		--(*count);
   1de94:	3b01      	subs	r3, #1
   1de96:	64a3      	str	r3, [r4, #72]	; 0x48
   1de98:	e7f5      	b.n	1de86 <event_handler+0x6e>
			*buf_len = (*current)->len / dfs;
   1de9a:	65a1      	str	r1, [r4, #88]	; 0x58
			return (*current)->buf;
   1de9c:	6813      	ldr	r3, [r2, #0]
   1de9e:	e000      	b.n	1dea2 <event_handler+0x8a>
	*buf_len = 0;
   1dea0:	65a3      	str	r3, [r4, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
   1dea2:	6563      	str	r3, [r4, #84]	; 0x54
   1dea4:	e7da      	b.n	1de5c <event_handler+0x44>
   1dea6:	4b15      	ldr	r3, [pc, #84]	; (1defc <event_handler+0xe4>)
   1dea8:	4a15      	ldr	r2, [pc, #84]	; (1df00 <event_handler+0xe8>)
   1deaa:	1a9b      	subs	r3, r3, r2
   1deac:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Update exceeds current buffer");
   1deae:	f04f 0100 	mov.w	r1, #0
   1deb2:	2201      	movs	r2, #1
   1deb4:	f362 0102 	bfi	r1, r2, #0, #3
   1deb8:	f36f 01c5 	bfc	r1, #3, #3
   1debc:	f363 118f 	bfi	r1, r3, #6, #10
   1dec0:	4810      	ldr	r0, [pc, #64]	; (1df04 <event_handler+0xec>)
   1dec2:	f7f5 fced 	bl	138a0 <log_0>
		transfer_next_chunk(dev_data->dev);
   1dec6:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1dec8:	f7ff fde2 	bl	1da90 <transfer_next_chunk>
}
   1decc:	bd10      	pop	{r4, pc}
		++ctx->current_rx;
   1dece:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1ded0:	3308      	adds	r3, #8
   1ded2:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1ded4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1ded6:	3b01      	subs	r3, #1
   1ded8:	6523      	str	r3, [r4, #80]	; 0x50
	while (*count) {
   1deda:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1dedc:	b153      	cbz	r3, 1def4 <event_handler+0xdc>
		if (((*current)->len / dfs) != 0) {
   1dede:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   1dee0:	6851      	ldr	r1, [r2, #4]
   1dee2:	b921      	cbnz	r1, 1deee <event_handler+0xd6>
		++(*current);
   1dee4:	3208      	adds	r2, #8
   1dee6:	64e2      	str	r2, [r4, #76]	; 0x4c
		--(*count);
   1dee8:	3b01      	subs	r3, #1
   1deea:	6523      	str	r3, [r4, #80]	; 0x50
   1deec:	e7f5      	b.n	1deda <event_handler+0xc2>
			*buf_len = (*current)->len / dfs;
   1deee:	6621      	str	r1, [r4, #96]	; 0x60
			return (*current)->buf;
   1def0:	6813      	ldr	r3, [r2, #0]
   1def2:	e000      	b.n	1def6 <event_handler+0xde>
	*buf_len = 0;
   1def4:	6623      	str	r3, [r4, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
   1def6:	65e3      	str	r3, [r4, #92]	; 0x5c
   1def8:	e7e5      	b.n	1dec6 <event_handler+0xae>
   1defa:	4770      	bx	lr
   1defc:	000319d8 	.word	0x000319d8
   1df00:	00031908 	.word	0x00031908
   1df04:	00035100 	.word	0x00035100

0001df08 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   1df08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df0c:	b086      	sub	sp, #24
   1df0e:	460c      	mov	r4, r1
	return dev->data;
   1df10:	6907      	ldr	r7, [r0, #16]
	return dev->config;
   1df12:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
	struct spi_context *ctx = &dev_data->ctx;
	uint32_t max_freq = dev_config->max_freq;
   1df16:	f8d8 e00c 	ldr.w	lr, [r8, #12]
	nrfx_spim_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1df1a:	f897 c06d 	ldrb.w	ip, [r7, #109]	; 0x6d
   1df1e:	f1bc 0f00 	cmp.w	ip, #0
   1df22:	d003      	beq.n	1df2c <configure+0x24>
	return !!(ctx->config == config);
   1df24:	683b      	ldr	r3, [r7, #0]
   1df26:	428b      	cmp	r3, r1
   1df28:	f000 8104 	beq.w	1e134 <configure+0x22c>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1df2c:	88a3      	ldrh	r3, [r4, #4]
   1df2e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1df32:	d13c      	bne.n	1dfae <configure+0xa6>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1df34:	f013 0f01 	tst.w	r3, #1
   1df38:	d14c      	bne.n	1dfd4 <configure+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1df3a:	f013 0f08 	tst.w	r3, #8
   1df3e:	d15d      	bne.n	1dffc <configure+0xf4>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1df40:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1df44:	2b08      	cmp	r3, #8
   1df46:	d16c      	bne.n	1e022 <configure+0x11a>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   1df48:	6822      	ldr	r2, [r4, #0]
   1df4a:	4b7b      	ldr	r3, [pc, #492]	; (1e138 <configure+0x230>)
   1df4c:	429a      	cmp	r2, r3
   1df4e:	d97b      	bls.n	1e048 <configure+0x140>
	    nrf_clock_hfclk_div_get(NRF_CLOCK) != NRF_CLOCK_HFCLK_DIV_1) {
		max_freq = 16000000;
	}
#endif

	config = dev_config->def_config;
   1df50:	466d      	mov	r5, sp
   1df52:	f108 0610 	add.w	r6, r8, #16
   1df56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1df58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1df5a:	e896 0003 	ldmia.w	r6, {r0, r1}
   1df5e:	e885 0003 	stmia.w	r5, {r0, r1}

	/* Limit the frequency to that supported by the SPIM instance. */
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1df62:	6823      	ldr	r3, [r4, #0]
   1df64:	4573      	cmp	r3, lr
   1df66:	bf28      	it	cs
   1df68:	4673      	movcs	r3, lr
	if (frequency < 250000) {
   1df6a:	4a74      	ldr	r2, [pc, #464]	; (1e13c <configure+0x234>)
   1df6c:	4293      	cmp	r3, r2
   1df6e:	d97e      	bls.n	1e06e <configure+0x166>
	} else if (frequency < 500000) {
   1df70:	4a73      	ldr	r2, [pc, #460]	; (1e140 <configure+0x238>)
   1df72:	4293      	cmp	r3, r2
   1df74:	f240 80a3 	bls.w	1e0be <configure+0x1b6>
	} else if (frequency < 1000000) {
   1df78:	4a72      	ldr	r2, [pc, #456]	; (1e144 <configure+0x23c>)
   1df7a:	4293      	cmp	r3, r2
   1df7c:	f240 80a2 	bls.w	1e0c4 <configure+0x1bc>
	} else if (frequency < 2000000) {
   1df80:	4a71      	ldr	r2, [pc, #452]	; (1e148 <configure+0x240>)
   1df82:	4293      	cmp	r3, r2
   1df84:	f240 80a1 	bls.w	1e0ca <configure+0x1c2>
	} else if (frequency < 4000000) {
   1df88:	4a70      	ldr	r2, [pc, #448]	; (1e14c <configure+0x244>)
   1df8a:	4293      	cmp	r3, r2
   1df8c:	f240 80a0 	bls.w	1e0d0 <configure+0x1c8>
	} else if (frequency < 8000000) {
   1df90:	4a6f      	ldr	r2, [pc, #444]	; (1e150 <configure+0x248>)
   1df92:	4293      	cmp	r3, r2
   1df94:	f0c0 809f 	bcc.w	1e0d6 <configure+0x1ce>
	} else if (frequency < 16000000) {
   1df98:	4a6e      	ldr	r2, [pc, #440]	; (1e154 <configure+0x24c>)
   1df9a:	4293      	cmp	r3, r2
   1df9c:	f0c0 809e 	bcc.w	1e0dc <configure+0x1d4>
	} else if (frequency < 32000000) {
   1dfa0:	4a6d      	ldr	r2, [pc, #436]	; (1e158 <configure+0x250>)
   1dfa2:	4293      	cmp	r3, r2
   1dfa4:	f080 809d 	bcs.w	1e0e2 <configure+0x1da>
		return NRF_SPIM_FREQ_16M;
   1dfa8:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
   1dfac:	e061      	b.n	1e072 <configure+0x16a>
   1dfae:	4b6b      	ldr	r3, [pc, #428]	; (1e15c <configure+0x254>)
   1dfb0:	4a6b      	ldr	r2, [pc, #428]	; (1e160 <configure+0x258>)
   1dfb2:	1a9b      	subs	r3, r3, r2
   1dfb4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Half-duplex not supported");
   1dfb6:	f04f 0100 	mov.w	r1, #0
   1dfba:	2201      	movs	r2, #1
   1dfbc:	f362 0102 	bfi	r1, r2, #0, #3
   1dfc0:	f36f 01c5 	bfc	r1, #3, #3
   1dfc4:	f363 118f 	bfi	r1, r3, #6, #10
   1dfc8:	4866      	ldr	r0, [pc, #408]	; (1e164 <configure+0x25c>)
   1dfca:	f7f5 fc69 	bl	138a0 <log_0>
		return -ENOTSUP;
   1dfce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dfd2:	e071      	b.n	1e0b8 <configure+0x1b0>
   1dfd4:	4b61      	ldr	r3, [pc, #388]	; (1e15c <configure+0x254>)
   1dfd6:	4a62      	ldr	r2, [pc, #392]	; (1e160 <configure+0x258>)
   1dfd8:	1a9b      	subs	r3, r3, r2
   1dfda:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1dfdc:	f04f 0200 	mov.w	r2, #0
   1dfe0:	2101      	movs	r1, #1
   1dfe2:	f361 0202 	bfi	r2, r1, #0, #3
   1dfe6:	f36f 02c5 	bfc	r2, #3, #3
   1dfea:	f363 128f 	bfi	r2, r3, #6, #10
   1dfee:	6801      	ldr	r1, [r0, #0]
   1dff0:	485d      	ldr	r0, [pc, #372]	; (1e168 <configure+0x260>)
   1dff2:	f7f5 fc85 	bl	13900 <log_1>
		return -EINVAL;
   1dff6:	f06f 0015 	mvn.w	r0, #21
   1dffa:	e05d      	b.n	1e0b8 <configure+0x1b0>
   1dffc:	4b57      	ldr	r3, [pc, #348]	; (1e15c <configure+0x254>)
   1dffe:	4a58      	ldr	r2, [pc, #352]	; (1e160 <configure+0x258>)
   1e000:	1a9b      	subs	r3, r3, r2
   1e002:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Loopback mode is not supported");
   1e004:	f04f 0100 	mov.w	r1, #0
   1e008:	2201      	movs	r2, #1
   1e00a:	f362 0102 	bfi	r1, r2, #0, #3
   1e00e:	f36f 01c5 	bfc	r1, #3, #3
   1e012:	f363 118f 	bfi	r1, r3, #6, #10
   1e016:	4855      	ldr	r0, [pc, #340]	; (1e16c <configure+0x264>)
   1e018:	f7f5 fc42 	bl	138a0 <log_0>
		return -EINVAL;
   1e01c:	f06f 0015 	mvn.w	r0, #21
   1e020:	e04a      	b.n	1e0b8 <configure+0x1b0>
   1e022:	4b4e      	ldr	r3, [pc, #312]	; (1e15c <configure+0x254>)
   1e024:	4a4e      	ldr	r2, [pc, #312]	; (1e160 <configure+0x258>)
   1e026:	1a9b      	subs	r3, r3, r2
   1e028:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1e02a:	f04f 0100 	mov.w	r1, #0
   1e02e:	2201      	movs	r2, #1
   1e030:	f362 0102 	bfi	r1, r2, #0, #3
   1e034:	f36f 01c5 	bfc	r1, #3, #3
   1e038:	f363 118f 	bfi	r1, r3, #6, #10
   1e03c:	484c      	ldr	r0, [pc, #304]	; (1e170 <configure+0x268>)
   1e03e:	f7f5 fc2f 	bl	138a0 <log_0>
		return -EINVAL;
   1e042:	f06f 0015 	mvn.w	r0, #21
   1e046:	e037      	b.n	1e0b8 <configure+0x1b0>
   1e048:	4b44      	ldr	r3, [pc, #272]	; (1e15c <configure+0x254>)
   1e04a:	4a45      	ldr	r2, [pc, #276]	; (1e160 <configure+0x258>)
   1e04c:	1a9b      	subs	r3, r3, r2
   1e04e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1e050:	f04f 0100 	mov.w	r1, #0
   1e054:	2201      	movs	r2, #1
   1e056:	f362 0102 	bfi	r1, r2, #0, #3
   1e05a:	f36f 01c5 	bfc	r1, #3, #3
   1e05e:	f363 118f 	bfi	r1, r3, #6, #10
   1e062:	4844      	ldr	r0, [pc, #272]	; (1e174 <configure+0x26c>)
   1e064:	f7f5 fc1c 	bl	138a0 <log_0>
		return -EINVAL;
   1e068:	f06f 0015 	mvn.w	r0, #21
   1e06c:	e024      	b.n	1e0b8 <configure+0x1b0>
		return NRF_SPIM_FREQ_125K;
   1e06e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1e072:	9302      	str	r3, [sp, #8]
						      max_freq));
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1e074:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e076:	f013 0f02 	tst.w	r3, #2
   1e07a:	d035      	beq.n	1e0e8 <configure+0x1e0>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1e07c:	f013 0f04 	tst.w	r3, #4
   1e080:	d037      	beq.n	1e0f2 <configure+0x1ea>
			return NRF_SPIM_MODE_3;
   1e082:	2303      	movs	r3, #3
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1e084:	f88d 300c 	strb.w	r3, [sp, #12]
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1e088:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1e08a:	f013 0f10 	tst.w	r3, #16
   1e08e:	d034      	beq.n	1e0fa <configure+0x1f2>
		return NRF_SPIM_BIT_ORDER_LSB_FIRST;
   1e090:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1e092:	f88d 300d 	strb.w	r3, [sp, #13]

	if (dev_data->initialized) {
   1e096:	f1bc 0f00 	cmp.w	ip, #0
   1e09a:	d130      	bne.n	1e0fe <configure+0x1f6>
		nrfx_spim_uninit(&dev_config->spim);
		dev_data->initialized = false;
	}

	result = nrfx_spim_init(&dev_config->spim, &config,
   1e09c:	463b      	mov	r3, r7
   1e09e:	4a36      	ldr	r2, [pc, #216]	; (1e178 <configure+0x270>)
   1e0a0:	4669      	mov	r1, sp
   1e0a2:	4640      	mov	r0, r8
   1e0a4:	f004 fed0 	bl	22e48 <nrfx_spim_init>
				event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   1e0a8:	4b34      	ldr	r3, [pc, #208]	; (1e17c <configure+0x274>)
   1e0aa:	4298      	cmp	r0, r3
   1e0ac:	d12e      	bne.n	1e10c <configure+0x204>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   1e0ae:	2301      	movs	r3, #1
   1e0b0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	ctx->config = spi_cfg;
   1e0b4:	603c      	str	r4, [r7, #0]

	return 0;
   1e0b6:	2000      	movs	r0, #0
}
   1e0b8:	b006      	add	sp, #24
   1e0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NRF_SPIM_FREQ_250K;
   1e0be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e0c2:	e7d6      	b.n	1e072 <configure+0x16a>
		return NRF_SPIM_FREQ_500K;
   1e0c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1e0c8:	e7d3      	b.n	1e072 <configure+0x16a>
		return NRF_SPIM_FREQ_1M;
   1e0ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e0ce:	e7d0      	b.n	1e072 <configure+0x16a>
		return NRF_SPIM_FREQ_2M;
   1e0d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1e0d4:	e7cd      	b.n	1e072 <configure+0x16a>
		return NRF_SPIM_FREQ_4M;
   1e0d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e0da:	e7ca      	b.n	1e072 <configure+0x16a>
		return NRF_SPIM_FREQ_8M;
   1e0dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e0e0:	e7c7      	b.n	1e072 <configure+0x16a>
		return NRF_SPIM_FREQ_32M;
   1e0e2:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
   1e0e6:	e7c4      	b.n	1e072 <configure+0x16a>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1e0e8:	f013 0f04 	tst.w	r3, #4
   1e0ec:	d003      	beq.n	1e0f6 <configure+0x1ee>
			return NRF_SPIM_MODE_1;
   1e0ee:	2301      	movs	r3, #1
   1e0f0:	e7c8      	b.n	1e084 <configure+0x17c>
			return NRF_SPIM_MODE_2;
   1e0f2:	2302      	movs	r3, #2
   1e0f4:	e7c6      	b.n	1e084 <configure+0x17c>
			return NRF_SPIM_MODE_0;
   1e0f6:	2300      	movs	r3, #0
   1e0f8:	e7c4      	b.n	1e084 <configure+0x17c>
		return NRF_SPIM_BIT_ORDER_MSB_FIRST;
   1e0fa:	2300      	movs	r3, #0
   1e0fc:	e7c9      	b.n	1e092 <configure+0x18a>
		nrfx_spim_uninit(&dev_config->spim);
   1e0fe:	4640      	mov	r0, r8
   1e100:	f004 ff36 	bl	22f70 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1e104:	2300      	movs	r3, #0
   1e106:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1e10a:	e7c7      	b.n	1e09c <configure+0x194>
   1e10c:	4b13      	ldr	r3, [pc, #76]	; (1e15c <configure+0x254>)
   1e10e:	4a14      	ldr	r2, [pc, #80]	; (1e160 <configure+0x258>)
   1e110:	1a9b      	subs	r3, r3, r2
   1e112:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1e114:	f04f 0200 	mov.w	r2, #0
   1e118:	2101      	movs	r1, #1
   1e11a:	f361 0202 	bfi	r2, r1, #0, #3
   1e11e:	f36f 02c5 	bfc	r2, #3, #3
   1e122:	f363 128f 	bfi	r2, r3, #6, #10
   1e126:	4601      	mov	r1, r0
   1e128:	4815      	ldr	r0, [pc, #84]	; (1e180 <configure+0x278>)
   1e12a:	f7f5 fbe9 	bl	13900 <log_1>
		return -EIO;
   1e12e:	f06f 0004 	mvn.w	r0, #4
   1e132:	e7c1      	b.n	1e0b8 <configure+0x1b0>
		return 0;
   1e134:	2000      	movs	r0, #0
   1e136:	e7bf      	b.n	1e0b8 <configure+0x1b0>
   1e138:	0001e847 	.word	0x0001e847
   1e13c:	0003d08f 	.word	0x0003d08f
   1e140:	0007a11f 	.word	0x0007a11f
   1e144:	000f423f 	.word	0x000f423f
   1e148:	001e847f 	.word	0x001e847f
   1e14c:	003d08ff 	.word	0x003d08ff
   1e150:	007a1200 	.word	0x007a1200
   1e154:	00f42400 	.word	0x00f42400
   1e158:	01e84800 	.word	0x01e84800
   1e15c:	000319e0 	.word	0x000319e0
   1e160:	00031908 	.word	0x00031908
   1e164:	00034d18 	.word	0x00034d18
   1e168:	00034d34 	.word	0x00034d34
   1e16c:	00034d58 	.word	0x00034d58
   1e170:	00034d78 	.word	0x00034d78
   1e174:	00034da8 	.word	0x00034da8
   1e178:	0001e915 	.word	0x0001e915
   1e17c:	0bad0000 	.word	0x0bad0000
   1e180:	00034ddc 	.word	0x00034ddc

0001e184 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
   1e184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return dev->data;
   1e188:	6904      	ldr	r4, [r0, #16]
   1e18a:	6823      	ldr	r3, [r4, #0]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1e18c:	428b      	cmp	r3, r1
   1e18e:	d163      	bne.n	1e258 <spi_nrfx_release+0xd4>
		return -EINVAL;
	}

	if (dev_data->busy) {
   1e190:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   1e194:	2b00      	cmp	r3, #0
   1e196:	d162      	bne.n	1e25e <spi_nrfx_release+0xda>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1e198:	6823      	ldr	r3, [r4, #0]
   1e19a:	b333      	cbz	r3, 1e1ea <spi_nrfx_release+0x66>
   1e19c:	689b      	ldr	r3, [r3, #8]
   1e19e:	b323      	cbz	r3, 1e1ea <spi_nrfx_release+0x66>
   1e1a0:	681a      	ldr	r2, [r3, #0]
   1e1a2:	b312      	cbz	r2, 1e1ea <spi_nrfx_release+0x66>
			k_busy_wait(ctx->config->cs->delay);
   1e1a4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1e1a6:	f012 fac3 	bl	30730 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1e1aa:	6823      	ldr	r3, [r4, #0]
   1e1ac:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1e1ae:	681d      	ldr	r5, [r3, #0]
   1e1b0:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_config *const cfg =
   1e1b2:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
   1e1b4:	f8d5 8010 	ldr.w	r8, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e1b8:	681b      	ldr	r3, [r3, #0]
   1e1ba:	2601      	movs	r6, #1
   1e1bc:	40be      	lsls	r6, r7
   1e1be:	4233      	tst	r3, r6
   1e1c0:	d018      	beq.n	1e1f4 <spi_nrfx_release+0x70>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1e1c2:	f8d8 3000 	ldr.w	r3, [r8]
   1e1c6:	421e      	tst	r6, r3
   1e1c8:	d126      	bne.n	1e218 <spi_nrfx_release+0x94>
   1e1ca:	f04f 0800 	mov.w	r8, #0
	const struct gpio_driver_config *const cfg =
   1e1ce:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e1d0:	681b      	ldr	r3, [r3, #0]
   1e1d2:	2601      	movs	r6, #1
   1e1d4:	40be      	lsls	r6, r7
   1e1d6:	4233      	tst	r3, r6
   1e1d8:	d021      	beq.n	1e21e <spi_nrfx_release+0x9a>
	if (value != 0)	{
   1e1da:	f1b8 0f00 	cmp.w	r8, #0
   1e1de:	d02f      	beq.n	1e240 <spi_nrfx_release+0xbc>
	const struct gpio_driver_api *api =
   1e1e0:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
   1e1e2:	68db      	ldr	r3, [r3, #12]
   1e1e4:	4631      	mov	r1, r6
   1e1e6:	4628      	mov	r0, r5
   1e1e8:	4798      	blx	r3
   1e1ea:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   1e1ec:	b373      	cbz	r3, 1e24c <spi_nrfx_release+0xc8>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);

	return 0;
   1e1ee:	2000      	movs	r0, #0
}
   1e1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e1f4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1e270 <spi_nrfx_release+0xec>
   1e1f8:	f240 43bb 	movw	r3, #1211	; 0x4bb
   1e1fc:	464a      	mov	r2, r9
   1e1fe:	4919      	ldr	r1, [pc, #100]	; (1e264 <spi_nrfx_release+0xe0>)
   1e200:	4819      	ldr	r0, [pc, #100]	; (1e268 <spi_nrfx_release+0xe4>)
   1e202:	f00d ffa1 	bl	2c148 <printk>
   1e206:	4819      	ldr	r0, [pc, #100]	; (1e26c <spi_nrfx_release+0xe8>)
   1e208:	f00d ff9e 	bl	2c148 <printk>
   1e20c:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1e210:	4648      	mov	r0, r9
   1e212:	f00e f99e 	bl	2c552 <assert_post_action>
   1e216:	e7d4      	b.n	1e1c2 <spi_nrfx_release+0x3e>
		value = (value != 0) ? 0 : 1;
   1e218:	f04f 0801 	mov.w	r8, #1
   1e21c:	e7d7      	b.n	1e1ce <spi_nrfx_release+0x4a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e21e:	4f14      	ldr	r7, [pc, #80]	; (1e270 <spi_nrfx_release+0xec>)
   1e220:	f240 4391 	movw	r3, #1169	; 0x491
   1e224:	463a      	mov	r2, r7
   1e226:	490f      	ldr	r1, [pc, #60]	; (1e264 <spi_nrfx_release+0xe0>)
   1e228:	480f      	ldr	r0, [pc, #60]	; (1e268 <spi_nrfx_release+0xe4>)
   1e22a:	f00d ff8d 	bl	2c148 <printk>
   1e22e:	480f      	ldr	r0, [pc, #60]	; (1e26c <spi_nrfx_release+0xe8>)
   1e230:	f00d ff8a 	bl	2c148 <printk>
   1e234:	f240 4191 	movw	r1, #1169	; 0x491
   1e238:	4638      	mov	r0, r7
   1e23a:	f00e f98a 	bl	2c552 <assert_post_action>
   1e23e:	e7cc      	b.n	1e1da <spi_nrfx_release+0x56>
	const struct gpio_driver_api *api =
   1e240:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
   1e242:	691b      	ldr	r3, [r3, #16]
   1e244:	4631      	mov	r1, r6
   1e246:	4628      	mov	r0, r5
   1e248:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1e24a:	e7ce      	b.n	1e1ea <spi_nrfx_release+0x66>
		ctx->owner = NULL;
   1e24c:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1e24e:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1e252:	f006 fa3d 	bl	246d0 <z_impl_k_sem_give>
}
   1e256:	e7ca      	b.n	1e1ee <spi_nrfx_release+0x6a>
		return -EINVAL;
   1e258:	f06f 0015 	mvn.w	r0, #21
   1e25c:	e7c8      	b.n	1e1f0 <spi_nrfx_release+0x6c>
		return -EBUSY;
   1e25e:	f06f 000f 	mvn.w	r0, #15
   1e262:	e7c5      	b.n	1e1f0 <spi_nrfx_release+0x6c>
   1e264:	00031db4 	.word	0x00031db4
   1e268:	00031df4 	.word	0x00031df4
   1e26c:	00031e14 	.word	0x00031e14
   1e270:	00031d88 	.word	0x00031d88

0001e274 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   1e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e278:	b085      	sub	sp, #20
   1e27a:	4604      	mov	r4, r0
   1e27c:	9003      	str	r0, [sp, #12]
   1e27e:	2200      	movs	r2, #0
   1e280:	2101      	movs	r1, #1
   1e282:	202f      	movs	r0, #47	; 0x2f
   1e284:	f7f6 ff70 	bl	15168 <z_arm_irq_priority_set>
	return dev->data;
   1e288:	f8d4 8010 	ldr.w	r8, [r4, #16]
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1e28c:	f8d8 a008 	ldr.w	sl, [r8, #8]
   1e290:	e06c      	b.n	1e36c <spi_3_init+0xf8>
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1e292:	4d9c      	ldr	r5, [pc, #624]	; (1e504 <spi_3_init+0x290>)
   1e294:	f240 23de 	movw	r3, #734	; 0x2de
   1e298:	462a      	mov	r2, r5
   1e29a:	499b      	ldr	r1, [pc, #620]	; (1e508 <spi_3_init+0x294>)
   1e29c:	489b      	ldr	r0, [pc, #620]	; (1e50c <spi_3_init+0x298>)
   1e29e:	f00d ff53 	bl	2c148 <printk>
   1e2a2:	489b      	ldr	r0, [pc, #620]	; (1e510 <spi_3_init+0x29c>)
   1e2a4:	f00d ff50 	bl	2c148 <printk>
   1e2a8:	f240 21de 	movw	r1, #734	; 0x2de
   1e2ac:	4628      	mov	r0, r5
   1e2ae:	f00e f950 	bl	2c552 <assert_post_action>
   1e2b2:	e07a      	b.n	1e3aa <spi_3_init+0x136>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1e2b4:	4d93      	ldr	r5, [pc, #588]	; (1e504 <spi_3_init+0x290>)
   1e2b6:	f240 23e1 	movw	r3, #737	; 0x2e1
   1e2ba:	462a      	mov	r2, r5
   1e2bc:	4995      	ldr	r1, [pc, #596]	; (1e514 <spi_3_init+0x2a0>)
   1e2be:	4893      	ldr	r0, [pc, #588]	; (1e50c <spi_3_init+0x298>)
   1e2c0:	f00d ff42 	bl	2c148 <printk>
   1e2c4:	4894      	ldr	r0, [pc, #592]	; (1e518 <spi_3_init+0x2a4>)
   1e2c6:	f00d ff3f 	bl	2c148 <printk>
   1e2ca:	f240 21e1 	movw	r1, #737	; 0x2e1
   1e2ce:	4628      	mov	r0, r5
   1e2d0:	f00e f93f 	bl	2c552 <assert_post_action>
   1e2d4:	e06d      	b.n	1e3b2 <spi_3_init+0x13e>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   1e2d6:	4d8b      	ldr	r5, [pc, #556]	; (1e504 <spi_3_init+0x290>)
   1e2d8:	f240 23e5 	movw	r3, #741	; 0x2e5
   1e2dc:	462a      	mov	r2, r5
   1e2de:	498f      	ldr	r1, [pc, #572]	; (1e51c <spi_3_init+0x2a8>)
   1e2e0:	488a      	ldr	r0, [pc, #552]	; (1e50c <spi_3_init+0x298>)
   1e2e2:	f00d ff31 	bl	2c148 <printk>
   1e2e6:	488e      	ldr	r0, [pc, #568]	; (1e520 <spi_3_init+0x2ac>)
   1e2e8:	f00d ff2e 	bl	2c148 <printk>
   1e2ec:	f240 21e5 	movw	r1, #741	; 0x2e5
   1e2f0:	4628      	mov	r0, r5
   1e2f2:	f00e f92e 	bl	2c552 <assert_post_action>
   1e2f6:	e061      	b.n	1e3bc <spi_3_init+0x148>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1e2f8:	4d82      	ldr	r5, [pc, #520]	; (1e504 <spi_3_init+0x290>)
   1e2fa:	f240 23e9 	movw	r3, #745	; 0x2e9
   1e2fe:	462a      	mov	r2, r5
   1e300:	4988      	ldr	r1, [pc, #544]	; (1e524 <spi_3_init+0x2b0>)
   1e302:	4882      	ldr	r0, [pc, #520]	; (1e50c <spi_3_init+0x298>)
   1e304:	f00d ff20 	bl	2c148 <printk>
   1e308:	f240 21e9 	movw	r1, #745	; 0x2e9
   1e30c:	4628      	mov	r0, r5
   1e30e:	f00e f920 	bl	2c552 <assert_post_action>
   1e312:	e057      	b.n	1e3c4 <spi_3_init+0x150>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1e314:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 1e504 <spi_3_init+0x290>
   1e318:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   1e31c:	464a      	mov	r2, r9
   1e31e:	4982      	ldr	r1, [pc, #520]	; (1e528 <spi_3_init+0x2b4>)
   1e320:	487a      	ldr	r0, [pc, #488]	; (1e50c <spi_3_init+0x298>)
   1e322:	f00d ff11 	bl	2c148 <printk>
   1e326:	4881      	ldr	r0, [pc, #516]	; (1e52c <spi_3_init+0x2b8>)
   1e328:	f00d ff0e 	bl	2c148 <printk>
   1e32c:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1e330:	4648      	mov	r0, r9
   1e332:	f00e f90e 	bl	2c552 <assert_post_action>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1e336:	e04a      	b.n	1e3ce <spi_3_init+0x15a>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1e338:	f424 5380 	bic.w	r3, r4, #4096	; 0x1000
   1e33c:	9302      	str	r3, [sp, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e33e:	9b01      	ldr	r3, [sp, #4]
   1e340:	681b      	ldr	r3, [r3, #0]
   1e342:	2501      	movs	r5, #1
   1e344:	fa05 f50b 	lsl.w	r5, r5, fp
   1e348:	422b      	tst	r3, r5
   1e34a:	d048      	beq.n	1e3de <spi_3_init+0x16a>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1e34c:	f014 0f01 	tst.w	r4, #1
   1e350:	d057      	beq.n	1e402 <spi_3_init+0x18e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e352:	683b      	ldr	r3, [r7, #0]
   1e354:	431d      	orrs	r5, r3
   1e356:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
   1e358:	9b00      	ldr	r3, [sp, #0]
   1e35a:	681b      	ldr	r3, [r3, #0]
   1e35c:	9a02      	ldr	r2, [sp, #8]
   1e35e:	4659      	mov	r1, fp
   1e360:	4630      	mov	r0, r6
   1e362:	4798      	blx	r3
		if (ret < 0) {
   1e364:	2800      	cmp	r0, #0
   1e366:	db6a      	blt.n	1e43e <spi_3_init+0x1ca>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1e368:	f10a 0a08 	add.w	sl, sl, #8
   1e36c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e370:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1e374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e378:	459a      	cmp	sl, r3
   1e37a:	d25f      	bcs.n	1e43c <spi_3_init+0x1c8>
		if (!device_is_ready(cs_gpio->port)) {
   1e37c:	f8da 0000 	ldr.w	r0, [sl]
   1e380:	f012 f856 	bl	30430 <z_device_ready>
   1e384:	2800      	cmp	r0, #0
   1e386:	d041      	beq.n	1e40c <spi_3_init+0x198>
	return gpio_pin_configure(spec->port,
   1e388:	f8da 6000 	ldr.w	r6, [sl]
   1e38c:	f89a b004 	ldrb.w	fp, [sl, #4]
				  spec->dt_flags | extra_flags);
   1e390:	f89a 4005 	ldrb.w	r4, [sl, #5]
	return gpio_pin_configure(spec->port,
   1e394:	f444 54b0 	orr.w	r4, r4, #5632	; 0x1600
	const struct gpio_driver_api *api =
   1e398:	68b3      	ldr	r3, [r6, #8]
   1e39a:	9300      	str	r3, [sp, #0]
	const struct gpio_driver_config *const cfg =
   1e39c:	6873      	ldr	r3, [r6, #4]
   1e39e:	9301      	str	r3, [sp, #4]
	struct gpio_driver_data *data =
   1e3a0:	6937      	ldr	r7, [r6, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1e3a2:	f414 2ffc 	tst.w	r4, #516096	; 0x7e000
   1e3a6:	f47f af74 	bne.w	1e292 <spi_3_init+0x1e>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1e3aa:	f004 0330 	and.w	r3, r4, #48	; 0x30
   1e3ae:	2b30      	cmp	r3, #48	; 0x30
   1e3b0:	d080      	beq.n	1e2b4 <spi_3_init+0x40>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   1e3b2:	f240 2302 	movw	r3, #514	; 0x202
   1e3b6:	4023      	ands	r3, r4
   1e3b8:	2b02      	cmp	r3, #2
   1e3ba:	d08c      	beq.n	1e2d6 <spi_3_init+0x62>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1e3bc:	f004 0306 	and.w	r3, r4, #6
   1e3c0:	2b04      	cmp	r3, #4
   1e3c2:	d099      	beq.n	1e2f8 <spi_3_init+0x84>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1e3c4:	f414 6540 	ands.w	r5, r4, #3072	; 0xc00
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1e3c8:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
   1e3cc:	d0a2      	beq.n	1e314 <spi_3_init+0xa0>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1e3ce:	2d00      	cmp	r5, #0
   1e3d0:	d0b2      	beq.n	1e338 <spi_3_init+0xc4>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1e3d2:	f014 0f01 	tst.w	r4, #1
   1e3d6:	d0af      	beq.n	1e338 <spi_3_init+0xc4>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1e3d8:	f484 6440 	eor.w	r4, r4, #3072	; 0xc00
   1e3dc:	e7ac      	b.n	1e338 <spi_3_init+0xc4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e3de:	f8df 9124 	ldr.w	r9, [pc, #292]	; 1e504 <spi_3_init+0x290>
   1e3e2:	f240 23fd 	movw	r3, #765	; 0x2fd
   1e3e6:	464a      	mov	r2, r9
   1e3e8:	4951      	ldr	r1, [pc, #324]	; (1e530 <spi_3_init+0x2bc>)
   1e3ea:	4848      	ldr	r0, [pc, #288]	; (1e50c <spi_3_init+0x298>)
   1e3ec:	f00d feac 	bl	2c148 <printk>
   1e3f0:	4850      	ldr	r0, [pc, #320]	; (1e534 <spi_3_init+0x2c0>)
   1e3f2:	f00d fea9 	bl	2c148 <printk>
   1e3f6:	f240 21fd 	movw	r1, #765	; 0x2fd
   1e3fa:	4648      	mov	r0, r9
   1e3fc:	f00e f8a9 	bl	2c552 <assert_post_action>
   1e400:	e7a4      	b.n	1e34c <spi_3_init+0xd8>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e402:	683b      	ldr	r3, [r7, #0]
   1e404:	ea23 0505 	bic.w	r5, r3, r5
   1e408:	603d      	str	r5, [r7, #0]
   1e40a:	e7a5      	b.n	1e358 <spi_3_init+0xe4>
   1e40c:	4a4a      	ldr	r2, [pc, #296]	; (1e538 <spi_3_init+0x2c4>)
   1e40e:	4b4b      	ldr	r3, [pc, #300]	; (1e53c <spi_3_init+0x2c8>)
   1e410:	1ad2      	subs	r2, r2, r3
   1e412:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1e414:	f04f 0300 	mov.w	r3, #0
   1e418:	2101      	movs	r1, #1
   1e41a:	f361 0302 	bfi	r3, r1, #0, #3
   1e41e:	f36f 03c5 	bfc	r3, #3, #3
   1e422:	f362 138f 	bfi	r3, r2, #6, #10
   1e426:	f8da 1000 	ldr.w	r1, [sl]
   1e42a:	f89a 2004 	ldrb.w	r2, [sl, #4]
   1e42e:	6809      	ldr	r1, [r1, #0]
   1e430:	4843      	ldr	r0, [pc, #268]	; (1e540 <spi_3_init+0x2cc>)
   1e432:	f7f5 fa9b 	bl	1396c <log_2>
			return -ENODEV;
   1e436:	f06f 0012 	mvn.w	r0, #18
   1e43a:	e000      	b.n	1e43e <spi_3_init+0x1ca>
	return 0;
   1e43c:	2000      	movs	r0, #0
SPI_NRFX_SPIM_DEVICE(3);
   1e43e:	2800      	cmp	r0, #0
   1e440:	db2b      	blt.n	1e49a <spi_3_init+0x226>
	return dev->data;
   1e442:	9b03      	ldr	r3, [sp, #12]
   1e444:	691c      	ldr	r4, [r3, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1e446:	6823      	ldr	r3, [r4, #0]
   1e448:	b323      	cbz	r3, 1e494 <spi_3_init+0x220>
   1e44a:	689b      	ldr	r3, [r3, #8]
   1e44c:	b313      	cbz	r3, 1e494 <spi_3_init+0x220>
   1e44e:	681a      	ldr	r2, [r3, #0]
   1e450:	b302      	cbz	r2, 1e494 <spi_3_init+0x220>
			k_busy_wait(ctx->config->cs->delay);
   1e452:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1e454:	f012 f96c 	bl	30730 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1e458:	6823      	ldr	r3, [r4, #0]
   1e45a:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1e45c:	681d      	ldr	r5, [r3, #0]
   1e45e:	f893 8004 	ldrb.w	r8, [r3, #4]
	const struct gpio_driver_config *const cfg =
   1e462:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
   1e464:	692e      	ldr	r6, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e466:	681b      	ldr	r3, [r3, #0]
   1e468:	2701      	movs	r7, #1
   1e46a:	fa07 f708 	lsl.w	r7, r7, r8
   1e46e:	423b      	tst	r3, r7
   1e470:	d016      	beq.n	1e4a0 <spi_3_init+0x22c>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1e472:	6833      	ldr	r3, [r6, #0]
   1e474:	421f      	tst	r7, r3
   1e476:	d125      	bne.n	1e4c4 <spi_3_init+0x250>
   1e478:	2700      	movs	r7, #0
	const struct gpio_driver_config *const cfg =
   1e47a:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e47c:	681b      	ldr	r3, [r3, #0]
   1e47e:	2601      	movs	r6, #1
   1e480:	fa06 f608 	lsl.w	r6, r6, r8
   1e484:	4233      	tst	r3, r6
   1e486:	d01f      	beq.n	1e4c8 <spi_3_init+0x254>
	if (value != 0)	{
   1e488:	b387      	cbz	r7, 1e4ec <spi_3_init+0x278>
	const struct gpio_driver_api *api =
   1e48a:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
   1e48c:	68db      	ldr	r3, [r3, #12]
   1e48e:	4631      	mov	r1, r6
   1e490:	4628      	mov	r0, r5
   1e492:	4798      	blx	r3
   1e494:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   1e496:	b37b      	cbz	r3, 1e4f8 <spi_3_init+0x284>
SPI_NRFX_SPIM_DEVICE(3);
   1e498:	2000      	movs	r0, #0
   1e49a:	b005      	add	sp, #20
   1e49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e4a0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1e504 <spi_3_init+0x290>
   1e4a4:	f240 43bb 	movw	r3, #1211	; 0x4bb
   1e4a8:	464a      	mov	r2, r9
   1e4aa:	4921      	ldr	r1, [pc, #132]	; (1e530 <spi_3_init+0x2bc>)
   1e4ac:	4817      	ldr	r0, [pc, #92]	; (1e50c <spi_3_init+0x298>)
   1e4ae:	f00d fe4b 	bl	2c148 <printk>
   1e4b2:	4820      	ldr	r0, [pc, #128]	; (1e534 <spi_3_init+0x2c0>)
   1e4b4:	f00d fe48 	bl	2c148 <printk>
   1e4b8:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1e4bc:	4648      	mov	r0, r9
   1e4be:	f00e f848 	bl	2c552 <assert_post_action>
   1e4c2:	e7d6      	b.n	1e472 <spi_3_init+0x1fe>
		value = (value != 0) ? 0 : 1;
   1e4c4:	2701      	movs	r7, #1
   1e4c6:	e7d8      	b.n	1e47a <spi_3_init+0x206>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e4c8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1e504 <spi_3_init+0x290>
   1e4cc:	f240 4391 	movw	r3, #1169	; 0x491
   1e4d0:	4642      	mov	r2, r8
   1e4d2:	4917      	ldr	r1, [pc, #92]	; (1e530 <spi_3_init+0x2bc>)
   1e4d4:	480d      	ldr	r0, [pc, #52]	; (1e50c <spi_3_init+0x298>)
   1e4d6:	f00d fe37 	bl	2c148 <printk>
   1e4da:	4816      	ldr	r0, [pc, #88]	; (1e534 <spi_3_init+0x2c0>)
   1e4dc:	f00d fe34 	bl	2c148 <printk>
   1e4e0:	f240 4191 	movw	r1, #1169	; 0x491
   1e4e4:	4640      	mov	r0, r8
   1e4e6:	f00e f834 	bl	2c552 <assert_post_action>
   1e4ea:	e7cd      	b.n	1e488 <spi_3_init+0x214>
	const struct gpio_driver_api *api =
   1e4ec:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
   1e4ee:	691b      	ldr	r3, [r3, #16]
   1e4f0:	4631      	mov	r1, r6
   1e4f2:	4628      	mov	r0, r5
   1e4f4:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1e4f6:	e7cd      	b.n	1e494 <spi_3_init+0x220>
		ctx->owner = NULL;
   1e4f8:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1e4fa:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1e4fe:	f006 f8e7 	bl	246d0 <z_impl_k_sem_give>
}
   1e502:	e7c9      	b.n	1e498 <spi_3_init+0x224>
   1e504:	00031d88 	.word	0x00031d88
   1e508:	00034e04 	.word	0x00034e04
   1e50c:	00031df4 	.word	0x00031df4
   1e510:	00034e64 	.word	0x00034e64
   1e514:	00034e88 	.word	0x00034e88
   1e518:	00034ec4 	.word	0x00034ec4
   1e51c:	00034f04 	.word	0x00034f04
   1e520:	00034f38 	.word	0x00034f38
   1e524:	00034f8c 	.word	0x00034f8c
   1e528:	00035044 	.word	0x00035044
   1e52c:	00035088 	.word	0x00035088
   1e530:	00031db4 	.word	0x00031db4
   1e534:	00031e14 	.word	0x00031e14
   1e538:	000319e0 	.word	0x000319e0
   1e53c:	00031908 	.word	0x00031908
   1e540:	000350b4 	.word	0x000350b4

0001e544 <transfer_next_chunk>:
{
   1e544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e548:	b084      	sub	sp, #16
	return dev->data;
   1e54a:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   1e54c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!ctx->tx_len) {
   1e550:	6da7      	ldr	r7, [r4, #88]	; 0x58
   1e552:	b1e7      	cbz	r7, 1e58e <transfer_next_chunk+0x4a>
	} else if (!ctx->rx_len) {
   1e554:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e556:	b1e5      	cbz	r5, 1e592 <transfer_next_chunk+0x4e>
	return MIN(ctx->tx_len, ctx->rx_len);
   1e558:	42bd      	cmp	r5, r7
   1e55a:	bf28      	it	cs
   1e55c:	463d      	movcs	r5, r7
	if (chunk_len > 0) {
   1e55e:	2d00      	cmp	r5, #0
   1e560:	f000 808c 	beq.w	1e67c <transfer_next_chunk+0x138>
		const uint8_t *tx_buf = ctx->tx_buf;
   1e564:	6d66      	ldr	r6, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1e566:	b1b6      	cbz	r6, 1e596 <transfer_next_chunk+0x52>
   1e568:	b9bf      	cbnz	r7, 1e59a <transfer_next_chunk+0x56>
   1e56a:	2300      	movs	r3, #0
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1e56c:	b1bb      	cbz	r3, 1e59e <transfer_next_chunk+0x5a>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1e56e:	f006 4360 	and.w	r3, r6, #3758096384	; 0xe0000000
   1e572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1e576:	d075      	beq.n	1e664 <transfer_next_chunk+0x120>
			if (chunk_len > sizeof(dev_data->buffer)) {
   1e578:	2d08      	cmp	r5, #8
   1e57a:	d900      	bls.n	1e57e <transfer_next_chunk+0x3a>
				chunk_len = sizeof(dev_data->buffer);
   1e57c:	2508      	movs	r5, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   1e57e:	f104 096e 	add.w	r9, r4, #110	; 0x6e
   1e582:	462a      	mov	r2, r5
   1e584:	4631      	mov	r1, r6
   1e586:	4648      	mov	r0, r9
   1e588:	f012 f992 	bl	308b0 <memcpy>
   1e58c:	e008      	b.n	1e5a0 <transfer_next_chunk+0x5c>
		return ctx->rx_len;
   1e58e:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e590:	e7e5      	b.n	1e55e <transfer_next_chunk+0x1a>
		return ctx->tx_len;
   1e592:	463d      	mov	r5, r7
   1e594:	e7e3      	b.n	1e55e <transfer_next_chunk+0x1a>
	return !!(ctx->tx_buf && ctx->tx_len);
   1e596:	2300      	movs	r3, #0
   1e598:	e7e8      	b.n	1e56c <transfer_next_chunk+0x28>
   1e59a:	2301      	movs	r3, #1
   1e59c:	e7e6      	b.n	1e56c <transfer_next_chunk+0x28>
		const uint8_t *tx_buf = ctx->tx_buf;
   1e59e:	46b1      	mov	r9, r6
		if (chunk_len > dev_config->max_chunk_len) {
   1e5a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e5a4:	42ab      	cmp	r3, r5
   1e5a6:	d300      	bcc.n	1e5aa <transfer_next_chunk+0x66>
   1e5a8:	462b      	mov	r3, r5
		dev_data->chunk_len = chunk_len;
   1e5aa:	66a3      	str	r3, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1e5ac:	f8cd 9000 	str.w	r9, [sp]
   1e5b0:	2e00      	cmp	r6, #0
   1e5b2:	d059      	beq.n	1e668 <transfer_next_chunk+0x124>
   1e5b4:	2f00      	cmp	r7, #0
   1e5b6:	d159      	bne.n	1e66c <transfer_next_chunk+0x128>
   1e5b8:	2200      	movs	r2, #0
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1e5ba:	2a00      	cmp	r2, #0
   1e5bc:	d058      	beq.n	1e670 <transfer_next_chunk+0x12c>
   1e5be:	461a      	mov	r2, r3
   1e5c0:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1e5c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1e5c4:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1e5c6:	2a00      	cmp	r2, #0
   1e5c8:	d054      	beq.n	1e674 <transfer_next_chunk+0x130>
   1e5ca:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1e5cc:	2a00      	cmp	r2, #0
   1e5ce:	d153      	bne.n	1e678 <transfer_next_chunk+0x134>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1e5d0:	b902      	cbnz	r2, 1e5d4 <transfer_next_chunk+0x90>
   1e5d2:	2300      	movs	r3, #0
   1e5d4:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1e5d6:	2200      	movs	r2, #0
   1e5d8:	4669      	mov	r1, sp
   1e5da:	4640      	mov	r0, r8
   1e5dc:	f004 fd78 	bl	230d0 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1e5e0:	4b3e      	ldr	r3, [pc, #248]	; (1e6dc <transfer_next_chunk+0x198>)
   1e5e2:	4298      	cmp	r0, r3
   1e5e4:	d03b      	beq.n	1e65e <transfer_next_chunk+0x11a>
			error = -EIO;
   1e5e6:	f06f 0504 	mvn.w	r5, #4
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1e5ea:	6823      	ldr	r3, [r4, #0]
   1e5ec:	2b00      	cmp	r3, #0
   1e5ee:	d02e      	beq.n	1e64e <transfer_next_chunk+0x10a>
   1e5f0:	689a      	ldr	r2, [r3, #8]
   1e5f2:	b362      	cbz	r2, 1e64e <transfer_next_chunk+0x10a>
   1e5f4:	6811      	ldr	r1, [r2, #0]
   1e5f6:	b351      	cbz	r1, 1e64e <transfer_next_chunk+0x10a>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   1e5f8:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   1e5fa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1e5fe:	d126      	bne.n	1e64e <transfer_next_chunk+0x10a>
			k_busy_wait(ctx->config->cs->delay);
   1e600:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1e602:	f012 f895 	bl	30730 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1e606:	6823      	ldr	r3, [r4, #0]
   1e608:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1e60a:	681e      	ldr	r6, [r3, #0]
   1e60c:	f893 9004 	ldrb.w	r9, [r3, #4]
	const struct gpio_driver_config *const cfg =
   1e610:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
   1e612:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e614:	681b      	ldr	r3, [r3, #0]
   1e616:	f04f 0801 	mov.w	r8, #1
   1e61a:	fa08 f809 	lsl.w	r8, r8, r9
   1e61e:	ea13 0f08 	tst.w	r3, r8
   1e622:	d02d      	beq.n	1e680 <transfer_next_chunk+0x13c>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1e624:	683b      	ldr	r3, [r7, #0]
   1e626:	ea18 0f03 	tst.w	r8, r3
   1e62a:	d13b      	bne.n	1e6a4 <transfer_next_chunk+0x160>
   1e62c:	f04f 0800 	mov.w	r8, #0
	const struct gpio_driver_config *const cfg =
   1e630:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e632:	681b      	ldr	r3, [r3, #0]
   1e634:	2701      	movs	r7, #1
   1e636:	fa07 f709 	lsl.w	r7, r7, r9
   1e63a:	423b      	tst	r3, r7
   1e63c:	d035      	beq.n	1e6aa <transfer_next_chunk+0x166>
	if (value != 0)	{
   1e63e:	f1b8 0f00 	cmp.w	r8, #0
   1e642:	d044      	beq.n	1e6ce <transfer_next_chunk+0x18a>
	const struct gpio_driver_api *api =
   1e644:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
   1e646:	68db      	ldr	r3, [r3, #12]
   1e648:	4639      	mov	r1, r7
   1e64a:	4630      	mov	r0, r6
   1e64c:	4798      	blx	r3
	ctx->sync_status = status;
   1e64e:	6425      	str	r5, [r4, #64]	; 0x40
	k_sem_give(&ctx->sync);
   1e650:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   1e654:	f006 f83c 	bl	246d0 <z_impl_k_sem_give>
	dev_data->busy = false;
   1e658:	2300      	movs	r3, #0
   1e65a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1e65e:	b004      	add	sp, #16
   1e660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1e664:	46b1      	mov	r9, r6
   1e666:	e79b      	b.n	1e5a0 <transfer_next_chunk+0x5c>
	return !!(ctx->tx_buf && ctx->tx_len);
   1e668:	2200      	movs	r2, #0
   1e66a:	e7a6      	b.n	1e5ba <transfer_next_chunk+0x76>
   1e66c:	2201      	movs	r2, #1
   1e66e:	e7a4      	b.n	1e5ba <transfer_next_chunk+0x76>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1e670:	2200      	movs	r2, #0
   1e672:	e7a5      	b.n	1e5c0 <transfer_next_chunk+0x7c>
	return !!(ctx->rx_buf && ctx->rx_len);
   1e674:	2200      	movs	r2, #0
   1e676:	e7ab      	b.n	1e5d0 <transfer_next_chunk+0x8c>
   1e678:	2201      	movs	r2, #1
   1e67a:	e7a9      	b.n	1e5d0 <transfer_next_chunk+0x8c>
	int error = 0;
   1e67c:	2500      	movs	r5, #0
   1e67e:	e7b4      	b.n	1e5ea <transfer_next_chunk+0xa6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e680:	f8df a068 	ldr.w	sl, [pc, #104]	; 1e6ec <transfer_next_chunk+0x1a8>
   1e684:	f240 43bb 	movw	r3, #1211	; 0x4bb
   1e688:	4652      	mov	r2, sl
   1e68a:	4915      	ldr	r1, [pc, #84]	; (1e6e0 <transfer_next_chunk+0x19c>)
   1e68c:	4815      	ldr	r0, [pc, #84]	; (1e6e4 <transfer_next_chunk+0x1a0>)
   1e68e:	f00d fd5b 	bl	2c148 <printk>
   1e692:	4815      	ldr	r0, [pc, #84]	; (1e6e8 <transfer_next_chunk+0x1a4>)
   1e694:	f00d fd58 	bl	2c148 <printk>
   1e698:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1e69c:	4650      	mov	r0, sl
   1e69e:	f00d ff58 	bl	2c552 <assert_post_action>
   1e6a2:	e7bf      	b.n	1e624 <transfer_next_chunk+0xe0>
		value = (value != 0) ? 0 : 1;
   1e6a4:	f04f 0801 	mov.w	r8, #1
   1e6a8:	e7c2      	b.n	1e630 <transfer_next_chunk+0xec>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e6aa:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1e6ec <transfer_next_chunk+0x1a8>
   1e6ae:	f240 4391 	movw	r3, #1169	; 0x491
   1e6b2:	464a      	mov	r2, r9
   1e6b4:	490a      	ldr	r1, [pc, #40]	; (1e6e0 <transfer_next_chunk+0x19c>)
   1e6b6:	480b      	ldr	r0, [pc, #44]	; (1e6e4 <transfer_next_chunk+0x1a0>)
   1e6b8:	f00d fd46 	bl	2c148 <printk>
   1e6bc:	480a      	ldr	r0, [pc, #40]	; (1e6e8 <transfer_next_chunk+0x1a4>)
   1e6be:	f00d fd43 	bl	2c148 <printk>
   1e6c2:	f240 4191 	movw	r1, #1169	; 0x491
   1e6c6:	4648      	mov	r0, r9
   1e6c8:	f00d ff43 	bl	2c552 <assert_post_action>
   1e6cc:	e7b7      	b.n	1e63e <transfer_next_chunk+0xfa>
	const struct gpio_driver_api *api =
   1e6ce:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
   1e6d0:	691b      	ldr	r3, [r3, #16]
   1e6d2:	4639      	mov	r1, r7
   1e6d4:	4630      	mov	r0, r6
   1e6d6:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1e6d8:	e7b9      	b.n	1e64e <transfer_next_chunk+0x10a>
   1e6da:	bf00      	nop
   1e6dc:	0bad0000 	.word	0x0bad0000
   1e6e0:	00031db4 	.word	0x00031db4
   1e6e4:	00031df4 	.word	0x00031df4
   1e6e8:	00031e14 	.word	0x00031e14
   1e6ec:	00031d88 	.word	0x00031d88

0001e6f0 <transceive>:
{
   1e6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6f4:	4607      	mov	r7, r0
   1e6f6:	460e      	mov	r6, r1
   1e6f8:	4691      	mov	r9, r2
   1e6fa:	4698      	mov	r8, r3
	return dev->data;
   1e6fc:	6904      	ldr	r4, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, signal, spi_cfg);
   1e6fe:	4625      	mov	r5, r4
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1e700:	888b      	ldrh	r3, [r1, #4]
   1e702:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1e706:	d004      	beq.n	1e712 <transceive+0x22>
   1e708:	69a3      	ldr	r3, [r4, #24]
   1e70a:	b913      	cbnz	r3, 1e712 <transceive+0x22>
		(ctx->owner == spi_cfg)) {
   1e70c:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   1e70e:	4299      	cmp	r1, r3
   1e710:	d008      	beq.n	1e724 <transceive+0x34>
	k_sem_take(&ctx->lock, K_FOREVER);
   1e712:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   1e716:	f04f 32ff 	mov.w	r2, #4294967295
   1e71a:	f04f 33ff 	mov.w	r3, #4294967295
   1e71e:	f006 f81f 	bl	24760 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1e722:	6066      	str	r6, [r4, #4]
	error = configure(dev, spi_cfg);
   1e724:	4631      	mov	r1, r6
   1e726:	4638      	mov	r0, r7
   1e728:	f7ff fbee 	bl	1df08 <configure>
	if (error == 0) {
   1e72c:	4606      	mov	r6, r0
   1e72e:	b140      	cbz	r0, 1e742 <transceive+0x52>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1e730:	6823      	ldr	r3, [r4, #0]
   1e732:	889b      	ldrh	r3, [r3, #4]
   1e734:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1e738:	f000 80d7 	beq.w	1e8ea <transceive+0x1fa>
}
   1e73c:	4630      	mov	r0, r6
   1e73e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dev_data->busy = true;
   1e742:	2301      	movs	r3, #1
   1e744:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e748:	f1b9 0f00 	cmp.w	r9, #0
   1e74c:	d010      	beq.n	1e770 <transceive+0x80>
   1e74e:	f8d9 3000 	ldr.w	r3, [r9]
   1e752:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e754:	b173      	cbz	r3, 1e774 <transceive+0x84>
   1e756:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e75a:	64a3      	str	r3, [r4, #72]	; 0x48
	while (*count) {
   1e75c:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1e75e:	b173      	cbz	r3, 1e77e <transceive+0x8e>
		if (((*current)->len / dfs) != 0) {
   1e760:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   1e762:	6851      	ldr	r1, [r2, #4]
   1e764:	b941      	cbnz	r1, 1e778 <transceive+0x88>
		++(*current);
   1e766:	3208      	adds	r2, #8
   1e768:	646a      	str	r2, [r5, #68]	; 0x44
		--(*count);
   1e76a:	3b01      	subs	r3, #1
   1e76c:	64ab      	str	r3, [r5, #72]	; 0x48
   1e76e:	e7f5      	b.n	1e75c <transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e770:	464b      	mov	r3, r9
   1e772:	e7ee      	b.n	1e752 <transceive+0x62>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e774:	2300      	movs	r3, #0
   1e776:	e7f0      	b.n	1e75a <transceive+0x6a>
			*buf_len = (*current)->len / dfs;
   1e778:	65a1      	str	r1, [r4, #88]	; 0x58
			return (*current)->buf;
   1e77a:	6813      	ldr	r3, [r2, #0]
   1e77c:	e000      	b.n	1e780 <transceive+0x90>
	*buf_len = 0;
   1e77e:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
   1e780:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e782:	f1b8 0f00 	cmp.w	r8, #0
   1e786:	d010      	beq.n	1e7aa <transceive+0xba>
   1e788:	f8d8 3000 	ldr.w	r3, [r8]
   1e78c:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e78e:	b173      	cbz	r3, 1e7ae <transceive+0xbe>
   1e790:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e794:	6523      	str	r3, [r4, #80]	; 0x50
	while (*count) {
   1e796:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1e798:	b172      	cbz	r2, 1e7b8 <transceive+0xc8>
		if (((*current)->len / dfs) != 0) {
   1e79a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1e79c:	6859      	ldr	r1, [r3, #4]
   1e79e:	b941      	cbnz	r1, 1e7b2 <transceive+0xc2>
		++(*current);
   1e7a0:	3308      	adds	r3, #8
   1e7a2:	64eb      	str	r3, [r5, #76]	; 0x4c
		--(*count);
   1e7a4:	3a01      	subs	r2, #1
   1e7a6:	652a      	str	r2, [r5, #80]	; 0x50
   1e7a8:	e7f5      	b.n	1e796 <transceive+0xa6>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e7aa:	4643      	mov	r3, r8
   1e7ac:	e7ee      	b.n	1e78c <transceive+0x9c>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e7ae:	2300      	movs	r3, #0
   1e7b0:	e7f0      	b.n	1e794 <transceive+0xa4>
			*buf_len = (*current)->len / dfs;
   1e7b2:	6621      	str	r1, [r4, #96]	; 0x60
			return (*current)->buf;
   1e7b4:	681b      	ldr	r3, [r3, #0]
   1e7b6:	e001      	b.n	1e7bc <transceive+0xcc>
	*buf_len = 0;
   1e7b8:	2300      	movs	r3, #0
   1e7ba:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
   1e7bc:	65e3      	str	r3, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1e7be:	2300      	movs	r3, #0
   1e7c0:	6423      	str	r3, [r4, #64]	; 0x40
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1e7c2:	6823      	ldr	r3, [r4, #0]
   1e7c4:	b35b      	cbz	r3, 1e81e <transceive+0x12e>
   1e7c6:	689b      	ldr	r3, [r3, #8]
   1e7c8:	b34b      	cbz	r3, 1e81e <transceive+0x12e>
   1e7ca:	681d      	ldr	r5, [r3, #0]
   1e7cc:	b33d      	cbz	r5, 1e81e <transceive+0x12e>
	return gpio_pin_set(spec->port, spec->pin, value);
   1e7ce:	f893 9004 	ldrb.w	r9, [r3, #4]
	const struct gpio_driver_config *const cfg =
   1e7d2:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
   1e7d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e7d8:	681b      	ldr	r3, [r3, #0]
   1e7da:	f04f 0801 	mov.w	r8, #1
   1e7de:	fa08 f809 	lsl.w	r8, r8, r9
   1e7e2:	ea13 0f08 	tst.w	r3, r8
   1e7e6:	d043      	beq.n	1e870 <transceive+0x180>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1e7e8:	f8da 3000 	ldr.w	r3, [sl]
   1e7ec:	ea18 0f03 	tst.w	r8, r3
   1e7f0:	d100      	bne.n	1e7f4 <transceive+0x104>
   1e7f2:	2601      	movs	r6, #1
	const struct gpio_driver_config *const cfg =
   1e7f4:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e7f6:	681b      	ldr	r3, [r3, #0]
   1e7f8:	f04f 0801 	mov.w	r8, #1
   1e7fc:	fa08 f809 	lsl.w	r8, r8, r9
   1e800:	ea13 0f08 	tst.w	r3, r8
   1e804:	d046      	beq.n	1e894 <transceive+0x1a4>
	if (value != 0)	{
   1e806:	2e00      	cmp	r6, #0
   1e808:	d056      	beq.n	1e8b8 <transceive+0x1c8>
	const struct gpio_driver_api *api =
   1e80a:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
   1e80c:	68db      	ldr	r3, [r3, #12]
   1e80e:	4641      	mov	r1, r8
   1e810:	4628      	mov	r0, r5
   1e812:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
   1e814:	6823      	ldr	r3, [r4, #0]
   1e816:	689b      	ldr	r3, [r3, #8]
   1e818:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1e81a:	f011 ff89 	bl	30730 <z_impl_k_busy_wait>
		transfer_next_chunk(dev);
   1e81e:	4638      	mov	r0, r7
   1e820:	f7ff fe90 	bl	1e544 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e824:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e826:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1e828:	429a      	cmp	r2, r3
   1e82a:	bf38      	it	cc
   1e82c:	461a      	movcc	r2, r3
   1e82e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1e832:	fb03 f302 	mul.w	r3, r3, r2
			     ctx->config->frequency;
   1e836:	4625      	mov	r5, r4
   1e838:	f855 2b28 	ldr.w	r2, [r5], #40
   1e83c:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e83e:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1e842:	33c8      	adds	r3, #200	; 0xc8
   1e844:	0c59      	lsrs	r1, r3, #17
   1e846:	03d8      	lsls	r0, r3, #15
   1e848:	f240 36e7 	movw	r6, #999	; 0x3e7
   1e84c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e850:	2300      	movs	r3, #0
   1e852:	1980      	adds	r0, r0, r6
   1e854:	f04f 0600 	mov.w	r6, #0
   1e858:	eb46 0101 	adc.w	r1, r6, r1
   1e85c:	f7e2 f8be 	bl	9dc <__aeabi_uldivmod>
   1e860:	4602      	mov	r2, r0
   1e862:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1e864:	4628      	mov	r0, r5
   1e866:	f005 ff7b 	bl	24760 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1e86a:	bb58      	cbnz	r0, 1e8c4 <transceive+0x1d4>
	status = ctx->sync_status;
   1e86c:	6c26      	ldr	r6, [r4, #64]	; 0x40
	return status;
   1e86e:	e75f      	b.n	1e730 <transceive+0x40>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e870:	f8df b09c 	ldr.w	fp, [pc, #156]	; 1e910 <transceive+0x220>
   1e874:	f240 43bb 	movw	r3, #1211	; 0x4bb
   1e878:	465a      	mov	r2, fp
   1e87a:	491f      	ldr	r1, [pc, #124]	; (1e8f8 <transceive+0x208>)
   1e87c:	481f      	ldr	r0, [pc, #124]	; (1e8fc <transceive+0x20c>)
   1e87e:	f00d fc63 	bl	2c148 <printk>
   1e882:	481f      	ldr	r0, [pc, #124]	; (1e900 <transceive+0x210>)
   1e884:	f00d fc60 	bl	2c148 <printk>
   1e888:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1e88c:	4658      	mov	r0, fp
   1e88e:	f00d fe60 	bl	2c552 <assert_post_action>
   1e892:	e7a9      	b.n	1e7e8 <transceive+0xf8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e894:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1e910 <transceive+0x220>
   1e898:	f240 4391 	movw	r3, #1169	; 0x491
   1e89c:	464a      	mov	r2, r9
   1e89e:	4916      	ldr	r1, [pc, #88]	; (1e8f8 <transceive+0x208>)
   1e8a0:	4816      	ldr	r0, [pc, #88]	; (1e8fc <transceive+0x20c>)
   1e8a2:	f00d fc51 	bl	2c148 <printk>
   1e8a6:	4816      	ldr	r0, [pc, #88]	; (1e900 <transceive+0x210>)
   1e8a8:	f00d fc4e 	bl	2c148 <printk>
   1e8ac:	f240 4191 	movw	r1, #1169	; 0x491
   1e8b0:	4648      	mov	r0, r9
   1e8b2:	f00d fe4e 	bl	2c552 <assert_post_action>
   1e8b6:	e7a6      	b.n	1e806 <transceive+0x116>
	const struct gpio_driver_api *api =
   1e8b8:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
   1e8ba:	691b      	ldr	r3, [r3, #16]
   1e8bc:	4641      	mov	r1, r8
   1e8be:	4628      	mov	r0, r5
   1e8c0:	4798      	blx	r3
   1e8c2:	e7a7      	b.n	1e814 <transceive+0x124>
   1e8c4:	4b0f      	ldr	r3, [pc, #60]	; (1e904 <transceive+0x214>)
   1e8c6:	4a10      	ldr	r2, [pc, #64]	; (1e908 <transceive+0x218>)
   1e8c8:	1a9b      	subs	r3, r3, r2
   1e8ca:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Timeout waiting for transfer complete");
   1e8cc:	f04f 0100 	mov.w	r1, #0
   1e8d0:	2201      	movs	r2, #1
   1e8d2:	f362 0102 	bfi	r1, r2, #0, #3
   1e8d6:	f36f 01c5 	bfc	r1, #3, #3
   1e8da:	f363 118f 	bfi	r1, r3, #6, #10
   1e8de:	480b      	ldr	r0, [pc, #44]	; (1e90c <transceive+0x21c>)
   1e8e0:	f7f4 ffde 	bl	138a0 <log_0>
		return -ETIMEDOUT;
   1e8e4:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1e8e8:	e722      	b.n	1e730 <transceive+0x40>
		ctx->owner = NULL;
   1e8ea:	2300      	movs	r3, #0
   1e8ec:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1e8ee:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1e8f2:	f005 feed 	bl	246d0 <z_impl_k_sem_give>
	return error;
   1e8f6:	e721      	b.n	1e73c <transceive+0x4c>
   1e8f8:	00031db4 	.word	0x00031db4
   1e8fc:	00031df4 	.word	0x00031df4
   1e900:	00031e14 	.word	0x00031e14
   1e904:	000319e0 	.word	0x000319e0
   1e908:	00031908 	.word	0x00031908
   1e90c:	000350d8 	.word	0x000350d8
   1e910:	00031d88 	.word	0x00031d88

0001e914 <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1e914:	7803      	ldrb	r3, [r0, #0]
   1e916:	2b00      	cmp	r3, #0
   1e918:	d16d      	bne.n	1e9f6 <event_handler+0xe2>
{
   1e91a:	b510      	push	{r4, lr}
   1e91c:	460c      	mov	r4, r1
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1e91e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (!ctx->tx_len) {
   1e920:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1e922:	b1cb      	cbz	r3, 1e958 <event_handler+0x44>
	if (len > ctx->tx_len) {
   1e924:	429a      	cmp	r2, r3
   1e926:	d807      	bhi.n	1e938 <event_handler+0x24>
	ctx->tx_len -= len;
   1e928:	1a9b      	subs	r3, r3, r2
   1e92a:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1e92c:	b31b      	cbz	r3, 1e976 <event_handler+0x62>
	} else if (ctx->tx_buf) {
   1e92e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1e930:	b193      	cbz	r3, 1e958 <event_handler+0x44>
		ctx->tx_buf += dfs * len;
   1e932:	441a      	add	r2, r3
   1e934:	654a      	str	r2, [r1, #84]	; 0x54
   1e936:	e00f      	b.n	1e958 <event_handler+0x44>
   1e938:	4b2f      	ldr	r3, [pc, #188]	; (1e9f8 <event_handler+0xe4>)
   1e93a:	4a30      	ldr	r2, [pc, #192]	; (1e9fc <event_handler+0xe8>)
   1e93c:	1a9b      	subs	r3, r3, r2
   1e93e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Update exceeds current buffer");
   1e940:	f04f 0100 	mov.w	r1, #0
   1e944:	2201      	movs	r2, #1
   1e946:	f362 0102 	bfi	r1, r2, #0, #3
   1e94a:	f36f 01c5 	bfc	r1, #3, #3
   1e94e:	f363 118f 	bfi	r1, r3, #6, #10
   1e952:	482b      	ldr	r0, [pc, #172]	; (1ea00 <event_handler+0xec>)
   1e954:	f7f4 ffa4 	bl	138a0 <log_0>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1e958:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (!ctx->rx_len) {
   1e95a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e95c:	2b00      	cmp	r3, #0
   1e95e:	d030      	beq.n	1e9c2 <event_handler+0xae>
	if (len > ctx->rx_len) {
   1e960:	429a      	cmp	r2, r3
   1e962:	d81e      	bhi.n	1e9a2 <event_handler+0x8e>
	ctx->rx_len -= len;
   1e964:	1a9b      	subs	r3, r3, r2
   1e966:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1e968:	2b00      	cmp	r3, #0
   1e96a:	d02e      	beq.n	1e9ca <event_handler+0xb6>
	} else if (ctx->rx_buf) {
   1e96c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e96e:	b343      	cbz	r3, 1e9c2 <event_handler+0xae>
		ctx->rx_buf += dfs * len;
   1e970:	441a      	add	r2, r3
   1e972:	65e2      	str	r2, [r4, #92]	; 0x5c
   1e974:	e025      	b.n	1e9c2 <event_handler+0xae>
		++ctx->current_tx;
   1e976:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1e978:	3308      	adds	r3, #8
   1e97a:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1e97c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1e97e:	3b01      	subs	r3, #1
   1e980:	648b      	str	r3, [r1, #72]	; 0x48
	while (*count) {
   1e982:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e984:	b153      	cbz	r3, 1e99c <event_handler+0x88>
		if (((*current)->len / dfs) != 0) {
   1e986:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1e988:	6851      	ldr	r1, [r2, #4]
   1e98a:	b921      	cbnz	r1, 1e996 <event_handler+0x82>
		++(*current);
   1e98c:	3208      	adds	r2, #8
   1e98e:	6462      	str	r2, [r4, #68]	; 0x44
		--(*count);
   1e990:	3b01      	subs	r3, #1
   1e992:	64a3      	str	r3, [r4, #72]	; 0x48
   1e994:	e7f5      	b.n	1e982 <event_handler+0x6e>
			*buf_len = (*current)->len / dfs;
   1e996:	65a1      	str	r1, [r4, #88]	; 0x58
			return (*current)->buf;
   1e998:	6813      	ldr	r3, [r2, #0]
   1e99a:	e000      	b.n	1e99e <event_handler+0x8a>
	*buf_len = 0;
   1e99c:	65a3      	str	r3, [r4, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
   1e99e:	6563      	str	r3, [r4, #84]	; 0x54
   1e9a0:	e7da      	b.n	1e958 <event_handler+0x44>
   1e9a2:	4b15      	ldr	r3, [pc, #84]	; (1e9f8 <event_handler+0xe4>)
   1e9a4:	4a15      	ldr	r2, [pc, #84]	; (1e9fc <event_handler+0xe8>)
   1e9a6:	1a9b      	subs	r3, r3, r2
   1e9a8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Update exceeds current buffer");
   1e9aa:	f04f 0100 	mov.w	r1, #0
   1e9ae:	2201      	movs	r2, #1
   1e9b0:	f362 0102 	bfi	r1, r2, #0, #3
   1e9b4:	f36f 01c5 	bfc	r1, #3, #3
   1e9b8:	f363 118f 	bfi	r1, r3, #6, #10
   1e9bc:	4810      	ldr	r0, [pc, #64]	; (1ea00 <event_handler+0xec>)
   1e9be:	f7f4 ff6f 	bl	138a0 <log_0>
		transfer_next_chunk(dev_data->dev);
   1e9c2:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1e9c4:	f7ff fdbe 	bl	1e544 <transfer_next_chunk>
}
   1e9c8:	bd10      	pop	{r4, pc}
		++ctx->current_rx;
   1e9ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e9cc:	3308      	adds	r3, #8
   1e9ce:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1e9d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e9d2:	3b01      	subs	r3, #1
   1e9d4:	6523      	str	r3, [r4, #80]	; 0x50
	while (*count) {
   1e9d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e9d8:	b153      	cbz	r3, 1e9f0 <event_handler+0xdc>
		if (((*current)->len / dfs) != 0) {
   1e9da:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   1e9dc:	6851      	ldr	r1, [r2, #4]
   1e9de:	b921      	cbnz	r1, 1e9ea <event_handler+0xd6>
		++(*current);
   1e9e0:	3208      	adds	r2, #8
   1e9e2:	64e2      	str	r2, [r4, #76]	; 0x4c
		--(*count);
   1e9e4:	3b01      	subs	r3, #1
   1e9e6:	6523      	str	r3, [r4, #80]	; 0x50
   1e9e8:	e7f5      	b.n	1e9d6 <event_handler+0xc2>
			*buf_len = (*current)->len / dfs;
   1e9ea:	6621      	str	r1, [r4, #96]	; 0x60
			return (*current)->buf;
   1e9ec:	6813      	ldr	r3, [r2, #0]
   1e9ee:	e000      	b.n	1e9f2 <event_handler+0xde>
	*buf_len = 0;
   1e9f0:	6623      	str	r3, [r4, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
   1e9f2:	65e3      	str	r3, [r4, #92]	; 0x5c
   1e9f4:	e7e5      	b.n	1e9c2 <event_handler+0xae>
   1e9f6:	4770      	bx	lr
   1e9f8:	000319e0 	.word	0x000319e0
   1e9fc:	00031908 	.word	0x00031908
   1ea00:	00035100 	.word	0x00035100

0001ea04 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   1ea04:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   1ea06:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   1ea08:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   1ea0c:	d06f      	beq.n	1eaee <baudrate_set+0xea>
   1ea0e:	d83a      	bhi.n	1ea86 <baudrate_set+0x82>
   1ea10:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   1ea14:	d06e      	beq.n	1eaf4 <baudrate_set+0xf0>
   1ea16:	d90a      	bls.n	1ea2e <baudrate_set+0x2a>
   1ea18:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   1ea1c:	d075      	beq.n	1eb0a <baudrate_set+0x106>
   1ea1e:	d924      	bls.n	1ea6a <baudrate_set+0x66>
   1ea20:	f647 2312 	movw	r3, #31250	; 0x7a12
   1ea24:	4299      	cmp	r1, r3
   1ea26:	d12b      	bne.n	1ea80 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1ea28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1ea2c:	e013      	b.n	1ea56 <baudrate_set+0x52>
	switch (baudrate) {
   1ea2e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1ea32:	d061      	beq.n	1eaf8 <baudrate_set+0xf4>
   1ea34:	d907      	bls.n	1ea46 <baudrate_set+0x42>
   1ea36:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   1ea3a:	d063      	beq.n	1eb04 <baudrate_set+0x100>
   1ea3c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   1ea40:	d110      	bne.n	1ea64 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1ea42:	4b3c      	ldr	r3, [pc, #240]	; (1eb34 <baudrate_set+0x130>)
   1ea44:	e007      	b.n	1ea56 <baudrate_set+0x52>
	switch (baudrate) {
   1ea46:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1ea4a:	d058      	beq.n	1eafe <baudrate_set+0xfa>
   1ea4c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   1ea50:	d105      	bne.n	1ea5e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1ea52:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1ea56:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   1ea5a:	2000      	movs	r0, #0
   1ea5c:	4770      	bx	lr
	switch (baudrate) {
   1ea5e:	f06f 0015 	mvn.w	r0, #21
   1ea62:	4770      	bx	lr
   1ea64:	f06f 0015 	mvn.w	r0, #21
   1ea68:	4770      	bx	lr
   1ea6a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1ea6e:	d04e      	beq.n	1eb0e <baudrate_set+0x10a>
   1ea70:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1ea74:	d101      	bne.n	1ea7a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1ea76:	4b30      	ldr	r3, [pc, #192]	; (1eb38 <baudrate_set+0x134>)
   1ea78:	e7ed      	b.n	1ea56 <baudrate_set+0x52>
	switch (baudrate) {
   1ea7a:	f06f 0015 	mvn.w	r0, #21
   1ea7e:	4770      	bx	lr
   1ea80:	f06f 0015 	mvn.w	r0, #21
   1ea84:	4770      	bx	lr
   1ea86:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1ea8a:	d042      	beq.n	1eb12 <baudrate_set+0x10e>
   1ea8c:	d909      	bls.n	1eaa2 <baudrate_set+0x9e>
   1ea8e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1ea92:	d046      	beq.n	1eb22 <baudrate_set+0x11e>
   1ea94:	d91f      	bls.n	1ead6 <baudrate_set+0xd2>
   1ea96:	4b29      	ldr	r3, [pc, #164]	; (1eb3c <baudrate_set+0x138>)
   1ea98:	4299      	cmp	r1, r3
   1ea9a:	d148      	bne.n	1eb2e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1ea9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eaa0:	e7d9      	b.n	1ea56 <baudrate_set+0x52>
	switch (baudrate) {
   1eaa2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1eaa6:	d037      	beq.n	1eb18 <baudrate_set+0x114>
   1eaa8:	d905      	bls.n	1eab6 <baudrate_set+0xb2>
   1eaaa:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1eaae:	d10f      	bne.n	1ead0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1eab0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1eab4:	e7cf      	b.n	1ea56 <baudrate_set+0x52>
	switch (baudrate) {
   1eab6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1eaba:	4299      	cmp	r1, r3
   1eabc:	d02e      	beq.n	1eb1c <baudrate_set+0x118>
   1eabe:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1eac2:	d102      	bne.n	1eaca <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1eac4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1eac8:	e7c5      	b.n	1ea56 <baudrate_set+0x52>
	switch (baudrate) {
   1eaca:	f06f 0015 	mvn.w	r0, #21
   1eace:	4770      	bx	lr
   1ead0:	f06f 0015 	mvn.w	r0, #21
   1ead4:	4770      	bx	lr
   1ead6:	4b1a      	ldr	r3, [pc, #104]	; (1eb40 <baudrate_set+0x13c>)
   1ead8:	4299      	cmp	r1, r3
   1eada:	d025      	beq.n	1eb28 <baudrate_set+0x124>
   1eadc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   1eae0:	d102      	bne.n	1eae8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1eae2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1eae6:	e7b6      	b.n	1ea56 <baudrate_set+0x52>
	switch (baudrate) {
   1eae8:	f06f 0015 	mvn.w	r0, #21
   1eaec:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1eaee:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1eaf2:	e7b0      	b.n	1ea56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1eaf4:	4b13      	ldr	r3, [pc, #76]	; (1eb44 <baudrate_set+0x140>)
   1eaf6:	e7ae      	b.n	1ea56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1eaf8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1eafc:	e7ab      	b.n	1ea56 <baudrate_set+0x52>
	switch (baudrate) {
   1eafe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1eb02:	e7a8      	b.n	1ea56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1eb04:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1eb08:	e7a5      	b.n	1ea56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1eb0a:	4b0f      	ldr	r3, [pc, #60]	; (1eb48 <baudrate_set+0x144>)
   1eb0c:	e7a3      	b.n	1ea56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1eb0e:	4b0f      	ldr	r3, [pc, #60]	; (1eb4c <baudrate_set+0x148>)
   1eb10:	e7a1      	b.n	1ea56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1eb12:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1eb16:	e79e      	b.n	1ea56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1eb18:	4b0d      	ldr	r3, [pc, #52]	; (1eb50 <baudrate_set+0x14c>)
   1eb1a:	e79c      	b.n	1ea56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1eb1c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1eb20:	e799      	b.n	1ea56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1eb22:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1eb26:	e796      	b.n	1ea56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1eb28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1eb2c:	e793      	b.n	1ea56 <baudrate_set+0x52>
	switch (baudrate) {
   1eb2e:	f06f 0015 	mvn.w	r0, #21
}
   1eb32:	4770      	bx	lr
   1eb34:	0013b000 	.word	0x0013b000
   1eb38:	004ea000 	.word	0x004ea000
   1eb3c:	000f4240 	.word	0x000f4240
   1eb40:	0003d090 	.word	0x0003d090
   1eb44:	00275000 	.word	0x00275000
   1eb48:	0075c000 	.word	0x0075c000
   1eb4c:	003af000 	.word	0x003af000
   1eb50:	013a9000 	.word	0x013a9000

0001eb54 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1eb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb58:	4605      	mov	r5, r0
   1eb5a:	4688      	mov	r8, r1
	return dev->data;
   1eb5c:	6907      	ldr	r7, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1eb5e:	f011 fcb4 	bl	304ca <k_is_in_isr>
   1eb62:	b920      	cbnz	r0, 1eb6e <uarte_nrfx_poll_out+0x1a>
	return !z_sys_post_kernel;
   1eb64:	4b1d      	ldr	r3, [pc, #116]	; (1ebdc <uarte_nrfx_poll_out+0x88>)
   1eb66:	781b      	ldrb	r3, [r3, #0]
   1eb68:	b1ab      	cbz	r3, 1eb96 <uarte_nrfx_poll_out+0x42>
   1eb6a:	2300      	movs	r3, #0
   1eb6c:	e000      	b.n	1eb70 <uarte_nrfx_poll_out+0x1c>
   1eb6e:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   1eb70:	b313      	cbz	r3, 1ebb8 <uarte_nrfx_poll_out+0x64>
	__asm__ volatile(
   1eb72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eb76:	f3ef 8411 	mrs	r4, BASEPRI
   1eb7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb7e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   1eb82:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   1eb84:	4628      	mov	r0, r5
   1eb86:	f010 fb30 	bl	2f1ea <is_tx_ready>
   1eb8a:	b930      	cbnz	r0, 1eb9a <uarte_nrfx_poll_out+0x46>
	__asm__ volatile(
   1eb8c:	f384 8811 	msr	BASEPRI, r4
   1eb90:	f3bf 8f6f 	isb	sy
}
   1eb94:	e7ed      	b.n	1eb72 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1eb96:	2301      	movs	r3, #1
   1eb98:	e7ea      	b.n	1eb70 <uarte_nrfx_poll_out+0x1c>
#if CONFIG_UART_ASYNC_API
				if (data->async && data->async->tx_size &&
   1eb9a:	68fb      	ldr	r3, [r7, #12]
   1eb9c:	b183      	cbz	r3, 1ebc0 <uarte_nrfx_poll_out+0x6c>
   1eb9e:	68da      	ldr	r2, [r3, #12]
   1eba0:	b172      	cbz	r2, 1ebc0 <uarte_nrfx_poll_out+0x6c>
					data->async->tx_amount < 0) {
   1eba2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
   1eba6:	2a00      	cmp	r2, #0
   1eba8:	da0a      	bge.n	1ebc0 <uarte_nrfx_poll_out+0x6c>
	return dev->config;
   1ebaa:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   1ebac:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   1ebae:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1ebb2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
   1ebb6:	e003      	b.n	1ebc0 <uarte_nrfx_poll_out+0x6c>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1ebb8:	4628      	mov	r0, r5
   1ebba:	f010 fc18 	bl	2f3ee <wait_tx_ready>
   1ebbe:	4606      	mov	r6, r0
	}

	data->char_out = c;
   1ebc0:	4639      	mov	r1, r7
   1ebc2:	f801 8f14 	strb.w	r8, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   1ebc6:	2201      	movs	r2, #1
   1ebc8:	4628      	mov	r0, r5
   1ebca:	f010 fb30 	bl	2f22e <tx_start>
	__asm__ volatile(
   1ebce:	f386 8811 	msr	BASEPRI, r6
   1ebd2:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1ebd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ebda:	bf00      	nop
   1ebdc:	20003ffa 	.word	0x20003ffa

0001ebe0 <uarte_nrfx_rx_enable>:
{
   1ebe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ebe4:	4616      	mov	r6, r2
	return dev->data;
   1ebe6:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   1ebe8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1ebea:	f8d2 8000 	ldr.w	r8, [r2]
	if (cfg->disable_rx) {
   1ebee:	7a12      	ldrb	r2, [r2, #8]
   1ebf0:	2a00      	cmp	r2, #0
   1ebf2:	d151      	bne.n	1ec98 <uarte_nrfx_rx_enable+0xb8>
   1ebf4:	4605      	mov	r5, r0
   1ebf6:	460f      	mov	r7, r1
	if (data->async->rx_enabled) {
   1ebf8:	68e2      	ldr	r2, [r4, #12]
   1ebfa:	f892 10d2 	ldrb.w	r1, [r2, #210]	; 0xd2
   1ebfe:	2900      	cmp	r1, #0
   1ec00:	f040 8086 	bne.w	1ed10 <uarte_nrfx_rx_enable+0x130>
	data->async->rx_timeout = timeout;
   1ec04:	67d3      	str	r3, [r2, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
   1ec06:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   1ec0a:	dd58      	ble.n	1ecbe <uarte_nrfx_rx_enable+0xde>
   1ec0c:	4a42      	ldr	r2, [pc, #264]	; (1ed18 <uarte_nrfx_rx_enable+0x138>)
   1ec0e:	fb82 1203 	smull	r1, r2, r2, r3
   1ec12:	17db      	asrs	r3, r3, #31
   1ec14:	ebc3 0362 	rsb	r3, r3, r2, asr #1
	data->async->rx_timeout_slab =
   1ec18:	68e2      	ldr	r2, [r4, #12]
   1ec1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	data->async->rx_buf = buf;
   1ec1e:	68e3      	ldr	r3, [r4, #12]
   1ec20:	661f      	str	r7, [r3, #96]	; 0x60
	data->async->rx_buf_len = len;
   1ec22:	68e3      	ldr	r3, [r4, #12]
   1ec24:	665e      	str	r6, [r3, #100]	; 0x64
	data->async->rx_offset = 0;
   1ec26:	68e2      	ldr	r2, [r4, #12]
   1ec28:	2300      	movs	r3, #0
   1ec2a:	6693      	str	r3, [r2, #104]	; 0x68
	data->async->rx_next_buf = NULL;
   1ec2c:	68e2      	ldr	r2, [r4, #12]
   1ec2e:	66d3      	str	r3, [r2, #108]	; 0x6c
	data->async->rx_next_buf_len = 0;
   1ec30:	68e2      	ldr	r2, [r4, #12]
   1ec32:	6713      	str	r3, [r2, #112]	; 0x70
	return dev->config;
   1ec34:	686b      	ldr	r3, [r5, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ec36:	685b      	ldr	r3, [r3, #4]
   1ec38:	f013 0f10 	tst.w	r3, #16
   1ec3c:	d010      	beq.n	1ec60 <uarte_nrfx_rx_enable+0x80>
		if (data->async->rx_flush_cnt) {
   1ec3e:	68e1      	ldr	r1, [r4, #12]
   1ec40:	f891 30d1 	ldrb.w	r3, [r1, #209]	; 0xd1
   1ec44:	b163      	cbz	r3, 1ec60 <uarte_nrfx_rx_enable+0x80>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1ec46:	42b3      	cmp	r3, r6
   1ec48:	bf28      	it	cs
   1ec4a:	4633      	movcs	r3, r6
   1ec4c:	4699      	mov	r9, r3
   1ec4e:	461a      	mov	r2, r3
   1ec50:	31cc      	adds	r1, #204	; 0xcc
   1ec52:	4638      	mov	r0, r7
   1ec54:	f011 fe2c 	bl	308b0 <memcpy>
			buf += cpy_len;
   1ec58:	444f      	add	r7, r9
			if (!len) {
   1ec5a:	ebb6 0609 	subs.w	r6, r6, r9
   1ec5e:	d030      	beq.n	1ecc2 <uarte_nrfx_rx_enable+0xe2>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ec60:	f8c8 7534 	str.w	r7, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1ec64:	f8c8 6538 	str.w	r6, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec68:	2300      	movs	r3, #0
   1ec6a:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
   1ec6e:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
   1ec72:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
   1ec76:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
   1ec7a:	68e3      	ldr	r3, [r4, #12]
   1ec7c:	2201      	movs	r2, #1
   1ec7e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	return dev->config;
   1ec82:	686b      	ldr	r3, [r5, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ec84:	685b      	ldr	r3, [r3, #4]
   1ec86:	f013 0f10 	tst.w	r3, #16
   1ec8a:	d130      	bne.n	1ecee <uarte_nrfx_rx_enable+0x10e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec8c:	2301      	movs	r3, #1
   1ec8e:	f8c8 3000 	str.w	r3, [r8]
	return 0;
   1ec92:	2000      	movs	r0, #0
}
   1ec94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		__ASSERT(false, "TX only UARTE instance");
   1ec98:	4c20      	ldr	r4, [pc, #128]	; (1ed1c <uarte_nrfx_rx_enable+0x13c>)
   1ec9a:	f240 337f 	movw	r3, #895	; 0x37f
   1ec9e:	4622      	mov	r2, r4
   1eca0:	491f      	ldr	r1, [pc, #124]	; (1ed20 <uarte_nrfx_rx_enable+0x140>)
   1eca2:	4820      	ldr	r0, [pc, #128]	; (1ed24 <uarte_nrfx_rx_enable+0x144>)
   1eca4:	f00d fa50 	bl	2c148 <printk>
   1eca8:	481f      	ldr	r0, [pc, #124]	; (1ed28 <uarte_nrfx_rx_enable+0x148>)
   1ecaa:	f00d fa4d 	bl	2c148 <printk>
   1ecae:	f240 317f 	movw	r1, #895	; 0x37f
   1ecb2:	4620      	mov	r0, r4
   1ecb4:	f00d fc4d 	bl	2c552 <assert_post_action>
		return -ENOTSUP;
   1ecb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ecbc:	e7ea      	b.n	1ec94 <uarte_nrfx_rx_enable+0xb4>
		MAX(timeout / RX_TIMEOUT_DIV,
   1ecbe:	235c      	movs	r3, #92	; 0x5c
   1ecc0:	e7aa      	b.n	1ec18 <uarte_nrfx_rx_enable+0x38>
				data->async->rx_flush_cnt -= cpy_len;
   1ecc2:	68e2      	ldr	r2, [r4, #12]
   1ecc4:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
   1ecc8:	eba3 0309 	sub.w	r3, r3, r9
   1eccc:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
   1ecd0:	4649      	mov	r1, r9
   1ecd2:	4628      	mov	r0, r5
   1ecd4:	f010 fafb 	bl	2f2ce <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   1ecd8:	68e1      	ldr	r1, [r4, #12]
   1ecda:	2201      	movs	r2, #1
   1ecdc:	3160      	adds	r1, #96	; 0x60
   1ecde:	4628      	mov	r0, r5
   1ece0:	f010 fb0d 	bl	2f2fe <notify_rx_buf_release>
				notify_rx_disable(dev);
   1ece4:	4628      	mov	r0, r5
   1ece6:	f010 fb23 	bl	2f330 <notify_rx_disable>
				return 0;
   1ecea:	2000      	movs	r0, #0
   1ecec:	e7d2      	b.n	1ec94 <uarte_nrfx_rx_enable+0xb4>
	__asm__ volatile(
   1ecee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ecf2:	f3ef 8411 	mrs	r4, BASEPRI
   1ecf6:	f383 8812 	msr	BASEPRI_MAX, r3
   1ecfa:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   1ecfe:	2102      	movs	r1, #2
   1ed00:	4628      	mov	r0, r5
   1ed02:	f010 fa86 	bl	2f212 <uarte_enable>
	__asm__ volatile(
   1ed06:	f384 8811 	msr	BASEPRI, r4
   1ed0a:	f3bf 8f6f 	isb	sy
}
   1ed0e:	e7bd      	b.n	1ec8c <uarte_nrfx_rx_enable+0xac>
		return -EBUSY;
   1ed10:	f06f 000f 	mvn.w	r0, #15
   1ed14:	e7be      	b.n	1ec94 <uarte_nrfx_rx_enable+0xb4>
   1ed16:	bf00      	nop
   1ed18:	66666667 	.word	0x66666667
   1ed1c:	000351b4 	.word	0x000351b4
   1ed20:	000364dc 	.word	0x000364dc
   1ed24:	00031df4 	.word	0x00031df4
   1ed28:	000351e8 	.word	0x000351e8

0001ed2c <uarte_nrfx_tx>:
{
   1ed2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed30:	b082      	sub	sp, #8
   1ed32:	4605      	mov	r5, r0
   1ed34:	461f      	mov	r7, r3
	return dev->data;
   1ed36:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   1ed38:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   1ed3a:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
   1ed3c:	f04f 0040 	mov.w	r0, #64	; 0x40
   1ed40:	f3ef 8811 	mrs	r8, BASEPRI
   1ed44:	f380 8812 	msr	BASEPRI_MAX, r0
   1ed48:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   1ed4c:	68e0      	ldr	r0, [r4, #12]
   1ed4e:	68c6      	ldr	r6, [r0, #12]
   1ed50:	b9f6      	cbnz	r6, 1ed90 <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
   1ed52:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
   1ed54:	68e0      	ldr	r0, [r4, #12]
   1ed56:	6081      	str	r1, [r0, #8]
    p_reg->INTENSET = mask;
   1ed58:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1ed5c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   1ed60:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1ed64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1ed68:	d119      	bne.n	1ed9e <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1ed6a:	68e3      	ldr	r3, [r4, #12]
   1ed6c:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1ed6e:	68e3      	ldr	r3, [r4, #12]
   1ed70:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1ed72:	4621      	mov	r1, r4
   1ed74:	4628      	mov	r0, r5
   1ed76:	f010 fa87 	bl	2f288 <start_tx_locked>
	__asm__ volatile(
   1ed7a:	f388 8811 	msr	BASEPRI, r8
   1ed7e:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1ed82:	7ae3      	ldrb	r3, [r4, #11]
   1ed84:	2b01      	cmp	r3, #1
   1ed86:	d011      	beq.n	1edac <uarte_nrfx_tx+0x80>
	return 0;
   1ed88:	2000      	movs	r0, #0
}
   1ed8a:	b002      	add	sp, #8
   1ed8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed90:	f388 8811 	msr	BASEPRI, r8
   1ed94:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1ed98:	f06f 000f 	mvn.w	r0, #15
   1ed9c:	e7f5      	b.n	1ed8a <uarte_nrfx_tx+0x5e>
		data->async->tx_cache_offset = 0;
   1ed9e:	68e3      	ldr	r3, [r4, #12]
   1eda0:	2200      	movs	r2, #0
   1eda2:	621a      	str	r2, [r3, #32]
		(void)setup_tx_cache(data);
   1eda4:	4620      	mov	r0, r4
   1eda6:	f010 fc62 	bl	2f66e <setup_tx_cache>
   1edaa:	e7e2      	b.n	1ed72 <uarte_nrfx_tx+0x46>
	    && timeout != SYS_FOREVER_US) {
   1edac:	f1b7 3fff 	cmp.w	r7, #4294967295
   1edb0:	d101      	bne.n	1edb6 <uarte_nrfx_tx+0x8a>
	return 0;
   1edb2:	2000      	movs	r0, #0
   1edb4:	e7e9      	b.n	1ed8a <uarte_nrfx_tx+0x5e>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1edb6:	68e4      	ldr	r4, [r4, #12]
   1edb8:	3428      	adds	r4, #40	; 0x28
   1edba:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
   1edbe:	17df      	asrs	r7, r3, #31
   1edc0:	03f9      	lsls	r1, r7, #15
   1edc2:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1edc6:	03d8      	lsls	r0, r3, #15
   1edc8:	4d0a      	ldr	r5, [pc, #40]	; (1edf4 <uarte_nrfx_tx+0xc8>)
   1edca:	4a0b      	ldr	r2, [pc, #44]	; (1edf8 <uarte_nrfx_tx+0xcc>)
   1edcc:	2300      	movs	r3, #0
   1edce:	1940      	adds	r0, r0, r5
   1edd0:	f04f 0500 	mov.w	r5, #0
   1edd4:	eb45 0101 	adc.w	r1, r5, r1
   1edd8:	f7e1 fe00 	bl	9dc <__aeabi_uldivmod>
   1eddc:	4602      	mov	r2, r0
   1edde:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1ede0:	2000      	movs	r0, #0
   1ede2:	2100      	movs	r1, #0
   1ede4:	e9cd 0100 	strd	r0, r1, [sp]
   1ede8:	4620      	mov	r0, r4
   1edea:	f008 fb41 	bl	27470 <z_impl_k_timer_start>
	return 0;
   1edee:	4628      	mov	r0, r5
   1edf0:	e7cb      	b.n	1ed8a <uarte_nrfx_tx+0x5e>
   1edf2:	bf00      	nop
   1edf4:	000f423f 	.word	0x000f423f
   1edf8:	000f4240 	.word	0x000f4240

0001edfc <rxstarted_isr>:
{
   1edfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1edfe:	b089      	sub	sp, #36	; 0x24
	return dev->data;
   1ee00:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
   1ee02:	2300      	movs	r3, #0
   1ee04:	9303      	str	r3, [sp, #12]
   1ee06:	9304      	str	r3, [sp, #16]
   1ee08:	9305      	str	r3, [sp, #20]
   1ee0a:	9306      	str	r3, [sp, #24]
   1ee0c:	9307      	str	r3, [sp, #28]
   1ee0e:	2303      	movs	r3, #3
   1ee10:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1ee14:	a903      	add	r1, sp, #12
   1ee16:	f010 fa52 	bl	2f2be <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1ee1a:	68e3      	ldr	r3, [r4, #12]
   1ee1c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   1ee1e:	f1b2 3fff 	cmp.w	r2, #4294967295
   1ee22:	d101      	bne.n	1ee28 <rxstarted_isr+0x2c>
}
   1ee24:	b009      	add	sp, #36	; 0x24
   1ee26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
   1ee28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		k_timer_start(&data->async->rx_timeout_timer,
   1ee2c:	68e3      	ldr	r3, [r4, #12]
   1ee2e:	f103 0488 	add.w	r4, r3, #136	; 0x88
			      K_USEC(data->async->rx_timeout_slab),
   1ee32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1ee36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ee3a:	17df      	asrs	r7, r3, #31
   1ee3c:	03f9      	lsls	r1, r7, #15
   1ee3e:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1ee42:	03d8      	lsls	r0, r3, #15
   1ee44:	4d08      	ldr	r5, [pc, #32]	; (1ee68 <rxstarted_isr+0x6c>)
   1ee46:	4a09      	ldr	r2, [pc, #36]	; (1ee6c <rxstarted_isr+0x70>)
   1ee48:	2300      	movs	r3, #0
   1ee4a:	1940      	adds	r0, r0, r5
   1ee4c:	f04f 0500 	mov.w	r5, #0
   1ee50:	eb45 0101 	adc.w	r1, r5, r1
   1ee54:	f7e1 fdc2 	bl	9dc <__aeabi_uldivmod>
   1ee58:	4602      	mov	r2, r0
   1ee5a:	460b      	mov	r3, r1
   1ee5c:	9000      	str	r0, [sp, #0]
   1ee5e:	9101      	str	r1, [sp, #4]
   1ee60:	4620      	mov	r0, r4
   1ee62:	f008 fb05 	bl	27470 <z_impl_k_timer_start>
}
   1ee66:	e7dd      	b.n	1ee24 <rxstarted_isr+0x28>
   1ee68:	000f423f 	.word	0x000f423f
   1ee6c:	000f4240 	.word	0x000f4240

0001ee70 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1ee70:	b538      	push	{r3, r4, r5, lr}
   1ee72:	4604      	mov	r4, r0
   1ee74:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1ee76:	f101 0016 	add.w	r0, r1, #22
   1ee7a:	f002 fd43 	bl	21904 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1ee7e:	4b14      	ldr	r3, [pc, #80]	; (1eed0 <endtx_stoptx_ppi_init+0x60>)
   1ee80:	4298      	cmp	r0, r3
   1ee82:	d111      	bne.n	1eea8 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1ee84:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1ee86:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1ee8a:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ee8c:	4a11      	ldr	r2, [pc, #68]	; (1eed4 <endtx_stoptx_ppi_init+0x64>)
   1ee8e:	33a2      	adds	r3, #162	; 0xa2
   1ee90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ee94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ee98:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1ee9a:	7da9      	ldrb	r1, [r5, #22]
   1ee9c:	2301      	movs	r3, #1
   1ee9e:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   1eea0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   1eea4:	2000      	movs	r0, #0
}
   1eea6:	bd38      	pop	{r3, r4, r5, pc}
   1eea8:	4b0b      	ldr	r3, [pc, #44]	; (1eed8 <endtx_stoptx_ppi_init+0x68>)
   1eeaa:	4a0c      	ldr	r2, [pc, #48]	; (1eedc <endtx_stoptx_ppi_init+0x6c>)
   1eeac:	1a9b      	subs	r3, r3, r2
   1eeae:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   1eeb0:	f04f 0100 	mov.w	r1, #0
   1eeb4:	2201      	movs	r2, #1
   1eeb6:	f362 0102 	bfi	r1, r2, #0, #3
   1eeba:	f36f 01c5 	bfc	r1, #3, #3
   1eebe:	f363 118f 	bfi	r1, r3, #6, #10
   1eec2:	4807      	ldr	r0, [pc, #28]	; (1eee0 <endtx_stoptx_ppi_init+0x70>)
   1eec4:	f7f4 fcec 	bl	138a0 <log_0>
		return -EIO;
   1eec8:	f06f 0004 	mvn.w	r0, #4
   1eecc:	e7eb      	b.n	1eea6 <endtx_stoptx_ppi_init+0x36>
   1eece:	bf00      	nop
   1eed0:	0bad0000 	.word	0x0bad0000
   1eed4:	4001f000 	.word	0x4001f000
   1eed8:	000319e8 	.word	0x000319e8
   1eedc:	00031908 	.word	0x00031908
   1eee0:	00035204 	.word	0x00035204

0001eee4 <uarte_nrfx_init>:
{
   1eee4:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
   1eee6:	6905      	ldr	r5, [r0, #16]
	return dev->config;
   1eee8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1eeea:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
   1eeec:	f010 f9c5 	bl	2f27a <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
   1eef0:	4606      	mov	r6, r0
   1eef2:	bb90      	cbnz	r0, 1ef5a <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1eef4:	68eb      	ldr	r3, [r5, #12]
   1eef6:	2201      	movs	r2, #1
   1eef8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    p_reg->INTENSET = mask;
   1eefc:	4b18      	ldr	r3, [pc, #96]	; (1ef60 <uarte_nrfx_init+0x7c>)
   1eefe:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ef02:	2308      	movs	r3, #8
   1ef04:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ef08:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1ef0c:	b1a3      	cbz	r3, 1ef38 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef0e:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ef10:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1ef14:	b91b      	cbnz	r3, 1ef1e <uarte_nrfx_init+0x3a>
   1ef16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ef1a:	2b00      	cmp	r3, #0
   1ef1c:	d0f8      	beq.n	1ef10 <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef1e:	2300      	movs	r3, #0
   1ef20:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   1ef24:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   1ef28:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1ef2c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ef30:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   1ef34:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1ef38:	68e8      	ldr	r0, [r5, #12]
   1ef3a:	2200      	movs	r2, #0
   1ef3c:	4909      	ldr	r1, [pc, #36]	; (1ef64 <uarte_nrfx_init+0x80>)
   1ef3e:	3088      	adds	r0, #136	; 0x88
   1ef40:	f011 fc2c 	bl	3079c <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1ef44:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
   1ef46:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1ef4a:	68e8      	ldr	r0, [r5, #12]
   1ef4c:	2200      	movs	r2, #0
   1ef4e:	4906      	ldr	r1, [pc, #24]	; (1ef68 <uarte_nrfx_init+0x84>)
   1ef50:	3028      	adds	r0, #40	; 0x28
   1ef52:	f011 fc23 	bl	3079c <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1ef56:	68eb      	ldr	r3, [r5, #12]
   1ef58:	65dd      	str	r5, [r3, #92]	; 0x5c
}
   1ef5a:	4630      	mov	r0, r6
   1ef5c:	bd70      	pop	{r4, r5, r6, pc}
   1ef5e:	bf00      	nop
   1ef60:	000a0210 	.word	0x000a0210
   1ef64:	0002f5cf 	.word	0x0002f5cf
   1ef68:	0002f507 	.word	0x0002f507

0001ef6c <uarte_nrfx_pins_configure>:
{
   1ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
   1ef6e:	6844      	ldr	r4, [r0, #4]
	if (!sleep) {
   1ef70:	2900      	cmp	r1, #0
   1ef72:	f040 81ba 	bne.w	1f2ea <uarte_nrfx_pins_configure+0x37e>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1ef76:	68e5      	ldr	r5, [r4, #12]
   1ef78:	f1b5 3fff 	cmp.w	r5, #4294967295
   1ef7c:	d130      	bne.n	1efe0 <uarte_nrfx_pins_configure+0x74>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1ef7e:	6925      	ldr	r5, [r4, #16]
   1ef80:	f1b5 3fff 	cmp.w	r5, #4294967295
   1ef84:	f000 80c7 	beq.w	1f116 <uarte_nrfx_pins_configure+0x1aa>
					   (cfg->rx_pull_up ?
   1ef88:	7f23      	ldrb	r3, [r4, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   1ef8a:	2b00      	cmp	r3, #0
   1ef8c:	f000 80a5 	beq.w	1f0da <uarte_nrfx_pins_configure+0x16e>
   1ef90:	2603      	movs	r6, #3
    switch (port)
   1ef92:	096b      	lsrs	r3, r5, #5
   1ef94:	f000 80a3 	beq.w	1f0de <uarte_nrfx_pins_configure+0x172>
   1ef98:	2b01      	cmp	r3, #1
   1ef9a:	f040 80a3 	bne.w	1f0e4 <uarte_nrfx_pins_configure+0x178>
            mask = P1_FEATURE_PINS_PRESENT;
   1ef9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1efa2:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1efa6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1efa8:	f013 0f01 	tst.w	r3, #1
   1efac:	f000 809c 	beq.w	1f0e8 <uarte_nrfx_pins_configure+0x17c>
    *p_pin = pin_number & 0x1F;
   1efb0:	f005 071f 	and.w	r7, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1efb4:	096d      	lsrs	r5, r5, #5
   1efb6:	f000 80a5 	beq.w	1f104 <uarte_nrfx_pins_configure+0x198>
   1efba:	2d01      	cmp	r5, #1
   1efbc:	f000 80a5 	beq.w	1f10a <uarte_nrfx_pins_configure+0x19e>
            NRFX_ASSERT(0);
   1efc0:	4dba      	ldr	r5, [pc, #744]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1efc2:	f240 232e 	movw	r3, #558	; 0x22e
   1efc6:	462a      	mov	r2, r5
   1efc8:	49b9      	ldr	r1, [pc, #740]	; (1f2b0 <uarte_nrfx_pins_configure+0x344>)
   1efca:	48ba      	ldr	r0, [pc, #744]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1efcc:	f00d f8bc 	bl	2c148 <printk>
   1efd0:	f240 212e 	movw	r1, #558	; 0x22e
   1efd4:	4628      	mov	r0, r5
   1efd6:	f00d fabc 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1efda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1efde:	e095      	b.n	1f10c <uarte_nrfx_pins_configure+0x1a0>
    switch (port)
   1efe0:	096b      	lsrs	r3, r5, #5
   1efe2:	d01f      	beq.n	1f024 <uarte_nrfx_pins_configure+0xb8>
   1efe4:	2b01      	cmp	r3, #1
   1efe6:	d120      	bne.n	1f02a <uarte_nrfx_pins_configure+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
   1efe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1efec:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1eff0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1eff2:	f013 0f01 	tst.w	r3, #1
   1eff6:	d01a      	beq.n	1f02e <uarte_nrfx_pins_configure+0xc2>
    *p_pin = pin_number & 0x1F;
   1eff8:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1effc:	096d      	lsrs	r5, r5, #5
   1effe:	d024      	beq.n	1f04a <uarte_nrfx_pins_configure+0xde>
   1f000:	2d01      	cmp	r5, #1
   1f002:	d025      	beq.n	1f050 <uarte_nrfx_pins_configure+0xe4>
            NRFX_ASSERT(0);
   1f004:	4da9      	ldr	r5, [pc, #676]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f006:	f240 232e 	movw	r3, #558	; 0x22e
   1f00a:	462a      	mov	r2, r5
   1f00c:	49a8      	ldr	r1, [pc, #672]	; (1f2b0 <uarte_nrfx_pins_configure+0x344>)
   1f00e:	48a9      	ldr	r0, [pc, #676]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f010:	f00d f89a 	bl	2c148 <printk>
   1f014:	f240 212e 	movw	r1, #558	; 0x22e
   1f018:	4628      	mov	r0, r5
   1f01a:	f00d fa9a 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1f01e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1f022:	e016      	b.n	1f052 <uarte_nrfx_pins_configure+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
   1f024:	f04f 33ff 	mov.w	r3, #4294967295
   1f028:	e7e0      	b.n	1efec <uarte_nrfx_pins_configure+0x80>
    switch (port)
   1f02a:	2300      	movs	r3, #0
   1f02c:	e7de      	b.n	1efec <uarte_nrfx_pins_configure+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f02e:	4e9f      	ldr	r6, [pc, #636]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f030:	f240 2329 	movw	r3, #553	; 0x229
   1f034:	4632      	mov	r2, r6
   1f036:	49a0      	ldr	r1, [pc, #640]	; (1f2b8 <uarte_nrfx_pins_configure+0x34c>)
   1f038:	489e      	ldr	r0, [pc, #632]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f03a:	f00d f885 	bl	2c148 <printk>
   1f03e:	f240 2129 	movw	r1, #553	; 0x229
   1f042:	4630      	mov	r0, r6
   1f044:	f00d fa85 	bl	2c552 <assert_post_action>
   1f048:	e7d6      	b.n	1eff8 <uarte_nrfx_pins_configure+0x8c>
        case 0: return NRF_P0;
   1f04a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1f04e:	e000      	b.n	1f052 <uarte_nrfx_pins_configure+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f050:	4a9a      	ldr	r2, [pc, #616]	; (1f2bc <uarte_nrfx_pins_configure+0x350>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f052:	2301      	movs	r3, #1
   1f054:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1f056:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->tx_pin);
   1f05a:	68e5      	ldr	r5, [r4, #12]
    switch (port)
   1f05c:	096b      	lsrs	r3, r5, #5
   1f05e:	d01f      	beq.n	1f0a0 <uarte_nrfx_pins_configure+0x134>
   1f060:	2b01      	cmp	r3, #1
   1f062:	d120      	bne.n	1f0a6 <uarte_nrfx_pins_configure+0x13a>
            mask = P1_FEATURE_PINS_PRESENT;
   1f064:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1f068:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f06c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f06e:	f013 0f01 	tst.w	r3, #1
   1f072:	d01a      	beq.n	1f0aa <uarte_nrfx_pins_configure+0x13e>
    *p_pin = pin_number & 0x1F;
   1f074:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f078:	096d      	lsrs	r5, r5, #5
   1f07a:	d024      	beq.n	1f0c6 <uarte_nrfx_pins_configure+0x15a>
   1f07c:	2d01      	cmp	r5, #1
   1f07e:	d025      	beq.n	1f0cc <uarte_nrfx_pins_configure+0x160>
            NRFX_ASSERT(0);
   1f080:	4d8a      	ldr	r5, [pc, #552]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f082:	f240 232e 	movw	r3, #558	; 0x22e
   1f086:	462a      	mov	r2, r5
   1f088:	4989      	ldr	r1, [pc, #548]	; (1f2b0 <uarte_nrfx_pins_configure+0x344>)
   1f08a:	488a      	ldr	r0, [pc, #552]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f08c:	f00d f85c 	bl	2c148 <printk>
   1f090:	f240 212e 	movw	r1, #558	; 0x22e
   1f094:	4628      	mov	r0, r5
   1f096:	f00d fa5c 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1f09a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f09e:	e016      	b.n	1f0ce <uarte_nrfx_pins_configure+0x162>
            mask = P0_FEATURE_PINS_PRESENT;
   1f0a0:	f04f 33ff 	mov.w	r3, #4294967295
   1f0a4:	e7e0      	b.n	1f068 <uarte_nrfx_pins_configure+0xfc>
    switch (port)
   1f0a6:	2300      	movs	r3, #0
   1f0a8:	e7de      	b.n	1f068 <uarte_nrfx_pins_configure+0xfc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f0aa:	4e80      	ldr	r6, [pc, #512]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f0ac:	f240 2329 	movw	r3, #553	; 0x229
   1f0b0:	4632      	mov	r2, r6
   1f0b2:	4981      	ldr	r1, [pc, #516]	; (1f2b8 <uarte_nrfx_pins_configure+0x34c>)
   1f0b4:	487f      	ldr	r0, [pc, #508]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f0b6:	f00d f847 	bl	2c148 <printk>
   1f0ba:	f240 2129 	movw	r1, #553	; 0x229
   1f0be:	4630      	mov	r0, r6
   1f0c0:	f00d fa47 	bl	2c552 <assert_post_action>
   1f0c4:	e7d6      	b.n	1f074 <uarte_nrfx_pins_configure+0x108>
        case 0: return NRF_P0;
   1f0c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f0ca:	e000      	b.n	1f0ce <uarte_nrfx_pins_configure+0x162>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f0cc:	4b7b      	ldr	r3, [pc, #492]	; (1f2bc <uarte_nrfx_pins_configure+0x350>)
    reg->PIN_CNF[pin_number] = cnf;
   1f0ce:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1f0d2:	2203      	movs	r2, #3
   1f0d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1f0d8:	e751      	b.n	1ef7e <uarte_nrfx_pins_configure+0x12>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1f0da:	2600      	movs	r6, #0
   1f0dc:	e759      	b.n	1ef92 <uarte_nrfx_pins_configure+0x26>
            mask = P0_FEATURE_PINS_PRESENT;
   1f0de:	f04f 33ff 	mov.w	r3, #4294967295
   1f0e2:	e75e      	b.n	1efa2 <uarte_nrfx_pins_configure+0x36>
    switch (port)
   1f0e4:	2300      	movs	r3, #0
   1f0e6:	e75c      	b.n	1efa2 <uarte_nrfx_pins_configure+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f0e8:	4f70      	ldr	r7, [pc, #448]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f0ea:	f240 2329 	movw	r3, #553	; 0x229
   1f0ee:	463a      	mov	r2, r7
   1f0f0:	4971      	ldr	r1, [pc, #452]	; (1f2b8 <uarte_nrfx_pins_configure+0x34c>)
   1f0f2:	4870      	ldr	r0, [pc, #448]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f0f4:	f00d f828 	bl	2c148 <printk>
   1f0f8:	f240 2129 	movw	r1, #553	; 0x229
   1f0fc:	4638      	mov	r0, r7
   1f0fe:	f00d fa28 	bl	2c552 <assert_post_action>
   1f102:	e755      	b.n	1efb0 <uarte_nrfx_pins_configure+0x44>
        case 0: return NRF_P0;
   1f104:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f108:	e000      	b.n	1f10c <uarte_nrfx_pins_configure+0x1a0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f10a:	4b6c      	ldr	r3, [pc, #432]	; (1f2bc <uarte_nrfx_pins_configure+0x350>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f10c:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
   1f10e:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   1f112:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1f116:	6965      	ldr	r5, [r4, #20]
   1f118:	f1b5 3fff 	cmp.w	r5, #4294967295
   1f11c:	d130      	bne.n	1f180 <uarte_nrfx_pins_configure+0x214>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1f11e:	69a5      	ldr	r5, [r4, #24]
   1f120:	f1b5 3fff 	cmp.w	r5, #4294967295
   1f124:	f000 80d2 	beq.w	1f2cc <uarte_nrfx_pins_configure+0x360>
					   (cfg->cts_pull_up ?
   1f128:	7f63      	ldrb	r3, [r4, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   1f12a:	2b00      	cmp	r3, #0
   1f12c:	f000 80a5 	beq.w	1f27a <uarte_nrfx_pins_configure+0x30e>
   1f130:	2703      	movs	r7, #3
    switch (port)
   1f132:	096b      	lsrs	r3, r5, #5
   1f134:	f000 80a3 	beq.w	1f27e <uarte_nrfx_pins_configure+0x312>
   1f138:	2b01      	cmp	r3, #1
   1f13a:	f040 80a3 	bne.w	1f284 <uarte_nrfx_pins_configure+0x318>
            mask = P1_FEATURE_PINS_PRESENT;
   1f13e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1f142:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f146:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f148:	f013 0f01 	tst.w	r3, #1
   1f14c:	f000 809c 	beq.w	1f288 <uarte_nrfx_pins_configure+0x31c>
    *p_pin = pin_number & 0x1F;
   1f150:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f154:	096d      	lsrs	r5, r5, #5
   1f156:	f000 80a5 	beq.w	1f2a4 <uarte_nrfx_pins_configure+0x338>
   1f15a:	2d01      	cmp	r5, #1
   1f15c:	f000 80b0 	beq.w	1f2c0 <uarte_nrfx_pins_configure+0x354>
            NRFX_ASSERT(0);
   1f160:	4d52      	ldr	r5, [pc, #328]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f162:	f240 232e 	movw	r3, #558	; 0x22e
   1f166:	462a      	mov	r2, r5
   1f168:	4951      	ldr	r1, [pc, #324]	; (1f2b0 <uarte_nrfx_pins_configure+0x344>)
   1f16a:	4852      	ldr	r0, [pc, #328]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f16c:	f00c ffec 	bl	2c148 <printk>
   1f170:	f240 212e 	movw	r1, #558	; 0x22e
   1f174:	4628      	mov	r0, r5
   1f176:	f00d f9ec 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1f17a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1f17e:	e0a0      	b.n	1f2c2 <uarte_nrfx_pins_configure+0x356>
    switch (port)
   1f180:	096b      	lsrs	r3, r5, #5
   1f182:	d01f      	beq.n	1f1c4 <uarte_nrfx_pins_configure+0x258>
   1f184:	2b01      	cmp	r3, #1
   1f186:	d120      	bne.n	1f1ca <uarte_nrfx_pins_configure+0x25e>
            mask = P1_FEATURE_PINS_PRESENT;
   1f188:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1f18c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f190:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f192:	f013 0f01 	tst.w	r3, #1
   1f196:	d01a      	beq.n	1f1ce <uarte_nrfx_pins_configure+0x262>
    *p_pin = pin_number & 0x1F;
   1f198:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f19c:	096d      	lsrs	r5, r5, #5
   1f19e:	d024      	beq.n	1f1ea <uarte_nrfx_pins_configure+0x27e>
   1f1a0:	2d01      	cmp	r5, #1
   1f1a2:	d025      	beq.n	1f1f0 <uarte_nrfx_pins_configure+0x284>
            NRFX_ASSERT(0);
   1f1a4:	4d41      	ldr	r5, [pc, #260]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f1a6:	f240 232e 	movw	r3, #558	; 0x22e
   1f1aa:	462a      	mov	r2, r5
   1f1ac:	4940      	ldr	r1, [pc, #256]	; (1f2b0 <uarte_nrfx_pins_configure+0x344>)
   1f1ae:	4841      	ldr	r0, [pc, #260]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f1b0:	f00c ffca 	bl	2c148 <printk>
   1f1b4:	f240 212e 	movw	r1, #558	; 0x22e
   1f1b8:	4628      	mov	r0, r5
   1f1ba:	f00d f9ca 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1f1be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1f1c2:	e016      	b.n	1f1f2 <uarte_nrfx_pins_configure+0x286>
            mask = P0_FEATURE_PINS_PRESENT;
   1f1c4:	f04f 33ff 	mov.w	r3, #4294967295
   1f1c8:	e7e0      	b.n	1f18c <uarte_nrfx_pins_configure+0x220>
    switch (port)
   1f1ca:	2300      	movs	r3, #0
   1f1cc:	e7de      	b.n	1f18c <uarte_nrfx_pins_configure+0x220>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f1ce:	4e37      	ldr	r6, [pc, #220]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f1d0:	f240 2329 	movw	r3, #553	; 0x229
   1f1d4:	4632      	mov	r2, r6
   1f1d6:	4938      	ldr	r1, [pc, #224]	; (1f2b8 <uarte_nrfx_pins_configure+0x34c>)
   1f1d8:	4836      	ldr	r0, [pc, #216]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f1da:	f00c ffb5 	bl	2c148 <printk>
   1f1de:	f240 2129 	movw	r1, #553	; 0x229
   1f1e2:	4630      	mov	r0, r6
   1f1e4:	f00d f9b5 	bl	2c552 <assert_post_action>
   1f1e8:	e7d6      	b.n	1f198 <uarte_nrfx_pins_configure+0x22c>
        case 0: return NRF_P0;
   1f1ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1f1ee:	e000      	b.n	1f1f2 <uarte_nrfx_pins_configure+0x286>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f1f0:	4a32      	ldr	r2, [pc, #200]	; (1f2bc <uarte_nrfx_pins_configure+0x350>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f1f2:	2301      	movs	r3, #1
   1f1f4:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1f1f6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->rts_pin);
   1f1fa:	6965      	ldr	r5, [r4, #20]
    switch (port)
   1f1fc:	096b      	lsrs	r3, r5, #5
   1f1fe:	d01f      	beq.n	1f240 <uarte_nrfx_pins_configure+0x2d4>
   1f200:	2b01      	cmp	r3, #1
   1f202:	d120      	bne.n	1f246 <uarte_nrfx_pins_configure+0x2da>
            mask = P1_FEATURE_PINS_PRESENT;
   1f204:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1f208:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f20c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f20e:	f013 0f01 	tst.w	r3, #1
   1f212:	d01a      	beq.n	1f24a <uarte_nrfx_pins_configure+0x2de>
    *p_pin = pin_number & 0x1F;
   1f214:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f218:	096d      	lsrs	r5, r5, #5
   1f21a:	d024      	beq.n	1f266 <uarte_nrfx_pins_configure+0x2fa>
   1f21c:	2d01      	cmp	r5, #1
   1f21e:	d025      	beq.n	1f26c <uarte_nrfx_pins_configure+0x300>
            NRFX_ASSERT(0);
   1f220:	4d22      	ldr	r5, [pc, #136]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f222:	f240 232e 	movw	r3, #558	; 0x22e
   1f226:	462a      	mov	r2, r5
   1f228:	4921      	ldr	r1, [pc, #132]	; (1f2b0 <uarte_nrfx_pins_configure+0x344>)
   1f22a:	4822      	ldr	r0, [pc, #136]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f22c:	f00c ff8c 	bl	2c148 <printk>
   1f230:	f240 212e 	movw	r1, #558	; 0x22e
   1f234:	4628      	mov	r0, r5
   1f236:	f00d f98c 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1f23a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f23e:	e016      	b.n	1f26e <uarte_nrfx_pins_configure+0x302>
            mask = P0_FEATURE_PINS_PRESENT;
   1f240:	f04f 33ff 	mov.w	r3, #4294967295
   1f244:	e7e0      	b.n	1f208 <uarte_nrfx_pins_configure+0x29c>
    switch (port)
   1f246:	2300      	movs	r3, #0
   1f248:	e7de      	b.n	1f208 <uarte_nrfx_pins_configure+0x29c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f24a:	4e18      	ldr	r6, [pc, #96]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f24c:	f240 2329 	movw	r3, #553	; 0x229
   1f250:	4632      	mov	r2, r6
   1f252:	4919      	ldr	r1, [pc, #100]	; (1f2b8 <uarte_nrfx_pins_configure+0x34c>)
   1f254:	4817      	ldr	r0, [pc, #92]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f256:	f00c ff77 	bl	2c148 <printk>
   1f25a:	f240 2129 	movw	r1, #553	; 0x229
   1f25e:	4630      	mov	r0, r6
   1f260:	f00d f977 	bl	2c552 <assert_post_action>
   1f264:	e7d6      	b.n	1f214 <uarte_nrfx_pins_configure+0x2a8>
        case 0: return NRF_P0;
   1f266:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f26a:	e000      	b.n	1f26e <uarte_nrfx_pins_configure+0x302>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f26c:	4b13      	ldr	r3, [pc, #76]	; (1f2bc <uarte_nrfx_pins_configure+0x350>)
    reg->PIN_CNF[pin_number] = cnf;
   1f26e:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1f272:	2203      	movs	r2, #3
   1f274:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1f278:	e751      	b.n	1f11e <uarte_nrfx_pins_configure+0x1b2>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1f27a:	2700      	movs	r7, #0
   1f27c:	e759      	b.n	1f132 <uarte_nrfx_pins_configure+0x1c6>
            mask = P0_FEATURE_PINS_PRESENT;
   1f27e:	f04f 33ff 	mov.w	r3, #4294967295
   1f282:	e75e      	b.n	1f142 <uarte_nrfx_pins_configure+0x1d6>
    switch (port)
   1f284:	2300      	movs	r3, #0
   1f286:	e75c      	b.n	1f142 <uarte_nrfx_pins_configure+0x1d6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f288:	4e08      	ldr	r6, [pc, #32]	; (1f2ac <uarte_nrfx_pins_configure+0x340>)
   1f28a:	f240 2329 	movw	r3, #553	; 0x229
   1f28e:	4632      	mov	r2, r6
   1f290:	4909      	ldr	r1, [pc, #36]	; (1f2b8 <uarte_nrfx_pins_configure+0x34c>)
   1f292:	4808      	ldr	r0, [pc, #32]	; (1f2b4 <uarte_nrfx_pins_configure+0x348>)
   1f294:	f00c ff58 	bl	2c148 <printk>
   1f298:	f240 2129 	movw	r1, #553	; 0x229
   1f29c:	4630      	mov	r0, r6
   1f29e:	f00d f958 	bl	2c552 <assert_post_action>
   1f2a2:	e755      	b.n	1f150 <uarte_nrfx_pins_configure+0x1e4>
        case 0: return NRF_P0;
   1f2a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1f2a8:	e00b      	b.n	1f2c2 <uarte_nrfx_pins_configure+0x356>
   1f2aa:	bf00      	nop
   1f2ac:	000321d8 	.word	0x000321d8
   1f2b0:	000364dc 	.word	0x000364dc
   1f2b4:	00031df4 	.word	0x00031df4
   1f2b8:	0003220c 	.word	0x0003220c
   1f2bc:	50000300 	.word	0x50000300
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f2c0:	4a93      	ldr	r2, [pc, #588]	; (1f510 <uarte_nrfx_pins_configure+0x5a4>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f2c2:	00bf      	lsls	r7, r7, #2
    reg->PIN_CNF[pin_number] = cnf;
   1f2c4:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1f2c8:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1f2cc:	6823      	ldr	r3, [r4, #0]
   1f2ce:	68e1      	ldr	r1, [r4, #12]
   1f2d0:	6922      	ldr	r2, [r4, #16]
    p_reg->PSEL.TXD = pseltxd;
   1f2d2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1f2d6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   1f2da:	6823      	ldr	r3, [r4, #0]
   1f2dc:	6961      	ldr	r1, [r4, #20]
   1f2de:	69a2      	ldr	r2, [r4, #24]
    p_reg->PSEL.RTS = pselrts;
   1f2e0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1f2e4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1f2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1f2ea:	68e5      	ldr	r5, [r4, #12]
   1f2ec:	f1b5 3fff 	cmp.w	r5, #4294967295
   1f2f0:	d133      	bne.n	1f35a <uarte_nrfx_pins_configure+0x3ee>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1f2f2:	6925      	ldr	r5, [r4, #16]
   1f2f4:	f1b5 3fff 	cmp.w	r5, #4294967295
   1f2f8:	d16e      	bne.n	1f3d8 <uarte_nrfx_pins_configure+0x46c>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1f2fa:	6965      	ldr	r5, [r4, #20]
   1f2fc:	f1b5 3fff 	cmp.w	r5, #4294967295
   1f300:	f040 80a9 	bne.w	1f456 <uarte_nrfx_pins_configure+0x4ea>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1f304:	69a5      	ldr	r5, [r4, #24]
   1f306:	f1b5 3fff 	cmp.w	r5, #4294967295
   1f30a:	d0df      	beq.n	1f2cc <uarte_nrfx_pins_configure+0x360>
    switch (port)
   1f30c:	096b      	lsrs	r3, r5, #5
   1f30e:	f000 80e1 	beq.w	1f4d4 <uarte_nrfx_pins_configure+0x568>
   1f312:	2b01      	cmp	r3, #1
   1f314:	f040 80e1 	bne.w	1f4da <uarte_nrfx_pins_configure+0x56e>
            mask = P1_FEATURE_PINS_PRESENT;
   1f318:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1f31c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f320:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f322:	f013 0f01 	tst.w	r3, #1
   1f326:	f000 80da 	beq.w	1f4de <uarte_nrfx_pins_configure+0x572>
    *p_pin = pin_number & 0x1F;
   1f32a:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f32e:	096d      	lsrs	r5, r5, #5
   1f330:	f000 80e3 	beq.w	1f4fa <uarte_nrfx_pins_configure+0x58e>
   1f334:	2d01      	cmp	r5, #1
   1f336:	f000 80e3 	beq.w	1f500 <uarte_nrfx_pins_configure+0x594>
            NRFX_ASSERT(0);
   1f33a:	4d76      	ldr	r5, [pc, #472]	; (1f514 <uarte_nrfx_pins_configure+0x5a8>)
   1f33c:	f240 232e 	movw	r3, #558	; 0x22e
   1f340:	462a      	mov	r2, r5
   1f342:	4975      	ldr	r1, [pc, #468]	; (1f518 <uarte_nrfx_pins_configure+0x5ac>)
   1f344:	4875      	ldr	r0, [pc, #468]	; (1f51c <uarte_nrfx_pins_configure+0x5b0>)
   1f346:	f00c feff 	bl	2c148 <printk>
   1f34a:	f240 212e 	movw	r1, #558	; 0x22e
   1f34e:	4628      	mov	r0, r5
   1f350:	f00d f8ff 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1f354:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f358:	e0d3      	b.n	1f502 <uarte_nrfx_pins_configure+0x596>
    switch (port)
   1f35a:	096b      	lsrs	r3, r5, #5
   1f35c:	d01f      	beq.n	1f39e <uarte_nrfx_pins_configure+0x432>
   1f35e:	2b01      	cmp	r3, #1
   1f360:	d120      	bne.n	1f3a4 <uarte_nrfx_pins_configure+0x438>
            mask = P1_FEATURE_PINS_PRESENT;
   1f362:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1f366:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f36a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f36c:	f013 0f01 	tst.w	r3, #1
   1f370:	d01a      	beq.n	1f3a8 <uarte_nrfx_pins_configure+0x43c>
    *p_pin = pin_number & 0x1F;
   1f372:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f376:	096d      	lsrs	r5, r5, #5
   1f378:	d024      	beq.n	1f3c4 <uarte_nrfx_pins_configure+0x458>
   1f37a:	2d01      	cmp	r5, #1
   1f37c:	d025      	beq.n	1f3ca <uarte_nrfx_pins_configure+0x45e>
            NRFX_ASSERT(0);
   1f37e:	4d65      	ldr	r5, [pc, #404]	; (1f514 <uarte_nrfx_pins_configure+0x5a8>)
   1f380:	f240 232e 	movw	r3, #558	; 0x22e
   1f384:	462a      	mov	r2, r5
   1f386:	4964      	ldr	r1, [pc, #400]	; (1f518 <uarte_nrfx_pins_configure+0x5ac>)
   1f388:	4864      	ldr	r0, [pc, #400]	; (1f51c <uarte_nrfx_pins_configure+0x5b0>)
   1f38a:	f00c fedd 	bl	2c148 <printk>
   1f38e:	f240 212e 	movw	r1, #558	; 0x22e
   1f392:	4628      	mov	r0, r5
   1f394:	f00d f8dd 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1f398:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f39c:	e016      	b.n	1f3cc <uarte_nrfx_pins_configure+0x460>
            mask = P0_FEATURE_PINS_PRESENT;
   1f39e:	f04f 33ff 	mov.w	r3, #4294967295
   1f3a2:	e7e0      	b.n	1f366 <uarte_nrfx_pins_configure+0x3fa>
    switch (port)
   1f3a4:	2300      	movs	r3, #0
   1f3a6:	e7de      	b.n	1f366 <uarte_nrfx_pins_configure+0x3fa>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f3a8:	4e5a      	ldr	r6, [pc, #360]	; (1f514 <uarte_nrfx_pins_configure+0x5a8>)
   1f3aa:	f240 2329 	movw	r3, #553	; 0x229
   1f3ae:	4632      	mov	r2, r6
   1f3b0:	495b      	ldr	r1, [pc, #364]	; (1f520 <uarte_nrfx_pins_configure+0x5b4>)
   1f3b2:	485a      	ldr	r0, [pc, #360]	; (1f51c <uarte_nrfx_pins_configure+0x5b0>)
   1f3b4:	f00c fec8 	bl	2c148 <printk>
   1f3b8:	f240 2129 	movw	r1, #553	; 0x229
   1f3bc:	4630      	mov	r0, r6
   1f3be:	f00d f8c8 	bl	2c552 <assert_post_action>
   1f3c2:	e7d6      	b.n	1f372 <uarte_nrfx_pins_configure+0x406>
        case 0: return NRF_P0;
   1f3c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f3c8:	e000      	b.n	1f3cc <uarte_nrfx_pins_configure+0x460>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f3ca:	4b51      	ldr	r3, [pc, #324]	; (1f510 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
   1f3cc:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1f3d0:	2202      	movs	r2, #2
   1f3d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1f3d6:	e78c      	b.n	1f2f2 <uarte_nrfx_pins_configure+0x386>
    switch (port)
   1f3d8:	096b      	lsrs	r3, r5, #5
   1f3da:	d01f      	beq.n	1f41c <uarte_nrfx_pins_configure+0x4b0>
   1f3dc:	2b01      	cmp	r3, #1
   1f3de:	d120      	bne.n	1f422 <uarte_nrfx_pins_configure+0x4b6>
            mask = P1_FEATURE_PINS_PRESENT;
   1f3e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1f3e4:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f3e8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f3ea:	f013 0f01 	tst.w	r3, #1
   1f3ee:	d01a      	beq.n	1f426 <uarte_nrfx_pins_configure+0x4ba>
    *p_pin = pin_number & 0x1F;
   1f3f0:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f3f4:	096d      	lsrs	r5, r5, #5
   1f3f6:	d024      	beq.n	1f442 <uarte_nrfx_pins_configure+0x4d6>
   1f3f8:	2d01      	cmp	r5, #1
   1f3fa:	d025      	beq.n	1f448 <uarte_nrfx_pins_configure+0x4dc>
            NRFX_ASSERT(0);
   1f3fc:	4d45      	ldr	r5, [pc, #276]	; (1f514 <uarte_nrfx_pins_configure+0x5a8>)
   1f3fe:	f240 232e 	movw	r3, #558	; 0x22e
   1f402:	462a      	mov	r2, r5
   1f404:	4944      	ldr	r1, [pc, #272]	; (1f518 <uarte_nrfx_pins_configure+0x5ac>)
   1f406:	4845      	ldr	r0, [pc, #276]	; (1f51c <uarte_nrfx_pins_configure+0x5b0>)
   1f408:	f00c fe9e 	bl	2c148 <printk>
   1f40c:	f240 212e 	movw	r1, #558	; 0x22e
   1f410:	4628      	mov	r0, r5
   1f412:	f00d f89e 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1f416:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f41a:	e016      	b.n	1f44a <uarte_nrfx_pins_configure+0x4de>
            mask = P0_FEATURE_PINS_PRESENT;
   1f41c:	f04f 33ff 	mov.w	r3, #4294967295
   1f420:	e7e0      	b.n	1f3e4 <uarte_nrfx_pins_configure+0x478>
    switch (port)
   1f422:	2300      	movs	r3, #0
   1f424:	e7de      	b.n	1f3e4 <uarte_nrfx_pins_configure+0x478>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f426:	4e3b      	ldr	r6, [pc, #236]	; (1f514 <uarte_nrfx_pins_configure+0x5a8>)
   1f428:	f240 2329 	movw	r3, #553	; 0x229
   1f42c:	4632      	mov	r2, r6
   1f42e:	493c      	ldr	r1, [pc, #240]	; (1f520 <uarte_nrfx_pins_configure+0x5b4>)
   1f430:	483a      	ldr	r0, [pc, #232]	; (1f51c <uarte_nrfx_pins_configure+0x5b0>)
   1f432:	f00c fe89 	bl	2c148 <printk>
   1f436:	f240 2129 	movw	r1, #553	; 0x229
   1f43a:	4630      	mov	r0, r6
   1f43c:	f00d f889 	bl	2c552 <assert_post_action>
   1f440:	e7d6      	b.n	1f3f0 <uarte_nrfx_pins_configure+0x484>
        case 0: return NRF_P0;
   1f442:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f446:	e000      	b.n	1f44a <uarte_nrfx_pins_configure+0x4de>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f448:	4b31      	ldr	r3, [pc, #196]	; (1f510 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
   1f44a:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1f44e:	2202      	movs	r2, #2
   1f450:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1f454:	e751      	b.n	1f2fa <uarte_nrfx_pins_configure+0x38e>
    switch (port)
   1f456:	096b      	lsrs	r3, r5, #5
   1f458:	d01f      	beq.n	1f49a <uarte_nrfx_pins_configure+0x52e>
   1f45a:	2b01      	cmp	r3, #1
   1f45c:	d120      	bne.n	1f4a0 <uarte_nrfx_pins_configure+0x534>
            mask = P1_FEATURE_PINS_PRESENT;
   1f45e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1f462:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f466:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f468:	f013 0f01 	tst.w	r3, #1
   1f46c:	d01a      	beq.n	1f4a4 <uarte_nrfx_pins_configure+0x538>
    *p_pin = pin_number & 0x1F;
   1f46e:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f472:	096d      	lsrs	r5, r5, #5
   1f474:	d024      	beq.n	1f4c0 <uarte_nrfx_pins_configure+0x554>
   1f476:	2d01      	cmp	r5, #1
   1f478:	d025      	beq.n	1f4c6 <uarte_nrfx_pins_configure+0x55a>
            NRFX_ASSERT(0);
   1f47a:	4d26      	ldr	r5, [pc, #152]	; (1f514 <uarte_nrfx_pins_configure+0x5a8>)
   1f47c:	f240 232e 	movw	r3, #558	; 0x22e
   1f480:	462a      	mov	r2, r5
   1f482:	4925      	ldr	r1, [pc, #148]	; (1f518 <uarte_nrfx_pins_configure+0x5ac>)
   1f484:	4825      	ldr	r0, [pc, #148]	; (1f51c <uarte_nrfx_pins_configure+0x5b0>)
   1f486:	f00c fe5f 	bl	2c148 <printk>
   1f48a:	f240 212e 	movw	r1, #558	; 0x22e
   1f48e:	4628      	mov	r0, r5
   1f490:	f00d f85f 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   1f494:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f498:	e016      	b.n	1f4c8 <uarte_nrfx_pins_configure+0x55c>
            mask = P0_FEATURE_PINS_PRESENT;
   1f49a:	f04f 33ff 	mov.w	r3, #4294967295
   1f49e:	e7e0      	b.n	1f462 <uarte_nrfx_pins_configure+0x4f6>
    switch (port)
   1f4a0:	2300      	movs	r3, #0
   1f4a2:	e7de      	b.n	1f462 <uarte_nrfx_pins_configure+0x4f6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f4a4:	4e1b      	ldr	r6, [pc, #108]	; (1f514 <uarte_nrfx_pins_configure+0x5a8>)
   1f4a6:	f240 2329 	movw	r3, #553	; 0x229
   1f4aa:	4632      	mov	r2, r6
   1f4ac:	491c      	ldr	r1, [pc, #112]	; (1f520 <uarte_nrfx_pins_configure+0x5b4>)
   1f4ae:	481b      	ldr	r0, [pc, #108]	; (1f51c <uarte_nrfx_pins_configure+0x5b0>)
   1f4b0:	f00c fe4a 	bl	2c148 <printk>
   1f4b4:	f240 2129 	movw	r1, #553	; 0x229
   1f4b8:	4630      	mov	r0, r6
   1f4ba:	f00d f84a 	bl	2c552 <assert_post_action>
   1f4be:	e7d6      	b.n	1f46e <uarte_nrfx_pins_configure+0x502>
        case 0: return NRF_P0;
   1f4c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f4c4:	e000      	b.n	1f4c8 <uarte_nrfx_pins_configure+0x55c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f4c6:	4b12      	ldr	r3, [pc, #72]	; (1f510 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
   1f4c8:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1f4cc:	2202      	movs	r2, #2
   1f4ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1f4d2:	e717      	b.n	1f304 <uarte_nrfx_pins_configure+0x398>
            mask = P0_FEATURE_PINS_PRESENT;
   1f4d4:	f04f 33ff 	mov.w	r3, #4294967295
   1f4d8:	e720      	b.n	1f31c <uarte_nrfx_pins_configure+0x3b0>
    switch (port)
   1f4da:	2300      	movs	r3, #0
   1f4dc:	e71e      	b.n	1f31c <uarte_nrfx_pins_configure+0x3b0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f4de:	4e0d      	ldr	r6, [pc, #52]	; (1f514 <uarte_nrfx_pins_configure+0x5a8>)
   1f4e0:	f240 2329 	movw	r3, #553	; 0x229
   1f4e4:	4632      	mov	r2, r6
   1f4e6:	490e      	ldr	r1, [pc, #56]	; (1f520 <uarte_nrfx_pins_configure+0x5b4>)
   1f4e8:	480c      	ldr	r0, [pc, #48]	; (1f51c <uarte_nrfx_pins_configure+0x5b0>)
   1f4ea:	f00c fe2d 	bl	2c148 <printk>
   1f4ee:	f240 2129 	movw	r1, #553	; 0x229
   1f4f2:	4630      	mov	r0, r6
   1f4f4:	f00d f82d 	bl	2c552 <assert_post_action>
   1f4f8:	e717      	b.n	1f32a <uarte_nrfx_pins_configure+0x3be>
        case 0: return NRF_P0;
   1f4fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f4fe:	e000      	b.n	1f502 <uarte_nrfx_pins_configure+0x596>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f500:	4b03      	ldr	r3, [pc, #12]	; (1f510 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
   1f502:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1f506:	2202      	movs	r2, #2
   1f508:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1f50c:	e6de      	b.n	1f2cc <uarte_nrfx_pins_configure+0x360>
   1f50e:	bf00      	nop
   1f510:	50000300 	.word	0x50000300
   1f514:	000321d8 	.word	0x000321d8
   1f518:	000364dc 	.word	0x000364dc
   1f51c:	00031df4 	.word	0x00031df4
   1f520:	0003220c 	.word	0x0003220c

0001f524 <random_byte_get>:
	__asm__ volatile(
   1f524:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f528:	f3ef 8211 	mrs	r2, BASEPRI
   1f52c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f530:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f534:	4b09      	ldr	r3, [pc, #36]	; (1f55c <random_byte_get+0x38>)
   1f536:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1f538:	b16b      	cbz	r3, 1f556 <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1f53a:	4b09      	ldr	r3, [pc, #36]	; (1f560 <random_byte_get+0x3c>)
   1f53c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1f540:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f542:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1f546:	2100      	movs	r1, #0
   1f548:	6019      	str	r1, [r3, #0]
   1f54a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1f54c:	f382 8811 	msr	BASEPRI, r2
   1f550:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1f554:	4770      	bx	lr
	int retval = -EAGAIN;
   1f556:	f06f 000a 	mvn.w	r0, #10
   1f55a:	e7f7      	b.n	1f54c <random_byte_get+0x28>
   1f55c:	4000d100 	.word	0x4000d100
   1f560:	4000d000 	.word	0x4000d000

0001f564 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1f564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f568:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1f56a:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   1f56e:	78c5      	ldrb	r5, [r0, #3]
   1f570:	462f      	mov	r7, r5
	__asm__ volatile(
   1f572:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f576:	f3ef 8811 	mrs	r8, BASEPRI
   1f57a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f57e:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1f582:	7800      	ldrb	r0, [r0, #0]
   1f584:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1f586:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1f58a:	ebac 0c00 	sub.w	ip, ip, r0
   1f58e:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   1f592:	4562      	cmp	r2, ip
   1f594:	d901      	bls.n	1f59a <rng_pool_get+0x36>
		len = available;
   1f596:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1f59a:	1883      	adds	r3, r0, r2
   1f59c:	402b      	ands	r3, r5
   1f59e:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   1f5a0:	f388 8811 	msr	BASEPRI, r8
   1f5a4:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1f5a8:	460b      	mov	r3, r1
}
   1f5aa:	e006      	b.n	1f5ba <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1f5ac:	1932      	adds	r2, r6, r4
   1f5ae:	7952      	ldrb	r2, [r2, #5]
   1f5b0:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   1f5b4:	3401      	adds	r4, #1
   1f5b6:	403c      	ands	r4, r7
	while (likely(len--)) {
   1f5b8:	462a      	mov	r2, r5
   1f5ba:	1e55      	subs	r5, r2, #1
   1f5bc:	b2ad      	uxth	r5, r5
   1f5be:	2a00      	cmp	r2, #0
   1f5c0:	d1f4      	bne.n	1f5ac <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1f5c2:	4570      	cmp	r0, lr
   1f5c4:	d10d      	bne.n	1f5e2 <rng_pool_get+0x7e>
	__asm__ volatile(
   1f5c6:	f04f 0040 	mov.w	r0, #64	; 0x40
   1f5ca:	f3ef 8211 	mrs	r2, BASEPRI
   1f5ce:	f380 8812 	msr	BASEPRI_MAX, r0
   1f5d2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1f5d6:	7830      	ldrb	r0, [r6, #0]
   1f5d8:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   1f5da:	f382 8811 	msr	BASEPRI, r2
   1f5de:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1f5e2:	1a5b      	subs	r3, r3, r1
   1f5e4:	b298      	uxth	r0, r3
	available = available - len;
   1f5e6:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   1f5ea:	7933      	ldrb	r3, [r6, #4]
   1f5ec:	4563      	cmp	r3, ip
   1f5ee:	d302      	bcc.n	1f5f6 <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f5f0:	4b02      	ldr	r3, [pc, #8]	; (1f5fc <rng_pool_get+0x98>)
   1f5f2:	2201      	movs	r2, #1
   1f5f4:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1f5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f5fa:	bf00      	nop
   1f5fc:	4000d000 	.word	0x4000d000

0001f600 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1f600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f602:	460e      	mov	r6, r1
   1f604:	4614      	mov	r4, r2
   1f606:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f608:	6902      	ldr	r2, [r0, #16]
   1f60a:	4b2d      	ldr	r3, [pc, #180]	; (1f6c0 <entropy_nrf5_get_entropy_isr+0xc0>)
   1f60c:	429a      	cmp	r2, r3
   1f60e:	d00c      	beq.n	1f62a <entropy_nrf5_get_entropy_isr+0x2a>
   1f610:	4f2c      	ldr	r7, [pc, #176]	; (1f6c4 <entropy_nrf5_get_entropy_isr+0xc4>)
   1f612:	f44f 7384 	mov.w	r3, #264	; 0x108
   1f616:	463a      	mov	r2, r7
   1f618:	492b      	ldr	r1, [pc, #172]	; (1f6c8 <entropy_nrf5_get_entropy_isr+0xc8>)
   1f61a:	482c      	ldr	r0, [pc, #176]	; (1f6cc <entropy_nrf5_get_entropy_isr+0xcc>)
   1f61c:	f00c fd94 	bl	2c148 <printk>
   1f620:	f44f 7184 	mov.w	r1, #264	; 0x108
   1f624:	4638      	mov	r0, r7
   1f626:	f00c ff94 	bl	2c552 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1f62a:	f015 0f01 	tst.w	r5, #1
   1f62e:	d105      	bne.n	1f63c <entropy_nrf5_get_entropy_isr+0x3c>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1f630:	4622      	mov	r2, r4
   1f632:	4631      	mov	r1, r6
   1f634:	4826      	ldr	r0, [pc, #152]	; (1f6d0 <entropy_nrf5_get_entropy_isr+0xd0>)
   1f636:	f7ff ff95 	bl	1f564 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1f63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   1f63c:	b90c      	cbnz	r4, 1f642 <entropy_nrf5_get_entropy_isr+0x42>
	return cnt;
   1f63e:	4620      	mov	r0, r4
   1f640:	e7fb      	b.n	1f63a <entropy_nrf5_get_entropy_isr+0x3a>
	__asm__ volatile(
   1f642:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f646:	f3ef 8511 	mrs	r5, BASEPRI
   1f64a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f64e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1f652:	200d      	movs	r0, #13
   1f654:	f7f5 fd7a 	bl	1514c <arch_irq_is_enabled>
   1f658:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1f65a:	200d      	movs	r0, #13
   1f65c:	f7f5 fd62 	bl	15124 <arch_irq_disable>
	__asm__ volatile(
   1f660:	f385 8811 	msr	BASEPRI, r5
   1f664:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f668:	4b1a      	ldr	r3, [pc, #104]	; (1f6d4 <entropy_nrf5_get_entropy_isr+0xd4>)
   1f66a:	2200      	movs	r2, #0
   1f66c:	601a      	str	r2, [r3, #0]
   1f66e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f670:	4b19      	ldr	r3, [pc, #100]	; (1f6d8 <entropy_nrf5_get_entropy_isr+0xd8>)
   1f672:	2201      	movs	r2, #1
   1f674:	601a      	str	r2, [r3, #0]
   1f676:	4b19      	ldr	r3, [pc, #100]	; (1f6dc <entropy_nrf5_get_entropy_isr+0xdc>)
   1f678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1f67c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1f680:	4625      	mov	r5, r4
   1f682:	e004      	b.n	1f68e <entropy_nrf5_get_entropy_isr+0x8e>
   1f684:	f3bf 8f4f 	dsb	sy
				__WFE();
   1f688:	bf20      	wfe
				__SEV();
   1f68a:	bf40      	sev
				__WFE();
   1f68c:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f68e:	4b11      	ldr	r3, [pc, #68]	; (1f6d4 <entropy_nrf5_get_entropy_isr+0xd4>)
   1f690:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1f692:	2b00      	cmp	r3, #0
   1f694:	d0f6      	beq.n	1f684 <entropy_nrf5_get_entropy_isr+0x84>
			byte = random_byte_get();
   1f696:	f7ff ff45 	bl	1f524 <random_byte_get>
   1f69a:	4b10      	ldr	r3, [pc, #64]	; (1f6dc <entropy_nrf5_get_entropy_isr+0xdc>)
   1f69c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1f6a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1f6a4:	2800      	cmp	r0, #0
   1f6a6:	db02      	blt.n	1f6ae <entropy_nrf5_get_entropy_isr+0xae>
			buf[--len] = byte;
   1f6a8:	3d01      	subs	r5, #1
   1f6aa:	b2ad      	uxth	r5, r5
   1f6ac:	5570      	strb	r0, [r6, r5]
		} while (len);
   1f6ae:	2d00      	cmp	r5, #0
   1f6b0:	d1ed      	bne.n	1f68e <entropy_nrf5_get_entropy_isr+0x8e>
		if (irq_enabled) {
   1f6b2:	2f00      	cmp	r7, #0
   1f6b4:	d0c3      	beq.n	1f63e <entropy_nrf5_get_entropy_isr+0x3e>
			irq_enable(IRQN);
   1f6b6:	200d      	movs	r0, #13
   1f6b8:	f7f5 fd24 	bl	15104 <arch_irq_enable>
   1f6bc:	e7bf      	b.n	1f63e <entropy_nrf5_get_entropy_isr+0x3e>
   1f6be:	bf00      	nop
   1f6c0:	20002ef0 	.word	0x20002ef0
   1f6c4:	000352c0 	.word	0x000352c0
   1f6c8:	000352f4 	.word	0x000352f4
   1f6cc:	00031df4 	.word	0x00031df4
   1f6d0:	20002f20 	.word	0x20002f20
   1f6d4:	4000d100 	.word	0x4000d100
   1f6d8:	4000d000 	.word	0x4000d000
   1f6dc:	e000e100 	.word	0xe000e100

0001f6e0 <isr>:
{
   1f6e0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1f6e2:	f7ff ff1f 	bl	1f524 <random_byte_get>
	if (byte < 0) {
   1f6e6:	2800      	cmp	r0, #0
   1f6e8:	db06      	blt.n	1f6f8 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1f6ea:	b2c4      	uxtb	r4, r0
   1f6ec:	4621      	mov	r1, r4
   1f6ee:	480a      	ldr	r0, [pc, #40]	; (1f718 <isr+0x38>)
   1f6f0:	f010 f9d1 	bl	2fa96 <rng_pool_put>
	if (ret < 0) {
   1f6f4:	2800      	cmp	r0, #0
   1f6f6:	db00      	blt.n	1f6fa <isr+0x1a>
}
   1f6f8:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1f6fa:	4621      	mov	r1, r4
   1f6fc:	4807      	ldr	r0, [pc, #28]	; (1f71c <isr+0x3c>)
   1f6fe:	f010 f9ca 	bl	2fa96 <rng_pool_put>
		if (ret < 0) {
   1f702:	2800      	cmp	r0, #0
   1f704:	db03      	blt.n	1f70e <isr+0x2e>
	z_impl_k_sem_give(sem);
   1f706:	4806      	ldr	r0, [pc, #24]	; (1f720 <isr+0x40>)
   1f708:	f004 ffe2 	bl	246d0 <z_impl_k_sem_give>
}
   1f70c:	e7f4      	b.n	1f6f8 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f70e:	4b05      	ldr	r3, [pc, #20]	; (1f724 <isr+0x44>)
   1f710:	2201      	movs	r2, #1
   1f712:	601a      	str	r2, [r3, #0]
}
   1f714:	e7f7      	b.n	1f706 <isr+0x26>
   1f716:	bf00      	nop
   1f718:	20002f20 	.word	0x20002f20
   1f71c:	20002f35 	.word	0x20002f35
   1f720:	20002f08 	.word	0x20002f08
   1f724:	4000d004 	.word	0x4000d004

0001f728 <entropy_nrf5_get_entropy>:
{
   1f728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f72a:	460f      	mov	r7, r1
   1f72c:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f72e:	6902      	ldr	r2, [r0, #16]
   1f730:	4b18      	ldr	r3, [pc, #96]	; (1f794 <entropy_nrf5_get_entropy+0x6c>)
   1f732:	429a      	cmp	r2, r3
   1f734:	d00e      	beq.n	1f754 <entropy_nrf5_get_entropy+0x2c>
   1f736:	4d18      	ldr	r5, [pc, #96]	; (1f798 <entropy_nrf5_get_entropy+0x70>)
   1f738:	23ea      	movs	r3, #234	; 0xea
   1f73a:	462a      	mov	r2, r5
   1f73c:	4917      	ldr	r1, [pc, #92]	; (1f79c <entropy_nrf5_get_entropy+0x74>)
   1f73e:	4818      	ldr	r0, [pc, #96]	; (1f7a0 <entropy_nrf5_get_entropy+0x78>)
   1f740:	f00c fd02 	bl	2c148 <printk>
   1f744:	21ea      	movs	r1, #234	; 0xea
   1f746:	4628      	mov	r0, r5
   1f748:	f00c ff03 	bl	2c552 <assert_post_action>
   1f74c:	e002      	b.n	1f754 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   1f74e:	1b64      	subs	r4, r4, r5
   1f750:	b2a4      	uxth	r4, r4
		buf += bytes;
   1f752:	442f      	add	r7, r5
	while (len) {
   1f754:	b1e4      	cbz	r4, 1f790 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   1f756:	4e0f      	ldr	r6, [pc, #60]	; (1f794 <entropy_nrf5_get_entropy+0x6c>)
   1f758:	f04f 32ff 	mov.w	r2, #4294967295
   1f75c:	f04f 33ff 	mov.w	r3, #4294967295
   1f760:	4630      	mov	r0, r6
   1f762:	f004 fffd 	bl	24760 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1f766:	4622      	mov	r2, r4
   1f768:	4639      	mov	r1, r7
   1f76a:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1f76e:	f7ff fef9 	bl	1f564 <rng_pool_get>
   1f772:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1f774:	4630      	mov	r0, r6
   1f776:	f004 ffab 	bl	246d0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1f77a:	2d00      	cmp	r5, #0
   1f77c:	d1e7      	bne.n	1f74e <entropy_nrf5_get_entropy+0x26>
	return z_impl_k_sem_take(sem, timeout);
   1f77e:	f04f 32ff 	mov.w	r2, #4294967295
   1f782:	f04f 33ff 	mov.w	r3, #4294967295
   1f786:	f106 0018 	add.w	r0, r6, #24
   1f78a:	f004 ffe9 	bl	24760 <z_impl_k_sem_take>
			continue;
   1f78e:	e7e1      	b.n	1f754 <entropy_nrf5_get_entropy+0x2c>
}
   1f790:	2000      	movs	r0, #0
   1f792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f794:	20002ef0 	.word	0x20002ef0
   1f798:	000352c0 	.word	0x000352c0
   1f79c:	000352f4 	.word	0x000352f4
   1f7a0:	00031df4 	.word	0x00031df4

0001f7a4 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1f7a4:	b510      	push	{r4, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f7a6:	6902      	ldr	r2, [r0, #16]
   1f7a8:	4b1f      	ldr	r3, [pc, #124]	; (1f828 <entropy_nrf5_init+0x84>)
   1f7aa:	429a      	cmp	r2, r3
   1f7ac:	d00c      	beq.n	1f7c8 <entropy_nrf5_init+0x24>
   1f7ae:	4c1f      	ldr	r4, [pc, #124]	; (1f82c <entropy_nrf5_init+0x88>)
   1f7b0:	f240 1357 	movw	r3, #343	; 0x157
   1f7b4:	4622      	mov	r2, r4
   1f7b6:	491e      	ldr	r1, [pc, #120]	; (1f830 <entropy_nrf5_init+0x8c>)
   1f7b8:	481e      	ldr	r0, [pc, #120]	; (1f834 <entropy_nrf5_init+0x90>)
   1f7ba:	f00c fcc5 	bl	2c148 <printk>
   1f7be:	f240 1157 	movw	r1, #343	; 0x157
   1f7c2:	4620      	mov	r0, r4
   1f7c4:	f00c fec5 	bl	2c552 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f7c8:	4c17      	ldr	r4, [pc, #92]	; (1f828 <entropy_nrf5_init+0x84>)
   1f7ca:	2201      	movs	r2, #1
   1f7cc:	4611      	mov	r1, r2
   1f7ce:	4620      	mov	r0, r4
   1f7d0:	f010 fef0 	bl	305b4 <z_impl_k_sem_init>
   1f7d4:	2201      	movs	r2, #1
   1f7d6:	2100      	movs	r1, #0
   1f7d8:	f104 0018 	add.w	r0, r4, #24
   1f7dc:	f010 feea 	bl	305b4 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1f7e0:	2204      	movs	r2, #4
   1f7e2:	2108      	movs	r1, #8
   1f7e4:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1f7e8:	f010 f969 	bl	2fabe <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1f7ec:	220c      	movs	r2, #12
   1f7ee:	2110      	movs	r1, #16
   1f7f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1f7f4:	f010 f963 	bl	2fabe <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1f7f8:	4b0f      	ldr	r3, [pc, #60]	; (1f838 <entropy_nrf5_init+0x94>)
   1f7fa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1f7fe:	f022 0201 	bic.w	r2, r2, #1
   1f802:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f806:	4a0d      	ldr	r2, [pc, #52]	; (1f83c <entropy_nrf5_init+0x98>)
   1f808:	2400      	movs	r4, #0
   1f80a:	6014      	str	r4, [r2, #0]
   1f80c:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1f80e:	2101      	movs	r1, #1
   1f810:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f814:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1f816:	4622      	mov	r2, r4
   1f818:	200d      	movs	r0, #13
   1f81a:	f7f5 fca5 	bl	15168 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1f81e:	200d      	movs	r0, #13
   1f820:	f7f5 fc70 	bl	15104 <arch_irq_enable>

	return 0;
}
   1f824:	4620      	mov	r0, r4
   1f826:	bd10      	pop	{r4, pc}
   1f828:	20002ef0 	.word	0x20002ef0
   1f82c:	000352c0 	.word	0x000352c0
   1f830:	000352f4 	.word	0x000352f4
   1f834:	00031df4 	.word	0x00031df4
   1f838:	4000d000 	.word	0x4000d000
   1f83c:	4000d100 	.word	0x4000d100

0001f840 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1f840:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f842:	b083      	sub	sp, #12
   1f844:	460f      	mov	r7, r1
   1f846:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   1f848:	b130      	cbz	r0, 1f858 <entropy_cc3xx_rng_get_entropy+0x18>
	__ASSERT_NO_MSG(buffer != NULL);
   1f84a:	b18f      	cbz	r7, 1f870 <entropy_cc3xx_rng_get_entropy+0x30>
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
			chunk_size = length - offset;
   1f84c:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1f850:	2400      	movs	r4, #0
   1f852:	f06f 0015 	mvn.w	r0, #21
   1f856:	e022      	b.n	1f89e <entropy_cc3xx_rng_get_entropy+0x5e>
	__ASSERT_NO_MSG(dev != NULL);
   1f858:	4c17      	ldr	r4, [pc, #92]	; (1f8b8 <entropy_cc3xx_rng_get_entropy+0x78>)
   1f85a:	2324      	movs	r3, #36	; 0x24
   1f85c:	4622      	mov	r2, r4
   1f85e:	4917      	ldr	r1, [pc, #92]	; (1f8bc <entropy_cc3xx_rng_get_entropy+0x7c>)
   1f860:	4817      	ldr	r0, [pc, #92]	; (1f8c0 <entropy_cc3xx_rng_get_entropy+0x80>)
   1f862:	f00c fc71 	bl	2c148 <printk>
   1f866:	2124      	movs	r1, #36	; 0x24
   1f868:	4620      	mov	r0, r4
   1f86a:	f00c fe72 	bl	2c552 <assert_post_action>
   1f86e:	e7ec      	b.n	1f84a <entropy_cc3xx_rng_get_entropy+0xa>
	__ASSERT_NO_MSG(buffer != NULL);
   1f870:	4c11      	ldr	r4, [pc, #68]	; (1f8b8 <entropy_cc3xx_rng_get_entropy+0x78>)
   1f872:	2325      	movs	r3, #37	; 0x25
   1f874:	4622      	mov	r2, r4
   1f876:	4913      	ldr	r1, [pc, #76]	; (1f8c4 <entropy_cc3xx_rng_get_entropy+0x84>)
   1f878:	4811      	ldr	r0, [pc, #68]	; (1f8c0 <entropy_cc3xx_rng_get_entropy+0x80>)
   1f87a:	f00c fc65 	bl	2c148 <printk>
   1f87e:	2125      	movs	r1, #37	; 0x25
   1f880:	4620      	mov	r0, r4
   1f882:	f00c fe66 	bl	2c552 <assert_post_action>
   1f886:	e7e1      	b.n	1f84c <entropy_cc3xx_rng_get_entropy+0xc>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1f888:	ab01      	add	r3, sp, #4
   1f88a:	462a      	mov	r2, r5
   1f88c:	1939      	adds	r1, r7, r4
   1f88e:	2000      	movs	r0, #0
   1f890:	f008 fe10 	bl	284b4 <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   1f894:	9b01      	ldr	r3, [sp, #4]
   1f896:	42ab      	cmp	r3, r5
   1f898:	d109      	bne.n	1f8ae <entropy_cc3xx_rng_get_entropy+0x6e>
			return -EINVAL;
		}

		if (res != 0) {
   1f89a:	b950      	cbnz	r0, 1f8b2 <entropy_cc3xx_rng_get_entropy+0x72>
			break;
		}

		offset += chunk_size;
   1f89c:	442c      	add	r4, r5
	while (offset < length) {
   1f89e:	42a6      	cmp	r6, r4
   1f8a0:	d907      	bls.n	1f8b2 <entropy_cc3xx_rng_get_entropy+0x72>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1f8a2:	1b33      	subs	r3, r6, r4
   1f8a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1f8a8:	d2ee      	bcs.n	1f888 <entropy_cc3xx_rng_get_entropy+0x48>
			chunk_size = length - offset;
   1f8aa:	461d      	mov	r5, r3
   1f8ac:	e7ec      	b.n	1f888 <entropy_cc3xx_rng_get_entropy+0x48>
			return -EINVAL;
   1f8ae:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   1f8b2:	b003      	add	sp, #12
   1f8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8b6:	bf00      	nop
   1f8b8:	00035344 	.word	0x00035344
   1f8bc:	00035374 	.word	0x00035374
   1f8c0:	00031df4 	.word	0x00031df4
   1f8c4:	00035388 	.word	0x00035388

0001f8c8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1f8c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1f8cc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1f8d0:	4b01      	ldr	r3, [pc, #4]	; (1f8d8 <set_comparator+0x10>)
   1f8d2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1f8d6:	4770      	bx	lr
   1f8d8:	40011000 	.word	0x40011000

0001f8dc <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1f8dc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1f8e0:	4b01      	ldr	r3, [pc, #4]	; (1f8e8 <get_comparator+0xc>)
   1f8e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   1f8e6:	4770      	bx	lr
   1f8e8:	40011000 	.word	0x40011000

0001f8ec <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f8ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f8f0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1f8f2:	4a02      	ldr	r2, [pc, #8]	; (1f8fc <event_enable+0x10>)
   1f8f4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1f8f8:	4770      	bx	lr
   1f8fa:	bf00      	nop
   1f8fc:	40011000 	.word	0x40011000

0001f900 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f904:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1f906:	4a02      	ldr	r2, [pc, #8]	; (1f910 <event_disable+0x10>)
   1f908:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   1f90c:	4770      	bx	lr
   1f90e:	bf00      	nop
   1f910:	40011000 	.word	0x40011000

0001f914 <counter>:
     return p_reg->COUNTER;
   1f914:	4b01      	ldr	r3, [pc, #4]	; (1f91c <counter+0x8>)
   1f916:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   1f91a:	4770      	bx	lr
   1f91c:	40011000 	.word	0x40011000

0001f920 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   1f920:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1f922:	2301      	movs	r3, #1
   1f924:	4083      	lsls	r3, r0
   1f926:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f928:	4a10      	ldr	r2, [pc, #64]	; (1f96c <compare_int_lock+0x4c>)
   1f92a:	f3bf 8f5b 	dmb	ish
   1f92e:	e852 1f00 	ldrex	r1, [r2]
   1f932:	ea01 0c04 	and.w	ip, r1, r4
   1f936:	e842 ce00 	strex	lr, ip, [r2]
   1f93a:	f1be 0f00 	cmp.w	lr, #0
   1f93e:	d1f6      	bne.n	1f92e <compare_int_lock+0xe>
   1f940:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f944:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f948:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1f94c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f950:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1f954:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1f958:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1f95c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1f960:	420b      	tst	r3, r1
}
   1f962:	bf14      	ite	ne
   1f964:	2001      	movne	r0, #1
   1f966:	2000      	moveq	r0, #0
   1f968:	bd10      	pop	{r4, pc}
   1f96a:	bf00      	nop
   1f96c:	20002f48 	.word	0x20002f48

0001f970 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   1f970:	b570      	push	{r4, r5, r6, lr}
   1f972:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   1f974:	f010 f8ca 	bl	2fb0c <full_int_lock>
   1f978:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1f97a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f97e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   1f980:	4a17      	ldr	r2, [pc, #92]	; (1f9e0 <channel_processing_check_and_clear+0x70>)
   1f982:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1f986:	4213      	tst	r3, r2
   1f988:	d105      	bne.n	1f996 <channel_processing_check_and_clear+0x26>
	bool result = false;
   1f98a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   1f98c:	4628      	mov	r0, r5
   1f98e:	f010 f8c1 	bl	2fb14 <full_int_unlock>

	return result;
}
   1f992:	4630      	mov	r0, r6
   1f994:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1f996:	2301      	movs	r3, #1
   1f998:	40a3      	lsls	r3, r4
   1f99a:	43db      	mvns	r3, r3
   1f99c:	4a11      	ldr	r2, [pc, #68]	; (1f9e4 <channel_processing_check_and_clear+0x74>)
   1f99e:	f3bf 8f5b 	dmb	ish
   1f9a2:	e852 1f00 	ldrex	r1, [r2]
   1f9a6:	ea01 0003 	and.w	r0, r1, r3
   1f9aa:	e842 0600 	strex	r6, r0, [r2]
   1f9ae:	2e00      	cmp	r6, #0
   1f9b0:	d1f7      	bne.n	1f9a2 <channel_processing_check_and_clear+0x32>
   1f9b2:	f3bf 8f5b 	dmb	ish
   1f9b6:	b959      	cbnz	r1, 1f9d0 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1f9b8:	f104 0350 	add.w	r3, r4, #80	; 0x50
   1f9bc:	009b      	lsls	r3, r3, #2
   1f9be:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f9c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f9c4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1f9c8:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1f9ca:	b113      	cbz	r3, 1f9d2 <channel_processing_check_and_clear+0x62>
   1f9cc:	2301      	movs	r3, #1
   1f9ce:	e000      	b.n	1f9d2 <channel_processing_check_and_clear+0x62>
   1f9d0:	2301      	movs	r3, #1
		if (result) {
   1f9d2:	461e      	mov	r6, r3
   1f9d4:	2b00      	cmp	r3, #0
   1f9d6:	d0d9      	beq.n	1f98c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   1f9d8:	4620      	mov	r0, r4
   1f9da:	f010 f888 	bl	2faee <event_clear>
   1f9de:	e7d5      	b.n	1f98c <channel_processing_check_and_clear+0x1c>
   1f9e0:	40011000 	.word	0x40011000
   1f9e4:	20002f44 	.word	0x20002f44

0001f9e8 <compare_int_unlock>:
	if (key) {
   1f9e8:	b901      	cbnz	r1, 1f9ec <compare_int_unlock+0x4>
}
   1f9ea:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   1f9ec:	2301      	movs	r3, #1
   1f9ee:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f9f0:	4a11      	ldr	r2, [pc, #68]	; (1fa38 <compare_int_unlock+0x50>)
   1f9f2:	f3bf 8f5b 	dmb	ish
   1f9f6:	e852 1f00 	ldrex	r1, [r2]
   1f9fa:	4319      	orrs	r1, r3
   1f9fc:	e842 1c00 	strex	ip, r1, [r2]
   1fa00:	f1bc 0f00 	cmp.w	ip, #0
   1fa04:	d1f7      	bne.n	1f9f6 <compare_int_unlock+0xe>
   1fa06:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1fa0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fa0e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1fa10:	4a0a      	ldr	r2, [pc, #40]	; (1fa3c <compare_int_unlock+0x54>)
   1fa12:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fa16:	f3bf 8f5b 	dmb	ish
   1fa1a:	4b09      	ldr	r3, [pc, #36]	; (1fa40 <compare_int_unlock+0x58>)
   1fa1c:	681b      	ldr	r3, [r3, #0]
   1fa1e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1fa22:	fa23 f000 	lsr.w	r0, r3, r0
   1fa26:	f010 0f01 	tst.w	r0, #1
   1fa2a:	d0de      	beq.n	1f9ea <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fa2c:	4b05      	ldr	r3, [pc, #20]	; (1fa44 <compare_int_unlock+0x5c>)
   1fa2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1fa32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1fa36:	e7d8      	b.n	1f9ea <compare_int_unlock+0x2>
   1fa38:	20002f48 	.word	0x20002f48
   1fa3c:	40011000 	.word	0x40011000
   1fa40:	20002f44 	.word	0x20002f44
   1fa44:	e000e100 	.word	0xe000e100

0001fa48 <sys_clock_timeout_handler>:
{
   1fa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa4a:	4607      	mov	r7, r0
   1fa4c:	4614      	mov	r4, r2
   1fa4e:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1fa50:	4610      	mov	r0, r2
   1fa52:	4619      	mov	r1, r3
   1fa54:	f010 f857 	bl	2fb06 <absolute_time_to_cc>
   1fa58:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1fa5a:	4b15      	ldr	r3, [pc, #84]	; (1fab0 <sys_clock_timeout_handler+0x68>)
   1fa5c:	681a      	ldr	r2, [r3, #0]
   1fa5e:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   1fa60:	601c      	str	r4, [r3, #0]
   1fa62:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1fa64:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1fa68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1fa6c:	d308      	bcc.n	1fa80 <sys_clock_timeout_handler+0x38>
	return false;
   1fa6e:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1fa70:	f007 fb14 	bl	2709c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   1fa74:	4638      	mov	r0, r7
   1fa76:	f7ff ff31 	bl	1f8dc <get_comparator>
   1fa7a:	42a8      	cmp	r0, r5
   1fa7c:	d00c      	beq.n	1fa98 <sys_clock_timeout_handler+0x50>
}
   1fa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1fa80:	4b0c      	ldr	r3, [pc, #48]	; (1fab4 <sys_clock_timeout_handler+0x6c>)
   1fa82:	6819      	ldr	r1, [r3, #0]
   1fa84:	0a0b      	lsrs	r3, r1, #8
   1fa86:	060a      	lsls	r2, r1, #24
   1fa88:	1952      	adds	r2, r2, r5
   1fa8a:	f143 0300 	adc.w	r3, r3, #0
   1fa8e:	490a      	ldr	r1, [pc, #40]	; (1fab8 <sys_clock_timeout_handler+0x70>)
   1fa90:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1fa94:	2401      	movs	r4, #1
   1fa96:	e7eb      	b.n	1fa70 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   1fa98:	b11c      	cbz	r4, 1faa2 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   1fa9a:	4638      	mov	r0, r7
   1fa9c:	f7ff ff26 	bl	1f8ec <event_enable>
}
   1faa0:	e7ed      	b.n	1fa7e <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   1faa2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1faa6:	4638      	mov	r0, r7
   1faa8:	f7ff ff0e 	bl	1f8c8 <set_comparator>
   1faac:	e7f5      	b.n	1fa9a <sys_clock_timeout_handler+0x52>
   1faae:	bf00      	nop
   1fab0:	20002320 	.word	0x20002320
   1fab4:	20002f4c 	.word	0x20002f4c
   1fab8:	20002308 	.word	0x20002308

0001fabc <z_nrf_rtc_timer_read>:
{
   1fabc:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1fabe:	4b0d      	ldr	r3, [pc, #52]	; (1faf4 <z_nrf_rtc_timer_read+0x38>)
   1fac0:	681b      	ldr	r3, [r3, #0]
   1fac2:	0a1d      	lsrs	r5, r3, #8
   1fac4:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1fac6:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1faca:	f7ff ff23 	bl	1f914 <counter>
   1face:	4603      	mov	r3, r0
	val += cntr;
   1fad0:	1820      	adds	r0, r4, r0
   1fad2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1fad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1fada:	d20a      	bcs.n	1faf2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1fadc:	4b06      	ldr	r3, [pc, #24]	; (1faf8 <z_nrf_rtc_timer_read+0x3c>)
   1fade:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fae2:	4299      	cmp	r1, r3
   1fae4:	bf08      	it	eq
   1fae6:	4290      	cmpeq	r0, r2
   1fae8:	d203      	bcs.n	1faf2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1faea:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1faee:	f141 0100 	adc.w	r1, r1, #0
}
   1faf2:	bd38      	pop	{r3, r4, r5, pc}
   1faf4:	20002f4c 	.word	0x20002f4c
   1faf8:	20002308 	.word	0x20002308

0001fafc <compare_set_nolocks>:
{
   1fafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fb00:	4606      	mov	r6, r0
   1fb02:	4614      	mov	r4, r2
   1fb04:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1fb06:	4610      	mov	r0, r2
   1fb08:	4619      	mov	r1, r3
   1fb0a:	f00f fffc 	bl	2fb06 <absolute_time_to_cc>
   1fb0e:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1fb10:	f7ff ffd4 	bl	1fabc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1fb14:	42a9      	cmp	r1, r5
   1fb16:	bf08      	it	eq
   1fb18:	42a0      	cmpeq	r0, r4
   1fb1a:	d21e      	bcs.n	1fb5a <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1fb1c:	ebb4 0800 	subs.w	r8, r4, r0
   1fb20:	eb65 0901 	sbc.w	r9, r5, r1
   1fb24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1fb28:	2300      	movs	r3, #0
   1fb2a:	454b      	cmp	r3, r9
   1fb2c:	bf08      	it	eq
   1fb2e:	4542      	cmpeq	r2, r8
   1fb30:	d32e      	bcc.n	1fb90 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   1fb32:	4b19      	ldr	r3, [pc, #100]	; (1fb98 <compare_set_nolocks+0x9c>)
   1fb34:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1fb38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1fb3c:	42ab      	cmp	r3, r5
   1fb3e:	bf08      	it	eq
   1fb40:	42a2      	cmpeq	r2, r4
   1fb42:	d018      	beq.n	1fb76 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   1fb44:	4639      	mov	r1, r7
   1fb46:	4630      	mov	r0, r6
   1fb48:	f00f ffe7 	bl	2fb1a <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1fb4c:	4639      	mov	r1, r7
   1fb4e:	f00f ffca 	bl	2fae6 <counter_sub>
   1fb52:	1824      	adds	r4, r4, r0
   1fb54:	f145 0500 	adc.w	r5, r5, #0
   1fb58:	e00d      	b.n	1fb76 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   1fb5a:	2301      	movs	r3, #1
   1fb5c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fb5e:	4a0f      	ldr	r2, [pc, #60]	; (1fb9c <compare_set_nolocks+0xa0>)
   1fb60:	f3bf 8f5b 	dmb	ish
   1fb64:	e852 1f00 	ldrex	r1, [r2]
   1fb68:	4319      	orrs	r1, r3
   1fb6a:	e842 1000 	strex	r0, r1, [r2]
   1fb6e:	2800      	cmp	r0, #0
   1fb70:	d1f8      	bne.n	1fb64 <compare_set_nolocks+0x68>
   1fb72:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1fb76:	4b08      	ldr	r3, [pc, #32]	; (1fb98 <compare_set_nolocks+0x9c>)
   1fb78:	0132      	lsls	r2, r6, #4
   1fb7a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1fb7e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1fb82:	9908      	ldr	r1, [sp, #32]
   1fb84:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1fb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb88:	6073      	str	r3, [r6, #4]
	return ret;
   1fb8a:	2000      	movs	r0, #0
}
   1fb8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   1fb90:	f06f 0015 	mvn.w	r0, #21
   1fb94:	e7fa      	b.n	1fb8c <compare_set_nolocks+0x90>
   1fb96:	bf00      	nop
   1fb98:	20002310 	.word	0x20002310
   1fb9c:	20002f44 	.word	0x20002f44

0001fba0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1fba0:	b530      	push	{r4, r5, lr}
   1fba2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   1fba4:	2300      	movs	r3, #0
   1fba6:	4a1e      	ldr	r2, [pc, #120]	; (1fc20 <sys_clock_driver_init+0x80>)
   1fba8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1fbac:	2b00      	cmp	r3, #0
   1fbae:	dd25      	ble.n	1fbfc <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   1fbb0:	4c1b      	ldr	r4, [pc, #108]	; (1fc20 <sys_clock_driver_init+0x80>)
   1fbb2:	2502      	movs	r5, #2
   1fbb4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fbb8:	4b1a      	ldr	r3, [pc, #104]	; (1fc24 <sys_clock_driver_init+0x84>)
   1fbba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1fbbe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1fbc2:	2200      	movs	r2, #0
   1fbc4:	2101      	movs	r1, #1
   1fbc6:	2011      	movs	r0, #17
   1fbc8:	f7f5 face 	bl	15168 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1fbcc:	2011      	movs	r0, #17
   1fbce:	f7f5 fa99 	bl	15104 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1fbd2:	2301      	movs	r3, #1
   1fbd4:	4a14      	ldr	r2, [pc, #80]	; (1fc28 <sys_clock_driver_init+0x88>)
   1fbd6:	6013      	str	r3, [r2, #0]
   1fbd8:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1fbda:	4a14      	ldr	r2, [pc, #80]	; (1fc2c <sys_clock_driver_init+0x8c>)
   1fbdc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1fbde:	2400      	movs	r4, #0
   1fbe0:	9401      	str	r4, [sp, #4]
   1fbe2:	4b13      	ldr	r3, [pc, #76]	; (1fc30 <sys_clock_driver_init+0x90>)
   1fbe4:	9300      	str	r3, [sp, #0]
   1fbe6:	4a13      	ldr	r2, [pc, #76]	; (1fc34 <sys_clock_driver_init+0x94>)
   1fbe8:	2300      	movs	r3, #0
   1fbea:	4620      	mov	r0, r4
   1fbec:	f00f ffd0 	bl	2fb90 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1fbf0:	4628      	mov	r0, r5
   1fbf2:	f7fd f95f 	bl	1ceb4 <z_nrf_clock_control_lf_on>

	return 0;
}
   1fbf6:	4620      	mov	r0, r4
   1fbf8:	b003      	add	sp, #12
   1fbfa:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1fbfc:	4a0e      	ldr	r2, [pc, #56]	; (1fc38 <sys_clock_driver_init+0x98>)
   1fbfe:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1fc02:	f04f 30ff 	mov.w	r0, #4294967295
   1fc06:	f04f 31ff 	mov.w	r1, #4294967295
   1fc0a:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1fc0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1fc12:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1fc14:	4902      	ldr	r1, [pc, #8]	; (1fc20 <sys_clock_driver_init+0x80>)
   1fc16:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1fc1a:	3301      	adds	r3, #1
   1fc1c:	e7c6      	b.n	1fbac <sys_clock_driver_init+0xc>
   1fc1e:	bf00      	nop
   1fc20:	40011000 	.word	0x40011000
   1fc24:	e000e100 	.word	0xe000e100
   1fc28:	40011008 	.word	0x40011008
   1fc2c:	20002f48 	.word	0x20002f48
   1fc30:	0001fa49 	.word	0x0001fa49
   1fc34:	007fffff 	.word	0x007fffff
   1fc38:	20002310 	.word	0x20002310

0001fc3c <process_channel>:
{
   1fc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc40:	b082      	sub	sp, #8
   1fc42:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   1fc44:	f7ff fe94 	bl	1f970 <channel_processing_check_and_clear>
   1fc48:	b910      	cbnz	r0, 1fc50 <process_channel+0x14>
}
   1fc4a:	b002      	add	sp, #8
   1fc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1fc50:	f7ff ff34 	bl	1fabc <z_nrf_rtc_timer_read>
   1fc54:	4606      	mov	r6, r0
   1fc56:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   1fc58:	f00f ff58 	bl	2fb0c <full_int_lock>
   1fc5c:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   1fc5e:	4b13      	ldr	r3, [pc, #76]	; (1fcac <process_channel+0x70>)
   1fc60:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1fc64:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1fc68:	454f      	cmp	r7, r9
   1fc6a:	bf08      	it	eq
   1fc6c:	4546      	cmpeq	r6, r8
   1fc6e:	d20b      	bcs.n	1fc88 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1fc70:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   1fc72:	4650      	mov	r0, sl
   1fc74:	f00f ff4e 	bl	2fb14 <full_int_unlock>
		if (handler) {
   1fc78:	2e00      	cmp	r6, #0
   1fc7a:	d0e6      	beq.n	1fc4a <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1fc7c:	9500      	str	r5, [sp, #0]
   1fc7e:	4642      	mov	r2, r8
   1fc80:	464b      	mov	r3, r9
   1fc82:	4620      	mov	r0, r4
   1fc84:	47b0      	blx	r6
}
   1fc86:	e7e0      	b.n	1fc4a <process_channel+0xe>
			handler = cc_data[chan].callback;
   1fc88:	4a08      	ldr	r2, [pc, #32]	; (1fcac <process_channel+0x70>)
   1fc8a:	0123      	lsls	r3, r4, #4
   1fc8c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1fc90:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   1fc92:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   1fc94:	2000      	movs	r0, #0
   1fc96:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1fc98:	f04f 32ff 	mov.w	r2, #4294967295
   1fc9c:	f04f 33ff 	mov.w	r3, #4294967295
   1fca0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1fca4:	4620      	mov	r0, r4
   1fca6:	f7ff fe2b 	bl	1f900 <event_disable>
   1fcaa:	e7e2      	b.n	1fc72 <process_channel+0x36>
   1fcac:	20002310 	.word	0x20002310

0001fcb0 <rtc_nrf_isr>:
{
   1fcb0:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1fcb2:	4b0d      	ldr	r3, [pc, #52]	; (1fce8 <rtc_nrf_isr+0x38>)
   1fcb4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1fcb8:	f013 0f02 	tst.w	r3, #2
   1fcbc:	d00a      	beq.n	1fcd4 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fcbe:	4b0b      	ldr	r3, [pc, #44]	; (1fcec <rtc_nrf_isr+0x3c>)
   1fcc0:	681b      	ldr	r3, [r3, #0]
   1fcc2:	b13b      	cbz	r3, 1fcd4 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1fcc4:	4b09      	ldr	r3, [pc, #36]	; (1fcec <rtc_nrf_isr+0x3c>)
   1fcc6:	2200      	movs	r2, #0
   1fcc8:	601a      	str	r2, [r3, #0]
   1fcca:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   1fccc:	4a08      	ldr	r2, [pc, #32]	; (1fcf0 <rtc_nrf_isr+0x40>)
   1fcce:	6813      	ldr	r3, [r2, #0]
   1fcd0:	3301      	adds	r3, #1
   1fcd2:	6013      	str	r3, [r2, #0]
{
   1fcd4:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1fcd6:	2c00      	cmp	r4, #0
   1fcd8:	dd00      	ble.n	1fcdc <rtc_nrf_isr+0x2c>
}
   1fcda:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1fcdc:	4620      	mov	r0, r4
   1fcde:	f7ff ffad 	bl	1fc3c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1fce2:	3401      	adds	r4, #1
   1fce4:	e7f7      	b.n	1fcd6 <rtc_nrf_isr+0x26>
   1fce6:	bf00      	nop
   1fce8:	40011000 	.word	0x40011000
   1fcec:	40011104 	.word	0x40011104
   1fcf0:	20002f4c 	.word	0x20002f4c

0001fcf4 <sys_clock_set_timeout>:
{
   1fcf4:	b510      	push	{r4, lr}
   1fcf6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1fcf8:	f1b0 3fff 	cmp.w	r0, #4294967295
   1fcfc:	d007      	beq.n	1fd0e <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1fcfe:	1e44      	subs	r4, r0, #1
   1fd00:	2c00      	cmp	r4, #0
   1fd02:	dd07      	ble.n	1fd14 <sys_clock_set_timeout+0x20>
   1fd04:	4b11      	ldr	r3, [pc, #68]	; (1fd4c <sys_clock_set_timeout+0x58>)
   1fd06:	429c      	cmp	r4, r3
   1fd08:	dd05      	ble.n	1fd16 <sys_clock_set_timeout+0x22>
   1fd0a:	4c11      	ldr	r4, [pc, #68]	; (1fd50 <sys_clock_set_timeout+0x5c>)
   1fd0c:	e003      	b.n	1fd16 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1fd0e:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   1fd12:	e7f4      	b.n	1fcfe <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1fd14:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1fd16:	f7ff fed1 	bl	1fabc <z_nrf_rtc_timer_read>
   1fd1a:	4b0e      	ldr	r3, [pc, #56]	; (1fd54 <sys_clock_set_timeout+0x60>)
   1fd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fd20:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   1fd22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1fd26:	d300      	bcc.n	1fd2a <sys_clock_set_timeout+0x36>
		ticks = 0;
   1fd28:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1fd2a:	4404      	add	r4, r0
   1fd2c:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   1fd2e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   1fd32:	d300      	bcc.n	1fd36 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   1fd34:	4c06      	ldr	r4, [pc, #24]	; (1fd50 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1fd36:	2000      	movs	r0, #0
   1fd38:	9001      	str	r0, [sp, #4]
   1fd3a:	4907      	ldr	r1, [pc, #28]	; (1fd58 <sys_clock_set_timeout+0x64>)
   1fd3c:	9100      	str	r1, [sp, #0]
   1fd3e:	1912      	adds	r2, r2, r4
   1fd40:	f143 0300 	adc.w	r3, r3, #0
   1fd44:	f00f ff24 	bl	2fb90 <compare_set>
}
   1fd48:	b002      	add	sp, #8
   1fd4a:	bd10      	pop	{r4, pc}
   1fd4c:	007ffffe 	.word	0x007ffffe
   1fd50:	007fffff 	.word	0x007fffff
   1fd54:	20002320 	.word	0x20002320
   1fd58:	0001fa49 	.word	0x0001fa49

0001fd5c <sys_clock_elapsed>:
{
   1fd5c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1fd5e:	f7ff fead 	bl	1fabc <z_nrf_rtc_timer_read>
   1fd62:	4b02      	ldr	r3, [pc, #8]	; (1fd6c <sys_clock_elapsed+0x10>)
   1fd64:	681b      	ldr	r3, [r3, #0]
}
   1fd66:	1ac0      	subs	r0, r0, r3
   1fd68:	bd08      	pop	{r3, pc}
   1fd6a:	bf00      	nop
   1fd6c:	20002320 	.word	0x20002320

0001fd70 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1fd70:	b508      	push	{r3, lr}
   1fd72:	4602      	mov	r2, r0
   1fd74:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1fd76:	4802      	ldr	r0, [pc, #8]	; (1fd80 <multithreading_lock_acquire+0x10>)
   1fd78:	f004 f920 	bl	23fbc <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1fd7c:	bd08      	pop	{r3, pc}
   1fd7e:	bf00      	nop
   1fd80:	20000c0c 	.word	0x20000c0c

0001fd84 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1fd84:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1fd86:	4802      	ldr	r0, [pc, #8]	; (1fd90 <multithreading_lock_release+0xc>)
   1fd88:	f004 fa38 	bl	241fc <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1fd8c:	bd08      	pop	{r3, pc}
   1fd8e:	bf00      	nop
   1fd90:	20000c0c 	.word	0x20000c0c

0001fd94 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1fd94:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1fd96:	f7f3 fea7 	bl	13ae8 <z_impl_log_panic>
   1fd9a:	4b09      	ldr	r3, [pc, #36]	; (1fdc0 <k_sys_fatal_error_handler+0x2c>)
   1fd9c:	4a09      	ldr	r2, [pc, #36]	; (1fdc4 <k_sys_fatal_error_handler+0x30>)
   1fd9e:	1a9b      	subs	r3, r3, r2
   1fda0:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1fda2:	f04f 0100 	mov.w	r1, #0
   1fda6:	2201      	movs	r2, #1
   1fda8:	f362 0102 	bfi	r1, r2, #0, #3
   1fdac:	f36f 01c5 	bfc	r1, #3, #3
   1fdb0:	f363 118f 	bfi	r1, r3, #6, #10
   1fdb4:	4804      	ldr	r0, [pc, #16]	; (1fdc8 <k_sys_fatal_error_handler+0x34>)
   1fdb6:	f7f3 fd73 	bl	138a0 <log_0>
		sys_arch_reboot(0);
   1fdba:	2000      	movs	r0, #0
   1fdbc:	f7f6 fa80 	bl	162c0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1fdc0:	00031970 	.word	0x00031970
   1fdc4:	00031908 	.word	0x00031908
   1fdc8:	000353c8 	.word	0x000353c8

0001fdcc <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1fdcc:	b538      	push	{r3, r4, r5, lr}
   1fdce:	460d      	mov	r5, r1
   1fdd0:	4b0d      	ldr	r3, [pc, #52]	; (1fe08 <sdc_assertion_handler+0x3c>)
   1fdd2:	4a0e      	ldr	r2, [pc, #56]	; (1fe0c <sdc_assertion_handler+0x40>)
   1fdd4:	1a9b      	subs	r3, r3, r2
   1fdd6:	08db      	lsrs	r3, r3, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1fdd8:	f04f 0400 	mov.w	r4, #0
   1fddc:	2201      	movs	r2, #1
   1fdde:	f362 0402 	bfi	r4, r2, #0, #3
   1fde2:	f36f 04c5 	bfc	r4, #3, #3
   1fde6:	f363 148f 	bfi	r4, r3, #6, #10
   1fdea:	f7f3 fbe7 	bl	135bc <z_log_strdup>
   1fdee:	4601      	mov	r1, r0
   1fdf0:	4623      	mov	r3, r4
   1fdf2:	462a      	mov	r2, r5
   1fdf4:	4806      	ldr	r0, [pc, #24]	; (1fe10 <sdc_assertion_handler+0x44>)
   1fdf6:	f7f3 fdb9 	bl	1396c <log_2>
	k_oops();
   1fdfa:	4040      	eors	r0, r0
   1fdfc:	f380 8811 	msr	BASEPRI, r0
   1fe00:	f04f 0003 	mov.w	r0, #3
   1fe04:	df02      	svc	2
}
   1fe06:	bd38      	pop	{r3, r4, r5, pc}
   1fe08:	000319c0 	.word	0x000319c0
   1fe0c:	00031908 	.word	0x00031908
   1fe10:	000353e8 	.word	0x000353e8

0001fe14 <host_signal>:
		k_yield();
	}
}

void host_signal(void)
{
   1fe14:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1fe16:	4802      	ldr	r0, [pc, #8]	; (1fe20 <host_signal+0xc>)
   1fe18:	f004 fc5a 	bl	246d0 <z_impl_k_sem_give>
	/* Wake up the RX event/data thread */
	k_sem_give(&sem_recv);
}
   1fe1c:	bd08      	pop	{r3, pc}
   1fe1e:	bf00      	nop
   1fe20:	20000c8c 	.word	0x20000c8c

0001fe24 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1fe24:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1fe26:	4803      	ldr	r0, [pc, #12]	; (1fe34 <hci_driver_init+0x10>)
   1fe28:	f7f8 f8aa 	bl	17f80 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1fe2c:	4802      	ldr	r0, [pc, #8]	; (1fe38 <hci_driver_init+0x14>)
   1fe2e:	f7e4 fc3f 	bl	46b0 <sdc_init>
	return err;
}
   1fe32:	bd08      	pop	{r3, pc}
   1fe34:	0003568c 	.word	0x0003568c
   1fe38:	0001fdcd 	.word	0x0001fdcd

0001fe3c <acl_handle>:
{
   1fe3c:	b538      	push	{r3, r4, r5, lr}
   1fe3e:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fe40:	f04f 30ff 	mov.w	r0, #4294967295
   1fe44:	f04f 31ff 	mov.w	r1, #4294967295
   1fe48:	f7ff ff92 	bl	1fd70 <multithreading_lock_acquire>
	if (!errcode) {
   1fe4c:	4605      	mov	r5, r0
   1fe4e:	b108      	cbz	r0, 1fe54 <acl_handle+0x18>
}
   1fe50:	4628      	mov	r0, r5
   1fe52:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1fe54:	68a0      	ldr	r0, [r4, #8]
   1fe56:	f7ec fe97 	bl	cb88 <sdc_hci_data_put>
   1fe5a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1fe5c:	f7ff ff92 	bl	1fd84 <multithreading_lock_release>
		if (errcode) {
   1fe60:	2d00      	cmp	r5, #0
   1fe62:	d0f5      	beq.n	1fe50 <acl_handle+0x14>
   1fe64:	4801      	ldr	r0, [pc, #4]	; (1fe6c <acl_handle+0x30>)
   1fe66:	f004 fc33 	bl	246d0 <z_impl_k_sem_give>
}
   1fe6a:	e7f1      	b.n	1fe50 <acl_handle+0x14>
   1fe6c:	20000c8c 	.word	0x20000c8c

0001fe70 <cmd_handle>:
{
   1fe70:	b538      	push	{r3, r4, r5, lr}
   1fe72:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fe74:	f04f 30ff 	mov.w	r0, #4294967295
   1fe78:	f04f 31ff 	mov.w	r1, #4294967295
   1fe7c:	f7ff ff78 	bl	1fd70 <multithreading_lock_acquire>
	if (!errcode) {
   1fe80:	4604      	mov	r4, r0
   1fe82:	b110      	cbz	r0, 1fe8a <cmd_handle+0x1a>
	if (errcode) {
   1fe84:	b144      	cbz	r4, 1fe98 <cmd_handle+0x28>
}
   1fe86:	4620      	mov	r0, r4
   1fe88:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   1fe8a:	68a8      	ldr	r0, [r5, #8]
   1fe8c:	f000 fa3c 	bl	20308 <hci_internal_cmd_put>
   1fe90:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1fe92:	f7ff ff77 	bl	1fd84 <multithreading_lock_release>
   1fe96:	e7f5      	b.n	1fe84 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   1fe98:	4801      	ldr	r0, [pc, #4]	; (1fea0 <cmd_handle+0x30>)
   1fe9a:	f004 fc19 	bl	246d0 <z_impl_k_sem_give>
	return 0;
   1fe9e:	e7f2      	b.n	1fe86 <cmd_handle+0x16>
   1fea0:	20000c8c 	.word	0x20000c8c

0001fea4 <rand_prio_low_vector_get_blocking>:
{
   1fea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fea8:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1feaa:	4b17      	ldr	r3, [pc, #92]	; (1ff08 <rand_prio_low_vector_get_blocking+0x64>)
   1feac:	681e      	ldr	r6, [r3, #0]
   1feae:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1feb0:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1feb2:	683b      	ldr	r3, [r7, #0]
   1feb4:	b13b      	cbz	r3, 1fec6 <rand_prio_low_vector_get_blocking+0x22>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1feb6:	683b      	ldr	r3, [r7, #0]
   1feb8:	462a      	mov	r2, r5
   1feba:	4621      	mov	r1, r4
   1febc:	4630      	mov	r0, r6
   1febe:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1fec0:	b988      	cbnz	r0, 1fee6 <rand_prio_low_vector_get_blocking+0x42>
}
   1fec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(api->get_entropy != NULL,
   1fec6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1ff24 <rand_prio_low_vector_get_blocking+0x80>
   1feca:	234b      	movs	r3, #75	; 0x4b
   1fecc:	4642      	mov	r2, r8
   1fece:	490f      	ldr	r1, [pc, #60]	; (1ff0c <rand_prio_low_vector_get_blocking+0x68>)
   1fed0:	480f      	ldr	r0, [pc, #60]	; (1ff10 <rand_prio_low_vector_get_blocking+0x6c>)
   1fed2:	f00c f939 	bl	2c148 <printk>
   1fed6:	480f      	ldr	r0, [pc, #60]	; (1ff14 <rand_prio_low_vector_get_blocking+0x70>)
   1fed8:	f00c f936 	bl	2c148 <printk>
   1fedc:	214b      	movs	r1, #75	; 0x4b
   1fede:	4640      	mov	r0, r8
   1fee0:	f00c fb37 	bl	2c552 <assert_post_action>
   1fee4:	e7e7      	b.n	1feb6 <rand_prio_low_vector_get_blocking+0x12>
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1fee6:	4c0c      	ldr	r4, [pc, #48]	; (1ff18 <rand_prio_low_vector_get_blocking+0x74>)
   1fee8:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   1feec:	4622      	mov	r2, r4
   1feee:	490b      	ldr	r1, [pc, #44]	; (1ff1c <rand_prio_low_vector_get_blocking+0x78>)
   1fef0:	4807      	ldr	r0, [pc, #28]	; (1ff10 <rand_prio_low_vector_get_blocking+0x6c>)
   1fef2:	f00c f929 	bl	2c148 <printk>
   1fef6:	480a      	ldr	r0, [pc, #40]	; (1ff20 <rand_prio_low_vector_get_blocking+0x7c>)
   1fef8:	f00c f926 	bl	2c148 <printk>
   1fefc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   1ff00:	4620      	mov	r0, r4
   1ff02:	f00c fb26 	bl	2c552 <assert_post_action>
}
   1ff06:	e7dc      	b.n	1fec2 <rand_prio_low_vector_get_blocking+0x1e>
   1ff08:	20002f50 	.word	0x20002f50
   1ff0c:	00035440 	.word	0x00035440
   1ff10:	00031df4 	.word	0x00031df4
   1ff14:	00035460 	.word	0x00035460
   1ff18:	00035488 	.word	0x00035488
   1ff1c:	0003387c 	.word	0x0003387c
   1ff20:	000354c4 	.word	0x000354c4
   1ff24:	00035410 	.word	0x00035410

0001ff28 <rand_prio_high_vector_get>:
{
   1ff28:	b538      	push	{r3, r4, r5, lr}
   1ff2a:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1ff2c:	4b10      	ldr	r3, [pc, #64]	; (1ff70 <rand_prio_high_vector_get+0x48>)
   1ff2e:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1ff30:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1ff32:	685d      	ldr	r5, [r3, #4]
   1ff34:	b14d      	cbz	r5, 1ff4a <rand_prio_high_vector_get+0x22>
   1ff36:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1ff38:	2300      	movs	r3, #0
   1ff3a:	4621      	mov	r1, r4
   1ff3c:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1ff3e:	1e04      	subs	r4, r0, #0
   1ff40:	db05      	blt.n	1ff4e <rand_prio_high_vector_get+0x26>
	return ret >= 0 ? ret : 0;
   1ff42:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1ff46:	b2c0      	uxtb	r0, r0
   1ff48:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1ff4a:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1ff4e:	4d09      	ldr	r5, [pc, #36]	; (1ff74 <rand_prio_high_vector_get+0x4c>)
   1ff50:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1ff54:	462a      	mov	r2, r5
   1ff56:	4908      	ldr	r1, [pc, #32]	; (1ff78 <rand_prio_high_vector_get+0x50>)
   1ff58:	4808      	ldr	r0, [pc, #32]	; (1ff7c <rand_prio_high_vector_get+0x54>)
   1ff5a:	f00c f8f5 	bl	2c148 <printk>
   1ff5e:	4808      	ldr	r0, [pc, #32]	; (1ff80 <rand_prio_high_vector_get+0x58>)
   1ff60:	f00c f8f2 	bl	2c148 <printk>
   1ff64:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1ff68:	4628      	mov	r0, r5
   1ff6a:	f00c faf2 	bl	2c552 <assert_post_action>
   1ff6e:	e7e8      	b.n	1ff42 <rand_prio_high_vector_get+0x1a>
   1ff70:	20002f50 	.word	0x20002f50
   1ff74:	00035488 	.word	0x00035488
   1ff78:	00035500 	.word	0x00035500
   1ff7c:	00031df4 	.word	0x00031df4
   1ff80:	0003550c 	.word	0x0003550c

0001ff84 <rand_prio_low_vector_get>:
{
   1ff84:	b538      	push	{r3, r4, r5, lr}
   1ff86:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1ff88:	4b10      	ldr	r3, [pc, #64]	; (1ffcc <rand_prio_low_vector_get+0x48>)
   1ff8a:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   1ff8c:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   1ff8e:	685d      	ldr	r5, [r3, #4]
   1ff90:	b14d      	cbz	r5, 1ffa6 <rand_prio_low_vector_get+0x22>
   1ff92:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   1ff94:	2300      	movs	r3, #0
   1ff96:	4621      	mov	r1, r4
   1ff98:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1ff9a:	1e04      	subs	r4, r0, #0
   1ff9c:	db05      	blt.n	1ffaa <rand_prio_low_vector_get+0x26>
	return ret >= 0 ? ret : 0;
   1ff9e:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1ffa2:	b2c0      	uxtb	r0, r0
   1ffa4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1ffa6:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1ffaa:	4d09      	ldr	r5, [pc, #36]	; (1ffd0 <rand_prio_low_vector_get+0x4c>)
   1ffac:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   1ffb0:	462a      	mov	r2, r5
   1ffb2:	4908      	ldr	r1, [pc, #32]	; (1ffd4 <rand_prio_low_vector_get+0x50>)
   1ffb4:	4808      	ldr	r0, [pc, #32]	; (1ffd8 <rand_prio_low_vector_get+0x54>)
   1ffb6:	f00c f8c7 	bl	2c148 <printk>
   1ffba:	4808      	ldr	r0, [pc, #32]	; (1ffdc <rand_prio_low_vector_get+0x58>)
   1ffbc:	f00c f8c4 	bl	2c148 <printk>
   1ffc0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1ffc4:	4628      	mov	r0, r5
   1ffc6:	f00c fac4 	bl	2c552 <assert_post_action>
   1ffca:	e7e8      	b.n	1ff9e <rand_prio_low_vector_get+0x1a>
   1ffcc:	20002f50 	.word	0x20002f50
   1ffd0:	00035488 	.word	0x00035488
   1ffd4:	00035500 	.word	0x00035500
   1ffd8:	00031df4 	.word	0x00031df4
   1ffdc:	00035550 	.word	0x00035550

0001ffe0 <event_packet_process>:
{
   1ffe0:	b570      	push	{r4, r5, r6, lr}
   1ffe2:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1ffe4:	f00f fdf1 	bl	2fbca <event_packet_is_discardable>
   1ffe8:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1ffea:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ffec:	461d      	mov	r5, r3
   1ffee:	b183      	cbz	r3, 20012 <event_packet_process+0x32>
   1fff0:	2200      	movs	r2, #0
   1fff2:	2300      	movs	r3, #0
   1fff4:	4629      	mov	r1, r5
   1fff6:	f7f6 fa85 	bl	16504 <bt_buf_get_evt>
	if (!evt_buf) {
   1fffa:	4606      	mov	r6, r0
   1fffc:	b170      	cbz	r0, 2001c <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1fffe:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20000:	3202      	adds	r2, #2
   20002:	4621      	mov	r1, r4
   20004:	3008      	adds	r0, #8
   20006:	f00e ff4f 	bl	2eea8 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   2000a:	4630      	mov	r0, r6
   2000c:	f7f7 ff64 	bl	17ed8 <bt_recv>
}
   20010:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   20012:	f04f 32ff 	mov.w	r2, #4294967295
   20016:	f04f 33ff 	mov.w	r3, #4294967295
   2001a:	e7eb      	b.n	1fff4 <event_packet_process+0x14>
		if (discardable) {
   2001c:	2d00      	cmp	r5, #0
   2001e:	d1f7      	bne.n	20010 <event_packet_process+0x30>
   20020:	4b08      	ldr	r3, [pc, #32]	; (20044 <event_packet_process+0x64>)
   20022:	4a09      	ldr	r2, [pc, #36]	; (20048 <event_packet_process+0x68>)
   20024:	1a9b      	subs	r3, r3, r2
   20026:	08db      	lsrs	r3, r3, #3
		BT_ERR("No event buffer available");
   20028:	f04f 0100 	mov.w	r1, #0
   2002c:	2201      	movs	r2, #1
   2002e:	f362 0102 	bfi	r1, r2, #0, #3
   20032:	f36f 01c5 	bfc	r1, #3, #3
   20036:	f363 118f 	bfi	r1, r3, #6, #10
   2003a:	4804      	ldr	r0, [pc, #16]	; (2004c <event_packet_process+0x6c>)
   2003c:	f7f3 fc30 	bl	138a0 <log_0>
		return;
   20040:	e7e6      	b.n	20010 <event_packet_process+0x30>
   20042:	bf00      	nop
   20044:	000319c0 	.word	0x000319c0
   20048:	00031908 	.word	0x00031908
   2004c:	00035594 	.word	0x00035594

00020050 <data_packet_process>:
{
   20050:	b538      	push	{r3, r4, r5, lr}
   20052:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   20054:	f04f 32ff 	mov.w	r2, #4294967295
   20058:	f04f 33ff 	mov.w	r3, #4294967295
   2005c:	2003      	movs	r0, #3
   2005e:	f7f6 fa05 	bl	1646c <bt_buf_get_rx>
	if (!data_buf) {
   20062:	b150      	cbz	r0, 2007a <data_packet_process+0x2a>
   20064:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   20066:	8862      	ldrh	r2, [r4, #2]
   20068:	3204      	adds	r2, #4
   2006a:	4621      	mov	r1, r4
   2006c:	3008      	adds	r0, #8
   2006e:	f00e ff1b 	bl	2eea8 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   20072:	4628      	mov	r0, r5
   20074:	f7f7 ff30 	bl	17ed8 <bt_recv>
}
   20078:	bd38      	pop	{r3, r4, r5, pc}
   2007a:	4b08      	ldr	r3, [pc, #32]	; (2009c <data_packet_process+0x4c>)
   2007c:	4a08      	ldr	r2, [pc, #32]	; (200a0 <data_packet_process+0x50>)
   2007e:	1a9b      	subs	r3, r3, r2
   20080:	08db      	lsrs	r3, r3, #3
		BT_ERR("No data buffer available");
   20082:	f04f 0100 	mov.w	r1, #0
   20086:	2201      	movs	r2, #1
   20088:	f362 0102 	bfi	r1, r2, #0, #3
   2008c:	f36f 01c5 	bfc	r1, #3, #3
   20090:	f363 118f 	bfi	r1, r3, #6, #10
   20094:	4803      	ldr	r0, [pc, #12]	; (200a4 <data_packet_process+0x54>)
   20096:	f7f3 fc03 	bl	138a0 <log_0>
		return;
   2009a:	e7ed      	b.n	20078 <data_packet_process+0x28>
   2009c:	000319c0 	.word	0x000319c0
   200a0:	00031908 	.word	0x00031908
   200a4:	000355b0 	.word	0x000355b0

000200a8 <recv_thread>:
{
   200a8:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   200aa:	2500      	movs	r5, #0
	bool received_evt = false;
   200ac:	462c      	mov	r4, r5
   200ae:	e00a      	b.n	200c6 <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   200b0:	4d0b      	ldr	r5, [pc, #44]	; (200e0 <recv_thread+0x38>)
   200b2:	4628      	mov	r0, r5
   200b4:	f00f fdb9 	bl	2fc2a <fetch_and_process_hci_evt>
   200b8:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   200ba:	4628      	mov	r0, r5
   200bc:	f00f fdce 	bl	2fc5c <fetch_and_process_acl_data>
   200c0:	4605      	mov	r5, r0
	z_impl_k_yield();
   200c2:	f006 fa81 	bl	265c8 <z_impl_k_yield>
		if (!received_evt && !received_data) {
   200c6:	2c00      	cmp	r4, #0
   200c8:	d1f2      	bne.n	200b0 <recv_thread+0x8>
   200ca:	2d00      	cmp	r5, #0
   200cc:	d1f0      	bne.n	200b0 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   200ce:	f04f 32ff 	mov.w	r2, #4294967295
   200d2:	f04f 33ff 	mov.w	r3, #4294967295
   200d6:	4803      	ldr	r0, [pc, #12]	; (200e4 <recv_thread+0x3c>)
   200d8:	f004 fb42 	bl	24760 <z_impl_k_sem_take>
   200dc:	e7e8      	b.n	200b0 <recv_thread+0x8>
   200de:	bf00      	nop
   200e0:	20002f54 	.word	0x20002f54
   200e4:	20000c8c 	.word	0x20000c8c

000200e8 <configure_memory_usage>:
{
   200e8:	b500      	push	{lr}
   200ea:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   200ec:	2000      	movs	r0, #0
   200ee:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   200f2:	aa01      	add	r2, sp, #4
   200f4:	2101      	movs	r1, #1
   200f6:	f7e4 fa57 	bl	45a8 <sdc_cfg_set>
	if (required_memory < 0) {
   200fa:	2800      	cmp	r0, #0
   200fc:	db3c      	blt.n	20178 <configure_memory_usage+0x90>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   200fe:	2301      	movs	r3, #1
   20100:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20104:	aa01      	add	r2, sp, #4
   20106:	2102      	movs	r1, #2
   20108:	2000      	movs	r0, #0
   2010a:	f7e4 fa4d 	bl	45a8 <sdc_cfg_set>
	if (required_memory < 0) {
   2010e:	2800      	cmp	r0, #0
   20110:	db32      	blt.n	20178 <configure_memory_usage+0x90>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   20112:	231b      	movs	r3, #27
   20114:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   20118:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   2011c:	2302      	movs	r3, #2
   2011e:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   20122:	2103      	movs	r1, #3
   20124:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20128:	aa01      	add	r2, sp, #4
   2012a:	2000      	movs	r0, #0
   2012c:	f7e4 fa3c 	bl	45a8 <sdc_cfg_set>
	if (required_memory < 0) {
   20130:	2800      	cmp	r0, #0
   20132:	db21      	blt.n	20178 <configure_memory_usage+0x90>
	cfg.event_length.event_length_us =
   20134:	f641 534c 	movw	r3, #7500	; 0x1d4c
   20138:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2013a:	aa01      	add	r2, sp, #4
   2013c:	2104      	movs	r1, #4
   2013e:	2000      	movs	r0, #0
   20140:	f7e4 fa32 	bl	45a8 <sdc_cfg_set>
	if (required_memory < 0) {
   20144:	2800      	cmp	r0, #0
   20146:	db17      	blt.n	20178 <configure_memory_usage+0x90>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   20148:	2301      	movs	r3, #1
   2014a:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2014e:	aa01      	add	r2, sp, #4
   20150:	2105      	movs	r1, #5
   20152:	2000      	movs	r0, #0
   20154:	f7e4 fa28 	bl	45a8 <sdc_cfg_set>
	if (required_memory < 0) {
   20158:	2800      	cmp	r0, #0
   2015a:	db0d      	blt.n	20178 <configure_memory_usage+0x90>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   2015c:	231f      	movs	r3, #31
   2015e:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20162:	aa01      	add	r2, sp, #4
   20164:	2107      	movs	r1, #7
   20166:	2000      	movs	r0, #0
   20168:	f7e4 fa1e 	bl	45a8 <sdc_cfg_set>
		if (required_memory < 0) {
   2016c:	2800      	cmp	r0, #0
   2016e:	db03      	blt.n	20178 <configure_memory_usage+0x90>
	if (required_memory > sizeof(sdc_mempool)) {
   20170:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   20174:	d803      	bhi.n	2017e <configure_memory_usage+0x96>
	return 0;
   20176:	2000      	movs	r0, #0
}
   20178:	b003      	add	sp, #12
   2017a:	f85d fb04 	ldr.w	pc, [sp], #4
   2017e:	4a0e      	ldr	r2, [pc, #56]	; (201b8 <configure_memory_usage+0xd0>)
   20180:	4b0e      	ldr	r3, [pc, #56]	; (201bc <configure_memory_usage+0xd4>)
   20182:	1ad2      	subs	r2, r2, r3
   20184:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Allocated memory too low: %u < %u",
   20186:	f04f 0300 	mov.w	r3, #0
   2018a:	2101      	movs	r1, #1
   2018c:	f361 0302 	bfi	r3, r1, #0, #3
   20190:	f36f 03c5 	bfc	r3, #3, #3
   20194:	f362 138f 	bfi	r3, r2, #6, #10
   20198:	4602      	mov	r2, r0
   2019a:	f44f 61af 	mov.w	r1, #1400	; 0x578
   2019e:	4808      	ldr	r0, [pc, #32]	; (201c0 <configure_memory_usage+0xd8>)
   201a0:	f7f3 fbe4 	bl	1396c <log_2>
		k_panic();
   201a4:	4040      	eors	r0, r0
   201a6:	f380 8811 	msr	BASEPRI, r0
   201aa:	f04f 0004 	mov.w	r0, #4
   201ae:	df02      	svc	2
		return -ENOMEM;
   201b0:	f06f 000b 	mvn.w	r0, #11
   201b4:	e7e0      	b.n	20178 <configure_memory_usage+0x90>
   201b6:	bf00      	nop
   201b8:	000319c0 	.word	0x000319c0
   201bc:	00031908 	.word	0x00031908
   201c0:	000355cc 	.word	0x000355cc

000201c4 <hci_driver_open>:
{
   201c4:	b530      	push	{r4, r5, lr}
   201c6:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   201c8:	4d41      	ldr	r5, [pc, #260]	; (202d0 <hci_driver_open+0x10c>)
   201ca:	2200      	movs	r2, #0
   201cc:	2300      	movs	r3, #0
   201ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
   201d2:	2400      	movs	r4, #0
   201d4:	9404      	str	r4, [sp, #16]
   201d6:	f06f 0309 	mvn.w	r3, #9
   201da:	9303      	str	r3, [sp, #12]
   201dc:	9402      	str	r4, [sp, #8]
   201de:	9401      	str	r4, [sp, #4]
   201e0:	9400      	str	r4, [sp, #0]
   201e2:	4b3c      	ldr	r3, [pc, #240]	; (202d4 <hci_driver_open+0x110>)
   201e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   201e8:	493b      	ldr	r1, [pc, #236]	; (202d8 <hci_driver_open+0x114>)
   201ea:	4628      	mov	r0, r5
   201ec:	f003 fdf2 	bl	23dd4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   201f0:	493a      	ldr	r1, [pc, #232]	; (202dc <hci_driver_open+0x118>)
   201f2:	4628      	mov	r0, r5
   201f4:	f003 fc82 	bl	23afc <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   201f8:	a80b      	add	r0, sp, #44	; 0x2c
   201fa:	f7e4 f9c7 	bl	458c <sdc_build_revision_get>
   201fe:	4a38      	ldr	r2, [pc, #224]	; (202e0 <hci_driver_open+0x11c>)
   20200:	4b38      	ldr	r3, [pc, #224]	; (202e4 <hci_driver_open+0x120>)
   20202:	1ad2      	subs	r2, r2, r3
   20204:	08d2      	lsrs	r2, r2, #3
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   20206:	f04f 0300 	mov.w	r3, #0
   2020a:	2103      	movs	r1, #3
   2020c:	f361 0302 	bfi	r3, r1, #0, #3
   20210:	f364 03c5 	bfi	r3, r4, #3, #3
   20214:	f362 138f 	bfi	r3, r2, #6, #10
   20218:	2214      	movs	r2, #20
   2021a:	a90b      	add	r1, sp, #44	; 0x2c
   2021c:	4832      	ldr	r0, [pc, #200]	; (202e8 <hci_driver_open+0x124>)
   2021e:	f7f3 fbe1 	bl	139e4 <log_hexdump>
	err = configure_supported_features();
   20222:	f00f fd34 	bl	2fc8e <configure_supported_features>
	if (err) {
   20226:	4604      	mov	r4, r0
   20228:	b110      	cbz	r0, 20230 <hci_driver_open+0x6c>
}
   2022a:	4620      	mov	r0, r4
   2022c:	b011      	add	sp, #68	; 0x44
   2022e:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   20230:	f7ff ff5a 	bl	200e8 <configure_memory_usage>
	if (err) {
   20234:	4604      	mov	r4, r0
   20236:	2800      	cmp	r0, #0
   20238:	d1f7      	bne.n	2022a <hci_driver_open+0x66>
   2023a:	482c      	ldr	r0, [pc, #176]	; (202ec <hci_driver_open+0x128>)
   2023c:	f003 f838 	bl	232b0 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   20240:	4b2b      	ldr	r3, [pc, #172]	; (202f0 <hci_driver_open+0x12c>)
   20242:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   20244:	b1a8      	cbz	r0, 20272 <hci_driver_open+0xae>
	sdc_rand_source_t rand_functions = {
   20246:	4a2b      	ldr	r2, [pc, #172]	; (202f4 <hci_driver_open+0x130>)
   20248:	ab08      	add	r3, sp, #32
   2024a:	ca07      	ldmia	r2, {r0, r1, r2}
   2024c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   20250:	4618      	mov	r0, r3
   20252:	f7e4 fb2f 	bl	48b4 <sdc_rand_source_register>
	if (err) {
   20256:	4604      	mov	r4, r0
   20258:	b9f0      	cbnz	r0, 20298 <hci_driver_open+0xd4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2025a:	f04f 30ff 	mov.w	r0, #4294967295
   2025e:	f04f 31ff 	mov.w	r1, #4294967295
   20262:	f7ff fd85 	bl	1fd70 <multithreading_lock_acquire>
	if (!err) {
   20266:	4605      	mov	r5, r0
   20268:	b350      	cbz	r0, 202c0 <hci_driver_open+0xfc>
	if (err < 0) {
   2026a:	2d00      	cmp	r5, #0
   2026c:	dadd      	bge.n	2022a <hci_driver_open+0x66>
		return err;
   2026e:	462c      	mov	r4, r5
   20270:	e7db      	b.n	2022a <hci_driver_open+0x66>
   20272:	4b1b      	ldr	r3, [pc, #108]	; (202e0 <hci_driver_open+0x11c>)
   20274:	4a1b      	ldr	r2, [pc, #108]	; (202e4 <hci_driver_open+0x120>)
   20276:	1a9b      	subs	r3, r3, r2
   20278:	08db      	lsrs	r3, r3, #3
		BT_ERR("An entropy source is required");
   2027a:	f04f 0100 	mov.w	r1, #0
   2027e:	2201      	movs	r2, #1
   20280:	f362 0102 	bfi	r1, r2, #0, #3
   20284:	f36f 01c5 	bfc	r1, #3, #3
   20288:	f363 118f 	bfi	r1, r3, #6, #10
   2028c:	481a      	ldr	r0, [pc, #104]	; (202f8 <hci_driver_open+0x134>)
   2028e:	f7f3 fb07 	bl	138a0 <log_0>
		return -ENODEV;
   20292:	f06f 0412 	mvn.w	r4, #18
   20296:	e7c8      	b.n	2022a <hci_driver_open+0x66>
   20298:	4b11      	ldr	r3, [pc, #68]	; (202e0 <hci_driver_open+0x11c>)
   2029a:	4a12      	ldr	r2, [pc, #72]	; (202e4 <hci_driver_open+0x120>)
   2029c:	1a9b      	subs	r3, r3, r2
   2029e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to register rand source (%d)", err);
   202a0:	f04f 0200 	mov.w	r2, #0
   202a4:	2101      	movs	r1, #1
   202a6:	f361 0202 	bfi	r2, r1, #0, #3
   202aa:	f36f 02c5 	bfc	r2, #3, #3
   202ae:	f363 128f 	bfi	r2, r3, #6, #10
   202b2:	4601      	mov	r1, r0
   202b4:	4811      	ldr	r0, [pc, #68]	; (202fc <hci_driver_open+0x138>)
   202b6:	f7f3 fb23 	bl	13900 <log_1>
		return -EINVAL;
   202ba:	f06f 0415 	mvn.w	r4, #21
   202be:	e7b4      	b.n	2022a <hci_driver_open+0x66>
		err = sdc_enable(host_signal, sdc_mempool);
   202c0:	490f      	ldr	r1, [pc, #60]	; (20300 <hci_driver_open+0x13c>)
   202c2:	4810      	ldr	r0, [pc, #64]	; (20304 <hci_driver_open+0x140>)
   202c4:	f7e4 f9cc 	bl	4660 <sdc_enable>
   202c8:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   202ca:	f7ff fd5b 	bl	1fd84 <multithreading_lock_release>
   202ce:	e7cc      	b.n	2026a <hci_driver_open+0xa6>
   202d0:	20002328 	.word	0x20002328
   202d4:	000200a9 	.word	0x000200a9
   202d8:	20005760 	.word	0x20005760
   202dc:	000355f0 	.word	0x000355f0
   202e0:	000319c0 	.word	0x000319c0
   202e4:	00031908 	.word	0x00031908
   202e8:	000355f8 	.word	0x000355f8
   202ec:	00035338 	.word	0x00035338
   202f0:	20002f50 	.word	0x20002f50
   202f4:	00031ae0 	.word	0x00031ae0
   202f8:	00035620 	.word	0x00035620
   202fc:	00035640 	.word	0x00035640
   20300:	20002f9c 	.word	0x20002f9c
   20304:	0001fe15 	.word	0x0001fe15

00020308 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   20308:	4b0b      	ldr	r3, [pc, #44]	; (20338 <hci_internal_cmd_put+0x30>)
   2030a:	781b      	ldrb	r3, [r3, #0]
   2030c:	b96b      	cbnz	r3, 2032a <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   2030e:	7883      	ldrb	r3, [r0, #2]
   20310:	3303      	adds	r3, #3
   20312:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   20316:	dc0b      	bgt.n	20330 <hci_internal_cmd_put+0x28>
{
   20318:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   2031a:	4c07      	ldr	r4, [pc, #28]	; (20338 <hci_internal_cmd_put+0x30>)
   2031c:	1c61      	adds	r1, r4, #1
   2031e:	f00f ff54 	bl	301ca <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   20322:	2301      	movs	r3, #1
   20324:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   20326:	2000      	movs	r0, #0
}
   20328:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   2032a:	f04f 30ff 	mov.w	r0, #4294967295
   2032e:	4770      	bx	lr
		return -EINVAL;
   20330:	f06f 0015 	mvn.w	r0, #21
}
   20334:	4770      	bx	lr
   20336:	bf00      	nop
   20338:	20003514 	.word	0x20003514

0002033c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   2033c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   2033e:	4b07      	ldr	r3, [pc, #28]	; (2035c <hci_internal_evt_get+0x20>)
   20340:	781b      	ldrb	r3, [r3, #0]
   20342:	b143      	cbz	r3, 20356 <hci_internal_evt_get+0x1a>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   20344:	4c05      	ldr	r4, [pc, #20]	; (2035c <hci_internal_evt_get+0x20>)
   20346:	78a2      	ldrb	r2, [r4, #2]
   20348:	3202      	adds	r2, #2
   2034a:	1c61      	adds	r1, r4, #1
   2034c:	f010 fab0 	bl	308b0 <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   20350:	2000      	movs	r0, #0
   20352:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   20354:	bd10      	pop	{r4, pc}
	return sdc_hci_evt_get(evt_out);
   20356:	f7ec fc22 	bl	cb9e <sdc_hci_evt_get>
   2035a:	e7fb      	b.n	20354 <hci_internal_evt_get+0x18>
   2035c:	20003514 	.word	0x20003514

00020360 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   20360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20364:	4607      	mov	r7, r0
   20366:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   20368:	4b14      	ldr	r3, [pc, #80]	; (203bc <bt_rand+0x5c>)
   2036a:	681b      	ldr	r3, [r3, #0]
   2036c:	b163      	cbz	r3, 20388 <bt_rand+0x28>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   2036e:	4b13      	ldr	r3, [pc, #76]	; (203bc <bt_rand+0x5c>)
   20370:	681d      	ldr	r5, [r3, #0]
   20372:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   20374:	68ae      	ldr	r6, [r5, #8]
	__ASSERT(api->get_entropy != NULL,
   20376:	6833      	ldr	r3, [r6, #0]
   20378:	b183      	cbz	r3, 2039c <bt_rand+0x3c>
	return api->get_entropy(dev, buffer, length);
   2037a:	6833      	ldr	r3, [r6, #0]
   2037c:	4622      	mov	r2, r4
   2037e:	4639      	mov	r1, r7
   20380:	4628      	mov	r0, r5
   20382:	4798      	blx	r3
}
   20384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20388:	480d      	ldr	r0, [pc, #52]	; (203c0 <bt_rand+0x60>)
   2038a:	f002 ff91 	bl	232b0 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   2038e:	4b0b      	ldr	r3, [pc, #44]	; (203bc <bt_rand+0x5c>)
   20390:	6018      	str	r0, [r3, #0]
		if (!dev) {
   20392:	2800      	cmp	r0, #0
   20394:	d1eb      	bne.n	2036e <bt_rand+0xe>
			return -ENODEV;
   20396:	f06f 0012 	mvn.w	r0, #18
   2039a:	e7f3      	b.n	20384 <bt_rand+0x24>
	__ASSERT(api->get_entropy != NULL,
   2039c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 203d0 <bt_rand+0x70>
   203a0:	234b      	movs	r3, #75	; 0x4b
   203a2:	4642      	mov	r2, r8
   203a4:	4907      	ldr	r1, [pc, #28]	; (203c4 <bt_rand+0x64>)
   203a6:	4808      	ldr	r0, [pc, #32]	; (203c8 <bt_rand+0x68>)
   203a8:	f00b fece 	bl	2c148 <printk>
   203ac:	4807      	ldr	r0, [pc, #28]	; (203cc <bt_rand+0x6c>)
   203ae:	f00b fecb 	bl	2c148 <printk>
   203b2:	214b      	movs	r1, #75	; 0x4b
   203b4:	4640      	mov	r0, r8
   203b6:	f00c f8cc 	bl	2c552 <assert_post_action>
   203ba:	e7de      	b.n	2037a <bt_rand+0x1a>
   203bc:	2000355c 	.word	0x2000355c
   203c0:	00035338 	.word	0x00035338
   203c4:	00035440 	.word	0x00035440
   203c8:	00031df4 	.word	0x00031df4
   203cc:	00035460 	.word	0x00035460
   203d0:	00035410 	.word	0x00035410

000203d4 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   203d4:	b510      	push	{r4, lr}
   203d6:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   203d8:	f00f ff4e 	bl	30278 <m_config_clock_source_get>
   203dc:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   203e0:	2332      	movs	r3, #50	; 0x32
   203e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   203e6:	2300      	movs	r3, #0
   203e8:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   203ec:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   203f0:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   203f4:	4a0c      	ldr	r2, [pc, #48]	; (20428 <mpsl_lib_init+0x54>)
   203f6:	2119      	movs	r1, #25
   203f8:	4668      	mov	r0, sp
   203fa:	f7e3 ff1d 	bl	4238 <mpsl_init>
	if (err) {
   203fe:	4604      	mov	r4, r0
   20400:	b110      	cbz	r0, 20408 <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   20402:	4620      	mov	r0, r4
   20404:	b002      	add	sp, #8
   20406:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   20408:	2201      	movs	r2, #1
   2040a:	2100      	movs	r1, #0
   2040c:	2008      	movs	r0, #8
   2040e:	f7f4 feab 	bl	15168 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   20412:	2201      	movs	r2, #1
   20414:	2100      	movs	r1, #0
   20416:	200b      	movs	r0, #11
   20418:	f7f4 fea6 	bl	15168 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2041c:	2201      	movs	r2, #1
   2041e:	2100      	movs	r1, #0
   20420:	4610      	mov	r0, r2
   20422:	f7f4 fea1 	bl	15168 <z_arm_irq_priority_set>
	return 0;
   20426:	e7ec      	b.n	20402 <mpsl_lib_init+0x2e>
   20428:	0002042d 	.word	0x0002042d

0002042c <m_assert_handler>:
{
   2042c:	b538      	push	{r3, r4, r5, lr}
   2042e:	460d      	mov	r5, r1
   20430:	4b0d      	ldr	r3, [pc, #52]	; (20468 <m_assert_handler+0x3c>)
   20432:	4a0e      	ldr	r2, [pc, #56]	; (2046c <m_assert_handler+0x40>)
   20434:	1a9b      	subs	r3, r3, r2
   20436:	08db      	lsrs	r3, r3, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   20438:	f04f 0400 	mov.w	r4, #0
   2043c:	2201      	movs	r2, #1
   2043e:	f362 0402 	bfi	r4, r2, #0, #3
   20442:	f36f 04c5 	bfc	r4, #3, #3
   20446:	f363 148f 	bfi	r4, r3, #6, #10
   2044a:	f7f3 f8b7 	bl	135bc <z_log_strdup>
   2044e:	4601      	mov	r1, r0
   20450:	4623      	mov	r3, r4
   20452:	462a      	mov	r2, r5
   20454:	4806      	ldr	r0, [pc, #24]	; (20470 <m_assert_handler+0x44>)
   20456:	f7f3 fa89 	bl	1396c <log_2>
	k_oops();
   2045a:	4040      	eors	r0, r0
   2045c:	f380 8811 	msr	BASEPRI, r0
   20460:	f04f 0003 	mov.w	r0, #3
   20464:	df02      	svc	2
}
   20466:	bd38      	pop	{r3, r4, r5, pc}
   20468:	00031990 	.word	0x00031990
   2046c:	00031908 	.word	0x00031908
   20470:	000356c0 	.word	0x000356c0

00020474 <signal_thread>:
{
   20474:	b538      	push	{r3, r4, r5, lr}
   20476:	e003      	b.n	20480 <signal_thread+0xc>
		mpsl_low_priority_process();
   20478:	f7eb ff3d 	bl	c2f6 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   2047c:	f7ff fc82 	bl	1fd84 <multithreading_lock_release>
		k_sem_take(&sem_signal, K_FOREVER);
   20480:	f04f 34ff 	mov.w	r4, #4294967295
   20484:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   20488:	4622      	mov	r2, r4
   2048a:	462b      	mov	r3, r5
   2048c:	480a      	ldr	r0, [pc, #40]	; (204b8 <signal_thread+0x44>)
   2048e:	f004 f967 	bl	24760 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   20492:	4620      	mov	r0, r4
   20494:	4629      	mov	r1, r5
   20496:	f7ff fc6b 	bl	1fd70 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   2049a:	2800      	cmp	r0, #0
   2049c:	d0ec      	beq.n	20478 <signal_thread+0x4>
   2049e:	4c07      	ldr	r4, [pc, #28]	; (204bc <signal_thread+0x48>)
   204a0:	2346      	movs	r3, #70	; 0x46
   204a2:	4622      	mov	r2, r4
   204a4:	4906      	ldr	r1, [pc, #24]	; (204c0 <signal_thread+0x4c>)
   204a6:	4807      	ldr	r0, [pc, #28]	; (204c4 <signal_thread+0x50>)
   204a8:	f00b fe4e 	bl	2c148 <printk>
   204ac:	2146      	movs	r1, #70	; 0x46
   204ae:	4620      	mov	r0, r4
   204b0:	f00c f84f 	bl	2c552 <assert_post_action>
   204b4:	e7e0      	b.n	20478 <signal_thread+0x4>
   204b6:	bf00      	nop
   204b8:	20000ca4 	.word	0x20000ca4
   204bc:	000356d4 	.word	0x000356d4
   204c0:	00035704 	.word	0x00035704
   204c4:	00031df4 	.word	0x00031df4

000204c8 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   204c8:	b530      	push	{r4, r5, lr}
   204ca:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   204cc:	4d0f      	ldr	r5, [pc, #60]	; (2050c <mpsl_signal_thread_init+0x44>)
   204ce:	2200      	movs	r2, #0
   204d0:	2300      	movs	r3, #0
   204d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   204d6:	2400      	movs	r4, #0
   204d8:	9404      	str	r4, [sp, #16]
   204da:	f06f 0309 	mvn.w	r3, #9
   204de:	9303      	str	r3, [sp, #12]
   204e0:	9402      	str	r4, [sp, #8]
   204e2:	9401      	str	r4, [sp, #4]
   204e4:	9400      	str	r4, [sp, #0]
   204e6:	4b0a      	ldr	r3, [pc, #40]	; (20510 <mpsl_signal_thread_init+0x48>)
   204e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   204ec:	4909      	ldr	r1, [pc, #36]	; (20514 <mpsl_signal_thread_init+0x4c>)
   204ee:	4628      	mov	r0, r5
   204f0:	f003 fc70 	bl	23dd4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   204f4:	4908      	ldr	r1, [pc, #32]	; (20518 <mpsl_signal_thread_init+0x50>)
   204f6:	4628      	mov	r0, r5
   204f8:	f003 fb00 	bl	23afc <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   204fc:	4622      	mov	r2, r4
   204fe:	2104      	movs	r1, #4
   20500:	2019      	movs	r0, #25
   20502:	f7f4 fe31 	bl	15168 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   20506:	4620      	mov	r0, r4
   20508:	b009      	add	sp, #36	; 0x24
   2050a:	bd30      	pop	{r4, r5, pc}
   2050c:	200023e0 	.word	0x200023e0
   20510:	00020475 	.word	0x00020475
   20514:	20005b80 	.word	0x20005b80
   20518:	00035714 	.word	0x00035714

0002051c <mpsl_low_prio_irq_handler>:
{
   2051c:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2051e:	4802      	ldr	r0, [pc, #8]	; (20528 <mpsl_low_prio_irq_handler+0xc>)
   20520:	f004 f8d6 	bl	246d0 <z_impl_k_sem_give>
}
   20524:	bd08      	pop	{r3, pc}
   20526:	bf00      	nop
   20528:	20000ca4 	.word	0x20000ca4

0002052c <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   2052c:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2052e:	4b02      	ldr	r3, [pc, #8]	; (20538 <mpsl_hfclk_callback+0xc>)
   20530:	681b      	ldr	r3, [r3, #0]
   20532:	2000      	movs	r0, #0
   20534:	4798      	blx	r3
}
   20536:	bd08      	pop	{r3, pc}
   20538:	20003560 	.word	0x20003560

0002053c <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2053c:	b510      	push	{r4, lr}
	switch (domain) {
   2053e:	b128      	cbz	r0, 2054c <nrfx_clock_start+0x10>
   20540:	2801      	cmp	r0, #1
   20542:	d108      	bne.n	20556 <nrfx_clock_start+0x1a>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   20544:	480b      	ldr	r0, [pc, #44]	; (20574 <nrfx_clock_start+0x38>)
   20546:	f7e3 fcc3 	bl	3ed0 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   2054a:	bd10      	pop	{r4, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2054c:	4b0a      	ldr	r3, [pc, #40]	; (20578 <nrfx_clock_start+0x3c>)
   2054e:	681b      	ldr	r3, [r3, #0]
   20550:	2001      	movs	r0, #1
   20552:	4798      	blx	r3
		break;
   20554:	e7f9      	b.n	2054a <nrfx_clock_start+0xe>
		__ASSERT(0, "Not supported");
   20556:	4c09      	ldr	r4, [pc, #36]	; (2057c <nrfx_clock_start+0x40>)
   20558:	231c      	movs	r3, #28
   2055a:	4622      	mov	r2, r4
   2055c:	4908      	ldr	r1, [pc, #32]	; (20580 <nrfx_clock_start+0x44>)
   2055e:	4809      	ldr	r0, [pc, #36]	; (20584 <nrfx_clock_start+0x48>)
   20560:	f00b fdf2 	bl	2c148 <printk>
   20564:	4808      	ldr	r0, [pc, #32]	; (20588 <nrfx_clock_start+0x4c>)
   20566:	f00b fdef 	bl	2c148 <printk>
   2056a:	211c      	movs	r1, #28
   2056c:	4620      	mov	r0, r4
   2056e:	f00b fff0 	bl	2c552 <assert_post_action>
}
   20572:	e7ea      	b.n	2054a <nrfx_clock_start+0xe>
   20574:	0002052d 	.word	0x0002052d
   20578:	20003560 	.word	0x20003560
   2057c:	0003572c 	.word	0x0003572c
   20580:	000364dc 	.word	0x000364dc
   20584:	00031df4 	.word	0x00031df4
   20588:	0003576c 	.word	0x0003576c

0002058c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
	switch (domain) {
   2058c:	b1a0      	cbz	r0, 205b8 <nrfx_clock_stop+0x2c>
{
   2058e:	b510      	push	{r4, lr}
	switch (domain) {
   20590:	2801      	cmp	r0, #1
   20592:	d102      	bne.n	2059a <nrfx_clock_stop+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_release();
   20594:	f7e3 fc8e 	bl	3eb4 <mpsl_clock_hfclk_release>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   20598:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Not supported");
   2059a:	4c08      	ldr	r4, [pc, #32]	; (205bc <nrfx_clock_stop+0x30>)
   2059c:	232a      	movs	r3, #42	; 0x2a
   2059e:	4622      	mov	r2, r4
   205a0:	4907      	ldr	r1, [pc, #28]	; (205c0 <nrfx_clock_stop+0x34>)
   205a2:	4808      	ldr	r0, [pc, #32]	; (205c4 <nrfx_clock_stop+0x38>)
   205a4:	f00b fdd0 	bl	2c148 <printk>
   205a8:	4807      	ldr	r0, [pc, #28]	; (205c8 <nrfx_clock_stop+0x3c>)
   205aa:	f00b fdcd 	bl	2c148 <printk>
   205ae:	212a      	movs	r1, #42	; 0x2a
   205b0:	4620      	mov	r0, r4
   205b2:	f00b ffce 	bl	2c552 <assert_post_action>
}
   205b6:	e7ef      	b.n	20598 <nrfx_clock_stop+0xc>
   205b8:	4770      	bx	lr
   205ba:	bf00      	nop
   205bc:	0003572c 	.word	0x0003572c
   205c0:	000364dc 	.word	0x000364dc
   205c4:	00031df4 	.word	0x00031df4
   205c8:	0003576c 	.word	0x0003576c

000205cc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   205cc:	4b01      	ldr	r3, [pc, #4]	; (205d4 <nrfx_clock_init+0x8>)
   205ce:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   205d0:	4801      	ldr	r0, [pc, #4]	; (205d8 <nrfx_clock_init+0xc>)
   205d2:	4770      	bx	lr
   205d4:	20003560 	.word	0x20003560
   205d8:	0bad0000 	.word	0x0bad0000

000205dc <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   205dc:	4b03      	ldr	r3, [pc, #12]	; (205ec <nrf52_errata_36+0x10>)
   205de:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   205e0:	2b08      	cmp	r3, #8
   205e2:	d001      	beq.n	205e8 <nrf52_errata_36+0xc>
        return false;
   205e4:	2000      	movs	r0, #0
   205e6:	4770      	bx	lr
                        return true;
   205e8:	2001      	movs	r0, #1
}
   205ea:	4770      	bx	lr
   205ec:	10000130 	.word	0x10000130

000205f0 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   205f0:	4b03      	ldr	r3, [pc, #12]	; (20600 <nrf52_errata_66+0x10>)
   205f2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   205f4:	2b08      	cmp	r3, #8
   205f6:	d001      	beq.n	205fc <nrf52_errata_66+0xc>
        return false;
   205f8:	2000      	movs	r0, #0
   205fa:	4770      	bx	lr
                        return true;
   205fc:	2001      	movs	r0, #1
}
   205fe:	4770      	bx	lr
   20600:	10000130 	.word	0x10000130

00020604 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20604:	4b08      	ldr	r3, [pc, #32]	; (20628 <nrf52_errata_98+0x24>)
   20606:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20608:	3304      	adds	r3, #4
   2060a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   2060c:	2a08      	cmp	r2, #8
   2060e:	d001      	beq.n	20614 <nrf52_errata_98+0x10>
        return false;
   20610:	2000      	movs	r0, #0
   20612:	4770      	bx	lr
                switch(var2)
   20614:	2b00      	cmp	r3, #0
   20616:	d804      	bhi.n	20622 <nrf52_errata_98+0x1e>
   20618:	e8df f003 	tbb	[pc, r3]
   2061c:	01          	.byte	0x01
   2061d:	00          	.byte	0x00
            if (var1 == 0x08)
   2061e:	2001      	movs	r0, #1
   20620:	4770      	bx	lr
                        return false;
   20622:	2000      	movs	r0, #0
}
   20624:	4770      	bx	lr
   20626:	bf00      	nop
   20628:	10000130 	.word	0x10000130

0002062c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2062c:	4b08      	ldr	r3, [pc, #32]	; (20650 <nrf52_errata_103+0x24>)
   2062e:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20630:	3304      	adds	r3, #4
   20632:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   20634:	2a08      	cmp	r2, #8
   20636:	d001      	beq.n	2063c <nrf52_errata_103+0x10>
        return false;
   20638:	2000      	movs	r0, #0
   2063a:	4770      	bx	lr
                switch(var2)
   2063c:	2b00      	cmp	r3, #0
   2063e:	d804      	bhi.n	2064a <nrf52_errata_103+0x1e>
   20640:	e8df f003 	tbb	[pc, r3]
   20644:	01          	.byte	0x01
   20645:	00          	.byte	0x00
            if (var1 == 0x08)
   20646:	2001      	movs	r0, #1
   20648:	4770      	bx	lr
                        return false;
   2064a:	2000      	movs	r0, #0
}
   2064c:	4770      	bx	lr
   2064e:	bf00      	nop
   20650:	10000130 	.word	0x10000130

00020654 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20654:	4b08      	ldr	r3, [pc, #32]	; (20678 <nrf52_errata_115+0x24>)
   20656:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20658:	3304      	adds	r3, #4
   2065a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   2065c:	2a08      	cmp	r2, #8
   2065e:	d001      	beq.n	20664 <nrf52_errata_115+0x10>
        return false;
   20660:	2000      	movs	r0, #0
   20662:	4770      	bx	lr
                switch(var2)
   20664:	2b00      	cmp	r3, #0
   20666:	d804      	bhi.n	20672 <nrf52_errata_115+0x1e>
   20668:	e8df f003 	tbb	[pc, r3]
   2066c:	01          	.byte	0x01
   2066d:	00          	.byte	0x00
            if (var1 == 0x08)
   2066e:	2001      	movs	r0, #1
   20670:	4770      	bx	lr
                        return false;
   20672:	2000      	movs	r0, #0
}
   20674:	4770      	bx	lr
   20676:	bf00      	nop
   20678:	10000130 	.word	0x10000130

0002067c <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2067c:	4b08      	ldr	r3, [pc, #32]	; (206a0 <nrf52_errata_120+0x24>)
   2067e:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20680:	3304      	adds	r3, #4
   20682:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   20684:	2a08      	cmp	r2, #8
   20686:	d001      	beq.n	2068c <nrf52_errata_120+0x10>
        return false;
   20688:	2000      	movs	r0, #0
   2068a:	4770      	bx	lr
                switch(var2)
   2068c:	2b00      	cmp	r3, #0
   2068e:	d804      	bhi.n	2069a <nrf52_errata_120+0x1e>
   20690:	e8df f003 	tbb	[pc, r3]
   20694:	01          	.byte	0x01
   20695:	00          	.byte	0x00
            if (var1 == 0x08)
   20696:	2001      	movs	r0, #1
   20698:	4770      	bx	lr
                        return false;
   2069a:	2000      	movs	r0, #0
}
   2069c:	4770      	bx	lr
   2069e:	bf00      	nop
   206a0:	10000130 	.word	0x10000130

000206a4 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   206a4:	4b03      	ldr	r3, [pc, #12]	; (206b4 <nrf52_errata_136+0x10>)
   206a6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   206a8:	2b08      	cmp	r3, #8
   206aa:	d001      	beq.n	206b0 <nrf52_errata_136+0xc>
        return false;
   206ac:	2000      	movs	r0, #0
   206ae:	4770      	bx	lr
                        return true;
   206b0:	2001      	movs	r0, #1
}
   206b2:	4770      	bx	lr
   206b4:	10000130 	.word	0x10000130

000206b8 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   206b8:	4b06      	ldr	r3, [pc, #24]	; (206d4 <nrf52_configuration_249+0x1c>)
   206ba:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   206bc:	4a06      	ldr	r2, [pc, #24]	; (206d8 <nrf52_configuration_249+0x20>)
   206be:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   206c0:	2b08      	cmp	r3, #8
   206c2:	d001      	beq.n	206c8 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   206c4:	2000      	movs	r0, #0
   206c6:	4770      	bx	lr
                switch(var2)
   206c8:	2a04      	cmp	r2, #4
   206ca:	d801      	bhi.n	206d0 <nrf52_configuration_249+0x18>
   206cc:	2000      	movs	r0, #0
   206ce:	4770      	bx	lr
                        return true;
   206d0:	2001      	movs	r0, #1
    #endif
}
   206d2:	4770      	bx	lr
   206d4:	10000130 	.word	0x10000130
   206d8:	10000134 	.word	0x10000134

000206dc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   206dc:	4b02      	ldr	r3, [pc, #8]	; (206e8 <nvmc_wait+0xc>)
   206de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   206e2:	2b00      	cmp	r3, #0
   206e4:	d0fa      	beq.n	206dc <nvmc_wait>
}
   206e6:	4770      	bx	lr
   206e8:	4001e000 	.word	0x4001e000

000206ec <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   206ec:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   206ee:	4b03      	ldr	r3, [pc, #12]	; (206fc <nvmc_config+0x10>)
   206f0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   206f4:	f7ff fff2 	bl	206dc <nvmc_wait>
}
   206f8:	bd08      	pop	{r3, pc}
   206fa:	bf00      	nop
   206fc:	4001e000 	.word	0x4001e000

00020700 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   20700:	4b01      	ldr	r3, [pc, #4]	; (20708 <SystemCoreClockUpdate+0x8>)
   20702:	4a02      	ldr	r2, [pc, #8]	; (2070c <SystemCoreClockUpdate+0xc>)
   20704:	601a      	str	r2, [r3, #0]
}
   20706:	4770      	bx	lr
   20708:	200007dc 	.word	0x200007dc
   2070c:	03d09000 	.word	0x03d09000

00020710 <SystemInit>:

void SystemInit(void)
{
   20710:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   20712:	f7ff ff63 	bl	205dc <nrf52_errata_36>
   20716:	b140      	cbz	r0, 2072a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   20718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2071c:	2200      	movs	r2, #0
   2071e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   20722:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   20726:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   2072a:	f7ff ff61 	bl	205f0 <nrf52_errata_66>
   2072e:	2800      	cmp	r0, #0
   20730:	d046      	beq.n	207c0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   20732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20736:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   2073a:	4b56      	ldr	r3, [pc, #344]	; (20894 <SystemInit+0x184>)
   2073c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   20740:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   20744:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   20748:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   2074c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   20750:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   20754:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   20758:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   2075c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   20760:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20764:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   20768:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   2076c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   20770:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   20774:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   20778:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   2077c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   20780:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   20784:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   20788:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   2078c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   20790:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   20794:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   20798:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   2079c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   207a0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   207a4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   207a8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   207ac:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   207b0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   207b4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   207b8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   207bc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   207c0:	f7ff ff20 	bl	20604 <nrf52_errata_98>
   207c4:	b110      	cbz	r0, 207cc <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   207c6:	4b34      	ldr	r3, [pc, #208]	; (20898 <SystemInit+0x188>)
   207c8:	4a34      	ldr	r2, [pc, #208]	; (2089c <SystemInit+0x18c>)
   207ca:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   207cc:	f7ff ff2e 	bl	2062c <nrf52_errata_103>
   207d0:	b118      	cbz	r0, 207da <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   207d2:	4b33      	ldr	r3, [pc, #204]	; (208a0 <SystemInit+0x190>)
   207d4:	22fb      	movs	r2, #251	; 0xfb
   207d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   207da:	f7ff ff3b 	bl	20654 <nrf52_errata_115>
   207de:	b148      	cbz	r0, 207f4 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   207e0:	4930      	ldr	r1, [pc, #192]	; (208a4 <SystemInit+0x194>)
   207e2:	680b      	ldr	r3, [r1, #0]
   207e4:	f023 030f 	bic.w	r3, r3, #15
   207e8:	4a2f      	ldr	r2, [pc, #188]	; (208a8 <SystemInit+0x198>)
   207ea:	6812      	ldr	r2, [r2, #0]
   207ec:	f002 020f 	and.w	r2, r2, #15
   207f0:	4313      	orrs	r3, r2
   207f2:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   207f4:	f7ff ff42 	bl	2067c <nrf52_errata_120>
   207f8:	b118      	cbz	r0, 20802 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   207fa:	4b2c      	ldr	r3, [pc, #176]	; (208ac <SystemInit+0x19c>)
   207fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   20800:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   20802:	f7ff ff4f 	bl	206a4 <nrf52_errata_136>
   20806:	b160      	cbz	r0, 20822 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   20808:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2080c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   20810:	f013 0f01 	tst.w	r3, #1
   20814:	d005      	beq.n	20822 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   20816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2081a:	f06f 0201 	mvn.w	r2, #1
   2081e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   20822:	f7ff ff49 	bl	206b8 <nrf52_configuration_249>
   20826:	b138      	cbz	r0, 20838 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   20828:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2082c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   20830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20834:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20838:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2083c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   20840:	2b00      	cmp	r3, #0
   20842:	db08      	blt.n	20856 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   20844:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20848:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2084c:	2b00      	cmp	r3, #0
   2084e:	db02      	blt.n	20856 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   20850:	f7ff ff56 	bl	20700 <SystemCoreClockUpdate>
}
   20854:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   20856:	2001      	movs	r0, #1
   20858:	f7ff ff48 	bl	206ec <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2085c:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   20860:	2512      	movs	r5, #18
   20862:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   20866:	f7ff ff39 	bl	206dc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2086a:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   2086e:	f7ff ff35 	bl	206dc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   20872:	2000      	movs	r0, #0
   20874:	f7ff ff3a 	bl	206ec <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   20878:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2087c:	490c      	ldr	r1, [pc, #48]	; (208b0 <SystemInit+0x1a0>)
   2087e:	68ca      	ldr	r2, [r1, #12]
   20880:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20884:	4b0b      	ldr	r3, [pc, #44]	; (208b4 <SystemInit+0x1a4>)
   20886:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20888:	60cb      	str	r3, [r1, #12]
   2088a:	f3bf 8f4f 	dsb	sy
    __NOP();
   2088e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   20890:	e7fd      	b.n	2088e <SystemInit+0x17e>
   20892:	bf00      	nop
   20894:	4000c000 	.word	0x4000c000
   20898:	4000568c 	.word	0x4000568c
   2089c:	00038148 	.word	0x00038148
   208a0:	4000f000 	.word	0x4000f000
   208a4:	40000ee4 	.word	0x40000ee4
   208a8:	10000258 	.word	0x10000258
   208ac:	40029640 	.word	0x40029640
   208b0:	e000ed00 	.word	0xe000ed00
   208b4:	05fa0004 	.word	0x05fa0004

000208b8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   208b8:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   208ba:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   208bc:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   208c0:	f1d3 031f 	rsbs	r3, r3, #31
   208c4:	d415      	bmi.n	208f2 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   208c6:	2201      	movs	r2, #1
   208c8:	409a      	lsls	r2, r3
   208ca:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   208ce:	f3bf 8f5b 	dmb	ish
   208d2:	e850 5f00 	ldrex	r5, [r0]
   208d6:	42a5      	cmp	r5, r4
   208d8:	d104      	bne.n	208e4 <nrfx_flag32_alloc+0x2c>
   208da:	e840 2c00 	strex	ip, r2, [r0]
   208de:	f1bc 0f00 	cmp.w	ip, #0
   208e2:	d1f6      	bne.n	208d2 <nrfx_flag32_alloc+0x1a>
   208e4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   208e8:	d1e7      	bne.n	208ba <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   208ea:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   208ec:	4802      	ldr	r0, [pc, #8]	; (208f8 <nrfx_flag32_alloc+0x40>)
}
   208ee:	bc30      	pop	{r4, r5}
   208f0:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   208f2:	4802      	ldr	r0, [pc, #8]	; (208fc <nrfx_flag32_alloc+0x44>)
   208f4:	e7fb      	b.n	208ee <nrfx_flag32_alloc+0x36>
   208f6:	bf00      	nop
   208f8:	0bad0000 	.word	0x0bad0000
   208fc:	0bad0002 	.word	0x0bad0002

00020900 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   20900:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   20902:	6803      	ldr	r3, [r0, #0]
   20904:	460c      	mov	r4, r1
   20906:	fa23 f101 	lsr.w	r1, r3, r1
   2090a:	f011 0f01 	tst.w	r1, #1
   2090e:	d114      	bne.n	2093a <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   20910:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   20912:	2301      	movs	r3, #1
   20914:	40a3      	lsls	r3, r4
   20916:	4313      	orrs	r3, r2
   20918:	f3bf 8f5b 	dmb	ish
   2091c:	e850 1f00 	ldrex	r1, [r0]
   20920:	4291      	cmp	r1, r2
   20922:	d104      	bne.n	2092e <nrfx_flag32_free+0x2e>
   20924:	e840 3c00 	strex	ip, r3, [r0]
   20928:	f1bc 0f00 	cmp.w	ip, #0
   2092c:	d1f6      	bne.n	2091c <nrfx_flag32_free+0x1c>
   2092e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20932:	d1ed      	bne.n	20910 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   20934:	4802      	ldr	r0, [pc, #8]	; (20940 <nrfx_flag32_free+0x40>)
}
   20936:	bc10      	pop	{r4}
   20938:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   2093a:	4802      	ldr	r0, [pc, #8]	; (20944 <nrfx_flag32_free+0x44>)
   2093c:	e7fb      	b.n	20936 <nrfx_flag32_free+0x36>
   2093e:	bf00      	nop
   20940:	0bad0000 	.word	0x0bad0000
   20944:	0bad0004 	.word	0x0bad0004

00020948 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   20948:	3008      	adds	r0, #8
   2094a:	4b03      	ldr	r3, [pc, #12]	; (20958 <pin_in_use+0x10>)
   2094c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20950:	f000 0001 	and.w	r0, r0, #1
   20954:	4770      	bx	lr
   20956:	bf00      	nop
   20958:	200007e0 	.word	0x200007e0

0002095c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2095c:	3008      	adds	r0, #8
   2095e:	4b03      	ldr	r3, [pc, #12]	; (2096c <pin_in_use_by_te+0x10>)
   20960:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20964:	f3c0 1040 	ubfx	r0, r0, #5, #1
   20968:	4770      	bx	lr
   2096a:	bf00      	nop
   2096c:	200007e0 	.word	0x200007e0

00020970 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   20970:	3008      	adds	r0, #8
   20972:	4b04      	ldr	r3, [pc, #16]	; (20984 <pin_has_trigger+0x14>)
   20974:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20978:	f010 001c 	ands.w	r0, r0, #28
   2097c:	bf18      	it	ne
   2097e:	2001      	movne	r0, #1
   20980:	4770      	bx	lr
   20982:	bf00      	nop
   20984:	200007e0 	.word	0x200007e0

00020988 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20988:	3008      	adds	r0, #8
   2098a:	4b03      	ldr	r3, [pc, #12]	; (20998 <pin_is_output+0x10>)
   2098c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20990:	f3c0 0040 	ubfx	r0, r0, #1, #1
   20994:	4770      	bx	lr
   20996:	bf00      	nop
   20998:	200007e0 	.word	0x200007e0

0002099c <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2099c:	3008      	adds	r0, #8
   2099e:	4b02      	ldr	r3, [pc, #8]	; (209a8 <pin_te_get+0xc>)
   209a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   209a4:	0b40      	lsrs	r0, r0, #13
   209a6:	4770      	bx	lr
   209a8:	200007e0 	.word	0x200007e0

000209ac <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   209ac:	2200      	movs	r2, #0
   209ae:	e004      	b.n	209ba <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   209b0:	f04f 33ff 	mov.w	r3, #4294967295
   209b4:	4283      	cmp	r3, r0
   209b6:	d00f      	beq.n	209d8 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   209b8:	3201      	adds	r2, #1
   209ba:	2a2f      	cmp	r2, #47	; 0x2f
   209bc:	d80a      	bhi.n	209d4 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   209be:	f102 0308 	add.w	r3, r2, #8
   209c2:	4906      	ldr	r1, [pc, #24]	; (209dc <handler_in_use+0x30>)
   209c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   209c8:	f413 7f80 	tst.w	r3, #256	; 0x100
   209cc:	d0f0      	beq.n	209b0 <handler_in_use+0x4>
   209ce:	f3c3 2343 	ubfx	r3, r3, #9, #4
   209d2:	e7ef      	b.n	209b4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   209d4:	2000      	movs	r0, #0
   209d6:	4770      	bx	lr
            return true;
   209d8:	2001      	movs	r0, #1
}
   209da:	4770      	bx	lr
   209dc:	200007e0 	.word	0x200007e0

000209e0 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   209e0:	2300      	movs	r3, #0
   209e2:	b113      	cbz	r3, 209ea <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   209e4:	f04f 30ff 	mov.w	r0, #4294967295
}
   209e8:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   209ea:	4a07      	ldr	r2, [pc, #28]	; (20a08 <find_handler+0x28>)
   209ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   209f0:	4282      	cmp	r2, r0
   209f2:	d001      	beq.n	209f8 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   209f4:	3301      	adds	r3, #1
   209f6:	e7f4      	b.n	209e2 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   209f8:	4a03      	ldr	r2, [pc, #12]	; (20a08 <find_handler+0x28>)
   209fa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   209fe:	6852      	ldr	r2, [r2, #4]
   20a00:	428a      	cmp	r2, r1
   20a02:	d1f7      	bne.n	209f4 <find_handler+0x14>
            return i;
   20a04:	4618      	mov	r0, r3
   20a06:	4770      	bx	lr
   20a08:	200007e0 	.word	0x200007e0

00020a0c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20a0c:	3008      	adds	r0, #8
   20a0e:	4b06      	ldr	r3, [pc, #24]	; (20a28 <channel_handler_get+0x1c>)
   20a10:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   20a14:	f410 7f80 	tst.w	r0, #256	; 0x100
   20a18:	d004      	beq.n	20a24 <channel_handler_get+0x18>
   20a1a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   20a1e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   20a22:	4770      	bx	lr
        return NULL;
   20a24:	2000      	movs	r0, #0
}
   20a26:	4770      	bx	lr
   20a28:	200007e0 	.word	0x200007e0

00020a2c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   20a2c:	b570      	push	{r4, r5, r6, lr}
   20a2e:	4604      	mov	r4, r0
   20a30:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   20a32:	f7ff ffeb 	bl	20a0c <channel_handler_get>

    if (handler)
   20a36:	b120      	cbz	r0, 20a42 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   20a38:	6806      	ldr	r6, [r0, #0]
   20a3a:	6842      	ldr	r2, [r0, #4]
   20a3c:	4629      	mov	r1, r5
   20a3e:	4620      	mov	r0, r4
   20a40:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   20a42:	4b04      	ldr	r3, [pc, #16]	; (20a54 <call_handler+0x28>)
   20a44:	689b      	ldr	r3, [r3, #8]
   20a46:	b123      	cbz	r3, 20a52 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20a48:	4a02      	ldr	r2, [pc, #8]	; (20a54 <call_handler+0x28>)
   20a4a:	68d2      	ldr	r2, [r2, #12]
   20a4c:	4629      	mov	r1, r5
   20a4e:	4620      	mov	r0, r4
   20a50:	4798      	blx	r3
    }
}
   20a52:	bd70      	pop	{r4, r5, r6, pc}
   20a54:	200007e0 	.word	0x200007e0

00020a58 <latch_pending_read_and_check>:
    }
}

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   20a58:	b410      	push	{r4}
   20a5a:	b083      	sub	sp, #12
   20a5c:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   20a5e:	4b12      	ldr	r3, [pc, #72]	; (20aa8 <latch_pending_read_and_check+0x50>)
   20a60:	e893 0003 	ldmia.w	r3, {r0, r1}
   20a64:	ab02      	add	r3, sp, #8
   20a66:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   20a6a:	4620      	mov	r0, r4
   20a6c:	2300      	movs	r3, #0
   20a6e:	e00b      	b.n	20a88 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   20a70:	aa02      	add	r2, sp, #8
   20a72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   20a76:	f852 2c08 	ldr.w	r2, [r2, #-8]
   20a7a:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   20a7e:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   20a82:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   20a86:	3301      	adds	r3, #1
   20a88:	2b01      	cmp	r3, #1
   20a8a:	d9f1      	bls.n	20a70 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   20a8c:	2300      	movs	r3, #0
   20a8e:	2b01      	cmp	r3, #1
   20a90:	d804      	bhi.n	20a9c <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
   20a92:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   20a96:	b92a      	cbnz	r2, 20aa4 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   20a98:	3301      	adds	r3, #1
   20a9a:	e7f8      	b.n	20a8e <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   20a9c:	2000      	movs	r0, #0
}
   20a9e:	b003      	add	sp, #12
   20aa0:	bc10      	pop	{r4}
   20aa2:	4770      	bx	lr
            return true;
   20aa4:	2001      	movs	r0, #1
   20aa6:	e7fa      	b.n	20a9e <latch_pending_read_and_check+0x46>
   20aa8:	00031aec 	.word	0x00031aec

00020aac <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20aac:	f100 0208 	add.w	r2, r0, #8
   20ab0:	4b16      	ldr	r3, [pc, #88]	; (20b0c <release_handler+0x60>)
   20ab2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   20ab6:	f413 7f80 	tst.w	r3, #256	; 0x100
   20aba:	d026      	beq.n	20b0a <release_handler+0x5e>
{
   20abc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20abe:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   20ac2:	4610      	mov	r0, r2
   20ac4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20ac8:	4a10      	ldr	r2, [pc, #64]	; (20b0c <release_handler+0x60>)
   20aca:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   20ace:	4620      	mov	r0, r4
   20ad0:	f7ff ff6c 	bl	209ac <handler_in_use>
   20ad4:	b100      	cbz	r0, 20ad8 <release_handler+0x2c>
}
   20ad6:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   20ad8:	480c      	ldr	r0, [pc, #48]	; (20b0c <release_handler+0x60>)
   20ada:	2300      	movs	r3, #0
   20adc:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   20ae0:	4621      	mov	r1, r4
   20ae2:	3074      	adds	r0, #116	; 0x74
   20ae4:	f7ff ff0c 	bl	20900 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   20ae8:	4b09      	ldr	r3, [pc, #36]	; (20b10 <release_handler+0x64>)
   20aea:	4298      	cmp	r0, r3
   20aec:	d0f3      	beq.n	20ad6 <release_handler+0x2a>
   20aee:	4c09      	ldr	r4, [pc, #36]	; (20b14 <release_handler+0x68>)
   20af0:	f44f 7399 	mov.w	r3, #306	; 0x132
   20af4:	4622      	mov	r2, r4
   20af6:	4908      	ldr	r1, [pc, #32]	; (20b18 <release_handler+0x6c>)
   20af8:	4808      	ldr	r0, [pc, #32]	; (20b1c <release_handler+0x70>)
   20afa:	f00b fb25 	bl	2c148 <printk>
   20afe:	f44f 7199 	mov.w	r1, #306	; 0x132
   20b02:	4620      	mov	r0, r4
   20b04:	f00b fd25 	bl	2c552 <assert_post_action>
   20b08:	e7e5      	b.n	20ad6 <release_handler+0x2a>
   20b0a:	4770      	bx	lr
   20b0c:	200007e0 	.word	0x200007e0
   20b10:	0bad0000 	.word	0x0bad0000
   20b14:	0003577c 	.word	0x0003577c
   20b18:	000357bc 	.word	0x000357bc
   20b1c:	00031df4 	.word	0x00031df4

00020b20 <pin_handler_trigger_uninit>:
{
   20b20:	b510      	push	{r4, lr}
   20b22:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   20b24:	f7ff ff1a 	bl	2095c <pin_in_use_by_te>
   20b28:	b140      	cbz	r0, 20b3c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   20b2a:	4620      	mov	r0, r4
   20b2c:	f7ff ff36 	bl	2099c <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   20b30:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   20b34:	4b06      	ldr	r3, [pc, #24]	; (20b50 <pin_handler_trigger_uninit+0x30>)
   20b36:	2200      	movs	r2, #0
   20b38:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   20b3c:	4620      	mov	r0, r4
   20b3e:	f7ff ffb5 	bl	20aac <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   20b42:	3408      	adds	r4, #8
   20b44:	4b03      	ldr	r3, [pc, #12]	; (20b54 <pin_handler_trigger_uninit+0x34>)
   20b46:	2200      	movs	r2, #0
   20b48:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   20b4c:	bd10      	pop	{r4, pc}
   20b4e:	bf00      	nop
   20b50:	40006000 	.word	0x40006000
   20b54:	200007e0 	.word	0x200007e0

00020b58 <pin_handler_set>:
{
   20b58:	b570      	push	{r4, r5, r6, lr}
   20b5a:	b082      	sub	sp, #8
   20b5c:	4606      	mov	r6, r0
   20b5e:	460c      	mov	r4, r1
   20b60:	4615      	mov	r5, r2
    release_handler(pin);
   20b62:	f7ff ffa3 	bl	20aac <release_handler>
    if (!handler)
   20b66:	b324      	cbz	r4, 20bb2 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   20b68:	4629      	mov	r1, r5
   20b6a:	4620      	mov	r0, r4
   20b6c:	f7ff ff38 	bl	209e0 <find_handler>
    if (handler_id < 0)
   20b70:	1e03      	subs	r3, r0, #0
   20b72:	db13      	blt.n	20b9c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   20b74:	4a10      	ldr	r2, [pc, #64]	; (20bb8 <pin_handler_set+0x60>)
   20b76:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   20b7a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   20b7e:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20b80:	025b      	lsls	r3, r3, #9
   20b82:	b29b      	uxth	r3, r3
   20b84:	f106 0008 	add.w	r0, r6, #8
   20b88:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   20b8c:	430b      	orrs	r3, r1
   20b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20b92:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   20b96:	4809      	ldr	r0, [pc, #36]	; (20bbc <pin_handler_set+0x64>)
}
   20b98:	b002      	add	sp, #8
   20b9a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   20b9c:	f10d 0107 	add.w	r1, sp, #7
   20ba0:	4807      	ldr	r0, [pc, #28]	; (20bc0 <pin_handler_set+0x68>)
   20ba2:	f7ff fe89 	bl	208b8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   20ba6:	4b05      	ldr	r3, [pc, #20]	; (20bbc <pin_handler_set+0x64>)
   20ba8:	4298      	cmp	r0, r3
   20baa:	d1f5      	bne.n	20b98 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   20bac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20bb0:	e7e0      	b.n	20b74 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   20bb2:	4802      	ldr	r0, [pc, #8]	; (20bbc <pin_handler_set+0x64>)
   20bb4:	e7f0      	b.n	20b98 <pin_handler_set+0x40>
   20bb6:	bf00      	nop
   20bb8:	200007e0 	.word	0x200007e0
   20bbc:	0bad0000 	.word	0x0bad0000
   20bc0:	20000854 	.word	0x20000854

00020bc4 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   20bc4:	b538      	push	{r3, r4, r5, lr}
   20bc6:	4604      	mov	r4, r0
    while (mask)
   20bc8:	b1cc      	cbz	r4, 20bfe <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   20bca:	fa94 f3a4 	rbit	r3, r4
   20bce:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   20bd2:	2201      	movs	r2, #1
   20bd4:	409a      	lsls	r2, r3
   20bd6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   20bda:	4a09      	ldr	r2, [pc, #36]	; (20c00 <gpiote_evt_handle+0x3c>)
   20bdc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   20be0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   20be4:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   20be8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   20bec:	f3c0 4001 	ubfx	r0, r0, #16, #2
   20bf0:	f00f fb9f 	bl	30332 <gpiote_polarity_to_trigger>
   20bf4:	4601      	mov	r1, r0
   20bf6:	4628      	mov	r0, r5
   20bf8:	f7ff ff18 	bl	20a2c <call_handler>
   20bfc:	e7e4      	b.n	20bc8 <gpiote_evt_handle+0x4>
    }
}
   20bfe:	bd38      	pop	{r3, r4, r5, pc}
   20c00:	40006000 	.word	0x40006000

00020c04 <next_sense_cond_call_handler>:
{
   20c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20c08:	4604      	mov	r4, r0
   20c0a:	460d      	mov	r5, r1
   20c0c:	4616      	mov	r6, r2
    if (is_level(trigger))
   20c0e:	4608      	mov	r0, r1
   20c10:	f00f fb91 	bl	30336 <is_level>
   20c14:	bb60      	cbnz	r0, 20c70 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20c16:	2e02      	cmp	r6, #2
   20c18:	f000 80f5 	beq.w	20e06 <next_sense_cond_call_handler+0x202>
   20c1c:	f04f 0802 	mov.w	r8, #2
    switch (port)
   20c20:	0963      	lsrs	r3, r4, #5
   20c22:	f000 80f3 	beq.w	20e0c <next_sense_cond_call_handler+0x208>
   20c26:	2b01      	cmp	r3, #1
   20c28:	f040 80f3 	bne.w	20e12 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
   20c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   20c30:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20c34:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20c36:	f013 0f01 	tst.w	r3, #1
   20c3a:	f000 80ec 	beq.w	20e16 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
   20c3e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20c42:	0963      	lsrs	r3, r4, #5
   20c44:	f000 80f5 	beq.w	20e32 <next_sense_cond_call_handler+0x22e>
   20c48:	2b01      	cmp	r3, #1
   20c4a:	f000 80f5 	beq.w	20e38 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
   20c4e:	f8df 922c 	ldr.w	r9, [pc, #556]	; 20e7c <next_sense_cond_call_handler+0x278>
   20c52:	f240 232e 	movw	r3, #558	; 0x22e
   20c56:	464a      	mov	r2, r9
   20c58:	4986      	ldr	r1, [pc, #536]	; (20e74 <next_sense_cond_call_handler+0x270>)
   20c5a:	4887      	ldr	r0, [pc, #540]	; (20e78 <next_sense_cond_call_handler+0x274>)
   20c5c:	f00b fa74 	bl	2c148 <printk>
   20c60:	f240 212e 	movw	r1, #558	; 0x22e
   20c64:	4648      	mov	r0, r9
   20c66:	f00b fc74 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   20c6a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   20c6e:	e0e4      	b.n	20e3a <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
   20c70:	4629      	mov	r1, r5
   20c72:	4620      	mov	r0, r4
   20c74:	f7ff feda 	bl	20a2c <call_handler>
    switch (port)
   20c78:	0963      	lsrs	r3, r4, #5
   20c7a:	d01f      	beq.n	20cbc <next_sense_cond_call_handler+0xb8>
   20c7c:	2b01      	cmp	r3, #1
   20c7e:	d120      	bne.n	20cc2 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
   20c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   20c84:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20c88:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20c8a:	f013 0f01 	tst.w	r3, #1
   20c8e:	d01a      	beq.n	20cc6 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
   20c90:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20c94:	0963      	lsrs	r3, r4, #5
   20c96:	d024      	beq.n	20ce2 <next_sense_cond_call_handler+0xde>
   20c98:	2b01      	cmp	r3, #1
   20c9a:	d025      	beq.n	20ce8 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
   20c9c:	4f77      	ldr	r7, [pc, #476]	; (20e7c <next_sense_cond_call_handler+0x278>)
   20c9e:	f240 232e 	movw	r3, #558	; 0x22e
   20ca2:	463a      	mov	r2, r7
   20ca4:	4973      	ldr	r1, [pc, #460]	; (20e74 <next_sense_cond_call_handler+0x270>)
   20ca6:	4874      	ldr	r0, [pc, #464]	; (20e78 <next_sense_cond_call_handler+0x274>)
   20ca8:	f00b fa4e 	bl	2c148 <printk>
   20cac:	f240 212e 	movw	r1, #558	; 0x22e
   20cb0:	4638      	mov	r0, r7
   20cb2:	f00b fc4e 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   20cb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20cba:	e016      	b.n	20cea <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
   20cbc:	f04f 33ff 	mov.w	r3, #4294967295
   20cc0:	e7e0      	b.n	20c84 <next_sense_cond_call_handler+0x80>
    switch (port)
   20cc2:	2300      	movs	r3, #0
   20cc4:	e7de      	b.n	20c84 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20cc6:	4d6d      	ldr	r5, [pc, #436]	; (20e7c <next_sense_cond_call_handler+0x278>)
   20cc8:	f240 2329 	movw	r3, #553	; 0x229
   20ccc:	462a      	mov	r2, r5
   20cce:	496c      	ldr	r1, [pc, #432]	; (20e80 <next_sense_cond_call_handler+0x27c>)
   20cd0:	4869      	ldr	r0, [pc, #420]	; (20e78 <next_sense_cond_call_handler+0x274>)
   20cd2:	f00b fa39 	bl	2c148 <printk>
   20cd6:	f240 2129 	movw	r1, #553	; 0x229
   20cda:	4628      	mov	r0, r5
   20cdc:	f00b fc39 	bl	2c552 <assert_post_action>
   20ce0:	e7d6      	b.n	20c90 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
   20ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20ce6:	e000      	b.n	20cea <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20ce8:	4b66      	ldr	r3, [pc, #408]	; (20e84 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20cea:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   20cee:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   20cf2:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   20cf6:	429e      	cmp	r6, r3
   20cf8:	f040 80af 	bne.w	20e5a <next_sense_cond_call_handler+0x256>
    switch (port)
   20cfc:	0963      	lsrs	r3, r4, #5
   20cfe:	d01f      	beq.n	20d40 <next_sense_cond_call_handler+0x13c>
   20d00:	2b01      	cmp	r3, #1
   20d02:	d120      	bne.n	20d46 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
   20d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   20d08:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20d0c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20d0e:	f013 0f01 	tst.w	r3, #1
   20d12:	d01a      	beq.n	20d4a <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
   20d14:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20d18:	0963      	lsrs	r3, r4, #5
   20d1a:	d024      	beq.n	20d66 <next_sense_cond_call_handler+0x162>
   20d1c:	2b01      	cmp	r3, #1
   20d1e:	d025      	beq.n	20d6c <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
   20d20:	4f56      	ldr	r7, [pc, #344]	; (20e7c <next_sense_cond_call_handler+0x278>)
   20d22:	f240 232e 	movw	r3, #558	; 0x22e
   20d26:	463a      	mov	r2, r7
   20d28:	4952      	ldr	r1, [pc, #328]	; (20e74 <next_sense_cond_call_handler+0x270>)
   20d2a:	4853      	ldr	r0, [pc, #332]	; (20e78 <next_sense_cond_call_handler+0x274>)
   20d2c:	f00b fa0c 	bl	2c148 <printk>
   20d30:	f240 212e 	movw	r1, #558	; 0x22e
   20d34:	4638      	mov	r0, r7
   20d36:	f00b fc0c 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   20d3a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   20d3e:	e016      	b.n	20d6e <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
   20d40:	f04f 33ff 	mov.w	r3, #4294967295
   20d44:	e7e0      	b.n	20d08 <next_sense_cond_call_handler+0x104>
    switch (port)
   20d46:	2300      	movs	r3, #0
   20d48:	e7de      	b.n	20d08 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20d4a:	4d4c      	ldr	r5, [pc, #304]	; (20e7c <next_sense_cond_call_handler+0x278>)
   20d4c:	f240 2329 	movw	r3, #553	; 0x229
   20d50:	462a      	mov	r2, r5
   20d52:	494b      	ldr	r1, [pc, #300]	; (20e80 <next_sense_cond_call_handler+0x27c>)
   20d54:	4848      	ldr	r0, [pc, #288]	; (20e78 <next_sense_cond_call_handler+0x274>)
   20d56:	f00b f9f7 	bl	2c148 <printk>
   20d5a:	f240 2129 	movw	r1, #553	; 0x229
   20d5e:	4628      	mov	r0, r5
   20d60:	f00b fbf7 	bl	2c552 <assert_post_action>
   20d64:	e7d6      	b.n	20d14 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
   20d66:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   20d6a:	e000      	b.n	20d6e <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20d6c:	4945      	ldr	r1, [pc, #276]	; (20e84 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20d6e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   20d72:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   20d76:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   20d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
   20d7e:	0963      	lsrs	r3, r4, #5
   20d80:	d01f      	beq.n	20dc2 <next_sense_cond_call_handler+0x1be>
   20d82:	2b01      	cmp	r3, #1
   20d84:	d120      	bne.n	20dc8 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
   20d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   20d8a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20d8e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20d90:	f013 0f01 	tst.w	r3, #1
   20d94:	d01a      	beq.n	20dcc <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
   20d96:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20d9a:	0964      	lsrs	r4, r4, #5
   20d9c:	d024      	beq.n	20de8 <next_sense_cond_call_handler+0x1e4>
   20d9e:	2c01      	cmp	r4, #1
   20da0:	d025      	beq.n	20dee <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
   20da2:	4c36      	ldr	r4, [pc, #216]	; (20e7c <next_sense_cond_call_handler+0x278>)
   20da4:	f240 232e 	movw	r3, #558	; 0x22e
   20da8:	4622      	mov	r2, r4
   20daa:	4932      	ldr	r1, [pc, #200]	; (20e74 <next_sense_cond_call_handler+0x270>)
   20dac:	4832      	ldr	r0, [pc, #200]	; (20e78 <next_sense_cond_call_handler+0x274>)
   20dae:	f00b f9cb 	bl	2c148 <printk>
   20db2:	f240 212e 	movw	r1, #558	; 0x22e
   20db6:	4620      	mov	r0, r4
   20db8:	f00b fbcb 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   20dbc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   20dc0:	e016      	b.n	20df0 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
   20dc2:	f04f 33ff 	mov.w	r3, #4294967295
   20dc6:	e7e0      	b.n	20d8a <next_sense_cond_call_handler+0x186>
    switch (port)
   20dc8:	2300      	movs	r3, #0
   20dca:	e7de      	b.n	20d8a <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20dcc:	4d2b      	ldr	r5, [pc, #172]	; (20e7c <next_sense_cond_call_handler+0x278>)
   20dce:	f240 2329 	movw	r3, #553	; 0x229
   20dd2:	462a      	mov	r2, r5
   20dd4:	492a      	ldr	r1, [pc, #168]	; (20e80 <next_sense_cond_call_handler+0x27c>)
   20dd6:	4828      	ldr	r0, [pc, #160]	; (20e78 <next_sense_cond_call_handler+0x274>)
   20dd8:	f00b f9b6 	bl	2c148 <printk>
   20ddc:	f240 2129 	movw	r1, #553	; 0x229
   20de0:	4628      	mov	r0, r5
   20de2:	f00b fbb6 	bl	2c552 <assert_post_action>
   20de6:	e7d6      	b.n	20d96 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
   20de8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   20dec:	e000      	b.n	20df0 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20dee:	4925      	ldr	r1, [pc, #148]	; (20e84 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20df0:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   20df4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   20df8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20dfc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   20e00:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
   20e04:	e029      	b.n	20e5a <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20e06:	f04f 0803 	mov.w	r8, #3
   20e0a:	e709      	b.n	20c20 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
   20e0c:	f04f 33ff 	mov.w	r3, #4294967295
   20e10:	e70e      	b.n	20c30 <next_sense_cond_call_handler+0x2c>
    switch (port)
   20e12:	2300      	movs	r3, #0
   20e14:	e70c      	b.n	20c30 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20e16:	4f19      	ldr	r7, [pc, #100]	; (20e7c <next_sense_cond_call_handler+0x278>)
   20e18:	f240 2329 	movw	r3, #553	; 0x229
   20e1c:	463a      	mov	r2, r7
   20e1e:	4918      	ldr	r1, [pc, #96]	; (20e80 <next_sense_cond_call_handler+0x27c>)
   20e20:	4815      	ldr	r0, [pc, #84]	; (20e78 <next_sense_cond_call_handler+0x274>)
   20e22:	f00b f991 	bl	2c148 <printk>
   20e26:	f240 2129 	movw	r1, #553	; 0x229
   20e2a:	4638      	mov	r0, r7
   20e2c:	f00b fb91 	bl	2c552 <assert_post_action>
   20e30:	e705      	b.n	20c3e <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
   20e32:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   20e36:	e000      	b.n	20e3a <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20e38:	4912      	ldr	r1, [pc, #72]	; (20e84 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20e3a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
   20e3e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   20e42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20e46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   20e4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   20e4e:	2d03      	cmp	r5, #3
   20e50:	d007      	beq.n	20e62 <next_sense_cond_call_handler+0x25e>
   20e52:	2e02      	cmp	r6, #2
   20e54:	d003      	beq.n	20e5e <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20e56:	2e03      	cmp	r6, #3
   20e58:	d008      	beq.n	20e6c <next_sense_cond_call_handler+0x268>
}
   20e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20e5e:	2d01      	cmp	r5, #1
   20e60:	d1f9      	bne.n	20e56 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
   20e62:	4629      	mov	r1, r5
   20e64:	4620      	mov	r0, r4
   20e66:	f7ff fde1 	bl	20a2c <call_handler>
}
   20e6a:	e7f6      	b.n	20e5a <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   20e6c:	2d02      	cmp	r5, #2
   20e6e:	d1f4      	bne.n	20e5a <next_sense_cond_call_handler+0x256>
   20e70:	e7f7      	b.n	20e62 <next_sense_cond_call_handler+0x25e>
   20e72:	bf00      	nop
   20e74:	000364dc 	.word	0x000364dc
   20e78:	00031df4 	.word	0x00031df4
   20e7c:	000321d8 	.word	0x000321d8
   20e80:	0003220c 	.word	0x0003220c
   20e84:	50000300 	.word	0x50000300

00020e88 <port_event_handle>:
{
   20e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e8c:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   20e8e:	4a64      	ldr	r2, [pc, #400]	; (21020 <port_event_handle+0x198>)
   20e90:	466b      	mov	r3, sp
   20e92:	e892 0003 	ldmia.w	r2, {r0, r1}
   20e96:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   20e9a:	2300      	movs	r3, #0
   20e9c:	a802      	add	r0, sp, #8
   20e9e:	e00b      	b.n	20eb8 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   20ea0:	aa04      	add	r2, sp, #16
   20ea2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   20ea6:	f852 2c10 	ldr.w	r2, [r2, #-16]
   20eaa:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   20eae:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   20eb2:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   20eb6:	3301      	adds	r3, #1
   20eb8:	2b01      	cmp	r3, #1
   20eba:	d9f1      	bls.n	20ea0 <port_event_handle+0x18>
   20ebc:	e0ab      	b.n	21016 <port_event_handle+0x18e>
            mask = P0_FEATURE_PINS_PRESENT;
   20ebe:	f04f 33ff 	mov.w	r3, #4294967295
   20ec2:	e07f      	b.n	20fc4 <port_event_handle+0x13c>
    switch (port)
   20ec4:	2300      	movs	r3, #0
   20ec6:	e07d      	b.n	20fc4 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20ec8:	4f56      	ldr	r7, [pc, #344]	; (21024 <port_event_handle+0x19c>)
   20eca:	f240 2329 	movw	r3, #553	; 0x229
   20ece:	463a      	mov	r2, r7
   20ed0:	4955      	ldr	r1, [pc, #340]	; (21028 <port_event_handle+0x1a0>)
   20ed2:	4856      	ldr	r0, [pc, #344]	; (2102c <port_event_handle+0x1a4>)
   20ed4:	f00b f938 	bl	2c148 <printk>
   20ed8:	f240 2129 	movw	r1, #553	; 0x229
   20edc:	4638      	mov	r0, r7
   20ede:	f00b fb38 	bl	2c552 <assert_post_action>
   20ee2:	e076      	b.n	20fd2 <port_event_handle+0x14a>
        case 0: return NRF_P0;
   20ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20ee8:	e000      	b.n	20eec <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20eea:	4b51      	ldr	r3, [pc, #324]	; (21030 <port_event_handle+0x1a8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20eec:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   20ef0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   20ef4:	f3c2 4201 	ubfx	r2, r2, #16, #2
   20ef8:	4631      	mov	r1, r6
   20efa:	4620      	mov	r0, r4
   20efc:	f7ff fe82 	bl	20c04 <next_sense_cond_call_handler>
    switch (port)
   20f00:	0963      	lsrs	r3, r4, #5
   20f02:	d01f      	beq.n	20f44 <port_event_handle+0xbc>
   20f04:	2b01      	cmp	r3, #1
   20f06:	d120      	bne.n	20f4a <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
   20f08:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   20f0c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20f10:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20f12:	f013 0f01 	tst.w	r3, #1
   20f16:	d01a      	beq.n	20f4e <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
   20f18:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20f1c:	0964      	lsrs	r4, r4, #5
   20f1e:	d024      	beq.n	20f6a <port_event_handle+0xe2>
   20f20:	2c01      	cmp	r4, #1
   20f22:	d025      	beq.n	20f70 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
   20f24:	4c3f      	ldr	r4, [pc, #252]	; (21024 <port_event_handle+0x19c>)
   20f26:	f240 232e 	movw	r3, #558	; 0x22e
   20f2a:	4622      	mov	r2, r4
   20f2c:	4941      	ldr	r1, [pc, #260]	; (21034 <port_event_handle+0x1ac>)
   20f2e:	483f      	ldr	r0, [pc, #252]	; (2102c <port_event_handle+0x1a4>)
   20f30:	f00b f90a 	bl	2c148 <printk>
   20f34:	f240 212e 	movw	r1, #558	; 0x22e
   20f38:	4620      	mov	r0, r4
   20f3a:	f00b fb0a 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   20f3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   20f42:	e016      	b.n	20f72 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
   20f44:	f04f 33ff 	mov.w	r3, #4294967295
   20f48:	e7e0      	b.n	20f0c <port_event_handle+0x84>
    switch (port)
   20f4a:	2300      	movs	r3, #0
   20f4c:	e7de      	b.n	20f0c <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20f4e:	4e35      	ldr	r6, [pc, #212]	; (21024 <port_event_handle+0x19c>)
   20f50:	f240 2329 	movw	r3, #553	; 0x229
   20f54:	4632      	mov	r2, r6
   20f56:	4934      	ldr	r1, [pc, #208]	; (21028 <port_event_handle+0x1a0>)
   20f58:	4834      	ldr	r0, [pc, #208]	; (2102c <port_event_handle+0x1a4>)
   20f5a:	f00b f8f5 	bl	2c148 <printk>
   20f5e:	f240 2129 	movw	r1, #553	; 0x229
   20f62:	4630      	mov	r0, r6
   20f64:	f00b faf5 	bl	2c552 <assert_post_action>
   20f68:	e7d6      	b.n	20f18 <port_event_handle+0x90>
        case 0: return NRF_P0;
   20f6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   20f6e:	e000      	b.n	20f72 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20f70:	4a2f      	ldr	r2, [pc, #188]	; (21030 <port_event_handle+0x1a8>)
    reg->LATCH = (1 << pin_number);
   20f72:	2301      	movs	r3, #1
   20f74:	40b3      	lsls	r3, r6
   20f76:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
   20f7a:	ab04      	add	r3, sp, #16
   20f7c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   20f80:	f853 4c08 	ldr.w	r4, [r3, #-8]
   20f84:	2c00      	cmp	r4, #0
   20f86:	d03b      	beq.n	21000 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
   20f88:	fa94 f4a4 	rbit	r4, r4
   20f8c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   20f90:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20f94:	f104 0208 	add.w	r2, r4, #8
   20f98:	4b27      	ldr	r3, [pc, #156]	; (21038 <port_event_handle+0x1b0>)
   20f9a:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
   20f9e:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   20fa2:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   20fa4:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   20fa8:	a802      	add	r0, sp, #8
   20faa:	2301      	movs	r3, #1
   20fac:	fa03 f202 	lsl.w	r2, r3, r2
   20fb0:	5c43      	ldrb	r3, [r0, r1]
   20fb2:	ea23 0302 	bic.w	r3, r3, r2
   20fb6:	5443      	strb	r3, [r0, r1]
    switch (port)
   20fb8:	0963      	lsrs	r3, r4, #5
   20fba:	d080      	beq.n	20ebe <port_event_handle+0x36>
   20fbc:	2b01      	cmp	r3, #1
   20fbe:	d181      	bne.n	20ec4 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
   20fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   20fc4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20fc8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20fca:	f013 0f01 	tst.w	r3, #1
   20fce:	f43f af7b 	beq.w	20ec8 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
   20fd2:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20fd6:	0963      	lsrs	r3, r4, #5
   20fd8:	d084      	beq.n	20ee4 <port_event_handle+0x5c>
   20fda:	2b01      	cmp	r3, #1
   20fdc:	d085      	beq.n	20eea <port_event_handle+0x62>
            NRFX_ASSERT(0);
   20fde:	f8df 8044 	ldr.w	r8, [pc, #68]	; 21024 <port_event_handle+0x19c>
   20fe2:	f240 232e 	movw	r3, #558	; 0x22e
   20fe6:	4642      	mov	r2, r8
   20fe8:	4912      	ldr	r1, [pc, #72]	; (21034 <port_event_handle+0x1ac>)
   20fea:	4810      	ldr	r0, [pc, #64]	; (2102c <port_event_handle+0x1a4>)
   20fec:	f00b f8ac 	bl	2c148 <printk>
   20ff0:	f240 212e 	movw	r1, #558	; 0x22e
   20ff4:	4640      	mov	r0, r8
   20ff6:	f00b faac 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   20ffa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20ffe:	e775      	b.n	20eec <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   21000:	3501      	adds	r5, #1
   21002:	2d01      	cmp	r5, #1
   21004:	d9b9      	bls.n	20f7a <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21006:	4b0d      	ldr	r3, [pc, #52]	; (2103c <port_event_handle+0x1b4>)
   21008:	2200      	movs	r2, #0
   2100a:	601a      	str	r2, [r3, #0]
   2100c:	681b      	ldr	r3, [r3, #0]
    } while (latch_pending_read_and_check(latch));
   2100e:	a802      	add	r0, sp, #8
   21010:	f7ff fd22 	bl	20a58 <latch_pending_read_and_check>
   21014:	b108      	cbz	r0, 2101a <port_event_handle+0x192>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   21016:	2500      	movs	r5, #0
   21018:	e7f3      	b.n	21002 <port_event_handle+0x17a>
}
   2101a:	b004      	add	sp, #16
   2101c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21020:	00031aec 	.word	0x00031aec
   21024:	000321d8 	.word	0x000321d8
   21028:	0003220c 	.word	0x0003220c
   2102c:	00031df4 	.word	0x00031df4
   21030:	50000300 	.word	0x50000300
   21034:	000364dc 	.word	0x000364dc
   21038:	200007e0 	.word	0x200007e0
   2103c:	4000617c 	.word	0x4000617c

00021040 <nrfx_gpiote_input_configure>:
{
   21040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21044:	4604      	mov	r4, r0
   21046:	4615      	mov	r5, r2
   21048:	461e      	mov	r6, r3
    if (p_input_config)
   2104a:	2900      	cmp	r1, #0
   2104c:	d062      	beq.n	21114 <nrfx_gpiote_input_configure+0xd4>
   2104e:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
   21050:	f00f f959 	bl	30306 <pin_is_task_output>
   21054:	2800      	cmp	r0, #0
   21056:	f040 80cb 	bne.w	211f0 <nrfx_gpiote_input_configure+0x1b0>
    switch (port)
   2105a:	0963      	lsrs	r3, r4, #5
   2105c:	d020      	beq.n	210a0 <nrfx_gpiote_input_configure+0x60>
   2105e:	2b01      	cmp	r3, #1
   21060:	d121      	bne.n	210a6 <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
   21062:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21066:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2106a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2106c:	f013 0f01 	tst.w	r3, #1
   21070:	d01b      	beq.n	210aa <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
   21072:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21076:	0963      	lsrs	r3, r4, #5
   21078:	d025      	beq.n	210c6 <nrfx_gpiote_input_configure+0x86>
   2107a:	2b01      	cmp	r3, #1
   2107c:	d026      	beq.n	210cc <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
   2107e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 21208 <nrfx_gpiote_input_configure+0x1c8>
   21082:	f240 232e 	movw	r3, #558	; 0x22e
   21086:	464a      	mov	r2, r9
   21088:	495d      	ldr	r1, [pc, #372]	; (21200 <nrfx_gpiote_input_configure+0x1c0>)
   2108a:	485e      	ldr	r0, [pc, #376]	; (21204 <nrfx_gpiote_input_configure+0x1c4>)
   2108c:	f00b f85c 	bl	2c148 <printk>
   21090:	f240 212e 	movw	r1, #558	; 0x22e
   21094:	4648      	mov	r0, r9
   21096:	f00b fa5c 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   2109a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   2109e:	e016      	b.n	210ce <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
   210a0:	f04f 33ff 	mov.w	r3, #4294967295
   210a4:	e7df      	b.n	21066 <nrfx_gpiote_input_configure+0x26>
    switch (port)
   210a6:	2300      	movs	r3, #0
   210a8:	e7dd      	b.n	21066 <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   210aa:	4f57      	ldr	r7, [pc, #348]	; (21208 <nrfx_gpiote_input_configure+0x1c8>)
   210ac:	f240 2329 	movw	r3, #553	; 0x229
   210b0:	463a      	mov	r2, r7
   210b2:	4956      	ldr	r1, [pc, #344]	; (2120c <nrfx_gpiote_input_configure+0x1cc>)
   210b4:	4853      	ldr	r0, [pc, #332]	; (21204 <nrfx_gpiote_input_configure+0x1c4>)
   210b6:	f00b f847 	bl	2c148 <printk>
   210ba:	f240 2129 	movw	r1, #553	; 0x229
   210be:	4638      	mov	r0, r7
   210c0:	f00b fa47 	bl	2c552 <assert_post_action>
   210c4:	e7d5      	b.n	21072 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
   210c6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   210ca:	e000      	b.n	210ce <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   210cc:	4950      	ldr	r1, [pc, #320]	; (21210 <nrfx_gpiote_input_configure+0x1d0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   210ce:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
   210d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   210d6:	f1b8 0f00 	cmp.w	r8, #0
   210da:	d03c      	beq.n	21156 <nrfx_gpiote_input_configure+0x116>
   210dc:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   210de:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
   210e2:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   210e6:	f1b8 0f00 	cmp.w	r8, #0
   210ea:	d036      	beq.n	2115a <nrfx_gpiote_input_configure+0x11a>
   210ec:	f898 2000 	ldrb.w	r2, [r8]
   210f0:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   210f2:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
   210f4:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   210f8:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   210fc:	4a45      	ldr	r2, [pc, #276]	; (21214 <nrfx_gpiote_input_configure+0x1d4>)
   210fe:	f104 0108 	add.w	r1, r4, #8
   21102:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21106:	f023 0302 	bic.w	r3, r3, #2
   2110a:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2110c:	f043 0301 	orr.w	r3, r3, #1
   21110:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   21114:	b1b5      	cbz	r5, 21144 <nrfx_gpiote_input_configure+0x104>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   21116:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2111a:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   2111e:	4620      	mov	r0, r4
   21120:	f7ff fc32 	bl	20988 <pin_is_output>
   21124:	b1d8      	cbz	r0, 2115e <nrfx_gpiote_input_configure+0x11e>
            if (use_evt)
   21126:	f1b9 0f00 	cmp.w	r9, #0
   2112a:	d163      	bne.n	211f4 <nrfx_gpiote_input_configure+0x1b4>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2112c:	4b39      	ldr	r3, [pc, #228]	; (21214 <nrfx_gpiote_input_configure+0x1d4>)
   2112e:	f104 0208 	add.w	r2, r4, #8
   21132:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   21136:	f020 001c 	bic.w	r0, r0, #28
   2113a:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2113c:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   21140:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   21144:	2e00      	cmp	r6, #0
   21146:	d059      	beq.n	211fc <nrfx_gpiote_input_configure+0x1bc>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   21148:	6872      	ldr	r2, [r6, #4]
   2114a:	6831      	ldr	r1, [r6, #0]
   2114c:	4620      	mov	r0, r4
   2114e:	f7ff fd03 	bl	20b58 <pin_handler_set>
}
   21152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   21156:	2200      	movs	r2, #0
   21158:	e7c1      	b.n	210de <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2115a:	2200      	movs	r2, #0
   2115c:	e7c9      	b.n	210f2 <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2115e:	4b2d      	ldr	r3, [pc, #180]	; (21214 <nrfx_gpiote_input_configure+0x1d4>)
   21160:	f104 0208 	add.w	r2, r4, #8
   21164:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   21168:	f027 0720 	bic.w	r7, r7, #32
   2116c:	04ff      	lsls	r7, r7, #19
   2116e:	0cff      	lsrs	r7, r7, #19
   21170:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   21174:	f1b9 0f00 	cmp.w	r9, #0
   21178:	d0d8      	beq.n	2112c <nrfx_gpiote_input_configure+0xec>
                if (!edge)
   2117a:	f1b8 0f03 	cmp.w	r8, #3
   2117e:	d83b      	bhi.n	211f8 <nrfx_gpiote_input_configure+0x1b8>
                uint8_t ch = *p_trigger_config->p_in_channel;
   21180:	686b      	ldr	r3, [r5, #4]
   21182:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   21184:	f1b8 0f00 	cmp.w	r8, #0
   21188:	d106      	bne.n	21198 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
   2118a:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   2118e:	4b22      	ldr	r3, [pc, #136]	; (21218 <nrfx_gpiote_input_configure+0x1d8>)
   21190:	2200      	movs	r2, #0
   21192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   21196:	e7c9      	b.n	2112c <nrfx_gpiote_input_configure+0xec>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   21198:	4640      	mov	r0, r8
   2119a:	f00f f8cb 	bl	30334 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2119e:	4b1e      	ldr	r3, [pc, #120]	; (21218 <nrfx_gpiote_input_configure+0x1d8>)
   211a0:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   211a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   211a8:	f021 0103 	bic.w	r1, r1, #3
   211ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   211b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   211b4:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   211b8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   211bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   211c0:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   211c4:	0221      	lsls	r1, r4, #8
   211c6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   211ca:	0400      	lsls	r0, r0, #16
   211cc:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   211d0:	4301      	orrs	r1, r0
   211d2:	ea4c 0101 	orr.w	r1, ip, r1
   211d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   211da:	036d      	lsls	r5, r5, #13
   211dc:	b2ad      	uxth	r5, r5
   211de:	f104 0308 	add.w	r3, r4, #8
   211e2:	432f      	orrs	r7, r5
   211e4:	f047 0720 	orr.w	r7, r7, #32
   211e8:	4a0a      	ldr	r2, [pc, #40]	; (21214 <nrfx_gpiote_input_configure+0x1d4>)
   211ea:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   211ee:	e79d      	b.n	2112c <nrfx_gpiote_input_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
   211f0:	480a      	ldr	r0, [pc, #40]	; (2121c <nrfx_gpiote_input_configure+0x1dc>)
   211f2:	e7ae      	b.n	21152 <nrfx_gpiote_input_configure+0x112>
                return NRFX_ERROR_INVALID_PARAM;
   211f4:	4809      	ldr	r0, [pc, #36]	; (2121c <nrfx_gpiote_input_configure+0x1dc>)
   211f6:	e7ac      	b.n	21152 <nrfx_gpiote_input_configure+0x112>
                    return NRFX_ERROR_INVALID_PARAM;
   211f8:	4808      	ldr	r0, [pc, #32]	; (2121c <nrfx_gpiote_input_configure+0x1dc>)
   211fa:	e7aa      	b.n	21152 <nrfx_gpiote_input_configure+0x112>
        err = NRFX_SUCCESS;
   211fc:	4808      	ldr	r0, [pc, #32]	; (21220 <nrfx_gpiote_input_configure+0x1e0>)
   211fe:	e7a8      	b.n	21152 <nrfx_gpiote_input_configure+0x112>
   21200:	000364dc 	.word	0x000364dc
   21204:	00031df4 	.word	0x00031df4
   21208:	000321d8 	.word	0x000321d8
   2120c:	0003220c 	.word	0x0003220c
   21210:	50000300 	.word	0x50000300
   21214:	200007e0 	.word	0x200007e0
   21218:	40006000 	.word	0x40006000
   2121c:	0bad0004 	.word	0x0bad0004
   21220:	0bad0000 	.word	0x0bad0000

00021224 <nrfx_gpiote_output_configure>:
{
   21224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21228:	4604      	mov	r4, r0
   2122a:	4615      	mov	r5, r2
    if (p_config)
   2122c:	2900      	cmp	r1, #0
   2122e:	f000 8086 	beq.w	2133e <nrfx_gpiote_output_configure+0x11a>
   21232:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   21234:	f00f f876 	bl	30324 <pin_is_input>
   21238:	b128      	cbz	r0, 21246 <nrfx_gpiote_output_configure+0x22>
   2123a:	4620      	mov	r0, r4
   2123c:	f7ff fb8e 	bl	2095c <pin_in_use_by_te>
   21240:	2800      	cmp	r0, #0
   21242:	f040 80cc 	bne.w	213de <nrfx_gpiote_output_configure+0x1ba>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   21246:	4620      	mov	r0, r4
   21248:	f7ff fb92 	bl	20970 <pin_has_trigger>
   2124c:	b118      	cbz	r0, 21256 <nrfx_gpiote_output_configure+0x32>
   2124e:	787b      	ldrb	r3, [r7, #1]
   21250:	2b01      	cmp	r3, #1
   21252:	f000 80c6 	beq.w	213e2 <nrfx_gpiote_output_configure+0x1be>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   21256:	f107 0901 	add.w	r9, r7, #1
   2125a:	f107 0802 	add.w	r8, r7, #2
    switch (port)
   2125e:	0963      	lsrs	r3, r4, #5
   21260:	d020      	beq.n	212a4 <nrfx_gpiote_output_configure+0x80>
   21262:	2b01      	cmp	r3, #1
   21264:	d121      	bne.n	212aa <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
   21266:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2126a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2126e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21270:	f013 0f01 	tst.w	r3, #1
   21274:	d01b      	beq.n	212ae <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
   21276:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2127a:	0963      	lsrs	r3, r4, #5
   2127c:	d025      	beq.n	212ca <nrfx_gpiote_output_configure+0xa6>
   2127e:	2b01      	cmp	r3, #1
   21280:	d026      	beq.n	212d0 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
   21282:	f8df a178 	ldr.w	sl, [pc, #376]	; 213fc <nrfx_gpiote_output_configure+0x1d8>
   21286:	f240 232e 	movw	r3, #558	; 0x22e
   2128a:	4652      	mov	r2, sl
   2128c:	4959      	ldr	r1, [pc, #356]	; (213f4 <nrfx_gpiote_output_configure+0x1d0>)
   2128e:	485a      	ldr	r0, [pc, #360]	; (213f8 <nrfx_gpiote_output_configure+0x1d4>)
   21290:	f00a ff5a 	bl	2c148 <printk>
   21294:	f240 212e 	movw	r1, #558	; 0x22e
   21298:	4650      	mov	r0, sl
   2129a:	f00b f95a 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   2129e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   212a2:	e016      	b.n	212d2 <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
   212a4:	f04f 33ff 	mov.w	r3, #4294967295
   212a8:	e7df      	b.n	2126a <nrfx_gpiote_output_configure+0x46>
    switch (port)
   212aa:	2300      	movs	r3, #0
   212ac:	e7dd      	b.n	2126a <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   212ae:	4e53      	ldr	r6, [pc, #332]	; (213fc <nrfx_gpiote_output_configure+0x1d8>)
   212b0:	f240 2329 	movw	r3, #553	; 0x229
   212b4:	4632      	mov	r2, r6
   212b6:	4952      	ldr	r1, [pc, #328]	; (21400 <nrfx_gpiote_output_configure+0x1dc>)
   212b8:	484f      	ldr	r0, [pc, #316]	; (213f8 <nrfx_gpiote_output_configure+0x1d4>)
   212ba:	f00a ff45 	bl	2c148 <printk>
   212be:	f240 2129 	movw	r1, #553	; 0x229
   212c2:	4630      	mov	r0, r6
   212c4:	f00b f945 	bl	2c552 <assert_post_action>
   212c8:	e7d5      	b.n	21276 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
   212ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   212ce:	e000      	b.n	212d2 <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   212d0:	4a4c      	ldr	r2, [pc, #304]	; (21404 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   212d2:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
   212d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   212da:	f1b9 0f00 	cmp.w	r9, #0
   212de:	d072      	beq.n	213c6 <nrfx_gpiote_output_configure+0x1a2>
   212e0:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   212e2:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   212e6:	f1b8 0f00 	cmp.w	r8, #0
   212ea:	d06e      	beq.n	213ca <nrfx_gpiote_output_configure+0x1a6>
   212ec:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   212ee:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   212f0:	2f00      	cmp	r7, #0
   212f2:	d06c      	beq.n	213ce <nrfx_gpiote_output_configure+0x1aa>
   212f4:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   212f8:	4303      	orrs	r3, r0
    cnf &= ~to_update;
   212fa:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   212fe:	f1b9 0f00 	cmp.w	r9, #0
   21302:	d066      	beq.n	213d2 <nrfx_gpiote_output_configure+0x1ae>
   21304:	787b      	ldrb	r3, [r7, #1]
   21306:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   21308:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2130c:	f1b8 0f00 	cmp.w	r8, #0
   21310:	d061      	beq.n	213d6 <nrfx_gpiote_output_configure+0x1b2>
   21312:	78b8      	ldrb	r0, [r7, #2]
   21314:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   21316:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   21318:	2f00      	cmp	r7, #0
   2131a:	d05e      	beq.n	213da <nrfx_gpiote_output_configure+0x1b6>
   2131c:	7838      	ldrb	r0, [r7, #0]
   2131e:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   21320:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   21322:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   21324:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   21328:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2132c:	4a36      	ldr	r2, [pc, #216]	; (21408 <nrfx_gpiote_output_configure+0x1e4>)
   2132e:	f104 0108 	add.w	r1, r4, #8
   21332:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21336:	f043 0303 	orr.w	r3, r3, #3
   2133a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   2133e:	2d00      	cmp	r5, #0
   21340:	d051      	beq.n	213e6 <nrfx_gpiote_output_configure+0x1c2>
        if (pin_is_input(pin))
   21342:	4620      	mov	r0, r4
   21344:	f00e ffee 	bl	30324 <pin_is_input>
   21348:	2800      	cmp	r0, #0
   2134a:	d14f      	bne.n	213ec <nrfx_gpiote_output_configure+0x1c8>
        uint32_t ch = p_task_config->task_ch;
   2134c:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   2134e:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   21352:	4b2e      	ldr	r3, [pc, #184]	; (2140c <nrfx_gpiote_output_configure+0x1e8>)
   21354:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   21358:	492b      	ldr	r1, [pc, #172]	; (21408 <nrfx_gpiote_output_configure+0x1e4>)
   2135a:	f104 0008 	add.w	r0, r4, #8
   2135e:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   21362:	f023 0320 	bic.w	r3, r3, #32
   21366:	04db      	lsls	r3, r3, #19
   21368:	0cdb      	lsrs	r3, r3, #19
   2136a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2136e:	7869      	ldrb	r1, [r5, #1]
   21370:	2900      	cmp	r1, #0
   21372:	d03d      	beq.n	213f0 <nrfx_gpiote_output_configure+0x1cc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   21374:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   21378:	4d24      	ldr	r5, [pc, #144]	; (2140c <nrfx_gpiote_output_configure+0x1e8>)
   2137a:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   2137e:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   21382:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
   21386:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   2138a:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2138e:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   21392:	0220      	lsls	r0, r4, #8
   21394:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   21398:	0409      	lsls	r1, r1, #16
   2139a:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2139e:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   213a0:	ea4f 500c 	mov.w	r0, ip, lsl #20
   213a4:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   213a8:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   213aa:	4339      	orrs	r1, r7
   213ac:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   213b0:	0352      	lsls	r2, r2, #13
   213b2:	b292      	uxth	r2, r2
   213b4:	3408      	adds	r4, #8
   213b6:	431a      	orrs	r2, r3
   213b8:	f042 0220 	orr.w	r2, r2, #32
   213bc:	4b12      	ldr	r3, [pc, #72]	; (21408 <nrfx_gpiote_output_configure+0x1e4>)
   213be:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   213c2:	4813      	ldr	r0, [pc, #76]	; (21410 <nrfx_gpiote_output_configure+0x1ec>)
   213c4:	e010      	b.n	213e8 <nrfx_gpiote_output_configure+0x1c4>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   213c6:	2300      	movs	r3, #0
   213c8:	e78b      	b.n	212e2 <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   213ca:	2000      	movs	r0, #0
   213cc:	e78f      	b.n	212ee <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   213ce:	2000      	movs	r0, #0
   213d0:	e792      	b.n	212f8 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   213d2:	2300      	movs	r3, #0
   213d4:	e798      	b.n	21308 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   213d6:	2000      	movs	r0, #0
   213d8:	e79d      	b.n	21316 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   213da:	2000      	movs	r0, #0
   213dc:	e7a0      	b.n	21320 <nrfx_gpiote_output_configure+0xfc>
   213de:	480d      	ldr	r0, [pc, #52]	; (21414 <nrfx_gpiote_output_configure+0x1f0>)
   213e0:	e002      	b.n	213e8 <nrfx_gpiote_output_configure+0x1c4>
   213e2:	480c      	ldr	r0, [pc, #48]	; (21414 <nrfx_gpiote_output_configure+0x1f0>)
   213e4:	e000      	b.n	213e8 <nrfx_gpiote_output_configure+0x1c4>
   213e6:	480a      	ldr	r0, [pc, #40]	; (21410 <nrfx_gpiote_output_configure+0x1ec>)
}
   213e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return NRFX_ERROR_INVALID_PARAM;
   213ec:	4809      	ldr	r0, [pc, #36]	; (21414 <nrfx_gpiote_output_configure+0x1f0>)
   213ee:	e7fb      	b.n	213e8 <nrfx_gpiote_output_configure+0x1c4>
    return NRFX_SUCCESS;
   213f0:	4807      	ldr	r0, [pc, #28]	; (21410 <nrfx_gpiote_output_configure+0x1ec>)
   213f2:	e7f9      	b.n	213e8 <nrfx_gpiote_output_configure+0x1c4>
   213f4:	000364dc 	.word	0x000364dc
   213f8:	00031df4 	.word	0x00031df4
   213fc:	000321d8 	.word	0x000321d8
   21400:	0003220c 	.word	0x0003220c
   21404:	50000300 	.word	0x50000300
   21408:	200007e0 	.word	0x200007e0
   2140c:	40006000 	.word	0x40006000
   21410:	0bad0000 	.word	0x0bad0000
   21414:	0bad0004 	.word	0x0bad0004

00021418 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   21418:	4b01      	ldr	r3, [pc, #4]	; (21420 <nrfx_gpiote_global_callback_set+0x8>)
   2141a:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   2141c:	60d9      	str	r1, [r3, #12]
}
   2141e:	4770      	bx	lr
   21420:	200007e0 	.word	0x200007e0

00021424 <nrfx_gpiote_channel_get>:
{
   21424:	b570      	push	{r4, r5, r6, lr}
   21426:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   21428:	460d      	mov	r5, r1
   2142a:	b159      	cbz	r1, 21444 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
   2142c:	4620      	mov	r0, r4
   2142e:	f7ff fa95 	bl	2095c <pin_in_use_by_te>
   21432:	b1a8      	cbz	r0, 21460 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21434:	3408      	adds	r4, #8
   21436:	4b0b      	ldr	r3, [pc, #44]	; (21464 <nrfx_gpiote_channel_get+0x40>)
   21438:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   2143c:	0b5b      	lsrs	r3, r3, #13
   2143e:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   21440:	4809      	ldr	r0, [pc, #36]	; (21468 <nrfx_gpiote_channel_get+0x44>)
}
   21442:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
   21444:	4e09      	ldr	r6, [pc, #36]	; (2146c <nrfx_gpiote_channel_get+0x48>)
   21446:	f240 2335 	movw	r3, #565	; 0x235
   2144a:	4632      	mov	r2, r6
   2144c:	4908      	ldr	r1, [pc, #32]	; (21470 <nrfx_gpiote_channel_get+0x4c>)
   2144e:	4809      	ldr	r0, [pc, #36]	; (21474 <nrfx_gpiote_channel_get+0x50>)
   21450:	f00a fe7a 	bl	2c148 <printk>
   21454:	f240 2135 	movw	r1, #565	; 0x235
   21458:	4630      	mov	r0, r6
   2145a:	f00b f87a 	bl	2c552 <assert_post_action>
   2145e:	e7e5      	b.n	2142c <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
   21460:	4805      	ldr	r0, [pc, #20]	; (21478 <nrfx_gpiote_channel_get+0x54>)
   21462:	e7ee      	b.n	21442 <nrfx_gpiote_channel_get+0x1e>
   21464:	200007e0 	.word	0x200007e0
   21468:	0bad0000 	.word	0x0bad0000
   2146c:	0003577c 	.word	0x0003577c
   21470:	000357d0 	.word	0x000357d0
   21474:	00031df4 	.word	0x00031df4
   21478:	0bad0004 	.word	0x0bad0004

0002147c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2147c:	4b0f      	ldr	r3, [pc, #60]	; (214bc <nrfx_gpiote_init+0x40>)
   2147e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   21482:	b10b      	cbz	r3, 21488 <nrfx_gpiote_init+0xc>
        return err_code;
   21484:	480e      	ldr	r0, [pc, #56]	; (214c0 <nrfx_gpiote_init+0x44>)
}
   21486:	4770      	bx	lr
{
   21488:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2148a:	4c0c      	ldr	r4, [pc, #48]	; (214bc <nrfx_gpiote_init+0x40>)
   2148c:	2260      	movs	r2, #96	; 0x60
   2148e:	2100      	movs	r1, #0
   21490:	f104 0010 	add.w	r0, r4, #16
   21494:	f00f fa34 	bl	30900 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   21498:	2006      	movs	r0, #6
   2149a:	f7f3 fe33 	bl	15104 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2149e:	4b09      	ldr	r3, [pc, #36]	; (214c4 <nrfx_gpiote_init+0x48>)
   214a0:	2200      	movs	r2, #0
   214a2:	601a      	str	r2, [r3, #0]
   214a4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   214a6:	4b08      	ldr	r3, [pc, #32]	; (214c8 <nrfx_gpiote_init+0x4c>)
   214a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   214ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   214b0:	2301      	movs	r3, #1
   214b2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   214b6:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
   214b8:	4804      	ldr	r0, [pc, #16]	; (214cc <nrfx_gpiote_init+0x50>)
}
   214ba:	bd10      	pop	{r4, pc}
   214bc:	200007e0 	.word	0x200007e0
   214c0:	0bad0005 	.word	0x0bad0005
   214c4:	4000617c 	.word	0x4000617c
   214c8:	40006000 	.word	0x40006000
   214cc:	0bad0000 	.word	0x0bad0000

000214d0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   214d0:	4b03      	ldr	r3, [pc, #12]	; (214e0 <nrfx_gpiote_is_init+0x10>)
   214d2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   214d6:	3800      	subs	r0, #0
   214d8:	bf18      	it	ne
   214da:	2001      	movne	r0, #1
   214dc:	4770      	bx	lr
   214de:	bf00      	nop
   214e0:	200007e0 	.word	0x200007e0

000214e4 <nrfx_gpiote_channel_free>:
{
   214e4:	b508      	push	{r3, lr}
   214e6:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   214e8:	4801      	ldr	r0, [pc, #4]	; (214f0 <nrfx_gpiote_channel_free+0xc>)
   214ea:	f7ff fa09 	bl	20900 <nrfx_flag32_free>
}
   214ee:	bd08      	pop	{r3, pc}
   214f0:	20000850 	.word	0x20000850

000214f4 <nrfx_gpiote_channel_alloc>:
{
   214f4:	b508      	push	{r3, lr}
   214f6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   214f8:	4801      	ldr	r0, [pc, #4]	; (21500 <nrfx_gpiote_channel_alloc+0xc>)
   214fa:	f7ff f9dd 	bl	208b8 <nrfx_flag32_alloc>
}
   214fe:	bd08      	pop	{r3, pc}
   21500:	20000850 	.word	0x20000850

00021504 <nrfx_gpiote_trigger_enable>:
{
   21504:	b570      	push	{r4, r5, r6, lr}
   21506:	4604      	mov	r4, r0
   21508:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   2150a:	f7ff fa31 	bl	20970 <pin_has_trigger>
   2150e:	b1b8      	cbz	r0, 21540 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21510:	4620      	mov	r0, r4
   21512:	f7ff fa23 	bl	2095c <pin_in_use_by_te>
   21516:	b118      	cbz	r0, 21520 <nrfx_gpiote_trigger_enable+0x1c>
   21518:	4620      	mov	r0, r4
   2151a:	f00e ff03 	bl	30324 <pin_is_input>
   2151e:	b9e8      	cbnz	r0, 2155c <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
   21520:	2d00      	cmp	r5, #0
   21522:	d04c      	beq.n	215be <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21524:	f104 0308 	add.w	r3, r4, #8
   21528:	4a70      	ldr	r2, [pc, #448]	; (216ec <nrfx_gpiote_trigger_enable+0x1e8>)
   2152a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   2152e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   21532:	2b04      	cmp	r3, #4
   21534:	f000 8092 	beq.w	2165c <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   21538:	2b05      	cmp	r3, #5
   2153a:	d14e      	bne.n	215da <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2153c:	2602      	movs	r6, #2
   2153e:	e08e      	b.n	2165e <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
   21540:	4e6b      	ldr	r6, [pc, #428]	; (216f0 <nrfx_gpiote_trigger_enable+0x1ec>)
   21542:	f240 33df 	movw	r3, #991	; 0x3df
   21546:	4632      	mov	r2, r6
   21548:	496a      	ldr	r1, [pc, #424]	; (216f4 <nrfx_gpiote_trigger_enable+0x1f0>)
   2154a:	486b      	ldr	r0, [pc, #428]	; (216f8 <nrfx_gpiote_trigger_enable+0x1f4>)
   2154c:	f00a fdfc 	bl	2c148 <printk>
   21550:	f240 31df 	movw	r1, #991	; 0x3df
   21554:	4630      	mov	r0, r6
   21556:	f00a fffc 	bl	2c552 <assert_post_action>
   2155a:	e7d9      	b.n	21510 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
   2155c:	4620      	mov	r0, r4
   2155e:	f7ff fa1d 	bl	2099c <pin_te_get>
   21562:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   21564:	2807      	cmp	r0, #7
   21566:	d81c      	bhi.n	215a2 <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   21568:	00a3      	lsls	r3, r4, #2
   2156a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   2156e:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
   21570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21574:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21578:	2200      	movs	r2, #0
   2157a:	601a      	str	r2, [r3, #0]
   2157c:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2157e:	4a5f      	ldr	r2, [pc, #380]	; (216fc <nrfx_gpiote_trigger_enable+0x1f8>)
   21580:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   21584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   21588:	f043 0301 	orr.w	r3, r3, #1
   2158c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   21590:	2d00      	cmp	r5, #0
   21592:	f000 80a9 	beq.w	216e8 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   21596:	2001      	movs	r0, #1
   21598:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
   2159c:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
   215a0:	e0a2      	b.n	216e8 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   215a2:	4e57      	ldr	r6, [pc, #348]	; (21700 <nrfx_gpiote_trigger_enable+0x1fc>)
   215a4:	f44f 7323 	mov.w	r3, #652	; 0x28c
   215a8:	4632      	mov	r2, r6
   215aa:	4956      	ldr	r1, [pc, #344]	; (21704 <nrfx_gpiote_trigger_enable+0x200>)
   215ac:	4852      	ldr	r0, [pc, #328]	; (216f8 <nrfx_gpiote_trigger_enable+0x1f4>)
   215ae:	f00a fdcb 	bl	2c148 <printk>
   215b2:	f44f 7123 	mov.w	r1, #652	; 0x28c
   215b6:	4630      	mov	r0, r6
   215b8:	f00a ffcb 	bl	2c552 <assert_post_action>
   215bc:	e7d4      	b.n	21568 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
   215be:	4d4c      	ldr	r5, [pc, #304]	; (216f0 <nrfx_gpiote_trigger_enable+0x1ec>)
   215c0:	f240 33ee 	movw	r3, #1006	; 0x3ee
   215c4:	462a      	mov	r2, r5
   215c6:	4950      	ldr	r1, [pc, #320]	; (21708 <nrfx_gpiote_trigger_enable+0x204>)
   215c8:	484b      	ldr	r0, [pc, #300]	; (216f8 <nrfx_gpiote_trigger_enable+0x1f4>)
   215ca:	f00a fdbd 	bl	2c148 <printk>
   215ce:	f240 31ee 	movw	r1, #1006	; 0x3ee
   215d2:	4628      	mov	r0, r5
   215d4:	f00a ffbd 	bl	2c552 <assert_post_action>
   215d8:	e7a4      	b.n	21524 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
   215da:	0963      	lsrs	r3, r4, #5
   215dc:	d01f      	beq.n	2161e <nrfx_gpiote_trigger_enable+0x11a>
   215de:	2b01      	cmp	r3, #1
   215e0:	d120      	bne.n	21624 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
   215e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   215e6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   215ea:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   215ec:	f013 0f01 	tst.w	r3, #1
   215f0:	d01a      	beq.n	21628 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
   215f2:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   215f6:	0963      	lsrs	r3, r4, #5
   215f8:	d024      	beq.n	21644 <nrfx_gpiote_trigger_enable+0x140>
   215fa:	2b01      	cmp	r3, #1
   215fc:	d025      	beq.n	2164a <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
   215fe:	4e43      	ldr	r6, [pc, #268]	; (2170c <nrfx_gpiote_trigger_enable+0x208>)
   21600:	f240 232e 	movw	r3, #558	; 0x22e
   21604:	4632      	mov	r2, r6
   21606:	4942      	ldr	r1, [pc, #264]	; (21710 <nrfx_gpiote_trigger_enable+0x20c>)
   21608:	483b      	ldr	r0, [pc, #236]	; (216f8 <nrfx_gpiote_trigger_enable+0x1f4>)
   2160a:	f00a fd9d 	bl	2c148 <printk>
   2160e:	f240 212e 	movw	r1, #558	; 0x22e
   21612:	4630      	mov	r0, r6
   21614:	f00a ff9d 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21618:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2161c:	e016      	b.n	2164c <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
   2161e:	f04f 33ff 	mov.w	r3, #4294967295
   21622:	e7e0      	b.n	215e6 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
   21624:	2300      	movs	r3, #0
   21626:	e7de      	b.n	215e6 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21628:	4d38      	ldr	r5, [pc, #224]	; (2170c <nrfx_gpiote_trigger_enable+0x208>)
   2162a:	f240 2329 	movw	r3, #553	; 0x229
   2162e:	462a      	mov	r2, r5
   21630:	4938      	ldr	r1, [pc, #224]	; (21714 <nrfx_gpiote_trigger_enable+0x210>)
   21632:	4831      	ldr	r0, [pc, #196]	; (216f8 <nrfx_gpiote_trigger_enable+0x1f4>)
   21634:	f00a fd88 	bl	2c148 <printk>
   21638:	f240 2129 	movw	r1, #553	; 0x229
   2163c:	4628      	mov	r0, r5
   2163e:	f00a ff88 	bl	2c552 <assert_post_action>
   21642:	e7d6      	b.n	215f2 <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
   21644:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21648:	e000      	b.n	2164c <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2164a:	4b33      	ldr	r3, [pc, #204]	; (21718 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
   2164c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21650:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21652:	f013 0f01 	tst.w	r3, #1
   21656:	d024      	beq.n	216a2 <nrfx_gpiote_trigger_enable+0x19e>
   21658:	2603      	movs	r6, #3
   2165a:	e000      	b.n	2165e <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2165c:	2603      	movs	r6, #3
    switch (port)
   2165e:	0963      	lsrs	r3, r4, #5
   21660:	d021      	beq.n	216a6 <nrfx_gpiote_trigger_enable+0x1a2>
   21662:	2b01      	cmp	r3, #1
   21664:	d122      	bne.n	216ac <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
   21666:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2166a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2166e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21670:	f013 0f01 	tst.w	r3, #1
   21674:	d01c      	beq.n	216b0 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
   21676:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2167a:	0964      	lsrs	r4, r4, #5
   2167c:	d026      	beq.n	216cc <nrfx_gpiote_trigger_enable+0x1c8>
   2167e:	2c01      	cmp	r4, #1
   21680:	d027      	beq.n	216d2 <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
   21682:	4c22      	ldr	r4, [pc, #136]	; (2170c <nrfx_gpiote_trigger_enable+0x208>)
   21684:	f240 232e 	movw	r3, #558	; 0x22e
   21688:	4622      	mov	r2, r4
   2168a:	4921      	ldr	r1, [pc, #132]	; (21710 <nrfx_gpiote_trigger_enable+0x20c>)
   2168c:	481a      	ldr	r0, [pc, #104]	; (216f8 <nrfx_gpiote_trigger_enable+0x1f4>)
   2168e:	f00a fd5b 	bl	2c148 <printk>
   21692:	f240 212e 	movw	r1, #558	; 0x22e
   21696:	4620      	mov	r0, r4
   21698:	f00a ff5b 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   2169c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   216a0:	e018      	b.n	216d4 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   216a2:	2602      	movs	r6, #2
   216a4:	e7db      	b.n	2165e <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
   216a6:	f04f 33ff 	mov.w	r3, #4294967295
   216aa:	e7de      	b.n	2166a <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
   216ac:	2300      	movs	r3, #0
   216ae:	e7dc      	b.n	2166a <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   216b0:	4d16      	ldr	r5, [pc, #88]	; (2170c <nrfx_gpiote_trigger_enable+0x208>)
   216b2:	f240 2329 	movw	r3, #553	; 0x229
   216b6:	462a      	mov	r2, r5
   216b8:	4916      	ldr	r1, [pc, #88]	; (21714 <nrfx_gpiote_trigger_enable+0x210>)
   216ba:	480f      	ldr	r0, [pc, #60]	; (216f8 <nrfx_gpiote_trigger_enable+0x1f4>)
   216bc:	f00a fd44 	bl	2c148 <printk>
   216c0:	f240 2129 	movw	r1, #553	; 0x229
   216c4:	4628      	mov	r0, r5
   216c6:	f00a ff44 	bl	2c552 <assert_post_action>
   216ca:	e7d4      	b.n	21676 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
   216cc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   216d0:	e000      	b.n	216d4 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   216d2:	4911      	ldr	r1, [pc, #68]	; (21718 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   216d4:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
   216d8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   216dc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   216e0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   216e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   216e8:	bd70      	pop	{r4, r5, r6, pc}
   216ea:	bf00      	nop
   216ec:	200007e0 	.word	0x200007e0
   216f0:	0003577c 	.word	0x0003577c
   216f4:	00035820 	.word	0x00035820
   216f8:	00031df4 	.word	0x00031df4
   216fc:	40006000 	.word	0x40006000
   21700:	000357dc 	.word	0x000357dc
   21704:	00035814 	.word	0x00035814
   21708:	00035838 	.word	0x00035838
   2170c:	000321d8 	.word	0x000321d8
   21710:	000364dc 	.word	0x000364dc
   21714:	0003220c 	.word	0x0003220c
   21718:	50000300 	.word	0x50000300

0002171c <nrfx_gpiote_trigger_disable>:
{
   2171c:	b538      	push	{r3, r4, r5, lr}
   2171e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21720:	f7ff f91c 	bl	2095c <pin_in_use_by_te>
   21724:	b1a0      	cbz	r0, 21750 <nrfx_gpiote_trigger_disable+0x34>
   21726:	4620      	mov	r0, r4
   21728:	f00e fdfc 	bl	30324 <pin_is_input>
   2172c:	b180      	cbz	r0, 21750 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   2172e:	4620      	mov	r0, r4
   21730:	f7ff f934 	bl	2099c <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21734:	2201      	movs	r2, #1
   21736:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   21738:	4b26      	ldr	r3, [pc, #152]	; (217d4 <nrfx_gpiote_trigger_disable+0xb8>)
   2173a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2173e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   21742:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   21746:	f022 0203 	bic.w	r2, r2, #3
   2174a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   2174e:	e040      	b.n	217d2 <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
   21750:	0963      	lsrs	r3, r4, #5
   21752:	d01f      	beq.n	21794 <nrfx_gpiote_trigger_disable+0x78>
   21754:	2b01      	cmp	r3, #1
   21756:	d120      	bne.n	2179a <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
   21758:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2175c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21760:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21762:	f013 0f01 	tst.w	r3, #1
   21766:	d01a      	beq.n	2179e <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
   21768:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2176c:	0964      	lsrs	r4, r4, #5
   2176e:	d024      	beq.n	217ba <nrfx_gpiote_trigger_disable+0x9e>
   21770:	2c01      	cmp	r4, #1
   21772:	d025      	beq.n	217c0 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
   21774:	4c18      	ldr	r4, [pc, #96]	; (217d8 <nrfx_gpiote_trigger_disable+0xbc>)
   21776:	f240 232e 	movw	r3, #558	; 0x22e
   2177a:	4622      	mov	r2, r4
   2177c:	4917      	ldr	r1, [pc, #92]	; (217dc <nrfx_gpiote_trigger_disable+0xc0>)
   2177e:	4818      	ldr	r0, [pc, #96]	; (217e0 <nrfx_gpiote_trigger_disable+0xc4>)
   21780:	f00a fce2 	bl	2c148 <printk>
   21784:	f240 212e 	movw	r1, #558	; 0x22e
   21788:	4620      	mov	r0, r4
   2178a:	f00a fee2 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   2178e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   21792:	e016      	b.n	217c2 <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
   21794:	f04f 33ff 	mov.w	r3, #4294967295
   21798:	e7e0      	b.n	2175c <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
   2179a:	2300      	movs	r3, #0
   2179c:	e7de      	b.n	2175c <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2179e:	4d0e      	ldr	r5, [pc, #56]	; (217d8 <nrfx_gpiote_trigger_disable+0xbc>)
   217a0:	f240 2329 	movw	r3, #553	; 0x229
   217a4:	462a      	mov	r2, r5
   217a6:	490f      	ldr	r1, [pc, #60]	; (217e4 <nrfx_gpiote_trigger_disable+0xc8>)
   217a8:	480d      	ldr	r0, [pc, #52]	; (217e0 <nrfx_gpiote_trigger_disable+0xc4>)
   217aa:	f00a fccd 	bl	2c148 <printk>
   217ae:	f240 2129 	movw	r1, #553	; 0x229
   217b2:	4628      	mov	r0, r5
   217b4:	f00a fecd 	bl	2c552 <assert_post_action>
   217b8:	e7d6      	b.n	21768 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
   217ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   217be:	e000      	b.n	217c2 <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   217c0:	4909      	ldr	r1, [pc, #36]	; (217e8 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   217c2:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   217c6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   217ca:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   217ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   217d2:	bd38      	pop	{r3, r4, r5, pc}
   217d4:	40006000 	.word	0x40006000
   217d8:	000321d8 	.word	0x000321d8
   217dc:	000364dc 	.word	0x000364dc
   217e0:	00031df4 	.word	0x00031df4
   217e4:	0003220c 	.word	0x0003220c
   217e8:	50000300 	.word	0x50000300

000217ec <nrfx_gpiote_pin_uninit>:
{
   217ec:	b538      	push	{r3, r4, r5, lr}
   217ee:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   217f0:	f7ff f8aa 	bl	20948 <pin_in_use>
   217f4:	b908      	cbnz	r0, 217fa <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   217f6:	4824      	ldr	r0, [pc, #144]	; (21888 <nrfx_gpiote_pin_uninit+0x9c>)
}
   217f8:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
   217fa:	4620      	mov	r0, r4
   217fc:	f7ff ff8e 	bl	2171c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   21800:	4620      	mov	r0, r4
   21802:	f7ff f98d 	bl	20b20 <pin_handler_trigger_uninit>
    switch (port)
   21806:	0963      	lsrs	r3, r4, #5
   21808:	d01f      	beq.n	2184a <nrfx_gpiote_pin_uninit+0x5e>
   2180a:	2b01      	cmp	r3, #1
   2180c:	d120      	bne.n	21850 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
   2180e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21812:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21816:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21818:	f013 0f01 	tst.w	r3, #1
   2181c:	d01a      	beq.n	21854 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
   2181e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21822:	0964      	lsrs	r4, r4, #5
   21824:	d024      	beq.n	21870 <nrfx_gpiote_pin_uninit+0x84>
   21826:	2c01      	cmp	r4, #1
   21828:	d025      	beq.n	21876 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
   2182a:	4c18      	ldr	r4, [pc, #96]	; (2188c <nrfx_gpiote_pin_uninit+0xa0>)
   2182c:	f240 232e 	movw	r3, #558	; 0x22e
   21830:	4622      	mov	r2, r4
   21832:	4917      	ldr	r1, [pc, #92]	; (21890 <nrfx_gpiote_pin_uninit+0xa4>)
   21834:	4817      	ldr	r0, [pc, #92]	; (21894 <nrfx_gpiote_pin_uninit+0xa8>)
   21836:	f00a fc87 	bl	2c148 <printk>
   2183a:	f240 212e 	movw	r1, #558	; 0x22e
   2183e:	4620      	mov	r0, r4
   21840:	f00a fe87 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21844:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21848:	e016      	b.n	21878 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
   2184a:	f04f 33ff 	mov.w	r3, #4294967295
   2184e:	e7e0      	b.n	21812 <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
   21850:	2300      	movs	r3, #0
   21852:	e7de      	b.n	21812 <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21854:	4d0d      	ldr	r5, [pc, #52]	; (2188c <nrfx_gpiote_pin_uninit+0xa0>)
   21856:	f240 2329 	movw	r3, #553	; 0x229
   2185a:	462a      	mov	r2, r5
   2185c:	490e      	ldr	r1, [pc, #56]	; (21898 <nrfx_gpiote_pin_uninit+0xac>)
   2185e:	480d      	ldr	r0, [pc, #52]	; (21894 <nrfx_gpiote_pin_uninit+0xa8>)
   21860:	f00a fc72 	bl	2c148 <printk>
   21864:	f240 2129 	movw	r1, #553	; 0x229
   21868:	4628      	mov	r0, r5
   2186a:	f00a fe72 	bl	2c552 <assert_post_action>
   2186e:	e7d6      	b.n	2181e <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
   21870:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21874:	e000      	b.n	21878 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21876:	4b09      	ldr	r3, [pc, #36]	; (2189c <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
   21878:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   2187c:	2202      	movs	r2, #2
   2187e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
   21882:	4807      	ldr	r0, [pc, #28]	; (218a0 <nrfx_gpiote_pin_uninit+0xb4>)
   21884:	e7b8      	b.n	217f8 <nrfx_gpiote_pin_uninit+0xc>
   21886:	bf00      	nop
   21888:	0bad0004 	.word	0x0bad0004
   2188c:	000321d8 	.word	0x000321d8
   21890:	000364dc 	.word	0x000364dc
   21894:	00031df4 	.word	0x00031df4
   21898:	0003220c 	.word	0x0003220c
   2189c:	50000300 	.word	0x50000300
   218a0:	0bad0000 	.word	0x0bad0000

000218a4 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   218a4:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   218a6:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   218a8:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   218ac:	2100      	movs	r1, #0
    uint32_t status = 0;
   218ae:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   218b0:	e003      	b.n	218ba <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   218b2:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   218b4:	3304      	adds	r3, #4
   218b6:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   218b8:	3101      	adds	r1, #1
   218ba:	2907      	cmp	r1, #7
   218bc:	d814      	bhi.n	218e8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   218be:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   218c2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   218c6:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   218c8:	2a00      	cmp	r2, #0
   218ca:	d0f2      	beq.n	218b2 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   218cc:	4a0b      	ldr	r2, [pc, #44]	; (218fc <nrfx_gpiote_irq_handler+0x58>)
   218ce:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   218d2:	4210      	tst	r0, r2
   218d4:	d0ed      	beq.n	218b2 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   218d6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   218da:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   218de:	2400      	movs	r4, #0
   218e0:	6014      	str	r4, [r2, #0]
   218e2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   218e4:	4305      	orrs	r5, r0
   218e6:	e7e4      	b.n	218b2 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   218e8:	4b05      	ldr	r3, [pc, #20]	; (21900 <nrfx_gpiote_irq_handler+0x5c>)
   218ea:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   218ec:	b91b      	cbnz	r3, 218f6 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   218ee:	4628      	mov	r0, r5
   218f0:	f7ff f968 	bl	20bc4 <gpiote_evt_handle>
}
   218f4:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   218f6:	f7ff fac7 	bl	20e88 <port_event_handle>
   218fa:	e7f8      	b.n	218ee <nrfx_gpiote_irq_handler+0x4a>
   218fc:	40006000 	.word	0x40006000
   21900:	4000617c 	.word	0x4000617c

00021904 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   21904:	b508      	push	{r3, lr}
   21906:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   21908:	4801      	ldr	r0, [pc, #4]	; (21910 <nrfx_ppi_channel_alloc+0xc>)
   2190a:	f7fe ffd5 	bl	208b8 <nrfx_flag32_alloc>
}
   2190e:	bd08      	pop	{r3, pc}
   21910:	2000085c 	.word	0x2000085c

00021914 <finish_transfer>:

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
}

static void finish_transfer(spi_control_block_t * p_cb)
{
   21914:	b570      	push	{r4, r5, r6, lr}
   21916:	4604      	mov	r4, r0
    // If Slave Select signal is used, this is the time to deactivate it.
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21918:	7f85      	ldrb	r5, [r0, #30]
   2191a:	2dff      	cmp	r5, #255	; 0xff
   2191c:	d108      	bne.n	21930 <finish_transfer+0x1c>
        nrf_gpio_pin_write(p_cb->ss_pin, 1);
    }

    // By clearing this flag before calling the handler we allow subsequent
    // transfers to be started directly from the handler function.
    p_cb->transfer_in_progress = false;
   2191e:	2300      	movs	r3, #0
   21920:	7763      	strb	r3, [r4, #29]

    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   21922:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   21924:	4620      	mov	r0, r4
   21926:	f850 3b08 	ldr.w	r3, [r0], #8
   2192a:	6861      	ldr	r1, [r4, #4]
   2192c:	4798      	blx	r3
}
   2192e:	bd70      	pop	{r4, r5, r6, pc}
    switch (port)
   21930:	096b      	lsrs	r3, r5, #5
   21932:	d01f      	beq.n	21974 <finish_transfer+0x60>
   21934:	2b01      	cmp	r3, #1
   21936:	d120      	bne.n	2197a <finish_transfer+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
   21938:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2193c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21940:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21942:	f013 0f01 	tst.w	r3, #1
   21946:	d01a      	beq.n	2197e <finish_transfer+0x6a>
    *p_pin = pin_number & 0x1F;
   21948:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2194c:	096d      	lsrs	r5, r5, #5
   2194e:	d024      	beq.n	2199a <finish_transfer+0x86>
   21950:	2d01      	cmp	r5, #1
   21952:	d025      	beq.n	219a0 <finish_transfer+0x8c>
            NRFX_ASSERT(0);
   21954:	4d15      	ldr	r5, [pc, #84]	; (219ac <finish_transfer+0x98>)
   21956:	f240 232e 	movw	r3, #558	; 0x22e
   2195a:	462a      	mov	r2, r5
   2195c:	4914      	ldr	r1, [pc, #80]	; (219b0 <finish_transfer+0x9c>)
   2195e:	4815      	ldr	r0, [pc, #84]	; (219b4 <finish_transfer+0xa0>)
   21960:	f00a fbf2 	bl	2c148 <printk>
   21964:	f240 212e 	movw	r1, #558	; 0x22e
   21968:	4628      	mov	r0, r5
   2196a:	f00a fdf2 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   2196e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21972:	e016      	b.n	219a2 <finish_transfer+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
   21974:	f04f 33ff 	mov.w	r3, #4294967295
   21978:	e7e0      	b.n	2193c <finish_transfer+0x28>
    switch (port)
   2197a:	2300      	movs	r3, #0
   2197c:	e7de      	b.n	2193c <finish_transfer+0x28>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2197e:	4e0b      	ldr	r6, [pc, #44]	; (219ac <finish_transfer+0x98>)
   21980:	f240 2329 	movw	r3, #553	; 0x229
   21984:	4632      	mov	r2, r6
   21986:	490c      	ldr	r1, [pc, #48]	; (219b8 <finish_transfer+0xa4>)
   21988:	480a      	ldr	r0, [pc, #40]	; (219b4 <finish_transfer+0xa0>)
   2198a:	f00a fbdd 	bl	2c148 <printk>
   2198e:	f240 2129 	movw	r1, #553	; 0x229
   21992:	4630      	mov	r0, r6
   21994:	f00a fddd 	bl	2c552 <assert_post_action>
   21998:	e7d6      	b.n	21948 <finish_transfer+0x34>
        case 0: return NRF_P0;
   2199a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2199e:	e000      	b.n	219a2 <finish_transfer+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   219a0:	4a06      	ldr	r2, [pc, #24]	; (219bc <finish_transfer+0xa8>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   219a2:	2301      	movs	r3, #1
   219a4:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   219a6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   219aa:	e7b8      	b.n	2191e <finish_transfer+0xa>
   219ac:	000321d8 	.word	0x000321d8
   219b0:	000364dc 	.word	0x000364dc
   219b4:	00031df4 	.word	0x00031df4
   219b8:	0003220c 	.word	0x0003220c
   219bc:	50000300 	.word	0x50000300

000219c0 <irq_handler>:
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    p_cb->abort = true;
}

static void irq_handler(NRF_SPI_Type * p_spi, spi_control_block_t * p_cb)
{
   219c0:	b570      	push	{r4, r5, r6, lr}
   219c2:	4604      	mov	r4, r0
   219c4:	460d      	mov	r5, r1
    NRFX_ASSERT(p_cb->handler);
   219c6:	680b      	ldr	r3, [r1, #0]
   219c8:	b153      	cbz	r3, 219e0 <irq_handler+0x20>
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_spi_event_clear(NRF_SPI_Type *  p_reg,
                                           nrf_spi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   219ca:	2300      	movs	r3, #0
   219cc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   219d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108

    nrf_spi_event_clear(p_spi, NRF_SPI_EVENT_READY);
    NRFX_LOG_DEBUG("Event: NRF_SPI_EVENT_READY.");

    if (!transfer_byte(p_spi, p_cb))
   219d4:	4629      	mov	r1, r5
   219d6:	4620      	mov	r0, r4
   219d8:	f00e fcb2 	bl	30340 <transfer_byte>
   219dc:	b170      	cbz	r0, 219fc <irq_handler+0x3c>
    {
        finish_transfer(p_cb);
    }
}
   219de:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->handler);
   219e0:	4e08      	ldr	r6, [pc, #32]	; (21a04 <irq_handler+0x44>)
   219e2:	f240 139b 	movw	r3, #411	; 0x19b
   219e6:	4632      	mov	r2, r6
   219e8:	4907      	ldr	r1, [pc, #28]	; (21a08 <irq_handler+0x48>)
   219ea:	4808      	ldr	r0, [pc, #32]	; (21a0c <irq_handler+0x4c>)
   219ec:	f00a fbac 	bl	2c148 <printk>
   219f0:	f240 119b 	movw	r1, #411	; 0x19b
   219f4:	4630      	mov	r0, r6
   219f6:	f00a fdac 	bl	2c552 <assert_post_action>
   219fa:	e7e6      	b.n	219ca <irq_handler+0xa>
        finish_transfer(p_cb);
   219fc:	4628      	mov	r0, r5
   219fe:	f7ff ff89 	bl	21914 <finish_transfer>
}
   21a02:	e7ec      	b.n	219de <irq_handler+0x1e>
   21a04:	00035844 	.word	0x00035844
   21a08:	00035880 	.word	0x00035880
   21a0c:	00031df4 	.word	0x00031df4

00021a10 <spi_xfer>:
{
   21a10:	b538      	push	{r3, r4, r5, lr}
   21a12:	4604      	mov	r4, r0
   21a14:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
   21a16:	2300      	movs	r3, #0
   21a18:	620b      	str	r3, [r1, #32]
}

NRF_STATIC_INLINE void nrf_spi_int_disable(NRF_SPI_Type * p_reg,
                                           uint32_t       mask)
{
    p_reg->INTENCLR = mask;
   21a1a:	2104      	movs	r1, #4
   21a1c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21a20:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   21a24:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   21a28:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
   21a2a:	b183      	cbz	r3, 21a4e <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   21a2c:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
   21a2e:	781b      	ldrb	r3, [r3, #0]
#endif
}

NRF_STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
{
    p_reg->TXD = data;
   21a30:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   21a34:	6853      	ldr	r3, [r2, #4]
   21a36:	2b01      	cmp	r3, #1
   21a38:	d90b      	bls.n	21a52 <spi_xfer+0x42>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   21a3a:	6813      	ldr	r3, [r2, #0]
   21a3c:	785b      	ldrb	r3, [r3, #1]
   21a3e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
   21a42:	682b      	ldr	r3, [r5, #0]
   21a44:	b163      	cbz	r3, 21a60 <spi_xfer+0x50>
    p_reg->INTENSET = mask;
   21a46:	2304      	movs	r3, #4
   21a48:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   21a4c:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
   21a4e:	7feb      	ldrb	r3, [r5, #31]
   21a50:	e7ee      	b.n	21a30 <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
   21a52:	68d3      	ldr	r3, [r2, #12]
   21a54:	2b01      	cmp	r3, #1
   21a56:	d9f4      	bls.n	21a42 <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   21a58:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
   21a5a:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
   21a5e:	e7f0      	b.n	21a42 <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21a60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   21a64:	2b00      	cmp	r3, #0
   21a66:	d0fb      	beq.n	21a60 <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21a68:	2300      	movs	r3, #0
   21a6a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   21a6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   21a72:	4629      	mov	r1, r5
   21a74:	4620      	mov	r0, r4
   21a76:	f00e fc63 	bl	30340 <transfer_byte>
   21a7a:	2800      	cmp	r0, #0
   21a7c:	d1f0      	bne.n	21a60 <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21a7e:	7fac      	ldrb	r4, [r5, #30]
   21a80:	2cff      	cmp	r4, #255	; 0xff
   21a82:	d0e3      	beq.n	21a4c <spi_xfer+0x3c>
    switch (port)
   21a84:	0963      	lsrs	r3, r4, #5
   21a86:	d01f      	beq.n	21ac8 <spi_xfer+0xb8>
   21a88:	2b01      	cmp	r3, #1
   21a8a:	d120      	bne.n	21ace <spi_xfer+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
   21a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21a90:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21a94:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21a96:	f013 0f01 	tst.w	r3, #1
   21a9a:	d01a      	beq.n	21ad2 <spi_xfer+0xc2>
    *p_pin = pin_number & 0x1F;
   21a9c:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21aa0:	0964      	lsrs	r4, r4, #5
   21aa2:	d024      	beq.n	21aee <spi_xfer+0xde>
   21aa4:	2c01      	cmp	r4, #1
   21aa6:	d025      	beq.n	21af4 <spi_xfer+0xe4>
            NRFX_ASSERT(0);
   21aa8:	4c15      	ldr	r4, [pc, #84]	; (21b00 <spi_xfer+0xf0>)
   21aaa:	f240 232e 	movw	r3, #558	; 0x22e
   21aae:	4622      	mov	r2, r4
   21ab0:	4914      	ldr	r1, [pc, #80]	; (21b04 <spi_xfer+0xf4>)
   21ab2:	4815      	ldr	r0, [pc, #84]	; (21b08 <spi_xfer+0xf8>)
   21ab4:	f00a fb48 	bl	2c148 <printk>
   21ab8:	f240 212e 	movw	r1, #558	; 0x22e
   21abc:	4620      	mov	r0, r4
   21abe:	f00a fd48 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21ac2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21ac6:	e016      	b.n	21af6 <spi_xfer+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
   21ac8:	f04f 33ff 	mov.w	r3, #4294967295
   21acc:	e7e0      	b.n	21a90 <spi_xfer+0x80>
    switch (port)
   21ace:	2300      	movs	r3, #0
   21ad0:	e7de      	b.n	21a90 <spi_xfer+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21ad2:	4d0b      	ldr	r5, [pc, #44]	; (21b00 <spi_xfer+0xf0>)
   21ad4:	f240 2329 	movw	r3, #553	; 0x229
   21ad8:	462a      	mov	r2, r5
   21ada:	490c      	ldr	r1, [pc, #48]	; (21b0c <spi_xfer+0xfc>)
   21adc:	480a      	ldr	r0, [pc, #40]	; (21b08 <spi_xfer+0xf8>)
   21ade:	f00a fb33 	bl	2c148 <printk>
   21ae2:	f240 2129 	movw	r1, #553	; 0x229
   21ae6:	4628      	mov	r0, r5
   21ae8:	f00a fd33 	bl	2c552 <assert_post_action>
   21aec:	e7d6      	b.n	21a9c <spi_xfer+0x8c>
        case 0: return NRF_P0;
   21aee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21af2:	e000      	b.n	21af6 <spi_xfer+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21af4:	4a06      	ldr	r2, [pc, #24]	; (21b10 <spi_xfer+0x100>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21af6:	2301      	movs	r3, #1
   21af8:	40ab      	lsls	r3, r5
    p_reg->OUTSET = set_mask;
   21afa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   21afe:	e7a5      	b.n	21a4c <spi_xfer+0x3c>
   21b00:	000321d8 	.word	0x000321d8
   21b04:	000364dc 	.word	0x000364dc
   21b08:	00031df4 	.word	0x00031df4
   21b0c:	0003220c 	.word	0x0003220c
   21b10:	50000300 	.word	0x50000300

00021b14 <configure_pins>:
{
   21b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b18:	4605      	mov	r5, r0
   21b1a:	460c      	mov	r4, r1
    if (!p_config->skip_gpio_cfg)
   21b1c:	7bcb      	ldrb	r3, [r1, #15]
   21b1e:	b19b      	cbz	r3, 21b48 <configure_pins+0x34>
    if (!p_config->skip_psel_cfg)
   21b20:	7c23      	ldrb	r3, [r4, #16]
   21b22:	b97b      	cbnz	r3, 21b44 <configure_pins+0x30>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   21b24:	7863      	ldrb	r3, [r4, #1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21b26:	2bff      	cmp	r3, #255	; 0xff
   21b28:	f000 8224 	beq.w	21f74 <configure_pins+0x460>
   21b2c:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   21b2e:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21b30:	2bff      	cmp	r3, #255	; 0xff
   21b32:	f000 8222 	beq.w	21f7a <configure_pins+0x466>
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   21b36:	7821      	ldrb	r1, [r4, #0]
    p_reg->PSEL.SCK = sck_pin;
   21b38:	f8c5 1508 	str.w	r1, [r5, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   21b3c:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   21b40:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}
   21b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_write(p_config->sck_pin,
   21b48:	780e      	ldrb	r6, [r1, #0]
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
   21b4a:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   21b4c:	2b01      	cmp	r3, #1
   21b4e:	bf94      	ite	ls
   21b50:	2300      	movls	r3, #0
   21b52:	2301      	movhi	r3, #1
    if (value == 0)
   21b54:	2b00      	cmp	r3, #0
   21b56:	d15d      	bne.n	21c14 <configure_pins+0x100>
    switch (port)
   21b58:	0972      	lsrs	r2, r6, #5
   21b5a:	d01f      	beq.n	21b9c <configure_pins+0x88>
   21b5c:	2a01      	cmp	r2, #1
   21b5e:	d101      	bne.n	21b64 <configure_pins+0x50>
            mask = P1_FEATURE_PINS_PRESENT;
   21b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21b64:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21b68:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21b6a:	f013 0f01 	tst.w	r3, #1
   21b6e:	d018      	beq.n	21ba2 <configure_pins+0x8e>
    *p_pin = pin_number & 0x1F;
   21b70:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21b74:	0976      	lsrs	r6, r6, #5
   21b76:	d022      	beq.n	21bbe <configure_pins+0xaa>
   21b78:	2e01      	cmp	r6, #1
   21b7a:	d023      	beq.n	21bc4 <configure_pins+0xb0>
            NRFX_ASSERT(0);
   21b7c:	4ebe      	ldr	r6, [pc, #760]	; (21e78 <configure_pins+0x364>)
   21b7e:	f240 232e 	movw	r3, #558	; 0x22e
   21b82:	4632      	mov	r2, r6
   21b84:	49bd      	ldr	r1, [pc, #756]	; (21e7c <configure_pins+0x368>)
   21b86:	48be      	ldr	r0, [pc, #760]	; (21e80 <configure_pins+0x36c>)
   21b88:	f00a fade 	bl	2c148 <printk>
   21b8c:	f240 212e 	movw	r1, #558	; 0x22e
   21b90:	4630      	mov	r0, r6
   21b92:	f00a fcde 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21b96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21b9a:	e014      	b.n	21bc6 <configure_pins+0xb2>
            mask = P0_FEATURE_PINS_PRESENT;
   21b9c:	f04f 33ff 	mov.w	r3, #4294967295
   21ba0:	e7e0      	b.n	21b64 <configure_pins+0x50>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21ba2:	4fb5      	ldr	r7, [pc, #724]	; (21e78 <configure_pins+0x364>)
   21ba4:	f240 2329 	movw	r3, #553	; 0x229
   21ba8:	463a      	mov	r2, r7
   21baa:	49b6      	ldr	r1, [pc, #728]	; (21e84 <configure_pins+0x370>)
   21bac:	48b4      	ldr	r0, [pc, #720]	; (21e80 <configure_pins+0x36c>)
   21bae:	f00a facb 	bl	2c148 <printk>
   21bb2:	f240 2129 	movw	r1, #553	; 0x229
   21bb6:	4638      	mov	r0, r7
   21bb8:	f00a fccb 	bl	2c552 <assert_post_action>
   21bbc:	e7d8      	b.n	21b70 <configure_pins+0x5c>
        case 0: return NRF_P0;
   21bbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21bc2:	e000      	b.n	21bc6 <configure_pins+0xb2>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21bc4:	4ab0      	ldr	r2, [pc, #704]	; (21e88 <configure_pins+0x374>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21bc6:	2301      	movs	r3, #1
   21bc8:	40bb      	lsls	r3, r7
    p_reg->OUTCLR = clr_mask;
   21bca:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
        nrf_gpio_cfg(p_config->sck_pin,
   21bce:	7826      	ldrb	r6, [r4, #0]
    switch (port)
   21bd0:	0973      	lsrs	r3, r6, #5
   21bd2:	d05d      	beq.n	21c90 <configure_pins+0x17c>
   21bd4:	2b01      	cmp	r3, #1
   21bd6:	d15e      	bne.n	21c96 <configure_pins+0x182>
            mask = P1_FEATURE_PINS_PRESENT;
   21bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21bdc:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21be0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21be2:	f013 0f01 	tst.w	r3, #1
   21be6:	d058      	beq.n	21c9a <configure_pins+0x186>
    *p_pin = pin_number & 0x1F;
   21be8:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21bec:	0976      	lsrs	r6, r6, #5
   21bee:	d062      	beq.n	21cb6 <configure_pins+0x1a2>
   21bf0:	2e01      	cmp	r6, #1
   21bf2:	d063      	beq.n	21cbc <configure_pins+0x1a8>
            NRFX_ASSERT(0);
   21bf4:	4ea0      	ldr	r6, [pc, #640]	; (21e78 <configure_pins+0x364>)
   21bf6:	f240 232e 	movw	r3, #558	; 0x22e
   21bfa:	4632      	mov	r2, r6
   21bfc:	499f      	ldr	r1, [pc, #636]	; (21e7c <configure_pins+0x368>)
   21bfe:	48a0      	ldr	r0, [pc, #640]	; (21e80 <configure_pins+0x36c>)
   21c00:	f00a faa2 	bl	2c148 <printk>
   21c04:	f240 212e 	movw	r1, #558	; 0x22e
   21c08:	4630      	mov	r0, r6
   21c0a:	f00a fca2 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21c0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21c12:	e054      	b.n	21cbe <configure_pins+0x1aa>
    switch (port)
   21c14:	0973      	lsrs	r3, r6, #5
   21c16:	d01f      	beq.n	21c58 <configure_pins+0x144>
   21c18:	2b01      	cmp	r3, #1
   21c1a:	d120      	bne.n	21c5e <configure_pins+0x14a>
            mask = P1_FEATURE_PINS_PRESENT;
   21c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21c20:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21c24:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21c26:	f013 0f01 	tst.w	r3, #1
   21c2a:	d01a      	beq.n	21c62 <configure_pins+0x14e>
    *p_pin = pin_number & 0x1F;
   21c2c:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21c30:	0976      	lsrs	r6, r6, #5
   21c32:	d024      	beq.n	21c7e <configure_pins+0x16a>
   21c34:	2e01      	cmp	r6, #1
   21c36:	d025      	beq.n	21c84 <configure_pins+0x170>
            NRFX_ASSERT(0);
   21c38:	4e8f      	ldr	r6, [pc, #572]	; (21e78 <configure_pins+0x364>)
   21c3a:	f240 232e 	movw	r3, #558	; 0x22e
   21c3e:	4632      	mov	r2, r6
   21c40:	498e      	ldr	r1, [pc, #568]	; (21e7c <configure_pins+0x368>)
   21c42:	488f      	ldr	r0, [pc, #572]	; (21e80 <configure_pins+0x36c>)
   21c44:	f00a fa80 	bl	2c148 <printk>
   21c48:	f240 212e 	movw	r1, #558	; 0x22e
   21c4c:	4630      	mov	r0, r6
   21c4e:	f00a fc80 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21c52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21c56:	e016      	b.n	21c86 <configure_pins+0x172>
            mask = P0_FEATURE_PINS_PRESENT;
   21c58:	f04f 33ff 	mov.w	r3, #4294967295
   21c5c:	e7e0      	b.n	21c20 <configure_pins+0x10c>
    switch (port)
   21c5e:	2300      	movs	r3, #0
   21c60:	e7de      	b.n	21c20 <configure_pins+0x10c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21c62:	4f85      	ldr	r7, [pc, #532]	; (21e78 <configure_pins+0x364>)
   21c64:	f240 2329 	movw	r3, #553	; 0x229
   21c68:	463a      	mov	r2, r7
   21c6a:	4986      	ldr	r1, [pc, #536]	; (21e84 <configure_pins+0x370>)
   21c6c:	4884      	ldr	r0, [pc, #528]	; (21e80 <configure_pins+0x36c>)
   21c6e:	f00a fa6b 	bl	2c148 <printk>
   21c72:	f240 2129 	movw	r1, #553	; 0x229
   21c76:	4638      	mov	r0, r7
   21c78:	f00a fc6b 	bl	2c552 <assert_post_action>
   21c7c:	e7d6      	b.n	21c2c <configure_pins+0x118>
        case 0: return NRF_P0;
   21c7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21c82:	e000      	b.n	21c86 <configure_pins+0x172>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21c84:	4a80      	ldr	r2, [pc, #512]	; (21e88 <configure_pins+0x374>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21c86:	2301      	movs	r3, #1
   21c88:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   21c8a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   21c8e:	e79e      	b.n	21bce <configure_pins+0xba>
            mask = P0_FEATURE_PINS_PRESENT;
   21c90:	f04f 33ff 	mov.w	r3, #4294967295
   21c94:	e7a2      	b.n	21bdc <configure_pins+0xc8>
    switch (port)
   21c96:	2300      	movs	r3, #0
   21c98:	e7a0      	b.n	21bdc <configure_pins+0xc8>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21c9a:	4f77      	ldr	r7, [pc, #476]	; (21e78 <configure_pins+0x364>)
   21c9c:	f240 2329 	movw	r3, #553	; 0x229
   21ca0:	463a      	mov	r2, r7
   21ca2:	4978      	ldr	r1, [pc, #480]	; (21e84 <configure_pins+0x370>)
   21ca4:	4876      	ldr	r0, [pc, #472]	; (21e80 <configure_pins+0x36c>)
   21ca6:	f00a fa4f 	bl	2c148 <printk>
   21caa:	f240 2129 	movw	r1, #553	; 0x229
   21cae:	4638      	mov	r0, r7
   21cb0:	f00a fc4f 	bl	2c552 <assert_post_action>
   21cb4:	e798      	b.n	21be8 <configure_pins+0xd4>
        case 0: return NRF_P0;
   21cb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21cba:	e000      	b.n	21cbe <configure_pins+0x1aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21cbc:	4b72      	ldr	r3, [pc, #456]	; (21e88 <configure_pins+0x374>)
    reg->PIN_CNF[pin_number] = cnf;
   21cbe:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   21cc2:	2201      	movs	r2, #1
   21cc4:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   21cc8:	7866      	ldrb	r6, [r4, #1]
   21cca:	2eff      	cmp	r6, #255	; 0xff
   21ccc:	d12e      	bne.n	21d2c <configure_pins+0x218>
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   21cce:	78a6      	ldrb	r6, [r4, #2]
   21cd0:	2eff      	cmp	r6, #255	; 0xff
   21cd2:	f040 80a8 	bne.w	21e26 <configure_pins+0x312>
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21cd6:	78e6      	ldrb	r6, [r4, #3]
   21cd8:	2eff      	cmp	r6, #255	; 0xff
   21cda:	f43f af21 	beq.w	21b20 <configure_pins+0xc>
    switch (port)
   21cde:	0973      	lsrs	r3, r6, #5
   21ce0:	f000 80ed 	beq.w	21ebe <configure_pins+0x3aa>
   21ce4:	2b01      	cmp	r3, #1
   21ce6:	f040 80ed 	bne.w	21ec4 <configure_pins+0x3b0>
            mask = P1_FEATURE_PINS_PRESENT;
   21cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21cee:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21cf2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21cf4:	f013 0f01 	tst.w	r3, #1
   21cf8:	f000 80e6 	beq.w	21ec8 <configure_pins+0x3b4>
    *p_pin = pin_number & 0x1F;
   21cfc:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21d00:	0976      	lsrs	r6, r6, #5
   21d02:	f000 80ef 	beq.w	21ee4 <configure_pins+0x3d0>
   21d06:	2e01      	cmp	r6, #1
   21d08:	f000 80ef 	beq.w	21eea <configure_pins+0x3d6>
            NRFX_ASSERT(0);
   21d0c:	4e5a      	ldr	r6, [pc, #360]	; (21e78 <configure_pins+0x364>)
   21d0e:	f240 232e 	movw	r3, #558	; 0x22e
   21d12:	4632      	mov	r2, r6
   21d14:	4959      	ldr	r1, [pc, #356]	; (21e7c <configure_pins+0x368>)
   21d16:	485a      	ldr	r0, [pc, #360]	; (21e80 <configure_pins+0x36c>)
   21d18:	f00a fa16 	bl	2c148 <printk>
   21d1c:	f240 212e 	movw	r1, #558	; 0x22e
   21d20:	4630      	mov	r0, r6
   21d22:	f00a fc16 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21d26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21d2a:	e0df      	b.n	21eec <configure_pins+0x3d8>
    switch (port)
   21d2c:	0973      	lsrs	r3, r6, #5
   21d2e:	d01f      	beq.n	21d70 <configure_pins+0x25c>
   21d30:	4293      	cmp	r3, r2
   21d32:	d120      	bne.n	21d76 <configure_pins+0x262>
            mask = P1_FEATURE_PINS_PRESENT;
   21d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21d38:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21d3c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21d3e:	f013 0f01 	tst.w	r3, #1
   21d42:	d01a      	beq.n	21d7a <configure_pins+0x266>
    *p_pin = pin_number & 0x1F;
   21d44:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21d48:	0976      	lsrs	r6, r6, #5
   21d4a:	d024      	beq.n	21d96 <configure_pins+0x282>
   21d4c:	2e01      	cmp	r6, #1
   21d4e:	d025      	beq.n	21d9c <configure_pins+0x288>
            NRFX_ASSERT(0);
   21d50:	4e49      	ldr	r6, [pc, #292]	; (21e78 <configure_pins+0x364>)
   21d52:	f240 232e 	movw	r3, #558	; 0x22e
   21d56:	4632      	mov	r2, r6
   21d58:	4948      	ldr	r1, [pc, #288]	; (21e7c <configure_pins+0x368>)
   21d5a:	4849      	ldr	r0, [pc, #292]	; (21e80 <configure_pins+0x36c>)
   21d5c:	f00a f9f4 	bl	2c148 <printk>
   21d60:	f240 212e 	movw	r1, #558	; 0x22e
   21d64:	4630      	mov	r0, r6
   21d66:	f00a fbf4 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21d6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21d6e:	e016      	b.n	21d9e <configure_pins+0x28a>
            mask = P0_FEATURE_PINS_PRESENT;
   21d70:	f04f 33ff 	mov.w	r3, #4294967295
   21d74:	e7e0      	b.n	21d38 <configure_pins+0x224>
    switch (port)
   21d76:	2300      	movs	r3, #0
   21d78:	e7de      	b.n	21d38 <configure_pins+0x224>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21d7a:	4f3f      	ldr	r7, [pc, #252]	; (21e78 <configure_pins+0x364>)
   21d7c:	f240 2329 	movw	r3, #553	; 0x229
   21d80:	463a      	mov	r2, r7
   21d82:	4940      	ldr	r1, [pc, #256]	; (21e84 <configure_pins+0x370>)
   21d84:	483e      	ldr	r0, [pc, #248]	; (21e80 <configure_pins+0x36c>)
   21d86:	f00a f9df 	bl	2c148 <printk>
   21d8a:	f240 2129 	movw	r1, #553	; 0x229
   21d8e:	4638      	mov	r0, r7
   21d90:	f00a fbdf 	bl	2c552 <assert_post_action>
   21d94:	e7d6      	b.n	21d44 <configure_pins+0x230>
        case 0: return NRF_P0;
   21d96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21d9a:	e000      	b.n	21d9e <configure_pins+0x28a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21d9c:	4a3a      	ldr	r2, [pc, #232]	; (21e88 <configure_pins+0x374>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21d9e:	2301      	movs	r3, #1
   21da0:	40bb      	lsls	r3, r7
    p_reg->OUTCLR = clr_mask;
   21da2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg_output(p_config->mosi_pin);
   21da6:	7866      	ldrb	r6, [r4, #1]
    switch (port)
   21da8:	0973      	lsrs	r3, r6, #5
   21daa:	d01f      	beq.n	21dec <configure_pins+0x2d8>
   21dac:	2b01      	cmp	r3, #1
   21dae:	d120      	bne.n	21df2 <configure_pins+0x2de>
            mask = P1_FEATURE_PINS_PRESENT;
   21db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21db4:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21db8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21dba:	f013 0f01 	tst.w	r3, #1
   21dbe:	d01a      	beq.n	21df6 <configure_pins+0x2e2>
    *p_pin = pin_number & 0x1F;
   21dc0:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21dc4:	0976      	lsrs	r6, r6, #5
   21dc6:	d024      	beq.n	21e12 <configure_pins+0x2fe>
   21dc8:	2e01      	cmp	r6, #1
   21dca:	d025      	beq.n	21e18 <configure_pins+0x304>
            NRFX_ASSERT(0);
   21dcc:	4e2a      	ldr	r6, [pc, #168]	; (21e78 <configure_pins+0x364>)
   21dce:	f240 232e 	movw	r3, #558	; 0x22e
   21dd2:	4632      	mov	r2, r6
   21dd4:	4929      	ldr	r1, [pc, #164]	; (21e7c <configure_pins+0x368>)
   21dd6:	482a      	ldr	r0, [pc, #168]	; (21e80 <configure_pins+0x36c>)
   21dd8:	f00a f9b6 	bl	2c148 <printk>
   21ddc:	f240 212e 	movw	r1, #558	; 0x22e
   21de0:	4630      	mov	r0, r6
   21de2:	f00a fbb6 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21dea:	e016      	b.n	21e1a <configure_pins+0x306>
            mask = P0_FEATURE_PINS_PRESENT;
   21dec:	f04f 33ff 	mov.w	r3, #4294967295
   21df0:	e7e0      	b.n	21db4 <configure_pins+0x2a0>
    switch (port)
   21df2:	2300      	movs	r3, #0
   21df4:	e7de      	b.n	21db4 <configure_pins+0x2a0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21df6:	4f20      	ldr	r7, [pc, #128]	; (21e78 <configure_pins+0x364>)
   21df8:	f240 2329 	movw	r3, #553	; 0x229
   21dfc:	463a      	mov	r2, r7
   21dfe:	4921      	ldr	r1, [pc, #132]	; (21e84 <configure_pins+0x370>)
   21e00:	481f      	ldr	r0, [pc, #124]	; (21e80 <configure_pins+0x36c>)
   21e02:	f00a f9a1 	bl	2c148 <printk>
   21e06:	f240 2129 	movw	r1, #553	; 0x229
   21e0a:	4638      	mov	r0, r7
   21e0c:	f00a fba1 	bl	2c552 <assert_post_action>
   21e10:	e7d6      	b.n	21dc0 <configure_pins+0x2ac>
        case 0: return NRF_P0;
   21e12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21e16:	e000      	b.n	21e1a <configure_pins+0x306>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21e18:	4b1b      	ldr	r3, [pc, #108]	; (21e88 <configure_pins+0x374>)
    reg->PIN_CNF[pin_number] = cnf;
   21e1a:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   21e1e:	2203      	movs	r2, #3
   21e20:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
}
   21e24:	e753      	b.n	21cce <configure_pins+0x1ba>
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   21e26:	f894 800e 	ldrb.w	r8, [r4, #14]
    switch (port)
   21e2a:	0973      	lsrs	r3, r6, #5
   21e2c:	d01f      	beq.n	21e6e <configure_pins+0x35a>
   21e2e:	2b01      	cmp	r3, #1
   21e30:	d120      	bne.n	21e74 <configure_pins+0x360>
            mask = P1_FEATURE_PINS_PRESENT;
   21e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21e36:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21e3a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21e3c:	f013 0f01 	tst.w	r3, #1
   21e40:	d024      	beq.n	21e8c <configure_pins+0x378>
    *p_pin = pin_number & 0x1F;
   21e42:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21e46:	0976      	lsrs	r6, r6, #5
   21e48:	d02e      	beq.n	21ea8 <configure_pins+0x394>
   21e4a:	2e01      	cmp	r6, #1
   21e4c:	d02f      	beq.n	21eae <configure_pins+0x39a>
            NRFX_ASSERT(0);
   21e4e:	4e0a      	ldr	r6, [pc, #40]	; (21e78 <configure_pins+0x364>)
   21e50:	f240 232e 	movw	r3, #558	; 0x22e
   21e54:	4632      	mov	r2, r6
   21e56:	4909      	ldr	r1, [pc, #36]	; (21e7c <configure_pins+0x368>)
   21e58:	4809      	ldr	r0, [pc, #36]	; (21e80 <configure_pins+0x36c>)
   21e5a:	f00a f975 	bl	2c148 <printk>
   21e5e:	f240 212e 	movw	r1, #558	; 0x22e
   21e62:	4630      	mov	r0, r6
   21e64:	f00a fb75 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21e68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21e6c:	e020      	b.n	21eb0 <configure_pins+0x39c>
            mask = P0_FEATURE_PINS_PRESENT;
   21e6e:	f04f 33ff 	mov.w	r3, #4294967295
   21e72:	e7e0      	b.n	21e36 <configure_pins+0x322>
    switch (port)
   21e74:	2300      	movs	r3, #0
   21e76:	e7de      	b.n	21e36 <configure_pins+0x322>
   21e78:	000321d8 	.word	0x000321d8
   21e7c:	000364dc 	.word	0x000364dc
   21e80:	00031df4 	.word	0x00031df4
   21e84:	0003220c 	.word	0x0003220c
   21e88:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21e8c:	4f3c      	ldr	r7, [pc, #240]	; (21f80 <configure_pins+0x46c>)
   21e8e:	f240 2329 	movw	r3, #553	; 0x229
   21e92:	463a      	mov	r2, r7
   21e94:	493b      	ldr	r1, [pc, #236]	; (21f84 <configure_pins+0x470>)
   21e96:	483c      	ldr	r0, [pc, #240]	; (21f88 <configure_pins+0x474>)
   21e98:	f00a f956 	bl	2c148 <printk>
   21e9c:	f240 2129 	movw	r1, #553	; 0x229
   21ea0:	4638      	mov	r0, r7
   21ea2:	f00a fb56 	bl	2c552 <assert_post_action>
   21ea6:	e7cc      	b.n	21e42 <configure_pins+0x32e>
        case 0: return NRF_P0;
   21ea8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21eac:	e000      	b.n	21eb0 <configure_pins+0x39c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21eae:	4a37      	ldr	r2, [pc, #220]	; (21f8c <configure_pins+0x478>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   21eb0:	ea4f 0388 	mov.w	r3, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   21eb4:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   21eb8:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
}
   21ebc:	e70b      	b.n	21cd6 <configure_pins+0x1c2>
            mask = P0_FEATURE_PINS_PRESENT;
   21ebe:	f04f 33ff 	mov.w	r3, #4294967295
   21ec2:	e714      	b.n	21cee <configure_pins+0x1da>
    switch (port)
   21ec4:	2300      	movs	r3, #0
   21ec6:	e712      	b.n	21cee <configure_pins+0x1da>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21ec8:	4f2d      	ldr	r7, [pc, #180]	; (21f80 <configure_pins+0x46c>)
   21eca:	f240 2329 	movw	r3, #553	; 0x229
   21ece:	463a      	mov	r2, r7
   21ed0:	492c      	ldr	r1, [pc, #176]	; (21f84 <configure_pins+0x470>)
   21ed2:	482d      	ldr	r0, [pc, #180]	; (21f88 <configure_pins+0x474>)
   21ed4:	f00a f938 	bl	2c148 <printk>
   21ed8:	f240 2129 	movw	r1, #553	; 0x229
   21edc:	4638      	mov	r0, r7
   21ede:	f00a fb38 	bl	2c552 <assert_post_action>
   21ee2:	e70b      	b.n	21cfc <configure_pins+0x1e8>
        case 0: return NRF_P0;
   21ee4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   21ee8:	e000      	b.n	21eec <configure_pins+0x3d8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21eea:	4a28      	ldr	r2, [pc, #160]	; (21f8c <configure_pins+0x478>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21eec:	2301      	movs	r3, #1
   21eee:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   21ef0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg_output(p_config->ss_pin);
   21ef4:	78e6      	ldrb	r6, [r4, #3]
    switch (port)
   21ef6:	0973      	lsrs	r3, r6, #5
   21ef8:	d01f      	beq.n	21f3a <configure_pins+0x426>
   21efa:	2b01      	cmp	r3, #1
   21efc:	d120      	bne.n	21f40 <configure_pins+0x42c>
            mask = P1_FEATURE_PINS_PRESENT;
   21efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   21f02:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21f06:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21f08:	f013 0f01 	tst.w	r3, #1
   21f0c:	d01a      	beq.n	21f44 <configure_pins+0x430>
    *p_pin = pin_number & 0x1F;
   21f0e:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21f12:	0976      	lsrs	r6, r6, #5
   21f14:	d024      	beq.n	21f60 <configure_pins+0x44c>
   21f16:	2e01      	cmp	r6, #1
   21f18:	d025      	beq.n	21f66 <configure_pins+0x452>
            NRFX_ASSERT(0);
   21f1a:	4e19      	ldr	r6, [pc, #100]	; (21f80 <configure_pins+0x46c>)
   21f1c:	f240 232e 	movw	r3, #558	; 0x22e
   21f20:	4632      	mov	r2, r6
   21f22:	491b      	ldr	r1, [pc, #108]	; (21f90 <configure_pins+0x47c>)
   21f24:	4818      	ldr	r0, [pc, #96]	; (21f88 <configure_pins+0x474>)
   21f26:	f00a f90f 	bl	2c148 <printk>
   21f2a:	f240 212e 	movw	r1, #558	; 0x22e
   21f2e:	4630      	mov	r0, r6
   21f30:	f00a fb0f 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   21f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21f38:	e016      	b.n	21f68 <configure_pins+0x454>
            mask = P0_FEATURE_PINS_PRESENT;
   21f3a:	f04f 33ff 	mov.w	r3, #4294967295
   21f3e:	e7e0      	b.n	21f02 <configure_pins+0x3ee>
    switch (port)
   21f40:	2300      	movs	r3, #0
   21f42:	e7de      	b.n	21f02 <configure_pins+0x3ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21f44:	4f0e      	ldr	r7, [pc, #56]	; (21f80 <configure_pins+0x46c>)
   21f46:	f240 2329 	movw	r3, #553	; 0x229
   21f4a:	463a      	mov	r2, r7
   21f4c:	490d      	ldr	r1, [pc, #52]	; (21f84 <configure_pins+0x470>)
   21f4e:	480e      	ldr	r0, [pc, #56]	; (21f88 <configure_pins+0x474>)
   21f50:	f00a f8fa 	bl	2c148 <printk>
   21f54:	f240 2129 	movw	r1, #553	; 0x229
   21f58:	4638      	mov	r0, r7
   21f5a:	f00a fafa 	bl	2c552 <assert_post_action>
   21f5e:	e7d6      	b.n	21f0e <configure_pins+0x3fa>
        case 0: return NRF_P0;
   21f60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21f64:	e000      	b.n	21f68 <configure_pins+0x454>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21f66:	4b09      	ldr	r3, [pc, #36]	; (21f8c <configure_pins+0x478>)
    reg->PIN_CNF[pin_number] = cnf;
   21f68:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   21f6c:	2203      	movs	r2, #3
   21f6e:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
}
   21f72:	e5d5      	b.n	21b20 <configure_pins+0xc>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21f74:	f04f 32ff 	mov.w	r2, #4294967295
   21f78:	e5d9      	b.n	21b2e <configure_pins+0x1a>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21f7a:	f04f 33ff 	mov.w	r3, #4294967295
   21f7e:	e5da      	b.n	21b36 <configure_pins+0x22>
   21f80:	000321d8 	.word	0x000321d8
   21f84:	0003220c 	.word	0x0003220c
   21f88:	00031df4 	.word	0x00031df4
   21f8c:	50000300 	.word	0x50000300
   21f90:	000364dc 	.word	0x000364dc

00021f94 <nrfx_spi_init>:
{
   21f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21f98:	4605      	mov	r5, r0
   21f9a:	4690      	mov	r8, r2
   21f9c:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
   21f9e:	460e      	mov	r6, r1
   21fa0:	b161      	cbz	r1, 21fbc <nrfx_spi_init+0x28>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   21fa2:	792c      	ldrb	r4, [r5, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   21fa4:	f8d5 9000 	ldr.w	r9, [r5]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21fa8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   21fac:	492c      	ldr	r1, [pc, #176]	; (22060 <nrfx_spi_init+0xcc>)
   21fae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   21fb2:	7f0b      	ldrb	r3, [r1, #28]
   21fb4:	b173      	cbz	r3, 21fd4 <nrfx_spi_init+0x40>
        return err_code;
   21fb6:	482b      	ldr	r0, [pc, #172]	; (22064 <nrfx_spi_init+0xd0>)
}
   21fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT(p_config);
   21fbc:	4c2a      	ldr	r4, [pc, #168]	; (22068 <nrfx_spi_init+0xd4>)
   21fbe:	237c      	movs	r3, #124	; 0x7c
   21fc0:	4622      	mov	r2, r4
   21fc2:	492a      	ldr	r1, [pc, #168]	; (2206c <nrfx_spi_init+0xd8>)
   21fc4:	482a      	ldr	r0, [pc, #168]	; (22070 <nrfx_spi_init+0xdc>)
   21fc6:	f00a f8bf 	bl	2c148 <printk>
   21fca:	217c      	movs	r1, #124	; 0x7c
   21fcc:	4620      	mov	r0, r4
   21fce:	f00a fac0 	bl	2c552 <assert_post_action>
   21fd2:	e7e6      	b.n	21fa2 <nrfx_spi_init+0xe>
    p_cb->handler = handler;
   21fd4:	4a22      	ldr	r2, [pc, #136]	; (22060 <nrfx_spi_init+0xcc>)
   21fd6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   21fda:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
   21fde:	f842 8031 	str.w	r8, [r2, r1, lsl #3]
    p_cb->p_context = p_context;
   21fe2:	605f      	str	r7, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   21fe4:	7bf2      	ldrb	r2, [r6, #15]
   21fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   21fea:	78f2      	ldrb	r2, [r6, #3]
   21fec:	779a      	strb	r2, [r3, #30]
    p_cb->orc = p_config->orc;
   21fee:	7972      	ldrb	r2, [r6, #5]
   21ff0:	77da      	strb	r2, [r3, #31]
    configure_pins(p_spi, p_config);
   21ff2:	4631      	mov	r1, r6
   21ff4:	4648      	mov	r0, r9
   21ff6:	f7ff fd8d 	bl	21b14 <configure_pins>
    nrf_spi_frequency_set(p_spi, p_config->frequency);
   21ffa:	68b3      	ldr	r3, [r6, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   21ffc:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   22000:	7b32      	ldrb	r2, [r6, #12]
   22002:	7b73      	ldrb	r3, [r6, #13]
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   22004:	3b00      	subs	r3, #0
   22006:	bf18      	it	ne
   22008:	2301      	movne	r3, #1
    switch (spi_mode)
   2200a:	2a02      	cmp	r2, #2
   2200c:	d021      	beq.n	22052 <nrfx_spi_init+0xbe>
   2200e:	2a03      	cmp	r2, #3
   22010:	d022      	beq.n	22058 <nrfx_spi_init+0xc4>
   22012:	2a01      	cmp	r2, #1
   22014:	d01a      	beq.n	2204c <nrfx_spi_init+0xb8>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   22016:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   2201a:	2301      	movs	r3, #1
   2201c:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500
    if (p_cb->handler)
   22020:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   22024:	4a0e      	ldr	r2, [pc, #56]	; (22060 <nrfx_spi_init+0xcc>)
   22026:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   2202a:	b123      	cbz	r3, 22036 <nrfx_spi_init+0xa2>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2202c:	6828      	ldr	r0, [r5, #0]
   2202e:	f340 3007 	sbfx	r0, r0, #12, #8
   22032:	f7f3 f867 	bl	15104 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   22036:	4b0a      	ldr	r3, [pc, #40]	; (22060 <nrfx_spi_init+0xcc>)
   22038:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   2203c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   22040:	2100      	movs	r1, #0
   22042:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22044:	2301      	movs	r3, #1
   22046:	7713      	strb	r3, [r2, #28]
    return err_code;
   22048:	480a      	ldr	r0, [pc, #40]	; (22074 <nrfx_spi_init+0xe0>)
   2204a:	e7b5      	b.n	21fb8 <nrfx_spi_init+0x24>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   2204c:	f043 0302 	orr.w	r3, r3, #2
        break;
   22050:	e7e1      	b.n	22016 <nrfx_spi_init+0x82>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   22052:	f043 0304 	orr.w	r3, r3, #4
        break;
   22056:	e7de      	b.n	22016 <nrfx_spi_init+0x82>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   22058:	f043 0306 	orr.w	r3, r3, #6
        break;
   2205c:	e7db      	b.n	22016 <nrfx_spi_init+0x82>
   2205e:	bf00      	nop
   22060:	20003564 	.word	0x20003564
   22064:	0bad0005 	.word	0x0bad0005
   22068:	00035844 	.word	0x00035844
   2206c:	00035890 	.word	0x00035890
   22070:	00031df4 	.word	0x00031df4
   22074:	0bad0000 	.word	0x0bad0000

00022078 <nrfx_spi_uninit>:
{
   22078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2207a:	4605      	mov	r5, r0
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2207c:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2207e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   22082:	4ba3      	ldr	r3, [pc, #652]	; (22310 <nrfx_spi_uninit+0x298>)
   22084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   22088:	7f1b      	ldrb	r3, [r3, #28]
   2208a:	b303      	cbz	r3, 220ce <nrfx_spi_uninit+0x56>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   2208c:	682d      	ldr	r5, [r5, #0]
    if (p_cb->handler)
   2208e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   22092:	4a9f      	ldr	r2, [pc, #636]	; (22310 <nrfx_spi_uninit+0x298>)
   22094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   22098:	b133      	cbz	r3, 220a8 <nrfx_spi_uninit+0x30>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   2209a:	f345 3007 	sbfx	r0, r5, #12, #8
   2209e:	f7f3 f841 	bl	15124 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   220a2:	2304      	movs	r3, #4
   220a4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   220a8:	2300      	movs	r3, #0
   220aa:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   220ae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   220b2:	4a97      	ldr	r2, [pc, #604]	; (22310 <nrfx_spi_uninit+0x298>)
   220b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   220b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   220bc:	b19b      	cbz	r3, 220e6 <nrfx_spi_uninit+0x6e>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   220be:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   220c2:	4b93      	ldr	r3, [pc, #588]	; (22310 <nrfx_spi_uninit+0x298>)
   220c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   220c8:	2300      	movs	r3, #0
   220ca:	7723      	strb	r3, [r4, #28]
}
   220cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   220ce:	4e91      	ldr	r6, [pc, #580]	; (22314 <nrfx_spi_uninit+0x29c>)
   220d0:	23c1      	movs	r3, #193	; 0xc1
   220d2:	4632      	mov	r2, r6
   220d4:	4990      	ldr	r1, [pc, #576]	; (22318 <nrfx_spi_uninit+0x2a0>)
   220d6:	4891      	ldr	r0, [pc, #580]	; (2231c <nrfx_spi_uninit+0x2a4>)
   220d8:	f00a f836 	bl	2c148 <printk>
   220dc:	21c1      	movs	r1, #193	; 0xc1
   220de:	4630      	mov	r0, r6
   220e0:	f00a fa37 	bl	2c552 <assert_post_action>
   220e4:	e7d2      	b.n	2208c <nrfx_spi_uninit+0x14>
    return p_reg->PSEL.SCK;
   220e6:	f8d5 6508 	ldr.w	r6, [r5, #1288]	; 0x508
    switch (port)
   220ea:	0973      	lsrs	r3, r6, #5
   220ec:	d01f      	beq.n	2212e <nrfx_spi_uninit+0xb6>
   220ee:	2b01      	cmp	r3, #1
   220f0:	d120      	bne.n	22134 <nrfx_spi_uninit+0xbc>
            mask = P1_FEATURE_PINS_PRESENT;
   220f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   220f6:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   220fa:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   220fc:	f013 0f01 	tst.w	r3, #1
   22100:	d01a      	beq.n	22138 <nrfx_spi_uninit+0xc0>
    *p_pin = pin_number & 0x1F;
   22102:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22106:	0976      	lsrs	r6, r6, #5
   22108:	d024      	beq.n	22154 <nrfx_spi_uninit+0xdc>
   2210a:	2e01      	cmp	r6, #1
   2210c:	d025      	beq.n	2215a <nrfx_spi_uninit+0xe2>
            NRFX_ASSERT(0);
   2210e:	4e84      	ldr	r6, [pc, #528]	; (22320 <nrfx_spi_uninit+0x2a8>)
   22110:	f240 232e 	movw	r3, #558	; 0x22e
   22114:	4632      	mov	r2, r6
   22116:	4983      	ldr	r1, [pc, #524]	; (22324 <nrfx_spi_uninit+0x2ac>)
   22118:	4880      	ldr	r0, [pc, #512]	; (2231c <nrfx_spi_uninit+0x2a4>)
   2211a:	f00a f815 	bl	2c148 <printk>
   2211e:	f240 212e 	movw	r1, #558	; 0x22e
   22122:	4630      	mov	r0, r6
   22124:	f00a fa15 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2212c:	e016      	b.n	2215c <nrfx_spi_uninit+0xe4>
            mask = P0_FEATURE_PINS_PRESENT;
   2212e:	f04f 33ff 	mov.w	r3, #4294967295
   22132:	e7e0      	b.n	220f6 <nrfx_spi_uninit+0x7e>
    switch (port)
   22134:	2300      	movs	r3, #0
   22136:	e7de      	b.n	220f6 <nrfx_spi_uninit+0x7e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22138:	4f79      	ldr	r7, [pc, #484]	; (22320 <nrfx_spi_uninit+0x2a8>)
   2213a:	f240 2329 	movw	r3, #553	; 0x229
   2213e:	463a      	mov	r2, r7
   22140:	4979      	ldr	r1, [pc, #484]	; (22328 <nrfx_spi_uninit+0x2b0>)
   22142:	4876      	ldr	r0, [pc, #472]	; (2231c <nrfx_spi_uninit+0x2a4>)
   22144:	f00a f800 	bl	2c148 <printk>
   22148:	f240 2129 	movw	r1, #553	; 0x229
   2214c:	4638      	mov	r0, r7
   2214e:	f00a fa00 	bl	2c552 <assert_post_action>
   22152:	e7d6      	b.n	22102 <nrfx_spi_uninit+0x8a>
        case 0: return NRF_P0;
   22154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22158:	e000      	b.n	2215c <nrfx_spi_uninit+0xe4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2215a:	4b74      	ldr	r3, [pc, #464]	; (2232c <nrfx_spi_uninit+0x2b4>)
    reg->PIN_CNF[pin_number] = cnf;
   2215c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   22160:	2202      	movs	r2, #2
   22162:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
    return p_reg->PSEL.MISO;
   22166:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   2216a:	f1b6 3fff 	cmp.w	r6, #4294967295
   2216e:	d133      	bne.n	221d8 <nrfx_spi_uninit+0x160>
    return p_reg->PSEL.MOSI;
   22170:	f8d5 550c 	ldr.w	r5, [r5, #1292]	; 0x50c
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   22174:	f1b5 3fff 	cmp.w	r5, #4294967295
   22178:	d16d      	bne.n	22256 <nrfx_spi_uninit+0x1de>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2217a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2217e:	4a64      	ldr	r2, [pc, #400]	; (22310 <nrfx_spi_uninit+0x298>)
   22180:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   22184:	7f9d      	ldrb	r5, [r3, #30]
   22186:	2dff      	cmp	r5, #255	; 0xff
   22188:	d099      	beq.n	220be <nrfx_spi_uninit+0x46>
    switch (port)
   2218a:	096b      	lsrs	r3, r5, #5
   2218c:	f000 80a2 	beq.w	222d4 <nrfx_spi_uninit+0x25c>
   22190:	2b01      	cmp	r3, #1
   22192:	f040 80a2 	bne.w	222da <nrfx_spi_uninit+0x262>
            mask = P1_FEATURE_PINS_PRESENT;
   22196:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2219a:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2219e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   221a0:	f013 0f01 	tst.w	r3, #1
   221a4:	f000 809b 	beq.w	222de <nrfx_spi_uninit+0x266>
    *p_pin = pin_number & 0x1F;
   221a8:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   221ac:	096d      	lsrs	r5, r5, #5
   221ae:	f000 80a4 	beq.w	222fa <nrfx_spi_uninit+0x282>
   221b2:	2d01      	cmp	r5, #1
   221b4:	f000 80a4 	beq.w	22300 <nrfx_spi_uninit+0x288>
            NRFX_ASSERT(0);
   221b8:	4d59      	ldr	r5, [pc, #356]	; (22320 <nrfx_spi_uninit+0x2a8>)
   221ba:	f240 232e 	movw	r3, #558	; 0x22e
   221be:	462a      	mov	r2, r5
   221c0:	4958      	ldr	r1, [pc, #352]	; (22324 <nrfx_spi_uninit+0x2ac>)
   221c2:	4856      	ldr	r0, [pc, #344]	; (2231c <nrfx_spi_uninit+0x2a4>)
   221c4:	f009 ffc0 	bl	2c148 <printk>
   221c8:	f240 212e 	movw	r1, #558	; 0x22e
   221cc:	4628      	mov	r0, r5
   221ce:	f00a f9c0 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   221d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   221d6:	e094      	b.n	22302 <nrfx_spi_uninit+0x28a>
    switch (port)
   221d8:	0973      	lsrs	r3, r6, #5
   221da:	d01f      	beq.n	2221c <nrfx_spi_uninit+0x1a4>
   221dc:	2b01      	cmp	r3, #1
   221de:	d120      	bne.n	22222 <nrfx_spi_uninit+0x1aa>
            mask = P1_FEATURE_PINS_PRESENT;
   221e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   221e4:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   221e8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   221ea:	f013 0f01 	tst.w	r3, #1
   221ee:	d01a      	beq.n	22226 <nrfx_spi_uninit+0x1ae>
    *p_pin = pin_number & 0x1F;
   221f0:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   221f4:	0976      	lsrs	r6, r6, #5
   221f6:	d024      	beq.n	22242 <nrfx_spi_uninit+0x1ca>
   221f8:	2e01      	cmp	r6, #1
   221fa:	d025      	beq.n	22248 <nrfx_spi_uninit+0x1d0>
            NRFX_ASSERT(0);
   221fc:	4e48      	ldr	r6, [pc, #288]	; (22320 <nrfx_spi_uninit+0x2a8>)
   221fe:	f240 232e 	movw	r3, #558	; 0x22e
   22202:	4632      	mov	r2, r6
   22204:	4947      	ldr	r1, [pc, #284]	; (22324 <nrfx_spi_uninit+0x2ac>)
   22206:	4845      	ldr	r0, [pc, #276]	; (2231c <nrfx_spi_uninit+0x2a4>)
   22208:	f009 ff9e 	bl	2c148 <printk>
   2220c:	f240 212e 	movw	r1, #558	; 0x22e
   22210:	4630      	mov	r0, r6
   22212:	f00a f99e 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22216:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2221a:	e016      	b.n	2224a <nrfx_spi_uninit+0x1d2>
            mask = P0_FEATURE_PINS_PRESENT;
   2221c:	f04f 33ff 	mov.w	r3, #4294967295
   22220:	e7e0      	b.n	221e4 <nrfx_spi_uninit+0x16c>
    switch (port)
   22222:	2300      	movs	r3, #0
   22224:	e7de      	b.n	221e4 <nrfx_spi_uninit+0x16c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22226:	4f3e      	ldr	r7, [pc, #248]	; (22320 <nrfx_spi_uninit+0x2a8>)
   22228:	f240 2329 	movw	r3, #553	; 0x229
   2222c:	463a      	mov	r2, r7
   2222e:	493e      	ldr	r1, [pc, #248]	; (22328 <nrfx_spi_uninit+0x2b0>)
   22230:	483a      	ldr	r0, [pc, #232]	; (2231c <nrfx_spi_uninit+0x2a4>)
   22232:	f009 ff89 	bl	2c148 <printk>
   22236:	f240 2129 	movw	r1, #553	; 0x229
   2223a:	4638      	mov	r0, r7
   2223c:	f00a f989 	bl	2c552 <assert_post_action>
   22240:	e7d6      	b.n	221f0 <nrfx_spi_uninit+0x178>
        case 0: return NRF_P0;
   22242:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22246:	e000      	b.n	2224a <nrfx_spi_uninit+0x1d2>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22248:	4b38      	ldr	r3, [pc, #224]	; (2232c <nrfx_spi_uninit+0x2b4>)
    reg->PIN_CNF[pin_number] = cnf;
   2224a:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   2224e:	2202      	movs	r2, #2
   22250:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
}
   22254:	e78c      	b.n	22170 <nrfx_spi_uninit+0xf8>
    switch (port)
   22256:	096b      	lsrs	r3, r5, #5
   22258:	d01f      	beq.n	2229a <nrfx_spi_uninit+0x222>
   2225a:	2b01      	cmp	r3, #1
   2225c:	d120      	bne.n	222a0 <nrfx_spi_uninit+0x228>
            mask = P1_FEATURE_PINS_PRESENT;
   2225e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   22262:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22266:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22268:	f013 0f01 	tst.w	r3, #1
   2226c:	d01a      	beq.n	222a4 <nrfx_spi_uninit+0x22c>
    *p_pin = pin_number & 0x1F;
   2226e:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22272:	096d      	lsrs	r5, r5, #5
   22274:	d024      	beq.n	222c0 <nrfx_spi_uninit+0x248>
   22276:	2d01      	cmp	r5, #1
   22278:	d025      	beq.n	222c6 <nrfx_spi_uninit+0x24e>
            NRFX_ASSERT(0);
   2227a:	4d29      	ldr	r5, [pc, #164]	; (22320 <nrfx_spi_uninit+0x2a8>)
   2227c:	f240 232e 	movw	r3, #558	; 0x22e
   22280:	462a      	mov	r2, r5
   22282:	4928      	ldr	r1, [pc, #160]	; (22324 <nrfx_spi_uninit+0x2ac>)
   22284:	4825      	ldr	r0, [pc, #148]	; (2231c <nrfx_spi_uninit+0x2a4>)
   22286:	f009 ff5f 	bl	2c148 <printk>
   2228a:	f240 212e 	movw	r1, #558	; 0x22e
   2228e:	4628      	mov	r0, r5
   22290:	f00a f95f 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22294:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22298:	e016      	b.n	222c8 <nrfx_spi_uninit+0x250>
            mask = P0_FEATURE_PINS_PRESENT;
   2229a:	f04f 33ff 	mov.w	r3, #4294967295
   2229e:	e7e0      	b.n	22262 <nrfx_spi_uninit+0x1ea>
    switch (port)
   222a0:	2300      	movs	r3, #0
   222a2:	e7de      	b.n	22262 <nrfx_spi_uninit+0x1ea>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   222a4:	4e1e      	ldr	r6, [pc, #120]	; (22320 <nrfx_spi_uninit+0x2a8>)
   222a6:	f240 2329 	movw	r3, #553	; 0x229
   222aa:	4632      	mov	r2, r6
   222ac:	491e      	ldr	r1, [pc, #120]	; (22328 <nrfx_spi_uninit+0x2b0>)
   222ae:	481b      	ldr	r0, [pc, #108]	; (2231c <nrfx_spi_uninit+0x2a4>)
   222b0:	f009 ff4a 	bl	2c148 <printk>
   222b4:	f240 2129 	movw	r1, #553	; 0x229
   222b8:	4630      	mov	r0, r6
   222ba:	f00a f94a 	bl	2c552 <assert_post_action>
   222be:	e7d6      	b.n	2226e <nrfx_spi_uninit+0x1f6>
        case 0: return NRF_P0;
   222c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   222c4:	e000      	b.n	222c8 <nrfx_spi_uninit+0x250>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   222c6:	4b19      	ldr	r3, [pc, #100]	; (2232c <nrfx_spi_uninit+0x2b4>)
    reg->PIN_CNF[pin_number] = cnf;
   222c8:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   222cc:	2202      	movs	r2, #2
   222ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   222d2:	e752      	b.n	2217a <nrfx_spi_uninit+0x102>
            mask = P0_FEATURE_PINS_PRESENT;
   222d4:	f04f 33ff 	mov.w	r3, #4294967295
   222d8:	e75f      	b.n	2219a <nrfx_spi_uninit+0x122>
    switch (port)
   222da:	2300      	movs	r3, #0
   222dc:	e75d      	b.n	2219a <nrfx_spi_uninit+0x122>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   222de:	4e10      	ldr	r6, [pc, #64]	; (22320 <nrfx_spi_uninit+0x2a8>)
   222e0:	f240 2329 	movw	r3, #553	; 0x229
   222e4:	4632      	mov	r2, r6
   222e6:	4910      	ldr	r1, [pc, #64]	; (22328 <nrfx_spi_uninit+0x2b0>)
   222e8:	480c      	ldr	r0, [pc, #48]	; (2231c <nrfx_spi_uninit+0x2a4>)
   222ea:	f009 ff2d 	bl	2c148 <printk>
   222ee:	f240 2129 	movw	r1, #553	; 0x229
   222f2:	4630      	mov	r0, r6
   222f4:	f00a f92d 	bl	2c552 <assert_post_action>
   222f8:	e756      	b.n	221a8 <nrfx_spi_uninit+0x130>
        case 0: return NRF_P0;
   222fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   222fe:	e000      	b.n	22302 <nrfx_spi_uninit+0x28a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22300:	4b0a      	ldr	r3, [pc, #40]	; (2232c <nrfx_spi_uninit+0x2b4>)
    reg->PIN_CNF[pin_number] = cnf;
   22302:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   22306:	2202      	movs	r2, #2
   22308:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   2230c:	e6d7      	b.n	220be <nrfx_spi_uninit+0x46>
   2230e:	bf00      	nop
   22310:	20003564 	.word	0x20003564
   22314:	00035844 	.word	0x00035844
   22318:	0003589c 	.word	0x0003589c
   2231c:	00031df4 	.word	0x00031df4
   22320:	000321d8 	.word	0x000321d8
   22324:	000364dc 	.word	0x000364dc
   22328:	0003220c 	.word	0x0003220c
   2232c:	50000300 	.word	0x50000300

00022330 <nrfx_spi_xfer>:
{
   22330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22334:	4606      	mov	r6, r0
   22336:	460d      	mov	r5, r1
   22338:	4690      	mov	r8, r2
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2233a:	7904      	ldrb	r4, [r0, #4]
   2233c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   22340:	4f60      	ldr	r7, [pc, #384]	; (224c4 <nrfx_spi_xfer+0x194>)
   22342:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   22346:	7f3b      	ldrb	r3, [r7, #28]
   22348:	2b00      	cmp	r3, #0
   2234a:	d03a      	beq.n	223c2 <nrfx_spi_xfer+0x92>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   2234c:	682b      	ldr	r3, [r5, #0]
   2234e:	2b00      	cmp	r3, #0
   22350:	d046      	beq.n	223e0 <nrfx_spi_xfer+0xb0>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   22352:	68ab      	ldr	r3, [r5, #8]
   22354:	2b00      	cmp	r3, #0
   22356:	d055      	beq.n	22404 <nrfx_spi_xfer+0xd4>
    if (p_cb->transfer_in_progress)
   22358:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2235c:	4959      	ldr	r1, [pc, #356]	; (224c4 <nrfx_spi_xfer+0x194>)
   2235e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   22362:	7f5b      	ldrb	r3, [r3, #29]
   22364:	2b00      	cmp	r3, #0
   22366:	f040 80aa 	bne.w	224be <nrfx_spi_xfer+0x18e>
        if (p_cb->handler)
   2236a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2236e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   22372:	b12b      	cbz	r3, 22380 <nrfx_spi_xfer+0x50>
            p_cb->transfer_in_progress = true;
   22374:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   22378:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   2237c:	2201      	movs	r2, #1
   2237e:	775a      	strb	r2, [r3, #29]
    p_cb->evt.xfer_desc = *p_xfer_desc;
   22380:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
   22384:	4b4f      	ldr	r3, [pc, #316]	; (224c4 <nrfx_spi_xfer+0x194>)
   22386:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
   2238a:	f10c 0e0c 	add.w	lr, ip, #12
   2238e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   22392:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    p_cb->abort = false;
   22396:	2300      	movs	r3, #0
   22398:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2239c:	f89c 901e 	ldrb.w	r9, [ip, #30]
   223a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   223a4:	d140      	bne.n	22428 <nrfx_spi_xfer+0xf8>
    if (flags)
   223a6:	f1b8 0f00 	cmp.w	r8, #0
   223aa:	f000 8081 	beq.w	224b0 <nrfx_spi_xfer+0x180>
        p_cb->transfer_in_progress = false;
   223ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   223b2:	4b44      	ldr	r3, [pc, #272]	; (224c4 <nrfx_spi_xfer+0x194>)
   223b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   223b8:	2300      	movs	r3, #0
   223ba:	7763      	strb	r3, [r4, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   223bc:	4842      	ldr	r0, [pc, #264]	; (224c8 <nrfx_spi_xfer+0x198>)
}
   223be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   223c2:	f8df 912c 	ldr.w	r9, [pc, #300]	; 224f0 <nrfx_spi_xfer+0x1c0>
   223c6:	f44f 73b3 	mov.w	r3, #358	; 0x166
   223ca:	464a      	mov	r2, r9
   223cc:	493f      	ldr	r1, [pc, #252]	; (224cc <nrfx_spi_xfer+0x19c>)
   223ce:	4840      	ldr	r0, [pc, #256]	; (224d0 <nrfx_spi_xfer+0x1a0>)
   223d0:	f009 feba 	bl	2c148 <printk>
   223d4:	f44f 71b3 	mov.w	r1, #358	; 0x166
   223d8:	4648      	mov	r0, r9
   223da:	f00a f8ba 	bl	2c552 <assert_post_action>
   223de:	e7b5      	b.n	2234c <nrfx_spi_xfer+0x1c>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   223e0:	686b      	ldr	r3, [r5, #4]
   223e2:	2b00      	cmp	r3, #0
   223e4:	d0b5      	beq.n	22352 <nrfx_spi_xfer+0x22>
   223e6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 224f0 <nrfx_spi_xfer+0x1c0>
   223ea:	f240 1367 	movw	r3, #359	; 0x167
   223ee:	464a      	mov	r2, r9
   223f0:	4938      	ldr	r1, [pc, #224]	; (224d4 <nrfx_spi_xfer+0x1a4>)
   223f2:	4837      	ldr	r0, [pc, #220]	; (224d0 <nrfx_spi_xfer+0x1a0>)
   223f4:	f009 fea8 	bl	2c148 <printk>
   223f8:	f240 1167 	movw	r1, #359	; 0x167
   223fc:	4648      	mov	r0, r9
   223fe:	f00a f8a8 	bl	2c552 <assert_post_action>
   22402:	e7a6      	b.n	22352 <nrfx_spi_xfer+0x22>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   22404:	68eb      	ldr	r3, [r5, #12]
   22406:	2b00      	cmp	r3, #0
   22408:	d0a6      	beq.n	22358 <nrfx_spi_xfer+0x28>
   2240a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 224f0 <nrfx_spi_xfer+0x1c0>
   2240e:	f44f 73b4 	mov.w	r3, #360	; 0x168
   22412:	464a      	mov	r2, r9
   22414:	4930      	ldr	r1, [pc, #192]	; (224d8 <nrfx_spi_xfer+0x1a8>)
   22416:	482e      	ldr	r0, [pc, #184]	; (224d0 <nrfx_spi_xfer+0x1a0>)
   22418:	f009 fe96 	bl	2c148 <printk>
   2241c:	f44f 71b4 	mov.w	r1, #360	; 0x168
   22420:	4648      	mov	r0, r9
   22422:	f00a f896 	bl	2c552 <assert_post_action>
   22426:	e797      	b.n	22358 <nrfx_spi_xfer+0x28>
    switch (port)
   22428:	ea5f 1359 	movs.w	r3, r9, lsr #5
   2242c:	d022      	beq.n	22474 <nrfx_spi_xfer+0x144>
   2242e:	2b01      	cmp	r3, #1
   22430:	d123      	bne.n	2247a <nrfx_spi_xfer+0x14a>
            mask = P1_FEATURE_PINS_PRESENT;
   22432:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   22436:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2243a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2243c:	f013 0f01 	tst.w	r3, #1
   22440:	d01d      	beq.n	2247e <nrfx_spi_xfer+0x14e>
    *p_pin = pin_number & 0x1F;
   22442:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22446:	ea5f 1959 	movs.w	r9, r9, lsr #5
   2244a:	d027      	beq.n	2249c <nrfx_spi_xfer+0x16c>
   2244c:	f1b9 0f01 	cmp.w	r9, #1
   22450:	d027      	beq.n	224a2 <nrfx_spi_xfer+0x172>
            NRFX_ASSERT(0);
   22452:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 224f4 <nrfx_spi_xfer+0x1c4>
   22456:	f240 232e 	movw	r3, #558	; 0x22e
   2245a:	464a      	mov	r2, r9
   2245c:	491f      	ldr	r1, [pc, #124]	; (224dc <nrfx_spi_xfer+0x1ac>)
   2245e:	481c      	ldr	r0, [pc, #112]	; (224d0 <nrfx_spi_xfer+0x1a0>)
   22460:	f009 fe72 	bl	2c148 <printk>
   22464:	f240 212e 	movw	r1, #558	; 0x22e
   22468:	4648      	mov	r0, r9
   2246a:	f00a f872 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   2246e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22472:	e017      	b.n	224a4 <nrfx_spi_xfer+0x174>
            mask = P0_FEATURE_PINS_PRESENT;
   22474:	f04f 33ff 	mov.w	r3, #4294967295
   22478:	e7dd      	b.n	22436 <nrfx_spi_xfer+0x106>
    switch (port)
   2247a:	2300      	movs	r3, #0
   2247c:	e7db      	b.n	22436 <nrfx_spi_xfer+0x106>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2247e:	f8df a074 	ldr.w	sl, [pc, #116]	; 224f4 <nrfx_spi_xfer+0x1c4>
   22482:	f240 2329 	movw	r3, #553	; 0x229
   22486:	4652      	mov	r2, sl
   22488:	4915      	ldr	r1, [pc, #84]	; (224e0 <nrfx_spi_xfer+0x1b0>)
   2248a:	4811      	ldr	r0, [pc, #68]	; (224d0 <nrfx_spi_xfer+0x1a0>)
   2248c:	f009 fe5c 	bl	2c148 <printk>
   22490:	f240 2129 	movw	r1, #553	; 0x229
   22494:	4650      	mov	r0, sl
   22496:	f00a f85c 	bl	2c552 <assert_post_action>
   2249a:	e7d2      	b.n	22442 <nrfx_spi_xfer+0x112>
        case 0: return NRF_P0;
   2249c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   224a0:	e000      	b.n	224a4 <nrfx_spi_xfer+0x174>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   224a2:	4a10      	ldr	r2, [pc, #64]	; (224e4 <nrfx_spi_xfer+0x1b4>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   224a4:	2301      	movs	r3, #1
   224a6:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
   224aa:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
   224ae:	e77a      	b.n	223a6 <nrfx_spi_xfer+0x76>
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   224b0:	462a      	mov	r2, r5
   224b2:	4639      	mov	r1, r7
   224b4:	6830      	ldr	r0, [r6, #0]
   224b6:	f7ff faab 	bl	21a10 <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
   224ba:	480b      	ldr	r0, [pc, #44]	; (224e8 <nrfx_spi_xfer+0x1b8>)
   224bc:	e77f      	b.n	223be <nrfx_spi_xfer+0x8e>
        return err_code;
   224be:	480b      	ldr	r0, [pc, #44]	; (224ec <nrfx_spi_xfer+0x1bc>)
   224c0:	e77d      	b.n	223be <nrfx_spi_xfer+0x8e>
   224c2:	bf00      	nop
   224c4:	20003564 	.word	0x20003564
   224c8:	0bad0003 	.word	0x0bad0003
   224cc:	0003589c 	.word	0x0003589c
   224d0:	00031df4 	.word	0x00031df4
   224d4:	000358c8 	.word	0x000358c8
   224d8:	00035910 	.word	0x00035910
   224dc:	000364dc 	.word	0x000364dc
   224e0:	0003220c 	.word	0x0003220c
   224e4:	50000300 	.word	0x50000300
   224e8:	0bad0000 	.word	0x0bad0000
   224ec:	0bad000b 	.word	0x0bad000b
   224f0:	00035844 	.word	0x00035844
   224f4:	000321d8 	.word	0x000321d8

000224f8 <nrfx_spi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   224f8:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
   224fa:	4903      	ldr	r1, [pc, #12]	; (22508 <nrfx_spi_1_irq_handler+0x10>)
   224fc:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   22500:	f7ff fa5e 	bl	219c0 <irq_handler>
}
   22504:	bd08      	pop	{r3, pc}
   22506:	bf00      	nop
   22508:	20003564 	.word	0x20003564

0002250c <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2250c:	f1b0 3fff 	cmp.w	r0, #4294967295
   22510:	d040      	beq.n	22594 <spim_pin_uninit+0x88>
{
   22512:	b538      	push	{r3, r4, r5, lr}
   22514:	4604      	mov	r4, r0
    switch (port)
   22516:	0943      	lsrs	r3, r0, #5
   22518:	d01f      	beq.n	2255a <spim_pin_uninit+0x4e>
   2251a:	2b01      	cmp	r3, #1
   2251c:	d120      	bne.n	22560 <spim_pin_uninit+0x54>
            mask = P1_FEATURE_PINS_PRESENT;
   2251e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   22522:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22526:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22528:	f013 0f01 	tst.w	r3, #1
   2252c:	d01a      	beq.n	22564 <spim_pin_uninit+0x58>
    *p_pin = pin_number & 0x1F;
   2252e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22532:	0964      	lsrs	r4, r4, #5
   22534:	d024      	beq.n	22580 <spim_pin_uninit+0x74>
   22536:	2c01      	cmp	r4, #1
   22538:	d025      	beq.n	22586 <spim_pin_uninit+0x7a>
            NRFX_ASSERT(0);
   2253a:	4c17      	ldr	r4, [pc, #92]	; (22598 <spim_pin_uninit+0x8c>)
   2253c:	f240 232e 	movw	r3, #558	; 0x22e
   22540:	4622      	mov	r2, r4
   22542:	4916      	ldr	r1, [pc, #88]	; (2259c <spim_pin_uninit+0x90>)
   22544:	4816      	ldr	r0, [pc, #88]	; (225a0 <spim_pin_uninit+0x94>)
   22546:	f009 fdff 	bl	2c148 <printk>
   2254a:	f240 212e 	movw	r1, #558	; 0x22e
   2254e:	4620      	mov	r0, r4
   22550:	f009 ffff 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22554:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22558:	e016      	b.n	22588 <spim_pin_uninit+0x7c>
            mask = P0_FEATURE_PINS_PRESENT;
   2255a:	f04f 33ff 	mov.w	r3, #4294967295
   2255e:	e7e0      	b.n	22522 <spim_pin_uninit+0x16>
    switch (port)
   22560:	2300      	movs	r3, #0
   22562:	e7de      	b.n	22522 <spim_pin_uninit+0x16>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22564:	4d0c      	ldr	r5, [pc, #48]	; (22598 <spim_pin_uninit+0x8c>)
   22566:	f240 2329 	movw	r3, #553	; 0x229
   2256a:	462a      	mov	r2, r5
   2256c:	490d      	ldr	r1, [pc, #52]	; (225a4 <spim_pin_uninit+0x98>)
   2256e:	480c      	ldr	r0, [pc, #48]	; (225a0 <spim_pin_uninit+0x94>)
   22570:	f009 fdea 	bl	2c148 <printk>
   22574:	f240 2129 	movw	r1, #553	; 0x229
   22578:	4628      	mov	r0, r5
   2257a:	f009 ffea 	bl	2c552 <assert_post_action>
   2257e:	e7d6      	b.n	2252e <spim_pin_uninit+0x22>
        case 0: return NRF_P0;
   22580:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22584:	e000      	b.n	22588 <spim_pin_uninit+0x7c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22586:	4b08      	ldr	r3, [pc, #32]	; (225a8 <spim_pin_uninit+0x9c>)
    reg->PIN_CNF[pin_number] = cnf;
   22588:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   2258c:	2202      	movs	r2, #2
   2258e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   22592:	bd38      	pop	{r3, r4, r5, pc}
   22594:	4770      	bx	lr
   22596:	bf00      	nop
   22598:	000321d8 	.word	0x000321d8
   2259c:	000364dc 	.word	0x000364dc
   225a0:	00031df4 	.word	0x00031df4
   225a4:	0003220c 	.word	0x0003220c
   225a8:	50000300 	.word	0x50000300

000225ac <set_ss_pin_state>:
    return nrfx_spim_xfer(p_instance, p_xfer_desc, 0);
}
#endif

static void set_ss_pin_state(spim_control_block_t * p_cb, bool active)
{
   225ac:	b538      	push	{r3, r4, r5, lr}
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    if (p_cb->use_hw_ss)
   225ae:	7f83      	ldrb	r3, [r0, #30]
   225b0:	f013 0f04 	tst.w	r3, #4
   225b4:	d144      	bne.n	22640 <set_ss_pin_state+0x94>
    {
        return;
    }
#endif

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   225b6:	7fc4      	ldrb	r4, [r0, #31]
   225b8:	2cff      	cmp	r4, #255	; 0xff
   225ba:	d041      	beq.n	22640 <set_ss_pin_state+0x94>
    {
        nrf_gpio_pin_write(p_cb->ss_pin,
   225bc:	f013 0f02 	tst.w	r3, #2
   225c0:	d101      	bne.n	225c6 <set_ss_pin_state+0x1a>
                           p_cb->ss_active_high ? active : !active);
   225c2:	f081 0101 	eor.w	r1, r1, #1
    if (value == 0)
   225c6:	2900      	cmp	r1, #0
   225c8:	d13b      	bne.n	22642 <set_ss_pin_state+0x96>
    switch (port)
   225ca:	0963      	lsrs	r3, r4, #5
   225cc:	d01f      	beq.n	2260e <set_ss_pin_state+0x62>
   225ce:	2b01      	cmp	r3, #1
   225d0:	d101      	bne.n	225d6 <set_ss_pin_state+0x2a>
            mask = P1_FEATURE_PINS_PRESENT;
   225d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
   225d6:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   225da:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   225dc:	f011 0f01 	tst.w	r1, #1
   225e0:	d018      	beq.n	22614 <set_ss_pin_state+0x68>
    *p_pin = pin_number & 0x1F;
   225e2:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   225e6:	0964      	lsrs	r4, r4, #5
   225e8:	d022      	beq.n	22630 <set_ss_pin_state+0x84>
   225ea:	2c01      	cmp	r4, #1
   225ec:	d023      	beq.n	22636 <set_ss_pin_state+0x8a>
            NRFX_ASSERT(0);
   225ee:	4c34      	ldr	r4, [pc, #208]	; (226c0 <set_ss_pin_state+0x114>)
   225f0:	f240 232e 	movw	r3, #558	; 0x22e
   225f4:	4622      	mov	r2, r4
   225f6:	4933      	ldr	r1, [pc, #204]	; (226c4 <set_ss_pin_state+0x118>)
   225f8:	4833      	ldr	r0, [pc, #204]	; (226c8 <set_ss_pin_state+0x11c>)
   225fa:	f009 fda5 	bl	2c148 <printk>
   225fe:	f240 212e 	movw	r1, #558	; 0x22e
   22602:	4620      	mov	r0, r4
   22604:	f009 ffa5 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22608:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2260c:	e014      	b.n	22638 <set_ss_pin_state+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
   2260e:	f04f 31ff 	mov.w	r1, #4294967295
   22612:	e7e0      	b.n	225d6 <set_ss_pin_state+0x2a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22614:	4d2a      	ldr	r5, [pc, #168]	; (226c0 <set_ss_pin_state+0x114>)
   22616:	f240 2329 	movw	r3, #553	; 0x229
   2261a:	462a      	mov	r2, r5
   2261c:	492b      	ldr	r1, [pc, #172]	; (226cc <set_ss_pin_state+0x120>)
   2261e:	482a      	ldr	r0, [pc, #168]	; (226c8 <set_ss_pin_state+0x11c>)
   22620:	f009 fd92 	bl	2c148 <printk>
   22624:	f240 2129 	movw	r1, #553	; 0x229
   22628:	4628      	mov	r0, r5
   2262a:	f009 ff92 	bl	2c552 <assert_post_action>
   2262e:	e7d8      	b.n	225e2 <set_ss_pin_state+0x36>
        case 0: return NRF_P0;
   22630:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22634:	e000      	b.n	22638 <set_ss_pin_state+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22636:	4a26      	ldr	r2, [pc, #152]	; (226d0 <set_ss_pin_state+0x124>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22638:	2301      	movs	r3, #1
   2263a:	40ab      	lsls	r3, r5
    p_reg->OUTCLR = clr_mask;
   2263c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    }
}
   22640:	bd38      	pop	{r3, r4, r5, pc}
    switch (port)
   22642:	0963      	lsrs	r3, r4, #5
   22644:	d01f      	beq.n	22686 <set_ss_pin_state+0xda>
   22646:	2b01      	cmp	r3, #1
   22648:	d120      	bne.n	2268c <set_ss_pin_state+0xe0>
            mask = P1_FEATURE_PINS_PRESENT;
   2264a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2264e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22652:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22654:	f013 0f01 	tst.w	r3, #1
   22658:	d01a      	beq.n	22690 <set_ss_pin_state+0xe4>
    *p_pin = pin_number & 0x1F;
   2265a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2265e:	0964      	lsrs	r4, r4, #5
   22660:	d024      	beq.n	226ac <set_ss_pin_state+0x100>
   22662:	2c01      	cmp	r4, #1
   22664:	d025      	beq.n	226b2 <set_ss_pin_state+0x106>
            NRFX_ASSERT(0);
   22666:	4c16      	ldr	r4, [pc, #88]	; (226c0 <set_ss_pin_state+0x114>)
   22668:	f240 232e 	movw	r3, #558	; 0x22e
   2266c:	4622      	mov	r2, r4
   2266e:	4915      	ldr	r1, [pc, #84]	; (226c4 <set_ss_pin_state+0x118>)
   22670:	4815      	ldr	r0, [pc, #84]	; (226c8 <set_ss_pin_state+0x11c>)
   22672:	f009 fd69 	bl	2c148 <printk>
   22676:	f240 212e 	movw	r1, #558	; 0x22e
   2267a:	4620      	mov	r0, r4
   2267c:	f009 ff69 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22680:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22684:	e016      	b.n	226b4 <set_ss_pin_state+0x108>
            mask = P0_FEATURE_PINS_PRESENT;
   22686:	f04f 33ff 	mov.w	r3, #4294967295
   2268a:	e7e0      	b.n	2264e <set_ss_pin_state+0xa2>
    switch (port)
   2268c:	2300      	movs	r3, #0
   2268e:	e7de      	b.n	2264e <set_ss_pin_state+0xa2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22690:	4d0b      	ldr	r5, [pc, #44]	; (226c0 <set_ss_pin_state+0x114>)
   22692:	f240 2329 	movw	r3, #553	; 0x229
   22696:	462a      	mov	r2, r5
   22698:	490c      	ldr	r1, [pc, #48]	; (226cc <set_ss_pin_state+0x120>)
   2269a:	480b      	ldr	r0, [pc, #44]	; (226c8 <set_ss_pin_state+0x11c>)
   2269c:	f009 fd54 	bl	2c148 <printk>
   226a0:	f240 2129 	movw	r1, #553	; 0x229
   226a4:	4628      	mov	r0, r5
   226a6:	f009 ff54 	bl	2c552 <assert_post_action>
   226aa:	e7d6      	b.n	2265a <set_ss_pin_state+0xae>
        case 0: return NRF_P0;
   226ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   226b0:	e000      	b.n	226b4 <set_ss_pin_state+0x108>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   226b2:	4a07      	ldr	r2, [pc, #28]	; (226d0 <set_ss_pin_state+0x124>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   226b4:	2301      	movs	r3, #1
   226b6:	40ab      	lsls	r3, r5
    p_reg->OUTSET = set_mask;
   226b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   226bc:	e7c0      	b.n	22640 <set_ss_pin_state+0x94>
   226be:	bf00      	nop
   226c0:	000321d8 	.word	0x000321d8
   226c4:	000364dc 	.word	0x000364dc
   226c8:	00031df4 	.word	0x00031df4
   226cc:	0003220c 	.word	0x0003220c
   226d0:	50000300 	.word	0x50000300

000226d4 <spim_xfer>:

static nrfx_err_t spim_xfer(NRF_SPIM_Type               * p_spim,
                            spim_control_block_t        * p_cb,
                            nrfx_spim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
   226d4:	b570      	push	{r4, r5, r6, lr}
   226d6:	4604      	mov	r4, r0
   226d8:	460e      	mov	r6, r1
   226da:	461d      	mov	r5, r3
    nrfx_err_t err_code;
    // EasyDMA requires that transfer buffers are placed in Data RAM region;
    // signal error if they are not.
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   226dc:	6813      	ldr	r3, [r2, #0]
   226de:	b123      	cbz	r3, 226ea <spim_xfer+0x16>
   226e0:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
   226e4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   226e8:	d106      	bne.n	226f8 <spim_xfer+0x24>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   226ea:	6891      	ldr	r1, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   226ec:	b141      	cbz	r1, 22700 <spim_xfer+0x2c>
   226ee:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   226f2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   226f6:	d003      	beq.n	22700 <spim_xfer+0x2c>
    {
        p_cb->transfer_in_progress = false;
   226f8:	2300      	movs	r3, #0
   226fa:	7773      	strb	r3, [r6, #29]
        err_code = NRFX_ERROR_INVALID_ADDR;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   226fc:	4818      	ldr	r0, [pc, #96]	; (22760 <spim_xfer+0x8c>)
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
    }
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   226fe:	bd70      	pop	{r4, r5, r6, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   22700:	6851      	ldr	r1, [r2, #4]

NRF_STATIC_INLINE void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t const * p_buffer,
                                              size_t          length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22702:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22706:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   2270a:	6891      	ldr	r1, [r2, #8]
   2270c:	68d3      	ldr	r3, [r2, #12]

NRF_STATIC_INLINE void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t * p_buffer,
                                              size_t    length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2270e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22712:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22716:	2300      	movs	r3, #0
   22718:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   2271c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    spim_list_enable_handle(p_spim, flags);
   22720:	4629      	mov	r1, r5
   22722:	4620      	mov	r0, r4
   22724:	f00d fe50 	bl	303c8 <spim_list_enable_handle>
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   22728:	f015 0208 	ands.w	r2, r5, #8
   2272c:	d101      	bne.n	22732 <spim_xfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2272e:	2301      	movs	r3, #1
   22730:	6123      	str	r3, [r4, #16]
    if (!p_cb->handler)
   22732:	6833      	ldr	r3, [r6, #0]
   22734:	b14b      	cbz	r3, 2274a <spim_xfer+0x76>
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
   22736:	f015 0f04 	tst.w	r5, #4
   2273a:	bf0c      	ite	eq
   2273c:	2101      	moveq	r1, #1
   2273e:	2100      	movne	r1, #0
   22740:	4620      	mov	r0, r4
   22742:	f00d fe38 	bl	303b6 <spim_int_enable>
    return err_code;
   22746:	4807      	ldr	r0, [pc, #28]	; (22764 <spim_xfer+0x90>)
   22748:	e7d9      	b.n	226fe <spim_xfer+0x2a>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2274a:	b91a      	cbnz	r2, 22754 <spim_xfer+0x80>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2274c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   22750:	2b00      	cmp	r3, #0
   22752:	d0fb      	beq.n	2274c <spim_xfer+0x78>
        set_ss_pin_state(p_cb, false);
   22754:	2100      	movs	r1, #0
   22756:	4630      	mov	r0, r6
   22758:	f7ff ff28 	bl	225ac <set_ss_pin_state>
    return err_code;
   2275c:	4801      	ldr	r0, [pc, #4]	; (22764 <spim_xfer+0x90>)
   2275e:	e7ce      	b.n	226fe <spim_xfer+0x2a>
   22760:	0bad000a 	.word	0x0bad000a
   22764:	0bad0000 	.word	0x0bad0000

00022768 <irq_handler>:
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    return nrf_spim_event_address_get(p_spim, NRF_SPIM_EVENT_END);
}

static void irq_handler(NRF_SPIM_Type * p_spim, spim_control_block_t * p_cb)
{
   22768:	b538      	push	{r3, r4, r5, lr}
   2276a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
        nrf_spim_task_trigger(p_spim, NRF_SPIM_TASK_START);
        return;
    }
#endif

    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2276e:	b153      	cbz	r3, 22786 <irq_handler+0x1e>
   22770:	460c      	mov	r4, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22772:	2300      	movs	r3, #0
   22774:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   22778:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
        {
            anomaly_198_disable();
        }
#endif
        nrf_spim_event_clear(p_spim, NRF_SPIM_EVENT_END);
        NRFX_ASSERT(p_cb->handler);
   2277c:	680b      	ldr	r3, [r1, #0]
   2277e:	b11b      	cbz	r3, 22788 <irq_handler+0x20>
        NRFX_LOG_DEBUG("Event: NRF_SPIM_EVENT_END.");
        finish_transfer(p_cb);
   22780:	4620      	mov	r0, r4
   22782:	f00d fe47 	bl	30414 <finish_transfer>
    }
}
   22786:	bd38      	pop	{r3, r4, r5, pc}
        NRFX_ASSERT(p_cb->handler);
   22788:	4d06      	ldr	r5, [pc, #24]	; (227a4 <irq_handler+0x3c>)
   2278a:	f240 333b 	movw	r3, #827	; 0x33b
   2278e:	462a      	mov	r2, r5
   22790:	4905      	ldr	r1, [pc, #20]	; (227a8 <irq_handler+0x40>)
   22792:	4806      	ldr	r0, [pc, #24]	; (227ac <irq_handler+0x44>)
   22794:	f009 fcd8 	bl	2c148 <printk>
   22798:	f240 313b 	movw	r1, #827	; 0x33b
   2279c:	4628      	mov	r0, r5
   2279e:	f009 fed8 	bl	2c552 <assert_post_action>
   227a2:	e7ed      	b.n	22780 <irq_handler+0x18>
   227a4:	00035958 	.word	0x00035958
   227a8:	00035880 	.word	0x00035880
   227ac:	00031df4 	.word	0x00031df4

000227b0 <configure_pins>:
{
   227b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   227b4:	4605      	mov	r5, r0
   227b6:	460c      	mov	r4, r1
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   227b8:	6807      	ldr	r7, [r0, #0]
    if (!p_config->skip_gpio_cfg)
   227ba:	7ccb      	ldrb	r3, [r1, #19]
   227bc:	2b00      	cmp	r3, #0
   227be:	f040 80e0 	bne.w	22982 <configure_pins+0x1d2>
        pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M)
   227c2:	688b      	ldr	r3, [r1, #8]
                    : NRF_GPIO_PIN_S0S1;
   227c4:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
   227c8:	d02b      	beq.n	22822 <configure_pins+0x72>
   227ca:	f04f 0800 	mov.w	r8, #0
        nrf_gpio_pin_write(p_config->sck_pin,
   227ce:	7826      	ldrb	r6, [r4, #0]
                           p_config->mode <= NRF_SPIM_MODE_1 ? 0 : 1);
   227d0:	7b23      	ldrb	r3, [r4, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   227d2:	2b01      	cmp	r3, #1
   227d4:	bf94      	ite	ls
   227d6:	2300      	movls	r3, #0
   227d8:	2301      	movhi	r3, #1
    if (value == 0)
   227da:	2b00      	cmp	r3, #0
   227dc:	d162      	bne.n	228a4 <configure_pins+0xf4>
    switch (port)
   227de:	0972      	lsrs	r2, r6, #5
   227e0:	d022      	beq.n	22828 <configure_pins+0x78>
   227e2:	2a01      	cmp	r2, #1
   227e4:	d101      	bne.n	227ea <configure_pins+0x3a>
            mask = P1_FEATURE_PINS_PRESENT;
   227e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   227ea:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   227ee:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   227f0:	f013 0f01 	tst.w	r3, #1
   227f4:	d01b      	beq.n	2282e <configure_pins+0x7e>
    *p_pin = pin_number & 0x1F;
   227f6:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   227fa:	0976      	lsrs	r6, r6, #5
   227fc:	d026      	beq.n	2284c <configure_pins+0x9c>
   227fe:	2e01      	cmp	r6, #1
   22800:	d027      	beq.n	22852 <configure_pins+0xa2>
            NRFX_ASSERT(0);
   22802:	4eb5      	ldr	r6, [pc, #724]	; (22ad8 <configure_pins+0x328>)
   22804:	f240 232e 	movw	r3, #558	; 0x22e
   22808:	4632      	mov	r2, r6
   2280a:	49b4      	ldr	r1, [pc, #720]	; (22adc <configure_pins+0x32c>)
   2280c:	48b4      	ldr	r0, [pc, #720]	; (22ae0 <configure_pins+0x330>)
   2280e:	f009 fc9b 	bl	2c148 <printk>
   22812:	f240 212e 	movw	r1, #558	; 0x22e
   22816:	4630      	mov	r0, r6
   22818:	f009 fe9b 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   2281c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22820:	e018      	b.n	22854 <configure_pins+0xa4>
                    : NRF_GPIO_PIN_S0S1;
   22822:	f04f 0803 	mov.w	r8, #3
   22826:	e7d2      	b.n	227ce <configure_pins+0x1e>
            mask = P0_FEATURE_PINS_PRESENT;
   22828:	f04f 33ff 	mov.w	r3, #4294967295
   2282c:	e7dd      	b.n	227ea <configure_pins+0x3a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2282e:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 22ad8 <configure_pins+0x328>
   22832:	f240 2329 	movw	r3, #553	; 0x229
   22836:	464a      	mov	r2, r9
   22838:	49aa      	ldr	r1, [pc, #680]	; (22ae4 <configure_pins+0x334>)
   2283a:	48a9      	ldr	r0, [pc, #676]	; (22ae0 <configure_pins+0x330>)
   2283c:	f009 fc84 	bl	2c148 <printk>
   22840:	f240 2129 	movw	r1, #553	; 0x229
   22844:	4648      	mov	r0, r9
   22846:	f009 fe84 	bl	2c552 <assert_post_action>
   2284a:	e7d4      	b.n	227f6 <configure_pins+0x46>
        case 0: return NRF_P0;
   2284c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22850:	e000      	b.n	22854 <configure_pins+0xa4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22852:	4aa5      	ldr	r2, [pc, #660]	; (22ae8 <configure_pins+0x338>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22854:	2301      	movs	r3, #1
   22856:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTCLR = clr_mask;
   2285a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
        nrf_gpio_cfg(p_config->sck_pin,
   2285e:	7826      	ldrb	r6, [r4, #0]
    switch (port)
   22860:	0973      	lsrs	r3, r6, #5
   22862:	d05f      	beq.n	22924 <configure_pins+0x174>
   22864:	2b01      	cmp	r3, #1
   22866:	d160      	bne.n	2292a <configure_pins+0x17a>
            mask = P1_FEATURE_PINS_PRESENT;
   22868:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2286c:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22870:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22872:	f013 0f01 	tst.w	r3, #1
   22876:	d05a      	beq.n	2292e <configure_pins+0x17e>
    *p_pin = pin_number & 0x1F;
   22878:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2287c:	0976      	lsrs	r6, r6, #5
   2287e:	d065      	beq.n	2294c <configure_pins+0x19c>
   22880:	2e01      	cmp	r6, #1
   22882:	d066      	beq.n	22952 <configure_pins+0x1a2>
            NRFX_ASSERT(0);
   22884:	4e94      	ldr	r6, [pc, #592]	; (22ad8 <configure_pins+0x328>)
   22886:	f240 232e 	movw	r3, #558	; 0x22e
   2288a:	4632      	mov	r2, r6
   2288c:	4993      	ldr	r1, [pc, #588]	; (22adc <configure_pins+0x32c>)
   2288e:	4894      	ldr	r0, [pc, #592]	; (22ae0 <configure_pins+0x330>)
   22890:	f009 fc5a 	bl	2c148 <printk>
   22894:	f240 212e 	movw	r1, #558	; 0x22e
   22898:	4630      	mov	r0, r6
   2289a:	f009 fe5a 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   2289e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   228a2:	e057      	b.n	22954 <configure_pins+0x1a4>
    switch (port)
   228a4:	0973      	lsrs	r3, r6, #5
   228a6:	d01f      	beq.n	228e8 <configure_pins+0x138>
   228a8:	2b01      	cmp	r3, #1
   228aa:	d120      	bne.n	228ee <configure_pins+0x13e>
            mask = P1_FEATURE_PINS_PRESENT;
   228ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   228b0:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   228b4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   228b6:	f013 0f01 	tst.w	r3, #1
   228ba:	d01a      	beq.n	228f2 <configure_pins+0x142>
    *p_pin = pin_number & 0x1F;
   228bc:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   228c0:	0976      	lsrs	r6, r6, #5
   228c2:	d025      	beq.n	22910 <configure_pins+0x160>
   228c4:	2e01      	cmp	r6, #1
   228c6:	d026      	beq.n	22916 <configure_pins+0x166>
            NRFX_ASSERT(0);
   228c8:	4e83      	ldr	r6, [pc, #524]	; (22ad8 <configure_pins+0x328>)
   228ca:	f240 232e 	movw	r3, #558	; 0x22e
   228ce:	4632      	mov	r2, r6
   228d0:	4982      	ldr	r1, [pc, #520]	; (22adc <configure_pins+0x32c>)
   228d2:	4883      	ldr	r0, [pc, #524]	; (22ae0 <configure_pins+0x330>)
   228d4:	f009 fc38 	bl	2c148 <printk>
   228d8:	f240 212e 	movw	r1, #558	; 0x22e
   228dc:	4630      	mov	r0, r6
   228de:	f009 fe38 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   228e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   228e6:	e017      	b.n	22918 <configure_pins+0x168>
            mask = P0_FEATURE_PINS_PRESENT;
   228e8:	f04f 33ff 	mov.w	r3, #4294967295
   228ec:	e7e0      	b.n	228b0 <configure_pins+0x100>
    switch (port)
   228ee:	2300      	movs	r3, #0
   228f0:	e7de      	b.n	228b0 <configure_pins+0x100>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   228f2:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 22ad8 <configure_pins+0x328>
   228f6:	f240 2329 	movw	r3, #553	; 0x229
   228fa:	464a      	mov	r2, r9
   228fc:	4979      	ldr	r1, [pc, #484]	; (22ae4 <configure_pins+0x334>)
   228fe:	4878      	ldr	r0, [pc, #480]	; (22ae0 <configure_pins+0x330>)
   22900:	f009 fc22 	bl	2c148 <printk>
   22904:	f240 2129 	movw	r1, #553	; 0x229
   22908:	4648      	mov	r0, r9
   2290a:	f009 fe22 	bl	2c552 <assert_post_action>
   2290e:	e7d5      	b.n	228bc <configure_pins+0x10c>
        case 0: return NRF_P0;
   22910:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22914:	e000      	b.n	22918 <configure_pins+0x168>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22916:	4a74      	ldr	r2, [pc, #464]	; (22ae8 <configure_pins+0x338>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22918:	2301      	movs	r3, #1
   2291a:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTSET = set_mask;
   2291e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   22922:	e79c      	b.n	2285e <configure_pins+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
   22924:	f04f 33ff 	mov.w	r3, #4294967295
   22928:	e7a0      	b.n	2286c <configure_pins+0xbc>
    switch (port)
   2292a:	2300      	movs	r3, #0
   2292c:	e79e      	b.n	2286c <configure_pins+0xbc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2292e:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 22ad8 <configure_pins+0x328>
   22932:	f240 2329 	movw	r3, #553	; 0x229
   22936:	464a      	mov	r2, r9
   22938:	496a      	ldr	r1, [pc, #424]	; (22ae4 <configure_pins+0x334>)
   2293a:	4869      	ldr	r0, [pc, #420]	; (22ae0 <configure_pins+0x330>)
   2293c:	f009 fc04 	bl	2c148 <printk>
   22940:	f240 2129 	movw	r1, #553	; 0x229
   22944:	4648      	mov	r0, r9
   22946:	f009 fe04 	bl	2c552 <assert_post_action>
   2294a:	e795      	b.n	22878 <configure_pins+0xc8>
        case 0: return NRF_P0;
   2294c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22950:	e000      	b.n	22954 <configure_pins+0x1a4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22952:	4b65      	ldr	r3, [pc, #404]	; (22ae8 <configure_pins+0x338>)
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   22954:	ea4f 2808 	mov.w	r8, r8, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22958:	f048 0201 	orr.w	r2, r8, #1
    reg->PIN_CNF[pin_number] = cnf;
   2295c:	f509 79e0 	add.w	r9, r9, #448	; 0x1c0
   22960:	f843 2029 	str.w	r2, [r3, r9, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   22964:	7866      	ldrb	r6, [r4, #1]
   22966:	2eff      	cmp	r6, #255	; 0xff
   22968:	d134      	bne.n	229d4 <configure_pins+0x224>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   2296a:	78a6      	ldrb	r6, [r4, #2]
   2296c:	2eff      	cmp	r6, #255	; 0xff
   2296e:	f040 80bd 	bne.w	22aec <configure_pins+0x33c>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   22972:	78e6      	ldrb	r6, [r4, #3]
   22974:	2eff      	cmp	r6, #255	; 0xff
   22976:	f040 80fc 	bne.w	22b72 <configure_pins+0x3c2>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   2297a:	7be6      	ldrb	r6, [r4, #15]
   2297c:	2eff      	cmp	r6, #255	; 0xff
   2297e:	f040 81bb 	bne.w	22cf8 <configure_pins+0x548>
    if (!p_config->skip_psel_cfg)
   22982:	7d23      	ldrb	r3, [r4, #20]
   22984:	2b00      	cmp	r3, #0
   22986:	f040 8259 	bne.w	22e3c <configure_pins+0x68c>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   2298a:	7863      	ldrb	r3, [r4, #1]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   2298c:	2bff      	cmp	r3, #255	; 0xff
   2298e:	f000 8234 	beq.w	22dfa <configure_pins+0x64a>
   22992:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   22994:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   22996:	2bff      	cmp	r3, #255	; 0xff
   22998:	f000 8232 	beq.w	22e00 <configure_pins+0x650>
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   2299c:	7821      	ldrb	r1, [r4, #0]
    p_reg->PSEL.SCK  = sck_pin;
   2299e:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   229a2:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   229a6:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   229aa:	792b      	ldrb	r3, [r5, #4]
   229ac:	2b00      	cmp	r3, #0
   229ae:	f040 823e 	bne.w	22e2e <configure_pins+0x67e>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   229b2:	78e3      	ldrb	r3, [r4, #3]
   229b4:	2bff      	cmp	r3, #255	; 0xff
   229b6:	f000 8231 	beq.w	22e1c <configure_pins+0x66c>
                p_config->use_hw_ss)
   229ba:	7c62      	ldrb	r2, [r4, #17]
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   229bc:	2a00      	cmp	r2, #0
   229be:	f000 822d 	beq.w	22e1c <configure_pins+0x66c>
                                    (p_config->ss_active_high == true
   229c2:	7921      	ldrb	r1, [r4, #4]
                                    p_config->ss_duration);
   229c4:	7ca2      	ldrb	r2, [r4, #18]
    p_reg->PSEL.CSN = pin;
   229c6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   229ca:	f8c7 1568 	str.w	r1, [r7, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   229ce:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
}
   229d2:	e22c      	b.n	22e2e <configure_pins+0x67e>
    switch (port)
   229d4:	0973      	lsrs	r3, r6, #5
   229d6:	d01f      	beq.n	22a18 <configure_pins+0x268>
   229d8:	2b01      	cmp	r3, #1
   229da:	d120      	bne.n	22a1e <configure_pins+0x26e>
            mask = P1_FEATURE_PINS_PRESENT;
   229dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   229e0:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   229e4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   229e6:	f013 0f01 	tst.w	r3, #1
   229ea:	d01a      	beq.n	22a22 <configure_pins+0x272>
    *p_pin = pin_number & 0x1F;
   229ec:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   229f0:	0976      	lsrs	r6, r6, #5
   229f2:	d025      	beq.n	22a40 <configure_pins+0x290>
   229f4:	2e01      	cmp	r6, #1
   229f6:	d026      	beq.n	22a46 <configure_pins+0x296>
            NRFX_ASSERT(0);
   229f8:	4e37      	ldr	r6, [pc, #220]	; (22ad8 <configure_pins+0x328>)
   229fa:	f240 232e 	movw	r3, #558	; 0x22e
   229fe:	4632      	mov	r2, r6
   22a00:	4936      	ldr	r1, [pc, #216]	; (22adc <configure_pins+0x32c>)
   22a02:	4837      	ldr	r0, [pc, #220]	; (22ae0 <configure_pins+0x330>)
   22a04:	f009 fba0 	bl	2c148 <printk>
   22a08:	f240 212e 	movw	r1, #558	; 0x22e
   22a0c:	4630      	mov	r0, r6
   22a0e:	f009 fda0 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22a12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22a16:	e017      	b.n	22a48 <configure_pins+0x298>
            mask = P0_FEATURE_PINS_PRESENT;
   22a18:	f04f 33ff 	mov.w	r3, #4294967295
   22a1c:	e7e0      	b.n	229e0 <configure_pins+0x230>
    switch (port)
   22a1e:	2300      	movs	r3, #0
   22a20:	e7de      	b.n	229e0 <configure_pins+0x230>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22a22:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 22ad8 <configure_pins+0x328>
   22a26:	f240 2329 	movw	r3, #553	; 0x229
   22a2a:	464a      	mov	r2, r9
   22a2c:	492d      	ldr	r1, [pc, #180]	; (22ae4 <configure_pins+0x334>)
   22a2e:	482c      	ldr	r0, [pc, #176]	; (22ae0 <configure_pins+0x330>)
   22a30:	f009 fb8a 	bl	2c148 <printk>
   22a34:	f240 2129 	movw	r1, #553	; 0x229
   22a38:	4648      	mov	r0, r9
   22a3a:	f009 fd8a 	bl	2c552 <assert_post_action>
   22a3e:	e7d5      	b.n	229ec <configure_pins+0x23c>
        case 0: return NRF_P0;
   22a40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22a44:	e000      	b.n	22a48 <configure_pins+0x298>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22a46:	4a28      	ldr	r2, [pc, #160]	; (22ae8 <configure_pins+0x338>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22a48:	2301      	movs	r3, #1
   22a4a:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTCLR = clr_mask;
   22a4e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg(p_config->mosi_pin,
   22a52:	7866      	ldrb	r6, [r4, #1]
    switch (port)
   22a54:	0973      	lsrs	r3, r6, #5
   22a56:	d01f      	beq.n	22a98 <configure_pins+0x2e8>
   22a58:	2b01      	cmp	r3, #1
   22a5a:	d120      	bne.n	22a9e <configure_pins+0x2ee>
            mask = P1_FEATURE_PINS_PRESENT;
   22a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   22a60:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22a64:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22a66:	f013 0f01 	tst.w	r3, #1
   22a6a:	d01a      	beq.n	22aa2 <configure_pins+0x2f2>
    *p_pin = pin_number & 0x1F;
   22a6c:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22a70:	0976      	lsrs	r6, r6, #5
   22a72:	d025      	beq.n	22ac0 <configure_pins+0x310>
   22a74:	2e01      	cmp	r6, #1
   22a76:	d026      	beq.n	22ac6 <configure_pins+0x316>
            NRFX_ASSERT(0);
   22a78:	4e17      	ldr	r6, [pc, #92]	; (22ad8 <configure_pins+0x328>)
   22a7a:	f240 232e 	movw	r3, #558	; 0x22e
   22a7e:	4632      	mov	r2, r6
   22a80:	4916      	ldr	r1, [pc, #88]	; (22adc <configure_pins+0x32c>)
   22a82:	4817      	ldr	r0, [pc, #92]	; (22ae0 <configure_pins+0x330>)
   22a84:	f009 fb60 	bl	2c148 <printk>
   22a88:	f240 212e 	movw	r1, #558	; 0x22e
   22a8c:	4630      	mov	r0, r6
   22a8e:	f009 fd60 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22a92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22a96:	e017      	b.n	22ac8 <configure_pins+0x318>
            mask = P0_FEATURE_PINS_PRESENT;
   22a98:	f04f 33ff 	mov.w	r3, #4294967295
   22a9c:	e7e0      	b.n	22a60 <configure_pins+0x2b0>
    switch (port)
   22a9e:	2300      	movs	r3, #0
   22aa0:	e7de      	b.n	22a60 <configure_pins+0x2b0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22aa2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 22ad8 <configure_pins+0x328>
   22aa6:	f240 2329 	movw	r3, #553	; 0x229
   22aaa:	464a      	mov	r2, r9
   22aac:	490d      	ldr	r1, [pc, #52]	; (22ae4 <configure_pins+0x334>)
   22aae:	480c      	ldr	r0, [pc, #48]	; (22ae0 <configure_pins+0x330>)
   22ab0:	f009 fb4a 	bl	2c148 <printk>
   22ab4:	f240 2129 	movw	r1, #553	; 0x229
   22ab8:	4648      	mov	r0, r9
   22aba:	f009 fd4a 	bl	2c552 <assert_post_action>
   22abe:	e7d5      	b.n	22a6c <configure_pins+0x2bc>
        case 0: return NRF_P0;
   22ac0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22ac4:	e000      	b.n	22ac8 <configure_pins+0x318>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22ac6:	4a08      	ldr	r2, [pc, #32]	; (22ae8 <configure_pins+0x338>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22ac8:	f048 0303 	orr.w	r3, r8, #3
    reg->PIN_CNF[pin_number] = cnf;
   22acc:	f509 79e0 	add.w	r9, r9, #448	; 0x1c0
   22ad0:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   22ad4:	e749      	b.n	2296a <configure_pins+0x1ba>
   22ad6:	bf00      	nop
   22ad8:	000321d8 	.word	0x000321d8
   22adc:	000364dc 	.word	0x000364dc
   22ae0:	00031df4 	.word	0x00031df4
   22ae4:	0003220c 	.word	0x0003220c
   22ae8:	50000300 	.word	0x50000300
            nrf_gpio_cfg(p_config->miso_pin,
   22aec:	f894 900e 	ldrb.w	r9, [r4, #14]
    switch (port)
   22af0:	0973      	lsrs	r3, r6, #5
   22af2:	d01f      	beq.n	22b34 <configure_pins+0x384>
   22af4:	2b01      	cmp	r3, #1
   22af6:	d120      	bne.n	22b3a <configure_pins+0x38a>
            mask = P1_FEATURE_PINS_PRESENT;
   22af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   22afc:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22b00:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22b02:	f013 0f01 	tst.w	r3, #1
   22b06:	d01a      	beq.n	22b3e <configure_pins+0x38e>
    *p_pin = pin_number & 0x1F;
   22b08:	f006 0a1f 	and.w	sl, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22b0c:	0973      	lsrs	r3, r6, #5
   22b0e:	d025      	beq.n	22b5c <configure_pins+0x3ac>
   22b10:	2b01      	cmp	r3, #1
   22b12:	d026      	beq.n	22b62 <configure_pins+0x3b2>
            NRFX_ASSERT(0);
   22b14:	4ebc      	ldr	r6, [pc, #752]	; (22e08 <configure_pins+0x658>)
   22b16:	f240 232e 	movw	r3, #558	; 0x22e
   22b1a:	4632      	mov	r2, r6
   22b1c:	49bb      	ldr	r1, [pc, #748]	; (22e0c <configure_pins+0x65c>)
   22b1e:	48bc      	ldr	r0, [pc, #752]	; (22e10 <configure_pins+0x660>)
   22b20:	f009 fb12 	bl	2c148 <printk>
   22b24:	f240 212e 	movw	r1, #558	; 0x22e
   22b28:	4630      	mov	r0, r6
   22b2a:	f009 fd12 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22b2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22b32:	e017      	b.n	22b64 <configure_pins+0x3b4>
            mask = P0_FEATURE_PINS_PRESENT;
   22b34:	f04f 33ff 	mov.w	r3, #4294967295
   22b38:	e7e0      	b.n	22afc <configure_pins+0x34c>
    switch (port)
   22b3a:	2300      	movs	r3, #0
   22b3c:	e7de      	b.n	22afc <configure_pins+0x34c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22b3e:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 22e08 <configure_pins+0x658>
   22b42:	f240 2329 	movw	r3, #553	; 0x229
   22b46:	4652      	mov	r2, sl
   22b48:	49b2      	ldr	r1, [pc, #712]	; (22e14 <configure_pins+0x664>)
   22b4a:	48b1      	ldr	r0, [pc, #708]	; (22e10 <configure_pins+0x660>)
   22b4c:	f009 fafc 	bl	2c148 <printk>
   22b50:	f240 2129 	movw	r1, #553	; 0x229
   22b54:	4650      	mov	r0, sl
   22b56:	f009 fcfc 	bl	2c552 <assert_post_action>
   22b5a:	e7d5      	b.n	22b08 <configure_pins+0x358>
        case 0: return NRF_P0;
   22b5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22b60:	e000      	b.n	22b64 <configure_pins+0x3b4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22b62:	4aad      	ldr	r2, [pc, #692]	; (22e18 <configure_pins+0x668>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22b64:	ea48 0389 	orr.w	r3, r8, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   22b68:	f50a 7ae0 	add.w	sl, sl, #448	; 0x1c0
   22b6c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
   22b70:	e6ff      	b.n	22972 <configure_pins+0x1c2>
                               p_config->ss_active_high ? 0 : 1);
   22b72:	7923      	ldrb	r3, [r4, #4]
    if (value == 0)
   22b74:	f093 0301 	eors.w	r3, r3, #1
   22b78:	d15f      	bne.n	22c3a <configure_pins+0x48a>
    switch (port)
   22b7a:	0972      	lsrs	r2, r6, #5
   22b7c:	d01f      	beq.n	22bbe <configure_pins+0x40e>
   22b7e:	2a01      	cmp	r2, #1
   22b80:	d101      	bne.n	22b86 <configure_pins+0x3d6>
            mask = P1_FEATURE_PINS_PRESENT;
   22b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   22b86:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22b8a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22b8c:	f013 0f01 	tst.w	r3, #1
   22b90:	d018      	beq.n	22bc4 <configure_pins+0x414>
    *p_pin = pin_number & 0x1F;
   22b92:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22b96:	0976      	lsrs	r6, r6, #5
   22b98:	d023      	beq.n	22be2 <configure_pins+0x432>
   22b9a:	2e01      	cmp	r6, #1
   22b9c:	d024      	beq.n	22be8 <configure_pins+0x438>
            NRFX_ASSERT(0);
   22b9e:	4e9a      	ldr	r6, [pc, #616]	; (22e08 <configure_pins+0x658>)
   22ba0:	f240 232e 	movw	r3, #558	; 0x22e
   22ba4:	4632      	mov	r2, r6
   22ba6:	4999      	ldr	r1, [pc, #612]	; (22e0c <configure_pins+0x65c>)
   22ba8:	4899      	ldr	r0, [pc, #612]	; (22e10 <configure_pins+0x660>)
   22baa:	f009 facd 	bl	2c148 <printk>
   22bae:	f240 212e 	movw	r1, #558	; 0x22e
   22bb2:	4630      	mov	r0, r6
   22bb4:	f009 fccd 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22bb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22bbc:	e015      	b.n	22bea <configure_pins+0x43a>
            mask = P0_FEATURE_PINS_PRESENT;
   22bbe:	f04f 33ff 	mov.w	r3, #4294967295
   22bc2:	e7e0      	b.n	22b86 <configure_pins+0x3d6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22bc4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 22e08 <configure_pins+0x658>
   22bc8:	f240 2329 	movw	r3, #553	; 0x229
   22bcc:	464a      	mov	r2, r9
   22bce:	4991      	ldr	r1, [pc, #580]	; (22e14 <configure_pins+0x664>)
   22bd0:	488f      	ldr	r0, [pc, #572]	; (22e10 <configure_pins+0x660>)
   22bd2:	f009 fab9 	bl	2c148 <printk>
   22bd6:	f240 2129 	movw	r1, #553	; 0x229
   22bda:	4648      	mov	r0, r9
   22bdc:	f009 fcb9 	bl	2c552 <assert_post_action>
   22be0:	e7d7      	b.n	22b92 <configure_pins+0x3e2>
        case 0: return NRF_P0;
   22be2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22be6:	e000      	b.n	22bea <configure_pins+0x43a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22be8:	4a8b      	ldr	r2, [pc, #556]	; (22e18 <configure_pins+0x668>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22bea:	2301      	movs	r3, #1
   22bec:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTCLR = clr_mask;
   22bf0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg(p_config->ss_pin,
   22bf4:	78e6      	ldrb	r6, [r4, #3]
    switch (port)
   22bf6:	0973      	lsrs	r3, r6, #5
   22bf8:	d05f      	beq.n	22cba <configure_pins+0x50a>
   22bfa:	2b01      	cmp	r3, #1
   22bfc:	d160      	bne.n	22cc0 <configure_pins+0x510>
            mask = P1_FEATURE_PINS_PRESENT;
   22bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   22c02:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22c06:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22c08:	f013 0f01 	tst.w	r3, #1
   22c0c:	d05a      	beq.n	22cc4 <configure_pins+0x514>
    *p_pin = pin_number & 0x1F;
   22c0e:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22c12:	0976      	lsrs	r6, r6, #5
   22c14:	d065      	beq.n	22ce2 <configure_pins+0x532>
   22c16:	2e01      	cmp	r6, #1
   22c18:	d066      	beq.n	22ce8 <configure_pins+0x538>
            NRFX_ASSERT(0);
   22c1a:	4e7b      	ldr	r6, [pc, #492]	; (22e08 <configure_pins+0x658>)
   22c1c:	f240 232e 	movw	r3, #558	; 0x22e
   22c20:	4632      	mov	r2, r6
   22c22:	497a      	ldr	r1, [pc, #488]	; (22e0c <configure_pins+0x65c>)
   22c24:	487a      	ldr	r0, [pc, #488]	; (22e10 <configure_pins+0x660>)
   22c26:	f009 fa8f 	bl	2c148 <printk>
   22c2a:	f240 212e 	movw	r1, #558	; 0x22e
   22c2e:	4630      	mov	r0, r6
   22c30:	f009 fc8f 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22c34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22c38:	e057      	b.n	22cea <configure_pins+0x53a>
    switch (port)
   22c3a:	0973      	lsrs	r3, r6, #5
   22c3c:	d01f      	beq.n	22c7e <configure_pins+0x4ce>
   22c3e:	2b01      	cmp	r3, #1
   22c40:	d120      	bne.n	22c84 <configure_pins+0x4d4>
            mask = P1_FEATURE_PINS_PRESENT;
   22c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   22c46:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22c4a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22c4c:	f013 0f01 	tst.w	r3, #1
   22c50:	d01a      	beq.n	22c88 <configure_pins+0x4d8>
    *p_pin = pin_number & 0x1F;
   22c52:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22c56:	0976      	lsrs	r6, r6, #5
   22c58:	d025      	beq.n	22ca6 <configure_pins+0x4f6>
   22c5a:	2e01      	cmp	r6, #1
   22c5c:	d026      	beq.n	22cac <configure_pins+0x4fc>
            NRFX_ASSERT(0);
   22c5e:	4e6a      	ldr	r6, [pc, #424]	; (22e08 <configure_pins+0x658>)
   22c60:	f240 232e 	movw	r3, #558	; 0x22e
   22c64:	4632      	mov	r2, r6
   22c66:	4969      	ldr	r1, [pc, #420]	; (22e0c <configure_pins+0x65c>)
   22c68:	4869      	ldr	r0, [pc, #420]	; (22e10 <configure_pins+0x660>)
   22c6a:	f009 fa6d 	bl	2c148 <printk>
   22c6e:	f240 212e 	movw	r1, #558	; 0x22e
   22c72:	4630      	mov	r0, r6
   22c74:	f009 fc6d 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22c78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22c7c:	e017      	b.n	22cae <configure_pins+0x4fe>
            mask = P0_FEATURE_PINS_PRESENT;
   22c7e:	f04f 33ff 	mov.w	r3, #4294967295
   22c82:	e7e0      	b.n	22c46 <configure_pins+0x496>
    switch (port)
   22c84:	2300      	movs	r3, #0
   22c86:	e7de      	b.n	22c46 <configure_pins+0x496>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22c88:	f8df 917c 	ldr.w	r9, [pc, #380]	; 22e08 <configure_pins+0x658>
   22c8c:	f240 2329 	movw	r3, #553	; 0x229
   22c90:	464a      	mov	r2, r9
   22c92:	4960      	ldr	r1, [pc, #384]	; (22e14 <configure_pins+0x664>)
   22c94:	485e      	ldr	r0, [pc, #376]	; (22e10 <configure_pins+0x660>)
   22c96:	f009 fa57 	bl	2c148 <printk>
   22c9a:	f240 2129 	movw	r1, #553	; 0x229
   22c9e:	4648      	mov	r0, r9
   22ca0:	f009 fc57 	bl	2c552 <assert_post_action>
   22ca4:	e7d5      	b.n	22c52 <configure_pins+0x4a2>
        case 0: return NRF_P0;
   22ca6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22caa:	e000      	b.n	22cae <configure_pins+0x4fe>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22cac:	4a5a      	ldr	r2, [pc, #360]	; (22e18 <configure_pins+0x668>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22cae:	2301      	movs	r3, #1
   22cb0:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTSET = set_mask;
   22cb4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   22cb8:	e79c      	b.n	22bf4 <configure_pins+0x444>
            mask = P0_FEATURE_PINS_PRESENT;
   22cba:	f04f 33ff 	mov.w	r3, #4294967295
   22cbe:	e7a0      	b.n	22c02 <configure_pins+0x452>
    switch (port)
   22cc0:	2300      	movs	r3, #0
   22cc2:	e79e      	b.n	22c02 <configure_pins+0x452>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22cc4:	f8df 9140 	ldr.w	r9, [pc, #320]	; 22e08 <configure_pins+0x658>
   22cc8:	f240 2329 	movw	r3, #553	; 0x229
   22ccc:	464a      	mov	r2, r9
   22cce:	4951      	ldr	r1, [pc, #324]	; (22e14 <configure_pins+0x664>)
   22cd0:	484f      	ldr	r0, [pc, #316]	; (22e10 <configure_pins+0x660>)
   22cd2:	f009 fa39 	bl	2c148 <printk>
   22cd6:	f240 2129 	movw	r1, #553	; 0x229
   22cda:	4648      	mov	r0, r9
   22cdc:	f009 fc39 	bl	2c552 <assert_post_action>
   22ce0:	e795      	b.n	22c0e <configure_pins+0x45e>
        case 0: return NRF_P0;
   22ce2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22ce6:	e000      	b.n	22cea <configure_pins+0x53a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22ce8:	4a4b      	ldr	r2, [pc, #300]	; (22e18 <configure_pins+0x668>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22cea:	f048 0303 	orr.w	r3, r8, #3
    reg->PIN_CNF[pin_number] = cnf;
   22cee:	f509 79e0 	add.w	r9, r9, #448	; 0x1c0
   22cf2:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   22cf6:	e640      	b.n	2297a <configure_pins+0x1ca>
    switch (port)
   22cf8:	0973      	lsrs	r3, r6, #5
   22cfa:	d01f      	beq.n	22d3c <configure_pins+0x58c>
   22cfc:	2b01      	cmp	r3, #1
   22cfe:	d120      	bne.n	22d42 <configure_pins+0x592>
            mask = P1_FEATURE_PINS_PRESENT;
   22d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   22d04:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22d08:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22d0a:	f013 0f01 	tst.w	r3, #1
   22d0e:	d01a      	beq.n	22d46 <configure_pins+0x596>
    *p_pin = pin_number & 0x1F;
   22d10:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22d14:	0976      	lsrs	r6, r6, #5
   22d16:	d025      	beq.n	22d64 <configure_pins+0x5b4>
   22d18:	2e01      	cmp	r6, #1
   22d1a:	d026      	beq.n	22d6a <configure_pins+0x5ba>
            NRFX_ASSERT(0);
   22d1c:	4e3a      	ldr	r6, [pc, #232]	; (22e08 <configure_pins+0x658>)
   22d1e:	f240 232e 	movw	r3, #558	; 0x22e
   22d22:	4632      	mov	r2, r6
   22d24:	4939      	ldr	r1, [pc, #228]	; (22e0c <configure_pins+0x65c>)
   22d26:	483a      	ldr	r0, [pc, #232]	; (22e10 <configure_pins+0x660>)
   22d28:	f009 fa0e 	bl	2c148 <printk>
   22d2c:	f240 212e 	movw	r1, #558	; 0x22e
   22d30:	4630      	mov	r0, r6
   22d32:	f009 fc0e 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22d36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22d3a:	e017      	b.n	22d6c <configure_pins+0x5bc>
            mask = P0_FEATURE_PINS_PRESENT;
   22d3c:	f04f 33ff 	mov.w	r3, #4294967295
   22d40:	e7e0      	b.n	22d04 <configure_pins+0x554>
    switch (port)
   22d42:	2300      	movs	r3, #0
   22d44:	e7de      	b.n	22d04 <configure_pins+0x554>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22d46:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 22e08 <configure_pins+0x658>
   22d4a:	f240 2329 	movw	r3, #553	; 0x229
   22d4e:	464a      	mov	r2, r9
   22d50:	4930      	ldr	r1, [pc, #192]	; (22e14 <configure_pins+0x664>)
   22d52:	482f      	ldr	r0, [pc, #188]	; (22e10 <configure_pins+0x660>)
   22d54:	f009 f9f8 	bl	2c148 <printk>
   22d58:	f240 2129 	movw	r1, #553	; 0x229
   22d5c:	4648      	mov	r0, r9
   22d5e:	f009 fbf8 	bl	2c552 <assert_post_action>
   22d62:	e7d5      	b.n	22d10 <configure_pins+0x560>
        case 0: return NRF_P0;
   22d64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22d68:	e000      	b.n	22d6c <configure_pins+0x5bc>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22d6a:	4a2b      	ldr	r2, [pc, #172]	; (22e18 <configure_pins+0x668>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22d6c:	2301      	movs	r3, #1
   22d6e:	fa03 f309 	lsl.w	r3, r3, r9
    p_reg->OUTSET = set_mask;
   22d72:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg(p_config->dcx_pin,
   22d76:	7be6      	ldrb	r6, [r4, #15]
    switch (port)
   22d78:	0973      	lsrs	r3, r6, #5
   22d7a:	d01f      	beq.n	22dbc <configure_pins+0x60c>
   22d7c:	2b01      	cmp	r3, #1
   22d7e:	d120      	bne.n	22dc2 <configure_pins+0x612>
            mask = P1_FEATURE_PINS_PRESENT;
   22d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   22d84:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22d88:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22d8a:	f013 0f01 	tst.w	r3, #1
   22d8e:	d01a      	beq.n	22dc6 <configure_pins+0x616>
    *p_pin = pin_number & 0x1F;
   22d90:	f006 091f 	and.w	r9, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22d94:	0976      	lsrs	r6, r6, #5
   22d96:	d025      	beq.n	22de4 <configure_pins+0x634>
   22d98:	2e01      	cmp	r6, #1
   22d9a:	d026      	beq.n	22dea <configure_pins+0x63a>
            NRFX_ASSERT(0);
   22d9c:	4e1a      	ldr	r6, [pc, #104]	; (22e08 <configure_pins+0x658>)
   22d9e:	f240 232e 	movw	r3, #558	; 0x22e
   22da2:	4632      	mov	r2, r6
   22da4:	4919      	ldr	r1, [pc, #100]	; (22e0c <configure_pins+0x65c>)
   22da6:	481a      	ldr	r0, [pc, #104]	; (22e10 <configure_pins+0x660>)
   22da8:	f009 f9ce 	bl	2c148 <printk>
   22dac:	f240 212e 	movw	r1, #558	; 0x22e
   22db0:	4630      	mov	r0, r6
   22db2:	f009 fbce 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   22db6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22dba:	e017      	b.n	22dec <configure_pins+0x63c>
            mask = P0_FEATURE_PINS_PRESENT;
   22dbc:	f04f 33ff 	mov.w	r3, #4294967295
   22dc0:	e7e0      	b.n	22d84 <configure_pins+0x5d4>
    switch (port)
   22dc2:	2300      	movs	r3, #0
   22dc4:	e7de      	b.n	22d84 <configure_pins+0x5d4>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22dc6:	f8df 9040 	ldr.w	r9, [pc, #64]	; 22e08 <configure_pins+0x658>
   22dca:	f240 2329 	movw	r3, #553	; 0x229
   22dce:	464a      	mov	r2, r9
   22dd0:	4910      	ldr	r1, [pc, #64]	; (22e14 <configure_pins+0x664>)
   22dd2:	480f      	ldr	r0, [pc, #60]	; (22e10 <configure_pins+0x660>)
   22dd4:	f009 f9b8 	bl	2c148 <printk>
   22dd8:	f240 2129 	movw	r1, #553	; 0x229
   22ddc:	4648      	mov	r0, r9
   22dde:	f009 fbb8 	bl	2c552 <assert_post_action>
   22de2:	e7d5      	b.n	22d90 <configure_pins+0x5e0>
        case 0: return NRF_P0;
   22de4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   22de8:	e000      	b.n	22dec <configure_pins+0x63c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22dea:	4a0b      	ldr	r2, [pc, #44]	; (22e18 <configure_pins+0x668>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22dec:	f048 0303 	orr.w	r3, r8, #3
    reg->PIN_CNF[pin_number] = cnf;
   22df0:	f509 79e0 	add.w	r9, r9, #448	; 0x1c0
   22df4:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   22df8:	e5c3      	b.n	22982 <configure_pins+0x1d2>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   22dfa:	f04f 32ff 	mov.w	r2, #4294967295
   22dfe:	e5c9      	b.n	22994 <configure_pins+0x1e4>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   22e00:	f04f 33ff 	mov.w	r3, #4294967295
   22e04:	e5ca      	b.n	2299c <configure_pins+0x1ec>
   22e06:	bf00      	nop
   22e08:	000321d8 	.word	0x000321d8
   22e0c:	000364dc 	.word	0x000364dc
   22e10:	00031df4 	.word	0x00031df4
   22e14:	0003220c 	.word	0x0003220c
   22e18:	50000300 	.word	0x50000300
    p_reg->PSEL.CSN = pin;
   22e1c:	f04f 33ff 	mov.w	r3, #4294967295
   22e20:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   22e24:	2300      	movs	r3, #0
   22e26:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   22e2a:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   22e2e:	792b      	ldrb	r3, [r5, #4]
   22e30:	b923      	cbnz	r3, 22e3c <configure_pins+0x68c>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   22e32:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   22e34:	2bff      	cmp	r3, #255	; 0xff
   22e36:	d003      	beq.n	22e40 <configure_pins+0x690>
    p_reg->PSELDCX = dcx_pin;
   22e38:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
}
   22e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   22e40:	f04f 33ff 	mov.w	r3, #4294967295
   22e44:	e7f8      	b.n	22e38 <configure_pins+0x688>
   22e46:	bf00      	nop

00022e48 <nrfx_spim_init>:
{
   22e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22e4c:	4604      	mov	r4, r0
   22e4e:	4690      	mov	r8, r2
   22e50:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
   22e52:	460d      	mov	r5, r1
   22e54:	2900      	cmp	r1, #0
   22e56:	d059      	beq.n	22f0c <nrfx_spim_init+0xc4>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22e58:	7926      	ldrb	r6, [r4, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   22e5a:	f8d4 9000 	ldr.w	r9, [r4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22e5e:	493d      	ldr	r1, [pc, #244]	; (22f54 <nrfx_spim_init+0x10c>)
   22e60:	eb01 1146 	add.w	r1, r1, r6, lsl #5
   22e64:	7f0b      	ldrb	r3, [r1, #28]
   22e66:	2b00      	cmp	r3, #0
   22e68:	d16f      	bne.n	22f4a <nrfx_spim_init+0x102>
    if (
   22e6a:	2e00      	cmp	r6, #0
   22e6c:	d16f      	bne.n	22f4e <nrfx_spim_init+0x106>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   22e6e:	68ab      	ldr	r3, [r5, #8]
   22e70:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
   22e74:	d058      	beq.n	22f28 <nrfx_spim_init+0xe0>
   22e76:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
   22e7a:	d055      	beq.n	22f28 <nrfx_spim_init+0xe0>
    p_cb->handler = handler;
   22e7c:	4935      	ldr	r1, [pc, #212]	; (22f54 <nrfx_spim_init+0x10c>)
   22e7e:	0173      	lsls	r3, r6, #5
   22e80:	eb01 1246 	add.w	r2, r1, r6, lsl #5
   22e84:	f841 8003 	str.w	r8, [r1, r3]
    p_cb->p_context = p_context;
   22e88:	6057      	str	r7, [r2, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   22e8a:	7ce8      	ldrb	r0, [r5, #19]
   22e8c:	7f91      	ldrb	r1, [r2, #30]
   22e8e:	f360 0100 	bfi	r1, r0, #0, #1
   22e92:	7791      	strb	r1, [r2, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   22e94:	7928      	ldrb	r0, [r5, #4]
   22e96:	b2c9      	uxtb	r1, r1
   22e98:	f360 0141 	bfi	r1, r0, #1, #1
   22e9c:	7791      	strb	r1, [r2, #30]
    p_cb->use_hw_ss = p_config->use_hw_ss;
   22e9e:	7c68      	ldrb	r0, [r5, #17]
   22ea0:	b2c9      	uxtb	r1, r1
   22ea2:	f360 0182 	bfi	r1, r0, #2, #1
   22ea6:	7791      	strb	r1, [r2, #30]
    p_cb->ss_pin = p_config->ss_pin;
   22ea8:	78eb      	ldrb	r3, [r5, #3]
   22eaa:	77d3      	strb	r3, [r2, #31]
    configure_pins(p_instance, p_config);
   22eac:	4629      	mov	r1, r5
   22eae:	4620      	mov	r0, r4
   22eb0:	f7ff fc7e 	bl	227b0 <configure_pins>
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   22eb4:	7c2b      	ldrb	r3, [r5, #16]
    p_reg->IFTIMING.RXDELAY = rxdelay;
   22eb6:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
    nrf_spim_frequency_set(p_spim, p_config->frequency);
   22eba:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = (uint32_t)frequency;
   22ebc:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   22ec0:	7b2a      	ldrb	r2, [r5, #12]
   22ec2:	7b6b      	ldrb	r3, [r5, #13]
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   22ec4:	3b00      	subs	r3, #0
   22ec6:	bf18      	it	ne
   22ec8:	2301      	movne	r3, #1
    switch (spi_mode)
   22eca:	2a02      	cmp	r2, #2
   22ecc:	d037      	beq.n	22f3e <nrfx_spim_init+0xf6>
   22ece:	2a03      	cmp	r2, #3
   22ed0:	d038      	beq.n	22f44 <nrfx_spim_init+0xfc>
   22ed2:	2a01      	cmp	r2, #1
   22ed4:	d030      	beq.n	22f38 <nrfx_spim_init+0xf0>
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   22ed6:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
    nrf_spim_orc_set(p_spim, p_config->orc);
   22eda:	79ab      	ldrb	r3, [r5, #6]
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   22edc:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   22ee0:	2307      	movs	r3, #7
   22ee2:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500
    if (p_cb->handler)
   22ee6:	0173      	lsls	r3, r6, #5
   22ee8:	4a1a      	ldr	r2, [pc, #104]	; (22f54 <nrfx_spim_init+0x10c>)
   22eea:	58d3      	ldr	r3, [r2, r3]
   22eec:	b123      	cbz	r3, 22ef8 <nrfx_spim_init+0xb0>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   22eee:	6820      	ldr	r0, [r4, #0]
   22ef0:	f340 3007 	sbfx	r0, r0, #12, #8
   22ef4:	f7f2 f906 	bl	15104 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   22ef8:	4b16      	ldr	r3, [pc, #88]	; (22f54 <nrfx_spim_init+0x10c>)
   22efa:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   22efe:	2300      	movs	r3, #0
   22f00:	7773      	strb	r3, [r6, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22f02:	2301      	movs	r3, #1
   22f04:	7733      	strb	r3, [r6, #28]
    return err_code;
   22f06:	4814      	ldr	r0, [pc, #80]	; (22f58 <nrfx_spim_init+0x110>)
}
   22f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT(p_config);
   22f0c:	4e13      	ldr	r6, [pc, #76]	; (22f5c <nrfx_spim_init+0x114>)
   22f0e:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   22f12:	4632      	mov	r2, r6
   22f14:	4912      	ldr	r1, [pc, #72]	; (22f60 <nrfx_spim_init+0x118>)
   22f16:	4813      	ldr	r0, [pc, #76]	; (22f64 <nrfx_spim_init+0x11c>)
   22f18:	f009 f916 	bl	2c148 <printk>
   22f1c:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   22f20:	4630      	mov	r0, r6
   22f22:	f009 fb16 	bl	2c552 <assert_post_action>
   22f26:	e797      	b.n	22e58 <nrfx_spim_init+0x10>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   22f28:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
   22f2c:	d0a6      	beq.n	22e7c <nrfx_spim_init+0x34>
   22f2e:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
   22f32:	d0a3      	beq.n	22e7c <nrfx_spim_init+0x34>
        return err_code;
   22f34:	480c      	ldr	r0, [pc, #48]	; (22f68 <nrfx_spim_init+0x120>)
   22f36:	e7e7      	b.n	22f08 <nrfx_spim_init+0xc0>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   22f38:	f043 0302 	orr.w	r3, r3, #2
        break;
   22f3c:	e7cb      	b.n	22ed6 <nrfx_spim_init+0x8e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   22f3e:	f043 0304 	orr.w	r3, r3, #4
        break;
   22f42:	e7c8      	b.n	22ed6 <nrfx_spim_init+0x8e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   22f44:	f043 0306 	orr.w	r3, r3, #6
        break;
   22f48:	e7c5      	b.n	22ed6 <nrfx_spim_init+0x8e>
        return err_code;
   22f4a:	4808      	ldr	r0, [pc, #32]	; (22f6c <nrfx_spim_init+0x124>)
   22f4c:	e7dc      	b.n	22f08 <nrfx_spim_init+0xc0>
        return err_code;
   22f4e:	4806      	ldr	r0, [pc, #24]	; (22f68 <nrfx_spim_init+0x120>)
   22f50:	e7da      	b.n	22f08 <nrfx_spim_init+0xc0>
   22f52:	bf00      	nop
   22f54:	2000358c 	.word	0x2000358c
   22f58:	0bad0000 	.word	0x0bad0000
   22f5c:	00035958 	.word	0x00035958
   22f60:	00035890 	.word	0x00035890
   22f64:	00031df4 	.word	0x00031df4
   22f68:	0bad0003 	.word	0x0bad0003
   22f6c:	0bad0005 	.word	0x0bad0005

00022f70 <nrfx_spim_uninit>:
{
   22f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f72:	4606      	mov	r6, r0
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22f74:	7904      	ldrb	r4, [r0, #4]
   22f76:	4f4c      	ldr	r7, [pc, #304]	; (230a8 <nrfx_spim_uninit+0x138>)
   22f78:	eb07 1744 	add.w	r7, r7, r4, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   22f7c:	7f3b      	ldrb	r3, [r7, #28]
   22f7e:	b31b      	cbz	r3, 22fc8 <nrfx_spim_uninit+0x58>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   22f80:	6835      	ldr	r5, [r6, #0]
    if (p_cb->handler)
   22f82:	0163      	lsls	r3, r4, #5
   22f84:	4a48      	ldr	r2, [pc, #288]	; (230a8 <nrfx_spim_uninit+0x138>)
   22f86:	58d3      	ldr	r3, [r2, r3]
   22f88:	b15b      	cbz	r3, 22fa2 <nrfx_spim_uninit+0x32>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   22f8a:	f345 3007 	sbfx	r0, r5, #12, #8
   22f8e:	f7f2 f8c9 	bl	15124 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   22f92:	4b46      	ldr	r3, [pc, #280]	; (230ac <nrfx_spim_uninit+0x13c>)
   22f94:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        if (p_cb->transfer_in_progress)
   22f98:	4b43      	ldr	r3, [pc, #268]	; (230a8 <nrfx_spim_uninit+0x138>)
   22f9a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   22f9e:	7f5b      	ldrb	r3, [r3, #29]
   22fa0:	bb03      	cbnz	r3, 22fe4 <nrfx_spim_uninit+0x74>
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   22fa2:	2300      	movs	r3, #0
   22fa4:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   22fa8:	4b3f      	ldr	r3, [pc, #252]	; (230a8 <nrfx_spim_uninit+0x138>)
   22faa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   22fae:	7f9b      	ldrb	r3, [r3, #30]
   22fb0:	f013 0f01 	tst.w	r3, #1
   22fb4:	d01b      	beq.n	22fee <nrfx_spim_uninit+0x7e>
    if (p_spim == NRF_SPIM3)
   22fb6:	4b3e      	ldr	r3, [pc, #248]	; (230b0 <nrfx_spim_uninit+0x140>)
   22fb8:	429d      	cmp	r5, r3
   22fba:	d070      	beq.n	2309e <nrfx_spim_uninit+0x12e>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   22fbc:	4b3a      	ldr	r3, [pc, #232]	; (230a8 <nrfx_spim_uninit+0x138>)
   22fbe:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   22fc2:	2300      	movs	r3, #0
   22fc4:	7723      	strb	r3, [r4, #28]
}
   22fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   22fc8:	4d3a      	ldr	r5, [pc, #232]	; (230b4 <nrfx_spim_uninit+0x144>)
   22fca:	f240 230f 	movw	r3, #527	; 0x20f
   22fce:	462a      	mov	r2, r5
   22fd0:	4939      	ldr	r1, [pc, #228]	; (230b8 <nrfx_spim_uninit+0x148>)
   22fd2:	483a      	ldr	r0, [pc, #232]	; (230bc <nrfx_spim_uninit+0x14c>)
   22fd4:	f009 f8b8 	bl	2c148 <printk>
   22fd8:	f240 210f 	movw	r1, #527	; 0x20f
   22fdc:	4628      	mov	r0, r5
   22fde:	f009 fab8 	bl	2c552 <assert_post_action>
   22fe2:	e7cd      	b.n	22f80 <nrfx_spim_uninit+0x10>
            spim_abort(p_spim, p_cb);
   22fe4:	4639      	mov	r1, r7
   22fe6:	4628      	mov	r0, r5
   22fe8:	f00d fa03 	bl	303f2 <spim_abort>
   22fec:	e7d9      	b.n	22fa2 <nrfx_spim_uninit+0x32>
    return p_reg->PSEL.SCK;
   22fee:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   22ff2:	f7ff fa8b 	bl	2250c <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   22ff6:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   22ffa:	f7ff fa87 	bl	2250c <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   22ffe:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   23002:	f7ff fa83 	bl	2250c <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   23006:	7933      	ldrb	r3, [r6, #4]
   23008:	b33b      	cbz	r3, 2305a <nrfx_spim_uninit+0xea>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2300a:	4b27      	ldr	r3, [pc, #156]	; (230a8 <nrfx_spim_uninit+0x138>)
   2300c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   23010:	7fde      	ldrb	r6, [r3, #31]
   23012:	2eff      	cmp	r6, #255	; 0xff
   23014:	d0cf      	beq.n	22fb6 <nrfx_spim_uninit+0x46>
    switch (port)
   23016:	0973      	lsrs	r3, r6, #5
   23018:	d024      	beq.n	23064 <nrfx_spim_uninit+0xf4>
   2301a:	2b01      	cmp	r3, #1
   2301c:	d125      	bne.n	2306a <nrfx_spim_uninit+0xfa>
            mask = P1_FEATURE_PINS_PRESENT;
   2301e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   23022:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
   23026:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   23028:	f013 0f01 	tst.w	r3, #1
   2302c:	d01f      	beq.n	2306e <nrfx_spim_uninit+0xfe>
    *p_pin = pin_number & 0x1F;
   2302e:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23032:	0976      	lsrs	r6, r6, #5
   23034:	d029      	beq.n	2308a <nrfx_spim_uninit+0x11a>
   23036:	2e01      	cmp	r6, #1
   23038:	d02a      	beq.n	23090 <nrfx_spim_uninit+0x120>
            NRFX_ASSERT(0);
   2303a:	4e21      	ldr	r6, [pc, #132]	; (230c0 <nrfx_spim_uninit+0x150>)
   2303c:	f240 232e 	movw	r3, #558	; 0x22e
   23040:	4632      	mov	r2, r6
   23042:	4920      	ldr	r1, [pc, #128]	; (230c4 <nrfx_spim_uninit+0x154>)
   23044:	481d      	ldr	r0, [pc, #116]	; (230bc <nrfx_spim_uninit+0x14c>)
   23046:	f009 f87f 	bl	2c148 <printk>
   2304a:	f240 212e 	movw	r1, #558	; 0x22e
   2304e:	4630      	mov	r0, r6
   23050:	f009 fa7f 	bl	2c552 <assert_post_action>
        case 0: return NRF_P0;
   23054:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   23058:	e01b      	b.n	23092 <nrfx_spim_uninit+0x122>
    return p_reg->PSELDCX;
   2305a:	f8d5 056c 	ldr.w	r0, [r5, #1388]	; 0x56c
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   2305e:	f7ff fa55 	bl	2250c <spim_pin_uninit>
   23062:	e7d2      	b.n	2300a <nrfx_spim_uninit+0x9a>
            mask = P0_FEATURE_PINS_PRESENT;
   23064:	f04f 33ff 	mov.w	r3, #4294967295
   23068:	e7db      	b.n	23022 <nrfx_spim_uninit+0xb2>
    switch (port)
   2306a:	2300      	movs	r3, #0
   2306c:	e7d9      	b.n	23022 <nrfx_spim_uninit+0xb2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2306e:	4f14      	ldr	r7, [pc, #80]	; (230c0 <nrfx_spim_uninit+0x150>)
   23070:	f240 2329 	movw	r3, #553	; 0x229
   23074:	463a      	mov	r2, r7
   23076:	4914      	ldr	r1, [pc, #80]	; (230c8 <nrfx_spim_uninit+0x158>)
   23078:	4810      	ldr	r0, [pc, #64]	; (230bc <nrfx_spim_uninit+0x14c>)
   2307a:	f009 f865 	bl	2c148 <printk>
   2307e:	f240 2129 	movw	r1, #553	; 0x229
   23082:	4638      	mov	r0, r7
   23084:	f009 fa65 	bl	2c552 <assert_post_action>
   23088:	e7d1      	b.n	2302e <nrfx_spim_uninit+0xbe>
        case 0: return NRF_P0;
   2308a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2308e:	e000      	b.n	23092 <nrfx_spim_uninit+0x122>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23090:	4b0e      	ldr	r3, [pc, #56]	; (230cc <nrfx_spim_uninit+0x15c>)
    reg->PIN_CNF[pin_number] = cnf;
   23092:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   23096:	2202      	movs	r2, #2
   23098:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
}
   2309c:	e78b      	b.n	22fb6 <nrfx_spim_uninit+0x46>
        *(volatile uint32_t *)0x4002F004 = 1;
   2309e:	3304      	adds	r3, #4
   230a0:	2201      	movs	r2, #1
   230a2:	601a      	str	r2, [r3, #0]
   230a4:	e78a      	b.n	22fbc <nrfx_spim_uninit+0x4c>
   230a6:	bf00      	nop
   230a8:	2000358c 	.word	0x2000358c
   230ac:	00080152 	.word	0x00080152
   230b0:	4002f000 	.word	0x4002f000
   230b4:	00035958 	.word	0x00035958
   230b8:	0003589c 	.word	0x0003589c
   230bc:	00031df4 	.word	0x00031df4
   230c0:	000321d8 	.word	0x000321d8
   230c4:	000364dc 	.word	0x000364dc
   230c8:	0003220c 	.word	0x0003220c
   230cc:	50000300 	.word	0x50000300

000230d0 <nrfx_spim_xfer>:
{
   230d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   230d4:	4606      	mov	r6, r0
   230d6:	460c      	mov	r4, r1
   230d8:	4691      	mov	r9, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   230da:	7907      	ldrb	r7, [r0, #4]
   230dc:	4b4c      	ldr	r3, [pc, #304]	; (23210 <nrfx_spim_xfer+0x140>)
   230de:	eb03 1847 	add.w	r8, r3, r7, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   230e2:	f898 301c 	ldrb.w	r3, [r8, #28]
   230e6:	2b00      	cmp	r3, #0
   230e8:	d051      	beq.n	2318e <nrfx_spim_xfer+0xbe>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   230ea:	6823      	ldr	r3, [r4, #0]
   230ec:	2b00      	cmp	r3, #0
   230ee:	d05c      	beq.n	231aa <nrfx_spim_xfer+0xda>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   230f0:	68a3      	ldr	r3, [r4, #8]
   230f2:	2b00      	cmp	r3, #0
   230f4:	d06a      	beq.n	231cc <nrfx_spim_xfer+0xfc>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   230f6:	7933      	ldrb	r3, [r6, #4]
   230f8:	b93b      	cbnz	r3, 2310a <nrfx_spim_xfer+0x3a>
   230fa:	68e3      	ldr	r3, [r4, #12]
   230fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   23100:	d203      	bcs.n	2310a <nrfx_spim_xfer+0x3a>
   23102:	6863      	ldr	r3, [r4, #4]
   23104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   23108:	d30c      	bcc.n	23124 <nrfx_spim_xfer+0x54>
   2310a:	4d42      	ldr	r5, [pc, #264]	; (23214 <nrfx_spim_xfer+0x144>)
   2310c:	f240 23e1 	movw	r3, #737	; 0x2e1
   23110:	462a      	mov	r2, r5
   23112:	4941      	ldr	r1, [pc, #260]	; (23218 <nrfx_spim_xfer+0x148>)
   23114:	4841      	ldr	r0, [pc, #260]	; (2321c <nrfx_spim_xfer+0x14c>)
   23116:	f009 f817 	bl	2c148 <printk>
   2311a:	f240 21e1 	movw	r1, #737	; 0x2e1
   2311e:	4628      	mov	r0, r5
   23120:	f009 fa17 	bl	2c552 <assert_post_action>
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   23124:	f019 0f08 	tst.w	r9, #8
   23128:	d00c      	beq.n	23144 <nrfx_spim_xfer+0x74>
   2312a:	4b39      	ldr	r3, [pc, #228]	; (23210 <nrfx_spim_xfer+0x140>)
   2312c:	eb03 1347 	add.w	r3, r3, r7, lsl #5
   23130:	7f9b      	ldrb	r3, [r3, #30]
   23132:	f013 0f04 	tst.w	r3, #4
   23136:	d105      	bne.n	23144 <nrfx_spim_xfer+0x74>
   23138:	4b35      	ldr	r3, [pc, #212]	; (23210 <nrfx_spim_xfer+0x140>)
   2313a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
   2313e:	7fdb      	ldrb	r3, [r3, #31]
   23140:	2bff      	cmp	r3, #255	; 0xff
   23142:	d154      	bne.n	231ee <nrfx_spim_xfer+0x11e>
    if (p_cb->transfer_in_progress)
   23144:	4b32      	ldr	r3, [pc, #200]	; (23210 <nrfx_spim_xfer+0x140>)
   23146:	eb03 1347 	add.w	r3, r3, r7, lsl #5
   2314a:	7f5b      	ldrb	r3, [r3, #29]
   2314c:	2b00      	cmp	r3, #0
   2314e:	d15c      	bne.n	2320a <nrfx_spim_xfer+0x13a>
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   23150:	017b      	lsls	r3, r7, #5
   23152:	4a2f      	ldr	r2, [pc, #188]	; (23210 <nrfx_spim_xfer+0x140>)
   23154:	58d3      	ldr	r3, [r2, r3]
   23156:	b133      	cbz	r3, 23166 <nrfx_spim_xfer+0x96>
   23158:	f019 0f14 	tst.w	r9, #20
   2315c:	d103      	bne.n	23166 <nrfx_spim_xfer+0x96>
            p_cb->transfer_in_progress = true;
   2315e:	eb02 1347 	add.w	r3, r2, r7, lsl #5
   23162:	2201      	movs	r2, #1
   23164:	775a      	strb	r2, [r3, #29]
    p_cb->evt.xfer_desc = *p_xfer_desc;
   23166:	4d2a      	ldr	r5, [pc, #168]	; (23210 <nrfx_spim_xfer+0x140>)
   23168:	eb05 1547 	add.w	r5, r5, r7, lsl #5
   2316c:	350c      	adds	r5, #12
   2316e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   23172:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    set_ss_pin_state(p_cb, true);
   23176:	2101      	movs	r1, #1
   23178:	4640      	mov	r0, r8
   2317a:	f7ff fa17 	bl	225ac <set_ss_pin_state>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   2317e:	464b      	mov	r3, r9
   23180:	4622      	mov	r2, r4
   23182:	4641      	mov	r1, r8
   23184:	6830      	ldr	r0, [r6, #0]
   23186:	f7ff faa5 	bl	226d4 <spim_xfer>
}
   2318a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2318e:	4d21      	ldr	r5, [pc, #132]	; (23214 <nrfx_spim_xfer+0x144>)
   23190:	f240 23de 	movw	r3, #734	; 0x2de
   23194:	462a      	mov	r2, r5
   23196:	4922      	ldr	r1, [pc, #136]	; (23220 <nrfx_spim_xfer+0x150>)
   23198:	4820      	ldr	r0, [pc, #128]	; (2321c <nrfx_spim_xfer+0x14c>)
   2319a:	f008 ffd5 	bl	2c148 <printk>
   2319e:	f240 21de 	movw	r1, #734	; 0x2de
   231a2:	4628      	mov	r0, r5
   231a4:	f009 f9d5 	bl	2c552 <assert_post_action>
   231a8:	e79f      	b.n	230ea <nrfx_spim_xfer+0x1a>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   231aa:	6863      	ldr	r3, [r4, #4]
   231ac:	2b00      	cmp	r3, #0
   231ae:	d09f      	beq.n	230f0 <nrfx_spim_xfer+0x20>
   231b0:	4d18      	ldr	r5, [pc, #96]	; (23214 <nrfx_spim_xfer+0x144>)
   231b2:	f240 23df 	movw	r3, #735	; 0x2df
   231b6:	462a      	mov	r2, r5
   231b8:	491a      	ldr	r1, [pc, #104]	; (23224 <nrfx_spim_xfer+0x154>)
   231ba:	4818      	ldr	r0, [pc, #96]	; (2321c <nrfx_spim_xfer+0x14c>)
   231bc:	f008 ffc4 	bl	2c148 <printk>
   231c0:	f240 21df 	movw	r1, #735	; 0x2df
   231c4:	4628      	mov	r0, r5
   231c6:	f009 f9c4 	bl	2c552 <assert_post_action>
   231ca:	e791      	b.n	230f0 <nrfx_spim_xfer+0x20>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   231cc:	68e3      	ldr	r3, [r4, #12]
   231ce:	2b00      	cmp	r3, #0
   231d0:	d091      	beq.n	230f6 <nrfx_spim_xfer+0x26>
   231d2:	4d10      	ldr	r5, [pc, #64]	; (23214 <nrfx_spim_xfer+0x144>)
   231d4:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   231d8:	462a      	mov	r2, r5
   231da:	4913      	ldr	r1, [pc, #76]	; (23228 <nrfx_spim_xfer+0x158>)
   231dc:	480f      	ldr	r0, [pc, #60]	; (2321c <nrfx_spim_xfer+0x14c>)
   231de:	f008 ffb3 	bl	2c148 <printk>
   231e2:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   231e6:	4628      	mov	r0, r5
   231e8:	f009 f9b3 	bl	2c552 <assert_post_action>
   231ec:	e783      	b.n	230f6 <nrfx_spim_xfer+0x26>
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   231ee:	4d09      	ldr	r5, [pc, #36]	; (23214 <nrfx_spim_xfer+0x144>)
   231f0:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   231f4:	462a      	mov	r2, r5
   231f6:	490d      	ldr	r1, [pc, #52]	; (2322c <nrfx_spim_xfer+0x15c>)
   231f8:	4808      	ldr	r0, [pc, #32]	; (2321c <nrfx_spim_xfer+0x14c>)
   231fa:	f008 ffa5 	bl	2c148 <printk>
   231fe:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   23202:	4628      	mov	r0, r5
   23204:	f009 f9a5 	bl	2c552 <assert_post_action>
   23208:	e79c      	b.n	23144 <nrfx_spim_xfer+0x74>
        return err_code;
   2320a:	4809      	ldr	r0, [pc, #36]	; (23230 <nrfx_spim_xfer+0x160>)
   2320c:	e7bd      	b.n	2318a <nrfx_spim_xfer+0xba>
   2320e:	bf00      	nop
   23210:	2000358c 	.word	0x2000358c
   23214:	00035958 	.word	0x00035958
   23218:	00035994 	.word	0x00035994
   2321c:	00031df4 	.word	0x00031df4
   23220:	0003589c 	.word	0x0003589c
   23224:	000358c8 	.word	0x000358c8
   23228:	00035910 	.word	0x00035910
   2322c:	00035a38 	.word	0x00035a38
   23230:	0bad000b 	.word	0x0bad000b

00023234 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   23234:	b508      	push	{r3, lr}
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
   23236:	4902      	ldr	r1, [pc, #8]	; (23240 <nrfx_spim_3_irq_handler+0xc>)
   23238:	4802      	ldr	r0, [pc, #8]	; (23244 <nrfx_spim_3_irq_handler+0x10>)
   2323a:	f7ff fa95 	bl	22768 <irq_handler>
}
   2323e:	bd08      	pop	{r3, pc}
   23240:	2000358c 	.word	0x2000358c
   23244:	4002f000 	.word	0x4002f000

00023248 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   23248:	4b03      	ldr	r3, [pc, #12]	; (23258 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   2324a:	4a04      	ldr	r2, [pc, #16]	; (2325c <z_device_state_init+0x14>)
   2324c:	4293      	cmp	r3, r2
   2324e:	d201      	bcs.n	23254 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   23250:	3318      	adds	r3, #24
   23252:	e7fa      	b.n	2324a <z_device_state_init+0x2>
	}
}
   23254:	4770      	bx	lr
   23256:	bf00      	nop
   23258:	00031674 	.word	0x00031674
   2325c:	0003174c 	.word	0x0003174c

00023260 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   23260:	b570      	push	{r4, r5, r6, lr}
   23262:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23264:	4b11      	ldr	r3, [pc, #68]	; (232ac <z_sys_init_run_level+0x4c>)
   23266:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2326a:	e009      	b.n	23280 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   2326c:	4240      	negs	r0, r0
   2326e:	e017      	b.n	232a0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   23270:	68eb      	ldr	r3, [r5, #12]
   23272:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   23274:	68ea      	ldr	r2, [r5, #12]
   23276:	7853      	ldrb	r3, [r2, #1]
   23278:	f043 0301 	orr.w	r3, r3, #1
   2327c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2327e:	3408      	adds	r4, #8
   23280:	1c73      	adds	r3, r6, #1
   23282:	4a0a      	ldr	r2, [pc, #40]	; (232ac <z_sys_init_run_level+0x4c>)
   23284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   23288:	42a3      	cmp	r3, r4
   2328a:	d90d      	bls.n	232a8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   2328c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   2328e:	6823      	ldr	r3, [r4, #0]
   23290:	4628      	mov	r0, r5
   23292:	4798      	blx	r3
		if (dev != NULL) {
   23294:	2d00      	cmp	r5, #0
   23296:	d0f2      	beq.n	2327e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   23298:	2800      	cmp	r0, #0
   2329a:	d0eb      	beq.n	23274 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   2329c:	2800      	cmp	r0, #0
   2329e:	dbe5      	blt.n	2326c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   232a0:	28ff      	cmp	r0, #255	; 0xff
   232a2:	dde5      	ble.n	23270 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   232a4:	20ff      	movs	r0, #255	; 0xff
   232a6:	e7e3      	b.n	23270 <z_sys_init_run_level+0x10>
		}
	}
}
   232a8:	bd70      	pop	{r4, r5, r6, pc}
   232aa:	bf00      	nop
   232ac:	00035a7c 	.word	0x00035a7c

000232b0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   232b0:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   232b2:	4605      	mov	r5, r0
   232b4:	b328      	cbz	r0, 23302 <z_impl_device_get_binding+0x52>
   232b6:	7803      	ldrb	r3, [r0, #0]
   232b8:	b32b      	cbz	r3, 23306 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   232ba:	4c14      	ldr	r4, [pc, #80]	; (2330c <z_impl_device_get_binding+0x5c>)
   232bc:	e000      	b.n	232c0 <z_impl_device_get_binding+0x10>
   232be:	3418      	adds	r4, #24
   232c0:	4b13      	ldr	r3, [pc, #76]	; (23310 <z_impl_device_get_binding+0x60>)
   232c2:	429c      	cmp	r4, r3
   232c4:	d008      	beq.n	232d8 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   232c6:	4620      	mov	r0, r4
   232c8:	f00d f8b2 	bl	30430 <z_device_ready>
   232cc:	2800      	cmp	r0, #0
   232ce:	d0f6      	beq.n	232be <z_impl_device_get_binding+0xe>
   232d0:	6823      	ldr	r3, [r4, #0]
   232d2:	42ab      	cmp	r3, r5
   232d4:	d1f3      	bne.n	232be <z_impl_device_get_binding+0xe>
   232d6:	e012      	b.n	232fe <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   232d8:	4c0c      	ldr	r4, [pc, #48]	; (2330c <z_impl_device_get_binding+0x5c>)
   232da:	e000      	b.n	232de <z_impl_device_get_binding+0x2e>
   232dc:	3418      	adds	r4, #24
   232de:	4b0c      	ldr	r3, [pc, #48]	; (23310 <z_impl_device_get_binding+0x60>)
   232e0:	429c      	cmp	r4, r3
   232e2:	d00b      	beq.n	232fc <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   232e4:	4620      	mov	r0, r4
   232e6:	f00d f8a3 	bl	30430 <z_device_ready>
   232ea:	2800      	cmp	r0, #0
   232ec:	d0f6      	beq.n	232dc <z_impl_device_get_binding+0x2c>
   232ee:	6821      	ldr	r1, [r4, #0]
   232f0:	4628      	mov	r0, r5
   232f2:	f7e8 fee9 	bl	c0c8 <strcmp>
   232f6:	2800      	cmp	r0, #0
   232f8:	d1f0      	bne.n	232dc <z_impl_device_get_binding+0x2c>
   232fa:	e000      	b.n	232fe <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   232fc:	2400      	movs	r4, #0
}
   232fe:	4620      	mov	r0, r4
   23300:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   23302:	4604      	mov	r4, r0
   23304:	e7fb      	b.n	232fe <z_impl_device_get_binding+0x4e>
   23306:	2400      	movs	r4, #0
   23308:	e7f9      	b.n	232fe <z_impl_device_get_binding+0x4e>
   2330a:	bf00      	nop
   2330c:	00031674 	.word	0x00031674
   23310:	0003174c 	.word	0x0003174c

00023314 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   23314:	2804      	cmp	r0, #4
   23316:	d80c      	bhi.n	23332 <reason_to_str+0x1e>
   23318:	e8df f000 	tbb	[pc, r0]
   2331c:	07050d03 	.word	0x07050d03
   23320:	09          	.byte	0x09
   23321:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   23322:	4806      	ldr	r0, [pc, #24]	; (2333c <reason_to_str+0x28>)
   23324:	4770      	bx	lr
		return "Stack overflow";
   23326:	4806      	ldr	r0, [pc, #24]	; (23340 <reason_to_str+0x2c>)
   23328:	4770      	bx	lr
		return "Kernel oops";
   2332a:	4806      	ldr	r0, [pc, #24]	; (23344 <reason_to_str+0x30>)
   2332c:	4770      	bx	lr
		return "Kernel panic";
   2332e:	4806      	ldr	r0, [pc, #24]	; (23348 <reason_to_str+0x34>)
   23330:	4770      	bx	lr
	default:
		return "Unknown error";
   23332:	4806      	ldr	r0, [pc, #24]	; (2334c <reason_to_str+0x38>)
   23334:	4770      	bx	lr
		return "Unhandled interrupt";
   23336:	4806      	ldr	r0, [pc, #24]	; (23350 <reason_to_str+0x3c>)
	}
}
   23338:	4770      	bx	lr
   2333a:	bf00      	nop
   2333c:	00035ae4 	.word	0x00035ae4
   23340:	00035ab8 	.word	0x00035ab8
   23344:	00035ac8 	.word	0x00035ac8
   23348:	00035ad4 	.word	0x00035ad4
   2334c:	00035a94 	.word	0x00035a94
   23350:	00035aa4 	.word	0x00035aa4

00023354 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   23354:	b130      	cbz	r0, 23364 <thread_name_get+0x10>
{
   23356:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   23358:	f00d f8bd 	bl	304d6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2335c:	b120      	cbz	r0, 23368 <thread_name_get+0x14>
   2335e:	7803      	ldrb	r3, [r0, #0]
   23360:	b123      	cbz	r3, 2336c <thread_name_get+0x18>
}
   23362:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   23364:	4802      	ldr	r0, [pc, #8]	; (23370 <thread_name_get+0x1c>)
}
   23366:	4770      	bx	lr
		thread_name = "unknown";
   23368:	4801      	ldr	r0, [pc, #4]	; (23370 <thread_name_get+0x1c>)
   2336a:	e7fa      	b.n	23362 <thread_name_get+0xe>
   2336c:	4800      	ldr	r0, [pc, #0]	; (23370 <thread_name_get+0x1c>)
	return thread_name;
   2336e:	e7f8      	b.n	23362 <thread_name_get+0xe>
   23370:	00035af4 	.word	0x00035af4

00023374 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   23374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23378:	b082      	sub	sp, #8
   2337a:	4604      	mov	r4, r0
   2337c:	460e      	mov	r6, r1
	__asm__ volatile(
   2337e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23382:	f3ef 8711 	mrs	r7, BASEPRI
   23386:	f383 8812 	msr	BASEPRI_MAX, r3
   2338a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2338e:	f003 fad7 	bl	26940 <z_impl_z_current_get>
   23392:	4605      	mov	r5, r0
   23394:	4b32      	ldr	r3, [pc, #200]	; (23460 <z_fatal_error+0xec>)
   23396:	4a33      	ldr	r2, [pc, #204]	; (23464 <z_fatal_error+0xf0>)
   23398:	1a9b      	subs	r3, r3, r2
   2339a:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2339c:	f04f 0800 	mov.w	r8, #0
   233a0:	2201      	movs	r2, #1
   233a2:	f362 0802 	bfi	r8, r2, #0, #3
   233a6:	f36f 08c5 	bfc	r8, #3, #3
   233aa:	f363 188f 	bfi	r8, r3, #6, #10
   233ae:	4620      	mov	r0, r4
   233b0:	f7ff ffb0 	bl	23314 <reason_to_str>
   233b4:	4602      	mov	r2, r0
   233b6:	f8ad 8000 	strh.w	r8, [sp]
   233ba:	2300      	movs	r3, #0
   233bc:	4621      	mov	r1, r4
   233be:	482a      	ldr	r0, [pc, #168]	; (23468 <z_fatal_error+0xf4>)
   233c0:	f7f0 fb54 	bl	13a6c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   233c4:	b11e      	cbz	r6, 233ce <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   233c6:	69f3      	ldr	r3, [r6, #28]
   233c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   233cc:	bb3b      	cbnz	r3, 2341e <z_fatal_error+0xaa>
   233ce:	4b24      	ldr	r3, [pc, #144]	; (23460 <z_fatal_error+0xec>)
   233d0:	4a24      	ldr	r2, [pc, #144]	; (23464 <z_fatal_error+0xf0>)
   233d2:	1a9b      	subs	r3, r3, r2
   233d4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   233d6:	f04f 0800 	mov.w	r8, #0
   233da:	2201      	movs	r2, #1
   233dc:	f362 0802 	bfi	r8, r2, #0, #3
   233e0:	f36f 08c5 	bfc	r8, #3, #3
   233e4:	f363 188f 	bfi	r8, r3, #6, #10
   233e8:	4628      	mov	r0, r5
   233ea:	f7ff ffb3 	bl	23354 <thread_name_get>
   233ee:	f7f0 f8e5 	bl	135bc <z_log_strdup>
   233f2:	4602      	mov	r2, r0
   233f4:	4643      	mov	r3, r8
   233f6:	4629      	mov	r1, r5
   233f8:	481c      	ldr	r0, [pc, #112]	; (2346c <z_fatal_error+0xf8>)
   233fa:	f7f0 fab7 	bl	1396c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   233fe:	4631      	mov	r1, r6
   23400:	4620      	mov	r0, r4
   23402:	f7fc fcc7 	bl	1fd94 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   23406:	2c04      	cmp	r4, #4
   23408:	d01a      	beq.n	23440 <z_fatal_error+0xcc>
	__asm__ volatile(
   2340a:	f387 8811 	msr	BASEPRI, r7
   2340e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   23412:	4628      	mov	r0, r5
   23414:	f7f2 fcb0 	bl	15d78 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   23418:	b002      	add	sp, #8
   2341a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2341e:	4b10      	ldr	r3, [pc, #64]	; (23460 <z_fatal_error+0xec>)
   23420:	4a10      	ldr	r2, [pc, #64]	; (23464 <z_fatal_error+0xf0>)
   23422:	1a9b      	subs	r3, r3, r2
   23424:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   23426:	f04f 0100 	mov.w	r1, #0
   2342a:	2201      	movs	r2, #1
   2342c:	f362 0102 	bfi	r1, r2, #0, #3
   23430:	f36f 01c5 	bfc	r1, #3, #3
   23434:	f363 118f 	bfi	r1, r3, #6, #10
   23438:	480d      	ldr	r0, [pc, #52]	; (23470 <z_fatal_error+0xfc>)
   2343a:	f7f0 fa31 	bl	138a0 <log_0>
   2343e:	e7c6      	b.n	233ce <z_fatal_error+0x5a>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   23440:	4c0c      	ldr	r4, [pc, #48]	; (23474 <z_fatal_error+0x100>)
   23442:	238f      	movs	r3, #143	; 0x8f
   23444:	4622      	mov	r2, r4
   23446:	490c      	ldr	r1, [pc, #48]	; (23478 <z_fatal_error+0x104>)
   23448:	480c      	ldr	r0, [pc, #48]	; (2347c <z_fatal_error+0x108>)
   2344a:	f008 fe7d 	bl	2c148 <printk>
   2344e:	480c      	ldr	r0, [pc, #48]	; (23480 <z_fatal_error+0x10c>)
   23450:	f008 fe7a 	bl	2c148 <printk>
   23454:	218f      	movs	r1, #143	; 0x8f
   23456:	4620      	mov	r0, r4
   23458:	f009 f87b 	bl	2c552 <assert_post_action>
   2345c:	e7d5      	b.n	2340a <z_fatal_error+0x96>
   2345e:	bf00      	nop
   23460:	000319a8 	.word	0x000319a8
   23464:	00031908 	.word	0x00031908
   23468:	00035afc 	.word	0x00035afc
   2346c:	00035b48 	.word	0x00035b48
   23470:	00035b24 	.word	0x00035b24
   23474:	00035b60 	.word	0x00035b60
   23478:	00035b84 	.word	0x00035b84
   2347c:	00031df4 	.word	0x00031df4
   23480:	00035ba4 	.word	0x00035ba4

00023484 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   23484:	b5f0      	push	{r4, r5, r6, r7, lr}
   23486:	b089      	sub	sp, #36	; 0x24
   23488:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   2348a:	4b15      	ldr	r3, [pc, #84]	; (234e0 <init_idle_thread+0x5c>)
   2348c:	25b8      	movs	r5, #184	; 0xb8
   2348e:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   23492:	4b14      	ldr	r3, [pc, #80]	; (234e4 <init_idle_thread+0x60>)
   23494:	f44f 76b0 	mov.w	r6, #352	; 0x160
   23498:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   2349c:	af06      	add	r7, sp, #24
   2349e:	4603      	mov	r3, r0
   234a0:	4a11      	ldr	r2, [pc, #68]	; (234e8 <init_idle_thread+0x64>)
   234a2:	2108      	movs	r1, #8
   234a4:	4638      	mov	r0, r7
   234a6:	f008 fe5d 	bl	2c164 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   234aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   234ae:	480f      	ldr	r0, [pc, #60]	; (234ec <init_idle_thread+0x68>)
   234b0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   234b4:	9705      	str	r7, [sp, #20]
   234b6:	2301      	movs	r3, #1
   234b8:	9304      	str	r3, [sp, #16]
   234ba:	230f      	movs	r3, #15
   234bc:	9303      	str	r3, [sp, #12]
   234be:	2300      	movs	r3, #0
   234c0:	9302      	str	r3, [sp, #8]
   234c2:	9301      	str	r3, [sp, #4]
   234c4:	9400      	str	r4, [sp, #0]
   234c6:	4b0a      	ldr	r3, [pc, #40]	; (234f0 <init_idle_thread+0x6c>)
   234c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   234cc:	4631      	mov	r1, r6
   234ce:	4628      	mov	r0, r5
   234d0:	f000 fbba 	bl	23c48 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   234d4:	7b6b      	ldrb	r3, [r5, #13]
   234d6:	f023 0304 	bic.w	r3, r3, #4
   234da:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   234dc:	b009      	add	sp, #36	; 0x24
   234de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   234e0:	20002498 	.word	0x20002498
   234e4:	200067c0 	.word	0x200067c0
   234e8:	00035bdc 	.word	0x00035bdc
   234ec:	200035ac 	.word	0x200035ac
   234f0:	00023f61 	.word	0x00023f61

000234f4 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   234f4:	b570      	push	{r4, r5, r6, lr}
   234f6:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   234f8:	f003 f85a 	bl	265b0 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   234fc:	4d1b      	ldr	r5, [pc, #108]	; (2356c <prepare_multithreading+0x78>)
   234fe:	4b1c      	ldr	r3, [pc, #112]	; (23570 <prepare_multithreading+0x7c>)
   23500:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23502:	4b1c      	ldr	r3, [pc, #112]	; (23574 <prepare_multithreading+0x80>)
   23504:	9305      	str	r3, [sp, #20]
   23506:	2301      	movs	r3, #1
   23508:	9304      	str	r3, [sp, #16]
   2350a:	2400      	movs	r4, #0
   2350c:	9403      	str	r4, [sp, #12]
   2350e:	9402      	str	r4, [sp, #8]
   23510:	9401      	str	r4, [sp, #4]
   23512:	9400      	str	r4, [sp, #0]
   23514:	4b18      	ldr	r3, [pc, #96]	; (23578 <prepare_multithreading+0x84>)
   23516:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2351a:	4918      	ldr	r1, [pc, #96]	; (2357c <prepare_multithreading+0x88>)
   2351c:	4628      	mov	r0, r5
   2351e:	f000 fb93 	bl	23c48 <z_setup_new_thread>
   23522:	4606      	mov	r6, r0
   23524:	7b6b      	ldrb	r3, [r5, #13]
   23526:	f023 0304 	bic.w	r3, r3, #4
   2352a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   2352c:	4628      	mov	r0, r5
   2352e:	f002 fb65 	bl	25bfc <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   23532:	2c00      	cmp	r4, #0
   23534:	dd02      	ble.n	2353c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   23536:	4630      	mov	r0, r6
   23538:	b006      	add	sp, #24
   2353a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   2353c:	4620      	mov	r0, r4
   2353e:	f7ff ffa1 	bl	23484 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   23542:	4b0f      	ldr	r3, [pc, #60]	; (23580 <prepare_multithreading+0x8c>)
   23544:	22b8      	movs	r2, #184	; 0xb8
   23546:	fb02 3204 	mla	r2, r2, r4, r3
   2354a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   2354e:	4b08      	ldr	r3, [pc, #32]	; (23570 <prepare_multithreading+0x7c>)
   23550:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   23554:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   23556:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   23558:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   2355c:	4a09      	ldr	r2, [pc, #36]	; (23584 <prepare_multithreading+0x90>)
   2355e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   23562:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   23566:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   23568:	3401      	adds	r4, #1
   2356a:	e7e2      	b.n	23532 <prepare_multithreading+0x3e>
   2356c:	20002550 	.word	0x20002550
   23570:	200035ac 	.word	0x200035ac
   23574:	00031eac 	.word	0x00031eac
   23578:	00023589 	.word	0x00023589
   2357c:	20005fa0 	.word	0x20005fa0
   23580:	20002498 	.word	0x20002498
   23584:	20006920 	.word	0x20006920

00023588 <bg_thread_main>:
{
   23588:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2358a:	4b0a      	ldr	r3, [pc, #40]	; (235b4 <bg_thread_main+0x2c>)
   2358c:	2201      	movs	r2, #1
   2358e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   23590:	2002      	movs	r0, #2
   23592:	f7ff fe65 	bl	23260 <z_sys_init_run_level>
	boot_banner();
   23596:	f004 feef 	bl	28378 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2359a:	2003      	movs	r0, #3
   2359c:	f7ff fe60 	bl	23260 <z_sys_init_run_level>
	z_init_static_threads();
   235a0:	f000 fc60 	bl	23e64 <z_init_static_threads>
	main();
   235a4:	f7ed fe4e 	bl	11244 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   235a8:	4a03      	ldr	r2, [pc, #12]	; (235b8 <bg_thread_main+0x30>)
   235aa:	7b13      	ldrb	r3, [r2, #12]
   235ac:	f023 0301 	bic.w	r3, r3, #1
   235b0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   235b2:	bd08      	pop	{r3, pc}
   235b4:	20003ffa 	.word	0x20003ffa
   235b8:	20002550 	.word	0x20002550

000235bc <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   235bc:	b508      	push	{r3, lr}
   235be:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   235c0:	4a01      	ldr	r2, [pc, #4]	; (235c8 <switch_to_main_thread+0xc>)
   235c2:	4802      	ldr	r0, [pc, #8]	; (235cc <switch_to_main_thread+0x10>)
   235c4:	f7f1 fee2 	bl	1538c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   235c8:	00023589 	.word	0x00023589
   235cc:	20002550 	.word	0x20002550

000235d0 <z_bss_zero>:
{
   235d0:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   235d2:	4803      	ldr	r0, [pc, #12]	; (235e0 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
   235d4:	4a03      	ldr	r2, [pc, #12]	; (235e4 <z_bss_zero+0x14>)
   235d6:	1a12      	subs	r2, r2, r0
   235d8:	2100      	movs	r1, #0
   235da:	f00d f991 	bl	30900 <memset>
}
   235de:	bd08      	pop	{r3, pc}
   235e0:	20000e10 	.word	0x20000e10
   235e4:	200041bc 	.word	0x200041bc

000235e8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   235e8:	b500      	push	{lr}
   235ea:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   235ec:	f7ef ff1a 	bl	13424 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   235f0:	4b1d      	ldr	r3, [pc, #116]	; (23668 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   235f2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   235f6:	4c1d      	ldr	r4, [pc, #116]	; (2366c <z_cstart+0x84>)
   235f8:	6963      	ldr	r3, [r4, #20]
   235fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   235fe:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23600:	23e0      	movs	r3, #224	; 0xe0
   23602:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   23606:	2320      	movs	r3, #32
   23608:	77e3      	strb	r3, [r4, #31]
   2360a:	2500      	movs	r5, #0
   2360c:	7625      	strb	r5, [r4, #24]
   2360e:	7665      	strb	r5, [r4, #25]
   23610:	76a5      	strb	r5, [r4, #26]
   23612:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   23616:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23618:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2361c:	6263      	str	r3, [r4, #36]	; 0x24
   2361e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   23622:	f7f2 fb19 	bl	15c58 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   23626:	f7f1 fd01 	bl	1502c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2362a:	f04f 33ff 	mov.w	r3, #4294967295
   2362e:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   23630:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   23632:	f7f2 fcc1 	bl	15fb8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   23636:	f7f2 fbb5 	bl	15da4 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   2363a:	2401      	movs	r4, #1
   2363c:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   23640:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   23644:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   23646:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   23648:	4b09      	ldr	r3, [pc, #36]	; (23670 <z_cstart+0x88>)
   2364a:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2364e:	f7ff fdfb 	bl	23248 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   23652:	4628      	mov	r0, r5
   23654:	f7ff fe04 	bl	23260 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   23658:	4620      	mov	r0, r4
   2365a:	f7ff fe01 	bl	23260 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   2365e:	f7ff ff49 	bl	234f4 <prepare_multithreading>
   23662:	f7ff ffab 	bl	235bc <switch_to_main_thread>
   23666:	bf00      	nop
   23668:	20007140 	.word	0x20007140
   2366c:	e000ed00 	.word	0xe000ed00
   23670:	200035ac 	.word	0x200035ac

00023674 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   23674:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23676:	4c0f      	ldr	r4, [pc, #60]	; (236b4 <statics_init+0x40>)
   23678:	e016      	b.n	236a8 <statics_init+0x34>
   2367a:	4d0f      	ldr	r5, [pc, #60]	; (236b8 <statics_init+0x44>)
   2367c:	2318      	movs	r3, #24
   2367e:	462a      	mov	r2, r5
   23680:	490e      	ldr	r1, [pc, #56]	; (236bc <statics_init+0x48>)
   23682:	480f      	ldr	r0, [pc, #60]	; (236c0 <statics_init+0x4c>)
   23684:	f008 fd60 	bl	2c148 <printk>
   23688:	480e      	ldr	r0, [pc, #56]	; (236c4 <statics_init+0x50>)
   2368a:	f008 fd5d 	bl	2c148 <printk>
   2368e:	2118      	movs	r1, #24
   23690:	4628      	mov	r0, r5
   23692:	f008 ff5e 	bl	2c552 <assert_post_action>
   23696:	4b0c      	ldr	r3, [pc, #48]	; (236c8 <statics_init+0x54>)
   23698:	429c      	cmp	r4, r3
   2369a:	d209      	bcs.n	236b0 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2369c:	68a2      	ldr	r2, [r4, #8]
   2369e:	6861      	ldr	r1, [r4, #4]
   236a0:	4620      	mov	r0, r4
   236a2:	f00c fed2 	bl	3044a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   236a6:	3418      	adds	r4, #24
   236a8:	4b07      	ldr	r3, [pc, #28]	; (236c8 <statics_init+0x54>)
   236aa:	429c      	cmp	r4, r3
   236ac:	d9f3      	bls.n	23696 <statics_init+0x22>
   236ae:	e7e4      	b.n	2367a <statics_init+0x6>
		}
	}
	return 0;
}
   236b0:	2000      	movs	r0, #0
   236b2:	bd38      	pop	{r3, r4, r5, pc}
   236b4:	20000b94 	.word	0x20000b94
   236b8:	00035bec 	.word	0x00035bec
   236bc:	00035c10 	.word	0x00035c10
   236c0:	00031df4 	.word	0x00031df4
   236c4:	00033d7c 	.word	0x00033d7c
   236c8:	20000b94 	.word	0x20000b94

000236cc <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   236cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236d0:	b087      	sub	sp, #28
   236d2:	4681      	mov	r9, r0
   236d4:	9103      	str	r1, [sp, #12]
   236d6:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   236d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   236dc:	f00d f82e 	bl	3073c <sys_clock_timeout_end_calc>
   236e0:	4683      	mov	fp, r0
   236e2:	9105      	str	r1, [sp, #20]
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   236e4:	f109 0814 	add.w	r8, r9, #20
	__asm__ volatile(
   236e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   236ec:	f3ef 8511 	mrs	r5, BASEPRI
   236f0:	f383 8812 	msr	BASEPRI_MAX, r3
   236f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   236f8:	4640      	mov	r0, r8
   236fa:	f000 fa23 	bl	23b44 <z_spin_lock_valid>
   236fe:	b168      	cbz	r0, 2371c <k_heap_aligned_alloc+0x50>
	z_spin_lock_set_owner(l);
   23700:	4640      	mov	r0, r8
   23702:	f000 fa3f 	bl	23b84 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23706:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2370a:	b11b      	cbz	r3, 23714 <k_heap_aligned_alloc+0x48>
   2370c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
   23710:	4323      	orrs	r3, r4
   23712:	d113      	bne.n	2373c <k_heap_aligned_alloc+0x70>

	bool blocked_alloc = false;
   23714:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   23718:	4654      	mov	r4, sl

	while (ret == NULL) {
   2371a:	e035      	b.n	23788 <k_heap_aligned_alloc+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2371c:	4c3c      	ldr	r4, [pc, #240]	; (23810 <k_heap_aligned_alloc+0x144>)
   2371e:	2381      	movs	r3, #129	; 0x81
   23720:	4622      	mov	r2, r4
   23722:	493c      	ldr	r1, [pc, #240]	; (23814 <k_heap_aligned_alloc+0x148>)
   23724:	483c      	ldr	r0, [pc, #240]	; (23818 <k_heap_aligned_alloc+0x14c>)
   23726:	f008 fd0f 	bl	2c148 <printk>
   2372a:	4641      	mov	r1, r8
   2372c:	483b      	ldr	r0, [pc, #236]	; (2381c <k_heap_aligned_alloc+0x150>)
   2372e:	f008 fd0b 	bl	2c148 <printk>
   23732:	2181      	movs	r1, #129	; 0x81
   23734:	4620      	mov	r0, r4
   23736:	f008 ff0c 	bl	2c552 <assert_post_action>
   2373a:	e7e1      	b.n	23700 <k_heap_aligned_alloc+0x34>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2373c:	4c38      	ldr	r4, [pc, #224]	; (23820 <k_heap_aligned_alloc+0x154>)
   2373e:	2349      	movs	r3, #73	; 0x49
   23740:	4622      	mov	r2, r4
   23742:	4938      	ldr	r1, [pc, #224]	; (23824 <k_heap_aligned_alloc+0x158>)
   23744:	4834      	ldr	r0, [pc, #208]	; (23818 <k_heap_aligned_alloc+0x14c>)
   23746:	f008 fcff 	bl	2c148 <printk>
   2374a:	4837      	ldr	r0, [pc, #220]	; (23828 <k_heap_aligned_alloc+0x15c>)
   2374c:	f008 fcfc 	bl	2c148 <printk>
   23750:	2149      	movs	r1, #73	; 0x49
   23752:	4620      	mov	r0, r4
   23754:	f008 fefd 	bl	2c552 <assert_post_action>
   23758:	e7dc      	b.n	23714 <k_heap_aligned_alloc+0x48>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2375a:	e9cd 6700 	strd	r6, r7, [sp]
   2375e:	f109 020c 	add.w	r2, r9, #12
   23762:	4629      	mov	r1, r5
   23764:	4640      	mov	r0, r8
   23766:	f002 fc21 	bl	25fac <z_pend_curr>
   2376a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2376e:	f3ef 8511 	mrs	r5, BASEPRI
   23772:	f383 8812 	msr	BASEPRI_MAX, r3
   23776:	f3bf 8f6f 	isb	sy
   2377a:	4640      	mov	r0, r8
   2377c:	f000 f9e2 	bl	23b44 <z_spin_lock_valid>
   23780:	b1d8      	cbz	r0, 237ba <k_heap_aligned_alloc+0xee>
	z_spin_lock_set_owner(l);
   23782:	4640      	mov	r0, r8
   23784:	f000 f9fe 	bl	23b84 <z_spin_lock_set_owner>
	while (ret == NULL) {
   23788:	bb34      	cbnz	r4, 237d8 <k_heap_aligned_alloc+0x10c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2378a:	9a04      	ldr	r2, [sp, #16]
   2378c:	9903      	ldr	r1, [sp, #12]
   2378e:	4648      	mov	r0, r9
   23790:	f7ee fe94 	bl	124bc <sys_heap_aligned_alloc>
   23794:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   23796:	f003 fd49 	bl	2722c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2379a:	b9ec      	cbnz	r4, 237d8 <k_heap_aligned_alloc+0x10c>
		    (ret != NULL) || ((end - now) <= 0)) {
   2379c:	ebbb 0600 	subs.w	r6, fp, r0
   237a0:	9b05      	ldr	r3, [sp, #20]
   237a2:	eb63 0701 	sbc.w	r7, r3, r1
   237a6:	2e01      	cmp	r6, #1
   237a8:	f177 0300 	sbcs.w	r3, r7, #0
   237ac:	db14      	blt.n	237d8 <k_heap_aligned_alloc+0x10c>
		if (!blocked_alloc) {
   237ae:	f1ba 0f00 	cmp.w	sl, #0
   237b2:	d1d2      	bne.n	2375a <k_heap_aligned_alloc+0x8e>
			blocked_alloc = true;
   237b4:	f04f 0a01 	mov.w	sl, #1
   237b8:	e7cf      	b.n	2375a <k_heap_aligned_alloc+0x8e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   237ba:	2381      	movs	r3, #129	; 0x81
   237bc:	4a14      	ldr	r2, [pc, #80]	; (23810 <k_heap_aligned_alloc+0x144>)
   237be:	4915      	ldr	r1, [pc, #84]	; (23814 <k_heap_aligned_alloc+0x148>)
   237c0:	4815      	ldr	r0, [pc, #84]	; (23818 <k_heap_aligned_alloc+0x14c>)
   237c2:	f008 fcc1 	bl	2c148 <printk>
   237c6:	4641      	mov	r1, r8
   237c8:	4814      	ldr	r0, [pc, #80]	; (2381c <k_heap_aligned_alloc+0x150>)
   237ca:	f008 fcbd 	bl	2c148 <printk>
   237ce:	2181      	movs	r1, #129	; 0x81
   237d0:	480f      	ldr	r0, [pc, #60]	; (23810 <k_heap_aligned_alloc+0x144>)
   237d2:	f008 febe 	bl	2c552 <assert_post_action>
   237d6:	e7d4      	b.n	23782 <k_heap_aligned_alloc+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237d8:	4640      	mov	r0, r8
   237da:	f000 f9c3 	bl	23b64 <z_spin_unlock_valid>
   237de:	b138      	cbz	r0, 237f0 <k_heap_aligned_alloc+0x124>
	__asm__ volatile(
   237e0:	f385 8811 	msr	BASEPRI, r5
   237e4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   237e8:	4620      	mov	r0, r4
   237ea:	b007      	add	sp, #28
   237ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237f0:	4e07      	ldr	r6, [pc, #28]	; (23810 <k_heap_aligned_alloc+0x144>)
   237f2:	23ac      	movs	r3, #172	; 0xac
   237f4:	4632      	mov	r2, r6
   237f6:	490d      	ldr	r1, [pc, #52]	; (2382c <k_heap_aligned_alloc+0x160>)
   237f8:	4807      	ldr	r0, [pc, #28]	; (23818 <k_heap_aligned_alloc+0x14c>)
   237fa:	f008 fca5 	bl	2c148 <printk>
   237fe:	4641      	mov	r1, r8
   23800:	480b      	ldr	r0, [pc, #44]	; (23830 <k_heap_aligned_alloc+0x164>)
   23802:	f008 fca1 	bl	2c148 <printk>
   23806:	21ac      	movs	r1, #172	; 0xac
   23808:	4630      	mov	r0, r6
   2380a:	f008 fea2 	bl	2c552 <assert_post_action>
   2380e:	e7e7      	b.n	237e0 <k_heap_aligned_alloc+0x114>
   23810:	0003234c 	.word	0x0003234c
   23814:	000323a4 	.word	0x000323a4
   23818:	00031df4 	.word	0x00031df4
   2381c:	000323bc 	.word	0x000323bc
   23820:	00035bec 	.word	0x00035bec
   23824:	00035c28 	.word	0x00035c28
   23828:	00034ad0 	.word	0x00034ad0
   2382c:	00032374 	.word	0x00032374
   23830:	0003238c 	.word	0x0003238c

00023834 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   23834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23838:	4604      	mov	r4, r0
   2383a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2383c:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   23840:	f04f 0340 	mov.w	r3, #64	; 0x40
   23844:	f3ef 8711 	mrs	r7, BASEPRI
   23848:	f383 8812 	msr	BASEPRI_MAX, r3
   2384c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23850:	4628      	mov	r0, r5
   23852:	f000 f977 	bl	23b44 <z_spin_lock_valid>
   23856:	b188      	cbz	r0, 2387c <k_heap_free+0x48>
	z_spin_lock_set_owner(l);
   23858:	4628      	mov	r0, r5
   2385a:	f000 f993 	bl	23b84 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2385e:	4631      	mov	r1, r6
   23860:	4620      	mov	r0, r4
   23862:	f7ee fdd5 	bl	12410 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   23866:	f104 000c 	add.w	r0, r4, #12
   2386a:	f00c ff31 	bl	306d0 <z_unpend_all>
   2386e:	b1b0      	cbz	r0, 2389e <k_heap_free+0x6a>
		z_reschedule(&h->lock, key);
   23870:	4639      	mov	r1, r7
   23872:	4628      	mov	r0, r5
   23874:	f001 fee2 	bl	2563c <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   23878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2387c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 238dc <k_heap_free+0xa8>
   23880:	2381      	movs	r3, #129	; 0x81
   23882:	4642      	mov	r2, r8
   23884:	4912      	ldr	r1, [pc, #72]	; (238d0 <k_heap_free+0x9c>)
   23886:	4813      	ldr	r0, [pc, #76]	; (238d4 <k_heap_free+0xa0>)
   23888:	f008 fc5e 	bl	2c148 <printk>
   2388c:	4629      	mov	r1, r5
   2388e:	4812      	ldr	r0, [pc, #72]	; (238d8 <k_heap_free+0xa4>)
   23890:	f008 fc5a 	bl	2c148 <printk>
   23894:	2181      	movs	r1, #129	; 0x81
   23896:	4640      	mov	r0, r8
   23898:	f008 fe5b 	bl	2c552 <assert_post_action>
   2389c:	e7dc      	b.n	23858 <k_heap_free+0x24>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2389e:	4628      	mov	r0, r5
   238a0:	f000 f960 	bl	23b64 <z_spin_unlock_valid>
   238a4:	b120      	cbz	r0, 238b0 <k_heap_free+0x7c>
	__asm__ volatile(
   238a6:	f387 8811 	msr	BASEPRI, r7
   238aa:	f3bf 8f6f 	isb	sy
   238ae:	e7e3      	b.n	23878 <k_heap_free+0x44>
   238b0:	4c0a      	ldr	r4, [pc, #40]	; (238dc <k_heap_free+0xa8>)
   238b2:	23ac      	movs	r3, #172	; 0xac
   238b4:	4622      	mov	r2, r4
   238b6:	490a      	ldr	r1, [pc, #40]	; (238e0 <k_heap_free+0xac>)
   238b8:	4806      	ldr	r0, [pc, #24]	; (238d4 <k_heap_free+0xa0>)
   238ba:	f008 fc45 	bl	2c148 <printk>
   238be:	4629      	mov	r1, r5
   238c0:	4808      	ldr	r0, [pc, #32]	; (238e4 <k_heap_free+0xb0>)
   238c2:	f008 fc41 	bl	2c148 <printk>
   238c6:	21ac      	movs	r1, #172	; 0xac
   238c8:	4620      	mov	r0, r4
   238ca:	f008 fe42 	bl	2c552 <assert_post_action>
   238ce:	e7ea      	b.n	238a6 <k_heap_free+0x72>
   238d0:	000323a4 	.word	0x000323a4
   238d4:	00031df4 	.word	0x00031df4
   238d8:	000323bc 	.word	0x000323bc
   238dc:	0003234c 	.word	0x0003234c
   238e0:	00032374 	.word	0x00032374
   238e4:	0003238c 	.word	0x0003238c

000238e8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   238e8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   238ea:	4c10      	ldr	r4, [pc, #64]	; (2392c <init_mem_slab_module+0x44>)
	int rc = 0;
   238ec:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   238ee:	e016      	b.n	2391e <init_mem_slab_module+0x36>
   238f0:	4e0f      	ldr	r6, [pc, #60]	; (23930 <init_mem_slab_module+0x48>)
   238f2:	233c      	movs	r3, #60	; 0x3c
   238f4:	4632      	mov	r2, r6
   238f6:	490f      	ldr	r1, [pc, #60]	; (23934 <init_mem_slab_module+0x4c>)
   238f8:	480f      	ldr	r0, [pc, #60]	; (23938 <init_mem_slab_module+0x50>)
   238fa:	f008 fc25 	bl	2c148 <printk>
   238fe:	480f      	ldr	r0, [pc, #60]	; (2393c <init_mem_slab_module+0x54>)
   23900:	f008 fc22 	bl	2c148 <printk>
   23904:	213c      	movs	r1, #60	; 0x3c
   23906:	4630      	mov	r0, r6
   23908:	f008 fe23 	bl	2c552 <assert_post_action>
   2390c:	4b0c      	ldr	r3, [pc, #48]	; (23940 <init_mem_slab_module+0x58>)
   2390e:	429c      	cmp	r4, r3
   23910:	d209      	bcs.n	23926 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
   23912:	4620      	mov	r0, r4
   23914:	f00c fda1 	bl	3045a <create_free_list>
		if (rc < 0) {
   23918:	1e05      	subs	r5, r0, #0
   2391a:	db04      	blt.n	23926 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2391c:	3420      	adds	r4, #32
   2391e:	4b08      	ldr	r3, [pc, #32]	; (23940 <init_mem_slab_module+0x58>)
   23920:	429c      	cmp	r4, r3
   23922:	d9f3      	bls.n	2390c <init_mem_slab_module+0x24>
   23924:	e7e4      	b.n	238f0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   23926:	4628      	mov	r0, r5
   23928:	bd70      	pop	{r4, r5, r6, pc}
   2392a:	bf00      	nop
   2392c:	20000b34 	.word	0x20000b34
   23930:	00035c70 	.word	0x00035c70
   23934:	00035c98 	.word	0x00035c98
   23938:	00031df4 	.word	0x00031df4
   2393c:	00033d7c 	.word	0x00033d7c
   23940:	20000b94 	.word	0x20000b94

00023944 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   23944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23948:	b082      	sub	sp, #8
   2394a:	4604      	mov	r4, r0
   2394c:	460e      	mov	r6, r1
   2394e:	4690      	mov	r8, r2
   23950:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   23952:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   23956:	f04f 0340 	mov.w	r3, #64	; 0x40
   2395a:	f3ef 8711 	mrs	r7, BASEPRI
   2395e:	f383 8812 	msr	BASEPRI_MAX, r3
   23962:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23966:	4628      	mov	r0, r5
   23968:	f000 f8ec 	bl	23b44 <z_spin_lock_valid>
   2396c:	b1c0      	cbz	r0, 239a0 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
   2396e:	4628      	mov	r0, r5
   23970:	f000 f908 	bl	23b84 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   23974:	69a3      	ldr	r3, [r4, #24]
   23976:	b323      	cbz	r3, 239c2 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
   23978:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   2397a:	69a3      	ldr	r3, [r4, #24]
   2397c:	681b      	ldr	r3, [r3, #0]
   2397e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   23980:	69e3      	ldr	r3, [r4, #28]
   23982:	3301      	adds	r3, #1
   23984:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   23986:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23988:	4628      	mov	r0, r5
   2398a:	f000 f8eb 	bl	23b64 <z_spin_unlock_valid>
   2398e:	b378      	cbz	r0, 239f0 <k_mem_slab_alloc+0xac>
	__asm__ volatile(
   23990:	f387 8811 	msr	BASEPRI, r7
   23994:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   23998:	4620      	mov	r0, r4
   2399a:	b002      	add	sp, #8
   2399c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   239a0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 23a20 <k_mem_slab_alloc+0xdc>
   239a4:	2381      	movs	r3, #129	; 0x81
   239a6:	4652      	mov	r2, sl
   239a8:	4919      	ldr	r1, [pc, #100]	; (23a10 <k_mem_slab_alloc+0xcc>)
   239aa:	481a      	ldr	r0, [pc, #104]	; (23a14 <k_mem_slab_alloc+0xd0>)
   239ac:	f008 fbcc 	bl	2c148 <printk>
   239b0:	4629      	mov	r1, r5
   239b2:	4819      	ldr	r0, [pc, #100]	; (23a18 <k_mem_slab_alloc+0xd4>)
   239b4:	f008 fbc8 	bl	2c148 <printk>
   239b8:	2181      	movs	r1, #129	; 0x81
   239ba:	4650      	mov	r0, sl
   239bc:	f008 fdc9 	bl	2c552 <assert_post_action>
   239c0:	e7d5      	b.n	2396e <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   239c2:	ea58 0309 	orrs.w	r3, r8, r9
   239c6:	d104      	bne.n	239d2 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
   239c8:	2300      	movs	r3, #0
   239ca:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   239cc:	f06f 040b 	mvn.w	r4, #11
   239d0:	e7da      	b.n	23988 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   239d2:	e9cd 8900 	strd	r8, r9, [sp]
   239d6:	4622      	mov	r2, r4
   239d8:	4639      	mov	r1, r7
   239da:	4628      	mov	r0, r5
   239dc:	f002 fae6 	bl	25fac <z_pend_curr>
		if (result == 0) {
   239e0:	4604      	mov	r4, r0
   239e2:	2800      	cmp	r0, #0
   239e4:	d1d8      	bne.n	23998 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   239e6:	4b0d      	ldr	r3, [pc, #52]	; (23a1c <k_mem_slab_alloc+0xd8>)
   239e8:	689b      	ldr	r3, [r3, #8]
   239ea:	695b      	ldr	r3, [r3, #20]
   239ec:	6033      	str	r3, [r6, #0]
		return result;
   239ee:	e7d3      	b.n	23998 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239f0:	4e0b      	ldr	r6, [pc, #44]	; (23a20 <k_mem_slab_alloc+0xdc>)
   239f2:	23ac      	movs	r3, #172	; 0xac
   239f4:	4632      	mov	r2, r6
   239f6:	490b      	ldr	r1, [pc, #44]	; (23a24 <k_mem_slab_alloc+0xe0>)
   239f8:	4806      	ldr	r0, [pc, #24]	; (23a14 <k_mem_slab_alloc+0xd0>)
   239fa:	f008 fba5 	bl	2c148 <printk>
   239fe:	4629      	mov	r1, r5
   23a00:	4809      	ldr	r0, [pc, #36]	; (23a28 <k_mem_slab_alloc+0xe4>)
   23a02:	f008 fba1 	bl	2c148 <printk>
   23a06:	21ac      	movs	r1, #172	; 0xac
   23a08:	4630      	mov	r0, r6
   23a0a:	f008 fda2 	bl	2c552 <assert_post_action>
   23a0e:	e7bf      	b.n	23990 <k_mem_slab_alloc+0x4c>
   23a10:	000323a4 	.word	0x000323a4
   23a14:	00031df4 	.word	0x00031df4
   23a18:	000323bc 	.word	0x000323bc
   23a1c:	200035ac 	.word	0x200035ac
   23a20:	0003234c 	.word	0x0003234c
   23a24:	00032374 	.word	0x00032374
   23a28:	0003238c 	.word	0x0003238c

00023a2c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   23a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a30:	4604      	mov	r4, r0
   23a32:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   23a34:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   23a38:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a3c:	f3ef 8711 	mrs	r7, BASEPRI
   23a40:	f383 8812 	msr	BASEPRI_MAX, r3
   23a44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a48:	4630      	mov	r0, r6
   23a4a:	f000 f87b 	bl	23b44 <z_spin_lock_valid>
   23a4e:	b1b0      	cbz	r0, 23a7e <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
   23a50:	4630      	mov	r0, r6
   23a52:	f000 f897 	bl	23b84 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   23a56:	69a3      	ldr	r3, [r4, #24]
   23a58:	b313      	cbz	r3, 23aa0 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   23a5a:	682b      	ldr	r3, [r5, #0]
   23a5c:	69a2      	ldr	r2, [r4, #24]
   23a5e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   23a60:	682b      	ldr	r3, [r5, #0]
   23a62:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   23a64:	69e3      	ldr	r3, [r4, #28]
   23a66:	3b01      	subs	r3, #1
   23a68:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a6a:	4630      	mov	r0, r6
   23a6c:	f000 f87a 	bl	23b64 <z_spin_unlock_valid>
   23a70:	b338      	cbz	r0, 23ac2 <k_mem_slab_free+0x96>
	__asm__ volatile(
   23a72:	f387 8811 	msr	BASEPRI, r7
   23a76:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   23a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a7e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 23af0 <k_mem_slab_free+0xc4>
   23a82:	2381      	movs	r3, #129	; 0x81
   23a84:	4642      	mov	r2, r8
   23a86:	4917      	ldr	r1, [pc, #92]	; (23ae4 <k_mem_slab_free+0xb8>)
   23a88:	4817      	ldr	r0, [pc, #92]	; (23ae8 <k_mem_slab_free+0xbc>)
   23a8a:	f008 fb5d 	bl	2c148 <printk>
   23a8e:	4631      	mov	r1, r6
   23a90:	4816      	ldr	r0, [pc, #88]	; (23aec <k_mem_slab_free+0xc0>)
   23a92:	f008 fb59 	bl	2c148 <printk>
   23a96:	2181      	movs	r1, #129	; 0x81
   23a98:	4640      	mov	r0, r8
   23a9a:	f008 fd5a 	bl	2c552 <assert_post_action>
   23a9e:	e7d7      	b.n	23a50 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   23aa0:	4620      	mov	r0, r4
   23aa2:	f002 fd21 	bl	264e8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   23aa6:	2800      	cmp	r0, #0
   23aa8:	d0d7      	beq.n	23a5a <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   23aaa:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23aac:	2100      	movs	r1, #0
   23aae:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   23ab2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   23ab4:	f002 f8a2 	bl	25bfc <z_ready_thread>
			z_reschedule(&slab->lock, key);
   23ab8:	4639      	mov	r1, r7
   23aba:	4630      	mov	r0, r6
   23abc:	f001 fdbe 	bl	2563c <z_reschedule>
			return;
   23ac0:	e7db      	b.n	23a7a <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ac2:	4c0b      	ldr	r4, [pc, #44]	; (23af0 <k_mem_slab_free+0xc4>)
   23ac4:	23ac      	movs	r3, #172	; 0xac
   23ac6:	4622      	mov	r2, r4
   23ac8:	490a      	ldr	r1, [pc, #40]	; (23af4 <k_mem_slab_free+0xc8>)
   23aca:	4807      	ldr	r0, [pc, #28]	; (23ae8 <k_mem_slab_free+0xbc>)
   23acc:	f008 fb3c 	bl	2c148 <printk>
   23ad0:	4631      	mov	r1, r6
   23ad2:	4809      	ldr	r0, [pc, #36]	; (23af8 <k_mem_slab_free+0xcc>)
   23ad4:	f008 fb38 	bl	2c148 <printk>
   23ad8:	21ac      	movs	r1, #172	; 0xac
   23ada:	4620      	mov	r0, r4
   23adc:	f008 fd39 	bl	2c552 <assert_post_action>
   23ae0:	e7c7      	b.n	23a72 <k_mem_slab_free+0x46>
   23ae2:	bf00      	nop
   23ae4:	000323a4 	.word	0x000323a4
   23ae8:	00031df4 	.word	0x00031df4
   23aec:	000323bc 	.word	0x000323bc
   23af0:	0003234c 	.word	0x0003234c
   23af4:	00032374 	.word	0x00032374
   23af8:	0003238c 	.word	0x0003238c

00023afc <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   23afc:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   23afe:	4604      	mov	r4, r0
   23b00:	b140      	cbz	r0, 23b14 <z_impl_k_thread_name_set+0x18>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   23b02:	2220      	movs	r2, #32
   23b04:	f104 0078 	add.w	r0, r4, #120	; 0x78
   23b08:	f00d f84b 	bl	30ba2 <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   23b0c:	2000      	movs	r0, #0
   23b0e:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   23b12:	bd10      	pop	{r4, pc}
		thread = _current;
   23b14:	4b01      	ldr	r3, [pc, #4]	; (23b1c <z_impl_k_thread_name_set+0x20>)
   23b16:	689c      	ldr	r4, [r3, #8]
   23b18:	e7f3      	b.n	23b02 <z_impl_k_thread_name_set+0x6>
   23b1a:	bf00      	nop
   23b1c:	200035ac 	.word	0x200035ac

00023b20 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   23b20:	b538      	push	{r3, r4, r5, lr}
   23b22:	4614      	mov	r4, r2
   23b24:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23b26:	ea54 0305 	orrs.w	r3, r4, r5
   23b2a:	d102      	bne.n	23b32 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   23b2c:	f00c fcd5 	bl	304da <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   23b30:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23b32:	462b      	mov	r3, r5
   23b34:	4902      	ldr	r1, [pc, #8]	; (23b40 <schedule_new_thread+0x20>)
   23b36:	3018      	adds	r0, #24
   23b38:	f003 f8a2 	bl	26c80 <z_add_timeout>
   23b3c:	e7f8      	b.n	23b30 <schedule_new_thread+0x10>
   23b3e:	bf00      	nop
   23b40:	00025d59 	.word	0x00025d59

00023b44 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   23b44:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
   23b46:	b13b      	cbz	r3, 23b58 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   23b48:	f003 0303 	and.w	r3, r3, #3
   23b4c:	4a04      	ldr	r2, [pc, #16]	; (23b60 <z_spin_lock_valid+0x1c>)
   23b4e:	7d12      	ldrb	r2, [r2, #20]
   23b50:	4293      	cmp	r3, r2
   23b52:	d003      	beq.n	23b5c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
   23b54:	2001      	movs	r0, #1
   23b56:	4770      	bx	lr
   23b58:	2001      	movs	r0, #1
   23b5a:	4770      	bx	lr
			return false;
   23b5c:	2000      	movs	r0, #0
}
   23b5e:	4770      	bx	lr
   23b60:	200035ac 	.word	0x200035ac

00023b64 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   23b64:	6801      	ldr	r1, [r0, #0]
   23b66:	4a06      	ldr	r2, [pc, #24]	; (23b80 <z_spin_unlock_valid+0x1c>)
   23b68:	7d13      	ldrb	r3, [r2, #20]
   23b6a:	6892      	ldr	r2, [r2, #8]
   23b6c:	4313      	orrs	r3, r2
   23b6e:	4299      	cmp	r1, r3
   23b70:	d103      	bne.n	23b7a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
   23b72:	2300      	movs	r3, #0
   23b74:	6003      	str	r3, [r0, #0]
	return true;
   23b76:	2001      	movs	r0, #1
   23b78:	4770      	bx	lr
		return false;
   23b7a:	2000      	movs	r0, #0
}
   23b7c:	4770      	bx	lr
   23b7e:	bf00      	nop
   23b80:	200035ac 	.word	0x200035ac

00023b84 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   23b84:	4a02      	ldr	r2, [pc, #8]	; (23b90 <z_spin_lock_set_owner+0xc>)
   23b86:	7d13      	ldrb	r3, [r2, #20]
   23b88:	6892      	ldr	r2, [r2, #8]
   23b8a:	4313      	orrs	r3, r2
   23b8c:	6003      	str	r3, [r0, #0]
}
   23b8e:	4770      	bx	lr
   23b90:	200035ac 	.word	0x200035ac

00023b94 <z_thread_monitor_exit>:
{
   23b94:	b570      	push	{r4, r5, r6, lr}
   23b96:	4604      	mov	r4, r0
	__asm__ volatile(
   23b98:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b9c:	f3ef 8511 	mrs	r5, BASEPRI
   23ba0:	f383 8812 	msr	BASEPRI_MAX, r3
   23ba4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ba8:	481f      	ldr	r0, [pc, #124]	; (23c28 <z_thread_monitor_exit+0x94>)
   23baa:	f7ff ffcb 	bl	23b44 <z_spin_lock_valid>
   23bae:	b150      	cbz	r0, 23bc6 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
   23bb0:	481d      	ldr	r0, [pc, #116]	; (23c28 <z_thread_monitor_exit+0x94>)
   23bb2:	f7ff ffe7 	bl	23b84 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
   23bb6:	4b1d      	ldr	r3, [pc, #116]	; (23c2c <z_thread_monitor_exit+0x98>)
   23bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23bba:	42a3      	cmp	r3, r4
   23bbc:	d114      	bne.n	23be8 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
   23bbe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   23bc0:	4b1a      	ldr	r3, [pc, #104]	; (23c2c <z_thread_monitor_exit+0x98>)
   23bc2:	629a      	str	r2, [r3, #40]	; 0x28
   23bc4:	e017      	b.n	23bf6 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bc6:	4e1a      	ldr	r6, [pc, #104]	; (23c30 <z_thread_monitor_exit+0x9c>)
   23bc8:	2381      	movs	r3, #129	; 0x81
   23bca:	4632      	mov	r2, r6
   23bcc:	4919      	ldr	r1, [pc, #100]	; (23c34 <z_thread_monitor_exit+0xa0>)
   23bce:	481a      	ldr	r0, [pc, #104]	; (23c38 <z_thread_monitor_exit+0xa4>)
   23bd0:	f008 faba 	bl	2c148 <printk>
   23bd4:	4914      	ldr	r1, [pc, #80]	; (23c28 <z_thread_monitor_exit+0x94>)
   23bd6:	4819      	ldr	r0, [pc, #100]	; (23c3c <z_thread_monitor_exit+0xa8>)
   23bd8:	f008 fab6 	bl	2c148 <printk>
   23bdc:	2181      	movs	r1, #129	; 0x81
   23bde:	4630      	mov	r0, r6
   23be0:	f008 fcb7 	bl	2c552 <assert_post_action>
   23be4:	e7e4      	b.n	23bb0 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
   23be6:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   23be8:	b113      	cbz	r3, 23bf0 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
   23bea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   23bec:	42a2      	cmp	r2, r4
   23bee:	d1fa      	bne.n	23be6 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
   23bf0:	b10b      	cbz	r3, 23bf6 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
   23bf2:	6f62      	ldr	r2, [r4, #116]	; 0x74
   23bf4:	675a      	str	r2, [r3, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23bf6:	480c      	ldr	r0, [pc, #48]	; (23c28 <z_thread_monitor_exit+0x94>)
   23bf8:	f7ff ffb4 	bl	23b64 <z_spin_unlock_valid>
   23bfc:	b120      	cbz	r0, 23c08 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
   23bfe:	f385 8811 	msr	BASEPRI, r5
   23c02:	f3bf 8f6f 	isb	sy
}
   23c06:	bd70      	pop	{r4, r5, r6, pc}
   23c08:	4c09      	ldr	r4, [pc, #36]	; (23c30 <z_thread_monitor_exit+0x9c>)
   23c0a:	23ac      	movs	r3, #172	; 0xac
   23c0c:	4622      	mov	r2, r4
   23c0e:	490c      	ldr	r1, [pc, #48]	; (23c40 <z_thread_monitor_exit+0xac>)
   23c10:	4809      	ldr	r0, [pc, #36]	; (23c38 <z_thread_monitor_exit+0xa4>)
   23c12:	f008 fa99 	bl	2c148 <printk>
   23c16:	4904      	ldr	r1, [pc, #16]	; (23c28 <z_thread_monitor_exit+0x94>)
   23c18:	480a      	ldr	r0, [pc, #40]	; (23c44 <z_thread_monitor_exit+0xb0>)
   23c1a:	f008 fa95 	bl	2c148 <printk>
   23c1e:	21ac      	movs	r1, #172	; 0xac
   23c20:	4620      	mov	r0, r4
   23c22:	f008 fc96 	bl	2c552 <assert_post_action>
   23c26:	e7ea      	b.n	23bfe <z_thread_monitor_exit+0x6a>
   23c28:	200035d8 	.word	0x200035d8
   23c2c:	200035ac 	.word	0x200035ac
   23c30:	0003234c 	.word	0x0003234c
   23c34:	000323a4 	.word	0x000323a4
   23c38:	00031df4 	.word	0x00031df4
   23c3c:	000323bc 	.word	0x000323bc
   23c40:	00032374 	.word	0x00032374
   23c44:	0003238c 	.word	0x0003238c

00023c48 <z_setup_new_thread>:
{
   23c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c4c:	b085      	sub	sp, #20
   23c4e:	4604      	mov	r4, r0
   23c50:	460e      	mov	r6, r1
   23c52:	4690      	mov	r8, r2
   23c54:	461d      	mov	r5, r3
   23c56:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   23c5a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
   23c5e:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
   23c60:	2f0f      	cmp	r7, #15
   23c62:	d05e      	beq.n	23d22 <z_setup_new_thread+0xda>
   23c64:	f107 0310 	add.w	r3, r7, #16
   23c68:	2b1e      	cmp	r3, #30
   23c6a:	d85e      	bhi.n	23d2a <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   23c6c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   23c70:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   23c72:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   23c74:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23c76:	2204      	movs	r2, #4
   23c78:	4639      	mov	r1, r7
   23c7a:	4620      	mov	r0, r4
   23c7c:	f00c fc31 	bl	304e2 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   23c80:	4642      	mov	r2, r8
   23c82:	4631      	mov	r1, r6
   23c84:	4620      	mov	r0, r4
   23c86:	f00c fc0e 	bl	304a6 <setup_thread_stack>
   23c8a:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23c8e:	9302      	str	r3, [sp, #8]
   23c90:	f8cd a004 	str.w	sl, [sp, #4]
   23c94:	f8cd b000 	str.w	fp, [sp]
   23c98:	462b      	mov	r3, r5
   23c9a:	4602      	mov	r2, r0
   23c9c:	4631      	mov	r1, r6
   23c9e:	4620      	mov	r0, r4
   23ca0:	f7f1 fb24 	bl	152ec <arch_new_thread>
	new_thread->init_data = NULL;
   23ca4:	2300      	movs	r3, #0
   23ca6:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   23ca8:	6665      	str	r5, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   23caa:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   23cae:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   23cb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23cb4:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
   23cb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   23cba:	f3ef 8611 	mrs	r6, BASEPRI
   23cbe:	f383 8812 	msr	BASEPRI_MAX, r3
   23cc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23cc6:	4837      	ldr	r0, [pc, #220]	; (23da4 <z_setup_new_thread+0x15c>)
   23cc8:	f7ff ff3c 	bl	23b44 <z_spin_lock_valid>
   23ccc:	2800      	cmp	r0, #0
   23cce:	d042      	beq.n	23d56 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
   23cd0:	4d34      	ldr	r5, [pc, #208]	; (23da4 <z_setup_new_thread+0x15c>)
   23cd2:	4628      	mov	r0, r5
   23cd4:	f7ff ff56 	bl	23b84 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
   23cd8:	4b33      	ldr	r3, [pc, #204]	; (23da8 <z_setup_new_thread+0x160>)
   23cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23cdc:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   23cde:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ce0:	4628      	mov	r0, r5
   23ce2:	f7ff ff3f 	bl	23b64 <z_spin_unlock_valid>
   23ce6:	2800      	cmp	r0, #0
   23ce8:	d045      	beq.n	23d76 <z_setup_new_thread+0x12e>
	__asm__ volatile(
   23cea:	f386 8811 	msr	BASEPRI, r6
   23cee:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   23cf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   23cf4:	2b00      	cmp	r3, #0
   23cf6:	d04e      	beq.n	23d96 <z_setup_new_thread+0x14e>
   23cf8:	221f      	movs	r2, #31
   23cfa:	4619      	mov	r1, r3
   23cfc:	f104 0078 	add.w	r0, r4, #120	; 0x78
   23d00:	f00c ff4f 	bl	30ba2 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   23d04:	2300      	movs	r3, #0
   23d06:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	if (!_current) {
   23d0a:	4b27      	ldr	r3, [pc, #156]	; (23da8 <z_setup_new_thread+0x160>)
   23d0c:	689b      	ldr	r3, [r3, #8]
   23d0e:	2b00      	cmp	r3, #0
   23d10:	d045      	beq.n	23d9e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
   23d12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   23d16:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   23d1a:	4638      	mov	r0, r7
   23d1c:	b005      	add	sp, #20
   23d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   23d22:	4b22      	ldr	r3, [pc, #136]	; (23dac <z_setup_new_thread+0x164>)
   23d24:	429d      	cmp	r5, r3
   23d26:	d19d      	bne.n	23c64 <z_setup_new_thread+0x1c>
   23d28:	e7a0      	b.n	23c6c <z_setup_new_thread+0x24>
   23d2a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23dd0 <z_setup_new_thread+0x188>
   23d2e:	f240 13ff 	movw	r3, #511	; 0x1ff
   23d32:	464a      	mov	r2, r9
   23d34:	491e      	ldr	r1, [pc, #120]	; (23db0 <z_setup_new_thread+0x168>)
   23d36:	481f      	ldr	r0, [pc, #124]	; (23db4 <z_setup_new_thread+0x16c>)
   23d38:	f008 fa06 	bl	2c148 <printk>
   23d3c:	f06f 030f 	mvn.w	r3, #15
   23d40:	220e      	movs	r2, #14
   23d42:	4639      	mov	r1, r7
   23d44:	481c      	ldr	r0, [pc, #112]	; (23db8 <z_setup_new_thread+0x170>)
   23d46:	f008 f9ff 	bl	2c148 <printk>
   23d4a:	f240 11ff 	movw	r1, #511	; 0x1ff
   23d4e:	4648      	mov	r0, r9
   23d50:	f008 fbff 	bl	2c552 <assert_post_action>
   23d54:	e78a      	b.n	23c6c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d56:	4d19      	ldr	r5, [pc, #100]	; (23dbc <z_setup_new_thread+0x174>)
   23d58:	2381      	movs	r3, #129	; 0x81
   23d5a:	462a      	mov	r2, r5
   23d5c:	4918      	ldr	r1, [pc, #96]	; (23dc0 <z_setup_new_thread+0x178>)
   23d5e:	4815      	ldr	r0, [pc, #84]	; (23db4 <z_setup_new_thread+0x16c>)
   23d60:	f008 f9f2 	bl	2c148 <printk>
   23d64:	490f      	ldr	r1, [pc, #60]	; (23da4 <z_setup_new_thread+0x15c>)
   23d66:	4817      	ldr	r0, [pc, #92]	; (23dc4 <z_setup_new_thread+0x17c>)
   23d68:	f008 f9ee 	bl	2c148 <printk>
   23d6c:	2181      	movs	r1, #129	; 0x81
   23d6e:	4628      	mov	r0, r5
   23d70:	f008 fbef 	bl	2c552 <assert_post_action>
   23d74:	e7ac      	b.n	23cd0 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d76:	4d11      	ldr	r5, [pc, #68]	; (23dbc <z_setup_new_thread+0x174>)
   23d78:	23ac      	movs	r3, #172	; 0xac
   23d7a:	462a      	mov	r2, r5
   23d7c:	4912      	ldr	r1, [pc, #72]	; (23dc8 <z_setup_new_thread+0x180>)
   23d7e:	480d      	ldr	r0, [pc, #52]	; (23db4 <z_setup_new_thread+0x16c>)
   23d80:	f008 f9e2 	bl	2c148 <printk>
   23d84:	4907      	ldr	r1, [pc, #28]	; (23da4 <z_setup_new_thread+0x15c>)
   23d86:	4811      	ldr	r0, [pc, #68]	; (23dcc <z_setup_new_thread+0x184>)
   23d88:	f008 f9de 	bl	2c148 <printk>
   23d8c:	21ac      	movs	r1, #172	; 0xac
   23d8e:	4628      	mov	r0, r5
   23d90:	f008 fbdf 	bl	2c552 <assert_post_action>
   23d94:	e7a9      	b.n	23cea <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
   23d96:	2300      	movs	r3, #0
   23d98:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   23d9c:	e7b5      	b.n	23d0a <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
   23d9e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   23da2:	e7ba      	b.n	23d1a <z_setup_new_thread+0xd2>
   23da4:	200035d8 	.word	0x200035d8
   23da8:	200035ac 	.word	0x200035ac
   23dac:	00023f61 	.word	0x00023f61
   23db0:	00035d10 	.word	0x00035d10
   23db4:	00031df4 	.word	0x00031df4
   23db8:	00035d90 	.word	0x00035d90
   23dbc:	0003234c 	.word	0x0003234c
   23dc0:	000323a4 	.word	0x000323a4
   23dc4:	000323bc 	.word	0x000323bc
   23dc8:	00032374 	.word	0x00032374
   23dcc:	0003238c 	.word	0x0003238c
   23dd0:	00035cb8 	.word	0x00035cb8

00023dd4 <z_impl_k_thread_create>:
{
   23dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23dd8:	b086      	sub	sp, #24
   23dda:	4604      	mov	r4, r0
   23ddc:	460d      	mov	r5, r1
   23dde:	4616      	mov	r6, r2
   23de0:	461f      	mov	r7, r3
   23de2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   23de6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   23dea:	b9db      	cbnz	r3, 23e24 <z_impl_k_thread_create+0x50>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23dec:	2300      	movs	r3, #0
   23dee:	9305      	str	r3, [sp, #20]
   23df0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23df2:	9304      	str	r3, [sp, #16]
   23df4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   23df6:	9303      	str	r3, [sp, #12]
   23df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23dfa:	9302      	str	r3, [sp, #8]
   23dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23dfe:	9301      	str	r3, [sp, #4]
   23e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23e02:	9300      	str	r3, [sp, #0]
   23e04:	463b      	mov	r3, r7
   23e06:	4632      	mov	r2, r6
   23e08:	4629      	mov	r1, r5
   23e0a:	4620      	mov	r0, r4
   23e0c:	f7ff ff1c 	bl	23c48 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   23e10:	f1b9 3fff 	cmp.w	r9, #4294967295
   23e14:	bf08      	it	eq
   23e16:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   23e1a:	d115      	bne.n	23e48 <z_impl_k_thread_create+0x74>
}
   23e1c:	4620      	mov	r0, r4
   23e1e:	b006      	add	sp, #24
   23e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   23e24:	f8df a038 	ldr.w	sl, [pc, #56]	; 23e60 <z_impl_k_thread_create+0x8c>
   23e28:	f44f 731a 	mov.w	r3, #616	; 0x268
   23e2c:	4652      	mov	r2, sl
   23e2e:	4909      	ldr	r1, [pc, #36]	; (23e54 <z_impl_k_thread_create+0x80>)
   23e30:	4809      	ldr	r0, [pc, #36]	; (23e58 <z_impl_k_thread_create+0x84>)
   23e32:	f008 f989 	bl	2c148 <printk>
   23e36:	4809      	ldr	r0, [pc, #36]	; (23e5c <z_impl_k_thread_create+0x88>)
   23e38:	f008 f986 	bl	2c148 <printk>
   23e3c:	f44f 711a 	mov.w	r1, #616	; 0x268
   23e40:	4650      	mov	r0, sl
   23e42:	f008 fb86 	bl	2c552 <assert_post_action>
   23e46:	e7d1      	b.n	23dec <z_impl_k_thread_create+0x18>
		schedule_new_thread(new_thread, delay);
   23e48:	4642      	mov	r2, r8
   23e4a:	464b      	mov	r3, r9
   23e4c:	4620      	mov	r0, r4
   23e4e:	f7ff fe67 	bl	23b20 <schedule_new_thread>
   23e52:	e7e3      	b.n	23e1c <z_impl_k_thread_create+0x48>
   23e54:	00035dc4 	.word	0x00035dc4
   23e58:	00031df4 	.word	0x00031df4
   23e5c:	00035dd8 	.word	0x00035dd8
   23e60:	00035cb8 	.word	0x00035cb8

00023e64 <z_init_static_threads>:
{
   23e64:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   23e68:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   23e6a:	4c37      	ldr	r4, [pc, #220]	; (23f48 <z_init_static_threads+0xe4>)
   23e6c:	e027      	b.n	23ebe <z_init_static_threads+0x5a>
   23e6e:	4d37      	ldr	r5, [pc, #220]	; (23f4c <z_init_static_threads+0xe8>)
   23e70:	f240 23cf 	movw	r3, #719	; 0x2cf
   23e74:	462a      	mov	r2, r5
   23e76:	4936      	ldr	r1, [pc, #216]	; (23f50 <z_init_static_threads+0xec>)
   23e78:	4836      	ldr	r0, [pc, #216]	; (23f54 <z_init_static_threads+0xf0>)
   23e7a:	f008 f965 	bl	2c148 <printk>
   23e7e:	4836      	ldr	r0, [pc, #216]	; (23f58 <z_init_static_threads+0xf4>)
   23e80:	f008 f962 	bl	2c148 <printk>
   23e84:	f240 21cf 	movw	r1, #719	; 0x2cf
   23e88:	4628      	mov	r0, r5
   23e8a:	f008 fb62 	bl	2c552 <assert_post_action>
   23e8e:	4b33      	ldr	r3, [pc, #204]	; (23f5c <z_init_static_threads+0xf8>)
   23e90:	429c      	cmp	r4, r3
   23e92:	d218      	bcs.n	23ec6 <z_init_static_threads+0x62>
		z_setup_new_thread(
   23e94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23e96:	9305      	str	r3, [sp, #20]
   23e98:	6a23      	ldr	r3, [r4, #32]
   23e9a:	9304      	str	r3, [sp, #16]
   23e9c:	69e3      	ldr	r3, [r4, #28]
   23e9e:	9303      	str	r3, [sp, #12]
   23ea0:	69a3      	ldr	r3, [r4, #24]
   23ea2:	9302      	str	r3, [sp, #8]
   23ea4:	6963      	ldr	r3, [r4, #20]
   23ea6:	9301      	str	r3, [sp, #4]
   23ea8:	6923      	ldr	r3, [r4, #16]
   23eaa:	9300      	str	r3, [sp, #0]
   23eac:	68e3      	ldr	r3, [r4, #12]
   23eae:	68a2      	ldr	r2, [r4, #8]
   23eb0:	6861      	ldr	r1, [r4, #4]
   23eb2:	6820      	ldr	r0, [r4, #0]
   23eb4:	f7ff fec8 	bl	23c48 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23eb8:	6823      	ldr	r3, [r4, #0]
   23eba:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   23ebc:	3430      	adds	r4, #48	; 0x30
   23ebe:	4b27      	ldr	r3, [pc, #156]	; (23f5c <z_init_static_threads+0xf8>)
   23ec0:	429c      	cmp	r4, r3
   23ec2:	d9e4      	bls.n	23e8e <z_init_static_threads+0x2a>
   23ec4:	e7d3      	b.n	23e6e <z_init_static_threads+0xa>
	k_sched_lock();
   23ec6:	f001 fc07 	bl	256d8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   23eca:	4c1f      	ldr	r4, [pc, #124]	; (23f48 <z_init_static_threads+0xe4>)
   23ecc:	e01b      	b.n	23f06 <z_init_static_threads+0xa2>
			schedule_new_thread(thread_data->init_thread,
   23ece:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   23ed0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23ed4:	ea4f 79e3 	mov.w	r9, r3, asr #31
   23ed8:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   23edc:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   23ee0:	03d8      	lsls	r0, r3, #15
   23ee2:	f240 35e7 	movw	r5, #999	; 0x3e7
   23ee6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23eea:	2300      	movs	r3, #0
   23eec:	1940      	adds	r0, r0, r5
   23eee:	f04f 0500 	mov.w	r5, #0
   23ef2:	eb45 0101 	adc.w	r1, r5, r1
   23ef6:	f7dc fd71 	bl	9dc <__aeabi_uldivmod>
   23efa:	4602      	mov	r2, r0
   23efc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   23efe:	4630      	mov	r0, r6
   23f00:	f7ff fe0e 	bl	23b20 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   23f04:	3430      	adds	r4, #48	; 0x30
   23f06:	4b15      	ldr	r3, [pc, #84]	; (23f5c <z_init_static_threads+0xf8>)
   23f08:	429c      	cmp	r4, r3
   23f0a:	d807      	bhi.n	23f1c <z_init_static_threads+0xb8>
   23f0c:	4b13      	ldr	r3, [pc, #76]	; (23f5c <z_init_static_threads+0xf8>)
   23f0e:	429c      	cmp	r4, r3
   23f10:	d215      	bcs.n	23f3e <z_init_static_threads+0xda>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23f14:	f1b3 3fff 	cmp.w	r3, #4294967295
   23f18:	d0f4      	beq.n	23f04 <z_init_static_threads+0xa0>
   23f1a:	e7d8      	b.n	23ece <z_init_static_threads+0x6a>
	_FOREACH_STATIC_THREAD(thread_data) {
   23f1c:	4d0b      	ldr	r5, [pc, #44]	; (23f4c <z_init_static_threads+0xe8>)
   23f1e:	f240 23ee 	movw	r3, #750	; 0x2ee
   23f22:	462a      	mov	r2, r5
   23f24:	490a      	ldr	r1, [pc, #40]	; (23f50 <z_init_static_threads+0xec>)
   23f26:	480b      	ldr	r0, [pc, #44]	; (23f54 <z_init_static_threads+0xf0>)
   23f28:	f008 f90e 	bl	2c148 <printk>
   23f2c:	480a      	ldr	r0, [pc, #40]	; (23f58 <z_init_static_threads+0xf4>)
   23f2e:	f008 f90b 	bl	2c148 <printk>
   23f32:	f240 21ee 	movw	r1, #750	; 0x2ee
   23f36:	4628      	mov	r0, r5
   23f38:	f008 fb0b 	bl	2c552 <assert_post_action>
   23f3c:	e7e6      	b.n	23f0c <z_init_static_threads+0xa8>
	k_sched_unlock();
   23f3e:	f002 f991 	bl	26264 <k_sched_unlock>
}
   23f42:	b006      	add	sp, #24
   23f44:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   23f48:	20000ad4 	.word	0x20000ad4
   23f4c:	00035cb8 	.word	0x00035cb8
   23f50:	00035e00 	.word	0x00035e00
   23f54:	00031df4 	.word	0x00031df4
   23f58:	00033d7c 	.word	0x00033d7c
   23f5c:	20000b34 	.word	0x20000b34

00023f60 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   23f60:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   23f62:	4b12      	ldr	r3, [pc, #72]	; (23fac <idle+0x4c>)
   23f64:	689b      	ldr	r3, [r3, #8]
   23f66:	f993 300e 	ldrsb.w	r3, [r3, #14]
   23f6a:	2b00      	cmp	r3, #0
   23f6c:	da0d      	bge.n	23f8a <idle+0x2a>
   23f6e:	4c10      	ldr	r4, [pc, #64]	; (23fb0 <idle+0x50>)
   23f70:	2327      	movs	r3, #39	; 0x27
   23f72:	4622      	mov	r2, r4
   23f74:	490f      	ldr	r1, [pc, #60]	; (23fb4 <idle+0x54>)
   23f76:	4810      	ldr	r0, [pc, #64]	; (23fb8 <idle+0x58>)
   23f78:	f008 f8e6 	bl	2c148 <printk>
   23f7c:	2127      	movs	r1, #39	; 0x27
   23f7e:	4620      	mov	r0, r4
   23f80:	f008 fae7 	bl	2c552 <assert_post_action>
   23f84:	e001      	b.n	23f8a <idle+0x2a>
	arch_cpu_idle();
   23f86:	f7f1 f857 	bl	15038 <arch_cpu_idle>
	__asm__ volatile(
   23f8a:	f04f 0240 	mov.w	r2, #64	; 0x40
   23f8e:	f3ef 8311 	mrs	r3, BASEPRI
   23f92:	f382 8812 	msr	BASEPRI_MAX, r2
   23f96:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   23f9a:	f002 ffc7 	bl	26f2c <z_get_next_timeout_expiry>
   23f9e:	4b03      	ldr	r3, [pc, #12]	; (23fac <idle+0x4c>)
   23fa0:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   23fa2:	f7f0 fa71 	bl	14488 <pm_system_suspend>
   23fa6:	2800      	cmp	r0, #0
   23fa8:	d1ef      	bne.n	23f8a <idle+0x2a>
   23faa:	e7ec      	b.n	23f86 <idle+0x26>
   23fac:	200035ac 	.word	0x200035ac
   23fb0:	00035e30 	.word	0x00035e30
   23fb4:	00035e54 	.word	0x00035e54
   23fb8:	00031df4 	.word	0x00031df4

00023fbc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23fc0:	b083      	sub	sp, #12
   23fc2:	4604      	mov	r4, r0
   23fc4:	4616      	mov	r6, r2
   23fc6:	461d      	mov	r5, r3
   23fc8:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   23fcc:	2900      	cmp	r1, #0
   23fce:	d12b      	bne.n	24028 <z_impl_k_mutex_lock+0x6c>
   23fd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   23fd4:	f3ef 8711 	mrs	r7, BASEPRI
   23fd8:	f383 8812 	msr	BASEPRI_MAX, r3
   23fdc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23fe0:	487b      	ldr	r0, [pc, #492]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   23fe2:	f7ff fdaf 	bl	23b44 <z_spin_lock_valid>
   23fe6:	2800      	cmp	r0, #0
   23fe8:	d02d      	beq.n	24046 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
   23fea:	4879      	ldr	r0, [pc, #484]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   23fec:	f7ff fdca 	bl	23b84 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   23ff0:	68e1      	ldr	r1, [r4, #12]
   23ff2:	2900      	cmp	r1, #0
   23ff4:	d138      	bne.n	24068 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   23ff6:	2900      	cmp	r1, #0
   23ff8:	d17d      	bne.n	240f6 <z_impl_k_mutex_lock+0x13a>
   23ffa:	4b76      	ldr	r3, [pc, #472]	; (241d4 <z_impl_k_mutex_lock+0x218>)
   23ffc:	689b      	ldr	r3, [r3, #8]
   23ffe:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   24002:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   24004:	3101      	adds	r1, #1
   24006:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   24008:	4b72      	ldr	r3, [pc, #456]	; (241d4 <z_impl_k_mutex_lock+0x218>)
   2400a:	689b      	ldr	r3, [r3, #8]
   2400c:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2400e:	4870      	ldr	r0, [pc, #448]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   24010:	f7ff fda8 	bl	23b64 <z_spin_unlock_valid>
   24014:	2800      	cmp	r0, #0
   24016:	d070      	beq.n	240fa <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
   24018:	f387 8811 	msr	BASEPRI, r7
   2401c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   24020:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   24022:	b003      	add	sp, #12
   24024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   24028:	4f6b      	ldr	r7, [pc, #428]	; (241d8 <z_impl_k_mutex_lock+0x21c>)
   2402a:	2365      	movs	r3, #101	; 0x65
   2402c:	463a      	mov	r2, r7
   2402e:	496b      	ldr	r1, [pc, #428]	; (241dc <z_impl_k_mutex_lock+0x220>)
   24030:	486b      	ldr	r0, [pc, #428]	; (241e0 <z_impl_k_mutex_lock+0x224>)
   24032:	f008 f889 	bl	2c148 <printk>
   24036:	486b      	ldr	r0, [pc, #428]	; (241e4 <z_impl_k_mutex_lock+0x228>)
   24038:	f008 f886 	bl	2c148 <printk>
   2403c:	2165      	movs	r1, #101	; 0x65
   2403e:	4638      	mov	r0, r7
   24040:	f008 fa87 	bl	2c552 <assert_post_action>
   24044:	e7c4      	b.n	23fd0 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24046:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 241f0 <z_impl_k_mutex_lock+0x234>
   2404a:	2381      	movs	r3, #129	; 0x81
   2404c:	4642      	mov	r2, r8
   2404e:	4966      	ldr	r1, [pc, #408]	; (241e8 <z_impl_k_mutex_lock+0x22c>)
   24050:	4863      	ldr	r0, [pc, #396]	; (241e0 <z_impl_k_mutex_lock+0x224>)
   24052:	f008 f879 	bl	2c148 <printk>
   24056:	495e      	ldr	r1, [pc, #376]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   24058:	4864      	ldr	r0, [pc, #400]	; (241ec <z_impl_k_mutex_lock+0x230>)
   2405a:	f008 f875 	bl	2c148 <printk>
   2405e:	2181      	movs	r1, #129	; 0x81
   24060:	4640      	mov	r0, r8
   24062:	f008 fa76 	bl	2c552 <assert_post_action>
   24066:	e7c0      	b.n	23fea <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   24068:	68a2      	ldr	r2, [r4, #8]
   2406a:	4b5a      	ldr	r3, [pc, #360]	; (241d4 <z_impl_k_mutex_lock+0x218>)
   2406c:	689b      	ldr	r3, [r3, #8]
   2406e:	429a      	cmp	r2, r3
   24070:	d0c1      	beq.n	23ff6 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   24072:	ea55 0106 	orrs.w	r1, r5, r6
   24076:	bf0c      	ite	eq
   24078:	f04f 0801 	moveq.w	r8, #1
   2407c:	f04f 0800 	movne.w	r8, #0
   24080:	d04b      	beq.n	2411a <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
   24082:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   24086:	4649      	mov	r1, r9
   24088:	f993 000e 	ldrsb.w	r0, [r3, #14]
   2408c:	f00c fa3a 	bl	30504 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   24090:	4581      	cmp	r9, r0
   24092:	dc5d      	bgt.n	24150 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
   24094:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   24098:	9600      	str	r6, [sp, #0]
   2409a:	9501      	str	r5, [sp, #4]
   2409c:	4622      	mov	r2, r4
   2409e:	4639      	mov	r1, r7
   240a0:	484b      	ldr	r0, [pc, #300]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   240a2:	f001 ff83 	bl	25fac <z_pend_curr>
	if (got_mutex == 0) {
   240a6:	2800      	cmp	r0, #0
   240a8:	d0bb      	beq.n	24022 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
   240aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   240ae:	f3ef 8511 	mrs	r5, BASEPRI
   240b2:	f383 8812 	msr	BASEPRI_MAX, r3
   240b6:	f3bf 8f6f 	isb	sy
   240ba:	4845      	ldr	r0, [pc, #276]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   240bc:	f7ff fd42 	bl	23b44 <z_spin_lock_valid>
   240c0:	2800      	cmp	r0, #0
   240c2:	d04b      	beq.n	2415c <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
   240c4:	4842      	ldr	r0, [pc, #264]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   240c6:	f7ff fd5d 	bl	23b84 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   240ca:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   240cc:	429c      	cmp	r4, r3
   240ce:	d055      	beq.n	2417c <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   240d0:	2b00      	cmp	r3, #0
   240d2:	d053      	beq.n	2417c <z_impl_k_mutex_lock+0x1c0>
   240d4:	6921      	ldr	r1, [r4, #16]
   240d6:	f993 000e 	ldrsb.w	r0, [r3, #14]
   240da:	f00c fa13 	bl	30504 <new_prio_for_inheritance>
   240de:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   240e0:	4620      	mov	r0, r4
   240e2:	f00c fa1a 	bl	3051a <adjust_owner_prio>
   240e6:	2800      	cmp	r0, #0
   240e8:	d14a      	bne.n	24180 <z_impl_k_mutex_lock+0x1c4>
   240ea:	f1b9 0f00 	cmp.w	r9, #0
   240ee:	d049      	beq.n	24184 <z_impl_k_mutex_lock+0x1c8>
   240f0:	f04f 0801 	mov.w	r8, #1
   240f4:	e046      	b.n	24184 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
   240f6:	6923      	ldr	r3, [r4, #16]
   240f8:	e783      	b.n	24002 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   240fa:	4c3d      	ldr	r4, [pc, #244]	; (241f0 <z_impl_k_mutex_lock+0x234>)
   240fc:	23ac      	movs	r3, #172	; 0xac
   240fe:	4622      	mov	r2, r4
   24100:	493c      	ldr	r1, [pc, #240]	; (241f4 <z_impl_k_mutex_lock+0x238>)
   24102:	4837      	ldr	r0, [pc, #220]	; (241e0 <z_impl_k_mutex_lock+0x224>)
   24104:	f008 f820 	bl	2c148 <printk>
   24108:	4931      	ldr	r1, [pc, #196]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   2410a:	483b      	ldr	r0, [pc, #236]	; (241f8 <z_impl_k_mutex_lock+0x23c>)
   2410c:	f008 f81c 	bl	2c148 <printk>
   24110:	21ac      	movs	r1, #172	; 0xac
   24112:	4620      	mov	r0, r4
   24114:	f008 fa1d 	bl	2c552 <assert_post_action>
   24118:	e77e      	b.n	24018 <z_impl_k_mutex_lock+0x5c>
   2411a:	482d      	ldr	r0, [pc, #180]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   2411c:	f7ff fd22 	bl	23b64 <z_spin_unlock_valid>
   24120:	b130      	cbz	r0, 24130 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
   24122:	f387 8811 	msr	BASEPRI, r7
   24126:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   2412a:	f06f 000f 	mvn.w	r0, #15
   2412e:	e778      	b.n	24022 <z_impl_k_mutex_lock+0x66>
   24130:	4c2f      	ldr	r4, [pc, #188]	; (241f0 <z_impl_k_mutex_lock+0x234>)
   24132:	23ac      	movs	r3, #172	; 0xac
   24134:	4622      	mov	r2, r4
   24136:	492f      	ldr	r1, [pc, #188]	; (241f4 <z_impl_k_mutex_lock+0x238>)
   24138:	4829      	ldr	r0, [pc, #164]	; (241e0 <z_impl_k_mutex_lock+0x224>)
   2413a:	f008 f805 	bl	2c148 <printk>
   2413e:	4924      	ldr	r1, [pc, #144]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   24140:	482d      	ldr	r0, [pc, #180]	; (241f8 <z_impl_k_mutex_lock+0x23c>)
   24142:	f008 f801 	bl	2c148 <printk>
   24146:	21ac      	movs	r1, #172	; 0xac
   24148:	4620      	mov	r0, r4
   2414a:	f008 fa02 	bl	2c552 <assert_post_action>
   2414e:	e7e8      	b.n	24122 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   24150:	4601      	mov	r1, r0
   24152:	4620      	mov	r0, r4
   24154:	f00c f9e1 	bl	3051a <adjust_owner_prio>
   24158:	4681      	mov	r9, r0
   2415a:	e79d      	b.n	24098 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2415c:	4e24      	ldr	r6, [pc, #144]	; (241f0 <z_impl_k_mutex_lock+0x234>)
   2415e:	2381      	movs	r3, #129	; 0x81
   24160:	4632      	mov	r2, r6
   24162:	4921      	ldr	r1, [pc, #132]	; (241e8 <z_impl_k_mutex_lock+0x22c>)
   24164:	481e      	ldr	r0, [pc, #120]	; (241e0 <z_impl_k_mutex_lock+0x224>)
   24166:	f007 ffef 	bl	2c148 <printk>
   2416a:	4919      	ldr	r1, [pc, #100]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   2416c:	481f      	ldr	r0, [pc, #124]	; (241ec <z_impl_k_mutex_lock+0x230>)
   2416e:	f007 ffeb 	bl	2c148 <printk>
   24172:	2181      	movs	r1, #129	; 0x81
   24174:	4630      	mov	r0, r6
   24176:	f008 f9ec 	bl	2c552 <assert_post_action>
   2417a:	e7a3      	b.n	240c4 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2417c:	6921      	ldr	r1, [r4, #16]
   2417e:	e7af      	b.n	240e0 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   24180:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   24184:	f1b8 0f00 	cmp.w	r8, #0
   24188:	d006      	beq.n	24198 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
   2418a:	4629      	mov	r1, r5
   2418c:	4810      	ldr	r0, [pc, #64]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   2418e:	f001 fa55 	bl	2563c <z_reschedule>
	return -EAGAIN;
   24192:	f06f 000a 	mvn.w	r0, #10
   24196:	e744      	b.n	24022 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24198:	480d      	ldr	r0, [pc, #52]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   2419a:	f7ff fce3 	bl	23b64 <z_spin_unlock_valid>
   2419e:	b130      	cbz	r0, 241ae <z_impl_k_mutex_lock+0x1f2>
   241a0:	f385 8811 	msr	BASEPRI, r5
   241a4:	f3bf 8f6f 	isb	sy
   241a8:	f06f 000a 	mvn.w	r0, #10
   241ac:	e739      	b.n	24022 <z_impl_k_mutex_lock+0x66>
   241ae:	4c10      	ldr	r4, [pc, #64]	; (241f0 <z_impl_k_mutex_lock+0x234>)
   241b0:	23ac      	movs	r3, #172	; 0xac
   241b2:	4622      	mov	r2, r4
   241b4:	490f      	ldr	r1, [pc, #60]	; (241f4 <z_impl_k_mutex_lock+0x238>)
   241b6:	480a      	ldr	r0, [pc, #40]	; (241e0 <z_impl_k_mutex_lock+0x224>)
   241b8:	f007 ffc6 	bl	2c148 <printk>
   241bc:	4904      	ldr	r1, [pc, #16]	; (241d0 <z_impl_k_mutex_lock+0x214>)
   241be:	480e      	ldr	r0, [pc, #56]	; (241f8 <z_impl_k_mutex_lock+0x23c>)
   241c0:	f007 ffc2 	bl	2c148 <printk>
   241c4:	21ac      	movs	r1, #172	; 0xac
   241c6:	4620      	mov	r0, r4
   241c8:	f008 f9c3 	bl	2c552 <assert_post_action>
   241cc:	e7e8      	b.n	241a0 <z_impl_k_mutex_lock+0x1e4>
   241ce:	bf00      	nop
   241d0:	200035dc 	.word	0x200035dc
   241d4:	200035ac 	.word	0x200035ac
   241d8:	00035e7c 	.word	0x00035e7c
   241dc:	00035dc4 	.word	0x00035dc4
   241e0:	00031df4 	.word	0x00031df4
   241e4:	00035ea0 	.word	0x00035ea0
   241e8:	000323a4 	.word	0x000323a4
   241ec:	000323bc 	.word	0x000323bc
   241f0:	0003234c 	.word	0x0003234c
   241f4:	00032374 	.word	0x00032374
   241f8:	0003238c 	.word	0x0003238c

000241fc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   241fc:	b570      	push	{r4, r5, r6, lr}
   241fe:	4604      	mov	r4, r0
   24200:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   24204:	bb03      	cbnz	r3, 24248 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   24206:	68a3      	ldr	r3, [r4, #8]
   24208:	2b00      	cmp	r3, #0
   2420a:	f000 80a6 	beq.w	2435a <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2420e:	4a56      	ldr	r2, [pc, #344]	; (24368 <z_impl_k_mutex_unlock+0x16c>)
   24210:	6892      	ldr	r2, [r2, #8]
   24212:	4293      	cmp	r3, r2
   24214:	f040 80a4 	bne.w	24360 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   24218:	68e3      	ldr	r3, [r4, #12]
   2421a:	b323      	cbz	r3, 24266 <z_impl_k_mutex_unlock+0x6a>
   2421c:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   24220:	bb6b      	cbnz	r3, 2427e <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
   24222:	4b51      	ldr	r3, [pc, #324]	; (24368 <z_impl_k_mutex_unlock+0x16c>)
   24224:	689b      	ldr	r3, [r3, #8]
   24226:	7bdb      	ldrb	r3, [r3, #15]
   24228:	2b01      	cmp	r3, #1
   2422a:	d037      	beq.n	2429c <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
   2422c:	4b4e      	ldr	r3, [pc, #312]	; (24368 <z_impl_k_mutex_unlock+0x16c>)
   2422e:	689a      	ldr	r2, [r3, #8]
   24230:	7bd3      	ldrb	r3, [r2, #15]
   24232:	3b01      	subs	r3, #1
   24234:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   24236:	68e3      	ldr	r3, [r4, #12]
   24238:	2b01      	cmp	r3, #1
   2423a:	d93e      	bls.n	242ba <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
   2423c:	3b01      	subs	r3, #1
   2423e:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   24240:	f002 f810 	bl	26264 <k_sched_unlock>

	return 0;
   24244:	2000      	movs	r0, #0
}
   24246:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   24248:	4d48      	ldr	r5, [pc, #288]	; (2436c <z_impl_k_mutex_unlock+0x170>)
   2424a:	23c7      	movs	r3, #199	; 0xc7
   2424c:	462a      	mov	r2, r5
   2424e:	4948      	ldr	r1, [pc, #288]	; (24370 <z_impl_k_mutex_unlock+0x174>)
   24250:	4848      	ldr	r0, [pc, #288]	; (24374 <z_impl_k_mutex_unlock+0x178>)
   24252:	f007 ff79 	bl	2c148 <printk>
   24256:	4848      	ldr	r0, [pc, #288]	; (24378 <z_impl_k_mutex_unlock+0x17c>)
   24258:	f007 ff76 	bl	2c148 <printk>
   2425c:	21c7      	movs	r1, #199	; 0xc7
   2425e:	4628      	mov	r0, r5
   24260:	f008 f977 	bl	2c552 <assert_post_action>
   24264:	e7cf      	b.n	24206 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   24266:	4d41      	ldr	r5, [pc, #260]	; (2436c <z_impl_k_mutex_unlock+0x170>)
   24268:	23df      	movs	r3, #223	; 0xdf
   2426a:	462a      	mov	r2, r5
   2426c:	4943      	ldr	r1, [pc, #268]	; (2437c <z_impl_k_mutex_unlock+0x180>)
   2426e:	4841      	ldr	r0, [pc, #260]	; (24374 <z_impl_k_mutex_unlock+0x178>)
   24270:	f007 ff6a 	bl	2c148 <printk>
   24274:	21df      	movs	r1, #223	; 0xdf
   24276:	4628      	mov	r0, r5
   24278:	f008 f96b 	bl	2c552 <assert_post_action>
   2427c:	e7ce      	b.n	2421c <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
   2427e:	4d40      	ldr	r5, [pc, #256]	; (24380 <z_impl_k_mutex_unlock+0x184>)
   24280:	23fd      	movs	r3, #253	; 0xfd
   24282:	462a      	mov	r2, r5
   24284:	493a      	ldr	r1, [pc, #232]	; (24370 <z_impl_k_mutex_unlock+0x174>)
   24286:	483b      	ldr	r0, [pc, #236]	; (24374 <z_impl_k_mutex_unlock+0x178>)
   24288:	f007 ff5e 	bl	2c148 <printk>
   2428c:	483d      	ldr	r0, [pc, #244]	; (24384 <z_impl_k_mutex_unlock+0x188>)
   2428e:	f007 ff5b 	bl	2c148 <printk>
   24292:	21fd      	movs	r1, #253	; 0xfd
   24294:	4628      	mov	r0, r5
   24296:	f008 f95c 	bl	2c552 <assert_post_action>
   2429a:	e7c2      	b.n	24222 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2429c:	4d38      	ldr	r5, [pc, #224]	; (24380 <z_impl_k_mutex_unlock+0x184>)
   2429e:	23fe      	movs	r3, #254	; 0xfe
   242a0:	462a      	mov	r2, r5
   242a2:	4939      	ldr	r1, [pc, #228]	; (24388 <z_impl_k_mutex_unlock+0x18c>)
   242a4:	4833      	ldr	r0, [pc, #204]	; (24374 <z_impl_k_mutex_unlock+0x178>)
   242a6:	f007 ff4f 	bl	2c148 <printk>
   242aa:	4836      	ldr	r0, [pc, #216]	; (24384 <z_impl_k_mutex_unlock+0x188>)
   242ac:	f007 ff4c 	bl	2c148 <printk>
   242b0:	21fe      	movs	r1, #254	; 0xfe
   242b2:	4628      	mov	r0, r5
   242b4:	f008 f94d 	bl	2c552 <assert_post_action>
   242b8:	e7b8      	b.n	2422c <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
   242ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   242be:	f3ef 8511 	mrs	r5, BASEPRI
   242c2:	f383 8812 	msr	BASEPRI_MAX, r3
   242c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   242ca:	4830      	ldr	r0, [pc, #192]	; (2438c <z_impl_k_mutex_unlock+0x190>)
   242cc:	f7ff fc3a 	bl	23b44 <z_spin_lock_valid>
   242d0:	b1c0      	cbz	r0, 24304 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
   242d2:	482e      	ldr	r0, [pc, #184]	; (2438c <z_impl_k_mutex_unlock+0x190>)
   242d4:	f7ff fc56 	bl	23b84 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   242d8:	6921      	ldr	r1, [r4, #16]
   242da:	4620      	mov	r0, r4
   242dc:	f00c f91d 	bl	3051a <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   242e0:	4620      	mov	r0, r4
   242e2:	f002 f901 	bl	264e8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   242e6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   242e8:	b1e0      	cbz	r0, 24324 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
   242ea:	f990 300e 	ldrsb.w	r3, [r0, #14]
   242ee:	6123      	str	r3, [r4, #16]
   242f0:	2300      	movs	r3, #0
   242f2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   242f6:	f001 fc81 	bl	25bfc <z_ready_thread>
		z_reschedule(&lock, key);
   242fa:	4629      	mov	r1, r5
   242fc:	4823      	ldr	r0, [pc, #140]	; (2438c <z_impl_k_mutex_unlock+0x190>)
   242fe:	f001 f99d 	bl	2563c <z_reschedule>
   24302:	e79d      	b.n	24240 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24304:	4e22      	ldr	r6, [pc, #136]	; (24390 <z_impl_k_mutex_unlock+0x194>)
   24306:	2381      	movs	r3, #129	; 0x81
   24308:	4632      	mov	r2, r6
   2430a:	4922      	ldr	r1, [pc, #136]	; (24394 <z_impl_k_mutex_unlock+0x198>)
   2430c:	4819      	ldr	r0, [pc, #100]	; (24374 <z_impl_k_mutex_unlock+0x178>)
   2430e:	f007 ff1b 	bl	2c148 <printk>
   24312:	491e      	ldr	r1, [pc, #120]	; (2438c <z_impl_k_mutex_unlock+0x190>)
   24314:	4820      	ldr	r0, [pc, #128]	; (24398 <z_impl_k_mutex_unlock+0x19c>)
   24316:	f007 ff17 	bl	2c148 <printk>
   2431a:	2181      	movs	r1, #129	; 0x81
   2431c:	4630      	mov	r0, r6
   2431e:	f008 f918 	bl	2c552 <assert_post_action>
   24322:	e7d6      	b.n	242d2 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
   24324:	2300      	movs	r3, #0
   24326:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24328:	4818      	ldr	r0, [pc, #96]	; (2438c <z_impl_k_mutex_unlock+0x190>)
   2432a:	f7ff fc1b 	bl	23b64 <z_spin_unlock_valid>
   2432e:	b120      	cbz	r0, 2433a <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
   24330:	f385 8811 	msr	BASEPRI, r5
   24334:	f3bf 8f6f 	isb	sy
   24338:	e782      	b.n	24240 <z_impl_k_mutex_unlock+0x44>
   2433a:	4c15      	ldr	r4, [pc, #84]	; (24390 <z_impl_k_mutex_unlock+0x194>)
   2433c:	23ac      	movs	r3, #172	; 0xac
   2433e:	4622      	mov	r2, r4
   24340:	4916      	ldr	r1, [pc, #88]	; (2439c <z_impl_k_mutex_unlock+0x1a0>)
   24342:	480c      	ldr	r0, [pc, #48]	; (24374 <z_impl_k_mutex_unlock+0x178>)
   24344:	f007 ff00 	bl	2c148 <printk>
   24348:	4910      	ldr	r1, [pc, #64]	; (2438c <z_impl_k_mutex_unlock+0x190>)
   2434a:	4815      	ldr	r0, [pc, #84]	; (243a0 <z_impl_k_mutex_unlock+0x1a4>)
   2434c:	f007 fefc 	bl	2c148 <printk>
   24350:	21ac      	movs	r1, #172	; 0xac
   24352:	4620      	mov	r0, r4
   24354:	f008 f8fd 	bl	2c552 <assert_post_action>
   24358:	e7ea      	b.n	24330 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
   2435a:	f06f 0015 	mvn.w	r0, #21
   2435e:	e772      	b.n	24246 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
   24360:	f04f 30ff 	mov.w	r0, #4294967295
   24364:	e76f      	b.n	24246 <z_impl_k_mutex_unlock+0x4a>
   24366:	bf00      	nop
   24368:	200035ac 	.word	0x200035ac
   2436c:	00035e7c 	.word	0x00035e7c
   24370:	00035dc4 	.word	0x00035dc4
   24374:	00031df4 	.word	0x00031df4
   24378:	00035ea0 	.word	0x00035ea0
   2437c:	00035ec8 	.word	0x00035ec8
   24380:	00035ee0 	.word	0x00035ee0
   24384:	00034ad0 	.word	0x00034ad0
   24388:	00035f0c 	.word	0x00035f0c
   2438c:	200035dc 	.word	0x200035dc
   24390:	0003234c 	.word	0x0003234c
   24394:	000323a4 	.word	0x000323a4
   24398:	000323bc 	.word	0x000323bc
   2439c:	00032374 	.word	0x00032374
   243a0:	0003238c 	.word	0x0003238c

000243a4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   243a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243a8:	4604      	mov	r4, r0
   243aa:	460e      	mov	r6, r1
   243ac:	4615      	mov	r5, r2
   243ae:	4698      	mov	r8, r3
   243b0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   243b4:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   243b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   243bc:	f3ef 8a11 	mrs	sl, BASEPRI
   243c0:	f383 8812 	msr	BASEPRI_MAX, r3
   243c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   243c8:	4638      	mov	r0, r7
   243ca:	f7ff fbbb 	bl	23b44 <z_spin_lock_valid>
   243ce:	b1c0      	cbz	r0, 24402 <queue_insert+0x5e>
	z_spin_lock_set_owner(l);
   243d0:	4638      	mov	r0, r7
   243d2:	f7ff fbd7 	bl	23b84 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   243d6:	f1b9 0f00 	cmp.w	r9, #0
   243da:	d000      	beq.n	243de <queue_insert+0x3a>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   243dc:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   243de:	f104 000c 	add.w	r0, r4, #12
   243e2:	f002 f881 	bl	264e8 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   243e6:	b9e8      	cbnz	r0, 24424 <queue_insert+0x80>

		return 0;
	}

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   243e8:	f1b8 0f00 	cmp.w	r8, #0
   243ec:	d03e      	beq.n	2446c <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   243ee:	2108      	movs	r1, #8
   243f0:	2000      	movs	r0, #0
   243f2:	f003 ffad 	bl	28350 <z_thread_aligned_alloc>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
		if (anode == NULL) {
   243f6:	b1f0      	cbz	r0, 24436 <queue_insert+0x92>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc,
				-ENOMEM);

			return -ENOMEM;
		}
		anode->data = data;
   243f8:	6045      	str	r5, [r0, #4]
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   243fa:	2201      	movs	r2, #1
   243fc:	6002      	str	r2, [r0, #0]
		sys_sfnode_init(&anode->node, 0x1);
		data = anode;
   243fe:	4605      	mov	r5, r0
}
   24400:	e036      	b.n	24470 <queue_insert+0xcc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24402:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 244e8 <queue_insert+0x144>
   24406:	2381      	movs	r3, #129	; 0x81
   24408:	465a      	mov	r2, fp
   2440a:	4934      	ldr	r1, [pc, #208]	; (244dc <queue_insert+0x138>)
   2440c:	4834      	ldr	r0, [pc, #208]	; (244e0 <queue_insert+0x13c>)
   2440e:	f007 fe9b 	bl	2c148 <printk>
   24412:	4639      	mov	r1, r7
   24414:	4833      	ldr	r0, [pc, #204]	; (244e4 <queue_insert+0x140>)
   24416:	f007 fe97 	bl	2c148 <printk>
   2441a:	2181      	movs	r1, #129	; 0x81
   2441c:	4658      	mov	r0, fp
   2441e:	f008 f898 	bl	2c552 <assert_post_action>
   24422:	e7d5      	b.n	243d0 <queue_insert+0x2c>
		prepare_thread_to_run(first_pending_thread, data);
   24424:	4629      	mov	r1, r5
   24426:	f00c f88a 	bl	3053e <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   2442a:	4651      	mov	r1, sl
   2442c:	4638      	mov	r0, r7
   2442e:	f001 f905 	bl	2563c <z_reschedule>
		return 0;
   24432:	2000      	movs	r0, #0
   24434:	e050      	b.n	244d8 <queue_insert+0x134>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24436:	4638      	mov	r0, r7
   24438:	f7ff fb94 	bl	23b64 <z_spin_unlock_valid>
   2443c:	b130      	cbz	r0, 2444c <queue_insert+0xa8>
	__asm__ volatile(
   2443e:	f38a 8811 	msr	BASEPRI, sl
   24442:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   24446:	f06f 000b 	mvn.w	r0, #11
   2444a:	e045      	b.n	244d8 <queue_insert+0x134>
   2444c:	4c26      	ldr	r4, [pc, #152]	; (244e8 <queue_insert+0x144>)
   2444e:	23ac      	movs	r3, #172	; 0xac
   24450:	4622      	mov	r2, r4
   24452:	4926      	ldr	r1, [pc, #152]	; (244ec <queue_insert+0x148>)
   24454:	4822      	ldr	r0, [pc, #136]	; (244e0 <queue_insert+0x13c>)
   24456:	f007 fe77 	bl	2c148 <printk>
   2445a:	4639      	mov	r1, r7
   2445c:	4824      	ldr	r0, [pc, #144]	; (244f0 <queue_insert+0x14c>)
   2445e:	f007 fe73 	bl	2c148 <printk>
   24462:	21ac      	movs	r1, #172	; 0xac
   24464:	4620      	mov	r0, r4
   24466:	f008 f874 	bl	2c552 <assert_post_action>
   2446a:	e7e8      	b.n	2443e <queue_insert+0x9a>
	node->next_and_flags = flags;
   2446c:	2300      	movs	r3, #0
   2446e:	602b      	str	r3, [r5, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   24470:	b186      	cbz	r6, 24494 <queue_insert+0xf0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24472:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24474:	f033 0303 	bics.w	r3, r3, #3
   24478:	d11a      	bne.n	244b0 <queue_insert+0x10c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2447a:	682b      	ldr	r3, [r5, #0]
   2447c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24480:	602b      	str	r3, [r5, #0]
	return list->tail;
   24482:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   24484:	b18a      	cbz	r2, 244aa <queue_insert+0x106>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24486:	6813      	ldr	r3, [r2, #0]
   24488:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2448c:	432b      	orrs	r3, r5
   2448e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   24490:	6065      	str	r5, [r4, #4]
}
   24492:	e017      	b.n	244c4 <queue_insert+0x120>
	return list->head;
   24494:	6822      	ldr	r2, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24496:	682b      	ldr	r3, [r5, #0]
   24498:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2449c:	4313      	orrs	r3, r2
   2449e:	602b      	str	r3, [r5, #0]
	list->head = node;
   244a0:	6025      	str	r5, [r4, #0]
	return list->tail;
   244a2:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   244a4:	b973      	cbnz	r3, 244c4 <queue_insert+0x120>
	list->tail = node;
   244a6:	6065      	str	r5, [r4, #4]
}
   244a8:	e00c      	b.n	244c4 <queue_insert+0x120>
	list->tail = node;
   244aa:	6065      	str	r5, [r4, #4]
	list->head = node;
   244ac:	6025      	str	r5, [r4, #0]
}
   244ae:	e009      	b.n	244c4 <queue_insert+0x120>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   244b0:	682a      	ldr	r2, [r5, #0]
   244b2:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   244b6:	4313      	orrs	r3, r2
   244b8:	602b      	str	r3, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   244ba:	6833      	ldr	r3, [r6, #0]
   244bc:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   244c0:	431d      	orrs	r5, r3
   244c2:	6035      	str	r5, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   244c4:	2104      	movs	r1, #4
   244c6:	f104 0014 	add.w	r0, r4, #20
   244ca:	f00c f9c9 	bl	30860 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   244ce:	4651      	mov	r1, sl
   244d0:	4638      	mov	r0, r7
   244d2:	f001 f8b3 	bl	2563c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   244d6:	2000      	movs	r0, #0
}
   244d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244dc:	000323a4 	.word	0x000323a4
   244e0:	00031df4 	.word	0x00031df4
   244e4:	000323bc 	.word	0x000323bc
   244e8:	0003234c 	.word	0x0003234c
   244ec:	00032374 	.word	0x00032374
   244f0:	0003238c 	.word	0x0003238c

000244f4 <k_queue_append_list>:
int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   244f4:	2900      	cmp	r1, #0
   244f6:	d04e      	beq.n	24596 <k_queue_append_list+0xa2>
{
   244f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   244fc:	4606      	mov	r6, r0
   244fe:	4617      	mov	r7, r2
   24500:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   24502:	2a00      	cmp	r2, #0
   24504:	d04a      	beq.n	2459c <k_queue_append_list+0xa8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24506:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   2450a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2450e:	f3ef 8911 	mrs	r9, BASEPRI
   24512:	f383 8812 	msr	BASEPRI_MAX, r3
   24516:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2451a:	4640      	mov	r0, r8
   2451c:	f7ff fb12 	bl	23b44 <z_spin_lock_valid>
   24520:	b140      	cbz	r0, 24534 <k_queue_append_list+0x40>
	z_spin_lock_set_owner(l);
   24522:	4640      	mov	r0, r8
   24524:	f7ff fb2e 	bl	23b84 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   24528:	f106 050c 	add.w	r5, r6, #12
   2452c:	4628      	mov	r0, r5
   2452e:	f001 ffdb 	bl	264e8 <z_unpend_first_thread>
   24532:	e016      	b.n	24562 <k_queue_append_list+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24534:	4d1b      	ldr	r5, [pc, #108]	; (245a4 <k_queue_append_list+0xb0>)
   24536:	2381      	movs	r3, #129	; 0x81
   24538:	462a      	mov	r2, r5
   2453a:	491b      	ldr	r1, [pc, #108]	; (245a8 <k_queue_append_list+0xb4>)
   2453c:	481b      	ldr	r0, [pc, #108]	; (245ac <k_queue_append_list+0xb8>)
   2453e:	f007 fe03 	bl	2c148 <printk>
   24542:	4641      	mov	r1, r8
   24544:	481a      	ldr	r0, [pc, #104]	; (245b0 <k_queue_append_list+0xbc>)
   24546:	f007 fdff 	bl	2c148 <printk>
   2454a:	2181      	movs	r1, #129	; 0x81
   2454c:	4628      	mov	r0, r5
   2454e:	f008 f800 	bl	2c552 <assert_post_action>
   24552:	e7e6      	b.n	24522 <k_queue_append_list+0x2e>
	}

	while ((head != NULL) && (thread != NULL)) {
		prepare_thread_to_run(thread, head);
   24554:	4621      	mov	r1, r4
   24556:	f00b fff2 	bl	3053e <prepare_thread_to_run>
		head = *(void **)head;
   2455a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2455c:	4628      	mov	r0, r5
   2455e:	f001 ffc3 	bl	264e8 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   24562:	b10c      	cbz	r4, 24568 <k_queue_append_list+0x74>
   24564:	2800      	cmp	r0, #0
   24566:	d1f5      	bne.n	24554 <k_queue_append_list+0x60>
	}

	if (head != NULL) {
   24568:	b13c      	cbz	r4, 2457a <k_queue_append_list+0x86>
	return list->tail;
   2456a:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2456c:	b18a      	cbz	r2, 24592 <k_queue_append_list+0x9e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2456e:	6813      	ldr	r3, [r2, #0]
   24570:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24574:	431c      	orrs	r4, r3
   24576:	6014      	str	r4, [r2, #0]
	list->tail = node;
   24578:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2457a:	2104      	movs	r1, #4
   2457c:	f106 0014 	add.w	r0, r6, #20
   24580:	f00c f96e 	bl	30860 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   24584:	4649      	mov	r1, r9
   24586:	4640      	mov	r0, r8
   24588:	f001 f858 	bl	2563c <z_reschedule>
	return 0;
   2458c:	2000      	movs	r0, #0
}
   2458e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	list->head = node;
   24592:	6034      	str	r4, [r6, #0]
}
   24594:	e7f0      	b.n	24578 <k_queue_append_list+0x84>
		return -EINVAL;
   24596:	f06f 0015 	mvn.w	r0, #21
}
   2459a:	4770      	bx	lr
		return -EINVAL;
   2459c:	f06f 0015 	mvn.w	r0, #21
   245a0:	e7f5      	b.n	2458e <k_queue_append_list+0x9a>
   245a2:	bf00      	nop
   245a4:	0003234c 	.word	0x0003234c
   245a8:	000323a4 	.word	0x000323a4
   245ac:	00031df4 	.word	0x00031df4
   245b0:	000323bc 	.word	0x000323bc

000245b4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   245b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   245b8:	b083      	sub	sp, #12
   245ba:	4604      	mov	r4, r0
   245bc:	4616      	mov	r6, r2
   245be:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   245c0:	f100 0508 	add.w	r5, r0, #8
   245c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   245c8:	f3ef 8811 	mrs	r8, BASEPRI
   245cc:	f383 8812 	msr	BASEPRI_MAX, r3
   245d0:	f3bf 8f6f 	isb	sy
   245d4:	4628      	mov	r0, r5
   245d6:	f7ff fab5 	bl	23b44 <z_spin_lock_valid>
   245da:	b1e0      	cbz	r0, 24616 <z_impl_k_queue_get+0x62>
	z_spin_lock_set_owner(l);
   245dc:	4628      	mov	r0, r5
   245de:	f7ff fad1 	bl	23b84 <z_spin_lock_set_owner>
	return list->head;
   245e2:	6820      	ldr	r0, [r4, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   245e4:	2800      	cmp	r0, #0
   245e6:	d039      	beq.n	2465c <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   245e8:	6803      	ldr	r3, [r0, #0]
   245ea:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   245ee:	6023      	str	r3, [r4, #0]
	return list->tail;
   245f0:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   245f2:	4290      	cmp	r0, r2
   245f4:	d020      	beq.n	24638 <z_impl_k_queue_get+0x84>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   245f6:	2101      	movs	r1, #1
   245f8:	f00b ffa9 	bl	3054e <z_queue_node_peek>
   245fc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   245fe:	4628      	mov	r0, r5
   24600:	f7ff fab0 	bl	23b64 <z_spin_unlock_valid>
   24604:	b1d0      	cbz	r0, 2463c <z_impl_k_queue_get+0x88>
	__asm__ volatile(
   24606:	f388 8811 	msr	BASEPRI, r8
   2460a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2460e:	4620      	mov	r0, r4
   24610:	b003      	add	sp, #12
   24612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24616:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 246c0 <z_impl_k_queue_get+0x10c>
   2461a:	2381      	movs	r3, #129	; 0x81
   2461c:	464a      	mov	r2, r9
   2461e:	4925      	ldr	r1, [pc, #148]	; (246b4 <z_impl_k_queue_get+0x100>)
   24620:	4825      	ldr	r0, [pc, #148]	; (246b8 <z_impl_k_queue_get+0x104>)
   24622:	f007 fd91 	bl	2c148 <printk>
   24626:	4629      	mov	r1, r5
   24628:	4824      	ldr	r0, [pc, #144]	; (246bc <z_impl_k_queue_get+0x108>)
   2462a:	f007 fd8d 	bl	2c148 <printk>
   2462e:	2181      	movs	r1, #129	; 0x81
   24630:	4648      	mov	r0, r9
   24632:	f007 ff8e 	bl	2c552 <assert_post_action>
   24636:	e7d1      	b.n	245dc <z_impl_k_queue_get+0x28>
	list->tail = node;
   24638:	6063      	str	r3, [r4, #4]
}
   2463a:	e7dc      	b.n	245f6 <z_impl_k_queue_get+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2463c:	4e20      	ldr	r6, [pc, #128]	; (246c0 <z_impl_k_queue_get+0x10c>)
   2463e:	23ac      	movs	r3, #172	; 0xac
   24640:	4632      	mov	r2, r6
   24642:	4920      	ldr	r1, [pc, #128]	; (246c4 <z_impl_k_queue_get+0x110>)
   24644:	481c      	ldr	r0, [pc, #112]	; (246b8 <z_impl_k_queue_get+0x104>)
   24646:	f007 fd7f 	bl	2c148 <printk>
   2464a:	4629      	mov	r1, r5
   2464c:	481e      	ldr	r0, [pc, #120]	; (246c8 <z_impl_k_queue_get+0x114>)
   2464e:	f007 fd7b 	bl	2c148 <printk>
   24652:	21ac      	movs	r1, #172	; 0xac
   24654:	4630      	mov	r0, r6
   24656:	f007 ff7c 	bl	2c552 <assert_post_action>
   2465a:	e7d4      	b.n	24606 <z_impl_k_queue_get+0x52>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2465c:	ea56 0307 	orrs.w	r3, r6, r7
   24660:	d00c      	beq.n	2467c <z_impl_k_queue_get+0xc8>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   24662:	e9cd 6700 	strd	r6, r7, [sp]
   24666:	f104 020c 	add.w	r2, r4, #12
   2466a:	4641      	mov	r1, r8
   2466c:	4628      	mov	r0, r5
   2466e:	f001 fc9d 	bl	25fac <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   24672:	b9e8      	cbnz	r0, 246b0 <z_impl_k_queue_get+0xfc>
   24674:	4b15      	ldr	r3, [pc, #84]	; (246cc <z_impl_k_queue_get+0x118>)
   24676:	689b      	ldr	r3, [r3, #8]
   24678:	695c      	ldr	r4, [r3, #20]
   2467a:	e7c8      	b.n	2460e <z_impl_k_queue_get+0x5a>
   2467c:	4628      	mov	r0, r5
   2467e:	f7ff fa71 	bl	23b64 <z_spin_unlock_valid>
   24682:	b128      	cbz	r0, 24690 <z_impl_k_queue_get+0xdc>
   24684:	f388 8811 	msr	BASEPRI, r8
   24688:	f3bf 8f6f 	isb	sy
		return NULL;
   2468c:	2400      	movs	r4, #0
   2468e:	e7be      	b.n	2460e <z_impl_k_queue_get+0x5a>
   24690:	4c0b      	ldr	r4, [pc, #44]	; (246c0 <z_impl_k_queue_get+0x10c>)
   24692:	23ac      	movs	r3, #172	; 0xac
   24694:	4622      	mov	r2, r4
   24696:	490b      	ldr	r1, [pc, #44]	; (246c4 <z_impl_k_queue_get+0x110>)
   24698:	4807      	ldr	r0, [pc, #28]	; (246b8 <z_impl_k_queue_get+0x104>)
   2469a:	f007 fd55 	bl	2c148 <printk>
   2469e:	4629      	mov	r1, r5
   246a0:	4809      	ldr	r0, [pc, #36]	; (246c8 <z_impl_k_queue_get+0x114>)
   246a2:	f007 fd51 	bl	2c148 <printk>
   246a6:	21ac      	movs	r1, #172	; 0xac
   246a8:	4620      	mov	r0, r4
   246aa:	f007 ff52 	bl	2c552 <assert_post_action>
   246ae:	e7e9      	b.n	24684 <z_impl_k_queue_get+0xd0>
	return (ret != 0) ? NULL : _current->base.swap_data;
   246b0:	2400      	movs	r4, #0
   246b2:	e7ac      	b.n	2460e <z_impl_k_queue_get+0x5a>
   246b4:	000323a4 	.word	0x000323a4
   246b8:	00031df4 	.word	0x00031df4
   246bc:	000323bc 	.word	0x000323bc
   246c0:	0003234c 	.word	0x0003234c
   246c4:	00032374 	.word	0x00032374
   246c8:	0003238c 	.word	0x0003238c
   246cc:	200035ac 	.word	0x200035ac

000246d0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   246d0:	b570      	push	{r4, r5, r6, lr}
   246d2:	4604      	mov	r4, r0
	__asm__ volatile(
   246d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   246d8:	f3ef 8511 	mrs	r5, BASEPRI
   246dc:	f383 8812 	msr	BASEPRI_MAX, r3
   246e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   246e4:	4819      	ldr	r0, [pc, #100]	; (2474c <z_impl_k_sem_give+0x7c>)
   246e6:	f7ff fa2d 	bl	23b44 <z_spin_lock_valid>
   246ea:	b180      	cbz	r0, 2470e <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
   246ec:	4817      	ldr	r0, [pc, #92]	; (2474c <z_impl_k_sem_give+0x7c>)
   246ee:	f7ff fa49 	bl	23b84 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   246f2:	4620      	mov	r0, r4
   246f4:	f001 fef8 	bl	264e8 <z_unpend_first_thread>

	if (thread != NULL) {
   246f8:	b1c8      	cbz	r0, 2472e <z_impl_k_sem_give+0x5e>
   246fa:	2200      	movs	r2, #0
   246fc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   24700:	f001 fa7c 	bl	25bfc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   24704:	4629      	mov	r1, r5
   24706:	4811      	ldr	r0, [pc, #68]	; (2474c <z_impl_k_sem_give+0x7c>)
   24708:	f000 ff98 	bl	2563c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2470c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2470e:	4e10      	ldr	r6, [pc, #64]	; (24750 <z_impl_k_sem_give+0x80>)
   24710:	2381      	movs	r3, #129	; 0x81
   24712:	4632      	mov	r2, r6
   24714:	490f      	ldr	r1, [pc, #60]	; (24754 <z_impl_k_sem_give+0x84>)
   24716:	4810      	ldr	r0, [pc, #64]	; (24758 <z_impl_k_sem_give+0x88>)
   24718:	f007 fd16 	bl	2c148 <printk>
   2471c:	490b      	ldr	r1, [pc, #44]	; (2474c <z_impl_k_sem_give+0x7c>)
   2471e:	480f      	ldr	r0, [pc, #60]	; (2475c <z_impl_k_sem_give+0x8c>)
   24720:	f007 fd12 	bl	2c148 <printk>
   24724:	2181      	movs	r1, #129	; 0x81
   24726:	4630      	mov	r0, r6
   24728:	f007 ff13 	bl	2c552 <assert_post_action>
   2472c:	e7de      	b.n	246ec <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2472e:	68a3      	ldr	r3, [r4, #8]
   24730:	68e2      	ldr	r2, [r4, #12]
   24732:	4293      	cmp	r3, r2
   24734:	d008      	beq.n	24748 <z_impl_k_sem_give+0x78>
   24736:	2201      	movs	r2, #1
   24738:	4413      	add	r3, r2
   2473a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2473c:	2102      	movs	r1, #2
   2473e:	f104 0010 	add.w	r0, r4, #16
   24742:	f00c f88d 	bl	30860 <z_handle_obj_poll_events>
}
   24746:	e7dd      	b.n	24704 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   24748:	2200      	movs	r2, #0
   2474a:	e7f5      	b.n	24738 <z_impl_k_sem_give+0x68>
   2474c:	200035e0 	.word	0x200035e0
   24750:	0003234c 	.word	0x0003234c
   24754:	000323a4 	.word	0x000323a4
   24758:	00031df4 	.word	0x00031df4
   2475c:	000323bc 	.word	0x000323bc

00024760 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   24760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24764:	b082      	sub	sp, #8
   24766:	4604      	mov	r4, r0
   24768:	4616      	mov	r6, r2
   2476a:	461f      	mov	r7, r3
   2476c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   24770:	b113      	cbz	r3, 24778 <z_impl_k_sem_take+0x18>
   24772:	ea56 0307 	orrs.w	r3, r6, r7
   24776:	d11f      	bne.n	247b8 <z_impl_k_sem_take+0x58>
   24778:	f04f 0340 	mov.w	r3, #64	; 0x40
   2477c:	f3ef 8511 	mrs	r5, BASEPRI
   24780:	f383 8812 	msr	BASEPRI_MAX, r3
   24784:	f3bf 8f6f 	isb	sy
   24788:	4836      	ldr	r0, [pc, #216]	; (24864 <z_impl_k_sem_take+0x104>)
   2478a:	f7ff f9db 	bl	23b44 <z_spin_lock_valid>
   2478e:	b310      	cbz	r0, 247d6 <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
   24790:	4834      	ldr	r0, [pc, #208]	; (24864 <z_impl_k_sem_take+0x104>)
   24792:	f7ff f9f7 	bl	23b84 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   24796:	68a3      	ldr	r3, [r4, #8]
   24798:	2b00      	cmp	r3, #0
   2479a:	d03d      	beq.n	24818 <z_impl_k_sem_take+0xb8>
		sem->count--;
   2479c:	3b01      	subs	r3, #1
   2479e:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247a0:	4830      	ldr	r0, [pc, #192]	; (24864 <z_impl_k_sem_take+0x104>)
   247a2:	f7ff f9df 	bl	23b64 <z_spin_unlock_valid>
   247a6:	b338      	cbz	r0, 247f8 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
   247a8:	f385 8811 	msr	BASEPRI, r5
   247ac:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   247b0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   247b2:	b002      	add	sp, #8
   247b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
   247b8:	4d2b      	ldr	r5, [pc, #172]	; (24868 <z_impl_k_sem_take+0x108>)
   247ba:	2379      	movs	r3, #121	; 0x79
   247bc:	462a      	mov	r2, r5
   247be:	492b      	ldr	r1, [pc, #172]	; (2486c <z_impl_k_sem_take+0x10c>)
   247c0:	482b      	ldr	r0, [pc, #172]	; (24870 <z_impl_k_sem_take+0x110>)
   247c2:	f007 fcc1 	bl	2c148 <printk>
   247c6:	482b      	ldr	r0, [pc, #172]	; (24874 <z_impl_k_sem_take+0x114>)
   247c8:	f007 fcbe 	bl	2c148 <printk>
   247cc:	2179      	movs	r1, #121	; 0x79
   247ce:	4628      	mov	r0, r5
   247d0:	f007 febf 	bl	2c552 <assert_post_action>
   247d4:	e7d0      	b.n	24778 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247d6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 24880 <z_impl_k_sem_take+0x120>
   247da:	2381      	movs	r3, #129	; 0x81
   247dc:	4642      	mov	r2, r8
   247de:	4926      	ldr	r1, [pc, #152]	; (24878 <z_impl_k_sem_take+0x118>)
   247e0:	4823      	ldr	r0, [pc, #140]	; (24870 <z_impl_k_sem_take+0x110>)
   247e2:	f007 fcb1 	bl	2c148 <printk>
   247e6:	491f      	ldr	r1, [pc, #124]	; (24864 <z_impl_k_sem_take+0x104>)
   247e8:	4824      	ldr	r0, [pc, #144]	; (2487c <z_impl_k_sem_take+0x11c>)
   247ea:	f007 fcad 	bl	2c148 <printk>
   247ee:	2181      	movs	r1, #129	; 0x81
   247f0:	4640      	mov	r0, r8
   247f2:	f007 feae 	bl	2c552 <assert_post_action>
   247f6:	e7cb      	b.n	24790 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247f8:	4c21      	ldr	r4, [pc, #132]	; (24880 <z_impl_k_sem_take+0x120>)
   247fa:	23ac      	movs	r3, #172	; 0xac
   247fc:	4622      	mov	r2, r4
   247fe:	4921      	ldr	r1, [pc, #132]	; (24884 <z_impl_k_sem_take+0x124>)
   24800:	481b      	ldr	r0, [pc, #108]	; (24870 <z_impl_k_sem_take+0x110>)
   24802:	f007 fca1 	bl	2c148 <printk>
   24806:	4917      	ldr	r1, [pc, #92]	; (24864 <z_impl_k_sem_take+0x104>)
   24808:	481f      	ldr	r0, [pc, #124]	; (24888 <z_impl_k_sem_take+0x128>)
   2480a:	f007 fc9d 	bl	2c148 <printk>
   2480e:	21ac      	movs	r1, #172	; 0xac
   24810:	4620      	mov	r0, r4
   24812:	f007 fe9e 	bl	2c552 <assert_post_action>
   24816:	e7c7      	b.n	247a8 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24818:	ea56 0307 	orrs.w	r3, r6, r7
   2481c:	d007      	beq.n	2482e <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2481e:	e9cd 6700 	strd	r6, r7, [sp]
   24822:	4622      	mov	r2, r4
   24824:	4629      	mov	r1, r5
   24826:	480f      	ldr	r0, [pc, #60]	; (24864 <z_impl_k_sem_take+0x104>)
   24828:	f001 fbc0 	bl	25fac <z_pend_curr>
	return ret;
   2482c:	e7c1      	b.n	247b2 <z_impl_k_sem_take+0x52>
   2482e:	480d      	ldr	r0, [pc, #52]	; (24864 <z_impl_k_sem_take+0x104>)
   24830:	f7ff f998 	bl	23b64 <z_spin_unlock_valid>
   24834:	b130      	cbz	r0, 24844 <z_impl_k_sem_take+0xe4>
   24836:	f385 8811 	msr	BASEPRI, r5
   2483a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2483e:	f06f 000f 	mvn.w	r0, #15
   24842:	e7b6      	b.n	247b2 <z_impl_k_sem_take+0x52>
   24844:	4c0e      	ldr	r4, [pc, #56]	; (24880 <z_impl_k_sem_take+0x120>)
   24846:	23ac      	movs	r3, #172	; 0xac
   24848:	4622      	mov	r2, r4
   2484a:	490e      	ldr	r1, [pc, #56]	; (24884 <z_impl_k_sem_take+0x124>)
   2484c:	4808      	ldr	r0, [pc, #32]	; (24870 <z_impl_k_sem_take+0x110>)
   2484e:	f007 fc7b 	bl	2c148 <printk>
   24852:	4904      	ldr	r1, [pc, #16]	; (24864 <z_impl_k_sem_take+0x104>)
   24854:	480c      	ldr	r0, [pc, #48]	; (24888 <z_impl_k_sem_take+0x128>)
   24856:	f007 fc77 	bl	2c148 <printk>
   2485a:	21ac      	movs	r1, #172	; 0xac
   2485c:	4620      	mov	r0, r4
   2485e:	f007 fe78 	bl	2c552 <assert_post_action>
   24862:	e7e8      	b.n	24836 <z_impl_k_sem_take+0xd6>
   24864:	200035e0 	.word	0x200035e0
   24868:	00035f40 	.word	0x00035f40
   2486c:	00035f60 	.word	0x00035f60
   24870:	00031df4 	.word	0x00031df4
   24874:	00034ad0 	.word	0x00034ad0
   24878:	000323a4 	.word	0x000323a4
   2487c:	000323bc 	.word	0x000323bc
   24880:	0003234c 	.word	0x0003234c
   24884:	00032374 	.word	0x00032374
   24888:	0003238c 	.word	0x0003238c

0002488c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2488c:	b510      	push	{r4, lr}
   2488e:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   24890:	4b08      	ldr	r3, [pc, #32]	; (248b4 <k_sys_work_q_init+0x28>)
   24892:	9302      	str	r3, [sp, #8]
   24894:	2400      	movs	r4, #0
   24896:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2489a:	ab02      	add	r3, sp, #8
   2489c:	9300      	str	r3, [sp, #0]
   2489e:	f04f 33ff 	mov.w	r3, #4294967295
   248a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   248a6:	4904      	ldr	r1, [pc, #16]	; (248b8 <k_sys_work_q_init+0x2c>)
   248a8:	4804      	ldr	r0, [pc, #16]	; (248bc <k_sys_work_q_init+0x30>)
   248aa:	f000 fafb 	bl	24ea4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   248ae:	4620      	mov	r0, r4
   248b0:	b004      	add	sp, #16
   248b2:	bd10      	pop	{r4, pc}
   248b4:	00035fb0 	.word	0x00035fb0
   248b8:	20007140 	.word	0x20007140
   248bc:	20002608 	.word	0x20002608

000248c0 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   248c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   248c2:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   248c4:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   248c6:	f013 0f02 	tst.w	r3, #2
   248ca:	d16e      	bne.n	249aa <submit_to_queue_locked+0xea>
   248cc:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   248ce:	f013 0f04 	tst.w	r3, #4
   248d2:	d16f      	bne.n	249b4 <submit_to_queue_locked+0xf4>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   248d4:	680b      	ldr	r3, [r1, #0]
   248d6:	2b00      	cmp	r3, #0
   248d8:	d03c      	beq.n	24954 <submit_to_queue_locked+0x94>
	return (*flagp & BIT(bit)) != 0U;
   248da:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   248dc:	f013 0f01 	tst.w	r3, #1
   248e0:	d049      	beq.n	24976 <submit_to_queue_locked+0xb6>
			__ASSERT_NO_MSG(work->queue != NULL);
   248e2:	68a3      	ldr	r3, [r4, #8]
   248e4:	2b00      	cmp	r3, #0
   248e6:	d038      	beq.n	2495a <submit_to_queue_locked+0x9a>
			*queuep = work->queue;
   248e8:	68a3      	ldr	r3, [r4, #8]
   248ea:	602b      	str	r3, [r5, #0]
			ret = 2;
   248ec:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   248ee:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   248f0:	2e00      	cmp	r6, #0
   248f2:	d04e      	beq.n	24992 <submit_to_queue_locked+0xd2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   248f4:	4b30      	ldr	r3, [pc, #192]	; (249b8 <submit_to_queue_locked+0xf8>)
   248f6:	689b      	ldr	r3, [r3, #8]
   248f8:	42b3      	cmp	r3, r6
   248fa:	d03e      	beq.n	2497a <submit_to_queue_locked+0xba>
   248fc:	2300      	movs	r3, #0
   248fe:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   24900:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   24904:	f3c3 0180 	ubfx	r1, r3, #2, #1
   24908:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2490c:	f013 0f01 	tst.w	r3, #1
   24910:	d042      	beq.n	24998 <submit_to_queue_locked+0xd8>
	} else if (draining && !chained) {
   24912:	b109      	cbz	r1, 24918 <submit_to_queue_locked+0x58>
   24914:	2a00      	cmp	r2, #0
   24916:	d042      	beq.n	2499e <submit_to_queue_locked+0xde>
	} else if (plugged && !draining) {
   24918:	b108      	cbz	r0, 2491e <submit_to_queue_locked+0x5e>
   2491a:	2900      	cmp	r1, #0
   2491c:	d042      	beq.n	249a4 <submit_to_queue_locked+0xe4>
	parent->next = child;
   2491e:	2300      	movs	r3, #0
   24920:	6023      	str	r3, [r4, #0]
	return list->tail;
   24922:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   24926:	b37b      	cbz	r3, 24988 <submit_to_queue_locked+0xc8>
	parent->next = child;
   24928:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2492a:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2492e:	2200      	movs	r2, #0
   24930:	4611      	mov	r1, r2
   24932:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   24936:	f002 f8bb 	bl	26ab0 <z_sched_wake>
		ret = 1;
   2493a:	2001      	movs	r0, #1

		if (rc < 0) {
   2493c:	2800      	cmp	r0, #0
   2493e:	db06      	blt.n	2494e <submit_to_queue_locked+0x8e>
	*flagp |= BIT(bit);
   24940:	68e3      	ldr	r3, [r4, #12]
   24942:	f043 0304 	orr.w	r3, r3, #4
   24946:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   24948:	682b      	ldr	r3, [r5, #0]
   2494a:	60a3      	str	r3, [r4, #8]
   2494c:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   2494e:	2800      	cmp	r0, #0
   24950:	dc2f      	bgt.n	249b2 <submit_to_queue_locked+0xf2>
   24952:	e02c      	b.n	249ae <submit_to_queue_locked+0xee>
			*queuep = work->queue;
   24954:	6883      	ldr	r3, [r0, #8]
   24956:	600b      	str	r3, [r1, #0]
   24958:	e7bf      	b.n	248da <submit_to_queue_locked+0x1a>
			__ASSERT_NO_MSG(work->queue != NULL);
   2495a:	4e18      	ldr	r6, [pc, #96]	; (249bc <submit_to_queue_locked+0xfc>)
   2495c:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   24960:	4632      	mov	r2, r6
   24962:	4917      	ldr	r1, [pc, #92]	; (249c0 <submit_to_queue_locked+0x100>)
   24964:	4817      	ldr	r0, [pc, #92]	; (249c4 <submit_to_queue_locked+0x104>)
   24966:	f007 fbef 	bl	2c148 <printk>
   2496a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2496e:	4630      	mov	r0, r6
   24970:	f007 fdef 	bl	2c552 <assert_post_action>
   24974:	e7b8      	b.n	248e8 <submit_to_queue_locked+0x28>
		ret = 1;
   24976:	2701      	movs	r7, #1
   24978:	e7b9      	b.n	248ee <submit_to_queue_locked+0x2e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2497a:	f00b fda6 	bl	304ca <k_is_in_isr>
   2497e:	b908      	cbnz	r0, 24984 <submit_to_queue_locked+0xc4>
   24980:	2301      	movs	r3, #1
   24982:	e7bc      	b.n	248fe <submit_to_queue_locked+0x3e>
   24984:	2300      	movs	r3, #0
   24986:	e7ba      	b.n	248fe <submit_to_queue_locked+0x3e>
   24988:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   2498c:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   24990:	e7cd      	b.n	2492e <submit_to_queue_locked+0x6e>
		return -EINVAL;
   24992:	f06f 0015 	mvn.w	r0, #21
   24996:	e7d1      	b.n	2493c <submit_to_queue_locked+0x7c>
		ret = -ENODEV;
   24998:	f06f 0012 	mvn.w	r0, #18
   2499c:	e7ce      	b.n	2493c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   2499e:	f06f 000f 	mvn.w	r0, #15
   249a2:	e7cb      	b.n	2493c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   249a4:	f06f 000f 	mvn.w	r0, #15
   249a8:	e7c8      	b.n	2493c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   249aa:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   249ae:	2300      	movs	r3, #0
   249b0:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   249b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   249b4:	2000      	movs	r0, #0
   249b6:	e7fa      	b.n	249ae <submit_to_queue_locked+0xee>
   249b8:	200035ac 	.word	0x200035ac
   249bc:	00035fbc 	.word	0x00035fbc
   249c0:	00035fe0 	.word	0x00035fe0
   249c4:	00031df4 	.word	0x00031df4

000249c8 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   249c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   249ca:	b083      	sub	sp, #12
   249cc:	4604      	mov	r4, r0
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
   249ce:	f1a0 0610 	sub.w	r6, r0, #16
	__asm__ volatile(
   249d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   249d6:	f3ef 8511 	mrs	r5, BASEPRI
   249da:	f383 8812 	msr	BASEPRI_MAX, r3
   249de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   249e2:	4821      	ldr	r0, [pc, #132]	; (24a68 <work_timeout+0xa0>)
   249e4:	f7ff f8ae 	bl	23b44 <z_spin_lock_valid>
   249e8:	b1b8      	cbz	r0, 24a1a <work_timeout+0x52>
	z_spin_lock_set_owner(l);
   249ea:	481f      	ldr	r0, [pc, #124]	; (24a68 <work_timeout+0xa0>)
   249ec:	f7ff f8ca 	bl	23b84 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   249f0:	2300      	movs	r3, #0
   249f2:	9301      	str	r3, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   249f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   249f8:	f023 0208 	bic.w	r2, r3, #8
   249fc:	f844 2c04 	str.w	r2, [r4, #-4]
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24a00:	f013 0f08 	tst.w	r3, #8
   24a04:	d119      	bne.n	24a3a <work_timeout+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a06:	4818      	ldr	r0, [pc, #96]	; (24a68 <work_timeout+0xa0>)
   24a08:	f7ff f8ac 	bl	23b64 <z_spin_unlock_valid>
   24a0c:	b1e0      	cbz	r0, 24a48 <work_timeout+0x80>
	__asm__ volatile(
   24a0e:	f385 8811 	msr	BASEPRI, r5
   24a12:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
   24a16:	b003      	add	sp, #12
   24a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a1a:	4f14      	ldr	r7, [pc, #80]	; (24a6c <work_timeout+0xa4>)
   24a1c:	2381      	movs	r3, #129	; 0x81
   24a1e:	463a      	mov	r2, r7
   24a20:	4913      	ldr	r1, [pc, #76]	; (24a70 <work_timeout+0xa8>)
   24a22:	4814      	ldr	r0, [pc, #80]	; (24a74 <work_timeout+0xac>)
   24a24:	f007 fb90 	bl	2c148 <printk>
   24a28:	490f      	ldr	r1, [pc, #60]	; (24a68 <work_timeout+0xa0>)
   24a2a:	4813      	ldr	r0, [pc, #76]	; (24a78 <work_timeout+0xb0>)
   24a2c:	f007 fb8c 	bl	2c148 <printk>
   24a30:	2181      	movs	r1, #129	; 0x81
   24a32:	4638      	mov	r0, r7
   24a34:	f007 fd8d 	bl	2c552 <assert_post_action>
   24a38:	e7d7      	b.n	249ea <work_timeout+0x22>
		queue = dw->queue;
   24a3a:	69a3      	ldr	r3, [r4, #24]
   24a3c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   24a3e:	a901      	add	r1, sp, #4
   24a40:	4630      	mov	r0, r6
   24a42:	f7ff ff3d 	bl	248c0 <submit_to_queue_locked>
   24a46:	e7de      	b.n	24a06 <work_timeout+0x3e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a48:	4c08      	ldr	r4, [pc, #32]	; (24a6c <work_timeout+0xa4>)
   24a4a:	23ac      	movs	r3, #172	; 0xac
   24a4c:	4622      	mov	r2, r4
   24a4e:	490b      	ldr	r1, [pc, #44]	; (24a7c <work_timeout+0xb4>)
   24a50:	4808      	ldr	r0, [pc, #32]	; (24a74 <work_timeout+0xac>)
   24a52:	f007 fb79 	bl	2c148 <printk>
   24a56:	4904      	ldr	r1, [pc, #16]	; (24a68 <work_timeout+0xa0>)
   24a58:	4809      	ldr	r0, [pc, #36]	; (24a80 <work_timeout+0xb8>)
   24a5a:	f007 fb75 	bl	2c148 <printk>
   24a5e:	21ac      	movs	r1, #172	; 0xac
   24a60:	4620      	mov	r0, r4
   24a62:	f007 fd76 	bl	2c552 <assert_post_action>
   24a66:	e7d2      	b.n	24a0e <work_timeout+0x46>
   24a68:	200035e4 	.word	0x200035e4
   24a6c:	0003234c 	.word	0x0003234c
   24a70:	000323a4 	.word	0x000323a4
   24a74:	00031df4 	.word	0x00031df4
   24a78:	000323bc 	.word	0x000323bc
   24a7c:	00032374 	.word	0x00032374
   24a80:	0003238c 	.word	0x0003238c

00024a84 <finalize_cancel_locked>:
{
   24a84:	b570      	push	{r4, r5, r6, lr}
   24a86:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   24a88:	68c3      	ldr	r3, [r0, #12]
   24a8a:	f023 0302 	bic.w	r3, r3, #2
   24a8e:	60c3      	str	r3, [r0, #12]
	return list->head;
   24a90:	4b19      	ldr	r3, [pc, #100]	; (24af8 <finalize_cancel_locked+0x74>)
   24a92:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24a94:	b1e8      	cbz	r0, 24ad2 <finalize_cancel_locked+0x4e>
   24a96:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   24a98:	b100      	cbz	r0, 24a9c <finalize_cancel_locked+0x18>
	return node->next;
   24a9a:	6804      	ldr	r4, [r0, #0]
   24a9c:	2600      	movs	r6, #0
   24a9e:	e01d      	b.n	24adc <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   24aa0:	b15e      	cbz	r6, 24aba <finalize_cancel_locked+0x36>
	return node->next;
   24aa2:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   24aa4:	6033      	str	r3, [r6, #0]
	return list->tail;
   24aa6:	4b14      	ldr	r3, [pc, #80]	; (24af8 <finalize_cancel_locked+0x74>)
   24aa8:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   24aaa:	4298      	cmp	r0, r3
   24aac:	d00e      	beq.n	24acc <finalize_cancel_locked+0x48>
	parent->next = child;
   24aae:	2300      	movs	r3, #0
   24ab0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   24ab4:	f7ff fe0c 	bl	246d0 <z_impl_k_sem_give>
}
   24ab8:	e015      	b.n	24ae6 <finalize_cancel_locked+0x62>
	return node->next;
   24aba:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24abc:	4b0e      	ldr	r3, [pc, #56]	; (24af8 <finalize_cancel_locked+0x74>)
   24abe:	601a      	str	r2, [r3, #0]
	return list->tail;
   24ac0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   24ac2:	4298      	cmp	r0, r3
   24ac4:	d1f3      	bne.n	24aae <finalize_cancel_locked+0x2a>
	list->tail = node;
   24ac6:	4b0c      	ldr	r3, [pc, #48]	; (24af8 <finalize_cancel_locked+0x74>)
   24ac8:	605a      	str	r2, [r3, #4]
}
   24aca:	e7f0      	b.n	24aae <finalize_cancel_locked+0x2a>
	list->tail = node;
   24acc:	4b0a      	ldr	r3, [pc, #40]	; (24af8 <finalize_cancel_locked+0x74>)
   24ace:	605e      	str	r6, [r3, #4]
}
   24ad0:	e7ed      	b.n	24aae <finalize_cancel_locked+0x2a>
   24ad2:	4604      	mov	r4, r0
   24ad4:	e7e2      	b.n	24a9c <finalize_cancel_locked+0x18>
   24ad6:	4623      	mov	r3, r4
   24ad8:	4620      	mov	r0, r4
   24ada:	461c      	mov	r4, r3
   24adc:	b150      	cbz	r0, 24af4 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   24ade:	6843      	ldr	r3, [r0, #4]
   24ae0:	42ab      	cmp	r3, r5
   24ae2:	d0dd      	beq.n	24aa0 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   24ae4:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24ae6:	2c00      	cmp	r4, #0
   24ae8:	d0f5      	beq.n	24ad6 <finalize_cancel_locked+0x52>
   24aea:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   24aec:	2c00      	cmp	r4, #0
   24aee:	d0f3      	beq.n	24ad8 <finalize_cancel_locked+0x54>
	return node->next;
   24af0:	6823      	ldr	r3, [r4, #0]
   24af2:	e7f1      	b.n	24ad8 <finalize_cancel_locked+0x54>
}
   24af4:	bd70      	pop	{r4, r5, r6, pc}
   24af6:	bf00      	nop
   24af8:	200035e8 	.word	0x200035e8

00024afc <cancel_sync_locked>:
{
   24afc:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   24afe:	68c5      	ldr	r5, [r0, #12]
   24b00:	f015 0f02 	tst.w	r5, #2
   24b04:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (ret) {
   24b08:	d101      	bne.n	24b0e <cancel_sync_locked+0x12>
}
   24b0a:	4628      	mov	r0, r5
   24b0c:	bd70      	pop	{r4, r5, r6, pc}
   24b0e:	4604      	mov	r4, r0
   24b10:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   24b12:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   24b16:	2201      	movs	r2, #1
   24b18:	2100      	movs	r1, #0
   24b1a:	f00b fd4b 	bl	305b4 <z_impl_k_sem_init>
	canceler->work = work;
   24b1e:	6074      	str	r4, [r6, #4]
	parent->next = child;
   24b20:	2300      	movs	r3, #0
   24b22:	6033      	str	r3, [r6, #0]
	return list->tail;
   24b24:	4b05      	ldr	r3, [pc, #20]	; (24b3c <cancel_sync_locked+0x40>)
   24b26:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   24b28:	b11b      	cbz	r3, 24b32 <cancel_sync_locked+0x36>
	parent->next = child;
   24b2a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   24b2c:	4b03      	ldr	r3, [pc, #12]	; (24b3c <cancel_sync_locked+0x40>)
   24b2e:	605e      	str	r6, [r3, #4]
}
   24b30:	e7eb      	b.n	24b0a <cancel_sync_locked+0xe>
   24b32:	4b02      	ldr	r3, [pc, #8]	; (24b3c <cancel_sync_locked+0x40>)
   24b34:	605e      	str	r6, [r3, #4]
	list->head = node;
   24b36:	601e      	str	r6, [r3, #0]
}
   24b38:	e7e7      	b.n	24b0a <cancel_sync_locked+0xe>
   24b3a:	bf00      	nop
   24b3c:	200035e8 	.word	0x200035e8

00024b40 <work_queue_main>:
{
   24b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b44:	b084      	sub	sp, #16
   24b46:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   24b48:	e026      	b.n	24b98 <work_queue_main+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b4a:	4c6e      	ldr	r4, [pc, #440]	; (24d04 <work_queue_main+0x1c4>)
   24b4c:	2381      	movs	r3, #129	; 0x81
   24b4e:	4622      	mov	r2, r4
   24b50:	496d      	ldr	r1, [pc, #436]	; (24d08 <work_queue_main+0x1c8>)
   24b52:	486e      	ldr	r0, [pc, #440]	; (24d0c <work_queue_main+0x1cc>)
   24b54:	f007 faf8 	bl	2c148 <printk>
   24b58:	496d      	ldr	r1, [pc, #436]	; (24d10 <work_queue_main+0x1d0>)
   24b5a:	486e      	ldr	r0, [pc, #440]	; (24d14 <work_queue_main+0x1d4>)
   24b5c:	f007 faf4 	bl	2c148 <printk>
   24b60:	2181      	movs	r1, #129	; 0x81
   24b62:	4620      	mov	r0, r4
   24b64:	f007 fcf5 	bl	2c552 <assert_post_action>
   24b68:	e023      	b.n	24bb2 <work_queue_main+0x72>
	return (*flagp & BIT(bit)) != 0U;
   24b6a:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   24b6e:	f023 0204 	bic.w	r2, r3, #4
   24b72:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   24b76:	f013 0f04 	tst.w	r3, #4
   24b7a:	d174      	bne.n	24c66 <work_queue_main+0x126>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   24b7c:	2300      	movs	r3, #0
   24b7e:	9302      	str	r3, [sp, #8]
   24b80:	f04f 32ff 	mov.w	r2, #4294967295
   24b84:	f04f 33ff 	mov.w	r3, #4294967295
   24b88:	e9cd 2300 	strd	r2, r3, [sp]
   24b8c:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   24b90:	4631      	mov	r1, r6
   24b92:	485f      	ldr	r0, [pc, #380]	; (24d10 <work_queue_main+0x1d0>)
   24b94:	f002 f800 	bl	26b98 <z_sched_wait>
	__asm__ volatile(
   24b98:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b9c:	f3ef 8611 	mrs	r6, BASEPRI
   24ba0:	f383 8812 	msr	BASEPRI_MAX, r3
   24ba4:	f3bf 8f6f 	isb	sy
   24ba8:	4859      	ldr	r0, [pc, #356]	; (24d10 <work_queue_main+0x1d0>)
   24baa:	f7fe ffcb 	bl	23b44 <z_spin_lock_valid>
   24bae:	2800      	cmp	r0, #0
   24bb0:	d0cb      	beq.n	24b4a <work_queue_main+0xa>
	z_spin_lock_set_owner(l);
   24bb2:	4857      	ldr	r0, [pc, #348]	; (24d10 <work_queue_main+0x1d0>)
   24bb4:	f7fe ffe6 	bl	23b84 <z_spin_lock_set_owner>
	return list->head;
   24bb8:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   24bbc:	2c00      	cmp	r4, #0
   24bbe:	d0d4      	beq.n	24b6a <work_queue_main+0x2a>
	return node->next;
   24bc0:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   24bc2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   24bc6:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24bca:	4294      	cmp	r4, r2
   24bcc:	d048      	beq.n	24c60 <work_queue_main+0x120>
	*flagp |= BIT(bit);
   24bce:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   24bd2:	f043 0302 	orr.w	r3, r3, #2
   24bd6:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   24bda:	68e3      	ldr	r3, [r4, #12]
   24bdc:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   24be0:	f023 0304 	bic.w	r3, r3, #4
   24be4:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   24be6:	6867      	ldr	r7, [r4, #4]
		if (work == NULL) {
   24be8:	2c00      	cmp	r4, #0
   24bea:	d0c7      	beq.n	24b7c <work_queue_main+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24bec:	4848      	ldr	r0, [pc, #288]	; (24d10 <work_queue_main+0x1d0>)
   24bee:	f7fe ffb9 	bl	23b64 <z_spin_unlock_valid>
   24bf2:	2800      	cmp	r0, #0
   24bf4:	d042      	beq.n	24c7c <work_queue_main+0x13c>
	__asm__ volatile(
   24bf6:	f386 8811 	msr	BASEPRI, r6
   24bfa:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(handler != NULL);
   24bfe:	2f00      	cmp	r7, #0
   24c00:	d04d      	beq.n	24c9e <work_queue_main+0x15e>
		handler(work);
   24c02:	4620      	mov	r0, r4
   24c04:	47b8      	blx	r7
	__asm__ volatile(
   24c06:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c0a:	f3ef 8611 	mrs	r6, BASEPRI
   24c0e:	f383 8812 	msr	BASEPRI_MAX, r3
   24c12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c16:	483e      	ldr	r0, [pc, #248]	; (24d10 <work_queue_main+0x1d0>)
   24c18:	f7fe ff94 	bl	23b44 <z_spin_lock_valid>
   24c1c:	2800      	cmp	r0, #0
   24c1e:	d04c      	beq.n	24cba <work_queue_main+0x17a>
	z_spin_lock_set_owner(l);
   24c20:	483b      	ldr	r0, [pc, #236]	; (24d10 <work_queue_main+0x1d0>)
   24c22:	f7fe ffaf 	bl	23b84 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   24c26:	68e3      	ldr	r3, [r4, #12]
   24c28:	f023 0301 	bic.w	r3, r3, #1
   24c2c:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24c2e:	f013 0f02 	tst.w	r3, #2
   24c32:	d152      	bne.n	24cda <work_queue_main+0x19a>
	*flagp &= ~BIT(bit);
   24c34:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   24c38:	f023 0302 	bic.w	r3, r3, #2
   24c3c:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   24c40:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c44:	4832      	ldr	r0, [pc, #200]	; (24d10 <work_queue_main+0x1d0>)
   24c46:	f7fe ff8d 	bl	23b64 <z_spin_unlock_valid>
   24c4a:	2800      	cmp	r0, #0
   24c4c:	d049      	beq.n	24ce2 <work_queue_main+0x1a2>
	__asm__ volatile(
   24c4e:	f386 8811 	msr	BASEPRI, r6
   24c52:	f3bf 8f6f 	isb	sy
		if (yield) {
   24c56:	2c00      	cmp	r4, #0
   24c58:	d19e      	bne.n	24b98 <work_queue_main+0x58>
	z_impl_k_yield();
   24c5a:	f001 fcb5 	bl	265c8 <z_impl_k_yield>
}
   24c5e:	e79b      	b.n	24b98 <work_queue_main+0x58>
	list->tail = node;
   24c60:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   24c64:	e7b3      	b.n	24bce <work_queue_main+0x8e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   24c66:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   24c6a:	2200      	movs	r2, #0
   24c6c:	2101      	movs	r1, #1
   24c6e:	4638      	mov	r0, r7
   24c70:	f001 ff1e 	bl	26ab0 <z_sched_wake>
   24c74:	2800      	cmp	r0, #0
   24c76:	d1f8      	bne.n	24c6a <work_queue_main+0x12a>
		k_work_handler_t handler = NULL;
   24c78:	2700      	movs	r7, #0
   24c7a:	e7b5      	b.n	24be8 <work_queue_main+0xa8>
   24c7c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 24d04 <work_queue_main+0x1c4>
   24c80:	23ac      	movs	r3, #172	; 0xac
   24c82:	4642      	mov	r2, r8
   24c84:	4924      	ldr	r1, [pc, #144]	; (24d18 <work_queue_main+0x1d8>)
   24c86:	4821      	ldr	r0, [pc, #132]	; (24d0c <work_queue_main+0x1cc>)
   24c88:	f007 fa5e 	bl	2c148 <printk>
   24c8c:	4920      	ldr	r1, [pc, #128]	; (24d10 <work_queue_main+0x1d0>)
   24c8e:	4823      	ldr	r0, [pc, #140]	; (24d1c <work_queue_main+0x1dc>)
   24c90:	f007 fa5a 	bl	2c148 <printk>
   24c94:	21ac      	movs	r1, #172	; 0xac
   24c96:	4640      	mov	r0, r8
   24c98:	f007 fc5b 	bl	2c552 <assert_post_action>
   24c9c:	e7ab      	b.n	24bf6 <work_queue_main+0xb6>
		__ASSERT_NO_MSG(handler != NULL);
   24c9e:	4e20      	ldr	r6, [pc, #128]	; (24d20 <work_queue_main+0x1e0>)
   24ca0:	f44f 7322 	mov.w	r3, #648	; 0x288
   24ca4:	4632      	mov	r2, r6
   24ca6:	491f      	ldr	r1, [pc, #124]	; (24d24 <work_queue_main+0x1e4>)
   24ca8:	4818      	ldr	r0, [pc, #96]	; (24d0c <work_queue_main+0x1cc>)
   24caa:	f007 fa4d 	bl	2c148 <printk>
   24cae:	f44f 7122 	mov.w	r1, #648	; 0x288
   24cb2:	4630      	mov	r0, r6
   24cb4:	f007 fc4d 	bl	2c552 <assert_post_action>
   24cb8:	e7a3      	b.n	24c02 <work_queue_main+0xc2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24cba:	4f12      	ldr	r7, [pc, #72]	; (24d04 <work_queue_main+0x1c4>)
   24cbc:	2381      	movs	r3, #129	; 0x81
   24cbe:	463a      	mov	r2, r7
   24cc0:	4911      	ldr	r1, [pc, #68]	; (24d08 <work_queue_main+0x1c8>)
   24cc2:	4812      	ldr	r0, [pc, #72]	; (24d0c <work_queue_main+0x1cc>)
   24cc4:	f007 fa40 	bl	2c148 <printk>
   24cc8:	4911      	ldr	r1, [pc, #68]	; (24d10 <work_queue_main+0x1d0>)
   24cca:	4812      	ldr	r0, [pc, #72]	; (24d14 <work_queue_main+0x1d4>)
   24ccc:	f007 fa3c 	bl	2c148 <printk>
   24cd0:	2181      	movs	r1, #129	; 0x81
   24cd2:	4638      	mov	r0, r7
   24cd4:	f007 fc3d 	bl	2c552 <assert_post_action>
   24cd8:	e7a2      	b.n	24c20 <work_queue_main+0xe0>
			finalize_cancel_locked(work);
   24cda:	4620      	mov	r0, r4
   24cdc:	f7ff fed2 	bl	24a84 <finalize_cancel_locked>
   24ce0:	e7a8      	b.n	24c34 <work_queue_main+0xf4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ce2:	4f08      	ldr	r7, [pc, #32]	; (24d04 <work_queue_main+0x1c4>)
   24ce4:	23ac      	movs	r3, #172	; 0xac
   24ce6:	463a      	mov	r2, r7
   24ce8:	490b      	ldr	r1, [pc, #44]	; (24d18 <work_queue_main+0x1d8>)
   24cea:	4808      	ldr	r0, [pc, #32]	; (24d0c <work_queue_main+0x1cc>)
   24cec:	f007 fa2c 	bl	2c148 <printk>
   24cf0:	4907      	ldr	r1, [pc, #28]	; (24d10 <work_queue_main+0x1d0>)
   24cf2:	480a      	ldr	r0, [pc, #40]	; (24d1c <work_queue_main+0x1dc>)
   24cf4:	f007 fa28 	bl	2c148 <printk>
   24cf8:	21ac      	movs	r1, #172	; 0xac
   24cfa:	4638      	mov	r0, r7
   24cfc:	f007 fc29 	bl	2c552 <assert_post_action>
   24d00:	e7a5      	b.n	24c4e <work_queue_main+0x10e>
   24d02:	bf00      	nop
   24d04:	0003234c 	.word	0x0003234c
   24d08:	000323a4 	.word	0x000323a4
   24d0c:	00031df4 	.word	0x00031df4
   24d10:	200035e4 	.word	0x200035e4
   24d14:	000323bc 	.word	0x000323bc
   24d18:	00032374 	.word	0x00032374
   24d1c:	0003238c 	.word	0x0003238c
   24d20:	00035fbc 	.word	0x00035fbc
   24d24:	00035ffc 	.word	0x00035ffc

00024d28 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   24d28:	b570      	push	{r4, r5, r6, lr}
   24d2a:	4606      	mov	r6, r0
   24d2c:	4608      	mov	r0, r1
   24d2e:	4614      	mov	r4, r2
   24d30:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24d32:	ea54 0305 	orrs.w	r3, r4, r5
   24d36:	d00c      	beq.n	24d52 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   24d38:	68cb      	ldr	r3, [r1, #12]
   24d3a:	f043 0308 	orr.w	r3, r3, #8
   24d3e:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   24d40:	6833      	ldr	r3, [r6, #0]
   24d42:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   24d44:	462b      	mov	r3, r5
   24d46:	4905      	ldr	r1, [pc, #20]	; (24d5c <schedule_for_queue_locked+0x34>)
   24d48:	3010      	adds	r0, #16
   24d4a:	f001 ff99 	bl	26c80 <z_add_timeout>

	return ret;
   24d4e:	2001      	movs	r0, #1
}
   24d50:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   24d52:	4631      	mov	r1, r6
   24d54:	f7ff fdb4 	bl	248c0 <submit_to_queue_locked>
   24d58:	e7fa      	b.n	24d50 <schedule_for_queue_locked+0x28>
   24d5a:	bf00      	nop
   24d5c:	000249c9 	.word	0x000249c9

00024d60 <k_work_init>:
{
   24d60:	b570      	push	{r4, r5, r6, lr}
   24d62:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   24d64:	4604      	mov	r4, r0
   24d66:	b130      	cbz	r0, 24d76 <k_work_init+0x16>
	__ASSERT_NO_MSG(handler != NULL);
   24d68:	b18d      	cbz	r5, 24d8e <k_work_init+0x2e>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   24d6a:	2300      	movs	r3, #0
   24d6c:	6023      	str	r3, [r4, #0]
   24d6e:	60a3      	str	r3, [r4, #8]
   24d70:	60e3      	str	r3, [r4, #12]
   24d72:	6065      	str	r5, [r4, #4]
}
   24d74:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   24d76:	4e0c      	ldr	r6, [pc, #48]	; (24da8 <k_work_init+0x48>)
   24d78:	2389      	movs	r3, #137	; 0x89
   24d7a:	4632      	mov	r2, r6
   24d7c:	490b      	ldr	r1, [pc, #44]	; (24dac <k_work_init+0x4c>)
   24d7e:	480c      	ldr	r0, [pc, #48]	; (24db0 <k_work_init+0x50>)
   24d80:	f007 f9e2 	bl	2c148 <printk>
   24d84:	2189      	movs	r1, #137	; 0x89
   24d86:	4630      	mov	r0, r6
   24d88:	f007 fbe3 	bl	2c552 <assert_post_action>
   24d8c:	e7ec      	b.n	24d68 <k_work_init+0x8>
	__ASSERT_NO_MSG(handler != NULL);
   24d8e:	4e06      	ldr	r6, [pc, #24]	; (24da8 <k_work_init+0x48>)
   24d90:	238a      	movs	r3, #138	; 0x8a
   24d92:	4632      	mov	r2, r6
   24d94:	4907      	ldr	r1, [pc, #28]	; (24db4 <k_work_init+0x54>)
   24d96:	4806      	ldr	r0, [pc, #24]	; (24db0 <k_work_init+0x50>)
   24d98:	f007 f9d6 	bl	2c148 <printk>
   24d9c:	218a      	movs	r1, #138	; 0x8a
   24d9e:	4630      	mov	r0, r6
   24da0:	f007 fbd7 	bl	2c552 <assert_post_action>
   24da4:	e7e1      	b.n	24d6a <k_work_init+0xa>
   24da6:	bf00      	nop
   24da8:	00035fbc 	.word	0x00035fbc
   24dac:	00036014 	.word	0x00036014
   24db0:	00031df4 	.word	0x00031df4
   24db4:	00035ffc 	.word	0x00035ffc

00024db8 <k_work_submit_to_queue>:
{
   24db8:	b570      	push	{r4, r5, r6, lr}
   24dba:	b082      	sub	sp, #8
   24dbc:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   24dbe:	460c      	mov	r4, r1
   24dc0:	b309      	cbz	r1, 24e06 <k_work_submit_to_queue+0x4e>
	__asm__ volatile(
   24dc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   24dc6:	f3ef 8611 	mrs	r6, BASEPRI
   24dca:	f383 8812 	msr	BASEPRI_MAX, r3
   24dce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24dd2:	4827      	ldr	r0, [pc, #156]	; (24e70 <k_work_submit_to_queue+0xb8>)
   24dd4:	f7fe feb6 	bl	23b44 <z_spin_lock_valid>
   24dd8:	b318      	cbz	r0, 24e22 <k_work_submit_to_queue+0x6a>
	z_spin_lock_set_owner(l);
   24dda:	4d25      	ldr	r5, [pc, #148]	; (24e70 <k_work_submit_to_queue+0xb8>)
   24ddc:	4628      	mov	r0, r5
   24dde:	f7fe fed1 	bl	23b84 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   24de2:	a901      	add	r1, sp, #4
   24de4:	4620      	mov	r0, r4
   24de6:	f7ff fd6b 	bl	248c0 <submit_to_queue_locked>
   24dea:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dec:	4628      	mov	r0, r5
   24dee:	f7fe feb9 	bl	23b64 <z_spin_unlock_valid>
   24df2:	b330      	cbz	r0, 24e42 <k_work_submit_to_queue+0x8a>
	__asm__ volatile(
   24df4:	f386 8811 	msr	BASEPRI, r6
   24df8:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   24dfc:	2c00      	cmp	r4, #0
   24dfe:	dc30      	bgt.n	24e62 <k_work_submit_to_queue+0xaa>
}
   24e00:	4620      	mov	r0, r4
   24e02:	b002      	add	sp, #8
   24e04:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   24e06:	4d1b      	ldr	r5, [pc, #108]	; (24e74 <k_work_submit_to_queue+0xbc>)
   24e08:	f240 1369 	movw	r3, #361	; 0x169
   24e0c:	462a      	mov	r2, r5
   24e0e:	491a      	ldr	r1, [pc, #104]	; (24e78 <k_work_submit_to_queue+0xc0>)
   24e10:	481a      	ldr	r0, [pc, #104]	; (24e7c <k_work_submit_to_queue+0xc4>)
   24e12:	f007 f999 	bl	2c148 <printk>
   24e16:	f240 1169 	movw	r1, #361	; 0x169
   24e1a:	4628      	mov	r0, r5
   24e1c:	f007 fb99 	bl	2c552 <assert_post_action>
   24e20:	e7cf      	b.n	24dc2 <k_work_submit_to_queue+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24e22:	4d17      	ldr	r5, [pc, #92]	; (24e80 <k_work_submit_to_queue+0xc8>)
   24e24:	2381      	movs	r3, #129	; 0x81
   24e26:	462a      	mov	r2, r5
   24e28:	4916      	ldr	r1, [pc, #88]	; (24e84 <k_work_submit_to_queue+0xcc>)
   24e2a:	4814      	ldr	r0, [pc, #80]	; (24e7c <k_work_submit_to_queue+0xc4>)
   24e2c:	f007 f98c 	bl	2c148 <printk>
   24e30:	490f      	ldr	r1, [pc, #60]	; (24e70 <k_work_submit_to_queue+0xb8>)
   24e32:	4815      	ldr	r0, [pc, #84]	; (24e88 <k_work_submit_to_queue+0xd0>)
   24e34:	f007 f988 	bl	2c148 <printk>
   24e38:	2181      	movs	r1, #129	; 0x81
   24e3a:	4628      	mov	r0, r5
   24e3c:	f007 fb89 	bl	2c552 <assert_post_action>
   24e40:	e7cb      	b.n	24dda <k_work_submit_to_queue+0x22>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e42:	4d0f      	ldr	r5, [pc, #60]	; (24e80 <k_work_submit_to_queue+0xc8>)
   24e44:	23ac      	movs	r3, #172	; 0xac
   24e46:	462a      	mov	r2, r5
   24e48:	4910      	ldr	r1, [pc, #64]	; (24e8c <k_work_submit_to_queue+0xd4>)
   24e4a:	480c      	ldr	r0, [pc, #48]	; (24e7c <k_work_submit_to_queue+0xc4>)
   24e4c:	f007 f97c 	bl	2c148 <printk>
   24e50:	4907      	ldr	r1, [pc, #28]	; (24e70 <k_work_submit_to_queue+0xb8>)
   24e52:	480f      	ldr	r0, [pc, #60]	; (24e90 <k_work_submit_to_queue+0xd8>)
   24e54:	f007 f978 	bl	2c148 <printk>
   24e58:	21ac      	movs	r1, #172	; 0xac
   24e5a:	4628      	mov	r0, r5
   24e5c:	f007 fb79 	bl	2c552 <assert_post_action>
   24e60:	e7c8      	b.n	24df4 <k_work_submit_to_queue+0x3c>
	return z_impl_k_is_preempt_thread();
   24e62:	f001 fd73 	bl	2694c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   24e66:	2800      	cmp	r0, #0
   24e68:	d0ca      	beq.n	24e00 <k_work_submit_to_queue+0x48>
	z_impl_k_yield();
   24e6a:	f001 fbad 	bl	265c8 <z_impl_k_yield>
	return ret;
   24e6e:	e7c7      	b.n	24e00 <k_work_submit_to_queue+0x48>
   24e70:	200035e4 	.word	0x200035e4
   24e74:	00035fbc 	.word	0x00035fbc
   24e78:	00036014 	.word	0x00036014
   24e7c:	00031df4 	.word	0x00031df4
   24e80:	0003234c 	.word	0x0003234c
   24e84:	000323a4 	.word	0x000323a4
   24e88:	000323bc 	.word	0x000323bc
   24e8c:	00032374 	.word	0x00032374
   24e90:	0003238c 	.word	0x0003238c

00024e94 <k_work_submit>:
{
   24e94:	b508      	push	{r3, lr}
   24e96:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   24e98:	4801      	ldr	r0, [pc, #4]	; (24ea0 <k_work_submit+0xc>)
   24e9a:	f7ff ff8d 	bl	24db8 <k_work_submit_to_queue>
}
   24e9e:	bd08      	pop	{r3, pc}
   24ea0:	20002608 	.word	0x20002608

00024ea4 <k_work_queue_start>:
{
   24ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24ea8:	b089      	sub	sp, #36	; 0x24
   24eaa:	460d      	mov	r5, r1
   24eac:	4617      	mov	r7, r2
   24eae:	4698      	mov	r8, r3
   24eb0:	9e10      	ldr	r6, [sp, #64]	; 0x40
	__ASSERT_NO_MSG(queue);
   24eb2:	4604      	mov	r4, r0
   24eb4:	2800      	cmp	r0, #0
   24eb6:	d03e      	beq.n	24f36 <k_work_queue_start+0x92>
	__ASSERT_NO_MSG(stack);
   24eb8:	2d00      	cmp	r5, #0
   24eba:	d04b      	beq.n	24f54 <k_work_queue_start+0xb0>
	return (*flagp & BIT(bit)) != 0U;
   24ebc:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   24ec0:	f013 0f01 	tst.w	r3, #1
   24ec4:	d155      	bne.n	24f72 <k_work_queue_start+0xce>
	list->head = NULL;
   24ec6:	2300      	movs	r3, #0
   24ec8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	list->tail = NULL;
   24ecc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   24ed0:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   24ed4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   24ed8:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   24edc:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   24ee0:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   24ee4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   24ee8:	2e00      	cmp	r6, #0
   24eea:	d051      	beq.n	24f90 <k_work_queue_start+0xec>
   24eec:	7933      	ldrb	r3, [r6, #4]
   24eee:	2b00      	cmp	r3, #0
   24ef0:	d150      	bne.n	24f94 <k_work_queue_start+0xf0>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   24ef2:	2301      	movs	r3, #1
	*flagp = flags;
   24ef4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24ef8:	f04f 32ff 	mov.w	r2, #4294967295
   24efc:	f04f 33ff 	mov.w	r3, #4294967295
   24f00:	e9cd 2306 	strd	r2, r3, [sp, #24]
   24f04:	2200      	movs	r2, #0
   24f06:	9204      	str	r2, [sp, #16]
   24f08:	f8cd 800c 	str.w	r8, [sp, #12]
   24f0c:	9202      	str	r2, [sp, #8]
   24f0e:	9201      	str	r2, [sp, #4]
   24f10:	9400      	str	r4, [sp, #0]
   24f12:	4b22      	ldr	r3, [pc, #136]	; (24f9c <k_work_queue_start+0xf8>)
   24f14:	463a      	mov	r2, r7
   24f16:	4629      	mov	r1, r5
   24f18:	4620      	mov	r0, r4
   24f1a:	f7fe ff5b 	bl	23dd4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   24f1e:	b126      	cbz	r6, 24f2a <k_work_queue_start+0x86>
   24f20:	6831      	ldr	r1, [r6, #0]
   24f22:	b111      	cbz	r1, 24f2a <k_work_queue_start+0x86>
	return z_impl_k_thread_name_set(thread, str);
   24f24:	4620      	mov	r0, r4
   24f26:	f7fe fde9 	bl	23afc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   24f2a:	4620      	mov	r0, r4
   24f2c:	f00b fad5 	bl	304da <z_impl_k_thread_start>
}
   24f30:	b009      	add	sp, #36	; 0x24
   24f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(queue);
   24f36:	f8df 9078 	ldr.w	r9, [pc, #120]	; 24fb0 <k_work_queue_start+0x10c>
   24f3a:	f240 23b5 	movw	r3, #693	; 0x2b5
   24f3e:	464a      	mov	r2, r9
   24f40:	4917      	ldr	r1, [pc, #92]	; (24fa0 <k_work_queue_start+0xfc>)
   24f42:	4818      	ldr	r0, [pc, #96]	; (24fa4 <k_work_queue_start+0x100>)
   24f44:	f007 f900 	bl	2c148 <printk>
   24f48:	f240 21b5 	movw	r1, #693	; 0x2b5
   24f4c:	4648      	mov	r0, r9
   24f4e:	f007 fb00 	bl	2c552 <assert_post_action>
   24f52:	e7b1      	b.n	24eb8 <k_work_queue_start+0x14>
	__ASSERT_NO_MSG(stack);
   24f54:	f8df 9058 	ldr.w	r9, [pc, #88]	; 24fb0 <k_work_queue_start+0x10c>
   24f58:	f240 23b6 	movw	r3, #694	; 0x2b6
   24f5c:	464a      	mov	r2, r9
   24f5e:	4912      	ldr	r1, [pc, #72]	; (24fa8 <k_work_queue_start+0x104>)
   24f60:	4810      	ldr	r0, [pc, #64]	; (24fa4 <k_work_queue_start+0x100>)
   24f62:	f007 f8f1 	bl	2c148 <printk>
   24f66:	f240 21b6 	movw	r1, #694	; 0x2b6
   24f6a:	4648      	mov	r0, r9
   24f6c:	f007 faf1 	bl	2c552 <assert_post_action>
   24f70:	e7a4      	b.n	24ebc <k_work_queue_start+0x18>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   24f72:	f8df 903c 	ldr.w	r9, [pc, #60]	; 24fb0 <k_work_queue_start+0x10c>
   24f76:	f240 23b7 	movw	r3, #695	; 0x2b7
   24f7a:	464a      	mov	r2, r9
   24f7c:	490b      	ldr	r1, [pc, #44]	; (24fac <k_work_queue_start+0x108>)
   24f7e:	4809      	ldr	r0, [pc, #36]	; (24fa4 <k_work_queue_start+0x100>)
   24f80:	f007 f8e2 	bl	2c148 <printk>
   24f84:	f240 21b7 	movw	r1, #695	; 0x2b7
   24f88:	4648      	mov	r0, r9
   24f8a:	f007 fae2 	bl	2c552 <assert_post_action>
   24f8e:	e79a      	b.n	24ec6 <k_work_queue_start+0x22>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   24f90:	2301      	movs	r3, #1
   24f92:	e7af      	b.n	24ef4 <k_work_queue_start+0x50>
		flags |= K_WORK_QUEUE_NO_YIELD;
   24f94:	f240 1301 	movw	r3, #257	; 0x101
   24f98:	e7ac      	b.n	24ef4 <k_work_queue_start+0x50>
   24f9a:	bf00      	nop
   24f9c:	00024b41 	.word	0x00024b41
   24fa0:	0003606c 	.word	0x0003606c
   24fa4:	00031df4 	.word	0x00031df4
   24fa8:	00036074 	.word	0x00036074
   24fac:	0003607c 	.word	0x0003607c
   24fb0:	00035fbc 	.word	0x00035fbc

00024fb4 <k_work_init_delayable>:
{
   24fb4:	b570      	push	{r4, r5, r6, lr}
   24fb6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(dwork != NULL);
   24fb8:	4605      	mov	r5, r0
   24fba:	b150      	cbz	r0, 24fd2 <k_work_init_delayable+0x1e>
	__ASSERT_NO_MSG(handler != NULL);
   24fbc:	b1bc      	cbz	r4, 24fee <k_work_init_delayable+0x3a>
	*dwork = (struct k_work_delayable){
   24fbe:	2230      	movs	r2, #48	; 0x30
   24fc0:	2100      	movs	r1, #0
   24fc2:	4628      	mov	r0, r5
   24fc4:	f00b fc9c 	bl	30900 <memset>
   24fc8:	606c      	str	r4, [r5, #4]
   24fca:	f44f 7380 	mov.w	r3, #256	; 0x100
   24fce:	60eb      	str	r3, [r5, #12]
}
   24fd0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   24fd2:	4e0e      	ldr	r6, [pc, #56]	; (2500c <k_work_init_delayable+0x58>)
   24fd4:	f240 332d 	movw	r3, #813	; 0x32d
   24fd8:	4632      	mov	r2, r6
   24fda:	490d      	ldr	r1, [pc, #52]	; (25010 <k_work_init_delayable+0x5c>)
   24fdc:	480d      	ldr	r0, [pc, #52]	; (25014 <k_work_init_delayable+0x60>)
   24fde:	f007 f8b3 	bl	2c148 <printk>
   24fe2:	f240 312d 	movw	r1, #813	; 0x32d
   24fe6:	4630      	mov	r0, r6
   24fe8:	f007 fab3 	bl	2c552 <assert_post_action>
   24fec:	e7e6      	b.n	24fbc <k_work_init_delayable+0x8>
	__ASSERT_NO_MSG(handler != NULL);
   24fee:	4e07      	ldr	r6, [pc, #28]	; (2500c <k_work_init_delayable+0x58>)
   24ff0:	f240 332e 	movw	r3, #814	; 0x32e
   24ff4:	4632      	mov	r2, r6
   24ff6:	4908      	ldr	r1, [pc, #32]	; (25018 <k_work_init_delayable+0x64>)
   24ff8:	4806      	ldr	r0, [pc, #24]	; (25014 <k_work_init_delayable+0x60>)
   24ffa:	f007 f8a5 	bl	2c148 <printk>
   24ffe:	f240 312e 	movw	r1, #814	; 0x32e
   25002:	4630      	mov	r0, r6
   25004:	f007 faa5 	bl	2c552 <assert_post_action>
   25008:	e7d9      	b.n	24fbe <k_work_init_delayable+0xa>
   2500a:	bf00      	nop
   2500c:	00035fbc 	.word	0x00035fbc
   25010:	000360b0 	.word	0x000360b0
   25014:	00031df4 	.word	0x00031df4
   25018:	00035ffc 	.word	0x00035ffc

0002501c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2501c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25020:	b082      	sub	sp, #8
   25022:	9001      	str	r0, [sp, #4]
   25024:	4617      	mov	r7, r2
   25026:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   25028:	460c      	mov	r4, r1
   2502a:	b1f9      	cbz	r1, 2506c <k_work_schedule_for_queue+0x50>
	__asm__ volatile(
   2502c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25030:	f3ef 8611 	mrs	r6, BASEPRI
   25034:	f383 8812 	msr	BASEPRI_MAX, r3
   25038:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2503c:	4827      	ldr	r0, [pc, #156]	; (250dc <k_work_schedule_for_queue+0xc0>)
   2503e:	f7fe fd81 	bl	23b44 <z_spin_lock_valid>
   25042:	b308      	cbz	r0, 25088 <k_work_schedule_for_queue+0x6c>
	z_spin_lock_set_owner(l);
   25044:	4825      	ldr	r0, [pc, #148]	; (250dc <k_work_schedule_for_queue+0xc0>)
   25046:	f7fe fd9d 	bl	23b84 <z_spin_lock_set_owner>
	return *flagp;
   2504a:	68e1      	ldr	r1, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2504c:	f011 0f0e 	tst.w	r1, #14
   25050:	d02b      	beq.n	250aa <k_work_schedule_for_queue+0x8e>
	int ret = 0;
   25052:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25054:	4821      	ldr	r0, [pc, #132]	; (250dc <k_work_schedule_for_queue+0xc0>)
   25056:	f7fe fd85 	bl	23b64 <z_spin_unlock_valid>
   2505a:	b370      	cbz	r0, 250ba <k_work_schedule_for_queue+0x9e>
	__asm__ volatile(
   2505c:	f386 8811 	msr	BASEPRI, r6
   25060:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25064:	4620      	mov	r0, r4
   25066:	b002      	add	sp, #8
   25068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   2506c:	4e1c      	ldr	r6, [pc, #112]	; (250e0 <k_work_schedule_for_queue+0xc4>)
   2506e:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   25072:	4632      	mov	r2, r6
   25074:	491b      	ldr	r1, [pc, #108]	; (250e4 <k_work_schedule_for_queue+0xc8>)
   25076:	481c      	ldr	r0, [pc, #112]	; (250e8 <k_work_schedule_for_queue+0xcc>)
   25078:	f007 f866 	bl	2c148 <printk>
   2507c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   25080:	4630      	mov	r0, r6
   25082:	f007 fa66 	bl	2c552 <assert_post_action>
   25086:	e7d1      	b.n	2502c <k_work_schedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25088:	f8df 8068 	ldr.w	r8, [pc, #104]	; 250f4 <k_work_schedule_for_queue+0xd8>
   2508c:	2381      	movs	r3, #129	; 0x81
   2508e:	4642      	mov	r2, r8
   25090:	4916      	ldr	r1, [pc, #88]	; (250ec <k_work_schedule_for_queue+0xd0>)
   25092:	4815      	ldr	r0, [pc, #84]	; (250e8 <k_work_schedule_for_queue+0xcc>)
   25094:	f007 f858 	bl	2c148 <printk>
   25098:	4910      	ldr	r1, [pc, #64]	; (250dc <k_work_schedule_for_queue+0xc0>)
   2509a:	4815      	ldr	r0, [pc, #84]	; (250f0 <k_work_schedule_for_queue+0xd4>)
   2509c:	f007 f854 	bl	2c148 <printk>
   250a0:	2181      	movs	r1, #129	; 0x81
   250a2:	4640      	mov	r0, r8
   250a4:	f007 fa55 	bl	2c552 <assert_post_action>
   250a8:	e7cc      	b.n	25044 <k_work_schedule_for_queue+0x28>
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   250aa:	463a      	mov	r2, r7
   250ac:	462b      	mov	r3, r5
   250ae:	4621      	mov	r1, r4
   250b0:	a801      	add	r0, sp, #4
   250b2:	f7ff fe39 	bl	24d28 <schedule_for_queue_locked>
   250b6:	4604      	mov	r4, r0
   250b8:	e7cc      	b.n	25054 <k_work_schedule_for_queue+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   250ba:	4d0e      	ldr	r5, [pc, #56]	; (250f4 <k_work_schedule_for_queue+0xd8>)
   250bc:	23ac      	movs	r3, #172	; 0xac
   250be:	462a      	mov	r2, r5
   250c0:	490d      	ldr	r1, [pc, #52]	; (250f8 <k_work_schedule_for_queue+0xdc>)
   250c2:	4809      	ldr	r0, [pc, #36]	; (250e8 <k_work_schedule_for_queue+0xcc>)
   250c4:	f007 f840 	bl	2c148 <printk>
   250c8:	4904      	ldr	r1, [pc, #16]	; (250dc <k_work_schedule_for_queue+0xc0>)
   250ca:	480c      	ldr	r0, [pc, #48]	; (250fc <k_work_schedule_for_queue+0xe0>)
   250cc:	f007 f83c 	bl	2c148 <printk>
   250d0:	21ac      	movs	r1, #172	; 0xac
   250d2:	4628      	mov	r0, r5
   250d4:	f007 fa3d 	bl	2c552 <assert_post_action>
   250d8:	e7c0      	b.n	2505c <k_work_schedule_for_queue+0x40>
   250da:	bf00      	nop
   250dc:	200035e4 	.word	0x200035e4
   250e0:	00035fbc 	.word	0x00035fbc
   250e4:	000360b0 	.word	0x000360b0
   250e8:	00031df4 	.word	0x00031df4
   250ec:	000323a4 	.word	0x000323a4
   250f0:	000323bc 	.word	0x000323bc
   250f4:	0003234c 	.word	0x0003234c
   250f8:	00032374 	.word	0x00032374
   250fc:	0003238c 	.word	0x0003238c

00025100 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   25100:	b508      	push	{r3, lr}
   25102:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   25104:	4801      	ldr	r0, [pc, #4]	; (2510c <k_work_schedule+0xc>)
   25106:	f7ff ff89 	bl	2501c <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   2510a:	bd08      	pop	{r3, pc}
   2510c:	20002608 	.word	0x20002608

00025110 <k_work_reschedule_for_queue>:

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   25110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25114:	b082      	sub	sp, #8
   25116:	9001      	str	r0, [sp, #4]
   25118:	4616      	mov	r6, r2
   2511a:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2511c:	460c      	mov	r4, r1
   2511e:	b341      	cbz	r1, 25172 <k_work_reschedule_for_queue+0x62>
	__asm__ volatile(
   25120:	f04f 0340 	mov.w	r3, #64	; 0x40
   25124:	f3ef 8711 	mrs	r7, BASEPRI
   25128:	f383 8812 	msr	BASEPRI_MAX, r3
   2512c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25130:	482a      	ldr	r0, [pc, #168]	; (251dc <k_work_reschedule_for_queue+0xcc>)
   25132:	f7fe fd07 	bl	23b44 <z_spin_lock_valid>
   25136:	b350      	cbz	r0, 2518e <k_work_reschedule_for_queue+0x7e>
	z_spin_lock_set_owner(l);
   25138:	4828      	ldr	r0, [pc, #160]	; (251dc <k_work_reschedule_for_queue+0xcc>)
   2513a:	f7fe fd23 	bl	23b84 <z_spin_lock_set_owner>
	return (*flagp & BIT(bit)) != 0U;
   2513e:	68e3      	ldr	r3, [r4, #12]
	*flagp &= ~BIT(bit);
   25140:	f023 0208 	bic.w	r2, r3, #8
   25144:	60e2      	str	r2, [r4, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   25146:	f013 0f08 	tst.w	r3, #8
   2514a:	d131      	bne.n	251b0 <k_work_reschedule_for_queue+0xa0>

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);

	/* Schedule the work item with the new parameters. */
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   2514c:	4632      	mov	r2, r6
   2514e:	462b      	mov	r3, r5
   25150:	4621      	mov	r1, r4
   25152:	a801      	add	r0, sp, #4
   25154:	f7ff fde8 	bl	24d28 <schedule_for_queue_locked>
   25158:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2515a:	4820      	ldr	r0, [pc, #128]	; (251dc <k_work_reschedule_for_queue+0xcc>)
   2515c:	f7fe fd02 	bl	23b64 <z_spin_unlock_valid>
   25160:	b358      	cbz	r0, 251ba <k_work_reschedule_for_queue+0xaa>
	__asm__ volatile(
   25162:	f387 8811 	msr	BASEPRI, r7
   25166:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2516a:	4620      	mov	r0, r4
   2516c:	b002      	add	sp, #8
   2516e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   25172:	4f1b      	ldr	r7, [pc, #108]	; (251e0 <k_work_reschedule_for_queue+0xd0>)
   25174:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   25178:	463a      	mov	r2, r7
   2517a:	491a      	ldr	r1, [pc, #104]	; (251e4 <k_work_reschedule_for_queue+0xd4>)
   2517c:	481a      	ldr	r0, [pc, #104]	; (251e8 <k_work_reschedule_for_queue+0xd8>)
   2517e:	f006 ffe3 	bl	2c148 <printk>
   25182:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   25186:	4638      	mov	r0, r7
   25188:	f007 f9e3 	bl	2c552 <assert_post_action>
   2518c:	e7c8      	b.n	25120 <k_work_reschedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2518e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 251f4 <k_work_reschedule_for_queue+0xe4>
   25192:	2381      	movs	r3, #129	; 0x81
   25194:	4642      	mov	r2, r8
   25196:	4915      	ldr	r1, [pc, #84]	; (251ec <k_work_reschedule_for_queue+0xdc>)
   25198:	4813      	ldr	r0, [pc, #76]	; (251e8 <k_work_reschedule_for_queue+0xd8>)
   2519a:	f006 ffd5 	bl	2c148 <printk>
   2519e:	490f      	ldr	r1, [pc, #60]	; (251dc <k_work_reschedule_for_queue+0xcc>)
   251a0:	4813      	ldr	r0, [pc, #76]	; (251f0 <k_work_reschedule_for_queue+0xe0>)
   251a2:	f006 ffd1 	bl	2c148 <printk>
   251a6:	2181      	movs	r1, #129	; 0x81
   251a8:	4640      	mov	r0, r8
   251aa:	f007 f9d2 	bl	2c552 <assert_post_action>
   251ae:	e7c3      	b.n	25138 <k_work_reschedule_for_queue+0x28>
		z_abort_timeout(&dwork->timeout);
   251b0:	f104 0010 	add.w	r0, r4, #16
   251b4:	f001 fe60 	bl	26e78 <z_abort_timeout>
		ret = true;
   251b8:	e7c8      	b.n	2514c <k_work_reschedule_for_queue+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   251ba:	4d0e      	ldr	r5, [pc, #56]	; (251f4 <k_work_reschedule_for_queue+0xe4>)
   251bc:	23ac      	movs	r3, #172	; 0xac
   251be:	462a      	mov	r2, r5
   251c0:	490d      	ldr	r1, [pc, #52]	; (251f8 <k_work_reschedule_for_queue+0xe8>)
   251c2:	4809      	ldr	r0, [pc, #36]	; (251e8 <k_work_reschedule_for_queue+0xd8>)
   251c4:	f006 ffc0 	bl	2c148 <printk>
   251c8:	4904      	ldr	r1, [pc, #16]	; (251dc <k_work_reschedule_for_queue+0xcc>)
   251ca:	480c      	ldr	r0, [pc, #48]	; (251fc <k_work_reschedule_for_queue+0xec>)
   251cc:	f006 ffbc 	bl	2c148 <printk>
   251d0:	21ac      	movs	r1, #172	; 0xac
   251d2:	4628      	mov	r0, r5
   251d4:	f007 f9bd 	bl	2c552 <assert_post_action>
   251d8:	e7c3      	b.n	25162 <k_work_reschedule_for_queue+0x52>
   251da:	bf00      	nop
   251dc:	200035e4 	.word	0x200035e4
   251e0:	00035fbc 	.word	0x00035fbc
   251e4:	000360b0 	.word	0x000360b0
   251e8:	00031df4 	.word	0x00031df4
   251ec:	000323a4 	.word	0x000323a4
   251f0:	000323bc 	.word	0x000323bc
   251f4:	0003234c 	.word	0x0003234c
   251f8:	00032374 	.word	0x00032374
   251fc:	0003238c 	.word	0x0003238c

00025200 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   25200:	b508      	push	{r3, lr}
   25202:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   25204:	4801      	ldr	r0, [pc, #4]	; (2520c <k_work_reschedule+0xc>)
   25206:	f7ff ff83 	bl	25110 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   2520a:	bd08      	pop	{r3, pc}
   2520c:	20002608 	.word	0x20002608

00025210 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   25210:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   25212:	4604      	mov	r4, r0
   25214:	b1e8      	cbz	r0, 25252 <k_work_cancel_delayable+0x42>
	__asm__ volatile(
   25216:	f04f 0340 	mov.w	r3, #64	; 0x40
   2521a:	f3ef 8611 	mrs	r6, BASEPRI
   2521e:	f383 8812 	msr	BASEPRI_MAX, r3
   25222:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25226:	4822      	ldr	r0, [pc, #136]	; (252b0 <k_work_cancel_delayable+0xa0>)
   25228:	f7fe fc8c 	bl	23b44 <z_spin_lock_valid>
   2522c:	b1f8      	cbz	r0, 2526e <k_work_cancel_delayable+0x5e>
	z_spin_lock_set_owner(l);
   2522e:	4d20      	ldr	r5, [pc, #128]	; (252b0 <k_work_cancel_delayable+0xa0>)
   25230:	4628      	mov	r0, r5
   25232:	f7fe fca7 	bl	23b84 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   25236:	4620      	mov	r0, r4
   25238:	f00b fa11 	bl	3065e <cancel_delayable_async_locked>
   2523c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2523e:	4628      	mov	r0, r5
   25240:	f7fe fc90 	bl	23b64 <z_spin_unlock_valid>
   25244:	b318      	cbz	r0, 2528e <k_work_cancel_delayable+0x7e>
	__asm__ volatile(
   25246:	f386 8811 	msr	BASEPRI, r6
   2524a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2524e:	4620      	mov	r0, r4
   25250:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   25252:	4d18      	ldr	r5, [pc, #96]	; (252b4 <k_work_cancel_delayable+0xa4>)
   25254:	f240 33ea 	movw	r3, #1002	; 0x3ea
   25258:	462a      	mov	r2, r5
   2525a:	4917      	ldr	r1, [pc, #92]	; (252b8 <k_work_cancel_delayable+0xa8>)
   2525c:	4817      	ldr	r0, [pc, #92]	; (252bc <k_work_cancel_delayable+0xac>)
   2525e:	f006 ff73 	bl	2c148 <printk>
   25262:	f240 31ea 	movw	r1, #1002	; 0x3ea
   25266:	4628      	mov	r0, r5
   25268:	f007 f973 	bl	2c552 <assert_post_action>
   2526c:	e7d3      	b.n	25216 <k_work_cancel_delayable+0x6>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2526e:	4d14      	ldr	r5, [pc, #80]	; (252c0 <k_work_cancel_delayable+0xb0>)
   25270:	2381      	movs	r3, #129	; 0x81
   25272:	462a      	mov	r2, r5
   25274:	4913      	ldr	r1, [pc, #76]	; (252c4 <k_work_cancel_delayable+0xb4>)
   25276:	4811      	ldr	r0, [pc, #68]	; (252bc <k_work_cancel_delayable+0xac>)
   25278:	f006 ff66 	bl	2c148 <printk>
   2527c:	490c      	ldr	r1, [pc, #48]	; (252b0 <k_work_cancel_delayable+0xa0>)
   2527e:	4812      	ldr	r0, [pc, #72]	; (252c8 <k_work_cancel_delayable+0xb8>)
   25280:	f006 ff62 	bl	2c148 <printk>
   25284:	2181      	movs	r1, #129	; 0x81
   25286:	4628      	mov	r0, r5
   25288:	f007 f963 	bl	2c552 <assert_post_action>
   2528c:	e7cf      	b.n	2522e <k_work_cancel_delayable+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2528e:	4d0c      	ldr	r5, [pc, #48]	; (252c0 <k_work_cancel_delayable+0xb0>)
   25290:	23ac      	movs	r3, #172	; 0xac
   25292:	462a      	mov	r2, r5
   25294:	490d      	ldr	r1, [pc, #52]	; (252cc <k_work_cancel_delayable+0xbc>)
   25296:	4809      	ldr	r0, [pc, #36]	; (252bc <k_work_cancel_delayable+0xac>)
   25298:	f006 ff56 	bl	2c148 <printk>
   2529c:	4904      	ldr	r1, [pc, #16]	; (252b0 <k_work_cancel_delayable+0xa0>)
   2529e:	480c      	ldr	r0, [pc, #48]	; (252d0 <k_work_cancel_delayable+0xc0>)
   252a0:	f006 ff52 	bl	2c148 <printk>
   252a4:	21ac      	movs	r1, #172	; 0xac
   252a6:	4628      	mov	r0, r5
   252a8:	f007 f953 	bl	2c552 <assert_post_action>
   252ac:	e7cb      	b.n	25246 <k_work_cancel_delayable+0x36>
   252ae:	bf00      	nop
   252b0:	200035e4 	.word	0x200035e4
   252b4:	00035fbc 	.word	0x00035fbc
   252b8:	000360b0 	.word	0x000360b0
   252bc:	00031df4 	.word	0x00031df4
   252c0:	0003234c 	.word	0x0003234c
   252c4:	000323a4 	.word	0x000323a4
   252c8:	000323bc 	.word	0x000323bc
   252cc:	00032374 	.word	0x00032374
   252d0:	0003238c 	.word	0x0003238c

000252d4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   252d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252d8:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(dwork != NULL);
   252da:	4605      	mov	r5, r0
   252dc:	2800      	cmp	r0, #0
   252de:	d02c      	beq.n	2533a <k_work_cancel_delayable_sync+0x66>
	__ASSERT_NO_MSG(sync != NULL);
   252e0:	2c00      	cmp	r4, #0
   252e2:	d038      	beq.n	25356 <k_work_cancel_delayable_sync+0x82>
	__ASSERT_NO_MSG(!k_is_in_isr());
   252e4:	f00b f8f1 	bl	304ca <k_is_in_isr>
   252e8:	2800      	cmp	r0, #0
   252ea:	d142      	bne.n	25372 <k_work_cancel_delayable_sync+0x9e>
	__asm__ volatile(
   252ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   252f0:	f3ef 8711 	mrs	r7, BASEPRI
   252f4:	f383 8812 	msr	BASEPRI_MAX, r3
   252f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   252fc:	483d      	ldr	r0, [pc, #244]	; (253f4 <k_work_cancel_delayable_sync+0x120>)
   252fe:	f7fe fc21 	bl	23b44 <z_spin_lock_valid>
   25302:	2800      	cmp	r0, #0
   25304:	d043      	beq.n	2538e <k_work_cancel_delayable_sync+0xba>
	z_spin_lock_set_owner(l);
   25306:	483b      	ldr	r0, [pc, #236]	; (253f4 <k_work_cancel_delayable_sync+0x120>)
   25308:	f7fe fc3c 	bl	23b84 <z_spin_lock_set_owner>
	return *flagp;
   2530c:	68eb      	ldr	r3, [r5, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2530e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   25312:	2b00      	cmp	r3, #0
   25314:	bf14      	ite	ne
   25316:	2601      	movne	r6, #1
   25318:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2531a:	d148      	bne.n	253ae <k_work_cancel_delayable_sync+0xda>
	bool need_wait = false;
   2531c:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2531e:	4835      	ldr	r0, [pc, #212]	; (253f4 <k_work_cancel_delayable_sync+0x120>)
   25320:	f7fe fc20 	bl	23b64 <z_spin_unlock_valid>
   25324:	2800      	cmp	r0, #0
   25326:	d04b      	beq.n	253c0 <k_work_cancel_delayable_sync+0xec>
	__asm__ volatile(
   25328:	f387 8811 	msr	BASEPRI, r7
   2532c:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   25330:	2d00      	cmp	r5, #0
   25332:	d156      	bne.n	253e2 <k_work_cancel_delayable_sync+0x10e>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   25334:	4630      	mov	r0, r6
   25336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   2533a:	4e2f      	ldr	r6, [pc, #188]	; (253f8 <k_work_cancel_delayable_sync+0x124>)
   2533c:	f240 33fb 	movw	r3, #1019	; 0x3fb
   25340:	4632      	mov	r2, r6
   25342:	492e      	ldr	r1, [pc, #184]	; (253fc <k_work_cancel_delayable_sync+0x128>)
   25344:	482e      	ldr	r0, [pc, #184]	; (25400 <k_work_cancel_delayable_sync+0x12c>)
   25346:	f006 feff 	bl	2c148 <printk>
   2534a:	f240 31fb 	movw	r1, #1019	; 0x3fb
   2534e:	4630      	mov	r0, r6
   25350:	f007 f8ff 	bl	2c552 <assert_post_action>
   25354:	e7c4      	b.n	252e0 <k_work_cancel_delayable_sync+0xc>
	__ASSERT_NO_MSG(sync != NULL);
   25356:	4e28      	ldr	r6, [pc, #160]	; (253f8 <k_work_cancel_delayable_sync+0x124>)
   25358:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
   2535c:	4632      	mov	r2, r6
   2535e:	4929      	ldr	r1, [pc, #164]	; (25404 <k_work_cancel_delayable_sync+0x130>)
   25360:	4827      	ldr	r0, [pc, #156]	; (25400 <k_work_cancel_delayable_sync+0x12c>)
   25362:	f006 fef1 	bl	2c148 <printk>
   25366:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   2536a:	4630      	mov	r0, r6
   2536c:	f007 f8f1 	bl	2c552 <assert_post_action>
   25370:	e7b8      	b.n	252e4 <k_work_cancel_delayable_sync+0x10>
	__ASSERT_NO_MSG(!k_is_in_isr());
   25372:	4e21      	ldr	r6, [pc, #132]	; (253f8 <k_work_cancel_delayable_sync+0x124>)
   25374:	f240 33fd 	movw	r3, #1021	; 0x3fd
   25378:	4632      	mov	r2, r6
   2537a:	4923      	ldr	r1, [pc, #140]	; (25408 <k_work_cancel_delayable_sync+0x134>)
   2537c:	4820      	ldr	r0, [pc, #128]	; (25400 <k_work_cancel_delayable_sync+0x12c>)
   2537e:	f006 fee3 	bl	2c148 <printk>
   25382:	f240 31fd 	movw	r1, #1021	; 0x3fd
   25386:	4630      	mov	r0, r6
   25388:	f007 f8e3 	bl	2c552 <assert_post_action>
   2538c:	e7ae      	b.n	252ec <k_work_cancel_delayable_sync+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2538e:	4e1f      	ldr	r6, [pc, #124]	; (2540c <k_work_cancel_delayable_sync+0x138>)
   25390:	2381      	movs	r3, #129	; 0x81
   25392:	4632      	mov	r2, r6
   25394:	491e      	ldr	r1, [pc, #120]	; (25410 <k_work_cancel_delayable_sync+0x13c>)
   25396:	481a      	ldr	r0, [pc, #104]	; (25400 <k_work_cancel_delayable_sync+0x12c>)
   25398:	f006 fed6 	bl	2c148 <printk>
   2539c:	4915      	ldr	r1, [pc, #84]	; (253f4 <k_work_cancel_delayable_sync+0x120>)
   2539e:	481d      	ldr	r0, [pc, #116]	; (25414 <k_work_cancel_delayable_sync+0x140>)
   253a0:	f006 fed2 	bl	2c148 <printk>
   253a4:	2181      	movs	r1, #129	; 0x81
   253a6:	4630      	mov	r0, r6
   253a8:	f007 f8d3 	bl	2c552 <assert_post_action>
   253ac:	e7ab      	b.n	25306 <k_work_cancel_delayable_sync+0x32>
		(void)cancel_delayable_async_locked(dwork);
   253ae:	4628      	mov	r0, r5
   253b0:	f00b f955 	bl	3065e <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   253b4:	4621      	mov	r1, r4
   253b6:	4628      	mov	r0, r5
   253b8:	f7ff fba0 	bl	24afc <cancel_sync_locked>
   253bc:	4605      	mov	r5, r0
   253be:	e7ae      	b.n	2531e <k_work_cancel_delayable_sync+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   253c0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2540c <k_work_cancel_delayable_sync+0x138>
   253c4:	23ac      	movs	r3, #172	; 0xac
   253c6:	4642      	mov	r2, r8
   253c8:	4913      	ldr	r1, [pc, #76]	; (25418 <k_work_cancel_delayable_sync+0x144>)
   253ca:	480d      	ldr	r0, [pc, #52]	; (25400 <k_work_cancel_delayable_sync+0x12c>)
   253cc:	f006 febc 	bl	2c148 <printk>
   253d0:	4908      	ldr	r1, [pc, #32]	; (253f4 <k_work_cancel_delayable_sync+0x120>)
   253d2:	4812      	ldr	r0, [pc, #72]	; (2541c <k_work_cancel_delayable_sync+0x148>)
   253d4:	f006 feb8 	bl	2c148 <printk>
   253d8:	21ac      	movs	r1, #172	; 0xac
   253da:	4640      	mov	r0, r8
   253dc:	f007 f8b9 	bl	2c552 <assert_post_action>
   253e0:	e7a2      	b.n	25328 <k_work_cancel_delayable_sync+0x54>
		k_sem_take(&canceller->sem, K_FOREVER);
   253e2:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
   253e6:	f04f 32ff 	mov.w	r2, #4294967295
   253ea:	f04f 33ff 	mov.w	r3, #4294967295
   253ee:	f7ff f9b7 	bl	24760 <z_impl_k_sem_take>
   253f2:	e79f      	b.n	25334 <k_work_cancel_delayable_sync+0x60>
   253f4:	200035e4 	.word	0x200035e4
   253f8:	00035fbc 	.word	0x00035fbc
   253fc:	000360b0 	.word	0x000360b0
   25400:	00031df4 	.word	0x00031df4
   25404:	00036058 	.word	0x00036058
   25408:	000340dc 	.word	0x000340dc
   2540c:	0003234c 	.word	0x0003234c
   25410:	000323a4 	.word	0x000323a4
   25414:	000323bc 	.word	0x000323bc
   25418:	00032374 	.word	0x00032374
   2541c:	0003238c 	.word	0x0003238c

00025420 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
   25420:	b538      	push	{r3, r4, r5, lr}
   25422:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   25424:	6883      	ldr	r3, [r0, #8]
   25426:	b10b      	cbz	r3, 2542c <pended_on_thread+0xc>

	return thread->base.pended_on;
}
   25428:	68a0      	ldr	r0, [r4, #8]
   2542a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
   2542c:	4d06      	ldr	r5, [pc, #24]	; (25448 <pended_on_thread+0x28>)
   2542e:	f240 2383 	movw	r3, #643	; 0x283
   25432:	462a      	mov	r2, r5
   25434:	4905      	ldr	r1, [pc, #20]	; (2544c <pended_on_thread+0x2c>)
   25436:	4806      	ldr	r0, [pc, #24]	; (25450 <pended_on_thread+0x30>)
   25438:	f006 fe86 	bl	2c148 <printk>
   2543c:	f240 2183 	movw	r1, #643	; 0x283
   25440:	4628      	mov	r0, r5
   25442:	f007 f886 	bl	2c552 <assert_post_action>
   25446:	e7ef      	b.n	25428 <pended_on_thread+0x8>
   25448:	000360c8 	.word	0x000360c8
   2544c:	000360ec 	.word	0x000360ec
   25450:	00031df4 	.word	0x00031df4

00025454 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   25454:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25456:	f1b3 3fff 	cmp.w	r3, #4294967295
   2545a:	bf08      	it	eq
   2545c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   25460:	d100      	bne.n	25464 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   25462:	bd38      	pop	{r3, r4, r5, pc}
   25464:	4902      	ldr	r1, [pc, #8]	; (25470 <add_thread_timeout+0x1c>)
   25466:	3018      	adds	r0, #24
   25468:	f001 fc0a 	bl	26c80 <z_add_timeout>
   2546c:	e7f9      	b.n	25462 <add_thread_timeout+0xe>
   2546e:	bf00      	nop
   25470:	00025d59 	.word	0x00025d59

00025474 <z_reset_time_slice>:
{
   25474:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   25476:	4b08      	ldr	r3, [pc, #32]	; (25498 <z_reset_time_slice+0x24>)
   25478:	681b      	ldr	r3, [r3, #0]
   2547a:	b903      	cbnz	r3, 2547e <z_reset_time_slice+0xa>
}
   2547c:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   2547e:	f7fa fc6d 	bl	1fd5c <sys_clock_elapsed>
   25482:	4603      	mov	r3, r0
   25484:	4a04      	ldr	r2, [pc, #16]	; (25498 <z_reset_time_slice+0x24>)
   25486:	6810      	ldr	r0, [r2, #0]
   25488:	4403      	add	r3, r0
   2548a:	4a04      	ldr	r2, [pc, #16]	; (2549c <z_reset_time_slice+0x28>)
   2548c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2548e:	2100      	movs	r1, #0
   25490:	f001 fd9e 	bl	26fd0 <z_set_timeout_expiry>
}
   25494:	e7f2      	b.n	2547c <z_reset_time_slice+0x8>
   25496:	bf00      	nop
   25498:	200035fc 	.word	0x200035fc
   2549c:	200035ac 	.word	0x200035ac

000254a0 <k_sched_time_slice_set>:
{
   254a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   254a4:	4606      	mov	r6, r0
   254a6:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   254a8:	2400      	movs	r4, #0
	__asm__ volatile(
   254aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   254ae:	f3ef 8711 	mrs	r7, BASEPRI
   254b2:	f383 8812 	msr	BASEPRI_MAX, r3
   254b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   254ba:	4829      	ldr	r0, [pc, #164]	; (25560 <k_sched_time_slice_set+0xc0>)
   254bc:	f7fe fb42 	bl	23b44 <z_spin_lock_valid>
   254c0:	b118      	cbz	r0, 254ca <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
   254c2:	4827      	ldr	r0, [pc, #156]	; (25560 <k_sched_time_slice_set+0xc0>)
   254c4:	f7fe fb5e 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   254c8:	e01d      	b.n	25506 <k_sched_time_slice_set+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   254ca:	4d26      	ldr	r5, [pc, #152]	; (25564 <k_sched_time_slice_set+0xc4>)
   254cc:	2381      	movs	r3, #129	; 0x81
   254ce:	462a      	mov	r2, r5
   254d0:	4925      	ldr	r1, [pc, #148]	; (25568 <k_sched_time_slice_set+0xc8>)
   254d2:	4826      	ldr	r0, [pc, #152]	; (2556c <k_sched_time_slice_set+0xcc>)
   254d4:	f006 fe38 	bl	2c148 <printk>
   254d8:	4921      	ldr	r1, [pc, #132]	; (25560 <k_sched_time_slice_set+0xc0>)
   254da:	4825      	ldr	r0, [pc, #148]	; (25570 <k_sched_time_slice_set+0xd0>)
   254dc:	f006 fe34 	bl	2c148 <printk>
   254e0:	2181      	movs	r1, #129	; 0x81
   254e2:	4628      	mov	r0, r5
   254e4:	f007 f835 	bl	2c552 <assert_post_action>
   254e8:	e7eb      	b.n	254c2 <k_sched_time_slice_set+0x22>
		slice_max_prio = prio;
   254ea:	4b22      	ldr	r3, [pc, #136]	; (25574 <k_sched_time_slice_set+0xd4>)
   254ec:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   254f0:	f7ff ffc0 	bl	25474 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   254f4:	481a      	ldr	r0, [pc, #104]	; (25560 <k_sched_time_slice_set+0xc0>)
   254f6:	f7fe fb35 	bl	23b64 <z_spin_unlock_valid>
   254fa:	b1f8      	cbz	r0, 2553c <k_sched_time_slice_set+0x9c>
	__asm__ volatile(
   254fc:	f387 8811 	msr	BASEPRI, r7
   25500:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25504:	2401      	movs	r4, #1
   25506:	bb4c      	cbnz	r4, 2555c <k_sched_time_slice_set+0xbc>
		_current_cpu->slice_ticks = 0;
   25508:	2300      	movs	r3, #0
   2550a:	4a1b      	ldr	r2, [pc, #108]	; (25578 <k_sched_time_slice_set+0xd8>)
   2550c:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   2550e:	0c75      	lsrs	r5, r6, #17
   25510:	03f4      	lsls	r4, r6, #15
   25512:	f240 30e7 	movw	r0, #999	; 0x3e7
   25516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2551a:	2300      	movs	r3, #0
   2551c:	1820      	adds	r0, r4, r0
   2551e:	f04f 0100 	mov.w	r1, #0
   25522:	eb45 0101 	adc.w	r1, r5, r1
   25526:	f7db fa59 	bl	9dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2552a:	4b14      	ldr	r3, [pc, #80]	; (2557c <k_sched_time_slice_set+0xdc>)
   2552c:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2552e:	2e00      	cmp	r6, #0
   25530:	dddb      	ble.n	254ea <k_sched_time_slice_set+0x4a>
			slice_time = MAX(2, slice_time);
   25532:	2802      	cmp	r0, #2
   25534:	bfb8      	it	lt
   25536:	2002      	movlt	r0, #2
   25538:	6018      	str	r0, [r3, #0]
   2553a:	e7d6      	b.n	254ea <k_sched_time_slice_set+0x4a>
   2553c:	4c09      	ldr	r4, [pc, #36]	; (25564 <k_sched_time_slice_set+0xc4>)
   2553e:	23ac      	movs	r3, #172	; 0xac
   25540:	4622      	mov	r2, r4
   25542:	490f      	ldr	r1, [pc, #60]	; (25580 <k_sched_time_slice_set+0xe0>)
   25544:	4809      	ldr	r0, [pc, #36]	; (2556c <k_sched_time_slice_set+0xcc>)
   25546:	f006 fdff 	bl	2c148 <printk>
   2554a:	4905      	ldr	r1, [pc, #20]	; (25560 <k_sched_time_slice_set+0xc0>)
   2554c:	480d      	ldr	r0, [pc, #52]	; (25584 <k_sched_time_slice_set+0xe4>)
   2554e:	f006 fdfb 	bl	2c148 <printk>
   25552:	21ac      	movs	r1, #172	; 0xac
   25554:	4620      	mov	r0, r4
   25556:	f006 fffc 	bl	2c552 <assert_post_action>
   2555a:	e7cf      	b.n	254fc <k_sched_time_slice_set+0x5c>
}
   2555c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25560:	200035f4 	.word	0x200035f4
   25564:	0003234c 	.word	0x0003234c
   25568:	000323a4 	.word	0x000323a4
   2556c:	00031df4 	.word	0x00031df4
   25570:	000323bc 	.word	0x000323bc
   25574:	200035f8 	.word	0x200035f8
   25578:	200035ac 	.word	0x200035ac
   2557c:	200035fc 	.word	0x200035fc
   25580:	00032374 	.word	0x00032374
   25584:	0003238c 	.word	0x0003238c

00025588 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   25588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2558a:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2558c:	2500      	movs	r5, #0
	__asm__ volatile(
   2558e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25592:	f3ef 8611 	mrs	r6, BASEPRI
   25596:	f383 8812 	msr	BASEPRI_MAX, r3
   2559a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2559e:	4820      	ldr	r0, [pc, #128]	; (25620 <z_unpend_thread_no_timeout+0x98>)
   255a0:	f7fe fad0 	bl	23b44 <z_spin_lock_valid>
   255a4:	b118      	cbz	r0, 255ae <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
   255a6:	481e      	ldr	r0, [pc, #120]	; (25620 <z_unpend_thread_no_timeout+0x98>)
   255a8:	f7fe faec 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   255ac:	e023      	b.n	255f6 <z_unpend_thread_no_timeout+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   255ae:	4f1d      	ldr	r7, [pc, #116]	; (25624 <z_unpend_thread_no_timeout+0x9c>)
   255b0:	2381      	movs	r3, #129	; 0x81
   255b2:	463a      	mov	r2, r7
   255b4:	491c      	ldr	r1, [pc, #112]	; (25628 <z_unpend_thread_no_timeout+0xa0>)
   255b6:	481d      	ldr	r0, [pc, #116]	; (2562c <z_unpend_thread_no_timeout+0xa4>)
   255b8:	f006 fdc6 	bl	2c148 <printk>
   255bc:	4918      	ldr	r1, [pc, #96]	; (25620 <z_unpend_thread_no_timeout+0x98>)
   255be:	481c      	ldr	r0, [pc, #112]	; (25630 <z_unpend_thread_no_timeout+0xa8>)
   255c0:	f006 fdc2 	bl	2c148 <printk>
   255c4:	2181      	movs	r1, #129	; 0x81
   255c6:	4638      	mov	r0, r7
   255c8:	f006 ffc3 	bl	2c552 <assert_post_action>
   255cc:	e7eb      	b.n	255a6 <z_unpend_thread_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   255ce:	4d15      	ldr	r5, [pc, #84]	; (25624 <z_unpend_thread_no_timeout+0x9c>)
   255d0:	23ac      	movs	r3, #172	; 0xac
   255d2:	462a      	mov	r2, r5
   255d4:	4917      	ldr	r1, [pc, #92]	; (25634 <z_unpend_thread_no_timeout+0xac>)
   255d6:	4815      	ldr	r0, [pc, #84]	; (2562c <z_unpend_thread_no_timeout+0xa4>)
   255d8:	f006 fdb6 	bl	2c148 <printk>
   255dc:	4910      	ldr	r1, [pc, #64]	; (25620 <z_unpend_thread_no_timeout+0x98>)
   255de:	4816      	ldr	r0, [pc, #88]	; (25638 <z_unpend_thread_no_timeout+0xb0>)
   255e0:	f006 fdb2 	bl	2c148 <printk>
   255e4:	21ac      	movs	r1, #172	; 0xac
   255e6:	4628      	mov	r0, r5
   255e8:	f006 ffb3 	bl	2c552 <assert_post_action>
	__asm__ volatile(
   255ec:	f386 8811 	msr	BASEPRI, r6
   255f0:	f3bf 8f6f 	isb	sy
   255f4:	2501      	movs	r5, #1
   255f6:	b98d      	cbnz	r5, 2561c <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   255f8:	4620      	mov	r0, r4
   255fa:	f7ff ff11 	bl	25420 <pended_on_thread>
   255fe:	4621      	mov	r1, r4
   25600:	f000 f8ec 	bl	257dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25604:	7b63      	ldrb	r3, [r4, #13]
   25606:	f023 0302 	bic.w	r3, r3, #2
   2560a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2560c:	2300      	movs	r3, #0
   2560e:	60a3      	str	r3, [r4, #8]
   25610:	4803      	ldr	r0, [pc, #12]	; (25620 <z_unpend_thread_no_timeout+0x98>)
   25612:	f7fe faa7 	bl	23b64 <z_spin_unlock_valid>
   25616:	2800      	cmp	r0, #0
   25618:	d1e8      	bne.n	255ec <z_unpend_thread_no_timeout+0x64>
   2561a:	e7d8      	b.n	255ce <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
   2561c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2561e:	bf00      	nop
   25620:	200035f4 	.word	0x200035f4
   25624:	0003234c 	.word	0x0003234c
   25628:	000323a4 	.word	0x000323a4
   2562c:	00031df4 	.word	0x00031df4
   25630:	000323bc 	.word	0x000323bc
   25634:	00032374 	.word	0x00032374
   25638:	0003238c 	.word	0x0003238c

0002563c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2563c:	b570      	push	{r4, r5, r6, lr}
   2563e:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
   25640:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25642:	b921      	cbnz	r1, 2564e <z_reschedule+0x12>
   25644:	f3ef 8305 	mrs	r3, IPSR
   25648:	b913      	cbnz	r3, 25650 <z_reschedule+0x14>
   2564a:	2101      	movs	r1, #1
   2564c:	e000      	b.n	25650 <z_reschedule+0x14>
   2564e:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   25650:	f011 0f01 	tst.w	r1, #1
   25654:	d01c      	beq.n	25690 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
   25656:	4b1b      	ldr	r3, [pc, #108]	; (256c4 <z_reschedule+0x88>)
   25658:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   2565a:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   2565c:	429a      	cmp	r2, r3
   2565e:	d017      	beq.n	25690 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25660:	4620      	mov	r0, r4
   25662:	f7fe fa7f 	bl	23b64 <z_spin_unlock_valid>
   25666:	b118      	cbz	r0, 25670 <z_reschedule+0x34>
	ret = arch_swap(key);
   25668:	4628      	mov	r0, r5
   2566a:	f7ef fde7 	bl	1523c <arch_swap>
		z_swap(lock, key);
   2566e:	e017      	b.n	256a0 <z_reschedule+0x64>
   25670:	4e15      	ldr	r6, [pc, #84]	; (256c8 <z_reschedule+0x8c>)
   25672:	23c3      	movs	r3, #195	; 0xc3
   25674:	4632      	mov	r2, r6
   25676:	4915      	ldr	r1, [pc, #84]	; (256cc <z_reschedule+0x90>)
   25678:	4815      	ldr	r0, [pc, #84]	; (256d0 <z_reschedule+0x94>)
   2567a:	f006 fd65 	bl	2c148 <printk>
   2567e:	4621      	mov	r1, r4
   25680:	4814      	ldr	r0, [pc, #80]	; (256d4 <z_reschedule+0x98>)
   25682:	f006 fd61 	bl	2c148 <printk>
   25686:	21c3      	movs	r1, #195	; 0xc3
   25688:	4630      	mov	r0, r6
   2568a:	f006 ff62 	bl	2c552 <assert_post_action>
   2568e:	e7eb      	b.n	25668 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25690:	4620      	mov	r0, r4
   25692:	f7fe fa67 	bl	23b64 <z_spin_unlock_valid>
   25696:	b120      	cbz	r0, 256a2 <z_reschedule+0x66>
   25698:	f385 8811 	msr	BASEPRI, r5
   2569c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   256a0:	bd70      	pop	{r4, r5, r6, pc}
   256a2:	4e09      	ldr	r6, [pc, #36]	; (256c8 <z_reschedule+0x8c>)
   256a4:	23ac      	movs	r3, #172	; 0xac
   256a6:	4632      	mov	r2, r6
   256a8:	4908      	ldr	r1, [pc, #32]	; (256cc <z_reschedule+0x90>)
   256aa:	4809      	ldr	r0, [pc, #36]	; (256d0 <z_reschedule+0x94>)
   256ac:	f006 fd4c 	bl	2c148 <printk>
   256b0:	4621      	mov	r1, r4
   256b2:	4808      	ldr	r0, [pc, #32]	; (256d4 <z_reschedule+0x98>)
   256b4:	f006 fd48 	bl	2c148 <printk>
   256b8:	21ac      	movs	r1, #172	; 0xac
   256ba:	4630      	mov	r0, r6
   256bc:	f006 ff49 	bl	2c552 <assert_post_action>
   256c0:	e7ea      	b.n	25698 <z_reschedule+0x5c>
   256c2:	bf00      	nop
   256c4:	200035ac 	.word	0x200035ac
   256c8:	0003234c 	.word	0x0003234c
   256cc:	00032374 	.word	0x00032374
   256d0:	00031df4 	.word	0x00031df4
   256d4:	0003238c 	.word	0x0003238c

000256d8 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   256d8:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
   256da:	2400      	movs	r4, #0
	__asm__ volatile(
   256dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   256e0:	f3ef 8511 	mrs	r5, BASEPRI
   256e4:	f383 8812 	msr	BASEPRI_MAX, r3
   256e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   256ec:	482f      	ldr	r0, [pc, #188]	; (257ac <k_sched_lock+0xd4>)
   256ee:	f7fe fa29 	bl	23b44 <z_spin_lock_valid>
   256f2:	b118      	cbz	r0, 256fc <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
   256f4:	482d      	ldr	r0, [pc, #180]	; (257ac <k_sched_lock+0xd4>)
   256f6:	f7fe fa45 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   256fa:	e041      	b.n	25780 <k_sched_lock+0xa8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   256fc:	4e2c      	ldr	r6, [pc, #176]	; (257b0 <k_sched_lock+0xd8>)
   256fe:	2381      	movs	r3, #129	; 0x81
   25700:	4632      	mov	r2, r6
   25702:	492c      	ldr	r1, [pc, #176]	; (257b4 <k_sched_lock+0xdc>)
   25704:	482c      	ldr	r0, [pc, #176]	; (257b8 <k_sched_lock+0xe0>)
   25706:	f006 fd1f 	bl	2c148 <printk>
   2570a:	4928      	ldr	r1, [pc, #160]	; (257ac <k_sched_lock+0xd4>)
   2570c:	482b      	ldr	r0, [pc, #172]	; (257bc <k_sched_lock+0xe4>)
   2570e:	f006 fd1b 	bl	2c148 <printk>
   25712:	2181      	movs	r1, #129	; 0x81
   25714:	4630      	mov	r0, r6
   25716:	f006 ff1c 	bl	2c552 <assert_post_action>
   2571a:	e7eb      	b.n	256f4 <k_sched_lock+0x1c>
	__ASSERT(!arch_is_in_isr(), "");
   2571c:	4c28      	ldr	r4, [pc, #160]	; (257c0 <k_sched_lock+0xe8>)
   2571e:	23fd      	movs	r3, #253	; 0xfd
   25720:	4622      	mov	r2, r4
   25722:	4928      	ldr	r1, [pc, #160]	; (257c4 <k_sched_lock+0xec>)
   25724:	4824      	ldr	r0, [pc, #144]	; (257b8 <k_sched_lock+0xe0>)
   25726:	f006 fd0f 	bl	2c148 <printk>
   2572a:	4827      	ldr	r0, [pc, #156]	; (257c8 <k_sched_lock+0xf0>)
   2572c:	f006 fd0c 	bl	2c148 <printk>
   25730:	21fd      	movs	r1, #253	; 0xfd
   25732:	4620      	mov	r0, r4
   25734:	f006 ff0d 	bl	2c552 <assert_post_action>
   25738:	e027      	b.n	2578a <k_sched_lock+0xb2>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2573a:	4c21      	ldr	r4, [pc, #132]	; (257c0 <k_sched_lock+0xe8>)
   2573c:	23fe      	movs	r3, #254	; 0xfe
   2573e:	4622      	mov	r2, r4
   25740:	4922      	ldr	r1, [pc, #136]	; (257cc <k_sched_lock+0xf4>)
   25742:	481d      	ldr	r0, [pc, #116]	; (257b8 <k_sched_lock+0xe0>)
   25744:	f006 fd00 	bl	2c148 <printk>
   25748:	481f      	ldr	r0, [pc, #124]	; (257c8 <k_sched_lock+0xf0>)
   2574a:	f006 fcfd 	bl	2c148 <printk>
   2574e:	21fe      	movs	r1, #254	; 0xfe
   25750:	4620      	mov	r0, r4
   25752:	f006 fefe 	bl	2c552 <assert_post_action>
   25756:	e01d      	b.n	25794 <k_sched_lock+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25758:	4c15      	ldr	r4, [pc, #84]	; (257b0 <k_sched_lock+0xd8>)
   2575a:	23ac      	movs	r3, #172	; 0xac
   2575c:	4622      	mov	r2, r4
   2575e:	491c      	ldr	r1, [pc, #112]	; (257d0 <k_sched_lock+0xf8>)
   25760:	4815      	ldr	r0, [pc, #84]	; (257b8 <k_sched_lock+0xe0>)
   25762:	f006 fcf1 	bl	2c148 <printk>
   25766:	4911      	ldr	r1, [pc, #68]	; (257ac <k_sched_lock+0xd4>)
   25768:	481a      	ldr	r0, [pc, #104]	; (257d4 <k_sched_lock+0xfc>)
   2576a:	f006 fced 	bl	2c148 <printk>
   2576e:	21ac      	movs	r1, #172	; 0xac
   25770:	4620      	mov	r0, r4
   25772:	f006 feee 	bl	2c552 <assert_post_action>
	__asm__ volatile(
   25776:	f385 8811 	msr	BASEPRI, r5
   2577a:	f3bf 8f6f 	isb	sy
   2577e:	2401      	movs	r4, #1
   25780:	b99c      	cbnz	r4, 257aa <k_sched_lock+0xd2>
   25782:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   25786:	2b00      	cmp	r3, #0
   25788:	d1c8      	bne.n	2571c <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2578a:	4b13      	ldr	r3, [pc, #76]	; (257d8 <k_sched_lock+0x100>)
   2578c:	689b      	ldr	r3, [r3, #8]
   2578e:	7bdb      	ldrb	r3, [r3, #15]
   25790:	2b01      	cmp	r3, #1
   25792:	d0d2      	beq.n	2573a <k_sched_lock+0x62>
	--_current->base.sched_locked;
   25794:	4b10      	ldr	r3, [pc, #64]	; (257d8 <k_sched_lock+0x100>)
   25796:	689a      	ldr	r2, [r3, #8]
   25798:	7bd3      	ldrb	r3, [r2, #15]
   2579a:	3b01      	subs	r3, #1
   2579c:	73d3      	strb	r3, [r2, #15]
   2579e:	4803      	ldr	r0, [pc, #12]	; (257ac <k_sched_lock+0xd4>)
   257a0:	f7fe f9e0 	bl	23b64 <z_spin_unlock_valid>
   257a4:	2800      	cmp	r0, #0
   257a6:	d1e6      	bne.n	25776 <k_sched_lock+0x9e>
   257a8:	e7d6      	b.n	25758 <k_sched_lock+0x80>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   257aa:	bd70      	pop	{r4, r5, r6, pc}
   257ac:	200035f4 	.word	0x200035f4
   257b0:	0003234c 	.word	0x0003234c
   257b4:	000323a4 	.word	0x000323a4
   257b8:	00031df4 	.word	0x00031df4
   257bc:	000323bc 	.word	0x000323bc
   257c0:	00035ee0 	.word	0x00035ee0
   257c4:	00035dc4 	.word	0x00035dc4
   257c8:	00034ad0 	.word	0x00034ad0
   257cc:	00035f0c 	.word	0x00035f0c
   257d0:	00032374 	.word	0x00032374
   257d4:	0003238c 	.word	0x0003238c
   257d8:	200035ac 	.word	0x200035ac

000257dc <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   257dc:	b538      	push	{r3, r4, r5, lr}
   257de:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   257e0:	4b0c      	ldr	r3, [pc, #48]	; (25814 <z_priq_dumb_remove+0x38>)
   257e2:	4299      	cmp	r1, r3
   257e4:	d007      	beq.n	257f6 <z_priq_dumb_remove+0x1a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   257e6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   257e8:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
   257ea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   257ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   257ee:	2300      	movs	r3, #0
   257f0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   257f2:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   257f4:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   257f6:	4d08      	ldr	r5, [pc, #32]	; (25818 <z_priq_dumb_remove+0x3c>)
   257f8:	f240 33e7 	movw	r3, #999	; 0x3e7
   257fc:	462a      	mov	r2, r5
   257fe:	4907      	ldr	r1, [pc, #28]	; (2581c <z_priq_dumb_remove+0x40>)
   25800:	4807      	ldr	r0, [pc, #28]	; (25820 <z_priq_dumb_remove+0x44>)
   25802:	f006 fca1 	bl	2c148 <printk>
   25806:	f240 31e7 	movw	r1, #999	; 0x3e7
   2580a:	4628      	mov	r0, r5
   2580c:	f006 fea1 	bl	2c552 <assert_post_action>
   25810:	e7e9      	b.n	257e6 <z_priq_dumb_remove+0xa>
   25812:	bf00      	nop
   25814:	20002498 	.word	0x20002498
   25818:	000360c8 	.word	0x000360c8
   2581c:	00036104 	.word	0x00036104
   25820:	00031df4 	.word	0x00031df4

00025824 <z_unpend_thread>:
{
   25824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25826:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   25828:	2500      	movs	r5, #0
	__asm__ volatile(
   2582a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2582e:	f3ef 8611 	mrs	r6, BASEPRI
   25832:	f383 8812 	msr	BASEPRI_MAX, r3
   25836:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2583a:	4822      	ldr	r0, [pc, #136]	; (258c4 <z_unpend_thread+0xa0>)
   2583c:	f7fe f982 	bl	23b44 <z_spin_lock_valid>
   25840:	b118      	cbz	r0, 2584a <z_unpend_thread+0x26>
	z_spin_lock_set_owner(l);
   25842:	4820      	ldr	r0, [pc, #128]	; (258c4 <z_unpend_thread+0xa0>)
   25844:	f7fe f99e 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   25848:	e023      	b.n	25892 <z_unpend_thread+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2584a:	4f1f      	ldr	r7, [pc, #124]	; (258c8 <z_unpend_thread+0xa4>)
   2584c:	2381      	movs	r3, #129	; 0x81
   2584e:	463a      	mov	r2, r7
   25850:	491e      	ldr	r1, [pc, #120]	; (258cc <z_unpend_thread+0xa8>)
   25852:	481f      	ldr	r0, [pc, #124]	; (258d0 <z_unpend_thread+0xac>)
   25854:	f006 fc78 	bl	2c148 <printk>
   25858:	491a      	ldr	r1, [pc, #104]	; (258c4 <z_unpend_thread+0xa0>)
   2585a:	481e      	ldr	r0, [pc, #120]	; (258d4 <z_unpend_thread+0xb0>)
   2585c:	f006 fc74 	bl	2c148 <printk>
   25860:	2181      	movs	r1, #129	; 0x81
   25862:	4638      	mov	r0, r7
   25864:	f006 fe75 	bl	2c552 <assert_post_action>
   25868:	e7eb      	b.n	25842 <z_unpend_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2586a:	4d17      	ldr	r5, [pc, #92]	; (258c8 <z_unpend_thread+0xa4>)
   2586c:	23ac      	movs	r3, #172	; 0xac
   2586e:	462a      	mov	r2, r5
   25870:	4919      	ldr	r1, [pc, #100]	; (258d8 <z_unpend_thread+0xb4>)
   25872:	4817      	ldr	r0, [pc, #92]	; (258d0 <z_unpend_thread+0xac>)
   25874:	f006 fc68 	bl	2c148 <printk>
   25878:	4912      	ldr	r1, [pc, #72]	; (258c4 <z_unpend_thread+0xa0>)
   2587a:	4818      	ldr	r0, [pc, #96]	; (258dc <z_unpend_thread+0xb8>)
   2587c:	f006 fc64 	bl	2c148 <printk>
   25880:	21ac      	movs	r1, #172	; 0xac
   25882:	4628      	mov	r0, r5
   25884:	f006 fe65 	bl	2c552 <assert_post_action>
	__asm__ volatile(
   25888:	f386 8811 	msr	BASEPRI, r6
   2588c:	f3bf 8f6f 	isb	sy
   25890:	2501      	movs	r5, #1
   25892:	b98d      	cbnz	r5, 258b8 <z_unpend_thread+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   25894:	4620      	mov	r0, r4
   25896:	f7ff fdc3 	bl	25420 <pended_on_thread>
   2589a:	4621      	mov	r1, r4
   2589c:	f7ff ff9e 	bl	257dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   258a0:	7b63      	ldrb	r3, [r4, #13]
   258a2:	f023 0302 	bic.w	r3, r3, #2
   258a6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   258a8:	2300      	movs	r3, #0
   258aa:	60a3      	str	r3, [r4, #8]
   258ac:	4805      	ldr	r0, [pc, #20]	; (258c4 <z_unpend_thread+0xa0>)
   258ae:	f7fe f959 	bl	23b64 <z_spin_unlock_valid>
   258b2:	2800      	cmp	r0, #0
   258b4:	d1e8      	bne.n	25888 <z_unpend_thread+0x64>
   258b6:	e7d8      	b.n	2586a <z_unpend_thread+0x46>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   258b8:	f104 0018 	add.w	r0, r4, #24
   258bc:	f001 fadc 	bl	26e78 <z_abort_timeout>
}
   258c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   258c2:	bf00      	nop
   258c4:	200035f4 	.word	0x200035f4
   258c8:	0003234c 	.word	0x0003234c
   258cc:	000323a4 	.word	0x000323a4
   258d0:	00031df4 	.word	0x00031df4
   258d4:	000323bc 	.word	0x000323bc
   258d8:	00032374 	.word	0x00032374
   258dc:	0003238c 	.word	0x0003238c

000258e0 <update_cache>:
{
   258e0:	b538      	push	{r3, r4, r5, lr}
   258e2:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   258e4:	4818      	ldr	r0, [pc, #96]	; (25948 <update_cache+0x68>)
   258e6:	f00a feec 	bl	306c2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   258ea:	4605      	mov	r5, r0
   258ec:	b188      	cbz	r0, 25912 <update_cache+0x32>
	if (preempt_ok != 0) {
   258ee:	bb14      	cbnz	r4, 25936 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
   258f0:	4b16      	ldr	r3, [pc, #88]	; (2594c <update_cache+0x6c>)
   258f2:	689b      	ldr	r3, [r3, #8]
   258f4:	b183      	cbz	r3, 25918 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   258f6:	4b15      	ldr	r3, [pc, #84]	; (2594c <update_cache+0x6c>)
   258f8:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   258fa:	7b5a      	ldrb	r2, [r3, #13]
   258fc:	f012 0f1f 	tst.w	r2, #31
   25900:	d119      	bne.n	25936 <update_cache+0x56>
	return node->next != NULL;
   25902:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   25904:	b9ba      	cbnz	r2, 25936 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   25906:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   25908:	2a7f      	cmp	r2, #127	; 0x7f
   2590a:	d914      	bls.n	25936 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
   2590c:	4a0f      	ldr	r2, [pc, #60]	; (2594c <update_cache+0x6c>)
   2590e:	61d3      	str	r3, [r2, #28]
   25910:	e019      	b.n	25946 <update_cache+0x66>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   25912:	4b0e      	ldr	r3, [pc, #56]	; (2594c <update_cache+0x6c>)
   25914:	68dd      	ldr	r5, [r3, #12]
   25916:	e7ea      	b.n	258ee <update_cache+0xe>
	__ASSERT(_current != NULL, "");
   25918:	4c0d      	ldr	r4, [pc, #52]	; (25950 <update_cache+0x70>)
   2591a:	2389      	movs	r3, #137	; 0x89
   2591c:	4622      	mov	r2, r4
   2591e:	490d      	ldr	r1, [pc, #52]	; (25954 <update_cache+0x74>)
   25920:	480d      	ldr	r0, [pc, #52]	; (25958 <update_cache+0x78>)
   25922:	f006 fc11 	bl	2c148 <printk>
   25926:	480d      	ldr	r0, [pc, #52]	; (2595c <update_cache+0x7c>)
   25928:	f006 fc0e 	bl	2c148 <printk>
   2592c:	2189      	movs	r1, #137	; 0x89
   2592e:	4620      	mov	r0, r4
   25930:	f006 fe0f 	bl	2c552 <assert_post_action>
   25934:	e7df      	b.n	258f6 <update_cache+0x16>
		if (thread != _current) {
   25936:	4b05      	ldr	r3, [pc, #20]	; (2594c <update_cache+0x6c>)
   25938:	689b      	ldr	r3, [r3, #8]
   2593a:	42ab      	cmp	r3, r5
   2593c:	d001      	beq.n	25942 <update_cache+0x62>
			z_reset_time_slice();
   2593e:	f7ff fd99 	bl	25474 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   25942:	4b02      	ldr	r3, [pc, #8]	; (2594c <update_cache+0x6c>)
   25944:	61dd      	str	r5, [r3, #28]
}
   25946:	bd38      	pop	{r3, r4, r5, pc}
   25948:	200035cc 	.word	0x200035cc
   2594c:	200035ac 	.word	0x200035ac
   25950:	000360c8 	.word	0x000360c8
   25954:	00036128 	.word	0x00036128
   25958:	00031df4 	.word	0x00031df4
   2595c:	00034ad0 	.word	0x00034ad0

00025960 <move_thread_to_end_of_prio_q>:
{
   25960:	b538      	push	{r3, r4, r5, lr}
   25962:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   25964:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   25966:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2596a:	2b00      	cmp	r3, #0
   2596c:	db2b      	blt.n	259c6 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
   2596e:	7b6b      	ldrb	r3, [r5, #13]
   25970:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25974:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25976:	4b22      	ldr	r3, [pc, #136]	; (25a00 <move_thread_to_end_of_prio_q+0xa0>)
   25978:	429d      	cmp	r5, r3
   2597a:	d02c      	beq.n	259d6 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
   2597c:	4b21      	ldr	r3, [pc, #132]	; (25a04 <move_thread_to_end_of_prio_q+0xa4>)
   2597e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25982:	429c      	cmp	r4, r3
   25984:	d039      	beq.n	259fa <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25986:	b16c      	cbz	r4, 259a4 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25988:	4621      	mov	r1, r4
   2598a:	4628      	mov	r0, r5
   2598c:	f00a fe7a 	bl	30684 <z_sched_prio_cmp>
   25990:	2800      	cmp	r0, #0
   25992:	dc2c      	bgt.n	259ee <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25994:	b134      	cbz	r4, 259a4 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
   25996:	4b1b      	ldr	r3, [pc, #108]	; (25a04 <move_thread_to_end_of_prio_q+0xa4>)
   25998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2599a:	429c      	cmp	r4, r3
   2599c:	d002      	beq.n	259a4 <move_thread_to_end_of_prio_q+0x44>
   2599e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   259a0:	2c00      	cmp	r4, #0
   259a2:	d1f0      	bne.n	25986 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
   259a4:	4b17      	ldr	r3, [pc, #92]	; (25a04 <move_thread_to_end_of_prio_q+0xa4>)
   259a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   259a8:	f103 0120 	add.w	r1, r3, #32
   259ac:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   259ae:	606a      	str	r2, [r5, #4]
	tail->next = node;
   259b0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   259b2:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   259b4:	4b13      	ldr	r3, [pc, #76]	; (25a04 <move_thread_to_end_of_prio_q+0xa4>)
   259b6:	6898      	ldr	r0, [r3, #8]
   259b8:	42a8      	cmp	r0, r5
   259ba:	bf14      	ite	ne
   259bc:	2000      	movne	r0, #0
   259be:	2001      	moveq	r0, #1
   259c0:	f7ff ff8e 	bl	258e0 <update_cache>
}
   259c4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   259c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   259ca:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   259cc:	4601      	mov	r1, r0
   259ce:	480e      	ldr	r0, [pc, #56]	; (25a08 <move_thread_to_end_of_prio_q+0xa8>)
   259d0:	f7ff ff04 	bl	257dc <z_priq_dumb_remove>
}
   259d4:	e7cb      	b.n	2596e <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   259d6:	4c0d      	ldr	r4, [pc, #52]	; (25a0c <move_thread_to_end_of_prio_q+0xac>)
   259d8:	23ba      	movs	r3, #186	; 0xba
   259da:	4622      	mov	r2, r4
   259dc:	490c      	ldr	r1, [pc, #48]	; (25a10 <move_thread_to_end_of_prio_q+0xb0>)
   259de:	480d      	ldr	r0, [pc, #52]	; (25a14 <move_thread_to_end_of_prio_q+0xb4>)
   259e0:	f006 fbb2 	bl	2c148 <printk>
   259e4:	21ba      	movs	r1, #186	; 0xba
   259e6:	4620      	mov	r0, r4
   259e8:	f006 fdb3 	bl	2c552 <assert_post_action>
   259ec:	e7c6      	b.n	2597c <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
   259ee:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   259f0:	606b      	str	r3, [r5, #4]
	node->next = successor;
   259f2:	602c      	str	r4, [r5, #0]
	prev->next = node;
   259f4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   259f6:	6065      	str	r5, [r4, #4]
}
   259f8:	e7dc      	b.n	259b4 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   259fa:	2400      	movs	r4, #0
   259fc:	e7c3      	b.n	25986 <move_thread_to_end_of_prio_q+0x26>
   259fe:	bf00      	nop
   25a00:	20002498 	.word	0x20002498
   25a04:	200035ac 	.word	0x200035ac
   25a08:	200035cc 	.word	0x200035cc
   25a0c:	000360c8 	.word	0x000360c8
   25a10:	00036104 	.word	0x00036104
   25a14:	00031df4 	.word	0x00031df4

00025a18 <z_time_slice>:
{
   25a18:	b570      	push	{r4, r5, r6, lr}
   25a1a:	4604      	mov	r4, r0
	__asm__ volatile(
   25a1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25a20:	f3ef 8511 	mrs	r5, BASEPRI
   25a24:	f383 8812 	msr	BASEPRI_MAX, r3
   25a28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a2c:	483c      	ldr	r0, [pc, #240]	; (25b20 <z_time_slice+0x108>)
   25a2e:	f7fe f889 	bl	23b44 <z_spin_lock_valid>
   25a32:	b338      	cbz	r0, 25a84 <z_time_slice+0x6c>
	z_spin_lock_set_owner(l);
   25a34:	483a      	ldr	r0, [pc, #232]	; (25b20 <z_time_slice+0x108>)
   25a36:	f7fe f8a5 	bl	23b84 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   25a3a:	4b3a      	ldr	r3, [pc, #232]	; (25b24 <z_time_slice+0x10c>)
   25a3c:	689b      	ldr	r3, [r3, #8]
   25a3e:	4a3a      	ldr	r2, [pc, #232]	; (25b28 <z_time_slice+0x110>)
   25a40:	6812      	ldr	r2, [r2, #0]
   25a42:	4293      	cmp	r3, r2
   25a44:	d02e      	beq.n	25aa4 <z_time_slice+0x8c>
	pending_current = NULL;
   25a46:	4a38      	ldr	r2, [pc, #224]	; (25b28 <z_time_slice+0x110>)
   25a48:	2100      	movs	r1, #0
   25a4a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   25a4c:	4a37      	ldr	r2, [pc, #220]	; (25b2c <z_time_slice+0x114>)
   25a4e:	6812      	ldr	r2, [r2, #0]
   25a50:	2a00      	cmp	r2, #0
   25a52:	d048      	beq.n	25ae6 <z_time_slice+0xce>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   25a54:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   25a56:	2a7f      	cmp	r2, #127	; 0x7f
   25a58:	d845      	bhi.n	25ae6 <z_time_slice+0xce>
	uint8_t state = thread->base.thread_state;
   25a5a:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   25a5c:	f012 0f1f 	tst.w	r2, #31
   25a60:	d141      	bne.n	25ae6 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   25a62:	f993 100e 	ldrsb.w	r1, [r3, #14]
   25a66:	4a32      	ldr	r2, [pc, #200]	; (25b30 <z_time_slice+0x118>)
   25a68:	6812      	ldr	r2, [r2, #0]
   25a6a:	4291      	cmp	r1, r2
   25a6c:	db3b      	blt.n	25ae6 <z_time_slice+0xce>
		&& !z_is_idle_thread_object(thread);
   25a6e:	4a31      	ldr	r2, [pc, #196]	; (25b34 <z_time_slice+0x11c>)
   25a70:	4293      	cmp	r3, r2
   25a72:	d038      	beq.n	25ae6 <z_time_slice+0xce>
		if (ticks >= _current_cpu->slice_ticks) {
   25a74:	4a2b      	ldr	r2, [pc, #172]	; (25b24 <z_time_slice+0x10c>)
   25a76:	6910      	ldr	r0, [r2, #16]
   25a78:	42a0      	cmp	r0, r4
   25a7a:	dd2e      	ble.n	25ada <z_time_slice+0xc2>
			_current_cpu->slice_ticks -= ticks;
   25a7c:	1b00      	subs	r0, r0, r4
   25a7e:	4b29      	ldr	r3, [pc, #164]	; (25b24 <z_time_slice+0x10c>)
   25a80:	6118      	str	r0, [r3, #16]
   25a82:	e033      	b.n	25aec <z_time_slice+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a84:	4e2c      	ldr	r6, [pc, #176]	; (25b38 <z_time_slice+0x120>)
   25a86:	2381      	movs	r3, #129	; 0x81
   25a88:	4632      	mov	r2, r6
   25a8a:	492c      	ldr	r1, [pc, #176]	; (25b3c <z_time_slice+0x124>)
   25a8c:	482c      	ldr	r0, [pc, #176]	; (25b40 <z_time_slice+0x128>)
   25a8e:	f006 fb5b 	bl	2c148 <printk>
   25a92:	4923      	ldr	r1, [pc, #140]	; (25b20 <z_time_slice+0x108>)
   25a94:	482b      	ldr	r0, [pc, #172]	; (25b44 <z_time_slice+0x12c>)
   25a96:	f006 fb57 	bl	2c148 <printk>
   25a9a:	2181      	movs	r1, #129	; 0x81
   25a9c:	4630      	mov	r0, r6
   25a9e:	f006 fd58 	bl	2c552 <assert_post_action>
   25aa2:	e7c7      	b.n	25a34 <z_time_slice+0x1c>
		z_reset_time_slice();
   25aa4:	f7ff fce6 	bl	25474 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25aa8:	481d      	ldr	r0, [pc, #116]	; (25b20 <z_time_slice+0x108>)
   25aaa:	f7fe f85b 	bl	23b64 <z_spin_unlock_valid>
   25aae:	b120      	cbz	r0, 25aba <z_time_slice+0xa2>
	__asm__ volatile(
   25ab0:	f385 8811 	msr	BASEPRI, r5
   25ab4:	f3bf 8f6f 	isb	sy
		return;
   25ab8:	e020      	b.n	25afc <z_time_slice+0xe4>
   25aba:	4c1f      	ldr	r4, [pc, #124]	; (25b38 <z_time_slice+0x120>)
   25abc:	23ac      	movs	r3, #172	; 0xac
   25abe:	4622      	mov	r2, r4
   25ac0:	4921      	ldr	r1, [pc, #132]	; (25b48 <z_time_slice+0x130>)
   25ac2:	481f      	ldr	r0, [pc, #124]	; (25b40 <z_time_slice+0x128>)
   25ac4:	f006 fb40 	bl	2c148 <printk>
   25ac8:	4915      	ldr	r1, [pc, #84]	; (25b20 <z_time_slice+0x108>)
   25aca:	4820      	ldr	r0, [pc, #128]	; (25b4c <z_time_slice+0x134>)
   25acc:	f006 fb3c 	bl	2c148 <printk>
   25ad0:	21ac      	movs	r1, #172	; 0xac
   25ad2:	4620      	mov	r0, r4
   25ad4:	f006 fd3d 	bl	2c552 <assert_post_action>
   25ad8:	e7ea      	b.n	25ab0 <z_time_slice+0x98>
			move_thread_to_end_of_prio_q(_current);
   25ada:	4618      	mov	r0, r3
   25adc:	f7ff ff40 	bl	25960 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   25ae0:	f7ff fcc8 	bl	25474 <z_reset_time_slice>
   25ae4:	e002      	b.n	25aec <z_time_slice+0xd4>
		_current_cpu->slice_ticks = 0;
   25ae6:	4b0f      	ldr	r3, [pc, #60]	; (25b24 <z_time_slice+0x10c>)
   25ae8:	2200      	movs	r2, #0
   25aea:	611a      	str	r2, [r3, #16]
   25aec:	480c      	ldr	r0, [pc, #48]	; (25b20 <z_time_slice+0x108>)
   25aee:	f7fe f839 	bl	23b64 <z_spin_unlock_valid>
   25af2:	b120      	cbz	r0, 25afe <z_time_slice+0xe6>
   25af4:	f385 8811 	msr	BASEPRI, r5
   25af8:	f3bf 8f6f 	isb	sy
}
   25afc:	bd70      	pop	{r4, r5, r6, pc}
   25afe:	4c0e      	ldr	r4, [pc, #56]	; (25b38 <z_time_slice+0x120>)
   25b00:	23ac      	movs	r3, #172	; 0xac
   25b02:	4622      	mov	r2, r4
   25b04:	4910      	ldr	r1, [pc, #64]	; (25b48 <z_time_slice+0x130>)
   25b06:	480e      	ldr	r0, [pc, #56]	; (25b40 <z_time_slice+0x128>)
   25b08:	f006 fb1e 	bl	2c148 <printk>
   25b0c:	4904      	ldr	r1, [pc, #16]	; (25b20 <z_time_slice+0x108>)
   25b0e:	480f      	ldr	r0, [pc, #60]	; (25b4c <z_time_slice+0x134>)
   25b10:	f006 fb1a 	bl	2c148 <printk>
   25b14:	21ac      	movs	r1, #172	; 0xac
   25b16:	4620      	mov	r0, r4
   25b18:	f006 fd1b 	bl	2c552 <assert_post_action>
   25b1c:	e7ea      	b.n	25af4 <z_time_slice+0xdc>
   25b1e:	bf00      	nop
   25b20:	200035f4 	.word	0x200035f4
   25b24:	200035ac 	.word	0x200035ac
   25b28:	200035f0 	.word	0x200035f0
   25b2c:	200035fc 	.word	0x200035fc
   25b30:	200035f8 	.word	0x200035f8
   25b34:	20002498 	.word	0x20002498
   25b38:	0003234c 	.word	0x0003234c
   25b3c:	000323a4 	.word	0x000323a4
   25b40:	00031df4 	.word	0x00031df4
   25b44:	000323bc 	.word	0x000323bc
   25b48:	00032374 	.word	0x00032374
   25b4c:	0003238c 	.word	0x0003238c

00025b50 <ready_thread>:
{
   25b50:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   25b52:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   25b54:	f990 200d 	ldrsb.w	r2, [r0, #13]
   25b58:	2a00      	cmp	r2, #0
   25b5a:	db30      	blt.n	25bbe <ready_thread+0x6e>
   25b5c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25b5e:	f013 0f1f 	tst.w	r3, #31
   25b62:	d105      	bne.n	25b70 <ready_thread+0x20>
	return node->next != NULL;
   25b64:	6982      	ldr	r2, [r0, #24]
   25b66:	b10a      	cbz	r2, 25b6c <ready_thread+0x1c>
   25b68:	2200      	movs	r2, #0
   25b6a:	e002      	b.n	25b72 <ready_thread+0x22>
   25b6c:	2201      	movs	r2, #1
   25b6e:	e000      	b.n	25b72 <ready_thread+0x22>
   25b70:	2200      	movs	r2, #0
   25b72:	b322      	cbz	r2, 25bbe <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
   25b74:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25b78:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25b7a:	4b1b      	ldr	r3, [pc, #108]	; (25be8 <ready_thread+0x98>)
   25b7c:	429c      	cmp	r4, r3
   25b7e:	d01f      	beq.n	25bc0 <ready_thread+0x70>
	return list->head == list;
   25b80:	4b1a      	ldr	r3, [pc, #104]	; (25bec <ready_thread+0x9c>)
   25b82:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25b86:	429d      	cmp	r5, r3
   25b88:	d02c      	beq.n	25be4 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25b8a:	b16d      	cbz	r5, 25ba8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25b8c:	4629      	mov	r1, r5
   25b8e:	4620      	mov	r0, r4
   25b90:	f00a fd78 	bl	30684 <z_sched_prio_cmp>
   25b94:	2800      	cmp	r0, #0
   25b96:	dc1f      	bgt.n	25bd8 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25b98:	b135      	cbz	r5, 25ba8 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
   25b9a:	4b14      	ldr	r3, [pc, #80]	; (25bec <ready_thread+0x9c>)
   25b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25b9e:	429d      	cmp	r5, r3
   25ba0:	d002      	beq.n	25ba8 <ready_thread+0x58>
   25ba2:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25ba4:	2d00      	cmp	r5, #0
   25ba6:	d1f0      	bne.n	25b8a <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
   25ba8:	4b10      	ldr	r3, [pc, #64]	; (25bec <ready_thread+0x9c>)
   25baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   25bac:	f103 0120 	add.w	r1, r3, #32
   25bb0:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   25bb2:	6062      	str	r2, [r4, #4]
	tail->next = node;
   25bb4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   25bb6:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   25bb8:	2000      	movs	r0, #0
   25bba:	f7ff fe91 	bl	258e0 <update_cache>
}
   25bbe:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25bc0:	4d0b      	ldr	r5, [pc, #44]	; (25bf0 <ready_thread+0xa0>)
   25bc2:	23ba      	movs	r3, #186	; 0xba
   25bc4:	462a      	mov	r2, r5
   25bc6:	490b      	ldr	r1, [pc, #44]	; (25bf4 <ready_thread+0xa4>)
   25bc8:	480b      	ldr	r0, [pc, #44]	; (25bf8 <ready_thread+0xa8>)
   25bca:	f006 fabd 	bl	2c148 <printk>
   25bce:	21ba      	movs	r1, #186	; 0xba
   25bd0:	4628      	mov	r0, r5
   25bd2:	f006 fcbe 	bl	2c552 <assert_post_action>
   25bd6:	e7d3      	b.n	25b80 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
   25bd8:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   25bda:	6063      	str	r3, [r4, #4]
	node->next = successor;
   25bdc:	6025      	str	r5, [r4, #0]
	prev->next = node;
   25bde:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   25be0:	606c      	str	r4, [r5, #4]
}
   25be2:	e7e9      	b.n	25bb8 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25be4:	2500      	movs	r5, #0
   25be6:	e7d0      	b.n	25b8a <ready_thread+0x3a>
   25be8:	20002498 	.word	0x20002498
   25bec:	200035ac 	.word	0x200035ac
   25bf0:	000360c8 	.word	0x000360c8
   25bf4:	00036104 	.word	0x00036104
   25bf8:	00031df4 	.word	0x00031df4

00025bfc <z_ready_thread>:
{
   25bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25bfe:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   25c00:	2400      	movs	r4, #0
	__asm__ volatile(
   25c02:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c06:	f3ef 8611 	mrs	r6, BASEPRI
   25c0a:	f383 8812 	msr	BASEPRI_MAX, r3
   25c0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c12:	481e      	ldr	r0, [pc, #120]	; (25c8c <z_ready_thread+0x90>)
   25c14:	f7fd ff96 	bl	23b44 <z_spin_lock_valid>
   25c18:	b118      	cbz	r0, 25c22 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
   25c1a:	481c      	ldr	r0, [pc, #112]	; (25c8c <z_ready_thread+0x90>)
   25c1c:	f7fd ffb2 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   25c20:	e027      	b.n	25c72 <z_ready_thread+0x76>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c22:	4f1b      	ldr	r7, [pc, #108]	; (25c90 <z_ready_thread+0x94>)
   25c24:	2381      	movs	r3, #129	; 0x81
   25c26:	463a      	mov	r2, r7
   25c28:	491a      	ldr	r1, [pc, #104]	; (25c94 <z_ready_thread+0x98>)
   25c2a:	481b      	ldr	r0, [pc, #108]	; (25c98 <z_ready_thread+0x9c>)
   25c2c:	f006 fa8c 	bl	2c148 <printk>
   25c30:	4916      	ldr	r1, [pc, #88]	; (25c8c <z_ready_thread+0x90>)
   25c32:	481a      	ldr	r0, [pc, #104]	; (25c9c <z_ready_thread+0xa0>)
   25c34:	f006 fa88 	bl	2c148 <printk>
   25c38:	2181      	movs	r1, #129	; 0x81
   25c3a:	4638      	mov	r0, r7
   25c3c:	f006 fc89 	bl	2c552 <assert_post_action>
   25c40:	e7eb      	b.n	25c1a <z_ready_thread+0x1e>
			ready_thread(thread);
   25c42:	4628      	mov	r0, r5
   25c44:	f7ff ff84 	bl	25b50 <ready_thread>
   25c48:	e019      	b.n	25c7e <z_ready_thread+0x82>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c4a:	4c11      	ldr	r4, [pc, #68]	; (25c90 <z_ready_thread+0x94>)
   25c4c:	23ac      	movs	r3, #172	; 0xac
   25c4e:	4622      	mov	r2, r4
   25c50:	4913      	ldr	r1, [pc, #76]	; (25ca0 <z_ready_thread+0xa4>)
   25c52:	4811      	ldr	r0, [pc, #68]	; (25c98 <z_ready_thread+0x9c>)
   25c54:	f006 fa78 	bl	2c148 <printk>
   25c58:	490c      	ldr	r1, [pc, #48]	; (25c8c <z_ready_thread+0x90>)
   25c5a:	4812      	ldr	r0, [pc, #72]	; (25ca4 <z_ready_thread+0xa8>)
   25c5c:	f006 fa74 	bl	2c148 <printk>
   25c60:	21ac      	movs	r1, #172	; 0xac
   25c62:	4620      	mov	r0, r4
   25c64:	f006 fc75 	bl	2c552 <assert_post_action>
	__asm__ volatile(
   25c68:	f386 8811 	msr	BASEPRI, r6
   25c6c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25c70:	2401      	movs	r4, #1
   25c72:	b954      	cbnz	r4, 25c8a <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
   25c74:	4628      	mov	r0, r5
   25c76:	f00a fd03 	bl	30680 <thread_active_elsewhere>
   25c7a:	2800      	cmp	r0, #0
   25c7c:	d0e1      	beq.n	25c42 <z_ready_thread+0x46>
   25c7e:	4803      	ldr	r0, [pc, #12]	; (25c8c <z_ready_thread+0x90>)
   25c80:	f7fd ff70 	bl	23b64 <z_spin_unlock_valid>
   25c84:	2800      	cmp	r0, #0
   25c86:	d1ef      	bne.n	25c68 <z_ready_thread+0x6c>
   25c88:	e7df      	b.n	25c4a <z_ready_thread+0x4e>
}
   25c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25c8c:	200035f4 	.word	0x200035f4
   25c90:	0003234c 	.word	0x0003234c
   25c94:	000323a4 	.word	0x000323a4
   25c98:	00031df4 	.word	0x00031df4
   25c9c:	000323bc 	.word	0x000323bc
   25ca0:	00032374 	.word	0x00032374
   25ca4:	0003238c 	.word	0x0003238c

00025ca8 <z_sched_start>:
{
   25ca8:	b570      	push	{r4, r5, r6, lr}
   25caa:	4604      	mov	r4, r0
	__asm__ volatile(
   25cac:	f04f 0340 	mov.w	r3, #64	; 0x40
   25cb0:	f3ef 8511 	mrs	r5, BASEPRI
   25cb4:	f383 8812 	msr	BASEPRI_MAX, r3
   25cb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25cbc:	481f      	ldr	r0, [pc, #124]	; (25d3c <z_sched_start+0x94>)
   25cbe:	f7fd ff41 	bl	23b44 <z_spin_lock_valid>
   25cc2:	b188      	cbz	r0, 25ce8 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
   25cc4:	481d      	ldr	r0, [pc, #116]	; (25d3c <z_sched_start+0x94>)
   25cc6:	f7fd ff5d 	bl	23b84 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   25cca:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   25ccc:	f013 0f04 	tst.w	r3, #4
   25cd0:	d01a      	beq.n	25d08 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25cd2:	f023 0304 	bic.w	r3, r3, #4
   25cd6:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
   25cd8:	4620      	mov	r0, r4
   25cda:	f7ff ff39 	bl	25b50 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   25cde:	4629      	mov	r1, r5
   25ce0:	4816      	ldr	r0, [pc, #88]	; (25d3c <z_sched_start+0x94>)
   25ce2:	f7ff fcab 	bl	2563c <z_reschedule>
}
   25ce6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25ce8:	4e15      	ldr	r6, [pc, #84]	; (25d40 <z_sched_start+0x98>)
   25cea:	2381      	movs	r3, #129	; 0x81
   25cec:	4632      	mov	r2, r6
   25cee:	4915      	ldr	r1, [pc, #84]	; (25d44 <z_sched_start+0x9c>)
   25cf0:	4815      	ldr	r0, [pc, #84]	; (25d48 <z_sched_start+0xa0>)
   25cf2:	f006 fa29 	bl	2c148 <printk>
   25cf6:	4911      	ldr	r1, [pc, #68]	; (25d3c <z_sched_start+0x94>)
   25cf8:	4814      	ldr	r0, [pc, #80]	; (25d4c <z_sched_start+0xa4>)
   25cfa:	f006 fa25 	bl	2c148 <printk>
   25cfe:	2181      	movs	r1, #129	; 0x81
   25d00:	4630      	mov	r0, r6
   25d02:	f006 fc26 	bl	2c552 <assert_post_action>
   25d06:	e7dd      	b.n	25cc4 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25d08:	480c      	ldr	r0, [pc, #48]	; (25d3c <z_sched_start+0x94>)
   25d0a:	f7fd ff2b 	bl	23b64 <z_spin_unlock_valid>
   25d0e:	b120      	cbz	r0, 25d1a <z_sched_start+0x72>
	__asm__ volatile(
   25d10:	f385 8811 	msr	BASEPRI, r5
   25d14:	f3bf 8f6f 	isb	sy
		return;
   25d18:	e7e5      	b.n	25ce6 <z_sched_start+0x3e>
   25d1a:	4c09      	ldr	r4, [pc, #36]	; (25d40 <z_sched_start+0x98>)
   25d1c:	23ac      	movs	r3, #172	; 0xac
   25d1e:	4622      	mov	r2, r4
   25d20:	490b      	ldr	r1, [pc, #44]	; (25d50 <z_sched_start+0xa8>)
   25d22:	4809      	ldr	r0, [pc, #36]	; (25d48 <z_sched_start+0xa0>)
   25d24:	f006 fa10 	bl	2c148 <printk>
   25d28:	4904      	ldr	r1, [pc, #16]	; (25d3c <z_sched_start+0x94>)
   25d2a:	480a      	ldr	r0, [pc, #40]	; (25d54 <z_sched_start+0xac>)
   25d2c:	f006 fa0c 	bl	2c148 <printk>
   25d30:	21ac      	movs	r1, #172	; 0xac
   25d32:	4620      	mov	r0, r4
   25d34:	f006 fc0d 	bl	2c552 <assert_post_action>
   25d38:	e7ea      	b.n	25d10 <z_sched_start+0x68>
   25d3a:	bf00      	nop
   25d3c:	200035f4 	.word	0x200035f4
   25d40:	0003234c 	.word	0x0003234c
   25d44:	000323a4 	.word	0x000323a4
   25d48:	00031df4 	.word	0x00031df4
   25d4c:	000323bc 	.word	0x000323bc
   25d50:	00032374 	.word	0x00032374
   25d54:	0003238c 	.word	0x0003238c

00025d58 <z_thread_timeout>:
{
   25d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d5c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   25d5e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   25d62:	2500      	movs	r5, #0
	__asm__ volatile(
   25d64:	f04f 0340 	mov.w	r3, #64	; 0x40
   25d68:	f3ef 8711 	mrs	r7, BASEPRI
   25d6c:	f383 8812 	msr	BASEPRI_MAX, r3
   25d70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25d74:	4829      	ldr	r0, [pc, #164]	; (25e1c <z_thread_timeout+0xc4>)
   25d76:	f7fd fee5 	bl	23b44 <z_spin_lock_valid>
   25d7a:	b118      	cbz	r0, 25d84 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
   25d7c:	4827      	ldr	r0, [pc, #156]	; (25e1c <z_thread_timeout+0xc4>)
   25d7e:	f7fd ff01 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   25d82:	e02e      	b.n	25de2 <z_thread_timeout+0x8a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25d84:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 25e2c <z_thread_timeout+0xd4>
   25d88:	2381      	movs	r3, #129	; 0x81
   25d8a:	4642      	mov	r2, r8
   25d8c:	4924      	ldr	r1, [pc, #144]	; (25e20 <z_thread_timeout+0xc8>)
   25d8e:	4825      	ldr	r0, [pc, #148]	; (25e24 <z_thread_timeout+0xcc>)
   25d90:	f006 f9da 	bl	2c148 <printk>
   25d94:	4921      	ldr	r1, [pc, #132]	; (25e1c <z_thread_timeout+0xc4>)
   25d96:	4824      	ldr	r0, [pc, #144]	; (25e28 <z_thread_timeout+0xd0>)
   25d98:	f006 f9d6 	bl	2c148 <printk>
   25d9c:	2181      	movs	r1, #129	; 0x81
   25d9e:	4640      	mov	r0, r8
   25da0:	f006 fbd7 	bl	2c552 <assert_post_action>
   25da4:	e7ea      	b.n	25d7c <z_thread_timeout+0x24>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   25da6:	4630      	mov	r0, r6
   25da8:	f7ff fb3a 	bl	25420 <pended_on_thread>
   25dac:	4631      	mov	r1, r6
   25dae:	f7ff fd15 	bl	257dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25db2:	7b73      	ldrb	r3, [r6, #13]
   25db4:	f023 0302 	bic.w	r3, r3, #2
   25db8:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
   25dba:	2300      	movs	r3, #0
   25dbc:	60b3      	str	r3, [r6, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25dbe:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25dc2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   25dc6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   25dca:	4630      	mov	r0, r6
   25dcc:	f7ff fec0 	bl	25b50 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25dd0:	4812      	ldr	r0, [pc, #72]	; (25e1c <z_thread_timeout+0xc4>)
   25dd2:	f7fd fec7 	bl	23b64 <z_spin_unlock_valid>
   25dd6:	b178      	cbz	r0, 25df8 <z_thread_timeout+0xa0>
	__asm__ volatile(
   25dd8:	f387 8811 	msr	BASEPRI, r7
   25ddc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25de0:	2501      	movs	r5, #1
   25de2:	b9cd      	cbnz	r5, 25e18 <z_thread_timeout+0xc0>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   25de4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   25de8:	f013 0f28 	tst.w	r3, #40	; 0x28
   25dec:	d1f0      	bne.n	25dd0 <z_thread_timeout+0x78>
			if (thread->base.pended_on != NULL) {
   25dee:	f854 3c10 	ldr.w	r3, [r4, #-16]
   25df2:	2b00      	cmp	r3, #0
   25df4:	d1d7      	bne.n	25da6 <z_thread_timeout+0x4e>
   25df6:	e7e2      	b.n	25dbe <z_thread_timeout+0x66>
   25df8:	4d0c      	ldr	r5, [pc, #48]	; (25e2c <z_thread_timeout+0xd4>)
   25dfa:	23ac      	movs	r3, #172	; 0xac
   25dfc:	462a      	mov	r2, r5
   25dfe:	490c      	ldr	r1, [pc, #48]	; (25e30 <z_thread_timeout+0xd8>)
   25e00:	4808      	ldr	r0, [pc, #32]	; (25e24 <z_thread_timeout+0xcc>)
   25e02:	f006 f9a1 	bl	2c148 <printk>
   25e06:	4905      	ldr	r1, [pc, #20]	; (25e1c <z_thread_timeout+0xc4>)
   25e08:	480a      	ldr	r0, [pc, #40]	; (25e34 <z_thread_timeout+0xdc>)
   25e0a:	f006 f99d 	bl	2c148 <printk>
   25e0e:	21ac      	movs	r1, #172	; 0xac
   25e10:	4628      	mov	r0, r5
   25e12:	f006 fb9e 	bl	2c552 <assert_post_action>
   25e16:	e7df      	b.n	25dd8 <z_thread_timeout+0x80>
}
   25e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25e1c:	200035f4 	.word	0x200035f4
   25e20:	000323a4 	.word	0x000323a4
   25e24:	00031df4 	.word	0x00031df4
   25e28:	000323bc 	.word	0x000323bc
   25e2c:	0003234c 	.word	0x0003234c
   25e30:	00032374 	.word	0x00032374
   25e34:	0003238c 	.word	0x0003238c

00025e38 <unready_thread>:
{
   25e38:	b510      	push	{r4, lr}
   25e3a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   25e3c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   25e3e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   25e42:	2b00      	cmp	r3, #0
   25e44:	db08      	blt.n	25e58 <unready_thread+0x20>
	update_cache(thread == _current);
   25e46:	4b08      	ldr	r3, [pc, #32]	; (25e68 <unready_thread+0x30>)
   25e48:	6898      	ldr	r0, [r3, #8]
   25e4a:	42a0      	cmp	r0, r4
   25e4c:	bf14      	ite	ne
   25e4e:	2000      	movne	r0, #0
   25e50:	2001      	moveq	r0, #1
   25e52:	f7ff fd45 	bl	258e0 <update_cache>
}
   25e56:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25e58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   25e5c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25e5e:	4601      	mov	r1, r0
   25e60:	4802      	ldr	r0, [pc, #8]	; (25e6c <unready_thread+0x34>)
   25e62:	f7ff fcbb 	bl	257dc <z_priq_dumb_remove>
}
   25e66:	e7ee      	b.n	25e46 <unready_thread+0xe>
   25e68:	200035ac 	.word	0x200035ac
   25e6c:	200035cc 	.word	0x200035cc

00025e70 <add_to_waitq_locked>:
{
   25e70:	b570      	push	{r4, r5, r6, lr}
   25e72:	4605      	mov	r5, r0
   25e74:	460e      	mov	r6, r1
	unready_thread(thread);
   25e76:	f7ff ffdf 	bl	25e38 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   25e7a:	7b6b      	ldrb	r3, [r5, #13]
   25e7c:	f043 0302 	orr.w	r3, r3, #2
   25e80:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   25e82:	b1ce      	cbz	r6, 25eb8 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
   25e84:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25e86:	4b17      	ldr	r3, [pc, #92]	; (25ee4 <add_to_waitq_locked+0x74>)
   25e88:	429d      	cmp	r5, r3
   25e8a:	d016      	beq.n	25eba <add_to_waitq_locked+0x4a>
	return list->head == list;
   25e8c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25e8e:	42a6      	cmp	r6, r4
   25e90:	d025      	beq.n	25ede <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25e92:	b164      	cbz	r4, 25eae <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25e94:	4621      	mov	r1, r4
   25e96:	4628      	mov	r0, r5
   25e98:	f00a fbf4 	bl	30684 <z_sched_prio_cmp>
   25e9c:	2800      	cmp	r0, #0
   25e9e:	dc18      	bgt.n	25ed2 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25ea0:	b12c      	cbz	r4, 25eae <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
   25ea2:	6873      	ldr	r3, [r6, #4]
   25ea4:	429c      	cmp	r4, r3
   25ea6:	d002      	beq.n	25eae <add_to_waitq_locked+0x3e>
   25ea8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25eaa:	2c00      	cmp	r4, #0
   25eac:	d1f1      	bne.n	25e92 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   25eae:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   25eb0:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   25eb2:	606b      	str	r3, [r5, #4]
	tail->next = node;
   25eb4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   25eb6:	6075      	str	r5, [r6, #4]
}
   25eb8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25eba:	4c0b      	ldr	r4, [pc, #44]	; (25ee8 <add_to_waitq_locked+0x78>)
   25ebc:	23ba      	movs	r3, #186	; 0xba
   25ebe:	4622      	mov	r2, r4
   25ec0:	490a      	ldr	r1, [pc, #40]	; (25eec <add_to_waitq_locked+0x7c>)
   25ec2:	480b      	ldr	r0, [pc, #44]	; (25ef0 <add_to_waitq_locked+0x80>)
   25ec4:	f006 f940 	bl	2c148 <printk>
   25ec8:	21ba      	movs	r1, #186	; 0xba
   25eca:	4620      	mov	r0, r4
   25ecc:	f006 fb41 	bl	2c552 <assert_post_action>
   25ed0:	e7dc      	b.n	25e8c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
   25ed2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   25ed4:	606b      	str	r3, [r5, #4]
	node->next = successor;
   25ed6:	602c      	str	r4, [r5, #0]
	prev->next = node;
   25ed8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   25eda:	6065      	str	r5, [r4, #4]
}
   25edc:	e7ec      	b.n	25eb8 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25ede:	2400      	movs	r4, #0
   25ee0:	e7d7      	b.n	25e92 <add_to_waitq_locked+0x22>
   25ee2:	bf00      	nop
   25ee4:	20002498 	.word	0x20002498
   25ee8:	000360c8 	.word	0x000360c8
   25eec:	00036104 	.word	0x00036104
   25ef0:	00031df4 	.word	0x00031df4

00025ef4 <pend>:
{
   25ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25ef8:	4605      	mov	r5, r0
   25efa:	460f      	mov	r7, r1
   25efc:	4691      	mov	r9, r2
   25efe:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   25f00:	2400      	movs	r4, #0
	__asm__ volatile(
   25f02:	f04f 0340 	mov.w	r3, #64	; 0x40
   25f06:	f3ef 8611 	mrs	r6, BASEPRI
   25f0a:	f383 8812 	msr	BASEPRI_MAX, r3
   25f0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f12:	481f      	ldr	r0, [pc, #124]	; (25f90 <pend+0x9c>)
   25f14:	f7fd fe16 	bl	23b44 <z_spin_lock_valid>
   25f18:	b118      	cbz	r0, 25f22 <pend+0x2e>
	z_spin_lock_set_owner(l);
   25f1a:	481d      	ldr	r0, [pc, #116]	; (25f90 <pend+0x9c>)
   25f1c:	f7fd fe32 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   25f20:	e024      	b.n	25f6c <pend+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f22:	f8df a07c 	ldr.w	sl, [pc, #124]	; 25fa0 <pend+0xac>
   25f26:	2381      	movs	r3, #129	; 0x81
   25f28:	4652      	mov	r2, sl
   25f2a:	491a      	ldr	r1, [pc, #104]	; (25f94 <pend+0xa0>)
   25f2c:	481a      	ldr	r0, [pc, #104]	; (25f98 <pend+0xa4>)
   25f2e:	f006 f90b 	bl	2c148 <printk>
   25f32:	4917      	ldr	r1, [pc, #92]	; (25f90 <pend+0x9c>)
   25f34:	4819      	ldr	r0, [pc, #100]	; (25f9c <pend+0xa8>)
   25f36:	f006 f907 	bl	2c148 <printk>
   25f3a:	2181      	movs	r1, #129	; 0x81
   25f3c:	4650      	mov	r0, sl
   25f3e:	f006 fb08 	bl	2c552 <assert_post_action>
   25f42:	e7ea      	b.n	25f1a <pend+0x26>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25f44:	4c16      	ldr	r4, [pc, #88]	; (25fa0 <pend+0xac>)
   25f46:	23ac      	movs	r3, #172	; 0xac
   25f48:	4622      	mov	r2, r4
   25f4a:	4916      	ldr	r1, [pc, #88]	; (25fa4 <pend+0xb0>)
   25f4c:	4812      	ldr	r0, [pc, #72]	; (25f98 <pend+0xa4>)
   25f4e:	f006 f8fb 	bl	2c148 <printk>
   25f52:	490f      	ldr	r1, [pc, #60]	; (25f90 <pend+0x9c>)
   25f54:	4814      	ldr	r0, [pc, #80]	; (25fa8 <pend+0xb4>)
   25f56:	f006 f8f7 	bl	2c148 <printk>
   25f5a:	21ac      	movs	r1, #172	; 0xac
   25f5c:	4620      	mov	r0, r4
   25f5e:	f006 faf8 	bl	2c552 <assert_post_action>
	__asm__ volatile(
   25f62:	f386 8811 	msr	BASEPRI, r6
   25f66:	f3bf 8f6f 	isb	sy
   25f6a:	2401      	movs	r4, #1
   25f6c:	b94c      	cbnz	r4, 25f82 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
   25f6e:	4639      	mov	r1, r7
   25f70:	4628      	mov	r0, r5
   25f72:	f7ff ff7d 	bl	25e70 <add_to_waitq_locked>
   25f76:	4806      	ldr	r0, [pc, #24]	; (25f90 <pend+0x9c>)
   25f78:	f7fd fdf4 	bl	23b64 <z_spin_unlock_valid>
   25f7c:	2800      	cmp	r0, #0
   25f7e:	d1f0      	bne.n	25f62 <pend+0x6e>
   25f80:	e7e0      	b.n	25f44 <pend+0x50>
	add_thread_timeout(thread, timeout);
   25f82:	464a      	mov	r2, r9
   25f84:	4643      	mov	r3, r8
   25f86:	4628      	mov	r0, r5
   25f88:	f7ff fa64 	bl	25454 <add_thread_timeout>
}
   25f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25f90:	200035f4 	.word	0x200035f4
   25f94:	000323a4 	.word	0x000323a4
   25f98:	00031df4 	.word	0x00031df4
   25f9c:	000323bc 	.word	0x000323bc
   25fa0:	0003234c 	.word	0x0003234c
   25fa4:	00032374 	.word	0x00032374
   25fa8:	0003238c 	.word	0x0003238c

00025fac <z_pend_curr>:
{
   25fac:	b570      	push	{r4, r5, r6, lr}
   25fae:	4604      	mov	r4, r0
   25fb0:	460d      	mov	r5, r1
   25fb2:	4611      	mov	r1, r2
	pending_current = _current;
   25fb4:	4b0f      	ldr	r3, [pc, #60]	; (25ff4 <z_pend_curr+0x48>)
   25fb6:	6898      	ldr	r0, [r3, #8]
   25fb8:	4b0f      	ldr	r3, [pc, #60]	; (25ff8 <z_pend_curr+0x4c>)
   25fba:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   25fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   25fc0:	f7ff ff98 	bl	25ef4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25fc4:	4620      	mov	r0, r4
   25fc6:	f7fd fdcd 	bl	23b64 <z_spin_unlock_valid>
   25fca:	b118      	cbz	r0, 25fd4 <z_pend_curr+0x28>
   25fcc:	4628      	mov	r0, r5
   25fce:	f7ef f935 	bl	1523c <arch_swap>
}
   25fd2:	bd70      	pop	{r4, r5, r6, pc}
   25fd4:	4e09      	ldr	r6, [pc, #36]	; (25ffc <z_pend_curr+0x50>)
   25fd6:	23c3      	movs	r3, #195	; 0xc3
   25fd8:	4632      	mov	r2, r6
   25fda:	4909      	ldr	r1, [pc, #36]	; (26000 <z_pend_curr+0x54>)
   25fdc:	4809      	ldr	r0, [pc, #36]	; (26004 <z_pend_curr+0x58>)
   25fde:	f006 f8b3 	bl	2c148 <printk>
   25fe2:	4621      	mov	r1, r4
   25fe4:	4808      	ldr	r0, [pc, #32]	; (26008 <z_pend_curr+0x5c>)
   25fe6:	f006 f8af 	bl	2c148 <printk>
   25fea:	21c3      	movs	r1, #195	; 0xc3
   25fec:	4630      	mov	r0, r6
   25fee:	f006 fab0 	bl	2c552 <assert_post_action>
   25ff2:	e7eb      	b.n	25fcc <z_pend_curr+0x20>
   25ff4:	200035ac 	.word	0x200035ac
   25ff8:	200035f0 	.word	0x200035f0
   25ffc:	0003234c 	.word	0x0003234c
   26000:	00032374 	.word	0x00032374
   26004:	00031df4 	.word	0x00031df4
   26008:	0003238c 	.word	0x0003238c

0002600c <z_set_prio>:
{
   2600c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26010:	4604      	mov	r4, r0
   26012:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   26014:	2500      	movs	r5, #0
	__asm__ volatile(
   26016:	f04f 0340 	mov.w	r3, #64	; 0x40
   2601a:	f3ef 8611 	mrs	r6, BASEPRI
   2601e:	f383 8812 	msr	BASEPRI_MAX, r3
   26022:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26026:	4845      	ldr	r0, [pc, #276]	; (2613c <z_set_prio+0x130>)
   26028:	f7fd fd8c 	bl	23b44 <z_spin_lock_valid>
   2602c:	b128      	cbz	r0, 2603a <z_set_prio+0x2e>
	z_spin_lock_set_owner(l);
   2602e:	4843      	ldr	r0, [pc, #268]	; (2613c <z_set_prio+0x130>)
   26030:	f7fd fda8 	bl	23b84 <z_spin_lock_set_owner>
	bool need_sched = 0;
   26034:	f04f 0800 	mov.w	r8, #0
	return k;
   26038:	e01e      	b.n	26078 <z_set_prio+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2603a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 26160 <z_set_prio+0x154>
   2603e:	2381      	movs	r3, #129	; 0x81
   26040:	4642      	mov	r2, r8
   26042:	493f      	ldr	r1, [pc, #252]	; (26140 <z_set_prio+0x134>)
   26044:	483f      	ldr	r0, [pc, #252]	; (26144 <z_set_prio+0x138>)
   26046:	f006 f87f 	bl	2c148 <printk>
   2604a:	493c      	ldr	r1, [pc, #240]	; (2613c <z_set_prio+0x130>)
   2604c:	483e      	ldr	r0, [pc, #248]	; (26148 <z_set_prio+0x13c>)
   2604e:	f006 f87b 	bl	2c148 <printk>
   26052:	2181      	movs	r1, #129	; 0x81
   26054:	4640      	mov	r0, r8
   26056:	f006 fa7c 	bl	2c552 <assert_post_action>
   2605a:	e7e8      	b.n	2602e <z_set_prio+0x22>
		if (need_sched) {
   2605c:	f013 0801 	ands.w	r8, r3, #1
   26060:	d116      	bne.n	26090 <z_set_prio+0x84>
			thread->base.prio = prio;
   26062:	73a7      	strb	r7, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26064:	4835      	ldr	r0, [pc, #212]	; (2613c <z_set_prio+0x130>)
   26066:	f7fd fd7d 	bl	23b64 <z_spin_unlock_valid>
   2606a:	2800      	cmp	r0, #0
   2606c:	d053      	beq.n	26116 <z_set_prio+0x10a>
	__asm__ volatile(
   2606e:	f386 8811 	msr	BASEPRI, r6
   26072:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26076:	2501      	movs	r5, #1
   26078:	462b      	mov	r3, r5
   2607a:	2d00      	cmp	r5, #0
   2607c:	d15b      	bne.n	26136 <z_set_prio+0x12a>
	uint8_t state = thread->base.thread_state;
   2607e:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26080:	f012 0f1f 	tst.w	r2, #31
   26084:	d1ea      	bne.n	2605c <z_set_prio+0x50>
	return node->next != NULL;
   26086:	69a1      	ldr	r1, [r4, #24]
   26088:	2900      	cmp	r1, #0
   2608a:	d1e7      	bne.n	2605c <z_set_prio+0x50>
   2608c:	2301      	movs	r3, #1
   2608e:	e7e5      	b.n	2605c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26090:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   26094:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26096:	4621      	mov	r1, r4
   26098:	482c      	ldr	r0, [pc, #176]	; (2614c <z_set_prio+0x140>)
   2609a:	f7ff fb9f 	bl	257dc <z_priq_dumb_remove>
				thread->base.prio = prio;
   2609e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   260a0:	7b63      	ldrb	r3, [r4, #13]
   260a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   260a6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   260a8:	4b29      	ldr	r3, [pc, #164]	; (26150 <z_set_prio+0x144>)
   260aa:	429c      	cmp	r4, r3
   260ac:	d01f      	beq.n	260ee <z_set_prio+0xe2>
	return list->head == list;
   260ae:	4b29      	ldr	r3, [pc, #164]	; (26154 <z_set_prio+0x148>)
   260b0:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   260b4:	429d      	cmp	r5, r3
   260b6:	d02c      	beq.n	26112 <z_set_prio+0x106>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   260b8:	b16d      	cbz	r5, 260d6 <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   260ba:	4629      	mov	r1, r5
   260bc:	4620      	mov	r0, r4
   260be:	f00a fae1 	bl	30684 <z_sched_prio_cmp>
   260c2:	2800      	cmp	r0, #0
   260c4:	dc1f      	bgt.n	26106 <z_set_prio+0xfa>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   260c6:	b135      	cbz	r5, 260d6 <z_set_prio+0xca>
	return (node == list->tail) ? NULL : node->next;
   260c8:	4b22      	ldr	r3, [pc, #136]	; (26154 <z_set_prio+0x148>)
   260ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   260cc:	429d      	cmp	r5, r3
   260ce:	d002      	beq.n	260d6 <z_set_prio+0xca>
   260d0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   260d2:	2d00      	cmp	r5, #0
   260d4:	d1f0      	bne.n	260b8 <z_set_prio+0xac>
	sys_dnode_t *const tail = list->tail;
   260d6:	4b1f      	ldr	r3, [pc, #124]	; (26154 <z_set_prio+0x148>)
   260d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   260da:	f103 0120 	add.w	r1, r3, #32
   260de:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   260e0:	6062      	str	r2, [r4, #4]
	tail->next = node;
   260e2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   260e4:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   260e6:	2001      	movs	r0, #1
   260e8:	f7ff fbfa 	bl	258e0 <update_cache>
   260ec:	e7ba      	b.n	26064 <z_set_prio+0x58>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   260ee:	4d1a      	ldr	r5, [pc, #104]	; (26158 <z_set_prio+0x14c>)
   260f0:	23ba      	movs	r3, #186	; 0xba
   260f2:	462a      	mov	r2, r5
   260f4:	4919      	ldr	r1, [pc, #100]	; (2615c <z_set_prio+0x150>)
   260f6:	4813      	ldr	r0, [pc, #76]	; (26144 <z_set_prio+0x138>)
   260f8:	f006 f826 	bl	2c148 <printk>
   260fc:	21ba      	movs	r1, #186	; 0xba
   260fe:	4628      	mov	r0, r5
   26100:	f006 fa27 	bl	2c552 <assert_post_action>
   26104:	e7d3      	b.n	260ae <z_set_prio+0xa2>
	sys_dnode_t *const prev = successor->prev;
   26106:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   26108:	6063      	str	r3, [r4, #4]
	node->next = successor;
   2610a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   2610c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2610e:	606c      	str	r4, [r5, #4]
}
   26110:	e7e9      	b.n	260e6 <z_set_prio+0xda>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26112:	2500      	movs	r5, #0
   26114:	e7d0      	b.n	260b8 <z_set_prio+0xac>
   26116:	4d12      	ldr	r5, [pc, #72]	; (26160 <z_set_prio+0x154>)
   26118:	23ac      	movs	r3, #172	; 0xac
   2611a:	462a      	mov	r2, r5
   2611c:	4911      	ldr	r1, [pc, #68]	; (26164 <z_set_prio+0x158>)
   2611e:	4809      	ldr	r0, [pc, #36]	; (26144 <z_set_prio+0x138>)
   26120:	f006 f812 	bl	2c148 <printk>
   26124:	4905      	ldr	r1, [pc, #20]	; (2613c <z_set_prio+0x130>)
   26126:	4810      	ldr	r0, [pc, #64]	; (26168 <z_set_prio+0x15c>)
   26128:	f006 f80e 	bl	2c148 <printk>
   2612c:	21ac      	movs	r1, #172	; 0xac
   2612e:	4628      	mov	r0, r5
   26130:	f006 fa0f 	bl	2c552 <assert_post_action>
   26134:	e79b      	b.n	2606e <z_set_prio+0x62>
}
   26136:	4640      	mov	r0, r8
   26138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2613c:	200035f4 	.word	0x200035f4
   26140:	000323a4 	.word	0x000323a4
   26144:	00031df4 	.word	0x00031df4
   26148:	000323bc 	.word	0x000323bc
   2614c:	200035cc 	.word	0x200035cc
   26150:	20002498 	.word	0x20002498
   26154:	200035ac 	.word	0x200035ac
   26158:	000360c8 	.word	0x000360c8
   2615c:	00036104 	.word	0x00036104
   26160:	0003234c 	.word	0x0003234c
   26164:	00032374 	.word	0x00032374
   26168:	0003238c 	.word	0x0003238c

0002616c <z_impl_k_thread_suspend>:
{
   2616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2616e:	4604      	mov	r4, r0
   26170:	3018      	adds	r0, #24
   26172:	f000 fe81 	bl	26e78 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   26176:	2500      	movs	r5, #0
	__asm__ volatile(
   26178:	f04f 0340 	mov.w	r3, #64	; 0x40
   2617c:	f3ef 8611 	mrs	r6, BASEPRI
   26180:	f383 8812 	msr	BASEPRI_MAX, r3
   26184:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26188:	482d      	ldr	r0, [pc, #180]	; (26240 <z_impl_k_thread_suspend+0xd4>)
   2618a:	f7fd fcdb 	bl	23b44 <z_spin_lock_valid>
   2618e:	b118      	cbz	r0, 26198 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
   26190:	482b      	ldr	r0, [pc, #172]	; (26240 <z_impl_k_thread_suspend+0xd4>)
   26192:	f7fd fcf7 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   26196:	e02b      	b.n	261f0 <z_impl_k_thread_suspend+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26198:	4f2a      	ldr	r7, [pc, #168]	; (26244 <z_impl_k_thread_suspend+0xd8>)
   2619a:	2381      	movs	r3, #129	; 0x81
   2619c:	463a      	mov	r2, r7
   2619e:	492a      	ldr	r1, [pc, #168]	; (26248 <z_impl_k_thread_suspend+0xdc>)
   261a0:	482a      	ldr	r0, [pc, #168]	; (2624c <z_impl_k_thread_suspend+0xe0>)
   261a2:	f005 ffd1 	bl	2c148 <printk>
   261a6:	4926      	ldr	r1, [pc, #152]	; (26240 <z_impl_k_thread_suspend+0xd4>)
   261a8:	4829      	ldr	r0, [pc, #164]	; (26250 <z_impl_k_thread_suspend+0xe4>)
   261aa:	f005 ffcd 	bl	2c148 <printk>
   261ae:	2181      	movs	r1, #129	; 0x81
   261b0:	4638      	mov	r0, r7
   261b2:	f006 f9ce 	bl	2c552 <assert_post_action>
   261b6:	e7eb      	b.n	26190 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   261b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   261bc:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   261be:	4621      	mov	r1, r4
   261c0:	4824      	ldr	r0, [pc, #144]	; (26254 <z_impl_k_thread_suspend+0xe8>)
   261c2:	f7ff fb0b 	bl	257dc <z_priq_dumb_remove>
}
   261c6:	e019      	b.n	261fc <z_impl_k_thread_suspend+0x90>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   261c8:	4d1e      	ldr	r5, [pc, #120]	; (26244 <z_impl_k_thread_suspend+0xd8>)
   261ca:	23ac      	movs	r3, #172	; 0xac
   261cc:	462a      	mov	r2, r5
   261ce:	4922      	ldr	r1, [pc, #136]	; (26258 <z_impl_k_thread_suspend+0xec>)
   261d0:	481e      	ldr	r0, [pc, #120]	; (2624c <z_impl_k_thread_suspend+0xe0>)
   261d2:	f005 ffb9 	bl	2c148 <printk>
   261d6:	491a      	ldr	r1, [pc, #104]	; (26240 <z_impl_k_thread_suspend+0xd4>)
   261d8:	4820      	ldr	r0, [pc, #128]	; (2625c <z_impl_k_thread_suspend+0xf0>)
   261da:	f005 ffb5 	bl	2c148 <printk>
   261de:	21ac      	movs	r1, #172	; 0xac
   261e0:	4628      	mov	r0, r5
   261e2:	f006 f9b6 	bl	2c552 <assert_post_action>
	__asm__ volatile(
   261e6:	f386 8811 	msr	BASEPRI, r6
   261ea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   261ee:	2501      	movs	r5, #1
   261f0:	b9b5      	cbnz	r5, 26220 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
   261f2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   261f4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   261f8:	2b00      	cmp	r3, #0
   261fa:	dbdd      	blt.n	261b8 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   261fc:	7b63      	ldrb	r3, [r4, #13]
   261fe:	f043 0310 	orr.w	r3, r3, #16
   26202:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   26204:	4b16      	ldr	r3, [pc, #88]	; (26260 <z_impl_k_thread_suspend+0xf4>)
   26206:	6898      	ldr	r0, [r3, #8]
   26208:	42a0      	cmp	r0, r4
   2620a:	bf14      	ite	ne
   2620c:	2000      	movne	r0, #0
   2620e:	2001      	moveq	r0, #1
   26210:	f7ff fb66 	bl	258e0 <update_cache>
   26214:	480a      	ldr	r0, [pc, #40]	; (26240 <z_impl_k_thread_suspend+0xd4>)
   26216:	f7fd fca5 	bl	23b64 <z_spin_unlock_valid>
   2621a:	2800      	cmp	r0, #0
   2621c:	d1e3      	bne.n	261e6 <z_impl_k_thread_suspend+0x7a>
   2621e:	e7d3      	b.n	261c8 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
   26220:	4b0f      	ldr	r3, [pc, #60]	; (26260 <z_impl_k_thread_suspend+0xf4>)
   26222:	689b      	ldr	r3, [r3, #8]
   26224:	42a3      	cmp	r3, r4
   26226:	d000      	beq.n	2622a <z_impl_k_thread_suspend+0xbe>
}
   26228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
   2622a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2622e:	f3ef 8011 	mrs	r0, BASEPRI
   26232:	f383 8812 	msr	BASEPRI_MAX, r3
   26236:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2623a:	f00a fa2d 	bl	30698 <z_reschedule_irqlock>
   2623e:	e7f3      	b.n	26228 <z_impl_k_thread_suspend+0xbc>
   26240:	200035f4 	.word	0x200035f4
   26244:	0003234c 	.word	0x0003234c
   26248:	000323a4 	.word	0x000323a4
   2624c:	00031df4 	.word	0x00031df4
   26250:	000323bc 	.word	0x000323bc
   26254:	200035cc 	.word	0x200035cc
   26258:	00032374 	.word	0x00032374
   2625c:	0003238c 	.word	0x0003238c
   26260:	200035ac 	.word	0x200035ac

00026264 <k_sched_unlock>:
{
   26264:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
   26266:	2400      	movs	r4, #0
   26268:	f04f 0340 	mov.w	r3, #64	; 0x40
   2626c:	f3ef 8511 	mrs	r5, BASEPRI
   26270:	f383 8812 	msr	BASEPRI_MAX, r3
   26274:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26278:	4838      	ldr	r0, [pc, #224]	; (2635c <k_sched_unlock+0xf8>)
   2627a:	f7fd fc63 	bl	23b44 <z_spin_lock_valid>
   2627e:	b118      	cbz	r0, 26288 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
   26280:	4836      	ldr	r0, [pc, #216]	; (2635c <k_sched_unlock+0xf8>)
   26282:	f7fd fc7f 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   26286:	e045      	b.n	26314 <k_sched_unlock+0xb0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26288:	4e35      	ldr	r6, [pc, #212]	; (26360 <k_sched_unlock+0xfc>)
   2628a:	2381      	movs	r3, #129	; 0x81
   2628c:	4632      	mov	r2, r6
   2628e:	4935      	ldr	r1, [pc, #212]	; (26364 <k_sched_unlock+0x100>)
   26290:	4835      	ldr	r0, [pc, #212]	; (26368 <k_sched_unlock+0x104>)
   26292:	f005 ff59 	bl	2c148 <printk>
   26296:	4931      	ldr	r1, [pc, #196]	; (2635c <k_sched_unlock+0xf8>)
   26298:	4834      	ldr	r0, [pc, #208]	; (2636c <k_sched_unlock+0x108>)
   2629a:	f005 ff55 	bl	2c148 <printk>
   2629e:	2181      	movs	r1, #129	; 0x81
   262a0:	4630      	mov	r0, r6
   262a2:	f006 f956 	bl	2c552 <assert_post_action>
   262a6:	e7eb      	b.n	26280 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
   262a8:	4c31      	ldr	r4, [pc, #196]	; (26370 <k_sched_unlock+0x10c>)
   262aa:	f240 3385 	movw	r3, #901	; 0x385
   262ae:	4622      	mov	r2, r4
   262b0:	4930      	ldr	r1, [pc, #192]	; (26374 <k_sched_unlock+0x110>)
   262b2:	482d      	ldr	r0, [pc, #180]	; (26368 <k_sched_unlock+0x104>)
   262b4:	f005 ff48 	bl	2c148 <printk>
   262b8:	482f      	ldr	r0, [pc, #188]	; (26378 <k_sched_unlock+0x114>)
   262ba:	f005 ff45 	bl	2c148 <printk>
   262be:	f240 3185 	movw	r1, #901	; 0x385
   262c2:	4620      	mov	r0, r4
   262c4:	f006 f945 	bl	2c552 <assert_post_action>
   262c8:	e02a      	b.n	26320 <k_sched_unlock+0xbc>
		__ASSERT(!arch_is_in_isr(), "");
   262ca:	4c29      	ldr	r4, [pc, #164]	; (26370 <k_sched_unlock+0x10c>)
   262cc:	f240 3386 	movw	r3, #902	; 0x386
   262d0:	4622      	mov	r2, r4
   262d2:	492a      	ldr	r1, [pc, #168]	; (2637c <k_sched_unlock+0x118>)
   262d4:	4824      	ldr	r0, [pc, #144]	; (26368 <k_sched_unlock+0x104>)
   262d6:	f005 ff37 	bl	2c148 <printk>
   262da:	4827      	ldr	r0, [pc, #156]	; (26378 <k_sched_unlock+0x114>)
   262dc:	f005 ff34 	bl	2c148 <printk>
   262e0:	f240 3186 	movw	r1, #902	; 0x386
   262e4:	4620      	mov	r0, r4
   262e6:	f006 f934 	bl	2c552 <assert_post_action>
   262ea:	e01d      	b.n	26328 <k_sched_unlock+0xc4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   262ec:	4c1c      	ldr	r4, [pc, #112]	; (26360 <k_sched_unlock+0xfc>)
   262ee:	23ac      	movs	r3, #172	; 0xac
   262f0:	4622      	mov	r2, r4
   262f2:	4923      	ldr	r1, [pc, #140]	; (26380 <k_sched_unlock+0x11c>)
   262f4:	481c      	ldr	r0, [pc, #112]	; (26368 <k_sched_unlock+0x104>)
   262f6:	f005 ff27 	bl	2c148 <printk>
   262fa:	4918      	ldr	r1, [pc, #96]	; (2635c <k_sched_unlock+0xf8>)
   262fc:	4821      	ldr	r0, [pc, #132]	; (26384 <k_sched_unlock+0x120>)
   262fe:	f005 ff23 	bl	2c148 <printk>
   26302:	21ac      	movs	r1, #172	; 0xac
   26304:	4620      	mov	r0, r4
   26306:	f006 f924 	bl	2c552 <assert_post_action>
	__asm__ volatile(
   2630a:	f385 8811 	msr	BASEPRI, r5
   2630e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26312:	2401      	movs	r4, #1
   26314:	b9b4      	cbnz	r4, 26344 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
   26316:	4b1c      	ldr	r3, [pc, #112]	; (26388 <k_sched_unlock+0x124>)
   26318:	689b      	ldr	r3, [r3, #8]
   2631a:	7bdb      	ldrb	r3, [r3, #15]
   2631c:	2b00      	cmp	r3, #0
   2631e:	d0c3      	beq.n	262a8 <k_sched_unlock+0x44>
   26320:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   26324:	2b00      	cmp	r3, #0
   26326:	d1d0      	bne.n	262ca <k_sched_unlock+0x66>
		++_current->base.sched_locked;
   26328:	4b17      	ldr	r3, [pc, #92]	; (26388 <k_sched_unlock+0x124>)
   2632a:	689a      	ldr	r2, [r3, #8]
   2632c:	7bd3      	ldrb	r3, [r2, #15]
   2632e:	3301      	adds	r3, #1
   26330:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   26332:	2000      	movs	r0, #0
   26334:	f7ff fad4 	bl	258e0 <update_cache>
   26338:	4808      	ldr	r0, [pc, #32]	; (2635c <k_sched_unlock+0xf8>)
   2633a:	f7fd fc13 	bl	23b64 <z_spin_unlock_valid>
   2633e:	2800      	cmp	r0, #0
   26340:	d1e3      	bne.n	2630a <k_sched_unlock+0xa6>
   26342:	e7d3      	b.n	262ec <k_sched_unlock+0x88>
	__asm__ volatile(
   26344:	f04f 0340 	mov.w	r3, #64	; 0x40
   26348:	f3ef 8011 	mrs	r0, BASEPRI
   2634c:	f383 8812 	msr	BASEPRI_MAX, r3
   26350:	f3bf 8f6f 	isb	sy
   26354:	f00a f9a0 	bl	30698 <z_reschedule_irqlock>
}
   26358:	bd70      	pop	{r4, r5, r6, pc}
   2635a:	bf00      	nop
   2635c:	200035f4 	.word	0x200035f4
   26360:	0003234c 	.word	0x0003234c
   26364:	000323a4 	.word	0x000323a4
   26368:	00031df4 	.word	0x00031df4
   2636c:	000323bc 	.word	0x000323bc
   26370:	000360c8 	.word	0x000360c8
   26374:	00036150 	.word	0x00036150
   26378:	00034ad0 	.word	0x00034ad0
   2637c:	00035dc4 	.word	0x00035dc4
   26380:	00032374 	.word	0x00032374
   26384:	0003238c 	.word	0x0003238c
   26388:	200035ac 	.word	0x200035ac

0002638c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   2638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   2638e:	7b43      	ldrb	r3, [r0, #13]
   26390:	f013 0f08 	tst.w	r3, #8
   26394:	d145      	bne.n	26422 <end_thread+0x96>
   26396:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   26398:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2639c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   263a0:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   263a2:	f013 0f80 	tst.w	r3, #128	; 0x80
   263a6:	d114      	bne.n	263d2 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   263a8:	68ab      	ldr	r3, [r5, #8]
   263aa:	b15b      	cbz	r3, 263c4 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   263ac:	4628      	mov	r0, r5
   263ae:	f7ff f837 	bl	25420 <pended_on_thread>
   263b2:	4629      	mov	r1, r5
   263b4:	f7ff fa12 	bl	257dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   263b8:	7b6b      	ldrb	r3, [r5, #13]
   263ba:	f023 0302 	bic.w	r3, r3, #2
   263be:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   263c0:	2300      	movs	r3, #0
   263c2:	60ab      	str	r3, [r5, #8]
   263c4:	f105 0018 	add.w	r0, r5, #24
   263c8:	f000 fd56 	bl	26e78 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   263cc:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   263d0:	e01c      	b.n	2640c <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   263d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   263d6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   263d8:	4601      	mov	r1, r0
   263da:	4812      	ldr	r0, [pc, #72]	; (26424 <end_thread+0x98>)
   263dc:	f7ff f9fe 	bl	257dc <z_priq_dumb_remove>
}
   263e0:	e7e2      	b.n	263a8 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   263e2:	4620      	mov	r0, r4
   263e4:	f7ff f81c 	bl	25420 <pended_on_thread>
   263e8:	4621      	mov	r1, r4
   263ea:	f7ff f9f7 	bl	257dc <z_priq_dumb_remove>
   263ee:	7b63      	ldrb	r3, [r4, #13]
   263f0:	f023 0302 	bic.w	r3, r3, #2
   263f4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   263f6:	2600      	movs	r6, #0
   263f8:	60a6      	str	r6, [r4, #8]
   263fa:	f104 0018 	add.w	r0, r4, #24
   263fe:	f000 fd3b 	bl	26e78 <z_abort_timeout>
   26402:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   26406:	4620      	mov	r0, r4
   26408:	f7ff fba2 	bl	25b50 <ready_thread>
	return list->head == list;
   2640c:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2640e:	42bc      	cmp	r4, r7
   26410:	d001      	beq.n	26416 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26412:	2c00      	cmp	r4, #0
   26414:	d1e5      	bne.n	263e2 <end_thread+0x56>
		update_cache(1);
   26416:	2001      	movs	r0, #1
   26418:	f7ff fa62 	bl	258e0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   2641c:	4628      	mov	r0, r5
   2641e:	f7fd fbb9 	bl	23b94 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   26422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26424:	200035cc 	.word	0x200035cc

00026428 <z_unpend1_no_timeout>:
{
   26428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2642a:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
   2642c:	2500      	movs	r5, #0
   2642e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26432:	f3ef 8611 	mrs	r6, BASEPRI
   26436:	f383 8812 	msr	BASEPRI_MAX, r3
   2643a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2643e:	4823      	ldr	r0, [pc, #140]	; (264cc <z_unpend1_no_timeout+0xa4>)
   26440:	f7fd fb80 	bl	23b44 <z_spin_lock_valid>
   26444:	b120      	cbz	r0, 26450 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
   26446:	4821      	ldr	r0, [pc, #132]	; (264cc <z_unpend1_no_timeout+0xa4>)
   26448:	f7fd fb9c 	bl	23b84 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   2644c:	2400      	movs	r4, #0
	return k;
   2644e:	e023      	b.n	26498 <z_unpend1_no_timeout+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26450:	4c1f      	ldr	r4, [pc, #124]	; (264d0 <z_unpend1_no_timeout+0xa8>)
   26452:	2381      	movs	r3, #129	; 0x81
   26454:	4622      	mov	r2, r4
   26456:	491f      	ldr	r1, [pc, #124]	; (264d4 <z_unpend1_no_timeout+0xac>)
   26458:	481f      	ldr	r0, [pc, #124]	; (264d8 <z_unpend1_no_timeout+0xb0>)
   2645a:	f005 fe75 	bl	2c148 <printk>
   2645e:	491b      	ldr	r1, [pc, #108]	; (264cc <z_unpend1_no_timeout+0xa4>)
   26460:	481e      	ldr	r0, [pc, #120]	; (264dc <z_unpend1_no_timeout+0xb4>)
   26462:	f005 fe71 	bl	2c148 <printk>
   26466:	2181      	movs	r1, #129	; 0x81
   26468:	4620      	mov	r0, r4
   2646a:	f006 f872 	bl	2c552 <assert_post_action>
   2646e:	e7ea      	b.n	26446 <z_unpend1_no_timeout+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26470:	f7fe ffd6 	bl	25420 <pended_on_thread>
   26474:	4621      	mov	r1, r4
   26476:	f7ff f9b1 	bl	257dc <z_priq_dumb_remove>
   2647a:	7b63      	ldrb	r3, [r4, #13]
   2647c:	f023 0302 	bic.w	r3, r3, #2
   26480:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   26482:	2300      	movs	r3, #0
   26484:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26486:	4811      	ldr	r0, [pc, #68]	; (264cc <z_unpend1_no_timeout+0xa4>)
   26488:	f7fd fb6c 	bl	23b64 <z_spin_unlock_valid>
   2648c:	b160      	cbz	r0, 264a8 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
   2648e:	f386 8811 	msr	BASEPRI, r6
   26492:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26496:	2501      	movs	r5, #1
   26498:	b9b5      	cbnz	r5, 264c8 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
   2649a:	4638      	mov	r0, r7
   2649c:	f00a f911 	bl	306c2 <z_priq_dumb_best>
		if (thread != NULL) {
   264a0:	4604      	mov	r4, r0
   264a2:	2800      	cmp	r0, #0
   264a4:	d1e4      	bne.n	26470 <z_unpend1_no_timeout+0x48>
   264a6:	e7ee      	b.n	26486 <z_unpend1_no_timeout+0x5e>
   264a8:	4d09      	ldr	r5, [pc, #36]	; (264d0 <z_unpend1_no_timeout+0xa8>)
   264aa:	23ac      	movs	r3, #172	; 0xac
   264ac:	462a      	mov	r2, r5
   264ae:	490c      	ldr	r1, [pc, #48]	; (264e0 <z_unpend1_no_timeout+0xb8>)
   264b0:	4809      	ldr	r0, [pc, #36]	; (264d8 <z_unpend1_no_timeout+0xb0>)
   264b2:	f005 fe49 	bl	2c148 <printk>
   264b6:	4905      	ldr	r1, [pc, #20]	; (264cc <z_unpend1_no_timeout+0xa4>)
   264b8:	480a      	ldr	r0, [pc, #40]	; (264e4 <z_unpend1_no_timeout+0xbc>)
   264ba:	f005 fe45 	bl	2c148 <printk>
   264be:	21ac      	movs	r1, #172	; 0xac
   264c0:	4628      	mov	r0, r5
   264c2:	f006 f846 	bl	2c552 <assert_post_action>
   264c6:	e7e2      	b.n	2648e <z_unpend1_no_timeout+0x66>
}
   264c8:	4620      	mov	r0, r4
   264ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   264cc:	200035f4 	.word	0x200035f4
   264d0:	0003234c 	.word	0x0003234c
   264d4:	000323a4 	.word	0x000323a4
   264d8:	00031df4 	.word	0x00031df4
   264dc:	000323bc 	.word	0x000323bc
   264e0:	00032374 	.word	0x00032374
   264e4:	0003238c 	.word	0x0003238c

000264e8 <z_unpend_first_thread>:
{
   264e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   264ea:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
   264ec:	2500      	movs	r5, #0
	__asm__ volatile(
   264ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   264f2:	f3ef 8611 	mrs	r6, BASEPRI
   264f6:	f383 8812 	msr	BASEPRI_MAX, r3
   264fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   264fe:	4825      	ldr	r0, [pc, #148]	; (26594 <z_unpend_first_thread+0xac>)
   26500:	f7fd fb20 	bl	23b44 <z_spin_lock_valid>
   26504:	b120      	cbz	r0, 26510 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
   26506:	4823      	ldr	r0, [pc, #140]	; (26594 <z_unpend_first_thread+0xac>)
   26508:	f7fd fb3c 	bl	23b84 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   2650c:	2400      	movs	r4, #0
	return k;
   2650e:	e027      	b.n	26560 <z_unpend_first_thread+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26510:	4c21      	ldr	r4, [pc, #132]	; (26598 <z_unpend_first_thread+0xb0>)
   26512:	2381      	movs	r3, #129	; 0x81
   26514:	4622      	mov	r2, r4
   26516:	4921      	ldr	r1, [pc, #132]	; (2659c <z_unpend_first_thread+0xb4>)
   26518:	4821      	ldr	r0, [pc, #132]	; (265a0 <z_unpend_first_thread+0xb8>)
   2651a:	f005 fe15 	bl	2c148 <printk>
   2651e:	491d      	ldr	r1, [pc, #116]	; (26594 <z_unpend_first_thread+0xac>)
   26520:	4820      	ldr	r0, [pc, #128]	; (265a4 <z_unpend_first_thread+0xbc>)
   26522:	f005 fe11 	bl	2c148 <printk>
   26526:	2181      	movs	r1, #129	; 0x81
   26528:	4620      	mov	r0, r4
   2652a:	f006 f812 	bl	2c552 <assert_post_action>
   2652e:	e7ea      	b.n	26506 <z_unpend_first_thread+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26530:	f7fe ff76 	bl	25420 <pended_on_thread>
   26534:	4621      	mov	r1, r4
   26536:	f7ff f951 	bl	257dc <z_priq_dumb_remove>
   2653a:	7b63      	ldrb	r3, [r4, #13]
   2653c:	f023 0302 	bic.w	r3, r3, #2
   26540:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   26542:	2300      	movs	r3, #0
   26544:	60a3      	str	r3, [r4, #8]
   26546:	f104 0018 	add.w	r0, r4, #24
   2654a:	f000 fc95 	bl	26e78 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2654e:	4811      	ldr	r0, [pc, #68]	; (26594 <z_unpend_first_thread+0xac>)
   26550:	f7fd fb08 	bl	23b64 <z_spin_unlock_valid>
   26554:	b160      	cbz	r0, 26570 <z_unpend_first_thread+0x88>
	__asm__ volatile(
   26556:	f386 8811 	msr	BASEPRI, r6
   2655a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2655e:	2501      	movs	r5, #1
   26560:	b9b5      	cbnz	r5, 26590 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
   26562:	4638      	mov	r0, r7
   26564:	f00a f8ad 	bl	306c2 <z_priq_dumb_best>
		if (thread != NULL) {
   26568:	4604      	mov	r4, r0
   2656a:	2800      	cmp	r0, #0
   2656c:	d1e0      	bne.n	26530 <z_unpend_first_thread+0x48>
   2656e:	e7ee      	b.n	2654e <z_unpend_first_thread+0x66>
   26570:	4d09      	ldr	r5, [pc, #36]	; (26598 <z_unpend_first_thread+0xb0>)
   26572:	23ac      	movs	r3, #172	; 0xac
   26574:	462a      	mov	r2, r5
   26576:	490c      	ldr	r1, [pc, #48]	; (265a8 <z_unpend_first_thread+0xc0>)
   26578:	4809      	ldr	r0, [pc, #36]	; (265a0 <z_unpend_first_thread+0xb8>)
   2657a:	f005 fde5 	bl	2c148 <printk>
   2657e:	4905      	ldr	r1, [pc, #20]	; (26594 <z_unpend_first_thread+0xac>)
   26580:	480a      	ldr	r0, [pc, #40]	; (265ac <z_unpend_first_thread+0xc4>)
   26582:	f005 fde1 	bl	2c148 <printk>
   26586:	21ac      	movs	r1, #172	; 0xac
   26588:	4628      	mov	r0, r5
   2658a:	f005 ffe2 	bl	2c552 <assert_post_action>
   2658e:	e7e2      	b.n	26556 <z_unpend_first_thread+0x6e>
}
   26590:	4620      	mov	r0, r4
   26592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26594:	200035f4 	.word	0x200035f4
   26598:	0003234c 	.word	0x0003234c
   2659c:	000323a4 	.word	0x000323a4
   265a0:	00031df4 	.word	0x00031df4
   265a4:	000323bc 	.word	0x000323bc
   265a8:	00032374 	.word	0x00032374
   265ac:	0003238c 	.word	0x0003238c

000265b0 <z_sched_init>:
{
   265b0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   265b2:	4804      	ldr	r0, [pc, #16]	; (265c4 <z_sched_init+0x14>)
   265b4:	f00a f89d 	bl	306f2 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   265b8:	2100      	movs	r1, #0
   265ba:	4608      	mov	r0, r1
   265bc:	f7fe ff70 	bl	254a0 <k_sched_time_slice_set>
}
   265c0:	bd08      	pop	{r3, pc}
   265c2:	bf00      	nop
   265c4:	200035c8 	.word	0x200035c8

000265c8 <z_impl_k_yield>:
{
   265c8:	b570      	push	{r4, r5, r6, lr}
   265ca:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   265ce:	2b00      	cmp	r3, #0
   265d0:	d149      	bne.n	26666 <z_impl_k_yield+0x9e>
	__asm__ volatile(
   265d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   265d6:	f3ef 8611 	mrs	r6, BASEPRI
   265da:	f383 8812 	msr	BASEPRI_MAX, r3
   265de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   265e2:	4843      	ldr	r0, [pc, #268]	; (266f0 <z_impl_k_yield+0x128>)
   265e4:	f7fd faae 	bl	23b44 <z_spin_lock_valid>
   265e8:	2800      	cmp	r0, #0
   265ea:	d04d      	beq.n	26688 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
   265ec:	4840      	ldr	r0, [pc, #256]	; (266f0 <z_impl_k_yield+0x128>)
   265ee:	f7fd fac9 	bl	23b84 <z_spin_lock_set_owner>
		dequeue_thread(_current);
   265f2:	4c40      	ldr	r4, [pc, #256]	; (266f4 <z_impl_k_yield+0x12c>)
   265f4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   265f6:	7b4b      	ldrb	r3, [r1, #13]
   265f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   265fc:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   265fe:	f104 0020 	add.w	r0, r4, #32
   26602:	f7ff f8eb 	bl	257dc <z_priq_dumb_remove>
	queue_thread(_current);
   26606:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   26608:	7b6b      	ldrb	r3, [r5, #13]
   2660a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2660e:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26610:	4b39      	ldr	r3, [pc, #228]	; (266f8 <z_impl_k_yield+0x130>)
   26612:	429d      	cmp	r5, r3
   26614:	d048      	beq.n	266a8 <z_impl_k_yield+0xe0>
	return list->head == list;
   26616:	4b37      	ldr	r3, [pc, #220]	; (266f4 <z_impl_k_yield+0x12c>)
   26618:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2661c:	429c      	cmp	r4, r3
   2661e:	d055      	beq.n	266cc <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26620:	b16c      	cbz	r4, 2663e <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26622:	4621      	mov	r1, r4
   26624:	4628      	mov	r0, r5
   26626:	f00a f82d 	bl	30684 <z_sched_prio_cmp>
   2662a:	2800      	cmp	r0, #0
   2662c:	dc48      	bgt.n	266c0 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2662e:	b134      	cbz	r4, 2663e <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
   26630:	4b30      	ldr	r3, [pc, #192]	; (266f4 <z_impl_k_yield+0x12c>)
   26632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26634:	429c      	cmp	r4, r3
   26636:	d002      	beq.n	2663e <z_impl_k_yield+0x76>
   26638:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2663a:	2c00      	cmp	r4, #0
   2663c:	d1f0      	bne.n	26620 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
   2663e:	4b2d      	ldr	r3, [pc, #180]	; (266f4 <z_impl_k_yield+0x12c>)
   26640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   26642:	f103 0120 	add.w	r1, r3, #32
   26646:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   26648:	606a      	str	r2, [r5, #4]
	tail->next = node;
   2664a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2664c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   2664e:	2001      	movs	r0, #1
   26650:	f7ff f946 	bl	258e0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26654:	4826      	ldr	r0, [pc, #152]	; (266f0 <z_impl_k_yield+0x128>)
   26656:	f7fd fa85 	bl	23b64 <z_spin_unlock_valid>
   2665a:	2800      	cmp	r0, #0
   2665c:	d038      	beq.n	266d0 <z_impl_k_yield+0x108>
   2665e:	4630      	mov	r0, r6
   26660:	f7ee fdec 	bl	1523c <arch_swap>
}
   26664:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
   26666:	4c25      	ldr	r4, [pc, #148]	; (266fc <z_impl_k_yield+0x134>)
   26668:	f240 43dc 	movw	r3, #1244	; 0x4dc
   2666c:	4622      	mov	r2, r4
   2666e:	4924      	ldr	r1, [pc, #144]	; (26700 <z_impl_k_yield+0x138>)
   26670:	4824      	ldr	r0, [pc, #144]	; (26704 <z_impl_k_yield+0x13c>)
   26672:	f005 fd69 	bl	2c148 <printk>
   26676:	4824      	ldr	r0, [pc, #144]	; (26708 <z_impl_k_yield+0x140>)
   26678:	f005 fd66 	bl	2c148 <printk>
   2667c:	f240 41dc 	movw	r1, #1244	; 0x4dc
   26680:	4620      	mov	r0, r4
   26682:	f005 ff66 	bl	2c552 <assert_post_action>
   26686:	e7a4      	b.n	265d2 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26688:	4c20      	ldr	r4, [pc, #128]	; (2670c <z_impl_k_yield+0x144>)
   2668a:	2381      	movs	r3, #129	; 0x81
   2668c:	4622      	mov	r2, r4
   2668e:	4920      	ldr	r1, [pc, #128]	; (26710 <z_impl_k_yield+0x148>)
   26690:	481c      	ldr	r0, [pc, #112]	; (26704 <z_impl_k_yield+0x13c>)
   26692:	f005 fd59 	bl	2c148 <printk>
   26696:	4916      	ldr	r1, [pc, #88]	; (266f0 <z_impl_k_yield+0x128>)
   26698:	481e      	ldr	r0, [pc, #120]	; (26714 <z_impl_k_yield+0x14c>)
   2669a:	f005 fd55 	bl	2c148 <printk>
   2669e:	2181      	movs	r1, #129	; 0x81
   266a0:	4620      	mov	r0, r4
   266a2:	f005 ff56 	bl	2c552 <assert_post_action>
   266a6:	e7a1      	b.n	265ec <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   266a8:	4c14      	ldr	r4, [pc, #80]	; (266fc <z_impl_k_yield+0x134>)
   266aa:	23ba      	movs	r3, #186	; 0xba
   266ac:	4622      	mov	r2, r4
   266ae:	491a      	ldr	r1, [pc, #104]	; (26718 <z_impl_k_yield+0x150>)
   266b0:	4814      	ldr	r0, [pc, #80]	; (26704 <z_impl_k_yield+0x13c>)
   266b2:	f005 fd49 	bl	2c148 <printk>
   266b6:	21ba      	movs	r1, #186	; 0xba
   266b8:	4620      	mov	r0, r4
   266ba:	f005 ff4a 	bl	2c552 <assert_post_action>
   266be:	e7aa      	b.n	26616 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
   266c0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   266c2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   266c4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   266c6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   266c8:	6065      	str	r5, [r4, #4]
}
   266ca:	e7c0      	b.n	2664e <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   266cc:	2400      	movs	r4, #0
   266ce:	e7a7      	b.n	26620 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   266d0:	4c0e      	ldr	r4, [pc, #56]	; (2670c <z_impl_k_yield+0x144>)
   266d2:	23c3      	movs	r3, #195	; 0xc3
   266d4:	4622      	mov	r2, r4
   266d6:	4911      	ldr	r1, [pc, #68]	; (2671c <z_impl_k_yield+0x154>)
   266d8:	480a      	ldr	r0, [pc, #40]	; (26704 <z_impl_k_yield+0x13c>)
   266da:	f005 fd35 	bl	2c148 <printk>
   266de:	4904      	ldr	r1, [pc, #16]	; (266f0 <z_impl_k_yield+0x128>)
   266e0:	480f      	ldr	r0, [pc, #60]	; (26720 <z_impl_k_yield+0x158>)
   266e2:	f005 fd31 	bl	2c148 <printk>
   266e6:	21c3      	movs	r1, #195	; 0xc3
   266e8:	4620      	mov	r0, r4
   266ea:	f005 ff32 	bl	2c552 <assert_post_action>
   266ee:	e7b6      	b.n	2665e <z_impl_k_yield+0x96>
   266f0:	200035f4 	.word	0x200035f4
   266f4:	200035ac 	.word	0x200035ac
   266f8:	20002498 	.word	0x20002498
   266fc:	000360c8 	.word	0x000360c8
   26700:	00035dc4 	.word	0x00035dc4
   26704:	00031df4 	.word	0x00031df4
   26708:	00034ad0 	.word	0x00034ad0
   2670c:	0003234c 	.word	0x0003234c
   26710:	000323a4 	.word	0x000323a4
   26714:	000323bc 	.word	0x000323bc
   26718:	00036104 	.word	0x00036104
   2671c:	00032374 	.word	0x00032374
   26720:	0003238c 	.word	0x0003238c

00026724 <z_tick_sleep>:
{
   26724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26728:	4604      	mov	r4, r0
   2672a:	460d      	mov	r5, r1
   2672c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   26730:	2b00      	cmp	r3, #0
   26732:	d14f      	bne.n	267d4 <z_tick_sleep+0xb0>
	if (ticks == 0) {
   26734:	ea54 0305 	orrs.w	r3, r4, r5
   26738:	d05e      	beq.n	267f8 <z_tick_sleep+0xd4>
	if (Z_TICK_ABS(ticks) <= 0) {
   2673a:	f06f 0301 	mvn.w	r3, #1
   2673e:	1b1e      	subs	r6, r3, r4
   26740:	f04f 33ff 	mov.w	r3, #4294967295
   26744:	eb63 0705 	sbc.w	r7, r3, r5
   26748:	2e01      	cmp	r6, #1
   2674a:	f177 0300 	sbcs.w	r3, r7, #0
   2674e:	db57      	blt.n	26800 <z_tick_sleep+0xdc>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   26750:	f06f 0601 	mvn.w	r6, #1
   26754:	1b36      	subs	r6, r6, r4
   26756:	f04f 0340 	mov.w	r3, #64	; 0x40
   2675a:	f3ef 8911 	mrs	r9, BASEPRI
   2675e:	f383 8812 	msr	BASEPRI_MAX, r3
   26762:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26766:	4842      	ldr	r0, [pc, #264]	; (26870 <z_tick_sleep+0x14c>)
   26768:	f7fd f9ec 	bl	23b44 <z_spin_lock_valid>
   2676c:	2800      	cmp	r0, #0
   2676e:	d04b      	beq.n	26808 <z_tick_sleep+0xe4>
	z_spin_lock_set_owner(l);
   26770:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 26870 <z_tick_sleep+0x14c>
   26774:	4640      	mov	r0, r8
   26776:	f7fd fa05 	bl	23b84 <z_spin_lock_set_owner>
	pending_current = _current;
   2677a:	4f3e      	ldr	r7, [pc, #248]	; (26874 <z_tick_sleep+0x150>)
   2677c:	68b8      	ldr	r0, [r7, #8]
   2677e:	4b3e      	ldr	r3, [pc, #248]	; (26878 <z_tick_sleep+0x154>)
   26780:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   26782:	f7ff fb59 	bl	25e38 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   26786:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   26788:	4622      	mov	r2, r4
   2678a:	462b      	mov	r3, r5
   2678c:	493b      	ldr	r1, [pc, #236]	; (2687c <z_tick_sleep+0x158>)
   2678e:	3018      	adds	r0, #24
   26790:	f000 fa76 	bl	26c80 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   26794:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   26796:	7b53      	ldrb	r3, [r2, #13]
   26798:	f043 0310 	orr.w	r3, r3, #16
   2679c:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2679e:	4640      	mov	r0, r8
   267a0:	f7fd f9e0 	bl	23b64 <z_spin_unlock_valid>
   267a4:	2800      	cmp	r0, #0
   267a6:	d03f      	beq.n	26828 <z_tick_sleep+0x104>
   267a8:	4648      	mov	r0, r9
   267aa:	f7ee fd47 	bl	1523c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   267ae:	4b31      	ldr	r3, [pc, #196]	; (26874 <z_tick_sleep+0x150>)
   267b0:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
   267b2:	7b5b      	ldrb	r3, [r3, #13]
   267b4:	f013 0f10 	tst.w	r3, #16
   267b8:	d146      	bne.n	26848 <z_tick_sleep+0x124>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   267ba:	2500      	movs	r5, #0
   267bc:	f009 ffb4 	bl	30728 <sys_clock_tick_get_32>
   267c0:	1a34      	subs	r4, r6, r0
   267c2:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   267c6:	2c01      	cmp	r4, #1
   267c8:	f175 0300 	sbcs.w	r3, r5, #0
   267cc:	da4d      	bge.n	2686a <z_tick_sleep+0x146>
	return 0;
   267ce:	2000      	movs	r0, #0
}
   267d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
   267d4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 268a0 <z_tick_sleep+0x17c>
   267d8:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
   267dc:	4642      	mov	r2, r8
   267de:	4928      	ldr	r1, [pc, #160]	; (26880 <z_tick_sleep+0x15c>)
   267e0:	4828      	ldr	r0, [pc, #160]	; (26884 <z_tick_sleep+0x160>)
   267e2:	f005 fcb1 	bl	2c148 <printk>
   267e6:	4828      	ldr	r0, [pc, #160]	; (26888 <z_tick_sleep+0x164>)
   267e8:	f005 fcae 	bl	2c148 <printk>
   267ec:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   267f0:	4640      	mov	r0, r8
   267f2:	f005 feae 	bl	2c552 <assert_post_action>
   267f6:	e79d      	b.n	26734 <z_tick_sleep+0x10>
	z_impl_k_yield();
   267f8:	f7ff fee6 	bl	265c8 <z_impl_k_yield>
		return 0;
   267fc:	2000      	movs	r0, #0
   267fe:	e7e7      	b.n	267d0 <z_tick_sleep+0xac>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   26800:	f009 ff92 	bl	30728 <sys_clock_tick_get_32>
   26804:	1906      	adds	r6, r0, r4
   26806:	e7a6      	b.n	26756 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26808:	4f20      	ldr	r7, [pc, #128]	; (2688c <z_tick_sleep+0x168>)
   2680a:	2381      	movs	r3, #129	; 0x81
   2680c:	463a      	mov	r2, r7
   2680e:	4920      	ldr	r1, [pc, #128]	; (26890 <z_tick_sleep+0x16c>)
   26810:	481c      	ldr	r0, [pc, #112]	; (26884 <z_tick_sleep+0x160>)
   26812:	f005 fc99 	bl	2c148 <printk>
   26816:	4916      	ldr	r1, [pc, #88]	; (26870 <z_tick_sleep+0x14c>)
   26818:	481e      	ldr	r0, [pc, #120]	; (26894 <z_tick_sleep+0x170>)
   2681a:	f005 fc95 	bl	2c148 <printk>
   2681e:	2181      	movs	r1, #129	; 0x81
   26820:	4638      	mov	r0, r7
   26822:	f005 fe96 	bl	2c552 <assert_post_action>
   26826:	e7a3      	b.n	26770 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26828:	4c18      	ldr	r4, [pc, #96]	; (2688c <z_tick_sleep+0x168>)
   2682a:	23c3      	movs	r3, #195	; 0xc3
   2682c:	4622      	mov	r2, r4
   2682e:	491a      	ldr	r1, [pc, #104]	; (26898 <z_tick_sleep+0x174>)
   26830:	4814      	ldr	r0, [pc, #80]	; (26884 <z_tick_sleep+0x160>)
   26832:	f005 fc89 	bl	2c148 <printk>
   26836:	4641      	mov	r1, r8
   26838:	4818      	ldr	r0, [pc, #96]	; (2689c <z_tick_sleep+0x178>)
   2683a:	f005 fc85 	bl	2c148 <printk>
   2683e:	21c3      	movs	r1, #195	; 0xc3
   26840:	4620      	mov	r0, r4
   26842:	f005 fe86 	bl	2c552 <assert_post_action>
   26846:	e7af      	b.n	267a8 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   26848:	4c15      	ldr	r4, [pc, #84]	; (268a0 <z_tick_sleep+0x17c>)
   2684a:	f240 5319 	movw	r3, #1305	; 0x519
   2684e:	4622      	mov	r2, r4
   26850:	4914      	ldr	r1, [pc, #80]	; (268a4 <z_tick_sleep+0x180>)
   26852:	480c      	ldr	r0, [pc, #48]	; (26884 <z_tick_sleep+0x160>)
   26854:	f005 fc78 	bl	2c148 <printk>
   26858:	480b      	ldr	r0, [pc, #44]	; (26888 <z_tick_sleep+0x164>)
   2685a:	f005 fc75 	bl	2c148 <printk>
   2685e:	f240 5119 	movw	r1, #1305	; 0x519
   26862:	4620      	mov	r0, r4
   26864:	f005 fe75 	bl	2c552 <assert_post_action>
   26868:	e7a7      	b.n	267ba <z_tick_sleep+0x96>
		return ticks;
   2686a:	4620      	mov	r0, r4
   2686c:	e7b0      	b.n	267d0 <z_tick_sleep+0xac>
   2686e:	bf00      	nop
   26870:	200035f4 	.word	0x200035f4
   26874:	200035ac 	.word	0x200035ac
   26878:	200035f0 	.word	0x200035f0
   2687c:	00025d59 	.word	0x00025d59
   26880:	00035dc4 	.word	0x00035dc4
   26884:	00031df4 	.word	0x00031df4
   26888:	00034ad0 	.word	0x00034ad0
   2688c:	0003234c 	.word	0x0003234c
   26890:	000323a4 	.word	0x000323a4
   26894:	000323bc 	.word	0x000323bc
   26898:	00032374 	.word	0x00032374
   2689c:	0003238c 	.word	0x0003238c
   268a0:	000360c8 	.word	0x000360c8
   268a4:	00036184 	.word	0x00036184

000268a8 <z_impl_k_sleep>:
{
   268a8:	b570      	push	{r4, r5, r6, lr}
   268aa:	4604      	mov	r4, r0
   268ac:	460d      	mov	r5, r1
   268ae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   268b2:	bb13      	cbnz	r3, 268fa <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   268b4:	f1b5 3fff 	cmp.w	r5, #4294967295
   268b8:	bf08      	it	eq
   268ba:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   268be:	d02d      	beq.n	2691c <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
   268c0:	4620      	mov	r0, r4
   268c2:	4629      	mov	r1, r5
   268c4:	f7ff ff2e 	bl	26724 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   268c8:	4604      	mov	r4, r0
   268ca:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   268cc:	0169      	lsls	r1, r5, #5
   268ce:	0143      	lsls	r3, r0, #5
   268d0:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   268d4:	1a18      	subs	r0, r3, r0
   268d6:	eb62 0305 	sbc.w	r3, r2, r5
   268da:	009a      	lsls	r2, r3, #2
   268dc:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   268e0:	0081      	lsls	r1, r0, #2
   268e2:	4613      	mov	r3, r2
   268e4:	1908      	adds	r0, r1, r4
   268e6:	eb45 0303 	adc.w	r3, r5, r3
   268ea:	00da      	lsls	r2, r3, #3
   268ec:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   268f0:	00c1      	lsls	r1, r0, #3
   268f2:	0bc8      	lsrs	r0, r1, #15
   268f4:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   268f8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
   268fa:	4e0c      	ldr	r6, [pc, #48]	; (2692c <z_impl_k_sleep+0x84>)
   268fc:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   26900:	4632      	mov	r2, r6
   26902:	490b      	ldr	r1, [pc, #44]	; (26930 <z_impl_k_sleep+0x88>)
   26904:	480b      	ldr	r0, [pc, #44]	; (26934 <z_impl_k_sleep+0x8c>)
   26906:	f005 fc1f 	bl	2c148 <printk>
   2690a:	480b      	ldr	r0, [pc, #44]	; (26938 <z_impl_k_sleep+0x90>)
   2690c:	f005 fc1c 	bl	2c148 <printk>
   26910:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   26914:	4630      	mov	r0, r6
   26916:	f005 fe1c 	bl	2c552 <assert_post_action>
   2691a:	e7cb      	b.n	268b4 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
   2691c:	4b07      	ldr	r3, [pc, #28]	; (2693c <z_impl_k_sleep+0x94>)
   2691e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   26920:	f7ff fc24 	bl	2616c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   26924:	f04f 30ff 	mov.w	r0, #4294967295
   26928:	e7e6      	b.n	268f8 <z_impl_k_sleep+0x50>
   2692a:	bf00      	nop
   2692c:	000360c8 	.word	0x000360c8
   26930:	00035dc4 	.word	0x00035dc4
   26934:	00031df4 	.word	0x00031df4
   26938:	00034ad0 	.word	0x00034ad0
   2693c:	200035ac 	.word	0x200035ac

00026940 <z_impl_z_current_get>:
}
   26940:	4b01      	ldr	r3, [pc, #4]	; (26948 <z_impl_z_current_get+0x8>)
   26942:	6898      	ldr	r0, [r3, #8]
   26944:	4770      	bx	lr
   26946:	bf00      	nop
   26948:	200035ac 	.word	0x200035ac

0002694c <z_impl_k_is_preempt_thread>:
   2694c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   26950:	b933      	cbnz	r3, 26960 <z_impl_k_is_preempt_thread+0x14>
   26952:	4b05      	ldr	r3, [pc, #20]	; (26968 <z_impl_k_is_preempt_thread+0x1c>)
   26954:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   26956:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   26958:	2b7f      	cmp	r3, #127	; 0x7f
   2695a:	d803      	bhi.n	26964 <z_impl_k_is_preempt_thread+0x18>
   2695c:	2001      	movs	r0, #1
   2695e:	4770      	bx	lr
   26960:	2000      	movs	r0, #0
   26962:	4770      	bx	lr
   26964:	2000      	movs	r0, #0
}
   26966:	4770      	bx	lr
   26968:	200035ac 	.word	0x200035ac

0002696c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   2696c:	b570      	push	{r4, r5, r6, lr}
   2696e:	4604      	mov	r4, r0
   26970:	f04f 0340 	mov.w	r3, #64	; 0x40
   26974:	f3ef 8511 	mrs	r5, BASEPRI
   26978:	f383 8812 	msr	BASEPRI_MAX, r3
   2697c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26980:	4840      	ldr	r0, [pc, #256]	; (26a84 <z_thread_abort+0x118>)
   26982:	f7fd f8df 	bl	23b44 <z_spin_lock_valid>
   26986:	b1b8      	cbz	r0, 269b8 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
   26988:	483e      	ldr	r0, [pc, #248]	; (26a84 <z_thread_abort+0x118>)
   2698a:	f7fd f8fb 	bl	23b84 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2698e:	7b63      	ldrb	r3, [r4, #13]
   26990:	f013 0f08 	tst.w	r3, #8
   26994:	d120      	bne.n	269d8 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
   26996:	4620      	mov	r0, r4
   26998:	f7ff fcf8 	bl	2638c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   2699c:	4b3a      	ldr	r3, [pc, #232]	; (26a88 <z_thread_abort+0x11c>)
   2699e:	689b      	ldr	r3, [r3, #8]
   269a0:	42a3      	cmp	r3, r4
   269a2:	d032      	beq.n	26a0a <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269a4:	4837      	ldr	r0, [pc, #220]	; (26a84 <z_thread_abort+0x118>)
   269a6:	f7fd f8dd 	bl	23b64 <z_spin_unlock_valid>
   269aa:	2800      	cmp	r0, #0
   269ac:	d059      	beq.n	26a62 <z_thread_abort+0xf6>
	__asm__ volatile(
   269ae:	f385 8811 	msr	BASEPRI, r5
   269b2:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   269b6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   269b8:	4e34      	ldr	r6, [pc, #208]	; (26a8c <z_thread_abort+0x120>)
   269ba:	2381      	movs	r3, #129	; 0x81
   269bc:	4632      	mov	r2, r6
   269be:	4934      	ldr	r1, [pc, #208]	; (26a90 <z_thread_abort+0x124>)
   269c0:	4834      	ldr	r0, [pc, #208]	; (26a94 <z_thread_abort+0x128>)
   269c2:	f005 fbc1 	bl	2c148 <printk>
   269c6:	492f      	ldr	r1, [pc, #188]	; (26a84 <z_thread_abort+0x118>)
   269c8:	4833      	ldr	r0, [pc, #204]	; (26a98 <z_thread_abort+0x12c>)
   269ca:	f005 fbbd 	bl	2c148 <printk>
   269ce:	2181      	movs	r1, #129	; 0x81
   269d0:	4630      	mov	r0, r6
   269d2:	f005 fdbe 	bl	2c552 <assert_post_action>
   269d6:	e7d7      	b.n	26988 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269d8:	482a      	ldr	r0, [pc, #168]	; (26a84 <z_thread_abort+0x118>)
   269da:	f7fd f8c3 	bl	23b64 <z_spin_unlock_valid>
   269de:	b120      	cbz	r0, 269ea <z_thread_abort+0x7e>
   269e0:	f385 8811 	msr	BASEPRI, r5
   269e4:	f3bf 8f6f 	isb	sy
		return;
   269e8:	e7e5      	b.n	269b6 <z_thread_abort+0x4a>
   269ea:	4c28      	ldr	r4, [pc, #160]	; (26a8c <z_thread_abort+0x120>)
   269ec:	23ac      	movs	r3, #172	; 0xac
   269ee:	4622      	mov	r2, r4
   269f0:	492a      	ldr	r1, [pc, #168]	; (26a9c <z_thread_abort+0x130>)
   269f2:	4828      	ldr	r0, [pc, #160]	; (26a94 <z_thread_abort+0x128>)
   269f4:	f005 fba8 	bl	2c148 <printk>
   269f8:	4922      	ldr	r1, [pc, #136]	; (26a84 <z_thread_abort+0x118>)
   269fa:	4829      	ldr	r0, [pc, #164]	; (26aa0 <z_thread_abort+0x134>)
   269fc:	f005 fba4 	bl	2c148 <printk>
   26a00:	21ac      	movs	r1, #172	; 0xac
   26a02:	4620      	mov	r0, r4
   26a04:	f005 fda5 	bl	2c552 <assert_post_action>
   26a08:	e7ea      	b.n	269e0 <z_thread_abort+0x74>
   26a0a:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
   26a0e:	2b00      	cmp	r3, #0
   26a10:	d1c8      	bne.n	269a4 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a12:	481c      	ldr	r0, [pc, #112]	; (26a84 <z_thread_abort+0x118>)
   26a14:	f7fd f8a6 	bl	23b64 <z_spin_unlock_valid>
   26a18:	b198      	cbz	r0, 26a42 <z_thread_abort+0xd6>
   26a1a:	4628      	mov	r0, r5
   26a1c:	f7ee fc0e 	bl	1523c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   26a20:	4c20      	ldr	r4, [pc, #128]	; (26aa4 <z_thread_abort+0x138>)
   26a22:	f240 634b 	movw	r3, #1611	; 0x64b
   26a26:	4622      	mov	r2, r4
   26a28:	491f      	ldr	r1, [pc, #124]	; (26aa8 <z_thread_abort+0x13c>)
   26a2a:	481a      	ldr	r0, [pc, #104]	; (26a94 <z_thread_abort+0x128>)
   26a2c:	f005 fb8c 	bl	2c148 <printk>
   26a30:	481e      	ldr	r0, [pc, #120]	; (26aac <z_thread_abort+0x140>)
   26a32:	f005 fb89 	bl	2c148 <printk>
   26a36:	f240 614b 	movw	r1, #1611	; 0x64b
   26a3a:	4620      	mov	r0, r4
   26a3c:	f005 fd89 	bl	2c552 <assert_post_action>
   26a40:	e7b0      	b.n	269a4 <z_thread_abort+0x38>
   26a42:	4c12      	ldr	r4, [pc, #72]	; (26a8c <z_thread_abort+0x120>)
   26a44:	23c3      	movs	r3, #195	; 0xc3
   26a46:	4622      	mov	r2, r4
   26a48:	4914      	ldr	r1, [pc, #80]	; (26a9c <z_thread_abort+0x130>)
   26a4a:	4812      	ldr	r0, [pc, #72]	; (26a94 <z_thread_abort+0x128>)
   26a4c:	f005 fb7c 	bl	2c148 <printk>
   26a50:	490c      	ldr	r1, [pc, #48]	; (26a84 <z_thread_abort+0x118>)
   26a52:	4813      	ldr	r0, [pc, #76]	; (26aa0 <z_thread_abort+0x134>)
   26a54:	f005 fb78 	bl	2c148 <printk>
   26a58:	21c3      	movs	r1, #195	; 0xc3
   26a5a:	4620      	mov	r0, r4
   26a5c:	f005 fd79 	bl	2c552 <assert_post_action>
   26a60:	e7db      	b.n	26a1a <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a62:	4c0a      	ldr	r4, [pc, #40]	; (26a8c <z_thread_abort+0x120>)
   26a64:	23ac      	movs	r3, #172	; 0xac
   26a66:	4622      	mov	r2, r4
   26a68:	490c      	ldr	r1, [pc, #48]	; (26a9c <z_thread_abort+0x130>)
   26a6a:	480a      	ldr	r0, [pc, #40]	; (26a94 <z_thread_abort+0x128>)
   26a6c:	f005 fb6c 	bl	2c148 <printk>
   26a70:	4904      	ldr	r1, [pc, #16]	; (26a84 <z_thread_abort+0x118>)
   26a72:	480b      	ldr	r0, [pc, #44]	; (26aa0 <z_thread_abort+0x134>)
   26a74:	f005 fb68 	bl	2c148 <printk>
   26a78:	21ac      	movs	r1, #172	; 0xac
   26a7a:	4620      	mov	r0, r4
   26a7c:	f005 fd69 	bl	2c552 <assert_post_action>
   26a80:	e795      	b.n	269ae <z_thread_abort+0x42>
   26a82:	bf00      	nop
   26a84:	200035f4 	.word	0x200035f4
   26a88:	200035ac 	.word	0x200035ac
   26a8c:	0003234c 	.word	0x0003234c
   26a90:	000323a4 	.word	0x000323a4
   26a94:	00031df4 	.word	0x00031df4
   26a98:	000323bc 	.word	0x000323bc
   26a9c:	00032374 	.word	0x00032374
   26aa0:	0003238c 	.word	0x0003238c
   26aa4:	000360c8 	.word	0x000360c8
   26aa8:	000364dc 	.word	0x000364dc
   26aac:	000361c4 	.word	0x000361c4

00026ab0 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   26ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26ab4:	4606      	mov	r6, r0
   26ab6:	460f      	mov	r7, r1
   26ab8:	4690      	mov	r8, r2
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
   26aba:	2400      	movs	r4, #0
	__asm__ volatile(
   26abc:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ac0:	f3ef 8511 	mrs	r5, BASEPRI
   26ac4:	f383 8812 	msr	BASEPRI_MAX, r3
   26ac8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26acc:	482b      	ldr	r0, [pc, #172]	; (26b7c <z_sched_wake+0xcc>)
   26ace:	f7fd f839 	bl	23b44 <z_spin_lock_valid>
   26ad2:	b128      	cbz	r0, 26ae0 <z_sched_wake+0x30>
	z_spin_lock_set_owner(l);
   26ad4:	4829      	ldr	r0, [pc, #164]	; (26b7c <z_sched_wake+0xcc>)
   26ad6:	f7fd f855 	bl	23b84 <z_spin_lock_set_owner>
	bool ret = false;
   26ada:	f04f 0900 	mov.w	r9, #0
	return k;
   26ade:	e031      	b.n	26b44 <z_sched_wake+0x94>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26ae0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 26b8c <z_sched_wake+0xdc>
   26ae4:	2381      	movs	r3, #129	; 0x81
   26ae6:	464a      	mov	r2, r9
   26ae8:	4925      	ldr	r1, [pc, #148]	; (26b80 <z_sched_wake+0xd0>)
   26aea:	4826      	ldr	r0, [pc, #152]	; (26b84 <z_sched_wake+0xd4>)
   26aec:	f005 fb2c 	bl	2c148 <printk>
   26af0:	4922      	ldr	r1, [pc, #136]	; (26b7c <z_sched_wake+0xcc>)
   26af2:	4825      	ldr	r0, [pc, #148]	; (26b88 <z_sched_wake+0xd8>)
   26af4:	f005 fb28 	bl	2c148 <printk>
   26af8:	2181      	movs	r1, #129	; 0x81
   26afa:	4648      	mov	r0, r9
   26afc:	f005 fd29 	bl	2c552 <assert_post_action>
   26b00:	e7e8      	b.n	26ad4 <z_sched_wake+0x24>
   26b02:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   26b06:	f8c0 8014 	str.w	r8, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26b0a:	f7fe fc89 	bl	25420 <pended_on_thread>
   26b0e:	4621      	mov	r1, r4
   26b10:	f7fe fe64 	bl	257dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26b14:	7b63      	ldrb	r3, [r4, #13]
   26b16:	f023 0302 	bic.w	r3, r3, #2
   26b1a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   26b1c:	2300      	movs	r3, #0
   26b1e:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   26b20:	f104 0018 	add.w	r0, r4, #24
   26b24:	f000 f9a8 	bl	26e78 <z_abort_timeout>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   26b28:	4620      	mov	r0, r4
   26b2a:	f7ff f811 	bl	25b50 <ready_thread>
			ret = true;
   26b2e:	f04f 0901 	mov.w	r9, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b32:	4812      	ldr	r0, [pc, #72]	; (26b7c <z_sched_wake+0xcc>)
   26b34:	f7fd f816 	bl	23b64 <z_spin_unlock_valid>
   26b38:	b160      	cbz	r0, 26b54 <z_sched_wake+0xa4>
	__asm__ volatile(
   26b3a:	f385 8811 	msr	BASEPRI, r5
   26b3e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26b42:	2401      	movs	r4, #1
   26b44:	b9b4      	cbnz	r4, 26b74 <z_sched_wake+0xc4>
		thread = _priq_wait_best(&wait_q->waitq);
   26b46:	4630      	mov	r0, r6
   26b48:	f009 fdbb 	bl	306c2 <z_priq_dumb_best>
		if (thread != NULL) {
   26b4c:	4604      	mov	r4, r0
   26b4e:	2800      	cmp	r0, #0
   26b50:	d1d7      	bne.n	26b02 <z_sched_wake+0x52>
   26b52:	e7ee      	b.n	26b32 <z_sched_wake+0x82>
   26b54:	4c0d      	ldr	r4, [pc, #52]	; (26b8c <z_sched_wake+0xdc>)
   26b56:	23ac      	movs	r3, #172	; 0xac
   26b58:	4622      	mov	r2, r4
   26b5a:	490d      	ldr	r1, [pc, #52]	; (26b90 <z_sched_wake+0xe0>)
   26b5c:	4809      	ldr	r0, [pc, #36]	; (26b84 <z_sched_wake+0xd4>)
   26b5e:	f005 faf3 	bl	2c148 <printk>
   26b62:	4906      	ldr	r1, [pc, #24]	; (26b7c <z_sched_wake+0xcc>)
   26b64:	480b      	ldr	r0, [pc, #44]	; (26b94 <z_sched_wake+0xe4>)
   26b66:	f005 faef 	bl	2c148 <printk>
   26b6a:	21ac      	movs	r1, #172	; 0xac
   26b6c:	4620      	mov	r0, r4
   26b6e:	f005 fcf0 	bl	2c552 <assert_post_action>
   26b72:	e7e2      	b.n	26b3a <z_sched_wake+0x8a>
		}
	}

	return ret;
}
   26b74:	4648      	mov	r0, r9
   26b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26b7a:	bf00      	nop
   26b7c:	200035f4 	.word	0x200035f4
   26b80:	000323a4 	.word	0x000323a4
   26b84:	00031df4 	.word	0x00031df4
   26b88:	000323bc 	.word	0x000323bc
   26b8c:	0003234c 	.word	0x0003234c
   26b90:	00032374 	.word	0x00032374
   26b94:	0003238c 	.word	0x0003238c

00026b98 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   26b98:	b5d0      	push	{r4, r6, r7, lr}
   26b9a:	b082      	sub	sp, #8
   26b9c:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   26b9e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   26ba2:	e9cd 6700 	strd	r6, r7, [sp]
   26ba6:	f7ff fa01 	bl	25fac <z_pend_curr>

	if (data != NULL) {
   26baa:	b11c      	cbz	r4, 26bb4 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   26bac:	4b02      	ldr	r3, [pc, #8]	; (26bb8 <z_sched_wait+0x20>)
   26bae:	689b      	ldr	r3, [r3, #8]
   26bb0:	695b      	ldr	r3, [r3, #20]
   26bb2:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   26bb4:	b002      	add	sp, #8
   26bb6:	bdd0      	pop	{r4, r6, r7, pc}
   26bb8:	200035ac 	.word	0x200035ac

00026bbc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   26bbc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   26bbe:	4806      	ldr	r0, [pc, #24]	; (26bd8 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26bc0:	4a06      	ldr	r2, [pc, #24]	; (26bdc <z_data_copy+0x20>)
   26bc2:	1a12      	subs	r2, r2, r0
   26bc4:	4906      	ldr	r1, [pc, #24]	; (26be0 <z_data_copy+0x24>)
   26bc6:	f009 fe73 	bl	308b0 <memcpy>
   26bca:	4a06      	ldr	r2, [pc, #24]	; (26be4 <z_data_copy+0x28>)
   26bcc:	4906      	ldr	r1, [pc, #24]	; (26be8 <z_data_copy+0x2c>)
   26bce:	4807      	ldr	r0, [pc, #28]	; (26bec <z_data_copy+0x30>)
   26bd0:	f009 fe6e 	bl	308b0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   26bd4:	bd08      	pop	{r3, pc}
   26bd6:	bf00      	nop
   26bd8:	20000000 	.word	0x20000000
   26bdc:	20000e10 	.word	0x20000e10
   26be0:	00036898 	.word	0x00036898
   26be4:	00000000 	.word	0x00000000
   26be8:	00036898 	.word	0x00036898
   26bec:	20000000 	.word	0x20000000

00026bf0 <first>:
	return list->head == list;
   26bf0:	4b03      	ldr	r3, [pc, #12]	; (26c00 <first+0x10>)
   26bf2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26bf4:	4298      	cmp	r0, r3
   26bf6:	d000      	beq.n	26bfa <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   26bf8:	4770      	bx	lr
   26bfa:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   26bfc:	e7fc      	b.n	26bf8 <first+0x8>
   26bfe:	bf00      	nop
   26c00:	20000860 	.word	0x20000860

00026c04 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26c04:	b130      	cbz	r0, 26c14 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   26c06:	4a04      	ldr	r2, [pc, #16]	; (26c18 <next+0x14>)
   26c08:	6852      	ldr	r2, [r2, #4]
   26c0a:	4290      	cmp	r0, r2
   26c0c:	d001      	beq.n	26c12 <next+0xe>
   26c0e:	6800      	ldr	r0, [r0, #0]
   26c10:	4770      	bx	lr
   26c12:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   26c14:	4770      	bx	lr
   26c16:	bf00      	nop
   26c18:	20000860 	.word	0x20000860

00026c1c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   26c1c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   26c1e:	4b04      	ldr	r3, [pc, #16]	; (26c30 <elapsed+0x14>)
   26c20:	681b      	ldr	r3, [r3, #0]
   26c22:	b10b      	cbz	r3, 26c28 <elapsed+0xc>
   26c24:	2000      	movs	r0, #0
}
   26c26:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   26c28:	f7f9 f898 	bl	1fd5c <sys_clock_elapsed>
   26c2c:	e7fb      	b.n	26c26 <elapsed+0xa>
   26c2e:	bf00      	nop
   26c30:	20003600 	.word	0x20003600

00026c34 <next_timeout>:

static int32_t next_timeout(void)
{
   26c34:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   26c36:	f7ff ffdb 	bl	26bf0 <first>
   26c3a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   26c3c:	f7ff ffee 	bl	26c1c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   26c40:	b18c      	cbz	r4, 26c66 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   26c42:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   26c46:	1a12      	subs	r2, r2, r0
   26c48:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   26c4c:	2a01      	cmp	r2, #1
   26c4e:	f173 0100 	sbcs.w	r1, r3, #0
   26c52:	db11      	blt.n	26c78 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   26c54:	4610      	mov	r0, r2
   26c56:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   26c5a:	f173 0300 	sbcs.w	r3, r3, #0
   26c5e:	db04      	blt.n	26c6a <next_timeout+0x36>
   26c60:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   26c64:	e001      	b.n	26c6a <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   26c66:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   26c6a:	4b04      	ldr	r3, [pc, #16]	; (26c7c <next_timeout+0x48>)
   26c6c:	691b      	ldr	r3, [r3, #16]
   26c6e:	b113      	cbz	r3, 26c76 <next_timeout+0x42>
   26c70:	4283      	cmp	r3, r0
   26c72:	da00      	bge.n	26c76 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   26c74:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   26c76:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   26c78:	2000      	movs	r0, #0
   26c7a:	e7f6      	b.n	26c6a <next_timeout+0x36>
   26c7c:	200035ac 	.word	0x200035ac

00026c80 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   26c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c84:	b087      	sub	sp, #28
   26c86:	9100      	str	r1, [sp, #0]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26c88:	f1b3 3fff 	cmp.w	r3, #4294967295
   26c8c:	bf08      	it	eq
   26c8e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   26c92:	f000 80d3 	beq.w	26e3c <z_add_timeout+0x1bc>
   26c96:	4604      	mov	r4, r0
   26c98:	4616      	mov	r6, r2
   26c9a:	461f      	mov	r7, r3
	return node->next != NULL;
   26c9c:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   26c9e:	b16b      	cbz	r3, 26cbc <z_add_timeout+0x3c>
   26ca0:	4d68      	ldr	r5, [pc, #416]	; (26e44 <z_add_timeout+0x1c4>)
   26ca2:	235d      	movs	r3, #93	; 0x5d
   26ca4:	462a      	mov	r2, r5
   26ca6:	4968      	ldr	r1, [pc, #416]	; (26e48 <z_add_timeout+0x1c8>)
   26ca8:	4868      	ldr	r0, [pc, #416]	; (26e4c <z_add_timeout+0x1cc>)
   26caa:	f005 fa4d 	bl	2c148 <printk>
   26cae:	4868      	ldr	r0, [pc, #416]	; (26e50 <z_add_timeout+0x1d0>)
   26cb0:	f005 fa4a 	bl	2c148 <printk>
   26cb4:	215d      	movs	r1, #93	; 0x5d
   26cb6:	4628      	mov	r0, r5
   26cb8:	f005 fc4b 	bl	2c552 <assert_post_action>
	to->fn = fn;
   26cbc:	9b00      	ldr	r3, [sp, #0]
   26cbe:	60a3      	str	r3, [r4, #8]

	LOCKED(&timeout_lock) {
   26cc0:	2500      	movs	r5, #0
	__asm__ volatile(
   26cc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   26cc6:	f3ef 8211 	mrs	r2, BASEPRI
   26cca:	f383 8812 	msr	BASEPRI_MAX, r3
   26cce:	f3bf 8f6f 	isb	sy
   26cd2:	9200      	str	r2, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26cd4:	485f      	ldr	r0, [pc, #380]	; (26e54 <z_add_timeout+0x1d4>)
   26cd6:	f7fc ff35 	bl	23b44 <z_spin_lock_valid>
   26cda:	b140      	cbz	r0, 26cee <z_add_timeout+0x6e>
	z_spin_lock_set_owner(l);
   26cdc:	485d      	ldr	r0, [pc, #372]	; (26e54 <z_add_timeout+0x1d4>)
   26cde:	f7fc ff51 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   26ce2:	9b00      	ldr	r3, [sp, #0]
   26ce4:	9303      	str	r3, [sp, #12]
   26ce6:	e9cd ab00 	strd	sl, fp, [sp]
   26cea:	46a3      	mov	fp, r4
   26cec:	e040      	b.n	26d70 <z_add_timeout+0xf0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26cee:	2381      	movs	r3, #129	; 0x81
   26cf0:	4a59      	ldr	r2, [pc, #356]	; (26e58 <z_add_timeout+0x1d8>)
   26cf2:	495a      	ldr	r1, [pc, #360]	; (26e5c <z_add_timeout+0x1dc>)
   26cf4:	4855      	ldr	r0, [pc, #340]	; (26e4c <z_add_timeout+0x1cc>)
   26cf6:	f005 fa27 	bl	2c148 <printk>
   26cfa:	4956      	ldr	r1, [pc, #344]	; (26e54 <z_add_timeout+0x1d4>)
   26cfc:	4858      	ldr	r0, [pc, #352]	; (26e60 <z_add_timeout+0x1e0>)
   26cfe:	f005 fa23 	bl	2c148 <printk>
   26d02:	2181      	movs	r1, #129	; 0x81
   26d04:	4854      	ldr	r0, [pc, #336]	; (26e58 <z_add_timeout+0x1d8>)
   26d06:	f005 fc24 	bl	2c552 <assert_post_action>
   26d0a:	e7e7      	b.n	26cdc <z_add_timeout+0x5c>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   26d0c:	2201      	movs	r2, #1
   26d0e:	2300      	movs	r3, #0
   26d10:	e052      	b.n	26db8 <z_add_timeout+0x138>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   26d12:	f7ff ff83 	bl	26c1c <elapsed>
   26d16:	1833      	adds	r3, r6, r0
   26d18:	eb47 74e0 	adc.w	r4, r7, r0, asr #31
   26d1c:	1c5a      	adds	r2, r3, #1
   26d1e:	f144 0300 	adc.w	r3, r4, #0
   26d22:	f8cb 2010 	str.w	r2, [fp, #16]
   26d26:	f8cb 3014 	str.w	r3, [fp, #20]
   26d2a:	e049      	b.n	26dc0 <z_add_timeout+0x140>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   26d2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   26d30:	1aa2      	subs	r2, r4, r2
   26d32:	9b05      	ldr	r3, [sp, #20]
   26d34:	eb65 0303 	sbc.w	r3, r5, r3
   26d38:	6102      	str	r2, [r0, #16]
   26d3a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   26d3c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   26d3e:	f8cb 3004 	str.w	r3, [fp, #4]
	node->next = successor;
   26d42:	f8cb 0000 	str.w	r0, [fp]
	prev->next = node;
   26d46:	f8c3 b000 	str.w	fp, [r3]
	successor->prev = node;
   26d4a:	f8c0 b004 	str.w	fp, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   26d4e:	2800      	cmp	r0, #0
   26d50:	d04c      	beq.n	26dec <z_add_timeout+0x16c>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   26d52:	f7ff ff4d 	bl	26bf0 <first>
   26d56:	4583      	cmp	fp, r0
   26d58:	d053      	beq.n	26e02 <z_add_timeout+0x182>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26d5a:	483e      	ldr	r0, [pc, #248]	; (26e54 <z_add_timeout+0x1d4>)
   26d5c:	f7fc ff02 	bl	23b64 <z_spin_unlock_valid>
   26d60:	2800      	cmp	r0, #0
   26d62:	d05b      	beq.n	26e1c <z_add_timeout+0x19c>
	__asm__ volatile(
   26d64:	9b03      	ldr	r3, [sp, #12]
   26d66:	f383 8811 	msr	BASEPRI, r3
   26d6a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   26d6e:	2501      	movs	r5, #1
   26d70:	2d00      	cmp	r5, #0
   26d72:	d163      	bne.n	26e3c <z_add_timeout+0x1bc>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   26d74:	f06f 0301 	mvn.w	r3, #1
   26d78:	ebb3 0806 	subs.w	r8, r3, r6
   26d7c:	f04f 30ff 	mov.w	r0, #4294967295
   26d80:	eb60 0907 	sbc.w	r9, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   26d84:	f1b8 0f00 	cmp.w	r8, #0
   26d88:	f179 0300 	sbcs.w	r3, r9, #0
   26d8c:	dbc1      	blt.n	26d12 <z_add_timeout+0x92>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   26d8e:	4a35      	ldr	r2, [pc, #212]	; (26e64 <z_add_timeout+0x1e4>)
   26d90:	6813      	ldr	r3, [r2, #0]
   26d92:	6852      	ldr	r2, [r2, #4]
   26d94:	18f3      	adds	r3, r6, r3
   26d96:	eb47 0202 	adc.w	r2, r7, r2
   26d9a:	f06f 0101 	mvn.w	r1, #1
   26d9e:	1acb      	subs	r3, r1, r3
   26da0:	9300      	str	r3, [sp, #0]
   26da2:	eb60 0302 	sbc.w	r3, r0, r2
   26da6:	9301      	str	r3, [sp, #4]
			to->dticks = MAX(1, ticks);
   26da8:	e9dd 0100 	ldrd	r0, r1, [sp]
   26dac:	4602      	mov	r2, r0
   26dae:	460b      	mov	r3, r1
   26db0:	2801      	cmp	r0, #1
   26db2:	f171 0100 	sbcs.w	r1, r1, #0
   26db6:	dba9      	blt.n	26d0c <z_add_timeout+0x8c>
   26db8:	f8cb 2010 	str.w	r2, [fp, #16]
   26dbc:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
   26dc0:	f7ff ff16 	bl	26bf0 <first>
   26dc4:	2800      	cmp	r0, #0
   26dc6:	d0c2      	beq.n	26d4e <z_add_timeout+0xce>
			if (t->dticks > to->dticks) {
   26dc8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   26dcc:	e9db 2304 	ldrd	r2, r3, [fp, #16]
   26dd0:	42a2      	cmp	r2, r4
   26dd2:	eb73 0105 	sbcs.w	r1, r3, r5
   26dd6:	dba9      	blt.n	26d2c <z_add_timeout+0xac>
			to->dticks -= t->dticks;
   26dd8:	1b11      	subs	r1, r2, r4
   26dda:	eb63 0305 	sbc.w	r3, r3, r5
   26dde:	f8cb 1010 	str.w	r1, [fp, #16]
   26de2:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
   26de6:	f7ff ff0d 	bl	26c04 <next>
   26dea:	e7eb      	b.n	26dc4 <z_add_timeout+0x144>
	sys_dnode_t *const tail = list->tail;
   26dec:	4b1e      	ldr	r3, [pc, #120]	; (26e68 <z_add_timeout+0x1e8>)
   26dee:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   26df0:	f8cb 3000 	str.w	r3, [fp]
	node->prev = tail;
   26df4:	f8cb 2004 	str.w	r2, [fp, #4]
	tail->next = node;
   26df8:	f8c2 b000 	str.w	fp, [r2]
	list->tail = node;
   26dfc:	f8c3 b004 	str.w	fp, [r3, #4]
}
   26e00:	e7a7      	b.n	26d52 <z_add_timeout+0xd2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   26e02:	f7ff ff17 	bl	26c34 <next_timeout>

			if (next_time == 0 ||
   26e06:	4603      	mov	r3, r0
   26e08:	b118      	cbz	r0, 26e12 <z_add_timeout+0x192>
			    _current_cpu->slice_ticks != next_time) {
   26e0a:	4a18      	ldr	r2, [pc, #96]	; (26e6c <z_add_timeout+0x1ec>)
   26e0c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   26e0e:	4282      	cmp	r2, r0
   26e10:	d0a3      	beq.n	26d5a <z_add_timeout+0xda>
				sys_clock_set_timeout(next_time, false);
   26e12:	2100      	movs	r1, #0
   26e14:	4618      	mov	r0, r3
   26e16:	f7f8 ff6d 	bl	1fcf4 <sys_clock_set_timeout>
   26e1a:	e79e      	b.n	26d5a <z_add_timeout+0xda>
   26e1c:	4c0e      	ldr	r4, [pc, #56]	; (26e58 <z_add_timeout+0x1d8>)
   26e1e:	23ac      	movs	r3, #172	; 0xac
   26e20:	4622      	mov	r2, r4
   26e22:	4913      	ldr	r1, [pc, #76]	; (26e70 <z_add_timeout+0x1f0>)
   26e24:	4809      	ldr	r0, [pc, #36]	; (26e4c <z_add_timeout+0x1cc>)
   26e26:	f005 f98f 	bl	2c148 <printk>
   26e2a:	490a      	ldr	r1, [pc, #40]	; (26e54 <z_add_timeout+0x1d4>)
   26e2c:	4811      	ldr	r0, [pc, #68]	; (26e74 <z_add_timeout+0x1f4>)
   26e2e:	f005 f98b 	bl	2c148 <printk>
   26e32:	21ac      	movs	r1, #172	; 0xac
   26e34:	4620      	mov	r0, r4
   26e36:	f005 fb8c 	bl	2c552 <assert_post_action>
   26e3a:	e793      	b.n	26d64 <z_add_timeout+0xe4>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   26e3c:	b007      	add	sp, #28
   26e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e42:	bf00      	nop
   26e44:	000361e8 	.word	0x000361e8
   26e48:	0003620c 	.word	0x0003620c
   26e4c:	00031df4 	.word	0x00031df4
   26e50:	00034ad0 	.word	0x00034ad0
   26e54:	20003604 	.word	0x20003604
   26e58:	0003234c 	.word	0x0003234c
   26e5c:	000323a4 	.word	0x000323a4
   26e60:	000323bc 	.word	0x000323bc
   26e64:	200026e0 	.word	0x200026e0
   26e68:	20000860 	.word	0x20000860
   26e6c:	200035ac 	.word	0x200035ac
   26e70:	00032374 	.word	0x00032374
   26e74:	0003238c 	.word	0x0003238c

00026e78 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   26e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26e7c:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
   26e7e:	2400      	movs	r4, #0
	__asm__ volatile(
   26e80:	f04f 0340 	mov.w	r3, #64	; 0x40
   26e84:	f3ef 8711 	mrs	r7, BASEPRI
   26e88:	f383 8812 	msr	BASEPRI_MAX, r3
   26e8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26e90:	481f      	ldr	r0, [pc, #124]	; (26f10 <z_abort_timeout+0x98>)
   26e92:	f7fc fe57 	bl	23b44 <z_spin_lock_valid>
   26e96:	b128      	cbz	r0, 26ea4 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
   26e98:	481d      	ldr	r0, [pc, #116]	; (26f10 <z_abort_timeout+0x98>)
   26e9a:	f7fc fe73 	bl	23b84 <z_spin_lock_set_owner>
	int ret = -EINVAL;
   26e9e:	f06f 0815 	mvn.w	r8, #21
	return k;
   26ea2:	e01c      	b.n	26ede <z_abort_timeout+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26ea4:	4e1b      	ldr	r6, [pc, #108]	; (26f14 <z_abort_timeout+0x9c>)
   26ea6:	2381      	movs	r3, #129	; 0x81
   26ea8:	4632      	mov	r2, r6
   26eaa:	491b      	ldr	r1, [pc, #108]	; (26f18 <z_abort_timeout+0xa0>)
   26eac:	481b      	ldr	r0, [pc, #108]	; (26f1c <z_abort_timeout+0xa4>)
   26eae:	f005 f94b 	bl	2c148 <printk>
   26eb2:	4917      	ldr	r1, [pc, #92]	; (26f10 <z_abort_timeout+0x98>)
   26eb4:	481a      	ldr	r0, [pc, #104]	; (26f20 <z_abort_timeout+0xa8>)
   26eb6:	f005 f947 	bl	2c148 <printk>
   26eba:	2181      	movs	r1, #129	; 0x81
   26ebc:	4630      	mov	r0, r6
   26ebe:	f005 fb48 	bl	2c552 <assert_post_action>
   26ec2:	e7e9      	b.n	26e98 <z_abort_timeout+0x20>
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
   26ec4:	4628      	mov	r0, r5
   26ec6:	f009 fc18 	bl	306fa <remove_timeout>
			ret = 0;
   26eca:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ecc:	4810      	ldr	r0, [pc, #64]	; (26f10 <z_abort_timeout+0x98>)
   26ece:	f7fc fe49 	bl	23b64 <z_spin_unlock_valid>
   26ed2:	b150      	cbz	r0, 26eea <z_abort_timeout+0x72>
	__asm__ volatile(
   26ed4:	f387 8811 	msr	BASEPRI, r7
   26ed8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   26edc:	2401      	movs	r4, #1
   26ede:	4626      	mov	r6, r4
   26ee0:	b99c      	cbnz	r4, 26f0a <z_abort_timeout+0x92>
	return node->next != NULL;
   26ee2:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
   26ee4:	2b00      	cmp	r3, #0
   26ee6:	d1ed      	bne.n	26ec4 <z_abort_timeout+0x4c>
   26ee8:	e7f0      	b.n	26ecc <z_abort_timeout+0x54>
   26eea:	4c0a      	ldr	r4, [pc, #40]	; (26f14 <z_abort_timeout+0x9c>)
   26eec:	23ac      	movs	r3, #172	; 0xac
   26eee:	4622      	mov	r2, r4
   26ef0:	490c      	ldr	r1, [pc, #48]	; (26f24 <z_abort_timeout+0xac>)
   26ef2:	480a      	ldr	r0, [pc, #40]	; (26f1c <z_abort_timeout+0xa4>)
   26ef4:	f005 f928 	bl	2c148 <printk>
   26ef8:	4905      	ldr	r1, [pc, #20]	; (26f10 <z_abort_timeout+0x98>)
   26efa:	480b      	ldr	r0, [pc, #44]	; (26f28 <z_abort_timeout+0xb0>)
   26efc:	f005 f924 	bl	2c148 <printk>
   26f00:	21ac      	movs	r1, #172	; 0xac
   26f02:	4620      	mov	r0, r4
   26f04:	f005 fb25 	bl	2c552 <assert_post_action>
   26f08:	e7e4      	b.n	26ed4 <z_abort_timeout+0x5c>
		}
	}

	return ret;
}
   26f0a:	4640      	mov	r0, r8
   26f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f10:	20003604 	.word	0x20003604
   26f14:	0003234c 	.word	0x0003234c
   26f18:	000323a4 	.word	0x000323a4
   26f1c:	00031df4 	.word	0x00031df4
   26f20:	000323bc 	.word	0x000323bc
   26f24:	00032374 	.word	0x00032374
   26f28:	0003238c 	.word	0x0003238c

00026f2c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   26f2c:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
   26f2e:	2500      	movs	r5, #0
	__asm__ volatile(
   26f30:	f04f 0340 	mov.w	r3, #64	; 0x40
   26f34:	f3ef 8611 	mrs	r6, BASEPRI
   26f38:	f383 8812 	msr	BASEPRI_MAX, r3
   26f3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f40:	481c      	ldr	r0, [pc, #112]	; (26fb4 <z_get_next_timeout_expiry+0x88>)
   26f42:	f7fc fdff 	bl	23b44 <z_spin_lock_valid>
   26f46:	b128      	cbz	r0, 26f54 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
   26f48:	481a      	ldr	r0, [pc, #104]	; (26fb4 <z_get_next_timeout_expiry+0x88>)
   26f4a:	f7fc fe1b 	bl	23b84 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   26f4e:	f04f 34ff 	mov.w	r4, #4294967295
	return k;
   26f52:	e023      	b.n	26f9c <z_get_next_timeout_expiry+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f54:	4c18      	ldr	r4, [pc, #96]	; (26fb8 <z_get_next_timeout_expiry+0x8c>)
   26f56:	2381      	movs	r3, #129	; 0x81
   26f58:	4622      	mov	r2, r4
   26f5a:	4918      	ldr	r1, [pc, #96]	; (26fbc <z_get_next_timeout_expiry+0x90>)
   26f5c:	4818      	ldr	r0, [pc, #96]	; (26fc0 <z_get_next_timeout_expiry+0x94>)
   26f5e:	f005 f8f3 	bl	2c148 <printk>
   26f62:	4914      	ldr	r1, [pc, #80]	; (26fb4 <z_get_next_timeout_expiry+0x88>)
   26f64:	4817      	ldr	r0, [pc, #92]	; (26fc4 <z_get_next_timeout_expiry+0x98>)
   26f66:	f005 f8ef 	bl	2c148 <printk>
   26f6a:	2181      	movs	r1, #129	; 0x81
   26f6c:	4620      	mov	r0, r4
   26f6e:	f005 faf0 	bl	2c552 <assert_post_action>
   26f72:	e7e9      	b.n	26f48 <z_get_next_timeout_expiry+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f74:	4d10      	ldr	r5, [pc, #64]	; (26fb8 <z_get_next_timeout_expiry+0x8c>)
   26f76:	23ac      	movs	r3, #172	; 0xac
   26f78:	462a      	mov	r2, r5
   26f7a:	4913      	ldr	r1, [pc, #76]	; (26fc8 <z_get_next_timeout_expiry+0x9c>)
   26f7c:	4810      	ldr	r0, [pc, #64]	; (26fc0 <z_get_next_timeout_expiry+0x94>)
   26f7e:	f005 f8e3 	bl	2c148 <printk>
   26f82:	490c      	ldr	r1, [pc, #48]	; (26fb4 <z_get_next_timeout_expiry+0x88>)
   26f84:	4811      	ldr	r0, [pc, #68]	; (26fcc <z_get_next_timeout_expiry+0xa0>)
   26f86:	f005 f8df 	bl	2c148 <printk>
   26f8a:	21ac      	movs	r1, #172	; 0xac
   26f8c:	4628      	mov	r0, r5
   26f8e:	f005 fae0 	bl	2c552 <assert_post_action>
	__asm__ volatile(
   26f92:	f386 8811 	msr	BASEPRI, r6
   26f96:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   26f9a:	2501      	movs	r5, #1
   26f9c:	b945      	cbnz	r5, 26fb0 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
   26f9e:	f7ff fe49 	bl	26c34 <next_timeout>
   26fa2:	4604      	mov	r4, r0
   26fa4:	4803      	ldr	r0, [pc, #12]	; (26fb4 <z_get_next_timeout_expiry+0x88>)
   26fa6:	f7fc fddd 	bl	23b64 <z_spin_unlock_valid>
   26faa:	2800      	cmp	r0, #0
   26fac:	d1f1      	bne.n	26f92 <z_get_next_timeout_expiry+0x66>
   26fae:	e7e1      	b.n	26f74 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
   26fb0:	4620      	mov	r0, r4
   26fb2:	bd70      	pop	{r4, r5, r6, pc}
   26fb4:	20003604 	.word	0x20003604
   26fb8:	0003234c 	.word	0x0003234c
   26fbc:	000323a4 	.word	0x000323a4
   26fc0:	00031df4 	.word	0x00031df4
   26fc4:	000323bc 	.word	0x000323bc
   26fc8:	00032374 	.word	0x00032374
   26fcc:	0003238c 	.word	0x0003238c

00026fd0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   26fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26fd4:	4607      	mov	r7, r0
   26fd6:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
   26fd8:	2500      	movs	r5, #0
	__asm__ volatile(
   26fda:	f04f 0340 	mov.w	r3, #64	; 0x40
   26fde:	f3ef 8611 	mrs	r6, BASEPRI
   26fe2:	f383 8812 	msr	BASEPRI_MAX, r3
   26fe6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26fea:	4825      	ldr	r0, [pc, #148]	; (27080 <z_set_timeout_expiry+0xb0>)
   26fec:	f7fc fdaa 	bl	23b44 <z_spin_lock_valid>
   26ff0:	b118      	cbz	r0, 26ffa <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
   26ff2:	4823      	ldr	r0, [pc, #140]	; (27080 <z_set_timeout_expiry+0xb0>)
   26ff4:	f7fc fdc6 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   26ff8:	e01e      	b.n	27038 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26ffa:	4c22      	ldr	r4, [pc, #136]	; (27084 <z_set_timeout_expiry+0xb4>)
   26ffc:	2381      	movs	r3, #129	; 0x81
   26ffe:	4622      	mov	r2, r4
   27000:	4921      	ldr	r1, [pc, #132]	; (27088 <z_set_timeout_expiry+0xb8>)
   27002:	4822      	ldr	r0, [pc, #136]	; (2708c <z_set_timeout_expiry+0xbc>)
   27004:	f005 f8a0 	bl	2c148 <printk>
   27008:	491d      	ldr	r1, [pc, #116]	; (27080 <z_set_timeout_expiry+0xb0>)
   2700a:	4821      	ldr	r0, [pc, #132]	; (27090 <z_set_timeout_expiry+0xc0>)
   2700c:	f005 f89c 	bl	2c148 <printk>
   27010:	2181      	movs	r1, #129	; 0x81
   27012:	4620      	mov	r0, r4
   27014:	f005 fa9d 	bl	2c552 <assert_post_action>
   27018:	e7eb      	b.n	26ff2 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   2701a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   2701c:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   27020:	2801      	cmp	r0, #1
   27022:	dd00      	ble.n	27026 <z_set_timeout_expiry+0x56>
   27024:	b99c      	cbnz	r4, 2704e <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27026:	4816      	ldr	r0, [pc, #88]	; (27080 <z_set_timeout_expiry+0xb0>)
   27028:	f7fc fd9c 	bl	23b64 <z_spin_unlock_valid>
   2702c:	b1b0      	cbz	r0, 2705c <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
   2702e:	f386 8811 	msr	BASEPRI, r6
   27032:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   27036:	2501      	movs	r5, #1
   27038:	462c      	mov	r4, r5
   2703a:	b9fd      	cbnz	r5, 2707c <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
   2703c:	f7ff fdfa 	bl	26c34 <next_timeout>
			      || (ticks <= next_to);
   27040:	f1b0 3fff 	cmp.w	r0, #4294967295
   27044:	d0e9      	beq.n	2701a <z_set_timeout_expiry+0x4a>
   27046:	42b8      	cmp	r0, r7
   27048:	dbe8      	blt.n	2701c <z_set_timeout_expiry+0x4c>
   2704a:	2401      	movs	r4, #1
   2704c:	e7e6      	b.n	2701c <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2704e:	4641      	mov	r1, r8
   27050:	42b8      	cmp	r0, r7
   27052:	bfa8      	it	ge
   27054:	4638      	movge	r0, r7
   27056:	f7f8 fe4d 	bl	1fcf4 <sys_clock_set_timeout>
   2705a:	e7e4      	b.n	27026 <z_set_timeout_expiry+0x56>
   2705c:	4c09      	ldr	r4, [pc, #36]	; (27084 <z_set_timeout_expiry+0xb4>)
   2705e:	23ac      	movs	r3, #172	; 0xac
   27060:	4622      	mov	r2, r4
   27062:	490c      	ldr	r1, [pc, #48]	; (27094 <z_set_timeout_expiry+0xc4>)
   27064:	4809      	ldr	r0, [pc, #36]	; (2708c <z_set_timeout_expiry+0xbc>)
   27066:	f005 f86f 	bl	2c148 <printk>
   2706a:	4905      	ldr	r1, [pc, #20]	; (27080 <z_set_timeout_expiry+0xb0>)
   2706c:	480a      	ldr	r0, [pc, #40]	; (27098 <z_set_timeout_expiry+0xc8>)
   2706e:	f005 f86b 	bl	2c148 <printk>
   27072:	21ac      	movs	r1, #172	; 0xac
   27074:	4620      	mov	r0, r4
   27076:	f005 fa6c 	bl	2c552 <assert_post_action>
   2707a:	e7d8      	b.n	2702e <z_set_timeout_expiry+0x5e>
		}
	}
}
   2707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27080:	20003604 	.word	0x20003604
   27084:	0003234c 	.word	0x0003234c
   27088:	000323a4 	.word	0x000323a4
   2708c:	00031df4 	.word	0x00031df4
   27090:	000323bc 	.word	0x000323bc
   27094:	00032374 	.word	0x00032374
   27098:	0003238c 	.word	0x0003238c

0002709c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2709e:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   270a0:	f7fe fcba 	bl	25a18 <z_time_slice>
	__asm__ volatile(
   270a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   270a8:	f3ef 8411 	mrs	r4, BASEPRI
   270ac:	f383 8812 	msr	BASEPRI_MAX, r3
   270b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   270b4:	4854      	ldr	r0, [pc, #336]	; (27208 <sys_clock_announce+0x16c>)
   270b6:	f7fc fd45 	bl	23b44 <z_spin_lock_valid>
   270ba:	b128      	cbz	r0, 270c8 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
   270bc:	4852      	ldr	r0, [pc, #328]	; (27208 <sys_clock_announce+0x16c>)
   270be:	f7fc fd61 	bl	23b84 <z_spin_lock_set_owner>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   270c2:	4b52      	ldr	r3, [pc, #328]	; (2720c <sys_clock_announce+0x170>)
   270c4:	601d      	str	r5, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   270c6:	e031      	b.n	2712c <sys_clock_announce+0x90>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   270c8:	4e51      	ldr	r6, [pc, #324]	; (27210 <sys_clock_announce+0x174>)
   270ca:	2381      	movs	r3, #129	; 0x81
   270cc:	4632      	mov	r2, r6
   270ce:	4951      	ldr	r1, [pc, #324]	; (27214 <sys_clock_announce+0x178>)
   270d0:	4851      	ldr	r0, [pc, #324]	; (27218 <sys_clock_announce+0x17c>)
   270d2:	f005 f839 	bl	2c148 <printk>
   270d6:	494c      	ldr	r1, [pc, #304]	; (27208 <sys_clock_announce+0x16c>)
   270d8:	4850      	ldr	r0, [pc, #320]	; (2721c <sys_clock_announce+0x180>)
   270da:	f005 f835 	bl	2c148 <printk>
   270de:	2181      	movs	r1, #129	; 0x81
   270e0:	4630      	mov	r0, r6
   270e2:	f005 fa36 	bl	2c552 <assert_post_action>
   270e6:	e7e9      	b.n	270bc <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270e8:	4e49      	ldr	r6, [pc, #292]	; (27210 <sys_clock_announce+0x174>)
   270ea:	23ac      	movs	r3, #172	; 0xac
   270ec:	4632      	mov	r2, r6
   270ee:	494c      	ldr	r1, [pc, #304]	; (27220 <sys_clock_announce+0x184>)
   270f0:	4849      	ldr	r0, [pc, #292]	; (27218 <sys_clock_announce+0x17c>)
   270f2:	f005 f829 	bl	2c148 <printk>
   270f6:	4944      	ldr	r1, [pc, #272]	; (27208 <sys_clock_announce+0x16c>)
   270f8:	484a      	ldr	r0, [pc, #296]	; (27224 <sys_clock_announce+0x188>)
   270fa:	f005 f825 	bl	2c148 <printk>
   270fe:	21ac      	movs	r1, #172	; 0xac
   27100:	4630      	mov	r0, r6
   27102:	f005 fa26 	bl	2c552 <assert_post_action>
   27106:	e035      	b.n	27174 <sys_clock_announce+0xd8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27108:	4d41      	ldr	r5, [pc, #260]	; (27210 <sys_clock_announce+0x174>)
   2710a:	2381      	movs	r3, #129	; 0x81
   2710c:	462a      	mov	r2, r5
   2710e:	4941      	ldr	r1, [pc, #260]	; (27214 <sys_clock_announce+0x178>)
   27110:	4841      	ldr	r0, [pc, #260]	; (27218 <sys_clock_announce+0x17c>)
   27112:	f005 f819 	bl	2c148 <printk>
   27116:	493c      	ldr	r1, [pc, #240]	; (27208 <sys_clock_announce+0x16c>)
   27118:	4840      	ldr	r0, [pc, #256]	; (2721c <sys_clock_announce+0x180>)
   2711a:	f005 f815 	bl	2c148 <printk>
   2711e:	2181      	movs	r1, #129	; 0x81
   27120:	4628      	mov	r0, r5
   27122:	f005 fa16 	bl	2c552 <assert_post_action>
	z_spin_lock_set_owner(l);
   27126:	4838      	ldr	r0, [pc, #224]	; (27208 <sys_clock_announce+0x16c>)
   27128:	f7fc fd2c 	bl	23b84 <z_spin_lock_set_owner>
   2712c:	f7ff fd60 	bl	26bf0 <first>
   27130:	4605      	mov	r5, r0
   27132:	2800      	cmp	r0, #0
   27134:	d033      	beq.n	2719e <sys_clock_announce+0x102>
   27136:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   2713a:	4b34      	ldr	r3, [pc, #208]	; (2720c <sys_clock_announce+0x170>)
   2713c:	6819      	ldr	r1, [r3, #0]
   2713e:	17cb      	asrs	r3, r1, #31
   27140:	42b1      	cmp	r1, r6
   27142:	41bb      	sbcs	r3, r7
   27144:	db2b      	blt.n	2719e <sys_clock_announce+0x102>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   27146:	4838      	ldr	r0, [pc, #224]	; (27228 <sys_clock_announce+0x18c>)
   27148:	e9d0 2300 	ldrd	r2, r3, [r0]
   2714c:	1992      	adds	r2, r2, r6
   2714e:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
   27152:	e9c0 2300 	strd	r2, r3, [r0]
		announce_remaining -= dt;
   27156:	1b89      	subs	r1, r1, r6
   27158:	4b2c      	ldr	r3, [pc, #176]	; (2720c <sys_clock_announce+0x170>)
   2715a:	6019      	str	r1, [r3, #0]
		t->dticks = 0;
   2715c:	2200      	movs	r2, #0
   2715e:	2300      	movs	r3, #0
   27160:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   27164:	4628      	mov	r0, r5
   27166:	f009 fac8 	bl	306fa <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2716a:	4827      	ldr	r0, [pc, #156]	; (27208 <sys_clock_announce+0x16c>)
   2716c:	f7fc fcfa 	bl	23b64 <z_spin_unlock_valid>
   27170:	2800      	cmp	r0, #0
   27172:	d0b9      	beq.n	270e8 <sys_clock_announce+0x4c>
	__asm__ volatile(
   27174:	f384 8811 	msr	BASEPRI, r4
   27178:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   2717c:	68ab      	ldr	r3, [r5, #8]
   2717e:	4628      	mov	r0, r5
   27180:	4798      	blx	r3
	__asm__ volatile(
   27182:	f04f 0340 	mov.w	r3, #64	; 0x40
   27186:	f3ef 8411 	mrs	r4, BASEPRI
   2718a:	f383 8812 	msr	BASEPRI_MAX, r3
   2718e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27192:	481d      	ldr	r0, [pc, #116]	; (27208 <sys_clock_announce+0x16c>)
   27194:	f7fc fcd6 	bl	23b44 <z_spin_lock_valid>
   27198:	2800      	cmp	r0, #0
   2719a:	d1c4      	bne.n	27126 <sys_clock_announce+0x8a>
   2719c:	e7b4      	b.n	27108 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   2719e:	b145      	cbz	r5, 271b2 <sys_clock_announce+0x116>
		first()->dticks -= announce_remaining;
   271a0:	4b1a      	ldr	r3, [pc, #104]	; (2720c <sys_clock_announce+0x170>)
   271a2:	6819      	ldr	r1, [r3, #0]
   271a4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   271a8:	1a52      	subs	r2, r2, r1
   271aa:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   271ae:	e9c5 2304 	strd	r2, r3, [r5, #16]
	}

	curr_tick += announce_remaining;
   271b2:	481d      	ldr	r0, [pc, #116]	; (27228 <sys_clock_announce+0x18c>)
   271b4:	4915      	ldr	r1, [pc, #84]	; (2720c <sys_clock_announce+0x170>)
   271b6:	680d      	ldr	r5, [r1, #0]
   271b8:	e9d0 2300 	ldrd	r2, r3, [r0]
   271bc:	1952      	adds	r2, r2, r5
   271be:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   271c2:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   271c6:	2500      	movs	r5, #0
   271c8:	600d      	str	r5, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   271ca:	f7ff fd33 	bl	26c34 <next_timeout>
   271ce:	4629      	mov	r1, r5
   271d0:	f7f8 fd90 	bl	1fcf4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   271d4:	480c      	ldr	r0, [pc, #48]	; (27208 <sys_clock_announce+0x16c>)
   271d6:	f7fc fcc5 	bl	23b64 <z_spin_unlock_valid>
   271da:	b120      	cbz	r0, 271e6 <sys_clock_announce+0x14a>
	__asm__ volatile(
   271dc:	f384 8811 	msr	BASEPRI, r4
   271e0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   271e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   271e6:	4d0a      	ldr	r5, [pc, #40]	; (27210 <sys_clock_announce+0x174>)
   271e8:	23ac      	movs	r3, #172	; 0xac
   271ea:	462a      	mov	r2, r5
   271ec:	490c      	ldr	r1, [pc, #48]	; (27220 <sys_clock_announce+0x184>)
   271ee:	480a      	ldr	r0, [pc, #40]	; (27218 <sys_clock_announce+0x17c>)
   271f0:	f004 ffaa 	bl	2c148 <printk>
   271f4:	4904      	ldr	r1, [pc, #16]	; (27208 <sys_clock_announce+0x16c>)
   271f6:	480b      	ldr	r0, [pc, #44]	; (27224 <sys_clock_announce+0x188>)
   271f8:	f004 ffa6 	bl	2c148 <printk>
   271fc:	21ac      	movs	r1, #172	; 0xac
   271fe:	4628      	mov	r0, r5
   27200:	f005 f9a7 	bl	2c552 <assert_post_action>
   27204:	e7ea      	b.n	271dc <sys_clock_announce+0x140>
   27206:	bf00      	nop
   27208:	20003604 	.word	0x20003604
   2720c:	20003600 	.word	0x20003600
   27210:	0003234c 	.word	0x0003234c
   27214:	000323a4 	.word	0x000323a4
   27218:	00031df4 	.word	0x00031df4
   2721c:	000323bc 	.word	0x000323bc
   27220:	00032374 	.word	0x00032374
   27224:	0003238c 	.word	0x0003238c
   27228:	200026e0 	.word	0x200026e0

0002722c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   2722e:	2400      	movs	r4, #0
	__asm__ volatile(
   27230:	f04f 0340 	mov.w	r3, #64	; 0x40
   27234:	f3ef 8511 	mrs	r5, BASEPRI
   27238:	f383 8812 	msr	BASEPRI_MAX, r3
   2723c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27240:	481f      	ldr	r0, [pc, #124]	; (272c0 <sys_clock_tick_get+0x94>)
   27242:	f7fc fc7f 	bl	23b44 <z_spin_lock_valid>
   27246:	b128      	cbz	r0, 27254 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
   27248:	481d      	ldr	r0, [pc, #116]	; (272c0 <sys_clock_tick_get+0x94>)
   2724a:	f7fc fc9b 	bl	23b84 <z_spin_lock_set_owner>
	uint64_t t = 0U;
   2724e:	2600      	movs	r6, #0
   27250:	2700      	movs	r7, #0
	return k;
   27252:	e023      	b.n	2729c <sys_clock_tick_get+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27254:	4e1b      	ldr	r6, [pc, #108]	; (272c4 <sys_clock_tick_get+0x98>)
   27256:	2381      	movs	r3, #129	; 0x81
   27258:	4632      	mov	r2, r6
   2725a:	491b      	ldr	r1, [pc, #108]	; (272c8 <sys_clock_tick_get+0x9c>)
   2725c:	481b      	ldr	r0, [pc, #108]	; (272cc <sys_clock_tick_get+0xa0>)
   2725e:	f004 ff73 	bl	2c148 <printk>
   27262:	4917      	ldr	r1, [pc, #92]	; (272c0 <sys_clock_tick_get+0x94>)
   27264:	481a      	ldr	r0, [pc, #104]	; (272d0 <sys_clock_tick_get+0xa4>)
   27266:	f004 ff6f 	bl	2c148 <printk>
   2726a:	2181      	movs	r1, #129	; 0x81
   2726c:	4630      	mov	r0, r6
   2726e:	f005 f970 	bl	2c552 <assert_post_action>
   27272:	e7e9      	b.n	27248 <sys_clock_tick_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27274:	4c13      	ldr	r4, [pc, #76]	; (272c4 <sys_clock_tick_get+0x98>)
   27276:	23ac      	movs	r3, #172	; 0xac
   27278:	4622      	mov	r2, r4
   2727a:	4916      	ldr	r1, [pc, #88]	; (272d4 <sys_clock_tick_get+0xa8>)
   2727c:	4813      	ldr	r0, [pc, #76]	; (272cc <sys_clock_tick_get+0xa0>)
   2727e:	f004 ff63 	bl	2c148 <printk>
   27282:	490f      	ldr	r1, [pc, #60]	; (272c0 <sys_clock_tick_get+0x94>)
   27284:	4814      	ldr	r0, [pc, #80]	; (272d8 <sys_clock_tick_get+0xac>)
   27286:	f004 ff5f 	bl	2c148 <printk>
   2728a:	21ac      	movs	r1, #172	; 0xac
   2728c:	4620      	mov	r0, r4
   2728e:	f005 f960 	bl	2c552 <assert_post_action>
	__asm__ volatile(
   27292:	f385 8811 	msr	BASEPRI, r5
   27296:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2729a:	2401      	movs	r4, #1
   2729c:	b96c      	cbnz	r4, 272ba <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
   2729e:	f7f8 fd5d 	bl	1fd5c <sys_clock_elapsed>
   272a2:	4b0e      	ldr	r3, [pc, #56]	; (272dc <sys_clock_tick_get+0xb0>)
   272a4:	e9d3 6700 	ldrd	r6, r7, [r3]
   272a8:	1836      	adds	r6, r6, r0
   272aa:	f147 0700 	adc.w	r7, r7, #0
   272ae:	4804      	ldr	r0, [pc, #16]	; (272c0 <sys_clock_tick_get+0x94>)
   272b0:	f7fc fc58 	bl	23b64 <z_spin_unlock_valid>
   272b4:	2800      	cmp	r0, #0
   272b6:	d1ec      	bne.n	27292 <sys_clock_tick_get+0x66>
   272b8:	e7dc      	b.n	27274 <sys_clock_tick_get+0x48>
	}
	return t;
}
   272ba:	4630      	mov	r0, r6
   272bc:	4639      	mov	r1, r7
   272be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   272c0:	20003604 	.word	0x20003604
   272c4:	0003234c 	.word	0x0003234c
   272c8:	000323a4 	.word	0x000323a4
   272cc:	00031df4 	.word	0x00031df4
   272d0:	000323bc 	.word	0x000323bc
   272d4:	00032374 	.word	0x00032374
   272d8:	0003238c 	.word	0x0003238c
   272dc:	200026e0 	.word	0x200026e0

000272e0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   272e0:	b570      	push	{r4, r5, r6, lr}
   272e2:	4604      	mov	r4, r0
	__asm__ volatile(
   272e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   272e8:	f3ef 8611 	mrs	r6, BASEPRI
   272ec:	f383 8812 	msr	BASEPRI_MAX, r3
   272f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   272f4:	4856      	ldr	r0, [pc, #344]	; (27450 <z_timer_expiration_handler+0x170>)
   272f6:	f7fc fc25 	bl	23b44 <z_spin_lock_valid>
   272fa:	2800      	cmp	r0, #0
   272fc:	d049      	beq.n	27392 <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
   272fe:	4854      	ldr	r0, [pc, #336]	; (27450 <z_timer_expiration_handler+0x170>)
   27300:	f7fc fc40 	bl	23b84 <z_spin_lock_set_owner>
	return k;
   27304:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   27306:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2730a:	ea52 0103 	orrs.w	r1, r2, r3
   2730e:	d005      	beq.n	2731c <z_timer_expiration_handler+0x3c>
   27310:	f1b3 3fff 	cmp.w	r3, #4294967295
   27314:	bf08      	it	eq
   27316:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2731a:	d14a      	bne.n	273b2 <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2731c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2731e:	3301      	adds	r3, #1
   27320:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   27322:	6a23      	ldr	r3, [r4, #32]
   27324:	b1db      	cbz	r3, 2735e <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27326:	484a      	ldr	r0, [pc, #296]	; (27450 <z_timer_expiration_handler+0x170>)
   27328:	f7fc fc1c 	bl	23b64 <z_spin_unlock_valid>
   2732c:	2800      	cmp	r0, #0
   2732e:	d045      	beq.n	273bc <z_timer_expiration_handler+0xdc>
	__asm__ volatile(
   27330:	f386 8811 	msr	BASEPRI, r6
   27334:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   27338:	6a23      	ldr	r3, [r4, #32]
   2733a:	4620      	mov	r0, r4
   2733c:	4798      	blx	r3
	__asm__ volatile(
   2733e:	f04f 0340 	mov.w	r3, #64	; 0x40
   27342:	f3ef 8511 	mrs	r5, BASEPRI
   27346:	f383 8812 	msr	BASEPRI_MAX, r3
   2734a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2734e:	4840      	ldr	r0, [pc, #256]	; (27450 <z_timer_expiration_handler+0x170>)
   27350:	f7fc fbf8 	bl	23b44 <z_spin_lock_valid>
   27354:	2800      	cmp	r0, #0
   27356:	d041      	beq.n	273dc <z_timer_expiration_handler+0xfc>
	z_spin_lock_set_owner(l);
   27358:	483d      	ldr	r0, [pc, #244]	; (27450 <z_timer_expiration_handler+0x170>)
   2735a:	f7fc fc13 	bl	23b84 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2735e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   27362:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27364:	42a3      	cmp	r3, r4
   27366:	d049      	beq.n	273fc <z_timer_expiration_handler+0x11c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   27368:	2c00      	cmp	r4, #0
   2736a:	d047      	beq.n	273fc <z_timer_expiration_handler+0x11c>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   2736c:	4620      	mov	r0, r4
   2736e:	f7fe f90b 	bl	25588 <z_unpend_thread_no_timeout>
   27372:	2300      	movs	r3, #0
   27374:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27378:	4835      	ldr	r0, [pc, #212]	; (27450 <z_timer_expiration_handler+0x170>)
   2737a:	f7fc fbf3 	bl	23b64 <z_spin_unlock_valid>
   2737e:	2800      	cmp	r0, #0
   27380:	d055      	beq.n	2742e <z_timer_expiration_handler+0x14e>
	__asm__ volatile(
   27382:	f385 8811 	msr	BASEPRI, r5
   27386:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   2738a:	4620      	mov	r0, r4
   2738c:	f7fe fc36 	bl	25bfc <z_ready_thread>
}
   27390:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27392:	4d30      	ldr	r5, [pc, #192]	; (27454 <z_timer_expiration_handler+0x174>)
   27394:	2381      	movs	r3, #129	; 0x81
   27396:	462a      	mov	r2, r5
   27398:	492f      	ldr	r1, [pc, #188]	; (27458 <z_timer_expiration_handler+0x178>)
   2739a:	4830      	ldr	r0, [pc, #192]	; (2745c <z_timer_expiration_handler+0x17c>)
   2739c:	f004 fed4 	bl	2c148 <printk>
   273a0:	492b      	ldr	r1, [pc, #172]	; (27450 <z_timer_expiration_handler+0x170>)
   273a2:	482f      	ldr	r0, [pc, #188]	; (27460 <z_timer_expiration_handler+0x180>)
   273a4:	f004 fed0 	bl	2c148 <printk>
   273a8:	2181      	movs	r1, #129	; 0x81
   273aa:	4628      	mov	r0, r5
   273ac:	f005 f8d1 	bl	2c552 <assert_post_action>
   273b0:	e7a5      	b.n	272fe <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   273b2:	492c      	ldr	r1, [pc, #176]	; (27464 <z_timer_expiration_handler+0x184>)
   273b4:	4620      	mov	r0, r4
   273b6:	f7ff fc63 	bl	26c80 <z_add_timeout>
   273ba:	e7af      	b.n	2731c <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   273bc:	4d25      	ldr	r5, [pc, #148]	; (27454 <z_timer_expiration_handler+0x174>)
   273be:	23ac      	movs	r3, #172	; 0xac
   273c0:	462a      	mov	r2, r5
   273c2:	4929      	ldr	r1, [pc, #164]	; (27468 <z_timer_expiration_handler+0x188>)
   273c4:	4825      	ldr	r0, [pc, #148]	; (2745c <z_timer_expiration_handler+0x17c>)
   273c6:	f004 febf 	bl	2c148 <printk>
   273ca:	4921      	ldr	r1, [pc, #132]	; (27450 <z_timer_expiration_handler+0x170>)
   273cc:	4827      	ldr	r0, [pc, #156]	; (2746c <z_timer_expiration_handler+0x18c>)
   273ce:	f004 febb 	bl	2c148 <printk>
   273d2:	21ac      	movs	r1, #172	; 0xac
   273d4:	4628      	mov	r0, r5
   273d6:	f005 f8bc 	bl	2c552 <assert_post_action>
   273da:	e7a9      	b.n	27330 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   273dc:	4e1d      	ldr	r6, [pc, #116]	; (27454 <z_timer_expiration_handler+0x174>)
   273de:	2381      	movs	r3, #129	; 0x81
   273e0:	4632      	mov	r2, r6
   273e2:	491d      	ldr	r1, [pc, #116]	; (27458 <z_timer_expiration_handler+0x178>)
   273e4:	481d      	ldr	r0, [pc, #116]	; (2745c <z_timer_expiration_handler+0x17c>)
   273e6:	f004 feaf 	bl	2c148 <printk>
   273ea:	4919      	ldr	r1, [pc, #100]	; (27450 <z_timer_expiration_handler+0x170>)
   273ec:	481c      	ldr	r0, [pc, #112]	; (27460 <z_timer_expiration_handler+0x180>)
   273ee:	f004 feab 	bl	2c148 <printk>
   273f2:	2181      	movs	r1, #129	; 0x81
   273f4:	4630      	mov	r0, r6
   273f6:	f005 f8ac 	bl	2c552 <assert_post_action>
   273fa:	e7ad      	b.n	27358 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   273fc:	4814      	ldr	r0, [pc, #80]	; (27450 <z_timer_expiration_handler+0x170>)
   273fe:	f7fc fbb1 	bl	23b64 <z_spin_unlock_valid>
   27402:	b120      	cbz	r0, 2740e <z_timer_expiration_handler+0x12e>
   27404:	f385 8811 	msr	BASEPRI, r5
   27408:	f3bf 8f6f 	isb	sy
		return;
   2740c:	e7c0      	b.n	27390 <z_timer_expiration_handler+0xb0>
   2740e:	4c11      	ldr	r4, [pc, #68]	; (27454 <z_timer_expiration_handler+0x174>)
   27410:	23ac      	movs	r3, #172	; 0xac
   27412:	4622      	mov	r2, r4
   27414:	4914      	ldr	r1, [pc, #80]	; (27468 <z_timer_expiration_handler+0x188>)
   27416:	4811      	ldr	r0, [pc, #68]	; (2745c <z_timer_expiration_handler+0x17c>)
   27418:	f004 fe96 	bl	2c148 <printk>
   2741c:	490c      	ldr	r1, [pc, #48]	; (27450 <z_timer_expiration_handler+0x170>)
   2741e:	4813      	ldr	r0, [pc, #76]	; (2746c <z_timer_expiration_handler+0x18c>)
   27420:	f004 fe92 	bl	2c148 <printk>
   27424:	21ac      	movs	r1, #172	; 0xac
   27426:	4620      	mov	r0, r4
   27428:	f005 f893 	bl	2c552 <assert_post_action>
   2742c:	e7ea      	b.n	27404 <z_timer_expiration_handler+0x124>
   2742e:	4e09      	ldr	r6, [pc, #36]	; (27454 <z_timer_expiration_handler+0x174>)
   27430:	23ac      	movs	r3, #172	; 0xac
   27432:	4632      	mov	r2, r6
   27434:	490c      	ldr	r1, [pc, #48]	; (27468 <z_timer_expiration_handler+0x188>)
   27436:	4809      	ldr	r0, [pc, #36]	; (2745c <z_timer_expiration_handler+0x17c>)
   27438:	f004 fe86 	bl	2c148 <printk>
   2743c:	4904      	ldr	r1, [pc, #16]	; (27450 <z_timer_expiration_handler+0x170>)
   2743e:	480b      	ldr	r0, [pc, #44]	; (2746c <z_timer_expiration_handler+0x18c>)
   27440:	f004 fe82 	bl	2c148 <printk>
   27444:	21ac      	movs	r1, #172	; 0xac
   27446:	4630      	mov	r0, r6
   27448:	f005 f883 	bl	2c552 <assert_post_action>
   2744c:	e799      	b.n	27382 <z_timer_expiration_handler+0xa2>
   2744e:	bf00      	nop
   27450:	20003608 	.word	0x20003608
   27454:	0003234c 	.word	0x0003234c
   27458:	000323a4 	.word	0x000323a4
   2745c:	00031df4 	.word	0x00031df4
   27460:	000323bc 	.word	0x000323bc
   27464:	000272e1 	.word	0x000272e1
   27468:	00032374 	.word	0x00032374
   2746c:	0003238c 	.word	0x0003238c

00027470 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   27470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27474:	b087      	sub	sp, #28
   27476:	4614      	mov	r4, r2
   27478:	461d      	mov	r5, r3
   2747a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2747e:	f1b3 3fff 	cmp.w	r3, #4294967295
   27482:	bf08      	it	eq
   27484:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   27488:	d035      	beq.n	274f6 <z_impl_k_timer_start+0x86>
   2748a:	4606      	mov	r6, r0
   2748c:	4613      	mov	r3, r2
   2748e:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   27490:	f1b9 3fff 	cmp.w	r9, #4294967295
   27494:	bf08      	it	eq
   27496:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   2749a:	d012      	beq.n	274c2 <z_impl_k_timer_start+0x52>
   2749c:	ea58 0109 	orrs.w	r1, r8, r9
   274a0:	d00f      	beq.n	274c2 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   274a2:	f06f 0701 	mvn.w	r7, #1
   274a6:	ebb7 0708 	subs.w	r7, r7, r8
   274aa:	9702      	str	r7, [sp, #8]
   274ac:	f04f 31ff 	mov.w	r1, #4294967295
   274b0:	eb61 0709 	sbc.w	r7, r1, r9
   274b4:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   274b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   274ba:	2800      	cmp	r0, #0
   274bc:	f171 0100 	sbcs.w	r1, r1, #0
   274c0:	db1c      	blt.n	274fc <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   274c2:	f06f 0101 	mvn.w	r1, #1
   274c6:	ebb1 0a03 	subs.w	sl, r1, r3
   274ca:	f04f 31ff 	mov.w	r1, #4294967295
   274ce:	eb61 0b02 	sbc.w	fp, r1, r2
   274d2:	f1ba 0f00 	cmp.w	sl, #0
   274d6:	f17b 0100 	sbcs.w	r1, fp, #0
   274da:	db23      	blt.n	27524 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   274dc:	4630      	mov	r0, r6
   274de:	f7ff fccb 	bl	26e78 <z_abort_timeout>
	timer->period = period;
   274e2:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   274e6:	2300      	movs	r3, #0
   274e8:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   274ea:	4622      	mov	r2, r4
   274ec:	462b      	mov	r3, r5
   274ee:	4917      	ldr	r1, [pc, #92]	; (2754c <z_impl_k_timer_start+0xdc>)
   274f0:	4630      	mov	r0, r6
   274f2:	f7ff fbc5 	bl	26c80 <z_add_timeout>
		     duration);
}
   274f6:	b007      	add	sp, #28
   274f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   274fc:	f118 31ff 	adds.w	r1, r8, #4294967295
   27500:	9104      	str	r1, [sp, #16]
   27502:	f149 31ff 	adc.w	r1, r9, #4294967295
   27506:	9105      	str	r1, [sp, #20]
   27508:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   2750c:	4638      	mov	r0, r7
   2750e:	4641      	mov	r1, r8
   27510:	2f01      	cmp	r7, #1
   27512:	f178 0700 	sbcs.w	r7, r8, #0
   27516:	db02      	blt.n	2751e <z_impl_k_timer_start+0xae>
   27518:	4680      	mov	r8, r0
   2751a:	4689      	mov	r9, r1
   2751c:	e7d1      	b.n	274c2 <z_impl_k_timer_start+0x52>
   2751e:	2001      	movs	r0, #1
   27520:	2100      	movs	r1, #0
   27522:	e7f9      	b.n	27518 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   27524:	f113 33ff 	adds.w	r3, r3, #4294967295
   27528:	9300      	str	r3, [sp, #0]
   2752a:	f142 33ff 	adc.w	r3, r2, #4294967295
   2752e:	9301      	str	r3, [sp, #4]
   27530:	e9dd 0100 	ldrd	r0, r1, [sp]
   27534:	4602      	mov	r2, r0
   27536:	460b      	mov	r3, r1
   27538:	2800      	cmp	r0, #0
   2753a:	f171 0100 	sbcs.w	r1, r1, #0
   2753e:	db02      	blt.n	27546 <z_impl_k_timer_start+0xd6>
   27540:	4614      	mov	r4, r2
   27542:	461d      	mov	r5, r3
   27544:	e7ca      	b.n	274dc <z_impl_k_timer_start+0x6c>
   27546:	2200      	movs	r2, #0
   27548:	4613      	mov	r3, r2
   2754a:	e7f9      	b.n	27540 <z_impl_k_timer_start+0xd0>
   2754c:	000272e1 	.word	0x000272e1

00027550 <signal_poller>:

	return events_registered;
}

static int signal_poller(struct k_poll_event *event, uint32_t state)
{
   27550:	b570      	push	{r4, r5, r6, lr}
   27552:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   27554:	6880      	ldr	r0, [r0, #8]
   27556:	f009 f948 	bl	307ea <poller_thread>

	__ASSERT(thread != NULL, "poller should have a thread\n");
   2755a:	4604      	mov	r4, r0
   2755c:	b1e8      	cbz	r0, 2759a <signal_poller+0x4a>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2755e:	7b63      	ldrb	r3, [r4, #13]

	if (!z_is_thread_pending(thread)) {
   27560:	f013 0f02 	tst.w	r3, #2
   27564:	d036      	beq.n	275d4 <signal_poller+0x84>
	return thread->base.timeout.dticks == _EXPIRED;
   27566:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   2756a:	f06f 0001 	mvn.w	r0, #1
   2756e:	f04f 31ff 	mov.w	r1, #4294967295
   27572:	428b      	cmp	r3, r1
   27574:	bf08      	it	eq
   27576:	4282      	cmpeq	r2, r0
   27578:	d02e      	beq.n	275d8 <signal_poller+0x88>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   2757a:	4620      	mov	r0, r4
   2757c:	f7fe f952 	bl	25824 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   27580:	2d08      	cmp	r5, #8
   27582:	d019      	beq.n	275b8 <signal_poller+0x68>
   27584:	2300      	movs	r3, #0
   27586:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   2758a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2758c:	f013 0f1f 	tst.w	r3, #31
   27590:	d117      	bne.n	275c2 <signal_poller+0x72>
	return node->next != NULL;
   27592:	69a3      	ldr	r3, [r4, #24]
   27594:	b19b      	cbz	r3, 275be <signal_poller+0x6e>
   27596:	2300      	movs	r3, #0
   27598:	e014      	b.n	275c4 <signal_poller+0x74>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   2759a:	4e11      	ldr	r6, [pc, #68]	; (275e0 <signal_poller+0x90>)
   2759c:	23f9      	movs	r3, #249	; 0xf9
   2759e:	4632      	mov	r2, r6
   275a0:	4910      	ldr	r1, [pc, #64]	; (275e4 <signal_poller+0x94>)
   275a2:	4811      	ldr	r0, [pc, #68]	; (275e8 <signal_poller+0x98>)
   275a4:	f004 fdd0 	bl	2c148 <printk>
   275a8:	4810      	ldr	r0, [pc, #64]	; (275ec <signal_poller+0x9c>)
   275aa:	f004 fdcd 	bl	2c148 <printk>
   275ae:	21f9      	movs	r1, #249	; 0xf9
   275b0:	4630      	mov	r0, r6
   275b2:	f004 ffce 	bl	2c552 <assert_post_action>
   275b6:	e7d2      	b.n	2755e <signal_poller+0xe>
	arch_thread_return_value_set(thread,
   275b8:	f06f 0303 	mvn.w	r3, #3
   275bc:	e7e3      	b.n	27586 <signal_poller+0x36>
   275be:	2301      	movs	r3, #1
   275c0:	e000      	b.n	275c4 <signal_poller+0x74>
   275c2:	2300      	movs	r3, #0
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   275c4:	b90b      	cbnz	r3, 275ca <signal_poller+0x7a>
		return 0;
   275c6:	2000      	movs	r0, #0
   275c8:	e005      	b.n	275d6 <signal_poller+0x86>
	}

	z_ready_thread(thread);
   275ca:	4620      	mov	r0, r4
   275cc:	f7fe fb16 	bl	25bfc <z_ready_thread>

	return 0;
   275d0:	2000      	movs	r0, #0
   275d2:	e000      	b.n	275d6 <signal_poller+0x86>
		return 0;
   275d4:	2000      	movs	r0, #0
}
   275d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   275d8:	f06f 000a 	mvn.w	r0, #10
   275dc:	e7fb      	b.n	275d6 <signal_poller+0x86>
   275de:	bf00      	nop
   275e0:	0003622c 	.word	0x0003622c
   275e4:	00036250 	.word	0x00036250
   275e8:	00031df4 	.word	0x00031df4
   275ec:	00036268 	.word	0x00036268

000275f0 <k_poll_event_init>:
{
   275f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275f4:	4604      	mov	r4, r0
   275f6:	460e      	mov	r6, r1
   275f8:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   275fa:	4617      	mov	r7, r2
   275fc:	b9ca      	cbnz	r2, 27632 <k_poll_event_init+0x42>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   275fe:	2e1f      	cmp	r6, #31
   27600:	d827      	bhi.n	27652 <k_poll_event_init+0x62>
	__ASSERT(obj != NULL, "must provide an object\n");
   27602:	2d00      	cmp	r5, #0
   27604:	d035      	beq.n	27672 <k_poll_event_init+0x82>
	event->poller = NULL;
   27606:	2300      	movs	r3, #0
   27608:	60a3      	str	r3, [r4, #8]
	event->type = type;
   2760a:	7b62      	ldrb	r2, [r4, #13]
   2760c:	f366 0204 	bfi	r2, r6, #0, #5
   27610:	7362      	strb	r2, [r4, #13]
	event->state = K_POLL_STATE_NOT_READY;
   27612:	68e2      	ldr	r2, [r4, #12]
   27614:	f363 3252 	bfi	r2, r3, #13, #6
   27618:	60e2      	str	r2, [r4, #12]
	event->mode = mode;
   2761a:	f3c2 4207 	ubfx	r2, r2, #16, #8
   2761e:	f367 02c3 	bfi	r2, r7, #3, #1
   27622:	73a2      	strb	r2, [r4, #14]
	event->unused = 0U;
   27624:	89e2      	ldrh	r2, [r4, #14]
   27626:	f363 120f 	bfi	r2, r3, #4, #12
   2762a:	81e2      	strh	r2, [r4, #14]
	event->obj = obj;
   2762c:	6125      	str	r5, [r4, #16]
}
   2762e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   27632:	f8df 807c 	ldr.w	r8, [pc, #124]	; 276b0 <k_poll_event_init+0xc0>
   27636:	232d      	movs	r3, #45	; 0x2d
   27638:	4642      	mov	r2, r8
   2763a:	4916      	ldr	r1, [pc, #88]	; (27694 <k_poll_event_init+0xa4>)
   2763c:	4816      	ldr	r0, [pc, #88]	; (27698 <k_poll_event_init+0xa8>)
   2763e:	f004 fd83 	bl	2c148 <printk>
   27642:	4816      	ldr	r0, [pc, #88]	; (2769c <k_poll_event_init+0xac>)
   27644:	f004 fd80 	bl	2c148 <printk>
   27648:	212d      	movs	r1, #45	; 0x2d
   2764a:	4640      	mov	r0, r8
   2764c:	f004 ff81 	bl	2c552 <assert_post_action>
   27650:	e7d5      	b.n	275fe <k_poll_event_init+0xe>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   27652:	f8df 805c 	ldr.w	r8, [pc, #92]	; 276b0 <k_poll_event_init+0xc0>
   27656:	232f      	movs	r3, #47	; 0x2f
   27658:	4642      	mov	r2, r8
   2765a:	4911      	ldr	r1, [pc, #68]	; (276a0 <k_poll_event_init+0xb0>)
   2765c:	480e      	ldr	r0, [pc, #56]	; (27698 <k_poll_event_init+0xa8>)
   2765e:	f004 fd73 	bl	2c148 <printk>
   27662:	4810      	ldr	r0, [pc, #64]	; (276a4 <k_poll_event_init+0xb4>)
   27664:	f004 fd70 	bl	2c148 <printk>
   27668:	212f      	movs	r1, #47	; 0x2f
   2766a:	4640      	mov	r0, r8
   2766c:	f004 ff71 	bl	2c552 <assert_post_action>
   27670:	e7c7      	b.n	27602 <k_poll_event_init+0x12>
	__ASSERT(obj != NULL, "must provide an object\n");
   27672:	f8df 803c 	ldr.w	r8, [pc, #60]	; 276b0 <k_poll_event_init+0xc0>
   27676:	2330      	movs	r3, #48	; 0x30
   27678:	4642      	mov	r2, r8
   2767a:	490b      	ldr	r1, [pc, #44]	; (276a8 <k_poll_event_init+0xb8>)
   2767c:	4806      	ldr	r0, [pc, #24]	; (27698 <k_poll_event_init+0xa8>)
   2767e:	f004 fd63 	bl	2c148 <printk>
   27682:	480a      	ldr	r0, [pc, #40]	; (276ac <k_poll_event_init+0xbc>)
   27684:	f004 fd60 	bl	2c148 <printk>
   27688:	2130      	movs	r1, #48	; 0x30
   2768a:	4640      	mov	r0, r8
   2768c:	f004 ff61 	bl	2c552 <assert_post_action>
   27690:	e7b9      	b.n	27606 <k_poll_event_init+0x16>
   27692:	bf00      	nop
   27694:	00036374 	.word	0x00036374
   27698:	00031df4 	.word	0x00031df4
   2769c:	00036394 	.word	0x00036394
   276a0:	000363bc 	.word	0x000363bc
   276a4:	000363e0 	.word	0x000363e0
   276a8:	000363f0 	.word	0x000363f0
   276ac:	00036404 	.word	0x00036404
   276b0:	0003622c 	.word	0x0003622c

000276b4 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   276b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   276b8:	b08d      	sub	sp, #52	; 0x34
   276ba:	4605      	mov	r5, r0
   276bc:	9106      	str	r1, [sp, #24]
   276be:	9202      	str	r2, [sp, #8]
   276c0:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   276c2:	4bae      	ldr	r3, [pc, #696]	; (2797c <z_impl_k_poll+0x2c8>)
   276c4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   276c8:	f109 0660 	add.w	r6, r9, #96	; 0x60

	poller->is_polling = true;
   276cc:	2301      	movs	r3, #1
   276ce:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   276d2:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
   276d6:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   276da:	b973      	cbnz	r3, 276fa <z_impl_k_poll+0x46>
	__ASSERT(events != NULL, "NULL events\n");
   276dc:	b1f5      	cbz	r5, 2771c <z_impl_k_poll+0x68>
	__ASSERT(num_events >= 0, "<0 events\n");
   276de:	9b06      	ldr	r3, [sp, #24]
   276e0:	2b00      	cmp	r3, #0
   276e2:	db2c      	blt.n	2773e <z_impl_k_poll+0x8a>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   276e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   276e8:	4613      	mov	r3, r2
   276ea:	430b      	orrs	r3, r1
   276ec:	bf0c      	ite	eq
   276ee:	2301      	moveq	r3, #1
   276f0:	2300      	movne	r3, #0
   276f2:	9307      	str	r3, [sp, #28]
	for (int ii = 0; ii < num_events; ii++) {
   276f4:	2700      	movs	r7, #0
	int events_registered = 0;
   276f6:	46bb      	mov	fp, r7
	for (int ii = 0; ii < num_events; ii++) {
   276f8:	e089      	b.n	2780e <z_impl_k_poll+0x15a>
	__ASSERT(!arch_is_in_isr(), "");
   276fa:	4ca1      	ldr	r4, [pc, #644]	; (27980 <z_impl_k_poll+0x2cc>)
   276fc:	f44f 738d 	mov.w	r3, #282	; 0x11a
   27700:	4622      	mov	r2, r4
   27702:	49a0      	ldr	r1, [pc, #640]	; (27984 <z_impl_k_poll+0x2d0>)
   27704:	48a0      	ldr	r0, [pc, #640]	; (27988 <z_impl_k_poll+0x2d4>)
   27706:	f004 fd1f 	bl	2c148 <printk>
   2770a:	48a0      	ldr	r0, [pc, #640]	; (2798c <z_impl_k_poll+0x2d8>)
   2770c:	f004 fd1c 	bl	2c148 <printk>
   27710:	f44f 718d 	mov.w	r1, #282	; 0x11a
   27714:	4620      	mov	r0, r4
   27716:	f004 ff1c 	bl	2c552 <assert_post_action>
   2771a:	e7df      	b.n	276dc <z_impl_k_poll+0x28>
	__ASSERT(events != NULL, "NULL events\n");
   2771c:	4c98      	ldr	r4, [pc, #608]	; (27980 <z_impl_k_poll+0x2cc>)
   2771e:	f240 131b 	movw	r3, #283	; 0x11b
   27722:	4622      	mov	r2, r4
   27724:	499a      	ldr	r1, [pc, #616]	; (27990 <z_impl_k_poll+0x2dc>)
   27726:	4898      	ldr	r0, [pc, #608]	; (27988 <z_impl_k_poll+0x2d4>)
   27728:	f004 fd0e 	bl	2c148 <printk>
   2772c:	4899      	ldr	r0, [pc, #612]	; (27994 <z_impl_k_poll+0x2e0>)
   2772e:	f004 fd0b 	bl	2c148 <printk>
   27732:	f240 111b 	movw	r1, #283	; 0x11b
   27736:	4620      	mov	r0, r4
   27738:	f004 ff0b 	bl	2c552 <assert_post_action>
   2773c:	e7cf      	b.n	276de <z_impl_k_poll+0x2a>
	__ASSERT(num_events >= 0, "<0 events\n");
   2773e:	4c90      	ldr	r4, [pc, #576]	; (27980 <z_impl_k_poll+0x2cc>)
   27740:	f44f 738e 	mov.w	r3, #284	; 0x11c
   27744:	4622      	mov	r2, r4
   27746:	4994      	ldr	r1, [pc, #592]	; (27998 <z_impl_k_poll+0x2e4>)
   27748:	488f      	ldr	r0, [pc, #572]	; (27988 <z_impl_k_poll+0x2d4>)
   2774a:	f004 fcfd 	bl	2c148 <printk>
   2774e:	4893      	ldr	r0, [pc, #588]	; (2799c <z_impl_k_poll+0x2e8>)
   27750:	f004 fcfa 	bl	2c148 <printk>
   27754:	f44f 718e 	mov.w	r1, #284	; 0x11c
   27758:	4620      	mov	r0, r4
   2775a:	f004 fefa 	bl	2c552 <assert_post_action>
   2775e:	e7c1      	b.n	276e4 <z_impl_k_poll+0x30>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27760:	4c8f      	ldr	r4, [pc, #572]	; (279a0 <z_impl_k_poll+0x2ec>)
   27762:	2381      	movs	r3, #129	; 0x81
   27764:	4622      	mov	r2, r4
   27766:	498f      	ldr	r1, [pc, #572]	; (279a4 <z_impl_k_poll+0x2f0>)
   27768:	4887      	ldr	r0, [pc, #540]	; (27988 <z_impl_k_poll+0x2d4>)
   2776a:	f004 fced 	bl	2c148 <printk>
   2776e:	498e      	ldr	r1, [pc, #568]	; (279a8 <z_impl_k_poll+0x2f4>)
   27770:	488e      	ldr	r0, [pc, #568]	; (279ac <z_impl_k_poll+0x2f8>)
   27772:	f004 fce9 	bl	2c148 <printk>
   27776:	2181      	movs	r1, #129	; 0x81
   27778:	4620      	mov	r0, r4
   2777a:	f004 feea 	bl	2c552 <assert_post_action>
   2777e:	e058      	b.n	27832 <z_impl_k_poll+0x17e>
		if (k_sem_count_get(event->sem) > 0U) {
   27780:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   27782:	689b      	ldr	r3, [r3, #8]
   27784:	b353      	cbz	r3, 277dc <z_impl_k_poll+0x128>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   27786:	2302      	movs	r3, #2
   27788:	9305      	str	r3, [sp, #20]
			return true;
   2778a:	2301      	movs	r3, #1
   2778c:	e026      	b.n	277dc <z_impl_k_poll+0x128>
		if (!k_queue_is_empty(event->queue)) {
   2778e:	6923      	ldr	r3, [r4, #16]
	return list->head;
   27790:	681b      	ldr	r3, [r3, #0]
   27792:	b31b      	cbz	r3, 277dc <z_impl_k_poll+0x128>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27794:	2304      	movs	r3, #4
   27796:	9305      	str	r3, [sp, #20]
			return true;
   27798:	2301      	movs	r3, #1
   2779a:	e01f      	b.n	277dc <z_impl_k_poll+0x128>
		if (event->signal->signaled != 0U) {
   2779c:	6923      	ldr	r3, [r4, #16]
   2779e:	689b      	ldr	r3, [r3, #8]
   277a0:	b1e3      	cbz	r3, 277dc <z_impl_k_poll+0x128>
			*state = K_POLL_STATE_SIGNALED;
   277a2:	2301      	movs	r3, #1
   277a4:	9305      	str	r3, [sp, #20]
   277a6:	e019      	b.n	277dc <z_impl_k_poll+0x128>
		if (event->msgq->used_msgs > 0) {
   277a8:	6923      	ldr	r3, [r4, #16]
   277aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   277ac:	b1b3      	cbz	r3, 277dc <z_impl_k_poll+0x128>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   277ae:	2310      	movs	r3, #16
   277b0:	9305      	str	r3, [sp, #20]
			return true;
   277b2:	2301      	movs	r3, #1
   277b4:	e012      	b.n	277dc <z_impl_k_poll+0x128>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   277b6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 27980 <z_impl_k_poll+0x2cc>
   277ba:	235c      	movs	r3, #92	; 0x5c
   277bc:	4642      	mov	r2, r8
   277be:	497c      	ldr	r1, [pc, #496]	; (279b0 <z_impl_k_poll+0x2fc>)
   277c0:	4871      	ldr	r0, [pc, #452]	; (27988 <z_impl_k_poll+0x2d4>)
   277c2:	f004 fcc1 	bl	2c148 <printk>
   277c6:	7b61      	ldrb	r1, [r4, #13]
   277c8:	f001 011f 	and.w	r1, r1, #31
   277cc:	4879      	ldr	r0, [pc, #484]	; (279b4 <z_impl_k_poll+0x300>)
   277ce:	f004 fcbb 	bl	2c148 <printk>
   277d2:	215c      	movs	r1, #92	; 0x5c
   277d4:	4640      	mov	r0, r8
   277d6:	f004 febc 	bl	2c552 <assert_post_action>
	return false;
   277da:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   277dc:	2b00      	cmp	r3, #0
   277de:	d04d      	beq.n	2787c <z_impl_k_poll+0x1c8>
	event->poller = NULL;
   277e0:	2100      	movs	r1, #0
   277e2:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   277e4:	68e3      	ldr	r3, [r4, #12]
   277e6:	f3c3 3245 	ubfx	r2, r3, #13, #6
   277ea:	9805      	ldr	r0, [sp, #20]
   277ec:	4302      	orrs	r2, r0
   277ee:	f362 3352 	bfi	r3, r2, #13, #6
   277f2:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   277f4:	7031      	strb	r1, [r6, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   277f6:	486c      	ldr	r0, [pc, #432]	; (279a8 <z_impl_k_poll+0x2f4>)
   277f8:	f7fc f9b4 	bl	23b64 <z_spin_unlock_valid>
   277fc:	2800      	cmp	r0, #0
   277fe:	f000 825c 	beq.w	27cba <z_impl_k_poll+0x606>
   27802:	9b08      	ldr	r3, [sp, #32]
   27804:	f383 8811 	msr	BASEPRI, r3
   27808:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2780c:	3701      	adds	r7, #1
   2780e:	9b06      	ldr	r3, [sp, #24]
   27810:	42bb      	cmp	r3, r7
   27812:	f340 827f 	ble.w	27d14 <z_impl_k_poll+0x660>
	__asm__ volatile(
   27816:	f04f 0340 	mov.w	r3, #64	; 0x40
   2781a:	f3ef 8211 	mrs	r2, BASEPRI
   2781e:	f383 8812 	msr	BASEPRI_MAX, r3
   27822:	f3bf 8f6f 	isb	sy
   27826:	9208      	str	r2, [sp, #32]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27828:	485f      	ldr	r0, [pc, #380]	; (279a8 <z_impl_k_poll+0x2f4>)
   2782a:	f7fc f98b 	bl	23b44 <z_spin_lock_valid>
   2782e:	2800      	cmp	r0, #0
   27830:	d096      	beq.n	27760 <z_impl_k_poll+0xac>
	z_spin_lock_set_owner(l);
   27832:	485d      	ldr	r0, [pc, #372]	; (279a8 <z_impl_k_poll+0x2f4>)
   27834:	f7fc f9a6 	bl	23b84 <z_spin_lock_set_owner>
		if (is_condition_met(&events[ii], &state)) {
   27838:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   2783c:	00a3      	lsls	r3, r4, #2
   2783e:	9309      	str	r3, [sp, #36]	; 0x24
   27840:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   27844:	7b63      	ldrb	r3, [r4, #13]
   27846:	f003 031f 	and.w	r3, r3, #31
   2784a:	2b08      	cmp	r3, #8
   2784c:	d8b3      	bhi.n	277b6 <z_impl_k_poll+0x102>
   2784e:	a201      	add	r2, pc, #4	; (adr r2, 27854 <z_impl_k_poll+0x1a0>)
   27850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27854:	00027879 	.word	0x00027879
   27858:	0002779d 	.word	0x0002779d
   2785c:	00027781 	.word	0x00027781
   27860:	000277b7 	.word	0x000277b7
   27864:	0002778f 	.word	0x0002778f
   27868:	000277b7 	.word	0x000277b7
   2786c:	000277b7 	.word	0x000277b7
   27870:	000277b7 	.word	0x000277b7
   27874:	000277a9 	.word	0x000277a9
   27878:	2300      	movs	r3, #0
   2787a:	e7af      	b.n	277dc <z_impl_k_poll+0x128>
		} else if (!just_check && poller->is_polling) {
   2787c:	9b07      	ldr	r3, [sp, #28]
   2787e:	2b00      	cmp	r3, #0
   27880:	d1b9      	bne.n	277f6 <z_impl_k_poll+0x142>
   27882:	7833      	ldrb	r3, [r6, #0]
   27884:	2b00      	cmp	r3, #0
   27886:	d0b6      	beq.n	277f6 <z_impl_k_poll+0x142>
	switch (event->type) {
   27888:	7b63      	ldrb	r3, [r4, #13]
   2788a:	f003 031f 	and.w	r3, r3, #31
   2788e:	2b08      	cmp	r3, #8
   27890:	f200 8200 	bhi.w	27c94 <z_impl_k_poll+0x5e0>
   27894:	e8df f013 	tbh	[pc, r3, lsl #1]
   27898:	0116020d 	.word	0x0116020d
   2789c:	01fe0009 	.word	0x01fe0009
   278a0:	01fe00a1 	.word	0x01fe00a1
   278a4:	01fe01fe 	.word	0x01fe01fe
   278a8:	0189      	.short	0x0189
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   278aa:	6923      	ldr	r3, [r4, #16]
   278ac:	2b00      	cmp	r3, #0
   278ae:	d036      	beq.n	2791e <z_impl_k_poll+0x26a>
		add_event(&event->sem->poll_events, event, poller);
   278b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
   278b4:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   278b8:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   278bc:	4598      	cmp	r8, r3
   278be:	d03e      	beq.n	2793e <z_impl_k_poll+0x28a>
   278c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   278c4:	2b00      	cmp	r3, #0
   278c6:	d03a      	beq.n	2793e <z_impl_k_poll+0x28a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   278c8:	6898      	ldr	r0, [r3, #8]
   278ca:	f008 ff8e 	bl	307ea <poller_thread>
   278ce:	900b      	str	r0, [sp, #44]	; 0x2c
   278d0:	4630      	mov	r0, r6
   278d2:	f008 ff8a 	bl	307ea <poller_thread>
   278d6:	4601      	mov	r1, r0
   278d8:	900a      	str	r0, [sp, #40]	; 0x28
   278da:	980b      	ldr	r0, [sp, #44]	; 0x2c
   278dc:	f008 fed2 	bl	30684 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   278e0:	2800      	cmp	r0, #0
   278e2:	dc2c      	bgt.n	2793e <z_impl_k_poll+0x28a>
	return list->head == list;
   278e4:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   278e8:	45d0      	cmp	r8, sl
   278ea:	d03e      	beq.n	2796a <z_impl_k_poll+0x2b6>
   278ec:	4653      	mov	r3, sl
   278ee:	46a2      	mov	sl, r4
   278f0:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   278f2:	2c00      	cmp	r4, #0
   278f4:	d03f      	beq.n	27976 <z_impl_k_poll+0x2c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   278f6:	68a0      	ldr	r0, [r4, #8]
   278f8:	f008 ff77 	bl	307ea <poller_thread>
   278fc:	4601      	mov	r1, r0
   278fe:	980a      	ldr	r0, [sp, #40]	; 0x28
   27900:	f008 fec0 	bl	30684 <z_sched_prio_cmp>
   27904:	2800      	cmp	r0, #0
   27906:	dc24      	bgt.n	27952 <z_impl_k_poll+0x29e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27908:	2c00      	cmp	r4, #0
   2790a:	d059      	beq.n	279c0 <z_impl_k_poll+0x30c>
	return (node == list->tail) ? NULL : node->next;
   2790c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27910:	429c      	cmp	r4, r3
   27912:	d060      	beq.n	279d6 <z_impl_k_poll+0x322>
   27914:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27916:	2c00      	cmp	r4, #0
   27918:	d1eb      	bne.n	278f2 <z_impl_k_poll+0x23e>
   2791a:	4654      	mov	r4, sl
   2791c:	e051      	b.n	279c2 <z_impl_k_poll+0x30e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2791e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 27980 <z_impl_k_poll+0x2cc>
   27922:	2386      	movs	r3, #134	; 0x86
   27924:	4642      	mov	r2, r8
   27926:	4924      	ldr	r1, [pc, #144]	; (279b8 <z_impl_k_poll+0x304>)
   27928:	4817      	ldr	r0, [pc, #92]	; (27988 <z_impl_k_poll+0x2d4>)
   2792a:	f004 fc0d 	bl	2c148 <printk>
   2792e:	4823      	ldr	r0, [pc, #140]	; (279bc <z_impl_k_poll+0x308>)
   27930:	f004 fc0a 	bl	2c148 <printk>
   27934:	2186      	movs	r1, #134	; 0x86
   27936:	4640      	mov	r0, r8
   27938:	f004 fe0b 	bl	2c552 <assert_post_action>
   2793c:	e7b8      	b.n	278b0 <z_impl_k_poll+0x1fc>
	sys_dnode_t *const tail = list->tail;
   2793e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   27942:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27944:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   27948:	6063      	str	r3, [r4, #4]
	tail->next = node;
   2794a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2794c:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   27950:	e1af      	b.n	27cb2 <z_impl_k_poll+0x5fe>
   27952:	4623      	mov	r3, r4
   27954:	4654      	mov	r4, sl
   27956:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   27958:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   2795a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   2795c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2795e:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   27962:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   27964:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   27968:	e1a3      	b.n	27cb2 <z_impl_k_poll+0x5fe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2796a:	f04f 0a00 	mov.w	sl, #0
   2796e:	4653      	mov	r3, sl
   27970:	46a2      	mov	sl, r4
   27972:	461c      	mov	r4, r3
   27974:	e7bd      	b.n	278f2 <z_impl_k_poll+0x23e>
   27976:	4654      	mov	r4, sl
   27978:	e023      	b.n	279c2 <z_impl_k_poll+0x30e>
   2797a:	bf00      	nop
   2797c:	200035ac 	.word	0x200035ac
   27980:	0003622c 	.word	0x0003622c
   27984:	00035dc4 	.word	0x00035dc4
   27988:	00031df4 	.word	0x00031df4
   2798c:	00034ad0 	.word	0x00034ad0
   27990:	00036420 	.word	0x00036420
   27994:	00036438 	.word	0x00036438
   27998:	00036448 	.word	0x00036448
   2799c:	00036458 	.word	0x00036458
   279a0:	0003234c 	.word	0x0003234c
   279a4:	000323a4 	.word	0x000323a4
   279a8:	2000360c 	.word	0x2000360c
   279ac:	000323bc 	.word	0x000323bc
   279b0:	000364dc 	.word	0x000364dc
   279b4:	00036468 	.word	0x00036468
   279b8:	00036288 	.word	0x00036288
   279bc:	000362a4 	.word	0x000362a4
   279c0:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   279c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   279c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   279c8:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   279cc:	6063      	str	r3, [r4, #4]
	tail->next = node;
   279ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   279d0:	f8c8 4004 	str.w	r4, [r8, #4]
}
   279d4:	e16d      	b.n	27cb2 <z_impl_k_poll+0x5fe>
   279d6:	4654      	mov	r4, sl
   279d8:	e7f3      	b.n	279c2 <z_impl_k_poll+0x30e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   279da:	6923      	ldr	r3, [r4, #16]
   279dc:	2b00      	cmp	r3, #0
   279de:	d036      	beq.n	27a4e <z_impl_k_poll+0x39a>
		add_event(&event->queue->poll_events, event, poller);
   279e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
   279e4:	f10a 0814 	add.w	r8, sl, #20
	return list->head == list;
   279e8:	f8da 3014 	ldr.w	r3, [sl, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   279ec:	4598      	cmp	r8, r3
   279ee:	d03e      	beq.n	27a6e <z_impl_k_poll+0x3ba>
   279f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   279f4:	2b00      	cmp	r3, #0
   279f6:	d03a      	beq.n	27a6e <z_impl_k_poll+0x3ba>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   279f8:	6898      	ldr	r0, [r3, #8]
   279fa:	f008 fef6 	bl	307ea <poller_thread>
   279fe:	900b      	str	r0, [sp, #44]	; 0x2c
   27a00:	4630      	mov	r0, r6
   27a02:	f008 fef2 	bl	307ea <poller_thread>
   27a06:	4601      	mov	r1, r0
   27a08:	900a      	str	r0, [sp, #40]	; 0x28
   27a0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27a0c:	f008 fe3a 	bl	30684 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   27a10:	2800      	cmp	r0, #0
   27a12:	dc2c      	bgt.n	27a6e <z_impl_k_poll+0x3ba>
	return list->head == list;
   27a14:	f8da a014 	ldr.w	sl, [sl, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27a18:	45d0      	cmp	r8, sl
   27a1a:	d03e      	beq.n	27a9a <z_impl_k_poll+0x3e6>
   27a1c:	4653      	mov	r3, sl
   27a1e:	46a2      	mov	sl, r4
   27a20:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27a22:	2c00      	cmp	r4, #0
   27a24:	d03f      	beq.n	27aa6 <z_impl_k_poll+0x3f2>
		if (z_sched_prio_cmp(poller_thread(poller),
   27a26:	68a0      	ldr	r0, [r4, #8]
   27a28:	f008 fedf 	bl	307ea <poller_thread>
   27a2c:	4601      	mov	r1, r0
   27a2e:	980a      	ldr	r0, [sp, #40]	; 0x28
   27a30:	f008 fe28 	bl	30684 <z_sched_prio_cmp>
   27a34:	2800      	cmp	r0, #0
   27a36:	dc24      	bgt.n	27a82 <z_impl_k_poll+0x3ce>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27a38:	2c00      	cmp	r4, #0
   27a3a:	d036      	beq.n	27aaa <z_impl_k_poll+0x3f6>
	return (node == list->tail) ? NULL : node->next;
   27a3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27a40:	429c      	cmp	r4, r3
   27a42:	d03d      	beq.n	27ac0 <z_impl_k_poll+0x40c>
   27a44:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27a46:	2c00      	cmp	r4, #0
   27a48:	d1eb      	bne.n	27a22 <z_impl_k_poll+0x36e>
   27a4a:	4654      	mov	r4, sl
   27a4c:	e02e      	b.n	27aac <z_impl_k_poll+0x3f8>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   27a4e:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 27d10 <z_impl_k_poll+0x65c>
   27a52:	238a      	movs	r3, #138	; 0x8a
   27a54:	4642      	mov	r2, r8
   27a56:	49a1      	ldr	r1, [pc, #644]	; (27cdc <z_impl_k_poll+0x628>)
   27a58:	48a1      	ldr	r0, [pc, #644]	; (27ce0 <z_impl_k_poll+0x62c>)
   27a5a:	f004 fb75 	bl	2c148 <printk>
   27a5e:	48a1      	ldr	r0, [pc, #644]	; (27ce4 <z_impl_k_poll+0x630>)
   27a60:	f004 fb72 	bl	2c148 <printk>
   27a64:	218a      	movs	r1, #138	; 0x8a
   27a66:	4640      	mov	r0, r8
   27a68:	f004 fd73 	bl	2c552 <assert_post_action>
   27a6c:	e7b8      	b.n	279e0 <z_impl_k_poll+0x32c>
	sys_dnode_t *const tail = list->tail;
   27a6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   27a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27a74:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   27a78:	6063      	str	r3, [r4, #4]
	tail->next = node;
   27a7a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27a7c:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   27a80:	e117      	b.n	27cb2 <z_impl_k_poll+0x5fe>
   27a82:	4623      	mov	r3, r4
   27a84:	4654      	mov	r4, sl
   27a86:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   27a88:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   27a8a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   27a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27a8e:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   27a92:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   27a94:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   27a98:	e10b      	b.n	27cb2 <z_impl_k_poll+0x5fe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27a9a:	f04f 0a00 	mov.w	sl, #0
   27a9e:	4653      	mov	r3, sl
   27aa0:	46a2      	mov	sl, r4
   27aa2:	461c      	mov	r4, r3
   27aa4:	e7bd      	b.n	27a22 <z_impl_k_poll+0x36e>
   27aa6:	4654      	mov	r4, sl
   27aa8:	e000      	b.n	27aac <z_impl_k_poll+0x3f8>
   27aaa:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   27aac:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   27ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27ab2:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   27ab6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   27ab8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27aba:	f8c8 4004 	str.w	r4, [r8, #4]
}
   27abe:	e0f8      	b.n	27cb2 <z_impl_k_poll+0x5fe>
   27ac0:	4654      	mov	r4, sl
   27ac2:	e7f3      	b.n	27aac <z_impl_k_poll+0x3f8>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   27ac4:	6923      	ldr	r3, [r4, #16]
   27ac6:	2b00      	cmp	r3, #0
   27ac8:	d034      	beq.n	27b34 <z_impl_k_poll+0x480>
		add_event(&event->signal->poll_events, event, poller);
   27aca:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   27ace:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27ad2:	4598      	cmp	r8, r3
   27ad4:	d03e      	beq.n	27b54 <z_impl_k_poll+0x4a0>
   27ad6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   27ada:	2b00      	cmp	r3, #0
   27adc:	d03a      	beq.n	27b54 <z_impl_k_poll+0x4a0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   27ade:	6898      	ldr	r0, [r3, #8]
   27ae0:	f008 fe83 	bl	307ea <poller_thread>
   27ae4:	4682      	mov	sl, r0
   27ae6:	4630      	mov	r0, r6
   27ae8:	f008 fe7f 	bl	307ea <poller_thread>
   27aec:	4601      	mov	r1, r0
   27aee:	900a      	str	r0, [sp, #40]	; 0x28
   27af0:	4650      	mov	r0, sl
   27af2:	f008 fdc7 	bl	30684 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   27af6:	2800      	cmp	r0, #0
   27af8:	dc2c      	bgt.n	27b54 <z_impl_k_poll+0x4a0>
	return list->head == list;
   27afa:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27afe:	45d0      	cmp	r8, sl
   27b00:	d03e      	beq.n	27b80 <z_impl_k_poll+0x4cc>
   27b02:	4653      	mov	r3, sl
   27b04:	46a2      	mov	sl, r4
   27b06:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27b08:	2c00      	cmp	r4, #0
   27b0a:	d03f      	beq.n	27b8c <z_impl_k_poll+0x4d8>
		if (z_sched_prio_cmp(poller_thread(poller),
   27b0c:	68a0      	ldr	r0, [r4, #8]
   27b0e:	f008 fe6c 	bl	307ea <poller_thread>
   27b12:	4601      	mov	r1, r0
   27b14:	980a      	ldr	r0, [sp, #40]	; 0x28
   27b16:	f008 fdb5 	bl	30684 <z_sched_prio_cmp>
   27b1a:	2800      	cmp	r0, #0
   27b1c:	dc24      	bgt.n	27b68 <z_impl_k_poll+0x4b4>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27b1e:	2c00      	cmp	r4, #0
   27b20:	d036      	beq.n	27b90 <z_impl_k_poll+0x4dc>
	return (node == list->tail) ? NULL : node->next;
   27b22:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27b26:	429c      	cmp	r4, r3
   27b28:	d03d      	beq.n	27ba6 <z_impl_k_poll+0x4f2>
   27b2a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27b2c:	2c00      	cmp	r4, #0
   27b2e:	d1eb      	bne.n	27b08 <z_impl_k_poll+0x454>
   27b30:	4654      	mov	r4, sl
   27b32:	e02e      	b.n	27b92 <z_impl_k_poll+0x4de>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   27b34:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 27d10 <z_impl_k_poll+0x65c>
   27b38:	238e      	movs	r3, #142	; 0x8e
   27b3a:	4642      	mov	r2, r8
   27b3c:	496a      	ldr	r1, [pc, #424]	; (27ce8 <z_impl_k_poll+0x634>)
   27b3e:	4868      	ldr	r0, [pc, #416]	; (27ce0 <z_impl_k_poll+0x62c>)
   27b40:	f004 fb02 	bl	2c148 <printk>
   27b44:	4869      	ldr	r0, [pc, #420]	; (27cec <z_impl_k_poll+0x638>)
   27b46:	f004 faff 	bl	2c148 <printk>
   27b4a:	218e      	movs	r1, #142	; 0x8e
   27b4c:	4640      	mov	r0, r8
   27b4e:	f004 fd00 	bl	2c552 <assert_post_action>
   27b52:	e7ba      	b.n	27aca <z_impl_k_poll+0x416>
	sys_dnode_t *const tail = list->tail;
   27b54:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   27b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27b5a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   27b5e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   27b60:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27b62:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   27b66:	e0a4      	b.n	27cb2 <z_impl_k_poll+0x5fe>
   27b68:	4623      	mov	r3, r4
   27b6a:	4654      	mov	r4, sl
   27b6c:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   27b6e:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   27b70:	6063      	str	r3, [r4, #4]
	node->next = successor;
   27b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27b74:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   27b78:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   27b7a:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   27b7e:	e098      	b.n	27cb2 <z_impl_k_poll+0x5fe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27b80:	f04f 0a00 	mov.w	sl, #0
   27b84:	4653      	mov	r3, sl
   27b86:	46a2      	mov	sl, r4
   27b88:	461c      	mov	r4, r3
   27b8a:	e7bd      	b.n	27b08 <z_impl_k_poll+0x454>
   27b8c:	4654      	mov	r4, sl
   27b8e:	e000      	b.n	27b92 <z_impl_k_poll+0x4de>
   27b90:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   27b92:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   27b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27b98:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   27b9c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   27b9e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27ba0:	f8c8 4004 	str.w	r4, [r8, #4]
}
   27ba4:	e085      	b.n	27cb2 <z_impl_k_poll+0x5fe>
   27ba6:	4654      	mov	r4, sl
   27ba8:	e7f3      	b.n	27b92 <z_impl_k_poll+0x4de>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   27baa:	6923      	ldr	r3, [r4, #16]
   27bac:	2b00      	cmp	r3, #0
   27bae:	d036      	beq.n	27c1e <z_impl_k_poll+0x56a>
		add_event(&event->msgq->poll_events, event, poller);
   27bb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
   27bb4:	f10a 0828 	add.w	r8, sl, #40	; 0x28
	return list->head == list;
   27bb8:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27bbc:	4598      	cmp	r8, r3
   27bbe:	d03e      	beq.n	27c3e <z_impl_k_poll+0x58a>
   27bc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   27bc4:	2b00      	cmp	r3, #0
   27bc6:	d03a      	beq.n	27c3e <z_impl_k_poll+0x58a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   27bc8:	6898      	ldr	r0, [r3, #8]
   27bca:	f008 fe0e 	bl	307ea <poller_thread>
   27bce:	900b      	str	r0, [sp, #44]	; 0x2c
   27bd0:	4630      	mov	r0, r6
   27bd2:	f008 fe0a 	bl	307ea <poller_thread>
   27bd6:	4601      	mov	r1, r0
   27bd8:	900a      	str	r0, [sp, #40]	; 0x28
   27bda:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27bdc:	f008 fd52 	bl	30684 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   27be0:	2800      	cmp	r0, #0
   27be2:	dc2c      	bgt.n	27c3e <z_impl_k_poll+0x58a>
	return list->head == list;
   27be4:	f8da a028 	ldr.w	sl, [sl, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27be8:	45d0      	cmp	r8, sl
   27bea:	d03e      	beq.n	27c6a <z_impl_k_poll+0x5b6>
   27bec:	4653      	mov	r3, sl
   27bee:	46a2      	mov	sl, r4
   27bf0:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27bf2:	2c00      	cmp	r4, #0
   27bf4:	d03f      	beq.n	27c76 <z_impl_k_poll+0x5c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   27bf6:	68a0      	ldr	r0, [r4, #8]
   27bf8:	f008 fdf7 	bl	307ea <poller_thread>
   27bfc:	4601      	mov	r1, r0
   27bfe:	980a      	ldr	r0, [sp, #40]	; 0x28
   27c00:	f008 fd40 	bl	30684 <z_sched_prio_cmp>
   27c04:	2800      	cmp	r0, #0
   27c06:	dc24      	bgt.n	27c52 <z_impl_k_poll+0x59e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27c08:	2c00      	cmp	r4, #0
   27c0a:	d036      	beq.n	27c7a <z_impl_k_poll+0x5c6>
	return (node == list->tail) ? NULL : node->next;
   27c0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27c10:	429c      	cmp	r4, r3
   27c12:	d03d      	beq.n	27c90 <z_impl_k_poll+0x5dc>
   27c14:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27c16:	2c00      	cmp	r4, #0
   27c18:	d1eb      	bne.n	27bf2 <z_impl_k_poll+0x53e>
   27c1a:	4654      	mov	r4, sl
   27c1c:	e02e      	b.n	27c7c <z_impl_k_poll+0x5c8>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   27c1e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 27d10 <z_impl_k_poll+0x65c>
   27c22:	2392      	movs	r3, #146	; 0x92
   27c24:	4642      	mov	r2, r8
   27c26:	4932      	ldr	r1, [pc, #200]	; (27cf0 <z_impl_k_poll+0x63c>)
   27c28:	482d      	ldr	r0, [pc, #180]	; (27ce0 <z_impl_k_poll+0x62c>)
   27c2a:	f004 fa8d 	bl	2c148 <printk>
   27c2e:	4831      	ldr	r0, [pc, #196]	; (27cf4 <z_impl_k_poll+0x640>)
   27c30:	f004 fa8a 	bl	2c148 <printk>
   27c34:	2192      	movs	r1, #146	; 0x92
   27c36:	4640      	mov	r0, r8
   27c38:	f004 fc8b 	bl	2c552 <assert_post_action>
   27c3c:	e7b8      	b.n	27bb0 <z_impl_k_poll+0x4fc>
	sys_dnode_t *const tail = list->tail;
   27c3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   27c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27c44:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   27c48:	6063      	str	r3, [r4, #4]
	tail->next = node;
   27c4a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27c4c:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   27c50:	e02f      	b.n	27cb2 <z_impl_k_poll+0x5fe>
   27c52:	4623      	mov	r3, r4
   27c54:	4654      	mov	r4, sl
   27c56:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   27c58:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   27c5a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   27c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27c5e:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   27c62:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   27c64:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   27c68:	e023      	b.n	27cb2 <z_impl_k_poll+0x5fe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27c6a:	f04f 0a00 	mov.w	sl, #0
   27c6e:	4653      	mov	r3, sl
   27c70:	46a2      	mov	sl, r4
   27c72:	461c      	mov	r4, r3
   27c74:	e7bd      	b.n	27bf2 <z_impl_k_poll+0x53e>
   27c76:	4654      	mov	r4, sl
   27c78:	e000      	b.n	27c7c <z_impl_k_poll+0x5c8>
   27c7a:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   27c7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   27c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27c82:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   27c86:	6063      	str	r3, [r4, #4]
	tail->next = node;
   27c88:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27c8a:	f8c8 4004 	str.w	r4, [r8, #4]
}
   27c8e:	e010      	b.n	27cb2 <z_impl_k_poll+0x5fe>
   27c90:	4654      	mov	r4, sl
   27c92:	e7f3      	b.n	27c7c <z_impl_k_poll+0x5c8>
		__ASSERT(false, "invalid event type\n");
   27c94:	f8df 8078 	ldr.w	r8, [pc, #120]	; 27d10 <z_impl_k_poll+0x65c>
   27c98:	2399      	movs	r3, #153	; 0x99
   27c9a:	4642      	mov	r2, r8
   27c9c:	4916      	ldr	r1, [pc, #88]	; (27cf8 <z_impl_k_poll+0x644>)
   27c9e:	4810      	ldr	r0, [pc, #64]	; (27ce0 <z_impl_k_poll+0x62c>)
   27ca0:	f004 fa52 	bl	2c148 <printk>
   27ca4:	4815      	ldr	r0, [pc, #84]	; (27cfc <z_impl_k_poll+0x648>)
   27ca6:	f004 fa4f 	bl	2c148 <printk>
   27caa:	2199      	movs	r1, #153	; 0x99
   27cac:	4640      	mov	r0, r8
   27cae:	f004 fc50 	bl	2c552 <assert_post_action>
	event->poller = poller;
   27cb2:	60a6      	str	r6, [r4, #8]
			events_registered += 1;
   27cb4:	f10b 0b01 	add.w	fp, fp, #1
   27cb8:	e59d      	b.n	277f6 <z_impl_k_poll+0x142>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27cba:	4c11      	ldr	r4, [pc, #68]	; (27d00 <z_impl_k_poll+0x64c>)
   27cbc:	23ac      	movs	r3, #172	; 0xac
   27cbe:	4622      	mov	r2, r4
   27cc0:	4910      	ldr	r1, [pc, #64]	; (27d04 <z_impl_k_poll+0x650>)
   27cc2:	4807      	ldr	r0, [pc, #28]	; (27ce0 <z_impl_k_poll+0x62c>)
   27cc4:	f004 fa40 	bl	2c148 <printk>
   27cc8:	490f      	ldr	r1, [pc, #60]	; (27d08 <z_impl_k_poll+0x654>)
   27cca:	4810      	ldr	r0, [pc, #64]	; (27d0c <z_impl_k_poll+0x658>)
   27ccc:	f004 fa3c 	bl	2c148 <printk>
   27cd0:	21ac      	movs	r1, #172	; 0xac
   27cd2:	4620      	mov	r0, r4
   27cd4:	f004 fc3d 	bl	2c552 <assert_post_action>
   27cd8:	e593      	b.n	27802 <z_impl_k_poll+0x14e>
   27cda:	bf00      	nop
   27cdc:	000362bc 	.word	0x000362bc
   27ce0:	00031df4 	.word	0x00031df4
   27ce4:	000362d8 	.word	0x000362d8
   27ce8:	000362ec 	.word	0x000362ec
   27cec:	0003630c 	.word	0x0003630c
   27cf0:	00036324 	.word	0x00036324
   27cf4:	00036340 	.word	0x00036340
   27cf8:	000364dc 	.word	0x000364dc
   27cfc:	0003635c 	.word	0x0003635c
   27d00:	0003234c 	.word	0x0003234c
   27d04:	00032374 	.word	0x00032374
   27d08:	2000360c 	.word	0x2000360c
   27d0c:	0003238c 	.word	0x0003238c
   27d10:	0003622c 	.word	0x0003622c
   27d14:	f04f 0340 	mov.w	r3, #64	; 0x40
   27d18:	f3ef 8611 	mrs	r6, BASEPRI
   27d1c:	f383 8812 	msr	BASEPRI_MAX, r3
   27d20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d24:	48a7      	ldr	r0, [pc, #668]	; (27fc4 <z_impl_k_poll+0x910>)
   27d26:	f7fb ff0d 	bl	23b44 <z_spin_lock_valid>
   27d2a:	b368      	cbz	r0, 27d88 <z_impl_k_poll+0x6d4>
	z_spin_lock_set_owner(l);
   27d2c:	48a5      	ldr	r0, [pc, #660]	; (27fc4 <z_impl_k_poll+0x910>)
   27d2e:	f7fb ff29 	bl	23b84 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   27d32:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   27d36:	2b00      	cmp	r3, #0
   27d38:	d036      	beq.n	27da8 <z_impl_k_poll+0x6f4>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   27d3a:	2300      	movs	r3, #0
   27d3c:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27d40:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   27d44:	4323      	orrs	r3, r4
   27d46:	f000 8111 	beq.w	27f6c <z_impl_k_poll+0x8b8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   27d4a:	4c9e      	ldr	r4, [pc, #632]	; (27fc4 <z_impl_k_poll+0x910>)
   27d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   27d50:	e9cd 2300 	strd	r2, r3, [sp]
   27d54:	4a9c      	ldr	r2, [pc, #624]	; (27fc8 <z_impl_k_poll+0x914>)
   27d56:	4631      	mov	r1, r6
   27d58:	4620      	mov	r0, r4
   27d5a:	f7fe f927 	bl	25fac <z_pend_curr>
   27d5e:	4607      	mov	r7, r0
   27d60:	f04f 0340 	mov.w	r3, #64	; 0x40
   27d64:	f3ef 8911 	mrs	r9, BASEPRI
   27d68:	f383 8812 	msr	BASEPRI_MAX, r3
   27d6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d70:	4620      	mov	r0, r4
   27d72:	f7fb fee7 	bl	23b44 <z_spin_lock_valid>
   27d76:	2800      	cmp	r0, #0
   27d78:	f000 8113 	beq.w	27fa2 <z_impl_k_poll+0x8ee>
	z_spin_lock_set_owner(l);
   27d7c:	4891      	ldr	r0, [pc, #580]	; (27fc4 <z_impl_k_poll+0x910>)
   27d7e:	f7fb ff01 	bl	23b84 <z_spin_lock_set_owner>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   27d82:	464e      	mov	r6, r9
	while (num_events--) {
   27d84:	465b      	mov	r3, fp
   27d86:	e16c      	b.n	28062 <z_impl_k_poll+0x9ae>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d88:	4c90      	ldr	r4, [pc, #576]	; (27fcc <z_impl_k_poll+0x918>)
   27d8a:	2381      	movs	r3, #129	; 0x81
   27d8c:	4622      	mov	r2, r4
   27d8e:	4990      	ldr	r1, [pc, #576]	; (27fd0 <z_impl_k_poll+0x91c>)
   27d90:	4890      	ldr	r0, [pc, #576]	; (27fd4 <z_impl_k_poll+0x920>)
   27d92:	f004 f9d9 	bl	2c148 <printk>
   27d96:	498b      	ldr	r1, [pc, #556]	; (27fc4 <z_impl_k_poll+0x910>)
   27d98:	488f      	ldr	r0, [pc, #572]	; (27fd8 <z_impl_k_poll+0x924>)
   27d9a:	f004 f9d5 	bl	2c148 <printk>
   27d9e:	2181      	movs	r1, #129	; 0x81
   27da0:	4620      	mov	r0, r4
   27da2:	f004 fbd6 	bl	2c552 <assert_post_action>
   27da6:	e7c1      	b.n	27d2c <z_impl_k_poll+0x678>
		clear_event_registrations(events, events_registered, key);
   27da8:	46b0      	mov	r8, r6
	while (num_events--) {
   27daa:	465f      	mov	r7, fp
   27dac:	e026      	b.n	27dfc <z_impl_k_poll+0x748>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   27dae:	6923      	ldr	r3, [r4, #16]
   27db0:	2b00      	cmp	r3, #0
   27db2:	d049      	beq.n	27e48 <z_impl_k_poll+0x794>
	return node->next != NULL;
   27db4:	59eb      	ldr	r3, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   27db6:	b12b      	cbz	r3, 27dc4 <z_impl_k_poll+0x710>
	sys_dnode_t *const prev = node->prev;
   27db8:	6862      	ldr	r2, [r4, #4]
	prev->next = next;
   27dba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27dbc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27dbe:	2300      	movs	r3, #0
   27dc0:	51eb      	str	r3, [r5, r7]
	node->prev = NULL;
   27dc2:	6063      	str	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27dc4:	487f      	ldr	r0, [pc, #508]	; (27fc4 <z_impl_k_poll+0x910>)
   27dc6:	f7fb fecd 	bl	23b64 <z_spin_unlock_valid>
   27dca:	2800      	cmp	r0, #0
   27dcc:	f000 8095 	beq.w	27efa <z_impl_k_poll+0x846>
	__asm__ volatile(
   27dd0:	f388 8811 	msr	BASEPRI, r8
   27dd4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   27dd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   27ddc:	f3ef 8811 	mrs	r8, BASEPRI
   27de0:	f383 8812 	msr	BASEPRI_MAX, r3
   27de4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27de8:	4876      	ldr	r0, [pc, #472]	; (27fc4 <z_impl_k_poll+0x910>)
   27dea:	f7fb feab 	bl	23b44 <z_spin_lock_valid>
   27dee:	2800      	cmp	r0, #0
   27df0:	f000 8093 	beq.w	27f1a <z_impl_k_poll+0x866>
	z_spin_lock_set_owner(l);
   27df4:	4873      	ldr	r0, [pc, #460]	; (27fc4 <z_impl_k_poll+0x910>)
   27df6:	f7fb fec5 	bl	23b84 <z_spin_lock_set_owner>
	while (num_events--) {
   27dfa:	464f      	mov	r7, r9
   27dfc:	f107 39ff 	add.w	r9, r7, #4294967295
   27e00:	2f00      	cmp	r7, #0
   27e02:	f000 809a 	beq.w	27f3a <z_impl_k_poll+0x886>
		clear_event_registration(&events[num_events]);
   27e06:	eb09 0489 	add.w	r4, r9, r9, lsl #2
   27e0a:	00a7      	lsls	r7, r4, #2
   27e0c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	event->poller = NULL;
   27e10:	2300      	movs	r3, #0
   27e12:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   27e14:	7b63      	ldrb	r3, [r4, #13]
   27e16:	f003 031f 	and.w	r3, r3, #31
   27e1a:	2b08      	cmp	r3, #8
   27e1c:	d85e      	bhi.n	27edc <z_impl_k_poll+0x828>
   27e1e:	a201      	add	r2, pc, #4	; (adr r2, 27e24 <z_impl_k_poll+0x770>)
   27e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27e24:	00027dc5 	.word	0x00027dc5
   27e28:	00027e8f 	.word	0x00027e8f
   27e2c:	00027daf 	.word	0x00027daf
   27e30:	00027edd 	.word	0x00027edd
   27e34:	00027e69 	.word	0x00027e69
   27e38:	00027edd 	.word	0x00027edd
   27e3c:	00027edd 	.word	0x00027edd
   27e40:	00027edd 	.word	0x00027edd
   27e44:	00027eb5 	.word	0x00027eb5
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   27e48:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 27ffc <z_impl_k_poll+0x948>
   27e4c:	23a9      	movs	r3, #169	; 0xa9
   27e4e:	4652      	mov	r2, sl
   27e50:	4962      	ldr	r1, [pc, #392]	; (27fdc <z_impl_k_poll+0x928>)
   27e52:	4860      	ldr	r0, [pc, #384]	; (27fd4 <z_impl_k_poll+0x920>)
   27e54:	f004 f978 	bl	2c148 <printk>
   27e58:	4861      	ldr	r0, [pc, #388]	; (27fe0 <z_impl_k_poll+0x92c>)
   27e5a:	f004 f975 	bl	2c148 <printk>
   27e5e:	21a9      	movs	r1, #169	; 0xa9
   27e60:	4650      	mov	r0, sl
   27e62:	f004 fb76 	bl	2c552 <assert_post_action>
   27e66:	e7a5      	b.n	27db4 <z_impl_k_poll+0x700>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   27e68:	6923      	ldr	r3, [r4, #16]
   27e6a:	2b00      	cmp	r3, #0
   27e6c:	d1a2      	bne.n	27db4 <z_impl_k_poll+0x700>
   27e6e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 27ffc <z_impl_k_poll+0x948>
   27e72:	23ad      	movs	r3, #173	; 0xad
   27e74:	4652      	mov	r2, sl
   27e76:	495b      	ldr	r1, [pc, #364]	; (27fe4 <z_impl_k_poll+0x930>)
   27e78:	4856      	ldr	r0, [pc, #344]	; (27fd4 <z_impl_k_poll+0x920>)
   27e7a:	f004 f965 	bl	2c148 <printk>
   27e7e:	485a      	ldr	r0, [pc, #360]	; (27fe8 <z_impl_k_poll+0x934>)
   27e80:	f004 f962 	bl	2c148 <printk>
   27e84:	21ad      	movs	r1, #173	; 0xad
   27e86:	4650      	mov	r0, sl
   27e88:	f004 fb63 	bl	2c552 <assert_post_action>
   27e8c:	e792      	b.n	27db4 <z_impl_k_poll+0x700>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   27e8e:	6923      	ldr	r3, [r4, #16]
   27e90:	2b00      	cmp	r3, #0
   27e92:	d18f      	bne.n	27db4 <z_impl_k_poll+0x700>
   27e94:	f8df a164 	ldr.w	sl, [pc, #356]	; 27ffc <z_impl_k_poll+0x948>
   27e98:	23b1      	movs	r3, #177	; 0xb1
   27e9a:	4652      	mov	r2, sl
   27e9c:	4953      	ldr	r1, [pc, #332]	; (27fec <z_impl_k_poll+0x938>)
   27e9e:	484d      	ldr	r0, [pc, #308]	; (27fd4 <z_impl_k_poll+0x920>)
   27ea0:	f004 f952 	bl	2c148 <printk>
   27ea4:	4852      	ldr	r0, [pc, #328]	; (27ff0 <z_impl_k_poll+0x93c>)
   27ea6:	f004 f94f 	bl	2c148 <printk>
   27eaa:	21b1      	movs	r1, #177	; 0xb1
   27eac:	4650      	mov	r0, sl
   27eae:	f004 fb50 	bl	2c552 <assert_post_action>
   27eb2:	e77f      	b.n	27db4 <z_impl_k_poll+0x700>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   27eb4:	6923      	ldr	r3, [r4, #16]
   27eb6:	2b00      	cmp	r3, #0
   27eb8:	f47f af7c 	bne.w	27db4 <z_impl_k_poll+0x700>
   27ebc:	f8df a13c 	ldr.w	sl, [pc, #316]	; 27ffc <z_impl_k_poll+0x948>
   27ec0:	23b5      	movs	r3, #181	; 0xb5
   27ec2:	4652      	mov	r2, sl
   27ec4:	494b      	ldr	r1, [pc, #300]	; (27ff4 <z_impl_k_poll+0x940>)
   27ec6:	4843      	ldr	r0, [pc, #268]	; (27fd4 <z_impl_k_poll+0x920>)
   27ec8:	f004 f93e 	bl	2c148 <printk>
   27ecc:	484a      	ldr	r0, [pc, #296]	; (27ff8 <z_impl_k_poll+0x944>)
   27ece:	f004 f93b 	bl	2c148 <printk>
   27ed2:	21b5      	movs	r1, #181	; 0xb5
   27ed4:	4650      	mov	r0, sl
   27ed6:	f004 fb3c 	bl	2c552 <assert_post_action>
   27eda:	e76b      	b.n	27db4 <z_impl_k_poll+0x700>
		__ASSERT(false, "invalid event type\n");
   27edc:	4c47      	ldr	r4, [pc, #284]	; (27ffc <z_impl_k_poll+0x948>)
   27ede:	23bc      	movs	r3, #188	; 0xbc
   27ee0:	4622      	mov	r2, r4
   27ee2:	4947      	ldr	r1, [pc, #284]	; (28000 <z_impl_k_poll+0x94c>)
   27ee4:	483b      	ldr	r0, [pc, #236]	; (27fd4 <z_impl_k_poll+0x920>)
   27ee6:	f004 f92f 	bl	2c148 <printk>
   27eea:	4846      	ldr	r0, [pc, #280]	; (28004 <z_impl_k_poll+0x950>)
   27eec:	f004 f92c 	bl	2c148 <printk>
   27ef0:	21bc      	movs	r1, #188	; 0xbc
   27ef2:	4620      	mov	r0, r4
   27ef4:	f004 fb2d 	bl	2c552 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   27ef8:	e764      	b.n	27dc4 <z_impl_k_poll+0x710>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27efa:	4c34      	ldr	r4, [pc, #208]	; (27fcc <z_impl_k_poll+0x918>)
   27efc:	23ac      	movs	r3, #172	; 0xac
   27efe:	4622      	mov	r2, r4
   27f00:	4941      	ldr	r1, [pc, #260]	; (28008 <z_impl_k_poll+0x954>)
   27f02:	4834      	ldr	r0, [pc, #208]	; (27fd4 <z_impl_k_poll+0x920>)
   27f04:	f004 f920 	bl	2c148 <printk>
   27f08:	492e      	ldr	r1, [pc, #184]	; (27fc4 <z_impl_k_poll+0x910>)
   27f0a:	4840      	ldr	r0, [pc, #256]	; (2800c <z_impl_k_poll+0x958>)
   27f0c:	f004 f91c 	bl	2c148 <printk>
   27f10:	21ac      	movs	r1, #172	; 0xac
   27f12:	4620      	mov	r0, r4
   27f14:	f004 fb1d 	bl	2c552 <assert_post_action>
   27f18:	e75a      	b.n	27dd0 <z_impl_k_poll+0x71c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27f1a:	4c2c      	ldr	r4, [pc, #176]	; (27fcc <z_impl_k_poll+0x918>)
   27f1c:	2381      	movs	r3, #129	; 0x81
   27f1e:	4622      	mov	r2, r4
   27f20:	492b      	ldr	r1, [pc, #172]	; (27fd0 <z_impl_k_poll+0x91c>)
   27f22:	482c      	ldr	r0, [pc, #176]	; (27fd4 <z_impl_k_poll+0x920>)
   27f24:	f004 f910 	bl	2c148 <printk>
   27f28:	4926      	ldr	r1, [pc, #152]	; (27fc4 <z_impl_k_poll+0x910>)
   27f2a:	482b      	ldr	r0, [pc, #172]	; (27fd8 <z_impl_k_poll+0x924>)
   27f2c:	f004 f90c 	bl	2c148 <printk>
   27f30:	2181      	movs	r1, #129	; 0x81
   27f32:	4620      	mov	r0, r4
   27f34:	f004 fb0d 	bl	2c552 <assert_post_action>
   27f38:	e75c      	b.n	27df4 <z_impl_k_poll+0x740>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27f3a:	4822      	ldr	r0, [pc, #136]	; (27fc4 <z_impl_k_poll+0x910>)
   27f3c:	f7fb fe12 	bl	23b64 <z_spin_unlock_valid>
   27f40:	b120      	cbz	r0, 27f4c <z_impl_k_poll+0x898>
	__asm__ volatile(
   27f42:	f386 8811 	msr	BASEPRI, r6
   27f46:	f3bf 8f6f 	isb	sy
		return 0;
   27f4a:	e132      	b.n	281b2 <z_impl_k_poll+0xafe>
   27f4c:	4c1f      	ldr	r4, [pc, #124]	; (27fcc <z_impl_k_poll+0x918>)
   27f4e:	23ac      	movs	r3, #172	; 0xac
   27f50:	4622      	mov	r2, r4
   27f52:	492d      	ldr	r1, [pc, #180]	; (28008 <z_impl_k_poll+0x954>)
   27f54:	481f      	ldr	r0, [pc, #124]	; (27fd4 <z_impl_k_poll+0x920>)
   27f56:	f004 f8f7 	bl	2c148 <printk>
   27f5a:	491a      	ldr	r1, [pc, #104]	; (27fc4 <z_impl_k_poll+0x910>)
   27f5c:	482b      	ldr	r0, [pc, #172]	; (2800c <z_impl_k_poll+0x958>)
   27f5e:	f004 f8f3 	bl	2c148 <printk>
   27f62:	21ac      	movs	r1, #172	; 0xac
   27f64:	4620      	mov	r0, r4
   27f66:	f004 faf4 	bl	2c552 <assert_post_action>
   27f6a:	e7ea      	b.n	27f42 <z_impl_k_poll+0x88e>
   27f6c:	4815      	ldr	r0, [pc, #84]	; (27fc4 <z_impl_k_poll+0x910>)
   27f6e:	f7fb fdf9 	bl	23b64 <z_spin_unlock_valid>
   27f72:	b130      	cbz	r0, 27f82 <z_impl_k_poll+0x8ce>
   27f74:	f386 8811 	msr	BASEPRI, r6
   27f78:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   27f7c:	f06f 070a 	mvn.w	r7, #10
   27f80:	e117      	b.n	281b2 <z_impl_k_poll+0xafe>
   27f82:	4c12      	ldr	r4, [pc, #72]	; (27fcc <z_impl_k_poll+0x918>)
   27f84:	23ac      	movs	r3, #172	; 0xac
   27f86:	4622      	mov	r2, r4
   27f88:	491f      	ldr	r1, [pc, #124]	; (28008 <z_impl_k_poll+0x954>)
   27f8a:	4812      	ldr	r0, [pc, #72]	; (27fd4 <z_impl_k_poll+0x920>)
   27f8c:	f004 f8dc 	bl	2c148 <printk>
   27f90:	490c      	ldr	r1, [pc, #48]	; (27fc4 <z_impl_k_poll+0x910>)
   27f92:	481e      	ldr	r0, [pc, #120]	; (2800c <z_impl_k_poll+0x958>)
   27f94:	f004 f8d8 	bl	2c148 <printk>
   27f98:	21ac      	movs	r1, #172	; 0xac
   27f9a:	4620      	mov	r0, r4
   27f9c:	f004 fad9 	bl	2c552 <assert_post_action>
   27fa0:	e7e8      	b.n	27f74 <z_impl_k_poll+0x8c0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27fa2:	4c0a      	ldr	r4, [pc, #40]	; (27fcc <z_impl_k_poll+0x918>)
   27fa4:	2381      	movs	r3, #129	; 0x81
   27fa6:	4622      	mov	r2, r4
   27fa8:	4909      	ldr	r1, [pc, #36]	; (27fd0 <z_impl_k_poll+0x91c>)
   27faa:	480a      	ldr	r0, [pc, #40]	; (27fd4 <z_impl_k_poll+0x920>)
   27fac:	f004 f8cc 	bl	2c148 <printk>
   27fb0:	4904      	ldr	r1, [pc, #16]	; (27fc4 <z_impl_k_poll+0x910>)
   27fb2:	4809      	ldr	r0, [pc, #36]	; (27fd8 <z_impl_k_poll+0x924>)
   27fb4:	f004 f8c8 	bl	2c148 <printk>
   27fb8:	2181      	movs	r1, #129	; 0x81
   27fba:	4620      	mov	r0, r4
   27fbc:	f004 fac9 	bl	2c552 <assert_post_action>
   27fc0:	e6dc      	b.n	27d7c <z_impl_k_poll+0x6c8>
   27fc2:	bf00      	nop
   27fc4:	2000360c 	.word	0x2000360c
   27fc8:	20000868 	.word	0x20000868
   27fcc:	0003234c 	.word	0x0003234c
   27fd0:	000323a4 	.word	0x000323a4
   27fd4:	00031df4 	.word	0x00031df4
   27fd8:	000323bc 	.word	0x000323bc
   27fdc:	00036288 	.word	0x00036288
   27fe0:	000362a4 	.word	0x000362a4
   27fe4:	000362bc 	.word	0x000362bc
   27fe8:	000362d8 	.word	0x000362d8
   27fec:	000362ec 	.word	0x000362ec
   27ff0:	0003630c 	.word	0x0003630c
   27ff4:	00036324 	.word	0x00036324
   27ff8:	00036340 	.word	0x00036340
   27ffc:	0003622c 	.word	0x0003622c
   28000:	000364dc 	.word	0x000364dc
   28004:	0003635c 	.word	0x0003635c
   28008:	00032374 	.word	0x00032374
   2800c:	0003238c 	.word	0x0003238c
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   28010:	6923      	ldr	r3, [r4, #16]
   28012:	2b00      	cmp	r3, #0
   28014:	d04c      	beq.n	280b0 <z_impl_k_poll+0x9fc>
	return node->next != NULL;
   28016:	f855 300a 	ldr.w	r3, [r5, sl]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2801a:	b133      	cbz	r3, 2802a <z_impl_k_poll+0x976>
	sys_dnode_t *const prev = node->prev;
   2801c:	6862      	ldr	r2, [r4, #4]
	prev->next = next;
   2801e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28020:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28022:	2300      	movs	r3, #0
   28024:	f845 300a 	str.w	r3, [r5, sl]
	node->prev = NULL;
   28028:	6063      	str	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2802a:	486c      	ldr	r0, [pc, #432]	; (281dc <z_impl_k_poll+0xb28>)
   2802c:	f7fb fd9a 	bl	23b64 <z_spin_unlock_valid>
   28030:	2800      	cmp	r0, #0
   28032:	f000 8096 	beq.w	28162 <z_impl_k_poll+0xaae>
   28036:	f386 8811 	msr	BASEPRI, r6
   2803a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2803e:	f04f 0340 	mov.w	r3, #64	; 0x40
   28042:	f3ef 8611 	mrs	r6, BASEPRI
   28046:	f383 8812 	msr	BASEPRI_MAX, r3
   2804a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2804e:	4863      	ldr	r0, [pc, #396]	; (281dc <z_impl_k_poll+0xb28>)
   28050:	f7fb fd78 	bl	23b44 <z_spin_lock_valid>
   28054:	2800      	cmp	r0, #0
   28056:	f000 8094 	beq.w	28182 <z_impl_k_poll+0xace>
	z_spin_lock_set_owner(l);
   2805a:	4860      	ldr	r0, [pc, #384]	; (281dc <z_impl_k_poll+0xb28>)
   2805c:	f7fb fd92 	bl	23b84 <z_spin_lock_set_owner>
	while (num_events--) {
   28060:	4643      	mov	r3, r8
   28062:	f103 38ff 	add.w	r8, r3, #4294967295
   28066:	2b00      	cmp	r3, #0
   28068:	f000 809b 	beq.w	281a2 <z_impl_k_poll+0xaee>
		clear_event_registration(&events[num_events]);
   2806c:	eb08 0488 	add.w	r4, r8, r8, lsl #2
   28070:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   28074:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	event->poller = NULL;
   28078:	2300      	movs	r3, #0
   2807a:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   2807c:	7b63      	ldrb	r3, [r4, #13]
   2807e:	f003 031f 	and.w	r3, r3, #31
   28082:	2b08      	cmp	r3, #8
   28084:	d85e      	bhi.n	28144 <z_impl_k_poll+0xa90>
   28086:	a201      	add	r2, pc, #4	; (adr r2, 2808c <z_impl_k_poll+0x9d8>)
   28088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2808c:	0002802b 	.word	0x0002802b
   28090:	000280f7 	.word	0x000280f7
   28094:	00028011 	.word	0x00028011
   28098:	00028145 	.word	0x00028145
   2809c:	000280d1 	.word	0x000280d1
   280a0:	00028145 	.word	0x00028145
   280a4:	00028145 	.word	0x00028145
   280a8:	00028145 	.word	0x00028145
   280ac:	0002811d 	.word	0x0002811d
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   280b0:	f8df b150 	ldr.w	fp, [pc, #336]	; 28204 <z_impl_k_poll+0xb50>
   280b4:	23a9      	movs	r3, #169	; 0xa9
   280b6:	465a      	mov	r2, fp
   280b8:	4949      	ldr	r1, [pc, #292]	; (281e0 <z_impl_k_poll+0xb2c>)
   280ba:	484a      	ldr	r0, [pc, #296]	; (281e4 <z_impl_k_poll+0xb30>)
   280bc:	f004 f844 	bl	2c148 <printk>
   280c0:	4849      	ldr	r0, [pc, #292]	; (281e8 <z_impl_k_poll+0xb34>)
   280c2:	f004 f841 	bl	2c148 <printk>
   280c6:	21a9      	movs	r1, #169	; 0xa9
   280c8:	4658      	mov	r0, fp
   280ca:	f004 fa42 	bl	2c552 <assert_post_action>
   280ce:	e7a2      	b.n	28016 <z_impl_k_poll+0x962>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   280d0:	6923      	ldr	r3, [r4, #16]
   280d2:	2b00      	cmp	r3, #0
   280d4:	d19f      	bne.n	28016 <z_impl_k_poll+0x962>
   280d6:	f8df b12c 	ldr.w	fp, [pc, #300]	; 28204 <z_impl_k_poll+0xb50>
   280da:	23ad      	movs	r3, #173	; 0xad
   280dc:	465a      	mov	r2, fp
   280de:	4943      	ldr	r1, [pc, #268]	; (281ec <z_impl_k_poll+0xb38>)
   280e0:	4840      	ldr	r0, [pc, #256]	; (281e4 <z_impl_k_poll+0xb30>)
   280e2:	f004 f831 	bl	2c148 <printk>
   280e6:	4842      	ldr	r0, [pc, #264]	; (281f0 <z_impl_k_poll+0xb3c>)
   280e8:	f004 f82e 	bl	2c148 <printk>
   280ec:	21ad      	movs	r1, #173	; 0xad
   280ee:	4658      	mov	r0, fp
   280f0:	f004 fa2f 	bl	2c552 <assert_post_action>
   280f4:	e78f      	b.n	28016 <z_impl_k_poll+0x962>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   280f6:	6923      	ldr	r3, [r4, #16]
   280f8:	2b00      	cmp	r3, #0
   280fa:	d18c      	bne.n	28016 <z_impl_k_poll+0x962>
   280fc:	f8df b104 	ldr.w	fp, [pc, #260]	; 28204 <z_impl_k_poll+0xb50>
   28100:	23b1      	movs	r3, #177	; 0xb1
   28102:	465a      	mov	r2, fp
   28104:	493b      	ldr	r1, [pc, #236]	; (281f4 <z_impl_k_poll+0xb40>)
   28106:	4837      	ldr	r0, [pc, #220]	; (281e4 <z_impl_k_poll+0xb30>)
   28108:	f004 f81e 	bl	2c148 <printk>
   2810c:	483a      	ldr	r0, [pc, #232]	; (281f8 <z_impl_k_poll+0xb44>)
   2810e:	f004 f81b 	bl	2c148 <printk>
   28112:	21b1      	movs	r1, #177	; 0xb1
   28114:	4658      	mov	r0, fp
   28116:	f004 fa1c 	bl	2c552 <assert_post_action>
   2811a:	e77c      	b.n	28016 <z_impl_k_poll+0x962>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2811c:	6923      	ldr	r3, [r4, #16]
   2811e:	2b00      	cmp	r3, #0
   28120:	f47f af79 	bne.w	28016 <z_impl_k_poll+0x962>
   28124:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 28204 <z_impl_k_poll+0xb50>
   28128:	23b5      	movs	r3, #181	; 0xb5
   2812a:	465a      	mov	r2, fp
   2812c:	4933      	ldr	r1, [pc, #204]	; (281fc <z_impl_k_poll+0xb48>)
   2812e:	482d      	ldr	r0, [pc, #180]	; (281e4 <z_impl_k_poll+0xb30>)
   28130:	f004 f80a 	bl	2c148 <printk>
   28134:	4832      	ldr	r0, [pc, #200]	; (28200 <z_impl_k_poll+0xb4c>)
   28136:	f004 f807 	bl	2c148 <printk>
   2813a:	21b5      	movs	r1, #181	; 0xb5
   2813c:	4658      	mov	r0, fp
   2813e:	f004 fa08 	bl	2c552 <assert_post_action>
   28142:	e768      	b.n	28016 <z_impl_k_poll+0x962>
		__ASSERT(false, "invalid event type\n");
   28144:	4c2f      	ldr	r4, [pc, #188]	; (28204 <z_impl_k_poll+0xb50>)
   28146:	23bc      	movs	r3, #188	; 0xbc
   28148:	4622      	mov	r2, r4
   2814a:	492f      	ldr	r1, [pc, #188]	; (28208 <z_impl_k_poll+0xb54>)
   2814c:	4825      	ldr	r0, [pc, #148]	; (281e4 <z_impl_k_poll+0xb30>)
   2814e:	f003 fffb 	bl	2c148 <printk>
   28152:	482e      	ldr	r0, [pc, #184]	; (2820c <z_impl_k_poll+0xb58>)
   28154:	f003 fff8 	bl	2c148 <printk>
   28158:	21bc      	movs	r1, #188	; 0xbc
   2815a:	4620      	mov	r0, r4
   2815c:	f004 f9f9 	bl	2c552 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   28160:	e763      	b.n	2802a <z_impl_k_poll+0x976>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28162:	4c2b      	ldr	r4, [pc, #172]	; (28210 <z_impl_k_poll+0xb5c>)
   28164:	23ac      	movs	r3, #172	; 0xac
   28166:	4622      	mov	r2, r4
   28168:	492a      	ldr	r1, [pc, #168]	; (28214 <z_impl_k_poll+0xb60>)
   2816a:	481e      	ldr	r0, [pc, #120]	; (281e4 <z_impl_k_poll+0xb30>)
   2816c:	f003 ffec 	bl	2c148 <printk>
   28170:	491a      	ldr	r1, [pc, #104]	; (281dc <z_impl_k_poll+0xb28>)
   28172:	4829      	ldr	r0, [pc, #164]	; (28218 <z_impl_k_poll+0xb64>)
   28174:	f003 ffe8 	bl	2c148 <printk>
   28178:	21ac      	movs	r1, #172	; 0xac
   2817a:	4620      	mov	r0, r4
   2817c:	f004 f9e9 	bl	2c552 <assert_post_action>
   28180:	e759      	b.n	28036 <z_impl_k_poll+0x982>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28182:	4c23      	ldr	r4, [pc, #140]	; (28210 <z_impl_k_poll+0xb5c>)
   28184:	2381      	movs	r3, #129	; 0x81
   28186:	4622      	mov	r2, r4
   28188:	4924      	ldr	r1, [pc, #144]	; (2821c <z_impl_k_poll+0xb68>)
   2818a:	4816      	ldr	r0, [pc, #88]	; (281e4 <z_impl_k_poll+0xb30>)
   2818c:	f003 ffdc 	bl	2c148 <printk>
   28190:	4912      	ldr	r1, [pc, #72]	; (281dc <z_impl_k_poll+0xb28>)
   28192:	4823      	ldr	r0, [pc, #140]	; (28220 <z_impl_k_poll+0xb6c>)
   28194:	f003 ffd8 	bl	2c148 <printk>
   28198:	2181      	movs	r1, #129	; 0x81
   2819a:	4620      	mov	r0, r4
   2819c:	f004 f9d9 	bl	2c552 <assert_post_action>
   281a0:	e75b      	b.n	2805a <z_impl_k_poll+0x9a6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   281a2:	480e      	ldr	r0, [pc, #56]	; (281dc <z_impl_k_poll+0xb28>)
   281a4:	f7fb fcde 	bl	23b64 <z_spin_unlock_valid>
   281a8:	b138      	cbz	r0, 281ba <z_impl_k_poll+0xb06>
	__asm__ volatile(
   281aa:	f389 8811 	msr	BASEPRI, r9
   281ae:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   281b2:	4638      	mov	r0, r7
   281b4:	b00d      	add	sp, #52	; 0x34
   281b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   281ba:	4c15      	ldr	r4, [pc, #84]	; (28210 <z_impl_k_poll+0xb5c>)
   281bc:	23ac      	movs	r3, #172	; 0xac
   281be:	4622      	mov	r2, r4
   281c0:	4914      	ldr	r1, [pc, #80]	; (28214 <z_impl_k_poll+0xb60>)
   281c2:	4808      	ldr	r0, [pc, #32]	; (281e4 <z_impl_k_poll+0xb30>)
   281c4:	f003 ffc0 	bl	2c148 <printk>
   281c8:	4904      	ldr	r1, [pc, #16]	; (281dc <z_impl_k_poll+0xb28>)
   281ca:	4813      	ldr	r0, [pc, #76]	; (28218 <z_impl_k_poll+0xb64>)
   281cc:	f003 ffbc 	bl	2c148 <printk>
   281d0:	21ac      	movs	r1, #172	; 0xac
   281d2:	4620      	mov	r0, r4
   281d4:	f004 f9bd 	bl	2c552 <assert_post_action>
   281d8:	e7e7      	b.n	281aa <z_impl_k_poll+0xaf6>
   281da:	bf00      	nop
   281dc:	2000360c 	.word	0x2000360c
   281e0:	00036288 	.word	0x00036288
   281e4:	00031df4 	.word	0x00031df4
   281e8:	000362a4 	.word	0x000362a4
   281ec:	000362bc 	.word	0x000362bc
   281f0:	000362d8 	.word	0x000362d8
   281f4:	000362ec 	.word	0x000362ec
   281f8:	0003630c 	.word	0x0003630c
   281fc:	00036324 	.word	0x00036324
   28200:	00036340 	.word	0x00036340
   28204:	0003622c 	.word	0x0003622c
   28208:	000364dc 	.word	0x000364dc
   2820c:	0003635c 	.word	0x0003635c
   28210:	0003234c 	.word	0x0003234c
   28214:	00032374 	.word	0x00032374
   28218:	0003238c 	.word	0x0003238c
   2821c:	000323a4 	.word	0x000323a4
   28220:	000323bc 	.word	0x000323bc

00028224 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   28224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28226:	4604      	mov	r4, r0
   28228:	460d      	mov	r5, r1
	__asm__ volatile(
   2822a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2822e:	f3ef 8611 	mrs	r6, BASEPRI
   28232:	f383 8812 	msr	BASEPRI_MAX, r3
   28236:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2823a:	4824      	ldr	r0, [pc, #144]	; (282cc <z_impl_k_poll_signal_raise+0xa8>)
   2823c:	f7fb fc82 	bl	23b44 <z_spin_lock_valid>
   28240:	b1d0      	cbz	r0, 28278 <z_impl_k_poll_signal_raise+0x54>
	z_spin_lock_set_owner(l);
   28242:	4822      	ldr	r0, [pc, #136]	; (282cc <z_impl_k_poll_signal_raise+0xa8>)
   28244:	f7fb fc9e 	bl	23b84 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   28248:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   2824a:	2301      	movs	r3, #1
   2824c:	60a3      	str	r3, [r4, #8]
	return list->head == list;
   2824e:	6820      	ldr	r0, [r4, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   28250:	4284      	cmp	r4, r0
   28252:	d021      	beq.n	28298 <z_impl_k_poll_signal_raise+0x74>
	sys_dnode_t *const prev = node->prev;
   28254:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   28256:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   28258:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2825a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2825c:	2300      	movs	r3, #0
   2825e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   28260:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   28262:	b1c8      	cbz	r0, 28298 <z_impl_k_poll_signal_raise+0x74>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   28264:	2101      	movs	r1, #1
   28266:	f008 fad9 	bl	3081c <signal_poll_event>
   2826a:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   2826c:	4631      	mov	r1, r6
   2826e:	4817      	ldr	r0, [pc, #92]	; (282cc <z_impl_k_poll_signal_raise+0xa8>)
   28270:	f7fd f9e4 	bl	2563c <z_reschedule>
	return rc;
}
   28274:	4620      	mov	r0, r4
   28276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28278:	4f15      	ldr	r7, [pc, #84]	; (282d0 <z_impl_k_poll_signal_raise+0xac>)
   2827a:	2381      	movs	r3, #129	; 0x81
   2827c:	463a      	mov	r2, r7
   2827e:	4915      	ldr	r1, [pc, #84]	; (282d4 <z_impl_k_poll_signal_raise+0xb0>)
   28280:	4815      	ldr	r0, [pc, #84]	; (282d8 <z_impl_k_poll_signal_raise+0xb4>)
   28282:	f003 ff61 	bl	2c148 <printk>
   28286:	4911      	ldr	r1, [pc, #68]	; (282cc <z_impl_k_poll_signal_raise+0xa8>)
   28288:	4814      	ldr	r0, [pc, #80]	; (282dc <z_impl_k_poll_signal_raise+0xb8>)
   2828a:	f003 ff5d 	bl	2c148 <printk>
   2828e:	2181      	movs	r1, #129	; 0x81
   28290:	4638      	mov	r0, r7
   28292:	f004 f95e 	bl	2c552 <assert_post_action>
   28296:	e7d4      	b.n	28242 <z_impl_k_poll_signal_raise+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28298:	480c      	ldr	r0, [pc, #48]	; (282cc <z_impl_k_poll_signal_raise+0xa8>)
   2829a:	f7fb fc63 	bl	23b64 <z_spin_unlock_valid>
   2829e:	b128      	cbz	r0, 282ac <z_impl_k_poll_signal_raise+0x88>
	__asm__ volatile(
   282a0:	f386 8811 	msr	BASEPRI, r6
   282a4:	f3bf 8f6f 	isb	sy
		return 0;
   282a8:	2400      	movs	r4, #0
   282aa:	e7e3      	b.n	28274 <z_impl_k_poll_signal_raise+0x50>
   282ac:	4c08      	ldr	r4, [pc, #32]	; (282d0 <z_impl_k_poll_signal_raise+0xac>)
   282ae:	23ac      	movs	r3, #172	; 0xac
   282b0:	4622      	mov	r2, r4
   282b2:	490b      	ldr	r1, [pc, #44]	; (282e0 <z_impl_k_poll_signal_raise+0xbc>)
   282b4:	4808      	ldr	r0, [pc, #32]	; (282d8 <z_impl_k_poll_signal_raise+0xb4>)
   282b6:	f003 ff47 	bl	2c148 <printk>
   282ba:	4904      	ldr	r1, [pc, #16]	; (282cc <z_impl_k_poll_signal_raise+0xa8>)
   282bc:	4809      	ldr	r0, [pc, #36]	; (282e4 <z_impl_k_poll_signal_raise+0xc0>)
   282be:	f003 ff43 	bl	2c148 <printk>
   282c2:	21ac      	movs	r1, #172	; 0xac
   282c4:	4620      	mov	r0, r4
   282c6:	f004 f944 	bl	2c552 <assert_post_action>
   282ca:	e7e9      	b.n	282a0 <z_impl_k_poll_signal_raise+0x7c>
   282cc:	2000360c 	.word	0x2000360c
   282d0:	0003234c 	.word	0x0003234c
   282d4:	000323a4 	.word	0x000323a4
   282d8:	00031df4 	.word	0x00031df4
   282dc:	000323bc 	.word	0x000323bc
   282e0:	00032374 	.word	0x00032374
   282e4:	0003238c 	.word	0x0003238c

000282e8 <z_heap_aligned_alloc>:
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   282e8:	b570      	push	{r4, r5, r6, lr}
   282ea:	b082      	sub	sp, #8
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   282ec:	3204      	adds	r2, #4
   282ee:	d223      	bcs.n	28338 <z_heap_aligned_alloc+0x50>
   282f0:	4606      	mov	r6, r0
   282f2:	460c      	mov	r4, r1
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   282f4:	2000      	movs	r0, #0
   282f6:	2100      	movs	r1, #0
   282f8:	e9cd 0100 	strd	r0, r1, [sp]
   282fc:	f044 0104 	orr.w	r1, r4, #4
   28300:	4630      	mov	r0, r6
   28302:	f7fb f9e3 	bl	236cc <k_heap_aligned_alloc>
	if (mem == NULL) {
   28306:	4605      	mov	r5, r0
   28308:	b1b8      	cbz	r0, 2833a <z_heap_aligned_alloc+0x52>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   2830a:	f845 6b04 	str.w	r6, [r5], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   2830e:	b1a4      	cbz	r4, 2833a <z_heap_aligned_alloc+0x52>
   28310:	1e63      	subs	r3, r4, #1
   28312:	421d      	tst	r5, r3
   28314:	d011      	beq.n	2833a <z_heap_aligned_alloc+0x52>
   28316:	4e0a      	ldr	r6, [pc, #40]	; (28340 <z_heap_aligned_alloc+0x58>)
   28318:	2325      	movs	r3, #37	; 0x25
   2831a:	4632      	mov	r2, r6
   2831c:	4909      	ldr	r1, [pc, #36]	; (28344 <z_heap_aligned_alloc+0x5c>)
   2831e:	480a      	ldr	r0, [pc, #40]	; (28348 <z_heap_aligned_alloc+0x60>)
   28320:	f003 ff12 	bl	2c148 <printk>
   28324:	4622      	mov	r2, r4
   28326:	4629      	mov	r1, r5
   28328:	4808      	ldr	r0, [pc, #32]	; (2834c <z_heap_aligned_alloc+0x64>)
   2832a:	f003 ff0d 	bl	2c148 <printk>
   2832e:	2125      	movs	r1, #37	; 0x25
   28330:	4630      	mov	r0, r6
   28332:	f004 f90e 	bl	2c552 <assert_post_action>
   28336:	e000      	b.n	2833a <z_heap_aligned_alloc+0x52>
		return NULL;
   28338:	2500      	movs	r5, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   2833a:	4628      	mov	r0, r5
   2833c:	b002      	add	sp, #8
   2833e:	bd70      	pop	{r4, r5, r6, pc}
   28340:	00036488 	.word	0x00036488
   28344:	000364ac 	.word	0x000364ac
   28348:	00031df4 	.word	0x00031df4
   2834c:	000364e0 	.word	0x000364e0

00028350 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   28350:	b538      	push	{r3, r4, r5, lr}
   28352:	4604      	mov	r4, r0
   28354:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   28356:	f008 f8b8 	bl	304ca <k_is_in_isr>
   2835a:	b948      	cbnz	r0, 28370 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2835c:	4b05      	ldr	r3, [pc, #20]	; (28374 <z_thread_aligned_alloc+0x24>)
   2835e:	689b      	ldr	r3, [r3, #8]
   28360:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   28364:	b118      	cbz	r0, 2836e <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   28366:	462a      	mov	r2, r5
   28368:	4621      	mov	r1, r4
   2836a:	f7ff ffbd 	bl	282e8 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   2836e:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   28370:	2000      	movs	r0, #0
	return ret;
   28372:	e7fc      	b.n	2836e <z_thread_aligned_alloc+0x1e>
   28374:	200035ac 	.word	0x200035ac

00028378 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   28378:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2837a:	4a03      	ldr	r2, [pc, #12]	; (28388 <boot_banner+0x10>)
   2837c:	4903      	ldr	r1, [pc, #12]	; (2838c <boot_banner+0x14>)
   2837e:	4804      	ldr	r0, [pc, #16]	; (28390 <boot_banner+0x18>)
   28380:	f003 fee2 	bl	2c148 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   28384:	bd08      	pop	{r3, pc}
   28386:	bf00      	nop
   28388:	00036484 	.word	0x00036484
   2838c:	00036508 	.word	0x00036508
   28390:	00036518 	.word	0x00036518

00028394 <nrf_cc3xx_platform_init>:
   28394:	b510      	push	{r4, lr}
   28396:	4c0c      	ldr	r4, [pc, #48]	; (283c8 <nrf_cc3xx_platform_init+0x34>)
   28398:	6823      	ldr	r3, [r4, #0]
   2839a:	b113      	cbz	r3, 283a2 <nrf_cc3xx_platform_init+0xe>
   2839c:	4b0b      	ldr	r3, [pc, #44]	; (283cc <nrf_cc3xx_platform_init+0x38>)
   2839e:	681b      	ldr	r3, [r3, #0]
   283a0:	b92b      	cbnz	r3, 283ae <nrf_cc3xx_platform_init+0x1a>
   283a2:	f000 fe73 	bl	2908c <CC_LibInit>
   283a6:	b930      	cbnz	r0, 283b6 <nrf_cc3xx_platform_init+0x22>
   283a8:	4b08      	ldr	r3, [pc, #32]	; (283cc <nrf_cc3xx_platform_init+0x38>)
   283aa:	2201      	movs	r2, #1
   283ac:	601a      	str	r2, [r3, #0]
   283ae:	2301      	movs	r3, #1
   283b0:	6023      	str	r3, [r4, #0]
   283b2:	2000      	movs	r0, #0
   283b4:	bd10      	pop	{r4, pc}
   283b6:	3801      	subs	r0, #1
   283b8:	2806      	cmp	r0, #6
   283ba:	d901      	bls.n	283c0 <nrf_cc3xx_platform_init+0x2c>
   283bc:	4804      	ldr	r0, [pc, #16]	; (283d0 <nrf_cc3xx_platform_init+0x3c>)
   283be:	bd10      	pop	{r4, pc}
   283c0:	4b04      	ldr	r3, [pc, #16]	; (283d4 <nrf_cc3xx_platform_init+0x40>)
   283c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   283c6:	bd10      	pop	{r4, pc}
   283c8:	20003610 	.word	0x20003610
   283cc:	20003614 	.word	0x20003614
   283d0:	ffff8ffe 	.word	0xffff8ffe
   283d4:	00036540 	.word	0x00036540

000283d8 <nrf_cc3xx_platform_abort>:
   283d8:	f3bf 8f4f 	dsb	sy
   283dc:	4905      	ldr	r1, [pc, #20]	; (283f4 <nrf_cc3xx_platform_abort+0x1c>)
   283de:	4b06      	ldr	r3, [pc, #24]	; (283f8 <nrf_cc3xx_platform_abort+0x20>)
   283e0:	68ca      	ldr	r2, [r1, #12]
   283e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   283e6:	4313      	orrs	r3, r2
   283e8:	60cb      	str	r3, [r1, #12]
   283ea:	f3bf 8f4f 	dsb	sy
   283ee:	bf00      	nop
   283f0:	e7fd      	b.n	283ee <nrf_cc3xx_platform_abort+0x16>
   283f2:	bf00      	nop
   283f4:	e000ed00 	.word	0xe000ed00
   283f8:	05fa0004 	.word	0x05fa0004

000283fc <CC_PalAbort>:
   283fc:	b4f0      	push	{r4, r5, r6, r7}
   283fe:	4f09      	ldr	r7, [pc, #36]	; (28424 <CC_PalAbort+0x28>)
   28400:	4e09      	ldr	r6, [pc, #36]	; (28428 <CC_PalAbort+0x2c>)
   28402:	4c0a      	ldr	r4, [pc, #40]	; (2842c <CC_PalAbort+0x30>)
   28404:	4a0a      	ldr	r2, [pc, #40]	; (28430 <CC_PalAbort+0x34>)
   28406:	4d0b      	ldr	r5, [pc, #44]	; (28434 <CC_PalAbort+0x38>)
   28408:	490b      	ldr	r1, [pc, #44]	; (28438 <CC_PalAbort+0x3c>)
   2840a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   2840e:	603b      	str	r3, [r7, #0]
   28410:	6852      	ldr	r2, [r2, #4]
   28412:	6033      	str	r3, [r6, #0]
   28414:	6023      	str	r3, [r4, #0]
   28416:	2400      	movs	r4, #0
   28418:	602b      	str	r3, [r5, #0]
   2841a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   2841e:	bcf0      	pop	{r4, r5, r6, r7}
   28420:	4710      	bx	r2
   28422:	bf00      	nop
   28424:	5002b400 	.word	0x5002b400
   28428:	5002b404 	.word	0x5002b404
   2842c:	5002b408 	.word	0x5002b408
   28430:	20000870 	.word	0x20000870
   28434:	5002b40c 	.word	0x5002b40c
   28438:	5002a000 	.word	0x5002a000

0002843c <nrf_cc3xx_platform_set_abort>:
   2843c:	e9d0 1200 	ldrd	r1, r2, [r0]
   28440:	4b01      	ldr	r3, [pc, #4]	; (28448 <nrf_cc3xx_platform_set_abort+0xc>)
   28442:	e9c3 1200 	strd	r1, r2, [r3]
   28446:	4770      	bx	lr
   28448:	20000870 	.word	0x20000870

0002844c <nrf_cc3xx_platform_ctr_drbg_init>:
   2844c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28450:	4c15      	ldr	r4, [pc, #84]	; (284a8 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   28452:	f8df 805c 	ldr.w	r8, [pc, #92]	; 284b0 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   28456:	2800      	cmp	r0, #0
   28458:	bf18      	it	ne
   2845a:	4604      	movne	r4, r0
   2845c:	b083      	sub	sp, #12
   2845e:	6820      	ldr	r0, [r4, #0]
   28460:	4540      	cmp	r0, r8
   28462:	d01d      	beq.n	284a0 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   28464:	460d      	mov	r5, r1
   28466:	4620      	mov	r0, r4
   28468:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   2846c:	f104 0904 	add.w	r9, r4, #4
   28470:	4616      	mov	r6, r2
   28472:	f504 778c 	add.w	r7, r4, #280	; 0x118
   28476:	f000 f8d3 	bl	28620 <mbedtls_platform_zeroize>
   2847a:	4648      	mov	r0, r9
   2847c:	f000 fcf2 	bl	28e64 <cc_mbedtls_entropy_init>
   28480:	4638      	mov	r0, r7
   28482:	f000 fb1f 	bl	28ac4 <cc_mbedtls_ctr_drbg_init>
   28486:	4909      	ldr	r1, [pc, #36]	; (284ac <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   28488:	9600      	str	r6, [sp, #0]
   2848a:	464a      	mov	r2, r9
   2848c:	4638      	mov	r0, r7
   2848e:	462b      	mov	r3, r5
   28490:	f000 fb2e 	bl	28af0 <cc_mbedtls_ctr_drbg_seed>
   28494:	b908      	cbnz	r0, 2849a <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   28496:	f8c4 8000 	str.w	r8, [r4]
   2849a:	b003      	add	sp, #12
   2849c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   284a0:	2000      	movs	r0, #0
   284a2:	b003      	add	sp, #12
   284a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   284a8:	20003ffc 	.word	0x20003ffc
   284ac:	00028ee1 	.word	0x00028ee1
   284b0:	5ac9bca5 	.word	0x5ac9bca5

000284b4 <nrf_cc3xx_platform_ctr_drbg_get>:
   284b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   284b6:	4c0d      	ldr	r4, [pc, #52]	; (284ec <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   284b8:	4e0d      	ldr	r6, [pc, #52]	; (284f0 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   284ba:	2800      	cmp	r0, #0
   284bc:	bf08      	it	eq
   284be:	4620      	moveq	r0, r4
   284c0:	b083      	sub	sp, #12
   284c2:	6807      	ldr	r7, [r0, #0]
   284c4:	42b7      	cmp	r7, r6
   284c6:	d10e      	bne.n	284e6 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   284c8:	2600      	movs	r6, #0
   284ca:	461d      	mov	r5, r3
   284cc:	f500 708c 	add.w	r0, r0, #280	; 0x118
   284d0:	9600      	str	r6, [sp, #0]
   284d2:	4633      	mov	r3, r6
   284d4:	4614      	mov	r4, r2
   284d6:	f000 fb57 	bl	28b88 <cc_mbedtls_ctr_drbg_random_with_add>
   284da:	2800      	cmp	r0, #0
   284dc:	bf18      	it	ne
   284de:	4634      	movne	r4, r6
   284e0:	602c      	str	r4, [r5, #0]
   284e2:	b003      	add	sp, #12
   284e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   284e6:	4803      	ldr	r0, [pc, #12]	; (284f4 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   284e8:	e7fb      	b.n	284e2 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   284ea:	bf00      	nop
   284ec:	20003ffc 	.word	0x20003ffc
   284f0:	5ac9bca5 	.word	0x5ac9bca5
   284f4:	ffff8fe8 	.word	0xffff8fe8

000284f8 <mutex_free>:
   284f8:	b510      	push	{r4, lr}
   284fa:	4604      	mov	r4, r0
   284fc:	b130      	cbz	r0, 2850c <mutex_free+0x14>
   284fe:	6863      	ldr	r3, [r4, #4]
   28500:	06db      	lsls	r3, r3, #27
   28502:	d502      	bpl.n	2850a <mutex_free+0x12>
   28504:	2300      	movs	r3, #0
   28506:	6023      	str	r3, [r4, #0]
   28508:	6063      	str	r3, [r4, #4]
   2850a:	bd10      	pop	{r4, pc}
   2850c:	4b02      	ldr	r3, [pc, #8]	; (28518 <mutex_free+0x20>)
   2850e:	4803      	ldr	r0, [pc, #12]	; (2851c <mutex_free+0x24>)
   28510:	685b      	ldr	r3, [r3, #4]
   28512:	4798      	blx	r3
   28514:	e7f3      	b.n	284fe <mutex_free+0x6>
   28516:	bf00      	nop
   28518:	20000870 	.word	0x20000870
   2851c:	0003655c 	.word	0x0003655c

00028520 <mutex_unlock>:
   28520:	b168      	cbz	r0, 2853e <mutex_unlock+0x1e>
   28522:	6843      	ldr	r3, [r0, #4]
   28524:	b13b      	cbz	r3, 28536 <mutex_unlock+0x16>
   28526:	06db      	lsls	r3, r3, #27
   28528:	d507      	bpl.n	2853a <mutex_unlock+0x1a>
   2852a:	f3bf 8f5f 	dmb	sy
   2852e:	2300      	movs	r3, #0
   28530:	6003      	str	r3, [r0, #0]
   28532:	4618      	mov	r0, r3
   28534:	4770      	bx	lr
   28536:	4803      	ldr	r0, [pc, #12]	; (28544 <mutex_unlock+0x24>)
   28538:	4770      	bx	lr
   2853a:	4803      	ldr	r0, [pc, #12]	; (28548 <mutex_unlock+0x28>)
   2853c:	4770      	bx	lr
   2853e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   28542:	4770      	bx	lr
   28544:	ffff8fea 	.word	0xffff8fea
   28548:	ffff8fe9 	.word	0xffff8fe9

0002854c <mutex_init>:
   2854c:	b510      	push	{r4, lr}
   2854e:	4604      	mov	r4, r0
   28550:	b120      	cbz	r0, 2855c <mutex_init+0x10>
   28552:	2200      	movs	r2, #0
   28554:	2311      	movs	r3, #17
   28556:	6022      	str	r2, [r4, #0]
   28558:	6063      	str	r3, [r4, #4]
   2855a:	bd10      	pop	{r4, pc}
   2855c:	4801      	ldr	r0, [pc, #4]	; (28564 <mutex_init+0x18>)
   2855e:	f7ff ff4d 	bl	283fc <CC_PalAbort>
   28562:	e7f6      	b.n	28552 <mutex_init+0x6>
   28564:	00036584 	.word	0x00036584

00028568 <mutex_lock>:
   28568:	b1c0      	cbz	r0, 2859c <mutex_lock+0x34>
   2856a:	6843      	ldr	r3, [r0, #4]
   2856c:	b1a3      	cbz	r3, 28598 <mutex_lock+0x30>
   2856e:	06db      	lsls	r3, r3, #27
   28570:	d510      	bpl.n	28594 <mutex_lock+0x2c>
   28572:	2201      	movs	r2, #1
   28574:	f3bf 8f5b 	dmb	ish
   28578:	e850 3f00 	ldrex	r3, [r0]
   2857c:	e840 2100 	strex	r1, r2, [r0]
   28580:	2900      	cmp	r1, #0
   28582:	d1f9      	bne.n	28578 <mutex_lock+0x10>
   28584:	f3bf 8f5b 	dmb	ish
   28588:	2b01      	cmp	r3, #1
   2858a:	d0f3      	beq.n	28574 <mutex_lock+0xc>
   2858c:	f3bf 8f5f 	dmb	sy
   28590:	2000      	movs	r0, #0
   28592:	4770      	bx	lr
   28594:	4803      	ldr	r0, [pc, #12]	; (285a4 <mutex_lock+0x3c>)
   28596:	4770      	bx	lr
   28598:	4803      	ldr	r0, [pc, #12]	; (285a8 <mutex_lock+0x40>)
   2859a:	4770      	bx	lr
   2859c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   285a0:	4770      	bx	lr
   285a2:	bf00      	nop
   285a4:	ffff8fe9 	.word	0xffff8fe9
   285a8:	ffff8fea 	.word	0xffff8fea

000285ac <nrf_cc3xx_platform_set_mutexes>:
   285ac:	b570      	push	{r4, r5, r6, lr}
   285ae:	e9d0 2300 	ldrd	r2, r3, [r0]
   285b2:	4c13      	ldr	r4, [pc, #76]	; (28600 <nrf_cc3xx_platform_set_mutexes+0x54>)
   285b4:	4d13      	ldr	r5, [pc, #76]	; (28604 <nrf_cc3xx_platform_set_mutexes+0x58>)
   285b6:	e9c4 2300 	strd	r2, r3, [r4]
   285ba:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   285be:	e9c4 6302 	strd	r6, r3, [r4, #8]
   285c2:	4b11      	ldr	r3, [pc, #68]	; (28608 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   285c4:	6808      	ldr	r0, [r1, #0]
   285c6:	6018      	str	r0, [r3, #0]
   285c8:	6848      	ldr	r0, [r1, #4]
   285ca:	6058      	str	r0, [r3, #4]
   285cc:	6888      	ldr	r0, [r1, #8]
   285ce:	6098      	str	r0, [r3, #8]
   285d0:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   285d4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   285d8:	60de      	str	r6, [r3, #12]
   285da:	6118      	str	r0, [r3, #16]
   285dc:	06cb      	lsls	r3, r1, #27
   285de:	d50d      	bpl.n	285fc <nrf_cc3xx_platform_set_mutexes+0x50>
   285e0:	2300      	movs	r3, #0
   285e2:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   285e6:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   285ea:	f505 7088 	add.w	r0, r5, #272	; 0x110
   285ee:	4790      	blx	r2
   285f0:	6823      	ldr	r3, [r4, #0]
   285f2:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   285f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   285fa:	4718      	bx	r3
   285fc:	bd70      	pop	{r4, r5, r6, pc}
   285fe:	bf00      	nop
   28600:	20000880 	.word	0x20000880
   28604:	20003ffc 	.word	0x20003ffc
   28608:	20000890 	.word	0x20000890

0002860c <mbedtls_zeroize_internal>:
   2860c:	b138      	cbz	r0, 2861e <mbedtls_zeroize_internal+0x12>
   2860e:	b131      	cbz	r1, 2861e <mbedtls_zeroize_internal+0x12>
   28610:	4401      	add	r1, r0
   28612:	2200      	movs	r2, #0
   28614:	4603      	mov	r3, r0
   28616:	3001      	adds	r0, #1
   28618:	4281      	cmp	r1, r0
   2861a:	701a      	strb	r2, [r3, #0]
   2861c:	d1fa      	bne.n	28614 <mbedtls_zeroize_internal+0x8>
   2861e:	4770      	bx	lr

00028620 <mbedtls_platform_zeroize>:
   28620:	b138      	cbz	r0, 28632 <mbedtls_platform_zeroize+0x12>
   28622:	b131      	cbz	r1, 28632 <mbedtls_platform_zeroize+0x12>
   28624:	4401      	add	r1, r0
   28626:	2200      	movs	r2, #0
   28628:	4603      	mov	r3, r0
   2862a:	3001      	adds	r0, #1
   2862c:	4288      	cmp	r0, r1
   2862e:	701a      	strb	r2, [r3, #0]
   28630:	d1fa      	bne.n	28628 <mbedtls_platform_zeroize+0x8>
   28632:	4770      	bx	lr

00028634 <block_cipher_df>:
   28634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28638:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   2863c:	b0b1      	sub	sp, #196	; 0xc4
   2863e:	f200 812e 	bhi.w	2889e <block_cipher_df+0x26a>
   28642:	f8df 926c 	ldr.w	r9, [pc, #620]	; 288b0 <block_cipher_df+0x27c>
   28646:	4614      	mov	r4, r2
   28648:	460d      	mov	r5, r1
   2864a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   2864e:	2100      	movs	r1, #0
   28650:	4682      	mov	sl, r0
   28652:	4648      	mov	r0, r9
   28654:	f008 f954 	bl	30900 <memset>
   28658:	a813      	add	r0, sp, #76	; 0x4c
   2865a:	f001 f9e5 	bl	29a28 <cc_mbedtls_aes_init>
   2865e:	2600      	movs	r6, #0
   28660:	4629      	mov	r1, r5
   28662:	2320      	movs	r3, #32
   28664:	ba65      	rev16	r5, r4
   28666:	4622      	mov	r2, r4
   28668:	f109 0018 	add.w	r0, r9, #24
   2866c:	f8a9 5012 	strh.w	r5, [r9, #18]
   28670:	f889 3017 	strb.w	r3, [r9, #23]
   28674:	f8a9 6010 	strh.w	r6, [r9, #16]
   28678:	f008 f91a 	bl	308b0 <memcpy>
   2867c:	eb09 0304 	add.w	r3, r9, r4
   28680:	2280      	movs	r2, #128	; 0x80
   28682:	4d88      	ldr	r5, [pc, #544]	; (288a4 <block_cipher_df+0x270>)
   28684:	761a      	strb	r2, [r3, #24]
   28686:	4b88      	ldr	r3, [pc, #544]	; (288a8 <block_cipher_df+0x274>)
   28688:	9503      	str	r5, [sp, #12]
   2868a:	9304      	str	r3, [sp, #16]
   2868c:	a813      	add	r0, sp, #76	; 0x4c
   2868e:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   28692:	a903      	add	r1, sp, #12
   28694:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   28698:	e9cd 5305 	strd	r5, r3, [sp, #20]
   2869c:	f001 f9da 	bl	29a54 <cc_mbedtls_aes_setkey_enc>
   286a0:	4680      	mov	r8, r0
   286a2:	2800      	cmp	r0, #0
   286a4:	f040 80da 	bne.w	2885c <block_cipher_df+0x228>
   286a8:	f104 0319 	add.w	r3, r4, #25
   286ac:	9301      	str	r3, [sp, #4]
   286ae:	af07      	add	r7, sp, #28
   286b0:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   286b4:	2210      	movs	r2, #16
   286b6:	2100      	movs	r1, #0
   286b8:	4638      	mov	r0, r7
   286ba:	f008 f921 	bl	30900 <memset>
   286be:	4c7b      	ldr	r4, [pc, #492]	; (288ac <block_cipher_df+0x278>)
   286c0:	9d01      	ldr	r5, [sp, #4]
   286c2:	f89d 601d 	ldrb.w	r6, [sp, #29]
   286c6:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   286ca:	f89d e01c 	ldrb.w	lr, [sp, #28]
   286ce:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   286d2:	f89d c01f 	ldrb.w	ip, [sp, #31]
   286d6:	f89d 001e 	ldrb.w	r0, [sp, #30]
   286da:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   286de:	404e      	eors	r6, r1
   286e0:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   286e4:	f88d 601d 	strb.w	r6, [sp, #29]
   286e8:	ea8e 0303 	eor.w	r3, lr, r3
   286ec:	4050      	eors	r0, r2
   286ee:	ea8c 0101 	eor.w	r1, ip, r1
   286f2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   286f6:	f88d 301c 	strb.w	r3, [sp, #28]
   286fa:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   286fe:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   28702:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   28706:	f88d 001e 	strb.w	r0, [sp, #30]
   2870a:	f88d 101f 	strb.w	r1, [sp, #31]
   2870e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   28712:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   28716:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   2871a:	405a      	eors	r2, r3
   2871c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   28720:	f88d 2020 	strb.w	r2, [sp, #32]
   28724:	ea8c 0606 	eor.w	r6, ip, r6
   28728:	4048      	eors	r0, r1
   2872a:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   2872e:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   28732:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   28736:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   2873a:	ea8e 0303 	eor.w	r3, lr, r3
   2873e:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   28742:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   28746:	ea8c 0101 	eor.w	r1, ip, r1
   2874a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   2874e:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   28752:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   28756:	ea82 020c 	eor.w	r2, r2, ip
   2875a:	4073      	eors	r3, r6
   2875c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   28760:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   28764:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   28768:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   2876c:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   28770:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   28774:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   28778:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   2877c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   28780:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   28784:	ea8e 0202 	eor.w	r2, lr, r2
   28788:	4041      	eors	r1, r0
   2878a:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   2878e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   28792:	4073      	eors	r3, r6
   28794:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   28798:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   2879c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   287a0:	ea8c 0000 	eor.w	r0, ip, r0
   287a4:	4056      	eors	r6, r2
   287a6:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   287aa:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   287ae:	463b      	mov	r3, r7
   287b0:	463a      	mov	r2, r7
   287b2:	2101      	movs	r1, #1
   287b4:	a813      	add	r0, sp, #76	; 0x4c
   287b6:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   287ba:	f001 f965 	bl	29a88 <cc_mbedtls_aes_crypt_ecb>
   287be:	2d10      	cmp	r5, #16
   287c0:	bf94      	ite	ls
   287c2:	1b6d      	subls	r5, r5, r5
   287c4:	3d10      	subhi	r5, #16
   287c6:	2800      	cmp	r0, #0
   287c8:	d167      	bne.n	2889a <block_cipher_df+0x266>
   287ca:	3410      	adds	r4, #16
   287cc:	2d00      	cmp	r5, #0
   287ce:	f47f af78 	bne.w	286c2 <block_cipher_df+0x8e>
   287d2:	eb0b 0008 	add.w	r0, fp, r8
   287d6:	2210      	movs	r2, #16
   287d8:	4639      	mov	r1, r7
   287da:	f008 f869 	bl	308b0 <memcpy>
   287de:	f899 3003 	ldrb.w	r3, [r9, #3]
   287e2:	f108 0810 	add.w	r8, r8, #16
   287e6:	3301      	adds	r3, #1
   287e8:	f1b8 0f20 	cmp.w	r8, #32
   287ec:	f889 3003 	strb.w	r3, [r9, #3]
   287f0:	f47f af60 	bne.w	286b4 <block_cipher_df+0x80>
   287f4:	2280      	movs	r2, #128	; 0x80
   287f6:	4659      	mov	r1, fp
   287f8:	a813      	add	r0, sp, #76	; 0x4c
   287fa:	f001 f92b 	bl	29a54 <cc_mbedtls_aes_setkey_enc>
   287fe:	4680      	mov	r8, r0
   28800:	bb78      	cbnz	r0, 28862 <block_cipher_df+0x22e>
   28802:	f10a 0520 	add.w	r5, sl, #32
   28806:	4654      	mov	r4, sl
   28808:	ab0f      	add	r3, sp, #60	; 0x3c
   2880a:	461a      	mov	r2, r3
   2880c:	2101      	movs	r1, #1
   2880e:	a813      	add	r0, sp, #76	; 0x4c
   28810:	f001 f93a 	bl	29a88 <cc_mbedtls_aes_crypt_ecb>
   28814:	2210      	movs	r2, #16
   28816:	4680      	mov	r8, r0
   28818:	a90f      	add	r1, sp, #60	; 0x3c
   2881a:	4620      	mov	r0, r4
   2881c:	4414      	add	r4, r2
   2881e:	f1b8 0f00 	cmp.w	r8, #0
   28822:	d11e      	bne.n	28862 <block_cipher_df+0x22e>
   28824:	f008 f844 	bl	308b0 <memcpy>
   28828:	42ac      	cmp	r4, r5
   2882a:	d1ed      	bne.n	28808 <block_cipher_df+0x1d4>
   2882c:	a813      	add	r0, sp, #76	; 0x4c
   2882e:	f001 f90b 	bl	29a48 <cc_mbedtls_aes_free>
   28832:	481f      	ldr	r0, [pc, #124]	; (288b0 <block_cipher_df+0x27c>)
   28834:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   28838:	f7ff fef2 	bl	28620 <mbedtls_platform_zeroize>
   2883c:	4658      	mov	r0, fp
   2883e:	2120      	movs	r1, #32
   28840:	f7ff feee 	bl	28620 <mbedtls_platform_zeroize>
   28844:	a803      	add	r0, sp, #12
   28846:	2110      	movs	r1, #16
   28848:	f7ff feea 	bl	28620 <mbedtls_platform_zeroize>
   2884c:	4638      	mov	r0, r7
   2884e:	2110      	movs	r1, #16
   28850:	f7ff fee6 	bl	28620 <mbedtls_platform_zeroize>
   28854:	4640      	mov	r0, r8
   28856:	b031      	add	sp, #196	; 0xc4
   28858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2885c:	af07      	add	r7, sp, #28
   2885e:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   28862:	a813      	add	r0, sp, #76	; 0x4c
   28864:	f001 f8f0 	bl	29a48 <cc_mbedtls_aes_free>
   28868:	4811      	ldr	r0, [pc, #68]	; (288b0 <block_cipher_df+0x27c>)
   2886a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2886e:	f7ff fed7 	bl	28620 <mbedtls_platform_zeroize>
   28872:	4658      	mov	r0, fp
   28874:	2120      	movs	r1, #32
   28876:	f7ff fed3 	bl	28620 <mbedtls_platform_zeroize>
   2887a:	a803      	add	r0, sp, #12
   2887c:	2110      	movs	r1, #16
   2887e:	f7ff fecf 	bl	28620 <mbedtls_platform_zeroize>
   28882:	4638      	mov	r0, r7
   28884:	2110      	movs	r1, #16
   28886:	f7ff fecb 	bl	28620 <mbedtls_platform_zeroize>
   2888a:	4650      	mov	r0, sl
   2888c:	2120      	movs	r1, #32
   2888e:	f7ff fec7 	bl	28620 <mbedtls_platform_zeroize>
   28892:	4640      	mov	r0, r8
   28894:	b031      	add	sp, #196	; 0xc4
   28896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2889a:	4680      	mov	r8, r0
   2889c:	e7e1      	b.n	28862 <block_cipher_df+0x22e>
   2889e:	f06f 0837 	mvn.w	r8, #55	; 0x37
   288a2:	e7f6      	b.n	28892 <block_cipher_df+0x25e>
   288a4:	03020100 	.word	0x03020100
   288a8:	07060504 	.word	0x07060504
   288ac:	20003638 	.word	0x20003638
   288b0:	20003628 	.word	0x20003628

000288b4 <ctr_drbg_update_internal>:
   288b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   288b8:	b088      	sub	sp, #32
   288ba:	4604      	mov	r4, r0
   288bc:	2220      	movs	r2, #32
   288be:	460d      	mov	r5, r1
   288c0:	4668      	mov	r0, sp
   288c2:	2100      	movs	r1, #0
   288c4:	eb04 0802 	add.w	r8, r4, r2
   288c8:	f008 f81a 	bl	30900 <memset>
   288cc:	466e      	mov	r6, sp
   288ce:	7be2      	ldrb	r2, [r4, #15]
   288d0:	3201      	adds	r2, #1
   288d2:	b2d2      	uxtb	r2, r2
   288d4:	73e2      	strb	r2, [r4, #15]
   288d6:	2a00      	cmp	r2, #0
   288d8:	d14d      	bne.n	28976 <ctr_drbg_update_internal+0xc2>
   288da:	7ba2      	ldrb	r2, [r4, #14]
   288dc:	3201      	adds	r2, #1
   288de:	b2d2      	uxtb	r2, r2
   288e0:	73a2      	strb	r2, [r4, #14]
   288e2:	2a00      	cmp	r2, #0
   288e4:	d147      	bne.n	28976 <ctr_drbg_update_internal+0xc2>
   288e6:	7b63      	ldrb	r3, [r4, #13]
   288e8:	3301      	adds	r3, #1
   288ea:	b2db      	uxtb	r3, r3
   288ec:	7363      	strb	r3, [r4, #13]
   288ee:	2b00      	cmp	r3, #0
   288f0:	d141      	bne.n	28976 <ctr_drbg_update_internal+0xc2>
   288f2:	7b23      	ldrb	r3, [r4, #12]
   288f4:	3301      	adds	r3, #1
   288f6:	b2db      	uxtb	r3, r3
   288f8:	7323      	strb	r3, [r4, #12]
   288fa:	2b00      	cmp	r3, #0
   288fc:	d13b      	bne.n	28976 <ctr_drbg_update_internal+0xc2>
   288fe:	7ae3      	ldrb	r3, [r4, #11]
   28900:	3301      	adds	r3, #1
   28902:	b2db      	uxtb	r3, r3
   28904:	72e3      	strb	r3, [r4, #11]
   28906:	2b00      	cmp	r3, #0
   28908:	d135      	bne.n	28976 <ctr_drbg_update_internal+0xc2>
   2890a:	7aa3      	ldrb	r3, [r4, #10]
   2890c:	3301      	adds	r3, #1
   2890e:	b2db      	uxtb	r3, r3
   28910:	72a3      	strb	r3, [r4, #10]
   28912:	2b00      	cmp	r3, #0
   28914:	d12f      	bne.n	28976 <ctr_drbg_update_internal+0xc2>
   28916:	7a63      	ldrb	r3, [r4, #9]
   28918:	3301      	adds	r3, #1
   2891a:	b2db      	uxtb	r3, r3
   2891c:	7263      	strb	r3, [r4, #9]
   2891e:	bb53      	cbnz	r3, 28976 <ctr_drbg_update_internal+0xc2>
   28920:	7a23      	ldrb	r3, [r4, #8]
   28922:	3301      	adds	r3, #1
   28924:	b2db      	uxtb	r3, r3
   28926:	7223      	strb	r3, [r4, #8]
   28928:	bb2b      	cbnz	r3, 28976 <ctr_drbg_update_internal+0xc2>
   2892a:	79e3      	ldrb	r3, [r4, #7]
   2892c:	3301      	adds	r3, #1
   2892e:	b2db      	uxtb	r3, r3
   28930:	71e3      	strb	r3, [r4, #7]
   28932:	bb03      	cbnz	r3, 28976 <ctr_drbg_update_internal+0xc2>
   28934:	79a3      	ldrb	r3, [r4, #6]
   28936:	3301      	adds	r3, #1
   28938:	b2db      	uxtb	r3, r3
   2893a:	71a3      	strb	r3, [r4, #6]
   2893c:	b9db      	cbnz	r3, 28976 <ctr_drbg_update_internal+0xc2>
   2893e:	7963      	ldrb	r3, [r4, #5]
   28940:	3301      	adds	r3, #1
   28942:	b2db      	uxtb	r3, r3
   28944:	7163      	strb	r3, [r4, #5]
   28946:	b9b3      	cbnz	r3, 28976 <ctr_drbg_update_internal+0xc2>
   28948:	7923      	ldrb	r3, [r4, #4]
   2894a:	3301      	adds	r3, #1
   2894c:	b2db      	uxtb	r3, r3
   2894e:	7123      	strb	r3, [r4, #4]
   28950:	b98b      	cbnz	r3, 28976 <ctr_drbg_update_internal+0xc2>
   28952:	78e3      	ldrb	r3, [r4, #3]
   28954:	3301      	adds	r3, #1
   28956:	b2db      	uxtb	r3, r3
   28958:	70e3      	strb	r3, [r4, #3]
   2895a:	b963      	cbnz	r3, 28976 <ctr_drbg_update_internal+0xc2>
   2895c:	78a3      	ldrb	r3, [r4, #2]
   2895e:	3301      	adds	r3, #1
   28960:	b2db      	uxtb	r3, r3
   28962:	70a3      	strb	r3, [r4, #2]
   28964:	b93b      	cbnz	r3, 28976 <ctr_drbg_update_internal+0xc2>
   28966:	7863      	ldrb	r3, [r4, #1]
   28968:	3301      	adds	r3, #1
   2896a:	b2db      	uxtb	r3, r3
   2896c:	7063      	strb	r3, [r4, #1]
   2896e:	b913      	cbnz	r3, 28976 <ctr_drbg_update_internal+0xc2>
   28970:	7823      	ldrb	r3, [r4, #0]
   28972:	3301      	adds	r3, #1
   28974:	7023      	strb	r3, [r4, #0]
   28976:	4633      	mov	r3, r6
   28978:	4622      	mov	r2, r4
   2897a:	2101      	movs	r1, #1
   2897c:	4640      	mov	r0, r8
   2897e:	f001 f883 	bl	29a88 <cc_mbedtls_aes_crypt_ecb>
   28982:	4607      	mov	r7, r0
   28984:	2800      	cmp	r0, #0
   28986:	d12b      	bne.n	289e0 <ctr_drbg_update_internal+0x12c>
   28988:	3610      	adds	r6, #16
   2898a:	ab08      	add	r3, sp, #32
   2898c:	429e      	cmp	r6, r3
   2898e:	d19e      	bne.n	288ce <ctr_drbg_update_internal+0x1a>
   28990:	9e01      	ldr	r6, [sp, #4]
   28992:	686a      	ldr	r2, [r5, #4]
   28994:	9f00      	ldr	r7, [sp, #0]
   28996:	6829      	ldr	r1, [r5, #0]
   28998:	68ab      	ldr	r3, [r5, #8]
   2899a:	4072      	eors	r2, r6
   2899c:	9e02      	ldr	r6, [sp, #8]
   2899e:	9201      	str	r2, [sp, #4]
   289a0:	4079      	eors	r1, r7
   289a2:	4073      	eors	r3, r6
   289a4:	9100      	str	r1, [sp, #0]
   289a6:	9e03      	ldr	r6, [sp, #12]
   289a8:	68e9      	ldr	r1, [r5, #12]
   289aa:	692a      	ldr	r2, [r5, #16]
   289ac:	9302      	str	r3, [sp, #8]
   289ae:	4071      	eors	r1, r6
   289b0:	9e04      	ldr	r6, [sp, #16]
   289b2:	696b      	ldr	r3, [r5, #20]
   289b4:	9103      	str	r1, [sp, #12]
   289b6:	4056      	eors	r6, r2
   289b8:	9a05      	ldr	r2, [sp, #20]
   289ba:	9604      	str	r6, [sp, #16]
   289bc:	ea83 0102 	eor.w	r1, r3, r2
   289c0:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   289c4:	9d06      	ldr	r5, [sp, #24]
   289c6:	9105      	str	r1, [sp, #20]
   289c8:	4055      	eors	r5, r2
   289ca:	9a07      	ldr	r2, [sp, #28]
   289cc:	4640      	mov	r0, r8
   289ce:	4053      	eors	r3, r2
   289d0:	4669      	mov	r1, sp
   289d2:	2280      	movs	r2, #128	; 0x80
   289d4:	e9cd 5306 	strd	r5, r3, [sp, #24]
   289d8:	f001 f83c 	bl	29a54 <cc_mbedtls_aes_setkey_enc>
   289dc:	4607      	mov	r7, r0
   289de:	b138      	cbz	r0, 289f0 <ctr_drbg_update_internal+0x13c>
   289e0:	4668      	mov	r0, sp
   289e2:	2120      	movs	r1, #32
   289e4:	f7ff fe1c 	bl	28620 <mbedtls_platform_zeroize>
   289e8:	4638      	mov	r0, r7
   289ea:	b008      	add	sp, #32
   289ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   289f0:	2210      	movs	r2, #16
   289f2:	4620      	mov	r0, r4
   289f4:	eb0d 0102 	add.w	r1, sp, r2
   289f8:	f007 ff5a 	bl	308b0 <memcpy>
   289fc:	e7f0      	b.n	289e0 <ctr_drbg_update_internal+0x12c>
   289fe:	bf00      	nop

00028a00 <mbedtls_ctr_drbg_reseed_internal>:
   28a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28a04:	4604      	mov	r4, r0
   28a06:	6980      	ldr	r0, [r0, #24]
   28a08:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   28a0c:	d852      	bhi.n	28ab4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   28a0e:	461d      	mov	r5, r3
   28a10:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   28a14:	42ab      	cmp	r3, r5
   28a16:	d34d      	bcc.n	28ab4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   28a18:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   28a1c:	1a18      	subs	r0, r3, r0
   28a1e:	4290      	cmp	r0, r2
   28a20:	4616      	mov	r6, r2
   28a22:	d347      	bcc.n	28ab4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   28a24:	f8df 9098 	ldr.w	r9, [pc, #152]	; 28ac0 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   28a28:	f44f 72c0 	mov.w	r2, #384	; 0x180
   28a2c:	460f      	mov	r7, r1
   28a2e:	4648      	mov	r0, r9
   28a30:	2100      	movs	r1, #0
   28a32:	f007 ff65 	bl	30900 <memset>
   28a36:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   28a3a:	69a2      	ldr	r2, [r4, #24]
   28a3c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   28a40:	4649      	mov	r1, r9
   28a42:	4798      	blx	r3
   28a44:	2800      	cmp	r0, #0
   28a46:	d138      	bne.n	28aba <mbedtls_ctr_drbg_reseed_internal+0xba>
   28a48:	f8d4 8018 	ldr.w	r8, [r4, #24]
   28a4c:	b13d      	cbz	r5, 28a5e <mbedtls_ctr_drbg_reseed_internal+0x5e>
   28a4e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   28a52:	462a      	mov	r2, r5
   28a54:	eb09 0108 	add.w	r1, r9, r8
   28a58:	4798      	blx	r3
   28a5a:	bb70      	cbnz	r0, 28aba <mbedtls_ctr_drbg_reseed_internal+0xba>
   28a5c:	44a8      	add	r8, r5
   28a5e:	b107      	cbz	r7, 28a62 <mbedtls_ctr_drbg_reseed_internal+0x62>
   28a60:	b9c6      	cbnz	r6, 28a94 <mbedtls_ctr_drbg_reseed_internal+0x94>
   28a62:	4917      	ldr	r1, [pc, #92]	; (28ac0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   28a64:	4642      	mov	r2, r8
   28a66:	4608      	mov	r0, r1
   28a68:	f7ff fde4 	bl	28634 <block_cipher_df>
   28a6c:	4605      	mov	r5, r0
   28a6e:	b138      	cbz	r0, 28a80 <mbedtls_ctr_drbg_reseed_internal+0x80>
   28a70:	4813      	ldr	r0, [pc, #76]	; (28ac0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   28a72:	f44f 71c0 	mov.w	r1, #384	; 0x180
   28a76:	f7ff fdd3 	bl	28620 <mbedtls_platform_zeroize>
   28a7a:	4628      	mov	r0, r5
   28a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28a80:	490f      	ldr	r1, [pc, #60]	; (28ac0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   28a82:	4620      	mov	r0, r4
   28a84:	f7ff ff16 	bl	288b4 <ctr_drbg_update_internal>
   28a88:	4605      	mov	r5, r0
   28a8a:	2800      	cmp	r0, #0
   28a8c:	d1f0      	bne.n	28a70 <mbedtls_ctr_drbg_reseed_internal+0x70>
   28a8e:	2301      	movs	r3, #1
   28a90:	6123      	str	r3, [r4, #16]
   28a92:	e7ed      	b.n	28a70 <mbedtls_ctr_drbg_reseed_internal+0x70>
   28a94:	4639      	mov	r1, r7
   28a96:	eb09 0008 	add.w	r0, r9, r8
   28a9a:	4632      	mov	r2, r6
   28a9c:	f007 ff08 	bl	308b0 <memcpy>
   28aa0:	4907      	ldr	r1, [pc, #28]	; (28ac0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   28aa2:	44b0      	add	r8, r6
   28aa4:	4642      	mov	r2, r8
   28aa6:	4608      	mov	r0, r1
   28aa8:	f7ff fdc4 	bl	28634 <block_cipher_df>
   28aac:	4605      	mov	r5, r0
   28aae:	2800      	cmp	r0, #0
   28ab0:	d1de      	bne.n	28a70 <mbedtls_ctr_drbg_reseed_internal+0x70>
   28ab2:	e7e5      	b.n	28a80 <mbedtls_ctr_drbg_reseed_internal+0x80>
   28ab4:	f06f 0537 	mvn.w	r5, #55	; 0x37
   28ab8:	e7df      	b.n	28a7a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   28aba:	f06f 0533 	mvn.w	r5, #51	; 0x33
   28abe:	e7dc      	b.n	28a7a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   28ac0:	200037c8 	.word	0x200037c8

00028ac4 <cc_mbedtls_ctr_drbg_init>:
   28ac4:	b510      	push	{r4, lr}
   28ac6:	22a4      	movs	r2, #164	; 0xa4
   28ac8:	4604      	mov	r4, r0
   28aca:	2100      	movs	r1, #0
   28acc:	f007 ff18 	bl	30900 <memset>
   28ad0:	4b06      	ldr	r3, [pc, #24]	; (28aec <cc_mbedtls_ctr_drbg_init+0x28>)
   28ad2:	f04f 31ff 	mov.w	r1, #4294967295
   28ad6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   28ada:	6121      	str	r1, [r4, #16]
   28adc:	61e2      	str	r2, [r4, #28]
   28ade:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   28ae2:	681b      	ldr	r3, [r3, #0]
   28ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28ae8:	4718      	bx	r3
   28aea:	bf00      	nop
   28aec:	200008d4 	.word	0x200008d4

00028af0 <cc_mbedtls_ctr_drbg_seed>:
   28af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28af4:	b085      	sub	sp, #20
   28af6:	4605      	mov	r5, r0
   28af8:	460f      	mov	r7, r1
   28afa:	4616      	mov	r6, r2
   28afc:	4668      	mov	r0, sp
   28afe:	2210      	movs	r2, #16
   28b00:	2100      	movs	r1, #0
   28b02:	4699      	mov	r9, r3
   28b04:	f007 fefc 	bl	30900 <memset>
   28b08:	4b1d      	ldr	r3, [pc, #116]	; (28b80 <cc_mbedtls_ctr_drbg_seed+0x90>)
   28b0a:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   28b0e:	681b      	ldr	r3, [r3, #0]
   28b10:	4640      	mov	r0, r8
   28b12:	4798      	blx	r3
   28b14:	b120      	cbz	r0, 28b20 <cc_mbedtls_ctr_drbg_seed+0x30>
   28b16:	4604      	mov	r4, r0
   28b18:	4620      	mov	r0, r4
   28b1a:	b005      	add	sp, #20
   28b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28b20:	f105 0420 	add.w	r4, r5, #32
   28b24:	4620      	mov	r0, r4
   28b26:	f000 ff7f 	bl	29a28 <cc_mbedtls_aes_init>
   28b2a:	69aa      	ldr	r2, [r5, #24]
   28b2c:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   28b30:	692e      	ldr	r6, [r5, #16]
   28b32:	b9e2      	cbnz	r2, 28b6e <cc_mbedtls_ctr_drbg_seed+0x7e>
   28b34:	2220      	movs	r2, #32
   28b36:	2e00      	cmp	r6, #0
   28b38:	61aa      	str	r2, [r5, #24]
   28b3a:	db1f      	blt.n	28b7c <cc_mbedtls_ctr_drbg_seed+0x8c>
   28b3c:	4620      	mov	r0, r4
   28b3e:	4669      	mov	r1, sp
   28b40:	2280      	movs	r2, #128	; 0x80
   28b42:	f000 ff87 	bl	29a54 <cc_mbedtls_aes_setkey_enc>
   28b46:	4604      	mov	r4, r0
   28b48:	b930      	cbnz	r0, 28b58 <cc_mbedtls_ctr_drbg_seed+0x68>
   28b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   28b4c:	4633      	mov	r3, r6
   28b4e:	4649      	mov	r1, r9
   28b50:	4628      	mov	r0, r5
   28b52:	f7ff ff55 	bl	28a00 <mbedtls_ctr_drbg_reseed_internal>
   28b56:	4604      	mov	r4, r0
   28b58:	4b0a      	ldr	r3, [pc, #40]	; (28b84 <cc_mbedtls_ctr_drbg_seed+0x94>)
   28b5a:	4640      	mov	r0, r8
   28b5c:	681b      	ldr	r3, [r3, #0]
   28b5e:	4798      	blx	r3
   28b60:	2800      	cmp	r0, #0
   28b62:	bf18      	it	ne
   28b64:	4604      	movne	r4, r0
   28b66:	4620      	mov	r0, r4
   28b68:	b005      	add	sp, #20
   28b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28b6e:	2e00      	cmp	r6, #0
   28b70:	dae4      	bge.n	28b3c <cc_mbedtls_ctr_drbg_seed+0x4c>
   28b72:	2a17      	cmp	r2, #23
   28b74:	d802      	bhi.n	28b7c <cc_mbedtls_ctr_drbg_seed+0x8c>
   28b76:	1c53      	adds	r3, r2, #1
   28b78:	085e      	lsrs	r6, r3, #1
   28b7a:	e7df      	b.n	28b3c <cc_mbedtls_ctr_drbg_seed+0x4c>
   28b7c:	2600      	movs	r6, #0
   28b7e:	e7dd      	b.n	28b3c <cc_mbedtls_ctr_drbg_seed+0x4c>
   28b80:	200008d8 	.word	0x200008d8
   28b84:	200008dc 	.word	0x200008dc

00028b88 <cc_mbedtls_ctr_drbg_random_with_add>:
   28b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b8c:	b08d      	sub	sp, #52	; 0x34
   28b8e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   28b92:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   28b96:	f200 80e4 	bhi.w	28d62 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   28b9a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   28b9e:	f200 80dd 	bhi.w	28d5c <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   28ba2:	4604      	mov	r4, r0
   28ba4:	4615      	mov	r5, r2
   28ba6:	460e      	mov	r6, r1
   28ba8:	2220      	movs	r2, #32
   28baa:	2100      	movs	r1, #0
   28bac:	a804      	add	r0, sp, #16
   28bae:	461f      	mov	r7, r3
   28bb0:	f007 fea6 	bl	30900 <memset>
   28bb4:	4b6c      	ldr	r3, [pc, #432]	; (28d68 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   28bb6:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   28bba:	681b      	ldr	r3, [r3, #0]
   28bbc:	4648      	mov	r0, r9
   28bbe:	4798      	blx	r3
   28bc0:	4683      	mov	fp, r0
   28bc2:	2800      	cmp	r0, #0
   28bc4:	f040 8093 	bne.w	28cee <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   28bc8:	6922      	ldr	r2, [r4, #16]
   28bca:	69e3      	ldr	r3, [r4, #28]
   28bcc:	429a      	cmp	r2, r3
   28bce:	f300 8092 	bgt.w	28cf6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   28bd2:	6963      	ldr	r3, [r4, #20]
   28bd4:	2b00      	cmp	r3, #0
   28bd6:	f040 808e 	bne.w	28cf6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   28bda:	f1b8 0f00 	cmp.w	r8, #0
   28bde:	f040 80a9 	bne.w	28d34 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   28be2:	f8df a188 	ldr.w	sl, [pc, #392]	; 28d6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   28be6:	466f      	mov	r7, sp
   28be8:	2d00      	cmp	r5, #0
   28bea:	f000 8098 	beq.w	28d1e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   28bee:	f104 0820 	add.w	r8, r4, #32
   28bf2:	466f      	mov	r7, sp
   28bf4:	e00e      	b.n	28c14 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   28bf6:	2d10      	cmp	r5, #16
   28bf8:	46ab      	mov	fp, r5
   28bfa:	bf28      	it	cs
   28bfc:	f04f 0b10 	movcs.w	fp, #16
   28c00:	4630      	mov	r0, r6
   28c02:	465a      	mov	r2, fp
   28c04:	4639      	mov	r1, r7
   28c06:	f007 fe53 	bl	308b0 <memcpy>
   28c0a:	ebb5 050b 	subs.w	r5, r5, fp
   28c0e:	445e      	add	r6, fp
   28c10:	f000 8085 	beq.w	28d1e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   28c14:	7be3      	ldrb	r3, [r4, #15]
   28c16:	3301      	adds	r3, #1
   28c18:	b2db      	uxtb	r3, r3
   28c1a:	73e3      	strb	r3, [r4, #15]
   28c1c:	2b00      	cmp	r3, #0
   28c1e:	d14d      	bne.n	28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c20:	7ba3      	ldrb	r3, [r4, #14]
   28c22:	3301      	adds	r3, #1
   28c24:	b2db      	uxtb	r3, r3
   28c26:	73a3      	strb	r3, [r4, #14]
   28c28:	2b00      	cmp	r3, #0
   28c2a:	d147      	bne.n	28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c2c:	7b63      	ldrb	r3, [r4, #13]
   28c2e:	3301      	adds	r3, #1
   28c30:	b2db      	uxtb	r3, r3
   28c32:	7363      	strb	r3, [r4, #13]
   28c34:	2b00      	cmp	r3, #0
   28c36:	d141      	bne.n	28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c38:	7b23      	ldrb	r3, [r4, #12]
   28c3a:	3301      	adds	r3, #1
   28c3c:	b2db      	uxtb	r3, r3
   28c3e:	7323      	strb	r3, [r4, #12]
   28c40:	2b00      	cmp	r3, #0
   28c42:	d13b      	bne.n	28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c44:	7ae3      	ldrb	r3, [r4, #11]
   28c46:	3301      	adds	r3, #1
   28c48:	b2db      	uxtb	r3, r3
   28c4a:	72e3      	strb	r3, [r4, #11]
   28c4c:	2b00      	cmp	r3, #0
   28c4e:	d135      	bne.n	28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c50:	7aa3      	ldrb	r3, [r4, #10]
   28c52:	3301      	adds	r3, #1
   28c54:	b2db      	uxtb	r3, r3
   28c56:	72a3      	strb	r3, [r4, #10]
   28c58:	2b00      	cmp	r3, #0
   28c5a:	d12f      	bne.n	28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c5c:	7a63      	ldrb	r3, [r4, #9]
   28c5e:	3301      	adds	r3, #1
   28c60:	b2db      	uxtb	r3, r3
   28c62:	7263      	strb	r3, [r4, #9]
   28c64:	bb53      	cbnz	r3, 28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c66:	7a23      	ldrb	r3, [r4, #8]
   28c68:	3301      	adds	r3, #1
   28c6a:	b2db      	uxtb	r3, r3
   28c6c:	7223      	strb	r3, [r4, #8]
   28c6e:	bb2b      	cbnz	r3, 28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c70:	79e3      	ldrb	r3, [r4, #7]
   28c72:	3301      	adds	r3, #1
   28c74:	b2db      	uxtb	r3, r3
   28c76:	71e3      	strb	r3, [r4, #7]
   28c78:	bb03      	cbnz	r3, 28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c7a:	79a3      	ldrb	r3, [r4, #6]
   28c7c:	3301      	adds	r3, #1
   28c7e:	b2db      	uxtb	r3, r3
   28c80:	71a3      	strb	r3, [r4, #6]
   28c82:	b9db      	cbnz	r3, 28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c84:	7963      	ldrb	r3, [r4, #5]
   28c86:	3301      	adds	r3, #1
   28c88:	b2db      	uxtb	r3, r3
   28c8a:	7163      	strb	r3, [r4, #5]
   28c8c:	b9b3      	cbnz	r3, 28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c8e:	7923      	ldrb	r3, [r4, #4]
   28c90:	3301      	adds	r3, #1
   28c92:	b2db      	uxtb	r3, r3
   28c94:	7123      	strb	r3, [r4, #4]
   28c96:	b98b      	cbnz	r3, 28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28c98:	78e3      	ldrb	r3, [r4, #3]
   28c9a:	3301      	adds	r3, #1
   28c9c:	b2db      	uxtb	r3, r3
   28c9e:	70e3      	strb	r3, [r4, #3]
   28ca0:	b963      	cbnz	r3, 28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28ca2:	78a3      	ldrb	r3, [r4, #2]
   28ca4:	3301      	adds	r3, #1
   28ca6:	b2db      	uxtb	r3, r3
   28ca8:	70a3      	strb	r3, [r4, #2]
   28caa:	b93b      	cbnz	r3, 28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28cac:	7863      	ldrb	r3, [r4, #1]
   28cae:	3301      	adds	r3, #1
   28cb0:	b2db      	uxtb	r3, r3
   28cb2:	7063      	strb	r3, [r4, #1]
   28cb4:	b913      	cbnz	r3, 28cbc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   28cb6:	7823      	ldrb	r3, [r4, #0]
   28cb8:	3301      	adds	r3, #1
   28cba:	7023      	strb	r3, [r4, #0]
   28cbc:	463b      	mov	r3, r7
   28cbe:	4622      	mov	r2, r4
   28cc0:	2101      	movs	r1, #1
   28cc2:	4640      	mov	r0, r8
   28cc4:	f000 fee0 	bl	29a88 <cc_mbedtls_aes_crypt_ecb>
   28cc8:	4683      	mov	fp, r0
   28cca:	2800      	cmp	r0, #0
   28ccc:	d093      	beq.n	28bf6 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   28cce:	f8da 3000 	ldr.w	r3, [sl]
   28cd2:	4648      	mov	r0, r9
   28cd4:	4798      	blx	r3
   28cd6:	2120      	movs	r1, #32
   28cd8:	4603      	mov	r3, r0
   28cda:	a804      	add	r0, sp, #16
   28cdc:	2b00      	cmp	r3, #0
   28cde:	bf18      	it	ne
   28ce0:	469b      	movne	fp, r3
   28ce2:	f7ff fc9d 	bl	28620 <mbedtls_platform_zeroize>
   28ce6:	4638      	mov	r0, r7
   28ce8:	2110      	movs	r1, #16
   28cea:	f7ff fc99 	bl	28620 <mbedtls_platform_zeroize>
   28cee:	4658      	mov	r0, fp
   28cf0:	b00d      	add	sp, #52	; 0x34
   28cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28cf6:	4642      	mov	r2, r8
   28cf8:	4639      	mov	r1, r7
   28cfa:	2300      	movs	r3, #0
   28cfc:	4620      	mov	r0, r4
   28cfe:	f7ff fe7f 	bl	28a00 <mbedtls_ctr_drbg_reseed_internal>
   28d02:	f8df a068 	ldr.w	sl, [pc, #104]	; 28d6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   28d06:	2800      	cmp	r0, #0
   28d08:	f43f af6d 	beq.w	28be6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   28d0c:	f8da 3000 	ldr.w	r3, [sl]
   28d10:	4648      	mov	r0, r9
   28d12:	4798      	blx	r3
   28d14:	4683      	mov	fp, r0
   28d16:	2800      	cmp	r0, #0
   28d18:	f43f af65 	beq.w	28be6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   28d1c:	e7e7      	b.n	28cee <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   28d1e:	a904      	add	r1, sp, #16
   28d20:	4620      	mov	r0, r4
   28d22:	f7ff fdc7 	bl	288b4 <ctr_drbg_update_internal>
   28d26:	4683      	mov	fp, r0
   28d28:	2800      	cmp	r0, #0
   28d2a:	d1d0      	bne.n	28cce <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   28d2c:	6923      	ldr	r3, [r4, #16]
   28d2e:	3301      	adds	r3, #1
   28d30:	6123      	str	r3, [r4, #16]
   28d32:	e7cc      	b.n	28cce <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   28d34:	4642      	mov	r2, r8
   28d36:	4639      	mov	r1, r7
   28d38:	a804      	add	r0, sp, #16
   28d3a:	f7ff fc7b 	bl	28634 <block_cipher_df>
   28d3e:	4683      	mov	fp, r0
   28d40:	b118      	cbz	r0, 28d4a <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   28d42:	f8df a028 	ldr.w	sl, [pc, #40]	; 28d6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   28d46:	466f      	mov	r7, sp
   28d48:	e7c1      	b.n	28cce <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   28d4a:	a904      	add	r1, sp, #16
   28d4c:	4620      	mov	r0, r4
   28d4e:	f7ff fdb1 	bl	288b4 <ctr_drbg_update_internal>
   28d52:	4683      	mov	fp, r0
   28d54:	2800      	cmp	r0, #0
   28d56:	f43f af44 	beq.w	28be2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   28d5a:	e7f2      	b.n	28d42 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   28d5c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   28d60:	e7c5      	b.n	28cee <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   28d62:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   28d66:	e7c2      	b.n	28cee <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   28d68:	200008d8 	.word	0x200008d8
   28d6c:	200008dc 	.word	0x200008dc

00028d70 <entropy_update>:
   28d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28d74:	2b20      	cmp	r3, #32
   28d76:	b08b      	sub	sp, #44	; 0x2c
   28d78:	461d      	mov	r5, r3
   28d7a:	4606      	mov	r6, r0
   28d7c:	4689      	mov	r9, r1
   28d7e:	4690      	mov	r8, r2
   28d80:	d826      	bhi.n	28dd0 <entropy_update+0x60>
   28d82:	b2db      	uxtb	r3, r3
   28d84:	af02      	add	r7, sp, #8
   28d86:	6831      	ldr	r1, [r6, #0]
   28d88:	f88d 9004 	strb.w	r9, [sp, #4]
   28d8c:	f88d 3005 	strb.w	r3, [sp, #5]
   28d90:	f106 0904 	add.w	r9, r6, #4
   28d94:	b921      	cbnz	r1, 28da0 <entropy_update+0x30>
   28d96:	4648      	mov	r0, r9
   28d98:	f000 feba 	bl	29b10 <cc_mbedtls_sha256_starts>
   28d9c:	4604      	mov	r4, r0
   28d9e:	b940      	cbnz	r0, 28db2 <entropy_update+0x42>
   28da0:	2301      	movs	r3, #1
   28da2:	6033      	str	r3, [r6, #0]
   28da4:	2202      	movs	r2, #2
   28da6:	a901      	add	r1, sp, #4
   28da8:	4648      	mov	r0, r9
   28daa:	f000 fec5 	bl	29b38 <cc_mbedtls_sha256_update>
   28dae:	4604      	mov	r4, r0
   28db0:	b138      	cbz	r0, 28dc2 <entropy_update+0x52>
   28db2:	4638      	mov	r0, r7
   28db4:	2120      	movs	r1, #32
   28db6:	f7ff fc33 	bl	28620 <mbedtls_platform_zeroize>
   28dba:	4620      	mov	r0, r4
   28dbc:	b00b      	add	sp, #44	; 0x2c
   28dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28dc2:	462a      	mov	r2, r5
   28dc4:	4641      	mov	r1, r8
   28dc6:	4648      	mov	r0, r9
   28dc8:	f000 feb6 	bl	29b38 <cc_mbedtls_sha256_update>
   28dcc:	4604      	mov	r4, r0
   28dce:	e7f0      	b.n	28db2 <entropy_update+0x42>
   28dd0:	af02      	add	r7, sp, #8
   28dd2:	4619      	mov	r1, r3
   28dd4:	4610      	mov	r0, r2
   28dd6:	2300      	movs	r3, #0
   28dd8:	463a      	mov	r2, r7
   28dda:	f000 ffad 	bl	29d38 <cc_mbedtls_sha256>
   28dde:	4604      	mov	r4, r0
   28de0:	2800      	cmp	r0, #0
   28de2:	d1e6      	bne.n	28db2 <entropy_update+0x42>
   28de4:	2320      	movs	r3, #32
   28de6:	461d      	mov	r5, r3
   28de8:	46b8      	mov	r8, r7
   28dea:	e7cc      	b.n	28d86 <entropy_update+0x16>

00028dec <entropy_gather_internal.part.0>:
   28dec:	b5f0      	push	{r4, r5, r6, r7, lr}
   28dee:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   28df2:	b0a7      	sub	sp, #156	; 0x9c
   28df4:	2b00      	cmp	r3, #0
   28df6:	bfd8      	it	le
   28df8:	ae02      	addle	r6, sp, #8
   28dfa:	dd2c      	ble.n	28e56 <entropy_gather_internal.part.0+0x6a>
   28dfc:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   28e00:	4605      	mov	r5, r0
   28e02:	2300      	movs	r3, #0
   28e04:	ae02      	add	r6, sp, #8
   28e06:	9301      	str	r3, [sp, #4]
   28e08:	f1a4 0701 	sub.w	r7, r4, #1
   28e0c:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   28e10:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   28e14:	4631      	mov	r1, r6
   28e16:	ab01      	add	r3, sp, #4
   28e18:	2290      	movs	r2, #144	; 0x90
   28e1a:	47a0      	blx	r4
   28e1c:	fab7 f787 	clz	r7, r7
   28e20:	097f      	lsrs	r7, r7, #5
   28e22:	4604      	mov	r4, r0
   28e24:	b910      	cbnz	r0, 28e2c <entropy_gather_internal.part.0+0x40>
   28e26:	9b01      	ldr	r3, [sp, #4]
   28e28:	b93b      	cbnz	r3, 28e3a <entropy_gather_internal.part.0+0x4e>
   28e2a:	b1a7      	cbz	r7, 28e56 <entropy_gather_internal.part.0+0x6a>
   28e2c:	4630      	mov	r0, r6
   28e2e:	2190      	movs	r1, #144	; 0x90
   28e30:	f7ff fbf6 	bl	28620 <mbedtls_platform_zeroize>
   28e34:	4620      	mov	r0, r4
   28e36:	b027      	add	sp, #156	; 0x9c
   28e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28e3a:	4601      	mov	r1, r0
   28e3c:	4632      	mov	r2, r6
   28e3e:	4628      	mov	r0, r5
   28e40:	f7ff ff96 	bl	28d70 <entropy_update>
   28e44:	b950      	cbnz	r0, 28e5c <entropy_gather_internal.part.0+0x70>
   28e46:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   28e4a:	9a01      	ldr	r2, [sp, #4]
   28e4c:	4413      	add	r3, r2
   28e4e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   28e52:	2f00      	cmp	r7, #0
   28e54:	d1ea      	bne.n	28e2c <entropy_gather_internal.part.0+0x40>
   28e56:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   28e5a:	e7e7      	b.n	28e2c <entropy_gather_internal.part.0+0x40>
   28e5c:	4604      	mov	r4, r0
   28e5e:	4620      	mov	r0, r4
   28e60:	b027      	add	sp, #156	; 0x9c
   28e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028e64 <cc_mbedtls_entropy_init>:
   28e64:	b570      	push	{r4, r5, r6, lr}
   28e66:	2500      	movs	r5, #0
   28e68:	4604      	mov	r4, r0
   28e6a:	4629      	mov	r1, r5
   28e6c:	2214      	movs	r2, #20
   28e6e:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   28e72:	30f8      	adds	r0, #248	; 0xf8
   28e74:	f007 fd44 	bl	30900 <memset>
   28e78:	4b15      	ldr	r3, [pc, #84]	; (28ed0 <cc_mbedtls_entropy_init+0x6c>)
   28e7a:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   28e7e:	681b      	ldr	r3, [r3, #0]
   28e80:	4630      	mov	r0, r6
   28e82:	4798      	blx	r3
   28e84:	4620      	mov	r0, r4
   28e86:	f840 5b04 	str.w	r5, [r0], #4
   28e8a:	f000 fe27 	bl	29adc <cc_mbedtls_sha256_init>
   28e8e:	4b11      	ldr	r3, [pc, #68]	; (28ed4 <cc_mbedtls_entropy_init+0x70>)
   28e90:	4630      	mov	r0, r6
   28e92:	681b      	ldr	r3, [r3, #0]
   28e94:	4798      	blx	r3
   28e96:	b9c8      	cbnz	r0, 28ecc <cc_mbedtls_entropy_init+0x68>
   28e98:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   28e9c:	42ab      	cmp	r3, r5
   28e9e:	dc0f      	bgt.n	28ec0 <cc_mbedtls_entropy_init+0x5c>
   28ea0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   28ea4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   28ea8:	490b      	ldr	r1, [pc, #44]	; (28ed8 <cc_mbedtls_entropy_init+0x74>)
   28eaa:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   28eae:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   28eb2:	3301      	adds	r3, #1
   28eb4:	2020      	movs	r0, #32
   28eb6:	2101      	movs	r1, #1
   28eb8:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   28ebc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   28ec0:	4b06      	ldr	r3, [pc, #24]	; (28edc <cc_mbedtls_entropy_init+0x78>)
   28ec2:	4630      	mov	r0, r6
   28ec4:	681b      	ldr	r3, [r3, #0]
   28ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28eca:	4718      	bx	r3
   28ecc:	bd70      	pop	{r4, r5, r6, pc}
   28ece:	bf00      	nop
   28ed0:	200008d4 	.word	0x200008d4
   28ed4:	200008d8 	.word	0x200008d8
   28ed8:	0002992d 	.word	0x0002992d
   28edc:	200008dc 	.word	0x200008dc

00028ee0 <cc_mbedtls_entropy_func>:
   28ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28ee4:	2a20      	cmp	r2, #32
   28ee6:	b088      	sub	sp, #32
   28ee8:	d876      	bhi.n	28fd8 <cc_mbedtls_entropy_func+0xf8>
   28eea:	4b3d      	ldr	r3, [pc, #244]	; (28fe0 <cc_mbedtls_entropy_func+0x100>)
   28eec:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   28ef0:	681b      	ldr	r3, [r3, #0]
   28ef2:	4604      	mov	r4, r0
   28ef4:	4648      	mov	r0, r9
   28ef6:	4617      	mov	r7, r2
   28ef8:	4688      	mov	r8, r1
   28efa:	4798      	blx	r3
   28efc:	4605      	mov	r5, r0
   28efe:	bba0      	cbnz	r0, 28f6a <cc_mbedtls_entropy_func+0x8a>
   28f00:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   28f04:	f240 1601 	movw	r6, #257	; 0x101
   28f08:	e001      	b.n	28f0e <cc_mbedtls_entropy_func+0x2e>
   28f0a:	3e01      	subs	r6, #1
   28f0c:	d060      	beq.n	28fd0 <cc_mbedtls_entropy_func+0xf0>
   28f0e:	4620      	mov	r0, r4
   28f10:	b37b      	cbz	r3, 28f72 <cc_mbedtls_entropy_func+0x92>
   28f12:	f7ff ff6b 	bl	28dec <entropy_gather_internal.part.0>
   28f16:	4605      	mov	r5, r0
   28f18:	bb68      	cbnz	r0, 28f76 <cc_mbedtls_entropy_func+0x96>
   28f1a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   28f1e:	2b00      	cmp	r3, #0
   28f20:	ddf3      	ble.n	28f0a <cc_mbedtls_entropy_func+0x2a>
   28f22:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   28f26:	4290      	cmp	r0, r2
   28f28:	d3ef      	bcc.n	28f0a <cc_mbedtls_entropy_func+0x2a>
   28f2a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   28f2e:	2a01      	cmp	r2, #1
   28f30:	d1eb      	bne.n	28f0a <cc_mbedtls_entropy_func+0x2a>
   28f32:	281f      	cmp	r0, #31
   28f34:	d9e9      	bls.n	28f0a <cc_mbedtls_entropy_func+0x2a>
   28f36:	466e      	mov	r6, sp
   28f38:	4629      	mov	r1, r5
   28f3a:	2220      	movs	r2, #32
   28f3c:	4630      	mov	r0, r6
   28f3e:	f104 0a04 	add.w	sl, r4, #4
   28f42:	f007 fcdd 	bl	30900 <memset>
   28f46:	4631      	mov	r1, r6
   28f48:	4650      	mov	r0, sl
   28f4a:	f000 fe1f 	bl	29b8c <cc_mbedtls_sha256_finish>
   28f4e:	4605      	mov	r5, r0
   28f50:	b198      	cbz	r0, 28f7a <cc_mbedtls_entropy_func+0x9a>
   28f52:	4630      	mov	r0, r6
   28f54:	2120      	movs	r1, #32
   28f56:	f7ff fb63 	bl	28620 <mbedtls_platform_zeroize>
   28f5a:	4b22      	ldr	r3, [pc, #136]	; (28fe4 <cc_mbedtls_entropy_func+0x104>)
   28f5c:	4648      	mov	r0, r9
   28f5e:	681b      	ldr	r3, [r3, #0]
   28f60:	4798      	blx	r3
   28f62:	2800      	cmp	r0, #0
   28f64:	bf18      	it	ne
   28f66:	f06f 051d 	mvnne.w	r5, #29
   28f6a:	4628      	mov	r0, r5
   28f6c:	b008      	add	sp, #32
   28f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28f72:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   28f76:	466e      	mov	r6, sp
   28f78:	e7eb      	b.n	28f52 <cc_mbedtls_entropy_func+0x72>
   28f7a:	4650      	mov	r0, sl
   28f7c:	f000 fdc2 	bl	29b04 <cc_mbedtls_sha256_free>
   28f80:	4650      	mov	r0, sl
   28f82:	f000 fdab 	bl	29adc <cc_mbedtls_sha256_init>
   28f86:	4629      	mov	r1, r5
   28f88:	4650      	mov	r0, sl
   28f8a:	f000 fdc1 	bl	29b10 <cc_mbedtls_sha256_starts>
   28f8e:	4605      	mov	r5, r0
   28f90:	2800      	cmp	r0, #0
   28f92:	d1de      	bne.n	28f52 <cc_mbedtls_entropy_func+0x72>
   28f94:	4650      	mov	r0, sl
   28f96:	2220      	movs	r2, #32
   28f98:	4631      	mov	r1, r6
   28f9a:	f000 fdcd 	bl	29b38 <cc_mbedtls_sha256_update>
   28f9e:	4605      	mov	r5, r0
   28fa0:	2800      	cmp	r0, #0
   28fa2:	d1d6      	bne.n	28f52 <cc_mbedtls_entropy_func+0x72>
   28fa4:	4603      	mov	r3, r0
   28fa6:	4632      	mov	r2, r6
   28fa8:	2120      	movs	r1, #32
   28faa:	4630      	mov	r0, r6
   28fac:	f000 fec4 	bl	29d38 <cc_mbedtls_sha256>
   28fb0:	4605      	mov	r5, r0
   28fb2:	2800      	cmp	r0, #0
   28fb4:	d1cd      	bne.n	28f52 <cc_mbedtls_entropy_func+0x72>
   28fb6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   28fba:	2b00      	cmp	r3, #0
   28fbc:	bfc4      	itt	gt
   28fbe:	2300      	movgt	r3, #0
   28fc0:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   28fc4:	463a      	mov	r2, r7
   28fc6:	4640      	mov	r0, r8
   28fc8:	4631      	mov	r1, r6
   28fca:	f007 fc71 	bl	308b0 <memcpy>
   28fce:	e7c0      	b.n	28f52 <cc_mbedtls_entropy_func+0x72>
   28fd0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   28fd4:	466e      	mov	r6, sp
   28fd6:	e7bc      	b.n	28f52 <cc_mbedtls_entropy_func+0x72>
   28fd8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   28fdc:	e7c5      	b.n	28f6a <cc_mbedtls_entropy_func+0x8a>
   28fde:	bf00      	nop
   28fe0:	200008d8 	.word	0x200008d8
   28fe4:	200008dc 	.word	0x200008dc

00028fe8 <RndStartupTest.constprop.0>:
   28fe8:	b530      	push	{r4, r5, lr}
   28fea:	b0c3      	sub	sp, #268	; 0x10c
   28fec:	22dc      	movs	r2, #220	; 0xdc
   28fee:	2100      	movs	r1, #0
   28ff0:	a80b      	add	r0, sp, #44	; 0x2c
   28ff2:	f007 fc85 	bl	30900 <memset>
   28ff6:	2228      	movs	r2, #40	; 0x28
   28ff8:	2100      	movs	r1, #0
   28ffa:	a801      	add	r0, sp, #4
   28ffc:	f007 fc80 	bl	30900 <memset>
   29000:	a801      	add	r0, sp, #4
   29002:	f000 fec1 	bl	29d88 <RNG_PLAT_SetUserRngParameters>
   29006:	4604      	mov	r4, r0
   29008:	b110      	cbz	r0, 29010 <RndStartupTest.constprop.0+0x28>
   2900a:	4620      	mov	r0, r4
   2900c:	b043      	add	sp, #268	; 0x10c
   2900e:	bd30      	pop	{r4, r5, pc}
   29010:	4d18      	ldr	r5, [pc, #96]	; (29074 <RndStartupTest.constprop.0+0x8c>)
   29012:	f04f 31ff 	mov.w	r1, #4294967295
   29016:	6828      	ldr	r0, [r5, #0]
   29018:	f000 f93c 	bl	29294 <CC_PalMutexLock>
   2901c:	4604      	mov	r4, r0
   2901e:	b9c0      	cbnz	r0, 29052 <RndStartupTest.constprop.0+0x6a>
   29020:	2000      	movs	r0, #0
   29022:	f000 f967 	bl	292f4 <CC_PalPowerSaveModeSelect>
   29026:	bb00      	cbnz	r0, 2906a <RndStartupTest.constprop.0+0x82>
   29028:	4a13      	ldr	r2, [pc, #76]	; (29078 <RndStartupTest.constprop.0+0x90>)
   2902a:	a901      	add	r1, sp, #4
   2902c:	a80b      	add	r0, sp, #44	; 0x2c
   2902e:	f000 fc6f 	bl	29910 <LLF_RND_RunTrngStartupTest>
   29032:	4604      	mov	r4, r0
   29034:	2001      	movs	r0, #1
   29036:	f000 f95d 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2903a:	b990      	cbnz	r0, 29062 <RndStartupTest.constprop.0+0x7a>
   2903c:	6828      	ldr	r0, [r5, #0]
   2903e:	f000 f931 	bl	292a4 <CC_PalMutexUnlock>
   29042:	2800      	cmp	r0, #0
   29044:	d0e1      	beq.n	2900a <RndStartupTest.constprop.0+0x22>
   29046:	480d      	ldr	r0, [pc, #52]	; (2907c <RndStartupTest.constprop.0+0x94>)
   29048:	f7ff f9d8 	bl	283fc <CC_PalAbort>
   2904c:	4620      	mov	r0, r4
   2904e:	b043      	add	sp, #268	; 0x10c
   29050:	bd30      	pop	{r4, r5, pc}
   29052:	480b      	ldr	r0, [pc, #44]	; (29080 <RndStartupTest.constprop.0+0x98>)
   29054:	f7ff f9d2 	bl	283fc <CC_PalAbort>
   29058:	2c01      	cmp	r4, #1
   2905a:	bf08      	it	eq
   2905c:	2405      	moveq	r4, #5
   2905e:	d0ed      	beq.n	2903c <RndStartupTest.constprop.0+0x54>
   29060:	e7de      	b.n	29020 <RndStartupTest.constprop.0+0x38>
   29062:	4808      	ldr	r0, [pc, #32]	; (29084 <RndStartupTest.constprop.0+0x9c>)
   29064:	f7ff f9ca 	bl	283fc <CC_PalAbort>
   29068:	e7e8      	b.n	2903c <RndStartupTest.constprop.0+0x54>
   2906a:	4807      	ldr	r0, [pc, #28]	; (29088 <RndStartupTest.constprop.0+0xa0>)
   2906c:	f7ff f9c6 	bl	283fc <CC_PalAbort>
   29070:	e7da      	b.n	29028 <RndStartupTest.constprop.0+0x40>
   29072:	bf00      	nop
   29074:	200008d0 	.word	0x200008d0
   29078:	200039b0 	.word	0x200039b0
   2907c:	00036600 	.word	0x00036600
   29080:	000365a8 	.word	0x000365a8
   29084:	000365e0 	.word	0x000365e0
   29088:	000365c0 	.word	0x000365c0

0002908c <CC_LibInit>:
   2908c:	b510      	push	{r4, lr}
   2908e:	b082      	sub	sp, #8
   29090:	f000 f854 	bl	2913c <CC_HalInit>
   29094:	b128      	cbz	r0, 290a2 <CC_LibInit+0x16>
   29096:	f000 f8a3 	bl	291e0 <CC_PalTerminate>
   2909a:	2403      	movs	r4, #3
   2909c:	4620      	mov	r0, r4
   2909e:	b002      	add	sp, #8
   290a0:	bd10      	pop	{r4, pc}
   290a2:	f000 f86f 	bl	29184 <CC_PalInit>
   290a6:	b9d0      	cbnz	r0, 290de <CC_LibInit+0x52>
   290a8:	f000 f924 	bl	292f4 <CC_PalPowerSaveModeSelect>
   290ac:	b9d8      	cbnz	r0, 290e6 <CC_LibInit+0x5a>
   290ae:	4b1e      	ldr	r3, [pc, #120]	; (29128 <CC_LibInit+0x9c>)
   290b0:	681b      	ldr	r3, [r3, #0]
   290b2:	0e1b      	lsrs	r3, r3, #24
   290b4:	2bf0      	cmp	r3, #240	; 0xf0
   290b6:	d10a      	bne.n	290ce <CC_LibInit+0x42>
   290b8:	4a1c      	ldr	r2, [pc, #112]	; (2912c <CC_LibInit+0xa0>)
   290ba:	4b1d      	ldr	r3, [pc, #116]	; (29130 <CC_LibInit+0xa4>)
   290bc:	6812      	ldr	r2, [r2, #0]
   290be:	429a      	cmp	r2, r3
   290c0:	d029      	beq.n	29116 <CC_LibInit+0x8a>
   290c2:	f000 f83d 	bl	29140 <CC_HalTerminate>
   290c6:	2407      	movs	r4, #7
   290c8:	f000 f88a 	bl	291e0 <CC_PalTerminate>
   290cc:	e7e6      	b.n	2909c <CC_LibInit+0x10>
   290ce:	f000 f837 	bl	29140 <CC_HalTerminate>
   290d2:	f000 f885 	bl	291e0 <CC_PalTerminate>
   290d6:	2406      	movs	r4, #6
   290d8:	4620      	mov	r0, r4
   290da:	b002      	add	sp, #8
   290dc:	bd10      	pop	{r4, pc}
   290de:	2404      	movs	r4, #4
   290e0:	4620      	mov	r0, r4
   290e2:	b002      	add	sp, #8
   290e4:	bd10      	pop	{r4, pc}
   290e6:	f000 f82b 	bl	29140 <CC_HalTerminate>
   290ea:	f000 f879 	bl	291e0 <CC_PalTerminate>
   290ee:	f7ff ff7b 	bl	28fe8 <RndStartupTest.constprop.0>
   290f2:	4604      	mov	r4, r0
   290f4:	b958      	cbnz	r0, 2910e <CC_LibInit+0x82>
   290f6:	4602      	mov	r2, r0
   290f8:	4601      	mov	r1, r0
   290fa:	f7ff f9a7 	bl	2844c <nrf_cc3xx_platform_ctr_drbg_init>
   290fe:	b930      	cbnz	r0, 2910e <CC_LibInit+0x82>
   29100:	490c      	ldr	r1, [pc, #48]	; (29134 <CC_LibInit+0xa8>)
   29102:	ab01      	add	r3, sp, #4
   29104:	2268      	movs	r2, #104	; 0x68
   29106:	f7ff f9d5 	bl	284b4 <nrf_cc3xx_platform_ctr_drbg_get>
   2910a:	2800      	cmp	r0, #0
   2910c:	d0c6      	beq.n	2909c <CC_LibInit+0x10>
   2910e:	2405      	movs	r4, #5
   29110:	4620      	mov	r0, r4
   29112:	b002      	add	sp, #8
   29114:	bd10      	pop	{r4, pc}
   29116:	2001      	movs	r0, #1
   29118:	f000 f8ec 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2911c:	2800      	cmp	r0, #0
   2911e:	d1e2      	bne.n	290e6 <CC_LibInit+0x5a>
   29120:	4b05      	ldr	r3, [pc, #20]	; (29138 <CC_LibInit+0xac>)
   29122:	6018      	str	r0, [r3, #0]
   29124:	e7e3      	b.n	290ee <CC_LibInit+0x62>
   29126:	bf00      	nop
   29128:	5002b928 	.word	0x5002b928
   2912c:	5002ba24 	.word	0x5002ba24
   29130:	20e00000 	.word	0x20e00000
   29134:	20003948 	.word	0x20003948
   29138:	5002ba0c 	.word	0x5002ba0c

0002913c <CC_HalInit>:
   2913c:	2000      	movs	r0, #0
   2913e:	4770      	bx	lr

00029140 <CC_HalTerminate>:
   29140:	2000      	movs	r0, #0
   29142:	4770      	bx	lr

00029144 <CC_HalClearInterruptBit>:
   29144:	0543      	lsls	r3, r0, #21
   29146:	d503      	bpl.n	29150 <CC_HalClearInterruptBit+0xc>
   29148:	4b03      	ldr	r3, [pc, #12]	; (29158 <CC_HalClearInterruptBit+0x14>)
   2914a:	f04f 32ff 	mov.w	r2, #4294967295
   2914e:	601a      	str	r2, [r3, #0]
   29150:	4b02      	ldr	r3, [pc, #8]	; (2915c <CC_HalClearInterruptBit+0x18>)
   29152:	6018      	str	r0, [r3, #0]
   29154:	4770      	bx	lr
   29156:	bf00      	nop
   29158:	5002b108 	.word	0x5002b108
   2915c:	5002ba08 	.word	0x5002ba08

00029160 <CC_HalMaskInterrupt>:
   29160:	4b01      	ldr	r3, [pc, #4]	; (29168 <CC_HalMaskInterrupt+0x8>)
   29162:	6018      	str	r0, [r3, #0]
   29164:	4770      	bx	lr
   29166:	bf00      	nop
   29168:	5002ba04 	.word	0x5002ba04

0002916c <CC_HalWaitInterrupt>:
   2916c:	b108      	cbz	r0, 29172 <CC_HalWaitInterrupt+0x6>
   2916e:	f000 b86f 	b.w	29250 <CC_PalWaitInterrupt>
   29172:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   29176:	4770      	bx	lr

00029178 <CC_HalWaitInterruptRND>:
   29178:	b108      	cbz	r0, 2917e <CC_HalWaitInterruptRND+0x6>
   2917a:	f000 b84f 	b.w	2921c <CC_PalWaitInterruptRND>
   2917e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   29182:	4770      	bx	lr

00029184 <CC_PalInit>:
   29184:	b510      	push	{r4, lr}
   29186:	4811      	ldr	r0, [pc, #68]	; (291cc <CC_PalInit+0x48>)
   29188:	f000 f870 	bl	2926c <CC_PalMutexCreate>
   2918c:	b100      	cbz	r0, 29190 <CC_PalInit+0xc>
   2918e:	bd10      	pop	{r4, pc}
   29190:	480f      	ldr	r0, [pc, #60]	; (291d0 <CC_PalInit+0x4c>)
   29192:	f000 f86b 	bl	2926c <CC_PalMutexCreate>
   29196:	2800      	cmp	r0, #0
   29198:	d1f9      	bne.n	2918e <CC_PalInit+0xa>
   2919a:	4c0e      	ldr	r4, [pc, #56]	; (291d4 <CC_PalInit+0x50>)
   2919c:	4620      	mov	r0, r4
   2919e:	f000 f865 	bl	2926c <CC_PalMutexCreate>
   291a2:	2800      	cmp	r0, #0
   291a4:	d1f3      	bne.n	2918e <CC_PalInit+0xa>
   291a6:	4b0c      	ldr	r3, [pc, #48]	; (291d8 <CC_PalInit+0x54>)
   291a8:	480c      	ldr	r0, [pc, #48]	; (291dc <CC_PalInit+0x58>)
   291aa:	601c      	str	r4, [r3, #0]
   291ac:	f000 f85e 	bl	2926c <CC_PalMutexCreate>
   291b0:	4601      	mov	r1, r0
   291b2:	2800      	cmp	r0, #0
   291b4:	d1eb      	bne.n	2918e <CC_PalInit+0xa>
   291b6:	f000 f82d 	bl	29214 <CC_PalDmaInit>
   291ba:	4604      	mov	r4, r0
   291bc:	b108      	cbz	r0, 291c2 <CC_PalInit+0x3e>
   291be:	4620      	mov	r0, r4
   291c0:	bd10      	pop	{r4, pc}
   291c2:	f000 f879 	bl	292b8 <CC_PalPowerSaveModeInit>
   291c6:	4620      	mov	r0, r4
   291c8:	e7fa      	b.n	291c0 <CC_PalInit+0x3c>
   291ca:	bf00      	nop
   291cc:	200008cc 	.word	0x200008cc
   291d0:	200008c0 	.word	0x200008c0
   291d4:	200008c8 	.word	0x200008c8
   291d8:	200008d0 	.word	0x200008d0
   291dc:	200008c4 	.word	0x200008c4

000291e0 <CC_PalTerminate>:
   291e0:	b508      	push	{r3, lr}
   291e2:	4808      	ldr	r0, [pc, #32]	; (29204 <CC_PalTerminate+0x24>)
   291e4:	f000 f84c 	bl	29280 <CC_PalMutexDestroy>
   291e8:	4807      	ldr	r0, [pc, #28]	; (29208 <CC_PalTerminate+0x28>)
   291ea:	f000 f849 	bl	29280 <CC_PalMutexDestroy>
   291ee:	4807      	ldr	r0, [pc, #28]	; (2920c <CC_PalTerminate+0x2c>)
   291f0:	f000 f846 	bl	29280 <CC_PalMutexDestroy>
   291f4:	4806      	ldr	r0, [pc, #24]	; (29210 <CC_PalTerminate+0x30>)
   291f6:	f000 f843 	bl	29280 <CC_PalMutexDestroy>
   291fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   291fe:	f000 b80b 	b.w	29218 <CC_PalDmaTerminate>
   29202:	bf00      	nop
   29204:	200008cc 	.word	0x200008cc
   29208:	200008c0 	.word	0x200008c0
   2920c:	200008c8 	.word	0x200008c8
   29210:	200008c4 	.word	0x200008c4

00029214 <CC_PalDmaInit>:
   29214:	2000      	movs	r0, #0
   29216:	4770      	bx	lr

00029218 <CC_PalDmaTerminate>:
   29218:	4770      	bx	lr
   2921a:	bf00      	nop

0002921c <CC_PalWaitInterruptRND>:
   2921c:	b410      	push	{r4}
   2921e:	4c08      	ldr	r4, [pc, #32]	; (29240 <CC_PalWaitInterruptRND+0x24>)
   29220:	4602      	mov	r2, r0
   29222:	6823      	ldr	r3, [r4, #0]
   29224:	4213      	tst	r3, r2
   29226:	d0fc      	beq.n	29222 <CC_PalWaitInterruptRND+0x6>
   29228:	b121      	cbz	r1, 29234 <CC_PalWaitInterruptRND+0x18>
   2922a:	4b06      	ldr	r3, [pc, #24]	; (29244 <CC_PalWaitInterruptRND+0x28>)
   2922c:	4806      	ldr	r0, [pc, #24]	; (29248 <CC_PalWaitInterruptRND+0x2c>)
   2922e:	681b      	ldr	r3, [r3, #0]
   29230:	600b      	str	r3, [r1, #0]
   29232:	6003      	str	r3, [r0, #0]
   29234:	4b05      	ldr	r3, [pc, #20]	; (2924c <CC_PalWaitInterruptRND+0x30>)
   29236:	601a      	str	r2, [r3, #0]
   29238:	2000      	movs	r0, #0
   2923a:	bc10      	pop	{r4}
   2923c:	4770      	bx	lr
   2923e:	bf00      	nop
   29240:	5002ba00 	.word	0x5002ba00
   29244:	5002b104 	.word	0x5002b104
   29248:	5002b108 	.word	0x5002b108
   2924c:	5002ba08 	.word	0x5002ba08

00029250 <CC_PalWaitInterrupt>:
   29250:	4904      	ldr	r1, [pc, #16]	; (29264 <CC_PalWaitInterrupt+0x14>)
   29252:	4602      	mov	r2, r0
   29254:	680b      	ldr	r3, [r1, #0]
   29256:	421a      	tst	r2, r3
   29258:	d0fc      	beq.n	29254 <CC_PalWaitInterrupt+0x4>
   2925a:	4b03      	ldr	r3, [pc, #12]	; (29268 <CC_PalWaitInterrupt+0x18>)
   2925c:	2000      	movs	r0, #0
   2925e:	601a      	str	r2, [r3, #0]
   29260:	4770      	bx	lr
   29262:	bf00      	nop
   29264:	5002ba00 	.word	0x5002ba00
   29268:	5002ba08 	.word	0x5002ba08

0002926c <CC_PalMutexCreate>:
   2926c:	b508      	push	{r3, lr}
   2926e:	4b03      	ldr	r3, [pc, #12]	; (2927c <CC_PalMutexCreate+0x10>)
   29270:	6802      	ldr	r2, [r0, #0]
   29272:	681b      	ldr	r3, [r3, #0]
   29274:	6810      	ldr	r0, [r2, #0]
   29276:	4798      	blx	r3
   29278:	2000      	movs	r0, #0
   2927a:	bd08      	pop	{r3, pc}
   2927c:	20000880 	.word	0x20000880

00029280 <CC_PalMutexDestroy>:
   29280:	b508      	push	{r3, lr}
   29282:	4b03      	ldr	r3, [pc, #12]	; (29290 <CC_PalMutexDestroy+0x10>)
   29284:	6802      	ldr	r2, [r0, #0]
   29286:	685b      	ldr	r3, [r3, #4]
   29288:	6810      	ldr	r0, [r2, #0]
   2928a:	4798      	blx	r3
   2928c:	2000      	movs	r0, #0
   2928e:	bd08      	pop	{r3, pc}
   29290:	20000880 	.word	0x20000880

00029294 <CC_PalMutexLock>:
   29294:	4b02      	ldr	r3, [pc, #8]	; (292a0 <CC_PalMutexLock+0xc>)
   29296:	6802      	ldr	r2, [r0, #0]
   29298:	689b      	ldr	r3, [r3, #8]
   2929a:	6810      	ldr	r0, [r2, #0]
   2929c:	4718      	bx	r3
   2929e:	bf00      	nop
   292a0:	20000880 	.word	0x20000880

000292a4 <CC_PalMutexUnlock>:
   292a4:	b508      	push	{r3, lr}
   292a6:	4b03      	ldr	r3, [pc, #12]	; (292b4 <CC_PalMutexUnlock+0x10>)
   292a8:	6802      	ldr	r2, [r0, #0]
   292aa:	68db      	ldr	r3, [r3, #12]
   292ac:	6810      	ldr	r0, [r2, #0]
   292ae:	4798      	blx	r3
   292b0:	2000      	movs	r0, #0
   292b2:	bd08      	pop	{r3, pc}
   292b4:	20000880 	.word	0x20000880

000292b8 <CC_PalPowerSaveModeInit>:
   292b8:	b570      	push	{r4, r5, r6, lr}
   292ba:	4c09      	ldr	r4, [pc, #36]	; (292e0 <CC_PalPowerSaveModeInit+0x28>)
   292bc:	4d09      	ldr	r5, [pc, #36]	; (292e4 <CC_PalPowerSaveModeInit+0x2c>)
   292be:	6920      	ldr	r0, [r4, #16]
   292c0:	68ab      	ldr	r3, [r5, #8]
   292c2:	4798      	blx	r3
   292c4:	b118      	cbz	r0, 292ce <CC_PalPowerSaveModeInit+0x16>
   292c6:	4b08      	ldr	r3, [pc, #32]	; (292e8 <CC_PalPowerSaveModeInit+0x30>)
   292c8:	4808      	ldr	r0, [pc, #32]	; (292ec <CC_PalPowerSaveModeInit+0x34>)
   292ca:	685b      	ldr	r3, [r3, #4]
   292cc:	4798      	blx	r3
   292ce:	4a08      	ldr	r2, [pc, #32]	; (292f0 <CC_PalPowerSaveModeInit+0x38>)
   292d0:	68eb      	ldr	r3, [r5, #12]
   292d2:	6920      	ldr	r0, [r4, #16]
   292d4:	2100      	movs	r1, #0
   292d6:	6011      	str	r1, [r2, #0]
   292d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   292dc:	4718      	bx	r3
   292de:	bf00      	nop
   292e0:	20000890 	.word	0x20000890
   292e4:	20000880 	.word	0x20000880
   292e8:	20000870 	.word	0x20000870
   292ec:	00036618 	.word	0x00036618
   292f0:	20003bd0 	.word	0x20003bd0

000292f4 <CC_PalPowerSaveModeSelect>:
   292f4:	b570      	push	{r4, r5, r6, lr}
   292f6:	4d1a      	ldr	r5, [pc, #104]	; (29360 <CC_PalPowerSaveModeSelect+0x6c>)
   292f8:	4e1a      	ldr	r6, [pc, #104]	; (29364 <CC_PalPowerSaveModeSelect+0x70>)
   292fa:	4604      	mov	r4, r0
   292fc:	68b2      	ldr	r2, [r6, #8]
   292fe:	6928      	ldr	r0, [r5, #16]
   29300:	4790      	blx	r2
   29302:	b9f0      	cbnz	r0, 29342 <CC_PalPowerSaveModeSelect+0x4e>
   29304:	b15c      	cbz	r4, 2931e <CC_PalPowerSaveModeSelect+0x2a>
   29306:	4c18      	ldr	r4, [pc, #96]	; (29368 <CC_PalPowerSaveModeSelect+0x74>)
   29308:	6823      	ldr	r3, [r4, #0]
   2930a:	b1ab      	cbz	r3, 29338 <CC_PalPowerSaveModeSelect+0x44>
   2930c:	2b01      	cmp	r3, #1
   2930e:	d01a      	beq.n	29346 <CC_PalPowerSaveModeSelect+0x52>
   29310:	3b01      	subs	r3, #1
   29312:	6023      	str	r3, [r4, #0]
   29314:	6928      	ldr	r0, [r5, #16]
   29316:	68f3      	ldr	r3, [r6, #12]
   29318:	4798      	blx	r3
   2931a:	2000      	movs	r0, #0
   2931c:	bd70      	pop	{r4, r5, r6, pc}
   2931e:	4c12      	ldr	r4, [pc, #72]	; (29368 <CC_PalPowerSaveModeSelect+0x74>)
   29320:	6821      	ldr	r1, [r4, #0]
   29322:	b939      	cbnz	r1, 29334 <CC_PalPowerSaveModeSelect+0x40>
   29324:	4b11      	ldr	r3, [pc, #68]	; (2936c <CC_PalPowerSaveModeSelect+0x78>)
   29326:	4a12      	ldr	r2, [pc, #72]	; (29370 <CC_PalPowerSaveModeSelect+0x7c>)
   29328:	2001      	movs	r0, #1
   2932a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   2932e:	6813      	ldr	r3, [r2, #0]
   29330:	2b00      	cmp	r3, #0
   29332:	d1fc      	bne.n	2932e <CC_PalPowerSaveModeSelect+0x3a>
   29334:	3101      	adds	r1, #1
   29336:	6021      	str	r1, [r4, #0]
   29338:	68f3      	ldr	r3, [r6, #12]
   2933a:	6928      	ldr	r0, [r5, #16]
   2933c:	4798      	blx	r3
   2933e:	2000      	movs	r0, #0
   29340:	bd70      	pop	{r4, r5, r6, pc}
   29342:	480c      	ldr	r0, [pc, #48]	; (29374 <CC_PalPowerSaveModeSelect+0x80>)
   29344:	bd70      	pop	{r4, r5, r6, pc}
   29346:	4a0a      	ldr	r2, [pc, #40]	; (29370 <CC_PalPowerSaveModeSelect+0x7c>)
   29348:	6813      	ldr	r3, [r2, #0]
   2934a:	2b00      	cmp	r3, #0
   2934c:	d1fc      	bne.n	29348 <CC_PalPowerSaveModeSelect+0x54>
   2934e:	4a07      	ldr	r2, [pc, #28]	; (2936c <CC_PalPowerSaveModeSelect+0x78>)
   29350:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   29354:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   29358:	f7ff ff02 	bl	29160 <CC_HalMaskInterrupt>
   2935c:	6823      	ldr	r3, [r4, #0]
   2935e:	e7d7      	b.n	29310 <CC_PalPowerSaveModeSelect+0x1c>
   29360:	20000890 	.word	0x20000890
   29364:	20000880 	.word	0x20000880
   29368:	20003bd0 	.word	0x20003bd0
   2936c:	5002a000 	.word	0x5002a000
   29370:	5002b910 	.word	0x5002b910
   29374:	ffff8fe9 	.word	0xffff8fe9

00029378 <mutex_init>:
   29378:	4b01      	ldr	r3, [pc, #4]	; (29380 <mutex_init+0x8>)
   2937a:	681b      	ldr	r3, [r3, #0]
   2937c:	4718      	bx	r3
   2937e:	bf00      	nop
   29380:	20000880 	.word	0x20000880

00029384 <mutex_lock>:
   29384:	4b01      	ldr	r3, [pc, #4]	; (2938c <mutex_lock+0x8>)
   29386:	689b      	ldr	r3, [r3, #8]
   29388:	4718      	bx	r3
   2938a:	bf00      	nop
   2938c:	20000880 	.word	0x20000880

00029390 <mutex_unlock>:
   29390:	4b01      	ldr	r3, [pc, #4]	; (29398 <mutex_unlock+0x8>)
   29392:	68db      	ldr	r3, [r3, #12]
   29394:	4718      	bx	r3
   29396:	bf00      	nop
   29398:	20000880 	.word	0x20000880

0002939c <startTrngHW>:
   2939c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   293a0:	2800      	cmp	r0, #0
   293a2:	d07b      	beq.n	2949c <startTrngHW+0x100>
   293a4:	460c      	mov	r4, r1
   293a6:	2900      	cmp	r1, #0
   293a8:	d078      	beq.n	2949c <startTrngHW+0x100>
   293aa:	461d      	mov	r5, r3
   293ac:	2b00      	cmp	r3, #0
   293ae:	d075      	beq.n	2949c <startTrngHW+0x100>
   293b0:	4606      	mov	r6, r0
   293b2:	b122      	cbz	r2, 293be <startTrngHW+0x22>
   293b4:	2201      	movs	r2, #1
   293b6:	2300      	movs	r3, #0
   293b8:	602a      	str	r2, [r5, #0]
   293ba:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   293be:	682b      	ldr	r3, [r5, #0]
   293c0:	2b00      	cmp	r3, #0
   293c2:	d067      	beq.n	29494 <startTrngHW+0xf8>
   293c4:	4629      	mov	r1, r5
   293c6:	4620      	mov	r0, r4
   293c8:	f000 fda4 	bl	29f14 <LLF_RND_GetFastestRosc>
   293cc:	4607      	mov	r7, r0
   293ce:	2800      	cmp	r0, #0
   293d0:	d161      	bne.n	29496 <startTrngHW+0xfa>
   293d2:	6828      	ldr	r0, [r5, #0]
   293d4:	4621      	mov	r1, r4
   293d6:	f000 fd7f 	bl	29ed8 <LLF_RND_GetRoscSampleCnt>
   293da:	4607      	mov	r7, r0
   293dc:	2800      	cmp	r0, #0
   293de:	d15a      	bne.n	29496 <startTrngHW+0xfa>
   293e0:	682b      	ldr	r3, [r5, #0]
   293e2:	2b08      	cmp	r3, #8
   293e4:	d069      	beq.n	294ba <startTrngHW+0x11e>
   293e6:	2b04      	cmp	r3, #4
   293e8:	d06a      	beq.n	294c0 <startTrngHW+0x124>
   293ea:	f1a3 0802 	sub.w	r8, r3, #2
   293ee:	fab8 f888 	clz	r8, r8
   293f2:	ea4f 1858 	mov.w	r8, r8, lsr #5
   293f6:	4b34      	ldr	r3, [pc, #208]	; (294c8 <startTrngHW+0x12c>)
   293f8:	4934      	ldr	r1, [pc, #208]	; (294cc <startTrngHW+0x130>)
   293fa:	4a35      	ldr	r2, [pc, #212]	; (294d0 <startTrngHW+0x134>)
   293fc:	2001      	movs	r0, #1
   293fe:	6018      	str	r0, [r3, #0]
   29400:	469c      	mov	ip, r3
   29402:	6008      	str	r0, [r1, #0]
   29404:	f8cc 0000 	str.w	r0, [ip]
   29408:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2940a:	6013      	str	r3, [r2, #0]
   2940c:	6811      	ldr	r1, [r2, #0]
   2940e:	428b      	cmp	r3, r1
   29410:	d1f8      	bne.n	29404 <startTrngHW+0x68>
   29412:	4b30      	ldr	r3, [pc, #192]	; (294d4 <startTrngHW+0x138>)
   29414:	f04f 0900 	mov.w	r9, #0
   29418:	f8c3 9000 	str.w	r9, [r3]
   2941c:	f04f 30ff 	mov.w	r0, #4294967295
   29420:	f7ff fe90 	bl	29144 <CC_HalClearInterruptBit>
   29424:	4b2c      	ldr	r3, [pc, #176]	; (294d8 <startTrngHW+0x13c>)
   29426:	f06f 021b 	mvn.w	r2, #27
   2942a:	601a      	str	r2, [r3, #0]
   2942c:	4648      	mov	r0, r9
   2942e:	f7ff fe97 	bl	29160 <CC_HalMaskInterrupt>
   29432:	4a2a      	ldr	r2, [pc, #168]	; (294dc <startTrngHW+0x140>)
   29434:	4b2a      	ldr	r3, [pc, #168]	; (294e0 <startTrngHW+0x144>)
   29436:	f8c2 8000 	str.w	r8, [r2]
   2943a:	6818      	ldr	r0, [r3, #0]
   2943c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   29440:	f7ff fe8e 	bl	29160 <CC_HalMaskInterrupt>
   29444:	4b27      	ldr	r3, [pc, #156]	; (294e4 <startTrngHW+0x148>)
   29446:	220a      	movs	r2, #10
   29448:	601a      	str	r2, [r3, #0]
   2944a:	9908      	ldr	r1, [sp, #32]
   2944c:	6923      	ldr	r3, [r4, #16]
   2944e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   29450:	2901      	cmp	r1, #1
   29452:	d027      	beq.n	294a4 <startTrngHW+0x108>
   29454:	4924      	ldr	r1, [pc, #144]	; (294e8 <startTrngHW+0x14c>)
   29456:	fba1 1303 	umull	r1, r3, r1, r3
   2945a:	091b      	lsrs	r3, r3, #4
   2945c:	fb03 f302 	mul.w	r3, r3, r2
   29460:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   29464:	4921      	ldr	r1, [pc, #132]	; (294ec <startTrngHW+0x150>)
   29466:	4a1b      	ldr	r2, [pc, #108]	; (294d4 <startTrngHW+0x138>)
   29468:	03db      	lsls	r3, r3, #15
   2946a:	099b      	lsrs	r3, r3, #6
   2946c:	600b      	str	r3, [r1, #0]
   2946e:	2301      	movs	r3, #1
   29470:	6013      	str	r3, [r2, #0]
   29472:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   29476:	682a      	ldr	r2, [r5, #0]
   29478:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2947c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   29480:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   29484:	682a      	ldr	r2, [r5, #0]
   29486:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2948a:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   2948e:	4638      	mov	r0, r7
   29490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29494:	4f16      	ldr	r7, [pc, #88]	; (294f0 <startTrngHW+0x154>)
   29496:	4638      	mov	r0, r7
   29498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2949c:	4f15      	ldr	r7, [pc, #84]	; (294f4 <startTrngHW+0x158>)
   2949e:	4638      	mov	r0, r7
   294a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   294a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   294a8:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   294ac:	3101      	adds	r1, #1
   294ae:	d002      	beq.n	294b6 <startTrngHW+0x11a>
   294b0:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   294b4:	e7ce      	b.n	29454 <startTrngHW+0xb8>
   294b6:	2316      	movs	r3, #22
   294b8:	e7d0      	b.n	2945c <startTrngHW+0xc0>
   294ba:	f04f 0803 	mov.w	r8, #3
   294be:	e79a      	b.n	293f6 <startTrngHW+0x5a>
   294c0:	f04f 0802 	mov.w	r8, #2
   294c4:	e797      	b.n	293f6 <startTrngHW+0x5a>
   294c6:	bf00      	nop
   294c8:	5002b1c4 	.word	0x5002b1c4
   294cc:	5002b140 	.word	0x5002b140
   294d0:	5002b130 	.word	0x5002b130
   294d4:	5002b12c 	.word	0x5002b12c
   294d8:	5002b100 	.word	0x5002b100
   294dc:	5002b10c 	.word	0x5002b10c
   294e0:	5002ba04 	.word	0x5002ba04
   294e4:	5002b138 	.word	0x5002b138
   294e8:	aaaaaaab 	.word	0xaaaaaaab
   294ec:	5002b1d8 	.word	0x5002b1d8
   294f0:	00f10c31 	.word	0x00f10c31
   294f4:	00f10c35 	.word	0x00f10c35

000294f8 <LLF_RND_RepetitionCounterTest.part.0>:
   294f8:	b4f0      	push	{r4, r5, r6, r7}
   294fa:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   294fe:	2400      	movs	r4, #0
   29500:	f10c 3cff 	add.w	ip, ip, #4294967295
   29504:	4626      	mov	r6, r4
   29506:	4627      	mov	r7, r4
   29508:	e006      	b.n	29518 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   2950a:	429f      	cmp	r7, r3
   2950c:	d016      	beq.n	2953c <LLF_RND_RepetitionCounterTest.part.0+0x44>
   2950e:	2601      	movs	r6, #1
   29510:	4565      	cmp	r5, ip
   29512:	d819      	bhi.n	29548 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   29514:	462c      	mov	r4, r5
   29516:	461f      	mov	r7, r3
   29518:	0963      	lsrs	r3, r4, #5
   2951a:	f004 011f 	and.w	r1, r4, #31
   2951e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   29522:	291f      	cmp	r1, #31
   29524:	fa23 f301 	lsr.w	r3, r3, r1
   29528:	f104 0501 	add.w	r5, r4, #1
   2952c:	bf18      	it	ne
   2952e:	f003 0301 	andne.w	r3, r3, #1
   29532:	2c00      	cmp	r4, #0
   29534:	d1e9      	bne.n	2950a <LLF_RND_RepetitionCounterTest.part.0+0x12>
   29536:	2601      	movs	r6, #1
   29538:	4635      	mov	r5, r6
   2953a:	e7eb      	b.n	29514 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   2953c:	3601      	adds	r6, #1
   2953e:	4296      	cmp	r6, r2
   29540:	d1e6      	bne.n	29510 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   29542:	4803      	ldr	r0, [pc, #12]	; (29550 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   29544:	bcf0      	pop	{r4, r5, r6, r7}
   29546:	4770      	bx	lr
   29548:	2000      	movs	r0, #0
   2954a:	bcf0      	pop	{r4, r5, r6, r7}
   2954c:	4770      	bx	lr
   2954e:	bf00      	nop
   29550:	00f10c36 	.word	0x00f10c36

00029554 <LLF_RND_AdaptiveProportionTest>:
   29554:	2800      	cmp	r0, #0
   29556:	d061      	beq.n	2961c <LLF_RND_AdaptiveProportionTest+0xc8>
   29558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2955c:	1e4c      	subs	r4, r1, #1
   2955e:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   29562:	d227      	bcs.n	295b4 <LLF_RND_AdaptiveProportionTest+0x60>
   29564:	b333      	cbz	r3, 295b4 <LLF_RND_AdaptiveProportionTest+0x60>
   29566:	b32a      	cbz	r2, 295b4 <LLF_RND_AdaptiveProportionTest+0x60>
   29568:	00cd      	lsls	r5, r1, #3
   2956a:	2b01      	cmp	r3, #1
   2956c:	f105 3eff 	add.w	lr, r5, #4294967295
   29570:	d030      	beq.n	295d4 <LLF_RND_AdaptiveProportionTest+0x80>
   29572:	2100      	movs	r1, #0
   29574:	468c      	mov	ip, r1
   29576:	460f      	mov	r7, r1
   29578:	460e      	mov	r6, r1
   2957a:	f103 38ff 	add.w	r8, r3, #4294967295
   2957e:	094c      	lsrs	r4, r1, #5
   29580:	f001 051f 	and.w	r5, r1, #31
   29584:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   29588:	2d1f      	cmp	r5, #31
   2958a:	fa24 f405 	lsr.w	r4, r4, r5
   2958e:	bf18      	it	ne
   29590:	f004 0401 	andne.w	r4, r4, #1
   29594:	b921      	cbnz	r1, 295a0 <LLF_RND_AdaptiveProportionTest+0x4c>
   29596:	2601      	movs	r6, #1
   29598:	46b4      	mov	ip, r6
   2959a:	4631      	mov	r1, r6
   2959c:	4627      	mov	r7, r4
   2959e:	e7ee      	b.n	2957e <LLF_RND_AdaptiveProportionTest+0x2a>
   295a0:	42b3      	cmp	r3, r6
   295a2:	d013      	beq.n	295cc <LLF_RND_AdaptiveProportionTest+0x78>
   295a4:	42a7      	cmp	r7, r4
   295a6:	d101      	bne.n	295ac <LLF_RND_AdaptiveProportionTest+0x58>
   295a8:	f10c 0c01 	add.w	ip, ip, #1
   295ac:	4546      	cmp	r6, r8
   295ae:	d104      	bne.n	295ba <LLF_RND_AdaptiveProportionTest+0x66>
   295b0:	4562      	cmp	r2, ip
   295b2:	d202      	bcs.n	295ba <LLF_RND_AdaptiveProportionTest+0x66>
   295b4:	481a      	ldr	r0, [pc, #104]	; (29620 <LLF_RND_AdaptiveProportionTest+0xcc>)
   295b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   295ba:	463c      	mov	r4, r7
   295bc:	3101      	adds	r1, #1
   295be:	458e      	cmp	lr, r1
   295c0:	f106 0601 	add.w	r6, r6, #1
   295c4:	d2ea      	bcs.n	2959c <LLF_RND_AdaptiveProportionTest+0x48>
   295c6:	2000      	movs	r0, #0
   295c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   295cc:	2600      	movs	r6, #0
   295ce:	f04f 0c01 	mov.w	ip, #1
   295d2:	e7f3      	b.n	295bc <LLF_RND_AdaptiveProportionTest+0x68>
   295d4:	2600      	movs	r6, #0
   295d6:	46b4      	mov	ip, r6
   295d8:	4637      	mov	r7, r6
   295da:	4634      	mov	r4, r6
   295dc:	0961      	lsrs	r1, r4, #5
   295de:	f004 031f 	and.w	r3, r4, #31
   295e2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   295e6:	2b1f      	cmp	r3, #31
   295e8:	fa21 f103 	lsr.w	r1, r1, r3
   295ec:	bf18      	it	ne
   295ee:	f001 0101 	andne.w	r1, r1, #1
   295f2:	b13c      	cbz	r4, 29604 <LLF_RND_AdaptiveProportionTest+0xb0>
   295f4:	b95f      	cbnz	r7, 2960e <LLF_RND_AdaptiveProportionTest+0xba>
   295f6:	458c      	cmp	ip, r1
   295f8:	d001      	beq.n	295fe <LLF_RND_AdaptiveProportionTest+0xaa>
   295fa:	4661      	mov	r1, ip
   295fc:	e008      	b.n	29610 <LLF_RND_AdaptiveProportionTest+0xbc>
   295fe:	3601      	adds	r6, #1
   29600:	4661      	mov	r1, ip
   29602:	e005      	b.n	29610 <LLF_RND_AdaptiveProportionTest+0xbc>
   29604:	2601      	movs	r6, #1
   29606:	4634      	mov	r4, r6
   29608:	468c      	mov	ip, r1
   2960a:	2701      	movs	r7, #1
   2960c:	e7e6      	b.n	295dc <LLF_RND_AdaptiveProportionTest+0x88>
   2960e:	463e      	mov	r6, r7
   29610:	42b2      	cmp	r2, r6
   29612:	d3cf      	bcc.n	295b4 <LLF_RND_AdaptiveProportionTest+0x60>
   29614:	3401      	adds	r4, #1
   29616:	42ac      	cmp	r4, r5
   29618:	d1f6      	bne.n	29608 <LLF_RND_AdaptiveProportionTest+0xb4>
   2961a:	e7d4      	b.n	295c6 <LLF_RND_AdaptiveProportionTest+0x72>
   2961c:	4800      	ldr	r0, [pc, #0]	; (29620 <LLF_RND_AdaptiveProportionTest+0xcc>)
   2961e:	4770      	bx	lr
   29620:	00f10c37 	.word	0x00f10c37

00029624 <getTrngSource>:
   29624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29628:	b08d      	sub	sp, #52	; 0x34
   2962a:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   2962e:	4607      	mov	r7, r0
   29630:	460c      	mov	r4, r1
   29632:	2d00      	cmp	r5, #0
   29634:	d14d      	bne.n	296d2 <getTrngSource+0xae>
   29636:	f8d1 a010 	ldr.w	sl, [r1, #16]
   2963a:	601e      	str	r6, [r3, #0]
   2963c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2963e:	2100      	movs	r1, #0
   29640:	6019      	str	r1, [r3, #0]
   29642:	2a00      	cmp	r2, #0
   29644:	f000 8120 	beq.w	29888 <getTrngSource+0x264>
   29648:	4a9b      	ldr	r2, [pc, #620]	; (298b8 <getTrngSource+0x294>)
   2964a:	4b9c      	ldr	r3, [pc, #624]	; (298bc <getTrngSource+0x298>)
   2964c:	6811      	ldr	r1, [r2, #0]
   2964e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   29650:	681b      	ldr	r3, [r3, #0]
   29652:	429a      	cmp	r2, r3
   29654:	d148      	bne.n	296e8 <getTrngSource+0xc4>
   29656:	290a      	cmp	r1, #10
   29658:	d146      	bne.n	296e8 <getTrngSource+0xc4>
   2965a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   2965e:	9304      	str	r3, [sp, #16]
   29660:	4b97      	ldr	r3, [pc, #604]	; (298c0 <getTrngSource+0x29c>)
   29662:	fba3 230a 	umull	r2, r3, r3, sl
   29666:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   2966a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   2966e:	f106 0208 	add.w	r2, r6, #8
   29672:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   29676:	2304      	movs	r3, #4
   29678:	9203      	str	r2, [sp, #12]
   2967a:	9302      	str	r3, [sp, #8]
   2967c:	46b8      	mov	r8, r7
   2967e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   29680:	f8c3 a000 	str.w	sl, [r3]
   29684:	f1ba 0f00 	cmp.w	sl, #0
   29688:	f000 80c4 	beq.w	29814 <getTrngSource+0x1f0>
   2968c:	9e03      	ldr	r6, [sp, #12]
   2968e:	4655      	mov	r5, sl
   29690:	f04f 0900 	mov.w	r9, #0
   29694:	f000 fc4e 	bl	29f34 <LLF_RND_TurnOffTrng>
   29698:	2300      	movs	r3, #0
   2969a:	9305      	str	r3, [sp, #20]
   2969c:	f1b8 0f00 	cmp.w	r8, #0
   296a0:	f000 80e6 	beq.w	29870 <getTrngSource+0x24c>
   296a4:	2c00      	cmp	r4, #0
   296a6:	f000 80e3 	beq.w	29870 <getTrngSource+0x24c>
   296aa:	9b04      	ldr	r3, [sp, #16]
   296ac:	2b00      	cmp	r3, #0
   296ae:	f000 80dd 	beq.w	2986c <getTrngSource+0x248>
   296b2:	a904      	add	r1, sp, #16
   296b4:	4620      	mov	r0, r4
   296b6:	f000 fc2d 	bl	29f14 <LLF_RND_GetFastestRosc>
   296ba:	b1b8      	cbz	r0, 296ec <getTrngSource+0xc8>
   296bc:	4b81      	ldr	r3, [pc, #516]	; (298c4 <getTrngSource+0x2a0>)
   296be:	4298      	cmp	r0, r3
   296c0:	f040 80a8 	bne.w	29814 <getTrngSource+0x1f0>
   296c4:	9002      	str	r0, [sp, #8]
   296c6:	f000 fc35 	bl	29f34 <LLF_RND_TurnOffTrng>
   296ca:	9802      	ldr	r0, [sp, #8]
   296cc:	b00d      	add	sp, #52	; 0x34
   296ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   296d6:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   296da:	3001      	adds	r0, #1
   296dc:	bf14      	ite	ne
   296de:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   296e2:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   296e6:	e7a8      	b.n	2963a <getTrngSource+0x16>
   296e8:	4877      	ldr	r0, [pc, #476]	; (298c8 <getTrngSource+0x2a4>)
   296ea:	e7eb      	b.n	296c4 <getTrngSource+0xa0>
   296ec:	9804      	ldr	r0, [sp, #16]
   296ee:	4621      	mov	r1, r4
   296f0:	f000 fbf2 	bl	29ed8 <LLF_RND_GetRoscSampleCnt>
   296f4:	2800      	cmp	r0, #0
   296f6:	d1e1      	bne.n	296bc <getTrngSource+0x98>
   296f8:	9f04      	ldr	r7, [sp, #16]
   296fa:	2f08      	cmp	r7, #8
   296fc:	f000 80ba 	beq.w	29874 <getTrngSource+0x250>
   29700:	2f04      	cmp	r7, #4
   29702:	f000 80b9 	beq.w	29878 <getTrngSource+0x254>
   29706:	f1a7 0702 	sub.w	r7, r7, #2
   2970a:	fab7 f787 	clz	r7, r7
   2970e:	097f      	lsrs	r7, r7, #5
   29710:	496e      	ldr	r1, [pc, #440]	; (298cc <getTrngSource+0x2a8>)
   29712:	2301      	movs	r3, #1
   29714:	600b      	str	r3, [r1, #0]
   29716:	f841 3c84 	str.w	r3, [r1, #-132]
   2971a:	4619      	mov	r1, r3
   2971c:	4b6b      	ldr	r3, [pc, #428]	; (298cc <getTrngSource+0x2a8>)
   2971e:	4867      	ldr	r0, [pc, #412]	; (298bc <getTrngSource+0x298>)
   29720:	6019      	str	r1, [r3, #0]
   29722:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29724:	6003      	str	r3, [r0, #0]
   29726:	6800      	ldr	r0, [r0, #0]
   29728:	4283      	cmp	r3, r0
   2972a:	d1f7      	bne.n	2971c <getTrngSource+0xf8>
   2972c:	4a68      	ldr	r2, [pc, #416]	; (298d0 <getTrngSource+0x2ac>)
   2972e:	2300      	movs	r3, #0
   29730:	6013      	str	r3, [r2, #0]
   29732:	f04f 30ff 	mov.w	r0, #4294967295
   29736:	f7ff fd05 	bl	29144 <CC_HalClearInterruptBit>
   2973a:	2300      	movs	r3, #0
   2973c:	4618      	mov	r0, r3
   2973e:	4b65      	ldr	r3, [pc, #404]	; (298d4 <getTrngSource+0x2b0>)
   29740:	f06f 011b 	mvn.w	r1, #27
   29744:	6019      	str	r1, [r3, #0]
   29746:	f7ff fd0b 	bl	29160 <CC_HalMaskInterrupt>
   2974a:	4963      	ldr	r1, [pc, #396]	; (298d8 <getTrngSource+0x2b4>)
   2974c:	4b63      	ldr	r3, [pc, #396]	; (298dc <getTrngSource+0x2b8>)
   2974e:	600f      	str	r7, [r1, #0]
   29750:	6818      	ldr	r0, [r3, #0]
   29752:	4f5b      	ldr	r7, [pc, #364]	; (298c0 <getTrngSource+0x29c>)
   29754:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   29758:	f7ff fd02 	bl	29160 <CC_HalMaskInterrupt>
   2975c:	4b56      	ldr	r3, [pc, #344]	; (298b8 <getTrngSource+0x294>)
   2975e:	4860      	ldr	r0, [pc, #384]	; (298e0 <getTrngSource+0x2bc>)
   29760:	210a      	movs	r1, #10
   29762:	6019      	str	r1, [r3, #0]
   29764:	6921      	ldr	r1, [r4, #16]
   29766:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29768:	fba7 c101 	umull	ip, r1, r7, r1
   2976c:	0909      	lsrs	r1, r1, #4
   2976e:	fb03 f301 	mul.w	r3, r3, r1
   29772:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   29776:	03db      	lsls	r3, r3, #15
   29778:	099b      	lsrs	r3, r3, #6
   2977a:	6003      	str	r3, [r0, #0]
   2977c:	4b54      	ldr	r3, [pc, #336]	; (298d0 <getTrngSource+0x2ac>)
   2977e:	2201      	movs	r2, #1
   29780:	601a      	str	r2, [r3, #0]
   29782:	9904      	ldr	r1, [sp, #16]
   29784:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   29788:	020b      	lsls	r3, r1, #8
   2978a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   2978e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   29792:	4313      	orrs	r3, r2
   29794:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   29798:	a805      	add	r0, sp, #20
   2979a:	f000 fb8d 	bl	29eb8 <LLF_RND_WaitRngInterrupt>
   2979e:	9b05      	ldr	r3, [sp, #20]
   297a0:	f003 031a 	and.w	r3, r3, #26
   297a4:	4303      	orrs	r3, r0
   297a6:	d135      	bne.n	29814 <getTrngSource+0x1f0>
   297a8:	4a4e      	ldr	r2, [pc, #312]	; (298e4 <getTrngSource+0x2c0>)
   297aa:	4b4f      	ldr	r3, [pc, #316]	; (298e8 <getTrngSource+0x2c4>)
   297ac:	6812      	ldr	r2, [r2, #0]
   297ae:	9206      	str	r2, [sp, #24]
   297b0:	681a      	ldr	r2, [r3, #0]
   297b2:	9207      	str	r2, [sp, #28]
   297b4:	685a      	ldr	r2, [r3, #4]
   297b6:	9208      	str	r2, [sp, #32]
   297b8:	689a      	ldr	r2, [r3, #8]
   297ba:	9209      	str	r2, [sp, #36]	; 0x24
   297bc:	68da      	ldr	r2, [r3, #12]
   297be:	920a      	str	r2, [sp, #40]	; 0x28
   297c0:	3310      	adds	r3, #16
   297c2:	fba7 2705 	umull	r2, r7, r7, r5
   297c6:	681b      	ldr	r3, [r3, #0]
   297c8:	930b      	str	r3, [sp, #44]	; 0x2c
   297ca:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   297ce:	d102      	bne.n	297d6 <getTrngSource+0x1b2>
   297d0:	f1bb 0f00 	cmp.w	fp, #0
   297d4:	d141      	bne.n	2985a <getTrngSource+0x236>
   297d6:	2218      	movs	r2, #24
   297d8:	4630      	mov	r0, r6
   297da:	eb0d 0102 	add.w	r1, sp, r2
   297de:	f000 fb0f 	bl	29e00 <CC_PalMemCopyPlat>
   297e2:	3d18      	subs	r5, #24
   297e4:	3618      	adds	r6, #24
   297e6:	f109 0901 	add.w	r9, r9, #1
   297ea:	2d00      	cmp	r5, #0
   297ec:	f47f af52 	bne.w	29694 <getTrngSource+0x70>
   297f0:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   297f4:	d85d      	bhi.n	298b2 <getTrngSource+0x28e>
   297f6:	9d03      	ldr	r5, [sp, #12]
   297f8:	6962      	ldr	r2, [r4, #20]
   297fa:	4651      	mov	r1, sl
   297fc:	4628      	mov	r0, r5
   297fe:	f7ff fe7b 	bl	294f8 <LLF_RND_RepetitionCounterTest.part.0>
   29802:	2800      	cmp	r0, #0
   29804:	d04b      	beq.n	2989e <getTrngSource+0x27a>
   29806:	9a16      	ldr	r2, [sp, #88]	; 0x58
   29808:	2300      	movs	r3, #0
   2980a:	6013      	str	r3, [r2, #0]
   2980c:	4b2d      	ldr	r3, [pc, #180]	; (298c4 <getTrngSource+0x2a0>)
   2980e:	4298      	cmp	r0, r3
   29810:	f43f af58 	beq.w	296c4 <getTrngSource+0xa0>
   29814:	9d04      	ldr	r5, [sp, #16]
   29816:	2d08      	cmp	r5, #8
   29818:	d034      	beq.n	29884 <getTrngSource+0x260>
   2981a:	2200      	movs	r2, #0
   2981c:	ab04      	add	r3, sp, #16
   2981e:	006d      	lsls	r5, r5, #1
   29820:	9200      	str	r2, [sp, #0]
   29822:	4621      	mov	r1, r4
   29824:	4640      	mov	r0, r8
   29826:	9504      	str	r5, [sp, #16]
   29828:	f7ff fdb8 	bl	2939c <startTrngHW>
   2982c:	4b2f      	ldr	r3, [pc, #188]	; (298ec <getTrngSource+0x2c8>)
   2982e:	4298      	cmp	r0, r3
   29830:	d024      	beq.n	2987c <getTrngSource+0x258>
   29832:	2800      	cmp	r0, #0
   29834:	f47f af46 	bne.w	296c4 <getTrngSource+0xa0>
   29838:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   2983c:	0a13      	lsrs	r3, r2, #8
   2983e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   29842:	4313      	orrs	r3, r2
   29844:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   29848:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   2984c:	9b02      	ldr	r3, [sp, #8]
   2984e:	3b01      	subs	r3, #1
   29850:	9302      	str	r3, [sp, #8]
   29852:	f47f af14 	bne.w	2967e <getTrngSource+0x5a>
   29856:	2000      	movs	r0, #0
   29858:	e734      	b.n	296c4 <getTrngSource+0xa0>
   2985a:	4630      	mov	r0, r6
   2985c:	465a      	mov	r2, fp
   2985e:	a906      	add	r1, sp, #24
   29860:	f000 face 	bl	29e00 <CC_PalMemCopyPlat>
   29864:	eba5 050b 	sub.w	r5, r5, fp
   29868:	445e      	add	r6, fp
   2986a:	e7bc      	b.n	297e6 <getTrngSource+0x1c2>
   2986c:	481f      	ldr	r0, [pc, #124]	; (298ec <getTrngSource+0x2c8>)
   2986e:	e725      	b.n	296bc <getTrngSource+0x98>
   29870:	481f      	ldr	r0, [pc, #124]	; (298f0 <getTrngSource+0x2cc>)
   29872:	e723      	b.n	296bc <getTrngSource+0x98>
   29874:	2703      	movs	r7, #3
   29876:	e74b      	b.n	29710 <getTrngSource+0xec>
   29878:	2702      	movs	r7, #2
   2987a:	e749      	b.n	29710 <getTrngSource+0xec>
   2987c:	6a23      	ldr	r3, [r4, #32]
   2987e:	2b00      	cmp	r3, #0
   29880:	f43f af20 	beq.w	296c4 <getTrngSource+0xa0>
   29884:	481b      	ldr	r0, [pc, #108]	; (298f4 <getTrngSource+0x2d0>)
   29886:	e71d      	b.n	296c4 <getTrngSource+0xa0>
   29888:	9500      	str	r5, [sp, #0]
   2988a:	ab04      	add	r3, sp, #16
   2988c:	2201      	movs	r2, #1
   2988e:	4621      	mov	r1, r4
   29890:	4638      	mov	r0, r7
   29892:	f7ff fd83 	bl	2939c <startTrngHW>
   29896:	2800      	cmp	r0, #0
   29898:	f43f aee2 	beq.w	29660 <getTrngSource+0x3c>
   2989c:	e712      	b.n	296c4 <getTrngSource+0xa0>
   2989e:	69a2      	ldr	r2, [r4, #24]
   298a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   298a4:	4651      	mov	r1, sl
   298a6:	4628      	mov	r0, r5
   298a8:	f7ff fe54 	bl	29554 <LLF_RND_AdaptiveProportionTest>
   298ac:	2800      	cmp	r0, #0
   298ae:	d1aa      	bne.n	29806 <getTrngSource+0x1e2>
   298b0:	e7d1      	b.n	29856 <getTrngSource+0x232>
   298b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   298b4:	601d      	str	r5, [r3, #0]
   298b6:	e7ad      	b.n	29814 <getTrngSource+0x1f0>
   298b8:	5002b138 	.word	0x5002b138
   298bc:	5002b130 	.word	0x5002b130
   298c0:	aaaaaaab 	.word	0xaaaaaaab
   298c4:	00f10c02 	.word	0x00f10c02
   298c8:	00f10c30 	.word	0x00f10c30
   298cc:	5002b1c4 	.word	0x5002b1c4
   298d0:	5002b12c 	.word	0x5002b12c
   298d4:	5002b100 	.word	0x5002b100
   298d8:	5002b10c 	.word	0x5002b10c
   298dc:	5002ba04 	.word	0x5002ba04
   298e0:	5002b1d8 	.word	0x5002b1d8
   298e4:	5002b114 	.word	0x5002b114
   298e8:	5002b118 	.word	0x5002b118
   298ec:	00f10c31 	.word	0x00f10c31
   298f0:	00f10c35 	.word	0x00f10c35
   298f4:	00f10c32 	.word	0x00f10c32

000298f8 <LLF_RND_GetTrngSource>:
   298f8:	b430      	push	{r4, r5}
   298fa:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   298fe:	9d04      	ldr	r5, [sp, #16]
   29900:	9402      	str	r4, [sp, #8]
   29902:	2400      	movs	r4, #0
   29904:	e9cd 5403 	strd	r5, r4, [sp, #12]
   29908:	bc30      	pop	{r4, r5}
   2990a:	f7ff be8b 	b.w	29624 <getTrngSource>
   2990e:	bf00      	nop

00029910 <LLF_RND_RunTrngStartupTest>:
   29910:	b510      	push	{r4, lr}
   29912:	b086      	sub	sp, #24
   29914:	ab05      	add	r3, sp, #20
   29916:	2401      	movs	r4, #1
   29918:	e9cd 2401 	strd	r2, r4, [sp, #4]
   2991c:	9300      	str	r3, [sp, #0]
   2991e:	2200      	movs	r2, #0
   29920:	ab04      	add	r3, sp, #16
   29922:	f7ff fe7f 	bl	29624 <getTrngSource>
   29926:	b006      	add	sp, #24
   29928:	bd10      	pop	{r4, pc}
   2992a:	bf00      	nop

0002992c <mbedtls_hardware_poll>:
   2992c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2992e:	b089      	sub	sp, #36	; 0x24
   29930:	9205      	str	r2, [sp, #20]
   29932:	2900      	cmp	r1, #0
   29934:	d064      	beq.n	29a00 <mbedtls_hardware_poll+0xd4>
   29936:	461c      	mov	r4, r3
   29938:	2b00      	cmp	r3, #0
   2993a:	d061      	beq.n	29a00 <mbedtls_hardware_poll+0xd4>
   2993c:	4615      	mov	r5, r2
   2993e:	2a00      	cmp	r2, #0
   29940:	d05e      	beq.n	29a00 <mbedtls_hardware_poll+0xd4>
   29942:	4f31      	ldr	r7, [pc, #196]	; (29a08 <mbedtls_hardware_poll+0xdc>)
   29944:	460e      	mov	r6, r1
   29946:	6838      	ldr	r0, [r7, #0]
   29948:	f04f 31ff 	mov.w	r1, #4294967295
   2994c:	f7ff fca2 	bl	29294 <CC_PalMutexLock>
   29950:	2800      	cmp	r0, #0
   29952:	d14b      	bne.n	299ec <mbedtls_hardware_poll+0xc0>
   29954:	2000      	movs	r0, #0
   29956:	f7ff fccd 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2995a:	2800      	cmp	r0, #0
   2995c:	d142      	bne.n	299e4 <mbedtls_hardware_poll+0xb8>
   2995e:	482b      	ldr	r0, [pc, #172]	; (29a0c <mbedtls_hardware_poll+0xe0>)
   29960:	f000 fa12 	bl	29d88 <RNG_PLAT_SetUserRngParameters>
   29964:	b1d8      	cbz	r0, 2999e <mbedtls_hardware_poll+0x72>
   29966:	2001      	movs	r0, #1
   29968:	f04f 36ff 	mov.w	r6, #4294967295
   2996c:	f7ff fcc2 	bl	292f4 <CC_PalPowerSaveModeSelect>
   29970:	2800      	cmp	r0, #0
   29972:	d133      	bne.n	299dc <mbedtls_hardware_poll+0xb0>
   29974:	4826      	ldr	r0, [pc, #152]	; (29a10 <mbedtls_hardware_poll+0xe4>)
   29976:	f44f 7108 	mov.w	r1, #544	; 0x220
   2997a:	f7fe fe47 	bl	2860c <mbedtls_zeroize_internal>
   2997e:	4825      	ldr	r0, [pc, #148]	; (29a14 <mbedtls_hardware_poll+0xe8>)
   29980:	21dc      	movs	r1, #220	; 0xdc
   29982:	f7fe fe43 	bl	2860c <mbedtls_zeroize_internal>
   29986:	4821      	ldr	r0, [pc, #132]	; (29a0c <mbedtls_hardware_poll+0xe0>)
   29988:	2128      	movs	r1, #40	; 0x28
   2998a:	f7fe fe3f 	bl	2860c <mbedtls_zeroize_internal>
   2998e:	6838      	ldr	r0, [r7, #0]
   29990:	f7ff fc88 	bl	292a4 <CC_PalMutexUnlock>
   29994:	2800      	cmp	r0, #0
   29996:	d12d      	bne.n	299f4 <mbedtls_hardware_poll+0xc8>
   29998:	4630      	mov	r0, r6
   2999a:	b009      	add	sp, #36	; 0x24
   2999c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2999e:	491c      	ldr	r1, [pc, #112]	; (29a10 <mbedtls_hardware_poll+0xe4>)
   299a0:	9003      	str	r0, [sp, #12]
   299a2:	ab07      	add	r3, sp, #28
   299a4:	4602      	mov	r2, r0
   299a6:	9102      	str	r1, [sp, #8]
   299a8:	9300      	str	r3, [sp, #0]
   299aa:	4918      	ldr	r1, [pc, #96]	; (29a0c <mbedtls_hardware_poll+0xe0>)
   299ac:	4819      	ldr	r0, [pc, #100]	; (29a14 <mbedtls_hardware_poll+0xe8>)
   299ae:	9401      	str	r4, [sp, #4]
   299b0:	ab05      	add	r3, sp, #20
   299b2:	f7ff ffa1 	bl	298f8 <LLF_RND_GetTrngSource>
   299b6:	4603      	mov	r3, r0
   299b8:	2800      	cmp	r0, #0
   299ba:	d1d4      	bne.n	29966 <mbedtls_hardware_poll+0x3a>
   299bc:	6822      	ldr	r2, [r4, #0]
   299be:	42aa      	cmp	r2, r5
   299c0:	d3d1      	bcc.n	29966 <mbedtls_hardware_poll+0x3a>
   299c2:	9907      	ldr	r1, [sp, #28]
   299c4:	4630      	mov	r0, r6
   299c6:	3108      	adds	r1, #8
   299c8:	462a      	mov	r2, r5
   299ca:	461e      	mov	r6, r3
   299cc:	f000 fa18 	bl	29e00 <CC_PalMemCopyPlat>
   299d0:	6025      	str	r5, [r4, #0]
   299d2:	2001      	movs	r0, #1
   299d4:	f7ff fc8e 	bl	292f4 <CC_PalPowerSaveModeSelect>
   299d8:	2800      	cmp	r0, #0
   299da:	d0cb      	beq.n	29974 <mbedtls_hardware_poll+0x48>
   299dc:	480e      	ldr	r0, [pc, #56]	; (29a18 <mbedtls_hardware_poll+0xec>)
   299de:	f7fe fd0d 	bl	283fc <CC_PalAbort>
   299e2:	e7c7      	b.n	29974 <mbedtls_hardware_poll+0x48>
   299e4:	480d      	ldr	r0, [pc, #52]	; (29a1c <mbedtls_hardware_poll+0xf0>)
   299e6:	f7fe fd09 	bl	283fc <CC_PalAbort>
   299ea:	e7b8      	b.n	2995e <mbedtls_hardware_poll+0x32>
   299ec:	480c      	ldr	r0, [pc, #48]	; (29a20 <mbedtls_hardware_poll+0xf4>)
   299ee:	f7fe fd05 	bl	283fc <CC_PalAbort>
   299f2:	e7af      	b.n	29954 <mbedtls_hardware_poll+0x28>
   299f4:	480b      	ldr	r0, [pc, #44]	; (29a24 <mbedtls_hardware_poll+0xf8>)
   299f6:	f7fe fd01 	bl	283fc <CC_PalAbort>
   299fa:	4630      	mov	r0, r6
   299fc:	b009      	add	sp, #36	; 0x24
   299fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29a00:	f04f 36ff 	mov.w	r6, #4294967295
   29a04:	e7c8      	b.n	29998 <mbedtls_hardware_poll+0x6c>
   29a06:	bf00      	nop
   29a08:	200008d0 	.word	0x200008d0
   29a0c:	20003ed0 	.word	0x20003ed0
   29a10:	20003cb0 	.word	0x20003cb0
   29a14:	20003bd4 	.word	0x20003bd4
   29a18:	000365e0 	.word	0x000365e0
   29a1c:	000365c0 	.word	0x000365c0
   29a20:	000365a8 	.word	0x000365a8
   29a24:	00036638 	.word	0x00036638

00029a28 <cc_mbedtls_aes_init>:
   29a28:	b510      	push	{r4, lr}
   29a2a:	4604      	mov	r4, r0
   29a2c:	b130      	cbz	r0, 29a3c <cc_mbedtls_aes_init+0x14>
   29a2e:	2200      	movs	r2, #0
   29a30:	2301      	movs	r3, #1
   29a32:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   29a36:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   29a3a:	bd10      	pop	{r4, pc}
   29a3c:	4801      	ldr	r0, [pc, #4]	; (29a44 <cc_mbedtls_aes_init+0x1c>)
   29a3e:	f7fe fcdd 	bl	283fc <CC_PalAbort>
   29a42:	e7f4      	b.n	29a2e <cc_mbedtls_aes_init+0x6>
   29a44:	00036650 	.word	0x00036650

00029a48 <cc_mbedtls_aes_free>:
   29a48:	b118      	cbz	r0, 29a52 <cc_mbedtls_aes_free+0xa>
   29a4a:	2274      	movs	r2, #116	; 0x74
   29a4c:	2100      	movs	r1, #0
   29a4e:	f000 b9d9 	b.w	29e04 <CC_PalMemSetPlat>
   29a52:	4770      	bx	lr

00029a54 <cc_mbedtls_aes_setkey_enc>:
   29a54:	b190      	cbz	r0, 29a7c <cc_mbedtls_aes_setkey_enc+0x28>
   29a56:	b1a1      	cbz	r1, 29a82 <cc_mbedtls_aes_setkey_enc+0x2e>
   29a58:	b510      	push	{r4, lr}
   29a5a:	2a80      	cmp	r2, #128	; 0x80
   29a5c:	f04f 0400 	mov.w	r4, #0
   29a60:	6384      	str	r4, [r0, #56]	; 0x38
   29a62:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   29a66:	d106      	bne.n	29a76 <cc_mbedtls_aes_setkey_enc+0x22>
   29a68:	6304      	str	r4, [r0, #48]	; 0x30
   29a6a:	2210      	movs	r2, #16
   29a6c:	3010      	adds	r0, #16
   29a6e:	f000 f9c7 	bl	29e00 <CC_PalMemCopyPlat>
   29a72:	4620      	mov	r0, r4
   29a74:	bd10      	pop	{r4, pc}
   29a76:	f06f 001f 	mvn.w	r0, #31
   29a7a:	bd10      	pop	{r4, pc}
   29a7c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   29a80:	4770      	bx	lr
   29a82:	f06f 001f 	mvn.w	r0, #31
   29a86:	4770      	bx	lr

00029a88 <cc_mbedtls_aes_crypt_ecb>:
   29a88:	b320      	cbz	r0, 29ad4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   29a8a:	b31a      	cbz	r2, 29ad4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   29a8c:	b313      	cbz	r3, 29ad4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   29a8e:	2901      	cmp	r1, #1
   29a90:	d820      	bhi.n	29ad4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   29a92:	b570      	push	{r4, r5, r6, lr}
   29a94:	4604      	mov	r4, r0
   29a96:	6b81      	ldr	r1, [r0, #56]	; 0x38
   29a98:	b086      	sub	sp, #24
   29a9a:	d016      	beq.n	29aca <cc_mbedtls_aes_crypt_ecb+0x42>
   29a9c:	2901      	cmp	r1, #1
   29a9e:	d116      	bne.n	29ace <cc_mbedtls_aes_crypt_ecb+0x46>
   29aa0:	2100      	movs	r1, #0
   29aa2:	2510      	movs	r5, #16
   29aa4:	ae04      	add	r6, sp, #16
   29aa6:	6361      	str	r1, [r4, #52]	; 0x34
   29aa8:	4610      	mov	r0, r2
   29aaa:	e9cd 5600 	strd	r5, r6, [sp]
   29aae:	aa02      	add	r2, sp, #8
   29ab0:	4629      	mov	r1, r5
   29ab2:	f000 fa4d 	bl	29f50 <SetDataBuffersInfo>
   29ab6:	b950      	cbnz	r0, 29ace <cc_mbedtls_aes_crypt_ecb+0x46>
   29ab8:	462b      	mov	r3, r5
   29aba:	4632      	mov	r2, r6
   29abc:	a902      	add	r1, sp, #8
   29abe:	4620      	mov	r0, r4
   29ac0:	f000 fcda 	bl	2a478 <ProcessAesDrv>
   29ac4:	b918      	cbnz	r0, 29ace <cc_mbedtls_aes_crypt_ecb+0x46>
   29ac6:	b006      	add	sp, #24
   29ac8:	bd70      	pop	{r4, r5, r6, pc}
   29aca:	2900      	cmp	r1, #0
   29acc:	d0e8      	beq.n	29aa0 <cc_mbedtls_aes_crypt_ecb+0x18>
   29ace:	f06f 0021 	mvn.w	r0, #33	; 0x21
   29ad2:	e7f8      	b.n	29ac6 <cc_mbedtls_aes_crypt_ecb+0x3e>
   29ad4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   29ad8:	4770      	bx	lr
   29ada:	bf00      	nop

00029adc <cc_mbedtls_sha256_init>:
   29adc:	b510      	push	{r4, lr}
   29ade:	4604      	mov	r4, r0
   29ae0:	b128      	cbz	r0, 29aee <cc_mbedtls_sha256_init+0x12>
   29ae2:	4620      	mov	r0, r4
   29ae4:	21f0      	movs	r1, #240	; 0xf0
   29ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29aea:	f000 b98d 	b.w	29e08 <CC_PalMemSetZeroPlat>
   29aee:	4804      	ldr	r0, [pc, #16]	; (29b00 <cc_mbedtls_sha256_init+0x24>)
   29af0:	f7fe fc84 	bl	283fc <CC_PalAbort>
   29af4:	4620      	mov	r0, r4
   29af6:	21f0      	movs	r1, #240	; 0xf0
   29af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29afc:	f000 b984 	b.w	29e08 <CC_PalMemSetZeroPlat>
   29b00:	00036664 	.word	0x00036664

00029b04 <cc_mbedtls_sha256_free>:
   29b04:	b110      	cbz	r0, 29b0c <cc_mbedtls_sha256_free+0x8>
   29b06:	21f0      	movs	r1, #240	; 0xf0
   29b08:	f7fe bd80 	b.w	2860c <mbedtls_zeroize_internal>
   29b0c:	4770      	bx	lr
   29b0e:	bf00      	nop

00029b10 <cc_mbedtls_sha256_starts>:
   29b10:	b508      	push	{r3, lr}
   29b12:	b161      	cbz	r1, 29b2e <cc_mbedtls_sha256_starts+0x1e>
   29b14:	2901      	cmp	r1, #1
   29b16:	d107      	bne.n	29b28 <cc_mbedtls_sha256_starts+0x18>
   29b18:	2102      	movs	r1, #2
   29b1a:	f000 f85b 	bl	29bd4 <mbedtls_sha_starts_internal>
   29b1e:	2800      	cmp	r0, #0
   29b20:	bf18      	it	ne
   29b22:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   29b26:	bd08      	pop	{r3, pc}
   29b28:	f06f 0036 	mvn.w	r0, #54	; 0x36
   29b2c:	bd08      	pop	{r3, pc}
   29b2e:	2101      	movs	r1, #1
   29b30:	f000 f850 	bl	29bd4 <mbedtls_sha_starts_internal>
   29b34:	e7f3      	b.n	29b1e <cc_mbedtls_sha256_starts+0xe>
   29b36:	bf00      	nop

00029b38 <cc_mbedtls_sha256_update>:
   29b38:	b570      	push	{r4, r5, r6, lr}
   29b3a:	188e      	adds	r6, r1, r2
   29b3c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   29b40:	b0a0      	sub	sp, #128	; 0x80
   29b42:	460b      	mov	r3, r1
   29b44:	4614      	mov	r4, r2
   29b46:	4605      	mov	r5, r0
   29b48:	d801      	bhi.n	29b4e <cc_mbedtls_sha256_update+0x16>
   29b4a:	2a80      	cmp	r2, #128	; 0x80
   29b4c:	d90c      	bls.n	29b68 <cc_mbedtls_sha256_update+0x30>
   29b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   29b52:	d917      	bls.n	29b84 <cc_mbedtls_sha256_update+0x4c>
   29b54:	4622      	mov	r2, r4
   29b56:	4619      	mov	r1, r3
   29b58:	4628      	mov	r0, r5
   29b5a:	f000 f87d 	bl	29c58 <mbedtls_sha_update_internal>
   29b5e:	4604      	mov	r4, r0
   29b60:	b984      	cbnz	r4, 29b84 <cc_mbedtls_sha256_update+0x4c>
   29b62:	4620      	mov	r0, r4
   29b64:	b020      	add	sp, #128	; 0x80
   29b66:	bd70      	pop	{r4, r5, r6, pc}
   29b68:	4668      	mov	r0, sp
   29b6a:	f000 f949 	bl	29e00 <CC_PalMemCopyPlat>
   29b6e:	4622      	mov	r2, r4
   29b70:	4669      	mov	r1, sp
   29b72:	4628      	mov	r0, r5
   29b74:	f000 f870 	bl	29c58 <mbedtls_sha_update_internal>
   29b78:	2180      	movs	r1, #128	; 0x80
   29b7a:	4604      	mov	r4, r0
   29b7c:	4668      	mov	r0, sp
   29b7e:	f000 f943 	bl	29e08 <CC_PalMemSetZeroPlat>
   29b82:	e7ed      	b.n	29b60 <cc_mbedtls_sha256_update+0x28>
   29b84:	f06f 0436 	mvn.w	r4, #54	; 0x36
   29b88:	e7eb      	b.n	29b62 <cc_mbedtls_sha256_update+0x2a>
   29b8a:	bf00      	nop

00029b8c <cc_mbedtls_sha256_finish>:
   29b8c:	b570      	push	{r4, r5, r6, lr}
   29b8e:	b1e8      	cbz	r0, 29bcc <cc_mbedtls_sha256_finish+0x40>
   29b90:	460e      	mov	r6, r1
   29b92:	b1d9      	cbz	r1, 29bcc <cc_mbedtls_sha256_finish+0x40>
   29b94:	4604      	mov	r4, r0
   29b96:	f000 f831 	bl	29bfc <mbedtls_sha_finish_internal>
   29b9a:	4605      	mov	r5, r0
   29b9c:	b9b0      	cbnz	r0, 29bcc <cc_mbedtls_sha256_finish+0x40>
   29b9e:	6823      	ldr	r3, [r4, #0]
   29ba0:	2b01      	cmp	r3, #1
   29ba2:	d00b      	beq.n	29bbc <cc_mbedtls_sha256_finish+0x30>
   29ba4:	2b02      	cmp	r3, #2
   29ba6:	d001      	beq.n	29bac <cc_mbedtls_sha256_finish+0x20>
   29ba8:	4628      	mov	r0, r5
   29baa:	bd70      	pop	{r4, r5, r6, pc}
   29bac:	f104 0108 	add.w	r1, r4, #8
   29bb0:	4630      	mov	r0, r6
   29bb2:	221c      	movs	r2, #28
   29bb4:	f000 f924 	bl	29e00 <CC_PalMemCopyPlat>
   29bb8:	4628      	mov	r0, r5
   29bba:	bd70      	pop	{r4, r5, r6, pc}
   29bbc:	f104 0108 	add.w	r1, r4, #8
   29bc0:	4630      	mov	r0, r6
   29bc2:	2220      	movs	r2, #32
   29bc4:	f000 f91c 	bl	29e00 <CC_PalMemCopyPlat>
   29bc8:	4628      	mov	r0, r5
   29bca:	bd70      	pop	{r4, r5, r6, pc}
   29bcc:	f06f 0536 	mvn.w	r5, #54	; 0x36
   29bd0:	e7ea      	b.n	29ba8 <cc_mbedtls_sha256_finish+0x1c>
   29bd2:	bf00      	nop

00029bd4 <mbedtls_sha_starts_internal>:
   29bd4:	b178      	cbz	r0, 29bf6 <mbedtls_sha_starts_internal+0x22>
   29bd6:	b538      	push	{r3, r4, r5, lr}
   29bd8:	4604      	mov	r4, r0
   29bda:	460d      	mov	r5, r1
   29bdc:	21f0      	movs	r1, #240	; 0xf0
   29bde:	f000 f913 	bl	29e08 <CC_PalMemSetZeroPlat>
   29be2:	2340      	movs	r3, #64	; 0x40
   29be4:	6025      	str	r5, [r4, #0]
   29be6:	65e3      	str	r3, [r4, #92]	; 0x5c
   29be8:	4620      	mov	r0, r4
   29bea:	f000 f9e5 	bl	29fb8 <InitHashDrv>
   29bee:	3800      	subs	r0, #0
   29bf0:	bf18      	it	ne
   29bf2:	2001      	movne	r0, #1
   29bf4:	bd38      	pop	{r3, r4, r5, pc}
   29bf6:	2001      	movs	r0, #1
   29bf8:	4770      	bx	lr
   29bfa:	bf00      	nop

00029bfc <mbedtls_sha_finish_internal>:
   29bfc:	b570      	push	{r4, r5, r6, lr}
   29bfe:	6e05      	ldr	r5, [r0, #96]	; 0x60
   29c00:	b0a4      	sub	sp, #144	; 0x90
   29c02:	4604      	mov	r4, r0
   29c04:	ae04      	add	r6, sp, #16
   29c06:	b9e5      	cbnz	r5, 29c42 <mbedtls_sha_finish_internal+0x46>
   29c08:	2201      	movs	r2, #1
   29c0a:	2300      	movs	r3, #0
   29c0c:	6062      	str	r2, [r4, #4]
   29c0e:	4630      	mov	r0, r6
   29c10:	e9cd 3300 	strd	r3, r3, [sp]
   29c14:	aa02      	add	r2, sp, #8
   29c16:	4629      	mov	r1, r5
   29c18:	f000 f99a 	bl	29f50 <SetDataBuffersInfo>
   29c1c:	b110      	cbz	r0, 29c24 <mbedtls_sha_finish_internal+0x28>
   29c1e:	2001      	movs	r0, #1
   29c20:	b024      	add	sp, #144	; 0x90
   29c22:	bd70      	pop	{r4, r5, r6, pc}
   29c24:	462a      	mov	r2, r5
   29c26:	a902      	add	r1, sp, #8
   29c28:	4620      	mov	r0, r4
   29c2a:	f000 f9ef 	bl	2a00c <ProcessHashDrv>
   29c2e:	2800      	cmp	r0, #0
   29c30:	d1f5      	bne.n	29c1e <mbedtls_sha_finish_internal+0x22>
   29c32:	4620      	mov	r0, r4
   29c34:	f000 fb18 	bl	2a268 <FinishHashDrv>
   29c38:	2800      	cmp	r0, #0
   29c3a:	d1f0      	bne.n	29c1e <mbedtls_sha_finish_internal+0x22>
   29c3c:	6620      	str	r0, [r4, #96]	; 0x60
   29c3e:	b024      	add	sp, #144	; 0x90
   29c40:	bd70      	pop	{r4, r5, r6, pc}
   29c42:	2d80      	cmp	r5, #128	; 0x80
   29c44:	462a      	mov	r2, r5
   29c46:	4630      	mov	r0, r6
   29c48:	bf28      	it	cs
   29c4a:	2280      	movcs	r2, #128	; 0x80
   29c4c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   29c50:	f000 f8d6 	bl	29e00 <CC_PalMemCopyPlat>
   29c54:	6e25      	ldr	r5, [r4, #96]	; 0x60
   29c56:	e7d7      	b.n	29c08 <mbedtls_sha_finish_internal+0xc>

00029c58 <mbedtls_sha_update_internal>:
   29c58:	2800      	cmp	r0, #0
   29c5a:	d054      	beq.n	29d06 <mbedtls_sha_update_internal+0xae>
   29c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29c5e:	4614      	mov	r4, r2
   29c60:	b0a5      	sub	sp, #148	; 0x94
   29c62:	b1b2      	cbz	r2, 29c92 <mbedtls_sha_update_internal+0x3a>
   29c64:	460e      	mov	r6, r1
   29c66:	b351      	cbz	r1, 29cbe <mbedtls_sha_update_internal+0x66>
   29c68:	4605      	mov	r5, r0
   29c6a:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   29c6e:	1a1a      	subs	r2, r3, r0
   29c70:	fbb2 f7f3 	udiv	r7, r2, r3
   29c74:	fb03 2717 	mls	r7, r3, r7, r2
   29c78:	42a7      	cmp	r7, r4
   29c7a:	bf28      	it	cs
   29c7c:	4627      	movcs	r7, r4
   29c7e:	2f00      	cmp	r7, #0
   29c80:	d143      	bne.n	29d0a <mbedtls_sha_update_internal+0xb2>
   29c82:	4283      	cmp	r3, r0
   29c84:	d008      	beq.n	29c98 <mbedtls_sha_update_internal+0x40>
   29c86:	fbb4 f7f3 	udiv	r7, r4, r3
   29c8a:	fb03 f707 	mul.w	r7, r3, r7
   29c8e:	b9cf      	cbnz	r7, 29cc4 <mbedtls_sha_update_internal+0x6c>
   29c90:	bb6c      	cbnz	r4, 29cee <mbedtls_sha_update_internal+0x96>
   29c92:	2000      	movs	r0, #0
   29c94:	b025      	add	sp, #148	; 0x94
   29c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29c98:	2b80      	cmp	r3, #128	; 0x80
   29c9a:	bf28      	it	cs
   29c9c:	2380      	movcs	r3, #128	; 0x80
   29c9e:	461a      	mov	r2, r3
   29ca0:	f105 0164 	add.w	r1, r5, #100	; 0x64
   29ca4:	a804      	add	r0, sp, #16
   29ca6:	f000 f8ab 	bl	29e00 <CC_PalMemCopyPlat>
   29caa:	2300      	movs	r3, #0
   29cac:	e9cd 3300 	strd	r3, r3, [sp]
   29cb0:	a804      	add	r0, sp, #16
   29cb2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   29cb4:	aa02      	add	r2, sp, #8
   29cb6:	f000 f94b 	bl	29f50 <SetDataBuffersInfo>
   29cba:	2800      	cmp	r0, #0
   29cbc:	d032      	beq.n	29d24 <mbedtls_sha_update_internal+0xcc>
   29cbe:	2001      	movs	r0, #1
   29cc0:	b025      	add	sp, #148	; 0x94
   29cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29cc4:	2300      	movs	r3, #0
   29cc6:	e9cd 3300 	strd	r3, r3, [sp]
   29cca:	aa02      	add	r2, sp, #8
   29ccc:	4639      	mov	r1, r7
   29cce:	4630      	mov	r0, r6
   29cd0:	f000 f93e 	bl	29f50 <SetDataBuffersInfo>
   29cd4:	2800      	cmp	r0, #0
   29cd6:	d1f2      	bne.n	29cbe <mbedtls_sha_update_internal+0x66>
   29cd8:	a902      	add	r1, sp, #8
   29cda:	463a      	mov	r2, r7
   29cdc:	4628      	mov	r0, r5
   29cde:	f000 f995 	bl	2a00c <ProcessHashDrv>
   29ce2:	2800      	cmp	r0, #0
   29ce4:	d1eb      	bne.n	29cbe <mbedtls_sha_update_internal+0x66>
   29ce6:	1be4      	subs	r4, r4, r7
   29ce8:	443e      	add	r6, r7
   29cea:	2c00      	cmp	r4, #0
   29cec:	d0d1      	beq.n	29c92 <mbedtls_sha_update_internal+0x3a>
   29cee:	6e28      	ldr	r0, [r5, #96]	; 0x60
   29cf0:	3019      	adds	r0, #25
   29cf2:	4622      	mov	r2, r4
   29cf4:	4631      	mov	r1, r6
   29cf6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   29cfa:	f000 f881 	bl	29e00 <CC_PalMemCopyPlat>
   29cfe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   29d00:	4422      	add	r2, r4
   29d02:	662a      	str	r2, [r5, #96]	; 0x60
   29d04:	e7c5      	b.n	29c92 <mbedtls_sha_update_internal+0x3a>
   29d06:	2001      	movs	r0, #1
   29d08:	4770      	bx	lr
   29d0a:	f105 0364 	add.w	r3, r5, #100	; 0x64
   29d0e:	4418      	add	r0, r3
   29d10:	463a      	mov	r2, r7
   29d12:	f000 f875 	bl	29e00 <CC_PalMemCopyPlat>
   29d16:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   29d1a:	4438      	add	r0, r7
   29d1c:	443e      	add	r6, r7
   29d1e:	1be4      	subs	r4, r4, r7
   29d20:	6628      	str	r0, [r5, #96]	; 0x60
   29d22:	e7ae      	b.n	29c82 <mbedtls_sha_update_internal+0x2a>
   29d24:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   29d26:	a902      	add	r1, sp, #8
   29d28:	4628      	mov	r0, r5
   29d2a:	f000 f96f 	bl	2a00c <ProcessHashDrv>
   29d2e:	2800      	cmp	r0, #0
   29d30:	d1c5      	bne.n	29cbe <mbedtls_sha_update_internal+0x66>
   29d32:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29d34:	6628      	str	r0, [r5, #96]	; 0x60
   29d36:	e7a6      	b.n	29c86 <mbedtls_sha_update_internal+0x2e>

00029d38 <cc_mbedtls_sha256>:
   29d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29d3a:	461c      	mov	r4, r3
   29d3c:	4605      	mov	r5, r0
   29d3e:	4811      	ldr	r0, [pc, #68]	; (29d84 <cc_mbedtls_sha256+0x4c>)
   29d40:	460e      	mov	r6, r1
   29d42:	4617      	mov	r7, r2
   29d44:	f7ff feca 	bl	29adc <cc_mbedtls_sha256_init>
   29d48:	4621      	mov	r1, r4
   29d4a:	480e      	ldr	r0, [pc, #56]	; (29d84 <cc_mbedtls_sha256+0x4c>)
   29d4c:	f7ff fee0 	bl	29b10 <cc_mbedtls_sha256_starts>
   29d50:	4604      	mov	r4, r0
   29d52:	b120      	cbz	r0, 29d5e <cc_mbedtls_sha256+0x26>
   29d54:	480b      	ldr	r0, [pc, #44]	; (29d84 <cc_mbedtls_sha256+0x4c>)
   29d56:	f7ff fed5 	bl	29b04 <cc_mbedtls_sha256_free>
   29d5a:	4620      	mov	r0, r4
   29d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29d5e:	4809      	ldr	r0, [pc, #36]	; (29d84 <cc_mbedtls_sha256+0x4c>)
   29d60:	4632      	mov	r2, r6
   29d62:	4629      	mov	r1, r5
   29d64:	f7ff fee8 	bl	29b38 <cc_mbedtls_sha256_update>
   29d68:	4604      	mov	r4, r0
   29d6a:	2800      	cmp	r0, #0
   29d6c:	d1f2      	bne.n	29d54 <cc_mbedtls_sha256+0x1c>
   29d6e:	4639      	mov	r1, r7
   29d70:	4804      	ldr	r0, [pc, #16]	; (29d84 <cc_mbedtls_sha256+0x4c>)
   29d72:	f7ff ff0b 	bl	29b8c <cc_mbedtls_sha256_finish>
   29d76:	4604      	mov	r4, r0
   29d78:	4802      	ldr	r0, [pc, #8]	; (29d84 <cc_mbedtls_sha256+0x4c>)
   29d7a:	f7ff fec3 	bl	29b04 <cc_mbedtls_sha256_free>
   29d7e:	4620      	mov	r0, r4
   29d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29d82:	bf00      	nop
   29d84:	20003ef8 	.word	0x20003ef8

00029d88 <RNG_PLAT_SetUserRngParameters>:
   29d88:	b530      	push	{r4, r5, lr}
   29d8a:	b083      	sub	sp, #12
   29d8c:	231c      	movs	r3, #28
   29d8e:	a901      	add	r1, sp, #4
   29d90:	4604      	mov	r4, r0
   29d92:	9301      	str	r3, [sp, #4]
   29d94:	f000 f83c 	bl	29e10 <CC_PalTrngParamGet>
   29d98:	4605      	mov	r5, r0
   29d9a:	b938      	cbnz	r0, 29dac <RNG_PLAT_SetUserRngParameters+0x24>
   29d9c:	9b01      	ldr	r3, [sp, #4]
   29d9e:	2b1c      	cmp	r3, #28
   29da0:	d007      	beq.n	29db2 <RNG_PLAT_SetUserRngParameters+0x2a>
   29da2:	4d15      	ldr	r5, [pc, #84]	; (29df8 <RNG_PLAT_SetUserRngParameters+0x70>)
   29da4:	4620      	mov	r0, r4
   29da6:	211c      	movs	r1, #28
   29da8:	f000 f82e 	bl	29e08 <CC_PalMemSetZeroPlat>
   29dac:	4628      	mov	r0, r5
   29dae:	b003      	add	sp, #12
   29db0:	bd30      	pop	{r4, r5, pc}
   29db2:	e9d4 3200 	ldrd	r3, r2, [r4]
   29db6:	2101      	movs	r1, #1
   29db8:	3b00      	subs	r3, #0
   29dba:	bf18      	it	ne
   29dbc:	2301      	movne	r3, #1
   29dbe:	61e1      	str	r1, [r4, #28]
   29dc0:	b10a      	cbz	r2, 29dc6 <RNG_PLAT_SetUserRngParameters+0x3e>
   29dc2:	f043 0302 	orr.w	r3, r3, #2
   29dc6:	68a2      	ldr	r2, [r4, #8]
   29dc8:	b932      	cbnz	r2, 29dd8 <RNG_PLAT_SetUserRngParameters+0x50>
   29dca:	68e2      	ldr	r2, [r4, #12]
   29dcc:	b942      	cbnz	r2, 29de0 <RNG_PLAT_SetUserRngParameters+0x58>
   29dce:	e9c4 3208 	strd	r3, r2, [r4, #32]
   29dd2:	b97b      	cbnz	r3, 29df4 <RNG_PLAT_SetUserRngParameters+0x6c>
   29dd4:	4d09      	ldr	r5, [pc, #36]	; (29dfc <RNG_PLAT_SetUserRngParameters+0x74>)
   29dd6:	e7e5      	b.n	29da4 <RNG_PLAT_SetUserRngParameters+0x1c>
   29dd8:	68e2      	ldr	r2, [r4, #12]
   29dda:	f043 0304 	orr.w	r3, r3, #4
   29dde:	b13a      	cbz	r2, 29df0 <RNG_PLAT_SetUserRngParameters+0x68>
   29de0:	f043 0308 	orr.w	r3, r3, #8
   29de4:	2200      	movs	r2, #0
   29de6:	4628      	mov	r0, r5
   29de8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   29dec:	b003      	add	sp, #12
   29dee:	bd30      	pop	{r4, r5, pc}
   29df0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   29df4:	4615      	mov	r5, r2
   29df6:	e7d9      	b.n	29dac <RNG_PLAT_SetUserRngParameters+0x24>
   29df8:	00f00c37 	.word	0x00f00c37
   29dfc:	00f00c0e 	.word	0x00f00c0e

00029e00 <CC_PalMemCopyPlat>:
   29e00:	f006 bd64 	b.w	308cc <memmove>

00029e04 <CC_PalMemSetPlat>:
   29e04:	f006 bd7c 	b.w	30900 <memset>

00029e08 <CC_PalMemSetZeroPlat>:
   29e08:	460a      	mov	r2, r1
   29e0a:	2100      	movs	r1, #0
   29e0c:	f006 bd78 	b.w	30900 <memset>

00029e10 <CC_PalTrngParamGet>:
   29e10:	b118      	cbz	r0, 29e1a <CC_PalTrngParamGet+0xa>
   29e12:	b111      	cbz	r1, 29e1a <CC_PalTrngParamGet+0xa>
   29e14:	680b      	ldr	r3, [r1, #0]
   29e16:	2b1c      	cmp	r3, #28
   29e18:	d001      	beq.n	29e1e <CC_PalTrngParamGet+0xe>
   29e1a:	2001      	movs	r0, #1
   29e1c:	4770      	bx	lr
   29e1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29e22:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   29e26:	3201      	adds	r2, #1
   29e28:	bf14      	ite	ne
   29e2a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   29e2e:	f241 225c 	movweq	r2, #4700	; 0x125c
   29e32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29e36:	6002      	str	r2, [r0, #0]
   29e38:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   29e3c:	3201      	adds	r2, #1
   29e3e:	bf14      	ite	ne
   29e40:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   29e44:	f641 1264 	movweq	r2, #6500	; 0x1964
   29e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29e4c:	6042      	str	r2, [r0, #4]
   29e4e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   29e52:	3201      	adds	r2, #1
   29e54:	bf14      	ite	ne
   29e56:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   29e5a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   29e5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29e62:	6082      	str	r2, [r0, #8]
   29e64:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   29e68:	3201      	adds	r2, #1
   29e6a:	bf14      	ite	ne
   29e6c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   29e70:	f241 3288 	movweq	r2, #5000	; 0x1388
   29e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29e78:	60c2      	str	r2, [r0, #12]
   29e7a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   29e7e:	3201      	adds	r2, #1
   29e80:	bf14      	ite	ne
   29e82:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   29e86:	2290      	moveq	r2, #144	; 0x90
   29e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29e8c:	6102      	str	r2, [r0, #16]
   29e8e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   29e92:	3201      	adds	r2, #1
   29e94:	bf14      	ite	ne
   29e96:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   29e9a:	2251      	moveq	r2, #81	; 0x51
   29e9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29ea0:	6142      	str	r2, [r0, #20]
   29ea2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   29ea6:	3201      	adds	r2, #1
   29ea8:	bf14      	ite	ne
   29eaa:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   29eae:	f240 3337 	movweq	r3, #823	; 0x337
   29eb2:	6183      	str	r3, [r0, #24]
   29eb4:	2000      	movs	r0, #0
   29eb6:	4770      	bx	lr

00029eb8 <LLF_RND_WaitRngInterrupt>:
   29eb8:	b508      	push	{r3, lr}
   29eba:	4601      	mov	r1, r0
   29ebc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   29ec0:	f7ff f95a 	bl	29178 <CC_HalWaitInterruptRND>
   29ec4:	4902      	ldr	r1, [pc, #8]	; (29ed0 <LLF_RND_WaitRngInterrupt+0x18>)
   29ec6:	4a03      	ldr	r2, [pc, #12]	; (29ed4 <LLF_RND_WaitRngInterrupt+0x1c>)
   29ec8:	2300      	movs	r3, #0
   29eca:	600b      	str	r3, [r1, #0]
   29ecc:	6013      	str	r3, [r2, #0]
   29ece:	bd08      	pop	{r3, pc}
   29ed0:	5002b1c8 	.word	0x5002b1c8
   29ed4:	5002b12c 	.word	0x5002b12c

00029ed8 <LLF_RND_GetRoscSampleCnt>:
   29ed8:	3801      	subs	r0, #1
   29eda:	2807      	cmp	r0, #7
   29edc:	d805      	bhi.n	29eea <LLF_RND_GetRoscSampleCnt+0x12>
   29ede:	e8df f000 	tbb	[pc, r0]
   29ee2:	0e0a      	.short	0x0e0a
   29ee4:	04041204 	.word	0x04041204
   29ee8:	0604      	.short	0x0604
   29eea:	4809      	ldr	r0, [pc, #36]	; (29f10 <LLF_RND_GetRoscSampleCnt+0x38>)
   29eec:	4770      	bx	lr
   29eee:	68cb      	ldr	r3, [r1, #12]
   29ef0:	624b      	str	r3, [r1, #36]	; 0x24
   29ef2:	2000      	movs	r0, #0
   29ef4:	4770      	bx	lr
   29ef6:	680b      	ldr	r3, [r1, #0]
   29ef8:	624b      	str	r3, [r1, #36]	; 0x24
   29efa:	2000      	movs	r0, #0
   29efc:	4770      	bx	lr
   29efe:	684b      	ldr	r3, [r1, #4]
   29f00:	624b      	str	r3, [r1, #36]	; 0x24
   29f02:	2000      	movs	r0, #0
   29f04:	4770      	bx	lr
   29f06:	688b      	ldr	r3, [r1, #8]
   29f08:	624b      	str	r3, [r1, #36]	; 0x24
   29f0a:	2000      	movs	r0, #0
   29f0c:	4770      	bx	lr
   29f0e:	bf00      	nop
   29f10:	00f10c31 	.word	0x00f10c31

00029f14 <LLF_RND_GetFastestRosc>:
   29f14:	680b      	ldr	r3, [r1, #0]
   29f16:	e002      	b.n	29f1e <LLF_RND_GetFastestRosc+0xa>
   29f18:	2b08      	cmp	r3, #8
   29f1a:	600b      	str	r3, [r1, #0]
   29f1c:	d806      	bhi.n	29f2c <LLF_RND_GetFastestRosc+0x18>
   29f1e:	6a02      	ldr	r2, [r0, #32]
   29f20:	4213      	tst	r3, r2
   29f22:	ea4f 0343 	mov.w	r3, r3, lsl #1
   29f26:	d0f7      	beq.n	29f18 <LLF_RND_GetFastestRosc+0x4>
   29f28:	2000      	movs	r0, #0
   29f2a:	4770      	bx	lr
   29f2c:	4800      	ldr	r0, [pc, #0]	; (29f30 <LLF_RND_GetFastestRosc+0x1c>)
   29f2e:	4770      	bx	lr
   29f30:	00f10c31 	.word	0x00f10c31

00029f34 <LLF_RND_TurnOffTrng>:
   29f34:	4904      	ldr	r1, [pc, #16]	; (29f48 <LLF_RND_TurnOffTrng+0x14>)
   29f36:	4a05      	ldr	r2, [pc, #20]	; (29f4c <LLF_RND_TurnOffTrng+0x18>)
   29f38:	2300      	movs	r3, #0
   29f3a:	600b      	str	r3, [r1, #0]
   29f3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   29f40:	6013      	str	r3, [r2, #0]
   29f42:	f7ff b8ff 	b.w	29144 <CC_HalClearInterruptBit>
   29f46:	bf00      	nop
   29f48:	5002b12c 	.word	0x5002b12c
   29f4c:	5002b1c4 	.word	0x5002b1c4

00029f50 <SetDataBuffersInfo>:
   29f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   29f52:	b083      	sub	sp, #12
   29f54:	2400      	movs	r4, #0
   29f56:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   29f5a:	f88d 4007 	strb.w	r4, [sp, #7]
   29f5e:	d325      	bcc.n	29fac <SetDataBuffersInfo+0x5c>
   29f60:	460c      	mov	r4, r1
   29f62:	4404      	add	r4, r0
   29f64:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   29f68:	4605      	mov	r5, r0
   29f6a:	d81f      	bhi.n	29fac <SetDataBuffersInfo+0x5c>
   29f6c:	4617      	mov	r7, r2
   29f6e:	461e      	mov	r6, r3
   29f70:	2201      	movs	r2, #1
   29f72:	f10d 0307 	add.w	r3, sp, #7
   29f76:	f000 fe7f 	bl	2ac78 <CC_PalDataBufferAttrGet>
   29f7a:	4604      	mov	r4, r0
   29f7c:	b9b0      	cbnz	r0, 29fac <SetDataBuffersInfo+0x5c>
   29f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29f80:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29f84:	603d      	str	r5, [r7, #0]
   29f86:	713b      	strb	r3, [r7, #4]
   29f88:	b192      	cbz	r2, 29fb0 <SetDataBuffersInfo+0x60>
   29f8a:	b14e      	cbz	r6, 29fa0 <SetDataBuffersInfo+0x50>
   29f8c:	4602      	mov	r2, r0
   29f8e:	9908      	ldr	r1, [sp, #32]
   29f90:	f10d 0307 	add.w	r3, sp, #7
   29f94:	4630      	mov	r0, r6
   29f96:	f000 fe6f 	bl	2ac78 <CC_PalDataBufferAttrGet>
   29f9a:	b938      	cbnz	r0, 29fac <SetDataBuffersInfo+0x5c>
   29f9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29fa2:	4620      	mov	r0, r4
   29fa4:	6016      	str	r6, [r2, #0]
   29fa6:	7113      	strb	r3, [r2, #4]
   29fa8:	b003      	add	sp, #12
   29faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29fac:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   29fb0:	4620      	mov	r0, r4
   29fb2:	b003      	add	sp, #12
   29fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29fb6:	bf00      	nop

00029fb8 <InitHashDrv>:
   29fb8:	b1e8      	cbz	r0, 29ff6 <InitHashDrv+0x3e>
   29fba:	b510      	push	{r4, lr}
   29fbc:	6804      	ldr	r4, [r0, #0]
   29fbe:	2c01      	cmp	r4, #1
   29fc0:	d004      	beq.n	29fcc <InitHashDrv+0x14>
   29fc2:	2c02      	cmp	r4, #2
   29fc4:	d010      	beq.n	29fe8 <InitHashDrv+0x30>
   29fc6:	b144      	cbz	r4, 29fda <InitHashDrv+0x22>
   29fc8:	480c      	ldr	r0, [pc, #48]	; (29ffc <InitHashDrv+0x44>)
   29fca:	bd10      	pop	{r4, pc}
   29fcc:	490c      	ldr	r1, [pc, #48]	; (2a000 <InitHashDrv+0x48>)
   29fce:	2220      	movs	r2, #32
   29fd0:	3008      	adds	r0, #8
   29fd2:	f7ff ff15 	bl	29e00 <CC_PalMemCopyPlat>
   29fd6:	2000      	movs	r0, #0
   29fd8:	bd10      	pop	{r4, pc}
   29fda:	490a      	ldr	r1, [pc, #40]	; (2a004 <InitHashDrv+0x4c>)
   29fdc:	2214      	movs	r2, #20
   29fde:	3008      	adds	r0, #8
   29fe0:	f7ff ff0e 	bl	29e00 <CC_PalMemCopyPlat>
   29fe4:	4620      	mov	r0, r4
   29fe6:	bd10      	pop	{r4, pc}
   29fe8:	4907      	ldr	r1, [pc, #28]	; (2a008 <InitHashDrv+0x50>)
   29fea:	2220      	movs	r2, #32
   29fec:	3008      	adds	r0, #8
   29fee:	f7ff ff07 	bl	29e00 <CC_PalMemCopyPlat>
   29ff2:	2000      	movs	r0, #0
   29ff4:	bd10      	pop	{r4, pc}
   29ff6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   29ffa:	4770      	bx	lr
   29ffc:	00f30001 	.word	0x00f30001
   2a000:	000366a8 	.word	0x000366a8
   2a004:	00036674 	.word	0x00036674
   2a008:	00036688 	.word	0x00036688

0002a00c <ProcessHashDrv>:
   2a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a010:	2900      	cmp	r1, #0
   2a012:	f000 80ef 	beq.w	2a1f4 <ProcessHashDrv+0x1e8>
   2a016:	4604      	mov	r4, r0
   2a018:	2800      	cmp	r0, #0
   2a01a:	f000 80ef 	beq.w	2a1fc <ProcessHashDrv+0x1f0>
   2a01e:	6803      	ldr	r3, [r0, #0]
   2a020:	4617      	mov	r7, r2
   2a022:	460e      	mov	r6, r1
   2a024:	2b00      	cmp	r3, #0
   2a026:	f000 80b9 	beq.w	2a19c <ProcessHashDrv+0x190>
   2a02a:	3b01      	subs	r3, #1
   2a02c:	2b01      	cmp	r3, #1
   2a02e:	f200 80cd 	bhi.w	2a1cc <ProcessHashDrv+0x1c0>
   2a032:	4874      	ldr	r0, [pc, #464]	; (2a204 <ProcessHashDrv+0x1f8>)
   2a034:	f04f 31ff 	mov.w	r1, #4294967295
   2a038:	f04f 0802 	mov.w	r8, #2
   2a03c:	f7ff f92a 	bl	29294 <CC_PalMutexLock>
   2a040:	2800      	cmp	r0, #0
   2a042:	f040 80b5 	bne.w	2a1b0 <ProcessHashDrv+0x1a4>
   2a046:	2000      	movs	r0, #0
   2a048:	f7ff f954 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2a04c:	4605      	mov	r5, r0
   2a04e:	2800      	cmp	r0, #0
   2a050:	f040 80b8 	bne.w	2a1c4 <ProcessHashDrv+0x1b8>
   2a054:	4a6c      	ldr	r2, [pc, #432]	; (2a208 <ProcessHashDrv+0x1fc>)
   2a056:	6813      	ldr	r3, [r2, #0]
   2a058:	2b00      	cmp	r3, #0
   2a05a:	d1fc      	bne.n	2a056 <ProcessHashDrv+0x4a>
   2a05c:	486b      	ldr	r0, [pc, #428]	; (2a20c <ProcessHashDrv+0x200>)
   2a05e:	6803      	ldr	r3, [r0, #0]
   2a060:	2b00      	cmp	r3, #0
   2a062:	d1fc      	bne.n	2a05e <ProcessHashDrv+0x52>
   2a064:	f04f 30ff 	mov.w	r0, #4294967295
   2a068:	f7ff f86c 	bl	29144 <CC_HalClearInterruptBit>
   2a06c:	4b68      	ldr	r3, [pc, #416]	; (2a210 <ProcessHashDrv+0x204>)
   2a06e:	6818      	ldr	r0, [r3, #0]
   2a070:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   2a074:	f7ff f874 	bl	29160 <CC_HalMaskInterrupt>
   2a078:	4866      	ldr	r0, [pc, #408]	; (2a214 <ProcessHashDrv+0x208>)
   2a07a:	4a67      	ldr	r2, [pc, #412]	; (2a218 <ProcessHashDrv+0x20c>)
   2a07c:	4967      	ldr	r1, [pc, #412]	; (2a21c <ProcessHashDrv+0x210>)
   2a07e:	2301      	movs	r3, #1
   2a080:	6003      	str	r3, [r0, #0]
   2a082:	2007      	movs	r0, #7
   2a084:	6010      	str	r0, [r2, #0]
   2a086:	600b      	str	r3, [r1, #0]
   2a088:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   2a08c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2a08e:	6013      	str	r3, [r2, #0]
   2a090:	4b63      	ldr	r3, [pc, #396]	; (2a220 <ProcessHashDrv+0x214>)
   2a092:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   2a094:	6051      	str	r1, [r2, #4]
   2a096:	f8c3 8000 	str.w	r8, [r3]
   2a09a:	6823      	ldr	r3, [r4, #0]
   2a09c:	b15b      	cbz	r3, 2a0b6 <ProcessHashDrv+0xaa>
   2a09e:	3b01      	subs	r3, #1
   2a0a0:	2b01      	cmp	r3, #1
   2a0a2:	d817      	bhi.n	2a0d4 <ProcessHashDrv+0xc8>
   2a0a4:	4b5f      	ldr	r3, [pc, #380]	; (2a224 <ProcessHashDrv+0x218>)
   2a0a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2a0a8:	601a      	str	r2, [r3, #0]
   2a0aa:	6a22      	ldr	r2, [r4, #32]
   2a0ac:	f843 2c04 	str.w	r2, [r3, #-4]
   2a0b0:	69e2      	ldr	r2, [r4, #28]
   2a0b2:	f843 2c08 	str.w	r2, [r3, #-8]
   2a0b6:	4b5c      	ldr	r3, [pc, #368]	; (2a228 <ProcessHashDrv+0x21c>)
   2a0b8:	69a2      	ldr	r2, [r4, #24]
   2a0ba:	601a      	str	r2, [r3, #0]
   2a0bc:	6962      	ldr	r2, [r4, #20]
   2a0be:	f843 2c04 	str.w	r2, [r3, #-4]
   2a0c2:	6922      	ldr	r2, [r4, #16]
   2a0c4:	f843 2c08 	str.w	r2, [r3, #-8]
   2a0c8:	68e2      	ldr	r2, [r4, #12]
   2a0ca:	f843 2c0c 	str.w	r2, [r3, #-12]
   2a0ce:	68a2      	ldr	r2, [r4, #8]
   2a0d0:	f843 2c10 	str.w	r2, [r3, #-16]
   2a0d4:	4a55      	ldr	r2, [pc, #340]	; (2a22c <ProcessHashDrv+0x220>)
   2a0d6:	6813      	ldr	r3, [r2, #0]
   2a0d8:	2b00      	cmp	r3, #0
   2a0da:	d1fc      	bne.n	2a0d6 <ProcessHashDrv+0xca>
   2a0dc:	2f00      	cmp	r7, #0
   2a0de:	d059      	beq.n	2a194 <ProcessHashDrv+0x188>
   2a0e0:	6863      	ldr	r3, [r4, #4]
   2a0e2:	2b01      	cmp	r3, #1
   2a0e4:	bf04      	itt	eq
   2a0e6:	4a52      	ldreq	r2, [pc, #328]	; (2a230 <ProcessHashDrv+0x224>)
   2a0e8:	6013      	streq	r3, [r2, #0]
   2a0ea:	4a52      	ldr	r2, [pc, #328]	; (2a234 <ProcessHashDrv+0x228>)
   2a0ec:	4b52      	ldr	r3, [pc, #328]	; (2a238 <ProcessHashDrv+0x22c>)
   2a0ee:	6831      	ldr	r1, [r6, #0]
   2a0f0:	6011      	str	r1, [r2, #0]
   2a0f2:	2040      	movs	r0, #64	; 0x40
   2a0f4:	601f      	str	r7, [r3, #0]
   2a0f6:	f7ff f839 	bl	2916c <CC_HalWaitInterrupt>
   2a0fa:	4605      	mov	r5, r0
   2a0fc:	4a4b      	ldr	r2, [pc, #300]	; (2a22c <ProcessHashDrv+0x220>)
   2a0fe:	6813      	ldr	r3, [r2, #0]
   2a100:	2b00      	cmp	r3, #0
   2a102:	d1fc      	bne.n	2a0fe <ProcessHashDrv+0xf2>
   2a104:	4a41      	ldr	r2, [pc, #260]	; (2a20c <ProcessHashDrv+0x200>)
   2a106:	6813      	ldr	r3, [r2, #0]
   2a108:	2b00      	cmp	r3, #0
   2a10a:	d1fc      	bne.n	2a106 <ProcessHashDrv+0xfa>
   2a10c:	6823      	ldr	r3, [r4, #0]
   2a10e:	b15b      	cbz	r3, 2a128 <ProcessHashDrv+0x11c>
   2a110:	3b01      	subs	r3, #1
   2a112:	2b01      	cmp	r3, #1
   2a114:	d817      	bhi.n	2a146 <ProcessHashDrv+0x13a>
   2a116:	4a43      	ldr	r2, [pc, #268]	; (2a224 <ProcessHashDrv+0x218>)
   2a118:	4b48      	ldr	r3, [pc, #288]	; (2a23c <ProcessHashDrv+0x230>)
   2a11a:	6812      	ldr	r2, [r2, #0]
   2a11c:	6262      	str	r2, [r4, #36]	; 0x24
   2a11e:	681a      	ldr	r2, [r3, #0]
   2a120:	6222      	str	r2, [r4, #32]
   2a122:	3b04      	subs	r3, #4
   2a124:	681b      	ldr	r3, [r3, #0]
   2a126:	61e3      	str	r3, [r4, #28]
   2a128:	4a3f      	ldr	r2, [pc, #252]	; (2a228 <ProcessHashDrv+0x21c>)
   2a12a:	4b45      	ldr	r3, [pc, #276]	; (2a240 <ProcessHashDrv+0x234>)
   2a12c:	6812      	ldr	r2, [r2, #0]
   2a12e:	61a2      	str	r2, [r4, #24]
   2a130:	681a      	ldr	r2, [r3, #0]
   2a132:	6162      	str	r2, [r4, #20]
   2a134:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2a138:	6122      	str	r2, [r4, #16]
   2a13a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   2a13e:	60e2      	str	r2, [r4, #12]
   2a140:	3b0c      	subs	r3, #12
   2a142:	681b      	ldr	r3, [r3, #0]
   2a144:	60a3      	str	r3, [r4, #8]
   2a146:	4b3f      	ldr	r3, [pc, #252]	; (2a244 <ProcessHashDrv+0x238>)
   2a148:	4a3f      	ldr	r2, [pc, #252]	; (2a248 <ProcessHashDrv+0x23c>)
   2a14a:	681b      	ldr	r3, [r3, #0]
   2a14c:	64a3      	str	r3, [r4, #72]	; 0x48
   2a14e:	6812      	ldr	r2, [r2, #0]
   2a150:	4b32      	ldr	r3, [pc, #200]	; (2a21c <ProcessHashDrv+0x210>)
   2a152:	64e2      	str	r2, [r4, #76]	; 0x4c
   2a154:	4836      	ldr	r0, [pc, #216]	; (2a230 <ProcessHashDrv+0x224>)
   2a156:	493d      	ldr	r1, [pc, #244]	; (2a24c <ProcessHashDrv+0x240>)
   2a158:	2201      	movs	r2, #1
   2a15a:	601a      	str	r2, [r3, #0]
   2a15c:	2300      	movs	r3, #0
   2a15e:	4a33      	ldr	r2, [pc, #204]	; (2a22c <ProcessHashDrv+0x220>)
   2a160:	6003      	str	r3, [r0, #0]
   2a162:	600b      	str	r3, [r1, #0]
   2a164:	6813      	ldr	r3, [r2, #0]
   2a166:	2b00      	cmp	r3, #0
   2a168:	d1fc      	bne.n	2a164 <ProcessHashDrv+0x158>
   2a16a:	4a2a      	ldr	r2, [pc, #168]	; (2a214 <ProcessHashDrv+0x208>)
   2a16c:	6013      	str	r3, [r2, #0]
   2a16e:	2d00      	cmp	r5, #0
   2a170:	d13a      	bne.n	2a1e8 <ProcessHashDrv+0x1dc>
   2a172:	4b27      	ldr	r3, [pc, #156]	; (2a210 <ProcessHashDrv+0x204>)
   2a174:	6818      	ldr	r0, [r3, #0]
   2a176:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   2a17a:	f7fe fff1 	bl	29160 <CC_HalMaskInterrupt>
   2a17e:	2001      	movs	r0, #1
   2a180:	f7ff f8b8 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2a184:	bb60      	cbnz	r0, 2a1e0 <ProcessHashDrv+0x1d4>
   2a186:	481f      	ldr	r0, [pc, #124]	; (2a204 <ProcessHashDrv+0x1f8>)
   2a188:	f7ff f88c 	bl	292a4 <CC_PalMutexUnlock>
   2a18c:	bb10      	cbnz	r0, 2a1d4 <ProcessHashDrv+0x1c8>
   2a18e:	4628      	mov	r0, r5
   2a190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a194:	4b2d      	ldr	r3, [pc, #180]	; (2a24c <ProcessHashDrv+0x240>)
   2a196:	2204      	movs	r2, #4
   2a198:	601a      	str	r2, [r3, #0]
   2a19a:	e7af      	b.n	2a0fc <ProcessHashDrv+0xf0>
   2a19c:	4819      	ldr	r0, [pc, #100]	; (2a204 <ProcessHashDrv+0x1f8>)
   2a19e:	f04f 31ff 	mov.w	r1, #4294967295
   2a1a2:	f04f 0801 	mov.w	r8, #1
   2a1a6:	f7ff f875 	bl	29294 <CC_PalMutexLock>
   2a1aa:	2800      	cmp	r0, #0
   2a1ac:	f43f af4b 	beq.w	2a046 <ProcessHashDrv+0x3a>
   2a1b0:	4827      	ldr	r0, [pc, #156]	; (2a250 <ProcessHashDrv+0x244>)
   2a1b2:	f7fe f923 	bl	283fc <CC_PalAbort>
   2a1b6:	2000      	movs	r0, #0
   2a1b8:	f7ff f89c 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2a1bc:	4605      	mov	r5, r0
   2a1be:	2800      	cmp	r0, #0
   2a1c0:	f43f af48 	beq.w	2a054 <ProcessHashDrv+0x48>
   2a1c4:	4823      	ldr	r0, [pc, #140]	; (2a254 <ProcessHashDrv+0x248>)
   2a1c6:	f7fe f919 	bl	283fc <CC_PalAbort>
   2a1ca:	e743      	b.n	2a054 <ProcessHashDrv+0x48>
   2a1cc:	4d22      	ldr	r5, [pc, #136]	; (2a258 <ProcessHashDrv+0x24c>)
   2a1ce:	4628      	mov	r0, r5
   2a1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a1d4:	4821      	ldr	r0, [pc, #132]	; (2a25c <ProcessHashDrv+0x250>)
   2a1d6:	f7fe f911 	bl	283fc <CC_PalAbort>
   2a1da:	4628      	mov	r0, r5
   2a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a1e0:	481f      	ldr	r0, [pc, #124]	; (2a260 <ProcessHashDrv+0x254>)
   2a1e2:	f7fe f90b 	bl	283fc <CC_PalAbort>
   2a1e6:	e7ce      	b.n	2a186 <ProcessHashDrv+0x17a>
   2a1e8:	f104 0008 	add.w	r0, r4, #8
   2a1ec:	2110      	movs	r1, #16
   2a1ee:	f7ff fe0b 	bl	29e08 <CC_PalMemSetZeroPlat>
   2a1f2:	e7be      	b.n	2a172 <ProcessHashDrv+0x166>
   2a1f4:	4d1b      	ldr	r5, [pc, #108]	; (2a264 <ProcessHashDrv+0x258>)
   2a1f6:	4628      	mov	r0, r5
   2a1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a1fc:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   2a200:	e7c5      	b.n	2a18e <ProcessHashDrv+0x182>
   2a202:	bf00      	nop
   2a204:	200008cc 	.word	0x200008cc
   2a208:	5002b91c 	.word	0x5002b91c
   2a20c:	5002bc20 	.word	0x5002bc20
   2a210:	5002ba04 	.word	0x5002ba04
   2a214:	5002b818 	.word	0x5002b818
   2a218:	5002b900 	.word	0x5002b900
   2a21c:	5002b7c4 	.word	0x5002b7c4
   2a220:	5002b7c0 	.word	0x5002b7c0
   2a224:	5002b65c 	.word	0x5002b65c
   2a228:	5002b650 	.word	0x5002b650
   2a22c:	5002b910 	.word	0x5002b910
   2a230:	5002b684 	.word	0x5002b684
   2a234:	5002bc28 	.word	0x5002bc28
   2a238:	5002bc2c 	.word	0x5002bc2c
   2a23c:	5002b658 	.word	0x5002b658
   2a240:	5002b64c 	.word	0x5002b64c
   2a244:	5002b7cc 	.word	0x5002b7cc
   2a248:	5002b7d0 	.word	0x5002b7d0
   2a24c:	5002b7c8 	.word	0x5002b7c8
   2a250:	000365a8 	.word	0x000365a8
   2a254:	000365c0 	.word	0x000365c0
   2a258:	00f30001 	.word	0x00f30001
   2a25c:	00036600 	.word	0x00036600
   2a260:	000365e0 	.word	0x000365e0
   2a264:	00f30003 	.word	0x00f30003

0002a268 <FinishHashDrv>:
   2a268:	2800      	cmp	r0, #0
   2a26a:	d03b      	beq.n	2a2e4 <FinishHashDrv+0x7c>
   2a26c:	b4f0      	push	{r4, r5, r6, r7}
   2a26e:	b082      	sub	sp, #8
   2a270:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2a272:	9301      	str	r3, [sp, #4]
   2a274:	6883      	ldr	r3, [r0, #8]
   2a276:	fa93 fc83 	rev.w	ip, r3
   2a27a:	9b01      	ldr	r3, [sp, #4]
   2a27c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   2a280:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   2a284:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   2a288:	ba1b      	rev	r3, r3
   2a28a:	6243      	str	r3, [r0, #36]	; 0x24
   2a28c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   2a28e:	9301      	str	r3, [sp, #4]
   2a290:	ba09      	rev	r1, r1
   2a292:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2a294:	61c1      	str	r1, [r0, #28]
   2a296:	ba12      	rev	r2, r2
   2a298:	6202      	str	r2, [r0, #32]
   2a29a:	ba3f      	rev	r7, r7
   2a29c:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   2a2a0:	ba36      	rev	r6, r6
   2a2a2:	ba2d      	rev	r5, r5
   2a2a4:	ba24      	rev	r4, r4
   2a2a6:	e9c0 c702 	strd	ip, r7, [r0, #8]
   2a2aa:	e9c0 6504 	strd	r6, r5, [r0, #16]
   2a2ae:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   2a2b0:	6b06      	ldr	r6, [r0, #48]	; 0x30
   2a2b2:	6b45      	ldr	r5, [r0, #52]	; 0x34
   2a2b4:	6184      	str	r4, [r0, #24]
   2a2b6:	fa93 fc83 	rev.w	ip, r3
   2a2ba:	6b84      	ldr	r4, [r0, #56]	; 0x38
   2a2bc:	9b01      	ldr	r3, [sp, #4]
   2a2be:	ba3f      	rev	r7, r7
   2a2c0:	ba36      	rev	r6, r6
   2a2c2:	ba2d      	rev	r5, r5
   2a2c4:	ba24      	rev	r4, r4
   2a2c6:	ba09      	rev	r1, r1
   2a2c8:	ba12      	rev	r2, r2
   2a2ca:	ba1b      	rev	r3, r3
   2a2cc:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   2a2d0:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   2a2d4:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   2a2d8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   2a2dc:	2000      	movs	r0, #0
   2a2de:	b002      	add	sp, #8
   2a2e0:	bcf0      	pop	{r4, r5, r6, r7}
   2a2e2:	4770      	bx	lr
   2a2e4:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2a2e8:	4770      	bx	lr
   2a2ea:	bf00      	nop

0002a2ec <LoadAesKey>:
   2a2ec:	2800      	cmp	r0, #0
   2a2ee:	d03b      	beq.n	2a368 <LoadAesKey+0x7c>
   2a2f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   2a2f4:	2b00      	cmp	r3, #0
   2a2f6:	d02c      	beq.n	2a352 <LoadAesKey+0x66>
   2a2f8:	2b03      	cmp	r3, #3
   2a2fa:	b510      	push	{r4, lr}
   2a2fc:	d00f      	beq.n	2a31e <LoadAesKey+0x32>
   2a2fe:	481c      	ldr	r0, [pc, #112]	; (2a370 <LoadAesKey+0x84>)
   2a300:	4c1c      	ldr	r4, [pc, #112]	; (2a374 <LoadAesKey+0x88>)
   2a302:	6822      	ldr	r2, [r4, #0]
   2a304:	4b1c      	ldr	r3, [pc, #112]	; (2a378 <LoadAesKey+0x8c>)
   2a306:	6812      	ldr	r2, [r2, #0]
   2a308:	601a      	str	r2, [r3, #0]
   2a30a:	6822      	ldr	r2, [r4, #0]
   2a30c:	6852      	ldr	r2, [r2, #4]
   2a30e:	605a      	str	r2, [r3, #4]
   2a310:	6822      	ldr	r2, [r4, #0]
   2a312:	6892      	ldr	r2, [r2, #8]
   2a314:	609a      	str	r2, [r3, #8]
   2a316:	6822      	ldr	r2, [r4, #0]
   2a318:	68d2      	ldr	r2, [r2, #12]
   2a31a:	60da      	str	r2, [r3, #12]
   2a31c:	bd10      	pop	{r4, pc}
   2a31e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2a320:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2a322:	4c14      	ldr	r4, [pc, #80]	; (2a374 <LoadAesKey+0x88>)
   2a324:	f000 fba4 	bl	2aa70 <kmu_validate_kdr_slot_and_size>
   2a328:	2800      	cmp	r0, #0
   2a32a:	d1ea      	bne.n	2a302 <LoadAesKey+0x16>
   2a32c:	6821      	ldr	r1, [r4, #0]
   2a32e:	4a12      	ldr	r2, [pc, #72]	; (2a378 <LoadAesKey+0x8c>)
   2a330:	6809      	ldr	r1, [r1, #0]
   2a332:	6011      	str	r1, [r2, #0]
   2a334:	6821      	ldr	r1, [r4, #0]
   2a336:	4b11      	ldr	r3, [pc, #68]	; (2a37c <LoadAesKey+0x90>)
   2a338:	6849      	ldr	r1, [r1, #4]
   2a33a:	6019      	str	r1, [r3, #0]
   2a33c:	6821      	ldr	r1, [r4, #0]
   2a33e:	6889      	ldr	r1, [r1, #8]
   2a340:	6091      	str	r1, [r2, #8]
   2a342:	6822      	ldr	r2, [r4, #0]
   2a344:	68d2      	ldr	r2, [r2, #12]
   2a346:	609a      	str	r2, [r3, #8]
   2a348:	f000 fb9e 	bl	2aa88 <kmu_use_kdr_key>
   2a34c:	2800      	cmp	r0, #0
   2a34e:	d1d8      	bne.n	2a302 <LoadAesKey+0x16>
   2a350:	bd10      	pop	{r4, pc}
   2a352:	4a09      	ldr	r2, [pc, #36]	; (2a378 <LoadAesKey+0x8c>)
   2a354:	6901      	ldr	r1, [r0, #16]
   2a356:	6011      	str	r1, [r2, #0]
   2a358:	6941      	ldr	r1, [r0, #20]
   2a35a:	6051      	str	r1, [r2, #4]
   2a35c:	6981      	ldr	r1, [r0, #24]
   2a35e:	6091      	str	r1, [r2, #8]
   2a360:	69c1      	ldr	r1, [r0, #28]
   2a362:	60d1      	str	r1, [r2, #12]
   2a364:	4618      	mov	r0, r3
   2a366:	4770      	bx	lr
   2a368:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   2a36c:	4770      	bx	lr
   2a36e:	bf00      	nop
   2a370:	00f10009 	.word	0x00f10009
   2a374:	200008bc 	.word	0x200008bc
   2a378:	5002b400 	.word	0x5002b400
   2a37c:	5002b404 	.word	0x5002b404

0002a380 <InitAes.part.0>:
   2a380:	4a32      	ldr	r2, [pc, #200]	; (2a44c <InitAes.part.0+0xcc>)
   2a382:	b510      	push	{r4, lr}
   2a384:	4604      	mov	r4, r0
   2a386:	6813      	ldr	r3, [r2, #0]
   2a388:	2b00      	cmp	r3, #0
   2a38a:	d1fc      	bne.n	2a386 <InitAes.part.0+0x6>
   2a38c:	4a30      	ldr	r2, [pc, #192]	; (2a450 <InitAes.part.0+0xd0>)
   2a38e:	6813      	ldr	r3, [r2, #0]
   2a390:	2b00      	cmp	r3, #0
   2a392:	d1fc      	bne.n	2a38e <InitAes.part.0+0xe>
   2a394:	4a2f      	ldr	r2, [pc, #188]	; (2a454 <InitAes.part.0+0xd4>)
   2a396:	6813      	ldr	r3, [r2, #0]
   2a398:	2b00      	cmp	r3, #0
   2a39a:	d1fc      	bne.n	2a396 <InitAes.part.0+0x16>
   2a39c:	4a2e      	ldr	r2, [pc, #184]	; (2a458 <InitAes.part.0+0xd8>)
   2a39e:	6813      	ldr	r3, [r2, #0]
   2a3a0:	2b00      	cmp	r3, #0
   2a3a2:	d1fc      	bne.n	2a39e <InitAes.part.0+0x1e>
   2a3a4:	4a2d      	ldr	r2, [pc, #180]	; (2a45c <InitAes.part.0+0xdc>)
   2a3a6:	6813      	ldr	r3, [r2, #0]
   2a3a8:	2b00      	cmp	r3, #0
   2a3aa:	d1fc      	bne.n	2a3a6 <InitAes.part.0+0x26>
   2a3ac:	4a2c      	ldr	r2, [pc, #176]	; (2a460 <InitAes.part.0+0xe0>)
   2a3ae:	6813      	ldr	r3, [r2, #0]
   2a3b0:	2b00      	cmp	r3, #0
   2a3b2:	d1fc      	bne.n	2a3ae <InitAes.part.0+0x2e>
   2a3b4:	f04f 30ff 	mov.w	r0, #4294967295
   2a3b8:	f7fe fec4 	bl	29144 <CC_HalClearInterruptBit>
   2a3bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a3be:	f023 0304 	bic.w	r3, r3, #4
   2a3c2:	2b03      	cmp	r3, #3
   2a3c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2a3c6:	d036      	beq.n	2a436 <InitAes.part.0+0xb6>
   2a3c8:	2b01      	cmp	r3, #1
   2a3ca:	4b26      	ldr	r3, [pc, #152]	; (2a464 <InitAes.part.0+0xe4>)
   2a3cc:	6818      	ldr	r0, [r3, #0]
   2a3ce:	bf0c      	ite	eq
   2a3d0:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   2a3d4:	f020 0020 	bicne.w	r0, r0, #32
   2a3d8:	f7fe fec2 	bl	29160 <CC_HalMaskInterrupt>
   2a3dc:	4b22      	ldr	r3, [pc, #136]	; (2a468 <InitAes.part.0+0xe8>)
   2a3de:	4a1b      	ldr	r2, [pc, #108]	; (2a44c <InitAes.part.0+0xcc>)
   2a3e0:	2101      	movs	r1, #1
   2a3e2:	6019      	str	r1, [r3, #0]
   2a3e4:	6813      	ldr	r3, [r2, #0]
   2a3e6:	2b00      	cmp	r3, #0
   2a3e8:	d1fc      	bne.n	2a3e4 <InitAes.part.0+0x64>
   2a3ea:	4a19      	ldr	r2, [pc, #100]	; (2a450 <InitAes.part.0+0xd0>)
   2a3ec:	6813      	ldr	r3, [r2, #0]
   2a3ee:	2b00      	cmp	r3, #0
   2a3f0:	d1fc      	bne.n	2a3ec <InitAes.part.0+0x6c>
   2a3f2:	491e      	ldr	r1, [pc, #120]	; (2a46c <InitAes.part.0+0xec>)
   2a3f4:	4a15      	ldr	r2, [pc, #84]	; (2a44c <InitAes.part.0+0xcc>)
   2a3f6:	600b      	str	r3, [r1, #0]
   2a3f8:	6813      	ldr	r3, [r2, #0]
   2a3fa:	2b00      	cmp	r3, #0
   2a3fc:	d1fc      	bne.n	2a3f8 <InitAes.part.0+0x78>
   2a3fe:	4a14      	ldr	r2, [pc, #80]	; (2a450 <InitAes.part.0+0xd0>)
   2a400:	6813      	ldr	r3, [r2, #0]
   2a402:	2b00      	cmp	r3, #0
   2a404:	d1fc      	bne.n	2a400 <InitAes.part.0+0x80>
   2a406:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2a408:	f022 0104 	bic.w	r1, r2, #4
   2a40c:	2903      	cmp	r1, #3
   2a40e:	bf18      	it	ne
   2a410:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   2a412:	4917      	ldr	r1, [pc, #92]	; (2a470 <InitAes.part.0+0xf0>)
   2a414:	ea4f 0282 	mov.w	r2, r2, lsl #2
   2a418:	bf18      	it	ne
   2a41a:	f003 0301 	andne.w	r3, r3, #1
   2a41e:	f002 021c 	and.w	r2, r2, #28
   2a422:	4313      	orrs	r3, r2
   2a424:	600b      	str	r3, [r1, #0]
   2a426:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a428:	2b07      	cmp	r3, #7
   2a42a:	d102      	bne.n	2a432 <InitAes.part.0+0xb2>
   2a42c:	4b11      	ldr	r3, [pc, #68]	; (2a474 <InitAes.part.0+0xf4>)
   2a42e:	2201      	movs	r2, #1
   2a430:	601a      	str	r2, [r3, #0]
   2a432:	2000      	movs	r0, #0
   2a434:	bd10      	pop	{r4, pc}
   2a436:	2b01      	cmp	r3, #1
   2a438:	4b0a      	ldr	r3, [pc, #40]	; (2a464 <InitAes.part.0+0xe4>)
   2a43a:	6818      	ldr	r0, [r3, #0]
   2a43c:	bf0c      	ite	eq
   2a43e:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   2a442:	f020 0010 	bicne.w	r0, r0, #16
   2a446:	f7fe fe8b 	bl	29160 <CC_HalMaskInterrupt>
   2a44a:	e7c7      	b.n	2a3dc <InitAes.part.0+0x5c>
   2a44c:	5002b910 	.word	0x5002b910
   2a450:	5002b470 	.word	0x5002b470
   2a454:	5002bd20 	.word	0x5002bd20
   2a458:	5002bc20 	.word	0x5002bc20
   2a45c:	5002bd38 	.word	0x5002bd38
   2a460:	5002bc38 	.word	0x5002bc38
   2a464:	5002ba04 	.word	0x5002ba04
   2a468:	5002b900 	.word	0x5002b900
   2a46c:	5002b4bc 	.word	0x5002b4bc
   2a470:	5002b4c0 	.word	0x5002b4c0
   2a474:	5002b47c 	.word	0x5002b47c

0002a478 <ProcessAesDrv>:
   2a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a47c:	b087      	sub	sp, #28
   2a47e:	2900      	cmp	r1, #0
   2a480:	f000 80a5 	beq.w	2a5ce <ProcessAesDrv+0x156>
   2a484:	4616      	mov	r6, r2
   2a486:	2a00      	cmp	r2, #0
   2a488:	f000 80a1 	beq.w	2a5ce <ProcessAesDrv+0x156>
   2a48c:	4604      	mov	r4, r0
   2a48e:	2800      	cmp	r0, #0
   2a490:	f000 813f 	beq.w	2a712 <ProcessAesDrv+0x29a>
   2a494:	461f      	mov	r7, r3
   2a496:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2a498:	460d      	mov	r5, r1
   2a49a:	2b00      	cmp	r3, #0
   2a49c:	d150      	bne.n	2a540 <ProcessAesDrv+0xc8>
   2a49e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   2a4a2:	d252      	bcs.n	2a54a <ProcessAesDrv+0xd2>
   2a4a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2a4a8:	2b04      	cmp	r3, #4
   2a4aa:	f000 8109 	beq.w	2a6c0 <ProcessAesDrv+0x248>
   2a4ae:	f04f 0800 	mov.w	r8, #0
   2a4b2:	48aa      	ldr	r0, [pc, #680]	; (2a75c <ProcessAesDrv+0x2e4>)
   2a4b4:	f04f 31ff 	mov.w	r1, #4294967295
   2a4b8:	f7fe feec 	bl	29294 <CC_PalMutexLock>
   2a4bc:	2800      	cmp	r0, #0
   2a4be:	f040 80de 	bne.w	2a67e <ProcessAesDrv+0x206>
   2a4c2:	2000      	movs	r0, #0
   2a4c4:	f7fe ff16 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2a4c8:	2800      	cmp	r0, #0
   2a4ca:	f040 80e1 	bne.w	2a690 <ProcessAesDrv+0x218>
   2a4ce:	4ba4      	ldr	r3, [pc, #656]	; (2a760 <ProcessAesDrv+0x2e8>)
   2a4d0:	4aa4      	ldr	r2, [pc, #656]	; (2a764 <ProcessAesDrv+0x2ec>)
   2a4d2:	2101      	movs	r1, #1
   2a4d4:	6019      	str	r1, [r3, #0]
   2a4d6:	6813      	ldr	r3, [r2, #0]
   2a4d8:	2b00      	cmp	r3, #0
   2a4da:	d1fc      	bne.n	2a4d6 <ProcessAesDrv+0x5e>
   2a4dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a4de:	2b03      	cmp	r3, #3
   2a4e0:	dc39      	bgt.n	2a556 <ProcessAesDrv+0xde>
   2a4e2:	2b00      	cmp	r3, #0
   2a4e4:	da3a      	bge.n	2a55c <ProcessAesDrv+0xe4>
   2a4e6:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 2a7b0 <ProcessAesDrv+0x338>
   2a4ea:	4a9e      	ldr	r2, [pc, #632]	; (2a764 <ProcessAesDrv+0x2ec>)
   2a4ec:	6813      	ldr	r3, [r2, #0]
   2a4ee:	2b00      	cmp	r3, #0
   2a4f0:	d1fc      	bne.n	2a4ec <ProcessAesDrv+0x74>
   2a4f2:	f1b8 0f00 	cmp.w	r8, #0
   2a4f6:	f040 80da 	bne.w	2a6ae <ProcessAesDrv+0x236>
   2a4fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a4fc:	f023 0304 	bic.w	r3, r3, #4
   2a500:	2b03      	cmp	r3, #3
   2a502:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2a504:	d058      	beq.n	2a5b8 <ProcessAesDrv+0x140>
   2a506:	2b01      	cmp	r3, #1
   2a508:	4b97      	ldr	r3, [pc, #604]	; (2a768 <ProcessAesDrv+0x2f0>)
   2a50a:	6818      	ldr	r0, [r3, #0]
   2a50c:	bf0c      	ite	eq
   2a50e:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   2a512:	f040 0020 	orrne.w	r0, r0, #32
   2a516:	f7fe fe23 	bl	29160 <CC_HalMaskInterrupt>
   2a51a:	4b91      	ldr	r3, [pc, #580]	; (2a760 <ProcessAesDrv+0x2e8>)
   2a51c:	2200      	movs	r2, #0
   2a51e:	601a      	str	r2, [r3, #0]
   2a520:	2001      	movs	r0, #1
   2a522:	f7fe fee7 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2a526:	2800      	cmp	r0, #0
   2a528:	f040 80bd 	bne.w	2a6a6 <ProcessAesDrv+0x22e>
   2a52c:	488b      	ldr	r0, [pc, #556]	; (2a75c <ProcessAesDrv+0x2e4>)
   2a52e:	f7fe feb9 	bl	292a4 <CC_PalMutexUnlock>
   2a532:	2800      	cmp	r0, #0
   2a534:	f040 80b0 	bne.w	2a698 <ProcessAesDrv+0x220>
   2a538:	4648      	mov	r0, r9
   2a53a:	b007      	add	sp, #28
   2a53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a540:	2b01      	cmp	r3, #1
   2a542:	d1af      	bne.n	2a4a4 <ProcessAesDrv+0x2c>
   2a544:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   2a548:	d3ac      	bcc.n	2a4a4 <ProcessAesDrv+0x2c>
   2a54a:	f8df 9268 	ldr.w	r9, [pc, #616]	; 2a7b4 <ProcessAesDrv+0x33c>
   2a54e:	4648      	mov	r0, r9
   2a550:	b007      	add	sp, #28
   2a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a556:	3b06      	subs	r3, #6
   2a558:	2b01      	cmp	r3, #1
   2a55a:	d8c4      	bhi.n	2a4e6 <ProcessAesDrv+0x6e>
   2a55c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2a55e:	2b01      	cmp	r3, #1
   2a560:	f200 80d4 	bhi.w	2a70c <ProcessAesDrv+0x294>
   2a564:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2a566:	2b01      	cmp	r3, #1
   2a568:	d837      	bhi.n	2a5da <ProcessAesDrv+0x162>
   2a56a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2a56c:	2b01      	cmp	r3, #1
   2a56e:	f200 8131 	bhi.w	2a7d4 <ProcessAesDrv+0x35c>
   2a572:	4620      	mov	r0, r4
   2a574:	f7ff ff04 	bl	2a380 <InitAes.part.0>
   2a578:	4681      	mov	r9, r0
   2a57a:	2800      	cmp	r0, #0
   2a57c:	d1b5      	bne.n	2a4ea <ProcessAesDrv+0x72>
   2a57e:	4620      	mov	r0, r4
   2a580:	f7ff feb4 	bl	2a2ec <LoadAesKey>
   2a584:	4681      	mov	r9, r0
   2a586:	2800      	cmp	r0, #0
   2a588:	d1af      	bne.n	2a4ea <ProcessAesDrv+0x72>
   2a58a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a58c:	2b07      	cmp	r3, #7
   2a58e:	d8aa      	bhi.n	2a4e6 <ProcessAesDrv+0x6e>
   2a590:	a201      	add	r2, pc, #4	; (adr r2, 2a598 <ProcessAesDrv+0x120>)
   2a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2a596:	bf00      	nop
   2a598:	0002a5f5 	.word	0x0002a5f5
   2a59c:	0002a5e1 	.word	0x0002a5e1
   2a5a0:	0002a751 	.word	0x0002a751
   2a5a4:	0002a5e1 	.word	0x0002a5e1
   2a5a8:	0002a4e7 	.word	0x0002a4e7
   2a5ac:	0002a4e7 	.word	0x0002a4e7
   2a5b0:	0002a751 	.word	0x0002a751
   2a5b4:	0002a5e1 	.word	0x0002a5e1
   2a5b8:	2b01      	cmp	r3, #1
   2a5ba:	4b6b      	ldr	r3, [pc, #428]	; (2a768 <ProcessAesDrv+0x2f0>)
   2a5bc:	6818      	ldr	r0, [r3, #0]
   2a5be:	bf0c      	ite	eq
   2a5c0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   2a5c4:	f040 0010 	orrne.w	r0, r0, #16
   2a5c8:	f7fe fdca 	bl	29160 <CC_HalMaskInterrupt>
   2a5cc:	e7a5      	b.n	2a51a <ProcessAesDrv+0xa2>
   2a5ce:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 2a7b8 <ProcessAesDrv+0x340>
   2a5d2:	4648      	mov	r0, r9
   2a5d4:	b007      	add	sp, #28
   2a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a5da:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 2a7bc <ProcessAesDrv+0x344>
   2a5de:	e784      	b.n	2a4ea <ProcessAesDrv+0x72>
   2a5e0:	4b62      	ldr	r3, [pc, #392]	; (2a76c <ProcessAesDrv+0x2f4>)
   2a5e2:	6822      	ldr	r2, [r4, #0]
   2a5e4:	601a      	str	r2, [r3, #0]
   2a5e6:	6862      	ldr	r2, [r4, #4]
   2a5e8:	605a      	str	r2, [r3, #4]
   2a5ea:	68a2      	ldr	r2, [r4, #8]
   2a5ec:	609a      	str	r2, [r3, #8]
   2a5ee:	68e2      	ldr	r2, [r4, #12]
   2a5f0:	60da      	str	r2, [r3, #12]
   2a5f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a5f4:	682a      	ldr	r2, [r5, #0]
   2a5f6:	f023 0304 	bic.w	r3, r3, #4
   2a5fa:	2b03      	cmp	r3, #3
   2a5fc:	d009      	beq.n	2a612 <ProcessAesDrv+0x19a>
   2a5fe:	6e21      	ldr	r1, [r4, #96]	; 0x60
   2a600:	6833      	ldr	r3, [r6, #0]
   2a602:	2901      	cmp	r1, #1
   2a604:	bf07      	ittee	eq
   2a606:	485a      	ldreq	r0, [pc, #360]	; (2a770 <ProcessAesDrv+0x2f8>)
   2a608:	495a      	ldreq	r1, [pc, #360]	; (2a774 <ProcessAesDrv+0x2fc>)
   2a60a:	485b      	ldrne	r0, [pc, #364]	; (2a778 <ProcessAesDrv+0x300>)
   2a60c:	495b      	ldrne	r1, [pc, #364]	; (2a77c <ProcessAesDrv+0x304>)
   2a60e:	6003      	str	r3, [r0, #0]
   2a610:	600f      	str	r7, [r1, #0]
   2a612:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2a614:	2b01      	cmp	r3, #1
   2a616:	bf0b      	itete	eq
   2a618:	4b59      	ldreq	r3, [pc, #356]	; (2a780 <ProcessAesDrv+0x308>)
   2a61a:	4b5a      	ldrne	r3, [pc, #360]	; (2a784 <ProcessAesDrv+0x30c>)
   2a61c:	495a      	ldreq	r1, [pc, #360]	; (2a788 <ProcessAesDrv+0x310>)
   2a61e:	495b      	ldrne	r1, [pc, #364]	; (2a78c <ProcessAesDrv+0x314>)
   2a620:	600a      	str	r2, [r1, #0]
   2a622:	601f      	str	r7, [r3, #0]
   2a624:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a626:	f023 0304 	bic.w	r3, r3, #4
   2a62a:	2b03      	cmp	r3, #3
   2a62c:	d074      	beq.n	2a718 <ProcessAesDrv+0x2a0>
   2a62e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2a630:	2b01      	cmp	r3, #1
   2a632:	bf0c      	ite	eq
   2a634:	2080      	moveq	r0, #128	; 0x80
   2a636:	2020      	movne	r0, #32
   2a638:	f7fe fd98 	bl	2916c <CC_HalWaitInterrupt>
   2a63c:	4681      	mov	r9, r0
   2a63e:	2800      	cmp	r0, #0
   2a640:	f47f af53 	bne.w	2a4ea <ProcessAesDrv+0x72>
   2a644:	4b47      	ldr	r3, [pc, #284]	; (2a764 <ProcessAesDrv+0x2ec>)
   2a646:	681a      	ldr	r2, [r3, #0]
   2a648:	2a00      	cmp	r2, #0
   2a64a:	d1fc      	bne.n	2a646 <ProcessAesDrv+0x1ce>
   2a64c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a64e:	3b01      	subs	r3, #1
   2a650:	4691      	mov	r9, r2
   2a652:	2b06      	cmp	r3, #6
   2a654:	d810      	bhi.n	2a678 <ProcessAesDrv+0x200>
   2a656:	e8df f003 	tbb	[pc, r3]
   2a65a:	7d04      	.short	0x7d04
   2a65c:	7d0f0f04 	.word	0x7d0f0f04
   2a660:	04          	.byte	0x04
   2a661:	00          	.byte	0x00
   2a662:	4a42      	ldr	r2, [pc, #264]	; (2a76c <ProcessAesDrv+0x2f4>)
   2a664:	4b4a      	ldr	r3, [pc, #296]	; (2a790 <ProcessAesDrv+0x318>)
   2a666:	6812      	ldr	r2, [r2, #0]
   2a668:	6022      	str	r2, [r4, #0]
   2a66a:	681a      	ldr	r2, [r3, #0]
   2a66c:	6062      	str	r2, [r4, #4]
   2a66e:	685a      	ldr	r2, [r3, #4]
   2a670:	60a2      	str	r2, [r4, #8]
   2a672:	3308      	adds	r3, #8
   2a674:	681b      	ldr	r3, [r3, #0]
   2a676:	60e3      	str	r3, [r4, #12]
   2a678:	2301      	movs	r3, #1
   2a67a:	65a3      	str	r3, [r4, #88]	; 0x58
   2a67c:	e735      	b.n	2a4ea <ProcessAesDrv+0x72>
   2a67e:	4845      	ldr	r0, [pc, #276]	; (2a794 <ProcessAesDrv+0x31c>)
   2a680:	f7fd febc 	bl	283fc <CC_PalAbort>
   2a684:	2000      	movs	r0, #0
   2a686:	f7fe fe35 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2a68a:	2800      	cmp	r0, #0
   2a68c:	f43f af1f 	beq.w	2a4ce <ProcessAesDrv+0x56>
   2a690:	4841      	ldr	r0, [pc, #260]	; (2a798 <ProcessAesDrv+0x320>)
   2a692:	f7fd feb3 	bl	283fc <CC_PalAbort>
   2a696:	e71a      	b.n	2a4ce <ProcessAesDrv+0x56>
   2a698:	4840      	ldr	r0, [pc, #256]	; (2a79c <ProcessAesDrv+0x324>)
   2a69a:	f7fd feaf 	bl	283fc <CC_PalAbort>
   2a69e:	4648      	mov	r0, r9
   2a6a0:	b007      	add	sp, #28
   2a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a6a6:	483e      	ldr	r0, [pc, #248]	; (2a7a0 <ProcessAesDrv+0x328>)
   2a6a8:	f7fd fea8 	bl	283fc <CC_PalAbort>
   2a6ac:	e73e      	b.n	2a52c <ProcessAesDrv+0xb4>
   2a6ae:	2304      	movs	r3, #4
   2a6b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   2a6b4:	2120      	movs	r1, #32
   2a6b6:	f104 0010 	add.w	r0, r4, #16
   2a6ba:	f7ff fba5 	bl	29e08 <CC_PalMemSetZeroPlat>
   2a6be:	e71c      	b.n	2a4fa <ProcessAesDrv+0x82>
   2a6c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2a6c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2a6c4:	f000 f9c8 	bl	2aa58 <kmu_validate_slot_and_size>
   2a6c8:	b9e8      	cbnz	r0, 2a706 <ProcessAesDrv+0x28e>
   2a6ca:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2a7c0 <ProcessAesDrv+0x348>
   2a6ce:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 2a7c4 <ProcessAesDrv+0x34c>
   2a6d2:	f8d8 3000 	ldr.w	r3, [r8]
   2a6d6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 2a7c8 <ProcessAesDrv+0x350>
   2a6da:	681b      	ldr	r3, [r3, #0]
   2a6dc:	f8cb 3000 	str.w	r3, [fp]
   2a6e0:	f8d8 3000 	ldr.w	r3, [r8]
   2a6e4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 2a7cc <ProcessAesDrv+0x354>
   2a6e8:	685b      	ldr	r3, [r3, #4]
   2a6ea:	f8ca 3000 	str.w	r3, [sl]
   2a6ee:	f8d8 3000 	ldr.w	r3, [r8]
   2a6f2:	4a2c      	ldr	r2, [pc, #176]	; (2a7a4 <ProcessAesDrv+0x32c>)
   2a6f4:	689b      	ldr	r3, [r3, #8]
   2a6f6:	f8c9 3000 	str.w	r3, [r9]
   2a6fa:	f8d8 3000 	ldr.w	r3, [r8]
   2a6fe:	68db      	ldr	r3, [r3, #12]
   2a700:	6013      	str	r3, [r2, #0]
   2a702:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2a704:	b171      	cbz	r1, 2a724 <ProcessAesDrv+0x2ac>
   2a706:	f04f 0801 	mov.w	r8, #1
   2a70a:	e6d2      	b.n	2a4b2 <ProcessAesDrv+0x3a>
   2a70c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 2a7d0 <ProcessAesDrv+0x358>
   2a710:	e6eb      	b.n	2a4ea <ProcessAesDrv+0x72>
   2a712:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   2a716:	e70f      	b.n	2a538 <ProcessAesDrv+0xc0>
   2a718:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2a71a:	2b01      	cmp	r3, #1
   2a71c:	bf0c      	ite	eq
   2a71e:	2040      	moveq	r0, #64	; 0x40
   2a720:	2010      	movne	r0, #16
   2a722:	e789      	b.n	2a638 <ProcessAesDrv+0x1c0>
   2a724:	f104 0310 	add.w	r3, r4, #16
   2a728:	4618      	mov	r0, r3
   2a72a:	9305      	str	r3, [sp, #20]
   2a72c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   2a730:	e9cd 3200 	strd	r3, r2, [sp]
   2a734:	9002      	str	r0, [sp, #8]
   2a736:	2010      	movs	r0, #16
   2a738:	9003      	str	r0, [sp, #12]
   2a73a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   2a73e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2a740:	f000 f9ae 	bl	2aaa0 <kmu_derive_cmac>
   2a744:	2800      	cmp	r0, #0
   2a746:	d148      	bne.n	2a7da <ProcessAesDrv+0x362>
   2a748:	2300      	movs	r3, #0
   2a74a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   2a74e:	e7da      	b.n	2a706 <ProcessAesDrv+0x28e>
   2a750:	4b15      	ldr	r3, [pc, #84]	; (2a7a8 <ProcessAesDrv+0x330>)
   2a752:	e746      	b.n	2a5e2 <ProcessAesDrv+0x16a>
   2a754:	4a14      	ldr	r2, [pc, #80]	; (2a7a8 <ProcessAesDrv+0x330>)
   2a756:	4b15      	ldr	r3, [pc, #84]	; (2a7ac <ProcessAesDrv+0x334>)
   2a758:	e785      	b.n	2a666 <ProcessAesDrv+0x1ee>
   2a75a:	bf00      	nop
   2a75c:	200008cc 	.word	0x200008cc
   2a760:	5002b810 	.word	0x5002b810
   2a764:	5002b910 	.word	0x5002b910
   2a768:	5002ba04 	.word	0x5002ba04
   2a76c:	5002b440 	.word	0x5002b440
   2a770:	5002bd28 	.word	0x5002bd28
   2a774:	5002bd2c 	.word	0x5002bd2c
   2a778:	5002bd30 	.word	0x5002bd30
   2a77c:	5002bd34 	.word	0x5002bd34
   2a780:	5002bc2c 	.word	0x5002bc2c
   2a784:	5002bc34 	.word	0x5002bc34
   2a788:	5002bc28 	.word	0x5002bc28
   2a78c:	5002bc30 	.word	0x5002bc30
   2a790:	5002b444 	.word	0x5002b444
   2a794:	000365a8 	.word	0x000365a8
   2a798:	000365c0 	.word	0x000365c0
   2a79c:	00036600 	.word	0x00036600
   2a7a0:	000365e0 	.word	0x000365e0
   2a7a4:	5002b40c 	.word	0x5002b40c
   2a7a8:	5002b460 	.word	0x5002b460
   2a7ac:	5002b464 	.word	0x5002b464
   2a7b0:	00f10001 	.word	0x00f10001
   2a7b4:	00f10005 	.word	0x00f10005
   2a7b8:	00f1000b 	.word	0x00f1000b
   2a7bc:	00f10003 	.word	0x00f10003
   2a7c0:	200008bc 	.word	0x200008bc
   2a7c4:	5002b400 	.word	0x5002b400
   2a7c8:	5002b404 	.word	0x5002b404
   2a7cc:	5002b408 	.word	0x5002b408
   2a7d0:	00f10002 	.word	0x00f10002
   2a7d4:	f8df 9038 	ldr.w	r9, [pc, #56]	; 2a810 <ProcessAesDrv+0x398>
   2a7d8:	e687      	b.n	2a4ea <ProcessAesDrv+0x72>
   2a7da:	f8d8 3000 	ldr.w	r3, [r8]
   2a7de:	4a0b      	ldr	r2, [pc, #44]	; (2a80c <ProcessAesDrv+0x394>)
   2a7e0:	681b      	ldr	r3, [r3, #0]
   2a7e2:	f8cb 3000 	str.w	r3, [fp]
   2a7e6:	f8d8 3000 	ldr.w	r3, [r8]
   2a7ea:	685b      	ldr	r3, [r3, #4]
   2a7ec:	f8ca 3000 	str.w	r3, [sl]
   2a7f0:	f8d8 3000 	ldr.w	r3, [r8]
   2a7f4:	689b      	ldr	r3, [r3, #8]
   2a7f6:	f8c9 3000 	str.w	r3, [r9]
   2a7fa:	f8d8 3000 	ldr.w	r3, [r8]
   2a7fe:	68db      	ldr	r3, [r3, #12]
   2a800:	6013      	str	r3, [r2, #0]
   2a802:	9805      	ldr	r0, [sp, #20]
   2a804:	2110      	movs	r1, #16
   2a806:	f7ff faff 	bl	29e08 <CC_PalMemSetZeroPlat>
   2a80a:	e79d      	b.n	2a748 <ProcessAesDrv+0x2d0>
   2a80c:	5002b40c 	.word	0x5002b40c
   2a810:	00f10004 	.word	0x00f10004

0002a814 <FinishAesDrv>:
   2a814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a818:	b301      	cbz	r1, 2a85c <FinishAesDrv+0x48>
   2a81a:	b1fa      	cbz	r2, 2a85c <FinishAesDrv+0x48>
   2a81c:	4604      	mov	r4, r0
   2a81e:	2800      	cmp	r0, #0
   2a820:	d07a      	beq.n	2a918 <FinishAesDrv+0x104>
   2a822:	461d      	mov	r5, r3
   2a824:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2a826:	2b07      	cmp	r3, #7
   2a828:	460e      	mov	r6, r1
   2a82a:	d01b      	beq.n	2a864 <FinishAesDrv+0x50>
   2a82c:	b95d      	cbnz	r5, 2a846 <FinishAesDrv+0x32>
   2a82e:	2b03      	cmp	r3, #3
   2a830:	d110      	bne.n	2a854 <FinishAesDrv+0x40>
   2a832:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2a834:	b973      	cbnz	r3, 2a854 <FinishAesDrv+0x40>
   2a836:	f100 0364 	add.w	r3, r0, #100	; 0x64
   2a83a:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2a83e:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   2a842:	600b      	str	r3, [r1, #0]
   2a844:	2510      	movs	r5, #16
   2a846:	462b      	mov	r3, r5
   2a848:	4631      	mov	r1, r6
   2a84a:	4620      	mov	r0, r4
   2a84c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a850:	f7ff be12 	b.w	2a478 <ProcessAesDrv>
   2a854:	462f      	mov	r7, r5
   2a856:	4638      	mov	r0, r7
   2a858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a85c:	4f66      	ldr	r7, [pc, #408]	; (2a9f8 <FinishAesDrv+0x1e4>)
   2a85e:	4638      	mov	r0, r7
   2a860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a864:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2a866:	2b00      	cmp	r3, #0
   2a868:	d159      	bne.n	2a91e <FinishAesDrv+0x10a>
   2a86a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2a86e:	d25b      	bcs.n	2a928 <FinishAesDrv+0x114>
   2a870:	b915      	cbnz	r5, 2a878 <FinishAesDrv+0x64>
   2a872:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2a874:	2b00      	cmp	r3, #0
   2a876:	d157      	bne.n	2a928 <FinishAesDrv+0x114>
   2a878:	4860      	ldr	r0, [pc, #384]	; (2a9fc <FinishAesDrv+0x1e8>)
   2a87a:	f04f 31ff 	mov.w	r1, #4294967295
   2a87e:	f7fe fd09 	bl	29294 <CC_PalMutexLock>
   2a882:	2800      	cmp	r0, #0
   2a884:	f040 8097 	bne.w	2a9b6 <FinishAesDrv+0x1a2>
   2a888:	2000      	movs	r0, #0
   2a88a:	f7fe fd33 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2a88e:	2800      	cmp	r0, #0
   2a890:	f040 808d 	bne.w	2a9ae <FinishAesDrv+0x19a>
   2a894:	4b5a      	ldr	r3, [pc, #360]	; (2aa00 <FinishAesDrv+0x1ec>)
   2a896:	4a5b      	ldr	r2, [pc, #364]	; (2aa04 <FinishAesDrv+0x1f0>)
   2a898:	2101      	movs	r1, #1
   2a89a:	6019      	str	r1, [r3, #0]
   2a89c:	6813      	ldr	r3, [r2, #0]
   2a89e:	2b00      	cmp	r3, #0
   2a8a0:	d1fc      	bne.n	2a89c <FinishAesDrv+0x88>
   2a8a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a8a4:	2b03      	cmp	r3, #3
   2a8a6:	dd20      	ble.n	2a8ea <FinishAesDrv+0xd6>
   2a8a8:	3b06      	subs	r3, #6
   2a8aa:	2b01      	cmp	r3, #1
   2a8ac:	d81f      	bhi.n	2a8ee <FinishAesDrv+0xda>
   2a8ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2a8b0:	2b01      	cmp	r3, #1
   2a8b2:	d83b      	bhi.n	2a92c <FinishAesDrv+0x118>
   2a8b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2a8b6:	2b01      	cmp	r3, #1
   2a8b8:	f200 8085 	bhi.w	2a9c6 <FinishAesDrv+0x1b2>
   2a8bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2a8be:	2b01      	cmp	r3, #1
   2a8c0:	f200 8083 	bhi.w	2a9ca <FinishAesDrv+0x1b6>
   2a8c4:	4620      	mov	r0, r4
   2a8c6:	f7ff fd5b 	bl	2a380 <InitAes.part.0>
   2a8ca:	4607      	mov	r7, r0
   2a8cc:	b980      	cbnz	r0, 2a8f0 <FinishAesDrv+0xdc>
   2a8ce:	4620      	mov	r0, r4
   2a8d0:	f7ff fd0c 	bl	2a2ec <LoadAesKey>
   2a8d4:	4607      	mov	r7, r0
   2a8d6:	b958      	cbnz	r0, 2a8f0 <FinishAesDrv+0xdc>
   2a8d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a8da:	2b07      	cmp	r3, #7
   2a8dc:	d807      	bhi.n	2a8ee <FinishAesDrv+0xda>
   2a8de:	e8df f003 	tbb	[pc, r3]
   2a8e2:	2730      	.short	0x2730
   2a8e4:	06062755 	.word	0x06062755
   2a8e8:	2755      	.short	0x2755
   2a8ea:	2b00      	cmp	r3, #0
   2a8ec:	dadf      	bge.n	2a8ae <FinishAesDrv+0x9a>
   2a8ee:	4f46      	ldr	r7, [pc, #280]	; (2aa08 <FinishAesDrv+0x1f4>)
   2a8f0:	4a44      	ldr	r2, [pc, #272]	; (2aa04 <FinishAesDrv+0x1f0>)
   2a8f2:	6813      	ldr	r3, [r2, #0]
   2a8f4:	2b00      	cmp	r3, #0
   2a8f6:	d1fc      	bne.n	2a8f2 <FinishAesDrv+0xde>
   2a8f8:	4a41      	ldr	r2, [pc, #260]	; (2aa00 <FinishAesDrv+0x1ec>)
   2a8fa:	2001      	movs	r0, #1
   2a8fc:	6013      	str	r3, [r2, #0]
   2a8fe:	f7fe fcf9 	bl	292f4 <CC_PalPowerSaveModeSelect>
   2a902:	2800      	cmp	r0, #0
   2a904:	d15b      	bne.n	2a9be <FinishAesDrv+0x1aa>
   2a906:	483d      	ldr	r0, [pc, #244]	; (2a9fc <FinishAesDrv+0x1e8>)
   2a908:	f7fe fccc 	bl	292a4 <CC_PalMutexUnlock>
   2a90c:	2800      	cmp	r0, #0
   2a90e:	d0a2      	beq.n	2a856 <FinishAesDrv+0x42>
   2a910:	483e      	ldr	r0, [pc, #248]	; (2aa0c <FinishAesDrv+0x1f8>)
   2a912:	f7fd fd73 	bl	283fc <CC_PalAbort>
   2a916:	e79e      	b.n	2a856 <FinishAesDrv+0x42>
   2a918:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   2a91c:	e79b      	b.n	2a856 <FinishAesDrv+0x42>
   2a91e:	2b01      	cmp	r3, #1
   2a920:	d1a6      	bne.n	2a870 <FinishAesDrv+0x5c>
   2a922:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2a926:	d3a3      	bcc.n	2a870 <FinishAesDrv+0x5c>
   2a928:	4f39      	ldr	r7, [pc, #228]	; (2aa10 <FinishAesDrv+0x1fc>)
   2a92a:	e794      	b.n	2a856 <FinishAesDrv+0x42>
   2a92c:	4f39      	ldr	r7, [pc, #228]	; (2aa14 <FinishAesDrv+0x200>)
   2a92e:	e7df      	b.n	2a8f0 <FinishAesDrv+0xdc>
   2a930:	4b39      	ldr	r3, [pc, #228]	; (2aa18 <FinishAesDrv+0x204>)
   2a932:	6822      	ldr	r2, [r4, #0]
   2a934:	601a      	str	r2, [r3, #0]
   2a936:	6862      	ldr	r2, [r4, #4]
   2a938:	605a      	str	r2, [r3, #4]
   2a93a:	68a2      	ldr	r2, [r4, #8]
   2a93c:	609a      	str	r2, [r3, #8]
   2a93e:	68e2      	ldr	r2, [r4, #12]
   2a940:	60da      	str	r2, [r3, #12]
   2a942:	4936      	ldr	r1, [pc, #216]	; (2aa1c <FinishAesDrv+0x208>)
   2a944:	4a36      	ldr	r2, [pc, #216]	; (2aa20 <FinishAesDrv+0x20c>)
   2a946:	2301      	movs	r3, #1
   2a948:	600b      	str	r3, [r1, #0]
   2a94a:	6015      	str	r5, [r2, #0]
   2a94c:	2d00      	cmp	r5, #0
   2a94e:	d13e      	bne.n	2a9ce <FinishAesDrv+0x1ba>
   2a950:	6da2      	ldr	r2, [r4, #88]	; 0x58
   2a952:	b90a      	cbnz	r2, 2a958 <FinishAesDrv+0x144>
   2a954:	4a33      	ldr	r2, [pc, #204]	; (2aa24 <FinishAesDrv+0x210>)
   2a956:	6013      	str	r3, [r2, #0]
   2a958:	4b2a      	ldr	r3, [pc, #168]	; (2aa04 <FinishAesDrv+0x1f0>)
   2a95a:	681f      	ldr	r7, [r3, #0]
   2a95c:	2f00      	cmp	r7, #0
   2a95e:	d1fc      	bne.n	2a95a <FinishAesDrv+0x146>
   2a960:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a962:	3b01      	subs	r3, #1
   2a964:	2b06      	cmp	r3, #6
   2a966:	d8c3      	bhi.n	2a8f0 <FinishAesDrv+0xdc>
   2a968:	a201      	add	r2, pc, #4	; (adr r2, 2a970 <FinishAesDrv+0x15c>)
   2a96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2a96e:	bf00      	nop
   2a970:	0002a991 	.word	0x0002a991
   2a974:	0002a9a9 	.word	0x0002a9a9
   2a978:	0002a991 	.word	0x0002a991
   2a97c:	0002a8f1 	.word	0x0002a8f1
   2a980:	0002a8f1 	.word	0x0002a8f1
   2a984:	0002a9a9 	.word	0x0002a9a9
   2a988:	0002a991 	.word	0x0002a991
   2a98c:	4b26      	ldr	r3, [pc, #152]	; (2aa28 <FinishAesDrv+0x214>)
   2a98e:	e7d0      	b.n	2a932 <FinishAesDrv+0x11e>
   2a990:	4a21      	ldr	r2, [pc, #132]	; (2aa18 <FinishAesDrv+0x204>)
   2a992:	4b26      	ldr	r3, [pc, #152]	; (2aa2c <FinishAesDrv+0x218>)
   2a994:	6812      	ldr	r2, [r2, #0]
   2a996:	6022      	str	r2, [r4, #0]
   2a998:	681a      	ldr	r2, [r3, #0]
   2a99a:	6062      	str	r2, [r4, #4]
   2a99c:	685a      	ldr	r2, [r3, #4]
   2a99e:	60a2      	str	r2, [r4, #8]
   2a9a0:	3308      	adds	r3, #8
   2a9a2:	681b      	ldr	r3, [r3, #0]
   2a9a4:	60e3      	str	r3, [r4, #12]
   2a9a6:	e7a3      	b.n	2a8f0 <FinishAesDrv+0xdc>
   2a9a8:	4a1f      	ldr	r2, [pc, #124]	; (2aa28 <FinishAesDrv+0x214>)
   2a9aa:	4b21      	ldr	r3, [pc, #132]	; (2aa30 <FinishAesDrv+0x21c>)
   2a9ac:	e7f2      	b.n	2a994 <FinishAesDrv+0x180>
   2a9ae:	4821      	ldr	r0, [pc, #132]	; (2aa34 <FinishAesDrv+0x220>)
   2a9b0:	f7fd fd24 	bl	283fc <CC_PalAbort>
   2a9b4:	e76e      	b.n	2a894 <FinishAesDrv+0x80>
   2a9b6:	4820      	ldr	r0, [pc, #128]	; (2aa38 <FinishAesDrv+0x224>)
   2a9b8:	f7fd fd20 	bl	283fc <CC_PalAbort>
   2a9bc:	e764      	b.n	2a888 <FinishAesDrv+0x74>
   2a9be:	481f      	ldr	r0, [pc, #124]	; (2aa3c <FinishAesDrv+0x228>)
   2a9c0:	f7fd fd1c 	bl	283fc <CC_PalAbort>
   2a9c4:	e79f      	b.n	2a906 <FinishAesDrv+0xf2>
   2a9c6:	4f1e      	ldr	r7, [pc, #120]	; (2aa40 <FinishAesDrv+0x22c>)
   2a9c8:	e792      	b.n	2a8f0 <FinishAesDrv+0xdc>
   2a9ca:	4f1e      	ldr	r7, [pc, #120]	; (2aa44 <FinishAesDrv+0x230>)
   2a9cc:	e790      	b.n	2a8f0 <FinishAesDrv+0xdc>
   2a9ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   2a9d0:	6833      	ldr	r3, [r6, #0]
   2a9d2:	2a01      	cmp	r2, #1
   2a9d4:	d00a      	beq.n	2a9ec <FinishAesDrv+0x1d8>
   2a9d6:	491c      	ldr	r1, [pc, #112]	; (2aa48 <FinishAesDrv+0x234>)
   2a9d8:	4a1c      	ldr	r2, [pc, #112]	; (2aa4c <FinishAesDrv+0x238>)
   2a9da:	600b      	str	r3, [r1, #0]
   2a9dc:	2010      	movs	r0, #16
   2a9de:	6015      	str	r5, [r2, #0]
   2a9e0:	f7fe fbc4 	bl	2916c <CC_HalWaitInterrupt>
   2a9e4:	4607      	mov	r7, r0
   2a9e6:	2800      	cmp	r0, #0
   2a9e8:	d0b6      	beq.n	2a958 <FinishAesDrv+0x144>
   2a9ea:	e781      	b.n	2a8f0 <FinishAesDrv+0xdc>
   2a9ec:	4918      	ldr	r1, [pc, #96]	; (2aa50 <FinishAesDrv+0x23c>)
   2a9ee:	4a19      	ldr	r2, [pc, #100]	; (2aa54 <FinishAesDrv+0x240>)
   2a9f0:	600b      	str	r3, [r1, #0]
   2a9f2:	2040      	movs	r0, #64	; 0x40
   2a9f4:	6015      	str	r5, [r2, #0]
   2a9f6:	e7f3      	b.n	2a9e0 <FinishAesDrv+0x1cc>
   2a9f8:	00f1000b 	.word	0x00f1000b
   2a9fc:	200008cc 	.word	0x200008cc
   2aa00:	5002b810 	.word	0x5002b810
   2aa04:	5002b910 	.word	0x5002b910
   2aa08:	00f10001 	.word	0x00f10001
   2aa0c:	00036600 	.word	0x00036600
   2aa10:	00f10005 	.word	0x00f10005
   2aa14:	00f10002 	.word	0x00f10002
   2aa18:	5002b440 	.word	0x5002b440
   2aa1c:	5002b47c 	.word	0x5002b47c
   2aa20:	5002b4bc 	.word	0x5002b4bc
   2aa24:	5002b524 	.word	0x5002b524
   2aa28:	5002b460 	.word	0x5002b460
   2aa2c:	5002b444 	.word	0x5002b444
   2aa30:	5002b464 	.word	0x5002b464
   2aa34:	000365c0 	.word	0x000365c0
   2aa38:	000365a8 	.word	0x000365a8
   2aa3c:	000365e0 	.word	0x000365e0
   2aa40:	00f10003 	.word	0x00f10003
   2aa44:	00f10004 	.word	0x00f10004
   2aa48:	5002bc30 	.word	0x5002bc30
   2aa4c:	5002bc34 	.word	0x5002bc34
   2aa50:	5002bc28 	.word	0x5002bc28
   2aa54:	5002bc2c 	.word	0x5002bc2c

0002aa58 <kmu_validate_slot_and_size>:
   2aa58:	b921      	cbnz	r1, 2aa64 <kmu_validate_slot_and_size+0xc>
   2aa5a:	4b03      	ldr	r3, [pc, #12]	; (2aa68 <kmu_validate_slot_and_size+0x10>)
   2aa5c:	2800      	cmp	r0, #0
   2aa5e:	bf18      	it	ne
   2aa60:	4618      	movne	r0, r3
   2aa62:	4770      	bx	lr
   2aa64:	4801      	ldr	r0, [pc, #4]	; (2aa6c <kmu_validate_slot_and_size+0x14>)
   2aa66:	4770      	bx	lr
   2aa68:	00f70001 	.word	0x00f70001
   2aa6c:	00f70003 	.word	0x00f70003

0002aa70 <kmu_validate_kdr_slot_and_size>:
   2aa70:	b921      	cbnz	r1, 2aa7c <kmu_validate_kdr_slot_and_size+0xc>
   2aa72:	4b03      	ldr	r3, [pc, #12]	; (2aa80 <kmu_validate_kdr_slot_and_size+0x10>)
   2aa74:	2800      	cmp	r0, #0
   2aa76:	bf18      	it	ne
   2aa78:	4618      	movne	r0, r3
   2aa7a:	4770      	bx	lr
   2aa7c:	4801      	ldr	r0, [pc, #4]	; (2aa84 <kmu_validate_kdr_slot_and_size+0x14>)
   2aa7e:	4770      	bx	lr
   2aa80:	00f70001 	.word	0x00f70001
   2aa84:	00f70003 	.word	0x00f70003

0002aa88 <kmu_use_kdr_key>:
   2aa88:	4903      	ldr	r1, [pc, #12]	; (2aa98 <kmu_use_kdr_key+0x10>)
   2aa8a:	4b04      	ldr	r3, [pc, #16]	; (2aa9c <kmu_use_kdr_key+0x14>)
   2aa8c:	2000      	movs	r0, #0
   2aa8e:	2201      	movs	r2, #1
   2aa90:	6008      	str	r0, [r1, #0]
   2aa92:	601a      	str	r2, [r3, #0]
   2aa94:	4770      	bx	lr
   2aa96:	bf00      	nop
   2aa98:	5002ba38 	.word	0x5002ba38
   2aa9c:	5002b478 	.word	0x5002b478

0002aaa0 <kmu_derive_cmac>:
   2aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aaa4:	b0cd      	sub	sp, #308	; 0x134
   2aaa6:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   2aaaa:	460f      	mov	r7, r1
   2aaac:	2100      	movs	r1, #0
   2aaae:	460c      	mov	r4, r1
   2aab0:	4681      	mov	r9, r0
   2aab2:	4616      	mov	r6, r2
   2aab4:	a80e      	add	r0, sp, #56	; 0x38
   2aab6:	2274      	movs	r2, #116	; 0x74
   2aab8:	469b      	mov	fp, r3
   2aaba:	f005 ff21 	bl	30900 <memset>
   2aabe:	4621      	mov	r1, r4
   2aac0:	2280      	movs	r2, #128	; 0x80
   2aac2:	a82c      	add	r0, sp, #176	; 0xb0
   2aac4:	942b      	str	r4, [sp, #172]	; 0xac
   2aac6:	f005 ff1b 	bl	30900 <memset>
   2aaca:	2384      	movs	r3, #132	; 0x84
   2aacc:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2aad0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2aad4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   2aad8:	9305      	str	r3, [sp, #20]
   2aada:	d860      	bhi.n	2ab9e <kmu_derive_cmac+0xfe>
   2aadc:	ab05      	add	r3, sp, #20
   2aade:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   2aae2:	9301      	str	r3, [sp, #4]
   2aae4:	9502      	str	r5, [sp, #8]
   2aae6:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   2aaea:	4659      	mov	r1, fp
   2aaec:	4630      	mov	r0, r6
   2aaee:	f8cd a000 	str.w	sl, [sp]
   2aaf2:	f000 f865 	bl	2abc0 <UtilCmacBuildDataForDerivation>
   2aaf6:	2800      	cmp	r0, #0
   2aaf8:	d14c      	bne.n	2ab94 <kmu_derive_cmac+0xf4>
   2aafa:	2303      	movs	r3, #3
   2aafc:	f88d 3013 	strb.w	r3, [sp, #19]
   2ab00:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2ab04:	901c      	str	r0, [sp, #112]	; 0x70
   2ab06:	2200      	movs	r2, #0
   2ab08:	2110      	movs	r1, #16
   2ab0a:	a80e      	add	r0, sp, #56	; 0x38
   2ab0c:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   2ab10:	2607      	movs	r6, #7
   2ab12:	2301      	movs	r3, #1
   2ab14:	2401      	movs	r4, #1
   2ab16:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2ab1a:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   2ab1e:	971a      	str	r7, [sp, #104]	; 0x68
   2ab20:	961b      	str	r6, [sp, #108]	; 0x6c
   2ab22:	9426      	str	r4, [sp, #152]	; 0x98
   2ab24:	f10d 0920 	add.w	r9, sp, #32
   2ab28:	f7ff f96e 	bl	29e08 <CC_PalMemSetZeroPlat>
   2ab2c:	2110      	movs	r1, #16
   2ab2e:	e9cd 1900 	strd	r1, r9, [sp]
   2ab32:	ab0a      	add	r3, sp, #40	; 0x28
   2ab34:	9905      	ldr	r1, [sp, #20]
   2ab36:	4650      	mov	r0, sl
   2ab38:	aa06      	add	r2, sp, #24
   2ab3a:	f7ff fa09 	bl	29f50 <SetDataBuffersInfo>
   2ab3e:	4607      	mov	r7, r0
   2ab40:	b150      	cbz	r0, 2ab58 <kmu_derive_cmac+0xb8>
   2ab42:	e01e      	b.n	2ab82 <kmu_derive_cmac+0xe2>
   2ab44:	f7ff f95c 	bl	29e00 <CC_PalMemCopyPlat>
   2ab48:	2110      	movs	r1, #16
   2ab4a:	a80e      	add	r0, sp, #56	; 0x38
   2ab4c:	f7ff f95c 	bl	29e08 <CC_PalMemSetZeroPlat>
   2ab50:	3401      	adds	r4, #1
   2ab52:	1bad      	subs	r5, r5, r6
   2ab54:	b2e4      	uxtb	r4, r4
   2ab56:	d027      	beq.n	2aba8 <kmu_derive_cmac+0x108>
   2ab58:	9b05      	ldr	r3, [sp, #20]
   2ab5a:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2ab5e:	2d10      	cmp	r5, #16
   2ab60:	464a      	mov	r2, r9
   2ab62:	a906      	add	r1, sp, #24
   2ab64:	a80e      	add	r0, sp, #56	; 0x38
   2ab66:	462e      	mov	r6, r5
   2ab68:	bf28      	it	cs
   2ab6a:	2610      	movcs	r6, #16
   2ab6c:	f7ff fe52 	bl	2a814 <FinishAesDrv>
   2ab70:	4603      	mov	r3, r0
   2ab72:	4632      	mov	r2, r6
   2ab74:	eb08 0007 	add.w	r0, r8, r7
   2ab78:	a90e      	add	r1, sp, #56	; 0x38
   2ab7a:	4437      	add	r7, r6
   2ab7c:	2b00      	cmp	r3, #0
   2ab7e:	d0e1      	beq.n	2ab44 <kmu_derive_cmac+0xa4>
   2ab80:	461f      	mov	r7, r3
   2ab82:	a80e      	add	r0, sp, #56	; 0x38
   2ab84:	2274      	movs	r2, #116	; 0x74
   2ab86:	2100      	movs	r1, #0
   2ab88:	f7ff f93c 	bl	29e04 <CC_PalMemSetPlat>
   2ab8c:	4638      	mov	r0, r7
   2ab8e:	b04d      	add	sp, #308	; 0x134
   2ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab94:	4f08      	ldr	r7, [pc, #32]	; (2abb8 <kmu_derive_cmac+0x118>)
   2ab96:	4638      	mov	r0, r7
   2ab98:	b04d      	add	sp, #308	; 0x134
   2ab9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab9e:	4f07      	ldr	r7, [pc, #28]	; (2abbc <kmu_derive_cmac+0x11c>)
   2aba0:	4638      	mov	r0, r7
   2aba2:	b04d      	add	sp, #308	; 0x134
   2aba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aba8:	a80e      	add	r0, sp, #56	; 0x38
   2abaa:	2274      	movs	r2, #116	; 0x74
   2abac:	2100      	movs	r1, #0
   2abae:	462f      	mov	r7, r5
   2abb0:	f7ff f928 	bl	29e04 <CC_PalMemSetPlat>
   2abb4:	e7ea      	b.n	2ab8c <kmu_derive_cmac+0xec>
   2abb6:	bf00      	nop
   2abb8:	00f1000e 	.word	0x00f1000e
   2abbc:	00f1000f 	.word	0x00f1000f

0002abc0 <UtilCmacBuildDataForDerivation>:
   2abc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2abc4:	b082      	sub	sp, #8
   2abc6:	2600      	movs	r6, #0
   2abc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2abca:	9601      	str	r6, [sp, #4]
   2abcc:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2abd0:	d83c      	bhi.n	2ac4c <UtilCmacBuildDataForDerivation+0x8c>
   2abd2:	00ee      	lsls	r6, r5, #3
   2abd4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   2abd8:	f101 35ff 	add.w	r5, r1, #4294967295
   2abdc:	461f      	mov	r7, r3
   2abde:	bf34      	ite	cc
   2abe0:	2303      	movcc	r3, #3
   2abe2:	2304      	movcs	r3, #4
   2abe4:	2d3f      	cmp	r5, #63	; 0x3f
   2abe6:	460c      	mov	r4, r1
   2abe8:	9300      	str	r3, [sp, #0]
   2abea:	d82f      	bhi.n	2ac4c <UtilCmacBuildDataForDerivation+0x8c>
   2abec:	b370      	cbz	r0, 2ac4c <UtilCmacBuildDataForDerivation+0x8c>
   2abee:	4690      	mov	r8, r2
   2abf0:	b117      	cbz	r7, 2abf8 <UtilCmacBuildDataForDerivation+0x38>
   2abf2:	b35a      	cbz	r2, 2ac4c <UtilCmacBuildDataForDerivation+0x8c>
   2abf4:	2f40      	cmp	r7, #64	; 0x40
   2abf6:	d829      	bhi.n	2ac4c <UtilCmacBuildDataForDerivation+0x8c>
   2abf8:	9a08      	ldr	r2, [sp, #32]
   2abfa:	b33a      	cbz	r2, 2ac4c <UtilCmacBuildDataForDerivation+0x8c>
   2abfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2abfe:	6811      	ldr	r1, [r2, #0]
   2ac00:	b321      	cbz	r1, 2ac4c <UtilCmacBuildDataForDerivation+0x8c>
   2ac02:	19e2      	adds	r2, r4, r7
   2ac04:	4413      	add	r3, r2
   2ac06:	4299      	cmp	r1, r3
   2ac08:	d320      	bcc.n	2ac4c <UtilCmacBuildDataForDerivation+0x8c>
   2ac0a:	9b08      	ldr	r3, [sp, #32]
   2ac0c:	4622      	mov	r2, r4
   2ac0e:	4601      	mov	r1, r0
   2ac10:	1c58      	adds	r0, r3, #1
   2ac12:	f7ff f8f5 	bl	29e00 <CC_PalMemCopyPlat>
   2ac16:	9b08      	ldr	r3, [sp, #32]
   2ac18:	4423      	add	r3, r4
   2ac1a:	2200      	movs	r2, #0
   2ac1c:	3402      	adds	r4, #2
   2ac1e:	705a      	strb	r2, [r3, #1]
   2ac20:	bb07      	cbnz	r7, 2ac64 <UtilCmacBuildDataForDerivation+0xa4>
   2ac22:	2eff      	cmp	r6, #255	; 0xff
   2ac24:	9600      	str	r6, [sp, #0]
   2ac26:	d915      	bls.n	2ac54 <UtilCmacBuildDataForDerivation+0x94>
   2ac28:	9b08      	ldr	r3, [sp, #32]
   2ac2a:	0235      	lsls	r5, r6, #8
   2ac2c:	b2ad      	uxth	r5, r5
   2ac2e:	1918      	adds	r0, r3, r4
   2ac30:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   2ac34:	2202      	movs	r2, #2
   2ac36:	a901      	add	r1, sp, #4
   2ac38:	9501      	str	r5, [sp, #4]
   2ac3a:	f7ff f8e1 	bl	29e00 <CC_PalMemCopyPlat>
   2ac3e:	3402      	adds	r4, #2
   2ac40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ac42:	2000      	movs	r0, #0
   2ac44:	601c      	str	r4, [r3, #0]
   2ac46:	b002      	add	sp, #8
   2ac48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ac4c:	4809      	ldr	r0, [pc, #36]	; (2ac74 <UtilCmacBuildDataForDerivation+0xb4>)
   2ac4e:	b002      	add	sp, #8
   2ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ac54:	9b08      	ldr	r3, [sp, #32]
   2ac56:	2201      	movs	r2, #1
   2ac58:	1918      	adds	r0, r3, r4
   2ac5a:	4669      	mov	r1, sp
   2ac5c:	f7ff f8d0 	bl	29e00 <CC_PalMemCopyPlat>
   2ac60:	3401      	adds	r4, #1
   2ac62:	e7ed      	b.n	2ac40 <UtilCmacBuildDataForDerivation+0x80>
   2ac64:	9b08      	ldr	r3, [sp, #32]
   2ac66:	4641      	mov	r1, r8
   2ac68:	1918      	adds	r0, r3, r4
   2ac6a:	463a      	mov	r2, r7
   2ac6c:	f7ff f8c8 	bl	29e00 <CC_PalMemCopyPlat>
   2ac70:	443c      	add	r4, r7
   2ac72:	e7d6      	b.n	2ac22 <UtilCmacBuildDataForDerivation+0x62>
   2ac74:	80000006 	.word	0x80000006

0002ac78 <CC_PalDataBufferAttrGet>:
   2ac78:	2000      	movs	r0, #0
   2ac7a:	7018      	strb	r0, [r3, #0]
   2ac7c:	4770      	bx	lr
   2ac7e:	bf00      	nop

0002ac80 <malloc>:
   2ac80:	4b02      	ldr	r3, [pc, #8]	; (2ac8c <malloc+0xc>)
   2ac82:	4601      	mov	r1, r0
   2ac84:	6818      	ldr	r0, [r3, #0]
   2ac86:	f000 b851 	b.w	2ad2c <_malloc_r>
   2ac8a:	bf00      	nop
   2ac8c:	200008e0 	.word	0x200008e0

0002ac90 <_free_r>:
   2ac90:	b538      	push	{r3, r4, r5, lr}
   2ac92:	4605      	mov	r5, r0
   2ac94:	2900      	cmp	r1, #0
   2ac96:	d045      	beq.n	2ad24 <_free_r+0x94>
   2ac98:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2ac9c:	1f0c      	subs	r4, r1, #4
   2ac9e:	2b00      	cmp	r3, #0
   2aca0:	bfb8      	it	lt
   2aca2:	18e4      	addlt	r4, r4, r3
   2aca4:	f000 fd06 	bl	2b6b4 <__malloc_lock>
   2aca8:	4a1f      	ldr	r2, [pc, #124]	; (2ad28 <_free_r+0x98>)
   2acaa:	6813      	ldr	r3, [r2, #0]
   2acac:	4610      	mov	r0, r2
   2acae:	b933      	cbnz	r3, 2acbe <_free_r+0x2e>
   2acb0:	6063      	str	r3, [r4, #4]
   2acb2:	6014      	str	r4, [r2, #0]
   2acb4:	4628      	mov	r0, r5
   2acb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2acba:	f000 bd01 	b.w	2b6c0 <__malloc_unlock>
   2acbe:	42a3      	cmp	r3, r4
   2acc0:	d90b      	bls.n	2acda <_free_r+0x4a>
   2acc2:	6821      	ldr	r1, [r4, #0]
   2acc4:	1862      	adds	r2, r4, r1
   2acc6:	4293      	cmp	r3, r2
   2acc8:	bf04      	itt	eq
   2acca:	681a      	ldreq	r2, [r3, #0]
   2accc:	685b      	ldreq	r3, [r3, #4]
   2acce:	6063      	str	r3, [r4, #4]
   2acd0:	bf04      	itt	eq
   2acd2:	1852      	addeq	r2, r2, r1
   2acd4:	6022      	streq	r2, [r4, #0]
   2acd6:	6004      	str	r4, [r0, #0]
   2acd8:	e7ec      	b.n	2acb4 <_free_r+0x24>
   2acda:	461a      	mov	r2, r3
   2acdc:	685b      	ldr	r3, [r3, #4]
   2acde:	b10b      	cbz	r3, 2ace4 <_free_r+0x54>
   2ace0:	42a3      	cmp	r3, r4
   2ace2:	d9fa      	bls.n	2acda <_free_r+0x4a>
   2ace4:	6811      	ldr	r1, [r2, #0]
   2ace6:	1850      	adds	r0, r2, r1
   2ace8:	42a0      	cmp	r0, r4
   2acea:	d10b      	bne.n	2ad04 <_free_r+0x74>
   2acec:	6820      	ldr	r0, [r4, #0]
   2acee:	4401      	add	r1, r0
   2acf0:	1850      	adds	r0, r2, r1
   2acf2:	4283      	cmp	r3, r0
   2acf4:	6011      	str	r1, [r2, #0]
   2acf6:	d1dd      	bne.n	2acb4 <_free_r+0x24>
   2acf8:	6818      	ldr	r0, [r3, #0]
   2acfa:	685b      	ldr	r3, [r3, #4]
   2acfc:	6053      	str	r3, [r2, #4]
   2acfe:	4401      	add	r1, r0
   2ad00:	6011      	str	r1, [r2, #0]
   2ad02:	e7d7      	b.n	2acb4 <_free_r+0x24>
   2ad04:	d902      	bls.n	2ad0c <_free_r+0x7c>
   2ad06:	230c      	movs	r3, #12
   2ad08:	602b      	str	r3, [r5, #0]
   2ad0a:	e7d3      	b.n	2acb4 <_free_r+0x24>
   2ad0c:	6820      	ldr	r0, [r4, #0]
   2ad0e:	1821      	adds	r1, r4, r0
   2ad10:	428b      	cmp	r3, r1
   2ad12:	bf04      	itt	eq
   2ad14:	6819      	ldreq	r1, [r3, #0]
   2ad16:	685b      	ldreq	r3, [r3, #4]
   2ad18:	6063      	str	r3, [r4, #4]
   2ad1a:	bf04      	itt	eq
   2ad1c:	1809      	addeq	r1, r1, r0
   2ad1e:	6021      	streq	r1, [r4, #0]
   2ad20:	6054      	str	r4, [r2, #4]
   2ad22:	e7c7      	b.n	2acb4 <_free_r+0x24>
   2ad24:	bd38      	pop	{r3, r4, r5, pc}
   2ad26:	bf00      	nop
   2ad28:	20003fe8 	.word	0x20003fe8

0002ad2c <_malloc_r>:
   2ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ad2e:	1ccd      	adds	r5, r1, #3
   2ad30:	f025 0503 	bic.w	r5, r5, #3
   2ad34:	3508      	adds	r5, #8
   2ad36:	2d0c      	cmp	r5, #12
   2ad38:	bf38      	it	cc
   2ad3a:	250c      	movcc	r5, #12
   2ad3c:	2d00      	cmp	r5, #0
   2ad3e:	4606      	mov	r6, r0
   2ad40:	db01      	blt.n	2ad46 <_malloc_r+0x1a>
   2ad42:	42a9      	cmp	r1, r5
   2ad44:	d903      	bls.n	2ad4e <_malloc_r+0x22>
   2ad46:	230c      	movs	r3, #12
   2ad48:	6033      	str	r3, [r6, #0]
   2ad4a:	2000      	movs	r0, #0
   2ad4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ad4e:	f000 fcb1 	bl	2b6b4 <__malloc_lock>
   2ad52:	4921      	ldr	r1, [pc, #132]	; (2add8 <_malloc_r+0xac>)
   2ad54:	680a      	ldr	r2, [r1, #0]
   2ad56:	4614      	mov	r4, r2
   2ad58:	b99c      	cbnz	r4, 2ad82 <_malloc_r+0x56>
   2ad5a:	4f20      	ldr	r7, [pc, #128]	; (2addc <_malloc_r+0xb0>)
   2ad5c:	683b      	ldr	r3, [r7, #0]
   2ad5e:	b923      	cbnz	r3, 2ad6a <_malloc_r+0x3e>
   2ad60:	4621      	mov	r1, r4
   2ad62:	4630      	mov	r0, r6
   2ad64:	f000 fba4 	bl	2b4b0 <_sbrk_r>
   2ad68:	6038      	str	r0, [r7, #0]
   2ad6a:	4629      	mov	r1, r5
   2ad6c:	4630      	mov	r0, r6
   2ad6e:	f000 fb9f 	bl	2b4b0 <_sbrk_r>
   2ad72:	1c43      	adds	r3, r0, #1
   2ad74:	d123      	bne.n	2adbe <_malloc_r+0x92>
   2ad76:	230c      	movs	r3, #12
   2ad78:	6033      	str	r3, [r6, #0]
   2ad7a:	4630      	mov	r0, r6
   2ad7c:	f000 fca0 	bl	2b6c0 <__malloc_unlock>
   2ad80:	e7e3      	b.n	2ad4a <_malloc_r+0x1e>
   2ad82:	6823      	ldr	r3, [r4, #0]
   2ad84:	1b5b      	subs	r3, r3, r5
   2ad86:	d417      	bmi.n	2adb8 <_malloc_r+0x8c>
   2ad88:	2b0b      	cmp	r3, #11
   2ad8a:	d903      	bls.n	2ad94 <_malloc_r+0x68>
   2ad8c:	6023      	str	r3, [r4, #0]
   2ad8e:	441c      	add	r4, r3
   2ad90:	6025      	str	r5, [r4, #0]
   2ad92:	e004      	b.n	2ad9e <_malloc_r+0x72>
   2ad94:	6863      	ldr	r3, [r4, #4]
   2ad96:	42a2      	cmp	r2, r4
   2ad98:	bf0c      	ite	eq
   2ad9a:	600b      	streq	r3, [r1, #0]
   2ad9c:	6053      	strne	r3, [r2, #4]
   2ad9e:	4630      	mov	r0, r6
   2ada0:	f000 fc8e 	bl	2b6c0 <__malloc_unlock>
   2ada4:	f104 000b 	add.w	r0, r4, #11
   2ada8:	1d23      	adds	r3, r4, #4
   2adaa:	f020 0007 	bic.w	r0, r0, #7
   2adae:	1ac2      	subs	r2, r0, r3
   2adb0:	d0cc      	beq.n	2ad4c <_malloc_r+0x20>
   2adb2:	1a1b      	subs	r3, r3, r0
   2adb4:	50a3      	str	r3, [r4, r2]
   2adb6:	e7c9      	b.n	2ad4c <_malloc_r+0x20>
   2adb8:	4622      	mov	r2, r4
   2adba:	6864      	ldr	r4, [r4, #4]
   2adbc:	e7cc      	b.n	2ad58 <_malloc_r+0x2c>
   2adbe:	1cc4      	adds	r4, r0, #3
   2adc0:	f024 0403 	bic.w	r4, r4, #3
   2adc4:	42a0      	cmp	r0, r4
   2adc6:	d0e3      	beq.n	2ad90 <_malloc_r+0x64>
   2adc8:	1a21      	subs	r1, r4, r0
   2adca:	4630      	mov	r0, r6
   2adcc:	f000 fb70 	bl	2b4b0 <_sbrk_r>
   2add0:	3001      	adds	r0, #1
   2add2:	d1dd      	bne.n	2ad90 <_malloc_r+0x64>
   2add4:	e7cf      	b.n	2ad76 <_malloc_r+0x4a>
   2add6:	bf00      	nop
   2add8:	20003fe8 	.word	0x20003fe8
   2addc:	20003fec 	.word	0x20003fec

0002ade0 <_printf_float>:
   2ade0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ade4:	b091      	sub	sp, #68	; 0x44
   2ade6:	460c      	mov	r4, r1
   2ade8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   2adec:	4616      	mov	r6, r2
   2adee:	461f      	mov	r7, r3
   2adf0:	4605      	mov	r5, r0
   2adf2:	f000 fc5b 	bl	2b6ac <_localeconv_r>
   2adf6:	6803      	ldr	r3, [r0, #0]
   2adf8:	9309      	str	r3, [sp, #36]	; 0x24
   2adfa:	4618      	mov	r0, r3
   2adfc:	f7e1 f96e 	bl	c0dc <strlen>
   2ae00:	2300      	movs	r3, #0
   2ae02:	930e      	str	r3, [sp, #56]	; 0x38
   2ae04:	f8d8 3000 	ldr.w	r3, [r8]
   2ae08:	900a      	str	r0, [sp, #40]	; 0x28
   2ae0a:	3307      	adds	r3, #7
   2ae0c:	f023 0307 	bic.w	r3, r3, #7
   2ae10:	f103 0208 	add.w	r2, r3, #8
   2ae14:	f894 9018 	ldrb.w	r9, [r4, #24]
   2ae18:	f8d4 b000 	ldr.w	fp, [r4]
   2ae1c:	f8c8 2000 	str.w	r2, [r8]
   2ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ae24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2ae28:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   2ae2c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   2ae30:	930b      	str	r3, [sp, #44]	; 0x2c
   2ae32:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ae34:	4b9c      	ldr	r3, [pc, #624]	; (2b0a8 <_printf_float+0x2c8>)
   2ae36:	f04f 32ff 	mov.w	r2, #4294967295
   2ae3a:	4640      	mov	r0, r8
   2ae3c:	f7d5 ffd0 	bl	de0 <__aeabi_dcmpun>
   2ae40:	bb70      	cbnz	r0, 2aea0 <_printf_float+0xc0>
   2ae42:	4b99      	ldr	r3, [pc, #612]	; (2b0a8 <_printf_float+0x2c8>)
   2ae44:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ae46:	f04f 32ff 	mov.w	r2, #4294967295
   2ae4a:	4640      	mov	r0, r8
   2ae4c:	f7d5 ffaa 	bl	da4 <__aeabi_dcmple>
   2ae50:	bb30      	cbnz	r0, 2aea0 <_printf_float+0xc0>
   2ae52:	2200      	movs	r2, #0
   2ae54:	2300      	movs	r3, #0
   2ae56:	4640      	mov	r0, r8
   2ae58:	4651      	mov	r1, sl
   2ae5a:	f7d5 ff99 	bl	d90 <__aeabi_dcmplt>
   2ae5e:	b110      	cbz	r0, 2ae66 <_printf_float+0x86>
   2ae60:	232d      	movs	r3, #45	; 0x2d
   2ae62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2ae66:	4b91      	ldr	r3, [pc, #580]	; (2b0ac <_printf_float+0x2cc>)
   2ae68:	4891      	ldr	r0, [pc, #580]	; (2b0b0 <_printf_float+0x2d0>)
   2ae6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   2ae6e:	bf94      	ite	ls
   2ae70:	4698      	movls	r8, r3
   2ae72:	4680      	movhi	r8, r0
   2ae74:	2303      	movs	r3, #3
   2ae76:	6123      	str	r3, [r4, #16]
   2ae78:	f02b 0304 	bic.w	r3, fp, #4
   2ae7c:	6023      	str	r3, [r4, #0]
   2ae7e:	f04f 0a00 	mov.w	sl, #0
   2ae82:	9700      	str	r7, [sp, #0]
   2ae84:	4633      	mov	r3, r6
   2ae86:	aa0f      	add	r2, sp, #60	; 0x3c
   2ae88:	4621      	mov	r1, r4
   2ae8a:	4628      	mov	r0, r5
   2ae8c:	f005 fdde 	bl	30a4c <_printf_common>
   2ae90:	3001      	adds	r0, #1
   2ae92:	f040 808f 	bne.w	2afb4 <_printf_float+0x1d4>
   2ae96:	f04f 30ff 	mov.w	r0, #4294967295
   2ae9a:	b011      	add	sp, #68	; 0x44
   2ae9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aea0:	4642      	mov	r2, r8
   2aea2:	4653      	mov	r3, sl
   2aea4:	4640      	mov	r0, r8
   2aea6:	4651      	mov	r1, sl
   2aea8:	f7d5 ff9a 	bl	de0 <__aeabi_dcmpun>
   2aeac:	b140      	cbz	r0, 2aec0 <_printf_float+0xe0>
   2aeae:	f1ba 0f00 	cmp.w	sl, #0
   2aeb2:	bfbc      	itt	lt
   2aeb4:	232d      	movlt	r3, #45	; 0x2d
   2aeb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   2aeba:	487e      	ldr	r0, [pc, #504]	; (2b0b4 <_printf_float+0x2d4>)
   2aebc:	4b7e      	ldr	r3, [pc, #504]	; (2b0b8 <_printf_float+0x2d8>)
   2aebe:	e7d4      	b.n	2ae6a <_printf_float+0x8a>
   2aec0:	6863      	ldr	r3, [r4, #4]
   2aec2:	1c5a      	adds	r2, r3, #1
   2aec4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   2aec8:	d142      	bne.n	2af50 <_printf_float+0x170>
   2aeca:	2306      	movs	r3, #6
   2aecc:	6063      	str	r3, [r4, #4]
   2aece:	2200      	movs	r2, #0
   2aed0:	9206      	str	r2, [sp, #24]
   2aed2:	aa0e      	add	r2, sp, #56	; 0x38
   2aed4:	e9cd 9204 	strd	r9, r2, [sp, #16]
   2aed8:	aa0d      	add	r2, sp, #52	; 0x34
   2aeda:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2aede:	9203      	str	r2, [sp, #12]
   2aee0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2aee4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2aee8:	6023      	str	r3, [r4, #0]
   2aeea:	6863      	ldr	r3, [r4, #4]
   2aeec:	9300      	str	r3, [sp, #0]
   2aeee:	4642      	mov	r2, r8
   2aef0:	4653      	mov	r3, sl
   2aef2:	4628      	mov	r0, r5
   2aef4:	910b      	str	r1, [sp, #44]	; 0x2c
   2aef6:	f005 fd0b 	bl	30910 <__cvt>
   2aefa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2aefc:	2947      	cmp	r1, #71	; 0x47
   2aefe:	4680      	mov	r8, r0
   2af00:	990d      	ldr	r1, [sp, #52]	; 0x34
   2af02:	d108      	bne.n	2af16 <_printf_float+0x136>
   2af04:	1cc8      	adds	r0, r1, #3
   2af06:	db02      	blt.n	2af0e <_printf_float+0x12e>
   2af08:	6863      	ldr	r3, [r4, #4]
   2af0a:	4299      	cmp	r1, r3
   2af0c:	dd40      	ble.n	2af90 <_printf_float+0x1b0>
   2af0e:	f1a9 0902 	sub.w	r9, r9, #2
   2af12:	fa5f f989 	uxtb.w	r9, r9
   2af16:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   2af1a:	d81f      	bhi.n	2af5c <_printf_float+0x17c>
   2af1c:	3901      	subs	r1, #1
   2af1e:	464a      	mov	r2, r9
   2af20:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2af24:	910d      	str	r1, [sp, #52]	; 0x34
   2af26:	f005 fd53 	bl	309d0 <__exponent>
   2af2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2af2c:	1813      	adds	r3, r2, r0
   2af2e:	2a01      	cmp	r2, #1
   2af30:	4682      	mov	sl, r0
   2af32:	6123      	str	r3, [r4, #16]
   2af34:	dc02      	bgt.n	2af3c <_printf_float+0x15c>
   2af36:	6822      	ldr	r2, [r4, #0]
   2af38:	07d2      	lsls	r2, r2, #31
   2af3a:	d501      	bpl.n	2af40 <_printf_float+0x160>
   2af3c:	3301      	adds	r3, #1
   2af3e:	6123      	str	r3, [r4, #16]
   2af40:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2af44:	2b00      	cmp	r3, #0
   2af46:	d09c      	beq.n	2ae82 <_printf_float+0xa2>
   2af48:	232d      	movs	r3, #45	; 0x2d
   2af4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2af4e:	e798      	b.n	2ae82 <_printf_float+0xa2>
   2af50:	2947      	cmp	r1, #71	; 0x47
   2af52:	d1bc      	bne.n	2aece <_printf_float+0xee>
   2af54:	2b00      	cmp	r3, #0
   2af56:	d1ba      	bne.n	2aece <_printf_float+0xee>
   2af58:	2301      	movs	r3, #1
   2af5a:	e7b7      	b.n	2aecc <_printf_float+0xec>
   2af5c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   2af60:	d118      	bne.n	2af94 <_printf_float+0x1b4>
   2af62:	2900      	cmp	r1, #0
   2af64:	6863      	ldr	r3, [r4, #4]
   2af66:	dd0b      	ble.n	2af80 <_printf_float+0x1a0>
   2af68:	6121      	str	r1, [r4, #16]
   2af6a:	b913      	cbnz	r3, 2af72 <_printf_float+0x192>
   2af6c:	6822      	ldr	r2, [r4, #0]
   2af6e:	07d0      	lsls	r0, r2, #31
   2af70:	d502      	bpl.n	2af78 <_printf_float+0x198>
   2af72:	3301      	adds	r3, #1
   2af74:	440b      	add	r3, r1
   2af76:	6123      	str	r3, [r4, #16]
   2af78:	65a1      	str	r1, [r4, #88]	; 0x58
   2af7a:	f04f 0a00 	mov.w	sl, #0
   2af7e:	e7df      	b.n	2af40 <_printf_float+0x160>
   2af80:	b913      	cbnz	r3, 2af88 <_printf_float+0x1a8>
   2af82:	6822      	ldr	r2, [r4, #0]
   2af84:	07d2      	lsls	r2, r2, #31
   2af86:	d501      	bpl.n	2af8c <_printf_float+0x1ac>
   2af88:	3302      	adds	r3, #2
   2af8a:	e7f4      	b.n	2af76 <_printf_float+0x196>
   2af8c:	2301      	movs	r3, #1
   2af8e:	e7f2      	b.n	2af76 <_printf_float+0x196>
   2af90:	f04f 0967 	mov.w	r9, #103	; 0x67
   2af94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2af96:	4299      	cmp	r1, r3
   2af98:	db05      	blt.n	2afa6 <_printf_float+0x1c6>
   2af9a:	6823      	ldr	r3, [r4, #0]
   2af9c:	6121      	str	r1, [r4, #16]
   2af9e:	07d8      	lsls	r0, r3, #31
   2afa0:	d5ea      	bpl.n	2af78 <_printf_float+0x198>
   2afa2:	1c4b      	adds	r3, r1, #1
   2afa4:	e7e7      	b.n	2af76 <_printf_float+0x196>
   2afa6:	2900      	cmp	r1, #0
   2afa8:	bfd4      	ite	le
   2afaa:	f1c1 0202 	rsble	r2, r1, #2
   2afae:	2201      	movgt	r2, #1
   2afb0:	4413      	add	r3, r2
   2afb2:	e7e0      	b.n	2af76 <_printf_float+0x196>
   2afb4:	6823      	ldr	r3, [r4, #0]
   2afb6:	055a      	lsls	r2, r3, #21
   2afb8:	d407      	bmi.n	2afca <_printf_float+0x1ea>
   2afba:	6923      	ldr	r3, [r4, #16]
   2afbc:	4642      	mov	r2, r8
   2afbe:	4631      	mov	r1, r6
   2afc0:	4628      	mov	r0, r5
   2afc2:	47b8      	blx	r7
   2afc4:	3001      	adds	r0, #1
   2afc6:	d12b      	bne.n	2b020 <_printf_float+0x240>
   2afc8:	e765      	b.n	2ae96 <_printf_float+0xb6>
   2afca:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   2afce:	f240 80dc 	bls.w	2b18a <_printf_float+0x3aa>
   2afd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2afd6:	2200      	movs	r2, #0
   2afd8:	2300      	movs	r3, #0
   2afda:	f7d5 fecf 	bl	d7c <__aeabi_dcmpeq>
   2afde:	2800      	cmp	r0, #0
   2afe0:	d033      	beq.n	2b04a <_printf_float+0x26a>
   2afe2:	4a36      	ldr	r2, [pc, #216]	; (2b0bc <_printf_float+0x2dc>)
   2afe4:	2301      	movs	r3, #1
   2afe6:	4631      	mov	r1, r6
   2afe8:	4628      	mov	r0, r5
   2afea:	47b8      	blx	r7
   2afec:	3001      	adds	r0, #1
   2afee:	f43f af52 	beq.w	2ae96 <_printf_float+0xb6>
   2aff2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2aff6:	429a      	cmp	r2, r3
   2aff8:	db02      	blt.n	2b000 <_printf_float+0x220>
   2affa:	6823      	ldr	r3, [r4, #0]
   2affc:	07d8      	lsls	r0, r3, #31
   2affe:	d50f      	bpl.n	2b020 <_printf_float+0x240>
   2b000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2b004:	4631      	mov	r1, r6
   2b006:	4628      	mov	r0, r5
   2b008:	47b8      	blx	r7
   2b00a:	3001      	adds	r0, #1
   2b00c:	f43f af43 	beq.w	2ae96 <_printf_float+0xb6>
   2b010:	f04f 0800 	mov.w	r8, #0
   2b014:	f104 091a 	add.w	r9, r4, #26
   2b018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b01a:	3b01      	subs	r3, #1
   2b01c:	4543      	cmp	r3, r8
   2b01e:	dc09      	bgt.n	2b034 <_printf_float+0x254>
   2b020:	6823      	ldr	r3, [r4, #0]
   2b022:	079b      	lsls	r3, r3, #30
   2b024:	f100 8101 	bmi.w	2b22a <_printf_float+0x44a>
   2b028:	68e0      	ldr	r0, [r4, #12]
   2b02a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2b02c:	4298      	cmp	r0, r3
   2b02e:	bfb8      	it	lt
   2b030:	4618      	movlt	r0, r3
   2b032:	e732      	b.n	2ae9a <_printf_float+0xba>
   2b034:	2301      	movs	r3, #1
   2b036:	464a      	mov	r2, r9
   2b038:	4631      	mov	r1, r6
   2b03a:	4628      	mov	r0, r5
   2b03c:	47b8      	blx	r7
   2b03e:	3001      	adds	r0, #1
   2b040:	f43f af29 	beq.w	2ae96 <_printf_float+0xb6>
   2b044:	f108 0801 	add.w	r8, r8, #1
   2b048:	e7e6      	b.n	2b018 <_printf_float+0x238>
   2b04a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b04c:	2b00      	cmp	r3, #0
   2b04e:	dc37      	bgt.n	2b0c0 <_printf_float+0x2e0>
   2b050:	4a1a      	ldr	r2, [pc, #104]	; (2b0bc <_printf_float+0x2dc>)
   2b052:	2301      	movs	r3, #1
   2b054:	4631      	mov	r1, r6
   2b056:	4628      	mov	r0, r5
   2b058:	47b8      	blx	r7
   2b05a:	3001      	adds	r0, #1
   2b05c:	f43f af1b 	beq.w	2ae96 <_printf_float+0xb6>
   2b060:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2b064:	4313      	orrs	r3, r2
   2b066:	d102      	bne.n	2b06e <_printf_float+0x28e>
   2b068:	6823      	ldr	r3, [r4, #0]
   2b06a:	07d9      	lsls	r1, r3, #31
   2b06c:	d5d8      	bpl.n	2b020 <_printf_float+0x240>
   2b06e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2b072:	4631      	mov	r1, r6
   2b074:	4628      	mov	r0, r5
   2b076:	47b8      	blx	r7
   2b078:	3001      	adds	r0, #1
   2b07a:	f43f af0c 	beq.w	2ae96 <_printf_float+0xb6>
   2b07e:	f04f 0900 	mov.w	r9, #0
   2b082:	f104 0a1a 	add.w	sl, r4, #26
   2b086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b088:	425b      	negs	r3, r3
   2b08a:	454b      	cmp	r3, r9
   2b08c:	dc01      	bgt.n	2b092 <_printf_float+0x2b2>
   2b08e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b090:	e794      	b.n	2afbc <_printf_float+0x1dc>
   2b092:	2301      	movs	r3, #1
   2b094:	4652      	mov	r2, sl
   2b096:	4631      	mov	r1, r6
   2b098:	4628      	mov	r0, r5
   2b09a:	47b8      	blx	r7
   2b09c:	3001      	adds	r0, #1
   2b09e:	f43f aefa 	beq.w	2ae96 <_printf_float+0xb6>
   2b0a2:	f109 0901 	add.w	r9, r9, #1
   2b0a6:	e7ee      	b.n	2b086 <_printf_float+0x2a6>
   2b0a8:	7fefffff 	.word	0x7fefffff
   2b0ac:	00036839 	.word	0x00036839
   2b0b0:	0003683d 	.word	0x0003683d
   2b0b4:	00036845 	.word	0x00036845
   2b0b8:	00036841 	.word	0x00036841
   2b0bc:	00036849 	.word	0x00036849
   2b0c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b0c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2b0c4:	429a      	cmp	r2, r3
   2b0c6:	bfa8      	it	ge
   2b0c8:	461a      	movge	r2, r3
   2b0ca:	2a00      	cmp	r2, #0
   2b0cc:	4691      	mov	r9, r2
   2b0ce:	dc37      	bgt.n	2b140 <_printf_float+0x360>
   2b0d0:	f04f 0b00 	mov.w	fp, #0
   2b0d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2b0d8:	f104 021a 	add.w	r2, r4, #26
   2b0dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   2b0e0:	ebaa 0309 	sub.w	r3, sl, r9
   2b0e4:	455b      	cmp	r3, fp
   2b0e6:	dc33      	bgt.n	2b150 <_printf_float+0x370>
   2b0e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2b0ec:	429a      	cmp	r2, r3
   2b0ee:	db3b      	blt.n	2b168 <_printf_float+0x388>
   2b0f0:	6823      	ldr	r3, [r4, #0]
   2b0f2:	07da      	lsls	r2, r3, #31
   2b0f4:	d438      	bmi.n	2b168 <_printf_float+0x388>
   2b0f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b0f8:	990d      	ldr	r1, [sp, #52]	; 0x34
   2b0fa:	eba2 030a 	sub.w	r3, r2, sl
   2b0fe:	eba2 0901 	sub.w	r9, r2, r1
   2b102:	4599      	cmp	r9, r3
   2b104:	bfa8      	it	ge
   2b106:	4699      	movge	r9, r3
   2b108:	f1b9 0f00 	cmp.w	r9, #0
   2b10c:	dc34      	bgt.n	2b178 <_printf_float+0x398>
   2b10e:	f04f 0800 	mov.w	r8, #0
   2b112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2b116:	f104 0a1a 	add.w	sl, r4, #26
   2b11a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2b11e:	1a9b      	subs	r3, r3, r2
   2b120:	eba3 0309 	sub.w	r3, r3, r9
   2b124:	4543      	cmp	r3, r8
   2b126:	f77f af7b 	ble.w	2b020 <_printf_float+0x240>
   2b12a:	2301      	movs	r3, #1
   2b12c:	4652      	mov	r2, sl
   2b12e:	4631      	mov	r1, r6
   2b130:	4628      	mov	r0, r5
   2b132:	47b8      	blx	r7
   2b134:	3001      	adds	r0, #1
   2b136:	f43f aeae 	beq.w	2ae96 <_printf_float+0xb6>
   2b13a:	f108 0801 	add.w	r8, r8, #1
   2b13e:	e7ec      	b.n	2b11a <_printf_float+0x33a>
   2b140:	4613      	mov	r3, r2
   2b142:	4631      	mov	r1, r6
   2b144:	4642      	mov	r2, r8
   2b146:	4628      	mov	r0, r5
   2b148:	47b8      	blx	r7
   2b14a:	3001      	adds	r0, #1
   2b14c:	d1c0      	bne.n	2b0d0 <_printf_float+0x2f0>
   2b14e:	e6a2      	b.n	2ae96 <_printf_float+0xb6>
   2b150:	2301      	movs	r3, #1
   2b152:	4631      	mov	r1, r6
   2b154:	4628      	mov	r0, r5
   2b156:	920b      	str	r2, [sp, #44]	; 0x2c
   2b158:	47b8      	blx	r7
   2b15a:	3001      	adds	r0, #1
   2b15c:	f43f ae9b 	beq.w	2ae96 <_printf_float+0xb6>
   2b160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2b162:	f10b 0b01 	add.w	fp, fp, #1
   2b166:	e7b9      	b.n	2b0dc <_printf_float+0x2fc>
   2b168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2b16c:	4631      	mov	r1, r6
   2b16e:	4628      	mov	r0, r5
   2b170:	47b8      	blx	r7
   2b172:	3001      	adds	r0, #1
   2b174:	d1bf      	bne.n	2b0f6 <_printf_float+0x316>
   2b176:	e68e      	b.n	2ae96 <_printf_float+0xb6>
   2b178:	464b      	mov	r3, r9
   2b17a:	eb08 020a 	add.w	r2, r8, sl
   2b17e:	4631      	mov	r1, r6
   2b180:	4628      	mov	r0, r5
   2b182:	47b8      	blx	r7
   2b184:	3001      	adds	r0, #1
   2b186:	d1c2      	bne.n	2b10e <_printf_float+0x32e>
   2b188:	e685      	b.n	2ae96 <_printf_float+0xb6>
   2b18a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b18c:	2a01      	cmp	r2, #1
   2b18e:	dc01      	bgt.n	2b194 <_printf_float+0x3b4>
   2b190:	07db      	lsls	r3, r3, #31
   2b192:	d537      	bpl.n	2b204 <_printf_float+0x424>
   2b194:	2301      	movs	r3, #1
   2b196:	4642      	mov	r2, r8
   2b198:	4631      	mov	r1, r6
   2b19a:	4628      	mov	r0, r5
   2b19c:	47b8      	blx	r7
   2b19e:	3001      	adds	r0, #1
   2b1a0:	f43f ae79 	beq.w	2ae96 <_printf_float+0xb6>
   2b1a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2b1a8:	4631      	mov	r1, r6
   2b1aa:	4628      	mov	r0, r5
   2b1ac:	47b8      	blx	r7
   2b1ae:	3001      	adds	r0, #1
   2b1b0:	f43f ae71 	beq.w	2ae96 <_printf_float+0xb6>
   2b1b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2b1b8:	2200      	movs	r2, #0
   2b1ba:	2300      	movs	r3, #0
   2b1bc:	f7d5 fdde 	bl	d7c <__aeabi_dcmpeq>
   2b1c0:	b9d8      	cbnz	r0, 2b1fa <_printf_float+0x41a>
   2b1c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b1c4:	f108 0201 	add.w	r2, r8, #1
   2b1c8:	3b01      	subs	r3, #1
   2b1ca:	4631      	mov	r1, r6
   2b1cc:	4628      	mov	r0, r5
   2b1ce:	47b8      	blx	r7
   2b1d0:	3001      	adds	r0, #1
   2b1d2:	d10e      	bne.n	2b1f2 <_printf_float+0x412>
   2b1d4:	e65f      	b.n	2ae96 <_printf_float+0xb6>
   2b1d6:	2301      	movs	r3, #1
   2b1d8:	464a      	mov	r2, r9
   2b1da:	4631      	mov	r1, r6
   2b1dc:	4628      	mov	r0, r5
   2b1de:	47b8      	blx	r7
   2b1e0:	3001      	adds	r0, #1
   2b1e2:	f43f ae58 	beq.w	2ae96 <_printf_float+0xb6>
   2b1e6:	f108 0801 	add.w	r8, r8, #1
   2b1ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b1ec:	3b01      	subs	r3, #1
   2b1ee:	4543      	cmp	r3, r8
   2b1f0:	dcf1      	bgt.n	2b1d6 <_printf_float+0x3f6>
   2b1f2:	4653      	mov	r3, sl
   2b1f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2b1f8:	e6e1      	b.n	2afbe <_printf_float+0x1de>
   2b1fa:	f04f 0800 	mov.w	r8, #0
   2b1fe:	f104 091a 	add.w	r9, r4, #26
   2b202:	e7f2      	b.n	2b1ea <_printf_float+0x40a>
   2b204:	2301      	movs	r3, #1
   2b206:	4642      	mov	r2, r8
   2b208:	e7df      	b.n	2b1ca <_printf_float+0x3ea>
   2b20a:	2301      	movs	r3, #1
   2b20c:	464a      	mov	r2, r9
   2b20e:	4631      	mov	r1, r6
   2b210:	4628      	mov	r0, r5
   2b212:	47b8      	blx	r7
   2b214:	3001      	adds	r0, #1
   2b216:	f43f ae3e 	beq.w	2ae96 <_printf_float+0xb6>
   2b21a:	f108 0801 	add.w	r8, r8, #1
   2b21e:	68e3      	ldr	r3, [r4, #12]
   2b220:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b222:	1a5b      	subs	r3, r3, r1
   2b224:	4543      	cmp	r3, r8
   2b226:	dcf0      	bgt.n	2b20a <_printf_float+0x42a>
   2b228:	e6fe      	b.n	2b028 <_printf_float+0x248>
   2b22a:	f04f 0800 	mov.w	r8, #0
   2b22e:	f104 0919 	add.w	r9, r4, #25
   2b232:	e7f4      	b.n	2b21e <_printf_float+0x43e>

0002b234 <_printf_i>:
   2b234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2b238:	460c      	mov	r4, r1
   2b23a:	4691      	mov	r9, r2
   2b23c:	7e27      	ldrb	r7, [r4, #24]
   2b23e:	990c      	ldr	r1, [sp, #48]	; 0x30
   2b240:	2f78      	cmp	r7, #120	; 0x78
   2b242:	4680      	mov	r8, r0
   2b244:	469a      	mov	sl, r3
   2b246:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2b24a:	d807      	bhi.n	2b25c <_printf_i+0x28>
   2b24c:	2f62      	cmp	r7, #98	; 0x62
   2b24e:	d80a      	bhi.n	2b266 <_printf_i+0x32>
   2b250:	2f00      	cmp	r7, #0
   2b252:	f000 80d8 	beq.w	2b406 <_printf_i+0x1d2>
   2b256:	2f58      	cmp	r7, #88	; 0x58
   2b258:	f000 80a3 	beq.w	2b3a2 <_printf_i+0x16e>
   2b25c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2b260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2b264:	e03a      	b.n	2b2dc <_printf_i+0xa8>
   2b266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2b26a:	2b15      	cmp	r3, #21
   2b26c:	d8f6      	bhi.n	2b25c <_printf_i+0x28>
   2b26e:	a001      	add	r0, pc, #4	; (adr r0, 2b274 <_printf_i+0x40>)
   2b270:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   2b274:	0002b2cd 	.word	0x0002b2cd
   2b278:	0002b2e1 	.word	0x0002b2e1
   2b27c:	0002b25d 	.word	0x0002b25d
   2b280:	0002b25d 	.word	0x0002b25d
   2b284:	0002b25d 	.word	0x0002b25d
   2b288:	0002b25d 	.word	0x0002b25d
   2b28c:	0002b2e1 	.word	0x0002b2e1
   2b290:	0002b25d 	.word	0x0002b25d
   2b294:	0002b25d 	.word	0x0002b25d
   2b298:	0002b25d 	.word	0x0002b25d
   2b29c:	0002b25d 	.word	0x0002b25d
   2b2a0:	0002b3ed 	.word	0x0002b3ed
   2b2a4:	0002b311 	.word	0x0002b311
   2b2a8:	0002b3cf 	.word	0x0002b3cf
   2b2ac:	0002b25d 	.word	0x0002b25d
   2b2b0:	0002b25d 	.word	0x0002b25d
   2b2b4:	0002b40f 	.word	0x0002b40f
   2b2b8:	0002b25d 	.word	0x0002b25d
   2b2bc:	0002b311 	.word	0x0002b311
   2b2c0:	0002b25d 	.word	0x0002b25d
   2b2c4:	0002b25d 	.word	0x0002b25d
   2b2c8:	0002b3d7 	.word	0x0002b3d7
   2b2cc:	680b      	ldr	r3, [r1, #0]
   2b2ce:	1d1a      	adds	r2, r3, #4
   2b2d0:	681b      	ldr	r3, [r3, #0]
   2b2d2:	600a      	str	r2, [r1, #0]
   2b2d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2b2d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2b2dc:	2301      	movs	r3, #1
   2b2de:	e0a3      	b.n	2b428 <_printf_i+0x1f4>
   2b2e0:	6825      	ldr	r5, [r4, #0]
   2b2e2:	6808      	ldr	r0, [r1, #0]
   2b2e4:	062e      	lsls	r6, r5, #24
   2b2e6:	f100 0304 	add.w	r3, r0, #4
   2b2ea:	d50a      	bpl.n	2b302 <_printf_i+0xce>
   2b2ec:	6805      	ldr	r5, [r0, #0]
   2b2ee:	600b      	str	r3, [r1, #0]
   2b2f0:	2d00      	cmp	r5, #0
   2b2f2:	da03      	bge.n	2b2fc <_printf_i+0xc8>
   2b2f4:	232d      	movs	r3, #45	; 0x2d
   2b2f6:	426d      	negs	r5, r5
   2b2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2b2fc:	485e      	ldr	r0, [pc, #376]	; (2b478 <_printf_i+0x244>)
   2b2fe:	230a      	movs	r3, #10
   2b300:	e019      	b.n	2b336 <_printf_i+0x102>
   2b302:	f015 0f40 	tst.w	r5, #64	; 0x40
   2b306:	6805      	ldr	r5, [r0, #0]
   2b308:	600b      	str	r3, [r1, #0]
   2b30a:	bf18      	it	ne
   2b30c:	b22d      	sxthne	r5, r5
   2b30e:	e7ef      	b.n	2b2f0 <_printf_i+0xbc>
   2b310:	680b      	ldr	r3, [r1, #0]
   2b312:	6825      	ldr	r5, [r4, #0]
   2b314:	1d18      	adds	r0, r3, #4
   2b316:	6008      	str	r0, [r1, #0]
   2b318:	0628      	lsls	r0, r5, #24
   2b31a:	d501      	bpl.n	2b320 <_printf_i+0xec>
   2b31c:	681d      	ldr	r5, [r3, #0]
   2b31e:	e002      	b.n	2b326 <_printf_i+0xf2>
   2b320:	0669      	lsls	r1, r5, #25
   2b322:	d5fb      	bpl.n	2b31c <_printf_i+0xe8>
   2b324:	881d      	ldrh	r5, [r3, #0]
   2b326:	4854      	ldr	r0, [pc, #336]	; (2b478 <_printf_i+0x244>)
   2b328:	2f6f      	cmp	r7, #111	; 0x6f
   2b32a:	bf0c      	ite	eq
   2b32c:	2308      	moveq	r3, #8
   2b32e:	230a      	movne	r3, #10
   2b330:	2100      	movs	r1, #0
   2b332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2b336:	6866      	ldr	r6, [r4, #4]
   2b338:	60a6      	str	r6, [r4, #8]
   2b33a:	2e00      	cmp	r6, #0
   2b33c:	bfa2      	ittt	ge
   2b33e:	6821      	ldrge	r1, [r4, #0]
   2b340:	f021 0104 	bicge.w	r1, r1, #4
   2b344:	6021      	strge	r1, [r4, #0]
   2b346:	b90d      	cbnz	r5, 2b34c <_printf_i+0x118>
   2b348:	2e00      	cmp	r6, #0
   2b34a:	d04d      	beq.n	2b3e8 <_printf_i+0x1b4>
   2b34c:	4616      	mov	r6, r2
   2b34e:	fbb5 f1f3 	udiv	r1, r5, r3
   2b352:	fb03 5711 	mls	r7, r3, r1, r5
   2b356:	5dc7      	ldrb	r7, [r0, r7]
   2b358:	f806 7d01 	strb.w	r7, [r6, #-1]!
   2b35c:	462f      	mov	r7, r5
   2b35e:	42bb      	cmp	r3, r7
   2b360:	460d      	mov	r5, r1
   2b362:	d9f4      	bls.n	2b34e <_printf_i+0x11a>
   2b364:	2b08      	cmp	r3, #8
   2b366:	d10b      	bne.n	2b380 <_printf_i+0x14c>
   2b368:	6823      	ldr	r3, [r4, #0]
   2b36a:	07df      	lsls	r7, r3, #31
   2b36c:	d508      	bpl.n	2b380 <_printf_i+0x14c>
   2b36e:	6923      	ldr	r3, [r4, #16]
   2b370:	6861      	ldr	r1, [r4, #4]
   2b372:	4299      	cmp	r1, r3
   2b374:	bfde      	ittt	le
   2b376:	2330      	movle	r3, #48	; 0x30
   2b378:	f806 3c01 	strble.w	r3, [r6, #-1]
   2b37c:	f106 36ff 	addle.w	r6, r6, #4294967295
   2b380:	1b92      	subs	r2, r2, r6
   2b382:	6122      	str	r2, [r4, #16]
   2b384:	f8cd a000 	str.w	sl, [sp]
   2b388:	464b      	mov	r3, r9
   2b38a:	aa03      	add	r2, sp, #12
   2b38c:	4621      	mov	r1, r4
   2b38e:	4640      	mov	r0, r8
   2b390:	f005 fb5c 	bl	30a4c <_printf_common>
   2b394:	3001      	adds	r0, #1
   2b396:	d14c      	bne.n	2b432 <_printf_i+0x1fe>
   2b398:	f04f 30ff 	mov.w	r0, #4294967295
   2b39c:	b004      	add	sp, #16
   2b39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b3a2:	4835      	ldr	r0, [pc, #212]	; (2b478 <_printf_i+0x244>)
   2b3a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2b3a8:	6823      	ldr	r3, [r4, #0]
   2b3aa:	680e      	ldr	r6, [r1, #0]
   2b3ac:	061f      	lsls	r7, r3, #24
   2b3ae:	f856 5b04 	ldr.w	r5, [r6], #4
   2b3b2:	600e      	str	r6, [r1, #0]
   2b3b4:	d514      	bpl.n	2b3e0 <_printf_i+0x1ac>
   2b3b6:	07d9      	lsls	r1, r3, #31
   2b3b8:	bf44      	itt	mi
   2b3ba:	f043 0320 	orrmi.w	r3, r3, #32
   2b3be:	6023      	strmi	r3, [r4, #0]
   2b3c0:	b91d      	cbnz	r5, 2b3ca <_printf_i+0x196>
   2b3c2:	6823      	ldr	r3, [r4, #0]
   2b3c4:	f023 0320 	bic.w	r3, r3, #32
   2b3c8:	6023      	str	r3, [r4, #0]
   2b3ca:	2310      	movs	r3, #16
   2b3cc:	e7b0      	b.n	2b330 <_printf_i+0xfc>
   2b3ce:	6823      	ldr	r3, [r4, #0]
   2b3d0:	f043 0320 	orr.w	r3, r3, #32
   2b3d4:	6023      	str	r3, [r4, #0]
   2b3d6:	2378      	movs	r3, #120	; 0x78
   2b3d8:	4828      	ldr	r0, [pc, #160]	; (2b47c <_printf_i+0x248>)
   2b3da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   2b3de:	e7e3      	b.n	2b3a8 <_printf_i+0x174>
   2b3e0:	065e      	lsls	r6, r3, #25
   2b3e2:	bf48      	it	mi
   2b3e4:	b2ad      	uxthmi	r5, r5
   2b3e6:	e7e6      	b.n	2b3b6 <_printf_i+0x182>
   2b3e8:	4616      	mov	r6, r2
   2b3ea:	e7bb      	b.n	2b364 <_printf_i+0x130>
   2b3ec:	680b      	ldr	r3, [r1, #0]
   2b3ee:	6826      	ldr	r6, [r4, #0]
   2b3f0:	6960      	ldr	r0, [r4, #20]
   2b3f2:	1d1d      	adds	r5, r3, #4
   2b3f4:	600d      	str	r5, [r1, #0]
   2b3f6:	0635      	lsls	r5, r6, #24
   2b3f8:	681b      	ldr	r3, [r3, #0]
   2b3fa:	d501      	bpl.n	2b400 <_printf_i+0x1cc>
   2b3fc:	6018      	str	r0, [r3, #0]
   2b3fe:	e002      	b.n	2b406 <_printf_i+0x1d2>
   2b400:	0671      	lsls	r1, r6, #25
   2b402:	d5fb      	bpl.n	2b3fc <_printf_i+0x1c8>
   2b404:	8018      	strh	r0, [r3, #0]
   2b406:	2300      	movs	r3, #0
   2b408:	6123      	str	r3, [r4, #16]
   2b40a:	4616      	mov	r6, r2
   2b40c:	e7ba      	b.n	2b384 <_printf_i+0x150>
   2b40e:	680b      	ldr	r3, [r1, #0]
   2b410:	1d1a      	adds	r2, r3, #4
   2b412:	600a      	str	r2, [r1, #0]
   2b414:	681e      	ldr	r6, [r3, #0]
   2b416:	6862      	ldr	r2, [r4, #4]
   2b418:	2100      	movs	r1, #0
   2b41a:	4630      	mov	r0, r6
   2b41c:	f7d4 fe70 	bl	100 <memchr>
   2b420:	b108      	cbz	r0, 2b426 <_printf_i+0x1f2>
   2b422:	1b80      	subs	r0, r0, r6
   2b424:	6060      	str	r0, [r4, #4]
   2b426:	6863      	ldr	r3, [r4, #4]
   2b428:	6123      	str	r3, [r4, #16]
   2b42a:	2300      	movs	r3, #0
   2b42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2b430:	e7a8      	b.n	2b384 <_printf_i+0x150>
   2b432:	6923      	ldr	r3, [r4, #16]
   2b434:	4632      	mov	r2, r6
   2b436:	4649      	mov	r1, r9
   2b438:	4640      	mov	r0, r8
   2b43a:	47d0      	blx	sl
   2b43c:	3001      	adds	r0, #1
   2b43e:	d0ab      	beq.n	2b398 <_printf_i+0x164>
   2b440:	6823      	ldr	r3, [r4, #0]
   2b442:	079b      	lsls	r3, r3, #30
   2b444:	d413      	bmi.n	2b46e <_printf_i+0x23a>
   2b446:	68e0      	ldr	r0, [r4, #12]
   2b448:	9b03      	ldr	r3, [sp, #12]
   2b44a:	4298      	cmp	r0, r3
   2b44c:	bfb8      	it	lt
   2b44e:	4618      	movlt	r0, r3
   2b450:	e7a4      	b.n	2b39c <_printf_i+0x168>
   2b452:	2301      	movs	r3, #1
   2b454:	4632      	mov	r2, r6
   2b456:	4649      	mov	r1, r9
   2b458:	4640      	mov	r0, r8
   2b45a:	47d0      	blx	sl
   2b45c:	3001      	adds	r0, #1
   2b45e:	d09b      	beq.n	2b398 <_printf_i+0x164>
   2b460:	3501      	adds	r5, #1
   2b462:	68e3      	ldr	r3, [r4, #12]
   2b464:	9903      	ldr	r1, [sp, #12]
   2b466:	1a5b      	subs	r3, r3, r1
   2b468:	42ab      	cmp	r3, r5
   2b46a:	dcf2      	bgt.n	2b452 <_printf_i+0x21e>
   2b46c:	e7eb      	b.n	2b446 <_printf_i+0x212>
   2b46e:	2500      	movs	r5, #0
   2b470:	f104 0619 	add.w	r6, r4, #25
   2b474:	e7f5      	b.n	2b462 <_printf_i+0x22e>
   2b476:	bf00      	nop
   2b478:	0003684b 	.word	0x0003684b
   2b47c:	0003685c 	.word	0x0003685c

0002b480 <iprintf>:
   2b480:	b40f      	push	{r0, r1, r2, r3}
   2b482:	4b0a      	ldr	r3, [pc, #40]	; (2b4ac <iprintf+0x2c>)
   2b484:	b513      	push	{r0, r1, r4, lr}
   2b486:	681c      	ldr	r4, [r3, #0]
   2b488:	b124      	cbz	r4, 2b494 <iprintf+0x14>
   2b48a:	69a3      	ldr	r3, [r4, #24]
   2b48c:	b913      	cbnz	r3, 2b494 <iprintf+0x14>
   2b48e:	4620      	mov	r0, r4
   2b490:	f000 f88e 	bl	2b5b0 <__sinit>
   2b494:	ab05      	add	r3, sp, #20
   2b496:	9a04      	ldr	r2, [sp, #16]
   2b498:	68a1      	ldr	r1, [r4, #8]
   2b49a:	9301      	str	r3, [sp, #4]
   2b49c:	4620      	mov	r0, r4
   2b49e:	f000 fa63 	bl	2b968 <_vfiprintf_r>
   2b4a2:	b002      	add	sp, #8
   2b4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b4a8:	b004      	add	sp, #16
   2b4aa:	4770      	bx	lr
   2b4ac:	200008e0 	.word	0x200008e0

0002b4b0 <_sbrk_r>:
   2b4b0:	b538      	push	{r3, r4, r5, lr}
   2b4b2:	4d06      	ldr	r5, [pc, #24]	; (2b4cc <_sbrk_r+0x1c>)
   2b4b4:	2300      	movs	r3, #0
   2b4b6:	4604      	mov	r4, r0
   2b4b8:	4608      	mov	r0, r1
   2b4ba:	602b      	str	r3, [r5, #0]
   2b4bc:	f7ea fe32 	bl	16124 <_sbrk>
   2b4c0:	1c43      	adds	r3, r0, #1
   2b4c2:	d102      	bne.n	2b4ca <_sbrk_r+0x1a>
   2b4c4:	682b      	ldr	r3, [r5, #0]
   2b4c6:	b103      	cbz	r3, 2b4ca <_sbrk_r+0x1a>
   2b4c8:	6023      	str	r3, [r4, #0]
   2b4ca:	bd38      	pop	{r3, r4, r5, pc}
   2b4cc:	200041b8 	.word	0x200041b8

0002b4d0 <vsniprintf>:
   2b4d0:	b507      	push	{r0, r1, r2, lr}
   2b4d2:	9300      	str	r3, [sp, #0]
   2b4d4:	4613      	mov	r3, r2
   2b4d6:	460a      	mov	r2, r1
   2b4d8:	4601      	mov	r1, r0
   2b4da:	4803      	ldr	r0, [pc, #12]	; (2b4e8 <vsniprintf+0x18>)
   2b4dc:	6800      	ldr	r0, [r0, #0]
   2b4de:	f005 fb80 	bl	30be2 <_vsniprintf_r>
   2b4e2:	b003      	add	sp, #12
   2b4e4:	f85d fb04 	ldr.w	pc, [sp], #4
   2b4e8:	200008e0 	.word	0x200008e0

0002b4ec <_vsiprintf_r>:
   2b4ec:	b500      	push	{lr}
   2b4ee:	b09b      	sub	sp, #108	; 0x6c
   2b4f0:	9100      	str	r1, [sp, #0]
   2b4f2:	9104      	str	r1, [sp, #16]
   2b4f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2b4f8:	9105      	str	r1, [sp, #20]
   2b4fa:	9102      	str	r1, [sp, #8]
   2b4fc:	4905      	ldr	r1, [pc, #20]	; (2b514 <_vsiprintf_r+0x28>)
   2b4fe:	9103      	str	r1, [sp, #12]
   2b500:	4669      	mov	r1, sp
   2b502:	f000 f931 	bl	2b768 <_svfiprintf_r>
   2b506:	9b00      	ldr	r3, [sp, #0]
   2b508:	2200      	movs	r2, #0
   2b50a:	701a      	strb	r2, [r3, #0]
   2b50c:	b01b      	add	sp, #108	; 0x6c
   2b50e:	f85d fb04 	ldr.w	pc, [sp], #4
   2b512:	bf00      	nop
   2b514:	ffff0208 	.word	0xffff0208

0002b518 <vsiprintf>:
   2b518:	4613      	mov	r3, r2
   2b51a:	460a      	mov	r2, r1
   2b51c:	4601      	mov	r1, r0
   2b51e:	4802      	ldr	r0, [pc, #8]	; (2b528 <vsiprintf+0x10>)
   2b520:	6800      	ldr	r0, [r0, #0]
   2b522:	f7ff bfe3 	b.w	2b4ec <_vsiprintf_r>
   2b526:	bf00      	nop
   2b528:	200008e0 	.word	0x200008e0

0002b52c <std>:
   2b52c:	2300      	movs	r3, #0
   2b52e:	b510      	push	{r4, lr}
   2b530:	4604      	mov	r4, r0
   2b532:	e9c0 3300 	strd	r3, r3, [r0]
   2b536:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2b53a:	6083      	str	r3, [r0, #8]
   2b53c:	8181      	strh	r1, [r0, #12]
   2b53e:	6643      	str	r3, [r0, #100]	; 0x64
   2b540:	81c2      	strh	r2, [r0, #14]
   2b542:	6183      	str	r3, [r0, #24]
   2b544:	4619      	mov	r1, r3
   2b546:	2208      	movs	r2, #8
   2b548:	305c      	adds	r0, #92	; 0x5c
   2b54a:	f005 f9d9 	bl	30900 <memset>
   2b54e:	4b05      	ldr	r3, [pc, #20]	; (2b564 <std+0x38>)
   2b550:	6263      	str	r3, [r4, #36]	; 0x24
   2b552:	4b05      	ldr	r3, [pc, #20]	; (2b568 <std+0x3c>)
   2b554:	62a3      	str	r3, [r4, #40]	; 0x28
   2b556:	4b05      	ldr	r3, [pc, #20]	; (2b56c <std+0x40>)
   2b558:	62e3      	str	r3, [r4, #44]	; 0x2c
   2b55a:	4b05      	ldr	r3, [pc, #20]	; (2b570 <std+0x44>)
   2b55c:	6224      	str	r4, [r4, #32]
   2b55e:	6323      	str	r3, [r4, #48]	; 0x30
   2b560:	bd10      	pop	{r4, pc}
   2b562:	bf00      	nop
   2b564:	0003149d 	.word	0x0003149d
   2b568:	000314bf 	.word	0x000314bf
   2b56c:	000314f7 	.word	0x000314f7
   2b570:	0003151b 	.word	0x0003151b

0002b574 <_cleanup_r>:
   2b574:	4901      	ldr	r1, [pc, #4]	; (2b57c <_cleanup_r+0x8>)
   2b576:	f005 bc01 	b.w	30d7c <_fwalk_reent>
   2b57a:	bf00      	nop
   2b57c:	0002be99 	.word	0x0002be99

0002b580 <__sfp_lock_acquire>:
   2b580:	4801      	ldr	r0, [pc, #4]	; (2b588 <__sfp_lock_acquire+0x8>)
   2b582:	f7ea be1b 	b.w	161bc <__retarget_lock_acquire_recursive>
   2b586:	bf00      	nop
   2b588:	20000ba8 	.word	0x20000ba8

0002b58c <__sfp_lock_release>:
   2b58c:	4801      	ldr	r0, [pc, #4]	; (2b594 <__sfp_lock_release+0x8>)
   2b58e:	f7ea be35 	b.w	161fc <__retarget_lock_release_recursive>
   2b592:	bf00      	nop
   2b594:	20000ba8 	.word	0x20000ba8

0002b598 <__sinit_lock_acquire>:
   2b598:	4801      	ldr	r0, [pc, #4]	; (2b5a0 <__sinit_lock_acquire+0x8>)
   2b59a:	f7ea be0f 	b.w	161bc <__retarget_lock_acquire_recursive>
   2b59e:	bf00      	nop
   2b5a0:	20000bbc 	.word	0x20000bbc

0002b5a4 <__sinit_lock_release>:
   2b5a4:	4801      	ldr	r0, [pc, #4]	; (2b5ac <__sinit_lock_release+0x8>)
   2b5a6:	f7ea be29 	b.w	161fc <__retarget_lock_release_recursive>
   2b5aa:	bf00      	nop
   2b5ac:	20000bbc 	.word	0x20000bbc

0002b5b0 <__sinit>:
   2b5b0:	b510      	push	{r4, lr}
   2b5b2:	4604      	mov	r4, r0
   2b5b4:	f7ff fff0 	bl	2b598 <__sinit_lock_acquire>
   2b5b8:	69a3      	ldr	r3, [r4, #24]
   2b5ba:	b11b      	cbz	r3, 2b5c4 <__sinit+0x14>
   2b5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b5c0:	f7ff bff0 	b.w	2b5a4 <__sinit_lock_release>
   2b5c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   2b5c8:	6523      	str	r3, [r4, #80]	; 0x50
   2b5ca:	4b13      	ldr	r3, [pc, #76]	; (2b618 <__sinit+0x68>)
   2b5cc:	4a13      	ldr	r2, [pc, #76]	; (2b61c <__sinit+0x6c>)
   2b5ce:	681b      	ldr	r3, [r3, #0]
   2b5d0:	62a2      	str	r2, [r4, #40]	; 0x28
   2b5d2:	42a3      	cmp	r3, r4
   2b5d4:	bf04      	itt	eq
   2b5d6:	2301      	moveq	r3, #1
   2b5d8:	61a3      	streq	r3, [r4, #24]
   2b5da:	4620      	mov	r0, r4
   2b5dc:	f000 f820 	bl	2b620 <__sfp>
   2b5e0:	6060      	str	r0, [r4, #4]
   2b5e2:	4620      	mov	r0, r4
   2b5e4:	f000 f81c 	bl	2b620 <__sfp>
   2b5e8:	60a0      	str	r0, [r4, #8]
   2b5ea:	4620      	mov	r0, r4
   2b5ec:	f000 f818 	bl	2b620 <__sfp>
   2b5f0:	2200      	movs	r2, #0
   2b5f2:	60e0      	str	r0, [r4, #12]
   2b5f4:	2104      	movs	r1, #4
   2b5f6:	6860      	ldr	r0, [r4, #4]
   2b5f8:	f7ff ff98 	bl	2b52c <std>
   2b5fc:	68a0      	ldr	r0, [r4, #8]
   2b5fe:	2201      	movs	r2, #1
   2b600:	2109      	movs	r1, #9
   2b602:	f7ff ff93 	bl	2b52c <std>
   2b606:	68e0      	ldr	r0, [r4, #12]
   2b608:	2202      	movs	r2, #2
   2b60a:	2112      	movs	r1, #18
   2b60c:	f7ff ff8e 	bl	2b52c <std>
   2b610:	2301      	movs	r3, #1
   2b612:	61a3      	str	r3, [r4, #24]
   2b614:	e7d2      	b.n	2b5bc <__sinit+0xc>
   2b616:	bf00      	nop
   2b618:	00036728 	.word	0x00036728
   2b61c:	0002b575 	.word	0x0002b575

0002b620 <__sfp>:
   2b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b622:	4607      	mov	r7, r0
   2b624:	f7ff ffac 	bl	2b580 <__sfp_lock_acquire>
   2b628:	4b1e      	ldr	r3, [pc, #120]	; (2b6a4 <__sfp+0x84>)
   2b62a:	681e      	ldr	r6, [r3, #0]
   2b62c:	69b3      	ldr	r3, [r6, #24]
   2b62e:	b913      	cbnz	r3, 2b636 <__sfp+0x16>
   2b630:	4630      	mov	r0, r6
   2b632:	f7ff ffbd 	bl	2b5b0 <__sinit>
   2b636:	3648      	adds	r6, #72	; 0x48
   2b638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   2b63c:	3b01      	subs	r3, #1
   2b63e:	d503      	bpl.n	2b648 <__sfp+0x28>
   2b640:	6833      	ldr	r3, [r6, #0]
   2b642:	b30b      	cbz	r3, 2b688 <__sfp+0x68>
   2b644:	6836      	ldr	r6, [r6, #0]
   2b646:	e7f7      	b.n	2b638 <__sfp+0x18>
   2b648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   2b64c:	b9d5      	cbnz	r5, 2b684 <__sfp+0x64>
   2b64e:	4b16      	ldr	r3, [pc, #88]	; (2b6a8 <__sfp+0x88>)
   2b650:	60e3      	str	r3, [r4, #12]
   2b652:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2b656:	6665      	str	r5, [r4, #100]	; 0x64
   2b658:	f7ea fd7a 	bl	16150 <__retarget_lock_init_recursive>
   2b65c:	f7ff ff96 	bl	2b58c <__sfp_lock_release>
   2b660:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2b664:	e9c4 5504 	strd	r5, r5, [r4, #16]
   2b668:	6025      	str	r5, [r4, #0]
   2b66a:	61a5      	str	r5, [r4, #24]
   2b66c:	2208      	movs	r2, #8
   2b66e:	4629      	mov	r1, r5
   2b670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2b674:	f005 f944 	bl	30900 <memset>
   2b678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   2b67c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   2b680:	4620      	mov	r0, r4
   2b682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b684:	3468      	adds	r4, #104	; 0x68
   2b686:	e7d9      	b.n	2b63c <__sfp+0x1c>
   2b688:	2104      	movs	r1, #4
   2b68a:	4638      	mov	r0, r7
   2b68c:	f005 fb60 	bl	30d50 <__sfmoreglue>
   2b690:	4604      	mov	r4, r0
   2b692:	6030      	str	r0, [r6, #0]
   2b694:	2800      	cmp	r0, #0
   2b696:	d1d5      	bne.n	2b644 <__sfp+0x24>
   2b698:	f7ff ff78 	bl	2b58c <__sfp_lock_release>
   2b69c:	230c      	movs	r3, #12
   2b69e:	603b      	str	r3, [r7, #0]
   2b6a0:	e7ee      	b.n	2b680 <__sfp+0x60>
   2b6a2:	bf00      	nop
   2b6a4:	00036728 	.word	0x00036728
   2b6a8:	ffff0001 	.word	0xffff0001

0002b6ac <_localeconv_r>:
   2b6ac:	4800      	ldr	r0, [pc, #0]	; (2b6b0 <_localeconv_r+0x4>)
   2b6ae:	4770      	bx	lr
   2b6b0:	20000a34 	.word	0x20000a34

0002b6b4 <__malloc_lock>:
   2b6b4:	4801      	ldr	r0, [pc, #4]	; (2b6bc <__malloc_lock+0x8>)
   2b6b6:	f7ea bd81 	b.w	161bc <__retarget_lock_acquire_recursive>
   2b6ba:	bf00      	nop
   2b6bc:	20000b94 	.word	0x20000b94

0002b6c0 <__malloc_unlock>:
   2b6c0:	4801      	ldr	r0, [pc, #4]	; (2b6c8 <__malloc_unlock+0x8>)
   2b6c2:	f7ea bd9b 	b.w	161fc <__retarget_lock_release_recursive>
   2b6c6:	bf00      	nop
   2b6c8:	20000b94 	.word	0x20000b94

0002b6cc <__pow5mult>:
   2b6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b6d0:	4615      	mov	r5, r2
   2b6d2:	f012 0203 	ands.w	r2, r2, #3
   2b6d6:	4606      	mov	r6, r0
   2b6d8:	460f      	mov	r7, r1
   2b6da:	d007      	beq.n	2b6ec <__pow5mult+0x20>
   2b6dc:	4c21      	ldr	r4, [pc, #132]	; (2b764 <__pow5mult+0x98>)
   2b6de:	3a01      	subs	r2, #1
   2b6e0:	2300      	movs	r3, #0
   2b6e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2b6e6:	f005 fbb3 	bl	30e50 <__multadd>
   2b6ea:	4607      	mov	r7, r0
   2b6ec:	10ad      	asrs	r5, r5, #2
   2b6ee:	d035      	beq.n	2b75c <__pow5mult+0x90>
   2b6f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2b6f2:	b93c      	cbnz	r4, 2b704 <__pow5mult+0x38>
   2b6f4:	2010      	movs	r0, #16
   2b6f6:	f7ff fac3 	bl	2ac80 <malloc>
   2b6fa:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2b6fe:	6270      	str	r0, [r6, #36]	; 0x24
   2b700:	6004      	str	r4, [r0, #0]
   2b702:	60c4      	str	r4, [r0, #12]
   2b704:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2b708:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2b70c:	b94c      	cbnz	r4, 2b722 <__pow5mult+0x56>
   2b70e:	f240 2171 	movw	r1, #625	; 0x271
   2b712:	4630      	mov	r0, r6
   2b714:	f005 fc28 	bl	30f68 <__i2b>
   2b718:	2300      	movs	r3, #0
   2b71a:	f8c8 0008 	str.w	r0, [r8, #8]
   2b71e:	4604      	mov	r4, r0
   2b720:	6003      	str	r3, [r0, #0]
   2b722:	f04f 0900 	mov.w	r9, #0
   2b726:	07eb      	lsls	r3, r5, #31
   2b728:	d50a      	bpl.n	2b740 <__pow5mult+0x74>
   2b72a:	4639      	mov	r1, r7
   2b72c:	4622      	mov	r2, r4
   2b72e:	4630      	mov	r0, r6
   2b730:	f005 fc23 	bl	30f7a <__multiply>
   2b734:	4639      	mov	r1, r7
   2b736:	4680      	mov	r8, r0
   2b738:	4630      	mov	r0, r6
   2b73a:	f005 fb72 	bl	30e22 <_Bfree>
   2b73e:	4647      	mov	r7, r8
   2b740:	106d      	asrs	r5, r5, #1
   2b742:	d00b      	beq.n	2b75c <__pow5mult+0x90>
   2b744:	6820      	ldr	r0, [r4, #0]
   2b746:	b938      	cbnz	r0, 2b758 <__pow5mult+0x8c>
   2b748:	4622      	mov	r2, r4
   2b74a:	4621      	mov	r1, r4
   2b74c:	4630      	mov	r0, r6
   2b74e:	f005 fc14 	bl	30f7a <__multiply>
   2b752:	6020      	str	r0, [r4, #0]
   2b754:	f8c0 9000 	str.w	r9, [r0]
   2b758:	4604      	mov	r4, r0
   2b75a:	e7e4      	b.n	2b726 <__pow5mult+0x5a>
   2b75c:	4638      	mov	r0, r7
   2b75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b762:	bf00      	nop
   2b764:	0003672c 	.word	0x0003672c

0002b768 <_svfiprintf_r>:
   2b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b76c:	4698      	mov	r8, r3
   2b76e:	898b      	ldrh	r3, [r1, #12]
   2b770:	061b      	lsls	r3, r3, #24
   2b772:	b09d      	sub	sp, #116	; 0x74
   2b774:	4607      	mov	r7, r0
   2b776:	460d      	mov	r5, r1
   2b778:	4614      	mov	r4, r2
   2b77a:	d50e      	bpl.n	2b79a <_svfiprintf_r+0x32>
   2b77c:	690b      	ldr	r3, [r1, #16]
   2b77e:	b963      	cbnz	r3, 2b79a <_svfiprintf_r+0x32>
   2b780:	2140      	movs	r1, #64	; 0x40
   2b782:	f7ff fad3 	bl	2ad2c <_malloc_r>
   2b786:	6028      	str	r0, [r5, #0]
   2b788:	6128      	str	r0, [r5, #16]
   2b78a:	b920      	cbnz	r0, 2b796 <_svfiprintf_r+0x2e>
   2b78c:	230c      	movs	r3, #12
   2b78e:	603b      	str	r3, [r7, #0]
   2b790:	f04f 30ff 	mov.w	r0, #4294967295
   2b794:	e0d1      	b.n	2b93a <_svfiprintf_r+0x1d2>
   2b796:	2340      	movs	r3, #64	; 0x40
   2b798:	616b      	str	r3, [r5, #20]
   2b79a:	2300      	movs	r3, #0
   2b79c:	9309      	str	r3, [sp, #36]	; 0x24
   2b79e:	2320      	movs	r3, #32
   2b7a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2b7a4:	f8cd 800c 	str.w	r8, [sp, #12]
   2b7a8:	2330      	movs	r3, #48	; 0x30
   2b7aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 2b954 <_svfiprintf_r+0x1ec>
   2b7ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2b7b2:	f04f 0901 	mov.w	r9, #1
   2b7b6:	4623      	mov	r3, r4
   2b7b8:	469a      	mov	sl, r3
   2b7ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b7be:	b10a      	cbz	r2, 2b7c4 <_svfiprintf_r+0x5c>
   2b7c0:	2a25      	cmp	r2, #37	; 0x25
   2b7c2:	d1f9      	bne.n	2b7b8 <_svfiprintf_r+0x50>
   2b7c4:	ebba 0b04 	subs.w	fp, sl, r4
   2b7c8:	d00b      	beq.n	2b7e2 <_svfiprintf_r+0x7a>
   2b7ca:	465b      	mov	r3, fp
   2b7cc:	4622      	mov	r2, r4
   2b7ce:	4629      	mov	r1, r5
   2b7d0:	4638      	mov	r0, r7
   2b7d2:	f005 fde1 	bl	31398 <__ssputs_r>
   2b7d6:	3001      	adds	r0, #1
   2b7d8:	f000 80aa 	beq.w	2b930 <_svfiprintf_r+0x1c8>
   2b7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2b7de:	445a      	add	r2, fp
   2b7e0:	9209      	str	r2, [sp, #36]	; 0x24
   2b7e2:	f89a 3000 	ldrb.w	r3, [sl]
   2b7e6:	2b00      	cmp	r3, #0
   2b7e8:	f000 80a2 	beq.w	2b930 <_svfiprintf_r+0x1c8>
   2b7ec:	2300      	movs	r3, #0
   2b7ee:	f04f 32ff 	mov.w	r2, #4294967295
   2b7f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2b7f6:	f10a 0a01 	add.w	sl, sl, #1
   2b7fa:	9304      	str	r3, [sp, #16]
   2b7fc:	9307      	str	r3, [sp, #28]
   2b7fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2b802:	931a      	str	r3, [sp, #104]	; 0x68
   2b804:	4654      	mov	r4, sl
   2b806:	2205      	movs	r2, #5
   2b808:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b80c:	4851      	ldr	r0, [pc, #324]	; (2b954 <_svfiprintf_r+0x1ec>)
   2b80e:	f7d4 fc77 	bl	100 <memchr>
   2b812:	9a04      	ldr	r2, [sp, #16]
   2b814:	b9d8      	cbnz	r0, 2b84e <_svfiprintf_r+0xe6>
   2b816:	06d0      	lsls	r0, r2, #27
   2b818:	bf44      	itt	mi
   2b81a:	2320      	movmi	r3, #32
   2b81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2b820:	0711      	lsls	r1, r2, #28
   2b822:	bf44      	itt	mi
   2b824:	232b      	movmi	r3, #43	; 0x2b
   2b826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2b82a:	f89a 3000 	ldrb.w	r3, [sl]
   2b82e:	2b2a      	cmp	r3, #42	; 0x2a
   2b830:	d015      	beq.n	2b85e <_svfiprintf_r+0xf6>
   2b832:	9a07      	ldr	r2, [sp, #28]
   2b834:	4654      	mov	r4, sl
   2b836:	2000      	movs	r0, #0
   2b838:	f04f 0c0a 	mov.w	ip, #10
   2b83c:	4621      	mov	r1, r4
   2b83e:	f811 3b01 	ldrb.w	r3, [r1], #1
   2b842:	3b30      	subs	r3, #48	; 0x30
   2b844:	2b09      	cmp	r3, #9
   2b846:	d94e      	bls.n	2b8e6 <_svfiprintf_r+0x17e>
   2b848:	b1b0      	cbz	r0, 2b878 <_svfiprintf_r+0x110>
   2b84a:	9207      	str	r2, [sp, #28]
   2b84c:	e014      	b.n	2b878 <_svfiprintf_r+0x110>
   2b84e:	eba0 0308 	sub.w	r3, r0, r8
   2b852:	fa09 f303 	lsl.w	r3, r9, r3
   2b856:	4313      	orrs	r3, r2
   2b858:	9304      	str	r3, [sp, #16]
   2b85a:	46a2      	mov	sl, r4
   2b85c:	e7d2      	b.n	2b804 <_svfiprintf_r+0x9c>
   2b85e:	9b03      	ldr	r3, [sp, #12]
   2b860:	1d19      	adds	r1, r3, #4
   2b862:	681b      	ldr	r3, [r3, #0]
   2b864:	9103      	str	r1, [sp, #12]
   2b866:	2b00      	cmp	r3, #0
   2b868:	bfbb      	ittet	lt
   2b86a:	425b      	neglt	r3, r3
   2b86c:	f042 0202 	orrlt.w	r2, r2, #2
   2b870:	9307      	strge	r3, [sp, #28]
   2b872:	9307      	strlt	r3, [sp, #28]
   2b874:	bfb8      	it	lt
   2b876:	9204      	strlt	r2, [sp, #16]
   2b878:	7823      	ldrb	r3, [r4, #0]
   2b87a:	2b2e      	cmp	r3, #46	; 0x2e
   2b87c:	d10c      	bne.n	2b898 <_svfiprintf_r+0x130>
   2b87e:	7863      	ldrb	r3, [r4, #1]
   2b880:	2b2a      	cmp	r3, #42	; 0x2a
   2b882:	d135      	bne.n	2b8f0 <_svfiprintf_r+0x188>
   2b884:	9b03      	ldr	r3, [sp, #12]
   2b886:	1d1a      	adds	r2, r3, #4
   2b888:	681b      	ldr	r3, [r3, #0]
   2b88a:	9203      	str	r2, [sp, #12]
   2b88c:	2b00      	cmp	r3, #0
   2b88e:	bfb8      	it	lt
   2b890:	f04f 33ff 	movlt.w	r3, #4294967295
   2b894:	3402      	adds	r4, #2
   2b896:	9305      	str	r3, [sp, #20]
   2b898:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2b964 <_svfiprintf_r+0x1fc>
   2b89c:	7821      	ldrb	r1, [r4, #0]
   2b89e:	2203      	movs	r2, #3
   2b8a0:	4650      	mov	r0, sl
   2b8a2:	f7d4 fc2d 	bl	100 <memchr>
   2b8a6:	b140      	cbz	r0, 2b8ba <_svfiprintf_r+0x152>
   2b8a8:	2340      	movs	r3, #64	; 0x40
   2b8aa:	eba0 000a 	sub.w	r0, r0, sl
   2b8ae:	fa03 f000 	lsl.w	r0, r3, r0
   2b8b2:	9b04      	ldr	r3, [sp, #16]
   2b8b4:	4303      	orrs	r3, r0
   2b8b6:	3401      	adds	r4, #1
   2b8b8:	9304      	str	r3, [sp, #16]
   2b8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b8be:	4826      	ldr	r0, [pc, #152]	; (2b958 <_svfiprintf_r+0x1f0>)
   2b8c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2b8c4:	2206      	movs	r2, #6
   2b8c6:	f7d4 fc1b 	bl	100 <memchr>
   2b8ca:	2800      	cmp	r0, #0
   2b8cc:	d038      	beq.n	2b940 <_svfiprintf_r+0x1d8>
   2b8ce:	4b23      	ldr	r3, [pc, #140]	; (2b95c <_svfiprintf_r+0x1f4>)
   2b8d0:	bb1b      	cbnz	r3, 2b91a <_svfiprintf_r+0x1b2>
   2b8d2:	9b03      	ldr	r3, [sp, #12]
   2b8d4:	3307      	adds	r3, #7
   2b8d6:	f023 0307 	bic.w	r3, r3, #7
   2b8da:	3308      	adds	r3, #8
   2b8dc:	9303      	str	r3, [sp, #12]
   2b8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b8e0:	4433      	add	r3, r6
   2b8e2:	9309      	str	r3, [sp, #36]	; 0x24
   2b8e4:	e767      	b.n	2b7b6 <_svfiprintf_r+0x4e>
   2b8e6:	fb0c 3202 	mla	r2, ip, r2, r3
   2b8ea:	460c      	mov	r4, r1
   2b8ec:	2001      	movs	r0, #1
   2b8ee:	e7a5      	b.n	2b83c <_svfiprintf_r+0xd4>
   2b8f0:	2300      	movs	r3, #0
   2b8f2:	3401      	adds	r4, #1
   2b8f4:	9305      	str	r3, [sp, #20]
   2b8f6:	4619      	mov	r1, r3
   2b8f8:	f04f 0c0a 	mov.w	ip, #10
   2b8fc:	4620      	mov	r0, r4
   2b8fe:	f810 2b01 	ldrb.w	r2, [r0], #1
   2b902:	3a30      	subs	r2, #48	; 0x30
   2b904:	2a09      	cmp	r2, #9
   2b906:	d903      	bls.n	2b910 <_svfiprintf_r+0x1a8>
   2b908:	2b00      	cmp	r3, #0
   2b90a:	d0c5      	beq.n	2b898 <_svfiprintf_r+0x130>
   2b90c:	9105      	str	r1, [sp, #20]
   2b90e:	e7c3      	b.n	2b898 <_svfiprintf_r+0x130>
   2b910:	fb0c 2101 	mla	r1, ip, r1, r2
   2b914:	4604      	mov	r4, r0
   2b916:	2301      	movs	r3, #1
   2b918:	e7f0      	b.n	2b8fc <_svfiprintf_r+0x194>
   2b91a:	ab03      	add	r3, sp, #12
   2b91c:	9300      	str	r3, [sp, #0]
   2b91e:	462a      	mov	r2, r5
   2b920:	4b0f      	ldr	r3, [pc, #60]	; (2b960 <_svfiprintf_r+0x1f8>)
   2b922:	a904      	add	r1, sp, #16
   2b924:	4638      	mov	r0, r7
   2b926:	f7ff fa5b 	bl	2ade0 <_printf_float>
   2b92a:	1c42      	adds	r2, r0, #1
   2b92c:	4606      	mov	r6, r0
   2b92e:	d1d6      	bne.n	2b8de <_svfiprintf_r+0x176>
   2b930:	89ab      	ldrh	r3, [r5, #12]
   2b932:	065b      	lsls	r3, r3, #25
   2b934:	f53f af2c 	bmi.w	2b790 <_svfiprintf_r+0x28>
   2b938:	9809      	ldr	r0, [sp, #36]	; 0x24
   2b93a:	b01d      	add	sp, #116	; 0x74
   2b93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b940:	ab03      	add	r3, sp, #12
   2b942:	9300      	str	r3, [sp, #0]
   2b944:	462a      	mov	r2, r5
   2b946:	4b06      	ldr	r3, [pc, #24]	; (2b960 <_svfiprintf_r+0x1f8>)
   2b948:	a904      	add	r1, sp, #16
   2b94a:	4638      	mov	r0, r7
   2b94c:	f7ff fc72 	bl	2b234 <_printf_i>
   2b950:	e7eb      	b.n	2b92a <_svfiprintf_r+0x1c2>
   2b952:	bf00      	nop
   2b954:	0003687a 	.word	0x0003687a
   2b958:	00036884 	.word	0x00036884
   2b95c:	0002ade1 	.word	0x0002ade1
   2b960:	00031399 	.word	0x00031399
   2b964:	00036880 	.word	0x00036880

0002b968 <_vfiprintf_r>:
   2b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b96c:	460d      	mov	r5, r1
   2b96e:	b09d      	sub	sp, #116	; 0x74
   2b970:	4614      	mov	r4, r2
   2b972:	4698      	mov	r8, r3
   2b974:	4606      	mov	r6, r0
   2b976:	b118      	cbz	r0, 2b980 <_vfiprintf_r+0x18>
   2b978:	6983      	ldr	r3, [r0, #24]
   2b97a:	b90b      	cbnz	r3, 2b980 <_vfiprintf_r+0x18>
   2b97c:	f7ff fe18 	bl	2b5b0 <__sinit>
   2b980:	4b89      	ldr	r3, [pc, #548]	; (2bba8 <_vfiprintf_r+0x240>)
   2b982:	429d      	cmp	r5, r3
   2b984:	d11b      	bne.n	2b9be <_vfiprintf_r+0x56>
   2b986:	6875      	ldr	r5, [r6, #4]
   2b988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2b98a:	07d9      	lsls	r1, r3, #31
   2b98c:	d405      	bmi.n	2b99a <_vfiprintf_r+0x32>
   2b98e:	89ab      	ldrh	r3, [r5, #12]
   2b990:	059a      	lsls	r2, r3, #22
   2b992:	d402      	bmi.n	2b99a <_vfiprintf_r+0x32>
   2b994:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2b996:	f7ea fc11 	bl	161bc <__retarget_lock_acquire_recursive>
   2b99a:	89ab      	ldrh	r3, [r5, #12]
   2b99c:	071b      	lsls	r3, r3, #28
   2b99e:	d501      	bpl.n	2b9a4 <_vfiprintf_r+0x3c>
   2b9a0:	692b      	ldr	r3, [r5, #16]
   2b9a2:	b9eb      	cbnz	r3, 2b9e0 <_vfiprintf_r+0x78>
   2b9a4:	4629      	mov	r1, r5
   2b9a6:	4630      	mov	r0, r6
   2b9a8:	f000 f972 	bl	2bc90 <__swsetup_r>
   2b9ac:	b1c0      	cbz	r0, 2b9e0 <_vfiprintf_r+0x78>
   2b9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2b9b0:	07dc      	lsls	r4, r3, #31
   2b9b2:	d50e      	bpl.n	2b9d2 <_vfiprintf_r+0x6a>
   2b9b4:	f04f 30ff 	mov.w	r0, #4294967295
   2b9b8:	b01d      	add	sp, #116	; 0x74
   2b9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9be:	4b7b      	ldr	r3, [pc, #492]	; (2bbac <_vfiprintf_r+0x244>)
   2b9c0:	429d      	cmp	r5, r3
   2b9c2:	d101      	bne.n	2b9c8 <_vfiprintf_r+0x60>
   2b9c4:	68b5      	ldr	r5, [r6, #8]
   2b9c6:	e7df      	b.n	2b988 <_vfiprintf_r+0x20>
   2b9c8:	4b79      	ldr	r3, [pc, #484]	; (2bbb0 <_vfiprintf_r+0x248>)
   2b9ca:	429d      	cmp	r5, r3
   2b9cc:	bf08      	it	eq
   2b9ce:	68f5      	ldreq	r5, [r6, #12]
   2b9d0:	e7da      	b.n	2b988 <_vfiprintf_r+0x20>
   2b9d2:	89ab      	ldrh	r3, [r5, #12]
   2b9d4:	0598      	lsls	r0, r3, #22
   2b9d6:	d4ed      	bmi.n	2b9b4 <_vfiprintf_r+0x4c>
   2b9d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2b9da:	f7ea fc0f 	bl	161fc <__retarget_lock_release_recursive>
   2b9de:	e7e9      	b.n	2b9b4 <_vfiprintf_r+0x4c>
   2b9e0:	2300      	movs	r3, #0
   2b9e2:	9309      	str	r3, [sp, #36]	; 0x24
   2b9e4:	2320      	movs	r3, #32
   2b9e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2b9ea:	f8cd 800c 	str.w	r8, [sp, #12]
   2b9ee:	2330      	movs	r3, #48	; 0x30
   2b9f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 2bbb4 <_vfiprintf_r+0x24c>
   2b9f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2b9f8:	f04f 0901 	mov.w	r9, #1
   2b9fc:	4623      	mov	r3, r4
   2b9fe:	469a      	mov	sl, r3
   2ba00:	f813 2b01 	ldrb.w	r2, [r3], #1
   2ba04:	b10a      	cbz	r2, 2ba0a <_vfiprintf_r+0xa2>
   2ba06:	2a25      	cmp	r2, #37	; 0x25
   2ba08:	d1f9      	bne.n	2b9fe <_vfiprintf_r+0x96>
   2ba0a:	ebba 0b04 	subs.w	fp, sl, r4
   2ba0e:	d00b      	beq.n	2ba28 <_vfiprintf_r+0xc0>
   2ba10:	465b      	mov	r3, fp
   2ba12:	4622      	mov	r2, r4
   2ba14:	4629      	mov	r1, r5
   2ba16:	4630      	mov	r0, r6
   2ba18:	f005 fd2e 	bl	31478 <__sfputs_r>
   2ba1c:	3001      	adds	r0, #1
   2ba1e:	f000 80aa 	beq.w	2bb76 <_vfiprintf_r+0x20e>
   2ba22:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2ba24:	445a      	add	r2, fp
   2ba26:	9209      	str	r2, [sp, #36]	; 0x24
   2ba28:	f89a 3000 	ldrb.w	r3, [sl]
   2ba2c:	2b00      	cmp	r3, #0
   2ba2e:	f000 80a2 	beq.w	2bb76 <_vfiprintf_r+0x20e>
   2ba32:	2300      	movs	r3, #0
   2ba34:	f04f 32ff 	mov.w	r2, #4294967295
   2ba38:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2ba3c:	f10a 0a01 	add.w	sl, sl, #1
   2ba40:	9304      	str	r3, [sp, #16]
   2ba42:	9307      	str	r3, [sp, #28]
   2ba44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2ba48:	931a      	str	r3, [sp, #104]	; 0x68
   2ba4a:	4654      	mov	r4, sl
   2ba4c:	2205      	movs	r2, #5
   2ba4e:	f814 1b01 	ldrb.w	r1, [r4], #1
   2ba52:	4858      	ldr	r0, [pc, #352]	; (2bbb4 <_vfiprintf_r+0x24c>)
   2ba54:	f7d4 fb54 	bl	100 <memchr>
   2ba58:	9a04      	ldr	r2, [sp, #16]
   2ba5a:	b9d8      	cbnz	r0, 2ba94 <_vfiprintf_r+0x12c>
   2ba5c:	06d1      	lsls	r1, r2, #27
   2ba5e:	bf44      	itt	mi
   2ba60:	2320      	movmi	r3, #32
   2ba62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2ba66:	0713      	lsls	r3, r2, #28
   2ba68:	bf44      	itt	mi
   2ba6a:	232b      	movmi	r3, #43	; 0x2b
   2ba6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2ba70:	f89a 3000 	ldrb.w	r3, [sl]
   2ba74:	2b2a      	cmp	r3, #42	; 0x2a
   2ba76:	d015      	beq.n	2baa4 <_vfiprintf_r+0x13c>
   2ba78:	9a07      	ldr	r2, [sp, #28]
   2ba7a:	4654      	mov	r4, sl
   2ba7c:	2000      	movs	r0, #0
   2ba7e:	f04f 0c0a 	mov.w	ip, #10
   2ba82:	4621      	mov	r1, r4
   2ba84:	f811 3b01 	ldrb.w	r3, [r1], #1
   2ba88:	3b30      	subs	r3, #48	; 0x30
   2ba8a:	2b09      	cmp	r3, #9
   2ba8c:	d94e      	bls.n	2bb2c <_vfiprintf_r+0x1c4>
   2ba8e:	b1b0      	cbz	r0, 2babe <_vfiprintf_r+0x156>
   2ba90:	9207      	str	r2, [sp, #28]
   2ba92:	e014      	b.n	2babe <_vfiprintf_r+0x156>
   2ba94:	eba0 0308 	sub.w	r3, r0, r8
   2ba98:	fa09 f303 	lsl.w	r3, r9, r3
   2ba9c:	4313      	orrs	r3, r2
   2ba9e:	9304      	str	r3, [sp, #16]
   2baa0:	46a2      	mov	sl, r4
   2baa2:	e7d2      	b.n	2ba4a <_vfiprintf_r+0xe2>
   2baa4:	9b03      	ldr	r3, [sp, #12]
   2baa6:	1d19      	adds	r1, r3, #4
   2baa8:	681b      	ldr	r3, [r3, #0]
   2baaa:	9103      	str	r1, [sp, #12]
   2baac:	2b00      	cmp	r3, #0
   2baae:	bfbb      	ittet	lt
   2bab0:	425b      	neglt	r3, r3
   2bab2:	f042 0202 	orrlt.w	r2, r2, #2
   2bab6:	9307      	strge	r3, [sp, #28]
   2bab8:	9307      	strlt	r3, [sp, #28]
   2baba:	bfb8      	it	lt
   2babc:	9204      	strlt	r2, [sp, #16]
   2babe:	7823      	ldrb	r3, [r4, #0]
   2bac0:	2b2e      	cmp	r3, #46	; 0x2e
   2bac2:	d10c      	bne.n	2bade <_vfiprintf_r+0x176>
   2bac4:	7863      	ldrb	r3, [r4, #1]
   2bac6:	2b2a      	cmp	r3, #42	; 0x2a
   2bac8:	d135      	bne.n	2bb36 <_vfiprintf_r+0x1ce>
   2baca:	9b03      	ldr	r3, [sp, #12]
   2bacc:	1d1a      	adds	r2, r3, #4
   2bace:	681b      	ldr	r3, [r3, #0]
   2bad0:	9203      	str	r2, [sp, #12]
   2bad2:	2b00      	cmp	r3, #0
   2bad4:	bfb8      	it	lt
   2bad6:	f04f 33ff 	movlt.w	r3, #4294967295
   2bada:	3402      	adds	r4, #2
   2badc:	9305      	str	r3, [sp, #20]
   2bade:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2bbc4 <_vfiprintf_r+0x25c>
   2bae2:	7821      	ldrb	r1, [r4, #0]
   2bae4:	2203      	movs	r2, #3
   2bae6:	4650      	mov	r0, sl
   2bae8:	f7d4 fb0a 	bl	100 <memchr>
   2baec:	b140      	cbz	r0, 2bb00 <_vfiprintf_r+0x198>
   2baee:	2340      	movs	r3, #64	; 0x40
   2baf0:	eba0 000a 	sub.w	r0, r0, sl
   2baf4:	fa03 f000 	lsl.w	r0, r3, r0
   2baf8:	9b04      	ldr	r3, [sp, #16]
   2bafa:	4303      	orrs	r3, r0
   2bafc:	3401      	adds	r4, #1
   2bafe:	9304      	str	r3, [sp, #16]
   2bb00:	f814 1b01 	ldrb.w	r1, [r4], #1
   2bb04:	482c      	ldr	r0, [pc, #176]	; (2bbb8 <_vfiprintf_r+0x250>)
   2bb06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2bb0a:	2206      	movs	r2, #6
   2bb0c:	f7d4 faf8 	bl	100 <memchr>
   2bb10:	2800      	cmp	r0, #0
   2bb12:	d03f      	beq.n	2bb94 <_vfiprintf_r+0x22c>
   2bb14:	4b29      	ldr	r3, [pc, #164]	; (2bbbc <_vfiprintf_r+0x254>)
   2bb16:	bb1b      	cbnz	r3, 2bb60 <_vfiprintf_r+0x1f8>
   2bb18:	9b03      	ldr	r3, [sp, #12]
   2bb1a:	3307      	adds	r3, #7
   2bb1c:	f023 0307 	bic.w	r3, r3, #7
   2bb20:	3308      	adds	r3, #8
   2bb22:	9303      	str	r3, [sp, #12]
   2bb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2bb26:	443b      	add	r3, r7
   2bb28:	9309      	str	r3, [sp, #36]	; 0x24
   2bb2a:	e767      	b.n	2b9fc <_vfiprintf_r+0x94>
   2bb2c:	fb0c 3202 	mla	r2, ip, r2, r3
   2bb30:	460c      	mov	r4, r1
   2bb32:	2001      	movs	r0, #1
   2bb34:	e7a5      	b.n	2ba82 <_vfiprintf_r+0x11a>
   2bb36:	2300      	movs	r3, #0
   2bb38:	3401      	adds	r4, #1
   2bb3a:	9305      	str	r3, [sp, #20]
   2bb3c:	4619      	mov	r1, r3
   2bb3e:	f04f 0c0a 	mov.w	ip, #10
   2bb42:	4620      	mov	r0, r4
   2bb44:	f810 2b01 	ldrb.w	r2, [r0], #1
   2bb48:	3a30      	subs	r2, #48	; 0x30
   2bb4a:	2a09      	cmp	r2, #9
   2bb4c:	d903      	bls.n	2bb56 <_vfiprintf_r+0x1ee>
   2bb4e:	2b00      	cmp	r3, #0
   2bb50:	d0c5      	beq.n	2bade <_vfiprintf_r+0x176>
   2bb52:	9105      	str	r1, [sp, #20]
   2bb54:	e7c3      	b.n	2bade <_vfiprintf_r+0x176>
   2bb56:	fb0c 2101 	mla	r1, ip, r1, r2
   2bb5a:	4604      	mov	r4, r0
   2bb5c:	2301      	movs	r3, #1
   2bb5e:	e7f0      	b.n	2bb42 <_vfiprintf_r+0x1da>
   2bb60:	ab03      	add	r3, sp, #12
   2bb62:	9300      	str	r3, [sp, #0]
   2bb64:	462a      	mov	r2, r5
   2bb66:	4b16      	ldr	r3, [pc, #88]	; (2bbc0 <_vfiprintf_r+0x258>)
   2bb68:	a904      	add	r1, sp, #16
   2bb6a:	4630      	mov	r0, r6
   2bb6c:	f7ff f938 	bl	2ade0 <_printf_float>
   2bb70:	4607      	mov	r7, r0
   2bb72:	1c78      	adds	r0, r7, #1
   2bb74:	d1d6      	bne.n	2bb24 <_vfiprintf_r+0x1bc>
   2bb76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2bb78:	07d9      	lsls	r1, r3, #31
   2bb7a:	d405      	bmi.n	2bb88 <_vfiprintf_r+0x220>
   2bb7c:	89ab      	ldrh	r3, [r5, #12]
   2bb7e:	059a      	lsls	r2, r3, #22
   2bb80:	d402      	bmi.n	2bb88 <_vfiprintf_r+0x220>
   2bb82:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2bb84:	f7ea fb3a 	bl	161fc <__retarget_lock_release_recursive>
   2bb88:	89ab      	ldrh	r3, [r5, #12]
   2bb8a:	065b      	lsls	r3, r3, #25
   2bb8c:	f53f af12 	bmi.w	2b9b4 <_vfiprintf_r+0x4c>
   2bb90:	9809      	ldr	r0, [sp, #36]	; 0x24
   2bb92:	e711      	b.n	2b9b8 <_vfiprintf_r+0x50>
   2bb94:	ab03      	add	r3, sp, #12
   2bb96:	9300      	str	r3, [sp, #0]
   2bb98:	462a      	mov	r2, r5
   2bb9a:	4b09      	ldr	r3, [pc, #36]	; (2bbc0 <_vfiprintf_r+0x258>)
   2bb9c:	a904      	add	r1, sp, #16
   2bb9e:	4630      	mov	r0, r6
   2bba0:	f7ff fb48 	bl	2b234 <_printf_i>
   2bba4:	e7e4      	b.n	2bb70 <_vfiprintf_r+0x208>
   2bba6:	bf00      	nop
   2bba8:	000366e8 	.word	0x000366e8
   2bbac:	00036708 	.word	0x00036708
   2bbb0:	000366c8 	.word	0x000366c8
   2bbb4:	0003687a 	.word	0x0003687a
   2bbb8:	00036884 	.word	0x00036884
   2bbbc:	0002ade1 	.word	0x0002ade1
   2bbc0:	00031479 	.word	0x00031479
   2bbc4:	00036880 	.word	0x00036880

0002bbc8 <__swbuf_r>:
   2bbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bbca:	460e      	mov	r6, r1
   2bbcc:	4614      	mov	r4, r2
   2bbce:	4605      	mov	r5, r0
   2bbd0:	b118      	cbz	r0, 2bbda <__swbuf_r+0x12>
   2bbd2:	6983      	ldr	r3, [r0, #24]
   2bbd4:	b90b      	cbnz	r3, 2bbda <__swbuf_r+0x12>
   2bbd6:	f7ff fceb 	bl	2b5b0 <__sinit>
   2bbda:	4b21      	ldr	r3, [pc, #132]	; (2bc60 <__swbuf_r+0x98>)
   2bbdc:	429c      	cmp	r4, r3
   2bbde:	d12b      	bne.n	2bc38 <__swbuf_r+0x70>
   2bbe0:	686c      	ldr	r4, [r5, #4]
   2bbe2:	69a3      	ldr	r3, [r4, #24]
   2bbe4:	60a3      	str	r3, [r4, #8]
   2bbe6:	89a3      	ldrh	r3, [r4, #12]
   2bbe8:	071a      	lsls	r2, r3, #28
   2bbea:	d52f      	bpl.n	2bc4c <__swbuf_r+0x84>
   2bbec:	6923      	ldr	r3, [r4, #16]
   2bbee:	b36b      	cbz	r3, 2bc4c <__swbuf_r+0x84>
   2bbf0:	6923      	ldr	r3, [r4, #16]
   2bbf2:	6820      	ldr	r0, [r4, #0]
   2bbf4:	1ac0      	subs	r0, r0, r3
   2bbf6:	6963      	ldr	r3, [r4, #20]
   2bbf8:	b2f6      	uxtb	r6, r6
   2bbfa:	4283      	cmp	r3, r0
   2bbfc:	4637      	mov	r7, r6
   2bbfe:	dc04      	bgt.n	2bc0a <__swbuf_r+0x42>
   2bc00:	4621      	mov	r1, r4
   2bc02:	4628      	mov	r0, r5
   2bc04:	f000 f948 	bl	2be98 <_fflush_r>
   2bc08:	bb30      	cbnz	r0, 2bc58 <__swbuf_r+0x90>
   2bc0a:	68a3      	ldr	r3, [r4, #8]
   2bc0c:	3b01      	subs	r3, #1
   2bc0e:	60a3      	str	r3, [r4, #8]
   2bc10:	6823      	ldr	r3, [r4, #0]
   2bc12:	1c5a      	adds	r2, r3, #1
   2bc14:	6022      	str	r2, [r4, #0]
   2bc16:	701e      	strb	r6, [r3, #0]
   2bc18:	6963      	ldr	r3, [r4, #20]
   2bc1a:	3001      	adds	r0, #1
   2bc1c:	4283      	cmp	r3, r0
   2bc1e:	d004      	beq.n	2bc2a <__swbuf_r+0x62>
   2bc20:	89a3      	ldrh	r3, [r4, #12]
   2bc22:	07db      	lsls	r3, r3, #31
   2bc24:	d506      	bpl.n	2bc34 <__swbuf_r+0x6c>
   2bc26:	2e0a      	cmp	r6, #10
   2bc28:	d104      	bne.n	2bc34 <__swbuf_r+0x6c>
   2bc2a:	4621      	mov	r1, r4
   2bc2c:	4628      	mov	r0, r5
   2bc2e:	f000 f933 	bl	2be98 <_fflush_r>
   2bc32:	b988      	cbnz	r0, 2bc58 <__swbuf_r+0x90>
   2bc34:	4638      	mov	r0, r7
   2bc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bc38:	4b0a      	ldr	r3, [pc, #40]	; (2bc64 <__swbuf_r+0x9c>)
   2bc3a:	429c      	cmp	r4, r3
   2bc3c:	d101      	bne.n	2bc42 <__swbuf_r+0x7a>
   2bc3e:	68ac      	ldr	r4, [r5, #8]
   2bc40:	e7cf      	b.n	2bbe2 <__swbuf_r+0x1a>
   2bc42:	4b09      	ldr	r3, [pc, #36]	; (2bc68 <__swbuf_r+0xa0>)
   2bc44:	429c      	cmp	r4, r3
   2bc46:	bf08      	it	eq
   2bc48:	68ec      	ldreq	r4, [r5, #12]
   2bc4a:	e7ca      	b.n	2bbe2 <__swbuf_r+0x1a>
   2bc4c:	4621      	mov	r1, r4
   2bc4e:	4628      	mov	r0, r5
   2bc50:	f000 f81e 	bl	2bc90 <__swsetup_r>
   2bc54:	2800      	cmp	r0, #0
   2bc56:	d0cb      	beq.n	2bbf0 <__swbuf_r+0x28>
   2bc58:	f04f 37ff 	mov.w	r7, #4294967295
   2bc5c:	e7ea      	b.n	2bc34 <__swbuf_r+0x6c>
   2bc5e:	bf00      	nop
   2bc60:	000366e8 	.word	0x000366e8
   2bc64:	00036708 	.word	0x00036708
   2bc68:	000366c8 	.word	0x000366c8

0002bc6c <_write_r>:
   2bc6c:	b538      	push	{r3, r4, r5, lr}
   2bc6e:	4d07      	ldr	r5, [pc, #28]	; (2bc8c <_write_r+0x20>)
   2bc70:	4604      	mov	r4, r0
   2bc72:	4608      	mov	r0, r1
   2bc74:	4611      	mov	r1, r2
   2bc76:	2200      	movs	r2, #0
   2bc78:	602a      	str	r2, [r5, #0]
   2bc7a:	461a      	mov	r2, r3
   2bc7c:	f001 f966 	bl	2cf4c <_write>
   2bc80:	1c43      	adds	r3, r0, #1
   2bc82:	d102      	bne.n	2bc8a <_write_r+0x1e>
   2bc84:	682b      	ldr	r3, [r5, #0]
   2bc86:	b103      	cbz	r3, 2bc8a <_write_r+0x1e>
   2bc88:	6023      	str	r3, [r4, #0]
   2bc8a:	bd38      	pop	{r3, r4, r5, pc}
   2bc8c:	200041b8 	.word	0x200041b8

0002bc90 <__swsetup_r>:
   2bc90:	4b32      	ldr	r3, [pc, #200]	; (2bd5c <__swsetup_r+0xcc>)
   2bc92:	b570      	push	{r4, r5, r6, lr}
   2bc94:	681d      	ldr	r5, [r3, #0]
   2bc96:	4606      	mov	r6, r0
   2bc98:	460c      	mov	r4, r1
   2bc9a:	b125      	cbz	r5, 2bca6 <__swsetup_r+0x16>
   2bc9c:	69ab      	ldr	r3, [r5, #24]
   2bc9e:	b913      	cbnz	r3, 2bca6 <__swsetup_r+0x16>
   2bca0:	4628      	mov	r0, r5
   2bca2:	f7ff fc85 	bl	2b5b0 <__sinit>
   2bca6:	4b2e      	ldr	r3, [pc, #184]	; (2bd60 <__swsetup_r+0xd0>)
   2bca8:	429c      	cmp	r4, r3
   2bcaa:	d10f      	bne.n	2bccc <__swsetup_r+0x3c>
   2bcac:	686c      	ldr	r4, [r5, #4]
   2bcae:	89a3      	ldrh	r3, [r4, #12]
   2bcb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2bcb4:	0719      	lsls	r1, r3, #28
   2bcb6:	d42c      	bmi.n	2bd12 <__swsetup_r+0x82>
   2bcb8:	06dd      	lsls	r5, r3, #27
   2bcba:	d411      	bmi.n	2bce0 <__swsetup_r+0x50>
   2bcbc:	2309      	movs	r3, #9
   2bcbe:	6033      	str	r3, [r6, #0]
   2bcc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   2bcc4:	81a3      	strh	r3, [r4, #12]
   2bcc6:	f04f 30ff 	mov.w	r0, #4294967295
   2bcca:	e03e      	b.n	2bd4a <__swsetup_r+0xba>
   2bccc:	4b25      	ldr	r3, [pc, #148]	; (2bd64 <__swsetup_r+0xd4>)
   2bcce:	429c      	cmp	r4, r3
   2bcd0:	d101      	bne.n	2bcd6 <__swsetup_r+0x46>
   2bcd2:	68ac      	ldr	r4, [r5, #8]
   2bcd4:	e7eb      	b.n	2bcae <__swsetup_r+0x1e>
   2bcd6:	4b24      	ldr	r3, [pc, #144]	; (2bd68 <__swsetup_r+0xd8>)
   2bcd8:	429c      	cmp	r4, r3
   2bcda:	bf08      	it	eq
   2bcdc:	68ec      	ldreq	r4, [r5, #12]
   2bcde:	e7e6      	b.n	2bcae <__swsetup_r+0x1e>
   2bce0:	0758      	lsls	r0, r3, #29
   2bce2:	d512      	bpl.n	2bd0a <__swsetup_r+0x7a>
   2bce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2bce6:	b141      	cbz	r1, 2bcfa <__swsetup_r+0x6a>
   2bce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2bcec:	4299      	cmp	r1, r3
   2bcee:	d002      	beq.n	2bcf6 <__swsetup_r+0x66>
   2bcf0:	4630      	mov	r0, r6
   2bcf2:	f7fe ffcd 	bl	2ac90 <_free_r>
   2bcf6:	2300      	movs	r3, #0
   2bcf8:	6363      	str	r3, [r4, #52]	; 0x34
   2bcfa:	89a3      	ldrh	r3, [r4, #12]
   2bcfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2bd00:	81a3      	strh	r3, [r4, #12]
   2bd02:	2300      	movs	r3, #0
   2bd04:	6063      	str	r3, [r4, #4]
   2bd06:	6923      	ldr	r3, [r4, #16]
   2bd08:	6023      	str	r3, [r4, #0]
   2bd0a:	89a3      	ldrh	r3, [r4, #12]
   2bd0c:	f043 0308 	orr.w	r3, r3, #8
   2bd10:	81a3      	strh	r3, [r4, #12]
   2bd12:	6923      	ldr	r3, [r4, #16]
   2bd14:	b94b      	cbnz	r3, 2bd2a <__swsetup_r+0x9a>
   2bd16:	89a3      	ldrh	r3, [r4, #12]
   2bd18:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2bd1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2bd20:	d003      	beq.n	2bd2a <__swsetup_r+0x9a>
   2bd22:	4621      	mov	r1, r4
   2bd24:	4630      	mov	r0, r6
   2bd26:	f000 f905 	bl	2bf34 <__smakebuf_r>
   2bd2a:	89a0      	ldrh	r0, [r4, #12]
   2bd2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2bd30:	f010 0301 	ands.w	r3, r0, #1
   2bd34:	d00a      	beq.n	2bd4c <__swsetup_r+0xbc>
   2bd36:	2300      	movs	r3, #0
   2bd38:	60a3      	str	r3, [r4, #8]
   2bd3a:	6963      	ldr	r3, [r4, #20]
   2bd3c:	425b      	negs	r3, r3
   2bd3e:	61a3      	str	r3, [r4, #24]
   2bd40:	6923      	ldr	r3, [r4, #16]
   2bd42:	b943      	cbnz	r3, 2bd56 <__swsetup_r+0xc6>
   2bd44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   2bd48:	d1ba      	bne.n	2bcc0 <__swsetup_r+0x30>
   2bd4a:	bd70      	pop	{r4, r5, r6, pc}
   2bd4c:	0781      	lsls	r1, r0, #30
   2bd4e:	bf58      	it	pl
   2bd50:	6963      	ldrpl	r3, [r4, #20]
   2bd52:	60a3      	str	r3, [r4, #8]
   2bd54:	e7f4      	b.n	2bd40 <__swsetup_r+0xb0>
   2bd56:	2000      	movs	r0, #0
   2bd58:	e7f7      	b.n	2bd4a <__swsetup_r+0xba>
   2bd5a:	bf00      	nop
   2bd5c:	200008e0 	.word	0x200008e0
   2bd60:	000366e8 	.word	0x000366e8
   2bd64:	00036708 	.word	0x00036708
   2bd68:	000366c8 	.word	0x000366c8

0002bd6c <_close_r>:
   2bd6c:	b538      	push	{r3, r4, r5, lr}
   2bd6e:	4d06      	ldr	r5, [pc, #24]	; (2bd88 <_close_r+0x1c>)
   2bd70:	2300      	movs	r3, #0
   2bd72:	4604      	mov	r4, r0
   2bd74:	4608      	mov	r0, r1
   2bd76:	602b      	str	r3, [r5, #0]
   2bd78:	f001 f8ee 	bl	2cf58 <_close>
   2bd7c:	1c43      	adds	r3, r0, #1
   2bd7e:	d102      	bne.n	2bd86 <_close_r+0x1a>
   2bd80:	682b      	ldr	r3, [r5, #0]
   2bd82:	b103      	cbz	r3, 2bd86 <_close_r+0x1a>
   2bd84:	6023      	str	r3, [r4, #0]
   2bd86:	bd38      	pop	{r3, r4, r5, pc}
   2bd88:	200041b8 	.word	0x200041b8

0002bd8c <__sflush_r>:
   2bd8c:	898a      	ldrh	r2, [r1, #12]
   2bd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bd92:	4605      	mov	r5, r0
   2bd94:	0710      	lsls	r0, r2, #28
   2bd96:	460c      	mov	r4, r1
   2bd98:	d458      	bmi.n	2be4c <__sflush_r+0xc0>
   2bd9a:	684b      	ldr	r3, [r1, #4]
   2bd9c:	2b00      	cmp	r3, #0
   2bd9e:	dc05      	bgt.n	2bdac <__sflush_r+0x20>
   2bda0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2bda2:	2b00      	cmp	r3, #0
   2bda4:	dc02      	bgt.n	2bdac <__sflush_r+0x20>
   2bda6:	2000      	movs	r0, #0
   2bda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bdac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2bdae:	2e00      	cmp	r6, #0
   2bdb0:	d0f9      	beq.n	2bda6 <__sflush_r+0x1a>
   2bdb2:	2300      	movs	r3, #0
   2bdb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2bdb8:	682f      	ldr	r7, [r5, #0]
   2bdba:	602b      	str	r3, [r5, #0]
   2bdbc:	d032      	beq.n	2be24 <__sflush_r+0x98>
   2bdbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
   2bdc0:	89a3      	ldrh	r3, [r4, #12]
   2bdc2:	075a      	lsls	r2, r3, #29
   2bdc4:	d505      	bpl.n	2bdd2 <__sflush_r+0x46>
   2bdc6:	6863      	ldr	r3, [r4, #4]
   2bdc8:	1ac0      	subs	r0, r0, r3
   2bdca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2bdcc:	b10b      	cbz	r3, 2bdd2 <__sflush_r+0x46>
   2bdce:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2bdd0:	1ac0      	subs	r0, r0, r3
   2bdd2:	2300      	movs	r3, #0
   2bdd4:	4602      	mov	r2, r0
   2bdd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2bdd8:	6a21      	ldr	r1, [r4, #32]
   2bdda:	4628      	mov	r0, r5
   2bddc:	47b0      	blx	r6
   2bdde:	1c43      	adds	r3, r0, #1
   2bde0:	89a3      	ldrh	r3, [r4, #12]
   2bde2:	d106      	bne.n	2bdf2 <__sflush_r+0x66>
   2bde4:	6829      	ldr	r1, [r5, #0]
   2bde6:	291d      	cmp	r1, #29
   2bde8:	d82c      	bhi.n	2be44 <__sflush_r+0xb8>
   2bdea:	4a2a      	ldr	r2, [pc, #168]	; (2be94 <__sflush_r+0x108>)
   2bdec:	40ca      	lsrs	r2, r1
   2bdee:	07d6      	lsls	r6, r2, #31
   2bdf0:	d528      	bpl.n	2be44 <__sflush_r+0xb8>
   2bdf2:	2200      	movs	r2, #0
   2bdf4:	6062      	str	r2, [r4, #4]
   2bdf6:	04d9      	lsls	r1, r3, #19
   2bdf8:	6922      	ldr	r2, [r4, #16]
   2bdfa:	6022      	str	r2, [r4, #0]
   2bdfc:	d504      	bpl.n	2be08 <__sflush_r+0x7c>
   2bdfe:	1c42      	adds	r2, r0, #1
   2be00:	d101      	bne.n	2be06 <__sflush_r+0x7a>
   2be02:	682b      	ldr	r3, [r5, #0]
   2be04:	b903      	cbnz	r3, 2be08 <__sflush_r+0x7c>
   2be06:	6560      	str	r0, [r4, #84]	; 0x54
   2be08:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2be0a:	602f      	str	r7, [r5, #0]
   2be0c:	2900      	cmp	r1, #0
   2be0e:	d0ca      	beq.n	2bda6 <__sflush_r+0x1a>
   2be10:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2be14:	4299      	cmp	r1, r3
   2be16:	d002      	beq.n	2be1e <__sflush_r+0x92>
   2be18:	4628      	mov	r0, r5
   2be1a:	f7fe ff39 	bl	2ac90 <_free_r>
   2be1e:	2000      	movs	r0, #0
   2be20:	6360      	str	r0, [r4, #52]	; 0x34
   2be22:	e7c1      	b.n	2bda8 <__sflush_r+0x1c>
   2be24:	6a21      	ldr	r1, [r4, #32]
   2be26:	2301      	movs	r3, #1
   2be28:	4628      	mov	r0, r5
   2be2a:	47b0      	blx	r6
   2be2c:	1c41      	adds	r1, r0, #1
   2be2e:	d1c7      	bne.n	2bdc0 <__sflush_r+0x34>
   2be30:	682b      	ldr	r3, [r5, #0]
   2be32:	2b00      	cmp	r3, #0
   2be34:	d0c4      	beq.n	2bdc0 <__sflush_r+0x34>
   2be36:	2b1d      	cmp	r3, #29
   2be38:	d001      	beq.n	2be3e <__sflush_r+0xb2>
   2be3a:	2b16      	cmp	r3, #22
   2be3c:	d101      	bne.n	2be42 <__sflush_r+0xb6>
   2be3e:	602f      	str	r7, [r5, #0]
   2be40:	e7b1      	b.n	2bda6 <__sflush_r+0x1a>
   2be42:	89a3      	ldrh	r3, [r4, #12]
   2be44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2be48:	81a3      	strh	r3, [r4, #12]
   2be4a:	e7ad      	b.n	2bda8 <__sflush_r+0x1c>
   2be4c:	690f      	ldr	r7, [r1, #16]
   2be4e:	2f00      	cmp	r7, #0
   2be50:	d0a9      	beq.n	2bda6 <__sflush_r+0x1a>
   2be52:	0793      	lsls	r3, r2, #30
   2be54:	680e      	ldr	r6, [r1, #0]
   2be56:	bf08      	it	eq
   2be58:	694b      	ldreq	r3, [r1, #20]
   2be5a:	600f      	str	r7, [r1, #0]
   2be5c:	bf18      	it	ne
   2be5e:	2300      	movne	r3, #0
   2be60:	eba6 0807 	sub.w	r8, r6, r7
   2be64:	608b      	str	r3, [r1, #8]
   2be66:	f1b8 0f00 	cmp.w	r8, #0
   2be6a:	dd9c      	ble.n	2bda6 <__sflush_r+0x1a>
   2be6c:	6a21      	ldr	r1, [r4, #32]
   2be6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2be70:	4643      	mov	r3, r8
   2be72:	463a      	mov	r2, r7
   2be74:	4628      	mov	r0, r5
   2be76:	47b0      	blx	r6
   2be78:	2800      	cmp	r0, #0
   2be7a:	dc06      	bgt.n	2be8a <__sflush_r+0xfe>
   2be7c:	89a3      	ldrh	r3, [r4, #12]
   2be7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2be82:	81a3      	strh	r3, [r4, #12]
   2be84:	f04f 30ff 	mov.w	r0, #4294967295
   2be88:	e78e      	b.n	2bda8 <__sflush_r+0x1c>
   2be8a:	4407      	add	r7, r0
   2be8c:	eba8 0800 	sub.w	r8, r8, r0
   2be90:	e7e9      	b.n	2be66 <__sflush_r+0xda>
   2be92:	bf00      	nop
   2be94:	20400001 	.word	0x20400001

0002be98 <_fflush_r>:
   2be98:	b538      	push	{r3, r4, r5, lr}
   2be9a:	690b      	ldr	r3, [r1, #16]
   2be9c:	4605      	mov	r5, r0
   2be9e:	460c      	mov	r4, r1
   2bea0:	b913      	cbnz	r3, 2bea8 <_fflush_r+0x10>
   2bea2:	2500      	movs	r5, #0
   2bea4:	4628      	mov	r0, r5
   2bea6:	bd38      	pop	{r3, r4, r5, pc}
   2bea8:	b118      	cbz	r0, 2beb2 <_fflush_r+0x1a>
   2beaa:	6983      	ldr	r3, [r0, #24]
   2beac:	b90b      	cbnz	r3, 2beb2 <_fflush_r+0x1a>
   2beae:	f7ff fb7f 	bl	2b5b0 <__sinit>
   2beb2:	4b14      	ldr	r3, [pc, #80]	; (2bf04 <_fflush_r+0x6c>)
   2beb4:	429c      	cmp	r4, r3
   2beb6:	d11b      	bne.n	2bef0 <_fflush_r+0x58>
   2beb8:	686c      	ldr	r4, [r5, #4]
   2beba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2bebe:	2b00      	cmp	r3, #0
   2bec0:	d0ef      	beq.n	2bea2 <_fflush_r+0xa>
   2bec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2bec4:	07d0      	lsls	r0, r2, #31
   2bec6:	d404      	bmi.n	2bed2 <_fflush_r+0x3a>
   2bec8:	0599      	lsls	r1, r3, #22
   2beca:	d402      	bmi.n	2bed2 <_fflush_r+0x3a>
   2becc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2bece:	f7ea f975 	bl	161bc <__retarget_lock_acquire_recursive>
   2bed2:	4628      	mov	r0, r5
   2bed4:	4621      	mov	r1, r4
   2bed6:	f7ff ff59 	bl	2bd8c <__sflush_r>
   2beda:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2bedc:	07da      	lsls	r2, r3, #31
   2bede:	4605      	mov	r5, r0
   2bee0:	d4e0      	bmi.n	2bea4 <_fflush_r+0xc>
   2bee2:	89a3      	ldrh	r3, [r4, #12]
   2bee4:	059b      	lsls	r3, r3, #22
   2bee6:	d4dd      	bmi.n	2bea4 <_fflush_r+0xc>
   2bee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2beea:	f7ea f987 	bl	161fc <__retarget_lock_release_recursive>
   2beee:	e7d9      	b.n	2bea4 <_fflush_r+0xc>
   2bef0:	4b05      	ldr	r3, [pc, #20]	; (2bf08 <_fflush_r+0x70>)
   2bef2:	429c      	cmp	r4, r3
   2bef4:	d101      	bne.n	2befa <_fflush_r+0x62>
   2bef6:	68ac      	ldr	r4, [r5, #8]
   2bef8:	e7df      	b.n	2beba <_fflush_r+0x22>
   2befa:	4b04      	ldr	r3, [pc, #16]	; (2bf0c <_fflush_r+0x74>)
   2befc:	429c      	cmp	r4, r3
   2befe:	bf08      	it	eq
   2bf00:	68ec      	ldreq	r4, [r5, #12]
   2bf02:	e7da      	b.n	2beba <_fflush_r+0x22>
   2bf04:	000366e8 	.word	0x000366e8
   2bf08:	00036708 	.word	0x00036708
   2bf0c:	000366c8 	.word	0x000366c8

0002bf10 <_lseek_r>:
   2bf10:	b538      	push	{r3, r4, r5, lr}
   2bf12:	4d07      	ldr	r5, [pc, #28]	; (2bf30 <_lseek_r+0x20>)
   2bf14:	4604      	mov	r4, r0
   2bf16:	4608      	mov	r0, r1
   2bf18:	4611      	mov	r1, r2
   2bf1a:	2200      	movs	r2, #0
   2bf1c:	602a      	str	r2, [r5, #0]
   2bf1e:	461a      	mov	r2, r3
   2bf20:	f001 f81d 	bl	2cf5e <_lseek>
   2bf24:	1c43      	adds	r3, r0, #1
   2bf26:	d102      	bne.n	2bf2e <_lseek_r+0x1e>
   2bf28:	682b      	ldr	r3, [r5, #0]
   2bf2a:	b103      	cbz	r3, 2bf2e <_lseek_r+0x1e>
   2bf2c:	6023      	str	r3, [r4, #0]
   2bf2e:	bd38      	pop	{r3, r4, r5, pc}
   2bf30:	200041b8 	.word	0x200041b8

0002bf34 <__smakebuf_r>:
   2bf34:	898b      	ldrh	r3, [r1, #12]
   2bf36:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2bf38:	079d      	lsls	r5, r3, #30
   2bf3a:	4606      	mov	r6, r0
   2bf3c:	460c      	mov	r4, r1
   2bf3e:	d507      	bpl.n	2bf50 <__smakebuf_r+0x1c>
   2bf40:	f104 0347 	add.w	r3, r4, #71	; 0x47
   2bf44:	6023      	str	r3, [r4, #0]
   2bf46:	6123      	str	r3, [r4, #16]
   2bf48:	2301      	movs	r3, #1
   2bf4a:	6163      	str	r3, [r4, #20]
   2bf4c:	b002      	add	sp, #8
   2bf4e:	bd70      	pop	{r4, r5, r6, pc}
   2bf50:	ab01      	add	r3, sp, #4
   2bf52:	466a      	mov	r2, sp
   2bf54:	f005 fae5 	bl	31522 <__swhatbuf_r>
   2bf58:	9900      	ldr	r1, [sp, #0]
   2bf5a:	4605      	mov	r5, r0
   2bf5c:	4630      	mov	r0, r6
   2bf5e:	f7fe fee5 	bl	2ad2c <_malloc_r>
   2bf62:	b948      	cbnz	r0, 2bf78 <__smakebuf_r+0x44>
   2bf64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2bf68:	059a      	lsls	r2, r3, #22
   2bf6a:	d4ef      	bmi.n	2bf4c <__smakebuf_r+0x18>
   2bf6c:	f023 0303 	bic.w	r3, r3, #3
   2bf70:	f043 0302 	orr.w	r3, r3, #2
   2bf74:	81a3      	strh	r3, [r4, #12]
   2bf76:	e7e3      	b.n	2bf40 <__smakebuf_r+0xc>
   2bf78:	4b0d      	ldr	r3, [pc, #52]	; (2bfb0 <__smakebuf_r+0x7c>)
   2bf7a:	62b3      	str	r3, [r6, #40]	; 0x28
   2bf7c:	89a3      	ldrh	r3, [r4, #12]
   2bf7e:	6020      	str	r0, [r4, #0]
   2bf80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2bf84:	81a3      	strh	r3, [r4, #12]
   2bf86:	9b00      	ldr	r3, [sp, #0]
   2bf88:	6163      	str	r3, [r4, #20]
   2bf8a:	9b01      	ldr	r3, [sp, #4]
   2bf8c:	6120      	str	r0, [r4, #16]
   2bf8e:	b15b      	cbz	r3, 2bfa8 <__smakebuf_r+0x74>
   2bf90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2bf94:	4630      	mov	r0, r6
   2bf96:	f000 f831 	bl	2bffc <_isatty_r>
   2bf9a:	b128      	cbz	r0, 2bfa8 <__smakebuf_r+0x74>
   2bf9c:	89a3      	ldrh	r3, [r4, #12]
   2bf9e:	f023 0303 	bic.w	r3, r3, #3
   2bfa2:	f043 0301 	orr.w	r3, r3, #1
   2bfa6:	81a3      	strh	r3, [r4, #12]
   2bfa8:	89a0      	ldrh	r0, [r4, #12]
   2bfaa:	4305      	orrs	r5, r0
   2bfac:	81a5      	strh	r5, [r4, #12]
   2bfae:	e7cd      	b.n	2bf4c <__smakebuf_r+0x18>
   2bfb0:	0002b575 	.word	0x0002b575

0002bfb4 <_read_r>:
   2bfb4:	b538      	push	{r3, r4, r5, lr}
   2bfb6:	4d07      	ldr	r5, [pc, #28]	; (2bfd4 <_read_r+0x20>)
   2bfb8:	4604      	mov	r4, r0
   2bfba:	4608      	mov	r0, r1
   2bfbc:	4611      	mov	r1, r2
   2bfbe:	2200      	movs	r2, #0
   2bfc0:	602a      	str	r2, [r5, #0]
   2bfc2:	461a      	mov	r2, r3
   2bfc4:	f000 ffbc 	bl	2cf40 <_read>
   2bfc8:	1c43      	adds	r3, r0, #1
   2bfca:	d102      	bne.n	2bfd2 <_read_r+0x1e>
   2bfcc:	682b      	ldr	r3, [r5, #0]
   2bfce:	b103      	cbz	r3, 2bfd2 <_read_r+0x1e>
   2bfd0:	6023      	str	r3, [r4, #0]
   2bfd2:	bd38      	pop	{r3, r4, r5, pc}
   2bfd4:	200041b8 	.word	0x200041b8

0002bfd8 <_fstat_r>:
   2bfd8:	b538      	push	{r3, r4, r5, lr}
   2bfda:	4d07      	ldr	r5, [pc, #28]	; (2bff8 <_fstat_r+0x20>)
   2bfdc:	2300      	movs	r3, #0
   2bfde:	4604      	mov	r4, r0
   2bfe0:	4608      	mov	r0, r1
   2bfe2:	4611      	mov	r1, r2
   2bfe4:	602b      	str	r3, [r5, #0]
   2bfe6:	f000 ffc1 	bl	2cf6c <_fstat>
   2bfea:	1c43      	adds	r3, r0, #1
   2bfec:	d102      	bne.n	2bff4 <_fstat_r+0x1c>
   2bfee:	682b      	ldr	r3, [r5, #0]
   2bff0:	b103      	cbz	r3, 2bff4 <_fstat_r+0x1c>
   2bff2:	6023      	str	r3, [r4, #0]
   2bff4:	bd38      	pop	{r3, r4, r5, pc}
   2bff6:	bf00      	nop
   2bff8:	200041b8 	.word	0x200041b8

0002bffc <_isatty_r>:
   2bffc:	b538      	push	{r3, r4, r5, lr}
   2bffe:	4d06      	ldr	r5, [pc, #24]	; (2c018 <_isatty_r+0x1c>)
   2c000:	2300      	movs	r3, #0
   2c002:	4604      	mov	r4, r0
   2c004:	4608      	mov	r0, r1
   2c006:	602b      	str	r3, [r5, #0]
   2c008:	f000 ffab 	bl	2cf62 <_isatty>
   2c00c:	1c43      	adds	r3, r0, #1
   2c00e:	d102      	bne.n	2c016 <_isatty_r+0x1a>
   2c010:	682b      	ldr	r3, [r5, #0]
   2c012:	b103      	cbz	r3, 2c016 <_isatty_r+0x1a>
   2c014:	6023      	str	r3, [r4, #0]
   2c016:	bd38      	pop	{r3, r4, r5, pc}
   2c018:	200041b8 	.word	0x200041b8

0002c01c <dhtRead>:
{
   2c01c:	b510      	push	{r4, lr}
   2c01e:	b082      	sub	sp, #8
   2c020:	4604      	mov	r4, r0
  for(i=0;i<sizeof(buffer); i++) 
   2c022:	2300      	movs	r3, #0
   2c024:	2b04      	cmp	r3, #4
   2c026:	d806      	bhi.n	2c036 <dhtRead+0x1a>
      buffer[i] = 0;
   2c028:	aa02      	add	r2, sp, #8
   2c02a:	441a      	add	r2, r3
   2c02c:	2100      	movs	r1, #0
   2c02e:	f802 1c08 	strb.w	r1, [r2, #-8]
  for(i=0;i<sizeof(buffer); i++) 
   2c032:	3301      	adds	r3, #1
   2c034:	e7f6      	b.n	2c024 <dhtRead+0x8>
  sendSignalToDHTSensor();
   2c036:	f7e5 fc37 	bl	118a8 <sendSignalToDHTSensor>
  if (waitForDHTResponse() == DHT_FAIL)
   2c03a:	f7e5 fc51 	bl	118e0 <waitForDHTResponse>
   2c03e:	2801      	cmp	r0, #1
   2c040:	d019      	beq.n	2c076 <dhtRead+0x5a>
  if (readingDataFromDHTSensor(buffer) == DHT_FAIL)
   2c042:	4668      	mov	r0, sp
   2c044:	f7e5 fc8a 	bl	1195c <readingDataFromDHTSensor>
   2c048:	2801      	cmp	r0, #1
   2c04a:	d014      	beq.n	2c076 <dhtRead+0x5a>
  if (verifyReturnedBuffer(buffer) == DHT_FAIL)
   2c04c:	4668      	mov	r0, sp
   2c04e:	f7e5 fcc7 	bl	119e0 <verifyReturnedBuffer>
   2c052:	2801      	cmp	r0, #1
   2c054:	d00f      	beq.n	2c076 <dhtRead+0x5a>
  if (dht->dhtModel == DHT22)
   2c056:	7c23      	ldrb	r3, [r4, #16]
   2c058:	2b01      	cmp	r3, #1
   2c05a:	d00e      	beq.n	2c07a <dhtRead+0x5e>
    dht->humidityIntPart = buffer[0];
   2c05c:	f89d 3000 	ldrb.w	r3, [sp]
   2c060:	60a3      	str	r3, [r4, #8]
    dht->humidityDecimalPart = buffer[1];
   2c062:	f89d 3001 	ldrb.w	r3, [sp, #1]
   2c066:	60e3      	str	r3, [r4, #12]
    dht->temperatureIntPart = buffer[2];
   2c068:	f89d 3002 	ldrb.w	r3, [sp, #2]
   2c06c:	6023      	str	r3, [r4, #0]
    dht->temperatureDecimalPart = buffer[3];
   2c06e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2c072:	6063      	str	r3, [r4, #4]
  return DHT_SUCCESS;
   2c074:	2000      	movs	r0, #0
}
   2c076:	b002      	add	sp, #8
   2c078:	bd10      	pop	{r4, pc}
    int f = (buffer[0]) << 8 | buffer[1];
   2c07a:	f89d 2000 	ldrb.w	r2, [sp]
   2c07e:	f89d 1001 	ldrb.w	r1, [sp, #1]
   2c082:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    dht->humidityIntPart = f / 10;
   2c086:	f103 3366 	add.w	r3, r3, #1717986918	; 0x66666666
   2c08a:	fb83 0201 	smull	r0, r2, r3, r1
   2c08e:	1092      	asrs	r2, r2, #2
   2c090:	60a2      	str	r2, [r4, #8]
    dht->humidityDecimalPart = f % 10;
   2c092:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   2c096:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
   2c09a:	60e2      	str	r2, [r4, #12]
    f = (buffer[2]) << 8 | buffer[3];
   2c09c:	f89d 1002 	ldrb.w	r1, [sp, #2]
   2c0a0:	f89d 2003 	ldrb.w	r2, [sp, #3]
   2c0a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    dht->temperatureIntPart = f / 10; 
   2c0a8:	fb83 1302 	smull	r1, r3, r3, r2
   2c0ac:	109b      	asrs	r3, r3, #2
   2c0ae:	6023      	str	r3, [r4, #0]
    dht->temperatureDecimalPart = f % 10;
   2c0b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2c0b4:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   2c0b8:	6063      	str	r3, [r4, #4]
  return DHT_SUCCESS;
   2c0ba:	2000      	movs	r0, #0
   2c0bc:	e7db      	b.n	2c076 <dhtRead+0x5a>

0002c0be <strcat_MY>:
{
   2c0be:	b538      	push	{r3, r4, r5, lr}
   2c0c0:	4604      	mov	r4, r0
   2c0c2:	460d      	mov	r5, r1
	strcpy(dest + (strlen(dest)+1), src);
   2c0c4:	f7e0 f80a 	bl	c0dc <strlen>
   2c0c8:	3001      	adds	r0, #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2c0ca:	4629      	mov	r1, r5
   2c0cc:	4420      	add	r0, r4
   2c0ce:	f004 fd44 	bl	30b5a <strcpy>
}
   2c0d2:	4620      	mov	r0, r4
   2c0d4:	bd38      	pop	{r3, r4, r5, pc}

0002c0d6 <sys_notify_validate>:
	if (notify == NULL) {
   2c0d6:	4602      	mov	r2, r0
   2c0d8:	b1b0      	cbz	r0, 2c108 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2c0da:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2c0dc:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   2c0e0:	2b02      	cmp	r3, #2
   2c0e2:	d00b      	beq.n	2c0fc <sys_notify_validate+0x26>
   2c0e4:	2b03      	cmp	r3, #3
   2c0e6:	d004      	beq.n	2c0f2 <sys_notify_validate+0x1c>
   2c0e8:	2b01      	cmp	r3, #1
   2c0ea:	d004      	beq.n	2c0f6 <sys_notify_validate+0x20>
   2c0ec:	f06f 0015 	mvn.w	r0, #21
   2c0f0:	4770      	bx	lr
		if (notify->method.callback == NULL) {
   2c0f2:	6803      	ldr	r3, [r0, #0]
   2c0f4:	b15b      	cbz	r3, 2c10e <sys_notify_validate+0x38>
		notify->result = 0;
   2c0f6:	2000      	movs	r0, #0
   2c0f8:	6090      	str	r0, [r2, #8]
   2c0fa:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2c0fc:	6803      	ldr	r3, [r0, #0]
   2c0fe:	2b00      	cmp	r3, #0
   2c100:	d1f9      	bne.n	2c0f6 <sys_notify_validate+0x20>
			rv = -EINVAL;
   2c102:	f06f 0015 	mvn.w	r0, #21
}
   2c106:	4770      	bx	lr
		return -EINVAL;
   2c108:	f06f 0015 	mvn.w	r0, #21
   2c10c:	4770      	bx	lr
			rv = -EINVAL;
   2c10e:	f06f 0015 	mvn.w	r0, #21
   2c112:	4770      	bx	lr

0002c114 <arch_printk_char_out>:
}
   2c114:	2000      	movs	r0, #0
   2c116:	4770      	bx	lr

0002c118 <str_out>:
{
   2c118:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2c11a:	680c      	ldr	r4, [r1, #0]
   2c11c:	b154      	cbz	r4, 2c134 <str_out+0x1c>
   2c11e:	688a      	ldr	r2, [r1, #8]
   2c120:	684b      	ldr	r3, [r1, #4]
   2c122:	429a      	cmp	r2, r3
   2c124:	da06      	bge.n	2c134 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   2c126:	3b01      	subs	r3, #1
   2c128:	429a      	cmp	r2, r3
   2c12a:	d008      	beq.n	2c13e <str_out+0x26>
		ctx->str[ctx->count++] = c;
   2c12c:	1c53      	adds	r3, r2, #1
   2c12e:	608b      	str	r3, [r1, #8]
   2c130:	54a0      	strb	r0, [r4, r2]
   2c132:	e002      	b.n	2c13a <str_out+0x22>
		ctx->count++;
   2c134:	688b      	ldr	r3, [r1, #8]
   2c136:	3301      	adds	r3, #1
   2c138:	608b      	str	r3, [r1, #8]
}
   2c13a:	bc10      	pop	{r4}
   2c13c:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   2c13e:	1c53      	adds	r3, r2, #1
   2c140:	608b      	str	r3, [r1, #8]
   2c142:	2300      	movs	r3, #0
   2c144:	54a3      	strb	r3, [r4, r2]
   2c146:	e7f8      	b.n	2c13a <str_out+0x22>

0002c148 <printk>:
{
   2c148:	b40f      	push	{r0, r1, r2, r3}
   2c14a:	b500      	push	{lr}
   2c14c:	b083      	sub	sp, #12
   2c14e:	a904      	add	r1, sp, #16
   2c150:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2c154:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2c156:	f7e5 fddf 	bl	11d18 <vprintk>
}
   2c15a:	b003      	add	sp, #12
   2c15c:	f85d eb04 	ldr.w	lr, [sp], #4
   2c160:	b004      	add	sp, #16
   2c162:	4770      	bx	lr

0002c164 <snprintk>:
{
   2c164:	b40c      	push	{r2, r3}
   2c166:	b500      	push	{lr}
   2c168:	b083      	sub	sp, #12
   2c16a:	ab04      	add	r3, sp, #16
   2c16c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2c170:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2c172:	f7e5 fde1 	bl	11d38 <vsnprintk>
}
   2c176:	b003      	add	sp, #12
   2c178:	f85d eb04 	ldr.w	lr, [sp], #4
   2c17c:	b002      	add	sp, #8
   2c17e:	4770      	bx	lr

0002c180 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   2c180:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2c184:	8b81      	ldrh	r1, [r0, #28]
   2c186:	f021 0107 	bic.w	r1, r1, #7
   2c18a:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   2c18c:	8381      	strh	r1, [r0, #28]
}
   2c18e:	4770      	bx	lr

0002c190 <notify_monitors>:
{
   2c190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c194:	4606      	mov	r6, r0
   2c196:	460f      	mov	r7, r1
   2c198:	4690      	mov	r8, r2
	return list->head;
   2c19a:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2c19c:	b119      	cbz	r1, 2c1a6 <notify_monitors+0x16>
   2c19e:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   2c1a0:	b131      	cbz	r1, 2c1b0 <notify_monitors+0x20>
	return node->next;
   2c1a2:	680c      	ldr	r4, [r1, #0]
   2c1a4:	e004      	b.n	2c1b0 <notify_monitors+0x20>
   2c1a6:	460c      	mov	r4, r1
   2c1a8:	e002      	b.n	2c1b0 <notify_monitors+0x20>
   2c1aa:	4623      	mov	r3, r4
   2c1ac:	4621      	mov	r1, r4
   2c1ae:	461c      	mov	r4, r3
   2c1b0:	b159      	cbz	r1, 2c1ca <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   2c1b2:	684d      	ldr	r5, [r1, #4]
   2c1b4:	4643      	mov	r3, r8
   2c1b6:	463a      	mov	r2, r7
   2c1b8:	4630      	mov	r0, r6
   2c1ba:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2c1bc:	2c00      	cmp	r4, #0
   2c1be:	d0f4      	beq.n	2c1aa <notify_monitors+0x1a>
   2c1c0:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   2c1c2:	2c00      	cmp	r4, #0
   2c1c4:	d0f2      	beq.n	2c1ac <notify_monitors+0x1c>
	return node->next;
   2c1c6:	6823      	ldr	r3, [r4, #0]
   2c1c8:	e7f0      	b.n	2c1ac <notify_monitors+0x1c>
}
   2c1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c1ce <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2c1ce:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2c1d0:	f013 0307 	ands.w	r3, r3, #7
   2c1d4:	d103      	bne.n	2c1de <process_recheck+0x10>
	return list->head;
   2c1d6:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   2c1d8:	b10a      	cbz	r2, 2c1de <process_recheck+0x10>
		evt = EVT_START;
   2c1da:	2003      	movs	r0, #3
   2c1dc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2c1de:	2b02      	cmp	r3, #2
   2c1e0:	d003      	beq.n	2c1ea <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   2c1e2:	2b01      	cmp	r3, #1
   2c1e4:	d006      	beq.n	2c1f4 <process_recheck+0x26>
	int evt = EVT_NOP;
   2c1e6:	2000      	movs	r0, #0
   2c1e8:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   2c1ea:	8bc2      	ldrh	r2, [r0, #30]
   2c1ec:	2a00      	cmp	r2, #0
   2c1ee:	d1f8      	bne.n	2c1e2 <process_recheck+0x14>
		evt = EVT_STOP;
   2c1f0:	2004      	movs	r0, #4
   2c1f2:	4770      	bx	lr
   2c1f4:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   2c1f6:	b10b      	cbz	r3, 2c1fc <process_recheck+0x2e>
		evt = EVT_RESET;
   2c1f8:	2005      	movs	r0, #5
}
   2c1fa:	4770      	bx	lr
	int evt = EVT_NOP;
   2c1fc:	2000      	movs	r0, #0
   2c1fe:	4770      	bx	lr

0002c200 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   2c200:	b158      	cbz	r0, 2c21a <validate_args+0x1a>
{
   2c202:	b510      	push	{r4, lr}
   2c204:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2c206:	b159      	cbz	r1, 2c220 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   2c208:	1d08      	adds	r0, r1, #4
   2c20a:	f7ff ff64 	bl	2c0d6 <sys_notify_validate>
	if ((rv == 0)
   2c20e:	b918      	cbnz	r0, 2c218 <validate_args+0x18>
	    && ((cli->notify.flags
   2c210:	68a3      	ldr	r3, [r4, #8]
   2c212:	f033 0303 	bics.w	r3, r3, #3
   2c216:	d106      	bne.n	2c226 <validate_args+0x26>
}
   2c218:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2c21a:	f06f 0015 	mvn.w	r0, #21
}
   2c21e:	4770      	bx	lr
		return -EINVAL;
   2c220:	f06f 0015 	mvn.w	r0, #21
   2c224:	e7f8      	b.n	2c218 <validate_args+0x18>
		rv = -EINVAL;
   2c226:	f06f 0015 	mvn.w	r0, #21
   2c22a:	e7f5      	b.n	2c218 <validate_args+0x18>

0002c22c <notify_one>:
{
   2c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c230:	4607      	mov	r7, r0
   2c232:	460c      	mov	r4, r1
   2c234:	4616      	mov	r6, r2
   2c236:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c238:	4619      	mov	r1, r3
   2c23a:	1d20      	adds	r0, r4, #4
   2c23c:	f7e5 fd2a 	bl	11c94 <sys_notify_finalize>
	if (cb) {
   2c240:	b128      	cbz	r0, 2c24e <notify_one+0x22>
   2c242:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   2c244:	462b      	mov	r3, r5
   2c246:	4632      	mov	r2, r6
   2c248:	4621      	mov	r1, r4
   2c24a:	4638      	mov	r0, r7
   2c24c:	47c0      	blx	r8
}
   2c24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c252 <notify_all>:
{
   2c252:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c256:	4681      	mov	r9, r0
   2c258:	460c      	mov	r4, r1
   2c25a:	4690      	mov	r8, r2
   2c25c:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   2c25e:	e005      	b.n	2c26c <notify_all+0x1a>
	list->tail = node;
   2c260:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   2c262:	463b      	mov	r3, r7
   2c264:	4642      	mov	r2, r8
   2c266:	4648      	mov	r0, r9
   2c268:	f7ff ffe0 	bl	2c22c <notify_one>
	return list->head;
   2c26c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   2c26e:	b129      	cbz	r1, 2c27c <notify_all+0x2a>
	return node->next;
   2c270:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   2c272:	6025      	str	r5, [r4, #0]
	return list->tail;
   2c274:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c276:	428e      	cmp	r6, r1
   2c278:	d1f3      	bne.n	2c262 <notify_all+0x10>
   2c27a:	e7f1      	b.n	2c260 <notify_all+0xe>
}
   2c27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002c280 <onoff_manager_init>:
	if ((mgr == NULL)
   2c280:	b170      	cbz	r0, 2c2a0 <onoff_manager_init+0x20>
{
   2c282:	b538      	push	{r3, r4, r5, lr}
   2c284:	460c      	mov	r4, r1
   2c286:	4605      	mov	r5, r0
	    || (transitions == NULL)
   2c288:	b169      	cbz	r1, 2c2a6 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   2c28a:	680b      	ldr	r3, [r1, #0]
   2c28c:	b173      	cbz	r3, 2c2ac <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   2c28e:	684b      	ldr	r3, [r1, #4]
   2c290:	b17b      	cbz	r3, 2c2b2 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2c292:	2220      	movs	r2, #32
   2c294:	2100      	movs	r1, #0
   2c296:	f004 fb33 	bl	30900 <memset>
   2c29a:	612c      	str	r4, [r5, #16]
	return 0;
   2c29c:	2000      	movs	r0, #0
}
   2c29e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2c2a0:	f06f 0015 	mvn.w	r0, #21
}
   2c2a4:	4770      	bx	lr
		return -EINVAL;
   2c2a6:	f06f 0015 	mvn.w	r0, #21
   2c2aa:	e7f8      	b.n	2c29e <onoff_manager_init+0x1e>
   2c2ac:	f06f 0015 	mvn.w	r0, #21
   2c2b0:	e7f5      	b.n	2c29e <onoff_manager_init+0x1e>
   2c2b2:	f06f 0015 	mvn.w	r0, #21
   2c2b6:	e7f2      	b.n	2c29e <onoff_manager_init+0x1e>

0002c2b8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2c2b8:	b508      	push	{r3, lr}
   2c2ba:	4604      	mov	r4, r0
   2c2bc:	4608      	mov	r0, r1
   2c2be:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2c2c0:	461a      	mov	r2, r3
   2c2c2:	47a0      	blx	r4
	return z_impl_z_current_get();
   2c2c4:	f7fa fb3c 	bl	26940 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2c2c8:	f7e9 fd56 	bl	15d78 <z_impl_k_thread_abort>

0002c2cc <chunk_mem>:
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2c2cc:	00c9      	lsls	r1, r1, #3
   2c2ce:	3104      	adds	r1, #4
}
   2c2d0:	4408      	add	r0, r1
   2c2d2:	4770      	bx	lr

0002c2d4 <free_list_remove_bidx>:
		return ((uint16_t *)cmem)[f];
   2c2d4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2c2d8:	88db      	ldrh	r3, [r3, #6]
	if (next_free_chunk(h, c) == c) {
   2c2da:	4299      	cmp	r1, r3
   2c2dc:	d00e      	beq.n	2c2fc <free_list_remove_bidx+0x28>
{
   2c2de:	b410      	push	{r4}
   2c2e0:	00cc      	lsls	r4, r1, #3
   2c2e2:	4404      	add	r4, r0
   2c2e4:	88a1      	ldrh	r1, [r4, #4]
		b->next = second;
   2c2e6:	3204      	adds	r2, #4
   2c2e8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   2c2ec:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2c2ee:	3206      	adds	r2, #6
   2c2f0:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   2c2f2:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2c2f4:	3304      	adds	r3, #4
   2c2f6:	52c1      	strh	r1, [r0, r3]
}
   2c2f8:	bc10      	pop	{r4}
   2c2fa:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   2c2fc:	2301      	movs	r3, #1
   2c2fe:	fa03 f102 	lsl.w	r1, r3, r2
   2c302:	68c3      	ldr	r3, [r0, #12]
   2c304:	ea23 0301 	bic.w	r3, r3, r1
   2c308:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2c30a:	3204      	adds	r2, #4
   2c30c:	2300      	movs	r3, #0
   2c30e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   2c312:	4770      	bx	lr

0002c314 <free_list_add_bidx>:
{
   2c314:	b470      	push	{r4, r5, r6}
	if (b->next == 0U) {
   2c316:	1d13      	adds	r3, r2, #4
   2c318:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2c31c:	b984      	cbnz	r4, 2c340 <free_list_add_bidx+0x2c>
		h->avail_buckets |= BIT(bidx);
   2c31e:	2301      	movs	r3, #1
   2c320:	fa03 f402 	lsl.w	r4, r3, r2
   2c324:	68c3      	ldr	r3, [r0, #12]
   2c326:	4323      	orrs	r3, r4
   2c328:	60c3      	str	r3, [r0, #12]
		b->next = c;
   2c32a:	3204      	adds	r2, #4
   2c32c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   2c330:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   2c332:	1d1a      	adds	r2, r3, #4
   2c334:	b289      	uxth	r1, r1
   2c336:	5281      	strh	r1, [r0, r2]
   2c338:	3306      	adds	r3, #6
   2c33a:	52c1      	strh	r1, [r0, r3]
}
   2c33c:	bc70      	pop	{r4, r5, r6}
   2c33e:	4770      	bx	lr
	void *cmem = &buf[c];
   2c340:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   2c342:	3204      	adds	r2, #4
   2c344:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   2c346:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   2c348:	1d2e      	adds	r6, r5, #4
   2c34a:	5383      	strh	r3, [r0, r6]
   2c34c:	3506      	adds	r5, #6
   2c34e:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   2c350:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2c352:	3306      	adds	r3, #6
   2c354:	b289      	uxth	r1, r1
   2c356:	52c1      	strh	r1, [r0, r3]
   2c358:	5281      	strh	r1, [r0, r2]
   2c35a:	e7ef      	b.n	2c33c <free_list_add_bidx+0x28>

0002c35c <split_chunks>:
{
   2c35c:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   2c35e:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   2c360:	3302      	adds	r3, #2
   2c362:	5ac4      	ldrh	r4, [r0, r3]
	chunksz_t lsz = rc - lc;
   2c364:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2c366:	1a89      	subs	r1, r1, r2
   2c368:	eb01 0154 	add.w	r1, r1, r4, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2c36c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2c36e:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2c370:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   2c372:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   2c374:	3402      	adds	r4, #2
   2c376:	5303      	strh	r3, [r0, r4]
   2c378:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c37c:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c + chunk_size(h, c);
   2c380:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   2c382:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
}
   2c386:	bc30      	pop	{r4, r5}
   2c388:	4770      	bx	lr

0002c38a <merge_chunks>:
{
   2c38a:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   2c38c:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   2c38e:	3102      	adds	r1, #2
   2c390:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   2c392:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   2c394:	3402      	adds	r4, #2
   2c396:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c398:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2c39a:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2c39e:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   2c3a0:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   2c3a2:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   2c3a4:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   2c3a8:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
}
   2c3ac:	bc30      	pop	{r4, r5}
   2c3ae:	4770      	bx	lr

0002c3b0 <mem_to_chunkid>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2c3b0:	3904      	subs	r1, #4
   2c3b2:	1a08      	subs	r0, r1, r0
}
   2c3b4:	08c0      	lsrs	r0, r0, #3
   2c3b6:	4770      	bx	lr

0002c3b8 <free_list_remove>:
{
   2c3b8:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   2c3ba:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2c3be:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c3c0:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   2c3c2:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   2c3c6:	f1c2 021f 	rsb	r2, r2, #31
   2c3ca:	f7ff ff83 	bl	2c2d4 <free_list_remove_bidx>
}
   2c3ce:	bd08      	pop	{r3, pc}

0002c3d0 <free_list_add>:
{
   2c3d0:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   2c3d2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2c3d6:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c3d8:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   2c3da:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   2c3de:	f1c2 021f 	rsb	r2, r2, #31
   2c3e2:	f7ff ff97 	bl	2c314 <free_list_add_bidx>
}
   2c3e6:	bd08      	pop	{r3, pc}

0002c3e8 <free_chunk>:
{
   2c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c3ea:	4604      	mov	r4, r0
   2c3ec:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   2c3ee:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   2c3f0:	1cb7      	adds	r7, r6, #2
   2c3f2:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   2c3f4:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   2c3f8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2c3fc:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2c3fe:	f013 0f01 	tst.w	r3, #1
   2c402:	d00c      	beq.n	2c41e <free_chunk+0x36>
   2c404:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2c406:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   2c408:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   2c40c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2c40e:	f013 0f01 	tst.w	r3, #1
   2c412:	d00e      	beq.n	2c432 <free_chunk+0x4a>
	free_list_add(h, c);
   2c414:	4629      	mov	r1, r5
   2c416:	4620      	mov	r0, r4
   2c418:	f7ff ffda 	bl	2c3d0 <free_list_add>
}
   2c41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   2c41e:	f7ff ffcb 	bl	2c3b8 <free_list_remove>
   2c422:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   2c424:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   2c428:	4629      	mov	r1, r5
   2c42a:	4620      	mov	r0, r4
   2c42c:	f7ff ffad 	bl	2c38a <merge_chunks>
   2c430:	e7e8      	b.n	2c404 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   2c432:	4620      	mov	r0, r4
   2c434:	f7ff ffc0 	bl	2c3b8 <free_list_remove>
   2c438:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   2c43a:	462a      	mov	r2, r5
   2c43c:	1a69      	subs	r1, r5, r1
   2c43e:	4620      	mov	r0, r4
   2c440:	f7ff ffa3 	bl	2c38a <merge_chunks>
   2c444:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2c446:	1aed      	subs	r5, r5, r3
   2c448:	e7e4      	b.n	2c414 <free_chunk+0x2c>

0002c44a <alloc_chunk>:
{
   2c44a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   2c44c:	fab1 f381 	clz	r3, r1
	if (b->next) {
   2c450:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   2c454:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   2c458:	b1b7      	cbz	r7, 2c488 <alloc_chunk+0x3e>
   2c45a:	f1c3 021f 	rsb	r2, r3, #31
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   2c45e:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   2c460:	1d14      	adds	r4, r2, #4
   2c462:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   2c466:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   2c468:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   2c46c:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   2c470:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   2c474:	d912      	bls.n	2c49c <alloc_chunk+0x52>
   2c476:	4405      	add	r5, r0
   2c478:	88ec      	ldrh	r4, [r5, #6]
			b->next = next_free_chunk(h, c);
   2c47a:	1d15      	adds	r5, r2, #4
   2c47c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
		} while (--i && b->next != first);
   2c480:	3e01      	subs	r6, #1
   2c482:	d001      	beq.n	2c488 <alloc_chunk+0x3e>
   2c484:	42a7      	cmp	r7, r4
   2c486:	d1eb      	bne.n	2c460 <alloc_chunk+0x16>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2c488:	68c4      	ldr	r4, [r0, #12]
   2c48a:	f1c3 0220 	rsb	r2, r3, #32
   2c48e:	2301      	movs	r3, #1
   2c490:	4093      	lsls	r3, r2
   2c492:	425b      	negs	r3, r3
	if (bmask != 0U) {
   2c494:	401c      	ands	r4, r3
   2c496:	d105      	bne.n	2c4a4 <alloc_chunk+0x5a>
}
   2c498:	4620      	mov	r0, r4
   2c49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   2c49c:	4621      	mov	r1, r4
   2c49e:	f7ff ff19 	bl	2c2d4 <free_list_remove_bidx>
				return c;
   2c4a2:	e7f9      	b.n	2c498 <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   2c4a4:	fa94 f2a4 	rbit	r2, r4
   2c4a8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2c4ac:	1d13      	adds	r3, r2, #4
   2c4ae:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2c4b2:	4621      	mov	r1, r4
   2c4b4:	f7ff ff0e 	bl	2c2d4 <free_list_remove_bidx>
		return c;
   2c4b8:	e7ee      	b.n	2c498 <alloc_chunk+0x4e>

0002c4ba <sys_heap_alloc>:
{
   2c4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   2c4bc:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2c4be:	b341      	cbz	r1, 2c512 <sys_heap_alloc+0x58>
   2c4c0:	460b      	mov	r3, r1
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   2c4c2:	68aa      	ldr	r2, [r5, #8]
   2c4c4:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   2c4c8:	d925      	bls.n	2c516 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2c4ca:	330b      	adds	r3, #11
   2c4cc:	08dc      	lsrs	r4, r3, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2c4ce:	4621      	mov	r1, r4
   2c4d0:	4628      	mov	r0, r5
   2c4d2:	f7ff ffba 	bl	2c44a <alloc_chunk>
	if (c == 0U) {
   2c4d6:	4607      	mov	r7, r0
   2c4d8:	b1f8      	cbz	r0, 2c51a <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   2c4da:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   2c4dc:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   2c4e0:	885b      	ldrh	r3, [r3, #2]
	if (chunk_size(h, c) > chunk_sz) {
   2c4e2:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   2c4e6:	d309      	bcc.n	2c4fc <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   2c4e8:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2c4ea:	885a      	ldrh	r2, [r3, #2]
   2c4ec:	f042 0201 	orr.w	r2, r2, #1
   2c4f0:	805a      	strh	r2, [r3, #2]
	return chunk_mem(h, c);
   2c4f2:	4639      	mov	r1, r7
   2c4f4:	4628      	mov	r0, r5
   2c4f6:	f7ff fee9 	bl	2c2cc <chunk_mem>
}
   2c4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   2c4fc:	4404      	add	r4, r0
   2c4fe:	4622      	mov	r2, r4
   2c500:	4601      	mov	r1, r0
   2c502:	4628      	mov	r0, r5
   2c504:	f7ff ff2a 	bl	2c35c <split_chunks>
		free_list_add(h, c + chunk_sz);
   2c508:	4621      	mov	r1, r4
   2c50a:	4628      	mov	r0, r5
   2c50c:	f7ff ff60 	bl	2c3d0 <free_list_add>
   2c510:	e7ea      	b.n	2c4e8 <sys_heap_alloc+0x2e>
		return NULL;
   2c512:	2000      	movs	r0, #0
   2c514:	e7f1      	b.n	2c4fa <sys_heap_alloc+0x40>
   2c516:	2000      	movs	r0, #0
   2c518:	e7ef      	b.n	2c4fa <sys_heap_alloc+0x40>
		return NULL;
   2c51a:	2000      	movs	r0, #0
   2c51c:	e7ed      	b.n	2c4fa <sys_heap_alloc+0x40>

0002c51e <outs>:
{
   2c51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c522:	4607      	mov	r7, r0
   2c524:	460e      	mov	r6, r1
   2c526:	4614      	mov	r4, r2
   2c528:	4698      	mov	r8, r3
	size_t count = 0;
   2c52a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2c52c:	e006      	b.n	2c53c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   2c52e:	4631      	mov	r1, r6
   2c530:	f814 0b01 	ldrb.w	r0, [r4], #1
   2c534:	47b8      	blx	r7
		if (rc < 0) {
   2c536:	2800      	cmp	r0, #0
   2c538:	db09      	blt.n	2c54e <outs+0x30>
		++count;
   2c53a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2c53c:	4544      	cmp	r4, r8
   2c53e:	d3f6      	bcc.n	2c52e <outs+0x10>
   2c540:	f1b8 0f00 	cmp.w	r8, #0
   2c544:	d102      	bne.n	2c54c <outs+0x2e>
   2c546:	7823      	ldrb	r3, [r4, #0]
   2c548:	2b00      	cmp	r3, #0
   2c54a:	d1f0      	bne.n	2c52e <outs+0x10>
	return (int)count;
   2c54c:	4628      	mov	r0, r5
}
   2c54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c552 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2c552:	4040      	eors	r0, r0
   2c554:	f380 8811 	msr	BASEPRI, r0
   2c558:	f04f 0004 	mov.w	r0, #4
   2c55c:	df02      	svc	2
}
   2c55e:	4770      	bx	lr

0002c560 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2c560:	4770      	bx	lr

0002c562 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2c562:	2300      	movs	r3, #0
   2c564:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   2c566:	6003      	str	r3, [r0, #0]
}
   2c568:	4770      	bx	lr

0002c56a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2c56a:	6803      	ldr	r3, [r0, #0]
   2c56c:	b12b      	cbz	r3, 2c57a <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   2c56e:	6843      	ldr	r3, [r0, #4]
   2c570:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   2c572:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2c574:	2300      	movs	r3, #0
   2c576:	600b      	str	r3, [r1, #0]
}
   2c578:	4770      	bx	lr
		list->head = msg;
   2c57a:	6001      	str	r1, [r0, #0]
   2c57c:	e7f9      	b.n	2c572 <log_list_add_tail+0x8>

0002c57e <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2c57e:	6800      	ldr	r0, [r0, #0]
   2c580:	4770      	bx	lr

0002c582 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   2c582:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   2c584:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   2c586:	b108      	cbz	r0, 2c58c <log_list_head_get+0xa>
		list->head = list->head->next;
   2c588:	6802      	ldr	r2, [r0, #0]
   2c58a:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   2c58c:	4770      	bx	lr

0002c58e <dummy_timestamp>:
}
   2c58e:	2000      	movs	r0, #0
   2c590:	4770      	bx	lr

0002c592 <msg_filter_check>:
}
   2c592:	2001      	movs	r0, #1
   2c594:	4770      	bx	lr

0002c596 <default_get_timestamp>:
{
   2c596:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2c598:	f003 fb13 	bl	2fbc2 <sys_clock_cycle_get_32>
}
   2c59c:	bd08      	pop	{r3, pc}

0002c59e <z_log_get_tag>:
}
   2c59e:	2000      	movs	r0, #0
   2c5a0:	4770      	bx	lr

0002c5a2 <block_on_alloc>:
}
   2c5a2:	2000      	movs	r0, #0
   2c5a4:	4770      	bx	lr

0002c5a6 <cont_arg_get>:
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2c5a6:	2901      	cmp	r1, #1
   2c5a8:	d906      	bls.n	2c5b8 <cont_arg_get+0x12>
	cont = msg->payload.ext.next;
   2c5aa:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2c5ac:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2c5ae:	2906      	cmp	r1, #6
   2c5b0:	d907      	bls.n	2c5c2 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   2c5b2:	3907      	subs	r1, #7
		cont = cont->next;
   2c5b4:	681b      	ldr	r3, [r3, #0]
   2c5b6:	e7fa      	b.n	2c5ae <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   2c5b8:	3104      	adds	r1, #4
   2c5ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2c5be:	6888      	ldr	r0, [r1, #8]
   2c5c0:	4770      	bx	lr
	return cont->payload.args[arg_idx];
   2c5c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2c5c6:	6848      	ldr	r0, [r1, #4]
}
   2c5c8:	4770      	bx	lr

0002c5ca <copy_args_to_msg>:
{
   2c5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c5ce:	460d      	mov	r5, r1
	struct log_msg_cont *cont = msg->payload.ext.next;
   2c5d0:	6946      	ldr	r6, [r0, #20]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2c5d2:	2a03      	cmp	r2, #3
   2c5d4:	d917      	bls.n	2c606 <copy_args_to_msg+0x3c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c5d6:	6809      	ldr	r1, [r1, #0]
   2c5d8:	686b      	ldr	r3, [r5, #4]
   2c5da:	6181      	str	r1, [r0, #24]
   2c5dc:	61c3      	str	r3, [r0, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   2c5de:	1e94      	subs	r4, r2, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   2c5e0:	3508      	adds	r5, #8
	while (nargs != 0U) {
   2c5e2:	b1b4      	cbz	r4, 2c612 <copy_args_to_msg+0x48>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   2c5e4:	46a0      	mov	r8, r4
   2c5e6:	2c07      	cmp	r4, #7
   2c5e8:	bf28      	it	cs
   2c5ea:	f04f 0807 	movcs.w	r8, #7
		(void)memcpy(cont->payload.args, args,
   2c5ee:	ea4f 0788 	mov.w	r7, r8, lsl #2
   2c5f2:	463a      	mov	r2, r7
   2c5f4:	4629      	mov	r1, r5
   2c5f6:	1d30      	adds	r0, r6, #4
   2c5f8:	f004 f95a 	bl	308b0 <memcpy>
		nargs -= cpy_args;
   2c5fc:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   2c600:	443d      	add	r5, r7
		cont = cont->next;
   2c602:	6836      	ldr	r6, [r6, #0]
   2c604:	e7ed      	b.n	2c5e2 <copy_args_to_msg+0x18>
   2c606:	0092      	lsls	r2, r2, #2
   2c608:	3014      	adds	r0, #20
   2c60a:	f004 f951 	bl	308b0 <memcpy>
		nargs  = 0U;
   2c60e:	2400      	movs	r4, #0
   2c610:	e7e7      	b.n	2c5e2 <copy_args_to_msg+0x18>
}
   2c612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c616 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2c616:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c61a:	461c      	mov	r4, r3
   2c61c:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2c620:	8903      	ldrh	r3, [r0, #8]
   2c622:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   2c626:	42a3      	cmp	r3, r4
   2c628:	d91f      	bls.n	2c66a <log_msg_hexdump_data_op+0x54>
   2c62a:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   2c62c:	6811      	ldr	r1, [r2, #0]
   2c62e:	4421      	add	r1, r4
   2c630:	4299      	cmp	r1, r3
   2c632:	d901      	bls.n	2c638 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   2c634:	1b19      	subs	r1, r3, r4
   2c636:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   2c638:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2c63a:	2b0c      	cmp	r3, #12
   2c63c:	d919      	bls.n	2c672 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   2c63e:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   2c642:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2c644:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   2c646:	42a3      	cmp	r3, r4
   2c648:	d91e      	bls.n	2c688 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2c64a:	42bb      	cmp	r3, r7
   2c64c:	bf28      	it	cs
   2c64e:	463b      	movcs	r3, r7
   2c650:	461d      	mov	r5, r3

		if (put_op) {
   2c652:	f1b9 0f00 	cmp.w	r9, #0
   2c656:	d010      	beq.n	2c67a <log_msg_hexdump_data_op+0x64>
   2c658:	461a      	mov	r2, r3
   2c65a:	4641      	mov	r1, r8
   2c65c:	eb0c 0004 	add.w	r0, ip, r4
   2c660:	f004 f926 	bl	308b0 <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   2c664:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   2c666:	44a8      	add	r8, r5
   2c668:	e021      	b.n	2c6ae <log_msg_hexdump_data_op+0x98>
		*length = 0;
   2c66a:	2300      	movs	r3, #0
   2c66c:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2c66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   2c672:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   2c676:	2600      	movs	r6, #0
   2c678:	e7e5      	b.n	2c646 <log_msg_hexdump_data_op+0x30>
   2c67a:	461a      	mov	r2, r3
   2c67c:	eb0c 0104 	add.w	r1, ip, r4
   2c680:	4640      	mov	r0, r8
   2c682:	f004 f915 	bl	308b0 <memcpy>
   2c686:	e7ed      	b.n	2c664 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   2c688:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   2c68a:	b91e      	cbnz	r6, 2c694 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   2c68c:	6946      	ldr	r6, [r0, #20]
   2c68e:	e001      	b.n	2c694 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   2c690:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   2c692:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   2c694:	2c1b      	cmp	r4, #27
   2c696:	d8fb      	bhi.n	2c690 <log_msg_hexdump_data_op+0x7a>
   2c698:	e009      	b.n	2c6ae <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   2c69a:	1931      	adds	r1, r6, r4
   2c69c:	462a      	mov	r2, r5
   2c69e:	3104      	adds	r1, #4
   2c6a0:	4640      	mov	r0, r8
   2c6a2:	f004 f905 	bl	308b0 <memcpy>
		cont = cont->next;
   2c6a6:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   2c6a8:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   2c6aa:	44a8      	add	r8, r5
		offset = 0;
   2c6ac:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   2c6ae:	2f00      	cmp	r7, #0
   2c6b0:	d0dd      	beq.n	2c66e <log_msg_hexdump_data_op+0x58>
   2c6b2:	2e00      	cmp	r6, #0
   2c6b4:	d0db      	beq.n	2c66e <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   2c6b6:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2c6ba:	42bd      	cmp	r5, r7
   2c6bc:	bf28      	it	cs
   2c6be:	463d      	movcs	r5, r7
		if (put_op) {
   2c6c0:	f1b9 0f00 	cmp.w	r9, #0
   2c6c4:	d0e9      	beq.n	2c69a <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   2c6c6:	1930      	adds	r0, r6, r4
   2c6c8:	462a      	mov	r2, r5
   2c6ca:	4641      	mov	r1, r8
   2c6cc:	3004      	adds	r0, #4
   2c6ce:	f004 f8ef 	bl	308b0 <memcpy>
   2c6d2:	e7e8      	b.n	2c6a6 <log_msg_hexdump_data_op+0x90>

0002c6d4 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   2c6d4:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2c6d6:	f3bf 8f5b 	dmb	ish
   2c6da:	e850 3f00 	ldrex	r3, [r0]
   2c6de:	3301      	adds	r3, #1
   2c6e0:	e840 3200 	strex	r2, r3, [r0]
   2c6e4:	2a00      	cmp	r2, #0
   2c6e6:	d1f8      	bne.n	2c6da <log_msg_get+0x6>
   2c6e8:	f3bf 8f5b 	dmb	ish
}
   2c6ec:	4770      	bx	lr

0002c6ee <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   2c6ee:	7a40      	ldrb	r0, [r0, #9]
}
   2c6f0:	0900      	lsrs	r0, r0, #4
   2c6f2:	4770      	bx	lr

0002c6f4 <log_msg_arg_get>:
{
   2c6f4:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   2c6f6:	7a43      	ldrb	r3, [r0, #9]
   2c6f8:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2c6fc:	d20a      	bcs.n	2c714 <log_msg_arg_get+0x20>
   2c6fe:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2c700:	2a03      	cmp	r2, #3
   2c702:	d804      	bhi.n	2c70e <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   2c704:	3104      	adds	r1, #4
   2c706:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2c70a:	6840      	ldr	r0, [r0, #4]
   2c70c:	e003      	b.n	2c716 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   2c70e:	f7ff ff4a 	bl	2c5a6 <cont_arg_get>
   2c712:	e000      	b.n	2c716 <log_msg_arg_get+0x22>
		return 0;
   2c714:	2000      	movs	r0, #0
}
   2c716:	bd08      	pop	{r3, pc}

0002c718 <log_msg_str_get>:
}
   2c718:	6900      	ldr	r0, [r0, #16]
   2c71a:	4770      	bx	lr

0002c71c <log_msg_put>:
{
   2c71c:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   2c71e:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2c720:	f3bf 8f5b 	dmb	ish
   2c724:	e853 2f00 	ldrex	r2, [r3]
   2c728:	3a01      	subs	r2, #1
   2c72a:	e843 2100 	strex	r1, r2, [r3]
   2c72e:	2900      	cmp	r1, #0
   2c730:	d1f8      	bne.n	2c724 <log_msg_put+0x8>
   2c732:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   2c736:	6843      	ldr	r3, [r0, #4]
   2c738:	b103      	cbz	r3, 2c73c <log_msg_put+0x20>
}
   2c73a:	bd08      	pop	{r3, pc}
		msg_free(msg);
   2c73c:	f7e7 fb0c 	bl	13d58 <msg_free>
}
   2c740:	e7fb      	b.n	2c73a <log_msg_put+0x1e>

0002c742 <msg_alloc>:
{
   2c742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c744:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2c746:	f7e7 faeb 	bl	13d20 <log_msg_chunk_alloc>
	if (msg != NULL) {
   2c74a:	4607      	mov	r7, r0
   2c74c:	b140      	cbz	r0, 2c760 <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   2c74e:	2301      	movs	r3, #1
   2c750:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2c752:	2200      	movs	r2, #0
   2c754:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   2c756:	f04f 0300 	mov.w	r3, #0
   2c75a:	f362 0300 	bfi	r3, r2, #0, #1
   2c75e:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2c760:	b1f7      	cbz	r7, 2c7a0 <msg_alloc+0x5e>
   2c762:	2d03      	cmp	r5, #3
   2c764:	d91c      	bls.n	2c7a0 <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   2c766:	7a7b      	ldrb	r3, [r7, #9]
   2c768:	f36f 1307 	bfc	r3, #4, #4
   2c76c:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   2c76e:	7a3b      	ldrb	r3, [r7, #8]
   2c770:	f043 0302 	orr.w	r3, r3, #2
   2c774:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   2c776:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   2c778:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   2c77c:	2300      	movs	r3, #0
   2c77e:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   2c780:	2d00      	cmp	r5, #0
   2c782:	dd0d      	ble.n	2c7a0 <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2c784:	f7e7 facc 	bl	13d20 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2c788:	4604      	mov	r4, r0
   2c78a:	b128      	cbz	r0, 2c798 <msg_alloc+0x56>
		*next = cont;
   2c78c:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   2c78e:	2300      	movs	r3, #0
   2c790:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   2c792:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   2c794:	3d07      	subs	r5, #7
   2c796:	e7f3      	b.n	2c780 <msg_alloc+0x3e>
			msg_free(msg);
   2c798:	4638      	mov	r0, r7
   2c79a:	f7e7 fadd 	bl	13d58 <msg_free>
			return NULL;
   2c79e:	4627      	mov	r7, r4
}
   2c7a0:	4638      	mov	r0, r7
   2c7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c7a4 <log_msg_hexdump_create>:
{
   2c7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c7a8:	4606      	mov	r6, r0
   2c7aa:	460f      	mov	r7, r1
   2c7ac:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   2c7ae:	f643 75ff 	movw	r5, #16383	; 0x3fff
   2c7b2:	4295      	cmp	r5, r2
   2c7b4:	bf28      	it	cs
   2c7b6:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   2c7b8:	f7e7 fab2 	bl	13d20 <log_msg_chunk_alloc>
	if (msg == NULL) {
   2c7bc:	4681      	mov	r9, r0
   2c7be:	2800      	cmp	r0, #0
   2c7c0:	d041      	beq.n	2c846 <log_msg_hexdump_create+0xa2>
	msg->hdr.ref_cnt = 1;
   2c7c2:	2301      	movs	r3, #1
   2c7c4:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   2c7c6:	7a03      	ldrb	r3, [r0, #8]
   2c7c8:	f043 0301 	orr.w	r3, r3, #1
   2c7cc:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   2c7ce:	8903      	ldrh	r3, [r0, #8]
   2c7d0:	f365 038f 	bfi	r3, r5, #2, #14
   2c7d4:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   2c7d6:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2c7d8:	2c0c      	cmp	r4, #12
   2c7da:	d923      	bls.n	2c824 <log_msg_hexdump_create+0x80>
   2c7dc:	683a      	ldr	r2, [r7, #0]
   2c7de:	687b      	ldr	r3, [r7, #4]
   2c7e0:	6182      	str	r2, [r0, #24]
   2c7e2:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   2c7e4:	2300      	movs	r3, #0
   2c7e6:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   2c7e8:	7a03      	ldrb	r3, [r0, #8]
   2c7ea:	f043 0302 	orr.w	r3, r3, #2
   2c7ee:	7203      	strb	r3, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2c7f0:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2c7f2:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   2c7f4:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   2c7f8:	b32d      	cbz	r5, 2c846 <log_msg_hexdump_create+0xa2>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2c7fa:	f7e7 fa91 	bl	13d20 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2c7fe:	4604      	mov	r4, r0
   2c800:	b1e8      	cbz	r0, 2c83e <log_msg_hexdump_create+0x9a>
		*prev_cont = cont;
   2c802:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   2c806:	2300      	movs	r3, #0
   2c808:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   2c80a:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   2c80c:	462e      	mov	r6, r5
   2c80e:	2d1c      	cmp	r5, #28
   2c810:	bf28      	it	cs
   2c812:	261c      	movcs	r6, #28
   2c814:	4632      	mov	r2, r6
   2c816:	4639      	mov	r1, r7
   2c818:	3004      	adds	r0, #4
   2c81a:	f004 f849 	bl	308b0 <memcpy>
		data += chunk_length;
   2c81e:	4437      	add	r7, r6
		length -= chunk_length;
   2c820:	1bad      	subs	r5, r5, r6
   2c822:	e7e9      	b.n	2c7f8 <log_msg_hexdump_create+0x54>
   2c824:	462a      	mov	r2, r5
   2c826:	4639      	mov	r1, r7
   2c828:	3014      	adds	r0, #20
   2c82a:	f004 f841 	bl	308b0 <memcpy>
		msg->hdr.params.generic.ext = 0;
   2c82e:	f899 3008 	ldrb.w	r3, [r9, #8]
   2c832:	f36f 0341 	bfc	r3, #1, #1
   2c836:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   2c83a:	2500      	movs	r5, #0
   2c83c:	e7da      	b.n	2c7f4 <log_msg_hexdump_create+0x50>
			msg_free(msg);
   2c83e:	4648      	mov	r0, r9
   2c840:	f7e7 fa8a 	bl	13d58 <msg_free>
			return NULL;
   2c844:	46a1      	mov	r9, r4
}
   2c846:	4648      	mov	r0, r9
   2c848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002c84c <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2c84c:	b510      	push	{r4, lr}
   2c84e:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2c850:	2400      	movs	r4, #0
   2c852:	9400      	str	r4, [sp, #0]
   2c854:	f7ff fedf 	bl	2c616 <log_msg_hexdump_data_op>
}
   2c858:	b002      	add	sp, #8
   2c85a:	bd10      	pop	{r4, pc}

0002c85c <buffer_write>:
{
   2c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c85e:	4607      	mov	r7, r0
   2c860:	460d      	mov	r5, r1
   2c862:	4614      	mov	r4, r2
   2c864:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   2c866:	4632      	mov	r2, r6
   2c868:	4621      	mov	r1, r4
   2c86a:	4628      	mov	r0, r5
   2c86c:	47b8      	blx	r7
		buf += processed;
   2c86e:	4405      	add	r5, r0
	} while (len != 0);
   2c870:	1a24      	subs	r4, r4, r0
   2c872:	d1f8      	bne.n	2c866 <buffer_write+0xa>
}
   2c874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c876 <color_prefix>:
{
   2c876:	b508      	push	{r3, lr}
   2c878:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   2c87a:	2201      	movs	r2, #1
   2c87c:	f7e7 fb2e 	bl	13edc <color_print>
}
   2c880:	bd08      	pop	{r3, pc}

0002c882 <color_postfix>:
{
   2c882:	b508      	push	{r3, lr}
   2c884:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   2c886:	2200      	movs	r2, #0
   2c888:	f7e7 fb28 	bl	13edc <color_print>
}
   2c88c:	bd08      	pop	{r3, pc}

0002c88e <postfix_print>:
{
   2c88e:	b538      	push	{r3, r4, r5, lr}
   2c890:	4605      	mov	r5, r0
   2c892:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   2c894:	f001 0101 	and.w	r1, r1, #1
   2c898:	f7ff fff3 	bl	2c882 <color_postfix>
	newline_print(output, flags);
   2c89c:	4621      	mov	r1, r4
   2c89e:	4628      	mov	r0, r5
   2c8a0:	f7e7 fb32 	bl	13f08 <newline_print>
}
   2c8a4:	bd38      	pop	{r3, r4, r5, pc}

0002c8a6 <std_print>:
{
   2c8a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c8aa:	b08e      	sub	sp, #56	; 0x38
   2c8ac:	af0e      	add	r7, sp, #56	; 0x38
   2c8ae:	4606      	mov	r6, r0
   2c8b0:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   2c8b2:	f7ff ff31 	bl	2c718 <log_msg_str_get>
   2c8b6:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   2c8b8:	4630      	mov	r0, r6
   2c8ba:	f7ff ff18 	bl	2c6ee <log_msg_nargs_get>
   2c8be:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2c8c0:	0083      	lsls	r3, r0, #2
   2c8c2:	3307      	adds	r3, #7
   2c8c4:	f023 0307 	bic.w	r3, r3, #7
   2c8c8:	ebad 0d03 	sub.w	sp, sp, r3
   2c8cc:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2c8ce:	2400      	movs	r4, #0
   2c8d0:	4544      	cmp	r4, r8
   2c8d2:	d207      	bcs.n	2c8e4 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   2c8d4:	4621      	mov	r1, r4
   2c8d6:	4630      	mov	r0, r6
   2c8d8:	f7ff ff0c 	bl	2c6f4 <log_msg_arg_get>
   2c8dc:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   2c8e0:	3401      	adds	r4, #1
   2c8e2:	e7f5      	b.n	2c8d0 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   2c8e4:	4630      	mov	r0, r6
   2c8e6:	f7ff ff02 	bl	2c6ee <log_msg_nargs_get>
   2c8ea:	280f      	cmp	r0, #15
   2c8ec:	d815      	bhi.n	2c91a <std_print+0x74>
   2c8ee:	e8df f010 	tbh	[pc, r0, lsl #1]
   2c8f2:	0010      	.short	0x0010
   2c8f4:	001d0017 	.word	0x001d0017
   2c8f8:	002d0024 	.word	0x002d0024
   2c8fc:	00450038 	.word	0x00450038
   2c900:	00650054 	.word	0x00650054
   2c904:	008d0078 	.word	0x008d0078
   2c908:	00bd00a4 	.word	0x00bd00a4
   2c90c:	00f500d8 	.word	0x00f500d8
   2c910:	0114      	.short	0x0114
		print_formatted(output, str);
   2c912:	4651      	mov	r1, sl
   2c914:	4648      	mov	r0, r9
   2c916:	f7e7 fa89 	bl	13e2c <print_formatted>
}
   2c91a:	46bd      	mov	sp, r7
   2c91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   2c920:	682a      	ldr	r2, [r5, #0]
   2c922:	4651      	mov	r1, sl
   2c924:	4648      	mov	r0, r9
   2c926:	f7e7 fa81 	bl	13e2c <print_formatted>
		break;
   2c92a:	e7f6      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   2c92c:	686b      	ldr	r3, [r5, #4]
   2c92e:	682a      	ldr	r2, [r5, #0]
   2c930:	4651      	mov	r1, sl
   2c932:	4648      	mov	r0, r9
   2c934:	f7e7 fa7a 	bl	13e2c <print_formatted>
		break;
   2c938:	e7ef      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   2c93a:	686b      	ldr	r3, [r5, #4]
   2c93c:	682a      	ldr	r2, [r5, #0]
   2c93e:	68a9      	ldr	r1, [r5, #8]
   2c940:	9100      	str	r1, [sp, #0]
   2c942:	4651      	mov	r1, sl
   2c944:	4648      	mov	r0, r9
   2c946:	f7e7 fa71 	bl	13e2c <print_formatted>
		break;
   2c94a:	e7e6      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2c94c:	686b      	ldr	r3, [r5, #4]
   2c94e:	682a      	ldr	r2, [r5, #0]
   2c950:	68e9      	ldr	r1, [r5, #12]
   2c952:	9101      	str	r1, [sp, #4]
   2c954:	68a9      	ldr	r1, [r5, #8]
   2c956:	9100      	str	r1, [sp, #0]
   2c958:	4651      	mov	r1, sl
   2c95a:	4648      	mov	r0, r9
   2c95c:	f7e7 fa66 	bl	13e2c <print_formatted>
		break;
   2c960:	e7db      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2c962:	686b      	ldr	r3, [r5, #4]
   2c964:	682a      	ldr	r2, [r5, #0]
   2c966:	6929      	ldr	r1, [r5, #16]
   2c968:	9102      	str	r1, [sp, #8]
   2c96a:	68e9      	ldr	r1, [r5, #12]
   2c96c:	9101      	str	r1, [sp, #4]
   2c96e:	68a9      	ldr	r1, [r5, #8]
   2c970:	9100      	str	r1, [sp, #0]
   2c972:	4651      	mov	r1, sl
   2c974:	4648      	mov	r0, r9
   2c976:	f7e7 fa59 	bl	13e2c <print_formatted>
		break;
   2c97a:	e7ce      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2c97c:	686b      	ldr	r3, [r5, #4]
   2c97e:	682a      	ldr	r2, [r5, #0]
   2c980:	6969      	ldr	r1, [r5, #20]
   2c982:	9103      	str	r1, [sp, #12]
   2c984:	6929      	ldr	r1, [r5, #16]
   2c986:	9102      	str	r1, [sp, #8]
   2c988:	68e9      	ldr	r1, [r5, #12]
   2c98a:	9101      	str	r1, [sp, #4]
   2c98c:	68a9      	ldr	r1, [r5, #8]
   2c98e:	9100      	str	r1, [sp, #0]
   2c990:	4651      	mov	r1, sl
   2c992:	4648      	mov	r0, r9
   2c994:	f7e7 fa4a 	bl	13e2c <print_formatted>
		break;
   2c998:	e7bf      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2c99a:	686b      	ldr	r3, [r5, #4]
   2c99c:	682a      	ldr	r2, [r5, #0]
   2c99e:	69a9      	ldr	r1, [r5, #24]
   2c9a0:	9104      	str	r1, [sp, #16]
   2c9a2:	6969      	ldr	r1, [r5, #20]
   2c9a4:	9103      	str	r1, [sp, #12]
   2c9a6:	6929      	ldr	r1, [r5, #16]
   2c9a8:	9102      	str	r1, [sp, #8]
   2c9aa:	68e9      	ldr	r1, [r5, #12]
   2c9ac:	9101      	str	r1, [sp, #4]
   2c9ae:	68a9      	ldr	r1, [r5, #8]
   2c9b0:	9100      	str	r1, [sp, #0]
   2c9b2:	4651      	mov	r1, sl
   2c9b4:	4648      	mov	r0, r9
   2c9b6:	f7e7 fa39 	bl	13e2c <print_formatted>
		break;
   2c9ba:	e7ae      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2c9bc:	686b      	ldr	r3, [r5, #4]
   2c9be:	682a      	ldr	r2, [r5, #0]
   2c9c0:	69e9      	ldr	r1, [r5, #28]
   2c9c2:	9105      	str	r1, [sp, #20]
   2c9c4:	69a9      	ldr	r1, [r5, #24]
   2c9c6:	9104      	str	r1, [sp, #16]
   2c9c8:	6969      	ldr	r1, [r5, #20]
   2c9ca:	9103      	str	r1, [sp, #12]
   2c9cc:	6929      	ldr	r1, [r5, #16]
   2c9ce:	9102      	str	r1, [sp, #8]
   2c9d0:	68e9      	ldr	r1, [r5, #12]
   2c9d2:	9101      	str	r1, [sp, #4]
   2c9d4:	68a9      	ldr	r1, [r5, #8]
   2c9d6:	9100      	str	r1, [sp, #0]
   2c9d8:	4651      	mov	r1, sl
   2c9da:	4648      	mov	r0, r9
   2c9dc:	f7e7 fa26 	bl	13e2c <print_formatted>
		break;
   2c9e0:	e79b      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2c9e2:	686b      	ldr	r3, [r5, #4]
   2c9e4:	682a      	ldr	r2, [r5, #0]
   2c9e6:	6a29      	ldr	r1, [r5, #32]
   2c9e8:	9106      	str	r1, [sp, #24]
   2c9ea:	69e9      	ldr	r1, [r5, #28]
   2c9ec:	9105      	str	r1, [sp, #20]
   2c9ee:	69a9      	ldr	r1, [r5, #24]
   2c9f0:	9104      	str	r1, [sp, #16]
   2c9f2:	6969      	ldr	r1, [r5, #20]
   2c9f4:	9103      	str	r1, [sp, #12]
   2c9f6:	6929      	ldr	r1, [r5, #16]
   2c9f8:	9102      	str	r1, [sp, #8]
   2c9fa:	68e9      	ldr	r1, [r5, #12]
   2c9fc:	9101      	str	r1, [sp, #4]
   2c9fe:	68a9      	ldr	r1, [r5, #8]
   2ca00:	9100      	str	r1, [sp, #0]
   2ca02:	4651      	mov	r1, sl
   2ca04:	4648      	mov	r0, r9
   2ca06:	f7e7 fa11 	bl	13e2c <print_formatted>
		break;
   2ca0a:	e786      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2ca0c:	686b      	ldr	r3, [r5, #4]
   2ca0e:	682a      	ldr	r2, [r5, #0]
   2ca10:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2ca12:	9107      	str	r1, [sp, #28]
   2ca14:	6a29      	ldr	r1, [r5, #32]
   2ca16:	9106      	str	r1, [sp, #24]
   2ca18:	69e9      	ldr	r1, [r5, #28]
   2ca1a:	9105      	str	r1, [sp, #20]
   2ca1c:	69a9      	ldr	r1, [r5, #24]
   2ca1e:	9104      	str	r1, [sp, #16]
   2ca20:	6969      	ldr	r1, [r5, #20]
   2ca22:	9103      	str	r1, [sp, #12]
   2ca24:	6929      	ldr	r1, [r5, #16]
   2ca26:	9102      	str	r1, [sp, #8]
   2ca28:	68e9      	ldr	r1, [r5, #12]
   2ca2a:	9101      	str	r1, [sp, #4]
   2ca2c:	68a9      	ldr	r1, [r5, #8]
   2ca2e:	9100      	str	r1, [sp, #0]
   2ca30:	4651      	mov	r1, sl
   2ca32:	4648      	mov	r0, r9
   2ca34:	f7e7 f9fa 	bl	13e2c <print_formatted>
		break;
   2ca38:	e76f      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2ca3a:	686b      	ldr	r3, [r5, #4]
   2ca3c:	682a      	ldr	r2, [r5, #0]
   2ca3e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2ca40:	9108      	str	r1, [sp, #32]
   2ca42:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2ca44:	9107      	str	r1, [sp, #28]
   2ca46:	6a29      	ldr	r1, [r5, #32]
   2ca48:	9106      	str	r1, [sp, #24]
   2ca4a:	69e9      	ldr	r1, [r5, #28]
   2ca4c:	9105      	str	r1, [sp, #20]
   2ca4e:	69a9      	ldr	r1, [r5, #24]
   2ca50:	9104      	str	r1, [sp, #16]
   2ca52:	6969      	ldr	r1, [r5, #20]
   2ca54:	9103      	str	r1, [sp, #12]
   2ca56:	6929      	ldr	r1, [r5, #16]
   2ca58:	9102      	str	r1, [sp, #8]
   2ca5a:	68e9      	ldr	r1, [r5, #12]
   2ca5c:	9101      	str	r1, [sp, #4]
   2ca5e:	68a9      	ldr	r1, [r5, #8]
   2ca60:	9100      	str	r1, [sp, #0]
   2ca62:	4651      	mov	r1, sl
   2ca64:	4648      	mov	r0, r9
   2ca66:	f7e7 f9e1 	bl	13e2c <print_formatted>
		break;
   2ca6a:	e756      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2ca6c:	686b      	ldr	r3, [r5, #4]
   2ca6e:	682a      	ldr	r2, [r5, #0]
   2ca70:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   2ca72:	9109      	str	r1, [sp, #36]	; 0x24
   2ca74:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2ca76:	9108      	str	r1, [sp, #32]
   2ca78:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2ca7a:	9107      	str	r1, [sp, #28]
   2ca7c:	6a29      	ldr	r1, [r5, #32]
   2ca7e:	9106      	str	r1, [sp, #24]
   2ca80:	69e9      	ldr	r1, [r5, #28]
   2ca82:	9105      	str	r1, [sp, #20]
   2ca84:	69a9      	ldr	r1, [r5, #24]
   2ca86:	9104      	str	r1, [sp, #16]
   2ca88:	6969      	ldr	r1, [r5, #20]
   2ca8a:	9103      	str	r1, [sp, #12]
   2ca8c:	6929      	ldr	r1, [r5, #16]
   2ca8e:	9102      	str	r1, [sp, #8]
   2ca90:	68e9      	ldr	r1, [r5, #12]
   2ca92:	9101      	str	r1, [sp, #4]
   2ca94:	68a9      	ldr	r1, [r5, #8]
   2ca96:	9100      	str	r1, [sp, #0]
   2ca98:	4651      	mov	r1, sl
   2ca9a:	4648      	mov	r0, r9
   2ca9c:	f7e7 f9c6 	bl	13e2c <print_formatted>
		break;
   2caa0:	e73b      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2caa2:	686b      	ldr	r3, [r5, #4]
   2caa4:	682a      	ldr	r2, [r5, #0]
   2caa6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2caa8:	910a      	str	r1, [sp, #40]	; 0x28
   2caaa:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   2caac:	9109      	str	r1, [sp, #36]	; 0x24
   2caae:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2cab0:	9108      	str	r1, [sp, #32]
   2cab2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2cab4:	9107      	str	r1, [sp, #28]
   2cab6:	6a29      	ldr	r1, [r5, #32]
   2cab8:	9106      	str	r1, [sp, #24]
   2caba:	69e9      	ldr	r1, [r5, #28]
   2cabc:	9105      	str	r1, [sp, #20]
   2cabe:	69a9      	ldr	r1, [r5, #24]
   2cac0:	9104      	str	r1, [sp, #16]
   2cac2:	6969      	ldr	r1, [r5, #20]
   2cac4:	9103      	str	r1, [sp, #12]
   2cac6:	6929      	ldr	r1, [r5, #16]
   2cac8:	9102      	str	r1, [sp, #8]
   2caca:	68e9      	ldr	r1, [r5, #12]
   2cacc:	9101      	str	r1, [sp, #4]
   2cace:	68a9      	ldr	r1, [r5, #8]
   2cad0:	9100      	str	r1, [sp, #0]
   2cad2:	4651      	mov	r1, sl
   2cad4:	4648      	mov	r0, r9
   2cad6:	f7e7 f9a9 	bl	13e2c <print_formatted>
		break;
   2cada:	e71e      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2cadc:	686b      	ldr	r3, [r5, #4]
   2cade:	682a      	ldr	r2, [r5, #0]
   2cae0:	6b69      	ldr	r1, [r5, #52]	; 0x34
   2cae2:	910b      	str	r1, [sp, #44]	; 0x2c
   2cae4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2cae6:	910a      	str	r1, [sp, #40]	; 0x28
   2cae8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   2caea:	9109      	str	r1, [sp, #36]	; 0x24
   2caec:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2caee:	9108      	str	r1, [sp, #32]
   2caf0:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2caf2:	9107      	str	r1, [sp, #28]
   2caf4:	6a29      	ldr	r1, [r5, #32]
   2caf6:	9106      	str	r1, [sp, #24]
   2caf8:	69e9      	ldr	r1, [r5, #28]
   2cafa:	9105      	str	r1, [sp, #20]
   2cafc:	69a9      	ldr	r1, [r5, #24]
   2cafe:	9104      	str	r1, [sp, #16]
   2cb00:	6969      	ldr	r1, [r5, #20]
   2cb02:	9103      	str	r1, [sp, #12]
   2cb04:	6929      	ldr	r1, [r5, #16]
   2cb06:	9102      	str	r1, [sp, #8]
   2cb08:	68e9      	ldr	r1, [r5, #12]
   2cb0a:	9101      	str	r1, [sp, #4]
   2cb0c:	68a9      	ldr	r1, [r5, #8]
   2cb0e:	9100      	str	r1, [sp, #0]
   2cb10:	4651      	mov	r1, sl
   2cb12:	4648      	mov	r0, r9
   2cb14:	f7e7 f98a 	bl	13e2c <print_formatted>
		break;
   2cb18:	e6ff      	b.n	2c91a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2cb1a:	686b      	ldr	r3, [r5, #4]
   2cb1c:	682a      	ldr	r2, [r5, #0]
   2cb1e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   2cb20:	910c      	str	r1, [sp, #48]	; 0x30
   2cb22:	6b69      	ldr	r1, [r5, #52]	; 0x34
   2cb24:	910b      	str	r1, [sp, #44]	; 0x2c
   2cb26:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2cb28:	910a      	str	r1, [sp, #40]	; 0x28
   2cb2a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   2cb2c:	9109      	str	r1, [sp, #36]	; 0x24
   2cb2e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2cb30:	9108      	str	r1, [sp, #32]
   2cb32:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2cb34:	9107      	str	r1, [sp, #28]
   2cb36:	6a29      	ldr	r1, [r5, #32]
   2cb38:	9106      	str	r1, [sp, #24]
   2cb3a:	69e9      	ldr	r1, [r5, #28]
   2cb3c:	9105      	str	r1, [sp, #20]
   2cb3e:	69a9      	ldr	r1, [r5, #24]
   2cb40:	9104      	str	r1, [sp, #16]
   2cb42:	6969      	ldr	r1, [r5, #20]
   2cb44:	9103      	str	r1, [sp, #12]
   2cb46:	6929      	ldr	r1, [r5, #16]
   2cb48:	9102      	str	r1, [sp, #8]
   2cb4a:	68e9      	ldr	r1, [r5, #12]
   2cb4c:	9101      	str	r1, [sp, #4]
   2cb4e:	68a9      	ldr	r1, [r5, #8]
   2cb50:	9100      	str	r1, [sp, #0]
   2cb52:	4651      	mov	r1, sl
   2cb54:	4648      	mov	r0, r9
   2cb56:	f7e7 f969 	bl	13e2c <print_formatted>
}
   2cb5a:	e6de      	b.n	2c91a <std_print+0x74>

0002cb5c <log_output_flush>:
{
   2cb5c:	b510      	push	{r4, lr}
   2cb5e:	4604      	mov	r4, r0
		     output->control_block->offset,
   2cb60:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   2cb62:	6853      	ldr	r3, [r2, #4]
   2cb64:	6812      	ldr	r2, [r2, #0]
   2cb66:	6881      	ldr	r1, [r0, #8]
   2cb68:	6800      	ldr	r0, [r0, #0]
   2cb6a:	f7ff fe77 	bl	2c85c <buffer_write>
	output->control_block->offset = 0;
   2cb6e:	6863      	ldr	r3, [r4, #4]
   2cb70:	2200      	movs	r2, #0
   2cb72:	601a      	str	r2, [r3, #0]
}
   2cb74:	bd10      	pop	{r4, pc}

0002cb76 <log_output_msg_process>:
{
   2cb76:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cb78:	b085      	sub	sp, #20
   2cb7a:	4606      	mov	r6, r0
   2cb7c:	460c      	mov	r4, r1
   2cb7e:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2cb80:	7a0b      	ldrb	r3, [r1, #8]
   2cb82:	f083 0301 	eor.w	r3, r3, #1
   2cb86:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   2cb8a:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   2cb8c:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   2cb8e:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   2cb92:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   2cb94:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   2cb98:	f011 0507 	ands.w	r5, r1, #7
   2cb9c:	d10f      	bne.n	2cbbe <log_output_msg_process+0x48>
   2cb9e:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2cba0:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   2cba2:	f013 0f01 	tst.w	r3, #1
   2cba6:	d014      	beq.n	2cbd2 <log_output_msg_process+0x5c>
	} else if (raw_string) {
   2cba8:	b9c5      	cbnz	r5, 2cbdc <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   2cbaa:	4631      	mov	r1, r6
   2cbac:	4620      	mov	r0, r4
   2cbae:	f7e7 faf1 	bl	14194 <raw_string_print>
	if (!raw_string) {
   2cbb2:	b9cd      	cbnz	r5, 2cbe8 <log_output_msg_process+0x72>
	log_output_flush(output);
   2cbb4:	4630      	mov	r0, r6
   2cbb6:	f7ff ffd1 	bl	2cb5c <log_output_flush>
}
   2cbba:	b005      	add	sp, #20
   2cbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   2cbbe:	9002      	str	r0, [sp, #8]
   2cbc0:	f8cd c004 	str.w	ip, [sp, #4]
   2cbc4:	9500      	str	r5, [sp, #0]
   2cbc6:	4639      	mov	r1, r7
   2cbc8:	4630      	mov	r0, r6
   2cbca:	f7e7 fa49 	bl	14060 <prefix_print>
   2cbce:	4602      	mov	r2, r0
   2cbd0:	e7e6      	b.n	2cba0 <log_output_msg_process+0x2a>
		std_print(msg, output);
   2cbd2:	4631      	mov	r1, r6
   2cbd4:	4620      	mov	r0, r4
   2cbd6:	f7ff fe66 	bl	2c8a6 <std_print>
   2cbda:	e7ea      	b.n	2cbb2 <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   2cbdc:	463b      	mov	r3, r7
   2cbde:	4631      	mov	r1, r6
   2cbe0:	4620      	mov	r0, r4
   2cbe2:	f7e7 fa79 	bl	140d8 <hexdump_print>
   2cbe6:	e7e4      	b.n	2cbb2 <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   2cbe8:	462a      	mov	r2, r5
   2cbea:	4639      	mov	r1, r7
   2cbec:	4630      	mov	r0, r6
   2cbee:	f7ff fe4e 	bl	2c88e <postfix_print>
   2cbf2:	e7df      	b.n	2cbb4 <log_output_msg_process+0x3e>

0002cbf4 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2cbf4:	2200      	movs	r2, #0
   2cbf6:	6002      	str	r2, [r0, #0]
   2cbf8:	6042      	str	r2, [r0, #4]
   2cbfa:	6082      	str	r2, [r0, #8]
}
   2cbfc:	4770      	bx	lr

0002cbfe <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   2cbfe:	428b      	cmp	r3, r1
   2cc00:	d808      	bhi.n	2cc14 <_copy+0x16>
{
   2cc02:	b538      	push	{r3, r4, r5, lr}
   2cc04:	4615      	mov	r5, r2
   2cc06:	461c      	mov	r4, r3
   2cc08:	461a      	mov	r2, r3
   2cc0a:	4629      	mov	r1, r5
   2cc0c:	f003 fe50 	bl	308b0 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
   2cc10:	4620      	mov	r0, r4
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2cc12:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2cc14:	2000      	movs	r0, #0
}
   2cc16:	4770      	bx	lr

0002cc18 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2cc18:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   2cc1a:	f003 fe71 	bl	30900 <memset>
	(void)memset(to, val, len);
}
   2cc1e:	bd08      	pop	{r3, pc}

0002cc20 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2cc20:	09c3      	lsrs	r3, r0, #7
   2cc22:	005a      	lsls	r2, r3, #1
   2cc24:	4413      	add	r3, r2
   2cc26:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2cc2a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2cc2e:	b2c0      	uxtb	r0, r0
   2cc30:	4770      	bx	lr

0002cc32 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2cc32:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2cc34:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2cc36:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   2cc3a:	2a00      	cmp	r2, #0
   2cc3c:	db03      	blt.n	2cc46 <gf_double+0x14>
   2cc3e:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   2cc40:	f100 020f 	add.w	r2, r0, #15
   2cc44:	e004      	b.n	2cc50 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2cc46:	2487      	movs	r4, #135	; 0x87
   2cc48:	e7fa      	b.n	2cc40 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   2cc4a:	f813 0901 	ldrb.w	r0, [r3], #-1
   2cc4e:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   2cc50:	7818      	ldrb	r0, [r3, #0]
   2cc52:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   2cc56:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   2cc5a:	428b      	cmp	r3, r1
   2cc5c:	d1f5      	bne.n	2cc4a <gf_double+0x18>
	}
}
   2cc5e:	bc10      	pop	{r4}
   2cc60:	4770      	bx	lr

0002cc62 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   2cc62:	b130      	cbz	r0, 2cc72 <tc_cmac_erase+0x10>
{
   2cc64:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2cc66:	2258      	movs	r2, #88	; 0x58
   2cc68:	2100      	movs	r1, #0
   2cc6a:	f7ff ffd5 	bl	2cc18 <_set>

	return TC_CRYPTO_SUCCESS;
   2cc6e:	2001      	movs	r0, #1
}
   2cc70:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   2cc72:	2000      	movs	r0, #0
}
   2cc74:	4770      	bx	lr

0002cc76 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2cc76:	b1a0      	cbz	r0, 2cca2 <tc_cmac_init+0x2c>
{
   2cc78:	b510      	push	{r4, lr}
   2cc7a:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2cc7c:	2210      	movs	r2, #16
   2cc7e:	2100      	movs	r1, #0
   2cc80:	f7ff ffca 	bl	2cc18 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2cc84:	2210      	movs	r2, #16
   2cc86:	2100      	movs	r1, #0
   2cc88:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2cc8c:	f7ff ffc4 	bl	2cc18 <_set>
	s->leftover_offset = 0;
   2cc90:	2300      	movs	r3, #0
   2cc92:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2cc94:	2200      	movs	r2, #0
   2cc96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2cc9a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   2cc9e:	2001      	movs	r0, #1
}
   2cca0:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2cca2:	2000      	movs	r0, #0
}
   2cca4:	4770      	bx	lr

0002cca6 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   2cca6:	b338      	cbz	r0, 2ccf8 <tc_cmac_setup+0x52>
{
   2cca8:	b570      	push	{r4, r5, r6, lr}
   2ccaa:	460d      	mov	r5, r1
   2ccac:	4616      	mov	r6, r2
   2ccae:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   2ccb0:	b321      	cbz	r1, 2ccfc <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   2ccb2:	2258      	movs	r2, #88	; 0x58
   2ccb4:	2100      	movs	r1, #0
   2ccb6:	f7ff ffaf 	bl	2cc18 <_set>
	s->sched = sched;
   2ccba:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2ccbc:	4629      	mov	r1, r5
   2ccbe:	4630      	mov	r0, r6
   2ccc0:	f7e7 fcda 	bl	14678 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2ccc4:	2210      	movs	r2, #16
   2ccc6:	2100      	movs	r1, #0
   2ccc8:	4620      	mov	r0, r4
   2ccca:	f7ff ffa5 	bl	2cc18 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2ccce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2ccd0:	4621      	mov	r1, r4
   2ccd2:	4620      	mov	r0, r4
   2ccd4:	f7e7 fd2e 	bl	14734 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2ccd8:	f104 0510 	add.w	r5, r4, #16
   2ccdc:	4621      	mov	r1, r4
   2ccde:	4628      	mov	r0, r5
   2cce0:	f7ff ffa7 	bl	2cc32 <gf_double>
	gf_double (s->K2, s->K1);
   2cce4:	4629      	mov	r1, r5
   2cce6:	f104 0020 	add.w	r0, r4, #32
   2ccea:	f7ff ffa2 	bl	2cc32 <gf_double>
	tc_cmac_init(s);
   2ccee:	4620      	mov	r0, r4
   2ccf0:	f7ff ffc1 	bl	2cc76 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2ccf4:	2001      	movs	r0, #1
}
   2ccf6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2ccf8:	2000      	movs	r0, #0
}
   2ccfa:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2ccfc:	2000      	movs	r0, #0
   2ccfe:	e7fa      	b.n	2ccf6 <tc_cmac_setup+0x50>

0002cd00 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2cd00:	2800      	cmp	r0, #0
   2cd02:	d062      	beq.n	2cdca <tc_cmac_update+0xca>
{
   2cd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cd08:	460e      	mov	r6, r1
   2cd0a:	4617      	mov	r7, r2
   2cd0c:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2cd0e:	2a00      	cmp	r2, #0
   2cd10:	d05d      	beq.n	2cdce <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2cd12:	2900      	cmp	r1, #0
   2cd14:	d05e      	beq.n	2cdd4 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2cd16:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2cd1a:	ea50 0301 	orrs.w	r3, r0, r1
   2cd1e:	d05b      	beq.n	2cdd8 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2cd20:	f110 32ff 	adds.w	r2, r0, #4294967295
   2cd24:	f141 33ff 	adc.w	r3, r1, #4294967295
   2cd28:	6522      	str	r2, [r4, #80]	; 0x50
   2cd2a:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   2cd2c:	6c65      	ldr	r5, [r4, #68]	; 0x44
   2cd2e:	b3a5      	cbz	r5, 2cd9a <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2cd30:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   2cd34:	4547      	cmp	r7, r8
   2cd36:	d30d      	bcc.n	2cd54 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2cd38:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2cd3c:	4643      	mov	r3, r8
   2cd3e:	4632      	mov	r2, r6
   2cd40:	4641      	mov	r1, r8
   2cd42:	4420      	add	r0, r4
   2cd44:	f7ff ff5b 	bl	2cbfe <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2cd48:	3d10      	subs	r5, #16
   2cd4a:	442f      	add	r7, r5
		data += remaining_space;
   2cd4c:	4446      	add	r6, r8
		s->leftover_offset = 0;
   2cd4e:	2300      	movs	r3, #0
   2cd50:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cd52:	e013      	b.n	2cd7c <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2cd54:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2cd58:	463b      	mov	r3, r7
   2cd5a:	4632      	mov	r2, r6
   2cd5c:	4639      	mov	r1, r7
   2cd5e:	4420      	add	r0, r4
   2cd60:	f7ff ff4d 	bl	2cbfe <_copy>
			s->leftover_offset += data_length;
   2cd64:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2cd66:	443b      	add	r3, r7
   2cd68:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2cd6a:	2001      	movs	r0, #1
   2cd6c:	e030      	b.n	2cdd0 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   2cd6e:	18e2      	adds	r2, r4, r3
   2cd70:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2cd74:	5ce1      	ldrb	r1, [r4, r3]
   2cd76:	404a      	eors	r2, r1
   2cd78:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cd7a:	3301      	adds	r3, #1
   2cd7c:	2b0f      	cmp	r3, #15
   2cd7e:	d9f6      	bls.n	2cd6e <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2cd80:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2cd82:	4621      	mov	r1, r4
   2cd84:	4620      	mov	r0, r4
   2cd86:	f7e7 fcd5 	bl	14734 <tc_aes_encrypt>
   2cd8a:	e006      	b.n	2cd9a <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2cd8c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2cd8e:	4621      	mov	r1, r4
   2cd90:	4620      	mov	r0, r4
   2cd92:	f7e7 fccf 	bl	14734 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2cd96:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2cd98:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   2cd9a:	2f10      	cmp	r7, #16
   2cd9c:	d908      	bls.n	2cdb0 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cd9e:	2300      	movs	r3, #0
   2cda0:	2b0f      	cmp	r3, #15
   2cda2:	d8f3      	bhi.n	2cd8c <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   2cda4:	5cf0      	ldrb	r0, [r6, r3]
   2cda6:	5ce5      	ldrb	r5, [r4, r3]
   2cda8:	4068      	eors	r0, r5
   2cdaa:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cdac:	3301      	adds	r3, #1
   2cdae:	e7f7      	b.n	2cda0 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   2cdb0:	b90f      	cbnz	r7, 2cdb6 <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2cdb2:	2001      	movs	r0, #1
   2cdb4:	e00c      	b.n	2cdd0 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   2cdb6:	463b      	mov	r3, r7
   2cdb8:	4632      	mov	r2, r6
   2cdba:	4639      	mov	r1, r7
   2cdbc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2cdc0:	f7ff ff1d 	bl	2cbfe <_copy>
		s->leftover_offset = data_length;
   2cdc4:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2cdc6:	2001      	movs	r0, #1
   2cdc8:	e002      	b.n	2cdd0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   2cdca:	2000      	movs	r0, #0
}
   2cdcc:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   2cdce:	2001      	movs	r0, #1
}
   2cdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2cdd4:	2000      	movs	r0, #0
   2cdd6:	e7fb      	b.n	2cdd0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   2cdd8:	2000      	movs	r0, #0
   2cdda:	e7f9      	b.n	2cdd0 <tc_cmac_update+0xd0>

0002cddc <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2cddc:	b370      	cbz	r0, 2ce3c <tc_cmac_final+0x60>
{
   2cdde:	b538      	push	{r3, r4, r5, lr}
   2cde0:	460c      	mov	r4, r1
   2cde2:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2cde4:	b361      	cbz	r1, 2ce40 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2cde6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2cde8:	2a10      	cmp	r2, #16
   2cdea:	d10d      	bne.n	2ce08 <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2cdec:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2cdee:	2300      	movs	r3, #0
   2cdf0:	2b0f      	cmp	r3, #15
   2cdf2:	d819      	bhi.n	2ce28 <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2cdf4:	18e2      	adds	r2, r4, r3
   2cdf6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2cdfa:	5cc8      	ldrb	r0, [r1, r3]
   2cdfc:	4050      	eors	r0, r2
   2cdfe:	5ce2      	ldrb	r2, [r4, r3]
   2ce00:	4042      	eors	r2, r0
   2ce02:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ce04:	3301      	adds	r3, #1
   2ce06:	e7f3      	b.n	2cdf0 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2ce08:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2ce0c:	f1c2 0210 	rsb	r2, r2, #16
   2ce10:	2100      	movs	r1, #0
   2ce12:	4420      	add	r0, r4
   2ce14:	f7ff ff00 	bl	2cc18 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2ce18:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2ce1a:	4423      	add	r3, r4
   2ce1c:	2280      	movs	r2, #128	; 0x80
   2ce1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2ce22:	f104 0120 	add.w	r1, r4, #32
   2ce26:	e7e2      	b.n	2cdee <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2ce28:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2ce2a:	4621      	mov	r1, r4
   2ce2c:	4628      	mov	r0, r5
   2ce2e:	f7e7 fc81 	bl	14734 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2ce32:	4620      	mov	r0, r4
   2ce34:	f7ff ff15 	bl	2cc62 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2ce38:	2001      	movs	r0, #1
}
   2ce3a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2ce3c:	2000      	movs	r0, #0
}
   2ce3e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2ce40:	2000      	movs	r0, #0
   2ce42:	e7fa      	b.n	2ce3a <tc_cmac_final+0x5e>

0002ce44 <abort_function>:
{
   2ce44:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2ce46:	2000      	movs	r0, #0
   2ce48:	f7e6 f9de 	bl	13208 <sys_reboot>

0002ce4c <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2ce4c:	b538      	push	{r3, r4, r5, lr}
   2ce4e:	4604      	mov	r4, r0

	if (esf != NULL) {
   2ce50:	460d      	mov	r5, r1
   2ce52:	b111      	cbz	r1, 2ce5a <z_arm_fatal_error+0xe>
		esf_dump(esf);
   2ce54:	4608      	mov	r0, r1
   2ce56:	f7e8 f907 	bl	15068 <esf_dump>
	}
	z_fatal_error(reason, esf);
   2ce5a:	4629      	mov	r1, r5
   2ce5c:	4620      	mov	r0, r4
   2ce5e:	f7f6 fa89 	bl	23374 <z_fatal_error>
}
   2ce62:	bd38      	pop	{r3, r4, r5, pc}

0002ce64 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2ce64:	b508      	push	{r3, lr}
   2ce66:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2ce68:	6800      	ldr	r0, [r0, #0]
   2ce6a:	f7ff ffef 	bl	2ce4c <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   2ce6e:	bd08      	pop	{r3, pc}

0002ce70 <z_irq_spurious>:
{
   2ce70:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2ce72:	2100      	movs	r1, #0
   2ce74:	2001      	movs	r0, #1
   2ce76:	f7ff ffe9 	bl	2ce4c <z_arm_fatal_error>
}
   2ce7a:	bd08      	pop	{r3, pc}

0002ce7c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2ce7c:	b508      	push	{r3, lr}
	handler();
   2ce7e:	f7e8 f9bd 	bl	151fc <z_SysNmiOnReset>
	z_arm_int_exit();
   2ce82:	f7e8 fab9 	bl	153f8 <z_arm_exc_exit>
}
   2ce86:	bd08      	pop	{r3, pc}

0002ce88 <memory_fault_recoverable>:
}
   2ce88:	2000      	movs	r0, #0
   2ce8a:	4770      	bx	lr

0002ce8c <fault_handle>:
{
   2ce8c:	b508      	push	{r3, lr}
	*recoverable = false;
   2ce8e:	2300      	movs	r3, #0
   2ce90:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   2ce92:	1ecb      	subs	r3, r1, #3
   2ce94:	2b09      	cmp	r3, #9
   2ce96:	d81a      	bhi.n	2cece <fault_handle+0x42>
   2ce98:	e8df f003 	tbb	[pc, r3]
   2ce9c:	110d0905 	.word	0x110d0905
   2cea0:	19191919 	.word	0x19191919
   2cea4:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   2cea6:	4611      	mov	r1, r2
   2cea8:	f7e8 fd58 	bl	1595c <hard_fault>
}
   2ceac:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2ceae:	2100      	movs	r1, #0
   2ceb0:	f7e8 fc54 	bl	1575c <mem_manage_fault>
		break;
   2ceb4:	e7fa      	b.n	2ceac <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   2ceb6:	2100      	movs	r1, #0
   2ceb8:	f7e8 fb78 	bl	155ac <bus_fault>
		break;
   2cebc:	e7f6      	b.n	2ceac <fault_handle+0x20>
		reason = usage_fault(esf);
   2cebe:	f7e8 faa9 	bl	15414 <usage_fault>
		break;
   2cec2:	e7f3      	b.n	2ceac <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   2cec4:	4611      	mov	r1, r2
   2cec6:	f7e8 fb57 	bl	15578 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2ceca:	2000      	movs	r0, #0
		break;
   2cecc:	e7ee      	b.n	2ceac <fault_handle+0x20>
		reserved_exception(esf, fault);
   2cece:	f7e8 fe1d 	bl	15b0c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2ced2:	2000      	movs	r0, #0
	return reason;
   2ced4:	e7ea      	b.n	2ceac <fault_handle+0x20>

0002ced6 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   2ced6:	6843      	ldr	r3, [r0, #4]
   2ced8:	1e5a      	subs	r2, r3, #1
		&&
   2ceda:	4213      	tst	r3, r2
   2cedc:	d106      	bne.n	2ceec <mpu_partition_is_valid+0x16>
		&&
   2cede:	2b1f      	cmp	r3, #31
   2cee0:	d906      	bls.n	2cef0 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   2cee2:	6803      	ldr	r3, [r0, #0]
		&&
   2cee4:	421a      	tst	r2, r3
   2cee6:	d005      	beq.n	2cef4 <mpu_partition_is_valid+0x1e>
   2cee8:	2000      	movs	r0, #0
   2ceea:	4770      	bx	lr
   2ceec:	2000      	movs	r0, #0
   2ceee:	4770      	bx	lr
   2cef0:	2000      	movs	r0, #0
   2cef2:	4770      	bx	lr
   2cef4:	2001      	movs	r0, #1
}
   2cef6:	4770      	bx	lr

0002cef8 <mpu_configure_region>:
{
   2cef8:	b500      	push	{lr}
   2cefa:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   2cefc:	680b      	ldr	r3, [r1, #0]
   2cefe:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   2cf00:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2cf02:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   2cf04:	2b20      	cmp	r3, #32
   2cf06:	d912      	bls.n	2cf2e <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   2cf08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2cf0c:	d811      	bhi.n	2cf32 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2cf0e:	3b01      	subs	r3, #1
   2cf10:	fab3 f383 	clz	r3, r3
   2cf14:	f1c3 031f 	rsb	r3, r3, #31
   2cf18:	005b      	lsls	r3, r3, #1
   2cf1a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2cf1e:	4313      	orrs	r3, r2
   2cf20:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   2cf22:	a901      	add	r1, sp, #4
   2cf24:	f7e8 ff6e 	bl	15e04 <region_allocate_and_init>
}
   2cf28:	b005      	add	sp, #20
   2cf2a:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   2cf2e:	2308      	movs	r3, #8
   2cf30:	e7f5      	b.n	2cf1e <mpu_configure_region+0x26>
		return REGION_4G;
   2cf32:	233e      	movs	r3, #62	; 0x3e
   2cf34:	e7f3      	b.n	2cf1e <mpu_configure_region+0x26>

0002cf36 <_stdout_hook_default>:
}
   2cf36:	f04f 30ff 	mov.w	r0, #4294967295
   2cf3a:	4770      	bx	lr

0002cf3c <_stdin_hook_default>:
}
   2cf3c:	2000      	movs	r0, #0
   2cf3e:	4770      	bx	lr

0002cf40 <_read>:
{
   2cf40:	b508      	push	{r3, lr}
   2cf42:	4608      	mov	r0, r1
   2cf44:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2cf46:	f7e9 f8bd 	bl	160c4 <z_impl_zephyr_read_stdin>
}
   2cf4a:	bd08      	pop	{r3, pc}

0002cf4c <_write>:
{
   2cf4c:	b508      	push	{r3, lr}
   2cf4e:	4608      	mov	r0, r1
   2cf50:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2cf52:	f7e9 f8cd 	bl	160f0 <z_impl_zephyr_write_stdout>
}
   2cf56:	bd08      	pop	{r3, pc}

0002cf58 <_close>:
}
   2cf58:	f04f 30ff 	mov.w	r0, #4294967295
   2cf5c:	4770      	bx	lr

0002cf5e <_lseek>:
}
   2cf5e:	2000      	movs	r0, #0
   2cf60:	4770      	bx	lr

0002cf62 <_isatty>:
}
   2cf62:	2802      	cmp	r0, #2
   2cf64:	bfcc      	ite	gt
   2cf66:	2000      	movgt	r0, #0
   2cf68:	2001      	movle	r0, #1
   2cf6a:	4770      	bx	lr

0002cf6c <_fstat>:
	st->st_mode = S_IFCHR;
   2cf6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   2cf70:	604b      	str	r3, [r1, #4]
}
   2cf72:	2000      	movs	r0, #0
   2cf74:	4770      	bx	lr

0002cf76 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   2cf76:	b084      	sub	sp, #16
   2cf78:	ab04      	add	r3, sp, #16
   2cf7a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   2cf7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2cf82:	2b06      	cmp	r3, #6
   2cf84:	d001      	beq.n	2cf8a <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2cf86:	b004      	add	sp, #16
   2cf88:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2cf8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cf8e:	2201      	movs	r2, #1
   2cf90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2cf94:	f3bf 8f4f 	dsb	sy
        __WFE();
   2cf98:	bf20      	wfe
    while (true)
   2cf9a:	e7fd      	b.n	2cf98 <pm_power_state_set+0x22>

0002cf9c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2cf9c:	b084      	sub	sp, #16
   2cf9e:	ab04      	add	r3, sp, #16
   2cfa0:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2cfa4:	2300      	movs	r3, #0
   2cfa6:	f383 8811 	msr	BASEPRI, r3
   2cfaa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2cfae:	b004      	add	sp, #16
   2cfb0:	4770      	bx	lr

0002cfb2 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2cfb2:	b510      	push	{r4, lr}
   2cfb4:	b08a      	sub	sp, #40	; 0x28
   2cfb6:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   2cfb8:	a905      	add	r1, sp, #20
   2cfba:	f7e9 fa1f 	bl	163fc <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2cfbe:	4669      	mov	r1, sp
   2cfc0:	4620      	mov	r0, r4
   2cfc2:	f7e9 fa1b 	bl	163fc <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   2cfc6:	2210      	movs	r2, #16
   2cfc8:	f10d 0101 	add.w	r1, sp, #1
   2cfcc:	f10d 0015 	add.w	r0, sp, #21
   2cfd0:	f003 fc60 	bl	30894 <memcmp>
}
   2cfd4:	b00a      	add	sp, #40	; 0x28
   2cfd6:	bd10      	pop	{r4, pc}

0002cfd8 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2cfd8:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2cfda:	7803      	ldrb	r3, [r0, #0]
   2cfdc:	780a      	ldrb	r2, [r1, #0]
   2cfde:	4293      	cmp	r3, r2
   2cfe0:	d107      	bne.n	2cff2 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   2cfe2:	2b01      	cmp	r3, #1
   2cfe4:	d00c      	beq.n	2d000 <bt_uuid_cmp+0x28>
   2cfe6:	2b02      	cmp	r3, #2
   2cfe8:	d00e      	beq.n	2d008 <bt_uuid_cmp+0x30>
   2cfea:	b12b      	cbz	r3, 2cff8 <bt_uuid_cmp+0x20>
   2cfec:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2cff0:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   2cff2:	f7ff ffde 	bl	2cfb2 <uuid128_cmp>
   2cff6:	e7fb      	b.n	2cff0 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2cff8:	8840      	ldrh	r0, [r0, #2]
   2cffa:	884b      	ldrh	r3, [r1, #2]
   2cffc:	1ac0      	subs	r0, r0, r3
   2cffe:	e7f7      	b.n	2cff0 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2d000:	6840      	ldr	r0, [r0, #4]
   2d002:	684b      	ldr	r3, [r1, #4]
   2d004:	1ac0      	subs	r0, r0, r3
   2d006:	e7f3      	b.n	2cff0 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2d008:	2210      	movs	r2, #16
   2d00a:	3101      	adds	r1, #1
   2d00c:	3001      	adds	r0, #1
   2d00e:	f003 fc41 	bl	30894 <memcmp>
   2d012:	e7ed      	b.n	2cff0 <bt_uuid_cmp+0x18>

0002d014 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   2d014:	b470      	push	{r4, r5, r6}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2d016:	2a04      	cmp	r2, #4
   2d018:	d00f      	beq.n	2d03a <bt_uuid_create+0x26>
   2d01a:	2a10      	cmp	r2, #16
   2d01c:	d01c      	beq.n	2d058 <bt_uuid_create+0x44>
   2d01e:	2a02      	cmp	r2, #2
   2d020:	d002      	beq.n	2d028 <bt_uuid_create+0x14>
   2d022:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   2d024:	bc70      	pop	{r4, r5, r6}
   2d026:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_16;
   2d028:	2300      	movs	r3, #0
   2d02a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2d02c:	784a      	ldrb	r2, [r1, #1]
   2d02e:	780b      	ldrb	r3, [r1, #0]
   2d030:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2d034:	8043      	strh	r3, [r0, #2]
	return true;
   2d036:	2001      	movs	r0, #1
		break;
   2d038:	e7f4      	b.n	2d024 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   2d03a:	2301      	movs	r3, #1
   2d03c:	7003      	strb	r3, [r0, #0]
   2d03e:	78cc      	ldrb	r4, [r1, #3]
   2d040:	788a      	ldrb	r2, [r1, #2]
   2d042:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   2d046:	784d      	ldrb	r5, [r1, #1]
   2d048:	780a      	ldrb	r2, [r1, #0]
   2d04a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2d04e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2d052:	6042      	str	r2, [r0, #4]
	return true;
   2d054:	4618      	mov	r0, r3
		break;
   2d056:	e7e5      	b.n	2d024 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   2d058:	4603      	mov	r3, r0
   2d05a:	2202      	movs	r2, #2
   2d05c:	f803 2b01 	strb.w	r2, [r3], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d060:	680e      	ldr	r6, [r1, #0]
   2d062:	684d      	ldr	r5, [r1, #4]
   2d064:	688c      	ldr	r4, [r1, #8]
   2d066:	68ca      	ldr	r2, [r1, #12]
   2d068:	f8c0 6001 	str.w	r6, [r0, #1]
   2d06c:	605d      	str	r5, [r3, #4]
   2d06e:	609c      	str	r4, [r3, #8]
   2d070:	60da      	str	r2, [r3, #12]
	return true;
   2d072:	2001      	movs	r0, #1
   2d074:	e7d6      	b.n	2d024 <bt_uuid_create+0x10>

0002d076 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2d076:	b510      	push	{r4, lr}
   2d078:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2d07a:	2301      	movs	r3, #1
   2d07c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2d080:	2106      	movs	r1, #6
   2d082:	f7f3 f96d 	bl	20360 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2d086:	b918      	cbnz	r0, 2d090 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2d088:	79a3      	ldrb	r3, [r4, #6]
   2d08a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2d08e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2d090:	bd10      	pop	{r4, pc}

0002d092 <hci_disconn_complete_prio>:
{
   2d092:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2d094:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2d096:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2d09a:	781b      	ldrb	r3, [r3, #0]
   2d09c:	b103      	cbz	r3, 2d0a0 <hci_disconn_complete_prio+0xe>
}
   2d09e:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   2d0a0:	4620      	mov	r0, r4
   2d0a2:	f7ec fa07 	bl	194b4 <bt_conn_lookup_handle>
	if (!conn) {
   2d0a6:	4605      	mov	r5, r0
   2d0a8:	b130      	cbz	r0, 2d0b8 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2d0aa:	2101      	movs	r1, #1
   2d0ac:	f7ec fa0c 	bl	194c8 <bt_conn_set_state>
	bt_conn_unref(conn);
   2d0b0:	4628      	mov	r0, r5
   2d0b2:	f7ec f9c5 	bl	19440 <bt_conn_unref>
   2d0b6:	e7f2      	b.n	2d09e <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   2d0b8:	4620      	mov	r0, r4
   2d0ba:	f7e9 fa55 	bl	16568 <conn_handle_disconnected>
		return;
   2d0be:	e7ee      	b.n	2d09e <hci_disconn_complete_prio+0xc>

0002d0c0 <set_event_mask>:
{
   2d0c0:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   2d0c2:	2108      	movs	r1, #8
   2d0c4:	f640 4001 	movw	r0, #3073	; 0xc01
   2d0c8:	f7e9 ffa0 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   2d0cc:	b1b8      	cbz	r0, 2d0fe <set_event_mask+0x3e>
   2d0ce:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   2d0d0:	2108      	movs	r1, #8
   2d0d2:	4408      	add	r0, r1
   2d0d4:	f7ef fcf8 	bl	1cac8 <net_buf_simple_add>
	dst[0] = val;
   2d0d8:	2310      	movs	r3, #16
   2d0da:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   2d0dc:	2388      	movs	r3, #136	; 0x88
   2d0de:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   2d0e0:	2200      	movs	r2, #0
   2d0e2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   2d0e4:	2302      	movs	r3, #2
   2d0e6:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   2d0e8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   2d0ea:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   2d0ec:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   2d0ee:	2320      	movs	r3, #32
   2d0f0:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   2d0f2:	4621      	mov	r1, r4
   2d0f4:	f640 4001 	movw	r0, #3073	; 0xc01
   2d0f8:	f7e9 ffd8 	bl	170ac <bt_hci_cmd_send_sync>
}
   2d0fc:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   2d0fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d102:	e7fb      	b.n	2d0fc <set_event_mask+0x3c>

0002d104 <bt_hci_disconnect>:
{
   2d104:	b570      	push	{r4, r5, r6, lr}
   2d106:	4605      	mov	r5, r0
   2d108:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2d10a:	2103      	movs	r1, #3
   2d10c:	f240 4006 	movw	r0, #1030	; 0x406
   2d110:	f7e9 ff7c 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   2d114:	b168      	cbz	r0, 2d132 <bt_hci_disconnect+0x2e>
   2d116:	4606      	mov	r6, r0
   2d118:	2103      	movs	r1, #3
   2d11a:	3008      	adds	r0, #8
   2d11c:	f7ef fcd4 	bl	1cac8 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2d120:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   2d122:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2d124:	2200      	movs	r2, #0
   2d126:	4631      	mov	r1, r6
   2d128:	f240 4006 	movw	r0, #1030	; 0x406
   2d12c:	f7e9 ffbe 	bl	170ac <bt_hci_cmd_send_sync>
}
   2d130:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2d132:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d136:	e7fb      	b.n	2d130 <bt_hci_disconnect+0x2c>

0002d138 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2d138:	8802      	ldrh	r2, [r0, #0]
   2d13a:	8843      	ldrh	r3, [r0, #2]
   2d13c:	429a      	cmp	r2, r3
   2d13e:	d819      	bhi.n	2d174 <bt_le_conn_params_valid+0x3c>
   2d140:	2a05      	cmp	r2, #5
   2d142:	d919      	bls.n	2d178 <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2d144:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2d148:	d818      	bhi.n	2d17c <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   2d14a:	8881      	ldrh	r1, [r0, #4]
   2d14c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   2d150:	d216      	bcs.n	2d180 <bt_le_conn_params_valid+0x48>
{
   2d152:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   2d154:	88c0      	ldrh	r0, [r0, #6]
   2d156:	f1a0 020a 	sub.w	r2, r0, #10
   2d15a:	b292      	uxth	r2, r2
   2d15c:	f640 4476 	movw	r4, #3190	; 0xc76
   2d160:	42a2      	cmp	r2, r4
   2d162:	d80f      	bhi.n	2d184 <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   2d164:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2d168:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2d16c:	d20c      	bcs.n	2d188 <bt_le_conn_params_valid+0x50>
	return true;
   2d16e:	2001      	movs	r0, #1
}
   2d170:	bc10      	pop	{r4}
   2d172:	4770      	bx	lr
		return false;
   2d174:	2000      	movs	r0, #0
   2d176:	4770      	bx	lr
   2d178:	2000      	movs	r0, #0
   2d17a:	4770      	bx	lr
   2d17c:	2000      	movs	r0, #0
   2d17e:	4770      	bx	lr
		return false;
   2d180:	2000      	movs	r0, #0
}
   2d182:	4770      	bx	lr
		return false;
   2d184:	2000      	movs	r0, #0
   2d186:	e7f3      	b.n	2d170 <bt_le_conn_params_valid+0x38>
   2d188:	2000      	movs	r0, #0
   2d18a:	e7f1      	b.n	2d170 <bt_le_conn_params_valid+0x38>

0002d18c <bt_le_set_data_len>:
{
   2d18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d18e:	4606      	mov	r6, r0
   2d190:	460f      	mov	r7, r1
   2d192:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2d194:	2106      	movs	r1, #6
   2d196:	f242 0022 	movw	r0, #8226	; 0x2022
   2d19a:	f7e9 ff37 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   2d19e:	b170      	cbz	r0, 2d1be <bt_le_set_data_len+0x32>
   2d1a0:	4605      	mov	r5, r0
   2d1a2:	2106      	movs	r1, #6
   2d1a4:	3008      	adds	r0, #8
   2d1a6:	f7ef fc8f 	bl	1cac8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d1aa:	8833      	ldrh	r3, [r6, #0]
   2d1ac:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2d1ae:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2d1b0:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2d1b2:	4629      	mov	r1, r5
   2d1b4:	f242 0022 	movw	r0, #8226	; 0x2022
   2d1b8:	f7ea fa3a 	bl	17630 <bt_hci_cmd_send>
}
   2d1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2d1be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d1c2:	e7fb      	b.n	2d1bc <bt_le_set_data_len+0x30>

0002d1c4 <bt_le_set_phy>:
{
   2d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d1c8:	4607      	mov	r7, r0
   2d1ca:	460e      	mov	r6, r1
   2d1cc:	4615      	mov	r5, r2
   2d1ce:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2d1d0:	2107      	movs	r1, #7
   2d1d2:	f242 0032 	movw	r0, #8242	; 0x2032
   2d1d6:	f7e9 ff19 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   2d1da:	b1a0      	cbz	r0, 2d206 <bt_le_set_phy+0x42>
   2d1dc:	4680      	mov	r8, r0
   2d1de:	2107      	movs	r1, #7
   2d1e0:	3008      	adds	r0, #8
   2d1e2:	f7ef fc71 	bl	1cac8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d1e6:	883b      	ldrh	r3, [r7, #0]
   2d1e8:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2d1ea:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2d1ec:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2d1ee:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   2d1f0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2d1f4:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2d1f8:	4641      	mov	r1, r8
   2d1fa:	f242 0032 	movw	r0, #8242	; 0x2032
   2d1fe:	f7ea fa17 	bl	17630 <bt_hci_cmd_send>
}
   2d202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   2d206:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d20a:	e7fa      	b.n	2d202 <bt_le_set_phy+0x3e>

0002d20c <hci_le_read_remote_features>:
{
   2d20c:	b538      	push	{r3, r4, r5, lr}
   2d20e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2d210:	2102      	movs	r1, #2
   2d212:	f242 0016 	movw	r0, #8214	; 0x2016
   2d216:	f7e9 fef9 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   2d21a:	b168      	cbz	r0, 2d238 <hci_le_read_remote_features+0x2c>
   2d21c:	4605      	mov	r5, r0
   2d21e:	2102      	movs	r1, #2
   2d220:	3008      	adds	r0, #8
   2d222:	f7ef fc51 	bl	1cac8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d226:	8823      	ldrh	r3, [r4, #0]
   2d228:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2d22a:	4629      	mov	r1, r5
   2d22c:	f242 0016 	movw	r0, #8214	; 0x2016
   2d230:	f7ea f9fe 	bl	17630 <bt_hci_cmd_send>
	return 0;
   2d234:	2000      	movs	r0, #0
}
   2d236:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2d238:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d23c:	e7fb      	b.n	2d236 <hci_le_read_remote_features+0x2a>

0002d23e <enh_conn_complete>:
{
   2d23e:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   2d240:	f7ea fabc 	bl	177bc <bt_hci_le_enh_conn_complete>
}
   2d244:	bd08      	pop	{r3, pc}

0002d246 <le_enh_conn_complete>:
{
   2d246:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   2d248:	6880      	ldr	r0, [r0, #8]
   2d24a:	f7ff fff8 	bl	2d23e <enh_conn_complete>
}
   2d24e:	bd08      	pop	{r3, pc}

0002d250 <le_legacy_conn_complete>:
{
   2d250:	b500      	push	{lr}
   2d252:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2d254:	6883      	ldr	r3, [r0, #8]
	enh.status         = evt->status;
   2d256:	781a      	ldrb	r2, [r3, #0]
   2d258:	f88d 2000 	strb.w	r2, [sp]
	enh.handle         = evt->handle;
   2d25c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   2d260:	f8ad 2001 	strh.w	r2, [sp, #1]
	enh.role           = evt->role;
   2d264:	78da      	ldrb	r2, [r3, #3]
   2d266:	f88d 2003 	strb.w	r2, [sp, #3]
	enh.interval       = evt->interval;
   2d26a:	f8b3 200b 	ldrh.w	r2, [r3, #11]
   2d26e:	f8ad 2017 	strh.w	r2, [sp, #23]
	enh.latency        = evt->latency;
   2d272:	f8b3 200d 	ldrh.w	r2, [r3, #13]
   2d276:	f8ad 2019 	strh.w	r2, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   2d27a:	f8b3 200f 	ldrh.w	r2, [r3, #15]
   2d27e:	f8ad 201b 	strh.w	r2, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   2d282:	7c5a      	ldrb	r2, [r3, #17]
   2d284:	f88d 201d 	strb.w	r2, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   2d288:	f853 0f04 	ldr.w	r0, [r3, #4]!
   2d28c:	9001      	str	r0, [sp, #4]
   2d28e:	889a      	ldrh	r2, [r3, #4]
   2d290:	799b      	ldrb	r3, [r3, #6]
   2d292:	f8ad 2008 	strh.w	r2, [sp, #8]
   2d296:	f88d 300a 	strb.w	r3, [sp, #10]
	memcpy(dst, src, sizeof(*dst));
   2d29a:	2300      	movs	r3, #0
   2d29c:	f8cd 300b 	str.w	r3, [sp, #11]
   2d2a0:	f8ad 300f 	strh.w	r3, [sp, #15]
   2d2a4:	f8cd 3011 	str.w	r3, [sp, #17]
   2d2a8:	f8ad 3015 	strh.w	r3, [sp, #21]
	enh_conn_complete(&enh);
   2d2ac:	4668      	mov	r0, sp
   2d2ae:	f7ff ffc6 	bl	2d23e <enh_conn_complete>
}
   2d2b2:	b009      	add	sp, #36	; 0x24
   2d2b4:	f85d fb04 	ldr.w	pc, [sp], #4

0002d2b8 <le_conn_param_req_reply>:
{
   2d2b8:	b570      	push	{r4, r5, r6, lr}
   2d2ba:	4605      	mov	r5, r0
   2d2bc:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2d2be:	210e      	movs	r1, #14
   2d2c0:	f242 0020 	movw	r0, #8224	; 0x2020
   2d2c4:	f7e9 fea2 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   2d2c8:	b1c0      	cbz	r0, 2d2fc <le_conn_param_req_reply+0x44>
   2d2ca:	4606      	mov	r6, r0
   2d2cc:	210e      	movs	r1, #14
   2d2ce:	3008      	adds	r0, #8
   2d2d0:	f7ef fbfa 	bl	1cac8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   2d2d4:	2300      	movs	r3, #0
   2d2d6:	6003      	str	r3, [r0, #0]
   2d2d8:	6043      	str	r3, [r0, #4]
   2d2da:	6083      	str	r3, [r0, #8]
   2d2dc:	8183      	strh	r3, [r0, #12]
	cp->handle = sys_cpu_to_le16(handle);
   2d2de:	8005      	strh	r5, [r0, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2d2e0:	8823      	ldrh	r3, [r4, #0]
   2d2e2:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2d2e4:	8863      	ldrh	r3, [r4, #2]
   2d2e6:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2d2e8:	88a3      	ldrh	r3, [r4, #4]
   2d2ea:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2d2ec:	88e3      	ldrh	r3, [r4, #6]
   2d2ee:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2d2f0:	4631      	mov	r1, r6
   2d2f2:	f242 0020 	movw	r0, #8224	; 0x2020
   2d2f6:	f7ea f99b 	bl	17630 <bt_hci_cmd_send>
}
   2d2fa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2d2fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d300:	e7fb      	b.n	2d2fa <le_conn_param_req_reply+0x42>

0002d302 <bt_init>:
{
   2d302:	b510      	push	{r4, lr}
	err = hci_init();
   2d304:	f7ea f948 	bl	17598 <hci_init>
	if (err) {
   2d308:	4604      	mov	r4, r0
   2d30a:	b108      	cbz	r0, 2d310 <bt_init+0xe>
}
   2d30c:	4620      	mov	r0, r4
   2d30e:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   2d310:	f7ec fd04 	bl	19d1c <bt_conn_init>
		if (err) {
   2d314:	4604      	mov	r4, r0
   2d316:	2800      	cmp	r0, #0
   2d318:	d1f8      	bne.n	2d30c <bt_init+0xa>
	bt_finalize_init();
   2d31a:	f7ea fe49 	bl	17fb0 <bt_finalize_init>
	return 0;
   2d31e:	e7f5      	b.n	2d30c <bt_init+0xa>

0002d320 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   2d320:	2000      	movs	r0, #0
   2d322:	4770      	bx	lr

0002d324 <bt_lookup_id_addr>:
}
   2d324:	4608      	mov	r0, r1
   2d326:	4770      	bx	lr

0002d328 <bt_id_set_adv_random_addr>:
{
   2d328:	b508      	push	{r3, lr}
		return set_random_address(addr);
   2d32a:	4608      	mov	r0, r1
   2d32c:	f7ea ff1e 	bl	1816c <set_random_address>
}
   2d330:	bd08      	pop	{r3, pc}

0002d332 <bt_id_set_adv_private_addr>:
{
   2d332:	b510      	push	{r4, lr}
   2d334:	b082      	sub	sp, #8
   2d336:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2d338:	2106      	movs	r1, #6
   2d33a:	4668      	mov	r0, sp
   2d33c:	f7f3 f810 	bl	20360 <bt_rand>
	if (err) {
   2d340:	b108      	cbz	r0, 2d346 <bt_id_set_adv_private_addr+0x14>
}
   2d342:	b002      	add	sp, #8
   2d344:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   2d346:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2d34a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2d34e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2d352:	4669      	mov	r1, sp
   2d354:	4620      	mov	r0, r4
   2d356:	f7ff ffe7 	bl	2d328 <bt_id_set_adv_random_addr>
	if (err) {
   2d35a:	e7f2      	b.n	2d342 <bt_id_set_adv_private_addr+0x10>

0002d35c <bt_id_adv_random_addr_check>:
}
   2d35c:	2001      	movs	r0, #1
   2d35e:	4770      	bx	lr

0002d360 <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   2d360:	2300      	movs	r3, #0
   2d362:	428b      	cmp	r3, r1
   2d364:	d218      	bcs.n	2d398 <ad_is_limited+0x38>
{
   2d366:	b430      	push	{r4, r5}
   2d368:	e002      	b.n	2d370 <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   2d36a:	3301      	adds	r3, #1
   2d36c:	428b      	cmp	r3, r1
   2d36e:	d210      	bcs.n	2d392 <ad_is_limited+0x32>
		if (ad[i].type == BT_DATA_FLAGS &&
   2d370:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
   2d374:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
   2d378:	f240 1201 	movw	r2, #257	; 0x101
   2d37c:	4294      	cmp	r4, r2
   2d37e:	d1f4      	bne.n	2d36a <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   2d380:	686a      	ldr	r2, [r5, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2d382:	2a00      	cmp	r2, #0
   2d384:	d0f1      	beq.n	2d36a <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2d386:	7812      	ldrb	r2, [r2, #0]
   2d388:	f012 0f01 	tst.w	r2, #1
   2d38c:	d0ed      	beq.n	2d36a <ad_is_limited+0xa>
				return true;
   2d38e:	2001      	movs	r0, #1
   2d390:	e000      	b.n	2d394 <ad_is_limited+0x34>
	return false;
   2d392:	2000      	movs	r0, #0
}
   2d394:	bc30      	pop	{r4, r5}
   2d396:	4770      	bx	lr
	return false;
   2d398:	2000      	movs	r0, #0
}
   2d39a:	4770      	bx	lr

0002d39c <get_filter_policy>:
}
   2d39c:	2000      	movs	r0, #0
   2d39e:	4770      	bx	lr

0002d3a0 <get_adv_channel_map>:
{
   2d3a0:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   2d3a2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2d3a6:	d10b      	bne.n	2d3c0 <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   2d3a8:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2d3aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2d3ae:	d001      	beq.n	2d3b4 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   2d3b0:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2d3b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   2d3b8:	d001      	beq.n	2d3be <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   2d3ba:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   2d3be:	4770      	bx	lr
		channel_map &= ~0x01;
   2d3c0:	2006      	movs	r0, #6
   2d3c2:	e7f2      	b.n	2d3aa <get_adv_channel_map+0xa>

0002d3c4 <hci_set_ad>:
{
   2d3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d3c8:	b082      	sub	sp, #8
   2d3ca:	4607      	mov	r7, r0
   2d3cc:	460d      	mov	r5, r1
   2d3ce:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2d3d0:	2120      	movs	r1, #32
   2d3d2:	f7e9 fe1b 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   2d3d6:	b300      	cbz	r0, 2d41a <hci_set_ad+0x56>
   2d3d8:	4680      	mov	r8, r0
   2d3da:	2120      	movs	r1, #32
   2d3dc:	3008      	adds	r0, #8
   2d3de:	f7ef fb73 	bl	1cac8 <net_buf_simple_add>
   2d3e2:	4604      	mov	r4, r0
   2d3e4:	2220      	movs	r2, #32
   2d3e6:	2100      	movs	r1, #0
   2d3e8:	f003 fa8a 	bl	30900 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   2d3ec:	9400      	str	r4, [sp, #0]
   2d3ee:	4633      	mov	r3, r6
   2d3f0:	462a      	mov	r2, r5
   2d3f2:	211f      	movs	r1, #31
   2d3f4:	1c60      	adds	r0, r4, #1
   2d3f6:	f7eb f955 	bl	186a4 <set_data_add_complete>
	if (err) {
   2d3fa:	4604      	mov	r4, r0
   2d3fc:	b948      	cbnz	r0, 2d412 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2d3fe:	2200      	movs	r2, #0
   2d400:	4641      	mov	r1, r8
   2d402:	4638      	mov	r0, r7
   2d404:	f7e9 fe52 	bl	170ac <bt_hci_cmd_send_sync>
   2d408:	4604      	mov	r4, r0
}
   2d40a:	4620      	mov	r0, r4
   2d40c:	b002      	add	sp, #8
   2d40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2d412:	4640      	mov	r0, r8
   2d414:	f7ef fa26 	bl	1c864 <net_buf_unref>
		return err;
   2d418:	e7f7      	b.n	2d40a <hci_set_ad+0x46>
		return -ENOBUFS;
   2d41a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2d41e:	e7f4      	b.n	2d40a <hci_set_ad+0x46>

0002d420 <set_ad>:
{
   2d420:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2d422:	f242 0008 	movw	r0, #8200	; 0x2008
   2d426:	f7ff ffcd 	bl	2d3c4 <hci_set_ad>
}
   2d42a:	bd08      	pop	{r3, pc}

0002d42c <set_sd>:
{
   2d42c:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2d42e:	f242 0009 	movw	r0, #8201	; 0x2009
   2d432:	f7ff ffc7 	bl	2d3c4 <hci_set_ad>
}
   2d436:	bd08      	pop	{r3, pc}

0002d438 <le_adv_update>:
{
   2d438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d43c:	b089      	sub	sp, #36	; 0x24
   2d43e:	4604      	mov	r4, r0
   2d440:	460e      	mov	r6, r1
   2d442:	4617      	mov	r7, r2
   2d444:	461d      	mov	r5, r3
   2d446:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   2d44a:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
   2d44e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   2d452:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   2d456:	2300      	movs	r3, #0
   2d458:	9304      	str	r3, [sp, #16]
   2d45a:	9305      	str	r3, [sp, #20]
   2d45c:	9306      	str	r3, [sp, #24]
   2d45e:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   2d460:	f1b9 0f00 	cmp.w	r9, #0
   2d464:	d133      	bne.n	2d4ce <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   2d466:	f1bb 0f00 	cmp.w	fp, #0
   2d46a:	d002      	beq.n	2d472 <le_adv_update+0x3a>
   2d46c:	f1ba 0f00 	cmp.w	sl, #0
   2d470:	d10b      	bne.n	2d48a <le_adv_update+0x52>
		d[0].data = ad;
   2d472:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   2d474:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   2d476:	f1b9 0f01 	cmp.w	r9, #1
   2d47a:	d056      	beq.n	2d52a <le_adv_update+0xf2>
		d_len = 1;
   2d47c:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   2d47e:	a904      	add	r1, sp, #16
   2d480:	4620      	mov	r0, r4
   2d482:	f7ff ffcd 	bl	2d420 <set_ad>
		if (err) {
   2d486:	4603      	mov	r3, r0
   2d488:	b9e8      	cbnz	r0, 2d4c6 <le_adv_update+0x8e>
	if (scannable) {
   2d48a:	f1ba 0f00 	cmp.w	sl, #0
   2d48e:	d00c      	beq.n	2d4aa <le_adv_update+0x72>
		d[0].data = sd;
   2d490:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   2d492:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   2d496:	f1b9 0f02 	cmp.w	r9, #2
   2d49a:	d04c      	beq.n	2d536 <le_adv_update+0xfe>
		d_len = 1;
   2d49c:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   2d49e:	a904      	add	r1, sp, #16
   2d4a0:	4620      	mov	r0, r4
   2d4a2:	f7ff ffc3 	bl	2d42c <set_sd>
		if (err) {
   2d4a6:	4603      	mov	r3, r0
   2d4a8:	b968      	cbnz	r0, 2d4c6 <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   2d4aa:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d4ac:	f3bf 8f5b 	dmb	ish
   2d4b0:	e854 3f00 	ldrex	r3, [r4]
   2d4b4:	f043 0304 	orr.w	r3, r3, #4
   2d4b8:	e844 3200 	strex	r2, r3, [r4]
   2d4bc:	2a00      	cmp	r2, #0
   2d4be:	d1f7      	bne.n	2d4b0 <le_adv_update+0x78>
   2d4c0:	f3bf 8f5b 	dmb	ish
	return 0;
   2d4c4:	2300      	movs	r3, #0
}
   2d4c6:	4618      	mov	r0, r3
   2d4c8:	b009      	add	sp, #36	; 0x24
   2d4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2d4ce:	f7ea fe2f 	bl	18130 <bt_get_name>
   2d4d2:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   2d4d4:	b166      	cbz	r6, 2d4f0 <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   2d4d6:	2200      	movs	r2, #0
   2d4d8:	4297      	cmp	r7, r2
   2d4da:	d907      	bls.n	2d4ec <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2d4dc:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   2d4e0:	3b08      	subs	r3, #8
   2d4e2:	b2db      	uxtb	r3, r3
   2d4e4:	2b01      	cmp	r3, #1
   2d4e6:	d90f      	bls.n	2d508 <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   2d4e8:	3201      	adds	r2, #1
   2d4ea:	e7f5      	b.n	2d4d8 <le_adv_update+0xa0>
	return false;
   2d4ec:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2d4ee:	bb43      	cbnz	r3, 2d542 <le_adv_update+0x10a>
   2d4f0:	b175      	cbz	r5, 2d510 <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   2d4f2:	2200      	movs	r2, #0
   2d4f4:	4590      	cmp	r8, r2
   2d4f6:	d909      	bls.n	2d50c <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2d4f8:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   2d4fc:	3b08      	subs	r3, #8
   2d4fe:	b2db      	uxtb	r3, r3
   2d500:	2b01      	cmp	r3, #1
   2d502:	d910      	bls.n	2d526 <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   2d504:	3201      	adds	r2, #1
   2d506:	e7f5      	b.n	2d4f4 <le_adv_update+0xbc>
			return true;
   2d508:	2301      	movs	r3, #1
   2d50a:	e7f0      	b.n	2d4ee <le_adv_update+0xb6>
	return false;
   2d50c:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   2d50e:	b9db      	cbnz	r3, 2d548 <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   2d510:	9801      	ldr	r0, [sp, #4]
   2d512:	f7de fde3 	bl	c0dc <strlen>
   2d516:	2309      	movs	r3, #9
   2d518:	f88d 3008 	strb.w	r3, [sp, #8]
   2d51c:	f88d 0009 	strb.w	r0, [sp, #9]
   2d520:	9b01      	ldr	r3, [sp, #4]
   2d522:	9303      	str	r3, [sp, #12]
   2d524:	e79f      	b.n	2d466 <le_adv_update+0x2e>
			return true;
   2d526:	2301      	movs	r3, #1
   2d528:	e7f1      	b.n	2d50e <le_adv_update+0xd6>
			d[1].data = &data;
   2d52a:	ab02      	add	r3, sp, #8
   2d52c:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2d52e:	2301      	movs	r3, #1
   2d530:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2d532:	2202      	movs	r2, #2
   2d534:	e7a3      	b.n	2d47e <le_adv_update+0x46>
			d[1].data = &data;
   2d536:	ab02      	add	r3, sp, #8
   2d538:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2d53a:	2301      	movs	r3, #1
   2d53c:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2d53e:	2202      	movs	r2, #2
   2d540:	e7ad      	b.n	2d49e <le_adv_update+0x66>
			return -EINVAL;
   2d542:	f06f 0315 	mvn.w	r3, #21
   2d546:	e7be      	b.n	2d4c6 <le_adv_update+0x8e>
   2d548:	f06f 0315 	mvn.w	r3, #21
   2d54c:	e7bb      	b.n	2d4c6 <le_adv_update+0x8e>

0002d54e <valid_adv_param>:
{
   2d54e:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2d550:	6843      	ldr	r3, [r0, #4]
   2d552:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2d556:	d107      	bne.n	2d568 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2d558:	6902      	ldr	r2, [r0, #16]
   2d55a:	b112      	cbz	r2, 2d562 <valid_adv_param+0x14>
   2d55c:	f013 0f01 	tst.w	r3, #1
   2d560:	d004      	beq.n	2d56c <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   2d562:	f7eb f903 	bl	1876c <valid_adv_ext_param>
}
   2d566:	bd08      	pop	{r3, pc}
		return false;
   2d568:	2000      	movs	r0, #0
   2d56a:	e7fc      	b.n	2d566 <valid_adv_param+0x18>
		return false;
   2d56c:	2000      	movs	r0, #0
   2d56e:	e7fa      	b.n	2d566 <valid_adv_param+0x18>

0002d570 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2d570:	6843      	ldr	r3, [r0, #4]
   2d572:	f013 0f08 	tst.w	r3, #8
   2d576:	d00b      	beq.n	2d590 <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2d578:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2d57c:	d10a      	bne.n	2d594 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2d57e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   2d582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2d586:	d001      	beq.n	2d58c <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   2d588:	2002      	movs	r0, #2
}
   2d58a:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2d58c:	2001      	movs	r0, #1
   2d58e:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   2d590:	2000      	movs	r0, #0
   2d592:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2d594:	2001      	movs	r0, #1
   2d596:	4770      	bx	lr

0002d598 <bt_le_adv_set_enable_legacy>:
{
   2d598:	b570      	push	{r4, r5, r6, lr}
   2d59a:	b086      	sub	sp, #24
   2d59c:	4605      	mov	r5, r0
   2d59e:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2d5a0:	2101      	movs	r1, #1
   2d5a2:	f242 000a 	movw	r0, #8202	; 0x200a
   2d5a6:	f7e9 fd31 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   2d5aa:	b1d0      	cbz	r0, 2d5e2 <bt_le_adv_set_enable_legacy+0x4a>
   2d5ac:	4606      	mov	r6, r0
	if (enable) {
   2d5ae:	b19c      	cbz	r4, 2d5d8 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2d5b0:	2101      	movs	r1, #1
   2d5b2:	3008      	adds	r0, #8
   2d5b4:	f001 fc83 	bl	2eebe <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2d5b8:	9400      	str	r4, [sp, #0]
   2d5ba:	2306      	movs	r3, #6
   2d5bc:	f105 0210 	add.w	r2, r5, #16
   2d5c0:	a903      	add	r1, sp, #12
   2d5c2:	4630      	mov	r0, r6
   2d5c4:	f7e9 fd10 	bl	16fe8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2d5c8:	2200      	movs	r2, #0
   2d5ca:	4631      	mov	r1, r6
   2d5cc:	f242 000a 	movw	r0, #8202	; 0x200a
   2d5d0:	f7e9 fd6c 	bl	170ac <bt_hci_cmd_send_sync>
}
   2d5d4:	b006      	add	sp, #24
   2d5d6:	bd70      	pop	{r4, r5, r6, pc}
   2d5d8:	2100      	movs	r1, #0
   2d5da:	3008      	adds	r0, #8
   2d5dc:	f001 fc6f 	bl	2eebe <net_buf_simple_add_u8>
   2d5e0:	e7ea      	b.n	2d5b8 <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   2d5e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d5e6:	e7f5      	b.n	2d5d4 <bt_le_adv_set_enable_legacy+0x3c>

0002d5e8 <bt_le_adv_set_enable>:
{
   2d5e8:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   2d5ea:	f7ff ffd5 	bl	2d598 <bt_le_adv_set_enable_legacy>
}
   2d5ee:	bd08      	pop	{r3, pc}

0002d5f0 <bt_le_lim_adv_cancel_timeout>:
{
   2d5f0:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2d5f2:	3018      	adds	r0, #24
   2d5f4:	f7f7 fe0c 	bl	25210 <k_work_cancel_delayable>
}
   2d5f8:	bd08      	pop	{r3, pc}

0002d5fa <bt_le_adv_resume>:
{
   2d5fa:	b530      	push	{r4, r5, lr}
   2d5fc:	b083      	sub	sp, #12
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2d5fe:	f7eb f981 	bl	18904 <bt_le_adv_lookup_legacy>
	if (!adv) {
   2d602:	b150      	cbz	r0, 2d61a <bt_le_adv_resume+0x20>
   2d604:	4604      	mov	r4, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2d606:	f100 0510 	add.w	r5, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d60a:	f3bf 8f5b 	dmb	ish
   2d60e:	6903      	ldr	r3, [r0, #16]
   2d610:	f3bf 8f5b 	dmb	ish
   2d614:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2d618:	d101      	bne.n	2d61e <bt_le_adv_resume+0x24>
}
   2d61a:	b003      	add	sp, #12
   2d61c:	bd30      	pop	{r4, r5, pc}
   2d61e:	f3bf 8f5b 	dmb	ish
   2d622:	6903      	ldr	r3, [r0, #16]
   2d624:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2d628:	f013 0f40 	tst.w	r3, #64	; 0x40
   2d62c:	d1f5      	bne.n	2d61a <bt_le_adv_resume+0x20>
   2d62e:	f3bf 8f5b 	dmb	ish
   2d632:	6903      	ldr	r3, [r0, #16]
   2d634:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2d638:	f413 7f00 	tst.w	r3, #512	; 0x200
   2d63c:	d0ed      	beq.n	2d61a <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
   2d63e:	a901      	add	r1, sp, #4
   2d640:	f7eb f8e2 	bl	18808 <le_adv_start_add_conn>
	if (err) {
   2d644:	2800      	cmp	r0, #0
   2d646:	d1e8      	bne.n	2d61a <bt_le_adv_resume+0x20>
	err = bt_le_adv_set_enable(adv, true);
   2d648:	2101      	movs	r1, #1
   2d64a:	4620      	mov	r0, r4
   2d64c:	f7ff ffcc 	bl	2d5e8 <bt_le_adv_set_enable>
	if (err) {
   2d650:	b908      	cbnz	r0, 2d656 <bt_le_adv_resume+0x5c>
	bool persist_paused = false;
   2d652:	2400      	movs	r4, #0
   2d654:	e011      	b.n	2d67a <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2d656:	2100      	movs	r1, #0
   2d658:	9801      	ldr	r0, [sp, #4]
   2d65a:	f7eb ff35 	bl	194c8 <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d65e:	f3bf 8f5b 	dmb	ish
   2d662:	e855 4f00 	ldrex	r4, [r5]
   2d666:	f424 5300 	bic.w	r3, r4, #8192	; 0x2000
   2d66a:	e845 3200 	strex	r2, r3, [r5]
   2d66e:	2a00      	cmp	r2, #0
   2d670:	d1f7      	bne.n	2d662 <bt_le_adv_resume+0x68>
   2d672:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2d676:	f3c4 3440 	ubfx	r4, r4, #13, #1
	bt_conn_unref(conn);
   2d67a:	9801      	ldr	r0, [sp, #4]
   2d67c:	f7eb fee0 	bl	19440 <bt_conn_unref>
	if (persist_paused) {
   2d680:	2c00      	cmp	r4, #0
   2d682:	d0ca      	beq.n	2d61a <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d684:	f3bf 8f5b 	dmb	ish
   2d688:	e855 3f00 	ldrex	r3, [r5]
   2d68c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2d690:	e845 3200 	strex	r2, r3, [r5]
   2d694:	2a00      	cmp	r2, #0
   2d696:	d1f7      	bne.n	2d688 <bt_le_adv_resume+0x8e>
   2d698:	f3bf 8f5b 	dmb	ish
}
   2d69c:	e7bd      	b.n	2d61a <bt_le_adv_resume+0x20>

0002d69e <tx_notify>:
{
   2d69e:	b570      	push	{r4, r5, r6, lr}
   2d6a0:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   2d6a2:	e010      	b.n	2d6c6 <tx_notify+0x28>
   2d6a4:	f383 8811 	msr	BASEPRI, r3
   2d6a8:	f3bf 8f6f 	isb	sy
}
   2d6ac:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   2d6ae:	6262      	str	r2, [r4, #36]	; 0x24
   2d6b0:	f383 8811 	msr	BASEPRI, r3
   2d6b4:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   2d6b8:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   2d6ba:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   2d6bc:	f7eb fbaa 	bl	18e14 <tx_free>
		cb(conn, user_data);
   2d6c0:	4631      	mov	r1, r6
   2d6c2:	4620      	mov	r0, r4
   2d6c4:	47a8      	blx	r5
	__asm__ volatile(
   2d6c6:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d6ca:	f3ef 8311 	mrs	r3, BASEPRI
   2d6ce:	f382 8812 	msr	BASEPRI_MAX, r2
   2d6d2:	f3bf 8f6f 	isb	sy
	return list->head;
   2d6d6:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2d6d8:	2800      	cmp	r0, #0
   2d6da:	d0e3      	beq.n	2d6a4 <tx_notify+0x6>
	return node->next;
   2d6dc:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2d6de:	6222      	str	r2, [r4, #32]
	return list->tail;
   2d6e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d6e2:	4281      	cmp	r1, r0
   2d6e4:	d1e4      	bne.n	2d6b0 <tx_notify+0x12>
   2d6e6:	e7e2      	b.n	2d6ae <tx_notify+0x10>

0002d6e8 <tx_complete_work>:
{
   2d6e8:	b508      	push	{r3, lr}
	tx_notify(conn);
   2d6ea:	3828      	subs	r0, #40	; 0x28
   2d6ec:	f7ff ffd7 	bl	2d69e <tx_notify>
}
   2d6f0:	bd08      	pop	{r3, pc}

0002d6f2 <send_acl>:
{
   2d6f2:	b570      	push	{r4, r5, r6, lr}
   2d6f4:	4605      	mov	r5, r0
   2d6f6:	460c      	mov	r4, r1
	switch (flags) {
   2d6f8:	2a03      	cmp	r2, #3
   2d6fa:	d819      	bhi.n	2d730 <send_acl+0x3e>
   2d6fc:	e8df f002 	tbb	[pc, r2]
   2d700:	16021602 	.word	0x16021602
		flags = BT_ACL_CONT;
   2d704:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   2d706:	2104      	movs	r1, #4
   2d708:	f104 0008 	add.w	r0, r4, #8
   2d70c:	f7ef f9ba 	bl	1ca84 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2d710:	f9b5 3000 	ldrsh.w	r3, [r5]
   2d714:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2d718:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2d71a:	89a3      	ldrh	r3, [r4, #12]
   2d71c:	3b04      	subs	r3, #4
   2d71e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2d720:	2302      	movs	r3, #2
   2d722:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   2d724:	4620      	mov	r0, r4
   2d726:	f7e9 ff79 	bl	1761c <bt_send>
}
   2d72a:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   2d72c:	2601      	movs	r6, #1
   2d72e:	e7ea      	b.n	2d706 <send_acl+0x14>
   2d730:	f06f 0015 	mvn.w	r0, #21
   2d734:	e7f9      	b.n	2d72a <send_acl+0x38>

0002d736 <process_unack_tx>:
{
   2d736:	b510      	push	{r4, lr}
   2d738:	4604      	mov	r4, r0
   2d73a:	e028      	b.n	2d78e <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2d73c:	3b01      	subs	r3, #1
   2d73e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2d740:	f382 8811 	msr	BASEPRI, r2
   2d744:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2d748:	4620      	mov	r0, r4
   2d74a:	f7eb fc09 	bl	18f60 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2d74e:	f7f6 ffbf 	bl	246d0 <z_impl_k_sem_give>
			continue;
   2d752:	e01c      	b.n	2d78e <process_unack_tx+0x58>
	list->tail = node;
   2d754:	61a3      	str	r3, [r4, #24]
   2d756:	f382 8811 	msr	BASEPRI, r2
   2d75a:	f3bf 8f6f 	isb	sy
		if (!node) {
   2d75e:	b350      	cbz	r0, 2d7b6 <process_unack_tx+0x80>
	__asm__ volatile(
   2d760:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d764:	f3ef 8311 	mrs	r3, BASEPRI
   2d768:	f382 8812 	msr	BASEPRI_MAX, r2
   2d76c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2d770:	68c2      	ldr	r2, [r0, #12]
   2d772:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2d774:	2200      	movs	r2, #0
   2d776:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   2d778:	f383 8811 	msr	BASEPRI, r3
   2d77c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   2d780:	f7eb fb48 	bl	18e14 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   2d784:	4620      	mov	r0, r4
   2d786:	f7eb fbeb 	bl	18f60 <bt_conn_get_pkts>
   2d78a:	f7f6 ffa1 	bl	246d0 <z_impl_k_sem_give>
	__asm__ volatile(
   2d78e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d792:	f3ef 8211 	mrs	r2, BASEPRI
   2d796:	f383 8812 	msr	BASEPRI_MAX, r3
   2d79a:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2d79e:	69e3      	ldr	r3, [r4, #28]
   2d7a0:	2b00      	cmp	r3, #0
   2d7a2:	d1cb      	bne.n	2d73c <process_unack_tx+0x6>
	return list->head;
   2d7a4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2d7a6:	2800      	cmp	r0, #0
   2d7a8:	d0d5      	beq.n	2d756 <process_unack_tx+0x20>
	return node->next;
   2d7aa:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2d7ac:	6163      	str	r3, [r4, #20]
	return list->tail;
   2d7ae:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d7b0:	4288      	cmp	r0, r1
   2d7b2:	d1d0      	bne.n	2d756 <process_unack_tx+0x20>
   2d7b4:	e7ce      	b.n	2d754 <process_unack_tx+0x1e>
}
   2d7b6:	bd10      	pop	{r4, pc}

0002d7b8 <bt_conn_reset_rx_state>:
{
   2d7b8:	b510      	push	{r4, lr}
   2d7ba:	4604      	mov	r4, r0
	if (!conn->rx) {
   2d7bc:	6900      	ldr	r0, [r0, #16]
   2d7be:	b118      	cbz	r0, 2d7c8 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2d7c0:	f7ef f850 	bl	1c864 <net_buf_unref>
	conn->rx = NULL;
   2d7c4:	2300      	movs	r3, #0
   2d7c6:	6123      	str	r3, [r4, #16]
}
   2d7c8:	bd10      	pop	{r4, pc}

0002d7ca <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d7ca:	f3bf 8f5b 	dmb	ish
   2d7ce:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2d7d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   2d7d6:	b33b      	cbz	r3, 2d828 <conn_prepare_events+0x5e>
{
   2d7d8:	b510      	push	{r4, lr}
   2d7da:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   2d7dc:	7a83      	ldrb	r3, [r0, #10]
   2d7de:	b983      	cbnz	r3, 2d802 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   2d7e0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d7e2:	f3bf 8f5b 	dmb	ish
   2d7e6:	e853 2f00 	ldrex	r2, [r3]
   2d7ea:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   2d7ee:	e843 1c00 	strex	ip, r1, [r3]
   2d7f2:	f1bc 0f00 	cmp.w	ip, #0
   2d7f6:	d1f6      	bne.n	2d7e6 <conn_prepare_events+0x1c>
   2d7f8:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   2d7fc:	f012 0f40 	tst.w	r2, #64	; 0x40
   2d800:	d10d      	bne.n	2d81e <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   2d802:	7a83      	ldrb	r3, [r0, #10]
   2d804:	2b07      	cmp	r3, #7
   2d806:	d112      	bne.n	2d82e <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   2d808:	f100 0338 	add.w	r3, r0, #56	; 0x38
   2d80c:	2200      	movs	r2, #0
   2d80e:	2104      	movs	r1, #4
   2d810:	4620      	mov	r0, r4
   2d812:	f7f9 feed 	bl	275f0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2d816:	2301      	movs	r3, #1
   2d818:	7323      	strb	r3, [r4, #12]
	return 0;
   2d81a:	2000      	movs	r0, #0
}
   2d81c:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   2d81e:	f7eb fd3d 	bl	1929c <conn_cleanup>
		return -ENOTCONN;
   2d822:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d826:	e7f9      	b.n	2d81c <conn_prepare_events+0x52>
		return -ENOTCONN;
   2d828:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2d82c:	4770      	bx	lr
		return -ENOTCONN;
   2d82e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d832:	e7f3      	b.n	2d81c <conn_prepare_events+0x52>

0002d834 <bt_conn_recv>:
{
   2d834:	b570      	push	{r4, r5, r6, lr}
   2d836:	4604      	mov	r4, r0
   2d838:	460d      	mov	r5, r1
   2d83a:	4616      	mov	r6, r2
	tx_notify(conn);
   2d83c:	f7ff ff2f 	bl	2d69e <tx_notify>
		bt_acl_recv(conn, buf, flags);
   2d840:	4632      	mov	r2, r6
   2d842:	4629      	mov	r1, r5
   2d844:	4620      	mov	r0, r4
   2d846:	f7eb fc73 	bl	19130 <bt_acl_recv>
}
   2d84a:	bd70      	pop	{r4, r5, r6, pc}

0002d84c <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d84c:	f3bf 8f5b 	dmb	ish
   2d850:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2d854:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2d858:	b1eb      	cbz	r3, 2d896 <bt_conn_ref+0x4a>
{
   2d85a:	b410      	push	{r4}
   2d85c:	e006      	b.n	2d86c <bt_conn_ref+0x20>
   2d85e:	f3bf 8f5b 	dmb	ish
   2d862:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2d866:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2d86a:	b193      	cbz	r3, 2d892 <bt_conn_ref+0x46>
   2d86c:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2d870:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2d872:	f3bf 8f5b 	dmb	ish
   2d876:	e852 4f00 	ldrex	r4, [r2]
   2d87a:	429c      	cmp	r4, r3
   2d87c:	d104      	bne.n	2d888 <bt_conn_ref+0x3c>
   2d87e:	e842 1c00 	strex	ip, r1, [r2]
   2d882:	f1bc 0f00 	cmp.w	ip, #0
   2d886:	d1f6      	bne.n	2d876 <bt_conn_ref+0x2a>
   2d888:	f3bf 8f5b 	dmb	ish
   2d88c:	d1e7      	bne.n	2d85e <bt_conn_ref+0x12>
}
   2d88e:	bc10      	pop	{r4}
   2d890:	4770      	bx	lr
			return NULL;
   2d892:	2000      	movs	r0, #0
   2d894:	e7fb      	b.n	2d88e <bt_conn_ref+0x42>
   2d896:	2000      	movs	r0, #0
}
   2d898:	4770      	bx	lr

0002d89a <conn_lookup_handle>:
{
   2d89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d89e:	4607      	mov	r7, r0
   2d8a0:	460e      	mov	r6, r1
   2d8a2:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2d8a4:	2400      	movs	r4, #0
   2d8a6:	e003      	b.n	2d8b0 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2d8a8:	4628      	mov	r0, r5
   2d8aa:	f7eb fdc9 	bl	19440 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2d8ae:	3401      	adds	r4, #1
   2d8b0:	42b4      	cmp	r4, r6
   2d8b2:	d21b      	bcs.n	2d8ec <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2d8b4:	20c8      	movs	r0, #200	; 0xc8
   2d8b6:	fb00 7004 	mla	r0, r0, r4, r7
   2d8ba:	f7ff ffc7 	bl	2d84c <bt_conn_ref>
		if (!conn) {
   2d8be:	4605      	mov	r5, r0
   2d8c0:	2800      	cmp	r0, #0
   2d8c2:	d0f4      	beq.n	2d8ae <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2d8c4:	7a83      	ldrb	r3, [r0, #10]
   2d8c6:	2b01      	cmp	r3, #1
   2d8c8:	d006      	beq.n	2d8d8 <conn_lookup_handle+0x3e>
   2d8ca:	b25a      	sxtb	r2, r3
   2d8cc:	2a00      	cmp	r2, #0
   2d8ce:	d0eb      	beq.n	2d8a8 <conn_lookup_handle+0xe>
   2d8d0:	3b07      	subs	r3, #7
   2d8d2:	b2db      	uxtb	r3, r3
   2d8d4:	2b01      	cmp	r3, #1
   2d8d6:	d8e7      	bhi.n	2d8a8 <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   2d8d8:	882b      	ldrh	r3, [r5, #0]
   2d8da:	4543      	cmp	r3, r8
   2d8dc:	d102      	bne.n	2d8e4 <conn_lookup_handle+0x4a>
}
   2d8de:	4628      	mov	r0, r5
   2d8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   2d8e4:	4628      	mov	r0, r5
   2d8e6:	f7eb fdab 	bl	19440 <bt_conn_unref>
			continue;
   2d8ea:	e7e0      	b.n	2d8ae <conn_lookup_handle+0x14>
	return NULL;
   2d8ec:	2500      	movs	r5, #0
   2d8ee:	e7f6      	b.n	2d8de <conn_lookup_handle+0x44>

0002d8f0 <bt_conn_connected>:
{
   2d8f0:	b510      	push	{r4, lr}
   2d8f2:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2d8f4:	f7ec fae6 	bl	19ec4 <bt_l2cap_connected>
	notify_connected(conn);
   2d8f8:	4620      	mov	r0, r4
   2d8fa:	f7eb faed 	bl	18ed8 <notify_connected>
}
   2d8fe:	bd10      	pop	{r4, pc}

0002d900 <bt_conn_get_security>:
}
   2d900:	2001      	movs	r0, #1
   2d902:	4770      	bx	lr

0002d904 <bt_conn_add_le>:
{
   2d904:	b538      	push	{r3, r4, r5, lr}
   2d906:	4605      	mov	r5, r0
   2d908:	460c      	mov	r4, r1
	struct bt_conn *conn = acl_conn_new();
   2d90a:	f7eb fc09 	bl	19120 <acl_conn_new>
	if (!conn) {
   2d90e:	4603      	mov	r3, r0
   2d910:	b188      	cbz	r0, 2d936 <bt_conn_add_le+0x32>
	conn->id = id;
   2d912:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d914:	6822      	ldr	r2, [r4, #0]
   2d916:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   2d91a:	88a1      	ldrh	r1, [r4, #4]
   2d91c:	79a2      	ldrb	r2, [r4, #6]
   2d91e:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
   2d922:	f880 2096 	strb.w	r2, [r0, #150]	; 0x96
	conn->type = BT_CONN_TYPE_LE;
   2d926:	2201      	movs	r2, #1
   2d928:	7082      	strb	r2, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2d92a:	2218      	movs	r2, #24
   2d92c:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   2d930:	2228      	movs	r2, #40	; 0x28
   2d932:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
}
   2d936:	4618      	mov	r0, r3
   2d938:	bd38      	pop	{r3, r4, r5, pc}

0002d93a <bt_conn_is_peer_addr_le>:
{
   2d93a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2d93c:	7a03      	ldrb	r3, [r0, #8]
   2d93e:	428b      	cmp	r3, r1
   2d940:	d001      	beq.n	2d946 <bt_conn_is_peer_addr_le+0xc>
		return false;
   2d942:	2000      	movs	r0, #0
}
   2d944:	bd38      	pop	{r3, r4, r5, pc}
   2d946:	4604      	mov	r4, r0
   2d948:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2d94a:	2207      	movs	r2, #7
   2d94c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2d950:	4628      	mov	r0, r5
   2d952:	f002 ff9f 	bl	30894 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2d956:	b1a8      	cbz	r0, 2d984 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2d958:	78e3      	ldrb	r3, [r4, #3]
   2d95a:	b14b      	cbz	r3, 2d970 <bt_conn_is_peer_addr_le+0x36>
   2d95c:	2207      	movs	r2, #7
   2d95e:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2d962:	4628      	mov	r0, r5
   2d964:	f002 ff96 	bl	30894 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2d968:	fab0 f080 	clz	r0, r0
   2d96c:	0940      	lsrs	r0, r0, #5
   2d96e:	e7e9      	b.n	2d944 <bt_conn_is_peer_addr_le+0xa>
   2d970:	2207      	movs	r2, #7
   2d972:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2d976:	4628      	mov	r0, r5
   2d978:	f002 ff8c 	bl	30894 <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   2d97c:	fab0 f080 	clz	r0, r0
   2d980:	0940      	lsrs	r0, r0, #5
   2d982:	e7df      	b.n	2d944 <bt_conn_is_peer_addr_le+0xa>
		return true;
   2d984:	2001      	movs	r0, #1
   2d986:	e7dd      	b.n	2d944 <bt_conn_is_peer_addr_le+0xa>

0002d988 <bt_conn_le_conn_update>:
{
   2d988:	b570      	push	{r4, r5, r6, lr}
   2d98a:	4605      	mov	r5, r0
   2d98c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2d98e:	210e      	movs	r1, #14
   2d990:	f242 0013 	movw	r0, #8211	; 0x2013
   2d994:	f7e9 fb3a 	bl	1700c <bt_hci_cmd_create>
	if (!buf) {
   2d998:	b1c8      	cbz	r0, 2d9ce <bt_conn_le_conn_update+0x46>
   2d99a:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2d99c:	210e      	movs	r1, #14
   2d99e:	3008      	adds	r0, #8
   2d9a0:	f7ef f892 	bl	1cac8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   2d9a4:	2200      	movs	r2, #0
   2d9a6:	6002      	str	r2, [r0, #0]
   2d9a8:	6042      	str	r2, [r0, #4]
   2d9aa:	6082      	str	r2, [r0, #8]
   2d9ac:	8182      	strh	r2, [r0, #12]
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2d9ae:	882b      	ldrh	r3, [r5, #0]
   2d9b0:	8003      	strh	r3, [r0, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2d9b2:	8823      	ldrh	r3, [r4, #0]
   2d9b4:	8043      	strh	r3, [r0, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2d9b6:	8863      	ldrh	r3, [r4, #2]
   2d9b8:	8083      	strh	r3, [r0, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2d9ba:	88a3      	ldrh	r3, [r4, #4]
   2d9bc:	80c3      	strh	r3, [r0, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2d9be:	88e3      	ldrh	r3, [r4, #6]
   2d9c0:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2d9c2:	4631      	mov	r1, r6
   2d9c4:	f242 0013 	movw	r0, #8211	; 0x2013
   2d9c8:	f7e9 fb70 	bl	170ac <bt_hci_cmd_send_sync>
}
   2d9cc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2d9ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d9d2:	e7fb      	b.n	2d9cc <bt_conn_le_conn_update+0x44>

0002d9d4 <l2cap_connected>:
}
   2d9d4:	4770      	bx	lr

0002d9d6 <l2cap_chan_recv>:
{
   2d9d6:	b510      	push	{r4, lr}
   2d9d8:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   2d9da:	6843      	ldr	r3, [r0, #4]
   2d9dc:	691b      	ldr	r3, [r3, #16]
   2d9de:	4798      	blx	r3
	net_buf_unref(buf);
   2d9e0:	4620      	mov	r0, r4
   2d9e2:	f7ee ff3f 	bl	1c864 <net_buf_unref>
}
   2d9e6:	bd10      	pop	{r4, pc}

0002d9e8 <l2cap_disconnected>:
{
   2d9e8:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2d9ea:	3010      	adds	r0, #16
   2d9ec:	f7f7 fc10 	bl	25210 <k_work_cancel_delayable>
}
   2d9f0:	bd08      	pop	{r3, pc}

0002d9f2 <bt_l2cap_chan_remove>:
	return list->head;
   2d9f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2d9f4:	b103      	cbz	r3, 2d9f8 <bt_l2cap_chan_remove+0x6>
   2d9f6:	3b08      	subs	r3, #8
   2d9f8:	2200      	movs	r2, #0
   2d9fa:	e016      	b.n	2da2a <bt_l2cap_chan_remove+0x38>
{
   2d9fc:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   2d9fe:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   2da02:	b142      	cbz	r2, 2da16 <bt_l2cap_chan_remove+0x24>
	return node->next;
   2da04:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   2da06:	6014      	str	r4, [r2, #0]
	return list->tail;
   2da08:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_REMOVE(slist, snode)
   2da0a:	42a1      	cmp	r1, r4
   2da0c:	d00a      	beq.n	2da24 <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   2da0e:	2200      	movs	r2, #0
   2da10:	609a      	str	r2, [r3, #8]
}
   2da12:	bc10      	pop	{r4}
   2da14:	4770      	bx	lr
	return node->next;
   2da16:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2da18:	6542      	str	r2, [r0, #84]	; 0x54
	return list->tail;
   2da1a:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_REMOVE(slist, snode)
   2da1c:	42a1      	cmp	r1, r4
   2da1e:	d1f6      	bne.n	2da0e <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   2da20:	6582      	str	r2, [r0, #88]	; 0x58
}
   2da22:	e7f4      	b.n	2da0e <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   2da24:	6582      	str	r2, [r0, #88]	; 0x58
}
   2da26:	e7f2      	b.n	2da0e <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2da28:	4613      	mov	r3, r2
   2da2a:	b14b      	cbz	r3, 2da40 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   2da2c:	428b      	cmp	r3, r1
   2da2e:	d0e5      	beq.n	2d9fc <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2da30:	f113 0208 	adds.w	r2, r3, #8
   2da34:	d0f8      	beq.n	2da28 <bt_l2cap_chan_remove+0x36>
	return node->next;
   2da36:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2da38:	2b00      	cmp	r3, #0
   2da3a:	d0f6      	beq.n	2da2a <bt_l2cap_chan_remove+0x38>
   2da3c:	3b08      	subs	r3, #8
   2da3e:	e7f4      	b.n	2da2a <bt_l2cap_chan_remove+0x38>
   2da40:	4770      	bx	lr

0002da42 <bt_l2cap_chan_del>:
{
   2da42:	b538      	push	{r3, r4, r5, lr}
   2da44:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   2da46:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   2da48:	6803      	ldr	r3, [r0, #0]
   2da4a:	b123      	cbz	r3, 2da56 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2da4c:	686b      	ldr	r3, [r5, #4]
   2da4e:	b103      	cbz	r3, 2da52 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2da50:	4798      	blx	r3
	chan->conn = NULL;
   2da52:	2300      	movs	r3, #0
   2da54:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2da56:	68e3      	ldr	r3, [r4, #12]
   2da58:	b10b      	cbz	r3, 2da5e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2da5a:	4620      	mov	r0, r4
   2da5c:	4798      	blx	r3
	if (ops->released) {
   2da5e:	69eb      	ldr	r3, [r5, #28]
   2da60:	b10b      	cbz	r3, 2da66 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   2da62:	4620      	mov	r0, r4
   2da64:	4798      	blx	r3
}
   2da66:	bd38      	pop	{r3, r4, r5, pc}

0002da68 <bt_l2cap_chan_add>:
{
   2da68:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   2da6a:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   2da6e:	2400      	movs	r4, #0
   2da70:	608c      	str	r4, [r1, #8]
	return list->tail;
   2da72:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_APPEND(slist, snode)
   2da74:	b12c      	cbz	r4, 2da82 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   2da76:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2da78:	6583      	str	r3, [r0, #88]	; 0x58
	chan->conn = conn;
   2da7a:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   2da7c:	60ca      	str	r2, [r1, #12]
}
   2da7e:	bc10      	pop	{r4}
   2da80:	4770      	bx	lr
   2da82:	6583      	str	r3, [r0, #88]	; 0x58
	list->head = node;
   2da84:	6543      	str	r3, [r0, #84]	; 0x54
}
   2da86:	e7f8      	b.n	2da7a <bt_l2cap_chan_add+0x12>

0002da88 <bt_l2cap_disconnected>:
{
   2da88:	b510      	push	{r4, lr}
	return list->head;
   2da8a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2da8c:	b140      	cbz	r0, 2daa0 <bt_l2cap_disconnected+0x18>
   2da8e:	3808      	subs	r0, #8
   2da90:	d008      	beq.n	2daa4 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2da92:	f110 0408 	adds.w	r4, r0, #8
   2da96:	d00a      	beq.n	2daae <bt_l2cap_disconnected+0x26>
	return node->next;
   2da98:	6884      	ldr	r4, [r0, #8]
   2da9a:	b144      	cbz	r4, 2daae <bt_l2cap_disconnected+0x26>
   2da9c:	3c08      	subs	r4, #8
   2da9e:	e006      	b.n	2daae <bt_l2cap_disconnected+0x26>
   2daa0:	4604      	mov	r4, r0
   2daa2:	e004      	b.n	2daae <bt_l2cap_disconnected+0x26>
   2daa4:	4604      	mov	r4, r0
   2daa6:	e002      	b.n	2daae <bt_l2cap_disconnected+0x26>
   2daa8:	4623      	mov	r3, r4
   2daaa:	4620      	mov	r0, r4
   2daac:	461c      	mov	r4, r3
   2daae:	b158      	cbz	r0, 2dac8 <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   2dab0:	f7ff ffc7 	bl	2da42 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2dab4:	2c00      	cmp	r4, #0
   2dab6:	d0f7      	beq.n	2daa8 <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2dab8:	f114 0308 	adds.w	r3, r4, #8
   2dabc:	d0f5      	beq.n	2daaa <bt_l2cap_disconnected+0x22>
	return node->next;
   2dabe:	68a3      	ldr	r3, [r4, #8]
   2dac0:	2b00      	cmp	r3, #0
   2dac2:	d0f2      	beq.n	2daaa <bt_l2cap_disconnected+0x22>
   2dac4:	3b08      	subs	r3, #8
   2dac6:	e7f0      	b.n	2daaa <bt_l2cap_disconnected+0x22>
}
   2dac8:	bd10      	pop	{r4, pc}

0002daca <bt_l2cap_create_pdu_timeout>:
{
   2daca:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   2dacc:	3104      	adds	r1, #4
   2dace:	f7eb fe1d 	bl	1970c <bt_conn_create_pdu_timeout>
}
   2dad2:	bd08      	pop	{r3, pc}

0002dad4 <bt_l2cap_send_cb>:
{
   2dad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dad6:	4605      	mov	r5, r0
   2dad8:	460f      	mov	r7, r1
   2dada:	4614      	mov	r4, r2
   2dadc:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   2dade:	2104      	movs	r1, #4
   2dae0:	f102 0008 	add.w	r0, r2, #8
   2dae4:	f7ee ffce 	bl	1ca84 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2dae8:	89a3      	ldrh	r3, [r4, #12]
   2daea:	3b04      	subs	r3, #4
   2daec:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   2daee:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2daf0:	9b06      	ldr	r3, [sp, #24]
   2daf2:	4632      	mov	r2, r6
   2daf4:	4621      	mov	r1, r4
   2daf6:	4628      	mov	r0, r5
   2daf8:	f7eb fc1a 	bl	19330 <bt_conn_send_cb>
}
   2dafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002dafe <l2cap_send_reject>:
{
   2dafe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2db02:	b083      	sub	sp, #12
   2db04:	4605      	mov	r5, r0
   2db06:	4690      	mov	r8, r2
   2db08:	461c      	mov	r4, r3
   2db0a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2db0e:	1cbb      	adds	r3, r7, #2
   2db10:	460a      	mov	r2, r1
   2db12:	2101      	movs	r1, #1
   2db14:	2000      	movs	r0, #0
   2db16:	f7ec fa2d 	bl	19f74 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2db1a:	b1b0      	cbz	r0, 2db4a <l2cap_send_reject+0x4c>
   2db1c:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2db1e:	f100 0908 	add.w	r9, r0, #8
   2db22:	2102      	movs	r1, #2
   2db24:	4648      	mov	r0, r9
   2db26:	f7ee ffcf 	bl	1cac8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2db2a:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   2db2e:	b124      	cbz	r4, 2db3a <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2db30:	463a      	mov	r2, r7
   2db32:	4621      	mov	r1, r4
   2db34:	4648      	mov	r0, r9
   2db36:	f001 f9b7 	bl	2eea8 <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2db3a:	2300      	movs	r3, #0
   2db3c:	9300      	str	r3, [sp, #0]
   2db3e:	4632      	mov	r2, r6
   2db40:	2105      	movs	r1, #5
   2db42:	4628      	mov	r0, r5
   2db44:	f7ff ffc6 	bl	2dad4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2db48:	b910      	cbnz	r0, 2db50 <l2cap_send_reject+0x52>
}
   2db4a:	b003      	add	sp, #12
   2db4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   2db50:	4630      	mov	r0, r6
   2db52:	f7ee fe87 	bl	1c864 <net_buf_unref>
}
   2db56:	e7f8      	b.n	2db4a <l2cap_send_reject+0x4c>

0002db58 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2db58:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2db5a:	b110      	cbz	r0, 2db62 <bt_l2cap_le_lookup_tx_cid+0xa>
   2db5c:	3808      	subs	r0, #8
   2db5e:	e000      	b.n	2db62 <bt_l2cap_le_lookup_tx_cid+0xa>
   2db60:	3808      	subs	r0, #8
   2db62:	b148      	cbz	r0, 2db78 <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2db64:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   2db68:	428b      	cmp	r3, r1
   2db6a:	d005      	beq.n	2db78 <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2db6c:	f110 0308 	adds.w	r3, r0, #8
   2db70:	d003      	beq.n	2db7a <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   2db72:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2db74:	2800      	cmp	r0, #0
   2db76:	d1f3      	bne.n	2db60 <bt_l2cap_le_lookup_tx_cid+0x8>
}
   2db78:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2db7a:	4618      	mov	r0, r3
   2db7c:	e7f1      	b.n	2db62 <bt_l2cap_le_lookup_tx_cid+0xa>

0002db7e <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2db7e:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2db80:	b110      	cbz	r0, 2db88 <bt_l2cap_le_lookup_rx_cid+0xa>
   2db82:	3808      	subs	r0, #8
   2db84:	e000      	b.n	2db88 <bt_l2cap_le_lookup_rx_cid+0xa>
   2db86:	3808      	subs	r0, #8
   2db88:	b148      	cbz	r0, 2db9e <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2db8a:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   2db8e:	428b      	cmp	r3, r1
   2db90:	d005      	beq.n	2db9e <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2db92:	f110 0308 	adds.w	r3, r0, #8
   2db96:	d003      	beq.n	2dba0 <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   2db98:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2db9a:	2800      	cmp	r0, #0
   2db9c:	d1f3      	bne.n	2db86 <bt_l2cap_le_lookup_rx_cid+0x8>
}
   2db9e:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2dba0:	4618      	mov	r0, r3
   2dba2:	e7f1      	b.n	2db88 <bt_l2cap_le_lookup_rx_cid+0xa>

0002dba4 <bt_l2cap_update_conn_param>:
{
   2dba4:	b570      	push	{r4, r5, r6, lr}
   2dba6:	b082      	sub	sp, #8
   2dba8:	4605      	mov	r5, r0
   2dbaa:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2dbac:	f7ec f8d2 	bl	19d54 <get_ident>
   2dbb0:	4602      	mov	r2, r0
   2dbb2:	2308      	movs	r3, #8
   2dbb4:	2112      	movs	r1, #18
   2dbb6:	2000      	movs	r0, #0
   2dbb8:	f7ec f9dc 	bl	19f74 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2dbbc:	b1e0      	cbz	r0, 2dbf8 <bt_l2cap_update_conn_param+0x54>
   2dbbe:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2dbc0:	2108      	movs	r1, #8
   2dbc2:	4408      	add	r0, r1
   2dbc4:	f7ee ff80 	bl	1cac8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2dbc8:	8823      	ldrh	r3, [r4, #0]
   2dbca:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2dbcc:	8863      	ldrh	r3, [r4, #2]
   2dbce:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2dbd0:	88a3      	ldrh	r3, [r4, #4]
   2dbd2:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2dbd4:	88e3      	ldrh	r3, [r4, #6]
   2dbd6:	80c3      	strh	r3, [r0, #6]
   2dbd8:	2300      	movs	r3, #0
   2dbda:	9300      	str	r3, [sp, #0]
   2dbdc:	4632      	mov	r2, r6
   2dbde:	2105      	movs	r1, #5
   2dbe0:	4628      	mov	r0, r5
   2dbe2:	f7ff ff77 	bl	2dad4 <bt_l2cap_send_cb>
	if (err) {
   2dbe6:	4604      	mov	r4, r0
   2dbe8:	b910      	cbnz	r0, 2dbf0 <bt_l2cap_update_conn_param+0x4c>
}
   2dbea:	4620      	mov	r0, r4
   2dbec:	b002      	add	sp, #8
   2dbee:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2dbf0:	4630      	mov	r0, r6
   2dbf2:	f7ee fe37 	bl	1c864 <net_buf_unref>
		return err;
   2dbf6:	e7f8      	b.n	2dbea <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2dbf8:	f06f 040b 	mvn.w	r4, #11
   2dbfc:	e7f5      	b.n	2dbea <bt_l2cap_update_conn_param+0x46>

0002dbfe <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2dbfe:	4770      	bx	lr

0002dc00 <att_sent>:
{
   2dc00:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   2dc02:	684b      	ldr	r3, [r1, #4]
   2dc04:	695b      	ldr	r3, [r3, #20]
   2dc06:	b10b      	cbz	r3, 2dc0c <att_sent+0xc>
   2dc08:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   2dc0a:	4798      	blx	r3
}
   2dc0c:	bd08      	pop	{r3, pc}

0002dc0e <range_is_valid>:
	if (!start || !end) {
   2dc0e:	b120      	cbz	r0, 2dc1a <range_is_valid+0xc>
   2dc10:	b119      	cbz	r1, 2dc1a <range_is_valid+0xc>
	if (start > end) {
   2dc12:	4288      	cmp	r0, r1
   2dc14:	d806      	bhi.n	2dc24 <range_is_valid+0x16>
	return true;
   2dc16:	2001      	movs	r0, #1
}
   2dc18:	4770      	bx	lr
		if (err) {
   2dc1a:	b10a      	cbz	r2, 2dc20 <range_is_valid+0x12>
			*err = 0U;
   2dc1c:	2300      	movs	r3, #0
   2dc1e:	8013      	strh	r3, [r2, #0]
		return false;
   2dc20:	2000      	movs	r0, #0
   2dc22:	4770      	bx	lr
		if (err) {
   2dc24:	b102      	cbz	r2, 2dc28 <range_is_valid+0x1a>
			*err = start;
   2dc26:	8010      	strh	r0, [r2, #0]
		return false;
   2dc28:	2000      	movs	r0, #0
   2dc2a:	4770      	bx	lr

0002dc2c <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2dc2c:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2dc30:	d201      	bcs.n	2dc36 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   2dc32:	200e      	movs	r0, #14
}
   2dc34:	4770      	bx	lr
		return -err;
   2dc36:	4240      	negs	r0, r0
   2dc38:	b2c0      	uxtb	r0, r0
   2dc3a:	4770      	bx	lr

0002dc3c <attr_read_type_cb>:
{
   2dc3c:	b410      	push	{r4}
	if (!data->rsp->len) {
   2dc3e:	68d4      	ldr	r4, [r2, #12]
   2dc40:	7823      	ldrb	r3, [r4, #0]
   2dc42:	b923      	cbnz	r3, 2dc4e <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   2dc44:	3102      	adds	r1, #2
   2dc46:	7021      	strb	r1, [r4, #0]
	return true;
   2dc48:	2001      	movs	r0, #1
}
   2dc4a:	bc10      	pop	{r4}
   2dc4c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2dc4e:	3102      	adds	r1, #2
   2dc50:	428b      	cmp	r3, r1
   2dc52:	d005      	beq.n	2dc60 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   2dc54:	8983      	ldrh	r3, [r0, #12]
   2dc56:	3b02      	subs	r3, #2
   2dc58:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2dc5a:	2000      	movs	r0, #0
   2dc5c:	6110      	str	r0, [r2, #16]
		return false;
   2dc5e:	e7f4      	b.n	2dc4a <attr_read_type_cb+0xe>
	return true;
   2dc60:	2001      	movs	r0, #1
   2dc62:	e7f2      	b.n	2dc4a <attr_read_type_cb+0xe>

0002dc64 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2dc64:	68d0      	ldr	r0, [r2, #12]
   2dc66:	7803      	ldrb	r3, [r0, #0]
   2dc68:	b91b      	cbnz	r3, 2dc72 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2dc6a:	3104      	adds	r1, #4
   2dc6c:	7001      	strb	r1, [r0, #0]
	return true;
   2dc6e:	2001      	movs	r0, #1
   2dc70:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2dc72:	3104      	adds	r1, #4
   2dc74:	428b      	cmp	r3, r1
   2dc76:	d006      	beq.n	2dc86 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   2dc78:	6891      	ldr	r1, [r2, #8]
   2dc7a:	898b      	ldrh	r3, [r1, #12]
   2dc7c:	3b04      	subs	r3, #4
   2dc7e:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2dc80:	2000      	movs	r0, #0
   2dc82:	6110      	str	r0, [r2, #16]
		return false;
   2dc84:	4770      	bx	lr
	return true;
   2dc86:	2001      	movs	r0, #1
}
   2dc88:	4770      	bx	lr

0002dc8a <att_prepare_write_req>:
}
   2dc8a:	2006      	movs	r0, #6
   2dc8c:	4770      	bx	lr

0002dc8e <att_exec_write_req>:
}
   2dc8e:	2006      	movs	r0, #6
   2dc90:	4770      	bx	lr

0002dc92 <att_op_get_type>:
	switch (op) {
   2dc92:	1e43      	subs	r3, r0, #1
   2dc94:	2bd1      	cmp	r3, #209	; 0xd1
   2dc96:	d874      	bhi.n	2dd82 <att_op_get_type+0xf0>
   2dc98:	e8df f003 	tbb	[pc, r3]
   2dc9c:	696d696d 	.word	0x696d696d
   2dca0:	696d696d 	.word	0x696d696d
   2dca4:	696d696d 	.word	0x696d696d
   2dca8:	696d696d 	.word	0x696d696d
   2dcac:	736d696d 	.word	0x736d696d
   2dcb0:	696d6973 	.word	0x696d6973
   2dcb4:	736f736d 	.word	0x736f736d
   2dcb8:	73737871 	.word	0x73737871
   2dcbc:	73737373 	.word	0x73737373
   2dcc0:	73737373 	.word	0x73737373
   2dcc4:	73737373 	.word	0x73737373
   2dcc8:	73737373 	.word	0x73737373
   2dccc:	73737373 	.word	0x73737373
   2dcd0:	73737373 	.word	0x73737373
   2dcd4:	73737373 	.word	0x73737373
   2dcd8:	73737373 	.word	0x73737373
   2dcdc:	73737373 	.word	0x73737373
   2dce0:	73737373 	.word	0x73737373
   2dce4:	73737373 	.word	0x73737373
   2dce8:	73737373 	.word	0x73737373
   2dcec:	73736b73 	.word	0x73736b73
   2dcf0:	73737373 	.word	0x73737373
   2dcf4:	73737373 	.word	0x73737373
   2dcf8:	73737373 	.word	0x73737373
   2dcfc:	73737373 	.word	0x73737373
   2dd00:	73737373 	.word	0x73737373
   2dd04:	73737373 	.word	0x73737373
   2dd08:	73737373 	.word	0x73737373
   2dd0c:	73737373 	.word	0x73737373
   2dd10:	73737373 	.word	0x73737373
   2dd14:	73737373 	.word	0x73737373
   2dd18:	73737373 	.word	0x73737373
   2dd1c:	73737373 	.word	0x73737373
   2dd20:	73737373 	.word	0x73737373
   2dd24:	73737373 	.word	0x73737373
   2dd28:	73737373 	.word	0x73737373
   2dd2c:	73737373 	.word	0x73737373
   2dd30:	73737373 	.word	0x73737373
   2dd34:	73737373 	.word	0x73737373
   2dd38:	73737373 	.word	0x73737373
   2dd3c:	73737373 	.word	0x73737373
   2dd40:	73737373 	.word	0x73737373
   2dd44:	73737373 	.word	0x73737373
   2dd48:	73737373 	.word	0x73737373
   2dd4c:	73737373 	.word	0x73737373
   2dd50:	73737373 	.word	0x73737373
   2dd54:	73737373 	.word	0x73737373
   2dd58:	73737373 	.word	0x73737373
   2dd5c:	73737373 	.word	0x73737373
   2dd60:	73737373 	.word	0x73737373
   2dd64:	73737373 	.word	0x73737373
   2dd68:	73737373 	.word	0x73737373
   2dd6c:	6b73      	.short	0x6b73
{
   2dd6e:	2001      	movs	r0, #1
   2dd70:	4770      	bx	lr
		return ATT_COMMAND;
   2dd72:	2000      	movs	r0, #0
   2dd74:	4770      	bx	lr
		return ATT_RESPONSE;
   2dd76:	2002      	movs	r0, #2
   2dd78:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2dd7a:	2003      	movs	r0, #3
   2dd7c:	4770      	bx	lr
		return ATT_INDICATION;
   2dd7e:	2005      	movs	r0, #5
   2dd80:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   2dd82:	f010 0f40 	tst.w	r0, #64	; 0x40
   2dd86:	d103      	bne.n	2dd90 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   2dd88:	2006      	movs	r0, #6
   2dd8a:	4770      	bx	lr
		return ATT_CONFIRMATION;
   2dd8c:	2004      	movs	r0, #4
   2dd8e:	4770      	bx	lr
		return ATT_COMMAND;
   2dd90:	2000      	movs	r0, #0
}
   2dd92:	4770      	bx	lr

0002dd94 <att_chan_attach>:
{
   2dd94:	b538      	push	{r3, r4, r5, lr}
   2dd96:	4604      	mov	r4, r0
   2dd98:	460d      	mov	r5, r1
	return list->head;
   2dd9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (sys_slist_is_empty(&att->chans)) {
   2dd9c:	b143      	cbz	r3, 2ddb0 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   2dd9e:	f505 73aa 	add.w	r3, r5, #340	; 0x154
   2dda2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   2dda4:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	list->head = node;
   2dda8:	62a3      	str	r3, [r4, #40]	; 0x28
	return list->tail;
   2ddaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   2ddac:	b122      	cbz	r2, 2ddb8 <att_chan_attach+0x24>
}
   2ddae:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   2ddb0:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   2ddb2:	f002 fbdb 	bl	3056c <z_impl_k_queue_init>
}
   2ddb6:	e7f2      	b.n	2dd9e <att_chan_attach+0xa>
	list->tail = node;
   2ddb8:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   2ddba:	e7f8      	b.n	2ddae <att_chan_attach+0x1a>

0002ddbc <chan_req_send>:
{
   2ddbc:	b570      	push	{r4, r5, r6, lr}
   2ddbe:	4606      	mov	r6, r0
   2ddc0:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ddc2:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   2ddc6:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   2ddc8:	2200      	movs	r2, #0
	while (buf) {
   2ddca:	b11b      	cbz	r3, 2ddd4 <chan_req_send+0x18>
		bytes += buf->len;
   2ddcc:	899c      	ldrh	r4, [r3, #12]
   2ddce:	4422      	add	r2, r4
		buf = buf->frags;
   2ddd0:	681b      	ldr	r3, [r3, #0]
   2ddd2:	e7fa      	b.n	2ddca <chan_req_send+0xe>
   2ddd4:	4291      	cmp	r1, r2
   2ddd6:	d30e      	bcc.n	2ddf6 <chan_req_send+0x3a>
	chan->req = req;
   2ddd8:	f8c6 50fc 	str.w	r5, [r6, #252]	; 0xfc
	buf = req->buf;
   2dddc:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   2ddde:	2200      	movs	r2, #0
   2dde0:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   2dde2:	4621      	mov	r1, r4
   2dde4:	4630      	mov	r0, r6
   2dde6:	f7ec fb27 	bl	1a438 <chan_send>
	if (err) {
   2ddea:	b118      	cbz	r0, 2ddf4 <chan_req_send+0x38>
		req->buf = buf;
   2ddec:	60ac      	str	r4, [r5, #8]
		chan->req = NULL;
   2ddee:	2300      	movs	r3, #0
   2ddf0:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
}
   2ddf4:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2ddf6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2ddfa:	e7fb      	b.n	2ddf4 <chan_req_send+0x38>

0002ddfc <bt_att_status>:
{
   2ddfc:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ddfe:	f3bf 8f5b 	dmb	ish
   2de02:	680b      	ldr	r3, [r1, #0]
   2de04:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2de08:	f013 0f01 	tst.w	r3, #1
   2de0c:	d007      	beq.n	2de1e <bt_att_status+0x22>
   2de0e:	4604      	mov	r4, r0
   2de10:	3808      	subs	r0, #8
	if (!chan->att) {
   2de12:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2de16:	b113      	cbz	r3, 2de1e <bt_att_status+0x22>
	if (chan->req) {
   2de18:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
   2de1c:	b102      	cbz	r2, 2de20 <bt_att_status+0x24>
}
   2de1e:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   2de20:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2de22:	2d00      	cmp	r5, #0
   2de24:	d0fb      	beq.n	2de1e <bt_att_status+0x22>
	return node->next;
   2de26:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   2de28:	605a      	str	r2, [r3, #4]
	return list->tail;
   2de2a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2de2c:	42a9      	cmp	r1, r5
   2de2e:	d00e      	beq.n	2de4e <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2de30:	4629      	mov	r1, r5
   2de32:	f7ec fb53 	bl	1a4dc <bt_att_chan_req_send>
   2de36:	2800      	cmp	r0, #0
   2de38:	daf1      	bge.n	2de1e <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   2de3a:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   2de3e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2de40:	602a      	str	r2, [r5, #0]
	list->head = node;
   2de42:	605d      	str	r5, [r3, #4]
	return list->tail;
   2de44:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   2de46:	2a00      	cmp	r2, #0
   2de48:	d1e9      	bne.n	2de1e <bt_att_status+0x22>
	list->tail = node;
   2de4a:	609d      	str	r5, [r3, #8]
}
   2de4c:	e7e7      	b.n	2de1e <bt_att_status+0x22>
	list->tail = node;
   2de4e:	609a      	str	r2, [r3, #8]
}
   2de50:	e7ee      	b.n	2de30 <bt_att_status+0x34>

0002de52 <att_req_send_process>:
{
   2de52:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   2de54:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   2de56:	2e00      	cmp	r6, #0
   2de58:	d038      	beq.n	2decc <att_req_send_process+0x7a>
   2de5a:	4605      	mov	r5, r0
	return node->next;
   2de5c:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   2de5e:	6043      	str	r3, [r0, #4]
	return list->tail;
   2de60:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2de62:	4296      	cmp	r6, r2
   2de64:	d00d      	beq.n	2de82 <att_req_send_process+0x30>
	return list->head;
   2de66:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2de68:	b198      	cbz	r0, 2de92 <att_req_send_process+0x40>
   2de6a:	f5b0 70aa 	subs.w	r0, r0, #340	; 0x154
   2de6e:	d012      	beq.n	2de96 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2de70:	f510 74aa 	adds.w	r4, r0, #340	; 0x154
   2de74:	d014      	beq.n	2dea0 <att_req_send_process+0x4e>
	return node->next;
   2de76:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
   2de7a:	b18c      	cbz	r4, 2dea0 <att_req_send_process+0x4e>
   2de7c:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
   2de80:	e00e      	b.n	2dea0 <att_req_send_process+0x4e>
	list->tail = node;
   2de82:	6083      	str	r3, [r0, #8]
}
   2de84:	e7ef      	b.n	2de66 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2de86:	4631      	mov	r1, r6
   2de88:	f7ec fb28 	bl	1a4dc <bt_att_chan_req_send>
   2de8c:	2800      	cmp	r0, #0
   2de8e:	db0c      	blt.n	2deaa <att_req_send_process+0x58>
   2de90:	e01c      	b.n	2decc <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2de92:	4604      	mov	r4, r0
   2de94:	e004      	b.n	2dea0 <att_req_send_process+0x4e>
   2de96:	4604      	mov	r4, r0
   2de98:	e002      	b.n	2dea0 <att_req_send_process+0x4e>
   2de9a:	4623      	mov	r3, r4
   2de9c:	4620      	mov	r0, r4
   2de9e:	461c      	mov	r4, r3
   2dea0:	b178      	cbz	r0, 2dec2 <att_req_send_process+0x70>
		if (!chan->req) {
   2dea2:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2dea6:	2b00      	cmp	r3, #0
   2dea8:	d0ed      	beq.n	2de86 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2deaa:	2c00      	cmp	r4, #0
   2deac:	d0f5      	beq.n	2de9a <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2deae:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   2deb2:	d0f3      	beq.n	2de9c <att_req_send_process+0x4a>
	return node->next;
   2deb4:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   2deb8:	2b00      	cmp	r3, #0
   2deba:	d0ef      	beq.n	2de9c <att_req_send_process+0x4a>
   2debc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   2dec0:	e7ec      	b.n	2de9c <att_req_send_process+0x4a>
	return list->head;
   2dec2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2dec4:	6033      	str	r3, [r6, #0]
	list->head = node;
   2dec6:	606e      	str	r6, [r5, #4]
	return list->tail;
   2dec8:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2deca:	b103      	cbz	r3, 2dece <att_req_send_process+0x7c>
}
   2decc:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   2dece:	60ae      	str	r6, [r5, #8]
}
   2ded0:	e7fc      	b.n	2decc <att_req_send_process+0x7a>

0002ded2 <bt_att_chan_send>:
{
   2ded2:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   2ded4:	f7ec fab0 	bl	1a438 <chan_send>
}
   2ded8:	bd08      	pop	{r3, pc}

0002deda <chan_req_sent>:
{
   2deda:	b508      	push	{r3, lr}
	if (chan->req) {
   2dedc:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2dee0:	b133      	cbz	r3, 2def0 <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2dee2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2dee6:	2300      	movs	r3, #0
   2dee8:	f500 7090 	add.w	r0, r0, #288	; 0x120
   2deec:	f7f7 f988 	bl	25200 <k_work_reschedule>
}
   2def0:	bd08      	pop	{r3, pc}

0002def2 <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2def2:	30f8      	adds	r0, #248	; 0xf8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2def4:	f3bf 8f5b 	dmb	ish
   2def8:	e850 3f00 	ldrex	r3, [r0]
   2defc:	f023 0302 	bic.w	r3, r3, #2
   2df00:	e840 3200 	strex	r2, r3, [r0]
   2df04:	2a00      	cmp	r2, #0
   2df06:	d1f7      	bne.n	2def8 <chan_cfm_sent+0x6>
   2df08:	f3bf 8f5b 	dmb	ish
}
   2df0c:	4770      	bx	lr

0002df0e <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2df0e:	30f8      	adds	r0, #248	; 0xf8
   2df10:	f3bf 8f5b 	dmb	ish
   2df14:	e850 3f00 	ldrex	r3, [r0]
   2df18:	f023 0301 	bic.w	r3, r3, #1
   2df1c:	e840 3200 	strex	r2, r3, [r0]
   2df20:	2a00      	cmp	r2, #0
   2df22:	d1f7      	bne.n	2df14 <chan_rsp_sent+0x6>
   2df24:	f3bf 8f5b 	dmb	ish
}
   2df28:	4770      	bx	lr

0002df2a <process_queue>:
{
   2df2a:	b570      	push	{r4, r5, r6, lr}
   2df2c:	4605      	mov	r5, r0
   2df2e:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2df30:	2200      	movs	r2, #0
   2df32:	2300      	movs	r3, #0
   2df34:	4608      	mov	r0, r1
   2df36:	f7ee fbfd 	bl	1c734 <net_buf_get>
	if (buf) {
   2df3a:	b170      	cbz	r0, 2df5a <process_queue+0x30>
   2df3c:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   2df3e:	2200      	movs	r2, #0
   2df40:	4601      	mov	r1, r0
   2df42:	4628      	mov	r0, r5
   2df44:	f7ec fa78 	bl	1a438 <chan_send>
		if (err) {
   2df48:	4605      	mov	r5, r0
   2df4a:	b908      	cbnz	r0, 2df50 <process_queue+0x26>
}
   2df4c:	4628      	mov	r0, r5
   2df4e:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2df50:	4631      	mov	r1, r6
   2df52:	4620      	mov	r0, r4
   2df54:	f002 fb23 	bl	3059e <k_queue_prepend>
			return err;
   2df58:	e7f8      	b.n	2df4c <process_queue+0x22>
	return -ENOENT;
   2df5a:	f06f 0501 	mvn.w	r5, #1
   2df5e:	e7f5      	b.n	2df4c <process_queue+0x22>

0002df60 <bt_att_sent>:
{
   2df60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2df62:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2df64:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   2df68:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   2df6c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   2df70:	b10b      	cbz	r3, 2df76 <bt_att_sent+0x16>
		chan->sent(chan);
   2df72:	4630      	mov	r0, r6
   2df74:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2df76:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2df7a:	f3bf 8f5b 	dmb	ish
   2df7e:	e853 2f00 	ldrex	r2, [r3]
   2df82:	f022 0210 	bic.w	r2, r2, #16
   2df86:	e843 2100 	strex	r1, r2, [r3]
   2df8a:	2900      	cmp	r1, #0
   2df8c:	d1f7      	bne.n	2df7e <bt_att_sent+0x1e>
   2df8e:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2df92:	b145      	cbz	r5, 2dfa6 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2df94:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   2df98:	b133      	cbz	r3, 2dfa8 <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   2df9a:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
   2df9e:	4630      	mov	r0, r6
   2dfa0:	f7ff ffc3 	bl	2df2a <process_queue>
	if (!err) {
   2dfa4:	b9c0      	cbnz	r0, 2dfd8 <bt_att_sent+0x78>
}
   2dfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   2dfa8:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2dfaa:	2f00      	cmp	r7, #0
   2dfac:	d0f5      	beq.n	2df9a <bt_att_sent+0x3a>
	return node->next;
   2dfae:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2dfb0:	606b      	str	r3, [r5, #4]
	return list->tail;
   2dfb2:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2dfb4:	42ba      	cmp	r2, r7
   2dfb6:	d00d      	beq.n	2dfd4 <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2dfb8:	4639      	mov	r1, r7
   2dfba:	4630      	mov	r0, r6
   2dfbc:	f7ff fefe 	bl	2ddbc <chan_req_send>
   2dfc0:	2800      	cmp	r0, #0
   2dfc2:	daf0      	bge.n	2dfa6 <bt_att_sent+0x46>
	return list->head;
   2dfc4:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2dfc6:	603b      	str	r3, [r7, #0]
	list->head = node;
   2dfc8:	606f      	str	r7, [r5, #4]
	return list->tail;
   2dfca:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2dfcc:	2b00      	cmp	r3, #0
   2dfce:	d1e4      	bne.n	2df9a <bt_att_sent+0x3a>
	list->tail = node;
   2dfd0:	60af      	str	r7, [r5, #8]
}
   2dfd2:	e7e2      	b.n	2df9a <bt_att_sent+0x3a>
	list->tail = node;
   2dfd4:	60ab      	str	r3, [r5, #8]
}
   2dfd6:	e7ef      	b.n	2dfb8 <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   2dfd8:	f105 010c 	add.w	r1, r5, #12
   2dfdc:	4630      	mov	r0, r6
   2dfde:	f7ff ffa4 	bl	2df2a <process_queue>
   2dfe2:	e7e0      	b.n	2dfa6 <bt_att_sent+0x46>

0002dfe4 <att_send_process>:
{
   2dfe4:	b570      	push	{r4, r5, r6, lr}
   2dfe6:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   2dfe8:	2200      	movs	r2, #0
   2dfea:	2300      	movs	r3, #0
   2dfec:	300c      	adds	r0, #12
   2dfee:	f7ee fba1 	bl	1c734 <net_buf_get>
	if (!buf) {
   2dff2:	b360      	cbz	r0, 2e04e <att_send_process+0x6a>
   2dff4:	4605      	mov	r5, r0
	return list->head;
   2dff6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2dff8:	b158      	cbz	r0, 2e012 <att_send_process+0x2e>
   2dffa:	f5b0 70aa 	subs.w	r0, r0, #340	; 0x154
   2dffe:	d00c      	beq.n	2e01a <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e000:	f510 74aa 	adds.w	r4, r0, #340	; 0x154
   2e004:	d006      	beq.n	2e014 <att_send_process+0x30>
	return node->next;
   2e006:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
   2e00a:	b11c      	cbz	r4, 2e014 <att_send_process+0x30>
   2e00c:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
   2e010:	e000      	b.n	2e014 <att_send_process+0x30>
   2e012:	4604      	mov	r4, r0
   2e014:	f06f 0301 	mvn.w	r3, #1
   2e018:	e004      	b.n	2e024 <att_send_process+0x40>
   2e01a:	4604      	mov	r4, r0
   2e01c:	e7fa      	b.n	2e014 <att_send_process+0x30>
   2e01e:	4622      	mov	r2, r4
   2e020:	4620      	mov	r0, r4
   2e022:	4614      	mov	r4, r2
   2e024:	b188      	cbz	r0, 2e04a <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   2e026:	2200      	movs	r2, #0
   2e028:	4629      	mov	r1, r5
   2e02a:	f7ff ff52 	bl	2ded2 <bt_att_chan_send>
		if (err >= 0) {
   2e02e:	1e03      	subs	r3, r0, #0
   2e030:	da0b      	bge.n	2e04a <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e032:	2c00      	cmp	r4, #0
   2e034:	d0f3      	beq.n	2e01e <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e036:	f514 72aa 	adds.w	r2, r4, #340	; 0x154
   2e03a:	d0f1      	beq.n	2e020 <att_send_process+0x3c>
	return node->next;
   2e03c:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   2e040:	2a00      	cmp	r2, #0
   2e042:	d0ed      	beq.n	2e020 <att_send_process+0x3c>
   2e044:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
   2e048:	e7ea      	b.n	2e020 <att_send_process+0x3c>
	if (err < 0) {
   2e04a:	2b00      	cmp	r3, #0
   2e04c:	db00      	blt.n	2e050 <att_send_process+0x6c>
}
   2e04e:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   2e050:	4629      	mov	r1, r5
   2e052:	f106 000c 	add.w	r0, r6, #12
   2e056:	f002 faa2 	bl	3059e <k_queue_prepend>
   2e05a:	e7f8      	b.n	2e04e <att_send_process+0x6a>

0002e05c <write_cb>:
{
   2e05c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e05e:	b083      	sub	sp, #12
   2e060:	4606      	mov	r6, r0
   2e062:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2e064:	222a      	movs	r2, #42	; 0x2a
   2e066:	4601      	mov	r1, r0
   2e068:	6820      	ldr	r0, [r4, #0]
   2e06a:	f000 fe10 	bl	2ec8e <bt_gatt_check_perm>
   2e06e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2e070:	bb08      	cbnz	r0, 2e0b6 <write_cb+0x5a>
   2e072:	4605      	mov	r5, r0
	if (!data->req) {
   2e074:	7a23      	ldrb	r3, [r4, #8]
   2e076:	b11b      	cbz	r3, 2e080 <write_cb+0x24>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2e078:	2b18      	cmp	r3, #24
   2e07a:	d016      	beq.n	2e0aa <write_cb+0x4e>
	uint8_t flags = 0U;
   2e07c:	4603      	mov	r3, r0
   2e07e:	e000      	b.n	2e082 <write_cb+0x26>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2e080:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2e082:	68b7      	ldr	r7, [r6, #8]
   2e084:	9301      	str	r3, [sp, #4]
   2e086:	8a63      	ldrh	r3, [r4, #18]
   2e088:	9300      	str	r3, [sp, #0]
   2e08a:	8a23      	ldrh	r3, [r4, #16]
   2e08c:	68e2      	ldr	r2, [r4, #12]
   2e08e:	4631      	mov	r1, r6
   2e090:	6820      	ldr	r0, [r4, #0]
   2e092:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2e094:	2800      	cmp	r0, #0
   2e096:	db02      	blt.n	2e09e <write_cb+0x42>
   2e098:	8a23      	ldrh	r3, [r4, #16]
   2e09a:	4298      	cmp	r0, r3
   2e09c:	d007      	beq.n	2e0ae <write_cb+0x52>
		data->err = err_to_att(write);
   2e09e:	f7ff fdc5 	bl	2dc2c <err_to_att>
   2e0a2:	7520      	strb	r0, [r4, #20]
}
   2e0a4:	4628      	mov	r0, r5
   2e0a6:	b003      	add	sp, #12
   2e0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2e0aa:	2304      	movs	r3, #4
   2e0ac:	e7e9      	b.n	2e082 <write_cb+0x26>
	data->err = 0U;
   2e0ae:	2300      	movs	r3, #0
   2e0b0:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2e0b2:	2501      	movs	r5, #1
   2e0b4:	e7f6      	b.n	2e0a4 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
   2e0b6:	2500      	movs	r5, #0
   2e0b8:	e7f4      	b.n	2e0a4 <write_cb+0x48>

0002e0ba <bt_att_chan_send_rsp>:
{
   2e0ba:	b538      	push	{r3, r4, r5, lr}
   2e0bc:	4604      	mov	r4, r0
   2e0be:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   2e0c0:	f7ff ff07 	bl	2ded2 <bt_att_chan_send>
	if (err) {
   2e0c4:	b900      	cbnz	r0, 2e0c8 <bt_att_chan_send_rsp+0xe>
}
   2e0c6:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   2e0c8:	4629      	mov	r1, r5
   2e0ca:	f504 7080 	add.w	r0, r4, #256	; 0x100
   2e0ce:	f7ee fb91 	bl	1c7f4 <net_buf_put>
}
   2e0d2:	e7f8      	b.n	2e0c6 <bt_att_chan_send_rsp+0xc>

0002e0d4 <att_chan_read>:
{
   2e0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e0d8:	b085      	sub	sp, #20
   2e0da:	4680      	mov	r8, r0
   2e0dc:	4689      	mov	r9, r1
   2e0de:	9202      	str	r2, [sp, #8]
   2e0e0:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   2e0e2:	6881      	ldr	r1, [r0, #8]
   2e0e4:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2e0e6:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   2e0ea:	4613      	mov	r3, r2
	size_t bytes = 0;
   2e0ec:	2200      	movs	r2, #0
	while (buf) {
   2e0ee:	b11b      	cbz	r3, 2e0f8 <att_chan_read+0x24>
		bytes += buf->len;
   2e0f0:	8999      	ldrh	r1, [r3, #12]
   2e0f2:	440a      	add	r2, r1
		buf = buf->frags;
   2e0f4:	681b      	ldr	r3, [r3, #0]
   2e0f6:	e7fa      	b.n	2e0ee <att_chan_read+0x1a>
   2e0f8:	4290      	cmp	r0, r2
   2e0fa:	d804      	bhi.n	2e106 <att_chan_read+0x32>
		return 0;
   2e0fc:	2400      	movs	r4, #0
}
   2e0fe:	4620      	mov	r0, r4
   2e100:	b005      	add	sp, #20
   2e102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   2e106:	9802      	ldr	r0, [sp, #8]
   2e108:	f7ee fc02 	bl	1c910 <net_buf_frag_last>
   2e10c:	4607      	mov	r7, r0
	size_t len, total = 0;
   2e10e:	f04f 0a00 	mov.w	sl, #0
   2e112:	e083      	b.n	2e21c <att_chan_read+0x148>
		bytes += buf->len;
   2e114:	8999      	ldrh	r1, [r3, #12]
   2e116:	440a      	add	r2, r1
		buf = buf->frags;
   2e118:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2e11a:	2b00      	cmp	r3, #0
   2e11c:	d1fa      	bne.n	2e114 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2e11e:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2e120:	f107 0608 	add.w	r6, r7, #8
   2e124:	4630      	mov	r0, r6
   2e126:	f000 feb6 	bl	2ee96 <net_buf_simple_tailroom>
   2e12a:	4284      	cmp	r4, r0
   2e12c:	d32c      	bcc.n	2e188 <att_chan_read+0xb4>
   2e12e:	4630      	mov	r0, r6
   2e130:	f000 feb1 	bl	2ee96 <net_buf_simple_tailroom>
   2e134:	4606      	mov	r6, r0
		if (!len) {
   2e136:	2e00      	cmp	r6, #0
   2e138:	d032      	beq.n	2e1a0 <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2e13a:	f8d9 4004 	ldr.w	r4, [r9, #4]
   2e13e:	68b9      	ldr	r1, [r7, #8]
   2e140:	89ba      	ldrh	r2, [r7, #12]
   2e142:	9500      	str	r5, [sp, #0]
   2e144:	b2b3      	uxth	r3, r6
   2e146:	440a      	add	r2, r1
   2e148:	4649      	mov	r1, r9
   2e14a:	9803      	ldr	r0, [sp, #12]
   2e14c:	47a0      	blx	r4
		if (read < 0) {
   2e14e:	1e04      	subs	r4, r0, #0
   2e150:	db5a      	blt.n	2e208 <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   2e152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e154:	b12b      	cbz	r3, 2e162 <att_chan_read+0x8e>
   2e156:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2e158:	4621      	mov	r1, r4
   2e15a:	4638      	mov	r0, r7
   2e15c:	4798      	blx	r3
   2e15e:	2800      	cmp	r0, #0
   2e160:	d061      	beq.n	2e226 <att_chan_read+0x152>
		net_buf_add(frag, read);
   2e162:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   2e164:	4621      	mov	r1, r4
   2e166:	f107 0008 	add.w	r0, r7, #8
   2e16a:	f7ee fcad 	bl	1cac8 <net_buf_simple_add>
		total += read;
   2e16e:	44a2      	add	sl, r4
		offset += read;
   2e170:	4425      	add	r5, r4
   2e172:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2e174:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   2e178:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2e17a:	2200      	movs	r2, #0
	while (buf) {
   2e17c:	2b00      	cmp	r3, #0
   2e17e:	d049      	beq.n	2e214 <att_chan_read+0x140>
		bytes += buf->len;
   2e180:	8999      	ldrh	r1, [r3, #12]
   2e182:	440a      	add	r2, r1
		buf = buf->frags;
   2e184:	681b      	ldr	r3, [r3, #0]
   2e186:	e7f9      	b.n	2e17c <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2e188:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   2e18c:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2e18e:	2200      	movs	r2, #0
	while (buf) {
   2e190:	e002      	b.n	2e198 <att_chan_read+0xc4>
		bytes += buf->len;
   2e192:	8999      	ldrh	r1, [r3, #12]
   2e194:	440a      	add	r2, r1
		buf = buf->frags;
   2e196:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2e198:	2b00      	cmp	r3, #0
   2e19a:	d1fa      	bne.n	2e192 <att_chan_read+0xbe>
   2e19c:	1ab6      	subs	r6, r6, r2
   2e19e:	e7ca      	b.n	2e136 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2e1a0:	9b02      	ldr	r3, [sp, #8]
   2e1a2:	7998      	ldrb	r0, [r3, #6]
   2e1a4:	f7ee f968 	bl	1c478 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2e1a8:	2200      	movs	r2, #0
   2e1aa:	2300      	movs	r3, #0
   2e1ac:	f000 fe60 	bl	2ee70 <net_buf_alloc_fixed>
			if (!frag) {
   2e1b0:	4607      	mov	r7, r0
   2e1b2:	b150      	cbz	r0, 2e1ca <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   2e1b4:	4601      	mov	r1, r0
   2e1b6:	f8dd b008 	ldr.w	fp, [sp, #8]
   2e1ba:	4658      	mov	r0, fp
   2e1bc:	f7ee fbf6 	bl	1c9ac <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2e1c0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   2e1c4:	4632      	mov	r2, r6
	while (buf) {
   2e1c6:	465b      	mov	r3, fp
   2e1c8:	e004      	b.n	2e1d4 <att_chan_read+0x100>
				return total;
   2e1ca:	4654      	mov	r4, sl
   2e1cc:	e797      	b.n	2e0fe <att_chan_read+0x2a>
		bytes += buf->len;
   2e1ce:	8999      	ldrh	r1, [r3, #12]
   2e1d0:	440a      	add	r2, r1
		buf = buf->frags;
   2e1d2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2e1d4:	2b00      	cmp	r3, #0
   2e1d6:	d1fa      	bne.n	2e1ce <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2e1d8:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2e1da:	f107 0b08 	add.w	fp, r7, #8
   2e1de:	4658      	mov	r0, fp
   2e1e0:	f000 fe59 	bl	2ee96 <net_buf_simple_tailroom>
   2e1e4:	4284      	cmp	r4, r0
   2e1e6:	d304      	bcc.n	2e1f2 <att_chan_read+0x11e>
   2e1e8:	4658      	mov	r0, fp
   2e1ea:	f000 fe54 	bl	2ee96 <net_buf_simple_tailroom>
   2e1ee:	4606      	mov	r6, r0
   2e1f0:	e7a3      	b.n	2e13a <att_chan_read+0x66>
   2e1f2:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   2e1f6:	9b02      	ldr	r3, [sp, #8]
   2e1f8:	e002      	b.n	2e200 <att_chan_read+0x12c>
		bytes += buf->len;
   2e1fa:	899a      	ldrh	r2, [r3, #12]
   2e1fc:	4416      	add	r6, r2
		buf = buf->frags;
   2e1fe:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2e200:	2b00      	cmp	r3, #0
   2e202:	d1fa      	bne.n	2e1fa <att_chan_read+0x126>
   2e204:	1b8e      	subs	r6, r1, r6
   2e206:	e798      	b.n	2e13a <att_chan_read+0x66>
			if (total) {
   2e208:	f1ba 0f00 	cmp.w	sl, #0
   2e20c:	f43f af77 	beq.w	2e0fe <att_chan_read+0x2a>
				return total;
   2e210:	4654      	mov	r4, sl
   2e212:	e774      	b.n	2e0fe <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2e214:	4290      	cmp	r0, r2
   2e216:	d906      	bls.n	2e226 <att_chan_read+0x152>
   2e218:	45b3      	cmp	fp, r6
   2e21a:	d104      	bne.n	2e226 <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2e21c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2e220:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2e222:	2200      	movs	r2, #0
	while (buf) {
   2e224:	e779      	b.n	2e11a <att_chan_read+0x46>
	return total;
   2e226:	4654      	mov	r4, sl
   2e228:	e769      	b.n	2e0fe <att_chan_read+0x2a>

0002e22a <read_cb>:
{
   2e22a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e22c:	b083      	sub	sp, #12
   2e22e:	4606      	mov	r6, r0
   2e230:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2e232:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2e234:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   2e236:	2300      	movs	r3, #0
   2e238:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e23a:	2215      	movs	r2, #21
   2e23c:	4631      	mov	r1, r6
   2e23e:	f000 fd26 	bl	2ec8e <bt_gatt_check_perm>
   2e242:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2e244:	b118      	cbz	r0, 2e24e <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2e246:	2500      	movs	r5, #0
}
   2e248:	4628      	mov	r0, r5
   2e24a:	b003      	add	sp, #12
   2e24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e24e:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2e250:	2300      	movs	r3, #0
   2e252:	9301      	str	r3, [sp, #4]
   2e254:	9300      	str	r3, [sp, #0]
   2e256:	88a3      	ldrh	r3, [r4, #4]
   2e258:	68a2      	ldr	r2, [r4, #8]
   2e25a:	4631      	mov	r1, r6
   2e25c:	4638      	mov	r0, r7
   2e25e:	f7ff ff39 	bl	2e0d4 <att_chan_read>
	if (ret < 0) {
   2e262:	2800      	cmp	r0, #0
   2e264:	db01      	blt.n	2e26a <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2e266:	2501      	movs	r5, #1
   2e268:	e7ee      	b.n	2e248 <read_cb+0x1e>
		data->err = err_to_att(ret);
   2e26a:	f7ff fcdf 	bl	2dc2c <err_to_att>
   2e26e:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2e270:	e7ea      	b.n	2e248 <read_cb+0x1e>

0002e272 <find_info_cb>:
{
   2e272:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e276:	4606      	mov	r6, r0
   2e278:	460f      	mov	r7, r1
   2e27a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2e27c:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   2e280:	6893      	ldr	r3, [r2, #8]
   2e282:	b14b      	cbz	r3, 2e298 <find_info_cb+0x26>
	switch (data->rsp->format) {
   2e284:	68a3      	ldr	r3, [r4, #8]
   2e286:	781d      	ldrb	r5, [r3, #0]
   2e288:	2d01      	cmp	r5, #1
   2e28a:	d013      	beq.n	2e2b4 <find_info_cb+0x42>
   2e28c:	2d02      	cmp	r5, #2
   2e28e:	d02d      	beq.n	2e2ec <find_info_cb+0x7a>
   2e290:	2500      	movs	r5, #0
}
   2e292:	4628      	mov	r0, r5
   2e294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2e298:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   2e29a:	2101      	movs	r1, #1
   2e29c:	3008      	adds	r0, #8
   2e29e:	f7ee fc13 	bl	1cac8 <net_buf_simple_add>
   2e2a2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2e2a4:	6833      	ldr	r3, [r6, #0]
   2e2a6:	781b      	ldrb	r3, [r3, #0]
   2e2a8:	b913      	cbnz	r3, 2e2b0 <find_info_cb+0x3e>
   2e2aa:	2301      	movs	r3, #1
   2e2ac:	7003      	strb	r3, [r0, #0]
   2e2ae:	e7e9      	b.n	2e284 <find_info_cb+0x12>
   2e2b0:	2302      	movs	r3, #2
   2e2b2:	e7fb      	b.n	2e2ac <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2e2b4:	6833      	ldr	r3, [r6, #0]
   2e2b6:	f893 9000 	ldrb.w	r9, [r3]
   2e2ba:	f1b9 0f00 	cmp.w	r9, #0
   2e2be:	d001      	beq.n	2e2c4 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   2e2c0:	2500      	movs	r5, #0
   2e2c2:	e7e6      	b.n	2e292 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2e2c4:	6860      	ldr	r0, [r4, #4]
   2e2c6:	2104      	movs	r1, #4
   2e2c8:	3008      	adds	r0, #8
   2e2ca:	f7ee fbfd 	bl	1cac8 <net_buf_simple_add>
   2e2ce:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2e2d0:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2e2d2:	6832      	ldr	r2, [r6, #0]
   2e2d4:	68e3      	ldr	r3, [r4, #12]
   2e2d6:	8852      	ldrh	r2, [r2, #2]
   2e2d8:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2e2da:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2e2de:	6862      	ldr	r2, [r4, #4]
   2e2e0:	8992      	ldrh	r2, [r2, #12]
   2e2e2:	1a9b      	subs	r3, r3, r2
   2e2e4:	2b04      	cmp	r3, #4
   2e2e6:	d8d4      	bhi.n	2e292 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   2e2e8:	464d      	mov	r5, r9
   2e2ea:	e7d2      	b.n	2e292 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2e2ec:	6833      	ldr	r3, [r6, #0]
   2e2ee:	781b      	ldrb	r3, [r3, #0]
   2e2f0:	2b02      	cmp	r3, #2
   2e2f2:	d001      	beq.n	2e2f8 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   2e2f4:	2500      	movs	r5, #0
   2e2f6:	e7cc      	b.n	2e292 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2e2f8:	6860      	ldr	r0, [r4, #4]
   2e2fa:	2112      	movs	r1, #18
   2e2fc:	3008      	adds	r0, #8
   2e2fe:	f7ee fbe3 	bl	1cac8 <net_buf_simple_add>
   2e302:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2e304:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2e306:	68e2      	ldr	r2, [r4, #12]
   2e308:	6833      	ldr	r3, [r6, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e30a:	f853 5f01 	ldr.w	r5, [r3, #1]!
   2e30e:	6858      	ldr	r0, [r3, #4]
   2e310:	6899      	ldr	r1, [r3, #8]
   2e312:	68db      	ldr	r3, [r3, #12]
   2e314:	f8c2 5002 	str.w	r5, [r2, #2]
   2e318:	f8c2 0006 	str.w	r0, [r2, #6]
   2e31c:	f8c2 100a 	str.w	r1, [r2, #10]
   2e320:	f8c2 300e 	str.w	r3, [r2, #14]
		if (chan->chan.tx.mtu - data->buf->len >
   2e324:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2e328:	6862      	ldr	r2, [r4, #4]
   2e32a:	8992      	ldrh	r2, [r2, #12]
   2e32c:	1a9b      	subs	r3, r3, r2
   2e32e:	2b12      	cmp	r3, #18
   2e330:	d801      	bhi.n	2e336 <find_info_cb+0xc4>
	return BT_GATT_ITER_STOP;
   2e332:	2500      	movs	r5, #0
   2e334:	e7ad      	b.n	2e292 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2e336:	2501      	movs	r5, #1
   2e338:	e7ab      	b.n	2e292 <find_info_cb+0x20>

0002e33a <att_chan_mtu_updated>:
{
   2e33a:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   2e33c:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2e33e:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e340:	b15c      	cbz	r4, 2e35a <att_chan_mtu_updated+0x20>
   2e342:	f5b4 74aa 	subs.w	r4, r4, #340	; 0x154
   2e346:	d00c      	beq.n	2e362 <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e348:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   2e34c:	d006      	beq.n	2e35c <att_chan_mtu_updated+0x22>
	return node->next;
   2e34e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   2e352:	b11b      	cbz	r3, 2e35c <att_chan_mtu_updated+0x22>
   2e354:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   2e358:	e000      	b.n	2e35c <att_chan_mtu_updated+0x22>
   2e35a:	4623      	mov	r3, r4
   2e35c:	2200      	movs	r2, #0
   2e35e:	4611      	mov	r1, r2
   2e360:	e004      	b.n	2e36c <att_chan_mtu_updated+0x32>
   2e362:	4623      	mov	r3, r4
   2e364:	e7fa      	b.n	2e35c <att_chan_mtu_updated+0x22>
   2e366:	461d      	mov	r5, r3
   2e368:	461c      	mov	r4, r3
   2e36a:	462b      	mov	r3, r5
   2e36c:	b1bc      	cbz	r4, 2e39e <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   2e36e:	4284      	cmp	r4, r0
   2e370:	d009      	beq.n	2e386 <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2e372:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   2e376:	42a9      	cmp	r1, r5
   2e378:	bf38      	it	cc
   2e37a:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2e37c:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   2e380:	42a2      	cmp	r2, r4
   2e382:	bf38      	it	cc
   2e384:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e386:	2b00      	cmp	r3, #0
   2e388:	d0ed      	beq.n	2e366 <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e38a:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   2e38e:	d0eb      	beq.n	2e368 <att_chan_mtu_updated+0x2e>
	return node->next;
   2e390:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   2e394:	2d00      	cmp	r5, #0
   2e396:	d0e7      	beq.n	2e368 <att_chan_mtu_updated+0x2e>
   2e398:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
   2e39c:	e7e4      	b.n	2e368 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2e39e:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2e3a2:	428b      	cmp	r3, r1
   2e3a4:	d803      	bhi.n	2e3ae <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2e3a6:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2e3aa:	4294      	cmp	r4, r2
   2e3ac:	d90a      	bls.n	2e3c4 <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   2e3ae:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2e3b2:	4282      	cmp	r2, r0
   2e3b4:	bf38      	it	cc
   2e3b6:	4602      	movcc	r2, r0
   2e3b8:	4299      	cmp	r1, r3
   2e3ba:	bf38      	it	cc
   2e3bc:	4619      	movcc	r1, r3
   2e3be:	6830      	ldr	r0, [r6, #0]
   2e3c0:	f7ed ffb8 	bl	1c334 <bt_gatt_att_max_mtu_changed>
}
   2e3c4:	bd70      	pop	{r4, r5, r6, pc}

0002e3c6 <att_write_cmd>:
{
   2e3c6:	b530      	push	{r4, r5, lr}
   2e3c8:	b085      	sub	sp, #20
   2e3ca:	4605      	mov	r5, r0
   2e3cc:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2e3ce:	f101 0008 	add.w	r0, r1, #8
   2e3d2:	f000 fd54 	bl	2ee7e <net_buf_simple_pull_le16>
   2e3d6:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2e3d8:	68a2      	ldr	r2, [r4, #8]
   2e3da:	89a1      	ldrh	r1, [r4, #12]
   2e3dc:	9102      	str	r1, [sp, #8]
   2e3de:	9201      	str	r2, [sp, #4]
   2e3e0:	2100      	movs	r1, #0
   2e3e2:	9100      	str	r1, [sp, #0]
   2e3e4:	460a      	mov	r2, r1
   2e3e6:	4628      	mov	r0, r5
   2e3e8:	f7ec fbe2 	bl	1abb0 <att_write_rsp>
}
   2e3ec:	b005      	add	sp, #20
   2e3ee:	bd30      	pop	{r4, r5, pc}

0002e3f0 <att_write_req>:
{
   2e3f0:	b530      	push	{r4, r5, lr}
   2e3f2:	b085      	sub	sp, #20
   2e3f4:	4605      	mov	r5, r0
   2e3f6:	460c      	mov	r4, r1
   2e3f8:	f101 0008 	add.w	r0, r1, #8
   2e3fc:	f000 fd3f 	bl	2ee7e <net_buf_simple_pull_le16>
   2e400:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   2e402:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2e404:	89a1      	ldrh	r1, [r4, #12]
   2e406:	9102      	str	r1, [sp, #8]
   2e408:	9201      	str	r2, [sp, #4]
   2e40a:	2200      	movs	r2, #0
   2e40c:	9200      	str	r2, [sp, #0]
   2e40e:	2213      	movs	r2, #19
   2e410:	2112      	movs	r1, #18
   2e412:	4628      	mov	r0, r5
   2e414:	f7ec fbcc 	bl	1abb0 <att_write_rsp>
}
   2e418:	b005      	add	sp, #20
   2e41a:	bd30      	pop	{r4, r5, pc}

0002e41c <att_read_group_req>:
{
   2e41c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e41e:	b089      	sub	sp, #36	; 0x24
   2e420:	4605      	mov	r5, r0
   2e422:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2e424:	7b0c      	ldrb	r4, [r1, #12]
   2e426:	3c04      	subs	r4, #4
   2e428:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2e42a:	2c02      	cmp	r4, #2
   2e42c:	d001      	beq.n	2e432 <att_read_group_req+0x16>
   2e42e:	2c10      	cmp	r4, #16
   2e430:	d142      	bne.n	2e4b8 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2e432:	2104      	movs	r1, #4
   2e434:	3008      	adds	r0, #8
   2e436:	f7ee fb01 	bl	1ca3c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2e43a:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2e43c:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2e43e:	4622      	mov	r2, r4
   2e440:	1d01      	adds	r1, r0, #4
   2e442:	a801      	add	r0, sp, #4
   2e444:	f7fe fde6 	bl	2d014 <bt_uuid_create>
   2e448:	b3c8      	cbz	r0, 2e4be <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2e44a:	f10d 0216 	add.w	r2, sp, #22
   2e44e:	4639      	mov	r1, r7
   2e450:	4630      	mov	r0, r6
   2e452:	f7ff fbdc 	bl	2dc0e <range_is_valid>
   2e456:	b1f0      	cbz	r0, 2e496 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2e458:	2300      	movs	r3, #0
   2e45a:	f88d 3018 	strb.w	r3, [sp, #24]
   2e45e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2e462:	f8ad 301a 	strh.w	r3, [sp, #26]
   2e466:	a906      	add	r1, sp, #24
   2e468:	a801      	add	r0, sp, #4
   2e46a:	f7fe fdb5 	bl	2cfd8 <bt_uuid_cmp>
   2e46e:	b158      	cbz	r0, 2e488 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2e470:	2300      	movs	r3, #0
   2e472:	f88d 301c 	strb.w	r3, [sp, #28]
   2e476:	f642 0301 	movw	r3, #10241	; 0x2801
   2e47a:	f8ad 301e 	strh.w	r3, [sp, #30]
   2e47e:	a907      	add	r1, sp, #28
   2e480:	a801      	add	r0, sp, #4
   2e482:	f7fe fda9 	bl	2cfd8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2e486:	b978      	cbnz	r0, 2e4a8 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   2e488:	463b      	mov	r3, r7
   2e48a:	4632      	mov	r2, r6
   2e48c:	a901      	add	r1, sp, #4
   2e48e:	4628      	mov	r0, r5
   2e490:	f7ec fc46 	bl	1ad20 <att_read_group_rsp>
   2e494:	e011      	b.n	2e4ba <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2e496:	2301      	movs	r3, #1
   2e498:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2e49c:	2110      	movs	r1, #16
   2e49e:	4628      	mov	r0, r5
   2e4a0:	f7ec fa90 	bl	1a9c4 <send_err_rsp>
		return 0;
   2e4a4:	2000      	movs	r0, #0
   2e4a6:	e008      	b.n	2e4ba <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   2e4a8:	2310      	movs	r3, #16
   2e4aa:	4632      	mov	r2, r6
   2e4ac:	4619      	mov	r1, r3
   2e4ae:	4628      	mov	r0, r5
   2e4b0:	f7ec fa88 	bl	1a9c4 <send_err_rsp>
		return 0;
   2e4b4:	2000      	movs	r0, #0
   2e4b6:	e000      	b.n	2e4ba <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2e4b8:	2004      	movs	r0, #4
}
   2e4ba:	b009      	add	sp, #36	; 0x24
   2e4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   2e4be:	200e      	movs	r0, #14
   2e4c0:	e7fb      	b.n	2e4ba <att_read_group_req+0x9e>

0002e4c2 <att_read_blob_req>:
{
   2e4c2:	b500      	push	{lr}
   2e4c4:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2e4c6:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2e4c8:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   2e4ca:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2e4cc:	9200      	str	r2, [sp, #0]
   2e4ce:	220d      	movs	r2, #13
   2e4d0:	210c      	movs	r1, #12
   2e4d2:	f7ec fcb7 	bl	1ae44 <att_read_rsp>
}
   2e4d6:	b003      	add	sp, #12
   2e4d8:	f85d fb04 	ldr.w	pc, [sp], #4

0002e4dc <att_read_req>:
{
   2e4dc:	b500      	push	{lr}
   2e4de:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2e4e0:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2e4e2:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2e4e4:	2200      	movs	r2, #0
   2e4e6:	9200      	str	r2, [sp, #0]
   2e4e8:	220b      	movs	r2, #11
   2e4ea:	210a      	movs	r1, #10
   2e4ec:	f7ec fcaa 	bl	1ae44 <att_read_rsp>
}
   2e4f0:	b003      	add	sp, #12
   2e4f2:	f85d fb04 	ldr.w	pc, [sp], #4

0002e4f6 <att_read_type_req>:
{
   2e4f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e4f8:	b087      	sub	sp, #28
   2e4fa:	4605      	mov	r5, r0
   2e4fc:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2e4fe:	7b0c      	ldrb	r4, [r1, #12]
   2e500:	3c04      	subs	r4, #4
   2e502:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2e504:	2c02      	cmp	r4, #2
   2e506:	d001      	beq.n	2e50c <att_read_type_req+0x16>
   2e508:	2c10      	cmp	r4, #16
   2e50a:	d123      	bne.n	2e554 <att_read_type_req+0x5e>
   2e50c:	2104      	movs	r1, #4
   2e50e:	3008      	adds	r0, #8
   2e510:	f7ee fa94 	bl	1ca3c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2e514:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2e516:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2e518:	4622      	mov	r2, r4
   2e51a:	1d01      	adds	r1, r0, #4
   2e51c:	a801      	add	r0, sp, #4
   2e51e:	f7fe fd79 	bl	2d014 <bt_uuid_create>
   2e522:	b1c8      	cbz	r0, 2e558 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2e524:	f10d 0216 	add.w	r2, sp, #22
   2e528:	4639      	mov	r1, r7
   2e52a:	4630      	mov	r0, r6
   2e52c:	f7ff fb6f 	bl	2dc0e <range_is_valid>
   2e530:	b138      	cbz	r0, 2e542 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   2e532:	463b      	mov	r3, r7
   2e534:	4632      	mov	r2, r6
   2e536:	a901      	add	r1, sp, #4
   2e538:	4628      	mov	r0, r5
   2e53a:	f7ec fcd3 	bl	1aee4 <att_read_type_rsp>
}
   2e53e:	b007      	add	sp, #28
   2e540:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   2e542:	2301      	movs	r3, #1
   2e544:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2e548:	2108      	movs	r1, #8
   2e54a:	4628      	mov	r0, r5
   2e54c:	f7ec fa3a 	bl	1a9c4 <send_err_rsp>
		return 0;
   2e550:	2000      	movs	r0, #0
   2e552:	e7f4      	b.n	2e53e <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   2e554:	2004      	movs	r0, #4
   2e556:	e7f2      	b.n	2e53e <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   2e558:	200e      	movs	r0, #14
   2e55a:	e7f0      	b.n	2e53e <att_read_type_req+0x48>

0002e55c <att_find_type_req>:
{
   2e55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e560:	b087      	sub	sp, #28
   2e562:	4607      	mov	r7, r0
   2e564:	460c      	mov	r4, r1
   2e566:	2106      	movs	r1, #6
   2e568:	f104 0008 	add.w	r0, r4, #8
   2e56c:	f7ee fa66 	bl	1ca3c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2e570:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2e572:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2e574:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   2e578:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2e57c:	f10d 020e 	add.w	r2, sp, #14
   2e580:	4631      	mov	r1, r6
   2e582:	4628      	mov	r0, r5
   2e584:	f7ff fb43 	bl	2dc0e <range_is_valid>
   2e588:	b1d0      	cbz	r0, 2e5c0 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2e58a:	2300      	movs	r3, #0
   2e58c:	f88d 3010 	strb.w	r3, [sp, #16]
   2e590:	f8ad 8012 	strh.w	r8, [sp, #18]
   2e594:	f88d 3014 	strb.w	r3, [sp, #20]
   2e598:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2e59c:	f8ad 3016 	strh.w	r3, [sp, #22]
   2e5a0:	a905      	add	r1, sp, #20
   2e5a2:	a804      	add	r0, sp, #16
   2e5a4:	f7fe fd18 	bl	2cfd8 <bt_uuid_cmp>
   2e5a8:	b998      	cbnz	r0, 2e5d2 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2e5aa:	7b23      	ldrb	r3, [r4, #12]
   2e5ac:	9300      	str	r3, [sp, #0]
   2e5ae:	464b      	mov	r3, r9
   2e5b0:	4632      	mov	r2, r6
   2e5b2:	4629      	mov	r1, r5
   2e5b4:	4638      	mov	r0, r7
   2e5b6:	f7ec fcdf 	bl	1af78 <att_find_type_rsp>
}
   2e5ba:	b007      	add	sp, #28
   2e5bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   2e5c0:	2301      	movs	r3, #1
   2e5c2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2e5c6:	2106      	movs	r1, #6
   2e5c8:	4638      	mov	r0, r7
   2e5ca:	f7ec f9fb 	bl	1a9c4 <send_err_rsp>
		return 0;
   2e5ce:	2000      	movs	r0, #0
   2e5d0:	e7f3      	b.n	2e5ba <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   2e5d2:	230a      	movs	r3, #10
   2e5d4:	462a      	mov	r2, r5
   2e5d6:	2106      	movs	r1, #6
   2e5d8:	4638      	mov	r0, r7
   2e5da:	f7ec f9f3 	bl	1a9c4 <send_err_rsp>
		return 0;
   2e5de:	2000      	movs	r0, #0
   2e5e0:	e7eb      	b.n	2e5ba <att_find_type_req+0x5e>

0002e5e2 <att_find_info_req>:
{
   2e5e2:	b570      	push	{r4, r5, r6, lr}
   2e5e4:	b082      	sub	sp, #8
   2e5e6:	4604      	mov	r4, r0
	req = (void *)buf->data;
   2e5e8:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2e5ea:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2e5ec:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2e5ee:	f10d 0206 	add.w	r2, sp, #6
   2e5f2:	4631      	mov	r1, r6
   2e5f4:	4628      	mov	r0, r5
   2e5f6:	f7ff fb0a 	bl	2dc0e <range_is_valid>
   2e5fa:	b130      	cbz	r0, 2e60a <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   2e5fc:	4632      	mov	r2, r6
   2e5fe:	4629      	mov	r1, r5
   2e600:	4620      	mov	r0, r4
   2e602:	f7ec fcfd 	bl	1b000 <att_find_info_rsp>
}
   2e606:	b002      	add	sp, #8
   2e608:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   2e60a:	2301      	movs	r3, #1
   2e60c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2e610:	2104      	movs	r1, #4
   2e612:	4620      	mov	r0, r4
   2e614:	f7ec f9d6 	bl	1a9c4 <send_err_rsp>
		return 0;
   2e618:	2000      	movs	r0, #0
   2e61a:	e7f4      	b.n	2e606 <att_find_info_req+0x24>

0002e61c <bt_att_init>:
{
   2e61c:	b508      	push	{r3, lr}
	bt_gatt_init();
   2e61e:	f7ed f931 	bl	1b884 <bt_gatt_init>
}
   2e622:	bd08      	pop	{r3, pc}

0002e624 <att_confirm>:
{
   2e624:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2e626:	2300      	movs	r3, #0
   2e628:	898a      	ldrh	r2, [r1, #12]
   2e62a:	6889      	ldr	r1, [r1, #8]
   2e62c:	f7ec fd86 	bl	1b13c <att_handle_rsp>
}
   2e630:	bd08      	pop	{r3, pc}

0002e632 <att_chan_detach>:
{
   2e632:	b510      	push	{r4, lr}
   2e634:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2e636:	6800      	ldr	r0, [r0, #0]
   2e638:	f504 72aa 	add.w	r2, r4, #340	; 0x154
	return list->head;
   2e63c:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e63e:	2100      	movs	r1, #0
   2e640:	b1e3      	cbz	r3, 2e67c <att_chan_detach+0x4a>
   2e642:	4293      	cmp	r3, r2
   2e644:	d002      	beq.n	2e64c <att_chan_detach+0x1a>
   2e646:	4619      	mov	r1, r3
   2e648:	681b      	ldr	r3, [r3, #0]
   2e64a:	e7f9      	b.n	2e640 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   2e64c:	b149      	cbz	r1, 2e662 <att_chan_detach+0x30>
	return node->next;
   2e64e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	parent->next = child;
   2e652:	600b      	str	r3, [r1, #0]
	return list->tail;
   2e654:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
Z_GENLIST_REMOVE(slist, snode)
   2e656:	4293      	cmp	r3, r2
   2e658:	d00b      	beq.n	2e672 <att_chan_detach+0x40>
	parent->next = child;
   2e65a:	2300      	movs	r3, #0
   2e65c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e660:	e00c      	b.n	2e67c <att_chan_detach+0x4a>
	return node->next;
   2e662:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	list->head = node;
   2e666:	6283      	str	r3, [r0, #40]	; 0x28
	return list->tail;
   2e668:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
Z_GENLIST_REMOVE(slist, snode)
   2e66a:	4291      	cmp	r1, r2
   2e66c:	d1f5      	bne.n	2e65a <att_chan_detach+0x28>
	list->tail = node;
   2e66e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   2e670:	e7f3      	b.n	2e65a <att_chan_detach+0x28>
	list->tail = node;
   2e672:	62c1      	str	r1, [r0, #44]	; 0x2c
}
   2e674:	e7f1      	b.n	2e65a <att_chan_detach+0x28>
		net_buf_unref(buf);
   2e676:	4618      	mov	r0, r3
   2e678:	f7ee f8f4 	bl	1c864 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2e67c:	2200      	movs	r2, #0
   2e67e:	2300      	movs	r3, #0
   2e680:	f504 7080 	add.w	r0, r4, #256	; 0x100
   2e684:	f7ee f856 	bl	1c734 <net_buf_get>
   2e688:	4603      	mov	r3, r0
   2e68a:	2800      	cmp	r0, #0
   2e68c:	d1f3      	bne.n	2e676 <att_chan_detach+0x44>
	if (chan->req) {
   2e68e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   2e692:	b12b      	cbz	r3, 2e6a0 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2e694:	230e      	movs	r3, #14
   2e696:	2200      	movs	r2, #0
   2e698:	4611      	mov	r1, r2
   2e69a:	4620      	mov	r0, r4
   2e69c:	f7ec fd4e 	bl	1b13c <att_handle_rsp>
	chan->att = NULL;
   2e6a0:	2300      	movs	r3, #0
   2e6a2:	6023      	str	r3, [r4, #0]
}
   2e6a4:	bd10      	pop	{r4, pc}

0002e6a6 <bt_att_disconnected>:
{
   2e6a6:	b538      	push	{r3, r4, r5, lr}
   2e6a8:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2e6aa:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   2e6ae:	b125      	cbz	r5, 2e6ba <bt_att_disconnected+0x14>
   2e6b0:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   2e6b2:	f7ff ffbe 	bl	2e632 <att_chan_detach>
	return list->head;
   2e6b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (!sys_slist_is_empty(&att->chans)) {
   2e6b8:	b103      	cbz	r3, 2e6bc <bt_att_disconnected+0x16>
}
   2e6ba:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   2e6bc:	4628      	mov	r0, r5
   2e6be:	f7ec fd89 	bl	1b1d4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   2e6c2:	6820      	ldr	r0, [r4, #0]
   2e6c4:	f7ed fe82 	bl	1c3cc <bt_gatt_disconnected>
   2e6c8:	e7f7      	b.n	2e6ba <bt_att_disconnected+0x14>

0002e6ca <update_range>:
{
   2e6ca:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   2e6cc:	8804      	ldrh	r4, [r0, #0]
   2e6ce:	42a2      	cmp	r2, r4
   2e6d0:	d302      	bcc.n	2e6d8 <update_range+0xe>
   2e6d2:	880d      	ldrh	r5, [r1, #0]
   2e6d4:	42ab      	cmp	r3, r5
   2e6d6:	d908      	bls.n	2e6ea <update_range+0x20>
	if (*start > new_start) {
   2e6d8:	42a2      	cmp	r2, r4
   2e6da:	d200      	bcs.n	2e6de <update_range+0x14>
		*start = new_start;
   2e6dc:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2e6de:	880a      	ldrh	r2, [r1, #0]
   2e6e0:	4293      	cmp	r3, r2
   2e6e2:	d904      	bls.n	2e6ee <update_range+0x24>
		*end = new_end;
   2e6e4:	800b      	strh	r3, [r1, #0]
	return true;
   2e6e6:	2001      	movs	r0, #1
   2e6e8:	e002      	b.n	2e6f0 <update_range+0x26>
		return false;
   2e6ea:	2000      	movs	r0, #0
   2e6ec:	e000      	b.n	2e6f0 <update_range+0x26>
	return true;
   2e6ee:	2001      	movs	r0, #1
}
   2e6f0:	bc30      	pop	{r4, r5}
   2e6f2:	4770      	bx	lr

0002e6f4 <cf_set_value>:
{
   2e6f4:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2e6f6:	2300      	movs	r3, #0
   2e6f8:	e001      	b.n	2e6fe <cf_set_value+0xa>
   2e6fa:	3301      	adds	r3, #1
   2e6fc:	b29b      	uxth	r3, r3
   2e6fe:	2b02      	cmp	r3, #2
   2e700:	d824      	bhi.n	2e74c <cf_set_value+0x58>
   2e702:	08dd      	lsrs	r5, r3, #3
   2e704:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   2e708:	d90f      	bls.n	2e72a <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2e70a:	1944      	adds	r4, r0, r5
   2e70c:	7a24      	ldrb	r4, [r4, #8]
   2e70e:	f003 0607 	and.w	r6, r3, #7
   2e712:	40f4      	lsrs	r4, r6
   2e714:	f014 0f01 	tst.w	r4, #1
   2e718:	d0ef      	beq.n	2e6fa <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   2e71a:	5d4c      	ldrb	r4, [r1, r5]
   2e71c:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2e720:	f016 0f01 	tst.w	r6, #1
   2e724:	d1e9      	bne.n	2e6fa <cf_set_value+0x6>
			return false;
   2e726:	2000      	movs	r0, #0
   2e728:	e013      	b.n	2e752 <cf_set_value+0x5e>
   2e72a:	2300      	movs	r3, #0
   2e72c:	e008      	b.n	2e740 <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2e72e:	5ccc      	ldrb	r4, [r1, r3]
   2e730:	f004 0407 	and.w	r4, r4, #7
   2e734:	18c5      	adds	r5, r0, r3
   2e736:	7a2e      	ldrb	r6, [r5, #8]
   2e738:	4334      	orrs	r4, r6
   2e73a:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2e73c:	3301      	adds	r3, #1
   2e73e:	b29b      	uxth	r3, r3
   2e740:	4293      	cmp	r3, r2
   2e742:	d205      	bcs.n	2e750 <cf_set_value+0x5c>
   2e744:	2b00      	cmp	r3, #0
   2e746:	d0f2      	beq.n	2e72e <cf_set_value+0x3a>
	return true;
   2e748:	2001      	movs	r0, #1
   2e74a:	e002      	b.n	2e752 <cf_set_value+0x5e>
   2e74c:	2300      	movs	r3, #0
   2e74e:	e7f7      	b.n	2e740 <cf_set_value+0x4c>
   2e750:	2001      	movs	r0, #1
}
   2e752:	bc70      	pop	{r4, r5, r6}
   2e754:	4770      	bx	lr

0002e756 <gatt_ccc_changed>:
{
   2e756:	b510      	push	{r4, lr}
   2e758:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   2e75a:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2e75c:	460b      	mov	r3, r1
   2e75e:	2b00      	cmp	r3, #0
   2e760:	dd07      	ble.n	2e772 <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
   2e762:	8953      	ldrh	r3, [r2, #10]
   2e764:	4299      	cmp	r1, r3
   2e766:	d003      	beq.n	2e770 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   2e768:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   2e76a:	68d3      	ldr	r3, [r2, #12]
   2e76c:	b103      	cbz	r3, 2e770 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2e76e:	4798      	blx	r3
}
   2e770:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
   2e772:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   2e776:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   2e77a:	8924      	ldrh	r4, [r4, #8]
   2e77c:	428c      	cmp	r4, r1
   2e77e:	d900      	bls.n	2e782 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   2e780:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2e782:	3301      	adds	r3, #1
   2e784:	e7eb      	b.n	2e75e <gatt_ccc_changed+0x8>

0002e786 <gatt_indicate_rsp>:
{
   2e786:	b510      	push	{r4, lr}
   2e788:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2e78a:	68a3      	ldr	r3, [r4, #8]
   2e78c:	b113      	cbz	r3, 2e794 <gatt_indicate_rsp+0xe>
   2e78e:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2e790:	4621      	mov	r1, r4
   2e792:	4798      	blx	r3
	params->_ref--;
   2e794:	7da3      	ldrb	r3, [r4, #22]
   2e796:	3b01      	subs	r3, #1
   2e798:	b2db      	uxtb	r3, r3
   2e79a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2e79c:	68e2      	ldr	r2, [r4, #12]
   2e79e:	b112      	cbz	r2, 2e7a6 <gatt_indicate_rsp+0x20>
   2e7a0:	b90b      	cbnz	r3, 2e7a6 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   2e7a2:	4620      	mov	r0, r4
   2e7a4:	4790      	blx	r2
}
   2e7a6:	bd10      	pop	{r4, pc}

0002e7a8 <match_uuid>:
	data->attr = attr;
   2e7a8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2e7aa:	8091      	strh	r1, [r2, #4]
}
   2e7ac:	2000      	movs	r0, #0
   2e7ae:	4770      	bx	lr

0002e7b0 <gen_hash_m>:
{
   2e7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e7b2:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e7b4:	6806      	ldr	r6, [r0, #0]
   2e7b6:	7835      	ldrb	r5, [r6, #0]
   2e7b8:	2d00      	cmp	r5, #0
   2e7ba:	d161      	bne.n	2e880 <gen_hash_m+0xd0>
   2e7bc:	4607      	mov	r7, r0
   2e7be:	4614      	mov	r4, r2
	switch (u16->val) {
   2e7c0:	8873      	ldrh	r3, [r6, #2]
   2e7c2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2e7c6:	d019      	beq.n	2e7fc <gen_hash_m+0x4c>
   2e7c8:	d913      	bls.n	2e7f2 <gen_hash_m+0x42>
   2e7ca:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2e7ce:	33ff      	adds	r3, #255	; 0xff
   2e7d0:	b29b      	uxth	r3, r3
   2e7d2:	2b04      	cmp	r3, #4
   2e7d4:	d85a      	bhi.n	2e88c <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   2e7d6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e7da:	2202      	movs	r2, #2
   2e7dc:	f10d 010e 	add.w	r1, sp, #14
   2e7e0:	4620      	mov	r0, r4
   2e7e2:	f7fe fa8d 	bl	2cd00 <tc_cmac_update>
   2e7e6:	2800      	cmp	r0, #0
   2e7e8:	d13a      	bne.n	2e860 <gen_hash_m+0xb0>
			state->err = -EINVAL;
   2e7ea:	f06f 0315 	mvn.w	r3, #21
   2e7ee:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e7f0:	e047      	b.n	2e882 <gen_hash_m+0xd2>
	switch (u16->val) {
   2e7f2:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2e7f6:	b29b      	uxth	r3, r3
   2e7f8:	2b03      	cmp	r3, #3
   2e7fa:	d845      	bhi.n	2e888 <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   2e7fc:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e800:	2202      	movs	r2, #2
   2e802:	f10d 010e 	add.w	r1, sp, #14
   2e806:	4620      	mov	r0, r4
   2e808:	f7fe fa7a 	bl	2cd00 <tc_cmac_update>
   2e80c:	b918      	cbnz	r0, 2e816 <gen_hash_m+0x66>
			state->err = -EINVAL;
   2e80e:	f06f 0315 	mvn.w	r3, #21
   2e812:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e814:	e035      	b.n	2e882 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   2e816:	8873      	ldrh	r3, [r6, #2]
   2e818:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e81c:	2202      	movs	r2, #2
   2e81e:	f10d 010e 	add.w	r1, sp, #14
   2e822:	4620      	mov	r0, r4
   2e824:	f7fe fa6c 	bl	2cd00 <tc_cmac_update>
   2e828:	b180      	cbz	r0, 2e84c <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2e82a:	687e      	ldr	r6, [r7, #4]
   2e82c:	2000      	movs	r0, #0
   2e82e:	9000      	str	r0, [sp, #0]
   2e830:	2310      	movs	r3, #16
   2e832:	eb0d 0203 	add.w	r2, sp, r3
   2e836:	4639      	mov	r1, r7
   2e838:	47b0      	blx	r6
		if (len < 0) {
   2e83a:	1e02      	subs	r2, r0, #0
   2e83c:	db0a      	blt.n	2e854 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   2e83e:	a904      	add	r1, sp, #16
   2e840:	4620      	mov	r0, r4
   2e842:	f7fe fa5d 	bl	2cd00 <tc_cmac_update>
   2e846:	b138      	cbz	r0, 2e858 <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   2e848:	2501      	movs	r5, #1
   2e84a:	e01a      	b.n	2e882 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2e84c:	f06f 0315 	mvn.w	r3, #21
   2e850:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e852:	e016      	b.n	2e882 <gen_hash_m+0xd2>
			state->err = len;
   2e854:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e856:	e014      	b.n	2e882 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2e858:	f06f 0315 	mvn.w	r3, #21
   2e85c:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e85e:	e010      	b.n	2e882 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   2e860:	8873      	ldrh	r3, [r6, #2]
   2e862:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e866:	2202      	movs	r2, #2
   2e868:	f10d 010e 	add.w	r1, sp, #14
   2e86c:	4620      	mov	r0, r4
   2e86e:	f7fe fa47 	bl	2cd00 <tc_cmac_update>
   2e872:	b108      	cbz	r0, 2e878 <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   2e874:	2501      	movs	r5, #1
   2e876:	e004      	b.n	2e882 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2e878:	f06f 0315 	mvn.w	r3, #21
   2e87c:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2e87e:	e000      	b.n	2e882 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   2e880:	2501      	movs	r5, #1
}
   2e882:	4628      	mov	r0, r5
   2e884:	b009      	add	sp, #36	; 0x24
   2e886:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2e888:	2501      	movs	r5, #1
   2e88a:	e7fa      	b.n	2e882 <gen_hash_m+0xd2>
   2e88c:	2501      	movs	r5, #1
   2e88e:	e7f8      	b.n	2e882 <gen_hash_m+0xd2>

0002e890 <find_ccc_cfg>:
{
   2e890:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e892:	b083      	sub	sp, #12
   2e894:	4607      	mov	r7, r0
   2e896:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2e898:	2400      	movs	r4, #0
   2e89a:	b11c      	cbz	r4, 2e8a4 <find_ccc_cfg+0x14>
	return NULL;
   2e89c:	2600      	movs	r6, #0
}
   2e89e:	4630      	mov	r0, r6
   2e8a0:	b003      	add	sp, #12
   2e8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2e8a4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   2e8a8:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   2e8ac:	b167      	cbz	r7, 2e8c8 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   2e8ae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2e8b2:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2e8b4:	3201      	adds	r2, #1
   2e8b6:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   2e8ba:	4638      	mov	r0, r7
   2e8bc:	f7ff f83d 	bl	2d93a <bt_conn_is_peer_addr_le>
   2e8c0:	2800      	cmp	r0, #0
   2e8c2:	d1ec      	bne.n	2e89e <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2e8c4:	3401      	adds	r4, #1
   2e8c6:	e7e8      	b.n	2e89a <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2e8c8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   2e8cc:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   2e8d0:	2300      	movs	r3, #0
   2e8d2:	9300      	str	r3, [sp, #0]
   2e8d4:	f8cd 3003 	str.w	r3, [sp, #3]
   2e8d8:	2207      	movs	r2, #7
   2e8da:	4669      	mov	r1, sp
   2e8dc:	3001      	adds	r0, #1
   2e8de:	f001 ffd9 	bl	30894 <memcmp>
   2e8e2:	2800      	cmp	r0, #0
   2e8e4:	d1ee      	bne.n	2e8c4 <find_ccc_cfg+0x34>
   2e8e6:	e7da      	b.n	2e89e <find_ccc_cfg+0xe>

0002e8e8 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2e8e8:	2300      	movs	r3, #0
   2e8ea:	6003      	str	r3, [r0, #0]
   2e8ec:	6043      	str	r3, [r0, #4]
   2e8ee:	6083      	str	r3, [r0, #8]
}
   2e8f0:	4770      	bx	lr

0002e8f2 <bt_gatt_clear_sc>:
{
   2e8f2:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2e8f4:	f7ec fd78 	bl	1b3e8 <find_sc_cfg>
	if (!cfg) {
   2e8f8:	b108      	cbz	r0, 2e8fe <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   2e8fa:	f7ff fff5 	bl	2e8e8 <clear_sc_cfg>
}
   2e8fe:	2000      	movs	r0, #0
   2e900:	bd08      	pop	{r3, pc}

0002e902 <sc_reset>:
   2e902:	2300      	movs	r3, #0
   2e904:	6083      	str	r3, [r0, #8]
}
   2e906:	4770      	bx	lr

0002e908 <sc_restore_rsp>:
{
   2e908:	b538      	push	{r3, r4, r5, lr}
   2e90a:	4605      	mov	r5, r0
   2e90c:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   2e90e:	f7ec fd41 	bl	1b394 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2e912:	b188      	cbz	r0, 2e938 <sc_restore_rsp+0x30>
   2e914:	4603      	mov	r3, r0
   2e916:	7a02      	ldrb	r2, [r0, #8]
   2e918:	f012 0f01 	tst.w	r2, #1
   2e91c:	d00c      	beq.n	2e938 <sc_restore_rsp+0x30>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2e91e:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e920:	f3bf 8f5b 	dmb	ish
   2e924:	e853 2f00 	ldrex	r2, [r3]
   2e928:	f042 0201 	orr.w	r2, r2, #1
   2e92c:	e843 2100 	strex	r1, r2, [r3]
   2e930:	2900      	cmp	r1, #0
   2e932:	d1f7      	bne.n	2e924 <sc_restore_rsp+0x1c>
   2e934:	f3bf 8f5b 	dmb	ish
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2e938:	b104      	cbz	r4, 2e93c <sc_restore_rsp+0x34>
}
   2e93a:	bd38      	pop	{r3, r4, r5, pc}
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2e93c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   2e940:	7a28      	ldrb	r0, [r5, #8]
   2e942:	f7ec fd51 	bl	1b3e8 <find_sc_cfg>
		if (sc_cfg) {
   2e946:	2800      	cmp	r0, #0
   2e948:	d0f7      	beq.n	2e93a <sc_restore_rsp+0x32>
			sc_reset(sc_cfg);
   2e94a:	f7ff ffda 	bl	2e902 <sc_reset>
}
   2e94e:	e7f4      	b.n	2e93a <sc_restore_rsp+0x32>

0002e950 <gatt_foreach_iter>:
	if (handle > end_handle) {
   2e950:	4299      	cmp	r1, r3
   2e952:	d822      	bhi.n	2e99a <gatt_foreach_iter+0x4a>
{
   2e954:	b538      	push	{r3, r4, r5, lr}
   2e956:	4605      	mov	r5, r0
   2e958:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2e95a:	4291      	cmp	r1, r2
   2e95c:	d31f      	bcc.n	2e99e <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2e95e:	9b04      	ldr	r3, [sp, #16]
   2e960:	b123      	cbz	r3, 2e96c <gatt_foreach_iter+0x1c>
   2e962:	6801      	ldr	r1, [r0, #0]
   2e964:	4618      	mov	r0, r3
   2e966:	f7fe fb37 	bl	2cfd8 <bt_uuid_cmp>
   2e96a:	b9d0      	cbnz	r0, 2e9a2 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2e96c:	9b05      	ldr	r3, [sp, #20]
   2e96e:	b12b      	cbz	r3, 2e97c <gatt_foreach_iter+0x2c>
   2e970:	68eb      	ldr	r3, [r5, #12]
   2e972:	9a05      	ldr	r2, [sp, #20]
   2e974:	4293      	cmp	r3, r2
   2e976:	d001      	beq.n	2e97c <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   2e978:	2001      	movs	r0, #1
   2e97a:	e011      	b.n	2e9a0 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2e97c:	9b06      	ldr	r3, [sp, #24]
   2e97e:	881b      	ldrh	r3, [r3, #0]
   2e980:	3b01      	subs	r3, #1
   2e982:	9a06      	ldr	r2, [sp, #24]
   2e984:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   2e986:	9a08      	ldr	r2, [sp, #32]
   2e988:	4621      	mov	r1, r4
   2e98a:	4628      	mov	r0, r5
   2e98c:	9b07      	ldr	r3, [sp, #28]
   2e98e:	4798      	blx	r3
	if (!*num_matches) {
   2e990:	9b06      	ldr	r3, [sp, #24]
   2e992:	881b      	ldrh	r3, [r3, #0]
   2e994:	b923      	cbnz	r3, 2e9a0 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2e996:	2000      	movs	r0, #0
   2e998:	e002      	b.n	2e9a0 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2e99a:	2000      	movs	r0, #0
}
   2e99c:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2e99e:	2001      	movs	r0, #1
}
   2e9a0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   2e9a2:	2001      	movs	r0, #1
   2e9a4:	e7fc      	b.n	2e9a0 <gatt_foreach_iter+0x50>

0002e9a6 <gatt_req_alloc>:
{
   2e9a6:	b538      	push	{r3, r4, r5, lr}
   2e9a8:	4605      	mov	r5, r0
   2e9aa:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2e9ac:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2e9b0:	2100      	movs	r1, #0
   2e9b2:	f7ec fb95 	bl	1b0e0 <bt_att_req_alloc>
	if (!req) {
   2e9b6:	4603      	mov	r3, r0
   2e9b8:	b108      	cbz	r0, 2e9be <gatt_req_alloc+0x18>
	req->func = func;
   2e9ba:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   2e9bc:	60c4      	str	r4, [r0, #12]
}
   2e9be:	4618      	mov	r0, r3
   2e9c0:	bd38      	pop	{r3, r4, r5, pc}

0002e9c2 <clear_ccc_cfg>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e9c2:	2300      	movs	r3, #0
   2e9c4:	f8c0 3001 	str.w	r3, [r0, #1]
   2e9c8:	6043      	str	r3, [r0, #4]
	cfg->id = 0U;
   2e9ca:	7003      	strb	r3, [r0, #0]
	cfg->value = 0U;
   2e9cc:	8103      	strh	r3, [r0, #8]
}
   2e9ce:	4770      	bx	lr

0002e9d0 <clear_cf_cfg>:
{
   2e9d0:	b082      	sub	sp, #8
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2e9d2:	2300      	movs	r3, #0
   2e9d4:	9300      	str	r3, [sp, #0]
   2e9d6:	f8cd 3003 	str.w	r3, [sp, #3]
   2e9da:	f8c0 3001 	str.w	r3, [r0, #1]
   2e9de:	6043      	str	r3, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   2e9e0:	7203      	strb	r3, [r0, #8]
	atomic_set(cfg->flags, 0);
   2e9e2:	300c      	adds	r0, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2e9e4:	f3bf 8f5b 	dmb	ish
   2e9e8:	e850 2f00 	ldrex	r2, [r0]
   2e9ec:	e840 3100 	strex	r1, r3, [r0]
   2e9f0:	2900      	cmp	r1, #0
   2e9f2:	d1f9      	bne.n	2e9e8 <clear_cf_cfg+0x18>
   2e9f4:	f3bf 8f5b 	dmb	ish
}
   2e9f8:	b002      	add	sp, #8
   2e9fa:	4770      	bx	lr

0002e9fc <remove_cf_cfg>:
{
   2e9fc:	b570      	push	{r4, r5, r6, lr}
   2e9fe:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2ea00:	f7ec fcc8 	bl	1b394 <find_cf_cfg>
	if (!cfg) {
   2ea04:	b300      	cbz	r0, 2ea48 <remove_cf_cfg+0x4c>
   2ea06:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2ea08:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2ea0c:	4631      	mov	r1, r6
   2ea0e:	7a20      	ldrb	r0, [r4, #8]
   2ea10:	f7fe fc86 	bl	2d320 <bt_addr_le_is_bonded>
   2ea14:	b918      	cbnz	r0, 2ea1e <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   2ea16:	4628      	mov	r0, r5
   2ea18:	f7ff ffda 	bl	2e9d0 <clear_cf_cfg>
   2ea1c:	e014      	b.n	2ea48 <remove_cf_cfg+0x4c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ea1e:	6833      	ldr	r3, [r6, #0]
   2ea20:	f8c5 3001 	str.w	r3, [r5, #1]
   2ea24:	88b2      	ldrh	r2, [r6, #4]
   2ea26:	79b3      	ldrb	r3, [r6, #6]
   2ea28:	f8a5 2005 	strh.w	r2, [r5, #5]
   2ea2c:	71eb      	strb	r3, [r5, #7]
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   2ea2e:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ea30:	f3bf 8f5b 	dmb	ish
   2ea34:	e855 3f00 	ldrex	r3, [r5]
   2ea38:	f023 0302 	bic.w	r3, r3, #2
   2ea3c:	e845 3200 	strex	r2, r3, [r5]
   2ea40:	2a00      	cmp	r2, #0
   2ea42:	d1f7      	bne.n	2ea34 <remove_cf_cfg+0x38>
   2ea44:	f3bf 8f5b 	dmb	ish
}
   2ea48:	bd70      	pop	{r4, r5, r6, pc}

0002ea4a <sc_ccc_cfg_write>:
{
   2ea4a:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2ea4c:	2a02      	cmp	r2, #2
   2ea4e:	d003      	beq.n	2ea58 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2ea50:	f7ec fcee 	bl	1b430 <sc_clear>
}
   2ea54:	2002      	movs	r0, #2
   2ea56:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2ea58:	2300      	movs	r3, #0
   2ea5a:	461a      	mov	r2, r3
   2ea5c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2ea60:	7a00      	ldrb	r0, [r0, #8]
   2ea62:	f7ec fe53 	bl	1b70c <sc_save>
   2ea66:	e7f5      	b.n	2ea54 <sc_ccc_cfg_write+0xa>

0002ea68 <bt_gatt_attr_read>:
{
   2ea68:	b510      	push	{r4, lr}
   2ea6a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2ea6e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2ea72:	428c      	cmp	r4, r1
   2ea74:	d30c      	bcc.n	2ea90 <bt_gatt_attr_read+0x28>
   2ea76:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   2ea78:	1a64      	subs	r4, r4, r1
   2ea7a:	42a3      	cmp	r3, r4
   2ea7c:	bfa8      	it	ge
   2ea7e:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2ea80:	b29c      	uxth	r4, r3
   2ea82:	4622      	mov	r2, r4
   2ea84:	9b03      	ldr	r3, [sp, #12]
   2ea86:	4419      	add	r1, r3
   2ea88:	f001 ff12 	bl	308b0 <memcpy>
	return len;
   2ea8c:	4620      	mov	r0, r4
}
   2ea8e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2ea90:	f06f 0006 	mvn.w	r0, #6
   2ea94:	e7fb      	b.n	2ea8e <bt_gatt_attr_read+0x26>

0002ea96 <read_ppcp>:
{
   2ea96:	b510      	push	{r4, lr}
   2ea98:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2ea9a:	2418      	movs	r4, #24
   2ea9c:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2eaa0:	2428      	movs	r4, #40	; 0x28
   2eaa2:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2eaa6:	2400      	movs	r4, #0
   2eaa8:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2eaac:	242a      	movs	r4, #42	; 0x2a
   2eaae:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2eab2:	2408      	movs	r4, #8
   2eab4:	9402      	str	r4, [sp, #8]
   2eab6:	ac04      	add	r4, sp, #16
   2eab8:	9401      	str	r4, [sp, #4]
   2eaba:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2eabe:	9400      	str	r4, [sp, #0]
   2eac0:	f7ff ffd2 	bl	2ea68 <bt_gatt_attr_read>
}
   2eac4:	b006      	add	sp, #24
   2eac6:	bd10      	pop	{r4, pc}

0002eac8 <read_appearance>:
{
   2eac8:	b510      	push	{r4, lr}
   2eaca:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2eacc:	2400      	movs	r4, #0
   2eace:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2ead2:	2402      	movs	r4, #2
   2ead4:	9402      	str	r4, [sp, #8]
   2ead6:	f10d 0416 	add.w	r4, sp, #22
   2eada:	9401      	str	r4, [sp, #4]
   2eadc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2eae0:	9400      	str	r4, [sp, #0]
   2eae2:	f7ff ffc1 	bl	2ea68 <bt_gatt_attr_read>
}
   2eae6:	b006      	add	sp, #24
   2eae8:	bd10      	pop	{r4, pc}

0002eaea <read_name>:
{
   2eaea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2eaee:	b084      	sub	sp, #16
   2eaf0:	4604      	mov	r4, r0
   2eaf2:	460d      	mov	r5, r1
   2eaf4:	4616      	mov	r6, r2
   2eaf6:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2eaf8:	f7e9 fb1a 	bl	18130 <bt_get_name>
   2eafc:	4680      	mov	r8, r0
				 strlen(name));
   2eafe:	f7dd faed 	bl	c0dc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2eb02:	b280      	uxth	r0, r0
   2eb04:	9002      	str	r0, [sp, #8]
   2eb06:	f8cd 8004 	str.w	r8, [sp, #4]
   2eb0a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2eb0e:	9300      	str	r3, [sp, #0]
   2eb10:	463b      	mov	r3, r7
   2eb12:	4632      	mov	r2, r6
   2eb14:	4629      	mov	r1, r5
   2eb16:	4620      	mov	r0, r4
   2eb18:	f7ff ffa6 	bl	2ea68 <bt_gatt_attr_read>
}
   2eb1c:	b004      	add	sp, #16
   2eb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002eb22 <cf_read>:
{
   2eb22:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eb24:	b087      	sub	sp, #28
   2eb26:	4604      	mov	r4, r0
   2eb28:	460d      	mov	r5, r1
   2eb2a:	4616      	mov	r6, r2
   2eb2c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2eb2e:	2300      	movs	r3, #0
   2eb30:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2eb34:	f7ec fc2e 	bl	1b394 <find_cf_cfg>
	if (cfg) {
   2eb38:	b110      	cbz	r0, 2eb40 <cf_read+0x1e>
		memcpy(data, cfg->data, sizeof(data));
   2eb3a:	7a03      	ldrb	r3, [r0, #8]
   2eb3c:	f88d 3014 	strb.w	r3, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2eb40:	2301      	movs	r3, #1
   2eb42:	9302      	str	r3, [sp, #8]
   2eb44:	ab05      	add	r3, sp, #20
   2eb46:	9301      	str	r3, [sp, #4]
   2eb48:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2eb4c:	9300      	str	r3, [sp, #0]
   2eb4e:	463b      	mov	r3, r7
   2eb50:	4632      	mov	r2, r6
   2eb52:	4629      	mov	r1, r5
   2eb54:	4620      	mov	r0, r4
   2eb56:	f7ff ff87 	bl	2ea68 <bt_gatt_attr_read>
}
   2eb5a:	b007      	add	sp, #28
   2eb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002eb5e <bt_gatt_attr_read_service>:
{
   2eb5e:	b570      	push	{r4, r5, r6, lr}
   2eb60:	b086      	sub	sp, #24
   2eb62:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   2eb66:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2eb68:	7826      	ldrb	r6, [r4, #0]
   2eb6a:	b146      	cbz	r6, 2eb7e <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2eb6c:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2eb6e:	2610      	movs	r6, #16
   2eb70:	9602      	str	r6, [sp, #8]
   2eb72:	9401      	str	r4, [sp, #4]
   2eb74:	9500      	str	r5, [sp, #0]
   2eb76:	f7ff ff77 	bl	2ea68 <bt_gatt_attr_read>
}
   2eb7a:	b006      	add	sp, #24
   2eb7c:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2eb7e:	8864      	ldrh	r4, [r4, #2]
   2eb80:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2eb84:	2402      	movs	r4, #2
   2eb86:	9402      	str	r4, [sp, #8]
   2eb88:	f10d 0416 	add.w	r4, sp, #22
   2eb8c:	9401      	str	r4, [sp, #4]
   2eb8e:	9500      	str	r5, [sp, #0]
   2eb90:	f7ff ff6a 	bl	2ea68 <bt_gatt_attr_read>
   2eb94:	e7f1      	b.n	2eb7a <bt_gatt_attr_read_service+0x1c>

0002eb96 <bt_gatt_attr_read_ccc>:
{
   2eb96:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eb98:	b087      	sub	sp, #28
   2eb9a:	4605      	mov	r5, r0
   2eb9c:	460c      	mov	r4, r1
   2eb9e:	4616      	mov	r6, r2
   2eba0:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2eba2:	68c9      	ldr	r1, [r1, #12]
   2eba4:	f7ff fe74 	bl	2e890 <find_ccc_cfg>
	if (cfg) {
   2eba8:	b190      	cbz	r0, 2ebd0 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   2ebaa:	8903      	ldrh	r3, [r0, #8]
   2ebac:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2ebb0:	2302      	movs	r3, #2
   2ebb2:	9302      	str	r3, [sp, #8]
   2ebb4:	f10d 0316 	add.w	r3, sp, #22
   2ebb8:	9301      	str	r3, [sp, #4]
   2ebba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2ebbe:	9300      	str	r3, [sp, #0]
   2ebc0:	463b      	mov	r3, r7
   2ebc2:	4632      	mov	r2, r6
   2ebc4:	4621      	mov	r1, r4
   2ebc6:	4628      	mov	r0, r5
   2ebc8:	f7ff ff4e 	bl	2ea68 <bt_gatt_attr_read>
}
   2ebcc:	b007      	add	sp, #28
   2ebce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2ebd0:	2300      	movs	r3, #0
   2ebd2:	f8ad 3016 	strh.w	r3, [sp, #22]
   2ebd6:	e7eb      	b.n	2ebb0 <bt_gatt_attr_read_ccc+0x1a>

0002ebd8 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2ebd8:	b1b8      	cbz	r0, 2ec0a <bt_gatt_attr_value_handle+0x32>
{
   2ebda:	b510      	push	{r4, lr}
   2ebdc:	b082      	sub	sp, #8
   2ebde:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2ebe0:	2300      	movs	r3, #0
   2ebe2:	f88d 3004 	strb.w	r3, [sp, #4]
   2ebe6:	f642 0303 	movw	r3, #10243	; 0x2803
   2ebea:	f8ad 3006 	strh.w	r3, [sp, #6]
   2ebee:	a901      	add	r1, sp, #4
   2ebf0:	6800      	ldr	r0, [r0, #0]
   2ebf2:	f7fe f9f1 	bl	2cfd8 <bt_uuid_cmp>
   2ebf6:	b950      	cbnz	r0, 2ec0e <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2ebf8:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   2ebfa:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2ebfc:	b940      	cbnz	r0, 2ec10 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2ebfe:	4620      	mov	r0, r4
   2ec00:	f7ec fe74 	bl	1b8ec <bt_gatt_attr_get_handle>
   2ec04:	3001      	adds	r0, #1
   2ec06:	b280      	uxth	r0, r0
   2ec08:	e002      	b.n	2ec10 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   2ec0a:	2000      	movs	r0, #0
}
   2ec0c:	4770      	bx	lr
	uint16_t handle = 0;
   2ec0e:	2000      	movs	r0, #0
}
   2ec10:	b002      	add	sp, #8
   2ec12:	bd10      	pop	{r4, pc}

0002ec14 <bt_gatt_attr_read_chrc>:
{
   2ec14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ec18:	b08a      	sub	sp, #40	; 0x28
   2ec1a:	4605      	mov	r5, r0
   2ec1c:	460c      	mov	r4, r1
   2ec1e:	4616      	mov	r6, r2
   2ec20:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   2ec22:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   2ec26:	f898 3006 	ldrb.w	r3, [r8, #6]
   2ec2a:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2ec2e:	4608      	mov	r0, r1
   2ec30:	f7ff ffd2 	bl	2ebd8 <bt_gatt_attr_value_handle>
   2ec34:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2ec38:	f8d8 1000 	ldr.w	r1, [r8]
   2ec3c:	780b      	ldrb	r3, [r1, #0]
   2ec3e:	b993      	cbnz	r3, 2ec66 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2ec40:	884b      	ldrh	r3, [r1, #2]
   2ec42:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   2ec46:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2ec48:	9302      	str	r3, [sp, #8]
   2ec4a:	ab05      	add	r3, sp, #20
   2ec4c:	9301      	str	r3, [sp, #4]
   2ec4e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2ec52:	9300      	str	r3, [sp, #0]
   2ec54:	463b      	mov	r3, r7
   2ec56:	4632      	mov	r2, r6
   2ec58:	4621      	mov	r1, r4
   2ec5a:	4628      	mov	r0, r5
   2ec5c:	f7ff ff04 	bl	2ea68 <bt_gatt_attr_read>
}
   2ec60:	b00a      	add	sp, #40	; 0x28
   2ec62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2ec66:	f851 cf01 	ldr.w	ip, [r1, #1]!
   2ec6a:	6848      	ldr	r0, [r1, #4]
   2ec6c:	688a      	ldr	r2, [r1, #8]
   2ec6e:	68cb      	ldr	r3, [r1, #12]
   2ec70:	f8cd c017 	str.w	ip, [sp, #23]
   2ec74:	f8cd 001b 	str.w	r0, [sp, #27]
   2ec78:	f8cd 201f 	str.w	r2, [sp, #31]
   2ec7c:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
		value_len += 16U;
   2ec80:	2313      	movs	r3, #19
   2ec82:	e7e1      	b.n	2ec48 <bt_gatt_attr_read_chrc+0x34>

0002ec84 <db_hash_process>:
{
   2ec84:	b508      	push	{r3, lr}
	db_hash_gen(true);
   2ec86:	2001      	movs	r0, #1
   2ec88:	f7ec fee8 	bl	1ba5c <db_hash_gen>
}
   2ec8c:	bd08      	pop	{r3, pc}

0002ec8e <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2ec8e:	f012 0f01 	tst.w	r2, #1
   2ec92:	d005      	beq.n	2eca0 <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2ec94:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2ec96:	f013 0f15 	tst.w	r3, #21
   2ec9a:	d01a      	beq.n	2ecd2 <bt_gatt_check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2ec9c:	684b      	ldr	r3, [r1, #4]
   2ec9e:	b1d3      	cbz	r3, 2ecd6 <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2eca0:	f012 0f02 	tst.w	r2, #2
   2eca4:	d005      	beq.n	2ecb2 <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2eca6:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   2eca8:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   2ecac:	d015      	beq.n	2ecda <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2ecae:	688b      	ldr	r3, [r1, #8]
   2ecb0:	b1ab      	cbz	r3, 2ecde <bt_gatt_check_perm+0x50>
{
   2ecb2:	b510      	push	{r4, lr}
	mask &= attr->perm;
   2ecb4:	7c8c      	ldrb	r4, [r1, #18]
   2ecb6:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2ecb8:	f014 0f30 	tst.w	r4, #48	; 0x30
   2ecbc:	d103      	bne.n	2ecc6 <bt_gatt_check_perm+0x38>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2ecbe:	f014 000c 	ands.w	r0, r4, #12
   2ecc2:	d10e      	bne.n	2ece2 <bt_gatt_check_perm+0x54>
}
   2ecc4:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2ecc6:	f7fe fe1b 	bl	2d900 <bt_conn_get_security>
   2ecca:	2802      	cmp	r0, #2
   2eccc:	d8f7      	bhi.n	2ecbe <bt_gatt_check_perm+0x30>
			return BT_ATT_ERR_AUTHENTICATION;
   2ecce:	2005      	movs	r0, #5
   2ecd0:	e7f8      	b.n	2ecc4 <bt_gatt_check_perm+0x36>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2ecd2:	2002      	movs	r0, #2
   2ecd4:	4770      	bx	lr
   2ecd6:	2002      	movs	r0, #2
   2ecd8:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2ecda:	2003      	movs	r0, #3
   2ecdc:	4770      	bx	lr
   2ecde:	2003      	movs	r0, #3
}
   2ece0:	4770      	bx	lr
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2ece2:	200f      	movs	r0, #15
   2ece4:	e7ee      	b.n	2ecc4 <bt_gatt_check_perm+0x36>

0002ece6 <bt_gatt_change_aware>:
{
   2ece6:	b510      	push	{r4, lr}
   2ece8:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2ecea:	f7ec fb53 	bl	1b394 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2ecee:	2800      	cmp	r0, #0
   2ecf0:	d042      	beq.n	2ed78 <bt_gatt_change_aware+0x92>
   2ecf2:	7a02      	ldrb	r2, [r0, #8]
   2ecf4:	f012 0f01 	tst.w	r2, #1
   2ecf8:	d101      	bne.n	2ecfe <bt_gatt_change_aware+0x18>
		return true;
   2ecfa:	2001      	movs	r0, #1
}
   2ecfc:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2ecfe:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ed02:	f3bf 8f5b 	dmb	ish
   2ed06:	68c2      	ldr	r2, [r0, #12]
   2ed08:	f3bf 8f5b 	dmb	ish
   2ed0c:	f012 0f01 	tst.w	r2, #1
   2ed10:	d134      	bne.n	2ed7c <bt_gatt_change_aware+0x96>
	if (!req) {
   2ed12:	b90c      	cbnz	r4, 2ed18 <bt_gatt_change_aware+0x32>
		return false;
   2ed14:	4620      	mov	r0, r4
   2ed16:	e7f1      	b.n	2ecfc <bt_gatt_change_aware+0x16>
   2ed18:	f3bf 8f5b 	dmb	ish
   2ed1c:	68c3      	ldr	r3, [r0, #12]
   2ed1e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2ed22:	f013 0f02 	tst.w	r3, #2
   2ed26:	d10d      	bne.n	2ed44 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ed28:	f3bf 8f5b 	dmb	ish
   2ed2c:	e851 3f00 	ldrex	r3, [r1]
   2ed30:	f043 0302 	orr.w	r3, r3, #2
   2ed34:	e841 3200 	strex	r2, r3, [r1]
   2ed38:	2a00      	cmp	r2, #0
   2ed3a:	d1f7      	bne.n	2ed2c <bt_gatt_change_aware+0x46>
   2ed3c:	f3bf 8f5b 	dmb	ish
	return false;
   2ed40:	2000      	movs	r0, #0
   2ed42:	e7db      	b.n	2ecfc <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ed44:	f3bf 8f5b 	dmb	ish
   2ed48:	e851 3f00 	ldrex	r3, [r1]
   2ed4c:	f023 0302 	bic.w	r3, r3, #2
   2ed50:	e841 3200 	strex	r2, r3, [r1]
   2ed54:	2a00      	cmp	r2, #0
   2ed56:	d1f7      	bne.n	2ed48 <bt_gatt_change_aware+0x62>
   2ed58:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ed5c:	f3bf 8f5b 	dmb	ish
   2ed60:	e851 3f00 	ldrex	r3, [r1]
   2ed64:	f043 0301 	orr.w	r3, r3, #1
   2ed68:	e841 3200 	strex	r2, r3, [r1]
   2ed6c:	2a00      	cmp	r2, #0
   2ed6e:	d1f7      	bne.n	2ed60 <bt_gatt_change_aware+0x7a>
   2ed70:	f3bf 8f5b 	dmb	ish
		return true;
   2ed74:	4620      	mov	r0, r4
   2ed76:	e7c1      	b.n	2ecfc <bt_gatt_change_aware+0x16>
		return true;
   2ed78:	2001      	movs	r0, #1
   2ed7a:	e7bf      	b.n	2ecfc <bt_gatt_change_aware+0x16>
		return true;
   2ed7c:	2001      	movs	r0, #1
   2ed7e:	e7bd      	b.n	2ecfc <bt_gatt_change_aware+0x16>

0002ed80 <bt_smp_recv>:
{
   2ed80:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ed82:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   2ed84:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2ed86:	f04f 32ff 	mov.w	r2, #4294967295
   2ed8a:	f04f 33ff 	mov.w	r3, #4294967295
   2ed8e:	2100      	movs	r1, #0
   2ed90:	4608      	mov	r0, r1
   2ed92:	f7fe fe9a 	bl	2daca <bt_l2cap_create_pdu_timeout>
   2ed96:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   2ed98:	f100 0608 	add.w	r6, r0, #8
   2ed9c:	2101      	movs	r1, #1
   2ed9e:	4630      	mov	r0, r6
   2eda0:	f7ed fe92 	bl	1cac8 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2eda4:	2505      	movs	r5, #5
   2eda6:	7005      	strb	r5, [r0, #0]
   2eda8:	2101      	movs	r1, #1
   2edaa:	4630      	mov	r0, r6
   2edac:	f7ed fe8c 	bl	1cac8 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2edb0:	7005      	strb	r5, [r0, #0]
   2edb2:	2300      	movs	r3, #0
   2edb4:	9300      	str	r3, [sp, #0]
   2edb6:	4622      	mov	r2, r4
   2edb8:	2106      	movs	r1, #6
   2edba:	4638      	mov	r0, r7
   2edbc:	f7fe fe8a 	bl	2dad4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2edc0:	b910      	cbnz	r0, 2edc8 <bt_smp_recv+0x48>
}
   2edc2:	2000      	movs	r0, #0
   2edc4:	b003      	add	sp, #12
   2edc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   2edc8:	4620      	mov	r0, r4
   2edca:	f7ed fd4b 	bl	1c864 <net_buf_unref>
   2edce:	e7f8      	b.n	2edc2 <bt_smp_recv+0x42>

0002edd0 <bt_smp_sign>:
}
   2edd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2edd4:	4770      	bx	lr

0002edd6 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2edd6:	2000      	movs	r0, #0
   2edd8:	4770      	bx	lr

0002edda <fixed_data_unref>:
}
   2edda:	4770      	bx	lr

0002eddc <data_alloc>:
{
   2eddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ede0:	4604      	mov	r4, r0
   2ede2:	460d      	mov	r5, r1
   2ede4:	4617      	mov	r7, r2
   2ede6:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ede8:	7980      	ldrb	r0, [r0, #6]
   2edea:	f7ed fb45 	bl	1c478 <net_buf_pool_get>
	return pool->alloc->cb->alloc(buf, size, timeout);
   2edee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2edf0:	681b      	ldr	r3, [r3, #0]
   2edf2:	f8d3 8000 	ldr.w	r8, [r3]
   2edf6:	463a      	mov	r2, r7
   2edf8:	4633      	mov	r3, r6
   2edfa:	4629      	mov	r1, r5
   2edfc:	4620      	mov	r0, r4
   2edfe:	47c0      	blx	r8
}
   2ee00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ee04 <data_unref>:
{
   2ee04:	b538      	push	{r3, r4, r5, lr}
   2ee06:	4604      	mov	r4, r0
   2ee08:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ee0a:	7980      	ldrb	r0, [r0, #6]
   2ee0c:	f7ed fb34 	bl	1c478 <net_buf_pool_get>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2ee10:	7963      	ldrb	r3, [r4, #5]
   2ee12:	f013 0f02 	tst.w	r3, #2
   2ee16:	d105      	bne.n	2ee24 <data_unref+0x20>
	pool->alloc->cb->unref(buf, data);
   2ee18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2ee1a:	681b      	ldr	r3, [r3, #0]
   2ee1c:	689b      	ldr	r3, [r3, #8]
   2ee1e:	4629      	mov	r1, r5
   2ee20:	4620      	mov	r0, r4
   2ee22:	4798      	blx	r3
}
   2ee24:	bd38      	pop	{r3, r4, r5, pc}

0002ee26 <net_buf_id>:
{
   2ee26:	b510      	push	{r4, lr}
   2ee28:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ee2a:	7980      	ldrb	r0, [r0, #6]
   2ee2c:	f7ed fb24 	bl	1c478 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2ee30:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   2ee34:	3317      	adds	r3, #23
   2ee36:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2ee3a:	6b00      	ldr	r0, [r0, #48]	; 0x30
   2ee3c:	1a20      	subs	r0, r4, r0
}
   2ee3e:	fbb0 f0f3 	udiv	r0, r0, r3
   2ee42:	bd10      	pop	{r4, pc}

0002ee44 <fixed_data_alloc>:
{
   2ee44:	b570      	push	{r4, r5, r6, lr}
   2ee46:	4604      	mov	r4, r0
   2ee48:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2ee4a:	7980      	ldrb	r0, [r0, #6]
   2ee4c:	f7ed fb14 	bl	1c478 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2ee50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2ee52:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2ee54:	682a      	ldr	r2, [r5, #0]
   2ee56:	6819      	ldr	r1, [r3, #0]
   2ee58:	428a      	cmp	r2, r1
   2ee5a:	bf28      	it	cs
   2ee5c:	460a      	movcs	r2, r1
   2ee5e:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2ee60:	685d      	ldr	r5, [r3, #4]
   2ee62:	681e      	ldr	r6, [r3, #0]
   2ee64:	4620      	mov	r0, r4
   2ee66:	f7ff ffde 	bl	2ee26 <net_buf_id>
}
   2ee6a:	fb00 5006 	mla	r0, r0, r6, r5
   2ee6e:	bd70      	pop	{r4, r5, r6, pc}

0002ee70 <net_buf_alloc_fixed>:
{
   2ee70:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2ee72:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   2ee74:	6849      	ldr	r1, [r1, #4]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2ee76:	6809      	ldr	r1, [r1, #0]
   2ee78:	f7ed fb30 	bl	1c4dc <net_buf_alloc_len>
}
   2ee7c:	bd08      	pop	{r3, pc}

0002ee7e <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2ee7e:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2ee80:	6803      	ldr	r3, [r0, #0]
   2ee82:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2ee84:	2102      	movs	r1, #2
   2ee86:	f7ed fdb7 	bl	1c9f8 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2ee8a:	4620      	mov	r0, r4
   2ee8c:	bd10      	pop	{r4, pc}

0002ee8e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2ee8e:	6802      	ldr	r2, [r0, #0]
   2ee90:	6880      	ldr	r0, [r0, #8]
}
   2ee92:	1a10      	subs	r0, r2, r0
   2ee94:	4770      	bx	lr

0002ee96 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   2ee96:	b538      	push	{r3, r4, r5, lr}
   2ee98:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2ee9a:	88c5      	ldrh	r5, [r0, #6]
   2ee9c:	f7ff fff7 	bl	2ee8e <net_buf_simple_headroom>
   2eea0:	1a2d      	subs	r5, r5, r0
   2eea2:	88a0      	ldrh	r0, [r4, #4]
}
   2eea4:	1a28      	subs	r0, r5, r0
   2eea6:	bd38      	pop	{r3, r4, r5, pc}

0002eea8 <net_buf_simple_add_mem>:
{
   2eea8:	b538      	push	{r3, r4, r5, lr}
   2eeaa:	460d      	mov	r5, r1
   2eeac:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2eeae:	4611      	mov	r1, r2
   2eeb0:	f7ed fe0a 	bl	1cac8 <net_buf_simple_add>
   2eeb4:	4622      	mov	r2, r4
   2eeb6:	4629      	mov	r1, r5
   2eeb8:	f001 fcfa 	bl	308b0 <memcpy>
}
   2eebc:	bd38      	pop	{r3, r4, r5, pc}

0002eebe <net_buf_simple_add_u8>:
{
   2eebe:	b510      	push	{r4, lr}
   2eec0:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2eec2:	2101      	movs	r1, #1
   2eec4:	f7ed fe00 	bl	1cac8 <net_buf_simple_add>
	*u8 = val;
   2eec8:	7004      	strb	r4, [r0, #0]
}
   2eeca:	bd10      	pop	{r4, pc}

0002eecc <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2eecc:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2eece:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2eed2:	0089      	lsls	r1, r1, #2
   2eed4:	3140      	adds	r1, #64	; 0x40
}
   2eed6:	4408      	add	r0, r1
   2eed8:	4770      	bx	lr

0002eeda <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2eeda:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2eedc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2eee0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2eee4:	4770      	bx	lr

0002eee6 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2eee6:	6900      	ldr	r0, [r0, #16]
}
   2eee8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   2eeec:	4770      	bx	lr

0002eeee <set_off_state>:
   2eeee:	f04f 0340 	mov.w	r3, #64	; 0x40
   2eef2:	f3ef 8211 	mrs	r2, BASEPRI
   2eef6:	f383 8812 	msr	BASEPRI_MAX, r3
   2eefa:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2eefe:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2ef00:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2ef04:	d001      	beq.n	2ef0a <set_off_state+0x1c>
   2ef06:	428b      	cmp	r3, r1
   2ef08:	d107      	bne.n	2ef1a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2ef0a:	2301      	movs	r3, #1
   2ef0c:	6003      	str	r3, [r0, #0]
	int err = 0;
   2ef0e:	2000      	movs	r0, #0
	__asm__ volatile(
   2ef10:	f382 8811 	msr	BASEPRI, r2
   2ef14:	f3bf 8f6f 	isb	sy
}
   2ef18:	4770      	bx	lr
		err = -EPERM;
   2ef1a:	f04f 30ff 	mov.w	r0, #4294967295
   2ef1e:	e7f7      	b.n	2ef10 <set_off_state+0x22>

0002ef20 <set_starting_state>:
{
   2ef20:	b410      	push	{r4}
	__asm__ volatile(
   2ef22:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ef26:	f3ef 8211 	mrs	r2, BASEPRI
   2ef2a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ef2e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2ef32:	6803      	ldr	r3, [r0, #0]
   2ef34:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2ef38:	f003 0307 	and.w	r3, r3, #7
   2ef3c:	2b01      	cmp	r3, #1
   2ef3e:	d009      	beq.n	2ef54 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   2ef40:	428c      	cmp	r4, r1
   2ef42:	d00a      	beq.n	2ef5a <set_starting_state+0x3a>
		err = -EPERM;
   2ef44:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2ef48:	f382 8811 	msr	BASEPRI, r2
   2ef4c:	f3bf 8f6f 	isb	sy
}
   2ef50:	bc10      	pop	{r4}
   2ef52:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2ef54:	6001      	str	r1, [r0, #0]
	int err = 0;
   2ef56:	2000      	movs	r0, #0
   2ef58:	e7f6      	b.n	2ef48 <set_starting_state+0x28>
		err = -EALREADY;
   2ef5a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2ef5e:	e7f3      	b.n	2ef48 <set_starting_state+0x28>

0002ef60 <set_on_state>:
	__asm__ volatile(
   2ef60:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ef64:	f3ef 8211 	mrs	r2, BASEPRI
   2ef68:	f383 8812 	msr	BASEPRI_MAX, r3
   2ef6c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2ef70:	6803      	ldr	r3, [r0, #0]
   2ef72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2ef76:	f043 0302 	orr.w	r3, r3, #2
   2ef7a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2ef7c:	f382 8811 	msr	BASEPRI, r2
   2ef80:	f3bf 8f6f 	isb	sy
}
   2ef84:	4770      	bx	lr

0002ef86 <clkstarted_handle>:
{
   2ef86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ef88:	4606      	mov	r6, r0
   2ef8a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2ef8c:	f7ff ff9e 	bl	2eecc <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2ef90:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2ef92:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2ef94:	2300      	movs	r3, #0
   2ef96:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2ef9a:	f7ff ffe1 	bl	2ef60 <set_on_state>
	if (callback) {
   2ef9e:	b11d      	cbz	r5, 2efa8 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2efa0:	463a      	mov	r2, r7
   2efa2:	4621      	mov	r1, r4
   2efa4:	4630      	mov	r0, r6
   2efa6:	47a8      	blx	r5
}
   2efa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002efaa <async_start>:
{
   2efaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2efae:	4606      	mov	r6, r0
   2efb0:	4690      	mov	r8, r2
   2efb2:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2efb4:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2efb6:	4629      	mov	r1, r5
   2efb8:	f7ff ff88 	bl	2eecc <get_sub_data>
   2efbc:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2efbe:	9906      	ldr	r1, [sp, #24]
   2efc0:	3008      	adds	r0, #8
   2efc2:	f7ff ffad 	bl	2ef20 <set_starting_state>
	if (err < 0) {
   2efc6:	2800      	cmp	r0, #0
   2efc8:	db09      	blt.n	2efde <async_start+0x34>
	subdata->cb = cb;
   2efca:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2efce:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2efd0:	4629      	mov	r1, r5
   2efd2:	4630      	mov	r0, r6
   2efd4:	f7ff ff81 	bl	2eeda <get_sub_config>
   2efd8:	6803      	ldr	r3, [r0, #0]
   2efda:	4798      	blx	r3
	return 0;
   2efdc:	2000      	movs	r0, #0
}
   2efde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002efe2 <api_start>:
{
   2efe2:	b510      	push	{r4, lr}
   2efe4:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2efe6:	2480      	movs	r4, #128	; 0x80
   2efe8:	9400      	str	r4, [sp, #0]
   2efea:	f7ff ffde 	bl	2efaa <async_start>
}
   2efee:	b002      	add	sp, #8
   2eff0:	bd10      	pop	{r4, pc}

0002eff2 <onoff_started_callback>:
{
   2eff2:	b510      	push	{r4, lr}
   2eff4:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2eff6:	b2c9      	uxtb	r1, r1
   2eff8:	f7ff ff75 	bl	2eee6 <get_onoff_manager>
	notify(mgr, 0);
   2effc:	2100      	movs	r1, #0
   2effe:	47a0      	blx	r4
}
   2f000:	bd10      	pop	{r4, pc}

0002f002 <hfclk_start>:
{
   2f002:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2f004:	2001      	movs	r0, #1
   2f006:	f7f1 fa99 	bl	2053c <nrfx_clock_start>
}
   2f00a:	bd08      	pop	{r3, pc}

0002f00c <lfclk_start>:
{
   2f00c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2f00e:	2000      	movs	r0, #0
   2f010:	f7f1 fa94 	bl	2053c <nrfx_clock_start>
}
   2f014:	bd08      	pop	{r3, pc}

0002f016 <hfclk_stop>:
{
   2f016:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2f018:	2001      	movs	r0, #1
   2f01a:	f7f1 fab7 	bl	2058c <nrfx_clock_stop>
}
   2f01e:	bd08      	pop	{r3, pc}

0002f020 <lfclk_stop>:
{
   2f020:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2f022:	2000      	movs	r0, #0
   2f024:	f7f1 fab2 	bl	2058c <nrfx_clock_stop>
}
   2f028:	bd08      	pop	{r3, pc}

0002f02a <api_stop>:
{
   2f02a:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2f02c:	2280      	movs	r2, #128	; 0x80
   2f02e:	f7ed fdff 	bl	1cc30 <stop>
}
   2f032:	bd08      	pop	{r3, pc}

0002f034 <blocking_start_callback>:
{
   2f034:	b508      	push	{r3, lr}
   2f036:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2f038:	f7f5 fb4a 	bl	246d0 <z_impl_k_sem_give>
}
   2f03c:	bd08      	pop	{r3, pc}

0002f03e <get_pull>:
	if (flags & GPIO_PULL_UP) {
   2f03e:	f010 0f10 	tst.w	r0, #16
   2f042:	d104      	bne.n	2f04e <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   2f044:	f010 0f20 	tst.w	r0, #32
   2f048:	d103      	bne.n	2f052 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   2f04a:	2000      	movs	r0, #0
   2f04c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   2f04e:	2003      	movs	r0, #3
   2f050:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   2f052:	2001      	movs	r0, #1
}
   2f054:	4770      	bx	lr

0002f056 <gpio_nrfx_port_get_raw>:
	return port->config;
   2f056:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f058:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2f05a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2f05e:	600b      	str	r3, [r1, #0]
}
   2f060:	2000      	movs	r0, #0
   2f062:	4770      	bx	lr

0002f064 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   2f064:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f066:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2f068:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2f06c:	4042      	eors	r2, r0
   2f06e:	400a      	ands	r2, r1
   2f070:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2f072:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2f076:	2000      	movs	r0, #0
   2f078:	4770      	bx	lr

0002f07a <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2f07a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f07c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2f07e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2f082:	2000      	movs	r0, #0
   2f084:	4770      	bx	lr

0002f086 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2f086:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f088:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2f08a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2f08e:	2000      	movs	r0, #0
   2f090:	4770      	bx	lr

0002f092 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   2f092:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f094:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2f096:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2f09a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2f09c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2f0a0:	2000      	movs	r0, #0
   2f0a2:	4770      	bx	lr

0002f0a4 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   2f0a4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   2f0a8:	d007      	beq.n	2f0ba <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2f0aa:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   2f0ae:	d00d      	beq.n	2f0cc <get_trigger+0x28>
   2f0b0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   2f0b4:	d008      	beq.n	2f0c8 <get_trigger+0x24>
   2f0b6:	2001      	movs	r0, #1
}
   2f0b8:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2f0ba:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   2f0be:	d001      	beq.n	2f0c4 <get_trigger+0x20>
   2f0c0:	2005      	movs	r0, #5
   2f0c2:	4770      	bx	lr
   2f0c4:	2004      	movs	r0, #4
   2f0c6:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2f0c8:	2002      	movs	r0, #2
   2f0ca:	4770      	bx	lr
   2f0cc:	2003      	movs	r0, #3
   2f0ce:	4770      	bx	lr

0002f0d0 <spi_nrfx_transceive>:
{
   2f0d0:	b510      	push	{r4, lr}
   2f0d2:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
   2f0d4:	2400      	movs	r4, #0
   2f0d6:	9401      	str	r4, [sp, #4]
   2f0d8:	9400      	str	r4, [sp, #0]
   2f0da:	f7ee fd8b 	bl	1dbf4 <transceive>
}
   2f0de:	b002      	add	sp, #8
   2f0e0:	bd10      	pop	{r4, pc}

0002f0e2 <spi_nrfx_transceive>:
{
   2f0e2:	b510      	push	{r4, lr}
   2f0e4:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
   2f0e6:	2400      	movs	r4, #0
   2f0e8:	9401      	str	r4, [sp, #4]
   2f0ea:	9400      	str	r4, [sp, #0]
   2f0ec:	f7ef fb00 	bl	1e6f0 <transceive>
}
   2f0f0:	b002      	add	sp, #8
   2f0f2:	bd10      	pop	{r4, pc}

0002f0f4 <endtx_isr>:
	return dev->config;
   2f0f4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f0f6:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2f0f8:	f04f 0140 	mov.w	r1, #64	; 0x40
   2f0fc:	f3ef 8211 	mrs	r2, BASEPRI
   2f100:	f381 8812 	msr	BASEPRI_MAX, r1
   2f104:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f108:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2f10c:	b131      	cbz	r1, 2f11c <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f10e:	2100      	movs	r1, #0
   2f110:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2f114:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f118:	2101      	movs	r1, #1
   2f11a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2f11c:	f382 8811 	msr	BASEPRI, r2
   2f120:	f3bf 8f6f 	isb	sy
}
   2f124:	4770      	bx	lr

0002f126 <uarte_nrfx_configure>:
{
   2f126:	b570      	push	{r4, r5, r6, lr}
   2f128:	b082      	sub	sp, #8
   2f12a:	4605      	mov	r5, r0
   2f12c:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   2f12e:	794b      	ldrb	r3, [r1, #5]
   2f130:	2b01      	cmp	r3, #1
   2f132:	d006      	beq.n	2f142 <uarte_nrfx_configure+0x1c>
   2f134:	2b03      	cmp	r3, #3
   2f136:	d011      	beq.n	2f15c <uarte_nrfx_configure+0x36>
   2f138:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   2f13c:	4618      	mov	r0, r3
   2f13e:	b002      	add	sp, #8
   2f140:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2f142:	2300      	movs	r3, #0
   2f144:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2f148:	79a3      	ldrb	r3, [r4, #6]
   2f14a:	2b03      	cmp	r3, #3
   2f14c:	d138      	bne.n	2f1c0 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   2f14e:	79e3      	ldrb	r3, [r4, #7]
   2f150:	b143      	cbz	r3, 2f164 <uarte_nrfx_configure+0x3e>
   2f152:	2b01      	cmp	r3, #1
   2f154:	d010      	beq.n	2f178 <uarte_nrfx_configure+0x52>
   2f156:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f15a:	e7ef      	b.n	2f13c <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2f15c:	2310      	movs	r3, #16
   2f15e:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   2f162:	e7f1      	b.n	2f148 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   2f164:	2300      	movs	r3, #0
   2f166:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   2f16a:	7923      	ldrb	r3, [r4, #4]
   2f16c:	b143      	cbz	r3, 2f180 <uarte_nrfx_configure+0x5a>
   2f16e:	2b02      	cmp	r3, #2
   2f170:	d022      	beq.n	2f1b8 <uarte_nrfx_configure+0x92>
   2f172:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f176:	e7e1      	b.n	2f13c <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   2f178:	2301      	movs	r3, #1
   2f17a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2f17e:	e7f4      	b.n	2f16a <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2f180:	2300      	movs	r3, #0
   2f182:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2f186:	6821      	ldr	r1, [r4, #0]
   2f188:	4628      	mov	r0, r5
   2f18a:	f7ef fc3b 	bl	1ea04 <baudrate_set>
   2f18e:	4603      	mov	r3, r0
   2f190:	b9c8      	cbnz	r0, 2f1c6 <uarte_nrfx_configure+0xa0>
	return dev->config;
   2f192:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   2f194:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2f196:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   2f19a:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   2f19e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2f1a2:	4331      	orrs	r1, r6
   2f1a4:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2f1a6:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   2f1aa:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   2f1ac:	3204      	adds	r2, #4
   2f1ae:	e894 0003 	ldmia.w	r4, {r0, r1}
   2f1b2:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   2f1b6:	e7c1      	b.n	2f13c <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2f1b8:	230e      	movs	r3, #14
   2f1ba:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   2f1be:	e7e2      	b.n	2f186 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   2f1c0:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f1c4:	e7ba      	b.n	2f13c <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   2f1c6:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2f1ca:	e7b7      	b.n	2f13c <uarte_nrfx_configure+0x16>

0002f1cc <uarte_nrfx_config_get>:
{
   2f1cc:	460b      	mov	r3, r1
	return dev->data;
   2f1ce:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   2f1d0:	6891      	ldr	r1, [r2, #8]
   2f1d2:	6850      	ldr	r0, [r2, #4]
   2f1d4:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2f1d8:	2000      	movs	r0, #0
   2f1da:	4770      	bx	lr

0002f1dc <uarte_nrfx_err_check>:
	return dev->config;
   2f1dc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f1de:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2f1e0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2f1e4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2f1e8:	4770      	bx	lr

0002f1ea <is_tx_ready>:
	return dev->config;
   2f1ea:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f1ec:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2f1ee:	685b      	ldr	r3, [r3, #4]
   2f1f0:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f1f4:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2f1f8:	b929      	cbnz	r1, 2f206 <is_tx_ready+0x1c>
   2f1fa:	b933      	cbnz	r3, 2f20a <is_tx_ready+0x20>
   2f1fc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2f200:	b92b      	cbnz	r3, 2f20e <is_tx_ready+0x24>
   2f202:	2000      	movs	r0, #0
   2f204:	4770      	bx	lr
   2f206:	2001      	movs	r0, #1
   2f208:	4770      	bx	lr
   2f20a:	2000      	movs	r0, #0
   2f20c:	4770      	bx	lr
   2f20e:	2001      	movs	r0, #1
}
   2f210:	4770      	bx	lr

0002f212 <uarte_enable>:
	return dev->data;
   2f212:	6903      	ldr	r3, [r0, #16]
	if (data->async) {
   2f214:	68db      	ldr	r3, [r3, #12]
   2f216:	b123      	cbz	r3, 2f222 <uarte_enable+0x10>
		bool disabled = data->async->low_power_mask == 0;
   2f218:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
		data->async->low_power_mask |= mask;
   2f21c:	4311      	orrs	r1, r2
   2f21e:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
	return dev->config;
   2f222:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f224:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2f226:	2208      	movs	r2, #8
   2f228:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2f22c:	4770      	bx	lr

0002f22e <tx_start>:
{
   2f22e:	b510      	push	{r4, lr}
	return dev->config;
   2f230:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f232:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f234:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f238:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f23c:	2300      	movs	r3, #0
   2f23e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2f242:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   2f246:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   2f24a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   2f24e:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f250:	685b      	ldr	r3, [r3, #4]
   2f252:	f013 0f10 	tst.w	r3, #16
   2f256:	d102      	bne.n	2f25e <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f258:	2301      	movs	r3, #1
   2f25a:	60a3      	str	r3, [r4, #8]
}
   2f25c:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2f25e:	2101      	movs	r1, #1
   2f260:	f7ff ffd7 	bl	2f212 <uarte_enable>
    p_reg->INTENSET = mask;
   2f264:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2f268:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2f26c:	e7f4      	b.n	2f258 <tx_start+0x2a>

0002f26e <uart_disable>:
	return dev->config;
   2f26e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f270:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2f272:	2200      	movs	r2, #0
   2f274:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2f278:	4770      	bx	lr

0002f27a <uarte_nrfx_rx_counting_init>:
	return dev->config;
   2f27a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f27c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2f27e:	2204      	movs	r2, #4
   2f280:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f284:	2000      	movs	r0, #0
   2f286:	4770      	bx	lr

0002f288 <start_tx_locked>:
{
   2f288:	b538      	push	{r3, r4, r5, lr}
   2f28a:	4605      	mov	r5, r0
   2f28c:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
   2f28e:	f7ff ffac 	bl	2f1ea <is_tx_ready>
   2f292:	b920      	cbnz	r0, 2f29e <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2f294:	68e3      	ldr	r3, [r4, #12]
   2f296:	2201      	movs	r2, #1
   2f298:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
   2f29c:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
   2f29e:	68e3      	ldr	r3, [r4, #12]
   2f2a0:	2200      	movs	r2, #0
   2f2a2:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
   2f2a6:	68e3      	ldr	r3, [r4, #12]
   2f2a8:	f04f 32ff 	mov.w	r2, #4294967295
   2f2ac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2f2b0:	68e3      	ldr	r3, [r4, #12]
   2f2b2:	695a      	ldr	r2, [r3, #20]
   2f2b4:	6919      	ldr	r1, [r3, #16]
   2f2b6:	4628      	mov	r0, r5
   2f2b8:	f7ff ffb9 	bl	2f22e <tx_start>
}
   2f2bc:	e7ee      	b.n	2f29c <start_tx_locked+0x14>

0002f2be <user_callback>:
{
   2f2be:	b508      	push	{r3, lr}
	return dev->data;
   2f2c0:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
   2f2c2:	68da      	ldr	r2, [r3, #12]
   2f2c4:	6813      	ldr	r3, [r2, #0]
   2f2c6:	b10b      	cbz	r3, 2f2cc <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
   2f2c8:	6852      	ldr	r2, [r2, #4]
   2f2ca:	4798      	blx	r3
}
   2f2cc:	bd08      	pop	{r3, pc}

0002f2ce <notify_uart_rx_rdy>:
{
   2f2ce:	b500      	push	{lr}
   2f2d0:	b087      	sub	sp, #28
	return dev->data;
   2f2d2:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
   2f2d4:	2300      	movs	r3, #0
   2f2d6:	9301      	str	r3, [sp, #4]
   2f2d8:	9302      	str	r3, [sp, #8]
   2f2da:	9303      	str	r3, [sp, #12]
   2f2dc:	9304      	str	r3, [sp, #16]
   2f2de:	9305      	str	r3, [sp, #20]
   2f2e0:	2302      	movs	r3, #2
   2f2e2:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2f2e6:	68d3      	ldr	r3, [r2, #12]
   2f2e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	struct uart_event evt = {
   2f2ea:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
   2f2ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	struct uart_event evt = {
   2f2ee:	9303      	str	r3, [sp, #12]
   2f2f0:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
   2f2f2:	a901      	add	r1, sp, #4
   2f2f4:	f7ff ffe3 	bl	2f2be <user_callback>
}
   2f2f8:	b007      	add	sp, #28
   2f2fa:	f85d fb04 	ldr.w	pc, [sp], #4

0002f2fe <notify_rx_buf_release>:
	if (*buf) {
   2f2fe:	680b      	ldr	r3, [r1, #0]
   2f300:	b1ab      	cbz	r3, 2f32e <notify_rx_buf_release+0x30>
{
   2f302:	b530      	push	{r4, r5, lr}
   2f304:	b087      	sub	sp, #28
   2f306:	460c      	mov	r4, r1
   2f308:	4615      	mov	r5, r2
		struct uart_event evt = {
   2f30a:	2300      	movs	r3, #0
   2f30c:	9301      	str	r3, [sp, #4]
   2f30e:	9303      	str	r3, [sp, #12]
   2f310:	9304      	str	r3, [sp, #16]
   2f312:	9305      	str	r3, [sp, #20]
   2f314:	2304      	movs	r3, #4
   2f316:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
   2f31a:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
   2f31c:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
   2f31e:	a901      	add	r1, sp, #4
   2f320:	f7ff ffcd 	bl	2f2be <user_callback>
		if (clear) {
   2f324:	b10d      	cbz	r5, 2f32a <notify_rx_buf_release+0x2c>
			*buf = NULL;
   2f326:	2300      	movs	r3, #0
   2f328:	6023      	str	r3, [r4, #0]
}
   2f32a:	b007      	add	sp, #28
   2f32c:	bd30      	pop	{r4, r5, pc}
   2f32e:	4770      	bx	lr

0002f330 <notify_rx_disable>:
{
   2f330:	b500      	push	{lr}
   2f332:	b087      	sub	sp, #28
	struct uart_event evt = {
   2f334:	2300      	movs	r3, #0
   2f336:	9301      	str	r3, [sp, #4]
   2f338:	9302      	str	r3, [sp, #8]
   2f33a:	9303      	str	r3, [sp, #12]
   2f33c:	9304      	str	r3, [sp, #16]
   2f33e:	9305      	str	r3, [sp, #20]
   2f340:	2305      	movs	r3, #5
   2f342:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2f346:	a901      	add	r1, sp, #4
   2f348:	f7ff ffb9 	bl	2f2be <user_callback>
}
   2f34c:	b007      	add	sp, #28
   2f34e:	f85d fb04 	ldr.w	pc, [sp], #4

0002f352 <uarte_nrfx_rx_buf_rsp>:
{
   2f352:	b470      	push	{r4, r5, r6}
	return dev->data;
   2f354:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   2f356:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f358:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2f35a:	f04f 0040 	mov.w	r0, #64	; 0x40
   2f35e:	f3ef 8511 	mrs	r5, BASEPRI
   2f362:	f380 8812 	msr	BASEPRI_MAX, r0
   2f366:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2f36a:	68e0      	ldr	r0, [r4, #12]
   2f36c:	6e06      	ldr	r6, [r0, #96]	; 0x60
   2f36e:	b1ae      	cbz	r6, 2f39c <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
   2f370:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
   2f372:	b9b6      	cbnz	r6, 2f3a2 <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
   2f374:	66c1      	str	r1, [r0, #108]	; 0x6c
		data->async->rx_next_buf_len = len;
   2f376:	68e0      	ldr	r0, [r4, #12]
   2f378:	6702      	str	r2, [r0, #112]	; 0x70
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2f37a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2f37e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2f382:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2f386:	f042 0220 	orr.w	r2, r2, #32
   2f38a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
   2f38e:	2000      	movs	r0, #0
	__asm__ volatile(
   2f390:	f385 8811 	msr	BASEPRI, r5
   2f394:	f3bf 8f6f 	isb	sy
}
   2f398:	bc70      	pop	{r4, r5, r6}
   2f39a:	4770      	bx	lr
		err = -EACCES;
   2f39c:	f06f 000c 	mvn.w	r0, #12
   2f3a0:	e7f6      	b.n	2f390 <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
   2f3a2:	f06f 000f 	mvn.w	r0, #15
   2f3a6:	e7f3      	b.n	2f390 <uarte_nrfx_rx_buf_rsp+0x3e>

0002f3a8 <uarte_nrfx_callback_set>:
	return dev->data;
   2f3a8:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2f3aa:	68d8      	ldr	r0, [r3, #12]
   2f3ac:	b120      	cbz	r0, 2f3b8 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2f3ae:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2f3b0:	68db      	ldr	r3, [r3, #12]
   2f3b2:	605a      	str	r2, [r3, #4]
	return 0;
   2f3b4:	2000      	movs	r0, #0
   2f3b6:	4770      	bx	lr
		return -ENOTSUP;
   2f3b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2f3bc:	4770      	bx	lr

0002f3be <uarte_nrfx_poll_in>:
	return dev->data;
   2f3be:	6902      	ldr	r2, [r0, #16]
	return dev->config;
   2f3c0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f3c2:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2f3c4:	68d0      	ldr	r0, [r2, #12]
   2f3c6:	b960      	cbnz	r0, 2f3e2 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f3c8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f3cc:	b160      	cbz	r0, 2f3e8 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   2f3ce:	7d52      	ldrb	r2, [r2, #21]
   2f3d0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f3d2:	2000      	movs	r0, #0
   2f3d4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2f3d8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f3dc:	2201      	movs	r2, #1
   2f3de:	601a      	str	r2, [r3, #0]
	return 0;
   2f3e0:	4770      	bx	lr
		return -ENOTSUP;
   2f3e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2f3e6:	4770      	bx	lr
		return -1;
   2f3e8:	f04f 30ff 	mov.w	r0, #4294967295
}
   2f3ec:	4770      	bx	lr

0002f3ee <wait_tx_ready>:
{
   2f3ee:	b570      	push	{r4, r5, r6, lr}
   2f3f0:	4606      	mov	r6, r0
   2f3f2:	e014      	b.n	2f41e <wait_tx_ready+0x30>
		if (res) {
   2f3f4:	b17d      	cbz	r5, 2f416 <wait_tx_ready+0x28>
	__asm__ volatile(
   2f3f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f3fa:	f3ef 8411 	mrs	r4, BASEPRI
   2f3fe:	f383 8812 	msr	BASEPRI_MAX, r3
   2f402:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2f406:	4630      	mov	r0, r6
   2f408:	f7ff feef 	bl	2f1ea <is_tx_ready>
   2f40c:	b9a0      	cbnz	r0, 2f438 <wait_tx_ready+0x4a>
	__asm__ volatile(
   2f40e:	f384 8811 	msr	BASEPRI, r4
   2f412:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   2f416:	2021      	movs	r0, #33	; 0x21
   2f418:	2100      	movs	r1, #0
   2f41a:	f7f7 fa45 	bl	268a8 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2f41e:	2464      	movs	r4, #100	; 0x64
   2f420:	4630      	mov	r0, r6
   2f422:	f7ff fee2 	bl	2f1ea <is_tx_ready>
   2f426:	4605      	mov	r5, r0
   2f428:	2800      	cmp	r0, #0
   2f42a:	d1e3      	bne.n	2f3f4 <wait_tx_ready+0x6>
   2f42c:	2001      	movs	r0, #1
   2f42e:	f000 ff66 	bl	302fe <nrfx_busy_wait>
   2f432:	3c01      	subs	r4, #1
   2f434:	d1f4      	bne.n	2f420 <wait_tx_ready+0x32>
   2f436:	e7dd      	b.n	2f3f4 <wait_tx_ready+0x6>
}
   2f438:	4620      	mov	r0, r4
   2f43a:	bd70      	pop	{r4, r5, r6, pc}

0002f43c <uarte_nrfx_rx_disable>:
{
   2f43c:	b538      	push	{r3, r4, r5, lr}
	return dev->data;
   2f43e:	6905      	ldr	r5, [r0, #16]
	return dev->config;
   2f440:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f442:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2f444:	68eb      	ldr	r3, [r5, #12]
   2f446:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   2f448:	b1ba      	cbz	r2, 2f47a <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2f44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2f44c:	b153      	cbz	r3, 2f464 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2f44e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2f452:	f023 0320 	bic.w	r3, r3, #32
   2f456:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f45a:	2300      	movs	r3, #0
   2f45c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2f460:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2f464:	68e8      	ldr	r0, [r5, #12]
   2f466:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
   2f468:	f001 f9a4 	bl	307b4 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2f46c:	68eb      	ldr	r3, [r5, #12]
   2f46e:	2000      	movs	r0, #0
   2f470:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f474:	2301      	movs	r3, #1
   2f476:	6063      	str	r3, [r4, #4]
}
   2f478:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2f47a:	f06f 000d 	mvn.w	r0, #13
   2f47e:	e7fb      	b.n	2f478 <uarte_nrfx_rx_disable+0x3c>

0002f480 <error_isr>:
{
   2f480:	b510      	push	{r4, lr}
   2f482:	b086      	sub	sp, #24
   2f484:	4604      	mov	r4, r0
	return dev->config;
   2f486:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f488:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2f48a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2f48e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
   2f492:	2300      	movs	r3, #0
   2f494:	9301      	str	r3, [sp, #4]
   2f496:	9302      	str	r3, [sp, #8]
   2f498:	9303      	str	r3, [sp, #12]
   2f49a:	9304      	str	r3, [sp, #16]
   2f49c:	9305      	str	r3, [sp, #20]
   2f49e:	2306      	movs	r3, #6
   2f4a0:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2f4a4:	f012 0f01 	tst.w	r2, #1
   2f4a8:	d108      	bne.n	2f4bc <error_isr+0x3c>
   2f4aa:	f012 0f02 	tst.w	r2, #2
   2f4ae:	d111      	bne.n	2f4d4 <error_isr+0x54>
   2f4b0:	f012 0f04 	tst.w	r2, #4
   2f4b4:	d110      	bne.n	2f4d8 <error_isr+0x58>
   2f4b6:	f002 0208 	and.w	r2, r2, #8
   2f4ba:	e000      	b.n	2f4be <error_isr+0x3e>
   2f4bc:	2201      	movs	r2, #1
	struct uart_event evt = {
   2f4be:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
   2f4c2:	a901      	add	r1, sp, #4
   2f4c4:	4620      	mov	r0, r4
   2f4c6:	f7ff fefa 	bl	2f2be <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   2f4ca:	4620      	mov	r0, r4
   2f4cc:	f7ff ffb6 	bl	2f43c <uarte_nrfx_rx_disable>
}
   2f4d0:	b006      	add	sp, #24
   2f4d2:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2f4d4:	2202      	movs	r2, #2
   2f4d6:	e7f2      	b.n	2f4be <error_isr+0x3e>
   2f4d8:	2204      	movs	r2, #4
   2f4da:	e7f0      	b.n	2f4be <error_isr+0x3e>

0002f4dc <uarte_nrfx_tx_abort>:
{
   2f4dc:	b538      	push	{r3, r4, r5, lr}
	return dev->data;
   2f4de:	6903      	ldr	r3, [r0, #16]
	return dev->config;
   2f4e0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2f4e2:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2f4e4:	68da      	ldr	r2, [r3, #12]
   2f4e6:	6891      	ldr	r1, [r2, #8]
   2f4e8:	b151      	cbz	r1, 2f500 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2f4ea:	2400      	movs	r4, #0
   2f4ec:	f882 40d4 	strb.w	r4, [r2, #212]	; 0xd4
	k_timer_stop(&data->async->tx_timeout_timer);
   2f4f0:	68d8      	ldr	r0, [r3, #12]
   2f4f2:	3028      	adds	r0, #40	; 0x28
   2f4f4:	f001 f95e 	bl	307b4 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f4f8:	2301      	movs	r3, #1
   2f4fa:	60eb      	str	r3, [r5, #12]
	return 0;
   2f4fc:	4620      	mov	r0, r4
}
   2f4fe:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2f500:	f06f 000d 	mvn.w	r0, #13
   2f504:	e7fb      	b.n	2f4fe <uarte_nrfx_tx_abort+0x22>

0002f506 <tx_timeout>:
{
   2f506:	b508      	push	{r3, lr}
	return timer->user_data;
   2f508:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
   2f50a:	6818      	ldr	r0, [r3, #0]
   2f50c:	f7ff ffe6 	bl	2f4dc <uarte_nrfx_tx_abort>
}
   2f510:	bd08      	pop	{r3, pc}

0002f512 <endrx_isr>:
{
   2f512:	b570      	push	{r4, r5, r6, lr}
   2f514:	4605      	mov	r5, r0
	return dev->data;
   2f516:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   2f518:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f51a:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   2f51c:	68e3      	ldr	r3, [r4, #12]
   2f51e:	2201      	movs	r2, #1
   2f520:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	k_timer_stop(&data->async->rx_timeout_timer);
   2f524:	68e0      	ldr	r0, [r4, #12]
   2f526:	3088      	adds	r0, #136	; 0x88
   2f528:	f001 f944 	bl	307b4 <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   2f52c:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
   2f530:	68e3      	ldr	r3, [r4, #12]
   2f532:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
   2f536:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
   2f538:	2200      	movs	r2, #0
   2f53a:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   2f53e:	68e3      	ldr	r3, [r4, #12]
   2f540:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if (rx_len < 0) {
   2f542:	1a89      	subs	r1, r1, r2
   2f544:	d40b      	bmi.n	2f55e <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
   2f546:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   2f548:	440a      	add	r2, r1
   2f54a:	679a      	str	r2, [r3, #120]	; 0x78
	if (rx_len > 0) {
   2f54c:	2900      	cmp	r1, #0
   2f54e:	dc08      	bgt.n	2f562 <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
   2f550:	68e1      	ldr	r1, [r4, #12]
   2f552:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
   2f556:	b943      	cbnz	r3, 2f56a <endrx_isr+0x58>
		data->async->is_in_irq = false;
   2f558:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
}
   2f55c:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
   2f55e:	2100      	movs	r1, #0
   2f560:	e7f1      	b.n	2f546 <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
   2f562:	4628      	mov	r0, r5
   2f564:	f7ff feb3 	bl	2f2ce <notify_uart_rx_rdy>
   2f568:	e7f2      	b.n	2f550 <endrx_isr+0x3e>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   2f56a:	2200      	movs	r2, #0
   2f56c:	3160      	adds	r1, #96	; 0x60
   2f56e:	4628      	mov	r0, r5
   2f570:	f7ff fec5 	bl	2f2fe <notify_rx_buf_release>
	__asm__ volatile(
   2f574:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f578:	f3ef 8111 	mrs	r1, BASEPRI
   2f57c:	f383 8812 	msr	BASEPRI_MAX, r3
   2f580:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   2f584:	68e3      	ldr	r3, [r4, #12]
   2f586:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2f588:	b1f2      	cbz	r2, 2f5c8 <endrx_isr+0xb6>
		data->async->rx_buf = data->async->rx_next_buf;
   2f58a:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   2f58c:	68e3      	ldr	r3, [r4, #12]
   2f58e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2f590:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
   2f592:	68e2      	ldr	r2, [r4, #12]
   2f594:	2300      	movs	r3, #0
   2f596:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_next_buf_len = 0;
   2f598:	68e2      	ldr	r2, [r4, #12]
   2f59a:	6713      	str	r3, [r2, #112]	; 0x70
		data->async->rx_offset = 0;
   2f59c:	68e2      	ldr	r2, [r4, #12]
   2f59e:	6693      	str	r3, [r2, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f5a0:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2f5a4:	b90b      	cbnz	r3, 2f5aa <endrx_isr+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f5a6:	2301      	movs	r3, #1
   2f5a8:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   2f5aa:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   2f5ae:	f023 0320 	bic.w	r3, r3, #32
   2f5b2:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   2f5b6:	f381 8811 	msr	BASEPRI, r1
   2f5ba:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   2f5be:	68e3      	ldr	r3, [r4, #12]
   2f5c0:	2200      	movs	r2, #0
   2f5c2:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
   2f5c6:	e7c9      	b.n	2f55c <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f5c8:	2301      	movs	r3, #1
   2f5ca:	6073      	str	r3, [r6, #4]
}
   2f5cc:	e7f3      	b.n	2f5b6 <endrx_isr+0xa4>

0002f5ce <rx_timeout>:
{
   2f5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f5d0:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
   2f5d2:	6826      	ldr	r6, [r4, #0]
	return dev->config;
   2f5d4:	6872      	ldr	r2, [r6, #4]
	if (data->async->is_in_irq) {
   2f5d6:	68e3      	ldr	r3, [r4, #12]
   2f5d8:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
   2f5dc:	2b00      	cmp	r3, #0
   2f5de:	d138      	bne.n	2f652 <rx_timeout+0x84>
   2f5e0:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
   2f5e4:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENCLR = mask;
   2f5e6:	2210      	movs	r2, #16
   2f5e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2f5ec:	68e3      	ldr	r3, [r4, #12]
   2f5ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
   2f5f2:	6f59      	ldr	r1, [r3, #116]	; 0x74
   2f5f4:	4291      	cmp	r1, r2
   2f5f6:	d004      	beq.n	2f602 <rx_timeout+0x34>
		data->async->rx_total_byte_cnt = read;
   2f5f8:	675a      	str	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
   2f5fa:	68e3      	ldr	r3, [r4, #12]
   2f5fc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   2f5fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	int32_t len = data->async->rx_total_byte_cnt
   2f602:	68e3      	ldr	r3, [r4, #12]
   2f604:	6f5d      	ldr	r5, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
   2f606:	6f9a      	ldr	r2, [r3, #120]	; 0x78
	if (!hw_rx_counting_enabled(data) &&
   2f608:	1aad      	subs	r5, r5, r2
   2f60a:	d423      	bmi.n	2f654 <rx_timeout+0x86>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2f60c:	68e3      	ldr	r3, [r4, #12]
   2f60e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2f610:	18a8      	adds	r0, r5, r2
   2f612:	6e59      	ldr	r1, [r3, #100]	; 0x64
   2f614:	4288      	cmp	r0, r1
   2f616:	d901      	bls.n	2f61c <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2f618:	1a8d      	subs	r5, r1, r2
		clipped = true;
   2f61a:	2701      	movs	r7, #1
	if (len > 0) {
   2f61c:	2d00      	cmp	r5, #0
   2f61e:	dd13      	ble.n	2f648 <rx_timeout+0x7a>
		if (clipped ||
   2f620:	b92f      	cbnz	r7, 2f62e <rx_timeout+0x60>
			(data->async->rx_timeout_left
   2f622:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
				< data->async->rx_timeout_slab)) {
   2f626:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		if (clipped ||
   2f62a:	428a      	cmp	r2, r1
   2f62c:	da16      	bge.n	2f65c <rx_timeout+0x8e>
			notify_uart_rx_rdy(dev, len);
   2f62e:	4629      	mov	r1, r5
   2f630:	4630      	mov	r0, r6
   2f632:	f7ff fe4c 	bl	2f2ce <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2f636:	68e2      	ldr	r2, [r4, #12]
   2f638:	6e93      	ldr	r3, [r2, #104]	; 0x68
   2f63a:	442b      	add	r3, r5
   2f63c:	6693      	str	r3, [r2, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   2f63e:	68e2      	ldr	r2, [r4, #12]
   2f640:	6f93      	ldr	r3, [r2, #120]	; 0x78
   2f642:	441d      	add	r5, r3
   2f644:	6795      	str	r5, [r2, #120]	; 0x78
		if (clipped) {
   2f646:	b96f      	cbnz	r7, 2f664 <rx_timeout+0x96>
	return dev->config;
   2f648:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
   2f64a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2f64c:	2210      	movs	r2, #16
   2f64e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2f654:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		len = 0;
   2f658:	2500      	movs	r5, #0
   2f65a:	e7d7      	b.n	2f60c <rx_timeout+0x3e>
			data->async->rx_timeout_left -=
   2f65c:	1a52      	subs	r2, r2, r1
   2f65e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   2f662:	e7f0      	b.n	2f646 <rx_timeout+0x78>
			k_timer_stop(&data->async->rx_timeout_timer);
   2f664:	68e0      	ldr	r0, [r4, #12]
   2f666:	3088      	adds	r0, #136	; 0x88
   2f668:	f001 f8a4 	bl	307b4 <z_impl_k_timer_stop>
}
   2f66c:	e7ec      	b.n	2f648 <rx_timeout+0x7a>

0002f66e <setup_tx_cache>:
{
   2f66e:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2f670:	68c3      	ldr	r3, [r0, #12]
   2f672:	68da      	ldr	r2, [r3, #12]
   2f674:	6a19      	ldr	r1, [r3, #32]
	if (!remaining) {
   2f676:	1a52      	subs	r2, r2, r1
   2f678:	d010      	beq.n	2f69c <setup_tx_cache+0x2e>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
   2f67a:	2a08      	cmp	r2, #8
   2f67c:	bf28      	it	cs
   2f67e:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2f680:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2f682:	68c3      	ldr	r3, [r0, #12]
   2f684:	f103 0118 	add.w	r1, r3, #24
   2f688:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2f68a:	68c0      	ldr	r0, [r0, #12]
   2f68c:	6881      	ldr	r1, [r0, #8]
   2f68e:	6a03      	ldr	r3, [r0, #32]
   2f690:	4419      	add	r1, r3
   2f692:	3018      	adds	r0, #24
   2f694:	f001 f90c 	bl	308b0 <memcpy>
	return true;
   2f698:	2001      	movs	r0, #1
}
   2f69a:	bd08      	pop	{r3, pc}
		return false;
   2f69c:	2000      	movs	r0, #0
   2f69e:	e7fc      	b.n	2f69a <setup_tx_cache+0x2c>

0002f6a0 <rx_flush>:
{
   2f6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f6a2:	b083      	sub	sp, #12
	return dev->config;
   2f6a4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f6a6:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
   2f6a8:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   2f6ac:	460d      	mov	r5, r1
   2f6ae:	b311      	cbz	r1, 2f6f6 <rx_flush+0x56>
   2f6b0:	4616      	mov	r6, r2
	if (buf) {
   2f6b2:	b315      	cbz	r5, 2f6fa <rx_flush+0x5a>
__ssp_bos_icheck3(memset, void *, int)
   2f6b4:	2100      	movs	r1, #0
   2f6b6:	4628      	mov	r0, r5
   2f6b8:	f001 f922 	bl	30900 <memset>
		flush_buf = buf;
   2f6bc:	462b      	mov	r3, r5
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2f6be:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2f6c2:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f6c6:	2300      	movs	r3, #0
   2f6c8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2f6cc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f6d0:	2301      	movs	r3, #1
   2f6d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f6d4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f6d8:	2b00      	cmp	r3, #0
   2f6da:	d0fb      	beq.n	2f6d4 <rx_flush+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f6dc:	2300      	movs	r3, #0
   2f6de:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2f6e2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
   2f6e6:	b155      	cbz	r5, 2f6fe <rx_flush+0x5e>
    return p_reg->RXD.AMOUNT;
   2f6e8:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
   2f6ec:	4287      	cmp	r7, r0
   2f6ee:	d00c      	beq.n	2f70a <rx_flush+0x6a>
		return rx_amount;
   2f6f0:	b2c0      	uxtb	r0, r0
}
   2f6f2:	b003      	add	sp, #12
   2f6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   2f6f6:	2605      	movs	r6, #5
   2f6f8:	e7db      	b.n	2f6b2 <rx_flush+0x12>
		flush_buf = tmp_buf;
   2f6fa:	466b      	mov	r3, sp
   2f6fc:	e7df      	b.n	2f6be <rx_flush+0x1e>
   2f6fe:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
   2f702:	b2c0      	uxtb	r0, r0
   2f704:	e7f5      	b.n	2f6f2 <rx_flush+0x52>
			return rx_amount;
   2f706:	b2c0      	uxtb	r0, r0
   2f708:	e7f3      	b.n	2f6f2 <rx_flush+0x52>
	for (int i = 0; i < flush_len; i++) {
   2f70a:	2300      	movs	r3, #0
   2f70c:	42b3      	cmp	r3, r6
   2f70e:	d204      	bcs.n	2f71a <rx_flush+0x7a>
		if (buf[i] != dirty) {
   2f710:	5cea      	ldrb	r2, [r5, r3]
   2f712:	2a00      	cmp	r2, #0
   2f714:	d1f7      	bne.n	2f706 <rx_flush+0x66>
	for (int i = 0; i < flush_len; i++) {
   2f716:	3301      	adds	r3, #1
   2f718:	e7f8      	b.n	2f70c <rx_flush+0x6c>
	return 0;
   2f71a:	2000      	movs	r0, #0
   2f71c:	e7e9      	b.n	2f6f2 <rx_flush+0x52>

0002f71e <async_uart_release>:
{
   2f71e:	b570      	push	{r4, r5, r6, lr}
   2f720:	4604      	mov	r4, r0
	return dev->data;
   2f722:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2f724:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f728:	f3ef 8611 	mrs	r6, BASEPRI
   2f72c:	f383 8812 	msr	BASEPRI_MAX, r3
   2f730:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2f734:	68d0      	ldr	r0, [r2, #12]
   2f736:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
   2f73a:	ea23 0301 	bic.w	r3, r3, r1
   2f73e:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	if (!data->async->low_power_mask) {
   2f742:	68d5      	ldr	r5, [r2, #12]
   2f744:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   2f748:	b923      	cbnz	r3, 2f754 <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2f74a:	2902      	cmp	r1, #2
   2f74c:	d007      	beq.n	2f75e <async_uart_release+0x40>
		uart_disable(dev);
   2f74e:	4620      	mov	r0, r4
   2f750:	f7ff fd8d 	bl	2f26e <uart_disable>
	__asm__ volatile(
   2f754:	f386 8811 	msr	BASEPRI, r6
   2f758:	f3bf 8f6f 	isb	sy
}
   2f75c:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
   2f75e:	2205      	movs	r2, #5
   2f760:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
   2f764:	4620      	mov	r0, r4
   2f766:	f7ff ff9b 	bl	2f6a0 <rx_flush>
			data->async->rx_flush_cnt =
   2f76a:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
   2f76e:	e7ee      	b.n	2f74e <async_uart_release+0x30>

0002f770 <txstopped_isr>:
{
   2f770:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f772:	b087      	sub	sp, #28
   2f774:	4605      	mov	r5, r0
	return dev->data;
   2f776:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   2f778:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f77a:	681f      	ldr	r7, [r3, #0]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f77c:	685b      	ldr	r3, [r3, #4]
   2f77e:	f013 0f10 	tst.w	r3, #16
   2f782:	d147      	bne.n	2f814 <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
   2f784:	68e3      	ldr	r3, [r4, #12]
   2f786:	689b      	ldr	r3, [r3, #8]
   2f788:	2b00      	cmp	r3, #0
   2f78a:	d041      	beq.n	2f810 <txstopped_isr+0xa0>
	__asm__ volatile(
   2f78c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f790:	f3ef 8211 	mrs	r2, BASEPRI
   2f794:	f383 8812 	msr	BASEPRI_MAX, r3
   2f798:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   2f79c:	68e3      	ldr	r3, [r4, #12]
   2f79e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   2f7a2:	2900      	cmp	r1, #0
   2f7a4:	db42      	blt.n	2f82c <txstopped_isr+0xbc>
   2f7a6:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
	__asm__ volatile(
   2f7aa:	f382 8811 	msr	BASEPRI, r2
   2f7ae:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   2f7b2:	68e3      	ldr	r3, [r4, #12]
   2f7b4:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   2f7b8:	2a00      	cmp	r2, #0
   2f7ba:	d13a      	bne.n	2f832 <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
   2f7bc:	6899      	ldr	r1, [r3, #8]
   2f7be:	691a      	ldr	r2, [r3, #16]
   2f7c0:	4291      	cmp	r1, r2
   2f7c2:	d004      	beq.n	2f7ce <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
   2f7c4:	695a      	ldr	r2, [r3, #20]
   2f7c6:	42b2      	cmp	r2, r6
   2f7c8:	d044      	beq.n	2f854 <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
   2f7ca:	6a1b      	ldr	r3, [r3, #32]
   2f7cc:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
   2f7ce:	68e0      	ldr	r0, [r4, #12]
   2f7d0:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
   2f7d2:	f000 ffef 	bl	307b4 <z_impl_k_timer_stop>
	struct uart_event evt = {
   2f7d6:	2300      	movs	r3, #0
   2f7d8:	9301      	str	r3, [sp, #4]
   2f7da:	9302      	str	r3, [sp, #8]
   2f7dc:	9303      	str	r3, [sp, #12]
   2f7de:	9304      	str	r3, [sp, #16]
   2f7e0:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
   2f7e2:	68e3      	ldr	r3, [r4, #12]
   2f7e4:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
   2f7e6:	9202      	str	r2, [sp, #8]
   2f7e8:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
   2f7ea:	68db      	ldr	r3, [r3, #12]
   2f7ec:	42b3      	cmp	r3, r6
   2f7ee:	d04c      	beq.n	2f88a <txstopped_isr+0x11a>
		evt.type = UART_TX_ABORTED;
   2f7f0:	2301      	movs	r3, #1
   2f7f2:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
   2f7f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2f7fa:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   2f7fe:	68e2      	ldr	r2, [r4, #12]
   2f800:	2300      	movs	r3, #0
   2f802:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   2f804:	68e2      	ldr	r2, [r4, #12]
   2f806:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   2f808:	a901      	add	r1, sp, #4
   2f80a:	4628      	mov	r0, r5
   2f80c:	f7ff fd57 	bl	2f2be <user_callback>
}
   2f810:	b007      	add	sp, #28
   2f812:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f814:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2f818:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   2f81c:	2101      	movs	r1, #1
   2f81e:	f7ff ff7e 	bl	2f71e <async_uart_release>
		if (!data->async->tx_size) {
   2f822:	68e3      	ldr	r3, [r4, #12]
   2f824:	68db      	ldr	r3, [r3, #12]
   2f826:	2b00      	cmp	r3, #0
   2f828:	d1ac      	bne.n	2f784 <txstopped_isr+0x14>
   2f82a:	e7f1      	b.n	2f810 <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
   2f82c:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
   2f830:	e7bb      	b.n	2f7aa <txstopped_isr+0x3a>
	__asm__ volatile(
   2f832:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f836:	f3ef 8611 	mrs	r6, BASEPRI
   2f83a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f83e:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
   2f842:	4621      	mov	r1, r4
   2f844:	4628      	mov	r0, r5
   2f846:	f7ff fd1f 	bl	2f288 <start_tx_locked>
	__asm__ volatile(
   2f84a:	f386 8811 	msr	BASEPRI, r6
   2f84e:	f3bf 8f6f 	isb	sy
		return;
   2f852:	e7dd      	b.n	2f810 <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
   2f854:	6a1a      	ldr	r2, [r3, #32]
   2f856:	4416      	add	r6, r2
   2f858:	621e      	str	r6, [r3, #32]
			if (setup_tx_cache(data)) {
   2f85a:	4620      	mov	r0, r4
   2f85c:	f7ff ff07 	bl	2f66e <setup_tx_cache>
   2f860:	b910      	cbnz	r0, 2f868 <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
   2f862:	68e3      	ldr	r3, [r4, #12]
   2f864:	6a1e      	ldr	r6, [r3, #32]
   2f866:	e7b2      	b.n	2f7ce <txstopped_isr+0x5e>
	__asm__ volatile(
   2f868:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f86c:	f3ef 8611 	mrs	r6, BASEPRI
   2f870:	f383 8812 	msr	BASEPRI_MAX, r3
   2f874:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   2f878:	4621      	mov	r1, r4
   2f87a:	4628      	mov	r0, r5
   2f87c:	f7ff fd04 	bl	2f288 <start_tx_locked>
	__asm__ volatile(
   2f880:	f386 8811 	msr	BASEPRI, r6
   2f884:	f3bf 8f6f 	isb	sy
				return;
   2f888:	e7c2      	b.n	2f810 <txstopped_isr+0xa0>
		evt.type = UART_TX_DONE;
   2f88a:	2300      	movs	r3, #0
   2f88c:	f88d 3004 	strb.w	r3, [sp, #4]
   2f890:	e7b1      	b.n	2f7f6 <txstopped_isr+0x86>

0002f892 <rxto_isr>:
{
   2f892:	b538      	push	{r3, r4, r5, lr}
   2f894:	4604      	mov	r4, r0
	return dev->data;
   2f896:	6905      	ldr	r5, [r0, #16]
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   2f898:	68e9      	ldr	r1, [r5, #12]
   2f89a:	2201      	movs	r2, #1
   2f89c:	3160      	adds	r1, #96	; 0x60
   2f89e:	f7ff fd2e 	bl	2f2fe <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   2f8a2:	68e9      	ldr	r1, [r5, #12]
   2f8a4:	2201      	movs	r2, #1
   2f8a6:	316c      	adds	r1, #108	; 0x6c
   2f8a8:	4620      	mov	r0, r4
   2f8aa:	f7ff fd28 	bl	2f2fe <notify_rx_buf_release>
	if (data->async->rx_enabled) {
   2f8ae:	68eb      	ldr	r3, [r5, #12]
   2f8b0:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
   2f8b4:	b15a      	cbz	r2, 2f8ce <rxto_isr+0x3c>
		data->async->rx_enabled = false;
   2f8b6:	2200      	movs	r2, #0
   2f8b8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	return dev->config;
   2f8bc:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f8be:	685b      	ldr	r3, [r3, #4]
   2f8c0:	f013 0f10 	tst.w	r3, #16
   2f8c4:	d109      	bne.n	2f8da <rxto_isr+0x48>
	notify_rx_disable(dev);
   2f8c6:	4620      	mov	r0, r4
   2f8c8:	f7ff fd32 	bl	2f330 <notify_rx_disable>
}
   2f8cc:	bd38      	pop	{r3, r4, r5, pc}
		(void)rx_flush(dev, NULL, 0);
   2f8ce:	2200      	movs	r2, #0
   2f8d0:	4611      	mov	r1, r2
   2f8d2:	4620      	mov	r0, r4
   2f8d4:	f7ff fee4 	bl	2f6a0 <rx_flush>
   2f8d8:	e7f0      	b.n	2f8bc <rxto_isr+0x2a>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   2f8da:	2102      	movs	r1, #2
   2f8dc:	4620      	mov	r0, r4
   2f8de:	f7ff ff1e 	bl	2f71e <async_uart_release>
   2f8e2:	e7f0      	b.n	2f8c6 <rxto_isr+0x34>

0002f8e4 <uarte_nrfx_isr_async>:
{
   2f8e4:	b538      	push	{r3, r4, r5, lr}
	return dev->config;
   2f8e6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2f8e8:	681c      	ldr	r4, [r3, #0]
	return dev->data;
   2f8ea:	6902      	ldr	r2, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f8ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   2f8f0:	bb5b      	cbnz	r3, 2f94a <uarte_nrfx_isr_async+0x66>
   2f8f2:	4605      	mov	r5, r0
   2f8f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2f8f8:	bb9b      	cbnz	r3, 2f962 <uarte_nrfx_isr_async+0x7e>
   2f8fa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   2f8fe:	b123      	cbz	r3, 2f90a <uarte_nrfx_isr_async+0x26>
    return p_reg->INTENSET & mask;
   2f900:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   2f904:	f013 0f10 	tst.w	r3, #16
   2f908:	d133      	bne.n	2f972 <uarte_nrfx_isr_async+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f90a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   2f90e:	b113      	cbz	r3, 2f916 <uarte_nrfx_isr_async+0x32>
   2f910:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   2f914:	b3b3      	cbz	r3, 2f984 <uarte_nrfx_isr_async+0xa0>
   2f916:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   2f91a:	b113      	cbz	r3, 2f922 <uarte_nrfx_isr_async+0x3e>
   2f91c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   2f920:	b3c3      	cbz	r3, 2f994 <uarte_nrfx_isr_async+0xb0>
   2f922:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   2f926:	b123      	cbz	r3, 2f932 <uarte_nrfx_isr_async+0x4e>
    return p_reg->INTENSET & mask;
   2f928:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   2f92c:	f413 7f80 	tst.w	r3, #256	; 0x100
   2f930:	d138      	bne.n	2f9a4 <uarte_nrfx_isr_async+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f932:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   2f936:	b19b      	cbz	r3, 2f960 <uarte_nrfx_isr_async+0x7c>
    return p_reg->INTENSET & mask;
   2f938:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   2f93c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   2f940:	d00e      	beq.n	2f960 <uarte_nrfx_isr_async+0x7c>
		txstopped_isr(dev);
   2f942:	4628      	mov	r0, r5
   2f944:	f7ff ff14 	bl	2f770 <txstopped_isr>
   2f948:	e00a      	b.n	2f960 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f94a:	2300      	movs	r3, #0
   2f94c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2f950:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   2f954:	68d2      	ldr	r2, [r2, #12]
   2f956:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   2f95a:	3301      	adds	r3, #1
   2f95c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
   2f960:	bd38      	pop	{r3, r4, r5, pc}
   2f962:	2300      	movs	r3, #0
   2f964:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2f968:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
   2f96c:	f7ff fd88 	bl	2f480 <error_isr>
   2f970:	e7c3      	b.n	2f8fa <uarte_nrfx_isr_async+0x16>
   2f972:	2300      	movs	r3, #0
   2f974:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2f978:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
   2f97c:	4628      	mov	r0, r5
   2f97e:	f7ff fdc8 	bl	2f512 <endrx_isr>
   2f982:	e7c2      	b.n	2f90a <uarte_nrfx_isr_async+0x26>
   2f984:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2f988:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
   2f98c:	4628      	mov	r0, r5
   2f98e:	f7ef fa35 	bl	1edfc <rxstarted_isr>
   2f992:	e7c0      	b.n	2f916 <uarte_nrfx_isr_async+0x32>
   2f994:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   2f998:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
   2f99c:	4628      	mov	r0, r5
   2f99e:	f7ff ff78 	bl	2f892 <rxto_isr>
   2f9a2:	e7be      	b.n	2f922 <uarte_nrfx_isr_async+0x3e>
		endtx_isr(dev);
   2f9a4:	4628      	mov	r0, r5
   2f9a6:	f7ff fba5 	bl	2f0f4 <endtx_isr>
   2f9aa:	e7c2      	b.n	2f932 <uarte_nrfx_isr_async+0x4e>

0002f9ac <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   2f9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f9b0:	4604      	mov	r4, r0
	return dev->config;
   2f9b2:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   2f9b4:	683d      	ldr	r5, [r7, #0]
	return dev->data;
   2f9b6:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2f9b8:	2100      	movs	r1, #0
   2f9ba:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   2f9be:	6030      	str	r0, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   2f9c0:	f7ef fad4 	bl	1ef6c <uarte_nrfx_pins_configure>
	return dev->data;
   2f9c4:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2f9c6:	3104      	adds	r1, #4
   2f9c8:	4620      	mov	r0, r4
   2f9ca:	f7ff fbac 	bl	2f126 <uarte_nrfx_configure>
	if (err) {
   2f9ce:	4680      	mov	r8, r0
   2f9d0:	bb18      	cbnz	r0, 2fa1a <uarte_instance_init+0x6e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2f9d2:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2f9d4:	f013 0f02 	tst.w	r3, #2
   2f9d8:	d122      	bne.n	2fa20 <uarte_instance_init+0x74>
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
   2f9da:	68f3      	ldr	r3, [r6, #12]
   2f9dc:	b343      	cbz	r3, 2fa30 <uarte_instance_init+0x84>
		err = uarte_nrfx_init(dev);
   2f9de:	4620      	mov	r0, r4
   2f9e0:	f7ef fa80 	bl	1eee4 <uarte_nrfx_init>
		if (err < 0) {
   2f9e4:	2800      	cmp	r0, #0
   2f9e6:	db36      	blt.n	2fa56 <uarte_instance_init+0xaa>
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2f9e8:	687b      	ldr	r3, [r7, #4]
   2f9ea:	f013 0f02 	tst.w	r3, #2
   2f9ee:	d103      	bne.n	2f9f8 <uarte_instance_init+0x4c>
    p_reg->INTENSET = mask;
   2f9f0:	f44f 7380 	mov.w	r3, #256	; 0x100
   2f9f4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f9f8:	687b      	ldr	r3, [r7, #4]
   2f9fa:	f013 0f10 	tst.w	r3, #16
   2f9fe:	d003      	beq.n	2fa08 <uarte_instance_init+0x5c>
   2fa00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2fa04:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2fa08:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2fa0a:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2fa0e:	2300      	movs	r3, #0
   2fa10:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fa14:	2301      	movs	r3, #1
   2fa16:	60ab      	str	r3, [r5, #8]
   2fa18:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2fa1a:	4640      	mov	r0, r8
   2fa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   2fa20:	4631      	mov	r1, r6
   2fa22:	4628      	mov	r0, r5
   2fa24:	f7ef fa24 	bl	1ee70 <endtx_stoptx_ppi_init>
		if (err < 0) {
   2fa28:	2800      	cmp	r0, #0
   2fa2a:	dad6      	bge.n	2f9da <uarte_instance_init+0x2e>
			return err;
   2fa2c:	4680      	mov	r8, r0
   2fa2e:	e7f4      	b.n	2fa1a <uarte_instance_init+0x6e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2fa30:	2308      	movs	r3, #8
   2fa32:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   2fa36:	7a3b      	ldrb	r3, [r7, #8]
   2fa38:	2b00      	cmp	r3, #0
   2fa3a:	d1d5      	bne.n	2f9e8 <uarte_instance_init+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fa3c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2fa40:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2fa44:	f106 0315 	add.w	r3, r6, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2fa48:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2fa4c:	2301      	movs	r3, #1
   2fa4e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fa52:	602b      	str	r3, [r5, #0]
}
   2fa54:	e7c8      	b.n	2f9e8 <uarte_instance_init+0x3c>
			return err;
   2fa56:	4680      	mov	r8, r0
   2fa58:	e7df      	b.n	2fa1a <uarte_instance_init+0x6e>

0002fa5a <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2fa5a:	b510      	push	{r4, lr}
   2fa5c:	4604      	mov	r4, r0
   2fa5e:	2200      	movs	r2, #0
   2fa60:	2101      	movs	r1, #1
   2fa62:	2002      	movs	r0, #2
   2fa64:	f7e5 fb80 	bl	15168 <z_arm_irq_priority_set>
   2fa68:	2002      	movs	r0, #2
   2fa6a:	f7e5 fb4b 	bl	15104 <arch_irq_enable>
   2fa6e:	2100      	movs	r1, #0
   2fa70:	4620      	mov	r0, r4
   2fa72:	f7ff ff9b 	bl	2f9ac <uarte_instance_init>
   2fa76:	bd10      	pop	{r4, pc}

0002fa78 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2fa78:	b510      	push	{r4, lr}
   2fa7a:	4604      	mov	r4, r0
   2fa7c:	2200      	movs	r2, #0
   2fa7e:	2101      	movs	r1, #1
   2fa80:	2028      	movs	r0, #40	; 0x28
   2fa82:	f7e5 fb71 	bl	15168 <z_arm_irq_priority_set>
   2fa86:	2028      	movs	r0, #40	; 0x28
   2fa88:	f7e5 fb3c 	bl	15104 <arch_irq_enable>
   2fa8c:	2100      	movs	r1, #0
   2fa8e:	4620      	mov	r0, r4
   2fa90:	f7ff ff8c 	bl	2f9ac <uarte_instance_init>
   2fa94:	bd10      	pop	{r4, pc}

0002fa96 <rng_pool_put>:
{
   2fa96:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   2fa98:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2fa9a:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2fa9c:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   2fa9e:	1a9a      	subs	r2, r3, r2
   2faa0:	ea34 0202 	bics.w	r2, r4, r2
   2faa4:	d008      	beq.n	2fab8 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   2faa6:	18c2      	adds	r2, r0, r3
   2faa8:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2faaa:	3301      	adds	r3, #1
   2faac:	b25b      	sxtb	r3, r3
   2faae:	4023      	ands	r3, r4
   2fab0:	7083      	strb	r3, [r0, #2]
	return 0;
   2fab2:	2000      	movs	r0, #0
}
   2fab4:	bc10      	pop	{r4}
   2fab6:	4770      	bx	lr
		return -ENOBUFS;
   2fab8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2fabc:	e7fa      	b.n	2fab4 <rng_pool_put+0x1e>

0002fabe <rng_pool_init>:
	rngp->first_alloc = 0U;
   2fabe:	2300      	movs	r3, #0
   2fac0:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2fac2:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   2fac4:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   2fac6:	3901      	subs	r1, #1
   2fac8:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2faca:	7102      	strb	r2, [r0, #4]
}
   2facc:	4770      	bx	lr

0002face <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   2face:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2fad0:	2200      	movs	r2, #0
   2fad2:	4611      	mov	r1, r2
   2fad4:	4610      	mov	r0, r2
   2fad6:	f7f8 fcb9 	bl	2844c <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   2fada:	b900      	cbnz	r0, 2fade <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   2fadc:	bd08      	pop	{r3, pc}
			return -EINVAL;
   2fade:	f06f 0015 	mvn.w	r0, #21
   2fae2:	e7fb      	b.n	2fadc <entropy_cc3xx_rng_init+0xe>

0002fae4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2fae4:	4770      	bx	lr

0002fae6 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2fae6:	1a40      	subs	r0, r0, r1
}
   2fae8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2faec:	4770      	bx	lr

0002faee <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2faee:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2faf2:	009b      	lsls	r3, r3, #2
   2faf4:	b29b      	uxth	r3, r3
   2faf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2fafa:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2fafe:	2200      	movs	r2, #0
   2fb00:	601a      	str	r2, [r3, #0]
   2fb02:	681b      	ldr	r3, [r3, #0]
}
   2fb04:	4770      	bx	lr

0002fb06 <absolute_time_to_cc>:
}
   2fb06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2fb0a:	4770      	bx	lr

0002fb0c <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2fb0c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2fb10:	b672      	cpsid	i
}
   2fb12:	4770      	bx	lr

0002fb14 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2fb14:	f380 8810 	msr	PRIMASK, r0
}
   2fb18:	4770      	bx	lr

0002fb1a <set_absolute_alarm>:
{
   2fb1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fb1c:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2fb1e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   2fb22:	f7ef fedb 	bl	1f8dc <get_comparator>
   2fb26:	4607      	mov	r7, r0
   2fb28:	e019      	b.n	2fb5e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   2fb2a:	2013      	movs	r0, #19
   2fb2c:	f000 fe00 	bl	30730 <z_impl_k_busy_wait>
}
   2fb30:	e022      	b.n	2fb78 <set_absolute_alarm+0x5e>
		event_clear(chan);
   2fb32:	4630      	mov	r0, r6
   2fb34:	f7ff ffdb 	bl	2faee <event_clear>
		event_enable(chan);
   2fb38:	4630      	mov	r0, r6
   2fb3a:	f7ef fed7 	bl	1f8ec <event_enable>
		set_comparator(chan, cc_val);
   2fb3e:	4629      	mov	r1, r5
   2fb40:	4630      	mov	r0, r6
   2fb42:	f7ef fec1 	bl	1f8c8 <set_comparator>
		now2 = counter();
   2fb46:	f7ef fee5 	bl	1f914 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   2fb4a:	4284      	cmp	r4, r0
   2fb4c:	d01e      	beq.n	2fb8c <set_absolute_alarm+0x72>
   2fb4e:	1c81      	adds	r1, r0, #2
   2fb50:	4628      	mov	r0, r5
   2fb52:	f7ff ffc8 	bl	2fae6 <counter_sub>
	} while ((now2 != now) &&
   2fb56:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2fb5a:	d917      	bls.n	2fb8c <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   2fb5c:	462f      	mov	r7, r5
		now = counter();
   2fb5e:	f7ef fed9 	bl	1f914 <counter>
   2fb62:	4604      	mov	r4, r0
		set_comparator(chan, now);
   2fb64:	4601      	mov	r1, r0
   2fb66:	4630      	mov	r0, r6
   2fb68:	f7ef feae 	bl	1f8c8 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   2fb6c:	4621      	mov	r1, r4
   2fb6e:	4638      	mov	r0, r7
   2fb70:	f7ff ffb9 	bl	2fae6 <counter_sub>
   2fb74:	2801      	cmp	r0, #1
   2fb76:	d0d8      	beq.n	2fb2a <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2fb78:	1ca7      	adds	r7, r4, #2
   2fb7a:	4639      	mov	r1, r7
   2fb7c:	4628      	mov	r0, r5
   2fb7e:	f7ff ffb2 	bl	2fae6 <counter_sub>
   2fb82:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2fb86:	d9d4      	bls.n	2fb32 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   2fb88:	463d      	mov	r5, r7
   2fb8a:	e7d2      	b.n	2fb32 <set_absolute_alarm+0x18>
}
   2fb8c:	4628      	mov	r0, r5
   2fb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fb90 <compare_set>:
{
   2fb90:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fb92:	b083      	sub	sp, #12
   2fb94:	4604      	mov	r4, r0
   2fb96:	4617      	mov	r7, r2
   2fb98:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2fb9a:	f7ef fec1 	bl	1f920 <compare_int_lock>
   2fb9e:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2fba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2fba2:	9301      	str	r3, [sp, #4]
   2fba4:	9b08      	ldr	r3, [sp, #32]
   2fba6:	9300      	str	r3, [sp, #0]
   2fba8:	463a      	mov	r2, r7
   2fbaa:	462b      	mov	r3, r5
   2fbac:	4620      	mov	r0, r4
   2fbae:	f7ef ffa5 	bl	1fafc <compare_set_nolocks>
   2fbb2:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2fbb4:	4631      	mov	r1, r6
   2fbb6:	4620      	mov	r0, r4
   2fbb8:	f7ef ff16 	bl	1f9e8 <compare_int_unlock>
}
   2fbbc:	4628      	mov	r0, r5
   2fbbe:	b003      	add	sp, #12
   2fbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fbc2 <sys_clock_cycle_get_32>:
{
   2fbc2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2fbc4:	f7ef ff7a 	bl	1fabc <z_nrf_rtc_timer_read>
}
   2fbc8:	bd08      	pop	{r3, pc}

0002fbca <event_packet_is_discardable>:
	switch (hdr->evt) {
   2fbca:	7803      	ldrb	r3, [r0, #0]
   2fbcc:	2b3e      	cmp	r3, #62	; 0x3e
   2fbce:	d003      	beq.n	2fbd8 <event_packet_is_discardable+0xe>
   2fbd0:	2bff      	cmp	r3, #255	; 0xff
   2fbd2:	d008      	beq.n	2fbe6 <event_packet_is_discardable+0x1c>
   2fbd4:	2000      	movs	r0, #0
   2fbd6:	4770      	bx	lr
		switch (me->subevent) {
   2fbd8:	7883      	ldrb	r3, [r0, #2]
   2fbda:	2b02      	cmp	r3, #2
   2fbdc:	d001      	beq.n	2fbe2 <event_packet_is_discardable+0x18>
			return false;
   2fbde:	2000      	movs	r0, #0
   2fbe0:	4770      	bx	lr
			return true;
   2fbe2:	2001      	movs	r0, #1
   2fbe4:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   2fbe6:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2fbe8:	2b80      	cmp	r3, #128	; 0x80
   2fbea:	d001      	beq.n	2fbf0 <event_packet_is_discardable+0x26>
			return false;
   2fbec:	2000      	movs	r0, #0
}
   2fbee:	4770      	bx	lr
			return true;
   2fbf0:	2001      	movs	r0, #1
   2fbf2:	4770      	bx	lr

0002fbf4 <hci_driver_send>:
{
   2fbf4:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2fbf6:	8983      	ldrh	r3, [r0, #12]
   2fbf8:	b183      	cbz	r3, 2fc1c <hci_driver_send+0x28>
   2fbfa:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2fbfc:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2fbfe:	b14b      	cbz	r3, 2fc14 <hci_driver_send+0x20>
   2fc00:	2b02      	cmp	r3, #2
   2fc02:	d10e      	bne.n	2fc22 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   2fc04:	f7f0 f91a 	bl	1fe3c <acl_handle>
   2fc08:	4605      	mov	r5, r0
	if (!err) {
   2fc0a:	b965      	cbnz	r5, 2fc26 <hci_driver_send+0x32>
		net_buf_unref(buf);
   2fc0c:	4620      	mov	r0, r4
   2fc0e:	f7ec fe29 	bl	1c864 <net_buf_unref>
   2fc12:	e008      	b.n	2fc26 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2fc14:	f7f0 f92c 	bl	1fe70 <cmd_handle>
   2fc18:	4605      	mov	r5, r0
		break;
   2fc1a:	e7f6      	b.n	2fc0a <hci_driver_send+0x16>
		return -EINVAL;
   2fc1c:	f06f 0515 	mvn.w	r5, #21
   2fc20:	e001      	b.n	2fc26 <hci_driver_send+0x32>
	switch (type) {
   2fc22:	f06f 0515 	mvn.w	r5, #21
}
   2fc26:	4628      	mov	r0, r5
   2fc28:	bd38      	pop	{r3, r4, r5, pc}

0002fc2a <fetch_and_process_hci_evt>:
{
   2fc2a:	b538      	push	{r3, r4, r5, lr}
   2fc2c:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2fc2e:	f04f 30ff 	mov.w	r0, #4294967295
   2fc32:	f04f 31ff 	mov.w	r1, #4294967295
   2fc36:	f7f0 f89b 	bl	1fd70 <multithreading_lock_acquire>
	if (!errcode) {
   2fc3a:	4605      	mov	r5, r0
   2fc3c:	b110      	cbz	r0, 2fc44 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   2fc3e:	b145      	cbz	r5, 2fc52 <fetch_and_process_hci_evt+0x28>
		return false;
   2fc40:	2000      	movs	r0, #0
}
   2fc42:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   2fc44:	4620      	mov	r0, r4
   2fc46:	f7f0 fb79 	bl	2033c <hci_internal_evt_get>
   2fc4a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2fc4c:	f7f0 f89a 	bl	1fd84 <multithreading_lock_release>
   2fc50:	e7f5      	b.n	2fc3e <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   2fc52:	4620      	mov	r0, r4
   2fc54:	f7f0 f9c4 	bl	1ffe0 <event_packet_process>
	return true;
   2fc58:	2001      	movs	r0, #1
   2fc5a:	e7f2      	b.n	2fc42 <fetch_and_process_hci_evt+0x18>

0002fc5c <fetch_and_process_acl_data>:
{
   2fc5c:	b538      	push	{r3, r4, r5, lr}
   2fc5e:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2fc60:	f04f 30ff 	mov.w	r0, #4294967295
   2fc64:	f04f 31ff 	mov.w	r1, #4294967295
   2fc68:	f7f0 f882 	bl	1fd70 <multithreading_lock_acquire>
	if (!errcode) {
   2fc6c:	4605      	mov	r5, r0
   2fc6e:	b110      	cbz	r0, 2fc76 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   2fc70:	b145      	cbz	r5, 2fc84 <fetch_and_process_acl_data+0x28>
		return false;
   2fc72:	2000      	movs	r0, #0
}
   2fc74:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   2fc76:	4620      	mov	r0, r4
   2fc78:	f7dc ff79 	bl	cb6e <sdc_hci_data_get>
   2fc7c:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2fc7e:	f7f0 f881 	bl	1fd84 <multithreading_lock_release>
   2fc82:	e7f5      	b.n	2fc70 <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   2fc84:	4620      	mov	r0, r4
   2fc86:	f7f0 f9e3 	bl	20050 <data_packet_process>
	return true;
   2fc8a:	2001      	movs	r0, #1
   2fc8c:	e7f2      	b.n	2fc74 <fetch_and_process_acl_data+0x18>

0002fc8e <configure_supported_features>:
{
   2fc8e:	b508      	push	{r3, lr}
			err = sdc_support_adv();
   2fc90:	f7d4 fd8e 	bl	47b0 <sdc_support_adv>
			if (err) {
   2fc94:	b948      	cbnz	r0, 2fcaa <configure_supported_features+0x1c>
		err = sdc_support_slave();
   2fc96:	f7d4 fdbb 	bl	4810 <sdc_support_slave>
		if (err) {
   2fc9a:	b948      	cbnz	r0, 2fcb0 <configure_supported_features+0x22>
		err = sdc_support_dle();
   2fc9c:	f7d4 fd98 	bl	47d0 <sdc_support_dle>
		if (err) {
   2fca0:	b948      	cbnz	r0, 2fcb6 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   2fca2:	f7d4 fda5 	bl	47f0 <sdc_support_le_2m_phy>
		if (err) {
   2fca6:	b948      	cbnz	r0, 2fcbc <configure_supported_features+0x2e>
}
   2fca8:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2fcaa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fcae:	e7fb      	b.n	2fca8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2fcb0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fcb4:	e7f8      	b.n	2fca8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2fcb6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fcba:	e7f5      	b.n	2fca8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2fcbc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fcc0:	e7f2      	b.n	2fca8 <configure_supported_features+0x1a>

0002fcc2 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   2fcc2:	f242 0344 	movw	r3, #8260	; 0x2044
   2fcc6:	4298      	cmp	r0, r3
   2fcc8:	d834      	bhi.n	2fd34 <command_generates_command_complete_event+0x72>
   2fcca:	f242 030d 	movw	r3, #8205	; 0x200d
   2fcce:	4298      	cmp	r0, r3
   2fcd0:	d20b      	bcs.n	2fcea <command_generates_command_complete_event+0x28>
   2fcd2:	f240 4306 	movw	r3, #1030	; 0x406
   2fcd6:	4298      	cmp	r0, r3
   2fcd8:	d02e      	beq.n	2fd38 <command_generates_command_complete_event+0x76>
   2fcda:	f240 431d 	movw	r3, #1053	; 0x41d
   2fcde:	4298      	cmp	r0, r3
   2fce0:	d001      	beq.n	2fce6 <command_generates_command_complete_event+0x24>
		return true;
   2fce2:	2001      	movs	r0, #1
   2fce4:	4770      	bx	lr
	switch (hci_opcode) {
   2fce6:	2000      	movs	r0, #0
   2fce8:	4770      	bx	lr
   2fcea:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   2fcee:	380d      	subs	r0, #13
   2fcf0:	2837      	cmp	r0, #55	; 0x37
   2fcf2:	d823      	bhi.n	2fd3c <command_generates_command_complete_event+0x7a>
   2fcf4:	e8df f000 	tbb	[pc, r0]
   2fcf8:	2222221c 	.word	0x2222221c
   2fcfc:	221c2222 	.word	0x221c2222
   2fd00:	22221c22 	.word	0x22221c22
   2fd04:	2222221c 	.word	0x2222221c
   2fd08:	22222222 	.word	0x22222222
   2fd0c:	22222222 	.word	0x22222222
   2fd10:	22222222 	.word	0x22222222
   2fd14:	22222222 	.word	0x22222222
   2fd18:	22222222 	.word	0x22222222
   2fd1c:	22221c22 	.word	0x22221c22
   2fd20:	22222222 	.word	0x22222222
   2fd24:	22222222 	.word	0x22222222
   2fd28:	22222222 	.word	0x22222222
   2fd2c:	1c1c2222 	.word	0x1c1c2222
   2fd30:	2000      	movs	r0, #0
   2fd32:	4770      	bx	lr
		return true;
   2fd34:	2001      	movs	r0, #1
   2fd36:	4770      	bx	lr
	switch (hci_opcode) {
   2fd38:	2000      	movs	r0, #0
   2fd3a:	4770      	bx	lr
		return true;
   2fd3c:	2001      	movs	r0, #1
}
   2fd3e:	4770      	bx	lr

0002fd40 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2fd40:	230f      	movs	r3, #15
   2fd42:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2fd44:	2304      	movs	r3, #4
   2fd46:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2fd48:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2fd4a:	2301      	movs	r3, #1
   2fd4c:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2fd4e:	8081      	strh	r1, [r0, #4]
}
   2fd50:	4770      	bx	lr

0002fd52 <encode_command_complete_header>:
{
   2fd52:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2fd54:	240e      	movs	r4, #14
   2fd56:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   2fd58:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2fd5a:	2201      	movs	r2, #1
   2fd5c:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2fd5e:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2fd62:	7143      	strb	r3, [r0, #5]
}
   2fd64:	bc10      	pop	{r4}
   2fd66:	4770      	bx	lr

0002fd68 <le_read_supported_states>:
	*buf = states1;
   2fd68:	238f      	movs	r3, #143	; 0x8f
   2fd6a:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2fd6c:	23c0      	movs	r3, #192	; 0xc0
   2fd6e:	7103      	strb	r3, [r0, #4]
}
   2fd70:	4770      	bx	lr

0002fd72 <status_param_cmd_put>:
}
   2fd72:	2001      	movs	r0, #1
   2fd74:	4770      	bx	lr

0002fd76 <link_control_cmd_put>:
{
   2fd76:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2fd78:	7842      	ldrb	r2, [r0, #1]
   2fd7a:	f810 3b03 	ldrb.w	r3, [r0], #3
   2fd7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2fd82:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2fd84:	f240 4206 	movw	r2, #1030	; 0x406
   2fd88:	4293      	cmp	r3, r2
   2fd8a:	d005      	beq.n	2fd98 <link_control_cmd_put+0x22>
   2fd8c:	f240 421d 	movw	r2, #1053	; 0x41d
   2fd90:	4293      	cmp	r3, r2
   2fd92:	d004      	beq.n	2fd9e <link_control_cmd_put+0x28>
   2fd94:	2001      	movs	r0, #1
}
   2fd96:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2fd98:	f7dd f81c 	bl	cdd4 <sdc_hci_cmd_lc_disconnect>
   2fd9c:	e7fb      	b.n	2fd96 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2fd9e:	f7dd f81b 	bl	cdd8 <sdc_hci_cmd_lc_read_remote_version_information>
   2fda2:	e7f8      	b.n	2fd96 <link_control_cmd_put+0x20>

0002fda4 <controller_and_baseband_cmd_put>:
{
   2fda4:	b538      	push	{r3, r4, r5, lr}
   2fda6:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2fda8:	3003      	adds	r0, #3
   2fdaa:	7865      	ldrb	r5, [r4, #1]
   2fdac:	7823      	ldrb	r3, [r4, #0]
   2fdae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2fdb2:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2fdb4:	f640 4463 	movw	r4, #3171	; 0xc63
   2fdb8:	42a3      	cmp	r3, r4
   2fdba:	d02c      	beq.n	2fe16 <controller_and_baseband_cmd_put+0x72>
   2fdbc:	f101 0106 	add.w	r1, r1, #6
   2fdc0:	dc16      	bgt.n	2fdf0 <controller_and_baseband_cmd_put+0x4c>
   2fdc2:	f640 4403 	movw	r4, #3075	; 0xc03
   2fdc6:	42a3      	cmp	r3, r4
   2fdc8:	d022      	beq.n	2fe10 <controller_and_baseband_cmd_put+0x6c>
   2fdca:	f640 442d 	movw	r4, #3117	; 0xc2d
   2fdce:	42a3      	cmp	r3, r4
   2fdd0:	d105      	bne.n	2fdde <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2fdd2:	7813      	ldrb	r3, [r2, #0]
   2fdd4:	3303      	adds	r3, #3
   2fdd6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2fdd8:	f7dc fef0 	bl	cbbc <sdc_hci_cmd_cb_read_transmit_power_level>
   2fddc:	e007      	b.n	2fdee <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2fdde:	f640 4201 	movw	r2, #3073	; 0xc01
   2fde2:	4293      	cmp	r3, r2
   2fde4:	d102      	bne.n	2fdec <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2fde6:	f7dc feeb 	bl	cbc0 <sdc_hci_cmd_cb_set_event_mask>
   2fdea:	e000      	b.n	2fdee <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2fdec:	2001      	movs	r0, #1
}
   2fdee:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   2fdf0:	f640 447b 	movw	r4, #3195	; 0xc7b
   2fdf4:	42a3      	cmp	r3, r4
   2fdf6:	d011      	beq.n	2fe1c <controller_and_baseband_cmd_put+0x78>
   2fdf8:	f640 447c 	movw	r4, #3196	; 0xc7c
   2fdfc:	42a3      	cmp	r3, r4
   2fdfe:	d105      	bne.n	2fe0c <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   2fe00:	7813      	ldrb	r3, [r2, #0]
   2fe02:	3302      	adds	r3, #2
   2fe04:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2fe06:	f7dc fee5 	bl	cbd4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2fe0a:	e7f0      	b.n	2fdee <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2fe0c:	2001      	movs	r0, #1
   2fe0e:	e7ee      	b.n	2fdee <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   2fe10:	f7d4 fe44 	bl	4a9c <sdc_hci_cmd_cb_reset>
   2fe14:	e7eb      	b.n	2fdee <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2fe16:	f7dc fed8 	bl	cbca <sdc_hci_cmd_cb_set_event_mask_page_2>
   2fe1a:	e7e8      	b.n	2fdee <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   2fe1c:	7813      	ldrb	r3, [r2, #0]
   2fe1e:	3304      	adds	r3, #4
   2fe20:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2fe22:	f7dc fec9 	bl	cbb8 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   2fe26:	e7e2      	b.n	2fdee <controller_and_baseband_cmd_put+0x4a>

0002fe28 <supported_commands>:
{
   2fe28:	b510      	push	{r4, lr}
   2fe2a:	4604      	mov	r4, r0
   2fe2c:	222e      	movs	r2, #46	; 0x2e
   2fe2e:	2100      	movs	r1, #0
   2fe30:	f000 fd66 	bl	30900 <memset>
	cmds->hci_disconnect = 1;
   2fe34:	2320      	movs	r3, #32
   2fe36:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2fe38:	2380      	movs	r3, #128	; 0x80
   2fe3a:	70a3      	strb	r3, [r4, #2]
	cmds->hci_reset = 1;
   2fe3c:	23c0      	movs	r3, #192	; 0xc0
   2fe3e:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2fe40:	2304      	movs	r3, #4
   2fe42:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_supported_features = 1;
   2fe44:	2328      	movs	r3, #40	; 0x28
   2fe46:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2fe48:	2302      	movs	r3, #2
   2fe4a:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2fe4c:	2304      	movs	r3, #4
   2fe4e:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_advertising_data = 1;
   2fe50:	23f7      	movs	r3, #247	; 0xf7
   2fe52:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_clear_white_list = 1;
   2fe54:	23c3      	movs	r3, #195	; 0xc3
   2fe56:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_rand = 1;
   2fe58:	23f3      	movs	r3, #243	; 0xf3
   2fe5a:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_test_end = 1;
   2fe5c:	237e      	movs	r3, #126	; 0x7e
   2fe5e:	7723      	strb	r3, [r4, #28]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2fe60:	2330      	movs	r3, #48	; 0x30
   2fe62:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_read_suggested_default_data_length = 1;
   2fe66:	23c0      	movs	r3, #192	; 0xc0
   2fe68:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_resolving_list_size = 1;
   2fe6c:	2379      	movs	r3, #121	; 0x79
   2fe6e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_receiver_test_v2 = 1;
   2fe72:	23fe      	movs	r3, #254	; 0xfe
   2fe74:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2fe78:	2301      	movs	r3, #1
   2fe7a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2fe7e:	2380      	movs	r3, #128	; 0x80
   2fe80:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   2fe84:	2304      	movs	r3, #4
   2fe86:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   2fe8a:	bd10      	pop	{r4, pc}

0002fe8c <supported_features>:
   2fe8c:	2300      	movs	r3, #0
   2fe8e:	6003      	str	r3, [r0, #0]
   2fe90:	6043      	str	r3, [r0, #4]
	features->bdedr_not_supported = 1;
   2fe92:	7903      	ldrb	r3, [r0, #4]
	features->le_supported = 1;
   2fe94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   2fe98:	7103      	strb	r3, [r0, #4]
}
   2fe9a:	4770      	bx	lr

0002fe9c <info_param_cmd_put>:
{
   2fe9c:	b538      	push	{r3, r4, r5, lr}
   2fe9e:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2fea0:	1d88      	adds	r0, r1, #6
   2fea2:	7865      	ldrb	r5, [r4, #1]
   2fea4:	7823      	ldrb	r3, [r4, #0]
   2fea6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2feaa:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2feac:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2feb0:	3b01      	subs	r3, #1
   2feb2:	2b08      	cmp	r3, #8
   2feb4:	d820      	bhi.n	2fef8 <info_param_cmd_put+0x5c>
   2feb6:	e8df f003 	tbb	[pc, r3]
   2feba:	0b05      	.short	0x0b05
   2febc:	1f1f1f12 	.word	0x1f1f1f12
   2fec0:	1f1f      	.short	0x1f1f
   2fec2:	19          	.byte	0x19
   2fec3:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2fec4:	7813      	ldrb	r3, [r2, #0]
   2fec6:	3308      	adds	r3, #8
   2fec8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2feca:	f7dc ff38 	bl	cd3e <sdc_hci_cmd_ip_read_local_version_information>
   2fece:	e014      	b.n	2fefa <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2fed0:	7813      	ldrb	r3, [r2, #0]
   2fed2:	3340      	adds	r3, #64	; 0x40
   2fed4:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   2fed6:	f7ff ffa7 	bl	2fe28 <supported_commands>
		return 0;
   2feda:	2000      	movs	r0, #0
   2fedc:	e00d      	b.n	2fefa <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2fede:	7813      	ldrb	r3, [r2, #0]
   2fee0:	3308      	adds	r3, #8
   2fee2:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   2fee4:	f7ff ffd2 	bl	2fe8c <supported_features>
		return 0;
   2fee8:	2000      	movs	r0, #0
   2feea:	e006      	b.n	2fefa <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2feec:	7813      	ldrb	r3, [r2, #0]
   2feee:	3306      	adds	r3, #6
   2fef0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2fef2:	f7dc ff22 	bl	cd3a <sdc_hci_cmd_ip_read_bd_addr>
   2fef6:	e000      	b.n	2fefa <info_param_cmd_put+0x5e>
   2fef8:	2001      	movs	r0, #1
}
   2fefa:	bd38      	pop	{r3, r4, r5, pc}

0002fefc <le_supported_features>:
   2fefc:	2300      	movs	r3, #0
   2fefe:	6003      	str	r3, [r0, #0]
   2ff00:	7103      	strb	r3, [r0, #4]
	features->le_encryption = 1;
   2ff02:	7803      	ldrb	r3, [r0, #0]
	features->ll_privacy = 1;
   2ff04:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   2ff08:	7003      	strb	r3, [r0, #0]
	features->le_2m_phy = 1;
   2ff0a:	7843      	ldrb	r3, [r0, #1]
	features->channel_selection_algorithm_2 = 1;
   2ff0c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   2ff10:	7043      	strb	r3, [r0, #1]
}
   2ff12:	4770      	bx	lr

0002ff14 <vs_zephyr_supported_commands>:
   2ff14:	2300      	movs	r3, #0
   2ff16:	8003      	strh	r3, [r0, #0]
	cmds->read_version_info = 1;
   2ff18:	7803      	ldrb	r3, [r0, #0]
	cmds->write_bd_addr = 1;
   2ff1a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   2ff1e:	7003      	strb	r3, [r0, #0]
	cmds->read_static_addresses = 1;
   2ff20:	7843      	ldrb	r3, [r0, #1]
	cmds->read_chip_temperature = 1;
   2ff22:	f043 0307 	orr.w	r3, r3, #7
   2ff26:	7043      	strb	r3, [r0, #1]
}
   2ff28:	4770      	bx	lr

0002ff2a <vs_supported_commands>:
	cmds->event_length_set = 1;
   2ff2a:	233f      	movs	r3, #63	; 0x3f
   2ff2c:	7003      	strb	r3, [r0, #0]
}
   2ff2e:	4770      	bx	lr

0002ff30 <le_controller_cmd_put>:
{
   2ff30:	b538      	push	{r3, r4, r5, lr}
   2ff32:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2ff34:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2ff36:	3106      	adds	r1, #6
   2ff38:	7865      	ldrb	r5, [r4, #1]
   2ff3a:	7823      	ldrb	r3, [r4, #0]
   2ff3c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2ff40:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2ff42:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2ff46:	3b01      	subs	r3, #1
   2ff48:	2b4d      	cmp	r3, #77	; 0x4d
   2ff4a:	f200 80ce 	bhi.w	300ea <le_controller_cmd_put+0x1ba>
   2ff4e:	e8df f003 	tbb	[pc, r3]
   2ff52:	2a27      	.short	0x2a27
   2ff54:	3c39cc31 	.word	0x3c39cc31
   2ff58:	4c49463f 	.word	0x4c49463f
   2ff5c:	cccccccc 	.word	0xcccccccc
   2ff60:	5c59564f 	.word	0x5c59564f
   2ff64:	655fcccc 	.word	0x655fcccc
   2ff68:	75cc6e68 	.word	0x75cc6e68
   2ff6c:	cccc817b 	.word	0xcccc817b
   2ff70:	89cccccc 	.word	0x89cccccc
   2ff74:	cccc968f 	.word	0xcccc968f
   2ff78:	a29f9c99 	.word	0xa29f9c99
   2ff7c:	aca9cccc 	.word	0xaca9cccc
   2ff80:	bfbcb6af 	.word	0xbfbcb6af
   2ff84:	cccccccc 	.word	0xcccccccc
   2ff88:	cccccccc 	.word	0xcccccccc
   2ff8c:	cccccccc 	.word	0xcccccccc
   2ff90:	cccccccc 	.word	0xcccccccc
   2ff94:	cccccccc 	.word	0xcccccccc
   2ff98:	cccccccc 	.word	0xcccccccc
   2ff9c:	c9ccccc2 	.word	0xc9ccccc2
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2ffa0:	f7dc ff07 	bl	cdb2 <sdc_hci_cmd_le_set_event_mask>
   2ffa4:	e0a2      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2ffa6:	7813      	ldrb	r3, [r2, #0]
   2ffa8:	3303      	adds	r3, #3
   2ffaa:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2ffac:	4608      	mov	r0, r1
   2ffae:	f7dc fede 	bl	cd6e <sdc_hci_cmd_le_read_buffer_size>
   2ffb2:	e09b      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2ffb4:	7813      	ldrb	r3, [r2, #0]
   2ffb6:	3308      	adds	r3, #8
   2ffb8:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   2ffba:	4608      	mov	r0, r1
   2ffbc:	f7ff ff9e 	bl	2fefc <le_supported_features>
		return 0;
   2ffc0:	2000      	movs	r0, #0
   2ffc2:	e093      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2ffc4:	f7dc fefe 	bl	cdc4 <sdc_hci_cmd_le_set_random_address>
   2ffc8:	e090      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   2ffca:	f7dc feec 	bl	cda6 <sdc_hci_cmd_le_set_adv_params>
   2ffce:	e08d      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   2ffd0:	7813      	ldrb	r3, [r2, #0]
   2ffd2:	3301      	adds	r3, #1
   2ffd4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   2ffd6:	4608      	mov	r0, r1
   2ffd8:	f7dc fec7 	bl	cd6a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   2ffdc:	e086      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   2ffde:	f7dc fede 	bl	cd9e <sdc_hci_cmd_le_set_adv_data>
   2ffe2:	e083      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   2ffe4:	f7dc fef2 	bl	cdcc <sdc_hci_cmd_le_set_scan_response_data>
   2ffe8:	e080      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   2ffea:	f7dc feda 	bl	cda2 <sdc_hci_cmd_le_set_adv_enable>
   2ffee:	e07d      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   2fff0:	7813      	ldrb	r3, [r2, #0]
   2fff2:	3301      	adds	r3, #1
   2fff4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   2fff6:	4608      	mov	r0, r1
   2fff8:	f7dc fec9 	bl	cd8e <sdc_hci_cmd_le_read_white_list_size>
   2fffc:	e076      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_white_list();
   2fffe:	f7dc fea6 	bl	cd4e <sdc_hci_cmd_le_clear_white_list>
   30002:	e073      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   30004:	f7dc fe9f 	bl	cd46 <sdc_hci_cmd_le_add_device_to_white_list>
   30008:	e070      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   3000a:	f7dc fec4 	bl	cd96 <sdc_hci_cmd_le_remove_device_from_white_list>
   3000e:	e06d      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   30010:	7813      	ldrb	r3, [r2, #0]
   30012:	3307      	adds	r3, #7
   30014:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   30016:	f7dc feac 	bl	cd72 <sdc_hci_cmd_le_read_channel_map>
   3001a:	e067      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   3001c:	f7dc feaf 	bl	cd7e <sdc_hci_cmd_le_read_remote_features>
   30020:	e064      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   30022:	7813      	ldrb	r3, [r2, #0]
   30024:	3310      	adds	r3, #16
   30026:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   30028:	f7dc fe93 	bl	cd52 <sdc_hci_cmd_le_encrypt>
   3002c:	e05e      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   3002e:	7813      	ldrb	r3, [r2, #0]
   30030:	3308      	adds	r3, #8
   30032:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   30034:	4608      	mov	r0, r1
   30036:	f7dc fe96 	bl	cd66 <sdc_hci_cmd_le_rand>
   3003a:	e057      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   3003c:	7813      	ldrb	r3, [r2, #0]
   3003e:	3302      	adds	r3, #2
   30040:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   30042:	f7dc fe8c 	bl	cd5e <sdc_hci_cmd_le_long_term_key_request_reply>
   30046:	e051      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   30048:	7813      	ldrb	r3, [r2, #0]
   3004a:	3302      	adds	r3, #2
   3004c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   3004e:	f7dc fe82 	bl	cd56 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   30052:	e04b      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   30054:	7813      	ldrb	r3, [r2, #0]
   30056:	3308      	adds	r3, #8
   30058:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   3005a:	4608      	mov	r0, r1
   3005c:	f7ff fe84 	bl	2fd68 <le_read_supported_states>
		return 0;
   30060:	2000      	movs	r0, #0
   30062:	e043      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   30064:	7813      	ldrb	r3, [r2, #0]
   30066:	3302      	adds	r3, #2
   30068:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   3006a:	f7dc fe9e 	bl	cdaa <sdc_hci_cmd_le_set_data_length>
   3006e:	e03d      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   30070:	7813      	ldrb	r3, [r2, #0]
   30072:	3304      	adds	r3, #4
   30074:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   30076:	4608      	mov	r0, r1
   30078:	f7dc fe85 	bl	cd86 <sdc_hci_cmd_le_read_suggested_default_data_length>
   3007c:	e036      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   3007e:	f7dc fea7 	bl	cdd0 <sdc_hci_cmd_le_write_suggested_default_data_length>
   30082:	e033      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   30084:	f7dc fe5d 	bl	cd42 <sdc_hci_cmd_le_add_device_to_resolving_list>
   30088:	e030      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   3008a:	f7dc fe82 	bl	cd92 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   3008e:	e02d      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_resolving_list();
   30090:	f7dc fe5b 	bl	cd4a <sdc_hci_cmd_le_clear_resolving_list>
   30094:	e02a      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   30096:	7813      	ldrb	r3, [r2, #0]
   30098:	3301      	adds	r3, #1
   3009a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   3009c:	4608      	mov	r0, r1
   3009e:	f7dc fe70 	bl	cd82 <sdc_hci_cmd_le_read_resolving_list_size>
   300a2:	e023      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   300a4:	f7dc fe79 	bl	cd9a <sdc_hci_cmd_le_set_address_resolution_enable>
   300a8:	e020      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   300aa:	f7dc fe8d 	bl	cdc8 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   300ae:	e01d      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   300b0:	7813      	ldrb	r3, [r2, #0]
   300b2:	3308      	adds	r3, #8
   300b4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   300b6:	4608      	mov	r0, r1
   300b8:	f7dc fe5d 	bl	cd76 <sdc_hci_cmd_le_read_max_data_length>
   300bc:	e016      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   300be:	7813      	ldrb	r3, [r2, #0]
   300c0:	3304      	adds	r3, #4
   300c2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   300c4:	f7dc fe59 	bl	cd7a <sdc_hci_cmd_le_read_phy>
   300c8:	e010      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   300ca:	f7dc fe70 	bl	cdae <sdc_hci_cmd_le_set_default_phy>
   300ce:	e00d      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   300d0:	f7dc fe74 	bl	cdbc <sdc_hci_cmd_le_set_phy>
   300d4:	e00a      	b.n	300ec <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   300d6:	7813      	ldrb	r3, [r2, #0]
   300d8:	3302      	adds	r3, #2
   300da:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   300dc:	4608      	mov	r0, r1
   300de:	f7dc fe54 	bl	cd8a <sdc_hci_cmd_le_read_transmit_power>
   300e2:	e003      	b.n	300ec <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   300e4:	f7dc fe6c 	bl	cdc0 <sdc_hci_cmd_le_set_privacy_mode>
   300e8:	e000      	b.n	300ec <le_controller_cmd_put+0x1bc>
   300ea:	2001      	movs	r0, #1
}
   300ec:	bd38      	pop	{r3, r4, r5, pc}

000300ee <vs_cmd_put>:
{
   300ee:	b538      	push	{r3, r4, r5, lr}
   300f0:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   300f2:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   300f4:	3106      	adds	r1, #6
   300f6:	7865      	ldrb	r5, [r4, #1]
   300f8:	7823      	ldrb	r3, [r4, #0]
   300fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   300fe:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   30102:	42a3      	cmp	r3, r4
   30104:	d90f      	bls.n	30126 <vs_cmd_put+0x38>
   30106:	f64f 5405 	movw	r4, #64773	; 0xfd05
   3010a:	42a3      	cmp	r3, r4
   3010c:	d85b      	bhi.n	301c6 <vs_cmd_put+0xd8>
   3010e:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   30112:	d319      	bcc.n	30148 <vs_cmd_put+0x5a>
   30114:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   30118:	2b05      	cmp	r3, #5
   3011a:	d850      	bhi.n	301be <vs_cmd_put+0xd0>
   3011c:	e8df f003 	tbb	[pc, r3]
   30120:	46434038 	.word	0x46434038
   30124:	4c49      	.short	0x4c49
   30126:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   3012a:	d801      	bhi.n	30130 <vs_cmd_put+0x42>
   3012c:	2001      	movs	r0, #1
}
   3012e:	bd38      	pop	{r3, r4, r5, pc}
   30130:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   30134:	3b01      	subs	r3, #1
   30136:	2b09      	cmp	r3, #9
   30138:	d843      	bhi.n	301c2 <vs_cmd_put+0xd4>
   3013a:	e8df f003 	tbb	[pc, r3]
   3013e:	0e07      	.short	0x0e07
   30140:	26424242 	.word	0x26424242
   30144:	1f164242 	.word	0x1f164242
	switch (opcode)	{
   30148:	2001      	movs	r0, #1
   3014a:	e7f0      	b.n	3012e <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   3014c:	7813      	ldrb	r3, [r2, #0]
   3014e:	330c      	adds	r3, #12
   30150:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   30152:	4608      	mov	r0, r1
   30154:	f7d4 fcb6 	bl	4ac4 <sdc_hci_cmd_vs_zephyr_read_version_info>
   30158:	e7e9      	b.n	3012e <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   3015a:	7813      	ldrb	r3, [r2, #0]
   3015c:	3340      	adds	r3, #64	; 0x40
   3015e:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   30160:	4608      	mov	r0, r1
   30162:	f7ff fed7 	bl	2ff14 <vs_zephyr_supported_commands>
		return 0;
   30166:	2000      	movs	r0, #0
   30168:	e7e1      	b.n	3012e <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   3016a:	7813      	ldrb	r3, [r2, #0]
   3016c:	3301      	adds	r3, #1
   3016e:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   30170:	3316      	adds	r3, #22
   30172:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   30174:	4608      	mov	r0, r1
   30176:	f7dc fd8f 	bl	cc98 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   3017a:	e7d8      	b.n	3012e <vs_cmd_put+0x40>
		*param_length_out +=
   3017c:	7813      	ldrb	r3, [r2, #0]
   3017e:	3320      	adds	r3, #32
   30180:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   30182:	4608      	mov	r0, r1
   30184:	f7dc fd3b 	bl	cbfe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   30188:	e7d1      	b.n	3012e <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   3018a:	f7dc fdd4 	bl	cd36 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   3018e:	e7ce      	b.n	3012e <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   30190:	7813      	ldrb	r3, [r2, #0]
   30192:	3340      	adds	r3, #64	; 0x40
   30194:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   30196:	4608      	mov	r0, r1
   30198:	f7ff fec7 	bl	2ff2a <vs_supported_commands>
		return 0;
   3019c:	2000      	movs	r0, #0
   3019e:	e7c6      	b.n	3012e <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   301a0:	f7dc fd26 	bl	cbf0 <sdc_hci_cmd_vs_llpm_mode_set>
   301a4:	e7c3      	b.n	3012e <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   301a6:	f7dc fd1f 	bl	cbe8 <sdc_hci_cmd_vs_conn_update>
   301aa:	e7c0      	b.n	3012e <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   301ac:	f7dc fd14 	bl	cbd8 <sdc_hci_cmd_vs_conn_event_extend>
   301b0:	e7bd      	b.n	3012e <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   301b2:	f7dc fd1f 	bl	cbf4 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   301b6:	e7ba      	b.n	3012e <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   301b8:	f7dc fd18 	bl	cbec <sdc_hci_cmd_vs_event_length_set>
   301bc:	e7b7      	b.n	3012e <vs_cmd_put+0x40>
	switch (opcode)	{
   301be:	2001      	movs	r0, #1
   301c0:	e7b5      	b.n	3012e <vs_cmd_put+0x40>
   301c2:	2001      	movs	r0, #1
   301c4:	e7b3      	b.n	3012e <vs_cmd_put+0x40>
   301c6:	2001      	movs	r0, #1
   301c8:	e7b1      	b.n	3012e <vs_cmd_put+0x40>

000301ca <cmd_put>:
{
   301ca:	b570      	push	{r4, r5, r6, lr}
   301cc:	b082      	sub	sp, #8
   301ce:	460e      	mov	r6, r1
   301d0:	7842      	ldrb	r2, [r0, #1]
   301d2:	7805      	ldrb	r5, [r0, #0]
   301d4:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   301d8:	2304      	movs	r3, #4
   301da:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   301de:	0893      	lsrs	r3, r2, #2
   301e0:	2a23      	cmp	r2, #35	; 0x23
   301e2:	d80b      	bhi.n	301fc <cmd_put+0x32>
   301e4:	b21a      	sxth	r2, r3
   301e6:	2a00      	cmp	r2, #0
   301e8:	d03a      	beq.n	30260 <cmd_put+0x96>
   301ea:	3b01      	subs	r3, #1
   301ec:	2b07      	cmp	r3, #7
   301ee:	d839      	bhi.n	30264 <cmd_put+0x9a>
   301f0:	e8df f003 	tbb	[pc, r3]
   301f4:	241e381a 	.word	0x241e381a
   301f8:	3038382a 	.word	0x3038382a
   301fc:	2b3f      	cmp	r3, #63	; 0x3f
   301fe:	d105      	bne.n	3020c <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   30200:	f10d 0207 	add.w	r2, sp, #7
   30204:	f7ff ff73 	bl	300ee <vs_cmd_put>
   30208:	4604      	mov	r4, r0
		break;
   3020a:	e000      	b.n	3020e <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   3020c:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   3020e:	4628      	mov	r0, r5
   30210:	f7ff fd57 	bl	2fcc2 <command_generates_command_complete_event>
   30214:	b108      	cbz	r0, 3021a <cmd_put+0x50>
   30216:	2c01      	cmp	r4, #1
   30218:	d126      	bne.n	30268 <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   3021a:	4622      	mov	r2, r4
   3021c:	4629      	mov	r1, r5
   3021e:	4630      	mov	r0, r6
   30220:	f7ff fd8e 	bl	2fd40 <encode_command_status>
}
   30224:	b002      	add	sp, #8
   30226:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   30228:	f7ff fda5 	bl	2fd76 <link_control_cmd_put>
   3022c:	4604      	mov	r4, r0
		break;
   3022e:	e7ee      	b.n	3020e <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   30230:	f10d 0207 	add.w	r2, sp, #7
   30234:	f7ff fdb6 	bl	2fda4 <controller_and_baseband_cmd_put>
   30238:	4604      	mov	r4, r0
		break;
   3023a:	e7e8      	b.n	3020e <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   3023c:	f10d 0207 	add.w	r2, sp, #7
   30240:	f7ff fe2c 	bl	2fe9c <info_param_cmd_put>
   30244:	4604      	mov	r4, r0
		break;
   30246:	e7e2      	b.n	3020e <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   30248:	f10d 0207 	add.w	r2, sp, #7
   3024c:	f7ff fd91 	bl	2fd72 <status_param_cmd_put>
   30250:	4604      	mov	r4, r0
		break;
   30252:	e7dc      	b.n	3020e <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   30254:	f10d 0207 	add.w	r2, sp, #7
   30258:	f7ff fe6a 	bl	2ff30 <le_controller_cmd_put>
   3025c:	4604      	mov	r4, r0
		break;
   3025e:	e7d6      	b.n	3020e <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   30260:	2401      	movs	r4, #1
   30262:	e7d4      	b.n	3020e <cmd_put+0x44>
   30264:	2401      	movs	r4, #1
   30266:	e7d2      	b.n	3020e <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   30268:	4623      	mov	r3, r4
   3026a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   3026e:	4629      	mov	r1, r5
   30270:	4630      	mov	r0, r6
   30272:	f7ff fd6e 	bl	2fd52 <encode_command_complete_header>
}
   30276:	e7d5      	b.n	30224 <cmd_put+0x5a>

00030278 <m_config_clock_source_get>:
}
   30278:	2001      	movs	r0, #1
   3027a:	4770      	bx	lr

0003027c <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   3027c:	4668      	mov	r0, sp
   3027e:	f020 0107 	bic.w	r1, r0, #7
   30282:	468d      	mov	sp, r1
   30284:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   30286:	f7d2 fffd 	bl	3284 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   3028a:	f7e4 ffa7 	bl	151dc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3028e:	f7e5 f8b3 	bl	153f8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   30292:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   30296:	4685      	mov	sp, r0
   30298:	4770      	bx	lr

0003029a <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3029a:	4668      	mov	r0, sp
   3029c:	f020 0107 	bic.w	r1, r0, #7
   302a0:	468d      	mov	sp, r1
   302a2:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   302a4:	f7d2 ff70 	bl	3188 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   302a8:	f7e4 ff98 	bl	151dc <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   302ac:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   302b0:	4685      	mov	sp, r0
   302b2:	4770      	bx	lr

000302b4 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   302b4:	4668      	mov	r0, sp
   302b6:	f020 0107 	bic.w	r1, r0, #7
   302ba:	468d      	mov	sp, r1
   302bc:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   302be:	f7db ff42 	bl	c146 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   302c2:	f7e4 ff8b 	bl	151dc <_arch_isr_direct_pm>
   302c6:	f7e5 f897 	bl	153f8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   302ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   302ce:	4685      	mov	sp, r0
   302d0:	4770      	bx	lr

000302d2 <nrfx_clock_enable>:
}
   302d2:	4770      	bx	lr

000302d4 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   302d4:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   302d6:	f7d3 fc0b 	bl	3af0 <MPSL_IRQ_CLOCK_Handler>
}
   302da:	bd08      	pop	{r3, pc}

000302dc <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   302dc:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   302de:	f7f8 f859 	bl	28394 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   302e2:	bd08      	pop	{r3, pc}

000302e4 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   302e4:	b510      	push	{r4, lr}
   302e6:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   302e8:	f7e4 fdca 	bl	14e80 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   302ec:	f7e4 fe8a 	bl	15004 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   302f0:	4620      	mov	r0, r4
   302f2:	f7ff fff3 	bl	302dc <hw_cc3xx_init_internal>
	return res;
}
   302f6:	bd10      	pop	{r4, pc}

000302f8 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   302f8:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   302fa:	4780      	blx	r0
}
   302fc:	bd08      	pop	{r3, pc}

000302fe <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   302fe:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   30300:	f000 fa16 	bl	30730 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   30304:	bd08      	pop	{r3, pc}

00030306 <pin_is_task_output>:
{
   30306:	b510      	push	{r4, lr}
   30308:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3030a:	f7f0 fb3d 	bl	20988 <pin_is_output>
   3030e:	b128      	cbz	r0, 3031c <pin_is_task_output+0x16>
   30310:	4620      	mov	r0, r4
   30312:	f7f0 fb23 	bl	2095c <pin_in_use_by_te>
   30316:	b118      	cbz	r0, 30320 <pin_is_task_output+0x1a>
   30318:	2001      	movs	r0, #1
   3031a:	e000      	b.n	3031e <pin_is_task_output+0x18>
   3031c:	2000      	movs	r0, #0
}
   3031e:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   30320:	2000      	movs	r0, #0
   30322:	e7fc      	b.n	3031e <pin_is_task_output+0x18>

00030324 <pin_is_input>:
{
   30324:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   30326:	f7f0 fb2f 	bl	20988 <pin_is_output>
   3032a:	f080 0001 	eor.w	r0, r0, #1
}
   3032e:	b2c0      	uxtb	r0, r0
   30330:	bd08      	pop	{r3, pc}

00030332 <gpiote_polarity_to_trigger>:
}
   30332:	4770      	bx	lr

00030334 <gpiote_trigger_to_polarity>:
}
   30334:	4770      	bx	lr

00030336 <is_level>:
}
   30336:	2803      	cmp	r0, #3
   30338:	bf94      	ite	ls
   3033a:	2000      	movls	r0, #0
   3033c:	2001      	movhi	r0, #1
   3033e:	4770      	bx	lr

00030340 <transfer_byte>:
{
   30340:	b430      	push	{r4, r5}
   30342:	b082      	sub	sp, #8
    return p_reg->RXD;
   30344:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
   30348:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   3034a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   3034e:	6a0b      	ldr	r3, [r1, #32]
   30350:	698a      	ldr	r2, [r1, #24]
   30352:	4293      	cmp	r3, r2
   30354:	d203      	bcs.n	3035e <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   30356:	694a      	ldr	r2, [r1, #20]
   30358:	f89d 4007 	ldrb.w	r4, [sp, #7]
   3035c:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   3035e:	6a0b      	ldr	r3, [r1, #32]
   30360:	3301      	adds	r3, #1
   30362:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   30364:	1c5a      	adds	r2, r3, #1
    if (p_cb->abort)
   30366:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   3036a:	b13c      	cbz	r4, 3037c <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   3036c:	690c      	ldr	r4, [r1, #16]
   3036e:	4294      	cmp	r4, r2
   30370:	d900      	bls.n	30374 <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   30372:	610a      	str	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   30374:	698c      	ldr	r4, [r1, #24]
   30376:	4294      	cmp	r4, r2
   30378:	d900      	bls.n	3037c <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   3037a:	618a      	str	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   3037c:	690c      	ldr	r4, [r1, #16]
   3037e:	4294      	cmp	r4, r2
   30380:	d808      	bhi.n	30394 <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   30382:	698d      	ldr	r5, [r1, #24]
   30384:	4295      	cmp	r5, r2
   30386:	d80d      	bhi.n	303a4 <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   30388:	42a3      	cmp	r3, r4
   3038a:	d310      	bcc.n	303ae <transfer_byte+0x6e>
   3038c:	42ab      	cmp	r3, r5
   3038e:	d210      	bcs.n	303b2 <transfer_byte+0x72>
   30390:	2001      	movs	r0, #1
   30392:	e004      	b.n	3039e <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   30394:	68cb      	ldr	r3, [r1, #12]
   30396:	5c9b      	ldrb	r3, [r3, r2]
    p_reg->TXD = data;
   30398:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   3039c:	2001      	movs	r0, #1
}
   3039e:	b002      	add	sp, #8
   303a0:	bc30      	pop	{r4, r5}
   303a2:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
   303a4:	7fcb      	ldrb	r3, [r1, #31]
   303a6:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   303aa:	2001      	movs	r0, #1
   303ac:	e7f7      	b.n	3039e <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   303ae:	2001      	movs	r0, #1
   303b0:	e7f5      	b.n	3039e <transfer_byte+0x5e>
   303b2:	2000      	movs	r0, #0
   303b4:	e7f3      	b.n	3039e <transfer_byte+0x5e>

000303b6 <spim_int_enable>:
    if (!enable)
   303b6:	b919      	cbnz	r1, 303c0 <spim_int_enable+0xa>
    p_reg->INTENCLR = mask;
   303b8:	2340      	movs	r3, #64	; 0x40
   303ba:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   303be:	4770      	bx	lr
    p_reg->INTENSET = mask;
   303c0:	2340      	movs	r3, #64	; 0x40
   303c2:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
}
   303c6:	4770      	bx	lr

000303c8 <spim_list_enable_handle>:
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   303c8:	f011 0f01 	tst.w	r1, #1
   303cc:	d009      	beq.n	303e2 <spim_list_enable_handle+0x1a>
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   303ce:	2301      	movs	r3, #1
   303d0:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   303d4:	f011 0f02 	tst.w	r1, #2
   303d8:	d007      	beq.n	303ea <spim_list_enable_handle+0x22>
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   303da:	2301      	movs	r3, #1
   303dc:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   303e0:	4770      	bx	lr
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   303e2:	2300      	movs	r3, #0
   303e4:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   303e8:	e7f4      	b.n	303d4 <spim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   303ea:	2300      	movs	r3, #0
   303ec:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   303f0:	4770      	bx	lr

000303f2 <spim_abort>:
{
   303f2:	b570      	push	{r4, r5, r6, lr}
   303f4:	4605      	mov	r5, r0
   303f6:	460e      	mov	r6, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   303f8:	2301      	movs	r3, #1
   303fa:	6143      	str	r3, [r0, #20]
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   303fc:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   303fe:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   30402:	b923      	cbnz	r3, 3040e <spim_abort+0x1c>
   30404:	2001      	movs	r0, #1
   30406:	f7ff ff7a 	bl	302fe <nrfx_busy_wait>
   3040a:	3c01      	subs	r4, #1
   3040c:	d1f7      	bne.n	303fe <spim_abort+0xc>
    p_cb->transfer_in_progress = false;
   3040e:	2300      	movs	r3, #0
   30410:	7773      	strb	r3, [r6, #29]
}
   30412:	bd70      	pop	{r4, r5, r6, pc}

00030414 <finish_transfer>:
{
   30414:	b510      	push	{r4, lr}
   30416:	4604      	mov	r4, r0
    set_ss_pin_state(p_cb, false);
   30418:	2100      	movs	r1, #0
   3041a:	f7f2 f8c7 	bl	225ac <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   3041e:	2300      	movs	r3, #0
   30420:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   30422:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   30424:	4620      	mov	r0, r4
   30426:	f850 3b08 	ldr.w	r3, [r0], #8
   3042a:	6861      	ldr	r1, [r4, #4]
   3042c:	4798      	blx	r3
}
   3042e:	bd10      	pop	{r4, pc}

00030430 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   30430:	b148      	cbz	r0, 30446 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   30432:	68c3      	ldr	r3, [r0, #12]
   30434:	8818      	ldrh	r0, [r3, #0]
   30436:	f3c0 0008 	ubfx	r0, r0, #0, #9
   3043a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   3043e:	bf14      	ite	ne
   30440:	2000      	movne	r0, #0
   30442:	2001      	moveq	r0, #1
   30444:	4770      	bx	lr
		return false;
   30446:	2000      	movs	r0, #0
}
   30448:	4770      	bx	lr

0003044a <k_heap_init>:
{
   3044a:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   3044c:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   30450:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   30452:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   30454:	f7e2 f8c0 	bl	125d8 <sys_heap_init>
}
   30458:	bd10      	pop	{r4, pc}

0003045a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3045a:	6902      	ldr	r2, [r0, #16]
   3045c:	6943      	ldr	r3, [r0, #20]
   3045e:	431a      	orrs	r2, r3
   30460:	f012 0203 	ands.w	r2, r2, #3
   30464:	d10d      	bne.n	30482 <create_free_list+0x28>
	slab->free_list = NULL;
   30466:	2100      	movs	r1, #0
   30468:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3046a:	e005      	b.n	30478 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   3046c:	6981      	ldr	r1, [r0, #24]
   3046e:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   30470:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   30472:	6901      	ldr	r1, [r0, #16]
   30474:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   30476:	3201      	adds	r2, #1
   30478:	68c1      	ldr	r1, [r0, #12]
   3047a:	4291      	cmp	r1, r2
   3047c:	d8f6      	bhi.n	3046c <create_free_list+0x12>
	return 0;
   3047e:	2000      	movs	r0, #0
   30480:	4770      	bx	lr
		return -EINVAL;
   30482:	f06f 0015 	mvn.w	r0, #21
}
   30486:	4770      	bx	lr

00030488 <k_mem_slab_init>:
{
   30488:	b510      	push	{r4, lr}
   3048a:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   3048c:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   3048e:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   30490:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   30492:	2300      	movs	r3, #0
   30494:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   30496:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
   30498:	f7ff ffdf 	bl	3045a <create_free_list>
	if (rc < 0) {
   3049c:	2800      	cmp	r0, #0
   3049e:	db01      	blt.n	304a4 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   304a0:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   304a2:	6064      	str	r4, [r4, #4]
}
   304a4:	bd10      	pop	{r4, pc}

000304a6 <setup_thread_stack>:
{
   304a6:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   304a8:	3207      	adds	r2, #7
   304aa:	f022 0207 	bic.w	r2, r2, #7
   304ae:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   304b2:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   304b6:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   304ba:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   304be:	2200      	movs	r2, #0
   304c0:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   304c4:	18c8      	adds	r0, r1, r3
   304c6:	bc10      	pop	{r4}
   304c8:	4770      	bx	lr

000304ca <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   304ca:	f3ef 8005 	mrs	r0, IPSR
}
   304ce:	3800      	subs	r0, #0
   304d0:	bf18      	it	ne
   304d2:	2001      	movne	r0, #1
   304d4:	4770      	bx	lr

000304d6 <k_thread_name_get>:
}
   304d6:	3078      	adds	r0, #120	; 0x78
   304d8:	4770      	bx	lr

000304da <z_impl_k_thread_start>:
{
   304da:	b508      	push	{r3, lr}
	z_sched_start(thread);
   304dc:	f7f5 fbe4 	bl	25ca8 <z_sched_start>
}
   304e0:	bd08      	pop	{r3, pc}

000304e2 <z_init_thread_base>:
{
   304e2:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   304e4:	2400      	movs	r4, #0
   304e6:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   304e8:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   304ea:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   304ec:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   304ee:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   304f0:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   304f2:	61c4      	str	r4, [r0, #28]
}
   304f4:	bc10      	pop	{r4}
   304f6:	4770      	bx	lr

000304f8 <z_pm_save_idle_exit>:
{
   304f8:	b508      	push	{r3, lr}
	pm_system_resume();
   304fa:	f7e3 ff25 	bl	14348 <pm_system_resume>
	sys_clock_idle_exit();
   304fe:	f7ff faf1 	bl	2fae4 <sys_clock_idle_exit>
}
   30502:	bd08      	pop	{r3, pc}

00030504 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   30504:	4288      	cmp	r0, r1
   30506:	da00      	bge.n	3050a <new_prio_for_inheritance+0x6>
   30508:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   3050a:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   3050e:	db01      	blt.n	30514 <new_prio_for_inheritance+0x10>
   30510:	4608      	mov	r0, r1
   30512:	4770      	bx	lr
   30514:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   30518:	4770      	bx	lr

0003051a <adjust_owner_prio>:
{
   3051a:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   3051c:	6880      	ldr	r0, [r0, #8]
   3051e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   30522:	428b      	cmp	r3, r1
   30524:	d101      	bne.n	3052a <adjust_owner_prio+0x10>
	return false;
   30526:	2000      	movs	r0, #0
}
   30528:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   3052a:	f7f5 fd6f 	bl	2600c <z_set_prio>
   3052e:	e7fb      	b.n	30528 <adjust_owner_prio+0xe>

00030530 <z_impl_k_mutex_init>:
{
   30530:	4603      	mov	r3, r0
	mutex->owner = NULL;
   30532:	2000      	movs	r0, #0
   30534:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   30536:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   30538:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   3053a:	605b      	str	r3, [r3, #4]
}
   3053c:	4770      	bx	lr

0003053e <prepare_thread_to_run>:
{
   3053e:	b508      	push	{r3, lr}
   30540:	2200      	movs	r2, #0
   30542:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   30546:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   30548:	f7f5 fb58 	bl	25bfc <z_ready_thread>
}
   3054c:	bd08      	pop	{r3, pc}

0003054e <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3054e:	b160      	cbz	r0, 3056a <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30550:	6803      	ldr	r3, [r0, #0]
   30552:	f013 0f03 	tst.w	r3, #3
   30556:	d008      	beq.n	3056a <z_queue_node_peek+0x1c>
{
   30558:	b510      	push	{r4, lr}
		ret = anode->data;
   3055a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3055c:	b909      	cbnz	r1, 30562 <z_queue_node_peek+0x14>
		ret = anode->data;
   3055e:	4620      	mov	r0, r4
}
   30560:	bd10      	pop	{r4, pc}
			k_free(anode);
   30562:	f000 f98d 	bl	30880 <k_free>
		ret = anode->data;
   30566:	4620      	mov	r0, r4
   30568:	e7fa      	b.n	30560 <z_queue_node_peek+0x12>
}
   3056a:	4770      	bx	lr

0003056c <z_impl_k_queue_init>:
	list->head = NULL;
   3056c:	2300      	movs	r3, #0
   3056e:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   30570:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
   30572:	6083      	str	r3, [r0, #8]
   30574:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
   30578:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   3057a:	6103      	str	r3, [r0, #16]
	sys_dlist_init(&queue->poll_events);
   3057c:	f100 0314 	add.w	r3, r0, #20
	list->head = (sys_dnode_t *)list;
   30580:	6143      	str	r3, [r0, #20]
	list->tail = (sys_dnode_t *)list;
   30582:	6183      	str	r3, [r0, #24]
}
   30584:	4770      	bx	lr

00030586 <k_queue_append>:
{
   30586:	b500      	push	{lr}
   30588:	b083      	sub	sp, #12
   3058a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3058c:	2301      	movs	r3, #1
   3058e:	9300      	str	r3, [sp, #0]
   30590:	2300      	movs	r3, #0
   30592:	4619      	mov	r1, r3
   30594:	f7f3 ff06 	bl	243a4 <queue_insert>
}
   30598:	b003      	add	sp, #12
   3059a:	f85d fb04 	ldr.w	pc, [sp], #4

0003059e <k_queue_prepend>:
{
   3059e:	b500      	push	{lr}
   305a0:	b083      	sub	sp, #12
   305a2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   305a4:	2100      	movs	r1, #0
   305a6:	9100      	str	r1, [sp, #0]
   305a8:	460b      	mov	r3, r1
   305aa:	f7f3 fefb 	bl	243a4 <queue_insert>
}
   305ae:	b003      	add	sp, #12
   305b0:	f85d fb04 	ldr.w	pc, [sp], #4

000305b4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   305b4:	b15a      	cbz	r2, 305ce <z_impl_k_sem_init+0x1a>
   305b6:	428a      	cmp	r2, r1
   305b8:	d30c      	bcc.n	305d4 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   305ba:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   305bc:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   305be:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   305c0:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   305c2:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   305c6:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   305c8:	6143      	str	r3, [r0, #20]
	return 0;
   305ca:	2000      	movs	r0, #0
   305cc:	4770      	bx	lr
		return -EINVAL;
   305ce:	f06f 0015 	mvn.w	r0, #21
   305d2:	4770      	bx	lr
   305d4:	f06f 0015 	mvn.w	r0, #21
}
   305d8:	4770      	bx	lr

000305da <cancel_async_locked>:
{
   305da:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   305dc:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   305de:	f012 0f02 	tst.w	r2, #2
   305e2:	d009      	beq.n	305f8 <cancel_async_locked+0x1e>
	return *flagp;
   305e4:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   305e6:	f012 000f 	ands.w	r0, r2, #15
   305ea:	d037      	beq.n	3065c <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   305ec:	f042 0202 	orr.w	r2, r2, #2
   305f0:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   305f2:	f002 000f 	and.w	r0, r2, #15
	return ret;
   305f6:	4770      	bx	lr
{
   305f8:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   305fa:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   305fc:	f022 0104 	bic.w	r1, r2, #4
   30600:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   30602:	f012 0f04 	tst.w	r2, #4
   30606:	d011      	beq.n	3062c <cancel_async_locked+0x52>
   30608:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3060c:	2100      	movs	r1, #0
   3060e:	b16a      	cbz	r2, 3062c <cancel_async_locked+0x52>
   30610:	4290      	cmp	r0, r2
   30612:	d002      	beq.n	3061a <cancel_async_locked+0x40>
   30614:	4611      	mov	r1, r2
   30616:	6812      	ldr	r2, [r2, #0]
   30618:	e7f9      	b.n	3060e <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   3061a:	b191      	cbz	r1, 30642 <cancel_async_locked+0x68>
	return node->next;
   3061c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   3061e:	600a      	str	r2, [r1, #0]
	return list->tail;
   30620:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   30624:	4293      	cmp	r3, r2
   30626:	d016      	beq.n	30656 <cancel_async_locked+0x7c>
	parent->next = child;
   30628:	2200      	movs	r2, #0
   3062a:	601a      	str	r2, [r3, #0]
	return *flagp;
   3062c:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   3062e:	f012 000f 	ands.w	r0, r2, #15
   30632:	d004      	beq.n	3063e <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   30634:	f042 0202 	orr.w	r2, r2, #2
   30638:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3063a:	f002 000f 	and.w	r0, r2, #15
}
   3063e:	bc10      	pop	{r4}
   30640:	4770      	bx	lr
	return node->next;
   30642:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   30644:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   30648:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   3064c:	428b      	cmp	r3, r1
   3064e:	d1eb      	bne.n	30628 <cancel_async_locked+0x4e>
	list->tail = node;
   30650:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   30654:	e7e8      	b.n	30628 <cancel_async_locked+0x4e>
	list->tail = node;
   30656:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   3065a:	e7e5      	b.n	30628 <cancel_async_locked+0x4e>
   3065c:	4770      	bx	lr

0003065e <cancel_delayable_async_locked>:
{
   3065e:	b510      	push	{r4, lr}
   30660:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   30662:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   30664:	f023 0208 	bic.w	r2, r3, #8
   30668:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3066a:	f013 0f08 	tst.w	r3, #8
   3066e:	d103      	bne.n	30678 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   30670:	4620      	mov	r0, r4
   30672:	f7ff ffb2 	bl	305da <cancel_async_locked>
}
   30676:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   30678:	3010      	adds	r0, #16
   3067a:	f7f6 fbfd 	bl	26e78 <z_abort_timeout>
		ret = true;
   3067e:	e7f7      	b.n	30670 <cancel_delayable_async_locked+0x12>

00030680 <thread_active_elsewhere>:
}
   30680:	2000      	movs	r0, #0
   30682:	4770      	bx	lr

00030684 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   30684:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   30688:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3068c:	4283      	cmp	r3, r0
   3068e:	d001      	beq.n	30694 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   30690:	1ac0      	subs	r0, r0, r3
   30692:	4770      	bx	lr
	return 0;
   30694:	2000      	movs	r0, #0
}
   30696:	4770      	bx	lr

00030698 <z_reschedule_irqlock>:
{
   30698:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3069a:	4603      	mov	r3, r0
   3069c:	b920      	cbnz	r0, 306a8 <z_reschedule_irqlock+0x10>
   3069e:	f3ef 8205 	mrs	r2, IPSR
   306a2:	b942      	cbnz	r2, 306b6 <z_reschedule_irqlock+0x1e>
   306a4:	2201      	movs	r2, #1
   306a6:	e000      	b.n	306aa <z_reschedule_irqlock+0x12>
   306a8:	2200      	movs	r2, #0
	if (resched(key)) {
   306aa:	b932      	cbnz	r2, 306ba <z_reschedule_irqlock+0x22>
   306ac:	f383 8811 	msr	BASEPRI, r3
   306b0:	f3bf 8f6f 	isb	sy
}
   306b4:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   306b6:	2200      	movs	r2, #0
   306b8:	e7f7      	b.n	306aa <z_reschedule_irqlock+0x12>
   306ba:	4618      	mov	r0, r3
   306bc:	f7e4 fdbe 	bl	1523c <arch_swap>
	return ret;
   306c0:	e7f8      	b.n	306b4 <z_reschedule_irqlock+0x1c>

000306c2 <z_priq_dumb_best>:
{
   306c2:	4603      	mov	r3, r0
	return list->head == list;
   306c4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   306c6:	4283      	cmp	r3, r0
   306c8:	d000      	beq.n	306cc <z_priq_dumb_best+0xa>
}
   306ca:	4770      	bx	lr
	struct k_thread *thread = NULL;
   306cc:	2000      	movs	r0, #0
	return thread;
   306ce:	e7fc      	b.n	306ca <z_priq_dumb_best+0x8>

000306d0 <z_unpend_all>:
{
   306d0:	b538      	push	{r3, r4, r5, lr}
   306d2:	4605      	mov	r5, r0
	int need_sched = 0;
   306d4:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   306d6:	e006      	b.n	306e6 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   306d8:	4620      	mov	r0, r4
   306da:	f7f5 f8a3 	bl	25824 <z_unpend_thread>
		z_ready_thread(thread);
   306de:	4620      	mov	r0, r4
   306e0:	f7f5 fa8c 	bl	25bfc <z_ready_thread>
		need_sched = 1;
   306e4:	2001      	movs	r0, #1
	return list->head == list;
   306e6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   306e8:	42a5      	cmp	r5, r4
   306ea:	d001      	beq.n	306f0 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   306ec:	2c00      	cmp	r4, #0
   306ee:	d1f3      	bne.n	306d8 <z_unpend_all+0x8>
}
   306f0:	bd38      	pop	{r3, r4, r5, pc}

000306f2 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   306f2:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   306f4:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   306f6:	6083      	str	r3, [r0, #8]
}
   306f8:	4770      	bx	lr

000306fa <remove_timeout>:
{
   306fa:	b538      	push	{r3, r4, r5, lr}
   306fc:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   306fe:	f7f6 fa81 	bl	26c04 <next>
   30702:	b148      	cbz	r0, 30718 <remove_timeout+0x1e>
   30704:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   30706:	6920      	ldr	r0, [r4, #16]
   30708:	6965      	ldr	r5, [r4, #20]
   3070a:	6913      	ldr	r3, [r2, #16]
   3070c:	6951      	ldr	r1, [r2, #20]
   3070e:	181b      	adds	r3, r3, r0
   30710:	eb45 0101 	adc.w	r1, r5, r1
   30714:	6113      	str	r3, [r2, #16]
   30716:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   30718:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   3071a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   3071c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3071e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30720:	2300      	movs	r3, #0
   30722:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   30724:	6063      	str	r3, [r4, #4]
}
   30726:	bd38      	pop	{r3, r4, r5, pc}

00030728 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   30728:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   3072a:	f7f6 fd7f 	bl	2722c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3072e:	bd08      	pop	{r3, pc}

00030730 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   30730:	b900      	cbnz	r0, 30734 <z_impl_k_busy_wait+0x4>
   30732:	4770      	bx	lr
{
   30734:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   30736:	f7e5 fdd9 	bl	162ec <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   3073a:	bd08      	pop	{r3, pc}

0003073c <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   3073c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3073e:	f1b1 3fff 	cmp.w	r1, #4294967295
   30742:	bf08      	it	eq
   30744:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   30748:	d024      	beq.n	30794 <sys_clock_timeout_end_calc+0x58>
   3074a:	4604      	mov	r4, r0
   3074c:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3074e:	ea54 0105 	orrs.w	r1, r4, r5
   30752:	d00d      	beq.n	30770 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   30754:	f06f 0101 	mvn.w	r1, #1
   30758:	1a0a      	subs	r2, r1, r0
   3075a:	f04f 31ff 	mov.w	r1, #4294967295
   3075e:	eb61 0305 	sbc.w	r3, r1, r5
   30762:	2a00      	cmp	r2, #0
   30764:	f173 0100 	sbcs.w	r1, r3, #0
   30768:	db05      	blt.n	30776 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   3076a:	4610      	mov	r0, r2
   3076c:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3076e:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   30770:	f7f6 fd5c 	bl	2722c <sys_clock_tick_get>
   30774:	e7fb      	b.n	3076e <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   30776:	f7f6 fd59 	bl	2722c <sys_clock_tick_get>
   3077a:	4623      	mov	r3, r4
   3077c:	462a      	mov	r2, r5
   3077e:	2c01      	cmp	r4, #1
   30780:	f175 0400 	sbcs.w	r4, r5, #0
   30784:	db03      	blt.n	3078e <sys_clock_timeout_end_calc+0x52>
   30786:	18c0      	adds	r0, r0, r3
   30788:	eb42 0101 	adc.w	r1, r2, r1
   3078c:	e7ef      	b.n	3076e <sys_clock_timeout_end_calc+0x32>
   3078e:	2301      	movs	r3, #1
   30790:	2200      	movs	r2, #0
   30792:	e7f8      	b.n	30786 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   30794:	f04f 30ff 	mov.w	r0, #4294967295
   30798:	4601      	mov	r1, r0
   3079a:	e7e8      	b.n	3076e <sys_clock_timeout_end_calc+0x32>

0003079c <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   3079c:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   3079e:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   307a0:	2300      	movs	r3, #0
   307a2:	6303      	str	r3, [r0, #48]	; 0x30
   307a4:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   307a8:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   307aa:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   307ac:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   307ae:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   307b0:	6343      	str	r3, [r0, #52]	; 0x34
}
   307b2:	4770      	bx	lr

000307b4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   307b4:	b510      	push	{r4, lr}
   307b6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   307b8:	f7f6 fb5e 	bl	26e78 <z_abort_timeout>

	if (inactive) {
   307bc:	b9a0      	cbnz	r0, 307e8 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   307be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   307c0:	b10b      	cbz	r3, 307c6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   307c2:	4620      	mov	r0, r4
   307c4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   307c6:	f104 0018 	add.w	r0, r4, #24
   307ca:	f7f5 fe2d 	bl	26428 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   307ce:	b158      	cbz	r0, 307e8 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   307d0:	f7f5 fa14 	bl	25bfc <z_ready_thread>
	__asm__ volatile(
   307d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   307d8:	f3ef 8011 	mrs	r0, BASEPRI
   307dc:	f383 8812 	msr	BASEPRI_MAX, r3
   307e0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   307e4:	f7ff ff58 	bl	30698 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   307e8:	bd10      	pop	{r4, pc}

000307ea <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   307ea:	b108      	cbz	r0, 307f0 <poller_thread+0x6>
   307ec:	3860      	subs	r0, #96	; 0x60
   307ee:	4770      	bx	lr
}
   307f0:	4770      	bx	lr

000307f2 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   307f2:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   307f4:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   307f6:	7823      	ldrb	r3, [r4, #0]
   307f8:	b173      	cbz	r3, 30818 <signal_triggered_work+0x26>
   307fa:	f854 5c04 	ldr.w	r5, [r4, #-4]
   307fe:	b15d      	cbz	r5, 30818 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   30800:	f1a4 0614 	sub.w	r6, r4, #20
   30804:	f104 0014 	add.w	r0, r4, #20
   30808:	f7f6 fb36 	bl	26e78 <z_abort_timeout>
		twork->poll_result = 0;
   3080c:	2300      	movs	r3, #0
   3080e:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   30810:	4631      	mov	r1, r6
   30812:	4628      	mov	r0, r5
   30814:	f7f4 fad0 	bl	24db8 <k_work_submit_to_queue>
	}

	return 0;
}
   30818:	2000      	movs	r0, #0
   3081a:	bd70      	pop	{r4, r5, r6, pc}

0003081c <signal_poll_event>:
{
   3081c:	b570      	push	{r4, r5, r6, lr}
   3081e:	4604      	mov	r4, r0
   30820:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   30822:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   30824:	b1d6      	cbz	r6, 3085c <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   30826:	7873      	ldrb	r3, [r6, #1]
   30828:	2b01      	cmp	r3, #1
   3082a:	d00d      	beq.n	30848 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   3082c:	2b02      	cmp	r3, #2
   3082e:	d012      	beq.n	30856 <signal_poll_event+0x3a>
		poller->is_polling = false;
   30830:	2000      	movs	r0, #0
   30832:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   30834:	2300      	movs	r3, #0
   30836:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   30838:	68e3      	ldr	r3, [r4, #12]
   3083a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   3083e:	430d      	orrs	r5, r1
   30840:	f365 3352 	bfi	r3, r5, #13, #6
   30844:	60e3      	str	r3, [r4, #12]
}
   30846:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   30848:	f7f6 fe82 	bl	27550 <signal_poller>
		poller->is_polling = false;
   3084c:	2300      	movs	r3, #0
   3084e:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   30850:	4298      	cmp	r0, r3
   30852:	daef      	bge.n	30834 <signal_poll_event+0x18>
   30854:	e7f7      	b.n	30846 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   30856:	f7ff ffcc 	bl	307f2 <signal_triggered_work>
   3085a:	e7f7      	b.n	3084c <signal_poll_event+0x30>
	int retcode = 0;
   3085c:	2000      	movs	r0, #0
   3085e:	e7e9      	b.n	30834 <signal_poll_event+0x18>

00030860 <z_handle_obj_poll_events>:
{
   30860:	b508      	push	{r3, lr}
   30862:	4603      	mov	r3, r0
	return list->head == list;
   30864:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   30866:	4283      	cmp	r3, r0
   30868:	d009      	beq.n	3087e <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   3086a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   3086c:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   3086e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30870:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30872:	2300      	movs	r3, #0
   30874:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   30876:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   30878:	b108      	cbz	r0, 3087e <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   3087a:	f7ff ffcf 	bl	3081c <signal_poll_event>
}
   3087e:	bd08      	pop	{r3, pc}

00030880 <k_free>:
	if (ptr != NULL) {
   30880:	b130      	cbz	r0, 30890 <k_free+0x10>
{
   30882:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   30884:	1f01      	subs	r1, r0, #4
   30886:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3088a:	f7f2 ffd3 	bl	23834 <k_heap_free>
}
   3088e:	bd08      	pop	{r3, pc}
   30890:	4770      	bx	lr

00030892 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   30892:	4770      	bx	lr

00030894 <memcmp>:
   30894:	b530      	push	{r4, r5, lr}
   30896:	3901      	subs	r1, #1
   30898:	2400      	movs	r4, #0
   3089a:	42a2      	cmp	r2, r4
   3089c:	d101      	bne.n	308a2 <memcmp+0xe>
   3089e:	2000      	movs	r0, #0
   308a0:	e005      	b.n	308ae <memcmp+0x1a>
   308a2:	5d03      	ldrb	r3, [r0, r4]
   308a4:	3401      	adds	r4, #1
   308a6:	5d0d      	ldrb	r5, [r1, r4]
   308a8:	42ab      	cmp	r3, r5
   308aa:	d0f6      	beq.n	3089a <memcmp+0x6>
   308ac:	1b58      	subs	r0, r3, r5
   308ae:	bd30      	pop	{r4, r5, pc}

000308b0 <memcpy>:
   308b0:	440a      	add	r2, r1
   308b2:	4291      	cmp	r1, r2
   308b4:	f100 33ff 	add.w	r3, r0, #4294967295
   308b8:	d100      	bne.n	308bc <memcpy+0xc>
   308ba:	4770      	bx	lr
   308bc:	b510      	push	{r4, lr}
   308be:	f811 4b01 	ldrb.w	r4, [r1], #1
   308c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   308c6:	4291      	cmp	r1, r2
   308c8:	d1f9      	bne.n	308be <memcpy+0xe>
   308ca:	bd10      	pop	{r4, pc}

000308cc <memmove>:
   308cc:	4288      	cmp	r0, r1
   308ce:	b510      	push	{r4, lr}
   308d0:	eb01 0402 	add.w	r4, r1, r2
   308d4:	d902      	bls.n	308dc <memmove+0x10>
   308d6:	4284      	cmp	r4, r0
   308d8:	4623      	mov	r3, r4
   308da:	d807      	bhi.n	308ec <memmove+0x20>
   308dc:	1e43      	subs	r3, r0, #1
   308de:	42a1      	cmp	r1, r4
   308e0:	d008      	beq.n	308f4 <memmove+0x28>
   308e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   308e6:	f803 2f01 	strb.w	r2, [r3, #1]!
   308ea:	e7f8      	b.n	308de <memmove+0x12>
   308ec:	4402      	add	r2, r0
   308ee:	4601      	mov	r1, r0
   308f0:	428a      	cmp	r2, r1
   308f2:	d100      	bne.n	308f6 <memmove+0x2a>
   308f4:	bd10      	pop	{r4, pc}
   308f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   308fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   308fe:	e7f7      	b.n	308f0 <memmove+0x24>

00030900 <memset>:
   30900:	4402      	add	r2, r0
   30902:	4603      	mov	r3, r0
   30904:	4293      	cmp	r3, r2
   30906:	d100      	bne.n	3090a <memset+0xa>
   30908:	4770      	bx	lr
   3090a:	f803 1b01 	strb.w	r1, [r3], #1
   3090e:	e7f9      	b.n	30904 <memset+0x4>

00030910 <__cvt>:
   30910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30914:	b088      	sub	sp, #32
   30916:	2b00      	cmp	r3, #0
   30918:	461f      	mov	r7, r3
   3091a:	4614      	mov	r4, r2
   3091c:	bfb8      	it	lt
   3091e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   30922:	9a12      	ldr	r2, [sp, #72]	; 0x48
   30924:	9d10      	ldr	r5, [sp, #64]	; 0x40
   30926:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   3092a:	bfb6      	itet	lt
   3092c:	461f      	movlt	r7, r3
   3092e:	2300      	movge	r3, #0
   30930:	232d      	movlt	r3, #45	; 0x2d
   30932:	7013      	strb	r3, [r2, #0]
   30934:	9b14      	ldr	r3, [sp, #80]	; 0x50
   30936:	f023 0820 	bic.w	r8, r3, #32
   3093a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   3093e:	d005      	beq.n	3094c <__cvt+0x3c>
   30940:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   30944:	d100      	bne.n	30948 <__cvt+0x38>
   30946:	3501      	adds	r5, #1
   30948:	2302      	movs	r3, #2
   3094a:	e000      	b.n	3094e <__cvt+0x3e>
   3094c:	2303      	movs	r3, #3
   3094e:	aa07      	add	r2, sp, #28
   30950:	9204      	str	r2, [sp, #16]
   30952:	aa06      	add	r2, sp, #24
   30954:	e9cd a202 	strd	sl, r2, [sp, #8]
   30958:	e9cd 3500 	strd	r3, r5, [sp]
   3095c:	4622      	mov	r2, r4
   3095e:	463b      	mov	r3, r7
   30960:	f7df fcca 	bl	102f8 <_dtoa_r>
   30964:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   30968:	4606      	mov	r6, r0
   3096a:	d102      	bne.n	30972 <__cvt+0x62>
   3096c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   3096e:	07db      	lsls	r3, r3, #31
   30970:	d522      	bpl.n	309b8 <__cvt+0xa8>
   30972:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   30976:	eb06 0905 	add.w	r9, r6, r5
   3097a:	d110      	bne.n	3099e <__cvt+0x8e>
   3097c:	7833      	ldrb	r3, [r6, #0]
   3097e:	2b30      	cmp	r3, #48	; 0x30
   30980:	d10a      	bne.n	30998 <__cvt+0x88>
   30982:	2200      	movs	r2, #0
   30984:	2300      	movs	r3, #0
   30986:	4620      	mov	r0, r4
   30988:	4639      	mov	r1, r7
   3098a:	f7d0 f9f7 	bl	d7c <__aeabi_dcmpeq>
   3098e:	b918      	cbnz	r0, 30998 <__cvt+0x88>
   30990:	f1c5 0501 	rsb	r5, r5, #1
   30994:	f8ca 5000 	str.w	r5, [sl]
   30998:	f8da 3000 	ldr.w	r3, [sl]
   3099c:	4499      	add	r9, r3
   3099e:	2200      	movs	r2, #0
   309a0:	2300      	movs	r3, #0
   309a2:	4620      	mov	r0, r4
   309a4:	4639      	mov	r1, r7
   309a6:	f7d0 f9e9 	bl	d7c <__aeabi_dcmpeq>
   309aa:	b108      	cbz	r0, 309b0 <__cvt+0xa0>
   309ac:	f8cd 901c 	str.w	r9, [sp, #28]
   309b0:	2230      	movs	r2, #48	; 0x30
   309b2:	9b07      	ldr	r3, [sp, #28]
   309b4:	454b      	cmp	r3, r9
   309b6:	d307      	bcc.n	309c8 <__cvt+0xb8>
   309b8:	9b07      	ldr	r3, [sp, #28]
   309ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
   309bc:	1b9b      	subs	r3, r3, r6
   309be:	4630      	mov	r0, r6
   309c0:	6013      	str	r3, [r2, #0]
   309c2:	b008      	add	sp, #32
   309c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   309c8:	1c59      	adds	r1, r3, #1
   309ca:	9107      	str	r1, [sp, #28]
   309cc:	701a      	strb	r2, [r3, #0]
   309ce:	e7f0      	b.n	309b2 <__cvt+0xa2>

000309d0 <__exponent>:
   309d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   309d2:	4603      	mov	r3, r0
   309d4:	2900      	cmp	r1, #0
   309d6:	bfb8      	it	lt
   309d8:	4249      	neglt	r1, r1
   309da:	f803 2b02 	strb.w	r2, [r3], #2
   309de:	bfb4      	ite	lt
   309e0:	222d      	movlt	r2, #45	; 0x2d
   309e2:	222b      	movge	r2, #43	; 0x2b
   309e4:	2909      	cmp	r1, #9
   309e6:	7042      	strb	r2, [r0, #1]
   309e8:	dd2a      	ble.n	30a40 <__exponent+0x70>
   309ea:	f10d 0407 	add.w	r4, sp, #7
   309ee:	46a4      	mov	ip, r4
   309f0:	270a      	movs	r7, #10
   309f2:	46a6      	mov	lr, r4
   309f4:	460a      	mov	r2, r1
   309f6:	fb91 f6f7 	sdiv	r6, r1, r7
   309fa:	fb07 1516 	mls	r5, r7, r6, r1
   309fe:	3530      	adds	r5, #48	; 0x30
   30a00:	2a63      	cmp	r2, #99	; 0x63
   30a02:	f104 34ff 	add.w	r4, r4, #4294967295
   30a06:	f80e 5c01 	strb.w	r5, [lr, #-1]
   30a0a:	4631      	mov	r1, r6
   30a0c:	dcf1      	bgt.n	309f2 <__exponent+0x22>
   30a0e:	3130      	adds	r1, #48	; 0x30
   30a10:	f1ae 0502 	sub.w	r5, lr, #2
   30a14:	f804 1c01 	strb.w	r1, [r4, #-1]
   30a18:	1c44      	adds	r4, r0, #1
   30a1a:	4629      	mov	r1, r5
   30a1c:	4561      	cmp	r1, ip
   30a1e:	d30a      	bcc.n	30a36 <__exponent+0x66>
   30a20:	f10d 0209 	add.w	r2, sp, #9
   30a24:	eba2 020e 	sub.w	r2, r2, lr
   30a28:	4565      	cmp	r5, ip
   30a2a:	bf88      	it	hi
   30a2c:	2200      	movhi	r2, #0
   30a2e:	4413      	add	r3, r2
   30a30:	1a18      	subs	r0, r3, r0
   30a32:	b003      	add	sp, #12
   30a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30a36:	f811 2b01 	ldrb.w	r2, [r1], #1
   30a3a:	f804 2f01 	strb.w	r2, [r4, #1]!
   30a3e:	e7ed      	b.n	30a1c <__exponent+0x4c>
   30a40:	2330      	movs	r3, #48	; 0x30
   30a42:	3130      	adds	r1, #48	; 0x30
   30a44:	7083      	strb	r3, [r0, #2]
   30a46:	70c1      	strb	r1, [r0, #3]
   30a48:	1d03      	adds	r3, r0, #4
   30a4a:	e7f1      	b.n	30a30 <__exponent+0x60>

00030a4c <_printf_common>:
   30a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30a50:	4616      	mov	r6, r2
   30a52:	4699      	mov	r9, r3
   30a54:	688a      	ldr	r2, [r1, #8]
   30a56:	690b      	ldr	r3, [r1, #16]
   30a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
   30a5c:	4293      	cmp	r3, r2
   30a5e:	bfb8      	it	lt
   30a60:	4613      	movlt	r3, r2
   30a62:	6033      	str	r3, [r6, #0]
   30a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   30a68:	4607      	mov	r7, r0
   30a6a:	460c      	mov	r4, r1
   30a6c:	b10a      	cbz	r2, 30a72 <_printf_common+0x26>
   30a6e:	3301      	adds	r3, #1
   30a70:	6033      	str	r3, [r6, #0]
   30a72:	6823      	ldr	r3, [r4, #0]
   30a74:	0699      	lsls	r1, r3, #26
   30a76:	bf42      	ittt	mi
   30a78:	6833      	ldrmi	r3, [r6, #0]
   30a7a:	3302      	addmi	r3, #2
   30a7c:	6033      	strmi	r3, [r6, #0]
   30a7e:	6825      	ldr	r5, [r4, #0]
   30a80:	f015 0506 	ands.w	r5, r5, #6
   30a84:	d106      	bne.n	30a94 <_printf_common+0x48>
   30a86:	f104 0a19 	add.w	sl, r4, #25
   30a8a:	68e3      	ldr	r3, [r4, #12]
   30a8c:	6832      	ldr	r2, [r6, #0]
   30a8e:	1a9b      	subs	r3, r3, r2
   30a90:	42ab      	cmp	r3, r5
   30a92:	dc26      	bgt.n	30ae2 <_printf_common+0x96>
   30a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   30a98:	1e13      	subs	r3, r2, #0
   30a9a:	6822      	ldr	r2, [r4, #0]
   30a9c:	bf18      	it	ne
   30a9e:	2301      	movne	r3, #1
   30aa0:	0692      	lsls	r2, r2, #26
   30aa2:	d42b      	bmi.n	30afc <_printf_common+0xb0>
   30aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   30aa8:	4649      	mov	r1, r9
   30aaa:	4638      	mov	r0, r7
   30aac:	47c0      	blx	r8
   30aae:	3001      	adds	r0, #1
   30ab0:	d01e      	beq.n	30af0 <_printf_common+0xa4>
   30ab2:	6823      	ldr	r3, [r4, #0]
   30ab4:	68e5      	ldr	r5, [r4, #12]
   30ab6:	6832      	ldr	r2, [r6, #0]
   30ab8:	f003 0306 	and.w	r3, r3, #6
   30abc:	2b04      	cmp	r3, #4
   30abe:	bf08      	it	eq
   30ac0:	1aad      	subeq	r5, r5, r2
   30ac2:	68a3      	ldr	r3, [r4, #8]
   30ac4:	6922      	ldr	r2, [r4, #16]
   30ac6:	bf0c      	ite	eq
   30ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   30acc:	2500      	movne	r5, #0
   30ace:	4293      	cmp	r3, r2
   30ad0:	bfc4      	itt	gt
   30ad2:	1a9b      	subgt	r3, r3, r2
   30ad4:	18ed      	addgt	r5, r5, r3
   30ad6:	2600      	movs	r6, #0
   30ad8:	341a      	adds	r4, #26
   30ada:	42b5      	cmp	r5, r6
   30adc:	d11a      	bne.n	30b14 <_printf_common+0xc8>
   30ade:	2000      	movs	r0, #0
   30ae0:	e008      	b.n	30af4 <_printf_common+0xa8>
   30ae2:	2301      	movs	r3, #1
   30ae4:	4652      	mov	r2, sl
   30ae6:	4649      	mov	r1, r9
   30ae8:	4638      	mov	r0, r7
   30aea:	47c0      	blx	r8
   30aec:	3001      	adds	r0, #1
   30aee:	d103      	bne.n	30af8 <_printf_common+0xac>
   30af0:	f04f 30ff 	mov.w	r0, #4294967295
   30af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30af8:	3501      	adds	r5, #1
   30afa:	e7c6      	b.n	30a8a <_printf_common+0x3e>
   30afc:	18e1      	adds	r1, r4, r3
   30afe:	1c5a      	adds	r2, r3, #1
   30b00:	2030      	movs	r0, #48	; 0x30
   30b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   30b06:	4422      	add	r2, r4
   30b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   30b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   30b10:	3302      	adds	r3, #2
   30b12:	e7c7      	b.n	30aa4 <_printf_common+0x58>
   30b14:	2301      	movs	r3, #1
   30b16:	4622      	mov	r2, r4
   30b18:	4649      	mov	r1, r9
   30b1a:	4638      	mov	r0, r7
   30b1c:	47c0      	blx	r8
   30b1e:	3001      	adds	r0, #1
   30b20:	d0e6      	beq.n	30af0 <_printf_common+0xa4>
   30b22:	3601      	adds	r6, #1
   30b24:	e7d9      	b.n	30ada <_printf_common+0x8e>

00030b26 <__sprintf_chk>:
   30b26:	b408      	push	{r3}
   30b28:	b517      	push	{r0, r1, r2, r4, lr}
   30b2a:	ab05      	add	r3, sp, #20
   30b2c:	1e14      	subs	r4, r2, #0
   30b2e:	f853 1b04 	ldr.w	r1, [r3], #4
   30b32:	9301      	str	r3, [sp, #4]
   30b34:	da07      	bge.n	30b46 <__sprintf_chk+0x20>
   30b36:	461a      	mov	r2, r3
   30b38:	f7fa fcee 	bl	2b518 <vsiprintf>
   30b3c:	b003      	add	sp, #12
   30b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30b42:	b001      	add	sp, #4
   30b44:	4770      	bx	lr
   30b46:	460a      	mov	r2, r1
   30b48:	4621      	mov	r1, r4
   30b4a:	f7fa fcc1 	bl	2b4d0 <vsniprintf>
   30b4e:	2800      	cmp	r0, #0
   30b50:	dbf4      	blt.n	30b3c <__sprintf_chk+0x16>
   30b52:	42a0      	cmp	r0, r4
   30b54:	d3f2      	bcc.n	30b3c <__sprintf_chk+0x16>
   30b56:	f7e5 fb6d 	bl	16234 <__chk_fail>

00030b5a <strcpy>:
   30b5a:	4603      	mov	r3, r0
   30b5c:	f811 2b01 	ldrb.w	r2, [r1], #1
   30b60:	f803 2b01 	strb.w	r2, [r3], #1
   30b64:	2a00      	cmp	r2, #0
   30b66:	d1f9      	bne.n	30b5c <strcpy+0x2>
   30b68:	4770      	bx	lr

00030b6a <__strcpy_chk>:
   30b6a:	b570      	push	{r4, r5, r6, lr}
   30b6c:	4605      	mov	r5, r0
   30b6e:	4608      	mov	r0, r1
   30b70:	4616      	mov	r6, r2
   30b72:	460c      	mov	r4, r1
   30b74:	f7db fab2 	bl	c0dc <strlen>
   30b78:	1c42      	adds	r2, r0, #1
   30b7a:	42b2      	cmp	r2, r6
   30b7c:	d901      	bls.n	30b82 <__strcpy_chk+0x18>
   30b7e:	f7e5 fb59 	bl	16234 <__chk_fail>
   30b82:	42ac      	cmp	r4, r5
   30b84:	d804      	bhi.n	30b90 <__strcpy_chk+0x26>
   30b86:	18a3      	adds	r3, r4, r2
   30b88:	429d      	cmp	r5, r3
   30b8a:	d3f8      	bcc.n	30b7e <__strcpy_chk+0x14>
   30b8c:	42ac      	cmp	r4, r5
   30b8e:	d102      	bne.n	30b96 <__strcpy_chk+0x2c>
   30b90:	18ab      	adds	r3, r5, r2
   30b92:	429c      	cmp	r4, r3
   30b94:	d3f3      	bcc.n	30b7e <__strcpy_chk+0x14>
   30b96:	4621      	mov	r1, r4
   30b98:	4628      	mov	r0, r5
   30b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30b9e:	f7ff be87 	b.w	308b0 <memcpy>

00030ba2 <strncpy>:
   30ba2:	b510      	push	{r4, lr}
   30ba4:	3901      	subs	r1, #1
   30ba6:	4603      	mov	r3, r0
   30ba8:	b132      	cbz	r2, 30bb8 <strncpy+0x16>
   30baa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   30bae:	f803 4b01 	strb.w	r4, [r3], #1
   30bb2:	3a01      	subs	r2, #1
   30bb4:	2c00      	cmp	r4, #0
   30bb6:	d1f7      	bne.n	30ba8 <strncpy+0x6>
   30bb8:	441a      	add	r2, r3
   30bba:	2100      	movs	r1, #0
   30bbc:	4293      	cmp	r3, r2
   30bbe:	d100      	bne.n	30bc2 <strncpy+0x20>
   30bc0:	bd10      	pop	{r4, pc}
   30bc2:	f803 1b01 	strb.w	r1, [r3], #1
   30bc6:	e7f9      	b.n	30bbc <strncpy+0x1a>

00030bc8 <strnlen>:
   30bc8:	b510      	push	{r4, lr}
   30bca:	4602      	mov	r2, r0
   30bcc:	4401      	add	r1, r0
   30bce:	428a      	cmp	r2, r1
   30bd0:	4613      	mov	r3, r2
   30bd2:	d101      	bne.n	30bd8 <strnlen+0x10>
   30bd4:	1a18      	subs	r0, r3, r0
   30bd6:	bd10      	pop	{r4, pc}
   30bd8:	781c      	ldrb	r4, [r3, #0]
   30bda:	3201      	adds	r2, #1
   30bdc:	2c00      	cmp	r4, #0
   30bde:	d1f6      	bne.n	30bce <strnlen+0x6>
   30be0:	e7f8      	b.n	30bd4 <strnlen+0xc>

00030be2 <_vsniprintf_r>:
   30be2:	b530      	push	{r4, r5, lr}
   30be4:	1e14      	subs	r4, r2, #0
   30be6:	4605      	mov	r5, r0
   30be8:	b09b      	sub	sp, #108	; 0x6c
   30bea:	4618      	mov	r0, r3
   30bec:	da05      	bge.n	30bfa <_vsniprintf_r+0x18>
   30bee:	238b      	movs	r3, #139	; 0x8b
   30bf0:	602b      	str	r3, [r5, #0]
   30bf2:	f04f 30ff 	mov.w	r0, #4294967295
   30bf6:	b01b      	add	sp, #108	; 0x6c
   30bf8:	bd30      	pop	{r4, r5, pc}
   30bfa:	f44f 7302 	mov.w	r3, #520	; 0x208
   30bfe:	f8ad 300c 	strh.w	r3, [sp, #12]
   30c02:	bf14      	ite	ne
   30c04:	f104 33ff 	addne.w	r3, r4, #4294967295
   30c08:	4623      	moveq	r3, r4
   30c0a:	9302      	str	r3, [sp, #8]
   30c0c:	9305      	str	r3, [sp, #20]
   30c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   30c12:	9100      	str	r1, [sp, #0]
   30c14:	9104      	str	r1, [sp, #16]
   30c16:	f8ad 300e 	strh.w	r3, [sp, #14]
   30c1a:	4602      	mov	r2, r0
   30c1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   30c1e:	4669      	mov	r1, sp
   30c20:	4628      	mov	r0, r5
   30c22:	f7fa fda1 	bl	2b768 <_svfiprintf_r>
   30c26:	1c43      	adds	r3, r0, #1
   30c28:	bfbc      	itt	lt
   30c2a:	238b      	movlt	r3, #139	; 0x8b
   30c2c:	602b      	strlt	r3, [r5, #0]
   30c2e:	2c00      	cmp	r4, #0
   30c30:	d0e1      	beq.n	30bf6 <_vsniprintf_r+0x14>
   30c32:	9b00      	ldr	r3, [sp, #0]
   30c34:	2200      	movs	r2, #0
   30c36:	701a      	strb	r2, [r3, #0]
   30c38:	e7dd      	b.n	30bf6 <_vsniprintf_r+0x14>

00030c3a <quorem>:
   30c3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30c3e:	6903      	ldr	r3, [r0, #16]
   30c40:	690c      	ldr	r4, [r1, #16]
   30c42:	42a3      	cmp	r3, r4
   30c44:	4607      	mov	r7, r0
   30c46:	f2c0 8081 	blt.w	30d4c <quorem+0x112>
   30c4a:	3c01      	subs	r4, #1
   30c4c:	f101 0814 	add.w	r8, r1, #20
   30c50:	f100 0514 	add.w	r5, r0, #20
   30c54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   30c58:	9301      	str	r3, [sp, #4]
   30c5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   30c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   30c62:	3301      	adds	r3, #1
   30c64:	429a      	cmp	r2, r3
   30c66:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   30c6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   30c6e:	fbb2 f6f3 	udiv	r6, r2, r3
   30c72:	d331      	bcc.n	30cd8 <quorem+0x9e>
   30c74:	f04f 0e00 	mov.w	lr, #0
   30c78:	4640      	mov	r0, r8
   30c7a:	46ac      	mov	ip, r5
   30c7c:	46f2      	mov	sl, lr
   30c7e:	f850 2b04 	ldr.w	r2, [r0], #4
   30c82:	b293      	uxth	r3, r2
   30c84:	fb06 e303 	mla	r3, r6, r3, lr
   30c88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   30c8c:	b29b      	uxth	r3, r3
   30c8e:	ebaa 0303 	sub.w	r3, sl, r3
   30c92:	0c12      	lsrs	r2, r2, #16
   30c94:	f8dc a000 	ldr.w	sl, [ip]
   30c98:	fb06 e202 	mla	r2, r6, r2, lr
   30c9c:	fa13 f38a 	uxtah	r3, r3, sl
   30ca0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   30ca4:	fa1f fa82 	uxth.w	sl, r2
   30ca8:	f8dc 2000 	ldr.w	r2, [ip]
   30cac:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   30cb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   30cb4:	b29b      	uxth	r3, r3
   30cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   30cba:	4581      	cmp	r9, r0
   30cbc:	f84c 3b04 	str.w	r3, [ip], #4
   30cc0:	ea4f 4a22 	mov.w	sl, r2, asr #16
   30cc4:	d2db      	bcs.n	30c7e <quorem+0x44>
   30cc6:	f855 300b 	ldr.w	r3, [r5, fp]
   30cca:	b92b      	cbnz	r3, 30cd8 <quorem+0x9e>
   30ccc:	9b01      	ldr	r3, [sp, #4]
   30cce:	3b04      	subs	r3, #4
   30cd0:	429d      	cmp	r5, r3
   30cd2:	461a      	mov	r2, r3
   30cd4:	d32e      	bcc.n	30d34 <quorem+0xfa>
   30cd6:	613c      	str	r4, [r7, #16]
   30cd8:	4638      	mov	r0, r7
   30cda:	f000 fa49 	bl	31170 <__mcmp>
   30cde:	2800      	cmp	r0, #0
   30ce0:	db24      	blt.n	30d2c <quorem+0xf2>
   30ce2:	3601      	adds	r6, #1
   30ce4:	4628      	mov	r0, r5
   30ce6:	f04f 0c00 	mov.w	ip, #0
   30cea:	f858 2b04 	ldr.w	r2, [r8], #4
   30cee:	f8d0 e000 	ldr.w	lr, [r0]
   30cf2:	b293      	uxth	r3, r2
   30cf4:	ebac 0303 	sub.w	r3, ip, r3
   30cf8:	0c12      	lsrs	r2, r2, #16
   30cfa:	fa13 f38e 	uxtah	r3, r3, lr
   30cfe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   30d02:	eb02 4223 	add.w	r2, r2, r3, asr #16
   30d06:	b29b      	uxth	r3, r3
   30d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   30d0c:	45c1      	cmp	r9, r8
   30d0e:	f840 3b04 	str.w	r3, [r0], #4
   30d12:	ea4f 4c22 	mov.w	ip, r2, asr #16
   30d16:	d2e8      	bcs.n	30cea <quorem+0xb0>
   30d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   30d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   30d20:	b922      	cbnz	r2, 30d2c <quorem+0xf2>
   30d22:	3b04      	subs	r3, #4
   30d24:	429d      	cmp	r5, r3
   30d26:	461a      	mov	r2, r3
   30d28:	d30a      	bcc.n	30d40 <quorem+0x106>
   30d2a:	613c      	str	r4, [r7, #16]
   30d2c:	4630      	mov	r0, r6
   30d2e:	b003      	add	sp, #12
   30d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d34:	6812      	ldr	r2, [r2, #0]
   30d36:	3b04      	subs	r3, #4
   30d38:	2a00      	cmp	r2, #0
   30d3a:	d1cc      	bne.n	30cd6 <quorem+0x9c>
   30d3c:	3c01      	subs	r4, #1
   30d3e:	e7c7      	b.n	30cd0 <quorem+0x96>
   30d40:	6812      	ldr	r2, [r2, #0]
   30d42:	3b04      	subs	r3, #4
   30d44:	2a00      	cmp	r2, #0
   30d46:	d1f0      	bne.n	30d2a <quorem+0xf0>
   30d48:	3c01      	subs	r4, #1
   30d4a:	e7eb      	b.n	30d24 <quorem+0xea>
   30d4c:	2000      	movs	r0, #0
   30d4e:	e7ee      	b.n	30d2e <quorem+0xf4>

00030d50 <__sfmoreglue>:
   30d50:	b570      	push	{r4, r5, r6, lr}
   30d52:	1e4a      	subs	r2, r1, #1
   30d54:	2568      	movs	r5, #104	; 0x68
   30d56:	4355      	muls	r5, r2
   30d58:	460e      	mov	r6, r1
   30d5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   30d5e:	f7f9 ffe5 	bl	2ad2c <_malloc_r>
   30d62:	4604      	mov	r4, r0
   30d64:	b140      	cbz	r0, 30d78 <__sfmoreglue+0x28>
   30d66:	2100      	movs	r1, #0
   30d68:	e9c0 1600 	strd	r1, r6, [r0]
   30d6c:	300c      	adds	r0, #12
   30d6e:	60a0      	str	r0, [r4, #8]
   30d70:	f105 0268 	add.w	r2, r5, #104	; 0x68
   30d74:	f7ff fdc4 	bl	30900 <memset>
   30d78:	4620      	mov	r0, r4
   30d7a:	bd70      	pop	{r4, r5, r6, pc}

00030d7c <_fwalk_reent>:
   30d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30d80:	4606      	mov	r6, r0
   30d82:	4688      	mov	r8, r1
   30d84:	f100 0448 	add.w	r4, r0, #72	; 0x48
   30d88:	2700      	movs	r7, #0
   30d8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   30d8e:	f1b9 0901 	subs.w	r9, r9, #1
   30d92:	d505      	bpl.n	30da0 <_fwalk_reent+0x24>
   30d94:	6824      	ldr	r4, [r4, #0]
   30d96:	2c00      	cmp	r4, #0
   30d98:	d1f7      	bne.n	30d8a <_fwalk_reent+0xe>
   30d9a:	4638      	mov	r0, r7
   30d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30da0:	89ab      	ldrh	r3, [r5, #12]
   30da2:	2b01      	cmp	r3, #1
   30da4:	d907      	bls.n	30db6 <_fwalk_reent+0x3a>
   30da6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   30daa:	3301      	adds	r3, #1
   30dac:	d003      	beq.n	30db6 <_fwalk_reent+0x3a>
   30dae:	4629      	mov	r1, r5
   30db0:	4630      	mov	r0, r6
   30db2:	47c0      	blx	r8
   30db4:	4307      	orrs	r7, r0
   30db6:	3568      	adds	r5, #104	; 0x68
   30db8:	e7e9      	b.n	30d8e <_fwalk_reent+0x12>

00030dba <_Balloc>:
   30dba:	b570      	push	{r4, r5, r6, lr}
   30dbc:	6a46      	ldr	r6, [r0, #36]	; 0x24
   30dbe:	4604      	mov	r4, r0
   30dc0:	460d      	mov	r5, r1
   30dc2:	b93e      	cbnz	r6, 30dd4 <_Balloc+0x1a>
   30dc4:	2010      	movs	r0, #16
   30dc6:	f7f9 ff5b 	bl	2ac80 <malloc>
   30dca:	e9c0 6601 	strd	r6, r6, [r0, #4]
   30dce:	6260      	str	r0, [r4, #36]	; 0x24
   30dd0:	6006      	str	r6, [r0, #0]
   30dd2:	60c6      	str	r6, [r0, #12]
   30dd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   30dd6:	68f3      	ldr	r3, [r6, #12]
   30dd8:	b183      	cbz	r3, 30dfc <_Balloc+0x42>
   30dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30ddc:	68db      	ldr	r3, [r3, #12]
   30dde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   30de2:	b9b8      	cbnz	r0, 30e14 <_Balloc+0x5a>
   30de4:	2101      	movs	r1, #1
   30de6:	fa01 f605 	lsl.w	r6, r1, r5
   30dea:	1d72      	adds	r2, r6, #5
   30dec:	0092      	lsls	r2, r2, #2
   30dee:	4620      	mov	r0, r4
   30df0:	f000 fa9e 	bl	31330 <_calloc_r>
   30df4:	b160      	cbz	r0, 30e10 <_Balloc+0x56>
   30df6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   30dfa:	e00e      	b.n	30e1a <_Balloc+0x60>
   30dfc:	2221      	movs	r2, #33	; 0x21
   30dfe:	2104      	movs	r1, #4
   30e00:	4620      	mov	r0, r4
   30e02:	f000 fa95 	bl	31330 <_calloc_r>
   30e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30e08:	60f0      	str	r0, [r6, #12]
   30e0a:	68db      	ldr	r3, [r3, #12]
   30e0c:	2b00      	cmp	r3, #0
   30e0e:	d1e4      	bne.n	30dda <_Balloc+0x20>
   30e10:	2000      	movs	r0, #0
   30e12:	bd70      	pop	{r4, r5, r6, pc}
   30e14:	6802      	ldr	r2, [r0, #0]
   30e16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   30e1a:	2300      	movs	r3, #0
   30e1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   30e20:	e7f7      	b.n	30e12 <_Balloc+0x58>

00030e22 <_Bfree>:
   30e22:	b570      	push	{r4, r5, r6, lr}
   30e24:	6a46      	ldr	r6, [r0, #36]	; 0x24
   30e26:	4605      	mov	r5, r0
   30e28:	460c      	mov	r4, r1
   30e2a:	b93e      	cbnz	r6, 30e3c <_Bfree+0x1a>
   30e2c:	2010      	movs	r0, #16
   30e2e:	f7f9 ff27 	bl	2ac80 <malloc>
   30e32:	e9c0 6601 	strd	r6, r6, [r0, #4]
   30e36:	6268      	str	r0, [r5, #36]	; 0x24
   30e38:	6006      	str	r6, [r0, #0]
   30e3a:	60c6      	str	r6, [r0, #12]
   30e3c:	b13c      	cbz	r4, 30e4e <_Bfree+0x2c>
   30e3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   30e40:	6862      	ldr	r2, [r4, #4]
   30e42:	68db      	ldr	r3, [r3, #12]
   30e44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   30e48:	6021      	str	r1, [r4, #0]
   30e4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   30e4e:	bd70      	pop	{r4, r5, r6, pc}

00030e50 <__multadd>:
   30e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30e54:	690e      	ldr	r6, [r1, #16]
   30e56:	4607      	mov	r7, r0
   30e58:	4698      	mov	r8, r3
   30e5a:	460c      	mov	r4, r1
   30e5c:	f101 0014 	add.w	r0, r1, #20
   30e60:	2300      	movs	r3, #0
   30e62:	6805      	ldr	r5, [r0, #0]
   30e64:	b2a9      	uxth	r1, r5
   30e66:	fb02 8101 	mla	r1, r2, r1, r8
   30e6a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   30e6e:	0c2d      	lsrs	r5, r5, #16
   30e70:	fb02 c505 	mla	r5, r2, r5, ip
   30e74:	b289      	uxth	r1, r1
   30e76:	3301      	adds	r3, #1
   30e78:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   30e7c:	429e      	cmp	r6, r3
   30e7e:	f840 1b04 	str.w	r1, [r0], #4
   30e82:	ea4f 4815 	mov.w	r8, r5, lsr #16
   30e86:	dcec      	bgt.n	30e62 <__multadd+0x12>
   30e88:	f1b8 0f00 	cmp.w	r8, #0
   30e8c:	d01b      	beq.n	30ec6 <__multadd+0x76>
   30e8e:	68a3      	ldr	r3, [r4, #8]
   30e90:	42b3      	cmp	r3, r6
   30e92:	dc12      	bgt.n	30eba <__multadd+0x6a>
   30e94:	6861      	ldr	r1, [r4, #4]
   30e96:	4638      	mov	r0, r7
   30e98:	3101      	adds	r1, #1
   30e9a:	f7ff ff8e 	bl	30dba <_Balloc>
   30e9e:	6922      	ldr	r2, [r4, #16]
   30ea0:	3202      	adds	r2, #2
   30ea2:	f104 010c 	add.w	r1, r4, #12
   30ea6:	4605      	mov	r5, r0
   30ea8:	0092      	lsls	r2, r2, #2
   30eaa:	300c      	adds	r0, #12
   30eac:	f7ff fd00 	bl	308b0 <memcpy>
   30eb0:	4621      	mov	r1, r4
   30eb2:	4638      	mov	r0, r7
   30eb4:	f7ff ffb5 	bl	30e22 <_Bfree>
   30eb8:	462c      	mov	r4, r5
   30eba:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   30ebe:	3601      	adds	r6, #1
   30ec0:	f8c3 8014 	str.w	r8, [r3, #20]
   30ec4:	6126      	str	r6, [r4, #16]
   30ec6:	4620      	mov	r0, r4
   30ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030ecc <__hi0bits>:
   30ecc:	0c02      	lsrs	r2, r0, #16
   30ece:	0412      	lsls	r2, r2, #16
   30ed0:	4603      	mov	r3, r0
   30ed2:	b9ca      	cbnz	r2, 30f08 <__hi0bits+0x3c>
   30ed4:	0403      	lsls	r3, r0, #16
   30ed6:	2010      	movs	r0, #16
   30ed8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   30edc:	bf04      	itt	eq
   30ede:	021b      	lsleq	r3, r3, #8
   30ee0:	3008      	addeq	r0, #8
   30ee2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   30ee6:	bf04      	itt	eq
   30ee8:	011b      	lsleq	r3, r3, #4
   30eea:	3004      	addeq	r0, #4
   30eec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   30ef0:	bf04      	itt	eq
   30ef2:	009b      	lsleq	r3, r3, #2
   30ef4:	3002      	addeq	r0, #2
   30ef6:	2b00      	cmp	r3, #0
   30ef8:	db05      	blt.n	30f06 <__hi0bits+0x3a>
   30efa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   30efe:	f100 0001 	add.w	r0, r0, #1
   30f02:	bf08      	it	eq
   30f04:	2020      	moveq	r0, #32
   30f06:	4770      	bx	lr
   30f08:	2000      	movs	r0, #0
   30f0a:	e7e5      	b.n	30ed8 <__hi0bits+0xc>

00030f0c <__lo0bits>:
   30f0c:	6803      	ldr	r3, [r0, #0]
   30f0e:	4602      	mov	r2, r0
   30f10:	f013 0007 	ands.w	r0, r3, #7
   30f14:	d00b      	beq.n	30f2e <__lo0bits+0x22>
   30f16:	07d9      	lsls	r1, r3, #31
   30f18:	d422      	bmi.n	30f60 <__lo0bits+0x54>
   30f1a:	0798      	lsls	r0, r3, #30
   30f1c:	bf49      	itett	mi
   30f1e:	085b      	lsrmi	r3, r3, #1
   30f20:	089b      	lsrpl	r3, r3, #2
   30f22:	2001      	movmi	r0, #1
   30f24:	6013      	strmi	r3, [r2, #0]
   30f26:	bf5c      	itt	pl
   30f28:	6013      	strpl	r3, [r2, #0]
   30f2a:	2002      	movpl	r0, #2
   30f2c:	4770      	bx	lr
   30f2e:	b299      	uxth	r1, r3
   30f30:	b909      	cbnz	r1, 30f36 <__lo0bits+0x2a>
   30f32:	0c1b      	lsrs	r3, r3, #16
   30f34:	2010      	movs	r0, #16
   30f36:	f013 0fff 	tst.w	r3, #255	; 0xff
   30f3a:	bf04      	itt	eq
   30f3c:	0a1b      	lsreq	r3, r3, #8
   30f3e:	3008      	addeq	r0, #8
   30f40:	0719      	lsls	r1, r3, #28
   30f42:	bf04      	itt	eq
   30f44:	091b      	lsreq	r3, r3, #4
   30f46:	3004      	addeq	r0, #4
   30f48:	0799      	lsls	r1, r3, #30
   30f4a:	bf04      	itt	eq
   30f4c:	089b      	lsreq	r3, r3, #2
   30f4e:	3002      	addeq	r0, #2
   30f50:	07d9      	lsls	r1, r3, #31
   30f52:	d403      	bmi.n	30f5c <__lo0bits+0x50>
   30f54:	085b      	lsrs	r3, r3, #1
   30f56:	f100 0001 	add.w	r0, r0, #1
   30f5a:	d003      	beq.n	30f64 <__lo0bits+0x58>
   30f5c:	6013      	str	r3, [r2, #0]
   30f5e:	4770      	bx	lr
   30f60:	2000      	movs	r0, #0
   30f62:	4770      	bx	lr
   30f64:	2020      	movs	r0, #32
   30f66:	4770      	bx	lr

00030f68 <__i2b>:
   30f68:	b510      	push	{r4, lr}
   30f6a:	460c      	mov	r4, r1
   30f6c:	2101      	movs	r1, #1
   30f6e:	f7ff ff24 	bl	30dba <_Balloc>
   30f72:	2201      	movs	r2, #1
   30f74:	6144      	str	r4, [r0, #20]
   30f76:	6102      	str	r2, [r0, #16]
   30f78:	bd10      	pop	{r4, pc}

00030f7a <__multiply>:
   30f7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30f7e:	4615      	mov	r5, r2
   30f80:	690a      	ldr	r2, [r1, #16]
   30f82:	692b      	ldr	r3, [r5, #16]
   30f84:	429a      	cmp	r2, r3
   30f86:	bfb8      	it	lt
   30f88:	460b      	movlt	r3, r1
   30f8a:	460c      	mov	r4, r1
   30f8c:	bfbc      	itt	lt
   30f8e:	462c      	movlt	r4, r5
   30f90:	461d      	movlt	r5, r3
   30f92:	6927      	ldr	r7, [r4, #16]
   30f94:	f8d5 9010 	ldr.w	r9, [r5, #16]
   30f98:	68a3      	ldr	r3, [r4, #8]
   30f9a:	6861      	ldr	r1, [r4, #4]
   30f9c:	eb07 0609 	add.w	r6, r7, r9
   30fa0:	42b3      	cmp	r3, r6
   30fa2:	bfb8      	it	lt
   30fa4:	3101      	addlt	r1, #1
   30fa6:	b085      	sub	sp, #20
   30fa8:	f7ff ff07 	bl	30dba <_Balloc>
   30fac:	f100 0114 	add.w	r1, r0, #20
   30fb0:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   30fb4:	460b      	mov	r3, r1
   30fb6:	2200      	movs	r2, #0
   30fb8:	4543      	cmp	r3, r8
   30fba:	d31d      	bcc.n	30ff8 <__multiply+0x7e>
   30fbc:	f104 0314 	add.w	r3, r4, #20
   30fc0:	f105 0214 	add.w	r2, r5, #20
   30fc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   30fc8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   30fcc:	9302      	str	r3, [sp, #8]
   30fce:	1b3b      	subs	r3, r7, r4
   30fd0:	3b15      	subs	r3, #21
   30fd2:	f023 0303 	bic.w	r3, r3, #3
   30fd6:	3304      	adds	r3, #4
   30fd8:	f104 0515 	add.w	r5, r4, #21
   30fdc:	42af      	cmp	r7, r5
   30fde:	bf38      	it	cc
   30fe0:	2304      	movcc	r3, #4
   30fe2:	9301      	str	r3, [sp, #4]
   30fe4:	9b02      	ldr	r3, [sp, #8]
   30fe6:	9203      	str	r2, [sp, #12]
   30fe8:	4293      	cmp	r3, r2
   30fea:	d808      	bhi.n	30ffe <__multiply+0x84>
   30fec:	2e00      	cmp	r6, #0
   30fee:	dc5a      	bgt.n	310a6 <__multiply+0x12c>
   30ff0:	6106      	str	r6, [r0, #16]
   30ff2:	b005      	add	sp, #20
   30ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30ff8:	f843 2b04 	str.w	r2, [r3], #4
   30ffc:	e7dc      	b.n	30fb8 <__multiply+0x3e>
   30ffe:	f8b2 a000 	ldrh.w	sl, [r2]
   31002:	f1ba 0f00 	cmp.w	sl, #0
   31006:	d024      	beq.n	31052 <__multiply+0xd8>
   31008:	f104 0e14 	add.w	lr, r4, #20
   3100c:	4689      	mov	r9, r1
   3100e:	f04f 0c00 	mov.w	ip, #0
   31012:	f85e 5b04 	ldr.w	r5, [lr], #4
   31016:	f8d9 b000 	ldr.w	fp, [r9]
   3101a:	b2ab      	uxth	r3, r5
   3101c:	fa1f fb8b 	uxth.w	fp, fp
   31020:	fb0a b303 	mla	r3, sl, r3, fp
   31024:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   31028:	f8d9 5000 	ldr.w	r5, [r9]
   3102c:	4463      	add	r3, ip
   3102e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   31032:	fb0a c50b 	mla	r5, sl, fp, ip
   31036:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   3103a:	b29b      	uxth	r3, r3
   3103c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   31040:	4577      	cmp	r7, lr
   31042:	f849 3b04 	str.w	r3, [r9], #4
   31046:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   3104a:	d8e2      	bhi.n	31012 <__multiply+0x98>
   3104c:	9b01      	ldr	r3, [sp, #4]
   3104e:	f841 c003 	str.w	ip, [r1, r3]
   31052:	9b03      	ldr	r3, [sp, #12]
   31054:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   31058:	3204      	adds	r2, #4
   3105a:	f1b9 0f00 	cmp.w	r9, #0
   3105e:	d020      	beq.n	310a2 <__multiply+0x128>
   31060:	680b      	ldr	r3, [r1, #0]
   31062:	f104 0c14 	add.w	ip, r4, #20
   31066:	468e      	mov	lr, r1
   31068:	f04f 0a00 	mov.w	sl, #0
   3106c:	f8bc 5000 	ldrh.w	r5, [ip]
   31070:	f8be b002 	ldrh.w	fp, [lr, #2]
   31074:	fb09 b505 	mla	r5, r9, r5, fp
   31078:	44aa      	add	sl, r5
   3107a:	b29b      	uxth	r3, r3
   3107c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   31080:	f84e 3b04 	str.w	r3, [lr], #4
   31084:	f85c 3b04 	ldr.w	r3, [ip], #4
   31088:	f8be 5000 	ldrh.w	r5, [lr]
   3108c:	0c1b      	lsrs	r3, r3, #16
   3108e:	fb09 5303 	mla	r3, r9, r3, r5
   31092:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   31096:	4567      	cmp	r7, ip
   31098:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   3109c:	d8e6      	bhi.n	3106c <__multiply+0xf2>
   3109e:	9d01      	ldr	r5, [sp, #4]
   310a0:	514b      	str	r3, [r1, r5]
   310a2:	3104      	adds	r1, #4
   310a4:	e79e      	b.n	30fe4 <__multiply+0x6a>
   310a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   310aa:	2b00      	cmp	r3, #0
   310ac:	d1a0      	bne.n	30ff0 <__multiply+0x76>
   310ae:	3e01      	subs	r6, #1
   310b0:	e79c      	b.n	30fec <__multiply+0x72>

000310b2 <__lshift>:
   310b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   310b6:	460c      	mov	r4, r1
   310b8:	6849      	ldr	r1, [r1, #4]
   310ba:	6923      	ldr	r3, [r4, #16]
   310bc:	eb03 1862 	add.w	r8, r3, r2, asr #5
   310c0:	68a3      	ldr	r3, [r4, #8]
   310c2:	4607      	mov	r7, r0
   310c4:	4691      	mov	r9, r2
   310c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   310ca:	f108 0601 	add.w	r6, r8, #1
   310ce:	42b3      	cmp	r3, r6
   310d0:	db3f      	blt.n	31152 <__lshift+0xa0>
   310d2:	4638      	mov	r0, r7
   310d4:	f7ff fe71 	bl	30dba <_Balloc>
   310d8:	2300      	movs	r3, #0
   310da:	4605      	mov	r5, r0
   310dc:	f100 0114 	add.w	r1, r0, #20
   310e0:	f100 0210 	add.w	r2, r0, #16
   310e4:	4618      	mov	r0, r3
   310e6:	4553      	cmp	r3, sl
   310e8:	db36      	blt.n	31158 <__lshift+0xa6>
   310ea:	6920      	ldr	r0, [r4, #16]
   310ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   310f0:	f104 0314 	add.w	r3, r4, #20
   310f4:	f019 091f 	ands.w	r9, r9, #31
   310f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   310fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   31100:	d02e      	beq.n	31160 <__lshift+0xae>
   31102:	f1c9 0e20 	rsb	lr, r9, #32
   31106:	468a      	mov	sl, r1
   31108:	2200      	movs	r2, #0
   3110a:	6818      	ldr	r0, [r3, #0]
   3110c:	fa00 f009 	lsl.w	r0, r0, r9
   31110:	4302      	orrs	r2, r0
   31112:	f84a 2b04 	str.w	r2, [sl], #4
   31116:	f853 2b04 	ldr.w	r2, [r3], #4
   3111a:	459c      	cmp	ip, r3
   3111c:	fa22 f20e 	lsr.w	r2, r2, lr
   31120:	d8f3      	bhi.n	3110a <__lshift+0x58>
   31122:	ebac 0304 	sub.w	r3, ip, r4
   31126:	3b15      	subs	r3, #21
   31128:	f023 0303 	bic.w	r3, r3, #3
   3112c:	3304      	adds	r3, #4
   3112e:	f104 0015 	add.w	r0, r4, #21
   31132:	4560      	cmp	r0, ip
   31134:	bf88      	it	hi
   31136:	2304      	movhi	r3, #4
   31138:	50ca      	str	r2, [r1, r3]
   3113a:	b10a      	cbz	r2, 31140 <__lshift+0x8e>
   3113c:	f108 0602 	add.w	r6, r8, #2
   31140:	3e01      	subs	r6, #1
   31142:	4638      	mov	r0, r7
   31144:	612e      	str	r6, [r5, #16]
   31146:	4621      	mov	r1, r4
   31148:	f7ff fe6b 	bl	30e22 <_Bfree>
   3114c:	4628      	mov	r0, r5
   3114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31152:	3101      	adds	r1, #1
   31154:	005b      	lsls	r3, r3, #1
   31156:	e7ba      	b.n	310ce <__lshift+0x1c>
   31158:	f842 0f04 	str.w	r0, [r2, #4]!
   3115c:	3301      	adds	r3, #1
   3115e:	e7c2      	b.n	310e6 <__lshift+0x34>
   31160:	3904      	subs	r1, #4
   31162:	f853 2b04 	ldr.w	r2, [r3], #4
   31166:	f841 2f04 	str.w	r2, [r1, #4]!
   3116a:	459c      	cmp	ip, r3
   3116c:	d8f9      	bhi.n	31162 <__lshift+0xb0>
   3116e:	e7e7      	b.n	31140 <__lshift+0x8e>

00031170 <__mcmp>:
   31170:	690a      	ldr	r2, [r1, #16]
   31172:	4603      	mov	r3, r0
   31174:	6900      	ldr	r0, [r0, #16]
   31176:	1a80      	subs	r0, r0, r2
   31178:	b530      	push	{r4, r5, lr}
   3117a:	d10d      	bne.n	31198 <__mcmp+0x28>
   3117c:	3314      	adds	r3, #20
   3117e:	3114      	adds	r1, #20
   31180:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   31184:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   31188:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   3118c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   31190:	4295      	cmp	r5, r2
   31192:	d002      	beq.n	3119a <__mcmp+0x2a>
   31194:	d304      	bcc.n	311a0 <__mcmp+0x30>
   31196:	2001      	movs	r0, #1
   31198:	bd30      	pop	{r4, r5, pc}
   3119a:	42a3      	cmp	r3, r4
   3119c:	d3f4      	bcc.n	31188 <__mcmp+0x18>
   3119e:	e7fb      	b.n	31198 <__mcmp+0x28>
   311a0:	f04f 30ff 	mov.w	r0, #4294967295
   311a4:	e7f8      	b.n	31198 <__mcmp+0x28>

000311a6 <__mdiff>:
   311a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   311aa:	460c      	mov	r4, r1
   311ac:	4606      	mov	r6, r0
   311ae:	4611      	mov	r1, r2
   311b0:	4620      	mov	r0, r4
   311b2:	4617      	mov	r7, r2
   311b4:	f7ff ffdc 	bl	31170 <__mcmp>
   311b8:	1e05      	subs	r5, r0, #0
   311ba:	d108      	bne.n	311ce <__mdiff+0x28>
   311bc:	4629      	mov	r1, r5
   311be:	4630      	mov	r0, r6
   311c0:	f7ff fdfb 	bl	30dba <_Balloc>
   311c4:	2301      	movs	r3, #1
   311c6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   311ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   311ce:	bfa4      	itt	ge
   311d0:	463b      	movge	r3, r7
   311d2:	4627      	movge	r7, r4
   311d4:	4630      	mov	r0, r6
   311d6:	6879      	ldr	r1, [r7, #4]
   311d8:	bfa6      	itte	ge
   311da:	461c      	movge	r4, r3
   311dc:	2500      	movge	r5, #0
   311de:	2501      	movlt	r5, #1
   311e0:	f7ff fdeb 	bl	30dba <_Balloc>
   311e4:	693e      	ldr	r6, [r7, #16]
   311e6:	60c5      	str	r5, [r0, #12]
   311e8:	6925      	ldr	r5, [r4, #16]
   311ea:	f107 0114 	add.w	r1, r7, #20
   311ee:	f104 0914 	add.w	r9, r4, #20
   311f2:	f100 0e14 	add.w	lr, r0, #20
   311f6:	f107 0210 	add.w	r2, r7, #16
   311fa:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   311fe:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   31202:	46f2      	mov	sl, lr
   31204:	2700      	movs	r7, #0
   31206:	f859 3b04 	ldr.w	r3, [r9], #4
   3120a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   3120e:	fa1f f883 	uxth.w	r8, r3
   31212:	fa17 f78b 	uxtah	r7, r7, fp
   31216:	0c1b      	lsrs	r3, r3, #16
   31218:	eba7 0808 	sub.w	r8, r7, r8
   3121c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   31220:	eb03 4328 	add.w	r3, r3, r8, asr #16
   31224:	fa1f f888 	uxth.w	r8, r8
   31228:	141f      	asrs	r7, r3, #16
   3122a:	454d      	cmp	r5, r9
   3122c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   31230:	f84a 3b04 	str.w	r3, [sl], #4
   31234:	d8e7      	bhi.n	31206 <__mdiff+0x60>
   31236:	1b2b      	subs	r3, r5, r4
   31238:	3b15      	subs	r3, #21
   3123a:	f023 0303 	bic.w	r3, r3, #3
   3123e:	3304      	adds	r3, #4
   31240:	3415      	adds	r4, #21
   31242:	42a5      	cmp	r5, r4
   31244:	bf38      	it	cc
   31246:	2304      	movcc	r3, #4
   31248:	4419      	add	r1, r3
   3124a:	4473      	add	r3, lr
   3124c:	469e      	mov	lr, r3
   3124e:	460d      	mov	r5, r1
   31250:	4565      	cmp	r5, ip
   31252:	d30e      	bcc.n	31272 <__mdiff+0xcc>
   31254:	f10c 0203 	add.w	r2, ip, #3
   31258:	1a52      	subs	r2, r2, r1
   3125a:	f022 0203 	bic.w	r2, r2, #3
   3125e:	3903      	subs	r1, #3
   31260:	458c      	cmp	ip, r1
   31262:	bf38      	it	cc
   31264:	2200      	movcc	r2, #0
   31266:	441a      	add	r2, r3
   31268:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3126c:	b17b      	cbz	r3, 3128e <__mdiff+0xe8>
   3126e:	6106      	str	r6, [r0, #16]
   31270:	e7ab      	b.n	311ca <__mdiff+0x24>
   31272:	f855 8b04 	ldr.w	r8, [r5], #4
   31276:	fa17 f488 	uxtah	r4, r7, r8
   3127a:	1422      	asrs	r2, r4, #16
   3127c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   31280:	b2a4      	uxth	r4, r4
   31282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   31286:	f84e 4b04 	str.w	r4, [lr], #4
   3128a:	1417      	asrs	r7, r2, #16
   3128c:	e7e0      	b.n	31250 <__mdiff+0xaa>
   3128e:	3e01      	subs	r6, #1
   31290:	e7ea      	b.n	31268 <__mdiff+0xc2>

00031292 <__d2b>:
   31292:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   31296:	2101      	movs	r1, #1
   31298:	461c      	mov	r4, r3
   3129a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   3129e:	4690      	mov	r8, r2
   312a0:	f7ff fd8b 	bl	30dba <_Balloc>
   312a4:	f3c4 0313 	ubfx	r3, r4, #0, #20
   312a8:	f3c4 540a 	ubfx	r4, r4, #20, #11
   312ac:	4607      	mov	r7, r0
   312ae:	bb2c      	cbnz	r4, 312fc <__d2b+0x6a>
   312b0:	9301      	str	r3, [sp, #4]
   312b2:	f1b8 0300 	subs.w	r3, r8, #0
   312b6:	d026      	beq.n	31306 <__d2b+0x74>
   312b8:	4668      	mov	r0, sp
   312ba:	9300      	str	r3, [sp, #0]
   312bc:	f7ff fe26 	bl	30f0c <__lo0bits>
   312c0:	9900      	ldr	r1, [sp, #0]
   312c2:	b1f0      	cbz	r0, 31302 <__d2b+0x70>
   312c4:	9a01      	ldr	r2, [sp, #4]
   312c6:	f1c0 0320 	rsb	r3, r0, #32
   312ca:	fa02 f303 	lsl.w	r3, r2, r3
   312ce:	430b      	orrs	r3, r1
   312d0:	40c2      	lsrs	r2, r0
   312d2:	617b      	str	r3, [r7, #20]
   312d4:	9201      	str	r2, [sp, #4]
   312d6:	9b01      	ldr	r3, [sp, #4]
   312d8:	61bb      	str	r3, [r7, #24]
   312da:	2b00      	cmp	r3, #0
   312dc:	bf14      	ite	ne
   312de:	2102      	movne	r1, #2
   312e0:	2101      	moveq	r1, #1
   312e2:	6139      	str	r1, [r7, #16]
   312e4:	b1c4      	cbz	r4, 31318 <__d2b+0x86>
   312e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   312ea:	4404      	add	r4, r0
   312ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   312f0:	6034      	str	r4, [r6, #0]
   312f2:	6028      	str	r0, [r5, #0]
   312f4:	4638      	mov	r0, r7
   312f6:	b002      	add	sp, #8
   312f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   312fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   31300:	e7d6      	b.n	312b0 <__d2b+0x1e>
   31302:	6179      	str	r1, [r7, #20]
   31304:	e7e7      	b.n	312d6 <__d2b+0x44>
   31306:	a801      	add	r0, sp, #4
   31308:	f7ff fe00 	bl	30f0c <__lo0bits>
   3130c:	9b01      	ldr	r3, [sp, #4]
   3130e:	617b      	str	r3, [r7, #20]
   31310:	2101      	movs	r1, #1
   31312:	6139      	str	r1, [r7, #16]
   31314:	3020      	adds	r0, #32
   31316:	e7e5      	b.n	312e4 <__d2b+0x52>
   31318:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   3131c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   31320:	6030      	str	r0, [r6, #0]
   31322:	6918      	ldr	r0, [r3, #16]
   31324:	f7ff fdd2 	bl	30ecc <__hi0bits>
   31328:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   3132c:	6029      	str	r1, [r5, #0]
   3132e:	e7e1      	b.n	312f4 <__d2b+0x62>

00031330 <_calloc_r>:
   31330:	b538      	push	{r3, r4, r5, lr}
   31332:	fb02 f501 	mul.w	r5, r2, r1
   31336:	4629      	mov	r1, r5
   31338:	f7f9 fcf8 	bl	2ad2c <_malloc_r>
   3133c:	4604      	mov	r4, r0
   3133e:	b118      	cbz	r0, 31348 <_calloc_r+0x18>
   31340:	462a      	mov	r2, r5
   31342:	2100      	movs	r1, #0
   31344:	f7ff fadc 	bl	30900 <memset>
   31348:	4620      	mov	r0, r4
   3134a:	bd38      	pop	{r3, r4, r5, pc}

0003134c <_realloc_r>:
   3134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3134e:	4607      	mov	r7, r0
   31350:	4614      	mov	r4, r2
   31352:	460e      	mov	r6, r1
   31354:	b921      	cbnz	r1, 31360 <_realloc_r+0x14>
   31356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3135a:	4611      	mov	r1, r2
   3135c:	f7f9 bce6 	b.w	2ad2c <_malloc_r>
   31360:	b922      	cbnz	r2, 3136c <_realloc_r+0x20>
   31362:	f7f9 fc95 	bl	2ac90 <_free_r>
   31366:	4625      	mov	r5, r4
   31368:	4628      	mov	r0, r5
   3136a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3136c:	f000 f90f 	bl	3158e <_malloc_usable_size_r>
   31370:	42a0      	cmp	r0, r4
   31372:	d20f      	bcs.n	31394 <_realloc_r+0x48>
   31374:	4621      	mov	r1, r4
   31376:	4638      	mov	r0, r7
   31378:	f7f9 fcd8 	bl	2ad2c <_malloc_r>
   3137c:	4605      	mov	r5, r0
   3137e:	2800      	cmp	r0, #0
   31380:	d0f2      	beq.n	31368 <_realloc_r+0x1c>
   31382:	4631      	mov	r1, r6
   31384:	4622      	mov	r2, r4
   31386:	f7ff fa93 	bl	308b0 <memcpy>
   3138a:	4631      	mov	r1, r6
   3138c:	4638      	mov	r0, r7
   3138e:	f7f9 fc7f 	bl	2ac90 <_free_r>
   31392:	e7e9      	b.n	31368 <_realloc_r+0x1c>
   31394:	4635      	mov	r5, r6
   31396:	e7e7      	b.n	31368 <_realloc_r+0x1c>

00031398 <__ssputs_r>:
   31398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3139c:	688e      	ldr	r6, [r1, #8]
   3139e:	429e      	cmp	r6, r3
   313a0:	4682      	mov	sl, r0
   313a2:	460c      	mov	r4, r1
   313a4:	4690      	mov	r8, r2
   313a6:	461f      	mov	r7, r3
   313a8:	d838      	bhi.n	3141c <__ssputs_r+0x84>
   313aa:	898a      	ldrh	r2, [r1, #12]
   313ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
   313b0:	d032      	beq.n	31418 <__ssputs_r+0x80>
   313b2:	6825      	ldr	r5, [r4, #0]
   313b4:	6909      	ldr	r1, [r1, #16]
   313b6:	eba5 0901 	sub.w	r9, r5, r1
   313ba:	6965      	ldr	r5, [r4, #20]
   313bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   313c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   313c4:	3301      	adds	r3, #1
   313c6:	444b      	add	r3, r9
   313c8:	106d      	asrs	r5, r5, #1
   313ca:	429d      	cmp	r5, r3
   313cc:	bf38      	it	cc
   313ce:	461d      	movcc	r5, r3
   313d0:	0553      	lsls	r3, r2, #21
   313d2:	d531      	bpl.n	31438 <__ssputs_r+0xa0>
   313d4:	4629      	mov	r1, r5
   313d6:	f7f9 fca9 	bl	2ad2c <_malloc_r>
   313da:	4606      	mov	r6, r0
   313dc:	b950      	cbnz	r0, 313f4 <__ssputs_r+0x5c>
   313de:	230c      	movs	r3, #12
   313e0:	f8ca 3000 	str.w	r3, [sl]
   313e4:	89a3      	ldrh	r3, [r4, #12]
   313e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   313ea:	81a3      	strh	r3, [r4, #12]
   313ec:	f04f 30ff 	mov.w	r0, #4294967295
   313f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   313f4:	6921      	ldr	r1, [r4, #16]
   313f6:	464a      	mov	r2, r9
   313f8:	f7ff fa5a 	bl	308b0 <memcpy>
   313fc:	89a3      	ldrh	r3, [r4, #12]
   313fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   31402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   31406:	81a3      	strh	r3, [r4, #12]
   31408:	6126      	str	r6, [r4, #16]
   3140a:	6165      	str	r5, [r4, #20]
   3140c:	444e      	add	r6, r9
   3140e:	eba5 0509 	sub.w	r5, r5, r9
   31412:	6026      	str	r6, [r4, #0]
   31414:	60a5      	str	r5, [r4, #8]
   31416:	463e      	mov	r6, r7
   31418:	42be      	cmp	r6, r7
   3141a:	d900      	bls.n	3141e <__ssputs_r+0x86>
   3141c:	463e      	mov	r6, r7
   3141e:	4632      	mov	r2, r6
   31420:	6820      	ldr	r0, [r4, #0]
   31422:	4641      	mov	r1, r8
   31424:	f7ff fa52 	bl	308cc <memmove>
   31428:	68a3      	ldr	r3, [r4, #8]
   3142a:	6822      	ldr	r2, [r4, #0]
   3142c:	1b9b      	subs	r3, r3, r6
   3142e:	4432      	add	r2, r6
   31430:	60a3      	str	r3, [r4, #8]
   31432:	6022      	str	r2, [r4, #0]
   31434:	2000      	movs	r0, #0
   31436:	e7db      	b.n	313f0 <__ssputs_r+0x58>
   31438:	462a      	mov	r2, r5
   3143a:	f7ff ff87 	bl	3134c <_realloc_r>
   3143e:	4606      	mov	r6, r0
   31440:	2800      	cmp	r0, #0
   31442:	d1e1      	bne.n	31408 <__ssputs_r+0x70>
   31444:	6921      	ldr	r1, [r4, #16]
   31446:	4650      	mov	r0, sl
   31448:	f7f9 fc22 	bl	2ac90 <_free_r>
   3144c:	e7c7      	b.n	313de <__ssputs_r+0x46>

0003144e <__sfputc_r>:
   3144e:	6893      	ldr	r3, [r2, #8]
   31450:	3b01      	subs	r3, #1
   31452:	2b00      	cmp	r3, #0
   31454:	b410      	push	{r4}
   31456:	6093      	str	r3, [r2, #8]
   31458:	da07      	bge.n	3146a <__sfputc_r+0x1c>
   3145a:	6994      	ldr	r4, [r2, #24]
   3145c:	42a3      	cmp	r3, r4
   3145e:	db01      	blt.n	31464 <__sfputc_r+0x16>
   31460:	290a      	cmp	r1, #10
   31462:	d102      	bne.n	3146a <__sfputc_r+0x1c>
   31464:	bc10      	pop	{r4}
   31466:	f7fa bbaf 	b.w	2bbc8 <__swbuf_r>
   3146a:	6813      	ldr	r3, [r2, #0]
   3146c:	1c58      	adds	r0, r3, #1
   3146e:	6010      	str	r0, [r2, #0]
   31470:	7019      	strb	r1, [r3, #0]
   31472:	4608      	mov	r0, r1
   31474:	bc10      	pop	{r4}
   31476:	4770      	bx	lr

00031478 <__sfputs_r>:
   31478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3147a:	4606      	mov	r6, r0
   3147c:	460f      	mov	r7, r1
   3147e:	4614      	mov	r4, r2
   31480:	18d5      	adds	r5, r2, r3
   31482:	42ac      	cmp	r4, r5
   31484:	d101      	bne.n	3148a <__sfputs_r+0x12>
   31486:	2000      	movs	r0, #0
   31488:	e007      	b.n	3149a <__sfputs_r+0x22>
   3148a:	f814 1b01 	ldrb.w	r1, [r4], #1
   3148e:	463a      	mov	r2, r7
   31490:	4630      	mov	r0, r6
   31492:	f7ff ffdc 	bl	3144e <__sfputc_r>
   31496:	1c43      	adds	r3, r0, #1
   31498:	d1f3      	bne.n	31482 <__sfputs_r+0xa>
   3149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003149c <__sread>:
   3149c:	b510      	push	{r4, lr}
   3149e:	460c      	mov	r4, r1
   314a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   314a4:	f7fa fd86 	bl	2bfb4 <_read_r>
   314a8:	2800      	cmp	r0, #0
   314aa:	bfab      	itete	ge
   314ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   314ae:	89a3      	ldrhlt	r3, [r4, #12]
   314b0:	181b      	addge	r3, r3, r0
   314b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   314b6:	bfac      	ite	ge
   314b8:	6563      	strge	r3, [r4, #84]	; 0x54
   314ba:	81a3      	strhlt	r3, [r4, #12]
   314bc:	bd10      	pop	{r4, pc}

000314be <__swrite>:
   314be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   314c2:	461f      	mov	r7, r3
   314c4:	898b      	ldrh	r3, [r1, #12]
   314c6:	05db      	lsls	r3, r3, #23
   314c8:	4605      	mov	r5, r0
   314ca:	460c      	mov	r4, r1
   314cc:	4616      	mov	r6, r2
   314ce:	d505      	bpl.n	314dc <__swrite+0x1e>
   314d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   314d4:	2302      	movs	r3, #2
   314d6:	2200      	movs	r2, #0
   314d8:	f7fa fd1a 	bl	2bf10 <_lseek_r>
   314dc:	89a3      	ldrh	r3, [r4, #12]
   314de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   314e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   314e6:	81a3      	strh	r3, [r4, #12]
   314e8:	4632      	mov	r2, r6
   314ea:	463b      	mov	r3, r7
   314ec:	4628      	mov	r0, r5
   314ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   314f2:	f7fa bbbb 	b.w	2bc6c <_write_r>

000314f6 <__sseek>:
   314f6:	b510      	push	{r4, lr}
   314f8:	460c      	mov	r4, r1
   314fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   314fe:	f7fa fd07 	bl	2bf10 <_lseek_r>
   31502:	1c43      	adds	r3, r0, #1
   31504:	89a3      	ldrh	r3, [r4, #12]
   31506:	bf15      	itete	ne
   31508:	6560      	strne	r0, [r4, #84]	; 0x54
   3150a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   3150e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   31512:	81a3      	strheq	r3, [r4, #12]
   31514:	bf18      	it	ne
   31516:	81a3      	strhne	r3, [r4, #12]
   31518:	bd10      	pop	{r4, pc}

0003151a <__sclose>:
   3151a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3151e:	f7fa bc25 	b.w	2bd6c <_close_r>

00031522 <__swhatbuf_r>:
   31522:	b570      	push	{r4, r5, r6, lr}
   31524:	460e      	mov	r6, r1
   31526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3152a:	2900      	cmp	r1, #0
   3152c:	b096      	sub	sp, #88	; 0x58
   3152e:	4614      	mov	r4, r2
   31530:	461d      	mov	r5, r3
   31532:	da07      	bge.n	31544 <__swhatbuf_r+0x22>
   31534:	2300      	movs	r3, #0
   31536:	602b      	str	r3, [r5, #0]
   31538:	89b3      	ldrh	r3, [r6, #12]
   3153a:	061a      	lsls	r2, r3, #24
   3153c:	d410      	bmi.n	31560 <__swhatbuf_r+0x3e>
   3153e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   31542:	e00e      	b.n	31562 <__swhatbuf_r+0x40>
   31544:	466a      	mov	r2, sp
   31546:	f7fa fd47 	bl	2bfd8 <_fstat_r>
   3154a:	2800      	cmp	r0, #0
   3154c:	dbf2      	blt.n	31534 <__swhatbuf_r+0x12>
   3154e:	9a01      	ldr	r2, [sp, #4]
   31550:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   31554:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   31558:	425a      	negs	r2, r3
   3155a:	415a      	adcs	r2, r3
   3155c:	602a      	str	r2, [r5, #0]
   3155e:	e7ee      	b.n	3153e <__swhatbuf_r+0x1c>
   31560:	2340      	movs	r3, #64	; 0x40
   31562:	2000      	movs	r0, #0
   31564:	6023      	str	r3, [r4, #0]
   31566:	b016      	add	sp, #88	; 0x58
   31568:	bd70      	pop	{r4, r5, r6, pc}

0003156a <__ascii_mbtowc>:
   3156a:	b082      	sub	sp, #8
   3156c:	b901      	cbnz	r1, 31570 <__ascii_mbtowc+0x6>
   3156e:	a901      	add	r1, sp, #4
   31570:	b142      	cbz	r2, 31584 <__ascii_mbtowc+0x1a>
   31572:	b14b      	cbz	r3, 31588 <__ascii_mbtowc+0x1e>
   31574:	7813      	ldrb	r3, [r2, #0]
   31576:	600b      	str	r3, [r1, #0]
   31578:	7812      	ldrb	r2, [r2, #0]
   3157a:	1e10      	subs	r0, r2, #0
   3157c:	bf18      	it	ne
   3157e:	2001      	movne	r0, #1
   31580:	b002      	add	sp, #8
   31582:	4770      	bx	lr
   31584:	4610      	mov	r0, r2
   31586:	e7fb      	b.n	31580 <__ascii_mbtowc+0x16>
   31588:	f06f 0001 	mvn.w	r0, #1
   3158c:	e7f8      	b.n	31580 <__ascii_mbtowc+0x16>

0003158e <_malloc_usable_size_r>:
   3158e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   31592:	1f18      	subs	r0, r3, #4
   31594:	2b00      	cmp	r3, #0
   31596:	bfbc      	itt	lt
   31598:	580b      	ldrlt	r3, [r1, r0]
   3159a:	18c0      	addlt	r0, r0, r3
   3159c:	4770      	bx	lr

0003159e <__ascii_wctomb>:
   3159e:	4603      	mov	r3, r0
   315a0:	4608      	mov	r0, r1
   315a2:	b141      	cbz	r1, 315b6 <__ascii_wctomb+0x18>
   315a4:	2aff      	cmp	r2, #255	; 0xff
   315a6:	d904      	bls.n	315b2 <__ascii_wctomb+0x14>
   315a8:	228a      	movs	r2, #138	; 0x8a
   315aa:	601a      	str	r2, [r3, #0]
   315ac:	f04f 30ff 	mov.w	r0, #4294967295
   315b0:	4770      	bx	lr
   315b2:	700a      	strb	r2, [r1, #0]
   315b4:	2001      	movs	r0, #1
   315b6:	4770      	bx	lr

000315b8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   315b8:	f7ef b8aa 	b.w	20710 <SystemInit>
