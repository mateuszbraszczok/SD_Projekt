
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	200056c0 	.word	0x200056c0
   4:	00013da9 	.word	0x00013da9

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   8:	00026667 	.word	0x00026667
   c:	00013d61 	.word	0x00013d61
	(void)memset(res + 3, 0, 13);
  10:	00013d61 	.word	0x00013d61
  14:	00013d61 	.word	0x00013d61
  18:	00013d61 	.word	0x00013d61
	...
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
  2c:	000133d1 	.word	0x000133d1
	memcpy(out, res, 3);
  30:	00013d61 	.word	0x00013d61
  34:	00000000 	.word	0x00000000
  38:	00013379 	.word	0x00013379
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
  3c:	00013d61 	.word	0x00013d61

00000040 <_irq_vector_table>:
  40:	000134bd 0002957f 000134bd 000134bd     .4.......4...4..
  50:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
  60:	00029547 000134bd 000134bd 00029565     G....4...4..e...
	}

	return api->pin_configure(port, pin, flags);
  70:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
	if (IS_ENABLED(CONFIG_DK_LIBRARY_DYNAMIC_BUTTON_HANDLERS)) {
		k_mutex_init(&button_handler_mut);
	}

	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
		button_devs[i] = device_get_binding(button_pins[i].port);
  80:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
		if (!button_devs[i]) {
  90:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
	const struct gpio_driver_config *const cfg =
  a0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
  b0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..

		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
					GPIO_INPUT | flags);

		if (err) {
			LOG_ERR("Cannot configure button gpio");
  c0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  d0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
  e0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..
  f0:	000134bd 000134bd 000134bd 000134bd     .4...4...4...4..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
	return api->pin_interrupt_configure(port, pin, mode, trig);
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
		/* Module starts in scanning mode and will switch to
		 * callback mode if no button is pressed.
		 */
		err = gpio_pin_interrupt_configure(button_devs[i],
			button_pins[i].number, GPIO_INT_DISABLE);
		if (err) {
     10c:	f04f 31ff 	movne.w	r1, #4294967295
			LOG_ERR("Cannot disable callbacks()");
			return err;
		}

		pin_mask |= BIT(button_pins[i].number);
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
     120:	f000 f806 	bl	130 <__udivmoddi4>
		err = gpio_pin_interrupt_configure(button_devs[i],
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_api *api =
     134:	9e08      	ldr	r6, [sp, #32]
	const struct gpio_driver_config *const cfg =
     136:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
			LOG_ERR("Cannot disable callbacks()");
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
	callback->pin_mask = pin_mask;
     16c:	b2b9      	uxth	r1, r7
	}

	gpio_init_callback(&gpio_cb, button_pressed, pin_mask);

	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
		err = gpio_add_callback(button_devs[i], &gpio_cb);
     176:	fb0c f001 	mul.w	r0, ip, r1
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
     17a:	4298      	cmp	r0, r3
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
		if (err) {
     188:	4298      	cmp	r0, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
     18a:	f240 8113 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
		return -ENOTSUP;
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
			LOG_ERR("Cannot add callback");
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
			return err;
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
		}
	}

	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1bc:	3802      	subs	r0, #2

	state = STATE_SCANNING;
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16

	k_work_schedule(&buttons_scan, K_NO_WAIT);
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0

	dk_read_buttons(NULL, NULL);
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr

	return 0;
}
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     38c:	d016      	beq.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3f6:	4615      	mov	r5, r2
     3f8:	4a0a      	ldr	r2, [pc, #40]	; (424 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x24>)
     3fa:	461c      	mov	r4, r3
     3fc:	6856      	ldr	r6, [r2, #4]
     3fe:	b12e      	cbz	r6, 40c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xc>
     400:	b001      	add	sp, #4
     402:	462a      	mov	r2, r5
     404:	46b4      	mov	ip, r6
     406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     40a:	4760      	bx	ip
     40c:	2000      	movs	r0, #0
     40e:	f88d 0000 	strb.w	r0, [sp]
     412:	4668      	mov	r0, sp
     414:	f00b f924 	bl	b660 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     418:	f89d 0000 	ldrb.w	r0, [sp]
     41c:	1a28      	subs	r0, r5, r0
     41e:	7020      	strb	r0, [r4, #0]
     420:	2000      	movs	r0, #0
     422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     424:	20000000 	.word	0x20000000

00000428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     428:	4801      	ldr	r0, [pc, #4]	; (430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     42a:	7800      	ldrb	r0, [r0, #0]
     42c:	4770      	bx	lr
     42e:	0000      	.short	0x0000
     430:	20000008 	.word	0x20000008

00000434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     434:	4905      	ldr	r1, [pc, #20]	; (44c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     436:	780a      	ldrb	r2, [r1, #0]
     438:	4290      	cmp	r0, r2
     43a:	d301      	bcc.n	440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     43c:	2000      	movs	r0, #0
     43e:	4770      	bx	lr
     440:	6849      	ldr	r1, [r1, #4]
     442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     446:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     44a:	4770      	bx	lr
     44c:	20000008 	.word	0x20000008
     450:	b570      	push	{r4, r5, r6, lr}
     452:	4605      	mov	r5, r0
     454:	2a20      	cmp	r2, #32
     456:	d027      	beq.n	4a8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     458:	4819      	ldr	r0, [pc, #100]	; (4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4c>)
     45a:	4c1a      	ldr	r4, [pc, #104]	; (4c4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x50>)
     45c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     460:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     468:	2920      	cmp	r1, #32
     46a:	d022      	beq.n	4b2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3e>
     46c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     470:	7840      	ldrb	r0, [r0, #1]
     472:	784c      	ldrb	r4, [r1, #1]
     474:	7048      	strb	r0, [r1, #1]
     476:	4620      	mov	r0, r4
     478:	4601      	mov	r1, r0
     47a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     47e:	4291      	cmp	r1, r2
     480:	7005      	strb	r5, [r0, #0]
     482:	7840      	ldrb	r0, [r0, #1]
     484:	d1f8      	bne.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     486:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     48a:	2a20      	cmp	r2, #32
     48c:	bf1a      	itte	ne
     48e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     492:	7054      	strbne	r4, [r2, #1]
     494:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     498:	2220      	movs	r2, #32
     49a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     49e:	f88c 2001 	strb.w	r2, [ip, #1]
     4a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     4a6:	bd70      	pop	{r4, r5, r6, pc}
     4a8:	f240 217e 	movw	r1, #638	; 0x27e
     4ac:	2070      	movs	r0, #112	; 0x70
     4ae:	f003 f96b 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     4b2:	f893 4020 	ldrb.w	r4, [r3, #32]
     4b6:	7840      	ldrb	r0, [r0, #1]
     4b8:	f883 0020 	strb.w	r0, [r3, #32]
     4bc:	e7db      	b.n	476 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     4be:	0000      	.short	0x0000
     4c0:	20000dac 	.word	0x20000dac
     4c4:	20000e2c 	.word	0x20000e2c
     4c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4cc:	b085      	sub	sp, #20
     4ce:	4615      	mov	r5, r2
     4d0:	460c      	mov	r4, r1
     4d2:	f002 f8db 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     4d6:	4428      	add	r0, r5
     4d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4dc:	9002      	str	r0, [sp, #8]
     4de:	6821      	ldr	r1, [r4, #0]
     4e0:	1a08      	subs	r0, r1, r0
     4e2:	0200      	lsls	r0, r0, #8
     4e4:	17c1      	asrs	r1, r0, #31
     4e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     4ea:	1200      	asrs	r0, r0, #8
     4ec:	2800      	cmp	r0, #0
     4ee:	f300 80d5 	bgt.w	69c <CONFIG_BT_HCI_TX_STACK_SIZE+0x9c>
     4f2:	48ac      	ldr	r0, [pc, #688]	; (7a4 <__data_size+0xf0>)
     4f4:	9f08      	ldr	r7, [sp, #32]
     4f6:	4eac      	ldr	r6, [pc, #688]	; (7a8 <__data_size+0xf4>)
     4f8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     4fc:	9003      	str	r0, [sp, #12]
     4fe:	f890 5020 	ldrb.w	r5, [r0, #32]
     502:	2020      	movs	r0, #32
     504:	46e9      	mov	r9, sp
     506:	f10d 0804 	add.w	r8, sp, #4
     50a:	f88d 0000 	strb.w	r0, [sp]
     50e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     512:	2d20      	cmp	r5, #32
     514:	bf18      	it	ne
     516:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     51a:	d025      	beq.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     51c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     520:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     524:	6822      	ldr	r2, [r4, #0]
     526:	68c1      	ldr	r1, [r0, #12]
     528:	1a51      	subs	r1, r2, r1
     52a:	0209      	lsls	r1, r1, #8
     52c:	17ca      	asrs	r2, r1, #31
     52e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     532:	3008      	adds	r0, #8
     534:	1209      	asrs	r1, r1, #8
     536:	d417      	bmi.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     538:	8961      	ldrh	r1, [r4, #10]
     53a:	b171      	cbz	r1, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     53c:	8941      	ldrh	r1, [r0, #10]
     53e:	b961      	cbnz	r1, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     540:	f000 fdb4 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     544:	f002 f8a2 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     548:	6821      	ldr	r1, [r4, #0]
     54a:	1a08      	subs	r0, r1, r0
     54c:	0200      	lsls	r0, r0, #8
     54e:	17c1      	asrs	r1, r0, #31
     550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     554:	1200      	asrs	r0, r0, #8
     556:	2833      	cmp	r0, #51	; 0x33
     558:	db06      	blt.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     55a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     55e:	f889 5000 	strb.w	r5, [r9]
     562:	7845      	ldrb	r5, [r0, #1]
     564:	2d20      	cmp	r5, #32
     566:	d1d9      	bne.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
     568:	f899 0000 	ldrb.w	r0, [r9]
     56c:	f888 0000 	strb.w	r0, [r8]
     570:	46a1      	mov	r9, r4
     572:	2d20      	cmp	r5, #32
     574:	bf1c      	itt	ne
     576:	488d      	ldrne	r0, [pc, #564]	; (7ac <__data_size+0xf8>)
     578:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     57c:	f000 810e 	beq.w	79c <__data_size+0xe8>
     580:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     584:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     588:	f8d9 2004 	ldr.w	r2, [r9, #4]
     58c:	f8da 1008 	ldr.w	r1, [sl, #8]
     590:	4648      	mov	r0, r9
     592:	1a89      	subs	r1, r1, r2
     594:	0209      	lsls	r1, r1, #8
     596:	17ca      	asrs	r2, r1, #31
     598:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     59c:	f10a 0708 	add.w	r7, sl, #8
     5a0:	1209      	asrs	r1, r1, #8
     5a2:	d415      	bmi.n	5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>
     5a4:	8979      	ldrh	r1, [r7, #10]
     5a6:	2900      	cmp	r1, #0
     5a8:	f000 80f8 	beq.w	79c <__data_size+0xe8>
     5ac:	8941      	ldrh	r1, [r0, #10]
     5ae:	2900      	cmp	r1, #0
     5b0:	f040 80f4 	bne.w	79c <__data_size+0xe8>
     5b4:	f000 fd7a 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     5b8:	f002 f868 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5bc:	6839      	ldr	r1, [r7, #0]
     5be:	1a08      	subs	r0, r1, r0
     5c0:	0200      	lsls	r0, r0, #8
     5c2:	17c1      	asrs	r1, r0, #31
     5c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5c8:	1200      	asrs	r0, r0, #8
     5ca:	2833      	cmp	r0, #51	; 0x33
     5cc:	f280 80e6 	bge.w	79c <__data_size+0xe8>
     5d0:	f888 5000 	strb.w	r5, [r8]
     5d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     5d8:	f899 000c 	ldrb.w	r0, [r9, #12]
     5dc:	4281      	cmp	r1, r0
     5de:	d906      	bls.n	5ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x106>
     5e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5e4:	7845      	ldrb	r5, [r0, #1]
     5e6:	2d20      	cmp	r5, #32
     5e8:	d1ca      	bne.n	580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
     5ea:	f000 b8d7 	b.w	79c <__data_size+0xe8>
     5ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
     5f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     5f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     5fa:	8a68      	ldrh	r0, [r5, #18]
     5fc:	68ef      	ldr	r7, [r5, #12]
     5fe:	2800      	cmp	r0, #0
     600:	d143      	bne.n	68a <CONFIG_BT_HCI_TX_STACK_SIZE+0x8a>
     602:	8960      	ldrh	r0, [r4, #10]
     604:	b3e8      	cbz	r0, 682 <CONFIG_BT_HCI_TX_STACK_SIZE+0x82>
     606:	68a8      	ldr	r0, [r5, #8]
     608:	f00b f84a 	bl	b6a0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     60c:	8a69      	ldrh	r1, [r5, #18]
     60e:	7c2a      	ldrb	r2, [r5, #16]
     610:	4b67      	ldr	r3, [pc, #412]	; (7b0 <__data_size+0xfc>)
     612:	4411      	add	r1, r2
     614:	1c49      	adds	r1, r1, #1
     616:	1842      	adds	r2, r0, r1
     618:	4298      	cmp	r0, r3
     61a:	d904      	bls.n	626 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     61c:	f240 6109 	movw	r1, #1545	; 0x609
     620:	2070      	movs	r0, #112	; 0x70
     622:	f003 f8b1 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     626:	4863      	ldr	r0, [pc, #396]	; (7b4 <__data_size+0x100>)
     628:	4281      	cmp	r1, r0
     62a:	dd04      	ble.n	636 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     62c:	f240 610a 	movw	r1, #1546	; 0x60a
     630:	2070      	movs	r0, #112	; 0x70
     632:	f003 f8a9 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     636:	4860      	ldr	r0, [pc, #384]	; (7b8 <__data_size+0x104>)
     638:	4281      	cmp	r1, r0
     63a:	da04      	bge.n	646 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     63c:	f240 610b 	movw	r1, #1547	; 0x60b
     640:	2070      	movs	r0, #112	; 0x70
     642:	f003 f8a1 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     646:	485d      	ldr	r0, [pc, #372]	; (7bc <__data_size+0x108>)
     648:	4290      	cmp	r0, r2
     64a:	bfdc      	itt	le
     64c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     650:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     654:	dd05      	ble.n	662 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     656:	2a00      	cmp	r2, #0
     658:	bfbc      	itt	lt
     65a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     65e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     662:	4610      	mov	r0, r2
     664:	f002 f812 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     668:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     66c:	1a78      	subs	r0, r7, r1
     66e:	0200      	lsls	r0, r0, #8
     670:	17c2      	asrs	r2, r0, #31
     672:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     676:	1200      	asrs	r0, r0, #8
     678:	2833      	cmp	r0, #51	; 0x33
     67a:	bfb8      	it	lt
     67c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     680:	e000      	b.n	684 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     682:	e002      	b.n	68a <CONFIG_BT_HCI_TX_STACK_SIZE+0x8a>
     684:	bfb8      	it	lt
     686:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     68a:	9802      	ldr	r0, [sp, #8]
     68c:	1a38      	subs	r0, r7, r0
     68e:	0200      	lsls	r0, r0, #8
     690:	17c1      	asrs	r1, r0, #31
     692:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     696:	1200      	asrs	r0, r0, #8
     698:	2800      	cmp	r0, #0
     69a:	dd03      	ble.n	6a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa4>
     69c:	b009      	add	sp, #36	; 0x24
     69e:	2000      	movs	r0, #0
     6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6a4:	e9d4 1000 	ldrd	r1, r0, [r4]
     6a8:	1a40      	subs	r0, r0, r1
     6aa:	4438      	add	r0, r7
     6ac:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     6b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     6b4:	e9c4 1000 	strd	r1, r0, [r4]
     6b8:	9803      	ldr	r0, [sp, #12]
     6ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
     6be:	466f      	mov	r7, sp
     6c0:	f890 5020 	ldrb.w	r5, [r0, #32]
     6c4:	2020      	movs	r0, #32
     6c6:	f10d 0a04 	add.w	sl, sp, #4
     6ca:	f88d 0000 	strb.w	r0, [sp]
     6ce:	2d20      	cmp	r5, #32
     6d0:	bf1c      	itt	ne
     6d2:	4836      	ldrne	r0, [pc, #216]	; (7ac <__data_size+0xf8>)
     6d4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6d8:	d025      	beq.n	726 <__data_size+0x72>
     6da:	bf00      	nop
     6dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     6e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     6e4:	6822      	ldr	r2, [r4, #0]
     6e6:	68c1      	ldr	r1, [r0, #12]
     6e8:	1a51      	subs	r1, r2, r1
     6ea:	0209      	lsls	r1, r1, #8
     6ec:	17ca      	asrs	r2, r1, #31
     6ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6f2:	3008      	adds	r0, #8
     6f4:	1209      	asrs	r1, r1, #8
     6f6:	d416      	bmi.n	726 <__data_size+0x72>
     6f8:	8961      	ldrh	r1, [r4, #10]
     6fa:	b171      	cbz	r1, 71a <__data_size+0x66>
     6fc:	8941      	ldrh	r1, [r0, #10]
     6fe:	b961      	cbnz	r1, 71a <__data_size+0x66>
     700:	f000 fcd4 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     704:	f001 ffc2 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     708:	6821      	ldr	r1, [r4, #0]
     70a:	1a08      	subs	r0, r1, r0
     70c:	0200      	lsls	r0, r0, #8
     70e:	17c1      	asrs	r1, r0, #31
     710:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     714:	1200      	asrs	r0, r0, #8
     716:	2833      	cmp	r0, #51	; 0x33
     718:	db05      	blt.n	726 <__data_size+0x72>
     71a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     71e:	703d      	strb	r5, [r7, #0]
     720:	7845      	ldrb	r5, [r0, #1]
     722:	2d20      	cmp	r5, #32
     724:	d1da      	bne.n	6dc <__data_size+0x28>
     726:	7838      	ldrb	r0, [r7, #0]
     728:	f88a 0000 	strb.w	r0, [sl]
     72c:	4627      	mov	r7, r4
     72e:	2d20      	cmp	r5, #32
     730:	bf1c      	itt	ne
     732:	481e      	ldrne	r0, [pc, #120]	; (7ac <__data_size+0xf8>)
     734:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     738:	d030      	beq.n	79c <__data_size+0xe8>
     73a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     73e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     742:	6879      	ldr	r1, [r7, #4]
     744:	f8d9 2008 	ldr.w	r2, [r9, #8]
     748:	4638      	mov	r0, r7
     74a:	1a51      	subs	r1, r2, r1
     74c:	0209      	lsls	r1, r1, #8
     74e:	17ca      	asrs	r2, r1, #31
     750:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     754:	f109 0808 	add.w	r8, r9, #8
     758:	1209      	asrs	r1, r1, #8
     75a:	d412      	bmi.n	782 <__data_size+0xce>
     75c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     760:	b1e1      	cbz	r1, 79c <__data_size+0xe8>
     762:	8941      	ldrh	r1, [r0, #10]
     764:	b9d1      	cbnz	r1, 79c <__data_size+0xe8>
     766:	f000 fca1 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     76a:	f001 ff8f 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     76e:	f8d8 1000 	ldr.w	r1, [r8]
     772:	1a08      	subs	r0, r1, r0
     774:	0200      	lsls	r0, r0, #8
     776:	17c1      	asrs	r1, r0, #31
     778:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     77c:	1200      	asrs	r0, r0, #8
     77e:	2833      	cmp	r0, #51	; 0x33
     780:	da0c      	bge.n	79c <__data_size+0xe8>
     782:	f88a 5000 	strb.w	r5, [sl]
     786:	f899 0014 	ldrb.w	r0, [r9, #20]
     78a:	7b39      	ldrb	r1, [r7, #12]
     78c:	4288      	cmp	r0, r1
     78e:	f67f af2e 	bls.w	5ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x106>
     792:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     796:	7845      	ldrb	r5, [r0, #1]
     798:	2d20      	cmp	r5, #32
     79a:	d1ce      	bne.n	73a <__data_size+0x86>
     79c:	b009      	add	sp, #36	; 0x24
     79e:	2001      	movs	r0, #1
     7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7a4:	20000e2c 	.word	0x20000e2c
     7a8:	20000aac 	.word	0x20000aac
     7ac:	20000dac 	.word	0x20000dac
     7b0:	1e847fff 	.word	0x1e847fff
     7b4:	07a12000 	.word	0x07a12000
     7b8:	f85ee000 	.word	0xf85ee000
     7bc:	1e848000 	.word	0x1e848000
     7c0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     7c4:	4604      	mov	r4, r0
     7c6:	483c      	ldr	r0, [pc, #240]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
     7c8:	460e      	mov	r6, r1
     7ca:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     7ce:	4f3b      	ldr	r7, [pc, #236]	; (8bc <CONFIG_ISR_STACK_SIZE+0xbc>)
     7d0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7d4:	2020      	movs	r0, #32
     7d6:	4698      	mov	r8, r3
     7d8:	4692      	mov	sl, r2
     7da:	7010      	strb	r0, [r2, #0]
     7dc:	f507 7940 	add.w	r9, r7, #768	; 0x300
     7e0:	2d20      	cmp	r5, #32
     7e2:	bf18      	it	ne
     7e4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7e8:	d028      	beq.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     7ea:	bf00      	nop
     7ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7f0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     7f4:	f100 0108 	add.w	r1, r0, #8
     7f8:	68c0      	ldr	r0, [r0, #12]
     7fa:	6822      	ldr	r2, [r4, #0]
     7fc:	1a10      	subs	r0, r2, r0
     7fe:	0200      	lsls	r0, r0, #8
     800:	17c2      	asrs	r2, r0, #31
     802:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     806:	1200      	asrs	r0, r0, #8
     808:	d418      	bmi.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     80a:	8960      	ldrh	r0, [r4, #10]
     80c:	b178      	cbz	r0, 82e <CONFIG_ISR_STACK_SIZE+0x2e>
     80e:	8948      	ldrh	r0, [r1, #10]
     810:	b968      	cbnz	r0, 82e <CONFIG_ISR_STACK_SIZE+0x2e>
     812:	4608      	mov	r0, r1
     814:	f000 fc4a 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     818:	f001 ff38 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     81c:	6821      	ldr	r1, [r4, #0]
     81e:	1a08      	subs	r0, r1, r0
     820:	0200      	lsls	r0, r0, #8
     822:	17c1      	asrs	r1, r0, #31
     824:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     828:	1200      	asrs	r0, r0, #8
     82a:	2833      	cmp	r0, #51	; 0x33
     82c:	db06      	blt.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     82e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     832:	f88a 5000 	strb.w	r5, [sl]
     836:	7845      	ldrb	r5, [r0, #1]
     838:	2d20      	cmp	r5, #32
     83a:	d1d7      	bne.n	7ec <__data_size+0x138>
     83c:	f89a 0000 	ldrb.w	r0, [sl]
     840:	f888 0000 	strb.w	r0, [r8]
     844:	2d20      	cmp	r5, #32
     846:	bf18      	it	ne
     848:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     84c:	d030      	beq.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     84e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     852:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     856:	6861      	ldr	r1, [r4, #4]
     858:	f8d9 2008 	ldr.w	r2, [r9, #8]
     85c:	4620      	mov	r0, r4
     85e:	1a51      	subs	r1, r2, r1
     860:	0209      	lsls	r1, r1, #8
     862:	17ca      	asrs	r2, r1, #31
     864:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     868:	f109 0608 	add.w	r6, r9, #8
     86c:	1209      	asrs	r1, r1, #8
     86e:	d410      	bmi.n	892 <CONFIG_ISR_STACK_SIZE+0x92>
     870:	8971      	ldrh	r1, [r6, #10]
     872:	b1e9      	cbz	r1, 8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     874:	8941      	ldrh	r1, [r0, #10]
     876:	b9d9      	cbnz	r1, 8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     878:	f000 fc18 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     87c:	f001 ff06 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     880:	6831      	ldr	r1, [r6, #0]
     882:	1a08      	subs	r0, r1, r0
     884:	0200      	lsls	r0, r0, #8
     886:	17c1      	asrs	r1, r0, #31
     888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     88c:	1200      	asrs	r0, r0, #8
     88e:	2833      	cmp	r0, #51	; 0x33
     890:	da0e      	bge.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     892:	f888 5000 	strb.w	r5, [r8]
     896:	f899 0014 	ldrb.w	r0, [r9, #20]
     89a:	7b21      	ldrb	r1, [r4, #12]
     89c:	4288      	cmp	r0, r1
     89e:	d802      	bhi.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
     8a0:	2000      	movs	r0, #0
     8a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8a6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     8aa:	7845      	ldrb	r5, [r0, #1]
     8ac:	2d20      	cmp	r5, #32
     8ae:	d1ce      	bne.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
     8b0:	2001      	movs	r0, #1
     8b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8b6:	0000      	.short	0x0000
     8b8:	20000e2c 	.word	0x20000e2c
     8bc:	20000aac 	.word	0x20000aac
     8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8c4:	b098      	sub	sp, #96	; 0x60
     8c6:	4616      	mov	r6, r2
     8c8:	460d      	mov	r5, r1
     8ca:	f04f 0800 	mov.w	r8, #0
     8ce:	f04f 0b01 	mov.w	fp, #1
     8d2:	f002 f95d 	bl	2b90 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     8d6:	4604      	mov	r4, r0
     8d8:	2d01      	cmp	r5, #1
     8da:	bf18      	it	ne
     8dc:	2d02      	cmpne	r5, #2
     8de:	d005      	beq.n	8ec <CONFIG_ISR_STACK_SIZE+0xec>
     8e0:	f640 1194 	movw	r1, #2452	; 0x994
     8e4:	f04f 0070 	mov.w	r0, #112	; 0x70
     8e8:	f002 ff4e 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8ec:	49f9      	ldr	r1, [pc, #996]	; (cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>)
     8ee:	2001      	movs	r0, #1
     8f0:	6008      	str	r0, [r1, #0]
     8f2:	49f9      	ldr	r1, [pc, #996]	; (cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>)
     8f4:	6889      	ldr	r1, [r1, #8]
     8f6:	6008      	str	r0, [r1, #0]
     8f8:	2000      	movs	r0, #0
     8fa:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     8fe:	900c      	str	r0, [sp, #48]	; 0x30
     900:	1e40      	subs	r0, r0, #1
     902:	900e      	str	r0, [sp, #56]	; 0x38
     904:	49f5      	ldr	r1, [pc, #980]	; (cdc <CONFIG_ISR_STACK_SIZE+0x4dc>)
     906:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     90a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     90e:	3308      	adds	r3, #8
     910:	af0f      	add	r7, sp, #60	; 0x3c
     912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     914:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     918:	a80f      	add	r0, sp, #60	; 0x3c
     91a:	f000 fbc7 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     91e:	900d      	str	r0, [sp, #52]	; 0x34
     920:	48ee      	ldr	r0, [pc, #952]	; (cdc <CONFIG_ISR_STACK_SIZE+0x4dc>)
     922:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     926:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     92a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     92e:	f1b9 0f00 	cmp.w	r9, #0
     932:	bf14      	ite	ne
     934:	f04f 0a01 	movne.w	sl, #1
     938:	f04f 0a00 	moveq.w	sl, #0
     93c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     93e:	9014      	str	r0, [sp, #80]	; 0x50
     940:	f1ba 0f00 	cmp.w	sl, #0
     944:	d009      	beq.n	95a <CONFIG_ISR_STACK_SIZE+0x15a>
     946:	48e6      	ldr	r0, [pc, #920]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     948:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     94c:	b928      	cbnz	r0, 95a <CONFIG_ISR_STACK_SIZE+0x15a>
     94e:	f002 fea3 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     952:	2800      	cmp	r0, #0
     954:	bf08      	it	eq
     956:	2701      	moveq	r7, #1
     958:	d000      	beq.n	95c <CONFIG_ISR_STACK_SIZE+0x15c>
     95a:	2700      	movs	r7, #0
     95c:	48e1      	ldr	r0, [pc, #900]	; (ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>)
     95e:	2200      	movs	r2, #0
     960:	9215      	str	r2, [sp, #84]	; 0x54
     962:	7800      	ldrb	r0, [r0, #0]
     964:	4616      	mov	r6, r2
     966:	2801      	cmp	r0, #1
     968:	bf18      	it	ne
     96a:	2803      	cmpne	r0, #3
     96c:	d140      	bne.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     96e:	48dd      	ldr	r0, [pc, #884]	; (ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>)
     970:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     974:	eba8 0009 	sub.w	r0, r8, r9
     978:	9015      	str	r0, [sp, #84]	; 0x54
     97a:	45c8      	cmp	r8, r9
     97c:	d938      	bls.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     97e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     980:	ea6f 0108 	mvn.w	r1, r8
     984:	f8df e360 	ldr.w	lr, [pc, #864]	; ce8 <CONFIG_ISR_STACK_SIZE+0x4e8>
     988:	1858      	adds	r0, r3, r1
     98a:	f10d 0c0c 	add.w	ip, sp, #12
     98e:	aa17      	add	r2, sp, #92	; 0x5c
     990:	4573      	cmp	r3, lr
     992:	d904      	bls.n	99e <CONFIG_ISR_STACK_SIZE+0x19e>
     994:	f240 6109 	movw	r1, #1545	; 0x609
     998:	2070      	movs	r0, #112	; 0x70
     99a:	f002 fef5 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     99e:	4bd3      	ldr	r3, [pc, #844]	; (cec <CONFIG_ISR_STACK_SIZE+0x4ec>)
     9a0:	4299      	cmp	r1, r3
     9a2:	dd04      	ble.n	9ae <CONFIG_ISR_STACK_SIZE+0x1ae>
     9a4:	f240 610a 	movw	r1, #1546	; 0x60a
     9a8:	2070      	movs	r0, #112	; 0x70
     9aa:	f002 feed 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9ae:	4bd0      	ldr	r3, [pc, #832]	; (cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>)
     9b0:	4299      	cmp	r1, r3
     9b2:	da04      	bge.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
     9b4:	f240 610b 	movw	r1, #1547	; 0x60b
     9b8:	2070      	movs	r0, #112	; 0x70
     9ba:	f002 fee5 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9be:	49cd      	ldr	r1, [pc, #820]	; (cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>)
     9c0:	4281      	cmp	r1, r0
     9c2:	bfdc      	itt	le
     9c4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     9c8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     9cc:	dd05      	ble.n	9da <CONFIG_ISR_STACK_SIZE+0x1da>
     9ce:	2800      	cmp	r0, #0
     9d0:	bfbc      	itt	lt
     9d2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     9d6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     9da:	4661      	mov	r1, ip
     9dc:	f001 fe72 	bl	26c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9e0:	9803      	ldr	r0, [sp, #12]
     9e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
     9e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9e8:	9003      	str	r0, [sp, #12]
     9ea:	1a08      	subs	r0, r1, r0
     9ec:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9f0:	2f00      	cmp	r7, #0
     9f2:	bf18      	it	ne
     9f4:	2632      	movne	r6, #50	; 0x32
     9f6:	d104      	bne.n	a02 <CONFIG_ISR_STACK_SIZE+0x202>
     9f8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9fc:	2800      	cmp	r0, #0
     9fe:	bf18      	it	ne
     a00:	2602      	movne	r6, #2
     a02:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a06:	d008      	beq.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
     a08:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a0a:	1b00      	subs	r0, r0, r4
     a0c:	0200      	lsls	r0, r0, #8
     a0e:	17c1      	asrs	r1, r0, #31
     a10:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a14:	1200      	asrs	r0, r0, #8
     a16:	2801      	cmp	r0, #1
     a18:	da02      	bge.n	a20 <CONFIG_ISR_STACK_SIZE+0x220>
     a1a:	2004      	movs	r0, #4
     a1c:	9918      	ldr	r1, [sp, #96]	; 0x60
     a1e:	e00b      	b.n	a38 <CONFIG_ISR_STACK_SIZE+0x238>
     a20:	b147      	cbz	r7, a34 <CONFIG_ISR_STACK_SIZE+0x234>
     a22:	48af      	ldr	r0, [pc, #700]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     a24:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     a28:	b120      	cbz	r0, a34 <CONFIG_ISR_STACK_SIZE+0x234>
     a2a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a2e:	1c06      	adds	r6, r0, #0
     a30:	bf18      	it	ne
     a32:	2602      	movne	r6, #2
     a34:	4621      	mov	r1, r4
     a36:	2001      	movs	r0, #1
     a38:	f1b9 0f00 	cmp.w	r9, #0
     a3c:	d002      	beq.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
     a3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
     a40:	2b1e      	cmp	r3, #30
     a42:	da02      	bge.n	a4a <CONFIG_ISR_STACK_SIZE+0x24a>
     a44:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     a48:	b113      	cbz	r3, a50 <CONFIG_ISR_STACK_SIZE+0x250>
     a4a:	f04f 0b00 	mov.w	fp, #0
     a4e:	1e40      	subs	r0, r0, #1
     a50:	1983      	adds	r3, r0, r6
     a52:	48a4      	ldr	r0, [pc, #656]	; (ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>)
     a54:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     a58:	7800      	ldrb	r0, [r0, #0]
     a5a:	9015      	str	r0, [sp, #84]	; 0x54
     a5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a5e:	1a80      	subs	r0, r0, r2
     a60:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     a64:	ebac 0001 	sub.w	r0, ip, r1
     a68:	0200      	lsls	r0, r0, #8
     a6a:	17c6      	asrs	r6, r0, #31
     a6c:	eb00 6016 	add.w	r0, r0, r6, lsr #24
     a70:	1200      	asrs	r0, r0, #8
     a72:	4298      	cmp	r0, r3
     a74:	db18      	blt.n	aa8 <CONFIG_ISR_STACK_SIZE+0x2a8>
     a76:	2a00      	cmp	r2, #0
     a78:	bf18      	it	ne
     a7a:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     a7e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a80:	9705      	str	r7, [sp, #20]
     a82:	2700      	movs	r7, #0
     a84:	f001 ff7c 	bl	2980 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a88:	1a30      	subs	r0, r6, r0
     a8a:	0200      	lsls	r0, r0, #8
     a8c:	17c1      	asrs	r1, r0, #31
     a8e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a92:	1200      	asrs	r0, r0, #8
     a94:	283e      	cmp	r0, #62	; 0x3e
     a96:	da3f      	bge.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
     a98:	2d01      	cmp	r5, #1
     a9a:	d020      	beq.n	ade <CONFIG_ISR_STACK_SIZE+0x2de>
     a9c:	1e70      	subs	r0, r6, #1
     a9e:	9905      	ldr	r1, [sp, #20]
     aa0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     aa4:	b319      	cbz	r1, aee <CONFIG_ISR_STACK_SIZE+0x2ee>
     aa6:	e02d      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
     aa8:	b182      	cbz	r2, acc <CONFIG_ISR_STACK_SIZE+0x2cc>
     aaa:	f1be 0f00 	cmp.w	lr, #0
     aae:	bf04      	itt	eq
     ab0:	9815      	ldreq	r0, [sp, #84]	; 0x54
     ab2:	2803      	cmpeq	r0, #3
     ab4:	d00a      	beq.n	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
     ab6:	b927      	cbnz	r7, ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
     ab8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     abc:	2800      	cmp	r0, #0
     abe:	bf18      	it	ne
     ac0:	1e9b      	subne	r3, r3, #2
     ac2:	2200      	movs	r2, #0
     ac4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     ac8:	4690      	mov	r8, r2
     aca:	e7c7      	b.n	a5c <CONFIG_ISR_STACK_SIZE+0x25c>
     acc:	bb07      	cbnz	r7, b10 <CONFIG_ISR_STACK_SIZE+0x310>
     ace:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     ad2:	b1e8      	cbz	r0, b10 <CONFIG_ISR_STACK_SIZE+0x310>
     ad4:	2000      	movs	r0, #0
     ad6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
     ada:	1e9b      	subs	r3, r3, #2
     adc:	e7be      	b.n	a5c <CONFIG_ISR_STACK_SIZE+0x25c>
     ade:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ae2:	d120      	bne.n	b26 <CONFIG_ISR_STACK_SIZE+0x326>
     ae4:	f640 110d 	movw	r1, #2317	; 0x90d
     ae8:	2070      	movs	r0, #112	; 0x70
     aea:	f002 fe4d 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aee:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     af2:	d007      	beq.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
     af4:	1a21      	subs	r1, r4, r0
     af6:	0209      	lsls	r1, r1, #8
     af8:	17ca      	asrs	r2, r1, #31
     afa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     afe:	1209      	asrs	r1, r1, #8
     b00:	2904      	cmp	r1, #4
     b02:	dd03      	ble.n	b0c <CONFIG_ISR_STACK_SIZE+0x30c>
     b04:	4604      	mov	r4, r0
     b06:	f001 ff41 	bl	298c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b0a:	e00c      	b.n	b26 <CONFIG_ISR_STACK_SIZE+0x326>
     b0c:	2900      	cmp	r1, #0
     b0e:	dd0a      	ble.n	b26 <CONFIG_ISR_STACK_SIZE+0x326>
     b10:	b01b      	add	sp, #108	; 0x6c
     b12:	2000      	movs	r0, #0
     b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b18:	1e70      	subs	r0, r6, #1
     b1a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b1e:	4620      	mov	r0, r4
     b20:	f001 ff34 	bl	298c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b24:	4657      	mov	r7, sl
     b26:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b2a:	d024      	beq.n	b76 <CONFIG_ISR_STACK_SIZE+0x376>
     b2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
     b30:	1b00      	subs	r0, r0, r4
     b32:	1b1b      	subs	r3, r3, r4
     b34:	4a70      	ldr	r2, [pc, #448]	; (cf8 <CONFIG_ISR_STACK_SIZE+0x4f8>)
     b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b3e:	4583      	cmp	fp, r0
     b40:	bf98      	it	ls
     b42:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b46:	d2e3      	bcs.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
     b48:	429a      	cmp	r2, r3
     b4a:	d3e1      	bcc.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
     b4c:	4620      	mov	r0, r4
     b4e:	f00a fda7 	bl	b6a0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b52:	4965      	ldr	r1, [pc, #404]	; (ce8 <CONFIG_ISR_STACK_SIZE+0x4e8>)
     b54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b56:	1c4b      	adds	r3, r1, #1
     b58:	1a16      	subs	r6, r2, r0
     b5a:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b5e:	bf24      	itt	cs
     b60:	eba0 0c02 	subcs.w	ip, r0, r2
     b64:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     b68:	d310      	bcc.n	b8c <CONFIG_ISR_STACK_SIZE+0x38c>
     b6a:	42b1      	cmp	r1, r6
     b6c:	d208      	bcs.n	b80 <CONFIG_ISR_STACK_SIZE+0x380>
     b6e:	1a08      	subs	r0, r1, r0
     b70:	4410      	add	r0, r2
     b72:	1c46      	adds	r6, r0, #1
     b74:	e00a      	b.n	b8c <CONFIG_ISR_STACK_SIZE+0x38c>
     b76:	f640 212d 	movw	r1, #2605	; 0xa2d
     b7a:	2070      	movs	r0, #112	; 0x70
     b7c:	f002 fe04 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b80:	4561      	cmp	r1, ip
     b82:	d22c      	bcs.n	bde <CONFIG_ISR_STACK_SIZE+0x3de>
     b84:	1a89      	subs	r1, r1, r2
     b86:	4408      	add	r0, r1
     b88:	1c40      	adds	r0, r0, #1
     b8a:	4246      	negs	r6, r0
     b8c:	4854      	ldr	r0, [pc, #336]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     b8e:	7f80      	ldrb	r0, [r0, #30]
     b90:	b350      	cbz	r0, be8 <CONFIG_ISR_STACK_SIZE+0x3e8>
     b92:	4628      	mov	r0, r5
     b94:	4645      	mov	r5, r8
     b96:	f04f 0b00 	mov.w	fp, #0
     b9a:	46d8      	mov	r8, fp
     b9c:	2801      	cmp	r0, #1
     b9e:	d005      	beq.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
     ba0:	2002      	movs	r0, #2
     ba2:	f002 f94b 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ba6:	2001      	movs	r0, #1
     ba8:	f002 f948 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     bac:	45a9      	cmp	r9, r5
     bae:	d227      	bcs.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
     bb0:	eba6 0105 	sub.w	r1, r6, r5
     bb4:	f04f 0301 	mov.w	r3, #1
     bb8:	f04f 0203 	mov.w	r2, #3
     bbc:	f04f 0002 	mov.w	r0, #2
     bc0:	f002 f868 	bl	2c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bc4:	2800      	cmp	r0, #0
     bc6:	bf08      	it	eq
     bc8:	f04f 0801 	moveq.w	r8, #1
     bcc:	f1b9 0f00 	cmp.w	r9, #0
     bd0:	d030      	beq.n	c34 <CONFIG_ISR_STACK_SIZE+0x434>
     bd2:	2301      	movs	r3, #1
     bd4:	eba6 0109 	sub.w	r1, r6, r9
     bd8:	2203      	movs	r2, #3
     bda:	4618      	mov	r0, r3
     bdc:	e01e      	b.n	c1c <CONFIG_ISR_STACK_SIZE+0x41c>
     bde:	f640 310c 	movw	r1, #2828	; 0xb0c
     be2:	2070      	movs	r0, #112	; 0x70
     be4:	f002 fdd0 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     be8:	45c1      	cmp	r9, r8
     bea:	bf34      	ite	cc
     bec:	4640      	movcc	r0, r8
     bee:	4648      	movcs	r0, r9
     bf0:	4458      	add	r0, fp
     bf2:	42b0      	cmp	r0, r6
     bf4:	dbcd      	blt.n	b92 <CONFIG_ISR_STACK_SIZE+0x392>
     bf6:	f44f 6124 	mov.w	r1, #2624	; 0xa40
     bfa:	2070      	movs	r0, #112	; 0x70
     bfc:	f002 fdc4 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c00:	d910      	bls.n	c24 <CONFIG_ISR_STACK_SIZE+0x424>
     c02:	2301      	movs	r3, #1
     c04:	eba6 0109 	sub.w	r1, r6, r9
     c08:	2203      	movs	r2, #3
     c0a:	4618      	mov	r0, r3
     c0c:	f002 f842 	bl	2c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c10:	b328      	cbz	r0, c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     c12:	b17d      	cbz	r5, c34 <CONFIG_ISR_STACK_SIZE+0x434>
     c14:	1b71      	subs	r1, r6, r5
     c16:	2301      	movs	r3, #1
     c18:	2203      	movs	r2, #3
     c1a:	2002      	movs	r0, #2
     c1c:	f002 f83a 	bl	2c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c20:	b1e8      	cbz	r0, c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     c22:	e007      	b.n	c34 <CONFIG_ISR_STACK_SIZE+0x434>
     c24:	ea55 0009 	orrs.w	r0, r5, r9
     c28:	d004      	beq.n	c34 <CONFIG_ISR_STACK_SIZE+0x434>
     c2a:	f640 1177 	movw	r1, #2423	; 0x977
     c2e:	2070      	movs	r0, #112	; 0x70
     c30:	f002 fdaa 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c34:	2301      	movs	r3, #1
     c36:	2203      	movs	r2, #3
     c38:	4631      	mov	r1, r6
     c3a:	2000      	movs	r0, #0
     c3c:	f002 f82a 	bl	2c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c40:	b168      	cbz	r0, c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     c42:	2501      	movs	r5, #1
     c44:	f1b8 0f00 	cmp.w	r8, #0
     c48:	d003      	beq.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     c4a:	9814      	ldr	r0, [sp, #80]	; 0x50
     c4c:	900f      	str	r0, [sp, #60]	; 0x3c
     c4e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     c52:	f8df 80a8 	ldr.w	r8, [pc, #168]	; cfc <CONFIG_ISR_STACK_SIZE+0x4fc>
     c56:	f1ba 0f00 	cmp.w	sl, #0
     c5a:	d10e      	bne.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c5c:	e009      	b.n	c72 <CONFIG_ISR_STACK_SIZE+0x472>
     c5e:	2002      	movs	r0, #2
     c60:	f002 f8ec 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c64:	2001      	movs	r0, #1
     c66:	f002 f8e9 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c6a:	b01b      	add	sp, #108	; 0x6c
     c6c:	2000      	movs	r0, #0
     c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c72:	481b      	ldr	r0, [pc, #108]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     c74:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     c78:	b100      	cbz	r0, c7c <CONFIG_ISR_STACK_SIZE+0x47c>
     c7a:	b34f      	cbz	r7, cd0 <CONFIG_ISR_STACK_SIZE+0x4d0>
     c7c:	f8df a060 	ldr.w	sl, [pc, #96]	; ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>
     c80:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     c84:	b118      	cbz	r0, c8e <CONFIG_ISR_STACK_SIZE+0x48e>
     c86:	f002 fbb1 	bl	33ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c8a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     c8e:	b307      	cbz	r7, cd2 <CONFIG_ISR_STACK_SIZE+0x4d2>
     c90:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     c94:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     c98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     c9c:	f8c8 0000 	str.w	r0, [r8]
     ca0:	2300      	movs	r3, #0
     ca2:	2203      	movs	r2, #3
     ca4:	2005      	movs	r0, #5
     ca6:	f001 fff5 	bl	2c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     caa:	b368      	cbz	r0, d08 <CONFIG_ISR_STACK_SIZE+0x508>
     cac:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     cb0:	2005      	movs	r0, #5
     cb2:	f002 f98f 	bl	2fd4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     cb6:	4912      	ldr	r1, [pc, #72]	; (d00 <CONFIG_ISR_STACK_SIZE+0x500>)
     cb8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     cbc:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     cc0:	4910      	ldr	r1, [pc, #64]	; (d04 <CONFIG_ISR_STACK_SIZE+0x504>)
     cc2:	12e0      	asrs	r0, r4, #11
     cc4:	6008      	str	r0, [r1, #0]
     cc6:	4c06      	ldr	r4, [pc, #24]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     cc8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     ccc:	b3e8      	cbz	r0, d4a <CONFIG_ISR_STACK_SIZE+0x54a>
     cce:	e030      	b.n	d32 <CONFIG_ISR_STACK_SIZE+0x532>
     cd0:	e01b      	b.n	d0a <CONFIG_ISR_STACK_SIZE+0x50a>
     cd2:	e01f      	b.n	d14 <CONFIG_ISR_STACK_SIZE+0x514>
     cd4:	40000508 	.word	0x40000508
     cd8:	20000010 	.word	0x20000010
     cdc:	20000aac 	.word	0x20000aac
     ce0:	20000e2c 	.word	0x20000e2c
     ce4:	20000012 	.word	0x20000012
     ce8:	1e847fff 	.word	0x1e847fff
     cec:	07a12000 	.word	0x07a12000
     cf0:	f85ee000 	.word	0xf85ee000
     cf4:	1e848000 	.word	0x1e848000
     cf8:	003fffff 	.word	0x003fffff
     cfc:	4001f508 	.word	0x4001f508
     d00:	4001f098 	.word	0x4001f098
     d04:	4001f504 	.word	0x4001f504
     d08:	e025      	b.n	d56 <CONFIG_ISR_STACK_SIZE+0x556>
     d0a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; dc4 <CONFIG_ISR_STACK_SIZE+0x5c4>
     d0e:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d12:	b1c8      	cbz	r0, d48 <CONFIG_ISR_STACK_SIZE+0x548>
     d14:	4c2b      	ldr	r4, [pc, #172]	; (dc4 <CONFIG_ISR_STACK_SIZE+0x5c4>)
     d16:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d1a:	b150      	cbz	r0, d32 <CONFIG_ISR_STACK_SIZE+0x532>
     d1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d20:	f8c8 0000 	str.w	r0, [r8]
     d24:	2005      	movs	r0, #5
     d26:	f002 f889 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d2a:	f002 fbc7 	bl	34bc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d2e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d32:	eba6 0009 	sub.w	r0, r6, r9
     d36:	f1a0 0119 	sub.w	r1, r0, #25
     d3a:	2900      	cmp	r1, #0
     d3c:	dc15      	bgt.n	d6a <CONFIG_ISR_STACK_SIZE+0x56a>
     d3e:	f640 2171 	movw	r1, #2673	; 0xa71
     d42:	2070      	movs	r0, #112	; 0x70
     d44:	f002 fd20 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d48:	e000      	b.n	d4c <CONFIG_ISR_STACK_SIZE+0x54c>
     d4a:	e009      	b.n	d60 <CONFIG_ISR_STACK_SIZE+0x560>
     d4c:	f002 fb6a 	bl	3424 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     d50:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     d54:	e79b      	b.n	c8e <CONFIG_ISR_STACK_SIZE+0x48e>
     d56:	f240 313e 	movw	r1, #830	; 0x33e
     d5a:	2070      	movs	r0, #112	; 0x70
     d5c:	f002 fd14 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d60:	f002 fb9e 	bl	34a0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     d64:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     d68:	e7e3      	b.n	d32 <CONFIG_ISR_STACK_SIZE+0x532>
     d6a:	2203      	movs	r2, #3
     d6c:	2301      	movs	r3, #1
     d6e:	4610      	mov	r0, r2
     d70:	f001 ff90 	bl	2c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d74:	b308      	cbz	r0, dba <CONFIG_ISR_STACK_SIZE+0x5ba>
     d76:	4814      	ldr	r0, [pc, #80]	; (dc8 <CONFIG_ISR_STACK_SIZE+0x5c8>)
     d78:	6880      	ldr	r0, [r0, #8]
     d7a:	f8c0 b000 	str.w	fp, [r0]
     d7e:	4813      	ldr	r0, [pc, #76]	; (dcc <CONFIG_ISR_STACK_SIZE+0x5cc>)
     d80:	f8c0 b000 	str.w	fp, [r0]
     d84:	ac0c      	add	r4, sp, #48	; 0x30
     d86:	4812      	ldr	r0, [pc, #72]	; (dd0 <CONFIG_ISR_STACK_SIZE+0x5d0>)
     d88:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d8c:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     d90:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     d94:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     d98:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     d9c:	ac10      	add	r4, sp, #64	; 0x40
     d9e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     da2:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     da6:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     daa:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     dae:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     db2:	b01b      	add	sp, #108	; 0x6c
     db4:	2001      	movs	r0, #1
     db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dba:	f640 2179 	movw	r1, #2681	; 0xa79
     dbe:	2070      	movs	r0, #112	; 0x70
     dc0:	f002 fce2 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dc4:	20000e2c 	.word	0x20000e2c
     dc8:	20000010 	.word	0x20000010
     dcc:	40000508 	.word	0x40000508
     dd0:	20000aac 	.word	0x20000aac
     dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     dd8:	4606      	mov	r6, r0
     dda:	b083      	sub	sp, #12
     ddc:	7808      	ldrb	r0, [r1, #0]
     dde:	7390      	strb	r0, [r2, #14]
     de0:	7acf      	ldrb	r7, [r1, #11]
     de2:	7357      	strb	r7, [r2, #13]
     de4:	7a88      	ldrb	r0, [r1, #10]
     de6:	7310      	strb	r0, [r2, #12]
     de8:	8908      	ldrh	r0, [r1, #8]
     dea:	4614      	mov	r4, r2
     dec:	8150      	strh	r0, [r2, #10]
     dee:	460d      	mov	r5, r1
     df0:	780a      	ldrb	r2, [r1, #0]
     df2:	495f      	ldr	r1, [pc, #380]	; (f70 <CONFIG_ISR_STACK_SIZE+0x770>)
     df4:	4699      	mov	r9, r3
     df6:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     dfa:	424b      	negs	r3, r1
     dfc:	f1ac 0801 	sub.w	r8, ip, #1
     e00:	b15a      	cbz	r2, e1a <CONFIG_ISR_STACK_SIZE+0x61a>
     e02:	43c0      	mvns	r0, r0
     e04:	f8d5 8004 	ldr.w	r8, [r5, #4]
     e08:	f104 0208 	add.w	r2, r4, #8
     e0c:	4288      	cmp	r0, r1
     e0e:	dd3d      	ble.n	e8c <CONFIG_ISR_STACK_SIZE+0x68c>
     e10:	f240 610a 	movw	r1, #1546	; 0x60a
     e14:	2070      	movs	r0, #112	; 0x70
     e16:	f002 fcb7 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e1a:	68ee      	ldr	r6, [r5, #12]
     e1c:	686d      	ldr	r5, [r5, #4]
     e1e:	ea6f 0900 	mvn.w	r9, r0
     e22:	f104 0208 	add.w	r2, r4, #8
     e26:	eb06 0009 	add.w	r0, r6, r9
     e2a:	4546      	cmp	r6, r8
     e2c:	d904      	bls.n	e38 <CONFIG_ISR_STACK_SIZE+0x638>
     e2e:	f240 6109 	movw	r1, #1545	; 0x609
     e32:	2070      	movs	r0, #112	; 0x70
     e34:	f002 fca8 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e38:	4589      	cmp	r9, r1
     e3a:	dce9      	bgt.n	e10 <CONFIG_ISR_STACK_SIZE+0x610>
     e3c:	4599      	cmp	r9, r3
     e3e:	db28      	blt.n	e92 <CONFIG_ISR_STACK_SIZE+0x692>
     e40:	4584      	cmp	ip, r0
     e42:	bfdc      	itt	le
     e44:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e48:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e4c:	dd05      	ble.n	e5a <CONFIG_ISR_STACK_SIZE+0x65a>
     e4e:	2800      	cmp	r0, #0
     e50:	bfbc      	itt	lt
     e52:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e56:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e5a:	4621      	mov	r1, r4
     e5c:	f001 fc32 	bl	26c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e60:	6820      	ldr	r0, [r4, #0]
     e62:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e66:	1970      	adds	r0, r6, r5
     e68:	1c40      	adds	r0, r0, #1
     e6a:	6021      	str	r1, [r4, #0]
     e6c:	2f00      	cmp	r7, #0
     e6e:	bf08      	it	eq
     e70:	307a      	addeq	r0, #122	; 0x7a
     e72:	d003      	beq.n	e7c <CONFIG_ISR_STACK_SIZE+0x67c>
     e74:	2f01      	cmp	r7, #1
     e76:	bf08      	it	eq
     e78:	3048      	addeq	r0, #72	; 0x48
     e7a:	d12d      	bne.n	ed8 <CONFIG_ISR_STACK_SIZE+0x6d8>
     e7c:	f001 fc06 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e84:	6060      	str	r0, [r4, #4]
     e86:	b003      	add	sp, #12
     e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e8c:	4601      	mov	r1, r0
     e8e:	4298      	cmp	r0, r3
     e90:	da04      	bge.n	e9c <CONFIG_ISR_STACK_SIZE+0x69c>
     e92:	f240 610b 	movw	r1, #1547	; 0x60b
     e96:	2070      	movs	r0, #112	; 0x70
     e98:	f002 fc76 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e9c:	4584      	cmp	ip, r0
     e9e:	bfdc      	itt	le
     ea0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     ea4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     ea8:	dd05      	ble.n	eb6 <CONFIG_ISR_STACK_SIZE+0x6b6>
     eaa:	2800      	cmp	r0, #0
     eac:	bfbc      	itt	lt
     eae:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     eb2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     eb6:	4621      	mov	r1, r4
     eb8:	f001 fc04 	bl	26c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ebc:	6820      	ldr	r0, [r4, #0]
     ebe:	2f00      	cmp	r7, #0
     ec0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ec4:	f108 0001 	add.w	r0, r8, #1
     ec8:	6021      	str	r1, [r4, #0]
     eca:	bf08      	it	eq
     ecc:	307a      	addeq	r0, #122	; 0x7a
     ece:	d008      	beq.n	ee2 <CONFIG_ISR_STACK_SIZE+0x6e2>
     ed0:	2f01      	cmp	r7, #1
     ed2:	bf08      	it	eq
     ed4:	3048      	addeq	r0, #72	; 0x48
     ed6:	d004      	beq.n	ee2 <CONFIG_ISR_STACK_SIZE+0x6e2>
     ed8:	f240 61b1 	movw	r1, #1713	; 0x6b1
     edc:	2070      	movs	r0, #112	; 0x70
     ede:	f002 fc53 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ee2:	f001 fbd3 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ee6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     eea:	6061      	str	r1, [r4, #4]
     eec:	8960      	ldrh	r0, [r4, #10]
     eee:	aa01      	add	r2, sp, #4
     ef0:	4669      	mov	r1, sp
     ef2:	f001 fbe7 	bl	26c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ef6:	481f      	ldr	r0, [pc, #124]	; (f74 <CONFIG_ISR_STACK_SIZE+0x774>)
     ef8:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     efc:	2920      	cmp	r1, #32
     efe:	d023      	beq.n	f48 <CONFIG_ISR_STACK_SIZE+0x748>
     f00:	6900      	ldr	r0, [r0, #16]
     f02:	1d40      	adds	r0, r0, #5
     f04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f08:	e9d4 2100 	ldrd	r2, r1, [r4]
     f0c:	1a89      	subs	r1, r1, r2
     f0e:	6020      	str	r0, [r4, #0]
     f10:	4408      	add	r0, r1
     f12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f16:	6060      	str	r0, [r4, #4]
     f18:	464b      	mov	r3, r9
     f1a:	4632      	mov	r2, r6
     f1c:	4621      	mov	r1, r4
     f1e:	68e8      	ldr	r0, [r5, #12]
     f20:	f7ff fad2 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
     f24:	2800      	cmp	r0, #0
     f26:	bf1c      	itt	ne
     f28:	b003      	addne	sp, #12
     f2a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f2e:	e9d4 1000 	ldrd	r1, r0, [r4]
     f32:	1a40      	subs	r0, r0, r1
     f34:	4430      	add	r0, r6
     f36:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f3e:	e9c4 1000 	strd	r1, r0, [r4]
     f42:	b003      	add	sp, #12
     f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f48:	8960      	ldrh	r0, [r4, #10]
     f4a:	f106 0709 	add.w	r7, r6, #9
     f4e:	b120      	cbz	r0, f5a <CONFIG_ISR_STACK_SIZE+0x75a>
     f50:	f002 fba2 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f54:	2800      	cmp	r0, #0
     f56:	bf08      	it	eq
     f58:	3732      	addeq	r7, #50	; 0x32
     f5a:	4807      	ldr	r0, [pc, #28]	; (f78 <CONFIG_ISR_STACK_SIZE+0x778>)
     f5c:	7841      	ldrb	r1, [r0, #1]
     f5e:	9800      	ldr	r0, [sp, #0]
     f60:	4281      	cmp	r1, r0
     f62:	bf84      	itt	hi
     f64:	1a08      	subhi	r0, r1, r0
     f66:	4407      	addhi	r7, r0
     f68:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f6c:	e7cc      	b.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
     f6e:	0000      	.short	0x0000
     f70:	07a12000 	.word	0x07a12000
     f74:	20000e2c 	.word	0x20000e2c
     f78:	20000012 	.word	0x20000012
     f7c:	b510      	push	{r4, lr}
     f7e:	4c15      	ldr	r4, [pc, #84]	; (fd4 <CONFIG_ISR_STACK_SIZE+0x7d4>)
     f80:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f84:	2820      	cmp	r0, #32
     f86:	bf18      	it	ne
     f88:	bd10      	popne	{r4, pc}
     f8a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f8e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f92:	f890 1020 	ldrb.w	r1, [r0, #32]
     f96:	2920      	cmp	r1, #32
     f98:	d017      	beq.n	fca <CONFIG_ISR_STACK_SIZE+0x7ca>
     f9a:	f8df c03c 	ldr.w	ip, [pc, #60]	; fd8 <CONFIG_ISR_STACK_SIZE+0x7d8>
     f9e:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     fa2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     fa6:	785b      	ldrb	r3, [r3, #1]
     fa8:	f880 3020 	strb.w	r3, [r0, #32]
     fac:	2301      	movs	r3, #1
     fae:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     fb2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     fb6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     fba:	2002      	movs	r0, #2
     fbc:	f000 f8b0 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
     fc0:	2000      	movs	r0, #0
     fc2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     fc6:	77a0      	strb	r0, [r4, #30]
     fc8:	bd10      	pop	{r4, pc}
     fca:	f240 318b 	movw	r1, #907	; 0x38b
     fce:	2070      	movs	r0, #112	; 0x70
     fd0:	f002 fbda 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fd4:	20000e2c 	.word	0x20000e2c
     fd8:	20000dac 	.word	0x20000dac
     fdc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fe0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
     fe4:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     fe8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     fec:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     ff0:	2c20      	cmp	r4, #32
     ff2:	bf08      	it	eq
     ff4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     ff8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
     ffc:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    1000:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1004:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1008:	2607      	movs	r6, #7
    100a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    100e:	2801      	cmp	r0, #1
    1010:	d00e      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1012:	2804      	cmp	r0, #4
    1014:	bf08      	it	eq
    1016:	2602      	moveq	r6, #2
    1018:	d00a      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    101a:	2805      	cmp	r0, #5
    101c:	bf0c      	ite	eq
    101e:	2603      	moveq	r6, #3
    1020:	2806      	cmpne	r0, #6
    1022:	d005      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1024:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1028:	f04f 0070 	mov.w	r0, #112	; 0x70
    102c:	f002 fbac 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1030:	f1bb 0f00 	cmp.w	fp, #0
    1034:	bf18      	it	ne
    1036:	f3af 8000 	nopne.w
    103a:	f3ef 8010 	mrs	r0, PRIMASK
    103e:	b672      	cpsid	i
    1040:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1044:	784a      	ldrb	r2, [r1, #1]
    1046:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    104a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    104e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1052:	42a2      	cmp	r2, r4
    1054:	bf04      	itt	eq
    1056:	2220      	moveq	r2, #32
    1058:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    105c:	b1b8      	cbz	r0, 108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    105e:	462a      	mov	r2, r5
    1060:	4621      	mov	r1, r4
    1062:	2001      	movs	r0, #1
    1064:	f000 f85c 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1068:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    106c:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1070:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1074:	6840      	ldr	r0, [r0, #4]
    1076:	4631      	mov	r1, r6
    1078:	4790      	blx	r2
    107a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    107e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1082:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1086:	2c20      	cmp	r4, #32
    1088:	d1bc      	bne.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
    108a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    108e:	4806      	ldr	r0, [pc, #24]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
    1090:	2800      	cmp	r0, #0
    1092:	bf18      	it	ne
    1094:	f3af 8000 	nopne.w
    1098:	b662      	cpsie	i
    109a:	e7e0      	b.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
    109c:	20000e2c 	.word	0x20000e2c
    10a0:	00000000 	.word	0x00000000
    10a4:	20000dac 	.word	0x20000dac
    10a8:	00000000 	.word	0x00000000
    10ac:	b510      	push	{r4, lr}
    10ae:	4604      	mov	r4, r0
    10b0:	6800      	ldr	r0, [r0, #0]
    10b2:	f00a faf5 	bl	b6a0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    10b6:	4602      	mov	r2, r0
    10b8:	8960      	ldrh	r0, [r4, #10]
    10ba:	7a21      	ldrb	r1, [r4, #8]
    10bc:	4b14      	ldr	r3, [pc, #80]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    10be:	4408      	add	r0, r1
    10c0:	1c41      	adds	r1, r0, #1
    10c2:	1850      	adds	r0, r2, r1
    10c4:	429a      	cmp	r2, r3
    10c6:	d904      	bls.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    10c8:	f240 6109 	movw	r1, #1545	; 0x609
    10cc:	2070      	movs	r0, #112	; 0x70
    10ce:	f002 fb5b 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10d2:	4a10      	ldr	r2, [pc, #64]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    10d4:	4291      	cmp	r1, r2
    10d6:	dd04      	ble.n	10e2 <CONFIG_FPROTECT_BLOCK_SIZE+0xe2>
    10d8:	f240 610a 	movw	r1, #1546	; 0x60a
    10dc:	2070      	movs	r0, #112	; 0x70
    10de:	f002 fb53 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10e2:	4a0d      	ldr	r2, [pc, #52]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    10e4:	4291      	cmp	r1, r2
    10e6:	da04      	bge.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    10e8:	f240 610b 	movw	r1, #1547	; 0x60b
    10ec:	2070      	movs	r0, #112	; 0x70
    10ee:	f002 fb4b 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10f2:	490a      	ldr	r1, [pc, #40]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    10f4:	4281      	cmp	r1, r0
    10f6:	bfde      	ittt	le
    10f8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    10fc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1100:	bd10      	pople	{r4, pc}
    1102:	2800      	cmp	r0, #0
    1104:	bfbc      	itt	lt
    1106:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    110a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    110e:	bd10      	pop	{r4, pc}
    1110:	1e847fff 	.word	0x1e847fff
    1114:	07a12000 	.word	0x07a12000
    1118:	f85ee000 	.word	0xf85ee000
    111c:	1e848000 	.word	0x1e848000
    1120:	f8df c054 	ldr.w	ip, [pc, #84]	; 1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    1124:	b510      	push	{r4, lr}
    1126:	2300      	movs	r3, #0
    1128:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    112c:	2807      	cmp	r0, #7
    112e:	d21e      	bcs.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    1130:	e8df f000 	tbb	[pc, r0]
    1134:	05050505 	.word	0x05050505
    1138:	00040404 	.word	0x00040404
    113c:	2301      	movs	r3, #1
    113e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1142:	2b00      	cmp	r3, #0
    1144:	bf08      	it	eq
    1146:	bd10      	popeq	{r4, pc}
    1148:	480c      	ldr	r0, [pc, #48]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
    114a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    114e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1152:	2820      	cmp	r0, #32
    1154:	bf0e      	itee	eq
    1156:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    115a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    115e:	7041      	strbne	r1, [r0, #1]
    1160:	2020      	movs	r0, #32
    1162:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1166:	7058      	strb	r0, [r3, #1]
    1168:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    116c:	bd10      	pop	{r4, pc}
    116e:	f44f 7115 	mov.w	r1, #596	; 0x254
    1172:	2070      	movs	r0, #112	; 0x70
    1174:	f002 fb08 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1178:	20000dac 	.word	0x20000dac
    117c:	20000e2c 	.word	0x20000e2c
    1180:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1184:	b083      	sub	sp, #12
    1186:	485c      	ldr	r0, [pc, #368]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1188:	9904      	ldr	r1, [sp, #16]
    118a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    118e:	9001      	str	r0, [sp, #4]
    1190:	f890 4020 	ldrb.w	r4, [r0, #32]
    1194:	9803      	ldr	r0, [sp, #12]
    1196:	4625      	mov	r5, r4
    1198:	2801      	cmp	r0, #1
    119a:	bf18      	it	ne
    119c:	2802      	cmpne	r0, #2
    119e:	d005      	beq.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    11a0:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    11a4:	f04f 0070 	mov.w	r0, #112	; 0x70
    11a8:	f002 faee 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11ac:	2700      	movs	r7, #0
    11ae:	2d20      	cmp	r5, #32
    11b0:	d04a      	beq.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    11b2:	4851      	ldr	r0, [pc, #324]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    11b4:	9100      	str	r1, [sp, #0]
    11b6:	2600      	movs	r6, #0
    11b8:	7f80      	ldrb	r0, [r0, #30]
    11ba:	2800      	cmp	r0, #0
    11bc:	bf08      	it	eq
    11be:	2602      	moveq	r6, #2
    11c0:	f001 fbde 	bl	2980 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11c4:	f8df a138 	ldr.w	sl, [pc, #312]	; 1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>
    11c8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11cc:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    11d0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    11d4:	688a      	ldr	r2, [r1, #8]
    11d6:	68c9      	ldr	r1, [r1, #12]
    11d8:	1a12      	subs	r2, r2, r0
    11da:	1a09      	subs	r1, r1, r0
    11dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11e4:	4296      	cmp	r6, r2
    11e6:	bf98      	it	ls
    11e8:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11ec:	d201      	bcs.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    11ee:	4589      	cmp	r9, r1
    11f0:	d228      	bcs.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    11f2:	4a44      	ldr	r2, [pc, #272]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    11f4:	9900      	ldr	r1, [sp, #0]
    11f6:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    11fa:	4622      	mov	r2, r4
    11fc:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1200:	784c      	ldrb	r4, [r1, #1]
    1202:	2c20      	cmp	r4, #32
    1204:	d016      	beq.n	1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>
    1206:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    120a:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    120e:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1212:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1216:	eba8 0800 	sub.w	r8, r8, r0
    121a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    121e:	ebac 0100 	sub.w	r1, ip, r0
    1222:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1226:	4546      	cmp	r6, r8
    1228:	bf98      	it	ls
    122a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    122e:	d2e4      	bcs.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1230:	4589      	cmp	r9, r1
    1232:	d3e2      	bcc.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1234:	2a20      	cmp	r2, #32
    1236:	d005      	beq.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    1238:	2120      	movs	r1, #32
    123a:	2004      	movs	r0, #4
    123c:	9b00      	ldr	r3, [sp, #0]
    123e:	f7ff f907 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1242:	4604      	mov	r4, r0
    1244:	42ac      	cmp	r4, r5
    1246:	d115      	bne.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    1248:	482f      	ldr	r0, [pc, #188]	; (1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>)
    124a:	2800      	cmp	r0, #0
    124c:	bf18      	it	ne
    124e:	f3af 8000 	nopne.w
    1252:	f001 fb95 	bl	2980 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1256:	4c28      	ldr	r4, [pc, #160]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1258:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    125c:	2920      	cmp	r1, #32
    125e:	d00d      	beq.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1260:	68e1      	ldr	r1, [r4, #12]
    1262:	1c82      	adds	r2, r0, #2
    1264:	1a51      	subs	r1, r2, r1
    1266:	0209      	lsls	r1, r1, #8
    1268:	17ca      	asrs	r2, r1, #31
    126a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    126e:	1209      	asrs	r1, r1, #8
    1270:	2900      	cmp	r1, #0
    1272:	dd03      	ble.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1274:	b005      	add	sp, #20
    1276:	2000      	movs	r0, #0
    1278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    127c:	2d20      	cmp	r5, #32
    127e:	d00d      	beq.n	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    1280:	462a      	mov	r2, r5
    1282:	9903      	ldr	r1, [sp, #12]
    1284:	f7ff fb1c 	bl	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
    1288:	b358      	cbz	r0, 12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    128a:	9801      	ldr	r0, [sp, #4]
    128c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1290:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1294:	b005      	add	sp, #20
    1296:	2001      	movs	r0, #1
    1298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    129c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    12a0:	b118      	cbz	r0, 12aa <CONFIG_FPROTECT_BLOCK_SIZE+0x2aa>
    12a2:	f002 f8a3 	bl	33ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    12a6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    12aa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    12ae:	b150      	cbz	r0, 12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    12b0:	4916      	ldr	r1, [pc, #88]	; (130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>)
    12b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    12b6:	6008      	str	r0, [r1, #0]
    12b8:	2005      	movs	r0, #5
    12ba:	f001 fdbf 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12be:	f002 f8fd 	bl	34bc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    12c2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12c6:	2004      	movs	r0, #4
    12c8:	f001 fdb8 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12cc:	f001 fe24 	bl	2f18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12d0:	2020      	movs	r0, #32
    12d2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12d6:	480e      	ldr	r0, [pc, #56]	; (1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>)
    12d8:	6880      	ldr	r0, [r0, #8]
    12da:	6007      	str	r7, [r0, #0]
    12dc:	480d      	ldr	r0, [pc, #52]	; (1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>)
    12de:	6007      	str	r7, [r0, #0]
    12e0:	e7d8      	b.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    12e2:	462a      	mov	r2, r5
    12e4:	2120      	movs	r1, #32
    12e6:	2004      	movs	r0, #4
    12e8:	9b04      	ldr	r3, [sp, #16]
    12ea:	f7ff f8b1 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12ee:	b005      	add	sp, #20
    12f0:	2000      	movs	r0, #0
    12f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12f6:	0000      	.short	0x0000
    12f8:	20000e2c 	.word	0x20000e2c
    12fc:	003fffff 	.word	0x003fffff
    1300:	20000aac 	.word	0x20000aac
    1304:	20000dac 	.word	0x20000dac
    1308:	00000000 	.word	0x00000000
    130c:	4001f508 	.word	0x4001f508
    1310:	20000010 	.word	0x20000010
    1314:	40000508 	.word	0x40000508

00001318 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1318:	4906      	ldr	r1, [pc, #24]	; (1334 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    131a:	b510      	push	{r4, lr}
    131c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1320:	2a20      	cmp	r2, #32
    1322:	bf1c      	itt	ne
    1324:	7788      	strbne	r0, [r1, #30]
    1326:	bd10      	popne	{r4, pc}
    1328:	f240 31ea 	movw	r1, #1002	; 0x3ea
    132c:	2070      	movs	r0, #112	; 0x70
    132e:	f002 fa2b 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1332:	0000      	.short	0x0000
    1334:	20000e2c 	.word	0x20000e2c

00001338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    133c:	4e5b      	ldr	r6, [pc, #364]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    133e:	4681      	mov	r9, r0
    1340:	b085      	sub	sp, #20
    1342:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1346:	468a      	mov	sl, r1
    1348:	2820      	cmp	r0, #32
    134a:	d04d      	beq.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    134c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1350:	f106 040c 	add.w	r4, r6, #12
    1354:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1358:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    135c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1360:	2020      	movs	r0, #32
    1362:	f88d 0000 	strb.w	r0, [sp]
    1366:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    136a:	aa03      	add	r2, sp, #12
    136c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1370:	a901      	add	r1, sp, #4
    1372:	f890 5020 	ldrb.w	r5, [r0, #32]
    1376:	6930      	ldr	r0, [r6, #16]
    1378:	9002      	str	r0, [sp, #8]
    137a:	6830      	ldr	r0, [r6, #0]
    137c:	4448      	add	r0, r9
    137e:	f001 f9a1 	bl	26c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1382:	68f8      	ldr	r0, [r7, #12]
    1384:	9901      	ldr	r1, [sp, #4]
    1386:	4a4a      	ldr	r2, [pc, #296]	; (14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>)
    1388:	4408      	add	r0, r1
    138a:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    138e:	4291      	cmp	r1, r2
    1390:	d82f      	bhi.n	13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
    1392:	68b9      	ldr	r1, [r7, #8]
    1394:	1a41      	subs	r1, r0, r1
    1396:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    139a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    139e:	d228      	bcs.n	13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
    13a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13a4:	6060      	str	r0, [r4, #4]
    13a6:	4630      	mov	r0, r6
    13a8:	f884 a00c 	strb.w	sl, [r4, #12]
    13ac:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    13b0:	46ea      	mov	sl, sp
    13b2:	2d20      	cmp	r5, #32
    13b4:	bf1c      	itt	ne
    13b6:	493f      	ldrne	r1, [pc, #252]	; (14b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c>)
    13b8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13bc:	d03c      	beq.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    13be:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    13c2:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    13c6:	6860      	ldr	r0, [r4, #4]
    13c8:	68ba      	ldr	r2, [r7, #8]
    13ca:	4621      	mov	r1, r4
    13cc:	1a10      	subs	r0, r2, r0
    13ce:	0200      	lsls	r0, r0, #8
    13d0:	17c2      	asrs	r2, r0, #31
    13d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13d6:	f107 0608 	add.w	r6, r7, #8
    13da:	1200      	asrs	r0, r0, #8
    13dc:	d41b      	bmi.n	1416 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e>
    13de:	8970      	ldrh	r0, [r6, #10]
    13e0:	b350      	cbz	r0, 1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    13e2:	8948      	ldrh	r0, [r1, #10]
    13e4:	b148      	cbz	r0, 13fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72>
    13e6:	e027      	b.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    13e8:	f640 317b 	movw	r1, #2939	; 0xb7b
    13ec:	2070      	movs	r0, #112	; 0x70
    13ee:	f002 f9cb 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13f2:	b005      	add	sp, #20
    13f4:	2001      	movs	r0, #1
    13f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13fa:	4620      	mov	r0, r4
    13fc:	f7ff fe56 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1400:	f001 f944 	bl	268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1404:	6831      	ldr	r1, [r6, #0]
    1406:	1a08      	subs	r0, r1, r0
    1408:	0200      	lsls	r0, r0, #8
    140a:	17c1      	asrs	r1, r0, #31
    140c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1410:	1200      	asrs	r0, r0, #8
    1412:	2833      	cmp	r0, #51	; 0x33
    1414:	da10      	bge.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    1416:	f88a 5000 	strb.w	r5, [sl]
    141a:	7d39      	ldrb	r1, [r7, #20]
    141c:	7b20      	ldrb	r0, [r4, #12]
    141e:	4281      	cmp	r1, r0
    1420:	d805      	bhi.n	142e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa6>
    1422:	9802      	ldr	r0, [sp, #8]
    1424:	6060      	str	r0, [r4, #4]
    1426:	b005      	add	sp, #20
    1428:	2002      	movs	r0, #2
    142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    142e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1432:	7845      	ldrb	r5, [r0, #1]
    1434:	2d20      	cmp	r5, #32
    1436:	d1c2      	bne.n	13be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36>
    1438:	2005      	movs	r0, #5
    143a:	f001 fcff 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    143e:	4c1b      	ldr	r4, [pc, #108]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    1440:	f04f 30ff 	mov.w	r0, #4294967295
    1444:	60a0      	str	r0, [r4, #8]
    1446:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    144a:	f89d 2000 	ldrb.w	r2, [sp]
    144e:	2120      	movs	r1, #32
    1450:	2a20      	cmp	r2, #32
    1452:	bf13      	iteet	ne
    1454:	2005      	movne	r0, #5
    1456:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    145a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    145e:	f7fe fff7 	blne	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1462:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1466:	4913      	ldr	r1, [pc, #76]	; (14b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c>)
    1468:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    146c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1470:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1474:	7048      	strb	r0, [r1, #1]
    1476:	6820      	ldr	r0, [r4, #0]
    1478:	4448      	add	r0, r9
    147a:	6020      	str	r0, [r4, #0]
    147c:	2001      	movs	r0, #1
    147e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1482:	7e60      	ldrb	r0, [r4, #25]
    1484:	2801      	cmp	r0, #1
    1486:	d105      	bne.n	1494 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10c>
    1488:	6920      	ldr	r0, [r4, #16]
    148a:	1e40      	subs	r0, r0, #1
    148c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1490:	f001 fb1a 	bl	2ac8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1494:	f89d 0000 	ldrb.w	r0, [sp]
    1498:	2820      	cmp	r0, #32
    149a:	d003      	beq.n	14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
    149c:	4806      	ldr	r0, [pc, #24]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    149e:	7840      	ldrb	r0, [r0, #1]
    14a0:	f002 fa42 	bl	3928 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    14a4:	b005      	add	sp, #20
    14a6:	2000      	movs	r0, #0
    14a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ac:	20000e2c 	.word	0x20000e2c
    14b0:	07a11f9b 	.word	0x07a11f9b
    14b4:	20000dac 	.word	0x20000dac
    14b8:	20000010 	.word	0x20000010

000014bc <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    14bc:	4806      	ldr	r0, [pc, #24]	; (14d8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    14be:	b510      	push	{r4, lr}
    14c0:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    14c4:	2920      	cmp	r1, #32
    14c6:	bf1c      	itt	ne
    14c8:	7e00      	ldrbne	r0, [r0, #24]
    14ca:	bd10      	popne	{r4, pc}
    14cc:	f640 3174 	movw	r1, #2932	; 0xb74
    14d0:	2070      	movs	r0, #112	; 0x70
    14d2:	f002 f959 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14d6:	0000      	.short	0x0000
    14d8:	20000e2c 	.word	0x20000e2c

000014dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    14dc:	4602      	mov	r2, r0
    14de:	4b14      	ldr	r3, [pc, #80]	; (1530 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    14e0:	b510      	push	{r4, lr}
    14e2:	4408      	add	r0, r1
    14e4:	429a      	cmp	r2, r3
    14e6:	d904      	bls.n	14f2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    14e8:	f240 6109 	movw	r1, #1545	; 0x609
    14ec:	2070      	movs	r0, #112	; 0x70
    14ee:	f002 f94b 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14f2:	4a10      	ldr	r2, [pc, #64]	; (1534 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    14f4:	4291      	cmp	r1, r2
    14f6:	dd04      	ble.n	1502 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    14f8:	f240 610a 	movw	r1, #1546	; 0x60a
    14fc:	2070      	movs	r0, #112	; 0x70
    14fe:	f002 f943 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1502:	4a0d      	ldr	r2, [pc, #52]	; (1538 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1504:	4291      	cmp	r1, r2
    1506:	da04      	bge.n	1512 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    1508:	f240 610b 	movw	r1, #1547	; 0x60b
    150c:	2070      	movs	r0, #112	; 0x70
    150e:	f002 f93b 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1512:	490a      	ldr	r1, [pc, #40]	; (153c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1514:	4281      	cmp	r1, r0
    1516:	bfde      	ittt	le
    1518:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    151c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1520:	bd10      	pople	{r4, pc}
    1522:	2800      	cmp	r0, #0
    1524:	bfbc      	itt	lt
    1526:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    152a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    152e:	bd10      	pop	{r4, pc}
    1530:	1e847fff 	.word	0x1e847fff
    1534:	07a12000 	.word	0x07a12000
    1538:	f85ee000 	.word	0xf85ee000
    153c:	1e848000 	.word	0x1e848000

00001540 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1540:	4a10      	ldr	r2, [pc, #64]	; (1584 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1542:	1a0b      	subs	r3, r1, r0
    1544:	f102 0c01 	add.w	ip, r2, #1
    1548:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    154c:	bf3c      	itt	cc
    154e:	4618      	movcc	r0, r3
    1550:	4770      	bxcc	lr
    1552:	b510      	push	{r4, lr}
    1554:	1a44      	subs	r4, r0, r1
    1556:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    155a:	bf3c      	itt	cc
    155c:	4618      	movcc	r0, r3
    155e:	bd10      	popcc	{r4, pc}
    1560:	429a      	cmp	r2, r3
    1562:	d203      	bcs.n	156c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1564:	1a10      	subs	r0, r2, r0
    1566:	4408      	add	r0, r1
    1568:	1c40      	adds	r0, r0, #1
    156a:	bd10      	pop	{r4, pc}
    156c:	42a2      	cmp	r2, r4
    156e:	d204      	bcs.n	157a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1570:	1a51      	subs	r1, r2, r1
    1572:	4408      	add	r0, r1
    1574:	1c40      	adds	r0, r0, #1
    1576:	4240      	negs	r0, r0
    1578:	bd10      	pop	{r4, pc}
    157a:	f640 310c 	movw	r1, #2828	; 0xb0c
    157e:	2070      	movs	r0, #112	; 0x70
    1580:	f002 f902 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1584:	1e847fff 	.word	0x1e847fff

00001588 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1588:	490e      	ldr	r1, [pc, #56]	; (15c4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    158a:	b510      	push	{r4, lr}
    158c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1590:	2820      	cmp	r0, #32
    1592:	d012      	beq.n	15ba <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1594:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1598:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    159c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    15a0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    15a4:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    15a8:	6840      	ldr	r0, [r0, #4]
    15aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    15ae:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    15b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15b6:	2104      	movs	r1, #4
    15b8:	4710      	bx	r2
    15ba:	f640 01bc 	movw	r1, #2236	; 0x8bc
    15be:	2070      	movs	r0, #112	; 0x70
    15c0:	f002 f8e2 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15c4:	20000e2c 	.word	0x20000e2c

000015c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    15c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15ca:	4d6d      	ldr	r5, [pc, #436]	; (1780 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    15cc:	496d      	ldr	r1, [pc, #436]	; (1784 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    15ce:	2601      	movs	r6, #1
    15d0:	f505 7460 	add.w	r4, r5, #896	; 0x380
    15d4:	2808      	cmp	r0, #8
    15d6:	d273      	bcs.n	16c0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    15d8:	e8df f000 	tbb	[pc, r0]
    15dc:	af9d6704 	.word	0xaf9d6704
    15e0:	b9b444cd 	.word	0xb9b444cd
    15e4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    15e8:	b918      	cbnz	r0, 15f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    15ea:	f001 ff1b 	bl	3424 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    15ee:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    15f2:	8ae0      	ldrh	r0, [r4, #22]
    15f4:	b110      	cbz	r0, 15fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    15f6:	f002 f84f 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    15fa:	b188      	cbz	r0, 1620 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    15fc:	f7ff fcbe 	bl	f7c <CONFIG_ISR_STACK_SIZE+0x77c>
    1600:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    1604:	68a1      	ldr	r1, [r4, #8]
    1606:	f1b1 3fff 	cmp.w	r1, #4294967295
    160a:	d005      	beq.n	1618 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    160c:	2301      	movs	r3, #1
    160e:	2203      	movs	r2, #3
    1610:	2005      	movs	r0, #5
    1612:	f001 fb3f 	bl	2c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1616:	b140      	cbz	r0, 162a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1618:	7e60      	ldrb	r0, [r4, #25]
    161a:	2801      	cmp	r0, #1
    161c:	d110      	bne.n	1640 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    161e:	e009      	b.n	1634 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1620:	f44f 6107 	mov.w	r1, #2160	; 0x870
    1624:	2070      	movs	r0, #112	; 0x70
    1626:	f002 f8af 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    162a:	f640 0175 	movw	r1, #2165	; 0x875
    162e:	2070      	movs	r0, #112	; 0x70
    1630:	f002 f8aa 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1634:	6920      	ldr	r0, [r4, #16]
    1636:	1e40      	subs	r0, r0, #1
    1638:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    163c:	f001 fa44 	bl	2ac8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1640:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1644:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1648:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    164c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1650:	6840      	ldr	r0, [r0, #4]
    1652:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1656:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    165a:	b001      	add	sp, #4
    165c:	2101      	movs	r1, #1
    165e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1662:	4710      	bx	r2
    1664:	f7ff fc8a 	bl	f7c <CONFIG_ISR_STACK_SIZE+0x77c>
    1668:	f04f 30ff 	mov.w	r0, #4294967295
    166c:	60a0      	str	r0, [r4, #8]
    166e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1672:	f88d 0000 	strb.w	r0, [sp]
    1676:	f89d 0000 	ldrb.w	r0, [sp]
    167a:	b188      	cbz	r0, 16a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    167c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1680:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1684:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1688:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    168c:	6840      	ldr	r0, [r0, #4]
    168e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1692:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1696:	b001      	add	sp, #4
    1698:	2106      	movs	r1, #6
    169a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    169e:	4710      	bx	r2
    16a0:	f640 0186 	movw	r1, #2182	; 0x886
    16a4:	2070      	movs	r0, #112	; 0x70
    16a6:	f002 f86f 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16aa:	f7ff fc67 	bl	f7c <CONFIG_ISR_STACK_SIZE+0x77c>
    16ae:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    16b2:	f001 fff1 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16b6:	b120      	cbz	r0, 16c2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    16b8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    16bc:	b130      	cbz	r0, 16cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    16be:	e009      	b.n	16d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    16c0:	e059      	b.n	1776 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    16c2:	f640 0196 	movw	r1, #2198	; 0x896
    16c6:	2070      	movs	r0, #112	; 0x70
    16c8:	f002 f85e 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16cc:	f001 feaa 	bl	3424 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16d0:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    16d4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    16d8:	b158      	cbz	r0, 16f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    16da:	492b      	ldr	r1, [pc, #172]	; (1788 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    16dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16e0:	6008      	str	r0, [r1, #0]
    16e2:	2005      	movs	r0, #5
    16e4:	f001 fbaa 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16e8:	f001 fee8 	bl	34bc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    16ec:	2000      	movs	r0, #0
    16ee:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    16f2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    16f6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    16fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16fe:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1702:	6840      	ldr	r0, [r0, #4]
    1704:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1708:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    170c:	b001      	add	sp, #4
    170e:	2100      	movs	r1, #0
    1710:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1714:	4710      	bx	r2
    1716:	f001 fc49 	bl	2fac <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    171a:	8ae0      	ldrh	r0, [r4, #22]
    171c:	b110      	cbz	r0, 1724 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    171e:	f001 ffbb 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1722:	b128      	cbz	r0, 1730 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    1724:	4819      	ldr	r0, [pc, #100]	; (178c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    1726:	7800      	ldrb	r0, [r0, #0]
    1728:	2803      	cmp	r0, #3
    172a:	bf08      	it	eq
    172c:	7766      	strbeq	r6, [r4, #29]
    172e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1730:	f640 01a1 	movw	r1, #2209	; 0x8a1
    1734:	2070      	movs	r0, #112	; 0x70
    1736:	f002 f827 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    173a:	4815      	ldr	r0, [pc, #84]	; (1790 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    173c:	6006      	str	r6, [r0, #0]
    173e:	6888      	ldr	r0, [r1, #8]
    1740:	6006      	str	r6, [r0, #0]
    1742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1744:	7808      	ldrb	r0, [r1, #0]
    1746:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    174a:	f002 b8ed 	b.w	3928 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    174e:	f7ff fc15 	bl	f7c <CONFIG_ISR_STACK_SIZE+0x77c>
    1752:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1756:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    175a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    175e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1762:	6840      	ldr	r0, [r0, #4]
    1764:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1768:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    176c:	b001      	add	sp, #4
    176e:	2105      	movs	r1, #5
    1770:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1774:	4710      	bx	r2
    1776:	f640 01b4 	movw	r1, #2228	; 0x8b4
    177a:	2070      	movs	r0, #112	; 0x70
    177c:	f002 f804 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1780:	20000aac 	.word	0x20000aac
    1784:	20000010 	.word	0x20000010
    1788:	4001f508 	.word	0x4001f508
    178c:	20000012 	.word	0x20000012
    1790:	40000508 	.word	0x40000508

00001794 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1794:	4803      	ldr	r0, [pc, #12]	; (17a4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    1796:	b510      	push	{r4, lr}
    1798:	7840      	ldrb	r0, [r0, #1]
    179a:	f009 ff81 	bl	b6a0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    179e:	b280      	uxth	r0, r0
    17a0:	bd10      	pop	{r4, pc}
    17a2:	0000      	.short	0x0000
    17a4:	20000012 	.word	0x20000012

000017a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    17a8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17ac:	4682      	mov	sl, r0
    17ae:	48dc      	ldr	r0, [pc, #880]	; (1b20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    17b0:	b08b      	sub	sp, #44	; 0x2c
    17b2:	6800      	ldr	r0, [r0, #0]
    17b4:	4ddb      	ldr	r5, [pc, #876]	; (1b24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    17b6:	05c0      	lsls	r0, r0, #23
    17b8:	0dc0      	lsrs	r0, r0, #23
    17ba:	d00e      	beq.n	17da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    17bc:	3810      	subs	r0, #16
    17be:	b240      	sxtb	r0, r0
    17c0:	2800      	cmp	r0, #0
    17c2:	bfb8      	it	lt
    17c4:	f000 000f 	andlt.w	r0, r0, #15
    17c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    17cc:	bfac      	ite	ge
    17ce:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    17d2:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    17d6:	0940      	lsrs	r0, r0, #5
    17d8:	d00d      	beq.n	17f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    17da:	980c      	ldr	r0, [sp, #48]	; 0x30
    17dc:	f04f 0b00 	mov.w	fp, #0
    17e0:	7800      	ldrb	r0, [r0, #0]
    17e2:	2800      	cmp	r0, #0
    17e4:	bf18      	it	ne
    17e6:	2801      	cmpne	r0, #1
    17e8:	d018      	beq.n	181c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17ea:	f240 714f 	movw	r1, #1871	; 0x74f
    17ee:	f04f 0070 	mov.w	r0, #112	; 0x70
    17f2:	f001 ffc9 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    17fa:	f04f 0b01 	mov.w	fp, #1
    17fe:	2820      	cmp	r0, #32
    1800:	d007      	beq.n	1812 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1802:	980c      	ldr	r0, [sp, #48]	; 0x30
    1804:	7800      	ldrb	r0, [r0, #0]
    1806:	b148      	cbz	r0, 181c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1808:	f240 714b 	movw	r1, #1867	; 0x74b
    180c:	2070      	movs	r0, #112	; 0x70
    180e:	f001 ffbb 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1812:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    1816:	2070      	movs	r0, #112	; 0x70
    1818:	f001 ffb6 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    181c:	4cc2      	ldr	r4, [pc, #776]	; (1b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    181e:	b124      	cbz	r4, 182a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1820:	2100      	movs	r1, #0
    1822:	f240 7052 	movw	r0, #1874	; 0x752
    1826:	f3af 8000 	nop.w
    182a:	49c0      	ldr	r1, [pc, #768]	; (1b2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    182c:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    1830:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1834:	f04f 0801 	mov.w	r8, #1
    1838:	9000      	str	r0, [sp, #0]
    183a:	b124      	cbz	r4, 1846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    183c:	2100      	movs	r1, #0
    183e:	f240 705a 	movw	r0, #1882	; 0x75a
    1842:	f3af 8000 	nop.w
    1846:	f1b8 0f00 	cmp.w	r8, #0
    184a:	d009      	beq.n	1860 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    184c:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1850:	f04f 0900 	mov.w	r9, #0
    1854:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1858:	f1bb 0f00 	cmp.w	fp, #0
    185c:	d007      	beq.n	186e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    185e:	e032      	b.n	18c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    1860:	48b3      	ldr	r0, [pc, #716]	; (1b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1862:	2800      	cmp	r0, #0
    1864:	bf18      	it	ne
    1866:	f3af 8000 	nopne.w
    186a:	b662      	cpsie	i
    186c:	e7ee      	b.n	184c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    186e:	4637      	mov	r7, r6
    1870:	2001      	movs	r0, #1
    1872:	ea20 0607 	bic.w	r6, r0, r7
    1876:	48af      	ldr	r0, [pc, #700]	; (1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1878:	2240      	movs	r2, #64	; 0x40
    187a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    187e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1882:	f00a f87b 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1886:	b124      	cbz	r4, 1892 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1888:	2100      	movs	r1, #0
    188a:	f240 50cd 	movw	r0, #1485	; 0x5cd
    188e:	f3af 8000 	nop.w
    1892:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1896:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    189a:	6a09      	ldr	r1, [r1, #32]
    189c:	6201      	str	r1, [r0, #32]
    189e:	b124      	cbz	r4, 18aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    18a0:	2100      	movs	r1, #0
    18a2:	f240 50d1 	movw	r0, #1489	; 0x5d1
    18a6:	f3af 8000 	nop.w
    18aa:	b124      	cbz	r4, 18b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    18ac:	2100      	movs	r1, #0
    18ae:	f240 7064 	movw	r0, #1892	; 0x764
    18b2:	f3af 8000 	nop.w
    18b6:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    18ba:	f88d 0004 	strb.w	r0, [sp, #4]
    18be:	f89d 0004 	ldrb.w	r0, [sp, #4]
    18c2:	2800      	cmp	r0, #0
    18c4:	d1b9      	bne.n	183a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    18c6:	b124      	cbz	r4, 18d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    18c8:	2100      	movs	r1, #0
    18ca:	f240 706e 	movw	r0, #1902	; 0x76e
    18ce:	f3af 8000 	nop.w
    18d2:	f001 f855 	bl	2980 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    18d6:	4680      	mov	r8, r0
    18d8:	4633      	mov	r3, r6
    18da:	aa06      	add	r2, sp, #24
    18dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    18de:	f7ff fa79 	bl	dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>
    18e2:	b124      	cbz	r4, 18ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    18e4:	2100      	movs	r1, #0
    18e6:	f240 7075 	movw	r0, #1909	; 0x775
    18ea:	f3af 8000 	nop.w
    18ee:	4991      	ldr	r1, [pc, #580]	; (1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    18f0:	a806      	add	r0, sp, #24
    18f2:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    18f6:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    18fa:	2901      	cmp	r1, #1
    18fc:	bf18      	it	ne
    18fe:	2902      	cmpne	r1, #2
    1900:	d13c      	bne.n	197c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1902:	9906      	ldr	r1, [sp, #24]
    1904:	9b07      	ldr	r3, [sp, #28]
    1906:	eba1 0108 	sub.w	r1, r1, r8
    190a:	4a8b      	ldr	r2, [pc, #556]	; (1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    190c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1910:	eba3 0308 	sub.w	r3, r3, r8
    1914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1918:	2902      	cmp	r1, #2
    191a:	d371      	bcc.n	1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    191c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1920:	d26e      	bcs.n	1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1922:	429a      	cmp	r2, r3
    1924:	d36c      	bcc.n	1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1926:	f04f 0901 	mov.w	r9, #1
    192a:	ab01      	add	r3, sp, #4
    192c:	aa05      	add	r2, sp, #20
    192e:	4631      	mov	r1, r6
    1930:	f7fe ff46 	bl	7c0 <__data_size+0x10c>
    1934:	2800      	cmp	r0, #0
    1936:	d06b      	beq.n	1a10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    1938:	f89d 1014 	ldrb.w	r1, [sp, #20]
    193c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1940:	4633      	mov	r3, r6
    1942:	428a      	cmp	r2, r1
    1944:	d068      	beq.n	1a18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1946:	2005      	movs	r0, #5
    1948:	f7fe fd82 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    194c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1950:	7048      	strb	r0, [r1, #1]
    1952:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1956:	2820      	cmp	r0, #32
    1958:	bf03      	ittte	eq
    195a:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    195e:	f880 a020 	strbeq.w	sl, [r0, #32]
    1962:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1966:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    196a:	bf18      	it	ne
    196c:	f880 a001 	strbne.w	sl, [r0, #1]
    1970:	4632      	mov	r2, r6
    1972:	4651      	mov	r1, sl
    1974:	f05f 0003 	movs.w	r0, #3
    1978:	f7ff fbd2 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    197c:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1980:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1984:	f88d 0004 	strb.w	r0, [sp, #4]
    1988:	f89d 7004 	ldrb.w	r7, [sp, #4]
    198c:	b124      	cbz	r4, 1998 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    198e:	2100      	movs	r1, #0
    1990:	f240 707c 	movw	r0, #1916	; 0x77c
    1994:	f3af 8000 	nop.w
    1998:	4868      	ldr	r0, [pc, #416]	; (1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    199a:	2800      	cmp	r0, #0
    199c:	bf18      	it	ne
    199e:	f3af 8000 	nopne.w
    19a2:	f3ef 8810 	mrs	r8, PRIMASK
    19a6:	b672      	cpsid	i
    19a8:	b124      	cbz	r4, 19b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    19aa:	2100      	movs	r1, #0
    19ac:	f240 7082 	movw	r0, #1922	; 0x782
    19b0:	f3af 8000 	nop.w
    19b4:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    19b8:	f88d 0004 	strb.w	r0, [sp, #4]
    19bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    19c0:	2800      	cmp	r0, #0
    19c2:	f47f af3a 	bne.w	183a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    19c6:	b124      	cbz	r4, 19d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    19c8:	2100      	movs	r1, #0
    19ca:	f240 708a 	movw	r0, #1930	; 0x78a
    19ce:	f3af 8000 	nop.w
    19d2:	f10d 0e18 	add.w	lr, sp, #24
    19d6:	9800      	ldr	r0, [sp, #0]
    19d8:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    19dc:	f100 0008 	add.w	r0, r0, #8
    19e0:	f1b9 0f00 	cmp.w	r9, #0
    19e4:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    19e8:	d044      	beq.n	1a74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    19ea:	b124      	cbz	r4, 19f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    19ec:	2100      	movs	r1, #0
    19ee:	f240 7097 	movw	r0, #1943	; 0x797
    19f2:	f3af 8000 	nop.w
    19f6:	f1bb 0f00 	cmp.w	fp, #0
    19fa:	d12c      	bne.n	1a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    19fc:	e016      	b.n	1a2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    19fe:	e7ff      	b.n	1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a00:	4632      	mov	r2, r6
    1a02:	4651      	mov	r1, sl
    1a04:	2004      	movs	r0, #4
    1a06:	f7ff fb8b 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1a0a:	f04f 0901 	mov.w	r9, #1
    1a0e:	e7b5      	b.n	197c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1a10:	4632      	mov	r2, r6
    1a12:	4651      	mov	r1, sl
    1a14:	2004      	movs	r0, #4
    1a16:	e7af      	b.n	1978 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1a18:	2920      	cmp	r1, #32
    1a1a:	bf19      	ittee	ne
    1a1c:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1a20:	7840      	ldrbne	r0, [r0, #1]
    1a22:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a26:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1a2a:	e78f      	b.n	194c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1a2c:	b19f      	cbz	r7, 1a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1a2e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1a32:	2820      	cmp	r0, #32
    1a34:	d10f      	bne.n	1a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1a36:	b124      	cbz	r4, 1a42 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1a38:	2100      	movs	r1, #0
    1a3a:	f240 709c 	movw	r0, #1948	; 0x79c
    1a3e:	f3af 8000 	nop.w
    1a42:	4631      	mov	r1, r6
    1a44:	2002      	movs	r0, #2
    1a46:	f7ff fb9b 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1a4a:	b920      	cbnz	r0, 1a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
    1a4e:	7800      	ldrb	r0, [r0, #0]
    1a50:	b3f0      	cbz	r0, 1ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1a52:	2801      	cmp	r0, #1
    1a54:	d04c      	beq.n	1af0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1a56:	b124      	cbz	r4, 1a62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1a58:	2100      	movs	r1, #0
    1a5a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1a5e:	f3af 8000 	nop.w
    1a62:	f1bb 0f00 	cmp.w	fp, #0
    1a66:	bf18      	it	ne
    1a68:	2001      	movne	r0, #1
    1a6a:	d04a      	beq.n	1b02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1a6c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1a70:	f04f 0901 	mov.w	r9, #1
    1a74:	b124      	cbz	r4, 1a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1a76:	2100      	movs	r1, #0
    1a78:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1a7c:	f3af 8000 	nop.w
    1a80:	f1b8 0f00 	cmp.w	r8, #0
    1a84:	d045      	beq.n	1b12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1a86:	b124      	cbz	r4, 1a92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1a88:	2100      	movs	r1, #0
    1a8a:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1a8e:	f3af 8000 	nop.w
    1a92:	f1b9 0f00 	cmp.w	r9, #0
    1a96:	d011      	beq.n	1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1a98:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1a9c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1aa0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1aa4:	2820      	cmp	r0, #32
    1aa6:	d009      	beq.n	1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1aa8:	b124      	cbz	r4, 1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1aaa:	2100      	movs	r1, #0
    1aac:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1ab0:	f3af 8000 	nop.w
    1ab4:	4822      	ldr	r0, [pc, #136]	; (1b40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1ab6:	7840      	ldrb	r0, [r0, #1]
    1ab8:	f001 ff36 	bl	3928 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1abc:	b124      	cbz	r4, 1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1abe:	2100      	movs	r1, #0
    1ac0:	f240 70da 	movw	r0, #2010	; 0x7da
    1ac4:	f3af 8000 	nop.w
    1ac8:	b00d      	add	sp, #52	; 0x34
    1aca:	4648      	mov	r0, r9
    1acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ad0:	e7ff      	b.n	1ad2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1ad2:	b124      	cbz	r4, 1ade <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1ad4:	2100      	movs	r1, #0
    1ad6:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1ada:	f3af 8000 	nop.w
    1ade:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1ae2:	4651      	mov	r1, sl
    1ae4:	2004      	movs	r0, #4
    1ae6:	f7ff fb1b 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1aea:	f04f 0901 	mov.w	r9, #1
    1aee:	e7c1      	b.n	1a74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1af0:	2c00      	cmp	r4, #0
    1af2:	f43f aea2 	beq.w	183a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1af6:	2100      	movs	r1, #0
    1af8:	f240 70af 	movw	r0, #1967	; 0x7af
    1afc:	f3af 8000 	nop.w
    1b00:	e69b      	b.n	183a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1b02:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1b06:	2001      	movs	r0, #1
    1b08:	ea20 0101 	bic.w	r1, r0, r1
    1b0c:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1b10:	e7ac      	b.n	1a6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1b12:	4807      	ldr	r0, [pc, #28]	; (1b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1b14:	2800      	cmp	r0, #0
    1b16:	bf18      	it	ne
    1b18:	f3af 8000 	nopne.w
    1b1c:	b662      	cpsie	i
    1b1e:	e7b2      	b.n	1a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1b20:	e000ed04 	.word	0xe000ed04
    1b24:	20000e2c 	.word	0x20000e2c
    1b28:	00000000 	.word	0x00000000
    1b2c:	20000aac 	.word	0x20000aac
    1b30:	00000000 	.word	0x00000000
    1b34:	20000dac 	.word	0x20000dac
    1b38:	003fffff 	.word	0x003fffff
    1b3c:	00000000 	.word	0x00000000
    1b40:	20000010 	.word	0x20000010

00001b44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1b44:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b48:	48a5      	ldr	r0, [pc, #660]	; (1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>)
    1b4a:	b08c      	sub	sp, #48	; 0x30
    1b4c:	6800      	ldr	r0, [r0, #0]
    1b4e:	05c0      	lsls	r0, r0, #23
    1b50:	0dc0      	lsrs	r0, r0, #23
    1b52:	d011      	beq.n	1b78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1b54:	3810      	subs	r0, #16
    1b56:	b240      	sxtb	r0, r0
    1b58:	2800      	cmp	r0, #0
    1b5a:	bfb8      	it	lt
    1b5c:	f000 000f 	andlt.w	r0, r0, #15
    1b60:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1b64:	bfac      	ite	ge
    1b66:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1b6a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1b6e:	0940      	lsrs	r0, r0, #5
    1b70:	bf08      	it	eq
    1b72:	f04f 0901 	moveq.w	r9, #1
    1b76:	d001      	beq.n	1b7c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1b78:	f04f 0900 	mov.w	r9, #0
    1b7c:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b7e:	7800      	ldrb	r0, [r0, #0]
    1b80:	2800      	cmp	r0, #0
    1b82:	f04f 0000 	mov.w	r0, #0
    1b86:	bf1c      	itt	ne
    1b88:	b00d      	addne	sp, #52	; 0x34
    1b8a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b8e:	f8df a254 	ldr.w	sl, [pc, #596]	; 1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1b92:	4d95      	ldr	r5, [pc, #596]	; (1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>)
    1b94:	4c95      	ldr	r4, [pc, #596]	; (1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>)
    1b96:	f04f 0b00 	mov.w	fp, #0
    1b9a:	900b      	str	r0, [sp, #44]	; 0x2c
    1b9c:	b125      	cbz	r5, 1ba8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1b9e:	2100      	movs	r1, #0
    1ba0:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1ba4:	f3af 8000 	nop.w
    1ba8:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1bac:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1bb0:	f04f 0800 	mov.w	r8, #0
    1bb4:	b125      	cbz	r5, 1bc0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1bb6:	2100      	movs	r1, #0
    1bb8:	f240 605d 	movw	r0, #1629	; 0x65d
    1bbc:	f3af 8000 	nop.w
    1bc0:	f1b9 0f00 	cmp.w	r9, #0
    1bc4:	d11d      	bne.n	1c02 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1bc6:	4637      	mov	r7, r6
    1bc8:	2001      	movs	r0, #1
    1bca:	ea20 0607 	bic.w	r6, r0, r7
    1bce:	4888      	ldr	r0, [pc, #544]	; (1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>)
    1bd0:	2240      	movs	r2, #64	; 0x40
    1bd2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1bd6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1bda:	f009 fecf 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1bde:	b125      	cbz	r5, 1bea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1be0:	2100      	movs	r1, #0
    1be2:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1be6:	f3af 8000 	nop.w
    1bea:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1bee:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1bf2:	6a09      	ldr	r1, [r1, #32]
    1bf4:	6201      	str	r1, [r0, #32]
    1bf6:	b125      	cbz	r5, 1c02 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1bf8:	2100      	movs	r1, #0
    1bfa:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1bfe:	f3af 8000 	nop.w
    1c02:	b125      	cbz	r5, 1c0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1c04:	2100      	movs	r1, #0
    1c06:	f240 6065 	movw	r0, #1637	; 0x665
    1c0a:	f3af 8000 	nop.w
    1c0e:	f000 feb7 	bl	2980 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1c12:	4607      	mov	r7, r0
    1c14:	4633      	mov	r3, r6
    1c16:	466a      	mov	r2, sp
    1c18:	990c      	ldr	r1, [sp, #48]	; 0x30
    1c1a:	f7ff f8db 	bl	dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>
    1c1e:	b125      	cbz	r5, 1c2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1c20:	2100      	movs	r1, #0
    1c22:	f240 606b 	movw	r0, #1643	; 0x66b
    1c26:	f3af 8000 	nop.w
    1c2a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1c2e:	2820      	cmp	r0, #32
    1c30:	d014      	beq.n	1c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1c32:	6920      	ldr	r0, [r4, #16]
    1c34:	9900      	ldr	r1, [sp, #0]
    1c36:	1a09      	subs	r1, r1, r0
    1c38:	0209      	lsls	r1, r1, #8
    1c3a:	17ca      	asrs	r2, r1, #31
    1c3c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1c40:	1209      	asrs	r1, r1, #8
    1c42:	d50b      	bpl.n	1c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1c44:	e9dd 2100 	ldrd	r2, r1, [sp]
    1c48:	1a89      	subs	r1, r1, r2
    1c4a:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1c4e:	4408      	add	r0, r1
    1c50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c54:	e9cd 2000 	strd	r2, r0, [sp]
    1c58:	f04f 0801 	mov.w	r8, #1
    1c5c:	b14d      	cbz	r5, 1c72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1c5e:	2100      	movs	r1, #0
    1c60:	f240 6075 	movw	r0, #1653	; 0x675
    1c64:	f3af 8000 	nop.w
    1c68:	2100      	movs	r1, #0
    1c6a:	f240 607b 	movw	r0, #1659	; 0x67b
    1c6e:	f3af 8000 	nop.w
    1c72:	9800      	ldr	r0, [sp, #0]
    1c74:	9901      	ldr	r1, [sp, #4]
    1c76:	1bc0      	subs	r0, r0, r7
    1c78:	1bc9      	subs	r1, r1, r7
    1c7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1c82:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1c86:	d205      	bcs.n	1c94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1c88:	458a      	cmp	sl, r1
    1c8a:	d303      	bcc.n	1c94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1c8c:	f1b9 0f00 	cmp.w	r9, #0
    1c90:	d10c      	bne.n	1cac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    1c92:	e003      	b.n	1c9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    1c94:	f1b9 0f00 	cmp.w	r9, #0
    1c98:	d038      	beq.n	1d0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    1c9a:	e094      	b.n	1dc6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1c9c:	4633      	mov	r3, r6
    1c9e:	463a      	mov	r2, r7
    1ca0:	4669      	mov	r1, sp
    1ca2:	4854      	ldr	r0, [pc, #336]	; (1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>)
    1ca4:	f7fe fc10 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
    1ca8:	ea48 0800 	orr.w	r8, r8, r0
    1cac:	f1b8 0f00 	cmp.w	r8, #0
    1cb0:	d022      	beq.n	1cf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    1cb2:	9800      	ldr	r0, [sp, #0]
    1cb4:	f009 fcf4 	bl	b6a0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1cb8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1cbc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1cc0:	4b4d      	ldr	r3, [pc, #308]	; (1df8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xac>)
    1cc2:	4411      	add	r1, r2
    1cc4:	1c49      	adds	r1, r1, #1
    1cc6:	1842      	adds	r2, r0, r1
    1cc8:	4298      	cmp	r0, r3
    1cca:	d841      	bhi.n	1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1ccc:	4849      	ldr	r0, [pc, #292]	; (1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>)
    1cce:	4281      	cmp	r1, r0
    1cd0:	dc5a      	bgt.n	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1cd2:	4240      	negs	r0, r0
    1cd4:	4281      	cmp	r1, r0
    1cd6:	db5f      	blt.n	1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1cd8:	1c58      	adds	r0, r3, #1
    1cda:	4290      	cmp	r0, r2
    1cdc:	bfdc      	itt	le
    1cde:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1ce2:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1ce6:	dd05      	ble.n	1cf4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    1ce8:	2a00      	cmp	r2, #0
    1cea:	bfbc      	itt	lt
    1cec:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1cf0:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1cf4:	980c      	ldr	r0, [sp, #48]	; 0x30
    1cf6:	60c2      	str	r2, [r0, #12]
    1cf8:	2001      	movs	r0, #1
    1cfa:	900b      	str	r0, [sp, #44]	; 0x2c
    1cfc:	2d00      	cmp	r5, #0
    1cfe:	d062      	beq.n	1dc6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1d00:	2100      	movs	r1, #0
    1d02:	f240 608e 	movw	r0, #1678	; 0x68e
    1d06:	f3af 8000 	nop.w
    1d0a:	e05c      	b.n	1dc6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1d0c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1d10:	aa08      	add	r2, sp, #32
    1d12:	a907      	add	r1, sp, #28
    1d14:	f000 fcd6 	bl	26c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1d18:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1d1c:	2820      	cmp	r0, #32
    1d1e:	d01c      	beq.n	1d5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d20:	6920      	ldr	r0, [r4, #16]
    1d22:	1d40      	adds	r0, r0, #5
    1d24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d28:	e9dd 2100 	ldrd	r2, r1, [sp]
    1d2c:	1a89      	subs	r1, r1, r2
    1d2e:	4401      	add	r1, r0
    1d30:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d34:	e9cd 0100 	strd	r0, r1, [sp]
    1d38:	f009 fcb2 	bl	b6a0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d3c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1d40:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1d44:	4b2c      	ldr	r3, [pc, #176]	; (1df8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xac>)
    1d46:	4411      	add	r1, r2
    1d48:	1c4a      	adds	r2, r1, #1
    1d4a:	1881      	adds	r1, r0, r2
    1d4c:	4298      	cmp	r0, r3
    1d4e:	d918      	bls.n	1d82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36>
    1d50:	f240 6109 	movw	r1, #1545	; 0x609
    1d54:	2070      	movs	r0, #112	; 0x70
    1d56:	f001 fd17 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d5a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1d5e:	f107 0609 	add.w	r6, r7, #9
    1d62:	b120      	cbz	r0, 1d6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1d64:	f001 fc98 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d68:	2800      	cmp	r0, #0
    1d6a:	bf08      	it	eq
    1d6c:	3632      	addeq	r6, #50	; 0x32
    1d6e:	4823      	ldr	r0, [pc, #140]	; (1dfc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>)
    1d70:	7841      	ldrb	r1, [r0, #1]
    1d72:	9807      	ldr	r0, [sp, #28]
    1d74:	4281      	cmp	r1, r0
    1d76:	bf84      	itt	hi
    1d78:	1a08      	subhi	r0, r1, r0
    1d7a:	4406      	addhi	r6, r0
    1d7c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1d80:	e7d2      	b.n	1d28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    1d82:	481c      	ldr	r0, [pc, #112]	; (1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>)
    1d84:	4282      	cmp	r2, r0
    1d86:	dd04      	ble.n	1d92 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x46>
    1d88:	f240 610a 	movw	r1, #1546	; 0x60a
    1d8c:	2070      	movs	r0, #112	; 0x70
    1d8e:	f001 fcfb 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d92:	481b      	ldr	r0, [pc, #108]	; (1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>)
    1d94:	4282      	cmp	r2, r0
    1d96:	da04      	bge.n	1da2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56>
    1d98:	f240 610b 	movw	r1, #1547	; 0x60b
    1d9c:	2070      	movs	r0, #112	; 0x70
    1d9e:	f001 fcf3 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1da2:	4818      	ldr	r0, [pc, #96]	; (1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>)
    1da4:	4288      	cmp	r0, r1
    1da6:	bfdc      	itt	le
    1da8:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1dac:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1db0:	dd05      	ble.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1db2:	2900      	cmp	r1, #0
    1db4:	bfbc      	itt	lt
    1db6:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1dba:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1dbe:	980c      	ldr	r0, [sp, #48]	; 0x30
    1dc0:	60c1      	str	r1, [r0, #12]
    1dc2:	2001      	movs	r0, #1
    1dc4:	900b      	str	r0, [sp, #44]	; 0x2c
    1dc6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1dca:	f88d 0010 	strb.w	r0, [sp, #16]
    1dce:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1dd2:	2800      	cmp	r0, #0
    1dd4:	f47f aee2 	bne.w	1b9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1dd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1dda:	b00d      	add	sp, #52	; 0x34
    1ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1de0:	e000ed04 	.word	0xe000ed04
    1de4:	003fffff 	.word	0x003fffff
    1de8:	00000000 	.word	0x00000000
    1dec:	20000e2c 	.word	0x20000e2c
    1df0:	20000dac 	.word	0x20000dac
    1df4:	07a12000 	.word	0x07a12000
    1df8:	1e847fff 	.word	0x1e847fff
    1dfc:	20000012 	.word	0x20000012
    1e00:	f85ee000 	.word	0xf85ee000
    1e04:	1e848000 	.word	0x1e848000

00001e08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1e08:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e0c:	4d88      	ldr	r5, [pc, #544]	; (2030 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    1e0e:	b08c      	sub	sp, #48	; 0x30
    1e10:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1e14:	2000      	movs	r0, #0
    1e16:	9009      	str	r0, [sp, #36]	; 0x24
    1e18:	2001      	movs	r0, #1
    1e1a:	4c86      	ldr	r4, [pc, #536]	; (2034 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    1e1c:	f04f 0900 	mov.w	r9, #0
    1e20:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1e24:	4680      	mov	r8, r0
    1e26:	9008      	str	r0, [sp, #32]
    1e28:	b124      	cbz	r4, 1e34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1e2a:	2100      	movs	r1, #0
    1e2c:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1e30:	f3af 8000 	nop.w
    1e34:	9808      	ldr	r0, [sp, #32]
    1e36:	2800      	cmp	r0, #0
    1e38:	d037      	beq.n	1eaa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1e3a:	bf00      	nop
    1e3c:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1e40:	b124      	cbz	r4, 1e4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1e42:	2100      	movs	r1, #0
    1e44:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1e48:	f3af 8000 	nop.w
    1e4c:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1e50:	2240      	movs	r2, #64	; 0x40
    1e52:	ea28 060a 	bic.w	r6, r8, sl
    1e56:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1e5a:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1e5e:	4683      	mov	fp, r0
    1e60:	f009 fd8c 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1e64:	b124      	cbz	r4, 1e70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1e66:	2100      	movs	r1, #0
    1e68:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1e6c:	f3af 8000 	nop.w
    1e70:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1e74:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1e78:	9000      	str	r0, [sp, #0]
    1e7a:	6a09      	ldr	r1, [r1, #32]
    1e7c:	6201      	str	r1, [r0, #32]
    1e7e:	b124      	cbz	r4, 1e8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1e80:	2100      	movs	r1, #0
    1e82:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1e86:	f3af 8000 	nop.w
    1e8a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1e8e:	f88d 0008 	strb.w	r0, [sp, #8]
    1e92:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1e96:	b178      	cbz	r0, 1eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1e98:	2c00      	cmp	r4, #0
    1e9a:	bf1c      	itt	ne
    1e9c:	2100      	movne	r1, #0
    1e9e:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1ea2:	d0c1      	beq.n	1e28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1ea4:	f3af 8000 	nop.w
    1ea8:	e7be      	b.n	1e28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1eaa:	4863      	ldr	r0, [pc, #396]	; (2038 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    1eac:	2800      	cmp	r0, #0
    1eae:	bf18      	it	ne
    1eb0:	f3af 8000 	nopne.w
    1eb4:	b662      	cpsie	i
    1eb6:	e7c1      	b.n	1e3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1eb8:	b124      	cbz	r4, 1ec4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1eba:	2100      	movs	r1, #0
    1ebc:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1ec0:	f3af 8000 	nop.w
    1ec4:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ec6:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1eca:	2803      	cmp	r0, #3
    1ecc:	d172      	bne.n	1fb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    1ece:	f8dd a000 	ldr.w	sl, [sp]
    1ed2:	f8cd a018 	str.w	sl, [sp, #24]
    1ed6:	990c      	ldr	r1, [sp, #48]	; 0x30
    1ed8:	f89a 0020 	ldrb.w	r0, [sl, #32]
    1edc:	4288      	cmp	r0, r1
    1ede:	bf14      	ite	ne
    1ee0:	f04f 0b00 	movne.w	fp, #0
    1ee4:	f04f 0b01 	moveq.w	fp, #1
    1ee8:	f10a 0c20 	add.w	ip, sl, #32
    1eec:	4686      	mov	lr, r0
    1eee:	2220      	movs	r2, #32
    1ef0:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1ef4:	e003      	b.n	1efe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1ef6:	4602      	mov	r2, r0
    1ef8:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1efc:	7840      	ldrb	r0, [r0, #1]
    1efe:	4288      	cmp	r0, r1
    1f00:	d002      	beq.n	1f08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    1f02:	2820      	cmp	r0, #32
    1f04:	d00a      	beq.n	1f1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1f06:	e7f6      	b.n	1ef6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    1f08:	2820      	cmp	r0, #32
    1f0a:	d007      	beq.n	1f1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1f0c:	4586      	cmp	lr, r0
    1f0e:	d107      	bne.n	1f20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    1f10:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1f14:	7840      	ldrb	r0, [r0, #1]
    1f16:	f88c 0000 	strb.w	r0, [ip]
    1f1a:	e007      	b.n	1f2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    1f1c:	4648      	mov	r0, r9
    1f1e:	e00c      	b.n	1f3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    1f20:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1f24:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1f28:	7840      	ldrb	r0, [r0, #1]
    1f2a:	7048      	strb	r0, [r1, #1]
    1f2c:	b124      	cbz	r4, 1f38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    1f2e:	2100      	movs	r1, #0
    1f30:	f240 5037 	movw	r0, #1335	; 0x537
    1f34:	f3af 8000 	nop.w
    1f38:	4640      	mov	r0, r8
    1f3a:	ea10 0f0b 	tst.w	r0, fp
    1f3e:	bf18      	it	ne
    1f40:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    1f44:	2800      	cmp	r0, #0
    1f46:	d052      	beq.n	1fee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    1f48:	b124      	cbz	r4, 1f54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    1f4a:	2100      	movs	r1, #0
    1f4c:	f240 70fd 	movw	r0, #2045	; 0x7fd
    1f50:	f3af 8000 	nop.w
    1f54:	4632      	mov	r2, r6
    1f56:	2001      	movs	r0, #1
    1f58:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f5a:	f7ff f8e1 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1f5e:	9806      	ldr	r0, [sp, #24]
    1f60:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1f64:	f88d 0008 	strb.w	r0, [sp, #8]
    1f68:	f89d a008 	ldrb.w	sl, [sp, #8]
    1f6c:	b124      	cbz	r4, 1f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    1f6e:	2100      	movs	r1, #0
    1f70:	f640 0008 	movw	r0, #2056	; 0x808
    1f74:	f3af 8000 	nop.w
    1f78:	4830      	ldr	r0, [pc, #192]	; (203c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    1f7a:	2800      	cmp	r0, #0
    1f7c:	bf18      	it	ne
    1f7e:	f3af 8000 	nopne.w
    1f82:	f3ef 8010 	mrs	r0, PRIMASK
    1f86:	b672      	cpsid	i
    1f88:	9008      	str	r0, [sp, #32]
    1f8a:	b124      	cbz	r4, 1f96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    1f8c:	2100      	movs	r1, #0
    1f8e:	f640 000d 	movw	r0, #2061	; 0x80d
    1f92:	f3af 8000 	nop.w
    1f96:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f9a:	f88d 0008 	strb.w	r0, [sp, #8]
    1f9e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1fa2:	b140      	cbz	r0, 1fb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1fa4:	2c00      	cmp	r4, #0
    1fa6:	bf1c      	itt	ne
    1fa8:	2100      	movne	r1, #0
    1faa:	f640 0011 	movwne	r0, #2065	; 0x811
    1fae:	f43f af3b 	beq.w	1e28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1fb2:	e777      	b.n	1ea4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    1fb4:	e01b      	b.n	1fee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    1fb6:	f1ba 0f00 	cmp.w	sl, #0
    1fba:	d008      	beq.n	1fce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    1fbc:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1fc0:	2820      	cmp	r0, #32
    1fc2:	d104      	bne.n	1fce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    1fc4:	4631      	mov	r1, r6
    1fc6:	2002      	movs	r0, #2
    1fc8:	f7ff f8da 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1fcc:	b308      	cbz	r0, 2012 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    1fce:	b124      	cbz	r4, 1fda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    1fd0:	2100      	movs	r1, #0
    1fd2:	f640 0025 	movw	r0, #2085	; 0x825
    1fd6:	f3af 8000 	nop.w
    1fda:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1fde:	ea28 0000 	bic.w	r0, r8, r0
    1fe2:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    1fe6:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1fea:	2001      	movs	r0, #1
    1fec:	9009      	str	r0, [sp, #36]	; 0x24
    1fee:	b124      	cbz	r4, 1ffa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    1ff0:	2100      	movs	r1, #0
    1ff2:	f640 002e 	movw	r0, #2094	; 0x82e
    1ff6:	f3af 8000 	nop.w
    1ffa:	9808      	ldr	r0, [sp, #32]
    1ffc:	b188      	cbz	r0, 2022 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    1ffe:	b124      	cbz	r4, 200a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    2000:	2100      	movs	r1, #0
    2002:	f640 0032 	movw	r0, #2098	; 0x832
    2006:	f3af 8000 	nop.w
    200a:	9809      	ldr	r0, [sp, #36]	; 0x24
    200c:	b00d      	add	sp, #52	; 0x34
    200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2012:	2c00      	cmp	r4, #0
    2014:	d0f1      	beq.n	1ffa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2016:	2100      	movs	r1, #0
    2018:	f44f 6002 	mov.w	r0, #2080	; 0x820
    201c:	f3af 8000 	nop.w
    2020:	e7e6      	b.n	1ff0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2022:	4805      	ldr	r0, [pc, #20]	; (2038 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2024:	2800      	cmp	r0, #0
    2026:	bf18      	it	ne
    2028:	f3af 8000 	nopne.w
    202c:	b662      	cpsie	i
    202e:	e7e6      	b.n	1ffe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    2030:	20000e2c 	.word	0x20000e2c
	...

00002040 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2040:	2820      	cmp	r0, #32
    2042:	bf24      	itt	cs
    2044:	2000      	movcs	r0, #0
    2046:	4770      	bxcs	lr
    2048:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    204c:	4b03      	ldr	r3, [pc, #12]	; (205c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    204e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    2052:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2056:	6042      	str	r2, [r0, #4]
    2058:	2001      	movs	r0, #1
    205a:	4770      	bx	lr
    205c:	20000aac 	.word	0x20000aac

00002060 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2060:	b510      	push	{r4, lr}
    2062:	2820      	cmp	r0, #32
    2064:	d211      	bcs.n	208a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2066:	490e      	ldr	r1, [pc, #56]	; (20a0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2068:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    206c:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2070:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2074:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2078:	b13b      	cbz	r3, 208a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    207a:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    207e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2082:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2086:	2a01      	cmp	r2, #1
    2088:	d001      	beq.n	208e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    208a:	2000      	movs	r0, #0
    208c:	bd10      	pop	{r4, pc}
    208e:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    2092:	4601      	mov	r1, r0
    2094:	2000      	movs	r0, #0
    2096:	f7ff f843 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    209a:	2001      	movs	r0, #1
    209c:	bd10      	pop	{r4, pc}
    209e:	0000      	.short	0x0000
    20a0:	20000e2c 	.word	0x20000e2c

000020a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    20a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20a8:	4e80      	ldr	r6, [pc, #512]	; (22ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    20aa:	4680      	mov	r8, r0
    20ac:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    20b0:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    20b4:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    20b8:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    20bc:	2800      	cmp	r0, #0
    20be:	d068      	beq.n	2192 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    20c0:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    20c4:	4d7a      	ldr	r5, [pc, #488]	; (22b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    20c6:	b125      	cbz	r5, 20d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    20c8:	2100      	movs	r1, #0
    20ca:	f640 30c1 	movw	r0, #3009	; 0xbc1
    20ce:	f3af 8000 	nop.w
    20d2:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    20d6:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    20da:	2801      	cmp	r0, #1
    20dc:	d018      	beq.n	2110 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    20de:	b2c0      	uxtb	r0, r0
    20e0:	2804      	cmp	r0, #4
    20e2:	bf1c      	itt	ne
    20e4:	2805      	cmpne	r0, #5
    20e6:	2806      	cmpne	r0, #6
    20e8:	d058      	beq.n	219c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    20ea:	b12d      	cbz	r5, 20f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    20ec:	f04f 0100 	mov.w	r1, #0
    20f0:	f640 30cd 	movw	r0, #3021	; 0xbcd
    20f4:	f3af 8000 	nop.w
    20f8:	f001 fc6c 	bl	39d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    20fc:	b125      	cbz	r5, 2108 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    20fe:	2100      	movs	r1, #0
    2100:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2104:	f3af 8000 	nop.w
    2108:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    210c:	2801      	cmp	r0, #1
    210e:	d1e6      	bne.n	20de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2110:	2401      	movs	r4, #1
    2112:	b125      	cbz	r5, 211e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2114:	2100      	movs	r1, #0
    2116:	f640 30d8 	movw	r0, #3032	; 0xbd8
    211a:	f3af 8000 	nop.w
    211e:	2c00      	cmp	r4, #0
    2120:	d042      	beq.n	21a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    2122:	2000      	movs	r0, #0
    2124:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2128:	b125      	cbz	r5, 2134 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    212a:	2100      	movs	r1, #0
    212c:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2130:	f3af 8000 	nop.w
    2134:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2138:	2001      	movs	r0, #1
    213a:	ea20 090b 	bic.w	r9, r0, fp
    213e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2142:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2146:	2240      	movs	r2, #64	; 0x40
    2148:	f009 fc18 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    214c:	b125      	cbz	r5, 2158 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    214e:	2100      	movs	r1, #0
    2150:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2154:	f3af 8000 	nop.w
    2158:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    215c:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2160:	6a00      	ldr	r0, [r0, #32]
    2162:	f8ca 0020 	str.w	r0, [sl, #32]
    2166:	b125      	cbz	r5, 2172 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    2168:	2100      	movs	r1, #0
    216a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    216e:	f3af 8000 	nop.w
    2172:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2176:	f88d 0000 	strb.w	r0, [sp]
    217a:	f89d 0000 	ldrb.w	r0, [sp]
    217e:	b1d0      	cbz	r0, 21b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    2180:	2d00      	cmp	r5, #0
    2182:	bf1c      	itt	ne
    2184:	2100      	movne	r1, #0
    2186:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    218a:	d0c2      	beq.n	2112 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    218c:	f3af 8000 	nop.w
    2190:	e7bf      	b.n	2112 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2192:	f640 31b8 	movw	r1, #3000	; 0xbb8
    2196:	2070      	movs	r0, #112	; 0x70
    2198:	f001 faf6 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    219c:	464a      	mov	r2, r9
    219e:	4641      	mov	r1, r8
    21a0:	2001      	movs	r0, #1
    21a2:	f7fe ffbd 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    21a6:	e7a9      	b.n	20fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    21a8:	4842      	ldr	r0, [pc, #264]	; (22b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    21aa:	2800      	cmp	r0, #0
    21ac:	bf18      	it	ne
    21ae:	f3af 8000 	nopne.w
    21b2:	b662      	cpsie	i
    21b4:	e7b5      	b.n	2122 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    21b6:	b125      	cbz	r5, 21c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    21b8:	2100      	movs	r1, #0
    21ba:	f640 30e7 	movw	r0, #3047	; 0xbe7
    21be:	f3af 8000 	nop.w
    21c2:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    21c6:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    21ca:	4614      	mov	r4, r2
    21cc:	f04f 0b20 	mov.w	fp, #32
    21d0:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21d4:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    21d8:	e003      	b.n	21e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    21da:	46a3      	mov	fp, r4
    21dc:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    21e0:	785c      	ldrb	r4, [r3, #1]
    21e2:	4544      	cmp	r4, r8
    21e4:	d002      	beq.n	21ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    21e6:	2c20      	cmp	r4, #32
    21e8:	d02b      	beq.n	2242 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    21ea:	e7f6      	b.n	21da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    21ec:	2c20      	cmp	r4, #32
    21ee:	d028      	beq.n	2242 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    21f0:	42a2      	cmp	r2, r4
    21f2:	d104      	bne.n	21fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    21f4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    21f8:	7840      	ldrb	r0, [r0, #1]
    21fa:	7008      	strb	r0, [r1, #0]
    21fc:	e005      	b.n	220a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    21fe:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2202:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    2206:	7849      	ldrb	r1, [r1, #1]
    2208:	7041      	strb	r1, [r0, #1]
    220a:	f1ba 0f00 	cmp.w	sl, #0
    220e:	d011      	beq.n	2234 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2210:	b125      	cbz	r5, 221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    2212:	2100      	movs	r1, #0
    2214:	f240 502f 	movw	r0, #1327	; 0x52f
    2218:	f3af 8000 	nop.w
    221c:	f89a 0000 	ldrb.w	r0, [sl]
    2220:	42a0      	cmp	r0, r4
    2222:	d107      	bne.n	2234 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2224:	b125      	cbz	r5, 2230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    2226:	2100      	movs	r1, #0
    2228:	f240 5032 	movw	r0, #1330	; 0x532
    222c:	f3af 8000 	nop.w
    2230:	f88a b000 	strb.w	fp, [sl]
    2234:	b15d      	cbz	r5, 224e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2236:	2100      	movs	r1, #0
    2238:	f240 5037 	movw	r0, #1335	; 0x537
    223c:	f3af 8000 	nop.w
    2240:	e000      	b.n	2244 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    2242:	b125      	cbz	r5, 224e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2244:	2100      	movs	r1, #0
    2246:	f640 30eb 	movw	r0, #3051	; 0xbeb
    224a:	f3af 8000 	nop.w
    224e:	481a      	ldr	r0, [pc, #104]	; (22b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2250:	2800      	cmp	r0, #0
    2252:	bf18      	it	ne
    2254:	f3af 8000 	nopne.w
    2258:	f3ef 8410 	mrs	r4, PRIMASK
    225c:	b672      	cpsid	i
    225e:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2262:	f88d 0000 	strb.w	r0, [sp]
    2266:	f89d 0000 	ldrb.w	r0, [sp]
    226a:	b138      	cbz	r0, 227c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    226c:	2d00      	cmp	r5, #0
    226e:	bf1c      	itt	ne
    2270:	2100      	movne	r1, #0
    2272:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    2276:	f43f af4c 	beq.w	2112 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    227a:	e787      	b.n	218c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    227c:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2280:	2001      	movs	r0, #1
    2282:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2286:	b154      	cbz	r4, 229e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2288:	2d00      	cmp	r5, #0
    228a:	bf08      	it	eq
    228c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2290:	2100      	movs	r1, #0
    2292:	f640 30fe 	movw	r0, #3070	; 0xbfe
    2296:	f3af 8000 	nop.w
    229a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    229e:	4805      	ldr	r0, [pc, #20]	; (22b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    22a0:	2800      	cmp	r0, #0
    22a2:	bf18      	it	ne
    22a4:	f3af 8000 	nopne.w
    22a8:	b662      	cpsie	i
    22aa:	e7ed      	b.n	2288 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    22ac:	20000e2c 	.word	0x20000e2c
	...

000022bc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    22bc:	b570      	push	{r4, r5, r6, lr}
    22be:	460d      	mov	r5, r1
    22c0:	4606      	mov	r6, r0
    22c2:	f001 f9d7 	bl	3674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    22c6:	480f      	ldr	r0, [pc, #60]	; (2304 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    22c8:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    22cc:	2400      	movs	r4, #0
    22ce:	3880      	subs	r0, #128	; 0x80
    22d0:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    22d4:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    22d8:	b129      	cbz	r1, 22e6 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    22da:	1c61      	adds	r1, r4, #1
    22dc:	b2cc      	uxtb	r4, r1
    22de:	2c20      	cmp	r4, #32
    22e0:	d3f8      	bcc.n	22d4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    22e2:	2020      	movs	r0, #32
    22e4:	bd70      	pop	{r4, r5, r6, pc}
    22e6:	4808      	ldr	r0, [pc, #32]	; (2308 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    22e8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    22ec:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    22f0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    22f4:	4621      	mov	r1, r4
    22f6:	6045      	str	r5, [r0, #4]
    22f8:	2001      	movs	r0, #1
    22fa:	f7fe ff11 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    22fe:	4620      	mov	r0, r4
    2300:	bd70      	pop	{r4, r5, r6, pc}
    2302:	0000      	.short	0x0000
    2304:	20000e2c 	.word	0x20000e2c
    2308:	20000aac 	.word	0x20000aac

0000230c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2310:	b083      	sub	sp, #12
    2312:	f000 fb35 	bl	2980 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2316:	4605      	mov	r5, r0
    2318:	f000 fdfe 	bl	2f18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    231c:	4c67      	ldr	r4, [pc, #412]	; (24bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    231e:	68a0      	ldr	r0, [r4, #8]
    2320:	f1b0 3fff 	cmp.w	r0, #4294967295
    2324:	bf1c      	itt	ne
    2326:	f04f 30ff 	movne.w	r0, #4294967295
    232a:	60a0      	strne	r0, [r4, #8]
    232c:	7fa0      	ldrb	r0, [r4, #30]
    232e:	f8df b190 	ldr.w	fp, [pc, #400]	; 24c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    2332:	b9a8      	cbnz	r0, 2360 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2334:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2338:	1a08      	subs	r0, r1, r0
    233a:	0200      	lsls	r0, r0, #8
    233c:	17c1      	asrs	r1, r0, #31
    233e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2342:	1200      	asrs	r0, r0, #8
    2344:	f44f 710c 	mov.w	r1, #560	; 0x230
    2348:	f009 f9d7 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    234c:	6921      	ldr	r1, [r4, #16]
    234e:	4408      	add	r0, r1
    2350:	1a28      	subs	r0, r5, r0
    2352:	0200      	lsls	r0, r0, #8
    2354:	17c1      	asrs	r1, r0, #31
    2356:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    235a:	1200      	asrs	r0, r0, #8
    235c:	0fc0      	lsrs	r0, r0, #31
    235e:	d013      	beq.n	2388 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2360:	7e60      	ldrb	r0, [r4, #25]
    2362:	b328      	cbz	r0, 23b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2364:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2368:	f88d 0000 	strb.w	r0, [sp]
    236c:	f89d 0000 	ldrb.w	r0, [sp]
    2370:	b1f0      	cbz	r0, 23b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2372:	f000 fc13 	bl	2b9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2376:	bf00      	nop
    2378:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    237c:	b1f0      	cbz	r0, 23bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    237e:	f240 4147 	movw	r1, #1095	; 0x447
    2382:	2070      	movs	r0, #112	; 0x70
    2384:	f001 fa00 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2388:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    238c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2390:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2394:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2398:	6840      	ldr	r0, [r0, #4]
    239a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    239e:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    23a2:	2108      	movs	r1, #8
    23a4:	4790      	blx	r2
    23a6:	f44f 6186 	mov.w	r1, #1072	; 0x430
    23aa:	2070      	movs	r0, #112	; 0x70
    23ac:	f001 f9ec 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23b0:	1ce8      	adds	r0, r5, #3
    23b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23b6:	f000 fae9 	bl	298c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    23ba:	e7dd      	b.n	2378 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    23bc:	f04f 0a01 	mov.w	sl, #1
    23c0:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    23c4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    23c8:	2820      	cmp	r0, #32
    23ca:	d024      	beq.n	2416 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    23cc:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    23d0:	2020      	movs	r0, #32
    23d2:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    23d6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    23da:	2600      	movs	r6, #0
    23dc:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    23e0:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    23e4:	4837      	ldr	r0, [pc, #220]	; (24c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    23e6:	6026      	str	r6, [r4, #0]
    23e8:	7800      	ldrb	r0, [r0, #0]
    23ea:	2802      	cmp	r0, #2
    23ec:	bf16      	itet	ne
    23ee:	2803      	cmpne	r0, #3
    23f0:	2001      	moveq	r0, #1
    23f2:	2000      	movne	r0, #0
    23f4:	7720      	strb	r0, [r4, #28]
    23f6:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    23fa:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    23fe:	f899 0020 	ldrb.w	r0, [r9, #32]
    2402:	2820      	cmp	r0, #32
    2404:	d031      	beq.n	246a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2406:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    240a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    240e:	7d81      	ldrb	r1, [r0, #22]
    2410:	2901      	cmp	r1, #1
    2412:	d005      	beq.n	2420 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    2414:	e029      	b.n	246a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2416:	f240 414a 	movw	r1, #1098	; 0x44a
    241a:	2070      	movs	r0, #112	; 0x70
    241c:	f001 f9b4 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2420:	46ab      	mov	fp, r5
    2422:	f100 0508 	add.w	r5, r0, #8
    2426:	8a40      	ldrh	r0, [r0, #18]
    2428:	aa01      	add	r2, sp, #4
    242a:	4669      	mov	r1, sp
    242c:	f000 f94a 	bl	26c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2430:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2434:	2820      	cmp	r0, #32
    2436:	d004      	beq.n	2442 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    2438:	6920      	ldr	r0, [r4, #16]
    243a:	1d40      	adds	r0, r0, #5
    243c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2440:	e00b      	b.n	245a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    2442:	8968      	ldrh	r0, [r5, #10]
    2444:	f10b 0b09 	add.w	fp, fp, #9
    2448:	b128      	cbz	r0, 2456 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    244a:	f001 f925 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    244e:	2800      	cmp	r0, #0
    2450:	bf08      	it	eq
    2452:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    2456:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    245a:	e9d5 2100 	ldrd	r2, r1, [r5]
    245e:	1a89      	subs	r1, r1, r2
    2460:	6028      	str	r0, [r5, #0]
    2462:	4408      	add	r0, r1
    2464:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2468:	6068      	str	r0, [r5, #4]
    246a:	4639      	mov	r1, r7
    246c:	2001      	movs	r0, #1
    246e:	f7fe fe87 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    2472:	2800      	cmp	r0, #0
    2474:	d0f9      	beq.n	246a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2476:	4814      	ldr	r0, [pc, #80]	; (24c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    2478:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    247c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2480:	2802      	cmp	r0, #2
    2482:	d104      	bne.n	248e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    2484:	463a      	mov	r2, r7
    2486:	4641      	mov	r1, r8
    2488:	2006      	movs	r0, #6
    248a:	f7fe fe49 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    248e:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2492:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    2496:	2820      	cmp	r0, #32
    2498:	d003      	beq.n	24a2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    249a:	480c      	ldr	r0, [pc, #48]	; (24cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    249c:	7840      	ldrb	r0, [r0, #1]
    249e:	f001 fa43 	bl	3928 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    24a2:	7f20      	ldrb	r0, [r4, #28]
    24a4:	2800      	cmp	r0, #0
    24a6:	bf04      	itt	eq
    24a8:	b003      	addeq	sp, #12
    24aa:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24ae:	f000 fd7d 	bl	2fac <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    24b2:	7726      	strb	r6, [r4, #28]
    24b4:	7766      	strb	r6, [r4, #29]
    24b6:	b003      	add	sp, #12
    24b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24bc:	20000e2c 	.word	0x20000e2c
    24c0:	20000aac 	.word	0x20000aac
    24c4:	20000012 	.word	0x20000012
    24c8:	20000dac 	.word	0x20000dac
    24cc:	20000010 	.word	0x20000010

000024d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    24d0:	b510      	push	{r4, lr}
    24d2:	4c32      	ldr	r4, [pc, #200]	; (259c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    24d4:	b082      	sub	sp, #8
    24d6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24da:	2920      	cmp	r1, #32
    24dc:	d008      	beq.n	24f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    24de:	68a1      	ldr	r1, [r4, #8]
    24e0:	f1b1 3fff 	cmp.w	r1, #4294967295
    24e4:	d009      	beq.n	24fa <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    24e6:	f640 21e9 	movw	r1, #2793	; 0xae9
    24ea:	2070      	movs	r0, #112	; 0x70
    24ec:	f001 f94c 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24f0:	f640 21e8 	movw	r1, #2792	; 0xae8
    24f4:	2070      	movs	r0, #112	; 0x70
    24f6:	f001 f947 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24fa:	6862      	ldr	r2, [r4, #4]
    24fc:	4601      	mov	r1, r0
    24fe:	4b28      	ldr	r3, [pc, #160]	; (25a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2500:	1850      	adds	r0, r2, r1
    2502:	429a      	cmp	r2, r3
    2504:	d904      	bls.n	2510 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    2506:	f240 6109 	movw	r1, #1545	; 0x609
    250a:	2070      	movs	r0, #112	; 0x70
    250c:	f001 f93c 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2510:	4a24      	ldr	r2, [pc, #144]	; (25a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2512:	4291      	cmp	r1, r2
    2514:	dd04      	ble.n	2520 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    2516:	f240 610a 	movw	r1, #1546	; 0x60a
    251a:	2070      	movs	r0, #112	; 0x70
    251c:	f001 f934 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2520:	4a21      	ldr	r2, [pc, #132]	; (25a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2522:	4291      	cmp	r1, r2
    2524:	da04      	bge.n	2530 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    2526:	f240 610b 	movw	r1, #1547	; 0x60b
    252a:	2070      	movs	r0, #112	; 0x70
    252c:	f001 f92c 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2530:	491e      	ldr	r1, [pc, #120]	; (25ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    2532:	4281      	cmp	r1, r0
    2534:	bfdc      	itt	le
    2536:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    253a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    253e:	dd05      	ble.n	254c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2540:	2800      	cmp	r0, #0
    2542:	bfbc      	itt	lt
    2544:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2548:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    254c:	aa01      	add	r2, sp, #4
    254e:	4669      	mov	r1, sp
    2550:	f000 f8b8 	bl	26c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2554:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2558:	280f      	cmp	r0, #15
    255a:	bf8c      	ite	hi
    255c:	2001      	movhi	r0, #1
    255e:	2000      	movls	r0, #0
    2560:	9900      	ldr	r1, [sp, #0]
    2562:	4408      	add	r0, r1
    2564:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2568:	60a1      	str	r1, [r4, #8]
    256a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    256e:	f88d 0000 	strb.w	r0, [sp]
    2572:	f89d 0000 	ldrb.w	r0, [sp]
    2576:	2800      	cmp	r0, #0
    2578:	bf04      	itt	eq
    257a:	b002      	addeq	sp, #8
    257c:	bd10      	popeq	{r4, pc}
    257e:	2301      	movs	r3, #1
    2580:	2203      	movs	r2, #3
    2582:	2005      	movs	r0, #5
    2584:	f000 fb86 	bl	2c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2588:	2800      	cmp	r0, #0
    258a:	bf1c      	itt	ne
    258c:	b002      	addne	sp, #8
    258e:	bd10      	popne	{r4, pc}
    2590:	f640 21f1 	movw	r1, #2801	; 0xaf1
    2594:	2070      	movs	r0, #112	; 0x70
    2596:	f001 f8f7 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    259a:	0000      	.short	0x0000
    259c:	20000e2c 	.word	0x20000e2c
    25a0:	1e847fff 	.word	0x1e847fff
    25a4:	07a12000 	.word	0x07a12000
    25a8:	f85ee000 	.word	0xf85ee000
    25ac:	1e848000 	.word	0x1e848000

000025b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    25b0:	b570      	push	{r4, r5, r6, lr}
    25b2:	4c1e      	ldr	r4, [pc, #120]	; (262c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    25b4:	2120      	movs	r1, #32
    25b6:	f884 1020 	strb.w	r1, [r4, #32]
    25ba:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    25be:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    25c2:	2000      	movs	r0, #0
    25c4:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    25c8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    25cc:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    25d0:	1e42      	subs	r2, r0, #1
    25d2:	60a2      	str	r2, [r4, #8]
    25d4:	6020      	str	r0, [r4, #0]
    25d6:	77a0      	strb	r0, [r4, #30]
    25d8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    25dc:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    25e0:	7720      	strb	r0, [r4, #28]
    25e2:	7760      	strb	r0, [r4, #29]
    25e4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    25e8:	4911      	ldr	r1, [pc, #68]	; (2630 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    25ea:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    25ee:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    25f2:	7008      	strb	r0, [r1, #0]
    25f4:	7048      	strb	r0, [r1, #1]
    25f6:	8048      	strh	r0, [r1, #2]
    25f8:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    25fc:	2210      	movs	r2, #16
    25fe:	7088      	strb	r0, [r1, #2]
    2600:	f801 0f04 	strb.w	r0, [r1, #4]!
    2604:	1e52      	subs	r2, r2, #1
    2606:	d1fa      	bne.n	25fe <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2608:	4d0a      	ldr	r5, [pc, #40]	; (2634 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    260a:	2601      	movs	r6, #1
    260c:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2610:	20ff      	movs	r0, #255	; 0xff
    2612:	7028      	strb	r0, [r5, #0]
    2614:	4808      	ldr	r0, [pc, #32]	; (2638 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2616:	f001 f969 	bl	38ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    261a:	7068      	strb	r0, [r5, #1]
    261c:	f001 f9c4 	bl	39a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2620:	60a8      	str	r0, [r5, #8]
    2622:	f000 fcf1 	bl	3008 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2626:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    262a:	bd70      	pop	{r4, r5, r6, pc}
    262c:	20000e2c 	.word	0x20000e2c
    2630:	20000012 	.word	0x20000012
    2634:	20000010 	.word	0x20000010
    2638:	00000fdd 	.word	0x00000fdd

0000263c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    263c:	b570      	push	{r4, r5, r6, lr}
    263e:	4604      	mov	r4, r0
    2640:	4615      	mov	r5, r2
    2642:	4608      	mov	r0, r1
    2644:	f009 f82c 	bl	b6a0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2648:	4a0f      	ldr	r2, [pc, #60]	; (2688 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    264a:	1b01      	subs	r1, r0, r4
    264c:	1c53      	adds	r3, r2, #1
    264e:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    2652:	bf24      	itt	cs
    2654:	eba4 0c00 	subcs.w	ip, r4, r0
    2658:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    265c:	d30b      	bcc.n	2676 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    265e:	428a      	cmp	r2, r1
    2660:	d203      	bcs.n	266a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    2662:	1b11      	subs	r1, r2, r4
    2664:	4408      	add	r0, r1
    2666:	1c41      	adds	r1, r0, #1
    2668:	e005      	b.n	2676 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    266a:	4562      	cmp	r2, ip
    266c:	d207      	bcs.n	267e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    266e:	1a10      	subs	r0, r2, r0
    2670:	4420      	add	r0, r4
    2672:	1c40      	adds	r0, r0, #1
    2674:	4241      	negs	r1, r0
    2676:	f101 000f 	add.w	r0, r1, #15
    267a:	1a28      	subs	r0, r5, r0
    267c:	bd70      	pop	{r4, r5, r6, pc}
    267e:	f640 310c 	movw	r1, #2828	; 0xb0c
    2682:	2070      	movs	r0, #112	; 0x70
    2684:	f001 f880 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2688:	1e847fff 	.word	0x1e847fff

0000268c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    268c:	0b41      	lsrs	r1, r0, #13
    268e:	f248 6237 	movw	r2, #34359	; 0x8637
    2692:	4351      	muls	r1, r2
    2694:	0c0a      	lsrs	r2, r1, #16
    2696:	4b09      	ldr	r3, [pc, #36]	; (26bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2698:	0251      	lsls	r1, r2, #9
    269a:	fb02 0203 	mla	r2, r2, r3, r0
    269e:	4808      	ldr	r0, [pc, #32]	; (26c0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    26a0:	4350      	muls	r0, r2
    26a2:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    26a6:	306e      	adds	r0, #110	; 0x6e
    26a8:	0d40      	lsrs	r0, r0, #21
    26aa:	425b      	negs	r3, r3
    26ac:	fb10 f303 	smulbb	r3, r0, r3
    26b0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    26b4:	bf88      	it	hi
    26b6:	1c49      	addhi	r1, r1, #1
    26b8:	4408      	add	r0, r1
    26ba:	4770      	bx	lr
    26bc:	ffffc2f7 	.word	0xffffc2f7
    26c0:	00010c6f 	.word	0x00010c6f

000026c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    26c4:	0b43      	lsrs	r3, r0, #13
    26c6:	f248 6c37 	movw	ip, #34359	; 0x8637
    26ca:	fb03 f30c 	mul.w	r3, r3, ip
    26ce:	b430      	push	{r4, r5}
    26d0:	0c1b      	lsrs	r3, r3, #16
    26d2:	f8df c044 	ldr.w	ip, [pc, #68]	; 2718 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    26d6:	025c      	lsls	r4, r3, #9
    26d8:	fb03 030c 	mla	r3, r3, ip, r0
    26dc:	480f      	ldr	r0, [pc, #60]	; (271c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    26de:	4358      	muls	r0, r3
    26e0:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    26e4:	eb04 000c 	add.w	r0, r4, ip
    26e8:	f643 5409 	movw	r4, #15625	; 0x3d09
    26ec:	fb1c f404 	smulbb	r4, ip, r4
    26f0:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    26f4:	f643 5508 	movw	r5, #15624	; 0x3d08
    26f8:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    26fc:	442c      	add	r4, r5
    26fe:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2702:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2706:	bf84      	itt	hi
    2708:	f04f 0c00 	movhi.w	ip, #0
    270c:	1c40      	addhi	r0, r0, #1
    270e:	6008      	str	r0, [r1, #0]
    2710:	f882 c000 	strb.w	ip, [r2]
    2714:	bc30      	pop	{r4, r5}
    2716:	4770      	bx	lr
    2718:	ffffc2f7 	.word	0xffffc2f7
    271c:	00010c6f 	.word	0x00010c6f

00002720 <MPSL_IRQ_RTC0_Handler>:
    2720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2724:	4c36      	ldr	r4, [pc, #216]	; (2800 <MPSL_IRQ_RTC0_Handler+0xe0>)
    2726:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    272a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    272e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2732:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2736:	f04f 0500 	mov.w	r5, #0
    273a:	d019      	beq.n	2770 <MPSL_IRQ_RTC0_Handler+0x50>
    273c:	4831      	ldr	r0, [pc, #196]	; (2804 <MPSL_IRQ_RTC0_Handler+0xe4>)
    273e:	6800      	ldr	r0, [r0, #0]
    2740:	b1b0      	cbz	r0, 2770 <MPSL_IRQ_RTC0_Handler+0x50>
    2742:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2746:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    274a:	482f      	ldr	r0, [pc, #188]	; (2808 <MPSL_IRQ_RTC0_Handler+0xe8>)
    274c:	6800      	ldr	r0, [r0, #0]
    274e:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2752:	1a40      	subs	r0, r0, r1
    2754:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2758:	2802      	cmp	r0, #2
    275a:	d302      	bcc.n	2762 <MPSL_IRQ_RTC0_Handler+0x42>
    275c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2760:	d306      	bcc.n	2770 <MPSL_IRQ_RTC0_Handler+0x50>
    2762:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2766:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    276a:	2004      	movs	r0, #4
    276c:	f7fe ff2c 	bl	15c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2770:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2774:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2778:	d019      	beq.n	27ae <MPSL_IRQ_RTC0_Handler+0x8e>
    277a:	4824      	ldr	r0, [pc, #144]	; (280c <MPSL_IRQ_RTC0_Handler+0xec>)
    277c:	6800      	ldr	r0, [r0, #0]
    277e:	b1b0      	cbz	r0, 27ae <MPSL_IRQ_RTC0_Handler+0x8e>
    2780:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2784:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2788:	4821      	ldr	r0, [pc, #132]	; (2810 <MPSL_IRQ_RTC0_Handler+0xf0>)
    278a:	6800      	ldr	r0, [r0, #0]
    278c:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2790:	1a40      	subs	r0, r0, r1
    2792:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2796:	2802      	cmp	r0, #2
    2798:	d302      	bcc.n	27a0 <MPSL_IRQ_RTC0_Handler+0x80>
    279a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    279e:	d306      	bcc.n	27ae <MPSL_IRQ_RTC0_Handler+0x8e>
    27a0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    27a4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    27a8:	2005      	movs	r0, #5
    27aa:	f7fe ff0d 	bl	15c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27ae:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27b2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    27b6:	bf08      	it	eq
    27b8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    27bc:	4815      	ldr	r0, [pc, #84]	; (2814 <MPSL_IRQ_RTC0_Handler+0xf4>)
    27be:	6800      	ldr	r0, [r0, #0]
    27c0:	2800      	cmp	r0, #0
    27c2:	bf08      	it	eq
    27c4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    27c8:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    27cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27d0:	4811      	ldr	r0, [pc, #68]	; (2818 <MPSL_IRQ_RTC0_Handler+0xf8>)
    27d2:	6800      	ldr	r0, [r0, #0]
    27d4:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    27d8:	1a40      	subs	r0, r0, r1
    27da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27de:	2802      	cmp	r0, #2
    27e0:	d304      	bcc.n	27ec <MPSL_IRQ_RTC0_Handler+0xcc>
    27e2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    27e6:	bf38      	it	cc
    27e8:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    27ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    27f0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    27f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    27f8:	2006      	movs	r0, #6
    27fa:	f7fe bee5 	b.w	15c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27fe:	0000      	.short	0x0000
    2800:	4000b000 	.word	0x4000b000
    2804:	4000b140 	.word	0x4000b140
    2808:	4000b540 	.word	0x4000b540
    280c:	4000b144 	.word	0x4000b144
    2810:	4000b544 	.word	0x4000b544
    2814:	4000b148 	.word	0x4000b148
    2818:	4000b548 	.word	0x4000b548

0000281c <MPSL_IRQ_TIMER0_Handler>:
    281c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2820:	4d38      	ldr	r5, [pc, #224]	; (2904 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2822:	7828      	ldrb	r0, [r5, #0]
    2824:	2804      	cmp	r0, #4
    2826:	d068      	beq.n	28fa <MPSL_IRQ_TIMER0_Handler+0xde>
    2828:	1ce8      	adds	r0, r5, #3
    282a:	2201      	movs	r2, #1
    282c:	7801      	ldrb	r1, [r0, #0]
    282e:	b159      	cbz	r1, 2848 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2830:	2901      	cmp	r1, #1
    2832:	bf08      	it	eq
    2834:	706a      	strbeq	r2, [r5, #1]
    2836:	d002      	beq.n	283e <MPSL_IRQ_TIMER0_Handler+0x22>
    2838:	7869      	ldrb	r1, [r5, #1]
    283a:	2900      	cmp	r1, #0
    283c:	d058      	beq.n	28f0 <MPSL_IRQ_TIMER0_Handler+0xd4>
    283e:	2102      	movs	r1, #2
    2840:	7001      	strb	r1, [r0, #0]
    2842:	7840      	ldrb	r0, [r0, #1]
    2844:	f000 fafa 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2848:	4c2f      	ldr	r4, [pc, #188]	; (2908 <MPSL_IRQ_TIMER0_Handler+0xec>)
    284a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    284e:	f04f 0800 	mov.w	r8, #0
    2852:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2856:	f44f 7780 	mov.w	r7, #256	; 0x100
    285a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    285e:	d00a      	beq.n	2876 <MPSL_IRQ_TIMER0_Handler+0x5a>
    2860:	482a      	ldr	r0, [pc, #168]	; (290c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2862:	6800      	ldr	r0, [r0, #0]
    2864:	b138      	cbz	r0, 2876 <MPSL_IRQ_TIMER0_Handler+0x5a>
    2866:	2003      	movs	r0, #3
    2868:	f000 fae8 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    286c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2870:	2003      	movs	r0, #3
    2872:	f7fe fea9 	bl	15c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2876:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    287a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    287e:	d00a      	beq.n	2896 <MPSL_IRQ_TIMER0_Handler+0x7a>
    2880:	4823      	ldr	r0, [pc, #140]	; (2910 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2882:	6800      	ldr	r0, [r0, #0]
    2884:	b138      	cbz	r0, 2896 <MPSL_IRQ_TIMER0_Handler+0x7a>
    2886:	2002      	movs	r0, #2
    2888:	f000 fad8 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    288c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2890:	2002      	movs	r0, #2
    2892:	f7fe fe99 	bl	15c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2896:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    289a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    289e:	d00a      	beq.n	28b6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    28a0:	481c      	ldr	r0, [pc, #112]	; (2914 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    28a2:	6800      	ldr	r0, [r0, #0]
    28a4:	b138      	cbz	r0, 28b6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    28a6:	2001      	movs	r0, #1
    28a8:	f000 fac8 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28ac:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    28b0:	2001      	movs	r0, #1
    28b2:	f7fe fe89 	bl	15c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28b6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28ba:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    28be:	bf08      	it	eq
    28c0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    28c4:	4814      	ldr	r0, [pc, #80]	; (2918 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    28c6:	6800      	ldr	r0, [r0, #0]
    28c8:	2800      	cmp	r0, #0
    28ca:	bf08      	it	eq
    28cc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    28d0:	2000      	movs	r0, #0
    28d2:	f000 fab3 	bl	2e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28d6:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    28da:	2004      	movs	r0, #4
    28dc:	7028      	strb	r0, [r5, #0]
    28de:	f8c5 8008 	str.w	r8, [r5, #8]
    28e2:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    28e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28ea:	2000      	movs	r0, #0
    28ec:	f7fe be6c 	b.w	15c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28f0:	f240 316a 	movw	r1, #874	; 0x36a
    28f4:	206c      	movs	r0, #108	; 0x6c
    28f6:	f000 ff47 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28fe:	2007      	movs	r0, #7
    2900:	f7fe be62 	b.w	15c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2904:	2000001c 	.word	0x2000001c
    2908:	40008000 	.word	0x40008000
    290c:	4000814c 	.word	0x4000814c
    2910:	40008148 	.word	0x40008148
    2914:	40008144 	.word	0x40008144
    2918:	40008140 	.word	0x40008140
    291c:	2201      	movs	r2, #1
    291e:	0211      	lsls	r1, r2, #8
    2920:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2924:	2000      	movs	r0, #0
    2926:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    292a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    292e:	f3bf 8f4f 	dsb	sy
    2932:	f3bf 8f6f 	isb	sy
    2936:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    293a:	490e      	ldr	r1, [pc, #56]	; (2974 <MPSL_IRQ_TIMER0_Handler+0x158>)
    293c:	f841 2f04 	str.w	r2, [r1, #4]!
    2940:	1e43      	subs	r3, r0, #1
    2942:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2946:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    294a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    294e:	4b0a      	ldr	r3, [pc, #40]	; (2978 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    2950:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2954:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2958:	1d1b      	adds	r3, r3, #4
    295a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    295e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2962:	1d1b      	adds	r3, r3, #4
    2964:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2968:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    296c:	60ca      	str	r2, [r1, #12]
    296e:	4903      	ldr	r1, [pc, #12]	; (297c <MPSL_IRQ_TIMER0_Handler+0x160>)
    2970:	7048      	strb	r0, [r1, #1]
    2972:	4770      	bx	lr
    2974:	40008000 	.word	0x40008000
    2978:	40008004 	.word	0x40008004
    297c:	2000001c 	.word	0x2000001c

00002980 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2980:	4801      	ldr	r0, [pc, #4]	; (2988 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2982:	6800      	ldr	r0, [r0, #0]
    2984:	4770      	bx	lr
    2986:	0000      	.short	0x0000
    2988:	4000b504 	.word	0x4000b504

0000298c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    298c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2990:	4e47      	ldr	r6, [pc, #284]	; (2ab0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2992:	4605      	mov	r5, r0
    2994:	1ef7      	subs	r7, r6, #3
    2996:	7832      	ldrb	r2, [r6, #0]
    2998:	68f9      	ldr	r1, [r7, #12]
    299a:	2a01      	cmp	r2, #1
    299c:	bf04      	itt	eq
    299e:	42a9      	cmpeq	r1, r5
    29a0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29a4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    29a8:	4b42      	ldr	r3, [pc, #264]	; (2ab4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    29aa:	6018      	str	r0, [r3, #0]
    29ac:	4842      	ldr	r0, [pc, #264]	; (2ab8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    29ae:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    29b2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    29b6:	f100 0304 	add.w	r3, r0, #4
    29ba:	f04f 0400 	mov.w	r4, #0
    29be:	2a00      	cmp	r2, #0
    29c0:	d061      	beq.n	2a86 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    29c2:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    29c6:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    29ca:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    29ce:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    29d2:	4b3a      	ldr	r3, [pc, #232]	; (2abc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    29d4:	681b      	ldr	r3, [r3, #0]
    29d6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    29da:	f04f 0801 	mov.w	r8, #1
    29de:	2b00      	cmp	r3, #0
    29e0:	bf04      	itt	eq
    29e2:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    29e6:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    29ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    29ee:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    29f2:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    29f6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    29fa:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    29fe:	1aeb      	subs	r3, r5, r3
    2a00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a04:	2b02      	cmp	r3, #2
    2a06:	d34b      	bcc.n	2aa0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2a0c:	d248      	bcs.n	2aa0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2a0e:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    2a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a16:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    2a1a:	b132      	cbz	r2, 2a2a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    2a1c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2a20:	1a8a      	subs	r2, r1, r2
    2a22:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2a26:	2a02      	cmp	r2, #2
    2a28:	d3f8      	bcc.n	2a1c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    2a2a:	f8c7 8008 	str.w	r8, [r7, #8]
    2a2e:	703c      	strb	r4, [r7, #0]
    2a30:	f7ff ff74 	bl	291c <MPSL_IRQ_TIMER0_Handler+0x100>
    2a34:	4822      	ldr	r0, [pc, #136]	; (2ac0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2a36:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2a3a:	f364 0101 	bfi	r1, r4, #0, #2
    2a3e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2a42:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2a46:	2102      	movs	r1, #2
    2a48:	f361 0201 	bfi	r2, r1, #0, #2
    2a4c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2a50:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2a54:	2104      	movs	r1, #4
    2a56:	f361 0203 	bfi	r2, r1, #0, #4
    2a5a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    2a5e:	f8c0 800c 	str.w	r8, [r0, #12]
    2a62:	68b9      	ldr	r1, [r7, #8]
    2a64:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2a68:	1580      	asrs	r0, r0, #22
    2a6a:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    2a6e:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    2a72:	4914      	ldr	r1, [pc, #80]	; (2ac4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2a74:	05c0      	lsls	r0, r0, #23
    2a76:	6008      	str	r0, [r1, #0]
    2a78:	2004      	movs	r0, #4
    2a7a:	60fd      	str	r5, [r7, #12]
    2a7c:	7070      	strb	r0, [r6, #1]
    2a7e:	f886 8000 	strb.w	r8, [r6]
    2a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a86:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2a8a:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2a8e:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2a92:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2a96:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2a9a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2a9e:	e798      	b.n	29d2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    2aa0:	2100      	movs	r1, #0
    2aa2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2aa6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2aaa:	206c      	movs	r0, #108	; 0x6c
    2aac:	f000 fe6c 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ab0:	2000001f 	.word	0x2000001f
    2ab4:	4001f508 	.word	0x4001f508
    2ab8:	4000b000 	.word	0x4000b000
    2abc:	4000b148 	.word	0x4000b148
    2ac0:	40008000 	.word	0x40008000
    2ac4:	4001f504 	.word	0x4001f504

00002ac8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2ac8:	b570      	push	{r4, r5, r6, lr}
    2aca:	4c2c      	ldr	r4, [pc, #176]	; (2b7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2acc:	68e2      	ldr	r2, [r4, #12]
    2ace:	4282      	cmp	r2, r0
    2ad0:	bf14      	ite	ne
    2ad2:	2101      	movne	r1, #1
    2ad4:	2100      	moveq	r1, #0
    2ad6:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 2b80 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2ada:	f89c 5000 	ldrb.w	r5, [ip]
    2ade:	2d02      	cmp	r5, #2
    2ae0:	d002      	beq.n	2ae8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2ae2:	2900      	cmp	r1, #0
    2ae4:	d037      	beq.n	2b56 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    2ae6:	e002      	b.n	2aee <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2ae8:	2900      	cmp	r1, #0
    2aea:	bf08      	it	eq
    2aec:	bd70      	popeq	{r4, r5, r6, pc}
    2aee:	7861      	ldrb	r1, [r4, #1]
    2af0:	b381      	cbz	r1, 2b54 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    2af2:	4b24      	ldr	r3, [pc, #144]	; (2b84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2af4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2af8:	6019      	str	r1, [r3, #0]
    2afa:	138b      	asrs	r3, r1, #14
    2afc:	4922      	ldr	r1, [pc, #136]	; (2b88 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2afe:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2b02:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2b06:	2300      	movs	r3, #0
    2b08:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    2b0c:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2b10:	1ac3      	subs	r3, r0, r3
    2b12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b16:	2b02      	cmp	r3, #2
    2b18:	d327      	bcc.n	2b6a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2b1e:	d224      	bcs.n	2b6a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2b20:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b28:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2b2c:	b13d      	cbz	r5, 2b3e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    2b2e:	bf00      	nop
    2b30:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2b34:	1ad3      	subs	r3, r2, r3
    2b36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b3a:	2b02      	cmp	r3, #2
    2b3c:	d3f8      	bcc.n	2b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    2b3e:	4b13      	ldr	r3, [pc, #76]	; (2b8c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2b40:	2102      	movs	r1, #2
    2b42:	074a      	lsls	r2, r1, #29
    2b44:	601a      	str	r2, [r3, #0]
    2b46:	60e0      	str	r0, [r4, #12]
    2b48:	2004      	movs	r0, #4
    2b4a:	f88c 0001 	strb.w	r0, [ip, #1]
    2b4e:	f88c 1000 	strb.w	r1, [ip]
    2b52:	bd70      	pop	{r4, r5, r6, pc}
    2b54:	e004      	b.n	2b60 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    2b56:	f240 2102 	movw	r1, #514	; 0x202
    2b5a:	206c      	movs	r0, #108	; 0x6c
    2b5c:	f000 fe14 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b60:	f240 2106 	movw	r1, #518	; 0x206
    2b64:	206c      	movs	r0, #108	; 0x6c
    2b66:	f000 fe0f 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b6a:	2000      	movs	r0, #0
    2b6c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2b70:	f240 2112 	movw	r1, #530	; 0x212
    2b74:	206c      	movs	r0, #108	; 0x6c
    2b76:	f000 fe07 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b7a:	0000      	.short	0x0000
    2b7c:	2000001c 	.word	0x2000001c
    2b80:	2000001f 	.word	0x2000001f
    2b84:	4001f508 	.word	0x4001f508
    2b88:	4000b000 	.word	0x4000b000
    2b8c:	4001f504 	.word	0x4001f504

00002b90 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2b90:	4801      	ldr	r0, [pc, #4]	; (2b98 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2b92:	68c0      	ldr	r0, [r0, #12]
    2b94:	4770      	bx	lr
    2b96:	0000      	.short	0x0000
    2b98:	2000001c 	.word	0x2000001c

00002b9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ba0:	4936      	ldr	r1, [pc, #216]	; (2c7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2ba2:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2ba6:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2baa:	4d35      	ldr	r5, [pc, #212]	; (2c80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2bac:	1d0b      	adds	r3, r1, #4
    2bae:	2200      	movs	r2, #0
    2bb0:	7828      	ldrb	r0, [r5, #0]
    2bb2:	b168      	cbz	r0, 2bd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    2bb4:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2bb8:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2bbc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2bc0:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2bc4:	4b2f      	ldr	r3, [pc, #188]	; (2c84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2bc6:	681b      	ldr	r3, [r3, #0]
    2bc8:	f04f 0c01 	mov.w	ip, #1
    2bcc:	b99b      	cbnz	r3, 2bf6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    2bce:	e00c      	b.n	2bea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    2bd0:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2bd4:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2bd8:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    2bdc:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    2be0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2be4:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2be8:	e7ec      	b.n	2bc4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2bea:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2bf2:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    2bf6:	2802      	cmp	r0, #2
    2bf8:	d004      	beq.n	2c04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    2bfa:	f240 211e 	movw	r1, #542	; 0x21e
    2bfe:	206c      	movs	r0, #108	; 0x6c
    2c00:	f000 fdc2 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c04:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2c08:	4c1f      	ldr	r4, [pc, #124]	; (2c88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2c0a:	1cc0      	adds	r0, r0, #3
    2c0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c10:	68e3      	ldr	r3, [r4, #12]
    2c12:	4e1e      	ldr	r6, [pc, #120]	; (2c8c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2c14:	4298      	cmp	r0, r3
    2c16:	d00c      	beq.n	2c32 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2c18:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    2c1c:	1bdf      	subs	r7, r3, r7
    2c1e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2c22:	2f04      	cmp	r7, #4
    2c24:	d305      	bcc.n	2c32 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2c26:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2c2a:	d202      	bcs.n	2c32 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2c2c:	f7ff feae 	bl	298c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2c30:	e01f      	b.n	2c72 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2c32:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2c36:	1a18      	subs	r0, r3, r0
    2c38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c3c:	2802      	cmp	r0, #2
    2c3e:	d315      	bcc.n	2c6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2c40:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2c44:	d212      	bcs.n	2c6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2c46:	4912      	ldr	r1, [pc, #72]	; (2c90 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2c48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2c4c:	6008      	str	r0, [r1, #0]
    2c4e:	f8c4 c008 	str.w	ip, [r4, #8]
    2c52:	7022      	strb	r2, [r4, #0]
    2c54:	f8c6 c004 	str.w	ip, [r6, #4]
    2c58:	f8c6 c00c 	str.w	ip, [r6, #12]
    2c5c:	0040      	lsls	r0, r0, #1
    2c5e:	1f09      	subs	r1, r1, #4
    2c60:	6008      	str	r0, [r1, #0]
    2c62:	2004      	movs	r0, #4
    2c64:	7068      	strb	r0, [r5, #1]
    2c66:	f885 c000 	strb.w	ip, [r5]
    2c6a:	e002      	b.n	2c72 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2c6c:	f8c4 c008 	str.w	ip, [r4, #8]
    2c70:	7022      	strb	r2, [r4, #0]
    2c72:	68a0      	ldr	r0, [r4, #8]
    2c74:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    2c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c7c:	4000b000 	.word	0x4000b000
    2c80:	2000001f 	.word	0x2000001f
    2c84:	4000b148 	.word	0x4000b148
    2c88:	2000001c 	.word	0x2000001c
    2c8c:	40008000 	.word	0x40008000
    2c90:	4001f508 	.word	0x4001f508

00002c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c98:	f8df c190 	ldr.w	ip, [pc, #400]	; 2e2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    2c9c:	2600      	movs	r6, #0
    2c9e:	2701      	movs	r7, #1
    2ca0:	f89c 4000 	ldrb.w	r4, [ip]
    2ca4:	f89c c001 	ldrb.w	ip, [ip, #1]
    2ca8:	f44f 75a0 	mov.w	r5, #320	; 0x140
    2cac:	2807      	cmp	r0, #7
    2cae:	d27b      	bcs.n	2da8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2cb0:	e8df f000 	tbb	[pc, r0]
    2cb4:	04040404 	.word	0x04040404
    2cb8:	006c6c6c 	.word	0x006c6c6c
    2cbc:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2e30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    2cc0:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2cc4:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    2cc8:	bf04      	itt	eq
    2cca:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    2cce:	f1b8 0f00 	cmpeq.w	r8, #0
    2cd2:	d002      	beq.n	2cda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2cd4:	2c02      	cmp	r4, #2
    2cd6:	d005      	beq.n	2ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    2cd8:	e02c      	b.n	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    2cda:	f240 2151 	movw	r1, #593	; 0x251
    2cde:	206c      	movs	r0, #108	; 0x6c
    2ce0:	f000 fd52 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ce4:	f1ac 0804 	sub.w	r8, ip, #4
    2ce8:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2cec:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    2cf0:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    2cf4:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    2cf8:	2500      	movs	r5, #0
    2cfa:	2c01      	cmp	r4, #1
    2cfc:	d002      	beq.n	2d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    2cfe:	2c02      	cmp	r4, #2
    2d00:	d00b      	beq.n	2d1a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    2d02:	e014      	b.n	2d2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2d04:	f1bc 0f04 	cmp.w	ip, #4
    2d08:	bf24      	itt	cs
    2d0a:	f8d8 9000 	ldrcs.w	r9, [r8]
    2d0e:	f1b9 0f00 	cmpcs.w	r9, #0
    2d12:	bf08      	it	eq
    2d14:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2d18:	e009      	b.n	2d2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2d1a:	f1bc 0f04 	cmp.w	ip, #4
    2d1e:	bf24      	itt	cs
    2d20:	f8d8 9000 	ldrcs.w	r9, [r8]
    2d24:	f1b9 0f00 	cmpcs.w	r9, #0
    2d28:	bf08      	it	eq
    2d2a:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    2d2e:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    2d32:	d1e1      	bne.n	2cf8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    2d34:	4c3f      	ldr	r4, [pc, #252]	; (2e34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    2d36:	f100 0c10 	add.w	ip, r0, #16
    2d3a:	fa07 fc0c 	lsl.w	ip, r7, ip
    2d3e:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2d42:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    2d46:	b1c2      	cbz	r2, 2d7a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    2d48:	f04f 0840 	mov.w	r8, #64	; 0x40
    2d4c:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    2d50:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2d54:	44a0      	add	r8, r4
    2d56:	f8c8 7000 	str.w	r7, [r8]
    2d5a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    2d5e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2d62:	eba1 0000 	sub.w	r0, r1, r0
    2d66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d6a:	4282      	cmp	r2, r0
    2d6c:	bf98      	it	ls
    2d6e:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    2d72:	bf28      	it	cs
    2d74:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    2d78:	d250      	bcs.n	2e1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2d7a:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    2d7e:	2b01      	cmp	r3, #1
    2d80:	bf08      	it	eq
    2d82:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2d86:	2001      	movs	r0, #1
    2d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d8c:	b134      	cbz	r4, 2d9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2d8e:	4584      	cmp	ip, r0
    2d90:	d104      	bne.n	2d9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2d92:	f44f 711d 	mov.w	r1, #628	; 0x274
    2d96:	206c      	movs	r0, #108	; 0x6c
    2d98:	f000 fcf6 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d9c:	f1a0 0c04 	sub.w	ip, r0, #4
    2da0:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    2da4:	2b01      	cmp	r3, #1
    2da6:	e000      	b.n	2daa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2da8:	e03b      	b.n	2e22 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    2daa:	bf0c      	ite	eq
    2dac:	f04f 0801 	moveq.w	r8, #1
    2db0:	f04f 0800 	movne.w	r8, #0
    2db4:	2c03      	cmp	r4, #3
    2db6:	d304      	bcc.n	2dc2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    2db8:	f240 114d 	movw	r1, #333	; 0x14d
    2dbc:	206c      	movs	r0, #108	; 0x6c
    2dbe:	f000 fce3 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dc2:	f8df c074 	ldr.w	ip, [pc, #116]	; 2e38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    2dc6:	f104 0310 	add.w	r3, r4, #16
    2dca:	fa07 f303 	lsl.w	r3, r7, r3
    2dce:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2dd2:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2dd6:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    2dda:	f84c 6004 	str.w	r6, [ip, r4]
    2dde:	1f00      	subs	r0, r0, #4
    2de0:	b2c0      	uxtb	r0, r0
    2de2:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2de6:	b16a      	cbz	r2, 2e04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    2de8:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    2dec:	1b0c      	subs	r4, r1, r4
    2dee:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2df2:	42a2      	cmp	r2, r4
    2df4:	bf98      	it	ls
    2df6:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    2dfa:	bf24      	itt	cs
    2dfc:	2100      	movcs	r1, #0
    2dfe:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2e02:	d20b      	bcs.n	2e1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e04:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e08:	f1b8 0f00 	cmp.w	r8, #0
    2e0c:	bf18      	it	ne
    2e0e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2e12:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2e16:	2001      	movs	r0, #1
    2e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e1c:	2000      	movs	r0, #0
    2e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e22:	f240 2179 	movw	r1, #633	; 0x279
    2e26:	206c      	movs	r0, #108	; 0x6c
    2e28:	f000 fcae 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e2c:	2000001f 	.word	0x2000001f
    2e30:	2000001c 	.word	0x2000001c
    2e34:	40008000 	.word	0x40008000
    2e38:	4000b000 	.word	0x4000b000

00002e3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e40:	2600      	movs	r6, #0
    2e42:	f44f 77a0 	mov.w	r7, #320	; 0x140
    2e46:	f04f 0801 	mov.w	r8, #1
    2e4a:	2807      	cmp	r0, #7
    2e4c:	d251      	bcs.n	2ef2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    2e4e:	e8df f000 	tbb	[pc, r0]
    2e52:	0404      	.short	0x0404
    2e54:	19190404 	.word	0x19190404
    2e58:	0019      	.short	0x0019
    2e5a:	f100 0110 	add.w	r1, r0, #16
    2e5e:	fa08 f201 	lsl.w	r2, r8, r1
    2e62:	4926      	ldr	r1, [pc, #152]	; (2efc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2e64:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2e68:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2e6c:	2200      	movs	r2, #0
    2e6e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2e72:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    2e76:	508e      	str	r6, [r1, r2]
    2e78:	4921      	ldr	r1, [pc, #132]	; (2f00 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2e7a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2e7e:	9000      	str	r0, [sp, #0]
    2e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e84:	4d1f      	ldr	r5, [pc, #124]	; (2f04 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2e86:	1f01      	subs	r1, r0, #4
    2e88:	b2cc      	uxtb	r4, r1
    2e8a:	7829      	ldrb	r1, [r5, #0]
    2e8c:	b179      	cbz	r1, 2eae <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2e8e:	786a      	ldrb	r2, [r5, #1]
    2e90:	4282      	cmp	r2, r0
    2e92:	d10c      	bne.n	2eae <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2e94:	4a1c      	ldr	r2, [pc, #112]	; (2f08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2e96:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2e9a:	6010      	str	r0, [r2, #0]
    2e9c:	2901      	cmp	r1, #1
    2e9e:	bf08      	it	eq
    2ea0:	f7ff fd3c 	bleq	291c <MPSL_IRQ_TIMER0_Handler+0x100>
    2ea4:	702e      	strb	r6, [r5, #0]
    2ea6:	4919      	ldr	r1, [pc, #100]	; (2f0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    2ea8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2eac:	60c8      	str	r0, [r1, #12]
    2eae:	f104 0010 	add.w	r0, r4, #16
    2eb2:	fa08 f100 	lsl.w	r1, r8, r0
    2eb6:	4816      	ldr	r0, [pc, #88]	; (2f10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    2eb8:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2ebc:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2ec0:	00a1      	lsls	r1, r4, #2
    2ec2:	4401      	add	r1, r0
    2ec4:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    2ec8:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2ecc:	1a89      	subs	r1, r1, r2
    2ece:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2ed2:	2902      	cmp	r1, #2
    2ed4:	d307      	bcc.n	2ee6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    2ed6:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    2eda:	2100      	movs	r1, #0
    2edc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2ee0:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    2ee4:	5046      	str	r6, [r0, r1]
    2ee6:	480b      	ldr	r0, [pc, #44]	; (2f14 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    2ee8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    2eec:	9000      	str	r0, [sp, #0]
    2eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ef2:	f240 21f1 	movw	r1, #753	; 0x2f1
    2ef6:	206c      	movs	r0, #108	; 0x6c
    2ef8:	f000 fc46 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2efc:	40008000 	.word	0x40008000
    2f00:	40008140 	.word	0x40008140
    2f04:	2000001f 	.word	0x2000001f
    2f08:	4001f508 	.word	0x4001f508
    2f0c:	2000001c 	.word	0x2000001c
    2f10:	4000b000 	.word	0x4000b000
    2f14:	4000b140 	.word	0x4000b140

00002f18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2f18:	4920      	ldr	r1, [pc, #128]	; (2f9c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2f1a:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2f1e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2f22:	481f      	ldr	r0, [pc, #124]	; (2fa0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2f24:	1d0a      	adds	r2, r1, #4
    2f26:	7803      	ldrb	r3, [r0, #0]
    2f28:	2000      	movs	r0, #0
    2f2a:	b15b      	cbz	r3, 2f44 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    2f2c:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2f30:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f34:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2f38:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f3c:	4919      	ldr	r1, [pc, #100]	; (2fa4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2f3e:	6809      	ldr	r1, [r1, #0]
    2f40:	b999      	cbnz	r1, 2f6a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    2f42:	e00c      	b.n	2f5e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    2f44:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2f48:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f4c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2f50:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2f54:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2f58:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f5c:	e7ee      	b.n	2f3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    2f5e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2f62:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2f66:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2f6a:	490f      	ldr	r1, [pc, #60]	; (2fa8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2f6c:	f04f 32ff 	mov.w	r2, #4294967295
    2f70:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2f74:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2f78:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2f7c:	1d0a      	adds	r2, r1, #4
    2f7e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2f82:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f86:	1d12      	adds	r2, r2, #4
    2f88:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2f8c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2f90:	1d12      	adds	r2, r2, #4
    2f92:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2f96:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2f9a:	4770      	bx	lr
    2f9c:	4000b000 	.word	0x4000b000
    2fa0:	2000001f 	.word	0x2000001f
    2fa4:	4000b148 	.word	0x4000b148
    2fa8:	40008000 	.word	0x40008000

00002fac <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2fac:	4808      	ldr	r0, [pc, #32]	; (2fd0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2fae:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2fb2:	2800      	cmp	r0, #0
    2fb4:	bfb8      	it	lt
    2fb6:	4770      	bxlt	lr
    2fb8:	f000 011f 	and.w	r1, r0, #31
    2fbc:	2201      	movs	r2, #1
    2fbe:	fa02 f101 	lsl.w	r1, r2, r1
    2fc2:	0940      	lsrs	r0, r0, #5
    2fc4:	0080      	lsls	r0, r0, #2
    2fc6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2fca:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2fce:	4770      	bx	lr
    2fd0:	2000001c 	.word	0x2000001c

00002fd4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2fd4:	b510      	push	{r4, lr}
    2fd6:	2807      	cmp	r0, #7
    2fd8:	d20d      	bcs.n	2ff6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2fda:	e8df f000 	tbb	[pc, r0]
    2fde:	0404      	.short	0x0404
    2fe0:	06060404 	.word	0x06060404
    2fe4:	0006      	.short	0x0006
    2fe6:	4906      	ldr	r1, [pc, #24]	; (3000 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    2fe8:	e002      	b.n	2ff0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    2fea:	1f00      	subs	r0, r0, #4
    2fec:	4905      	ldr	r1, [pc, #20]	; (3004 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    2fee:	b2c0      	uxtb	r0, r0
    2ff0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2ff4:	bd10      	pop	{r4, pc}
    2ff6:	f240 219d 	movw	r1, #669	; 0x29d
    2ffa:	206c      	movs	r0, #108	; 0x6c
    2ffc:	f000 fbc4 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3000:	40008140 	.word	0x40008140
    3004:	4000b140 	.word	0x4000b140

00003008 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3008:	b510      	push	{r4, lr}
    300a:	481c      	ldr	r0, [pc, #112]	; (307c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    300c:	2400      	movs	r4, #0
    300e:	2104      	movs	r1, #4
    3010:	7004      	strb	r4, [r0, #0]
    3012:	1ec0      	subs	r0, r0, #3
    3014:	7001      	strb	r1, [r0, #0]
    3016:	0589      	lsls	r1, r1, #22
    3018:	60c1      	str	r1, [r0, #12]
    301a:	f7ff fc7f 	bl	291c <MPSL_IRQ_TIMER0_Handler+0x100>
    301e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3022:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3026:	f04f 0c01 	mov.w	ip, #1
    302a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    302e:	f3bf 8f4f 	dsb	sy
    3032:	f3bf 8f6f 	isb	sy
    3036:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    303a:	4811      	ldr	r0, [pc, #68]	; (3080 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    303c:	f8c0 c004 	str.w	ip, [r0, #4]
    3040:	f8c0 c008 	str.w	ip, [r0, #8]
    3044:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3048:	2900      	cmp	r1, #0
    304a:	d1fb      	bne.n	3044 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    304c:	1e49      	subs	r1, r1, #1
    304e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3052:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3056:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    305a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    305e:	4909      	ldr	r1, [pc, #36]	; (3084 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    3060:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3064:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3068:	1d09      	adds	r1, r1, #4
    306a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    306e:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3072:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3076:	f8c0 c000 	str.w	ip, [r0]
    307a:	bd10      	pop	{r4, pc}
    307c:	2000001f 	.word	0x2000001f
    3080:	4000b000 	.word	0x4000b000
    3084:	4000b004 	.word	0x4000b004

00003088 <MPSL_IRQ_CLOCK_Handler>:
    3088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    308c:	4c16      	ldr	r4, [pc, #88]	; (30e8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    308e:	7a60      	ldrb	r0, [r4, #9]
    3090:	2800      	cmp	r0, #0
    3092:	d027      	beq.n	30e4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3094:	f44f 7180 	mov.w	r1, #256	; 0x100
    3098:	058d      	lsls	r5, r1, #22
    309a:	4628      	mov	r0, r5
    309c:	f008 fb51 	bl	b742 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30a0:	4680      	mov	r8, r0
    30a2:	f44f 7182 	mov.w	r1, #260	; 0x104
    30a6:	4628      	mov	r0, r5
    30a8:	f008 fb4b 	bl	b742 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30ac:	2600      	movs	r6, #0
    30ae:	4607      	mov	r7, r0
    30b0:	f1b8 0f00 	cmp.w	r8, #0
    30b4:	d009      	beq.n	30ca <MPSL_IRQ_CLOCK_Handler+0x42>
    30b6:	2001      	movs	r0, #1
    30b8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    30bc:	7920      	ldrb	r0, [r4, #4]
    30be:	b120      	cbz	r0, 30ca <MPSL_IRQ_CLOCK_Handler+0x42>
    30c0:	7126      	strb	r6, [r4, #4]
    30c2:	69e0      	ldr	r0, [r4, #28]
    30c4:	b108      	cbz	r0, 30ca <MPSL_IRQ_CLOCK_Handler+0x42>
    30c6:	4780      	blx	r0
    30c8:	61e6      	str	r6, [r4, #28]
    30ca:	b137      	cbz	r7, 30da <MPSL_IRQ_CLOCK_Handler+0x52>
    30cc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    30d0:	2002      	movs	r0, #2
    30d2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    30d6:	f000 fa8b 	bl	35f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    30da:	4640      	mov	r0, r8
    30dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30e0:	f000 b85a 	b.w	3198 <MPSL_IRQ_CLOCK_Handler+0x110>
    30e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30e8:	2000002c 	.word	0x2000002c
    30ec:	b510      	push	{r4, lr}
    30ee:	f008 fbd2 	bl	b896 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    30f2:	b930      	cbnz	r0, 3102 <MPSL_IRQ_CLOCK_Handler+0x7a>
    30f4:	f008 fbf0 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    30f8:	b918      	cbnz	r0, 3102 <MPSL_IRQ_CLOCK_Handler+0x7a>
    30fa:	f008 fc23 	bl	b944 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    30fe:	2800      	cmp	r0, #0
    3100:	d002      	beq.n	3108 <MPSL_IRQ_CLOCK_Handler+0x80>
    3102:	4902      	ldr	r1, [pc, #8]	; (310c <MPSL_IRQ_CLOCK_Handler+0x84>)
    3104:	2002      	movs	r0, #2
    3106:	6008      	str	r0, [r1, #0]
    3108:	bd10      	pop	{r4, pc}
    310a:	0000      	.short	0x0000
    310c:	40000c34 	.word	0x40000c34
    3110:	b570      	push	{r4, r5, r6, lr}
    3112:	f000 f987 	bl	3424 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3116:	f000 fabf 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    311a:	4c09      	ldr	r4, [pc, #36]	; (3140 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    311c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3120:	b130      	cbz	r0, 3130 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3122:	f7ff ffe3 	bl	30ec <MPSL_IRQ_CLOCK_Handler+0x64>
    3126:	2001      	movs	r0, #1
    3128:	6128      	str	r0, [r5, #16]
    312a:	2004      	movs	r0, #4
    312c:	72a0      	strb	r0, [r4, #10]
    312e:	e004      	b.n	313a <MPSL_IRQ_CLOCK_Handler+0xb2>
    3130:	2003      	movs	r0, #3
    3132:	72a0      	strb	r0, [r4, #10]
    3134:	2001      	movs	r0, #1
    3136:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    313a:	2000      	movs	r0, #0
    313c:	71e0      	strb	r0, [r4, #7]
    313e:	bd70      	pop	{r4, r5, r6, pc}
    3140:	2000002c 	.word	0x2000002c
    3144:	b570      	push	{r4, r5, r6, lr}
    3146:	4c13      	ldr	r4, [pc, #76]	; (3194 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3148:	79a0      	ldrb	r0, [r4, #6]
    314a:	b1f0      	cbz	r0, 318a <MPSL_IRQ_CLOCK_Handler+0x102>
    314c:	2801      	cmp	r0, #1
    314e:	d003      	beq.n	3158 <MPSL_IRQ_CLOCK_Handler+0xd0>
    3150:	79e1      	ldrb	r1, [r4, #7]
    3152:	1e40      	subs	r0, r0, #1
    3154:	4281      	cmp	r1, r0
    3156:	da18      	bge.n	318a <MPSL_IRQ_CLOCK_Handler+0x102>
    3158:	f000 fa9e 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    315c:	4605      	mov	r5, r0
    315e:	f000 fb83 	bl	3868 <mpsl_temperature_get>
    3162:	79a1      	ldrb	r1, [r4, #6]
    3164:	2901      	cmp	r1, #1
    3166:	d902      	bls.n	316e <MPSL_IRQ_CLOCK_Handler+0xe6>
    3168:	79e1      	ldrb	r1, [r4, #7]
    316a:	1c49      	adds	r1, r1, #1
    316c:	71e1      	strb	r1, [r4, #7]
    316e:	b10d      	cbz	r5, 3174 <MPSL_IRQ_CLOCK_Handler+0xec>
    3170:	6961      	ldr	r1, [r4, #20]
    3172:	e000      	b.n	3176 <MPSL_IRQ_CLOCK_Handler+0xee>
    3174:	6921      	ldr	r1, [r4, #16]
    3176:	1a41      	subs	r1, r0, r1
    3178:	2902      	cmp	r1, #2
    317a:	da02      	bge.n	3182 <MPSL_IRQ_CLOCK_Handler+0xfa>
    317c:	f111 0f02 	cmn.w	r1, #2
    3180:	dc07      	bgt.n	3192 <MPSL_IRQ_CLOCK_Handler+0x10a>
    3182:	b10d      	cbz	r5, 3188 <MPSL_IRQ_CLOCK_Handler+0x100>
    3184:	6160      	str	r0, [r4, #20]
    3186:	e000      	b.n	318a <MPSL_IRQ_CLOCK_Handler+0x102>
    3188:	6120      	str	r0, [r4, #16]
    318a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    318e:	f7ff bfbf 	b.w	3110 <MPSL_IRQ_CLOCK_Handler+0x88>
    3192:	bd70      	pop	{r4, r5, r6, pc}
    3194:	2000002c 	.word	0x2000002c
    3198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    319c:	4606      	mov	r6, r0
    319e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    31a2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    31a6:	4628      	mov	r0, r5
    31a8:	f008 facb 	bl	b742 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31ac:	4680      	mov	r8, r0
    31ae:	f44f 7188 	mov.w	r1, #272	; 0x110
    31b2:	4628      	mov	r0, r5
    31b4:	f008 fac5 	bl	b742 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31b8:	4c27      	ldr	r4, [pc, #156]	; (3258 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    31ba:	4682      	mov	sl, r0
    31bc:	7827      	ldrb	r7, [r4, #0]
    31be:	f104 0008 	add.w	r0, r4, #8
    31c2:	f008 fb32 	bl	b82a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    31c6:	b110      	cbz	r0, 31ce <MPSL_IRQ_CLOCK_Handler+0x146>
    31c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    31cc:	e016      	b.n	31fc <MPSL_IRQ_CLOCK_Handler+0x174>
    31ce:	f04f 0901 	mov.w	r9, #1
    31d2:	b146      	cbz	r6, 31e6 <MPSL_IRQ_CLOCK_Handler+0x15e>
    31d4:	7aa0      	ldrb	r0, [r4, #10]
    31d6:	2803      	cmp	r0, #3
    31d8:	d105      	bne.n	31e6 <MPSL_IRQ_CLOCK_Handler+0x15e>
    31da:	2004      	movs	r0, #4
    31dc:	72a0      	strb	r0, [r4, #10]
    31de:	f7ff ff85 	bl	30ec <MPSL_IRQ_CLOCK_Handler+0x64>
    31e2:	f8c5 9010 	str.w	r9, [r5, #16]
    31e6:	2600      	movs	r6, #0
    31e8:	f1b8 0f00 	cmp.w	r8, #0
    31ec:	d018      	beq.n	3220 <MPSL_IRQ_CLOCK_Handler+0x198>
    31ee:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    31f2:	7aa0      	ldrb	r0, [r4, #10]
    31f4:	2804      	cmp	r0, #4
    31f6:	d004      	beq.n	3202 <MPSL_IRQ_CLOCK_Handler+0x17a>
    31f8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    31fc:	206d      	movs	r0, #109	; 0x6d
    31fe:	f000 fac3 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3202:	f008 fb48 	bl	b896 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3206:	b928      	cbnz	r0, 3214 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3208:	f008 fb66 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    320c:	b910      	cbnz	r0, 3214 <MPSL_IRQ_CLOCK_Handler+0x18c>
    320e:	f008 fb99 	bl	b944 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3212:	b108      	cbz	r0, 3218 <MPSL_IRQ_CLOCK_Handler+0x190>
    3214:	4811      	ldr	r0, [pc, #68]	; (325c <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3216:	6006      	str	r6, [r0, #0]
    3218:	2002      	movs	r0, #2
    321a:	72a0      	strb	r0, [r4, #10]
    321c:	f000 f8e6 	bl	33ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3220:	f1ba 0f00 	cmp.w	sl, #0
    3224:	d008      	beq.n	3238 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3226:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    322a:	7aa0      	ldrb	r0, [r4, #10]
    322c:	2802      	cmp	r0, #2
    322e:	d101      	bne.n	3234 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3230:	f7ff ff88 	bl	3144 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3234:	f8c5 9014 	str.w	r9, [r5, #20]
    3238:	b13f      	cbz	r7, 324a <MPSL_IRQ_CLOCK_Handler+0x1c2>
    323a:	7026      	strb	r6, [r4, #0]
    323c:	7aa0      	ldrb	r0, [r4, #10]
    323e:	2802      	cmp	r0, #2
    3240:	d101      	bne.n	3246 <MPSL_IRQ_CLOCK_Handler+0x1be>
    3242:	f7ff ff65 	bl	3110 <MPSL_IRQ_CLOCK_Handler+0x88>
    3246:	f000 f8d1 	bl	33ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    324a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    324e:	4802      	ldr	r0, [pc, #8]	; (3258 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3250:	3008      	adds	r0, #8
    3252:	f008 bb01 	b.w	b858 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3256:	0000      	.short	0x0000
    3258:	2000002c 	.word	0x2000002c
    325c:	40000c34 	.word	0x40000c34
    3260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3264:	4c5c      	ldr	r4, [pc, #368]	; (33d8 <MPSL_IRQ_CLOCK_Handler+0x350>)
    3266:	f04f 0800 	mov.w	r8, #0
    326a:	4606      	mov	r6, r0
    326c:	f8c4 8018 	str.w	r8, [r4, #24]
    3270:	7843      	ldrb	r3, [r0, #1]
    3272:	7882      	ldrb	r2, [r0, #2]
    3274:	7800      	ldrb	r0, [r0, #0]
    3276:	72e0      	strb	r0, [r4, #11]
    3278:	7163      	strb	r3, [r4, #5]
    327a:	2701      	movs	r7, #1
    327c:	71a2      	strb	r2, [r4, #6]
    327e:	07bd      	lsls	r5, r7, #30
    3280:	f884 8007 	strb.w	r8, [r4, #7]
    3284:	2805      	cmp	r0, #5
    3286:	d224      	bcs.n	32d2 <MPSL_IRQ_CLOCK_Handler+0x24a>
    3288:	e8df f000 	tbb	[pc, r0]
    328c:	1f05030f 	.word	0x1f05030f
    3290:	0021      	.short	0x0021
    3292:	61a7      	str	r7, [r4, #24]
    3294:	e009      	b.n	32aa <MPSL_IRQ_CLOCK_Handler+0x222>
    3296:	f000 f8c5 	bl	3424 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    329a:	2101      	movs	r1, #1
    329c:	4628      	mov	r0, r5
    329e:	f008 fa55 	bl	b74c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    32a2:	2800      	cmp	r0, #0
    32a4:	d0f9      	beq.n	329a <MPSL_IRQ_CLOCK_Handler+0x212>
    32a6:	2002      	movs	r0, #2
    32a8:	61a0      	str	r0, [r4, #24]
    32aa:	f008 fa7b 	bl	b7a4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    32ae:	b1b0      	cbz	r0, 32de <MPSL_IRQ_CLOCK_Handler+0x256>
    32b0:	f000 fa0c 	bl	36cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    32b4:	7e21      	ldrb	r1, [r4, #24]
    32b6:	f001 0103 	and.w	r1, r1, #3
    32ba:	4288      	cmp	r0, r1
    32bc:	d10f      	bne.n	32de <MPSL_IRQ_CLOCK_Handler+0x256>
    32be:	79b0      	ldrb	r0, [r6, #6]
    32c0:	b150      	cbz	r0, 32d8 <MPSL_IRQ_CLOCK_Handler+0x250>
    32c2:	2002      	movs	r0, #2
    32c4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    32c8:	e06a      	b.n	33a0 <MPSL_IRQ_CLOCK_Handler+0x318>
    32ca:	4844      	ldr	r0, [pc, #272]	; (33dc <MPSL_IRQ_CLOCK_Handler+0x354>)
    32cc:	e7ec      	b.n	32a8 <MPSL_IRQ_CLOCK_Handler+0x220>
    32ce:	4844      	ldr	r0, [pc, #272]	; (33e0 <MPSL_IRQ_CLOCK_Handler+0x358>)
    32d0:	e7ea      	b.n	32a8 <MPSL_IRQ_CLOCK_Handler+0x220>
    32d2:	f240 312d 	movw	r1, #813	; 0x32d
    32d6:	e049      	b.n	336c <MPSL_IRQ_CLOCK_Handler+0x2e4>
    32d8:	f000 f9cc 	bl	3674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    32dc:	e060      	b.n	33a0 <MPSL_IRQ_CLOCK_Handler+0x318>
    32de:	60ef      	str	r7, [r5, #12]
    32e0:	f44f 7a82 	mov.w	sl, #260	; 0x104
    32e4:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    32e8:	69a0      	ldr	r0, [r4, #24]
    32ea:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    32ee:	f008 fabe 	bl	b86e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    32f2:	b940      	cbnz	r0, 3306 <MPSL_IRQ_CLOCK_Handler+0x27e>
    32f4:	f008 fac5 	bl	b882 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    32f8:	b928      	cbnz	r0, 3306 <MPSL_IRQ_CLOCK_Handler+0x27e>
    32fa:	f008 fad9 	bl	b8b0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    32fe:	b910      	cbnz	r0, 3306 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3300:	f008 faea 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3304:	b138      	cbz	r0, 3316 <MPSL_IRQ_CLOCK_Handler+0x28e>
    3306:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    330a:	4836      	ldr	r0, [pc, #216]	; (33e4 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    330c:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3310:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3314:	6001      	str	r1, [r0, #0]
    3316:	f008 faaa 	bl	b86e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    331a:	b940      	cbnz	r0, 332e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    331c:	f008 fab1 	bl	b882 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3320:	b928      	cbnz	r0, 332e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3322:	f008 fac5 	bl	b8b0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3326:	b910      	cbnz	r0, 332e <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3328:	f008 fad6 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    332c:	b110      	cbz	r0, 3334 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    332e:	482d      	ldr	r0, [pc, #180]	; (33e4 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3330:	3010      	adds	r0, #16
    3332:	6007      	str	r7, [r0, #0]
    3334:	60af      	str	r7, [r5, #8]
    3336:	2002      	movs	r0, #2
    3338:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    333c:	79b0      	ldrb	r0, [r6, #6]
    333e:	bb78      	cbnz	r0, 33a0 <MPSL_IRQ_CLOCK_Handler+0x318>
    3340:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3344:	f010 0f02 	tst.w	r0, #2
    3348:	d00e      	beq.n	3368 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    334a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 33e8 <MPSL_IRQ_CLOCK_Handler+0x360>
    334e:	f8d9 1000 	ldr.w	r1, [r9]
    3352:	43c9      	mvns	r1, r1
    3354:	f341 1700 	sbfx	r7, r1, #4, #1
    3358:	f8d9 1000 	ldr.w	r1, [r9]
    335c:	f041 0110 	orr.w	r1, r1, #16
    3360:	f8c9 1000 	str.w	r1, [r9]
    3364:	1c7f      	adds	r7, r7, #1
    3366:	e007      	b.n	3378 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3368:	f240 21ee 	movw	r1, #750	; 0x2ee
    336c:	206d      	movs	r0, #109	; 0x6d
    336e:	f000 fa0b 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3372:	bf00      	nop
    3374:	f000 fb2e 	bl	39d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3378:	4651      	mov	r1, sl
    337a:	4628      	mov	r0, r5
    337c:	f008 f9e1 	bl	b742 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3380:	2800      	cmp	r0, #0
    3382:	d0f7      	beq.n	3374 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    3384:	f000 f976 	bl	3674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3388:	b92f      	cbnz	r7, 3396 <MPSL_IRQ_CLOCK_Handler+0x30e>
    338a:	f8d9 1000 	ldr.w	r1, [r9]
    338e:	f021 0110 	bic.w	r1, r1, #16
    3392:	f8c9 1000 	str.w	r1, [r9]
    3396:	2002      	movs	r0, #2
    3398:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    339c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    33a0:	79a0      	ldrb	r0, [r4, #6]
    33a2:	b170      	cbz	r0, 33c2 <MPSL_IRQ_CLOCK_Handler+0x33a>
    33a4:	7830      	ldrb	r0, [r6, #0]
    33a6:	b960      	cbnz	r0, 33c2 <MPSL_IRQ_CLOCK_Handler+0x33a>
    33a8:	f000 f976 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    33ac:	4606      	mov	r6, r0
    33ae:	f000 fa5b 	bl	3868 <mpsl_temperature_get>
    33b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    33b6:	b116      	cbz	r6, 33be <MPSL_IRQ_CLOCK_Handler+0x336>
    33b8:	e9c4 2004 	strd	r2, r0, [r4, #16]
    33bc:	e001      	b.n	33c2 <MPSL_IRQ_CLOCK_Handler+0x33a>
    33be:	e9c4 0204 	strd	r0, r2, [r4, #16]
    33c2:	2101      	movs	r1, #1
    33c4:	4628      	mov	r0, r5
    33c6:	f008 f9c1 	bl	b74c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    33ca:	b108      	cbz	r0, 33d0 <MPSL_IRQ_CLOCK_Handler+0x348>
    33cc:	f000 f95e 	bl	368c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    33d0:	f884 800a 	strb.w	r8, [r4, #10]
    33d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    33d8:	2000002c 	.word	0x2000002c
    33dc:	00020001 	.word	0x00020001
    33e0:	00030001 	.word	0x00030001
    33e4:	4000053c 	.word	0x4000053c
    33e8:	e000ed10 	.word	0xe000ed10

000033ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    33ec:	b510      	push	{r4, lr}
    33ee:	f3ef 8410 	mrs	r4, PRIMASK
    33f2:	b672      	cpsid	i
    33f4:	480a      	ldr	r0, [pc, #40]	; (3420 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    33f6:	7841      	ldrb	r1, [r0, #1]
    33f8:	b129      	cbz	r1, 3406 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    33fa:	7841      	ldrb	r1, [r0, #1]
    33fc:	1e49      	subs	r1, r1, #1
    33fe:	7041      	strb	r1, [r0, #1]
    3400:	7841      	ldrb	r1, [r0, #1]
    3402:	b129      	cbz	r1, 3410 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3404:	e008      	b.n	3418 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3406:	f240 110d 	movw	r1, #269	; 0x10d
    340a:	206d      	movs	r0, #109	; 0x6d
    340c:	f000 f9bc 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3410:	7880      	ldrb	r0, [r0, #2]
    3412:	b908      	cbnz	r0, 3418 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3414:	f000 f94e 	bl	36b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3418:	2c00      	cmp	r4, #0
    341a:	d100      	bne.n	341e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    341c:	b662      	cpsie	i
    341e:	bd10      	pop	{r4, pc}
    3420:	2000002c 	.word	0x2000002c

00003424 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3424:	b510      	push	{r4, lr}
    3426:	f3ef 8410 	mrs	r4, PRIMASK
    342a:	b672      	cpsid	i
    342c:	4806      	ldr	r0, [pc, #24]	; (3448 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    342e:	7841      	ldrb	r1, [r0, #1]
    3430:	1c49      	adds	r1, r1, #1
    3432:	7041      	strb	r1, [r0, #1]
    3434:	7840      	ldrb	r0, [r0, #1]
    3436:	2801      	cmp	r0, #1
    3438:	d101      	bne.n	343e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    343a:	f008 f99e 	bl	b77a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    343e:	2c00      	cmp	r4, #0
    3440:	d100      	bne.n	3444 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3442:	b662      	cpsie	i
    3444:	bd10      	pop	{r4, pc}
    3446:	0000      	.short	0x0000
    3448:	2000002c 	.word	0x2000002c

0000344c <mpsl_clock_hfclk_release>:
    344c:	4805      	ldr	r0, [pc, #20]	; (3464 <mpsl_clock_hfclk_release+0x18>)
    344e:	b510      	push	{r4, lr}
    3450:	78c1      	ldrb	r1, [r0, #3]
    3452:	b121      	cbz	r1, 345e <mpsl_clock_hfclk_release+0x12>
    3454:	2100      	movs	r1, #0
    3456:	7101      	strb	r1, [r0, #4]
    3458:	70c1      	strb	r1, [r0, #3]
    345a:	f7ff ffc7 	bl	33ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    345e:	2000      	movs	r0, #0
    3460:	bd10      	pop	{r4, pc}
    3462:	0000      	.short	0x0000
    3464:	2000002c 	.word	0x2000002c

00003468 <mpsl_clock_hfclk_request>:
    3468:	b570      	push	{r4, r5, r6, lr}
    346a:	4c0c      	ldr	r4, [pc, #48]	; (349c <mpsl_clock_hfclk_request+0x34>)
    346c:	78e1      	ldrb	r1, [r4, #3]
    346e:	b961      	cbnz	r1, 348a <mpsl_clock_hfclk_request+0x22>
    3470:	2501      	movs	r5, #1
    3472:	70e5      	strb	r5, [r4, #3]
    3474:	61e0      	str	r0, [r4, #28]
    3476:	f7ff ffd5 	bl	3424 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    347a:	f000 f90d 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    347e:	b130      	cbz	r0, 348e <mpsl_clock_hfclk_request+0x26>
    3480:	69e0      	ldr	r0, [r4, #28]
    3482:	b110      	cbz	r0, 348a <mpsl_clock_hfclk_request+0x22>
    3484:	4780      	blx	r0
    3486:	2000      	movs	r0, #0
    3488:	61e0      	str	r0, [r4, #28]
    348a:	2000      	movs	r0, #0
    348c:	bd70      	pop	{r4, r5, r6, pc}
    348e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3492:	7125      	strb	r5, [r4, #4]
    3494:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3498:	e7f7      	b.n	348a <mpsl_clock_hfclk_request+0x22>
    349a:	0000      	.short	0x0000
    349c:	2000002c 	.word	0x2000002c

000034a0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    34a0:	f3ef 8010 	mrs	r0, PRIMASK
    34a4:	b672      	cpsid	i
    34a6:	4904      	ldr	r1, [pc, #16]	; (34b8 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    34a8:	788a      	ldrb	r2, [r1, #2]
    34aa:	1c52      	adds	r2, r2, #1
    34ac:	708a      	strb	r2, [r1, #2]
    34ae:	2800      	cmp	r0, #0
    34b0:	d100      	bne.n	34b4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    34b2:	b662      	cpsie	i
    34b4:	4770      	bx	lr
    34b6:	0000      	.short	0x0000
    34b8:	2000002c 	.word	0x2000002c

000034bc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    34bc:	b510      	push	{r4, lr}
    34be:	f3ef 8410 	mrs	r4, PRIMASK
    34c2:	b672      	cpsid	i
    34c4:	480a      	ldr	r0, [pc, #40]	; (34f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    34c6:	7881      	ldrb	r1, [r0, #2]
    34c8:	b129      	cbz	r1, 34d6 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    34ca:	7881      	ldrb	r1, [r0, #2]
    34cc:	1e49      	subs	r1, r1, #1
    34ce:	7081      	strb	r1, [r0, #2]
    34d0:	7841      	ldrb	r1, [r0, #1]
    34d2:	b129      	cbz	r1, 34e0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    34d4:	e008      	b.n	34e8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    34d6:	f240 1125 	movw	r1, #293	; 0x125
    34da:	206d      	movs	r0, #109	; 0x6d
    34dc:	f000 f954 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34e0:	7880      	ldrb	r0, [r0, #2]
    34e2:	b908      	cbnz	r0, 34e8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    34e4:	f000 f8e6 	bl	36b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    34e8:	2c00      	cmp	r4, #0
    34ea:	d100      	bne.n	34ee <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    34ec:	b662      	cpsie	i
    34ee:	bd10      	pop	{r4, pc}
    34f0:	2000002c 	.word	0x2000002c

000034f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    34f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34f8:	0004      	movs	r4, r0
    34fa:	f06f 0015 	mvn.w	r0, #21
    34fe:	d03c      	beq.n	357a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3500:	7821      	ldrb	r1, [r4, #0]
    3502:	2904      	cmp	r1, #4
    3504:	d839      	bhi.n	357a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3506:	2900      	cmp	r1, #0
    3508:	7861      	ldrb	r1, [r4, #1]
    350a:	d038      	beq.n	357e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    350c:	2900      	cmp	r1, #0
    350e:	d134      	bne.n	357a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3510:	78a1      	ldrb	r1, [r4, #2]
    3512:	2900      	cmp	r1, #0
    3514:	d131      	bne.n	357a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3516:	2000      	movs	r0, #0
    3518:	f008 f8de 	bl	b6d8 <MPSL_IRQ_RADIO_Handler+0x1e>
    351c:	2000      	movs	r0, #0
    351e:	f008 f8ce 	bl	b6be <MPSL_IRQ_RADIO_Handler+0x4>
    3522:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3526:	f04f 31ff 	mov.w	r1, #4294967295
    352a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    352e:	2600      	movs	r6, #0
    3530:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3534:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3538:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    353c:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3540:	4f14      	ldr	r7, [pc, #80]	; (3594 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3542:	707e      	strb	r6, [r7, #1]
    3544:	88a0      	ldrh	r0, [r4, #4]
    3546:	81b8      	strh	r0, [r7, #12]
    3548:	f008 f90e 	bl	b768 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    354c:	2501      	movs	r5, #1
    354e:	b108      	cbz	r0, 3554 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3550:	70fd      	strb	r5, [r7, #3]
    3552:	707d      	strb	r5, [r7, #1]
    3554:	2101      	movs	r1, #1
    3556:	4640      	mov	r0, r8
    3558:	f008 f8f8 	bl	b74c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    355c:	b108      	cbz	r0, 3562 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    355e:	f000 f895 	bl	368c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3562:	4620      	mov	r0, r4
    3564:	f7ff fe7c 	bl	3260 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3568:	727d      	strb	r5, [r7, #9]
    356a:	2000      	movs	r0, #0
    356c:	f008 f8a7 	bl	b6be <MPSL_IRQ_RADIO_Handler+0x4>
    3570:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3574:	4630      	mov	r0, r6
    3576:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    357a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    357e:	2900      	cmp	r1, #0
    3580:	d0fb      	beq.n	357a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3582:	2920      	cmp	r1, #32
    3584:	d8f9      	bhi.n	357a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3586:	78a1      	ldrb	r1, [r4, #2]
    3588:	2921      	cmp	r1, #33	; 0x21
    358a:	d8f6      	bhi.n	357a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    358c:	2901      	cmp	r1, #1
    358e:	d1c2      	bne.n	3516 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3590:	e7f3      	b.n	357a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3592:	0000      	.short	0x0000
    3594:	2000002c 	.word	0x2000002c

00003598 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3598:	4801      	ldr	r0, [pc, #4]	; (35a0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    359a:	8980      	ldrh	r0, [r0, #12]
    359c:	4770      	bx	lr
    359e:	0000      	.short	0x0000
    35a0:	2000002c 	.word	0x2000002c

000035a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    35a4:	b510      	push	{r4, lr}
    35a6:	480d      	ldr	r0, [pc, #52]	; (35dc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    35a8:	f008 f93f 	bl	b82a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    35ac:	490b      	ldr	r1, [pc, #44]	; (35dc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    35ae:	3908      	subs	r1, #8
    35b0:	b148      	cbz	r0, 35c6 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    35b2:	2001      	movs	r0, #1
    35b4:	7008      	strb	r0, [r1, #0]
    35b6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    35ba:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    35be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    35c2:	f7ff bf2f 	b.w	3424 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    35c6:	7a88      	ldrb	r0, [r1, #10]
    35c8:	2802      	cmp	r0, #2
    35ca:	d101      	bne.n	35d0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    35cc:	f7ff fda0 	bl	3110 <MPSL_IRQ_CLOCK_Handler+0x88>
    35d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    35d4:	4801      	ldr	r0, [pc, #4]	; (35dc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    35d6:	f008 b93f 	b.w	b858 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    35da:	0000      	.short	0x0000
    35dc:	20000034 	.word	0x20000034

000035e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    35e0:	4802      	ldr	r0, [pc, #8]	; (35ec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    35e2:	7a80      	ldrb	r0, [r0, #10]
    35e4:	2800      	cmp	r0, #0
    35e6:	d000      	beq.n	35ea <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    35e8:	2001      	movs	r0, #1
    35ea:	4770      	bx	lr
    35ec:	2000002c 	.word	0x2000002c

000035f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    35f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35f2:	4d1f      	ldr	r5, [pc, #124]	; (3670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    35f4:	7ae8      	ldrb	r0, [r5, #11]
    35f6:	2800      	cmp	r0, #0
    35f8:	d10f      	bne.n	361a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    35fa:	7e28      	ldrb	r0, [r5, #24]
    35fc:	f000 0003 	and.w	r0, r0, #3
    3600:	f008 f8c0 	bl	b784 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3604:	2800      	cmp	r0, #0
    3606:	d008      	beq.n	361a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3608:	f3ef 8110 	mrs	r1, PRIMASK
    360c:	b672      	cpsid	i
    360e:	f7ff ffe7 	bl	35e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3612:	b118      	cbz	r0, 361c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3614:	2900      	cmp	r1, #0
    3616:	d100      	bne.n	361a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3618:	b662      	cpsie	i
    361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    361c:	2601      	movs	r6, #1
    361e:	72ae      	strb	r6, [r5, #10]
    3620:	b901      	cbnz	r1, 3624 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3622:	b662      	cpsie	i
    3624:	2018      	movs	r0, #24
    3626:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    362a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    362e:	61a6      	str	r6, [r4, #24]
    3630:	f44f 7020 	mov.w	r0, #640	; 0x280
    3634:	f8ad 0000 	strh.w	r0, [sp]
    3638:	f8bd 0000 	ldrh.w	r0, [sp]
    363c:	1e41      	subs	r1, r0, #1
    363e:	f8ad 1000 	strh.w	r1, [sp]
    3642:	d2f9      	bcs.n	3638 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3644:	2700      	movs	r7, #0
    3646:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    364a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    364e:	4808      	ldr	r0, [pc, #32]	; (3670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3650:	3008      	adds	r0, #8
    3652:	f008 f8fd 	bl	b850 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3656:	702f      	strb	r7, [r5, #0]
    3658:	f7ff fd5a 	bl	3110 <MPSL_IRQ_CLOCK_Handler+0x88>
    365c:	6166      	str	r6, [r4, #20]
    365e:	7968      	ldrb	r0, [r5, #5]
    3660:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3664:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3668:	2018      	movs	r0, #24
    366a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3670:	2000002c 	.word	0x2000002c

00003674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3674:	b510      	push	{r4, lr}
    3676:	4c04      	ldr	r4, [pc, #16]	; (3688 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3678:	7e20      	ldrb	r0, [r4, #24]
    367a:	f000 0003 	and.w	r0, r0, #3
    367e:	f008 f881 	bl	b784 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3682:	2800      	cmp	r0, #0
    3684:	d0f8      	beq.n	3678 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3686:	bd10      	pop	{r4, pc}
    3688:	2000002c 	.word	0x2000002c

0000368c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    368c:	4901      	ldr	r1, [pc, #4]	; (3694 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    368e:	2001      	movs	r0, #1
    3690:	7008      	strb	r0, [r1, #0]
    3692:	4770      	bx	lr
    3694:	20000290 	.word	0x20000290

00003698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3698:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    369c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    36a0:	b918      	cbnz	r0, 36aa <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    36a2:	4803      	ldr	r0, [pc, #12]	; (36b0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    36a4:	7800      	ldrb	r0, [r0, #0]
    36a6:	2800      	cmp	r0, #0
    36a8:	d000      	beq.n	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    36aa:	2001      	movs	r0, #1
    36ac:	4770      	bx	lr
    36ae:	0000      	.short	0x0000
    36b0:	20000290 	.word	0x20000290

000036b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    36b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    36b8:	2101      	movs	r1, #1
    36ba:	6041      	str	r1, [r0, #4]
    36bc:	2100      	movs	r1, #0
    36be:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    36c2:	4801      	ldr	r0, [pc, #4]	; (36c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    36c4:	7001      	strb	r1, [r0, #0]
    36c6:	4770      	bx	lr
    36c8:	20000290 	.word	0x20000290

000036cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    36cc:	4802      	ldr	r0, [pc, #8]	; (36d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    36ce:	6800      	ldr	r0, [r0, #0]
    36d0:	f000 0003 	and.w	r0, r0, #3
    36d4:	4770      	bx	lr
    36d6:	0000      	.short	0x0000
    36d8:	4000041c 	.word	0x4000041c
    36dc:	b510      	push	{r4, lr}
    36de:	b131      	cbz	r1, 36ee <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    36e0:	2901      	cmp	r1, #1
    36e2:	d007      	beq.n	36f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    36e4:	f240 3102 	movw	r1, #770	; 0x302
    36e8:	a005      	add	r0, pc, #20	; (adr r0, 3700 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    36ea:	f000 f821 	bl	3730 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    36ee:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    36f2:	e001      	b.n	36f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    36f4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    36f8:	f000 0001 	and.w	r0, r0, #1
    36fc:	bd10      	pop	{r4, pc}
    36fe:	0000      	.short	0x0000
    3700:	5f66726e 	.word	0x5f66726e
    3704:	636f6c63 	.word	0x636f6c63
    3708:	00682e6b 	.word	0x00682e6b
    370c:	f3bf 8f4f 	dsb	sy
    3710:	4805      	ldr	r0, [pc, #20]	; (3728 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3712:	6801      	ldr	r1, [r0, #0]
    3714:	4a05      	ldr	r2, [pc, #20]	; (372c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3716:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    371a:	4311      	orrs	r1, r2
    371c:	6001      	str	r1, [r0, #0]
    371e:	f3bf 8f4f 	dsb	sy
    3722:	bf00      	nop
    3724:	e7fd      	b.n	3722 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3726:	0000      	.short	0x0000
    3728:	e000ed0c 	.word	0xe000ed0c
    372c:	05fa0004 	.word	0x05fa0004

00003730 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3730:	b672      	cpsid	i
    3732:	4a03      	ldr	r2, [pc, #12]	; (3740 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3734:	6852      	ldr	r2, [r2, #4]
    3736:	b102      	cbz	r2, 373a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3738:	4790      	blx	r2
    373a:	f7ff ffe7 	bl	370c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    373e:	0000      	.short	0x0000
    3740:	2000004c 	.word	0x2000004c
    3744:	4806      	ldr	r0, [pc, #24]	; (3760 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3746:	b510      	push	{r4, lr}
    3748:	2100      	movs	r1, #0
    374a:	6001      	str	r1, [r0, #0]
    374c:	2101      	movs	r1, #1
    374e:	6001      	str	r1, [r0, #0]
    3750:	4608      	mov	r0, r1
    3752:	f008 f83e 	bl	b7d2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    375a:	2001      	movs	r0, #1
    375c:	f008 b82c 	b.w	b7b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3760:	40001ffc 	.word	0x40001ffc
    3764:	4807      	ldr	r0, [pc, #28]	; (3784 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3766:	b510      	push	{r4, lr}
    3768:	2101      	movs	r1, #1
    376a:	6041      	str	r1, [r0, #4]
    376c:	1e89      	subs	r1, r1, #2
    376e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3772:	200c      	movs	r0, #12
    3774:	f008 f82d 	bl	b7d2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    377c:	200c      	movs	r0, #12
    377e:	f008 b81b 	b.w	b7b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3782:	0000      	.short	0x0000
    3784:	4000c000 	.word	0x4000c000

00003788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3788:	b50e      	push	{r1, r2, r3, lr}
    378a:	b672      	cpsid	i
    378c:	4a0f      	ldr	r2, [pc, #60]	; (37cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    378e:	6855      	ldr	r5, [r2, #4]
    3790:	b1d5      	cbz	r5, 37c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3792:	2200      	movs	r2, #0
    3794:	4603      	mov	r3, r0
    3796:	466e      	mov	r6, sp
    3798:	240a      	movs	r4, #10
    379a:	e003      	b.n	37a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    379c:	fbb0 f0f4 	udiv	r0, r0, r4
    37a0:	1c52      	adds	r2, r2, #1
    37a2:	b2d2      	uxtb	r2, r2
    37a4:	2800      	cmp	r0, #0
    37a6:	d1f9      	bne.n	379c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    37a8:	54b0      	strb	r0, [r6, r2]
    37aa:	e009      	b.n	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    37ac:	fbb3 f0f4 	udiv	r0, r3, r4
    37b0:	fb04 3010 	mls	r0, r4, r0, r3
    37b4:	fbb3 f3f4 	udiv	r3, r3, r4
    37b8:	1e52      	subs	r2, r2, #1
    37ba:	b2d2      	uxtb	r2, r2
    37bc:	3030      	adds	r0, #48	; 0x30
    37be:	54b0      	strb	r0, [r6, r2]
    37c0:	2a00      	cmp	r2, #0
    37c2:	d1f3      	bne.n	37ac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    37c4:	4630      	mov	r0, r6
    37c6:	47a8      	blx	r5
    37c8:	f7ff ffa0 	bl	370c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    37cc:	2000004c 	.word	0x2000004c

000037d0 <mpsl_init>:
    37d0:	b570      	push	{r4, r5, r6, lr}
    37d2:	4c17      	ldr	r4, [pc, #92]	; (3830 <mpsl_init+0x60>)
    37d4:	4606      	mov	r6, r0
    37d6:	460d      	mov	r5, r1
    37d8:	7860      	ldrb	r0, [r4, #1]
    37da:	b110      	cbz	r0, 37e2 <mpsl_init+0x12>
    37dc:	f04f 30ff 	mov.w	r0, #4294967295
    37e0:	bd70      	pop	{r4, r5, r6, pc}
    37e2:	b906      	cbnz	r6, 37e6 <mpsl_init+0x16>
    37e4:	4e13      	ldr	r6, [pc, #76]	; (3834 <mpsl_init+0x64>)
    37e6:	6062      	str	r2, [r4, #4]
    37e8:	7025      	strb	r5, [r4, #0]
    37ea:	f7ff ffab 	bl	3744 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    37ee:	f7ff ffb9 	bl	3764 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    37f2:	4630      	mov	r0, r6
    37f4:	f7ff fe7e 	bl	34f4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    37f8:	0006      	movs	r6, r0
    37fa:	d1f1      	bne.n	37e0 <mpsl_init+0x10>
    37fc:	f7fe fed8 	bl	25b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3800:	f7ff fef6 	bl	35f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3804:	f007 ff32 	bl	b66c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3808:	4628      	mov	r0, r5
    380a:	f007 ffd5 	bl	b7b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    380e:	2001      	movs	r0, #1
    3810:	2d00      	cmp	r5, #0
    3812:	db09      	blt.n	3828 <mpsl_init+0x58>
    3814:	f005 011f 	and.w	r1, r5, #31
    3818:	fa00 f101 	lsl.w	r1, r0, r1
    381c:	096a      	lsrs	r2, r5, #5
    381e:	0092      	lsls	r2, r2, #2
    3820:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3824:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3828:	7060      	strb	r0, [r4, #1]
    382a:	4630      	mov	r0, r6
    382c:	bd70      	pop	{r4, r5, r6, pc}
    382e:	0000      	.short	0x0000
    3830:	2000004c 	.word	0x2000004c
    3834:	0000b7f4 	.word	0x0000b7f4

00003838 <mpsl_is_initialized>:
    3838:	4801      	ldr	r0, [pc, #4]	; (3840 <mpsl_is_initialized+0x8>)
    383a:	7840      	ldrb	r0, [r0, #1]
    383c:	4770      	bx	lr
    383e:	0000      	.short	0x0000
    3840:	2000004c 	.word	0x2000004c

00003844 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3844:	4807      	ldr	r0, [pc, #28]	; (3864 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3846:	f990 0000 	ldrsb.w	r0, [r0]
    384a:	2800      	cmp	r0, #0
    384c:	db09      	blt.n	3862 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    384e:	f000 021f 	and.w	r2, r0, #31
    3852:	2101      	movs	r1, #1
    3854:	4091      	lsls	r1, r2
    3856:	0940      	lsrs	r0, r0, #5
    3858:	0080      	lsls	r0, r0, #2
    385a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    385e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3862:	4770      	bx	lr
    3864:	2000004c 	.word	0x2000004c

00003868 <mpsl_temperature_get>:
    3868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    386c:	2601      	movs	r6, #1
    386e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3872:	0331      	lsls	r1, r6, #12
    3874:	f04f 0800 	mov.w	r8, #0
    3878:	4640      	mov	r0, r8
    387a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    387e:	f3bf 8f4f 	dsb	sy
    3882:	f3bf 8f6f 	isb	sy
    3886:	4c16      	ldr	r4, [pc, #88]	; (38e0 <mpsl_temperature_get+0x78>)
    3888:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    388c:	200c      	movs	r0, #12
    388e:	f007 ffbf 	bl	b810 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3892:	4d14      	ldr	r5, [pc, #80]	; (38e4 <mpsl_temperature_get+0x7c>)
    3894:	6828      	ldr	r0, [r5, #0]
    3896:	43c0      	mvns	r0, r0
    3898:	f340 1700 	sbfx	r7, r0, #4, #1
    389c:	6828      	ldr	r0, [r5, #0]
    389e:	f040 0010 	orr.w	r0, r0, #16
    38a2:	6028      	str	r0, [r5, #0]
    38a4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    38a8:	6026      	str	r6, [r4, #0]
    38aa:	1c7f      	adds	r7, r7, #1
    38ac:	e002      	b.n	38b4 <mpsl_temperature_get+0x4c>
    38ae:	bf00      	nop
    38b0:	f000 f890 	bl	39d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    38b4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    38b8:	2800      	cmp	r0, #0
    38ba:	d0f9      	beq.n	38b0 <mpsl_temperature_get+0x48>
    38bc:	b91f      	cbnz	r7, 38c6 <mpsl_temperature_get+0x5e>
    38be:	6828      	ldr	r0, [r5, #0]
    38c0:	f020 0010 	bic.w	r0, r0, #16
    38c4:	6028      	str	r0, [r5, #0]
    38c6:	4808      	ldr	r0, [pc, #32]	; (38e8 <mpsl_temperature_get+0x80>)
    38c8:	6805      	ldr	r5, [r0, #0]
    38ca:	6066      	str	r6, [r4, #4]
    38cc:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    38d0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    38d4:	200c      	movs	r0, #12
    38d6:	f007 ff9b 	bl	b810 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    38da:	4628      	mov	r0, r5
    38dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38e0:	4000c000 	.word	0x4000c000
    38e4:	e000ed10 	.word	0xe000ed10
    38e8:	4000c508 	.word	0x4000c508

000038ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    38ec:	b510      	push	{r4, lr}
    38ee:	4602      	mov	r2, r0
    38f0:	2005      	movs	r0, #5
    38f2:	490c      	ldr	r1, [pc, #48]	; (3924 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    38f4:	e004      	b.n	3900 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    38f6:	bf00      	nop
    38f8:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    38fc:	791b      	ldrb	r3, [r3, #4]
    38fe:	b133      	cbz	r3, 390e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3900:	1e40      	subs	r0, r0, #1
    3902:	b2c0      	uxtb	r0, r0
    3904:	d2f8      	bcs.n	38f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3906:	2148      	movs	r1, #72	; 0x48
    3908:	2069      	movs	r0, #105	; 0x69
    390a:	f7ff ff3d 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    390e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3912:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3916:	2200      	movs	r2, #0
    3918:	714a      	strb	r2, [r1, #5]
    391a:	718a      	strb	r2, [r1, #6]
    391c:	2201      	movs	r2, #1
    391e:	710a      	strb	r2, [r1, #4]
    3920:	bd10      	pop	{r4, pc}
    3922:	0000      	.short	0x0000
    3924:	20000e60 	.word	0x20000e60

00003928 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3928:	b510      	push	{r4, lr}
    392a:	2805      	cmp	r0, #5
    392c:	d301      	bcc.n	3932 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    392e:	2158      	movs	r1, #88	; 0x58
    3930:	e006      	b.n	3940 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3932:	490a      	ldr	r1, [pc, #40]	; (395c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3934:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3938:	7901      	ldrb	r1, [r0, #4]
    393a:	2901      	cmp	r1, #1
    393c:	d003      	beq.n	3946 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    393e:	2159      	movs	r1, #89	; 0x59
    3940:	2069      	movs	r0, #105	; 0x69
    3942:	f7ff ff21 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3946:	7941      	ldrb	r1, [r0, #5]
    3948:	7982      	ldrb	r2, [r0, #6]
    394a:	1c49      	adds	r1, r1, #1
    394c:	b2c9      	uxtb	r1, r1
    394e:	428a      	cmp	r2, r1
    3950:	d000      	beq.n	3954 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3952:	7141      	strb	r1, [r0, #5]
    3954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3958:	f7ff bf74 	b.w	3844 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    395c:	20000e60 	.word	0x20000e60

00003960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3960:	b570      	push	{r4, r5, r6, lr}
    3962:	2505      	movs	r5, #5
    3964:	4e0e      	ldr	r6, [pc, #56]	; (39a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3966:	4c0f      	ldr	r4, [pc, #60]	; (39a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3968:	e016      	b.n	3998 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    396a:	7821      	ldrb	r1, [r4, #0]
    396c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3970:	7902      	ldrb	r2, [r0, #4]
    3972:	2a01      	cmp	r2, #1
    3974:	d108      	bne.n	3988 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3976:	7942      	ldrb	r2, [r0, #5]
    3978:	7983      	ldrb	r3, [r0, #6]
    397a:	429a      	cmp	r2, r3
    397c:	d004      	beq.n	3988 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    397e:	7942      	ldrb	r2, [r0, #5]
    3980:	7182      	strb	r2, [r0, #6]
    3982:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3986:	4780      	blx	r0
    3988:	7820      	ldrb	r0, [r4, #0]
    398a:	1c40      	adds	r0, r0, #1
    398c:	b2c0      	uxtb	r0, r0
    398e:	7020      	strb	r0, [r4, #0]
    3990:	2805      	cmp	r0, #5
    3992:	d301      	bcc.n	3998 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3994:	2000      	movs	r0, #0
    3996:	7020      	strb	r0, [r4, #0]
    3998:	1e6d      	subs	r5, r5, #1
    399a:	b2ed      	uxtb	r5, r5
    399c:	d2e5      	bcs.n	396a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    399e:	bd70      	pop	{r4, r5, r6, pc}
    39a0:	20000e60 	.word	0x20000e60
    39a4:	20000291 	.word	0x20000291

000039a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    39a8:	b500      	push	{lr}
    39aa:	f007 ff60 	bl	b86e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    39ae:	b940      	cbnz	r0, 39c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39b0:	f007 ff67 	bl	b882 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    39b4:	b928      	cbnz	r0, 39c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39b6:	f007 ff7b 	bl	b8b0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    39ba:	b910      	cbnz	r0, 39c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39bc:	f007 ff8c 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39c0:	b108      	cbz	r0, 39c6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    39c2:	4802      	ldr	r0, [pc, #8]	; (39cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    39c4:	bd00      	pop	{pc}
    39c6:	4802      	ldr	r0, [pc, #8]	; (39d0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    39c8:	bd00      	pop	{pc}
    39ca:	0000      	.short	0x0000
    39cc:	4000050c 	.word	0x4000050c
    39d0:	4001e700 	.word	0x4001e700

000039d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    39d4:	b510      	push	{r4, lr}
    39d6:	f007 ff7f 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39da:	b330      	cbz	r0, 3a2a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    39dc:	f3ef 8010 	mrs	r0, PRIMASK
    39e0:	b1c8      	cbz	r0, 3a16 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    39e2:	2100      	movs	r1, #0
    39e4:	b672      	cpsid	i
    39e6:	4812      	ldr	r0, [pc, #72]	; (3a30 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    39e8:	6802      	ldr	r2, [r0, #0]
    39ea:	6803      	ldr	r3, [r0, #0]
    39ec:	f3c2 1200 	ubfx	r2, r2, #4, #1
    39f0:	f043 0310 	orr.w	r3, r3, #16
    39f4:	6003      	str	r3, [r0, #0]
    39f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    39fa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    39fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3a02:	431c      	orrs	r4, r3
    3a04:	d000      	beq.n	3a08 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3a06:	bf40      	sev
    3a08:	bf20      	wfe
    3a0a:	bf00      	nop
    3a0c:	bf00      	nop
    3a0e:	bf00      	nop
    3a10:	bf00      	nop
    3a12:	b112      	cbz	r2, 3a1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3a14:	e005      	b.n	3a22 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3a16:	2101      	movs	r1, #1
    3a18:	e7e4      	b.n	39e4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3a1a:	6802      	ldr	r2, [r0, #0]
    3a1c:	f022 0210 	bic.w	r2, r2, #16
    3a20:	6002      	str	r2, [r0, #0]
    3a22:	2900      	cmp	r1, #0
    3a24:	d000      	beq.n	3a28 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3a26:	b662      	cpsie	i
    3a28:	bd10      	pop	{r4, pc}
    3a2a:	bf20      	wfe
    3a2c:	bd10      	pop	{r4, pc}
    3a2e:	0000      	.short	0x0000
    3a30:	e000ed10 	.word	0xe000ed10

00003a34 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3a34:	0000bb49 0000bb65 0000bb53 0000bb5f     I...e...S..._...
    3a44:	0000bb4d 0000bb47 0000bb45 0000bb6b     M...G...E...k...
    3a54:	0000bb59 0000bb3f 0000bb37 0000bb3b     Y...?...7...;...
    3a64:	0000bb31                                1...

00003a68 <mpsl_fem_disable>:
    3a68:	4801      	ldr	r0, [pc, #4]	; (3a70 <mpsl_fem_disable+0x8>)
    3a6a:	6800      	ldr	r0, [r0, #0]
    3a6c:	6800      	ldr	r0, [r0, #0]
    3a6e:	4700      	bx	r0
    3a70:	20000054 	.word	0x20000054

00003a74 <mpsl_fem_lna_configuration_clear>:
    3a74:	4801      	ldr	r0, [pc, #4]	; (3a7c <mpsl_fem_lna_configuration_clear+0x8>)
    3a76:	6800      	ldr	r0, [r0, #0]
    3a78:	6900      	ldr	r0, [r0, #16]
    3a7a:	4700      	bx	r0
    3a7c:	20000054 	.word	0x20000054

00003a80 <mpsl_fem_lna_configuration_set>:
    3a80:	4a01      	ldr	r2, [pc, #4]	; (3a88 <mpsl_fem_lna_configuration_set+0x8>)
    3a82:	6812      	ldr	r2, [r2, #0]
    3a84:	6892      	ldr	r2, [r2, #8]
    3a86:	4710      	bx	r2
    3a88:	20000054 	.word	0x20000054

00003a8c <mpsl_fem_pa_configuration_clear>:
    3a8c:	4801      	ldr	r0, [pc, #4]	; (3a94 <mpsl_fem_pa_configuration_clear+0x8>)
    3a8e:	6800      	ldr	r0, [r0, #0]
    3a90:	68c0      	ldr	r0, [r0, #12]
    3a92:	4700      	bx	r0
    3a94:	20000054 	.word	0x20000054

00003a98 <mpsl_fem_pa_configuration_set>:
    3a98:	4a01      	ldr	r2, [pc, #4]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a9a:	6812      	ldr	r2, [r2, #0]
    3a9c:	6852      	ldr	r2, [r2, #4]
    3a9e:	4710      	bx	r2
    3aa0:	20000054 	.word	0x20000054

00003aa4 <mpsl_fem_pa_is_configured>:
    3aa4:	4901      	ldr	r1, [pc, #4]	; (3aac <mpsl_fem_pa_is_configured+0x8>)
    3aa6:	6809      	ldr	r1, [r1, #0]
    3aa8:	6a09      	ldr	r1, [r1, #32]
    3aaa:	4708      	bx	r1
    3aac:	20000054 	.word	0x20000054

00003ab0 <mpsl_fem_device_config_254_apply_get>:
    3ab0:	4801      	ldr	r0, [pc, #4]	; (3ab8 <mpsl_fem_device_config_254_apply_get+0x8>)
    3ab2:	7800      	ldrb	r0, [r0, #0]
    3ab4:	4770      	bx	lr
    3ab6:	0000      	.short	0x0000
    3ab8:	20000292 	.word	0x20000292
    3abc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3abe:	4c17      	ldr	r4, [pc, #92]	; (3b1c <mpsl_fem_device_config_254_apply_get+0x6c>)
    3ac0:	7a20      	ldrb	r0, [r4, #8]
    3ac2:	2802      	cmp	r0, #2
    3ac4:	d200      	bcs.n	3ac8 <mpsl_fem_device_config_254_apply_get+0x18>
    3ac6:	2002      	movs	r0, #2
    3ac8:	f88d 0001 	strb.w	r0, [sp, #1]
    3acc:	79e0      	ldrb	r0, [r4, #7]
    3ace:	2803      	cmp	r0, #3
    3ad0:	d200      	bcs.n	3ad4 <mpsl_fem_device_config_254_apply_get+0x24>
    3ad2:	2003      	movs	r0, #3
    3ad4:	f88d 0000 	strb.w	r0, [sp]
    3ad8:	79a0      	ldrb	r0, [r4, #6]
    3ada:	f8ad 0004 	strh.w	r0, [sp, #4]
    3ade:	7960      	ldrb	r0, [r4, #5]
    3ae0:	f8ad 0002 	strh.w	r0, [sp, #2]
    3ae4:	4668      	mov	r0, sp
    3ae6:	f006 f95b 	bl	9da0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3aea:	b108      	cbz	r0, 3af0 <mpsl_fem_device_config_254_apply_get+0x40>
    3aec:	2184      	movs	r1, #132	; 0x84
    3aee:	e010      	b.n	3b12 <mpsl_fem_device_config_254_apply_get+0x62>
    3af0:	68e0      	ldr	r0, [r4, #12]
    3af2:	9002      	str	r0, [sp, #8]
    3af4:	a802      	add	r0, sp, #8
    3af6:	f006 f969 	bl	9dcc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3afa:	b108      	cbz	r0, 3b00 <mpsl_fem_device_config_254_apply_get+0x50>
    3afc:	2188      	movs	r1, #136	; 0x88
    3afe:	e008      	b.n	3b12 <mpsl_fem_device_config_254_apply_get+0x62>
    3b00:	4807      	ldr	r0, [pc, #28]	; (3b20 <mpsl_fem_device_config_254_apply_get+0x70>)
    3b02:	6800      	ldr	r0, [r0, #0]
    3b04:	9003      	str	r0, [sp, #12]
    3b06:	a803      	add	r0, sp, #12
    3b08:	f00b f903 	bl	ed12 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3b0c:	2800      	cmp	r0, #0
    3b0e:	d003      	beq.n	3b18 <mpsl_fem_device_config_254_apply_get+0x68>
    3b10:	218c      	movs	r1, #140	; 0x8c
    3b12:	2003      	movs	r0, #3
    3b14:	f000 f8e4 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b18:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3b1a:	0000      	.short	0x0000
    3b1c:	20000e88 	.word	0x20000e88
    3b20:	00003dc8 	.word	0x00003dc8

00003b24 <sdc_build_revision_get>:
    3b24:	b510      	push	{r4, lr}
    3b26:	b128      	cbz	r0, 3b34 <sdc_build_revision_get+0x10>
    3b28:	2214      	movs	r2, #20
    3b2a:	4904      	ldr	r1, [pc, #16]	; (3b3c <sdc_build_revision_get+0x18>)
    3b2c:	f007 ff26 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3b30:	2000      	movs	r0, #0
    3b32:	bd10      	pop	{r4, pc}
    3b34:	f06f 0015 	mvn.w	r0, #21
    3b38:	bd10      	pop	{r4, pc}
    3b3a:	0000      	.short	0x0000
    3b3c:	00003de4 	.word	0x00003de4

00003b40 <sdc_cfg_set>:
    3b40:	b570      	push	{r4, r5, r6, lr}
    3b42:	0003      	movs	r3, r0
    3b44:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3b48:	d103      	bne.n	3b52 <sdc_cfg_set+0x12>
    3b4a:	4c29      	ldr	r4, [pc, #164]	; (3bf0 <sdc_cfg_set+0xb0>)
    3b4c:	7863      	ldrb	r3, [r4, #1]
    3b4e:	b10b      	cbz	r3, 3b54 <sdc_cfg_set+0x14>
    3b50:	1180      	asrs	r0, r0, #6
    3b52:	bd70      	pop	{r4, r5, r6, pc}
    3b54:	b309      	cbz	r1, 3b9a <sdc_cfg_set+0x5a>
    3b56:	f06f 0515 	mvn.w	r5, #21
    3b5a:	b37a      	cbz	r2, 3bbc <sdc_cfg_set+0x7c>
    3b5c:	4b25      	ldr	r3, [pc, #148]	; (3bf4 <sdc_cfg_set+0xb4>)
    3b5e:	290c      	cmp	r1, #12
    3b60:	d241      	bcs.n	3be6 <sdc_cfg_set+0xa6>
    3b62:	e8df f001 	tbb	[pc, r1]
    3b66:	0640      	.short	0x0640
    3b68:	13100c09 	.word	0x13100c09
    3b6c:	2616231b 	.word	0x2616231b
    3b70:	312c      	.short	0x312c
    3b72:	7810      	ldrb	r0, [r2, #0]
    3b74:	7018      	strb	r0, [r3, #0]
    3b76:	e02b      	b.n	3bd0 <sdc_cfg_set+0x90>
    3b78:	7810      	ldrb	r0, [r2, #0]
    3b7a:	7058      	strb	r0, [r3, #1]
    3b7c:	e028      	b.n	3bd0 <sdc_cfg_set+0x90>
    3b7e:	6810      	ldr	r0, [r2, #0]
    3b80:	f8c3 0005 	str.w	r0, [r3, #5]
    3b84:	e024      	b.n	3bd0 <sdc_cfg_set+0x90>
    3b86:	6810      	ldr	r0, [r2, #0]
    3b88:	60d8      	str	r0, [r3, #12]
    3b8a:	e021      	b.n	3bd0 <sdc_cfg_set+0x90>
    3b8c:	7810      	ldrb	r0, [r2, #0]
    3b8e:	7098      	strb	r0, [r3, #2]
    3b90:	e01e      	b.n	3bd0 <sdc_cfg_set+0x90>
    3b92:	7811      	ldrb	r1, [r2, #0]
    3b94:	2900      	cmp	r1, #0
    3b96:	d1dc      	bne.n	3b52 <sdc_cfg_set+0x12>
    3b98:	70d9      	strb	r1, [r3, #3]
    3b9a:	e019      	b.n	3bd0 <sdc_cfg_set+0x90>
    3b9c:	78e0      	ldrb	r0, [r4, #3]
    3b9e:	b110      	cbz	r0, 3ba6 <sdc_cfg_set+0x66>
    3ba0:	7810      	ldrb	r0, [r2, #0]
    3ba2:	2802      	cmp	r0, #2
    3ba4:	d31f      	bcc.n	3be6 <sdc_cfg_set+0xa6>
    3ba6:	7810      	ldrb	r0, [r2, #0]
    3ba8:	7418      	strb	r0, [r3, #16]
    3baa:	e011      	b.n	3bd0 <sdc_cfg_set+0x90>
    3bac:	8810      	ldrh	r0, [r2, #0]
    3bae:	8258      	strh	r0, [r3, #18]
    3bb0:	e00e      	b.n	3bd0 <sdc_cfg_set+0x90>
    3bb2:	7811      	ldrb	r1, [r2, #0]
    3bb4:	2900      	cmp	r1, #0
    3bb6:	d1cc      	bne.n	3b52 <sdc_cfg_set+0x12>
    3bb8:	7119      	strb	r1, [r3, #4]
    3bba:	e009      	b.n	3bd0 <sdc_cfg_set+0x90>
    3bbc:	e013      	b.n	3be6 <sdc_cfg_set+0xa6>
    3bbe:	7810      	ldrb	r0, [r2, #0]
    3bc0:	2802      	cmp	r0, #2
    3bc2:	d310      	bcc.n	3be6 <sdc_cfg_set+0xa6>
    3bc4:	7518      	strb	r0, [r3, #20]
    3bc6:	e003      	b.n	3bd0 <sdc_cfg_set+0x90>
    3bc8:	7811      	ldrb	r1, [r2, #0]
    3bca:	2900      	cmp	r1, #0
    3bcc:	d1c1      	bne.n	3b52 <sdc_cfg_set+0x12>
    3bce:	7559      	strb	r1, [r3, #21]
    3bd0:	2201      	movs	r2, #1
    3bd2:	4908      	ldr	r1, [pc, #32]	; (3bf4 <sdc_cfg_set+0xb4>)
    3bd4:	2000      	movs	r0, #0
    3bd6:	f007 ffca 	bl	bb6e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3bda:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3bde:	db04      	blt.n	3bea <sdc_cfg_set+0xaa>
    3be0:	f06f 000b 	mvn.w	r0, #11
    3be4:	bd70      	pop	{r4, r5, r6, pc}
    3be6:	4628      	mov	r0, r5
    3be8:	bd70      	pop	{r4, r5, r6, pc}
    3bea:	2101      	movs	r1, #1
    3bec:	70a1      	strb	r1, [r4, #2]
    3bee:	bd70      	pop	{r4, r5, r6, pc}
    3bf0:	20000058 	.word	0x20000058
    3bf4:	20000e88 	.word	0x20000e88

00003bf8 <sdc_enable>:
    3bf8:	b570      	push	{r4, r5, r6, lr}
    3bfa:	460c      	mov	r4, r1
    3bfc:	0005      	movs	r5, r0
    3bfe:	d019      	beq.n	3c34 <sdc_enable+0x3c>
    3c00:	b1c4      	cbz	r4, 3c34 <sdc_enable+0x3c>
    3c02:	f000 f915 	bl	3e30 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3c06:	b1c0      	cbz	r0, 3c3a <sdc_enable+0x42>
    3c08:	4628      	mov	r0, r5
    3c0a:	f7ff fe6f 	bl	38ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3c0e:	4d0c      	ldr	r5, [pc, #48]	; (3c40 <sdc_enable+0x48>)
    3c10:	2200      	movs	r2, #0
    3c12:	490c      	ldr	r1, [pc, #48]	; (3c44 <sdc_enable+0x4c>)
    3c14:	7028      	strb	r0, [r5, #0]
    3c16:	4620      	mov	r0, r4
    3c18:	f007 ffa9 	bl	bb6e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3c1c:	f00b fce2 	bl	f5e4 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3c20:	2100      	movs	r1, #0
    3c22:	7828      	ldrb	r0, [r5, #0]
    3c24:	f006 fb12 	bl	a24c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3c28:	f7ff ff48 	bl	3abc <mpsl_fem_device_config_254_apply_get+0xc>
    3c2c:	2001      	movs	r0, #1
    3c2e:	7068      	strb	r0, [r5, #1]
    3c30:	2000      	movs	r0, #0
    3c32:	bd70      	pop	{r4, r5, r6, pc}
    3c34:	f06f 0015 	mvn.w	r0, #21
    3c38:	bd70      	pop	{r4, r5, r6, pc}
    3c3a:	f04f 30ff 	mov.w	r0, #4294967295
    3c3e:	bd70      	pop	{r4, r5, r6, pc}
    3c40:	20000058 	.word	0x20000058
    3c44:	20000e88 	.word	0x20000e88

00003c48 <sdc_init>:
    3c48:	b530      	push	{r4, r5, lr}
    3c4a:	b087      	sub	sp, #28
    3c4c:	0005      	movs	r5, r0
    3c4e:	d00c      	beq.n	3c6a <sdc_init+0x22>
    3c50:	f7ff fdf2 	bl	3838 <mpsl_is_initialized>
    3c54:	f04f 34ff 	mov.w	r4, #4294967295
    3c58:	b120      	cbz	r0, 3c64 <sdc_init+0x1c>
    3c5a:	f7ff fc9d 	bl	3598 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3c5e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3c62:	d905      	bls.n	3c70 <sdc_init+0x28>
    3c64:	4620      	mov	r0, r4
    3c66:	b007      	add	sp, #28
    3c68:	bd30      	pop	{r4, r5, pc}
    3c6a:	f06f 0015 	mvn.w	r0, #21
    3c6e:	e7fa      	b.n	3c66 <sdc_init+0x1e>
    3c70:	4c15      	ldr	r4, [pc, #84]	; (3cc8 <sdc_init+0x80>)
    3c72:	4816      	ldr	r0, [pc, #88]	; (3ccc <sdc_init+0x84>)
    3c74:	6065      	str	r5, [r4, #4]
    3c76:	f000 f9eb 	bl	4050 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3c7a:	2000      	movs	r0, #0
    3c7c:	7060      	strb	r0, [r4, #1]
    3c7e:	70a0      	strb	r0, [r4, #2]
    3c80:	70e0      	strb	r0, [r4, #3]
    3c82:	4601      	mov	r1, r0
    3c84:	2218      	movs	r2, #24
    3c86:	4668      	mov	r0, sp
    3c88:	f007 fef2 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3c8c:	2218      	movs	r2, #24
    3c8e:	4910      	ldr	r1, [pc, #64]	; (3cd0 <sdc_init+0x88>)
    3c90:	4668      	mov	r0, sp
    3c92:	f007 fe73 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c96:	2218      	movs	r2, #24
    3c98:	4669      	mov	r1, sp
    3c9a:	480e      	ldr	r0, [pc, #56]	; (3cd4 <sdc_init+0x8c>)
    3c9c:	f007 fe6e 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3ca0:	f3ef 8410 	mrs	r4, PRIMASK
    3ca4:	b672      	cpsid	i
    3ca6:	480c      	ldr	r0, [pc, #48]	; (3cd8 <sdc_init+0x90>)
    3ca8:	f06f 010c 	mvn.w	r1, #12
    3cac:	f000 fd9e 	bl	47ec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3cb0:	480a      	ldr	r0, [pc, #40]	; (3cdc <sdc_init+0x94>)
    3cb2:	f000 fe6b 	bl	498c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3cb6:	b118      	cbz	r0, 3cc0 <sdc_init+0x78>
    3cb8:	219a      	movs	r1, #154	; 0x9a
    3cba:	2003      	movs	r0, #3
    3cbc:	f000 f810 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cc0:	b904      	cbnz	r4, 3cc4 <sdc_init+0x7c>
    3cc2:	b662      	cpsie	i
    3cc4:	2000      	movs	r0, #0
    3cc6:	e7ce      	b.n	3c66 <sdc_init+0x1e>
    3cc8:	20000058 	.word	0x20000058
    3ccc:	00003abd 	.word	0x00003abd
    3cd0:	00003dcc 	.word	0x00003dcc
    3cd4:	20000e88 	.word	0x20000e88
    3cd8:	4000c000 	.word	0x4000c000
    3cdc:	00003e5d 	.word	0x00003e5d

00003ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3ce0:	b50e      	push	{r1, r2, r3, lr}
    3ce2:	b672      	cpsid	i
    3ce4:	4a15      	ldr	r2, [pc, #84]	; (3d3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3ce6:	6855      	ldr	r5, [r2, #4]
    3ce8:	b1d5      	cbz	r5, 3d20 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3cea:	2200      	movs	r2, #0
    3cec:	4603      	mov	r3, r0
    3cee:	466e      	mov	r6, sp
    3cf0:	240a      	movs	r4, #10
    3cf2:	e003      	b.n	3cfc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3cf4:	fbb0 f0f4 	udiv	r0, r0, r4
    3cf8:	1c52      	adds	r2, r2, #1
    3cfa:	b2d2      	uxtb	r2, r2
    3cfc:	2800      	cmp	r0, #0
    3cfe:	d1f9      	bne.n	3cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3d00:	54b0      	strb	r0, [r6, r2]
    3d02:	e009      	b.n	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3d04:	fbb3 f0f4 	udiv	r0, r3, r4
    3d08:	fb04 3010 	mls	r0, r4, r0, r3
    3d0c:	fbb3 f3f4 	udiv	r3, r3, r4
    3d10:	1e52      	subs	r2, r2, #1
    3d12:	b2d2      	uxtb	r2, r2
    3d14:	3030      	adds	r0, #48	; 0x30
    3d16:	54b0      	strb	r0, [r6, r2]
    3d18:	2a00      	cmp	r2, #0
    3d1a:	d1f3      	bne.n	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3d1c:	4630      	mov	r0, r6
    3d1e:	47a8      	blx	r5
    3d20:	f3bf 8f4f 	dsb	sy
    3d24:	4806      	ldr	r0, [pc, #24]	; (3d40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3d26:	6801      	ldr	r1, [r0, #0]
    3d28:	4a06      	ldr	r2, [pc, #24]	; (3d44 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3d2a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3d2e:	4311      	orrs	r1, r2
    3d30:	6001      	str	r1, [r0, #0]
    3d32:	f3bf 8f4f 	dsb	sy
    3d36:	bf00      	nop
    3d38:	e7fd      	b.n	3d36 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3d3a:	0000      	.short	0x0000
    3d3c:	20000058 	.word	0x20000058
    3d40:	e000ed0c 	.word	0xe000ed0c
    3d44:	05fa0004 	.word	0x05fa0004

00003d48 <sdc_support_adv>:
    3d48:	4806      	ldr	r0, [pc, #24]	; (3d64 <sdc_support_adv+0x1c>)
    3d4a:	b510      	push	{r4, lr}
    3d4c:	7881      	ldrb	r1, [r0, #2]
    3d4e:	7840      	ldrb	r0, [r0, #1]
    3d50:	4301      	orrs	r1, r0
    3d52:	d002      	beq.n	3d5a <sdc_support_adv+0x12>
    3d54:	f04f 30ff 	mov.w	r0, #4294967295
    3d58:	bd10      	pop	{r4, pc}
    3d5a:	f006 fa97 	bl	a28c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3d5e:	2000      	movs	r0, #0
    3d60:	bd10      	pop	{r4, pc}
    3d62:	0000      	.short	0x0000
    3d64:	20000058 	.word	0x20000058

00003d68 <sdc_support_dle>:
    3d68:	4806      	ldr	r0, [pc, #24]	; (3d84 <sdc_support_dle+0x1c>)
    3d6a:	b510      	push	{r4, lr}
    3d6c:	7881      	ldrb	r1, [r0, #2]
    3d6e:	7840      	ldrb	r0, [r0, #1]
    3d70:	4301      	orrs	r1, r0
    3d72:	d002      	beq.n	3d7a <sdc_support_dle+0x12>
    3d74:	f04f 30ff 	mov.w	r0, #4294967295
    3d78:	bd10      	pop	{r4, pc}
    3d7a:	f006 f83f 	bl	9dfc <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3d7e:	2000      	movs	r0, #0
    3d80:	bd10      	pop	{r4, pc}
    3d82:	0000      	.short	0x0000
    3d84:	20000058 	.word	0x20000058

00003d88 <sdc_support_le_2m_phy>:
    3d88:	4806      	ldr	r0, [pc, #24]	; (3da4 <sdc_support_le_2m_phy+0x1c>)
    3d8a:	b510      	push	{r4, lr}
    3d8c:	7881      	ldrb	r1, [r0, #2]
    3d8e:	7840      	ldrb	r0, [r0, #1]
    3d90:	4301      	orrs	r1, r0
    3d92:	d002      	beq.n	3d9a <sdc_support_le_2m_phy+0x12>
    3d94:	f04f 30ff 	mov.w	r0, #4294967295
    3d98:	bd10      	pop	{r4, pc}
    3d9a:	f00b f98a 	bl	f0b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3d9e:	2000      	movs	r0, #0
    3da0:	bd10      	pop	{r4, pc}
    3da2:	0000      	.short	0x0000
    3da4:	20000058 	.word	0x20000058

00003da8 <sdc_support_slave>:
    3da8:	4806      	ldr	r0, [pc, #24]	; (3dc4 <sdc_support_slave+0x1c>)
    3daa:	b510      	push	{r4, lr}
    3dac:	7881      	ldrb	r1, [r0, #2]
    3dae:	7840      	ldrb	r0, [r0, #1]
    3db0:	4301      	orrs	r1, r0
    3db2:	d002      	beq.n	3dba <sdc_support_slave+0x12>
    3db4:	f04f 30ff 	mov.w	r0, #4294967295
    3db8:	bd10      	pop	{r4, pc}
    3dba:	f006 fa79 	bl	a2b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3dbe:	2000      	movs	r0, #0
    3dc0:	bd10      	pop	{r4, pc}
    3dc2:	0000      	.short	0x0000
    3dc4:	20000058 	.word	0x20000058
    3dc8:	00000001 	.word	0x00000001
    3dcc:	00010101 	.word	0x00010101
    3dd0:	031b1b00 	.word	0x031b1b00
    3dd4:	00000002 	.word	0x00000002
    3dd8:	00001d4c 	.word	0x00001d4c
    3ddc:	001f0003 	.word	0x001f0003
    3de0:	00000000 	.word	0x00000000
    3de4:	66c5e70e 	.word	0x66c5e70e
    3de8:	ac3c1867 	.word	0xac3c1867
    3dec:	81ccd2b3 	.word	0x81ccd2b3
    3df0:	c0f1dca3 	.word	0xc0f1dca3
    3df4:	220236c0 	.word	0x220236c0

00003df8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3df8:	4a05      	ldr	r2, [pc, #20]	; (3e10 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3dfa:	b510      	push	{r4, lr}
    3dfc:	6852      	ldr	r2, [r2, #4]
    3dfe:	b112      	cbz	r2, 3e06 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e04:	4710      	bx	r2
    3e06:	2183      	movs	r1, #131	; 0x83
    3e08:	2004      	movs	r0, #4
    3e0a:	f7ff ff69 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e0e:	0000      	.short	0x0000
    3e10:	20000ea0 	.word	0x20000ea0

00003e14 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3e14:	4a05      	ldr	r2, [pc, #20]	; (3e2c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3e16:	b510      	push	{r4, lr}
    3e18:	6892      	ldr	r2, [r2, #8]
    3e1a:	b112      	cbz	r2, 3e22 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e20:	4710      	bx	r2
    3e22:	2189      	movs	r1, #137	; 0x89
    3e24:	2004      	movs	r0, #4
    3e26:	f7ff ff5b 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e2a:	0000      	.short	0x0000
    3e2c:	20000ea0 	.word	0x20000ea0

00003e30 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3e30:	4805      	ldr	r0, [pc, #20]	; (3e48 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3e32:	6801      	ldr	r1, [r0, #0]
    3e34:	b129      	cbz	r1, 3e42 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e36:	6841      	ldr	r1, [r0, #4]
    3e38:	b119      	cbz	r1, 3e42 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e3a:	6880      	ldr	r0, [r0, #8]
    3e3c:	b108      	cbz	r0, 3e42 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e3e:	2001      	movs	r0, #1
    3e40:	4770      	bx	lr
    3e42:	2000      	movs	r0, #0
    3e44:	4770      	bx	lr
    3e46:	0000      	.short	0x0000
    3e48:	20000ea0 	.word	0x20000ea0

00003e4c <sdc_rand_source_register>:
    3e4c:	4902      	ldr	r1, [pc, #8]	; (3e58 <sdc_rand_source_register+0xc>)
    3e4e:	c80d      	ldmia	r0, {r0, r2, r3}
    3e50:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3e54:	2000      	movs	r0, #0
    3e56:	4770      	bx	lr
    3e58:	20000ea0 	.word	0x20000ea0

00003e5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e5e:	4c12      	ldr	r4, [pc, #72]	; (3ea8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3e60:	2600      	movs	r6, #0
    3e62:	6825      	ldr	r5, [r4, #0]
    3e64:	e011      	b.n	3e8a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3e66:	9800      	ldr	r0, [sp, #0]
    3e68:	2802      	cmp	r0, #2
    3e6a:	d002      	beq.n	3e72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3e6c:	2803      	cmp	r0, #3
    3e6e:	d10c      	bne.n	3e8a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3e70:	e006      	b.n	3e80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3e72:	6820      	ldr	r0, [r4, #0]
    3e74:	b110      	cbz	r0, 3e7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3e76:	2000      	movs	r0, #0
    3e78:	6026      	str	r6, [r4, #0]
    3e7a:	e005      	b.n	3e88 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3e7c:	2128      	movs	r1, #40	; 0x28
    3e7e:	e00c      	b.n	3e9a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3e80:	6820      	ldr	r0, [r4, #0]
    3e82:	b168      	cbz	r0, 3ea0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3e84:	2001      	movs	r0, #1
    3e86:	6026      	str	r6, [r4, #0]
    3e88:	47a8      	blx	r5
    3e8a:	4668      	mov	r0, sp
    3e8c:	f000 fd50 	bl	4930 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3e90:	2800      	cmp	r0, #0
    3e92:	d0e8      	beq.n	3e66 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3e94:	2805      	cmp	r0, #5
    3e96:	d005      	beq.n	3ea4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3e98:	2135      	movs	r1, #53	; 0x35
    3e9a:	2004      	movs	r0, #4
    3e9c:	f7ff ff20 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ea0:	212d      	movs	r1, #45	; 0x2d
    3ea2:	e7fa      	b.n	3e9a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ea6:	0000      	.short	0x0000
    3ea8:	20000060 	.word	0x20000060
    3eac:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3eae:	4c1f      	ldr	r4, [pc, #124]	; (3f2c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    3eb0:	4605      	mov	r5, r0
    3eb2:	7820      	ldrb	r0, [r4, #0]
    3eb4:	b140      	cbz	r0, 3ec8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3eb6:	78a2      	ldrb	r2, [r4, #2]
    3eb8:	1c61      	adds	r1, r4, #1
    3eba:	4628      	mov	r0, r5
    3ebc:	1c92      	adds	r2, r2, #2
    3ebe:	f007 fd5d 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3ec2:	2000      	movs	r0, #0
    3ec4:	7020      	strb	r0, [r4, #0]
    3ec6:	e021      	b.n	3f0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    3ec8:	4819      	ldr	r0, [pc, #100]	; (3f30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    3eca:	f002 f837 	bl	5f3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3ece:	2800      	cmp	r0, #0
    3ed0:	d01d      	beq.n	3f0e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    3ed2:	4c17      	ldr	r4, [pc, #92]	; (3f30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    3ed4:	7820      	ldrb	r0, [r4, #0]
    3ed6:	2811      	cmp	r0, #17
    3ed8:	d104      	bne.n	3ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    3eda:	210a      	movs	r1, #10
    3edc:	203e      	movs	r0, #62	; 0x3e
    3ede:	f007 fece 	bl	bc7e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3ee2:	b118      	cbz	r0, 3eec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    3ee4:	7820      	ldrb	r0, [r4, #0]
    3ee6:	2808      	cmp	r0, #8
    3ee8:	d005      	beq.n	3ef6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    3eea:	e009      	b.n	3f00 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    3eec:	4910      	ldr	r1, [pc, #64]	; (3f30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    3eee:	4628      	mov	r0, r5
    3ef0:	f008 f8cd 	bl	c08e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3ef4:	e00a      	b.n	3f0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    3ef6:	2105      	movs	r1, #5
    3ef8:	203e      	movs	r0, #62	; 0x3e
    3efa:	f007 fec0 	bl	bc7e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3efe:	b138      	cbz	r0, 3f10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    3f00:	490b      	ldr	r1, [pc, #44]	; (3f30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    3f02:	4628      	mov	r0, r5
    3f04:	f007 ff19 	bl	bd3a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3f08:	2800      	cmp	r0, #0
    3f0a:	d000      	beq.n	3f0e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    3f0c:	2001      	movs	r0, #1
    3f0e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3f10:	88a0      	ldrh	r0, [r4, #4]
    3f12:	f8ad 0000 	strh.w	r0, [sp]
    3f16:	a901      	add	r1, sp, #4
    3f18:	4668      	mov	r0, sp
    3f1a:	f008 f9d6 	bl	c2ca <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3f1e:	2800      	cmp	r0, #0
    3f20:	d0f5      	beq.n	3f0e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    3f22:	219b      	movs	r1, #155	; 0x9b
    3f24:	2008      	movs	r0, #8
    3f26:	f7ff fedb 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f2a:	0000      	.short	0x0000
    3f2c:	2000103e 	.word	0x2000103e
    3f30:	20000f3c 	.word	0x20000f3c
    3f34:	b570      	push	{r4, r5, r6, lr}
    3f36:	780a      	ldrb	r2, [r1, #0]
    3f38:	7082      	strb	r2, [r0, #2]
    3f3a:	b33a      	cbz	r2, 3f8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    3f3c:	2a01      	cmp	r2, #1
    3f3e:	d825      	bhi.n	3f8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    3f40:	2313      	movs	r3, #19
    3f42:	7003      	strb	r3, [r0, #0]
    3f44:	2300      	movs	r3, #0
    3f46:	e00a      	b.n	3f5e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    3f48:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3f4c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3f50:	78a6      	ldrb	r6, [r4, #2]
    3f52:	70ee      	strb	r6, [r5, #3]
    3f54:	8864      	ldrh	r4, [r4, #2]
    3f56:	0a24      	lsrs	r4, r4, #8
    3f58:	1c5b      	adds	r3, r3, #1
    3f5a:	712c      	strb	r4, [r5, #4]
    3f5c:	b2db      	uxtb	r3, r3
    3f5e:	4293      	cmp	r3, r2
    3f60:	d3f2      	bcc.n	3f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    3f62:	2300      	movs	r3, #0
    3f64:	e00b      	b.n	3f7e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    3f66:	bf00      	nop
    3f68:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3f6c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3f70:	792e      	ldrb	r6, [r5, #4]
    3f72:	7166      	strb	r6, [r4, #5]
    3f74:	88ad      	ldrh	r5, [r5, #4]
    3f76:	0a2d      	lsrs	r5, r5, #8
    3f78:	1c5b      	adds	r3, r3, #1
    3f7a:	71a5      	strb	r5, [r4, #6]
    3f7c:	b2db      	uxtb	r3, r3
    3f7e:	4293      	cmp	r3, r2
    3f80:	d3f2      	bcc.n	3f68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    3f82:	2101      	movs	r1, #1
    3f84:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3f88:	b2c0      	uxtb	r0, r0
    3f8a:	bd70      	pop	{r4, r5, r6, pc}
    3f8c:	2000      	movs	r0, #0
    3f8e:	bd70      	pop	{r4, r5, r6, pc}

00003f90 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3f90:	2101      	movs	r1, #1
    3f92:	4a0c      	ldr	r2, [pc, #48]	; (3fc4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3f94:	2840      	cmp	r0, #64	; 0x40
    3f96:	d20c      	bcs.n	3fb2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3f98:	2820      	cmp	r0, #32
    3f9a:	d803      	bhi.n	3fa4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3f9c:	1e40      	subs	r0, r0, #1
    3f9e:	4081      	lsls	r1, r0
    3fa0:	6810      	ldr	r0, [r2, #0]
    3fa2:	e002      	b.n	3faa <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3fa4:	3821      	subs	r0, #33	; 0x21
    3fa6:	4081      	lsls	r1, r0
    3fa8:	6850      	ldr	r0, [r2, #4]
    3faa:	4201      	tst	r1, r0
    3fac:	d107      	bne.n	3fbe <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3fae:	2000      	movs	r0, #0
    3fb0:	4770      	bx	lr
    3fb2:	28ff      	cmp	r0, #255	; 0xff
    3fb4:	d003      	beq.n	3fbe <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3fb6:	3840      	subs	r0, #64	; 0x40
    3fb8:	4081      	lsls	r1, r0
    3fba:	6890      	ldr	r0, [r2, #8]
    3fbc:	e7f5      	b.n	3faa <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3fbe:	2001      	movs	r0, #1
    3fc0:	4770      	bx	lr
    3fc2:	0000      	.short	0x0000
    3fc4:	20000064 	.word	0x20000064

00003fc8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3fc8:	2101      	movs	r1, #1
    3fca:	1e40      	subs	r0, r0, #1
    3fcc:	4081      	lsls	r1, r0
    3fce:	4804      	ldr	r0, [pc, #16]	; (3fe0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3fd0:	68c0      	ldr	r0, [r0, #12]
    3fd2:	4201      	tst	r1, r0
    3fd4:	d001      	beq.n	3fda <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3fd6:	2001      	movs	r0, #1
    3fd8:	4770      	bx	lr
    3fda:	2000      	movs	r0, #0
    3fdc:	4770      	bx	lr
    3fde:	0000      	.short	0x0000
    3fe0:	20000064 	.word	0x20000064

00003fe4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3fe4:	4901      	ldr	r1, [pc, #4]	; (3fec <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3fe6:	6800      	ldr	r0, [r0, #0]
    3fe8:	60c8      	str	r0, [r1, #12]
    3fea:	4770      	bx	lr
    3fec:	20000064 	.word	0x20000064

00003ff0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3ff0:	4904      	ldr	r1, [pc, #16]	; (4004 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3ff2:	6802      	ldr	r2, [r0, #0]
    3ff4:	6840      	ldr	r0, [r0, #4]
    3ff6:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3ffa:	600a      	str	r2, [r1, #0]
    3ffc:	4a02      	ldr	r2, [pc, #8]	; (4008 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3ffe:	4310      	orrs	r0, r2
    4000:	6048      	str	r0, [r1, #4]
    4002:	4770      	bx	lr
    4004:	20000064 	.word	0x20000064
    4008:	024007f8 	.word	0x024007f8

0000400c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    400c:	4901      	ldr	r1, [pc, #4]	; (4014 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    400e:	6800      	ldr	r0, [r0, #0]
    4010:	6088      	str	r0, [r1, #8]
    4012:	4770      	bx	lr
    4014:	20000064 	.word	0x20000064

00004018 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4018:	4805      	ldr	r0, [pc, #20]	; (4030 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    401a:	f04f 31ff 	mov.w	r1, #4294967295
    401e:	6001      	str	r1, [r0, #0]
    4020:	0cc9      	lsrs	r1, r1, #19
    4022:	6041      	str	r1, [r0, #4]
    4024:	2100      	movs	r1, #0
    4026:	6081      	str	r1, [r0, #8]
    4028:	211f      	movs	r1, #31
    402a:	60c1      	str	r1, [r0, #12]
    402c:	4770      	bx	lr
    402e:	0000      	.short	0x0000
    4030:	20000064 	.word	0x20000064

00004034 <sdc_hci_cmd_cb_reset>:
    4034:	b510      	push	{r4, lr}
    4036:	f7ff ffef 	bl	4018 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    403a:	f00a ffae 	bl	ef9a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    403e:	4604      	mov	r4, r0
    4040:	4802      	ldr	r0, [pc, #8]	; (404c <sdc_hci_cmd_cb_reset+0x18>)
    4042:	6800      	ldr	r0, [r0, #0]
    4044:	b100      	cbz	r0, 4048 <sdc_hci_cmd_cb_reset+0x14>
    4046:	4780      	blx	r0
    4048:	4620      	mov	r0, r4
    404a:	bd10      	pop	{r4, pc}
    404c:	20000074 	.word	0x20000074

00004050 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4050:	4901      	ldr	r1, [pc, #4]	; (4058 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4052:	6008      	str	r0, [r1, #0]
    4054:	4770      	bx	lr
    4056:	0000      	.short	0x0000
    4058:	20000074 	.word	0x20000074

0000405c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    405c:	2102      	movs	r1, #2
    405e:	8001      	strh	r1, [r0, #0]
    4060:	8041      	strh	r1, [r0, #2]
    4062:	2100      	movs	r1, #0
    4064:	7101      	strb	r1, [r0, #4]
    4066:	210e      	movs	r1, #14
    4068:	7141      	strb	r1, [r0, #5]
    406a:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    406e:	80c1      	strh	r1, [r0, #6]
    4070:	4901      	ldr	r1, [pc, #4]	; (4078 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4072:	6081      	str	r1, [r0, #8]
    4074:	2000      	movs	r0, #0
    4076:	4770      	bx	lr
    4078:	3c186766 	.word	0x3c186766

0000407c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    407c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    407e:	4604      	mov	r4, r0
    4080:	4669      	mov	r1, sp
    4082:	f008 fc80 	bl	c986 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    4086:	b170      	cbz	r0, 40a6 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4088:	f240 215a 	movw	r1, #602	; 0x25a
    408c:	e008      	b.n	40a0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    408e:	bf00      	nop
    4090:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4094:	4621      	mov	r1, r4
    4096:	f000 f8ab 	bl	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    409a:	b120      	cbz	r0, 40a6 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    409c:	f240 215f 	movw	r1, #607	; 0x25f
    40a0:	2017      	movs	r0, #23
    40a2:	f7ff fe1d 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40a6:	4668      	mov	r0, sp
    40a8:	f000 f852 	bl	4150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    40ac:	2800      	cmp	r0, #0
    40ae:	d0ef      	beq.n	4090 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    40b0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000040b4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    40b4:	b510      	push	{r4, lr}
    40b6:	2802      	cmp	r0, #2
    40b8:	d304      	bcc.n	40c4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    40ba:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    40be:	2017      	movs	r0, #23
    40c0:	f7ff fe0e 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40c4:	4901      	ldr	r1, [pc, #4]	; (40cc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    40c6:	5c08      	ldrb	r0, [r1, r0]
    40c8:	bd10      	pop	{r4, pc}
    40ca:	0000      	.short	0x0000
    40cc:	20000eac 	.word	0x20000eac

000040d0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    40d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40d2:	0005      	movs	r5, r0
    40d4:	9500      	str	r5, [sp, #0]
    40d6:	d010      	beq.n	40fa <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    40d8:	2600      	movs	r6, #0
    40da:	7808      	ldrb	r0, [r1, #0]
    40dc:	7849      	ldrb	r1, [r1, #1]
    40de:	4604      	mov	r4, r0
    40e0:	42a1      	cmp	r1, r4
    40e2:	d900      	bls.n	40e6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    40e4:	460c      	mov	r4, r1
    40e6:	1cea      	adds	r2, r5, #3
    40e8:	f022 0203 	bic.w	r2, r2, #3
    40ec:	42aa      	cmp	r2, r5
    40ee:	d006      	beq.n	40fe <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    40f0:	f240 1179 	movw	r1, #377	; 0x179
    40f4:	2017      	movs	r0, #23
    40f6:	f7ff fdf3 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40fa:	2601      	movs	r6, #1
    40fc:	e7ed      	b.n	40da <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    40fe:	4f13      	ldr	r7, [pc, #76]	; (414c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    4100:	7038      	strb	r0, [r7, #0]
    4102:	7079      	strb	r1, [r7, #1]
    4104:	4631      	mov	r1, r6
    4106:	4668      	mov	r0, sp
    4108:	f000 f8ee 	bl	42e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    410c:	2100      	movs	r1, #0
    410e:	460b      	mov	r3, r1
    4110:	9800      	ldr	r0, [sp, #0]
    4112:	1cc0      	adds	r0, r0, #3
    4114:	f020 0003 	bic.w	r0, r0, #3
    4118:	9000      	str	r0, [sp, #0]
    411a:	b96e      	cbnz	r6, 4138 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    411c:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    4120:	60d0      	str	r0, [r2, #12]
    4122:	2000      	movs	r0, #0
    4124:	e006      	b.n	4134 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4126:	bf00      	nop
    4128:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    412c:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    4130:	1c40      	adds	r0, r0, #1
    4132:	b2c0      	uxtb	r0, r0
    4134:	42a0      	cmp	r0, r4
    4136:	d3f7      	bcc.n	4128 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    4138:	9800      	ldr	r0, [sp, #0]
    413a:	1c49      	adds	r1, r1, #1
    413c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4140:	b2c9      	uxtb	r1, r1
    4142:	9000      	str	r0, [sp, #0]
    4144:	2902      	cmp	r1, #2
    4146:	d3e3      	bcc.n	4110 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    4148:	1b40      	subs	r0, r0, r5
    414a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    414c:	20000eac 	.word	0x20000eac

00004150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4150:	b570      	push	{r4, r5, r6, lr}
    4152:	4604      	mov	r4, r0
    4154:	f008 fd90 	bl	cc78 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4158:	b108      	cbz	r0, 415e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    415a:	2010      	movs	r0, #16
    415c:	bd70      	pop	{r4, r5, r6, pc}
    415e:	7825      	ldrb	r5, [r4, #0]
    4160:	f000 f8fe 	bl	4360 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4164:	4602      	mov	r2, r0
    4166:	480c      	ldr	r0, [pc, #48]	; (4198 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4168:	8861      	ldrh	r1, [r4, #2]
    416a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    416e:	e00e      	b.n	418e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4170:	68c3      	ldr	r3, [r0, #12]
    4172:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4176:	b143      	cbz	r3, 418a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4178:	1c4a      	adds	r2, r1, #1
    417a:	8062      	strh	r2, [r4, #2]
    417c:	80a1      	strh	r1, [r4, #4]
    417e:	68c0      	ldr	r0, [r0, #12]
    4180:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4184:	60a0      	str	r0, [r4, #8]
    4186:	2000      	movs	r0, #0
    4188:	bd70      	pop	{r4, r5, r6, pc}
    418a:	1c49      	adds	r1, r1, #1
    418c:	b289      	uxth	r1, r1
    418e:	4291      	cmp	r1, r2
    4190:	d3ee      	bcc.n	4170 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4192:	8061      	strh	r1, [r4, #2]
    4194:	2005      	movs	r0, #5
    4196:	bd70      	pop	{r4, r5, r6, pc}
    4198:	20000eac 	.word	0x20000eac

0000419c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41a0:	b121      	cbz	r1, 41ac <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    41a2:	2901      	cmp	r1, #1
    41a4:	d002      	beq.n	41ac <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    41a6:	2000      	movs	r0, #0
    41a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41ac:	4c0f      	ldr	r4, [pc, #60]	; (41ec <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    41ae:	2700      	movs	r7, #0
    41b0:	463b      	mov	r3, r7
    41b2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    41b6:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    41ba:	f814 c001 	ldrb.w	ip, [r4, r1]
    41be:	e00a      	b.n	41d6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    41c0:	19dc      	adds	r4, r3, r7
    41c2:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    41c6:	b2a4      	uxth	r4, r4
    41c8:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    41cc:	f1be 0f00 	cmp.w	lr, #0
    41d0:	d004      	beq.n	41dc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    41d2:	1c5b      	adds	r3, r3, #1
    41d4:	b29b      	uxth	r3, r3
    41d6:	459c      	cmp	ip, r3
    41d8:	d8f2      	bhi.n	41c0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    41da:	4634      	mov	r4, r6
    41dc:	8004      	strh	r4, [r0, #0]
    41de:	4620      	mov	r0, r4
    41e0:	42b4      	cmp	r4, r6
    41e2:	d0e0      	beq.n	41a6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    41e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    41e8:	f000 b834 	b.w	4254 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    41ec:	20000eac 	.word	0x20000eac

000041f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    41f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41f4:	4606      	mov	r6, r0
    41f6:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    41fa:	460c      	mov	r4, r1
    41fc:	f243 0702 	movw	r7, #12290	; 0x3002
    4200:	38ff      	subs	r0, #255	; 0xff
    4202:	d020      	beq.n	4246 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4204:	2c02      	cmp	r4, #2
    4206:	d302      	bcc.n	420e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4208:	2007      	movs	r0, #7
    420a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    420e:	4630      	mov	r0, r6
    4210:	f000 f85a 	bl	42c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4214:	0005      	movs	r5, r0
    4216:	d016      	beq.n	4246 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4218:	480c      	ldr	r0, [pc, #48]	; (424c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    421a:	4629      	mov	r1, r5
    421c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4220:	4630      	mov	r0, r6
    4222:	4790      	blx	r2
    4224:	480a      	ldr	r0, [pc, #40]	; (4250 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4226:	2100      	movs	r1, #0
    4228:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    422c:	68f8      	ldr	r0, [r7, #12]
    422e:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4232:	4620      	mov	r0, r4
    4234:	f000 f88a 	bl	434c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4238:	4602      	mov	r2, r0
    423a:	4629      	mov	r1, r5
    423c:	6878      	ldr	r0, [r7, #4]
    423e:	f008 fb81 	bl	c944 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4242:	2000      	movs	r0, #0
    4244:	e7e1      	b.n	420a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4246:	4638      	mov	r0, r7
    4248:	e7df      	b.n	420a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    424a:	0000      	.short	0x0000
    424c:	00004380 	.word	0x00004380
    4250:	20000eac 	.word	0x20000eac
    4254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4258:	4690      	mov	r8, r2
    425a:	460d      	mov	r5, r1
    425c:	4607      	mov	r7, r0
    425e:	f008 fba3 	bl	c9a8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4262:	b148      	cbz	r0, 4278 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4264:	4816      	ldr	r0, [pc, #88]	; (42c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4266:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    426a:	68f0      	ldr	r0, [r6, #12]
    426c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4270:	b128      	cbz	r0, 427e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4272:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4276:	e015      	b.n	42a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4278:	f240 1139 	movw	r1, #313	; 0x139
    427c:	e012      	b.n	42a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    427e:	6870      	ldr	r0, [r6, #4]
    4280:	2800      	cmp	r0, #0
    4282:	d01a      	beq.n	42ba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4284:	4628      	mov	r0, r5
    4286:	f000 f861 	bl	434c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    428a:	4601      	mov	r1, r0
    428c:	6870      	ldr	r0, [r6, #4]
    428e:	f008 fb0b 	bl	c8a8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4292:	0004      	movs	r4, r0
    4294:	d010      	beq.n	42b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4296:	68f0      	ldr	r0, [r6, #12]
    4298:	2d02      	cmp	r5, #2
    429a:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    429e:	d304      	bcc.n	42aa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    42a0:	f240 1145 	movw	r1, #325	; 0x145
    42a4:	2017      	movs	r0, #23
    42a6:	f7ff fd1b 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42aa:	4806      	ldr	r0, [pc, #24]	; (42c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    42ac:	4642      	mov	r2, r8
    42ae:	4621      	mov	r1, r4
    42b0:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    42b4:	4638      	mov	r0, r7
    42b6:	4798      	blx	r3
    42b8:	4620      	mov	r0, r4
    42ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42be:	0000      	.short	0x0000
    42c0:	20000eac 	.word	0x20000eac
    42c4:	00004378 	.word	0x00004378
    42c8:	b570      	push	{r4, r5, r6, lr}
    42ca:	460c      	mov	r4, r1
    42cc:	4605      	mov	r5, r0
    42ce:	f008 fb6b 	bl	c9a8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    42d2:	2800      	cmp	r0, #0
    42d4:	d005      	beq.n	42e2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    42d6:	4803      	ldr	r0, [pc, #12]	; (42e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    42d8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    42dc:	68c0      	ldr	r0, [r0, #12]
    42de:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    42e2:	bd70      	pop	{r4, r5, r6, pc}
    42e4:	20000eac 	.word	0x20000eac
    42e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    42ec:	4e16      	ldr	r6, [pc, #88]	; (4348 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    42ee:	4688      	mov	r8, r1
    42f0:	4605      	mov	r5, r0
    42f2:	2400      	movs	r4, #0
    42f4:	6828      	ldr	r0, [r5, #0]
    42f6:	1cc0      	adds	r0, r0, #3
    42f8:	f020 0003 	bic.w	r0, r0, #3
    42fc:	6028      	str	r0, [r5, #0]
    42fe:	4620      	mov	r0, r4
    4300:	f000 f824 	bl	434c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4304:	5d31      	ldrb	r1, [r6, r4]
    4306:	4348      	muls	r0, r1
    4308:	f1b8 0f00 	cmp.w	r8, #0
    430c:	d001      	beq.n	4312 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    430e:	2200      	movs	r2, #0
    4310:	e000      	b.n	4314 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4312:	682a      	ldr	r2, [r5, #0]
    4314:	4601      	mov	r1, r0
    4316:	9200      	str	r2, [sp, #0]
    4318:	b132      	cbz	r2, 4328 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    431a:	2700      	movs	r7, #0
    431c:	ea4f 000d 	mov.w	r0, sp
    4320:	f008 faef 	bl	c902 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4324:	b11f      	cbz	r7, 432e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4326:	e006      	b.n	4336 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4328:	2701      	movs	r7, #1
    432a:	2000      	movs	r0, #0
    432c:	e7f8      	b.n	4320 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    432e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4332:	9a00      	ldr	r2, [sp, #0]
    4334:	604a      	str	r2, [r1, #4]
    4336:	6829      	ldr	r1, [r5, #0]
    4338:	1c64      	adds	r4, r4, #1
    433a:	4408      	add	r0, r1
    433c:	b2e4      	uxtb	r4, r4
    433e:	6028      	str	r0, [r5, #0]
    4340:	2c02      	cmp	r4, #2
    4342:	d3d7      	bcc.n	42f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4348:	20000eac 	.word	0x20000eac
    434c:	4903      	ldr	r1, [pc, #12]	; (435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    434e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4352:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4356:	1cc0      	adds	r0, r0, #3
    4358:	4008      	ands	r0, r1
    435a:	4770      	bx	lr
    435c:	00004374 	.word	0x00004374
    4360:	4903      	ldr	r1, [pc, #12]	; (4370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    4362:	7808      	ldrb	r0, [r1, #0]
    4364:	7849      	ldrb	r1, [r1, #1]
    4366:	4288      	cmp	r0, r1
    4368:	d200      	bcs.n	436c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    436a:	4608      	mov	r0, r1
    436c:	4770      	bx	lr
    436e:	0000      	.short	0x0000
    4370:	20000eac 	.word	0x20000eac
    4374:	00d40218 	.word	0x00d40218
    4378:	0000c9bd 	.word	0x0000c9bd
    437c:	0000c9bd 	.word	0x0000c9bd
    4380:	0000e57d 	.word	0x0000e57d
    4384:	0000d96b 	.word	0x0000d96b

00004388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4388:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    438c:	4c26      	ldr	r4, [pc, #152]	; (4428 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    438e:	4680      	mov	r8, r0
    4390:	b081      	sub	sp, #4
    4392:	6820      	ldr	r0, [r4, #0]
    4394:	469a      	mov	sl, r3
    4396:	4693      	mov	fp, r2
    4398:	b158      	cbz	r0, 43b2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    439a:	7a02      	ldrb	r2, [r0, #8]
    439c:	4542      	cmp	r2, r8
    439e:	d903      	bls.n	43a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    43a0:	6841      	ldr	r1, [r0, #4]
    43a2:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    43a6:	b140      	cbz	r0, 43ba <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    43a8:	f243 0002 	movw	r0, #12290	; 0x3002
    43ac:	b005      	add	sp, #20
    43ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43b2:	21a5      	movs	r1, #165	; 0xa5
    43b4:	2018      	movs	r0, #24
    43b6:	f7ff fc93 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43ba:	4619      	mov	r1, r3
    43bc:	9802      	ldr	r0, [sp, #8]
    43be:	f008 fb15 	bl	c9ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    43c2:	b286      	uxth	r6, r0
    43c4:	4658      	mov	r0, fp
    43c6:	990e      	ldr	r1, [sp, #56]	; 0x38
    43c8:	f008 fb07 	bl	c9da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    43cc:	b285      	uxth	r5, r0
    43ce:	1970      	adds	r0, r6, r5
    43d0:	1d00      	adds	r0, r0, #4
    43d2:	b287      	uxth	r7, r0
    43d4:	6820      	ldr	r0, [r4, #0]
    43d6:	46a1      	mov	r9, r4
    43d8:	4639      	mov	r1, r7
    43da:	6800      	ldr	r0, [r0, #0]
    43dc:	f008 fa64 	bl	c8a8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    43e0:	0004      	movs	r4, r0
    43e2:	d01f      	beq.n	4424 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    43e4:	8067      	strh	r7, [r4, #2]
    43e6:	8025      	strh	r5, [r4, #0]
    43e8:	4629      	mov	r1, r5
    43ea:	1d20      	adds	r0, r4, #4
    43ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    43ee:	4607      	mov	r7, r0
    43f0:	465a      	mov	r2, fp
    43f2:	2301      	movs	r3, #1
    43f4:	9500      	str	r5, [sp, #0]
    43f6:	f008 f9b7 	bl	c768 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    43fa:	8820      	ldrh	r0, [r4, #0]
    43fc:	4631      	mov	r1, r6
    43fe:	4438      	add	r0, r7
    4400:	2301      	movs	r3, #1
    4402:	9a02      	ldr	r2, [sp, #8]
    4404:	f8cd a000 	str.w	sl, [sp]
    4408:	f008 f9ae 	bl	c768 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    440c:	8820      	ldrh	r0, [r4, #0]
    440e:	19c1      	adds	r1, r0, r7
    4410:	4638      	mov	r0, r7
    4412:	f008 f9da 	bl	c7ca <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4416:	f8d9 0000 	ldr.w	r0, [r9]
    441a:	6841      	ldr	r1, [r0, #4]
    441c:	2000      	movs	r0, #0
    441e:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4422:	e7c3      	b.n	43ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4424:	2004      	movs	r0, #4
    4426:	e7c1      	b.n	43ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4428:	20000078 	.word	0x20000078

0000442c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    442c:	b570      	push	{r4, r5, r6, lr}
    442e:	4c14      	ldr	r4, [pc, #80]	; (4480 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4430:	6823      	ldr	r3, [r4, #0]
    4432:	b18b      	cbz	r3, 4458 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4434:	7a19      	ldrb	r1, [r3, #8]
    4436:	4281      	cmp	r1, r0
    4438:	d912      	bls.n	4460 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    443a:	685a      	ldr	r2, [r3, #4]
    443c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4440:	b171      	cbz	r1, 4460 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4442:	2500      	movs	r5, #0
    4444:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4448:	884a      	ldrh	r2, [r1, #2]
    444a:	6818      	ldr	r0, [r3, #0]
    444c:	f008 fa7a 	bl	c944 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4450:	6821      	ldr	r1, [r4, #0]
    4452:	2000      	movs	r0, #0
    4454:	7a0a      	ldrb	r2, [r1, #8]
    4456:	e00c      	b.n	4472 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4458:	21c8      	movs	r1, #200	; 0xc8
    445a:	2018      	movs	r0, #24
    445c:	f7ff fc40 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4460:	f243 0002 	movw	r0, #12290	; 0x3002
    4464:	bd70      	pop	{r4, r5, r6, pc}
    4466:	684b      	ldr	r3, [r1, #4]
    4468:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    446c:	b933      	cbnz	r3, 447c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    446e:	1c40      	adds	r0, r0, #1
    4470:	b2c0      	uxtb	r0, r0
    4472:	4282      	cmp	r2, r0
    4474:	d8f7      	bhi.n	4466 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4476:	6808      	ldr	r0, [r1, #0]
    4478:	f008 fa59 	bl	c92e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    447c:	2000      	movs	r0, #0
    447e:	bd70      	pop	{r4, r5, r6, pc}
    4480:	20000078 	.word	0x20000078

00004484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4488:	460d      	mov	r5, r1
    448a:	0004      	movs	r4, r0
    448c:	4690      	mov	r8, r2
    448e:	f04f 0600 	mov.w	r6, #0
    4492:	d009      	beq.n	44a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4494:	2700      	movs	r7, #0
    4496:	1ce0      	adds	r0, r4, #3
    4498:	f020 0003 	bic.w	r0, r0, #3
    449c:	42a0      	cmp	r0, r4
    449e:	d005      	beq.n	44ac <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    44a0:	2186      	movs	r1, #134	; 0x86
    44a2:	2018      	movs	r0, #24
    44a4:	f7ff fc1c 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44a8:	2701      	movs	r7, #1
    44aa:	e7f4      	b.n	4496 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    44ac:	b1cd      	cbz	r5, 44e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    44ae:	4611      	mov	r1, r2
    44b0:	2000      	movs	r0, #0
    44b2:	f008 fa26 	bl	c902 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    44b6:	300c      	adds	r0, #12
    44b8:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    44bc:	b98f      	cbnz	r7, 44e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    44be:	4f0a      	ldr	r7, [pc, #40]	; (44e8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    44c0:	f104 000c 	add.w	r0, r4, #12
    44c4:	00aa      	lsls	r2, r5, #2
    44c6:	603c      	str	r4, [r7, #0]
    44c8:	7225      	strb	r5, [r4, #8]
    44ca:	6060      	str	r0, [r4, #4]
    44cc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    44d0:	6020      	str	r0, [r4, #0]
    44d2:	2100      	movs	r1, #0
    44d4:	6860      	ldr	r0, [r4, #4]
    44d6:	f007 facb 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    44da:	4641      	mov	r1, r8
    44dc:	6838      	ldr	r0, [r7, #0]
    44de:	f008 fa10 	bl	c902 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    44e2:	4630      	mov	r0, r6
    44e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44e8:	20000078 	.word	0x20000078

000044ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    44ec:	b570      	push	{r4, r5, r6, lr}
    44ee:	4d08      	ldr	r5, [pc, #32]	; (4510 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    44f0:	6828      	ldr	r0, [r5, #0]
    44f2:	2800      	cmp	r0, #0
    44f4:	d00a      	beq.n	450c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    44f6:	2400      	movs	r4, #0
    44f8:	e004      	b.n	4504 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    44fa:	4620      	mov	r0, r4
    44fc:	f7ff ff96 	bl	442c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4500:	1c64      	adds	r4, r4, #1
    4502:	b2e4      	uxtb	r4, r4
    4504:	6828      	ldr	r0, [r5, #0]
    4506:	7a00      	ldrb	r0, [r0, #8]
    4508:	42a0      	cmp	r0, r4
    450a:	d8f6      	bhi.n	44fa <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    450c:	bd70      	pop	{r4, r5, r6, pc}
    450e:	0000      	.short	0x0000
    4510:	20000078 	.word	0x20000078

00004514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4514:	4909      	ldr	r1, [pc, #36]	; (453c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4516:	b510      	push	{r4, lr}
    4518:	4602      	mov	r2, r0
    451a:	6809      	ldr	r1, [r1, #0]
    451c:	2000      	movs	r0, #0
    451e:	b149      	cbz	r1, 4534 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4520:	7a0b      	ldrb	r3, [r1, #8]
    4522:	4293      	cmp	r3, r2
    4524:	d905      	bls.n	4532 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4526:	6849      	ldr	r1, [r1, #4]
    4528:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    452c:	2900      	cmp	r1, #0
    452e:	d000      	beq.n	4532 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4530:	1d08      	adds	r0, r1, #4
    4532:	bd10      	pop	{r4, pc}
    4534:	21ee      	movs	r1, #238	; 0xee
    4536:	2018      	movs	r0, #24
    4538:	f7ff fbd2 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    453c:	20000078 	.word	0x20000078

00004540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4540:	490a      	ldr	r1, [pc, #40]	; (456c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4542:	b510      	push	{r4, lr}
    4544:	4602      	mov	r2, r0
    4546:	6809      	ldr	r1, [r1, #0]
    4548:	2000      	movs	r0, #0
    454a:	b159      	cbz	r1, 4564 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    454c:	7a0b      	ldrb	r3, [r1, #8]
    454e:	4293      	cmp	r3, r2
    4550:	d907      	bls.n	4562 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4552:	6849      	ldr	r1, [r1, #4]
    4554:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4558:	2900      	cmp	r1, #0
    455a:	d002      	beq.n	4562 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    455c:	f831 0b04 	ldrh.w	r0, [r1], #4
    4560:	4408      	add	r0, r1
    4562:	bd10      	pop	{r4, pc}
    4564:	21fc      	movs	r1, #252	; 0xfc
    4566:	2018      	movs	r0, #24
    4568:	f7ff fbba 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    456c:	20000078 	.word	0x20000078
    4570:	b570      	push	{r4, r5, r6, lr}
    4572:	4b1e      	ldr	r3, [pc, #120]	; (45ec <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    4574:	6845      	ldr	r5, [r0, #4]
    4576:	4604      	mov	r4, r0
    4578:	2200      	movs	r2, #0
    457a:	b1a1      	cbz	r1, 45a6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    457c:	2001      	movs	r0, #1
    457e:	7060      	strb	r0, [r4, #1]
    4580:	8858      	ldrh	r0, [r3, #2]
    4582:	0881      	lsrs	r1, r0, #2
    4584:	f05f 0000 	movs.w	r0, #0
    4588:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    458c:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    4590:	831a      	strh	r2, [r3, #24]
    4592:	8419      	strh	r1, [r3, #32]
    4594:	fb00 5301 	mla	r3, r0, r1, r5
    4598:	6073      	str	r3, [r6, #4]
    459a:	1823      	adds	r3, r4, r0
    459c:	1c40      	adds	r0, r0, #1
    459e:	751a      	strb	r2, [r3, #20]
    45a0:	2804      	cmp	r0, #4
    45a2:	d3f1      	bcc.n	4588 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    45a4:	bd70      	pop	{r4, r5, r6, pc}
    45a6:	7062      	strb	r2, [r4, #1]
    45a8:	f05f 0000 	movs.w	r0, #0
    45ac:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    45b0:	830a      	strh	r2, [r1, #24]
    45b2:	840a      	strh	r2, [r1, #32]
    45b4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    45b8:	604a      	str	r2, [r1, #4]
    45ba:	1821      	adds	r1, r4, r0
    45bc:	1c40      	adds	r0, r0, #1
    45be:	750a      	strb	r2, [r1, #20]
    45c0:	2804      	cmp	r0, #4
    45c2:	d3f3      	bcc.n	45ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    45c4:	8858      	ldrh	r0, [r3, #2]
    45c6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    45ca:	d201      	bcs.n	45d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    45cc:	0846      	lsrs	r6, r0, #1
    45ce:	e000      	b.n	45d2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    45d0:	26ff      	movs	r6, #255	; 0xff
    45d2:	f008 fa7e 	bl	cad2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    45d6:	6065      	str	r5, [r4, #4]
    45d8:	8420      	strh	r0, [r4, #32]
    45da:	1829      	adds	r1, r5, r0
    45dc:	60a1      	str	r1, [r4, #8]
    45de:	8466      	strh	r6, [r4, #34]	; 0x22
    45e0:	60e5      	str	r5, [r4, #12]
    45e2:	84a0      	strh	r0, [r4, #36]	; 0x24
    45e4:	6121      	str	r1, [r4, #16]
    45e6:	84e6      	strh	r6, [r4, #38]	; 0x26
    45e8:	bd70      	pop	{r4, r5, r6, pc}
    45ea:	0000      	.short	0x0000
    45ec:	2000007c 	.word	0x2000007c

000045f0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    45f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45f4:	b170      	cbz	r0, 4614 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    45f6:	2500      	movs	r5, #0
    45f8:	4411      	add	r1, r2
    45fa:	b2cc      	uxtb	r4, r1
    45fc:	4e24      	ldr	r6, [pc, #144]	; (4690 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    45fe:	1cc1      	adds	r1, r0, #3
    4600:	2700      	movs	r7, #0
    4602:	f021 0103 	bic.w	r1, r1, #3
    4606:	7034      	strb	r4, [r6, #0]
    4608:	4281      	cmp	r1, r0
    460a:	d005      	beq.n	4618 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    460c:	214e      	movs	r1, #78	; 0x4e
    460e:	2009      	movs	r0, #9
    4610:	f7ff fb66 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4614:	2501      	movs	r5, #1
    4616:	e7ef      	b.n	45f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4618:	2b1f      	cmp	r3, #31
    461a:	d804      	bhi.n	4626 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    461c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4620:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    4624:	e009      	b.n	463a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    4626:	0059      	lsls	r1, r3, #1
    4628:	2bff      	cmp	r3, #255	; 0xff
    462a:	d90b      	bls.n	4644 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    462c:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4630:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4634:	d200      	bcs.n	4638 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    4636:	4611      	mov	r1, r2
    4638:	b289      	uxth	r1, r1
    463a:	1cc9      	adds	r1, r1, #3
    463c:	f021 0303 	bic.w	r3, r1, #3
    4640:	b135      	cbz	r5, 4650 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    4642:	e007      	b.n	4654 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    4644:	227c      	movs	r2, #124	; 0x7c
    4646:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    464a:	d3f5      	bcc.n	4638 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    464c:	217c      	movs	r1, #124	; 0x7c
    464e:	e7f3      	b.n	4638 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    4650:	6070      	str	r0, [r6, #4]
    4652:	8073      	strh	r3, [r6, #2]
    4654:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    4658:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    465c:	2100      	movs	r1, #0
    465e:	6876      	ldr	r6, [r6, #4]
    4660:	f04f 0c01 	mov.w	ip, #1
    4664:	e00d      	b.n	4682 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    4666:	b94d      	cbnz	r5, 467c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    4668:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    466c:	eb00 0e02 	add.w	lr, r0, r2
    4670:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    4674:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    4678:	f8c7 e004 	str.w	lr, [r7, #4]
    467c:	1c49      	adds	r1, r1, #1
    467e:	441a      	add	r2, r3
    4680:	b2c9      	uxtb	r1, r1
    4682:	42a1      	cmp	r1, r4
    4684:	d3ef      	bcc.n	4666 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    4686:	1dd2      	adds	r2, r2, #7
    4688:	f022 0007 	bic.w	r0, r2, #7
    468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4690:	2000007c 	.word	0x2000007c

00004694 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4694:	b570      	push	{r4, r5, r6, lr}
    4696:	4a10      	ldr	r2, [pc, #64]	; (46d8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    4698:	2000      	movs	r0, #0
    469a:	6851      	ldr	r1, [r2, #4]
    469c:	7812      	ldrb	r2, [r2, #0]
    469e:	e014      	b.n	46ca <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    46a0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    46a4:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    46a8:	b16b      	cbz	r3, 46c6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    46aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    46ae:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    46b2:	d00c      	beq.n	46ce <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    46b4:	2500      	movs	r5, #0
    46b6:	70a5      	strb	r5, [r4, #2]
    46b8:	2101      	movs	r1, #1
    46ba:	4620      	mov	r0, r4
    46bc:	f7ff ff58 	bl	4570 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    46c0:	7025      	strb	r5, [r4, #0]
    46c2:	4620      	mov	r0, r4
    46c4:	bd70      	pop	{r4, r5, r6, pc}
    46c6:	1c40      	adds	r0, r0, #1
    46c8:	b2c0      	uxtb	r0, r0
    46ca:	4290      	cmp	r0, r2
    46cc:	d3e8      	bcc.n	46a0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    46ce:	21a9      	movs	r1, #169	; 0xa9
    46d0:	2009      	movs	r0, #9
    46d2:	f7ff fb05 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46d6:	0000      	.short	0x0000
    46d8:	2000007c 	.word	0x2000007c

000046dc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    46dc:	4804      	ldr	r0, [pc, #16]	; (46f0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    46de:	b510      	push	{r4, lr}
    46e0:	8840      	ldrh	r0, [r0, #2]
    46e2:	0884      	lsrs	r4, r0, #2
    46e4:	f008 f9f5 	bl	cad2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    46e8:	4284      	cmp	r4, r0
    46ea:	d300      	bcc.n	46ee <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    46ec:	4620      	mov	r0, r4
    46ee:	bd10      	pop	{r4, pc}
    46f0:	2000007c 	.word	0x2000007c
    46f4:	4909      	ldr	r1, [pc, #36]	; (471c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
    46f6:	b510      	push	{r4, lr}
    46f8:	4807      	ldr	r0, [pc, #28]	; (4718 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
    46fa:	6008      	str	r0, [r1, #0]
    46fc:	4b08      	ldr	r3, [pc, #32]	; (4720 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
    46fe:	2011      	movs	r0, #17
    4700:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4704:	2200      	movs	r2, #0
    4706:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    470a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    470e:	1c40      	adds	r0, r0, #1
    4710:	b2c0      	uxtb	r0, r0
    4712:	2814      	cmp	r0, #20
    4714:	d3f4      	bcc.n	4700 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
    4716:	bd10      	pop	{r4, pc}
    4718:	fffe0000 	.word	0xfffe0000
    471c:	4001f508 	.word	0x4001f508
    4720:	4001f000 	.word	0x4001f000
    4724:	b570      	push	{r4, r5, r6, lr}
    4726:	2420      	movs	r4, #32
    4728:	2100      	movs	r1, #0
    472a:	2301      	movs	r3, #1
    472c:	fa20 f201 	lsr.w	r2, r0, r1
    4730:	07d2      	lsls	r2, r2, #31
    4732:	d020      	beq.n	4776 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    4734:	b24a      	sxtb	r2, r1
    4736:	2a00      	cmp	r2, #0
    4738:	db10      	blt.n	475c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
    473a:	bf00      	nop
    473c:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4740:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4744:	f002 051f 	and.w	r5, r2, #31
    4748:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    474c:	fa03 f505 	lsl.w	r5, r3, r5
    4750:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4754:	f3bf 8f4f 	dsb	sy
    4758:	f3bf 8f6f 	isb	sy
    475c:	db0b      	blt.n	4776 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    475e:	f002 051f 	and.w	r5, r2, #31
    4762:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4766:	ea4f 0282 	mov.w	r2, r2, lsl #2
    476a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    476e:	fa03 f505 	lsl.w	r5, r3, r5
    4772:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4776:	f101 0101 	add.w	r1, r1, #1
    477a:	42a1      	cmp	r1, r4
    477c:	d3d6      	bcc.n	472c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
    477e:	bd70      	pop	{r4, r5, r6, pc}
    4780:	b570      	push	{r4, r5, r6, lr}
    4782:	0042      	lsls	r2, r0, #1
    4784:	f04f 0100 	mov.w	r1, #0
    4788:	d501      	bpl.n	478e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
    478a:	4a14      	ldr	r2, [pc, #80]	; (47dc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
    478c:	6011      	str	r1, [r2, #0]
    478e:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4792:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4796:	429a      	cmp	r2, r3
    4798:	d003      	beq.n	47a2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
    479a:	2169      	movs	r1, #105	; 0x69
    479c:	201b      	movs	r0, #27
    479e:	f7ff fa9f 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47a2:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    47a6:	d014      	beq.n	47d2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
    47a8:	4a0d      	ldr	r2, [pc, #52]	; (47e0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
    47aa:	2001      	movs	r0, #1
    47ac:	6050      	str	r0, [r2, #4]
    47ae:	1e83      	subs	r3, r0, #2
    47b0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    47b4:	4a0b      	ldr	r2, [pc, #44]	; (47e4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
    47b6:	6090      	str	r0, [r2, #8]
    47b8:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    47bc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    47c0:	4c09      	ldr	r4, [pc, #36]	; (47e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
    47c2:	6021      	str	r1, [r4, #0]
    47c4:	1d25      	adds	r5, r4, #4
    47c6:	6028      	str	r0, [r5, #0]
    47c8:	6090      	str	r0, [r2, #8]
    47ca:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    47ce:	6021      	str	r1, [r4, #0]
    47d0:	6028      	str	r0, [r5, #0]
    47d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47d6:	f7ff bf8d 	b.w	46f4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    47da:	0000      	.short	0x0000
    47dc:	4001e504 	.word	0x4001e504
    47e0:	4000e000 	.word	0x4000e000
    47e4:	4000f000 	.word	0x4000f000
    47e8:	4000f500 	.word	0x4000f500

000047ec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    47ec:	b570      	push	{r4, r5, r6, lr}
    47ee:	4c0a      	ldr	r4, [pc, #40]	; (4818 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    47f0:	460d      	mov	r5, r1
    47f2:	6020      	str	r0, [r4, #0]
    47f4:	f7ff ffc4 	bl	4780 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
    47f8:	6820      	ldr	r0, [r4, #0]
    47fa:	f7ff ff93 	bl	4724 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
    47fe:	f000 f883 	bl	4908 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4802:	f7ff ff77 	bl	46f4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4806:	f008 fa2c 	bl	cc62 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    480a:	4628      	mov	r0, r5
    480c:	f000 f8b6 	bl	497c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4814:	f000 b8ce 	b.w	49b4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4818:	20000084 	.word	0x20000084

0000481c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    481c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4820:	4c36      	ldr	r4, [pc, #216]	; (48fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    4822:	b082      	sub	sp, #8
    4824:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    4828:	2601      	movs	r6, #1
    482a:	4835      	ldr	r0, [pc, #212]	; (4900 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    482c:	f006 fffd 	bl	b82a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4830:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4900 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    4834:	b920      	cbnz	r0, 4840 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    4836:	2600      	movs	r6, #0
    4838:	f109 0001 	add.w	r0, r9, #1
    483c:	f007 f80c 	bl	b858 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4840:	f44f 7580 	mov.w	r5, #256	; 0x100
    4844:	f04f 0800 	mov.w	r8, #0
    4848:	1d2f      	adds	r7, r5, #4
    484a:	2101      	movs	r1, #1
    484c:	6061      	str	r1, [r4, #4]
    484e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4852:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4856:	9802      	ldr	r0, [sp, #8]
    4858:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    485c:	6021      	str	r1, [r4, #0]
    485e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 4904 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    4862:	e01c      	b.n	489e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4864:	f8da 0000 	ldr.w	r0, [sl]
    4868:	06c0      	lsls	r0, r0, #27
    486a:	d518      	bpl.n	489e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    486c:	200e      	movs	r0, #14
    486e:	f008 f9e4 	bl	cc3a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    4872:	f3ef 8010 	mrs	r0, PRIMASK
    4876:	9000      	str	r0, [sp, #0]
    4878:	b672      	cpsid	i
    487a:	2103      	movs	r1, #3
    487c:	4620      	mov	r0, r4
    487e:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4882:	4629      	mov	r1, r5
    4884:	f008 f9e6 	bl	cc54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4888:	b930      	cbnz	r0, 4898 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    488a:	4639      	mov	r1, r7
    488c:	4620      	mov	r0, r4
    488e:	f008 f9e1 	bl	cc54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4892:	b908      	cbnz	r0, 4898 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4894:	f7ff f89e 	bl	39d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4898:	9800      	ldr	r0, [sp, #0]
    489a:	b900      	cbnz	r0, 489e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    489c:	b662      	cpsie	i
    489e:	4629      	mov	r1, r5
    48a0:	4620      	mov	r0, r4
    48a2:	f008 f9d7 	bl	cc54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    48a6:	b928      	cbnz	r0, 48b4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    48a8:	4639      	mov	r1, r7
    48aa:	4620      	mov	r0, r4
    48ac:	f008 f9d2 	bl	cc54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    48b0:	2800      	cmp	r0, #0
    48b2:	d0d7      	beq.n	4864 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    48b4:	4639      	mov	r1, r7
    48b6:	4620      	mov	r0, r4
    48b8:	f008 f9cc 	bl	cc54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    48bc:	2800      	cmp	r0, #0
    48be:	d1c4      	bne.n	484a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    48c0:	b136      	cbz	r6, 48d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    48c2:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    48c6:	f109 0001 	add.w	r0, r9, #1
    48ca:	f006 ffae 	bl	b82a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    48ce:	e012      	b.n	48f6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    48d0:	f109 0001 	add.w	r0, r9, #1
    48d4:	f006 ffa9 	bl	b82a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    48d8:	2800      	cmp	r0, #0
    48da:	d1ad      	bne.n	4838 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    48dc:	2003      	movs	r0, #3
    48de:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    48e2:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    48e6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    48ea:	200e      	movs	r0, #14
    48ec:	f008 f9a5 	bl	cc3a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    48f0:	4803      	ldr	r0, [pc, #12]	; (4900 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    48f2:	f006 ffb1 	bl	b858 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    48f6:	2000      	movs	r0, #0
    48f8:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48fc:	4000e000 	.word	0x4000e000
    4900:	20000293 	.word	0x20000293
    4904:	e000ed10 	.word	0xe000ed10

00004908 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4908:	b510      	push	{r4, lr}
    490a:	4808      	ldr	r0, [pc, #32]	; (492c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    490c:	f006 ffa0 	bl	b850 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4910:	b108      	cbz	r0, 4916 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4912:	2125      	movs	r1, #37	; 0x25
    4914:	e006      	b.n	4924 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4916:	4805      	ldr	r0, [pc, #20]	; (492c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4918:	1c40      	adds	r0, r0, #1
    491a:	f006 ff99 	bl	b850 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    491e:	2800      	cmp	r0, #0
    4920:	d003      	beq.n	492a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4922:	2129      	movs	r1, #41	; 0x29
    4924:	201d      	movs	r0, #29
    4926:	f7ff f9db 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    492a:	bd10      	pop	{r4, pc}
    492c:	20000293 	.word	0x20000293

00004930 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4930:	b570      	push	{r4, r5, r6, lr}
    4932:	4911      	ldr	r1, [pc, #68]	; (4978 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4934:	680a      	ldr	r2, [r1, #0]
    4936:	b1ea      	cbz	r2, 4974 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4938:	2300      	movs	r3, #0
    493a:	461d      	mov	r5, r3
    493c:	2401      	movs	r4, #1
    493e:	684a      	ldr	r2, [r1, #4]
    4940:	1c52      	adds	r2, r2, #1
    4942:	604a      	str	r2, [r1, #4]
    4944:	2a09      	cmp	r2, #9
    4946:	d300      	bcc.n	494a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4948:	604d      	str	r5, [r1, #4]
    494a:	790e      	ldrb	r6, [r1, #4]
    494c:	fa04 f206 	lsl.w	r2, r4, r6
    4950:	680e      	ldr	r6, [r1, #0]
    4952:	4216      	tst	r6, r2
    4954:	d00b      	beq.n	496e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4956:	f3ef 8310 	mrs	r3, PRIMASK
    495a:	b672      	cpsid	i
    495c:	680c      	ldr	r4, [r1, #0]
    495e:	4394      	bics	r4, r2
    4960:	600c      	str	r4, [r1, #0]
    4962:	b903      	cbnz	r3, 4966 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4964:	b662      	cpsie	i
    4966:	6849      	ldr	r1, [r1, #4]
    4968:	6001      	str	r1, [r0, #0]
    496a:	2000      	movs	r0, #0
    496c:	bd70      	pop	{r4, r5, r6, pc}
    496e:	1c5b      	adds	r3, r3, #1
    4970:	2b09      	cmp	r3, #9
    4972:	d3e4      	bcc.n	493e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4974:	2005      	movs	r0, #5
    4976:	bd70      	pop	{r4, r5, r6, pc}
    4978:	20000088 	.word	0x20000088

0000497c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    497c:	4802      	ldr	r0, [pc, #8]	; (4988 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    497e:	2100      	movs	r1, #0
    4980:	6001      	str	r1, [r0, #0]
    4982:	6041      	str	r1, [r0, #4]
    4984:	4770      	bx	lr
    4986:	0000      	.short	0x0000
    4988:	20000088 	.word	0x20000088

0000498c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    498c:	b510      	push	{r4, lr}
    498e:	4c08      	ldr	r4, [pc, #32]	; (49b0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4990:	7861      	ldrb	r1, [r4, #1]
    4992:	b109      	cbz	r1, 4998 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4994:	200f      	movs	r0, #15
    4996:	bd10      	pop	{r4, pc}
    4998:	f7fe ffa8 	bl	38ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    499c:	7020      	strb	r0, [r4, #0]
    499e:	28ff      	cmp	r0, #255	; 0xff
    49a0:	d001      	beq.n	49a6 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    49a2:	2000      	movs	r0, #0
    49a4:	bd10      	pop	{r4, pc}
    49a6:	2176      	movs	r1, #118	; 0x76
    49a8:	201f      	movs	r0, #31
    49aa:	f7ff f999 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49ae:	0000      	.short	0x0000
    49b0:	20000090 	.word	0x20000090

000049b4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    49b4:	4901      	ldr	r1, [pc, #4]	; (49bc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    49b6:	2000      	movs	r0, #0
    49b8:	7048      	strb	r0, [r1, #1]
    49ba:	4770      	bx	lr
    49bc:	20000090 	.word	0x20000090

000049c0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    49c0:	4806      	ldr	r0, [pc, #24]	; (49dc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    49c2:	4a07      	ldr	r2, [pc, #28]	; (49e0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    49c4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    49c6:	8852      	ldrh	r2, [r2, #2]
    49c8:	4291      	cmp	r1, r2
    49ca:	d104      	bne.n	49d6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    49cc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    49d0:	b108      	cbz	r0, 49d6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    49d2:	2000      	movs	r0, #0
    49d4:	4770      	bx	lr
    49d6:	2001      	movs	r0, #1
    49d8:	4770      	bx	lr
    49da:	0000      	.short	0x0000
    49dc:	20001140 	.word	0x20001140
    49e0:	20000278 	.word	0x20000278

000049e4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    49e4:	4901      	ldr	r1, [pc, #4]	; (49ec <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    49e6:	8048      	strh	r0, [r1, #2]
    49e8:	4770      	bx	lr
    49ea:	0000      	.short	0x0000
    49ec:	20000278 	.word	0x20000278

000049f0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    49f0:	4808      	ldr	r0, [pc, #32]	; (4a14 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    49f2:	4a09      	ldr	r2, [pc, #36]	; (4a18 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    49f4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    49f6:	8852      	ldrh	r2, [r2, #2]
    49f8:	4291      	cmp	r1, r2
    49fa:	d109      	bne.n	4a10 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    49fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4a00:	8481      	strh	r1, [r0, #36]	; 0x24
    4a02:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4a06:	b119      	cbz	r1, 4a10 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4a08:	2100      	movs	r1, #0
    4a0a:	7001      	strb	r1, [r0, #0]
    4a0c:	2001      	movs	r0, #1
    4a0e:	4770      	bx	lr
    4a10:	2000      	movs	r0, #0
    4a12:	4770      	bx	lr
    4a14:	20001140 	.word	0x20001140
    4a18:	20000278 	.word	0x20000278

00004a1c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4a1c:	4807      	ldr	r0, [pc, #28]	; (4a3c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4a1e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4a22:	2901      	cmp	r1, #1
    4a24:	d007      	beq.n	4a36 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4a26:	2101      	movs	r1, #1
    4a28:	7001      	strb	r1, [r0, #0]
    4a2a:	4805      	ldr	r0, [pc, #20]	; (4a40 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4a2c:	4903      	ldr	r1, [pc, #12]	; (4a3c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4a2e:	8800      	ldrh	r0, [r0, #0]
    4a30:	8488      	strh	r0, [r1, #36]	; 0x24
    4a32:	2001      	movs	r0, #1
    4a34:	4770      	bx	lr
    4a36:	2000      	movs	r0, #0
    4a38:	4770      	bx	lr
    4a3a:	0000      	.short	0x0000
    4a3c:	20001140 	.word	0x20001140
    4a40:	20000278 	.word	0x20000278

00004a44 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4a44:	4906      	ldr	r1, [pc, #24]	; (4a60 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4a46:	4b07      	ldr	r3, [pc, #28]	; (4a64 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4a48:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a4a:	885b      	ldrh	r3, [r3, #2]
    4a4c:	429a      	cmp	r2, r3
    4a4e:	d105      	bne.n	4a5c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4a50:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4a54:	b112      	cbz	r2, 4a5c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4a56:	6001      	str	r1, [r0, #0]
    4a58:	2001      	movs	r0, #1
    4a5a:	4770      	bx	lr
    4a5c:	2000      	movs	r0, #0
    4a5e:	4770      	bx	lr
    4a60:	20001140 	.word	0x20001140
    4a64:	20000278 	.word	0x20000278

00004a68 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4a68:	4909      	ldr	r1, [pc, #36]	; (4a90 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4a6a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a6c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4a70:	3bff      	subs	r3, #255	; 0xff
    4a72:	d002      	beq.n	4a7a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4a74:	2100      	movs	r1, #0
    4a76:	6001      	str	r1, [r0, #0]
    4a78:	e007      	b.n	4a8a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4a7a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4a7e:	4904      	ldr	r1, [pc, #16]	; (4a90 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4a80:	2a01      	cmp	r2, #1
    4a82:	d002      	beq.n	4a8a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4a84:	6001      	str	r1, [r0, #0]
    4a86:	2001      	movs	r0, #1
    4a88:	4770      	bx	lr
    4a8a:	2000      	movs	r0, #0
    4a8c:	4770      	bx	lr
    4a8e:	0000      	.short	0x0000
    4a90:	20001140 	.word	0x20001140

00004a94 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4a94:	4901      	ldr	r1, [pc, #4]	; (4a9c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4a96:	8008      	strh	r0, [r1, #0]
    4a98:	4770      	bx	lr
    4a9a:	0000      	.short	0x0000
    4a9c:	20000278 	.word	0x20000278

00004aa0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4aa0:	4905      	ldr	r1, [pc, #20]	; (4ab8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4aa2:	2000      	movs	r0, #0
    4aa4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4aa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4aac:	8488      	strh	r0, [r1, #36]	; 0x24
    4aae:	4903      	ldr	r1, [pc, #12]	; (4abc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4ab0:	8008      	strh	r0, [r1, #0]
    4ab2:	8048      	strh	r0, [r1, #2]
    4ab4:	4770      	bx	lr
    4ab6:	0000      	.short	0x0000
    4ab8:	20001140 	.word	0x20001140
    4abc:	20000278 	.word	0x20000278
    4ac0:	4905      	ldr	r1, [pc, #20]	; (4ad8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4ac2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4ac4:	4282      	cmp	r2, r0
    4ac6:	d105      	bne.n	4ad4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4ac8:	2000      	movs	r0, #0
    4aca:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4ace:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4ad2:	8488      	strh	r0, [r1, #36]	; 0x24
    4ad4:	4770      	bx	lr
    4ad6:	0000      	.short	0x0000
    4ad8:	20001140 	.word	0x20001140

00004adc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4adc:	4a0a      	ldr	r2, [pc, #40]	; (4b08 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4ade:	b110      	cbz	r0, 4ae6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4ae0:	2801      	cmp	r0, #1
    4ae2:	d007      	beq.n	4af4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4ae4:	e00e      	b.n	4b04 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4ae6:	7850      	ldrb	r0, [r2, #1]
    4ae8:	b160      	cbz	r0, 4b04 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4aea:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4aee:	6008      	str	r0, [r1, #0]
    4af0:	88d0      	ldrh	r0, [r2, #6]
    4af2:	e004      	b.n	4afe <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4af4:	7810      	ldrb	r0, [r2, #0]
    4af6:	b128      	cbz	r0, 4b04 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4af8:	6890      	ldr	r0, [r2, #8]
    4afa:	6008      	str	r0, [r1, #0]
    4afc:	8990      	ldrh	r0, [r2, #12]
    4afe:	8088      	strh	r0, [r1, #4]
    4b00:	2001      	movs	r0, #1
    4b02:	4770      	bx	lr
    4b04:	2000      	movs	r0, #0
    4b06:	4770      	bx	lr
    4b08:	20000295 	.word	0x20000295

00004b0c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4b0c:	4a08      	ldr	r2, [pc, #32]	; (4b30 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4b0e:	2301      	movs	r3, #1
    4b10:	b138      	cbz	r0, 4b22 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4b12:	2801      	cmp	r0, #1
    4b14:	d104      	bne.n	4b20 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4b16:	7013      	strb	r3, [r2, #0]
    4b18:	6808      	ldr	r0, [r1, #0]
    4b1a:	6090      	str	r0, [r2, #8]
    4b1c:	8888      	ldrh	r0, [r1, #4]
    4b1e:	8190      	strh	r0, [r2, #12]
    4b20:	4770      	bx	lr
    4b22:	7053      	strb	r3, [r2, #1]
    4b24:	6808      	ldr	r0, [r1, #0]
    4b26:	f8c2 0002 	str.w	r0, [r2, #2]
    4b2a:	8888      	ldrh	r0, [r1, #4]
    4b2c:	80d0      	strh	r0, [r2, #6]
    4b2e:	4770      	bx	lr
    4b30:	20000295 	.word	0x20000295

00004b34 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4b34:	4906      	ldr	r1, [pc, #24]	; (4b50 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4b36:	b110      	cbz	r0, 4b3e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4b38:	2801      	cmp	r0, #1
    4b3a:	d002      	beq.n	4b42 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4b3c:	e005      	b.n	4b4a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4b3e:	7848      	ldrb	r0, [r1, #1]
    4b40:	e000      	b.n	4b44 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4b42:	7808      	ldrb	r0, [r1, #0]
    4b44:	b108      	cbz	r0, 4b4a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4b46:	2001      	movs	r0, #1
    4b48:	4770      	bx	lr
    4b4a:	2000      	movs	r0, #0
    4b4c:	4770      	bx	lr
    4b4e:	0000      	.short	0x0000
    4b50:	20000295 	.word	0x20000295

00004b54 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4b54:	4901      	ldr	r1, [pc, #4]	; (4b5c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4b56:	7448      	strb	r0, [r1, #17]
    4b58:	4770      	bx	lr
    4b5a:	0000      	.short	0x0000
    4b5c:	20000a9a 	.word	0x20000a9a

00004b60 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4b60:	4801      	ldr	r0, [pc, #4]	; (4b68 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4b62:	78c0      	ldrb	r0, [r0, #3]
    4b64:	4770      	bx	lr
    4b66:	0000      	.short	0x0000
    4b68:	200000ac 	.word	0x200000ac

00004b6c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4b6c:	4801      	ldr	r0, [pc, #4]	; (4b74 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4b6e:	7900      	ldrb	r0, [r0, #4]
    4b70:	4770      	bx	lr
    4b72:	0000      	.short	0x0000
    4b74:	200000ac 	.word	0x200000ac

00004b78 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4b78:	b578      	push	{r3, r4, r5, r6, lr}
    4b7a:	4913      	ldr	r1, [pc, #76]	; (4bc8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4b7c:	7c4a      	ldrb	r2, [r1, #17]
    4b7e:	b30a      	cbz	r2, 4bc4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4b80:	7c0a      	ldrb	r2, [r1, #16]
    4b82:	f88d 2000 	strb.w	r2, [sp]
    4b86:	9a00      	ldr	r2, [sp, #0]
    4b88:	9200      	str	r2, [sp, #0]
    4b8a:	f89d 2000 	ldrb.w	r2, [sp]
    4b8e:	b1ca      	cbz	r2, 4bc4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4b90:	2300      	movs	r3, #0
    4b92:	f101 0210 	add.w	r2, r1, #16
    4b96:	241a      	movs	r4, #26
    4b98:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4b9c:	7c0e      	ldrb	r6, [r1, #16]
    4b9e:	f88d 6000 	strb.w	r6, [sp]
    4ba2:	9e00      	ldr	r6, [sp, #0]
    4ba4:	9600      	str	r6, [sp, #0]
    4ba6:	f89d 6000 	ldrb.w	r6, [sp]
    4baa:	b14e      	cbz	r6, 4bc0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4bac:	7013      	strb	r3, [r2, #0]
    4bae:	7043      	strb	r3, [r0, #1]
    4bb0:	7004      	strb	r4, [r0, #0]
    4bb2:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4bb6:	6046      	str	r6, [r0, #4]
    4bb8:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4bbc:	6086      	str	r6, [r0, #8]
    4bbe:	e7ed      	b.n	4b9c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4bc0:	2001      	movs	r0, #1
    4bc2:	bd78      	pop	{r3, r4, r5, r6, pc}
    4bc4:	2000      	movs	r0, #0
    4bc6:	bd78      	pop	{r3, r4, r5, r6, pc}
    4bc8:	20000a9a 	.word	0x20000a9a

00004bcc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4bcc:	b510      	push	{r4, lr}
    4bce:	4604      	mov	r4, r0
    4bd0:	f000 f956 	bl	4e80 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4bd4:	b118      	cbz	r0, 4bde <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4bd6:	21bd      	movs	r1, #189	; 0xbd
    4bd8:	2027      	movs	r0, #39	; 0x27
    4bda:	f7ff f881 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bde:	4803      	ldr	r0, [pc, #12]	; (4bec <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4be0:	2101      	movs	r1, #1
    4be2:	f008 fc06 	bl	d3f2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4be6:	4802      	ldr	r0, [pc, #8]	; (4bf0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4be8:	62c4      	str	r4, [r0, #44]	; 0x2c
    4bea:	bd10      	pop	{r4, pc}
    4bec:	20000a78 	.word	0x20000a78
    4bf0:	200000ac 	.word	0x200000ac

00004bf4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4bf4:	4901      	ldr	r1, [pc, #4]	; (4bfc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4bf6:	2001      	movs	r0, #1
    4bf8:	7188      	strb	r0, [r1, #6]
    4bfa:	4770      	bx	lr
    4bfc:	200000ac 	.word	0x200000ac

00004c00 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c04:	4d5f      	ldr	r5, [pc, #380]	; (4d84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    4c06:	9c08      	ldr	r4, [sp, #32]
    4c08:	782e      	ldrb	r6, [r5, #0]
    4c0a:	2e00      	cmp	r6, #0
    4c0c:	d16b      	bne.n	4ce6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4c0e:	2a00      	cmp	r2, #0
    4c10:	d069      	beq.n	4ce6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4c12:	2b00      	cmp	r3, #0
    4c14:	d067      	beq.n	4ce6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4c16:	2c00      	cmp	r4, #0
    4c18:	d065      	beq.n	4ce6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4c1a:	f105 0614 	add.w	r6, r5, #20
    4c1e:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4c22:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4c26:	2700      	movs	r7, #0
    4c28:	71af      	strb	r7, [r5, #6]
    4c2a:	716f      	strb	r7, [r5, #5]
    4c2c:	70ef      	strb	r7, [r5, #3]
    4c2e:	70af      	strb	r7, [r5, #2]
    4c30:	712f      	strb	r7, [r5, #4]
    4c32:	81af      	strh	r7, [r5, #12]
    4c34:	81ef      	strh	r7, [r5, #14]
    4c36:	f000 f95b 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4c3a:	4606      	mov	r6, r0
    4c3c:	f000 f952 	bl	4ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4c40:	4604      	mov	r4, r0
    4c42:	f006 f825 	bl	ac90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4c46:	f005 fcb9 	bl	a5bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4c4a:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4c4e:	f006 f8a5 	bl	ad9c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4c52:	f104 0018 	add.w	r0, r4, #24
    4c56:	f006 f97f 	bl	af58 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4c5a:	6920      	ldr	r0, [r4, #16]
    4c5c:	f006 f972 	bl	af44 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4c60:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4c64:	f006 f996 	bl	af94 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4c68:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4c6c:	6840      	ldr	r0, [r0, #4]
    4c6e:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
    4c72:	b108      	cbz	r0, 4c78 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    4c74:	f005 ff56 	bl	ab24 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4c78:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4c7c:	2001      	movs	r0, #1
    4c7e:	f005 fe81 	bl	a984 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4c82:	2800      	cmp	r0, #0
    4c84:	d076      	beq.n	4d74 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>
    4c86:	4840      	ldr	r0, [pc, #256]	; (4d88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    4c88:	f005 fef8 	bl	aa7c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4c8c:	8820      	ldrh	r0, [r4, #0]
    4c8e:	f7ff fc57 	bl	4540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4c92:	6328      	str	r0, [r5, #48]	; 0x30
    4c94:	8820      	ldrh	r0, [r4, #0]
    4c96:	f7ff fc3d 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4c9a:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4c9e:	6368      	str	r0, [r5, #52]	; 0x34
    4ca0:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 4d8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    4ca4:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4ca8:	f109 0808 	add.w	r8, r9, #8
    4cac:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4cb0:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4cb2:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4cb6:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4cb8:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4cbc:	f000 f98a 	bl	4fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4cc0:	4601      	mov	r1, r0
    4cc2:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4cc4:	46ba      	mov	sl, r7
    4cc6:	f008 f92c 	bl	cf22 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4cca:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4ccc:	4281      	cmp	r1, r0
    4cce:	d200      	bcs.n	4cd2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
    4cd0:	4608      	mov	r0, r1
    4cd2:	7228      	strb	r0, [r5, #8]
    4cd4:	46a8      	mov	r8, r5
    4cd6:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4cda:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4cdc:	7cf7      	ldrb	r7, [r6, #19]
    4cde:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4ce0:	2908      	cmp	r1, #8
    4ce2:	d104      	bne.n	4cee <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    4ce4:	e002      	b.n	4cec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4ce6:	f44f 718a 	mov.w	r1, #276	; 0x114
    4cea:	e047      	b.n	4d7c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    4cec:	2104      	movs	r1, #4
    4cee:	f008 f918 	bl	cf22 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4cf2:	b90f      	cbnz	r7, 4cf8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    4cf4:	1d00      	adds	r0, r0, #4
    4cf6:	b280      	uxth	r0, r0
    4cf8:	4285      	cmp	r5, r0
    4cfa:	d200      	bcs.n	4cfe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4cfc:	4628      	mov	r0, r5
    4cfe:	b2c5      	uxtb	r5, r0
    4d00:	f888 5009 	strb.w	r5, [r8, #9]
    4d04:	7cf1      	ldrb	r1, [r6, #19]
    4d06:	2900      	cmp	r1, #0
    4d08:	d002      	beq.n	4d10 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4d0a:	bf00      	nop
    4d0c:	f04f 0104 	mov.w	r1, #4
    4d10:	4429      	add	r1, r5
    4d12:	f888 1007 	strb.w	r1, [r8, #7]
    4d16:	4657      	mov	r7, sl
    4d18:	d016      	beq.n	4d48 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x148>
    4d1a:	481c      	ldr	r0, [pc, #112]	; (4d8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    4d1c:	f04f 0101 	mov.w	r1, #1
    4d20:	f100 0008 	add.w	r0, r0, #8
    4d24:	7601      	strb	r1, [r0, #24]
    4d26:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    4d2a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    4d2e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4d32:	f007 fffc 	bl	cd2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    4d36:	4915      	ldr	r1, [pc, #84]	; (4d8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    4d38:	4603      	mov	r3, r0
    4d3a:	462a      	mov	r2, r5
    4d3c:	3108      	adds	r1, #8
    4d3e:	2001      	movs	r0, #1
    4d40:	f005 fc86 	bl	a650 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4d44:	f005 fcba 	bl	a6bc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4d48:	2001      	movs	r0, #1
    4d4a:	f000 fb73 	bl	5434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    4d4e:	4810      	ldr	r0, [pc, #64]	; (4d90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
    4d50:	6800      	ldr	r0, [r0, #0]
    4d52:	2803      	cmp	r0, #3
    4d54:	d010      	beq.n	4d78 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    4d56:	280b      	cmp	r0, #11
    4d58:	d00e      	beq.n	4d78 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    4d5a:	4648      	mov	r0, r9
    4d5c:	f840 7f52 	str.w	r7, [r0, #82]!
    4d60:	6047      	str	r7, [r0, #4]
    4d62:	480a      	ldr	r0, [pc, #40]	; (4d8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    4d64:	88b1      	ldrh	r1, [r6, #4]
    4d66:	3052      	adds	r0, #82	; 0x52
    4d68:	8041      	strh	r1, [r0, #2]
    4d6a:	8821      	ldrh	r1, [r4, #0]
    4d6c:	8001      	strh	r1, [r0, #0]
    4d6e:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4d72:	7101      	strb	r1, [r0, #4]
    4d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d78:	f240 11c1 	movw	r1, #449	; 0x1c1
    4d7c:	2027      	movs	r0, #39	; 0x27
    4d7e:	f7fe ffaf 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d82:	0000      	.short	0x0000
    4d84:	200000ac 	.word	0x200000ac
    4d88:	00005638 	.word	0x00005638
    4d8c:	20000a48 	.word	0x20000a48
    4d90:	40001550 	.word	0x40001550

00004d94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d98:	4605      	mov	r5, r0
    4d9a:	f000 f8a9 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4d9e:	4e33      	ldr	r6, [pc, #204]	; (4e6c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4da0:	4604      	mov	r4, r0
    4da2:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4da4:	7847      	ldrb	r7, [r0, #1]
    4da6:	b10d      	cbz	r5, 4dac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4da8:	2d01      	cmp	r5, #1
    4daa:	d103      	bne.n	4db4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4dac:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4dae:	f006 ff3e 	bl	bc2e <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4db2:	7070      	strb	r0, [r6, #1]
    4db4:	7870      	ldrb	r0, [r6, #1]
    4db6:	f04f 0800 	mov.w	r8, #0
    4dba:	f04f 0901 	mov.w	r9, #1
    4dbe:	b150      	cbz	r0, 4dd6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4dc0:	2801      	cmp	r0, #1
    4dc2:	d01a      	beq.n	4dfa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4dc4:	2802      	cmp	r0, #2
    4dc6:	d034      	beq.n	4e32 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4dc8:	2803      	cmp	r0, #3
    4dca:	d048      	beq.n	4e5e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4dcc:	f240 4115 	movw	r1, #1045	; 0x415
    4dd0:	2027      	movs	r0, #39	; 0x27
    4dd2:	f7fe ff85 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dd6:	2d01      	cmp	r5, #1
    4dd8:	d032      	beq.n	4e40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4dda:	f000 f8e7 	bl	4fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4dde:	4639      	mov	r1, r7
    4de0:	2201      	movs	r2, #1
    4de2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4de4:	f007 fb4a 	bl	c47c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4de8:	e028      	b.n	4e3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4dea:	bf00      	nop
    4dec:	f884 8008 	strb.w	r8, [r4, #8]
    4df0:	e031      	b.n	4e56 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4df2:	bf00      	nop
    4df4:	f884 9008 	strb.w	r9, [r4, #8]
    4df8:	e02d      	b.n	4e56 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4dfa:	2d01      	cmp	r5, #1
    4dfc:	d008      	beq.n	4e10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4dfe:	f000 f8d5 	bl	4fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4e02:	4639      	mov	r1, r7
    4e04:	2200      	movs	r2, #0
    4e06:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4e08:	f007 fb38 	bl	c47c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4e0c:	2d02      	cmp	r5, #2
    4e0e:	d00b      	beq.n	4e28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4e10:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4e14:	1c40      	adds	r0, r0, #1
    4e16:	f141 0100 	adc.w	r1, r1, #0
    4e1a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4e1e:	7a20      	ldrb	r0, [r4, #8]
    4e20:	2801      	cmp	r0, #1
    4e22:	d003      	beq.n	4e2c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4e24:	f884 9008 	strb.w	r9, [r4, #8]
    4e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e2c:	f884 8008 	strb.w	r8, [r4, #8]
    4e30:	e7fa      	b.n	4e28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4e32:	2d01      	cmp	r5, #1
    4e34:	d004      	beq.n	4e40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4e36:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4e38:	f007 fd31 	bl	c89e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4e3c:	2d02      	cmp	r5, #2
    4e3e:	d0f3      	beq.n	4e28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4e40:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4e44:	1c40      	adds	r0, r0, #1
    4e46:	f141 0100 	adc.w	r1, r1, #0
    4e4a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4e4e:	7a20      	ldrb	r0, [r4, #8]
    4e50:	2801      	cmp	r0, #1
    4e52:	d1cf      	bne.n	4df4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4e54:	e7ca      	b.n	4dec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4e56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e5a:	f001 b8cd 	b.w	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4e5e:	2d01      	cmp	r5, #1
    4e60:	d0e2      	beq.n	4e28 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4e62:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4e64:	f007 fd1b 	bl	c89e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4e68:	e7f5      	b.n	4e56 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4e6a:	0000      	.short	0x0000
    4e6c:	200000ac 	.word	0x200000ac

00004e70 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4e70:	4802      	ldr	r0, [pc, #8]	; (4e7c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4e72:	89c0      	ldrh	r0, [r0, #14]
    4e74:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4e78:	4770      	bx	lr
    4e7a:	0000      	.short	0x0000
    4e7c:	200000ac 	.word	0x200000ac

00004e80 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4e80:	4804      	ldr	r0, [pc, #16]	; (4e94 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4e82:	7800      	ldrb	r0, [r0, #0]
    4e84:	b108      	cbz	r0, 4e8a <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4e86:	200c      	movs	r0, #12
    4e88:	4770      	bx	lr
    4e8a:	4903      	ldr	r1, [pc, #12]	; (4e98 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4e8c:	2000      	movs	r0, #0
    4e8e:	7448      	strb	r0, [r1, #17]
    4e90:	4770      	bx	lr
    4e92:	0000      	.short	0x0000
    4e94:	200000ac 	.word	0x200000ac
    4e98:	20000a9a 	.word	0x20000a9a

00004e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4e9c:	480c      	ldr	r0, [pc, #48]	; (4ed0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4e9e:	b510      	push	{r4, lr}
    4ea0:	7801      	ldrb	r1, [r0, #0]
    4ea2:	b149      	cbz	r1, 4eb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4ea4:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4ea8:	7800      	ldrb	r0, [r0, #0]
    4eaa:	2802      	cmp	r0, #2
    4eac:	d008      	beq.n	4ec0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4eae:	f240 11dd 	movw	r1, #477	; 0x1dd
    4eb2:	2027      	movs	r0, #39	; 0x27
    4eb4:	f7fe ff14 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ebc:	f000 b9d8 	b.w	5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    4ec0:	6848      	ldr	r0, [r1, #4]
    4ec2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    4ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4eca:	f005 bddf 	b.w	aa8c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4ece:	0000      	.short	0x0000
    4ed0:	200000ac 	.word	0x200000ac
    4ed4:	4a02      	ldr	r2, [pc, #8]	; (4ee0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4ed6:	8993      	ldrh	r3, [r2, #12]
    4ed8:	4303      	orrs	r3, r0
    4eda:	8193      	strh	r3, [r2, #12]
    4edc:	6952      	ldr	r2, [r2, #20]
    4ede:	4710      	bx	r2
    4ee0:	200000ac 	.word	0x200000ac
    4ee4:	4801      	ldr	r0, [pc, #4]	; (4eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4ee6:	6840      	ldr	r0, [r0, #4]
    4ee8:	4770      	bx	lr
    4eea:	0000      	.short	0x0000
    4eec:	200000e4 	.word	0x200000e4
    4ef0:	4801      	ldr	r0, [pc, #4]	; (4ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4ef2:	6840      	ldr	r0, [r0, #4]
    4ef4:	3070      	adds	r0, #112	; 0x70
    4ef6:	4770      	bx	lr
    4ef8:	200000e4 	.word	0x200000e4
    4efc:	4a01      	ldr	r2, [pc, #4]	; (4f04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4efe:	2100      	movs	r1, #0
    4f00:	6952      	ldr	r2, [r2, #20]
    4f02:	4710      	bx	r2
    4f04:	200000ac 	.word	0x200000ac
    4f08:	b570      	push	{r4, r5, r6, lr}
    4f0a:	f7ff fff1 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4f0e:	4604      	mov	r4, r0
    4f10:	f7ff ffe8 	bl	4ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4f14:	4605      	mov	r5, r0
    4f16:	4621      	mov	r1, r4
    4f18:	f008 f886 	bl	d028 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4f1c:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    4f20:	2901      	cmp	r1, #1
    4f22:	d114      	bne.n	4f4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    4f24:	2800      	cmp	r0, #0
    4f26:	d012      	beq.n	4f4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    4f28:	4809      	ldr	r0, [pc, #36]	; (4f50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    4f2a:	6842      	ldr	r2, [r0, #4]
    4f2c:	8828      	ldrh	r0, [r5, #0]
    4f2e:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
    4f32:	7a60      	ldrb	r0, [r4, #9]
    4f34:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
    4f38:	7aa0      	ldrb	r0, [r4, #10]
    4f3a:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
    4f3e:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    4f42:	2001      	movs	r0, #1
    4f44:	7010      	strb	r0, [r2, #0]
    4f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4f4a:	f001 b855 	b.w	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4f4e:	bd70      	pop	{r4, r5, r6, pc}
    4f50:	200000e4 	.word	0x200000e4
    4f54:	b570      	push	{r4, r5, r6, lr}
    4f56:	4605      	mov	r5, r0
    4f58:	2901      	cmp	r1, #1
    4f5a:	d818      	bhi.n	4f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f5c:	4c12      	ldr	r4, [pc, #72]	; (4fa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    4f5e:	69a1      	ldr	r1, [r4, #24]
    4f60:	4788      	blx	r1
    4f62:	b1a0      	cbz	r0, 4f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f64:	7960      	ldrb	r0, [r4, #5]
    4f66:	b990      	cbnz	r0, 4f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f68:	b9e5      	cbnz	r5, 4fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4f6a:	f104 0010 	add.w	r0, r4, #16
    4f6e:	7801      	ldrb	r1, [r0, #0]
    4f70:	06c8      	lsls	r0, r1, #27
    4f72:	d405      	bmi.n	4f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4f74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4f76:	7800      	ldrb	r0, [r0, #0]
    4f78:	06c0      	lsls	r0, r0, #27
    4f7a:	d401      	bmi.n	4f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4f7c:	2001      	movs	r0, #1
    4f7e:	e000      	b.n	4f82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    4f80:	2000      	movs	r0, #0
    4f82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f84:	b92a      	cbnz	r2, 4f92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f86:	8962      	ldrh	r2, [r4, #10]
    4f88:	b11a      	cbz	r2, 4f92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f8a:	06c9      	lsls	r1, r1, #27
    4f8c:	d401      	bmi.n	4f92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f8e:	2001      	movs	r0, #1
    4f90:	bd70      	pop	{r4, r5, r6, pc}
    4f92:	89a1      	ldrh	r1, [r4, #12]
    4f94:	078a      	lsls	r2, r1, #30
    4f96:	d503      	bpl.n	4fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    4f98:	6a22      	ldr	r2, [r4, #32]
    4f9a:	78d2      	ldrb	r2, [r2, #3]
    4f9c:	2a02      	cmp	r2, #2
    4f9e:	d001      	beq.n	4fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4fa0:	4308      	orrs	r0, r1
    4fa2:	d1f4      	bne.n	4f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4fa4:	2000      	movs	r0, #0
    4fa6:	bd70      	pop	{r4, r5, r6, pc}
    4fa8:	200000ac 	.word	0x200000ac
    4fac:	b510      	push	{r4, lr}
    4fae:	4c08      	ldr	r4, [pc, #32]	; (4fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    4fb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4fb2:	b138      	cbz	r0, 4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4fb4:	8962      	ldrh	r2, [r4, #10]
    4fb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4fb8:	1cd2      	adds	r2, r2, #3
    4fba:	f006 fcdf 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4fbe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4fc0:	6260      	str	r0, [r4, #36]	; 0x24
    4fc2:	bd10      	pop	{r4, pc}
    4fc4:	f240 415b 	movw	r1, #1115	; 0x45b
    4fc8:	2027      	movs	r0, #39	; 0x27
    4fca:	f7fe fe89 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fce:	0000      	.short	0x0000
    4fd0:	200000ac 	.word	0x200000ac
    4fd4:	b510      	push	{r4, lr}
    4fd6:	f7ff ff85 	bl	4ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4fda:	4604      	mov	r4, r0
    4fdc:	f7ff ff88 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4fe0:	4601      	mov	r1, r0
    4fe2:	7b42      	ldrb	r2, [r0, #13]
    4fe4:	4815      	ldr	r0, [pc, #84]	; (503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    4fe6:	2a24      	cmp	r2, #36	; 0x24
    4fe8:	d00e      	beq.n	5008 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4fea:	7b89      	ldrb	r1, [r1, #14]
    4fec:	2924      	cmp	r1, #36	; 0x24
    4fee:	d00b      	beq.n	5008 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4ff0:	2a1f      	cmp	r2, #31
    4ff2:	d00d      	beq.n	5010 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4ff4:	2a20      	cmp	r2, #32
    4ff6:	d00b      	beq.n	5010 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4ff8:	2922      	cmp	r1, #34	; 0x22
    4ffa:	d00f      	beq.n	501c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4ffc:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5000:	2804      	cmp	r0, #4
    5002:	d100      	bne.n	5006 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    5004:	2008      	movs	r0, #8
    5006:	bd10      	pop	{r4, pc}
    5008:	6840      	ldr	r0, [r0, #4]
    500a:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
    500e:	e00e      	b.n	502e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    5010:	2922      	cmp	r1, #34	; 0x22
    5012:	d003      	beq.n	501c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5014:	6840      	ldr	r0, [r0, #4]
    5016:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
    501a:	e005      	b.n	5028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    501c:	6841      	ldr	r1, [r0, #4]
    501e:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
    5022:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5026:	4008      	ands	r0, r1
    5028:	f007 fe77 	bl	cd1a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    502c:	4601      	mov	r1, r0
    502e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5036:	f007 be88 	b.w	cd4a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    503a:	0000      	.short	0x0000
    503c:	200000e4 	.word	0x200000e4
    5040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5044:	4688      	mov	r8, r1
    5046:	4607      	mov	r7, r0
    5048:	f7ff ff52 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    504c:	4c57      	ldr	r4, [pc, #348]	; (51ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    504e:	2600      	movs	r6, #0
    5050:	4605      	mov	r5, r0
    5052:	f88d 6000 	strb.w	r6, [sp]
    5056:	7820      	ldrb	r0, [r4, #0]
    5058:	2802      	cmp	r0, #2
    505a:	d004      	beq.n	5066 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    505c:	f240 41ba 	movw	r1, #1210	; 0x4ba
    5060:	2027      	movs	r0, #39	; 0x27
    5062:	f7fe fe3d 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5066:	7ba0      	ldrb	r0, [r4, #14]
    5068:	0640      	lsls	r0, r0, #25
    506a:	d406      	bmi.n	507a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    506c:	2040      	movs	r0, #64	; 0x40
    506e:	f7ff ff45 	bl	4efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5072:	89e0      	ldrh	r0, [r4, #14]
    5074:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5078:	81e0      	strh	r0, [r4, #14]
    507a:	7ce8      	ldrb	r0, [r5, #19]
    507c:	b3c7      	cbz	r7, 50f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    507e:	f005 fb4d 	bl	a71c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5082:	f005 fb31 	bl	a6e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5086:	b968      	cbnz	r0, 50a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5088:	7ce8      	ldrb	r0, [r5, #19]
    508a:	b158      	cbz	r0, 50a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    508c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    508e:	7841      	ldrb	r1, [r0, #1]
    5090:	b141      	cbz	r1, 50a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5092:	7800      	ldrb	r0, [r0, #0]
    5094:	7a29      	ldrb	r1, [r5, #8]
    5096:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    509a:	4288      	cmp	r0, r1
    509c:	d102      	bne.n	50a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    509e:	2001      	movs	r0, #1
    50a0:	70a0      	strb	r0, [r4, #2]
    50a2:	e063      	b.n	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    50a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    50a6:	7841      	ldrb	r1, [r0, #1]
    50a8:	8161      	strh	r1, [r4, #10]
    50aa:	b121      	cbz	r1, 50b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    50ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
    50ae:	f007 fbc3 	bl	c838 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    50b2:	62a0      	str	r0, [r4, #40]	; 0x28
    50b4:	e000      	b.n	50b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    50b6:	62a6      	str	r6, [r4, #40]	; 0x28
    50b8:	89e0      	ldrh	r0, [r4, #14]
    50ba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    50be:	81e0      	strh	r0, [r4, #14]
    50c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    50c2:	79e9      	ldrb	r1, [r5, #7]
    50c4:	7800      	ldrb	r0, [r0, #0]
    50c6:	f3c0 0080 	ubfx	r0, r0, #2, #1
    50ca:	4288      	cmp	r0, r1
    50cc:	d005      	beq.n	50da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    50ce:	f000 f963 	bl	5398 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
    50d2:	89e0      	ldrh	r0, [r4, #14]
    50d4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    50d8:	81e0      	strh	r0, [r4, #14]
    50da:	6a60      	ldr	r0, [r4, #36]	; 0x24
    50dc:	7a29      	ldrb	r1, [r5, #8]
    50de:	7800      	ldrb	r0, [r0, #0]
    50e0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    50e4:	4288      	cmp	r0, r1
    50e6:	d10e      	bne.n	5106 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    50e8:	4668      	mov	r0, sp
    50ea:	f000 f917 	bl	531c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    50ee:	e00a      	b.n	5106 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    50f0:	e7ff      	b.n	50f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    50f2:	b108      	cbz	r0, 50f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    50f4:	f005 fb0c 	bl	a710 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    50f8:	78e0      	ldrb	r0, [r4, #3]
    50fa:	1c40      	adds	r0, r0, #1
    50fc:	70e0      	strb	r0, [r4, #3]
    50fe:	89e0      	ldrh	r0, [r4, #14]
    5100:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5104:	81e0      	strh	r0, [r4, #14]
    5106:	7ca8      	ldrb	r0, [r5, #18]
    5108:	b198      	cbz	r0, 5132 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    510a:	f7ff feeb 	bl	4ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    510e:	4928      	ldr	r1, [pc, #160]	; (51b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5110:	760e      	strb	r6, [r1, #24]
    5112:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
    5116:	e9c1 2304 	strd	r2, r3, [r1, #16]
    511a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    511e:	f007 fe06 	bl	cd2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5122:	4603      	mov	r3, r0
    5124:	22fb      	movs	r2, #251	; 0xfb
    5126:	4922      	ldr	r1, [pc, #136]	; (51b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5128:	2000      	movs	r0, #0
    512a:	f005 fa91 	bl	a650 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    512e:	f005 fac5 	bl	a6bc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5132:	4d1f      	ldr	r5, [pc, #124]	; (51b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5134:	354a      	adds	r5, #74	; 0x4a
    5136:	f1b8 0f00 	cmp.w	r8, #0
    513a:	d104      	bne.n	5146 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    513c:	78e1      	ldrb	r1, [r4, #3]
    513e:	2001      	movs	r0, #1
    5140:	f7ff ff08 	bl	4f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5144:	b1b0      	cbz	r0, 5174 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    5146:	f005 fed9 	bl	aefc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    514a:	f89d 0000 	ldrb.w	r0, [sp]
    514e:	b110      	cbz	r0, 5156 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    5150:	2000      	movs	r0, #0
    5152:	f7ff fe1f 	bl	4d94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5156:	b137      	cbz	r7, 5166 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    5158:	70e6      	strb	r6, [r4, #3]
    515a:	7968      	ldrb	r0, [r5, #5]
    515c:	1c40      	adds	r0, r0, #1
    515e:	7168      	strb	r0, [r5, #5]
    5160:	f7ff fed2 	bl	4f08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5164:	e002      	b.n	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    5166:	79a8      	ldrb	r0, [r5, #6]
    5168:	1c40      	adds	r0, r0, #1
    516a:	71a8      	strb	r0, [r5, #6]
    516c:	f000 f880 	bl	5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5174:	f89d 0000 	ldrb.w	r0, [sp]
    5178:	b110      	cbz	r0, 5180 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    517a:	2001      	movs	r0, #1
    517c:	f7ff fe0a 	bl	4d94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5180:	2000      	movs	r0, #0
    5182:	f000 f995 	bl	54b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    5186:	f89d 0000 	ldrb.w	r0, [sp]
    518a:	b110      	cbz	r0, 5192 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
    518c:	2002      	movs	r0, #2
    518e:	f7ff fe01 	bl	4d94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5192:	b137      	cbz	r7, 51a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    5194:	70e6      	strb	r6, [r4, #3]
    5196:	7968      	ldrb	r0, [r5, #5]
    5198:	1c40      	adds	r0, r0, #1
    519a:	7168      	strb	r0, [r5, #5]
    519c:	f7ff feb4 	bl	4f08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    51a0:	e7e6      	b.n	5170 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    51a2:	79a8      	ldrb	r0, [r5, #6]
    51a4:	1c40      	adds	r0, r0, #1
    51a6:	71a8      	strb	r0, [r5, #6]
    51a8:	e7e2      	b.n	5170 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    51aa:	0000      	.short	0x0000
    51ac:	200000ac 	.word	0x200000ac
    51b0:	20000a50 	.word	0x20000a50
    51b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51b8:	460f      	mov	r7, r1
    51ba:	4680      	mov	r8, r0
    51bc:	f7ff fe98 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    51c0:	4d29      	ldr	r5, [pc, #164]	; (5268 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    51c2:	4604      	mov	r4, r0
    51c4:	7828      	ldrb	r0, [r5, #0]
    51c6:	2801      	cmp	r0, #1
    51c8:	d004      	beq.n	51d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    51ca:	f240 416a 	movw	r1, #1130	; 0x46a
    51ce:	2027      	movs	r0, #39	; 0x27
    51d0:	f7fe fd86 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51d4:	7861      	ldrb	r1, [r4, #1]
    51d6:	2000      	movs	r0, #0
    51d8:	2601      	movs	r6, #1
    51da:	b129      	cbz	r1, 51e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    51dc:	7060      	strb	r0, [r4, #1]
    51de:	2100      	movs	r1, #0
    51e0:	2004      	movs	r0, #4
    51e2:	f7ff fe77 	bl	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    51e6:	70e6      	strb	r6, [r4, #3]
    51e8:	6a29      	ldr	r1, [r5, #32]
    51ea:	7808      	ldrb	r0, [r1, #0]
    51ec:	43c0      	mvns	r0, r0
    51ee:	0780      	lsls	r0, r0, #30
    51f0:	d109      	bne.n	5206 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    51f2:	79a0      	ldrb	r0, [r4, #6]
    51f4:	bb88      	cbnz	r0, 525a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    51f6:	2002      	movs	r0, #2
    51f8:	f7ff fe6c 	bl	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    51fc:	6a28      	ldr	r0, [r5, #32]
    51fe:	7800      	ldrb	r0, [r0, #0]
    5200:	43c0      	mvns	r0, r0
    5202:	0780      	lsls	r0, r0, #30
    5204:	d029      	beq.n	525a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    5206:	6a28      	ldr	r0, [r5, #32]
    5208:	7840      	ldrb	r0, [r0, #1]
    520a:	b110      	cbz	r0, 5212 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    520c:	2002      	movs	r0, #2
    520e:	71a0      	strb	r0, [r4, #6]
    5210:	e000      	b.n	5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    5212:	71a6      	strb	r6, [r4, #6]
    5214:	7ce0      	ldrb	r0, [r4, #19]
    5216:	b1a0      	cbz	r0, 5242 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    5218:	f7ff fe64 	bl	4ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    521c:	4913      	ldr	r1, [pc, #76]	; (526c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    521e:	7a6d      	ldrb	r5, [r5, #9]
    5220:	760e      	strb	r6, [r1, #24]
    5222:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    5226:	e9c1 2304 	strd	r2, r3, [r1, #16]
    522a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    522e:	f007 fd7e 	bl	cd2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5232:	4603      	mov	r3, r0
    5234:	462a      	mov	r2, r5
    5236:	490d      	ldr	r1, [pc, #52]	; (526c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    5238:	2001      	movs	r0, #1
    523a:	f005 fa09 	bl	a650 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    523e:	f005 fa3d 	bl	a6bc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5242:	ea37 0708 	bics.w	r7, r7, r8
    5246:	d004      	beq.n	5252 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    5248:	2100      	movs	r1, #0
    524a:	4608      	mov	r0, r1
    524c:	f7ff fe82 	bl	4f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5250:	b128      	cbz	r0, 525e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    5252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5256:	f000 b80b 	b.w	5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    525a:	2003      	movs	r0, #3
    525c:	e7d7      	b.n	520e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    525e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5262:	2000      	movs	r0, #0
    5264:	f000 b8e6 	b.w	5434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    5268:	200000ac 	.word	0x200000ac
    526c:	20000a50 	.word	0x20000a50
    5270:	b510      	push	{r4, lr}
    5272:	f005 faeb 	bl	a84c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5276:	f005 f9a1 	bl	a5bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    527a:	4c0d      	ldr	r4, [pc, #52]	; (52b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    527c:	89e0      	ldrh	r0, [r4, #14]
    527e:	f7ff fe3d 	bl	4efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5282:	69e2      	ldr	r2, [r4, #28]
    5284:	7961      	ldrb	r1, [r4, #5]
    5286:	78a0      	ldrb	r0, [r4, #2]
    5288:	4790      	blx	r2
    528a:	480a      	ldr	r0, [pc, #40]	; (52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    528c:	7c40      	ldrb	r0, [r0, #17]
    528e:	b158      	cbz	r0, 52a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    5290:	4808      	ldr	r0, [pc, #32]	; (52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5292:	3852      	subs	r0, #82	; 0x52
    5294:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5298:	6081      	str	r1, [r0, #8]
    529a:	6841      	ldr	r1, [r0, #4]
    529c:	60c1      	str	r1, [r0, #12]
    529e:	4805      	ldr	r0, [pc, #20]	; (52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    52a0:	2101      	movs	r1, #1
    52a2:	7401      	strb	r1, [r0, #16]
    52a4:	f000 fea8 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    52a8:	2000      	movs	r0, #0
    52aa:	7020      	strb	r0, [r4, #0]
    52ac:	bd10      	pop	{r4, pc}
    52ae:	0000      	.short	0x0000
    52b0:	200000ac 	.word	0x200000ac
    52b4:	20000a9a 	.word	0x20000a9a
    52b8:	4808      	ldr	r0, [pc, #32]	; (52dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    52ba:	b510      	push	{r4, lr}
    52bc:	7800      	ldrb	r0, [r0, #0]
    52be:	2802      	cmp	r0, #2
    52c0:	d004      	beq.n	52cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    52c2:	f240 2111 	movw	r1, #529	; 0x211
    52c6:	2027      	movs	r0, #39	; 0x27
    52c8:	f7fe fd0a 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52cc:	4904      	ldr	r1, [pc, #16]	; (52e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    52ce:	2001      	movs	r0, #1
    52d0:	71c8      	strb	r0, [r1, #7]
    52d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    52d6:	f7ff bfcb 	b.w	5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    52da:	0000      	.short	0x0000
    52dc:	200000ac 	.word	0x200000ac
    52e0:	20000a9a 	.word	0x20000a9a
    52e4:	b430      	push	{r4, r5}
    52e6:	4b0c      	ldr	r3, [pc, #48]	; (5318 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
    52e8:	b942      	cbnz	r2, 52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    52ea:	79da      	ldrb	r2, [r3, #7]
    52ec:	2aff      	cmp	r2, #255	; 0xff
    52ee:	d105      	bne.n	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    52f0:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    52f4:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    52f8:	42a2      	cmp	r2, r4
    52fa:	d00b      	beq.n	5314 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    52fc:	b131      	cbz	r1, 530c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    52fe:	79da      	ldrb	r2, [r3, #7]
    5300:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5304:	bc30      	pop	{r4, r5}
    5306:	4610      	mov	r0, r2
    5308:	f005 be30 	b.w	af6c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    530c:	22ff      	movs	r2, #255	; 0xff
    530e:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5312:	e7f7      	b.n	5304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    5314:	bc30      	pop	{r4, r5}
    5316:	4770      	bx	lr
    5318:	200000ac 	.word	0x200000ac
    531c:	b570      	push	{r4, r5, r6, lr}
    531e:	4606      	mov	r6, r0
    5320:	f7ff fde6 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5324:	4a1b      	ldr	r2, [pc, #108]	; (5394 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
    5326:	4604      	mov	r4, r0
    5328:	2501      	movs	r5, #1
    532a:	6a51      	ldr	r1, [r2, #36]	; 0x24
    532c:	7808      	ldrb	r0, [r1, #0]
    532e:	f000 0003 	and.w	r0, r0, #3
    5332:	2801      	cmp	r0, #1
    5334:	d00c      	beq.n	5350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    5336:	2802      	cmp	r0, #2
    5338:	d00a      	beq.n	5350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    533a:	2803      	cmp	r0, #3
    533c:	d121      	bne.n	5382 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    533e:	7065      	strb	r5, [r4, #1]
    5340:	89d0      	ldrh	r0, [r2, #14]
    5342:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    5346:	81d0      	strh	r0, [r2, #14]
    5348:	2001      	movs	r0, #1
    534a:	f7ff fdc3 	bl	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    534e:	e018      	b.n	5382 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    5350:	7848      	ldrb	r0, [r1, #1]
    5352:	b1b0      	cbz	r0, 5382 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    5354:	89d1      	ldrh	r1, [r2, #14]
    5356:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    535a:	81d1      	strh	r1, [r2, #14]
    535c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    535e:	2900      	cmp	r1, #0
    5360:	d009      	beq.n	5376 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
    5362:	28fb      	cmp	r0, #251	; 0xfb
    5364:	d808      	bhi.n	5378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    5366:	7990      	ldrb	r0, [r2, #6]
    5368:	b120      	cbz	r0, 5374 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    536a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    536e:	2020      	movs	r0, #32
    5370:	f7ff bdc4 	b.w	4efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5374:	7035      	strb	r5, [r6, #0]
    5376:	bd70      	pop	{r4, r5, r6, pc}
    5378:	7950      	ldrb	r0, [r2, #5]
    537a:	f040 0010 	orr.w	r0, r0, #16
    537e:	7150      	strb	r0, [r2, #5]
    5380:	bd70      	pop	{r4, r5, r6, pc}
    5382:	7a20      	ldrb	r0, [r4, #8]
    5384:	2801      	cmp	r0, #1
    5386:	d001      	beq.n	538c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    5388:	7225      	strb	r5, [r4, #8]
    538a:	bd70      	pop	{r4, r5, r6, pc}
    538c:	2000      	movs	r0, #0
    538e:	7220      	strb	r0, [r4, #8]
    5390:	bd70      	pop	{r4, r5, r6, pc}
    5392:	0000      	.short	0x0000
    5394:	200000ac 	.word	0x200000ac
    5398:	b570      	push	{r4, r5, r6, lr}
    539a:	f7ff fda9 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    539e:	4604      	mov	r4, r0
    53a0:	7980      	ldrb	r0, [r0, #6]
    53a2:	2800      	cmp	r0, #0
    53a4:	d02e      	beq.n	5404 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    53a6:	2802      	cmp	r0, #2
    53a8:	d10d      	bne.n	53c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    53aa:	481c      	ldr	r0, [pc, #112]	; (541c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
    53ac:	6b00      	ldr	r0, [r0, #48]	; 0x30
    53ae:	f007 f83e 	bl	c42e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    53b2:	b340      	cbz	r0, 5406 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
    53b4:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    53b8:	1c40      	adds	r0, r0, #1
    53ba:	f141 0100 	adc.w	r1, r1, #0
    53be:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    53c2:	f000 fe19 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    53c6:	2500      	movs	r5, #0
    53c8:	71a5      	strb	r5, [r4, #6]
    53ca:	78e0      	ldrb	r0, [r4, #3]
    53cc:	b120      	cbz	r0, 53d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
    53ce:	70e5      	strb	r5, [r4, #3]
    53d0:	2100      	movs	r1, #0
    53d2:	2010      	movs	r0, #16
    53d4:	f7ff fd7e 	bl	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    53d8:	78a0      	ldrb	r0, [r4, #2]
    53da:	b170      	cbz	r0, 53fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
    53dc:	70a5      	strb	r5, [r4, #2]
    53de:	f7ff fb07 	bl	49f0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    53e2:	b198      	cbz	r0, 540c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    53e4:	2100      	movs	r1, #0
    53e6:	2008      	movs	r0, #8
    53e8:	f7ff fd74 	bl	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    53ec:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    53f0:	1c40      	adds	r0, r0, #1
    53f2:	f141 0100 	adc.w	r1, r1, #0
    53f6:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    53fa:	79e0      	ldrb	r0, [r4, #7]
    53fc:	2801      	cmp	r0, #1
    53fe:	d00a      	beq.n	5416 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    5400:	2001      	movs	r0, #1
    5402:	71e0      	strb	r0, [r4, #7]
    5404:	bd70      	pop	{r4, r5, r6, pc}
    5406:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    540a:	e001      	b.n	5410 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
    540c:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    5410:	2027      	movs	r0, #39	; 0x27
    5412:	f7fe fc65 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5416:	71e5      	strb	r5, [r4, #7]
    5418:	bd70      	pop	{r4, r5, r6, pc}
    541a:	0000      	.short	0x0000
    541c:	200000ac 	.word	0x200000ac
    5420:	4803      	ldr	r0, [pc, #12]	; (5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    5422:	7800      	ldrb	r0, [r0, #0]
    5424:	2800      	cmp	r0, #0
    5426:	d001      	beq.n	542c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    5428:	f7ff bf22 	b.w	5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    542c:	4770      	bx	lr
    542e:	0000      	.short	0x0000
    5430:	200000ac 	.word	0x200000ac
    5434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5438:	4606      	mov	r6, r0
    543a:	f7ff fd53 	bl	4ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    543e:	4680      	mov	r8, r0
    5440:	f7ff fd56 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5444:	4c17      	ldr	r4, [pc, #92]	; (54a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
    5446:	4605      	mov	r5, r0
    5448:	4632      	mov	r2, r6
    544a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    544c:	6260      	str	r0, [r4, #36]	; 0x24
    544e:	2101      	movs	r1, #1
    5450:	4640      	mov	r0, r8
    5452:	f7ff ff47 	bl	52e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    5456:	7ce8      	ldrb	r0, [r5, #19]
    5458:	2700      	movs	r7, #0
    545a:	b180      	cbz	r0, 547e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    545c:	4812      	ldr	r0, [pc, #72]	; (54a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    545e:	f005 fca3 	bl	ada8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5462:	4812      	ldr	r0, [pc, #72]	; (54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
    5464:	2101      	movs	r1, #1
    5466:	7601      	strb	r1, [r0, #24]
    5468:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    546c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5470:	490d      	ldr	r1, [pc, #52]	; (54a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    5472:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5474:	f005 f874 	bl	a560 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5478:	f005 f886 	bl	a588 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    547c:	e004      	b.n	5488 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    547e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5480:	f005 fc92 	bl	ada8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5484:	f005 f89a 	bl	a5bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5488:	b916      	cbnz	r6, 5490 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    548a:	4638      	mov	r0, r7
    548c:	f005 fb22 	bl	aad4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5490:	2100      	movs	r1, #0
    5492:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5496:	4608      	mov	r0, r1
    5498:	f005 fd12 	bl	aec0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    549c:	2002      	movs	r0, #2
    549e:	7020      	strb	r0, [r4, #0]
    54a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54a4:	200000ac 	.word	0x200000ac
    54a8:	20000948 	.word	0x20000948
    54ac:	20000a50 	.word	0x20000a50
    54b0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    54b4:	4604      	mov	r4, r0
    54b6:	f7ff fd1b 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    54ba:	4605      	mov	r5, r0
    54bc:	f7ff fd12 	bl	4ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    54c0:	4606      	mov	r6, r0
    54c2:	f8df 9168 	ldr.w	r9, [pc, #360]	; 562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    54c6:	4622      	mov	r2, r4
    54c8:	2100      	movs	r1, #0
    54ca:	f7ff ff0b 	bl	52e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    54ce:	79a8      	ldrb	r0, [r5, #6]
    54d0:	2701      	movs	r7, #1
    54d2:	f04f 0800 	mov.w	r8, #0
    54d6:	f1a9 0420 	sub.w	r4, r9, #32
    54da:	b140      	cbz	r0, 54ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
    54dc:	2801      	cmp	r0, #1
    54de:	d01f      	beq.n	5520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    54e0:	2802      	cmp	r0, #2
    54e2:	d030      	beq.n	5546 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    54e4:	2803      	cmp	r0, #3
    54e6:	d03c      	beq.n	5562 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
    54e8:	f240 21ae 	movw	r1, #686	; 0x2ae
    54ec:	e058      	b.n	55a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    54ee:	7a20      	ldrb	r0, [r4, #8]
    54f0:	2150      	movs	r1, #80	; 0x50
    54f2:	f8ad 0004 	strh.w	r0, [sp, #4]
    54f6:	5388      	strh	r0, [r1, r6]
    54f8:	4648      	mov	r0, r9
    54fa:	f7ff faa3 	bl	4a44 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    54fe:	b128      	cbz	r0, 550c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    5500:	2080      	movs	r0, #128	; 0x80
    5502:	6a21      	ldr	r1, [r4, #32]
    5504:	f7ff fce6 	bl	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5508:	70af      	strb	r7, [r5, #2]
    550a:	e02e      	b.n	556a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    550c:	466a      	mov	r2, sp
    550e:	a901      	add	r1, sp, #4
    5510:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5512:	f007 fc24 	bl	cd5e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5516:	6220      	str	r0, [r4, #32]
    5518:	b110      	cbz	r0, 5520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    551a:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    551e:	b111      	cbz	r1, 5526 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    5520:	4843      	ldr	r0, [pc, #268]	; (5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    5522:	6220      	str	r0, [r4, #32]
    5524:	e021      	b.n	556a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5526:	f89d 1000 	ldrb.w	r1, [sp]
    552a:	b931      	cbnz	r1, 553a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    552c:	f8a0 8000 	strh.w	r8, [r0]
    5530:	f880 8002 	strb.w	r8, [r0, #2]
    5534:	2101      	movs	r1, #1
    5536:	f007 ff5c 	bl	d3f2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    553a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    553e:	6a20      	ldr	r0, [r4, #32]
    5540:	f007 ff1b 	bl	d37a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5544:	e011      	b.n	556a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5546:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    554a:	f8ad 0004 	strh.w	r0, [sp, #4]
    554e:	466a      	mov	r2, sp
    5550:	a901      	add	r1, sp, #4
    5552:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5554:	f007 fc03 	bl	cd5e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5558:	6220      	str	r0, [r4, #32]
    555a:	b930      	cbnz	r0, 556a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    555c:	f240 219f 	movw	r1, #671	; 0x29f
    5560:	e01e      	b.n	55a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5562:	4648      	mov	r0, r9
    5564:	f7ff fa6e 	bl	4a44 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5568:	b1c0      	cbz	r0, 559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
    556a:	6a20      	ldr	r0, [r4, #32]
    556c:	2308      	movs	r3, #8
    556e:	7801      	ldrb	r1, [r0, #0]
    5570:	f021 0108 	bic.w	r1, r1, #8
    5574:	7001      	strb	r1, [r0, #0]
    5576:	79ea      	ldrb	r2, [r5, #7]
    5578:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    557c:	4311      	orrs	r1, r2
    557e:	f021 0104 	bic.w	r1, r1, #4
    5582:	7001      	strb	r1, [r0, #0]
    5584:	7a2a      	ldrb	r2, [r5, #8]
    5586:	2304      	movs	r3, #4
    5588:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    558c:	4311      	orrs	r1, r2
    558e:	f021 0110 	bic.w	r1, r1, #16
    5592:	7001      	strb	r1, [r0, #0]
    5594:	43c9      	mvns	r1, r1
    5596:	0789      	lsls	r1, r1, #30
    5598:	d005      	beq.n	55a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
    559a:	e007      	b.n	55ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    559c:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    55a0:	2027      	movs	r0, #39	; 0x27
    55a2:	f7fe fb9d 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55a6:	78c0      	ldrb	r0, [r0, #3]
    55a8:	2802      	cmp	r0, #2
    55aa:	d00f      	beq.n	55cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    55ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
    55ae:	f007 f866 	bl	c67e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    55b2:	b108      	cbz	r0, 55b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    55b4:	2101      	movs	r1, #1
    55b6:	e00a      	b.n	55ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    55b8:	6a20      	ldr	r0, [r4, #32]
    55ba:	7800      	ldrb	r0, [r0, #0]
    55bc:	43c0      	mvns	r0, r0
    55be:	0780      	lsls	r0, r0, #30
    55c0:	d004      	beq.n	55cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    55c2:	f7ff f9fd 	bl	49c0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    55c6:	f080 0101 	eor.w	r1, r0, #1
    55ca:	e000      	b.n	55ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    55cc:	2100      	movs	r1, #0
    55ce:	6a20      	ldr	r0, [r4, #32]
    55d0:	7802      	ldrb	r2, [r0, #0]
    55d2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    55d6:	7001      	strb	r1, [r0, #0]
    55d8:	7ca9      	ldrb	r1, [r5, #18]
    55da:	b199      	cbz	r1, 5604 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    55dc:	7841      	ldrb	r1, [r0, #1]
    55de:	b189      	cbz	r1, 5604 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    55e0:	4814      	ldr	r0, [pc, #80]	; (5634 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    55e2:	f005 fbe1 	bl	ada8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    55e6:	4812      	ldr	r0, [pc, #72]	; (5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    55e8:	3828      	subs	r0, #40	; 0x28
    55ea:	f880 8018 	strb.w	r8, [r0, #24]
    55ee:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    55f2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    55f6:	480f      	ldr	r0, [pc, #60]	; (5634 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    55f8:	6a21      	ldr	r1, [r4, #32]
    55fa:	f004 ffb1 	bl	a560 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    55fe:	f004 fffb 	bl	a5f8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    5602:	e003      	b.n	560c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    5604:	f005 fbd0 	bl	ada8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5608:	f004 ffd8 	bl	a5bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    560c:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    5610:	2101      	movs	r1, #1
    5612:	2000      	movs	r0, #0
    5614:	f005 fc54 	bl	aec0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5618:	7127      	strb	r7, [r4, #4]
    561a:	6a20      	ldr	r0, [r4, #32]
    561c:	8801      	ldrh	r1, [r0, #0]
    561e:	8221      	strh	r1, [r4, #16]
    5620:	7880      	ldrb	r0, [r0, #2]
    5622:	74a0      	strb	r0, [r4, #18]
    5624:	7027      	strb	r7, [r4, #0]
    5626:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    562a:	0000      	.short	0x0000
    562c:	200000cc 	.word	0x200000cc
    5630:	20000a78 	.word	0x20000a78
    5634:	20000948 	.word	0x20000948
    5638:	000052b9 	.word	0x000052b9
    563c:	00005041 	.word	0x00005041
    5640:	000051b5 	.word	0x000051b5
    5644:	00005421 	.word	0x00005421

00005648 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5648:	4800      	ldr	r0, [pc, #0]	; (564c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    564a:	4770      	bx	lr
    564c:	20001339 	.word	0x20001339

00005650 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5650:	4904      	ldr	r1, [pc, #16]	; (5664 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5652:	788a      	ldrb	r2, [r1, #2]
    5654:	4282      	cmp	r2, r0
    5656:	d903      	bls.n	5660 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5658:	4408      	add	r0, r1
    565a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    565e:	4770      	bx	lr
    5660:	2000      	movs	r0, #0
    5662:	4770      	bx	lr
    5664:	20001166 	.word	0x20001166

00005668 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5668:	4904      	ldr	r1, [pc, #16]	; (567c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    566a:	788a      	ldrb	r2, [r1, #2]
    566c:	4282      	cmp	r2, r0
    566e:	d903      	bls.n	5678 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5670:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5674:	3083      	adds	r0, #131	; 0x83
    5676:	4770      	bx	lr
    5678:	2000      	movs	r0, #0
    567a:	4770      	bx	lr
    567c:	20001166 	.word	0x20001166

00005680 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5680:	4a05      	ldr	r2, [pc, #20]	; (5698 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5682:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5686:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    568a:	6802      	ldr	r2, [r0, #0]
    568c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5690:	8880      	ldrh	r0, [r0, #4]
    5692:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5696:	4770      	bx	lr
    5698:	20001166 	.word	0x20001166

0000569c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    569c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56a0:	460e      	mov	r6, r1
    56a2:	4607      	mov	r7, r0
    56a4:	4615      	mov	r5, r2
    56a6:	2106      	movs	r1, #6
    56a8:	4630      	mov	r0, r6
    56aa:	f007 fd47 	bl	d13c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    56ae:	4c0d      	ldr	r4, [pc, #52]	; (56e4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    56b0:	b160      	cbz	r0, 56cc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    56b2:	2000      	movs	r0, #0
    56b4:	e004      	b.n	56c0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    56b6:	1821      	adds	r1, r4, r0
    56b8:	1c40      	adds	r0, r0, #1
    56ba:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    56be:	b2c0      	uxtb	r0, r0
    56c0:	78a1      	ldrb	r1, [r4, #2]
    56c2:	4281      	cmp	r1, r0
    56c4:	d8f7      	bhi.n	56b6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    56c6:	2001      	movs	r0, #1
    56c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56cc:	4631      	mov	r1, r6
    56ce:	4638      	mov	r0, r7
    56d0:	f007 fb54 	bl	cd7c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    56d4:	2808      	cmp	r0, #8
    56d6:	d003      	beq.n	56e0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    56d8:	4420      	add	r0, r4
    56da:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    56de:	e7f2      	b.n	56c6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    56e0:	2000      	movs	r0, #0
    56e2:	e7f1      	b.n	56c8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    56e4:	20001166 	.word	0x20001166

000056e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    56e8:	4904      	ldr	r1, [pc, #16]	; (56fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    56ea:	788a      	ldrb	r2, [r1, #2]
    56ec:	4282      	cmp	r2, r0
    56ee:	d903      	bls.n	56f8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    56f0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    56f4:	1cc0      	adds	r0, r0, #3
    56f6:	4770      	bx	lr
    56f8:	2000      	movs	r0, #0
    56fa:	4770      	bx	lr
    56fc:	20001166 	.word	0x20001166

00005700 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5700:	b510      	push	{r4, lr}
    5702:	f240 12d3 	movw	r2, #467	; 0x1d3
    5706:	2100      	movs	r1, #0
    5708:	4808      	ldr	r0, [pc, #32]	; (572c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    570a:	f006 f9b1 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    570e:	2208      	movs	r2, #8
    5710:	21ff      	movs	r1, #255	; 0xff
    5712:	4807      	ldr	r0, [pc, #28]	; (5730 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5714:	f006 f9ac 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5718:	4805      	ldr	r0, [pc, #20]	; (5730 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    571a:	2100      	movs	r1, #0
    571c:	1f00      	subs	r0, r0, #4
    571e:	7001      	strb	r1, [r0, #0]
    5720:	7041      	strb	r1, [r0, #1]
    5722:	f44f 7161 	mov.w	r1, #900	; 0x384
    5726:	8041      	strh	r1, [r0, #2]
    5728:	bd10      	pop	{r4, pc}
    572a:	0000      	.short	0x0000
    572c:	20001166 	.word	0x20001166
    5730:	20000280 	.word	0x20000280

00005734 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5734:	4901      	ldr	r1, [pc, #4]	; (573c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5736:	7008      	strb	r0, [r1, #0]
    5738:	4770      	bx	lr
    573a:	0000      	.short	0x0000
    573c:	2000027c 	.word	0x2000027c

00005740 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5740:	4801      	ldr	r0, [pc, #4]	; (5748 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5742:	7800      	ldrb	r0, [r0, #0]
    5744:	4770      	bx	lr
    5746:	0000      	.short	0x0000
    5748:	2000027c 	.word	0x2000027c

0000574c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    574c:	4b0b      	ldr	r3, [pc, #44]	; (577c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    574e:	b510      	push	{r4, lr}
    5750:	789c      	ldrb	r4, [r3, #2]
    5752:	4284      	cmp	r4, r0
    5754:	d90f      	bls.n	5776 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5756:	4418      	add	r0, r3
    5758:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    575c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5760:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5764:	700b      	strb	r3, [r1, #0]
    5766:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    576a:	6011      	str	r1, [r2, #0]
    576c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5770:	8090      	strh	r0, [r2, #4]
    5772:	2001      	movs	r0, #1
    5774:	bd10      	pop	{r4, pc}
    5776:	2000      	movs	r0, #0
    5778:	bd10      	pop	{r4, pc}
    577a:	0000      	.short	0x0000
    577c:	20001166 	.word	0x20001166

00005780 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5780:	4907      	ldr	r1, [pc, #28]	; (57a0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5782:	788a      	ldrb	r2, [r1, #2]
    5784:	4282      	cmp	r2, r0
    5786:	d909      	bls.n	579c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5788:	4408      	add	r0, r1
    578a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    578e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5792:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5796:	f000 0001 	and.w	r0, r0, #1
    579a:	4770      	bx	lr
    579c:	2000      	movs	r0, #0
    579e:	4770      	bx	lr
    57a0:	20001166 	.word	0x20001166

000057a4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    57a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57a8:	4698      	mov	r8, r3
    57aa:	4691      	mov	r9, r2
    57ac:	460c      	mov	r4, r1
    57ae:	4605      	mov	r5, r0
    57b0:	f000 f936 	bl	5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    57b4:	4606      	mov	r6, r0
    57b6:	2810      	cmp	r0, #16
    57b8:	d006      	beq.n	57c8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    57ba:	f000 f901 	bl	59c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    57be:	2810      	cmp	r0, #16
    57c0:	d002      	beq.n	57c8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    57c2:	2012      	movs	r0, #18
    57c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57c8:	4f18      	ldr	r7, [pc, #96]	; (582c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    57ca:	78b8      	ldrb	r0, [r7, #2]
    57cc:	2808      	cmp	r0, #8
    57ce:	d22a      	bcs.n	5826 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    57d0:	2e10      	cmp	r6, #16
    57d2:	d105      	bne.n	57e0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    57d4:	2200      	movs	r2, #0
    57d6:	4621      	mov	r1, r4
    57d8:	4628      	mov	r0, r5
    57da:	f000 f905 	bl	59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    57de:	4606      	mov	r6, r0
    57e0:	78bc      	ldrb	r4, [r7, #2]
    57e2:	2210      	movs	r2, #16
    57e4:	1c60      	adds	r0, r4, #1
    57e6:	70b8      	strb	r0, [r7, #2]
    57e8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    57ec:	1ce8      	adds	r0, r5, #3
    57ee:	4649      	mov	r1, r9
    57f0:	f007 fc0d 	bl	d00e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    57f4:	f105 0083 	add.w	r0, r5, #131	; 0x83
    57f8:	2210      	movs	r2, #16
    57fa:	4641      	mov	r1, r8
    57fc:	f007 fc07 	bl	d00e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5800:	2110      	movs	r1, #16
    5802:	4640      	mov	r0, r8
    5804:	f007 fc9a 	bl	d13c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5808:	443c      	add	r4, r7
    580a:	2110      	movs	r1, #16
    580c:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5810:	4648      	mov	r0, r9
    5812:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5816:	f007 fc91 	bl	d13c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    581a:	77e0      	strb	r0, [r4, #31]
    581c:	f804 6c29 	strb.w	r6, [r4, #-41]
    5820:	2000      	movs	r0, #0
    5822:	73e0      	strb	r0, [r4, #15]
    5824:	e7ce      	b.n	57c4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5826:	2007      	movs	r0, #7
    5828:	e7cc      	b.n	57c4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    582a:	0000      	.short	0x0000
    582c:	20001166 	.word	0x20001166

00005830 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5830:	4806      	ldr	r0, [pc, #24]	; (584c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5832:	b510      	push	{r4, lr}
    5834:	7880      	ldrb	r0, [r0, #2]
    5836:	1e40      	subs	r0, r0, #1
    5838:	b244      	sxtb	r4, r0
    583a:	e004      	b.n	5846 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    583c:	b2e0      	uxtb	r0, r4
    583e:	f000 f937 	bl	5ab0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    5842:	1e64      	subs	r4, r4, #1
    5844:	b264      	sxtb	r4, r4
    5846:	2c00      	cmp	r4, #0
    5848:	daf8      	bge.n	583c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    584a:	bd10      	pop	{r4, pc}
    584c:	20001166 	.word	0x20001166

00005850 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5850:	4801      	ldr	r0, [pc, #4]	; (5858 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5852:	8840      	ldrh	r0, [r0, #2]
    5854:	4770      	bx	lr
    5856:	0000      	.short	0x0000
    5858:	2000027c 	.word	0x2000027c

0000585c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    585c:	b138      	cbz	r0, 586e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    585e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5862:	4288      	cmp	r0, r1
    5864:	d803      	bhi.n	586e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5866:	4903      	ldr	r1, [pc, #12]	; (5874 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5868:	8048      	strh	r0, [r1, #2]
    586a:	2001      	movs	r0, #1
    586c:	4770      	bx	lr
    586e:	2000      	movs	r0, #0
    5870:	4770      	bx	lr
    5872:	0000      	.short	0x0000
    5874:	2000027c 	.word	0x2000027c

00005878 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5878:	4905      	ldr	r1, [pc, #20]	; (5890 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    587a:	788a      	ldrb	r2, [r1, #2]
    587c:	4282      	cmp	r2, r0
    587e:	d903      	bls.n	5888 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5880:	4408      	add	r0, r1
    5882:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5886:	b108      	cbz	r0, 588c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5888:	2000      	movs	r0, #0
    588a:	4770      	bx	lr
    588c:	2001      	movs	r0, #1
    588e:	4770      	bx	lr
    5890:	20001166 	.word	0x20001166

00005894 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5894:	b570      	push	{r4, r5, r6, lr}
    5896:	460d      	mov	r5, r1
    5898:	4606      	mov	r6, r0
    589a:	f000 f8c1 	bl	5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    589e:	4c10      	ldr	r4, [pc, #64]	; (58e0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    58a0:	2810      	cmp	r0, #16
    58a2:	d007      	beq.n	58b4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    58a4:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    58a8:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    58ac:	07c9      	lsls	r1, r1, #31
    58ae:	d001      	beq.n	58b4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    58b0:	2001      	movs	r0, #1
    58b2:	bd70      	pop	{r4, r5, r6, pc}
    58b4:	7861      	ldrb	r1, [r4, #1]
    58b6:	2908      	cmp	r1, #8
    58b8:	d210      	bcs.n	58dc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    58ba:	2810      	cmp	r0, #16
    58bc:	d008      	beq.n	58d0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    58be:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    58c2:	2101      	movs	r1, #1
    58c4:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    58c8:	7860      	ldrb	r0, [r4, #1]
    58ca:	1c40      	adds	r0, r0, #1
    58cc:	7060      	strb	r0, [r4, #1]
    58ce:	e7ef      	b.n	58b0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    58d0:	2201      	movs	r2, #1
    58d2:	4629      	mov	r1, r5
    58d4:	4630      	mov	r0, r6
    58d6:	f000 f887 	bl	59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    58da:	e7f5      	b.n	58c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    58dc:	2000      	movs	r0, #0
    58de:	bd70      	pop	{r4, r5, r6, pc}
    58e0:	20001166 	.word	0x20001166

000058e4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    58e4:	b570      	push	{r4, r5, r6, lr}
    58e6:	4d0b      	ldr	r5, [pc, #44]	; (5914 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    58e8:	7828      	ldrb	r0, [r5, #0]
    58ea:	1e40      	subs	r0, r0, #1
    58ec:	b244      	sxtb	r4, r0
    58ee:	e00a      	b.n	5906 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    58f0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    58f4:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    58f8:	07c0      	lsls	r0, r0, #31
    58fa:	d002      	beq.n	5902 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    58fc:	b2e0      	uxtb	r0, r4
    58fe:	f000 f91f 	bl	5b40 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    5902:	1e64      	subs	r4, r4, #1
    5904:	b264      	sxtb	r4, r4
    5906:	2c00      	cmp	r4, #0
    5908:	daf2      	bge.n	58f0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    590a:	4903      	ldr	r1, [pc, #12]	; (5918 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    590c:	2000      	movs	r0, #0
    590e:	7048      	strb	r0, [r1, #1]
    5910:	bd70      	pop	{r4, r5, r6, pc}
    5912:	0000      	.short	0x0000
    5914:	20001166 	.word	0x20001166
    5918:	2000027c 	.word	0x2000027c

0000591c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    591c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5920:	2400      	movs	r4, #0
    5922:	4625      	mov	r5, r4
    5924:	4e18      	ldr	r6, [pc, #96]	; (5988 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5926:	e029      	b.n	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5928:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    592c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5930:	07c0      	lsls	r0, r0, #31
    5932:	d021      	beq.n	5978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5934:	4628      	mov	r0, r5
    5936:	f000 f843 	bl	59c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    593a:	4603      	mov	r3, r0
    593c:	f7ff fed4 	bl	56e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5940:	4601      	mov	r1, r0
    5942:	2000      	movs	r0, #0
    5944:	2b10      	cmp	r3, #16
    5946:	d009      	beq.n	595c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5948:	18f2      	adds	r2, r6, r3
    594a:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    594e:	f1bc 0f01 	cmp.w	ip, #1
    5952:	d002      	beq.n	595a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5954:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5958:	b102      	cbz	r2, 595c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    595a:	2001      	movs	r0, #1
    595c:	1e40      	subs	r0, r0, #1
    595e:	4201      	tst	r1, r0
    5960:	d10a      	bne.n	5978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5962:	480a      	ldr	r0, [pc, #40]	; (598c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5964:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5968:	5503      	strb	r3, [r0, r4]
    596a:	4620      	mov	r0, r4
    596c:	1c64      	adds	r4, r4, #1
    596e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5972:	b2e4      	uxtb	r4, r4
    5974:	f005 fbcc 	bl	b110 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5978:	1c6d      	adds	r5, r5, #1
    597a:	b2ed      	uxtb	r5, r5
    597c:	7830      	ldrb	r0, [r6, #0]
    597e:	42a8      	cmp	r0, r5
    5980:	d8d2      	bhi.n	5928 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5986:	0000      	.short	0x0000
    5988:	20001166 	.word	0x20001166
    598c:	20000280 	.word	0x20000280
    5990:	4602      	mov	r2, r0
    5992:	4809      	ldr	r0, [pc, #36]	; (59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5994:	b510      	push	{r4, lr}
    5996:	7800      	ldrb	r0, [r0, #0]
    5998:	460b      	mov	r3, r1
    599a:	b158      	cbz	r0, 59b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    599c:	4807      	ldr	r0, [pc, #28]	; (59bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    599e:	7881      	ldrb	r1, [r0, #2]
    59a0:	b141      	cbz	r1, 59b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    59a2:	b10b      	cbz	r3, 59a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    59a4:	1cc0      	adds	r0, r0, #3
    59a6:	e001      	b.n	59ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    59a8:	4804      	ldr	r0, [pc, #16]	; (59bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    59aa:	3083      	adds	r0, #131	; 0x83
    59ac:	f004 fcfa 	bl	a3a4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    59b0:	2001      	movs	r0, #1
    59b2:	bd10      	pop	{r4, pc}
    59b4:	2000      	movs	r0, #0
    59b6:	bd10      	pop	{r4, pc}
    59b8:	2000027c 	.word	0x2000027c
    59bc:	20001166 	.word	0x20001166
    59c0:	4908      	ldr	r1, [pc, #32]	; (59e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    59c2:	b510      	push	{r4, lr}
    59c4:	4603      	mov	r3, r0
    59c6:	2000      	movs	r0, #0
    59c8:	788a      	ldrb	r2, [r1, #2]
    59ca:	e006      	b.n	59da <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    59cc:	180c      	adds	r4, r1, r0
    59ce:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    59d2:	429c      	cmp	r4, r3
    59d4:	d004      	beq.n	59e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    59d6:	1c40      	adds	r0, r0, #1
    59d8:	b2c0      	uxtb	r0, r0
    59da:	4282      	cmp	r2, r0
    59dc:	d8f6      	bhi.n	59cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    59de:	2010      	movs	r0, #16
    59e0:	bd10      	pop	{r4, pc}
    59e2:	0000      	.short	0x0000
    59e4:	20001166 	.word	0x20001166
    59e8:	b570      	push	{r4, r5, r6, lr}
    59ea:	4b0c      	ldr	r3, [pc, #48]	; (5a1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    59ec:	4604      	mov	r4, r0
    59ee:	7818      	ldrb	r0, [r3, #0]
    59f0:	1c45      	adds	r5, r0, #1
    59f2:	701d      	strb	r5, [r3, #0]
    59f4:	2810      	cmp	r0, #16
    59f6:	d303      	bcc.n	5a00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    59f8:	2146      	movs	r1, #70	; 0x46
    59fa:	2028      	movs	r0, #40	; 0x28
    59fc:	f7fe f970 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a00:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5a04:	680d      	ldr	r5, [r1, #0]
    5a06:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5a0a:	8889      	ldrh	r1, [r1, #4]
    5a0c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5a10:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5a14:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5a18:	bd70      	pop	{r4, r5, r6, pc}
    5a1a:	0000      	.short	0x0000
    5a1c:	20001166 	.word	0x20001166
    5a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a24:	460f      	mov	r7, r1
    5a26:	4606      	mov	r6, r0
    5a28:	2400      	movs	r4, #0
    5a2a:	4d0d      	ldr	r5, [pc, #52]	; (5a60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5a2c:	e00f      	b.n	5a4e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5a2e:	bf00      	nop
    5a30:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5a34:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5a38:	42b1      	cmp	r1, r6
    5a3a:	d106      	bne.n	5a4a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5a3c:	2206      	movs	r2, #6
    5a3e:	4639      	mov	r1, r7
    5a40:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5a44:	f005 ff88 	bl	b958 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5a48:	b138      	cbz	r0, 5a5a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5a4a:	1c64      	adds	r4, r4, #1
    5a4c:	b2e4      	uxtb	r4, r4
    5a4e:	7828      	ldrb	r0, [r5, #0]
    5a50:	42a0      	cmp	r0, r4
    5a52:	d8ed      	bhi.n	5a30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5a54:	2010      	movs	r0, #16
    5a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a5a:	4620      	mov	r0, r4
    5a5c:	e7fb      	b.n	5a56 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5a5e:	0000      	.short	0x0000
    5a60:	20001166 	.word	0x20001166
    5a64:	b570      	push	{r4, r5, r6, lr}
    5a66:	4605      	mov	r5, r0
    5a68:	f7ff ffaa 	bl	59c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a6c:	2810      	cmp	r0, #16
    5a6e:	d11c      	bne.n	5aaa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a70:	4c0e      	ldr	r4, [pc, #56]	; (5aac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5a72:	7820      	ldrb	r0, [r4, #0]
    5a74:	1e40      	subs	r0, r0, #1
    5a76:	b2c0      	uxtb	r0, r0
    5a78:	7020      	strb	r0, [r4, #0]
    5a7a:	42a8      	cmp	r0, r5
    5a7c:	d015      	beq.n	5aaa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a7e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5a82:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5a86:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5a8a:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5a8e:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5a92:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5a96:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5a9a:	7820      	ldrb	r0, [r4, #0]
    5a9c:	f7ff ff90 	bl	59c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5aa0:	2810      	cmp	r0, #16
    5aa2:	d002      	beq.n	5aaa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5aa4:	4420      	add	r0, r4
    5aa6:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5aaa:	bd70      	pop	{r4, r5, r6, pc}
    5aac:	20001166 	.word	0x20001166
    5ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ab4:	4c21      	ldr	r4, [pc, #132]	; (5b3c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5ab6:	4606      	mov	r6, r0
    5ab8:	19a7      	adds	r7, r4, r6
    5aba:	78a0      	ldrb	r0, [r4, #2]
    5abc:	1e40      	subs	r0, r0, #1
    5abe:	b2c5      	uxtb	r5, r0
    5ac0:	70a5      	strb	r5, [r4, #2]
    5ac2:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5ac6:	42ae      	cmp	r6, r5
    5ac8:	d02a      	beq.n	5b20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5aca:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5ace:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5ad2:	f10a 0103 	add.w	r1, sl, #3
    5ad6:	f109 0003 	add.w	r0, r9, #3
    5ada:	2210      	movs	r2, #16
    5adc:	f005 ff4e 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5ae0:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5ae4:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5ae8:	2210      	movs	r2, #16
    5aea:	f005 ff47 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5aee:	1960      	adds	r0, r4, r5
    5af0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5af4:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5af8:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5afc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5b00:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5b04:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5b08:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5b0c:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5b10:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5b14:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5b18:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5b1c:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5b20:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5b24:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5b28:	07c0      	lsls	r0, r0, #31
    5b2a:	d104      	bne.n	5b36 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5b2c:	4640      	mov	r0, r8
    5b2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b32:	f7ff bf97 	b.w	5a64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b3a:	0000      	.short	0x0000
    5b3c:	20001166 	.word	0x20001166
    5b40:	4905      	ldr	r1, [pc, #20]	; (5b58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5b42:	784a      	ldrb	r2, [r1, #1]
    5b44:	1e52      	subs	r2, r2, #1
    5b46:	704a      	strb	r2, [r1, #1]
    5b48:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5b4c:	2200      	movs	r2, #0
    5b4e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5b52:	f7ff bf87 	b.w	5a64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5b56:	0000      	.short	0x0000
    5b58:	20001166 	.word	0x20001166

00005b5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b60:	4604      	mov	r4, r0
    5b62:	f100 0570 	add.w	r5, r0, #112	; 0x70
    5b66:	f04f 0901 	mov.w	r9, #1
    5b6a:	b171      	cbz	r1, 5b8a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    5b6c:	f104 0786 	add.w	r7, r4, #134	; 0x86
    5b70:	1e7e      	subs	r6, r7, #1
    5b72:	2901      	cmp	r1, #1
    5b74:	d021      	beq.n	5bba <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    5b76:	2902      	cmp	r1, #2
    5b78:	d046      	beq.n	5c08 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    5b7a:	2903      	cmp	r1, #3
    5b7c:	d11b      	bne.n	5bb6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5b7e:	4639      	mov	r1, r7
    5b80:	4630      	mov	r0, r6
    5b82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b86:	f007 bb09 	b.w	d19c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5b8a:	f44f 7206 	mov.w	r2, #536	; 0x218
    5b8e:	2100      	movs	r1, #0
    5b90:	f005 ff6e 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b94:	f004 fbdc 	bl	a350 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5b98:	f644 112b 	movw	r1, #18731	; 0x492b
    5b9c:	4008      	ands	r0, r1
    5b9e:	f885 9015 	strb.w	r9, [r5, #21]
    5ba2:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    5ba6:	0a00      	lsrs	r0, r0, #8
    5ba8:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    5bac:	20fe      	movs	r0, #254	; 0xfe
    5bae:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    5bb2:	207f      	movs	r0, #127	; 0x7f
    5bb4:	7268      	strb	r0, [r5, #9]
    5bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bba:	f04f 0800 	mov.w	r8, #0
    5bbe:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
    5bc2:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
    5bc6:	68e1      	ldr	r1, [r4, #12]
    5bc8:	4814      	ldr	r0, [pc, #80]	; (5c1c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    5bca:	460a      	mov	r2, r1
    5bcc:	4408      	add	r0, r1
    5bce:	fbb0 f0f1 	udiv	r0, r0, r1
    5bd2:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    5bd6:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5bda:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    5bde:	8ae3      	ldrh	r3, [r4, #22]
    5be0:	4628      	mov	r0, r5
    5be2:	f000 f81d 	bl	5c20 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5be6:	4639      	mov	r1, r7
    5be8:	4630      	mov	r0, r6
    5bea:	f007 fad7 	bl	d19c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5bee:	f005 fe8f 	bl	b910 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5bf2:	b118      	cbz	r0, 5bfc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    5bf4:	6920      	ldr	r0, [r4, #16]
    5bf6:	f000 fb65 	bl	62c4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    5bfa:	b110      	cbz	r0, 5c02 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    5bfc:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    5c00:	e7d9      	b.n	5bb6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5c02:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    5c06:	e7d6      	b.n	5bb6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5c08:	68c1      	ldr	r1, [r0, #12]
    5c0a:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
    5c0e:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    5c12:	4628      	mov	r0, r5
    5c14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c18:	f000 b802 	b.w	5c20 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5c1c:	01c9c37f 	.word	0x01c9c37f
    5c20:	b530      	push	{r4, r5, lr}
    5c22:	2400      	movs	r4, #0
    5c24:	8684      	strh	r4, [r0, #52]	; 0x34
    5c26:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    5c28:	4d13      	ldr	r5, [pc, #76]	; (5c78 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    5c2a:	434c      	muls	r4, r1
    5c2c:	fbb4 f4f2 	udiv	r4, r4, r2
    5c30:	8704      	strh	r4, [r0, #56]	; 0x38
    5c32:	f242 7410 	movw	r4, #10000	; 0x2710
    5c36:	4363      	muls	r3, r4
    5c38:	fbb3 f3f2 	udiv	r3, r3, r2
    5c3c:	1c5b      	adds	r3, r3, #1
    5c3e:	b29b      	uxth	r3, r3
    5c40:	fb03 f402 	mul.w	r4, r3, r2
    5c44:	86c3      	strh	r3, [r0, #54]	; 0x36
    5c46:	42ac      	cmp	r4, r5
    5c48:	d901      	bls.n	5c4e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    5c4a:	1e5b      	subs	r3, r3, #1
    5c4c:	86c3      	strh	r3, [r0, #54]	; 0x36
    5c4e:	4b0b      	ldr	r3, [pc, #44]	; (5c7c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    5c50:	f240 2471 	movw	r4, #625	; 0x271
    5c54:	fbb3 f3f2 	udiv	r3, r3, r2
    5c58:	1c5b      	adds	r3, r3, #1
    5c5a:	8783      	strh	r3, [r0, #60]	; 0x3c
    5c5c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5c5e:	4363      	muls	r3, r4
    5c60:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5c64:	1e5b      	subs	r3, r3, #1
    5c66:	fbb3 f3f2 	udiv	r3, r3, r2
    5c6a:	62c3      	str	r3, [r0, #44]	; 0x2c
    5c6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5c6e:	434b      	muls	r3, r1
    5c70:	fbb3 f1f2 	udiv	r1, r3, r2
    5c74:	6281      	str	r1, [r0, #40]	; 0x28
    5c76:	bd30      	pop	{r4, r5, pc}
    5c78:	01e84800 	.word	0x01e84800
    5c7c:	02625a00 	.word	0x02625a00

00005c80 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5c80:	b570      	push	{r4, r5, r6, lr}
    5c82:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5c86:	b28b      	uxth	r3, r1
    5c88:	7ac5      	ldrb	r5, [r0, #11]
    5c8a:	ea83 0102 	eor.w	r1, r3, r2
    5c8e:	2200      	movs	r2, #0
    5c90:	b2cc      	uxtb	r4, r1
    5c92:	0a09      	lsrs	r1, r1, #8
    5c94:	fa94 f4a4 	rbit	r4, r4
    5c98:	fa91 f1a1 	rbit	r1, r1
    5c9c:	0e24      	lsrs	r4, r4, #24
    5c9e:	0e09      	lsrs	r1, r1, #24
    5ca0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5ca4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5ca8:	1c52      	adds	r2, r2, #1
    5caa:	4419      	add	r1, r3
    5cac:	b2d2      	uxtb	r2, r2
    5cae:	b289      	uxth	r1, r1
    5cb0:	2a03      	cmp	r2, #3
    5cb2:	d3ed      	bcc.n	5c90 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5cb4:	4059      	eors	r1, r3
    5cb6:	2225      	movs	r2, #37	; 0x25
    5cb8:	fbb1 f3f2 	udiv	r3, r1, r2
    5cbc:	fb02 1213 	mls	r2, r2, r3, r1
    5cc0:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5cc4:	f002 0607 	and.w	r6, r2, #7
    5cc8:	785b      	ldrb	r3, [r3, #1]
    5cca:	2401      	movs	r4, #1
    5ccc:	fa04 f606 	lsl.w	r6, r4, r6
    5cd0:	4233      	tst	r3, r6
    5cd2:	d001      	beq.n	5cd8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5cd4:	4610      	mov	r0, r2
    5cd6:	bd70      	pop	{r4, r5, r6, pc}
    5cd8:	434d      	muls	r5, r1
    5cda:	0c29      	lsrs	r1, r5, #16
    5cdc:	1c49      	adds	r1, r1, #1
    5cde:	b2c9      	uxtb	r1, r1
    5ce0:	2200      	movs	r2, #0
    5ce2:	1885      	adds	r5, r0, r2
    5ce4:	79ab      	ldrb	r3, [r5, #6]
    5ce6:	428b      	cmp	r3, r1
    5ce8:	d312      	bcc.n	5d10 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5cea:	f895 5001 	ldrb.w	r5, [r5, #1]
    5cee:	2300      	movs	r3, #0
    5cf0:	fa04 f603 	lsl.w	r6, r4, r3
    5cf4:	4235      	tst	r5, r6
    5cf6:	d001      	beq.n	5cfc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5cf8:	1e49      	subs	r1, r1, #1
    5cfa:	b2c9      	uxtb	r1, r1
    5cfc:	b121      	cbz	r1, 5d08 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5cfe:	1c5b      	adds	r3, r3, #1
    5d00:	b2db      	uxtb	r3, r3
    5d02:	2b08      	cmp	r3, #8
    5d04:	d3f4      	bcc.n	5cf0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5d06:	e005      	b.n	5d14 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5d08:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5d0c:	b2c0      	uxtb	r0, r0
    5d0e:	bd70      	pop	{r4, r5, r6, pc}
    5d10:	1ac9      	subs	r1, r1, r3
    5d12:	b2c9      	uxtb	r1, r1
    5d14:	1c52      	adds	r2, r2, #1
    5d16:	b2d2      	uxtb	r2, r2
    5d18:	2a05      	cmp	r2, #5
    5d1a:	d3e2      	bcc.n	5ce2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5d1c:	f240 110d 	movw	r1, #269	; 0x10d
    5d20:	2046      	movs	r0, #70	; 0x46
    5d22:	f7fd ffdd 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d26:	0000      	movs	r0, r0
    5d28:	b570      	push	{r4, r5, r6, lr}
    5d2a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5d2e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5d32:	2401      	movs	r4, #1
    5d34:	fb03 2101 	mla	r1, r3, r1, r2
    5d38:	2225      	movs	r2, #37	; 0x25
    5d3a:	fbb1 f3f2 	udiv	r3, r1, r2
    5d3e:	fb02 1113 	mls	r1, r2, r3, r1
    5d42:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5d46:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5d4a:	f001 0307 	and.w	r3, r1, #7
    5d4e:	7d92      	ldrb	r2, [r2, #22]
    5d50:	fa04 f303 	lsl.w	r3, r4, r3
    5d54:	421a      	tst	r2, r3
    5d56:	d003      	beq.n	5d60 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5d58:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5d5c:	2000      	movs	r0, #0
    5d5e:	bd70      	pop	{r4, r5, r6, pc}
    5d60:	f890 2020 	ldrb.w	r2, [r0, #32]
    5d64:	fbb1 f3f2 	udiv	r3, r1, r2
    5d68:	fb02 1113 	mls	r1, r2, r3, r1
    5d6c:	1c49      	adds	r1, r1, #1
    5d6e:	b2c9      	uxtb	r1, r1
    5d70:	2300      	movs	r3, #0
    5d72:	18c5      	adds	r5, r0, r3
    5d74:	7eea      	ldrb	r2, [r5, #27]
    5d76:	428a      	cmp	r2, r1
    5d78:	d311      	bcc.n	5d9e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5d7a:	f895 5016 	ldrb.w	r5, [r5, #22]
    5d7e:	2200      	movs	r2, #0
    5d80:	fa04 f602 	lsl.w	r6, r4, r2
    5d84:	4235      	tst	r5, r6
    5d86:	d001      	beq.n	5d8c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5d88:	1e49      	subs	r1, r1, #1
    5d8a:	b2c9      	uxtb	r1, r1
    5d8c:	b121      	cbz	r1, 5d98 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5d8e:	1c52      	adds	r2, r2, #1
    5d90:	b2d2      	uxtb	r2, r2
    5d92:	2a08      	cmp	r2, #8
    5d94:	d3f4      	bcc.n	5d80 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5d96:	e004      	b.n	5da2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5d98:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5d9c:	e7dc      	b.n	5d58 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5d9e:	1a89      	subs	r1, r1, r2
    5da0:	b2c9      	uxtb	r1, r1
    5da2:	1c5b      	adds	r3, r3, #1
    5da4:	b2db      	uxtb	r3, r3
    5da6:	2b05      	cmp	r3, #5
    5da8:	d3e3      	bcc.n	5d72 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5daa:	201f      	movs	r0, #31
    5dac:	bd70      	pop	{r4, r5, r6, pc}
	...

00005db0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5db0:	7841      	ldrb	r1, [r0, #1]
    5db2:	b141      	cbz	r1, 5dc6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5db4:	78c0      	ldrb	r0, [r0, #3]
    5db6:	2819      	cmp	r0, #25
    5db8:	d203      	bcs.n	5dc2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5dba:	4a04      	ldr	r2, [pc, #16]	; (5dcc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5dbc:	5c10      	ldrb	r0, [r2, r0]
    5dbe:	4288      	cmp	r0, r1
    5dc0:	d101      	bne.n	5dc6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5dc2:	2001      	movs	r0, #1
    5dc4:	4770      	bx	lr
    5dc6:	2000      	movs	r0, #0
    5dc8:	4770      	bx	lr
    5dca:	0000      	.short	0x0000
    5dcc:	0000f852 	.word	0x0000f852

00005dd0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5dd0:	b50c      	push	{r2, r3, lr}
    5dd2:	a20b      	add	r2, pc, #44	; (adr r2, 5e00 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5dd4:	e9d2 1200 	ldrd	r1, r2, [r2]
    5dd8:	e9cd 1200 	strd	r1, r2, [sp]
    5ddc:	7901      	ldrb	r1, [r0, #4]
    5dde:	7940      	ldrb	r0, [r0, #5]
    5de0:	f001 0207 	and.w	r2, r1, #7
    5de4:	4669      	mov	r1, sp
    5de6:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5dea:	2a01      	cmp	r2, #1
    5dec:	d804      	bhi.n	5df8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5dee:	f000 0007 	and.w	r0, r0, #7
    5df2:	5c08      	ldrb	r0, [r1, r0]
    5df4:	2801      	cmp	r0, #1
    5df6:	d901      	bls.n	5dfc <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5df8:	2000      	movs	r0, #0
    5dfa:	bd0c      	pop	{r2, r3, pc}
    5dfc:	2001      	movs	r0, #1
    5dfe:	bd0c      	pop	{r2, r3, pc}
    5e00:	02010100 	.word	0x02010100
    5e04:	03020201 	.word	0x03020201

00005e08 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5e08:	b510      	push	{r4, lr}
    5e0a:	2201      	movs	r2, #1
    5e0c:	70c1      	strb	r1, [r0, #3]
    5e0e:	2919      	cmp	r1, #25
    5e10:	d202      	bcs.n	5e18 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5e12:	4a06      	ldr	r2, [pc, #24]	; (5e2c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5e14:	5c52      	ldrb	r2, [r2, r1]
    5e16:	e006      	b.n	5e26 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5e18:	29ff      	cmp	r1, #255	; 0xff
    5e1a:	d004      	beq.n	5e26 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5e1c:	f240 31d5 	movw	r1, #981	; 0x3d5
    5e20:	202a      	movs	r0, #42	; 0x2a
    5e22:	f7fd ff5d 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e26:	7042      	strb	r2, [r0, #1]
    5e28:	bd10      	pop	{r4, pc}
    5e2a:	0000      	.short	0x0000
    5e2c:	0000f852 	.word	0x0000f852

00005e30 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e34:	4c12      	ldr	r4, [pc, #72]	; (5e80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e36:	4607      	mov	r7, r0
    5e38:	460e      	mov	r6, r1
    5e3a:	7da0      	ldrb	r0, [r4, #22]
    5e3c:	b110      	cbz	r0, 5e44 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5e3e:	8b20      	ldrh	r0, [r4, #24]
    5e40:	2800      	cmp	r0, #0
    5e42:	d012      	beq.n	5e6a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e44:	480e      	ldr	r0, [pc, #56]	; (5e80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e46:	3014      	adds	r0, #20
    5e48:	4680      	mov	r8, r0
    5e4a:	f007 fb51 	bl	d4f0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e4e:	b9a8      	cbnz	r0, 5e7c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e50:	8aa5      	ldrh	r5, [r4, #20]
    5e52:	8aa0      	ldrh	r0, [r4, #20]
    5e54:	4632      	mov	r2, r6
    5e56:	4639      	mov	r1, r7
    5e58:	f007 fb8e 	bl	d578 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    5e5c:	b138      	cbz	r0, 5e6e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5e5e:	7da0      	ldrb	r0, [r4, #22]
    5e60:	b110      	cbz	r0, 5e68 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5e62:	8b20      	ldrh	r0, [r4, #24]
    5e64:	1e40      	subs	r0, r0, #1
    5e66:	8320      	strh	r0, [r4, #24]
    5e68:	2001      	movs	r0, #1
    5e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e6e:	4640      	mov	r0, r8
    5e70:	f007 fb3e 	bl	d4f0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e74:	b910      	cbnz	r0, 5e7c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e76:	8aa0      	ldrh	r0, [r4, #20]
    5e78:	42a8      	cmp	r0, r5
    5e7a:	d1ea      	bne.n	5e52 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5e7c:	2000      	movs	r0, #0
    5e7e:	e7f4      	b.n	5e6a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e80:	20000ec0 	.word	0x20000ec0
    5e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5e88:	468a      	mov	sl, r1
    5e8a:	4699      	mov	r9, r3
    5e8c:	4615      	mov	r5, r2
    5e8e:	4604      	mov	r4, r0
    5e90:	a901      	add	r1, sp, #4
    5e92:	f006 ffb6 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5e96:	bbe0      	cbnz	r0, 5f12 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    5e98:	9f02      	ldr	r7, [sp, #8]
    5e9a:	f04f 0800 	mov.w	r8, #0
    5e9e:	3770      	adds	r7, #112	; 0x70
    5ea0:	b18d      	cbz	r5, 5ec6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    5ea2:	4620      	mov	r0, r4
    5ea4:	f7fe fb4c 	bl	4540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5ea8:	0004      	movs	r4, r0
    5eaa:	d00f      	beq.n	5ecc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    5eac:	4629      	mov	r1, r5
    5eae:	f006 fbb8 	bl	c622 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    5eb2:	0006      	movs	r6, r0
    5eb4:	d003      	beq.n	5ebe <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    5eb6:	481d      	ldr	r0, [pc, #116]	; (5f2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    5eb8:	8840      	ldrh	r0, [r0, #2]
    5eba:	42a8      	cmp	r0, r5
    5ebc:	d208      	bcs.n	5ed0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    5ebe:	2000      	movs	r0, #0
    5ec0:	b004      	add	sp, #16
    5ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ec6:	2001      	movs	r0, #1
    5ec8:	7538      	strb	r0, [r7, #20]
    5eca:	e029      	b.n	5f20 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    5ecc:	216e      	movs	r1, #110	; 0x6e
    5ece:	e02a      	b.n	5f26 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    5ed0:	4620      	mov	r0, r4
    5ed2:	4631      	mov	r1, r6
    5ed4:	aa03      	add	r2, sp, #12
    5ed6:	f006 fb9d 	bl	c614 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    5eda:	9803      	ldr	r0, [sp, #12]
    5edc:	f8a0 8000 	strh.w	r8, [r0]
    5ee0:	f880 8002 	strb.w	r8, [r0, #2]
    5ee4:	7d39      	ldrb	r1, [r7, #20]
    5ee6:	b109      	cbz	r1, 5eec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    5ee8:	f04f 0a02 	mov.w	sl, #2
    5eec:	4651      	mov	r1, sl
    5eee:	f007 fa80 	bl	d3f2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5ef2:	4631      	mov	r1, r6
    5ef4:	2603      	movs	r6, #3
    5ef6:	4620      	mov	r0, r4
    5ef8:	464a      	mov	r2, r9
    5efa:	462b      	mov	r3, r5
    5efc:	9600      	str	r6, [sp, #0]
    5efe:	f006 fa6f 	bl	c3e0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    5f02:	4620      	mov	r0, r4
    5f04:	4629      	mov	r1, r5
    5f06:	f006 fb29 	bl	c55c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    5f0a:	b158      	cbz	r0, 5f24 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    5f0c:	4644      	mov	r4, r8
    5f0e:	a801      	add	r0, sp, #4
    5f10:	e000      	b.n	5f14 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    5f12:	e005      	b.n	5f20 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    5f14:	f007 fb0d 	bl	d532 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    5f18:	9802      	ldr	r0, [sp, #8]
    5f1a:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
    5f1e:	753c      	strb	r4, [r7, #20]
    5f20:	2001      	movs	r0, #1
    5f22:	e7cd      	b.n	5ec0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    5f24:	2184      	movs	r1, #132	; 0x84
    5f26:	202b      	movs	r0, #43	; 0x2b
    5f28:	f7fd feda 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f2c:	20000ec0 	.word	0x20000ec0

00005f30 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    5f30:	4901      	ldr	r1, [pc, #4]	; (5f38 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    5f32:	2001      	movs	r0, #1
    5f34:	7008      	strb	r0, [r1, #0]
    5f36:	4770      	bx	lr
    5f38:	20000289 	.word	0x20000289

00005f3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    5f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f40:	0006      	movs	r6, r0
    5f42:	d00a      	beq.n	5f5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    5f44:	4825      	ldr	r0, [pc, #148]	; (5fdc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    5f46:	7801      	ldrb	r1, [r0, #0]
    5f48:	b151      	cbz	r1, 5f60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    5f4a:	2100      	movs	r1, #0
    5f4c:	7071      	strb	r1, [r6, #1]
    5f4e:	2203      	movs	r2, #3
    5f50:	7032      	strb	r2, [r6, #0]
    5f52:	2201      	movs	r2, #1
    5f54:	7132      	strb	r2, [r6, #4]
    5f56:	7001      	strb	r1, [r0, #0]
    5f58:	e03a      	b.n	5fd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    5f5a:	f240 21da 	movw	r1, #730	; 0x2da
    5f5e:	e009      	b.n	5f74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    5f60:	4c1e      	ldr	r4, [pc, #120]	; (5fdc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    5f62:	1ce4      	adds	r4, r4, #3
    5f64:	7820      	ldrb	r0, [r4, #0]
    5f66:	b940      	cbnz	r0, 5f7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    5f68:	1ca0      	adds	r0, r4, #2
    5f6a:	f007 fb4e 	bl	d60a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    5f6e:	b120      	cbz	r0, 5f7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    5f70:	f240 21e9 	movw	r1, #745	; 0x2e9
    5f74:	2010      	movs	r0, #16
    5f76:	f7fd feb3 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f7a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    5f7e:	2000      	movs	r0, #0
    5f80:	f7fe f898 	bl	40b4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5f84:	4f16      	ldr	r7, [pc, #88]	; (5fe0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    5f86:	4605      	mov	r5, r0
    5f88:	6838      	ldr	r0, [r7, #0]
    5f8a:	b160      	cbz	r0, 5fa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    5f8c:	8860      	ldrh	r0, [r4, #2]
    5f8e:	42a8      	cmp	r0, r5
    5f90:	d309      	bcc.n	5fa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    5f92:	1b40      	subs	r0, r0, r5
    5f94:	b2c0      	uxtb	r0, r0
    5f96:	2101      	movs	r1, #1
    5f98:	f006 fceb 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5f9c:	b158      	cbz	r0, 5fb6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    5f9e:	4631      	mov	r1, r6
    5fa0:	f000 f84e 	bl	6040 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    5fa4:	e006      	b.n	5fb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    5fa6:	480f      	ldr	r0, [pc, #60]	; (5fe4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    5fa8:	6800      	ldr	r0, [r0, #0]
    5faa:	b120      	cbz	r0, 5fb6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    5fac:	8860      	ldrh	r0, [r4, #2]
    5fae:	4631      	mov	r1, r6
    5fb0:	f000 f8de 	bl	6170 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    5fb4:	b960      	cbnz	r0, 5fd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    5fb6:	1ca0      	adds	r0, r4, #2
    5fb8:	f007 fb27 	bl	d60a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    5fbc:	b910      	cbnz	r0, 5fc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    5fbe:	8861      	ldrh	r1, [r4, #2]
    5fc0:	4541      	cmp	r1, r8
    5fc2:	d1e1      	bne.n	5f88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    5fc4:	4808      	ldr	r0, [pc, #32]	; (5fe8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    5fc6:	6801      	ldr	r1, [r0, #0]
    5fc8:	b129      	cbz	r1, 5fd6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    5fca:	4630      	mov	r0, r6
    5fcc:	4788      	blx	r1
    5fce:	b110      	cbz	r0, 5fd6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    5fd0:	2001      	movs	r0, #1
    5fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fd6:	2000      	movs	r0, #0
    5fd8:	e7fb      	b.n	5fd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    5fda:	0000      	.short	0x0000
    5fdc:	20000289 	.word	0x20000289
    5fe0:	200000ec 	.word	0x200000ec
    5fe4:	200000f0 	.word	0x200000f0
    5fe8:	200000f4 	.word	0x200000f4

00005fec <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    5fec:	4901      	ldr	r1, [pc, #4]	; (5ff4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    5fee:	7008      	strb	r0, [r1, #0]
    5ff0:	f000 b95c 	b.w	62ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    5ff4:	20000288 	.word	0x20000288

00005ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    5ff8:	4801      	ldr	r0, [pc, #4]	; (6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    5ffa:	7800      	ldrb	r0, [r0, #0]
    5ffc:	f7fd bc94 	b.w	3928 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6000:	20000288 	.word	0x20000288

00006004 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6004:	4902      	ldr	r1, [pc, #8]	; (6010 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6006:	4801      	ldr	r0, [pc, #4]	; (600c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6008:	6008      	str	r0, [r1, #0]
    600a:	4770      	bx	lr
    600c:	00006419 	.word	0x00006419
    6010:	200000ec 	.word	0x200000ec

00006014 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6014:	4905      	ldr	r1, [pc, #20]	; (602c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6016:	4804      	ldr	r0, [pc, #16]	; (6028 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6018:	6008      	str	r0, [r1, #0]
    601a:	4906      	ldr	r1, [pc, #24]	; (6034 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    601c:	4804      	ldr	r0, [pc, #16]	; (6030 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    601e:	6008      	str	r0, [r1, #0]
    6020:	4906      	ldr	r1, [pc, #24]	; (603c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    6022:	4805      	ldr	r0, [pc, #20]	; (6038 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6024:	6008      	str	r0, [r1, #0]
    6026:	4770      	bx	lr
    6028:	00006419 	.word	0x00006419
    602c:	200000ec 	.word	0x200000ec
    6030:	00007add 	.word	0x00007add
    6034:	200000f0 	.word	0x200000f0
    6038:	00004b79 	.word	0x00004b79
    603c:	200000f4 	.word	0x200000f4
    6040:	b570      	push	{r4, r5, r6, lr}
    6042:	0005      	movs	r5, r0
    6044:	460c      	mov	r4, r1
    6046:	d02e      	beq.n	60a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    6048:	4818      	ldr	r0, [pc, #96]	; (60ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
    604a:	6802      	ldr	r2, [r0, #0]
    604c:	b35a      	cbz	r2, 60a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    604e:	4628      	mov	r0, r5
    6050:	4790      	blx	r2
    6052:	b340      	cbz	r0, 60a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    6054:	7820      	ldrb	r0, [r4, #0]
    6056:	2811      	cmp	r0, #17
    6058:	d002      	beq.n	6060 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    605a:	2814      	cmp	r0, #20
    605c:	d003      	beq.n	6066 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    605e:	e020      	b.n	60a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6060:	7920      	ldrb	r0, [r4, #4]
    6062:	b1f0      	cbz	r0, 60a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6064:	e00a      	b.n	607c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    6066:	7920      	ldrb	r0, [r4, #4]
    6068:	b120      	cbz	r0, 6074 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    606a:	4628      	mov	r0, r5
    606c:	f007 fce1 	bl	da32 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6070:	b120      	cbz	r0, 607c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    6072:	e016      	b.n	60a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6074:	490e      	ldr	r1, [pc, #56]	; (60b0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
    6076:	2000      	movs	r0, #0
    6078:	7008      	strb	r0, [r1, #0]
    607a:	e012      	b.n	60a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    607c:	88e4      	ldrh	r4, [r4, #6]
    607e:	2100      	movs	r1, #0
    6080:	4620      	mov	r0, r4
    6082:	f006 fc76 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6086:	b160      	cbz	r0, 60a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6088:	8800      	ldrh	r0, [r0, #0]
    608a:	f006 fdfa 	bl	cc82 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    608e:	2100      	movs	r1, #0
    6090:	4620      	mov	r0, r4
    6092:	f7fe f8ad 	bl	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6096:	b120      	cbz	r0, 60a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6098:	f240 1171 	movw	r1, #369	; 0x171
    609c:	2010      	movs	r0, #16
    609e:	f7fd fe1f 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60a2:	2001      	movs	r0, #1
    60a4:	bd70      	pop	{r4, r5, r6, pc}
    60a6:	2000      	movs	r0, #0
    60a8:	bd70      	pop	{r4, r5, r6, pc}
    60aa:	0000      	.short	0x0000
    60ac:	200000ec 	.word	0x200000ec
    60b0:	2000028c 	.word	0x2000028c
    60b4:	b510      	push	{r4, lr}
    60b6:	492d      	ldr	r1, [pc, #180]	; (616c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    60b8:	b086      	sub	sp, #24
    60ba:	7c8a      	ldrb	r2, [r1, #18]
    60bc:	7801      	ldrb	r1, [r0, #0]
    60be:	07d3      	lsls	r3, r2, #31
    60c0:	d101      	bne.n	60c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    60c2:	2919      	cmp	r1, #25
    60c4:	d004      	beq.n	60d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
    60c6:	2918      	cmp	r1, #24
    60c8:	d01f      	beq.n	610a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    60ca:	2912      	cmp	r1, #18
    60cc:	d046      	beq.n	615c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
    60ce:	e04a      	b.n	6166 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    60d0:	8880      	ldrh	r0, [r0, #4]
    60d2:	f8ad 0000 	strh.w	r0, [sp]
    60d6:	a902      	add	r1, sp, #8
    60d8:	f006 fe93 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    60dc:	b110      	cbz	r0, 60e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    60de:	f44f 71c4 	mov.w	r1, #392	; 0x188
    60e2:	e035      	b.n	6150 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    60e4:	9803      	ldr	r0, [sp, #12]
    60e6:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    60ea:	f88d 1002 	strb.w	r1, [sp, #2]
    60ee:	7841      	ldrb	r1, [r0, #1]
    60f0:	f88d 1003 	strb.w	r1, [sp, #3]
    60f4:	8840      	ldrh	r0, [r0, #2]
    60f6:	f8ad 0004 	strh.w	r0, [sp, #4]
    60fa:	2102      	movs	r1, #2
    60fc:	4668      	mov	r0, sp
    60fe:	f008 ff73 	bl	efe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6102:	b340      	cbz	r0, 6156 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6104:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    6108:	e022      	b.n	6150 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    610a:	0791      	lsls	r1, r2, #30
    610c:	d42b      	bmi.n	6166 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    610e:	8884      	ldrh	r4, [r0, #4]
    6110:	a903      	add	r1, sp, #12
    6112:	4620      	mov	r0, r4
    6114:	f008 fd87 	bl	ec26 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6118:	b110      	cbz	r0, 6120 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
    611a:	f240 11a5 	movw	r1, #421	; 0x1a5
    611e:	e017      	b.n	6150 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6120:	f8ad 4000 	strh.w	r4, [sp]
    6124:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6128:	f8ad 0002 	strh.w	r0, [sp, #2]
    612c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6130:	f8ad 0004 	strh.w	r0, [sp, #4]
    6134:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6138:	f8ad 0006 	strh.w	r0, [sp, #6]
    613c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6140:	f8ad 0008 	strh.w	r0, [sp, #8]
    6144:	4668      	mov	r0, sp
    6146:	f008 fdec 	bl	ed22 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    614a:	b120      	cbz	r0, 6156 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    614c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    6150:	2010      	movs	r0, #16
    6152:	f7fd fdc5 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6156:	2001      	movs	r0, #1
    6158:	b006      	add	sp, #24
    615a:	bd10      	pop	{r4, pc}
    615c:	0751      	lsls	r1, r2, #29
    615e:	d402      	bmi.n	6166 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    6160:	7b80      	ldrb	r0, [r0, #14]
    6162:	07c0      	lsls	r0, r0, #31
    6164:	d0f7      	beq.n	6156 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6166:	2000      	movs	r0, #0
    6168:	e7f6      	b.n	6158 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    616a:	0000      	.short	0x0000
    616c:	20000ec0 	.word	0x20000ec0
    6170:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6174:	b087      	sub	sp, #28
    6176:	460c      	mov	r4, r1
    6178:	a902      	add	r1, sp, #8
    617a:	9807      	ldr	r0, [sp, #28]
    617c:	f006 fe41 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6180:	2800      	cmp	r0, #0
    6182:	d17d      	bne.n	6280 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    6184:	f8df 9120 	ldr.w	r9, [pc, #288]	; 62a8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x294>
    6188:	f04f 0a01 	mov.w	sl, #1
    618c:	4680      	mov	r8, r0
    618e:	9803      	ldr	r0, [sp, #12]
    6190:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    6194:	2800      	cmp	r0, #0
    6196:	d00c      	beq.n	61b2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    6198:	f8d9 2000 	ldr.w	r2, [r9]
    619c:	b162      	cbz	r2, 61b8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    619e:	4621      	mov	r1, r4
    61a0:	9807      	ldr	r0, [sp, #28]
    61a2:	4790      	blx	r2
    61a4:	b140      	cbz	r0, 61b8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    61a6:	4620      	mov	r0, r4
    61a8:	f7ff ff84 	bl	60b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
    61ac:	2800      	cmp	r0, #0
    61ae:	d1ee      	bne.n	618e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x17a>
    61b0:	2001      	movs	r0, #1
    61b2:	b009      	add	sp, #36	; 0x24
    61b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61b8:	9d03      	ldr	r5, [sp, #12]
    61ba:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    61be:	3570      	adds	r5, #112	; 0x70
    61c0:	b950      	cbnz	r0, 61d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    61c2:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    61c6:	f88d 0004 	strb.w	r0, [sp, #4]
    61ca:	9801      	ldr	r0, [sp, #4]
    61cc:	9001      	str	r0, [sp, #4]
    61ce:	f89d 0004 	ldrb.w	r0, [sp, #4]
    61d2:	b108      	cbz	r0, 61d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    61d4:	2001      	movs	r0, #1
    61d6:	e000      	b.n	61da <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c6>
    61d8:	2000      	movs	r0, #0
    61da:	4683      	mov	fp, r0
    61dc:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    61e0:	b1c0      	cbz	r0, 6214 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    61e2:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    61e6:	0780      	lsls	r0, r0, #30
    61e8:	d514      	bpl.n	6214 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    61ea:	f884 8001 	strb.w	r8, [r4, #1]
    61ee:	f884 a000 	strb.w	sl, [r4]
    61f2:	f884 8004 	strb.w	r8, [r4, #4]
    61f6:	9907      	ldr	r1, [sp, #28]
    61f8:	f8a4 1005 	strh.w	r1, [r4, #5]
    61fc:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    6200:	71e1      	strb	r1, [r4, #7]
    6202:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    6206:	8121      	strh	r1, [r4, #8]
    6208:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    620c:	8161      	strh	r1, [r4, #10]
    620e:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    6212:	e7c8      	b.n	61a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6214:	9807      	ldr	r0, [sp, #28]
    6216:	f7fe f993 	bl	4540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    621a:	0007      	movs	r7, r0
    621c:	d00d      	beq.n	623a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x226>
    621e:	f006 f9c1 	bl	c5a4 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6222:	0006      	movs	r6, r0
    6224:	d015      	beq.n	6252 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23e>
    6226:	f884 8001 	strb.w	r8, [r4, #1]
    622a:	200d      	movs	r0, #13
    622c:	7020      	strb	r0, [r4, #0]
    622e:	9807      	ldr	r0, [sp, #28]
    6230:	80e0      	strh	r0, [r4, #6]
    6232:	8126      	strh	r6, [r4, #8]
    6234:	f884 a004 	strb.w	sl, [r4, #4]
    6238:	e007      	b.n	624a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    623a:	f240 2133 	movw	r1, #563	; 0x233
    623e:	e02d      	b.n	629c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>
    6240:	2100      	movs	r1, #0
    6242:	4638      	mov	r0, r7
    6244:	460a      	mov	r2, r1
    6246:	f006 fac3 	bl	c7d0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    624a:	1e76      	subs	r6, r6, #1
    624c:	b2b6      	uxth	r6, r6
    624e:	d2f7      	bcs.n	6240 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>
    6250:	e7a9      	b.n	61a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6252:	9807      	ldr	r0, [sp, #28]
    6254:	f7fe f95e 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6258:	b1f0      	cbz	r0, 6298 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x284>
    625a:	f1bb 0f00 	cmp.w	fp, #0
    625e:	d020      	beq.n	62a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    6260:	f006 f8d5 	bl	c40e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6264:	b160      	cbz	r0, 6280 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    6266:	9807      	ldr	r0, [sp, #28]
    6268:	f006 fd0b 	bl	cc82 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    626c:	2100      	movs	r1, #0
    626e:	9807      	ldr	r0, [sp, #28]
    6270:	f7fd ffbe 	bl	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6274:	f884 8001 	strb.w	r8, [r4, #1]
    6278:	210a      	movs	r1, #10
    627a:	4640      	mov	r0, r8
    627c:	7021      	strb	r1, [r4, #0]
    627e:	e000      	b.n	6282 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26e>
    6280:	e00f      	b.n	62a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    6282:	f884 8004 	strb.w	r8, [r4, #4]
    6286:	9907      	ldr	r1, [sp, #28]
    6288:	f8a4 1005 	strh.w	r1, [r4, #5]
    628c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6290:	71e1      	strb	r1, [r4, #7]
    6292:	3524      	adds	r5, #36	; 0x24
    6294:	7028      	strb	r0, [r5, #0]
    6296:	e786      	b.n	61a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6298:	f240 2151 	movw	r1, #593	; 0x251
    629c:	2010      	movs	r0, #16
    629e:	f7fd fd1f 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62a2:	2000      	movs	r0, #0
    62a4:	e785      	b.n	61b2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    62a6:	0000      	.short	0x0000
    62a8:	200000f0 	.word	0x200000f0
    62ac:	4804      	ldr	r0, [pc, #16]	; (62c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2ac>)
    62ae:	2100      	movs	r1, #0
    62b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    62b4:	7001      	strb	r1, [r0, #0]
    62b6:	8042      	strh	r2, [r0, #2]
    62b8:	1f00      	subs	r0, r0, #4
    62ba:	f8a0 1001 	strh.w	r1, [r0, #1]
    62be:	4770      	bx	lr
    62c0:	2000028c 	.word	0x2000028c

000062c4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    62c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62c6:	f06f 021f 	mvn.w	r2, #31
    62ca:	0c01      	lsrs	r1, r0, #16
    62cc:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    62d0:	251f      	movs	r5, #31
    62d2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    62d6:	3854      	subs	r0, #84	; 0x54
    62d8:	d00d      	beq.n	62f6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    62da:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    62de:	3855      	subs	r0, #85	; 0x55
    62e0:	d009      	beq.n	62f6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    62e2:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    62e6:	38aa      	subs	r0, #170	; 0xaa
    62e8:	d005      	beq.n	62f6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    62ea:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    62ee:	38aa      	subs	r0, #170	; 0xaa
    62f0:	d001      	beq.n	62f6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    62f2:	2001      	movs	r0, #1
    62f4:	e000      	b.n	62f8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    62f6:	2000      	movs	r0, #0
    62f8:	2200      	movs	r2, #0
    62fa:	4613      	mov	r3, r2
    62fc:	ea4f 0402 	mov.w	r4, r2
    6300:	ea82 0701 	eor.w	r7, r2, r1
    6304:	43ff      	mvns	r7, r7
    6306:	431f      	orrs	r7, r3
    6308:	1c7f      	adds	r7, r7, #1
    630a:	d00f      	beq.n	632c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    630c:	f006 0701 	and.w	r7, r6, #1
    6310:	0852      	lsrs	r2, r2, #1
    6312:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    6316:	f005 0701 	and.w	r7, r5, #1
    631a:	085b      	lsrs	r3, r3, #1
    631c:	0876      	lsrs	r6, r6, #1
    631e:	086d      	lsrs	r5, r5, #1
    6320:	1c64      	adds	r4, r4, #1
    6322:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6326:	2c16      	cmp	r4, #22
    6328:	d3ea      	bcc.n	6300 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    632a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    632c:	2000      	movs	r0, #0
    632e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006330 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    6330:	b510      	push	{r4, lr}
    6332:	e9d0 2100 	ldrd	r2, r1, [r0]
    6336:	4b09      	ldr	r3, [pc, #36]	; (635c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    6338:	4c09      	ldr	r4, [pc, #36]	; (6360 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    633a:	4353      	muls	r3, r2
    633c:	4354      	muls	r4, r2
    633e:	4051      	eors	r1, r2
    6340:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    6344:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    6348:	ea4f 41f1 	mov.w	r1, r1, ror #19
    634c:	e9c0 2100 	strd	r2, r1, [r0]
    6350:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    6354:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6358:	4618      	mov	r0, r3
    635a:	bd10      	pop	{r4, pc}
    635c:	c6ef3760 	.word	0xc6ef3760
    6360:	9e3779bb 	.word	0x9e3779bb

00006364 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6364:	b570      	push	{r4, r5, r6, lr}
    6366:	4604      	mov	r4, r0
    6368:	7c00      	ldrb	r0, [r0, #16]
    636a:	b300      	cbz	r0, 63ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    636c:	2802      	cmp	r0, #2
    636e:	d01e      	beq.n	63ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6370:	f05f 0001 	movs.w	r0, #1
    6374:	f104 0149 	add.w	r1, r4, #73	; 0x49
    6378:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    637c:	460d      	mov	r5, r1
    637e:	b1c0      	cbz	r0, 63b2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6380:	7de0      	ldrb	r0, [r4, #23]
    6382:	b1f0      	cbz	r0, 63c2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    6384:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6388:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    638c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6390:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    6394:	7c20      	ldrb	r0, [r4, #16]
    6396:	f007 faaf 	bl	d8f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    639a:	7620      	strb	r0, [r4, #24]
    639c:	2008      	movs	r0, #8
    639e:	7660      	strb	r0, [r4, #25]
    63a0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    63a4:	4629      	mov	r1, r5
    63a6:	f007 fa93 	bl	d8d0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    63aa:	b9a8      	cbnz	r0, 63d8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    63ac:	e00e      	b.n	63cc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    63ae:	2000      	movs	r0, #0
    63b0:	e7e0      	b.n	6374 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    63b2:	2000      	movs	r0, #0
    63b4:	f7fe fb92 	bl	4adc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    63b8:	2800      	cmp	r0, #0
    63ba:	d1eb      	bne.n	6394 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    63bc:	f240 41aa 	movw	r1, #1194	; 0x4aa
    63c0:	e001      	b.n	63c6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    63c2:	f240 41ae 	movw	r1, #1198	; 0x4ae
    63c6:	202d      	movs	r0, #45	; 0x2d
    63c8:	f7fd fc8a 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63cc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    63d0:	4629      	mov	r1, r5
    63d2:	f007 fa86 	bl	d8e2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    63d6:	b100      	cbz	r0, 63da <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    63d8:	2001      	movs	r0, #1
    63da:	76a0      	strb	r0, [r4, #26]
    63dc:	7e20      	ldrb	r0, [r4, #24]
    63de:	b130      	cbz	r0, 63ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    63e0:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    63e4:	f104 0150 	add.w	r1, r4, #80	; 0x50
    63e8:	f006 fcc8 	bl	cd7c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    63ec:	7660      	strb	r0, [r4, #25]
    63ee:	2500      	movs	r5, #0
    63f0:	6425      	str	r5, [r4, #64]	; 0x40
    63f2:	f005 f94e 	bl	b692 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    63f6:	6460      	str	r0, [r4, #68]	; 0x44
    63f8:	2100      	movs	r1, #0
    63fa:	4620      	mov	r0, r4
    63fc:	f007 fb9b 	bl	db36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6400:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    6404:	78a0      	ldrb	r0, [r4, #2]
    6406:	0740      	lsls	r0, r0, #29
    6408:	d505      	bpl.n	6416 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    640a:	4620      	mov	r0, r4
    640c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6410:	2100      	movs	r1, #0
    6412:	f000 bdff 	b.w	7014 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    6416:	bd70      	pop	{r4, r5, r6, pc}

00006418 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6418:	b508      	push	{r3, lr}
    641a:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    641e:	f88d 2000 	strb.w	r2, [sp]
    6422:	9a00      	ldr	r2, [sp, #0]
    6424:	9200      	str	r2, [sp, #0]
    6426:	f89d 3000 	ldrb.w	r3, [sp]
    642a:	2200      	movs	r2, #0
    642c:	b163      	cbz	r3, 6448 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    642e:	704a      	strb	r2, [r1, #1]
    6430:	2317      	movs	r3, #23
    6432:	700b      	strb	r3, [r1, #0]
    6434:	f850 3f95 	ldr.w	r3, [r0, #149]!
    6438:	604b      	str	r3, [r1, #4]
    643a:	6843      	ldr	r3, [r0, #4]
    643c:	608b      	str	r3, [r1, #8]
    643e:	7a03      	ldrb	r3, [r0, #8]
    6440:	730b      	strb	r3, [r1, #12]
    6442:	f800 2c01 	strb.w	r2, [r0, #-1]
    6446:	e03b      	b.n	64c0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6448:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    644c:	f88d 3000 	strb.w	r3, [sp]
    6450:	9b00      	ldr	r3, [sp, #0]
    6452:	9300      	str	r3, [sp, #0]
    6454:	f89d 3000 	ldrb.w	r3, [sp]
    6458:	b143      	cbz	r3, 646c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    645a:	704a      	strb	r2, [r1, #1]
    645c:	2305      	movs	r3, #5
    645e:	700b      	strb	r3, [r1, #0]
    6460:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    6464:	604b      	str	r3, [r1, #4]
    6466:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    646a:	e029      	b.n	64c0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    646c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    6470:	f88d 3000 	strb.w	r3, [sp]
    6474:	9b00      	ldr	r3, [sp, #0]
    6476:	9300      	str	r3, [sp, #0]
    6478:	f89d 3000 	ldrb.w	r3, [sp]
    647c:	b11b      	cbz	r3, 6486 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    647e:	bf00      	nop
    6480:	f007 fb30 	bl	dae4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    6484:	e01c      	b.n	64c0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6486:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    648a:	f88d 3000 	strb.w	r3, [sp]
    648e:	9b00      	ldr	r3, [sp, #0]
    6490:	9300      	str	r3, [sp, #0]
    6492:	f89d 3000 	ldrb.w	r3, [sp]
    6496:	b1ab      	cbz	r3, 64c4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    6498:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    649c:	f88d 3000 	strb.w	r3, [sp]
    64a0:	9b00      	ldr	r3, [sp, #0]
    64a2:	9300      	str	r3, [sp, #0]
    64a4:	f89d 3000 	ldrb.w	r3, [sp]
    64a8:	2b00      	cmp	r3, #0
    64aa:	d1e9      	bne.n	6480 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    64ac:	704a      	strb	r2, [r1, #1]
    64ae:	2314      	movs	r3, #20
    64b0:	700b      	strb	r3, [r1, #0]
    64b2:	f850 3f88 	ldr.w	r3, [r0, #136]!
    64b6:	604b      	str	r3, [r1, #4]
    64b8:	8883      	ldrh	r3, [r0, #4]
    64ba:	810b      	strh	r3, [r1, #8]
    64bc:	f800 2c02 	strb.w	r2, [r0, #-2]
    64c0:	2001      	movs	r0, #1
    64c2:	bd08      	pop	{r3, pc}
    64c4:	2000      	movs	r0, #0
    64c6:	bd08      	pop	{r3, pc}

000064c8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    64c8:	b530      	push	{r4, r5, lr}
    64ca:	460c      	mov	r4, r1
    64cc:	b08d      	sub	sp, #52	; 0x34
    64ce:	4605      	mov	r5, r0
    64d0:	4601      	mov	r1, r0
    64d2:	2220      	movs	r2, #32
    64d4:	a802      	add	r0, sp, #8
    64d6:	f005 fa51 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    64da:	a80a      	add	r0, sp, #40	; 0x28
    64dc:	f007 fbd8 	bl	dc90 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    64e0:	7aa0      	ldrb	r0, [r4, #10]
    64e2:	f88d 0018 	strb.w	r0, [sp, #24]
    64e6:	7820      	ldrb	r0, [r4, #0]
    64e8:	f88d 0008 	strb.w	r0, [sp, #8]
    64ec:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    64f0:	f8ad 0000 	strh.w	r0, [sp]
    64f4:	f89d 0000 	ldrb.w	r0, [sp]
    64f8:	f000 0101 	and.w	r1, r0, #1
    64fc:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6500:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6504:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6508:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    650c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6510:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6514:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6518:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    651c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6520:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6524:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6528:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    652c:	f8ad 000a 	strh.w	r0, [sp, #10]
    6530:	7d20      	ldrb	r0, [r4, #20]
    6532:	2801      	cmp	r0, #1
    6534:	d006      	beq.n	6544 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6536:	2802      	cmp	r0, #2
    6538:	d004      	beq.n	6544 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    653a:	f240 2175 	movw	r1, #629	; 0x275
    653e:	2006      	movs	r0, #6
    6540:	f7fd fbce 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6544:	f88d 000c 	strb.w	r0, [sp, #12]
    6548:	7a61      	ldrb	r1, [r4, #9]
    654a:	a80a      	add	r0, sp, #40	; 0x28
    654c:	f007 fb87 	bl	dc5e <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6550:	7d20      	ldrb	r0, [r4, #20]
    6552:	2101      	movs	r1, #1
    6554:	2802      	cmp	r0, #2
    6556:	d102      	bne.n	655e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6558:	7d60      	ldrb	r0, [r4, #21]
    655a:	1c40      	adds	r0, r0, #1
    655c:	b2c1      	uxtb	r1, r0
    655e:	7ea0      	ldrb	r0, [r4, #26]
    6560:	1c40      	adds	r0, r0, #1
    6562:	b2c2      	uxtb	r2, r0
    6564:	a80a      	add	r0, sp, #40	; 0x28
    6566:	f007 fb41 	bl	dbec <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    656a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    656e:	0700      	lsls	r0, r0, #28
    6570:	d501      	bpl.n	6576 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    6572:	2000      	movs	r0, #0
    6574:	e020      	b.n	65b8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    6576:	a80a      	add	r0, sp, #40	; 0x28
    6578:	f007 fb4a 	bl	dc10 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    657c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    6580:	2228      	movs	r2, #40	; 0x28
    6582:	f000 fded 	bl	7160 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6586:	f240 2171 	movw	r1, #625	; 0x271
    658a:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    658e:	fbb0 f0f1 	udiv	r0, r0, r1
    6592:	4348      	muls	r0, r1
    6594:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6598:	f240 2371 	movw	r3, #625	; 0x271
    659c:	0a0a      	lsrs	r2, r1, #8
    659e:	f240 2171 	movw	r1, #625	; 0x271
    65a2:	434a      	muls	r2, r1
    65a4:	f8d4 1005 	ldr.w	r1, [r4, #5]
    65a8:	0a09      	lsrs	r1, r1, #8
    65aa:	4359      	muls	r1, r3
    65ac:	4290      	cmp	r0, r2
    65ae:	d801      	bhi.n	65b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    65b0:	9204      	str	r2, [sp, #16]
    65b2:	e004      	b.n	65be <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    65b4:	4288      	cmp	r0, r1
    65b6:	d801      	bhi.n	65bc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    65b8:	9004      	str	r0, [sp, #16]
    65ba:	e000      	b.n	65be <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    65bc:	9104      	str	r1, [sp, #16]
    65be:	7ca0      	ldrb	r0, [r4, #18]
    65c0:	f88d 0017 	strb.w	r0, [sp, #23]
    65c4:	7e20      	ldrb	r0, [r4, #24]
    65c6:	2801      	cmp	r0, #1
    65c8:	d000      	beq.n	65cc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    65ca:	2000      	movs	r0, #0
    65cc:	f88d 0014 	strb.w	r0, [sp, #20]
    65d0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    65d2:	f006 fa8c 	bl	caee <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    65d6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    65d8:	f006 fb2c 	bl	cc34 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    65dc:	2220      	movs	r2, #32
    65de:	a902      	add	r1, sp, #8
    65e0:	4628      	mov	r0, r5
    65e2:	f005 f9cb 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    65e6:	980a      	ldr	r0, [sp, #40]	; 0x28
    65e8:	6228      	str	r0, [r5, #32]
    65ea:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    65ee:	84a8      	strh	r0, [r5, #36]	; 0x24
    65f0:	7ae0      	ldrb	r0, [r4, #11]
    65f2:	b168      	cbz	r0, 6610 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    65f4:	2802      	cmp	r0, #2
    65f6:	d00b      	beq.n	6610 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    65f8:	f05f 0001 	movs.w	r0, #1
    65fc:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    6600:	68e0      	ldr	r0, [r4, #12]
    6602:	6528      	str	r0, [r5, #80]	; 0x50
    6604:	8a20      	ldrh	r0, [r4, #16]
    6606:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    660a:	b00d      	add	sp, #52	; 0x34
    660c:	2000      	movs	r0, #0
    660e:	bd30      	pop	{r4, r5, pc}
    6610:	2000      	movs	r0, #0
    6612:	e7f3      	b.n	65fc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00006614 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6614:	4a0a      	ldr	r2, [pc, #40]	; (6640 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    6616:	b510      	push	{r4, lr}
    6618:	2100      	movs	r1, #0
    661a:	7011      	strb	r1, [r2, #0]
    661c:	4c09      	ldr	r4, [pc, #36]	; (6644 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    661e:	6060      	str	r0, [r4, #4]
    6620:	f000 f822 	bl	6668 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6624:	b110      	cbz	r0, 662c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    6626:	f240 312a 	movw	r1, #810	; 0x32a
    662a:	e004      	b.n	6636 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    662c:	68a0      	ldr	r0, [r4, #8]
    662e:	2800      	cmp	r0, #0
    6630:	d104      	bne.n	663c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    6632:	f240 312d 	movw	r1, #813	; 0x32d
    6636:	202d      	movs	r0, #45	; 0x2d
    6638:	f7fd fb52 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    663c:	bd10      	pop	{r4, pc}
    663e:	0000      	.short	0x0000
    6640:	20000edc 	.word	0x20000edc
    6644:	200000f8 	.word	0x200000f8

00006648 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6648:	4902      	ldr	r1, [pc, #8]	; (6654 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    664a:	4801      	ldr	r0, [pc, #4]	; (6650 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    664c:	6088      	str	r0, [r1, #8]
    664e:	4770      	bx	lr
    6650:	00007148 	.word	0x00007148
    6654:	200000f8 	.word	0x200000f8

00006658 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    6658:	4902      	ldr	r1, [pc, #8]	; (6664 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    665a:	6008      	str	r0, [r1, #0]
    665c:	6889      	ldr	r1, [r1, #8]
    665e:	6809      	ldr	r1, [r1, #0]
    6660:	4708      	bx	r1
    6662:	0000      	.short	0x0000
    6664:	200000f8 	.word	0x200000f8

00006668 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    6668:	4808      	ldr	r0, [pc, #32]	; (668c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    666a:	b510      	push	{r4, lr}
    666c:	7800      	ldrb	r0, [r0, #0]
    666e:	b110      	cbz	r0, 6676 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6670:	240c      	movs	r4, #12
    6672:	4620      	mov	r0, r4
    6674:	bd10      	pop	{r4, pc}
    6676:	2400      	movs	r4, #0
    6678:	2218      	movs	r2, #24
    667a:	4621      	mov	r1, r4
    667c:	4803      	ldr	r0, [pc, #12]	; (668c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    667e:	f005 f9f7 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6682:	f004 f8c3 	bl	a80c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6686:	f003 fea5 	bl	a3d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    668a:	e7f2      	b.n	6672 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    668c:	20000edc 	.word	0x20000edc

00006690 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6690:	4904      	ldr	r1, [pc, #16]	; (66a4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    6692:	b510      	push	{r4, lr}
    6694:	7809      	ldrb	r1, [r1, #0]
    6696:	2901      	cmp	r1, #1
    6698:	d101      	bne.n	669e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    669a:	f000 fb81 	bl	6da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    669e:	2000      	movs	r0, #0
    66a0:	bd10      	pop	{r4, pc}
    66a2:	0000      	.short	0x0000
    66a4:	20000edc 	.word	0x20000edc

000066a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    66a8:	4902      	ldr	r1, [pc, #8]	; (66b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    66aa:	4801      	ldr	r0, [pc, #4]	; (66b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    66ac:	6008      	str	r0, [r1, #0]
    66ae:	4770      	bx	lr
    66b0:	00006eed 	.word	0x00006eed
    66b4:	20000104 	.word	0x20000104
    66b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66bc:	000f      	movs	r7, r1
    66be:	4604      	mov	r4, r0
    66c0:	d023      	beq.n	670a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    66c2:	f104 0020 	add.w	r0, r4, #32
    66c6:	4605      	mov	r5, r0
    66c8:	f007 facb 	bl	dc62 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    66cc:	b9b0      	cbnz	r0, 66fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    66ce:	78a0      	ldrb	r0, [r4, #2]
    66d0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    66d4:	b350      	cbz	r0, 672c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    66d6:	4628      	mov	r0, r5
    66d8:	f007 fa9a 	bl	dc10 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    66dc:	4606      	mov	r6, r0
    66de:	4628      	mov	r0, r5
    66e0:	f007 fabf 	bl	dc62 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    66e4:	1a30      	subs	r0, r6, r0
    66e6:	b2c0      	uxtb	r0, r0
    66e8:	f007 fb10 	bl	dd0c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    66ec:	4601      	mov	r1, r0
    66ee:	4835      	ldr	r0, [pc, #212]	; (67c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    66f0:	6842      	ldr	r2, [r0, #4]
    66f2:	4411      	add	r1, r2
    66f4:	6041      	str	r1, [r0, #4]
    66f6:	4628      	mov	r0, r5
    66f8:	f007 fad1 	bl	dc9e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    66fc:	4628      	mov	r0, r5
    66fe:	f007 fa93 	bl	dc28 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6702:	4601      	mov	r1, r0
    6704:	4620      	mov	r0, r4
    6706:	f007 fa52 	bl	dbae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    670a:	4d2f      	ldr	r5, [pc, #188]	; (67c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    670c:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    6710:	2100      	movs	r1, #0
    6712:	6868      	ldr	r0, [r5, #4]
    6714:	8001      	strh	r1, [r0, #0]
    6716:	f007 fa60 	bl	dbda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    671a:	8860      	ldrh	r0, [r4, #2]
    671c:	2813      	cmp	r0, #19
    671e:	d013      	beq.n	6748 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6720:	dc09      	bgt.n	6736 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    6722:	2810      	cmp	r0, #16
    6724:	d036      	beq.n	6794 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    6726:	2812      	cmp	r0, #18
    6728:	d109      	bne.n	673e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    672a:	e031      	b.n	6790 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    672c:	4620      	mov	r0, r4
    672e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6732:	f000 bb35 	b.w	6da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6736:	2815      	cmp	r0, #21
    6738:	d00f      	beq.n	675a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    673a:	281d      	cmp	r0, #29
    673c:	d00d      	beq.n	675a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    673e:	f240 616c 	movw	r1, #1644	; 0x66c
    6742:	202d      	movs	r0, #45	; 0x2d
    6744:	f7fd facc 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6748:	2100      	movs	r1, #0
    674a:	6868      	ldr	r0, [r5, #4]
    674c:	f006 fe89 	bl	d462 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6750:	2101      	movs	r1, #1
    6752:	6868      	ldr	r0, [r5, #4]
    6754:	f007 fa41 	bl	dbda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    6758:	e020      	b.n	679c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    675a:	2101      	movs	r1, #1
    675c:	6868      	ldr	r0, [r5, #4]
    675e:	f006 fe80 	bl	d462 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6762:	2101      	movs	r1, #1
    6764:	6868      	ldr	r0, [r5, #4]
    6766:	f007 fa38 	bl	dbda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    676a:	b136      	cbz	r6, 677a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    676c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    6770:	6868      	ldr	r0, [r5, #4]
    6772:	f006 fe91 	bl	d498 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6776:	2101      	movs	r1, #1
    6778:	e006      	b.n	6788 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    677a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    677e:	6868      	ldr	r0, [r5, #4]
    6780:	f006 fe8a 	bl	d498 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6784:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    6788:	6868      	ldr	r0, [r5, #4]
    678a:	f006 fe8b 	bl	d4a4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    678e:	e005      	b.n	679c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6790:	2106      	movs	r1, #6
    6792:	e000      	b.n	6796 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    6794:	2102      	movs	r1, #2
    6796:	6868      	ldr	r0, [r5, #4]
    6798:	f006 fe63 	bl	d462 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    679c:	4620      	mov	r0, r4
    679e:	f000 fcaf 	bl	7100 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    67a2:	8860      	ldrh	r0, [r4, #2]
    67a4:	281d      	cmp	r0, #29
    67a6:	d006      	beq.n	67b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    67a8:	2815      	cmp	r0, #21
    67aa:	d004      	beq.n	67b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    67ac:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    67ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
    67b0:	6868      	ldr	r0, [r5, #4]
    67b2:	f006 fe46 	bl	d442 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    67b6:	4639      	mov	r1, r7
    67b8:	4620      	mov	r0, r4
    67ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67be:	f000 b9e5 	b.w	6b8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    67c2:	0000      	.short	0x0000
    67c4:	20000edc 	.word	0x20000edc
    67c8:	200000f8 	.word	0x200000f8
    67cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67d0:	4d2e      	ldr	r5, [pc, #184]	; (688c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    67d2:	4607      	mov	r7, r0
    67d4:	7828      	ldrb	r0, [r5, #0]
    67d6:	2802      	cmp	r0, #2
    67d8:	d005      	beq.n	67e6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    67da:	7828      	ldrb	r0, [r5, #0]
    67dc:	2803      	cmp	r0, #3
    67de:	d002      	beq.n	67e6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    67e0:	f640 41f7 	movw	r1, #3319	; 0xcf7
    67e4:	e029      	b.n	683a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
    67e6:	4c2a      	ldr	r4, [pc, #168]	; (6890 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    67e8:	6820      	ldr	r0, [r4, #0]
    67ea:	7b01      	ldrb	r1, [r0, #12]
    67ec:	b109      	cbz	r1, 67f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    67ee:	f007 f9e9 	bl	dbc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    67f2:	6860      	ldr	r0, [r4, #4]
    67f4:	f04f 0800 	mov.w	r8, #0
    67f8:	7802      	ldrb	r2, [r0, #0]
    67fa:	f002 060f 	and.w	r6, r2, #15
    67fe:	b357      	cbz	r7, 6856 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6800:	6821      	ldr	r1, [r4, #0]
    6802:	f101 0349 	add.w	r3, r1, #73	; 0x49
    6806:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
    680a:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    680e:	d122      	bne.n	6856 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6810:	2206      	movs	r2, #6
    6812:	4619      	mov	r1, r3
    6814:	3009      	adds	r0, #9
    6816:	f005 f89f 	bl	b958 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    681a:	b9e0      	cbnz	r0, 6856 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    681c:	4641      	mov	r1, r8
    681e:	6860      	ldr	r0, [r4, #4]
    6820:	f006 fdff 	bl	d422 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    6824:	b1b8      	cbz	r0, 6856 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6826:	782a      	ldrb	r2, [r5, #0]
    6828:	6820      	ldr	r0, [r4, #0]
    682a:	4631      	mov	r1, r6
    682c:	2a02      	cmp	r2, #2
    682e:	d007      	beq.n	6840 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    6830:	782a      	ldrb	r2, [r5, #0]
    6832:	2a03      	cmp	r2, #3
    6834:	d004      	beq.n	6840 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    6836:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
    683a:	202d      	movs	r0, #45	; 0x2d
    683c:	f7fd fa50 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6840:	68a2      	ldr	r2, [r4, #8]
    6842:	782b      	ldrb	r3, [r5, #0]
    6844:	6952      	ldr	r2, [r2, #20]
    6846:	f06f 0607 	mvn.w	r6, #7
    684a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    684e:	58d2      	ldr	r2, [r2, r3]
    6850:	4790      	blx	r2
    6852:	4606      	mov	r6, r0
    6854:	e000      	b.n	6858 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
    6856:	2601      	movs	r6, #1
    6858:	7ba8      	ldrb	r0, [r5, #14]
    685a:	b118      	cbz	r0, 6864 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
    685c:	f003 ffd6 	bl	a80c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6860:	f003 fdb8 	bl	a3d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6864:	2e00      	cmp	r6, #0
    6866:	d00f      	beq.n	6888 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    6868:	6820      	ldr	r0, [r4, #0]
    686a:	f007 fa65 	bl	dd38 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    686e:	b130      	cbz	r0, 687e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
    6870:	f003 ffec 	bl	a84c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6874:	68a0      	ldr	r0, [r4, #8]
    6876:	6880      	ldr	r0, [r0, #8]
    6878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    687c:	4700      	bx	r0
    687e:	6820      	ldr	r0, [r4, #0]
    6880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6884:	f000 ba8c 	b.w	6da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    688c:	20000edc 	.word	0x20000edc
    6890:	200000f8 	.word	0x200000f8
    6894:	b510      	push	{r4, lr}
    6896:	2903      	cmp	r1, #3
    6898:	d002      	beq.n	68a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    689a:	2905      	cmp	r1, #5
    689c:	d10a      	bne.n	68b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    689e:	e002      	b.n	68a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    68a0:	f000 fb7e 	bl	6fa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    68a4:	e003      	b.n	68ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    68a6:	4904      	ldr	r1, [pc, #16]	; (68b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    68a8:	6809      	ldr	r1, [r1, #0]
    68aa:	b109      	cbz	r1, 68b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    68ac:	4788      	blx	r1
    68ae:	b108      	cbz	r0, 68b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    68b0:	2000      	movs	r0, #0
    68b2:	bd10      	pop	{r4, pc}
    68b4:	2001      	movs	r0, #1
    68b6:	bd10      	pop	{r4, pc}
    68b8:	20000104 	.word	0x20000104
    68bc:	4a09      	ldr	r2, [pc, #36]	; (68e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    68be:	0003      	movs	r3, r0
    68c0:	6810      	ldr	r0, [r2, #0]
    68c2:	d001      	beq.n	68c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    68c4:	f000 ba6c 	b.w	6da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    68c8:	2900      	cmp	r1, #0
    68ca:	d009      	beq.n	68e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    68cc:	6891      	ldr	r1, [r2, #8]
    68ce:	4a06      	ldr	r2, [pc, #24]	; (68e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    68d0:	6909      	ldr	r1, [r1, #16]
    68d2:	7812      	ldrb	r2, [r2, #0]
    68d4:	f06f 030f 	mvn.w	r3, #15
    68d8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    68dc:	5889      	ldr	r1, [r1, r2]
    68de:	4708      	bx	r1
    68e0:	4770      	bx	lr
    68e2:	0000      	.short	0x0000
    68e4:	200000f8 	.word	0x200000f8
    68e8:	20000edc 	.word	0x20000edc
    68ec:	b570      	push	{r4, r5, r6, lr}
    68ee:	4604      	mov	r4, r0
    68f0:	8840      	ldrh	r0, [r0, #2]
    68f2:	2810      	cmp	r0, #16
    68f4:	d019      	beq.n	692a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    68f6:	4d10      	ldr	r5, [pc, #64]	; (6938 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    68f8:	7ba8      	ldrb	r0, [r5, #14]
    68fa:	b120      	cbz	r0, 6906 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    68fc:	f003 fd8a 	bl	a414 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6900:	2040      	movs	r0, #64	; 0x40
    6902:	f003 ff91 	bl	a828 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6906:	480d      	ldr	r0, [pc, #52]	; (693c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    6908:	6840      	ldr	r0, [r0, #4]
    690a:	f004 fa4d 	bl	ada8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    690e:	78a0      	ldrb	r0, [r4, #2]
    6910:	0740      	lsls	r0, r0, #29
    6912:	d404      	bmi.n	691e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    6914:	2100      	movs	r1, #0
    6916:	7922      	ldrb	r2, [r4, #4]
    6918:	4608      	mov	r0, r1
    691a:	f004 fad1 	bl	aec0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    691e:	2000      	movs	r0, #0
    6920:	f004 f8d8 	bl	aad4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6924:	2002      	movs	r0, #2
    6926:	7028      	strb	r0, [r5, #0]
    6928:	bd70      	pop	{r4, r5, r6, pc}
    692a:	4620      	mov	r0, r4
    692c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6930:	2101      	movs	r1, #1
    6932:	f7ff bec1 	b.w	66b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6936:	0000      	.short	0x0000
    6938:	20000edc 	.word	0x20000edc
    693c:	200000f8 	.word	0x200000f8
    6940:	b510      	push	{r4, lr}
    6942:	4c12      	ldr	r4, [pc, #72]	; (698c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    6944:	6820      	ldr	r0, [r4, #0]
    6946:	f000 f825 	bl	6994 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    694a:	6820      	ldr	r0, [r4, #0]
    694c:	f007 f9f4 	bl	dd38 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6950:	2800      	cmp	r0, #0
    6952:	6820      	ldr	r0, [r4, #0]
    6954:	d00b      	beq.n	696e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    6956:	490e      	ldr	r1, [pc, #56]	; (6990 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    6958:	780a      	ldrb	r2, [r1, #0]
    695a:	2a02      	cmp	r2, #2
    695c:	d00b      	beq.n	6976 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    695e:	780a      	ldrb	r2, [r1, #0]
    6960:	2a03      	cmp	r2, #3
    6962:	d008      	beq.n	6976 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    6964:	f640 31fe 	movw	r1, #3070	; 0xbfe
    6968:	202d      	movs	r0, #45	; 0x2d
    696a:	f7fd f9b9 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    696e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6972:	f000 ba15 	b.w	6da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6976:	68a2      	ldr	r2, [r4, #8]
    6978:	7809      	ldrb	r1, [r1, #0]
    697a:	68d2      	ldr	r2, [r2, #12]
    697c:	f06f 0307 	mvn.w	r3, #7
    6980:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6984:	5851      	ldr	r1, [r2, r1]
    6986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    698a:	4708      	bx	r1
    698c:	200000f8 	.word	0x200000f8
    6990:	20000edc 	.word	0x20000edc
    6994:	b510      	push	{r4, lr}
    6996:	7b01      	ldrb	r1, [r0, #12]
    6998:	b109      	cbz	r1, 699e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    699a:	f007 f913 	bl	dbc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    699e:	4805      	ldr	r0, [pc, #20]	; (69b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    69a0:	7b80      	ldrb	r0, [r0, #14]
    69a2:	2800      	cmp	r0, #0
    69a4:	d005      	beq.n	69b2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    69a6:	f003 ff31 	bl	a80c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    69aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    69ae:	f003 bd11 	b.w	a3d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    69b2:	bd10      	pop	{r4, pc}
    69b4:	20000edc 	.word	0x20000edc

000069b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    69b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69bc:	4d58      	ldr	r5, [pc, #352]	; (6b20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    69be:	4604      	mov	r4, r0
    69c0:	b088      	sub	sp, #32
    69c2:	7828      	ldrb	r0, [r5, #0]
    69c4:	bbf0      	cbnz	r0, 6a44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    69c6:	7820      	ldrb	r0, [r4, #0]
    69c8:	28ff      	cmp	r0, #255	; 0xff
    69ca:	d03c      	beq.n	6a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    69cc:	2600      	movs	r6, #0
    69ce:	81ae      	strh	r6, [r5, #12]
    69d0:	606e      	str	r6, [r5, #4]
    69d2:	706e      	strb	r6, [r5, #1]
    69d4:	70ae      	strb	r6, [r5, #2]
    69d6:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    69da:	4b52      	ldr	r3, [pc, #328]	; (6b24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    69dc:	f8df 8148 	ldr.w	r8, [pc, #328]	; 6b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    69e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    69e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    69e6:	f8d8 0008 	ldr.w	r0, [r8, #8]
    69ea:	6840      	ldr	r0, [r0, #4]
    69ec:	9003      	str	r0, [sp, #12]
    69ee:	4668      	mov	r0, sp
    69f0:	f004 f844 	bl	aa7c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    69f4:	f004 f94c 	bl	ac90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    69f8:	f004 fbb8 	bl	b16c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    69fc:	f003 ff06 	bl	a80c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a00:	f003 fce8 	bl	a3d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a04:	4849      	ldr	r0, [pc, #292]	; (6b2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    6a06:	f004 fa9d 	bl	af44 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6a0a:	4846      	ldr	r0, [pc, #280]	; (6b24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    6a0c:	1f00      	subs	r0, r0, #4
    6a0e:	f004 faa3 	bl	af58 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    6a12:	f104 0020 	add.w	r0, r4, #32
    6a16:	4607      	mov	r7, r0
    6a18:	f007 f941 	bl	dc9e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6a1c:	4638      	mov	r0, r7
    6a1e:	f007 f903 	bl	dc28 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6a22:	4601      	mov	r1, r0
    6a24:	4620      	mov	r0, r4
    6a26:	f007 f8c2 	bl	dbae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6a2a:	f994 000e 	ldrsb.w	r0, [r4, #14]
    6a2e:	f004 f9b5 	bl	ad9c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6a32:	7921      	ldrb	r1, [r4, #4]
    6a34:	2000      	movs	r0, #0
    6a36:	f003 ffa5 	bl	a984 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6a3a:	60a8      	str	r0, [r5, #8]
    6a3c:	b138      	cbz	r0, 6a4e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
    6a3e:	7ea0      	ldrb	r0, [r4, #26]
    6a40:	b968      	cbnz	r0, 6a5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6a42:	e007      	b.n	6a54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    6a44:	e7ff      	b.n	6a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    6a46:	200c      	movs	r0, #12
    6a48:	b008      	add	sp, #32
    6a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a4e:	2001      	movs	r0, #1
    6a50:	7028      	strb	r0, [r5, #0]
    6a52:	e062      	b.n	6b1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    6a54:	7e20      	ldrb	r0, [r4, #24]
    6a56:	b910      	cbnz	r0, 6a5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6a58:	78a0      	ldrb	r0, [r4, #2]
    6a5a:	0740      	lsls	r0, r0, #29
    6a5c:	d529      	bpl.n	6ab2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    6a5e:	f004 fe18 	bl	b692 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6a62:	4682      	mov	sl, r0
    6a64:	4651      	mov	r1, sl
    6a66:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6a68:	f7fa fd6a 	bl	1540 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    6a6c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 6b30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    6a70:	4607      	mov	r7, r0
    6a72:	fb90 f1f9 	sdiv	r1, r0, r9
    6a76:	fb09 7011 	mls	r0, r9, r1, r7
    6a7a:	4241      	negs	r1, r0
    6a7c:	4650      	mov	r0, sl
    6a7e:	f7fa fd2d 	bl	14dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6a82:	6460      	str	r0, [r4, #68]	; 0x44
    6a84:	fb97 f0f9 	sdiv	r0, r7, r9
    6a88:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6a8a:	4408      	add	r0, r1
    6a8c:	6420      	str	r0, [r4, #64]	; 0x40
    6a8e:	f7fe fedf 	bl	5850 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6a92:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6a94:	4288      	cmp	r0, r1
    6a96:	d80c      	bhi.n	6ab2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    6a98:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    6a9c:	2101      	movs	r1, #1
    6a9e:	4620      	mov	r0, r4
    6aa0:	f007 f849 	bl	db36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6aa4:	78a0      	ldrb	r0, [r4, #2]
    6aa6:	0740      	lsls	r0, r0, #29
    6aa8:	d503      	bpl.n	6ab2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    6aaa:	2101      	movs	r1, #1
    6aac:	4620      	mov	r0, r4
    6aae:	f000 fab1 	bl	7014 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    6ab2:	f104 0130 	add.w	r1, r4, #48	; 0x30
    6ab6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6ab8:	f006 f88b 	bl	cbd2 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    6abc:	f104 0138 	add.w	r1, r4, #56	; 0x38
    6ac0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6ac2:	f006 f889 	bl	cbd8 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    6ac6:	f7fe ff29 	bl	591c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    6aca:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6ace:	1cc0      	adds	r0, r0, #3
    6ad0:	f006 f947 	bl	cd62 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6ad4:	73a8      	strb	r0, [r5, #14]
    6ad6:	78a0      	ldrb	r0, [r4, #2]
    6ad8:	07c0      	lsls	r0, r0, #31
    6ada:	d01e      	beq.n	6b1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    6adc:	a904      	add	r1, sp, #16
    6ade:	2000      	movs	r0, #0
    6ae0:	f005 ff51 	bl	c986 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    6ae4:	b120      	cbz	r0, 6af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138>
    6ae6:	f640 11c9 	movw	r1, #2505	; 0x9c9
    6aea:	202d      	movs	r0, #45	; 0x2d
    6aec:	f7fd f8f8 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6af0:	20ff      	movs	r0, #255	; 0xff
    6af2:	73e8      	strb	r0, [r5, #15]
    6af4:	e00c      	b.n	6b10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    6af6:	9806      	ldr	r0, [sp, #24]
    6af8:	69e1      	ldr	r1, [r4, #28]
    6afa:	4281      	cmp	r1, r0
    6afc:	d008      	beq.n	6b10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    6afe:	7881      	ldrb	r1, [r0, #2]
    6b00:	73e9      	strb	r1, [r5, #15]
    6b02:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6b06:	6129      	str	r1, [r5, #16]
    6b08:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6b0c:	82a8      	strh	r0, [r5, #20]
    6b0e:	e004      	b.n	6b1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    6b10:	a804      	add	r0, sp, #16
    6b12:	f7fd fb1d 	bl	4150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6b16:	2800      	cmp	r0, #0
    6b18:	d0ed      	beq.n	6af6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    6b1a:	2000      	movs	r0, #0
    6b1c:	e794      	b.n	6a48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    6b1e:	0000      	.short	0x0000
    6b20:	20000edc 	.word	0x20000edc
    6b24:	00007128 	.word	0x00007128
    6b28:	200000f8 	.word	0x200000f8
    6b2c:	8e89bed6 	.word	0x8e89bed6
    6b30:	000f4240 	.word	0x000f4240
    6b34:	b510      	push	{r4, lr}
    6b36:	4604      	mov	r4, r0
    6b38:	f7ff ff3e 	bl	69b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6b3c:	2800      	cmp	r0, #0
    6b3e:	d108      	bne.n	6b52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    6b40:	4804      	ldr	r0, [pc, #16]	; (6b54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    6b42:	7800      	ldrb	r0, [r0, #0]
    6b44:	2801      	cmp	r0, #1
    6b46:	d003      	beq.n	6b50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    6b48:	2100      	movs	r1, #0
    6b4a:	4620      	mov	r0, r4
    6b4c:	f7ff fdb4 	bl	66b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6b50:	2000      	movs	r0, #0
    6b52:	bd10      	pop	{r4, pc}
    6b54:	20000edc 	.word	0x20000edc
    6b58:	480a      	ldr	r0, [pc, #40]	; (6b84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    6b5a:	b510      	push	{r4, lr}
    6b5c:	490a      	ldr	r1, [pc, #40]	; (6b88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    6b5e:	6804      	ldr	r4, [r0, #0]
    6b60:	7808      	ldrb	r0, [r1, #0]
    6b62:	2800      	cmp	r0, #0
    6b64:	d00d      	beq.n	6b82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    6b66:	7808      	ldrb	r0, [r1, #0]
    6b68:	2802      	cmp	r0, #2
    6b6a:	d002      	beq.n	6b72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    6b6c:	7808      	ldrb	r0, [r1, #0]
    6b6e:	2803      	cmp	r0, #3
    6b70:	d102      	bne.n	6b78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    6b72:	4620      	mov	r0, r4
    6b74:	f7ff ff0e 	bl	6994 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    6b78:	4620      	mov	r0, r4
    6b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b7e:	f000 b90f 	b.w	6da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6b82:	bd10      	pop	{r4, pc}
    6b84:	200000f8 	.word	0x200000f8
    6b88:	20000edc 	.word	0x20000edc
    6b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b90:	4604      	mov	r4, r0
    6b92:	4827      	ldr	r0, [pc, #156]	; (6c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    6b94:	460d      	mov	r5, r1
    6b96:	6840      	ldr	r0, [r0, #4]
    6b98:	f004 f906 	bl	ada8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6b9c:	4e25      	ldr	r6, [pc, #148]	; (6c34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    6b9e:	2004      	movs	r0, #4
    6ba0:	7030      	strb	r0, [r6, #0]
    6ba2:	b325      	cbz	r5, 6bee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    6ba4:	8860      	ldrh	r0, [r4, #2]
    6ba6:	2810      	cmp	r0, #16
    6ba8:	d02a      	beq.n	6c00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    6baa:	f104 0020 	add.w	r0, r4, #32
    6bae:	4680      	mov	r8, r0
    6bb0:	68b5      	ldr	r5, [r6, #8]
    6bb2:	f007 f82d 	bl	dc10 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6bb6:	4607      	mov	r7, r0
    6bb8:	4640      	mov	r0, r8
    6bba:	f007 f852 	bl	dc62 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6bbe:	1a38      	subs	r0, r7, r0
    6bc0:	1e40      	subs	r0, r0, #1
    6bc2:	b2c0      	uxtb	r0, r0
    6bc4:	8861      	ldrh	r1, [r4, #2]
    6bc6:	2228      	movs	r2, #40	; 0x28
    6bc8:	f000 faea 	bl	71a0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    6bcc:	4405      	add	r5, r0
    6bce:	78a0      	ldrb	r0, [r4, #2]
    6bd0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6bd4:	b130      	cbz	r0, 6be4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    6bd6:	6870      	ldr	r0, [r6, #4]
    6bd8:	4405      	add	r5, r0
    6bda:	f007 f89b 	bl	dd14 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    6bde:	4428      	add	r0, r5
    6be0:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    6be4:	7922      	ldrb	r2, [r4, #4]
    6be6:	4629      	mov	r1, r5
    6be8:	2000      	movs	r0, #0
    6bea:	f004 f8ed 	bl	adc8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6bee:	8860      	ldrh	r0, [r4, #2]
    6bf0:	2813      	cmp	r0, #19
    6bf2:	d013      	beq.n	6c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6bf4:	dc09      	bgt.n	6c0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    6bf6:	2810      	cmp	r0, #16
    6bf8:	d017      	beq.n	6c2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    6bfa:	2812      	cmp	r0, #18
    6bfc:	d109      	bne.n	6c12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    6bfe:	e00d      	b.n	6c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6c00:	7921      	ldrb	r1, [r4, #4]
    6c02:	2000      	movs	r0, #0
    6c04:	f003 fe72 	bl	a8ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6c08:	e7f1      	b.n	6bee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    6c0a:	2815      	cmp	r0, #21
    6c0c:	d006      	beq.n	6c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6c0e:	281d      	cmp	r0, #29
    6c10:	d004      	beq.n	6c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6c12:	f640 5185 	movw	r1, #3461	; 0xd85
    6c16:	202d      	movs	r0, #45	; 0x2d
    6c18:	f7fd f862 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c1c:	7922      	ldrb	r2, [r4, #4]
    6c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6c22:	2101      	movs	r1, #1
    6c24:	2000      	movs	r0, #0
    6c26:	f004 b94b 	b.w	aec0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c2e:	0000      	.short	0x0000
    6c30:	200000f8 	.word	0x200000f8
    6c34:	20000edc 	.word	0x20000edc
    6c38:	b510      	push	{r4, lr}
    6c3a:	4604      	mov	r4, r0
    6c3c:	7800      	ldrb	r0, [r0, #0]
    6c3e:	460b      	mov	r3, r1
    6c40:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    6c44:	29ff      	cmp	r1, #255	; 0xff
    6c46:	d010      	beq.n	6c6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    6c48:	f104 0297 	add.w	r2, r4, #151	; 0x97
    6c4c:	1e51      	subs	r1, r2, #1
    6c4e:	4618      	mov	r0, r3
    6c50:	f7fe fd7c 	bl	574c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6c54:	b130      	cbz	r0, 6c64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    6c56:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    6c5a:	f040 0002 	orr.w	r0, r0, #2
    6c5e:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    6c62:	e011      	b.n	6c88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    6c64:	f640 71bc 	movw	r1, #4028	; 0xfbc
    6c68:	e020      	b.n	6cac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
    6c6a:	4812      	ldr	r0, [pc, #72]	; (6cb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>)
    6c6c:	6840      	ldr	r0, [r0, #4]
    6c6e:	7801      	ldrb	r1, [r0, #0]
    6c70:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6c74:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    6c78:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6c7c:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    6c80:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6c84:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    6c88:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6c8c:	287f      	cmp	r0, #127	; 0x7f
    6c8e:	d00b      	beq.n	6ca8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f0>
    6c90:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    6c94:	207f      	movs	r0, #127	; 0x7f
    6c96:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    6c9a:	347e      	adds	r4, #126	; 0x7e
    6c9c:	2001      	movs	r0, #1
    6c9e:	75a0      	strb	r0, [r4, #22]
    6ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ca4:	f7ff b9a8 	b.w	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6ca8:	f640 6137 	movw	r1, #3639	; 0xe37
    6cac:	202d      	movs	r0, #45	; 0x2d
    6cae:	f7fd f817 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cb2:	0000      	.short	0x0000
    6cb4:	200000f8 	.word	0x200000f8
    6cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6cbc:	4690      	mov	r8, r2
    6cbe:	460e      	mov	r6, r1
    6cc0:	4604      	mov	r4, r0
    6cc2:	2903      	cmp	r1, #3
    6cc4:	d004      	beq.n	6cd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    6cc6:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    6cca:	b108      	cbz	r0, 6cd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    6ccc:	2001      	movs	r0, #1
    6cce:	e000      	b.n	6cd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    6cd0:	2000      	movs	r0, #0
    6cd2:	4681      	mov	r9, r0
    6cd4:	f003 fdb4 	bl	a840 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6cd8:	4605      	mov	r5, r0
    6cda:	2e03      	cmp	r6, #3
    6cdc:	d003      	beq.n	6ce6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32e>
    6cde:	2701      	movs	r7, #1
    6ce0:	2e05      	cmp	r6, #5
    6ce2:	d005      	beq.n	6cf0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    6ce4:	e008      	b.n	6cf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    6ce6:	78a0      	ldrb	r0, [r4, #2]
    6ce8:	2702      	movs	r7, #2
    6cea:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6cee:	e001      	b.n	6cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    6cf0:	78a0      	ldrb	r0, [r4, #2]
    6cf2:	07c0      	lsls	r0, r0, #31
    6cf4:	2800      	cmp	r0, #0
    6cf6:	d04a      	beq.n	6d8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    6cf8:	f1b9 0f00 	cmp.w	r9, #0
    6cfc:	d146      	bne.n	6d8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    6cfe:	4826      	ldr	r0, [pc, #152]	; (6d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e0>)
    6d00:	7b80      	ldrb	r0, [r0, #14]
    6d02:	b140      	cbz	r0, 6d16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    6d04:	f006 f830 	bl	cd68 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6d08:	f888 0000 	strb.w	r0, [r8]
    6d0c:	28ff      	cmp	r0, #255	; 0xff
    6d0e:	d002      	beq.n	6d16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    6d10:	f7fe fd36 	bl	5780 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6d14:	4305      	orrs	r5, r0
    6d16:	4e21      	ldr	r6, [pc, #132]	; (6d9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
    6d18:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    6d1c:	6870      	ldr	r0, [r6, #4]
    6d1e:	7801      	ldrb	r1, [r0, #0]
    6d20:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6d24:	4291      	cmp	r1, r2
    6d26:	d106      	bne.n	6d36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    6d28:	2206      	movs	r2, #6
    6d2a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6d2e:	1cc0      	adds	r0, r0, #3
    6d30:	f004 fe12 	bl	b958 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6d34:	b130      	cbz	r0, 6d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    6d36:	2000      	movs	r0, #0
    6d38:	f898 1000 	ldrb.w	r1, [r8]
    6d3c:	29ff      	cmp	r1, #255	; 0xff
    6d3e:	d007      	beq.n	6d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x398>
    6d40:	b9a8      	cbnz	r0, 6d6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6d42:	e001      	b.n	6d48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
    6d44:	2001      	movs	r0, #1
    6d46:	e7f7      	b.n	6d38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
    6d48:	7e60      	ldrb	r0, [r4, #25]
    6d4a:	4288      	cmp	r0, r1
    6d4c:	d00f      	beq.n	6d6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6d4e:	e008      	b.n	6d62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    6d50:	b138      	cbz	r0, 6d62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    6d52:	6871      	ldr	r1, [r6, #4]
    6d54:	f811 0b03 	ldrb.w	r0, [r1], #3
    6d58:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6d5c:	f006 fea9 	bl	dab2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6d60:	b128      	cbz	r0, 6d6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6d62:	2000      	movs	r0, #0
    6d64:	78a1      	ldrb	r1, [r4, #2]
    6d66:	0749      	lsls	r1, r1, #29
    6d68:	d503      	bpl.n	6d72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    6d6a:	b990      	cbnz	r0, 6d92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6d6c:	e00e      	b.n	6d8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    6d6e:	2001      	movs	r0, #1
    6d70:	e7f8      	b.n	6d64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    6d72:	b975      	cbnz	r5, 6d92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6d74:	7be0      	ldrb	r0, [r4, #15]
    6d76:	b108      	cbz	r0, 6d7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    6d78:	42b8      	cmp	r0, r7
    6d7a:	d107      	bne.n	6d8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    6d7c:	6871      	ldr	r1, [r6, #4]
    6d7e:	f811 0b03 	ldrb.w	r0, [r1], #3
    6d82:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6d86:	f006 fe94 	bl	dab2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6d8a:	b110      	cbz	r0, 6d92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6d8c:	2000      	movs	r0, #0
    6d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d92:	2001      	movs	r0, #1
    6d94:	e7fb      	b.n	6d8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    6d96:	0000      	.short	0x0000
    6d98:	20000edc 	.word	0x20000edc
    6d9c:	200000f8 	.word	0x200000f8
    6da0:	b570      	push	{r4, r5, r6, lr}
    6da2:	4604      	mov	r4, r0
    6da4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6da6:	4d13      	ldr	r5, [pc, #76]	; (6df4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>)
    6da8:	1c40      	adds	r0, r0, #1
    6daa:	62a0      	str	r0, [r4, #40]	; 0x28
    6dac:	7ba8      	ldrb	r0, [r5, #14]
    6dae:	2600      	movs	r6, #0
    6db0:	b120      	cbz	r0, 6dbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    6db2:	f003 fd2b 	bl	a80c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6db6:	f003 fb0d 	bl	a3d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6dba:	73ae      	strb	r6, [r5, #14]
    6dbc:	702e      	strb	r6, [r5, #0]
    6dbe:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    6dc2:	b108      	cbz	r0, 6dc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>
    6dc4:	2101      	movs	r1, #1
    6dc6:	e00f      	b.n	6de8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    6dc8:	7b60      	ldrb	r0, [r4, #13]
    6dca:	b160      	cbz	r0, 6de6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    6dcc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6dce:	4288      	cmp	r0, r1
    6dd0:	d809      	bhi.n	6de6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    6dd2:	2101      	movs	r1, #1
    6dd4:	4620      	mov	r0, r4
    6dd6:	f006 ffc4 	bl	dd62 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6dda:	78a0      	ldrb	r0, [r4, #2]
    6ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6de0:	07c0      	lsls	r0, r0, #31
    6de2:	f7ff b909 	b.w	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6de6:	2100      	movs	r1, #0
    6de8:	4620      	mov	r0, r4
    6dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6dee:	f006 bfb8 	b.w	dd62 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6df2:	0000      	.short	0x0000
    6df4:	20000edc 	.word	0x20000edc
    6df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6dfc:	4604      	mov	r4, r0
    6dfe:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6e02:	4617      	mov	r7, r2
    6e04:	460d      	mov	r5, r1
    6e06:	f88d 0000 	strb.w	r0, [sp]
    6e0a:	9800      	ldr	r0, [sp, #0]
    6e0c:	9000      	str	r0, [sp, #0]
    6e0e:	f89d 0000 	ldrb.w	r0, [sp]
    6e12:	b110      	cbz	r0, 6e1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x462>
    6e14:	f640 4132 	movw	r1, #3122	; 0xc32
    6e18:	e054      	b.n	6ec4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    6e1a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    6e1e:	8828      	ldrh	r0, [r5, #0]
    6e20:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    6e24:	2b00      	cmp	r3, #0
    6e26:	d15d      	bne.n	6ee4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
    6e28:	68e8      	ldr	r0, [r5, #12]
    6e2a:	f005 fffb 	bl	ce24 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6e2e:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    6e32:	8aa8      	ldrh	r0, [r5, #20]
    6e34:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    6e38:	8ae8      	ldrh	r0, [r5, #22]
    6e3a:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    6e3e:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
    6e42:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    6e46:	7e21      	ldrb	r1, [r4, #24]
    6e48:	f104 0849 	add.w	r8, r4, #73	; 0x49
    6e4c:	2600      	movs	r6, #0
    6e4e:	b129      	cbz	r1, 6e5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a4>
    6e50:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6e54:	4641      	mov	r1, r8
    6e56:	f006 fd44 	bl	d8e2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6e5a:	b940      	cbnz	r0, 6e6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b6>
    6e5c:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    6e60:	b170      	cbz	r0, 6e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    6e62:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6e66:	4641      	mov	r1, r8
    6e68:	f006 fd32 	bl	d8d0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6e6c:	b140      	cbz	r0, 6e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    6e6e:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    6e72:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    6e76:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    6e7a:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    6e7e:	e003      	b.n	6e88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    6e80:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    6e84:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    6e88:	4817      	ldr	r0, [pc, #92]	; (6ee8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>)
    6e8a:	2fff      	cmp	r7, #255	; 0xff
    6e8c:	6840      	ldr	r0, [r0, #4]
    6e8e:	7801      	ldrb	r1, [r0, #0]
    6e90:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6e94:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    6e98:	f850 1f03 	ldr.w	r1, [r0, #3]!
    6e9c:	d015      	beq.n	6eca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
    6e9e:	67a1      	str	r1, [r4, #120]	; 0x78
    6ea0:	8880      	ldrh	r0, [r0, #4]
    6ea2:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    6ea6:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    6eaa:	1e51      	subs	r1, r2, #1
    6eac:	4638      	mov	r0, r7
    6eae:	f7fe fc4d 	bl	574c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6eb2:	b128      	cbz	r0, 6ec0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    6eb4:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    6eb8:	f040 0002 	orr.w	r0, r0, #2
    6ebc:	7020      	strb	r0, [r4, #0]
    6ebe:	e00a      	b.n	6ed6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    6ec0:	f640 4153 	movw	r1, #3155	; 0xc53
    6ec4:	202d      	movs	r0, #45	; 0x2d
    6ec6:	f7fc ff0b 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6eca:	f844 1f6c 	str.w	r1, [r4, #108]!
    6ece:	8880      	ldrh	r0, [r0, #4]
    6ed0:	80a0      	strh	r0, [r4, #4]
    6ed2:	60e6      	str	r6, [r4, #12]
    6ed4:	8226      	strh	r6, [r4, #16]
    6ed6:	8828      	ldrh	r0, [r5, #0]
    6ed8:	f7fd fb1c 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6edc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ee0:	f005 bc2e 	b.w	c740 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6ee8:	200000f8 	.word	0x200000f8
    6eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ef0:	4604      	mov	r4, r0
    6ef2:	20ff      	movs	r0, #255	; 0xff
    6ef4:	f88d 0000 	strb.w	r0, [sp]
    6ef8:	2601      	movs	r6, #1
    6efa:	466a      	mov	r2, sp
    6efc:	2105      	movs	r1, #5
    6efe:	4620      	mov	r0, r4
    6f00:	f7ff feda 	bl	6cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    6f04:	b3e8      	cbz	r0, 6f82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    6f06:	4d24      	ldr	r5, [pc, #144]	; (6f98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    6f08:	4f24      	ldr	r7, [pc, #144]	; (6f9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    6f0a:	46b0      	mov	r8, r6
    6f0c:	6868      	ldr	r0, [r5, #4]
    6f0e:	7bfa      	ldrb	r2, [r7, #15]
    6f10:	f04f 0900 	mov.w	r9, #0
    6f14:	7801      	ldrb	r1, [r0, #0]
    6f16:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6f1a:	4291      	cmp	r1, r2
    6f1c:	d106      	bne.n	6f2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    6f1e:	2206      	movs	r2, #6
    6f20:	f107 0110 	add.w	r1, r7, #16
    6f24:	1cc0      	adds	r0, r0, #3
    6f26:	f004 fd17 	bl	b958 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6f2a:	b350      	cbz	r0, 6f82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    6f2c:	686a      	ldr	r2, [r5, #4]
    6f2e:	69e0      	ldr	r0, [r4, #28]
    6f30:	7812      	ldrb	r2, [r2, #0]
    6f32:	f810 1f85 	ldrb.w	r1, [r0, #133]!
    6f36:	f3c2 1240 	ubfx	r2, r2, #5, #1
    6f3a:	4011      	ands	r1, r2
    6f3c:	7001      	strb	r1, [r0, #0]
    6f3e:	2201      	movs	r2, #1
    6f40:	4620      	mov	r0, r4
    6f42:	69e1      	ldr	r1, [r4, #28]
    6f44:	f000 f894 	bl	7070 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
    6f48:	2300      	movs	r3, #0
    6f4a:	f89d 2000 	ldrb.w	r2, [sp]
    6f4e:	4620      	mov	r0, r4
    6f50:	69e1      	ldr	r1, [r4, #28]
    6f52:	f7ff ff51 	bl	6df8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    6f56:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
    6f5a:	f7ff f84d 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6f5e:	f887 9000 	strb.w	r9, [r7]
    6f62:	2200      	movs	r2, #0
    6f64:	4621      	mov	r1, r4
    6f66:	69e0      	ldr	r0, [r4, #28]
    6f68:	f000 fa58 	bl	741c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    6f6c:	6868      	ldr	r0, [r5, #4]
    6f6e:	69e1      	ldr	r1, [r4, #28]
    6f70:	f8d0 2003 	ldr.w	r2, [r0, #3]
    6f74:	f841 2f03 	str.w	r2, [r1, #3]!
    6f78:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    6f7c:	808a      	strh	r2, [r1, #4]
    6f7e:	7800      	ldrb	r0, [r0, #0]
    6f80:	e000      	b.n	6f84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
    6f82:	e004      	b.n	6f8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
    6f84:	69e1      	ldr	r1, [r4, #28]
    6f86:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6f8a:	7088      	strb	r0, [r1, #2]
    6f8c:	e000      	b.n	6f90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
    6f8e:	2600      	movs	r6, #0
    6f90:	4630      	mov	r0, r6
    6f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6f96:	0000      	.short	0x0000
    6f98:	200000f8 	.word	0x200000f8
    6f9c:	20000edc 	.word	0x20000edc
    6fa0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6fa2:	4604      	mov	r4, r0
    6fa4:	20ff      	movs	r0, #255	; 0xff
    6fa6:	f88d 0000 	strb.w	r0, [sp]
    6faa:	2501      	movs	r5, #1
    6fac:	466a      	mov	r2, sp
    6fae:	2103      	movs	r1, #3
    6fb0:	4620      	mov	r0, r4
    6fb2:	f7ff fe81 	bl	6cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    6fb6:	b328      	cbz	r0, 7004 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
    6fb8:	7b20      	ldrb	r0, [r4, #12]
    6fba:	b168      	cbz	r0, 6fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    6fbc:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    6fc0:	f88d 0004 	strb.w	r0, [sp, #4]
    6fc4:	9801      	ldr	r0, [sp, #4]
    6fc6:	9001      	str	r0, [sp, #4]
    6fc8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6fcc:	b920      	cbnz	r0, 6fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    6fce:	f89d 1000 	ldrb.w	r1, [sp]
    6fd2:	4620      	mov	r0, r4
    6fd4:	f7ff fe30 	bl	6c38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    6fd8:	4e0c      	ldr	r6, [pc, #48]	; (700c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    6fda:	2100      	movs	r1, #0
    6fdc:	6870      	ldr	r0, [r6, #4]
    6fde:	8001      	strh	r1, [r0, #0]
    6fe0:	2104      	movs	r1, #4
    6fe2:	f006 fa3e 	bl	d462 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6fe6:	4620      	mov	r0, r4
    6fe8:	f000 f88a 	bl	7100 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    6fec:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    6fee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6ff0:	6870      	ldr	r0, [r6, #4]
    6ff2:	f006 fa6d 	bl	d4d0 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    6ff6:	4906      	ldr	r1, [pc, #24]	; (7010 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    6ff8:	2005      	movs	r0, #5
    6ffa:	7008      	strb	r0, [r1, #0]
    6ffc:	6870      	ldr	r0, [r6, #4]
    6ffe:	f003 fed3 	bl	ada8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7002:	e000      	b.n	7006 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
    7004:	2500      	movs	r5, #0
    7006:	4628      	mov	r0, r5
    7008:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    700a:	0000      	.short	0x0000
    700c:	200000f8 	.word	0x200000f8
    7010:	20000edc 	.word	0x20000edc
    7014:	b570      	push	{r4, r5, r6, lr}
    7016:	4604      	mov	r4, r0
    7018:	460e      	mov	r6, r1
    701a:	7e40      	ldrb	r0, [r0, #25]
    701c:	f7fe fb64 	bl	56e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7020:	0005      	movs	r5, r0
    7022:	d019      	beq.n	7058 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    7024:	2110      	movs	r1, #16
    7026:	f006 f889 	bl	d13c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    702a:	2800      	cmp	r0, #0
    702c:	d114      	bne.n	7058 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    702e:	2001      	movs	r0, #1
    7030:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7034:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7038:	4632      	mov	r2, r6
    703a:	460c      	mov	r4, r1
    703c:	4628      	mov	r0, r5
    703e:	f005 fe35 	bl	ccac <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7042:	4621      	mov	r1, r4
    7044:	4c05      	ldr	r4, [pc, #20]	; (705c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    7046:	6860      	ldr	r0, [r4, #4]
    7048:	f006 fa26 	bl	d498 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    704c:	6860      	ldr	r0, [r4, #4]
    704e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7052:	2101      	movs	r1, #1
    7054:	f006 ba26 	b.w	d4a4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7058:	bd70      	pop	{r4, r5, r6, pc}
    705a:	0000      	.short	0x0000
    705c:	200000f8 	.word	0x200000f8
    7060:	4802      	ldr	r0, [pc, #8]	; (706c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    7062:	2101      	movs	r1, #1
    7064:	6800      	ldr	r0, [r0, #0]
    7066:	f7ff bb27 	b.w	66b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    706a:	0000      	.short	0x0000
    706c:	200000f8 	.word	0x200000f8
    7070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7074:	4e21      	ldr	r6, [pc, #132]	; (70fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>)
    7076:	4680      	mov	r8, r0
    7078:	460c      	mov	r4, r1
    707a:	6870      	ldr	r0, [r6, #4]
    707c:	4615      	mov	r5, r2
    707e:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7082:	6121      	str	r1, [r4, #16]
    7084:	8881      	ldrh	r1, [r0, #4]
    7086:	8321      	strh	r1, [r4, #24]
    7088:	7981      	ldrb	r1, [r0, #6]
    708a:	76a1      	strb	r1, [r4, #26]
    708c:	8940      	ldrh	r0, [r0, #10]
    708e:	f005 fec5 	bl	ce1c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7092:	4607      	mov	r7, r0
    7094:	60e0      	str	r0, [r4, #12]
    7096:	6870      	ldr	r0, [r6, #4]
    7098:	4639      	mov	r1, r7
    709a:	7d80      	ldrb	r0, [r0, #22]
    709c:	f006 f849 	bl	d132 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    70a0:	83a0      	strh	r0, [r4, #28]
    70a2:	6870      	ldr	r0, [r6, #4]
    70a4:	4639      	mov	r1, r7
    70a6:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    70aa:	f006 f83e 	bl	d12a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    70ae:	6220      	str	r0, [r4, #32]
    70b0:	6870      	ldr	r0, [r6, #4]
    70b2:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    70b6:	82a1      	strh	r1, [r4, #20]
    70b8:	8841      	ldrh	r1, [r0, #2]
    70ba:	82e1      	strh	r1, [r4, #22]
    70bc:	6841      	ldr	r1, [r0, #4]
    70be:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    70c2:	7a01      	ldrb	r1, [r0, #8]
    70c4:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
    70c8:	7a41      	ldrb	r1, [r0, #9]
    70ca:	f001 011f 	and.w	r1, r1, #31
    70ce:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    70d2:	7a40      	ldrb	r0, [r0, #9]
    70d4:	0940      	lsrs	r0, r0, #5
    70d6:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
    70da:	f104 0062 	add.w	r0, r4, #98	; 0x62
    70de:	7205      	strb	r5, [r0, #8]
    70e0:	7245      	strb	r5, [r0, #9]
    70e2:	2101      	movs	r1, #1
    70e4:	7281      	strb	r1, [r0, #10]
    70e6:	2100      	movs	r1, #0
    70e8:	3836      	subs	r0, #54	; 0x36
    70ea:	f006 fb65 	bl	d7b8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    70ee:	f898 000e 	ldrb.w	r0, [r8, #14]
    70f2:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    70f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70fa:	0000      	.short	0x0000
    70fc:	200000f8 	.word	0x200000f8
    7100:	b570      	push	{r4, r5, r6, lr}
    7102:	4d07      	ldr	r5, [pc, #28]	; (7120 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x768>)
    7104:	4604      	mov	r4, r0
    7106:	f100 0149 	add.w	r1, r0, #73	; 0x49
    710a:	6868      	ldr	r0, [r5, #4]
    710c:	f006 f9d1 	bl	d4b2 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7110:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    7114:	6868      	ldr	r0, [r5, #4]
    7116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    711a:	f006 b9d0 	b.w	d4be <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    711e:	0000      	.short	0x0000
    7120:	200000f8 	.word	0x200000f8
    7124:	00555555 	.word	0x00555555
    7128:	00006941 	.word	0x00006941
    712c:	000067cd 	.word	0x000067cd
    7130:	000068bd 	.word	0x000068bd
    7134:	00000000 	.word	0x00000000
    7138:	00006895 	.word	0x00006895
    713c:	000068ed 	.word	0x000068ed
    7140:	0000dad9 	.word	0x0000dad9
    7144:	0000dadf 	.word	0x0000dadf
    7148:	00006b35 	.word	0x00006b35
    714c:	00006b59 	.word	0x00006b59
    7150:	00007061 	.word	0x00007061
    7154:	00007144 	.word	0x00007144
    7158:	0000713c 	.word	0x0000713c
    715c:	00007138 	.word	0x00007138

00007160 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7160:	b510      	push	{r4, lr}
    7162:	1e42      	subs	r2, r0, #1
    7164:	2a02      	cmp	r2, #2
    7166:	d901      	bls.n	716c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7168:	21ca      	movs	r1, #202	; 0xca
    716a:	e009      	b.n	7180 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    716c:	1e40      	subs	r0, r0, #1
    716e:	2910      	cmp	r1, #16
    7170:	d009      	beq.n	7186 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7172:	2912      	cmp	r1, #18
    7174:	d00c      	beq.n	7190 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7176:	2913      	cmp	r1, #19
    7178:	d00a      	beq.n	7190 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    717a:	2915      	cmp	r1, #21
    717c:	d005      	beq.n	718a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    717e:	21d8      	movs	r1, #216	; 0xd8
    7180:	202f      	movs	r0, #47	; 0x2f
    7182:	f7fc fdad 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7186:	4905      	ldr	r1, [pc, #20]	; (719c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7188:	e004      	b.n	7194 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    718a:	4904      	ldr	r1, [pc, #16]	; (719c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    718c:	1d89      	adds	r1, r1, #6
    718e:	e001      	b.n	7194 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7190:	4902      	ldr	r1, [pc, #8]	; (719c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7192:	1f89      	subs	r1, r1, #6
    7194:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7198:	bd10      	pop	{r4, pc}
    719a:	0000      	.short	0x0000
    719c:	0000dd2c 	.word	0x0000dd2c

000071a0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    71a0:	1e42      	subs	r2, r0, #1
    71a2:	b510      	push	{r4, lr}
    71a4:	b2d2      	uxtb	r2, r2
    71a6:	2a01      	cmp	r2, #1
    71a8:	d903      	bls.n	71b2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    71aa:	291d      	cmp	r1, #29
    71ac:	d001      	beq.n	71b2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    71ae:	21ee      	movs	r1, #238	; 0xee
    71b0:	e00d      	b.n	71ce <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    71b2:	2913      	cmp	r1, #19
    71b4:	d013      	beq.n	71de <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    71b6:	dc04      	bgt.n	71c2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    71b8:	2910      	cmp	r1, #16
    71ba:	d00b      	beq.n	71d4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    71bc:	2912      	cmp	r1, #18
    71be:	d104      	bne.n	71ca <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    71c0:	e00d      	b.n	71de <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    71c2:	2915      	cmp	r1, #21
    71c4:	d008      	beq.n	71d8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    71c6:	291d      	cmp	r1, #29
    71c8:	d00e      	beq.n	71e8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    71ca:	f44f 7181 	mov.w	r1, #258	; 0x102
    71ce:	202f      	movs	r0, #47	; 0x2f
    71d0:	f7fc fd86 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71d4:	4807      	ldr	r0, [pc, #28]	; (71f4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    71d6:	e004      	b.n	71e2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    71d8:	4806      	ldr	r0, [pc, #24]	; (71f4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    71da:	3008      	adds	r0, #8
    71dc:	e001      	b.n	71e2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    71de:	4805      	ldr	r0, [pc, #20]	; (71f4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    71e0:	1d00      	adds	r0, r0, #4
    71e2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    71e6:	bd10      	pop	{r4, pc}
    71e8:	f240 315a 	movw	r1, #858	; 0x35a
    71ec:	fb10 f001 	smulbb	r0, r0, r1
    71f0:	bd10      	pop	{r4, pc}
    71f2:	0000      	.short	0x0000
    71f4:	0000dd1a 	.word	0x0000dd1a

000071f8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    71f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71fc:	4604      	mov	r4, r0
    71fe:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    7202:	4615      	mov	r5, r2
    7204:	460f      	mov	r7, r1
    7206:	2800      	cmp	r0, #0
    7208:	d157      	bne.n	72ba <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    720a:	4621      	mov	r1, r4
    720c:	4841      	ldr	r0, [pc, #260]	; (7314 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
    720e:	f7fb f855 	bl	22bc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7212:	4606      	mov	r6, r0
    7214:	2820      	cmp	r0, #32
    7216:	d050      	beq.n	72ba <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    7218:	2234      	movs	r2, #52	; 0x34
    721a:	2100      	movs	r1, #0
    721c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    7220:	f004 fc26 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7224:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    7228:	2601      	movs	r6, #1
    722a:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    722e:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    7232:	b13f      	cbz	r7, 7244 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    7234:	2000      	movs	r0, #0
    7236:	f000 fbf9 	bl	7a2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    723a:	f000 0007 	and.w	r0, r0, #7
    723e:	1c40      	adds	r0, r0, #1
    7240:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
    7244:	4620      	mov	r0, r4
    7246:	f006 ff51 	bl	e0ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    724a:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    724e:	2003      	movs	r0, #3
    7250:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    7254:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    7258:	2700      	movs	r7, #0
    725a:	f804 7fb8 	strb.w	r7, [r4, #184]!
    725e:	f7fa fa99 	bl	1794 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7262:	8921      	ldrh	r1, [r4, #8]
    7264:	3cb8      	subs	r4, #184	; 0xb8
    7266:	4288      	cmp	r0, r1
    7268:	d800      	bhi.n	726c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    726a:	4608      	mov	r0, r1
    726c:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    7270:	fa1f f880 	uxth.w	r8, r0
    7274:	4620      	mov	r0, r4
    7276:	f006 fbdc 	bl	da32 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    727a:	b308      	cbz	r0, 72c0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
    727c:	f008 f998 	bl	f5b0 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7280:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7284:	b281      	uxth	r1, r0
    7286:	4628      	mov	r0, r5
    7288:	f004 fa37 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    728c:	4428      	add	r0, r5
    728e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    7292:	34a4      	adds	r4, #164	; 0xa4
    7294:	f004 f9fd 	bl	b692 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7298:	4641      	mov	r1, r8
    729a:	f7fa f91f 	bl	14dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    729e:	6220      	str	r0, [r4, #32]
    72a0:	f804 7c03 	strb.w	r7, [r4, #-3]
    72a4:	7126      	strb	r6, [r4, #4]
    72a6:	2001      	movs	r0, #1
    72a8:	f006 fd30 	bl	dd0c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    72ac:	f200 1009 	addw	r0, r0, #265	; 0x109
    72b0:	1a28      	subs	r0, r5, r0
    72b2:	62a7      	str	r7, [r4, #40]	; 0x28
    72b4:	60a0      	str	r0, [r4, #8]
    72b6:	3ca4      	subs	r4, #164	; 0xa4
    72b8:	e017      	b.n	72ea <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
    72ba:	200c      	movs	r0, #12
    72bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72c0:	4620      	mov	r0, r4
    72c2:	f006 fe66 	bl	df92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    72c6:	f844 0fbc 	str.w	r0, [r4, #188]!
    72ca:	f804 6c1b 	strb.w	r6, [r4, #-27]
    72ce:	f004 f9e0 	bl	b692 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    72d2:	4606      	mov	r6, r0
    72d4:	2000      	movs	r0, #0
    72d6:	f006 ffb5 	bl	e244 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    72da:	eb00 0108 	add.w	r1, r0, r8
    72de:	4630      	mov	r0, r6
    72e0:	f7fa f8fc 	bl	14dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    72e4:	6125      	str	r5, [r4, #16]
    72e6:	60a0      	str	r0, [r4, #8]
    72e8:	3cbc      	subs	r4, #188	; 0xbc
    72ea:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    72ee:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    72f2:	f006 fef9 	bl	e0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    72f6:	b138      	cbz	r0, 7308 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
    72f8:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    72fc:	2100      	movs	r1, #0
    72fe:	4620      	mov	r0, r4
    7300:	f006 fbb9 	bl	da76 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    7304:	2000      	movs	r0, #0
    7306:	e7d9      	b.n	72bc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
    7308:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
    730c:	2030      	movs	r0, #48	; 0x30
    730e:	f7fc fce7 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7312:	0000      	.short	0x0000
    7314:	0000e259 	.word	0x0000e259

00007318 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    7318:	4808      	ldr	r0, [pc, #32]	; (733c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    731a:	b510      	push	{r4, lr}
    731c:	2100      	movs	r1, #0
    731e:	7001      	strb	r1, [r0, #0]
    7320:	2201      	movs	r2, #1
    7322:	7082      	strb	r2, [r0, #2]
    7324:	7041      	strb	r1, [r0, #1]
    7326:	3018      	adds	r0, #24
    7328:	f006 fac5 	bl	d8b6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    732c:	4803      	ldr	r0, [pc, #12]	; (733c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    732e:	3020      	adds	r0, #32
    7330:	f006 fac1 	bl	d8b6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7338:	f006 bd53 	b.w	dde2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    733c:	20000108 	.word	0x20000108

00007340 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    7340:	4901      	ldr	r1, [pc, #4]	; (7348 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    7342:	7008      	strb	r0, [r1, #0]
    7344:	4770      	bx	lr
    7346:	0000      	.short	0x0000
    7348:	20000108 	.word	0x20000108

0000734c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    734c:	4905      	ldr	r1, [pc, #20]	; (7364 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    734e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7352:	fbb1 f1f2 	udiv	r1, r1, r2
    7356:	b510      	push	{r4, lr}
    7358:	f201 2191 	addw	r1, r1, #657	; 0x291
    735c:	f006 fa45 	bl	d7ea <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7360:	b280      	uxth	r0, r0
    7362:	bd10      	pop	{r4, pc}
    7364:	0001527d 	.word	0x0001527d

00007368 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    736c:	4c10      	ldr	r4, [pc, #64]	; (73b0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    736e:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    7372:	f003 fc17 	bl	aba4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7376:	4606      	mov	r6, r0
    7378:	7820      	ldrb	r0, [r4, #0]
    737a:	b128      	cbz	r0, 7388 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    737c:	4632      	mov	r2, r6
    737e:	4639      	mov	r1, r7
    7380:	4628      	mov	r0, r5
    7382:	f005 fd55 	bl	ce30 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7386:	4605      	mov	r5, r0
    7388:	6860      	ldr	r0, [r4, #4]
    738a:	4285      	cmp	r5, r0
    738c:	d005      	beq.n	739a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    738e:	68e1      	ldr	r1, [r4, #12]
    7390:	1a28      	subs	r0, r5, r0
    7392:	4408      	add	r0, r1
    7394:	60e0      	str	r0, [r4, #12]
    7396:	f7fb f89b 	bl	24d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    739a:	6065      	str	r5, [r4, #4]
    739c:	42ae      	cmp	r6, r5
    739e:	d801      	bhi.n	73a4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    73a0:	7860      	ldrb	r0, [r4, #1]
    73a2:	b110      	cbz	r0, 73aa <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    73a4:	2000      	movs	r0, #0
    73a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73aa:	2001      	movs	r0, #1
    73ac:	e7fb      	b.n	73a6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    73ae:	0000      	.short	0x0000
    73b0:	20000108 	.word	0x20000108

000073b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    73b4:	b510      	push	{r4, lr}
    73b6:	4604      	mov	r4, r0
    73b8:	2905      	cmp	r1, #5
    73ba:	d227      	bcs.n	740c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    73bc:	e8df f001 	tbb	[pc, r1]
    73c0:	0e030b05 	.word	0x0e030b05
    73c4:	000f      	.short	0x000f
    73c6:	2100      	movs	r1, #0
    73c8:	e000      	b.n	73cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    73ca:	2101      	movs	r1, #1
    73cc:	4620      	mov	r0, r4
    73ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73d2:	f000 b8f5 	b.w	75c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    73d6:	2003      	movs	r0, #3
    73d8:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    73dc:	bd10      	pop	{r4, pc}
    73de:	f003 fc1d 	bl	ac1c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    73e2:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    73e6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    73ea:	f008 f97a 	bl	f6e2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    73ee:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    73f2:	1a09      	subs	r1, r1, r0
    73f4:	4808      	ldr	r0, [pc, #32]	; (7418 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64>)
    73f6:	6842      	ldr	r2, [r0, #4]
    73f8:	440a      	add	r2, r1
    73fa:	6042      	str	r2, [r0, #4]
    73fc:	6882      	ldr	r2, [r0, #8]
    73fe:	4411      	add	r1, r2
    7400:	6081      	str	r1, [r0, #8]
    7402:	4620      	mov	r0, r4
    7404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7408:	f006 be01 	b.w	e00e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fe>
    740c:	f240 7151 	movw	r1, #1873	; 0x751
    7410:	2030      	movs	r0, #48	; 0x30
    7412:	f7fc fc65 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7416:	0000      	.short	0x0000
    7418:	20000108 	.word	0x20000108

0000741c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    741c:	b570      	push	{r4, r5, r6, lr}
    741e:	460c      	mov	r4, r1
    7420:	4605      	mov	r5, r0
    7422:	b112      	cbz	r2, 742a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    7424:	f240 717b 	movw	r1, #1915	; 0x77b
    7428:	e010      	b.n	744c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    742a:	f003 fbbb 	bl	aba4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    742e:	4601      	mov	r1, r0
    7430:	2200      	movs	r2, #0
    7432:	4620      	mov	r0, r4
    7434:	f006 febc 	bl	e1b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    7438:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    743c:	462a      	mov	r2, r5
    743e:	4905      	ldr	r1, [pc, #20]	; (7454 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    7440:	f7fa fdfe 	bl	2040 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    7444:	2800      	cmp	r0, #0
    7446:	d104      	bne.n	7452 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    7448:	f240 7164 	movw	r1, #1892	; 0x764
    744c:	2030      	movs	r0, #48	; 0x30
    744e:	f7fc fc47 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7452:	bd70      	pop	{r4, r5, r6, pc}
    7454:	0000e2f9 	.word	0x0000e2f9
    7458:	b510      	push	{r4, lr}
    745a:	280c      	cmp	r0, #12
    745c:	d304      	bcc.n	7468 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    745e:	f240 3116 	movw	r1, #790	; 0x316
    7462:	2006      	movs	r0, #6
    7464:	f7fc fc3c 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7468:	4901      	ldr	r1, [pc, #4]	; (7470 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    746a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    746e:	bd10      	pop	{r4, pc}
    7470:	0000e4f2 	.word	0x0000e4f2
    7474:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7476:	4c18      	ldr	r4, [pc, #96]	; (74d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    7478:	2001      	movs	r0, #1
    747a:	7060      	strb	r0, [r4, #1]
    747c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7480:	e00b      	b.n	749a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    7482:	2100      	movs	r1, #0
    7484:	f005 fa75 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7488:	0006      	movs	r6, r0
    748a:	d010      	beq.n	74ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    748c:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
    7490:	f7fa fe08 	bl	20a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7494:	4630      	mov	r0, r6
    7496:	f006 fe7e 	bl	e196 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    749a:	4669      	mov	r1, sp
    749c:	2000      	movs	r0, #0
    749e:	f005 fa72 	bl	c986 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    74a2:	b180      	cbz	r0, 74c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    74a4:	f44f 7187 	mov.w	r1, #270	; 0x10e
    74a8:	2030      	movs	r0, #48	; 0x30
    74aa:	f7fc fc19 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ae:	f44f 7197 	mov.w	r1, #302	; 0x12e
    74b2:	e7f9      	b.n	74a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    74b4:	9802      	ldr	r0, [sp, #8]
    74b6:	b130      	cbz	r0, 74c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    74b8:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    74bc:	b119      	cbz	r1, 74c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    74be:	8800      	ldrh	r0, [r0, #0]
    74c0:	42a8      	cmp	r0, r5
    74c2:	d1de      	bne.n	7482 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    74c4:	e004      	b.n	74d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    74c6:	4668      	mov	r0, sp
    74c8:	f7fc fe42 	bl	4150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    74cc:	2800      	cmp	r0, #0
    74ce:	d0f1      	beq.n	74b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    74d0:	2000      	movs	r0, #0
    74d2:	7060      	strb	r0, [r4, #1]
    74d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    74d6:	0000      	.short	0x0000
    74d8:	20000108 	.word	0x20000108
    74dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    74e0:	4604      	mov	r4, r0
    74e2:	4836      	ldr	r0, [pc, #216]	; (75bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
    74e4:	461e      	mov	r6, r3
    74e6:	4690      	mov	r8, r2
    74e8:	7880      	ldrb	r0, [r0, #2]
    74ea:	4689      	mov	r9, r1
    74ec:	2500      	movs	r5, #0
    74ee:	b368      	cbz	r0, 754c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    74f0:	f7fc f876 	bl	35e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    74f4:	b350      	cbz	r0, 754c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    74f6:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    74fa:	2802      	cmp	r0, #2
    74fc:	d326      	bcc.n	754c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    74fe:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7502:	2802      	cmp	r0, #2
    7504:	d022      	beq.n	754c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7506:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    750a:	b9f8      	cbnz	r0, 754c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    750c:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    7510:	f7ff ffa2 	bl	7458 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7514:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7518:	b281      	uxth	r1, r0
    751a:	8031      	strh	r1, [r6, #0]
    751c:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7520:	2700      	movs	r7, #0
    7522:	2801      	cmp	r0, #1
    7524:	d015      	beq.n	7552 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    7526:	68e0      	ldr	r0, [r4, #12]
    7528:	f004 f8e7 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    752c:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    7530:	b280      	uxth	r0, r0
    7532:	4442      	add	r2, r8
    7534:	eba2 0109 	sub.w	r1, r2, r9
    7538:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    753c:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    7540:	1a82      	subs	r2, r0, r2
    7542:	fb01 7502 	mla	r5, r1, r2, r7
    7546:	2001      	movs	r0, #1
    7548:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
    754c:	4628      	mov	r0, r5
    754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7552:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    7556:	2803      	cmp	r0, #3
    7558:	d02c      	beq.n	75b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
    755a:	2101      	movs	r1, #1
    755c:	2000      	movs	r0, #0
    755e:	f005 fd21 	bl	cfa4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7562:	6a21      	ldr	r1, [r4, #32]
    7564:	1847      	adds	r7, r0, r1
    7566:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    756a:	8831      	ldrh	r1, [r6, #0]
    756c:	34d0      	adds	r4, #208	; 0xd0
    756e:	f004 f8c4 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7572:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7574:	6e21      	ldr	r1, [r4, #96]	; 0x60
    7576:	1a82      	subs	r2, r0, r2
    7578:	fb01 5502 	mla	r5, r1, r2, r5
    757c:	65a0      	str	r0, [r4, #88]	; 0x58
    757e:	8831      	ldrh	r1, [r6, #0]
    7580:	4638      	mov	r0, r7
    7582:	f004 f8ba 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7586:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    7588:	66a0      	str	r0, [r4, #104]	; 0x68
    758a:	1a41      	subs	r1, r0, r1
    758c:	440d      	add	r5, r1
    758e:	8831      	ldrh	r1, [r6, #0]
    7590:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    7594:	f004 f8b1 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7598:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    759a:	4442      	add	r2, r8
    759c:	eba2 0109 	sub.w	r1, r2, r9
    75a0:	6e22      	ldr	r2, [r4, #96]	; 0x60
    75a2:	1a89      	subs	r1, r1, r2
    75a4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    75a6:	1e49      	subs	r1, r1, #1
    75a8:	1a82      	subs	r2, r0, r2
    75aa:	fb01 5502 	mla	r5, r1, r2, r5
    75ae:	66e0      	str	r0, [r4, #108]	; 0x6c
    75b0:	3cd0      	subs	r4, #208	; 0xd0
    75b2:	e7c8      	b.n	7546 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    75b4:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    75b8:	e7d3      	b.n	7562 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    75ba:	0000      	.short	0x0000
    75bc:	20000108 	.word	0x20000108
    75c0:	b538      	push	{r3, r4, r5, lr}
    75c2:	2500      	movs	r5, #0
    75c4:	4604      	mov	r4, r0
    75c6:	2901      	cmp	r1, #1
    75c8:	d102      	bne.n	75d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
    75ca:	4811      	ldr	r0, [pc, #68]	; (7610 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    75cc:	7840      	ldrb	r0, [r0, #1]
    75ce:	b178      	cbz	r0, 75f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
    75d0:	2004      	movs	r0, #4
    75d2:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    75d6:	bf00      	nop
    75d8:	f006 fd12 	bl	e000 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    75dc:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
    75e0:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    75e4:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    75e8:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    75ec:	77e5      	strb	r5, [r4, #31]
    75ee:	bd38      	pop	{r3, r4, r5, pc}
    75f0:	9500      	str	r5, [sp, #0]
    75f2:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    75f6:	2301      	movs	r3, #1
    75f8:	2200      	movs	r2, #0
    75fa:	4620      	mov	r0, r4
    75fc:	f000 f80a 	bl	7614 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    7600:	2800      	cmp	r0, #0
    7602:	d0e9      	beq.n	75d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
    7604:	f240 61c9 	movw	r1, #1737	; 0x6c9
    7608:	2030      	movs	r0, #48	; 0x30
    760a:	f7fc fb69 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    760e:	0000      	.short	0x0000
    7610:	20000108 	.word	0x20000108
    7614:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7618:	4604      	mov	r4, r0
    761a:	b085      	sub	sp, #20
    761c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    7620:	469a      	mov	sl, r3
    7622:	e9cd 3000 	strd	r3, r0, [sp]
    7626:	460f      	mov	r7, r1
    7628:	f007 ffc2 	bl	f5b0 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    762c:	4605      	mov	r5, r0
    762e:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    7632:	f7ff ff11 	bl	7458 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7636:	4428      	add	r0, r5
    7638:	f8ad 0008 	strh.w	r0, [sp, #8]
    763c:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    7640:	280d      	cmp	r0, #13
    7642:	d004      	beq.n	764e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    7644:	2000      	movs	r0, #0
    7646:	9003      	str	r0, [sp, #12]
    7648:	9807      	ldr	r0, [sp, #28]
    764a:	b110      	cbz	r0, 7652 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    764c:	e02e      	b.n	76ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    764e:	2001      	movs	r0, #1
    7650:	e7f9      	b.n	7646 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    7652:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7656:	2803      	cmp	r0, #3
    7658:	d128      	bne.n	76ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    765a:	9803      	ldr	r0, [sp, #12]
    765c:	b330      	cbz	r0, 76ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    765e:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    7662:	42b8      	cmp	r0, r7
    7664:	d122      	bne.n	76ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7666:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    766a:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    766e:	68e0      	ldr	r0, [r4, #12]
    7670:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    7674:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    7678:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    767c:	4408      	add	r0, r1
    767e:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    7682:	4620      	mov	r0, r4
    7684:	f006 ff4b 	bl	e51e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7688:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    768c:	6220      	str	r0, [r4, #32]
    768e:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
    7692:	83a0      	strh	r0, [r4, #28]
    7694:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
    7698:	60e0      	str	r0, [r4, #12]
    769a:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    769e:	82a0      	strh	r0, [r4, #20]
    76a0:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    76a4:	82e0      	strh	r0, [r4, #22]
    76a6:	2002      	movs	r0, #2
    76a8:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    76ac:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    76b0:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
    76b4:	1a38      	subs	r0, r7, r0
    76b6:	fa0f f980 	sxth.w	r9, r0
    76ba:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    76be:	1a38      	subs	r0, r7, r0
    76c0:	fa0f f880 	sxth.w	r8, r0
    76c4:	f1b8 0f00 	cmp.w	r8, #0
    76c8:	da06      	bge.n	76d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
    76ca:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    76ce:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    76d2:	2001      	movs	r0, #1
    76d4:	46c8      	mov	r8, r9
    76d6:	9000      	str	r0, [sp, #0]
    76d8:	ab02      	add	r3, sp, #8
    76da:	464a      	mov	r2, r9
    76dc:	4641      	mov	r1, r8
    76de:	4620      	mov	r0, r4
    76e0:	f7ff fefc 	bl	74dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    76e4:	9004      	str	r0, [sp, #16]
    76e6:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    76ea:	f8df b33c 	ldr.w	fp, [pc, #828]	; 7a28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    76ee:	b140      	cbz	r0, 7702 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
    76f0:	2801      	cmp	r0, #1
    76f2:	d07d      	beq.n	77f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
    76f4:	2802      	cmp	r0, #2
    76f6:	d052      	beq.n	779e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
    76f8:	2803      	cmp	r0, #3
    76fa:	d07a      	beq.n	77f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
    76fc:	f240 514d 	movw	r1, #1357	; 0x54d
    7700:	e18e      	b.n	7a20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    7702:	2101      	movs	r1, #1
    7704:	2000      	movs	r0, #0
    7706:	f005 fc4d 	bl	cfa4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    770a:	4606      	mov	r6, r0
    770c:	6a20      	ldr	r0, [r4, #32]
    770e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7712:	4430      	add	r0, r6
    7714:	f003 fff1 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7718:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    771c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7720:	68e0      	ldr	r0, [r4, #12]
    7722:	f003 ffea 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7726:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    772a:	a901      	add	r1, sp, #4
    772c:	4668      	mov	r0, sp
    772e:	f003 f99d 	bl	aa6c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    7732:	e9dd 1200 	ldrd	r1, r2, [sp]
    7736:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    773a:	f7fa ff7f 	bl	263c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    773e:	4681      	mov	r9, r0
    7740:	4620      	mov	r0, r4
    7742:	f006 fc4f 	bl	dfe4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    7746:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    774a:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
    774e:	f007 ffd6 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7752:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7756:	4401      	add	r1, r0
    7758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    775c:	fbb1 f0f0 	udiv	r0, r1, r0
    7760:	6a21      	ldr	r1, [r4, #32]
    7762:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    7766:	4431      	add	r1, r6
    7768:	1a08      	subs	r0, r1, r0
    776a:	1a81      	subs	r1, r0, r2
    776c:	4441      	add	r1, r8
    776e:	3920      	subs	r1, #32
    7770:	eba1 0609 	sub.w	r6, r1, r9
    7774:	0050      	lsls	r0, r2, #1
    7776:	8ba1      	ldrh	r1, [r4, #28]
    7778:	3060      	adds	r0, #96	; 0x60
    777a:	4401      	add	r1, r0
    777c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7780:	f006 fca0 	bl	e0c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    7784:	3022      	adds	r0, #34	; 0x22
    7786:	f8cb 0010 	str.w	r0, [fp, #16]
    778a:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    778e:	4659      	mov	r1, fp
    7790:	1a30      	subs	r0, r6, r0
    7792:	f5b0 7fda 	cmp.w	r0, #436	; 0x1b4
    7796:	d859      	bhi.n	784c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    7798:	f240 41e6 	movw	r1, #1254	; 0x4e6
    779c:	e140      	b.n	7a20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    779e:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    77a2:	6a20      	ldr	r0, [r4, #32]
    77a4:	4408      	add	r0, r1
    77a6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    77aa:	f003 ffa6 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    77ae:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    77b2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    77b6:	68e0      	ldr	r0, [r4, #12]
    77b8:	f003 ff9f 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    77bc:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    77c0:	4620      	mov	r0, r4
    77c2:	f006 fc0f 	bl	dfe4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    77c6:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    77ca:	bb10      	cbnz	r0, 7812 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    77cc:	f1ba 0f00 	cmp.w	sl, #0
    77d0:	d01f      	beq.n	7812 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    77d2:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    77d6:	4640      	mov	r0, r8
    77d8:	f007 ff91 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    77dc:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    77e0:	4401      	add	r1, r0
    77e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    77e6:	fbb1 f0f0 	udiv	r0, r1, r0
    77ea:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    77ee:	e001      	b.n	77f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    77f0:	e02d      	b.n	784e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    77f2:	e049      	b.n	7888 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    77f4:	4408      	add	r0, r1
    77f6:	6a22      	ldr	r2, [r4, #32]
    77f8:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    77fc:	4411      	add	r1, r2
    77fe:	1a0e      	subs	r6, r1, r0
    7800:	4640      	mov	r0, r8
    7802:	f007 ff6e 	bl	f6e2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7806:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    780a:	1a08      	subs	r0, r1, r0
    780c:	4406      	add	r6, r0
    780e:	3e20      	subs	r6, #32
    7810:	e006      	b.n	7820 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
    7812:	6a21      	ldr	r1, [r4, #32]
    7814:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    7818:	4408      	add	r0, r1
    781a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    781e:	1a46      	subs	r6, r0, r1
    7820:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    7824:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
    7828:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    782c:	fb01 0002 	mla	r0, r1, r2, r0
    7830:	0040      	lsls	r0, r0, #1
    7832:	8ba1      	ldrh	r1, [r4, #28]
    7834:	3060      	adds	r0, #96	; 0x60
    7836:	4401      	add	r1, r0
    7838:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    783c:	f006 fc42 	bl	e0c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    7840:	f8cb 0010 	str.w	r0, [fp, #16]
    7844:	2001      	movs	r0, #1
    7846:	4659      	mov	r1, fp
    7848:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    784c:	e062      	b.n	7914 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    784e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    7852:	68e0      	ldr	r0, [r4, #12]
    7854:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    7858:	1a86      	subs	r6, r0, r2
    785a:	eb01 0009 	add.w	r0, r1, r9
    785e:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    7862:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
    7866:	1a40      	subs	r0, r0, r1
    7868:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    786c:	1e40      	subs	r0, r0, #1
    786e:	fb0c 3101 	mla	r1, ip, r1, r3
    7872:	fb00 1002 	mla	r0, r0, r2, r1
    7876:	0040      	lsls	r0, r0, #1
    7878:	8ba1      	ldrh	r1, [r4, #28]
    787a:	3060      	adds	r0, #96	; 0x60
    787c:	4401      	add	r1, r0
    787e:	fb06 f608 	mul.w	r6, r6, r8
    7882:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7886:	e040      	b.n	790a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    7888:	68e0      	ldr	r0, [r4, #12]
    788a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    788e:	fb00 f008 	mul.w	r0, r0, r8
    7892:	fb08 0611 	mls	r6, r8, r1, r0
    7896:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    789a:	2824      	cmp	r0, #36	; 0x24
    789c:	d003      	beq.n	78a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    789e:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    78a2:	2824      	cmp	r0, #36	; 0x24
    78a4:	d109      	bne.n	78ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    78a6:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    78aa:	1a38      	subs	r0, r7, r0
    78ac:	b200      	sxth	r0, r0
    78ae:	2800      	cmp	r0, #0
    78b0:	db03      	blt.n	78ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    78b2:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    78b6:	b100      	cbz	r0, 78ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    78b8:	9001      	str	r0, [sp, #4]
    78ba:	9800      	ldr	r0, [sp, #0]
    78bc:	b1d8      	cbz	r0, 78f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    78be:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    78c2:	b9c0      	cbnz	r0, 78f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    78c4:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    78c8:	2800      	cmp	r0, #0
    78ca:	d07d      	beq.n	79c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    78cc:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    78d0:	f007 ff15 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    78d4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    78d8:	4401      	add	r1, r0
    78da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    78de:	fbb1 f0f0 	udiv	r0, r1, r0
    78e2:	1a36      	subs	r6, r6, r0
    78e4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    78e8:	f007 fefb 	bl	f6e2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    78ec:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    78f0:	1a08      	subs	r0, r1, r0
    78f2:	4406      	add	r6, r0
    78f4:	3e20      	subs	r6, #32
    78f6:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    78fa:	eb01 0009 	add.w	r0, r1, r9
    78fe:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7902:	4348      	muls	r0, r1
    7904:	0041      	lsls	r1, r0, #1
    7906:	3160      	adds	r1, #96	; 0x60
    7908:	9801      	ldr	r0, [sp, #4]
    790a:	f006 fbdb 	bl	e0c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    790e:	4659      	mov	r1, fp
    7910:	f8cb 0010 	str.w	r0, [fp, #16]
    7914:	9804      	ldr	r0, [sp, #16]
    7916:	6909      	ldr	r1, [r1, #16]
    7918:	1a33      	subs	r3, r6, r0
    791a:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
    791e:	68e0      	ldr	r0, [r4, #12]
    7920:	1b80      	subs	r0, r0, r6
    7922:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    7926:	f8cb 0014 	str.w	r0, [fp, #20]
    792a:	4281      	cmp	r1, r0
    792c:	d800      	bhi.n	7930 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    792e:	4608      	mov	r0, r1
    7930:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    7934:	2000      	movs	r0, #0
    7936:	7028      	strb	r0, [r5, #0]
    7938:	2064      	movs	r0, #100	; 0x64
    793a:	8128      	strh	r0, [r5, #8]
    793c:	4619      	mov	r1, r3
    793e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    7942:	f7f9 fdcb 	bl	14dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7946:	60e8      	str	r0, [r5, #12]
    7948:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    794c:	f005 ff1e 	bl	d78c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    7950:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    7954:	4408      	add	r0, r1
    7956:	6068      	str	r0, [r5, #4]
    7958:	68e8      	ldr	r0, [r5, #12]
    795a:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    795e:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
    7962:	2001      	movs	r0, #1
    7964:	72a8      	strb	r0, [r5, #10]
    7966:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    796a:	1bc9      	subs	r1, r1, r7
    796c:	b209      	sxth	r1, r1
    796e:	2900      	cmp	r1, #0
    7970:	dd01      	ble.n	7976 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    7972:	2103      	movs	r1, #3
    7974:	72a9      	strb	r1, [r5, #10]
    7976:	9903      	ldr	r1, [sp, #12]
    7978:	b339      	cbz	r1, 79ca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    797a:	f1ba 0f00 	cmp.w	sl, #0
    797e:	d01f      	beq.n	79c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7980:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
    7984:	b38a      	cbz	r2, 79ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ce>
    7986:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
    798a:	bf00      	nop
    798c:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
    7990:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    7994:	1c49      	adds	r1, r1, #1
    7996:	434b      	muls	r3, r1
    7998:	4293      	cmp	r3, r2
    799a:	d211      	bcs.n	79c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    799c:	7aa9      	ldrb	r1, [r5, #10]
    799e:	1e49      	subs	r1, r1, #1
    79a0:	2900      	cmp	r1, #0
    79a2:	dd0d      	ble.n	79c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    79a4:	72a8      	strb	r0, [r5, #10]
    79a6:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    79aa:	1c40      	adds	r0, r0, #1
    79ac:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    79b0:	2001      	movs	r0, #1
    79b2:	f000 f83b 	bl	7a2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    79b6:	f000 0007 	and.w	r0, r0, #7
    79ba:	1c40      	adds	r0, r0, #1
    79bc:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    79c0:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    79c4:	4629      	mov	r1, r5
    79c6:	e001      	b.n	79cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    79c8:	e00c      	b.n	79e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    79ca:	e00f      	b.n	79ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    79cc:	f006 fb8c 	bl	e0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    79d0:	b320      	cbz	r0, 7a1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    79d2:	9807      	ldr	r0, [sp, #28]
    79d4:	f080 0001 	eor.w	r0, r0, #1
    79d8:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
    79dc:	2000      	movs	r0, #0
    79de:	b009      	add	sp, #36	; 0x24
    79e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79e4:	f44f 61a7 	mov.w	r1, #1336	; 0x538
    79e8:	e01a      	b.n	7a20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    79ea:	e015      	b.n	7a18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    79ec:	f1ba 0f00 	cmp.w	sl, #0
    79f0:	d1c6      	bne.n	7980 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    79f2:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    79f6:	2800      	cmp	r0, #0
    79f8:	d0e2      	beq.n	79c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    79fa:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    79fe:	68e0      	ldr	r0, [r4, #12]
    7a00:	1a41      	subs	r1, r0, r1
    7a02:	4628      	mov	r0, r5
    7a04:	f005 fae0 	bl	cfc8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7a08:	0400      	lsls	r0, r0, #16
    7a0a:	0c00      	lsrs	r0, r0, #16
    7a0c:	d0d8      	beq.n	79c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7a0e:	9912      	ldr	r1, [sp, #72]	; 0x48
    7a10:	b101      	cbz	r1, 7a14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    7a12:	8008      	strh	r0, [r1, #0]
    7a14:	2001      	movs	r0, #1
    7a16:	e7e2      	b.n	79de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    7a18:	2100      	movs	r1, #0
    7a1a:	e7b7      	b.n	798c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    7a1c:	f240 5197 	movw	r1, #1431	; 0x597
    7a20:	2030      	movs	r0, #48	; 0x30
    7a22:	f7fc f95d 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a26:	0000      	.short	0x0000
    7a28:	20000108 	.word	0x20000108
    7a2c:	b108      	cbz	r0, 7a32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    7a2e:	4803      	ldr	r0, [pc, #12]	; (7a3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    7a30:	e001      	b.n	7a36 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61a>
    7a32:	4802      	ldr	r0, [pc, #8]	; (7a3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    7a34:	3008      	adds	r0, #8
    7a36:	f7fe bc7b 	b.w	6330 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    7a3a:	0000      	.short	0x0000
    7a3c:	20000120 	.word	0x20000120
    7a40:	b570      	push	{r4, r5, r6, lr}
    7a42:	4604      	mov	r4, r0
    7a44:	f7f9 fea6 	bl	1794 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7a48:	2864      	cmp	r0, #100	; 0x64
    7a4a:	d901      	bls.n	7a50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x634>
    7a4c:	4605      	mov	r5, r0
    7a4e:	e000      	b.n	7a52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x636>
    7a50:	2564      	movs	r5, #100	; 0x64
    7a52:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7a56:	2128      	movs	r1, #40	; 0x28
    7a58:	f006 fa35 	bl	dec6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    7a5c:	4428      	add	r0, r5
    7a5e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7a62:	f200 203d 	addw	r0, r0, #573	; 0x23d
    7a66:	180e      	adds	r6, r1, r0
    7a68:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7a6c:	2128      	movs	r1, #40	; 0x28
    7a6e:	f006 fa2a 	bl	dec6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    7a72:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    7a76:	4620      	mov	r0, r4
    7a78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7a7a:	f005 fe26 	bl	d6ca <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7a7e:	4605      	mov	r5, r0
    7a80:	4632      	mov	r2, r6
    7a82:	4620      	mov	r0, r4
    7a84:	68e1      	ldr	r1, [r4, #12]
    7a86:	f005 fe20 	bl	d6ca <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7a8a:	4907      	ldr	r1, [pc, #28]	; (7aa8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>)
    7a8c:	4285      	cmp	r5, r0
    7a8e:	6088      	str	r0, [r1, #8]
    7a90:	d200      	bcs.n	7a94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x678>
    7a92:	4628      	mov	r0, r5
    7a94:	6048      	str	r0, [r1, #4]
    7a96:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7a9a:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    7a9e:	60c8      	str	r0, [r1, #12]
    7aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7aa4:	f7fa bd14 	b.w	24d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7aa8:	20000108 	.word	0x20000108

00007aac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7aac:	4806      	ldr	r0, [pc, #24]	; (7ac8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7aae:	4905      	ldr	r1, [pc, #20]	; (7ac4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7ab0:	6501      	str	r1, [r0, #80]	; 0x50
    7ab2:	4906      	ldr	r1, [pc, #24]	; (7acc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7ab4:	6541      	str	r1, [r0, #84]	; 0x54
    7ab6:	4807      	ldr	r0, [pc, #28]	; (7ad4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    7ab8:	4905      	ldr	r1, [pc, #20]	; (7ad0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    7aba:	6501      	str	r1, [r0, #80]	; 0x50
    7abc:	4906      	ldr	r1, [pc, #24]	; (7ad8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    7abe:	6541      	str	r1, [r0, #84]	; 0x54
    7ac0:	4770      	bx	lr
    7ac2:	0000      	.short	0x0000
    7ac4:	0000900d 	.word	0x0000900d
    7ac8:	20000144 	.word	0x20000144
    7acc:	000090e9 	.word	0x000090e9
    7ad0:	00009765 	.word	0x00009765
    7ad4:	200001a8 	.word	0x200001a8
    7ad8:	00009795 	.word	0x00009795

00007adc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    7adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ade:	460d      	mov	r5, r1
    7ae0:	4607      	mov	r7, r0
    7ae2:	2100      	movs	r1, #0
    7ae4:	f004 ff45 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7ae8:	1e04      	subs	r4, r0, #0
    7aea:	d04f      	beq.n	7b8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7aec:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    7af0:	2800      	cmp	r0, #0
    7af2:	d04b      	beq.n	7b8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7af4:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    7af8:	f88d 0000 	strb.w	r0, [sp]
    7afc:	9800      	ldr	r0, [sp, #0]
    7afe:	9000      	str	r0, [sp, #0]
    7b00:	f89d 0000 	ldrb.w	r0, [sp]
    7b04:	2600      	movs	r6, #0
    7b06:	b1d8      	cbz	r0, 7b40 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7b08:	706e      	strb	r6, [r5, #1]
    7b0a:	2007      	movs	r0, #7
    7b0c:	7028      	strb	r0, [r5, #0]
    7b0e:	e00b      	b.n	7b28 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7b10:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    7b14:	84a6      	strh	r6, [r4, #36]	; 0x24
    7b16:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    7b1a:	6068      	str	r0, [r5, #4]
    7b1c:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    7b20:	60a8      	str	r0, [r5, #8]
    7b22:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    7b26:	81a8      	strh	r0, [r5, #12]
    7b28:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    7b2c:	f88d 0000 	strb.w	r0, [sp]
    7b30:	9800      	ldr	r0, [sp, #0]
    7b32:	9000      	str	r0, [sp, #0]
    7b34:	f89d 0000 	ldrb.w	r0, [sp]
    7b38:	2800      	cmp	r0, #0
    7b3a:	d1e9      	bne.n	7b10 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7b3c:	712e      	strb	r6, [r5, #4]
    7b3e:	e10b      	b.n	7d58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7b40:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7b44:	b3a0      	cbz	r0, 7bb0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7b46:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7b4a:	280b      	cmp	r0, #11
    7b4c:	d016      	beq.n	7b7c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7b4e:	280c      	cmp	r0, #12
    7b50:	d004      	beq.n	7b5c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7b52:	f640 21ee 	movw	r1, #2798	; 0xaee
    7b56:	2031      	movs	r0, #49	; 0x31
    7b58:	f7fc f8c2 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b5c:	8820      	ldrh	r0, [r4, #0]
    7b5e:	f7fc fcd9 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7b62:	4607      	mov	r7, r0
    7b64:	f004 fdcb 	bl	c6fe <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7b68:	b978      	cbnz	r0, 7b8a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7b6a:	706e      	strb	r6, [r5, #1]
    7b6c:	200c      	movs	r0, #12
    7b6e:	7028      	strb	r0, [r5, #0]
    7b70:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    7b74:	7128      	strb	r0, [r5, #4]
    7b76:	8820      	ldrh	r0, [r4, #0]
    7b78:	80e8      	strh	r0, [r5, #6]
    7b7a:	e013      	b.n	7ba4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7b7c:	8820      	ldrh	r0, [r4, #0]
    7b7e:	f7fc fcc9 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7b82:	4607      	mov	r7, r0
    7b84:	f004 fdbb 	bl	c6fe <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7b88:	b108      	cbz	r0, 7b8e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7b8a:	2000      	movs	r0, #0
    7b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b8e:	706e      	strb	r6, [r5, #1]
    7b90:	200b      	movs	r0, #11
    7b92:	7028      	strb	r0, [r5, #0]
    7b94:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    7b98:	7128      	strb	r0, [r5, #4]
    7b9a:	8820      	ldrh	r0, [r4, #0]
    7b9c:	80e8      	strh	r0, [r5, #6]
    7b9e:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
    7ba2:	7228      	strb	r0, [r5, #8]
    7ba4:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    7ba8:	4638      	mov	r0, r7
    7baa:	f004 fdc3 	bl	c734 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7bae:	e0d3      	b.n	7d58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7bb0:	e7ff      	b.n	7bb2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7bb2:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7bb6:	f88d 0000 	strb.w	r0, [sp]
    7bba:	9800      	ldr	r0, [sp, #0]
    7bbc:	9000      	str	r0, [sp, #0]
    7bbe:	f89d 0000 	ldrb.w	r0, [sp]
    7bc2:	b130      	cbz	r0, 7bd2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7bc4:	706e      	strb	r6, [r5, #1]
    7bc6:	200e      	movs	r0, #14
    7bc8:	7028      	strb	r0, [r5, #0]
    7bca:	80af      	strh	r7, [r5, #4]
    7bcc:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    7bd0:	e0c2      	b.n	7d58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7bd2:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    7bd6:	f88d 0000 	strb.w	r0, [sp]
    7bda:	9800      	ldr	r0, [sp, #0]
    7bdc:	9000      	str	r0, [sp, #0]
    7bde:	f89d 0000 	ldrb.w	r0, [sp]
    7be2:	b198      	cbz	r0, 7c0c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7be4:	706e      	strb	r6, [r5, #1]
    7be6:	2008      	movs	r0, #8
    7be8:	7028      	strb	r0, [r5, #0]
    7bea:	8820      	ldrh	r0, [r4, #0]
    7bec:	80a8      	strh	r0, [r5, #4]
    7bee:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    7bf2:	f8c5 1006 	str.w	r1, [r5, #6]
    7bf6:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
    7bfa:	f8c5 100a 	str.w	r1, [r5, #10]
    7bfe:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    7c02:	81e8      	strh	r0, [r5, #14]
    7c04:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
    7c08:	7026      	strb	r6, [r4, #0]
    7c0a:	e0a5      	b.n	7d58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c0c:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7c10:	f88d 0000 	strb.w	r0, [sp]
    7c14:	9800      	ldr	r0, [sp, #0]
    7c16:	9000      	str	r0, [sp, #0]
    7c18:	f89d 0000 	ldrb.w	r0, [sp]
    7c1c:	b1a0      	cbz	r0, 7c48 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    7c1e:	706e      	strb	r6, [r5, #1]
    7c20:	2016      	movs	r0, #22
    7c22:	7028      	strb	r0, [r5, #0]
    7c24:	e005      	b.n	7c32 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    7c26:	bf00      	nop
    7c28:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    7c2c:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    7c30:	6068      	str	r0, [r5, #4]
    7c32:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7c36:	f88d 0000 	strb.w	r0, [sp]
    7c3a:	9800      	ldr	r0, [sp, #0]
    7c3c:	9000      	str	r0, [sp, #0]
    7c3e:	f89d 0000 	ldrb.w	r0, [sp]
    7c42:	2800      	cmp	r0, #0
    7c44:	d1f0      	bne.n	7c28 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    7c46:	e087      	b.n	7d58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c48:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    7c4c:	f88d 0000 	strb.w	r0, [sp]
    7c50:	9800      	ldr	r0, [sp, #0]
    7c52:	9000      	str	r0, [sp, #0]
    7c54:	f89d 0000 	ldrb.w	r0, [sp]
    7c58:	b170      	cbz	r0, 7c78 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    7c5a:	706e      	strb	r6, [r5, #1]
    7c5c:	2006      	movs	r0, #6
    7c5e:	7028      	strb	r0, [r5, #0]
    7c60:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    7c64:	6068      	str	r0, [r5, #4]
    7c66:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    7c6a:	60a8      	str	r0, [r5, #8]
    7c6c:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    7c70:	60e8      	str	r0, [r5, #12]
    7c72:	f504 7403 	add.w	r4, r4, #524	; 0x20c
    7c76:	e03a      	b.n	7cee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    7c78:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    7c7c:	f88d 0000 	strb.w	r0, [sp]
    7c80:	9800      	ldr	r0, [sp, #0]
    7c82:	9000      	str	r0, [sp, #0]
    7c84:	f89d 0000 	ldrb.w	r0, [sp]
    7c88:	b1d0      	cbz	r0, 7cc0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    7c8a:	706e      	strb	r6, [r5, #1]
    7c8c:	2012      	movs	r0, #18
    7c8e:	7028      	strb	r0, [r5, #0]
    7c90:	e00b      	b.n	7caa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    7c92:	bf00      	nop
    7c94:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
    7c98:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    7c9c:	6068      	str	r0, [r5, #4]
    7c9e:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    7ca2:	60a8      	str	r0, [r5, #8]
    7ca4:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    7ca8:	60e8      	str	r0, [r5, #12]
    7caa:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    7cae:	f88d 0000 	strb.w	r0, [sp]
    7cb2:	9800      	ldr	r0, [sp, #0]
    7cb4:	9000      	str	r0, [sp, #0]
    7cb6:	f89d 0000 	ldrb.w	r0, [sp]
    7cba:	2800      	cmp	r0, #0
    7cbc:	d1ea      	bne.n	7c94 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    7cbe:	e04b      	b.n	7d58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7cc0:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
    7cc4:	f88d 0000 	strb.w	r0, [sp]
    7cc8:	9800      	ldr	r0, [sp, #0]
    7cca:	9000      	str	r0, [sp, #0]
    7ccc:	f89d 0000 	ldrb.w	r0, [sp]
    7cd0:	b180      	cbz	r0, 7cf4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    7cd2:	706e      	strb	r6, [r5, #1]
    7cd4:	2018      	movs	r0, #24
    7cd6:	7028      	strb	r0, [r5, #0]
    7cd8:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
    7cdc:	6068      	str	r0, [r5, #4]
    7cde:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    7ce2:	60a8      	str	r0, [r5, #8]
    7ce4:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    7ce8:	81a8      	strh	r0, [r5, #12]
    7cea:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
    7cee:	f804 6c02 	strb.w	r6, [r4, #-2]
    7cf2:	e031      	b.n	7d58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7cf4:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
    7cf8:	f88d 0000 	strb.w	r0, [sp]
    7cfc:	9800      	ldr	r0, [sp, #0]
    7cfe:	9000      	str	r0, [sp, #0]
    7d00:	f89d 0000 	ldrb.w	r0, [sp]
    7d04:	b138      	cbz	r0, 7d16 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    7d06:	2019      	movs	r0, #25
    7d08:	7028      	strb	r0, [r5, #0]
    7d0a:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    7d0e:	6068      	str	r0, [r5, #4]
    7d10:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
    7d14:	e020      	b.n	7d58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d16:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7d1a:	f88d 0000 	strb.w	r0, [sp]
    7d1e:	9800      	ldr	r0, [sp, #0]
    7d20:	9000      	str	r0, [sp, #0]
    7d22:	f89d 0000 	ldrb.w	r0, [sp]
    7d26:	2800      	cmp	r0, #0
    7d28:	f43f af30 	beq.w	7b8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7d2c:	706e      	strb	r6, [r5, #1]
    7d2e:	2013      	movs	r0, #19
    7d30:	7028      	strb	r0, [r5, #0]
    7d32:	e007      	b.n	7d44 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    7d34:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    7d38:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    7d3c:	6068      	str	r0, [r5, #4]
    7d3e:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    7d42:	8128      	strh	r0, [r5, #8]
    7d44:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7d48:	f88d 0000 	strb.w	r0, [sp]
    7d4c:	9800      	ldr	r0, [sp, #0]
    7d4e:	9000      	str	r0, [sp, #0]
    7d50:	f89d 0000 	ldrb.w	r0, [sp]
    7d54:	2800      	cmp	r0, #0
    7d56:	d1ed      	bne.n	7d34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    7d58:	2001      	movs	r0, #1
    7d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007d5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    7d5c:	481b      	ldr	r0, [pc, #108]	; (7dcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    7d5e:	491a      	ldr	r1, [pc, #104]	; (7dc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    7d60:	6081      	str	r1, [r0, #8]
    7d62:	491b      	ldr	r1, [pc, #108]	; (7dd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    7d64:	6041      	str	r1, [r0, #4]
    7d66:	491b      	ldr	r1, [pc, #108]	; (7dd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    7d68:	6001      	str	r1, [r0, #0]
    7d6a:	491b      	ldr	r1, [pc, #108]	; (7dd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    7d6c:	6281      	str	r1, [r0, #40]	; 0x28
    7d6e:	491b      	ldr	r1, [pc, #108]	; (7ddc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    7d70:	62c1      	str	r1, [r0, #44]	; 0x2c
    7d72:	491b      	ldr	r1, [pc, #108]	; (7de0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    7d74:	60c1      	str	r1, [r0, #12]
    7d76:	491b      	ldr	r1, [pc, #108]	; (7de4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    7d78:	6181      	str	r1, [r0, #24]
    7d7a:	491b      	ldr	r1, [pc, #108]	; (7de8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    7d7c:	6301      	str	r1, [r0, #48]	; 0x30
    7d7e:	491b      	ldr	r1, [pc, #108]	; (7dec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    7d80:	6201      	str	r1, [r0, #32]
    7d82:	491b      	ldr	r1, [pc, #108]	; (7df0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    7d84:	64c1      	str	r1, [r0, #76]	; 0x4c
    7d86:	491b      	ldr	r1, [pc, #108]	; (7df4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    7d88:	6481      	str	r1, [r0, #72]	; 0x48
    7d8a:	491b      	ldr	r1, [pc, #108]	; (7df8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    7d8c:	6441      	str	r1, [r0, #68]	; 0x44
    7d8e:	491b      	ldr	r1, [pc, #108]	; (7dfc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    7d90:	6341      	str	r1, [r0, #52]	; 0x34
    7d92:	491b      	ldr	r1, [pc, #108]	; (7e00 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    7d94:	61c1      	str	r1, [r0, #28]
    7d96:	481c      	ldr	r0, [pc, #112]	; (7e08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    7d98:	491a      	ldr	r1, [pc, #104]	; (7e04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    7d9a:	6081      	str	r1, [r0, #8]
    7d9c:	491b      	ldr	r1, [pc, #108]	; (7e0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    7d9e:	61c1      	str	r1, [r0, #28]
    7da0:	491b      	ldr	r1, [pc, #108]	; (7e10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    7da2:	6241      	str	r1, [r0, #36]	; 0x24
    7da4:	491b      	ldr	r1, [pc, #108]	; (7e14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    7da6:	62c1      	str	r1, [r0, #44]	; 0x2c
    7da8:	491b      	ldr	r1, [pc, #108]	; (7e18 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    7daa:	6101      	str	r1, [r0, #16]
    7dac:	491b      	ldr	r1, [pc, #108]	; (7e1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    7dae:	6141      	str	r1, [r0, #20]
    7db0:	491b      	ldr	r1, [pc, #108]	; (7e20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    7db2:	6441      	str	r1, [r0, #68]	; 0x44
    7db4:	6341      	str	r1, [r0, #52]	; 0x34
    7db6:	491b      	ldr	r1, [pc, #108]	; (7e24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    7db8:	6181      	str	r1, [r0, #24]
    7dba:	491b      	ldr	r1, [pc, #108]	; (7e28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    7dbc:	6301      	str	r1, [r0, #48]	; 0x30
    7dbe:	491b      	ldr	r1, [pc, #108]	; (7e2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    7dc0:	6481      	str	r1, [r0, #72]	; 0x48
    7dc2:	491b      	ldr	r1, [pc, #108]	; (7e30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    7dc4:	64c1      	str	r1, [r0, #76]	; 0x4c
    7dc6:	4770      	bx	lr
    7dc8:	00009499 	.word	0x00009499
    7dcc:	20000144 	.word	0x20000144
    7dd0:	00008dd5 	.word	0x00008dd5
    7dd4:	00008e31 	.word	0x00008e31
    7dd8:	000091b1 	.word	0x000091b1
    7ddc:	000091f5 	.word	0x000091f5
    7de0:	00008edd 	.word	0x00008edd
    7de4:	00009471 	.word	0x00009471
    7de8:	000095b5 	.word	0x000095b5
    7dec:	00008f89 	.word	0x00008f89
    7df0:	00009185 	.word	0x00009185
    7df4:	00009159 	.word	0x00009159
    7df8:	00009431 	.word	0x00009431
    7dfc:	00009461 	.word	0x00009461
    7e00:	000094cd 	.word	0x000094cd
    7e04:	0000994d 	.word	0x0000994d
    7e08:	200001a8 	.word	0x200001a8
    7e0c:	00009975 	.word	0x00009975
    7e10:	00009735 	.word	0x00009735
    7e14:	0000980d 	.word	0x0000980d
    7e18:	00009709 	.word	0x00009709
    7e1c:	000098b5 	.word	0x000098b5
    7e20:	00009891 	.word	0x00009891
    7e24:	000098d9 	.word	0x000098d9
    7e28:	000099cd 	.word	0x000099cd
    7e2c:	000097c5 	.word	0x000097c5
    7e30:	000097f5 	.word	0x000097f5

00007e34 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    7e34:	4806      	ldr	r0, [pc, #24]	; (7e50 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    7e36:	4905      	ldr	r1, [pc, #20]	; (7e4c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    7e38:	6581      	str	r1, [r0, #88]	; 0x58
    7e3a:	4906      	ldr	r1, [pc, #24]	; (7e54 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    7e3c:	6601      	str	r1, [r0, #96]	; 0x60
    7e3e:	4807      	ldr	r0, [pc, #28]	; (7e5c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    7e40:	4905      	ldr	r1, [pc, #20]	; (7e58 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    7e42:	6581      	str	r1, [r0, #88]	; 0x58
    7e44:	4906      	ldr	r1, [pc, #24]	; (7e60 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    7e46:	65c1      	str	r1, [r0, #92]	; 0x5c
    7e48:	4770      	bx	lr
    7e4a:	0000      	.short	0x0000
    7e4c:	00009215 	.word	0x00009215
    7e50:	20000144 	.word	0x20000144
    7e54:	000092ed 	.word	0x000092ed
    7e58:	00009839 	.word	0x00009839
    7e5c:	200001a8 	.word	0x200001a8
    7e60:	00009869 	.word	0x00009869

00007e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    7e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e68:	2601      	movs	r6, #1
    7e6a:	4c7c      	ldr	r4, [pc, #496]	; (805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>)
    7e6c:	2500      	movs	r5, #0
    7e6e:	f366 0107 	bfi	r1, r6, #0, #8
    7e72:	8065      	strh	r5, [r4, #2]
    7e74:	7065      	strb	r5, [r4, #1]
    7e76:	7025      	strb	r5, [r4, #0]
    7e78:	60a0      	str	r0, [r4, #8]
    7e7a:	4689      	mov	r9, r1
    7e7c:	4680      	mov	r8, r0
    7e7e:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
    7e82:	8800      	ldrh	r0, [r0, #0]
    7e84:	f7fc fb5c 	bl	4540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7e88:	b180      	cbz	r0, 7eac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    7e8a:	68a0      	ldr	r0, [r4, #8]
    7e8c:	8800      	ldrh	r0, [r0, #0]
    7e8e:	f7fc fe01 	bl	4a94 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    7e92:	68a0      	ldr	r0, [r4, #8]
    7e94:	8800      	ldrh	r0, [r0, #0]
    7e96:	f7fc fda5 	bl	49e4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    7e9a:	68a0      	ldr	r0, [r4, #8]
    7e9c:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    7ea0:	b1c9      	cbz	r1, 7ed6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    7ea2:	3070      	adds	r0, #112	; 0x70
    7ea4:	f006 fb7f 	bl	e5a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7ea8:	b118      	cbz	r0, 7eb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    7eaa:	e014      	b.n	7ed6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    7eac:	f640 31c9 	movw	r1, #3017	; 0xbc9
    7eb0:	e06b      	b.n	7f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126>
    7eb2:	68a0      	ldr	r0, [r4, #8]
    7eb4:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    7eb8:	f88d 1000 	strb.w	r1, [sp]
    7ebc:	9900      	ldr	r1, [sp, #0]
    7ebe:	9100      	str	r1, [sp, #0]
    7ec0:	f89d 1000 	ldrb.w	r1, [sp]
    7ec4:	b139      	cbz	r1, 7ed6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    7ec6:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    7eca:	2301      	movs	r3, #1
    7ecc:	4619      	mov	r1, r3
    7ece:	3070      	adds	r0, #112	; 0x70
    7ed0:	f004 ffc1 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7ed4:	b180      	cbz	r0, 7ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    7ed6:	68a0      	ldr	r0, [r4, #8]
    7ed8:	3070      	adds	r0, #112	; 0x70
    7eda:	f006 fb64 	bl	e5a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7ede:	b128      	cbz	r0, 7eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    7ee0:	68a0      	ldr	r0, [r4, #8]
    7ee2:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    7ee6:	bf00      	nop
    7ee8:	f000 fbb0 	bl	864c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64c>
    7eec:	68a0      	ldr	r0, [r4, #8]
    7eee:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
    7ef2:	b189      	cbz	r1, 7f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    7ef4:	80a5      	strh	r5, [r4, #4]
    7ef6:	e01e      	b.n	7f36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    7ef8:	68a0      	ldr	r0, [r4, #8]
    7efa:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
    7efe:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    7f02:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    7f06:	2100      	movs	r1, #0
    7f08:	2002      	movs	r0, #2
    7f0a:	f000 fe41 	bl	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    7f0e:	68a0      	ldr	r0, [r4, #8]
    7f10:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    7f14:	2002      	movs	r0, #2
    7f16:	e7e7      	b.n	7ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    7f18:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
    7f1c:	f88d 1000 	strb.w	r1, [sp]
    7f20:	9900      	ldr	r1, [sp, #0]
    7f22:	9100      	str	r1, [sp, #0]
    7f24:	f89d 1000 	ldrb.w	r1, [sp]
    7f28:	b919      	cbnz	r1, 7f32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    7f2a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    7f2c:	8a82      	ldrh	r2, [r0, #20]
    7f2e:	4291      	cmp	r1, r2
    7f30:	d800      	bhi.n	7f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    7f32:	8a81      	ldrh	r1, [r0, #20]
    7f34:	80a1      	strh	r1, [r4, #4]
    7f36:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
    7f3a:	1e49      	subs	r1, r1, #1
    7f3c:	b28f      	uxth	r7, r1
    7f3e:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    7f42:	4439      	add	r1, r7
    7f44:	f820 195c 	strh.w	r1, [r0], #-92
    7f48:	8801      	ldrh	r1, [r0, #0]
    7f4a:	4439      	add	r1, r7
    7f4c:	8001      	strh	r1, [r0, #0]
    7f4e:	f001 fd6b 	bl	9a28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a28>
    7f52:	b120      	cbz	r0, 7f5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa>
    7f54:	68a0      	ldr	r0, [r4, #8]
    7f56:	f850 1f98 	ldr.w	r1, [r0, #152]!
    7f5a:	4439      	add	r1, r7
    7f5c:	6001      	str	r1, [r0, #0]
    7f5e:	68a1      	ldr	r1, [r4, #8]
    7f60:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    7f64:	2801      	cmp	r0, #1
    7f66:	d802      	bhi.n	7f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a>
    7f68:	1c40      	adds	r0, r0, #1
    7f6a:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
    7f6e:	b10f      	cbz	r7, 7f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x110>
    7f70:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
    7f74:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    7f78:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
    7f7c:	f101 0070 	add.w	r0, r1, #112	; 0x70
    7f80:	f005 f8eb 	bl	d15a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    7f84:	b120      	cbz	r0, 7f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c>
    7f86:	f640 410d 	movw	r1, #3085	; 0xc0d
    7f8a:	2031      	movs	r0, #49	; 0x31
    7f8c:	f7fb fea8 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f90:	68a0      	ldr	r0, [r4, #8]
    7f92:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    7f96:	290b      	cmp	r1, #11
    7f98:	d001      	beq.n	7f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
    7f9a:	290c      	cmp	r1, #12
    7f9c:	d118      	bne.n	7fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    7f9e:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    7fa2:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
    7fa6:	1ad2      	subs	r2, r2, r3
    7fa8:	b212      	sxth	r2, r2
    7faa:	2a00      	cmp	r2, #0
    7fac:	db10      	blt.n	7fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    7fae:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
    7fb2:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
    7fb6:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
    7fba:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    7fbe:	2103      	movs	r1, #3
    7fc0:	f7fd fdcc 	bl	5b5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7fc4:	68a0      	ldr	r0, [r4, #8]
    7fc6:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    7fca:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
    7fce:	e026      	b.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    7fd0:	2924      	cmp	r1, #36	; 0x24
    7fd2:	d111      	bne.n	7ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7fd4:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    7fd8:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    7fdc:	1a89      	subs	r1, r1, r2
    7fde:	b209      	sxth	r1, r1
    7fe0:	2900      	cmp	r1, #0
    7fe2:	db09      	blt.n	7ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7fe4:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    7fe8:	f000 fe82 	bl	8cf0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcf0>
    7fec:	2800      	cmp	r0, #0
    7fee:	68a0      	ldr	r0, [r4, #8]
    7ff0:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
    7ff4:	d029      	beq.n	804a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a>
    7ff6:	e012      	b.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    7ff8:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    7ffc:	2924      	cmp	r1, #36	; 0x24
    7ffe:	d001      	beq.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    8000:	2925      	cmp	r1, #37	; 0x25
    8002:	d10c      	bne.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    8004:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8008:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    800c:	1a89      	subs	r1, r1, r2
    800e:	b209      	sxth	r1, r1
    8010:	2900      	cmp	r1, #0
    8012:	db04      	blt.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    8014:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8018:	f000 fe6a 	bl	8cf0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcf0>
    801c:	b1a8      	cbz	r0, 804a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a>
    801e:	4810      	ldr	r0, [pc, #64]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    8020:	9000      	str	r0, [sp, #0]
    8022:	4b10      	ldr	r3, [pc, #64]	; (8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    8024:	4a10      	ldr	r2, [pc, #64]	; (8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>)
    8026:	4641      	mov	r1, r8
    8028:	4648      	mov	r0, r9
    802a:	f7fc fde9 	bl	4c00 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    802e:	68a0      	ldr	r0, [r4, #8]
    8030:	2301      	movs	r3, #1
    8032:	2105      	movs	r1, #5
    8034:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8038:	3070      	adds	r0, #112	; 0x70
    803a:	f004 ff0c 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    803e:	2800      	cmp	r0, #0
    8040:	d009      	beq.n	8056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
    8042:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8046:	f7fc bdd5 	b.w	4bf4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    804a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    804e:	2100      	movs	r1, #0
    8050:	4608      	mov	r0, r1
    8052:	f000 bbd5 	b.w	8800 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x800>
    8056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    805a:	0000      	.short	0x0000
    805c:	20000130 	.word	0x20000130
    8060:	00008801 	.word	0x00008801
    8064:	00008305 	.word	0x00008305
    8068:	00008c3d 	.word	0x00008c3d
    806c:	b570      	push	{r4, r5, r6, lr}
    806e:	4c0f      	ldr	r4, [pc, #60]	; (80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>)
    8070:	68a5      	ldr	r5, [r4, #8]
    8072:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    8076:	2920      	cmp	r1, #32
    8078:	d002      	beq.n	8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>
    807a:	2926      	cmp	r1, #38	; 0x26
    807c:	d003      	beq.n	8086 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x86>
    807e:	e011      	b.n	80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
    8080:	f000 fe84 	bl	8d8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8c>
    8084:	e008      	b.n	8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>
    8086:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    808a:	2301      	movs	r3, #1
    808c:	210b      	movs	r1, #11
    808e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8092:	f004 fee0 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8096:	b138      	cbz	r0, 80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
    8098:	68a1      	ldr	r1, [r4, #8]
    809a:	2000      	movs	r0, #0
    809c:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    80a0:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    80a4:	2000      	movs	r0, #0
    80a6:	bd70      	pop	{r4, r5, r6, pc}
    80a8:	202a      	movs	r0, #42	; 0x2a
    80aa:	e7e9      	b.n	8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>
    80ac:	20000130 	.word	0x20000130
    80b0:	4804      	ldr	r0, [pc, #16]	; (80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>)
    80b2:	2100      	movs	r1, #0
    80b4:	6880      	ldr	r0, [r0, #8]
    80b6:	f820 1fb0 	strh.w	r1, [r0, #176]!
    80ba:	7881      	ldrb	r1, [r0, #2]
    80bc:	1c49      	adds	r1, r1, #1
    80be:	7081      	strb	r1, [r0, #2]
    80c0:	4770      	bx	lr
    80c2:	0000      	.short	0x0000
    80c4:	20000130 	.word	0x20000130
    80c8:	4807      	ldr	r0, [pc, #28]	; (80e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>)
    80ca:	b510      	push	{r4, lr}
    80cc:	6881      	ldr	r1, [r0, #8]
    80ce:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
    80d2:	1e40      	subs	r0, r0, #1
    80d4:	b240      	sxtb	r0, r0
    80d6:	7008      	strb	r0, [r1, #0]
    80d8:	2800      	cmp	r0, #0
    80da:	da04      	bge.n	80e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    80dc:	f44f 71c9 	mov.w	r1, #402	; 0x192
    80e0:	2031      	movs	r0, #49	; 0x31
    80e2:	f7fb fdfd 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80e6:	bd10      	pop	{r4, pc}
    80e8:	20000130 	.word	0x20000130
    80ec:	491a      	ldr	r1, [pc, #104]	; (8158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>)
    80ee:	b508      	push	{r3, lr}
    80f0:	6889      	ldr	r1, [r1, #8]
    80f2:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    80f6:	b1b8      	cbz	r0, 8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>
    80f8:	2a10      	cmp	r2, #16
    80fa:	d006      	beq.n	810a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10a>
    80fc:	2a14      	cmp	r2, #20
    80fe:	d007      	beq.n	8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
    8100:	2a15      	cmp	r2, #21
    8102:	d008      	beq.n	8116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    8104:	2a1b      	cmp	r2, #27
    8106:	d122      	bne.n	814e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    8108:	e008      	b.n	811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>
    810a:	2101      	movs	r1, #1
    810c:	200b      	movs	r0, #11
    810e:	e007      	b.n	8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>
    8110:	f001 faac 	bl	966c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166c>
    8114:	e006      	b.n	8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>
    8116:	f000 fd59 	bl	8bcc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbcc>
    811a:	e003      	b.n	8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>
    811c:	2101      	movs	r1, #1
    811e:	2006      	movs	r0, #6
    8120:	f000 fd36 	bl	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    8124:	2001      	movs	r0, #1
    8126:	bd08      	pop	{r3, pc}
    8128:	2a21      	cmp	r2, #33	; 0x21
    812a:	d110      	bne.n	814e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    812c:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    8130:	2802      	cmp	r0, #2
    8132:	d00e      	beq.n	8152 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152>
    8134:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    8138:	2801      	cmp	r0, #1
    813a:	d108      	bne.n	814e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    813c:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
    8140:	f88d 0000 	strb.w	r0, [sp]
    8144:	9800      	ldr	r0, [sp, #0]
    8146:	9000      	str	r0, [sp, #0]
    8148:	f89d 0000 	ldrb.w	r0, [sp]
    814c:	b108      	cbz	r0, 8152 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152>
    814e:	2000      	movs	r0, #0
    8150:	bd08      	pop	{r3, pc}
    8152:	2101      	movs	r1, #1
    8154:	2017      	movs	r0, #23
    8156:	e7e3      	b.n	8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>
    8158:	20000130 	.word	0x20000130
    815c:	b538      	push	{r3, r4, r5, lr}
    815e:	2800      	cmp	r0, #0
    8160:	d16b      	bne.n	823a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23a>
    8162:	4c37      	ldr	r4, [pc, #220]	; (8240 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x240>)
    8164:	68a0      	ldr	r0, [r4, #8]
    8166:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    816a:	07ca      	lsls	r2, r1, #31
    816c:	d002      	beq.n	8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>
    816e:	2101      	movs	r1, #1
    8170:	2009      	movs	r0, #9
    8172:	e05b      	b.n	822c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22c>
    8174:	078a      	lsls	r2, r1, #30
    8176:	d50a      	bpl.n	818e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18e>
    8178:	2101      	movs	r1, #1
    817a:	200c      	movs	r0, #12
    817c:	f000 fd08 	bl	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    8180:	68a0      	ldr	r0, [r4, #8]
    8182:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    8186:	f041 0101 	orr.w	r1, r1, #1
    818a:	7001      	strb	r1, [r0, #0]
    818c:	e050      	b.n	8230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>
    818e:	074a      	lsls	r2, r1, #29
    8190:	d502      	bpl.n	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    8192:	2101      	movs	r1, #1
    8194:	2013      	movs	r0, #19
    8196:	e049      	b.n	822c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22c>
    8198:	070a      	lsls	r2, r1, #28
    819a:	d505      	bpl.n	81a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>
    819c:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
    81a0:	7141      	strb	r1, [r0, #5]
    81a2:	2101      	movs	r1, #1
    81a4:	2007      	movs	r0, #7
    81a6:	e041      	b.n	822c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22c>
    81a8:	f011 0f30 	tst.w	r1, #48	; 0x30
    81ac:	d045      	beq.n	823a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23a>
    81ae:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    81b2:	f88d 1000 	strb.w	r1, [sp]
    81b6:	9900      	ldr	r1, [sp, #0]
    81b8:	9100      	str	r1, [sp, #0]
    81ba:	f89d 1000 	ldrb.w	r1, [sp]
    81be:	bbc9      	cbnz	r1, 8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    81c0:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    81c4:	f88d 1000 	strb.w	r1, [sp]
    81c8:	9900      	ldr	r1, [sp, #0]
    81ca:	9100      	str	r1, [sp, #0]
    81cc:	f89d 1000 	ldrb.w	r1, [sp]
    81d0:	b1c9      	cbz	r1, 8206 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x206>
    81d2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    81d6:	2924      	cmp	r1, #36	; 0x24
    81d8:	d02d      	beq.n	8236 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x236>
    81da:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    81de:	2924      	cmp	r1, #36	; 0x24
    81e0:	d029      	beq.n	8236 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x236>
    81e2:	2300      	movs	r3, #0
    81e4:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    81e8:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    81ec:	f005 fa5f 	bl	d6ae <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    81f0:	68a0      	ldr	r0, [r4, #8]
    81f2:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    81f6:	f021 0120 	bic.w	r1, r1, #32
    81fa:	f041 0110 	orr.w	r1, r1, #16
    81fe:	7001      	strb	r1, [r0, #0]
    8200:	2100      	movs	r1, #0
    8202:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
    8206:	68a0      	ldr	r0, [r4, #8]
    8208:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    820c:	06c9      	lsls	r1, r1, #27
    820e:	d514      	bpl.n	823a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23a>
    8210:	f005 fa68 	bl	d6e4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8214:	f000 f910 	bl	8438 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x438>
    8218:	68a1      	ldr	r1, [r4, #8]
    821a:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    821e:	8bc2      	ldrh	r2, [r0, #30]
    8220:	f821 2fee 	strh.w	r2, [r1, #238]!
    8224:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8226:	8048      	strh	r0, [r1, #2]
    8228:	2101      	movs	r1, #1
    822a:	2015      	movs	r0, #21
    822c:	f000 fcb0 	bl	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    8230:	2001      	movs	r0, #1
    8232:	bd38      	pop	{r3, r4, r5, pc}
    8234:	e001      	b.n	823a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23a>
    8236:	2301      	movs	r3, #1
    8238:	e7d4      	b.n	81e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>
    823a:	2000      	movs	r0, #0
    823c:	e7f9      	b.n	8232 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x232>
    823e:	0000      	.short	0x0000
    8240:	20000130 	.word	0x20000130
    8244:	b570      	push	{r4, r5, r6, lr}
    8246:	460d      	mov	r5, r1
    8248:	4606      	mov	r6, r0
    824a:	f005 f872 	bl	d332 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    824e:	4604      	mov	r4, r0
    8250:	4630      	mov	r0, r6
    8252:	f005 f87a 	bl	d34a <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8256:	4629      	mov	r1, r5
    8258:	f000 f81e 	bl	8298 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x298>
    825c:	b1b8      	cbz	r0, 828e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28e>
    825e:	4620      	mov	r0, r4
    8260:	f004 fe92 	bl	cf88 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8264:	0001      	movs	r1, r0
    8266:	d00d      	beq.n	8284 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x284>
    8268:	480a      	ldr	r0, [pc, #40]	; (8294 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x294>)
    826a:	6880      	ldr	r0, [r0, #8]
    826c:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    8270:	428a      	cmp	r2, r1
    8272:	d007      	beq.n	8284 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x284>
    8274:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    8278:	2901      	cmp	r1, #1
    827a:	d005      	beq.n	8288 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x288>
    827c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8280:	4220      	tst	r0, r4
    8282:	d004      	beq.n	828e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28e>
    8284:	2001      	movs	r0, #1
    8286:	bd70      	pop	{r4, r5, r6, pc}
    8288:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
    828c:	e7f8      	b.n	8280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    828e:	2000      	movs	r0, #0
    8290:	bd70      	pop	{r4, r5, r6, pc}
    8292:	0000      	.short	0x0000
    8294:	20000130 	.word	0x20000130
    8298:	b570      	push	{r4, r5, r6, lr}
    829a:	460d      	mov	r5, r1
    829c:	4604      	mov	r4, r0
    829e:	f004 fe73 	bl	cf88 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    82a2:	b350      	cbz	r0, 82fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fa>
    82a4:	4916      	ldr	r1, [pc, #88]	; (8300 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x300>)
    82a6:	6889      	ldr	r1, [r1, #8]
    82a8:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    82ac:	4282      	cmp	r2, r0
    82ae:	d024      	beq.n	82fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fa>
    82b0:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
    82b4:	2b01      	cmp	r3, #1
    82b6:	d005      	beq.n	82c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c4>
    82b8:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    82bc:	4223      	tst	r3, r4
    82be:	d013      	beq.n	82e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    82c0:	b11d      	cbz	r5, 82ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ca>
    82c2:	e01a      	b.n	82fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fa>
    82c4:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
    82c8:	e7f8      	b.n	82bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2bc>
    82ca:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    82ce:	4221      	tst	r1, r4
    82d0:	d113      	bne.n	82fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fa>
    82d2:	b15a      	cbz	r2, 82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    82d4:	2a04      	cmp	r2, #4
    82d6:	d00e      	beq.n	82f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f6>
    82d8:	2804      	cmp	r0, #4
    82da:	d00c      	beq.n	82f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f6>
    82dc:	2a08      	cmp	r2, #8
    82de:	d00a      	beq.n	82f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f6>
    82e0:	2808      	cmp	r0, #8
    82e2:	d008      	beq.n	82f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f6>
    82e4:	4282      	cmp	r2, r0
    82e6:	d908      	bls.n	82fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fa>
    82e8:	2000      	movs	r0, #0
    82ea:	bd70      	pop	{r4, r5, r6, pc}
    82ec:	f240 1155 	movw	r1, #341	; 0x155
    82f0:	2006      	movs	r0, #6
    82f2:	f7fb fcf5 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82f6:	4282      	cmp	r2, r0
    82f8:	d3f6      	bcc.n	82e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    82fa:	2001      	movs	r0, #1
    82fc:	bd70      	pop	{r4, r5, r6, pc}
    82fe:	0000      	.short	0x0000
    8300:	20000130 	.word	0x20000130
    8304:	490c      	ldr	r1, [pc, #48]	; (8338 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x338>)
    8306:	4602      	mov	r2, r0
    8308:	7848      	ldrb	r0, [r1, #1]
    830a:	b998      	cbnz	r0, 8334 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x334>
    830c:	4608      	mov	r0, r1
    830e:	6880      	ldr	r0, [r0, #8]
    8310:	b142      	cbz	r2, 8324 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x324>
    8312:	7889      	ldrb	r1, [r1, #2]
    8314:	0709      	lsls	r1, r1, #28
    8316:	d503      	bpl.n	8320 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x320>
    8318:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    831c:	2808      	cmp	r0, #8
    831e:	d009      	beq.n	8334 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x334>
    8320:	2001      	movs	r0, #1
    8322:	4770      	bx	lr
    8324:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    8328:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    832a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    832c:	428a      	cmp	r2, r1
    832e:	d801      	bhi.n	8334 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x334>
    8330:	f7ff b81a 	b.w	7368 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8334:	2000      	movs	r0, #0
    8336:	4770      	bx	lr
    8338:	20000130 	.word	0x20000130
    833c:	b538      	push	{r3, r4, r5, lr}
    833e:	4c3d      	ldr	r4, [pc, #244]	; (8434 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x434>)
    8340:	4605      	mov	r5, r0
    8342:	68a0      	ldr	r0, [r4, #8]
    8344:	3070      	adds	r0, #112	; 0x70
    8346:	f006 f92e 	bl	e5a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    834a:	2800      	cmp	r0, #0
    834c:	d170      	bne.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    834e:	2d00      	cmp	r5, #0
    8350:	d16e      	bne.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    8352:	68a0      	ldr	r0, [r4, #8]
    8354:	2301      	movs	r3, #1
    8356:	4619      	mov	r1, r3
    8358:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    835c:	3070      	adds	r0, #112	; 0x70
    835e:	f004 fd7a 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8362:	2800      	cmp	r0, #0
    8364:	d164      	bne.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    8366:	68a0      	ldr	r0, [r4, #8]
    8368:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    836c:	f88d 1000 	strb.w	r1, [sp]
    8370:	9900      	ldr	r1, [sp, #0]
    8372:	9100      	str	r1, [sp, #0]
    8374:	f89d 1000 	ldrb.w	r1, [sp]
    8378:	b149      	cbz	r1, 838e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    837a:	2100      	movs	r1, #0
    837c:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    8380:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    8384:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    8388:	2100      	movs	r1, #0
    838a:	2002      	movs	r0, #2
    838c:	e045      	b.n	841a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x41a>
    838e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8392:	2301      	movs	r3, #1
    8394:	2104      	movs	r1, #4
    8396:	3070      	adds	r0, #112	; 0x70
    8398:	f004 fd5d 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    839c:	4605      	mov	r5, r0
    839e:	f7ff fedd 	bl	815c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    83a2:	2800      	cmp	r0, #0
    83a4:	d144      	bne.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    83a6:	4628      	mov	r0, r5
    83a8:	f7ff fea0 	bl	80ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    83ac:	2800      	cmp	r0, #0
    83ae:	d13f      	bne.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    83b0:	68a0      	ldr	r0, [r4, #8]
    83b2:	2301      	movs	r3, #1
    83b4:	2100      	movs	r1, #0
    83b6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    83ba:	3070      	adds	r0, #112	; 0x70
    83bc:	f004 fd4b 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83c0:	b178      	cbz	r0, 83e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e2>
    83c2:	68a0      	ldr	r0, [r4, #8]
    83c4:	2301      	movs	r3, #1
    83c6:	2104      	movs	r1, #4
    83c8:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    83cc:	3070      	adds	r0, #112	; 0x70
    83ce:	f004 fd42 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83d2:	b930      	cbnz	r0, 83e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e2>
    83d4:	68a0      	ldr	r0, [r4, #8]
    83d6:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
    83da:	b110      	cbz	r0, 83e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e2>
    83dc:	2100      	movs	r1, #0
    83de:	2012      	movs	r0, #18
    83e0:	e01b      	b.n	841a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x41a>
    83e2:	68a0      	ldr	r0, [r4, #8]
    83e4:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    83e8:	290a      	cmp	r1, #10
    83ea:	d01a      	beq.n	8422 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x422>
    83ec:	2d00      	cmp	r5, #0
    83ee:	d11f      	bne.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    83f0:	f000 fb1a 	bl	8a28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa28>
    83f4:	2800      	cmp	r0, #0
    83f6:	d11b      	bne.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    83f8:	68a0      	ldr	r0, [r4, #8]
    83fa:	2301      	movs	r3, #1
    83fc:	2100      	movs	r1, #0
    83fe:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8402:	3070      	adds	r0, #112	; 0x70
    8404:	f004 fd27 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8408:	2800      	cmp	r0, #0
    840a:	d011      	beq.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    840c:	68a0      	ldr	r0, [r4, #8]
    840e:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
    8412:	2800      	cmp	r0, #0
    8414:	d00c      	beq.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    8416:	2100      	movs	r1, #0
    8418:	20ff      	movs	r0, #255	; 0xff
    841a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    841e:	f000 bbb7 	b.w	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    8422:	f810 1fea 	ldrb.w	r1, [r0, #234]!
    8426:	7101      	strb	r1, [r0, #4]
    8428:	2100      	movs	r1, #0
    842a:	2007      	movs	r0, #7
    842c:	e7f5      	b.n	841a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x41a>
    842e:	e7ff      	b.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    8430:	bd38      	pop	{r3, r4, r5, pc}
    8432:	0000      	.short	0x0000
    8434:	20000130 	.word	0x20000130
    8438:	480a      	ldr	r0, [pc, #40]	; (8464 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x464>)
    843a:	b510      	push	{r4, lr}
    843c:	6881      	ldr	r1, [r0, #8]
    843e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    8442:	2801      	cmp	r0, #1
    8444:	d009      	beq.n	845a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45a>
    8446:	8808      	ldrh	r0, [r1, #0]
    8448:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    844c:	312c      	adds	r1, #44	; 0x2c
    844e:	f005 f90a 	bl	d666 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8456:	f7fd bdcf 	b.w	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    845a:	2002      	movs	r0, #2
    845c:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    8460:	bd10      	pop	{r4, pc}
    8462:	0000      	.short	0x0000
    8464:	20000130 	.word	0x20000130
    8468:	b570      	push	{r4, r5, r6, lr}
    846a:	4c25      	ldr	r4, [pc, #148]	; (8500 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x500>)
    846c:	0005      	movs	r5, r0
    846e:	d12f      	bne.n	84d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d0>
    8470:	f000 f8a4 	bl	85bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5bc>
    8474:	f000 f848 	bl	8508 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x508>
    8478:	0005      	movs	r5, r0
    847a:	d129      	bne.n	84d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d0>
    847c:	8860      	ldrh	r0, [r4, #2]
    847e:	0741      	lsls	r1, r0, #29
    8480:	d506      	bpl.n	8490 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x490>
    8482:	68a1      	ldr	r1, [r4, #8]
    8484:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    8488:	2907      	cmp	r1, #7
    848a:	d101      	bne.n	8490 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x490>
    848c:	2101      	movs	r1, #1
    848e:	7021      	strb	r1, [r4, #0]
    8490:	0780      	lsls	r0, r0, #30
    8492:	d512      	bpl.n	84ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ba>
    8494:	68e0      	ldr	r0, [r4, #12]
    8496:	78c0      	ldrb	r0, [r0, #3]
    8498:	2819      	cmp	r0, #25
    849a:	d205      	bcs.n	84a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    849c:	4919      	ldr	r1, [pc, #100]	; (8504 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x504>)
    849e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    84a2:	b109      	cbz	r1, 84a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    84a4:	4788      	blx	r1
    84a6:	e008      	b.n	84ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ba>
    84a8:	28ff      	cmp	r0, #255	; 0xff
    84aa:	d004      	beq.n	84b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b6>
    84ac:	f240 714d 	movw	r1, #1869	; 0x74d
    84b0:	2031      	movs	r0, #49	; 0x31
    84b2:	f7fb fc15 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84b6:	f001 f91b 	bl	96f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16f0>
    84ba:	78a0      	ldrb	r0, [r4, #2]
    84bc:	06c0      	lsls	r0, r0, #27
    84be:	d507      	bpl.n	84d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d0>
    84c0:	68a0      	ldr	r0, [r4, #8]
    84c2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    84c6:	290b      	cmp	r1, #11
    84c8:	d102      	bne.n	84d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d0>
    84ca:	210c      	movs	r1, #12
    84cc:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    84d0:	7860      	ldrb	r0, [r4, #1]
    84d2:	0700      	lsls	r0, r0, #28
    84d4:	d511      	bpl.n	84fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4fa>
    84d6:	68a0      	ldr	r0, [r4, #8]
    84d8:	2301      	movs	r3, #1
    84da:	2105      	movs	r1, #5
    84dc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    84e0:	3070      	adds	r0, #112	; 0x70
    84e2:	f004 fcb8 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    84e6:	b128      	cbz	r0, 84f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f4>
    84e8:	68a1      	ldr	r1, [r4, #8]
    84ea:	2508      	movs	r5, #8
    84ec:	2000      	movs	r0, #0
    84ee:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
    84f2:	e002      	b.n	84fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4fa>
    84f4:	2000      	movs	r0, #0
    84f6:	f7fc fc4d 	bl	4d94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    84fa:	4628      	mov	r0, r5
    84fc:	bd70      	pop	{r4, r5, r6, pc}
    84fe:	0000      	.short	0x0000
    8500:	20000130 	.word	0x20000130
    8504:	200001a8 	.word	0x200001a8
    8508:	b570      	push	{r4, r5, r6, lr}
    850a:	4c2a      	ldr	r4, [pc, #168]	; (85b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b4>)
    850c:	2000      	movs	r0, #0
    850e:	78a1      	ldrb	r1, [r4, #2]
    8510:	07c9      	lsls	r1, r1, #31
    8512:	d015      	beq.n	8540 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x540>
    8514:	6920      	ldr	r0, [r4, #16]
    8516:	2301      	movs	r3, #1
    8518:	2105      	movs	r1, #5
    851a:	78c5      	ldrb	r5, [r0, #3]
    851c:	68a0      	ldr	r0, [r4, #8]
    851e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8522:	3070      	adds	r0, #112	; 0x70
    8524:	f004 fc97 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8528:	b158      	cbz	r0, 8542 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x542>
    852a:	1ead      	subs	r5, r5, #2
    852c:	2d0a      	cmp	r5, #10
    852e:	d206      	bcs.n	853e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x53e>
    8530:	e8df f005 	tbb	[pc, r5]
    8534:	05050707 	.word	0x05050707
    8538:	05050707 	.word	0x05050707
    853c:	0707      	.short	0x0707
    853e:	2008      	movs	r0, #8
    8540:	bd70      	pop	{r4, r5, r6, pc}
    8542:	6920      	ldr	r0, [r4, #16]
    8544:	f7fd fc34 	bl	5db0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    8548:	b138      	cbz	r0, 855a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55a>
    854a:	6920      	ldr	r0, [r4, #16]
    854c:	78c5      	ldrb	r5, [r0, #3]
    854e:	b145      	cbz	r5, 8562 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x562>
    8550:	2d01      	cmp	r5, #1
    8552:	d006      	beq.n	8562 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x562>
    8554:	2d16      	cmp	r5, #22
    8556:	d118      	bne.n	858a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58a>
    8558:	e003      	b.n	8562 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x562>
    855a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    855e:	f000 bd3d 	b.w	8fdc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfdc>
    8562:	68a0      	ldr	r0, [r4, #8]
    8564:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    8568:	f004 fcc3 	bl	cef2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    856c:	b168      	cbz	r0, 858a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58a>
    856e:	68a1      	ldr	r1, [r4, #8]
    8570:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    8574:	281f      	cmp	r0, #31
    8576:	d008      	beq.n	858a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58a>
    8578:	2820      	cmp	r0, #32
    857a:	d003      	beq.n	8584 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x584>
    857c:	2d16      	cmp	r5, #22
    857e:	d00c      	beq.n	859a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59a>
    8580:	2002      	movs	r0, #2
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	2026      	movs	r0, #38	; 0x26
    8586:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    858a:	2d19      	cmp	r5, #25
    858c:	d207      	bcs.n	859e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59e>
    858e:	480a      	ldr	r0, [pc, #40]	; (85b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b8>)
    8590:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8594:	b118      	cbz	r0, 859e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59e>
    8596:	4780      	blx	r0
    8598:	e003      	b.n	85a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a2>
    859a:	2020      	movs	r0, #32
    859c:	bd70      	pop	{r4, r5, r6, pc}
    859e:	f000 fd1d 	bl	8fdc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfdc>
    85a2:	68a2      	ldr	r2, [r4, #8]
    85a4:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
    85a8:	1c49      	adds	r1, r1, #1
    85aa:	f143 0300 	adc.w	r3, r3, #0
    85ae:	e9c2 1300 	strd	r1, r3, [r2]
    85b2:	bd70      	pop	{r4, r5, r6, pc}
    85b4:	20000130 	.word	0x20000130
    85b8:	20000144 	.word	0x20000144
    85bc:	b570      	push	{r4, r5, r6, lr}
    85be:	4c22      	ldr	r4, [pc, #136]	; (8648 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x648>)
    85c0:	78a0      	ldrb	r0, [r4, #2]
    85c2:	0700      	lsls	r0, r0, #28
    85c4:	d53e      	bpl.n	8644 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x644>
    85c6:	68a0      	ldr	r0, [r4, #8]
    85c8:	3070      	adds	r0, #112	; 0x70
    85ca:	f005 ffec 	bl	e5a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    85ce:	b148      	cbz	r0, 85e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    85d0:	68a0      	ldr	r0, [r4, #8]
    85d2:	21fe      	movs	r1, #254	; 0xfe
    85d4:	2500      	movs	r5, #0
    85d6:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    85da:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    85de:	2919      	cmp	r1, #25
    85e0:	d10c      	bne.n	85fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fc>
    85e2:	e004      	b.n	85ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ee>
    85e4:	f240 7157 	movw	r1, #1879	; 0x757
    85e8:	2031      	movs	r0, #49	; 0x31
    85ea:	f7fb fb79 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85ee:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
    85f2:	f7ff fd69 	bl	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    85f6:	68a0      	ldr	r0, [r4, #8]
    85f8:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    85fc:	68a0      	ldr	r0, [r4, #8]
    85fe:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8602:	291f      	cmp	r1, #31
    8604:	d002      	beq.n	860c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60c>
    8606:	2927      	cmp	r1, #39	; 0x27
    8608:	d113      	bne.n	8632 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x632>
    860a:	e00b      	b.n	8624 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x624>
    860c:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    8610:	f004 fc6f 	bl	cef2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8614:	b108      	cbz	r0, 861a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61a>
    8616:	2026      	movs	r0, #38	; 0x26
    8618:	e000      	b.n	861c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    861a:	2020      	movs	r0, #32
    861c:	68a1      	ldr	r1, [r4, #8]
    861e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8622:	e006      	b.n	8632 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x632>
    8624:	2101      	movs	r1, #1
    8626:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
    862a:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    862e:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    8632:	68a0      	ldr	r0, [r4, #8]
    8634:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    8638:	2908      	cmp	r1, #8
    863a:	d103      	bne.n	8644 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x644>
    863c:	2102      	movs	r1, #2
    863e:	7021      	strb	r1, [r4, #0]
    8640:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    8644:	bd70      	pop	{r4, r5, r6, pc}
    8646:	0000      	.short	0x0000
    8648:	20000130 	.word	0x20000130
    864c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    864e:	4605      	mov	r5, r0
    8650:	4668      	mov	r0, sp
    8652:	f7fc fa09 	bl	4a68 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    8656:	b318      	cbz	r0, 86a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a0>
    8658:	2222      	movs	r2, #34	; 0x22
    865a:	2100      	movs	r1, #0
    865c:	9800      	ldr	r0, [sp, #0]
    865e:	f003 fa07 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8662:	2103      	movs	r1, #3
    8664:	9800      	ldr	r0, [sp, #0]
    8666:	f004 fec4 	bl	d3f2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    866a:	9800      	ldr	r0, [sp, #0]
    866c:	7801      	ldrb	r1, [r0, #0]
    866e:	f021 0110 	bic.w	r1, r1, #16
    8672:	7001      	strb	r1, [r0, #0]
    8674:	4629      	mov	r1, r5
    8676:	f7fd fbc7 	bl	5e08 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    867a:	2100      	movs	r1, #0
    867c:	4c5f      	ldr	r4, [pc, #380]	; (87fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7fc>)
    867e:	f644 162f 	movw	r6, #18735	; 0x492f
    8682:	2d0e      	cmp	r5, #14
    8684:	d07e      	beq.n	8784 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x784>
    8686:	dc0e      	bgt.n	86a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a6>
    8688:	f1a5 0502 	sub.w	r5, r5, #2
    868c:	2d0c      	cmp	r5, #12
    868e:	d21c      	bcs.n	86ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ca>
    8690:	e8df f005 	tbb	[pc, r5]
    8694:	aa491b1e 	.word	0xaa491b1e
    8698:	551b1eaa 	.word	0x551b1eaa
    869c:	3034aa1b 	.word	0x3034aa1b
    86a0:	f640 1187 	movw	r1, #2439	; 0x987
    86a4:	e0a6      	b.n	87f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7f4>
    86a6:	2d15      	cmp	r5, #21
    86a8:	d05c      	beq.n	8764 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x764>
    86aa:	dc08      	bgt.n	86be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6be>
    86ac:	2d11      	cmp	r5, #17
    86ae:	d014      	beq.n	86da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6da>
    86b0:	2d12      	cmp	r5, #18
    86b2:	d01e      	beq.n	86f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f2>
    86b4:	2d13      	cmp	r5, #19
    86b6:	d01c      	beq.n	86f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f2>
    86b8:	2d14      	cmp	r5, #20
    86ba:	d106      	bne.n	86ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ca>
    86bc:	e052      	b.n	8764 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x764>
    86be:	2d16      	cmp	r5, #22
    86c0:	d027      	beq.n	8712 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x712>
    86c2:	2d17      	cmp	r5, #23
    86c4:	d069      	beq.n	879a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x79a>
    86c6:	2dff      	cmp	r5, #255	; 0xff
    86c8:	d072      	beq.n	87b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b0>
    86ca:	f640 11fd 	movw	r1, #2557	; 0x9fd
    86ce:	e091      	b.n	87f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7f4>
    86d0:	68a1      	ldr	r1, [r4, #8]
    86d2:	9800      	ldr	r0, [sp, #0]
    86d4:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
    86d8:	e00e      	b.n	86f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f8>
    86da:	68a0      	ldr	r0, [r4, #8]
    86dc:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
    86e0:	9800      	ldr	r0, [sp, #0]
    86e2:	f004 fe62 	bl	d3aa <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    86e6:	68a0      	ldr	r0, [r4, #8]
    86e8:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
    86ec:	9800      	ldr	r0, [sp, #0]
    86ee:	f004 fe5e 	bl	d3ae <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    86f2:	e079      	b.n	87e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e8>
    86f4:	9800      	ldr	r0, [sp, #0]
    86f6:	2106      	movs	r1, #6
    86f8:	7101      	strb	r1, [r0, #4]
    86fa:	e075      	b.n	87e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e8>
    86fc:	9800      	ldr	r0, [sp, #0]
    86fe:	220b      	movs	r2, #11
    8700:	7102      	strb	r2, [r0, #4]
    8702:	2259      	movs	r2, #89	; 0x59
    8704:	7142      	strb	r2, [r0, #5]
    8706:	7181      	strb	r1, [r0, #6]
    8708:	21fe      	movs	r1, #254	; 0xfe
    870a:	71c1      	strb	r1, [r0, #7]
    870c:	2112      	movs	r1, #18
    870e:	7201      	strb	r1, [r0, #8]
    8710:	e06a      	b.n	87e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e8>
    8712:	9800      	ldr	r0, [sp, #0]
    8714:	f8d4 1008 	ldr.w	r1, [r4, #8]
    8718:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
    871c:	7102      	strb	r2, [r0, #4]
    871e:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
    8722:	7141      	strb	r1, [r0, #5]
    8724:	e060      	b.n	87e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e8>
    8726:	68a1      	ldr	r1, [r4, #8]
    8728:	9800      	ldr	r0, [sp, #0]
    872a:	f501 718c 	add.w	r1, r1, #280	; 0x118
    872e:	f004 fe51 	bl	d3d4 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    8732:	68a1      	ldr	r1, [r4, #8]
    8734:	9800      	ldr	r0, [sp, #0]
    8736:	31e4      	adds	r1, #228	; 0xe4
    8738:	f004 fe49 	bl	d3ce <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    873c:	e054      	b.n	87e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e8>
    873e:	9101      	str	r1, [sp, #4]
    8740:	9102      	str	r1, [sp, #8]
    8742:	f001 fe05 	bl	a350 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8746:	68a1      	ldr	r1, [r4, #8]
    8748:	4030      	ands	r0, r6
    874a:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    874e:	4001      	ands	r1, r0
    8750:	f88d 1004 	strb.w	r1, [sp, #4]
    8754:	0a00      	lsrs	r0, r0, #8
    8756:	f88d 0005 	strb.w	r0, [sp, #5]
    875a:	a901      	add	r1, sp, #4
    875c:	9800      	ldr	r0, [sp, #0]
    875e:	f004 fe43 	bl	d3e8 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    8762:	e041      	b.n	87e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e8>
    8764:	68a0      	ldr	r0, [r4, #8]
    8766:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    876a:	9800      	ldr	r0, [sp, #0]
    876c:	f004 fe49 	bl	d402 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    8770:	68a0      	ldr	r0, [r4, #8]
    8772:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
    8776:	9800      	ldr	r0, [sp, #0]
    8778:	f004 fe47 	bl	d40a <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    877c:	68a0      	ldr	r0, [r4, #8]
    877e:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    8782:	e000      	b.n	8786 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x786>
    8784:	e015      	b.n	87b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b2>
    8786:	9800      	ldr	r0, [sp, #0]
    8788:	f004 fe43 	bl	d412 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    878c:	68a0      	ldr	r0, [r4, #8]
    878e:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
    8792:	9800      	ldr	r0, [sp, #0]
    8794:	f004 fe41 	bl	d41a <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    8798:	e026      	b.n	87e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e8>
    879a:	68a1      	ldr	r1, [r4, #8]
    879c:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    87a0:	2801      	cmp	r0, #1
    87a2:	9800      	ldr	r0, [sp, #0]
    87a4:	d0b8      	beq.n	8718 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x718>
    87a6:	f811 2f66 	ldrb.w	r2, [r1, #102]!
    87aa:	7102      	strb	r2, [r0, #4]
    87ac:	7849      	ldrb	r1, [r1, #1]
    87ae:	e7b8      	b.n	8722 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x722>
    87b0:	e012      	b.n	87d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d8>
    87b2:	9101      	str	r1, [sp, #4]
    87b4:	9102      	str	r1, [sp, #8]
    87b6:	f001 fdcb 	bl	a350 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    87ba:	68a1      	ldr	r1, [r4, #8]
    87bc:	4030      	ands	r0, r6
    87be:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    87c2:	4001      	ands	r1, r0
    87c4:	f88d 1004 	strb.w	r1, [sp, #4]
    87c8:	0a00      	lsrs	r0, r0, #8
    87ca:	f88d 0005 	strb.w	r0, [sp, #5]
    87ce:	a901      	add	r1, sp, #4
    87d0:	9800      	ldr	r0, [sp, #0]
    87d2:	f004 fe04 	bl	d3de <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    87d6:	e007      	b.n	87e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e8>
    87d8:	68a0      	ldr	r0, [r4, #8]
    87da:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    87de:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    87e2:	9800      	ldr	r0, [sp, #0]
    87e4:	f004 fde5 	bl	d3b2 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    87e8:	f7fc f918 	bl	4a1c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    87ec:	2800      	cmp	r0, #0
    87ee:	d104      	bne.n	87fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7fa>
    87f0:	f640 2101 	movw	r1, #2561	; 0xa01
    87f4:	2031      	movs	r0, #49	; 0x31
    87f6:	f7fb fa73 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    87fc:	20000130 	.word	0x20000130
    8800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8804:	4c87      	ldr	r4, [pc, #540]	; (8a24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa24>)
    8806:	4682      	mov	sl, r0
    8808:	4689      	mov	r9, r1
    880a:	68a0      	ldr	r0, [r4, #8]
    880c:	8800      	ldrh	r0, [r0, #0]
    880e:	f7fb fe97 	bl	4540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8812:	0006      	movs	r6, r0
    8814:	d00a      	beq.n	882c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82c>
    8816:	8860      	ldrh	r0, [r4, #2]
    8818:	f04f 0500 	mov.w	r5, #0
    881c:	05c0      	lsls	r0, r0, #23
    881e:	68a0      	ldr	r0, [r4, #8]
    8820:	d509      	bpl.n	8836 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x836>
    8822:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
    8826:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
    882a:	e008      	b.n	883e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83e>
    882c:	f640 51a7 	movw	r1, #3495	; 0xda7
    8830:	2031      	movs	r0, #49	; 0x31
    8832:	f7fb fa55 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8836:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
    883a:	1c49      	adds	r1, r1, #1
    883c:	8001      	strh	r1, [r0, #0]
    883e:	f001 f8f3 	bl	9a28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a28>
    8842:	f04f 0801 	mov.w	r8, #1
    8846:	b320      	cbz	r0, 8892 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x892>
    8848:	8860      	ldrh	r0, [r4, #2]
    884a:	0500      	lsls	r0, r0, #20
    884c:	d506      	bpl.n	885c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x85c>
    884e:	68a0      	ldr	r0, [r4, #8]
    8850:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    8854:	b111      	cbz	r1, 885c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x85c>
    8856:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    885a:	e01a      	b.n	8892 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x892>
    885c:	68a0      	ldr	r0, [r4, #8]
    885e:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    8862:	1c49      	adds	r1, r1, #1
    8864:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    8868:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    886c:	428b      	cmp	r3, r1
    886e:	d301      	bcc.n	8874 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x874>
    8870:	1a5a      	subs	r2, r3, r1
    8872:	e000      	b.n	8876 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x876>
    8874:	2200      	movs	r2, #0
    8876:	88a7      	ldrh	r7, [r4, #4]
    8878:	1d7f      	adds	r7, r7, #5
    887a:	42ba      	cmp	r2, r7
    887c:	d801      	bhi.n	8882 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x882>
    887e:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    8882:	4299      	cmp	r1, r3
    8884:	d305      	bcc.n	8892 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x892>
    8886:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    888a:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
    888e:	f7fd fbb3 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8892:	8860      	ldrh	r0, [r4, #2]
    8894:	f04f 0702 	mov.w	r7, #2
    8898:	f410 7f40 	tst.w	r0, #768	; 0x300
    889c:	d00e      	beq.n	88bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8bc>
    889e:	68a0      	ldr	r0, [r4, #8]
    88a0:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    88a4:	b111      	cbz	r1, 88ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8ac>
    88a6:	2903      	cmp	r1, #3
    88a8:	d108      	bne.n	88bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8bc>
    88aa:	e002      	b.n	88b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b2>
    88ac:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    88b0:	e001      	b.n	88b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b6>
    88b2:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    88b6:	2101      	movs	r1, #1
    88b8:	f7fe fd7c 	bl	73b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    88bc:	68a0      	ldr	r0, [r4, #8]
    88be:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    88c2:	2901      	cmp	r1, #1
    88c4:	d104      	bne.n	88d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8d0>
    88c6:	8861      	ldrh	r1, [r4, #2]
    88c8:	0549      	lsls	r1, r1, #21
    88ca:	d501      	bpl.n	88d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8d0>
    88cc:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    88d0:	f1ba 0f00 	cmp.w	sl, #0
    88d4:	d176      	bne.n	89c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c4>
    88d6:	78a1      	ldrb	r1, [r4, #2]
    88d8:	0649      	lsls	r1, r1, #25
    88da:	d502      	bpl.n	88e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e2>
    88dc:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
    88e0:	e004      	b.n	88ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8ec>
    88e2:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    88e6:	1c49      	adds	r1, r1, #1
    88e8:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
    88ec:	4648      	mov	r0, r9
    88ee:	f7ff fdbb 	bl	8468 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x468>
    88f2:	ea40 0009 	orr.w	r0, r0, r9
    88f6:	4681      	mov	r9, r0
    88f8:	f7ff fd20 	bl	833c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33c>
    88fc:	68a7      	ldr	r7, [r4, #8]
    88fe:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
    8902:	1c40      	adds	r0, r0, #1
    8904:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
    8908:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    890c:	b128      	cbz	r0, 891a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x91a>
    890e:	f7fc faaf 	bl	4e70 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8912:	b1b0      	cbz	r0, 8942 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x942>
    8914:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8918:	e013      	b.n	8942 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x942>
    891a:	f7fc f927 	bl	4b6c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    891e:	b108      	cbz	r0, 8924 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x924>
    8920:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8924:	f7fc f91c 	bl	4b60 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8928:	b158      	cbz	r0, 8942 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x942>
    892a:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
    892e:	1c40      	adds	r0, r0, #1
    8930:	b2c0      	uxtb	r0, r0
    8932:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
    8936:	2802      	cmp	r0, #2
    8938:	d903      	bls.n	8942 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x942>
    893a:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    893e:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
    8942:	68a0      	ldr	r0, [r4, #8]
    8944:	2301      	movs	r3, #1
    8946:	2100      	movs	r1, #0
    8948:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    894c:	3070      	adds	r0, #112	; 0x70
    894e:	f004 fa82 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8952:	b920      	cbnz	r0, 895e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x95e>
    8954:	68a0      	ldr	r0, [r4, #8]
    8956:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    895a:	280c      	cmp	r0, #12
    895c:	d15e      	bne.n	8a1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa1c>
    895e:	68a0      	ldr	r0, [r4, #8]
    8960:	2301      	movs	r3, #1
    8962:	2100      	movs	r1, #0
    8964:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8968:	3070      	adds	r0, #112	; 0x70
    896a:	f004 fa74 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    896e:	b350      	cbz	r0, 89c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c6>
    8970:	68a0      	ldr	r0, [r4, #8]
    8972:	2301      	movs	r3, #1
    8974:	2100      	movs	r1, #0
    8976:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    897a:	3070      	adds	r0, #112	; 0x70
    897c:	f004 fa6b 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8980:	b308      	cbz	r0, 89c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c6>
    8982:	68a0      	ldr	r0, [r4, #8]
    8984:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8988:	2902      	cmp	r1, #2
    898a:	d147      	bne.n	8a1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa1c>
    898c:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    8990:	b9c8      	cbnz	r0, 89c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c6>
    8992:	4630      	mov	r0, r6
    8994:	f003 fd3b 	bl	c40e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8998:	b1a8      	cbz	r0, 89c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c6>
    899a:	68a0      	ldr	r0, [r4, #8]
    899c:	3070      	adds	r0, #112	; 0x70
    899e:	f005 fe02 	bl	e5a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    89a2:	b980      	cbnz	r0, 89c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c6>
    89a4:	68a1      	ldr	r1, [r4, #8]
    89a6:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    89aa:	2801      	cmp	r0, #1
    89ac:	d936      	bls.n	8a1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa1c>
    89ae:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
    89b2:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    89b6:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
    89ba:	1e93      	subs	r3, r2, #2
    89bc:	4298      	cmp	r0, r3
    89be:	db03      	blt.n	89c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c8>
    89c0:	2001      	movs	r0, #1
    89c2:	e004      	b.n	89ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9ce>
    89c4:	e01c      	b.n	8a00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa00>
    89c6:	e029      	b.n	8a1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa1c>
    89c8:	1a10      	subs	r0, r2, r0
    89ca:	1e40      	subs	r0, r0, #1
    89cc:	b280      	uxth	r0, r0
    89ce:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    89d2:	88a3      	ldrh	r3, [r4, #4]
    89d4:	429a      	cmp	r2, r3
    89d6:	d301      	bcc.n	89dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9dc>
    89d8:	2201      	movs	r2, #1
    89da:	e002      	b.n	89e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e2>
    89dc:	1a9a      	subs	r2, r3, r2
    89de:	1c52      	adds	r2, r2, #1
    89e0:	b292      	uxth	r2, r2
    89e2:	4290      	cmp	r0, r2
    89e4:	d900      	bls.n	89e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e8>
    89e6:	4610      	mov	r0, r2
    89e8:	2801      	cmp	r0, #1
    89ea:	d101      	bne.n	89f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9f0>
    89ec:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    89f0:	68a1      	ldr	r1, [r4, #8]
    89f2:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    89f6:	4410      	add	r0, r2
    89f8:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
    89fc:	f001 f8de 	bl	9bbc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bbc>
    8a00:	78a0      	ldrb	r0, [r4, #2]
    8a02:	464a      	mov	r2, r9
    8a04:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8a08:	4650      	mov	r0, sl
    8a0a:	f001 f821 	bl	9a50 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a50>
    8a0e:	68a0      	ldr	r0, [r4, #8]
    8a10:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    8a14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8a18:	f7fb bfea 	b.w	49f0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8a1c:	2001      	movs	r0, #1
    8a1e:	68a1      	ldr	r1, [r4, #8]
    8a20:	e7e4      	b.n	89ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9ec>
    8a22:	0000      	.short	0x0000
    8a24:	20000130 	.word	0x20000130
    8a28:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8a2a:	4c58      	ldr	r4, [pc, #352]	; (8b8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8c>)
    8a2c:	2301      	movs	r3, #1
    8a2e:	2100      	movs	r1, #0
    8a30:	68a0      	ldr	r0, [r4, #8]
    8a32:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8a36:	3070      	adds	r0, #112	; 0x70
    8a38:	f004 fa0d 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a3c:	2800      	cmp	r0, #0
    8a3e:	d07d      	beq.n	8b3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb3c>
    8a40:	68a0      	ldr	r0, [r4, #8]
    8a42:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    8a46:	2500      	movs	r5, #0
    8a48:	b139      	cbz	r1, 8a5a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa5a>
    8a4a:	2100      	movs	r1, #0
    8a4c:	200e      	movs	r0, #14
    8a4e:	f000 f89f 	bl	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    8a52:	68a0      	ldr	r0, [r4, #8]
    8a54:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
    8a58:	e095      	b.n	8b86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb86>
    8a5a:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    8a5e:	b119      	cbz	r1, 8a68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa68>
    8a60:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    8a64:	0789      	lsls	r1, r1, #30
    8a66:	d016      	beq.n	8a96 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa96>
    8a68:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    8a6c:	f88d 1004 	strb.w	r1, [sp, #4]
    8a70:	9901      	ldr	r1, [sp, #4]
    8a72:	9101      	str	r1, [sp, #4]
    8a74:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8a78:	b141      	cbz	r1, 8a8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8c>
    8a7a:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    8a7e:	f88d 1000 	strb.w	r1, [sp]
    8a82:	9900      	ldr	r1, [sp, #0]
    8a84:	9100      	str	r1, [sp, #0]
    8a86:	f89d 1000 	ldrb.w	r1, [sp]
    8a8a:	b189      	cbz	r1, 8ab0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xab0>
    8a8c:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    8a90:	2901      	cmp	r1, #1
    8a92:	d02f      	beq.n	8af4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaf4>
    8a94:	e071      	b.n	8b7a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb7a>
    8a96:	2100      	movs	r1, #0
    8a98:	200c      	movs	r0, #12
    8a9a:	f000 f879 	bl	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    8a9e:	68a0      	ldr	r0, [r4, #8]
    8aa0:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    8aa4:	f041 0101 	orr.w	r1, r1, #1
    8aa8:	7001      	strb	r1, [r0, #0]
    8aaa:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8aae:	e06a      	b.n	8b86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb86>
    8ab0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8ab4:	2924      	cmp	r1, #36	; 0x24
    8ab6:	d01b      	beq.n	8af0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaf0>
    8ab8:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8abc:	2924      	cmp	r1, #36	; 0x24
    8abe:	d017      	beq.n	8af0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaf0>
    8ac0:	f05f 0300 	movs.w	r3, #0
    8ac4:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    8ac8:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8acc:	f004 fdef 	bl	d6ae <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8ad0:	68a0      	ldr	r0, [r4, #8]
    8ad2:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
    8ad6:	2100      	movs	r1, #0
    8ad8:	2014      	movs	r0, #20
    8ada:	f000 f859 	bl	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    8ade:	68a1      	ldr	r1, [r4, #8]
    8ae0:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8ae4:	8bc2      	ldrh	r2, [r0, #30]
    8ae6:	f821 2fee 	strh.w	r2, [r1, #238]!
    8aea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8aec:	8048      	strh	r0, [r1, #2]
    8aee:	e04a      	b.n	8b86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb86>
    8af0:	2301      	movs	r3, #1
    8af2:	e7e7      	b.n	8ac4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac4>
    8af4:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
    8af8:	f88d 1000 	strb.w	r1, [sp]
    8afc:	9900      	ldr	r1, [sp, #0]
    8afe:	9100      	str	r1, [sp, #0]
    8b00:	f89d 1000 	ldrb.w	r1, [sp]
    8b04:	bb31      	cbnz	r1, 8b54 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb54>
    8b06:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8b0a:	2301      	movs	r3, #1
    8b0c:	210b      	movs	r1, #11
    8b0e:	3070      	adds	r0, #112	; 0x70
    8b10:	f004 f9a1 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b14:	b9f0      	cbnz	r0, 8b54 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb54>
    8b16:	68a0      	ldr	r0, [r4, #8]
    8b18:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    8b1c:	f005 fd4b 	bl	e5b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8b20:	4605      	mov	r5, r0
    8b22:	68a0      	ldr	r0, [r4, #8]
    8b24:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    8b28:	f005 fd45 	bl	e5b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8b2c:	4606      	mov	r6, r0
    8b2e:	68a0      	ldr	r0, [r4, #8]
    8b30:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8b34:	4628      	mov	r0, r5
    8b36:	f005 fd49 	bl	e5cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8b3a:	e000      	b.n	8b3e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb3e>
    8b3c:	e01e      	b.n	8b7c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb7c>
    8b3e:	b150      	cbz	r0, 8b56 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb56>
    8b40:	68a0      	ldr	r0, [r4, #8]
    8b42:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
    8b46:	4630      	mov	r0, r6
    8b48:	f005 fd40 	bl	e5cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8b4c:	b118      	cbz	r0, 8b56 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb56>
    8b4e:	2000      	movs	r0, #0
    8b50:	f000 f91c 	bl	8d8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8c>
    8b54:	e011      	b.n	8b7a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb7a>
    8b56:	68a0      	ldr	r0, [r4, #8]
    8b58:	2301      	movs	r3, #1
    8b5a:	2103      	movs	r1, #3
    8b5c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8b60:	3070      	adds	r0, #112	; 0x70
    8b62:	f004 f978 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b66:	b940      	cbnz	r0, 8b7a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb7a>
    8b68:	68a0      	ldr	r0, [r4, #8]
    8b6a:	2301      	movs	r3, #1
    8b6c:	2102      	movs	r1, #2
    8b6e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8b72:	3070      	adds	r0, #112	; 0x70
    8b74:	f004 f96f 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b78:	b108      	cbz	r0, 8b7e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb7e>
    8b7a:	2000      	movs	r0, #0
    8b7c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8b7e:	2100      	movs	r1, #0
    8b80:	2016      	movs	r0, #22
    8b82:	f000 f805 	bl	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    8b86:	2001      	movs	r0, #1
    8b88:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8b8a:	0000      	.short	0x0000
    8b8c:	20000130 	.word	0x20000130
    8b90:	b570      	push	{r4, r5, r6, lr}
    8b92:	4c0d      	ldr	r4, [pc, #52]	; (8bc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc8>)
    8b94:	4606      	mov	r6, r0
    8b96:	460d      	mov	r5, r1
    8b98:	68a0      	ldr	r0, [r4, #8]
    8b9a:	3070      	adds	r0, #112	; 0x70
    8b9c:	f005 fd03 	bl	e5a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ba0:	b120      	cbz	r0, 8bac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbac>
    8ba2:	f640 2114 	movw	r1, #2580	; 0xa14
    8ba6:	2031      	movs	r0, #49	; 0x31
    8ba8:	f7fb f89a 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bac:	68a2      	ldr	r2, [r4, #8]
    8bae:	2000      	movs	r0, #0
    8bb0:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
    8bb4:	b115      	cbz	r5, 8bbc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbbc>
    8bb6:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
    8bba:	bd70      	pop	{r4, r5, r6, pc}
    8bbc:	f822 0faa 	strh.w	r0, [r2, #170]!
    8bc0:	2001      	movs	r0, #1
    8bc2:	7110      	strb	r0, [r2, #4]
    8bc4:	bd70      	pop	{r4, r5, r6, pc}
    8bc6:	0000      	.short	0x0000
    8bc8:	20000130 	.word	0x20000130
    8bcc:	b570      	push	{r4, r5, r6, lr}
    8bce:	4d1a      	ldr	r5, [pc, #104]	; (8c38 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc38>)
    8bd0:	2600      	movs	r6, #0
    8bd2:	68ac      	ldr	r4, [r5, #8]
    8bd4:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    8bd8:	2801      	cmp	r0, #1
    8bda:	d00a      	beq.n	8bf2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbf2>
    8bdc:	2802      	cmp	r0, #2
    8bde:	d129      	bne.n	8c34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc34>
    8be0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    8be4:	2106      	movs	r1, #6
    8be6:	b1a0      	cbz	r0, 8c12 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc12>
    8be8:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    8bec:	2101      	movs	r1, #1
    8bee:	2002      	movs	r0, #2
    8bf0:	e01b      	b.n	8c2a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc2a>
    8bf2:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8bf6:	2800      	cmp	r0, #0
    8bf8:	d11c      	bne.n	8c34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc34>
    8bfa:	2200      	movs	r2, #0
    8bfc:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    8c00:	f504 7188 	add.w	r1, r4, #272	; 0x110
    8c04:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    8c08:	f004 f8dd 	bl	cdc6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8c0c:	2101      	movs	r1, #1
    8c0e:	2005      	movs	r0, #5
    8c10:	e00b      	b.n	8c2a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc2a>
    8c12:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    8c16:	0740      	lsls	r0, r0, #29
    8c18:	d505      	bpl.n	8c26 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc26>
    8c1a:	2011      	movs	r0, #17
    8c1c:	2203      	movs	r2, #3
    8c1e:	f804 2fee 	strb.w	r2, [r4, #238]!
    8c22:	7061      	strb	r1, [r4, #1]
    8c24:	e000      	b.n	8c28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc28>
    8c26:	200d      	movs	r0, #13
    8c28:	2101      	movs	r1, #1
    8c2a:	f7ff ffb1 	bl	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    8c2e:	68a8      	ldr	r0, [r5, #8]
    8c30:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
    8c34:	bd70      	pop	{r4, r5, r6, pc}
    8c36:	0000      	.short	0x0000
    8c38:	20000130 	.word	0x20000130
    8c3c:	b570      	push	{r4, r5, r6, lr}
    8c3e:	4a2b      	ldr	r2, [pc, #172]	; (8cec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcec>)
    8c40:	4603      	mov	r3, r0
    8c42:	8850      	ldrh	r0, [r2, #2]
    8c44:	4318      	orrs	r0, r3
    8c46:	8050      	strh	r0, [r2, #2]
    8c48:	4610      	mov	r0, r2
    8c4a:	2b40      	cmp	r3, #64	; 0x40
    8c4c:	6880      	ldr	r0, [r0, #8]
    8c4e:	d00d      	beq.n	8c6c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc6c>
    8c50:	079e      	lsls	r6, r3, #30
    8c52:	f04f 0500 	mov.w	r5, #0
    8c56:	f04f 0401 	mov.w	r4, #1
    8c5a:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8c5e:	d50c      	bpl.n	8c7a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc7a>
    8c60:	b14e      	cbz	r6, 8c76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc76>
    8c62:	f640 5114 	movw	r1, #3348	; 0xd14
    8c66:	2031      	movs	r0, #49	; 0x31
    8c68:	f7fb f83a 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c70:	2104      	movs	r1, #4
    8c72:	f7fe bb9f 	b.w	73b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8c76:	60d1      	str	r1, [r2, #12]
    8c78:	e01c      	b.n	8cb4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcb4>
    8c7a:	b1c6      	cbz	r6, 8cae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcae>
    8c7c:	6111      	str	r1, [r2, #16]
    8c7e:	78c9      	ldrb	r1, [r1, #3]
    8c80:	2906      	cmp	r1, #6
    8c82:	d002      	beq.n	8c8a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8a>
    8c84:	290b      	cmp	r1, #11
    8c86:	d112      	bne.n	8cae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcae>
    8c88:	e009      	b.n	8c9e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc9e>
    8c8a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8c8e:	2917      	cmp	r1, #23
    8c90:	d10d      	bne.n	8cae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcae>
    8c92:	2100      	movs	r1, #0
    8c94:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
    8c98:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    8c9c:	e007      	b.n	8cae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcae>
    8c9e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8ca2:	2911      	cmp	r1, #17
    8ca4:	d103      	bne.n	8cae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcae>
    8ca6:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    8caa:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    8cae:	0799      	lsls	r1, r3, #30
    8cb0:	d516      	bpl.n	8ce0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce0>
    8cb2:	68d1      	ldr	r1, [r2, #12]
    8cb4:	78c9      	ldrb	r1, [r1, #3]
    8cb6:	2905      	cmp	r1, #5
    8cb8:	d002      	beq.n	8cc0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc0>
    8cba:	290b      	cmp	r1, #11
    8cbc:	d110      	bne.n	8ce0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce0>
    8cbe:	e009      	b.n	8cd4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcd4>
    8cc0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8cc4:	2915      	cmp	r1, #21
    8cc6:	d10b      	bne.n	8ce0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce0>
    8cc8:	2100      	movs	r1, #0
    8cca:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
    8cce:	f800 4c45 	strb.w	r4, [r0, #-69]
    8cd2:	e005      	b.n	8ce0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce0>
    8cd4:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8cd8:	2910      	cmp	r1, #16
    8cda:	d101      	bne.n	8ce0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce0>
    8cdc:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    8ce0:	0698      	lsls	r0, r3, #26
    8ce2:	d501      	bpl.n	8ce8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce8>
    8ce4:	2008      	movs	r0, #8
    8ce6:	7050      	strb	r0, [r2, #1]
    8ce8:	bd70      	pop	{r4, r5, r6, pc}
    8cea:	0000      	.short	0x0000
    8cec:	20000130 	.word	0x20000130
    8cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cf4:	4c24      	ldr	r4, [pc, #144]	; (8d88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd88>)
    8cf6:	2501      	movs	r5, #1
    8cf8:	68a2      	ldr	r2, [r4, #8]
    8cfa:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
    8cfe:	b108      	cbz	r0, 8d04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd04>
    8d00:	2701      	movs	r7, #1
    8d02:	e000      	b.n	8d06 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd06>
    8d04:	2700      	movs	r7, #0
    8d06:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
    8d0a:	b109      	cbz	r1, 8d10 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd10>
    8d0c:	2601      	movs	r6, #1
    8d0e:	e000      	b.n	8d12 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd12>
    8d10:	2600      	movs	r6, #0
    8d12:	b90f      	cbnz	r7, 8d18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd18>
    8d14:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    8d18:	b90e      	cbnz	r6, 8d1e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd1e>
    8d1a:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    8d1e:	f102 0362 	add.w	r3, r2, #98	; 0x62
    8d22:	7218      	strb	r0, [r3, #8]
    8d24:	7259      	strb	r1, [r3, #9]
    8d26:	2001      	movs	r0, #1
    8d28:	7298      	strb	r0, [r3, #10]
    8d2a:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
    8d2e:	2801      	cmp	r0, #1
    8d30:	d001      	beq.n	8d36 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd36>
    8d32:	b907      	cbnz	r7, 8d36 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd36>
    8d34:	b116      	cbz	r6, 8d3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd3c>
    8d36:	2000      	movs	r0, #0
    8d38:	f000 f828 	bl	8d8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8c>
    8d3c:	68a0      	ldr	r0, [r4, #8]
    8d3e:	302c      	adds	r0, #44	; 0x2c
    8d40:	f004 fd24 	bl	d78c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8d44:	4606      	mov	r6, r0
    8d46:	68a0      	ldr	r0, [r4, #8]
    8d48:	f004 fccc 	bl	d6e4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8d4c:	b1c0      	cbz	r0, 8d80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd80>
    8d4e:	68a0      	ldr	r0, [r4, #8]
    8d50:	302c      	adds	r0, #44	; 0x2c
    8d52:	f004 fd1b 	bl	d78c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8d56:	68a1      	ldr	r1, [r4, #8]
    8d58:	4607      	mov	r7, r0
    8d5a:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    8d5e:	8808      	ldrh	r0, [r1, #0]
    8d60:	312c      	adds	r1, #44	; 0x2c
    8d62:	f004 fc80 	bl	d666 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8d66:	42be      	cmp	r6, r7
    8d68:	d20a      	bcs.n	8d80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd80>
    8d6a:	f7f8 fba7 	bl	14bc <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    8d6e:	4601      	mov	r1, r0
    8d70:	1bb8      	subs	r0, r7, r6
    8d72:	2865      	cmp	r0, #101	; 0x65
    8d74:	d200      	bcs.n	8d78 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd78>
    8d76:	2065      	movs	r0, #101	; 0x65
    8d78:	f7f8 fade 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    8d7c:	b100      	cbz	r0, 8d80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd80>
    8d7e:	2500      	movs	r5, #0
    8d80:	4628      	mov	r0, r5
    8d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d86:	0000      	.short	0x0000
    8d88:	20000130 	.word	0x20000130
    8d8c:	b510      	push	{r4, lr}
    8d8e:	4c10      	ldr	r4, [pc, #64]	; (8dd0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdd0>)
    8d90:	68a1      	ldr	r1, [r4, #8]
    8d92:	880a      	ldrh	r2, [r1, #0]
    8d94:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
    8d98:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    8d9c:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    8da0:	f005 fc09 	bl	e5b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8da4:	68a1      	ldr	r1, [r4, #8]
    8da6:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
    8daa:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    8dae:	f005 fc02 	bl	e5b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8db2:	68a2      	ldr	r2, [r4, #8]
    8db4:	f202 2102 	addw	r1, r2, #514	; 0x202
    8db8:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    8dbc:	2001      	movs	r0, #1
    8dbe:	7008      	strb	r0, [r1, #0]
    8dc0:	2000      	movs	r0, #0
    8dc2:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
    8dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8dca:	f7fd b915 	b.w	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8dce:	0000      	.short	0x0000
    8dd0:	20000130 	.word	0x20000130
    8dd4:	b510      	push	{r4, lr}
    8dd6:	4c15      	ldr	r4, [pc, #84]	; (8e2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe2c>)
    8dd8:	2301      	movs	r3, #1
    8dda:	2100      	movs	r1, #0
    8ddc:	68a0      	ldr	r0, [r4, #8]
    8dde:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8de2:	3070      	adds	r0, #112	; 0x70
    8de4:	f004 f837 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8de8:	b190      	cbz	r0, 8e10 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe10>
    8dea:	6920      	ldr	r0, [r4, #16]
    8dec:	f004 fa7a 	bl	d2e4 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    8df0:	68a1      	ldr	r1, [r4, #8]
    8df2:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    8df6:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8dfa:	f005 fbf5 	bl	e5e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8dfe:	b148      	cbz	r0, 8e14 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe14>
    8e00:	68a0      	ldr	r0, [r4, #8]
    8e02:	2128      	movs	r1, #40	; 0x28
    8e04:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8e08:	3076      	adds	r0, #118	; 0x76
    8e0a:	2101      	movs	r1, #1
    8e0c:	7781      	strb	r1, [r0, #30]
    8e0e:	e00b      	b.n	8e28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe28>
    8e10:	2001      	movs	r0, #1
    8e12:	bd10      	pop	{r4, pc}
    8e14:	68a1      	ldr	r1, [r4, #8]
    8e16:	6920      	ldr	r0, [r4, #16]
    8e18:	f501 71cb 	add.w	r1, r1, #406	; 0x196
    8e1c:	f004 fa5d 	bl	d2da <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    8e20:	68a1      	ldr	r1, [r4, #8]
    8e22:	200b      	movs	r0, #11
    8e24:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8e28:	2000      	movs	r0, #0
    8e2a:	bd10      	pop	{r4, pc}
    8e2c:	20000130 	.word	0x20000130
    8e30:	b570      	push	{r4, r5, r6, lr}
    8e32:	4c29      	ldr	r4, [pc, #164]	; (8ed8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xed8>)
    8e34:	2301      	movs	r3, #1
    8e36:	2100      	movs	r1, #0
    8e38:	68a0      	ldr	r0, [r4, #8]
    8e3a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8e3e:	3070      	adds	r0, #112	; 0x70
    8e40:	f004 f809 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e44:	b1b8      	cbz	r0, 8e76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe76>
    8e46:	2100      	movs	r1, #0
    8e48:	6920      	ldr	r0, [r4, #16]
    8e4a:	f004 fa1e 	bl	d28a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    8e4e:	b1a0      	cbz	r0, 8e7a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe7a>
    8e50:	6920      	ldr	r0, [r4, #16]
    8e52:	68a1      	ldr	r1, [r4, #8]
    8e54:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    8e58:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    8e5c:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8e60:	f005 fbc2 	bl	e5e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8e64:	b168      	cbz	r0, 8e82 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe82>
    8e66:	68a0      	ldr	r0, [r4, #8]
    8e68:	2128      	movs	r1, #40	; 0x28
    8e6a:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8e6e:	3076      	adds	r0, #118	; 0x76
    8e70:	2101      	movs	r1, #1
    8e72:	7781      	strb	r1, [r0, #30]
    8e74:	e02e      	b.n	8ed4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xed4>
    8e76:	2001      	movs	r0, #1
    8e78:	bd70      	pop	{r4, r5, r6, pc}
    8e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e7e:	f000 b8ad 	b.w	8fdc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfdc>
    8e82:	6920      	ldr	r0, [r4, #16]
    8e84:	f004 fa31 	bl	d2ea <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    8e88:	f003 ffc8 	bl	ce1c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8e8c:	4605      	mov	r5, r0
    8e8e:	68a0      	ldr	r0, [r4, #8]
    8e90:	4629      	mov	r1, r5
    8e92:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    8e96:	6920      	ldr	r0, [r4, #16]
    8e98:	7900      	ldrb	r0, [r0, #4]
    8e9a:	f004 f94a 	bl	d132 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8e9e:	68a1      	ldr	r1, [r4, #8]
    8ea0:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
    8ea4:	6920      	ldr	r0, [r4, #16]
    8ea6:	4629      	mov	r1, r5
    8ea8:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    8eac:	f004 f93d 	bl	d12a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8eb0:	68a1      	ldr	r1, [r4, #8]
    8eb2:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
    8eb6:	6920      	ldr	r0, [r4, #16]
    8eb8:	f004 fa1a 	bl	d2f0 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    8ebc:	68a1      	ldr	r1, [r4, #8]
    8ebe:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    8ec2:	6920      	ldr	r0, [r4, #16]
    8ec4:	f004 fa17 	bl	d2f6 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    8ec8:	68a1      	ldr	r1, [r4, #8]
    8eca:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
    8ece:	200d      	movs	r0, #13
    8ed0:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8ed4:	2000      	movs	r0, #0
    8ed6:	bd70      	pop	{r4, r5, r6, pc}
    8ed8:	20000130 	.word	0x20000130
    8edc:	b538      	push	{r3, r4, r5, lr}
    8ede:	4c29      	ldr	r4, [pc, #164]	; (8f84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf84>)
    8ee0:	2301      	movs	r3, #1
    8ee2:	2100      	movs	r1, #0
    8ee4:	68a0      	ldr	r0, [r4, #8]
    8ee6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8eea:	3070      	adds	r0, #112	; 0x70
    8eec:	f003 ffb3 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ef0:	b970      	cbnz	r0, 8f10 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf10>
    8ef2:	68a0      	ldr	r0, [r4, #8]
    8ef4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8ef8:	2a12      	cmp	r2, #18
    8efa:	d009      	beq.n	8f10 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf10>
    8efc:	2301      	movs	r3, #1
    8efe:	2105      	movs	r1, #5
    8f00:	3070      	adds	r0, #112	; 0x70
    8f02:	f003 ffa8 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f06:	b108      	cbz	r0, 8f0c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0c>
    8f08:	2008      	movs	r0, #8
    8f0a:	bd38      	pop	{r3, r4, r5, pc}
    8f0c:	2001      	movs	r0, #1
    8f0e:	bd38      	pop	{r3, r4, r5, pc}
    8f10:	68a0      	ldr	r0, [r4, #8]
    8f12:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8f16:	b908      	cbnz	r0, 8f1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf1c>
    8f18:	f7ff f8ca 	bl	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    8f1c:	68a1      	ldr	r1, [r4, #8]
    8f1e:	6920      	ldr	r0, [r4, #16]
    8f20:	f501 7188 	add.w	r1, r1, #272	; 0x110
    8f24:	f004 f9f6 	bl	d314 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    8f28:	68a1      	ldr	r1, [r4, #8]
    8f2a:	6920      	ldr	r0, [r4, #16]
    8f2c:	31e0      	adds	r1, #224	; 0xe0
    8f2e:	f004 f9e8 	bl	d302 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    8f32:	68a1      	ldr	r1, [r4, #8]
    8f34:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
    8f38:	f88d 0000 	strb.w	r0, [sp]
    8f3c:	9800      	ldr	r0, [sp, #0]
    8f3e:	9000      	str	r0, [sp, #0]
    8f40:	f89d 0000 	ldrb.w	r0, [sp]
    8f44:	b120      	cbz	r0, 8f50 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf50>
    8f46:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    8f4a:	2031      	movs	r0, #49	; 0x31
    8f4c:	f7fa fec8 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f50:	8808      	ldrh	r0, [r1, #0]
    8f52:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
    8f56:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    8f5a:	6920      	ldr	r0, [r4, #16]
    8f5c:	f004 f9d5 	bl	d30a <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    8f60:	68a1      	ldr	r1, [r4, #8]
    8f62:	6920      	ldr	r0, [r4, #16]
    8f64:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
    8f68:	f004 f9c8 	bl	d2fc <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    8f6c:	68a0      	ldr	r0, [r4, #8]
    8f6e:	4601      	mov	r1, r0
    8f70:	2201      	movs	r2, #1
    8f72:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
    8f76:	2014      	movs	r0, #20
    8f78:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8f7c:	f7fd f83c 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8f80:	2000      	movs	r0, #0
    8f82:	bd38      	pop	{r3, r4, r5, pc}
    8f84:	20000130 	.word	0x20000130
    8f88:	b51c      	push	{r2, r3, r4, lr}
    8f8a:	4c13      	ldr	r4, [pc, #76]	; (8fd8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfd8>)
    8f8c:	68a0      	ldr	r0, [r4, #8]
    8f8e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    8f92:	07c0      	lsls	r0, r0, #31
    8f94:	d001      	beq.n	8f9a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf9a>
    8f96:	2001      	movs	r0, #1
    8f98:	bd1c      	pop	{r2, r3, r4, pc}
    8f9a:	4669      	mov	r1, sp
    8f9c:	6920      	ldr	r0, [r4, #16]
    8f9e:	f004 f9bf 	bl	d320 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    8fa2:	f001 f9d5 	bl	a350 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8fa6:	f644 112f 	movw	r1, #18735	; 0x492f
    8faa:	4008      	ands	r0, r1
    8fac:	f89d 2000 	ldrb.w	r2, [sp]
    8fb0:	68a1      	ldr	r1, [r4, #8]
    8fb2:	4002      	ands	r2, r0
    8fb4:	f801 2fbc 	strb.w	r2, [r1, #188]!
    8fb8:	f89d 2001 	ldrb.w	r2, [sp, #1]
    8fbc:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    8fc0:	7048      	strb	r0, [r1, #1]
    8fc2:	f7ff f875 	bl	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    8fc6:	68a0      	ldr	r0, [r4, #8]
    8fc8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    8fcc:	f041 0101 	orr.w	r1, r1, #1
    8fd0:	7001      	strb	r1, [r0, #0]
    8fd2:	2000      	movs	r0, #0
    8fd4:	bd1c      	pop	{r2, r3, r4, pc}
    8fd6:	0000      	.short	0x0000
    8fd8:	20000130 	.word	0x20000130
    8fdc:	4a0a      	ldr	r2, [pc, #40]	; (9008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1008>)
    8fde:	b510      	push	{r4, lr}
    8fe0:	6890      	ldr	r0, [r2, #8]
    8fe2:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8fe6:	070b      	lsls	r3, r1, #28
    8fe8:	d501      	bpl.n	8fee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfee>
    8fea:	2001      	movs	r0, #1
    8fec:	bd10      	pop	{r4, pc}
    8fee:	f041 0108 	orr.w	r1, r1, #8
    8ff2:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    8ff6:	6911      	ldr	r1, [r2, #16]
    8ff8:	78c9      	ldrb	r1, [r1, #3]
    8ffa:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
    8ffe:	f7ff f857 	bl	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    9002:	2000      	movs	r0, #0
    9004:	bd10      	pop	{r4, pc}
    9006:	0000      	.short	0x0000
    9008:	20000130 	.word	0x20000130
    900c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9010:	4c34      	ldr	r4, [pc, #208]	; (90e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10e4>)
    9012:	68a0      	ldr	r0, [r4, #8]
    9014:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9018:	f010 0f30 	tst.w	r0, #48	; 0x30
    901c:	d002      	beq.n	9024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1024>
    901e:	2001      	movs	r0, #1
    9020:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9024:	6920      	ldr	r0, [r4, #16]
    9026:	f004 f996 	bl	d356 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    902a:	b318      	cbz	r0, 9074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1074>
    902c:	6920      	ldr	r0, [r4, #16]
    902e:	f004 f984 	bl	d33a <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9032:	4607      	mov	r7, r0
    9034:	6920      	ldr	r0, [r4, #16]
    9036:	f004 f984 	bl	d342 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    903a:	4606      	mov	r6, r0
    903c:	6920      	ldr	r0, [r4, #16]
    903e:	f004 f97a 	bl	d336 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9042:	4605      	mov	r5, r0
    9044:	6920      	ldr	r0, [r4, #16]
    9046:	f004 f97a 	bl	d33e <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    904a:	4601      	mov	r1, r0
    904c:	9700      	str	r7, [sp, #0]
    904e:	68a0      	ldr	r0, [r4, #8]
    9050:	4633      	mov	r3, r6
    9052:	462a      	mov	r2, r5
    9054:	302c      	adds	r0, #44	; 0x2c
    9056:	f004 fbd3 	bl	d800 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    905a:	78a0      	ldrb	r0, [r4, #2]
    905c:	0780      	lsls	r0, r0, #30
    905e:	d503      	bpl.n	9068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1068>
    9060:	68e0      	ldr	r0, [r4, #12]
    9062:	78c0      	ldrb	r0, [r0, #3]
    9064:	2814      	cmp	r0, #20
    9066:	d009      	beq.n	907c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x107c>
    9068:	68a0      	ldr	r0, [r4, #8]
    906a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    906e:	281c      	cmp	r0, #28
    9070:	d004      	beq.n	907c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x107c>
    9072:	e007      	b.n	9084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1084>
    9074:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9078:	f7ff bfb0 	b.w	8fdc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfdc>
    907c:	68a1      	ldr	r1, [r4, #8]
    907e:	2001      	movs	r0, #1
    9080:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9084:	68a1      	ldr	r1, [r4, #8]
    9086:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    908a:	2801      	cmp	r0, #1
    908c:	d011      	beq.n	90b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10b2>
    908e:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
    9092:	f88d 0004 	strb.w	r0, [sp, #4]
    9096:	9801      	ldr	r0, [sp, #4]
    9098:	9001      	str	r0, [sp, #4]
    909a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    909e:	b940      	cbnz	r0, 90b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10b2>
    90a0:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
    90a4:	f88d 0000 	strb.w	r0, [sp]
    90a8:	9800      	ldr	r0, [sp, #0]
    90aa:	9000      	str	r0, [sp, #0]
    90ac:	f89d 0000 	ldrb.w	r0, [sp]
    90b0:	b128      	cbz	r0, 90be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10be>
    90b2:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    90b6:	f040 0010 	orr.w	r0, r0, #16
    90ba:	7008      	strb	r0, [r1, #0]
    90bc:	e00d      	b.n	90da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10da>
    90be:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    90c2:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
    90c6:	f040 0020 	orr.w	r0, r0, #32
    90ca:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    90ce:	f831 0b2c 	ldrh.w	r0, [r1], #44
    90d2:	f004 fb9c 	bl	d80e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    90d6:	f7fc ff8f 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    90da:	f7fe ffe9 	bl	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    90de:	2000      	movs	r0, #0
    90e0:	e79e      	b.n	9020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1020>
    90e2:	0000      	.short	0x0000
    90e4:	20000130 	.word	0x20000130
    90e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90ea:	4c1a      	ldr	r4, [pc, #104]	; (9154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1154>)
    90ec:	2301      	movs	r3, #1
    90ee:	210a      	movs	r1, #10
    90f0:	68a0      	ldr	r0, [r4, #8]
    90f2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    90f6:	3070      	adds	r0, #112	; 0x70
    90f8:	f003 fead 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90fc:	b338      	cbz	r0, 914e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114e>
    90fe:	6920      	ldr	r0, [r4, #16]
    9100:	f004 f929 	bl	d356 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9104:	b1c8      	cbz	r0, 913a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x113a>
    9106:	6920      	ldr	r0, [r4, #16]
    9108:	f004 f917 	bl	d33a <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    910c:	4607      	mov	r7, r0
    910e:	6920      	ldr	r0, [r4, #16]
    9110:	f004 f917 	bl	d342 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9114:	4606      	mov	r6, r0
    9116:	6920      	ldr	r0, [r4, #16]
    9118:	f004 f90d 	bl	d336 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    911c:	4605      	mov	r5, r0
    911e:	6920      	ldr	r0, [r4, #16]
    9120:	f004 f90d 	bl	d33e <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9124:	4601      	mov	r1, r0
    9126:	9700      	str	r7, [sp, #0]
    9128:	68a0      	ldr	r0, [r4, #8]
    912a:	4633      	mov	r3, r6
    912c:	462a      	mov	r2, r5
    912e:	302c      	adds	r0, #44	; 0x2c
    9130:	f004 fb66 	bl	d800 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9134:	68a0      	ldr	r0, [r4, #8]
    9136:	f004 fad5 	bl	d6e4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    913a:	68a1      	ldr	r1, [r4, #8]
    913c:	2000      	movs	r0, #0
    913e:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    9142:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9146:	f7ff f977 	bl	8438 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x438>
    914a:	2000      	movs	r0, #0
    914c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    914e:	2001      	movs	r0, #1
    9150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9152:	0000      	.short	0x0000
    9154:	20000130 	.word	0x20000130
    9158:	b510      	push	{r4, lr}
    915a:	4c09      	ldr	r4, [pc, #36]	; (9180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1180>)
    915c:	68a0      	ldr	r0, [r4, #8]
    915e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9162:	0740      	lsls	r0, r0, #29
    9164:	d501      	bpl.n	916a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116a>
    9166:	2001      	movs	r0, #1
    9168:	bd10      	pop	{r4, pc}
    916a:	f7fe ffa1 	bl	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    916e:	68a0      	ldr	r0, [r4, #8]
    9170:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9174:	f041 0104 	orr.w	r1, r1, #4
    9178:	7001      	strb	r1, [r0, #0]
    917a:	2000      	movs	r0, #0
    917c:	bd10      	pop	{r4, pc}
    917e:	0000      	.short	0x0000
    9180:	20000130 	.word	0x20000130
    9184:	b510      	push	{r4, lr}
    9186:	4c09      	ldr	r4, [pc, #36]	; (91ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11ac>)
    9188:	2301      	movs	r3, #1
    918a:	2109      	movs	r1, #9
    918c:	68a0      	ldr	r0, [r4, #8]
    918e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9192:	3070      	adds	r0, #112	; 0x70
    9194:	f003 fe5f 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9198:	2800      	cmp	r0, #0
    919a:	d006      	beq.n	91aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11aa>
    919c:	68a1      	ldr	r1, [r4, #8]
    919e:	2000      	movs	r0, #0
    91a0:	f801 0fa2 	strb.w	r0, [r1, #162]!
    91a4:	7308      	strb	r0, [r1, #12]
    91a6:	f801 0c25 	strb.w	r0, [r1, #-37]
    91aa:	bd10      	pop	{r4, pc}
    91ac:	20000130 	.word	0x20000130
    91b0:	b510      	push	{r4, lr}
    91b2:	4c0f      	ldr	r4, [pc, #60]	; (91f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11f0>)
    91b4:	2301      	movs	r3, #1
    91b6:	2100      	movs	r1, #0
    91b8:	68a0      	ldr	r0, [r4, #8]
    91ba:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    91be:	3070      	adds	r0, #112	; 0x70
    91c0:	f003 fe49 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91c4:	b138      	cbz	r0, 91d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11d6>
    91c6:	f7fe ff73 	bl	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    91ca:	68a1      	ldr	r1, [r4, #8]
    91cc:	2010      	movs	r0, #16
    91ce:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    91d2:	2000      	movs	r0, #0
    91d4:	bd10      	pop	{r4, pc}
    91d6:	68a0      	ldr	r0, [r4, #8]
    91d8:	2301      	movs	r3, #1
    91da:	2105      	movs	r1, #5
    91dc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    91e0:	3070      	adds	r0, #112	; 0x70
    91e2:	f003 fe38 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91e6:	b108      	cbz	r0, 91ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11ec>
    91e8:	2008      	movs	r0, #8
    91ea:	bd10      	pop	{r4, pc}
    91ec:	2001      	movs	r0, #1
    91ee:	bd10      	pop	{r4, pc}
    91f0:	20000130 	.word	0x20000130
    91f4:	4806      	ldr	r0, [pc, #24]	; (9210 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1210>)
    91f6:	6880      	ldr	r0, [r0, #8]
    91f8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    91fc:	2911      	cmp	r1, #17
    91fe:	d001      	beq.n	9204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1204>
    9200:	2002      	movs	r0, #2
    9202:	4770      	bx	lr
    9204:	2112      	movs	r1, #18
    9206:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    920a:	2000      	movs	r0, #0
    920c:	4770      	bx	lr
    920e:	0000      	.short	0x0000
    9210:	20000130 	.word	0x20000130
    9214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9216:	4c34      	ldr	r4, [pc, #208]	; (92e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12e8>)
    9218:	2301      	movs	r3, #1
    921a:	210b      	movs	r1, #11
    921c:	68a0      	ldr	r0, [r4, #8]
    921e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9222:	3070      	adds	r0, #112	; 0x70
    9224:	f003 fe17 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9228:	bb78      	cbnz	r0, 928a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128a>
    922a:	68a0      	ldr	r0, [r4, #8]
    922c:	2301      	movs	r3, #1
    922e:	2100      	movs	r1, #0
    9230:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9234:	3070      	adds	r0, #112	; 0x70
    9236:	f003 fe0e 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    923a:	b320      	cbz	r0, 9286 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1286>
    923c:	68a0      	ldr	r0, [r4, #8]
    923e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9242:	2824      	cmp	r0, #36	; 0x24
    9244:	d022      	beq.n	928c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128c>
    9246:	6920      	ldr	r0, [r4, #16]
    9248:	f004 f8a1 	bl	d38e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    924c:	b300      	cbz	r0, 9290 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1290>
    924e:	68a0      	ldr	r0, [r4, #8]
    9250:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9254:	f041 0104 	orr.w	r1, r1, #4
    9258:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    925c:	6921      	ldr	r1, [r4, #16]
    925e:	794a      	ldrb	r2, [r1, #5]
    9260:	f002 0207 	and.w	r2, r2, #7
    9264:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    9268:	7909      	ldrb	r1, [r1, #4]
    926a:	f001 0107 	and.w	r1, r1, #7
    926e:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    9272:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
    9276:	f88d 3000 	strb.w	r3, [sp]
    927a:	9b00      	ldr	r3, [sp, #0]
    927c:	9300      	str	r3, [sp, #0]
    927e:	f89d 3000 	ldrb.w	r3, [sp]
    9282:	bb43      	cbnz	r3, 92d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12d6>
    9284:	e008      	b.n	9298 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1298>
    9286:	2001      	movs	r0, #1
    9288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    928a:	e7ff      	b.n	928c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128c>
    928c:	2020      	movs	r0, #32
    928e:	e7fb      	b.n	9288 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1288>
    9290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9294:	f7ff bea2 	b.w	8fdc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfdc>
    9298:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    929c:	2b01      	cmp	r3, #1
    929e:	d01a      	beq.n	92d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12d6>
    92a0:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    92a4:	2501      	movs	r5, #1
    92a6:	785e      	ldrb	r6, [r3, #1]
    92a8:	428e      	cmp	r6, r1
    92aa:	d106      	bne.n	92ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12ba>
    92ac:	7819      	ldrb	r1, [r3, #0]
    92ae:	4291      	cmp	r1, r2
    92b0:	d103      	bne.n	92ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12ba>
    92b2:	2102      	movs	r1, #2
    92b4:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
    92b8:	e00d      	b.n	92d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12d6>
    92ba:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
    92be:	8802      	ldrh	r2, [r0, #0]
    92c0:	f821 2902 	strh.w	r2, [r1], #-2
    92c4:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    92c8:	710a      	strb	r2, [r1, #4]
    92ca:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    92ce:	7148      	strb	r0, [r1, #5]
    92d0:	700d      	strb	r5, [r1, #0]
    92d2:	f7fc fe91 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    92d6:	68a1      	ldr	r1, [r4, #8]
    92d8:	2021      	movs	r0, #33	; 0x21
    92da:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    92de:	f7fe fee7 	bl	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    92e2:	2000      	movs	r0, #0
    92e4:	e7d0      	b.n	9288 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1288>
    92e6:	0000      	.short	0x0000
    92e8:	20000130 	.word	0x20000130
    92ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    92f0:	4c4e      	ldr	r4, [pc, #312]	; (942c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x142c>)
    92f2:	68a0      	ldr	r0, [r4, #8]
    92f4:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    92f8:	2920      	cmp	r1, #32
    92fa:	d009      	beq.n	9310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1310>
    92fc:	f05f 0700 	movs.w	r7, #0
    9300:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9304:	2922      	cmp	r1, #34	; 0x22
    9306:	d005      	beq.n	9314 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1314>
    9308:	b387      	cbz	r7, 936c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x136c>
    930a:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    930e:	e003      	b.n	9318 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1318>
    9310:	2701      	movs	r7, #1
    9312:	e7f5      	b.n	9300 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1300>
    9314:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    9318:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    931c:	f041 0104 	orr.w	r1, r1, #4
    9320:	7001      	strb	r1, [r0, #0]
    9322:	6920      	ldr	r0, [r4, #16]
    9324:	f7fc fd54 	bl	5dd0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9328:	f04f 0801 	mov.w	r8, #1
    932c:	2600      	movs	r6, #0
    932e:	b308      	cbz	r0, 9374 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1374>
    9330:	4639      	mov	r1, r7
    9332:	6920      	ldr	r0, [r4, #16]
    9334:	f7fe ff86 	bl	8244 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x244>
    9338:	b1e0      	cbz	r0, 9374 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1374>
    933a:	466a      	mov	r2, sp
    933c:	6921      	ldr	r1, [r4, #16]
    933e:	68a0      	ldr	r0, [r4, #8]
    9340:	f003 fead 	bl	d09e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9344:	b388      	cbz	r0, 93aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13aa>
    9346:	6920      	ldr	r0, [r4, #16]
    9348:	f003 fffd 	bl	d346 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    934c:	68a1      	ldr	r1, [r4, #8]
    934e:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    9352:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9356:	f005 f947 	bl	e5e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    935a:	b338      	cbz	r0, 93ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13ac>
    935c:	68a0      	ldr	r0, [r4, #8]
    935e:	2128      	movs	r1, #40	; 0x28
    9360:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9364:	3076      	adds	r0, #118	; 0x76
    9366:	f880 801e 	strb.w	r8, [r0, #30]
    936a:	e053      	b.n	9414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1414>
    936c:	e7ff      	b.n	936e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x136e>
    936e:	2002      	movs	r0, #2
    9370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9374:	68a0      	ldr	r0, [r4, #8]
    9376:	f04f 0900 	mov.w	r9, #0
    937a:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    937e:	2901      	cmp	r1, #1
    9380:	d015      	beq.n	93ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13ae>
    9382:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    9386:	b1f7      	cbz	r7, 93c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c6>
    9388:	6920      	ldr	r0, [r4, #16]
    938a:	68a1      	ldr	r1, [r4, #8]
    938c:	78c0      	ldrb	r0, [r0, #3]
    938e:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
    9392:	fa08 f200 	lsl.w	r2, r8, r0
    9396:	f3c2 6000 	ubfx	r0, r2, #24, #1
    939a:	b160      	cbz	r0, 93b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13b6>
    939c:	200a      	movs	r0, #10
    939e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    93a2:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
    93a6:	b9a0      	cbnz	r0, 93d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13d2>
    93a8:	e008      	b.n	93bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13bc>
    93aa:	e014      	b.n	93d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13d6>
    93ac:	e027      	b.n	93fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13fe>
    93ae:	201e      	movs	r0, #30
    93b0:	f7ff fcec 	bl	8d8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8c>
    93b4:	e7e7      	b.n	9386 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1386>
    93b6:	f240 31cb 	movw	r1, #971	; 0x3cb
    93ba:	e001      	b.n	93c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c0>
    93bc:	f240 31d3 	movw	r1, #979	; 0x3d3
    93c0:	2031      	movs	r0, #49	; 0x31
    93c2:	f7fa fc8d 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    93c6:	702e      	strb	r6, [r5, #0]
    93c8:	f7fe fe7e 	bl	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    93cc:	f7ff fe06 	bl	8fdc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfdc>
    93d0:	4681      	mov	r9, r0
    93d2:	4648      	mov	r0, r9
    93d4:	e7cc      	b.n	9370 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1370>
    93d6:	68a0      	ldr	r0, [r4, #8]
    93d8:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    93dc:	2901      	cmp	r1, #1
    93de:	d009      	beq.n	93f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13f4>
    93e0:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    93e4:	68a0      	ldr	r0, [r4, #8]
    93e6:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    93ea:	428d      	cmp	r5, r1
    93ec:	d112      	bne.n	9414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1414>
    93ee:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    93f2:	e00f      	b.n	9414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1414>
    93f4:	2000      	movs	r0, #0
    93f6:	f7ff fcc9 	bl	8d8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8c>
    93fa:	702e      	strb	r6, [r5, #0]
    93fc:	e7f2      	b.n	93e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13e4>
    93fe:	68a0      	ldr	r0, [r4, #8]
    9400:	f89d 1000 	ldrb.w	r1, [sp]
    9404:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    9408:	f89d 1001 	ldrb.w	r1, [sp, #1]
    940c:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
    9410:	2024      	movs	r0, #36	; 0x24
    9412:	7028      	strb	r0, [r5, #0]
    9414:	68a0      	ldr	r0, [r4, #8]
    9416:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    941a:	428d      	cmp	r5, r1
    941c:	d102      	bne.n	9424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1424>
    941e:	f7fe fe53 	bl	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    9422:	e001      	b.n	9428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1428>
    9424:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
    9428:	2000      	movs	r0, #0
    942a:	e7a1      	b.n	9370 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1370>
    942c:	20000130 	.word	0x20000130
    9430:	b510      	push	{r4, lr}
    9432:	4c0a      	ldr	r4, [pc, #40]	; (945c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x145c>)
    9434:	68a0      	ldr	r0, [r4, #8]
    9436:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    943a:	f041 0104 	orr.w	r1, r1, #4
    943e:	7001      	strb	r1, [r0, #0]
    9440:	6920      	ldr	r0, [r4, #16]
    9442:	f003 ffae 	bl	d3a2 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9446:	2816      	cmp	r0, #22
    9448:	d001      	beq.n	944e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144e>
    944a:	2000      	movs	r0, #0
    944c:	bd10      	pop	{r4, pc}
    944e:	6920      	ldr	r0, [r4, #16]
    9450:	f003 ffa9 	bl	d3a6 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9458:	f7fe be08 	b.w	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    945c:	20000130 	.word	0x20000130
    9460:	4802      	ldr	r0, [pc, #8]	; (946c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x146c>)
    9462:	6900      	ldr	r0, [r0, #16]
    9464:	7900      	ldrb	r0, [r0, #4]
    9466:	f7fe be01 	b.w	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    946a:	0000      	.short	0x0000
    946c:	20000130 	.word	0x20000130
    9470:	b510      	push	{r4, lr}
    9472:	4c08      	ldr	r4, [pc, #32]	; (9494 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1494>)
    9474:	68a0      	ldr	r0, [r4, #8]
    9476:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    947a:	2817      	cmp	r0, #23
    947c:	d001      	beq.n	9482 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1482>
    947e:	2002      	movs	r0, #2
    9480:	bd10      	pop	{r4, pc}
    9482:	f7fe fe21 	bl	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    9486:	68a1      	ldr	r1, [r4, #8]
    9488:	201b      	movs	r0, #27
    948a:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    948e:	2000      	movs	r0, #0
    9490:	bd10      	pop	{r4, pc}
    9492:	0000      	.short	0x0000
    9494:	20000130 	.word	0x20000130
    9498:	b510      	push	{r4, lr}
    949a:	4c0b      	ldr	r4, [pc, #44]	; (94c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c8>)
    949c:	2301      	movs	r3, #1
    949e:	4619      	mov	r1, r3
    94a0:	68a0      	ldr	r0, [r4, #8]
    94a2:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    94a6:	3070      	adds	r0, #112	; 0x70
    94a8:	f003 fcd5 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94ac:	b108      	cbz	r0, 94b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14b2>
    94ae:	2000      	movs	r0, #0
    94b0:	bd10      	pop	{r4, pc}
    94b2:	6920      	ldr	r0, [r4, #16]
    94b4:	f003 ff4b 	bl	d34e <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    94b8:	68a1      	ldr	r1, [r4, #8]
    94ba:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    94be:	2007      	movs	r0, #7
    94c0:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    94c4:	e7f3      	b.n	94ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14ae>
    94c6:	0000      	.short	0x0000
    94c8:	20000130 	.word	0x20000130
    94cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94d0:	4d37      	ldr	r5, [pc, #220]	; (95b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15b0>)
    94d2:	2600      	movs	r6, #0
    94d4:	4628      	mov	r0, r5
    94d6:	68a9      	ldr	r1, [r5, #8]
    94d8:	6900      	ldr	r0, [r0, #16]
    94da:	2701      	movs	r7, #1
    94dc:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    94e0:	7900      	ldrb	r0, [r0, #4]
    94e2:	2b0e      	cmp	r3, #14
    94e4:	d101      	bne.n	94ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14ea>
    94e6:	2812      	cmp	r0, #18
    94e8:	d006      	beq.n	94f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14f8>
    94ea:	4a31      	ldr	r2, [pc, #196]	; (95b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15b0>)
    94ec:	2400      	movs	r4, #0
    94ee:	6892      	ldr	r2, [r2, #8]
    94f0:	32bc      	adds	r2, #188	; 0xbc
    94f2:	2b1c      	cmp	r3, #28
    94f4:	d004      	beq.n	9500 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1500>
    94f6:	e005      	b.n	9504 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1504>
    94f8:	f7ff fe44 	bl	9184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1184>
    94fc:	4606      	mov	r6, r0
    94fe:	e053      	b.n	95a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a8>
    9500:	2814      	cmp	r0, #20
    9502:	d002      	beq.n	950a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x150a>
    9504:	2b04      	cmp	r3, #4
    9506:	d00b      	beq.n	9520 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1520>
    9508:	e00c      	b.n	9524 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1524>
    950a:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    950e:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    9512:	2105      	movs	r1, #5
    9514:	4610      	mov	r0, r2
    9516:	f004 fff8 	bl	e50a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    951a:	f7fe ff8d 	bl	8438 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x438>
    951e:	e043      	b.n	95a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a8>
    9520:	280e      	cmp	r0, #14
    9522:	d002      	beq.n	952a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152a>
    9524:	2b20      	cmp	r3, #32
    9526:	d00f      	beq.n	9548 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1548>
    9528:	e010      	b.n	954c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154c>
    952a:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    952e:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    9532:	8808      	ldrh	r0, [r1, #0]
    9534:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
    9538:	201a      	movs	r0, #26
    953a:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
    953e:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
    9542:	f7fc fd59 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9546:	e02f      	b.n	95a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a8>
    9548:	2816      	cmp	r0, #22
    954a:	d006      	beq.n	955a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x155a>
    954c:	2b26      	cmp	r3, #38	; 0x26
    954e:	d101      	bne.n	9554 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1554>
    9550:	2816      	cmp	r0, #22
    9552:	d002      	beq.n	955a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x155a>
    9554:	2817      	cmp	r0, #23
    9556:	d014      	beq.n	9582 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1582>
    9558:	e026      	b.n	95a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a8>
    955a:	f801 4f7d 	strb.w	r4, [r1, #125]!
    955e:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    9562:	7848      	ldrb	r0, [r1, #1]
    9564:	2821      	cmp	r0, #33	; 0x21
    9566:	d01f      	beq.n	95a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a8>
    9568:	2108      	movs	r1, #8
    956a:	4610      	mov	r0, r2
    956c:	f004 ffcd 	bl	e50a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    9570:	68a8      	ldr	r0, [r5, #8]
    9572:	210b      	movs	r1, #11
    9574:	30bc      	adds	r0, #188	; 0xbc
    9576:	f004 ffc8 	bl	e50a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    957a:	201a      	movs	r0, #26
    957c:	f7ff fc06 	bl	8d8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8c>
    9580:	e012      	b.n	95a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a8>
    9582:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    9586:	2822      	cmp	r0, #34	; 0x22
    9588:	d10e      	bne.n	95a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a8>
    958a:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
    958e:	f7fe fd9b 	bl	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    9592:	68a8      	ldr	r0, [r5, #8]
    9594:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
    9598:	2801      	cmp	r0, #1
    959a:	d102      	bne.n	95a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a2>
    959c:	2000      	movs	r0, #0
    959e:	f7ff fbf5 	bl	8d8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8c>
    95a2:	68a8      	ldr	r0, [r5, #8]
    95a4:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
    95a8:	4630      	mov	r0, r6
    95aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95ae:	0000      	.short	0x0000
    95b0:	20000130 	.word	0x20000130
    95b4:	b570      	push	{r4, r5, r6, lr}
    95b6:	4c2c      	ldr	r4, [pc, #176]	; (9668 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1668>)
    95b8:	68a0      	ldr	r0, [r4, #8]
    95ba:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    95be:	0789      	lsls	r1, r1, #30
    95c0:	d507      	bpl.n	95d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15d2>
    95c2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    95c6:	2301      	movs	r3, #1
    95c8:	2108      	movs	r1, #8
    95ca:	3070      	adds	r0, #112	; 0x70
    95cc:	f003 fc43 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95d0:	b1e8      	cbz	r0, 960e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160e>
    95d2:	68a0      	ldr	r0, [r4, #8]
    95d4:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
    95d8:	0780      	lsls	r0, r0, #30
    95da:	d412      	bmi.n	9602 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1602>
    95dc:	6920      	ldr	r0, [r4, #16]
    95de:	f003 feb8 	bl	d352 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    95e2:	68a1      	ldr	r1, [r4, #8]
    95e4:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
    95e8:	6920      	ldr	r0, [r4, #16]
    95ea:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    95ee:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    95f2:	8840      	ldrh	r0, [r0, #2]
    95f4:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
    95f8:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
    95fc:	f040 0002 	orr.w	r0, r0, #2
    9600:	7008      	strb	r0, [r1, #0]
    9602:	68a0      	ldr	r0, [r4, #8]
    9604:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    9608:	07c9      	lsls	r1, r1, #31
    960a:	d002      	beq.n	9612 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1612>
    960c:	e010      	b.n	9630 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1630>
    960e:	2001      	movs	r0, #1
    9610:	bd70      	pop	{r4, r5, r6, pc}
    9612:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9616:	078a      	lsls	r2, r1, #30
    9618:	d504      	bpl.n	9624 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1624>
    961a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    961e:	2031      	movs	r0, #49	; 0x31
    9620:	f7fa fb5e 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9624:	f041 0102 	orr.w	r1, r1, #2
    9628:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    962c:	f7fe fd40 	bl	80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    9630:	68a0      	ldr	r0, [r4, #8]
    9632:	2500      	movs	r5, #0
    9634:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9638:	2906      	cmp	r1, #6
    963a:	d105      	bne.n	9648 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1648>
    963c:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    9640:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    9644:	f7fc fcd8 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9648:	68a0      	ldr	r0, [r4, #8]
    964a:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    964e:	b149      	cbz	r1, 9664 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1664>
    9650:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    9654:	f7fc fcd0 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9658:	68a0      	ldr	r0, [r4, #8]
    965a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    965e:	b909      	cbnz	r1, 9664 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1664>
    9660:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    9664:	2000      	movs	r0, #0
    9666:	bd70      	pop	{r4, r5, r6, pc}
    9668:	20000130 	.word	0x20000130
    966c:	b510      	push	{r4, lr}
    966e:	4c1f      	ldr	r4, [pc, #124]	; (96ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16ec>)
    9670:	68a3      	ldr	r3, [r4, #8]
    9672:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    9676:	2808      	cmp	r0, #8
    9678:	d20e      	bcs.n	9698 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1698>
    967a:	f100 0208 	add.w	r2, r0, #8
    967e:	f1c0 0008 	rsb	r0, r0, #8
    9682:	b2c1      	uxtb	r1, r0
    9684:	1898      	adds	r0, r3, r2
    9686:	f500 7088 	add.w	r0, r0, #272	; 0x110
    968a:	f7fa fbb5 	bl	3df8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    968e:	68a1      	ldr	r1, [r4, #8]
    9690:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    9694:	4410      	add	r0, r2
    9696:	7008      	strb	r0, [r1, #0]
    9698:	68a3      	ldr	r3, [r4, #8]
    969a:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    969e:	3808      	subs	r0, #8
    96a0:	2804      	cmp	r0, #4
    96a2:	d20c      	bcs.n	96be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16be>
    96a4:	1d02      	adds	r2, r0, #4
    96a6:	f1c0 0004 	rsb	r0, r0, #4
    96aa:	b2c1      	uxtb	r1, r0
    96ac:	1898      	adds	r0, r3, r2
    96ae:	30e0      	adds	r0, #224	; 0xe0
    96b0:	f7fa fba2 	bl	3df8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    96b4:	68a1      	ldr	r1, [r4, #8]
    96b6:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    96ba:	4410      	add	r0, r2
    96bc:	7008      	strb	r0, [r1, #0]
    96be:	68a0      	ldr	r0, [r4, #8]
    96c0:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    96c4:	290c      	cmp	r1, #12
    96c6:	d30f      	bcc.n	96e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16e8>
    96c8:	d005      	beq.n	96d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16d6>
    96ca:	f240 71bf 	movw	r1, #1983	; 0x7bf
    96ce:	f04f 0031 	mov.w	r0, #49	; 0x31
    96d2:	f7fa fb05 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96d6:	2100      	movs	r1, #0
    96d8:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    96dc:	2101      	movs	r1, #1
    96de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    96e2:	2004      	movs	r0, #4
    96e4:	f7ff ba54 	b.w	8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>
    96e8:	bd10      	pop	{r4, pc}
    96ea:	0000      	.short	0x0000
    96ec:	20000130 	.word	0x20000130
    96f0:	4804      	ldr	r0, [pc, #16]	; (9704 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1704>)
    96f2:	2127      	movs	r1, #39	; 0x27
    96f4:	6880      	ldr	r0, [r0, #8]
    96f6:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    96fa:	2100      	movs	r1, #0
    96fc:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
    9700:	4770      	bx	lr
    9702:	0000      	.short	0x0000
    9704:	20000130 	.word	0x20000130
    9708:	4809      	ldr	r0, [pc, #36]	; (9730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1730>)
    970a:	b510      	push	{r4, lr}
    970c:	6880      	ldr	r0, [r0, #8]
    970e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9712:	2914      	cmp	r1, #20
    9714:	d004      	beq.n	9720 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1720>
    9716:	f240 619a 	movw	r1, #1690	; 0x69a
    971a:	2031      	movs	r0, #49	; 0x31
    971c:	f7fa fae0 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9720:	2101      	movs	r1, #1
    9722:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    9726:	2115      	movs	r1, #21
    9728:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    972c:	bd10      	pop	{r4, pc}
    972e:	0000      	.short	0x0000
    9730:	20000130 	.word	0x20000130
    9734:	b510      	push	{r4, lr}
    9736:	4c0a      	ldr	r4, [pc, #40]	; (9760 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1760>)
    9738:	68a0      	ldr	r0, [r4, #8]
    973a:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    973e:	07c0      	lsls	r0, r0, #31
    9740:	d008      	beq.n	9754 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1754>
    9742:	f7fe fcc1 	bl	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    9746:	68a0      	ldr	r0, [r4, #8]
    9748:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    974c:	f021 0101 	bic.w	r1, r1, #1
    9750:	7001      	strb	r1, [r0, #0]
    9752:	bd10      	pop	{r4, pc}
    9754:	f240 6183 	movw	r1, #1667	; 0x683
    9758:	2031      	movs	r0, #49	; 0x31
    975a:	f7fa fac1 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    975e:	0000      	.short	0x0000
    9760:	20000130 	.word	0x20000130
    9764:	b510      	push	{r4, lr}
    9766:	4c0a      	ldr	r4, [pc, #40]	; (9790 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1790>)
    9768:	2301      	movs	r3, #1
    976a:	2100      	movs	r1, #0
    976c:	68a0      	ldr	r0, [r4, #8]
    976e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9772:	3070      	adds	r0, #112	; 0x70
    9774:	f003 fb6f 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9778:	b120      	cbz	r0, 9784 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1784>
    977a:	68a1      	ldr	r1, [r4, #8]
    977c:	201c      	movs	r0, #28
    977e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9782:	bd10      	pop	{r4, pc}
    9784:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    9788:	2031      	movs	r0, #49	; 0x31
    978a:	f7fa faa9 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    978e:	0000      	.short	0x0000
    9790:	20000130 	.word	0x20000130
    9794:	480a      	ldr	r0, [pc, #40]	; (97c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c0>)
    9796:	b510      	push	{r4, lr}
    9798:	6880      	ldr	r0, [r0, #8]
    979a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    979e:	f3c1 1201 	ubfx	r2, r1, #4, #2
    97a2:	2a01      	cmp	r2, #1
    97a4:	d004      	beq.n	97b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17b0>
    97a6:	f240 710f 	movw	r1, #1807	; 0x70f
    97aa:	2031      	movs	r0, #49	; 0x31
    97ac:	f7fa fa98 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97b0:	f021 0110 	bic.w	r1, r1, #16
    97b4:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    97b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97bc:	f7fe bc84 	b.w	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    97c0:	20000130 	.word	0x20000130
    97c4:	b510      	push	{r4, lr}
    97c6:	4c0a      	ldr	r4, [pc, #40]	; (97f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17f0>)
    97c8:	2301      	movs	r3, #1
    97ca:	2100      	movs	r1, #0
    97cc:	68a0      	ldr	r0, [r4, #8]
    97ce:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    97d2:	3070      	adds	r0, #112	; 0x70
    97d4:	f003 fb3f 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97d8:	b120      	cbz	r0, 97e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17e4>
    97da:	68a1      	ldr	r1, [r4, #8]
    97dc:	200e      	movs	r0, #14
    97de:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    97e2:	bd10      	pop	{r4, pc}
    97e4:	f240 61fb 	movw	r1, #1787	; 0x6fb
    97e8:	2031      	movs	r0, #49	; 0x31
    97ea:	f7fa fa79 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97ee:	0000      	.short	0x0000
    97f0:	20000130 	.word	0x20000130
    97f4:	4804      	ldr	r0, [pc, #16]	; (9808 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1808>)
    97f6:	6880      	ldr	r0, [r0, #8]
    97f8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    97fc:	f021 0104 	bic.w	r1, r1, #4
    9800:	7001      	strb	r1, [r0, #0]
    9802:	f7fe bc61 	b.w	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    9806:	0000      	.short	0x0000
    9808:	20000130 	.word	0x20000130
    980c:	4809      	ldr	r0, [pc, #36]	; (9834 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1834>)
    980e:	b510      	push	{r4, lr}
    9810:	6880      	ldr	r0, [r0, #8]
    9812:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9816:	2910      	cmp	r1, #16
    9818:	d004      	beq.n	9824 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1824>
    981a:	f240 6192 	movw	r1, #1682	; 0x692
    981e:	2031      	movs	r0, #49	; 0x31
    9820:	f7fa fa5e 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9824:	2101      	movs	r1, #1
    9826:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    982a:	2111      	movs	r1, #17
    982c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9830:	bd10      	pop	{r4, pc}
    9832:	0000      	.short	0x0000
    9834:	20000130 	.word	0x20000130
    9838:	b510      	push	{r4, lr}
    983a:	4c0a      	ldr	r4, [pc, #40]	; (9864 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1864>)
    983c:	2301      	movs	r3, #1
    983e:	2100      	movs	r1, #0
    9840:	68a0      	ldr	r0, [r4, #8]
    9842:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9846:	3070      	adds	r0, #112	; 0x70
    9848:	f003 fb05 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    984c:	b120      	cbz	r0, 9858 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1858>
    984e:	68a1      	ldr	r1, [r4, #8]
    9850:	201f      	movs	r0, #31
    9852:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9856:	bd10      	pop	{r4, pc}
    9858:	f240 711b 	movw	r1, #1819	; 0x71b
    985c:	2031      	movs	r0, #49	; 0x31
    985e:	f7fa fa3f 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9862:	0000      	.short	0x0000
    9864:	20000130 	.word	0x20000130
    9868:	4808      	ldr	r0, [pc, #32]	; (988c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188c>)
    986a:	b510      	push	{r4, lr}
    986c:	6880      	ldr	r0, [r0, #8]
    986e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9872:	2921      	cmp	r1, #33	; 0x21
    9874:	d005      	beq.n	9882 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1882>
    9876:	b121      	cbz	r1, 9882 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1882>
    9878:	f240 7122 	movw	r1, #1826	; 0x722
    987c:	2031      	movs	r0, #49	; 0x31
    987e:	f7fa fa2f 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9882:	2122      	movs	r1, #34	; 0x22
    9884:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9888:	bd10      	pop	{r4, pc}
    988a:	0000      	.short	0x0000
    988c:	20000130 	.word	0x20000130
    9890:	4807      	ldr	r0, [pc, #28]	; (98b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18b0>)
    9892:	b510      	push	{r4, lr}
    9894:	6880      	ldr	r0, [r0, #8]
    9896:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    989a:	2915      	cmp	r1, #21
    989c:	d004      	beq.n	98a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a8>
    989e:	f240 61a7 	movw	r1, #1703	; 0x6a7
    98a2:	2031      	movs	r0, #49	; 0x31
    98a4:	f7fa fa1c 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98a8:	2119      	movs	r1, #25
    98aa:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    98ae:	bd10      	pop	{r4, pc}
    98b0:	20000130 	.word	0x20000130
    98b4:	4807      	ldr	r0, [pc, #28]	; (98d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18d4>)
    98b6:	b510      	push	{r4, lr}
    98b8:	6880      	ldr	r0, [r0, #8]
    98ba:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    98be:	2915      	cmp	r1, #21
    98c0:	d004      	beq.n	98cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18cc>
    98c2:	f240 61a1 	movw	r1, #1697	; 0x6a1
    98c6:	2031      	movs	r0, #49	; 0x31
    98c8:	f7fa fa0a 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98cc:	2117      	movs	r1, #23
    98ce:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    98d2:	bd10      	pop	{r4, pc}
    98d4:	20000130 	.word	0x20000130
    98d8:	b570      	push	{r4, r5, r6, lr}
    98da:	4d1b      	ldr	r5, [pc, #108]	; (9948 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1948>)
    98dc:	68a8      	ldr	r0, [r5, #8]
    98de:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    98e2:	291b      	cmp	r1, #27
    98e4:	d002      	beq.n	98ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18ec>
    98e6:	f240 61c1 	movw	r1, #1729	; 0x6c1
    98ea:	e007      	b.n	98fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18fc>
    98ec:	2400      	movs	r4, #0
    98ee:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
    98f2:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    98f6:	b121      	cbz	r1, 9902 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1902>
    98f8:	f240 61c5 	movw	r1, #1733	; 0x6c5
    98fc:	2031      	movs	r0, #49	; 0x31
    98fe:	f7fa f9ef 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9902:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9906:	b141      	cbz	r1, 991a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x191a>
    9908:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    990c:	8801      	ldrh	r1, [r0, #0]
    990e:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    9912:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    9916:	210c      	movs	r1, #12
    9918:	e008      	b.n	992c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x192c>
    991a:	8801      	ldrh	r1, [r0, #0]
    991c:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    9920:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    9924:	2101      	movs	r1, #1
    9926:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
    992a:	210b      	movs	r1, #11
    992c:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    9930:	8800      	ldrh	r0, [r0, #0]
    9932:	f7fa fdef 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9936:	f002 ff03 	bl	c740 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    993a:	f7fc fb5d 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    993e:	68a8      	ldr	r0, [r5, #8]
    9940:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    9944:	bd70      	pop	{r4, r5, r6, pc}
    9946:	0000      	.short	0x0000
    9948:	20000130 	.word	0x20000130
    994c:	b510      	push	{r4, lr}
    994e:	4c08      	ldr	r4, [pc, #32]	; (9970 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1970>)
    9950:	2301      	movs	r3, #1
    9952:	4619      	mov	r1, r3
    9954:	68a0      	ldr	r0, [r4, #8]
    9956:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    995a:	3070      	adds	r0, #112	; 0x70
    995c:	f003 fa7b 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9960:	2800      	cmp	r0, #0
    9962:	d103      	bne.n	996c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196c>
    9964:	68a1      	ldr	r1, [r4, #8]
    9966:	2008      	movs	r0, #8
    9968:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    996c:	bd10      	pop	{r4, pc}
    996e:	0000      	.short	0x0000
    9970:	20000130 	.word	0x20000130
    9974:	4814      	ldr	r0, [pc, #80]	; (99c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c8>)
    9976:	b510      	push	{r4, lr}
    9978:	68c1      	ldr	r1, [r0, #12]
    997a:	6880      	ldr	r0, [r0, #8]
    997c:	7909      	ldrb	r1, [r1, #4]
    997e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9982:	2a0a      	cmp	r2, #10
    9984:	d109      	bne.n	999a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x199a>
    9986:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
    998a:	428a      	cmp	r2, r1
    998c:	d105      	bne.n	999a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x199a>
    998e:	2100      	movs	r1, #0
    9990:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9994:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    9998:	bd10      	pop	{r4, pc}
    999a:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    999e:	0713      	lsls	r3, r2, #28
    99a0:	d507      	bpl.n	99b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19b2>
    99a2:	f022 0108 	bic.w	r1, r2, #8
    99a6:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    99aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    99ae:	f7fe bb8b 	b.w	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    99b2:	29ff      	cmp	r1, #255	; 0xff
    99b4:	d004      	beq.n	99c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c0>
    99b6:	f240 617d 	movw	r1, #1661	; 0x67d
    99ba:	2031      	movs	r0, #49	; 0x31
    99bc:	f7fa f990 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    99c4:	f7ff be94 	b.w	96f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16f0>
    99c8:	20000130 	.word	0x20000130
    99cc:	b510      	push	{r4, lr}
    99ce:	4c15      	ldr	r4, [pc, #84]	; (9a24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a24>)
    99d0:	68a0      	ldr	r0, [r4, #8]
    99d2:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    99d6:	0789      	lsls	r1, r1, #30
    99d8:	d411      	bmi.n	99fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19fe>
    99da:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    99de:	2301      	movs	r3, #1
    99e0:	2100      	movs	r1, #0
    99e2:	3070      	adds	r0, #112	; 0x70
    99e4:	f003 fa37 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99e8:	b120      	cbz	r0, 99f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19f4>
    99ea:	68a1      	ldr	r1, [r4, #8]
    99ec:	2006      	movs	r0, #6
    99ee:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    99f2:	e009      	b.n	9a08 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a08>
    99f4:	f240 61e7 	movw	r1, #1767	; 0x6e7
    99f8:	2031      	movs	r0, #49	; 0x31
    99fa:	f7fa f971 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99fe:	2100      	movs	r1, #0
    9a00:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    9a04:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
    9a08:	68a0      	ldr	r0, [r4, #8]
    9a0a:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9a0e:	0780      	lsls	r0, r0, #30
    9a10:	d507      	bpl.n	9a22 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a22>
    9a12:	f7fe fb59 	bl	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    9a16:	68a0      	ldr	r0, [r4, #8]
    9a18:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9a1c:	f021 0102 	bic.w	r1, r1, #2
    9a20:	7001      	strb	r1, [r0, #0]
    9a22:	bd10      	pop	{r4, pc}
    9a24:	20000130 	.word	0x20000130
    9a28:	4808      	ldr	r0, [pc, #32]	; (9a4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4c>)
    9a2a:	b510      	push	{r4, lr}
    9a2c:	6880      	ldr	r0, [r0, #8]
    9a2e:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    9a32:	b941      	cbnz	r1, 9a46 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a46>
    9a34:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9a38:	2301      	movs	r3, #1
    9a3a:	2106      	movs	r1, #6
    9a3c:	3070      	adds	r0, #112	; 0x70
    9a3e:	f003 fa0a 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a42:	2800      	cmp	r0, #0
    9a44:	d000      	beq.n	9a48 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a48>
    9a46:	2001      	movs	r0, #1
    9a48:	bd10      	pop	{r4, pc}
    9a4a:	0000      	.short	0x0000
    9a4c:	20000130 	.word	0x20000130
    9a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a52:	4c59      	ldr	r4, [pc, #356]	; (9bb8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bb8>)
    9a54:	4606      	mov	r6, r0
    9a56:	4615      	mov	r5, r2
    9a58:	68a0      	ldr	r0, [r4, #8]
    9a5a:	b109      	cbz	r1, 9a60 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a60>
    9a5c:	2100      	movs	r1, #0
    9a5e:	e004      	b.n	9a6a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6a>
    9a60:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9a64:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
    9a68:	4411      	add	r1, r2
    9a6a:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    9a6e:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    9a72:	f88d 1000 	strb.w	r1, [sp]
    9a76:	9900      	ldr	r1, [sp, #0]
    9a78:	9100      	str	r1, [sp, #0]
    9a7a:	f89d 1000 	ldrb.w	r1, [sp]
    9a7e:	b939      	cbnz	r1, 9a90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a90>
    9a80:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9a84:	2301      	movs	r3, #1
    9a86:	4619      	mov	r1, r3
    9a88:	3070      	adds	r0, #112	; 0x70
    9a8a:	f003 f9e4 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a8e:	b130      	cbz	r0, 9a9e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a9e>
    9a90:	68a0      	ldr	r0, [r4, #8]
    9a92:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
    9a96:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    9a9a:	4411      	add	r1, r2
    9a9c:	8001      	strh	r1, [r0, #0]
    9a9e:	68a0      	ldr	r0, [r4, #8]
    9aa0:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
    9aa4:	b132      	cbz	r2, 9ab4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ab4>
    9aa6:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    9aaa:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
    9aae:	4419      	add	r1, r3
    9ab0:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    9ab4:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
    9ab8:	2b00      	cmp	r3, #0
    9aba:	dd06      	ble.n	9aca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aca>
    9abc:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    9ac0:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
    9ac4:	4439      	add	r1, r7
    9ac6:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    9aca:	2101      	movs	r1, #1
    9acc:	273d      	movs	r7, #61	; 0x3d
    9ace:	b116      	cbz	r6, 9ad6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ad6>
    9ad0:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    9ad4:	e012      	b.n	9afc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1afc>
    9ad6:	7824      	ldrb	r4, [r4, #0]
    9ad8:	2c02      	cmp	r4, #2
    9ada:	d009      	beq.n	9af0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1af0>
    9adc:	2c01      	cmp	r4, #1
    9ade:	d011      	beq.n	9b04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b04>
    9ae0:	b33d      	cbz	r5, 9b32 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b32>
    9ae2:	f100 0294 	add.w	r2, r0, #148	; 0x94
    9ae6:	7011      	strb	r1, [r2, #0]
    9ae8:	06e9      	lsls	r1, r5, #27
    9aea:	d50e      	bpl.n	9b0a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b0a>
    9aec:	211e      	movs	r1, #30
    9aee:	e018      	b.n	9b22 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b22>
    9af0:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
    9af4:	2a06      	cmp	r2, #6
    9af6:	d044      	beq.n	9b82 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b82>
    9af8:	2216      	movs	r2, #22
    9afa:	e042      	b.n	9b82 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b82>
    9afc:	f100 0294 	add.w	r2, r0, #148	; 0x94
    9b00:	7011      	strb	r1, [r2, #0]
    9b02:	e047      	b.n	9b94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b94>
    9b04:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    9b08:	e03b      	b.n	9b82 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b82>
    9b0a:	0729      	lsls	r1, r5, #28
    9b0c:	d502      	bpl.n	9b14 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b14>
    9b0e:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    9b12:	e03f      	b.n	9b94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b94>
    9b14:	06a9      	lsls	r1, r5, #26
    9b16:	d501      	bpl.n	9b1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b1c>
    9b18:	2123      	movs	r1, #35	; 0x23
    9b1a:	e002      	b.n	9b22 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b22>
    9b1c:	07a9      	lsls	r1, r5, #30
    9b1e:	d003      	beq.n	9b28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b28>
    9b20:	212a      	movs	r1, #42	; 0x2a
    9b22:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9b26:	e035      	b.n	9b94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b94>
    9b28:	f640 41c1 	movw	r1, #3265	; 0xcc1
    9b2c:	2031      	movs	r0, #49	; 0x31
    9b2e:	f7fa f8d7 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b32:	b12a      	cbz	r2, 9b40 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b40>
    9b34:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    9b38:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    9b3c:	42a2      	cmp	r2, r4
    9b3e:	d216      	bcs.n	9b6e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b6e>
    9b40:	2b00      	cmp	r3, #0
    9b42:	dd05      	ble.n	9b50 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b50>
    9b44:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
    9b48:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    9b4c:	429a      	cmp	r2, r3
    9b4e:	d20e      	bcs.n	9b6e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b6e>
    9b50:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
    9b54:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    9b58:	4293      	cmp	r3, r2
    9b5a:	d30a      	bcc.n	9b72 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b72>
    9b5c:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    9b60:	f88d 3000 	strb.w	r3, [sp]
    9b64:	9b00      	ldr	r3, [sp, #0]
    9b66:	9300      	str	r3, [sp, #0]
    9b68:	f89d 3000 	ldrb.w	r3, [sp]
    9b6c:	b10b      	cbz	r3, 9b72 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b72>
    9b6e:	2222      	movs	r2, #34	; 0x22
    9b70:	e007      	b.n	9b82 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b82>
    9b72:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    9b76:	b13b      	cbz	r3, 9b88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b88>
    9b78:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9b7c:	4293      	cmp	r3, r2
    9b7e:	d309      	bcc.n	9b94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b94>
    9b80:	2208      	movs	r2, #8
    9b82:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    9b86:	e7b9      	b.n	9afc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1afc>
    9b88:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    9b8c:	2a06      	cmp	r2, #6
    9b8e:	d301      	bcc.n	9b94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b94>
    9b90:	223e      	movs	r2, #62	; 0x3e
    9b92:	e7f6      	b.n	9b82 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b82>
    9b94:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    9b98:	f88d 1000 	strb.w	r1, [sp]
    9b9c:	9900      	ldr	r1, [sp, #0]
    9b9e:	9100      	str	r1, [sp, #0]
    9ba0:	f89d 1000 	ldrb.w	r1, [sp]
    9ba4:	b119      	cbz	r1, 9bae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bae>
    9ba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9baa:	f004 bced 	b.w	e588 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9bae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9bb2:	2100      	movs	r1, #0
    9bb4:	f7fd bbfe 	b.w	73b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9bb8:	20000130 	.word	0x20000130
    9bbc:	b570      	push	{r4, r5, r6, lr}
    9bbe:	4d2d      	ldr	r5, [pc, #180]	; (9c74 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c74>)
    9bc0:	68a8      	ldr	r0, [r5, #8]
    9bc2:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9bc6:	b151      	cbz	r1, 9bde <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bde>
    9bc8:	2901      	cmp	r1, #1
    9bca:	d008      	beq.n	9bde <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bde>
    9bcc:	2902      	cmp	r1, #2
    9bce:	d009      	beq.n	9be4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1be4>
    9bd0:	2903      	cmp	r1, #3
    9bd2:	d007      	beq.n	9be4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1be4>
    9bd4:	f640 217f 	movw	r1, #2687	; 0xa7f
    9bd8:	2031      	movs	r0, #49	; 0x31
    9bda:	f7fa f881 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bde:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    9be2:	e035      	b.n	9c50 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c50>
    9be4:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    9be8:	2908      	cmp	r1, #8
    9bea:	d034      	beq.n	9c56 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c56>
    9bec:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    9bf0:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    9bf4:	2400      	movs	r4, #0
    9bf6:	1c8b      	adds	r3, r1, #2
    9bf8:	429a      	cmp	r2, r3
    9bfa:	d306      	bcc.n	9c0a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0a>
    9bfc:	1a51      	subs	r1, r2, r1
    9bfe:	1e89      	subs	r1, r1, #2
    9c00:	040c      	lsls	r4, r1, #16
    9c02:	0c24      	lsrs	r4, r4, #16
    9c04:	d001      	beq.n	9c0a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0a>
    9c06:	1e64      	subs	r4, r4, #1
    9c08:	b2a4      	uxth	r4, r4
    9c0a:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    9c0e:	b139      	cbz	r1, 9c20 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c20>
    9c10:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9c14:	2301      	movs	r3, #1
    9c16:	2109      	movs	r1, #9
    9c18:	3070      	adds	r0, #112	; 0x70
    9c1a:	f003 f91c 	bl	ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c1e:	b330      	cbz	r0, 9c6e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c6e>
    9c20:	f7ff ff02 	bl	9a28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a28>
    9c24:	b168      	cbz	r0, 9c42 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c42>
    9c26:	68a9      	ldr	r1, [r5, #8]
    9c28:	2000      	movs	r0, #0
    9c2a:	3198      	adds	r1, #152	; 0x98
    9c2c:	c906      	ldmia	r1, {r1, r2}
    9c2e:	1c8b      	adds	r3, r1, #2
    9c30:	429a      	cmp	r2, r3
    9c32:	d303      	bcc.n	9c3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c3c>
    9c34:	1a50      	subs	r0, r2, r1
    9c36:	1e80      	subs	r0, r0, #2
    9c38:	d000      	beq.n	9c3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c3c>
    9c3a:	1e40      	subs	r0, r0, #1
    9c3c:	42a0      	cmp	r0, r4
    9c3e:	d200      	bcs.n	9c42 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c42>
    9c40:	b284      	uxth	r4, r0
    9c42:	b10c      	cbz	r4, 9c48 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c48>
    9c44:	1e64      	subs	r4, r4, #1
    9c46:	b2a4      	uxth	r4, r4
    9c48:	68a8      	ldr	r0, [r5, #8]
    9c4a:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    9c4e:	4421      	add	r1, r4
    9c50:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    9c54:	bd70      	pop	{r4, r5, r6, pc}
    9c56:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    9c5a:	2903      	cmp	r1, #3
    9c5c:	d3bf      	bcc.n	9bde <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bde>
    9c5e:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    9c62:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9c64:	4411      	add	r1, r2
    9c66:	1c49      	adds	r1, r1, #1
    9c68:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    9c6c:	bd70      	pop	{r4, r5, r6, pc}
    9c6e:	2400      	movs	r4, #0
    9c70:	e7ea      	b.n	9c48 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c48>
    9c72:	0000      	.short	0x0000
    9c74:	20000130 	.word	0x20000130

00009c78 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9c78:	4903      	ldr	r1, [pc, #12]	; (9c88 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9c7a:	884a      	ldrh	r2, [r1, #2]
    9c7c:	8002      	strh	r2, [r0, #0]
    9c7e:	7809      	ldrb	r1, [r1, #0]
    9c80:	7081      	strb	r1, [r0, #2]
    9c82:	2000      	movs	r0, #0
    9c84:	4770      	bx	lr
    9c86:	0000      	.short	0x0000
    9c88:	20000ec0 	.word	0x20000ec0

00009c8c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9c8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9c8e:	460c      	mov	r4, r1
    9c90:	4605      	mov	r5, r0
    9c92:	8800      	ldrh	r0, [r0, #0]
    9c94:	4669      	mov	r1, sp
    9c96:	f003 f8b4 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9c9a:	0001      	movs	r1, r0
    9c9c:	f04f 0000 	mov.w	r0, #0
    9ca0:	d005      	beq.n	9cae <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    9ca2:	f8c4 0002 	str.w	r0, [r4, #2]
    9ca6:	71a0      	strb	r0, [r4, #6]
    9ca8:	8020      	strh	r0, [r4, #0]
    9caa:	2002      	movs	r0, #2
    9cac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9cae:	9901      	ldr	r1, [sp, #4]
    9cb0:	f111 0170 	adds.w	r1, r1, #112	; 0x70
    9cb4:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
    9cb8:	f8d1 2016 	ldr.w	r2, [r1, #22]
    9cbc:	f8c4 2002 	str.w	r2, [r4, #2]
    9cc0:	7e8a      	ldrb	r2, [r1, #26]
    9cc2:	71a2      	strb	r2, [r4, #6]
    9cc4:	882a      	ldrh	r2, [r5, #0]
    9cc6:	8022      	strh	r2, [r4, #0]
    9cc8:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
    9ccc:	f88d 2008 	strb.w	r2, [sp, #8]
    9cd0:	9a02      	ldr	r2, [sp, #8]
    9cd2:	9202      	str	r2, [sp, #8]
    9cd4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    9cd8:	2a00      	cmp	r2, #0
    9cda:	d1eb      	bne.n	9cb4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    9cdc:	2000      	movs	r0, #0
    9cde:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00009ce0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9ce0:	b51c      	push	{r2, r3, r4, lr}
    9ce2:	8800      	ldrh	r0, [r0, #0]
    9ce4:	4669      	mov	r1, sp
    9ce6:	f003 f88c 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9cea:	2800      	cmp	r0, #0
    9cec:	d10b      	bne.n	9d06 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9cee:	480b      	ldr	r0, [pc, #44]	; (9d1c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9cf0:	7800      	ldrb	r0, [r0, #0]
    9cf2:	b188      	cbz	r0, 9d18 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9cf4:	9801      	ldr	r0, [sp, #4]
    9cf6:	f005 fb65 	bl	f3c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    9cfa:	b128      	cbz	r0, 9d08 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9cfc:	9801      	ldr	r0, [sp, #4]
    9cfe:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    9d02:	b118      	cbz	r0, 9d0c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9d04:	203a      	movs	r0, #58	; 0x3a
    9d06:	bd1c      	pop	{r2, r3, r4, pc}
    9d08:	2002      	movs	r0, #2
    9d0a:	bd1c      	pop	{r2, r3, r4, pc}
    9d0c:	9901      	ldr	r1, [sp, #4]
    9d0e:	2001      	movs	r0, #1
    9d10:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
    9d14:	2000      	movs	r0, #0
    9d16:	bd1c      	pop	{r2, r3, r4, pc}
    9d18:	2011      	movs	r0, #17
    9d1a:	bd1c      	pop	{r2, r3, r4, pc}
    9d1c:	2000020c 	.word	0x2000020c

00009d20 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9d20:	b510      	push	{r4, lr}
    9d22:	4604      	mov	r4, r0
    9d24:	f005 fb45 	bl	f3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    9d28:	b130      	cbz	r0, 9d38 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    9d2a:	4804      	ldr	r0, [pc, #16]	; (9d3c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    9d2c:	8881      	ldrh	r1, [r0, #4]
    9d2e:	8021      	strh	r1, [r4, #0]
    9d30:	88c0      	ldrh	r0, [r0, #6]
    9d32:	8060      	strh	r0, [r4, #2]
    9d34:	2000      	movs	r0, #0
    9d36:	bd10      	pop	{r4, pc}
    9d38:	2001      	movs	r0, #1
    9d3a:	bd10      	pop	{r4, pc}
    9d3c:	20000214 	.word	0x20000214

00009d40 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9d40:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9d42:	4605      	mov	r5, r0
    9d44:	f000 fb04 	bl	a350 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9d48:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9d4c:	b310      	cbz	r0, 9d94 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    9d4e:	2400      	movs	r4, #0
    9d50:	a802      	add	r0, sp, #8
    9d52:	f88d 4004 	strb.w	r4, [sp, #4]
    9d56:	f88d 4008 	strb.w	r4, [sp, #8]
    9d5a:	9000      	str	r0, [sp, #0]
    9d5c:	78aa      	ldrb	r2, [r5, #2]
    9d5e:	7869      	ldrb	r1, [r5, #1]
    9d60:	7828      	ldrb	r0, [r5, #0]
    9d62:	ab01      	add	r3, sp, #4
    9d64:	f005 fb86 	bl	f474 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    9d68:	2800      	cmp	r0, #0
    9d6a:	d112      	bne.n	9d92 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    9d6c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9d70:	f005 fa87 	bl	f282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    9d74:	b180      	cbz	r0, 9d98 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9d76:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9d7a:	f005 fa82 	bl	f282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    9d7e:	b158      	cbz	r0, 9d98 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9d80:	4806      	ldr	r0, [pc, #24]	; (9d9c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    9d82:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9d86:	7381      	strb	r1, [r0, #14]
    9d88:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9d8c:	73c1      	strb	r1, [r0, #15]
    9d8e:	8204      	strh	r4, [r0, #16]
    9d90:	2000      	movs	r0, #0
    9d92:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d94:	2001      	movs	r0, #1
    9d96:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d98:	2011      	movs	r0, #17
    9d9a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d9c:	20000ec0 	.word	0x20000ec0

00009da0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9da0:	7801      	ldrb	r1, [r0, #0]
    9da2:	b171      	cbz	r1, 9dc2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9da4:	7841      	ldrb	r1, [r0, #1]
    9da6:	b161      	cbz	r1, 9dc2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9da8:	8841      	ldrh	r1, [r0, #2]
    9daa:	291b      	cmp	r1, #27
    9dac:	d309      	bcc.n	9dc2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9dae:	8881      	ldrh	r1, [r0, #4]
    9db0:	291b      	cmp	r1, #27
    9db2:	d306      	bcc.n	9dc2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9db4:	4904      	ldr	r1, [pc, #16]	; (9dc8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9db6:	6802      	ldr	r2, [r0, #0]
    9db8:	600a      	str	r2, [r1, #0]
    9dba:	8880      	ldrh	r0, [r0, #4]
    9dbc:	8088      	strh	r0, [r1, #4]
    9dbe:	2000      	movs	r0, #0
    9dc0:	4770      	bx	lr
    9dc2:	2012      	movs	r0, #18
    9dc4:	4770      	bx	lr
    9dc6:	0000      	.short	0x0000
    9dc8:	20000ec0 	.word	0x20000ec0

00009dcc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9dcc:	6800      	ldr	r0, [r0, #0]
    9dce:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9dd2:	4288      	cmp	r0, r1
    9dd4:	d303      	bcc.n	9dde <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9dd6:	4903      	ldr	r1, [pc, #12]	; (9de4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9dd8:	6088      	str	r0, [r1, #8]
    9dda:	2000      	movs	r0, #0
    9ddc:	4770      	bx	lr
    9dde:	2012      	movs	r0, #18
    9de0:	4770      	bx	lr
    9de2:	0000      	.short	0x0000
    9de4:	20000ec0 	.word	0x20000ec0

00009de8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9de8:	4a03      	ldr	r2, [pc, #12]	; (9df8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9dea:	e9d2 1200 	ldrd	r1, r2, [r2]
    9dee:	6001      	str	r1, [r0, #0]
    9df0:	6042      	str	r2, [r0, #4]
    9df2:	2000      	movs	r0, #0
    9df4:	4770      	bx	lr
    9df6:	0000      	.short	0x0000
    9df8:	0000a22c 	.word	0x0000a22c

00009dfc <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    9dfc:	b510      	push	{r4, lr}
    9dfe:	2005      	movs	r0, #5
    9e00:	f000 fa9c 	bl	a33c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9e04:	f7fd fe52 	bl	7aac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9e08:	4902      	ldr	r1, [pc, #8]	; (9e14 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    9e0a:	4801      	ldr	r0, [pc, #4]	; (9e10 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    9e0c:	6048      	str	r0, [r1, #4]
    9e0e:	bd10      	pop	{r4, pc}
    9e10:	00009e6d 	.word	0x00009e6d
    9e14:	2000020c 	.word	0x2000020c

00009e18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9e18:	b510      	push	{r4, lr}
    9e1a:	f002 ff46 	bl	ccaa <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9e1e:	f7fb fc6f 	bl	5700 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9e22:	f000 faa5 	bl	a370 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9e26:	f003 fbee 	bl	d606 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    9e2a:	480e      	ldr	r0, [pc, #56]	; (9e64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    9e2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9e30:	4b0d      	ldr	r3, [pc, #52]	; (9e68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    9e32:	8281      	strh	r1, [r0, #20]
    9e34:	2100      	movs	r1, #0
    9e36:	7581      	strb	r1, [r0, #22]
    9e38:	8301      	strh	r1, [r0, #24]
    9e3a:	221b      	movs	r2, #27
    9e3c:	801a      	strh	r2, [r3, #0]
    9e3e:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9e42:	805c      	strh	r4, [r3, #2]
    9e44:	809a      	strh	r2, [r3, #4]
    9e46:	80dc      	strh	r4, [r3, #6]
    9e48:	7381      	strb	r1, [r0, #14]
    9e4a:	73c1      	strb	r1, [r0, #15]
    9e4c:	2303      	movs	r3, #3
    9e4e:	7003      	strb	r3, [r0, #0]
    9e50:	2302      	movs	r3, #2
    9e52:	7043      	strb	r3, [r0, #1]
    9e54:	8042      	strh	r2, [r0, #2]
    9e56:	8082      	strh	r2, [r0, #4]
    9e58:	f640 62a6 	movw	r2, #3750	; 0xea6
    9e5c:	6082      	str	r2, [r0, #8]
    9e5e:	7481      	strb	r1, [r0, #18]
    9e60:	7301      	strb	r1, [r0, #12]
    9e62:	bd10      	pop	{r4, pc}
    9e64:	20000ec0 	.word	0x20000ec0
    9e68:	20000214 	.word	0x20000214
    9e6c:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e70:	4692      	mov	sl, r2
    9e72:	460f      	mov	r7, r1
    9e74:	4681      	mov	r9, r0
    9e76:	f005 fa9c 	bl	f3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    9e7a:	2800      	cmp	r0, #0
    9e7c:	d063      	beq.n	9f46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    9e7e:	4933      	ldr	r1, [pc, #204]	; (9f4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    9e80:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    9e84:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    9e88:	8808      	ldrh	r0, [r1, #0]
    9e8a:	4290      	cmp	r0, r2
    9e8c:	d300      	bcc.n	9e90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    9e8e:	4610      	mov	r0, r2
    9e90:	4680      	mov	r8, r0
    9e92:	8888      	ldrh	r0, [r1, #4]
    9e94:	42b0      	cmp	r0, r6
    9e96:	d200      	bcs.n	9e9a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    9e98:	4606      	mov	r6, r0
    9e9a:	884c      	ldrh	r4, [r1, #2]
    9e9c:	f640 0048 	movw	r0, #2120	; 0x848
    9ea0:	4284      	cmp	r4, r0
    9ea2:	d300      	bcc.n	9ea6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    9ea4:	4604      	mov	r4, r0
    9ea6:	88cd      	ldrh	r5, [r1, #6]
    9ea8:	4285      	cmp	r5, r0
    9eaa:	d300      	bcc.n	9eae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    9eac:	4605      	mov	r5, r0
    9eae:	4284      	cmp	r4, r0
    9eb0:	d300      	bcc.n	9eb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    9eb2:	4604      	mov	r4, r0
    9eb4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    9eb8:	2e1b      	cmp	r6, #27
    9eba:	d001      	beq.n	9ec0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    9ebc:	428d      	cmp	r5, r1
    9ebe:	d104      	bne.n	9eca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    9ec0:	f1b8 0f1b 	cmp.w	r8, #27
    9ec4:	d03f      	beq.n	9f46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    9ec6:	428c      	cmp	r4, r1
    9ec8:	d03d      	beq.n	9f46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    9eca:	466a      	mov	r2, sp
    9ecc:	4651      	mov	r1, sl
    9ece:	4648      	mov	r0, r9
    9ed0:	f005 f9fa 	bl	f2c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    9ed4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    9ed8:	4641      	mov	r1, r8
    9eda:	4540      	cmp	r0, r8
    9edc:	d900      	bls.n	9ee0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    9ede:	4608      	mov	r0, r1
    9ee0:	80f8      	strh	r0, [r7, #6]
    9ee2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9ee6:	42a1      	cmp	r1, r4
    9ee8:	d800      	bhi.n	9eec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    9eea:	460c      	mov	r4, r1
    9eec:	813c      	strh	r4, [r7, #8]
    9eee:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    9ef2:	42b1      	cmp	r1, r6
    9ef4:	d800      	bhi.n	9ef8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    9ef6:	460e      	mov	r6, r1
    9ef8:	807e      	strh	r6, [r7, #2]
    9efa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9efe:	42a9      	cmp	r1, r5
    9f00:	d900      	bls.n	9f04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    9f02:	4629      	mov	r1, r5
    9f04:	80b9      	strh	r1, [r7, #4]
    9f06:	2201      	movs	r2, #1
    9f08:	703a      	strb	r2, [r7, #0]
    9f0a:	381b      	subs	r0, #27
    9f0c:	28e0      	cmp	r0, #224	; 0xe0
    9f0e:	d902      	bls.n	9f16 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    9f10:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    9f14:	e014      	b.n	9f40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    9f16:	3e1b      	subs	r6, #27
    9f18:	2ee0      	cmp	r6, #224	; 0xe0
    9f1a:	d902      	bls.n	9f22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    9f1c:	f640 4182 	movw	r1, #3202	; 0xc82
    9f20:	e00e      	b.n	9f40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    9f22:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    9f26:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    9f2a:	4284      	cmp	r4, r0
    9f2c:	d902      	bls.n	9f34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    9f2e:	f640 4184 	movw	r1, #3204	; 0xc84
    9f32:	e005      	b.n	9f40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    9f34:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    9f38:	4281      	cmp	r1, r0
    9f3a:	d904      	bls.n	9f46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    9f3c:	f640 4186 	movw	r1, #3206	; 0xc86
    9f40:	2039      	movs	r0, #57	; 0x39
    9f42:	f7f9 fecd 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f46:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f4a:	0000      	.short	0x0000
    9f4c:	20000214 	.word	0x20000214

00009f50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    9f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f54:	b088      	sub	sp, #32
    9f56:	460c      	mov	r4, r1
    9f58:	4606      	mov	r6, r0
    9f5a:	f003 fd77 	bl	da4c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    9f5e:	b198      	cbz	r0, 9f88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    9f60:	4630      	mov	r0, r6
    9f62:	f003 fd66 	bl	da32 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9f66:	b130      	cbz	r0, 9f76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    9f68:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    9f6c:	2012      	movs	r0, #18
    9f6e:	2900      	cmp	r1, #0
    9f70:	d00b      	beq.n	9f8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f72:	2980      	cmp	r1, #128	; 0x80
    9f74:	d809      	bhi.n	9f8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f76:	4630      	mov	r0, r6
    9f78:	f003 fd4a 	bl	da10 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    9f7c:	b140      	cbz	r0, 9f90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9f7e:	4630      	mov	r0, r6
    9f80:	f003 fcc2 	bl	d908 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    9f84:	b130      	cbz	r0, 9f94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    9f86:	e009      	b.n	9f9c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    9f88:	2042      	movs	r0, #66	; 0x42
    9f8a:	b008      	add	sp, #32
    9f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f90:	200c      	movs	r0, #12
    9f92:	e7fa      	b.n	9f8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f94:	4630      	mov	r0, r6
    9f96:	f003 fd46 	bl	da26 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    9f9a:	b3a8      	cbz	r0, a008 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    9f9c:	4630      	mov	r0, r6
    9f9e:	f003 ff1d 	bl	dddc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9fa2:	2800      	cmp	r0, #0
    9fa4:	d1f4      	bne.n	9f90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9fa6:	4630      	mov	r0, r6
    9fa8:	f003 fcc9 	bl	d93e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    9fac:	2800      	cmp	r0, #0
    9fae:	d1ef      	bne.n	9f90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9fb0:	4630      	mov	r0, r6
    9fb2:	f7fc f9d7 	bl	6364 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    9fb6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    9fba:	f242 7110 	movw	r1, #10000	; 0x2710
    9fbe:	fb00 f801 	mul.w	r8, r0, r1
    9fc2:	78e1      	ldrb	r1, [r4, #3]
    9fc4:	4630      	mov	r0, r6
    9fc6:	f003 fd1a 	bl	d9fe <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    9fca:	4630      	mov	r0, r6
    9fcc:	f003 fd2d 	bl	da2a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9fd0:	b1e8      	cbz	r0, a00e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    9fd2:	2200      	movs	r2, #0
    9fd4:	4611      	mov	r1, r2
    9fd6:	a801      	add	r0, sp, #4
    9fd8:	f7fa f8e0 	bl	419c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    9fdc:	0004      	movs	r4, r0
    9fde:	d06a      	beq.n	a0b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    9fe0:	2100      	movs	r1, #0
    9fe2:	f7fb fdbb 	bl	5b5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9fe6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9fea:	8020      	strh	r0, [r4, #0]
    9fec:	4621      	mov	r1, r4
    9fee:	4630      	mov	r0, r6
    9ff0:	f003 fd3f 	bl	da72 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    9ff4:	f005 f9dd 	bl	f3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    9ff8:	4d3a      	ldr	r5, [pc, #232]	; (a0e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    9ffa:	2800      	cmp	r0, #0
    9ffc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a000:	d00f      	beq.n	a022 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    a002:	886a      	ldrh	r2, [r5, #2]
    a004:	88a9      	ldrh	r1, [r5, #4]
    a006:	e00e      	b.n	a026 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    a008:	e7ff      	b.n	a00a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    a00a:	2012      	movs	r0, #18
    a00c:	e7bd      	b.n	9f8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a00e:	4642      	mov	r2, r8
    a010:	2100      	movs	r1, #0
    a012:	4630      	mov	r0, r6
    a014:	f7fd f8f0 	bl	71f8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a018:	2800      	cmp	r0, #0
    a01a:	d0b6      	beq.n	9f8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a01c:	f241 414c 	movw	r1, #5196	; 0x144c
    a020:	e053      	b.n	a0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a022:	221b      	movs	r2, #27
    a024:	4611      	mov	r1, r2
    a026:	84c2      	strh	r2, [r0, #38]	; 0x26
    a028:	8501      	strh	r1, [r0, #40]	; 0x28
    a02a:	68a8      	ldr	r0, [r5, #8]
    a02c:	62e0      	str	r0, [r4, #44]	; 0x2c
    a02e:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a032:	4630      	mov	r0, r6
    a034:	f003 fd01 	bl	da3a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a038:	b910      	cbnz	r0, a040 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    a03a:	4630      	mov	r0, r6
    a03c:	f003 fd17 	bl	da6e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a040:	60e7      	str	r7, [r4, #12]
    a042:	8821      	ldrh	r1, [r4, #0]
    a044:	f8ad 1008 	strh.w	r1, [sp, #8]
    a048:	7ba9      	ldrb	r1, [r5, #14]
    a04a:	f88d 100a 	strb.w	r1, [sp, #10]
    a04e:	7be9      	ldrb	r1, [r5, #15]
    a050:	f88d 100b 	strb.w	r1, [sp, #11]
    a054:	8a29      	ldrh	r1, [r5, #16]
    a056:	f8ad 100c 	strh.w	r1, [sp, #12]
    a05a:	a905      	add	r1, sp, #20
    a05c:	9100      	str	r1, [sp, #0]
    a05e:	2001      	movs	r0, #1
    a060:	ab04      	add	r3, sp, #16
    a062:	aa02      	add	r2, sp, #8
    a064:	4621      	mov	r1, r4
    a066:	f005 f965 	bl	f334 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    a06a:	b140      	cbz	r0, a07e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    a06c:	2100      	movs	r1, #0
    a06e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a072:	f7fa f8bd 	bl	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a076:	b1f0      	cbz	r0, a0b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a078:	f241 4198 	movw	r1, #5272	; 0x1498
    a07c:	e025      	b.n	a0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a07e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a082:	f88d 0018 	strb.w	r0, [sp, #24]
    a086:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a08a:	f88d 0019 	strb.w	r0, [sp, #25]
    a08e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a092:	f8ad 001a 	strh.w	r0, [sp, #26]
    a096:	a906      	add	r1, sp, #24
    a098:	4620      	mov	r0, r4
    a09a:	f002 ff71 	bl	cf80 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a09e:	7868      	ldrb	r0, [r5, #1]
    a0a0:	9000      	str	r0, [sp, #0]
    a0a2:	782b      	ldrb	r3, [r5, #0]
    a0a4:	88aa      	ldrh	r2, [r5, #4]
    a0a6:	8869      	ldrh	r1, [r5, #2]
    a0a8:	8820      	ldrh	r0, [r4, #0]
    a0aa:	f7fa f96d 	bl	4388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a0ae:	b120      	cbz	r0, a0ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    a0b0:	f241 41a3 	movw	r1, #5283	; 0x14a3
    a0b4:	e009      	b.n	a0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a0b6:	2009      	movs	r0, #9
    a0b8:	e767      	b.n	9f8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0ba:	4642      	mov	r2, r8
    a0bc:	4621      	mov	r1, r4
    a0be:	4630      	mov	r0, r6
    a0c0:	f7fd f89a 	bl	71f8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a0c4:	b120      	cbz	r0, a0d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    a0c6:	f241 41a5 	movw	r1, #5285	; 0x14a5
    a0ca:	2039      	movs	r0, #57	; 0x39
    a0cc:	f7f9 fe08 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0d0:	4805      	ldr	r0, [pc, #20]	; (a0e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    a0d2:	6843      	ldr	r3, [r0, #4]
    a0d4:	b123      	cbz	r3, a0e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a0d6:	2200      	movs	r2, #0
    a0d8:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
    a0dc:	4620      	mov	r0, r4
    a0de:	4798      	blx	r3
    a0e0:	2000      	movs	r0, #0
    a0e2:	e752      	b.n	9f8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0e4:	20000ec0 	.word	0x20000ec0
    a0e8:	2000020c 	.word	0x2000020c
    a0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0f0:	b088      	sub	sp, #32
    a0f2:	4604      	mov	r4, r0
    a0f4:	8800      	ldrh	r0, [r0, #0]
    a0f6:	a906      	add	r1, sp, #24
    a0f8:	f002 fe83 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a0fc:	2800      	cmp	r0, #0
    a0fe:	d147      	bne.n	a190 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a100:	9807      	ldr	r0, [sp, #28]
    a102:	2700      	movs	r7, #0
    a104:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
    a108:	f88d 1008 	strb.w	r1, [sp, #8]
    a10c:	9902      	ldr	r1, [sp, #8]
    a10e:	9102      	str	r1, [sp, #8]
    a110:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a114:	f88d 100c 	strb.w	r1, [sp, #12]
    a118:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a11c:	3070      	adds	r0, #112	; 0x70
    a11e:	0689      	lsls	r1, r1, #26
    a120:	d502      	bpl.n	a128 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    a122:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a126:	b149      	cbz	r1, a13c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a128:	f05f 0100 	movs.w	r1, #0
    a12c:	f88d 1004 	strb.w	r1, [sp, #4]
    a130:	2105      	movs	r1, #5
    a132:	304c      	adds	r0, #76	; 0x4c
    a134:	f004 fa64 	bl	e600 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a138:	b110      	cbz	r0, a140 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    a13a:	e004      	b.n	a146 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    a13c:	2101      	movs	r1, #1
    a13e:	e7f5      	b.n	a12c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    a140:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a144:	b318      	cbz	r0, a18e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    a146:	8921      	ldrh	r1, [r4, #8]
    a148:	88e0      	ldrh	r0, [r4, #6]
    a14a:	f005 f8af 	bl	f2ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a14e:	2800      	cmp	r0, #0
    a150:	d11e      	bne.n	a190 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a152:	88a1      	ldrh	r1, [r4, #4]
    a154:	8860      	ldrh	r0, [r4, #2]
    a156:	f005 f8a9 	bl	f2ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a15a:	2800      	cmp	r0, #0
    a15c:	d118      	bne.n	a190 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a15e:	8921      	ldrh	r1, [r4, #8]
    a160:	88e0      	ldrh	r0, [r4, #6]
    a162:	f005 f899 	bl	f298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    a166:	2800      	cmp	r0, #0
    a168:	d112      	bne.n	a190 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a16a:	88a1      	ldrh	r1, [r4, #4]
    a16c:	8860      	ldrh	r0, [r4, #2]
    a16e:	f005 f893 	bl	f298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    a172:	0006      	movs	r6, r0
    a174:	d10c      	bne.n	a190 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a176:	9807      	ldr	r0, [sp, #28]
    a178:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    a17c:	f04f 0801 	mov.w	r8, #1
    a180:	f885 8001 	strb.w	r8, [r5, #1]
    a184:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a188:	b129      	cbz	r1, a196 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    a18a:	263a      	movs	r6, #58	; 0x3a
    a18c:	e02f      	b.n	a1ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    a18e:	201a      	movs	r0, #26
    a190:	b008      	add	sp, #32
    a192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a196:	4639      	mov	r1, r7
    a198:	aa03      	add	r2, sp, #12
    a19a:	f005 f895 	bl	f2c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    a19e:	8861      	ldrh	r1, [r4, #2]
    a1a0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a1a4:	4281      	cmp	r1, r0
    a1a6:	d200      	bcs.n	a1aa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a1a8:	4608      	mov	r0, r1
    a1aa:	80e8      	strh	r0, [r5, #6]
    a1ac:	88a1      	ldrh	r1, [r4, #4]
    a1ae:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a1b2:	4281      	cmp	r1, r0
    a1b4:	d200      	bcs.n	a1b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a1b6:	4608      	mov	r0, r1
    a1b8:	8128      	strh	r0, [r5, #8]
    a1ba:	88e2      	ldrh	r2, [r4, #6]
    a1bc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a1c0:	428a      	cmp	r2, r1
    a1c2:	d200      	bcs.n	a1c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a1c4:	4611      	mov	r1, r2
    a1c6:	8069      	strh	r1, [r5, #2]
    a1c8:	8922      	ldrh	r2, [r4, #8]
    a1ca:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a1ce:	428a      	cmp	r2, r1
    a1d0:	d200      	bcs.n	a1d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a1d2:	4611      	mov	r1, r2
    a1d4:	f640 0248 	movw	r2, #2120	; 0x848
    a1d8:	80a9      	strh	r1, [r5, #4]
    a1da:	4291      	cmp	r1, r2
    a1dc:	d300      	bcc.n	a1e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a1de:	4611      	mov	r1, r2
    a1e0:	80a9      	strh	r1, [r5, #4]
    a1e2:	4290      	cmp	r0, r2
    a1e4:	d200      	bcs.n	a1e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a1e6:	4602      	mov	r2, r0
    a1e8:	812a      	strh	r2, [r5, #8]
    a1ea:	f885 8000 	strb.w	r8, [r5]
    a1ee:	706f      	strb	r7, [r5, #1]
    a1f0:	4630      	mov	r0, r6
    a1f2:	e7cd      	b.n	a190 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a1f4:	b510      	push	{r4, lr}
    a1f6:	4604      	mov	r4, r0
    a1f8:	88c1      	ldrh	r1, [r0, #6]
    a1fa:	8880      	ldrh	r0, [r0, #4]
    a1fc:	f005 f856 	bl	f2ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a200:	2800      	cmp	r0, #0
    a202:	d10f      	bne.n	a224 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a204:	8861      	ldrh	r1, [r4, #2]
    a206:	8820      	ldrh	r0, [r4, #0]
    a208:	f005 f850 	bl	f2ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a20c:	2800      	cmp	r0, #0
    a20e:	d109      	bne.n	a224 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a210:	4805      	ldr	r0, [pc, #20]	; (a228 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a212:	88a1      	ldrh	r1, [r4, #4]
    a214:	8081      	strh	r1, [r0, #4]
    a216:	8821      	ldrh	r1, [r4, #0]
    a218:	8001      	strh	r1, [r0, #0]
    a21a:	88e1      	ldrh	r1, [r4, #6]
    a21c:	80c1      	strh	r1, [r0, #6]
    a21e:	8861      	ldrh	r1, [r4, #2]
    a220:	8041      	strh	r1, [r0, #2]
    a222:	2000      	movs	r0, #0
    a224:	bd10      	pop	{r4, pc}
    a226:	0000      	.short	0x0000
    a228:	20000214 	.word	0x20000214
    a22c:	0b12fe0b 	.word	0x0b12fe0b
    a230:	12fe0059 	.word	0x12fe0059
    a234:	05060708 	.word	0x05060708
    a238:	00020304 	.word	0x00020304
    a23c:	f0f4f8fc 	.word	0xf0f4f8fc
    a240:	0304d8ec 	.word	0x0304d8ec
    a244:	f4f8fc00 	.word	0xf4f8fc00
    a248:	00d8ecf0 	.word	0x00d8ecf0

0000a24c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a24c:	b510      	push	{r4, lr}
    a24e:	f7fb fecd 	bl	5fec <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a252:	4804      	ldr	r0, [pc, #16]	; (a264 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a254:	6840      	ldr	r0, [r0, #4]
    a256:	f005 f985 	bl	f564 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a25e:	f004 bec1 	b.w	efe4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a262:	0000      	.short	0x0000
    a264:	2000021c 	.word	0x2000021c

0000a268 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a268:	b510      	push	{r4, lr}
    a26a:	4c07      	ldr	r4, [pc, #28]	; (a288 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a26c:	68a0      	ldr	r0, [r4, #8]
    a26e:	f005 f979 	bl	f564 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a272:	68e0      	ldr	r0, [r4, #12]
    a274:	f005 f976 	bl	f564 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a278:	f002 fd17 	bl	ccaa <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a27c:	f7fb fa40 	bl	5700 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a284:	f7ff bdc8 	b.w	9e18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a288:	2000021c 	.word	0x2000021c

0000a28c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a28c:	b500      	push	{lr}
    a28e:	4905      	ldr	r1, [pc, #20]	; (a2a4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a290:	4805      	ldr	r0, [pc, #20]	; (a2a8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a292:	f005 f948 	bl	f526 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a296:	4804      	ldr	r0, [pc, #16]	; (a2a8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a298:	4904      	ldr	r1, [pc, #16]	; (a2ac <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a29a:	1d00      	adds	r0, r0, #4
    a29c:	f85d eb04 	ldr.w	lr, [sp], #4
    a2a0:	f005 b941 	b.w	f526 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a2a4:	2000022c 	.word	0x2000022c
    a2a8:	20000220 	.word	0x20000220
    a2ac:	20000234 	.word	0x20000234

0000a2b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a2b0:	b500      	push	{lr}
    a2b2:	4908      	ldr	r1, [pc, #32]	; (a2d4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a2b4:	4808      	ldr	r0, [pc, #32]	; (a2d8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a2b6:	f005 f936 	bl	f526 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a2ba:	4807      	ldr	r0, [pc, #28]	; (a2d8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a2bc:	4907      	ldr	r1, [pc, #28]	; (a2dc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a2be:	1d00      	adds	r0, r0, #4
    a2c0:	f005 f931 	bl	f526 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a2c4:	4804      	ldr	r0, [pc, #16]	; (a2d8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a2c6:	4906      	ldr	r1, [pc, #24]	; (a2e0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a2c8:	3008      	adds	r0, #8
    a2ca:	f85d eb04 	ldr.w	lr, [sp], #4
    a2ce:	f005 b92a 	b.w	f526 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a2d2:	0000      	.short	0x0000
    a2d4:	20000244 	.word	0x20000244
    a2d8:	20000220 	.word	0x20000220
    a2dc:	2000024c 	.word	0x2000024c
    a2e0:	2000023c 	.word	0x2000023c

0000a2e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a2e4:	4801      	ldr	r0, [pc, #4]	; (a2ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a2e6:	7800      	ldrb	r0, [r0, #0]
    a2e8:	4770      	bx	lr
    a2ea:	0000      	.short	0x0000
    a2ec:	2000021c 	.word	0x2000021c
    a2f0:	b510      	push	{r4, lr}
    a2f2:	f7fc f9a9 	bl	6648 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a2f6:	f7fd f80f 	bl	7318 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    a2fa:	4803      	ldr	r0, [pc, #12]	; (a308 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    a2fc:	f7fc f98a 	bl	6614 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a304:	f7fb be7e 	b.w	6004 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    a308:	20001349 	.word	0x20001349
    a30c:	4909      	ldr	r1, [pc, #36]	; (a334 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    a30e:	b510      	push	{r4, lr}
    a310:	2001      	movs	r0, #1
    a312:	7008      	strb	r0, [r1, #0]
    a314:	f7fc f9c8 	bl	66a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a318:	f7fd fd20 	bl	7d5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a31c:	f002 fcb3 	bl	cc86 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a320:	4805      	ldr	r0, [pc, #20]	; (a338 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    a322:	f7fa fc53 	bl	4bcc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a326:	2000      	movs	r0, #0
    a328:	f7f9 fea8 	bl	407c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a330:	f7fb be70 	b.w	6014 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    a334:	2000021c 	.word	0x2000021c
    a338:	20001349 	.word	0x20001349

0000a33c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a33c:	2101      	movs	r1, #1
    a33e:	4081      	lsls	r1, r0
    a340:	4802      	ldr	r0, [pc, #8]	; (a34c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a342:	6802      	ldr	r2, [r0, #0]
    a344:	4311      	orrs	r1, r2
    a346:	6001      	str	r1, [r0, #0]
    a348:	4770      	bx	lr
    a34a:	0000      	.short	0x0000
    a34c:	20000254 	.word	0x20000254

0000a350 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a350:	4801      	ldr	r0, [pc, #4]	; (a358 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a352:	6800      	ldr	r0, [r0, #0]
    a354:	4770      	bx	lr
    a356:	0000      	.short	0x0000
    a358:	20000254 	.word	0x20000254

0000a35c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a35c:	4803      	ldr	r0, [pc, #12]	; (a36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a35e:	8800      	ldrh	r0, [r0, #0]
    a360:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a364:	0040      	lsls	r0, r0, #1
    a366:	1c40      	adds	r0, r0, #1
    a368:	4770      	bx	lr
    a36a:	0000      	.short	0x0000
    a36c:	20000254 	.word	0x20000254

0000a370 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a370:	b510      	push	{r4, lr}
    a372:	f7f9 f911 	bl	3598 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a376:	2200      	movs	r2, #0
    a378:	4b08      	ldr	r3, [pc, #32]	; (a39c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    a37a:	4611      	mov	r1, r2
    a37c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    a380:	4284      	cmp	r4, r0
    a382:	d303      	bcc.n	a38c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    a384:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a388:	7882      	ldrb	r2, [r0, #2]
    a38a:	e003      	b.n	a394 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    a38c:	1c49      	adds	r1, r1, #1
    a38e:	b2c9      	uxtb	r1, r1
    a390:	290c      	cmp	r1, #12
    a392:	d3f3      	bcc.n	a37c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    a394:	4802      	ldr	r0, [pc, #8]	; (a3a0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    a396:	7002      	strb	r2, [r0, #0]
    a398:	bd10      	pop	{r4, pc}
    a39a:	0000      	.short	0x0000
    a39c:	0000f5b4 	.word	0x0000f5b4
    a3a0:	200002a3 	.word	0x200002a3

0000a3a4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a3a4:	b570      	push	{r4, r5, r6, lr}
    a3a6:	4605      	mov	r5, r0
    a3a8:	4616      	mov	r6, r2
    a3aa:	460c      	mov	r4, r1
    a3ac:	2002      	movs	r0, #2
    a3ae:	f000 f9f9 	bl	a7a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a3b2:	4906      	ldr	r1, [pc, #24]	; (a3cc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a3b4:	2001      	movs	r0, #1
    a3b6:	1ef6      	subs	r6, r6, #3
    a3b8:	7008      	strb	r0, [r1, #0]
    a3ba:	4805      	ldr	r0, [pc, #20]	; (a3d0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a3bc:	6006      	str	r6, [r0, #0]
    a3be:	4804      	ldr	r0, [pc, #16]	; (a3d0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a3c0:	3808      	subs	r0, #8
    a3c2:	6005      	str	r5, [r0, #0]
    a3c4:	1f00      	subs	r0, r0, #4
    a3c6:	6004      	str	r4, [r0, #0]
    a3c8:	bd70      	pop	{r4, r5, r6, pc}
    a3ca:	0000      	.short	0x0000
    a3cc:	200002a4 	.word	0x200002a4
    a3d0:	4000f510 	.word	0x4000f510

0000a3d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a3d4:	b510      	push	{r4, lr}
    a3d6:	4c0c      	ldr	r4, [pc, #48]	; (a408 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a3d8:	7820      	ldrb	r0, [r4, #0]
    a3da:	b180      	cbz	r0, a3fe <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a3dc:	490b      	ldr	r1, [pc, #44]	; (a40c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a3de:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a3e2:	6008      	str	r0, [r1, #0]
    a3e4:	f000 f86a 	bl	a4bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a3e8:	2100      	movs	r1, #0
    a3ea:	b120      	cbz	r0, a3f6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a3ec:	2001      	movs	r0, #1
    a3ee:	7060      	strb	r0, [r4, #1]
    a3f0:	4807      	ldr	r0, [pc, #28]	; (a410 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a3f2:	6800      	ldr	r0, [r0, #0]
    a3f4:	e001      	b.n	a3fa <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a3f6:	7061      	strb	r1, [r4, #1]
    a3f8:	2010      	movs	r0, #16
    a3fa:	70a0      	strb	r0, [r4, #2]
    a3fc:	7021      	strb	r1, [r4, #0]
    a3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a402:	2000      	movs	r0, #0
    a404:	f000 b9ce 	b.w	a7a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a408:	200002a4 	.word	0x200002a4
    a40c:	4001f508 	.word	0x4001f508
    a410:	4000f400 	.word	0x4000f400

0000a414 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a414:	b510      	push	{r4, lr}
    a416:	2002      	movs	r0, #2
    a418:	f000 f9c4 	bl	a7a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a41c:	4904      	ldr	r1, [pc, #16]	; (a430 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a41e:	2001      	movs	r0, #1
    a420:	7008      	strb	r0, [r1, #0]
    a422:	f000 f859 	bl	a4d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a426:	4903      	ldr	r1, [pc, #12]	; (a434 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a428:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a42c:	6008      	str	r0, [r1, #0]
    a42e:	bd10      	pop	{r4, pc}
    a430:	200002a4 	.word	0x200002a4
    a434:	4001f504 	.word	0x4001f504

0000a438 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a438:	4803      	ldr	r0, [pc, #12]	; (a448 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a43a:	2100      	movs	r1, #0
    a43c:	7001      	strb	r1, [r0, #0]
    a43e:	7041      	strb	r1, [r0, #1]
    a440:	2110      	movs	r1, #16
    a442:	7081      	strb	r1, [r0, #2]
    a444:	4770      	bx	lr
    a446:	0000      	.short	0x0000
    a448:	200002a4 	.word	0x200002a4

0000a44c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a44c:	4807      	ldr	r0, [pc, #28]	; (a46c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a44e:	b510      	push	{r4, lr}
    a450:	7801      	ldrb	r1, [r0, #0]
    a452:	b141      	cbz	r1, a466 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a454:	f000 f832 	bl	a4bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a458:	b118      	cbz	r0, a462 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a45a:	4805      	ldr	r0, [pc, #20]	; (a470 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a45c:	6800      	ldr	r0, [r0, #0]
    a45e:	b2c0      	uxtb	r0, r0
    a460:	bd10      	pop	{r4, pc}
    a462:	2010      	movs	r0, #16
    a464:	bd10      	pop	{r4, pc}
    a466:	7880      	ldrb	r0, [r0, #2]
    a468:	bd10      	pop	{r4, pc}
    a46a:	0000      	.short	0x0000
    a46c:	200002a4 	.word	0x200002a4
    a470:	4000f400 	.word	0x4000f400

0000a474 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a474:	4808      	ldr	r0, [pc, #32]	; (a498 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a476:	b510      	push	{r4, lr}
    a478:	7801      	ldrb	r1, [r0, #0]
    a47a:	b159      	cbz	r1, a494 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a47c:	4807      	ldr	r0, [pc, #28]	; (a49c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a47e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a482:	b128      	cbz	r0, a490 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a484:	f000 f80c 	bl	a4a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a488:	2800      	cmp	r0, #0
    a48a:	d000      	beq.n	a48e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a48c:	2001      	movs	r0, #1
    a48e:	bd10      	pop	{r4, pc}
    a490:	2002      	movs	r0, #2
    a492:	bd10      	pop	{r4, pc}
    a494:	7840      	ldrb	r0, [r0, #1]
    a496:	bd10      	pop	{r4, pc}
    a498:	200002a4 	.word	0x200002a4
    a49c:	4000f000 	.word	0x4000f000
    a4a0:	4805      	ldr	r0, [pc, #20]	; (a4b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a4a2:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a4a6:	b111      	cbz	r1, a4ae <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a4a8:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a4ac:	b108      	cbz	r0, a4b2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a4ae:	2000      	movs	r0, #0
    a4b0:	4770      	bx	lr
    a4b2:	2001      	movs	r0, #1
    a4b4:	4770      	bx	lr
    a4b6:	0000      	.short	0x0000
    a4b8:	4000f000 	.word	0x4000f000
    a4bc:	4805      	ldr	r0, [pc, #20]	; (a4d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a4be:	b510      	push	{r4, lr}
    a4c0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a4c4:	b120      	cbz	r0, a4d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a4c6:	f7ff ffeb 	bl	a4a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a4ca:	b108      	cbz	r0, a4d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a4cc:	2001      	movs	r0, #1
    a4ce:	bd10      	pop	{r4, pc}
    a4d0:	2000      	movs	r0, #0
    a4d2:	bd10      	pop	{r4, pc}
    a4d4:	4000f000 	.word	0x4000f000
    a4d8:	4804      	ldr	r0, [pc, #16]	; (a4ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a4da:	2100      	movs	r1, #0
    a4dc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a4e0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a4e4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a4e8:	4770      	bx	lr
    a4ea:	0000      	.short	0x0000
    a4ec:	4000f000 	.word	0x4000f000

0000a4f0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a4f0:	4a08      	ldr	r2, [pc, #32]	; (a514 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a4f2:	b510      	push	{r4, lr}
    a4f4:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a4f8:	4907      	ldr	r1, [pc, #28]	; (a518 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a4fa:	4610      	mov	r0, r2
    a4fc:	f7f9 fac0 	bl	3a80 <mpsl_fem_lna_configuration_set>
    a500:	2800      	cmp	r0, #0
    a502:	d005      	beq.n	a510 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a504:	1c40      	adds	r0, r0, #1
    a506:	d003      	beq.n	a510 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a508:	217d      	movs	r1, #125	; 0x7d
    a50a:	2040      	movs	r0, #64	; 0x40
    a50c:	f7f9 fbe8 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a510:	bd10      	pop	{r4, pc}
    a512:	0000      	.short	0x0000
    a514:	20000258 	.word	0x20000258
    a518:	0000a548 	.word	0x0000a548

0000a51c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a51c:	4a08      	ldr	r2, [pc, #32]	; (a540 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a51e:	b510      	push	{r4, lr}
    a520:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a524:	4907      	ldr	r1, [pc, #28]	; (a544 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a526:	4610      	mov	r0, r2
    a528:	f7f9 fab6 	bl	3a98 <mpsl_fem_pa_configuration_set>
    a52c:	2800      	cmp	r0, #0
    a52e:	d005      	beq.n	a53c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a530:	1c40      	adds	r0, r0, #1
    a532:	d003      	beq.n	a53c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a534:	2172      	movs	r1, #114	; 0x72
    a536:	2040      	movs	r0, #64	; 0x40
    a538:	f7f9 fbd2 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a53c:	bd10      	pop	{r4, pc}
    a53e:	0000      	.short	0x0000
    a540:	20000258 	.word	0x20000258
    a544:	0000a548 	.word	0x0000a548
    a548:	00000001 	.word	0x00000001
    a54c:	40001110 	.word	0x40001110
	...

0000a560 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    a560:	4a07      	ldr	r2, [pc, #28]	; (a580 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    a562:	b510      	push	{r4, lr}
    a564:	7853      	ldrb	r3, [r2, #1]
    a566:	b133      	cbz	r3, a576 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    a568:	4b06      	ldr	r3, [pc, #24]	; (a584 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    a56a:	6019      	str	r1, [r3, #0]
    a56c:	1d19      	adds	r1, r3, #4
    a56e:	6008      	str	r0, [r1, #0]
    a570:	2001      	movs	r0, #1
    a572:	7090      	strb	r0, [r2, #2]
    a574:	bd10      	pop	{r4, pc}
    a576:	21ba      	movs	r1, #186	; 0xba
    a578:	203c      	movs	r0, #60	; 0x3c
    a57a:	f7f9 fbb1 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a57e:	0000      	.short	0x0000
    a580:	200002a7 	.word	0x200002a7
    a584:	4000f50c 	.word	0x4000f50c

0000a588 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    a588:	4809      	ldr	r0, [pc, #36]	; (a5b0 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    a58a:	b510      	push	{r4, lr}
    a58c:	7801      	ldrb	r1, [r0, #0]
    a58e:	b151      	cbz	r1, a5a6 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    a590:	7880      	ldrb	r0, [r0, #2]
    a592:	b140      	cbz	r0, a5a6 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    a594:	4907      	ldr	r1, [pc, #28]	; (a5b4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    a596:	2000      	movs	r0, #0
    a598:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    a59c:	4906      	ldr	r1, [pc, #24]	; (a5b8 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    a59e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    a5a2:	6008      	str	r0, [r1, #0]
    a5a4:	bd10      	pop	{r4, pc}
    a5a6:	21e1      	movs	r1, #225	; 0xe1
    a5a8:	203c      	movs	r0, #60	; 0x3c
    a5aa:	f7f9 fb99 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5ae:	0000      	.short	0x0000
    a5b0:	200002a7 	.word	0x200002a7
    a5b4:	4000f000 	.word	0x4000f000
    a5b8:	4001f504 	.word	0x4001f504

0000a5bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a5bc:	b570      	push	{r4, r5, r6, lr}
    a5be:	4c0b      	ldr	r4, [pc, #44]	; (a5ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a5c0:	2500      	movs	r5, #0
    a5c2:	7820      	ldrb	r0, [r4, #0]
    a5c4:	b158      	cbz	r0, a5de <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a5c6:	f000 f8e5 	bl	a794 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a5ca:	4809      	ldr	r0, [pc, #36]	; (a5f0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a5cc:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a5d0:	b118      	cbz	r0, a5da <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    a5d2:	4808      	ldr	r0, [pc, #32]	; (a5f4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a5d4:	6800      	ldr	r0, [r0, #0]
    a5d6:	70e0      	strb	r0, [r4, #3]
    a5d8:	e000      	b.n	a5dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a5da:	70e5      	strb	r5, [r4, #3]
    a5dc:	7025      	strb	r5, [r4, #0]
    a5de:	2000      	movs	r0, #0
    a5e0:	f000 f8e0 	bl	a7a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a5e4:	7065      	strb	r5, [r4, #1]
    a5e6:	70a5      	strb	r5, [r4, #2]
    a5e8:	bd70      	pop	{r4, r5, r6, pc}
    a5ea:	0000      	.short	0x0000
    a5ec:	200002a7 	.word	0x200002a7
    a5f0:	4000f000 	.word	0x4000f000
    a5f4:	4000f400 	.word	0x4000f400

0000a5f8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    a5f8:	480d      	ldr	r0, [pc, #52]	; (a630 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    a5fa:	b510      	push	{r4, lr}
    a5fc:	7801      	ldrb	r1, [r0, #0]
    a5fe:	b191      	cbz	r1, a626 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    a600:	7880      	ldrb	r0, [r0, #2]
    a602:	b180      	cbz	r0, a626 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    a604:	490b      	ldr	r1, [pc, #44]	; (a634 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    a606:	2000      	movs	r0, #0
    a608:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    a60c:	4a0a      	ldr	r2, [pc, #40]	; (a638 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    a60e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    a612:	6010      	str	r0, [r2, #0]
    a614:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    a618:	2a01      	cmp	r2, #1
    a61a:	d103      	bne.n	a624 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    a61c:	604a      	str	r2, [r1, #4]
    a61e:	4906      	ldr	r1, [pc, #24]	; (a638 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    a620:	1d09      	adds	r1, r1, #4
    a622:	6008      	str	r0, [r1, #0]
    a624:	bd10      	pop	{r4, pc}
    a626:	21d1      	movs	r1, #209	; 0xd1
    a628:	203c      	movs	r0, #60	; 0x3c
    a62a:	f7f9 fb59 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a62e:	0000      	.short	0x0000
    a630:	200002a7 	.word	0x200002a7
    a634:	4000f000 	.word	0x4000f000
    a638:	4001f504 	.word	0x4001f504

0000a63c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a63c:	4803      	ldr	r0, [pc, #12]	; (a64c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    a63e:	2100      	movs	r1, #0
    a640:	7001      	strb	r1, [r0, #0]
    a642:	7041      	strb	r1, [r0, #1]
    a644:	7081      	strb	r1, [r0, #2]
    a646:	70c1      	strb	r1, [r0, #3]
    a648:	4770      	bx	lr
    a64a:	0000      	.short	0x0000
    a64c:	200002a7 	.word	0x200002a7

0000a650 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a654:	4605      	mov	r5, r0
    a656:	461c      	mov	r4, r3
    a658:	4690      	mov	r8, r2
    a65a:	460f      	mov	r7, r1
    a65c:	2001      	movs	r0, #1
    a65e:	f000 f8a1 	bl	a7a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a662:	4e12      	ldr	r6, [pc, #72]	; (a6ac <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    a664:	4812      	ldr	r0, [pc, #72]	; (a6b0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a666:	7134      	strb	r4, [r6, #4]
    a668:	6007      	str	r7, [r0, #0]
    a66a:	4911      	ldr	r1, [pc, #68]	; (a6b0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a66c:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    a670:	1f09      	subs	r1, r1, #4
    a672:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a676:	6008      	str	r0, [r1, #0]
    a678:	f001 f92e 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a67c:	b938      	cbnz	r0, a68e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    a67e:	480c      	ldr	r0, [pc, #48]	; (a6b0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a680:	3010      	adds	r0, #16
    a682:	6801      	ldr	r1, [r0, #0]
    a684:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a688:	ea41 0108 	orr.w	r1, r1, r8
    a68c:	6001      	str	r1, [r0, #0]
    a68e:	f000 f881 	bl	a794 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a692:	b93d      	cbnz	r5, a6a4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    a694:	4808      	ldr	r0, [pc, #32]	; (a6b8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    a696:	4a07      	ldr	r2, [pc, #28]	; (a6b4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a698:	4906      	ldr	r1, [pc, #24]	; (a6b4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a69a:	3afc      	subs	r2, #252	; 0xfc
    a69c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    a6a0:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    a6a4:	2001      	movs	r0, #1
    a6a6:	7070      	strb	r0, [r6, #1]
    a6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6ac:	200002a7 	.word	0x200002a7
    a6b0:	4000f508 	.word	0x4000f508
    a6b4:	4000f100 	.word	0x4000f100
    a6b8:	4001f088 	.word	0x4001f088

0000a6bc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    a6bc:	4808      	ldr	r0, [pc, #32]	; (a6e0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    a6be:	b510      	push	{r4, lr}
    a6c0:	7841      	ldrb	r1, [r0, #1]
    a6c2:	b149      	cbz	r1, a6d8 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    a6c4:	2101      	movs	r1, #1
    a6c6:	7001      	strb	r1, [r0, #0]
    a6c8:	4806      	ldr	r0, [pc, #24]	; (a6e4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    a6ca:	2200      	movs	r2, #0
    a6cc:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    a6d0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    a6d4:	6001      	str	r1, [r0, #0]
    a6d6:	bd10      	pop	{r4, pc}
    a6d8:	21c5      	movs	r1, #197	; 0xc5
    a6da:	203c      	movs	r0, #60	; 0x3c
    a6dc:	f7f9 fb00 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6e0:	200002a7 	.word	0x200002a7
    a6e4:	4000f000 	.word	0x4000f000

0000a6e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a6e8:	4806      	ldr	r0, [pc, #24]	; (a704 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a6ea:	7801      	ldrb	r1, [r0, #0]
    a6ec:	b141      	cbz	r1, a700 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a6ee:	4806      	ldr	r0, [pc, #24]	; (a708 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a6f0:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a6f4:	2800      	cmp	r0, #0
    a6f6:	d002      	beq.n	a6fe <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a6f8:	4804      	ldr	r0, [pc, #16]	; (a70c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a6fa:	6800      	ldr	r0, [r0, #0]
    a6fc:	b2c0      	uxtb	r0, r0
    a6fe:	4770      	bx	lr
    a700:	78c0      	ldrb	r0, [r0, #3]
    a702:	4770      	bx	lr
    a704:	200002a7 	.word	0x200002a7
    a708:	4000f000 	.word	0x4000f000
    a70c:	4000f400 	.word	0x4000f400

0000a710 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a710:	4901      	ldr	r1, [pc, #4]	; (a718 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a712:	2001      	movs	r0, #1
    a714:	6088      	str	r0, [r1, #8]
    a716:	4770      	bx	lr
    a718:	4000f000 	.word	0x4000f000

0000a71c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a720:	2800      	cmp	r0, #0
    a722:	d02e      	beq.n	a782 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a724:	4818      	ldr	r0, [pc, #96]	; (a788 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a726:	7800      	ldrb	r0, [r0, #0]
    a728:	b1b0      	cbz	r0, a758 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a72a:	4d18      	ldr	r5, [pc, #96]	; (a78c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a72c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a730:	2800      	cmp	r0, #0
    a732:	d126      	bne.n	a782 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a734:	2702      	movs	r7, #2
    a736:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a73a:	4c15      	ldr	r4, [pc, #84]	; (a790 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a73c:	6820      	ldr	r0, [r4, #0]
    a73e:	43c0      	mvns	r0, r0
    a740:	f340 1600 	sbfx	r6, r0, #4, #1
    a744:	6820      	ldr	r0, [r4, #0]
    a746:	f040 0010 	orr.w	r0, r0, #16
    a74a:	6020      	str	r0, [r4, #0]
    a74c:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a750:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a754:	1c76      	adds	r6, r6, #1
    a756:	e009      	b.n	a76c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    a758:	f240 1153 	movw	r1, #339	; 0x153
    a75c:	203c      	movs	r0, #60	; 0x3c
    a75e:	f7f9 fabf 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a762:	bf00      	nop
    a764:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a768:	f7f9 f934 	bl	39d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a76c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a770:	2800      	cmp	r0, #0
    a772:	d0f7      	beq.n	a764 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    a774:	b91e      	cbnz	r6, a77e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a776:	6820      	ldr	r0, [r4, #0]
    a778:	f020 0010 	bic.w	r0, r0, #16
    a77c:	6020      	str	r0, [r4, #0]
    a77e:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a786:	0000      	.short	0x0000
    a788:	200002a7 	.word	0x200002a7
    a78c:	4000f000 	.word	0x4000f000
    a790:	e000ed10 	.word	0xe000ed10
    a794:	4902      	ldr	r1, [pc, #8]	; (a7a0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    a796:	4801      	ldr	r0, [pc, #4]	; (a79c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    a798:	6008      	str	r0, [r1, #0]
    a79a:	4770      	bx	lr
    a79c:	02020000 	.word	0x02020000
    a7a0:	4001f508 	.word	0x4001f508

0000a7a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a7a4:	b510      	push	{r4, lr}
    a7a6:	4604      	mov	r4, r0
    a7a8:	f000 f822 	bl	a7f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a7ac:	2c00      	cmp	r4, #0
    a7ae:	d017      	beq.n	a7e0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a7b0:	4a0c      	ldr	r2, [pc, #48]	; (a7e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a7b2:	480c      	ldr	r0, [pc, #48]	; (a7e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a7b4:	490c      	ldr	r1, [pc, #48]	; (a7e8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a7b6:	3214      	adds	r2, #20
    a7b8:	4b0c      	ldr	r3, [pc, #48]	; (a7ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a7ba:	2c01      	cmp	r4, #1
    a7bc:	d005      	beq.n	a7ca <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a7be:	2c02      	cmp	r4, #2
    a7c0:	d008      	beq.n	a7d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a7c2:	2183      	movs	r1, #131	; 0x83
    a7c4:	203d      	movs	r0, #61	; 0x3d
    a7c6:	f7f9 fa8b 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7ca:	2402      	movs	r4, #2
    a7cc:	6004      	str	r4, [r0, #0]
    a7ce:	6011      	str	r1, [r2, #0]
    a7d0:	0620      	lsls	r0, r4, #24
    a7d2:	e004      	b.n	a7de <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a7d4:	2403      	movs	r4, #3
    a7d6:	6004      	str	r4, [r0, #0]
    a7d8:	6011      	str	r1, [r2, #0]
    a7da:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a7de:	6018      	str	r0, [r3, #0]
    a7e0:	bd10      	pop	{r4, pc}
    a7e2:	0000      	.short	0x0000
    a7e4:	4000f500 	.word	0x4000f500
    a7e8:	2000144b 	.word	0x2000144b
    a7ec:	4001f504 	.word	0x4001f504
    a7f0:	4804      	ldr	r0, [pc, #16]	; (a804 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a7f2:	2100      	movs	r1, #0
    a7f4:	6001      	str	r1, [r0, #0]
    a7f6:	6001      	str	r1, [r0, #0]
    a7f8:	4903      	ldr	r1, [pc, #12]	; (a808 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a7fa:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a7fe:	6008      	str	r0, [r1, #0]
    a800:	4770      	bx	lr
    a802:	0000      	.short	0x0000
    a804:	4000f500 	.word	0x4000f500
    a808:	4001f508 	.word	0x4001f508

0000a80c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a80c:	4805      	ldr	r0, [pc, #20]	; (a824 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a80e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a812:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a816:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a81a:	2100      	movs	r1, #0
    a81c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    a820:	4770      	bx	lr
    a822:	0000      	.short	0x0000
    a824:	40001000 	.word	0x40001000

0000a828 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a828:	4904      	ldr	r1, [pc, #16]	; (a83c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a82a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    a82e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    a832:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    a836:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    a83a:	4770      	bx	lr
    a83c:	40001000 	.word	0x40001000

0000a840 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    a840:	4801      	ldr	r0, [pc, #4]	; (a848 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    a842:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    a846:	4770      	bx	lr
    a848:	20000f04 	.word	0x20000f04

0000a84c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a84e:	4c23      	ldr	r4, [pc, #140]	; (a8dc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    a850:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a854:	f010 0f10 	tst.w	r0, #16
    a858:	d001      	beq.n	a85e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    a85a:	2701      	movs	r7, #1
    a85c:	e000      	b.n	a860 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    a85e:	2700      	movs	r7, #0
    a860:	2010      	movs	r0, #16
    a862:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    a866:	2002      	movs	r0, #2
    a868:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a86c:	481c      	ldr	r0, [pc, #112]	; (a8e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    a86e:	2500      	movs	r5, #0
    a870:	491d      	ldr	r1, [pc, #116]	; (a8e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    a872:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    a876:	481b      	ldr	r0, [pc, #108]	; (a8e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    a878:	6008      	str	r0, [r1, #0]
    a87a:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    a87e:	f44f 7688 	mov.w	r6, #272	; 0x110
    a882:	f010 0fff 	tst.w	r0, #255	; 0xff
    a886:	d018      	beq.n	a8ba <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    a888:	20ff      	movs	r0, #255	; 0xff
    a88a:	f88d 0000 	strb.w	r0, [sp]
    a88e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a892:	2001      	movs	r0, #1
    a894:	6120      	str	r0, [r4, #16]
    a896:	e004      	b.n	a8a2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    a898:	f89d 0000 	ldrb.w	r0, [sp]
    a89c:	1e40      	subs	r0, r0, #1
    a89e:	f88d 0000 	strb.w	r0, [sp]
    a8a2:	f89d 0000 	ldrb.w	r0, [sp]
    a8a6:	b128      	cbz	r0, a8b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    a8a8:	4631      	mov	r1, r6
    a8aa:	4620      	mov	r0, r4
    a8ac:	f004 ff51 	bl	f752 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    a8b0:	2800      	cmp	r0, #0
    a8b2:	d0f1      	beq.n	a898 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    a8b4:	f89d 0000 	ldrb.w	r0, [sp]
    a8b8:	b158      	cbz	r0, a8d2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    a8ba:	f000 fcdb 	bl	b274 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    a8be:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a8c2:	f000 fe57 	bl	b574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    a8c6:	2f00      	cmp	r7, #0
    a8c8:	d002      	beq.n	a8d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    a8ca:	2010      	movs	r0, #16
    a8cc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    a8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8d2:	f240 718f 	movw	r1, #1935	; 0x78f
    a8d6:	203e      	movs	r0, #62	; 0x3e
    a8d8:	f7f9 fa02 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8dc:	40001000 	.word	0x40001000
    a8e0:	20000f04 	.word	0x20000f04
    a8e4:	0c0e0000 	.word	0x0c0e0000
    a8e8:	4001f508 	.word	0x4001f508

0000a8ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    a8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8f0:	4d20      	ldr	r5, [pc, #128]	; (a974 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    a8f2:	4607      	mov	r7, r0
    a8f4:	4688      	mov	r8, r1
    a8f6:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    a8fa:	07c1      	lsls	r1, r0, #31
    a8fc:	d018      	beq.n	a930 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    a8fe:	4a1e      	ldr	r2, [pc, #120]	; (a978 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    a900:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    a904:	6011      	str	r1, [r2, #0]
    a906:	4c1d      	ldr	r4, [pc, #116]	; (a97c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    a908:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    a90c:	f041 0101 	orr.w	r1, r1, #1
    a910:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    a914:	f040 0002 	orr.w	r0, r0, #2
    a918:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    a91c:	4640      	mov	r0, r8
    a91e:	f000 fe8d 	bl	b63c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a922:	f000 fc45 	bl	b1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    a926:	2601      	movs	r6, #1
    a928:	b13f      	cbz	r7, a93a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    a92a:	2f01      	cmp	r7, #1
    a92c:	d00e      	beq.n	a94c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    a92e:	e016      	b.n	a95e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a930:	f240 611a 	movw	r1, #1562	; 0x61a
    a934:	203e      	movs	r0, #62	; 0x3e
    a936:	f7f9 f9d3 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a93a:	4640      	mov	r0, r8
    a93c:	f000 fc68 	bl	b210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    a940:	4640      	mov	r0, r8
    a942:	f000 fc19 	bl	b178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    a946:	726e      	strb	r6, [r5, #9]
    a948:	6026      	str	r6, [r4, #0]
    a94a:	e008      	b.n	a95e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a94c:	f000 fc88 	bl	b260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    a950:	f000 fdd6 	bl	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    a954:	2002      	movs	r0, #2
    a956:	7268      	strb	r0, [r5, #9]
    a958:	f000 fcfa 	bl	b350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    a95c:	6066      	str	r6, [r4, #4]
    a95e:	4808      	ldr	r0, [pc, #32]	; (a980 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a960:	64c6      	str	r6, [r0, #76]	; 0x4c
    a962:	4807      	ldr	r0, [pc, #28]	; (a980 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a964:	300c      	adds	r0, #12
    a966:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    a96a:	4638      	mov	r0, r7
    a96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a970:	f004 bed7 	b.w	f722 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a974:	20000f04 	.word	0x20000f04
    a978:	4001f504 	.word	0x4001f504
    a97c:	40001000 	.word	0x40001000
    a980:	40008000 	.word	0x40008000

0000a984 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    a984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a988:	4d35      	ldr	r5, [pc, #212]	; (aa60 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    a98a:	4606      	mov	r6, r0
    a98c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    a990:	4689      	mov	r9, r1
    a992:	6028      	str	r0, [r5, #0]
    a994:	4c33      	ldr	r4, [pc, #204]	; (aa64 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    a996:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    a99a:	f040 0002 	orr.w	r0, r0, #2
    a99e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    a9a2:	4608      	mov	r0, r1
    a9a4:	f000 fe4a 	bl	b63c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a9a8:	f000 fc02 	bl	b1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    a9ac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; aa68 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    a9b0:	2700      	movs	r7, #0
    a9b2:	b116      	cbz	r6, a9ba <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    a9b4:	2e01      	cmp	r6, #1
    a9b6:	d027      	beq.n	aa08 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    a9b8:	e03f      	b.n	aa3a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a9ba:	4648      	mov	r0, r9
    a9bc:	f000 fc28 	bl	b210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    a9c0:	79e0      	ldrb	r0, [r4, #7]
    a9c2:	2801      	cmp	r0, #1
    a9c4:	d105      	bne.n	a9d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    a9c6:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a9ca:	f041 0108 	orr.w	r1, r1, #8
    a9ce:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a9d2:	4648      	mov	r0, r9
    a9d4:	f000 fbd0 	bl	b178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    a9d8:	2001      	movs	r0, #1
    a9da:	7260      	strb	r0, [r4, #9]
    a9dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a9de:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    a9e2:	62a0      	str	r0, [r4, #40]	; 0x28
    a9e4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a9e8:	6028      	str	r0, [r5, #0]
    a9ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a9ee:	f1b9 0f02 	cmp.w	r9, #2
    a9f2:	d007      	beq.n	aa04 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    a9f4:	f640 0034 	movw	r0, #2100	; 0x834
    a9f8:	f649 72ec 	movw	r2, #40940	; 0x9fec
    a9fc:	4410      	add	r0, r2
    a9fe:	fbb0 f7f1 	udiv	r7, r0, r1
    aa02:	e01a      	b.n	aa3a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    aa04:	4608      	mov	r0, r1
    aa06:	e7f7      	b.n	a9f8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    aa08:	f000 fc2a 	bl	b260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    aa0c:	f000 fd78 	bl	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    aa10:	79e0      	ldrb	r0, [r4, #7]
    aa12:	2801      	cmp	r0, #1
    aa14:	d105      	bne.n	aa22 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    aa16:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    aa1a:	f041 0104 	orr.w	r1, r1, #4
    aa1e:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    aa22:	2002      	movs	r0, #2
    aa24:	7260      	strb	r0, [r4, #9]
    aa26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    aa28:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    aa2c:	62a0      	str	r0, [r4, #40]	; 0x28
    aa2e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    aa32:	6028      	str	r0, [r5, #0]
    aa34:	2729      	movs	r7, #41	; 0x29
    aa36:	f000 fc8b 	bl	b350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    aa3a:	f000 fc75 	bl	b328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    aa3e:	f000 fe25 	bl	b68c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    aa42:	6800      	ldr	r0, [r0, #0]
    aa44:	2801      	cmp	r0, #1
    aa46:	d006      	beq.n	aa56 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    aa48:	2100      	movs	r1, #0
    aa4a:	4630      	mov	r0, r6
    aa4c:	f004 fe69 	bl	f722 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    aa50:	4638      	mov	r0, r7
    aa52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa56:	f7ff fef9 	bl	a84c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    aa5a:	2000      	movs	r0, #0
    aa5c:	e7f9      	b.n	aa52 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    aa5e:	0000      	.short	0x0000
    aa60:	4001f504 	.word	0x4001f504
    aa64:	20000f04 	.word	0x20000f04
    aa68:	40001000 	.word	0x40001000

0000aa6c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    aa6c:	4a02      	ldr	r2, [pc, #8]	; (aa78 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    aa6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    aa70:	6003      	str	r3, [r0, #0]
    aa72:	6b50      	ldr	r0, [r2, #52]	; 0x34
    aa74:	6008      	str	r0, [r1, #0]
    aa76:	4770      	bx	lr
    aa78:	20000f04 	.word	0x20000f04

0000aa7c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    aa7c:	b510      	push	{r4, lr}
    aa7e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    aa80:	4901      	ldr	r1, [pc, #4]	; (aa88 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    aa82:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    aa86:	bd10      	pop	{r4, pc}
    aa88:	20000ef4 	.word	0x20000ef4

0000aa8c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    aa8c:	490f      	ldr	r1, [pc, #60]	; (aacc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    aa8e:	b510      	push	{r4, lr}
    aa90:	69ca      	ldr	r2, [r1, #28]
    aa92:	4282      	cmp	r2, r0
    aa94:	d302      	bcc.n	aa9c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    aa96:	f640 010a 	movw	r1, #2058	; 0x80a
    aa9a:	e00b      	b.n	aab4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    aa9c:	2201      	movs	r2, #1
    aa9e:	730a      	strb	r2, [r1, #12]
    aaa0:	6108      	str	r0, [r1, #16]
    aaa2:	490b      	ldr	r1, [pc, #44]	; (aad0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    aaa4:	644a      	str	r2, [r1, #68]	; 0x44
    aaa6:	1d0a      	adds	r2, r1, #4
    aaa8:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    aaac:	4283      	cmp	r3, r0
    aaae:	d304      	bcc.n	aaba <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    aab0:	f640 0113 	movw	r1, #2067	; 0x813
    aab4:	203e      	movs	r0, #62	; 0x3e
    aab6:	f7f9 f913 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaba:	2300      	movs	r3, #0
    aabc:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    aac0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    aac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aac8:	f000 bd28 	b.w	b51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    aacc:	20000f04 	.word	0x20000f04
    aad0:	40008000 	.word	0x40008000

0000aad4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    aad4:	b570      	push	{r4, r5, r6, lr}
    aad6:	4c11      	ldr	r4, [pc, #68]	; (ab1c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    aad8:	4606      	mov	r6, r0
    aada:	2002      	movs	r0, #2
    aadc:	7320      	strb	r0, [r4, #12]
    aade:	2596      	movs	r5, #150	; 0x96
    aae0:	f000 f86e 	bl	abc0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    aae4:	4602      	mov	r2, r0
    aae6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    aaea:	f894 1020 	ldrb.w	r1, [r4, #32]
    aaee:	2801      	cmp	r0, #1
    aaf0:	d00f      	beq.n	ab12 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    aaf2:	4628      	mov	r0, r5
    aaf4:	f004 fe37 	bl	f766 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    aaf8:	6120      	str	r0, [r4, #16]
    aafa:	4809      	ldr	r0, [pc, #36]	; (ab20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    aafc:	2100      	movs	r1, #0
    aafe:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    ab02:	6921      	ldr	r1, [r4, #16]
    ab04:	69e0      	ldr	r0, [r4, #28]
    ab06:	4408      	add	r0, r1
    ab08:	4905      	ldr	r1, [pc, #20]	; (ab20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    ab0a:	1d09      	adds	r1, r1, #4
    ab0c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ab10:	bd70      	pop	{r4, r5, r6, pc}
    ab12:	4633      	mov	r3, r6
    ab14:	4628      	mov	r0, r5
    ab16:	f004 fe42 	bl	f79e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ab1a:	e7ed      	b.n	aaf8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    ab1c:	20000f04 	.word	0x20000f04
    ab20:	40008000 	.word	0x40008000

0000ab24 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ab24:	b510      	push	{r4, lr}
    ab26:	f000 fef3 	bl	b910 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ab2a:	2800      	cmp	r0, #0
    ab2c:	d006      	beq.n	ab3c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    ab2e:	4804      	ldr	r0, [pc, #16]	; (ab40 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    ab30:	6801      	ldr	r1, [r0, #0]
    ab32:	f021 0101 	bic.w	r1, r1, #1
    ab36:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    ab3a:	6001      	str	r1, [r0, #0]
    ab3c:	bd10      	pop	{r4, pc}
    ab3e:	0000      	.short	0x0000
    ab40:	40001774 	.word	0x40001774

0000ab44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    ab44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab48:	2238      	movs	r2, #56	; 0x38
    ab4a:	2100      	movs	r1, #0
    ab4c:	4813      	ldr	r0, [pc, #76]	; (ab9c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    ab4e:	f000 ff8f 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ab52:	f000 fd0f 	bl	b574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    ab56:	f000 fe94 	bl	b882 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ab5a:	4d11      	ldr	r5, [pc, #68]	; (aba0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ab5c:	4e10      	ldr	r6, [pc, #64]	; (aba0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ab5e:	2400      	movs	r4, #0
    ab60:	4f0f      	ldr	r7, [pc, #60]	; (aba0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ab62:	3508      	adds	r5, #8
    ab64:	3610      	adds	r6, #16
    ab66:	b928      	cbnz	r0, ab74 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ab68:	f000 fea2 	bl	b8b0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ab6c:	b910      	cbnz	r0, ab74 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ab6e:	f000 fea9 	bl	b8c4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    ab72:	b108      	cbz	r0, ab78 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    ab74:	2224      	movs	r2, #36	; 0x24
    ab76:	e006      	b.n	ab86 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ab78:	f000 fee4 	bl	b944 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ab7c:	b910      	cbnz	r0, ab84 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    ab7e:	f000 fed7 	bl	b930 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    ab82:	b140      	cbz	r0, ab96 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    ab84:	2240      	movs	r2, #64	; 0x40
    ab86:	21ff      	movs	r1, #255	; 0xff
    ab88:	4638      	mov	r0, r7
    ab8a:	f000 ff71 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ab8e:	602c      	str	r4, [r5, #0]
    ab90:	6034      	str	r4, [r6, #0]
    ab92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab96:	2238      	movs	r2, #56	; 0x38
    ab98:	e7f5      	b.n	ab86 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ab9a:	0000      	.short	0x0000
    ab9c:	20000f04 	.word	0x20000f04
    aba0:	40000e00 	.word	0x40000e00

0000aba4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    aba4:	4805      	ldr	r0, [pc, #20]	; (abbc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    aba6:	b510      	push	{r4, lr}
    aba8:	69c0      	ldr	r0, [r0, #28]
    abaa:	2800      	cmp	r0, #0
    abac:	d104      	bne.n	abb8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    abae:	f240 11fb 	movw	r1, #507	; 0x1fb
    abb2:	203e      	movs	r0, #62	; 0x3e
    abb4:	f7f9 f894 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abb8:	bd10      	pop	{r4, pc}
    abba:	0000      	.short	0x0000
    abbc:	20000f04 	.word	0x20000f04

0000abc0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    abc0:	4814      	ldr	r0, [pc, #80]	; (ac14 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    abc2:	b510      	push	{r4, lr}
    abc4:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    abc8:	7a40      	ldrb	r0, [r0, #9]
    abca:	b141      	cbz	r1, abde <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    abcc:	2902      	cmp	r1, #2
    abce:	d00b      	beq.n	abe8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    abd0:	2802      	cmp	r0, #2
    abd2:	d009      	beq.n	abe8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    abd4:	2901      	cmp	r1, #1
    abd6:	d00b      	beq.n	abf0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    abd8:	2801      	cmp	r0, #1
    abda:	d009      	beq.n	abf0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    abdc:	e016      	b.n	ac0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    abde:	2800      	cmp	r0, #0
    abe0:	d1f6      	bne.n	abd0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    abe2:	f240 117d 	movw	r1, #381	; 0x17d
    abe6:	e00e      	b.n	ac06 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    abe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    abec:	f000 bc38 	b.w	b460 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    abf0:	4809      	ldr	r0, [pc, #36]	; (ac18 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    abf2:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    abf6:	f000 000f 	and.w	r0, r0, #15
    abfa:	2803      	cmp	r0, #3
    abfc:	d006      	beq.n	ac0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    abfe:	2804      	cmp	r0, #4
    ac00:	d006      	beq.n	ac10 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    ac02:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    ac06:	203e      	movs	r0, #62	; 0x3e
    ac08:	f7f9 f86a 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac0c:	2001      	movs	r0, #1
    ac0e:	bd10      	pop	{r4, pc}
    ac10:	2002      	movs	r0, #2
    ac12:	bd10      	pop	{r4, pc}
    ac14:	20000f04 	.word	0x20000f04
    ac18:	40001000 	.word	0x40001000

0000ac1c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ac1c:	4805      	ldr	r0, [pc, #20]	; (ac34 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    ac1e:	b510      	push	{r4, lr}
    ac20:	6980      	ldr	r0, [r0, #24]
    ac22:	2800      	cmp	r0, #0
    ac24:	d104      	bne.n	ac30 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    ac26:	f240 11f5 	movw	r1, #501	; 0x1f5
    ac2a:	203e      	movs	r0, #62	; 0x3e
    ac2c:	f7f9 f858 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac30:	bd10      	pop	{r4, pc}
    ac32:	0000      	.short	0x0000
    ac34:	20000f04 	.word	0x20000f04

0000ac38 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ac38:	b510      	push	{r4, lr}
    ac3a:	f000 fc7d 	bl	b538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    ac3e:	f7ff fe05 	bl	a84c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ac42:	f004 fd04 	bl	f64e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    ac46:	480f      	ldr	r0, [pc, #60]	; (ac84 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    ac48:	4a0f      	ldr	r2, [pc, #60]	; (ac88 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    ac4a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ac4c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    ac50:	6011      	str	r1, [r2, #0]
    ac52:	2400      	movs	r4, #0
    ac54:	6284      	str	r4, [r0, #40]	; 0x28
    ac56:	7304      	strb	r4, [r0, #12]
    ac58:	61c4      	str	r4, [r0, #28]
    ac5a:	6184      	str	r4, [r0, #24]
    ac5c:	f000 fc6c 	bl	b538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    ac60:	480a      	ldr	r0, [pc, #40]	; (ac8c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    ac62:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    ac66:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    ac6a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    ac6e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    ac72:	2001      	movs	r0, #1
    ac74:	f004 fd24 	bl	f6c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ac78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac7c:	2001      	movs	r0, #1
    ac7e:	f004 bd12 	b.w	f6a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ac82:	0000      	.short	0x0000
    ac84:	20000f04 	.word	0x20000f04
    ac88:	4001f508 	.word	0x4001f508
    ac8c:	40008000 	.word	0x40008000

0000ac90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    ac90:	b570      	push	{r4, r5, r6, lr}
    ac92:	2001      	movs	r0, #1
    ac94:	f004 fd14 	bl	f6c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ac98:	4c37      	ldr	r4, [pc, #220]	; (ad78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    ac9a:	2000      	movs	r0, #0
    ac9c:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    aca0:	2001      	movs	r0, #1
    aca2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    aca6:	f000 fe23 	bl	b8f0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    acaa:	4d34      	ldr	r5, [pc, #208]	; (ad7c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    acac:	b118      	cbz	r0, acb6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    acae:	6828      	ldr	r0, [r5, #0]
    acb0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    acb4:	6028      	str	r0, [r5, #0]
    acb6:	f000 fe0f 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    acba:	b128      	cbz	r0, acc8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    acbc:	6828      	ldr	r0, [r5, #0]
    acbe:	4930      	ldr	r1, [pc, #192]	; (ad80 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    acc0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    acc4:	4308      	orrs	r0, r1
    acc6:	6028      	str	r0, [r5, #0]
    acc8:	f000 fe22 	bl	b910 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    accc:	b138      	cbz	r0, acde <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    acce:	482b      	ldr	r0, [pc, #172]	; (ad7c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    acd0:	1d00      	adds	r0, r0, #4
    acd2:	6801      	ldr	r1, [r0, #0]
    acd4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    acd8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    acdc:	6001      	str	r1, [r0, #0]
    acde:	4927      	ldr	r1, [pc, #156]	; (ad7c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ace0:	4828      	ldr	r0, [pc, #160]	; (ad84 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ace2:	313c      	adds	r1, #60	; 0x3c
    ace4:	6008      	str	r0, [r1, #0]
    ace6:	f7f8 fee3 	bl	3ab0 <mpsl_fem_device_config_254_apply_get>
    acea:	b140      	cbz	r0, acfe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    acec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    acf0:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    acf4:	1c41      	adds	r1, r0, #1
    acf6:	d002      	beq.n	acfe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    acf8:	4920      	ldr	r1, [pc, #128]	; (ad7c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    acfa:	3110      	adds	r1, #16
    acfc:	6008      	str	r0, [r1, #0]
    acfe:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ad02:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ad04:	1c41      	adds	r1, r0, #1
    ad06:	d004      	beq.n	ad12 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    ad08:	491f      	ldr	r1, [pc, #124]	; (ad88 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ad0a:	680a      	ldr	r2, [r1, #0]
    ad0c:	f360 4217 	bfi	r2, r0, #16, #8
    ad10:	600a      	str	r2, [r1, #0]
    ad12:	f240 1103 	movw	r1, #259	; 0x103
    ad16:	f240 605b 	movw	r0, #1627	; 0x65b
    ad1a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    ad1e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    ad22:	2001      	movs	r0, #1
    ad24:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    ad28:	f000 fc88 	bl	b63c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ad2c:	f240 1001 	movw	r0, #257	; 0x101
    ad30:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    ad34:	2002      	movs	r0, #2
    ad36:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ad3a:	4915      	ldr	r1, [pc, #84]	; (ad90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ad3c:	4813      	ldr	r0, [pc, #76]	; (ad8c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ad3e:	6008      	str	r0, [r1, #0]
    ad40:	4914      	ldr	r1, [pc, #80]	; (ad94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ad42:	2000      	movs	r0, #0
    ad44:	4d14      	ldr	r5, [pc, #80]	; (ad98 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ad46:	8608      	strh	r0, [r1, #48]	; 0x30
    ad48:	3110      	adds	r1, #16
    ad4a:	61c8      	str	r0, [r1, #28]
    ad4c:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    ad50:	7028      	strb	r0, [r5, #0]
    ad52:	2001      	movs	r0, #1
    ad54:	f004 fca7 	bl	f6a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ad58:	2010      	movs	r0, #16
    ad5a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    ad5e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ad62:	2002      	movs	r0, #2
    ad64:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ad68:	6868      	ldr	r0, [r5, #4]
    ad6a:	2800      	cmp	r0, #0
    ad6c:	d002      	beq.n	ad74 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    ad6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ad72:	4700      	bx	r0
    ad74:	bd70      	pop	{r4, r5, r6, pc}
    ad76:	0000      	.short	0x0000
    ad78:	40001000 	.word	0x40001000
    ad7c:	4000173c 	.word	0x4000173c
    ad80:	80000096 	.word	0x80000096
    ad84:	8900002c 	.word	0x8900002c
    ad88:	4000158c 	.word	0x4000158c
    ad8c:	0c0e0000 	.word	0x0c0e0000
    ad90:	4001f508 	.word	0x4001f508
    ad94:	20000ef4 	.word	0x20000ef4
    ad98:	20000270 	.word	0x20000270

0000ad9c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    ad9c:	4901      	ldr	r1, [pc, #4]	; (ada4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    ad9e:	7508      	strb	r0, [r1, #20]
    ada0:	4770      	bx	lr
    ada2:	0000      	.short	0x0000
    ada4:	20000f04 	.word	0x20000f04

0000ada8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    ada8:	4905      	ldr	r1, [pc, #20]	; (adc0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    adaa:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    adae:	4805      	ldr	r0, [pc, #20]	; (adc4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    adb0:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    adb4:	f041 0101 	orr.w	r1, r1, #1
    adb8:	7001      	strb	r1, [r0, #0]
    adba:	f000 ba7b 	b.w	b2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    adbe:	0000      	.short	0x0000
    adc0:	40001000 	.word	0x40001000
    adc4:	20000f04 	.word	0x20000f04

0000adc8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    adc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    adcc:	4e36      	ldr	r6, [pc, #216]	; (aea8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    adce:	4607      	mov	r7, r0
    add0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    add4:	4689      	mov	r9, r1
    add6:	4614      	mov	r4, r2
    add8:	6030      	str	r0, [r6, #0]
    adda:	4610      	mov	r0, r2
    addc:	f000 fc2e 	bl	b63c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ade0:	f000 f9e6 	bl	b1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    ade4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; aeac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    ade8:	4d31      	ldr	r5, [pc, #196]	; (aeb0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    adea:	f04f 0801 	mov.w	r8, #1
    adee:	b127      	cbz	r7, adfa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    adf0:	2f01      	cmp	r7, #1
    adf2:	d01d      	beq.n	ae30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    adf4:	f240 710f 	movw	r1, #1807	; 0x70f
    adf8:	e04c      	b.n	ae94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    adfa:	4620      	mov	r0, r4
    adfc:	f000 fa08 	bl	b210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    ae00:	4620      	mov	r0, r4
    ae02:	f000 f9b9 	bl	b178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    ae06:	2c02      	cmp	r4, #2
    ae08:	d00f      	beq.n	ae2a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    ae0a:	f640 0034 	movw	r0, #2100	; 0x834
    ae0e:	bf00      	nop
    ae10:	f649 51f8 	movw	r1, #40440	; 0x9df8
    ae14:	4401      	add	r1, r0
    ae16:	4648      	mov	r0, r9
    ae18:	f000 fbb4 	bl	b584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    ae1c:	4604      	mov	r4, r0
    ae1e:	4650      	mov	r0, sl
    ae20:	f000 fb9c 	bl	b55c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ae24:	f885 8009 	strb.w	r8, [r5, #9]
    ae28:	e014      	b.n	ae54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    ae2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ae2e:	e7ef      	b.n	ae10 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    ae30:	f000 fa16 	bl	b260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    ae34:	f000 fb64 	bl	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    ae38:	f000 fa8a 	bl	b350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    ae3c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ae40:	4648      	mov	r0, r9
    ae42:	f000 fb9f 	bl	b584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    ae46:	4604      	mov	r4, r0
    ae48:	4818      	ldr	r0, [pc, #96]	; (aeac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    ae4a:	1d00      	adds	r0, r0, #4
    ae4c:	f000 fb86 	bl	b55c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ae50:	2002      	movs	r0, #2
    ae52:	7268      	strb	r0, [r5, #9]
    ae54:	f8df 905c 	ldr.w	r9, [pc, #92]	; aeb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    ae58:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    ae5c:	4917      	ldr	r1, [pc, #92]	; (aebc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ae5e:	4816      	ldr	r0, [pc, #88]	; (aeb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ae60:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ae64:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    ae66:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ae6a:	62a8      	str	r0, [r5, #40]	; 0x28
    ae6c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ae70:	6030      	str	r0, [r6, #0]
    ae72:	2010      	movs	r0, #16
    ae74:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    ae78:	03c0      	lsls	r0, r0, #15
    ae7a:	6030      	str	r0, [r6, #0]
    ae7c:	f000 fa54 	bl	b328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    ae80:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    ae84:	480b      	ldr	r0, [pc, #44]	; (aeb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ae86:	300c      	adds	r0, #12
    ae88:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    ae8c:	42a0      	cmp	r0, r4
    ae8e:	d304      	bcc.n	ae9a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    ae90:	f240 7136 	movw	r1, #1846	; 0x736
    ae94:	203e      	movs	r0, #62	; 0x3e
    ae96:	f7f8 ff23 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae9a:	4621      	mov	r1, r4
    ae9c:	4638      	mov	r0, r7
    ae9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aea2:	f004 bc3e 	b.w	f722 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    aea6:	0000      	.short	0x0000
    aea8:	4001f504 	.word	0x4001f504
    aeac:	40001000 	.word	0x40001000
    aeb0:	20000f04 	.word	0x20000f04
    aeb4:	40008000 	.word	0x40008000
    aeb8:	40008140 	.word	0x40008140
    aebc:	4001f098 	.word	0x4001f098

0000aec0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    aec0:	4b0d      	ldr	r3, [pc, #52]	; (aef8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    aec2:	b510      	push	{r4, lr}
    aec4:	71d8      	strb	r0, [r3, #7]
    aec6:	729a      	strb	r2, [r3, #10]
    aec8:	b151      	cbz	r1, aee0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    aeca:	2002      	movs	r0, #2
    aecc:	7218      	strb	r0, [r3, #8]
    aece:	2801      	cmp	r0, #1
    aed0:	d008      	beq.n	aee4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    aed2:	2802      	cmp	r0, #2
    aed4:	d00f      	beq.n	aef6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    aed6:	f640 1112 	movw	r1, #2322	; 0x912
    aeda:	203e      	movs	r0, #62	; 0x3e
    aedc:	f7f8 ff00 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aee0:	2001      	movs	r0, #1
    aee2:	e7f3      	b.n	aecc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    aee4:	7a58      	ldrb	r0, [r3, #9]
    aee6:	2802      	cmp	r0, #2
    aee8:	d105      	bne.n	aef6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    aeea:	f000 f9b9 	bl	b260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    aeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aef2:	f000 bb05 	b.w	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    aef6:	bd10      	pop	{r4, pc}
    aef8:	20000f04 	.word	0x20000f04

0000aefc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    aefc:	4902      	ldr	r1, [pc, #8]	; (af08 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    aefe:	2000      	movs	r0, #0
    af00:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    af04:	4770      	bx	lr
    af06:	0000      	.short	0x0000
    af08:	40008000 	.word	0x40008000

0000af0c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    af0c:	b538      	push	{r3, r4, r5, lr}
    af0e:	4c0b      	ldr	r4, [pc, #44]	; (af3c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    af10:	4605      	mov	r5, r0
    af12:	f44f 718e 	mov.w	r1, #284	; 0x11c
    af16:	4620      	mov	r0, r4
    af18:	f004 fc1b 	bl	f752 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    af1c:	2800      	cmp	r0, #0
    af1e:	d00c      	beq.n	af3a <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    af20:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    af24:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    af28:	4240      	negs	r0, r0
    af2a:	7028      	strb	r0, [r5, #0]
    af2c:	2000      	movs	r0, #0
    af2e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    af32:	4803      	ldr	r0, [pc, #12]	; (af40 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    af34:	6800      	ldr	r0, [r0, #0]
    af36:	9000      	str	r0, [sp, #0]
    af38:	2001      	movs	r0, #1
    af3a:	bd38      	pop	{r3, r4, r5, pc}
    af3c:	40001000 	.word	0x40001000
    af40:	4000111c 	.word	0x4000111c

0000af44 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    af44:	4903      	ldr	r1, [pc, #12]	; (af54 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    af46:	0e02      	lsrs	r2, r0, #24
    af48:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    af4c:	0200      	lsls	r0, r0, #8
    af4e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    af52:	4770      	bx	lr
    af54:	40001000 	.word	0x40001000

0000af58 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    af58:	6800      	ldr	r0, [r0, #0]
    af5a:	4903      	ldr	r1, [pc, #12]	; (af68 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    af5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af60:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    af64:	4770      	bx	lr
    af66:	0000      	.short	0x0000
    af68:	40001000 	.word	0x40001000

0000af6c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    af6c:	b510      	push	{r4, lr}
    af6e:	f000 fb41 	bl	b5f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    af72:	4807      	ldr	r0, [pc, #28]	; (af90 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    af74:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    af78:	b2c0      	uxtb	r0, r0
    af7a:	2803      	cmp	r0, #3
    af7c:	d001      	beq.n	af82 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    af7e:	280b      	cmp	r0, #11
    af80:	d104      	bne.n	af8c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    af82:	f44f 7121 	mov.w	r1, #644	; 0x284
    af86:	203e      	movs	r0, #62	; 0x3e
    af88:	f7f8 feaa 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af8c:	bd10      	pop	{r4, pc}
    af8e:	0000      	.short	0x0000
    af90:	40001000 	.word	0x40001000

0000af94 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    af94:	4901      	ldr	r1, [pc, #4]	; (af9c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    af96:	7548      	strb	r0, [r1, #21]
    af98:	4770      	bx	lr
    af9a:	0000      	.short	0x0000
    af9c:	20000f04 	.word	0x20000f04

0000afa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    afa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    afa4:	4853      	ldr	r0, [pc, #332]	; (b0f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    afa6:	f04f 0a01 	mov.w	sl, #1
    afaa:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    afae:	4851      	ldr	r0, [pc, #324]	; (b0f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    afb0:	300c      	adds	r0, #12
    afb2:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    afb6:	4850      	ldr	r0, [pc, #320]	; (b0f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    afb8:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    afbc:	4c4f      	ldr	r4, [pc, #316]	; (b0fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    afbe:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    afc2:	f000 f957 	bl	b274 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    afc6:	494e      	ldr	r1, [pc, #312]	; (b100 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    afc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    afca:	6008      	str	r0, [r1, #0]
    afcc:	f8df 9134 	ldr.w	r9, [pc, #308]	; b104 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    afd0:	2600      	movs	r6, #0
    afd2:	62a6      	str	r6, [r4, #40]	; 0x28
    afd4:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    afd8:	f240 121d 	movw	r2, #285	; 0x11d
    afdc:	4391      	bics	r1, r2
    afde:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    afe2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    afe6:	f000 f9c5 	bl	b374 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    afea:	4605      	mov	r5, r0
    afec:	4841      	ldr	r0, [pc, #260]	; (b0f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    afee:	3008      	adds	r0, #8
    aff0:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    aff4:	61e0      	str	r0, [r4, #28]
    aff6:	f7ff fde3 	bl	abc0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    affa:	f884 0020 	strb.w	r0, [r4, #32]
    affe:	7a60      	ldrb	r0, [r4, #9]
    b000:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    b004:	61a6      	str	r6, [r4, #24]
    b006:	4e40      	ldr	r6, [pc, #256]	; (b108 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    b008:	07a8      	lsls	r0, r5, #30
    b00a:	d502      	bpl.n	b012 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    b00c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b010:	61a0      	str	r0, [r4, #24]
    b012:	0728      	lsls	r0, r5, #28
    b014:	d502      	bpl.n	b01c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    b016:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b01a:	61a0      	str	r0, [r4, #24]
    b01c:	f04f 0800 	mov.w	r8, #0
    b020:	4639      	mov	r1, r7
    b022:	4628      	mov	r0, r5
    b024:	f000 fa32 	bl	b48c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    b028:	b918      	cbnz	r0, b032 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b02a:	f8c9 a010 	str.w	sl, [r9, #16]
    b02e:	f04f 0801 	mov.w	r8, #1
    b032:	4f32      	ldr	r7, [pc, #200]	; (b0fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    b034:	07e8      	lsls	r0, r5, #31
    b036:	f1a7 0710 	sub.w	r7, r7, #16
    b03a:	d002      	beq.n	b042 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    b03c:	6838      	ldr	r0, [r7, #0]
    b03e:	4780      	blx	r0
    b040:	e031      	b.n	b0a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    b042:	07a8      	lsls	r0, r5, #30
    b044:	d526      	bpl.n	b094 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    b046:	0768      	lsls	r0, r5, #29
    b048:	d41e      	bmi.n	b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b04a:	f000 fc61 	bl	b910 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b04e:	b9d8      	cbnz	r0, b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b050:	f000 fc4e 	bl	b8f0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b054:	b9c0      	cbnz	r0, b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b056:	482d      	ldr	r0, [pc, #180]	; (b10c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    b058:	6800      	ldr	r0, [r0, #0]
    b05a:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    b05e:	f3c0 6100 	ubfx	r1, r0, #24, #1
    b062:	f000 030f 	and.w	r3, r0, #15
    b066:	f3c0 1203 	ubfx	r2, r0, #4, #4
    b06a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b06e:	b159      	cbz	r1, b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b070:	b10b      	cbz	r3, b076 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    b072:	b102      	cbz	r2, b076 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    b074:	b940      	cbnz	r0, b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b076:	4825      	ldr	r0, [pc, #148]	; (b10c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    b078:	1d00      	adds	r0, r0, #4
    b07a:	6800      	ldr	r0, [r0, #0]
    b07c:	b120      	cbz	r0, b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b07e:	f1bc 0f03 	cmp.w	ip, #3
    b082:	d201      	bcs.n	b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b084:	f045 0504 	orr.w	r5, r5, #4
    b088:	f345 0080 	sbfx	r0, r5, #2, #1
    b08c:	4641      	mov	r1, r8
    b08e:	1c40      	adds	r0, r0, #1
    b090:	687a      	ldr	r2, [r7, #4]
    b092:	e007      	b.n	b0a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    b094:	f015 0f28 	tst.w	r5, #40	; 0x28
    b098:	d005      	beq.n	b0a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    b09a:	f345 1140 	sbfx	r1, r5, #5, #1
    b09e:	68ba      	ldr	r2, [r7, #8]
    b0a0:	4640      	mov	r0, r8
    b0a2:	1c49      	adds	r1, r1, #1
    b0a4:	4790      	blx	r2
    b0a6:	06e8      	lsls	r0, r5, #27
    b0a8:	d501      	bpl.n	b0ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    b0aa:	68f8      	ldr	r0, [r7, #12]
    b0ac:	4780      	blx	r0
    b0ae:	7a60      	ldrb	r0, [r4, #9]
    b0b0:	2802      	cmp	r0, #2
    b0b2:	d11c      	bne.n	b0ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    b0b4:	7b20      	ldrb	r0, [r4, #12]
    b0b6:	2800      	cmp	r0, #0
    b0b8:	d019      	beq.n	b0ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    b0ba:	2802      	cmp	r0, #2
    b0bc:	d004      	beq.n	b0c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    b0be:	2801      	cmp	r0, #1
    b0c0:	d006      	beq.n	b0d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    b0c2:	f640 21e1 	movw	r1, #2785	; 0xae1
    b0c6:	e009      	b.n	b0dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    b0c8:	6921      	ldr	r1, [r4, #16]
    b0ca:	69e0      	ldr	r0, [r4, #28]
    b0cc:	4408      	add	r0, r1
    b0ce:	e008      	b.n	b0e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    b0d0:	69e1      	ldr	r1, [r4, #28]
    b0d2:	6920      	ldr	r0, [r4, #16]
    b0d4:	4288      	cmp	r0, r1
    b0d6:	d804      	bhi.n	b0e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    b0d8:	f640 21e2 	movw	r1, #2786	; 0xae2
    b0dc:	203e      	movs	r0, #62	; 0x3e
    b0de:	f7f8 fdff 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0e2:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b0e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0ea:	f000 ba17 	b.w	b51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    b0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b0f2:	0000      	.short	0x0000
    b0f4:	40008000 	.word	0x40008000
    b0f8:	4000b000 	.word	0x4000b000
    b0fc:	20000f04 	.word	0x20000f04
    b100:	4001f508 	.word	0x4001f508
    b104:	40001000 	.word	0x40001000
    b108:	40008004 	.word	0x40008004
    b10c:	40001450 	.word	0x40001450

0000b110 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b110:	b570      	push	{r4, r5, r6, lr}
    b112:	4b15      	ldr	r3, [pc, #84]	; (b168 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    b114:	888c      	ldrh	r4, [r1, #4]
    b116:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    b11a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    b11e:	780c      	ldrb	r4, [r1, #0]
    b120:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b124:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b128:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    b12c:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    b130:	2101      	movs	r1, #1
    b132:	4081      	lsls	r1, r0
    b134:	430c      	orrs	r4, r1
    b136:	b2e4      	uxtb	r4, r4
    b138:	b132      	cbz	r2, b148 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    b13a:	2a01      	cmp	r2, #1
    b13c:	d00a      	beq.n	b154 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    b13e:	f240 41ac 	movw	r1, #1196	; 0x4ac
    b142:	203e      	movs	r0, #62	; 0x3e
    b144:	f7f8 fdcc 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b148:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b14c:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b150:	4388      	bics	r0, r1
    b152:	e004      	b.n	b15e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    b154:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b158:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    b15c:	b2c0      	uxtb	r0, r0
    b15e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    b162:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b166:	bd70      	pop	{r4, r5, r6, pc}
    b168:	40001000 	.word	0x40001000

0000b16c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    b16c:	4901      	ldr	r1, [pc, #4]	; (b174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    b16e:	2001      	movs	r0, #1
    b170:	7008      	strb	r0, [r1, #0]
    b172:	4770      	bx	lr
    b174:	20000270 	.word	0x20000270
    b178:	b510      	push	{r4, lr}
    b17a:	4604      	mov	r4, r0
    b17c:	f000 fbc8 	bl	b910 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b180:	2800      	cmp	r0, #0
    b182:	d00e      	beq.n	b1a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    b184:	4a09      	ldr	r2, [pc, #36]	; (b1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    b186:	6811      	ldr	r1, [r2, #0]
    b188:	0650      	lsls	r0, r2, #25
    b18a:	2c02      	cmp	r4, #2
    b18c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b190:	d008      	beq.n	b1a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    b192:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b196:	bf00      	nop
    b198:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b19c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b1a0:	6010      	str	r0, [r2, #0]
    b1a2:	bd10      	pop	{r4, pc}
    b1a4:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b1a8:	e7f6      	b.n	b198 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    b1aa:	0000      	.short	0x0000
    b1ac:	40001588 	.word	0x40001588
    b1b0:	4815      	ldr	r0, [pc, #84]	; (b208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    b1b2:	7d41      	ldrb	r1, [r0, #21]
    b1b4:	2925      	cmp	r1, #37	; 0x25
    b1b6:	d00a      	beq.n	b1ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    b1b8:	2926      	cmp	r1, #38	; 0x26
    b1ba:	d00b      	beq.n	b1d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    b1bc:	2927      	cmp	r1, #39	; 0x27
    b1be:	d00c      	beq.n	b1da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    b1c0:	7d40      	ldrb	r0, [r0, #21]
    b1c2:	0040      	lsls	r0, r0, #1
    b1c4:	290a      	cmp	r1, #10
    b1c6:	d80b      	bhi.n	b1e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    b1c8:	f600 1064 	addw	r0, r0, #2404	; 0x964
    b1cc:	e00a      	b.n	b1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    b1ce:	f640 1062 	movw	r0, #2402	; 0x962
    b1d2:	e00f      	b.n	b1f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b1d4:	f640 107a 	movw	r0, #2426	; 0x97a
    b1d8:	e00c      	b.n	b1f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b1da:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    b1de:	e009      	b.n	b1f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b1e0:	f600 1066 	addw	r0, r0, #2406	; 0x966
    b1e4:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    b1e8:	d204      	bcs.n	b1f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b1ea:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    b1ee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b1f2:	e001      	b.n	b1f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    b1f4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    b1f8:	4a04      	ldr	r2, [pc, #16]	; (b20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    b1fa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    b1fe:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    b202:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    b206:	4770      	bx	lr
    b208:	20000f04 	.word	0x20000f04
    b20c:	40001000 	.word	0x40001000
    b210:	4912      	ldr	r1, [pc, #72]	; (b25c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    b212:	b508      	push	{r3, lr}
    b214:	f991 2014 	ldrsb.w	r2, [r1, #20]
    b218:	7d49      	ldrb	r1, [r1, #21]
    b21a:	2801      	cmp	r0, #1
    b21c:	d00a      	beq.n	b234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    b21e:	2802      	cmp	r0, #2
    b220:	d00a      	beq.n	b238 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    b222:	2804      	cmp	r0, #4
    b224:	d00a      	beq.n	b23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    b226:	2808      	cmp	r0, #8
    b228:	d00a      	beq.n	b240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b22a:	f240 31ed 	movw	r1, #1005	; 0x3ed
    b22e:	2006      	movs	r0, #6
    b230:	f7f8 fd56 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b234:	2000      	movs	r0, #0
    b236:	e004      	b.n	b242 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    b238:	2001      	movs	r0, #1
    b23a:	e002      	b.n	b242 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    b23c:	2003      	movs	r0, #3
    b23e:	e000      	b.n	b242 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    b240:	2002      	movs	r0, #2
    b242:	466b      	mov	r3, sp
    b244:	f7f5 f8d6 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    b248:	b118      	cbz	r0, b252 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    b24a:	f240 41de 	movw	r1, #1246	; 0x4de
    b24e:	203e      	movs	r0, #62	; 0x3e
    b250:	e7ee      	b.n	b230 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    b252:	f99d 0000 	ldrsb.w	r0, [sp]
    b256:	f000 f9eb 	bl	b630 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b25a:	bd08      	pop	{r3, pc}
    b25c:	20000f04 	.word	0x20000f04
    b260:	4803      	ldr	r0, [pc, #12]	; (b270 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    b262:	7a01      	ldrb	r1, [r0, #8]
    b264:	2901      	cmp	r1, #1
    b266:	d102      	bne.n	b26e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    b268:	7a80      	ldrb	r0, [r0, #10]
    b26a:	f7ff bfd1 	b.w	b210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b26e:	4770      	bx	lr
    b270:	20000f04 	.word	0x20000f04
    b274:	4805      	ldr	r0, [pc, #20]	; (b28c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    b276:	7a40      	ldrb	r0, [r0, #9]
    b278:	2801      	cmp	r0, #1
    b27a:	d003      	beq.n	b284 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    b27c:	2802      	cmp	r0, #2
    b27e:	d103      	bne.n	b288 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    b280:	f004 b9cd 	b.w	f61e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b284:	f004 b9d7 	b.w	f636 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b288:	4770      	bx	lr
    b28a:	0000      	.short	0x0000
    b28c:	20000f04 	.word	0x20000f04
    b290:	4807      	ldr	r0, [pc, #28]	; (b2b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    b292:	2100      	movs	r1, #0
    b294:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b298:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b29c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b2a0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b2a4:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b2a8:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b2ac:	4770      	bx	lr
    b2ae:	0000      	.short	0x0000
    b2b0:	40001000 	.word	0x40001000
    b2b4:	4818      	ldr	r0, [pc, #96]	; (b318 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    b2b6:	b510      	push	{r4, lr}
    b2b8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b2bc:	07c1      	lsls	r1, r0, #31
    b2be:	d029      	beq.n	b314 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b2c0:	0781      	lsls	r1, r0, #30
    b2c2:	d514      	bpl.n	b2ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    b2c4:	4815      	ldr	r0, [pc, #84]	; (b31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    b2c6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b2ca:	f041 0101 	orr.w	r1, r1, #1
    b2ce:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b2d2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b2d6:	b2c0      	uxtb	r0, r0
    b2d8:	280b      	cmp	r0, #11
    b2da:	d005      	beq.n	b2e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    b2dc:	280a      	cmp	r0, #10
    b2de:	d003      	beq.n	b2e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    b2e0:	2803      	cmp	r0, #3
    b2e2:	d001      	beq.n	b2e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    b2e4:	2802      	cmp	r0, #2
    b2e6:	d115      	bne.n	b314 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b2e8:	f240 510f 	movw	r1, #1295	; 0x50f
    b2ec:	e00f      	b.n	b30e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    b2ee:	0740      	lsls	r0, r0, #29
    b2f0:	d510      	bpl.n	b314 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b2f2:	480a      	ldr	r0, [pc, #40]	; (b31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    b2f4:	490a      	ldr	r1, [pc, #40]	; (b320 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    b2f6:	3008      	adds	r0, #8
    b2f8:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b2fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
    b300:	4808      	ldr	r0, [pc, #32]	; (b324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    b302:	f004 fa2b 	bl	f75c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    b306:	2800      	cmp	r0, #0
    b308:	d004      	beq.n	b314 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b30a:	f240 5117 	movw	r1, #1303	; 0x517
    b30e:	203e      	movs	r0, #62	; 0x3e
    b310:	f7f8 fce6 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b314:	bd10      	pop	{r4, pc}
    b316:	0000      	.short	0x0000
    b318:	20000f04 	.word	0x20000f04
    b31c:	40001000 	.word	0x40001000
    b320:	4001f098 	.word	0x4001f098
    b324:	40008000 	.word	0x40008000
    b328:	4808      	ldr	r0, [pc, #32]	; (b34c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    b32a:	4601      	mov	r1, r0
    b32c:	79c2      	ldrb	r2, [r0, #7]
    b32e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    b332:	b112      	cbz	r2, b33a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    b334:	2a01      	cmp	r2, #1
    b336:	d003      	beq.n	b340 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    b338:	e006      	b.n	b348 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    b33a:	f041 0102 	orr.w	r1, r1, #2
    b33e:	e001      	b.n	b344 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    b340:	f041 0104 	orr.w	r1, r1, #4
    b344:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    b348:	f7ff bfb4 	b.w	b2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    b34c:	20000f04 	.word	0x20000f04
    b350:	b510      	push	{r4, lr}
    b352:	f000 fadd 	bl	b910 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b356:	2800      	cmp	r0, #0
    b358:	d108      	bne.n	b36c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    b35a:	f000 fac9 	bl	b8f0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b35e:	2800      	cmp	r0, #0
    b360:	d104      	bne.n	b36c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    b362:	4803      	ldr	r0, [pc, #12]	; (b370 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    b364:	6801      	ldr	r1, [r0, #0]
    b366:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b36a:	6001      	str	r1, [r0, #0]
    b36c:	bd10      	pop	{r4, pc}
    b36e:	0000      	.short	0x0000
    b370:	40001568 	.word	0x40001568
    b374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b378:	4d35      	ldr	r5, [pc, #212]	; (b450 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    b37a:	2400      	movs	r4, #0
    b37c:	7b28      	ldrb	r0, [r5, #12]
    b37e:	b138      	cbz	r0, b390 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b380:	f44f 71a2 	mov.w	r1, #324	; 0x144
    b384:	4833      	ldr	r0, [pc, #204]	; (b454 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    b386:	f004 f9e9 	bl	f75c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    b38a:	b108      	cbz	r0, b390 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b38c:	2601      	movs	r6, #1
    b38e:	e000      	b.n	b392 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    b390:	2600      	movs	r6, #0
    b392:	7a68      	ldrb	r0, [r5, #9]
    b394:	4f30      	ldr	r7, [pc, #192]	; (b458 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    b396:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b39a:	2801      	cmp	r0, #1
    b39c:	d002      	beq.n	b3a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    b39e:	2802      	cmp	r0, #2
    b3a0:	d008      	beq.n	b3b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    b3a2:	e018      	b.n	b3d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    b3a4:	4638      	mov	r0, r7
    b3a6:	f004 f9d4 	bl	f752 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b3aa:	b108      	cbz	r0, b3b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    b3ac:	2408      	movs	r4, #8
    b3ae:	e012      	b.n	b3d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    b3b0:	2400      	movs	r4, #0
    b3b2:	e010      	b.n	b3d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    b3b4:	4638      	mov	r0, r7
    b3b6:	f004 f9cc 	bl	f752 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b3ba:	b100      	cbz	r0, b3be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    b3bc:	2002      	movs	r0, #2
    b3be:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    b3c2:	43c9      	mvns	r1, r1
    b3c4:	f341 0100 	sbfx	r1, r1, #0, #1
    b3c8:	1c49      	adds	r1, r1, #1
    b3ca:	d001      	beq.n	b3d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    b3cc:	2400      	movs	r4, #0
    b3ce:	e000      	b.n	b3d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    b3d0:	2404      	movs	r4, #4
    b3d2:	4304      	orrs	r4, r0
    b3d4:	4334      	orrs	r4, r6
    b3d6:	f014 0f0b 	tst.w	r4, #11
    b3da:	d107      	bne.n	b3ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    b3dc:	f44f 7188 	mov.w	r1, #272	; 0x110
    b3e0:	4638      	mov	r0, r7
    b3e2:	f004 f9b6 	bl	f752 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b3e6:	b100      	cbz	r0, b3ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    b3e8:	2010      	movs	r0, #16
    b3ea:	4304      	orrs	r4, r0
    b3ec:	481b      	ldr	r0, [pc, #108]	; (b45c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    b3ee:	7800      	ldrb	r0, [r0, #0]
    b3f0:	b1f8      	cbz	r0, b432 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    b3f2:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    b3f6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    b3fa:	d007      	beq.n	b40c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    b3fc:	f44f 718a 	mov.w	r1, #276	; 0x114
    b400:	4638      	mov	r0, r7
    b402:	f004 f9a6 	bl	f752 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b406:	b108      	cbz	r0, b40c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    b408:	2001      	movs	r0, #1
    b40a:	e000      	b.n	b40e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    b40c:	2000      	movs	r0, #0
    b40e:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    b412:	b13e      	cbz	r6, b424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    b414:	f44f 718c 	mov.w	r1, #280	; 0x118
    b418:	4638      	mov	r0, r7
    b41a:	f004 f99a 	bl	f752 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b41e:	b108      	cbz	r0, b424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    b420:	2001      	movs	r0, #1
    b422:	e000      	b.n	b426 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    b424:	2000      	movs	r0, #0
    b426:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    b42a:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    b42e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    b432:	f7ff ff2d 	bl	b290 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    b436:	06e0      	lsls	r0, r4, #27
    b438:	d506      	bpl.n	b448 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    b43a:	0720      	lsls	r0, r4, #28
    b43c:	d404      	bmi.n	b448 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    b43e:	7a68      	ldrb	r0, [r5, #9]
    b440:	2801      	cmp	r0, #1
    b442:	d101      	bne.n	b448 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    b444:	f044 0420 	orr.w	r4, r4, #32
    b448:	4620      	mov	r0, r4
    b44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b44e:	0000      	.short	0x0000
    b450:	20000f04 	.word	0x20000f04
    b454:	40008000 	.word	0x40008000
    b458:	40001000 	.word	0x40001000
    b45c:	20000270 	.word	0x20000270
    b460:	4809      	ldr	r0, [pc, #36]	; (b488 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    b462:	b510      	push	{r4, lr}
    b464:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    b468:	f000 000f 	and.w	r0, r0, #15
    b46c:	2803      	cmp	r0, #3
    b46e:	d006      	beq.n	b47e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    b470:	2804      	cmp	r0, #4
    b472:	d006      	beq.n	b482 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    b474:	f240 11dd 	movw	r1, #477	; 0x1dd
    b478:	203e      	movs	r0, #62	; 0x3e
    b47a:	f7f8 fc31 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b47e:	2001      	movs	r0, #1
    b480:	bd10      	pop	{r4, pc}
    b482:	2002      	movs	r0, #2
    b484:	bd10      	pop	{r4, pc}
    b486:	0000      	.short	0x0000
    b488:	40001000 	.word	0x40001000
    b48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b490:	4c19      	ldr	r4, [pc, #100]	; (b4f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    b492:	460d      	mov	r5, r1
    b494:	7a21      	ldrb	r1, [r4, #8]
    b496:	b129      	cbz	r1, b4a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    b498:	f010 0f11 	tst.w	r0, #17
    b49c:	d00b      	beq.n	b4b6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    b49e:	f7ff f9d5 	bl	a84c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b4a2:	e027      	b.n	b4f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    b4a4:	4915      	ldr	r1, [pc, #84]	; (b4fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    b4a6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b4aa:	6008      	str	r0, [r1, #0]
    b4ac:	f000 f862 	bl	b574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b4b0:	2000      	movs	r0, #0
    b4b2:	7320      	strb	r0, [r4, #12]
    b4b4:	e01e      	b.n	b4f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    b4b6:	2901      	cmp	r1, #1
    b4b8:	d001      	beq.n	b4be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    b4ba:	2601      	movs	r6, #1
    b4bc:	e000      	b.n	b4c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    b4be:	2600      	movs	r6, #0
    b4c0:	79e0      	ldrb	r0, [r4, #7]
    b4c2:	2801      	cmp	r0, #1
    b4c4:	d00e      	beq.n	b4e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    b4c6:	2700      	movs	r7, #0
    b4c8:	f000 f854 	bl	b574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b4cc:	2196      	movs	r1, #150	; 0x96
    b4ce:	4630      	mov	r0, r6
    b4d0:	f000 f866 	bl	b5a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    b4d4:	4601      	mov	r1, r0
    b4d6:	b14f      	cbz	r7, b4ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    b4d8:	353b      	adds	r5, #59	; 0x3b
    b4da:	428d      	cmp	r5, r1
    b4dc:	d904      	bls.n	b4e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    b4de:	2000      	movs	r0, #0
    b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4e4:	2701      	movs	r7, #1
    b4e6:	e7ef      	b.n	b4c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    b4e8:	2001      	movs	r0, #1
    b4ea:	71e0      	strb	r0, [r4, #7]
    b4ec:	7aa2      	ldrb	r2, [r4, #10]
    b4ee:	4630      	mov	r0, r6
    b4f0:	f7ff fc6a 	bl	adc8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b4f4:	2001      	movs	r0, #1
    b4f6:	e7f3      	b.n	b4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b4f8:	20000f04 	.word	0x20000f04
    b4fc:	4001f508 	.word	0x4001f508
    b500:	4805      	ldr	r0, [pc, #20]	; (b518 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    b502:	2100      	movs	r1, #0
    b504:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b508:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b50c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b510:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b514:	4770      	bx	lr
    b516:	0000      	.short	0x0000
    b518:	40001000 	.word	0x40001000
    b51c:	4804      	ldr	r0, [pc, #16]	; (b530 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    b51e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b520:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b524:	6281      	str	r1, [r0, #40]	; 0x28
    b526:	4903      	ldr	r1, [pc, #12]	; (b534 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    b528:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b52c:	6008      	str	r0, [r1, #0]
    b52e:	4770      	bx	lr
    b530:	20000f04 	.word	0x20000f04
    b534:	4001f504 	.word	0x4001f504
    b538:	4a07      	ldr	r2, [pc, #28]	; (b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b53a:	2000      	movs	r0, #0
    b53c:	3208      	adds	r2, #8
    b53e:	4906      	ldr	r1, [pc, #24]	; (b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b540:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b544:	1d0a      	adds	r2, r1, #4
    b546:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b54a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b54e:	4902      	ldr	r1, [pc, #8]	; (b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b550:	310c      	adds	r1, #12
    b552:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b556:	4770      	bx	lr
    b558:	40008000 	.word	0x40008000
    b55c:	4903      	ldr	r1, [pc, #12]	; (b56c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    b55e:	79c9      	ldrb	r1, [r1, #7]
    b560:	2900      	cmp	r1, #0
    b562:	d102      	bne.n	b56a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    b564:	4902      	ldr	r1, [pc, #8]	; (b570 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    b566:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b56a:	4770      	bx	lr
    b56c:	20000f04 	.word	0x20000f04
    b570:	4001f098 	.word	0x4001f098
    b574:	4802      	ldr	r0, [pc, #8]	; (b580 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    b576:	2100      	movs	r1, #0
    b578:	71c1      	strb	r1, [r0, #7]
    b57a:	7201      	strb	r1, [r0, #8]
    b57c:	7241      	strb	r1, [r0, #9]
    b57e:	4770      	bx	lr
    b580:	20000f04 	.word	0x20000f04
    b584:	4a05      	ldr	r2, [pc, #20]	; (b59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    b586:	79d2      	ldrb	r2, [r2, #7]
    b588:	2a01      	cmp	r2, #1
    b58a:	d006      	beq.n	b59a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    b58c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b590:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b594:	fbb1 f1f2 	udiv	r1, r1, r2
    b598:	1a40      	subs	r0, r0, r1
    b59a:	4770      	bx	lr
    b59c:	20000f04 	.word	0x20000f04
    b5a0:	b570      	push	{r4, r5, r6, lr}
    b5a2:	4c13      	ldr	r4, [pc, #76]	; (b5f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    b5a4:	4603      	mov	r3, r0
    b5a6:	460d      	mov	r5, r1
    b5a8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b5ac:	2000      	movs	r0, #0
    b5ae:	b15a      	cbz	r2, b5c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b5b0:	4621      	mov	r1, r4
    b5b2:	f891 1020 	ldrb.w	r1, [r1, #32]
    b5b6:	b163      	cbz	r3, b5d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    b5b8:	2b01      	cmp	r3, #1
    b5ba:	d111      	bne.n	b5e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    b5bc:	2a01      	cmp	r2, #1
    b5be:	4628      	mov	r0, r5
    b5c0:	d012      	beq.n	b5e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    b5c2:	f004 f910 	bl	f7e6 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b5c6:	e009      	b.n	b5dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    b5c8:	f240 7152 	movw	r1, #1874	; 0x752
    b5cc:	203e      	movs	r0, #62	; 0x3e
    b5ce:	f7f8 fb87 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5d2:	2a01      	cmp	r2, #1
    b5d4:	4628      	mov	r0, r5
    b5d6:	d004      	beq.n	b5e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    b5d8:	f004 f913 	bl	f802 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b5dc:	69e1      	ldr	r1, [r4, #28]
    b5de:	4408      	add	r0, r1
    b5e0:	bd70      	pop	{r4, r5, r6, pc}
    b5e2:	f004 f928 	bl	f836 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b5e6:	e7f9      	b.n	b5dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    b5e8:	f004 f916 	bl	f818 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b5ec:	e7f6      	b.n	b5dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    b5ee:	0000      	.short	0x0000
    b5f0:	20000f04 	.word	0x20000f04
    b5f4:	b510      	push	{r4, lr}
    b5f6:	2200      	movs	r2, #0
    b5f8:	2901      	cmp	r1, #1
    b5fa:	d008      	beq.n	b60e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    b5fc:	2902      	cmp	r1, #2
    b5fe:	d004      	beq.n	b60a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    b600:	f240 2163 	movw	r1, #611	; 0x263
    b604:	203e      	movs	r0, #62	; 0x3e
    b606:	f7f8 fb6b 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b60a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b60e:	4905      	ldr	r1, [pc, #20]	; (b624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    b610:	430a      	orrs	r2, r1
    b612:	4905      	ldr	r1, [pc, #20]	; (b628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    b614:	600a      	str	r2, [r1, #0]
    b616:	4905      	ldr	r1, [pc, #20]	; (b62c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    b618:	4308      	orrs	r0, r1
    b61a:	4903      	ldr	r1, [pc, #12]	; (b628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    b61c:	1d09      	adds	r1, r1, #4
    b61e:	6008      	str	r0, [r1, #0]
    b620:	bd10      	pop	{r4, pc}
    b622:	0000      	.short	0x0000
    b624:	00100108 	.word	0x00100108
    b628:	40001514 	.word	0x40001514
    b62c:	02030000 	.word	0x02030000

0000b630 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b630:	4901      	ldr	r1, [pc, #4]	; (b638 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b632:	b2c0      	uxtb	r0, r0
    b634:	6008      	str	r0, [r1, #0]
    b636:	4770      	bx	lr
    b638:	4000150c 	.word	0x4000150c

0000b63c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b63c:	b510      	push	{r4, lr}
    b63e:	4907      	ldr	r1, [pc, #28]	; (b65c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b640:	2801      	cmp	r0, #1
    b642:	d005      	beq.n	b650 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b644:	2802      	cmp	r0, #2
    b646:	d005      	beq.n	b654 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b648:	218b      	movs	r1, #139	; 0x8b
    b64a:	203f      	movs	r0, #63	; 0x3f
    b64c:	f7f8 fb48 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b650:	2003      	movs	r0, #3
    b652:	e000      	b.n	b656 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b654:	2004      	movs	r0, #4
    b656:	6008      	str	r0, [r1, #0]
    b658:	bd10      	pop	{r4, pc}
    b65a:	0000      	.short	0x0000
    b65c:	40001510 	.word	0x40001510

0000b660 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    b660:	4770      	bx	lr
    b662:	2100      	movs	r1, #0
    b664:	7081      	strb	r1, [r0, #2]
    b666:	7001      	strb	r1, [r0, #0]
    b668:	7041      	strb	r1, [r0, #1]
    b66a:	4770      	bx	lr

0000b66c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    b66c:	b570      	push	{r4, r5, r6, lr}
    b66e:	f7f4 fedb 	bl	428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    b672:	4605      	mov	r5, r0
    b674:	2400      	movs	r4, #0
    b676:	e006      	b.n	b686 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    b678:	4620      	mov	r0, r4
    b67a:	f7f4 fedb 	bl	434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b67e:	f7ff fff0 	bl	b662 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b682:	1c64      	adds	r4, r4, #1
    b684:	b2e4      	uxtb	r4, r4
    b686:	42ac      	cmp	r4, r5
    b688:	d3f6      	bcc.n	b678 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    b68a:	bd70      	pop	{r4, r5, r6, pc}

0000b68c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    b68c:	2000      	movs	r0, #0
    b68e:	f7f7 bca1 	b.w	2fd4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000b692 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    b692:	b510      	push	{r4, lr}
    b694:	f7f7 f974 	bl	2980 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    b698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b69c:	f000 b800 	b.w	b6a0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000b6a0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    b6a0:	0a41      	lsrs	r1, r0, #9
    b6a2:	f643 5209 	movw	r2, #15625	; 0x3d09
    b6a6:	4351      	muls	r1, r2
    b6a8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b6ac:	fb10 f002 	smulbb	r0, r0, r2
    b6b0:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b6b4:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    b6b8:	4770      	bx	lr

0000b6ba <MPSL_IRQ_RADIO_Handler>:
    b6ba:	f7f5 bf65 	b.w	1588 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    b6be:	2800      	cmp	r0, #0
    b6c0:	db09      	blt.n	b6d6 <MPSL_IRQ_RADIO_Handler+0x1c>
    b6c2:	f000 021f 	and.w	r2, r0, #31
    b6c6:	2101      	movs	r1, #1
    b6c8:	4091      	lsls	r1, r2
    b6ca:	0940      	lsrs	r0, r0, #5
    b6cc:	0080      	lsls	r0, r0, #2
    b6ce:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b6d2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b6d6:	4770      	bx	lr
    b6d8:	2800      	cmp	r0, #0
    b6da:	db0d      	blt.n	b6f8 <MPSL_IRQ_RADIO_Handler+0x3e>
    b6dc:	f000 021f 	and.w	r2, r0, #31
    b6e0:	2101      	movs	r1, #1
    b6e2:	4091      	lsls	r1, r2
    b6e4:	0940      	lsrs	r0, r0, #5
    b6e6:	0080      	lsls	r0, r0, #2
    b6e8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b6ec:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b6f0:	f3bf 8f4f 	dsb	sy
    b6f4:	f3bf 8f6f 	isb	sy
    b6f8:	4770      	bx	lr

0000b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    b6fa:	b570      	push	{r4, r5, r6, lr}
    b6fc:	4602      	mov	r2, r0
    b6fe:	2000      	movs	r0, #0
    b700:	2900      	cmp	r1, #0
    b702:	d01d      	beq.n	b740 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    b704:	fba2 0101 	umull	r0, r1, r2, r1
    b708:	0a40      	lsrs	r0, r0, #9
    b70a:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    b70e:	0a49      	lsrs	r1, r1, #9
    b710:	1c40      	adds	r0, r0, #1
    b712:	f141 0100 	adc.w	r1, r1, #0
    b716:	f240 72a1 	movw	r2, #1953	; 0x7a1
    b71a:	1883      	adds	r3, r0, r2
    b71c:	f141 0100 	adc.w	r1, r1, #0
    b720:	1c5b      	adds	r3, r3, #1
    b722:	f141 0400 	adc.w	r4, r1, #0
    b726:	2100      	movs	r1, #0
    b728:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    b72c:	41a1      	sbcs	r1, r4
    b72e:	d203      	bcs.n	b738 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    b730:	2171      	movs	r1, #113	; 0x71
    b732:	206d      	movs	r0, #109	; 0x6d
    b734:	f7f8 f828 	bl	3788 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b738:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    b73c:	fbb0 f0f2 	udiv	r0, r0, r2
    b740:	bd70      	pop	{r4, r5, r6, pc}
    b742:	5840      	ldr	r0, [r0, r1]
    b744:	2800      	cmp	r0, #0
    b746:	d000      	beq.n	b74a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    b748:	2001      	movs	r0, #1
    b74a:	4770      	bx	lr
    b74c:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    b750:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    b754:	f002 0201 	and.w	r2, r2, #1
    b758:	03c0      	lsls	r0, r0, #15
    b75a:	d503      	bpl.n	b764 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b75c:	428a      	cmp	r2, r1
    b75e:	d101      	bne.n	b764 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b760:	2001      	movs	r0, #1
    b762:	4770      	bx	lr
    b764:	2000      	movs	r0, #0
    b766:	4770      	bx	lr

0000b768 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    b768:	b510      	push	{r4, lr}
    b76a:	2101      	movs	r1, #1
    b76c:	0788      	lsls	r0, r1, #30
    b76e:	f7f7 ffb5 	bl	36dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b772:	2800      	cmp	r0, #0
    b774:	d000      	beq.n	b778 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    b776:	2001      	movs	r0, #1
    b778:	bd10      	pop	{r4, pc}

0000b77a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    b77a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b77e:	2101      	movs	r1, #1
    b780:	6001      	str	r1, [r0, #0]
    b782:	4770      	bx	lr

0000b784 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    b784:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    b788:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    b78c:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    b790:	f002 0203 	and.w	r2, r2, #3
    b794:	03c9      	lsls	r1, r1, #15
    b796:	d503      	bpl.n	b7a0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b798:	4282      	cmp	r2, r0
    b79a:	d101      	bne.n	b7a0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b79c:	2001      	movs	r0, #1
    b79e:	4770      	bx	lr
    b7a0:	2000      	movs	r0, #0
    b7a2:	4770      	bx	lr

0000b7a4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    b7a4:	b510      	push	{r4, lr}
    b7a6:	2100      	movs	r1, #0
    b7a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b7ac:	f7f7 ff96 	bl	36dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b7b0:	2800      	cmp	r0, #0
    b7b2:	d000      	beq.n	b7b6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    b7b4:	2001      	movs	r0, #1
    b7b6:	bd10      	pop	{r4, pc}
    b7b8:	2800      	cmp	r0, #0
    b7ba:	db09      	blt.n	b7d0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    b7bc:	f000 021f 	and.w	r2, r0, #31
    b7c0:	2101      	movs	r1, #1
    b7c2:	4091      	lsls	r1, r2
    b7c4:	0940      	lsrs	r0, r0, #5
    b7c6:	0080      	lsls	r0, r0, #2
    b7c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b7cc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b7d0:	4770      	bx	lr
    b7d2:	2800      	cmp	r0, #0
    b7d4:	db0d      	blt.n	b7f2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    b7d6:	f000 021f 	and.w	r2, r0, #31
    b7da:	2101      	movs	r1, #1
    b7dc:	4091      	lsls	r1, r2
    b7de:	0940      	lsrs	r0, r0, #5
    b7e0:	0080      	lsls	r0, r0, #2
    b7e2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b7e6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b7ea:	f3bf 8f4f 	dsb	sy
    b7ee:	f3bf 8f6f 	isb	sy
    b7f2:	4770      	bx	lr
    b7f4:	00021000 	.word	0x00021000
    b7f8:	000000fa 	.word	0x000000fa
    b7fc:	24625723 	.word	0x24625723
    b800:	578f3123 	.word	0x578f3123
    b804:	2fd1ee74 	.word	0x2fd1ee74
    b808:	4594c088 	.word	0x4594c088
    b80c:	36f9a2f7 	.word	0x36f9a2f7
    b810:	2800      	cmp	r0, #0
    b812:	db09      	blt.n	b828 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    b814:	f000 021f 	and.w	r2, r0, #31
    b818:	2101      	movs	r1, #1
    b81a:	4091      	lsls	r1, r2
    b81c:	0940      	lsrs	r0, r0, #5
    b81e:	0080      	lsls	r0, r0, #2
    b820:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b824:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b828:	4770      	bx	lr

0000b82a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    b82a:	f3ef 8110 	mrs	r1, PRIMASK
    b82e:	b672      	cpsid	i
    b830:	7802      	ldrb	r2, [r0, #0]
    b832:	2a01      	cmp	r2, #1
    b834:	d001      	beq.n	b83a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    b836:	2201      	movs	r2, #1
    b838:	e000      	b.n	b83c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    b83a:	2200      	movs	r2, #0
    b83c:	2301      	movs	r3, #1
    b83e:	7003      	strb	r3, [r0, #0]
    b840:	b901      	cbnz	r1, b844 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    b842:	b662      	cpsie	i
    b844:	b10a      	cbz	r2, b84a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    b846:	2000      	movs	r0, #0
    b848:	4770      	bx	lr
    b84a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    b84e:	4770      	bx	lr

0000b850 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    b850:	2100      	movs	r1, #0
    b852:	7001      	strb	r1, [r0, #0]
    b854:	4608      	mov	r0, r1
    b856:	4770      	bx	lr

0000b858 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    b858:	f3ef 8110 	mrs	r1, PRIMASK
    b85c:	b672      	cpsid	i
    b85e:	2200      	movs	r2, #0
    b860:	7002      	strb	r2, [r0, #0]
    b862:	b901      	cbnz	r1, b866 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    b864:	b662      	cpsie	i
    b866:	2000      	movs	r0, #0
    b868:	4770      	bx	lr

0000b86a <mpsl_low_priority_process>:
    b86a:	f7f8 b879 	b.w	3960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000b86e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    b86e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b872:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b876:	280f      	cmp	r0, #15
    b878:	d001      	beq.n	b87e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    b87a:	2000      	movs	r0, #0
    b87c:	4770      	bx	lr
    b87e:	2001      	movs	r0, #1
    b880:	4770      	bx	lr

0000b882 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    b882:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b886:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b88a:	280a      	cmp	r0, #10
    b88c:	d001      	beq.n	b892 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    b88e:	2000      	movs	r0, #0
    b890:	4770      	bx	lr
    b892:	2001      	movs	r0, #1
    b894:	4770      	bx	lr

0000b896 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    b896:	b500      	push	{lr}
    b898:	f7ff fff3 	bl	b882 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b89c:	b120      	cbz	r0, b8a8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    b89e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8a2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b8a6:	b108      	cbz	r0, b8ac <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    b8a8:	2000      	movs	r0, #0
    b8aa:	bd00      	pop	{pc}
    b8ac:	2001      	movs	r0, #1
    b8ae:	bd00      	pop	{pc}

0000b8b0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    b8b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8b4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b8b8:	280e      	cmp	r0, #14
    b8ba:	d001      	beq.n	b8c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    b8bc:	2000      	movs	r0, #0
    b8be:	4770      	bx	lr
    b8c0:	2001      	movs	r0, #1
    b8c2:	4770      	bx	lr

0000b8c4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    b8c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8c8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b8cc:	2810      	cmp	r0, #16
    b8ce:	d001      	beq.n	b8d4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    b8d0:	2000      	movs	r0, #0
    b8d2:	4770      	bx	lr
    b8d4:	2001      	movs	r0, #1
    b8d6:	4770      	bx	lr

0000b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    b8d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8dc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b8e0:	2806      	cmp	r0, #6
    b8e2:	d003      	beq.n	b8ec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b8e4:	1c40      	adds	r0, r0, #1
    b8e6:	d001      	beq.n	b8ec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b8e8:	2000      	movs	r0, #0
    b8ea:	4770      	bx	lr
    b8ec:	2001      	movs	r0, #1
    b8ee:	4770      	bx	lr

0000b8f0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    b8f0:	b500      	push	{lr}
    b8f2:	f7ff fff1 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b8f6:	b148      	cbz	r0, b90c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b8f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8fc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b900:	2806      	cmp	r0, #6
    b902:	d303      	bcc.n	b90c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b904:	1c40      	adds	r0, r0, #1
    b906:	d001      	beq.n	b90c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b908:	2001      	movs	r0, #1
    b90a:	bd00      	pop	{pc}
    b90c:	2000      	movs	r0, #0
    b90e:	bd00      	pop	{pc}

0000b910 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    b910:	b500      	push	{lr}
    b912:	f7ff ffe1 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b916:	b138      	cbz	r0, b928 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    b918:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b91c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b920:	2806      	cmp	r0, #6
    b922:	d303      	bcc.n	b92c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b924:	1c40      	adds	r0, r0, #1
    b926:	d001      	beq.n	b92c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b928:	2000      	movs	r0, #0
    b92a:	bd00      	pop	{pc}
    b92c:	2001      	movs	r0, #1
    b92e:	bd00      	pop	{pc}

0000b930 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    b930:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b934:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b938:	280d      	cmp	r0, #13
    b93a:	d001      	beq.n	b940 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    b93c:	2000      	movs	r0, #0
    b93e:	4770      	bx	lr
    b940:	2001      	movs	r0, #1
    b942:	4770      	bx	lr

0000b944 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    b944:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b948:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b94c:	2808      	cmp	r0, #8
    b94e:	d001      	beq.n	b954 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    b950:	2000      	movs	r0, #0
    b952:	4770      	bx	lr
    b954:	2001      	movs	r0, #1
    b956:	4770      	bx	lr

0000b958 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    b958:	2a00      	cmp	r2, #0
    b95a:	bf04      	itt	eq
    b95c:	2000      	moveq	r0, #0
    b95e:	4770      	bxeq	lr
    b960:	1e52      	subs	r2, r2, #1
    b962:	d007      	beq.n	b974 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    b964:	7803      	ldrb	r3, [r0, #0]
    b966:	f891 c000 	ldrb.w	ip, [r1]
    b96a:	4563      	cmp	r3, ip
    b96c:	bf04      	itt	eq
    b96e:	1c40      	addeq	r0, r0, #1
    b970:	1c49      	addeq	r1, r1, #1
    b972:	d0f5      	beq.n	b960 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    b974:	7800      	ldrb	r0, [r0, #0]
    b976:	7809      	ldrb	r1, [r1, #0]
    b978:	1a40      	subs	r0, r0, r1
    b97a:	4770      	bx	lr

0000b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    b97c:	b4f0      	push	{r4, r5, r6, r7}
    b97e:	ea80 0c01 	eor.w	ip, r0, r1
    b982:	4603      	mov	r3, r0
    b984:	f01c 0f03 	tst.w	ip, #3
    b988:	d13c      	bne.n	ba04 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b98a:	f013 0f03 	tst.w	r3, #3
    b98e:	d00b      	beq.n	b9a8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    b990:	2a00      	cmp	r2, #0
    b992:	bf04      	itt	eq
    b994:	bcf0      	popeq	{r4, r5, r6, r7}
    b996:	4770      	bxeq	lr
    b998:	f811 cb01 	ldrb.w	ip, [r1], #1
    b99c:	f803 cb01 	strb.w	ip, [r3], #1
    b9a0:	1e52      	subs	r2, r2, #1
    b9a2:	f013 0f03 	tst.w	r3, #3
    b9a6:	d1f3      	bne.n	b990 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    b9a8:	2a03      	cmp	r2, #3
    b9aa:	d94f      	bls.n	ba4c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b9ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b9b0:	d24c      	bcs.n	ba4c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b9b2:	f1c2 0c00 	rsb	ip, r2, #0
    b9b6:	ea4f 74ec 	mov.w	r4, ip, asr #31
    b9ba:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    b9be:	ea4f 0cac 	mov.w	ip, ip, asr #2
    b9c2:	f1cc 0c00 	rsb	ip, ip, #0
    b9c6:	f1bc 0f00 	cmp.w	ip, #0
    b9ca:	dd1b      	ble.n	ba04 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b9cc:	1f0d      	subs	r5, r1, #4
    b9ce:	1f1c      	subs	r4, r3, #4
    b9d0:	f01c 0f01 	tst.w	ip, #1
    b9d4:	d003      	beq.n	b9de <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    b9d6:	f855 6f04 	ldr.w	r6, [r5, #4]!
    b9da:	f844 6f04 	str.w	r6, [r4, #4]!
    b9de:	ea5f 066c 	movs.w	r6, ip, asr #1
    b9e2:	d007      	beq.n	b9f4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    b9e4:	686f      	ldr	r7, [r5, #4]
    b9e6:	6067      	str	r7, [r4, #4]
    b9e8:	f855 7f08 	ldr.w	r7, [r5, #8]!
    b9ec:	f844 7f08 	str.w	r7, [r4, #8]!
    b9f0:	1e76      	subs	r6, r6, #1
    b9f2:	d1f7      	bne.n	b9e4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    b9f4:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    b9f8:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    b9fc:	f1cc 0c00 	rsb	ip, ip, #0
    ba00:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    ba04:	2a00      	cmp	r2, #0
    ba06:	bf04      	itt	eq
    ba08:	bcf0      	popeq	{r4, r5, r6, r7}
    ba0a:	4770      	bxeq	lr
    ba0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ba10:	d226      	bcs.n	ba60 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    ba12:	2a00      	cmp	r2, #0
    ba14:	bfdc      	itt	le
    ba16:	bcf0      	pople	{r4, r5, r6, r7}
    ba18:	4770      	bxle	lr
    ba1a:	1e49      	subs	r1, r1, #1
    ba1c:	1e5b      	subs	r3, r3, #1
    ba1e:	f012 0f01 	tst.w	r2, #1
    ba22:	d003      	beq.n	ba2c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    ba24:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    ba28:	f803 cf01 	strb.w	ip, [r3, #1]!
    ba2c:	1052      	asrs	r2, r2, #1
    ba2e:	bf04      	itt	eq
    ba30:	bcf0      	popeq	{r4, r5, r6, r7}
    ba32:	4770      	bxeq	lr
    ba34:	f891 c001 	ldrb.w	ip, [r1, #1]
    ba38:	f883 c001 	strb.w	ip, [r3, #1]
    ba3c:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    ba40:	f803 cf02 	strb.w	ip, [r3, #2]!
    ba44:	1e52      	subs	r2, r2, #1
    ba46:	d1f5      	bne.n	ba34 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    ba48:	bcf0      	pop	{r4, r5, r6, r7}
    ba4a:	4770      	bx	lr
    ba4c:	2a04      	cmp	r2, #4
    ba4e:	d3d9      	bcc.n	ba04 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ba50:	f851 cb04 	ldr.w	ip, [r1], #4
    ba54:	1f12      	subs	r2, r2, #4
    ba56:	f843 cb04 	str.w	ip, [r3], #4
    ba5a:	2a04      	cmp	r2, #4
    ba5c:	d2f8      	bcs.n	ba50 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    ba5e:	e7d1      	b.n	ba04 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ba60:	f811 cb01 	ldrb.w	ip, [r1], #1
    ba64:	f803 cb01 	strb.w	ip, [r3], #1
    ba68:	1e52      	subs	r2, r2, #1
    ba6a:	d1f9      	bne.n	ba60 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    ba6c:	bcf0      	pop	{r4, r5, r6, r7}
    ba6e:	4770      	bx	lr

0000ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ba70:	b470      	push	{r4, r5, r6}
    ba72:	4603      	mov	r3, r0
    ba74:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    ba78:	f010 0f03 	tst.w	r0, #3
    ba7c:	d009      	beq.n	ba92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ba7e:	2a00      	cmp	r2, #0
    ba80:	bf04      	itt	eq
    ba82:	bc70      	popeq	{r4, r5, r6}
    ba84:	4770      	bxeq	lr
    ba86:	f803 cb01 	strb.w	ip, [r3], #1
    ba8a:	1e52      	subs	r2, r2, #1
    ba8c:	f013 0f03 	tst.w	r3, #3
    ba90:	d1f5      	bne.n	ba7e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    ba92:	b2c9      	uxtb	r1, r1
    ba94:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ba98:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    ba9c:	2a03      	cmp	r2, #3
    ba9e:	d939      	bls.n	bb14 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    baa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    baa4:	d236      	bcs.n	bb14 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    baa6:	4251      	negs	r1, r2
    baa8:	17cc      	asrs	r4, r1, #31
    baaa:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    baae:	1089      	asrs	r1, r1, #2
    bab0:	424e      	negs	r6, r1
    bab2:	2e00      	cmp	r6, #0
    bab4:	dd11      	ble.n	bada <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bab6:	1f19      	subs	r1, r3, #4
    bab8:	f016 0f01 	tst.w	r6, #1
    babc:	bf18      	it	ne
    babe:	f841 5f04 	strne.w	r5, [r1, #4]!
    bac2:	1074      	asrs	r4, r6, #1
    bac4:	d004      	beq.n	bad0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    bac6:	604d      	str	r5, [r1, #4]
    bac8:	f841 5f08 	str.w	r5, [r1, #8]!
    bacc:	1e64      	subs	r4, r4, #1
    bace:	d1fa      	bne.n	bac6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    bad0:	4271      	negs	r1, r6
    bad2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    bad6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    bada:	2a00      	cmp	r2, #0
    badc:	bf04      	itt	eq
    bade:	bc70      	popeq	{r4, r5, r6}
    bae0:	4770      	bxeq	lr
    bae2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bae6:	d21d      	bcs.n	bb24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    bae8:	2a00      	cmp	r2, #0
    baea:	bfdc      	itt	le
    baec:	bc70      	pople	{r4, r5, r6}
    baee:	4770      	bxle	lr
    baf0:	1e59      	subs	r1, r3, #1
    baf2:	f012 0f01 	tst.w	r2, #1
    baf6:	bf18      	it	ne
    baf8:	f801 cf01 	strbne.w	ip, [r1, #1]!
    bafc:	1052      	asrs	r2, r2, #1
    bafe:	bf04      	itt	eq
    bb00:	bc70      	popeq	{r4, r5, r6}
    bb02:	4770      	bxeq	lr
    bb04:	f881 c001 	strb.w	ip, [r1, #1]
    bb08:	f801 cf02 	strb.w	ip, [r1, #2]!
    bb0c:	1e52      	subs	r2, r2, #1
    bb0e:	d1f9      	bne.n	bb04 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    bb10:	bc70      	pop	{r4, r5, r6}
    bb12:	4770      	bx	lr
    bb14:	2a04      	cmp	r2, #4
    bb16:	d3e0      	bcc.n	bada <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bb18:	1f12      	subs	r2, r2, #4
    bb1a:	f843 5b04 	str.w	r5, [r3], #4
    bb1e:	2a04      	cmp	r2, #4
    bb20:	d2fa      	bcs.n	bb18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    bb22:	e7da      	b.n	bada <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bb24:	f803 cb01 	strb.w	ip, [r3], #1
    bb28:	1e52      	subs	r2, r2, #1
    bb2a:	d1fb      	bne.n	bb24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    bb2c:	bc70      	pop	{r4, r5, r6}
    bb2e:	4770      	bx	lr
    bb30:	f04f 30ff 	mov.w	r0, #4294967295
    bb34:	4770      	bx	lr
    bb36:	2000      	movs	r0, #0
    bb38:	4770      	bx	lr
    bb3a:	2000      	movs	r0, #0
    bb3c:	4770      	bx	lr
    bb3e:	f04f 30ff 	mov.w	r0, #4294967295
    bb42:	4770      	bx	lr
    bb44:	4770      	bx	lr
    bb46:	4770      	bx	lr
    bb48:	2000      	movs	r0, #0
    bb4a:	4770      	bx	lr
    bb4c:	f04f 30ff 	mov.w	r0, #4294967295
    bb50:	4770      	bx	lr
    bb52:	f04f 30ff 	mov.w	r0, #4294967295
    bb56:	4770      	bx	lr
    bb58:	2100      	movs	r1, #0
    bb5a:	7001      	strb	r1, [r0, #0]
    bb5c:	4770      	bx	lr
    bb5e:	f04f 30ff 	mov.w	r0, #4294967295
    bb62:	4770      	bx	lr
    bb64:	f04f 30ff 	mov.w	r0, #4294967295
    bb68:	4770      	bx	lr
    bb6a:	2000      	movs	r0, #0
    bb6c:	4770      	bx	lr
    bb6e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    bb72:	4605      	mov	r5, r0
    bb74:	f100 0003 	add.w	r0, r0, #3
    bb78:	f020 0003 	bic.w	r0, r0, #3
    bb7c:	460c      	mov	r4, r1
    bb7e:	9000      	str	r0, [sp, #0]
    bb80:	7849      	ldrb	r1, [r1, #1]
    bb82:	f88d 1004 	strb.w	r1, [sp, #4]
    bb86:	78a1      	ldrb	r1, [r4, #2]
    bb88:	0016      	movs	r6, r2
    bb8a:	f88d 1005 	strb.w	r1, [sp, #5]
    bb8e:	d000      	beq.n	bb92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
    bb90:	2000      	movs	r0, #0
    bb92:	a901      	add	r1, sp, #4
    bb94:	f7f8 fa9c 	bl	40d0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    bb98:	9900      	ldr	r1, [sp, #0]
    bb9a:	4408      	add	r0, r1
    bb9c:	9000      	str	r0, [sp, #0]
    bb9e:	78a1      	ldrb	r1, [r4, #2]
    bba0:	b141      	cbz	r1, bbb4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
    bba2:	8a63      	ldrh	r3, [r4, #18]
    bba4:	78e2      	ldrb	r2, [r4, #3]
    bba6:	b106      	cbz	r6, bbaa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
    bba8:	2000      	movs	r0, #0
    bbaa:	f7f8 fd21 	bl	45f0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    bbae:	9900      	ldr	r1, [sp, #0]
    bbb0:	4408      	add	r0, r1
    bbb2:	9000      	str	r0, [sp, #0]
    bbb4:	4632      	mov	r2, r6
    bbb6:	4621      	mov	r1, r4
    bbb8:	4668      	mov	r0, sp
    bbba:	f000 f808 	bl	bbce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
    bbbe:	9800      	ldr	r0, [sp, #0]
    bbc0:	1dc0      	adds	r0, r0, #7
    bbc2:	f020 0007 	bic.w	r0, r0, #7
    bbc6:	9000      	str	r0, [sp, #0]
    bbc8:	1b40      	subs	r0, r0, r5
    bbca:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    bbce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bbd2:	4606      	mov	r6, r0
    bbd4:	460c      	mov	r4, r1
    bbd6:	7808      	ldrb	r0, [r1, #0]
    bbd8:	7849      	ldrb	r1, [r1, #1]
    bbda:	2700      	movs	r7, #0
    bbdc:	4408      	add	r0, r1
    bbde:	4691      	mov	r9, r2
    bbe0:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    bbe4:	463d      	mov	r5, r7
    bbe6:	e00e      	b.n	bc06 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    bbe8:	7a23      	ldrb	r3, [r4, #8]
    bbea:	2b02      	cmp	r3, #2
    bbec:	d200      	bcs.n	bbf0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    bbee:	2302      	movs	r3, #2
    bbf0:	79e2      	ldrb	r2, [r4, #7]
    bbf2:	2a03      	cmp	r2, #3
    bbf4:	d200      	bcs.n	bbf8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
    bbf6:	2203      	movs	r2, #3
    bbf8:	79a1      	ldrb	r1, [r4, #6]
    bbfa:	7960      	ldrb	r0, [r4, #5]
    bbfc:	f000 fedf 	bl	c9be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    bc00:	1c6d      	adds	r5, r5, #1
    bc02:	4407      	add	r7, r0
    bc04:	b2ed      	uxtb	r5, r5
    bc06:	4545      	cmp	r5, r8
    bc08:	d3ee      	bcc.n	bbe8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    bc0a:	6830      	ldr	r0, [r6, #0]
    bc0c:	1cc0      	adds	r0, r0, #3
    bc0e:	f020 0003 	bic.w	r0, r0, #3
    bc12:	6030      	str	r0, [r6, #0]
    bc14:	f1b9 0f00 	cmp.w	r9, #0
    bc18:	d000      	beq.n	bc1c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
    bc1a:	2000      	movs	r0, #0
    bc1c:	463a      	mov	r2, r7
    bc1e:	4641      	mov	r1, r8
    bc20:	f7f8 fc30 	bl	4484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    bc24:	6831      	ldr	r1, [r6, #0]
    bc26:	4408      	add	r0, r1
    bc28:	6030      	str	r0, [r6, #0]
    bc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000bc2e <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    bc2e:	2000      	movs	r0, #0
    bc30:	4770      	bx	lr

0000bc32 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    bc32:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    bc34:	4604      	mov	r4, r0
    bc36:	1d01      	adds	r1, r0, #4
    bc38:	4668      	mov	r0, sp
    bc3a:	f7fa f8f9 	bl	5e30 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    bc3e:	2800      	cmp	r0, #0
    bc40:	d004      	beq.n	bc4c <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    bc42:	4669      	mov	r1, sp
    bc44:	4620      	mov	r0, r4
    bc46:	f000 f848 	bl	bcda <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    bc4a:	2001      	movs	r0, #1
    bc4c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000bc4e <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    bc4e:	b50e      	push	{r1, r2, r3, lr}
    bc50:	4601      	mov	r1, r0
    bc52:	4668      	mov	r0, sp
    bc54:	f000 f827 	bl	bca6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    bc58:	4668      	mov	r0, sp
    bc5a:	f001 fc76 	bl	d54a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    bc5e:	bd0e      	pop	{r1, r2, r3, pc}

0000bc60 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    bc60:	b510      	push	{r4, lr}
    bc62:	4604      	mov	r4, r0
    bc64:	4620      	mov	r0, r4
    bc66:	f7f8 f921 	bl	3eac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    bc6a:	2800      	cmp	r0, #0
    bc6c:	d006      	beq.n	bc7c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    bc6e:	78a1      	ldrb	r1, [r4, #2]
    bc70:	7820      	ldrb	r0, [r4, #0]
    bc72:	f000 f804 	bl	bc7e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    bc76:	2800      	cmp	r0, #0
    bc78:	d0f4      	beq.n	bc64 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    bc7a:	2001      	movs	r0, #1
    bc7c:	bd10      	pop	{r4, pc}
    bc7e:	b570      	push	{r4, r5, r6, lr}
    bc80:	460c      	mov	r4, r1
    bc82:	4605      	mov	r5, r0
    bc84:	f7f8 f984 	bl	3f90 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    bc88:	2800      	cmp	r0, #0
    bc8a:	d002      	beq.n	bc92 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    bc8c:	2d3e      	cmp	r5, #62	; 0x3e
    bc8e:	d001      	beq.n	bc94 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    bc90:	2001      	movs	r0, #1
    bc92:	bd70      	pop	{r4, r5, r6, pc}
    bc94:	2c12      	cmp	r4, #18
    bc96:	d004      	beq.n	bca2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    bc98:	4620      	mov	r0, r4
    bc9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bc9e:	f7f8 b993 	b.w	3fc8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    bca2:	2000      	movs	r0, #0
    bca4:	bd70      	pop	{r4, r5, r6, pc}

0000bca6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    bca6:	880a      	ldrh	r2, [r1, #0]
    bca8:	f3c2 020b 	ubfx	r2, r2, #0, #12
    bcac:	8002      	strh	r2, [r0, #0]
    bcae:	884a      	ldrh	r2, [r1, #2]
    bcb0:	8042      	strh	r2, [r0, #2]
    bcb2:	784a      	ldrb	r2, [r1, #1]
    bcb4:	0993      	lsrs	r3, r2, #6
    bcb6:	2200      	movs	r2, #0
    bcb8:	7142      	strb	r2, [r0, #5]
    bcba:	784b      	ldrb	r3, [r1, #1]
    bcbc:	f3c3 1301 	ubfx	r3, r3, #4, #2
    bcc0:	b11b      	cbz	r3, bcca <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    bcc2:	2b01      	cmp	r3, #1
    bcc4:	d005      	beq.n	bcd2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    bcc6:	2b02      	cmp	r3, #2
    bcc8:	d005      	beq.n	bcd6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    bcca:	7102      	strb	r2, [r0, #4]
    bccc:	1d09      	adds	r1, r1, #4
    bcce:	6081      	str	r1, [r0, #8]
    bcd0:	4770      	bx	lr
    bcd2:	2201      	movs	r2, #1
    bcd4:	e7f9      	b.n	bcca <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    bcd6:	2202      	movs	r2, #2
    bcd8:	e7f7      	b.n	bcca <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000bcda <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    bcda:	b510      	push	{r4, lr}
    bcdc:	460c      	mov	r4, r1
    bcde:	7809      	ldrb	r1, [r1, #0]
    bce0:	7001      	strb	r1, [r0, #0]
    bce2:	7841      	ldrb	r1, [r0, #1]
    bce4:	f021 010f 	bic.w	r1, r1, #15
    bce8:	7041      	strb	r1, [r0, #1]
    bcea:	8822      	ldrh	r2, [r4, #0]
    bcec:	f3c2 2203 	ubfx	r2, r2, #8, #4
    bcf0:	4311      	orrs	r1, r2
    bcf2:	7041      	strb	r1, [r0, #1]
    bcf4:	78a2      	ldrb	r2, [r4, #2]
    bcf6:	7082      	strb	r2, [r0, #2]
    bcf8:	8862      	ldrh	r2, [r4, #2]
    bcfa:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    bcfe:	0a12      	lsrs	r2, r2, #8
    bd00:	70c2      	strb	r2, [r0, #3]
    bd02:	7041      	strb	r1, [r0, #1]
    bd04:	7922      	ldrb	r2, [r4, #4]
    bd06:	f002 0203 	and.w	r2, r2, #3
    bd0a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    bd0e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    bd12:	7041      	strb	r1, [r0, #1]
    bd14:	7962      	ldrb	r2, [r4, #5]
    bd16:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    bd1a:	7041      	strb	r1, [r0, #1]
    bd1c:	68a1      	ldr	r1, [r4, #8]
    bd1e:	1d02      	adds	r2, r0, #4
    bd20:	4291      	cmp	r1, r2
    bd22:	d006      	beq.n	bd32 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    bd24:	8862      	ldrh	r2, [r4, #2]
    bd26:	2afb      	cmp	r2, #251	; 0xfb
    bd28:	d300      	bcc.n	bd2c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    bd2a:	22fb      	movs	r2, #251	; 0xfb
    bd2c:	1d00      	adds	r0, r0, #4
    bd2e:	f7ff fe25 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    bd32:	78a0      	ldrb	r0, [r4, #2]
    bd34:	1d00      	adds	r0, r0, #4
    bd36:	b2c0      	uxtb	r0, r0
    bd38:	bd10      	pop	{r4, pc}

0000bd3a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    bd3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd3e:	4604      	mov	r4, r0
    bd40:	780f      	ldrb	r7, [r1, #0]
    bd42:	2000      	movs	r0, #0
    bd44:	250c      	movs	r5, #12
    bd46:	2605      	movs	r6, #5
    bd48:	223e      	movs	r2, #62	; 0x3e
    bd4a:	23ff      	movs	r3, #255	; 0xff
    bd4c:	2f1b      	cmp	r7, #27
    bd4e:	d27d      	bcs.n	be4c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    bd50:	e8df f007 	tbb	[pc, r7]
    bd54:	27250eea 	.word	0x27250eea
    bd58:	816d632d 	.word	0x816d632d
    bd5c:	bcb1af9b 	.word	0xbcb1af9b
    bd60:	eaf4e2c7 	.word	0xeaf4e2c7
    bd64:	d5d231ea 	.word	0xd5d231ea
    bd68:	eff0f1fd 	.word	0xeff0f1fd
    bd6c:	00ecedee 	.word	0x00ecedee
    bd70:	7025      	strb	r5, [r4, #0]
    bd72:	7908      	ldrb	r0, [r1, #4]
    bd74:	70a0      	strb	r0, [r4, #2]
    bd76:	7948      	ldrb	r0, [r1, #5]
    bd78:	70e0      	strb	r0, [r4, #3]
    bd7a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    bd7e:	0a00      	lsrs	r0, r0, #8
    bd80:	7120      	strb	r0, [r4, #4]
    bd82:	79c8      	ldrb	r0, [r1, #7]
    bd84:	7160      	strb	r0, [r4, #5]
    bd86:	7a08      	ldrb	r0, [r1, #8]
    bd88:	71a0      	strb	r0, [r4, #6]
    bd8a:	8908      	ldrh	r0, [r1, #8]
    bd8c:	0a00      	lsrs	r0, r0, #8
    bd8e:	71e0      	strb	r0, [r4, #7]
    bd90:	7a88      	ldrb	r0, [r1, #10]
    bd92:	7220      	strb	r0, [r4, #8]
    bd94:	8948      	ldrh	r0, [r1, #10]
    bd96:	0a00      	lsrs	r0, r0, #8
    bd98:	7260      	strb	r0, [r4, #9]
    bd9a:	2008      	movs	r0, #8
    bd9c:	e0c2      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bd9e:	2010      	movs	r0, #16
    bda0:	e000      	b.n	bda4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    bda2:	201a      	movs	r0, #26
    bda4:	7020      	strb	r0, [r4, #0]
    bda6:	7908      	ldrb	r0, [r1, #4]
    bda8:	70a0      	strb	r0, [r4, #2]
    bdaa:	2001      	movs	r0, #1
    bdac:	e0ba      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bdae:	4620      	mov	r0, r4
    bdb0:	f000 f946 	bl	c040 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    bdb4:	e0b4      	b.n	bf20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    bdb6:	7022      	strb	r2, [r4, #0]
    bdb8:	200a      	movs	r0, #10
    bdba:	70a0      	strb	r0, [r4, #2]
    bdbc:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    bdc0:	70e0      	strb	r0, [r4, #3]
    bdc2:	7888      	ldrb	r0, [r1, #2]
    bdc4:	7120      	strb	r0, [r4, #4]
    bdc6:	8848      	ldrh	r0, [r1, #2]
    bdc8:	0a00      	lsrs	r0, r0, #8
    bdca:	7160      	strb	r0, [r4, #5]
    bdcc:	7908      	ldrb	r0, [r1, #4]
    bdce:	71a0      	strb	r0, [r4, #6]
    bdd0:	7948      	ldrb	r0, [r1, #5]
    bdd2:	71e0      	strb	r0, [r4, #7]
    bdd4:	f8d1 0006 	ldr.w	r0, [r1, #6]
    bdd8:	60a0      	str	r0, [r4, #8]
    bdda:	8948      	ldrh	r0, [r1, #10]
    bddc:	81a0      	strh	r0, [r4, #12]
    bdde:	68c8      	ldr	r0, [r1, #12]
    bde0:	f8c4 000e 	str.w	r0, [r4, #14]
    bde4:	8a08      	ldrh	r0, [r1, #16]
    bde6:	8260      	strh	r0, [r4, #18]
    bde8:	f8d1 0012 	ldr.w	r0, [r1, #18]
    bdec:	6160      	str	r0, [r4, #20]
    bdee:	8ac8      	ldrh	r0, [r1, #22]
    bdf0:	8320      	strh	r0, [r4, #24]
    bdf2:	7e08      	ldrb	r0, [r1, #24]
    bdf4:	76a0      	strb	r0, [r4, #26]
    bdf6:	8b08      	ldrh	r0, [r1, #24]
    bdf8:	0a00      	lsrs	r0, r0, #8
    bdfa:	76e0      	strb	r0, [r4, #27]
    bdfc:	7e88      	ldrb	r0, [r1, #26]
    bdfe:	7720      	strb	r0, [r4, #28]
    be00:	8b48      	ldrh	r0, [r1, #26]
    be02:	0a00      	lsrs	r0, r0, #8
    be04:	7760      	strb	r0, [r4, #29]
    be06:	7f08      	ldrb	r0, [r1, #28]
    be08:	77a0      	strb	r0, [r4, #30]
    be0a:	8b88      	ldrh	r0, [r1, #28]
    be0c:	0a00      	lsrs	r0, r0, #8
    be0e:	77e0      	strb	r0, [r4, #31]
    be10:	7f88      	ldrb	r0, [r1, #30]
    be12:	f884 0020 	strb.w	r0, [r4, #32]
    be16:	201f      	movs	r0, #31
    be18:	e084      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    be1a:	7022      	strb	r2, [r4, #0]
    be1c:	2014      	movs	r0, #20
    be1e:	70a0      	strb	r0, [r4, #2]
    be20:	7908      	ldrb	r0, [r1, #4]
    be22:	70e0      	strb	r0, [r4, #3]
    be24:	8888      	ldrh	r0, [r1, #4]
    be26:	0a00      	lsrs	r0, r0, #8
    be28:	7120      	strb	r0, [r4, #4]
    be2a:	7988      	ldrb	r0, [r1, #6]
    be2c:	e0a7      	b.n	bf7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    be2e:	7022      	strb	r2, [r4, #0]
    be30:	2004      	movs	r0, #4
    be32:	70a0      	strb	r0, [r4, #2]
    be34:	7908      	ldrb	r0, [r1, #4]
    be36:	70e0      	strb	r0, [r4, #3]
    be38:	7988      	ldrb	r0, [r1, #6]
    be3a:	7120      	strb	r0, [r4, #4]
    be3c:	88c8      	ldrh	r0, [r1, #6]
    be3e:	0a00      	lsrs	r0, r0, #8
    be40:	7160      	strb	r0, [r4, #5]
    be42:	6888      	ldr	r0, [r1, #8]
    be44:	f8c4 0006 	str.w	r0, [r4, #6]
    be48:	68c8      	ldr	r0, [r1, #12]
    be4a:	e000      	b.n	be4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    be4c:	e06c      	b.n	bf28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    be4e:	f8c4 000a 	str.w	r0, [r4, #10]
    be52:	200c      	movs	r0, #12
    be54:	e066      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    be56:	7022      	strb	r2, [r4, #0]
    be58:	2003      	movs	r0, #3
    be5a:	70a0      	strb	r0, [r4, #2]
    be5c:	7908      	ldrb	r0, [r1, #4]
    be5e:	70e0      	strb	r0, [r4, #3]
    be60:	7988      	ldrb	r0, [r1, #6]
    be62:	7120      	strb	r0, [r4, #4]
    be64:	88c8      	ldrh	r0, [r1, #6]
    be66:	0a00      	lsrs	r0, r0, #8
    be68:	7160      	strb	r0, [r4, #5]
    be6a:	7a08      	ldrb	r0, [r1, #8]
    be6c:	71a0      	strb	r0, [r4, #6]
    be6e:	8908      	ldrh	r0, [r1, #8]
    be70:	0a00      	lsrs	r0, r0, #8
    be72:	71e0      	strb	r0, [r4, #7]
    be74:	7a88      	ldrb	r0, [r1, #10]
    be76:	7220      	strb	r0, [r4, #8]
    be78:	8948      	ldrh	r0, [r1, #10]
    be7a:	0a00      	lsrs	r0, r0, #8
    be7c:	7260      	strb	r0, [r4, #9]
    be7e:	7b08      	ldrb	r0, [r1, #12]
    be80:	72a0      	strb	r0, [r4, #10]
    be82:	8988      	ldrh	r0, [r1, #12]
    be84:	0a00      	lsrs	r0, r0, #8
    be86:	72e0      	strb	r0, [r4, #11]
    be88:	e0d8      	b.n	c03c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    be8a:	7022      	strb	r2, [r4, #0]
    be8c:	70a6      	strb	r6, [r4, #2]
    be8e:	7908      	ldrb	r0, [r1, #4]
    be90:	70e0      	strb	r0, [r4, #3]
    be92:	8888      	ldrh	r0, [r1, #4]
    be94:	0a00      	lsrs	r0, r0, #8
    be96:	7120      	strb	r0, [r4, #4]
    be98:	f8d1 0006 	ldr.w	r0, [r1, #6]
    be9c:	f8c4 0005 	str.w	r0, [r4, #5]
    bea0:	f8d1 000a 	ldr.w	r0, [r1, #10]
    bea4:	f8c4 0009 	str.w	r0, [r4, #9]
    bea8:	89c8      	ldrh	r0, [r1, #14]
    beaa:	f8a4 000d 	strh.w	r0, [r4, #13]
    beae:	200d      	movs	r0, #13
    beb0:	e038      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    beb2:	2011      	movs	r0, #17
    beb4:	e043      	b.n	bf3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    beb6:	7026      	strb	r6, [r4, #0]
    beb8:	7908      	ldrb	r0, [r1, #4]
    beba:	70a0      	strb	r0, [r4, #2]
    bebc:	7948      	ldrb	r0, [r1, #5]
    bebe:	70e0      	strb	r0, [r4, #3]
    bec0:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    bec4:	0a00      	lsrs	r0, r0, #8
    bec6:	7120      	strb	r0, [r4, #4]
    bec8:	79c8      	ldrb	r0, [r1, #7]
    beca:	e058      	b.n	bf7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    becc:	2008      	movs	r0, #8
    bece:	7020      	strb	r0, [r4, #0]
    bed0:	7908      	ldrb	r0, [r1, #4]
    bed2:	70a0      	strb	r0, [r4, #2]
    bed4:	7988      	ldrb	r0, [r1, #6]
    bed6:	70e0      	strb	r0, [r4, #3]
    bed8:	88c8      	ldrh	r0, [r1, #6]
    beda:	0a00      	lsrs	r0, r0, #8
    bedc:	7120      	strb	r0, [r4, #4]
    bede:	7a08      	ldrb	r0, [r1, #8]
    bee0:	e04d      	b.n	bf7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    bee2:	2030      	movs	r0, #48	; 0x30
    bee4:	7020      	strb	r0, [r4, #0]
    bee6:	7908      	ldrb	r0, [r1, #4]
    bee8:	70a0      	strb	r0, [r4, #2]
    beea:	7988      	ldrb	r0, [r1, #6]
    beec:	70e0      	strb	r0, [r4, #3]
    beee:	88c8      	ldrh	r0, [r1, #6]
    bef0:	0a00      	lsrs	r0, r0, #8
    bef2:	7120      	strb	r0, [r4, #4]
    bef4:	2003      	movs	r0, #3
    bef6:	e015      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bef8:	7022      	strb	r2, [r4, #0]
    befa:	2007      	movs	r0, #7
    befc:	e044      	b.n	bf88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    befe:	7022      	strb	r2, [r4, #0]
    bf00:	70a5      	strb	r5, [r4, #2]
    bf02:	7908      	ldrb	r0, [r1, #4]
    bf04:	70e0      	strb	r0, [r4, #3]
    bf06:	7988      	ldrb	r0, [r1, #6]
    bf08:	7120      	strb	r0, [r4, #4]
    bf0a:	88c8      	ldrh	r0, [r1, #6]
    bf0c:	0a00      	lsrs	r0, r0, #8
    bf0e:	7160      	strb	r0, [r4, #5]
    bf10:	7a08      	ldrb	r0, [r1, #8]
    bf12:	71a0      	strb	r0, [r4, #6]
    bf14:	7a48      	ldrb	r0, [r1, #9]
    bf16:	e027      	b.n	bf68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
    bf18:	4620      	mov	r0, r4
    bf1a:	1d09      	adds	r1, r1, #4
    bf1c:	f7f8 f80a 	bl	3f34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    bf20:	2800      	cmp	r0, #0
    bf22:	d001      	beq.n	bf28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    bf24:	7060      	strb	r0, [r4, #1]
    bf26:	1c80      	adds	r0, r0, #2
    bf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf2c:	e073      	b.n	c016 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    bf2e:	e047      	b.n	bfc0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    bf30:	e028      	b.n	bf84 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    bf32:	e053      	b.n	bfdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    bf34:	e061      	b.n	bffa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    bf36:	e01a      	b.n	bf6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    bf38:	e009      	b.n	bf4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    bf3a:	e7ff      	b.n	bf3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    bf3c:	2057      	movs	r0, #87	; 0x57
    bf3e:	7020      	strb	r0, [r4, #0]
    bf40:	7908      	ldrb	r0, [r1, #4]
    bf42:	70a0      	strb	r0, [r4, #2]
    bf44:	8888      	ldrh	r0, [r1, #4]
    bf46:	0a00      	lsrs	r0, r0, #8
    bf48:	70e0      	strb	r0, [r4, #3]
    bf4a:	2002      	movs	r0, #2
    bf4c:	e7ea      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bf4e:	7022      	strb	r2, [r4, #0]
    bf50:	2012      	movs	r0, #18
    bf52:	70a0      	strb	r0, [r4, #2]
    bf54:	7908      	ldrb	r0, [r1, #4]
    bf56:	70e0      	strb	r0, [r4, #3]
    bf58:	7948      	ldrb	r0, [r1, #5]
    bf5a:	7120      	strb	r0, [r4, #4]
    bf5c:	7988      	ldrb	r0, [r1, #6]
    bf5e:	7160      	strb	r0, [r4, #5]
    bf60:	88c8      	ldrh	r0, [r1, #6]
    bf62:	0a00      	lsrs	r0, r0, #8
    bf64:	71a0      	strb	r0, [r4, #6]
    bf66:	7a08      	ldrb	r0, [r1, #8]
    bf68:	71e0      	strb	r0, [r4, #7]
    bf6a:	2006      	movs	r0, #6
    bf6c:	e7da      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bf6e:	7023      	strb	r3, [r4, #0]
    bf70:	20a1      	movs	r0, #161	; 0xa1
    bf72:	70a0      	strb	r0, [r4, #2]
    bf74:	7908      	ldrb	r0, [r1, #4]
    bf76:	70e0      	strb	r0, [r4, #3]
    bf78:	7948      	ldrb	r0, [r1, #5]
    bf7a:	7120      	strb	r0, [r4, #4]
    bf7c:	2000      	movs	r0, #0
    bf7e:	7160      	strb	r0, [r4, #5]
    bf80:	2004      	movs	r0, #4
    bf82:	e7cf      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bf84:	7023      	strb	r3, [r4, #0]
    bf86:	20a2      	movs	r0, #162	; 0xa2
    bf88:	70a0      	strb	r0, [r4, #2]
    bf8a:	7908      	ldrb	r0, [r1, #4]
    bf8c:	70e0      	strb	r0, [r4, #3]
    bf8e:	8888      	ldrh	r0, [r1, #4]
    bf90:	0a00      	lsrs	r0, r0, #8
    bf92:	7120      	strb	r0, [r4, #4]
    bf94:	7988      	ldrb	r0, [r1, #6]
    bf96:	7160      	strb	r0, [r4, #5]
    bf98:	88c8      	ldrh	r0, [r1, #6]
    bf9a:	0a00      	lsrs	r0, r0, #8
    bf9c:	71a0      	strb	r0, [r4, #6]
    bf9e:	7a08      	ldrb	r0, [r1, #8]
    bfa0:	71e0      	strb	r0, [r4, #7]
    bfa2:	8908      	ldrh	r0, [r1, #8]
    bfa4:	0a00      	lsrs	r0, r0, #8
    bfa6:	7220      	strb	r0, [r4, #8]
    bfa8:	7a88      	ldrb	r0, [r1, #10]
    bfaa:	7260      	strb	r0, [r4, #9]
    bfac:	8948      	ldrh	r0, [r1, #10]
    bfae:	0a00      	lsrs	r0, r0, #8
    bfb0:	72a0      	strb	r0, [r4, #10]
    bfb2:	7b08      	ldrb	r0, [r1, #12]
    bfb4:	72e0      	strb	r0, [r4, #11]
    bfb6:	8988      	ldrh	r0, [r1, #12]
    bfb8:	0a00      	lsrs	r0, r0, #8
    bfba:	7320      	strb	r0, [r4, #12]
    bfbc:	200b      	movs	r0, #11
    bfbe:	e7b1      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bfc0:	7023      	strb	r3, [r4, #0]
    bfc2:	20a3      	movs	r0, #163	; 0xa3
    bfc4:	70a0      	strb	r0, [r4, #2]
    bfc6:	7908      	ldrb	r0, [r1, #4]
    bfc8:	70e0      	strb	r0, [r4, #3]
    bfca:	8888      	ldrh	r0, [r1, #4]
    bfcc:	0a00      	lsrs	r0, r0, #8
    bfce:	7120      	strb	r0, [r4, #4]
    bfd0:	7988      	ldrb	r0, [r1, #6]
    bfd2:	7160      	strb	r0, [r4, #5]
    bfd4:	79c8      	ldrb	r0, [r1, #7]
    bfd6:	71a0      	strb	r0, [r4, #6]
    bfd8:	2005      	movs	r0, #5
    bfda:	e7a3      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bfdc:	7022      	strb	r2, [r4, #0]
    bfde:	2013      	movs	r0, #19
    bfe0:	70a0      	strb	r0, [r4, #2]
    bfe2:	7908      	ldrb	r0, [r1, #4]
    bfe4:	70e0      	strb	r0, [r4, #3]
    bfe6:	7948      	ldrb	r0, [r1, #5]
    bfe8:	7120      	strb	r0, [r4, #4]
    bfea:	f8d1 0006 	ldr.w	r0, [r1, #6]
    bfee:	f8c4 0005 	str.w	r0, [r4, #5]
    bff2:	8948      	ldrh	r0, [r1, #10]
    bff4:	f8a4 0009 	strh.w	r0, [r4, #9]
    bff8:	e020      	b.n	c03c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    bffa:	7023      	strb	r3, [r4, #0]
    bffc:	20a4      	movs	r0, #164	; 0xa4
    bffe:	70a0      	strb	r0, [r4, #2]
    c000:	7908      	ldrb	r0, [r1, #4]
    c002:	70e0      	strb	r0, [r4, #3]
    c004:	8888      	ldrh	r0, [r1, #4]
    c006:	0a00      	lsrs	r0, r0, #8
    c008:	7120      	strb	r0, [r4, #4]
    c00a:	7988      	ldrb	r0, [r1, #6]
    c00c:	7160      	strb	r0, [r4, #5]
    c00e:	79c8      	ldrb	r0, [r1, #7]
    c010:	71a0      	strb	r0, [r4, #6]
    c012:	2007      	movs	r0, #7
    c014:	e786      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c016:	7023      	strb	r3, [r4, #0]
    c018:	2080      	movs	r0, #128	; 0x80
    c01a:	70a0      	strb	r0, [r4, #2]
    c01c:	888a      	ldrh	r2, [r1, #4]
    c01e:	f8a4 2003 	strh.w	r2, [r4, #3]
    c022:	88ca      	ldrh	r2, [r1, #6]
    c024:	f8a4 2005 	strh.w	r2, [r4, #5]
    c028:	7a0a      	ldrb	r2, [r1, #8]
    c02a:	71e2      	strb	r2, [r4, #7]
    c02c:	7a4a      	ldrb	r2, [r1, #9]
    c02e:	8122      	strh	r2, [r4, #8]
    c030:	7a8a      	ldrb	r2, [r1, #10]
    c032:	72a2      	strb	r2, [r4, #10]
    c034:	7ac9      	ldrb	r1, [r1, #11]
    c036:	f001 0101 	and.w	r1, r1, #1
    c03a:	72e1      	strb	r1, [r4, #11]
    c03c:	200a      	movs	r0, #10
    c03e:	e771      	b.n	bf24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000c040 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    c040:	223e      	movs	r2, #62	; 0x3e
    c042:	7002      	strb	r2, [r0, #0]
    c044:	2201      	movs	r2, #1
    c046:	7082      	strb	r2, [r0, #2]
    c048:	790a      	ldrb	r2, [r1, #4]
    c04a:	70c2      	strb	r2, [r0, #3]
    c04c:	798a      	ldrb	r2, [r1, #6]
    c04e:	7102      	strb	r2, [r0, #4]
    c050:	88ca      	ldrh	r2, [r1, #6]
    c052:	0a12      	lsrs	r2, r2, #8
    c054:	7142      	strb	r2, [r0, #5]
    c056:	7a0a      	ldrb	r2, [r1, #8]
    c058:	7182      	strb	r2, [r0, #6]
    c05a:	7a4a      	ldrb	r2, [r1, #9]
    c05c:	71c2      	strb	r2, [r0, #7]
    c05e:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c062:	6082      	str	r2, [r0, #8]
    c064:	89ca      	ldrh	r2, [r1, #14]
    c066:	8182      	strh	r2, [r0, #12]
    c068:	7c0a      	ldrb	r2, [r1, #16]
    c06a:	7382      	strb	r2, [r0, #14]
    c06c:	8a0a      	ldrh	r2, [r1, #16]
    c06e:	0a12      	lsrs	r2, r2, #8
    c070:	73c2      	strb	r2, [r0, #15]
    c072:	7c8a      	ldrb	r2, [r1, #18]
    c074:	7402      	strb	r2, [r0, #16]
    c076:	8a4a      	ldrh	r2, [r1, #18]
    c078:	0a12      	lsrs	r2, r2, #8
    c07a:	7442      	strb	r2, [r0, #17]
    c07c:	7d0a      	ldrb	r2, [r1, #20]
    c07e:	7482      	strb	r2, [r0, #18]
    c080:	8a8a      	ldrh	r2, [r1, #20]
    c082:	0a12      	lsrs	r2, r2, #8
    c084:	74c2      	strb	r2, [r0, #19]
    c086:	7d89      	ldrb	r1, [r1, #22]
    c088:	7501      	strb	r1, [r0, #20]
    c08a:	2013      	movs	r0, #19
    c08c:	4770      	bx	lr

0000c08e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c08e:	223e      	movs	r2, #62	; 0x3e
    c090:	7002      	strb	r2, [r0, #0]
    c092:	2201      	movs	r2, #1
    c094:	7082      	strb	r2, [r0, #2]
    c096:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c09a:	70c2      	strb	r2, [r0, #3]
    c09c:	788a      	ldrb	r2, [r1, #2]
    c09e:	7102      	strb	r2, [r0, #4]
    c0a0:	884a      	ldrh	r2, [r1, #2]
    c0a2:	0a12      	lsrs	r2, r2, #8
    c0a4:	7142      	strb	r2, [r0, #5]
    c0a6:	790a      	ldrb	r2, [r1, #4]
    c0a8:	7182      	strb	r2, [r0, #6]
    c0aa:	794a      	ldrb	r2, [r1, #5]
    c0ac:	71c2      	strb	r2, [r0, #7]
    c0ae:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c0b2:	6082      	str	r2, [r0, #8]
    c0b4:	894a      	ldrh	r2, [r1, #10]
    c0b6:	8182      	strh	r2, [r0, #12]
    c0b8:	7e0a      	ldrb	r2, [r1, #24]
    c0ba:	7382      	strb	r2, [r0, #14]
    c0bc:	8b0a      	ldrh	r2, [r1, #24]
    c0be:	0a12      	lsrs	r2, r2, #8
    c0c0:	73c2      	strb	r2, [r0, #15]
    c0c2:	7e8a      	ldrb	r2, [r1, #26]
    c0c4:	7402      	strb	r2, [r0, #16]
    c0c6:	8b4a      	ldrh	r2, [r1, #26]
    c0c8:	0a12      	lsrs	r2, r2, #8
    c0ca:	7442      	strb	r2, [r0, #17]
    c0cc:	7f0a      	ldrb	r2, [r1, #28]
    c0ce:	7482      	strb	r2, [r0, #18]
    c0d0:	8b8a      	ldrh	r2, [r1, #28]
    c0d2:	0a12      	lsrs	r2, r2, #8
    c0d4:	74c2      	strb	r2, [r0, #19]
    c0d6:	7f89      	ldrb	r1, [r1, #30]
    c0d8:	7501      	strb	r1, [r0, #20]
    c0da:	2113      	movs	r1, #19
    c0dc:	7041      	strb	r1, [r0, #1]
    c0de:	4608      	mov	r0, r1
    c0e0:	4770      	bx	lr

0000c0e2 <sdc_hci_data_get>:
    c0e2:	b510      	push	{r4, lr}
    c0e4:	b120      	cbz	r0, c0f0 <sdc_hci_data_get+0xe>
    c0e6:	f7ff fda4 	bl	bc32 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c0ea:	b120      	cbz	r0, c0f6 <sdc_hci_data_get+0x14>
    c0ec:	2000      	movs	r0, #0
    c0ee:	bd10      	pop	{r4, pc}
    c0f0:	f06f 0015 	mvn.w	r0, #21
    c0f4:	bd10      	pop	{r4, pc}
    c0f6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c0fa:	bd10      	pop	{r4, pc}

0000c0fc <sdc_hci_data_put>:
    c0fc:	b510      	push	{r4, lr}
    c0fe:	f06f 0415 	mvn.w	r4, #21
    c102:	b120      	cbz	r0, c10e <sdc_hci_data_put+0x12>
    c104:	f7ff fda3 	bl	bc4e <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c108:	b108      	cbz	r0, c10e <sdc_hci_data_put+0x12>
    c10a:	2000      	movs	r0, #0
    c10c:	bd10      	pop	{r4, pc}
    c10e:	4620      	mov	r0, r4
    c110:	bd10      	pop	{r4, pc}

0000c112 <sdc_hci_evt_get>:
    c112:	b510      	push	{r4, lr}
    c114:	b120      	cbz	r0, c120 <sdc_hci_evt_get+0xe>
    c116:	f7ff fda3 	bl	bc60 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c11a:	b120      	cbz	r0, c126 <sdc_hci_evt_get+0x14>
    c11c:	2000      	movs	r0, #0
    c11e:	bd10      	pop	{r4, pc}
    c120:	f06f 0015 	mvn.w	r0, #21
    c124:	bd10      	pop	{r4, pc}
    c126:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c12a:	bd10      	pop	{r4, pc}

0000c12c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c12c:	f002 beda 	b.w	eee4 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c130 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c130:	f002 bf1c 	b.w	ef6c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c134 <sdc_hci_cmd_cb_set_event_mask>:
    c134:	b510      	push	{r4, lr}
    c136:	f7f7 ff5b 	bl	3ff0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c13a:	2000      	movs	r0, #0
    c13c:	bd10      	pop	{r4, pc}

0000c13e <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c13e:	b510      	push	{r4, lr}
    c140:	f7f7 ff64 	bl	400c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c144:	2000      	movs	r0, #0
    c146:	bd10      	pop	{r4, pc}

0000c148 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c148:	f002 bf2c 	b.w	efa4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c14c <sdc_hci_cmd_vs_conn_event_extend>:
    c14c:	b508      	push	{r3, lr}
    c14e:	7800      	ldrb	r0, [r0, #0]
    c150:	f88d 0000 	strb.w	r0, [sp]
    c154:	4668      	mov	r0, sp
    c156:	f002 fddc 	bl	ed12 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c15a:	bd08      	pop	{r3, pc}

0000c15c <sdc_hci_cmd_vs_conn_update>:
    c15c:	2001      	movs	r0, #1
    c15e:	4770      	bx	lr

0000c160 <sdc_hci_cmd_vs_event_length_set>:
    c160:	f7fd be34 	b.w	9dcc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c164 <sdc_hci_cmd_vs_llpm_mode_set>:
    c164:	2001      	movs	r0, #1
    c166:	4770      	bx	lr

0000c168 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c168:	7800      	ldrb	r0, [r0, #0]
    c16a:	b100      	cbz	r0, c16e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c16c:	2001      	movs	r0, #1
    c16e:	f002 bd55 	b.w	ec1c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c172 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c172:	b570      	push	{r4, r5, r6, lr}
    c174:	4605      	mov	r5, r0
    c176:	2210      	movs	r2, #16
    c178:	2100      	movs	r1, #0
    c17a:	f7ff fc79 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c17e:	2210      	movs	r2, #16
    c180:	2100      	movs	r1, #0
    c182:	f105 0010 	add.w	r0, r5, #16
    c186:	f7ff fc73 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c18a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c18e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c192:	1c40      	adds	r0, r0, #1
    c194:	d10b      	bne.n	c1ae <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c196:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c19a:	1c40      	adds	r0, r0, #1
    c19c:	d107      	bne.n	c1ae <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c19e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c1a2:	1c40      	adds	r0, r0, #1
    c1a4:	d103      	bne.n	c1ae <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c1a6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c1aa:	1c40      	adds	r0, r0, #1
    c1ac:	d00b      	beq.n	c1c6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c1ae:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    c1b2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c1b6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    c1ba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    c1be:	612a      	str	r2, [r5, #16]
    c1c0:	6168      	str	r0, [r5, #20]
    c1c2:	61a9      	str	r1, [r5, #24]
    c1c4:	61eb      	str	r3, [r5, #28]
    c1c6:	2000      	movs	r0, #0
    c1c8:	f7f8 fcb4 	bl	4b34 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c1cc:	b918      	cbnz	r0, c1d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c1ce:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c1d2:	07c0      	lsls	r0, r0, #31
    c1d4:	d118      	bne.n	c208 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c1d6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c1da:	1c40      	adds	r0, r0, #1
    c1dc:	d10b      	bne.n	c1f6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c1de:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c1e2:	1c40      	adds	r0, r0, #1
    c1e4:	d107      	bne.n	c1f6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c1e6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c1ea:	1c40      	adds	r0, r0, #1
    c1ec:	d103      	bne.n	c1f6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c1ee:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c1f2:	1c40      	adds	r0, r0, #1
    c1f4:	d008      	beq.n	c208 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c1f6:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c1fa:	6861      	ldr	r1, [r4, #4]
    c1fc:	68a2      	ldr	r2, [r4, #8]
    c1fe:	68e3      	ldr	r3, [r4, #12]
    c200:	6028      	str	r0, [r5, #0]
    c202:	6069      	str	r1, [r5, #4]
    c204:	60aa      	str	r2, [r5, #8]
    c206:	60eb      	str	r3, [r5, #12]
    c208:	2000      	movs	r0, #0
    c20a:	bd70      	pop	{r4, r5, r6, pc}

0000c20c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c20c:	b538      	push	{r3, r4, r5, lr}
    c20e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c212:	4604      	mov	r4, r0
    c214:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c218:	1c40      	adds	r0, r0, #1
    c21a:	d105      	bne.n	c228 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c21c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c220:	43c0      	mvns	r0, r0
    c222:	0400      	lsls	r0, r0, #16
    c224:	0c00      	lsrs	r0, r0, #16
    c226:	d03e      	beq.n	c2a6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    c228:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c22c:	07c0      	lsls	r0, r0, #31
    c22e:	d03a      	beq.n	c2a6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    c230:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c234:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    c238:	f8ad 1000 	strh.w	r1, [sp]
    c23c:	f8c4 0001 	str.w	r0, [r4, #1]
    c240:	f8bd 0000 	ldrh.w	r0, [sp]
    c244:	f8a4 0005 	strh.w	r0, [r4, #5]
    c248:	79a0      	ldrb	r0, [r4, #6]
    c24a:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c24e:	71a0      	strb	r0, [r4, #6]
    c250:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c254:	1c40      	adds	r0, r0, #1
    c256:	d00f      	beq.n	c278 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c258:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c25c:	1c40      	adds	r0, r0, #1
    c25e:	d00b      	beq.n	c278 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c260:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c264:	1c40      	adds	r0, r0, #1
    c266:	d007      	beq.n	c278 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c268:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c26c:	1c40      	adds	r0, r0, #1
    c26e:	d003      	beq.n	c278 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c270:	2000      	movs	r0, #0
    c272:	f7f8 fc5f 	bl	4b34 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c276:	b140      	cbz	r0, c28a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    c278:	2210      	movs	r2, #16
    c27a:	2100      	movs	r1, #0
    c27c:	1de0      	adds	r0, r4, #7
    c27e:	f7ff fbf7 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c282:	2001      	movs	r0, #1
    c284:	7020      	strb	r0, [r4, #0]
    c286:	2000      	movs	r0, #0
    c288:	bd38      	pop	{r3, r4, r5, pc}
    c28a:	f855 2f90 	ldr.w	r2, [r5, #144]!
    c28e:	6869      	ldr	r1, [r5, #4]
    c290:	68a8      	ldr	r0, [r5, #8]
    c292:	68eb      	ldr	r3, [r5, #12]
    c294:	f8c4 2007 	str.w	r2, [r4, #7]
    c298:	f8c4 100b 	str.w	r1, [r4, #11]
    c29c:	f8c4 000f 	str.w	r0, [r4, #15]
    c2a0:	f8c4 3013 	str.w	r3, [r4, #19]
    c2a4:	e7ed      	b.n	c282 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c2a6:	2000      	movs	r0, #0
    c2a8:	e7ec      	b.n	c284 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000c2aa <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c2aa:	f002 bd24 	b.w	ecf6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c2ae <sdc_hci_cmd_ip_read_bd_addr>:
    c2ae:	f002 be2a 	b.w	ef06 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c2b2 <sdc_hci_cmd_ip_read_local_version_information>:
    c2b2:	f7fd bd99 	b.w	9de8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c2b6 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    c2b6:	f002 ba08 	b.w	e6ca <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000c2ba <sdc_hci_cmd_le_add_device_to_white_list>:
    c2ba:	f002 ba21 	b.w	e700 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c2be <sdc_hci_cmd_le_clear_resolving_list>:
    c2be:	f002 ba36 	b.w	e72e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000c2c2 <sdc_hci_cmd_le_clear_white_list>:
    c2c2:	f002 ba41 	b.w	e748 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c2c6 <sdc_hci_cmd_le_encrypt>:
    c2c6:	f002 ba49 	b.w	e75c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c2ca <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c2ca:	8802      	ldrh	r2, [r0, #0]
    c2cc:	800a      	strh	r2, [r1, #0]
    c2ce:	f002 ba4e 	b.w	e76e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c2d2 <sdc_hci_cmd_le_long_term_key_request_reply>:
    c2d2:	8802      	ldrh	r2, [r0, #0]
    c2d4:	800a      	strh	r2, [r1, #0]
    c2d6:	f002 ba63 	b.w	e7a0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c2da <sdc_hci_cmd_le_rand>:
    c2da:	f002 ba8b 	b.w	e7f4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c2de <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c2de:	f002 ba8f 	b.w	e800 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c2e2 <sdc_hci_cmd_le_read_buffer_size>:
    c2e2:	f7fd bcc9 	b.w	9c78 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c2e6 <sdc_hci_cmd_le_read_channel_map>:
    c2e6:	f7fd bcd1 	b.w	9c8c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c2ea <sdc_hci_cmd_le_read_max_data_length>:
    c2ea:	f002 ba92 	b.w	e812 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c2ee <sdc_hci_cmd_le_read_phy>:
    c2ee:	f002 baa0 	b.w	e832 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c2f2 <sdc_hci_cmd_le_read_remote_features>:
    c2f2:	f7fd bcf5 	b.w	9ce0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c2f6 <sdc_hci_cmd_le_read_resolving_list_size>:
    c2f6:	f002 bac7 	b.w	e888 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000c2fa <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c2fa:	f7fd bd11 	b.w	9d20 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c2fe <sdc_hci_cmd_le_read_transmit_power>:
    c2fe:	f002 bac7 	b.w	e890 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c302 <sdc_hci_cmd_le_read_white_list_size>:
    c302:	f002 bace 	b.w	e8a2 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c306 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    c306:	f002 bad0 	b.w	e8aa <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000c30a <sdc_hci_cmd_le_remove_device_from_white_list>:
    c30a:	f002 bae7 	b.w	e8dc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c30e <sdc_hci_cmd_le_set_address_resolution_enable>:
    c30e:	f002 bafa 	b.w	e906 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000c312 <sdc_hci_cmd_le_set_adv_data>:
    c312:	f002 bb06 	b.w	e922 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c316 <sdc_hci_cmd_le_set_adv_enable>:
    c316:	f002 bb19 	b.w	e94c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c31a <sdc_hci_cmd_le_set_adv_params>:
    c31a:	f002 bb4a 	b.w	e9b2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c31e <sdc_hci_cmd_le_set_data_length>:
    c31e:	f002 bbdd 	b.w	eadc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c322 <sdc_hci_cmd_le_set_default_phy>:
    c322:	f7fd bd0d 	b.w	9d40 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c326 <sdc_hci_cmd_le_set_event_mask>:
    c326:	b510      	push	{r4, lr}
    c328:	f7f7 fe5c 	bl	3fe4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c32c:	2000      	movs	r0, #0
    c32e:	bd10      	pop	{r4, pc}

0000c330 <sdc_hci_cmd_le_set_phy>:
    c330:	f002 bbfb 	b.w	eb2a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c334 <sdc_hci_cmd_le_set_privacy_mode>:
    c334:	f002 bc19 	b.w	eb6a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000c338 <sdc_hci_cmd_le_set_random_address>:
    c338:	f002 bc2d 	b.w	eb96 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c33c <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    c33c:	f002 bc39 	b.w	ebb2 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000c340 <sdc_hci_cmd_le_set_scan_response_data>:
    c340:	f002 bc40 	b.w	ebc4 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c344 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c344:	f002 bc53 	b.w	ebee <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c348 <sdc_hci_cmd_lc_disconnect>:
    c348:	f002 b96b 	b.w	e622 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c34c <sdc_hci_cmd_lc_read_remote_version_information>:
    c34c:	f002 bde7 	b.w	ef1e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c350:	b570      	push	{r4, r5, r6, lr}
    c352:	880b      	ldrh	r3, [r1, #0]
    c354:	7f04      	ldrb	r4, [r0, #28]
    c356:	f100 0524 	add.w	r5, r0, #36	; 0x24
    c35a:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    c35e:	8802      	ldrh	r2, [r0, #0]
    c360:	4435      	add	r5, r6
    c362:	1da4      	adds	r4, r4, #6
    c364:	882d      	ldrh	r5, [r5, #0]
    c366:	4422      	add	r2, r4
    c368:	b292      	uxth	r2, r2
    c36a:	4425      	add	r5, r4
    c36c:	1e54      	subs	r4, r2, #1
    c36e:	442c      	add	r4, r5
    c370:	fb94 f4f2 	sdiv	r4, r4, r2
    c374:	fb02 6204 	mla	r2, r2, r4, r6
    c378:	8840      	ldrh	r0, [r0, #2]
    c37a:	b292      	uxth	r2, r2
    c37c:	4290      	cmp	r0, r2
    c37e:	d903      	bls.n	c388 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c380:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c384:	4310      	orrs	r0, r2
    c386:	e002      	b.n	c38e <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c388:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c38c:	4398      	bics	r0, r3
    c38e:	8008      	strh	r0, [r1, #0]
    c390:	bd70      	pop	{r4, r5, r6, pc}
    c392:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    c396:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c39a:	429a      	cmp	r2, r3
    c39c:	d107      	bne.n	c3ae <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c39e:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c3a2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c3a6:	4288      	cmp	r0, r1
    c3a8:	d001      	beq.n	c3ae <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c3aa:	2001      	movs	r0, #1
    c3ac:	4770      	bx	lr
    c3ae:	2000      	movs	r0, #0
    c3b0:	4770      	bx	lr

0000c3b2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    c3b2:	b570      	push	{r4, r5, r6, lr}
    c3b4:	7f00      	ldrb	r0, [r0, #28]
    c3b6:	461c      	mov	r4, r3
    c3b8:	1d80      	adds	r0, r0, #6
    c3ba:	4408      	add	r0, r1
    c3bc:	4613      	mov	r3, r2
    c3be:	8809      	ldrh	r1, [r1, #0]
    c3c0:	9a04      	ldr	r2, [sp, #16]
    c3c2:	1cc9      	adds	r1, r1, #3
    c3c4:	b289      	uxth	r1, r1
    c3c6:	1915      	adds	r5, r2, r4
    c3c8:	1ec0      	subs	r0, r0, #3
    c3ca:	428d      	cmp	r5, r1
    c3cc:	d805      	bhi.n	c3da <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    c3ce:	1881      	adds	r1, r0, r2
    c3d0:	4622      	mov	r2, r4
    c3d2:	4618      	mov	r0, r3
    c3d4:	f7ff fad2 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c3d8:	e000      	b.n	c3dc <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    c3da:	2400      	movs	r4, #0
    c3dc:	4620      	mov	r0, r4
    c3de:	bd70      	pop	{r4, r5, r6, pc}

0000c3e0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    c3e0:	b570      	push	{r4, r5, r6, lr}
    c3e2:	7f00      	ldrb	r0, [r0, #28]
    c3e4:	461c      	mov	r4, r3
    c3e6:	1d80      	adds	r0, r0, #6
    c3e8:	4408      	add	r0, r1
    c3ea:	4613      	mov	r3, r2
    c3ec:	8809      	ldrh	r1, [r1, #0]
    c3ee:	9a04      	ldr	r2, [sp, #16]
    c3f0:	1cc9      	adds	r1, r1, #3
    c3f2:	b289      	uxth	r1, r1
    c3f4:	1915      	adds	r5, r2, r4
    c3f6:	1ec0      	subs	r0, r0, #3
    c3f8:	428d      	cmp	r5, r1
    c3fa:	d805      	bhi.n	c408 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    c3fc:	4410      	add	r0, r2
    c3fe:	4622      	mov	r2, r4
    c400:	4619      	mov	r1, r3
    c402:	f7ff fabb 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c406:	e000      	b.n	c40a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    c408:	2400      	movs	r4, #0
    c40a:	4620      	mov	r0, r4
    c40c:	bd70      	pop	{r4, r5, r6, pc}

0000c40e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c40e:	8881      	ldrh	r1, [r0, #4]
    c410:	88c0      	ldrh	r0, [r0, #6]
    c412:	4288      	cmp	r0, r1
    c414:	d101      	bne.n	c41a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c416:	2001      	movs	r0, #1
    c418:	4770      	bx	lr
    c41a:	2000      	movs	r0, #0
    c41c:	4770      	bx	lr

0000c41e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    c41e:	8881      	ldrh	r1, [r0, #4]
    c420:	8900      	ldrh	r0, [r0, #8]
    c422:	4288      	cmp	r0, r1
    c424:	d101      	bne.n	c42a <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    c426:	2001      	movs	r0, #1
    c428:	4770      	bx	lr
    c42a:	2000      	movs	r0, #0
    c42c:	4770      	bx	lr

0000c42e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c42e:	b570      	push	{r4, r5, r6, lr}
    c430:	4604      	mov	r4, r0
    c432:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c436:	8880      	ldrh	r0, [r0, #4]
    c438:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c43c:	4401      	add	r1, r0
    c43e:	8a20      	ldrh	r0, [r4, #16]
    c440:	2800      	cmp	r0, #0
    c442:	d01a      	beq.n	c47a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    c444:	89a2      	ldrh	r2, [r4, #12]
    c446:	2500      	movs	r5, #0
    c448:	4410      	add	r0, r2
    c44a:	b280      	uxth	r0, r0
    c44c:	81a0      	strh	r0, [r4, #12]
    c44e:	880a      	ldrh	r2, [r1, #0]
    c450:	4290      	cmp	r0, r2
    c452:	d905      	bls.n	c460 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    c454:	f240 1163 	movw	r1, #355	; 0x163
    c458:	f04f 0014 	mov.w	r0, #20
    c45c:	f7f7 fc40 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c460:	d109      	bne.n	c476 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    c462:	69a0      	ldr	r0, [r4, #24]
    c464:	b108      	cbz	r0, c46a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    c466:	7f40      	ldrb	r0, [r0, #29]
    c468:	7088      	strb	r0, [r1, #2]
    c46a:	f104 0104 	add.w	r1, r4, #4
    c46e:	4620      	mov	r0, r4
    c470:	f7ff ff6e 	bl	c350 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c474:	81a5      	strh	r5, [r4, #12]
    c476:	8225      	strh	r5, [r4, #16]
    c478:	2001      	movs	r0, #1
    c47a:	bd70      	pop	{r4, r5, r6, pc}

0000c47c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    c47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c47e:	4604      	mov	r4, r0
    c480:	f100 0324 	add.w	r3, r0, #36	; 0x24
    c484:	88c0      	ldrh	r0, [r0, #6]
    c486:	460e      	mov	r6, r1
    c488:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c48c:	8a60      	ldrh	r0, [r4, #18]
    c48e:	19d9      	adds	r1, r3, r7
    c490:	b108      	cbz	r0, c496 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    c492:	42b0      	cmp	r0, r6
    c494:	d201      	bcs.n	c49a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    c496:	2000      	movs	r0, #0
    c498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c49a:	89e0      	ldrh	r0, [r4, #14]
    c49c:	2500      	movs	r5, #0
    c49e:	b140      	cbz	r0, c4b2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    c4a0:	f8b1 c000 	ldrh.w	ip, [r1]
    c4a4:	4560      	cmp	r0, ip
    c4a6:	d008      	beq.n	c4ba <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    c4a8:	f240 214b 	movw	r1, #587	; 0x24b
    c4ac:	2014      	movs	r0, #20
    c4ae:	f7f7 fc17 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4b2:	7f60      	ldrb	r0, [r4, #29]
    c4b4:	7088      	strb	r0, [r1, #2]
    c4b6:	800d      	strh	r5, [r1, #0]
    c4b8:	e00e      	b.n	c4d8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    c4ba:	f894 c01c 	ldrb.w	ip, [r4, #28]
    c4be:	4418      	add	r0, r3
    c4c0:	f10c 0c06 	add.w	ip, ip, #6
    c4c4:	44bc      	add	ip, r7
    c4c6:	4460      	add	r0, ip
    c4c8:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    c4cc:	f820 cc03 	strh.w	ip, [r0, #-3]
    c4d0:	f894 c020 	ldrb.w	ip, [r4, #32]
    c4d4:	f800 cc01 	strb.w	ip, [r0, #-1]
    c4d8:	89e0      	ldrh	r0, [r4, #14]
    c4da:	4430      	add	r0, r6
    c4dc:	81e0      	strh	r0, [r4, #14]
    c4de:	8808      	ldrh	r0, [r1, #0]
    c4e0:	4430      	add	r0, r6
    c4e2:	8008      	strh	r0, [r1, #0]
    c4e4:	b19a      	cbz	r2, c50e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    c4e6:	1da1      	adds	r1, r4, #6
    c4e8:	4620      	mov	r0, r4
    c4ea:	f7ff ff31 	bl	c350 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c4ee:	81e5      	strh	r5, [r4, #14]
    c4f0:	7f60      	ldrb	r0, [r4, #29]
    c4f2:	1c40      	adds	r0, r0, #1
    c4f4:	7760      	strb	r0, [r4, #29]
    c4f6:	7da0      	ldrb	r0, [r4, #22]
    c4f8:	f88d 0000 	strb.w	r0, [sp]
    c4fc:	9800      	ldr	r0, [sp, #0]
    c4fe:	9000      	str	r0, [sp, #0]
    c500:	f89d 0000 	ldrb.w	r0, [sp]
    c504:	b178      	cbz	r0, c526 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    c506:	88e0      	ldrh	r0, [r4, #6]
    c508:	82a0      	strh	r0, [r4, #20]
    c50a:	75a5      	strb	r5, [r4, #22]
    c50c:	e00b      	b.n	c526 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    c50e:	7f20      	ldrb	r0, [r4, #28]
    c510:	89e1      	ldrh	r1, [r4, #14]
    c512:	1d80      	adds	r0, r0, #6
    c514:	4438      	add	r0, r7
    c516:	4419      	add	r1, r3
    c518:	4408      	add	r0, r1
    c51a:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    c51e:	83e1      	strh	r1, [r4, #30]
    c520:	7880      	ldrb	r0, [r0, #2]
    c522:	f884 0020 	strb.w	r0, [r4, #32]
    c526:	8265      	strh	r5, [r4, #18]
    c528:	2001      	movs	r0, #1
    c52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c52c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    c52c:	b510      	push	{r4, lr}
    c52e:	4604      	mov	r4, r0
    c530:	88c0      	ldrh	r0, [r0, #6]
    c532:	88a1      	ldrh	r1, [r4, #4]
    c534:	4281      	cmp	r1, r0
    c536:	d007      	beq.n	c548 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c538:	89a0      	ldrh	r0, [r4, #12]
    c53a:	b928      	cbnz	r0, c548 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c53c:	8a20      	ldrh	r0, [r4, #16]
    c53e:	b918      	cbnz	r0, c548 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c540:	88a0      	ldrh	r0, [r4, #4]
    c542:	8aa1      	ldrh	r1, [r4, #20]
    c544:	4288      	cmp	r0, r1
    c546:	d101      	bne.n	c54c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    c548:	2000      	movs	r0, #0
    c54a:	bd10      	pop	{r4, pc}
    c54c:	1d21      	adds	r1, r4, #4
    c54e:	4620      	mov	r0, r4
    c550:	f7ff fefe 	bl	c350 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c554:	2000      	movs	r0, #0
    c556:	8220      	strh	r0, [r4, #16]
    c558:	2001      	movs	r0, #1
    c55a:	bd10      	pop	{r4, pc}

0000c55c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    c55c:	b510      	push	{r4, lr}
    c55e:	4604      	mov	r4, r0
    c560:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c564:	88c0      	ldrh	r0, [r0, #6]
    c566:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c56a:	4402      	add	r2, r0
    c56c:	8820      	ldrh	r0, [r4, #0]
    c56e:	2845      	cmp	r0, #69	; 0x45
    c570:	d200      	bcs.n	c574 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    c572:	2045      	movs	r0, #69	; 0x45
    c574:	4288      	cmp	r0, r1
    c576:	d204      	bcs.n	c582 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    c578:	f240 1119 	movw	r1, #281	; 0x119
    c57c:	2014      	movs	r0, #20
    c57e:	f7f7 fbaf 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c582:	7de0      	ldrb	r0, [r4, #23]
    c584:	2800      	cmp	r0, #0
    c586:	d003      	beq.n	c590 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    c588:	8810      	ldrh	r0, [r2, #0]
    c58a:	4288      	cmp	r0, r1
    c58c:	d201      	bcs.n	c592 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    c58e:	2000      	movs	r0, #0
    c590:	bd10      	pop	{r4, pc}
    c592:	8011      	strh	r1, [r2, #0]
    c594:	1da1      	adds	r1, r4, #6
    c596:	4620      	mov	r0, r4
    c598:	f7ff feda 	bl	c350 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c59c:	2000      	movs	r0, #0
    c59e:	75e0      	strb	r0, [r4, #23]
    c5a0:	2001      	movs	r0, #1
    c5a2:	bd10      	pop	{r4, pc}

0000c5a4 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    c5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5a8:	8941      	ldrh	r1, [r0, #10]
    c5aa:	8886      	ldrh	r6, [r0, #4]
    c5ac:	4604      	mov	r4, r0
    c5ae:	2500      	movs	r5, #0
    c5b0:	f100 070a 	add.w	r7, r0, #10
    c5b4:	e006      	b.n	c5c4 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    c5b6:	4639      	mov	r1, r7
    c5b8:	4620      	mov	r0, r4
    c5ba:	f7ff fec9 	bl	c350 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c5be:	1c6d      	adds	r5, r5, #1
    c5c0:	8961      	ldrh	r1, [r4, #10]
    c5c2:	b2ad      	uxth	r5, r5
    c5c4:	42b1      	cmp	r1, r6
    c5c6:	d1f6      	bne.n	c5b6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    c5c8:	4628      	mov	r0, r5
    c5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c5ce <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    c5ce:	b530      	push	{r4, r5, lr}
    c5d0:	88c4      	ldrh	r4, [r0, #6]
    c5d2:	8881      	ldrh	r1, [r0, #4]
    c5d4:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c5d8:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c5dc:	4413      	add	r3, r2
    c5de:	8882      	ldrh	r2, [r0, #4]
    c5e0:	8a85      	ldrh	r5, [r0, #20]
    c5e2:	42aa      	cmp	r2, r5
    c5e4:	d012      	beq.n	c60c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c5e6:	42a1      	cmp	r1, r4
    c5e8:	d010      	beq.n	c60c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c5ea:	8981      	ldrh	r1, [r0, #12]
    c5ec:	b971      	cbnz	r1, c60c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c5ee:	6982      	ldr	r2, [r0, #24]
    c5f0:	b172      	cbz	r2, c610 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c5f2:	4610      	mov	r0, r2
    c5f4:	f7ff ff13 	bl	c41e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    c5f8:	b950      	cbnz	r0, c610 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c5fa:	8910      	ldrh	r0, [r2, #8]
    c5fc:	3224      	adds	r2, #36	; 0x24
    c5fe:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c602:	4410      	add	r0, r2
    c604:	7899      	ldrb	r1, [r3, #2]
    c606:	7880      	ldrb	r0, [r0, #2]
    c608:	4288      	cmp	r0, r1
    c60a:	d101      	bne.n	c610 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c60c:	2000      	movs	r0, #0
    c60e:	bd30      	pop	{r4, r5, pc}
    c610:	4618      	mov	r0, r3
    c612:	bd30      	pop	{r4, r5, pc}

0000c614 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    c614:	7f00      	ldrb	r0, [r0, #28]
    c616:	1d80      	adds	r0, r0, #6
    c618:	4408      	add	r0, r1
    c61a:	1ec0      	subs	r0, r0, #3
    c61c:	6010      	str	r0, [r2, #0]
    c61e:	8808      	ldrh	r0, [r1, #0]
    c620:	4770      	bx	lr

0000c622 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    c622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c626:	460e      	mov	r6, r1
    c628:	88c1      	ldrh	r1, [r0, #6]
    c62a:	8902      	ldrh	r2, [r0, #8]
    c62c:	4604      	mov	r4, r0
    c62e:	f100 0824 	add.w	r8, r0, #36	; 0x24
    c632:	8800      	ldrh	r0, [r0, #0]
    c634:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    c638:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    c63c:	2845      	cmp	r0, #69	; 0x45
    c63e:	d200      	bcs.n	c642 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    c640:	2045      	movs	r0, #69	; 0x45
    c642:	42b0      	cmp	r0, r6
    c644:	d203      	bcs.n	c64e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    c646:	21db      	movs	r1, #219	; 0xdb
    c648:	2014      	movs	r0, #20
    c64a:	f7f7 fb49 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c64e:	4610      	mov	r0, r2
    c650:	f7ff fe9f 	bl	c392 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    c654:	b110      	cbz	r0, c65c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    c656:	2000      	movs	r0, #0
    c658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c65c:	42af      	cmp	r7, r5
    c65e:	d908      	bls.n	c672 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    c660:	7f21      	ldrb	r1, [r4, #28]
    c662:	1b78      	subs	r0, r7, r5
    c664:	1a40      	subs	r0, r0, r1
    c666:	1f80      	subs	r0, r0, #6
    c668:	4286      	cmp	r6, r0
    c66a:	dd02      	ble.n	c672 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    c66c:	2000      	movs	r0, #0
    c66e:	75e0      	strb	r0, [r4, #23]
    c670:	e7f1      	b.n	c656 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    c672:	eb08 0005 	add.w	r0, r8, r5
    c676:	2101      	movs	r1, #1
    c678:	8006      	strh	r6, [r0, #0]
    c67a:	75e1      	strb	r1, [r4, #23]
    c67c:	e7ec      	b.n	c658 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000c67e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    c67e:	b538      	push	{r3, r4, r5, lr}
    c680:	88c4      	ldrh	r4, [r0, #6]
    c682:	8881      	ldrh	r1, [r0, #4]
    c684:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c688:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c68c:	441a      	add	r2, r3
    c68e:	42a1      	cmp	r1, r4
    c690:	d010      	beq.n	c6b4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    c692:	8983      	ldrh	r3, [r0, #12]
    c694:	8a05      	ldrh	r5, [r0, #16]
    c696:	8812      	ldrh	r2, [r2, #0]
    c698:	442b      	add	r3, r5
    c69a:	4293      	cmp	r3, r2
    c69c:	d308      	bcc.n	c6b0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    c69e:	f8ad 1000 	strh.w	r1, [sp]
    c6a2:	4669      	mov	r1, sp
    c6a4:	f7ff fe54 	bl	c350 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c6a8:	f8bd 0000 	ldrh.w	r0, [sp]
    c6ac:	42a0      	cmp	r0, r4
    c6ae:	d001      	beq.n	c6b4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    c6b0:	2001      	movs	r0, #1
    c6b2:	bd38      	pop	{r3, r4, r5, pc}
    c6b4:	2000      	movs	r0, #0
    c6b6:	bd38      	pop	{r3, r4, r5, pc}

0000c6b8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    c6b8:	b570      	push	{r4, r5, r6, lr}
    c6ba:	88c6      	ldrh	r6, [r0, #6]
    c6bc:	8885      	ldrh	r5, [r0, #4]
    c6be:	4603      	mov	r3, r0
    c6c0:	f100 0424 	add.w	r4, r0, #36	; 0x24
    c6c4:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    c6c8:	4420      	add	r0, r4
    c6ca:	42b5      	cmp	r5, r6
    c6cc:	d102      	bne.n	c6d4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    c6ce:	2000      	movs	r0, #0
    c6d0:	8218      	strh	r0, [r3, #16]
    c6d2:	bd70      	pop	{r4, r5, r6, pc}
    c6d4:	8804      	ldrh	r4, [r0, #0]
    c6d6:	899d      	ldrh	r5, [r3, #12]
    c6d8:	7f1e      	ldrb	r6, [r3, #28]
    c6da:	1b64      	subs	r4, r4, r5
    c6dc:	4435      	add	r5, r6
    c6de:	4428      	add	r0, r5
    c6e0:	880d      	ldrh	r5, [r1, #0]
    c6e2:	b2a4      	uxth	r4, r4
    c6e4:	1cc0      	adds	r0, r0, #3
    c6e6:	42a5      	cmp	r5, r4
    c6e8:	d900      	bls.n	c6ec <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    c6ea:	800c      	strh	r4, [r1, #0]
    c6ec:	899c      	ldrh	r4, [r3, #12]
    c6ee:	b124      	cbz	r4, c6fa <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    c6f0:	2400      	movs	r4, #0
    c6f2:	7014      	strb	r4, [r2, #0]
    c6f4:	8809      	ldrh	r1, [r1, #0]
    c6f6:	8219      	strh	r1, [r3, #16]
    c6f8:	bd70      	pop	{r4, r5, r6, pc}
    c6fa:	2401      	movs	r4, #1
    c6fc:	e7f9      	b.n	c6f2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000c6fe <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    c6fe:	b508      	push	{r3, lr}
    c700:	8a81      	ldrh	r1, [r0, #20]
    c702:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    c706:	3aff      	subs	r2, #255	; 0xff
    c708:	d008      	beq.n	c71c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    c70a:	7d82      	ldrb	r2, [r0, #22]
    c70c:	f88d 2000 	strb.w	r2, [sp]
    c710:	9a00      	ldr	r2, [sp, #0]
    c712:	9200      	str	r2, [sp, #0]
    c714:	f89d 2000 	ldrb.w	r2, [sp]
    c718:	b952      	cbnz	r2, c730 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    c71a:	e004      	b.n	c726 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    c71c:	f44f 7162 	mov.w	r1, #904	; 0x388
    c720:	2014      	movs	r0, #20
    c722:	f7f7 fadd 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c726:	8880      	ldrh	r0, [r0, #4]
    c728:	4281      	cmp	r1, r0
    c72a:	d101      	bne.n	c730 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    c72c:	2000      	movs	r0, #0
    c72e:	bd08      	pop	{r3, pc}
    c730:	2001      	movs	r0, #1
    c732:	bd08      	pop	{r3, pc}

0000c734 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    c734:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c738:	8281      	strh	r1, [r0, #20]
    c73a:	2100      	movs	r1, #0
    c73c:	7581      	strb	r1, [r0, #22]
    c73e:	4770      	bx	lr

0000c740 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    c740:	b510      	push	{r4, lr}
    c742:	8a81      	ldrh	r1, [r0, #20]
    c744:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    c748:	3aff      	subs	r2, #255	; 0xff
    c74a:	d004      	beq.n	c756 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    c74c:	f44f 7159 	mov.w	r1, #868	; 0x364
    c750:	2014      	movs	r0, #20
    c752:	f7f7 fac5 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c756:	88c1      	ldrh	r1, [r0, #6]
    c758:	8281      	strh	r1, [r0, #20]
    c75a:	89c1      	ldrh	r1, [r0, #14]
    c75c:	b109      	cbz	r1, c762 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    c75e:	2101      	movs	r1, #1
    c760:	e000      	b.n	c764 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    c762:	2100      	movs	r1, #0
    c764:	7581      	strb	r1, [r0, #22]
    c766:	bd10      	pop	{r4, pc}

0000c768 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    c768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c76c:	461d      	mov	r5, r3
    c76e:	4616      	mov	r6, r2
    c770:	9f06      	ldr	r7, [sp, #24]
    c772:	460b      	mov	r3, r1
    c774:	4604      	mov	r4, r0
    c776:	463a      	mov	r2, r7
    c778:	4629      	mov	r1, r5
    c77a:	4630      	mov	r0, r6
    c77c:	f000 f84f 	bl	c81e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c780:	4283      	cmp	r3, r0
    c782:	d201      	bcs.n	c788 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    c784:	21a8      	movs	r1, #168	; 0xa8
    c786:	e018      	b.n	c7ba <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    c788:	1ce0      	adds	r0, r4, #3
    c78a:	f020 0103 	bic.w	r1, r0, #3
    c78e:	4620      	mov	r0, r4
    c790:	42a1      	cmp	r1, r4
    c792:	d001      	beq.n	c798 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    c794:	21a9      	movs	r1, #169	; 0xa9
    c796:	e010      	b.n	c7ba <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    c798:	2224      	movs	r2, #36	; 0x24
    c79a:	2100      	movs	r1, #0
    c79c:	f7ff f968 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c7a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c7a4:	82a0      	strh	r0, [r4, #20]
    c7a6:	19a8      	adds	r0, r5, r6
    c7a8:	1d80      	adds	r0, r0, #6
    c7aa:	4378      	muls	r0, r7
    c7ac:	b280      	uxth	r0, r0
    c7ae:	7725      	strb	r5, [r4, #28]
    c7b0:	8060      	strh	r0, [r4, #2]
    c7b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    c7b6:	d903      	bls.n	c7c0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    c7b8:	21af      	movs	r1, #175	; 0xaf
    c7ba:	2014      	movs	r0, #20
    c7bc:	f7f7 fa90 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7c0:	8026      	strh	r6, [r4, #0]
    c7c2:	2000      	movs	r0, #0
    c7c4:	7760      	strb	r0, [r4, #29]
    c7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c7ca <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    c7ca:	6181      	str	r1, [r0, #24]
    c7cc:	6188      	str	r0, [r1, #24]
    c7ce:	4770      	bx	lr

0000c7d0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    c7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7d4:	460b      	mov	r3, r1
    c7d6:	4604      	mov	r4, r0
    c7d8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c7dc:	8905      	ldrh	r5, [r0, #8]
    c7de:	8946      	ldrh	r6, [r0, #10]
    c7e0:	8880      	ldrh	r0, [r0, #4]
    c7e2:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    c7e6:	4439      	add	r1, r7
    c7e8:	460f      	mov	r7, r1
    c7ea:	4285      	cmp	r5, r0
    c7ec:	d102      	bne.n	c7f4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    c7ee:	2000      	movs	r0, #0
    c7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7f4:	b10a      	cbz	r2, c7fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    c7f6:	1cc8      	adds	r0, r1, #3
    c7f8:	6010      	str	r0, [r2, #0]
    c7fa:	b123      	cbz	r3, c806 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    c7fc:	7f22      	ldrb	r2, [r4, #28]
    c7fe:	1cf9      	adds	r1, r7, #3
    c800:	4618      	mov	r0, r3
    c802:	f7ff f8bb 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c806:	883f      	ldrh	r7, [r7, #0]
    c808:	f104 0108 	add.w	r1, r4, #8
    c80c:	4620      	mov	r0, r4
    c80e:	f7ff fd9f 	bl	c350 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c812:	42b5      	cmp	r5, r6
    c814:	d101      	bne.n	c81a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    c816:	8920      	ldrh	r0, [r4, #8]
    c818:	8160      	strh	r0, [r4, #10]
    c81a:	4638      	mov	r0, r7
    c81c:	e7e8      	b.n	c7f0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000c81e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    c81e:	4401      	add	r1, r0
    c820:	1d89      	adds	r1, r1, #6
    c822:	4351      	muls	r1, r2
    c824:	b28a      	uxth	r2, r1
    c826:	2100      	movs	r1, #0
    c828:	2845      	cmp	r0, #69	; 0x45
    c82a:	d201      	bcs.n	c830 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    c82c:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    c830:	3224      	adds	r2, #36	; 0x24
    c832:	1850      	adds	r0, r2, r1
    c834:	b280      	uxth	r0, r0
    c836:	4770      	bx	lr

0000c838 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    c838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c83c:	4688      	mov	r8, r1
    c83e:	88c1      	ldrh	r1, [r0, #6]
    c840:	4604      	mov	r4, r0
    c842:	8900      	ldrh	r0, [r0, #8]
    c844:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    c848:	f104 0524 	add.w	r5, r4, #36	; 0x24
    c84c:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c850:	eb05 0906 	add.w	r9, r5, r6
    c854:	f7ff fd9d 	bl	c392 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    c858:	2200      	movs	r2, #0
    c85a:	b998      	cbnz	r0, c884 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    c85c:	8820      	ldrh	r0, [r4, #0]
    c85e:	2845      	cmp	r0, #69	; 0x45
    c860:	d200      	bcs.n	c864 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    c862:	2045      	movs	r0, #69	; 0x45
    c864:	42b7      	cmp	r7, r6
    c866:	d906      	bls.n	c876 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c868:	7f23      	ldrb	r3, [r4, #28]
    c86a:	1bb9      	subs	r1, r7, r6
    c86c:	1ac9      	subs	r1, r1, r3
    c86e:	1f89      	subs	r1, r1, #6
    c870:	4281      	cmp	r1, r0
    c872:	da00      	bge.n	c876 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c874:	4608      	mov	r0, r1
    c876:	89e1      	ldrh	r1, [r4, #14]
    c878:	b111      	cbz	r1, c880 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    c87a:	f8b9 3000 	ldrh.w	r3, [r9]
    c87e:	1ac0      	subs	r0, r0, r3
    c880:	4540      	cmp	r0, r8
    c882:	da03      	bge.n	c88c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    c884:	8262      	strh	r2, [r4, #18]
    c886:	2000      	movs	r0, #0
    c888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c88c:	7f20      	ldrb	r0, [r4, #28]
    c88e:	4429      	add	r1, r5
    c890:	1d80      	adds	r0, r0, #6
    c892:	4430      	add	r0, r6
    c894:	4408      	add	r0, r1
    c896:	f8a4 8012 	strh.w	r8, [r4, #18]
    c89a:	1ec0      	subs	r0, r0, #3
    c89c:	e7f4      	b.n	c888 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000c89e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    c89e:	2100      	movs	r1, #0
    c8a0:	81c1      	strh	r1, [r0, #14]
    c8a2:	8241      	strh	r1, [r0, #18]
    c8a4:	7581      	strb	r1, [r0, #22]
    c8a6:	4770      	bx	lr

0000c8a8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    c8a8:	b570      	push	{r4, r5, r6, lr}
    c8aa:	2300      	movs	r3, #0
    c8ac:	2908      	cmp	r1, #8
    c8ae:	d204      	bcs.n	c8ba <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    c8b0:	f240 11cb 	movw	r1, #459	; 0x1cb
    c8b4:	2015      	movs	r0, #21
    c8b6:	f7f7 fa13 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c8ba:	6802      	ldr	r2, [r0, #0]
    c8bc:	b90a      	cbnz	r2, c8c2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    c8be:	e01e      	b.n	c8fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    c8c0:	4610      	mov	r0, r2
    c8c2:	6802      	ldr	r2, [r0, #0]
    c8c4:	8893      	ldrh	r3, [r2, #4]
    c8c6:	428b      	cmp	r3, r1
    c8c8:	d002      	beq.n	c8d0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    c8ca:	6813      	ldr	r3, [r2, #0]
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d1f7      	bne.n	c8c0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    c8d0:	8894      	ldrh	r4, [r2, #4]
    c8d2:	4613      	mov	r3, r2
    c8d4:	428c      	cmp	r4, r1
    c8d6:	d101      	bne.n	c8dc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    c8d8:	6811      	ldr	r1, [r2, #0]
    c8da:	e00d      	b.n	c8f8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    c8dc:	f101 0508 	add.w	r5, r1, #8
    c8e0:	b2ae      	uxth	r6, r5
    c8e2:	2500      	movs	r5, #0
    c8e4:	42b4      	cmp	r4, r6
    c8e6:	d309      	bcc.n	c8fc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    c8e8:	1a64      	subs	r4, r4, r1
    c8ea:	4411      	add	r1, r2
    c8ec:	600d      	str	r5, [r1, #0]
    c8ee:	808c      	strh	r4, [r1, #4]
    c8f0:	6802      	ldr	r2, [r0, #0]
    c8f2:	6812      	ldr	r2, [r2, #0]
    c8f4:	6002      	str	r2, [r0, #0]
    c8f6:	600a      	str	r2, [r1, #0]
    c8f8:	6001      	str	r1, [r0, #0]
    c8fa:	e000      	b.n	c8fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    c8fc:	2300      	movs	r3, #0
    c8fe:	4618      	mov	r0, r3
    c900:	bd70      	pop	{r4, r5, r6, pc}

0000c902 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    c902:	b510      	push	{r4, lr}
    c904:	000c      	movs	r4, r1
    c906:	d006      	beq.n	c916 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    c908:	2c08      	cmp	r4, #8
    c90a:	d209      	bcs.n	c920 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    c90c:	f240 1195 	movw	r1, #405	; 0x195
    c910:	2015      	movs	r0, #21
    c912:	f7f7 f9e5 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c916:	b108      	cbz	r0, c91c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    c918:	2100      	movs	r1, #0
    c91a:	6001      	str	r1, [r0, #0]
    c91c:	2000      	movs	r0, #0
    c91e:	bd10      	pop	{r4, pc}
    c920:	b118      	cbz	r0, c92a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    c922:	b2a1      	uxth	r1, r4
    c924:	6800      	ldr	r0, [r0, #0]
    c926:	f000 f814 	bl	c952 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    c92a:	1d20      	adds	r0, r4, #4
    c92c:	bd10      	pop	{r4, pc}

0000c92e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    c92e:	2100      	movs	r1, #0
    c930:	6802      	ldr	r2, [r0, #0]
    c932:	e003      	b.n	c93c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    c934:	8893      	ldrh	r3, [r2, #4]
    c936:	6812      	ldr	r2, [r2, #0]
    c938:	4419      	add	r1, r3
    c93a:	b289      	uxth	r1, r1
    c93c:	2a00      	cmp	r2, #0
    c93e:	d1f9      	bne.n	c934 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    c940:	f000 b807 	b.w	c952 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000c944 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    c944:	2300      	movs	r3, #0
    c946:	600b      	str	r3, [r1, #0]
    c948:	808a      	strh	r2, [r1, #4]
    c94a:	6802      	ldr	r2, [r0, #0]
    c94c:	600a      	str	r2, [r1, #0]
    c94e:	6001      	str	r1, [r0, #0]
    c950:	4770      	bx	lr
    c952:	2300      	movs	r3, #0
    c954:	6043      	str	r3, [r0, #4]
    c956:	1d02      	adds	r2, r0, #4
    c958:	8101      	strh	r1, [r0, #8]
    c95a:	6002      	str	r2, [r0, #0]
    c95c:	4770      	bx	lr

0000c95e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    c95e:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    c962:	3bff      	subs	r3, #255	; 0xff
    c964:	d001      	beq.n	c96a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    c966:	2902      	cmp	r1, #2
    c968:	d301      	bcc.n	c96e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    c96a:	2000      	movs	r0, #0
    c96c:	4770      	bx	lr
    c96e:	f7f7 bc71 	b.w	4254 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    c972:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    c976:	3aff      	subs	r2, #255	; 0xff
    c978:	d001      	beq.n	c97e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    c97a:	2902      	cmp	r1, #2
    c97c:	d301      	bcc.n	c982 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    c97e:	2000      	movs	r0, #0
    c980:	4770      	bx	lr
    c982:	f7f7 bca1 	b.w	42c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000c986 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    c986:	b570      	push	{r4, r5, r6, lr}
    c988:	4605      	mov	r5, r0
    c98a:	460c      	mov	r4, r1
    c98c:	4608      	mov	r0, r1
    c98e:	f000 f973 	bl	cc78 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    c992:	b108      	cbz	r0, c998 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    c994:	2010      	movs	r0, #16
    c996:	bd70      	pop	{r4, r5, r6, pc}
    c998:	2d02      	cmp	r5, #2
    c99a:	d301      	bcc.n	c9a0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    c99c:	2007      	movs	r0, #7
    c99e:	bd70      	pop	{r4, r5, r6, pc}
    c9a0:	7025      	strb	r5, [r4, #0]
    c9a2:	2000      	movs	r0, #0
    c9a4:	8060      	strh	r0, [r4, #2]
    c9a6:	bd70      	pop	{r4, r5, r6, pc}
    c9a8:	b510      	push	{r4, lr}
    c9aa:	4604      	mov	r4, r0
    c9ac:	f7f7 fcd8 	bl	4360 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    c9b0:	42a0      	cmp	r0, r4
    c9b2:	d901      	bls.n	c9b8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    c9b4:	2001      	movs	r0, #1
    c9b6:	bd10      	pop	{r4, pc}
    c9b8:	2000      	movs	r0, #0
    c9ba:	bd10      	pop	{r4, pc}
    c9bc:	4770      	bx	lr

0000c9be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    c9be:	b570      	push	{r4, r5, r6, lr}
    c9c0:	460e      	mov	r6, r1
    c9c2:	461d      	mov	r5, r3
    c9c4:	4611      	mov	r1, r2
    c9c6:	f000 f811 	bl	c9ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    c9ca:	4604      	mov	r4, r0
    c9cc:	4629      	mov	r1, r5
    c9ce:	4630      	mov	r0, r6
    c9d0:	f000 f803 	bl	c9da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    c9d4:	4420      	add	r0, r4
    c9d6:	1d00      	adds	r0, r0, #4
    c9d8:	bd70      	pop	{r4, r5, r6, pc}
    c9da:	b510      	push	{r4, lr}
    c9dc:	460a      	mov	r2, r1
    c9de:	2101      	movs	r1, #1
    c9e0:	f7ff ff1d 	bl	c81e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c9e4:	1cc0      	adds	r0, r0, #3
    c9e6:	f020 0003 	bic.w	r0, r0, #3
    c9ea:	bd10      	pop	{r4, pc}
    c9ec:	b510      	push	{r4, lr}
    c9ee:	460a      	mov	r2, r1
    c9f0:	2101      	movs	r1, #1
    c9f2:	f7ff ff14 	bl	c81e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c9f6:	1cc0      	adds	r0, r0, #3
    c9f8:	f020 0003 	bic.w	r0, r0, #3
    c9fc:	bd10      	pop	{r4, pc}
    c9fe:	b109      	cbz	r1, ca04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    ca00:	2100      	movs	r1, #0
    ca02:	e000      	b.n	ca06 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    ca04:	2102      	movs	r1, #2
    ca06:	1843      	adds	r3, r0, r1
    ca08:	7d1a      	ldrb	r2, [r3, #20]
    ca0a:	2a02      	cmp	r2, #2
    ca0c:	d008      	beq.n	ca20 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    ca0e:	7d5b      	ldrb	r3, [r3, #21]
    ca10:	2b02      	cmp	r3, #2
    ca12:	d009      	beq.n	ca28 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    ca14:	2a03      	cmp	r2, #3
    ca16:	d003      	beq.n	ca20 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    ca18:	2b03      	cmp	r3, #3
    ca1a:	d005      	beq.n	ca28 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    ca1c:	2000      	movs	r0, #0
    ca1e:	4770      	bx	lr
    ca20:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ca24:	8b00      	ldrh	r0, [r0, #24]
    ca26:	4770      	bx	lr
    ca28:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ca2c:	8b40      	ldrh	r0, [r0, #26]
    ca2e:	4770      	bx	lr
    ca30:	b109      	cbz	r1, ca36 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    ca32:	2100      	movs	r1, #0
    ca34:	e000      	b.n	ca38 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    ca36:	2102      	movs	r1, #2
    ca38:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ca3c:	8b01      	ldrh	r1, [r0, #24]
    ca3e:	b911      	cbnz	r1, ca46 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    ca40:	8b40      	ldrh	r0, [r0, #26]
    ca42:	2800      	cmp	r0, #0
    ca44:	d000      	beq.n	ca48 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    ca46:	2001      	movs	r0, #1
    ca48:	4770      	bx	lr
    ca4a:	b538      	push	{r3, r4, r5, lr}
    ca4c:	7883      	ldrb	r3, [r0, #2]
    ca4e:	f88d 3000 	strb.w	r3, [sp]
    ca52:	9b00      	ldr	r3, [sp, #0]
    ca54:	9300      	str	r3, [sp, #0]
    ca56:	f89d 3000 	ldrb.w	r3, [sp]
    ca5a:	b953      	cbnz	r3, ca72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
    ca5c:	b10a      	cbz	r2, ca62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
    ca5e:	2300      	movs	r3, #0
    ca60:	e000      	b.n	ca64 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    ca62:	2302      	movs	r3, #2
    ca64:	18c2      	adds	r2, r0, r3
    ca66:	7d14      	ldrb	r4, [r2, #20]
    ca68:	2c02      	cmp	r4, #2
    ca6a:	d004      	beq.n	ca76 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    ca6c:	7d52      	ldrb	r2, [r2, #21]
    ca6e:	2a02      	cmp	r2, #2
    ca70:	d004      	beq.n	ca7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
    ca72:	2000      	movs	r0, #0
    ca74:	bd38      	pop	{r3, r4, r5, pc}
    ca76:	461a      	mov	r2, r3
    ca78:	1c5b      	adds	r3, r3, #1
    ca7a:	e000      	b.n	ca7e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    ca7c:	1c5a      	adds	r2, r3, #1
    ca7e:	b181      	cbz	r1, caa2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    ca80:	18c5      	adds	r5, r0, r3
    ca82:	2400      	movs	r4, #0
    ca84:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ca88:	752c      	strb	r4, [r5, #20]
    ca8a:	831c      	strh	r4, [r3, #24]
    ca8c:	2303      	movs	r3, #3
    ca8e:	1884      	adds	r4, r0, r2
    ca90:	7523      	strb	r3, [r4, #20]
    ca92:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    ca96:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    ca9a:	685b      	ldr	r3, [r3, #4]
    ca9c:	600b      	str	r3, [r1, #0]
    ca9e:	8b00      	ldrh	r0, [r0, #24]
    caa0:	8088      	strh	r0, [r1, #4]
    caa2:	2001      	movs	r0, #1
    caa4:	bd38      	pop	{r3, r4, r5, pc}
    caa6:	b510      	push	{r4, lr}
    caa8:	b109      	cbz	r1, caae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    caaa:	2100      	movs	r1, #0
    caac:	e000      	b.n	cab0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    caae:	2102      	movs	r1, #2
    cab0:	1843      	adds	r3, r0, r1
    cab2:	7d1c      	ldrb	r4, [r3, #20]
    cab4:	4294      	cmp	r4, r2
    cab6:	d103      	bne.n	cac0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    cab8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    cabc:	8b00      	ldrh	r0, [r0, #24]
    cabe:	bd10      	pop	{r4, pc}
    cac0:	7d5b      	ldrb	r3, [r3, #21]
    cac2:	4293      	cmp	r3, r2
    cac4:	d103      	bne.n	cace <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    cac6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    caca:	8b40      	ldrh	r0, [r0, #26]
    cacc:	bd10      	pop	{r4, pc}
    cace:	2000      	movs	r0, #0
    cad0:	bd10      	pop	{r4, pc}
    cad2:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    cad6:	d201      	bcs.n	cadc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    cad8:	0841      	lsrs	r1, r0, #1
    cada:	e000      	b.n	cade <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    cadc:	21ff      	movs	r1, #255	; 0xff
    cade:	1a40      	subs	r0, r0, r1
    cae0:	f240 6172 	movw	r1, #1650	; 0x672
    cae4:	4288      	cmp	r0, r1
    cae6:	db00      	blt.n	caea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    cae8:	4608      	mov	r0, r1
    caea:	b280      	uxth	r0, r0
    caec:	4770      	bx	lr

0000caee <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    caee:	2101      	movs	r1, #1
    caf0:	f7ff bf85 	b.w	c9fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000caf4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    caf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    caf8:	4606      	mov	r6, r0
    cafa:	f342 0780 	sbfx	r7, r2, #2, #1
    cafe:	7848      	ldrb	r0, [r1, #1]
    cb00:	460c      	mov	r4, r1
    cb02:	f022 0504 	bic.w	r5, r2, #4
    cb06:	1c7f      	adds	r7, r7, #1
    cb08:	b100      	cbz	r0, cb0c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    cb0a:	b90d      	cbnz	r5, cb10 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    cb0c:	4328      	orrs	r0, r5
    cb0e:	d104      	bne.n	cb1a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    cb10:	b145      	cbz	r5, cb24 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    cb12:	2100      	movs	r1, #0
    cb14:	4620      	mov	r0, r4
    cb16:	f7f7 fd2b 	bl	4570 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    cb1a:	2101      	movs	r1, #1
    cb1c:	70a1      	strb	r1, [r4, #2]
    cb1e:	b11f      	cbz	r7, cb28 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    cb20:	2000      	movs	r0, #0
    cb22:	e002      	b.n	cb2a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    cb24:	2101      	movs	r1, #1
    cb26:	e7f5      	b.n	cb14 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    cb28:	2002      	movs	r0, #2
    cb2a:	1822      	adds	r2, r4, r0
    cb2c:	7d12      	ldrb	r2, [r2, #20]
    cb2e:	2a03      	cmp	r2, #3
    cb30:	d102      	bne.n	cb38 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    cb32:	2d02      	cmp	r5, #2
    cb34:	d000      	beq.n	cb38 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    cb36:	1c40      	adds	r0, r0, #1
    cb38:	1822      	adds	r2, r4, r0
    cb3a:	7511      	strb	r1, [r2, #20]
    cb3c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    cb40:	2200      	movs	r2, #0
    cb42:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    cb46:	830a      	strh	r2, [r1, #24]
    cb48:	6840      	ldr	r0, [r0, #4]
    cb4a:	70a2      	strb	r2, [r4, #2]
    cb4c:	4631      	mov	r1, r6
    cb4e:	f362 010f 	bfi	r1, r2, #0, #16
    cb52:	e9c6 0100 	strd	r0, r1, [r6]
    cb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cb5a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    cb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb5e:	461e      	mov	r6, r3
    cb60:	4613      	mov	r3, r2
    cb62:	4604      	mov	r4, r0
    cb64:	b109      	cbz	r1, cb6a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    cb66:	2000      	movs	r0, #0
    cb68:	e000      	b.n	cb6c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    cb6a:	2002      	movs	r0, #2
    cb6c:	2101      	movs	r1, #1
    cb6e:	70a1      	strb	r1, [r4, #2]
    cb70:	1821      	adds	r1, r4, r0
    cb72:	7d0a      	ldrb	r2, [r1, #20]
    cb74:	2a01      	cmp	r2, #1
    cb76:	d003      	beq.n	cb80 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    cb78:	7d49      	ldrb	r1, [r1, #21]
    cb7a:	2901      	cmp	r1, #1
    cb7c:	d10c      	bne.n	cb98 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    cb7e:	1c40      	adds	r0, r0, #1
    cb80:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    cb84:	2700      	movs	r7, #0
    cb86:	8b29      	ldrh	r1, [r5, #24]
    cb88:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    cb8c:	198a      	adds	r2, r1, r6
    cb8e:	4562      	cmp	r2, ip
    cb90:	d905      	bls.n	cb9e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    cb92:	4420      	add	r0, r4
    cb94:	832f      	strh	r7, [r5, #24]
    cb96:	7507      	strb	r7, [r0, #20]
    cb98:	2000      	movs	r0, #0
    cb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb9e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    cba2:	4632      	mov	r2, r6
    cba4:	6840      	ldr	r0, [r0, #4]
    cba6:	4408      	add	r0, r1
    cba8:	4619      	mov	r1, r3
    cbaa:	f7fe fee7 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbae:	8b28      	ldrh	r0, [r5, #24]
    cbb0:	4430      	add	r0, r6
    cbb2:	8328      	strh	r0, [r5, #24]
    cbb4:	70a7      	strb	r7, [r4, #2]
    cbb6:	2001      	movs	r0, #1
    cbb8:	e7ef      	b.n	cb9a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000cbba <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    cbba:	2202      	movs	r2, #2
    cbbc:	2100      	movs	r1, #0
    cbbe:	f7ff bf72 	b.w	caa6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000cbc2 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    cbc2:	b510      	push	{r4, lr}
    cbc4:	2101      	movs	r1, #1
    cbc6:	f7ff ff33 	bl	ca30 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    cbca:	2800      	cmp	r0, #0
    cbcc:	d000      	beq.n	cbd0 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    cbce:	2001      	movs	r0, #1
    cbd0:	bd10      	pop	{r4, pc}

0000cbd2 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    cbd2:	2201      	movs	r2, #1
    cbd4:	f7ff bf39 	b.w	ca4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000cbd8 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    cbd8:	2200      	movs	r2, #0
    cbda:	f7ff bf36 	b.w	ca4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000cbde <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    cbde:	b570      	push	{r4, r5, r6, lr}
    cbe0:	b109      	cbz	r1, cbe6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    cbe2:	2300      	movs	r3, #0
    cbe4:	e000      	b.n	cbe8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    cbe6:	2302      	movs	r3, #2
    cbe8:	2101      	movs	r1, #1
    cbea:	7081      	strb	r1, [r0, #2]
    cbec:	18c1      	adds	r1, r0, r3
    cbee:	2402      	movs	r4, #2
    cbf0:	7d0d      	ldrb	r5, [r1, #20]
    cbf2:	2d01      	cmp	r5, #1
    cbf4:	d007      	beq.n	cc06 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    cbf6:	7d4d      	ldrb	r5, [r1, #21]
    cbf8:	2d01      	cmp	r5, #1
    cbfa:	d009      	beq.n	cc10 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    cbfc:	f44f 718b 	mov.w	r1, #278	; 0x116
    cc00:	2009      	movs	r0, #9
    cc02:	f7f7 f86d 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    cc0a:	831a      	strh	r2, [r3, #24]
    cc0c:	750c      	strb	r4, [r1, #20]
    cc0e:	e003      	b.n	cc18 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    cc10:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    cc14:	835a      	strh	r2, [r3, #26]
    cc16:	754c      	strb	r4, [r1, #21]
    cc18:	2100      	movs	r1, #0
    cc1a:	7081      	strb	r1, [r0, #2]
    cc1c:	bd70      	pop	{r4, r5, r6, pc}

0000cc1e <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    cc1e:	2101      	movs	r1, #1
    cc20:	7001      	strb	r1, [r0, #0]
    cc22:	4770      	bx	lr

0000cc24 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    cc24:	2201      	movs	r2, #1
    cc26:	4611      	mov	r1, r2
    cc28:	f7ff bf3d 	b.w	caa6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000cc2c <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    cc2c:	2201      	movs	r2, #1
    cc2e:	2100      	movs	r1, #0
    cc30:	f7ff bf39 	b.w	caa6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000cc34 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    cc34:	2100      	movs	r1, #0
    cc36:	f7ff bee2 	b.w	c9fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    cc3a:	2800      	cmp	r0, #0
    cc3c:	db09      	blt.n	cc52 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    cc3e:	f000 021f 	and.w	r2, r0, #31
    cc42:	2101      	movs	r1, #1
    cc44:	4091      	lsls	r1, r2
    cc46:	0940      	lsrs	r0, r0, #5
    cc48:	0080      	lsls	r0, r0, #2
    cc4a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cc4e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cc52:	4770      	bx	lr
    cc54:	5840      	ldr	r0, [r0, r1]
    cc56:	2800      	cmp	r0, #0
    cc58:	d000      	beq.n	cc5c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x28>
    cc5a:	2001      	movs	r0, #1
    cc5c:	4770      	bx	lr

0000cc5e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    cc5e:	f7f7 bddd 	b.w	481c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000cc62 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    cc62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cc66:	2000      	movs	r0, #0
    cc68:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    cc6c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cc70:	2001      	movs	r0, #1
    cc72:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    cc76:	4770      	bx	lr

0000cc78 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    cc78:	b108      	cbz	r0, cc7e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    cc7a:	2000      	movs	r0, #0
    cc7c:	4770      	bx	lr
    cc7e:	2001      	movs	r0, #1
    cc80:	4770      	bx	lr

0000cc82 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    cc82:	f7f7 bf1d 	b.w	4ac0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000cc86 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    cc86:	f7f7 bf0b 	b.w	4aa0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000cc8a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    cc8a:	b510      	push	{r4, lr}
    cc8c:	2900      	cmp	r1, #0
    cc8e:	4604      	mov	r4, r0
    cc90:	f04f 0106 	mov.w	r1, #6
    cc94:	d002      	beq.n	cc9c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    cc96:	f7f7 f8af 	bl	3df8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    cc9a:	e001      	b.n	cca0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    cc9c:	f7f7 f8ba 	bl	3e14 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    cca0:	7960      	ldrb	r0, [r4, #5]
    cca2:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    cca6:	7160      	strb	r0, [r4, #5]
    cca8:	bd10      	pop	{r4, pc}

0000ccaa <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    ccaa:	4770      	bx	lr

0000ccac <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    ccac:	b530      	push	{r4, r5, lr}
    ccae:	460c      	mov	r4, r1
    ccb0:	4605      	mov	r5, r0
    ccb2:	b08d      	sub	sp, #52	; 0x34
    ccb4:	f04f 0103 	mov.w	r1, #3
    ccb8:	f104 0003 	add.w	r0, r4, #3
    ccbc:	b112      	cbz	r2, ccc4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    ccbe:	f7f7 f89b 	bl	3df8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ccc2:	e001      	b.n	ccc8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    ccc4:	f7f7 f8a6 	bl	3e14 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ccc8:	7960      	ldrb	r0, [r4, #5]
    ccca:	220d      	movs	r2, #13
    cccc:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    ccd0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ccd4:	7160      	strb	r0, [r4, #5]
    ccd6:	2100      	movs	r1, #0
    ccd8:	a804      	add	r0, sp, #16
    ccda:	f7fe fec9 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ccde:	78e0      	ldrb	r0, [r4, #3]
    cce0:	f88d 001f 	strb.w	r0, [sp, #31]
    cce4:	7920      	ldrb	r0, [r4, #4]
    cce6:	f88d 001e 	strb.w	r0, [sp, #30]
    ccea:	7960      	ldrb	r0, [r4, #5]
    ccec:	f88d 001d 	strb.w	r0, [sp, #29]
    ccf0:	2210      	movs	r2, #16
    ccf2:	4629      	mov	r1, r5
    ccf4:	4668      	mov	r0, sp
    ccf6:	f7fe fe41 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ccfa:	4668      	mov	r0, sp
    ccfc:	f7ff ffaf 	bl	cc5e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    cd00:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    cd04:	7020      	strb	r0, [r4, #0]
    cd06:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    cd0a:	7060      	strb	r0, [r4, #1]
    cd0c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    cd10:	70a0      	strb	r0, [r4, #2]
    cd12:	b00d      	add	sp, #52	; 0x34
    cd14:	bd30      	pop	{r4, r5, pc}

0000cd16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    cd16:	f7f8 baab 	b.w	5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    cd1a:	07c1      	lsls	r1, r0, #31
    cd1c:	d001      	beq.n	cd22 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    cd1e:	2001      	movs	r0, #1
    cd20:	4770      	bx	lr
    cd22:	0780      	lsls	r0, r0, #30
    cd24:	d501      	bpl.n	cd2a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    cd26:	2002      	movs	r0, #2
    cd28:	4770      	bx	lr
    cd2a:	2000      	movs	r0, #0
    cd2c:	4770      	bx	lr
    cd2e:	b510      	push	{r4, lr}
    cd30:	2801      	cmp	r0, #1
    cd32:	d008      	beq.n	cd46 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    cd34:	2802      	cmp	r0, #2
    cd36:	d004      	beq.n	cd42 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    cd38:	f240 31ad 	movw	r1, #941	; 0x3ad
    cd3c:	2006      	movs	r0, #6
    cd3e:	f7f6 ffcf 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd42:	2001      	movs	r0, #1
    cd44:	bd10      	pop	{r4, pc}
    cd46:	2000      	movs	r0, #0
    cd48:	bd10      	pop	{r4, pc}
    cd4a:	2900      	cmp	r1, #0
    cd4c:	d004      	beq.n	cd58 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    cd4e:	2801      	cmp	r0, #1
    cd50:	d003      	beq.n	cd5a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    cd52:	2901      	cmp	r1, #1
    cd54:	d001      	beq.n	cd5a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    cd56:	2002      	movs	r0, #2
    cd58:	4770      	bx	lr
    cd5a:	2001      	movs	r0, #1
    cd5c:	4770      	bx	lr
    cd5e:	f7ff bcab 	b.w	c6b8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000cd62 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    cd62:	2101      	movs	r1, #1
    cd64:	f7f8 be14 	b.w	5990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000cd68 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    cd68:	b510      	push	{r4, lr}
    cd6a:	f002 fc46 	bl	f5fa <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    cd6e:	b118      	cbz	r0, cd78 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    cd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cd74:	f7fd bb6a 	b.w	a44c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    cd78:	20ff      	movs	r0, #255	; 0xff
    cd7a:	bd10      	pop	{r4, pc}

0000cd7c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    cd7c:	b510      	push	{r4, lr}
    cd7e:	f7f8 fe4f 	bl	5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    cd82:	2810      	cmp	r0, #16
    cd84:	d003      	beq.n	cd8e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    cd86:	f7f8 fe1b 	bl	59c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    cd8a:	2810      	cmp	r0, #16
    cd8c:	d100      	bne.n	cd90 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    cd8e:	2008      	movs	r0, #8
    cd90:	bd10      	pop	{r4, pc}

0000cd92 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    cd92:	b510      	push	{r4, lr}
    cd94:	f7f8 fe44 	bl	5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    cd98:	2810      	cmp	r0, #16
    cd9a:	d007      	beq.n	cdac <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    cd9c:	f7f8 fe10 	bl	59c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    cda0:	2810      	cmp	r0, #16
    cda2:	d003      	beq.n	cdac <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    cda4:	f7f8 fe84 	bl	5ab0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    cda8:	2001      	movs	r0, #1
    cdaa:	bd10      	pop	{r4, pc}
    cdac:	2000      	movs	r0, #0
    cdae:	bd10      	pop	{r4, pc}

0000cdb0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    cdb0:	b510      	push	{r4, lr}
    cdb2:	f7f8 fe35 	bl	5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    cdb6:	2810      	cmp	r0, #16
    cdb8:	d003      	beq.n	cdc2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    cdba:	f7f8 fec1 	bl	5b40 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    cdbe:	2001      	movs	r0, #1
    cdc0:	bd10      	pop	{r4, pc}
    cdc2:	2000      	movs	r0, #0
    cdc4:	bd10      	pop	{r4, pc}

0000cdc6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    cdc6:	b570      	push	{r4, r5, r6, lr}
    cdc8:	460e      	mov	r6, r1
    cdca:	b08c      	sub	sp, #48	; 0x30
    cdcc:	4614      	mov	r4, r2
    cdce:	4601      	mov	r1, r0
    cdd0:	461d      	mov	r5, r3
    cdd2:	2210      	movs	r2, #16
    cdd4:	4668      	mov	r0, sp
    cdd6:	f000 f91a 	bl	d00e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cdda:	2210      	movs	r2, #16
    cddc:	4631      	mov	r1, r6
    cdde:	a804      	add	r0, sp, #16
    cde0:	f000 f915 	bl	d00e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cde4:	4668      	mov	r0, sp
    cde6:	f7ff ff3a 	bl	cc5e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    cdea:	a908      	add	r1, sp, #32
    cdec:	f04f 0210 	mov.w	r2, #16
    cdf0:	4628      	mov	r0, r5
    cdf2:	b11c      	cbz	r4, cdfc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    cdf4:	f000 f90b 	bl	d00e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cdf8:	b00c      	add	sp, #48	; 0x30
    cdfa:	bd70      	pop	{r4, r5, r6, pc}
    cdfc:	f7fe fdbe 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce00:	e7fa      	b.n	cdf8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ce02:	b510      	push	{r4, lr}
    ce04:	460c      	mov	r4, r1
    ce06:	2100      	movs	r1, #0
    ce08:	f7ff fdb3 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ce0c:	6060      	str	r0, [r4, #4]
    ce0e:	b118      	cbz	r0, ce18 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    ce10:	2001      	movs	r0, #1
    ce12:	7020      	strb	r0, [r4, #0]
    ce14:	2000      	movs	r0, #0
    ce16:	bd10      	pop	{r4, pc}
    ce18:	2002      	movs	r0, #2
    ce1a:	bd10      	pop	{r4, pc}

0000ce1c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ce1c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ce20:	4348      	muls	r0, r1
    ce22:	4770      	bx	lr

0000ce24 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    ce24:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ce28:	fbb0 f0f1 	udiv	r0, r0, r1
    ce2c:	b280      	uxth	r0, r0
    ce2e:	4770      	bx	lr

0000ce30 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    ce30:	b570      	push	{r4, r5, r6, lr}
    ce32:	4604      	mov	r4, r0
    ce34:	4290      	cmp	r0, r2
    ce36:	d20b      	bcs.n	ce50 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    ce38:	1b10      	subs	r0, r2, r4
    ce3a:	2865      	cmp	r0, #101	; 0x65
    ce3c:	d200      	bcs.n	ce40 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    ce3e:	2065      	movs	r0, #101	; 0x65
    ce40:	1825      	adds	r5, r4, r0
    ce42:	428d      	cmp	r5, r1
    ce44:	d803      	bhi.n	ce4e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    ce46:	2104      	movs	r1, #4
    ce48:	f7f4 fa76 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ce4c:	b108      	cbz	r0, ce52 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    ce4e:	4620      	mov	r0, r4
    ce50:	bd70      	pop	{r4, r5, r6, pc}
    ce52:	4628      	mov	r0, r5
    ce54:	bd70      	pop	{r4, r5, r6, pc}

0000ce56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    ce56:	b510      	push	{r4, lr}
    ce58:	f1a2 030f 	sub.w	r3, r2, #15
    ce5c:	290c      	cmp	r1, #12
    ce5e:	d244      	bcs.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce60:	e8df f001 	tbb	[pc, r1]
    ce64:	120d0806 	.word	0x120d0806
    ce68:	241c1815 	.word	0x241c1815
    ce6c:	312a4127 	.word	0x312a4127
    ce70:	b3c2      	cbz	r2, cee4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    ce72:	e03a      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce74:	2a07      	cmp	r2, #7
    ce76:	d03a      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce78:	2a08      	cmp	r2, #8
    ce7a:	d038      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce7c:	e035      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce7e:	2a0c      	cmp	r2, #12
    ce80:	d035      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce82:	2a0b      	cmp	r2, #11
    ce84:	d033      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce86:	e030      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce88:	2a0d      	cmp	r2, #13
    ce8a:	d030      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce8c:	e02d      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce8e:	2b0c      	cmp	r3, #12
    ce90:	d92d      	bls.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce92:	e02a      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce94:	3a10      	subs	r2, #16
    ce96:	2a0b      	cmp	r2, #11
    ce98:	d929      	bls.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce9a:	e026      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce9c:	2b03      	cmp	r3, #3
    ce9e:	d926      	bls.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cea0:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    cea4:	b308      	cbz	r0, ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cea6:	2a1b      	cmp	r2, #27
    cea8:	d921      	bls.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceaa:	e01e      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ceac:	2a04      	cmp	r2, #4
    ceae:	d01e      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceb0:	e01b      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ceb2:	2a06      	cmp	r2, #6
    ceb4:	d01b      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceb6:	e018      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ceb8:	2a1c      	cmp	r2, #28
    ceba:	d018      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cebc:	2a1d      	cmp	r2, #29
    cebe:	d016      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cec0:	2a1e      	cmp	r2, #30
    cec2:	d014      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cec4:	e011      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cec6:	2a1f      	cmp	r2, #31
    cec8:	d011      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceca:	2a20      	cmp	r2, #32
    cecc:	d00f      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cece:	2a21      	cmp	r2, #33	; 0x21
    ced0:	d00d      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ced2:	2a22      	cmp	r2, #34	; 0x22
    ced4:	d00b      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ced6:	2a23      	cmp	r2, #35	; 0x23
    ced8:	d009      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceda:	2a24      	cmp	r2, #36	; 0x24
    cedc:	d007      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cede:	2a26      	cmp	r2, #38	; 0x26
    cee0:	d005      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cee2:	e002      	b.n	ceea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cee4:	e003      	b.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cee6:	2a0e      	cmp	r2, #14
    cee8:	d001      	beq.n	ceee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ceea:	2000      	movs	r0, #0
    ceec:	bd10      	pop	{r4, pc}
    ceee:	2001      	movs	r0, #1
    cef0:	bd10      	pop	{r4, pc}

0000cef2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    cef2:	280c      	cmp	r0, #12
    cef4:	d013      	beq.n	cf1e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cef6:	280b      	cmp	r0, #11
    cef8:	d011      	beq.n	cf1e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cefa:	280d      	cmp	r0, #13
    cefc:	d00f      	beq.n	cf1e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cefe:	281f      	cmp	r0, #31
    cf00:	d00d      	beq.n	cf1e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf02:	2820      	cmp	r0, #32
    cf04:	d00b      	beq.n	cf1e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf06:	2821      	cmp	r0, #33	; 0x21
    cf08:	d009      	beq.n	cf1e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf0a:	2822      	cmp	r0, #34	; 0x22
    cf0c:	d007      	beq.n	cf1e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf0e:	2823      	cmp	r0, #35	; 0x23
    cf10:	d005      	beq.n	cf1e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf12:	2824      	cmp	r0, #36	; 0x24
    cf14:	d003      	beq.n	cf1e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf16:	2826      	cmp	r0, #38	; 0x26
    cf18:	d001      	beq.n	cf1e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cf1a:	2000      	movs	r0, #0
    cf1c:	4770      	bx	lr
    cf1e:	2001      	movs	r0, #1
    cf20:	4770      	bx	lr

0000cf22 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    cf22:	f011 0f0c 	tst.w	r1, #12
    cf26:	d016      	beq.n	cf56 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    cf28:	074a      	lsls	r2, r1, #29
    cf2a:	f44f 7116 	mov.w	r1, #600	; 0x258
    cf2e:	2a00      	cmp	r2, #0
    cf30:	da02      	bge.n	cf38 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    cf32:	f04f 0210 	mov.w	r2, #16
    cf36:	e001      	b.n	cf3c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    cf38:	f04f 0240 	mov.w	r2, #64	; 0x40
    cf3c:	da01      	bge.n	cf42 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    cf3e:	f04f 0196 	mov.w	r1, #150	; 0x96
    cf42:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    cf46:	eba0 0301 	sub.w	r3, r0, r1
    cf4a:	4288      	cmp	r0, r1
    cf4c:	d910      	bls.n	cf70 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cf4e:	fb93 f0f2 	sdiv	r0, r3, r2
    cf52:	b280      	uxth	r0, r0
    cf54:	4770      	bx	lr
    cf56:	2902      	cmp	r1, #2
    cf58:	d002      	beq.n	cf60 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    cf5a:	2870      	cmp	r0, #112	; 0x70
    cf5c:	d80a      	bhi.n	cf74 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    cf5e:	e007      	b.n	cf70 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cf60:	283c      	cmp	r0, #60	; 0x3c
    cf62:	d905      	bls.n	cf70 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cf64:	383c      	subs	r0, #60	; 0x3c
    cf66:	17c1      	asrs	r1, r0, #31
    cf68:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    cf6c:	1080      	asrs	r0, r0, #2
    cf6e:	e7f0      	b.n	cf52 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    cf70:	2000      	movs	r0, #0
    cf72:	e7ee      	b.n	cf52 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    cf74:	3870      	subs	r0, #112	; 0x70
    cf76:	17c1      	asrs	r1, r0, #31
    cf78:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    cf7c:	10c0      	asrs	r0, r0, #3
    cf7e:	e7e8      	b.n	cf52 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000cf80 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    cf80:	6809      	ldr	r1, [r1, #0]
    cf82:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    cf86:	4770      	bx	lr

0000cf88 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    cf88:	07c1      	lsls	r1, r0, #31
    cf8a:	d001      	beq.n	cf90 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    cf8c:	2001      	movs	r0, #1
    cf8e:	4770      	bx	lr
    cf90:	0781      	lsls	r1, r0, #30
    cf92:	d501      	bpl.n	cf98 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    cf94:	2002      	movs	r0, #2
    cf96:	4770      	bx	lr
    cf98:	0740      	lsls	r0, r0, #29
    cf9a:	d501      	bpl.n	cfa0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    cf9c:	2008      	movs	r0, #8
    cf9e:	4770      	bx	lr
    cfa0:	2000      	movs	r0, #0
    cfa2:	4770      	bx	lr

0000cfa4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    cfa4:	b510      	push	{r4, lr}
    cfa6:	f640 12c4 	movw	r2, #2500	; 0x9c4
    cfaa:	2901      	cmp	r1, #1
    cfac:	d006      	beq.n	cfbc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    cfae:	2902      	cmp	r1, #2
    cfb0:	d005      	beq.n	cfbe <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    cfb2:	f240 31b1 	movw	r1, #945	; 0x3b1
    cfb6:	2029      	movs	r0, #41	; 0x29
    cfb8:	f7f6 fe92 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfbc:	b108      	cbz	r0, cfc2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    cfbe:	4610      	mov	r0, r2
    cfc0:	bd10      	pop	{r4, pc}
    cfc2:	f240 40e2 	movw	r0, #1250	; 0x4e2
    cfc6:	bd10      	pop	{r4, pc}

0000cfc8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    cfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfcc:	460c      	mov	r4, r1
    cfce:	4605      	mov	r5, r0
    cfd0:	68c6      	ldr	r6, [r0, #12]
    cfd2:	f7f4 fdb7 	bl	1b44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    cfd6:	b198      	cbz	r0, d000 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    cfd8:	b1bc      	cbz	r4, d00a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    cfda:	4630      	mov	r0, r6
    cfdc:	68e9      	ldr	r1, [r5, #12]
    cfde:	f7f4 faaf 	bl	1540 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    cfe2:	2800      	cmp	r0, #0
    cfe4:	dd11      	ble.n	d00a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    cfe6:	4420      	add	r0, r4
    cfe8:	1e40      	subs	r0, r0, #1
    cfea:	fbb0 f7f4 	udiv	r7, r0, r4
    cfee:	fb07 f104 	mul.w	r1, r7, r4
    cff2:	4630      	mov	r0, r6
    cff4:	f7f4 fa72 	bl	14dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    cff8:	60e8      	str	r0, [r5, #12]
    cffa:	4638      	mov	r0, r7
    cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d000:	f240 2136 	movw	r1, #566	; 0x236
    d004:	2029      	movs	r0, #41	; 0x29
    d006:	f7f6 fe6b 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d00a:	2000      	movs	r0, #0
    d00c:	e7f6      	b.n	cffc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d00e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d00e:	b530      	push	{r4, r5, lr}
    d010:	4613      	mov	r3, r2
    d012:	e006      	b.n	d022 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d014:	18cc      	adds	r4, r1, r3
    d016:	1ad5      	subs	r5, r2, r3
    d018:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d01c:	1e5b      	subs	r3, r3, #1
    d01e:	5544      	strb	r4, [r0, r5]
    d020:	b2db      	uxtb	r3, r3
    d022:	2b00      	cmp	r3, #0
    d024:	d1f6      	bne.n	d014 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d026:	bd30      	pop	{r4, r5, pc}

0000d028 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d028:	b538      	push	{r3, r4, r5, lr}
    d02a:	4605      	mov	r5, r0
    d02c:	460c      	mov	r4, r1
    d02e:	4668      	mov	r0, sp
    d030:	f7fd ff6c 	bl	af0c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d034:	b310      	cbz	r0, d07c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    d036:	f99d 0000 	ldrsb.w	r0, [sp]
    d03a:	7260      	strb	r0, [r4, #9]
    d03c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    d040:	72a1      	strb	r1, [r4, #10]
    d042:	f994 100b 	ldrsb.w	r1, [r4, #11]
    d046:	2200      	movs	r2, #0
    d048:	1a41      	subs	r1, r0, r1
    d04a:	d500      	bpl.n	d04e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    d04c:	4249      	negs	r1, r1
    d04e:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    d052:	428b      	cmp	r3, r1
    d054:	dc10      	bgt.n	d078 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d056:	2bff      	cmp	r3, #255	; 0xff
    d058:	d00e      	beq.n	d078 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d05a:	7b21      	ldrb	r1, [r4, #12]
    d05c:	1c49      	adds	r1, r1, #1
    d05e:	b2c9      	uxtb	r1, r1
    d060:	7321      	strb	r1, [r4, #12]
    d062:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    d066:	4299      	cmp	r1, r3
    d068:	d802      	bhi.n	d070 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    d06a:	7ae1      	ldrb	r1, [r4, #11]
    d06c:	297f      	cmp	r1, #127	; 0x7f
    d06e:	d103      	bne.n	d078 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d070:	72e0      	strb	r0, [r4, #11]
    d072:	2000      	movs	r0, #0
    d074:	7320      	strb	r0, [r4, #12]
    d076:	2201      	movs	r2, #1
    d078:	4610      	mov	r0, r2
    d07a:	bd38      	pop	{r3, r4, r5, pc}
    d07c:	207f      	movs	r0, #127	; 0x7f
    d07e:	7260      	strb	r0, [r4, #9]
    d080:	2000      	movs	r0, #0
    d082:	bd38      	pop	{r3, r4, r5, pc}

0000d084 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d084:	2300      	movs	r3, #0
    d086:	6283      	str	r3, [r0, #40]	; 0x28
    d088:	8602      	strh	r2, [r0, #48]	; 0x30
    d08a:	f240 2371 	movw	r3, #625	; 0x271
    d08e:	435a      	muls	r2, r3
    d090:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d094:	1e52      	subs	r2, r2, #1
    d096:	fbb2 f1f1 	udiv	r1, r2, r1
    d09a:	62c1      	str	r1, [r0, #44]	; 0x2c
    d09c:	4770      	bx	lr

0000d09e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d09e:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d0a2:	4607      	mov	r7, r0
    d0a4:	4690      	mov	r8, r2
    d0a6:	468b      	mov	fp, r1
    d0a8:	2601      	movs	r6, #1
    d0aa:	4608      	mov	r0, r1
    d0ac:	f000 f941 	bl	d332 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d0b0:	4682      	mov	sl, r0
    d0b2:	4658      	mov	r0, fp
    d0b4:	f000 f949 	bl	d34a <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d0b8:	4681      	mov	r9, r0
    d0ba:	f7ff ff65 	bl	cf88 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d0be:	4604      	mov	r4, r0
    d0c0:	4650      	mov	r0, sl
    d0c2:	f7ff ff61 	bl	cf88 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d0c6:	4605      	mov	r5, r0
    d0c8:	ea54 0005 	orrs.w	r0, r4, r5
    d0cc:	d100      	bne.n	d0d0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d0ce:	2600      	movs	r6, #0
    d0d0:	f7fd f944 	bl	a35c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d0d4:	ea10 0f09 	tst.w	r0, r9
    d0d8:	d100      	bne.n	d0dc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d0da:	2400      	movs	r4, #0
    d0dc:	f7fd f93e 	bl	a35c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d0e0:	ea10 0f0a 	tst.w	r0, sl
    d0e4:	d100      	bne.n	d0e8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d0e6:	2500      	movs	r5, #0
    d0e8:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    d0ec:	42a0      	cmp	r0, r4
    d0ee:	d100      	bne.n	d0f2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d0f0:	2400      	movs	r4, #0
    d0f2:	f888 4000 	strb.w	r4, [r8]
    d0f6:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    d0fa:	42a8      	cmp	r0, r5
    d0fc:	d100      	bne.n	d100 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d0fe:	2500      	movs	r5, #0
    d100:	f888 5001 	strb.w	r5, [r8, #1]
    d104:	b974      	cbnz	r4, d124 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d106:	b96d      	cbnz	r5, d124 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d108:	4658      	mov	r0, fp
    d10a:	f000 f91c 	bl	d346 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d10e:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    d112:	1a40      	subs	r0, r0, r1
    d114:	b200      	sxth	r0, r0
    d116:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d11a:	4288      	cmp	r0, r1
    d11c:	dc01      	bgt.n	d122 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d11e:	2800      	cmp	r0, #0
    d120:	dc00      	bgt.n	d124 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d122:	2600      	movs	r6, #0
    d124:	4630      	mov	r0, r6
    d126:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d12a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d12a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d12e:	4348      	muls	r0, r1
    d130:	4770      	bx	lr

0000d132 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d132:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d136:	fb10 f001 	smulbb	r0, r0, r1
    d13a:	4770      	bx	lr

0000d13c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d13c:	b510      	push	{r4, lr}
    d13e:	2300      	movs	r3, #0
    d140:	461a      	mov	r2, r3
    d142:	e003      	b.n	d14c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d144:	5c84      	ldrb	r4, [r0, r2]
    d146:	4323      	orrs	r3, r4
    d148:	1c52      	adds	r2, r2, #1
    d14a:	b2d2      	uxtb	r2, r2
    d14c:	428a      	cmp	r2, r1
    d14e:	d3f9      	bcc.n	d144 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d150:	b10b      	cbz	r3, d156 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d152:	2000      	movs	r0, #0
    d154:	bd10      	pop	{r4, pc}
    d156:	2001      	movs	r0, #1
    d158:	bd10      	pop	{r4, pc}

0000d15a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    d15a:	b510      	push	{r4, lr}
    d15c:	4604      	mov	r4, r0
    d15e:	f890 0020 	ldrb.w	r0, [r0, #32]
    d162:	b108      	cbz	r0, d168 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    d164:	2825      	cmp	r0, #37	; 0x25
    d166:	d901      	bls.n	d16c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    d168:	2012      	movs	r0, #18
    d16a:	bd10      	pop	{r4, pc}
    d16c:	b12a      	cbz	r2, d17a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    d16e:	7d60      	ldrb	r0, [r4, #21]
    d170:	b128      	cbz	r0, d17e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    d172:	2801      	cmp	r0, #1
    d174:	d009      	beq.n	d18a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    d176:	201f      	movs	r0, #31
    d178:	bd10      	pop	{r4, pc}
    d17a:	2000      	movs	r0, #0
    d17c:	bd10      	pop	{r4, pc}
    d17e:	4620      	mov	r0, r4
    d180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d184:	4611      	mov	r1, r2
    d186:	f7f8 bdcf 	b.w	5d28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    d18a:	88a2      	ldrh	r2, [r4, #4]
    d18c:	6909      	ldr	r1, [r1, #16]
    d18e:	f104 0015 	add.w	r0, r4, #21
    d192:	f7f8 fd75 	bl	5c80 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    d196:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    d19a:	e7ee      	b.n	d17a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000d19c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    d19c:	b530      	push	{r4, r5, lr}
    d19e:	1c42      	adds	r2, r0, #1
    d1a0:	428a      	cmp	r2, r1
    d1a2:	d004      	beq.n	d1ae <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    d1a4:	680a      	ldr	r2, [r1, #0]
    d1a6:	f8c0 2001 	str.w	r2, [r0, #1]
    d1aa:	7909      	ldrb	r1, [r1, #4]
    d1ac:	7141      	strb	r1, [r0, #5]
    d1ae:	7941      	ldrb	r1, [r0, #5]
    d1b0:	f001 011f 	and.w	r1, r1, #31
    d1b4:	7141      	strb	r1, [r0, #5]
    d1b6:	2100      	movs	r1, #0
    d1b8:	72c1      	strb	r1, [r0, #11]
    d1ba:	1843      	adds	r3, r0, r1
    d1bc:	1c49      	adds	r1, r1, #1
    d1be:	785c      	ldrb	r4, [r3, #1]
    d1c0:	b2c9      	uxtb	r1, r1
    d1c2:	f004 0201 	and.w	r2, r4, #1
    d1c6:	0864      	lsrs	r4, r4, #1
    d1c8:	f004 0501 	and.w	r5, r4, #1
    d1cc:	4415      	add	r5, r2
    d1ce:	0862      	lsrs	r2, r4, #1
    d1d0:	f002 0401 	and.w	r4, r2, #1
    d1d4:	442c      	add	r4, r5
    d1d6:	0852      	lsrs	r2, r2, #1
    d1d8:	f002 0501 	and.w	r5, r2, #1
    d1dc:	442c      	add	r4, r5
    d1de:	0852      	lsrs	r2, r2, #1
    d1e0:	f002 0501 	and.w	r5, r2, #1
    d1e4:	442c      	add	r4, r5
    d1e6:	0852      	lsrs	r2, r2, #1
    d1e8:	f002 0501 	and.w	r5, r2, #1
    d1ec:	442c      	add	r4, r5
    d1ee:	0852      	lsrs	r2, r2, #1
    d1f0:	f002 0501 	and.w	r5, r2, #1
    d1f4:	442c      	add	r4, r5
    d1f6:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    d1fa:	719a      	strb	r2, [r3, #6]
    d1fc:	7ac3      	ldrb	r3, [r0, #11]
    d1fe:	2905      	cmp	r1, #5
    d200:	441a      	add	r2, r3
    d202:	72c2      	strb	r2, [r0, #11]
    d204:	d3d9      	bcc.n	d1ba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    d206:	bd30      	pop	{r4, r5, pc}
    d208:	b570      	push	{r4, r5, r6, lr}
    d20a:	f8d0 201f 	ldr.w	r2, [r0, #31]
    d20e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    d212:	f012 0fff 	tst.w	r2, #255	; 0xff
    d216:	f023 031f 	bic.w	r3, r3, #31
    d21a:	d108      	bne.n	d22e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d21c:	f3c2 2407 	ubfx	r4, r2, #8, #8
    d220:	b92c      	cbnz	r4, d22e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d222:	f3c2 4407 	ubfx	r4, r2, #16, #8
    d226:	b914      	cbnz	r4, d22e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d228:	0e12      	lsrs	r2, r2, #24
    d22a:	d100      	bne.n	d22e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d22c:	b35b      	cbz	r3, d286 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d22e:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d232:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d236:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d23a:	7d83      	ldrb	r3, [r0, #22]
    d23c:	b141      	cbz	r1, d250 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d23e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d242:	d905      	bls.n	d250 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d244:	f640 5107 	movw	r1, #3335	; 0xd07
    d248:	428a      	cmp	r2, r1
    d24a:	d801      	bhi.n	d250 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d24c:	2101      	movs	r1, #1
    d24e:	e000      	b.n	d252 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    d250:	2100      	movs	r1, #0
    d252:	7846      	ldrb	r6, [r0, #1]
    d254:	2e22      	cmp	r6, #34	; 0x22
    d256:	d116      	bne.n	d286 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d258:	b959      	cbnz	r1, d272 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    d25a:	1f91      	subs	r1, r2, #6
    d25c:	f640 467a 	movw	r6, #3194	; 0xc7a
    d260:	42b1      	cmp	r1, r6
    d262:	d810      	bhi.n	d286 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d264:	b17b      	cbz	r3, d286 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d266:	2b08      	cmp	r3, #8
    d268:	d80d      	bhi.n	d286 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d26a:	4293      	cmp	r3, r2
    d26c:	d20b      	bcs.n	d286 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d26e:	4294      	cmp	r4, r2
    d270:	d809      	bhi.n	d286 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d272:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d276:	d206      	bcs.n	d286 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d278:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d27c:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d280:	d801      	bhi.n	d286 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d282:	2001      	movs	r0, #1
    d284:	bd70      	pop	{r4, r5, r6, pc}
    d286:	2000      	movs	r0, #0
    d288:	bd70      	pop	{r4, r5, r6, pc}

0000d28a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d28a:	b570      	push	{r4, r5, r6, lr}
    d28c:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d290:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d294:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d298:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d29c:	88c0      	ldrh	r0, [r0, #6]
    d29e:	b131      	cbz	r1, d2ae <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d2a0:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d2a4:	d903      	bls.n	d2ae <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d2a6:	f640 5107 	movw	r1, #3335	; 0xd07
    d2aa:	428a      	cmp	r2, r1
    d2ac:	d90b      	bls.n	d2c6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d2ae:	1f91      	subs	r1, r2, #6
    d2b0:	f640 467a 	movw	r6, #3194	; 0xc7a
    d2b4:	42b1      	cmp	r1, r6
    d2b6:	d80e      	bhi.n	d2d6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2b8:	b16b      	cbz	r3, d2d6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2ba:	2b08      	cmp	r3, #8
    d2bc:	d80b      	bhi.n	d2d6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2be:	4293      	cmp	r3, r2
    d2c0:	d209      	bcs.n	d2d6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2c2:	4294      	cmp	r4, r2
    d2c4:	d807      	bhi.n	d2d6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2c6:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d2ca:	d204      	bcs.n	d2d6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2cc:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d2d0:	d801      	bhi.n	d2d6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d2d2:	2001      	movs	r0, #1
    d2d4:	bd70      	pop	{r4, r5, r6, pc}
    d2d6:	2000      	movs	r0, #0
    d2d8:	bd70      	pop	{r4, r5, r6, pc}

0000d2da <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d2da:	6842      	ldr	r2, [r0, #4]
    d2dc:	600a      	str	r2, [r1, #0]
    d2de:	7a00      	ldrb	r0, [r0, #8]
    d2e0:	7108      	strb	r0, [r1, #4]
    d2e2:	4770      	bx	lr

0000d2e4 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d2e4:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d2e8:	4770      	bx	lr

0000d2ea <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d2ea:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d2ee:	4770      	bx	lr

0000d2f0 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d2f0:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d2f4:	4770      	bx	lr

0000d2f6 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d2f6:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d2fa:	4770      	bx	lr

0000d2fc <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d2fc:	8980      	ldrh	r0, [r0, #12]
    d2fe:	8008      	strh	r0, [r1, #0]
    d300:	4770      	bx	lr

0000d302 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d302:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d306:	6008      	str	r0, [r1, #0]
    d308:	4770      	bx	lr

0000d30a <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d30a:	6842      	ldr	r2, [r0, #4]
    d30c:	600a      	str	r2, [r1, #0]
    d30e:	6880      	ldr	r0, [r0, #8]
    d310:	6048      	str	r0, [r1, #4]
    d312:	4770      	bx	lr

0000d314 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d314:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d318:	600a      	str	r2, [r1, #0]
    d31a:	6840      	ldr	r0, [r0, #4]
    d31c:	6048      	str	r0, [r1, #4]
    d31e:	4770      	bx	lr

0000d320 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d320:	6842      	ldr	r2, [r0, #4]
    d322:	600a      	str	r2, [r1, #0]
    d324:	6880      	ldr	r0, [r0, #8]
    d326:	6048      	str	r0, [r1, #4]
    d328:	4770      	bx	lr

0000d32a <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d32a:	7800      	ldrb	r0, [r0, #0]
    d32c:	f000 0003 	and.w	r0, r0, #3
    d330:	4770      	bx	lr

0000d332 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d332:	7900      	ldrb	r0, [r0, #4]
    d334:	4770      	bx	lr

0000d336 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d336:	8880      	ldrh	r0, [r0, #4]
    d338:	4770      	bx	lr

0000d33a <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d33a:	88c0      	ldrh	r0, [r0, #6]
    d33c:	4770      	bx	lr

0000d33e <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d33e:	8900      	ldrh	r0, [r0, #8]
    d340:	4770      	bx	lr

0000d342 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d342:	8940      	ldrh	r0, [r0, #10]
    d344:	4770      	bx	lr

0000d346 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d346:	88c0      	ldrh	r0, [r0, #6]
    d348:	4770      	bx	lr

0000d34a <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d34a:	7940      	ldrb	r0, [r0, #5]
    d34c:	4770      	bx	lr

0000d34e <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d34e:	7900      	ldrb	r0, [r0, #4]
    d350:	4770      	bx	lr

0000d352 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d352:	7900      	ldrb	r0, [r0, #4]
    d354:	4770      	bx	lr

0000d356 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d356:	8901      	ldrh	r1, [r0, #8]
    d358:	291b      	cmp	r1, #27
    d35a:	d30c      	bcc.n	d376 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d35c:	8941      	ldrh	r1, [r0, #10]
    d35e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d362:	4291      	cmp	r1, r2
    d364:	d307      	bcc.n	d376 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d366:	8881      	ldrh	r1, [r0, #4]
    d368:	291b      	cmp	r1, #27
    d36a:	d304      	bcc.n	d376 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d36c:	88c0      	ldrh	r0, [r0, #6]
    d36e:	4290      	cmp	r0, r2
    d370:	d301      	bcc.n	d376 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d372:	2001      	movs	r0, #1
    d374:	4770      	bx	lr
    d376:	2000      	movs	r0, #0
    d378:	4770      	bx	lr

0000d37a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d37a:	b510      	push	{r4, lr}
    d37c:	29fb      	cmp	r1, #251	; 0xfb
    d37e:	d904      	bls.n	d38a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d380:	f44f 61af 	mov.w	r1, #1400	; 0x578
    d384:	202a      	movs	r0, #42	; 0x2a
    d386:	f7f6 fcab 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d38a:	7041      	strb	r1, [r0, #1]
    d38c:	bd10      	pop	{r4, pc}

0000d38e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d38e:	7901      	ldrb	r1, [r0, #4]
    d390:	0749      	lsls	r1, r1, #29
    d392:	d004      	beq.n	d39e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d394:	7940      	ldrb	r0, [r0, #5]
    d396:	0740      	lsls	r0, r0, #29
    d398:	d001      	beq.n	d39e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d39a:	2001      	movs	r0, #1
    d39c:	4770      	bx	lr
    d39e:	2000      	movs	r0, #0
    d3a0:	4770      	bx	lr

0000d3a2 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d3a2:	7900      	ldrb	r0, [r0, #4]
    d3a4:	4770      	bx	lr

0000d3a6 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d3a6:	7940      	ldrb	r0, [r0, #5]
    d3a8:	4770      	bx	lr

0000d3aa <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d3aa:	7101      	strb	r1, [r0, #4]
    d3ac:	4770      	bx	lr

0000d3ae <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d3ae:	7141      	strb	r1, [r0, #5]
    d3b0:	4770      	bx	lr

0000d3b2 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d3b2:	b510      	push	{r4, lr}
    d3b4:	2a1b      	cmp	r2, #27
    d3b6:	d904      	bls.n	d3c2 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d3b8:	f240 31df 	movw	r1, #991	; 0x3df
    d3bc:	202a      	movs	r0, #42	; 0x2a
    d3be:	f7f6 fc8f 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3c2:	7042      	strb	r2, [r0, #1]
    d3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d3c8:	1cc0      	adds	r0, r0, #3
    d3ca:	f7fe bad7 	b.w	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d3ce <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d3ce:	6809      	ldr	r1, [r1, #0]
    d3d0:	60c1      	str	r1, [r0, #12]
    d3d2:	4770      	bx	lr

0000d3d4 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d3d4:	680a      	ldr	r2, [r1, #0]
    d3d6:	6042      	str	r2, [r0, #4]
    d3d8:	6849      	ldr	r1, [r1, #4]
    d3da:	6081      	str	r1, [r0, #8]
    d3dc:	4770      	bx	lr

0000d3de <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d3de:	680a      	ldr	r2, [r1, #0]
    d3e0:	6042      	str	r2, [r0, #4]
    d3e2:	6849      	ldr	r1, [r1, #4]
    d3e4:	6081      	str	r1, [r0, #8]
    d3e6:	4770      	bx	lr

0000d3e8 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d3e8:	680a      	ldr	r2, [r1, #0]
    d3ea:	6042      	str	r2, [r0, #4]
    d3ec:	6849      	ldr	r1, [r1, #4]
    d3ee:	6081      	str	r1, [r0, #8]
    d3f0:	4770      	bx	lr

0000d3f2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d3f2:	7802      	ldrb	r2, [r0, #0]
    d3f4:	f001 0103 	and.w	r1, r1, #3
    d3f8:	f022 0203 	bic.w	r2, r2, #3
    d3fc:	430a      	orrs	r2, r1
    d3fe:	7002      	strb	r2, [r0, #0]
    d400:	4770      	bx	lr

0000d402 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d402:	7101      	strb	r1, [r0, #4]
    d404:	0a09      	lsrs	r1, r1, #8
    d406:	7141      	strb	r1, [r0, #5]
    d408:	4770      	bx	lr

0000d40a <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d40a:	7181      	strb	r1, [r0, #6]
    d40c:	0a09      	lsrs	r1, r1, #8
    d40e:	71c1      	strb	r1, [r0, #7]
    d410:	4770      	bx	lr

0000d412 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d412:	7201      	strb	r1, [r0, #8]
    d414:	0a09      	lsrs	r1, r1, #8
    d416:	7241      	strb	r1, [r0, #9]
    d418:	4770      	bx	lr

0000d41a <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    d41a:	7281      	strb	r1, [r0, #10]
    d41c:	0a09      	lsrs	r1, r1, #8
    d41e:	72c1      	strb	r1, [r0, #11]
    d420:	4770      	bx	lr

0000d422 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    d422:	7802      	ldrb	r2, [r0, #0]
    d424:	f002 020f 	and.w	r2, r2, #15
    d428:	2a03      	cmp	r2, #3
    d42a:	d003      	beq.n	d434 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    d42c:	2a05      	cmp	r2, #5
    d42e:	d104      	bne.n	d43a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    d430:	f7ff beea 	b.w	d208 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    d434:	7840      	ldrb	r0, [r0, #1]
    d436:	280c      	cmp	r0, #12
    d438:	d001      	beq.n	d43e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    d43a:	2000      	movs	r0, #0
    d43c:	4770      	bx	lr
    d43e:	2001      	movs	r0, #1
    d440:	4770      	bx	lr

0000d442 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    d442:	b570      	push	{r4, r5, r6, lr}
    d444:	4614      	mov	r4, r2
    d446:	4605      	mov	r5, r0
    d448:	2a1f      	cmp	r2, #31
    d44a:	d903      	bls.n	d454 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    d44c:	21b2      	movs	r1, #178	; 0xb2
    d44e:	202a      	movs	r0, #42	; 0x2a
    d450:	f7f6 fc46 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d454:	f105 0009 	add.w	r0, r5, #9
    d458:	f7fe fa90 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d45c:	1da4      	adds	r4, r4, #6
    d45e:	706c      	strb	r4, [r5, #1]
    d460:	bd70      	pop	{r4, r5, r6, pc}

0000d462 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    d462:	b510      	push	{r4, lr}
    d464:	7802      	ldrb	r2, [r0, #0]
    d466:	f001 030f 	and.w	r3, r1, #15
    d46a:	f022 020f 	bic.w	r2, r2, #15
    d46e:	431a      	orrs	r2, r3
    d470:	7002      	strb	r2, [r0, #0]
    d472:	2907      	cmp	r1, #7
    d474:	d20c      	bcs.n	d490 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    d476:	e8df f001 	tbb	[pc, r1]
    d47a:	0604      	.short	0x0604
    d47c:	08040604 	.word	0x08040604
    d480:	0004      	.short	0x0004
    d482:	2106      	movs	r1, #6
    d484:	e002      	b.n	d48c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d486:	210c      	movs	r1, #12
    d488:	e000      	b.n	d48c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d48a:	2122      	movs	r1, #34	; 0x22
    d48c:	7041      	strb	r1, [r0, #1]
    d48e:	bd10      	pop	{r4, pc}
    d490:	216e      	movs	r1, #110	; 0x6e
    d492:	202a      	movs	r0, #42	; 0x2a
    d494:	f7f6 fc24 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d498 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    d498:	680a      	ldr	r2, [r1, #0]
    d49a:	f840 2f09 	str.w	r2, [r0, #9]!
    d49e:	8889      	ldrh	r1, [r1, #4]
    d4a0:	8081      	strh	r1, [r0, #4]
    d4a2:	4770      	bx	lr

0000d4a4 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    d4a4:	7802      	ldrb	r2, [r0, #0]
    d4a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d4aa:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    d4ae:	7002      	strb	r2, [r0, #0]
    d4b0:	4770      	bx	lr

0000d4b2 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    d4b2:	680a      	ldr	r2, [r1, #0]
    d4b4:	f840 2f03 	str.w	r2, [r0, #3]!
    d4b8:	8889      	ldrh	r1, [r1, #4]
    d4ba:	8081      	strh	r1, [r0, #4]
    d4bc:	4770      	bx	lr

0000d4be <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    d4be:	7802      	ldrb	r2, [r0, #0]
    d4c0:	2340      	movs	r3, #64	; 0x40
    d4c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    d4c6:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    d4ca:	430a      	orrs	r2, r1
    d4cc:	7002      	strb	r2, [r0, #0]
    d4ce:	4770      	bx	lr

0000d4d0 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    d4d0:	b570      	push	{r4, r5, r6, lr}
    d4d2:	4614      	mov	r4, r2
    d4d4:	4605      	mov	r5, r0
    d4d6:	2a1f      	cmp	r2, #31
    d4d8:	d903      	bls.n	d4e2 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    d4da:	21d4      	movs	r1, #212	; 0xd4
    d4dc:	202a      	movs	r0, #42	; 0x2a
    d4de:	f7f6 fbff 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4e2:	f105 0009 	add.w	r0, r5, #9
    d4e6:	f7fe fa49 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d4ea:	1da4      	adds	r4, r4, #6
    d4ec:	706c      	strb	r4, [r5, #1]
    d4ee:	bd70      	pop	{r4, r5, r6, pc}

0000d4f0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    d4f0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d4f4:	4604      	mov	r4, r0
    d4f6:	2000      	movs	r0, #0
    d4f8:	f7f6 fddc 	bl	40b4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d4fc:	2600      	movs	r6, #0
    d4fe:	4605      	mov	r5, r0
    d500:	4637      	mov	r7, r6
    d502:	e00e      	b.n	d522 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    d504:	8820      	ldrh	r0, [r4, #0]
    d506:	1c40      	adds	r0, r0, #1
    d508:	b280      	uxth	r0, r0
    d50a:	8020      	strh	r0, [r4, #0]
    d50c:	42a8      	cmp	r0, r5
    d50e:	d300      	bcc.n	d512 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    d510:	8027      	strh	r7, [r4, #0]
    d512:	8820      	ldrh	r0, [r4, #0]
    d514:	4669      	mov	r1, sp
    d516:	f7ff fc74 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d51a:	2800      	cmp	r0, #0
    d51c:	d007      	beq.n	d52e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    d51e:	1c76      	adds	r6, r6, #1
    d520:	b2f6      	uxtb	r6, r6
    d522:	42ae      	cmp	r6, r5
    d524:	d3ee      	bcc.n	d504 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    d526:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d52a:	8020      	strh	r0, [r4, #0]
    d52c:	2012      	movs	r0, #18
    d52e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000d532 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    d532:	6841      	ldr	r1, [r0, #4]
    d534:	2200      	movs	r2, #0
    d536:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
    d53a:	2b00      	cmp	r3, #0
    d53c:	d004      	beq.n	d548 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    d53e:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
    d542:	6840      	ldr	r0, [r0, #4]
    d544:	f000 bc64 	b.w	de10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    d548:	4770      	bx	lr

0000d54a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    d54a:	b510      	push	{r4, lr}
    d54c:	7901      	ldrb	r1, [r0, #4]
    d54e:	b119      	cbz	r1, d558 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    d550:	2901      	cmp	r1, #1
    d552:	d006      	beq.n	d562 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    d554:	2000      	movs	r0, #0
    d556:	bd10      	pop	{r4, pc}
    d558:	8842      	ldrh	r2, [r0, #2]
    d55a:	6883      	ldr	r3, [r0, #8]
    d55c:	8800      	ldrh	r0, [r0, #0]
    d55e:	2102      	movs	r1, #2
    d560:	e003      	b.n	d56a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    d562:	8842      	ldrh	r2, [r0, #2]
    d564:	6883      	ldr	r3, [r0, #8]
    d566:	8800      	ldrh	r0, [r0, #0]
    d568:	2101      	movs	r1, #1
    d56a:	f7f8 fc8b 	bl	5e84 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    d56e:	b908      	cbnz	r0, d574 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    d570:	f7f8 fcde 	bl	5f30 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    d574:	2001      	movs	r0, #1
    d576:	bd10      	pop	{r4, pc}
    d578:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d57c:	460e      	mov	r6, r1
    d57e:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    d582:	4617      	mov	r7, r2
    d584:	39ff      	subs	r1, #255	; 0xff
    d586:	d014      	beq.n	d5b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    d588:	8030      	strh	r0, [r6, #0]
    d58a:	2100      	movs	r1, #0
    d58c:	7171      	strb	r1, [r6, #5]
    d58e:	f7f6 ffc1 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    d592:	4604      	mov	r4, r0
    d594:	f7ff f81b 	bl	c5ce <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    d598:	0005      	movs	r5, r0
    d59a:	d00a      	beq.n	d5b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    d59c:	4620      	mov	r0, r4
    d59e:	4629      	mov	r1, r5
    d5a0:	aa01      	add	r2, sp, #4
    d5a2:	f7ff f837 	bl	c614 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    d5a6:	8070      	strh	r0, [r6, #2]
    d5a8:	b130      	cbz	r0, d5b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    d5aa:	28fb      	cmp	r0, #251	; 0xfb
    d5ac:	d906      	bls.n	d5bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    d5ae:	21ae      	movs	r1, #174	; 0xae
    d5b0:	e026      	b.n	d600 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    d5b2:	2000      	movs	r0, #0
    d5b4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d5b8:	21ad      	movs	r1, #173	; 0xad
    d5ba:	e021      	b.n	d600 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    d5bc:	9801      	ldr	r0, [sp, #4]
    d5be:	f7ff feb4 	bl	d32a <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    d5c2:	2801      	cmp	r0, #1
    d5c4:	d003      	beq.n	d5ce <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    d5c6:	2802      	cmp	r0, #2
    d5c8:	d001      	beq.n	d5ce <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    d5ca:	21bd      	movs	r1, #189	; 0xbd
    d5cc:	e018      	b.n	d600 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    d5ce:	7130      	strb	r0, [r6, #4]
    d5d0:	4629      	mov	r1, r5
    d5d2:	8873      	ldrh	r3, [r6, #2]
    d5d4:	2503      	movs	r5, #3
    d5d6:	4620      	mov	r0, r4
    d5d8:	463a      	mov	r2, r7
    d5da:	9500      	str	r5, [sp, #0]
    d5dc:	f7fe fee9 	bl	c3b2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    d5e0:	4620      	mov	r0, r4
    d5e2:	60b7      	str	r7, [r6, #8]
    d5e4:	f7fe ffa2 	bl	c52c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    d5e8:	b138      	cbz	r0, d5fa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    d5ea:	2100      	movs	r1, #0
    d5ec:	4620      	mov	r0, r4
    d5ee:	460a      	mov	r2, r1
    d5f0:	f7ff f8ee 	bl	c7d0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    d5f4:	b118      	cbz	r0, d5fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    d5f6:	2001      	movs	r0, #1
    d5f8:	e7dc      	b.n	d5b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    d5fa:	21cd      	movs	r1, #205	; 0xcd
    d5fc:	e000      	b.n	d600 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    d5fe:	21d2      	movs	r1, #210	; 0xd2
    d600:	202b      	movs	r0, #43	; 0x2b
    d602:	f7f6 fb6d 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d606 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    d606:	f7f8 be51 	b.w	62ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    d60a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d60e:	4604      	mov	r4, r0
    d610:	2000      	movs	r0, #0
    d612:	f7f6 fd4f 	bl	40b4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d616:	4605      	mov	r5, r0
    d618:	2001      	movs	r0, #1
    d61a:	f7f6 fd4b 	bl	40b4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d61e:	4428      	add	r0, r5
    d620:	2600      	movs	r6, #0
    d622:	b2c7      	uxtb	r7, r0
    d624:	46b0      	mov	r8, r6
    d626:	e017      	b.n	d658 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    d628:	8820      	ldrh	r0, [r4, #0]
    d62a:	1c40      	adds	r0, r0, #1
    d62c:	b280      	uxth	r0, r0
    d62e:	8020      	strh	r0, [r4, #0]
    d630:	42b8      	cmp	r0, r7
    d632:	d302      	bcc.n	d63a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    d634:	4640      	mov	r0, r8
    d636:	f8a4 8000 	strh.w	r8, [r4]
    d63a:	b280      	uxth	r0, r0
    d63c:	42a8      	cmp	r0, r5
    d63e:	d304      	bcc.n	d64a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    d640:	42b8      	cmp	r0, r7
    d642:	d202      	bcs.n	d64a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    d644:	2000      	movs	r0, #0
    d646:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d64a:	4669      	mov	r1, sp
    d64c:	f7ff fbd9 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d650:	2800      	cmp	r0, #0
    d652:	d0f8      	beq.n	d646 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    d654:	1c76      	adds	r6, r6, #1
    d656:	b2f6      	uxtb	r6, r6
    d658:	42be      	cmp	r6, r7
    d65a:	d3e5      	bcc.n	d628 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    d65c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d660:	8020      	strh	r0, [r4, #0]
    d662:	2012      	movs	r0, #18
    d664:	e7ef      	b.n	d646 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000d666 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    d666:	b570      	push	{r4, r5, r6, lr}
    d668:	8050      	strh	r0, [r2, #2]
    d66a:	890c      	ldrh	r4, [r1, #8]
    d66c:	8094      	strh	r4, [r2, #4]
    d66e:	898b      	ldrh	r3, [r1, #12]
    d670:	80d3      	strh	r3, [r2, #6]
    d672:	8948      	ldrh	r0, [r1, #10]
    d674:	8110      	strh	r0, [r2, #8]
    d676:	89cd      	ldrh	r5, [r1, #14]
    d678:	8155      	strh	r5, [r2, #10]
    d67a:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    d67c:	42ae      	cmp	r6, r5
    d67e:	d108      	bne.n	d692 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d680:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    d682:	4285      	cmp	r5, r0
    d684:	d105      	bne.n	d692 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d686:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    d688:	429d      	cmp	r5, r3
    d68a:	d102      	bne.n	d692 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d68c:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    d68e:	42a3      	cmp	r3, r4
    d690:	d001      	beq.n	d696 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    d692:	2301      	movs	r3, #1
    d694:	e000      	b.n	d698 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    d696:	2300      	movs	r3, #0
    d698:	7313      	strb	r3, [r2, #12]
    d69a:	8548      	strh	r0, [r1, #42]	; 0x2a
    d69c:	8950      	ldrh	r0, [r2, #10]
    d69e:	85c8      	strh	r0, [r1, #46]	; 0x2e
    d6a0:	8890      	ldrh	r0, [r2, #4]
    d6a2:	8588      	strh	r0, [r1, #44]	; 0x2c
    d6a4:	88d0      	ldrh	r0, [r2, #6]
    d6a6:	8608      	strh	r0, [r1, #48]	; 0x30
    d6a8:	2001      	movs	r0, #1
    d6aa:	7010      	strb	r0, [r2, #0]
    d6ac:	bd70      	pop	{r4, r5, r6, pc}

0000d6ae <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    d6ae:	b510      	push	{r4, lr}
    d6b0:	888c      	ldrh	r4, [r1, #4]
    d6b2:	890a      	ldrh	r2, [r1, #8]
    d6b4:	884b      	ldrh	r3, [r1, #2]
    d6b6:	88c9      	ldrh	r1, [r1, #6]
    d6b8:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    d6bc:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    d6c0:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    d6c4:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    d6c8:	bd10      	pop	{r4, pc}

0000d6ca <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    d6ca:	b570      	push	{r4, r5, r6, lr}
    d6cc:	4615      	mov	r5, r2
    d6ce:	460c      	mov	r4, r1
    d6d0:	f000 f8c7 	bl	d862 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    d6d4:	3096      	adds	r0, #150	; 0x96
    d6d6:	4428      	add	r0, r5
    d6d8:	42a0      	cmp	r0, r4
    d6da:	d801      	bhi.n	d6e0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    d6dc:	1a20      	subs	r0, r4, r0
    d6de:	bd70      	pop	{r4, r5, r6, pc}
    d6e0:	2000      	movs	r0, #0
    d6e2:	bd70      	pop	{r4, r5, r6, pc}

0000d6e4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    d6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d6e8:	4604      	mov	r4, r0
    d6ea:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    d6ec:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    d6ee:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    d6f2:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    d6f6:	4285      	cmp	r5, r0
    d6f8:	d300      	bcc.n	d6fc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    d6fa:	4605      	mov	r5, r0
    d6fc:	4620      	mov	r0, r4
    d6fe:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    d702:	f000 f89e 	bl	d842 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d706:	4601      	mov	r1, r0
    d708:	86e5      	strh	r5, [r4, #54]	; 0x36
    d70a:	8761      	strh	r1, [r4, #58]	; 0x3a
    d70c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    d70e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d712:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    d714:	4680      	mov	r8, r0
    d716:	42aa      	cmp	r2, r5
    d718:	d200      	bcs.n	d71c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    d71a:	462a      	mov	r2, r5
    d71c:	428b      	cmp	r3, r1
    d71e:	d200      	bcs.n	d722 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    d720:	460b      	mov	r3, r1
    d722:	8202      	strh	r2, [r0, #16]
    d724:	f8a8 3012 	strh.w	r3, [r8, #18]
    d728:	42bd      	cmp	r5, r7
    d72a:	d101      	bne.n	d730 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    d72c:	42b1      	cmp	r1, r6
    d72e:	d001      	beq.n	d734 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    d730:	2001      	movs	r0, #1
    d732:	e000      	b.n	d736 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    d734:	2000      	movs	r0, #0
    d736:	4681      	mov	r9, r0
    d738:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    d73c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    d740:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    d742:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    d744:	4285      	cmp	r5, r0
    d746:	d300      	bcc.n	d74a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    d748:	4605      	mov	r5, r0
    d74a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    d74e:	4620      	mov	r0, r4
    d750:	f000 f87f 	bl	d852 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    d754:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    d758:	2902      	cmp	r1, #2
    d75a:	d108      	bne.n	d76e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    d75c:	42af      	cmp	r7, r5
    d75e:	d200      	bcs.n	d762 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    d760:	463d      	mov	r5, r7
    d762:	4286      	cmp	r6, r0
    d764:	d200      	bcs.n	d768 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    d766:	4630      	mov	r0, r6
    d768:	2100      	movs	r1, #0
    d76a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    d76e:	f8a8 5008 	strh.w	r5, [r8, #8]
    d772:	f8a8 000c 	strh.w	r0, [r8, #12]
    d776:	42bd      	cmp	r5, r7
    d778:	d101      	bne.n	d77e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    d77a:	42b0      	cmp	r0, r6
    d77c:	d001      	beq.n	d782 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    d77e:	2001      	movs	r0, #1
    d780:	e000      	b.n	d784 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    d782:	2000      	movs	r0, #0
    d784:	ea40 0009 	orr.w	r0, r0, r9
    d788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d78c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    d78c:	6840      	ldr	r0, [r0, #4]
    d78e:	4770      	bx	lr

0000d790 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    d790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d794:	4616      	mov	r6, r2
    d796:	460f      	mov	r7, r1
    d798:	4604      	mov	r4, r0
    d79a:	f000 f862 	bl	d862 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    d79e:	4605      	mov	r5, r0
    d7a0:	463a      	mov	r2, r7
    d7a2:	68e1      	ldr	r1, [r4, #12]
    d7a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d7a6:	f000 f847 	bl	d838 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    d7aa:	19a9      	adds	r1, r5, r6
    d7ac:	4281      	cmp	r1, r0
    d7ae:	d300      	bcc.n	d7b2 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    d7b0:	4608      	mov	r0, r1
    d7b2:	6320      	str	r0, [r4, #48]	; 0x30
    d7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d7b8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    d7b8:	221b      	movs	r2, #27
    d7ba:	8402      	strh	r2, [r0, #32]
    d7bc:	8382      	strh	r2, [r0, #28]
    d7be:	82c2      	strh	r2, [r0, #22]
    d7c0:	8282      	strh	r2, [r0, #20]
    d7c2:	8142      	strh	r2, [r0, #10]
    d7c4:	8202      	strh	r2, [r0, #16]
    d7c6:	8102      	strh	r2, [r0, #8]
    d7c8:	8542      	strh	r2, [r0, #42]	; 0x2a
    d7ca:	8582      	strh	r2, [r0, #44]	; 0x2c
    d7cc:	8482      	strh	r2, [r0, #36]	; 0x24
    d7ce:	2900      	cmp	r1, #0
    d7d0:	d10a      	bne.n	d7e8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    d7d2:	f44f 71a4 	mov.w	r1, #328	; 0x148
    d7d6:	8441      	strh	r1, [r0, #34]	; 0x22
    d7d8:	83c1      	strh	r1, [r0, #30]
    d7da:	8341      	strh	r1, [r0, #26]
    d7dc:	8301      	strh	r1, [r0, #24]
    d7de:	81c1      	strh	r1, [r0, #14]
    d7e0:	8241      	strh	r1, [r0, #18]
    d7e2:	8181      	strh	r1, [r0, #12]
    d7e4:	85c1      	strh	r1, [r0, #46]	; 0x2e
    d7e6:	8601      	strh	r1, [r0, #48]	; 0x30
    d7e8:	4770      	bx	lr

0000d7ea <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    d7ea:	6800      	ldr	r0, [r0, #0]
    d7ec:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    d7f0:	4290      	cmp	r0, r2
    d7f2:	d903      	bls.n	d7fc <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    d7f4:	1a40      	subs	r0, r0, r1
    d7f6:	389c      	subs	r0, #156	; 0x9c
    d7f8:	0840      	lsrs	r0, r0, #1
    d7fa:	4770      	bx	lr
    d7fc:	2000      	movs	r0, #0
    d7fe:	4770      	bx	lr

0000d800 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    d800:	b510      	push	{r4, lr}
    d802:	9c02      	ldr	r4, [sp, #8]
    d804:	8281      	strh	r1, [r0, #20]
    d806:	82c2      	strh	r2, [r0, #22]
    d808:	8303      	strh	r3, [r0, #24]
    d80a:	8344      	strh	r4, [r0, #26]
    d80c:	bd10      	pop	{r4, pc}

0000d80e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    d80e:	8050      	strh	r0, [r2, #2]
    d810:	8a88      	ldrh	r0, [r1, #20]
    d812:	8090      	strh	r0, [r2, #4]
    d814:	8ac8      	ldrh	r0, [r1, #22]
    d816:	80d0      	strh	r0, [r2, #6]
    d818:	8b08      	ldrh	r0, [r1, #24]
    d81a:	8110      	strh	r0, [r2, #8]
    d81c:	8b48      	ldrh	r0, [r1, #26]
    d81e:	8150      	strh	r0, [r2, #10]
    d820:	2001      	movs	r0, #1
    d822:	7010      	strb	r0, [r2, #0]
    d824:	4770      	bx	lr
    d826:	2902      	cmp	r1, #2
    d828:	d003      	beq.n	d832 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    d82a:	00c0      	lsls	r0, r0, #3
    d82c:	3070      	adds	r0, #112	; 0x70
    d82e:	b280      	uxth	r0, r0
    d830:	4770      	bx	lr
    d832:	0080      	lsls	r0, r0, #2
    d834:	303c      	adds	r0, #60	; 0x3c
    d836:	e7fa      	b.n	d82e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    d838:	4288      	cmp	r0, r1
    d83a:	d300      	bcc.n	d83e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    d83c:	4608      	mov	r0, r1
    d83e:	1a80      	subs	r0, r0, r2
    d840:	4770      	bx	lr
    d842:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    d846:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    d84a:	4281      	cmp	r1, r0
    d84c:	d200      	bcs.n	d850 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    d84e:	4608      	mov	r0, r1
    d850:	4770      	bx	lr
    d852:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    d856:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    d85a:	4281      	cmp	r1, r0
    d85c:	d200      	bcs.n	d860 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    d85e:	4608      	mov	r0, r1
    d860:	4770      	bx	lr
    d862:	2196      	movs	r1, #150	; 0x96
    d864:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    d868:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    d86c:	f000 b800 	b.w	d870 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d874:	460d      	mov	r5, r1
    d876:	4606      	mov	r6, r0
    d878:	4698      	mov	r8, r3
    d87a:	4617      	mov	r7, r2
    d87c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    d87e:	4611      	mov	r1, r2
    d880:	f7ff ffd1 	bl	d826 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    d884:	4604      	mov	r4, r0
    d886:	4639      	mov	r1, r7
    d888:	4630      	mov	r0, r6
    d88a:	f7ff ffe2 	bl	d852 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    d88e:	42a0      	cmp	r0, r4
    d890:	d200      	bcs.n	d894 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    d892:	4604      	mov	r4, r0
    d894:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    d896:	4641      	mov	r1, r8
    d898:	f7ff ffc5 	bl	d826 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    d89c:	4607      	mov	r7, r0
    d89e:	4641      	mov	r1, r8
    d8a0:	4630      	mov	r0, r6
    d8a2:	f7ff ffce 	bl	d842 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d8a6:	42b8      	cmp	r0, r7
    d8a8:	d300      	bcc.n	d8ac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    d8aa:	4638      	mov	r0, r7
    d8ac:	4420      	add	r0, r4
    d8ae:	4428      	add	r0, r5
    d8b0:	1d80      	adds	r0, r0, #6
    d8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d8b6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    d8b6:	b510      	push	{r4, lr}
    d8b8:	4604      	mov	r4, r0
    d8ba:	2108      	movs	r1, #8
    d8bc:	4620      	mov	r0, r4
    d8be:	f7f6 faa9 	bl	3e14 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d8c2:	6820      	ldr	r0, [r4, #0]
    d8c4:	2800      	cmp	r0, #0
    d8c6:	d102      	bne.n	d8ce <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    d8c8:	6860      	ldr	r0, [r4, #4]
    d8ca:	2800      	cmp	r0, #0
    d8cc:	d0f5      	beq.n	d8ba <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    d8ce:	bd10      	pop	{r4, pc}
    d8d0:	2801      	cmp	r0, #1
    d8d2:	d102      	bne.n	d8da <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    d8d4:	7948      	ldrb	r0, [r1, #5]
    d8d6:	0980      	lsrs	r0, r0, #6
    d8d8:	d001      	beq.n	d8de <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    d8da:	2000      	movs	r0, #0
    d8dc:	4770      	bx	lr
    d8de:	2001      	movs	r0, #1
    d8e0:	4770      	bx	lr
    d8e2:	2801      	cmp	r0, #1
    d8e4:	d106      	bne.n	d8f4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    d8e6:	7948      	ldrb	r0, [r1, #5]
    d8e8:	2101      	movs	r1, #1
    d8ea:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    d8ee:	d101      	bne.n	d8f4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    d8f0:	2001      	movs	r0, #1
    d8f2:	4770      	bx	lr
    d8f4:	2000      	movs	r0, #0
    d8f6:	4770      	bx	lr
    d8f8:	2802      	cmp	r0, #2
    d8fa:	d003      	beq.n	d904 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    d8fc:	2803      	cmp	r0, #3
    d8fe:	d001      	beq.n	d904 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    d900:	2000      	movs	r0, #0
    d902:	4770      	bx	lr
    d904:	2001      	movs	r0, #1
    d906:	4770      	bx	lr

0000d908 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    d908:	b510      	push	{r4, lr}
    d90a:	4604      	mov	r4, r0
    d90c:	7c00      	ldrb	r0, [r0, #16]
    d90e:	f7ff fff3 	bl	d8f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    d912:	b148      	cbz	r0, d928 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    d914:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    d918:	f104 0150 	add.w	r1, r4, #80	; 0x50
    d91c:	f7ff fa2e 	bl	cd7c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    d920:	2808      	cmp	r0, #8
    d922:	d001      	beq.n	d928 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    d924:	2001      	movs	r0, #1
    d926:	bd10      	pop	{r4, pc}
    d928:	7c20      	ldrb	r0, [r4, #16]
    d92a:	b118      	cbz	r0, d934 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    d92c:	2802      	cmp	r0, #2
    d92e:	d001      	beq.n	d934 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    d930:	7de0      	ldrb	r0, [r4, #23]
    d932:	bd10      	pop	{r4, pc}
    d934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d938:	2000      	movs	r0, #0
    d93a:	f7f7 b8fb 	b.w	4b34 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000d93e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    d93e:	b508      	push	{r3, lr}
    d940:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    d944:	f88d 1000 	strb.w	r1, [sp]
    d948:	9900      	ldr	r1, [sp, #0]
    d94a:	9100      	str	r1, [sp, #0]
    d94c:	f89d 1000 	ldrb.w	r1, [sp]
    d950:	b109      	cbz	r1, d956 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    d952:	2001      	movs	r0, #1
    d954:	bd08      	pop	{r3, pc}
    d956:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    d95a:	f88d 0000 	strb.w	r0, [sp]
    d95e:	9800      	ldr	r0, [sp, #0]
    d960:	9000      	str	r0, [sp, #0]
    d962:	f89d 0000 	ldrb.w	r0, [sp]
    d966:	2000      	movs	r0, #0
    d968:	bd08      	pop	{r3, pc}

0000d96a <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    d96a:	20ff      	movs	r0, #255	; 0xff
    d96c:	7008      	strb	r0, [r1, #0]
    d96e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    d970:	f7ff b955 	b.w	cc1e <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000d974 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    d974:	b51c      	push	{r2, r3, r4, lr}
    d976:	4604      	mov	r4, r0
    d978:	22d4      	movs	r2, #212	; 0xd4
    d97a:	2100      	movs	r1, #0
    d97c:	f7fe f878 	bl	ba70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d980:	20ff      	movs	r0, #255	; 0xff
    d982:	7020      	strb	r0, [r4, #0]
    d984:	207f      	movs	r0, #127	; 0x7f
    d986:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d98a:	2013      	movs	r0, #19
    d98c:	8060      	strh	r0, [r4, #2]
    d98e:	f7f6 fe81 	bl	4694 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    d992:	4601      	mov	r1, r0
    d994:	62e0      	str	r0, [r4, #44]	; 0x2c
    d996:	2200      	movs	r2, #0
    d998:	4668      	mov	r0, sp
    d99a:	f7ff f8ab 	bl	caf4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    d99e:	2200      	movs	r2, #0
    d9a0:	2101      	movs	r1, #1
    d9a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d9a4:	f7ff f91b 	bl	cbde <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    d9a8:	2204      	movs	r2, #4
    d9aa:	4668      	mov	r0, sp
    d9ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    d9ae:	f7ff f8a1 	bl	caf4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    d9b2:	2200      	movs	r2, #0
    d9b4:	4611      	mov	r1, r2
    d9b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d9b8:	f7ff f911 	bl	cbde <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    d9bc:	2000      	movs	r0, #0
    d9be:	73a0      	strb	r0, [r4, #14]
    d9c0:	f104 0020 	add.w	r0, r4, #32
    d9c4:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    d9c8:	f000 b962 	b.w	dc90 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000d9cc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    d9cc:	7880      	ldrb	r0, [r0, #2]
    d9ce:	f3c0 0080 	ubfx	r0, r0, #2, #1
    d9d2:	b108      	cbz	r0, d9d8 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    d9d4:	2000      	movs	r0, #0
    d9d6:	4770      	bx	lr
    d9d8:	201f      	movs	r0, #31
    d9da:	4770      	bx	lr

0000d9dc <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    d9dc:	f7f9 b9e0 	b.w	6da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>

0000d9e0 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    d9e0:	6880      	ldr	r0, [r0, #8]
    d9e2:	4770      	bx	lr

0000d9e4 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    d9e4:	2001      	movs	r0, #1
    d9e6:	4770      	bx	lr

0000d9e8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    d9e8:	b510      	push	{r4, lr}
    d9ea:	4604      	mov	r4, r0
    d9ec:	3020      	adds	r0, #32
    d9ee:	f000 f90f 	bl	dc10 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    d9f2:	8861      	ldrh	r1, [r4, #2]
    d9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9f8:	2228      	movs	r2, #40	; 0x28
    d9fa:	f7f9 bbb1 	b.w	7160 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000d9fe <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    d9fe:	2200      	movs	r2, #0
    da00:	6282      	str	r2, [r0, #40]	; 0x28
    da02:	8843      	ldrh	r3, [r0, #2]
    da04:	2b1d      	cmp	r3, #29
    da06:	d001      	beq.n	da0c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    da08:	7341      	strb	r1, [r0, #13]
    da0a:	4770      	bx	lr
    da0c:	7342      	strb	r2, [r0, #13]
    da0e:	4770      	bx	lr

0000da10 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    da10:	b510      	push	{r4, lr}
    da12:	2400      	movs	r4, #0
    da14:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    da16:	f7ff f8d0 	bl	cbba <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    da1a:	b100      	cbz	r0, da1e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    da1c:	2001      	movs	r0, #1
    da1e:	4384      	bics	r4, r0
    da20:	f084 0001 	eor.w	r0, r4, #1
    da24:	bd10      	pop	{r4, pc}

0000da26 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    da26:	2000      	movs	r0, #0
    da28:	4770      	bx	lr

0000da2a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    da2a:	7880      	ldrb	r0, [r0, #2]
    da2c:	f000 0001 	and.w	r0, r0, #1
    da30:	4770      	bx	lr

0000da32 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    da32:	7880      	ldrb	r0, [r0, #2]
    da34:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    da38:	4770      	bx	lr

0000da3a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    da3a:	2001      	movs	r0, #1
    da3c:	4770      	bx	lr

0000da3e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    da3e:	7880      	ldrb	r0, [r0, #2]
    da40:	f3c0 0040 	ubfx	r0, r0, #1, #1
    da44:	4770      	bx	lr

0000da46 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    da46:	f990 000e 	ldrsb.w	r0, [r0, #14]
    da4a:	4770      	bx	lr

0000da4c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    da4c:	7800      	ldrb	r0, [r0, #0]
    da4e:	28ff      	cmp	r0, #255	; 0xff
    da50:	d001      	beq.n	da56 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    da52:	2001      	movs	r0, #1
    da54:	4770      	bx	lr
    da56:	2000      	movs	r0, #0
    da58:	4770      	bx	lr

0000da5a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    da5a:	680a      	ldr	r2, [r1, #0]
    da5c:	f840 2f11 	str.w	r2, [r0, #17]!
    da60:	8889      	ldrh	r1, [r1, #4]
    da62:	8081      	strh	r1, [r0, #4]
    da64:	2101      	movs	r1, #1
    da66:	7181      	strb	r1, [r0, #6]
    da68:	4770      	bx	lr

0000da6a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    da6a:	7b00      	ldrb	r0, [r0, #12]
    da6c:	4770      	bx	lr

0000da6e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    da6e:	2001      	movs	r0, #1
    da70:	4770      	bx	lr

0000da72 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    da72:	61c1      	str	r1, [r0, #28]
    da74:	4770      	bx	lr

0000da76 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    da76:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    da7a:	4770      	bx	lr

0000da7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    da7c:	b570      	push	{r4, r5, r6, lr}
    da7e:	4604      	mov	r4, r0
    da80:	7880      	ldrb	r0, [r0, #2]
    da82:	2501      	movs	r5, #1
    da84:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    da88:	b138      	cbz	r0, da9a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    da8a:	233c      	movs	r3, #60	; 0x3c
    da8c:	22ff      	movs	r2, #255	; 0xff
    da8e:	4620      	mov	r0, r4
    da90:	69e1      	ldr	r1, [r4, #28]
    da92:	f7f9 f9b1 	bl	6df8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    da96:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    da9a:	78a0      	ldrb	r0, [r4, #2]
    da9c:	07c0      	lsls	r0, r0, #31
    da9e:	f7f8 faab 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    daa2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    daa6:	bd70      	pop	{r4, r5, r6, pc}

0000daa8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    daa8:	7bc0      	ldrb	r0, [r0, #15]
    daaa:	2800      	cmp	r0, #0
    daac:	d000      	beq.n	dab0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    daae:	2001      	movs	r0, #1
    dab0:	4770      	bx	lr
    dab2:	b510      	push	{r4, lr}
    dab4:	f7ff f962 	bl	cd7c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    dab8:	4604      	mov	r4, r0
    daba:	f7f7 fedd 	bl	5878 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    dabe:	b138      	cbz	r0, dad0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    dac0:	4620      	mov	r0, r4
    dac2:	f7f7 fe11 	bl	56e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    dac6:	b118      	cbz	r0, dad0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    dac8:	2110      	movs	r1, #16
    daca:	f7ff fb37 	bl	d13c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    dace:	b108      	cbz	r0, dad4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    dad0:	2000      	movs	r0, #0
    dad2:	bd10      	pop	{r4, pc}
    dad4:	2001      	movs	r0, #1
    dad6:	bd10      	pop	{r4, pc}
    dad8:	2101      	movs	r1, #1
    dada:	f7f8 bded 	b.w	66b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    dade:	2101      	movs	r1, #1
    dae0:	f7f8 bdea 	b.w	66b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    dae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dae8:	4604      	mov	r4, r0
    daea:	2700      	movs	r7, #0
    daec:	704f      	strb	r7, [r1, #1]
    daee:	2011      	movs	r0, #17
    daf0:	460d      	mov	r5, r1
    daf2:	7008      	strb	r0, [r1, #0]
    daf4:	2220      	movs	r2, #32
    daf6:	f104 0166 	add.w	r1, r4, #102	; 0x66
    dafa:	1d28      	adds	r0, r5, #4
    dafc:	f7fd ff3e 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db00:	2601      	movs	r6, #1
    db02:	722e      	strb	r6, [r5, #8]
    db04:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    db08:	7928      	ldrb	r0, [r5, #4]
    db0a:	2800      	cmp	r0, #0
    db0c:	d111      	bne.n	db32 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    db0e:	88e8      	ldrh	r0, [r5, #6]
    db10:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    db14:	69e0      	ldr	r0, [r4, #28]
    db16:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    db1a:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    db1e:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    db22:	8800      	ldrh	r0, [r0, #0]
    db24:	f7f6 fcf6 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    db28:	f7fe fe04 	bl	c734 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    db2c:	69e0      	ldr	r0, [r4, #28]
    db2e:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    db32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db3a:	4604      	mov	r4, r0
    db3c:	460f      	mov	r7, r1
    db3e:	7e40      	ldrb	r0, [r0, #25]
    db40:	f7f7 fd92 	bl	5668 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    db44:	4606      	mov	r6, r0
    db46:	7e20      	ldrb	r0, [r4, #24]
    db48:	f104 0549 	add.w	r5, r4, #73	; 0x49
    db4c:	b120      	cbz	r0, db58 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    db4e:	b11e      	cbz	r6, db58 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    db50:	7e60      	ldrb	r0, [r4, #25]
    db52:	f7f7 fd7d 	bl	5650 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    db56:	b1a0      	cbz	r0, db82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    db58:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    db5c:	2800      	cmp	r0, #0
    db5e:	d024      	beq.n	dbaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    db60:	7ea0      	ldrb	r0, [r4, #26]
    db62:	2800      	cmp	r0, #0
    db64:	d021      	beq.n	dbaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    db66:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    db6a:	4629      	mov	r1, r5
    db6c:	f7ff feb9 	bl	d8e2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    db70:	b1a8      	cbz	r0, db9e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    db72:	f7f7 fd69 	bl	5648 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    db76:	463a      	mov	r2, r7
    db78:	4629      	mov	r1, r5
    db7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db7e:	f7ff b895 	b.w	ccac <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    db82:	2001      	movs	r0, #1
    db84:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    db88:	463a      	mov	r2, r7
    db8a:	4629      	mov	r1, r5
    db8c:	4630      	mov	r0, r6
    db8e:	f7ff f88d 	bl	ccac <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    db92:	7e61      	ldrb	r1, [r4, #25]
    db94:	4628      	mov	r0, r5
    db96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db9a:	f7f7 bd71 	b.w	5680 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    db9e:	4639      	mov	r1, r7
    dba0:	4628      	mov	r0, r5
    dba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dba6:	f7ff b870 	b.w	cc8a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    dbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbae:	b510      	push	{r4, lr}
    dbb0:	4604      	mov	r4, r0
    dbb2:	4608      	mov	r0, r1
    dbb4:	f7fd f9ee 	bl	af94 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    dbb8:	7921      	ldrb	r1, [r4, #4]
    dbba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbbe:	2025      	movs	r0, #37	; 0x25
    dbc0:	f001 bdad 	b.w	f71e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    dbc4:	b510      	push	{r4, lr}
    dbc6:	4604      	mov	r4, r0
    dbc8:	3026      	adds	r0, #38	; 0x26
    dbca:	f7fd f99f 	bl	af0c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    dbce:	2800      	cmp	r0, #0
    dbd0:	d102      	bne.n	dbd8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    dbd2:	207f      	movs	r0, #127	; 0x7f
    dbd4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    dbd8:	bd10      	pop	{r4, pc}
    dbda:	7802      	ldrb	r2, [r0, #0]
    dbdc:	2320      	movs	r3, #32
    dbde:	f022 0220 	bic.w	r2, r2, #32
    dbe2:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    dbe6:	430a      	orrs	r2, r1
    dbe8:	7002      	strb	r2, [r0, #0]
    dbea:	4770      	bx	lr

0000dbec <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    dbec:	b570      	push	{r4, r5, r6, lr}
    dbee:	7001      	strb	r1, [r0, #0]
    dbf0:	7042      	strb	r2, [r0, #1]
    dbf2:	4614      	mov	r4, r2
    dbf4:	460d      	mov	r5, r1
    dbf6:	7880      	ldrb	r0, [r0, #2]
    dbf8:	f000 f87f 	bl	dcfa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dbfc:	fb10 f005 	smulbb	r0, r0, r5
    dc00:	4360      	muls	r0, r4
    dc02:	28ff      	cmp	r0, #255	; 0xff
    dc04:	d303      	bcc.n	dc0e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    dc06:	215c      	movs	r1, #92	; 0x5c
    dc08:	202e      	movs	r0, #46	; 0x2e
    dc0a:	f7f6 f869 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc0e:	bd70      	pop	{r4, r5, r6, pc}

0000dc10 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    dc10:	b510      	push	{r4, lr}
    dc12:	4604      	mov	r4, r0
    dc14:	7880      	ldrb	r0, [r0, #2]
    dc16:	f000 f870 	bl	dcfa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dc1a:	7861      	ldrb	r1, [r4, #1]
    dc1c:	7822      	ldrb	r2, [r4, #0]
    dc1e:	fb11 f102 	smulbb	r1, r1, r2
    dc22:	4348      	muls	r0, r1
    dc24:	b2c0      	uxtb	r0, r0
    dc26:	bd10      	pop	{r4, pc}

0000dc28 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    dc28:	b510      	push	{r4, lr}
    dc2a:	4604      	mov	r4, r0
    dc2c:	f000 f84d 	bl	dcca <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    dc30:	7961      	ldrb	r1, [r4, #5]
    dc32:	1c49      	adds	r1, r1, #1
    dc34:	b2c9      	uxtb	r1, r1
    dc36:	7161      	strb	r1, [r4, #5]
    dc38:	7862      	ldrb	r2, [r4, #1]
    dc3a:	4291      	cmp	r1, r2
    dc3c:	d10b      	bne.n	dc56 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    dc3e:	2200      	movs	r2, #0
    dc40:	7162      	strb	r2, [r4, #5]
    dc42:	78e1      	ldrb	r1, [r4, #3]
    dc44:	4301      	orrs	r1, r0
    dc46:	70e1      	strb	r1, [r4, #3]
    dc48:	78a3      	ldrb	r3, [r4, #2]
    dc4a:	4299      	cmp	r1, r3
    dc4c:	d103      	bne.n	dc56 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    dc4e:	70e2      	strb	r2, [r4, #3]
    dc50:	7921      	ldrb	r1, [r4, #4]
    dc52:	1c49      	adds	r1, r1, #1
    dc54:	7121      	strb	r1, [r4, #4]
    dc56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc5a:	f000 b825 	b.w	dca8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000dc5e <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    dc5e:	7081      	strb	r1, [r0, #2]
    dc60:	4770      	bx	lr

0000dc62 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    dc62:	b570      	push	{r4, r5, r6, lr}
    dc64:	4604      	mov	r4, r0
    dc66:	7880      	ldrb	r0, [r0, #2]
    dc68:	f000 f847 	bl	dcfa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dc6c:	7861      	ldrb	r1, [r4, #1]
    dc6e:	fb11 f500 	smulbb	r5, r1, r0
    dc72:	78e0      	ldrb	r0, [r4, #3]
    dc74:	f000 f841 	bl	dcfa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dc78:	7861      	ldrb	r1, [r4, #1]
    dc7a:	7962      	ldrb	r2, [r4, #5]
    dc7c:	fb10 2001 	smlabb	r0, r0, r1, r2
    dc80:	7821      	ldrb	r1, [r4, #0]
    dc82:	7922      	ldrb	r2, [r4, #4]
    dc84:	1a89      	subs	r1, r1, r2
    dc86:	fb11 f105 	smulbb	r1, r1, r5
    dc8a:	1a08      	subs	r0, r1, r0
    dc8c:	b2c0      	uxtb	r0, r0
    dc8e:	bd70      	pop	{r4, r5, r6, pc}

0000dc90 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    dc90:	2100      	movs	r1, #0
    dc92:	6001      	str	r1, [r0, #0]
    dc94:	8081      	strh	r1, [r0, #4]
    dc96:	2101      	movs	r1, #1
    dc98:	7041      	strb	r1, [r0, #1]
    dc9a:	7001      	strb	r1, [r0, #0]
    dc9c:	4770      	bx	lr

0000dc9e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    dc9e:	2100      	movs	r1, #0
    dca0:	70c1      	strb	r1, [r0, #3]
    dca2:	7141      	strb	r1, [r0, #5]
    dca4:	7101      	strb	r1, [r0, #4]
    dca6:	4770      	bx	lr
    dca8:	b510      	push	{r4, lr}
    dcaa:	2801      	cmp	r0, #1
    dcac:	d007      	beq.n	dcbe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    dcae:	2802      	cmp	r0, #2
    dcb0:	d007      	beq.n	dcc2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    dcb2:	2804      	cmp	r0, #4
    dcb4:	d007      	beq.n	dcc6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    dcb6:	2139      	movs	r1, #57	; 0x39
    dcb8:	202e      	movs	r0, #46	; 0x2e
    dcba:	f7f6 f811 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcbe:	2025      	movs	r0, #37	; 0x25
    dcc0:	bd10      	pop	{r4, pc}
    dcc2:	2026      	movs	r0, #38	; 0x26
    dcc4:	bd10      	pop	{r4, pc}
    dcc6:	2027      	movs	r0, #39	; 0x27
    dcc8:	bd10      	pop	{r4, pc}
    dcca:	4601      	mov	r1, r0
    dccc:	2000      	movs	r0, #0
    dcce:	788a      	ldrb	r2, [r1, #2]
    dcd0:	07d3      	lsls	r3, r2, #31
    dcd2:	d002      	beq.n	dcda <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    dcd4:	78cb      	ldrb	r3, [r1, #3]
    dcd6:	07db      	lsls	r3, r3, #31
    dcd8:	d006      	beq.n	dce8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    dcda:	0793      	lsls	r3, r2, #30
    dcdc:	d506      	bpl.n	dcec <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    dcde:	78cb      	ldrb	r3, [r1, #3]
    dce0:	079b      	lsls	r3, r3, #30
    dce2:	d403      	bmi.n	dcec <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    dce4:	2002      	movs	r0, #2
    dce6:	4770      	bx	lr
    dce8:	2001      	movs	r0, #1
    dcea:	4770      	bx	lr
    dcec:	0752      	lsls	r2, r2, #29
    dcee:	d5fc      	bpl.n	dcea <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    dcf0:	78c9      	ldrb	r1, [r1, #3]
    dcf2:	0749      	lsls	r1, r1, #29
    dcf4:	d4f9      	bmi.n	dcea <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    dcf6:	2004      	movs	r0, #4
    dcf8:	4770      	bx	lr
    dcfa:	f3c0 0180 	ubfx	r1, r0, #2, #1
    dcfe:	f3c0 0240 	ubfx	r2, r0, #1, #1
    dd02:	4411      	add	r1, r2
    dd04:	f000 0001 	and.w	r0, r0, #1
    dd08:	4408      	add	r0, r1
    dd0a:	4770      	bx	lr

0000dd0c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    dd0c:	f240 315a 	movw	r1, #858	; 0x35a
    dd10:	4348      	muls	r0, r1
    dd12:	4770      	bx	lr

0000dd14 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    dd14:	f240 20ef 	movw	r0, #751	; 0x2ef
    dd18:	4770      	bx	lr
    dd1a:	020e      	.short	0x020e
    dd1c:	0630041c 	.word	0x0630041c
    dd20:	035a0c60 	.word	0x035a0c60
    dd24:	05c506b4 	.word	0x05c506b4
    dd28:	12250bf5 	.word	0x12250bf5
    dd2c:	03b101a3 	.word	0x03b101a3
    dd30:	02ef05bf 	.word	0x02ef05bf
    dd34:	09a30649 	.word	0x09a30649

0000dd38 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    dd38:	b510      	push	{r4, lr}
    dd3a:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    dd3e:	b109      	cbz	r1, dd44 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    dd40:	2000      	movs	r0, #0
    dd42:	bd10      	pop	{r4, pc}
    dd44:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    dd48:	b949      	cbnz	r1, dd5e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dd4a:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    dd4e:	b131      	cbz	r1, dd5e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dd50:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    dd54:	428a      	cmp	r2, r1
    dd56:	d902      	bls.n	dd5e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dd58:	f7ff fe90 	bl	da7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    dd5c:	e7f0      	b.n	dd40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    dd5e:	2001      	movs	r0, #1
    dd60:	bd10      	pop	{r4, pc}

0000dd62 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    dd62:	b510      	push	{r4, lr}
    dd64:	b131      	cbz	r1, dd74 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    dd66:	2901      	cmp	r1, #1
    dd68:	d008      	beq.n	dd7c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    dd6a:	f240 718b 	movw	r1, #1931	; 0x78b
    dd6e:	2030      	movs	r0, #48	; 0x30
    dd70:	f7f5 ffb6 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd78:	f000 b9d4 	b.w	e124 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x314>
    dd7c:	2100      	movs	r1, #0
    dd7e:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    dd82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd86:	f000 b93b 	b.w	e000 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>

0000dd8a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    dd8a:	b510      	push	{r4, lr}
    dd8c:	4604      	mov	r4, r0
    dd8e:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    dd92:	2800      	cmp	r0, #0
    dd94:	d019      	beq.n	ddca <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    dd96:	2001      	movs	r0, #1
    dd98:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    dd9c:	4601      	mov	r1, r0
    dd9e:	4620      	mov	r0, r4
    dda0:	f7ff fe69 	bl	da76 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    dda4:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    dda8:	b170      	cbz	r0, ddc8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ddaa:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    ddae:	f7f4 f82b 	bl	1e08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ddb2:	7820      	ldrb	r0, [r4, #0]
    ddb4:	f7f4 f976 	bl	20a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ddb8:	f814 09a0 	ldrb.w	r0, [r4], #-160
    ddbc:	f7f4 f950 	bl	2060 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ddc0:	b120      	cbz	r0, ddcc <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ddc2:	2000      	movs	r0, #0
    ddc4:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    ddc8:	2000      	movs	r0, #0
    ddca:	bd10      	pop	{r4, pc}
    ddcc:	f240 2103 	movw	r1, #515	; 0x203
    ddd0:	2030      	movs	r0, #48	; 0x30
    ddd2:	f7f5 ff85 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ddd6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    ddd6:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    ddda:	4770      	bx	lr

0000dddc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    dddc:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    dde0:	4770      	bx	lr

0000dde2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    dde2:	b50e      	push	{r1, r2, r3, lr}
    dde4:	4669      	mov	r1, sp
    dde6:	2001      	movs	r0, #1
    dde8:	f7fe fdcd 	bl	c986 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ddec:	b138      	cbz	r0, ddfe <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    ddee:	f44f 71a1 	mov.w	r1, #322	; 0x142
    ddf2:	2030      	movs	r0, #48	; 0x30
    ddf4:	f7f5 ff74 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddf8:	9802      	ldr	r0, [sp, #8]
    ddfa:	f7ff ffc6 	bl	dd8a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    ddfe:	4668      	mov	r0, sp
    de00:	f7f6 f9a6 	bl	4150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    de04:	2800      	cmp	r0, #0
    de06:	d0f7      	beq.n	ddf8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    de08:	f7f9 fb34 	bl	7474 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    de0c:	2000      	movs	r0, #0
    de0e:	bd0e      	pop	{r1, r2, r3, pc}

0000de10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    de10:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    de12:	4604      	mov	r4, r0
    de14:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    de18:	2800      	cmp	r0, #0
    de1a:	d153      	bne.n	dec4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    de1c:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    de20:	2803      	cmp	r0, #3
    de22:	d14f      	bne.n	dec4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    de24:	f7fd fc35 	bl	b692 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    de28:	4601      	mov	r1, r0
    de2a:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    de2e:	f7f3 fb87 	bl	1540 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    de32:	2800      	cmp	r0, #0
    de34:	dd46      	ble.n	dec4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    de36:	68e1      	ldr	r1, [r4, #12]
    de38:	b111      	cbz	r1, de40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    de3a:	fbb0 f0f1 	udiv	r0, r0, r1
    de3e:	e000      	b.n	de42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    de40:	2000      	movs	r0, #0
    de42:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    de46:	1c40      	adds	r0, r0, #1
    de48:	4408      	add	r0, r1
    de4a:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    de4e:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    de52:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    de56:	1a08      	subs	r0, r1, r0
    de58:	b200      	sxth	r0, r0
    de5a:	2800      	cmp	r0, #0
    de5c:	dd32      	ble.n	dec4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    de5e:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    de62:	f7f3 ffd1 	bl	1e08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    de66:	2800      	cmp	r0, #0
    de68:	d02c      	beq.n	dec4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    de6a:	2001      	movs	r0, #1
    de6c:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
    de70:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    de74:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    de78:	ae01      	add	r6, sp, #4
    de7a:	1a40      	subs	r0, r0, r1
    de7c:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    de80:	1e40      	subs	r0, r0, #1
    de82:	4408      	add	r0, r1
    de84:	b285      	uxth	r5, r0
    de86:	e017      	b.n	deb8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    de88:	9600      	str	r6, [sp, #0]
    de8a:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
    de8e:	2300      	movs	r3, #0
    de90:	2201      	movs	r2, #1
    de92:	4620      	mov	r0, r4
    de94:	f7f9 fbbe 	bl	7614 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    de98:	2800      	cmp	r0, #0
    de9a:	d013      	beq.n	dec4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    de9c:	2801      	cmp	r0, #1
    de9e:	d004      	beq.n	deaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    dea0:	f240 6101 	movw	r1, #1537	; 0x601
    dea4:	2030      	movs	r0, #48	; 0x30
    dea6:	f7f5 ff1b 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    deaa:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    deae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    deb2:	4408      	add	r0, r1
    deb4:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    deb8:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    debc:	1a28      	subs	r0, r5, r0
    debe:	b200      	sxth	r0, r0
    dec0:	2800      	cmp	r0, #0
    dec2:	dae1      	bge.n	de88 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    dec4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    dec6:	2000      	movs	r0, #0
    dec8:	4770      	bx	lr
    deca:	b570      	push	{r4, r5, r6, lr}
    decc:	4604      	mov	r4, r0
    dece:	2601      	movs	r6, #1
    ded0:	f000 f90c 	bl	e0ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    ded4:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    ded8:	2000      	movs	r0, #0
    deda:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    dede:	2001      	movs	r0, #1
    dee0:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    dee4:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    dee8:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    deec:	b160      	cbz	r0, df08 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xf8>
    deee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    def2:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    def6:	f7f3 faf1 	bl	14dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    defa:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    defe:	2100      	movs	r1, #0
    df00:	4628      	mov	r0, r5
    df02:	f7ff f861 	bl	cfc8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    df06:	e00f      	b.n	df28 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x118>
    df08:	4620      	mov	r0, r4
    df0a:	f7ff fd69 	bl	d9e0 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    df0e:	4606      	mov	r6, r0
    df10:	4631      	mov	r1, r6
    df12:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    df16:	f7f3 fae1 	bl	14dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    df1a:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    df1e:	4631      	mov	r1, r6
    df20:	4628      	mov	r0, r5
    df22:	f7ff f851 	bl	cfc8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    df26:	1c46      	adds	r6, r0, #1
    df28:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    df2c:	1c41      	adds	r1, r0, #1
    df2e:	290a      	cmp	r1, #10
    df30:	d202      	bcs.n	df38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x128>
    df32:	4430      	add	r0, r6
    df34:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    df38:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    df3c:	b130      	cbz	r0, df4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    df3e:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    df42:	1c40      	adds	r0, r0, #1
    df44:	280a      	cmp	r0, #10
    df46:	d301      	bcc.n	df4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    df48:	2002      	movs	r0, #2
    df4a:	e000      	b.n	df4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13e>
    df4c:	2003      	movs	r0, #3
    df4e:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    df52:	2100      	movs	r1, #0
    df54:	4620      	mov	r0, r4
    df56:	f000 f822 	bl	df9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    df5a:	b120      	cbz	r0, df66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    df5c:	4620      	mov	r0, r4
    df5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    df62:	f000 b80d 	b.w	df80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    df66:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    df6a:	4629      	mov	r1, r5
    df6c:	f000 f8bc 	bl	e0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    df70:	2800      	cmp	r0, #0
    df72:	d104      	bne.n	df7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
    df74:	f240 61a2 	movw	r1, #1698	; 0x6a2
    df78:	2030      	movs	r0, #48	; 0x30
    df7a:	f7f5 feb1 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df7e:	bd70      	pop	{r4, r5, r6, pc}
    df80:	b510      	push	{r4, lr}
    df82:	4604      	mov	r4, r0
    df84:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    df88:	f7f4 f86a 	bl	2060 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    df8c:	2000      	movs	r0, #0
    df8e:	7520      	strb	r0, [r4, #20]
    df90:	bd10      	pop	{r4, pc}
    df92:	b510      	push	{r4, lr}
    df94:	f7ff fd28 	bl	d9e8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    df98:	f200 1009 	addw	r0, r0, #265	; 0x109
    df9c:	bd10      	pop	{r4, pc}
    df9e:	b570      	push	{r4, r5, r6, lr}
    dfa0:	4604      	mov	r4, r0
    dfa2:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    dfa6:	460d      	mov	r5, r1
    dfa8:	b108      	cbz	r0, dfae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19e>
    dfaa:	2001      	movs	r0, #1
    dfac:	bd70      	pop	{r4, r5, r6, pc}
    dfae:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    dfb2:	b1a8      	cbz	r0, dfe0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    dfb4:	4620      	mov	r0, r4
    dfb6:	f7ff fd13 	bl	d9e0 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    dfba:	4405      	add	r5, r0
    dfbc:	4620      	mov	r0, r4
    dfbe:	f7ff ffe8 	bl	df92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    dfc2:	1941      	adds	r1, r0, r5
    dfc4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    dfc8:	4288      	cmp	r0, r1
    dfca:	d206      	bcs.n	dfda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ca>
    dfcc:	2001      	movs	r0, #1
    dfce:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    dfd2:	4620      	mov	r0, r4
    dfd4:	f7ff fd52 	bl	da7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    dfd8:	e7e7      	b.n	dfaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19a>
    dfda:	1b40      	subs	r0, r0, r5
    dfdc:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    dfe0:	2000      	movs	r0, #0
    dfe2:	bd70      	pop	{r4, r5, r6, pc}
    dfe4:	b510      	push	{r4, lr}
    dfe6:	4604      	mov	r4, r0
    dfe8:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    dfec:	f000 f9e8 	bl	e3c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    dff0:	4602      	mov	r2, r0
    dff2:	4620      	mov	r0, r4
    dff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dff8:	f240 111b 	movw	r1, #283	; 0x11b
    dffc:	f7ff bbc8 	b.w	d790 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e000:	b510      	push	{r4, lr}
    e002:	f7fc fe19 	bl	ac38 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e00a:	f7f4 b97f 	b.w	230c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e00e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e012:	4604      	mov	r4, r0
    e014:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    e018:	2800      	cmp	r0, #0
    e01a:	d051      	beq.n	e0c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    e01c:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e020:	2803      	cmp	r0, #3
    e022:	d14d      	bne.n	e0c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    e024:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    e028:	f001 fac2 	bl	f5b0 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    e02c:	4605      	mov	r5, r0
    e02e:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    e032:	f7f9 fa11 	bl	7458 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    e036:	4428      	add	r0, r5
    e038:	b286      	uxth	r6, r0
    e03a:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    e03e:	f7f9 fa0b 	bl	7458 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    e042:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    e046:	fa1f f880 	uxth.w	r8, r0
    e04a:	4648      	mov	r0, r9
    e04c:	f001 fb49 	bl	f6e2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e050:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    e054:	1a0d      	subs	r5, r1, r0
    e056:	4648      	mov	r0, r9
    e058:	f001 fb51 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e05c:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    e060:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e064:	fbb0 f0fa 	udiv	r0, r0, sl
    e068:	1a2d      	subs	r5, r5, r0
    e06a:	4648      	mov	r0, r9
    e06c:	f001 fb39 	bl	f6e2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e070:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    e074:	1a0f      	subs	r7, r1, r0
    e076:	4648      	mov	r0, r9
    e078:	f001 fb41 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e07c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e080:	4401      	add	r1, r0
    e082:	fbb1 f0fa 	udiv	r0, r1, sl
    e086:	1a39      	subs	r1, r7, r0
    e088:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    e08c:	4370      	muls	r0, r6
    e08e:	fbb0 f2f8 	udiv	r2, r0, r8
    e092:	2029      	movs	r0, #41	; 0x29
    e094:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    e098:	3260      	adds	r2, #96	; 0x60
    e09a:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    e09e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    e0a2:	42a9      	cmp	r1, r5
    e0a4:	d801      	bhi.n	e0aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29a>
    e0a6:	4285      	cmp	r5, r0
    e0a8:	d901      	bls.n	e0ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29e>
    e0aa:	f7f5 fa7b 	bl	35a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    e0ae:	4631      	mov	r1, r6
    e0b0:	68e0      	ldr	r0, [r4, #12]
    e0b2:	f7fd fb22 	bl	b6fa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    e0b6:	2100      	movs	r1, #0
    e0b8:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    e0bc:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
    e0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0c4:	b570      	push	{r4, r5, r6, lr}
    e0c6:	460c      	mov	r4, r1
    e0c8:	4605      	mov	r5, r0
    e0ca:	f001 fb18 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e0ce:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e0d2:	4408      	add	r0, r1
    e0d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e0d8:	fbb0 f6f1 	udiv	r6, r0, r1
    e0dc:	4628      	mov	r0, r5
    e0de:	f001 fb00 	bl	f6e2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e0e2:	4430      	add	r0, r6
    e0e4:	4420      	add	r0, r4
    e0e6:	bd70      	pop	{r4, r5, r6, pc}
    e0e8:	f7f3 bb5e 	b.w	17a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e0ec:	b510      	push	{r4, lr}
    e0ee:	4604      	mov	r4, r0
    e0f0:	f7ff fca3 	bl	da3a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e0f4:	b1a0      	cbz	r0, e120 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    e0f6:	4620      	mov	r0, r4
    e0f8:	f7ff fc97 	bl	da2a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e0fc:	b918      	cbnz	r0, e106 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    e0fe:	4620      	mov	r0, r4
    e100:	f7ff fc9d 	bl	da3e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e104:	b120      	cbz	r0, e110 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    e106:	2449      	movs	r4, #73	; 0x49
    e108:	f001 fab7 	bl	f67a <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e10c:	b928      	cbnz	r0, e11a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    e10e:	e001      	b.n	e114 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    e110:	2442      	movs	r4, #66	; 0x42
    e112:	e7f9      	b.n	e108 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f8>
    e114:	f001 faa7 	bl	f666 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e118:	b100      	cbz	r0, e11c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    e11a:	1de4      	adds	r4, r4, #7
    e11c:	4620      	mov	r0, r4
    e11e:	bd10      	pop	{r4, pc}
    e120:	206b      	movs	r0, #107	; 0x6b
    e122:	bd10      	pop	{r4, pc}
    e124:	b570      	push	{r4, r5, r6, lr}
    e126:	4604      	mov	r4, r0
    e128:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    e12c:	2500      	movs	r5, #0
    e12e:	b118      	cbz	r0, e138 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    e130:	2001      	movs	r0, #1
    e132:	f000 f887 	bl	e244 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    e136:	4605      	mov	r5, r0
    e138:	4620      	mov	r0, r4
    e13a:	f7ff fc51 	bl	d9e0 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e13e:	1941      	adds	r1, r0, r5
    e140:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e144:	34b8      	adds	r4, #184	; 0xb8
    e146:	f7f3 f9c9 	bl	14dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e14a:	2600      	movs	r6, #0
    e14c:	60e0      	str	r0, [r4, #12]
    e14e:	f804 6b0b 	strb.w	r6, [r4], #11
    e152:	2001      	movs	r0, #1
    e154:	f804 0901 	strb.w	r0, [r4], #-1
    e158:	2003      	movs	r0, #3
    e15a:	f804 09c2 	strb.w	r0, [r4], #-194
    e15e:	4620      	mov	r0, r4
    e160:	f7ff ffc4 	bl	e0ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    e164:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    e168:	4629      	mov	r1, r5
    e16a:	4620      	mov	r0, r4
    e16c:	f7ff ff17 	bl	df9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    e170:	b930      	cbnz	r0, e180 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x370>
    e172:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    e176:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e17a:	f7ff ffb5 	bl	e0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    e17e:	b128      	cbz	r0, e18c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    e180:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    e184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e188:	f7ff bf3a 	b.w	e000 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    e18c:	f240 61eb 	movw	r1, #1771	; 0x6eb
    e190:	2030      	movs	r0, #48	; 0x30
    e192:	f7f5 fda5 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e196:	b510      	push	{r4, lr}
    e198:	4604      	mov	r4, r0
    e19a:	2000      	movs	r0, #0
    e19c:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    e1a0:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    e1a4:	f7f3 ff5c 	bl	2060 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e1a8:	2020      	movs	r0, #32
    e1aa:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
    e1ae:	bd10      	pop	{r4, pc}
    e1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e1b4:	2500      	movs	r5, #0
    e1b6:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    e1ba:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    e1be:	4688      	mov	r8, r1
    e1c0:	4604      	mov	r4, r0
    e1c2:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    e1c6:	2701      	movs	r7, #1
    e1c8:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    e1cc:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    e1d0:	4639      	mov	r1, r7
    e1d2:	34a0      	adds	r4, #160	; 0xa0
    e1d4:	f7f7 fcc2 	bl	5b5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e1d8:	6860      	ldr	r0, [r4, #4]
    e1da:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
    e1de:	6861      	ldr	r1, [r4, #4]
    e1e0:	7820      	ldrb	r0, [r4, #0]
    e1e2:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
    e1e6:	6861      	ldr	r1, [r4, #4]
    e1e8:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
    e1ec:	6860      	ldr	r0, [r4, #4]
    e1ee:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
    e1f2:	6864      	ldr	r4, [r4, #4]
    e1f4:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    e1f8:	2300      	movs	r3, #0
    e1fa:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
    e1fe:	461a      	mov	r2, r3
    e200:	4619      	mov	r1, r3
    e202:	4620      	mov	r0, r4
    e204:	9500      	str	r5, [sp, #0]
    e206:	f7f9 fa05 	bl	7614 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    e20a:	b120      	cbz	r0, e216 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    e20c:	f240 2117 	movw	r1, #535	; 0x217
    e210:	2030      	movs	r0, #48	; 0x30
    e212:	f7f5 fd65 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e216:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    e21a:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    e21e:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
    e222:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
    e226:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
    e22a:	f504 7498 	add.w	r4, r4, #304	; 0x130
    e22e:	7665      	strb	r5, [r4, #25]
    e230:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
    e234:	1e40      	subs	r0, r0, #1
    e236:	f824 0cbc 	strh.w	r0, [r4, #-188]
    e23a:	86e5      	strh	r5, [r4, #54]	; 0x36
    e23c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e240:	f7ff bede 	b.w	e000 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    e244:	b510      	push	{r4, lr}
    e246:	f7f9 fbf1 	bl	7a2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    e24a:	f242 7110 	movw	r1, #10000	; 0x2710
    e24e:	fbb0 f2f1 	udiv	r2, r0, r1
    e252:	fb01 0012 	mls	r0, r1, r2, r0
    e256:	bd10      	pop	{r4, pc}
    e258:	b570      	push	{r4, r5, r6, lr}
    e25a:	b140      	cbz	r0, e26e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45e>
    e25c:	2909      	cmp	r1, #9
    e25e:	d248      	bcs.n	e2f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e2>
    e260:	e8df f001 	tbb	[pc, r1]
    e264:	3b3b1507 	.word	0x3b3b1507
    e268:	3f294737 	.word	0x3f294737
    e26c:	0043      	.short	0x0043
    e26e:	21cd      	movs	r1, #205	; 0xcd
    e270:	e03c      	b.n	e2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e272:	4604      	mov	r4, r0
    e274:	f7f8 f9f0 	bl	6658 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    e278:	b110      	cbz	r0, e280 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x470>
    e27a:	f240 2175 	movw	r1, #629	; 0x275
    e27e:	e035      	b.n	e2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e280:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    e284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e288:	38f8      	subs	r0, #248	; 0xf8
    e28a:	f7f4 b921 	b.w	24d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    e28e:	4605      	mov	r5, r0
    e290:	f7ff fbcf 	bl	da32 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e294:	b9a8      	cbnz	r0, e2c2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4b2>
    e296:	4628      	mov	r0, r5
    e298:	f7ff fe7b 	bl	df92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    e29c:	4604      	mov	r4, r0
    e29e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    e2a2:	42a0      	cmp	r0, r4
    e2a4:	d20b      	bcs.n	e2be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    e2a6:	1a20      	subs	r0, r4, r0
    e2a8:	2104      	movs	r1, #4
    e2aa:	f7f3 f845 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e2ae:	b130      	cbz	r0, e2be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    e2b0:	4628      	mov	r0, r5
    e2b2:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    e2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e2ba:	f7ff bb8f 	b.w	d9dc <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    e2be:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    e2c2:	4628      	mov	r0, r5
    e2c4:	f7f8 f9e4 	bl	6690 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    e2c8:	2800      	cmp	r0, #0
    e2ca:	d014      	beq.n	e2f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e6>
    e2cc:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    e2d0:	e00c      	b.n	e2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e2d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e2d6:	f7fc be63 	b.w	afa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e2da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e2de:	f7ff bdf4 	b.w	deca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
    e2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e2e6:	f7ff be4b 	b.w	df80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    e2ea:	21ed      	movs	r1, #237	; 0xed
    e2ec:	2030      	movs	r0, #48	; 0x30
    e2ee:	f7f5 fcf7 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2f2:	21f1      	movs	r1, #241	; 0xf1
    e2f4:	e7fa      	b.n	e2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e2f6:	bd70      	pop	{r4, r5, r6, pc}
    e2f8:	b510      	push	{r4, lr}
    e2fa:	0004      	movs	r4, r0
    e2fc:	d008      	beq.n	e310 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x500>
    e2fe:	2909      	cmp	r1, #9
    e300:	d25c      	bcs.n	e3bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ac>
    e302:	e8df f001 	tbb	[pc, r1]
    e306:	3607      	.short	0x3607
    e308:	5b3a3e3e 	.word	0x5b3a3e3e
    e30c:	00574a43 	.word	0x00574a43
    e310:	2196      	movs	r1, #150	; 0x96
    e312:	e050      	b.n	e3b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    e314:	2100      	movs	r1, #0
    e316:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
    e31a:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    e31e:	4620      	mov	r0, r4
    e320:	b189      	cbz	r1, e346 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x536>
    e322:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
    e326:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    e32a:	428a      	cmp	r2, r1
    e32c:	d106      	bne.n	e33c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52c>
    e32e:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
    e332:	1a51      	subs	r1, r2, r1
    e334:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e338:	4611      	mov	r1, r2
    e33a:	e00d      	b.n	e358 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    e33c:	1a51      	subs	r1, r2, r1
    e33e:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e342:	b291      	uxth	r1, r2
    e344:	e008      	b.n	e358 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    e346:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    e34a:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    e34e:	1a89      	subs	r1, r1, r2
    e350:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e354:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    e358:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    e35c:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
    e360:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
    e364:	f7f9 fd7e 	bl	7e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    e368:	4620      	mov	r0, r4
    e36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e36e:	f7f9 bb67 	b.w	7a40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    e372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e376:	f000 b905 	b.w	e584 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    e37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e37e:	f7fc be0f 	b.w	afa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e382:	4620      	mov	r0, r4
    e384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e388:	f000 b827 	b.w	e3da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ca>
    e38c:	2001      	movs	r0, #1
    e38e:	f7f2 ffc3 	bl	1318 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    e392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e396:	f7fe bcbe 	b.w	cd16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    e39a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e39e:	2804      	cmp	r0, #4
    e3a0:	d001      	beq.n	e3a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    e3a2:	21b8      	movs	r1, #184	; 0xb8
    e3a4:	e007      	b.n	e3b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    e3a6:	4620      	mov	r0, r4
    e3a8:	f7ff fef5 	bl	e196 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    e3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3b0:	f7f7 be22 	b.w	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e3b4:	21c1      	movs	r1, #193	; 0xc1
    e3b6:	2030      	movs	r0, #48	; 0x30
    e3b8:	f7f5 fc92 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3bc:	21c5      	movs	r1, #197	; 0xc5
    e3be:	e7fa      	b.n	e3b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    e3c0:	b510      	push	{r4, lr}
    e3c2:	f001 f99c 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e3c6:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e3ca:	4408      	add	r0, r1
    e3cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e3d0:	fbb0 f0f1 	udiv	r0, r0, r1
    e3d4:	f500 70bb 	add.w	r0, r0, #374	; 0x176
    e3d8:	bd10      	pop	{r4, pc}
    e3da:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e3dc:	4604      	mov	r4, r0
    e3de:	f7fd f958 	bl	b692 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e3e2:	4601      	mov	r1, r0
    e3e4:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    e3e8:	f7f3 f8aa 	bl	1540 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e3ec:	68e1      	ldr	r1, [r4, #12]
    e3ee:	b111      	cbz	r1, e3f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e6>
    e3f0:	fbb0 f0f1 	udiv	r0, r0, r1
    e3f4:	e000      	b.n	e3f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e8>
    e3f6:	2000      	movs	r0, #0
    e3f8:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    e3fc:	290d      	cmp	r1, #13
    e3fe:	d00c      	beq.n	e41a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x60a>
    e400:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    e404:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e408:	1813      	adds	r3, r2, r0
    e40a:	1acb      	subs	r3, r1, r3
    e40c:	b21b      	sxth	r3, r3
    e40e:	2b00      	cmp	r3, #0
    e410:	db06      	blt.n	e420 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x610>
    e412:	1c49      	adds	r1, r1, #1
    e414:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    e418:	e006      	b.n	e428 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x618>
    e41a:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    e41e:	e012      	b.n	e446 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
    e420:	1c40      	adds	r0, r0, #1
    e422:	4410      	add	r0, r2
    e424:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    e428:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
    e42c:	f88d 0000 	strb.w	r0, [sp]
    e430:	9800      	ldr	r0, [sp, #0]
    e432:	9000      	str	r0, [sp, #0]
    e434:	f89d 0000 	ldrb.w	r0, [sp]
    e438:	b940      	cbnz	r0, e44c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    e43a:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    e43e:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    e442:	4288      	cmp	r0, r1
    e444:	d102      	bne.n	e44c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    e446:	1c40      	adds	r0, r0, #1
    e448:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    e44c:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    e450:	1c40      	adds	r0, r0, #1
    e452:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    e456:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    e45a:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    e45e:	1a40      	subs	r0, r0, r1
    e460:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e464:	1e40      	subs	r0, r0, #1
    e466:	4408      	add	r0, r1
    e468:	b285      	uxth	r5, r0
    e46a:	e026      	b.n	e4ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    e46c:	a801      	add	r0, sp, #4
    e46e:	2300      	movs	r3, #0
    e470:	9000      	str	r0, [sp, #0]
    e472:	461a      	mov	r2, r3
    e474:	4620      	mov	r0, r4
    e476:	f7f9 f8cd 	bl	7614 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    e47a:	2800      	cmp	r0, #0
    e47c:	d038      	beq.n	e4f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6e0>
    e47e:	2801      	cmp	r0, #1
    e480:	d004      	beq.n	e48c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x67c>
    e482:	f240 614e 	movw	r1, #1614	; 0x64e
    e486:	2030      	movs	r0, #48	; 0x30
    e488:	f7f5 fc2a 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e48c:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    e490:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    e494:	1a42      	subs	r2, r0, r1
    e496:	b212      	sxth	r2, r2
    e498:	2a00      	cmp	r2, #0
    e49a:	da09      	bge.n	e4b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    e49c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e4a0:	4402      	add	r2, r0
    e4a2:	1aaa      	subs	r2, r5, r2
    e4a4:	b212      	sxth	r2, r2
    e4a6:	2a00      	cmp	r2, #0
    e4a8:	da02      	bge.n	e4b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    e4aa:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    e4ae:	e004      	b.n	e4ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    e4b0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e4b4:	4408      	add	r0, r1
    e4b6:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    e4ba:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e4be:	1a68      	subs	r0, r5, r1
    e4c0:	b200      	sxth	r0, r0
    e4c2:	2800      	cmp	r0, #0
    e4c4:	dad2      	bge.n	e46c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65c>
    e4c6:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    e4ca:	b178      	cbz	r0, e4ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6dc>
    e4cc:	2008      	movs	r0, #8
    e4ce:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    e4d2:	2001      	movs	r0, #1
    e4d4:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    e4d8:	4620      	mov	r0, r4
    e4da:	f000 f855 	bl	e588 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    e4de:	4620      	mov	r0, r4
    e4e0:	f7ff fe59 	bl	e196 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    e4e4:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e4e8:	f7f7 bd86 	b.w	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e4ec:	203e      	movs	r0, #62	; 0x3e
    e4ee:	e7ee      	b.n	e4ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6be>
    e4f0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e4f2:	01f4      	.short	0x01f4
    e4f4:	009600fa 	.word	0x009600fa
    e4f8:	004b0064 	.word	0x004b0064
    e4fc:	001e0032 	.word	0x001e0032
    e500:	000a0014 	.word	0x000a0014
    e504:	00020005 	.word	0x00020005
    e508:	0001      	.short	0x0001
    e50a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e50e:	f001 0307 	and.w	r3, r1, #7
    e512:	7802      	ldrb	r2, [r0, #0]
    e514:	2101      	movs	r1, #1
    e516:	4099      	lsls	r1, r3
    e518:	438a      	bics	r2, r1
    e51a:	7002      	strb	r2, [r0, #0]
    e51c:	4770      	bx	lr

0000e51e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    e51e:	b510      	push	{r4, lr}
    e520:	4604      	mov	r4, r0
    e522:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
    e526:	68e1      	ldr	r1, [r4, #12]
    e528:	4288      	cmp	r0, r1
    e52a:	d109      	bne.n	e540 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    e52c:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    e530:	8aa2      	ldrh	r2, [r4, #20]
    e532:	4291      	cmp	r1, r2
    e534:	d104      	bne.n	e540 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    e536:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
    e53a:	8ae2      	ldrh	r2, [r4, #22]
    e53c:	4291      	cmp	r1, r2
    e53e:	d013      	beq.n	e568 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    e540:	8821      	ldrh	r1, [r4, #0]
    e542:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
    e546:	f7fe fc6d 	bl	ce24 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    e54a:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
    e54e:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    e552:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
    e556:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    e55a:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
    e55e:	2001      	movs	r0, #1
    e560:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
    e564:	f7f7 fd48 	bl	5ff8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e568:	2102      	movs	r1, #2
    e56a:	4620      	mov	r0, r4
    e56c:	f7f7 faf6 	bl	5b5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e570:	2000      	movs	r0, #0
    e572:	f804 0f7e 	strb.w	r0, [r4, #126]!
    e576:	2003      	movs	r0, #3
    e578:	70e0      	strb	r0, [r4, #3]
    e57a:	bd10      	pop	{r4, pc}

0000e57c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    e57c:	f7f5 bf56 	b.w	442c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e580 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    e580:	2000      	movs	r0, #0
    e582:	4770      	bx	lr

0000e584 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    e584:	f7f6 bc8a 	b.w	4e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000e588 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    e588:	2100      	movs	r1, #0
    e58a:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    e58e:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    e592:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    e596:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    e59a:	b109      	cbz	r1, e5a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    e59c:	2102      	movs	r1, #2
    e59e:	e000      	b.n	e5a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    e5a0:	2103      	movs	r1, #3
    e5a2:	f7f8 bf07 	b.w	73b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e5a6:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    e5aa:	28fe      	cmp	r0, #254	; 0xfe
    e5ac:	d001      	beq.n	e5b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    e5ae:	2001      	movs	r0, #1
    e5b0:	4770      	bx	lr
    e5b2:	2000      	movs	r0, #0
    e5b4:	4770      	bx	lr
    e5b6:	b510      	push	{r4, lr}
    e5b8:	2801      	cmp	r0, #1
    e5ba:	d006      	beq.n	e5ca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e5bc:	2802      	cmp	r0, #2
    e5be:	d004      	beq.n	e5ca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e5c0:	f240 2163 	movw	r1, #611	; 0x263
    e5c4:	2006      	movs	r0, #6
    e5c6:	f7f5 fb8b 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5ca:	bd10      	pop	{r4, pc}
    e5cc:	2801      	cmp	r0, #1
    e5ce:	d002      	beq.n	e5d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    e5d0:	2802      	cmp	r0, #2
    e5d2:	d105      	bne.n	e5e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e5d4:	e002      	b.n	e5dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    e5d6:	2901      	cmp	r1, #1
    e5d8:	d004      	beq.n	e5e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e5da:	e001      	b.n	e5e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e5dc:	2902      	cmp	r1, #2
    e5de:	d001      	beq.n	e5e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e5e0:	2000      	movs	r0, #0
    e5e2:	4770      	bx	lr
    e5e4:	2001      	movs	r0, #1
    e5e6:	4770      	bx	lr
    e5e8:	1a40      	subs	r0, r0, r1
    e5ea:	b200      	sxth	r0, r0
    e5ec:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e5f0:	4288      	cmp	r0, r1
    e5f2:	dc01      	bgt.n	e5f8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    e5f4:	2800      	cmp	r0, #0
    e5f6:	dc01      	bgt.n	e5fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    e5f8:	2001      	movs	r0, #1
    e5fa:	4770      	bx	lr
    e5fc:	2000      	movs	r0, #0
    e5fe:	4770      	bx	lr
    e600:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e604:	f001 0107 	and.w	r1, r1, #7
    e608:	7800      	ldrb	r0, [r0, #0]
    e60a:	2201      	movs	r2, #1
    e60c:	408a      	lsls	r2, r1
    e60e:	4010      	ands	r0, r2
    e610:	40c8      	lsrs	r0, r1
    e612:	4770      	bx	lr
    e614:	b118      	cbz	r0, e61e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e616:	2802      	cmp	r0, #2
    e618:	d001      	beq.n	e61e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e61a:	2001      	movs	r0, #1
    e61c:	4770      	bx	lr
    e61e:	2000      	movs	r0, #0
    e620:	4770      	bx	lr

0000e622 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e622:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e624:	7881      	ldrb	r1, [r0, #2]
    e626:	4604      	mov	r4, r0
    e628:	291a      	cmp	r1, #26
    e62a:	d025      	beq.n	e678 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    e62c:	dc0e      	bgt.n	e64c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    e62e:	2916      	cmp	r1, #22
    e630:	d22d      	bcs.n	e68e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e632:	e8df f001 	tbb	[pc, r1]
    e636:	2c2c      	.short	0x2c2c
    e638:	212c2c2c 	.word	0x212c2c2c
    e63c:	2c2c2c2c 	.word	0x2c2c2c2c
    e640:	2c2c2c2c 	.word	0x2c2c2c2c
    e644:	2c2c2c2c 	.word	0x2c2c2c2c
    e648:	2121212c 	.word	0x2121212c
    e64c:	292a      	cmp	r1, #42	; 0x2a
    e64e:	d01e      	beq.n	e68e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e650:	dc0b      	bgt.n	e66a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    e652:	f1a1 011e 	sub.w	r1, r1, #30
    e656:	290c      	cmp	r1, #12
    e658:	d219      	bcs.n	e68e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e65a:	e8df f001 	tbb	[pc, r1]
    e65e:	1818      	.short	0x1818
    e660:	18181818 	.word	0x18181818
    e664:	18181818 	.word	0x18181818
    e668:	0d18      	.short	0x0d18
    e66a:	393a      	subs	r1, #58	; 0x3a
    e66c:	2904      	cmp	r1, #4
    e66e:	d20e      	bcs.n	e68e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e670:	e8df f001 	tbb	[pc, r1]
    e674:	020d020d 	.word	0x020d020d
    e678:	8820      	ldrh	r0, [r4, #0]
    e67a:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e67e:	d206      	bcs.n	e68e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e680:	2701      	movs	r7, #1
    e682:	4669      	mov	r1, sp
    e684:	f7fe fbbd 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e688:	b118      	cbz	r0, e692 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e68a:	2002      	movs	r0, #2
    e68c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e68e:	2012      	movs	r0, #18
    e690:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e692:	9d01      	ldr	r5, [sp, #4]
    e694:	4668      	mov	r0, sp
    e696:	462e      	mov	r6, r5
    e698:	f505 75bc 	add.w	r5, r5, #376	; 0x178
    e69c:	f206 1679 	addw	r6, r6, #377	; 0x179
    e6a0:	f000 fe8d 	bl	f3be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    e6a4:	b138      	cbz	r0, e6b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    e6a6:	7828      	ldrb	r0, [r5, #0]
    e6a8:	f88d 0008 	strb.w	r0, [sp, #8]
    e6ac:	9802      	ldr	r0, [sp, #8]
    e6ae:	9002      	str	r0, [sp, #8]
    e6b0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    e6b4:	b108      	cbz	r0, e6ba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    e6b6:	200c      	movs	r0, #12
    e6b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e6ba:	702f      	strb	r7, [r5, #0]
    e6bc:	78a0      	ldrb	r0, [r4, #2]
    e6be:	7030      	strb	r0, [r6, #0]
    e6c0:	4668      	mov	r0, sp
    e6c2:	f7fe ff36 	bl	d532 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e6c6:	2000      	movs	r0, #0
    e6c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000e6ca <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e6ca:	b510      	push	{r4, lr}
    e6cc:	4604      	mov	r4, r0
    e6ce:	7800      	ldrb	r0, [r0, #0]
    e6d0:	b118      	cbz	r0, e6da <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e6d2:	2801      	cmp	r0, #1
    e6d4:	d001      	beq.n	e6da <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e6d6:	2012      	movs	r0, #18
    e6d8:	bd10      	pop	{r4, pc}
    e6da:	f000 fe9e 	bl	f41a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    e6de:	b120      	cbz	r0, e6ea <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e6e0:	f7f7 f82e 	bl	5740 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e6e4:	b108      	cbz	r0, e6ea <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e6e6:	200c      	movs	r0, #12
    e6e8:	bd10      	pop	{r4, pc}
    e6ea:	7820      	ldrb	r0, [r4, #0]
    e6ec:	f7ff ff92 	bl	e614 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e6f0:	1de2      	adds	r2, r4, #7
    e6f2:	f104 0317 	add.w	r3, r4, #23
    e6f6:	1c61      	adds	r1, r4, #1
    e6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6fc:	f7f7 b852 	b.w	57a4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000e700 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    e700:	b510      	push	{r4, lr}
    e702:	4604      	mov	r4, r0
    e704:	f000 fef2 	bl	f4ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    e708:	b108      	cbz	r0, e70e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    e70a:	200c      	movs	r0, #12
    e70c:	bd10      	pop	{r4, pc}
    e70e:	7820      	ldrb	r0, [r4, #0]
    e710:	b118      	cbz	r0, e71a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e712:	2801      	cmp	r0, #1
    e714:	d001      	beq.n	e71a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e716:	2012      	movs	r0, #18
    e718:	bd10      	pop	{r4, pc}
    e71a:	f7ff ff7b 	bl	e614 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e71e:	1c61      	adds	r1, r4, #1
    e720:	f7f7 f8b8 	bl	5894 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    e724:	b108      	cbz	r0, e72a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    e726:	2000      	movs	r0, #0
    e728:	bd10      	pop	{r4, pc}
    e72a:	2007      	movs	r0, #7
    e72c:	bd10      	pop	{r4, pc}

0000e72e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    e72e:	b510      	push	{r4, lr}
    e730:	f000 fe73 	bl	f41a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    e734:	b120      	cbz	r0, e740 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e736:	f7f7 f803 	bl	5740 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e73a:	b108      	cbz	r0, e740 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e73c:	200c      	movs	r0, #12
    e73e:	bd10      	pop	{r4, pc}
    e740:	f7f7 f876 	bl	5830 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    e744:	2000      	movs	r0, #0
    e746:	bd10      	pop	{r4, pc}

0000e748 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    e748:	b510      	push	{r4, lr}
    e74a:	f000 fecf 	bl	f4ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    e74e:	b108      	cbz	r0, e754 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    e750:	200c      	movs	r0, #12
    e752:	bd10      	pop	{r4, pc}
    e754:	f7f7 f8c6 	bl	58e4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    e758:	2000      	movs	r0, #0
    e75a:	bd10      	pop	{r4, pc}

0000e75c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    e75c:	b510      	push	{r4, lr}
    e75e:	460b      	mov	r3, r1
    e760:	2201      	movs	r2, #1
    e762:	f100 0110 	add.w	r1, r0, #16
    e766:	f7fe fb2e 	bl	cdc6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    e76a:	2000      	movs	r0, #0
    e76c:	bd10      	pop	{r4, pc}

0000e76e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    e76e:	b510      	push	{r4, lr}
    e770:	8800      	ldrh	r0, [r0, #0]
    e772:	2100      	movs	r1, #0
    e774:	f7fe f8fd 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e778:	b118      	cbz	r0, e782 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    e77a:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
    e77e:	b111      	cbz	r1, e786 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    e780:	e007      	b.n	e792 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    e782:	2002      	movs	r0, #2
    e784:	bd10      	pop	{r4, pc}
    e786:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    e78a:	2914      	cmp	r1, #20
    e78c:	d003      	beq.n	e796 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e78e:	2915      	cmp	r1, #21
    e790:	d001      	beq.n	e796 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e792:	200c      	movs	r0, #12
    e794:	bd10      	pop	{r4, pc}
    e796:	2102      	movs	r1, #2
    e798:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
    e79c:	2000      	movs	r0, #0
    e79e:	bd10      	pop	{r4, pc}

0000e7a0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    e7a0:	b538      	push	{r3, r4, r5, lr}
    e7a2:	4605      	mov	r5, r0
    e7a4:	8800      	ldrh	r0, [r0, #0]
    e7a6:	2100      	movs	r1, #0
    e7a8:	f7fe f8e3 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e7ac:	0004      	movs	r4, r0
    e7ae:	d003      	beq.n	e7b8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    e7b0:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    e7b4:	b110      	cbz	r0, e7bc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    e7b6:	e010      	b.n	e7da <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e7b8:	2002      	movs	r0, #2
    e7ba:	bd38      	pop	{r3, r4, r5, pc}
    e7bc:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    e7c0:	2814      	cmp	r0, #20
    e7c2:	d001      	beq.n	e7c8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    e7c4:	2815      	cmp	r0, #21
    e7c6:	d108      	bne.n	e7da <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e7c8:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    e7cc:	f88d 0000 	strb.w	r0, [sp]
    e7d0:	9800      	ldr	r0, [sp, #0]
    e7d2:	9000      	str	r0, [sp, #0]
    e7d4:	f89d 0000 	ldrb.w	r0, [sp]
    e7d8:	b108      	cbz	r0, e7de <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    e7da:	200c      	movs	r0, #12
    e7dc:	bd38      	pop	{r3, r4, r5, pc}
    e7de:	2210      	movs	r2, #16
    e7e0:	1ca9      	adds	r1, r5, #2
    e7e2:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    e7e6:	f7fd f8c9 	bl	b97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e7ea:	2001      	movs	r0, #1
    e7ec:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
    e7f0:	2000      	movs	r0, #0
    e7f2:	bd38      	pop	{r3, r4, r5, pc}

0000e7f4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    e7f4:	b510      	push	{r4, lr}
    e7f6:	2108      	movs	r1, #8
    e7f8:	f7f5 fb0c 	bl	3e14 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e7fc:	2000      	movs	r0, #0
    e7fe:	bd10      	pop	{r4, pc}

0000e800 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    e800:	b510      	push	{r4, lr}
    e802:	4604      	mov	r4, r0
    e804:	f000 fdf2 	bl	f3ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    e808:	f7ff f91d 	bl	da46 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e80c:	7020      	strb	r0, [r4, #0]
    e80e:	2000      	movs	r0, #0
    e810:	bd10      	pop	{r4, pc}

0000e812 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    e812:	b510      	push	{r4, lr}
    e814:	4604      	mov	r4, r0
    e816:	f000 fdcc 	bl	f3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    e81a:	b140      	cbz	r0, e82e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    e81c:	20fb      	movs	r0, #251	; 0xfb
    e81e:	8020      	strh	r0, [r4, #0]
    e820:	f640 0148 	movw	r1, #2120	; 0x848
    e824:	8061      	strh	r1, [r4, #2]
    e826:	80a0      	strh	r0, [r4, #4]
    e828:	80e1      	strh	r1, [r4, #6]
    e82a:	2000      	movs	r0, #0
    e82c:	bd10      	pop	{r4, pc}
    e82e:	2001      	movs	r0, #1
    e830:	bd10      	pop	{r4, pc}

0000e832 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    e832:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e834:	460d      	mov	r5, r1
    e836:	4606      	mov	r6, r0
    e838:	f7fb fd8a 	bl	a350 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    e83c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e840:	b300      	cbz	r0, e884 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    e842:	8830      	ldrh	r0, [r6, #0]
    e844:	4669      	mov	r1, sp
    e846:	f7fe fadc 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e84a:	2800      	cmp	r0, #0
    e84c:	d119      	bne.n	e882 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    e84e:	9c01      	ldr	r4, [sp, #4]
    e850:	2700      	movs	r7, #0
    e852:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    e856:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    e85a:	f000 fc46 	bl	f0ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    e85e:	70a8      	strb	r0, [r5, #2]
    e860:	7860      	ldrb	r0, [r4, #1]
    e862:	f000 fc42 	bl	f0ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    e866:	70e8      	strb	r0, [r5, #3]
    e868:	78a0      	ldrb	r0, [r4, #2]
    e86a:	f88d 0008 	strb.w	r0, [sp, #8]
    e86e:	9802      	ldr	r0, [sp, #8]
    e870:	9002      	str	r0, [sp, #8]
    e872:	f89d 0008 	ldrb.w	r0, [sp, #8]
    e876:	3c6a      	subs	r4, #106	; 0x6a
    e878:	2800      	cmp	r0, #0
    e87a:	d1ea      	bne.n	e852 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    e87c:	8830      	ldrh	r0, [r6, #0]
    e87e:	8028      	strh	r0, [r5, #0]
    e880:	2000      	movs	r0, #0
    e882:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e884:	2001      	movs	r0, #1
    e886:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000e888 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    e888:	2108      	movs	r1, #8
    e88a:	7001      	strb	r1, [r0, #0]
    e88c:	2000      	movs	r0, #0
    e88e:	4770      	bx	lr

0000e890 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    e890:	b510      	push	{r4, lr}
    e892:	4604      	mov	r4, r0
    e894:	20d8      	movs	r0, #216	; 0xd8
    e896:	7020      	strb	r0, [r4, #0]
    e898:	f000 fd6c 	bl	f374 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    e89c:	7060      	strb	r0, [r4, #1]
    e89e:	2000      	movs	r0, #0
    e8a0:	bd10      	pop	{r4, pc}

0000e8a2 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    e8a2:	2108      	movs	r1, #8
    e8a4:	7001      	strb	r1, [r0, #0]
    e8a6:	2000      	movs	r0, #0
    e8a8:	4770      	bx	lr

0000e8aa <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    e8aa:	b510      	push	{r4, lr}
    e8ac:	4604      	mov	r4, r0
    e8ae:	7800      	ldrb	r0, [r0, #0]
    e8b0:	b108      	cbz	r0, e8b6 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    e8b2:	2801      	cmp	r0, #1
    e8b4:	d110      	bne.n	e8d8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e8b6:	f000 fdb0 	bl	f41a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    e8ba:	b120      	cbz	r0, e8c6 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e8bc:	f7f6 ff40 	bl	5740 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e8c0:	b108      	cbz	r0, e8c6 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e8c2:	200c      	movs	r0, #12
    e8c4:	bd10      	pop	{r4, pc}
    e8c6:	7820      	ldrb	r0, [r4, #0]
    e8c8:	f7ff fea4 	bl	e614 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e8cc:	1c61      	adds	r1, r4, #1
    e8ce:	f7fe fa60 	bl	cd92 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    e8d2:	b108      	cbz	r0, e8d8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e8d4:	2000      	movs	r0, #0
    e8d6:	bd10      	pop	{r4, pc}
    e8d8:	2012      	movs	r0, #18
    e8da:	bd10      	pop	{r4, pc}

0000e8dc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    e8dc:	b510      	push	{r4, lr}
    e8de:	4604      	mov	r4, r0
    e8e0:	f000 fe04 	bl	f4ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    e8e4:	b108      	cbz	r0, e8ea <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    e8e6:	200c      	movs	r0, #12
    e8e8:	bd10      	pop	{r4, pc}
    e8ea:	7820      	ldrb	r0, [r4, #0]
    e8ec:	b108      	cbz	r0, e8f2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    e8ee:	2801      	cmp	r0, #1
    e8f0:	d107      	bne.n	e902 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e8f2:	f7ff fe8f 	bl	e614 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e8f6:	1c61      	adds	r1, r4, #1
    e8f8:	f7fe fa5a 	bl	cdb0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    e8fc:	b108      	cbz	r0, e902 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e8fe:	2000      	movs	r0, #0
    e900:	bd10      	pop	{r4, pc}
    e902:	2012      	movs	r0, #18
    e904:	bd10      	pop	{r4, pc}

0000e906 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    e906:	b510      	push	{r4, lr}
    e908:	4604      	mov	r4, r0
    e90a:	f000 fd86 	bl	f41a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    e90e:	b108      	cbz	r0, e914 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    e910:	200c      	movs	r0, #12
    e912:	bd10      	pop	{r4, pc}
    e914:	7820      	ldrb	r0, [r4, #0]
    e916:	f000 0001 	and.w	r0, r0, #1
    e91a:	f7f6 ff0b 	bl	5734 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    e91e:	2000      	movs	r0, #0
    e920:	bd10      	pop	{r4, pc}

0000e922 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    e922:	b51c      	push	{r2, r3, r4, lr}
    e924:	4604      	mov	r4, r0
    e926:	f000 fd61 	bl	f3ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    e92a:	2000      	movs	r0, #0
    e92c:	f88d 0002 	strb.w	r0, [sp, #2]
    e930:	2103      	movs	r1, #3
    e932:	f88d 1001 	strb.w	r1, [sp, #1]
    e936:	f814 1b01 	ldrb.w	r1, [r4], #1
    e93a:	f88d 1003 	strb.w	r1, [sp, #3]
    e93e:	f88d 0000 	strb.w	r0, [sp]
    e942:	4668      	mov	r0, sp
    e944:	9401      	str	r4, [sp, #4]
    e946:	f000 f9f8 	bl	ed3a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    e94a:	bd1c      	pop	{r2, r3, r4, pc}

0000e94c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    e94c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e94e:	4605      	mov	r5, r0
    e950:	f000 fd4c 	bl	f3ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    e954:	4606      	mov	r6, r0
    e956:	7828      	ldrb	r0, [r5, #0]
    e958:	2400      	movs	r4, #0
    e95a:	b160      	cbz	r0, e976 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e95c:	f88d 4000 	strb.w	r4, [sp]
    e960:	2001      	movs	r0, #1
    e962:	f10d 0101 	add.w	r1, sp, #1
    e966:	f7f6 f8b9 	bl	4adc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e96a:	b120      	cbz	r0, e976 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e96c:	4668      	mov	r0, sp
    e96e:	f000 f897 	bl	eaa0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    e972:	2800      	cmp	r0, #0
    e974:	d112      	bne.n	e99c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e976:	f88d 400c 	strb.w	r4, [sp, #12]
    e97a:	4630      	mov	r0, r6
    e97c:	f7ff f859 	bl	da32 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e980:	b118      	cbz	r0, e98a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    e982:	2080      	movs	r0, #128	; 0x80
    e984:	f8ad 000d 	strh.w	r0, [sp, #13]
    e988:	e001      	b.n	e98e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    e98a:	f8ad 400d 	strh.w	r4, [sp, #13]
    e98e:	f88d 400f 	strb.w	r4, [sp, #15]
    e992:	7828      	ldrb	r0, [r5, #0]
    e994:	2801      	cmp	r0, #1
    e996:	d003      	beq.n	e9a0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    e998:	b138      	cbz	r0, e9aa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    e99a:	2012      	movs	r0, #18
    e99c:	b004      	add	sp, #16
    e99e:	bd70      	pop	{r4, r5, r6, pc}
    e9a0:	a903      	add	r1, sp, #12
    e9a2:	4630      	mov	r0, r6
    e9a4:	f7fb fad4 	bl	9f50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    e9a8:	e7f8      	b.n	e99c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e9aa:	4630      	mov	r0, r6
    e9ac:	f000 fd3c 	bl	f428 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
    e9b0:	e7f4      	b.n	e99c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000e9b2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    e9b2:	b530      	push	{r4, r5, lr}
    e9b4:	b08b      	sub	sp, #44	; 0x2c
    e9b6:	4604      	mov	r4, r0
    e9b8:	f000 fd18 	bl	f3ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    e9bc:	4602      	mov	r2, r0
    e9be:	7920      	ldrb	r0, [r4, #4]
    e9c0:	2804      	cmp	r0, #4
    e9c2:	d803      	bhi.n	e9cc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    e9c4:	8860      	ldrh	r0, [r4, #2]
    e9c6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    e9ca:	d902      	bls.n	e9d2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    e9cc:	2012      	movs	r0, #18
    e9ce:	b00b      	add	sp, #44	; 0x2c
    e9d0:	bd30      	pop	{r4, r5, pc}
    e9d2:	2500      	movs	r5, #0
    e9d4:	f88d 5004 	strb.w	r5, [sp, #4]
    e9d8:	7921      	ldrb	r1, [r4, #4]
    e9da:	9500      	str	r5, [sp, #0]
    e9dc:	f89d 0000 	ldrb.w	r0, [sp]
    e9e0:	2905      	cmp	r1, #5
    e9e2:	f040 0010 	orr.w	r0, r0, #16
    e9e6:	f88d 0000 	strb.w	r0, [sp]
    e9ea:	d254      	bcs.n	ea96 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    e9ec:	e8df f001 	tbb	[pc, r1]
    e9f0:	11050803 	.word	0x11050803
    e9f4:	000b      	.short	0x000b
    e9f6:	f040 0001 	orr.w	r0, r0, #1
    e9fa:	f040 0002 	orr.w	r0, r0, #2
    e9fe:	e006      	b.n	ea0e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    ea00:	f040 0009 	orr.w	r0, r0, #9
    ea04:	e001      	b.n	ea0a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    ea06:	f040 0001 	orr.w	r0, r0, #1
    ea0a:	f040 0004 	orr.w	r0, r0, #4
    ea0e:	f88d 0000 	strb.w	r0, [sp]
    ea12:	f8bd 0000 	ldrh.w	r0, [sp]
    ea16:	9000      	str	r0, [sp, #0]
    ea18:	f8bd 0000 	ldrh.w	r0, [sp]
    ea1c:	f8ad 0005 	strh.w	r0, [sp, #5]
    ea20:	8821      	ldrh	r1, [r4, #0]
    ea22:	f8dd 0006 	ldr.w	r0, [sp, #6]
    ea26:	f361 201f 	bfi	r0, r1, #8, #24
    ea2a:	f8cd 0006 	str.w	r0, [sp, #6]
    ea2e:	8861      	ldrh	r1, [r4, #2]
    ea30:	f8dd 0009 	ldr.w	r0, [sp, #9]
    ea34:	f361 201f 	bfi	r0, r1, #8, #24
    ea38:	f8cd 0009 	str.w	r0, [sp, #9]
    ea3c:	7b60      	ldrb	r0, [r4, #13]
    ea3e:	f88d 000d 	strb.w	r0, [sp, #13]
    ea42:	7960      	ldrb	r0, [r4, #5]
    ea44:	f88d 000e 	strb.w	r0, [sp, #14]
    ea48:	79a0      	ldrb	r0, [r4, #6]
    ea4a:	f88d 000f 	strb.w	r0, [sp, #15]
    ea4e:	f8d4 0007 	ldr.w	r0, [r4, #7]
    ea52:	9004      	str	r0, [sp, #16]
    ea54:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    ea58:	f8ad 0014 	strh.w	r0, [sp, #20]
    ea5c:	7ba0      	ldrb	r0, [r4, #14]
    ea5e:	f88d 0016 	strb.w	r0, [sp, #22]
    ea62:	207f      	movs	r0, #127	; 0x7f
    ea64:	f88d 0017 	strb.w	r0, [sp, #23]
    ea68:	2001      	movs	r0, #1
    ea6a:	f88d 0018 	strb.w	r0, [sp, #24]
    ea6e:	f88d 5019 	strb.w	r5, [sp, #25]
    ea72:	f88d 001a 	strb.w	r0, [sp, #26]
    ea76:	f88d 501b 	strb.w	r5, [sp, #27]
    ea7a:	4610      	mov	r0, r2
    ea7c:	f7fe fff5 	bl	da6a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    ea80:	f88d 001c 	strb.w	r0, [sp, #28]
    ea84:	f88d 501d 	strb.w	r5, [sp, #29]
    ea88:	f88d 501e 	strb.w	r5, [sp, #30]
    ea8c:	a909      	add	r1, sp, #36	; 0x24
    ea8e:	a801      	add	r0, sp, #4
    ea90:	f000 f8de 	bl	ec50 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    ea94:	e79b      	b.n	e9ce <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    ea96:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
    ea9a:	2039      	movs	r0, #57	; 0x39
    ea9c:	f7f5 f920 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eaa0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    eaa0:	b570      	push	{r4, r5, r6, lr}
    eaa2:	4604      	mov	r4, r0
    eaa4:	7800      	ldrb	r0, [r0, #0]
    eaa6:	2101      	movs	r1, #1
    eaa8:	f7fd ff63 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eaac:	0005      	movs	r5, r0
    eaae:	d007      	beq.n	eac0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    eab0:	f7ff f994 	bl	dddc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    eab4:	b160      	cbz	r0, ead0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    eab6:	4628      	mov	r0, r5
    eab8:	f7fe ffc1 	bl	da3e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eabc:	b110      	cbz	r0, eac4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    eabe:	e005      	b.n	eacc <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    eac0:	2042      	movs	r0, #66	; 0x42
    eac2:	bd70      	pop	{r4, r5, r6, pc}
    eac4:	4628      	mov	r0, r5
    eac6:	f7fe ffb0 	bl	da2a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    eaca:	b108      	cbz	r0, ead0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    eacc:	200c      	movs	r0, #12
    eace:	bd70      	pop	{r4, r5, r6, pc}
    ead0:	1c61      	adds	r1, r4, #1
    ead2:	4628      	mov	r0, r5
    ead4:	f7fe ffc1 	bl	da5a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    ead8:	2000      	movs	r0, #0
    eada:	bd70      	pop	{r4, r5, r6, pc}

0000eadc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    eadc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eade:	460d      	mov	r5, r1
    eae0:	4604      	mov	r4, r0
    eae2:	f000 fc66 	bl	f3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    eae6:	b130      	cbz	r0, eaf6 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    eae8:	88a2      	ldrh	r2, [r4, #4]
    eaea:	f244 2090 	movw	r0, #17040	; 0x4290
    eaee:	4282      	cmp	r2, r0
    eaf0:	d903      	bls.n	eafa <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    eaf2:	2012      	movs	r0, #18
    eaf4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eaf6:	2001      	movs	r0, #1
    eaf8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eafa:	f640 0048 	movw	r0, #2120	; 0x848
    eafe:	4282      	cmp	r2, r0
    eb00:	d300      	bcc.n	eb04 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    eb02:	4602      	mov	r2, r0
    eb04:	8820      	ldrh	r0, [r4, #0]
    eb06:	f8ad 0000 	strh.w	r0, [sp]
    eb0a:	8860      	ldrh	r0, [r4, #2]
    eb0c:	f8ad 0002 	strh.w	r0, [sp, #2]
    eb10:	f8ad 2004 	strh.w	r2, [sp, #4]
    eb14:	8860      	ldrh	r0, [r4, #2]
    eb16:	f8ad 0006 	strh.w	r0, [sp, #6]
    eb1a:	f8ad 2008 	strh.w	r2, [sp, #8]
    eb1e:	8820      	ldrh	r0, [r4, #0]
    eb20:	8028      	strh	r0, [r5, #0]
    eb22:	4668      	mov	r0, sp
    eb24:	f7fb fae2 	bl	a0ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    eb28:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eb2a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    eb2a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eb2c:	4604      	mov	r4, r0
    eb2e:	f7fb fc0f 	bl	a350 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    eb32:	f3c0 2000 	ubfx	r0, r0, #8, #1
    eb36:	b1b0      	cbz	r0, eb66 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    eb38:	f10d 0007 	add.w	r0, sp, #7
    eb3c:	9000      	str	r0, [sp, #0]
    eb3e:	7922      	ldrb	r2, [r4, #4]
    eb40:	78e1      	ldrb	r1, [r4, #3]
    eb42:	78a0      	ldrb	r0, [r4, #2]
    eb44:	f10d 0306 	add.w	r3, sp, #6
    eb48:	f000 fc94 	bl	f474 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    eb4c:	2800      	cmp	r0, #0
    eb4e:	d109      	bne.n	eb64 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    eb50:	8820      	ldrh	r0, [r4, #0]
    eb52:	f8ad 0004 	strh.w	r0, [sp, #4]
    eb56:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    eb5a:	f8ad 0008 	strh.w	r0, [sp, #8]
    eb5e:	a801      	add	r0, sp, #4
    eb60:	f000 f9a6 	bl	eeb0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    eb64:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eb66:	2001      	movs	r0, #1
    eb68:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eb6a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    eb6a:	b510      	push	{r4, lr}
    eb6c:	4604      	mov	r4, r0
    eb6e:	f000 fc54 	bl	f41a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    eb72:	b120      	cbz	r0, eb7e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    eb74:	f7f6 fde4 	bl	5740 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eb78:	b108      	cbz	r0, eb7e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    eb7a:	200c      	movs	r0, #12
    eb7c:	bd10      	pop	{r4, pc}
    eb7e:	7820      	ldrb	r0, [r4, #0]
    eb80:	f7ff fd48 	bl	e614 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    eb84:	79e2      	ldrb	r2, [r4, #7]
    eb86:	1c61      	adds	r1, r4, #1
    eb88:	f7f6 fd88 	bl	569c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    eb8c:	b108      	cbz	r0, eb92 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    eb8e:	2000      	movs	r0, #0
    eb90:	bd10      	pop	{r4, pc}
    eb92:	2002      	movs	r0, #2
    eb94:	bd10      	pop	{r4, pc}

0000eb96 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    eb96:	b510      	push	{r4, lr}
    eb98:	4604      	mov	r4, r0
    eb9a:	2001      	movs	r0, #1
    eb9c:	f000 fac8 	bl	f130 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    eba0:	b128      	cbz	r0, ebae <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    eba2:	4621      	mov	r1, r4
    eba4:	2001      	movs	r0, #1
    eba6:	f7f5 ffb1 	bl	4b0c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ebaa:	2000      	movs	r0, #0
    ebac:	bd10      	pop	{r4, pc}
    ebae:	200c      	movs	r0, #12
    ebb0:	bd10      	pop	{r4, pc}

0000ebb2 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ebb2:	b510      	push	{r4, lr}
    ebb4:	8800      	ldrh	r0, [r0, #0]
    ebb6:	f7f6 fe51 	bl	585c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ebba:	b108      	cbz	r0, ebc0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ebbc:	2000      	movs	r0, #0
    ebbe:	bd10      	pop	{r4, pc}
    ebc0:	2030      	movs	r0, #48	; 0x30
    ebc2:	bd10      	pop	{r4, pc}

0000ebc4 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ebc4:	b51c      	push	{r2, r3, r4, lr}
    ebc6:	4604      	mov	r4, r0
    ebc8:	f000 fc10 	bl	f3ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    ebcc:	2000      	movs	r0, #0
    ebce:	f88d 0000 	strb.w	r0, [sp]
    ebd2:	f88d 0002 	strb.w	r0, [sp, #2]
    ebd6:	2003      	movs	r0, #3
    ebd8:	f88d 0001 	strb.w	r0, [sp, #1]
    ebdc:	f814 0b01 	ldrb.w	r0, [r4], #1
    ebe0:	f88d 0003 	strb.w	r0, [sp, #3]
    ebe4:	4668      	mov	r0, sp
    ebe6:	9401      	str	r4, [sp, #4]
    ebe8:	f000 f910 	bl	ee0c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    ebec:	bd1c      	pop	{r2, r3, r4, pc}

0000ebee <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    ebee:	b51c      	push	{r2, r3, r4, lr}
    ebf0:	4604      	mov	r4, r0
    ebf2:	f000 fbde 	bl	f3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ebf6:	b178      	cbz	r0, ec18 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    ebf8:	8820      	ldrh	r0, [r4, #0]
    ebfa:	f8ad 0000 	strh.w	r0, [sp]
    ebfe:	8860      	ldrh	r0, [r4, #2]
    ec00:	f8ad 0002 	strh.w	r0, [sp, #2]
    ec04:	8820      	ldrh	r0, [r4, #0]
    ec06:	f8ad 0004 	strh.w	r0, [sp, #4]
    ec0a:	8860      	ldrh	r0, [r4, #2]
    ec0c:	f8ad 0006 	strh.w	r0, [sp, #6]
    ec10:	4668      	mov	r0, sp
    ec12:	f7fb faef 	bl	a1f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    ec16:	bd1c      	pop	{r2, r3, r4, pc}
    ec18:	2001      	movs	r0, #1
    ec1a:	bd1c      	pop	{r2, r3, r4, pc}

0000ec1c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    ec1c:	b510      	push	{r4, lr}
    ec1e:	f7f5 ff99 	bl	4b54 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    ec22:	2000      	movs	r0, #0
    ec24:	bd10      	pop	{r4, pc}

0000ec26 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ec26:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ec28:	460c      	mov	r4, r1
    ec2a:	4605      	mov	r5, r0
    ec2c:	f000 fbc1 	bl	f3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ec30:	b160      	cbz	r0, ec4c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    ec32:	4669      	mov	r1, sp
    ec34:	4628      	mov	r0, r5
    ec36:	f7fe f8e4 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ec3a:	2800      	cmp	r0, #0
    ec3c:	d105      	bne.n	ec4a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    ec3e:	2100      	movs	r1, #0
    ec40:	4622      	mov	r2, r4
    ec42:	9801      	ldr	r0, [sp, #4]
    ec44:	f000 fb40 	bl	f2c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    ec48:	2000      	movs	r0, #0
    ec4a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ec4c:	2001      	movs	r0, #1
    ec4e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ec50 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    ec50:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ec54:	460f      	mov	r7, r1
    ec56:	4605      	mov	r5, r0
    ec58:	7806      	ldrb	r6, [r0, #0]
    ec5a:	f000 fac5 	bl	f1e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
    ec5e:	2800      	cmp	r0, #0
    ec60:	d10a      	bne.n	ec78 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ec62:	4628      	mov	r0, r5
    ec64:	f000 fa9a 	bl	f19c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
    ec68:	2800      	cmp	r0, #0
    ec6a:	d105      	bne.n	ec78 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ec6c:	2001      	movs	r0, #1
    ec6e:	f7f5 fa21 	bl	40b4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ec72:	4286      	cmp	r6, r0
    ec74:	d302      	bcc.n	ec7c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    ec76:	2007      	movs	r0, #7
    ec78:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ec7c:	2101      	movs	r1, #1
    ec7e:	4630      	mov	r0, r6
    ec80:	f7fd fe77 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec84:	0004      	movs	r4, r0
    ec86:	d004      	beq.n	ec92 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    ec88:	f7ff f8a8 	bl	dddc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ec8c:	b150      	cbz	r0, eca4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
    ec8e:	200c      	movs	r0, #12
    ec90:	e7f2      	b.n	ec78 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ec92:	2200      	movs	r2, #0
    ec94:	2101      	movs	r1, #1
    ec96:	4630      	mov	r0, r6
    ec98:	f7fd fe61 	bl	c95e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    ec9c:	0004      	movs	r4, r0
    ec9e:	d00f      	beq.n	ecc0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
    eca0:	f7fe fe68 	bl	d974 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    eca4:	4620      	mov	r0, r4
    eca6:	f7fe fece 	bl	da46 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    ecaa:	7038      	strb	r0, [r7, #0]
    ecac:	74e8      	strb	r0, [r5, #19]
    ecae:	4629      	mov	r1, r5
    ecb0:	4620      	mov	r0, r4
    ecb2:	f7f7 fc09 	bl	64c8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    ecb6:	4606      	mov	r6, r0
    ecb8:	7e68      	ldrb	r0, [r5, #25]
    ecba:	b1d0      	cbz	r0, ecf2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    ecbc:	b12e      	cbz	r6, ecca <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
    ecbe:	e018      	b.n	ecf2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    ecc0:	f241 212d 	movw	r1, #4653	; 0x122d
    ecc4:	2039      	movs	r0, #57	; 0x39
    ecc6:	f7f5 f80b 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecca:	2200      	movs	r2, #0
    eccc:	4668      	mov	r0, sp
    ecce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ecd0:	f7fd ff10 	bl	caf4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ecd4:	2200      	movs	r2, #0
    ecd6:	2101      	movs	r1, #1
    ecd8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ecda:	f7fd ff80 	bl	cbde <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ecde:	2204      	movs	r2, #4
    ece0:	4668      	mov	r0, sp
    ece2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ece4:	f7fd ff06 	bl	caf4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ece8:	2200      	movs	r2, #0
    ecea:	4611      	mov	r1, r2
    ecec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ecee:	f7fd ff76 	bl	cbde <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ecf2:	4630      	mov	r0, r6
    ecf4:	e7c0      	b.n	ec78 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000ecf6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    ecf6:	b510      	push	{r4, lr}
    ecf8:	4604      	mov	r4, r0
    ecfa:	2000      	movs	r0, #0
    ecfc:	f000 fa18 	bl	f130 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ed00:	b128      	cbz	r0, ed0e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    ed02:	4621      	mov	r1, r4
    ed04:	2000      	movs	r0, #0
    ed06:	f7f5 ff01 	bl	4b0c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ed0a:	2000      	movs	r0, #0
    ed0c:	bd10      	pop	{r4, pc}
    ed0e:	200c      	movs	r0, #12
    ed10:	bd10      	pop	{r4, pc}

0000ed12 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    ed12:	b510      	push	{r4, lr}
    ed14:	7800      	ldrb	r0, [r0, #0]
    ed16:	f000 0001 	and.w	r0, r0, #1
    ed1a:	f7f8 fb11 	bl	7340 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    ed1e:	2000      	movs	r0, #0
    ed20:	bd10      	pop	{r4, pc}

0000ed22 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    ed22:	b510      	push	{r4, lr}
    ed24:	4604      	mov	r4, r0
    ed26:	f000 fb44 	bl	f3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ed2a:	b120      	cbz	r0, ed36 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    ed2c:	4620      	mov	r0, r4
    ed2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed32:	f7fb b9db 	b.w	a0ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    ed36:	2001      	movs	r0, #1
    ed38:	bd10      	pop	{r4, pc}

0000ed3a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    ed3a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ed3e:	4606      	mov	r6, r0
    ed40:	7845      	ldrb	r5, [r0, #1]
    ed42:	7800      	ldrb	r0, [r0, #0]
    ed44:	2101      	movs	r1, #1
    ed46:	f7fd fe14 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed4a:	0004      	movs	r4, r0
    ed4c:	d01e      	beq.n	ed8c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    ed4e:	f7fe fe3d 	bl	d9cc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    ed52:	78f1      	ldrb	r1, [r6, #3]
    ed54:	4281      	cmp	r1, r0
    ed56:	d800      	bhi.n	ed5a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    ed58:	4608      	mov	r0, r1
    ed5a:	4607      	mov	r7, r0
    ed5c:	2d04      	cmp	r5, #4
    ed5e:	d018      	beq.n	ed92 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    ed60:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed62:	f7fd ff5f 	bl	cc24 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ed66:	4438      	add	r0, r7
    ed68:	b281      	uxth	r1, r0
    ed6a:	4620      	mov	r0, r4
    ed6c:	2201      	movs	r2, #1
    ed6e:	f000 f9f1 	bl	f154 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    ed72:	2800      	cmp	r0, #0
    ed74:	d10b      	bne.n	ed8e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ed76:	2d03      	cmp	r5, #3
    ed78:	d000      	beq.n	ed7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ed7a:	b1df      	cbz	r7, edb4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ed7c:	4620      	mov	r0, r4
    ed7e:	f7fe fe5c 	bl	da3a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ed82:	7871      	ldrb	r1, [r6, #1]
    ed84:	2903      	cmp	r1, #3
    ed86:	d010      	beq.n	edaa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ed88:	b9a0      	cbnz	r0, edb4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ed8a:	e004      	b.n	ed96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    ed8c:	2042      	movs	r0, #66	; 0x42
    ed8e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ed92:	b97f      	cbnz	r7, edb4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ed94:	e7f2      	b.n	ed7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ed96:	2904      	cmp	r1, #4
    ed98:	d107      	bne.n	edaa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ed9a:	4620      	mov	r0, r4
    ed9c:	f7ff f81e 	bl	dddc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    eda0:	b140      	cbz	r0, edb4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    eda2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    eda4:	f7fd ff0d 	bl	cbc2 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    eda8:	b120      	cbz	r0, edb4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    edaa:	2d01      	cmp	r5, #1
    edac:	d004      	beq.n	edb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    edae:	2d03      	cmp	r5, #3
    edb0:	d002      	beq.n	edb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    edb2:	e00e      	b.n	edd2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    edb4:	2012      	movs	r0, #18
    edb6:	e7ea      	b.n	ed8e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    edb8:	4620      	mov	r0, r4
    edba:	f7fe fe3e 	bl	da3a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    edbe:	b108      	cbz	r0, edc4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    edc0:	2200      	movs	r2, #0
    edc2:	e002      	b.n	edca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    edc4:	2d01      	cmp	r5, #1
    edc6:	d013      	beq.n	edf0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    edc8:	2201      	movs	r2, #1
    edca:	4668      	mov	r0, sp
    edcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    edce:	f7fd fe91 	bl	caf4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    edd2:	2d04      	cmp	r5, #4
    edd4:	d018      	beq.n	ee08 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    edd6:	6872      	ldr	r2, [r6, #4]
    edd8:	463b      	mov	r3, r7
    edda:	2101      	movs	r1, #1
    eddc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    edde:	f7fd febc 	bl	cb5a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    ede2:	b138      	cbz	r0, edf4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    ede4:	7870      	ldrb	r0, [r6, #1]
    ede6:	2802      	cmp	r0, #2
    ede8:	d006      	beq.n	edf8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    edea:	2803      	cmp	r0, #3
    edec:	d004      	beq.n	edf8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    edee:	e00b      	b.n	ee08 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    edf0:	2202      	movs	r2, #2
    edf2:	e7ea      	b.n	edca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    edf4:	2007      	movs	r0, #7
    edf6:	e7ca      	b.n	ed8e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    edf8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    edfa:	f7fd ff13 	bl	cc24 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    edfe:	4602      	mov	r2, r0
    ee00:	2101      	movs	r1, #1
    ee02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ee04:	f7fd feeb 	bl	cbde <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ee08:	2000      	movs	r0, #0
    ee0a:	e7c0      	b.n	ed8e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000ee0c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    ee0c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ee10:	4607      	mov	r7, r0
    ee12:	7845      	ldrb	r5, [r0, #1]
    ee14:	78c6      	ldrb	r6, [r0, #3]
    ee16:	7800      	ldrb	r0, [r0, #0]
    ee18:	2101      	movs	r1, #1
    ee1a:	f7fd fdaa 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee1e:	0004      	movs	r4, r0
    ee20:	d003      	beq.n	ee2a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    ee22:	f7fe fe0c 	bl	da3e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ee26:	b118      	cbz	r0, ee30 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    ee28:	e003      	b.n	ee32 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    ee2a:	2042      	movs	r0, #66	; 0x42
    ee2c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ee30:	2600      	movs	r6, #0
    ee32:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ee34:	f7fd fefa 	bl	cc2c <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    ee38:	4430      	add	r0, r6
    ee3a:	b281      	uxth	r1, r0
    ee3c:	4688      	mov	r8, r1
    ee3e:	4620      	mov	r0, r4
    ee40:	2201      	movs	r2, #1
    ee42:	f000 f987 	bl	f154 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    ee46:	2800      	cmp	r0, #0
    ee48:	d1f0      	bne.n	ee2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ee4a:	2d04      	cmp	r5, #4
    ee4c:	d008      	beq.n	ee60 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ee4e:	2d03      	cmp	r5, #3
    ee50:	d00a      	beq.n	ee68 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    ee52:	b12e      	cbz	r6, ee60 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ee54:	4620      	mov	r0, r4
    ee56:	f7fe ffc1 	bl	dddc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ee5a:	b118      	cbz	r0, ee64 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    ee5c:	200c      	movs	r0, #12
    ee5e:	e7e5      	b.n	ee2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ee60:	2012      	movs	r0, #18
    ee62:	e7e3      	b.n	ee2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ee64:	2d01      	cmp	r5, #1
    ee66:	d10c      	bne.n	ee82 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    ee68:	4620      	mov	r0, r4
    ee6a:	f7fe fde6 	bl	da3a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ee6e:	b108      	cbz	r0, ee74 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    ee70:	2204      	movs	r2, #4
    ee72:	e002      	b.n	ee7a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    ee74:	2d01      	cmp	r5, #1
    ee76:	d010      	beq.n	ee9a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    ee78:	2205      	movs	r2, #5
    ee7a:	4668      	mov	r0, sp
    ee7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ee7e:	f7fd fe39 	bl	caf4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ee82:	687a      	ldr	r2, [r7, #4]
    ee84:	4633      	mov	r3, r6
    ee86:	2100      	movs	r1, #0
    ee88:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ee8a:	f7fd fe66 	bl	cb5a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    ee8e:	b130      	cbz	r0, ee9e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    ee90:	2d02      	cmp	r5, #2
    ee92:	d006      	beq.n	eea2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ee94:	2d03      	cmp	r5, #3
    ee96:	d004      	beq.n	eea2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ee98:	e008      	b.n	eeac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    ee9a:	2206      	movs	r2, #6
    ee9c:	e7ed      	b.n	ee7a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    ee9e:	2007      	movs	r0, #7
    eea0:	e7c4      	b.n	ee2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    eea2:	4642      	mov	r2, r8
    eea4:	2100      	movs	r1, #0
    eea6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    eea8:	f7fd fe99 	bl	cbde <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eeac:	2000      	movs	r0, #0
    eeae:	e7bd      	b.n	ee2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000eeb0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    eeb0:	b510      	push	{r4, lr}
    eeb2:	4604      	mov	r4, r0
    eeb4:	8880      	ldrh	r0, [r0, #4]
    eeb6:	b128      	cbz	r0, eec4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eeb8:	2801      	cmp	r0, #1
    eeba:	d003      	beq.n	eec4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eebc:	2802      	cmp	r0, #2
    eebe:	d001      	beq.n	eec4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eec0:	2012      	movs	r0, #18
    eec2:	bd10      	pop	{r4, pc}
    eec4:	78e0      	ldrb	r0, [r4, #3]
    eec6:	f000 f9dc 	bl	f282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    eeca:	b148      	cbz	r0, eee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    eecc:	78a0      	ldrb	r0, [r4, #2]
    eece:	f000 f9d8 	bl	f282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    eed2:	b128      	cbz	r0, eee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    eed4:	4620      	mov	r0, r4
    eed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eeda:	2101      	movs	r1, #1
    eedc:	f000 b884 	b.w	efe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    eee0:	2011      	movs	r0, #17
    eee2:	bd10      	pop	{r4, pc}

0000eee4 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    eee4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eee6:	460c      	mov	r4, r1
    eee8:	4605      	mov	r5, r0
    eeea:	8800      	ldrh	r0, [r0, #0]
    eeec:	4669      	mov	r1, sp
    eeee:	f7fd ff88 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eef2:	2800      	cmp	r0, #0
    eef4:	d106      	bne.n	ef04 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    eef6:	9801      	ldr	r0, [sp, #4]
    eef8:	8829      	ldrh	r1, [r5, #0]
    eefa:	8021      	strh	r1, [r4, #0]
    eefc:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    ef00:	8060      	strh	r0, [r4, #2]
    ef02:	2000      	movs	r0, #0
    ef04:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ef06 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    ef06:	b510      	push	{r4, lr}
    ef08:	4604      	mov	r4, r0
    ef0a:	4601      	mov	r1, r0
    ef0c:	2000      	movs	r0, #0
    ef0e:	f7f5 fde5 	bl	4adc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ef12:	b910      	cbnz	r0, ef1a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    ef14:	2000      	movs	r0, #0
    ef16:	6020      	str	r0, [r4, #0]
    ef18:	80a0      	strh	r0, [r4, #4]
    ef1a:	2000      	movs	r0, #0
    ef1c:	bd10      	pop	{r4, pc}

0000ef1e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    ef1e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef20:	8800      	ldrh	r0, [r0, #0]
    ef22:	4669      	mov	r1, sp
    ef24:	f7fd ff6d 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef28:	b958      	cbnz	r0, ef42 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ef2a:	4668      	mov	r0, sp
    ef2c:	f000 fa47 	bl	f3be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    ef30:	b138      	cbz	r0, ef42 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ef32:	9c01      	ldr	r4, [sp, #4]
    ef34:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
    ef38:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    ef3c:	3470      	adds	r4, #112	; 0x70
    ef3e:	b929      	cbnz	r1, ef4c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    ef40:	e001      	b.n	ef46 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ef42:	2002      	movs	r0, #2
    ef44:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    ef4a:	b109      	cbz	r1, ef50 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ef4c:	203a      	movs	r0, #58	; 0x3a
    ef4e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef50:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    ef54:	f04f 0501 	mov.w	r5, #1
    ef58:	0789      	lsls	r1, r1, #30
    ef5a:	d103      	bne.n	ef64 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    ef5c:	7005      	strb	r5, [r0, #0]
    ef5e:	4668      	mov	r0, sp
    ef60:	f7fe fae7 	bl	d532 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ef64:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    ef68:	2000      	movs	r0, #0
    ef6a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ef6c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    ef6c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef6e:	460c      	mov	r4, r1
    ef70:	4605      	mov	r5, r0
    ef72:	8800      	ldrh	r0, [r0, #0]
    ef74:	4669      	mov	r1, sp
    ef76:	f7fd ff44 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef7a:	b108      	cbz	r0, ef80 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    ef7c:	2002      	movs	r0, #2
    ef7e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef80:	78a8      	ldrb	r0, [r5, #2]
    ef82:	b130      	cbz	r0, ef92 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    ef84:	f000 f9f6 	bl	f374 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    ef88:	70a0      	strb	r0, [r4, #2]
    ef8a:	8828      	ldrh	r0, [r5, #0]
    ef8c:	8020      	strh	r0, [r4, #0]
    ef8e:	2000      	movs	r0, #0
    ef90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef92:	9801      	ldr	r0, [sp, #4]
    ef94:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    ef98:	e7f6      	b.n	ef88 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000ef9a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    ef9a:	b510      	push	{r4, lr}
    ef9c:	f7fb f964 	bl	a268 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    efa0:	2000      	movs	r0, #0
    efa2:	bd10      	pop	{r4, pc}

0000efa4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    efa4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    efa8:	4604      	mov	r4, r0
    efaa:	8840      	ldrh	r0, [r0, #2]
    efac:	460d      	mov	r5, r1
    efae:	b1b8      	cbz	r0, efe0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    efb0:	8820      	ldrh	r0, [r4, #0]
    efb2:	4669      	mov	r1, sp
    efb4:	f7fd ff25 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efb8:	2800      	cmp	r0, #0
    efba:	d10f      	bne.n	efdc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    efbc:	8820      	ldrh	r0, [r4, #0]
    efbe:	8028      	strh	r0, [r5, #0]
    efc0:	9e01      	ldr	r6, [sp, #4]
    efc2:	f106 050c 	add.w	r5, r6, #12
    efc6:	3670      	adds	r6, #112	; 0x70
    efc8:	682f      	ldr	r7, [r5, #0]
    efca:	8862      	ldrh	r2, [r4, #2]
    efcc:	4639      	mov	r1, r7
    efce:	4630      	mov	r0, r6
    efd0:	f7fe f858 	bl	d084 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    efd4:	6828      	ldr	r0, [r5, #0]
    efd6:	42b8      	cmp	r0, r7
    efd8:	d1f6      	bne.n	efc8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    efda:	2000      	movs	r0, #0
    efdc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    efe0:	2012      	movs	r0, #18
    efe2:	e7fb      	b.n	efdc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000efe4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    efe4:	f7fa bf18 	b.w	9e18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000efe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    efe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efec:	b086      	sub	sp, #24
    efee:	468a      	mov	sl, r1
    eff0:	4606      	mov	r6, r0
    eff2:	8800      	ldrh	r0, [r0, #0]
    eff4:	a901      	add	r1, sp, #4
    eff6:	f7fd ff04 	bl	ce02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    effa:	2800      	cmp	r0, #0
    effc:	d138      	bne.n	f070 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    effe:	9802      	ldr	r0, [sp, #8]
    f000:	f04f 0800 	mov.w	r8, #0
    f004:	4601      	mov	r1, r0
    f006:	4689      	mov	r9, r1
    f008:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    f00c:	f88d 1000 	strb.w	r1, [sp]
    f010:	9900      	ldr	r1, [sp, #0]
    f012:	9100      	str	r1, [sp, #0]
    f014:	f89d 5000 	ldrb.w	r5, [sp]
    f018:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f01c:	3070      	adds	r0, #112	; 0x70
    f01e:	2921      	cmp	r1, #33	; 0x21
    f020:	d100      	bne.n	f024 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    f022:	b13d      	cbz	r5, f034 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    f024:	2400      	movs	r4, #0
    f026:	304c      	adds	r0, #76	; 0x4c
    f028:	2108      	movs	r1, #8
    f02a:	4607      	mov	r7, r0
    f02c:	f7ff fae8 	bl	e600 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f030:	b110      	cbz	r0, f038 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f032:	e007      	b.n	f044 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f034:	2401      	movs	r4, #1
    f036:	e7f6      	b.n	f026 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f038:	210b      	movs	r1, #11
    f03a:	4638      	mov	r0, r7
    f03c:	f7ff fae0 	bl	e600 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f040:	b900      	cbnz	r0, f044 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f042:	b1a4      	cbz	r4, f06e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f044:	a804      	add	r0, sp, #16
    f046:	9000      	str	r0, [sp, #0]
    f048:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f04c:	ab03      	add	r3, sp, #12
    f04e:	4632      	mov	r2, r6
    f050:	4649      	mov	r1, r9
    f052:	f000 f96f 	bl	f334 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    f056:	0007      	movs	r7, r0
    f058:	d10a      	bne.n	f070 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f05a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f05e:	9c02      	ldr	r4, [sp, #8]
    f060:	b148      	cbz	r0, f076 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f062:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
    f066:	2001      	movs	r0, #1
    f068:	7060      	strb	r0, [r4, #1]
    f06a:	b94d      	cbnz	r5, f080 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f06c:	e006      	b.n	f07c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f06e:	201a      	movs	r0, #26
    f070:	b006      	add	sp, #24
    f072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f076:	f504 7497 	add.w	r4, r4, #302	; 0x12e
    f07a:	e7f4      	b.n	f066 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f07c:	7820      	ldrb	r0, [r4, #0]
    f07e:	b108      	cbz	r0, f084 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f080:	273a      	movs	r7, #58	; 0x3a
    f082:	e012      	b.n	f0aa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f084:	f884 a000 	strb.w	sl, [r4]
    f088:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f08c:	70a0      	strb	r0, [r4, #2]
    f08e:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f092:	70e1      	strb	r1, [r4, #3]
    f094:	f88d 0000 	strb.w	r0, [sp]
    f098:	f88d 1001 	strb.w	r1, [sp, #1]
    f09c:	88b0      	ldrh	r0, [r6, #4]
    f09e:	f8ad 0002 	strh.w	r0, [sp, #2]
    f0a2:	4669      	mov	r1, sp
    f0a4:	4648      	mov	r0, r9
    f0a6:	f7fd ff6b 	bl	cf80 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f0aa:	f884 8001 	strb.w	r8, [r4, #1]
    f0ae:	4638      	mov	r0, r7
    f0b0:	e7de      	b.n	f070 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f0b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f0b2:	b510      	push	{r4, lr}
    f0b4:	2008      	movs	r0, #8
    f0b6:	f7fb f941 	bl	a33c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0be:	f7f8 beb9 	b.w	7e34 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f0c2:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f0c6:	4288      	cmp	r0, r1
    f0c8:	d303      	bcc.n	f0d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f0ca:	f640 0148 	movw	r1, #2120	; 0x848
    f0ce:	4288      	cmp	r0, r1
    f0d0:	d300      	bcc.n	f0d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f0d2:	4608      	mov	r0, r1
    f0d4:	4770      	bx	lr
    f0d6:	07c1      	lsls	r1, r0, #31
    f0d8:	d001      	beq.n	f0de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f0da:	2001      	movs	r0, #1
    f0dc:	4770      	bx	lr
    f0de:	0780      	lsls	r0, r0, #30
    f0e0:	d501      	bpl.n	f0e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f0e2:	2002      	movs	r0, #2
    f0e4:	4770      	bx	lr
    f0e6:	2000      	movs	r0, #0
    f0e8:	4770      	bx	lr
    f0ea:	b510      	push	{r4, lr}
    f0ec:	2801      	cmp	r0, #1
    f0ee:	d006      	beq.n	f0fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f0f0:	2802      	cmp	r0, #2
    f0f2:	d004      	beq.n	f0fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f0f4:	f240 2163 	movw	r1, #611	; 0x263
    f0f8:	2006      	movs	r0, #6
    f0fa:	f7f4 fdf1 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0fe:	bd10      	pop	{r4, pc}
    f100:	b50e      	push	{r1, r2, r3, lr}
    f102:	4669      	mov	r1, sp
    f104:	2001      	movs	r0, #1
    f106:	f7fd fc3e 	bl	c986 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f10a:	b150      	cbz	r0, f122 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f10c:	f240 114f 	movw	r1, #335	; 0x14f
    f110:	2039      	movs	r0, #57	; 0x39
    f112:	f7f4 fde5 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f116:	9802      	ldr	r0, [sp, #8]
    f118:	f7fe fe60 	bl	dddc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f11c:	b108      	cbz	r0, f122 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f11e:	2001      	movs	r0, #1
    f120:	bd0e      	pop	{r1, r2, r3, pc}
    f122:	4668      	mov	r0, sp
    f124:	f7f5 f814 	bl	4150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f128:	2800      	cmp	r0, #0
    f12a:	d0f4      	beq.n	f116 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f12c:	2000      	movs	r0, #0
    f12e:	bd0e      	pop	{r1, r2, r3, pc}
    f130:	b510      	push	{r4, lr}
    f132:	f7ff ffe5 	bl	f100 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f136:	b158      	cbz	r0, f150 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f138:	f000 f958 	bl	f3ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f13c:	4604      	mov	r4, r0
    f13e:	f7fe fc7e 	bl	da3e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f142:	b918      	cbnz	r0, f14c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f144:	4620      	mov	r0, r4
    f146:	f7fe fc70 	bl	da2a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f14a:	b108      	cbz	r0, f150 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f14c:	2000      	movs	r0, #0
    f14e:	bd10      	pop	{r4, pc}
    f150:	2001      	movs	r0, #1
    f152:	bd10      	pop	{r4, pc}
    f154:	b570      	push	{r4, r5, r6, lr}
    f156:	460c      	mov	r4, r1
    f158:	4605      	mov	r5, r0
    f15a:	b112      	cbz	r2, f162 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    f15c:	291f      	cmp	r1, #31
    f15e:	d80c      	bhi.n	f17a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
    f160:	e016      	b.n	f190 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    f162:	f7f5 fabb 	bl	46dc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    f166:	42a0      	cmp	r0, r4
    f168:	d201      	bcs.n	f16e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
    f16a:	2007      	movs	r0, #7
    f16c:	bd70      	pop	{r4, r5, r6, pc}
    f16e:	4628      	mov	r0, r5
    f170:	f7fe fc63 	bl	da3a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f174:	b118      	cbz	r0, f17e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f176:	2c1f      	cmp	r4, #31
    f178:	d901      	bls.n	f17e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f17a:	2012      	movs	r0, #18
    f17c:	bd70      	pop	{r4, r5, r6, pc}
    f17e:	4628      	mov	r0, r5
    f180:	f7fe fc64 	bl	da4c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f184:	b130      	cbz	r0, f194 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
    f186:	4621      	mov	r1, r4
    f188:	4628      	mov	r0, r5
    f18a:	f7fe fc2b 	bl	d9e4 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f18e:	b118      	cbz	r0, f198 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
    f190:	2000      	movs	r0, #0
    f192:	bd70      	pop	{r4, r5, r6, pc}
    f194:	2042      	movs	r0, #66	; 0x42
    f196:	bd70      	pop	{r4, r5, r6, pc}
    f198:	2045      	movs	r0, #69	; 0x45
    f19a:	bd70      	pop	{r4, r5, r6, pc}
    f19c:	b510      	push	{r4, lr}
    f19e:	4604      	mov	r4, r0
    f1a0:	7840      	ldrb	r0, [r0, #1]
    f1a2:	06c1      	lsls	r1, r0, #27
    f1a4:	d51c      	bpl.n	f1e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f1a6:	07c0      	lsls	r0, r0, #31
    f1a8:	d00b      	beq.n	f1c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f1aa:	f7fb f89b 	bl	a2e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f1ae:	b1b8      	cbz	r0, f1e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f1b0:	7860      	ldrb	r0, [r4, #1]
    f1b2:	06c1      	lsls	r1, r0, #27
    f1b4:	d405      	bmi.n	f1c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f1b6:	0700      	lsls	r0, r0, #28
    f1b8:	d503      	bpl.n	f1c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f1ba:	7d20      	ldrb	r0, [r4, #20]
    f1bc:	2802      	cmp	r0, #2
    f1be:	d10f      	bne.n	f1e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f1c0:	e010      	b.n	f1e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f1c2:	7d20      	ldrb	r0, [r4, #20]
    f1c4:	2802      	cmp	r0, #2
    f1c6:	d001      	beq.n	f1cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
    f1c8:	7ea0      	ldrb	r0, [r4, #26]
    f1ca:	b948      	cbnz	r0, f1e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f1cc:	7860      	ldrb	r0, [r4, #1]
    f1ce:	0700      	lsls	r0, r0, #28
    f1d0:	d408      	bmi.n	f1e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f1d2:	f8d4 0005 	ldr.w	r0, [r4, #5]
    f1d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f1da:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    f1de:	d201      	bcs.n	f1e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f1e0:	2011      	movs	r0, #17
    f1e2:	bd10      	pop	{r4, pc}
    f1e4:	2000      	movs	r0, #0
    f1e6:	bd10      	pop	{r4, pc}
    f1e8:	b538      	push	{r3, r4, r5, lr}
    f1ea:	4604      	mov	r4, r0
    f1ec:	7800      	ldrb	r0, [r0, #0]
    f1ee:	28ef      	cmp	r0, #239	; 0xef
    f1f0:	d843      	bhi.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f1f2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f1f6:	f8ad 0000 	strh.w	r0, [sp]
    f1fa:	9800      	ldr	r0, [sp, #0]
    f1fc:	f000 f951 	bl	f4a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    f200:	b3a0      	cbz	r0, f26c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    f202:	7861      	ldrb	r1, [r4, #1]
    f204:	0708      	lsls	r0, r1, #28
    f206:	d40b      	bmi.n	f220 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
    f208:	f8d4 0002 	ldr.w	r0, [r4, #2]
    f20c:	f8d4 3005 	ldr.w	r3, [r4, #5]
    f210:	0a02      	lsrs	r2, r0, #8
    f212:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    f216:	d830      	bhi.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f218:	2220      	movs	r2, #32
    f21a:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    f21e:	d82c      	bhi.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f220:	7a60      	ldrb	r0, [r4, #9]
    f222:	b318      	cbz	r0, f26c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    f224:	2807      	cmp	r0, #7
    f226:	d828      	bhi.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f228:	7aa0      	ldrb	r0, [r4, #10]
    f22a:	b128      	cbz	r0, f238 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f22c:	2801      	cmp	r0, #1
    f22e:	d003      	beq.n	f238 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f230:	2802      	cmp	r0, #2
    f232:	d001      	beq.n	f238 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f234:	2803      	cmp	r0, #3
    f236:	d120      	bne.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f238:	074a      	lsls	r2, r1, #29
    f23a:	d403      	bmi.n	f244 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    f23c:	2802      	cmp	r0, #2
    f23e:	d001      	beq.n	f244 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    f240:	2803      	cmp	r0, #3
    f242:	d105      	bne.n	f250 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
    f244:	7ae0      	ldrb	r0, [r4, #11]
    f246:	b108      	cbz	r0, f24c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f248:	2801      	cmp	r0, #1
    f24a:	d116      	bne.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f24c:	0748      	lsls	r0, r1, #29
    f24e:	d407      	bmi.n	f260 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f250:	7ca0      	ldrb	r0, [r4, #18]
    f252:	b128      	cbz	r0, f260 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f254:	2801      	cmp	r0, #1
    f256:	d003      	beq.n	f260 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f258:	2802      	cmp	r0, #2
    f25a:	d001      	beq.n	f260 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f25c:	2803      	cmp	r0, #3
    f25e:	d10c      	bne.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f260:	06c8      	lsls	r0, r1, #27
    f262:	7d20      	ldrb	r0, [r4, #20]
    f264:	d503      	bpl.n	f26e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
    f266:	2801      	cmp	r0, #1
    f268:	d107      	bne.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f26a:	e002      	b.n	f272 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    f26c:	e005      	b.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f26e:	2802      	cmp	r0, #2
    f270:	d003      	beq.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f272:	7e20      	ldrb	r0, [r4, #24]
    f274:	b118      	cbz	r0, f27e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    f276:	2801      	cmp	r0, #1
    f278:	d001      	beq.n	f27e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    f27a:	2012      	movs	r0, #18
    f27c:	bd38      	pop	{r3, r4, r5, pc}
    f27e:	2000      	movs	r0, #0
    f280:	bd38      	pop	{r3, r4, r5, pc}
    f282:	b510      	push	{r4, lr}
    f284:	0004      	movs	r4, r0
    f286:	d005      	beq.n	f294 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f288:	f7fb f868 	bl	a35c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f28c:	4384      	bics	r4, r0
    f28e:	d001      	beq.n	f294 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f290:	2000      	movs	r0, #0
    f292:	bd10      	pop	{r4, pc}
    f294:	2001      	movs	r0, #1
    f296:	bd10      	pop	{r4, pc}
    f298:	28fb      	cmp	r0, #251	; 0xfb
    f29a:	d803      	bhi.n	f2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    f29c:	f640 0048 	movw	r0, #2120	; 0x848
    f2a0:	4281      	cmp	r1, r0
    f2a2:	d901      	bls.n	f2a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f2a4:	2011      	movs	r0, #17
    f2a6:	4770      	bx	lr
    f2a8:	2000      	movs	r0, #0
    f2aa:	4770      	bx	lr
    f2ac:	381b      	subs	r0, #27
    f2ae:	28e1      	cmp	r0, #225	; 0xe1
    f2b0:	d206      	bcs.n	f2c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    f2b2:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f2b6:	d303      	bcc.n	f2c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    f2b8:	f244 2090 	movw	r0, #17040	; 0x4290
    f2bc:	4281      	cmp	r1, r0
    f2be:	d901      	bls.n	f2c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
    f2c0:	2012      	movs	r0, #18
    f2c2:	4770      	bx	lr
    f2c4:	2000      	movs	r0, #0
    f2c6:	4770      	bx	lr
    f2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2cc:	4606      	mov	r6, r0
    f2ce:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f2d2:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f2d6:	4615      	mov	r5, r2
    f2d8:	302c      	adds	r0, #44	; 0x2c
    f2da:	f7f8 f837 	bl	734c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    f2de:	4680      	mov	r8, r0
    f2e0:	2102      	movs	r1, #2
    f2e2:	f7fd fe1e 	bl	cf22 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f2e6:	4287      	cmp	r7, r0
    f2e8:	d200      	bcs.n	f2ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
    f2ea:	4638      	mov	r0, r7
    f2ec:	4607      	mov	r7, r0
    f2ee:	2102      	movs	r1, #2
    f2f0:	4640      	mov	r0, r8
    f2f2:	f7fd fe16 	bl	cf22 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f2f6:	4284      	cmp	r4, r0
    f2f8:	d200      	bcs.n	f2fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
    f2fa:	4620      	mov	r0, r4
    f2fc:	8831      	ldrh	r1, [r6, #0]
    f2fe:	8029      	strh	r1, [r5, #0]
    f300:	2f1b      	cmp	r7, #27
    f302:	d913      	bls.n	f32c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
    f304:	2ffb      	cmp	r7, #251	; 0xfb
    f306:	d300      	bcc.n	f30a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    f308:	27fb      	movs	r7, #251	; 0xfb
    f30a:	806f      	strh	r7, [r5, #2]
    f30c:	281b      	cmp	r0, #27
    f30e:	d90f      	bls.n	f330 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    f310:	28fb      	cmp	r0, #251	; 0xfb
    f312:	d300      	bcc.n	f316 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    f314:	20fb      	movs	r0, #251	; 0xfb
    f316:	80e8      	strh	r0, [r5, #6]
    f318:	4640      	mov	r0, r8
    f31a:	f7ff fed2 	bl	f0c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f31e:	80a8      	strh	r0, [r5, #4]
    f320:	4640      	mov	r0, r8
    f322:	f7ff fece 	bl	f0c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f326:	8128      	strh	r0, [r5, #8]
    f328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f32c:	271b      	movs	r7, #27
    f32e:	e7ec      	b.n	f30a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    f330:	201b      	movs	r0, #27
    f332:	e7f0      	b.n	f316 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    f334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f338:	7890      	ldrb	r0, [r2, #2]
    f33a:	9e06      	ldr	r6, [sp, #24]
    f33c:	461d      	mov	r5, r3
    f33e:	4614      	mov	r4, r2
    f340:	b908      	cbnz	r0, f346 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
    f342:	f7fb f80b 	bl	a35c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f346:	78e4      	ldrb	r4, [r4, #3]
    f348:	4607      	mov	r7, r0
    f34a:	b914      	cbnz	r4, f352 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
    f34c:	f7fb f806 	bl	a35c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f350:	4604      	mov	r4, r0
    f352:	b16f      	cbz	r7, f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f354:	b164      	cbz	r4, f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f356:	4638      	mov	r0, r7
    f358:	f7ff febd 	bl	f0d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f35c:	4620      	mov	r0, r4
    f35e:	f7ff feba 	bl	f0d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f362:	b12f      	cbz	r7, f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f364:	b124      	cbz	r4, f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f366:	702f      	strb	r7, [r5, #0]
    f368:	7034      	strb	r4, [r6, #0]
    f36a:	2000      	movs	r0, #0
    f36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f370:	2009      	movs	r0, #9
    f372:	e7fb      	b.n	f36c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
    f374:	b510      	push	{r4, lr}
    f376:	f7fc faa5 	bl	b8c4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f37a:	b928      	cbnz	r0, f388 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
    f37c:	f7fc fad8 	bl	b930 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f380:	b910      	cbnz	r0, f388 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
    f382:	f7fc fadf 	bl	b944 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f386:	b108      	cbz	r0, f38c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
    f388:	2008      	movs	r0, #8
    f38a:	bd10      	pop	{r4, pc}
    f38c:	f7fc fa6f 	bl	b86e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f390:	b940      	cbnz	r0, f3a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f392:	f7fc fa76 	bl	b882 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f396:	b928      	cbnz	r0, f3a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f398:	f7fc fa8a 	bl	b8b0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f39c:	b910      	cbnz	r0, f3a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f39e:	f7fc fa9b 	bl	b8d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f3a2:	b108      	cbz	r0, f3a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    f3a4:	2004      	movs	r0, #4
    f3a6:	bd10      	pop	{r4, pc}
    f3a8:	f240 519c 	movw	r1, #1436	; 0x59c
    f3ac:	2039      	movs	r0, #57	; 0x39
    f3ae:	f7f4 fc97 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3b2:	b510      	push	{r4, lr}
    f3b4:	f7fa ffcc 	bl	a350 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f3b8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f3bc:	bd10      	pop	{r4, pc}
    f3be:	6840      	ldr	r0, [r0, #4]
    f3c0:	f000 b800 	b.w	f3c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    f3c4:	b508      	push	{r3, lr}
    f3c6:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    f3ca:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
    f3ce:	f88d 0000 	strb.w	r0, [sp]
    f3d2:	9800      	ldr	r0, [sp, #0]
    f3d4:	9000      	str	r0, [sp, #0]
    f3d6:	f89d 0000 	ldrb.w	r0, [sp]
    f3da:	1e40      	subs	r0, r0, #1
    f3dc:	4208      	tst	r0, r1
    f3de:	d003      	beq.n	f3e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
    f3e0:	2904      	cmp	r1, #4
    f3e2:	d001      	beq.n	f3e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
    f3e4:	2001      	movs	r0, #1
    f3e6:	bd08      	pop	{r3, pc}
    f3e8:	2000      	movs	r0, #0
    f3ea:	bd08      	pop	{r3, pc}
    f3ec:	b510      	push	{r4, lr}
    f3ee:	2101      	movs	r1, #1
    f3f0:	2000      	movs	r0, #0
    f3f2:	f7fd fabe 	bl	c972 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f3f6:	0004      	movs	r4, r0
    f3f8:	d108      	bne.n	f40c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35a>
    f3fa:	2200      	movs	r2, #0
    f3fc:	2101      	movs	r1, #1
    f3fe:	4610      	mov	r0, r2
    f400:	f7fd faad 	bl	c95e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f404:	0004      	movs	r4, r0
    f406:	d003      	beq.n	f410 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35e>
    f408:	f7fe fab4 	bl	d974 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f40c:	4620      	mov	r0, r4
    f40e:	bd10      	pop	{r4, pc}
    f410:	f240 2135 	movw	r1, #565	; 0x235
    f414:	2039      	movs	r0, #57	; 0x39
    f416:	f7f4 fc63 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f41a:	b510      	push	{r4, lr}
    f41c:	f7ff fe70 	bl	f100 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f420:	2800      	cmp	r0, #0
    f422:	d000      	beq.n	f426 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x374>
    f424:	2001      	movs	r0, #1
    f426:	bd10      	pop	{r4, pc}
    f428:	b570      	push	{r4, r5, r6, lr}
    f42a:	4605      	mov	r5, r0
    f42c:	f7fe fb0e 	bl	da4c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f430:	b170      	cbz	r0, f450 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
    f432:	4628      	mov	r0, r5
    f434:	f7fe fcd2 	bl	dddc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f438:	2800      	cmp	r0, #0
    f43a:	d008      	beq.n	f44e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
    f43c:	4628      	mov	r0, r5
    f43e:	f7fe fcca 	bl	ddd6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    f442:	4604      	mov	r4, r0
    f444:	4628      	mov	r0, r5
    f446:	f7fe fca0 	bl	dd8a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    f44a:	b118      	cbz	r0, f454 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
    f44c:	200c      	movs	r0, #12
    f44e:	bd70      	pop	{r4, r5, r6, pc}
    f450:	2042      	movs	r0, #66	; 0x42
    f452:	bd70      	pop	{r4, r5, r6, pc}
    f454:	b164      	cbz	r4, f470 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    f456:	8820      	ldrh	r0, [r4, #0]
    f458:	f7fd fc13 	bl	cc82 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f45c:	8820      	ldrh	r0, [r4, #0]
    f45e:	2100      	movs	r1, #0
    f460:	f7f4 fec6 	bl	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f464:	b120      	cbz	r0, f470 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    f466:	f241 41ca 	movw	r1, #5322	; 0x14ca
    f46a:	2039      	movs	r0, #57	; 0x39
    f46c:	f7f4 fc38 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f470:	2000      	movs	r0, #0
    f472:	bd70      	pop	{r4, r5, r6, pc}
    f474:	b530      	push	{r4, r5, lr}
    f476:	f340 0400 	sbfx	r4, r0, #0, #1
    f47a:	f340 0040 	sbfx	r0, r0, #1, #1
    f47e:	1c40      	adds	r0, r0, #1
    f480:	9d03      	ldr	r5, [sp, #12]
    f482:	1c64      	adds	r4, r4, #1
    f484:	d000      	beq.n	f488 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
    f486:	b119      	cbz	r1, f490 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    f488:	b100      	cbz	r0, f48c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
    f48a:	b10a      	cbz	r2, f490 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    f48c:	b91c      	cbnz	r4, f496 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
    f48e:	e001      	b.n	f494 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
    f490:	2011      	movs	r0, #17
    f492:	bd30      	pop	{r4, r5, pc}
    f494:	2100      	movs	r1, #0
    f496:	7019      	strb	r1, [r3, #0]
    f498:	b900      	cbnz	r0, f49c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
    f49a:	2200      	movs	r2, #0
    f49c:	702a      	strb	r2, [r5, #0]
    f49e:	2000      	movs	r0, #0
    f4a0:	bd30      	pop	{r4, r5, pc}
    f4a2:	b2c0      	uxtb	r0, r0
    f4a4:	06c1      	lsls	r1, r0, #27
    f4a6:	d40c      	bmi.n	f4c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
    f4a8:	0681      	lsls	r1, r0, #26
    f4aa:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    f4ae:	d503      	bpl.n	f4b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    f4b0:	b9d1      	cbnz	r1, f4e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f4b2:	0781      	lsls	r1, r0, #30
    f4b4:	d418      	bmi.n	f4e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f4b6:	e001      	b.n	f4bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
    f4b8:	2900      	cmp	r1, #0
    f4ba:	d1fa      	bne.n	f4b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    f4bc:	0700      	lsls	r0, r0, #28
    f4be:	d413      	bmi.n	f4e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f4c0:	e010      	b.n	f4e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    f4c2:	0641      	lsls	r1, r0, #25
    f4c4:	d410      	bmi.n	f4e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f4c6:	0681      	lsls	r1, r0, #26
    f4c8:	d40e      	bmi.n	f4e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f4ca:	07c1      	lsls	r1, r0, #31
    f4cc:	ea4f 7180 	mov.w	r1, r0, lsl #30
    f4d0:	d004      	beq.n	f4dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    f4d2:	2900      	cmp	r1, #0
    f4d4:	db02      	blt.n	f4dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    f4d6:	0740      	lsls	r0, r0, #29
    f4d8:	d404      	bmi.n	f4e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    f4da:	e005      	b.n	f4e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f4dc:	0701      	lsls	r1, r0, #28
    f4de:	d403      	bmi.n	f4e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f4e0:	0740      	lsls	r0, r0, #29
    f4e2:	d401      	bmi.n	f4e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f4e4:	2001      	movs	r0, #1
    f4e6:	4770      	bx	lr
    f4e8:	2000      	movs	r0, #0
    f4ea:	4770      	bx	lr
    f4ec:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f4ee:	4669      	mov	r1, sp
    f4f0:	2001      	movs	r0, #1
    f4f2:	f7fd fa48 	bl	c986 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f4f6:	b178      	cbz	r0, f518 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f4f8:	f240 116d 	movw	r1, #365	; 0x16d
    f4fc:	2039      	movs	r0, #57	; 0x39
    f4fe:	f7f4 fbef 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f502:	9c02      	ldr	r4, [sp, #8]
    f504:	4620      	mov	r0, r4
    f506:	f7fe fc69 	bl	dddc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f50a:	b128      	cbz	r0, f518 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f50c:	4620      	mov	r0, r4
    f50e:	f7fe facb 	bl	daa8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    f512:	b108      	cbz	r0, f518 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f514:	2001      	movs	r0, #1
    f516:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f518:	4668      	mov	r0, sp
    f51a:	f7f4 fe19 	bl	4150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f51e:	2800      	cmp	r0, #0
    f520:	d0ef      	beq.n	f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    f522:	2000      	movs	r0, #0
    f524:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f526 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f526:	6802      	ldr	r2, [r0, #0]
    f528:	b912      	cbnz	r2, f530 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f52a:	6001      	str	r1, [r0, #0]
    f52c:	4770      	bx	lr
    f52e:	4602      	mov	r2, r0
    f530:	6850      	ldr	r0, [r2, #4]
    f532:	b108      	cbz	r0, f538 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f534:	428a      	cmp	r2, r1
    f536:	d1fa      	bne.n	f52e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f538:	428a      	cmp	r2, r1
    f53a:	d0f7      	beq.n	f52c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f53c:	6051      	str	r1, [r2, #4]
    f53e:	4770      	bx	lr
    f540:	b510      	push	{r4, lr}
    f542:	f7fe fc4e 	bl	dde2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    f546:	b108      	cbz	r0, f54c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f548:	21d9      	movs	r1, #217	; 0xd9
    f54a:	e003      	b.n	f554 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    f54c:	f7f7 f88c 	bl	6668 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    f550:	b118      	cbz	r0, f55a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    f552:	21de      	movs	r1, #222	; 0xde
    f554:	2001      	movs	r0, #1
    f556:	f7f4 fbc3 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f55e:	2001      	movs	r0, #1
    f560:	f7f4 bd8c 	b.w	407c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f564:	b510      	push	{r4, lr}
    f566:	4604      	mov	r4, r0
    f568:	e002      	b.n	f570 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    f56a:	6820      	ldr	r0, [r4, #0]
    f56c:	4780      	blx	r0
    f56e:	6864      	ldr	r4, [r4, #4]
    f570:	2c00      	cmp	r4, #0
    f572:	d1fa      	bne.n	f56a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    f574:	bd10      	pop	{r4, pc}
    f576:	b510      	push	{r4, lr}
    f578:	2000      	movs	r0, #0
    f57a:	f7f4 fd7f 	bl	407c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f57e:	f7f4 ffb5 	bl	44ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f582:	f7f5 fa8d 	bl	4aa0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f586:	f7f5 fc7b 	bl	4e80 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f58a:	2800      	cmp	r0, #0
    f58c:	d003      	beq.n	f596 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    f58e:	21b8      	movs	r1, #184	; 0xb8
    f590:	2001      	movs	r0, #1
    f592:	f7f4 fba5 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f596:	bd10      	pop	{r4, pc}
    f598:	b510      	push	{r4, lr}
    f59a:	f7ff ffd1 	bl	f540 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    f59e:	f7fe ffef 	bl	e580 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    f5a2:	2800      	cmp	r0, #0
    f5a4:	d003      	beq.n	f5ae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
    f5a6:	21f5      	movs	r1, #245	; 0xf5
    f5a8:	2001      	movs	r0, #1
    f5aa:	f7f4 fb99 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5ae:	bd10      	pop	{r4, pc}

0000f5b0 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    f5b0:	f7f3 bff2 	b.w	3598 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    f5b4:	000b0001 	.word	0x000b0001
    f5b8:	000a0002 	.word	0x000a0002
    f5bc:	00090005 	.word	0x00090005
    f5c0:	0008000a 	.word	0x0008000a
    f5c4:	00070014 	.word	0x00070014
    f5c8:	0006001e 	.word	0x0006001e
    f5cc:	00050032 	.word	0x00050032
    f5d0:	0004004b 	.word	0x0004004b
    f5d4:	00030064 	.word	0x00030064
    f5d8:	00020096 	.word	0x00020096
    f5dc:	000100fa 	.word	0x000100fa
    f5e0:	000001f4 	.word	0x000001f4

0000f5e4 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f5e4:	b510      	push	{r4, lr}
    f5e6:	f7fb faad 	bl	ab44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f5ea:	f000 f850 	bl	f68e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f5ee:	f7fa ff23 	bl	a438 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5f6:	f7fb b821 	b.w	a63c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f5fa <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f5fa:	b510      	push	{r4, lr}
    f5fc:	24c8      	movs	r4, #200	; 0xc8
    f5fe:	1e64      	subs	r4, r4, #1
    f600:	b2e4      	uxtb	r4, r4
    f602:	f7fa ff37 	bl	a474 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f606:	2802      	cmp	r0, #2
    f608:	d003      	beq.n	f612 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f60a:	2801      	cmp	r0, #1
    f60c:	d000      	beq.n	f610 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f60e:	2000      	movs	r0, #0
    f610:	bd10      	pop	{r4, pc}
    f612:	2c00      	cmp	r4, #0
    f614:	d1f3      	bne.n	f5fe <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f616:	2193      	movs	r1, #147	; 0x93
    f618:	203b      	movs	r0, #59	; 0x3b
    f61a:	f7f4 fb61 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f61e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f61e:	b510      	push	{r4, lr}
    f620:	f7f4 fa28 	bl	3a74 <mpsl_fem_lna_configuration_clear>
    f624:	2800      	cmp	r0, #0
    f626:	d005      	beq.n	f634 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f628:	1c40      	adds	r0, r0, #1
    f62a:	d003      	beq.n	f634 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f62c:	2150      	movs	r1, #80	; 0x50
    f62e:	2040      	movs	r0, #64	; 0x40
    f630:	f7f4 fb56 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f634:	bd10      	pop	{r4, pc}

0000f636 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f636:	b510      	push	{r4, lr}
    f638:	f7f4 fa28 	bl	3a8c <mpsl_fem_pa_configuration_clear>
    f63c:	2800      	cmp	r0, #0
    f63e:	d005      	beq.n	f64c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f640:	1c40      	adds	r0, r0, #1
    f642:	d003      	beq.n	f64c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f644:	2149      	movs	r1, #73	; 0x49
    f646:	2040      	movs	r0, #64	; 0x40
    f648:	f7f4 fb4a 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f64c:	bd10      	pop	{r4, pc}

0000f64e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f64e:	b510      	push	{r4, lr}
    f650:	f7f4 fa0a 	bl	3a68 <mpsl_fem_disable>
    f654:	2800      	cmp	r0, #0
    f656:	d005      	beq.n	f664 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f658:	1c40      	adds	r0, r0, #1
    f65a:	d003      	beq.n	f664 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f65c:	2157      	movs	r1, #87	; 0x57
    f65e:	2040      	movs	r0, #64	; 0x40
    f660:	f7f4 fb3e 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f664:	bd10      	pop	{r4, pc}

0000f666 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f666:	b510      	push	{r4, lr}
    f668:	2100      	movs	r1, #0
    f66a:	4608      	mov	r0, r1
    f66c:	f7f4 fa08 	bl	3a80 <mpsl_fem_lna_configuration_set>
    f670:	b108      	cbz	r0, f676 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f672:	2000      	movs	r0, #0
    f674:	bd10      	pop	{r4, pc}
    f676:	2001      	movs	r0, #1
    f678:	bd10      	pop	{r4, pc}

0000f67a <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f67a:	b508      	push	{r3, lr}
    f67c:	4668      	mov	r0, sp
    f67e:	f7f4 fa11 	bl	3aa4 <mpsl_fem_pa_is_configured>
    f682:	f89d 0000 	ldrb.w	r0, [sp]
    f686:	2800      	cmp	r0, #0
    f688:	d000      	beq.n	f68c <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f68a:	2001      	movs	r0, #1
    f68c:	bd08      	pop	{r3, pc}

0000f68e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f68e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f692:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f696:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f69a:	f3bf 8f4f 	dsb	sy
    f69e:	f3bf 8f6f 	isb	sy
    f6a2:	f7fb b8a5 	b.w	a7f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f6a6:	2800      	cmp	r0, #0
    f6a8:	db09      	blt.n	f6be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f6aa:	f000 021f 	and.w	r2, r0, #31
    f6ae:	2101      	movs	r1, #1
    f6b0:	4091      	lsls	r1, r2
    f6b2:	0940      	lsrs	r0, r0, #5
    f6b4:	0080      	lsls	r0, r0, #2
    f6b6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f6ba:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f6be:	4770      	bx	lr
    f6c0:	2800      	cmp	r0, #0
    f6c2:	db0d      	blt.n	f6e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f6c4:	f000 021f 	and.w	r2, r0, #31
    f6c8:	2101      	movs	r1, #1
    f6ca:	4091      	lsls	r1, r2
    f6cc:	0940      	lsrs	r0, r0, #5
    f6ce:	0080      	lsls	r0, r0, #2
    f6d0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f6d4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f6d8:	f3bf 8f4f 	dsb	sy
    f6dc:	f3bf 8f6f 	isb	sy
    f6e0:	4770      	bx	lr

0000f6e2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f6e2:	b510      	push	{r4, lr}
    f6e4:	2801      	cmp	r0, #1
    f6e6:	d006      	beq.n	f6f6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f6e8:	2802      	cmp	r0, #2
    f6ea:	d006      	beq.n	f6fa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f6ec:	f640 3141 	movw	r1, #2881	; 0xb41
    f6f0:	203e      	movs	r0, #62	; 0x3e
    f6f2:	f7f4 faf5 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6f6:	2028      	movs	r0, #40	; 0x28
    f6f8:	bd10      	pop	{r4, pc}
    f6fa:	2018      	movs	r0, #24
    f6fc:	bd10      	pop	{r4, pc}

0000f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f6fe:	b510      	push	{r4, lr}
    f700:	2801      	cmp	r0, #1
    f702:	d006      	beq.n	f712 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f704:	2802      	cmp	r0, #2
    f706:	d007      	beq.n	f718 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f708:	f640 3155 	movw	r1, #2901	; 0xb55
    f70c:	203e      	movs	r0, #62	; 0x3e
    f70e:	f7f4 fae7 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f712:	f641 6014 	movw	r0, #7700	; 0x1e14
    f716:	bd10      	pop	{r4, pc}
    f718:	f241 1030 	movw	r0, #4400	; 0x1130
    f71c:	bd10      	pop	{r4, pc}

0000f71e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f71e:	f7fb bf69 	b.w	b5f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    f722:	b510      	push	{r4, lr}
    f724:	460a      	mov	r2, r1
    f726:	b130      	cbz	r0, f736 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f728:	2801      	cmp	r0, #1
    f72a:	d00b      	beq.n	f744 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f72c:	f240 6114 	movw	r1, #1556	; 0x614
    f730:	203e      	movs	r0, #62	; 0x3e
    f732:	f7f4 fad5 	bl	3ce0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f73a:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f73e:	4610      	mov	r0, r2
    f740:	f7fa beec 	b.w	a51c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f748:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f74c:	4610      	mov	r0, r2
    f74e:	f7fa becf 	b.w	a4f0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    f752:	5840      	ldr	r0, [r0, r1]
    f754:	2800      	cmp	r0, #0
    f756:	d000      	beq.n	f75a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
    f758:	2001      	movs	r0, #1
    f75a:	4770      	bx	lr
    f75c:	5840      	ldr	r0, [r0, r1]
    f75e:	2800      	cmp	r0, #0
    f760:	d000      	beq.n	f764 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
    f762:	2001      	movs	r0, #1
    f764:	4770      	bx	lr

0000f766 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f766:	b570      	push	{r4, r5, r6, lr}
    f768:	4605      	mov	r5, r0
    f76a:	4614      	mov	r4, r2
    f76c:	4608      	mov	r0, r1
    f76e:	f7ff ffc6 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f772:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f776:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f77a:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f77e:	4620      	mov	r0, r4
    f780:	f7ff ffbd 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f784:	4428      	add	r0, r5
    f786:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f78a:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f78e:	fbb0 f5f1 	udiv	r5, r0, r1
    f792:	4620      	mov	r0, r4
    f794:	f7ff ffa5 	bl	f6e2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f798:	4428      	add	r0, r5
    f79a:	1d40      	adds	r0, r0, #5
    f79c:	bd70      	pop	{r4, r5, r6, pc}

0000f79e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7a2:	4607      	mov	r7, r0
    f7a4:	461d      	mov	r5, r3
    f7a6:	460e      	mov	r6, r1
    f7a8:	4614      	mov	r4, r2
    f7aa:	4610      	mov	r0, r2
    f7ac:	f7ff ffa7 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7b0:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f7b4:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f7b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f7bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f7c0:	2e02      	cmp	r6, #2
    f7c2:	d00e      	beq.n	f7e2 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f7c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f7c8:	4411      	add	r1, r2
    f7ca:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f7ce:	fbb1 f6f0 	udiv	r6, r1, r0
    f7d2:	4620      	mov	r0, r4
    f7d4:	f7ff ff85 	bl	f6e2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f7d8:	4430      	add	r0, r6
    f7da:	4428      	add	r0, r5
    f7dc:	1d40      	adds	r0, r0, #5
    f7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7e2:	4602      	mov	r2, r0
    f7e4:	e7f0      	b.n	f7c8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f7e6 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f7e6:	b510      	push	{r4, lr}
    f7e8:	4604      	mov	r4, r0
    f7ea:	4608      	mov	r0, r1
    f7ec:	f7ff ff87 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f7f4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f7f8:	fbb0 f0f1 	udiv	r0, r0, r1
    f7fc:	1a20      	subs	r0, r4, r0
    f7fe:	1e80      	subs	r0, r0, #2
    f800:	bd10      	pop	{r4, pc}

0000f802 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f802:	b510      	push	{r4, lr}
    f804:	4604      	mov	r4, r0
    f806:	4608      	mov	r0, r1
    f808:	f7ff ff79 	bl	f6fe <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f80c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f810:	fbb0 f0f1 	udiv	r0, r0, r1
    f814:	1a20      	subs	r0, r4, r0
    f816:	bd10      	pop	{r4, pc}

0000f818 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f81c:	2902      	cmp	r1, #2
    f81e:	d008      	beq.n	f832 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f820:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f824:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f828:	fbb1 f1f2 	udiv	r1, r1, r2
    f82c:	4408      	add	r0, r1
    f82e:	1e80      	subs	r0, r0, #2
    f830:	4770      	bx	lr
    f832:	4611      	mov	r1, r2
    f834:	e7f6      	b.n	f824 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f836 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f836:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f83a:	2902      	cmp	r1, #2
    f83c:	d007      	beq.n	f84e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f83e:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f842:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f846:	fbb1 f1f2 	udiv	r1, r1, r2
    f84a:	4408      	add	r0, r1
    f84c:	4770      	bx	lr
    f84e:	4611      	mov	r1, r2
    f850:	e7f7      	b.n	f842 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f852:	080c      	.short	0x080c
    f854:	010d1702 	.word	0x010d1702
    f858:	09090201 	.word	0x09090201
    f85c:	02060101 	.word	0x02060101
    f860:	03181809 	.word	0x03181809
    f864:	09090101 	.word	0x09090101
    f868:	00050303 	.word	0x00050303

0000f86c <on_connected>:
	.connected 		= on_connected,
	.disconnected 	= on_disconnected,
};

void on_connected(struct bt_conn *conn, uint8_t err)
{
    f86c:	b510      	push	{r4, lr}
	if(err) {
    f86e:	b9b1      	cbnz	r1, f89e <on_connected+0x32>
    f870:	4604      	mov	r4, r0
    f872:	4b14      	ldr	r3, [pc, #80]	; (f8c4 <on_connected+0x58>)
    f874:	4a14      	ldr	r2, [pc, #80]	; (f8c8 <on_connected+0x5c>)
    f876:	1a9b      	subs	r3, r3, r2
    f878:	08db      	lsrs	r3, r3, #3
		LOG_ERR("connection err: %d", err);
		return;
	}
	LOG_INF("Connected.");
    f87a:	f04f 0100 	mov.w	r1, #0
    f87e:	2203      	movs	r2, #3
    f880:	f362 0102 	bfi	r1, r2, #0, #3
    f884:	f36f 01c5 	bfc	r1, #3, #3
    f888:	f363 118f 	bfi	r1, r3, #6, #10
    f88c:	480f      	ldr	r0, [pc, #60]	; (f8cc <on_connected+0x60>)
    f88e:	f002 f891 	bl	119b4 <log_0>
	current_conn = bt_conn_ref(conn);
    f892:	4620      	mov	r0, r4
    f894:	f017 fc5c 	bl	27150 <bt_conn_ref>
    f898:	4b0d      	ldr	r3, [pc, #52]	; (f8d0 <on_connected+0x64>)
    f89a:	6018      	str	r0, [r3, #0]
	//dk_set_led_on(CONN_STATUS_LED);
}
    f89c:	bd10      	pop	{r4, pc}
    f89e:	4608      	mov	r0, r1
    f8a0:	4b08      	ldr	r3, [pc, #32]	; (f8c4 <on_connected+0x58>)
    f8a2:	4a09      	ldr	r2, [pc, #36]	; (f8c8 <on_connected+0x5c>)
    f8a4:	1a9b      	subs	r3, r3, r2
    f8a6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("connection err: %d", err);
    f8a8:	f04f 0200 	mov.w	r2, #0
    f8ac:	2101      	movs	r1, #1
    f8ae:	f361 0202 	bfi	r2, r1, #0, #3
    f8b2:	f36f 02c5 	bfc	r2, #3, #3
    f8b6:	f363 128f 	bfi	r2, r3, #6, #10
    f8ba:	4601      	mov	r1, r0
    f8bc:	4805      	ldr	r0, [pc, #20]	; (f8d4 <on_connected+0x68>)
    f8be:	f002 f8a9 	bl	11a14 <log_1>
		return;
    f8c2:	e7eb      	b.n	f89c <on_connected+0x30>
    f8c4:	00029de8 	.word	0x00029de8
    f8c8:	00029d70 	.word	0x00029d70
    f8cc:	00029f5c 	.word	0x00029f5c
    f8d0:	20001f00 	.word	0x20001f00
    f8d4:	00029f48 	.word	0x00029f48

0000f8d8 <on_disconnected>:

void on_disconnected(struct bt_conn *conn, uint8_t reason)
{
    f8d8:	b508      	push	{r3, lr}
    f8da:	4b0c      	ldr	r3, [pc, #48]	; (f90c <on_disconnected+0x34>)
    f8dc:	4a0c      	ldr	r2, [pc, #48]	; (f910 <on_disconnected+0x38>)
    f8de:	1a9b      	subs	r3, r3, r2
    f8e0:	08db      	lsrs	r3, r3, #3
	LOG_INF("Disconnected (reason: %d)", reason);
    f8e2:	f04f 0200 	mov.w	r2, #0
    f8e6:	2003      	movs	r0, #3
    f8e8:	f360 0202 	bfi	r2, r0, #0, #3
    f8ec:	f36f 02c5 	bfc	r2, #3, #3
    f8f0:	f363 128f 	bfi	r2, r3, #6, #10
    f8f4:	4807      	ldr	r0, [pc, #28]	; (f914 <on_disconnected+0x3c>)
    f8f6:	f002 f88d 	bl	11a14 <log_1>
	//dk_set_led_off(CONN_STATUS_LED);
	if(current_conn) {
    f8fa:	4b07      	ldr	r3, [pc, #28]	; (f918 <on_disconnected+0x40>)
    f8fc:	6818      	ldr	r0, [r3, #0]
    f8fe:	b120      	cbz	r0, f90a <on_disconnected+0x32>
		bt_conn_unref(current_conn);
    f900:	f007 fce4 	bl	172cc <bt_conn_unref>
		current_conn = NULL;
    f904:	4b04      	ldr	r3, [pc, #16]	; (f918 <on_disconnected+0x40>)
    f906:	2200      	movs	r2, #0
    f908:	601a      	str	r2, [r3, #0]
	}
}
    f90a:	bd08      	pop	{r3, pc}
    f90c:	00029de8 	.word	0x00029de8
    f910:	00029d70 	.word	0x00029d70
    f914:	00029f68 	.word	0x00029f68
    f918:	20001f00 	.word	0x20001f00

0000f91c <main>:

/* Callbacks */

void main(void)
{
    f91c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f920:	b087      	sub	sp, #28
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    f922:	487a      	ldr	r0, [pc, #488]	; (fb0c <main+0x1f0>)
    f924:	f00e fa5c 	bl	1dde0 <z_impl_device_get_binding>

	int err;


	dev = device_get_binding(LED0);
	if (dev == NULL) {
    f928:	2800      	cmp	r0, #0
    f92a:	f000 80eb 	beq.w	fb04 <main+0x1e8>
    f92e:	4604      	mov	r4, r0
	const struct gpio_driver_api *api =
    f930:	6887      	ldr	r7, [r0, #8]
	const struct gpio_driver_config *const cfg =
    f932:	6843      	ldr	r3, [r0, #4]
	struct gpio_driver_data *data =
    f934:	6905      	ldr	r5, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    f936:	681b      	ldr	r3, [r3, #0]
    f938:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    f93c:	d02f      	beq.n	f99e <main+0x82>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    f93e:	682b      	ldr	r3, [r5, #0]
    f940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f944:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    f946:	683b      	ldr	r3, [r7, #0]
    f948:	f240 6201 	movw	r2, #1537	; 0x601
    f94c:	210d      	movs	r1, #13
    f94e:	4620      	mov	r0, r4
    f950:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
    f952:	2800      	cmp	r0, #0
    f954:	f2c0 80d6 	blt.w	fb04 <main+0x1e8>
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f958:	4b6d      	ldr	r3, [pc, #436]	; (fb10 <main+0x1f4>)
    f95a:	2203      	movs	r2, #3
    f95c:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    f960:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f964:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
	int i = 0;
	nrf_gpio_cfg_output(RELAY_PIN);
	nrf_gpio_pin_clear(RELAY_PIN);

	struct DHTReadings dht22;
	dht22.dhtModel = DHT22;
    f968:	2301      	movs	r3, #1
    f96a:	f88d 3014 	strb.w	r3, [sp, #20]

	err = bluetooth_init(&bluetooth_callbacks);
    f96e:	4869      	ldr	r0, [pc, #420]	; (fb14 <main+0x1f8>)
    f970:	f000 fa30 	bl	fdd4 <bluetooth_init>

	if (err)
    f974:	4601      	mov	r1, r0
    f976:	bb18      	cbnz	r0, f9c0 <main+0xa4>
    f978:	4b67      	ldr	r3, [pc, #412]	; (fb18 <main+0x1fc>)
    f97a:	4a68      	ldr	r2, [pc, #416]	; (fb1c <main+0x200>)
    f97c:	1a9b      	subs	r3, r3, r2
    f97e:	08db      	lsrs	r3, r3, #3
	{
		LOG_ERR("Bluetooth_init returned %d", err);
	}
	LOG_INF("Running");
    f980:	f04f 0100 	mov.w	r1, #0
    f984:	2203      	movs	r2, #3
    f986:	f362 0102 	bfi	r1, r2, #0, #3
    f98a:	f36f 01c5 	bfc	r1, #3, #3
    f98e:	f363 118f 	bfi	r1, r3, #6, #10
    f992:	4863      	ldr	r0, [pc, #396]	; (fb20 <main+0x204>)
    f994:	f002 f80e 	bl	119b4 <log_0>
	int i = 0;
    f998:	2600      	movs	r6, #0
	bool led_is_on = true;
    f99a:	2501      	movs	r5, #1
    f99c:	e05f      	b.n	fa5e <main+0x142>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    f99e:	4e61      	ldr	r6, [pc, #388]	; (fb24 <main+0x208>)
    f9a0:	f240 23fd 	movw	r3, #765	; 0x2fd
    f9a4:	4632      	mov	r2, r6
    f9a6:	4960      	ldr	r1, [pc, #384]	; (fb28 <main+0x20c>)
    f9a8:	4860      	ldr	r0, [pc, #384]	; (fb2c <main+0x210>)
    f9aa:	f015 ff40 	bl	2582e <printk>
    f9ae:	4860      	ldr	r0, [pc, #384]	; (fb30 <main+0x214>)
    f9b0:	f015 ff3d 	bl	2582e <printk>
    f9b4:	f240 21fd 	movw	r1, #765	; 0x2fd
    f9b8:	4630      	mov	r0, r6
    f9ba:	f016 f9ba 	bl	25d32 <assert_post_action>
    f9be:	e7be      	b.n	f93e <main+0x22>
    f9c0:	4b55      	ldr	r3, [pc, #340]	; (fb18 <main+0x1fc>)
    f9c2:	4a56      	ldr	r2, [pc, #344]	; (fb1c <main+0x200>)
    f9c4:	1a9b      	subs	r3, r3, r2
    f9c6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Bluetooth_init returned %d", err);
    f9c8:	f04f 0200 	mov.w	r2, #0
    f9cc:	2001      	movs	r0, #1
    f9ce:	f360 0202 	bfi	r2, r0, #0, #3
    f9d2:	f36f 02c5 	bfc	r2, #3, #3
    f9d6:	f363 128f 	bfi	r2, r3, #6, #10
    f9da:	4856      	ldr	r0, [pc, #344]	; (fb34 <main+0x218>)
    f9dc:	f002 f81a 	bl	11a14 <log_1>
    f9e0:	e7ca      	b.n	f978 <main+0x5c>
		printk("iteration: %d\n", ++i);

		//TEMPERATURE READING
		if (dhtRead(&dht22) == DHT_FAIL)
		{
			printk("Can't read temperature!\n");
    f9e2:	4855      	ldr	r0, [pc, #340]	; (fb38 <main+0x21c>)
    f9e4:	f015 ff23 	bl	2582e <printk>
    f9e8:	e04d      	b.n	fa86 <main+0x16a>
    p_reg->OUTSET = set_mask;
    f9ea:	4b49      	ldr	r3, [pc, #292]	; (fb10 <main+0x1f4>)
    f9ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f9f0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		Hysteresis = 1;

		if (dht22.temperatureIntPart + (dht22.temperatureDecimalPart/10) < SetPoint - Hysteresis)
		{
			nrf_gpio_pin_set(RELAY_PIN);
			printk("Relay is ON\n");
    f9f4:	4851      	ldr	r0, [pc, #324]	; (fb3c <main+0x220>)
    f9f6:	f015 ff1a 	bl	2582e <printk>
    f9fa:	e04f      	b.n	fa9c <main+0x180>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    f9fc:	f8df 9124 	ldr.w	r9, [pc, #292]	; fb24 <main+0x208>
    fa00:	f240 43bb 	movw	r3, #1211	; 0x4bb
    fa04:	464a      	mov	r2, r9
    fa06:	4948      	ldr	r1, [pc, #288]	; (fb28 <main+0x20c>)
    fa08:	4848      	ldr	r0, [pc, #288]	; (fb2c <main+0x210>)
    fa0a:	f015 ff10 	bl	2582e <printk>
    fa0e:	4848      	ldr	r0, [pc, #288]	; (fb30 <main+0x214>)
    fa10:	f015 ff0d 	bl	2582e <printk>
    fa14:	f240 41bb 	movw	r1, #1211	; 0x4bb
    fa18:	4648      	mov	r0, r9
    fa1a:	f016 f98a 	bl	25d32 <assert_post_action>
    fa1e:	e05b      	b.n	fad8 <main+0x1bc>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    fa20:	f8df 8100 	ldr.w	r8, [pc, #256]	; fb24 <main+0x208>
    fa24:	f240 4391 	movw	r3, #1169	; 0x491
    fa28:	4642      	mov	r2, r8
    fa2a:	493f      	ldr	r1, [pc, #252]	; (fb28 <main+0x20c>)
    fa2c:	483f      	ldr	r0, [pc, #252]	; (fb2c <main+0x210>)
    fa2e:	f015 fefe 	bl	2582e <printk>
    fa32:	483f      	ldr	r0, [pc, #252]	; (fb30 <main+0x214>)
    fa34:	f015 fefb 	bl	2582e <printk>
    fa38:	f240 4191 	movw	r1, #1169	; 0x491
    fa3c:	4640      	mov	r0, r8
    fa3e:	f016 f978 	bl	25d32 <assert_post_action>
    fa42:	e056      	b.n	faf2 <main+0x1d6>
	const struct gpio_driver_api *api =
    fa44:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
    fa46:	691b      	ldr	r3, [r3, #16]
    fa48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fa4c:	4620      	mov	r0, r4
    fa4e:	4798      	blx	r3

		printk("\n\n");

		//BLINKING LED
		gpio_pin_set(dev, PIN, (int)led_is_on);
		led_is_on = !led_is_on;
    fa50:	f085 0501 	eor.w	r5, r5, #1
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    fa54:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
    fa58:	2100      	movs	r1, #0
    fa5a:	f011 fcbd 	bl	213d8 <z_impl_k_sleep>
		printk("iteration: %d\n", ++i);
    fa5e:	3601      	adds	r6, #1
    fa60:	4631      	mov	r1, r6
    fa62:	4837      	ldr	r0, [pc, #220]	; (fb40 <main+0x224>)
    fa64:	f015 fee3 	bl	2582e <printk>
		if (dhtRead(&dht22) == DHT_FAIL)
    fa68:	a801      	add	r0, sp, #4
    fa6a:	f000 f92b 	bl	fcc4 <dhtRead>
    fa6e:	2801      	cmp	r0, #1
    fa70:	d0b7      	beq.n	f9e2 <main+0xc6>
			printk("temperature: %d.%d C\n", dht22.temperatureIntPart, dht22.temperatureDecimalPart);
    fa72:	9a02      	ldr	r2, [sp, #8]
    fa74:	9901      	ldr	r1, [sp, #4]
    fa76:	4833      	ldr	r0, [pc, #204]	; (fb44 <main+0x228>)
    fa78:	f015 fed9 	bl	2582e <printk>
			printk("humidity: %d.%d %%\n", dht22.humidityIntPart, dht22.humidityDecimalPart);
    fa7c:	9a04      	ldr	r2, [sp, #16]
    fa7e:	9903      	ldr	r1, [sp, #12]
    fa80:	4831      	ldr	r0, [pc, #196]	; (fb48 <main+0x22c>)
    fa82:	f015 fed4 	bl	2582e <printk>
		if (dht22.temperatureIntPart + (dht22.temperatureDecimalPart/10) < SetPoint - Hysteresis)
    fa86:	9b02      	ldr	r3, [sp, #8]
    fa88:	4a30      	ldr	r2, [pc, #192]	; (fb4c <main+0x230>)
    fa8a:	fb82 1203 	smull	r1, r2, r2, r3
    fa8e:	17db      	asrs	r3, r3, #31
    fa90:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    fa94:	9a01      	ldr	r2, [sp, #4]
    fa96:	4413      	add	r3, r2
    fa98:	2b16      	cmp	r3, #22
    fa9a:	dda6      	ble.n	f9ea <main+0xce>
		if (dht22.temperatureIntPart + (dht22.temperatureDecimalPart/10) > SetPoint + Hysteresis)
    fa9c:	9b02      	ldr	r3, [sp, #8]
    fa9e:	4a2b      	ldr	r2, [pc, #172]	; (fb4c <main+0x230>)
    faa0:	fb82 1203 	smull	r1, r2, r2, r3
    faa4:	17db      	asrs	r3, r3, #31
    faa6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    faaa:	9a01      	ldr	r2, [sp, #4]
    faac:	4413      	add	r3, r2
    faae:	2b19      	cmp	r3, #25
    fab0:	dd07      	ble.n	fac2 <main+0x1a6>
    p_reg->OUTCLR = clr_mask;
    fab2:	4b17      	ldr	r3, [pc, #92]	; (fb10 <main+0x1f4>)
    fab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fab8:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
			printk("Relay is OFF\n");
    fabc:	4824      	ldr	r0, [pc, #144]	; (fb50 <main+0x234>)
    fabe:	f015 feb6 	bl	2582e <printk>
		printk("\n\n");
    fac2:	4824      	ldr	r0, [pc, #144]	; (fb54 <main+0x238>)
    fac4:	f015 feb3 	bl	2582e <printk>
		gpio_pin_set(dev, PIN, (int)led_is_on);
    fac8:	462f      	mov	r7, r5
	const struct gpio_driver_config *const cfg =
    faca:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_data *const data =
    facc:	f8d4 8010 	ldr.w	r8, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    fad0:	681b      	ldr	r3, [r3, #0]
    fad2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    fad6:	d091      	beq.n	f9fc <main+0xe0>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    fad8:	f8d8 3000 	ldr.w	r3, [r8]
    fadc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    fae0:	d002      	beq.n	fae8 <main+0x1cc>
		value = (value != 0) ? 0 : 1;
    fae2:	fab7 f787 	clz	r7, r7
    fae6:	097f      	lsrs	r7, r7, #5
	const struct gpio_driver_config *const cfg =
    fae8:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    faea:	681b      	ldr	r3, [r3, #0]
    faec:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    faf0:	d096      	beq.n	fa20 <main+0x104>
	if (value != 0)	{
    faf2:	2f00      	cmp	r7, #0
    faf4:	d0a6      	beq.n	fa44 <main+0x128>
	const struct gpio_driver_api *api =
    faf6:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
    faf8:	68db      	ldr	r3, [r3, #12]
    fafa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fafe:	4620      	mov	r0, r4
    fb00:	4798      	blx	r3
    fb02:	e7a5      	b.n	fa50 <main+0x134>
		k_msleep(SLEEP_TIME_MS);
	}
}
    fb04:	b007      	add	sp, #28
    fb06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fb0a:	bf00      	nop
    fb0c:	00029f84 	.word	0x00029f84
    fb10:	50000300 	.word	0x50000300
    fb14:	20000420 	.word	0x20000420
    fb18:	00029de8 	.word	0x00029de8
    fb1c:	00029d70 	.word	0x00029d70
    fb20:	0002a048 	.word	0x0002a048
    fb24:	00029f8c 	.word	0x00029f8c
    fb28:	00029fb8 	.word	0x00029fb8
    fb2c:	00029ff8 	.word	0x00029ff8
    fb30:	0002a018 	.word	0x0002a018
    fb34:	0002a02c 	.word	0x0002a02c
    fb38:	0002a060 	.word	0x0002a060
    fb3c:	0002a0a8 	.word	0x0002a0a8
    fb40:	0002a050 	.word	0x0002a050
    fb44:	0002a07c 	.word	0x0002a07c
    fb48:	0002a094 	.word	0x0002a094
    fb4c:	66666667 	.word	0x66666667
    fb50:	0002a0b8 	.word	0x0002a0b8
    fb54:	0002d9c0 	.word	0x0002d9c0

0000fb58 <sendSignalToDHTSensor>:


//--------------------------------------------------------
// PRIVATE FUNCTIONS
void sendSignalToDHTSensor()
{
    fb58:	b510      	push	{r4, lr}
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fb5a:	4c0c      	ldr	r4, [pc, #48]	; (fb8c <sendSignalToDHTSensor+0x34>)
    fb5c:	2300      	movs	r3, #0
    fb5e:	f8c4 372c 	str.w	r3, [r4, #1836]	; 0x72c
    {
        return;
    }

    do {
        nrf_delay_us(1000);
    fb62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fb66:	f019 fd2f 	bl	295c8 <nrfx_busy_wait>
    fb6a:	2303      	movs	r3, #3
    fb6c:	f8c4 372c 	str.w	r3, [r4, #1836]	; 0x72c
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    fb70:	f44f 6300 	mov.w	r3, #2048	; 0x800
    fb74:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    fb78:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    fb7c:	2412      	movs	r4, #18
    fb7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fb82:	f019 fd21 	bl	295c8 <nrfx_busy_wait>
    } while (--ms_time);
    fb86:	3c01      	subs	r4, #1
    fb88:	d1f9      	bne.n	fb7e <sendSignalToDHTSensor+0x26>
  /* MCU sends out start signal and pulls down voltage for at least 18ms to lest DHT detect the signal */
  nrf_gpio_cfg_output(DHT_PIN);
  nrf_gpio_pin_set(DHT_PIN);
  nrf_gpio_pin_clear(DHT_PIN);
  nrf_delay_ms(18);
}
    fb8a:	bd10      	pop	{r4, pc}
    fb8c:	50000300 	.word	0x50000300

0000fb90 <waitForDHTResponse>:

DHTErrorCode waitForDHTResponse()
{
    fb90:	b510      	push	{r4, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fb92:	4c1a      	ldr	r4, [pc, #104]	; (fbfc <waitForDHTResponse+0x6c>)
    fb94:	2300      	movs	r3, #0
    fb96:	f8c4 372c 	str.w	r3, [r4, #1836]	; 0x72c
  /* MCU waits for DHT response */
  nrf_gpio_cfg_input(DHT_PIN, NRF_GPIO_PIN_NOPULL);
  nrf_delay_us(50);
    fb9a:	2032      	movs	r0, #50	; 0x32
    fb9c:	f019 fd14 	bl	295c8 <nrfx_busy_wait>
    return p_reg->IN;
    fba0:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510

  if(nrf_gpio_pin_read(DHT_PIN)!=0) 
    fba4:	f413 6f00 	tst.w	r3, #2048	; 0x800
    fba8:	d110      	bne.n	fbcc <waitForDHTResponse+0x3c>
  {
      printk("no ACK\n");
      return DHT_FAIL;
  }

  int cntr = 18;
    fbaa:	2412      	movs	r4, #18
    fbac:	4b13      	ldr	r3, [pc, #76]	; (fbfc <waitForDHTResponse+0x6c>)
    fbae:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510

  /* DHT sends out response signal and keeps it for 80us */
  while(nrf_gpio_pin_read(DHT_PIN)==0) 
    fbb2:	f413 6f00 	tst.w	r3, #2048	; 0x800
    fbb6:	d10e      	bne.n	fbd6 <waitForDHTResponse+0x46>
  {  
	  nrf_delay_us(5);
    fbb8:	2005      	movs	r0, #5
    fbba:	f019 fd05 	bl	295c8 <nrfx_busy_wait>
    if (--cntr==0) 
    fbbe:	3c01      	subs	r4, #1
    fbc0:	d1f4      	bne.n	fbac <waitForDHTResponse+0x1c>
    {
      printk("no ACK2\n"); 
    fbc2:	480f      	ldr	r0, [pc, #60]	; (fc00 <waitForDHTResponse+0x70>)
    fbc4:	f015 fe33 	bl	2582e <printk>
      return DHT_FAIL;
    fbc8:	2001      	movs	r0, #1
      printk("no ACK3\n"); /* signal should be up for the ACK here */
      return DHT_FAIL;
    }
  }
  return DHT_SUCCESS;
}
    fbca:	bd10      	pop	{r4, pc}
      printk("no ACK\n");
    fbcc:	480d      	ldr	r0, [pc, #52]	; (fc04 <waitForDHTResponse+0x74>)
    fbce:	f015 fe2e 	bl	2582e <printk>
      return DHT_FAIL;
    fbd2:	2001      	movs	r0, #1
    fbd4:	e7f9      	b.n	fbca <waitForDHTResponse+0x3a>
  cntr = 18;
    fbd6:	2412      	movs	r4, #18
    fbd8:	4b08      	ldr	r3, [pc, #32]	; (fbfc <waitForDHTResponse+0x6c>)
    fbda:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
  while(nrf_gpio_pin_read(DHT_PIN)!=0) 
    fbde:	f413 6f00 	tst.w	r3, #2048	; 0x800
    fbe2:	d009      	beq.n	fbf8 <waitForDHTResponse+0x68>
	  nrf_delay_us(5);
    fbe4:	2005      	movs	r0, #5
    fbe6:	f019 fcef 	bl	295c8 <nrfx_busy_wait>
    if (--cntr==0) 
    fbea:	3c01      	subs	r4, #1
    fbec:	d1f4      	bne.n	fbd8 <waitForDHTResponse+0x48>
      printk("no ACK3\n"); /* signal should be up for the ACK here */
    fbee:	4806      	ldr	r0, [pc, #24]	; (fc08 <waitForDHTResponse+0x78>)
    fbf0:	f015 fe1d 	bl	2582e <printk>
      return DHT_FAIL;
    fbf4:	2001      	movs	r0, #1
    fbf6:	e7e8      	b.n	fbca <waitForDHTResponse+0x3a>
  return DHT_SUCCESS;
    fbf8:	2000      	movs	r0, #0
    fbfa:	e7e6      	b.n	fbca <waitForDHTResponse+0x3a>
    fbfc:	50000300 	.word	0x50000300
    fc00:	0002a0d8 	.word	0x0002a0d8
    fc04:	0002a0d0 	.word	0x0002a0d0
    fc08:	0002a0e4 	.word	0x0002a0e4

0000fc0c <readingDataFromDHTSensor>:

DHTErrorCode readingDataFromDHTSensor(uint8_t *buffer)
{
    fc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc10:	4605      	mov	r5, r0
  int i = 0;
  int data = 0;
  int loopBits = 40;
    fc12:	2728      	movs	r7, #40	; 0x28
  int data = 0;
    fc14:	2600      	movs	r6, #0
  int i = 0;
    fc16:	46b0      	mov	r8, r6
  do 
  {
    int cntr = 11; /* wait max 55 us */
    fc18:	240b      	movs	r4, #11
    fc1a:	4b1a      	ldr	r3, [pc, #104]	; (fc84 <readingDataFromDHTSensor+0x78>)
    fc1c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    while(nrf_gpio_pin_read(DHT_PIN)==0) 
    fc20:	f413 6f00 	tst.w	r3, #2048	; 0x800
    fc24:	d10a      	bne.n	fc3c <readingDataFromDHTSensor+0x30>
    {
      nrf_delay_us(5);
    fc26:	2005      	movs	r0, #5
    fc28:	f019 fcce 	bl	295c8 <nrfx_busy_wait>
      if (--cntr==0) 
    fc2c:	3c01      	subs	r4, #1
    fc2e:	d1f4      	bne.n	fc1a <readingDataFromDHTSensor+0xe>
      {
        printk("DHT11_NO_DATA_0\n");
    fc30:	4815      	ldr	r0, [pc, #84]	; (fc88 <readingDataFromDHTSensor+0x7c>)
    fc32:	f015 fdfc 	bl	2582e <printk>
        return DHT_FAIL;
    fc36:	2001      	movs	r0, #1
      data = 0;
    }
  } while(--loopBits!=0);

  return DHT_SUCCESS;
}
    fc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cntr = 15; /* wait max 75 us */
    fc3c:	240f      	movs	r4, #15
    fc3e:	4b11      	ldr	r3, [pc, #68]	; (fc84 <readingDataFromDHTSensor+0x78>)
    fc40:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    while(nrf_gpio_pin_read(DHT_PIN)!=0) 
    fc44:	f413 6f00 	tst.w	r3, #2048	; 0x800
    fc48:	d009      	beq.n	fc5e <readingDataFromDHTSensor+0x52>
      nrf_delay_us(5);
    fc4a:	2005      	movs	r0, #5
    fc4c:	f019 fcbc 	bl	295c8 <nrfx_busy_wait>
      if (--cntr==0) 
    fc50:	3c01      	subs	r4, #1
    fc52:	d1f4      	bne.n	fc3e <readingDataFromDHTSensor+0x32>
        printk("DHT11_NO_DATA_1\n");
    fc54:	480d      	ldr	r0, [pc, #52]	; (fc8c <readingDataFromDHTSensor+0x80>)
    fc56:	f015 fdea 	bl	2582e <printk>
        return DHT_FAIL;
    fc5a:	2001      	movs	r0, #1
    fc5c:	e7ec      	b.n	fc38 <readingDataFromDHTSensor+0x2c>
    data <<= 1; /* next data bit */
    fc5e:	0076      	lsls	r6, r6, #1
    if (cntr<10) /* data signal high > 30 us ==> data bit 1 */
    fc60:	2c09      	cmp	r4, #9
    fc62:	dc01      	bgt.n	fc68 <readingDataFromDHTSensor+0x5c>
      data |= 1;
    fc64:	f046 0601 	orr.w	r6, r6, #1
    if ((loopBits&0x7)==1) /* next byte */
    fc68:	f007 0307 	and.w	r3, r7, #7
    fc6c:	2b01      	cmp	r3, #1
    fc6e:	d003      	beq.n	fc78 <readingDataFromDHTSensor+0x6c>
  } while(--loopBits!=0);
    fc70:	3f01      	subs	r7, #1
    fc72:	d1d1      	bne.n	fc18 <readingDataFromDHTSensor+0xc>
  return DHT_SUCCESS;
    fc74:	2000      	movs	r0, #0
    fc76:	e7df      	b.n	fc38 <readingDataFromDHTSensor+0x2c>
      buffer[i] = data;
    fc78:	f805 6008 	strb.w	r6, [r5, r8]
      i++;
    fc7c:	f108 0801 	add.w	r8, r8, #1
      data = 0;
    fc80:	2600      	movs	r6, #0
    fc82:	e7f5      	b.n	fc70 <readingDataFromDHTSensor+0x64>
    fc84:	50000300 	.word	0x50000300
    fc88:	0002a0f0 	.word	0x0002a0f0
    fc8c:	0002a104 	.word	0x0002a104

0000fc90 <verifyReturnedBuffer>:
  
DHTErrorCode verifyReturnedBuffer(uint8_t *buffer)
{
    fc90:	b508      	push	{r3, lr}
  if ((uint8_t)(buffer[0]+buffer[1]+buffer[2]+buffer[3])!=buffer[4]) 
    fc92:	7803      	ldrb	r3, [r0, #0]
    fc94:	7842      	ldrb	r2, [r0, #1]
    fc96:	4413      	add	r3, r2
    fc98:	f990 2002 	ldrsb.w	r2, [r0, #2]
    fc9c:	fa42 f383 	sxtab	r3, r2, r3
    fca0:	f990 2003 	ldrsb.w	r2, [r0, #3]
    fca4:	fa42 f383 	sxtab	r3, r2, r3
    fca8:	b25b      	sxtb	r3, r3
    fcaa:	f990 2004 	ldrsb.w	r2, [r0, #4]
    fcae:	4293      	cmp	r3, r2
    fcb0:	d101      	bne.n	fcb6 <verifyReturnedBuffer+0x26>
  {
      printk("DHT11_BAD_CRC\n");
      return DHT_FAIL;
  }
  return DHT_SUCCESS;
    fcb2:	2000      	movs	r0, #0
}
    fcb4:	bd08      	pop	{r3, pc}
      printk("DHT11_BAD_CRC\n");
    fcb6:	4802      	ldr	r0, [pc, #8]	; (fcc0 <verifyReturnedBuffer+0x30>)
    fcb8:	f015 fdb9 	bl	2582e <printk>
      return DHT_FAIL;
    fcbc:	2001      	movs	r0, #1
    fcbe:	e7f9      	b.n	fcb4 <verifyReturnedBuffer+0x24>
    fcc0:	0002a118 	.word	0x0002a118

0000fcc4 <dhtRead>:
//--------------------------------------------------------

// INTERFACE

DHTErrorCode dhtRead(struct DHTReadings* dht)
{
    fcc4:	b530      	push	{r4, r5, lr}
    fcc6:	b083      	sub	sp, #12
    fcc8:	4605      	mov	r5, r0
  // BUFFER TO RECEIVE
  uint8_t buffer[5];
  int i;

  /* init buffer */
  for(i=0;i<sizeof(buffer); i++) 
    fcca:	2300      	movs	r3, #0
    fccc:	2b04      	cmp	r3, #4
    fcce:	d806      	bhi.n	fcde <dhtRead+0x1a>
  {
      buffer[i] = 0;
    fcd0:	aa02      	add	r2, sp, #8
    fcd2:	441a      	add	r2, r3
    fcd4:	2100      	movs	r1, #0
    fcd6:	f802 1c08 	strb.w	r1, [r2, #-8]
  for(i=0;i<sizeof(buffer); i++) 
    fcda:	3301      	adds	r3, #1
    fcdc:	e7f6      	b.n	fccc <dhtRead+0x8>
  }

  sendSignalToDHTSensor();
    fcde:	f7ff ff3b 	bl	fb58 <sendSignalToDHTSensor>

  if (waitForDHTResponse() == DHT_FAIL)
    fce2:	f7ff ff55 	bl	fb90 <waitForDHTResponse>
    fce6:	4604      	mov	r4, r0
    fce8:	2801      	cmp	r0, #1
    fcea:	d01e      	beq.n	fd2a <dhtRead+0x66>
  {
    printk("Big Fail");
    return DHT_FAIL;
  }
  if (readingDataFromDHTSensor(buffer) == DHT_FAIL)
    fcec:	4668      	mov	r0, sp
    fcee:	f7ff ff8d 	bl	fc0c <readingDataFromDHTSensor>
    fcf2:	4604      	mov	r4, r0
    fcf4:	2801      	cmp	r0, #1
    fcf6:	d01c      	beq.n	fd32 <dhtRead+0x6e>
  {
    printk("Very Big Fail");
    return DHT_FAIL;
  }
  if (verifyReturnedBuffer(buffer) == DHT_FAIL)
    fcf8:	4668      	mov	r0, sp
    fcfa:	f7ff ffc9 	bl	fc90 <verifyReturnedBuffer>
    fcfe:	4604      	mov	r4, r0
    fd00:	2801      	cmp	r0, #1
    fd02:	d01a      	beq.n	fd3a <dhtRead+0x76>
  {
    printk("Very very  Big Fail");
    return DHT_FAIL;
  }
  
  if (dht->dhtModel == DHT22)
    fd04:	7c2b      	ldrb	r3, [r5, #16]
    fd06:	2b01      	cmp	r3, #1
    fd08:	d01b      	beq.n	fd42 <dhtRead+0x7e>
    dht->temperatureIntPart = f / 10; 
    dht->temperatureDecimalPart = f % 10;
  }
  else
  {
    dht->humidityIntPart = buffer[0];
    fd0a:	f89d 3000 	ldrb.w	r3, [sp]
    fd0e:	60ab      	str	r3, [r5, #8]
    dht->humidityDecimalPart = buffer[1];
    fd10:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fd14:	60eb      	str	r3, [r5, #12]

    dht->temperatureIntPart = buffer[2];
    fd16:	f89d 3002 	ldrb.w	r3, [sp, #2]
    fd1a:	602b      	str	r3, [r5, #0]
    dht->temperatureDecimalPart = buffer[3];
    fd1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    fd20:	606b      	str	r3, [r5, #4]
  }

  return DHT_SUCCESS;
    fd22:	2400      	movs	r4, #0
    fd24:	4620      	mov	r0, r4
    fd26:	b003      	add	sp, #12
    fd28:	bd30      	pop	{r4, r5, pc}
    printk("Big Fail");
    fd2a:	4817      	ldr	r0, [pc, #92]	; (fd88 <dhtRead+0xc4>)
    fd2c:	f015 fd7f 	bl	2582e <printk>
    return DHT_FAIL;
    fd30:	e7f8      	b.n	fd24 <dhtRead+0x60>
    printk("Very Big Fail");
    fd32:	4816      	ldr	r0, [pc, #88]	; (fd8c <dhtRead+0xc8>)
    fd34:	f015 fd7b 	bl	2582e <printk>
    return DHT_FAIL;
    fd38:	e7f4      	b.n	fd24 <dhtRead+0x60>
    printk("Very very  Big Fail");
    fd3a:	4815      	ldr	r0, [pc, #84]	; (fd90 <dhtRead+0xcc>)
    fd3c:	f015 fd77 	bl	2582e <printk>
    return DHT_FAIL;
    fd40:	e7f0      	b.n	fd24 <dhtRead+0x60>
    int f = (buffer[0]) << 8 | buffer[1];
    fd42:	f89d 2000 	ldrb.w	r2, [sp]
    fd46:	f89d 1001 	ldrb.w	r1, [sp, #1]
    fd4a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    dht->humidityIntPart = f / 10;
    fd4e:	f103 3366 	add.w	r3, r3, #1717986918	; 0x66666666
    fd52:	fb83 0201 	smull	r0, r2, r3, r1
    fd56:	1092      	asrs	r2, r2, #2
    fd58:	60aa      	str	r2, [r5, #8]
    dht->humidityDecimalPart = f % 10;
    fd5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    fd5e:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    fd62:	60ea      	str	r2, [r5, #12]
    f = (buffer[2]) << 8 | buffer[3];
    fd64:	f89d 1002 	ldrb.w	r1, [sp, #2]
    fd68:	f89d 2003 	ldrb.w	r2, [sp, #3]
    fd6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    dht->temperatureIntPart = f / 10; 
    fd70:	fb83 1302 	smull	r1, r3, r3, r2
    fd74:	109b      	asrs	r3, r3, #2
    fd76:	602b      	str	r3, [r5, #0]
    dht->temperatureDecimalPart = f % 10;
    fd78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    fd7c:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    fd80:	606b      	str	r3, [r5, #4]
  return DHT_SUCCESS;
    fd82:	2400      	movs	r4, #0
    fd84:	e7ce      	b.n	fd24 <dhtRead+0x60>
    fd86:	bf00      	nop
    fd88:	0002a128 	.word	0x0002a128
    fd8c:	0002a134 	.word	0x0002a134
    fd90:	0002a144 	.word	0x0002a144

0000fd94 <bt_ready>:
    BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_REMOTE_SERV_VAL),
};

/* Callbacks */
void bt_ready(int err)
{
    fd94:	b508      	push	{r3, lr}
    if (err) 
    fd96:	b918      	cbnz	r0, fda0 <bt_ready+0xc>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    fd98:	480a      	ldr	r0, [pc, #40]	; (fdc4 <bt_ready+0x30>)
    fd9a:	f00f fa31 	bl	1f200 <z_impl_k_sem_give>
    {
        LOG_ERR("bt_enable returned %d", err);
    }
    k_sem_give(&bt_init_ok);
}
    fd9e:	bd08      	pop	{r3, pc}
    fda0:	4601      	mov	r1, r0
    fda2:	4b09      	ldr	r3, [pc, #36]	; (fdc8 <bt_ready+0x34>)
    fda4:	4a09      	ldr	r2, [pc, #36]	; (fdcc <bt_ready+0x38>)
    fda6:	1a9b      	subs	r3, r3, r2
    fda8:	08db      	lsrs	r3, r3, #3
        LOG_ERR("bt_enable returned %d", err);
    fdaa:	f04f 0200 	mov.w	r2, #0
    fdae:	2001      	movs	r0, #1
    fdb0:	f360 0202 	bfi	r2, r0, #0, #3
    fdb4:	f36f 02c5 	bfc	r2, #3, #3
    fdb8:	f363 128f 	bfi	r2, r3, #6, #10
    fdbc:	4804      	ldr	r0, [pc, #16]	; (fdd0 <bt_ready+0x3c>)
    fdbe:	f001 fe29 	bl	11a14 <log_1>
    fdc2:	e7e9      	b.n	fd98 <bt_ready+0x4>
    fdc4:	20000794 	.word	0x20000794
    fdc8:	00029e18 	.word	0x00029e18
    fdcc:	00029d70 	.word	0x00029d70
    fdd0:	0002a158 	.word	0x0002a158

0000fdd4 <bluetooth_init>:


int bluetooth_init(struct bt_conn_cb *bt_cb)
{
    fdd4:	b530      	push	{r4, r5, lr}
    fdd6:	b089      	sub	sp, #36	; 0x24
    fdd8:	4604      	mov	r4, r0
    fdda:	4b2c      	ldr	r3, [pc, #176]	; (fe8c <bluetooth_init+0xb8>)
    fddc:	4a2c      	ldr	r2, [pc, #176]	; (fe90 <bluetooth_init+0xbc>)
    fdde:	1a9b      	subs	r3, r3, r2
    fde0:	08db      	lsrs	r3, r3, #3
    int err;
    LOG_INF("Initializing Bluetooth");
    fde2:	f04f 0100 	mov.w	r1, #0
    fde6:	2203      	movs	r2, #3
    fde8:	f362 0102 	bfi	r1, r2, #0, #3
    fdec:	f36f 01c5 	bfc	r1, #3, #3
    fdf0:	f363 118f 	bfi	r1, r3, #6, #10
    fdf4:	4827      	ldr	r0, [pc, #156]	; (fe94 <bluetooth_init+0xc0>)
    fdf6:	f001 fddd 	bl	119b4 <log_0>

    if (bt_cb == NULL)
    fdfa:	2c00      	cmp	r4, #0
    fdfc:	d044      	beq.n	fe88 <bluetooth_init+0xb4>
    {
        return -NRFX_ERROR_NULL;
    }

    bt_conn_cb_register(bt_cb);
    fdfe:	4620      	mov	r0, r4
    fe00:	f007 fcd8 	bl	177b4 <bt_conn_cb_register>


    err = bt_enable(bt_ready);
    fe04:	4824      	ldr	r0, [pc, #144]	; (fe98 <bluetooth_init+0xc4>)
    fe06:	f006 f84f 	bl	15ea8 <bt_enable>
	if (err) 
    fe0a:	4601      	mov	r1, r0
    fe0c:	b9c8      	cbnz	r0, fe42 <bluetooth_init+0x6e>
	return z_impl_k_sem_take(sem, timeout);
    fe0e:	f04f 32ff 	mov.w	r2, #4294967295
    fe12:	f04f 33ff 	mov.w	r3, #4294967295
    fe16:	4821      	ldr	r0, [pc, #132]	; (fe9c <bluetooth_init+0xc8>)
    fe18:	f00f fa3a 	bl	1f290 <z_impl_k_sem_take>
    {
        LOG_ERR("bt_ready err: %d", err);
    }
    k_sem_take(&bt_init_ok, K_FOREVER);

    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    fe1c:	ac03      	add	r4, sp, #12
    fe1e:	4d20      	ldr	r5, [pc, #128]	; (fea0 <bluetooth_init+0xcc>)
    fe20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fe22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    fe24:	682b      	ldr	r3, [r5, #0]
    fe26:	6023      	str	r3, [r4, #0]
    fe28:	2301      	movs	r3, #1
    fe2a:	9300      	str	r3, [sp, #0]
    fe2c:	4b1d      	ldr	r3, [pc, #116]	; (fea4 <bluetooth_init+0xd0>)
    fe2e:	2202      	movs	r2, #2
    fe30:	491d      	ldr	r1, [pc, #116]	; (fea8 <bluetooth_init+0xd4>)
    fe32:	a803      	add	r0, sp, #12
    fe34:	f006 fe9e 	bl	16b74 <bt_le_adv_start>
    if (err)
    fe38:	4604      	mov	r4, r0
    fe3a:	b998      	cbnz	r0, fe64 <bluetooth_init+0x90>
        LOG_ERR("couldn't start advertising (err = %d", err);
        return err;
    }

    return err;
    fe3c:	4620      	mov	r0, r4
    fe3e:	b009      	add	sp, #36	; 0x24
    fe40:	bd30      	pop	{r4, r5, pc}
    fe42:	4b12      	ldr	r3, [pc, #72]	; (fe8c <bluetooth_init+0xb8>)
    fe44:	4a12      	ldr	r2, [pc, #72]	; (fe90 <bluetooth_init+0xbc>)
    fe46:	1a9b      	subs	r3, r3, r2
    fe48:	08db      	lsrs	r3, r3, #3
        LOG_ERR("bt_ready err: %d", err);
    fe4a:	f04f 0200 	mov.w	r2, #0
    fe4e:	2001      	movs	r0, #1
    fe50:	f360 0202 	bfi	r2, r0, #0, #3
    fe54:	f36f 02c5 	bfc	r2, #3, #3
    fe58:	f363 128f 	bfi	r2, r3, #6, #10
    fe5c:	4813      	ldr	r0, [pc, #76]	; (feac <bluetooth_init+0xd8>)
    fe5e:	f001 fdd9 	bl	11a14 <log_1>
    fe62:	e7d4      	b.n	fe0e <bluetooth_init+0x3a>
    fe64:	4b09      	ldr	r3, [pc, #36]	; (fe8c <bluetooth_init+0xb8>)
    fe66:	4a0a      	ldr	r2, [pc, #40]	; (fe90 <bluetooth_init+0xbc>)
    fe68:	1a9b      	subs	r3, r3, r2
    fe6a:	08db      	lsrs	r3, r3, #3
        LOG_ERR("couldn't start advertising (err = %d", err);
    fe6c:	f04f 0200 	mov.w	r2, #0
    fe70:	2101      	movs	r1, #1
    fe72:	f361 0202 	bfi	r2, r1, #0, #3
    fe76:	f36f 02c5 	bfc	r2, #3, #3
    fe7a:	f363 128f 	bfi	r2, r3, #6, #10
    fe7e:	4601      	mov	r1, r0
    fe80:	480b      	ldr	r0, [pc, #44]	; (feb0 <bluetooth_init+0xdc>)
    fe82:	f001 fdc7 	bl	11a14 <log_1>
        return err;
    fe86:	e7d9      	b.n	fe3c <bluetooth_init+0x68>
        return -NRFX_ERROR_NULL;
    fe88:	4c0a      	ldr	r4, [pc, #40]	; (feb4 <bluetooth_init+0xe0>)
    fe8a:	e7d7      	b.n	fe3c <bluetooth_init+0x68>
    fe8c:	00029e18 	.word	0x00029e18
    fe90:	00029d70 	.word	0x00029d70
    fe94:	0002a170 	.word	0x0002a170
    fe98:	0000fd95 	.word	0x0000fd95
    fe9c:	20000794 	.word	0x20000794
    fea0:	00029ec0 	.word	0x00029ec0
    fea4:	0002a1f0 	.word	0x0002a1f0
    fea8:	0002a1e0 	.word	0x0002a1e0
    feac:	0002a188 	.word	0x0002a188
    feb0:	0002a19c 	.word	0x0002a19c
    feb4:	f452fff7 	.word	0xf452fff7

0000feb8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    feb8:	b570      	push	{r4, r5, r6, lr}
    feba:	4604      	mov	r4, r0
    febc:	460d      	mov	r5, r1
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    febe:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    fec0:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    fec4:	6081      	str	r1, [r0, #8]
	switch (method) {
    fec6:	2b02      	cmp	r3, #2
    fec8:	d014      	beq.n	fef4 <sys_notify_finalize+0x3c>
    feca:	2b03      	cmp	r3, #3
    fecc:	d00f      	beq.n	feee <sys_notify_finalize+0x36>
    fece:	2b01      	cmp	r3, #1
    fed0:	d013      	beq.n	fefa <sys_notify_finalize+0x42>
		break;
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    fed2:	4e0f      	ldr	r6, [pc, #60]	; (ff10 <sys_notify_finalize+0x58>)
    fed4:	2345      	movs	r3, #69	; 0x45
    fed6:	4632      	mov	r2, r6
    fed8:	490e      	ldr	r1, [pc, #56]	; (ff14 <sys_notify_finalize+0x5c>)
    feda:	480f      	ldr	r0, [pc, #60]	; (ff18 <sys_notify_finalize+0x60>)
    fedc:	f015 fca7 	bl	2582e <printk>
    fee0:	2145      	movs	r1, #69	; 0x45
    fee2:	4630      	mov	r0, r6
    fee4:	f015 ff25 	bl	25d32 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    fee8:	2600      	movs	r6, #0
	struct k_poll_signal *sig = NULL;
    feea:	4630      	mov	r0, r6
    feec:	e007      	b.n	fefe <sys_notify_finalize+0x46>
		rv = notify->method.callback;
    feee:	6806      	ldr	r6, [r0, #0]
	struct k_poll_signal *sig = NULL;
    fef0:	2000      	movs	r0, #0
		break;
    fef2:	e004      	b.n	fefe <sys_notify_finalize+0x46>
		sig = notify->method.signal;
    fef4:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    fef6:	2600      	movs	r6, #0
		break;
    fef8:	e001      	b.n	fefe <sys_notify_finalize+0x46>
	switch (method) {
    fefa:	2600      	movs	r6, #0
    fefc:	4630      	mov	r0, r6
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    fefe:	2300      	movs	r3, #0
    ff00:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    ff02:	b110      	cbz	r0, ff0a <sys_notify_finalize+0x52>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    ff04:	4629      	mov	r1, r5
    ff06:	f012 ff25 	bl	22d54 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    ff0a:	4630      	mov	r0, r6
    ff0c:	bd70      	pop	{r4, r5, r6, pc}
    ff0e:	bf00      	nop
    ff10:	0002a1f8 	.word	0x0002a1f8
    ff14:	0002dc18 	.word	0x0002dc18
    ff18:	00029ff8 	.word	0x00029ff8

0000ff1c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    ff1c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    ff1e:	680b      	ldr	r3, [r1, #0]
    ff20:	3301      	adds	r3, #1
    ff22:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    ff24:	4b01      	ldr	r3, [pc, #4]	; (ff2c <char_out+0x10>)
    ff26:	681b      	ldr	r3, [r3, #0]
    ff28:	4798      	blx	r3
}
    ff2a:	bd08      	pop	{r3, pc}
    ff2c:	20000448 	.word	0x20000448

0000ff30 <__printk_hook_install>:
	_char_out = fn;
    ff30:	4b01      	ldr	r3, [pc, #4]	; (ff38 <__printk_hook_install+0x8>)
    ff32:	6018      	str	r0, [r3, #0]
}
    ff34:	4770      	bx	lr
    ff36:	bf00      	nop
    ff38:	20000448 	.word	0x20000448

0000ff3c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    ff3c:	b500      	push	{lr}
    ff3e:	b083      	sub	sp, #12
    ff40:	4602      	mov	r2, r0
    ff42:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    ff44:	2100      	movs	r1, #0
    ff46:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    ff48:	a901      	add	r1, sp, #4
    ff4a:	4803      	ldr	r0, [pc, #12]	; (ff58 <vprintk+0x1c>)
    ff4c:	f000 fcfe 	bl	1094c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    ff50:	b003      	add	sp, #12
    ff52:	f85d fb04 	ldr.w	pc, [sp], #4
    ff56:	bf00      	nop
    ff58:	0000ff1d 	.word	0x0000ff1d

0000ff5c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    ff5c:	b510      	push	{r4, lr}
    ff5e:	b084      	sub	sp, #16
    ff60:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    ff62:	9001      	str	r0, [sp, #4]
    ff64:	9102      	str	r1, [sp, #8]
    ff66:	2100      	movs	r1, #0
    ff68:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    ff6a:	a901      	add	r1, sp, #4
    ff6c:	4805      	ldr	r0, [pc, #20]	; (ff84 <vsnprintk+0x28>)
    ff6e:	f000 fced 	bl	1094c <cbvprintf>

	if (ctx.count < ctx.max) {
    ff72:	9b03      	ldr	r3, [sp, #12]
    ff74:	9a02      	ldr	r2, [sp, #8]
    ff76:	4293      	cmp	r3, r2
    ff78:	da01      	bge.n	ff7e <vsnprintk+0x22>
		str[ctx.count] = '\0';
    ff7a:	2200      	movs	r2, #0
    ff7c:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    ff7e:	9803      	ldr	r0, [sp, #12]
    ff80:	b004      	add	sp, #16
    ff82:	bd10      	pop	{r4, pc}
    ff84:	000257ff 	.word	0x000257ff

0000ff88 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    ff88:	b538      	push	{r3, r4, r5, lr}
    ff8a:	4604      	mov	r4, r0
    ff8c:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ff8e:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    ff90:	2a00      	cmp	r2, #0
    ff92:	db14      	blt.n	ffbe <process_complete+0x36>
    ff94:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    ff98:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    ff9a:	2a01      	cmp	r2, #1
    ff9c:	d91b      	bls.n	ffd6 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    ff9e:	2b04      	cmp	r3, #4
    ffa0:	d04f      	beq.n	10042 <process_complete+0xba>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    ffa2:	4c2e      	ldr	r4, [pc, #184]	; (1005c <process_complete+0xd4>)
    ffa4:	f240 131b 	movw	r3, #283	; 0x11b
    ffa8:	4622      	mov	r2, r4
    ffaa:	492d      	ldr	r1, [pc, #180]	; (10060 <process_complete+0xd8>)
    ffac:	482d      	ldr	r0, [pc, #180]	; (10064 <process_complete+0xdc>)
    ffae:	f015 fc3e 	bl	2582e <printk>
    ffb2:	f240 111b 	movw	r1, #283	; 0x11b
    ffb6:	4620      	mov	r0, r4
    ffb8:	f015 febb 	bl	25d32 <assert_post_action>
	}
}
    ffbc:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    ffbe:	e9d0 0100 	ldrd	r0, r1, [r0]
    ffc2:	e885 0003 	stmia.w	r5, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    ffc6:	2300      	movs	r3, #0
    ffc8:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    ffca:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    ffcc:	2101      	movs	r1, #1
    ffce:	4620      	mov	r0, r4
    ffd0:	f015 fc49 	bl	25866 <set_state>
    ffd4:	e7f2      	b.n	ffbc <process_complete+0x34>
		*clients = mgr->clients;
    ffd6:	e9d0 0100 	ldrd	r0, r1, [r0]
    ffda:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    ffde:	2200      	movs	r2, #0
    ffe0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    ffe2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    ffe4:	2b06      	cmp	r3, #6
    ffe6:	d00f      	beq.n	10008 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    ffe8:	2b05      	cmp	r3, #5
    ffea:	d11c      	bne.n	10026 <process_complete+0x9e>
			set_state(mgr, ONOFF_STATE_OFF);
    ffec:	2100      	movs	r1, #0
    ffee:	4620      	mov	r0, r4
    fff0:	f015 fc39 	bl	25866 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    fff4:	4620      	mov	r0, r4
    fff6:	f015 fc5d 	bl	258b4 <process_recheck>
    fffa:	2800      	cmp	r0, #0
    fffc:	d0de      	beq.n	ffbc <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fffe:	8ba3      	ldrh	r3, [r4, #28]
   10000:	f043 0320 	orr.w	r3, r3, #32
   10004:	83a3      	strh	r3, [r4, #28]
   10006:	e7d9      	b.n	ffbc <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10008:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1000a:	b13b      	cbz	r3, 1001c <process_complete+0x94>
				mgr->refs += 1U;
   1000c:	8be2      	ldrh	r2, [r4, #30]
   1000e:	3201      	adds	r2, #1
   10010:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   10012:	2b00      	cmp	r3, #0
   10014:	d0f9      	beq.n	1000a <process_complete+0x82>
	return node->next;
   10016:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10018:	2b00      	cmp	r3, #0
   1001a:	d1f6      	bne.n	1000a <process_complete+0x82>
			set_state(mgr, ONOFF_STATE_ON);
   1001c:	2102      	movs	r1, #2
   1001e:	4620      	mov	r0, r4
   10020:	f015 fc21 	bl	25866 <set_state>
   10024:	e7e6      	b.n	fff4 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   10026:	4d0d      	ldr	r5, [pc, #52]	; (1005c <process_complete+0xd4>)
   10028:	f240 1309 	movw	r3, #265	; 0x109
   1002c:	462a      	mov	r2, r5
   1002e:	490e      	ldr	r1, [pc, #56]	; (10068 <process_complete+0xe0>)
   10030:	480c      	ldr	r0, [pc, #48]	; (10064 <process_complete+0xdc>)
   10032:	f015 fbfc 	bl	2582e <printk>
   10036:	f240 1109 	movw	r1, #265	; 0x109
   1003a:	4628      	mov	r0, r5
   1003c:	f015 fe79 	bl	25d32 <assert_post_action>
   10040:	e7d4      	b.n	ffec <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
   10042:	2100      	movs	r1, #0
   10044:	f015 fc0f 	bl	25866 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   10048:	4620      	mov	r0, r4
   1004a:	f015 fc33 	bl	258b4 <process_recheck>
   1004e:	2800      	cmp	r0, #0
   10050:	d0b4      	beq.n	ffbc <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10052:	8ba3      	ldrh	r3, [r4, #28]
   10054:	f043 0320 	orr.w	r3, r3, #32
   10058:	83a3      	strh	r3, [r4, #28]
   1005a:	e7af      	b.n	ffbc <process_complete+0x34>
   1005c:	0002a21c 	.word	0x0002a21c
   10060:	0002dc18 	.word	0x0002dc18
   10064:	00029ff8 	.word	0x00029ff8
   10068:	0002a240 	.word	0x0002a240

0001006c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1006c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10070:	b083      	sub	sp, #12
   10072:	4604      	mov	r4, r0
   10074:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10076:	8b83      	ldrh	r3, [r0, #28]
   10078:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
   1007c:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
   10080:	460d      	mov	r5, r1
   10082:	b131      	cbz	r1, 10092 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10084:	f1b8 0f00 	cmp.w	r8, #0
   10088:	d112      	bne.n	100b0 <process_event+0x44>
	list->head = NULL;
   1008a:	2300      	movs	r3, #0
   1008c:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   1008e:	9301      	str	r3, [sp, #4]
}
   10090:	e0aa      	b.n	101e8 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
   10092:	f8df 930c 	ldr.w	r9, [pc, #780]	; 103a0 <process_event+0x334>
   10096:	f240 1333 	movw	r3, #307	; 0x133
   1009a:	464a      	mov	r2, r9
   1009c:	49be      	ldr	r1, [pc, #760]	; (10398 <process_event+0x32c>)
   1009e:	48bf      	ldr	r0, [pc, #764]	; (1039c <process_event+0x330>)
   100a0:	f015 fbc5 	bl	2582e <printk>
   100a4:	f240 1133 	movw	r1, #307	; 0x133
   100a8:	4648      	mov	r0, r9
   100aa:	f015 fe42 	bl	25d32 <assert_post_action>
   100ae:	e7e9      	b.n	10084 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
   100b0:	2d01      	cmp	r5, #1
   100b2:	d013      	beq.n	100dc <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   100b4:	2d02      	cmp	r5, #2
   100b6:	d116      	bne.n	100e6 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
   100b8:	8ba3      	ldrh	r3, [r4, #28]
   100ba:	f043 0320 	orr.w	r3, r3, #32
   100be:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   100c0:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   100c2:	4620      	mov	r0, r4
   100c4:	f00e fae6 	bl	1e694 <z_spin_unlock_valid>
   100c8:	2800      	cmp	r0, #0
   100ca:	f000 81a3 	beq.w	10414 <process_event+0x3a8>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   100ce:	f386 8811 	msr	BASEPRI, r6
   100d2:	f3bf 8f6f 	isb	sy
}
   100d6:	b003      	add	sp, #12
   100d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   100dc:	8ba3      	ldrh	r3, [r4, #28]
   100de:	f043 0310 	orr.w	r3, r3, #16
   100e2:	83a3      	strh	r3, [r4, #28]
   100e4:	e7ec      	b.n	100c0 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   100e6:	4dae      	ldr	r5, [pc, #696]	; (103a0 <process_event+0x334>)
   100e8:	f44f 739e 	mov.w	r3, #316	; 0x13c
   100ec:	462a      	mov	r2, r5
   100ee:	49ad      	ldr	r1, [pc, #692]	; (103a4 <process_event+0x338>)
   100f0:	48aa      	ldr	r0, [pc, #680]	; (1039c <process_event+0x330>)
   100f2:	f015 fb9c 	bl	2582e <printk>
   100f6:	f44f 719e 	mov.w	r1, #316	; 0x13c
   100fa:	4628      	mov	r0, r5
   100fc:	f015 fe19 	bl	25d32 <assert_post_action>
   10100:	e7da      	b.n	100b8 <process_event+0x4c>
			evt = process_recheck(mgr);
   10102:	4620      	mov	r0, r4
   10104:	f015 fbd6 	bl	258b4 <process_recheck>
   10108:	4605      	mov	r5, r0
   1010a:	e06f      	b.n	101ec <process_event+0x180>
			res = mgr->last_res;
   1010c:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
   10110:	464a      	mov	r2, r9
   10112:	4669      	mov	r1, sp
   10114:	4620      	mov	r0, r4
   10116:	f7ff ff37 	bl	ff88 <process_complete>
		onoff_transition_fn transit = NULL;
   1011a:	2500      	movs	r5, #0
   1011c:	e011      	b.n	10142 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1011e:	2f00      	cmp	r7, #0
   10120:	f040 8081 	bne.w	10226 <process_event+0x1ba>
	return list->head;
   10124:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10126:	2b00      	cmp	r3, #0
   10128:	f000 808b 	beq.w	10242 <process_event+0x1d6>
			transit = mgr->transitions->start;
   1012c:	6923      	ldr	r3, [r4, #16]
   1012e:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   10130:	2d00      	cmp	r5, #0
   10132:	f000 8094 	beq.w	1025e <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
   10136:	2106      	movs	r1, #6
   10138:	4620      	mov	r0, r4
   1013a:	f015 fb94 	bl	25866 <set_state>
		res = 0;
   1013e:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10142:	8ba3      	ldrh	r3, [r4, #28]
   10144:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10148:	45b8      	cmp	r8, r7
   1014a:	f000 810b 	beq.w	10364 <process_event+0x2f8>
   1014e:	68a2      	ldr	r2, [r4, #8]
   10150:	2a00      	cmp	r2, #0
   10152:	f000 8109 	beq.w	10368 <process_event+0x2fc>
   10156:	2201      	movs	r2, #1
		if (do_monitors
   10158:	4617      	mov	r7, r2
   1015a:	b91a      	cbnz	r2, 10164 <process_event+0xf8>
   1015c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   1015e:	2a00      	cmp	r2, #0
   10160:	f000 8104 	beq.w	1036c <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10164:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   10168:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   1016a:	f104 0a14 	add.w	sl, r4, #20
   1016e:	4650      	mov	r0, sl
   10170:	f00e fa90 	bl	1e694 <z_spin_unlock_valid>
   10174:	2800      	cmp	r0, #0
   10176:	f000 80fd 	beq.w	10374 <process_event+0x308>
   1017a:	f386 8811 	msr	BASEPRI, r6
   1017e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10182:	2f00      	cmp	r7, #0
   10184:	f040 8126 	bne.w	103d4 <process_event+0x368>
   10188:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   1018a:	b12b      	cbz	r3, 10198 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
   1018c:	464b      	mov	r3, r9
   1018e:	4642      	mov	r2, r8
   10190:	4669      	mov	r1, sp
   10192:	4620      	mov	r0, r4
   10194:	f015 fbd0 	bl	25938 <notify_all>
			if (transit != NULL) {
   10198:	b115      	cbz	r5, 101a0 <process_event+0x134>
				transit(mgr, transition_complete);
   1019a:	4983      	ldr	r1, [pc, #524]	; (103a8 <process_event+0x33c>)
   1019c:	4620      	mov	r0, r4
   1019e:	47a8      	blx	r5
	__asm__ volatile(
   101a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   101a4:	f3ef 8611 	mrs	r6, BASEPRI
   101a8:	f383 8812 	msr	BASEPRI_MAX, r3
   101ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   101b0:	4650      	mov	r0, sl
   101b2:	f00e fa5f 	bl	1e674 <z_spin_lock_valid>
   101b6:	2800      	cmp	r0, #0
   101b8:	f000 8112 	beq.w	103e0 <process_event+0x374>
	z_spin_lock_set_owner(l);
   101bc:	4650      	mov	r0, sl
   101be:	f00e fa79 	bl	1e6b4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   101c2:	8ba3      	ldrh	r3, [r4, #28]
   101c4:	f023 0308 	bic.w	r3, r3, #8
   101c8:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   101ca:	8ba3      	ldrh	r3, [r4, #28]
   101cc:	f013 0f10 	tst.w	r3, #16
   101d0:	f000 8116 	beq.w	10400 <process_event+0x394>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   101d4:	f023 0310 	bic.w	r3, r3, #16
   101d8:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   101da:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   101dc:	8ba7      	ldrh	r7, [r4, #28]
   101de:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
   101e2:	2d00      	cmp	r5, #0
   101e4:	f43f af6c 	beq.w	100c0 <process_event+0x54>
		if (evt == EVT_RECHECK) {
   101e8:	2d02      	cmp	r5, #2
   101ea:	d08a      	beq.n	10102 <process_event+0x96>
		if (evt == EVT_NOP) {
   101ec:	2d00      	cmp	r5, #0
   101ee:	f43f af67 	beq.w	100c0 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
   101f2:	2d01      	cmp	r5, #1
   101f4:	d08a      	beq.n	1010c <process_event+0xa0>
		} else if (evt == EVT_START) {
   101f6:	2d03      	cmp	r5, #3
   101f8:	d091      	beq.n	1011e <process_event+0xb2>
		} else if (evt == EVT_STOP) {
   101fa:	2d04      	cmp	r5, #4
   101fc:	d03e      	beq.n	1027c <process_event+0x210>
		} else if (evt == EVT_RESET) {
   101fe:	2d05      	cmp	r5, #5
   10200:	f040 80a0 	bne.w	10344 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10204:	2f01      	cmp	r7, #1
   10206:	d172      	bne.n	102ee <process_event+0x282>
   10208:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1020a:	2b00      	cmp	r3, #0
   1020c:	d07d      	beq.n	1030a <process_event+0x29e>
			transit = mgr->transitions->reset;
   1020e:	6923      	ldr	r3, [r4, #16]
   10210:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   10212:	2d00      	cmp	r5, #0
   10214:	f000 8087 	beq.w	10326 <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
   10218:	2105      	movs	r1, #5
   1021a:	4620      	mov	r0, r4
   1021c:	f015 fb23 	bl	25866 <set_state>
		res = 0;
   10220:	f04f 0900 	mov.w	r9, #0
   10224:	e78d      	b.n	10142 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   10226:	4d5e      	ldr	r5, [pc, #376]	; (103a0 <process_event+0x334>)
   10228:	f44f 73ab 	mov.w	r3, #342	; 0x156
   1022c:	462a      	mov	r2, r5
   1022e:	495f      	ldr	r1, [pc, #380]	; (103ac <process_event+0x340>)
   10230:	485a      	ldr	r0, [pc, #360]	; (1039c <process_event+0x330>)
   10232:	f015 fafc 	bl	2582e <printk>
   10236:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1023a:	4628      	mov	r0, r5
   1023c:	f015 fd79 	bl	25d32 <assert_post_action>
   10240:	e770      	b.n	10124 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10242:	4d57      	ldr	r5, [pc, #348]	; (103a0 <process_event+0x334>)
   10244:	f240 1357 	movw	r3, #343	; 0x157
   10248:	462a      	mov	r2, r5
   1024a:	4959      	ldr	r1, [pc, #356]	; (103b0 <process_event+0x344>)
   1024c:	4853      	ldr	r0, [pc, #332]	; (1039c <process_event+0x330>)
   1024e:	f015 faee 	bl	2582e <printk>
   10252:	f240 1157 	movw	r1, #343	; 0x157
   10256:	4628      	mov	r0, r5
   10258:	f015 fd6b 	bl	25d32 <assert_post_action>
   1025c:	e766      	b.n	1012c <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
   1025e:	f8df 8140 	ldr.w	r8, [pc, #320]	; 103a0 <process_event+0x334>
   10262:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   10266:	4642      	mov	r2, r8
   10268:	4952      	ldr	r1, [pc, #328]	; (103b4 <process_event+0x348>)
   1026a:	484c      	ldr	r0, [pc, #304]	; (1039c <process_event+0x330>)
   1026c:	f015 fadf 	bl	2582e <printk>
   10270:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   10274:	4640      	mov	r0, r8
   10276:	f015 fd5c 	bl	25d32 <assert_post_action>
   1027a:	e75c      	b.n	10136 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   1027c:	2f02      	cmp	r7, #2
   1027e:	d10b      	bne.n	10298 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
   10280:	8be3      	ldrh	r3, [r4, #30]
   10282:	b9bb      	cbnz	r3, 102b4 <process_event+0x248>
			transit = mgr->transitions->stop;
   10284:	6923      	ldr	r3, [r4, #16]
   10286:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10288:	b315      	cbz	r5, 102d0 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
   1028a:	2104      	movs	r1, #4
   1028c:	4620      	mov	r0, r4
   1028e:	f015 faea 	bl	25866 <set_state>
		res = 0;
   10292:	f04f 0900 	mov.w	r9, #0
   10296:	e754      	b.n	10142 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   10298:	4d41      	ldr	r5, [pc, #260]	; (103a0 <process_event+0x334>)
   1029a:	f240 135d 	movw	r3, #349	; 0x15d
   1029e:	462a      	mov	r2, r5
   102a0:	4945      	ldr	r1, [pc, #276]	; (103b8 <process_event+0x34c>)
   102a2:	483e      	ldr	r0, [pc, #248]	; (1039c <process_event+0x330>)
   102a4:	f015 fac3 	bl	2582e <printk>
   102a8:	f240 115d 	movw	r1, #349	; 0x15d
   102ac:	4628      	mov	r0, r5
   102ae:	f015 fd40 	bl	25d32 <assert_post_action>
   102b2:	e7e5      	b.n	10280 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
   102b4:	4d3a      	ldr	r5, [pc, #232]	; (103a0 <process_event+0x334>)
   102b6:	f44f 73af 	mov.w	r3, #350	; 0x15e
   102ba:	462a      	mov	r2, r5
   102bc:	493f      	ldr	r1, [pc, #252]	; (103bc <process_event+0x350>)
   102be:	4837      	ldr	r0, [pc, #220]	; (1039c <process_event+0x330>)
   102c0:	f015 fab5 	bl	2582e <printk>
   102c4:	f44f 71af 	mov.w	r1, #350	; 0x15e
   102c8:	4628      	mov	r0, r5
   102ca:	f015 fd32 	bl	25d32 <assert_post_action>
   102ce:	e7d9      	b.n	10284 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
   102d0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 103a0 <process_event+0x334>
   102d4:	f240 1361 	movw	r3, #353	; 0x161
   102d8:	4642      	mov	r2, r8
   102da:	4936      	ldr	r1, [pc, #216]	; (103b4 <process_event+0x348>)
   102dc:	482f      	ldr	r0, [pc, #188]	; (1039c <process_event+0x330>)
   102de:	f015 faa6 	bl	2582e <printk>
   102e2:	f240 1161 	movw	r1, #353	; 0x161
   102e6:	4640      	mov	r0, r8
   102e8:	f015 fd23 	bl	25d32 <assert_post_action>
   102ec:	e7cd      	b.n	1028a <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   102ee:	4d2c      	ldr	r5, [pc, #176]	; (103a0 <process_event+0x334>)
   102f0:	f44f 73b2 	mov.w	r3, #356	; 0x164
   102f4:	462a      	mov	r2, r5
   102f6:	4932      	ldr	r1, [pc, #200]	; (103c0 <process_event+0x354>)
   102f8:	4828      	ldr	r0, [pc, #160]	; (1039c <process_event+0x330>)
   102fa:	f015 fa98 	bl	2582e <printk>
   102fe:	f44f 71b2 	mov.w	r1, #356	; 0x164
   10302:	4628      	mov	r0, r5
   10304:	f015 fd15 	bl	25d32 <assert_post_action>
   10308:	e77e      	b.n	10208 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1030a:	4d25      	ldr	r5, [pc, #148]	; (103a0 <process_event+0x334>)
   1030c:	f240 1365 	movw	r3, #357	; 0x165
   10310:	462a      	mov	r2, r5
   10312:	4927      	ldr	r1, [pc, #156]	; (103b0 <process_event+0x344>)
   10314:	4821      	ldr	r0, [pc, #132]	; (1039c <process_event+0x330>)
   10316:	f015 fa8a 	bl	2582e <printk>
   1031a:	f240 1165 	movw	r1, #357	; 0x165
   1031e:	4628      	mov	r0, r5
   10320:	f015 fd07 	bl	25d32 <assert_post_action>
   10324:	e773      	b.n	1020e <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
   10326:	f8df 8078 	ldr.w	r8, [pc, #120]	; 103a0 <process_event+0x334>
   1032a:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1032e:	4642      	mov	r2, r8
   10330:	4920      	ldr	r1, [pc, #128]	; (103b4 <process_event+0x348>)
   10332:	481a      	ldr	r0, [pc, #104]	; (1039c <process_event+0x330>)
   10334:	f015 fa7b 	bl	2582e <printk>
   10338:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1033c:	4640      	mov	r0, r8
   1033e:	f015 fcf8 	bl	25d32 <assert_post_action>
   10342:	e769      	b.n	10218 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
   10344:	4d16      	ldr	r5, [pc, #88]	; (103a0 <process_event+0x334>)
   10346:	f240 136b 	movw	r3, #363	; 0x16b
   1034a:	462a      	mov	r2, r5
   1034c:	491d      	ldr	r1, [pc, #116]	; (103c4 <process_event+0x358>)
   1034e:	4813      	ldr	r0, [pc, #76]	; (1039c <process_event+0x330>)
   10350:	f015 fa6d 	bl	2582e <printk>
   10354:	f240 116b 	movw	r1, #363	; 0x16b
   10358:	4628      	mov	r0, r5
   1035a:	f015 fcea 	bl	25d32 <assert_post_action>
		onoff_transition_fn transit = NULL;
   1035e:	2500      	movs	r5, #0
		res = 0;
   10360:	46a9      	mov	r9, r5
   10362:	e6ee      	b.n	10142 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
   10364:	2200      	movs	r2, #0
   10366:	e6f7      	b.n	10158 <process_event+0xec>
   10368:	2200      	movs	r2, #0
   1036a:	e6f5      	b.n	10158 <process_event+0xec>
		    || (transit != NULL)) {
   1036c:	2d00      	cmp	r5, #0
   1036e:	f47f aef9 	bne.w	10164 <process_event+0xf8>
   10372:	e72a      	b.n	101ca <process_event+0x15e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10374:	f8df b058 	ldr.w	fp, [pc, #88]	; 103d0 <process_event+0x364>
   10378:	23ac      	movs	r3, #172	; 0xac
   1037a:	465a      	mov	r2, fp
   1037c:	4912      	ldr	r1, [pc, #72]	; (103c8 <process_event+0x35c>)
   1037e:	4807      	ldr	r0, [pc, #28]	; (1039c <process_event+0x330>)
   10380:	f015 fa55 	bl	2582e <printk>
   10384:	4651      	mov	r1, sl
   10386:	4811      	ldr	r0, [pc, #68]	; (103cc <process_event+0x360>)
   10388:	f015 fa51 	bl	2582e <printk>
   1038c:	21ac      	movs	r1, #172	; 0xac
   1038e:	4658      	mov	r0, fp
   10390:	f015 fccf 	bl	25d32 <assert_post_action>
   10394:	e6f1      	b.n	1017a <process_event+0x10e>
   10396:	bf00      	nop
   10398:	0002a268 	.word	0x0002a268
   1039c:	00029ff8 	.word	0x00029ff8
   103a0:	0002a21c 	.word	0x0002a21c
   103a4:	0002a278 	.word	0x0002a278
   103a8:	0001044d 	.word	0x0001044d
   103ac:	0002a28c 	.word	0x0002a28c
   103b0:	0002a298 	.word	0x0002a298
   103b4:	0002a2bc 	.word	0x0002a2bc
   103b8:	0002a2d4 	.word	0x0002a2d4
   103bc:	0002a2ec 	.word	0x0002a2ec
   103c0:	0002a2fc 	.word	0x0002a2fc
   103c4:	0002dc18 	.word	0x0002dc18
   103c8:	0002a33c 	.word	0x0002a33c
   103cc:	0002a354 	.word	0x0002a354
   103d0:	0002a314 	.word	0x0002a314
				notify_monitors(mgr, state, res);
   103d4:	464a      	mov	r2, r9
   103d6:	4641      	mov	r1, r8
   103d8:	4620      	mov	r0, r4
   103da:	f015 fa4c 	bl	25876 <notify_monitors>
   103de:	e6d3      	b.n	10188 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   103e0:	4d14      	ldr	r5, [pc, #80]	; (10434 <process_event+0x3c8>)
   103e2:	2381      	movs	r3, #129	; 0x81
   103e4:	462a      	mov	r2, r5
   103e6:	4914      	ldr	r1, [pc, #80]	; (10438 <process_event+0x3cc>)
   103e8:	4814      	ldr	r0, [pc, #80]	; (1043c <process_event+0x3d0>)
   103ea:	f015 fa20 	bl	2582e <printk>
   103ee:	4651      	mov	r1, sl
   103f0:	4813      	ldr	r0, [pc, #76]	; (10440 <process_event+0x3d4>)
   103f2:	f015 fa1c 	bl	2582e <printk>
   103f6:	2181      	movs	r1, #129	; 0x81
   103f8:	4628      	mov	r0, r5
   103fa:	f015 fc9a 	bl	25d32 <assert_post_action>
   103fe:	e6dd      	b.n	101bc <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10400:	f013 0f20 	tst.w	r3, #32
   10404:	d004      	beq.n	10410 <process_event+0x3a4>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10406:	f023 0320 	bic.w	r3, r3, #32
   1040a:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
   1040c:	2502      	movs	r5, #2
   1040e:	e6e5      	b.n	101dc <process_event+0x170>
		evt = EVT_NOP;
   10410:	2500      	movs	r5, #0
   10412:	e6e3      	b.n	101dc <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10414:	4d07      	ldr	r5, [pc, #28]	; (10434 <process_event+0x3c8>)
   10416:	23ac      	movs	r3, #172	; 0xac
   10418:	462a      	mov	r2, r5
   1041a:	490a      	ldr	r1, [pc, #40]	; (10444 <process_event+0x3d8>)
   1041c:	4807      	ldr	r0, [pc, #28]	; (1043c <process_event+0x3d0>)
   1041e:	f015 fa06 	bl	2582e <printk>
   10422:	4621      	mov	r1, r4
   10424:	4808      	ldr	r0, [pc, #32]	; (10448 <process_event+0x3dc>)
   10426:	f015 fa02 	bl	2582e <printk>
   1042a:	21ac      	movs	r1, #172	; 0xac
   1042c:	4628      	mov	r0, r5
   1042e:	f015 fc80 	bl	25d32 <assert_post_action>
   10432:	e64c      	b.n	100ce <process_event+0x62>
   10434:	0002a314 	.word	0x0002a314
   10438:	0002a36c 	.word	0x0002a36c
   1043c:	00029ff8 	.word	0x00029ff8
   10440:	0002a384 	.word	0x0002a384
   10444:	0002a33c 	.word	0x0002a33c
   10448:	0002a354 	.word	0x0002a354

0001044c <transition_complete>:
{
   1044c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10450:	4604      	mov	r4, r0
   10452:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10454:	f100 0614 	add.w	r6, r0, #20
   10458:	f04f 0340 	mov.w	r3, #64	; 0x40
   1045c:	f3ef 8711 	mrs	r7, BASEPRI
   10460:	f383 8812 	msr	BASEPRI_MAX, r3
   10464:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10468:	4630      	mov	r0, r6
   1046a:	f00e f903 	bl	1e674 <z_spin_lock_valid>
   1046e:	b150      	cbz	r0, 10486 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
   10470:	4630      	mov	r0, r6
   10472:	f00e f91f 	bl	1e6b4 <z_spin_lock_set_owner>
	mgr->last_res = res;
   10476:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   10478:	463a      	mov	r2, r7
   1047a:	2101      	movs	r1, #1
   1047c:	4620      	mov	r0, r4
   1047e:	f7ff fdf5 	bl	1006c <process_event>
}
   10482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10486:	f8df 802c 	ldr.w	r8, [pc, #44]	; 104b4 <transition_complete+0x68>
   1048a:	2381      	movs	r3, #129	; 0x81
   1048c:	4642      	mov	r2, r8
   1048e:	4906      	ldr	r1, [pc, #24]	; (104a8 <transition_complete+0x5c>)
   10490:	4806      	ldr	r0, [pc, #24]	; (104ac <transition_complete+0x60>)
   10492:	f015 f9cc 	bl	2582e <printk>
   10496:	4631      	mov	r1, r6
   10498:	4805      	ldr	r0, [pc, #20]	; (104b0 <transition_complete+0x64>)
   1049a:	f015 f9c8 	bl	2582e <printk>
   1049e:	2181      	movs	r1, #129	; 0x81
   104a0:	4640      	mov	r0, r8
   104a2:	f015 fc46 	bl	25d32 <assert_post_action>
   104a6:	e7e3      	b.n	10470 <transition_complete+0x24>
   104a8:	0002a36c 	.word	0x0002a36c
   104ac:	00029ff8 	.word	0x00029ff8
   104b0:	0002a384 	.word	0x0002a384
   104b4:	0002a314 	.word	0x0002a314

000104b8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   104b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104bc:	4604      	mov	r4, r0
   104be:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   104c0:	f015 fa11 	bl	258e6 <validate_args>

	if (rv < 0) {
   104c4:	1e06      	subs	r6, r0, #0
   104c6:	db58      	blt.n	1057a <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   104c8:	f104 0714 	add.w	r7, r4, #20
   104cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   104d0:	f3ef 8911 	mrs	r9, BASEPRI
   104d4:	f383 8812 	msr	BASEPRI_MAX, r3
   104d8:	f3bf 8f6f 	isb	sy
   104dc:	4638      	mov	r0, r7
   104de:	f00e f8c9 	bl	1e674 <z_spin_lock_valid>
   104e2:	b1e8      	cbz	r0, 10520 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
   104e4:	4638      	mov	r0, r7
   104e6:	f00e f8e5 	bl	1e6b4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   104ea:	8ba5      	ldrh	r5, [r4, #28]
   104ec:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   104f0:	8be3      	ldrh	r3, [r4, #30]
   104f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   104f6:	4293      	cmp	r3, r2
   104f8:	d056      	beq.n	105a8 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   104fa:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   104fc:	2d02      	cmp	r5, #2
   104fe:	d01f      	beq.n	10540 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   10500:	b32d      	cbz	r5, 1054e <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
   10502:	2d04      	cmp	r5, #4
   10504:	d023      	beq.n	1054e <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
   10506:	2d06      	cmp	r5, #6
   10508:	d021      	beq.n	1054e <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1050a:	2d05      	cmp	r5, #5
   1050c:	d053      	beq.n	105b6 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1050e:	2d01      	cmp	r5, #1
   10510:	d136      	bne.n	10580 <onoff_request+0xc8>
		rv = -EIO;
   10512:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   10516:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   1051a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   1051c:	4652      	mov	r2, sl
   1051e:	e01c      	b.n	1055a <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10520:	4d3c      	ldr	r5, [pc, #240]	; (10614 <onoff_request+0x15c>)
   10522:	2381      	movs	r3, #129	; 0x81
   10524:	462a      	mov	r2, r5
   10526:	493c      	ldr	r1, [pc, #240]	; (10618 <onoff_request+0x160>)
   10528:	483c      	ldr	r0, [pc, #240]	; (1061c <onoff_request+0x164>)
   1052a:	f015 f980 	bl	2582e <printk>
   1052e:	4639      	mov	r1, r7
   10530:	483b      	ldr	r0, [pc, #236]	; (10620 <onoff_request+0x168>)
   10532:	f015 f97c 	bl	2582e <printk>
   10536:	2181      	movs	r1, #129	; 0x81
   10538:	4628      	mov	r0, r5
   1053a:	f015 fbfa 	bl	25d32 <assert_post_action>
   1053e:	e7d1      	b.n	104e4 <onoff_request+0x2c>
		mgr->refs += 1U;
   10540:	3301      	adds	r3, #1
   10542:	83e3      	strh	r3, [r4, #30]
		notify = true;
   10544:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
   10548:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1054a:	461a      	mov	r2, r3
   1054c:	e005      	b.n	1055a <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
   1054e:	fab5 f385 	clz	r3, r5
   10552:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   10554:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
   10558:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
   1055a:	b142      	cbz	r2, 1056e <onoff_request+0xb6>
	parent->next = child;
   1055c:	2200      	movs	r2, #0
   1055e:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   10562:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   10564:	b372      	cbz	r2, 105c4 <onoff_request+0x10c>
	parent->next = child;
   10566:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   1056a:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1056e:	b373      	cbz	r3, 105ce <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
   10570:	464a      	mov	r2, r9
   10572:	2102      	movs	r1, #2
   10574:	4620      	mov	r0, r4
   10576:	f7ff fd79 	bl	1006c <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1057a:	4630      	mov	r0, r6
   1057c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10580:	4e28      	ldr	r6, [pc, #160]	; (10624 <onoff_request+0x16c>)
   10582:	f240 13c9 	movw	r3, #457	; 0x1c9
   10586:	4632      	mov	r2, r6
   10588:	4927      	ldr	r1, [pc, #156]	; (10628 <onoff_request+0x170>)
   1058a:	4824      	ldr	r0, [pc, #144]	; (1061c <onoff_request+0x164>)
   1058c:	f015 f94f 	bl	2582e <printk>
   10590:	f240 11c9 	movw	r1, #457	; 0x1c9
   10594:	4630      	mov	r0, r6
   10596:	f015 fbcc 	bl	25d32 <assert_post_action>
		rv = -EIO;
   1059a:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1059e:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   105a2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   105a4:	4652      	mov	r2, sl
   105a6:	e7d8      	b.n	1055a <onoff_request+0xa2>
		rv = -EAGAIN;
   105a8:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   105ac:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   105b0:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   105b2:	4652      	mov	r2, sl
   105b4:	e7d1      	b.n	1055a <onoff_request+0xa2>
		rv = -ENOTSUP;
   105b6:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   105ba:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   105be:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   105c0:	4652      	mov	r2, sl
   105c2:	e7ca      	b.n	1055a <onoff_request+0xa2>
   105c4:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
   105c8:	f8c4 8000 	str.w	r8, [r4]
}
   105cc:	e7cf      	b.n	1056e <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   105ce:	4638      	mov	r0, r7
   105d0:	f00e f860 	bl	1e694 <z_spin_unlock_valid>
   105d4:	b168      	cbz	r0, 105f2 <onoff_request+0x13a>
	__asm__ volatile(
   105d6:	f389 8811 	msr	BASEPRI, r9
   105da:	f3bf 8f6f 	isb	sy
		if (notify) {
   105de:	f1ba 0f00 	cmp.w	sl, #0
   105e2:	d0ca      	beq.n	1057a <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
   105e4:	2300      	movs	r3, #0
   105e6:	462a      	mov	r2, r5
   105e8:	4641      	mov	r1, r8
   105ea:	4620      	mov	r0, r4
   105ec:	f015 f991 	bl	25912 <notify_one>
   105f0:	e7c3      	b.n	1057a <onoff_request+0xc2>
   105f2:	f8df b020 	ldr.w	fp, [pc, #32]	; 10614 <onoff_request+0x15c>
   105f6:	23ac      	movs	r3, #172	; 0xac
   105f8:	465a      	mov	r2, fp
   105fa:	490c      	ldr	r1, [pc, #48]	; (1062c <onoff_request+0x174>)
   105fc:	4807      	ldr	r0, [pc, #28]	; (1061c <onoff_request+0x164>)
   105fe:	f015 f916 	bl	2582e <printk>
   10602:	4639      	mov	r1, r7
   10604:	480a      	ldr	r0, [pc, #40]	; (10630 <onoff_request+0x178>)
   10606:	f015 f912 	bl	2582e <printk>
   1060a:	21ac      	movs	r1, #172	; 0xac
   1060c:	4658      	mov	r0, fp
   1060e:	f015 fb90 	bl	25d32 <assert_post_action>
   10612:	e7e0      	b.n	105d6 <onoff_request+0x11e>
   10614:	0002a314 	.word	0x0002a314
   10618:	0002a36c 	.word	0x0002a36c
   1061c:	00029ff8 	.word	0x00029ff8
   10620:	0002a384 	.word	0x0002a384
   10624:	0002a21c 	.word	0x0002a21c
   10628:	0002a2fc 	.word	0x0002a2fc
   1062c:	0002a33c 	.word	0x0002a33c
   10630:	0002a354 	.word	0x0002a354

00010634 <sys_heap_free>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
	if (mem == NULL) {
   10634:	2900      	cmp	r1, #0
   10636:	d045      	beq.n	106c4 <sys_heap_free+0x90>
{
   10638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1063c:	460f      	mov	r7, r1
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1063e:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   10640:	4620      	mov	r0, r4
   10642:	f015 fa28 	bl	25a96 <mem_to_chunkid>
   10646:	4605      	mov	r5, r0

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   10648:	00c6      	lsls	r6, r0, #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1064a:	f106 0802 	add.w	r8, r6, #2
   1064e:	f834 3008 	ldrh.w	r3, [r4, r8]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   10652:	f013 0f01 	tst.w	r3, #1
   10656:	d013      	beq.n	10680 <sys_heap_free+0x4c>
   10658:	f834 3008 	ldrh.w	r3, [r4, r8]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   1065c:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		return ((uint16_t *)cmem)[f];
   10660:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   10664:	1a9b      	subs	r3, r3, r2
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10666:	429d      	cmp	r5, r3
   10668:	d11b      	bne.n	106a2 <sys_heap_free+0x6e>
	void *cmem = &buf[c];
   1066a:	4426      	add	r6, r4
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1066c:	8873      	ldrh	r3, [r6, #2]
   1066e:	f023 0301 	bic.w	r3, r3, #1
   10672:	8073      	strh	r3, [r6, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
   10674:	4629      	mov	r1, r5
   10676:	4620      	mov	r0, r4
   10678:	f015 fa29 	bl	25ace <free_chunk>
}
   1067c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(chunk_used(h, c),
   10680:	f8df 9058 	ldr.w	r9, [pc, #88]	; 106dc <sys_heap_free+0xa8>
   10684:	23a3      	movs	r3, #163	; 0xa3
   10686:	464a      	mov	r2, r9
   10688:	490f      	ldr	r1, [pc, #60]	; (106c8 <sys_heap_free+0x94>)
   1068a:	4810      	ldr	r0, [pc, #64]	; (106cc <sys_heap_free+0x98>)
   1068c:	f015 f8cf 	bl	2582e <printk>
   10690:	4639      	mov	r1, r7
   10692:	480f      	ldr	r0, [pc, #60]	; (106d0 <sys_heap_free+0x9c>)
   10694:	f015 f8cb 	bl	2582e <printk>
   10698:	21a3      	movs	r1, #163	; 0xa3
   1069a:	4648      	mov	r0, r9
   1069c:	f015 fb49 	bl	25d32 <assert_post_action>
   106a0:	e7da      	b.n	10658 <sys_heap_free+0x24>
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   106a2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 106dc <sys_heap_free+0xa8>
   106a6:	23ab      	movs	r3, #171	; 0xab
   106a8:	4642      	mov	r2, r8
   106aa:	490a      	ldr	r1, [pc, #40]	; (106d4 <sys_heap_free+0xa0>)
   106ac:	4807      	ldr	r0, [pc, #28]	; (106cc <sys_heap_free+0x98>)
   106ae:	f015 f8be 	bl	2582e <printk>
   106b2:	4639      	mov	r1, r7
   106b4:	4808      	ldr	r0, [pc, #32]	; (106d8 <sys_heap_free+0xa4>)
   106b6:	f015 f8ba 	bl	2582e <printk>
   106ba:	21ab      	movs	r1, #171	; 0xab
   106bc:	4640      	mov	r0, r8
   106be:	f015 fb38 	bl	25d32 <assert_post_action>
   106c2:	e7d2      	b.n	1066a <sys_heap_free+0x36>
   106c4:	4770      	bx	lr
   106c6:	bf00      	nop
   106c8:	0002a3c0 	.word	0x0002a3c0
   106cc:	00029ff8 	.word	0x00029ff8
   106d0:	0002a3d4 	.word	0x0002a3d4
   106d4:	0002a40c 	.word	0x0002a40c
   106d8:	0002a434 	.word	0x0002a434
   106dc:	0002a39c 	.word	0x0002a39c

000106e0 <sys_heap_aligned_alloc>:
#endif
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   106e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   106e4:	460c      	mov	r4, r1
   106e6:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   106e8:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   106ea:	424b      	negs	r3, r1
   106ec:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   106f0:	ea31 0303 	bics.w	r3, r1, r3
   106f4:	d041      	beq.n	1077a <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   106f6:	eba1 0408 	sub.w	r4, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   106fa:	f1b8 0f03 	cmp.w	r8, #3
   106fe:	d847      	bhi.n	10790 <sys_heap_aligned_alloc+0xb0>
   10700:	4647      	mov	r7, r8
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10702:	1e63      	subs	r3, r4, #1
   10704:	4223      	tst	r3, r4
   10706:	d145      	bne.n	10794 <sys_heap_aligned_alloc+0xb4>

	if (bytes == 0 || size_too_big(h, bytes)) {
   10708:	2d00      	cmp	r5, #0
   1070a:	d069      	beq.n	107e0 <sys_heap_aligned_alloc+0x100>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1070c:	68b3      	ldr	r3, [r6, #8]
   1070e:	ebb3 0fd5 	cmp.w	r3, r5, lsr #3
   10712:	d967      	bls.n	107e4 <sys_heap_aligned_alloc+0x104>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   10714:	1961      	adds	r1, r4, r5
   10716:	1bc9      	subs	r1, r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10718:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1071a:	08c9      	lsrs	r1, r1, #3
   1071c:	4630      	mov	r0, r6
   1071e:	f015 fa07 	bl	25b30 <alloc_chunk>

	if (c0 == 0) {
   10722:	4607      	mov	r7, r0
   10724:	2800      	cmp	r0, #0
   10726:	d05f      	beq.n	107e8 <sys_heap_aligned_alloc+0x108>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   10728:	4601      	mov	r1, r0
   1072a:	4630      	mov	r0, r6
   1072c:	f015 f941 	bl	259b2 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   10730:	4440      	add	r0, r8
   10732:	4420      	add	r0, r4
   10734:	3801      	subs	r0, #1
   10736:	4264      	negs	r4, r4
   10738:	4004      	ands	r4, r0
   1073a:	eba4 0408 	sub.w	r4, r4, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1073e:	4425      	add	r5, r4
   10740:	3507      	adds	r5, #7
   10742:	f025 0507 	bic.w	r5, r5, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   10746:	4621      	mov	r1, r4
   10748:	4630      	mov	r0, r6
   1074a:	f015 f9a4 	bl	25a96 <mem_to_chunkid>
   1074e:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   10750:	1bad      	subs	r5, r5, r6
   10752:	10ed      	asrs	r5, r5, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   10754:	4287      	cmp	r7, r0
   10756:	d32f      	bcc.n	107b8 <sys_heap_aligned_alloc+0xd8>
	void *cmem = &buf[c];
   10758:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   1075c:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   10760:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   10762:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   10766:	429d      	cmp	r5, r3
   10768:	d330      	bcc.n	107cc <sys_heap_aligned_alloc+0xec>
	void *cmem = &buf[c];
   1076a:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1076c:	8873      	ldrh	r3, [r6, #2]
   1076e:	f043 0301 	orr.w	r3, r3, #1
   10772:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   10774:	4620      	mov	r0, r4
   10776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1077a:	2904      	cmp	r1, #4
   1077c:	d903      	bls.n	10786 <sys_heap_aligned_alloc+0xa6>
		rew = 0;
   1077e:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   10782:	2704      	movs	r7, #4
   10784:	e7bd      	b.n	10702 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   10786:	4611      	mov	r1, r2
   10788:	f015 fa0a 	bl	25ba0 <sys_heap_alloc>
   1078c:	4604      	mov	r4, r0
   1078e:	e7f1      	b.n	10774 <sys_heap_aligned_alloc+0x94>
		gap = MIN(rew, chunk_header_bytes(h));
   10790:	2704      	movs	r7, #4
   10792:	e7b6      	b.n	10702 <sys_heap_aligned_alloc+0x22>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10794:	f8df 9060 	ldr.w	r9, [pc, #96]	; 107f8 <sys_heap_aligned_alloc+0x118>
   10798:	f240 1327 	movw	r3, #295	; 0x127
   1079c:	464a      	mov	r2, r9
   1079e:	4913      	ldr	r1, [pc, #76]	; (107ec <sys_heap_aligned_alloc+0x10c>)
   107a0:	4813      	ldr	r0, [pc, #76]	; (107f0 <sys_heap_aligned_alloc+0x110>)
   107a2:	f015 f844 	bl	2582e <printk>
   107a6:	4813      	ldr	r0, [pc, #76]	; (107f4 <sys_heap_aligned_alloc+0x114>)
   107a8:	f015 f841 	bl	2582e <printk>
   107ac:	f240 1127 	movw	r1, #295	; 0x127
   107b0:	4648      	mov	r0, r9
   107b2:	f015 fabe 	bl	25d32 <assert_post_action>
   107b6:	e7a7      	b.n	10708 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   107b8:	4602      	mov	r2, r0
   107ba:	4639      	mov	r1, r7
   107bc:	4630      	mov	r0, r6
   107be:	f015 f940 	bl	25a42 <split_chunks>
		free_list_add(h, c0);
   107c2:	4639      	mov	r1, r7
   107c4:	4630      	mov	r0, r6
   107c6:	f015 f976 	bl	25ab6 <free_list_add>
   107ca:	e7c5      	b.n	10758 <sys_heap_aligned_alloc+0x78>
		split_chunks(h, c, c_end);
   107cc:	462a      	mov	r2, r5
   107ce:	4641      	mov	r1, r8
   107d0:	4630      	mov	r0, r6
   107d2:	f015 f936 	bl	25a42 <split_chunks>
		free_list_add(h, c_end);
   107d6:	4629      	mov	r1, r5
   107d8:	4630      	mov	r0, r6
   107da:	f015 f96c 	bl	25ab6 <free_list_add>
   107de:	e7c4      	b.n	1076a <sys_heap_aligned_alloc+0x8a>
		return NULL;
   107e0:	2400      	movs	r4, #0
   107e2:	e7c7      	b.n	10774 <sys_heap_aligned_alloc+0x94>
   107e4:	2400      	movs	r4, #0
   107e6:	e7c5      	b.n	10774 <sys_heap_aligned_alloc+0x94>
		return NULL;
   107e8:	2400      	movs	r4, #0
   107ea:	e7c3      	b.n	10774 <sys_heap_aligned_alloc+0x94>
   107ec:	0002a470 	.word	0x0002a470
   107f0:	00029ff8 	.word	0x00029ff8
   107f4:	0002a48c 	.word	0x0002a48c
   107f8:	0002a39c 	.word	0x0002a39c

000107fc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   107fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10800:	4606      	mov	r6, r0
   10802:	460c      	mov	r4, r1
   10804:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   10806:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   1080a:	d22a      	bcs.n	10862 <sys_heap_init+0x66>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1080c:	2d04      	cmp	r5, #4
   1080e:	d939      	bls.n	10884 <sys_heap_init+0x88>
	bytes -= heap_footer_bytes(bytes);
   10810:	1f2a      	subs	r2, r5, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10812:	1de5      	adds	r5, r4, #7
   10814:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10818:	4414      	add	r4, r2
   1081a:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1081e:	1b64      	subs	r4, r4, r5
   10820:	ea4f 09d4 	mov.w	r9, r4, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   10824:	2c17      	cmp	r4, #23
   10826:	d93e      	bls.n	108a6 <sys_heap_init+0xaa>

	struct z_heap *h = (struct z_heap *)addr;
   10828:	46a8      	mov	r8, r5
	heap->heap = h;
   1082a:	6035      	str	r5, [r6, #0]
	h->end_chunk = heap_sz;
   1082c:	f8c5 9008 	str.w	r9, [r5, #8]
	h->avail_buckets = 0;
   10830:	2300      	movs	r3, #0
   10832:	60eb      	str	r3, [r5, #12]
	return 31 - __builtin_clz(usable_sz);
   10834:	fab9 f689 	clz	r6, r9
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   10838:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1083c:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
   10840:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10842:	3607      	adds	r6, #7
   10844:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   10848:	f10a 0301 	add.w	r3, sl, #1
   1084c:	454b      	cmp	r3, r9
   1084e:	d83b      	bhi.n	108c8 <sys_heap_init+0xcc>
{
   10850:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
   10852:	42bb      	cmp	r3, r7
   10854:	da4a      	bge.n	108ec <sys_heap_init+0xf0>
		h->buckets[i].next = 0;
   10856:	1d1a      	adds	r2, r3, #4
   10858:	2100      	movs	r1, #0
   1085a:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1085e:	3301      	adds	r3, #1
   10860:	e7f7      	b.n	10852 <sys_heap_init+0x56>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   10862:	4f32      	ldr	r7, [pc, #200]	; (1092c <sys_heap_init+0x130>)
   10864:	f240 13a5 	movw	r3, #421	; 0x1a5
   10868:	463a      	mov	r2, r7
   1086a:	4931      	ldr	r1, [pc, #196]	; (10930 <sys_heap_init+0x134>)
   1086c:	4831      	ldr	r0, [pc, #196]	; (10934 <sys_heap_init+0x138>)
   1086e:	f014 ffde 	bl	2582e <printk>
   10872:	4831      	ldr	r0, [pc, #196]	; (10938 <sys_heap_init+0x13c>)
   10874:	f014 ffdb 	bl	2582e <printk>
   10878:	f240 11a5 	movw	r1, #421	; 0x1a5
   1087c:	4638      	mov	r0, r7
   1087e:	f015 fa58 	bl	25d32 <assert_post_action>
   10882:	e7c3      	b.n	1080c <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   10884:	4f29      	ldr	r7, [pc, #164]	; (1092c <sys_heap_init+0x130>)
   10886:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1088a:	463a      	mov	r2, r7
   1088c:	492b      	ldr	r1, [pc, #172]	; (1093c <sys_heap_init+0x140>)
   1088e:	4829      	ldr	r0, [pc, #164]	; (10934 <sys_heap_init+0x138>)
   10890:	f014 ffcd 	bl	2582e <printk>
   10894:	482a      	ldr	r0, [pc, #168]	; (10940 <sys_heap_init+0x144>)
   10896:	f014 ffca 	bl	2582e <printk>
   1089a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   1089e:	4638      	mov	r0, r7
   108a0:	f015 fa47 	bl	25d32 <assert_post_action>
   108a4:	e7b4      	b.n	10810 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   108a6:	4f21      	ldr	r7, [pc, #132]	; (1092c <sys_heap_init+0x130>)
   108a8:	f240 13b5 	movw	r3, #437	; 0x1b5
   108ac:	463a      	mov	r2, r7
   108ae:	4925      	ldr	r1, [pc, #148]	; (10944 <sys_heap_init+0x148>)
   108b0:	4820      	ldr	r0, [pc, #128]	; (10934 <sys_heap_init+0x138>)
   108b2:	f014 ffbc 	bl	2582e <printk>
   108b6:	4822      	ldr	r0, [pc, #136]	; (10940 <sys_heap_init+0x144>)
   108b8:	f014 ffb9 	bl	2582e <printk>
   108bc:	f240 11b5 	movw	r1, #437	; 0x1b5
   108c0:	4638      	mov	r0, r7
   108c2:	f015 fa36 	bl	25d32 <assert_post_action>
   108c6:	e7af      	b.n	10828 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   108c8:	f8df b060 	ldr.w	fp, [pc, #96]	; 1092c <sys_heap_init+0x130>
   108cc:	f240 13c5 	movw	r3, #453	; 0x1c5
   108d0:	465a      	mov	r2, fp
   108d2:	491d      	ldr	r1, [pc, #116]	; (10948 <sys_heap_init+0x14c>)
   108d4:	4817      	ldr	r0, [pc, #92]	; (10934 <sys_heap_init+0x138>)
   108d6:	f014 ffaa 	bl	2582e <printk>
   108da:	4819      	ldr	r0, [pc, #100]	; (10940 <sys_heap_init+0x144>)
   108dc:	f014 ffa7 	bl	2582e <printk>
   108e0:	f240 11c5 	movw	r1, #453	; 0x1c5
   108e4:	4658      	mov	r0, fp
   108e6:	f015 fa24 	bl	25d32 <assert_post_action>
   108ea:	e7b1      	b.n	10850 <sys_heap_init+0x54>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   108ec:	ea4f 034a 	mov.w	r3, sl, lsl #1
		((uint16_t *)cmem)[f] = val;
   108f0:	b29b      	uxth	r3, r3
   108f2:	2200      	movs	r2, #0
   108f4:	802a      	strh	r2, [r5, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   108f6:	f043 0301 	orr.w	r3, r3, #1
   108fa:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   108fc:	eba9 090a 	sub.w	r9, r9, sl
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10900:	ea4f 0249 	mov.w	r2, r9, lsl #1
	void *cmem = &buf[c];
   10904:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
   10908:	1cb3      	adds	r3, r6, #2
   1090a:	52ea      	strh	r2, [r5, r3]
   1090c:	f825 a006 	strh.w	sl, [r5, r6]
	void *cmem = &buf[c];
   10910:	f024 0307 	bic.w	r3, r4, #7
		((uint16_t *)cmem)[f] = val;
   10914:	442c      	add	r4, r5
   10916:	f825 9003 	strh.w	r9, [r5, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1091a:	2301      	movs	r3, #1
   1091c:	8063      	strh	r3, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1091e:	4651      	mov	r1, sl
   10920:	4628      	mov	r0, r5
   10922:	f015 f8c8 	bl	25ab6 <free_list_add>
}
   10926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1092a:	bf00      	nop
   1092c:	0002a39c 	.word	0x0002a39c
   10930:	0002a4ac 	.word	0x0002a4ac
   10934:	00029ff8 	.word	0x00029ff8
   10938:	0002a4c4 	.word	0x0002a4c4
   1093c:	0002a4dc 	.word	0x0002a4dc
   10940:	0002a500 	.word	0x0002a500
   10944:	0002a51c 	.word	0x0002a51c
   10948:	0002a548 	.word	0x0002a548

0001094c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1094c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10950:	b093      	sub	sp, #76	; 0x4c
   10952:	4606      	mov	r6, r0
   10954:	460d      	mov	r5, r1
   10956:	4692      	mov	sl, r2
   10958:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1095a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1095c:	f89a 0000 	ldrb.w	r0, [sl]
   10960:	2800      	cmp	r0, #0
   10962:	f000 84d6 	beq.w	11312 <cbvprintf+0x9c6>
		if (*fp != '%') {
   10966:	2825      	cmp	r0, #37	; 0x25
   10968:	d008      	beq.n	1097c <cbvprintf+0x30>
			OUTC(*fp++);
   1096a:	f10a 0a01 	add.w	sl, sl, #1
   1096e:	4629      	mov	r1, r5
   10970:	47b0      	blx	r6
   10972:	2800      	cmp	r0, #0
   10974:	f2c0 84ce 	blt.w	11314 <cbvprintf+0x9c8>
   10978:	3401      	adds	r4, #1
			continue;
   1097a:	e7ef      	b.n	1095c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   1097c:	2300      	movs	r3, #0
   1097e:	9306      	str	r3, [sp, #24]
   10980:	9307      	str	r3, [sp, #28]
   10982:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
   10984:	9308      	str	r3, [sp, #32]
   10986:	9309      	str	r3, [sp, #36]	; 0x24
   10988:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
   1098a:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
   1098e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10992:	2b25      	cmp	r3, #37	; 0x25
   10994:	d001      	beq.n	1099a <cbvprintf+0x4e>
	bool loop = true;
   10996:	2701      	movs	r7, #1
   10998:	e02c      	b.n	109f4 <cbvprintf+0xa8>
		conv->specifier = *sp++;
   1099a:	f10a 0802 	add.w	r8, sl, #2
   1099e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
   109a2:	e1a8      	b.n	10cf6 <cbvprintf+0x3aa>
			conv->flag_dash = true;
   109a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   109a8:	f043 0304 	orr.w	r3, r3, #4
   109ac:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
   109b0:	b1ff      	cbz	r7, 109f2 <cbvprintf+0xa6>
			++sp;
   109b2:	f108 0801 	add.w	r8, r8, #1
   109b6:	e01c      	b.n	109f2 <cbvprintf+0xa6>
			conv->flag_plus = true;
   109b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   109bc:	f043 0308 	orr.w	r3, r3, #8
   109c0:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   109c4:	e7f4      	b.n	109b0 <cbvprintf+0x64>
			conv->flag_space = true;
   109c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   109ca:	f043 0310 	orr.w	r3, r3, #16
   109ce:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   109d2:	e7ed      	b.n	109b0 <cbvprintf+0x64>
			conv->flag_hash = true;
   109d4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   109d8:	f043 0320 	orr.w	r3, r3, #32
   109dc:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   109e0:	e7e6      	b.n	109b0 <cbvprintf+0x64>
			conv->flag_zero = true;
   109e2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   109e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   109ea:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   109ee:	e7df      	b.n	109b0 <cbvprintf+0x64>
		switch (*sp) {
   109f0:	2700      	movs	r7, #0
	} while (loop);
   109f2:	b34f      	cbz	r7, 10a48 <cbvprintf+0xfc>
		switch (*sp) {
   109f4:	f898 3000 	ldrb.w	r3, [r8]
   109f8:	3b20      	subs	r3, #32
   109fa:	2b10      	cmp	r3, #16
   109fc:	d8f8      	bhi.n	109f0 <cbvprintf+0xa4>
   109fe:	a201      	add	r2, pc, #4	; (adr r2, 10a04 <cbvprintf+0xb8>)
   10a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10a04:	000109c7 	.word	0x000109c7
   10a08:	000109f1 	.word	0x000109f1
   10a0c:	000109f1 	.word	0x000109f1
   10a10:	000109d5 	.word	0x000109d5
   10a14:	000109f1 	.word	0x000109f1
   10a18:	000109f1 	.word	0x000109f1
   10a1c:	000109f1 	.word	0x000109f1
   10a20:	000109f1 	.word	0x000109f1
   10a24:	000109f1 	.word	0x000109f1
   10a28:	000109f1 	.word	0x000109f1
   10a2c:	000109f1 	.word	0x000109f1
   10a30:	000109b9 	.word	0x000109b9
   10a34:	000109f1 	.word	0x000109f1
   10a38:	000109a5 	.word	0x000109a5
   10a3c:	000109f1 	.word	0x000109f1
   10a40:	000109f1 	.word	0x000109f1
   10a44:	000109e3 	.word	0x000109e3
	if (conv->flag_zero && conv->flag_dash) {
   10a48:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10a4c:	f003 0344 	and.w	r3, r3, #68	; 0x44
   10a50:	2b44      	cmp	r3, #68	; 0x44
   10a52:	d06d      	beq.n	10b30 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
   10a54:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
   10a58:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10a60:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
   10a64:	f898 3000 	ldrb.w	r3, [r8]
   10a68:	2b2a      	cmp	r3, #42	; 0x2a
   10a6a:	d068      	beq.n	10b3e <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
   10a6c:	a805      	add	r0, sp, #20
   10a6e:	f015 f8c9 	bl	25c04 <extract_decimal>
	if (sp != wp) {
   10a72:	9b05      	ldr	r3, [sp, #20]
   10a74:	4598      	cmp	r8, r3
   10a76:	d012      	beq.n	10a9e <cbvprintf+0x152>
		conv->width_present = true;
   10a78:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10a80:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   10a84:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   10a86:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   10a8a:	2800      	cmp	r0, #0
   10a8c:	db60      	blt.n	10b50 <cbvprintf+0x204>
   10a8e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   10a90:	4313      	orrs	r3, r2
   10a92:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10a96:	f363 0241 	bfi	r2, r3, #1, #1
   10a9a:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   10a9e:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   10aa0:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   10aa2:	781b      	ldrb	r3, [r3, #0]
   10aa4:	2b2e      	cmp	r3, #46	; 0x2e
   10aa6:	bf14      	ite	ne
   10aa8:	2300      	movne	r3, #0
   10aaa:	2301      	moveq	r3, #1
   10aac:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   10ab0:	f363 0241 	bfi	r2, r3, #1, #1
   10ab4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   10ab8:	2b00      	cmp	r3, #0
   10aba:	d04b      	beq.n	10b54 <cbvprintf+0x208>
	++sp;
   10abc:	9b05      	ldr	r3, [sp, #20]
   10abe:	1c5a      	adds	r2, r3, #1
   10ac0:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   10ac2:	785b      	ldrb	r3, [r3, #1]
   10ac4:	2b2a      	cmp	r3, #42	; 0x2a
   10ac6:	d048      	beq.n	10b5a <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   10ac8:	a805      	add	r0, sp, #20
   10aca:	f015 f89b 	bl	25c04 <extract_decimal>
	conv->prec_value = prec;
   10ace:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   10ad0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10ad4:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   10ad8:	2800      	cmp	r0, #0
   10ada:	db47      	blt.n	10b6c <cbvprintf+0x220>
   10adc:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   10ade:	4313      	orrs	r3, r2
   10ae0:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10ae4:	f363 0241 	bfi	r2, r3, #1, #1
   10ae8:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   10aec:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   10af0:	f898 3000 	ldrb.w	r3, [r8]
   10af4:	3b4c      	subs	r3, #76	; 0x4c
   10af6:	2b2e      	cmp	r3, #46	; 0x2e
   10af8:	f200 80dc 	bhi.w	10cb4 <cbvprintf+0x368>
   10afc:	e8df f003 	tbb	[pc, r3]
   10b00:	dadadaca 	.word	0xdadadaca
   10b04:	dadadada 	.word	0xdadadada
   10b08:	dadadada 	.word	0xdadadada
   10b0c:	dadadada 	.word	0xdadadada
   10b10:	dadadada 	.word	0xdadadada
   10b14:	dadadada 	.word	0xdadadada
   10b18:	dadadada 	.word	0xdadadada
   10b1c:	da6ada38 	.word	0xda6ada38
   10b20:	dadada51 	.word	0xdadada51
   10b24:	dadadada 	.word	0xdadadada
   10b28:	dadadac0 	.word	0xdadadac0
   10b2c:	dada      	.short	0xdada
   10b2e:	b6          	.byte	0xb6
   10b2f:	00          	.byte	0x00
		conv->flag_zero = false;
   10b30:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10b34:	f36f 1386 	bfc	r3, #6, #1
   10b38:	f88d 3020 	strb.w	r3, [sp, #32]
   10b3c:	e78a      	b.n	10a54 <cbvprintf+0x108>
		conv->width_star = true;
   10b3e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10b42:	f043 0301 	orr.w	r3, r3, #1
   10b46:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   10b4a:	4643      	mov	r3, r8
   10b4c:	3301      	adds	r3, #1
   10b4e:	e7a7      	b.n	10aa0 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   10b50:	2201      	movs	r2, #1
   10b52:	e79d      	b.n	10a90 <cbvprintf+0x144>
		return sp;
   10b54:	f8dd 8014 	ldr.w	r8, [sp, #20]
   10b58:	e7ca      	b.n	10af0 <cbvprintf+0x1a4>
		conv->prec_star = true;
   10b5a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10b5e:	f043 0304 	orr.w	r3, r3, #4
   10b62:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   10b66:	f102 0801 	add.w	r8, r2, #1
   10b6a:	e7c1      	b.n	10af0 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   10b6c:	2201      	movs	r2, #1
   10b6e:	e7b6      	b.n	10ade <cbvprintf+0x192>
		if (*++sp == 'h') {
   10b70:	f108 0201 	add.w	r2, r8, #1
   10b74:	f898 3001 	ldrb.w	r3, [r8, #1]
   10b78:	2b68      	cmp	r3, #104	; 0x68
   10b7a:	d008      	beq.n	10b8e <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   10b7c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10b80:	2102      	movs	r1, #2
   10b82:	f361 03c6 	bfi	r3, r1, #3, #4
   10b86:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   10b8a:	4690      	mov	r8, r2
   10b8c:	e02b      	b.n	10be6 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   10b8e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10b92:	2201      	movs	r2, #1
   10b94:	f362 03c6 	bfi	r3, r2, #3, #4
   10b98:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   10b9c:	f108 0802 	add.w	r8, r8, #2
   10ba0:	e021      	b.n	10be6 <cbvprintf+0x29a>
		if (*++sp == 'l') {
   10ba2:	f108 0201 	add.w	r2, r8, #1
   10ba6:	f898 3001 	ldrb.w	r3, [r8, #1]
   10baa:	2b6c      	cmp	r3, #108	; 0x6c
   10bac:	d008      	beq.n	10bc0 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   10bae:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10bb2:	2103      	movs	r1, #3
   10bb4:	f361 03c6 	bfi	r3, r1, #3, #4
   10bb8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   10bbc:	4690      	mov	r8, r2
   10bbe:	e012      	b.n	10be6 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   10bc0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10bc4:	2204      	movs	r2, #4
   10bc6:	f362 03c6 	bfi	r3, r2, #3, #4
   10bca:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   10bce:	f108 0802 	add.w	r8, r8, #2
   10bd2:	e008      	b.n	10be6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   10bd4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10bd8:	2205      	movs	r2, #5
   10bda:	f362 03c6 	bfi	r3, r2, #3, #4
   10bde:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10be2:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   10be6:	f818 3b01 	ldrb.w	r3, [r8], #1
   10bea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   10bee:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   10bf2:	2a37      	cmp	r2, #55	; 0x37
   10bf4:	f200 8150 	bhi.w	10e98 <cbvprintf+0x54c>
   10bf8:	e8df f012 	tbh	[pc, r2, lsl #1]
   10bfc:	014e0126 	.word	0x014e0126
   10c00:	014e014e 	.word	0x014e014e
   10c04:	01260126 	.word	0x01260126
   10c08:	014e0126 	.word	0x014e0126
   10c0c:	014e014e 	.word	0x014e014e
   10c10:	014e014e 	.word	0x014e014e
   10c14:	014e014e 	.word	0x014e014e
   10c18:	014e014e 	.word	0x014e014e
   10c1c:	014e014e 	.word	0x014e014e
   10c20:	014e014e 	.word	0x014e014e
   10c24:	014e014e 	.word	0x014e014e
   10c28:	0113014e 	.word	0x0113014e
   10c2c:	014e014e 	.word	0x014e014e
   10c30:	014e014e 	.word	0x014e014e
   10c34:	014e014e 	.word	0x014e014e
   10c38:	014e014e 	.word	0x014e014e
   10c3c:	014e0126 	.word	0x014e0126
   10c40:	00630113 	.word	0x00630113
   10c44:	01260126 	.word	0x01260126
   10c48:	014e0126 	.word	0x014e0126
   10c4c:	014e0063 	.word	0x014e0063
   10c50:	014e014e 	.word	0x014e014e
   10c54:	012f014e 	.word	0x012f014e
   10c58:	013f0113 	.word	0x013f0113
   10c5c:	014e014e 	.word	0x014e014e
   10c60:	014e013f 	.word	0x014e013f
   10c64:	014e0113 	.word	0x014e0113
   10c68:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   10c6c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10c70:	2206      	movs	r2, #6
   10c72:	f362 03c6 	bfi	r3, r2, #3, #4
   10c76:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10c7a:	f108 0801 	add.w	r8, r8, #1
		break;
   10c7e:	e7b2      	b.n	10be6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   10c80:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10c84:	2207      	movs	r2, #7
   10c86:	f362 03c6 	bfi	r3, r2, #3, #4
   10c8a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10c8e:	f108 0801 	add.w	r8, r8, #1
		break;
   10c92:	e7a8      	b.n	10be6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   10c94:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10c98:	2208      	movs	r2, #8
   10c9a:	f362 03c6 	bfi	r3, r2, #3, #4
   10c9e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10ca2:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   10ca6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10caa:	f043 0302 	orr.w	r3, r3, #2
   10cae:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   10cb2:	e798      	b.n	10be6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   10cb4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10cb8:	f36f 03c6 	bfc	r3, #3, #4
   10cbc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   10cc0:	e791      	b.n	10be6 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   10cc2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   10cc6:	2101      	movs	r1, #1
   10cc8:	f361 0202 	bfi	r2, r1, #0, #3
   10ccc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   10cd0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   10cd4:	f002 0278 	and.w	r2, r2, #120	; 0x78
   10cd8:	2a40      	cmp	r2, #64	; 0x40
   10cda:	f000 80aa 	beq.w	10e32 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   10cde:	2b63      	cmp	r3, #99	; 0x63
   10ce0:	f000 80ae 	beq.w	10e40 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   10ce4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10ce8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   10cec:	4317      	orrs	r7, r2
   10cee:	f367 0341 	bfi	r3, r7, #1, #1
   10cf2:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   10cf6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10cfa:	f013 0f01 	tst.w	r3, #1
   10cfe:	f000 80da 	beq.w	10eb6 <cbvprintf+0x56a>
			width = va_arg(ap, int);
   10d02:	9b03      	ldr	r3, [sp, #12]
   10d04:	1d1a      	adds	r2, r3, #4
   10d06:	9203      	str	r2, [sp, #12]
   10d08:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   10d0a:	2f00      	cmp	r7, #0
   10d0c:	f2c0 80cb 	blt.w	10ea6 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   10d10:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10d14:	f013 0f04 	tst.w	r3, #4
   10d18:	f000 80df 	beq.w	10eda <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   10d1c:	9b03      	ldr	r3, [sp, #12]
   10d1e:	1d1a      	adds	r2, r3, #4
   10d20:	9203      	str	r2, [sp, #12]
   10d22:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   10d26:	f1bb 0f00 	cmp.w	fp, #0
   10d2a:	f2c0 80cd 	blt.w	10ec8 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   10d2e:	2300      	movs	r3, #0
   10d30:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   10d32:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   10d34:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10d38:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   10d3c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   10d40:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   10d44:	2b01      	cmp	r3, #1
   10d46:	f000 80d1 	beq.w	10eec <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   10d4a:	2b02      	cmp	r3, #2
   10d4c:	f000 8116 	beq.w	10f7c <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   10d50:	2b04      	cmp	r3, #4
   10d52:	f000 8167 	beq.w	11024 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   10d56:	2b03      	cmp	r3, #3
   10d58:	f000 817e 	beq.w	11058 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   10d5c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   10d60:	f019 0303 	ands.w	r3, r9, #3
   10d64:	9302      	str	r3, [sp, #8]
   10d66:	f040 817d 	bne.w	11064 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   10d6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   10d6e:	3b25      	subs	r3, #37	; 0x25
   10d70:	2b53      	cmp	r3, #83	; 0x53
   10d72:	f200 8233 	bhi.w	111dc <cbvprintf+0x890>
   10d76:	e8df f013 	tbh	[pc, r3, lsl #1]
   10d7a:	0181      	.short	0x0181
   10d7c:	02310231 	.word	0x02310231
   10d80:	02310231 	.word	0x02310231
   10d84:	02310231 	.word	0x02310231
   10d88:	02310231 	.word	0x02310231
   10d8c:	02310231 	.word	0x02310231
   10d90:	02310231 	.word	0x02310231
   10d94:	02310231 	.word	0x02310231
   10d98:	02310231 	.word	0x02310231
   10d9c:	02310231 	.word	0x02310231
   10da0:	02310231 	.word	0x02310231
   10da4:	02310231 	.word	0x02310231
   10da8:	02310231 	.word	0x02310231
   10dac:	02310231 	.word	0x02310231
   10db0:	02310231 	.word	0x02310231
   10db4:	02310231 	.word	0x02310231
   10db8:	02310231 	.word	0x02310231
   10dbc:	02310231 	.word	0x02310231
   10dc0:	02310231 	.word	0x02310231
   10dc4:	02310231 	.word	0x02310231
   10dc8:	02310231 	.word	0x02310231
   10dcc:	02310231 	.word	0x02310231
   10dd0:	02310231 	.word	0x02310231
   10dd4:	02310231 	.word	0x02310231
   10dd8:	02310231 	.word	0x02310231
   10ddc:	02310231 	.word	0x02310231
   10de0:	023101c7 	.word	0x023101c7
   10de4:	02310231 	.word	0x02310231
   10de8:	02310231 	.word	0x02310231
   10dec:	02310231 	.word	0x02310231
   10df0:	02310231 	.word	0x02310231
   10df4:	01a10231 	.word	0x01a10231
   10df8:	023101ab 	.word	0x023101ab
   10dfc:	02310231 	.word	0x02310231
   10e00:	01ab0231 	.word	0x01ab0231
   10e04:	02310231 	.word	0x02310231
   10e08:	02310231 	.word	0x02310231
   10e0c:	01c70208 	.word	0x01c70208
   10e10:	023101ea 	.word	0x023101ea
   10e14:	018f0231 	.word	0x018f0231
   10e18:	01c70231 	.word	0x01c70231
   10e1c:	02310231 	.word	0x02310231
   10e20:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   10e22:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   10e26:	2102      	movs	r1, #2
   10e28:	f361 0202 	bfi	r2, r1, #0, #3
   10e2c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   10e30:	e74e      	b.n	10cd0 <cbvprintf+0x384>
			conv->invalid = true;
   10e32:	f89d 1020 	ldrb.w	r1, [sp, #32]
   10e36:	f041 0101 	orr.w	r1, r1, #1
   10e3a:	f88d 1020 	strb.w	r1, [sp, #32]
   10e3e:	e74e      	b.n	10cde <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10e40:	1e17      	subs	r7, r2, #0
   10e42:	bf18      	it	ne
   10e44:	2701      	movne	r7, #1
   10e46:	e74d      	b.n	10ce4 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   10e48:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10e4c:	2204      	movs	r2, #4
   10e4e:	f362 0302 	bfi	r3, r2, #0, #3
   10e52:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   10e56:	2701      	movs	r7, #1
			break;
   10e58:	e744      	b.n	10ce4 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   10e5a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10e5e:	2203      	movs	r2, #3
   10e60:	f362 0302 	bfi	r3, r2, #0, #3
   10e64:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   10e68:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10e6c:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10e70:	2b40      	cmp	r3, #64	; 0x40
   10e72:	f47f af37 	bne.w	10ce4 <cbvprintf+0x398>
			unsupported = true;
   10e76:	2701      	movs	r7, #1
   10e78:	e734      	b.n	10ce4 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   10e7a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10e7e:	2203      	movs	r2, #3
   10e80:	f362 0302 	bfi	r3, r2, #0, #3
   10e84:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   10e88:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10e8c:	f013 0f78 	tst.w	r3, #120	; 0x78
   10e90:	f43f af28 	beq.w	10ce4 <cbvprintf+0x398>
			unsupported = true;
   10e94:	2701      	movs	r7, #1
   10e96:	e725      	b.n	10ce4 <cbvprintf+0x398>
		conv->invalid = true;
   10e98:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10e9c:	f043 0301 	orr.w	r3, r3, #1
   10ea0:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   10ea4:	e71e      	b.n	10ce4 <cbvprintf+0x398>
				conv->flag_dash = true;
   10ea6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10eaa:	f043 0304 	orr.w	r3, r3, #4
   10eae:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   10eb2:	427f      	negs	r7, r7
   10eb4:	e72c      	b.n	10d10 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   10eb6:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   10eba:	2b00      	cmp	r3, #0
   10ebc:	db02      	blt.n	10ec4 <cbvprintf+0x578>
		int width = -1;
   10ebe:	f04f 37ff 	mov.w	r7, #4294967295
   10ec2:	e725      	b.n	10d10 <cbvprintf+0x3c4>
			width = conv->width_value;
   10ec4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10ec6:	e723      	b.n	10d10 <cbvprintf+0x3c4>
				conv->prec_present = false;
   10ec8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10ecc:	f36f 0341 	bfc	r3, #1, #1
   10ed0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   10ed4:	f04f 3bff 	mov.w	fp, #4294967295
   10ed8:	e729      	b.n	10d2e <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   10eda:	f013 0f02 	tst.w	r3, #2
   10ede:	d002      	beq.n	10ee6 <cbvprintf+0x59a>
			precision = conv->prec_value;
   10ee0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10ee4:	e723      	b.n	10d2e <cbvprintf+0x3e2>
		int precision = -1;
   10ee6:	f04f 3bff 	mov.w	fp, #4294967295
   10eea:	e720      	b.n	10d2e <cbvprintf+0x3e2>
			switch (length_mod) {
   10eec:	1ecb      	subs	r3, r1, #3
   10eee:	2b04      	cmp	r3, #4
   10ef0:	d804      	bhi.n	10efc <cbvprintf+0x5b0>
   10ef2:	e8df f003 	tbb	[pc, r3]
   10ef6:	1d0b      	.short	0x1d0b
   10ef8:	3529      	.short	0x3529
   10efa:	35          	.byte	0x35
   10efb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   10efc:	9b03      	ldr	r3, [sp, #12]
   10efe:	1d1a      	adds	r2, r3, #4
   10f00:	9203      	str	r2, [sp, #12]
   10f02:	681a      	ldr	r2, [r3, #0]
   10f04:	17d3      	asrs	r3, r2, #31
   10f06:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   10f0a:	e006      	b.n	10f1a <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   10f0c:	9b03      	ldr	r3, [sp, #12]
   10f0e:	1d1a      	adds	r2, r3, #4
   10f10:	9203      	str	r2, [sp, #12]
   10f12:	681a      	ldr	r2, [r3, #0]
   10f14:	17d3      	asrs	r3, r2, #31
   10f16:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   10f1a:	2901      	cmp	r1, #1
   10f1c:	d028      	beq.n	10f70 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   10f1e:	2902      	cmp	r1, #2
   10f20:	f47f af1c 	bne.w	10d5c <cbvprintf+0x410>
				value->sint = (short)value->sint;
   10f24:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   10f28:	17d3      	asrs	r3, r2, #31
   10f2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10f2e:	e715      	b.n	10d5c <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   10f30:	9b03      	ldr	r3, [sp, #12]
   10f32:	3307      	adds	r3, #7
   10f34:	f023 0307 	bic.w	r3, r3, #7
   10f38:	f103 0208 	add.w	r2, r3, #8
   10f3c:	9203      	str	r2, [sp, #12]
   10f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   10f42:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   10f46:	e7e8      	b.n	10f1a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   10f48:	9b03      	ldr	r3, [sp, #12]
   10f4a:	3307      	adds	r3, #7
   10f4c:	f023 0307 	bic.w	r3, r3, #7
   10f50:	f103 0208 	add.w	r2, r3, #8
   10f54:	9203      	str	r2, [sp, #12]
   10f56:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   10f5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   10f5e:	e7dc      	b.n	10f1a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10f60:	9b03      	ldr	r3, [sp, #12]
   10f62:	1d1a      	adds	r2, r3, #4
   10f64:	9203      	str	r2, [sp, #12]
   10f66:	681a      	ldr	r2, [r3, #0]
   10f68:	17d3      	asrs	r3, r2, #31
				value->sint =
   10f6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   10f6e:	e7d4      	b.n	10f1a <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   10f70:	f89d 3018 	ldrb.w	r3, [sp, #24]
   10f74:	9306      	str	r3, [sp, #24]
   10f76:	2300      	movs	r3, #0
   10f78:	9307      	str	r3, [sp, #28]
   10f7a:	e6ef      	b.n	10d5c <cbvprintf+0x410>
			switch (length_mod) {
   10f7c:	1ecb      	subs	r3, r1, #3
   10f7e:	2b04      	cmp	r3, #4
   10f80:	d804      	bhi.n	10f8c <cbvprintf+0x640>
   10f82:	e8df f003 	tbb	[pc, r3]
   10f86:	1f0b      	.short	0x1f0b
   10f88:	4135      	.short	0x4135
   10f8a:	41          	.byte	0x41
   10f8b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   10f8c:	9b03      	ldr	r3, [sp, #12]
   10f8e:	1d1a      	adds	r2, r3, #4
   10f90:	9203      	str	r2, [sp, #12]
   10f92:	681b      	ldr	r3, [r3, #0]
   10f94:	9306      	str	r3, [sp, #24]
   10f96:	2300      	movs	r3, #0
   10f98:	9307      	str	r3, [sp, #28]
				break;
   10f9a:	e01e      	b.n	10fda <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   10f9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   10fa0:	2b63      	cmp	r3, #99	; 0x63
   10fa2:	d007      	beq.n	10fb4 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   10fa4:	9b03      	ldr	r3, [sp, #12]
   10fa6:	1d1a      	adds	r2, r3, #4
   10fa8:	9203      	str	r2, [sp, #12]
   10faa:	681b      	ldr	r3, [r3, #0]
   10fac:	9306      	str	r3, [sp, #24]
   10fae:	2300      	movs	r3, #0
   10fb0:	9307      	str	r3, [sp, #28]
   10fb2:	e012      	b.n	10fda <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   10fb4:	9b03      	ldr	r3, [sp, #12]
   10fb6:	1d1a      	adds	r2, r3, #4
   10fb8:	9203      	str	r2, [sp, #12]
   10fba:	681b      	ldr	r3, [r3, #0]
   10fbc:	9306      	str	r3, [sp, #24]
   10fbe:	2300      	movs	r3, #0
   10fc0:	9307      	str	r3, [sp, #28]
   10fc2:	e00a      	b.n	10fda <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   10fc4:	9b03      	ldr	r3, [sp, #12]
   10fc6:	3307      	adds	r3, #7
   10fc8:	f023 0307 	bic.w	r3, r3, #7
   10fcc:	f103 0208 	add.w	r2, r3, #8
   10fd0:	9203      	str	r2, [sp, #12]
   10fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   10fd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   10fda:	2901      	cmp	r1, #1
   10fdc:	d01c      	beq.n	11018 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   10fde:	2902      	cmp	r1, #2
   10fe0:	f47f aebc 	bne.w	10d5c <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   10fe4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10fe8:	9306      	str	r3, [sp, #24]
   10fea:	2300      	movs	r3, #0
   10fec:	9307      	str	r3, [sp, #28]
   10fee:	e6b5      	b.n	10d5c <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   10ff0:	9b03      	ldr	r3, [sp, #12]
   10ff2:	3307      	adds	r3, #7
   10ff4:	f023 0307 	bic.w	r3, r3, #7
   10ff8:	f103 0208 	add.w	r2, r3, #8
   10ffc:	9203      	str	r2, [sp, #12]
   10ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   11002:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   11006:	e7e8      	b.n	10fda <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   11008:	9b03      	ldr	r3, [sp, #12]
   1100a:	1d1a      	adds	r2, r3, #4
   1100c:	9203      	str	r2, [sp, #12]
   1100e:	681b      	ldr	r3, [r3, #0]
				value->uint =
   11010:	9306      	str	r3, [sp, #24]
   11012:	2300      	movs	r3, #0
   11014:	9307      	str	r3, [sp, #28]
				break;
   11016:	e7e0      	b.n	10fda <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   11018:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1101c:	9306      	str	r3, [sp, #24]
   1101e:	2300      	movs	r3, #0
   11020:	9307      	str	r3, [sp, #28]
   11022:	e69b      	b.n	10d5c <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   11024:	2908      	cmp	r1, #8
   11026:	d00b      	beq.n	11040 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   11028:	9b03      	ldr	r3, [sp, #12]
   1102a:	3307      	adds	r3, #7
   1102c:	f023 0307 	bic.w	r3, r3, #7
   11030:	f103 0208 	add.w	r2, r3, #8
   11034:	9203      	str	r2, [sp, #12]
   11036:	e9d3 2300 	ldrd	r2, r3, [r3]
   1103a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1103e:	e68d      	b.n	10d5c <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   11040:	9b03      	ldr	r3, [sp, #12]
   11042:	3307      	adds	r3, #7
   11044:	f023 0307 	bic.w	r3, r3, #7
   11048:	f103 0208 	add.w	r2, r3, #8
   1104c:	9203      	str	r2, [sp, #12]
   1104e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11052:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11056:	e681      	b.n	10d5c <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   11058:	9b03      	ldr	r3, [sp, #12]
   1105a:	1d1a      	adds	r2, r3, #4
   1105c:	9203      	str	r2, [sp, #12]
   1105e:	681b      	ldr	r3, [r3, #0]
   11060:	9306      	str	r3, [sp, #24]
   11062:	e67b      	b.n	10d5c <cbvprintf+0x410>
			OUTS(sp, fp);
   11064:	4643      	mov	r3, r8
   11066:	4652      	mov	r2, sl
   11068:	4629      	mov	r1, r5
   1106a:	4630      	mov	r0, r6
   1106c:	f014 fe47 	bl	25cfe <outs>
   11070:	2800      	cmp	r0, #0
   11072:	f2c0 814f 	blt.w	11314 <cbvprintf+0x9c8>
   11076:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   11078:	46c2      	mov	sl, r8
			continue;
   1107a:	e46f      	b.n	1095c <cbvprintf+0x10>
		case '%':
			OUTC('%');
   1107c:	4629      	mov	r1, r5
   1107e:	2025      	movs	r0, #37	; 0x25
   11080:	47b0      	blx	r6
   11082:	2800      	cmp	r0, #0
   11084:	f2c0 8146 	blt.w	11314 <cbvprintf+0x9c8>
   11088:	3401      	adds	r4, #1
		char sign = 0;
   1108a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1108e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   11092:	f04f 0a00 	mov.w	sl, #0
			break;
   11096:	e0a7      	b.n	111e8 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   11098:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   1109c:	f1bb 0f00 	cmp.w	fp, #0
   110a0:	db08      	blt.n	110b4 <cbvprintf+0x768>
				len = strnlen(bps, precision);
   110a2:	4659      	mov	r1, fp
   110a4:	4650      	mov	r0, sl
   110a6:	f015 fb66 	bl	26776 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   110aa:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   110ae:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   110b2:	e099      	b.n	111e8 <cbvprintf+0x89c>
				len = strlen(bps);
   110b4:	4650      	mov	r0, sl
   110b6:	f015 fb56 	bl	26766 <strlen>
   110ba:	e7f6      	b.n	110aa <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   110bc:	9b06      	ldr	r3, [sp, #24]
   110be:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   110c2:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   110c6:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   110ca:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   110ce:	e08b      	b.n	111e8 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   110d0:	f019 0f08 	tst.w	r9, #8
   110d4:	d105      	bne.n	110e2 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   110d6:	f019 0910 	ands.w	r9, r9, #16
   110da:	d004      	beq.n	110e6 <cbvprintf+0x79a>
				sign = ' ';
   110dc:	f04f 0920 	mov.w	r9, #32
   110e0:	e001      	b.n	110e6 <cbvprintf+0x79a>
				sign = '+';
   110e2:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   110e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   110ea:	2a00      	cmp	r2, #0
   110ec:	f173 0100 	sbcs.w	r1, r3, #0
   110f0:	db02      	blt.n	110f8 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   110f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   110f6:	e009      	b.n	1110c <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   110f8:	4252      	negs	r2, r2
   110fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   110fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   11102:	f04f 092d 	mov.w	r9, #45	; 0x2d
   11106:	e001      	b.n	1110c <cbvprintf+0x7c0>
		switch (conv->specifier) {
   11108:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   1110c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   11110:	9300      	str	r3, [sp, #0]
   11112:	ab0c      	add	r3, sp, #48	; 0x30
   11114:	aa08      	add	r2, sp, #32
   11116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1111a:	f014 fd86 	bl	25c2a <encode_uint>
   1111e:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   11120:	f1bb 0f00 	cmp.w	fp, #0
   11124:	f2c0 8090 	blt.w	11248 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   11128:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   1112c:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   11130:	f89d 2020 	ldrb.w	r2, [sp, #32]
   11134:	f36f 1286 	bfc	r2, #6, #1
   11138:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   1113c:	459b      	cmp	fp, r3
   1113e:	f240 8086 	bls.w	1124e <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   11142:	ebab 0303 	sub.w	r3, fp, r3
   11146:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   11148:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1114c:	e04c      	b.n	111e8 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   1114e:	9806      	ldr	r0, [sp, #24]
   11150:	b930      	cbnz	r0, 11160 <cbvprintf+0x814>
		char sign = 0;
   11152:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   11156:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 1131c <cbvprintf+0x9d0>
			bps = "(nil)";
   1115a:	f1ab 0a05 	sub.w	sl, fp, #5
   1115e:	e043      	b.n	111e8 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11160:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   11164:	9300      	str	r3, [sp, #0]
   11166:	ab0c      	add	r3, sp, #48	; 0x30
   11168:	aa08      	add	r2, sp, #32
   1116a:	2100      	movs	r1, #0
   1116c:	f014 fd5d 	bl	25c2a <encode_uint>
   11170:	4682      	mov	sl, r0
				conv->altform_0c = true;
   11172:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11176:	f043 0310 	orr.w	r3, r3, #16
   1117a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   1117e:	2378      	movs	r3, #120	; 0x78
   11180:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   11184:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   11188:	e7ca      	b.n	11120 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   1118a:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   1118c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11190:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   11194:	2b07      	cmp	r3, #7
   11196:	d806      	bhi.n	111a6 <cbvprintf+0x85a>
   11198:	e8df f003 	tbb	[pc, r3]
   1119c:	100e0c04 	.word	0x100e0c04
   111a0:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   111a4:	6014      	str	r4, [r2, #0]
		char sign = 0;
   111a6:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   111aa:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   111ae:	f04f 0a00 	mov.w	sl, #0
}
   111b2:	e019      	b.n	111e8 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   111b4:	7014      	strb	r4, [r2, #0]
		break;
   111b6:	e7f6      	b.n	111a6 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   111b8:	8014      	strh	r4, [r2, #0]
		break;
   111ba:	e7f4      	b.n	111a6 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   111bc:	6014      	str	r4, [r2, #0]
		break;
   111be:	e7f2      	b.n	111a6 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   111c0:	4620      	mov	r0, r4
   111c2:	17e1      	asrs	r1, r4, #31
   111c4:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   111c8:	e7ed      	b.n	111a6 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   111ca:	4620      	mov	r0, r4
   111cc:	17e1      	asrs	r1, r4, #31
   111ce:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   111d2:	e7e8      	b.n	111a6 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   111d4:	6014      	str	r4, [r2, #0]
		break;
   111d6:	e7e6      	b.n	111a6 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   111d8:	6014      	str	r4, [r2, #0]
		break;
   111da:	e7e4      	b.n	111a6 <cbvprintf+0x85a>
		switch (conv->specifier) {
   111dc:	f8dd 9008 	ldr.w	r9, [sp, #8]
   111e0:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   111e4:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   111e8:	f1ba 0f00 	cmp.w	sl, #0
   111ec:	f000 808e 	beq.w	1130c <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   111f0:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   111f4:	f1b9 0f00 	cmp.w	r9, #0
   111f8:	d000      	beq.n	111fc <cbvprintf+0x8b0>
			nj_len += 1U;
   111fa:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   111fc:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   11200:	f011 0f10 	tst.w	r1, #16
   11204:	d026      	beq.n	11254 <cbvprintf+0x908>
			nj_len += 2U;
   11206:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   11208:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1120a:	4413      	add	r3, r2
		if (conv->pad_fp) {
   1120c:	f011 0f40 	tst.w	r1, #64	; 0x40
   11210:	d001      	beq.n	11216 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   11212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11214:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   11216:	2f00      	cmp	r7, #0
   11218:	dd32      	ble.n	11280 <cbvprintf+0x934>
			width -= (int)nj_len;
   1121a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   1121c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11220:	f013 0f04 	tst.w	r3, #4
   11224:	d12c      	bne.n	11280 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   11226:	f013 0f40 	tst.w	r3, #64	; 0x40
   1122a:	d018      	beq.n	1125e <cbvprintf+0x912>
					if (sign != 0) {
   1122c:	f1b9 0f00 	cmp.w	r9, #0
   11230:	d018      	beq.n	11264 <cbvprintf+0x918>
						OUTC(sign);
   11232:	4629      	mov	r1, r5
   11234:	4648      	mov	r0, r9
   11236:	47b0      	blx	r6
   11238:	2800      	cmp	r0, #0
   1123a:	db6b      	blt.n	11314 <cbvprintf+0x9c8>
   1123c:	3401      	adds	r4, #1
						sign = 0;
   1123e:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   11242:	2330      	movs	r3, #48	; 0x30
   11244:	9302      	str	r3, [sp, #8]
   11246:	e00f      	b.n	11268 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   11248:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1124c:	e7cc      	b.n	111e8 <cbvprintf+0x89c>
   1124e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   11252:	e7c9      	b.n	111e8 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   11254:	f011 0f08 	tst.w	r1, #8
   11258:	d0d6      	beq.n	11208 <cbvprintf+0x8bc>
			nj_len += 1U;
   1125a:	3201      	adds	r2, #1
   1125c:	e7d4      	b.n	11208 <cbvprintf+0x8bc>
				char pad = ' ';
   1125e:	2320      	movs	r3, #32
   11260:	9302      	str	r3, [sp, #8]
   11262:	e001      	b.n	11268 <cbvprintf+0x91c>
					pad = '0';
   11264:	2330      	movs	r3, #48	; 0x30
   11266:	9302      	str	r3, [sp, #8]
   11268:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   1126a:	1e5f      	subs	r7, r3, #1
   1126c:	2b00      	cmp	r3, #0
   1126e:	dd07      	ble.n	11280 <cbvprintf+0x934>
					OUTC(pad);
   11270:	4629      	mov	r1, r5
   11272:	9802      	ldr	r0, [sp, #8]
   11274:	47b0      	blx	r6
   11276:	2800      	cmp	r0, #0
   11278:	db4c      	blt.n	11314 <cbvprintf+0x9c8>
   1127a:	3401      	adds	r4, #1
				while (width-- > 0) {
   1127c:	463b      	mov	r3, r7
   1127e:	e7f4      	b.n	1126a <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   11280:	f1b9 0f00 	cmp.w	r9, #0
   11284:	d005      	beq.n	11292 <cbvprintf+0x946>
			OUTC(sign);
   11286:	4629      	mov	r1, r5
   11288:	4648      	mov	r0, r9
   1128a:	47b0      	blx	r6
   1128c:	2800      	cmp	r0, #0
   1128e:	db41      	blt.n	11314 <cbvprintf+0x9c8>
   11290:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   11292:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11296:	f3c3 1200 	ubfx	r2, r3, #4, #1
   1129a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1129e:	4313      	orrs	r3, r2
   112a0:	d005      	beq.n	112ae <cbvprintf+0x962>
				OUTC('0');
   112a2:	4629      	mov	r1, r5
   112a4:	2030      	movs	r0, #48	; 0x30
   112a6:	47b0      	blx	r6
   112a8:	2800      	cmp	r0, #0
   112aa:	db33      	blt.n	11314 <cbvprintf+0x9c8>
   112ac:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   112ae:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   112b2:	f013 0f10 	tst.w	r3, #16
   112b6:	d006      	beq.n	112c6 <cbvprintf+0x97a>
				OUTC(conv->specifier);
   112b8:	4629      	mov	r1, r5
   112ba:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   112be:	47b0      	blx	r6
   112c0:	2800      	cmp	r0, #0
   112c2:	db27      	blt.n	11314 <cbvprintf+0x9c8>
   112c4:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   112c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   112c8:	f103 39ff 	add.w	r9, r3, #4294967295
   112cc:	2b00      	cmp	r3, #0
   112ce:	dd07      	ble.n	112e0 <cbvprintf+0x994>
				OUTC('0');
   112d0:	4629      	mov	r1, r5
   112d2:	2030      	movs	r0, #48	; 0x30
   112d4:	47b0      	blx	r6
   112d6:	2800      	cmp	r0, #0
   112d8:	db1c      	blt.n	11314 <cbvprintf+0x9c8>
   112da:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   112dc:	464b      	mov	r3, r9
   112de:	e7f3      	b.n	112c8 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   112e0:	465b      	mov	r3, fp
   112e2:	4652      	mov	r2, sl
   112e4:	4629      	mov	r1, r5
   112e6:	4630      	mov	r0, r6
   112e8:	f014 fd09 	bl	25cfe <outs>
   112ec:	2800      	cmp	r0, #0
   112ee:	db11      	blt.n	11314 <cbvprintf+0x9c8>
   112f0:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   112f2:	2f00      	cmp	r7, #0
   112f4:	dd07      	ble.n	11306 <cbvprintf+0x9ba>
			OUTC(' ');
   112f6:	4629      	mov	r1, r5
   112f8:	2020      	movs	r0, #32
   112fa:	47b0      	blx	r6
   112fc:	2800      	cmp	r0, #0
   112fe:	db09      	blt.n	11314 <cbvprintf+0x9c8>
   11300:	3401      	adds	r4, #1
			--width;
   11302:	3f01      	subs	r7, #1
   11304:	e7f5      	b.n	112f2 <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   11306:	46c2      	mov	sl, r8
   11308:	f7ff bb28 	b.w	1095c <cbvprintf+0x10>
   1130c:	46c2      	mov	sl, r8
   1130e:	f7ff bb25 	b.w	1095c <cbvprintf+0x10>
		}
	}

	return count;
   11312:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   11314:	b013      	add	sp, #76	; 0x4c
   11316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1131a:	bf00      	nop
   1131c:	0002a579 	.word	0x0002a579

00011320 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   11320:	b508      	push	{r3, lr}
	__asm__ volatile(
   11322:	f04f 0240 	mov.w	r2, #64	; 0x40
   11326:	f3ef 8311 	mrs	r3, BASEPRI
   1132a:	f382 8812 	msr	BASEPRI_MAX, r2
   1132e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   11332:	f002 ff55 	bl	141e0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11336:	4803      	ldr	r0, [pc, #12]	; (11344 <sys_reboot+0x24>)
   11338:	f014 fa79 	bl	2582e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1133c:	f001 fefe 	bl	1313c <arch_cpu_idle>
   11340:	e7fc      	b.n	1133c <sys_reboot+0x1c>
   11342:	bf00      	nop
   11344:	0002a57c 	.word	0x0002a57c

00011348 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   11348:	4b05      	ldr	r3, [pc, #20]	; (11360 <is_rodata+0x18>)
   1134a:	4298      	cmp	r0, r3
   1134c:	d304      	bcc.n	11358 <is_rodata+0x10>
   1134e:	4b05      	ldr	r3, [pc, #20]	; (11364 <is_rodata+0x1c>)
   11350:	4298      	cmp	r0, r3
   11352:	d303      	bcc.n	1135c <is_rodata+0x14>
   11354:	2000      	movs	r0, #0
   11356:	4770      	bx	lr
   11358:	2000      	movs	r0, #0
   1135a:	4770      	bx	lr
   1135c:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   1135e:	4770      	bx	lr
   11360:	00029a7c 	.word	0x00029a7c
   11364:	0002de04 	.word	0x0002de04

00011368 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   11368:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   1136a:	4b06      	ldr	r3, [pc, #24]	; (11384 <thread_set+0x1c>)
   1136c:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1136e:	b118      	cbz	r0, 11378 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   11370:	4b05      	ldr	r3, [pc, #20]	; (11388 <thread_set+0x20>)
   11372:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   11374:	2b09      	cmp	r3, #9
   11376:	dc00      	bgt.n	1137a <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   11378:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   1137a:	4804      	ldr	r0, [pc, #16]	; (1138c <thread_set+0x24>)
   1137c:	f00d ff40 	bl	1f200 <z_impl_k_sem_give>
}
   11380:	e7fa      	b.n	11378 <thread_set+0x10>
   11382:	bf00      	nop
   11384:	20001f38 	.word	0x20001f38
   11388:	20001f04 	.word	0x20001f04
   1138c:	200007ac 	.word	0x200007ac

00011390 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   11390:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   11392:	4802      	ldr	r0, [pc, #8]	; (1139c <log_process_thread_timer_expiry_fn+0xc>)
   11394:	f00d ff34 	bl	1f200 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   11398:	bd08      	pop	{r3, pc}
   1139a:	bf00      	nop
   1139c:	200007ac 	.word	0x200007ac

000113a0 <next_pending>:
{
   113a0:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   113a2:	4803      	ldr	r0, [pc, #12]	; (113b0 <next_pending+0x10>)
   113a4:	f014 fcdb 	bl	25d5e <log_list_head_peek>
}
   113a8:	3800      	subs	r0, #0
   113aa:	bf18      	it	ne
   113ac:	2001      	movne	r0, #1
   113ae:	bd08      	pop	{r3, pc}
   113b0:	20001f10 	.word	0x20001f10

000113b4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   113b4:	b530      	push	{r4, r5, lr}
   113b6:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   113b8:	2200      	movs	r2, #0
   113ba:	490f      	ldr	r1, [pc, #60]	; (113f8 <enable_logger+0x44>)
   113bc:	480f      	ldr	r0, [pc, #60]	; (113fc <enable_logger+0x48>)
   113be:	f018 fada 	bl	29976 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   113c2:	4d0f      	ldr	r5, [pc, #60]	; (11400 <enable_logger+0x4c>)
   113c4:	2200      	movs	r2, #0
   113c6:	2300      	movs	r3, #0
   113c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   113cc:	2400      	movs	r4, #0
   113ce:	9404      	str	r4, [sp, #16]
   113d0:	230e      	movs	r3, #14
   113d2:	9303      	str	r3, [sp, #12]
   113d4:	9402      	str	r4, [sp, #8]
   113d6:	9401      	str	r4, [sp, #4]
   113d8:	9400      	str	r4, [sp, #0]
   113da:	4b0a      	ldr	r3, [pc, #40]	; (11404 <enable_logger+0x50>)
   113dc:	f44f 7240 	mov.w	r2, #768	; 0x300
   113e0:	4909      	ldr	r1, [pc, #36]	; (11408 <enable_logger+0x54>)
   113e2:	4628      	mov	r0, r5
   113e4:	f00d fa8e 	bl	1e904 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   113e8:	4908      	ldr	r1, [pc, #32]	; (1140c <enable_logger+0x58>)
   113ea:	4628      	mov	r0, r5
   113ec:	f00d f91e 	bl	1e62c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   113f0:	4620      	mov	r0, r4
   113f2:	b009      	add	sp, #36	; 0x24
   113f4:	bd30      	pop	{r4, r5, pc}
   113f6:	bf00      	nop
   113f8:	00011391 	.word	0x00011391
   113fc:	20001558 	.word	0x20001558
   11400:	20001590 	.word	0x20001590
   11404:	00011ca1 	.word	0x00011ca1
   11408:	20003920 	.word	0x20003920
   1140c:	0002a5a8 	.word	0x0002a5a8

00011410 <z_log_get_s_mask>:
{
   11410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11412:	4604      	mov	r4, r0
   11414:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   11416:	2920      	cmp	r1, #32
   11418:	d803      	bhi.n	11422 <z_log_get_s_mask+0x12>
			arm = false;
   1141a:	2000      	movs	r0, #0
   1141c:	4606      	mov	r6, r0
   1141e:	4605      	mov	r5, r0
   11420:	e00e      	b.n	11440 <z_log_get_s_mask+0x30>
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   11422:	4d14      	ldr	r5, [pc, #80]	; (11474 <z_log_get_s_mask+0x64>)
   11424:	2387      	movs	r3, #135	; 0x87
   11426:	462a      	mov	r2, r5
   11428:	4913      	ldr	r1, [pc, #76]	; (11478 <z_log_get_s_mask+0x68>)
   1142a:	4814      	ldr	r0, [pc, #80]	; (1147c <z_log_get_s_mask+0x6c>)
   1142c:	f014 f9ff 	bl	2582e <printk>
   11430:	2187      	movs	r1, #135	; 0x87
   11432:	4628      	mov	r0, r5
   11434:	f014 fc7d 	bl	25d32 <assert_post_action>
   11438:	e7ef      	b.n	1141a <z_log_get_s_mask+0xa>
			arm = !arm;
   1143a:	f085 0501 	eor.w	r5, r5, #1
			arm = false;
   1143e:	461c      	mov	r4, r3
	while ((curr = *str++) && arg < nargs) {
   11440:	4623      	mov	r3, r4
   11442:	f813 2b01 	ldrb.w	r2, [r3], #1
   11446:	b19a      	cbz	r2, 11470 <z_log_get_s_mask+0x60>
   11448:	42be      	cmp	r6, r7
   1144a:	d211      	bcs.n	11470 <z_log_get_s_mask+0x60>
		if (curr == '%') {
   1144c:	2a25      	cmp	r2, #37	; 0x25
   1144e:	d0f4      	beq.n	1143a <z_log_get_s_mask+0x2a>
		} else if (arm && isalpha((int)curr)) {
   11450:	2d00      	cmp	r5, #0
   11452:	d0f4      	beq.n	1143e <z_log_get_s_mask+0x2e>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   11454:	f042 0120 	orr.w	r1, r2, #32
   11458:	3961      	subs	r1, #97	; 0x61
   1145a:	2919      	cmp	r1, #25
   1145c:	d8ef      	bhi.n	1143e <z_log_get_s_mask+0x2e>
			if (curr == 's') {
   1145e:	2a73      	cmp	r2, #115	; 0x73
   11460:	d002      	beq.n	11468 <z_log_get_s_mask+0x58>
			arg++;
   11462:	3601      	adds	r6, #1
			arm = false;
   11464:	2500      	movs	r5, #0
   11466:	e7ea      	b.n	1143e <z_log_get_s_mask+0x2e>
				mask |= BIT(arg);
   11468:	2201      	movs	r2, #1
   1146a:	40b2      	lsls	r2, r6
   1146c:	4310      	orrs	r0, r2
   1146e:	e7f8      	b.n	11462 <z_log_get_s_mask+0x52>
}
   11470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11472:	bf00      	nop
   11474:	0002a5b0 	.word	0x0002a5b0
   11478:	0002a5e0 	.word	0x0002a5e0
   1147c:	00029ff8 	.word	0x00029ff8

00011480 <log_init>:
{
   11480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   11482:	4b20      	ldr	r3, [pc, #128]	; (11504 <log_init+0x84>)
   11484:	4a20      	ldr	r2, [pc, #128]	; (11508 <log_init+0x88>)
   11486:	1a9b      	subs	r3, r3, r2
   11488:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1148a:	2b9f      	cmp	r3, #159	; 0x9f
   1148c:	d80e      	bhi.n	114ac <log_init+0x2c>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1148e:	4b1f      	ldr	r3, [pc, #124]	; (1150c <log_init+0x8c>)
   11490:	f3bf 8f5b 	dmb	ish
   11494:	e853 2f00 	ldrex	r2, [r3]
   11498:	1c51      	adds	r1, r2, #1
   1149a:	e843 1000 	strex	r0, r1, [r3]
   1149e:	2800      	cmp	r0, #0
   114a0:	d1f8      	bne.n	11494 <log_init+0x14>
   114a2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   114a6:	bb5a      	cbnz	r2, 11500 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
   114a8:	2400      	movs	r4, #0
   114aa:	e017      	b.n	114dc <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   114ac:	4c18      	ldr	r4, [pc, #96]	; (11510 <log_init+0x90>)
   114ae:	f240 234a 	movw	r3, #586	; 0x24a
   114b2:	4622      	mov	r2, r4
   114b4:	4917      	ldr	r1, [pc, #92]	; (11514 <log_init+0x94>)
   114b6:	4818      	ldr	r0, [pc, #96]	; (11518 <log_init+0x98>)
   114b8:	f014 f9b9 	bl	2582e <printk>
   114bc:	f240 214a 	movw	r1, #586	; 0x24a
   114c0:	4620      	mov	r0, r4
   114c2:	f014 fc36 	bl	25d32 <assert_post_action>
   114c6:	e7e2      	b.n	1148e <log_init+0xe>
					   backend->cb->ctx,
   114c8:	4b0f      	ldr	r3, [pc, #60]	; (11508 <log_init+0x88>)
   114ca:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   114ce:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   114d0:	2204      	movs	r2, #4
   114d2:	6819      	ldr	r1, [r3, #0]
   114d4:	4628      	mov	r0, r5
   114d6:	f000 fc43 	bl	11d60 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   114da:	3401      	adds	r4, #1
   114dc:	42b4      	cmp	r4, r6
   114de:	da0f      	bge.n	11500 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
   114e0:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
   114e2:	4d09      	ldr	r5, [pc, #36]	; (11508 <log_init+0x88>)
   114e4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   114e8:	7b2b      	ldrb	r3, [r5, #12]
   114ea:	2b00      	cmp	r3, #0
   114ec:	d0f5      	beq.n	114da <log_init+0x5a>
			if (backend->api->init != NULL) {
   114ee:	0123      	lsls	r3, r4, #4
   114f0:	4a05      	ldr	r2, [pc, #20]	; (11508 <log_init+0x88>)
   114f2:	58d3      	ldr	r3, [r2, r3]
   114f4:	699b      	ldr	r3, [r3, #24]
   114f6:	2b00      	cmp	r3, #0
   114f8:	d0e6      	beq.n	114c8 <log_init+0x48>
				backend->api->init(backend);
   114fa:	4628      	mov	r0, r5
   114fc:	4798      	blx	r3
   114fe:	e7e3      	b.n	114c8 <log_init+0x48>
}
   11500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11502:	bf00      	nop
   11504:	00029e58 	.word	0x00029e58
   11508:	00029e48 	.word	0x00029e48
   1150c:	20001f0c 	.word	0x20001f0c
   11510:	0002a5b0 	.word	0x0002a5b0
   11514:	0002a644 	.word	0x0002a644
   11518:	00029ff8 	.word	0x00029ff8

0001151c <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   1151c:	b138      	cbz	r0, 1152e <log_set_timestamp_func+0x12>
{
   1151e:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   11520:	4a04      	ldr	r2, [pc, #16]	; (11534 <log_set_timestamp_func+0x18>)
   11522:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
   11524:	4608      	mov	r0, r1
   11526:	f000 ff2b 	bl	12380 <log_output_timestamp_freq_set>
	return 0;
   1152a:	2000      	movs	r0, #0
}
   1152c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1152e:	f06f 0015 	mvn.w	r0, #21
}
   11532:	4770      	bx	lr
   11534:	2000044c 	.word	0x2000044c

00011538 <log_core_init>:
{
   11538:	b508      	push	{r3, lr}
	panic_mode = false;
   1153a:	2300      	movs	r3, #0
   1153c:	4a0a      	ldr	r2, [pc, #40]	; (11568 <log_core_init+0x30>)
   1153e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   11540:	4a0a      	ldr	r2, [pc, #40]	; (1156c <log_core_init+0x34>)
   11542:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
   11544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11548:	4809      	ldr	r0, [pc, #36]	; (11570 <log_core_init+0x38>)
   1154a:	f7ff ffe7 	bl	1151c <log_set_timestamp_func>
		log_msg_pool_init();
   1154e:	f000 fc4d 	bl	11dec <log_msg_pool_init>
		log_list_init(&list);
   11552:	4808      	ldr	r0, [pc, #32]	; (11574 <log_core_init+0x3c>)
   11554:	f014 fbf5 	bl	25d42 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   11558:	2308      	movs	r3, #8
   1155a:	2248      	movs	r2, #72	; 0x48
   1155c:	4906      	ldr	r1, [pc, #24]	; (11578 <log_core_init+0x40>)
   1155e:	4807      	ldr	r0, [pc, #28]	; (1157c <log_core_init+0x44>)
   11560:	f018 f87f 	bl	29662 <k_mem_slab_init>
}
   11564:	bd08      	pop	{r3, pc}
   11566:	bf00      	nop
   11568:	20003757 	.word	0x20003757
   1156c:	20001f08 	.word	0x20001f08
   11570:	00025d77 	.word	0x00025d77
   11574:	20001f10 	.word	0x20001f10
   11578:	200069d8 	.word	0x200069d8
   1157c:	20001f18 	.word	0x20001f18

00011580 <get_msg>:
{
   11580:	b510      	push	{r4, lr}
   11582:	f04f 0340 	mov.w	r3, #64	; 0x40
   11586:	f3ef 8411 	mrs	r4, BASEPRI
   1158a:	f383 8812 	msr	BASEPRI_MAX, r3
   1158e:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   11592:	4804      	ldr	r0, [pc, #16]	; (115a4 <get_msg+0x24>)
   11594:	f014 fbe5 	bl	25d62 <log_list_head_get>
	__asm__ volatile(
   11598:	f384 8811 	msr	BASEPRI, r4
   1159c:	f3bf 8f6f 	isb	sy
}
   115a0:	bd10      	pop	{r4, pc}
   115a2:	bf00      	nop
   115a4:	20001f10 	.word	0x20001f10

000115a8 <z_log_notify_backend_enabled>:
{
   115a8:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   115aa:	4b05      	ldr	r3, [pc, #20]	; (115c0 <z_log_notify_backend_enabled+0x18>)
   115ac:	781b      	ldrb	r3, [r3, #0]
   115ae:	b11b      	cbz	r3, 115b8 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   115b0:	4b03      	ldr	r3, [pc, #12]	; (115c0 <z_log_notify_backend_enabled+0x18>)
   115b2:	2201      	movs	r2, #1
   115b4:	701a      	strb	r2, [r3, #0]
}
   115b6:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   115b8:	4802      	ldr	r0, [pc, #8]	; (115c4 <z_log_notify_backend_enabled+0x1c>)
   115ba:	f00d fe21 	bl	1f200 <z_impl_k_sem_give>
}
   115be:	e7f7      	b.n	115b0 <z_log_notify_backend_enabled+0x8>
   115c0:	20003756 	.word	0x20003756
   115c4:	200007ac 	.word	0x200007ac

000115c8 <z_log_dropped>:
   115c8:	4b0c      	ldr	r3, [pc, #48]	; (115fc <z_log_dropped+0x34>)
   115ca:	f3bf 8f5b 	dmb	ish
   115ce:	e853 2f00 	ldrex	r2, [r3]
   115d2:	3201      	adds	r2, #1
   115d4:	e843 2100 	strex	r1, r2, [r3]
   115d8:	2900      	cmp	r1, #0
   115da:	d1f8      	bne.n	115ce <z_log_dropped+0x6>
   115dc:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   115e0:	4b07      	ldr	r3, [pc, #28]	; (11600 <z_log_dropped+0x38>)
   115e2:	f3bf 8f5b 	dmb	ish
   115e6:	e853 2f00 	ldrex	r2, [r3]
   115ea:	3a01      	subs	r2, #1
   115ec:	e843 2100 	strex	r1, r2, [r3]
   115f0:	2900      	cmp	r1, #0
   115f2:	d1f8      	bne.n	115e6 <z_log_dropped+0x1e>
   115f4:	f3bf 8f5b 	dmb	ish
}
   115f8:	4770      	bx	lr
   115fa:	bf00      	nop
   115fc:	20001f08 	.word	0x20001f08
   11600:	20001f04 	.word	0x20001f04

00011604 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11604:	4b06      	ldr	r3, [pc, #24]	; (11620 <z_log_dropped_read_and_clear+0x1c>)
}
   11606:	2000      	movs	r0, #0
   11608:	4602      	mov	r2, r0
   1160a:	f3bf 8f5b 	dmb	ish
   1160e:	e853 0f00 	ldrex	r0, [r3]
   11612:	e843 2100 	strex	r1, r2, [r3]
   11616:	2900      	cmp	r1, #0
   11618:	d1f9      	bne.n	1160e <z_log_dropped_read_and_clear+0xa>
   1161a:	f3bf 8f5b 	dmb	ish
   1161e:	4770      	bx	lr
   11620:	20001f08 	.word	0x20001f08

00011624 <dropped_notify>:
{
   11624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   11628:	f7ff ffec 	bl	11604 <z_log_dropped_read_and_clear>
   1162c:	4607      	mov	r7, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   1162e:	2400      	movs	r4, #0
   11630:	e01c      	b.n	1166c <dropped_notify+0x48>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   11632:	f8df 9084 	ldr.w	r9, [pc, #132]	; 116b8 <dropped_notify+0x94>
   11636:	f240 131d 	movw	r3, #285	; 0x11d
   1163a:	464a      	mov	r2, r9
   1163c:	491a      	ldr	r1, [pc, #104]	; (116a8 <dropped_notify+0x84>)
   1163e:	481b      	ldr	r0, [pc, #108]	; (116ac <dropped_notify+0x88>)
   11640:	f014 f8f5 	bl	2582e <printk>
   11644:	f240 111d 	movw	r1, #285	; 0x11d
   11648:	4648      	mov	r0, r9
   1164a:	f014 fb72 	bl	25d32 <assert_post_action>
   1164e:	e019      	b.n	11684 <dropped_notify+0x60>
	__ASSERT_NO_MSG(backend != NULL);
   11650:	f8df 9064 	ldr.w	r9, [pc, #100]	; 116b8 <dropped_notify+0x94>
   11654:	23b4      	movs	r3, #180	; 0xb4
   11656:	464a      	mov	r2, r9
   11658:	4913      	ldr	r1, [pc, #76]	; (116a8 <dropped_notify+0x84>)
   1165a:	4814      	ldr	r0, [pc, #80]	; (116ac <dropped_notify+0x88>)
   1165c:	f014 f8e7 	bl	2582e <printk>
   11660:	21b4      	movs	r1, #180	; 0xb4
   11662:	4648      	mov	r0, r9
   11664:	f014 fb65 	bl	25d32 <assert_post_action>
   11668:	e012      	b.n	11690 <dropped_notify+0x6c>
   1166a:	3401      	adds	r4, #1
   1166c:	4b10      	ldr	r3, [pc, #64]	; (116b0 <dropped_notify+0x8c>)
   1166e:	4a11      	ldr	r2, [pc, #68]	; (116b4 <dropped_notify+0x90>)
   11670:	1a9b      	subs	r3, r3, r2
   11672:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   11676:	da14      	bge.n	116a2 <dropped_notify+0x7e>
	return &__log_backends_start[idx];
   11678:	ea4f 1804 	mov.w	r8, r4, lsl #4
   1167c:	4d0d      	ldr	r5, [pc, #52]	; (116b4 <dropped_notify+0x90>)
	__ASSERT_NO_MSG(backend != NULL);
   1167e:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
   11682:	d0d6      	beq.n	11632 <dropped_notify+0xe>
	return backend->cb->active;
   11684:	6873      	ldr	r3, [r6, #4]
   11686:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   11688:	2b00      	cmp	r3, #0
   1168a:	d0ee      	beq.n	1166a <dropped_notify+0x46>
	__ASSERT_NO_MSG(backend != NULL);
   1168c:	2e00      	cmp	r6, #0
   1168e:	d0df      	beq.n	11650 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
   11690:	f858 3005 	ldr.w	r3, [r8, r5]
   11694:	691b      	ldr	r3, [r3, #16]
   11696:	2b00      	cmp	r3, #0
   11698:	d0e7      	beq.n	1166a <dropped_notify+0x46>
		backend->api->dropped(backend, cnt);
   1169a:	4639      	mov	r1, r7
   1169c:	4630      	mov	r0, r6
   1169e:	4798      	blx	r3
}
   116a0:	e7e3      	b.n	1166a <dropped_notify+0x46>
}
   116a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   116a6:	bf00      	nop
   116a8:	0002a62c 	.word	0x0002a62c
   116ac:	00029ff8 	.word	0x00029ff8
   116b0:	00029e58 	.word	0x00029e58
   116b4:	00029e48 	.word	0x00029e48
   116b8:	0002a5f8 	.word	0x0002a5f8

000116bc <z_log_dropped_pending>:
	return dropped_cnt > 0;
   116bc:	4b03      	ldr	r3, [pc, #12]	; (116cc <z_log_dropped_pending+0x10>)
   116be:	6818      	ldr	r0, [r3, #0]
}
   116c0:	2800      	cmp	r0, #0
   116c2:	bfd4      	ite	le
   116c4:	2000      	movle	r0, #0
   116c6:	2001      	movgt	r0, #1
   116c8:	4770      	bx	lr
   116ca:	bf00      	nop
   116cc:	20001f08 	.word	0x20001f08

000116d0 <z_log_strdup>:
{
   116d0:	b510      	push	{r4, lr}
   116d2:	b082      	sub	sp, #8
   116d4:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   116d6:	f7ff fe37 	bl	11348 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   116da:	bb10      	cbnz	r0, 11722 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   116dc:	2200      	movs	r2, #0
   116de:	2300      	movs	r3, #0
   116e0:	a901      	add	r1, sp, #4
   116e2:	4811      	ldr	r0, [pc, #68]	; (11728 <z_log_strdup+0x58>)
   116e4:	f00c fec6 	bl	1e474 <k_mem_slab_alloc>
	if (err != 0) {
   116e8:	b108      	cbz	r0, 116ee <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   116ea:	4c10      	ldr	r4, [pc, #64]	; (1172c <z_log_strdup+0x5c>)
   116ec:	e019      	b.n	11722 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
   116ee:	9b01      	ldr	r3, [sp, #4]
   116f0:	2201      	movs	r2, #1
   116f2:	f3bf 8f5b 	dmb	ish
   116f6:	e853 1f00 	ldrex	r1, [r3]
   116fa:	e843 2000 	strex	r0, r2, [r3]
   116fe:	2800      	cmp	r0, #0
   11700:	d1f9      	bne.n	116f6 <z_log_strdup+0x26>
   11702:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   11706:	2241      	movs	r2, #65	; 0x41
   11708:	4621      	mov	r1, r4
   1170a:	9801      	ldr	r0, [sp, #4]
   1170c:	3004      	adds	r0, #4
   1170e:	f015 f810 	bl	26732 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   11712:	9c01      	ldr	r4, [sp, #4]
   11714:	237e      	movs	r3, #126	; 0x7e
   11716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   1171a:	2300      	movs	r3, #0
   1171c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	return dup->buf;
   11720:	3404      	adds	r4, #4
}
   11722:	4620      	mov	r0, r4
   11724:	b002      	add	sp, #8
   11726:	bd10      	pop	{r4, pc}
   11728:	20001f18 	.word	0x20001f18
   1172c:	0002a668 	.word	0x0002a668

00011730 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   11730:	b140      	cbz	r0, 11744 <log_is_strdup+0x14>
   11732:	4a07      	ldr	r2, [pc, #28]	; (11750 <log_is_strdup+0x20>)
   11734:	4290      	cmp	r0, r2
   11736:	d307      	bcc.n	11748 <log_is_strdup+0x18>
   11738:	f502 7210 	add.w	r2, r2, #576	; 0x240
   1173c:	4290      	cmp	r0, r2
   1173e:	d305      	bcc.n	1174c <log_is_strdup+0x1c>
   11740:	2000      	movs	r0, #0
   11742:	4770      	bx	lr
   11744:	2000      	movs	r0, #0
   11746:	4770      	bx	lr
   11748:	2000      	movs	r0, #0
   1174a:	4770      	bx	lr
   1174c:	2001      	movs	r0, #1
}
   1174e:	4770      	bx	lr
   11750:	200069d8 	.word	0x200069d8

00011754 <detect_missed_strdup>:
{
   11754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11758:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   1175a:	f013 0f01 	tst.w	r3, #1
   1175e:	d001      	beq.n	11764 <detect_missed_strdup+0x10>
}
   11760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11764:	4607      	mov	r7, r0
	msg_str = log_msg_str_get(msg);
   11766:	f014 fbc8 	bl	25efa <log_msg_str_get>
   1176a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1176c:	4638      	mov	r0, r7
   1176e:	f014 fbaf 	bl	25ed0 <log_msg_nargs_get>
   11772:	4601      	mov	r1, r0
   11774:	4640      	mov	r0, r8
   11776:	f7ff fe4b 	bl	11410 <z_log_get_s_mask>
   1177a:	4605      	mov	r5, r0
	while (mask) {
   1177c:	e004      	b.n	11788 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   1177e:	2301      	movs	r3, #1
   11780:	fa03 f404 	lsl.w	r4, r3, r4
   11784:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   11788:	2d00      	cmp	r5, #0
   1178a:	d0e9      	beq.n	11760 <detect_missed_strdup+0xc>
		idx = 31 - __builtin_clz(mask);
   1178c:	fab5 f485 	clz	r4, r5
   11790:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   11794:	4621      	mov	r1, r4
   11796:	4638      	mov	r0, r7
   11798:	f014 fb9d 	bl	25ed6 <log_msg_arg_get>
   1179c:	4606      	mov	r6, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1179e:	f7ff fdd3 	bl	11348 <is_rodata>
   117a2:	2800      	cmp	r0, #0
   117a4:	d1eb      	bne.n	1177e <detect_missed_strdup+0x2a>
   117a6:	4630      	mov	r0, r6
   117a8:	f7ff ffc2 	bl	11730 <log_is_strdup>
   117ac:	2800      	cmp	r0, #0
   117ae:	d1e6      	bne.n	1177e <detect_missed_strdup+0x2a>
   117b0:	4b0d      	ldr	r3, [pc, #52]	; (117e8 <detect_missed_strdup+0x94>)
   117b2:	429e      	cmp	r6, r3
   117b4:	d0e3      	beq.n	1177e <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   117b6:	8979      	ldrh	r1, [r7, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   117b8:	f3c1 1189 	ubfx	r1, r1, #6, #10
   117bc:	f000 fac0 	bl	11d40 <log_source_name_get>
   117c0:	4606      	mov	r6, r0
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   117c2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 117f8 <detect_missed_strdup+0xa4>
   117c6:	23d8      	movs	r3, #216	; 0xd8
   117c8:	464a      	mov	r2, r9
   117ca:	4908      	ldr	r1, [pc, #32]	; (117ec <detect_missed_strdup+0x98>)
   117cc:	4808      	ldr	r0, [pc, #32]	; (117f0 <detect_missed_strdup+0x9c>)
   117ce:	f014 f82e 	bl	2582e <printk>
   117d2:	4643      	mov	r3, r8
   117d4:	4632      	mov	r2, r6
   117d6:	4621      	mov	r1, r4
   117d8:	4806      	ldr	r0, [pc, #24]	; (117f4 <detect_missed_strdup+0xa0>)
   117da:	f014 f828 	bl	2582e <printk>
   117de:	21d8      	movs	r1, #216	; 0xd8
   117e0:	4648      	mov	r0, r9
   117e2:	f014 faa6 	bl	25d32 <assert_post_action>
   117e6:	e7ca      	b.n	1177e <detect_missed_strdup+0x2a>
   117e8:	0002a668 	.word	0x0002a668
   117ec:	0002dc18 	.word	0x0002dc18
   117f0:	00029ff8 	.word	0x00029ff8
   117f4:	0002a684 	.word	0x0002a684
   117f8:	0002a5b0 	.word	0x0002a5b0

000117fc <msg_process>:
{
   117fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11800:	4607      	mov	r7, r0
	if (!bypass) {
   11802:	2900      	cmp	r1, #0
   11804:	d151      	bne.n	118aa <msg_process+0xae>
		    !panic_mode) {
   11806:	4b2b      	ldr	r3, [pc, #172]	; (118b4 <msg_process+0xb8>)
   11808:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   1180a:	b10b      	cbz	r3, 11810 <msg_process+0x14>
{
   1180c:	2400      	movs	r4, #0
   1180e:	e025      	b.n	1185c <msg_process+0x60>
			detect_missed_strdup(msg.msg);
   11810:	f7ff ffa0 	bl	11754 <detect_missed_strdup>
   11814:	e7fa      	b.n	1180c <msg_process+0x10>
	__ASSERT_NO_MSG(backend != NULL);
   11816:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 118cc <msg_process+0xd0>
   1181a:	f240 131d 	movw	r3, #285	; 0x11d
   1181e:	464a      	mov	r2, r9
   11820:	4925      	ldr	r1, [pc, #148]	; (118b8 <msg_process+0xbc>)
   11822:	4826      	ldr	r0, [pc, #152]	; (118bc <msg_process+0xc0>)
   11824:	f014 f803 	bl	2582e <printk>
   11828:	f240 111d 	movw	r1, #285	; 0x11d
   1182c:	4648      	mov	r0, r9
   1182e:	f014 fa80 	bl	25d32 <assert_post_action>
   11832:	e01f      	b.n	11874 <msg_process+0x78>
	__ASSERT_NO_MSG(backend != NULL);
   11834:	f8df 9094 	ldr.w	r9, [pc, #148]	; 118cc <msg_process+0xd0>
   11838:	236b      	movs	r3, #107	; 0x6b
   1183a:	464a      	mov	r2, r9
   1183c:	491e      	ldr	r1, [pc, #120]	; (118b8 <msg_process+0xbc>)
   1183e:	481f      	ldr	r0, [pc, #124]	; (118bc <msg_process+0xc0>)
   11840:	f013 fff5 	bl	2582e <printk>
   11844:	216b      	movs	r1, #107	; 0x6b
   11846:	4648      	mov	r0, r9
   11848:	f014 fa73 	bl	25d32 <assert_post_action>
   1184c:	e01e      	b.n	1188c <msg_process+0x90>
	backend->api->put(backend, msg);
   1184e:	f858 3005 	ldr.w	r3, [r8, r5]
   11852:	685b      	ldr	r3, [r3, #4]
   11854:	4639      	mov	r1, r7
   11856:	4630      	mov	r0, r6
   11858:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   1185a:	3401      	adds	r4, #1
   1185c:	4b18      	ldr	r3, [pc, #96]	; (118c0 <msg_process+0xc4>)
   1185e:	4a19      	ldr	r2, [pc, #100]	; (118c4 <msg_process+0xc8>)
   11860:	1a9b      	subs	r3, r3, r2
   11862:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   11866:	da20      	bge.n	118aa <msg_process+0xae>
	return &__log_backends_start[idx];
   11868:	ea4f 1804 	mov.w	r8, r4, lsl #4
   1186c:	4d15      	ldr	r5, [pc, #84]	; (118c4 <msg_process+0xc8>)
	__ASSERT_NO_MSG(backend != NULL);
   1186e:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
   11872:	d0d0      	beq.n	11816 <msg_process+0x1a>
	return backend->cb->active;
   11874:	6873      	ldr	r3, [r6, #4]
   11876:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   11878:	2b00      	cmp	r3, #0
   1187a:	d0ee      	beq.n	1185a <msg_process+0x5e>
			    msg_filter_check(backend, msg)) {
   1187c:	4639      	mov	r1, r7
   1187e:	4630      	mov	r0, r6
   11880:	f014 fa77 	bl	25d72 <msg_filter_check>
			if (log_backend_is_active(backend) &&
   11884:	2800      	cmp	r0, #0
   11886:	d0e8      	beq.n	1185a <msg_process+0x5e>
	__ASSERT_NO_MSG(backend != NULL);
   11888:	2e00      	cmp	r6, #0
   1188a:	d0d3      	beq.n	11834 <msg_process+0x38>
	__ASSERT_NO_MSG(msg != NULL);
   1188c:	2f00      	cmp	r7, #0
   1188e:	d1de      	bne.n	1184e <msg_process+0x52>
   11890:	f8df 9038 	ldr.w	r9, [pc, #56]	; 118cc <msg_process+0xd0>
   11894:	236c      	movs	r3, #108	; 0x6c
   11896:	464a      	mov	r2, r9
   11898:	490b      	ldr	r1, [pc, #44]	; (118c8 <msg_process+0xcc>)
   1189a:	4808      	ldr	r0, [pc, #32]	; (118bc <msg_process+0xc0>)
   1189c:	f013 ffc7 	bl	2582e <printk>
   118a0:	216c      	movs	r1, #108	; 0x6c
   118a2:	4648      	mov	r0, r9
   118a4:	f014 fa45 	bl	25d32 <assert_post_action>
   118a8:	e7d1      	b.n	1184e <msg_process+0x52>
			log_msg_put(msg.msg);
   118aa:	4638      	mov	r0, r7
   118ac:	f014 fb27 	bl	25efe <log_msg_put>
}
   118b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   118b4:	20003757 	.word	0x20003757
   118b8:	0002a62c 	.word	0x0002a62c
   118bc:	00029ff8 	.word	0x00029ff8
   118c0:	00029e58 	.word	0x00029e58
   118c4:	00029e48 	.word	0x00029e48
   118c8:	0002a6c8 	.word	0x0002a6c8
   118cc:	0002a5f8 	.word	0x0002a5f8

000118d0 <z_impl_log_process>:
{
   118d0:	b510      	push	{r4, lr}
   118d2:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   118d4:	4b11      	ldr	r3, [pc, #68]	; (1191c <z_impl_log_process+0x4c>)
   118d6:	781b      	ldrb	r3, [r3, #0]
   118d8:	b903      	cbnz	r3, 118dc <z_impl_log_process+0xc>
   118da:	b1d0      	cbz	r0, 11912 <z_impl_log_process+0x42>
	msg = get_msg();
   118dc:	f7ff fe50 	bl	11580 <get_msg>
	if (msg.msg) {
   118e0:	4603      	mov	r3, r0
   118e2:	b180      	cbz	r0, 11906 <z_impl_log_process+0x36>
		if (!bypass) {
   118e4:	b95c      	cbnz	r4, 118fe <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   118e6:	4a0e      	ldr	r2, [pc, #56]	; (11920 <z_impl_log_process+0x50>)
   118e8:	f3bf 8f5b 	dmb	ish
   118ec:	e852 1f00 	ldrex	r1, [r2]
   118f0:	3901      	subs	r1, #1
   118f2:	e842 1000 	strex	r0, r1, [r2]
   118f6:	2800      	cmp	r0, #0
   118f8:	d1f8      	bne.n	118ec <z_impl_log_process+0x1c>
   118fa:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
   118fe:	4621      	mov	r1, r4
   11900:	4618      	mov	r0, r3
   11902:	f7ff ff7b 	bl	117fc <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   11906:	b914      	cbnz	r4, 1190e <z_impl_log_process+0x3e>
   11908:	f7ff fed8 	bl	116bc <z_log_dropped_pending>
   1190c:	b910      	cbnz	r0, 11914 <z_impl_log_process+0x44>
	return next_pending();
   1190e:	f7ff fd47 	bl	113a0 <next_pending>
}
   11912:	bd10      	pop	{r4, pc}
		dropped_notify();
   11914:	f7ff fe86 	bl	11624 <dropped_notify>
   11918:	e7f9      	b.n	1190e <z_impl_log_process+0x3e>
   1191a:	bf00      	nop
   1191c:	20003756 	.word	0x20003756
   11920:	20001f04 	.word	0x20001f04

00011924 <z_log_msg_post_finalize>:
{
   11924:	b510      	push	{r4, lr}
   11926:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11928:	4b1d      	ldr	r3, [pc, #116]	; (119a0 <z_log_msg_post_finalize+0x7c>)
   1192a:	f3bf 8f5b 	dmb	ish
   1192e:	e853 2f00 	ldrex	r2, [r3]
   11932:	1c51      	adds	r1, r2, #1
   11934:	e843 1000 	strex	r0, r1, [r3]
   11938:	2800      	cmp	r0, #0
   1193a:	d1f8      	bne.n	1192e <z_log_msg_post_finalize+0xa>
   1193c:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   11940:	4b18      	ldr	r3, [pc, #96]	; (119a4 <z_log_msg_post_finalize+0x80>)
   11942:	781b      	ldrb	r3, [r3, #0]
   11944:	b93b      	cbnz	r3, 11956 <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
   11946:	4b18      	ldr	r3, [pc, #96]	; (119a8 <z_log_msg_post_finalize+0x84>)
   11948:	681b      	ldr	r3, [r3, #0]
   1194a:	b103      	cbz	r3, 1194e <z_log_msg_post_finalize+0x2a>
   1194c:	b19a      	cbz	r2, 11976 <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1194e:	2a0a      	cmp	r2, #10
   11950:	d01c      	beq.n	1198c <z_log_msg_post_finalize+0x68>
}
   11952:	b002      	add	sp, #8
   11954:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   11956:	f04f 0340 	mov.w	r3, #64	; 0x40
   1195a:	f3ef 8411 	mrs	r4, BASEPRI
   1195e:	f383 8812 	msr	BASEPRI_MAX, r3
   11962:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   11966:	2000      	movs	r0, #0
   11968:	f7ff ffb2 	bl	118d0 <z_impl_log_process>
	__asm__ volatile(
   1196c:	f384 8811 	msr	BASEPRI, r4
   11970:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   11974:	e7ed      	b.n	11952 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
   11976:	2200      	movs	r2, #0
   11978:	2300      	movs	r3, #0
   1197a:	e9cd 2300 	strd	r2, r3, [sp]
   1197e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11982:	2300      	movs	r3, #0
   11984:	4809      	ldr	r0, [pc, #36]	; (119ac <z_log_msg_post_finalize+0x88>)
   11986:	f010 fb0b 	bl	21fa0 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
   1198a:	e7e2      	b.n	11952 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1198c:	2b00      	cmp	r3, #0
   1198e:	d0e0      	beq.n	11952 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
   11990:	4806      	ldr	r0, [pc, #24]	; (119ac <z_log_msg_post_finalize+0x88>)
   11992:	f017 fffc 	bl	2998e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   11996:	4806      	ldr	r0, [pc, #24]	; (119b0 <z_log_msg_post_finalize+0x8c>)
   11998:	f00d fc32 	bl	1f200 <z_impl_k_sem_give>
}
   1199c:	e7d9      	b.n	11952 <z_log_msg_post_finalize+0x2e>
   1199e:	bf00      	nop
   119a0:	20001f04 	.word	0x20001f04
   119a4:	20003757 	.word	0x20003757
   119a8:	20001f38 	.word	0x20001f38
   119ac:	20001558 	.word	0x20001558
   119b0:	200007ac 	.word	0x200007ac

000119b4 <log_0>:
{
   119b4:	b570      	push	{r4, r5, r6, lr}
   119b6:	4605      	mov	r5, r0
   119b8:	460e      	mov	r6, r1
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   119ba:	f000 fa3b 	bl	11e34 <log_msg_chunk_alloc>

	if (msg != NULL) {
   119be:	4604      	mov	r4, r0
   119c0:	b140      	cbz	r0, 119d4 <log_0+0x20>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   119c2:	2301      	movs	r3, #1
   119c4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   119c6:	2200      	movs	r2, #0
   119c8:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   119ca:	f04f 0300 	mov.w	r3, #0
   119ce:	f362 0300 	bfi	r3, r2, #0, #1
   119d2:	7203      	strb	r3, [r0, #8]
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   119d4:	b104      	cbz	r4, 119d8 <log_0+0x24>
		msg->str = str;
   119d6:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   119d8:	b1b4      	cbz	r4, 11a08 <log_0+0x54>
	msg->hdr.ids = src_level;
   119da:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   119dc:	4b0b      	ldr	r3, [pc, #44]	; (11a0c <log_0+0x58>)
   119de:	681b      	ldr	r3, [r3, #0]
   119e0:	4798      	blx	r3
   119e2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   119e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   119e8:	f3ef 8511 	mrs	r5, BASEPRI
   119ec:	f383 8812 	msr	BASEPRI_MAX, r3
   119f0:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   119f4:	4621      	mov	r1, r4
   119f6:	4806      	ldr	r0, [pc, #24]	; (11a10 <log_0+0x5c>)
   119f8:	f014 f9a7 	bl	25d4a <log_list_add_tail>
	__asm__ volatile(
   119fc:	f385 8811 	msr	BASEPRI, r5
   11a00:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11a04:	f7ff ff8e 	bl	11924 <z_log_msg_post_finalize>
}
   11a08:	bd70      	pop	{r4, r5, r6, pc}
   11a0a:	bf00      	nop
   11a0c:	2000044c 	.word	0x2000044c
   11a10:	20001f10 	.word	0x20001f10

00011a14 <log_1>:
{
   11a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a16:	4606      	mov	r6, r0
   11a18:	460d      	mov	r5, r1
   11a1a:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11a1c:	f000 fa0a 	bl	11e34 <log_msg_chunk_alloc>
	if (msg != NULL) {
   11a20:	4604      	mov	r4, r0
   11a22:	b140      	cbz	r0, 11a36 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
   11a24:	2301      	movs	r3, #1
   11a26:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11a28:	2100      	movs	r1, #0
   11a2a:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11a2c:	f04f 0300 	mov.w	r3, #0
   11a30:	f361 0300 	bfi	r3, r1, #0, #1
   11a34:	7203      	strb	r3, [r0, #8]
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   11a36:	b134      	cbz	r4, 11a46 <log_1+0x32>
		msg->str = str;
   11a38:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   11a3a:	7a63      	ldrb	r3, [r4, #9]
   11a3c:	2201      	movs	r2, #1
   11a3e:	f362 1307 	bfi	r3, r2, #4, #4
   11a42:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11a44:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
   11a46:	b1b4      	cbz	r4, 11a76 <log_1+0x62>
	msg->hdr.ids = src_level;
   11a48:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11a4a:	4b0b      	ldr	r3, [pc, #44]	; (11a78 <log_1+0x64>)
   11a4c:	681b      	ldr	r3, [r3, #0]
   11a4e:	4798      	blx	r3
   11a50:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11a52:	f04f 0340 	mov.w	r3, #64	; 0x40
   11a56:	f3ef 8511 	mrs	r5, BASEPRI
   11a5a:	f383 8812 	msr	BASEPRI_MAX, r3
   11a5e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11a62:	4621      	mov	r1, r4
   11a64:	4805      	ldr	r0, [pc, #20]	; (11a7c <log_1+0x68>)
   11a66:	f014 f970 	bl	25d4a <log_list_add_tail>
	__asm__ volatile(
   11a6a:	f385 8811 	msr	BASEPRI, r5
   11a6e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11a72:	f7ff ff57 	bl	11924 <z_log_msg_post_finalize>
}
   11a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a78:	2000044c 	.word	0x2000044c
   11a7c:	20001f10 	.word	0x20001f10

00011a80 <log_2>:
{
   11a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a84:	4607      	mov	r7, r0
   11a86:	460e      	mov	r6, r1
   11a88:	4615      	mov	r5, r2
   11a8a:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11a8c:	f000 f9d2 	bl	11e34 <log_msg_chunk_alloc>
	if (msg != NULL) {
   11a90:	4604      	mov	r4, r0
   11a92:	b140      	cbz	r0, 11aa6 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
   11a94:	2301      	movs	r3, #1
   11a96:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11a98:	2200      	movs	r2, #0
   11a9a:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11a9c:	f04f 0300 	mov.w	r3, #0
   11aa0:	f362 0300 	bfi	r3, r2, #0, #1
   11aa4:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   11aa6:	b13c      	cbz	r4, 11ab8 <log_2+0x38>
		msg->str = str;
   11aa8:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   11aaa:	7a63      	ldrb	r3, [r4, #9]
   11aac:	2202      	movs	r2, #2
   11aae:	f362 1307 	bfi	r3, r2, #4, #4
   11ab2:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11ab4:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
   11ab6:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
   11ab8:	b1bc      	cbz	r4, 11aea <log_2+0x6a>
	msg->hdr.ids = src_level;
   11aba:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11abe:	4b0c      	ldr	r3, [pc, #48]	; (11af0 <log_2+0x70>)
   11ac0:	681b      	ldr	r3, [r3, #0]
   11ac2:	4798      	blx	r3
   11ac4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11ac6:	f04f 0340 	mov.w	r3, #64	; 0x40
   11aca:	f3ef 8511 	mrs	r5, BASEPRI
   11ace:	f383 8812 	msr	BASEPRI_MAX, r3
   11ad2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11ad6:	4621      	mov	r1, r4
   11ad8:	4806      	ldr	r0, [pc, #24]	; (11af4 <log_2+0x74>)
   11ada:	f014 f936 	bl	25d4a <log_list_add_tail>
	__asm__ volatile(
   11ade:	f385 8811 	msr	BASEPRI, r5
   11ae2:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11ae6:	f7ff ff1d 	bl	11924 <z_log_msg_post_finalize>
}
   11aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11aee:	bf00      	nop
   11af0:	2000044c 	.word	0x2000044c
   11af4:	20001f10 	.word	0x20001f10

00011af8 <log_hexdump>:
{
   11af8:	b538      	push	{r3, r4, r5, lr}
   11afa:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   11afc:	f014 fa43 	bl	25f86 <log_msg_hexdump_create>
		if (msg == NULL) {
   11b00:	b1b8      	cbz	r0, 11b32 <log_hexdump+0x3a>
   11b02:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   11b04:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   11b06:	4b0b      	ldr	r3, [pc, #44]	; (11b34 <log_hexdump+0x3c>)
   11b08:	681b      	ldr	r3, [r3, #0]
   11b0a:	4798      	blx	r3
   11b0c:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   11b0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11b12:	f3ef 8411 	mrs	r4, BASEPRI
   11b16:	f383 8812 	msr	BASEPRI_MAX, r3
   11b1a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11b1e:	4629      	mov	r1, r5
   11b20:	4805      	ldr	r0, [pc, #20]	; (11b38 <log_hexdump+0x40>)
   11b22:	f014 f912 	bl	25d4a <log_list_add_tail>
	__asm__ volatile(
   11b26:	f384 8811 	msr	BASEPRI, r4
   11b2a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11b2e:	f7ff fef9 	bl	11924 <z_log_msg_post_finalize>
}
   11b32:	bd38      	pop	{r3, r4, r5, pc}
   11b34:	2000044c 	.word	0x2000044c
   11b38:	20001f10 	.word	0x20001f10

00011b3c <log_n>:
{
   11b3c:	b538      	push	{r3, r4, r5, lr}
   11b3e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   11b40:	f000 f9d4 	bl	11eec <log_msg_create_n>
		if (msg == NULL) {
   11b44:	b1b8      	cbz	r0, 11b76 <log_n+0x3a>
   11b46:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   11b48:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   11b4a:	4b0b      	ldr	r3, [pc, #44]	; (11b78 <log_n+0x3c>)
   11b4c:	681b      	ldr	r3, [r3, #0]
   11b4e:	4798      	blx	r3
   11b50:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   11b52:	f04f 0340 	mov.w	r3, #64	; 0x40
   11b56:	f3ef 8411 	mrs	r4, BASEPRI
   11b5a:	f383 8812 	msr	BASEPRI_MAX, r3
   11b5e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11b62:	4629      	mov	r1, r5
   11b64:	4805      	ldr	r0, [pc, #20]	; (11b7c <log_n+0x40>)
   11b66:	f014 f8f0 	bl	25d4a <log_list_add_tail>
	__asm__ volatile(
   11b6a:	f384 8811 	msr	BASEPRI, r4
   11b6e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11b72:	f7ff fed7 	bl	11924 <z_log_msg_post_finalize>
}
   11b76:	bd38      	pop	{r3, r4, r5, pc}
   11b78:	2000044c 	.word	0x2000044c
   11b7c:	20001f10 	.word	0x20001f10

00011b80 <log_3>:
{
   11b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b84:	4680      	mov	r8, r0
   11b86:	460f      	mov	r7, r1
   11b88:	4616      	mov	r6, r2
   11b8a:	461d      	mov	r5, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11b8c:	f000 f952 	bl	11e34 <log_msg_chunk_alloc>
	if (msg != NULL) {
   11b90:	4604      	mov	r4, r0
   11b92:	b140      	cbz	r0, 11ba6 <log_3+0x26>
		msg->hdr.ref_cnt = 1;
   11b94:	2301      	movs	r3, #1
   11b96:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11b98:	2200      	movs	r2, #0
   11b9a:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11b9c:	f04f 0300 	mov.w	r3, #0
   11ba0:	f362 0300 	bfi	r3, r2, #0, #1
   11ba4:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   11ba6:	b14c      	cbz	r4, 11bbc <log_3+0x3c>
		msg->str = str;
   11ba8:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   11bac:	7a63      	ldrb	r3, [r4, #9]
   11bae:	2203      	movs	r2, #3
   11bb0:	f362 1307 	bfi	r3, r2, #4, #4
   11bb4:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11bb6:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   11bb8:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   11bba:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   11bbc:	b1c4      	cbz	r4, 11bf0 <log_3+0x70>
	msg->hdr.ids = src_level;
   11bbe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11bc2:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11bc4:	4b0b      	ldr	r3, [pc, #44]	; (11bf4 <log_3+0x74>)
   11bc6:	681b      	ldr	r3, [r3, #0]
   11bc8:	4798      	blx	r3
   11bca:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11bcc:	f04f 0340 	mov.w	r3, #64	; 0x40
   11bd0:	f3ef 8511 	mrs	r5, BASEPRI
   11bd4:	f383 8812 	msr	BASEPRI_MAX, r3
   11bd8:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11bdc:	4621      	mov	r1, r4
   11bde:	4806      	ldr	r0, [pc, #24]	; (11bf8 <log_3+0x78>)
   11be0:	f014 f8b3 	bl	25d4a <log_list_add_tail>
	__asm__ volatile(
   11be4:	f385 8811 	msr	BASEPRI, r5
   11be8:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11bec:	f7ff fe9a 	bl	11924 <z_log_msg_post_finalize>
}
   11bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11bf4:	2000044c 	.word	0x2000044c
   11bf8:	20001f10 	.word	0x20001f10

00011bfc <z_impl_log_panic>:
	if (panic_mode) {
   11bfc:	4b22      	ldr	r3, [pc, #136]	; (11c88 <z_impl_log_panic+0x8c>)
   11bfe:	781b      	ldrb	r3, [r3, #0]
   11c00:	b103      	cbz	r3, 11c04 <z_impl_log_panic+0x8>
   11c02:	4770      	bx	lr
{
   11c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
   11c08:	f7ff fc3a 	bl	11480 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   11c0c:	2400      	movs	r4, #0
   11c0e:	e013      	b.n	11c38 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
   11c10:	f8df 8088 	ldr.w	r8, [pc, #136]	; 11c9c <z_impl_log_panic+0xa0>
   11c14:	f240 131d 	movw	r3, #285	; 0x11d
   11c18:	4642      	mov	r2, r8
   11c1a:	491c      	ldr	r1, [pc, #112]	; (11c8c <z_impl_log_panic+0x90>)
   11c1c:	481c      	ldr	r0, [pc, #112]	; (11c90 <z_impl_log_panic+0x94>)
   11c1e:	f013 fe06 	bl	2582e <printk>
   11c22:	f240 111d 	movw	r1, #285	; 0x11d
   11c26:	4640      	mov	r0, r8
   11c28:	f014 f883 	bl	25d32 <assert_post_action>
   11c2c:	e00f      	b.n	11c4e <z_impl_log_panic+0x52>
	backend->api->panic(backend);
   11c2e:	597b      	ldr	r3, [r7, r5]
   11c30:	695b      	ldr	r3, [r3, #20]
   11c32:	4630      	mov	r0, r6
   11c34:	4798      	blx	r3
   11c36:	3401      	adds	r4, #1
   11c38:	4b16      	ldr	r3, [pc, #88]	; (11c94 <z_impl_log_panic+0x98>)
   11c3a:	4a17      	ldr	r2, [pc, #92]	; (11c98 <z_impl_log_panic+0x9c>)
   11c3c:	1a9b      	subs	r3, r3, r2
   11c3e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   11c42:	da17      	bge.n	11c74 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
   11c44:	0127      	lsls	r7, r4, #4
   11c46:	4d14      	ldr	r5, [pc, #80]	; (11c98 <z_impl_log_panic+0x9c>)
	__ASSERT_NO_MSG(backend != NULL);
   11c48:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
   11c4c:	d0e0      	beq.n	11c10 <z_impl_log_panic+0x14>
	return backend->cb->active;
   11c4e:	6873      	ldr	r3, [r6, #4]
   11c50:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   11c52:	2b00      	cmp	r3, #0
   11c54:	d0ef      	beq.n	11c36 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
   11c56:	2e00      	cmp	r6, #0
   11c58:	d1e9      	bne.n	11c2e <z_impl_log_panic+0x32>
   11c5a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 11c9c <z_impl_log_panic+0xa0>
   11c5e:	23c2      	movs	r3, #194	; 0xc2
   11c60:	4642      	mov	r2, r8
   11c62:	490a      	ldr	r1, [pc, #40]	; (11c8c <z_impl_log_panic+0x90>)
   11c64:	480a      	ldr	r0, [pc, #40]	; (11c90 <z_impl_log_panic+0x94>)
   11c66:	f013 fde2 	bl	2582e <printk>
   11c6a:	21c2      	movs	r1, #194	; 0xc2
   11c6c:	4640      	mov	r0, r8
   11c6e:	f014 f860 	bl	25d32 <assert_post_action>
   11c72:	e7dc      	b.n	11c2e <z_impl_log_panic+0x32>
   11c74:	2000      	movs	r0, #0
   11c76:	f7ff fe2b 	bl	118d0 <z_impl_log_process>
		while (log_process(false) == true) {
   11c7a:	2800      	cmp	r0, #0
   11c7c:	d1fa      	bne.n	11c74 <z_impl_log_panic+0x78>
	panic_mode = true;
   11c7e:	4b02      	ldr	r3, [pc, #8]	; (11c88 <z_impl_log_panic+0x8c>)
   11c80:	2201      	movs	r2, #1
   11c82:	701a      	strb	r2, [r3, #0]
}
   11c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11c88:	20003757 	.word	0x20003757
   11c8c:	0002a62c 	.word	0x0002a62c
   11c90:	00029ff8 	.word	0x00029ff8
   11c94:	00029e58 	.word	0x00029e58
   11c98:	00029e48 	.word	0x00029e48
   11c9c:	0002a5f8 	.word	0x0002a5f8

00011ca0 <log_process_thread_func>:
{
   11ca0:	b510      	push	{r4, lr}
	return __log_backends_end - __log_backends_start;
   11ca2:	4b13      	ldr	r3, [pc, #76]	; (11cf0 <log_process_thread_func+0x50>)
   11ca4:	4a13      	ldr	r2, [pc, #76]	; (11cf4 <log_process_thread_func+0x54>)
   11ca6:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   11ca8:	2b00      	cmp	r3, #0
   11caa:	dd06      	ble.n	11cba <log_process_thread_func+0x1a>
	log_init();
   11cac:	f7ff fbe8 	bl	11480 <log_init>
	return z_impl_z_current_get();
   11cb0:	f00f fbde 	bl	21470 <z_impl_z_current_get>
	thread_set(k_current_get());
   11cb4:	f7ff fb58 	bl	11368 <thread_set>
   11cb8:	e014      	b.n	11ce4 <log_process_thread_func+0x44>
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   11cba:	4c0f      	ldr	r4, [pc, #60]	; (11cf8 <log_process_thread_func+0x58>)
   11cbc:	f240 43f1 	movw	r3, #1265	; 0x4f1
   11cc0:	4622      	mov	r2, r4
   11cc2:	490e      	ldr	r1, [pc, #56]	; (11cfc <log_process_thread_func+0x5c>)
   11cc4:	480e      	ldr	r0, [pc, #56]	; (11d00 <log_process_thread_func+0x60>)
   11cc6:	f013 fdb2 	bl	2582e <printk>
   11cca:	f240 41f1 	movw	r1, #1265	; 0x4f1
   11cce:	4620      	mov	r0, r4
   11cd0:	f014 f82f 	bl	25d32 <assert_post_action>
   11cd4:	e7ea      	b.n	11cac <log_process_thread_func+0xc>
	return z_impl_k_sem_take(sem, timeout);
   11cd6:	f04f 32ff 	mov.w	r2, #4294967295
   11cda:	f04f 33ff 	mov.w	r3, #4294967295
   11cde:	4809      	ldr	r0, [pc, #36]	; (11d04 <log_process_thread_func+0x64>)
   11ce0:	f00d fad6 	bl	1f290 <z_impl_k_sem_take>
   11ce4:	2000      	movs	r0, #0
   11ce6:	f7ff fdf3 	bl	118d0 <z_impl_log_process>
		if (log_process(false) == false) {
   11cea:	2800      	cmp	r0, #0
   11cec:	d1fa      	bne.n	11ce4 <log_process_thread_func+0x44>
   11cee:	e7f2      	b.n	11cd6 <log_process_thread_func+0x36>
   11cf0:	00029e58 	.word	0x00029e58
   11cf4:	00029e48 	.word	0x00029e48
   11cf8:	0002a5b0 	.word	0x0002a5b0
   11cfc:	0002a6dc 	.word	0x0002a6dc
   11d00:	00029ff8 	.word	0x00029ff8
   11d04:	200007ac 	.word	0x200007ac

00011d08 <z_log_free>:
{
   11d08:	b500      	push	{lr}
   11d0a:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   11d0c:	3804      	subs	r0, #4
   11d0e:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11d10:	f3bf 8f5b 	dmb	ish
   11d14:	e850 3f00 	ldrex	r3, [r0]
   11d18:	1e5a      	subs	r2, r3, #1
   11d1a:	e840 2100 	strex	r1, r2, [r0]
   11d1e:	2900      	cmp	r1, #0
   11d20:	d1f8      	bne.n	11d14 <z_log_free+0xc>
   11d22:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   11d26:	2b01      	cmp	r3, #1
   11d28:	d002      	beq.n	11d30 <z_log_free+0x28>
}
   11d2a:	b003      	add	sp, #12
   11d2c:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   11d30:	a901      	add	r1, sp, #4
   11d32:	4802      	ldr	r0, [pc, #8]	; (11d3c <z_log_free+0x34>)
   11d34:	f00c fc12 	bl	1e55c <k_mem_slab_free>
}
   11d38:	e7f7      	b.n	11d2a <z_log_free+0x22>
   11d3a:	bf00      	nop
   11d3c:	20001f18 	.word	0x20001f18

00011d40 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   11d40:	4b05      	ldr	r3, [pc, #20]	; (11d58 <log_source_name_get+0x18>)
   11d42:	4a06      	ldr	r2, [pc, #24]	; (11d5c <log_source_name_get+0x1c>)
   11d44:	1a9b      	subs	r3, r3, r2
   11d46:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   11d4a:	d202      	bcs.n	11d52 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   11d4c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   11d50:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   11d52:	2000      	movs	r0, #0
}
   11d54:	4770      	bx	lr
   11d56:	bf00      	nop
   11d58:	00029e48 	.word	0x00029e48
   11d5c:	00029d70 	.word	0x00029d70

00011d60 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   11d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d62:	4605      	mov	r5, r0
   11d64:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   11d66:	4c15      	ldr	r4, [pc, #84]	; (11dbc <log_backend_enable+0x5c>)
   11d68:	1b04      	subs	r4, r0, r4
   11d6a:	1124      	asrs	r4, r4, #4
   11d6c:	3401      	adds	r4, #1

	log_backend_id_set(backend, id);
   11d6e:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   11d70:	b150      	cbz	r0, 11d88 <log_backend_enable+0x28>
	backend->cb->id = id;
   11d72:	686b      	ldr	r3, [r5, #4]
   11d74:	711c      	strb	r4, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
   11d76:	b19d      	cbz	r5, 11da0 <log_backend_enable+0x40>
	backend->cb->ctx = ctx;
   11d78:	686b      	ldr	r3, [r5, #4]
   11d7a:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   11d7c:	686b      	ldr	r3, [r5, #4]
   11d7e:	2201      	movs	r2, #1
   11d80:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   11d82:	f7ff fc11 	bl	115a8 <z_log_notify_backend_enabled>
}
   11d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(backend != NULL);
   11d88:	4f0d      	ldr	r7, [pc, #52]	; (11dc0 <log_backend_enable+0x60>)
   11d8a:	23d1      	movs	r3, #209	; 0xd1
   11d8c:	463a      	mov	r2, r7
   11d8e:	490d      	ldr	r1, [pc, #52]	; (11dc4 <log_backend_enable+0x64>)
   11d90:	480d      	ldr	r0, [pc, #52]	; (11dc8 <log_backend_enable+0x68>)
   11d92:	f013 fd4c 	bl	2582e <printk>
   11d96:	21d1      	movs	r1, #209	; 0xd1
   11d98:	4638      	mov	r0, r7
   11d9a:	f013 ffca 	bl	25d32 <assert_post_action>
   11d9e:	e7e8      	b.n	11d72 <log_backend_enable+0x12>
	__ASSERT_NO_MSG(backend != NULL);
   11da0:	4c07      	ldr	r4, [pc, #28]	; (11dc0 <log_backend_enable+0x60>)
   11da2:	f44f 7381 	mov.w	r3, #258	; 0x102
   11da6:	4622      	mov	r2, r4
   11da8:	4906      	ldr	r1, [pc, #24]	; (11dc4 <log_backend_enable+0x64>)
   11daa:	4807      	ldr	r0, [pc, #28]	; (11dc8 <log_backend_enable+0x68>)
   11dac:	f013 fd3f 	bl	2582e <printk>
   11db0:	f44f 7181 	mov.w	r1, #258	; 0x102
   11db4:	4620      	mov	r0, r4
   11db6:	f013 ffbc 	bl	25d32 <assert_post_action>
   11dba:	e7dd      	b.n	11d78 <log_backend_enable+0x18>
   11dbc:	00029e48 	.word	0x00029e48
   11dc0:	0002a5f8 	.word	0x0002a5f8
   11dc4:	0002a62c 	.word	0x0002a62c
   11dc8:	00029ff8 	.word	0x00029ff8

00011dcc <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   11dcc:	b510      	push	{r4, lr}
   11dce:	b082      	sub	sp, #8
   11dd0:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   11dd2:	9b01      	ldr	r3, [sp, #4]
   11dd4:	b133      	cbz	r3, 11de4 <cont_free+0x18>
		next = cont->next;
   11dd6:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   11dd8:	a901      	add	r1, sp, #4
   11dda:	4803      	ldr	r0, [pc, #12]	; (11de8 <cont_free+0x1c>)
   11ddc:	f00c fbbe 	bl	1e55c <k_mem_slab_free>
		cont = next;
   11de0:	9401      	str	r4, [sp, #4]
   11de2:	e7f6      	b.n	11dd2 <cont_free+0x6>
	}
}
   11de4:	b002      	add	sp, #8
   11de6:	bd10      	pop	{r4, pc}
   11de8:	20001f3c 	.word	0x20001f3c

00011dec <log_msg_pool_init>:
{
   11dec:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   11dee:	2320      	movs	r3, #32
   11df0:	461a      	mov	r2, r3
   11df2:	4902      	ldr	r1, [pc, #8]	; (11dfc <log_msg_pool_init+0x10>)
   11df4:	4802      	ldr	r0, [pc, #8]	; (11e00 <log_msg_pool_init+0x14>)
   11df6:	f017 fc34 	bl	29662 <k_mem_slab_init>
}
   11dfa:	bd08      	pop	{r3, pc}
   11dfc:	20006c18 	.word	0x20006c18
   11e00:	20001f3c 	.word	0x20001f3c

00011e04 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   11e04:	b510      	push	{r4, lr}
   11e06:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   11e08:	2300      	movs	r3, #0
   11e0a:	9301      	str	r3, [sp, #4]
   11e0c:	2001      	movs	r0, #1
   11e0e:	f7ff fd5f 	bl	118d0 <z_impl_log_process>
   11e12:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   11e14:	f7ff fbd8 	bl	115c8 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   11e18:	2200      	movs	r2, #0
   11e1a:	2300      	movs	r3, #0
   11e1c:	a901      	add	r1, sp, #4
   11e1e:	4804      	ldr	r0, [pc, #16]	; (11e30 <log_msg_no_space_handle+0x2c>)
   11e20:	f00c fb28 	bl	1e474 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   11e24:	b108      	cbz	r0, 11e2a <log_msg_no_space_handle+0x26>
   11e26:	2c00      	cmp	r4, #0
   11e28:	d1f0      	bne.n	11e0c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   11e2a:	9801      	ldr	r0, [sp, #4]
   11e2c:	b002      	add	sp, #8
   11e2e:	bd10      	pop	{r4, pc}
   11e30:	20001f3c 	.word	0x20001f3c

00011e34 <log_msg_chunk_alloc>:
{
   11e34:	b500      	push	{lr}
   11e36:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   11e38:	2300      	movs	r3, #0
   11e3a:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   11e3c:	f013 ffa1 	bl	25d82 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11e40:	b150      	cbz	r0, 11e58 <log_msg_chunk_alloc+0x24>
   11e42:	2200      	movs	r2, #0
   11e44:	2300      	movs	r3, #0
   11e46:	a901      	add	r1, sp, #4
   11e48:	4807      	ldr	r0, [pc, #28]	; (11e68 <log_msg_chunk_alloc+0x34>)
   11e4a:	f00c fb13 	bl	1e474 <k_mem_slab_alloc>
	if (err != 0) {
   11e4e:	b930      	cbnz	r0, 11e5e <log_msg_chunk_alloc+0x2a>
}
   11e50:	9801      	ldr	r0, [sp, #4]
   11e52:	b003      	add	sp, #12
   11e54:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11e58:	2200      	movs	r2, #0
   11e5a:	2300      	movs	r3, #0
   11e5c:	e7f3      	b.n	11e46 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   11e5e:	f7ff ffd1 	bl	11e04 <log_msg_no_space_handle>
   11e62:	9001      	str	r0, [sp, #4]
   11e64:	e7f4      	b.n	11e50 <log_msg_chunk_alloc+0x1c>
   11e66:	bf00      	nop
   11e68:	20001f3c 	.word	0x20001f3c

00011e6c <msg_free>:
{
   11e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e6e:	b083      	sub	sp, #12
   11e70:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   11e72:	4604      	mov	r4, r0
   11e74:	f014 f82c 	bl	25ed0 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11e78:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   11e7a:	f013 0f01 	tst.w	r3, #1
   11e7e:	d101      	bne.n	11e84 <msg_free+0x18>
   11e80:	4606      	mov	r6, r0
   11e82:	bb50      	cbnz	r0, 11eda <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   11e84:	9b01      	ldr	r3, [sp, #4]
   11e86:	7a1a      	ldrb	r2, [r3, #8]
   11e88:	f012 0f02 	tst.w	r2, #2
   11e8c:	d128      	bne.n	11ee0 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   11e8e:	a901      	add	r1, sp, #4
   11e90:	4815      	ldr	r0, [pc, #84]	; (11ee8 <msg_free+0x7c>)
   11e92:	f00c fb63 	bl	1e55c <k_mem_slab_free>
}
   11e96:	b003      	add	sp, #12
   11e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   11e9a:	9801      	ldr	r0, [sp, #4]
   11e9c:	f014 f82d 	bl	25efa <log_msg_str_get>
   11ea0:	4631      	mov	r1, r6
   11ea2:	f7ff fab5 	bl	11410 <z_log_get_s_mask>
					if (smask == 0U) {
   11ea6:	4607      	mov	r7, r0
   11ea8:	b988      	cbnz	r0, 11ece <msg_free+0x62>
   11eaa:	e7eb      	b.n	11e84 <msg_free+0x18>
					z_log_free(buf);
   11eac:	4628      	mov	r0, r5
   11eae:	f7ff ff2b 	bl	11d08 <z_log_free>
		for (i = 0U; i < nargs; i++) {
   11eb2:	3401      	adds	r4, #1
   11eb4:	42b4      	cmp	r4, r6
   11eb6:	d2e5      	bcs.n	11e84 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   11eb8:	4621      	mov	r1, r4
   11eba:	9801      	ldr	r0, [sp, #4]
   11ebc:	f014 f80b 	bl	25ed6 <log_msg_arg_get>
   11ec0:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   11ec2:	f7ff fc35 	bl	11730 <log_is_strdup>
   11ec6:	2800      	cmp	r0, #0
   11ec8:	d0f3      	beq.n	11eb2 <msg_free+0x46>
				if (smask == 0U) {
   11eca:	2f00      	cmp	r7, #0
   11ecc:	d0e5      	beq.n	11e9a <msg_free+0x2e>
				if (smask & BIT(i)) {
   11ece:	fa27 f304 	lsr.w	r3, r7, r4
   11ed2:	f013 0f01 	tst.w	r3, #1
   11ed6:	d0ec      	beq.n	11eb2 <msg_free+0x46>
   11ed8:	e7e8      	b.n	11eac <msg_free+0x40>
		uint32_t smask = 0U;
   11eda:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   11edc:	463c      	mov	r4, r7
   11ede:	e7e9      	b.n	11eb4 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
   11ee0:	6958      	ldr	r0, [r3, #20]
   11ee2:	f7ff ff73 	bl	11dcc <cont_free>
   11ee6:	e7d2      	b.n	11e8e <msg_free+0x22>
   11ee8:	20001f3c 	.word	0x20001f3c

00011eec <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
   11eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11eee:	4607      	mov	r7, r0
   11ef0:	460e      	mov	r6, r1
   11ef2:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   11ef4:	2a0e      	cmp	r2, #14
   11ef6:	d80f      	bhi.n	11f18 <log_msg_create_n+0x2c>

	struct  log_msg *msg = NULL;

	msg = msg_alloc(nargs);
   11ef8:	4620      	mov	r0, r4
   11efa:	f014 f813 	bl	25f24 <msg_alloc>

	if (msg != NULL) {
   11efe:	4605      	mov	r5, r0
   11f00:	b140      	cbz	r0, 11f14 <log_msg_create_n+0x28>
		msg->str = str;
   11f02:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   11f04:	7a43      	ldrb	r3, [r0, #9]
   11f06:	f364 1307 	bfi	r3, r4, #4, #4
   11f0a:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   11f0c:	4622      	mov	r2, r4
   11f0e:	4631      	mov	r1, r6
   11f10:	f013 ff4b 	bl	25daa <copy_args_to_msg>
	}

	return msg;
}
   11f14:	4628      	mov	r0, r5
   11f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   11f18:	4d06      	ldr	r5, [pc, #24]	; (11f34 <log_msg_create_n+0x48>)
   11f1a:	f240 133b 	movw	r3, #315	; 0x13b
   11f1e:	462a      	mov	r2, r5
   11f20:	4905      	ldr	r1, [pc, #20]	; (11f38 <log_msg_create_n+0x4c>)
   11f22:	4806      	ldr	r0, [pc, #24]	; (11f3c <log_msg_create_n+0x50>)
   11f24:	f013 fc83 	bl	2582e <printk>
   11f28:	f240 113b 	movw	r1, #315	; 0x13b
   11f2c:	4628      	mov	r0, r5
   11f2e:	f013 ff00 	bl	25d32 <assert_post_action>
   11f32:	e7e1      	b.n	11ef8 <log_msg_create_n+0xc>
   11f34:	0002a758 	.word	0x0002a758
   11f38:	0002a784 	.word	0x0002a784
   11f3c:	00029ff8 	.word	0x00029ff8

00011f40 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   11f40:	b40e      	push	{r1, r2, r3}
   11f42:	b500      	push	{lr}
   11f44:	b082      	sub	sp, #8
   11f46:	4601      	mov	r1, r0
   11f48:	ab03      	add	r3, sp, #12
   11f4a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   11f4e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   11f50:	4803      	ldr	r0, [pc, #12]	; (11f60 <print_formatted+0x20>)
   11f52:	f7fe fcfb 	bl	1094c <cbvprintf>
	va_end(args);

	return length;
}
   11f56:	b002      	add	sp, #8
   11f58:	f85d eb04 	ldr.w	lr, [sp], #4
   11f5c:	b003      	add	sp, #12
   11f5e:	4770      	bx	lr
   11f60:	00012239 	.word	0x00012239

00011f64 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   11f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f66:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   11f68:	f011 0f44 	tst.w	r1, #68	; 0x44
   11f6c:	d005      	beq.n	11f7a <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   11f6e:	4b1a      	ldr	r3, [pc, #104]	; (11fd8 <timestamp_print+0x74>)
   11f70:	681c      	ldr	r4, [r3, #0]
   11f72:	b934      	cbnz	r4, 11f82 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   11f74:	2000      	movs	r0, #0
	}

	return length;
}
   11f76:	b005      	add	sp, #20
   11f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   11f7a:	4918      	ldr	r1, [pc, #96]	; (11fdc <timestamp_print+0x78>)
   11f7c:	f7ff ffe0 	bl	11f40 <print_formatted>
   11f80:	e7f9      	b.n	11f76 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   11f82:	4b17      	ldr	r3, [pc, #92]	; (11fe0 <timestamp_print+0x7c>)
   11f84:	6819      	ldr	r1, [r3, #0]
   11f86:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   11f8a:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   11f8e:	4a15      	ldr	r2, [pc, #84]	; (11fe4 <timestamp_print+0x80>)
   11f90:	fba2 3205 	umull	r3, r2, r2, r5
   11f94:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   11f96:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   11f9a:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   11f9e:	4b12      	ldr	r3, [pc, #72]	; (11fe8 <timestamp_print+0x84>)
   11fa0:	fba3 7306 	umull	r7, r3, r3, r6
   11fa4:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   11fa6:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   11faa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   11fae:	fb05 f101 	mul.w	r1, r5, r1
   11fb2:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11fb6:	fb07 1114 	mls	r1, r7, r4, r1
   11fba:	fb05 f101 	mul.w	r1, r5, r1
   11fbe:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   11fc2:	9402      	str	r4, [sp, #8]
   11fc4:	9701      	str	r7, [sp, #4]
   11fc6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   11fca:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   11fce:	9100      	str	r1, [sp, #0]
   11fd0:	4906      	ldr	r1, [pc, #24]	; (11fec <timestamp_print+0x88>)
   11fd2:	f7ff ffb5 	bl	11f40 <print_formatted>
   11fd6:	e7ce      	b.n	11f76 <timestamp_print+0x12>
   11fd8:	20001f5c 	.word	0x20001f5c
   11fdc:	0002a790 	.word	0x0002a790
   11fe0:	20001f60 	.word	0x20001f60
   11fe4:	91a2b3c5 	.word	0x91a2b3c5
   11fe8:	88888889 	.word	0x88888889
   11fec:	0002a79c 	.word	0x0002a79c

00011ff0 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   11ff0:	b161      	cbz	r1, 1200c <color_print+0x1c>
{
   11ff2:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   11ff4:	b12a      	cbz	r2, 12002 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   11ff6:	4a06      	ldr	r2, [pc, #24]	; (12010 <color_print+0x20>)
   11ff8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11ffc:	b912      	cbnz	r2, 12004 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   11ffe:	4a05      	ldr	r2, [pc, #20]	; (12014 <color_print+0x24>)
   12000:	e000      	b.n	12004 <color_print+0x14>
   12002:	4a04      	ldr	r2, [pc, #16]	; (12014 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   12004:	4904      	ldr	r1, [pc, #16]	; (12018 <color_print+0x28>)
   12006:	f7ff ff9b 	bl	11f40 <print_formatted>
	}
}
   1200a:	bd08      	pop	{r3, pc}
   1200c:	4770      	bx	lr
   1200e:	bf00      	nop
   12010:	0002a884 	.word	0x0002a884
   12014:	0002a7b8 	.word	0x0002a7b8
   12018:	0002a7c0 	.word	0x0002a7c0

0001201c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1201c:	f011 0f10 	tst.w	r1, #16
   12020:	d10b      	bne.n	1203a <newline_print+0x1e>
{
   12022:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12024:	f011 0f20 	tst.w	r1, #32
   12028:	d003      	beq.n	12032 <newline_print+0x16>
		print_formatted(ctx, "\n");
   1202a:	4904      	ldr	r1, [pc, #16]	; (1203c <newline_print+0x20>)
   1202c:	f7ff ff88 	bl	11f40 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   12030:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   12032:	4903      	ldr	r1, [pc, #12]	; (12040 <newline_print+0x24>)
   12034:	f7ff ff84 	bl	11f40 <print_formatted>
   12038:	e7fa      	b.n	12030 <newline_print+0x14>
   1203a:	4770      	bx	lr
   1203c:	0002daf4 	.word	0x0002daf4
   12040:	0002dce0 	.word	0x0002dce0

00012044 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   12044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12048:	4605      	mov	r5, r0
   1204a:	460f      	mov	r7, r1
   1204c:	4616      	mov	r6, r2
   1204e:	4698      	mov	r8, r3
	newline_print(output, flags);
   12050:	9906      	ldr	r1, [sp, #24]
   12052:	f7ff ffe3 	bl	1201c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   12056:	2400      	movs	r4, #0
   12058:	4544      	cmp	r4, r8
   1205a:	da05      	bge.n	12068 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   1205c:	4923      	ldr	r1, [pc, #140]	; (120ec <hexdump_line_print+0xa8>)
   1205e:	4628      	mov	r0, r5
   12060:	f7ff ff6e 	bl	11f40 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   12064:	3401      	adds	r4, #1
   12066:	e7f7      	b.n	12058 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12068:	2400      	movs	r4, #0
   1206a:	e009      	b.n	12080 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   1206c:	491f      	ldr	r1, [pc, #124]	; (120ec <hexdump_line_print+0xa8>)
   1206e:	4628      	mov	r0, r5
   12070:	f7ff ff66 	bl	11f40 <print_formatted>
   12074:	e00b      	b.n	1208e <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   12076:	491e      	ldr	r1, [pc, #120]	; (120f0 <hexdump_line_print+0xac>)
   12078:	4628      	mov	r0, r5
   1207a:	f7ff ff61 	bl	11f40 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1207e:	3401      	adds	r4, #1
   12080:	2c0f      	cmp	r4, #15
   12082:	dc0c      	bgt.n	1209e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   12084:	2c00      	cmp	r4, #0
   12086:	dd02      	ble.n	1208e <hexdump_line_print+0x4a>
   12088:	f014 0f07 	tst.w	r4, #7
   1208c:	d0ee      	beq.n	1206c <hexdump_line_print+0x28>
		if (i < length) {
   1208e:	42b4      	cmp	r4, r6
   12090:	d2f1      	bcs.n	12076 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   12092:	5d3a      	ldrb	r2, [r7, r4]
   12094:	4917      	ldr	r1, [pc, #92]	; (120f4 <hexdump_line_print+0xb0>)
   12096:	4628      	mov	r0, r5
   12098:	f7ff ff52 	bl	11f40 <print_formatted>
   1209c:	e7ef      	b.n	1207e <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   1209e:	4916      	ldr	r1, [pc, #88]	; (120f8 <hexdump_line_print+0xb4>)
   120a0:	4628      	mov	r0, r5
   120a2:	f7ff ff4d 	bl	11f40 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   120a6:	2400      	movs	r4, #0
   120a8:	e009      	b.n	120be <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   120aa:	4910      	ldr	r1, [pc, #64]	; (120ec <hexdump_line_print+0xa8>)
   120ac:	4628      	mov	r0, r5
   120ae:	f7ff ff47 	bl	11f40 <print_formatted>
   120b2:	e00b      	b.n	120cc <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   120b4:	4911      	ldr	r1, [pc, #68]	; (120fc <hexdump_line_print+0xb8>)
   120b6:	4628      	mov	r0, r5
   120b8:	f7ff ff42 	bl	11f40 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   120bc:	3401      	adds	r4, #1
   120be:	2c0f      	cmp	r4, #15
   120c0:	dc12      	bgt.n	120e8 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   120c2:	2c00      	cmp	r4, #0
   120c4:	dd02      	ble.n	120cc <hexdump_line_print+0x88>
   120c6:	f014 0f07 	tst.w	r4, #7
   120ca:	d0ee      	beq.n	120aa <hexdump_line_print+0x66>
		if (i < length) {
   120cc:	42b4      	cmp	r4, r6
   120ce:	d206      	bcs.n	120de <hexdump_line_print+0x9a>
			char c = (char)data[i];
   120d0:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   120d2:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   120d6:	2b5e      	cmp	r3, #94	; 0x5e
   120d8:	d9ec      	bls.n	120b4 <hexdump_line_print+0x70>
   120da:	222e      	movs	r2, #46	; 0x2e
   120dc:	e7ea      	b.n	120b4 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
   120de:	4903      	ldr	r1, [pc, #12]	; (120ec <hexdump_line_print+0xa8>)
   120e0:	4628      	mov	r0, r5
   120e2:	f7ff ff2d 	bl	11f40 <print_formatted>
   120e6:	e7e9      	b.n	120bc <hexdump_line_print+0x78>
		}
	}
}
   120e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   120ec:	0002a7e8 	.word	0x0002a7e8
   120f0:	0002a7cc 	.word	0x0002a7cc
   120f4:	0002a7c4 	.word	0x0002a7c4
   120f8:	0002a7d0 	.word	0x0002a7d0
   120fc:	0002a7d4 	.word	0x0002a7d4

00012100 <ids_print>:
{
   12100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12104:	4680      	mov	r8, r0
   12106:	4616      	mov	r6, r2
   12108:	461d      	mov	r5, r3
   1210a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   1210e:	b959      	cbnz	r1, 12128 <ids_print+0x28>
	int total = 0;
   12110:	2400      	movs	r4, #0
	if (source_id >= 0) {
   12112:	2f00      	cmp	r7, #0
   12114:	db1c      	blt.n	12150 <ids_print+0x50>
		total += print_formatted(output,
   12116:	b186      	cbz	r6, 1213a <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   12118:	2301      	movs	r3, #1
   1211a:	9a07      	ldr	r2, [sp, #28]
   1211c:	4093      	lsls	r3, r2
				(func_on &&
   1211e:	f013 0f10 	tst.w	r3, #16
   12122:	d118      	bne.n	12156 <ids_print+0x56>
		total += print_formatted(output,
   12124:	4e0d      	ldr	r6, [pc, #52]	; (1215c <ids_print+0x5c>)
   12126:	e009      	b.n	1213c <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   12128:	4b0d      	ldr	r3, [pc, #52]	; (12160 <ids_print+0x60>)
   1212a:	9a07      	ldr	r2, [sp, #28]
   1212c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12130:	490c      	ldr	r1, [pc, #48]	; (12164 <ids_print+0x64>)
   12132:	f7ff ff05 	bl	11f40 <print_formatted>
   12136:	4604      	mov	r4, r0
   12138:	e7eb      	b.n	12112 <ids_print+0x12>
		total += print_formatted(output,
   1213a:	4e08      	ldr	r6, [pc, #32]	; (1215c <ids_print+0x5c>)
   1213c:	4639      	mov	r1, r7
   1213e:	4628      	mov	r0, r5
   12140:	f7ff fdfe 	bl	11d40 <log_source_name_get>
   12144:	4602      	mov	r2, r0
   12146:	4631      	mov	r1, r6
   12148:	4640      	mov	r0, r8
   1214a:	f7ff fef9 	bl	11f40 <print_formatted>
   1214e:	4404      	add	r4, r0
}
   12150:	4620      	mov	r0, r4
   12152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   12156:	4e04      	ldr	r6, [pc, #16]	; (12168 <ids_print+0x68>)
   12158:	e7f0      	b.n	1213c <ids_print+0x3c>
   1215a:	bf00      	nop
   1215c:	0002a7d8 	.word	0x0002a7d8
   12160:	0002a8c0 	.word	0x0002a8c0
   12164:	0002a7e4 	.word	0x0002a7e4
   12168:	0002a7e0 	.word	0x0002a7e0

0001216c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   1216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12170:	b085      	sub	sp, #20
   12172:	4605      	mov	r5, r0
   12174:	460c      	mov	r4, r1
   12176:	4616      	mov	r6, r2
   12178:	9303      	str	r3, [sp, #12]
   1217a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1217e:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   12182:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12186:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
   1218a:	f013 fdf8 	bl	25d7e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   1218e:	b1e8      	cbz	r0, 121cc <prefix_print+0x60>
   12190:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   12192:	4913      	ldr	r1, [pc, #76]	; (121e0 <prefix_print+0x74>)
   12194:	4628      	mov	r0, r5
   12196:	f7ff fed3 	bl	11f40 <print_formatted>
   1219a:	4607      	mov	r7, r0
	}

	if (stamp) {
   1219c:	f1bb 0f00 	cmp.w	fp, #0
   121a0:	d116      	bne.n	121d0 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   121a2:	4642      	mov	r2, r8
   121a4:	4651      	mov	r1, sl
   121a6:	4628      	mov	r0, r5
   121a8:	f013 ff5a 	bl	26060 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
   121ac:	f8cd 8004 	str.w	r8, [sp, #4]
   121b0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   121b4:	9300      	str	r3, [sp, #0]
   121b6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   121ba:	4632      	mov	r2, r6
   121bc:	4649      	mov	r1, r9
   121be:	4628      	mov	r0, r5
   121c0:	f7ff ff9e 	bl	12100 <ids_print>
			domain_id, source_id, level);


	return length;
}
   121c4:	4438      	add	r0, r7
   121c6:	b005      	add	sp, #20
   121c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   121cc:	2700      	movs	r7, #0
   121ce:	e7e5      	b.n	1219c <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   121d0:	9a03      	ldr	r2, [sp, #12]
   121d2:	4621      	mov	r1, r4
   121d4:	4628      	mov	r0, r5
   121d6:	f7ff fec5 	bl	11f64 <timestamp_print>
   121da:	4407      	add	r7, r0
   121dc:	e7e1      	b.n	121a2 <prefix_print+0x36>
   121de:	bf00      	nop
   121e0:	0002a7ec 	.word	0x0002a7ec

000121e4 <hexdump_print>:
{
   121e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   121e8:	b089      	sub	sp, #36	; 0x24
   121ea:	4607      	mov	r7, r0
   121ec:	460e      	mov	r6, r1
   121ee:	4691      	mov	r9, r2
   121f0:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
   121f2:	f013 fe82 	bl	25efa <log_msg_str_get>
   121f6:	4602      	mov	r2, r0
   121f8:	490e      	ldr	r1, [pc, #56]	; (12234 <hexdump_print+0x50>)
   121fa:	4630      	mov	r0, r6
   121fc:	f7ff fea0 	bl	11f40 <print_formatted>
	uint32_t offset = 0U;
   12200:	2400      	movs	r4, #0
		length = sizeof(buf);
   12202:	2510      	movs	r5, #16
   12204:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12206:	4623      	mov	r3, r4
   12208:	aa03      	add	r2, sp, #12
   1220a:	eb0d 0105 	add.w	r1, sp, r5
   1220e:	4638      	mov	r0, r7
   12210:	f013 ff11 	bl	26036 <log_msg_hexdump_data_get>
		if (length) {
   12214:	9a03      	ldr	r2, [sp, #12]
   12216:	b152      	cbz	r2, 1222e <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
   12218:	f8cd 8000 	str.w	r8, [sp]
   1221c:	464b      	mov	r3, r9
   1221e:	eb0d 0105 	add.w	r1, sp, r5
   12222:	4630      	mov	r0, r6
   12224:	f7ff ff0e 	bl	12044 <hexdump_line_print>
			offset += length;
   12228:	9d03      	ldr	r5, [sp, #12]
   1222a:	442c      	add	r4, r5
		length = sizeof(buf);
   1222c:	e7e9      	b.n	12202 <hexdump_print+0x1e>
}
   1222e:	b009      	add	sp, #36	; 0x24
   12230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12234:	0002a7c0 	.word	0x0002a7c0

00012238 <out_func>:
{
   12238:	b538      	push	{r3, r4, r5, lr}
   1223a:	4605      	mov	r5, r0
   1223c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1223e:	684b      	ldr	r3, [r1, #4]
   12240:	681a      	ldr	r2, [r3, #0]
   12242:	68cb      	ldr	r3, [r1, #12]
   12244:	429a      	cmp	r2, r3
   12246:	d014      	beq.n	12272 <out_func+0x3a>
	idx = atomic_inc(&out_ctx->control_block->offset);
   12248:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1224a:	f3bf 8f5b 	dmb	ish
   1224e:	e853 2f00 	ldrex	r2, [r3]
   12252:	1c51      	adds	r1, r2, #1
   12254:	e843 1000 	strex	r0, r1, [r3]
   12258:	2800      	cmp	r0, #0
   1225a:	d1f8      	bne.n	1224e <out_func+0x16>
   1225c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   12260:	68a3      	ldr	r3, [r4, #8]
   12262:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   12264:	6863      	ldr	r3, [r4, #4]
   12266:	681a      	ldr	r2, [r3, #0]
   12268:	68e3      	ldr	r3, [r4, #12]
   1226a:	429a      	cmp	r2, r3
   1226c:	d805      	bhi.n	1227a <out_func+0x42>
}
   1226e:	2000      	movs	r0, #0
   12270:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   12272:	4608      	mov	r0, r1
   12274:	f014 f867 	bl	26346 <log_output_flush>
   12278:	e7e6      	b.n	12248 <out_func+0x10>
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1227a:	4c06      	ldr	r4, [pc, #24]	; (12294 <out_func+0x5c>)
   1227c:	2374      	movs	r3, #116	; 0x74
   1227e:	4622      	mov	r2, r4
   12280:	4905      	ldr	r1, [pc, #20]	; (12298 <out_func+0x60>)
   12282:	4806      	ldr	r0, [pc, #24]	; (1229c <out_func+0x64>)
   12284:	f013 fad3 	bl	2582e <printk>
   12288:	2174      	movs	r1, #116	; 0x74
   1228a:	4620      	mov	r0, r4
   1228c:	f013 fd51 	bl	25d32 <assert_post_action>
   12290:	e7ed      	b.n	1226e <out_func+0x36>
   12292:	bf00      	nop
   12294:	0002a7f0 	.word	0x0002a7f0
   12298:	0002a820 	.word	0x0002a820
   1229c:	00029ff8 	.word	0x00029ff8

000122a0 <raw_string_print>:
{
   122a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   122a2:	b083      	sub	sp, #12
   122a4:	4606      	mov	r6, r0
   122a6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);
   122a8:	68cb      	ldr	r3, [r1, #12]
   122aa:	b113      	cbz	r3, 122b2 <raw_string_print+0x12>
{
   122ac:	2700      	movs	r7, #0
   122ae:	463d      	mov	r5, r7
   122b0:	e01b      	b.n	122ea <raw_string_print+0x4a>
	__ASSERT_NO_MSG(output->size);
   122b2:	4d19      	ldr	r5, [pc, #100]	; (12318 <raw_string_print+0x78>)
   122b4:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   122b8:	462a      	mov	r2, r5
   122ba:	4918      	ldr	r1, [pc, #96]	; (1231c <raw_string_print+0x7c>)
   122bc:	4818      	ldr	r0, [pc, #96]	; (12320 <raw_string_print+0x80>)
   122be:	f013 fab6 	bl	2582e <printk>
   122c2:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   122c6:	4628      	mov	r0, r5
   122c8:	f013 fd33 	bl	25d32 <assert_post_action>
   122cc:	e7ee      	b.n	122ac <raw_string_print+0xc>
			eol = (output->buf[length - 1] == '\n');
   122ce:	68a2      	ldr	r2, [r4, #8]
   122d0:	4413      	add	r3, r2
   122d2:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   122d6:	2f0a      	cmp	r7, #10
   122d8:	bf14      	ite	ne
   122da:	2700      	movne	r7, #0
   122dc:	2701      	moveq	r7, #1
		log_output_flush(output);
   122de:	4620      	mov	r0, r4
   122e0:	f014 f831 	bl	26346 <log_output_flush>
		offset += length;
   122e4:	9b01      	ldr	r3, [sp, #4]
   122e6:	441d      	add	r5, r3
	} while (length > 0);
   122e8:	b173      	cbz	r3, 12308 <raw_string_print+0x68>
		length = output->size;
   122ea:	68e3      	ldr	r3, [r4, #12]
   122ec:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   122ee:	462b      	mov	r3, r5
   122f0:	aa01      	add	r2, sp, #4
   122f2:	68a1      	ldr	r1, [r4, #8]
   122f4:	4630      	mov	r0, r6
   122f6:	f013 fe9e 	bl	26036 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   122fa:	6863      	ldr	r3, [r4, #4]
   122fc:	9a01      	ldr	r2, [sp, #4]
   122fe:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   12300:	9b01      	ldr	r3, [sp, #4]
   12302:	2b00      	cmp	r3, #0
   12304:	d0eb      	beq.n	122de <raw_string_print+0x3e>
   12306:	e7e2      	b.n	122ce <raw_string_print+0x2e>
	if (eol) {
   12308:	b90f      	cbnz	r7, 1230e <raw_string_print+0x6e>
}
   1230a:	b003      	add	sp, #12
   1230c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   1230e:	4905      	ldr	r1, [pc, #20]	; (12324 <raw_string_print+0x84>)
   12310:	4620      	mov	r0, r4
   12312:	f7ff fe15 	bl	11f40 <print_formatted>
}
   12316:	e7f8      	b.n	1230a <raw_string_print+0x6a>
   12318:	0002a7f0 	.word	0x0002a7f0
   1231c:	0002a850 	.word	0x0002a850
   12320:	00029ff8 	.word	0x00029ff8
   12324:	0002a860 	.word	0x0002a860

00012328 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   12328:	b570      	push	{r4, r5, r6, lr}
   1232a:	b082      	sub	sp, #8
   1232c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   1232e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12330:	f242 730f 	movw	r3, #9999	; 0x270f
   12334:	428b      	cmp	r3, r1
   12336:	bf28      	it	cs
   12338:	460b      	movcs	r3, r1
   1233a:	4a0e      	ldr	r2, [pc, #56]	; (12374 <log_output_dropped_process+0x4c>)
   1233c:	2105      	movs	r1, #5
   1233e:	4668      	mov	r0, sp
   12340:	f013 fa83 	bl	2584a <snprintk>
   12344:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   12346:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12348:	685b      	ldr	r3, [r3, #4]
   1234a:	220b      	movs	r2, #11
   1234c:	490a      	ldr	r1, [pc, #40]	; (12378 <log_output_dropped_process+0x50>)
   1234e:	4628      	mov	r0, r5
   12350:	f013 fe79 	bl	26046 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   12354:	6863      	ldr	r3, [r4, #4]
   12356:	685b      	ldr	r3, [r3, #4]
   12358:	4632      	mov	r2, r6
   1235a:	4669      	mov	r1, sp
   1235c:	4628      	mov	r0, r5
   1235e:	f013 fe72 	bl	26046 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   12362:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   12364:	685b      	ldr	r3, [r3, #4]
   12366:	221b      	movs	r2, #27
   12368:	4904      	ldr	r1, [pc, #16]	; (1237c <log_output_dropped_process+0x54>)
   1236a:	4628      	mov	r0, r5
   1236c:	f013 fe6b 	bl	26046 <buffer_write>
}
   12370:	b002      	add	sp, #8
   12372:	bd70      	pop	{r4, r5, r6, pc}
   12374:	0002c208 	.word	0x0002c208
   12378:	0002a8b4 	.word	0x0002a8b4
   1237c:	0002a898 	.word	0x0002a898

00012380 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   12380:	4b07      	ldr	r3, [pc, #28]	; (123a0 <log_output_timestamp_freq_set+0x20>)
   12382:	2201      	movs	r2, #1
   12384:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   12386:	4b07      	ldr	r3, [pc, #28]	; (123a4 <log_output_timestamp_freq_set+0x24>)
   12388:	4298      	cmp	r0, r3
   1238a:	d905      	bls.n	12398 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   1238c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1238e:	4a04      	ldr	r2, [pc, #16]	; (123a0 <log_output_timestamp_freq_set+0x20>)
   12390:	6813      	ldr	r3, [r2, #0]
   12392:	005b      	lsls	r3, r3, #1
   12394:	6013      	str	r3, [r2, #0]
   12396:	e7f6      	b.n	12386 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   12398:	4b03      	ldr	r3, [pc, #12]	; (123a8 <log_output_timestamp_freq_set+0x28>)
   1239a:	6018      	str	r0, [r3, #0]
}
   1239c:	4770      	bx	lr
   1239e:	bf00      	nop
   123a0:	20001f60 	.word	0x20001f60
   123a4:	000f4240 	.word	0x000f4240
   123a8:	20001f5c 	.word	0x20001f5c

000123ac <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   123ac:	b570      	push	{r4, r5, r6, lr}
   123ae:	4606      	mov	r6, r0
   123b0:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   123b2:	2400      	movs	r4, #0
   123b4:	42ac      	cmp	r4, r5
   123b6:	d207      	bcs.n	123c8 <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
   123b8:	4b04      	ldr	r3, [pc, #16]	; (123cc <char_out+0x20>)
   123ba:	6818      	ldr	r0, [r3, #0]
   123bc:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   123be:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   123c0:	685b      	ldr	r3, [r3, #4]
   123c2:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   123c4:	3401      	adds	r4, #1
   123c6:	e7f5      	b.n	123b4 <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   123c8:	4628      	mov	r0, r5
   123ca:	bd70      	pop	{r4, r5, r6, pc}
   123cc:	20001f78 	.word	0x20001f78

000123d0 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
   123d0:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   123d2:	4809      	ldr	r0, [pc, #36]	; (123f8 <log_backend_uart_init+0x28>)
   123d4:	4b09      	ldr	r3, [pc, #36]	; (123fc <log_backend_uart_init+0x2c>)
   123d6:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   123d8:	f017 f917 	bl	2960a <z_device_ready>
   123dc:	b100      	cbz	r0, 123e0 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   123de:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   123e0:	4c07      	ldr	r4, [pc, #28]	; (12400 <log_backend_uart_init+0x30>)
   123e2:	2375      	movs	r3, #117	; 0x75
   123e4:	4622      	mov	r2, r4
   123e6:	4907      	ldr	r1, [pc, #28]	; (12404 <log_backend_uart_init+0x34>)
   123e8:	4807      	ldr	r0, [pc, #28]	; (12408 <log_backend_uart_init+0x38>)
   123ea:	f013 fa20 	bl	2582e <printk>
   123ee:	2175      	movs	r1, #117	; 0x75
   123f0:	4620      	mov	r0, r4
   123f2:	f013 fc9e 	bl	25d32 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
   123f6:	e7f2      	b.n	123de <log_backend_uart_init+0xe>
   123f8:	00029ba4 	.word	0x00029ba4
   123fc:	20001f78 	.word	0x20001f78
   12400:	0002a8d4 	.word	0x0002a8d4
   12404:	0002a90c 	.word	0x0002a90c
   12408:	00029ff8 	.word	0x00029ff8

0001240c <panic>:

static void panic(struct log_backend const *const backend)
{
   1240c:	b508      	push	{r3, lr}
	in_panic = true;
   1240e:	4b03      	ldr	r3, [pc, #12]	; (1241c <panic+0x10>)
   12410:	2201      	movs	r2, #1
   12412:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   12414:	4802      	ldr	r0, [pc, #8]	; (12420 <panic+0x14>)
   12416:	f013 ff96 	bl	26346 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   1241a:	bd08      	pop	{r3, pc}
   1241c:	20003758 	.word	0x20003758
   12420:	0002a964 	.word	0x0002a964

00012424 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   12424:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   12426:	4802      	ldr	r0, [pc, #8]	; (12430 <dropped+0xc>)
   12428:	f7ff ff7e 	bl	12328 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   1242c:	bd08      	pop	{r3, pc}
   1242e:	bf00      	nop
   12430:	0002a964 	.word	0x0002a964

00012434 <put>:
{
   12434:	b510      	push	{r4, lr}
   12436:	460c      	mov	r4, r1
	log_msg_get(msg);
   12438:	4608      	mov	r0, r1
   1243a:	f013 fd3c 	bl	25eb6 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   1243e:	220f      	movs	r2, #15
   12440:	4621      	mov	r1, r4
   12442:	4803      	ldr	r0, [pc, #12]	; (12450 <put+0x1c>)
   12444:	f013 ff8c 	bl	26360 <log_output_msg_process>
	log_msg_put(msg);
   12448:	4620      	mov	r0, r4
   1244a:	f013 fd58 	bl	25efe <log_msg_put>
}
   1244e:	bd10      	pop	{r4, pc}
   12450:	0002a964 	.word	0x0002a964

00012454 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   12454:	b570      	push	{r4, r5, r6, lr}
   12456:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   12458:	4b42      	ldr	r3, [pc, #264]	; (12564 <pm_system_resume+0x110>)
   1245a:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1245c:	f004 031f 	and.w	r3, r4, #31
   12460:	2201      	movs	r2, #1
   12462:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12464:	0961      	lsrs	r1, r4, #5
   12466:	4b40      	ldr	r3, [pc, #256]	; (12568 <pm_system_resume+0x114>)
   12468:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1246c:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1246e:	f3bf 8f5b 	dmb	ish
   12472:	e853 1f00 	ldrex	r1, [r3]
   12476:	ea01 0500 	and.w	r5, r1, r0
   1247a:	e843 5600 	strex	r6, r5, [r3]
   1247e:	2e00      	cmp	r6, #0
   12480:	d1f7      	bne.n	12472 <pm_system_resume+0x1e>
   12482:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12486:	420a      	tst	r2, r1
   12488:	d05a      	beq.n	12540 <pm_system_resume+0xec>
		exit_pos_ops(z_power_states[id]);
   1248a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1248e:	4a37      	ldr	r2, [pc, #220]	; (1256c <pm_system_resume+0x118>)
   12490:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12494:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12498:	ab04      	add	r3, sp, #16
   1249a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1249e:	4b34      	ldr	r3, [pc, #208]	; (12570 <pm_system_resume+0x11c>)
   124a0:	b19b      	cbz	r3, 124ca <pm_system_resume+0x76>
		pm_power_state_exit_post_ops(info);
   124a2:	f014 fa00 	bl	268a6 <pm_power_state_exit_post_ops>
	__asm__ volatile(
   124a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   124aa:	f3ef 8611 	mrs	r6, BASEPRI
   124ae:	f383 8812 	msr	BASEPRI_MAX, r3
   124b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   124b6:	482f      	ldr	r0, [pc, #188]	; (12574 <pm_system_resume+0x120>)
   124b8:	f00c f8dc 	bl	1e674 <z_spin_lock_valid>
   124bc:	b158      	cbz	r0, 124d6 <pm_system_resume+0x82>
	z_spin_lock_set_owner(l);
   124be:	482d      	ldr	r0, [pc, #180]	; (12574 <pm_system_resume+0x120>)
   124c0:	f00c f8f8 	bl	1e6b4 <z_spin_lock_set_owner>
	return list->head;
   124c4:	4b2c      	ldr	r3, [pc, #176]	; (12578 <pm_system_resume+0x124>)
   124c6:	681d      	ldr	r5, [r3, #0]
   124c8:	e01a      	b.n	12500 <pm_system_resume+0xac>
	__asm__ volatile(
   124ca:	2300      	movs	r3, #0
   124cc:	f383 8811 	msr	BASEPRI, r3
   124d0:	f3bf 8f6f 	isb	sy
}
   124d4:	e7e7      	b.n	124a6 <pm_system_resume+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   124d6:	4d29      	ldr	r5, [pc, #164]	; (1257c <pm_system_resume+0x128>)
   124d8:	2381      	movs	r3, #129	; 0x81
   124da:	462a      	mov	r2, r5
   124dc:	4928      	ldr	r1, [pc, #160]	; (12580 <pm_system_resume+0x12c>)
   124de:	4829      	ldr	r0, [pc, #164]	; (12584 <pm_system_resume+0x130>)
   124e0:	f013 f9a5 	bl	2582e <printk>
   124e4:	4923      	ldr	r1, [pc, #140]	; (12574 <pm_system_resume+0x120>)
   124e6:	4828      	ldr	r0, [pc, #160]	; (12588 <pm_system_resume+0x134>)
   124e8:	f013 f9a1 	bl	2582e <printk>
   124ec:	2181      	movs	r1, #129	; 0x81
   124ee:	4628      	mov	r0, r5
   124f0:	f013 fc1f 	bl	25d32 <assert_post_action>
   124f4:	e7e3      	b.n	124be <pm_system_resume+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   124f6:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   124f8:	b10d      	cbz	r5, 124fe <pm_system_resume+0xaa>
	return node->next;
   124fa:	682b      	ldr	r3, [r5, #0]
   124fc:	b16b      	cbz	r3, 1251a <pm_system_resume+0xc6>
{
   124fe:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12500:	b15d      	cbz	r5, 1251a <pm_system_resume+0xc6>
			callback = notifier->state_exit;
   12502:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
   12504:	2a00      	cmp	r2, #0
   12506:	d0f6      	beq.n	124f6 <pm_system_resume+0xa2>
			callback(z_power_states[_current_cpu->id].state);
   12508:	4b16      	ldr	r3, [pc, #88]	; (12564 <pm_system_resume+0x110>)
   1250a:	7d1b      	ldrb	r3, [r3, #20]
   1250c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   12510:	4916      	ldr	r1, [pc, #88]	; (1256c <pm_system_resume+0x118>)
   12512:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   12516:	4790      	blx	r2
   12518:	e7ed      	b.n	124f6 <pm_system_resume+0xa2>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
   1251a:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1251c:	4815      	ldr	r0, [pc, #84]	; (12574 <pm_system_resume+0x120>)
   1251e:	f00c f8b9 	bl	1e694 <z_spin_unlock_valid>
   12522:	b178      	cbz	r0, 12544 <pm_system_resume+0xf0>
	__asm__ volatile(
   12524:	f385 8811 	msr	BASEPRI, r5
   12528:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1252c:	4a0f      	ldr	r2, [pc, #60]	; (1256c <pm_system_resume+0x118>)
   1252e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   12532:	00a1      	lsls	r1, r4, #2
   12534:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   12538:	2300      	movs	r3, #0
   1253a:	5053      	str	r3, [r2, r1]
   1253c:	6063      	str	r3, [r4, #4]
   1253e:	60a3      	str	r3, [r4, #8]
			0, 0};
	}
}
   12540:	b004      	add	sp, #16
   12542:	bd70      	pop	{r4, r5, r6, pc}
   12544:	4e0d      	ldr	r6, [pc, #52]	; (1257c <pm_system_resume+0x128>)
   12546:	23ac      	movs	r3, #172	; 0xac
   12548:	4632      	mov	r2, r6
   1254a:	4910      	ldr	r1, [pc, #64]	; (1258c <pm_system_resume+0x138>)
   1254c:	480d      	ldr	r0, [pc, #52]	; (12584 <pm_system_resume+0x130>)
   1254e:	f013 f96e 	bl	2582e <printk>
   12552:	4908      	ldr	r1, [pc, #32]	; (12574 <pm_system_resume+0x120>)
   12554:	480e      	ldr	r0, [pc, #56]	; (12590 <pm_system_resume+0x13c>)
   12556:	f013 f96a 	bl	2582e <printk>
   1255a:	21ac      	movs	r1, #172	; 0xac
   1255c:	4630      	mov	r0, r6
   1255e:	f013 fbe8 	bl	25d32 <assert_post_action>
   12562:	e7df      	b.n	12524 <pm_system_resume+0xd0>
   12564:	20002d18 	.word	0x20002d18
   12568:	20001f8c 	.word	0x20001f8c
   1256c:	20001f90 	.word	0x20001f90
   12570:	000268a7 	.word	0x000268a7
   12574:	20001f80 	.word	0x20001f80
   12578:	20001f84 	.word	0x20001f84
   1257c:	0002a314 	.word	0x0002a314
   12580:	0002a36c 	.word	0x0002a36c
   12584:	00029ff8 	.word	0x00029ff8
   12588:	0002a384 	.word	0x0002a384
   1258c:	0002a33c 	.word	0x0002a33c
   12590:	0002a354 	.word	0x0002a354

00012594 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   12594:	b5f0      	push	{r4, r5, r6, r7, lr}
   12596:	b089      	sub	sp, #36	; 0x24
   12598:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   1259a:	4b6b      	ldr	r3, [pc, #428]	; (12748 <pm_system_suspend+0x1b4>)
   1259c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1259e:	f004 031f 	and.w	r3, r4, #31
   125a2:	2201      	movs	r2, #1
   125a4:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   125a6:	0961      	lsrs	r1, r4, #5
   125a8:	4b68      	ldr	r3, [pc, #416]	; (1274c <pm_system_suspend+0x1b8>)
   125aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   125ae:	f3bf 8f5b 	dmb	ish
   125b2:	e853 1f00 	ldrex	r1, [r3]
   125b6:	ea41 0002 	orr.w	r0, r1, r2
   125ba:	e843 0600 	strex	r6, r0, [r3]
   125be:	2e00      	cmp	r6, #0
   125c0:	d1f7      	bne.n	125b2 <pm_system_suspend+0x1e>
   125c2:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   125c6:	420a      	tst	r2, r1
   125c8:	d01e      	beq.n	12608 <pm_system_suspend+0x74>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   125ca:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   125ce:	4a60      	ldr	r2, [pc, #384]	; (12750 <pm_system_suspend+0x1bc>)
   125d0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   125d4:	2b00      	cmp	r3, #0
   125d6:	f000 80b5 	beq.w	12744 <pm_system_suspend+0x1b0>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   125da:	f1b5 3fff 	cmp.w	r5, #4294967295
   125de:	d123      	bne.n	12628 <pm_system_suspend+0x94>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   125e0:	f00d fe12 	bl	20208 <k_sched_lock>
	__asm__ volatile(
   125e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   125e8:	f3ef 8611 	mrs	r6, BASEPRI
   125ec:	f383 8812 	msr	BASEPRI_MAX, r3
   125f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   125f4:	4857      	ldr	r0, [pc, #348]	; (12754 <pm_system_suspend+0x1c0>)
   125f6:	f00c f83d 	bl	1e674 <z_spin_lock_valid>
   125fa:	b358      	cbz	r0, 12654 <pm_system_suspend+0xc0>
	z_spin_lock_set_owner(l);
   125fc:	4855      	ldr	r0, [pc, #340]	; (12754 <pm_system_suspend+0x1c0>)
   125fe:	f00c f859 	bl	1e6b4 <z_spin_lock_set_owner>
	return list->head;
   12602:	4b55      	ldr	r3, [pc, #340]	; (12758 <pm_system_suspend+0x1c4>)
   12604:	681d      	ldr	r5, [r3, #0]
   12606:	e03a      	b.n	1267e <pm_system_suspend+0xea>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   12608:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   1260c:	4b50      	ldr	r3, [pc, #320]	; (12750 <pm_system_suspend+0x1bc>)
   1260e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   12612:	466f      	mov	r7, sp
   12614:	462a      	mov	r2, r5
   12616:	4621      	mov	r1, r4
   12618:	4638      	mov	r0, r7
   1261a:	f013 fee0 	bl	263de <pm_policy_next_state>
   1261e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   12622:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   12626:	e7d0      	b.n	125ca <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
   12628:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1262c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12630:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12632:	0c59      	lsrs	r1, r3, #17
   12634:	03d8      	lsls	r0, r3, #15
   12636:	4e49      	ldr	r6, [pc, #292]	; (1275c <pm_system_suspend+0x1c8>)
   12638:	4a49      	ldr	r2, [pc, #292]	; (12760 <pm_system_suspend+0x1cc>)
   1263a:	2300      	movs	r3, #0
   1263c:	1980      	adds	r0, r0, r6
   1263e:	f04f 0600 	mov.w	r6, #0
   12642:	eb46 0101 	adc.w	r1, r6, r1
   12646:	f7ed fd5b 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   1264a:	2101      	movs	r1, #1
   1264c:	1a28      	subs	r0, r5, r0
   1264e:	f00f fa57 	bl	21b00 <z_set_timeout_expiry>
   12652:	e7c5      	b.n	125e0 <pm_system_suspend+0x4c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12654:	4d43      	ldr	r5, [pc, #268]	; (12764 <pm_system_suspend+0x1d0>)
   12656:	2381      	movs	r3, #129	; 0x81
   12658:	462a      	mov	r2, r5
   1265a:	4943      	ldr	r1, [pc, #268]	; (12768 <pm_system_suspend+0x1d4>)
   1265c:	4843      	ldr	r0, [pc, #268]	; (1276c <pm_system_suspend+0x1d8>)
   1265e:	f013 f8e6 	bl	2582e <printk>
   12662:	493c      	ldr	r1, [pc, #240]	; (12754 <pm_system_suspend+0x1c0>)
   12664:	4842      	ldr	r0, [pc, #264]	; (12770 <pm_system_suspend+0x1dc>)
   12666:	f013 f8e2 	bl	2582e <printk>
   1266a:	2181      	movs	r1, #129	; 0x81
   1266c:	4628      	mov	r0, r5
   1266e:	f013 fb60 	bl	25d32 <assert_post_action>
   12672:	e7c3      	b.n	125fc <pm_system_suspend+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12674:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   12676:	b10d      	cbz	r5, 1267c <pm_system_suspend+0xe8>
	return node->next;
   12678:	682b      	ldr	r3, [r5, #0]
   1267a:	b16b      	cbz	r3, 12698 <pm_system_suspend+0x104>
{
   1267c:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1267e:	b15d      	cbz	r5, 12698 <pm_system_suspend+0x104>
			callback = notifier->state_entry;
   12680:	686a      	ldr	r2, [r5, #4]
		if (callback) {
   12682:	2a00      	cmp	r2, #0
   12684:	d0f6      	beq.n	12674 <pm_system_suspend+0xe0>
			callback(z_power_states[_current_cpu->id].state);
   12686:	4b30      	ldr	r3, [pc, #192]	; (12748 <pm_system_suspend+0x1b4>)
   12688:	7d1b      	ldrb	r3, [r3, #20]
   1268a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1268e:	4930      	ldr	r1, [pc, #192]	; (12750 <pm_system_suspend+0x1bc>)
   12690:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   12694:	4790      	blx	r2
   12696:	e7ed      	b.n	12674 <pm_system_suspend+0xe0>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
   12698:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1269a:	482e      	ldr	r0, [pc, #184]	; (12754 <pm_system_suspend+0x1c0>)
   1269c:	f00b fffa 	bl	1e694 <z_spin_unlock_valid>
   126a0:	2800      	cmp	r0, #0
   126a2:	d03f      	beq.n	12724 <pm_system_suspend+0x190>
	__asm__ volatile(
   126a4:	f385 8811 	msr	BASEPRI, r5
   126a8:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   126ac:	f004 031f 	and.w	r3, r4, #31
   126b0:	2101      	movs	r1, #1
   126b2:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   126b4:	0963      	lsrs	r3, r4, #5
   126b6:	4a2f      	ldr	r2, [pc, #188]	; (12774 <pm_system_suspend+0x1e0>)
   126b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   126bc:	f3bf 8f5b 	dmb	ish
   126c0:	e853 2f00 	ldrex	r2, [r3]
   126c4:	430a      	orrs	r2, r1
   126c6:	e843 2000 	strex	r0, r2, [r3]
   126ca:	2800      	cmp	r0, #0
   126cc:	d1f8      	bne.n	126c0 <pm_system_suspend+0x12c>
   126ce:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   126d2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   126d6:	4a1e      	ldr	r2, [pc, #120]	; (12750 <pm_system_suspend+0x1bc>)
   126d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   126dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   126e0:	ab08      	add	r3, sp, #32
   126e2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   126e6:	4b24      	ldr	r3, [pc, #144]	; (12778 <pm_system_suspend+0x1e4>)
   126e8:	b10b      	cbz	r3, 126ee <pm_system_suspend+0x15a>
		pm_power_state_set(info);
   126ea:	f014 f8c9 	bl	26880 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   126ee:	f7ff feb1 	bl	12454 <pm_system_resume>
	k_sched_unlock();
   126f2:	f00e fb4f 	bl	20d94 <k_sched_unlock>
	bool ret = true;
   126f6:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   126f8:	f004 021f 	and.w	r2, r4, #31
   126fc:	2301      	movs	r3, #1
   126fe:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12700:	0964      	lsrs	r4, r4, #5
   12702:	4a12      	ldr	r2, [pc, #72]	; (1274c <pm_system_suspend+0x1b8>)
   12704:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   12708:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1270a:	f3bf 8f5b 	dmb	ish
   1270e:	e854 2f00 	ldrex	r2, [r4]
   12712:	401a      	ands	r2, r3
   12714:	e844 2100 	strex	r1, r2, [r4]
   12718:	2900      	cmp	r1, #0
   1271a:	d1f8      	bne.n	1270e <pm_system_suspend+0x17a>
   1271c:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   12720:	b009      	add	sp, #36	; 0x24
   12722:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12724:	4e0f      	ldr	r6, [pc, #60]	; (12764 <pm_system_suspend+0x1d0>)
   12726:	23ac      	movs	r3, #172	; 0xac
   12728:	4632      	mov	r2, r6
   1272a:	4914      	ldr	r1, [pc, #80]	; (1277c <pm_system_suspend+0x1e8>)
   1272c:	480f      	ldr	r0, [pc, #60]	; (1276c <pm_system_suspend+0x1d8>)
   1272e:	f013 f87e 	bl	2582e <printk>
   12732:	4908      	ldr	r1, [pc, #32]	; (12754 <pm_system_suspend+0x1c0>)
   12734:	4812      	ldr	r0, [pc, #72]	; (12780 <pm_system_suspend+0x1ec>)
   12736:	f013 f87a 	bl	2582e <printk>
   1273a:	21ac      	movs	r1, #172	; 0xac
   1273c:	4630      	mov	r0, r6
   1273e:	f013 faf8 	bl	25d32 <assert_post_action>
   12742:	e7af      	b.n	126a4 <pm_system_suspend+0x110>
		ret = false;
   12744:	2000      	movs	r0, #0
   12746:	e7d7      	b.n	126f8 <pm_system_suspend+0x164>
   12748:	20002d18 	.word	0x20002d18
   1274c:	20001f9c 	.word	0x20001f9c
   12750:	20001f90 	.word	0x20001f90
   12754:	20001f80 	.word	0x20001f80
   12758:	20001f84 	.word	0x20001f84
   1275c:	000f423f 	.word	0x000f423f
   12760:	000f4240 	.word	0x000f4240
   12764:	0002a314 	.word	0x0002a314
   12768:	0002a36c 	.word	0x0002a36c
   1276c:	00029ff8 	.word	0x00029ff8
   12770:	0002a384 	.word	0x0002a384
   12774:	20001f8c 	.word	0x20001f8c
   12778:	00026881 	.word	0x00026881
   1277c:	0002a33c 	.word	0x0002a33c
   12780:	0002a354 	.word	0x0002a354

00012784 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   12784:	b4f0      	push	{r4, r5, r6, r7}
   12786:	b08c      	sub	sp, #48	; 0x30
   12788:	4607      	mov	r7, r0
   1278a:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   1278c:	ac01      	add	r4, sp, #4
   1278e:	4d2a      	ldr	r5, [pc, #168]	; (12838 <tc_aes128_set_encrypt_key+0xb4>)
   12790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12798:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1279c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   127a0:	2f00      	cmp	r7, #0
   127a2:	d045      	beq.n	12830 <tc_aes128_set_encrypt_key+0xac>
   127a4:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   127a6:	2e00      	cmp	r6, #0
   127a8:	d044      	beq.n	12834 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   127aa:	2300      	movs	r3, #0
   127ac:	e00f      	b.n	127ce <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   127ae:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   127b2:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   127b6:	784a      	ldrb	r2, [r1, #1]
   127b8:	0412      	lsls	r2, r2, #16
   127ba:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   127be:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   127c0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   127c4:	78c9      	ldrb	r1, [r1, #3]
   127c6:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   127c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   127cc:	3301      	adds	r3, #1
   127ce:	2b03      	cmp	r3, #3
   127d0:	d9ed      	bls.n	127ae <tc_aes128_set_encrypt_key+0x2a>
   127d2:	e006      	b.n	127e2 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   127d4:	1f19      	subs	r1, r3, #4
   127d6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   127da:	404a      	eors	r2, r1
   127dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   127e0:	3301      	adds	r3, #1
   127e2:	2b2b      	cmp	r3, #43	; 0x2b
   127e4:	d820      	bhi.n	12828 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   127e6:	1e5a      	subs	r2, r3, #1
   127e8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   127ec:	f013 0f03 	tst.w	r3, #3
   127f0:	d1f0      	bne.n	127d4 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   127f2:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   127f6:	0e11      	lsrs	r1, r2, #24
   127f8:	4c10      	ldr	r4, [pc, #64]	; (1283c <tc_aes128_set_encrypt_key+0xb8>)
   127fa:	5c65      	ldrb	r5, [r4, r1]
   127fc:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12800:	5c61      	ldrb	r1, [r4, r1]
   12802:	0409      	lsls	r1, r1, #16
   12804:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   12808:	f3c2 2507 	ubfx	r5, r2, #8, #8
   1280c:	5d65      	ldrb	r5, [r4, r5]
   1280e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   12812:	b2d2      	uxtb	r2, r2
   12814:	5ca2      	ldrb	r2, [r4, r2]
   12816:	4311      	orrs	r1, r2
   12818:	f023 0203 	bic.w	r2, r3, #3
   1281c:	ac0c      	add	r4, sp, #48	; 0x30
   1281e:	4422      	add	r2, r4
   12820:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   12824:	404a      	eors	r2, r1
   12826:	e7d5      	b.n	127d4 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   12828:	2001      	movs	r0, #1
}
   1282a:	b00c      	add	sp, #48	; 0x30
   1282c:	bcf0      	pop	{r4, r5, r6, r7}
   1282e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   12830:	2000      	movs	r0, #0
   12832:	e7fa      	b.n	1282a <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   12834:	2000      	movs	r0, #0
   12836:	e7f8      	b.n	1282a <tc_aes128_set_encrypt_key+0xa6>
   12838:	00029ed4 	.word	0x00029ed4
   1283c:	0002a978 	.word	0x0002a978

00012840 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   12840:	2800      	cmp	r0, #0
   12842:	f000 839a 	beq.w	12f7a <tc_aes_encrypt+0x73a>
{
   12846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1284a:	b088      	sub	sp, #32
   1284c:	4616      	mov	r6, r2
   1284e:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   12850:	2900      	cmp	r1, #0
   12852:	f000 8394 	beq.w	12f7e <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   12856:	2a00      	cmp	r2, #0
   12858:	f000 8393 	beq.w	12f82 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1285c:	2310      	movs	r3, #16
   1285e:	460a      	mov	r2, r1
   12860:	4619      	mov	r1, r3
   12862:	eb0d 0003 	add.w	r0, sp, r3
   12866:	f013 fdbf 	bl	263e8 <_copy>
	add_round_key(state, s->words);
   1286a:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1286c:	6833      	ldr	r3, [r6, #0]
   1286e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   12872:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12876:	f88d 2010 	strb.w	r2, [sp, #16]
   1287a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1287e:	f89d 1011 	ldrb.w	r1, [sp, #17]
   12882:	404a      	eors	r2, r1
   12884:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12888:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1288c:	f89d 1012 	ldrb.w	r1, [sp, #18]
   12890:	404a      	eors	r2, r1
   12892:	f88d 2012 	strb.w	r2, [sp, #18]
   12896:	b2db      	uxtb	r3, r3
   12898:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1289c:	4053      	eors	r3, r2
   1289e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   128a2:	6873      	ldr	r3, [r6, #4]
   128a4:	f89d 2014 	ldrb.w	r2, [sp, #20]
   128a8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   128ac:	f88d 2014 	strb.w	r2, [sp, #20]
   128b0:	f3c3 4207 	ubfx	r2, r3, #16, #8
   128b4:	f89d 1015 	ldrb.w	r1, [sp, #21]
   128b8:	404a      	eors	r2, r1
   128ba:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   128be:	f3c3 2207 	ubfx	r2, r3, #8, #8
   128c2:	f89d 1016 	ldrb.w	r1, [sp, #22]
   128c6:	404a      	eors	r2, r1
   128c8:	f88d 2016 	strb.w	r2, [sp, #22]
   128cc:	b2db      	uxtb	r3, r3
   128ce:	f89d 2017 	ldrb.w	r2, [sp, #23]
   128d2:	4053      	eors	r3, r2
   128d4:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   128d8:	68b3      	ldr	r3, [r6, #8]
   128da:	f89d 2018 	ldrb.w	r2, [sp, #24]
   128de:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   128e2:	f88d 2018 	strb.w	r2, [sp, #24]
   128e6:	f3c3 4207 	ubfx	r2, r3, #16, #8
   128ea:	f89d 1019 	ldrb.w	r1, [sp, #25]
   128ee:	404a      	eors	r2, r1
   128f0:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   128f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
   128f8:	f89d 101a 	ldrb.w	r1, [sp, #26]
   128fc:	404a      	eors	r2, r1
   128fe:	f88d 201a 	strb.w	r2, [sp, #26]
   12902:	b2db      	uxtb	r3, r3
   12904:	f89d 201b 	ldrb.w	r2, [sp, #27]
   12908:	4053      	eors	r3, r2
   1290a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1290e:	68f3      	ldr	r3, [r6, #12]
   12910:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12914:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12918:	f88d 201c 	strb.w	r2, [sp, #28]
   1291c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12920:	f89d 101d 	ldrb.w	r1, [sp, #29]
   12924:	404a      	eors	r2, r1
   12926:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1292a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1292e:	f89d 101e 	ldrb.w	r1, [sp, #30]
   12932:	404a      	eors	r2, r1
   12934:	f88d 201e 	strb.w	r2, [sp, #30]
   12938:	b2db      	uxtb	r3, r3
   1293a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1293e:	4053      	eors	r3, r2
   12940:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   12944:	2400      	movs	r4, #0
}
   12946:	e239      	b.n	12dbc <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   12948:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1294c:	f88d 3000 	strb.w	r3, [sp]
   12950:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12954:	f88d 3001 	strb.w	r3, [sp, #1]
   12958:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1295c:	f88d 3002 	strb.w	r3, [sp, #2]
   12960:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12964:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   12968:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1296c:	f88d 3004 	strb.w	r3, [sp, #4]
   12970:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12974:	f88d 3005 	strb.w	r3, [sp, #5]
   12978:	f89d 301e 	ldrb.w	r3, [sp, #30]
   1297c:	f88d 3006 	strb.w	r3, [sp, #6]
   12980:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12984:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   12988:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1298c:	f88d 3008 	strb.w	r3, [sp, #8]
   12990:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12994:	f88d 3009 	strb.w	r3, [sp, #9]
   12998:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1299c:	f88d 300a 	strb.w	r3, [sp, #10]
   129a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   129a4:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   129a8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   129ac:	f88d 300c 	strb.w	r3, [sp, #12]
   129b0:	f89d 3011 	ldrb.w	r3, [sp, #17]
   129b4:	f88d 300d 	strb.w	r3, [sp, #13]
   129b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   129bc:	f88d 300e 	strb.w	r3, [sp, #14]
   129c0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   129c4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   129c8:	2310      	movs	r3, #16
   129ca:	466a      	mov	r2, sp
   129cc:	4619      	mov	r1, r3
   129ce:	eb0d 0003 	add.w	r0, sp, r3
   129d2:	f013 fd09 	bl	263e8 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   129d6:	f89d 0010 	ldrb.w	r0, [sp, #16]
   129da:	f013 fd16 	bl	2640a <_double_byte>
   129de:	4680      	mov	r8, r0
   129e0:	f89d 0011 	ldrb.w	r0, [sp, #17]
   129e4:	f013 fd11 	bl	2640a <_double_byte>
   129e8:	4601      	mov	r1, r0
   129ea:	f89d 0011 	ldrb.w	r0, [sp, #17]
   129ee:	f89d 2012 	ldrb.w	r2, [sp, #18]
   129f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   129f6:	4041      	eors	r1, r0
   129f8:	ea88 0801 	eor.w	r8, r8, r1
   129fc:	ea82 0208 	eor.w	r2, r2, r8
   12a00:	4053      	eors	r3, r2
   12a02:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12a06:	f89d 8010 	ldrb.w	r8, [sp, #16]
   12a0a:	f013 fcfe 	bl	2640a <_double_byte>
   12a0e:	ea88 0800 	eor.w	r8, r8, r0
   12a12:	fa5f f888 	uxtb.w	r8, r8
   12a16:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12a1a:	f013 fcf6 	bl	2640a <_double_byte>
   12a1e:	4602      	mov	r2, r0
   12a20:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12a24:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12a28:	4042      	eors	r2, r0
   12a2a:	ea88 0802 	eor.w	r8, r8, r2
   12a2e:	ea83 0308 	eor.w	r3, r3, r8
   12a32:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12a36:	f89d 8010 	ldrb.w	r8, [sp, #16]
   12a3a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12a3e:	ea88 0803 	eor.w	r8, r8, r3
   12a42:	f013 fce2 	bl	2640a <_double_byte>
   12a46:	ea88 0800 	eor.w	r8, r8, r0
   12a4a:	fa5f f888 	uxtb.w	r8, r8
   12a4e:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12a52:	f013 fcda 	bl	2640a <_double_byte>
   12a56:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12a5a:	4058      	eors	r0, r3
   12a5c:	ea88 0800 	eor.w	r8, r8, r0
   12a60:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12a64:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12a68:	f013 fccf 	bl	2640a <_double_byte>
   12a6c:	f89d 2010 	ldrb.w	r2, [sp, #16]
   12a70:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12a74:	f89d 8012 	ldrb.w	r8, [sp, #18]
   12a78:	4050      	eors	r0, r2
   12a7a:	4043      	eors	r3, r0
   12a7c:	ea88 0803 	eor.w	r8, r8, r3
   12a80:	fa5f f888 	uxtb.w	r8, r8
   12a84:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12a88:	f013 fcbf 	bl	2640a <_double_byte>
   12a8c:	ea88 0800 	eor.w	r8, r8, r0
   12a90:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12a94:	f89d 0014 	ldrb.w	r0, [sp, #20]
   12a98:	f013 fcb7 	bl	2640a <_double_byte>
   12a9c:	4680      	mov	r8, r0
   12a9e:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12aa2:	f013 fcb2 	bl	2640a <_double_byte>
   12aa6:	4601      	mov	r1, r0
   12aa8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12aac:	f89d 2016 	ldrb.w	r2, [sp, #22]
   12ab0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12ab4:	4041      	eors	r1, r0
   12ab6:	ea88 0801 	eor.w	r8, r8, r1
   12aba:	ea82 0208 	eor.w	r2, r2, r8
   12abe:	4053      	eors	r3, r2
   12ac0:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12ac4:	f89d 8014 	ldrb.w	r8, [sp, #20]
   12ac8:	f013 fc9f 	bl	2640a <_double_byte>
   12acc:	ea88 0800 	eor.w	r8, r8, r0
   12ad0:	fa5f f888 	uxtb.w	r8, r8
   12ad4:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12ad8:	f013 fc97 	bl	2640a <_double_byte>
   12adc:	4602      	mov	r2, r0
   12ade:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12ae2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12ae6:	4042      	eors	r2, r0
   12ae8:	ea88 0802 	eor.w	r8, r8, r2
   12aec:	ea83 0308 	eor.w	r3, r3, r8
   12af0:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12af4:	f89d 8014 	ldrb.w	r8, [sp, #20]
   12af8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12afc:	ea88 0803 	eor.w	r8, r8, r3
   12b00:	f013 fc83 	bl	2640a <_double_byte>
   12b04:	ea88 0800 	eor.w	r8, r8, r0
   12b08:	fa5f f888 	uxtb.w	r8, r8
   12b0c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12b10:	f013 fc7b 	bl	2640a <_double_byte>
   12b14:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12b18:	4058      	eors	r0, r3
   12b1a:	ea88 0800 	eor.w	r8, r8, r0
   12b1e:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12b22:	f89d 0014 	ldrb.w	r0, [sp, #20]
   12b26:	f013 fc70 	bl	2640a <_double_byte>
   12b2a:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12b2e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12b32:	f89d 8016 	ldrb.w	r8, [sp, #22]
   12b36:	4050      	eors	r0, r2
   12b38:	4043      	eors	r3, r0
   12b3a:	ea88 0803 	eor.w	r8, r8, r3
   12b3e:	fa5f f888 	uxtb.w	r8, r8
   12b42:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12b46:	f013 fc60 	bl	2640a <_double_byte>
   12b4a:	ea88 0800 	eor.w	r8, r8, r0
   12b4e:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12b52:	f89d 0018 	ldrb.w	r0, [sp, #24]
   12b56:	f013 fc58 	bl	2640a <_double_byte>
   12b5a:	4680      	mov	r8, r0
   12b5c:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12b60:	f013 fc53 	bl	2640a <_double_byte>
   12b64:	4601      	mov	r1, r0
   12b66:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12b6a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   12b6e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12b72:	4041      	eors	r1, r0
   12b74:	ea88 0801 	eor.w	r8, r8, r1
   12b78:	ea82 0208 	eor.w	r2, r2, r8
   12b7c:	4053      	eors	r3, r2
   12b7e:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12b82:	f89d 8018 	ldrb.w	r8, [sp, #24]
   12b86:	f013 fc40 	bl	2640a <_double_byte>
   12b8a:	ea88 0800 	eor.w	r8, r8, r0
   12b8e:	fa5f f888 	uxtb.w	r8, r8
   12b92:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12b96:	f013 fc38 	bl	2640a <_double_byte>
   12b9a:	4602      	mov	r2, r0
   12b9c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12ba0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12ba4:	4042      	eors	r2, r0
   12ba6:	ea88 0802 	eor.w	r8, r8, r2
   12baa:	ea83 0308 	eor.w	r3, r3, r8
   12bae:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12bb2:	f89d 8018 	ldrb.w	r8, [sp, #24]
   12bb6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12bba:	ea88 0803 	eor.w	r8, r8, r3
   12bbe:	f013 fc24 	bl	2640a <_double_byte>
   12bc2:	ea88 0800 	eor.w	r8, r8, r0
   12bc6:	fa5f f888 	uxtb.w	r8, r8
   12bca:	f89d 001b 	ldrb.w	r0, [sp, #27]
   12bce:	f013 fc1c 	bl	2640a <_double_byte>
   12bd2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12bd6:	4058      	eors	r0, r3
   12bd8:	ea88 0800 	eor.w	r8, r8, r0
   12bdc:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12be0:	f89d 0018 	ldrb.w	r0, [sp, #24]
   12be4:	f013 fc11 	bl	2640a <_double_byte>
   12be8:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12bec:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12bf0:	f89d 801a 	ldrb.w	r8, [sp, #26]
   12bf4:	4050      	eors	r0, r2
   12bf6:	4043      	eors	r3, r0
   12bf8:	ea88 0803 	eor.w	r8, r8, r3
   12bfc:	fa5f f888 	uxtb.w	r8, r8
   12c00:	f89d 001b 	ldrb.w	r0, [sp, #27]
   12c04:	f013 fc01 	bl	2640a <_double_byte>
   12c08:	ea88 0800 	eor.w	r8, r8, r0
   12c0c:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12c10:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12c14:	f013 fbf9 	bl	2640a <_double_byte>
   12c18:	4680      	mov	r8, r0
   12c1a:	f89d 001d 	ldrb.w	r0, [sp, #29]
   12c1e:	f013 fbf4 	bl	2640a <_double_byte>
   12c22:	4601      	mov	r1, r0
   12c24:	f89d 001d 	ldrb.w	r0, [sp, #29]
   12c28:	f89d 201e 	ldrb.w	r2, [sp, #30]
   12c2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12c30:	4041      	eors	r1, r0
   12c32:	ea88 0801 	eor.w	r8, r8, r1
   12c36:	ea82 0208 	eor.w	r2, r2, r8
   12c3a:	4053      	eors	r3, r2
   12c3c:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12c40:	f89d 801c 	ldrb.w	r8, [sp, #28]
   12c44:	f013 fbe1 	bl	2640a <_double_byte>
   12c48:	ea88 0800 	eor.w	r8, r8, r0
   12c4c:	fa5f f888 	uxtb.w	r8, r8
   12c50:	f89d 001e 	ldrb.w	r0, [sp, #30]
   12c54:	f013 fbd9 	bl	2640a <_double_byte>
   12c58:	4602      	mov	r2, r0
   12c5a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   12c5e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12c62:	4042      	eors	r2, r0
   12c64:	ea88 0802 	eor.w	r8, r8, r2
   12c68:	ea83 0308 	eor.w	r3, r3, r8
   12c6c:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12c70:	f89d 801c 	ldrb.w	r8, [sp, #28]
   12c74:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12c78:	ea88 0803 	eor.w	r8, r8, r3
   12c7c:	f013 fbc5 	bl	2640a <_double_byte>
   12c80:	ea88 0800 	eor.w	r8, r8, r0
   12c84:	fa5f f888 	uxtb.w	r8, r8
   12c88:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12c8c:	f013 fbbd 	bl	2640a <_double_byte>
   12c90:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12c94:	4058      	eors	r0, r3
   12c96:	ea88 0800 	eor.w	r8, r8, r0
   12c9a:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12c9e:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12ca2:	f013 fbb2 	bl	2640a <_double_byte>
   12ca6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12caa:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12cae:	f89d 801e 	ldrb.w	r8, [sp, #30]
   12cb2:	4050      	eors	r0, r2
   12cb4:	4043      	eors	r3, r0
   12cb6:	ea88 0803 	eor.w	r8, r8, r3
   12cba:	fa5f f888 	uxtb.w	r8, r8
   12cbe:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12cc2:	f013 fba2 	bl	2640a <_double_byte>
   12cc6:	ea88 0800 	eor.w	r8, r8, r0
   12cca:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12cce:	2310      	movs	r3, #16
   12cd0:	466a      	mov	r2, sp
   12cd2:	4619      	mov	r1, r3
   12cd4:	eb0d 0003 	add.w	r0, sp, r3
   12cd8:	f013 fb86 	bl	263e8 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   12cdc:	3401      	adds	r4, #1
   12cde:	0123      	lsls	r3, r4, #4
   12ce0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12ce4:	58eb      	ldr	r3, [r5, r3]
   12ce6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   12cea:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   12cee:	f88d 1010 	strb.w	r1, [sp, #16]
   12cf2:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12cf6:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12cfa:	4041      	eors	r1, r0
   12cfc:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12d00:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12d04:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12d08:	4041      	eors	r1, r0
   12d0a:	f88d 1012 	strb.w	r1, [sp, #18]
   12d0e:	b2db      	uxtb	r3, r3
   12d10:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12d14:	404b      	eors	r3, r1
   12d16:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12d1a:	6853      	ldr	r3, [r2, #4]
   12d1c:	f89d 1014 	ldrb.w	r1, [sp, #20]
   12d20:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   12d24:	f88d 1014 	strb.w	r1, [sp, #20]
   12d28:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12d2c:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12d30:	4041      	eors	r1, r0
   12d32:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12d36:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12d3a:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12d3e:	4041      	eors	r1, r0
   12d40:	f88d 1016 	strb.w	r1, [sp, #22]
   12d44:	b2db      	uxtb	r3, r3
   12d46:	f89d 1017 	ldrb.w	r1, [sp, #23]
   12d4a:	404b      	eors	r3, r1
   12d4c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12d50:	6893      	ldr	r3, [r2, #8]
   12d52:	f89d 1018 	ldrb.w	r1, [sp, #24]
   12d56:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   12d5a:	f88d 1018 	strb.w	r1, [sp, #24]
   12d5e:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12d62:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12d66:	4041      	eors	r1, r0
   12d68:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12d6c:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12d70:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12d74:	4041      	eors	r1, r0
   12d76:	f88d 101a 	strb.w	r1, [sp, #26]
   12d7a:	b2db      	uxtb	r3, r3
   12d7c:	f89d 101b 	ldrb.w	r1, [sp, #27]
   12d80:	404b      	eors	r3, r1
   12d82:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12d86:	68d3      	ldr	r3, [r2, #12]
   12d88:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12d8c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12d90:	f88d 201c 	strb.w	r2, [sp, #28]
   12d94:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12d98:	f89d 101d 	ldrb.w	r1, [sp, #29]
   12d9c:	404a      	eors	r2, r1
   12d9e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12da2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12da6:	f89d 101e 	ldrb.w	r1, [sp, #30]
   12daa:	404a      	eors	r2, r1
   12dac:	f88d 201e 	strb.w	r2, [sp, #30]
   12db0:	b2db      	uxtb	r3, r3
   12db2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12db6:	4053      	eors	r3, r2
   12db8:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   12dbc:	2c08      	cmp	r4, #8
   12dbe:	d80a      	bhi.n	12dd6 <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   12dc0:	2300      	movs	r3, #0
   12dc2:	2b0f      	cmp	r3, #15
   12dc4:	f63f adc0 	bhi.w	12948 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   12dc8:	a904      	add	r1, sp, #16
   12dca:	5cc8      	ldrb	r0, [r1, r3]
   12dcc:	4a6e      	ldr	r2, [pc, #440]	; (12f88 <tc_aes_encrypt+0x748>)
   12dce:	5c10      	ldrb	r0, [r2, r0]
   12dd0:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   12dd2:	3301      	adds	r3, #1
   12dd4:	e7f5      	b.n	12dc2 <tc_aes_encrypt+0x582>
   12dd6:	2300      	movs	r3, #0
   12dd8:	e005      	b.n	12de6 <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   12dda:	aa04      	add	r2, sp, #16
   12ddc:	5cd1      	ldrb	r1, [r2, r3]
   12dde:	486a      	ldr	r0, [pc, #424]	; (12f88 <tc_aes_encrypt+0x748>)
   12de0:	5c41      	ldrb	r1, [r0, r1]
   12de2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   12de4:	3301      	adds	r3, #1
   12de6:	2b0f      	cmp	r3, #15
   12de8:	d9f7      	bls.n	12dda <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   12dea:	f89d 3010 	ldrb.w	r3, [sp, #16]
   12dee:	f88d 3000 	strb.w	r3, [sp]
   12df2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12df6:	f88d 3001 	strb.w	r3, [sp, #1]
   12dfa:	f89d 301a 	ldrb.w	r3, [sp, #26]
   12dfe:	f88d 3002 	strb.w	r3, [sp, #2]
   12e02:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12e06:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   12e0a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12e0e:	f88d 3004 	strb.w	r3, [sp, #4]
   12e12:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12e16:	f88d 3005 	strb.w	r3, [sp, #5]
   12e1a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   12e1e:	f88d 3006 	strb.w	r3, [sp, #6]
   12e22:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12e26:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   12e2a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12e2e:	f88d 3008 	strb.w	r3, [sp, #8]
   12e32:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12e36:	f88d 3009 	strb.w	r3, [sp, #9]
   12e3a:	f89d 3012 	ldrb.w	r3, [sp, #18]
   12e3e:	f88d 300a 	strb.w	r3, [sp, #10]
   12e42:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12e46:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   12e4a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   12e4e:	f88d 300c 	strb.w	r3, [sp, #12]
   12e52:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12e56:	f88d 300d 	strb.w	r3, [sp, #13]
   12e5a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   12e5e:	f88d 300e 	strb.w	r3, [sp, #14]
   12e62:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12e66:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12e6a:	2310      	movs	r3, #16
   12e6c:	466a      	mov	r2, sp
   12e6e:	4619      	mov	r1, r3
   12e70:	eb0d 0003 	add.w	r0, sp, r3
   12e74:	f013 fab8 	bl	263e8 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   12e78:	1c63      	adds	r3, r4, #1
   12e7a:	011a      	lsls	r2, r3, #4
   12e7c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12e80:	58b2      	ldr	r2, [r6, r2]
   12e82:	f89d 1010 	ldrb.w	r1, [sp, #16]
   12e86:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12e8a:	f88d 1010 	strb.w	r1, [sp, #16]
   12e8e:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12e92:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12e96:	4041      	eors	r1, r0
   12e98:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12e9c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12ea0:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12ea4:	4041      	eors	r1, r0
   12ea6:	f88d 1012 	strb.w	r1, [sp, #18]
   12eaa:	b2d2      	uxtb	r2, r2
   12eac:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12eb0:	404a      	eors	r2, r1
   12eb2:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12eb6:	685a      	ldr	r2, [r3, #4]
   12eb8:	f89d 1014 	ldrb.w	r1, [sp, #20]
   12ebc:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12ec0:	f88d 1014 	strb.w	r1, [sp, #20]
   12ec4:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12ec8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12ecc:	4041      	eors	r1, r0
   12ece:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12ed2:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12ed6:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12eda:	4041      	eors	r1, r0
   12edc:	f88d 1016 	strb.w	r1, [sp, #22]
   12ee0:	b2d2      	uxtb	r2, r2
   12ee2:	f89d 1017 	ldrb.w	r1, [sp, #23]
   12ee6:	404a      	eors	r2, r1
   12ee8:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12eec:	689a      	ldr	r2, [r3, #8]
   12eee:	f89d 1018 	ldrb.w	r1, [sp, #24]
   12ef2:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12ef6:	f88d 1018 	strb.w	r1, [sp, #24]
   12efa:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12efe:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12f02:	4041      	eors	r1, r0
   12f04:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12f08:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12f0c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12f10:	4041      	eors	r1, r0
   12f12:	f88d 101a 	strb.w	r1, [sp, #26]
   12f16:	b2d2      	uxtb	r2, r2
   12f18:	f89d 101b 	ldrb.w	r1, [sp, #27]
   12f1c:	404a      	eors	r2, r1
   12f1e:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12f22:	68db      	ldr	r3, [r3, #12]
   12f24:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12f28:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12f2c:	f88d 201c 	strb.w	r2, [sp, #28]
   12f30:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12f34:	f89d 101d 	ldrb.w	r1, [sp, #29]
   12f38:	404a      	eors	r2, r1
   12f3a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12f3e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12f42:	f89d 101e 	ldrb.w	r1, [sp, #30]
   12f46:	404a      	eors	r2, r1
   12f48:	f88d 201e 	strb.w	r2, [sp, #30]
   12f4c:	b2db      	uxtb	r3, r3
   12f4e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12f52:	4053      	eors	r3, r2
   12f54:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   12f58:	2310      	movs	r3, #16
   12f5a:	eb0d 0203 	add.w	r2, sp, r3
   12f5e:	4619      	mov	r1, r3
   12f60:	4638      	mov	r0, r7
   12f62:	f013 fa41 	bl	263e8 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   12f66:	2210      	movs	r2, #16
   12f68:	2100      	movs	r1, #0
   12f6a:	eb0d 0002 	add.w	r0, sp, r2
   12f6e:	f013 fa48 	bl	26402 <_set>

	return TC_CRYPTO_SUCCESS;
   12f72:	2001      	movs	r0, #1
}
   12f74:	b008      	add	sp, #32
   12f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   12f7a:	2000      	movs	r0, #0
}
   12f7c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   12f7e:	2000      	movs	r0, #0
   12f80:	e7f8      	b.n	12f74 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   12f82:	2000      	movs	r0, #0
   12f84:	e7f6      	b.n	12f74 <tc_aes_encrypt+0x734>
   12f86:	bf00      	nop
   12f88:	0002a978 	.word	0x0002a978

00012f8c <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   12f8c:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   12f8e:	4802      	ldr	r0, [pc, #8]	; (12f98 <nrf_cc3xx_platform_abort_init+0xc>)
   12f90:	f00f fff2 	bl	22f78 <nrf_cc3xx_platform_set_abort>
}
   12f94:	bd08      	pop	{r3, pc}
   12f96:	bf00      	nop
   12f98:	0002aa78 	.word	0x0002aa78

00012f9c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   12f9c:	b1d0      	cbz	r0, 12fd4 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12f9e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   12fa0:	6842      	ldr	r2, [r0, #4]
   12fa2:	2a04      	cmp	r2, #4
   12fa4:	d005      	beq.n	12fb2 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12fa6:	b1d2      	cbz	r2, 12fde <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   12fa8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   12faa:	f00b febf 	bl	1ed2c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   12fae:	2000      	movs	r0, #0
    }
}
   12fb0:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   12fb2:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12fb4:	2200      	movs	r2, #0
   12fb6:	f3bf 8f5b 	dmb	ish
   12fba:	e853 1f00 	ldrex	r1, [r3]
   12fbe:	2901      	cmp	r1, #1
   12fc0:	d103      	bne.n	12fca <mutex_unlock_platform+0x2e>
   12fc2:	e843 2000 	strex	r0, r2, [r3]
   12fc6:	2800      	cmp	r0, #0
   12fc8:	d1f7      	bne.n	12fba <mutex_unlock_platform+0x1e>
   12fca:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12fce:	d104      	bne.n	12fda <mutex_unlock_platform+0x3e>
   12fd0:	4610      	mov	r0, r2
   12fd2:	e7ed      	b.n	12fb0 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12fd4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   12fd8:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12fda:	4802      	ldr	r0, [pc, #8]	; (12fe4 <mutex_unlock_platform+0x48>)
   12fdc:	e7e8      	b.n	12fb0 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12fde:	4802      	ldr	r0, [pc, #8]	; (12fe8 <mutex_unlock_platform+0x4c>)
   12fe0:	e7e6      	b.n	12fb0 <mutex_unlock_platform+0x14>
   12fe2:	bf00      	nop
   12fe4:	ffff8fe9 	.word	0xffff8fe9
   12fe8:	ffff8fea 	.word	0xffff8fea

00012fec <mutex_lock_platform>:
    if(mutex == NULL) {
   12fec:	b320      	cbz	r0, 13038 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12fee:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   12ff0:	6842      	ldr	r2, [r0, #4]
   12ff2:	2a04      	cmp	r2, #4
   12ff4:	d002      	beq.n	12ffc <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12ff6:	b992      	cbnz	r2, 1301e <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12ff8:	4811      	ldr	r0, [pc, #68]	; (13040 <mutex_lock_platform+0x54>)
   12ffa:	e00f      	b.n	1301c <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   12ffc:	6803      	ldr	r3, [r0, #0]
   12ffe:	2201      	movs	r2, #1
   13000:	f3bf 8f5b 	dmb	ish
   13004:	e853 1f00 	ldrex	r1, [r3]
   13008:	2900      	cmp	r1, #0
   1300a:	d103      	bne.n	13014 <mutex_lock_platform+0x28>
   1300c:	e843 2000 	strex	r0, r2, [r3]
   13010:	2800      	cmp	r0, #0
   13012:	d1f7      	bne.n	13004 <mutex_lock_platform+0x18>
   13014:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13018:	d10c      	bne.n	13034 <mutex_lock_platform+0x48>
   1301a:	2000      	movs	r0, #0
}
   1301c:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   1301e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13020:	f04f 32ff 	mov.w	r2, #4294967295
   13024:	f04f 33ff 	mov.w	r3, #4294967295
   13028:	f00b fd60 	bl	1eaec <z_impl_k_mutex_lock>
        if (ret == 0) {
   1302c:	2800      	cmp	r0, #0
   1302e:	d0f5      	beq.n	1301c <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   13030:	4804      	ldr	r0, [pc, #16]	; (13044 <mutex_lock_platform+0x58>)
   13032:	e7f3      	b.n	1301c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13034:	4803      	ldr	r0, [pc, #12]	; (13044 <mutex_lock_platform+0x58>)
   13036:	e7f1      	b.n	1301c <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13038:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   1303c:	4770      	bx	lr
   1303e:	bf00      	nop
   13040:	ffff8fea 	.word	0xffff8fea
   13044:	ffff8fe9 	.word	0xffff8fe9

00013048 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13048:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1304a:	4604      	mov	r4, r0
   1304c:	b188      	cbz	r0, 13072 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1304e:	6863      	ldr	r3, [r4, #4]
   13050:	2b04      	cmp	r3, #4
   13052:	d00d      	beq.n	13070 <mutex_free_platform+0x28>
   13054:	2b08      	cmp	r3, #8
   13056:	d00b      	beq.n	13070 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13058:	b153      	cbz	r3, 13070 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   1305a:	f013 0f02 	tst.w	r3, #2
   1305e:	d00d      	beq.n	1307c <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   13060:	4621      	mov	r1, r4
   13062:	4809      	ldr	r0, [pc, #36]	; (13088 <mutex_free_platform+0x40>)
   13064:	f00b fa7a 	bl	1e55c <k_mem_slab_free>
        mutex->mutex = NULL;
   13068:	2300      	movs	r3, #0
   1306a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   1306c:	2300      	movs	r3, #0
   1306e:	6063      	str	r3, [r4, #4]
}
   13070:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   13072:	4b06      	ldr	r3, [pc, #24]	; (1308c <mutex_free_platform+0x44>)
   13074:	685b      	ldr	r3, [r3, #4]
   13076:	4806      	ldr	r0, [pc, #24]	; (13090 <mutex_free_platform+0x48>)
   13078:	4798      	blx	r3
   1307a:	e7e8      	b.n	1304e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1307c:	2214      	movs	r2, #20
   1307e:	2100      	movs	r1, #0
   13080:	6820      	ldr	r0, [r4, #0]
   13082:	f013 fbdd 	bl	26840 <memset>
   13086:	e7f1      	b.n	1306c <mutex_free_platform+0x24>
   13088:	20001fa0 	.word	0x20001fa0
   1308c:	20000644 	.word	0x20000644
   13090:	0002aa80 	.word	0x0002aa80

00013094 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13094:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   13096:	4604      	mov	r4, r0
   13098:	b178      	cbz	r0, 130ba <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1309a:	6863      	ldr	r3, [r4, #4]
   1309c:	2b04      	cmp	r3, #4
   1309e:	d00b      	beq.n	130b8 <mutex_init_platform+0x24>
   130a0:	2b08      	cmp	r3, #8
   130a2:	d009      	beq.n	130b8 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   130a4:	b90b      	cbnz	r3, 130aa <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   130a6:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   130a8:	b163      	cbz	r3, 130c4 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   130aa:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   130ac:	f016 fb2d 	bl	2970a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   130b0:	6863      	ldr	r3, [r4, #4]
   130b2:	f043 0301 	orr.w	r3, r3, #1
   130b6:	6063      	str	r3, [r4, #4]
}
   130b8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   130ba:	4b0f      	ldr	r3, [pc, #60]	; (130f8 <mutex_init_platform+0x64>)
   130bc:	685b      	ldr	r3, [r3, #4]
   130be:	480f      	ldr	r0, [pc, #60]	; (130fc <mutex_init_platform+0x68>)
   130c0:	4798      	blx	r3
   130c2:	e7ea      	b.n	1309a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   130c4:	f04f 32ff 	mov.w	r2, #4294967295
   130c8:	f04f 33ff 	mov.w	r3, #4294967295
   130cc:	4621      	mov	r1, r4
   130ce:	480c      	ldr	r0, [pc, #48]	; (13100 <mutex_init_platform+0x6c>)
   130d0:	f00b f9d0 	bl	1e474 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   130d4:	b908      	cbnz	r0, 130da <mutex_init_platform+0x46>
   130d6:	6823      	ldr	r3, [r4, #0]
   130d8:	b91b      	cbnz	r3, 130e2 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   130da:	4b07      	ldr	r3, [pc, #28]	; (130f8 <mutex_init_platform+0x64>)
   130dc:	685b      	ldr	r3, [r3, #4]
   130de:	4809      	ldr	r0, [pc, #36]	; (13104 <mutex_init_platform+0x70>)
   130e0:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   130e2:	2214      	movs	r2, #20
   130e4:	2100      	movs	r1, #0
   130e6:	6820      	ldr	r0, [r4, #0]
   130e8:	f013 fbaa 	bl	26840 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   130ec:	6863      	ldr	r3, [r4, #4]
   130ee:	f043 0302 	orr.w	r3, r3, #2
   130f2:	6063      	str	r3, [r4, #4]
   130f4:	e7d9      	b.n	130aa <mutex_init_platform+0x16>
   130f6:	bf00      	nop
   130f8:	20000644 	.word	0x20000644
   130fc:	0002aa80 	.word	0x0002aa80
   13100:	20001fa0 	.word	0x20001fa0
   13104:	0002aaa8 	.word	0x0002aaa8

00013108 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   13108:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1310a:	2340      	movs	r3, #64	; 0x40
   1310c:	2214      	movs	r2, #20
   1310e:	4904      	ldr	r1, [pc, #16]	; (13120 <nrf_cc3xx_platform_mutex_init+0x18>)
   13110:	4804      	ldr	r0, [pc, #16]	; (13124 <nrf_cc3xx_platform_mutex_init+0x1c>)
   13112:	f016 faa6 	bl	29662 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   13116:	4904      	ldr	r1, [pc, #16]	; (13128 <nrf_cc3xx_platform_mutex_init+0x20>)
   13118:	4804      	ldr	r0, [pc, #16]	; (1312c <nrf_cc3xx_platform_mutex_init+0x24>)
   1311a:	f00f ffe5 	bl	230e8 <nrf_cc3xx_platform_set_mutexes>
}
   1311e:	bd08      	pop	{r3, pc}
   13120:	20001fc0 	.word	0x20001fc0
   13124:	20001fa0 	.word	0x20001fa0
   13128:	0002aae8 	.word	0x0002aae8
   1312c:	0002aad8 	.word	0x0002aad8

00013130 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13130:	4901      	ldr	r1, [pc, #4]	; (13138 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13132:	2210      	movs	r2, #16
	str	r2, [r1]
   13134:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13136:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13138:	e000ed10 	.word	0xe000ed10

0001313c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1313c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1313e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13140:	f380 8811 	msr	BASEPRI, r0
	isb
   13144:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13148:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1314c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1314e:	b662      	cpsie	i
	isb
   13150:	f3bf 8f6f 	isb	sy

	bx	lr
   13154:	4770      	bx	lr
   13156:	bf00      	nop

00013158 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13158:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1315a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1315c:	f381 8811 	msr	BASEPRI, r1

	wfe
   13160:	bf20      	wfe

	msr	BASEPRI, r0
   13162:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13166:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13168:	4770      	bx	lr
   1316a:	bf00      	nop

0001316c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   1316c:	b570      	push	{r4, r5, r6, lr}
   1316e:	b082      	sub	sp, #8
   13170:	4604      	mov	r4, r0
   13172:	4d1f      	ldr	r5, [pc, #124]	; (131f0 <esf_dump+0x84>)
   13174:	4b1f      	ldr	r3, [pc, #124]	; (131f4 <esf_dump+0x88>)
   13176:	1aed      	subs	r5, r5, r3
   13178:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1317a:	2601      	movs	r6, #1
   1317c:	f04f 0300 	mov.w	r3, #0
   13180:	f366 0302 	bfi	r3, r6, #0, #3
   13184:	f36f 03c5 	bfc	r3, #3, #3
   13188:	f365 138f 	bfi	r3, r5, #6, #10
   1318c:	f8ad 3000 	strh.w	r3, [sp]
   13190:	6883      	ldr	r3, [r0, #8]
   13192:	6842      	ldr	r2, [r0, #4]
   13194:	6801      	ldr	r1, [r0, #0]
   13196:	4818      	ldr	r0, [pc, #96]	; (131f8 <esf_dump+0x8c>)
   13198:	f7fe fcf2 	bl	11b80 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1319c:	f04f 0300 	mov.w	r3, #0
   131a0:	f366 0302 	bfi	r3, r6, #0, #3
   131a4:	f36f 03c5 	bfc	r3, #3, #3
   131a8:	f365 138f 	bfi	r3, r5, #6, #10
   131ac:	f8ad 3000 	strh.w	r3, [sp]
   131b0:	6963      	ldr	r3, [r4, #20]
   131b2:	6922      	ldr	r2, [r4, #16]
   131b4:	68e1      	ldr	r1, [r4, #12]
   131b6:	4811      	ldr	r0, [pc, #68]	; (131fc <esf_dump+0x90>)
   131b8:	f7fe fce2 	bl	11b80 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   131bc:	f04f 0200 	mov.w	r2, #0
   131c0:	f366 0202 	bfi	r2, r6, #0, #3
   131c4:	f36f 02c5 	bfc	r2, #3, #3
   131c8:	f365 128f 	bfi	r2, r5, #6, #10
   131cc:	69e1      	ldr	r1, [r4, #28]
   131ce:	480c      	ldr	r0, [pc, #48]	; (13200 <esf_dump+0x94>)
   131d0:	f7fe fc20 	bl	11a14 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   131d4:	f04f 0200 	mov.w	r2, #0
   131d8:	f366 0202 	bfi	r2, r6, #0, #3
   131dc:	f36f 02c5 	bfc	r2, #3, #3
   131e0:	f365 128f 	bfi	r2, r5, #6, #10
   131e4:	69a1      	ldr	r1, [r4, #24]
   131e6:	4807      	ldr	r0, [pc, #28]	; (13204 <esf_dump+0x98>)
   131e8:	f7fe fc14 	bl	11a14 <log_1>
		esf->basic.pc);
}
   131ec:	b002      	add	sp, #8
   131ee:	bd70      	pop	{r4, r5, r6, pc}
   131f0:	00029e08 	.word	0x00029e08
   131f4:	00029d70 	.word	0x00029d70
   131f8:	0002aafc 	.word	0x0002aafc
   131fc:	0002ab2c 	.word	0x0002ab2c
   13200:	0002ab5c 	.word	0x0002ab5c
   13204:	0002ab6c 	.word	0x0002ab6c

00013208 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13208:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1320a:	2b00      	cmp	r3, #0
   1320c:	db08      	blt.n	13220 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1320e:	f000 001f 	and.w	r0, r0, #31
   13212:	095b      	lsrs	r3, r3, #5
   13214:	2201      	movs	r2, #1
   13216:	fa02 f000 	lsl.w	r0, r2, r0
   1321a:	4a02      	ldr	r2, [pc, #8]	; (13224 <arch_irq_enable+0x1c>)
   1321c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13220:	4770      	bx	lr
   13222:	bf00      	nop
   13224:	e000e100 	.word	0xe000e100

00013228 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13228:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1322a:	2b00      	cmp	r3, #0
   1322c:	db0d      	blt.n	1324a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1322e:	f000 001f 	and.w	r0, r0, #31
   13232:	095b      	lsrs	r3, r3, #5
   13234:	2201      	movs	r2, #1
   13236:	fa02 f000 	lsl.w	r0, r2, r0
   1323a:	3320      	adds	r3, #32
   1323c:	4a03      	ldr	r2, [pc, #12]	; (1324c <arch_irq_disable+0x24>)
   1323e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13242:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13246:	f3bf 8f6f 	isb	sy
}
   1324a:	4770      	bx	lr
   1324c:	e000e100 	.word	0xe000e100

00013250 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13250:	0942      	lsrs	r2, r0, #5
   13252:	4b05      	ldr	r3, [pc, #20]	; (13268 <arch_irq_is_enabled+0x18>)
   13254:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13258:	f000 001f 	and.w	r0, r0, #31
   1325c:	2301      	movs	r3, #1
   1325e:	fa03 f000 	lsl.w	r0, r3, r0
}
   13262:	4010      	ands	r0, r2
   13264:	4770      	bx	lr
   13266:	bf00      	nop
   13268:	e000e100 	.word	0xe000e100

0001326c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   1326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1326e:	4605      	mov	r5, r0
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13270:	f012 0f01 	tst.w	r2, #1
   13274:	d115      	bne.n	132a2 <z_arm_irq_priority_set+0x36>
   13276:	460e      	mov	r6, r1
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   13278:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1327a:	2c07      	cmp	r4, #7
   1327c:	d912      	bls.n	132a4 <z_arm_irq_priority_set+0x38>
   1327e:	4f13      	ldr	r7, [pc, #76]	; (132cc <z_arm_irq_priority_set+0x60>)
   13280:	2359      	movs	r3, #89	; 0x59
   13282:	463a      	mov	r2, r7
   13284:	4912      	ldr	r1, [pc, #72]	; (132d0 <z_arm_irq_priority_set+0x64>)
   13286:	4813      	ldr	r0, [pc, #76]	; (132d4 <z_arm_irq_priority_set+0x68>)
   13288:	f012 fad1 	bl	2582e <printk>
   1328c:	2306      	movs	r3, #6
   1328e:	462a      	mov	r2, r5
   13290:	4631      	mov	r1, r6
   13292:	4811      	ldr	r0, [pc, #68]	; (132d8 <z_arm_irq_priority_set+0x6c>)
   13294:	f012 facb 	bl	2582e <printk>
   13298:	2159      	movs	r1, #89	; 0x59
   1329a:	4638      	mov	r0, r7
   1329c:	f012 fd49 	bl	25d32 <assert_post_action>
   132a0:	e000      	b.n	132a4 <z_arm_irq_priority_set+0x38>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   132a2:	2400      	movs	r4, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   132a4:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   132a6:	2b00      	cmp	r3, #0
   132a8:	db08      	blt.n	132bc <z_arm_irq_priority_set+0x50>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   132aa:	0164      	lsls	r4, r4, #5
   132ac:	b2e4      	uxtb	r4, r4
   132ae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   132b2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   132b6:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
}
   132ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   132bc:	f005 050f 	and.w	r5, r5, #15
   132c0:	0164      	lsls	r4, r4, #5
   132c2:	b2e4      	uxtb	r4, r4
   132c4:	4b05      	ldr	r3, [pc, #20]	; (132dc <z_arm_irq_priority_set+0x70>)
   132c6:	555c      	strb	r4, [r3, r5]
   132c8:	e7f7      	b.n	132ba <z_arm_irq_priority_set+0x4e>
   132ca:	bf00      	nop
   132cc:	0002ab9c 	.word	0x0002ab9c
   132d0:	0002abd4 	.word	0x0002abd4
   132d4:	00029ff8 	.word	0x00029ff8
   132d8:	0002abf0 	.word	0x0002abf0
   132dc:	e000ed14 	.word	0xe000ed14

000132e0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   132e0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   132e2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   132e4:	4b05      	ldr	r3, [pc, #20]	; (132fc <_arch_isr_direct_pm+0x1c>)
   132e6:	699b      	ldr	r3, [r3, #24]
   132e8:	b90b      	cbnz	r3, 132ee <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   132ea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   132ec:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   132ee:	4b03      	ldr	r3, [pc, #12]	; (132fc <_arch_isr_direct_pm+0x1c>)
   132f0:	2200      	movs	r2, #0
   132f2:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   132f4:	f016 f9ed 	bl	296d2 <z_pm_save_idle_exit>
   132f8:	e7f7      	b.n	132ea <_arch_isr_direct_pm+0xa>
   132fa:	bf00      	nop
   132fc:	20002d18 	.word	0x20002d18

00013300 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13300:	bf30      	wfi
    b z_SysNmiOnReset
   13302:	f7ff bffd 	b.w	13300 <z_SysNmiOnReset>
   13306:	bf00      	nop

00013308 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13308:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1330a:	4b0b      	ldr	r3, [pc, #44]	; (13338 <z_arm_prep_c+0x30>)
   1330c:	4a0b      	ldr	r2, [pc, #44]	; (1333c <z_arm_prep_c+0x34>)
   1330e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13312:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13314:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13318:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1331c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13320:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13328:	f00a feea 	bl	1e100 <z_bss_zero>
	z_data_copy();
   1332c:	f00e f9de 	bl	216ec <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13330:	f000 fd20 	bl	13d74 <z_arm_interrupt_init>
	z_cstart();
   13334:	f00a fef0 	bl	1e118 <z_cstart>
   13338:	e000ed00 	.word	0xe000ed00
   1333c:	00000000 	.word	0x00000000

00013340 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13340:	4a0a      	ldr	r2, [pc, #40]	; (1336c <arch_swap+0x2c>)
   13342:	6893      	ldr	r3, [r2, #8]
   13344:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   13348:	4909      	ldr	r1, [pc, #36]	; (13370 <arch_swap+0x30>)
   1334a:	6809      	ldr	r1, [r1, #0]
   1334c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13350:	4908      	ldr	r1, [pc, #32]	; (13374 <arch_swap+0x34>)
   13352:	684b      	ldr	r3, [r1, #4]
   13354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13358:	604b      	str	r3, [r1, #4]
   1335a:	2300      	movs	r3, #0
   1335c:	f383 8811 	msr	BASEPRI, r3
   13360:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13364:	6893      	ldr	r3, [r2, #8]
}
   13366:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   1336a:	4770      	bx	lr
   1336c:	20002d18 	.word	0x20002d18
   13370:	0002d1cc 	.word	0x0002d1cc
   13374:	e000ed00 	.word	0xe000ed00

00013378 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13378:	4913      	ldr	r1, [pc, #76]	; (133c8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1337a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1337c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13380:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13382:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13386:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1338a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1338c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13390:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13394:	4f0d      	ldr	r7, [pc, #52]	; (133cc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13396:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1339a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1339c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1339e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   133a0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   133a4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   133a6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   133aa:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   133ae:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   133b0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   133b2:	f000 fd81 	bl	13eb8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   133b6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   133ba:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   133be:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   133c2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   133c6:	4770      	bx	lr
    ldr r1, =_kernel
   133c8:	20002d18 	.word	0x20002d18
    ldr v4, =_SCS_ICSR
   133cc:	e000ed04 	.word	0xe000ed04

000133d0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   133d0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   133d4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   133d6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   133da:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   133de:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   133e0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   133e4:	2902      	cmp	r1, #2
    beq _oops
   133e6:	d0ff      	beq.n	133e8 <_oops>

000133e8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   133e8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   133ea:	f013 f930 	bl	2664e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   133ee:	bd01      	pop	{r0, pc}

000133f0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   133f0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   133f2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   133f6:	490d      	ldr	r1, [pc, #52]	; (1342c <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   133f8:	f021 0101 	bic.w	r1, r1, #1
   133fc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   13400:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13404:	9b01      	ldr	r3, [sp, #4]
   13406:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1340a:	9b02      	ldr	r3, [sp, #8]
   1340c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13410:	9b03      	ldr	r3, [sp, #12]
   13412:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1341a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   1341e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13420:	2300      	movs	r3, #0
   13422:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13426:	bc10      	pop	{r4}
   13428:	4770      	bx	lr
   1342a:	bf00      	nop
   1342c:	0002599f 	.word	0x0002599f

00013430 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13430:	4b16      	ldr	r3, [pc, #88]	; (1348c <z_check_thread_stack_fail+0x5c>)
   13432:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   13434:	b1da      	cbz	r2, 1346e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13436:	f110 0f16 	cmn.w	r0, #22
   1343a:	d01a      	beq.n	13472 <z_check_thread_stack_fail+0x42>
{
   1343c:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1343e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   13442:	f1a3 0420 	sub.w	r4, r3, #32
   13446:	4284      	cmp	r4, r0
   13448:	d805      	bhi.n	13456 <z_check_thread_stack_fail+0x26>
   1344a:	4283      	cmp	r3, r0
   1344c:	d908      	bls.n	13460 <z_check_thread_stack_fail+0x30>
   1344e:	428b      	cmp	r3, r1
   13450:	d808      	bhi.n	13464 <z_check_thread_stack_fail+0x34>
   13452:	2100      	movs	r1, #0
   13454:	e000      	b.n	13458 <z_check_thread_stack_fail+0x28>
   13456:	2100      	movs	r1, #0
   13458:	b931      	cbnz	r1, 13468 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1345a:	2000      	movs	r0, #0
}
   1345c:	bc10      	pop	{r4}
   1345e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13460:	2100      	movs	r1, #0
   13462:	e7f9      	b.n	13458 <z_check_thread_stack_fail+0x28>
   13464:	2101      	movs	r1, #1
   13466:	e7f7      	b.n	13458 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   13468:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1346c:	e7f6      	b.n	1345c <z_check_thread_stack_fail+0x2c>
		return 0;
   1346e:	2000      	movs	r0, #0
   13470:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13472:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   13476:	428b      	cmp	r3, r1
   13478:	bf94      	ite	ls
   1347a:	2100      	movls	r1, #0
   1347c:	2101      	movhi	r1, #1
   1347e:	b909      	cbnz	r1, 13484 <z_check_thread_stack_fail+0x54>
	return 0;
   13480:	2000      	movs	r0, #0
}
   13482:	4770      	bx	lr
		return thread->stack_info.start;
   13484:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   13488:	4770      	bx	lr
   1348a:	bf00      	nop
   1348c:	20002d18 	.word	0x20002d18

00013490 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13490:	b508      	push	{r3, lr}
   13492:	460d      	mov	r5, r1
   13494:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13496:	4b08      	ldr	r3, [pc, #32]	; (134b8 <arch_switch_to_main_thread+0x28>)
   13498:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1349a:	f000 fd0d 	bl	13eb8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1349e:	4620      	mov	r0, r4
   134a0:	f385 8809 	msr	PSP, r5
   134a4:	2100      	movs	r1, #0
   134a6:	b663      	cpsie	if
   134a8:	f381 8811 	msr	BASEPRI, r1
   134ac:	f3bf 8f6f 	isb	sy
   134b0:	2200      	movs	r2, #0
   134b2:	2300      	movs	r3, #0
   134b4:	f012 fa73 	bl	2599e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   134b8:	20002d18 	.word	0x20002d18

000134bc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   134bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   134be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   134c0:	4a0b      	ldr	r2, [pc, #44]	; (134f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   134c2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   134c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   134c6:	bf1e      	ittt	ne
	movne	r1, #0
   134c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   134ca:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   134cc:	f016 f901 	blne	296d2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   134d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   134d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   134d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   134da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   134de:	4905      	ldr	r1, [pc, #20]	; (134f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   134e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   134e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   134e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   134e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   134ea:	4903      	ldr	r1, [pc, #12]	; (134f8 <_isr_wrapper+0x3c>)
	bx r1
   134ec:	4708      	bx	r1
   134ee:	0000      	.short	0x0000
	ldr r2, =_kernel
   134f0:	20002d18 	.word	0x20002d18
	ldr r1, =_sw_isr_table
   134f4:	00029bbc 	.word	0x00029bbc
	ldr r1, =z_arm_int_exit
   134f8:	000134fd 	.word	0x000134fd

000134fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   134fc:	4b04      	ldr	r3, [pc, #16]	; (13510 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   134fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13500:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13502:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13504:	d003      	beq.n	1350e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13506:	4903      	ldr	r1, [pc, #12]	; (13514 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1350c:	600a      	str	r2, [r1, #0]

0001350e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1350e:	4770      	bx	lr
	ldr r3, =_kernel
   13510:	20002d18 	.word	0x20002d18
	ldr r1, =_SCS_ICSR
   13514:	e000ed04 	.word	0xe000ed04

00013518 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   13518:	b508      	push	{r3, lr}
   1351a:	4b4e      	ldr	r3, [pc, #312]	; (13654 <usage_fault+0x13c>)
   1351c:	4a4e      	ldr	r2, [pc, #312]	; (13658 <usage_fault+0x140>)
   1351e:	1a9b      	subs	r3, r3, r2
   13520:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   13522:	f04f 0100 	mov.w	r1, #0
   13526:	2201      	movs	r2, #1
   13528:	f362 0102 	bfi	r1, r2, #0, #3
   1352c:	f36f 01c5 	bfc	r1, #3, #3
   13530:	f363 118f 	bfi	r1, r3, #6, #10
   13534:	4849      	ldr	r0, [pc, #292]	; (1365c <usage_fault+0x144>)
   13536:	f7fe fa3d 	bl	119b4 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1353a:	4b49      	ldr	r3, [pc, #292]	; (13660 <usage_fault+0x148>)
   1353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1353e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   13542:	d121      	bne.n	13588 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13544:	4b46      	ldr	r3, [pc, #280]	; (13660 <usage_fault+0x148>)
   13546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13548:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   1354c:	d12d      	bne.n	135aa <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1354e:	4b44      	ldr	r3, [pc, #272]	; (13660 <usage_fault+0x148>)
   13550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13552:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   13556:	d139      	bne.n	135cc <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13558:	4b41      	ldr	r3, [pc, #260]	; (13660 <usage_fault+0x148>)
   1355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1355c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   13560:	d145      	bne.n	135ee <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13562:	4b3f      	ldr	r3, [pc, #252]	; (13660 <usage_fault+0x148>)
   13564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13566:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1356a:	d151      	bne.n	13610 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1356c:	4b3c      	ldr	r3, [pc, #240]	; (13660 <usage_fault+0x148>)
   1356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13570:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13574:	d15d      	bne.n	13632 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13576:	4a3a      	ldr	r2, [pc, #232]	; (13660 <usage_fault+0x148>)
   13578:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1357a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1357e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13582:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   13584:	2000      	movs	r0, #0
   13586:	bd08      	pop	{r3, pc}
   13588:	4b32      	ldr	r3, [pc, #200]	; (13654 <usage_fault+0x13c>)
   1358a:	4a33      	ldr	r2, [pc, #204]	; (13658 <usage_fault+0x140>)
   1358c:	1a9b      	subs	r3, r3, r2
   1358e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   13590:	f04f 0100 	mov.w	r1, #0
   13594:	2201      	movs	r2, #1
   13596:	f362 0102 	bfi	r1, r2, #0, #3
   1359a:	f36f 01c5 	bfc	r1, #3, #3
   1359e:	f363 118f 	bfi	r1, r3, #6, #10
   135a2:	4830      	ldr	r0, [pc, #192]	; (13664 <usage_fault+0x14c>)
   135a4:	f7fe fa06 	bl	119b4 <log_0>
   135a8:	e7cc      	b.n	13544 <usage_fault+0x2c>
   135aa:	4b2a      	ldr	r3, [pc, #168]	; (13654 <usage_fault+0x13c>)
   135ac:	4a2a      	ldr	r2, [pc, #168]	; (13658 <usage_fault+0x140>)
   135ae:	1a9b      	subs	r3, r3, r2
   135b0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   135b2:	f04f 0100 	mov.w	r1, #0
   135b6:	2201      	movs	r2, #1
   135b8:	f362 0102 	bfi	r1, r2, #0, #3
   135bc:	f36f 01c5 	bfc	r1, #3, #3
   135c0:	f363 118f 	bfi	r1, r3, #6, #10
   135c4:	4828      	ldr	r0, [pc, #160]	; (13668 <usage_fault+0x150>)
   135c6:	f7fe f9f5 	bl	119b4 <log_0>
   135ca:	e7c0      	b.n	1354e <usage_fault+0x36>
   135cc:	4b21      	ldr	r3, [pc, #132]	; (13654 <usage_fault+0x13c>)
   135ce:	4a22      	ldr	r2, [pc, #136]	; (13658 <usage_fault+0x140>)
   135d0:	1a9b      	subs	r3, r3, r2
   135d2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   135d4:	f04f 0100 	mov.w	r1, #0
   135d8:	2201      	movs	r2, #1
   135da:	f362 0102 	bfi	r1, r2, #0, #3
   135de:	f36f 01c5 	bfc	r1, #3, #3
   135e2:	f363 118f 	bfi	r1, r3, #6, #10
   135e6:	4821      	ldr	r0, [pc, #132]	; (1366c <usage_fault+0x154>)
   135e8:	f7fe f9e4 	bl	119b4 <log_0>
   135ec:	e7b4      	b.n	13558 <usage_fault+0x40>
   135ee:	4b19      	ldr	r3, [pc, #100]	; (13654 <usage_fault+0x13c>)
   135f0:	4a19      	ldr	r2, [pc, #100]	; (13658 <usage_fault+0x140>)
   135f2:	1a9b      	subs	r3, r3, r2
   135f4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   135f6:	f04f 0100 	mov.w	r1, #0
   135fa:	2201      	movs	r2, #1
   135fc:	f362 0102 	bfi	r1, r2, #0, #3
   13600:	f36f 01c5 	bfc	r1, #3, #3
   13604:	f363 118f 	bfi	r1, r3, #6, #10
   13608:	4819      	ldr	r0, [pc, #100]	; (13670 <usage_fault+0x158>)
   1360a:	f7fe f9d3 	bl	119b4 <log_0>
   1360e:	e7a8      	b.n	13562 <usage_fault+0x4a>
   13610:	4b10      	ldr	r3, [pc, #64]	; (13654 <usage_fault+0x13c>)
   13612:	4a11      	ldr	r2, [pc, #68]	; (13658 <usage_fault+0x140>)
   13614:	1a9b      	subs	r3, r3, r2
   13616:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13618:	f04f 0100 	mov.w	r1, #0
   1361c:	2201      	movs	r2, #1
   1361e:	f362 0102 	bfi	r1, r2, #0, #3
   13622:	f36f 01c5 	bfc	r1, #3, #3
   13626:	f363 118f 	bfi	r1, r3, #6, #10
   1362a:	4812      	ldr	r0, [pc, #72]	; (13674 <usage_fault+0x15c>)
   1362c:	f7fe f9c2 	bl	119b4 <log_0>
   13630:	e79c      	b.n	1356c <usage_fault+0x54>
   13632:	4b08      	ldr	r3, [pc, #32]	; (13654 <usage_fault+0x13c>)
   13634:	4a08      	ldr	r2, [pc, #32]	; (13658 <usage_fault+0x140>)
   13636:	1a9b      	subs	r3, r3, r2
   13638:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1363a:	f04f 0100 	mov.w	r1, #0
   1363e:	2201      	movs	r2, #1
   13640:	f362 0102 	bfi	r1, r2, #0, #3
   13644:	f36f 01c5 	bfc	r1, #3, #3
   13648:	f363 118f 	bfi	r1, r3, #6, #10
   1364c:	480a      	ldr	r0, [pc, #40]	; (13678 <usage_fault+0x160>)
   1364e:	f7fe f9b1 	bl	119b4 <log_0>
   13652:	e790      	b.n	13576 <usage_fault+0x5e>
   13654:	00029e08 	.word	0x00029e08
   13658:	00029d70 	.word	0x00029d70
   1365c:	0002ac30 	.word	0x0002ac30
   13660:	e000ed00 	.word	0xe000ed00
   13664:	0002ac48 	.word	0x0002ac48
   13668:	0002ac5c 	.word	0x0002ac5c
   1366c:	0002ac78 	.word	0x0002ac78
   13670:	0002ac98 	.word	0x0002ac98
   13674:	0002acc0 	.word	0x0002acc0
   13678:	0002acdc 	.word	0x0002acdc

0001367c <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   1367c:	b508      	push	{r3, lr}
	*recoverable = false;
   1367e:	2200      	movs	r2, #0
   13680:	700a      	strb	r2, [r1, #0]
   13682:	4b08      	ldr	r3, [pc, #32]	; (136a4 <debug_monitor+0x28>)
   13684:	4908      	ldr	r1, [pc, #32]	; (136a8 <debug_monitor+0x2c>)
   13686:	1a5b      	subs	r3, r3, r1
   13688:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   1368a:	f04f 0100 	mov.w	r1, #0
   1368e:	2001      	movs	r0, #1
   13690:	f360 0102 	bfi	r1, r0, #0, #3
   13694:	f362 01c5 	bfi	r1, r2, #3, #3
   13698:	f363 118f 	bfi	r1, r3, #6, #10
   1369c:	4803      	ldr	r0, [pc, #12]	; (136ac <debug_monitor+0x30>)
   1369e:	f7fe f989 	bl	119b4 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   136a2:	bd08      	pop	{r3, pc}
   136a4:	00029e08 	.word	0x00029e08
   136a8:	00029d70 	.word	0x00029d70
   136ac:	0002ad08 	.word	0x0002ad08

000136b0 <bus_fault>:
{
   136b0:	b570      	push	{r4, r5, r6, lr}
   136b2:	4605      	mov	r5, r0
   136b4:	460e      	mov	r6, r1
   136b6:	4614      	mov	r4, r2
   136b8:	4b5e      	ldr	r3, [pc, #376]	; (13834 <bus_fault+0x184>)
   136ba:	4a5f      	ldr	r2, [pc, #380]	; (13838 <bus_fault+0x188>)
   136bc:	1a9b      	subs	r3, r3, r2
   136be:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   136c0:	f04f 0100 	mov.w	r1, #0
   136c4:	2201      	movs	r2, #1
   136c6:	f362 0102 	bfi	r1, r2, #0, #3
   136ca:	f36f 01c5 	bfc	r1, #3, #3
   136ce:	f363 118f 	bfi	r1, r3, #6, #10
   136d2:	485a      	ldr	r0, [pc, #360]	; (1383c <bus_fault+0x18c>)
   136d4:	f7fe f96e 	bl	119b4 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   136d8:	4b59      	ldr	r3, [pc, #356]	; (13840 <bus_fault+0x190>)
   136da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   136e0:	d124      	bne.n	1372c <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   136e2:	4b57      	ldr	r3, [pc, #348]	; (13840 <bus_fault+0x190>)
   136e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
   136ea:	d130      	bne.n	1374e <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   136ec:	4b54      	ldr	r3, [pc, #336]	; (13840 <bus_fault+0x190>)
   136ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136f0:	f413 7f00 	tst.w	r3, #512	; 0x200
   136f4:	d13c      	bne.n	13770 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   136f6:	4b52      	ldr	r3, [pc, #328]	; (13840 <bus_fault+0x190>)
   136f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
   136fe:	d165      	bne.n	137cc <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13700:	4b4f      	ldr	r3, [pc, #316]	; (13840 <bus_fault+0x190>)
   13702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13704:	f413 7f80 	tst.w	r3, #256	; 0x100
   13708:	d171      	bne.n	137ee <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1370a:	4b4d      	ldr	r3, [pc, #308]	; (13840 <bus_fault+0x190>)
   1370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1370e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   13712:	d17d      	bne.n	13810 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13714:	4a4a      	ldr	r2, [pc, #296]	; (13840 <bus_fault+0x190>)
   13716:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13718:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1371c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1371e:	2101      	movs	r1, #1
   13720:	4628      	mov	r0, r5
   13722:	f012 ffa6 	bl	26672 <memory_fault_recoverable>
   13726:	7020      	strb	r0, [r4, #0]
}
   13728:	2000      	movs	r0, #0
   1372a:	bd70      	pop	{r4, r5, r6, pc}
   1372c:	4b41      	ldr	r3, [pc, #260]	; (13834 <bus_fault+0x184>)
   1372e:	4a42      	ldr	r2, [pc, #264]	; (13838 <bus_fault+0x188>)
   13730:	1a9b      	subs	r3, r3, r2
   13732:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   13734:	f04f 0100 	mov.w	r1, #0
   13738:	2201      	movs	r2, #1
   1373a:	f362 0102 	bfi	r1, r2, #0, #3
   1373e:	f36f 01c5 	bfc	r1, #3, #3
   13742:	f363 118f 	bfi	r1, r3, #6, #10
   13746:	483f      	ldr	r0, [pc, #252]	; (13844 <bus_fault+0x194>)
   13748:	f7fe f934 	bl	119b4 <log_0>
   1374c:	e7c9      	b.n	136e2 <bus_fault+0x32>
   1374e:	4b39      	ldr	r3, [pc, #228]	; (13834 <bus_fault+0x184>)
   13750:	4a39      	ldr	r2, [pc, #228]	; (13838 <bus_fault+0x188>)
   13752:	1a9b      	subs	r3, r3, r2
   13754:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   13756:	f04f 0100 	mov.w	r1, #0
   1375a:	2201      	movs	r2, #1
   1375c:	f362 0102 	bfi	r1, r2, #0, #3
   13760:	f36f 01c5 	bfc	r1, #3, #3
   13764:	f363 118f 	bfi	r1, r3, #6, #10
   13768:	4837      	ldr	r0, [pc, #220]	; (13848 <bus_fault+0x198>)
   1376a:	f7fe f923 	bl	119b4 <log_0>
   1376e:	e7bd      	b.n	136ec <bus_fault+0x3c>
   13770:	4b30      	ldr	r3, [pc, #192]	; (13834 <bus_fault+0x184>)
   13772:	4a31      	ldr	r2, [pc, #196]	; (13838 <bus_fault+0x188>)
   13774:	1a9b      	subs	r3, r3, r2
   13776:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   13778:	f04f 0100 	mov.w	r1, #0
   1377c:	2201      	movs	r2, #1
   1377e:	f362 0102 	bfi	r1, r2, #0, #3
   13782:	f36f 01c5 	bfc	r1, #3, #3
   13786:	f363 118f 	bfi	r1, r3, #6, #10
   1378a:	4830      	ldr	r0, [pc, #192]	; (1384c <bus_fault+0x19c>)
   1378c:	f7fe f912 	bl	119b4 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   13790:	4b2b      	ldr	r3, [pc, #172]	; (13840 <bus_fault+0x190>)
   13792:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13796:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1379a:	d0ac      	beq.n	136f6 <bus_fault+0x46>
   1379c:	4b25      	ldr	r3, [pc, #148]	; (13834 <bus_fault+0x184>)
   1379e:	4a26      	ldr	r2, [pc, #152]	; (13838 <bus_fault+0x188>)
   137a0:	1a9b      	subs	r3, r3, r2
   137a2:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   137a4:	f04f 0200 	mov.w	r2, #0
   137a8:	2001      	movs	r0, #1
   137aa:	f360 0202 	bfi	r2, r0, #0, #3
   137ae:	f36f 02c5 	bfc	r2, #3, #3
   137b2:	f363 128f 	bfi	r2, r3, #6, #10
   137b6:	4826      	ldr	r0, [pc, #152]	; (13850 <bus_fault+0x1a0>)
   137b8:	f7fe f92c 	bl	11a14 <log_1>
			if (from_hard_fault != 0) {
   137bc:	2e00      	cmp	r6, #0
   137be:	d09a      	beq.n	136f6 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   137c0:	4a1f      	ldr	r2, [pc, #124]	; (13840 <bus_fault+0x190>)
   137c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   137c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   137c8:	6293      	str	r3, [r2, #40]	; 0x28
   137ca:	e794      	b.n	136f6 <bus_fault+0x46>
   137cc:	4b19      	ldr	r3, [pc, #100]	; (13834 <bus_fault+0x184>)
   137ce:	4a1a      	ldr	r2, [pc, #104]	; (13838 <bus_fault+0x188>)
   137d0:	1a9b      	subs	r3, r3, r2
   137d2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   137d4:	f04f 0100 	mov.w	r1, #0
   137d8:	2201      	movs	r2, #1
   137da:	f362 0102 	bfi	r1, r2, #0, #3
   137de:	f36f 01c5 	bfc	r1, #3, #3
   137e2:	f363 118f 	bfi	r1, r3, #6, #10
   137e6:	481b      	ldr	r0, [pc, #108]	; (13854 <bus_fault+0x1a4>)
   137e8:	f7fe f8e4 	bl	119b4 <log_0>
   137ec:	e788      	b.n	13700 <bus_fault+0x50>
   137ee:	4b11      	ldr	r3, [pc, #68]	; (13834 <bus_fault+0x184>)
   137f0:	4a11      	ldr	r2, [pc, #68]	; (13838 <bus_fault+0x188>)
   137f2:	1a9b      	subs	r3, r3, r2
   137f4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   137f6:	f04f 0100 	mov.w	r1, #0
   137fa:	2201      	movs	r2, #1
   137fc:	f362 0102 	bfi	r1, r2, #0, #3
   13800:	f36f 01c5 	bfc	r1, #3, #3
   13804:	f363 118f 	bfi	r1, r3, #6, #10
   13808:	4813      	ldr	r0, [pc, #76]	; (13858 <bus_fault+0x1a8>)
   1380a:	f7fe f8d3 	bl	119b4 <log_0>
   1380e:	e781      	b.n	13714 <bus_fault+0x64>
   13810:	4b08      	ldr	r3, [pc, #32]	; (13834 <bus_fault+0x184>)
   13812:	4a09      	ldr	r2, [pc, #36]	; (13838 <bus_fault+0x188>)
   13814:	1a9b      	subs	r3, r3, r2
   13816:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13818:	f04f 0100 	mov.w	r1, #0
   1381c:	2201      	movs	r2, #1
   1381e:	f362 0102 	bfi	r1, r2, #0, #3
   13822:	f36f 01c5 	bfc	r1, #3, #3
   13826:	f363 118f 	bfi	r1, r3, #6, #10
   1382a:	480c      	ldr	r0, [pc, #48]	; (1385c <bus_fault+0x1ac>)
   1382c:	f7fe f8c2 	bl	119b4 <log_0>
   13830:	e770      	b.n	13714 <bus_fault+0x64>
   13832:	bf00      	nop
   13834:	00029e08 	.word	0x00029e08
   13838:	00029d70 	.word	0x00029d70
   1383c:	0002ad2c 	.word	0x0002ad2c
   13840:	e000ed00 	.word	0xe000ed00
   13844:	0002ad44 	.word	0x0002ad44
   13848:	0002ad58 	.word	0x0002ad58
   1384c:	0002ad6c 	.word	0x0002ad6c
   13850:	0002ad88 	.word	0x0002ad88
   13854:	0002ada0 	.word	0x0002ada0
   13858:	0002adbc 	.word	0x0002adbc
   1385c:	0002add4 	.word	0x0002add4

00013860 <mem_manage_fault>:
{
   13860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13862:	4605      	mov	r5, r0
   13864:	460c      	mov	r4, r1
   13866:	4616      	mov	r6, r2
   13868:	4b6f      	ldr	r3, [pc, #444]	; (13a28 <mem_manage_fault+0x1c8>)
   1386a:	4a70      	ldr	r2, [pc, #448]	; (13a2c <mem_manage_fault+0x1cc>)
   1386c:	1a9b      	subs	r3, r3, r2
   1386e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   13870:	f04f 0100 	mov.w	r1, #0
   13874:	2201      	movs	r2, #1
   13876:	f362 0102 	bfi	r1, r2, #0, #3
   1387a:	f36f 01c5 	bfc	r1, #3, #3
   1387e:	f363 118f 	bfi	r1, r3, #6, #10
   13882:	486b      	ldr	r0, [pc, #428]	; (13a30 <mem_manage_fault+0x1d0>)
   13884:	f7fe f896 	bl	119b4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13888:	4b6a      	ldr	r3, [pc, #424]	; (13a34 <mem_manage_fault+0x1d4>)
   1388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1388c:	f013 0f10 	tst.w	r3, #16
   13890:	d132      	bne.n	138f8 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13892:	4b68      	ldr	r3, [pc, #416]	; (13a34 <mem_manage_fault+0x1d4>)
   13894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13896:	f013 0f08 	tst.w	r3, #8
   1389a:	d13e      	bne.n	1391a <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1389c:	4b65      	ldr	r3, [pc, #404]	; (13a34 <mem_manage_fault+0x1d4>)
   1389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   138a0:	f013 0f02 	tst.w	r3, #2
   138a4:	d14a      	bne.n	1393c <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
   138a6:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   138aa:	4b62      	ldr	r3, [pc, #392]	; (13a34 <mem_manage_fault+0x1d4>)
   138ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   138ae:	f013 0f01 	tst.w	r3, #1
   138b2:	d175      	bne.n	139a0 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   138b4:	4b5f      	ldr	r3, [pc, #380]	; (13a34 <mem_manage_fault+0x1d4>)
   138b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   138b8:	f013 0f20 	tst.w	r3, #32
   138bc:	f040 8081 	bne.w	139c2 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   138c0:	4b5c      	ldr	r3, [pc, #368]	; (13a34 <mem_manage_fault+0x1d4>)
   138c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   138c4:	f013 0f10 	tst.w	r3, #16
   138c8:	d104      	bne.n	138d4 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   138ca:	4b5a      	ldr	r3, [pc, #360]	; (13a34 <mem_manage_fault+0x1d4>)
   138cc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   138ce:	f014 0402 	ands.w	r4, r4, #2
   138d2:	d005      	beq.n	138e0 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   138d4:	4b57      	ldr	r3, [pc, #348]	; (13a34 <mem_manage_fault+0x1d4>)
   138d6:	685c      	ldr	r4, [r3, #4]
   138d8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   138dc:	f040 8082 	bne.w	139e4 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   138e0:	4a54      	ldr	r2, [pc, #336]	; (13a34 <mem_manage_fault+0x1d4>)
   138e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   138e4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   138e8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   138ea:	2101      	movs	r1, #1
   138ec:	4628      	mov	r0, r5
   138ee:	f012 fec0 	bl	26672 <memory_fault_recoverable>
   138f2:	7030      	strb	r0, [r6, #0]
}
   138f4:	4620      	mov	r0, r4
   138f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   138f8:	4b4b      	ldr	r3, [pc, #300]	; (13a28 <mem_manage_fault+0x1c8>)
   138fa:	4a4c      	ldr	r2, [pc, #304]	; (13a2c <mem_manage_fault+0x1cc>)
   138fc:	1a9b      	subs	r3, r3, r2
   138fe:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   13900:	f04f 0100 	mov.w	r1, #0
   13904:	2201      	movs	r2, #1
   13906:	f362 0102 	bfi	r1, r2, #0, #3
   1390a:	f36f 01c5 	bfc	r1, #3, #3
   1390e:	f363 118f 	bfi	r1, r3, #6, #10
   13912:	4849      	ldr	r0, [pc, #292]	; (13a38 <mem_manage_fault+0x1d8>)
   13914:	f7fe f84e 	bl	119b4 <log_0>
   13918:	e7bb      	b.n	13892 <mem_manage_fault+0x32>
   1391a:	4b43      	ldr	r3, [pc, #268]	; (13a28 <mem_manage_fault+0x1c8>)
   1391c:	4a43      	ldr	r2, [pc, #268]	; (13a2c <mem_manage_fault+0x1cc>)
   1391e:	1a9b      	subs	r3, r3, r2
   13920:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   13922:	f04f 0100 	mov.w	r1, #0
   13926:	2201      	movs	r2, #1
   13928:	f362 0102 	bfi	r1, r2, #0, #3
   1392c:	f36f 01c5 	bfc	r1, #3, #3
   13930:	f363 118f 	bfi	r1, r3, #6, #10
   13934:	4841      	ldr	r0, [pc, #260]	; (13a3c <mem_manage_fault+0x1dc>)
   13936:	f7fe f83d 	bl	119b4 <log_0>
   1393a:	e7af      	b.n	1389c <mem_manage_fault+0x3c>
   1393c:	4b3a      	ldr	r3, [pc, #232]	; (13a28 <mem_manage_fault+0x1c8>)
   1393e:	4a3b      	ldr	r2, [pc, #236]	; (13a2c <mem_manage_fault+0x1cc>)
   13940:	1a9b      	subs	r3, r3, r2
   13942:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   13944:	f04f 0100 	mov.w	r1, #0
   13948:	2201      	movs	r2, #1
   1394a:	f362 0102 	bfi	r1, r2, #0, #3
   1394e:	f36f 01c5 	bfc	r1, #3, #3
   13952:	f363 118f 	bfi	r1, r3, #6, #10
   13956:	483a      	ldr	r0, [pc, #232]	; (13a40 <mem_manage_fault+0x1e0>)
   13958:	f7fe f82c 	bl	119b4 <log_0>
		uint32_t temp = SCB->MMFAR;
   1395c:	4b35      	ldr	r3, [pc, #212]	; (13a34 <mem_manage_fault+0x1d4>)
   1395e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13962:	f013 0f80 	tst.w	r3, #128	; 0x80
   13966:	d102      	bne.n	1396e <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
   13968:	f06f 0715 	mvn.w	r7, #21
   1396c:	e79d      	b.n	138aa <mem_manage_fault+0x4a>
   1396e:	4b2e      	ldr	r3, [pc, #184]	; (13a28 <mem_manage_fault+0x1c8>)
   13970:	4a2e      	ldr	r2, [pc, #184]	; (13a2c <mem_manage_fault+0x1cc>)
   13972:	1a9b      	subs	r3, r3, r2
   13974:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   13976:	f04f 0200 	mov.w	r2, #0
   1397a:	2101      	movs	r1, #1
   1397c:	f361 0202 	bfi	r2, r1, #0, #3
   13980:	f36f 02c5 	bfc	r2, #3, #3
   13984:	f363 128f 	bfi	r2, r3, #6, #10
   13988:	4639      	mov	r1, r7
   1398a:	482e      	ldr	r0, [pc, #184]	; (13a44 <mem_manage_fault+0x1e4>)
   1398c:	f7fe f842 	bl	11a14 <log_1>
			if (from_hard_fault != 0) {
   13990:	2c00      	cmp	r4, #0
   13992:	d08a      	beq.n	138aa <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13994:	4a27      	ldr	r2, [pc, #156]	; (13a34 <mem_manage_fault+0x1d4>)
   13996:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1399c:	6293      	str	r3, [r2, #40]	; 0x28
   1399e:	e784      	b.n	138aa <mem_manage_fault+0x4a>
   139a0:	4b21      	ldr	r3, [pc, #132]	; (13a28 <mem_manage_fault+0x1c8>)
   139a2:	4a22      	ldr	r2, [pc, #136]	; (13a2c <mem_manage_fault+0x1cc>)
   139a4:	1a9b      	subs	r3, r3, r2
   139a6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   139a8:	f04f 0100 	mov.w	r1, #0
   139ac:	2201      	movs	r2, #1
   139ae:	f362 0102 	bfi	r1, r2, #0, #3
   139b2:	f36f 01c5 	bfc	r1, #3, #3
   139b6:	f363 118f 	bfi	r1, r3, #6, #10
   139ba:	4823      	ldr	r0, [pc, #140]	; (13a48 <mem_manage_fault+0x1e8>)
   139bc:	f7fd fffa 	bl	119b4 <log_0>
   139c0:	e778      	b.n	138b4 <mem_manage_fault+0x54>
   139c2:	4b19      	ldr	r3, [pc, #100]	; (13a28 <mem_manage_fault+0x1c8>)
   139c4:	4a19      	ldr	r2, [pc, #100]	; (13a2c <mem_manage_fault+0x1cc>)
   139c6:	1a9b      	subs	r3, r3, r2
   139c8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   139ca:	f04f 0100 	mov.w	r1, #0
   139ce:	2201      	movs	r2, #1
   139d0:	f362 0102 	bfi	r1, r2, #0, #3
   139d4:	f36f 01c5 	bfc	r1, #3, #3
   139d8:	f363 118f 	bfi	r1, r3, #6, #10
   139dc:	481b      	ldr	r0, [pc, #108]	; (13a4c <mem_manage_fault+0x1ec>)
   139de:	f7fd ffe9 	bl	119b4 <log_0>
   139e2:	e76d      	b.n	138c0 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   139e4:	4629      	mov	r1, r5
   139e6:	4638      	mov	r0, r7
   139e8:	f7ff fd22 	bl	13430 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   139ec:	4607      	mov	r7, r0
   139ee:	b9b8      	cbnz	r0, 13a20 <mem_manage_fault+0x1c0>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   139f0:	4b10      	ldr	r3, [pc, #64]	; (13a34 <mem_manage_fault+0x1d4>)
   139f2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   139f4:	f014 0410 	ands.w	r4, r4, #16
   139f8:	f43f af72 	beq.w	138e0 <mem_manage_fault+0x80>
   139fc:	4c14      	ldr	r4, [pc, #80]	; (13a50 <mem_manage_fault+0x1f0>)
   139fe:	f240 1349 	movw	r3, #329	; 0x149
   13a02:	4622      	mov	r2, r4
   13a04:	4913      	ldr	r1, [pc, #76]	; (13a54 <mem_manage_fault+0x1f4>)
   13a06:	4814      	ldr	r0, [pc, #80]	; (13a58 <mem_manage_fault+0x1f8>)
   13a08:	f011 ff11 	bl	2582e <printk>
   13a0c:	4813      	ldr	r0, [pc, #76]	; (13a5c <mem_manage_fault+0x1fc>)
   13a0e:	f011 ff0e 	bl	2582e <printk>
   13a12:	f240 1149 	movw	r1, #329	; 0x149
   13a16:	4620      	mov	r0, r4
   13a18:	f012 f98b 	bl	25d32 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13a1c:	463c      	mov	r4, r7
   13a1e:	e75f      	b.n	138e0 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13a20:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13a24:	2402      	movs	r4, #2
   13a26:	e75b      	b.n	138e0 <mem_manage_fault+0x80>
   13a28:	00029e08 	.word	0x00029e08
   13a2c:	00029d70 	.word	0x00029d70
   13a30:	0002ae04 	.word	0x0002ae04
   13a34:	e000ed00 	.word	0xe000ed00
   13a38:	0002ae1c 	.word	0x0002ae1c
   13a3c:	0002ad58 	.word	0x0002ad58
   13a40:	0002ae50 	.word	0x0002ae50
   13a44:	0002ae68 	.word	0x0002ae68
   13a48:	0002ae80 	.word	0x0002ae80
   13a4c:	0002add4 	.word	0x0002add4
   13a50:	0002aea0 	.word	0x0002aea0
   13a54:	0002aedc 	.word	0x0002aedc
   13a58:	00029ff8 	.word	0x00029ff8
   13a5c:	0002af28 	.word	0x0002af28

00013a60 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   13a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a62:	4606      	mov	r6, r0
   13a64:	460c      	mov	r4, r1
   13a66:	4b5b      	ldr	r3, [pc, #364]	; (13bd4 <hard_fault+0x174>)
   13a68:	4a5b      	ldr	r2, [pc, #364]	; (13bd8 <hard_fault+0x178>)
   13a6a:	1a9b      	subs	r3, r3, r2
   13a6c:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   13a6e:	f04f 0100 	mov.w	r1, #0
   13a72:	2201      	movs	r2, #1
   13a74:	f362 0102 	bfi	r1, r2, #0, #3
   13a78:	f36f 01c5 	bfc	r1, #3, #3
   13a7c:	f363 118f 	bfi	r1, r3, #6, #10
   13a80:	4856      	ldr	r0, [pc, #344]	; (13bdc <hard_fault+0x17c>)
   13a82:	f7fd ff97 	bl	119b4 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   13a86:	2300      	movs	r3, #0
   13a88:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13a8a:	4b55      	ldr	r3, [pc, #340]	; (13be0 <hard_fault+0x180>)
   13a8c:	6adf      	ldr	r7, [r3, #44]	; 0x2c
   13a8e:	f017 0702 	ands.w	r7, r7, #2
   13a92:	d135      	bne.n	13b00 <hard_fault+0xa0>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13a94:	4b52      	ldr	r3, [pc, #328]	; (13be0 <hard_fault+0x180>)
   13a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13a98:	2b00      	cmp	r3, #0
   13a9a:	db44      	blt.n	13b26 <hard_fault+0xc6>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13a9c:	4b50      	ldr	r3, [pc, #320]	; (13be0 <hard_fault+0x180>)
   13a9e:	6add      	ldr	r5, [r3, #44]	; 0x2c
   13aa0:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
   13aa4:	f000 8084 	beq.w	13bb0 <hard_fault+0x150>
   13aa8:	4b4a      	ldr	r3, [pc, #296]	; (13bd4 <hard_fault+0x174>)
   13aaa:	4a4b      	ldr	r2, [pc, #300]	; (13bd8 <hard_fault+0x178>)
   13aac:	1a9b      	subs	r3, r3, r2
   13aae:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   13ab0:	f04f 0100 	mov.w	r1, #0
   13ab4:	2201      	movs	r2, #1
   13ab6:	f362 0102 	bfi	r1, r2, #0, #3
   13aba:	f36f 01c5 	bfc	r1, #3, #3
   13abe:	f363 118f 	bfi	r1, r3, #6, #10
   13ac2:	4848      	ldr	r0, [pc, #288]	; (13be4 <hard_fault+0x184>)
   13ac4:	f7fd ff76 	bl	119b4 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   13ac8:	69b3      	ldr	r3, [r6, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   13aca:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13ace:	f64d 7302 	movw	r3, #57090	; 0xdf02
   13ad2:	429a      	cmp	r2, r3
   13ad4:	d039      	beq.n	13b4a <hard_fault+0xea>
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
   13ad6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13ada:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   13ade:	781b      	ldrb	r3, [r3, #0]
   13ae0:	2b00      	cmp	r3, #0
   13ae2:	d145      	bne.n	13b70 <hard_fault+0x110>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
   13ae4:	4b40      	ldr	r3, [pc, #256]	; (13be8 <hard_fault+0x188>)
   13ae6:	781b      	ldrb	r3, [r3, #0]
   13ae8:	2b00      	cmp	r3, #0
   13aea:	d148      	bne.n	13b7e <hard_fault+0x11e>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
   13aec:	4b3f      	ldr	r3, [pc, #252]	; (13bec <hard_fault+0x18c>)
   13aee:	881b      	ldrh	r3, [r3, #0]
   13af0:	b29b      	uxth	r3, r3
   13af2:	2b00      	cmp	r3, #0
   13af4:	d04a      	beq.n	13b8c <hard_fault+0x12c>
			reason = usage_fault(esf);
   13af6:	4630      	mov	r0, r6
   13af8:	f7ff fd0e 	bl	13518 <usage_fault>
   13afc:	4605      	mov	r5, r0
   13afe:	e010      	b.n	13b22 <hard_fault+0xc2>
   13b00:	4b34      	ldr	r3, [pc, #208]	; (13bd4 <hard_fault+0x174>)
   13b02:	4a35      	ldr	r2, [pc, #212]	; (13bd8 <hard_fault+0x178>)
   13b04:	1a9b      	subs	r3, r3, r2
   13b06:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   13b08:	f04f 0100 	mov.w	r1, #0
   13b0c:	2201      	movs	r2, #1
   13b0e:	f362 0102 	bfi	r1, r2, #0, #3
   13b12:	f36f 01c5 	bfc	r1, #3, #3
   13b16:	f363 118f 	bfi	r1, r3, #6, #10
   13b1a:	4835      	ldr	r0, [pc, #212]	; (13bf0 <hard_fault+0x190>)
   13b1c:	f7fd ff4a 	bl	119b4 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13b20:	2500      	movs	r5, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   13b22:	4628      	mov	r0, r5
   13b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b26:	4b2b      	ldr	r3, [pc, #172]	; (13bd4 <hard_fault+0x174>)
   13b28:	4a2b      	ldr	r2, [pc, #172]	; (13bd8 <hard_fault+0x178>)
   13b2a:	1a9b      	subs	r3, r3, r2
   13b2c:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   13b2e:	f04f 0100 	mov.w	r1, #0
   13b32:	2201      	movs	r2, #1
   13b34:	f362 0102 	bfi	r1, r2, #0, #3
   13b38:	f36f 01c5 	bfc	r1, #3, #3
   13b3c:	f363 118f 	bfi	r1, r3, #6, #10
   13b40:	482c      	ldr	r0, [pc, #176]	; (13bf4 <hard_fault+0x194>)
   13b42:	f7fd ff37 	bl	119b4 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13b46:	463d      	mov	r5, r7
   13b48:	e7eb      	b.n	13b22 <hard_fault+0xc2>
   13b4a:	4b22      	ldr	r3, [pc, #136]	; (13bd4 <hard_fault+0x174>)
   13b4c:	4a22      	ldr	r2, [pc, #136]	; (13bd8 <hard_fault+0x178>)
   13b4e:	1a9b      	subs	r3, r3, r2
   13b50:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   13b52:	f04f 0200 	mov.w	r2, #0
   13b56:	2101      	movs	r1, #1
   13b58:	f361 0202 	bfi	r2, r1, #0, #3
   13b5c:	f36f 02c5 	bfc	r2, #3, #3
   13b60:	f363 128f 	bfi	r2, r3, #6, #10
   13b64:	6831      	ldr	r1, [r6, #0]
   13b66:	4824      	ldr	r0, [pc, #144]	; (13bf8 <hard_fault+0x198>)
   13b68:	f7fd ff54 	bl	11a14 <log_1>
			reason = esf->basic.r0;
   13b6c:	6835      	ldr	r5, [r6, #0]
   13b6e:	e7d8      	b.n	13b22 <hard_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
   13b70:	4622      	mov	r2, r4
   13b72:	2101      	movs	r1, #1
   13b74:	4630      	mov	r0, r6
   13b76:	f7ff fe73 	bl	13860 <mem_manage_fault>
   13b7a:	4605      	mov	r5, r0
   13b7c:	e7d1      	b.n	13b22 <hard_fault+0xc2>
			reason = bus_fault(esf, 1, recoverable);
   13b7e:	4622      	mov	r2, r4
   13b80:	2101      	movs	r1, #1
   13b82:	4630      	mov	r0, r6
   13b84:	f7ff fd94 	bl	136b0 <bus_fault>
   13b88:	4605      	mov	r5, r0
   13b8a:	e7ca      	b.n	13b22 <hard_fault+0xc2>
			__ASSERT(0,
   13b8c:	4c1b      	ldr	r4, [pc, #108]	; (13bfc <hard_fault+0x19c>)
   13b8e:	f240 23c3 	movw	r3, #707	; 0x2c3
   13b92:	4622      	mov	r2, r4
   13b94:	491a      	ldr	r1, [pc, #104]	; (13c00 <hard_fault+0x1a0>)
   13b96:	481b      	ldr	r0, [pc, #108]	; (13c04 <hard_fault+0x1a4>)
   13b98:	f011 fe49 	bl	2582e <printk>
   13b9c:	481a      	ldr	r0, [pc, #104]	; (13c08 <hard_fault+0x1a8>)
   13b9e:	f011 fe46 	bl	2582e <printk>
   13ba2:	f240 21c3 	movw	r1, #707	; 0x2c3
   13ba6:	4620      	mov	r0, r4
   13ba8:	f012 f8c3 	bl	25d32 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13bac:	463d      	mov	r5, r7
   13bae:	e7b8      	b.n	13b22 <hard_fault+0xc2>
		__ASSERT(0,
   13bb0:	4c12      	ldr	r4, [pc, #72]	; (13bfc <hard_fault+0x19c>)
   13bb2:	f240 23c7 	movw	r3, #711	; 0x2c7
   13bb6:	4622      	mov	r2, r4
   13bb8:	4911      	ldr	r1, [pc, #68]	; (13c00 <hard_fault+0x1a0>)
   13bba:	4812      	ldr	r0, [pc, #72]	; (13c04 <hard_fault+0x1a4>)
   13bbc:	f011 fe37 	bl	2582e <printk>
   13bc0:	4812      	ldr	r0, [pc, #72]	; (13c0c <hard_fault+0x1ac>)
   13bc2:	f011 fe34 	bl	2582e <printk>
   13bc6:	f240 21c7 	movw	r1, #711	; 0x2c7
   13bca:	4620      	mov	r0, r4
   13bcc:	f012 f8b1 	bl	25d32 <assert_post_action>
	return reason;
   13bd0:	e7a7      	b.n	13b22 <hard_fault+0xc2>
   13bd2:	bf00      	nop
   13bd4:	00029e08 	.word	0x00029e08
   13bd8:	00029d70 	.word	0x00029d70
   13bdc:	0002af4c 	.word	0x0002af4c
   13be0:	e000ed00 	.word	0xe000ed00
   13be4:	0002af98 	.word	0x0002af98
   13be8:	e000ed29 	.word	0xe000ed29
   13bec:	e000ed2a 	.word	0xe000ed2a
   13bf0:	0002af64 	.word	0x0002af64
   13bf4:	0002af88 	.word	0x0002af88
   13bf8:	0002afb8 	.word	0x0002afb8
   13bfc:	0002aea0 	.word	0x0002aea0
   13c00:	0002dc18 	.word	0x0002dc18
   13c04:	00029ff8 	.word	0x00029ff8
   13c08:	0002afd4 	.word	0x0002afd4
   13c0c:	0002aff8 	.word	0x0002aff8

00013c10 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   13c10:	b508      	push	{r3, lr}
   13c12:	460a      	mov	r2, r1
   13c14:	480b      	ldr	r0, [pc, #44]	; (13c44 <reserved_exception+0x34>)
   13c16:	4b0c      	ldr	r3, [pc, #48]	; (13c48 <reserved_exception+0x38>)
   13c18:	1ac0      	subs	r0, r0, r3
   13c1a:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   13c1c:	f04f 0300 	mov.w	r3, #0
   13c20:	2101      	movs	r1, #1
   13c22:	f361 0302 	bfi	r3, r1, #0, #3
   13c26:	f36f 03c5 	bfc	r3, #3, #3
   13c2a:	f360 138f 	bfi	r3, r0, #6, #10
   13c2e:	2a0f      	cmp	r2, #15
   13c30:	dc05      	bgt.n	13c3e <reserved_exception+0x2e>
   13c32:	4906      	ldr	r1, [pc, #24]	; (13c4c <reserved_exception+0x3c>)
   13c34:	3a10      	subs	r2, #16
   13c36:	4806      	ldr	r0, [pc, #24]	; (13c50 <reserved_exception+0x40>)
   13c38:	f7fd ff22 	bl	11a80 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   13c3c:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   13c3e:	4905      	ldr	r1, [pc, #20]	; (13c54 <reserved_exception+0x44>)
   13c40:	e7f8      	b.n	13c34 <reserved_exception+0x24>
   13c42:	bf00      	nop
   13c44:	00029e08 	.word	0x00029e08
   13c48:	00029d70 	.word	0x00029d70
   13c4c:	0002b028 	.word	0x0002b028
   13c50:	0002b05c 	.word	0x0002b05c
   13c54:	0002b040 	.word	0x0002b040

00013c58 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c5a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13c5c:	4b34      	ldr	r3, [pc, #208]	; (13d30 <z_arm_fault+0xd8>)
   13c5e:	685d      	ldr	r5, [r3, #4]
   13c60:	f3c5 0508 	ubfx	r5, r5, #0, #9
   13c64:	2300      	movs	r3, #0
   13c66:	f383 8811 	msr	BASEPRI, r3
   13c6a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13c6e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13c72:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13c76:	d12b      	bne.n	13cd0 <z_arm_fault+0x78>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13c78:	f002 030c 	and.w	r3, r2, #12
   13c7c:	2b08      	cmp	r3, #8
   13c7e:	d011      	beq.n	13ca4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13c80:	f012 0f08 	tst.w	r2, #8
   13c84:	d021      	beq.n	13cca <z_arm_fault+0x72>
			ptr_esf =  (z_arch_esf_t *)psp;
   13c86:	460c      	mov	r4, r1
	*nested_exc = false;
   13c88:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   13c8a:	b324      	cbz	r4, 13cd6 <z_arm_fault+0x7e>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   13c8c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   13c90:	4629      	mov	r1, r5
   13c92:	4620      	mov	r0, r4
   13c94:	f012 fcef 	bl	26676 <fault_handle>
   13c98:	4605      	mov	r5, r0
	if (recoverable) {
   13c9a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   13c9e:	b35b      	cbz	r3, 13cf8 <z_arm_fault+0xa0>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   13ca0:	b00b      	add	sp, #44	; 0x2c
   13ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ca4:	4b23      	ldr	r3, [pc, #140]	; (13d34 <z_arm_fault+0xdc>)
   13ca6:	4a24      	ldr	r2, [pc, #144]	; (13d38 <z_arm_fault+0xe0>)
   13ca8:	1a9b      	subs	r3, r3, r2
   13caa:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   13cac:	f04f 0100 	mov.w	r1, #0
   13cb0:	2201      	movs	r2, #1
   13cb2:	f362 0102 	bfi	r1, r2, #0, #3
   13cb6:	f36f 01c5 	bfc	r1, #3, #3
   13cba:	f363 118f 	bfi	r1, r3, #6, #10
   13cbe:	481f      	ldr	r0, [pc, #124]	; (13d3c <z_arm_fault+0xe4>)
   13cc0:	f7fd fe78 	bl	119b4 <log_0>
	*nested_exc = false;
   13cc4:	2600      	movs	r6, #0
		return NULL;
   13cc6:	4634      	mov	r4, r6
   13cc8:	e7df      	b.n	13c8a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   13cca:	4604      	mov	r4, r0
			*nested_exc = true;
   13ccc:	2601      	movs	r6, #1
   13cce:	e7dc      	b.n	13c8a <z_arm_fault+0x32>
	*nested_exc = false;
   13cd0:	2600      	movs	r6, #0
		return NULL;
   13cd2:	4634      	mov	r4, r6
   13cd4:	e7d9      	b.n	13c8a <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
   13cd6:	4f1a      	ldr	r7, [pc, #104]	; (13d40 <z_arm_fault+0xe8>)
   13cd8:	f240 33f2 	movw	r3, #1010	; 0x3f2
   13cdc:	463a      	mov	r2, r7
   13cde:	4919      	ldr	r1, [pc, #100]	; (13d44 <z_arm_fault+0xec>)
   13ce0:	4819      	ldr	r0, [pc, #100]	; (13d48 <z_arm_fault+0xf0>)
   13ce2:	f011 fda4 	bl	2582e <printk>
   13ce6:	4819      	ldr	r0, [pc, #100]	; (13d4c <z_arm_fault+0xf4>)
   13ce8:	f011 fda1 	bl	2582e <printk>
   13cec:	f240 31f2 	movw	r1, #1010	; 0x3f2
   13cf0:	4638      	mov	r0, r7
   13cf2:	f012 f81e 	bl	25d32 <assert_post_action>
   13cf6:	e7c9      	b.n	13c8c <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13cf8:	2220      	movs	r2, #32
   13cfa:	4621      	mov	r1, r4
   13cfc:	a801      	add	r0, sp, #4
   13cfe:	f012 fd7b 	bl	267f8 <memcpy>
	if (nested_exc) {
   13d02:	b14e      	cbz	r6, 13d18 <z_arm_fault+0xc0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13d04:	9b08      	ldr	r3, [sp, #32]
   13d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13d0a:	b95a      	cbnz	r2, 13d24 <z_arm_fault+0xcc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13d0c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13d10:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   13d14:	9308      	str	r3, [sp, #32]
   13d16:	e005      	b.n	13d24 <z_arm_fault+0xcc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13d18:	9b08      	ldr	r3, [sp, #32]
   13d1a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13d1e:	f023 0301 	bic.w	r3, r3, #1
   13d22:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   13d24:	a901      	add	r1, sp, #4
   13d26:	4628      	mov	r0, r5
   13d28:	f012 fc85 	bl	26636 <z_arm_fatal_error>
   13d2c:	e7b8      	b.n	13ca0 <z_arm_fault+0x48>
   13d2e:	bf00      	nop
   13d30:	e000ed00 	.word	0xe000ed00
   13d34:	00029e08 	.word	0x00029e08
   13d38:	00029d70 	.word	0x00029d70
   13d3c:	0002b070 	.word	0x0002b070
   13d40:	0002aea0 	.word	0x0002aea0
   13d44:	0002b09c 	.word	0x0002b09c
   13d48:	00029ff8 	.word	0x00029ff8
   13d4c:	0002b0b0 	.word	0x0002b0b0

00013d50 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13d50:	4a02      	ldr	r2, [pc, #8]	; (13d5c <z_arm_fault_init+0xc>)
   13d52:	6953      	ldr	r3, [r2, #20]
   13d54:	f043 0310 	orr.w	r3, r3, #16
   13d58:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13d5a:	4770      	bx	lr
   13d5c:	e000ed00 	.word	0xe000ed00

00013d60 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13d60:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13d64:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13d68:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13d6a:	4672      	mov	r2, lr
	bl z_arm_fault
   13d6c:	f7ff ff74 	bl	13c58 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13d70:	bd01      	pop	{r0, pc}
   13d72:	bf00      	nop

00013d74 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13d74:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13d76:	e006      	b.n	13d86 <z_arm_interrupt_init+0x12>
   13d78:	f002 010f 	and.w	r1, r2, #15
   13d7c:	4b09      	ldr	r3, [pc, #36]	; (13da4 <z_arm_interrupt_init+0x30>)
   13d7e:	440b      	add	r3, r1
   13d80:	2140      	movs	r1, #64	; 0x40
   13d82:	7619      	strb	r1, [r3, #24]
   13d84:	3201      	adds	r2, #1
   13d86:	2a2f      	cmp	r2, #47	; 0x2f
   13d88:	dc0a      	bgt.n	13da0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   13d8a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   13d8c:	2b00      	cmp	r3, #0
   13d8e:	dbf3      	blt.n	13d78 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d90:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13d94:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13d98:	2140      	movs	r1, #64	; 0x40
   13d9a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13d9e:	e7f1      	b.n	13d84 <z_arm_interrupt_init+0x10>
	}
}
   13da0:	4770      	bx	lr
   13da2:	bf00      	nop
   13da4:	e000ecfc 	.word	0xe000ecfc

00013da8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13da8:	2000      	movs	r0, #0
    msr CONTROL, r0
   13daa:	f380 8814 	msr	CONTROL, r0
    isb
   13dae:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13db2:	f015 fe5d 	bl	29a70 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13db6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13db8:	490d      	ldr	r1, [pc, #52]	; (13df0 <__start+0x48>)
    str r0, [r1]
   13dba:	6008      	str	r0, [r1, #0]
    dsb
   13dbc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13dc0:	480c      	ldr	r0, [pc, #48]	; (13df4 <__start+0x4c>)
    msr msp, r0
   13dc2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13dc6:	f000 f829 	bl	13e1c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13dca:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13dcc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13dd0:	4809      	ldr	r0, [pc, #36]	; (13df8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13dd2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   13dd6:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13dd8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13ddc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13de0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13de2:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13de4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13de8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13dec:	f7ff fa8c 	bl	13308 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   13df0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13df4:	200056c0 	.word	0x200056c0
    ldr r0, =z_interrupt_stacks
   13df8:	20005840 	.word	0x20005840

00013dfc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13dfc:	4b06      	ldr	r3, [pc, #24]	; (13e18 <z_arm_clear_arm_mpu_config+0x1c>)
   13dfe:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   13e00:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   13e04:	2300      	movs	r3, #0
   13e06:	4283      	cmp	r3, r0
   13e08:	da05      	bge.n	13e16 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   13e0a:	4a03      	ldr	r2, [pc, #12]	; (13e18 <z_arm_clear_arm_mpu_config+0x1c>)
   13e0c:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   13e0e:	2100      	movs	r1, #0
   13e10:	6111      	str	r1, [r2, #16]
   13e12:	3301      	adds	r3, #1
   13e14:	e7f7      	b.n	13e06 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   13e16:	4770      	bx	lr
   13e18:	e000ed90 	.word	0xe000ed90

00013e1c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13e1c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13e1e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13e20:	2400      	movs	r4, #0
   13e22:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13e26:	f7ff ffe9 	bl	13dfc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13e2a:	4623      	mov	r3, r4
   13e2c:	e008      	b.n	13e40 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   13e2e:	f103 0120 	add.w	r1, r3, #32
   13e32:	4a0e      	ldr	r2, [pc, #56]	; (13e6c <z_arm_init_arch_hw_at_boot+0x50>)
   13e34:	f04f 30ff 	mov.w	r0, #4294967295
   13e38:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13e3c:	3301      	adds	r3, #1
   13e3e:	b2db      	uxtb	r3, r3
   13e40:	2b07      	cmp	r3, #7
   13e42:	d9f4      	bls.n	13e2e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13e44:	2300      	movs	r3, #0
   13e46:	e008      	b.n	13e5a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13e48:	f103 0160 	add.w	r1, r3, #96	; 0x60
   13e4c:	4a07      	ldr	r2, [pc, #28]	; (13e6c <z_arm_init_arch_hw_at_boot+0x50>)
   13e4e:	f04f 30ff 	mov.w	r0, #4294967295
   13e52:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13e56:	3301      	adds	r3, #1
   13e58:	b2db      	uxtb	r3, r3
   13e5a:	2b07      	cmp	r3, #7
   13e5c:	d9f4      	bls.n	13e48 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   13e5e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13e60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13e64:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13e68:	bd10      	pop	{r4, pc}
   13e6a:	bf00      	nop
   13e6c:	e000e100 	.word	0xe000e100

00013e70 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13e70:	b508      	push	{r3, lr}
	if (_current == thread) {
   13e72:	4b08      	ldr	r3, [pc, #32]	; (13e94 <z_impl_k_thread_abort+0x24>)
   13e74:	689b      	ldr	r3, [r3, #8]
   13e76:	4283      	cmp	r3, r0
   13e78:	d002      	beq.n	13e80 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   13e7a:	f00d fb0f 	bl	2149c <z_thread_abort>
}
   13e7e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13e80:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13e84:	2b00      	cmp	r3, #0
   13e86:	d0f8      	beq.n	13e7a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13e88:	4a03      	ldr	r2, [pc, #12]	; (13e98 <z_impl_k_thread_abort+0x28>)
   13e8a:	6853      	ldr	r3, [r2, #4]
   13e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13e90:	6053      	str	r3, [r2, #4]
   13e92:	e7f2      	b.n	13e7a <z_impl_k_thread_abort+0xa>
   13e94:	20002d18 	.word	0x20002d18
   13e98:	e000ed00 	.word	0xe000ed00

00013e9c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13e9c:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13e9e:	4b03      	ldr	r3, [pc, #12]	; (13eac <z_arm_configure_static_mpu_regions+0x10>)
   13ea0:	4a03      	ldr	r2, [pc, #12]	; (13eb0 <z_arm_configure_static_mpu_regions+0x14>)
   13ea2:	2101      	movs	r1, #1
   13ea4:	4803      	ldr	r0, [pc, #12]	; (13eb4 <z_arm_configure_static_mpu_regions+0x18>)
   13ea6:	f000 f8bf 	bl	14028 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13eaa:	bd08      	pop	{r3, pc}
   13eac:	20040000 	.word	0x20040000
   13eb0:	20000000 	.word	0x20000000
   13eb4:	0002b0f4 	.word	0x0002b0f4

00013eb8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   13eb8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13eba:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   13ebe:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13ec0:	4804      	ldr	r0, [pc, #16]	; (13ed4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13ec2:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   13ec4:	2320      	movs	r3, #32
   13ec6:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13ec8:	4b03      	ldr	r3, [pc, #12]	; (13ed8 <z_arm_configure_dynamic_mpu_regions+0x20>)
   13eca:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13ecc:	2101      	movs	r1, #1
   13ece:	f000 f8cd 	bl	1406c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   13ed2:	bd08      	pop	{r3, pc}
   13ed4:	200024c0 	.word	0x200024c0
   13ed8:	150b0000 	.word	0x150b0000

00013edc <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   13edc:	4a06      	ldr	r2, [pc, #24]	; (13ef8 <region_init+0x1c>)
   13ede:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13ee0:	680b      	ldr	r3, [r1, #0]
   13ee2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13ee6:	4303      	orrs	r3, r0
   13ee8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13eec:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13eee:	688b      	ldr	r3, [r1, #8]
   13ef0:	f043 0301 	orr.w	r3, r3, #1
   13ef4:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   13ef6:	4770      	bx	lr
   13ef8:	e000ed90 	.word	0xe000ed90

00013efc <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   13efc:	b510      	push	{r4, lr}
   13efe:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   13f00:	2807      	cmp	r0, #7
   13f02:	d803      	bhi.n	13f0c <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   13f04:	f7ff ffea 	bl	13edc <region_init>

	return index;
   13f08:	4620      	mov	r0, r4
}
   13f0a:	bd10      	pop	{r4, pc}
   13f0c:	4b09      	ldr	r3, [pc, #36]	; (13f34 <region_allocate_and_init+0x38>)
   13f0e:	4a0a      	ldr	r2, [pc, #40]	; (13f38 <region_allocate_and_init+0x3c>)
   13f10:	1a9b      	subs	r3, r3, r2
   13f12:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13f14:	f04f 0200 	mov.w	r2, #0
   13f18:	2101      	movs	r1, #1
   13f1a:	f361 0202 	bfi	r2, r1, #0, #3
   13f1e:	f36f 02c5 	bfc	r2, #3, #3
   13f22:	f363 128f 	bfi	r2, r3, #6, #10
   13f26:	4601      	mov	r1, r0
   13f28:	4804      	ldr	r0, [pc, #16]	; (13f3c <region_allocate_and_init+0x40>)
   13f2a:	f7fd fd73 	bl	11a14 <log_1>
		return -EINVAL;
   13f2e:	f06f 0015 	mvn.w	r0, #21
   13f32:	e7ea      	b.n	13f0a <region_allocate_and_init+0xe>
   13f34:	00029df8 	.word	0x00029df8
   13f38:	00029d70 	.word	0x00029d70
   13f3c:	0002b100 	.word	0x0002b100

00013f40 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13f44:	4680      	mov	r8, r0
   13f46:	460f      	mov	r7, r1
   13f48:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   13f4a:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   13f4c:	2400      	movs	r4, #0
   13f4e:	e009      	b.n	13f64 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13f50:	4629      	mov	r1, r5
   13f52:	b2f0      	uxtb	r0, r6
   13f54:	f012 fbc5 	bl	266e2 <mpu_configure_region>
   13f58:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   13f5a:	f110 0f16 	cmn.w	r0, #22
   13f5e:	d025      	beq.n	13fac <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   13f60:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   13f62:	3401      	adds	r4, #1
   13f64:	42bc      	cmp	r4, r7
   13f66:	da21      	bge.n	13fac <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
   13f68:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   13f6c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   13f70:	686a      	ldr	r2, [r5, #4]
   13f72:	2a00      	cmp	r2, #0
   13f74:	d0f5      	beq.n	13f62 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   13f76:	f1ba 0f00 	cmp.w	sl, #0
   13f7a:	d0e9      	beq.n	13f50 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   13f7c:	4628      	mov	r0, r5
   13f7e:	f012 fb9f 	bl	266c0 <mpu_partition_is_valid>
		if (do_sanity_check &&
   13f82:	2800      	cmp	r0, #0
   13f84:	d1e4      	bne.n	13f50 <mpu_configure_regions+0x10>
   13f86:	4b0b      	ldr	r3, [pc, #44]	; (13fb4 <mpu_configure_regions+0x74>)
   13f88:	4a0b      	ldr	r2, [pc, #44]	; (13fb8 <mpu_configure_regions+0x78>)
   13f8a:	1a9b      	subs	r3, r3, r2
   13f8c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
   13f8e:	f04f 0200 	mov.w	r2, #0
   13f92:	2101      	movs	r1, #1
   13f94:	f361 0202 	bfi	r2, r1, #0, #3
   13f98:	f36f 02c5 	bfc	r2, #3, #3
   13f9c:	f363 128f 	bfi	r2, r3, #6, #10
   13fa0:	4621      	mov	r1, r4
   13fa2:	4806      	ldr	r0, [pc, #24]	; (13fbc <mpu_configure_regions+0x7c>)
   13fa4:	f7fd fd36 	bl	11a14 <log_1>
			return -EINVAL;
   13fa8:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   13fac:	4630      	mov	r0, r6
   13fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13fb2:	bf00      	nop
   13fb4:	00029df8 	.word	0x00029df8
   13fb8:	00029d70 	.word	0x00029d70
   13fbc:	0002b128 	.word	0x0002b128

00013fc0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   13fc0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   13fc2:	4c03      	ldr	r4, [pc, #12]	; (13fd0 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13fc4:	2301      	movs	r3, #1
   13fc6:	7822      	ldrb	r2, [r4, #0]
   13fc8:	f7ff ffba 	bl	13f40 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13fcc:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   13fce:	bd10      	pop	{r4, pc}
   13fd0:	20003759 	.word	0x20003759

00013fd4 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13fd4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13fd6:	2300      	movs	r3, #0
   13fd8:	4a08      	ldr	r2, [pc, #32]	; (13ffc <mpu_configure_dynamic_mpu_regions+0x28>)
   13fda:	7812      	ldrb	r2, [r2, #0]
   13fdc:	f7ff ffb0 	bl	13f40 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13fe0:	f110 0f16 	cmn.w	r0, #22
   13fe4:	d008      	beq.n	13ff8 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13fe6:	4603      	mov	r3, r0
   13fe8:	2b07      	cmp	r3, #7
   13fea:	dc05      	bgt.n	13ff8 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   13fec:	4a04      	ldr	r2, [pc, #16]	; (14000 <mpu_configure_dynamic_mpu_regions+0x2c>)
   13fee:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   13ff0:	2100      	movs	r1, #0
   13ff2:	6111      	str	r1, [r2, #16]
   13ff4:	3301      	adds	r3, #1
   13ff6:	e7f7      	b.n	13fe8 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   13ff8:	bd08      	pop	{r3, pc}
   13ffa:	bf00      	nop
   13ffc:	20003759 	.word	0x20003759
   14000:	e000ed90 	.word	0xe000ed90

00014004 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14004:	4b03      	ldr	r3, [pc, #12]	; (14014 <arm_core_mpu_enable+0x10>)
   14006:	2205      	movs	r2, #5
   14008:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1400a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1400e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14012:	4770      	bx	lr
   14014:	e000ed90 	.word	0xe000ed90

00014018 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14018:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1401c:	4b01      	ldr	r3, [pc, #4]	; (14024 <arm_core_mpu_disable+0xc>)
   1401e:	2200      	movs	r2, #0
   14020:	605a      	str	r2, [r3, #4]
}
   14022:	4770      	bx	lr
   14024:	e000ed90 	.word	0xe000ed90

00014028 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14028:	b538      	push	{r3, r4, r5, lr}
   1402a:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1402c:	f7ff ffc8 	bl	13fc0 <mpu_configure_static_mpu_regions>
   14030:	f110 0f16 	cmn.w	r0, #22
   14034:	d000      	beq.n	14038 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   14036:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14038:	4d08      	ldr	r5, [pc, #32]	; (1405c <arm_core_mpu_configure_static_mpu_regions+0x34>)
   1403a:	f240 1311 	movw	r3, #273	; 0x111
   1403e:	462a      	mov	r2, r5
   14040:	4907      	ldr	r1, [pc, #28]	; (14060 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   14042:	4808      	ldr	r0, [pc, #32]	; (14064 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   14044:	f011 fbf3 	bl	2582e <printk>
   14048:	4621      	mov	r1, r4
   1404a:	4807      	ldr	r0, [pc, #28]	; (14068 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1404c:	f011 fbef 	bl	2582e <printk>
   14050:	f240 1111 	movw	r1, #273	; 0x111
   14054:	4628      	mov	r0, r5
   14056:	f011 fe6c 	bl	25d32 <assert_post_action>
}
   1405a:	e7ec      	b.n	14036 <arm_core_mpu_configure_static_mpu_regions+0xe>
   1405c:	0002b14c 	.word	0x0002b14c
   14060:	0002dc18 	.word	0x0002dc18
   14064:	00029ff8 	.word	0x00029ff8
   14068:	0002b184 	.word	0x0002b184

0001406c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   1406c:	b538      	push	{r3, r4, r5, lr}
   1406e:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   14070:	f7ff ffb0 	bl	13fd4 <mpu_configure_dynamic_mpu_regions>
   14074:	f110 0f16 	cmn.w	r0, #22
   14078:	d000      	beq.n	1407c <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   1407a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   1407c:	4d08      	ldr	r5, [pc, #32]	; (140a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
   1407e:	f44f 7398 	mov.w	r3, #304	; 0x130
   14082:	462a      	mov	r2, r5
   14084:	4907      	ldr	r1, [pc, #28]	; (140a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
   14086:	4808      	ldr	r0, [pc, #32]	; (140a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
   14088:	f011 fbd1 	bl	2582e <printk>
   1408c:	4621      	mov	r1, r4
   1408e:	4807      	ldr	r0, [pc, #28]	; (140ac <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
   14090:	f011 fbcd 	bl	2582e <printk>
   14094:	f44f 7198 	mov.w	r1, #304	; 0x130
   14098:	4628      	mov	r0, r5
   1409a:	f011 fe4a 	bl	25d32 <assert_post_action>
}
   1409e:	e7ec      	b.n	1407a <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
   140a0:	0002b14c 	.word	0x0002b14c
   140a4:	0002dc18 	.word	0x0002dc18
   140a8:	00029ff8 	.word	0x00029ff8
   140ac:	0002b1b0 	.word	0x0002b1b0

000140b0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   140b0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   140b2:	4b23      	ldr	r3, [pc, #140]	; (14140 <z_arm_mpu_init+0x90>)
   140b4:	681d      	ldr	r5, [r3, #0]
   140b6:	2d08      	cmp	r5, #8
   140b8:	d803      	bhi.n	140c2 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   140ba:	f7ff ffad 	bl	14018 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   140be:	2400      	movs	r4, #0
   140c0:	e01e      	b.n	14100 <z_arm_mpu_init+0x50>
		__ASSERT(0,
   140c2:	4c20      	ldr	r4, [pc, #128]	; (14144 <z_arm_mpu_init+0x94>)
   140c4:	f44f 73a4 	mov.w	r3, #328	; 0x148
   140c8:	4622      	mov	r2, r4
   140ca:	491f      	ldr	r1, [pc, #124]	; (14148 <z_arm_mpu_init+0x98>)
   140cc:	481f      	ldr	r0, [pc, #124]	; (1414c <z_arm_mpu_init+0x9c>)
   140ce:	f011 fbae 	bl	2582e <printk>
   140d2:	2208      	movs	r2, #8
   140d4:	4629      	mov	r1, r5
   140d6:	481e      	ldr	r0, [pc, #120]	; (14150 <z_arm_mpu_init+0xa0>)
   140d8:	f011 fba9 	bl	2582e <printk>
   140dc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   140e0:	4620      	mov	r0, r4
   140e2:	f011 fe26 	bl	25d32 <assert_post_action>
		return -1;
   140e6:	f04f 30ff 	mov.w	r0, #4294967295
   140ea:	e016      	b.n	1411a <z_arm_mpu_init+0x6a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   140ec:	4b14      	ldr	r3, [pc, #80]	; (14140 <z_arm_mpu_init+0x90>)
   140ee:	6859      	ldr	r1, [r3, #4]
   140f0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   140f4:	0093      	lsls	r3, r2, #2
   140f6:	4419      	add	r1, r3
   140f8:	4620      	mov	r0, r4
   140fa:	f7ff feef 	bl	13edc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   140fe:	3401      	adds	r4, #1
   14100:	42a5      	cmp	r5, r4
   14102:	d8f3      	bhi.n	140ec <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   14104:	4b13      	ldr	r3, [pc, #76]	; (14154 <z_arm_mpu_init+0xa4>)
   14106:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   14108:	f7ff ff7c 	bl	14004 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   1410c:	4b12      	ldr	r3, [pc, #72]	; (14158 <z_arm_mpu_init+0xa8>)
   1410e:	681b      	ldr	r3, [r3, #0]
   14110:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14114:	2b08      	cmp	r3, #8
   14116:	d101      	bne.n	1411c <z_arm_mpu_init+0x6c>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   14118:	2000      	movs	r0, #0
}
   1411a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
   1411c:	4c09      	ldr	r4, [pc, #36]	; (14144 <z_arm_mpu_init+0x94>)
   1411e:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   14122:	4622      	mov	r2, r4
   14124:	490d      	ldr	r1, [pc, #52]	; (1415c <z_arm_mpu_init+0xac>)
   14126:	4809      	ldr	r0, [pc, #36]	; (1414c <z_arm_mpu_init+0x9c>)
   14128:	f011 fb81 	bl	2582e <printk>
   1412c:	480c      	ldr	r0, [pc, #48]	; (14160 <z_arm_mpu_init+0xb0>)
   1412e:	f011 fb7e 	bl	2582e <printk>
   14132:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   14136:	4620      	mov	r0, r4
   14138:	f011 fdfb 	bl	25d32 <assert_post_action>
	return 0;
   1413c:	2000      	movs	r0, #0
   1413e:	e7ec      	b.n	1411a <z_arm_mpu_init+0x6a>
   14140:	0002b298 	.word	0x0002b298
   14144:	0002b14c 	.word	0x0002b14c
   14148:	0002dc18 	.word	0x0002dc18
   1414c:	00029ff8 	.word	0x00029ff8
   14150:	0002b1e0 	.word	0x0002b1e0
   14154:	20003759 	.word	0x20003759
   14158:	e000ed90 	.word	0xe000ed90
   1415c:	0002b214 	.word	0x0002b214
   14160:	0002b264 	.word	0x0002b264

00014164 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14164:	4b01      	ldr	r3, [pc, #4]	; (1416c <__stdout_hook_install+0x8>)
   14166:	6018      	str	r0, [r3, #0]
}
   14168:	4770      	bx	lr
   1416a:	bf00      	nop
   1416c:	20000470 	.word	0x20000470

00014170 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14170:	4b06      	ldr	r3, [pc, #24]	; (1418c <nrf52_errata_197+0x1c>)
   14172:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14174:	4a06      	ldr	r2, [pc, #24]	; (14190 <nrf52_errata_197+0x20>)
   14176:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   14178:	2b08      	cmp	r3, #8
   1417a:	d001      	beq.n	14180 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1417c:	2000      	movs	r0, #0
   1417e:	4770      	bx	lr
                switch(var2)
   14180:	2a02      	cmp	r2, #2
   14182:	d001      	beq.n	14188 <nrf52_errata_197+0x18>
                        return false;
   14184:	2000      	movs	r0, #0
   14186:	4770      	bx	lr
                        return true;
   14188:	2001      	movs	r0, #1
    #endif
}
   1418a:	4770      	bx	lr
   1418c:	10000130 	.word	0x10000130
   14190:	10000134 	.word	0x10000134

00014194 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   14194:	b510      	push	{r4, lr}
	__asm__ volatile(
   14196:	f04f 0340 	mov.w	r3, #64	; 0x40
   1419a:	f3ef 8411 	mrs	r4, BASEPRI
   1419e:	f383 8812 	msr	BASEPRI_MAX, r3
   141a2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   141a6:	2301      	movs	r3, #1
   141a8:	4a0b      	ldr	r2, [pc, #44]	; (141d8 <nordicsemi_nrf52_init+0x44>)
   141aa:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   141ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   141b2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   141b6:	f7ff ffdb 	bl	14170 <nrf52_errata_197>
   141ba:	b110      	cbz	r0, 141c2 <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   141bc:	4b07      	ldr	r3, [pc, #28]	; (141dc <nordicsemi_nrf52_init+0x48>)
   141be:	2201      	movs	r2, #1
   141c0:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   141c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   141c6:	2201      	movs	r2, #1
   141c8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   141cc:	f384 8811 	msr	BASEPRI, r4
   141d0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   141d4:	2000      	movs	r0, #0
   141d6:	bd10      	pop	{r4, pc}
   141d8:	4001e000 	.word	0x4001e000
   141dc:	40000638 	.word	0x40000638

000141e0 <sys_arch_reboot>:
    *p_gpregret = val;
   141e0:	b2c0      	uxtb	r0, r0
   141e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   141e6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   141ea:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   141ee:	4905      	ldr	r1, [pc, #20]	; (14204 <sys_arch_reboot+0x24>)
   141f0:	68ca      	ldr	r2, [r1, #12]
   141f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   141f6:	4b04      	ldr	r3, [pc, #16]	; (14208 <sys_arch_reboot+0x28>)
   141f8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   141fa:	60cb      	str	r3, [r1, #12]
   141fc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14200:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14202:	e7fd      	b.n	14200 <sys_arch_reboot+0x20>
   14204:	e000ed00 	.word	0xe000ed00
   14208:	05fa0004 	.word	0x05fa0004

0001420c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1420c:	b130      	cbz	r0, 1421c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   1420e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14210:	0180      	lsls	r0, r0, #6
   14212:	4b03      	ldr	r3, [pc, #12]	; (14220 <arch_busy_wait+0x14>)
   14214:	f043 0301 	orr.w	r3, r3, #1
   14218:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   1421a:	bd08      	pop	{r3, pc}
   1421c:	4770      	bx	lr
   1421e:	bf00      	nop
   14220:	00029f40 	.word	0x00029f40

00014224 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14224:	2940      	cmp	r1, #64	; 0x40
   14226:	bf28      	it	cs
   14228:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   1422a:	2300      	movs	r3, #0
   1422c:	428b      	cmp	r3, r1
   1422e:	d217      	bcs.n	14260 <bt_hex_real+0x3c>
{
   14230:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   14232:	5cc4      	ldrb	r4, [r0, r3]
   14234:	0924      	lsrs	r4, r4, #4
   14236:	005a      	lsls	r2, r3, #1
   14238:	4e0c      	ldr	r6, [pc, #48]	; (1426c <bt_hex_real+0x48>)
   1423a:	5d34      	ldrb	r4, [r6, r4]
   1423c:	4d0c      	ldr	r5, [pc, #48]	; (14270 <bt_hex_real+0x4c>)
   1423e:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14242:	5cc4      	ldrb	r4, [r0, r3]
   14244:	f004 040f 	and.w	r4, r4, #15
   14248:	3201      	adds	r2, #1
   1424a:	5d34      	ldrb	r4, [r6, r4]
   1424c:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   1424e:	3301      	adds	r3, #1
   14250:	428b      	cmp	r3, r1
   14252:	d3ee      	bcc.n	14232 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   14254:	4806      	ldr	r0, [pc, #24]	; (14270 <bt_hex_real+0x4c>)
   14256:	2200      	movs	r2, #0
   14258:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   1425c:	bc70      	pop	{r4, r5, r6}
   1425e:	4770      	bx	lr
	str[i * 2] = '\0';
   14260:	4803      	ldr	r0, [pc, #12]	; (14270 <bt_hex_real+0x4c>)
   14262:	2200      	movs	r2, #0
   14264:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   14268:	4770      	bx	lr
   1426a:	bf00      	nop
   1426c:	0002b308 	.word	0x0002b308
   14270:	200024cc 	.word	0x200024cc

00014274 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   14274:	b5f0      	push	{r4, r5, r6, r7, lr}
   14276:	b08b      	sub	sp, #44	; 0x2c
   14278:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1427a:	7803      	ldrb	r3, [r0, #0]
   1427c:	2b03      	cmp	r3, #3
   1427e:	d82c      	bhi.n	142da <bt_addr_le_str_real+0x66>
   14280:	e8df f003 	tbb	[pc, r3]
   14284:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   14288:	4917      	ldr	r1, [pc, #92]	; (142e8 <bt_addr_le_str_real+0x74>)
   1428a:	a807      	add	r0, sp, #28
   1428c:	f012 fa48 	bl	26720 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   14290:	7963      	ldrb	r3, [r4, #5]
   14292:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   14294:	78e1      	ldrb	r1, [r4, #3]
   14296:	78a0      	ldrb	r0, [r4, #2]
   14298:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1429a:	4d14      	ldr	r5, [pc, #80]	; (142ec <bt_addr_le_str_real+0x78>)
   1429c:	af07      	add	r7, sp, #28
   1429e:	9705      	str	r7, [sp, #20]
   142a0:	9604      	str	r6, [sp, #16]
   142a2:	9003      	str	r0, [sp, #12]
   142a4:	9102      	str	r1, [sp, #8]
   142a6:	9201      	str	r2, [sp, #4]
   142a8:	9300      	str	r3, [sp, #0]
   142aa:	79a3      	ldrb	r3, [r4, #6]
   142ac:	4a10      	ldr	r2, [pc, #64]	; (142f0 <bt_addr_le_str_real+0x7c>)
   142ae:	211e      	movs	r1, #30
   142b0:	4628      	mov	r0, r5
   142b2:	f011 faca 	bl	2584a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   142b6:	4628      	mov	r0, r5
   142b8:	b00b      	add	sp, #44	; 0x2c
   142ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   142bc:	490d      	ldr	r1, [pc, #52]	; (142f4 <bt_addr_le_str_real+0x80>)
   142be:	a807      	add	r0, sp, #28
   142c0:	f012 fa2e 	bl	26720 <strcpy>
		break;
   142c4:	e7e4      	b.n	14290 <bt_addr_le_str_real+0x1c>
		strcpy(type, "public-id");
   142c6:	490c      	ldr	r1, [pc, #48]	; (142f8 <bt_addr_le_str_real+0x84>)
   142c8:	a807      	add	r0, sp, #28
   142ca:	f012 fa29 	bl	26720 <strcpy>
		break;
   142ce:	e7df      	b.n	14290 <bt_addr_le_str_real+0x1c>
		strcpy(type, "random-id");
   142d0:	490a      	ldr	r1, [pc, #40]	; (142fc <bt_addr_le_str_real+0x88>)
   142d2:	a807      	add	r0, sp, #28
   142d4:	f012 fa24 	bl	26720 <strcpy>
		break;
   142d8:	e7da      	b.n	14290 <bt_addr_le_str_real+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   142da:	4a09      	ldr	r2, [pc, #36]	; (14300 <bt_addr_le_str_real+0x8c>)
   142dc:	210a      	movs	r1, #10
   142de:	a807      	add	r0, sp, #28
   142e0:	f011 fab3 	bl	2584a <snprintk>
		break;
   142e4:	e7d4      	b.n	14290 <bt_addr_le_str_real+0x1c>
   142e6:	bf00      	nop
   142e8:	0002b2bc 	.word	0x0002b2bc
   142ec:	20002550 	.word	0x20002550
   142f0:	0002b2e4 	.word	0x0002b2e4
   142f4:	0002b2c4 	.word	0x0002b2c4
   142f8:	0002b2cc 	.word	0x0002b2cc
   142fc:	0002b2d8 	.word	0x0002b2d8
   14300:	0002c3d0 	.word	0x0002c3d0

00014304 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14304:	b570      	push	{r4, r5, r6, lr}
   14306:	4605      	mov	r5, r0
   14308:	460c      	mov	r4, r1
	switch (src->type) {
   1430a:	7803      	ldrb	r3, [r0, #0]
   1430c:	2b01      	cmp	r3, #1
   1430e:	d010      	beq.n	14332 <uuid_to_uuid128+0x2e>
   14310:	2b02      	cmp	r3, #2
   14312:	d020      	beq.n	14356 <uuid_to_uuid128+0x52>
   14314:	b103      	cbz	r3, 14318 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14316:	bd70      	pop	{r4, r5, r6, pc}
		*dst = uuid128_base;
   14318:	4e12      	ldr	r6, [pc, #72]	; (14364 <uuid_to_uuid128+0x60>)
   1431a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1431c:	6020      	str	r0, [r4, #0]
   1431e:	6061      	str	r1, [r4, #4]
   14320:	60a2      	str	r2, [r4, #8]
   14322:	60e3      	str	r3, [r4, #12]
   14324:	7833      	ldrb	r3, [r6, #0]
   14326:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   14328:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1432a:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   1432c:	0a1b      	lsrs	r3, r3, #8
   1432e:	73a3      	strb	r3, [r4, #14]
}
   14330:	e7f1      	b.n	14316 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   14332:	4e0c      	ldr	r6, [pc, #48]	; (14364 <uuid_to_uuid128+0x60>)
   14334:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14336:	6020      	str	r0, [r4, #0]
   14338:	6061      	str	r1, [r4, #4]
   1433a:	60a2      	str	r2, [r4, #8]
   1433c:	60e3      	str	r3, [r4, #12]
   1433e:	7833      	ldrb	r3, [r6, #0]
   14340:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   14342:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   14344:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   14346:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1434a:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   1434c:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1434e:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   14350:	0e1b      	lsrs	r3, r3, #24
   14352:	7423      	strb	r3, [r4, #16]
}
   14354:	e7df      	b.n	14316 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   14356:	2211      	movs	r2, #17
   14358:	4601      	mov	r1, r0
   1435a:	4620      	mov	r0, r4
   1435c:	f012 fa4c 	bl	267f8 <memcpy>
		return;
   14360:	e7d9      	b.n	14316 <uuid_to_uuid128+0x12>
   14362:	bf00      	nop
   14364:	0002b324 	.word	0x0002b324

00014368 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   14368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1436a:	4604      	mov	r4, r0
   1436c:	4616      	mov	r6, r2
   1436e:	461d      	mov	r5, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   14370:	2801      	cmp	r0, #1
   14372:	d003      	beq.n	1437c <bt_buf_get_rx+0x14>
   14374:	2803      	cmp	r0, #3
   14376:	d001      	beq.n	1437c <bt_buf_get_rx+0x14>
   14378:	2805      	cmp	r0, #5
   1437a:	d10d      	bne.n	14398 <bt_buf_get_rx+0x30>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   1437c:	4632      	mov	r2, r6
   1437e:	462b      	mov	r3, r5
   14380:	480d      	ldr	r0, [pc, #52]	; (143b8 <bt_buf_get_rx+0x50>)
   14382:	f014 f9fc 	bl	2877e <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   14386:	4605      	mov	r5, r0
   14388:	b120      	cbz	r0, 14394 <bt_buf_get_rx+0x2c>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   1438a:	2100      	movs	r1, #0
   1438c:	3008      	adds	r0, #8
   1438e:	f006 f897 	bl	1a4c0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14392:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   14394:	4628      	mov	r0, r5
   14396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   14398:	4f08      	ldr	r7, [pc, #32]	; (143bc <bt_buf_get_rx+0x54>)
   1439a:	2341      	movs	r3, #65	; 0x41
   1439c:	463a      	mov	r2, r7
   1439e:	4908      	ldr	r1, [pc, #32]	; (143c0 <bt_buf_get_rx+0x58>)
   143a0:	4808      	ldr	r0, [pc, #32]	; (143c4 <bt_buf_get_rx+0x5c>)
   143a2:	f011 fa44 	bl	2582e <printk>
   143a6:	4808      	ldr	r0, [pc, #32]	; (143c8 <bt_buf_get_rx+0x60>)
   143a8:	f011 fa41 	bl	2582e <printk>
   143ac:	2141      	movs	r1, #65	; 0x41
   143ae:	4638      	mov	r0, r7
   143b0:	f011 fcbf 	bl	25d32 <assert_post_action>
   143b4:	e7e2      	b.n	1437c <bt_buf_get_rx+0x14>
   143b6:	bf00      	nop
   143b8:	200008e0 	.word	0x200008e0
   143bc:	0002b338 	.word	0x0002b338
   143c0:	0002b368 	.word	0x0002b368
   143c4:	00029ff8 	.word	0x00029ff8
   143c8:	0002b3b0 	.word	0x0002b3b0

000143cc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   143cc:	b510      	push	{r4, lr}
   143ce:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   143d0:	4b0a      	ldr	r3, [pc, #40]	; (143fc <bt_buf_get_cmd_complete+0x30>)
   143d2:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   143d6:	b158      	cbz	r0, 143f0 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   143d8:	f006 f912 	bl	1a600 <net_buf_ref>
   143dc:	4604      	mov	r4, r0
   143de:	2301      	movs	r3, #1
   143e0:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   143e2:	2100      	movs	r1, #0
   143e4:	8181      	strh	r1, [r0, #12]
   143e6:	3008      	adds	r0, #8
   143e8:	f006 f86a 	bl	1a4c0 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   143ec:	4620      	mov	r0, r4
   143ee:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   143f0:	460b      	mov	r3, r1
   143f2:	2001      	movs	r0, #1
   143f4:	f7ff ffb8 	bl	14368 <bt_buf_get_rx>
   143f8:	4604      	mov	r4, r0
   143fa:	e7f7      	b.n	143ec <bt_buf_get_cmd_complete+0x20>
   143fc:	200002b0 	.word	0x200002b0

00014400 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   14400:	b510      	push	{r4, lr}
	switch (evt) {
   14402:	280f      	cmp	r0, #15
   14404:	d90d      	bls.n	14422 <bt_buf_get_evt+0x22>
   14406:	2813      	cmp	r0, #19
   14408:	d10d      	bne.n	14426 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   1440a:	4814      	ldr	r0, [pc, #80]	; (1445c <bt_buf_get_evt+0x5c>)
   1440c:	f014 f9b7 	bl	2877e <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   14410:	4604      	mov	r4, r0
   14412:	b198      	cbz	r0, 1443c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   14414:	2100      	movs	r1, #0
   14416:	3008      	adds	r0, #8
   14418:	f006 f852 	bl	1a4c0 <net_buf_simple_reserve>
   1441c:	2301      	movs	r3, #1
   1441e:	7523      	strb	r3, [r4, #20]
}
   14420:	e00c      	b.n	1443c <bt_buf_get_evt+0x3c>
	switch (evt) {
   14422:	280e      	cmp	r0, #14
   14424:	d205      	bcs.n	14432 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   14426:	b959      	cbnz	r1, 14440 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14428:	2001      	movs	r0, #1
   1442a:	f7ff ff9d 	bl	14368 <bt_buf_get_rx>
   1442e:	4604      	mov	r4, r0
   14430:	e004      	b.n	1443c <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   14432:	4610      	mov	r0, r2
   14434:	4619      	mov	r1, r3
   14436:	f7ff ffc9 	bl	143cc <bt_buf_get_cmd_complete>
   1443a:	4604      	mov	r4, r0
	}
}
   1443c:	4620      	mov	r0, r4
   1443e:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   14440:	4807      	ldr	r0, [pc, #28]	; (14460 <bt_buf_get_evt+0x60>)
   14442:	f014 f99c 	bl	2877e <net_buf_alloc_fixed>
			if (buf) {
   14446:	4604      	mov	r4, r0
   14448:	2800      	cmp	r0, #0
   1444a:	d0f7      	beq.n	1443c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1444c:	2100      	movs	r1, #0
   1444e:	3008      	adds	r0, #8
   14450:	f006 f836 	bl	1a4c0 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14454:	2301      	movs	r3, #1
   14456:	7523      	strb	r3, [r4, #20]
			return buf;
   14458:	e7f0      	b.n	1443c <bt_buf_get_evt+0x3c>
   1445a:	bf00      	nop
   1445c:	20000914 	.word	0x20000914
   14460:	20000844 	.word	0x20000844

00014464 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   14464:	2300      	movs	r3, #0
   14466:	2b00      	cmp	r3, #0
   14468:	dd00      	ble.n	1446c <conn_handle_disconnected+0x8>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   1446a:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   1446c:	4a05      	ldr	r2, [pc, #20]	; (14484 <conn_handle_disconnected+0x20>)
   1446e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   14472:	b922      	cbnz	r2, 1447e <conn_handle_disconnected+0x1a>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   14474:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   14478:	4902      	ldr	r1, [pc, #8]	; (14484 <conn_handle_disconnected+0x20>)
   1447a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1447e:	3301      	adds	r3, #1
   14480:	e7f1      	b.n	14466 <conn_handle_disconnected+0x2>
   14482:	bf00      	nop
   14484:	20002588 	.word	0x20002588

00014488 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   14488:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1448c:	2300      	movs	r3, #0
   1448e:	2b00      	cmp	r3, #0
   14490:	dd01      	ble.n	14496 <conn_handle_is_disconnected+0xe>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   14492:	2000      	movs	r0, #0
}
   14494:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   14496:	4a06      	ldr	r2, [pc, #24]	; (144b0 <conn_handle_is_disconnected+0x28>)
   14498:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1449c:	4282      	cmp	r2, r0
   1449e:	d001      	beq.n	144a4 <conn_handle_is_disconnected+0x1c>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   144a0:	3301      	adds	r3, #1
   144a2:	e7f4      	b.n	1448e <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   144a4:	4a02      	ldr	r2, [pc, #8]	; (144b0 <conn_handle_is_disconnected+0x28>)
   144a6:	2100      	movs	r1, #0
   144a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   144ac:	2001      	movs	r0, #1
   144ae:	4770      	bx	lr
   144b0:	20002588 	.word	0x20002588

000144b4 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   144b4:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   144b6:	7851      	ldrb	r1, [r2, #1]
   144b8:	4b08      	ldr	r3, [pc, #32]	; (144dc <read_local_ver_complete+0x28>)
   144ba:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   144be:	8851      	ldrh	r1, [r2, #2]
   144c0:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   144c4:	7911      	ldrb	r1, [r2, #4]
   144c6:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   144ca:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   144ce:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   144d2:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   144d6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   144da:	4770      	bx	lr
   144dc:	200002b0 	.word	0x200002b0

000144e0 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   144e0:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   144e2:	7a19      	ldrb	r1, [r3, #8]
   144e4:	79da      	ldrb	r2, [r3, #7]
   144e6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   144ea:	7998      	ldrb	r0, [r3, #6]
   144ec:	795a      	ldrb	r2, [r3, #5]
   144ee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   144f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   144f6:	7918      	ldrb	r0, [r3, #4]
   144f8:	78d9      	ldrb	r1, [r3, #3]
   144fa:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   144fe:	7898      	ldrb	r0, [r3, #2]
   14500:	785b      	ldrb	r3, [r3, #1]
   14502:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   14506:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   1450a:	4903      	ldr	r1, [pc, #12]	; (14518 <le_read_supp_states_complete+0x38>)
   1450c:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   14510:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   14514:	4770      	bx	lr
   14516:	bf00      	nop
   14518:	200002b0 	.word	0x200002b0

0001451c <hci_reset_complete>:
	uint8_t status = buf->data[0];
   1451c:	6883      	ldr	r3, [r0, #8]
   1451e:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   14520:	b993      	cbnz	r3, 14548 <hci_reset_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14522:	f3bf 8f5b 	dmb	ish
   14526:	4b09      	ldr	r3, [pc, #36]	; (1454c <hci_reset_complete+0x30>)
   14528:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   1452c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   14530:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14534:	f3bf 8f5b 	dmb	ish
   14538:	e853 1f00 	ldrex	r1, [r3]
   1453c:	e843 2000 	strex	r0, r2, [r3]
   14540:	2800      	cmp	r0, #0
   14542:	d1f9      	bne.n	14538 <hci_reset_complete+0x1c>
   14544:	f3bf 8f5b 	dmb	ish
}
   14548:	4770      	bx	lr
   1454a:	bf00      	nop
   1454c:	200002b0 	.word	0x200002b0

00014550 <read_local_features_complete>:
{
   14550:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   14552:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   14554:	2208      	movs	r2, #8
   14556:	3101      	adds	r1, #1
   14558:	4801      	ldr	r0, [pc, #4]	; (14560 <read_local_features_complete+0x10>)
   1455a:	f012 f94d 	bl	267f8 <memcpy>
}
   1455e:	bd08      	pop	{r3, pc}
   14560:	20000320 	.word	0x20000320

00014564 <read_supported_commands_complete>:
{
   14564:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   14566:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   14568:	2240      	movs	r2, #64	; 0x40
   1456a:	3101      	adds	r1, #1
   1456c:	4801      	ldr	r0, [pc, #4]	; (14574 <read_supported_commands_complete+0x10>)
   1456e:	f012 f943 	bl	267f8 <memcpy>
}
   14572:	bd08      	pop	{r3, pc}
   14574:	20000328 	.word	0x20000328

00014578 <read_le_features_complete>:
{
   14578:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   1457a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1457c:	2208      	movs	r2, #8
   1457e:	3101      	adds	r1, #1
   14580:	4801      	ldr	r0, [pc, #4]	; (14588 <read_le_features_complete+0x10>)
   14582:	f012 f939 	bl	267f8 <memcpy>
}
   14586:	bd08      	pop	{r3, pc}
   14588:	20000380 	.word	0x20000380

0001458c <le_read_buffer_size_complete>:
{
   1458c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1458e:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   14590:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   14594:	b299      	uxth	r1, r3
   14596:	4806      	ldr	r0, [pc, #24]	; (145b0 <le_read_buffer_size_complete+0x24>)
   14598:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   1459c:	b901      	cbnz	r1, 145a0 <le_read_buffer_size_complete+0x14>
}
   1459e:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   145a0:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   145a2:	460a      	mov	r2, r1
   145a4:	f500 7080 	add.w	r0, r0, #256	; 0x100
   145a8:	f015 f8f1 	bl	2978e <z_impl_k_sem_init>
   145ac:	e7f7      	b.n	1459e <le_read_buffer_size_complete+0x12>
   145ae:	bf00      	nop
   145b0:	200002b0 	.word	0x200002b0

000145b4 <read_buffer_size_complete>:
{
   145b4:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   145b6:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   145b8:	4b08      	ldr	r3, [pc, #32]	; (145dc <read_buffer_size_complete+0x28>)
   145ba:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   145be:	b103      	cbz	r3, 145c2 <read_buffer_size_complete+0xe>
}
   145c0:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   145c2:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   145c6:	4805      	ldr	r0, [pc, #20]	; (145dc <read_buffer_size_complete+0x28>)
   145c8:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   145cc:	8891      	ldrh	r1, [r2, #4]
   145ce:	460a      	mov	r2, r1
   145d0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   145d4:	f015 f8db 	bl	2978e <z_impl_k_sem_init>
   145d8:	e7f2      	b.n	145c0 <read_buffer_size_complete+0xc>
   145da:	bf00      	nop
   145dc:	200002b0 	.word	0x200002b0

000145e0 <hci_data_buf_overflow>:
{
   145e0:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   145e2:	6881      	ldr	r1, [r0, #8]
   145e4:	4b08      	ldr	r3, [pc, #32]	; (14608 <hci_data_buf_overflow+0x28>)
   145e6:	4a09      	ldr	r2, [pc, #36]	; (1460c <hci_data_buf_overflow+0x2c>)
   145e8:	1a9b      	subs	r3, r3, r2
   145ea:	08db      	lsrs	r3, r3, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   145ec:	f04f 0200 	mov.w	r2, #0
   145f0:	2002      	movs	r0, #2
   145f2:	f360 0202 	bfi	r2, r0, #0, #3
   145f6:	f36f 02c5 	bfc	r2, #3, #3
   145fa:	f363 128f 	bfi	r2, r3, #6, #10
   145fe:	7809      	ldrb	r1, [r1, #0]
   14600:	4803      	ldr	r0, [pc, #12]	; (14610 <hci_data_buf_overflow+0x30>)
   14602:	f7fd fa07 	bl	11a14 <log_1>
}
   14606:	bd08      	pop	{r3, pc}
   14608:	00029d98 	.word	0x00029d98
   1460c:	00029d70 	.word	0x00029d70
   14610:	0002b408 	.word	0x0002b408

00014614 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   14614:	2801      	cmp	r0, #1
   14616:	d001      	beq.n	1461c <find_pending_connect+0x8>
	return NULL;
   14618:	2000      	movs	r0, #0
}
   1461a:	4770      	bx	lr
{
   1461c:	b500      	push	{lr}
   1461e:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14620:	2205      	movs	r2, #5
   14622:	4b0d      	ldr	r3, [pc, #52]	; (14658 <find_pending_connect+0x44>)
   14624:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   14628:	f003 f944 	bl	178b4 <bt_conn_lookup_state_le>
		if (!conn) {
   1462c:	b110      	cbz	r0, 14634 <find_pending_connect+0x20>
}
   1462e:	b003      	add	sp, #12
   14630:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   14634:	4b09      	ldr	r3, [pc, #36]	; (1465c <find_pending_connect+0x48>)
   14636:	e893 0003 	ldmia.w	r3, {r0, r1}
   1463a:	9000      	str	r0, [sp, #0]
   1463c:	f8ad 1004 	strh.w	r1, [sp, #4]
   14640:	0c09      	lsrs	r1, r1, #16
   14642:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14646:	2204      	movs	r2, #4
   14648:	4669      	mov	r1, sp
   1464a:	4b03      	ldr	r3, [pc, #12]	; (14658 <find_pending_connect+0x44>)
   1464c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   14650:	f003 f930 	bl	178b4 <bt_conn_lookup_state_le>
		return conn;
   14654:	e7eb      	b.n	1462e <find_pending_connect+0x1a>
   14656:	bf00      	nop
   14658:	200002b0 	.word	0x200002b0
   1465c:	00029f00 	.word	0x00029f00

00014660 <le_conn_complete_adv_timeout>:
{
   14660:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14662:	f002 f899 	bl	16798 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   14666:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14668:	f3bf 8f5b 	dmb	ish
   1466c:	e850 3f00 	ldrex	r3, [r0]
   14670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14674:	e840 3200 	strex	r2, r3, [r0]
   14678:	2a00      	cmp	r2, #0
   1467a:	d1f7      	bne.n	1466c <le_conn_complete_adv_timeout+0xc>
   1467c:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   14680:	2100      	movs	r1, #0
   14682:	2001      	movs	r0, #1
   14684:	f7ff ffc6 	bl	14614 <find_pending_connect>
		if (!conn) {
   14688:	4604      	mov	r4, r0
   1468a:	b140      	cbz	r0, 1469e <le_conn_complete_adv_timeout+0x3e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1468c:	233c      	movs	r3, #60	; 0x3c
   1468e:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14690:	2100      	movs	r1, #0
   14692:	f002 fe5f 	bl	17354 <bt_conn_set_state>
		bt_conn_unref(conn);
   14696:	4620      	mov	r0, r4
   14698:	f002 fe18 	bl	172cc <bt_conn_unref>
}
   1469c:	bd10      	pop	{r4, pc}
   1469e:	4b08      	ldr	r3, [pc, #32]	; (146c0 <le_conn_complete_adv_timeout+0x60>)
   146a0:	4a08      	ldr	r2, [pc, #32]	; (146c4 <le_conn_complete_adv_timeout+0x64>)
   146a2:	1a9b      	subs	r3, r3, r2
   146a4:	08db      	lsrs	r3, r3, #3
			BT_ERR("No pending peripheral connection");
   146a6:	f04f 0100 	mov.w	r1, #0
   146aa:	2201      	movs	r2, #1
   146ac:	f362 0102 	bfi	r1, r2, #0, #3
   146b0:	f36f 01c5 	bfc	r1, #3, #3
   146b4:	f363 118f 	bfi	r1, r3, #6, #10
   146b8:	4803      	ldr	r0, [pc, #12]	; (146c8 <le_conn_complete_adv_timeout+0x68>)
   146ba:	f7fd f97b 	bl	119b4 <log_0>
			return;
   146be:	e7ed      	b.n	1469c <le_conn_complete_adv_timeout+0x3c>
   146c0:	00029d98 	.word	0x00029d98
   146c4:	00029d70 	.word	0x00029d70
   146c8:	0002b430 	.word	0x0002b430

000146cc <hci_disconn_complete>:
{
   146cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   146ce:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   146d0:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   146d4:	7823      	ldrb	r3, [r4, #0]
   146d6:	b103      	cbz	r3, 146da <hci_disconn_complete+0xe>
}
   146d8:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   146da:	4630      	mov	r0, r6
   146dc:	f002 fe30 	bl	17340 <bt_conn_lookup_handle>
	if (!conn) {
   146e0:	4605      	mov	r5, r0
   146e2:	b158      	cbz	r0, 146fc <hci_disconn_complete+0x30>
	conn->err = evt->reason;
   146e4:	78e3      	ldrb	r3, [r4, #3]
   146e6:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   146e8:	2100      	movs	r1, #0
   146ea:	f002 fe33 	bl	17354 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   146ee:	78ab      	ldrb	r3, [r5, #2]
   146f0:	2b01      	cmp	r3, #1
   146f2:	d015      	beq.n	14720 <hci_disconn_complete+0x54>
		bt_conn_unref(conn);
   146f4:	4628      	mov	r0, r5
   146f6:	f002 fde9 	bl	172cc <bt_conn_unref>
		return;
   146fa:	e7ed      	b.n	146d8 <hci_disconn_complete+0xc>
   146fc:	4b0a      	ldr	r3, [pc, #40]	; (14728 <hci_disconn_complete+0x5c>)
   146fe:	4a0b      	ldr	r2, [pc, #44]	; (1472c <hci_disconn_complete+0x60>)
   14700:	1a9b      	subs	r3, r3, r2
   14702:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   14704:	f04f 0200 	mov.w	r2, #0
   14708:	2101      	movs	r1, #1
   1470a:	f361 0202 	bfi	r2, r1, #0, #3
   1470e:	f36f 02c5 	bfc	r2, #3, #3
   14712:	f363 128f 	bfi	r2, r3, #6, #10
   14716:	4631      	mov	r1, r6
   14718:	4805      	ldr	r0, [pc, #20]	; (14730 <hci_disconn_complete+0x64>)
   1471a:	f7fd f97b 	bl	11a14 <log_1>
		return;
   1471e:	e7db      	b.n	146d8 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   14720:	4628      	mov	r0, r5
   14722:	f002 fdd3 	bl	172cc <bt_conn_unref>
   14726:	e7d7      	b.n	146d8 <hci_disconn_complete+0xc>
   14728:	00029d98 	.word	0x00029d98
   1472c:	00029d70 	.word	0x00029d70
   14730:	0002b454 	.word	0x0002b454

00014734 <le_data_len_change>:
{
   14734:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   14736:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14738:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1473a:	4620      	mov	r0, r4
   1473c:	f002 fe00 	bl	17340 <bt_conn_lookup_handle>
	if (!conn) {
   14740:	b110      	cbz	r0, 14748 <le_data_len_change+0x14>
	bt_conn_unref(conn);
   14742:	f002 fdc3 	bl	172cc <bt_conn_unref>
}
   14746:	bd10      	pop	{r4, pc}
   14748:	4b08      	ldr	r3, [pc, #32]	; (1476c <le_data_len_change+0x38>)
   1474a:	4a09      	ldr	r2, [pc, #36]	; (14770 <le_data_len_change+0x3c>)
   1474c:	1a9b      	subs	r3, r3, r2
   1474e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14750:	f04f 0200 	mov.w	r2, #0
   14754:	2101      	movs	r1, #1
   14756:	f361 0202 	bfi	r2, r1, #0, #3
   1475a:	f36f 02c5 	bfc	r2, #3, #3
   1475e:	f363 128f 	bfi	r2, r3, #6, #10
   14762:	4621      	mov	r1, r4
   14764:	4803      	ldr	r0, [pc, #12]	; (14774 <le_data_len_change+0x40>)
   14766:	f7fd f955 	bl	11a14 <log_1>
		return;
   1476a:	e7ec      	b.n	14746 <le_data_len_change+0x12>
   1476c:	00029d98 	.word	0x00029d98
   14770:	00029d70 	.word	0x00029d70
   14774:	0002b47c 	.word	0x0002b47c

00014778 <hci_num_completed_packets>:
{
   14778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1477c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   14780:	2700      	movs	r7, #0
   14782:	e05c      	b.n	1483e <hci_num_completed_packets+0xc6>
				conn->pending_no_cb--;
   14784:	3b01      	subs	r3, #1
   14786:	61e3      	str	r3, [r4, #28]
   14788:	f382 8811 	msr	BASEPRI, r2
   1478c:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   14790:	4620      	mov	r0, r4
   14792:	f002 fb2b 	bl	16dec <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   14796:	f00a fd33 	bl	1f200 <z_impl_k_sem_give>
				continue;
   1479a:	e025      	b.n	147e8 <hci_num_completed_packets+0x70>
	list->tail = node;
   1479c:	61a1      	str	r1, [r4, #24]
   1479e:	f382 8811 	msr	BASEPRI, r2
   147a2:	f3bf 8f6f 	isb	sy
			if (!node) {
   147a6:	2b00      	cmp	r3, #0
   147a8:	d036      	beq.n	14818 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   147aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   147ae:	f3ef 8111 	mrs	r1, BASEPRI
   147b2:	f382 8812 	msr	BASEPRI_MAX, r2
   147b6:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   147ba:	68da      	ldr	r2, [r3, #12]
   147bc:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   147be:	2200      	movs	r2, #0
   147c0:	60da      	str	r2, [r3, #12]
	parent->next = child;
   147c2:	601a      	str	r2, [r3, #0]
	return list->tail;
   147c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   147c6:	2a00      	cmp	r2, #0
   147c8:	d05a      	beq.n	14880 <hci_num_completed_packets+0x108>
	parent->next = child;
   147ca:	6013      	str	r3, [r2, #0]
	list->tail = node;
   147cc:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   147ce:	f381 8811 	msr	BASEPRI, r1
   147d2:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   147d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   147da:	f00b f8f3 	bl	1f9c4 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   147de:	4620      	mov	r0, r4
   147e0:	f002 fb04 	bl	16dec <bt_conn_get_pkts>
   147e4:	f00a fd0c 	bl	1f200 <z_impl_k_sem_give>
{
   147e8:	462e      	mov	r6, r5
		while (count--) {
   147ea:	1e75      	subs	r5, r6, #1
   147ec:	b2ad      	uxth	r5, r5
   147ee:	b316      	cbz	r6, 14836 <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   147f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   147f4:	f3ef 8211 	mrs	r2, BASEPRI
   147f8:	f383 8812 	msr	BASEPRI_MAX, r3
   147fc:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   14800:	69e3      	ldr	r3, [r4, #28]
   14802:	2b00      	cmp	r3, #0
   14804:	d1be      	bne.n	14784 <hci_num_completed_packets+0xc>
	return list->head;
   14806:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14808:	2b00      	cmp	r3, #0
   1480a:	d0c8      	beq.n	1479e <hci_num_completed_packets+0x26>
	return node->next;
   1480c:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1480e:	6161      	str	r1, [r4, #20]
	return list->tail;
   14810:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14812:	4298      	cmp	r0, r3
   14814:	d1c3      	bne.n	1479e <hci_num_completed_packets+0x26>
   14816:	e7c1      	b.n	1479c <hci_num_completed_packets+0x24>
   14818:	4b1c      	ldr	r3, [pc, #112]	; (1488c <hci_num_completed_packets+0x114>)
   1481a:	4a1d      	ldr	r2, [pc, #116]	; (14890 <hci_num_completed_packets+0x118>)
   1481c:	1a9b      	subs	r3, r3, r2
   1481e:	08db      	lsrs	r3, r3, #3
				BT_ERR("packets count mismatch");
   14820:	2201      	movs	r2, #1
   14822:	f362 0902 	bfi	r9, r2, #0, #3
   14826:	f36f 09c5 	bfc	r9, #3, #3
   1482a:	f363 198f 	bfi	r9, r3, #6, #10
   1482e:	4649      	mov	r1, r9
   14830:	4818      	ldr	r0, [pc, #96]	; (14894 <hci_num_completed_packets+0x11c>)
   14832:	f7fd f8bf 	bl	119b4 <log_0>
		bt_conn_unref(conn);
   14836:	4620      	mov	r0, r4
   14838:	f002 fd48 	bl	172cc <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1483c:	3701      	adds	r7, #1
   1483e:	f898 3000 	ldrb.w	r3, [r8]
   14842:	429f      	cmp	r7, r3
   14844:	da1f      	bge.n	14886 <hci_num_completed_packets+0x10e>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   14846:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   1484a:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1484e:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   14852:	4628      	mov	r0, r5
   14854:	f002 fd74 	bl	17340 <bt_conn_lookup_handle>
		if (!conn) {
   14858:	4604      	mov	r4, r0
   1485a:	2800      	cmp	r0, #0
   1485c:	d1c5      	bne.n	147ea <hci_num_completed_packets+0x72>
   1485e:	4b0b      	ldr	r3, [pc, #44]	; (1488c <hci_num_completed_packets+0x114>)
   14860:	4a0b      	ldr	r2, [pc, #44]	; (14890 <hci_num_completed_packets+0x118>)
   14862:	1a9b      	subs	r3, r3, r2
   14864:	08db      	lsrs	r3, r3, #3
			BT_ERR("No connection for handle %u", handle);
   14866:	2201      	movs	r2, #1
   14868:	f362 0a02 	bfi	sl, r2, #0, #3
   1486c:	f36f 0ac5 	bfc	sl, #3, #3
   14870:	f363 1a8f 	bfi	sl, r3, #6, #10
   14874:	4652      	mov	r2, sl
   14876:	4629      	mov	r1, r5
   14878:	4807      	ldr	r0, [pc, #28]	; (14898 <hci_num_completed_packets+0x120>)
   1487a:	f7fd f8cb 	bl	11a14 <log_1>
			continue;
   1487e:	e7dd      	b.n	1483c <hci_num_completed_packets+0xc4>
	list->tail = node;
   14880:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   14882:	6223      	str	r3, [r4, #32]
}
   14884:	e7a3      	b.n	147ce <hci_num_completed_packets+0x56>
}
   14886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1488a:	bf00      	nop
   1488c:	00029d98 	.word	0x00029d98
   14890:	00029d70 	.word	0x00029d70
   14894:	0002b4bc 	.word	0x0002b4bc
   14898:	0002b4a0 	.word	0x0002b4a0

0001489c <hci_cmd_done>:
{
   1489c:	b570      	push	{r4, r5, r6, lr}
   1489e:	b084      	sub	sp, #16
   148a0:	4605      	mov	r5, r0
   148a2:	460e      	mov	r6, r1
   148a4:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   148a6:	7990      	ldrb	r0, [r2, #6]
   148a8:	f005 fc7a 	bl	1a1a0 <net_buf_pool_get>
   148ac:	4b55      	ldr	r3, [pc, #340]	; (14a04 <hci_cmd_done+0x168>)
   148ae:	4283      	cmp	r3, r0
   148b0:	d01c      	beq.n	148ec <hci_cmd_done+0x50>
   148b2:	4b55      	ldr	r3, [pc, #340]	; (14a08 <hci_cmd_done+0x16c>)
   148b4:	4a55      	ldr	r2, [pc, #340]	; (14a0c <hci_cmd_done+0x170>)
   148b6:	1a9b      	subs	r3, r3, r2
   148b8:	08db      	lsrs	r3, r3, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   148ba:	f04f 0600 	mov.w	r6, #0
   148be:	2202      	movs	r2, #2
   148c0:	f362 0602 	bfi	r6, r2, #0, #3
   148c4:	f36f 06c5 	bfc	r6, #3, #3
   148c8:	f363 168f 	bfi	r6, r3, #6, #10
   148cc:	9500      	str	r5, [sp, #0]
   148ce:	79a0      	ldrb	r0, [r4, #6]
   148d0:	9001      	str	r0, [sp, #4]
   148d2:	f005 fc65 	bl	1a1a0 <net_buf_pool_get>
   148d6:	9002      	str	r0, [sp, #8]
   148d8:	4b4a      	ldr	r3, [pc, #296]	; (14a04 <hci_cmd_done+0x168>)
   148da:	9303      	str	r3, [sp, #12]
   148dc:	4633      	mov	r3, r6
   148de:	2204      	movs	r2, #4
   148e0:	4669      	mov	r1, sp
   148e2:	484b      	ldr	r0, [pc, #300]	; (14a10 <hci_cmd_done+0x174>)
   148e4:	f7fd f92a 	bl	11b3c <log_n>
}
   148e8:	b004      	add	sp, #16
   148ea:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   148ec:	4620      	mov	r0, r4
   148ee:	f013 ff21 	bl	28734 <net_buf_id>
   148f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   148f6:	4b47      	ldr	r3, [pc, #284]	; (14a14 <hci_cmd_done+0x178>)
   148f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   148fc:	8843      	ldrh	r3, [r0, #2]
   148fe:	42ab      	cmp	r3, r5
   14900:	d133      	bne.n	1496a <hci_cmd_done+0xce>
	if (bt_dev.sent_cmd) {
   14902:	4b45      	ldr	r3, [pc, #276]	; (14a18 <hci_cmd_done+0x17c>)
   14904:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   14908:	b128      	cbz	r0, 14916 <hci_cmd_done+0x7a>
		net_buf_unref(bt_dev.sent_cmd);
   1490a:	f005 fe3f 	bl	1a58c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1490e:	4b42      	ldr	r3, [pc, #264]	; (14a18 <hci_cmd_done+0x17c>)
   14910:	2200      	movs	r2, #0
   14912:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   14916:	4620      	mov	r0, r4
   14918:	f013 ff0c 	bl	28734 <net_buf_id>
   1491c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14920:	4b3c      	ldr	r3, [pc, #240]	; (14a14 <hci_cmd_done+0x178>)
   14922:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14926:	6843      	ldr	r3, [r0, #4]
   14928:	b10b      	cbz	r3, 1492e <hci_cmd_done+0x92>
   1492a:	2e00      	cmp	r6, #0
   1492c:	d039      	beq.n	149a2 <hci_cmd_done+0x106>
	if (cmd(buf)->sync) {
   1492e:	4620      	mov	r0, r4
   14930:	f013 ff00 	bl	28734 <net_buf_id>
   14934:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14938:	4b36      	ldr	r3, [pc, #216]	; (14a14 <hci_cmd_done+0x178>)
   1493a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1493e:	6883      	ldr	r3, [r0, #8]
   14940:	2b00      	cmp	r3, #0
   14942:	d0d1      	beq.n	148e8 <hci_cmd_done+0x4c>
		cmd(buf)->status = status;
   14944:	4620      	mov	r0, r4
   14946:	f013 fef5 	bl	28734 <net_buf_id>
   1494a:	4d32      	ldr	r5, [pc, #200]	; (14a14 <hci_cmd_done+0x178>)
   1494c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14950:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   14954:	4620      	mov	r0, r4
   14956:	f013 feed 	bl	28734 <net_buf_id>
   1495a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1495e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   14962:	68a8      	ldr	r0, [r5, #8]
   14964:	f00a fc4c 	bl	1f200 <z_impl_k_sem_give>
}
   14968:	e7be      	b.n	148e8 <hci_cmd_done+0x4c>
   1496a:	4b27      	ldr	r3, [pc, #156]	; (14a08 <hci_cmd_done+0x16c>)
   1496c:	4a27      	ldr	r2, [pc, #156]	; (14a0c <hci_cmd_done+0x170>)
   1496e:	1a9b      	subs	r3, r3, r2
   14970:	08db      	lsrs	r3, r3, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   14972:	f04f 0600 	mov.w	r6, #0
   14976:	2202      	movs	r2, #2
   14978:	f362 0602 	bfi	r6, r2, #0, #3
   1497c:	f36f 06c5 	bfc	r6, #3, #3
   14980:	f363 168f 	bfi	r6, r3, #6, #10
   14984:	4620      	mov	r0, r4
   14986:	f013 fed5 	bl	28734 <net_buf_id>
   1498a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1498e:	4b21      	ldr	r3, [pc, #132]	; (14a14 <hci_cmd_done+0x178>)
   14990:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14994:	4633      	mov	r3, r6
   14996:	8842      	ldrh	r2, [r0, #2]
   14998:	4629      	mov	r1, r5
   1499a:	4820      	ldr	r0, [pc, #128]	; (14a1c <hci_cmd_done+0x180>)
   1499c:	f7fd f870 	bl	11a80 <log_2>
		return;
   149a0:	e7a2      	b.n	148e8 <hci_cmd_done+0x4c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   149a2:	4620      	mov	r0, r4
   149a4:	f013 fec6 	bl	28734 <net_buf_id>
   149a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   149ac:	4b19      	ldr	r3, [pc, #100]	; (14a14 <hci_cmd_done+0x178>)
   149ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   149b2:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   149b4:	6813      	ldr	r3, [r2, #0]
   149b6:	6851      	ldr	r1, [r2, #4]
   149b8:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   149ba:	f001 051f 	and.w	r5, r1, #31
   149be:	2201      	movs	r2, #1
   149c0:	40aa      	lsls	r2, r5

	if (val) {
   149c2:	b170      	cbz	r0, 149e2 <hci_cmd_done+0x146>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   149c4:	0949      	lsrs	r1, r1, #5
   149c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   149ca:	f3bf 8f5b 	dmb	ish
   149ce:	e853 1f00 	ldrex	r1, [r3]
   149d2:	4311      	orrs	r1, r2
   149d4:	e843 1000 	strex	r0, r1, [r3]
   149d8:	2800      	cmp	r0, #0
   149da:	d1f8      	bne.n	149ce <hci_cmd_done+0x132>
   149dc:	f3bf 8f5b 	dmb	ish
   149e0:	e7a5      	b.n	1492e <hci_cmd_done+0x92>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   149e2:	0949      	lsrs	r1, r1, #5
   149e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   149e8:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   149ea:	f3bf 8f5b 	dmb	ish
   149ee:	e853 1f00 	ldrex	r1, [r3]
   149f2:	4011      	ands	r1, r2
   149f4:	e843 1000 	strex	r0, r1, [r3]
   149f8:	2800      	cmp	r0, #0
   149fa:	d1f8      	bne.n	149ee <hci_cmd_done+0x152>
   149fc:	f3bf 8f5b 	dmb	ish
	}
}
   14a00:	e795      	b.n	1492e <hci_cmd_done+0x92>
   14a02:	bf00      	nop
   14a04:	200008ac 	.word	0x200008ac
   14a08:	00029d98 	.word	0x00029d98
   14a0c:	00029d70 	.word	0x00029d70
   14a10:	0002b4d4 	.word	0x0002b4d4
   14a14:	20002570 	.word	0x20002570
   14a18:	200002b0 	.word	0x200002b0
   14a1c:	0002b50c 	.word	0x0002b50c

00014a20 <hci_cmd_status>:
{
   14a20:	b538      	push	{r3, r4, r5, lr}
   14a22:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   14a24:	2104      	movs	r1, #4
   14a26:	3008      	adds	r0, #8
   14a28:	f005 fe9c 	bl	1a764 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14a2c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   14a2e:	4622      	mov	r2, r4
   14a30:	7801      	ldrb	r1, [r0, #0]
   14a32:	8840      	ldrh	r0, [r0, #2]
   14a34:	f7ff ff32 	bl	1489c <hci_cmd_done>
	if (ncmd) {
   14a38:	b905      	cbnz	r5, 14a3c <hci_cmd_status+0x1c>
}
   14a3a:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   14a3c:	4801      	ldr	r0, [pc, #4]	; (14a44 <hci_cmd_status+0x24>)
   14a3e:	f00a fbdf 	bl	1f200 <z_impl_k_sem_give>
   14a42:	e7fa      	b.n	14a3a <hci_cmd_status+0x1a>
   14a44:	200003c8 	.word	0x200003c8

00014a48 <hci_cmd_complete>:
{
   14a48:	b538      	push	{r3, r4, r5, lr}
   14a4a:	4604      	mov	r4, r0
   14a4c:	2103      	movs	r1, #3
   14a4e:	3008      	adds	r0, #8
   14a50:	f005 fe88 	bl	1a764 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14a54:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   14a56:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   14a58:	4622      	mov	r2, r4
   14a5a:	7819      	ldrb	r1, [r3, #0]
   14a5c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   14a60:	f7ff ff1c 	bl	1489c <hci_cmd_done>
	if (ncmd) {
   14a64:	b905      	cbnz	r5, 14a68 <hci_cmd_complete+0x20>
}
   14a66:	bd38      	pop	{r3, r4, r5, pc}
   14a68:	4801      	ldr	r0, [pc, #4]	; (14a70 <hci_cmd_complete+0x28>)
   14a6a:	f00a fbc9 	bl	1f200 <z_impl_k_sem_give>
   14a6e:	e7fa      	b.n	14a66 <hci_cmd_complete+0x1e>
   14a70:	200003c8 	.word	0x200003c8

00014a74 <hci_hardware_error>:
{
   14a74:	b508      	push	{r3, lr}
   14a76:	2101      	movs	r1, #1
   14a78:	3008      	adds	r0, #8
   14a7a:	f005 fe73 	bl	1a764 <net_buf_simple_pull_mem>
   14a7e:	4b09      	ldr	r3, [pc, #36]	; (14aa4 <hci_hardware_error+0x30>)
   14a80:	4a09      	ldr	r2, [pc, #36]	; (14aa8 <hci_hardware_error+0x34>)
   14a82:	1a9b      	subs	r3, r3, r2
   14a84:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   14a86:	f04f 0200 	mov.w	r2, #0
   14a8a:	2101      	movs	r1, #1
   14a8c:	f361 0202 	bfi	r2, r1, #0, #3
   14a90:	f36f 02c5 	bfc	r2, #3, #3
   14a94:	f363 128f 	bfi	r2, r3, #6, #10
   14a98:	7801      	ldrb	r1, [r0, #0]
   14a9a:	4804      	ldr	r0, [pc, #16]	; (14aac <hci_hardware_error+0x38>)
   14a9c:	f7fc ffba 	bl	11a14 <log_1>
}
   14aa0:	bd08      	pop	{r3, pc}
   14aa2:	bf00      	nop
   14aa4:	00029d98 	.word	0x00029d98
   14aa8:	00029d70 	.word	0x00029d70
   14aac:	0002b540 	.word	0x0002b540

00014ab0 <hci_vendor_event>:
{
   14ab0:	b510      	push	{r4, lr}
   14ab2:	4b0c      	ldr	r3, [pc, #48]	; (14ae4 <hci_vendor_event+0x34>)
   14ab4:	4a0c      	ldr	r2, [pc, #48]	; (14ae8 <hci_vendor_event+0x38>)
   14ab6:	1a9b      	subs	r3, r3, r2
   14ab8:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled vendor-specific event: %s",
   14aba:	f04f 0400 	mov.w	r4, #0
   14abe:	2202      	movs	r2, #2
   14ac0:	f362 0402 	bfi	r4, r2, #0, #3
   14ac4:	f36f 04c5 	bfc	r4, #3, #3
   14ac8:	f363 148f 	bfi	r4, r3, #6, #10
   14acc:	8981      	ldrh	r1, [r0, #12]
   14ace:	6880      	ldr	r0, [r0, #8]
   14ad0:	f7ff fba8 	bl	14224 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   14ad4:	f7fc fdfc 	bl	116d0 <z_log_strdup>
   14ad8:	4601      	mov	r1, r0
   14ada:	4622      	mov	r2, r4
   14adc:	4803      	ldr	r0, [pc, #12]	; (14aec <hci_vendor_event+0x3c>)
   14ade:	f7fc ff99 	bl	11a14 <log_1>
}
   14ae2:	bd10      	pop	{r4, pc}
   14ae4:	00029d98 	.word	0x00029d98
   14ae8:	00029d70 	.word	0x00029d70
   14aec:	0002b564 	.word	0x0002b564

00014af0 <hci_acl>:
{
   14af0:	b570      	push	{r4, r5, r6, lr}
   14af2:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14af4:	8983      	ldrh	r3, [r0, #12]
   14af6:	2b03      	cmp	r3, #3
   14af8:	d923      	bls.n	14b42 <hci_acl+0x52>
   14afa:	2104      	movs	r1, #4
   14afc:	f104 0008 	add.w	r0, r4, #8
   14b00:	f005 fe30 	bl	1a764 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   14b04:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14b06:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   14b08:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   14b0a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   14b0e:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14b10:	23ff      	movs	r3, #255	; 0xff
   14b12:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   14b14:	89a1      	ldrh	r1, [r4, #12]
   14b16:	4291      	cmp	r1, r2
   14b18:	d021      	beq.n	14b5e <hci_acl+0x6e>
   14b1a:	4823      	ldr	r0, [pc, #140]	; (14ba8 <hci_acl+0xb8>)
   14b1c:	4b23      	ldr	r3, [pc, #140]	; (14bac <hci_acl+0xbc>)
   14b1e:	1ac0      	subs	r0, r0, r3
   14b20:	08c0      	lsrs	r0, r0, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   14b22:	f04f 0300 	mov.w	r3, #0
   14b26:	2501      	movs	r5, #1
   14b28:	f365 0302 	bfi	r3, r5, #0, #3
   14b2c:	f36f 03c5 	bfc	r3, #3, #3
   14b30:	f360 138f 	bfi	r3, r0, #6, #10
   14b34:	481e      	ldr	r0, [pc, #120]	; (14bb0 <hci_acl+0xc0>)
   14b36:	f7fc ffa3 	bl	11a80 <log_2>
		net_buf_unref(buf);
   14b3a:	4620      	mov	r0, r4
   14b3c:	f005 fd26 	bl	1a58c <net_buf_unref>
}
   14b40:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14b42:	f240 13b5 	movw	r3, #437	; 0x1b5
   14b46:	4a1b      	ldr	r2, [pc, #108]	; (14bb4 <hci_acl+0xc4>)
   14b48:	491b      	ldr	r1, [pc, #108]	; (14bb8 <hci_acl+0xc8>)
   14b4a:	481c      	ldr	r0, [pc, #112]	; (14bbc <hci_acl+0xcc>)
   14b4c:	f010 fe6f 	bl	2582e <printk>
   14b50:	4040      	eors	r0, r0
   14b52:	f380 8811 	msr	BASEPRI, r0
   14b56:	f04f 0003 	mov.w	r0, #3
   14b5a:	df02      	svc	2
   14b5c:	e7cd      	b.n	14afa <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14b5e:	f002 fbef 	bl	17340 <bt_conn_lookup_handle>
	if (!conn) {
   14b62:	4605      	mov	r5, r0
   14b64:	b158      	cbz	r0, 14b7e <hci_acl+0x8e>
	acl(buf)->index = bt_conn_index(conn);
   14b66:	f002 fcef 	bl	17548 <bt_conn_index>
   14b6a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   14b6c:	4632      	mov	r2, r6
   14b6e:	4621      	mov	r1, r4
   14b70:	4628      	mov	r0, r5
   14b72:	f012 fae1 	bl	27138 <bt_conn_recv>
	bt_conn_unref(conn);
   14b76:	4628      	mov	r0, r5
   14b78:	f002 fba8 	bl	172cc <bt_conn_unref>
   14b7c:	e7e0      	b.n	14b40 <hci_acl+0x50>
   14b7e:	4b0a      	ldr	r3, [pc, #40]	; (14ba8 <hci_acl+0xb8>)
   14b80:	4a0a      	ldr	r2, [pc, #40]	; (14bac <hci_acl+0xbc>)
   14b82:	1a9b      	subs	r3, r3, r2
   14b84:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   14b86:	f04f 0200 	mov.w	r2, #0
   14b8a:	2101      	movs	r1, #1
   14b8c:	f361 0202 	bfi	r2, r1, #0, #3
   14b90:	f36f 02c5 	bfc	r2, #3, #3
   14b94:	f363 128f 	bfi	r2, r3, #6, #10
   14b98:	8ae1      	ldrh	r1, [r4, #22]
   14b9a:	4809      	ldr	r0, [pc, #36]	; (14bc0 <hci_acl+0xd0>)
   14b9c:	f7fc ff3a 	bl	11a14 <log_1>
		net_buf_unref(buf);
   14ba0:	4620      	mov	r0, r4
   14ba2:	f005 fcf3 	bl	1a58c <net_buf_unref>
		return;
   14ba6:	e7cb      	b.n	14b40 <hci_acl+0x50>
   14ba8:	00029d98 	.word	0x00029d98
   14bac:	00029d70 	.word	0x00029d70
   14bb0:	0002b5d8 	.word	0x0002b5d8
   14bb4:	0002b588 	.word	0x0002b588
   14bb8:	0002b5bc 	.word	0x0002b5bc
   14bbc:	00029ff8 	.word	0x00029ff8
   14bc0:	0002b5fc 	.word	0x0002b5fc

00014bc4 <le_conn_update_complete>:
{
   14bc4:	b570      	push	{r4, r5, r6, lr}
   14bc6:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   14bc8:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14bca:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   14bce:	4630      	mov	r0, r6
   14bd0:	f002 fbb6 	bl	17340 <bt_conn_lookup_handle>
	if (!conn) {
   14bd4:	b148      	cbz	r0, 14bea <le_conn_update_complete+0x26>
   14bd6:	4605      	mov	r5, r0
	if (!evt->status) {
   14bd8:	7823      	ldrb	r3, [r4, #0]
   14bda:	b1c3      	cbz	r3, 14c0e <le_conn_update_complete+0x4a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14bdc:	2b1a      	cmp	r3, #26
   14bde:	d025      	beq.n	14c2c <le_conn_update_complete+0x68>
	bt_conn_unref(conn);
   14be0:	4628      	mov	r0, r5
   14be2:	f002 fb73 	bl	172cc <bt_conn_unref>
}
   14be6:	b002      	add	sp, #8
   14be8:	bd70      	pop	{r4, r5, r6, pc}
   14bea:	4b24      	ldr	r3, [pc, #144]	; (14c7c <le_conn_update_complete+0xb8>)
   14bec:	4a24      	ldr	r2, [pc, #144]	; (14c80 <le_conn_update_complete+0xbc>)
   14bee:	1a9b      	subs	r3, r3, r2
   14bf0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14bf2:	f04f 0200 	mov.w	r2, #0
   14bf6:	2101      	movs	r1, #1
   14bf8:	f361 0202 	bfi	r2, r1, #0, #3
   14bfc:	f36f 02c5 	bfc	r2, #3, #3
   14c00:	f363 128f 	bfi	r2, r3, #6, #10
   14c04:	4631      	mov	r1, r6
   14c06:	481f      	ldr	r0, [pc, #124]	; (14c84 <le_conn_update_complete+0xc0>)
   14c08:	f7fc ff04 	bl	11a14 <log_1>
		return;
   14c0c:	e7eb      	b.n	14be6 <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   14c0e:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   14c12:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   14c16:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   14c1a:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14c1e:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   14c22:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   14c26:	f002 fcff 	bl	17628 <notify_le_param_updated>
   14c2a:	e7d9      	b.n	14be0 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   14c2c:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14c2e:	2b01      	cmp	r3, #1
   14c30:	d1d6      	bne.n	14be0 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   14c32:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14c34:	f3bf 8f5b 	dmb	ish
   14c38:	e853 2f00 	ldrex	r2, [r3]
   14c3c:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   14c40:	e843 1000 	strex	r0, r1, [r3]
   14c44:	2800      	cmp	r0, #0
   14c46:	d1f7      	bne.n	14c38 <le_conn_update_complete+0x74>
   14c48:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   14c4c:	f412 6f80 	tst.w	r2, #1024	; 0x400
   14c50:	d1c6      	bne.n	14be0 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   14c52:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   14c56:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   14c5a:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   14c5e:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   14c62:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
   14c66:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   14c6a:	f8b5 30b2 	ldrh.w	r3, [r5, #178]	; 0xb2
   14c6e:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   14c72:	4669      	mov	r1, sp
   14c74:	4628      	mov	r0, r5
   14c76:	f012 fc14 	bl	274a2 <bt_l2cap_update_conn_param>
   14c7a:	e7b1      	b.n	14be0 <le_conn_update_complete+0x1c>
   14c7c:	00029d98 	.word	0x00029d98
   14c80:	00029d70 	.word	0x00029d70
   14c84:	0002b47c 	.word	0x0002b47c

00014c88 <hci_le_meta_event>:
{
   14c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c8a:	b083      	sub	sp, #12
   14c8c:	4604      	mov	r4, r0
   14c8e:	2101      	movs	r1, #1
   14c90:	3008      	adds	r0, #8
   14c92:	f005 fd67 	bl	1a764 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14c96:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   14c98:	2300      	movs	r3, #0
   14c9a:	2b06      	cmp	r3, #6
   14c9c:	d823      	bhi.n	14ce6 <hci_le_meta_event+0x5e>
		const struct event_handler *handler = &handlers[i];
   14c9e:	4a20      	ldr	r2, [pc, #128]	; (14d20 <hci_le_meta_event+0x98>)
   14ca0:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   14ca4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   14ca8:	4295      	cmp	r5, r2
   14caa:	d108      	bne.n	14cbe <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
   14cac:	89a1      	ldrh	r1, [r4, #12]
   14cae:	7843      	ldrb	r3, [r0, #1]
   14cb0:	4299      	cmp	r1, r3
   14cb2:	d306      	bcc.n	14cc2 <hci_le_meta_event+0x3a>
		handler->handler(buf);
   14cb4:	6843      	ldr	r3, [r0, #4]
   14cb6:	4620      	mov	r0, r4
   14cb8:	4798      	blx	r3
}
   14cba:	b003      	add	sp, #12
   14cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   14cbe:	3301      	adds	r3, #1
   14cc0:	e7eb      	b.n	14c9a <hci_le_meta_event+0x12>
   14cc2:	4a18      	ldr	r2, [pc, #96]	; (14d24 <hci_le_meta_event+0x9c>)
   14cc4:	4b18      	ldr	r3, [pc, #96]	; (14d28 <hci_le_meta_event+0xa0>)
   14cc6:	1ad2      	subs	r2, r2, r3
   14cc8:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14cca:	f04f 0300 	mov.w	r3, #0
   14cce:	2001      	movs	r0, #1
   14cd0:	f360 0302 	bfi	r3, r0, #0, #3
   14cd4:	f36f 03c5 	bfc	r3, #3, #3
   14cd8:	f362 138f 	bfi	r3, r2, #6, #10
   14cdc:	462a      	mov	r2, r5
   14cde:	4813      	ldr	r0, [pc, #76]	; (14d2c <hci_le_meta_event+0xa4>)
   14ce0:	f7fc fece 	bl	11a80 <log_2>
			return;
   14ce4:	e7e9      	b.n	14cba <hci_le_meta_event+0x32>
   14ce6:	4b0f      	ldr	r3, [pc, #60]	; (14d24 <hci_le_meta_event+0x9c>)
   14ce8:	4a0f      	ldr	r2, [pc, #60]	; (14d28 <hci_le_meta_event+0xa0>)
   14cea:	1a9b      	subs	r3, r3, r2
   14cec:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   14cee:	f04f 0600 	mov.w	r6, #0
   14cf2:	2202      	movs	r2, #2
   14cf4:	f362 0602 	bfi	r6, r2, #0, #3
   14cf8:	f36f 06c5 	bfc	r6, #3, #3
   14cfc:	f363 168f 	bfi	r6, r3, #6, #10
   14d00:	89a7      	ldrh	r7, [r4, #12]
   14d02:	4639      	mov	r1, r7
   14d04:	68a0      	ldr	r0, [r4, #8]
   14d06:	f7ff fa8d 	bl	14224 <bt_hex_real>
   14d0a:	f7fc fce1 	bl	116d0 <z_log_strdup>
   14d0e:	4603      	mov	r3, r0
   14d10:	f8ad 6000 	strh.w	r6, [sp]
   14d14:	463a      	mov	r2, r7
   14d16:	4629      	mov	r1, r5
   14d18:	4805      	ldr	r0, [pc, #20]	; (14d30 <hci_le_meta_event+0xa8>)
   14d1a:	f7fc ff31 	bl	11b80 <log_3>
}
   14d1e:	e7cc      	b.n	14cba <hci_le_meta_event+0x32>
   14d20:	0002b94c 	.word	0x0002b94c
   14d24:	00029d98 	.word	0x00029d98
   14d28:	00029d70 	.word	0x00029d70
   14d2c:	0002b620 	.word	0x0002b620
   14d30:	0002b644 	.word	0x0002b644

00014d34 <hci_event>:
{
   14d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d36:	b083      	sub	sp, #12
   14d38:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14d3a:	8983      	ldrh	r3, [r0, #12]
   14d3c:	2b01      	cmp	r3, #1
   14d3e:	d916      	bls.n	14d6e <hci_event+0x3a>
   14d40:	2102      	movs	r1, #2
   14d42:	f104 0008 	add.w	r0, r4, #8
   14d46:	f005 fd0d 	bl	1a764 <net_buf_simple_pull_mem>
   14d4a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14d4c:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   14d4e:	3b05      	subs	r3, #5
   14d50:	2b15      	cmp	r3, #21
   14d52:	d81c      	bhi.n	14d8e <hci_event+0x5a>
   14d54:	e8df f003 	tbb	[pc, r3]
   14d58:	1b1b1b19 	.word	0x1b1b1b19
   14d5c:	1b1b1b1b 	.word	0x1b1b1b1b
   14d60:	1b36361b 	.word	0x1b36361b
   14d64:	1b361b1b 	.word	0x1b361b1b
   14d68:	1b1b1b1b 	.word	0x1b1b1b1b
   14d6c:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14d6e:	f640 1317 	movw	r3, #2327	; 0x917
   14d72:	4a35      	ldr	r2, [pc, #212]	; (14e48 <hci_event+0x114>)
   14d74:	4935      	ldr	r1, [pc, #212]	; (14e4c <hci_event+0x118>)
   14d76:	4836      	ldr	r0, [pc, #216]	; (14e50 <hci_event+0x11c>)
   14d78:	f010 fd59 	bl	2582e <printk>
   14d7c:	4040      	eors	r0, r0
   14d7e:	f380 8811 	msr	BASEPRI, r0
   14d82:	f04f 0003 	mov.w	r0, #3
   14d86:	df02      	svc	2
   14d88:	e7da      	b.n	14d40 <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14d8a:	2303      	movs	r3, #3
   14d8c:	e000      	b.n	14d90 <hci_event+0x5c>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   14d8e:	2302      	movs	r3, #2
   14d90:	f013 0f02 	tst.w	r3, #2
   14d94:	d018      	beq.n	14dc8 <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14d96:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   14d98:	2300      	movs	r3, #0
   14d9a:	2b03      	cmp	r3, #3
   14d9c:	d836      	bhi.n	14e0c <hci_event+0xd8>
		const struct event_handler *handler = &handlers[i];
   14d9e:	4a2d      	ldr	r2, [pc, #180]	; (14e54 <hci_event+0x120>)
   14da0:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   14da4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   14da8:	4295      	cmp	r5, r2
   14daa:	d11b      	bne.n	14de4 <hci_event+0xb0>
		if (buf->len < handler->min_len) {
   14dac:	89a1      	ldrh	r1, [r4, #12]
   14dae:	7843      	ldrb	r3, [r0, #1]
   14db0:	4299      	cmp	r1, r3
   14db2:	d319      	bcc.n	14de8 <hci_event+0xb4>
		handler->handler(buf);
   14db4:	6843      	ldr	r3, [r0, #4]
   14db6:	4620      	mov	r0, r4
   14db8:	4798      	blx	r3
	net_buf_unref(buf);
   14dba:	4620      	mov	r0, r4
   14dbc:	f005 fbe6 	bl	1a58c <net_buf_unref>
}
   14dc0:	b003      	add	sp, #12
   14dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   14dc4:	2301      	movs	r3, #1
   14dc6:	e7e3      	b.n	14d90 <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14dc8:	f640 131b 	movw	r3, #2331	; 0x91b
   14dcc:	4a1e      	ldr	r2, [pc, #120]	; (14e48 <hci_event+0x114>)
   14dce:	4922      	ldr	r1, [pc, #136]	; (14e58 <hci_event+0x124>)
   14dd0:	481f      	ldr	r0, [pc, #124]	; (14e50 <hci_event+0x11c>)
   14dd2:	f010 fd2c 	bl	2582e <printk>
   14dd6:	4040      	eors	r0, r0
   14dd8:	f380 8811 	msr	BASEPRI, r0
   14ddc:	f04f 0003 	mov.w	r0, #3
   14de0:	df02      	svc	2
   14de2:	e7d8      	b.n	14d96 <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
   14de4:	3301      	adds	r3, #1
   14de6:	e7d8      	b.n	14d9a <hci_event+0x66>
   14de8:	4a1c      	ldr	r2, [pc, #112]	; (14e5c <hci_event+0x128>)
   14dea:	4b1d      	ldr	r3, [pc, #116]	; (14e60 <hci_event+0x12c>)
   14dec:	1ad2      	subs	r2, r2, r3
   14dee:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14df0:	f04f 0300 	mov.w	r3, #0
   14df4:	2001      	movs	r0, #1
   14df6:	f360 0302 	bfi	r3, r0, #0, #3
   14dfa:	f36f 03c5 	bfc	r3, #3, #3
   14dfe:	f362 138f 	bfi	r3, r2, #6, #10
   14e02:	462a      	mov	r2, r5
   14e04:	4817      	ldr	r0, [pc, #92]	; (14e64 <hci_event+0x130>)
   14e06:	f7fc fe3b 	bl	11a80 <log_2>
			return;
   14e0a:	e7d6      	b.n	14dba <hci_event+0x86>
   14e0c:	4b13      	ldr	r3, [pc, #76]	; (14e5c <hci_event+0x128>)
   14e0e:	4a14      	ldr	r2, [pc, #80]	; (14e60 <hci_event+0x12c>)
   14e10:	1a9b      	subs	r3, r3, r2
   14e12:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   14e14:	f04f 0600 	mov.w	r6, #0
   14e18:	2202      	movs	r2, #2
   14e1a:	f362 0602 	bfi	r6, r2, #0, #3
   14e1e:	f36f 06c5 	bfc	r6, #3, #3
   14e22:	f363 168f 	bfi	r6, r3, #6, #10
   14e26:	89a7      	ldrh	r7, [r4, #12]
   14e28:	4639      	mov	r1, r7
   14e2a:	68a0      	ldr	r0, [r4, #8]
   14e2c:	f7ff f9fa 	bl	14224 <bt_hex_real>
   14e30:	f7fc fc4e 	bl	116d0 <z_log_strdup>
   14e34:	4603      	mov	r3, r0
   14e36:	f8ad 6000 	strh.w	r6, [sp]
   14e3a:	463a      	mov	r2, r7
   14e3c:	4629      	mov	r1, r5
   14e3e:	480a      	ldr	r0, [pc, #40]	; (14e68 <hci_event+0x134>)
   14e40:	f7fc fe9e 	bl	11b80 <log_3>
   14e44:	e7b9      	b.n	14dba <hci_event+0x86>
   14e46:	bf00      	nop
   14e48:	0002b588 	.word	0x0002b588
   14e4c:	0002b5bc 	.word	0x0002b5bc
   14e50:	00029ff8 	.word	0x00029ff8
   14e54:	0002b994 	.word	0x0002b994
   14e58:	0002b668 	.word	0x0002b668
   14e5c:	00029d98 	.word	0x00029d98
   14e60:	00029d70 	.word	0x00029d70
   14e64:	0002b620 	.word	0x0002b620
   14e68:	0002b644 	.word	0x0002b644

00014e6c <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   14e6c:	b538      	push	{r3, r4, r5, lr}
   14e6e:	e003      	b.n	14e78 <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   14e70:	f7ff ff60 	bl	14d34 <hci_event>
	z_impl_k_yield();
   14e74:	f00c f940 	bl	210f8 <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14e78:	f04f 32ff 	mov.w	r2, #4294967295
   14e7c:	f04f 33ff 	mov.w	r3, #4294967295
   14e80:	480f      	ldr	r0, [pc, #60]	; (14ec0 <hci_rx_thread+0x54>)
   14e82:	f005 faeb 	bl	1a45c <net_buf_get>
   14e86:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14e88:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   14e8a:	2901      	cmp	r1, #1
   14e8c:	d0f0      	beq.n	14e70 <hci_rx_thread+0x4>
   14e8e:	2903      	cmp	r1, #3
   14e90:	d102      	bne.n	14e98 <hci_rx_thread+0x2c>
			hci_acl(buf);
   14e92:	f7ff fe2d 	bl	14af0 <hci_acl>
			break;
   14e96:	e7ed      	b.n	14e74 <hci_rx_thread+0x8>
   14e98:	4b0a      	ldr	r3, [pc, #40]	; (14ec4 <hci_rx_thread+0x58>)
   14e9a:	4a0b      	ldr	r2, [pc, #44]	; (14ec8 <hci_rx_thread+0x5c>)
   14e9c:	1a9b      	subs	r3, r3, r2
   14e9e:	08db      	lsrs	r3, r3, #3
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14ea0:	2201      	movs	r2, #1
   14ea2:	f362 0502 	bfi	r5, r2, #0, #3
   14ea6:	f36f 05c5 	bfc	r5, #3, #3
   14eaa:	f363 158f 	bfi	r5, r3, #6, #10
   14eae:	462a      	mov	r2, r5
   14eb0:	4806      	ldr	r0, [pc, #24]	; (14ecc <hci_rx_thread+0x60>)
   14eb2:	f7fc fdaf 	bl	11a14 <log_1>
			net_buf_unref(buf);
   14eb6:	4620      	mov	r0, r4
   14eb8:	f005 fb68 	bl	1a58c <net_buf_unref>
			break;
   14ebc:	e7da      	b.n	14e74 <hci_rx_thread+0x8>
   14ebe:	bf00      	nop
   14ec0:	200003e4 	.word	0x200003e4
   14ec4:	00029d98 	.word	0x00029d98
   14ec8:	00029d70 	.word	0x00029d70
   14ecc:	0002b698 	.word	0x0002b698

00014ed0 <bt_hci_cmd_state_set_init>:
{
   14ed0:	b510      	push	{r4, lr}
   14ed2:	460c      	mov	r4, r1
	state->target = target;
   14ed4:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   14ed6:	604b      	str	r3, [r1, #4]
	state->val = val;
   14ed8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14edc:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   14ede:	f013 fc29 	bl	28734 <net_buf_id>
   14ee2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14ee6:	4b02      	ldr	r3, [pc, #8]	; (14ef0 <bt_hci_cmd_state_set_init+0x20>)
   14ee8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14eec:	6044      	str	r4, [r0, #4]
}
   14eee:	bd10      	pop	{r4, pc}
   14ef0:	20002570 	.word	0x20002570

00014ef4 <bt_hci_cmd_create>:
{
   14ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14ef8:	4682      	mov	sl, r0
   14efa:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   14efc:	f04f 32ff 	mov.w	r2, #4294967295
   14f00:	f04f 33ff 	mov.w	r3, #4294967295
   14f04:	481e      	ldr	r0, [pc, #120]	; (14f80 <bt_hci_cmd_create+0x8c>)
   14f06:	f013 fc3a 	bl	2877e <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   14f0a:	4604      	mov	r4, r0
   14f0c:	b358      	cbz	r0, 14f66 <bt_hci_cmd_create+0x72>
	net_buf_simple_reserve(&buf->b, reserve);
   14f0e:	f104 0808 	add.w	r8, r4, #8
   14f12:	2100      	movs	r1, #0
   14f14:	4640      	mov	r0, r8
   14f16:	f005 fad3 	bl	1a4c0 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14f1a:	2700      	movs	r7, #0
   14f1c:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   14f1e:	4620      	mov	r0, r4
   14f20:	f013 fc08 	bl	28734 <net_buf_id>
   14f24:	4d17      	ldr	r5, [pc, #92]	; (14f84 <bt_hci_cmd_create+0x90>)
   14f26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14f2a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   14f2e:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   14f32:	4620      	mov	r0, r4
   14f34:	f013 fbfe 	bl	28734 <net_buf_id>
   14f38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14f3c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   14f40:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   14f42:	4620      	mov	r0, r4
   14f44:	f013 fbf6 	bl	28734 <net_buf_id>
   14f48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14f4c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   14f50:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   14f52:	2103      	movs	r1, #3
   14f54:	4640      	mov	r0, r8
   14f56:	f005 fc4b 	bl	1a7f0 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   14f5a:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   14f5e:	7086      	strb	r6, [r0, #2]
}
   14f60:	4620      	mov	r0, r4
   14f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT_NO_MSG(buf);
   14f66:	4d08      	ldr	r5, [pc, #32]	; (14f88 <bt_hci_cmd_create+0x94>)
   14f68:	23e9      	movs	r3, #233	; 0xe9
   14f6a:	462a      	mov	r2, r5
   14f6c:	4907      	ldr	r1, [pc, #28]	; (14f8c <bt_hci_cmd_create+0x98>)
   14f6e:	4808      	ldr	r0, [pc, #32]	; (14f90 <bt_hci_cmd_create+0x9c>)
   14f70:	f010 fc5d 	bl	2582e <printk>
   14f74:	21e9      	movs	r1, #233	; 0xe9
   14f76:	4628      	mov	r0, r5
   14f78:	f010 fedb 	bl	25d32 <assert_post_action>
   14f7c:	e7c7      	b.n	14f0e <bt_hci_cmd_create+0x1a>
   14f7e:	bf00      	nop
   14f80:	200008ac 	.word	0x200008ac
   14f84:	20002570 	.word	0x20002570
   14f88:	0002b588 	.word	0x0002b588
   14f8c:	0002c994 	.word	0x0002c994
   14f90:	00029ff8 	.word	0x00029ff8

00014f94 <bt_hci_cmd_send_sync>:
{
   14f94:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f96:	b087      	sub	sp, #28
   14f98:	4606      	mov	r6, r0
   14f9a:	4615      	mov	r5, r2
	if (!buf) {
   14f9c:	460c      	mov	r4, r1
   14f9e:	b361      	cbz	r1, 14ffa <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14fa0:	2201      	movs	r2, #1
   14fa2:	2100      	movs	r1, #0
   14fa4:	4668      	mov	r0, sp
   14fa6:	f014 fbf2 	bl	2978e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   14faa:	4620      	mov	r0, r4
   14fac:	f013 fbc2 	bl	28734 <net_buf_id>
   14fb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14fb4:	4b2f      	ldr	r3, [pc, #188]	; (15074 <bt_hci_cmd_send_sync+0xe0>)
   14fb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14fba:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14fbe:	4620      	mov	r0, r4
   14fc0:	f005 fb1e 	bl	1a600 <net_buf_ref>
   14fc4:	4601      	mov	r1, r0
   14fc6:	482c      	ldr	r0, [pc, #176]	; (15078 <bt_hci_cmd_send_sync+0xe4>)
   14fc8:	f005 faa8 	bl	1a51c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   14fcc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   14fd0:	2300      	movs	r3, #0
   14fd2:	4668      	mov	r0, sp
   14fd4:	f00a f95c 	bl	1f290 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14fd8:	4607      	mov	r7, r0
   14fda:	b9b0      	cbnz	r0, 1500a <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   14fdc:	4620      	mov	r0, r4
   14fde:	f013 fba9 	bl	28734 <net_buf_id>
   14fe2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14fe6:	4b23      	ldr	r3, [pc, #140]	; (15074 <bt_hci_cmd_send_sync+0xe0>)
   14fe8:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   14fec:	b9ff      	cbnz	r7, 1502e <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   14fee:	2d00      	cmp	r5, #0
   14ff0:	d03a      	beq.n	15068 <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
   14ff2:	602c      	str	r4, [r5, #0]
	return 0;
   14ff4:	2000      	movs	r0, #0
}
   14ff6:	b007      	add	sp, #28
   14ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   14ffa:	f7ff ff7b 	bl	14ef4 <bt_hci_cmd_create>
		if (!buf) {
   14ffe:	4604      	mov	r4, r0
   15000:	2800      	cmp	r0, #0
   15002:	d1cd      	bne.n	14fa0 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   15004:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15008:	e7f5      	b.n	14ff6 <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1500a:	f240 1331 	movw	r3, #305	; 0x131
   1500e:	4a1b      	ldr	r2, [pc, #108]	; (1507c <bt_hci_cmd_send_sync+0xe8>)
   15010:	491b      	ldr	r1, [pc, #108]	; (15080 <bt_hci_cmd_send_sync+0xec>)
   15012:	481c      	ldr	r0, [pc, #112]	; (15084 <bt_hci_cmd_send_sync+0xf0>)
   15014:	f010 fc0b 	bl	2582e <printk>
   15018:	4639      	mov	r1, r7
   1501a:	481b      	ldr	r0, [pc, #108]	; (15088 <bt_hci_cmd_send_sync+0xf4>)
   1501c:	f010 fc07 	bl	2582e <printk>
   15020:	4040      	eors	r0, r0
   15022:	f380 8811 	msr	BASEPRI, r0
   15026:	f04f 0003 	mov.w	r0, #3
   1502a:	df02      	svc	2
   1502c:	e7d6      	b.n	14fdc <bt_hci_cmd_send_sync+0x48>
   1502e:	4a17      	ldr	r2, [pc, #92]	; (1508c <bt_hci_cmd_send_sync+0xf8>)
   15030:	4b17      	ldr	r3, [pc, #92]	; (15090 <bt_hci_cmd_send_sync+0xfc>)
   15032:	1ad2      	subs	r2, r2, r3
   15034:	08d2      	lsrs	r2, r2, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   15036:	f04f 0300 	mov.w	r3, #0
   1503a:	2102      	movs	r1, #2
   1503c:	f361 0302 	bfi	r3, r1, #0, #3
   15040:	f36f 03c5 	bfc	r3, #3, #3
   15044:	f362 138f 	bfi	r3, r2, #6, #10
   15048:	463a      	mov	r2, r7
   1504a:	4631      	mov	r1, r6
   1504c:	4811      	ldr	r0, [pc, #68]	; (15094 <bt_hci_cmd_send_sync+0x100>)
   1504e:	f7fc fd17 	bl	11a80 <log_2>
		net_buf_unref(buf);
   15052:	4620      	mov	r0, r4
   15054:	f005 fa9a 	bl	1a58c <net_buf_unref>
		switch (status) {
   15058:	2f09      	cmp	r7, #9
   1505a:	d002      	beq.n	15062 <bt_hci_cmd_send_sync+0xce>
			return -EIO;
   1505c:	f06f 0004 	mvn.w	r0, #4
   15060:	e7c9      	b.n	14ff6 <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   15062:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   15066:	e7c6      	b.n	14ff6 <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   15068:	4620      	mov	r0, r4
   1506a:	f005 fa8f 	bl	1a58c <net_buf_unref>
	return 0;
   1506e:	2000      	movs	r0, #0
   15070:	e7c1      	b.n	14ff6 <bt_hci_cmd_send_sync+0x62>
   15072:	bf00      	nop
   15074:	20002570 	.word	0x20002570
   15078:	20000400 	.word	0x20000400
   1507c:	0002b588 	.word	0x0002b588
   15080:	0002b6ac 	.word	0x0002b6ac
   15084:	00029ff8 	.word	0x00029ff8
   15088:	0002b6b8 	.word	0x0002b6b8
   1508c:	00029d98 	.word	0x00029d98
   15090:	00029d70 	.word	0x00029d70
   15094:	0002b6d8 	.word	0x0002b6d8

00015098 <common_init>:
{
   15098:	b510      	push	{r4, lr}
   1509a:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1509c:	4b22      	ldr	r3, [pc, #136]	; (15128 <common_init+0x90>)
   1509e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   150a2:	689b      	ldr	r3, [r3, #8]
   150a4:	f013 0f01 	tst.w	r3, #1
   150a8:	d10d      	bne.n	150c6 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   150aa:	aa01      	add	r2, sp, #4
   150ac:	2100      	movs	r1, #0
   150ae:	f640 4003 	movw	r0, #3075	; 0xc03
   150b2:	f7ff ff6f 	bl	14f94 <bt_hci_cmd_send_sync>
		if (err) {
   150b6:	4604      	mov	r4, r0
   150b8:	b968      	cbnz	r0, 150d6 <common_init+0x3e>
		hci_reset_complete(rsp);
   150ba:	9801      	ldr	r0, [sp, #4]
   150bc:	f7ff fa2e 	bl	1451c <hci_reset_complete>
		net_buf_unref(rsp);
   150c0:	9801      	ldr	r0, [sp, #4]
   150c2:	f005 fa63 	bl	1a58c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   150c6:	aa01      	add	r2, sp, #4
   150c8:	2100      	movs	r1, #0
   150ca:	f241 0003 	movw	r0, #4099	; 0x1003
   150ce:	f7ff ff61 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   150d2:	4604      	mov	r4, r0
   150d4:	b110      	cbz	r0, 150dc <common_init+0x44>
}
   150d6:	4620      	mov	r0, r4
   150d8:	b002      	add	sp, #8
   150da:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   150dc:	9801      	ldr	r0, [sp, #4]
   150de:	f7ff fa37 	bl	14550 <read_local_features_complete>
	net_buf_unref(rsp);
   150e2:	9801      	ldr	r0, [sp, #4]
   150e4:	f005 fa52 	bl	1a58c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   150e8:	aa01      	add	r2, sp, #4
   150ea:	2100      	movs	r1, #0
   150ec:	f241 0001 	movw	r0, #4097	; 0x1001
   150f0:	f7ff ff50 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   150f4:	4604      	mov	r4, r0
   150f6:	2800      	cmp	r0, #0
   150f8:	d1ed      	bne.n	150d6 <common_init+0x3e>
	read_local_ver_complete(rsp);
   150fa:	9801      	ldr	r0, [sp, #4]
   150fc:	f7ff f9da 	bl	144b4 <read_local_ver_complete>
	net_buf_unref(rsp);
   15100:	9801      	ldr	r0, [sp, #4]
   15102:	f005 fa43 	bl	1a58c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   15106:	aa01      	add	r2, sp, #4
   15108:	2100      	movs	r1, #0
   1510a:	f241 0002 	movw	r0, #4098	; 0x1002
   1510e:	f7ff ff41 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   15112:	4604      	mov	r4, r0
   15114:	2800      	cmp	r0, #0
   15116:	d1de      	bne.n	150d6 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   15118:	9801      	ldr	r0, [sp, #4]
   1511a:	f7ff fa23 	bl	14564 <read_supported_commands_complete>
	net_buf_unref(rsp);
   1511e:	9801      	ldr	r0, [sp, #4]
   15120:	f005 fa34 	bl	1a58c <net_buf_unref>
	return 0;
   15124:	e7d7      	b.n	150d6 <common_init+0x3e>
   15126:	bf00      	nop
   15128:	200002b0 	.word	0x200002b0

0001512c <hci_le_read_max_data_len>:
{
   1512c:	b570      	push	{r4, r5, r6, lr}
   1512e:	b082      	sub	sp, #8
   15130:	4605      	mov	r5, r0
   15132:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   15134:	aa01      	add	r2, sp, #4
   15136:	2100      	movs	r1, #0
   15138:	f242 002f 	movw	r0, #8239	; 0x202f
   1513c:	f7ff ff2a 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   15140:	4606      	mov	r6, r0
   15142:	b960      	cbnz	r0, 1515e <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   15144:	9801      	ldr	r0, [sp, #4]
   15146:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15148:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1514c:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1514e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   15152:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   15154:	f005 fa1a 	bl	1a58c <net_buf_unref>
}
   15158:	4630      	mov	r0, r6
   1515a:	b002      	add	sp, #8
   1515c:	bd70      	pop	{r4, r5, r6, pc}
   1515e:	4b08      	ldr	r3, [pc, #32]	; (15180 <hci_le_read_max_data_len+0x54>)
   15160:	4a08      	ldr	r2, [pc, #32]	; (15184 <hci_le_read_max_data_len+0x58>)
   15162:	1a9b      	subs	r3, r3, r2
   15164:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to read DLE max data len");
   15166:	f04f 0100 	mov.w	r1, #0
   1516a:	2201      	movs	r2, #1
   1516c:	f362 0102 	bfi	r1, r2, #0, #3
   15170:	f36f 01c5 	bfc	r1, #3, #3
   15174:	f363 118f 	bfi	r1, r3, #6, #10
   15178:	4803      	ldr	r0, [pc, #12]	; (15188 <hci_le_read_max_data_len+0x5c>)
   1517a:	f7fc fc1b 	bl	119b4 <log_0>
		return err;
   1517e:	e7eb      	b.n	15158 <hci_le_read_max_data_len+0x2c>
   15180:	00029d98 	.word	0x00029d98
   15184:	00029d70 	.word	0x00029d70
   15188:	0002b6f4 	.word	0x0002b6f4

0001518c <le_set_event_mask>:
{
   1518c:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1518e:	2108      	movs	r1, #8
   15190:	f242 0001 	movw	r0, #8193	; 0x2001
   15194:	f7ff feae 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   15198:	b398      	cbz	r0, 15202 <le_set_event_mask+0x76>
   1519a:	4604      	mov	r4, r0
   1519c:	2108      	movs	r1, #8
   1519e:	4408      	add	r0, r1
   151a0:	f005 fb26 	bl	1a7f0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   151a4:	4b18      	ldr	r3, [pc, #96]	; (15208 <le_set_event_mask+0x7c>)
   151a6:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
   151aa:	f011 0f02 	tst.w	r1, #2
   151ae:	d125      	bne.n	151fc <le_set_event_mask+0x70>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   151b0:	220f      	movs	r2, #15
   151b2:	2300      	movs	r3, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   151b4:	f011 0f20 	tst.w	r1, #32
   151b8:	d001      	beq.n	151be <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   151ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   151be:	4912      	ldr	r1, [pc, #72]	; (15208 <le_set_event_mask+0x7c>)
   151c0:	f891 10d1 	ldrb.w	r1, [r1, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   151c4:	f011 0f09 	tst.w	r1, #9
   151c8:	d001      	beq.n	151ce <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   151ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	dst[0] = val;
   151ce:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   151d0:	f3c2 2107 	ubfx	r1, r2, #8, #8
   151d4:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   151d6:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   151d8:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   151da:	0e12      	lsrs	r2, r2, #24
   151dc:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   151de:	b29a      	uxth	r2, r3
	dst[0] = val;
   151e0:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   151e2:	0a12      	lsrs	r2, r2, #8
   151e4:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   151e6:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   151e8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   151ea:	0a13      	lsrs	r3, r2, #8
   151ec:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   151ee:	2200      	movs	r2, #0
   151f0:	4621      	mov	r1, r4
   151f2:	f242 0001 	movw	r0, #8193	; 0x2001
   151f6:	f7ff fecd 	bl	14f94 <bt_hci_cmd_send_sync>
}
   151fa:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   151fc:	222f      	movs	r2, #47	; 0x2f
   151fe:	2300      	movs	r3, #0
   15200:	e7d8      	b.n	151b4 <le_set_event_mask+0x28>
		return -ENOBUFS;
   15202:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15206:	e7f8      	b.n	151fa <le_set_event_mask+0x6e>
   15208:	200002b0 	.word	0x200002b0

0001520c <le_init>:
{
   1520c:	b510      	push	{r4, lr}
   1520e:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   15210:	4b50      	ldr	r3, [pc, #320]	; (15354 <le_init+0x148>)
   15212:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   15216:	f013 0f40 	tst.w	r3, #64	; 0x40
   1521a:	d00a      	beq.n	15232 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   1521c:	aa01      	add	r2, sp, #4
   1521e:	2100      	movs	r1, #0
   15220:	f242 0003 	movw	r0, #8195	; 0x2003
   15224:	f7ff feb6 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   15228:	4603      	mov	r3, r0
   1522a:	b1a8      	cbz	r0, 15258 <le_init+0x4c>
}
   1522c:	4618      	mov	r0, r3
   1522e:	b002      	add	sp, #8
   15230:	bd10      	pop	{r4, pc}
   15232:	4b49      	ldr	r3, [pc, #292]	; (15358 <le_init+0x14c>)
   15234:	4a49      	ldr	r2, [pc, #292]	; (1535c <le_init+0x150>)
   15236:	1a9b      	subs	r3, r3, r2
   15238:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
   1523a:	f04f 0100 	mov.w	r1, #0
   1523e:	2201      	movs	r2, #1
   15240:	f362 0102 	bfi	r1, r2, #0, #3
   15244:	f36f 01c5 	bfc	r1, #3, #3
   15248:	f363 118f 	bfi	r1, r3, #6, #10
   1524c:	4844      	ldr	r0, [pc, #272]	; (15360 <le_init+0x154>)
   1524e:	f7fc fbb1 	bl	119b4 <log_0>
		return -ENODEV;
   15252:	f06f 0312 	mvn.w	r3, #18
   15256:	e7e9      	b.n	1522c <le_init+0x20>
	read_le_features_complete(rsp);
   15258:	9801      	ldr	r0, [sp, #4]
   1525a:	f7ff f98d 	bl	14578 <read_le_features_complete>
	net_buf_unref(rsp);
   1525e:	9801      	ldr	r0, [sp, #4]
   15260:	f005 f994 	bl	1a58c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   15264:	aa01      	add	r2, sp, #4
   15266:	2100      	movs	r1, #0
   15268:	f242 0002 	movw	r0, #8194	; 0x2002
   1526c:	f7ff fe92 	bl	14f94 <bt_hci_cmd_send_sync>
		if (err) {
   15270:	4603      	mov	r3, r0
   15272:	2800      	cmp	r0, #0
   15274:	d1da      	bne.n	1522c <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   15276:	9801      	ldr	r0, [sp, #4]
   15278:	f7ff f988 	bl	1458c <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   1527c:	9801      	ldr	r0, [sp, #4]
   1527e:	f005 f985 	bl	1a58c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   15282:	4b34      	ldr	r3, [pc, #208]	; (15354 <le_init+0x148>)
   15284:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   15288:	f013 0f20 	tst.w	r3, #32
   1528c:	d032      	beq.n	152f4 <le_init+0xe8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1528e:	4b31      	ldr	r3, [pc, #196]	; (15354 <le_init+0x148>)
   15290:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   15294:	f013 0f08 	tst.w	r3, #8
   15298:	d144      	bne.n	15324 <le_init+0x118>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   1529a:	4b2e      	ldr	r3, [pc, #184]	; (15354 <le_init+0x148>)
   1529c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   152a0:	f013 0f20 	tst.w	r3, #32
   152a4:	d022      	beq.n	152ec <le_init+0xe0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   152a6:	f10d 0102 	add.w	r1, sp, #2
   152aa:	4668      	mov	r0, sp
   152ac:	f7ff ff3e 	bl	1512c <hci_le_read_max_data_len>
		if (err) {
   152b0:	4603      	mov	r3, r0
   152b2:	2800      	cmp	r0, #0
   152b4:	d1ba      	bne.n	1522c <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   152b6:	2104      	movs	r1, #4
   152b8:	f242 0024 	movw	r0, #8228	; 0x2024
   152bc:	f7ff fe1a 	bl	14ef4 <bt_hci_cmd_create>
		if (!buf) {
   152c0:	4604      	mov	r4, r0
   152c2:	2800      	cmp	r0, #0
   152c4:	d03f      	beq.n	15346 <le_init+0x13a>
   152c6:	2104      	movs	r1, #4
   152c8:	3008      	adds	r0, #8
   152ca:	f005 fa91 	bl	1a7f0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   152ce:	f8bd 3000 	ldrh.w	r3, [sp]
   152d2:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   152d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   152d8:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   152da:	2200      	movs	r2, #0
   152dc:	4621      	mov	r1, r4
   152de:	f242 0024 	movw	r0, #8228	; 0x2024
   152e2:	f7ff fe57 	bl	14f94 <bt_hci_cmd_send_sync>
		if (err) {
   152e6:	4603      	mov	r3, r0
   152e8:	2800      	cmp	r0, #0
   152ea:	d19f      	bne.n	1522c <le_init+0x20>
	return  le_set_event_mask();
   152ec:	f7ff ff4e 	bl	1518c <le_set_event_mask>
   152f0:	4603      	mov	r3, r0
   152f2:	e79b      	b.n	1522c <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   152f4:	2102      	movs	r1, #2
   152f6:	f640 406d 	movw	r0, #3181	; 0xc6d
   152fa:	f7ff fdfb 	bl	14ef4 <bt_hci_cmd_create>
		if (!buf) {
   152fe:	4604      	mov	r4, r0
   15300:	b320      	cbz	r0, 1534c <le_init+0x140>
   15302:	2102      	movs	r1, #2
   15304:	3008      	adds	r0, #8
   15306:	f005 fa73 	bl	1a7f0 <net_buf_simple_add>
		cp_le->le = 0x01;
   1530a:	2301      	movs	r3, #1
   1530c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1530e:	2200      	movs	r2, #0
   15310:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   15312:	4621      	mov	r1, r4
   15314:	f640 406d 	movw	r0, #3181	; 0xc6d
   15318:	f7ff fe3c 	bl	14f94 <bt_hci_cmd_send_sync>
		if (err) {
   1531c:	4603      	mov	r3, r0
   1531e:	2800      	cmp	r0, #0
   15320:	d0b5      	beq.n	1528e <le_init+0x82>
   15322:	e783      	b.n	1522c <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   15324:	aa01      	add	r2, sp, #4
   15326:	2100      	movs	r1, #0
   15328:	f242 001c 	movw	r0, #8220	; 0x201c
   1532c:	f7ff fe32 	bl	14f94 <bt_hci_cmd_send_sync>
		if (err) {
   15330:	4603      	mov	r3, r0
   15332:	2800      	cmp	r0, #0
   15334:	f47f af7a 	bne.w	1522c <le_init+0x20>
		le_read_supp_states_complete(rsp);
   15338:	9801      	ldr	r0, [sp, #4]
   1533a:	f7ff f8d1 	bl	144e0 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   1533e:	9801      	ldr	r0, [sp, #4]
   15340:	f005 f924 	bl	1a58c <net_buf_unref>
   15344:	e7a9      	b.n	1529a <le_init+0x8e>
			return -ENOBUFS;
   15346:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1534a:	e76f      	b.n	1522c <le_init+0x20>
			return -ENOBUFS;
   1534c:	f06f 0368 	mvn.w	r3, #104	; 0x68
   15350:	e76c      	b.n	1522c <le_init+0x20>
   15352:	bf00      	nop
   15354:	200002b0 	.word	0x200002b0
   15358:	00029d98 	.word	0x00029d98
   1535c:	00029d70 	.word	0x00029d70
   15360:	0002b714 	.word	0x0002b714

00015364 <bt_br_init>:
{
   15364:	b510      	push	{r4, lr}
   15366:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   15368:	4b0b      	ldr	r3, [pc, #44]	; (15398 <bt_br_init+0x34>)
   1536a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1536e:	b11b      	cbz	r3, 15378 <bt_br_init+0x14>
		return 0;
   15370:	2400      	movs	r4, #0
}
   15372:	4620      	mov	r0, r4
   15374:	b002      	add	sp, #8
   15376:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   15378:	aa01      	add	r2, sp, #4
   1537a:	2100      	movs	r1, #0
   1537c:	f241 0005 	movw	r0, #4101	; 0x1005
   15380:	f7ff fe08 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   15384:	4604      	mov	r4, r0
   15386:	2800      	cmp	r0, #0
   15388:	d1f3      	bne.n	15372 <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   1538a:	9801      	ldr	r0, [sp, #4]
   1538c:	f7ff f912 	bl	145b4 <read_buffer_size_complete>
	net_buf_unref(rsp);
   15390:	9801      	ldr	r0, [sp, #4]
   15392:	f005 f8fb 	bl	1a58c <net_buf_unref>
	return 0;
   15396:	e7ec      	b.n	15372 <bt_br_init+0xe>
   15398:	200002b0 	.word	0x200002b0

0001539c <hci_vs_init>:
{
   1539c:	b510      	push	{r4, lr}
   1539e:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   153a0:	aa01      	add	r2, sp, #4
   153a2:	2100      	movs	r1, #0
   153a4:	f64f 4001 	movw	r0, #64513	; 0xfc01
   153a8:	f7ff fdf4 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   153ac:	bb68      	cbnz	r0, 1540a <hci_vs_init+0x6e>
	net_buf_unref(rsp);
   153ae:	9801      	ldr	r0, [sp, #4]
   153b0:	f005 f8ec 	bl	1a58c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   153b4:	aa01      	add	r2, sp, #4
   153b6:	2100      	movs	r1, #0
   153b8:	f64f 4002 	movw	r0, #64514	; 0xfc02
   153bc:	f7ff fdea 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   153c0:	2800      	cmp	r0, #0
   153c2:	d134      	bne.n	1542e <hci_vs_init+0x92>
	rp.cmds = (void *)rsp->data;
   153c4:	9b01      	ldr	r3, [sp, #4]
   153c6:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   153c8:	4c2a      	ldr	r4, [pc, #168]	; (15474 <hci_vs_init+0xd8>)
   153ca:	2202      	movs	r2, #2
   153cc:	3101      	adds	r1, #1
   153ce:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   153d2:	f011 fa11 	bl	267f8 <memcpy>
	net_buf_unref(rsp);
   153d6:	9801      	ldr	r0, [sp, #4]
   153d8:	f005 f8d8 	bl	1a58c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   153dc:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   153e0:	f013 0f04 	tst.w	r3, #4
   153e4:	d021      	beq.n	1542a <hci_vs_init+0x8e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   153e6:	aa01      	add	r2, sp, #4
   153e8:	2100      	movs	r1, #0
   153ea:	f64f 4003 	movw	r0, #64515	; 0xfc03
   153ee:	f7ff fdd1 	bl	14f94 <bt_hci_cmd_send_sync>
		if (err) {
   153f2:	bb68      	cbnz	r0, 15450 <hci_vs_init+0xb4>
		rp.feat = (void *)rsp->data;
   153f4:	9b01      	ldr	r3, [sp, #4]
   153f6:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   153f8:	2201      	movs	r2, #1
   153fa:	4411      	add	r1, r2
   153fc:	481e      	ldr	r0, [pc, #120]	; (15478 <hci_vs_init+0xdc>)
   153fe:	f011 f9fb 	bl	267f8 <memcpy>
		net_buf_unref(rsp);
   15402:	9801      	ldr	r0, [sp, #4]
   15404:	f005 f8c2 	bl	1a58c <net_buf_unref>
   15408:	e00f      	b.n	1542a <hci_vs_init+0x8e>
   1540a:	4b1c      	ldr	r3, [pc, #112]	; (1547c <hci_vs_init+0xe0>)
   1540c:	4a1c      	ldr	r2, [pc, #112]	; (15480 <hci_vs_init+0xe4>)
   1540e:	1a9b      	subs	r3, r3, r2
   15410:	08db      	lsrs	r3, r3, #3
		BT_WARN("Vendor HCI extensions not available");
   15412:	f04f 0100 	mov.w	r1, #0
   15416:	2202      	movs	r2, #2
   15418:	f362 0102 	bfi	r1, r2, #0, #3
   1541c:	f36f 01c5 	bfc	r1, #3, #3
   15420:	f363 118f 	bfi	r1, r3, #6, #10
   15424:	4817      	ldr	r0, [pc, #92]	; (15484 <hci_vs_init+0xe8>)
   15426:	f7fc fac5 	bl	119b4 <log_0>
}
   1542a:	b002      	add	sp, #8
   1542c:	bd10      	pop	{r4, pc}
   1542e:	4b13      	ldr	r3, [pc, #76]	; (1547c <hci_vs_init+0xe0>)
   15430:	4a13      	ldr	r2, [pc, #76]	; (15480 <hci_vs_init+0xe4>)
   15432:	1a9b      	subs	r3, r3, r2
   15434:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read supported vendor commands");
   15436:	f04f 0100 	mov.w	r1, #0
   1543a:	2202      	movs	r2, #2
   1543c:	f362 0102 	bfi	r1, r2, #0, #3
   15440:	f36f 01c5 	bfc	r1, #3, #3
   15444:	f363 118f 	bfi	r1, r3, #6, #10
   15448:	480f      	ldr	r0, [pc, #60]	; (15488 <hci_vs_init+0xec>)
   1544a:	f7fc fab3 	bl	119b4 <log_0>
		return;
   1544e:	e7ec      	b.n	1542a <hci_vs_init+0x8e>
   15450:	4b0a      	ldr	r3, [pc, #40]	; (1547c <hci_vs_init+0xe0>)
   15452:	4a0b      	ldr	r2, [pc, #44]	; (15480 <hci_vs_init+0xe4>)
   15454:	1a9b      	subs	r3, r3, r2
   15456:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to read supported vendor features");
   15458:	f04f 0100 	mov.w	r1, #0
   1545c:	2202      	movs	r2, #2
   1545e:	f362 0102 	bfi	r1, r2, #0, #3
   15462:	f36f 01c5 	bfc	r1, #3, #3
   15466:	f363 118f 	bfi	r1, r3, #6, #10
   1546a:	4808      	ldr	r0, [pc, #32]	; (1548c <hci_vs_init+0xf0>)
   1546c:	f7fc faa2 	bl	119b4 <log_0>
			return;
   15470:	e7db      	b.n	1542a <hci_vs_init+0x8e>
   15472:	bf00      	nop
   15474:	200002b0 	.word	0x200002b0
   15478:	20000368 	.word	0x20000368
   1547c:	00029d98 	.word	0x00029d98
   15480:	00029d70 	.word	0x00029d70
   15484:	0002b738 	.word	0x0002b738
   15488:	0002b75c 	.word	0x0002b75c
   1548c:	0002b788 	.word	0x0002b788

00015490 <hci_init>:
{
   15490:	b508      	push	{r3, lr}
	err = common_init();
   15492:	f7ff fe01 	bl	15098 <common_init>
	if (err) {
   15496:	4603      	mov	r3, r0
   15498:	b108      	cbz	r0, 1549e <hci_init+0xe>
}
   1549a:	4618      	mov	r0, r3
   1549c:	bd08      	pop	{r3, pc}
	err = le_init();
   1549e:	f7ff feb5 	bl	1520c <le_init>
	if (err) {
   154a2:	4603      	mov	r3, r0
   154a4:	2800      	cmp	r0, #0
   154a6:	d1f8      	bne.n	1549a <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   154a8:	4b16      	ldr	r3, [pc, #88]	; (15504 <hci_init+0x74>)
   154aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   154ae:	f013 0f20 	tst.w	r3, #32
   154b2:	d00e      	beq.n	154d2 <hci_init+0x42>
	else if (!bt_dev.le.acl_mtu) {
   154b4:	4b13      	ldr	r3, [pc, #76]	; (15504 <hci_init+0x74>)
   154b6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   154ba:	b183      	cbz	r3, 154de <hci_init+0x4e>
	err = set_event_mask();
   154bc:	f011 fa7d 	bl	269ba <set_event_mask>
	if (err) {
   154c0:	4603      	mov	r3, r0
   154c2:	2800      	cmp	r0, #0
   154c4:	d1e9      	bne.n	1549a <hci_init+0xa>
	hci_vs_init();
   154c6:	f7ff ff69 	bl	1539c <hci_vs_init>
	err = bt_id_init();
   154ca:	f000 ffd9 	bl	16480 <bt_id_init>
   154ce:	4603      	mov	r3, r0
	if (err) {
   154d0:	e7e3      	b.n	1549a <hci_init+0xa>
		err = bt_br_init();
   154d2:	f7ff ff47 	bl	15364 <bt_br_init>
		if (err) {
   154d6:	4603      	mov	r3, r0
   154d8:	2800      	cmp	r0, #0
   154da:	d0ef      	beq.n	154bc <hci_init+0x2c>
   154dc:	e7dd      	b.n	1549a <hci_init+0xa>
   154de:	4b0a      	ldr	r3, [pc, #40]	; (15508 <hci_init+0x78>)
   154e0:	4a0a      	ldr	r2, [pc, #40]	; (1550c <hci_init+0x7c>)
   154e2:	1a9b      	subs	r3, r3, r2
   154e4:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL BR/EDR buffers not initialized");
   154e6:	f04f 0100 	mov.w	r1, #0
   154ea:	2201      	movs	r2, #1
   154ec:	f362 0102 	bfi	r1, r2, #0, #3
   154f0:	f36f 01c5 	bfc	r1, #3, #3
   154f4:	f363 118f 	bfi	r1, r3, #6, #10
   154f8:	4805      	ldr	r0, [pc, #20]	; (15510 <hci_init+0x80>)
   154fa:	f7fc fa5b 	bl	119b4 <log_0>
		return -EIO;
   154fe:	f06f 0304 	mvn.w	r3, #4
   15502:	e7ca      	b.n	1549a <hci_init+0xa>
   15504:	200002b0 	.word	0x200002b0
   15508:	00029d98 	.word	0x00029d98
   1550c:	00029d70 	.word	0x00029d70
   15510:	0002b7b4 	.word	0x0002b7b4

00015514 <bt_send>:
{
   15514:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   15516:	4b03      	ldr	r3, [pc, #12]	; (15524 <bt_send+0x10>)
   15518:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   1551c:	691b      	ldr	r3, [r3, #16]
   1551e:	4798      	blx	r3
}
   15520:	bd08      	pop	{r3, pc}
   15522:	bf00      	nop
   15524:	200002b0 	.word	0x200002b0

00015528 <bt_hci_cmd_send>:
{
   15528:	b538      	push	{r3, r4, r5, lr}
   1552a:	4604      	mov	r4, r0
	if (!buf) {
   1552c:	460d      	mov	r5, r1
   1552e:	b151      	cbz	r1, 15546 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   15530:	f640 4335 	movw	r3, #3125	; 0xc35
   15534:	429c      	cmp	r4, r3
   15536:	d00e      	beq.n	15556 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   15538:	4629      	mov	r1, r5
   1553a:	4814      	ldr	r0, [pc, #80]	; (1558c <bt_hci_cmd_send+0x64>)
   1553c:	f004 ffee 	bl	1a51c <net_buf_put>
	return 0;
   15540:	2400      	movs	r4, #0
}
   15542:	4620      	mov	r0, r4
   15544:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   15546:	f7ff fcd5 	bl	14ef4 <bt_hci_cmd_create>
		if (!buf) {
   1554a:	4605      	mov	r5, r0
   1554c:	2800      	cmp	r0, #0
   1554e:	d1ef      	bne.n	15530 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   15550:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15554:	e7f5      	b.n	15542 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   15556:	4628      	mov	r0, r5
   15558:	f7ff ffdc 	bl	15514 <bt_send>
		if (err) {
   1555c:	4604      	mov	r4, r0
   1555e:	2800      	cmp	r0, #0
   15560:	d0ef      	beq.n	15542 <bt_hci_cmd_send+0x1a>
   15562:	4b0b      	ldr	r3, [pc, #44]	; (15590 <bt_hci_cmd_send+0x68>)
   15564:	4a0b      	ldr	r2, [pc, #44]	; (15594 <bt_hci_cmd_send+0x6c>)
   15566:	1a9b      	subs	r3, r3, r2
   15568:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   1556a:	f04f 0200 	mov.w	r2, #0
   1556e:	2101      	movs	r1, #1
   15570:	f361 0202 	bfi	r2, r1, #0, #3
   15574:	f36f 02c5 	bfc	r2, #3, #3
   15578:	f363 128f 	bfi	r2, r3, #6, #10
   1557c:	4601      	mov	r1, r0
   1557e:	4806      	ldr	r0, [pc, #24]	; (15598 <bt_hci_cmd_send+0x70>)
   15580:	f7fc fa48 	bl	11a14 <log_1>
			net_buf_unref(buf);
   15584:	4628      	mov	r0, r5
   15586:	f005 f801 	bl	1a58c <net_buf_unref>
		return err;
   1558a:	e7da      	b.n	15542 <bt_hci_cmd_send+0x1a>
   1558c:	20000400 	.word	0x20000400
   15590:	00029d98 	.word	0x00029d98
   15594:	00029d70 	.word	0x00029d70
   15598:	0002b7d8 	.word	0x0002b7d8

0001559c <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   1559c:	7a83      	ldrb	r3, [r0, #10]
   1559e:	2b07      	cmp	r3, #7
   155a0:	d000      	beq.n	155a4 <conn_auto_initiate+0x8>
   155a2:	4770      	bx	lr
{
   155a4:	b530      	push	{r4, r5, lr}
   155a6:	b085      	sub	sp, #20
   155a8:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   155aa:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   155ac:	f3bf 8f5b 	dmb	ish
   155b0:	6843      	ldr	r3, [r0, #4]
   155b2:	f3bf 8f5b 	dmb	ish
   155b6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   155ba:	d10b      	bne.n	155d4 <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   155bc:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   155be:	b12b      	cbz	r3, 155cc <conn_auto_initiate+0x30>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   155c0:	4b37      	ldr	r3, [pc, #220]	; (156a0 <conn_auto_initiate+0x104>)
   155c2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   155c6:	f013 0f08 	tst.w	r3, #8
   155ca:	d003      	beq.n	155d4 <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   155cc:	4620      	mov	r0, r4
   155ce:	f011 fa9a 	bl	26b06 <hci_le_read_remote_features>
		if (!err) {
   155d2:	b1d0      	cbz	r0, 1560a <conn_auto_initiate+0x6e>
   155d4:	f3bf 8f5b 	dmb	ish
   155d8:	6863      	ldr	r3, [r4, #4]
   155da:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   155de:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   155e2:	d105      	bne.n	155f0 <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   155e4:	4b2e      	ldr	r3, [pc, #184]	; (156a0 <conn_auto_initiate+0x104>)
   155e6:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   155ea:	f013 0f01 	tst.w	r3, #1
   155ee:	d10e      	bne.n	1560e <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   155f0:	4b2b      	ldr	r3, [pc, #172]	; (156a0 <conn_auto_initiate+0x104>)
   155f2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   155f6:	f013 0f20 	tst.w	r3, #32
   155fa:	d006      	beq.n	1560a <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   155fc:	4b28      	ldr	r3, [pc, #160]	; (156a0 <conn_auto_initiate+0x104>)
   155fe:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   15602:	689b      	ldr	r3, [r3, #8]
   15604:	f013 0f02 	tst.w	r3, #2
   15608:	d128      	bne.n	1565c <conn_auto_initiate+0xc0>
}
   1560a:	b005      	add	sp, #20
   1560c:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1560e:	2100      	movs	r1, #0
   15610:	9100      	str	r1, [sp, #0]
   15612:	2302      	movs	r3, #2
   15614:	461a      	mov	r2, r3
   15616:	4620      	mov	r0, r4
   15618:	f011 fa51 	bl	26abe <bt_le_set_phy>
		if (!err) {
   1561c:	4601      	mov	r1, r0
   1561e:	b180      	cbz	r0, 15642 <conn_auto_initiate+0xa6>
   15620:	4b20      	ldr	r3, [pc, #128]	; (156a4 <conn_auto_initiate+0x108>)
   15622:	4a21      	ldr	r2, [pc, #132]	; (156a8 <conn_auto_initiate+0x10c>)
   15624:	1a9b      	subs	r3, r3, r2
   15626:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set LE PHY (%d)", err);
   15628:	f04f 0200 	mov.w	r2, #0
   1562c:	2001      	movs	r0, #1
   1562e:	f360 0202 	bfi	r2, r0, #0, #3
   15632:	f36f 02c5 	bfc	r2, #3, #3
   15636:	f363 128f 	bfi	r2, r3, #6, #10
   1563a:	481c      	ldr	r0, [pc, #112]	; (156ac <conn_auto_initiate+0x110>)
   1563c:	f7fc f9ea 	bl	11a14 <log_1>
   15640:	e7d6      	b.n	155f0 <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15642:	f3bf 8f5b 	dmb	ish
   15646:	e855 3f00 	ldrex	r3, [r5]
   1564a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1564e:	e845 3200 	strex	r2, r3, [r5]
   15652:	2a00      	cmp	r2, #0
   15654:	d1f7      	bne.n	15646 <conn_auto_initiate+0xaa>
   15656:	f3bf 8f5b 	dmb	ish
			return;
   1565a:	e7d6      	b.n	1560a <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1565c:	f10d 010e 	add.w	r1, sp, #14
   15660:	a803      	add	r0, sp, #12
   15662:	f7ff fd63 	bl	1512c <hci_le_read_max_data_len>
			if (!err) {
   15666:	2800      	cmp	r0, #0
   15668:	d1cf      	bne.n	1560a <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   1566a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1566e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15672:	4620      	mov	r0, r4
   15674:	f011 fa07 	bl	26a86 <bt_le_set_data_len>
				if (err) {
   15678:	4601      	mov	r1, r0
   1567a:	2800      	cmp	r0, #0
   1567c:	d0c5      	beq.n	1560a <conn_auto_initiate+0x6e>
   1567e:	4b09      	ldr	r3, [pc, #36]	; (156a4 <conn_auto_initiate+0x108>)
   15680:	4a09      	ldr	r2, [pc, #36]	; (156a8 <conn_auto_initiate+0x10c>)
   15682:	1a9b      	subs	r3, r3, r2
   15684:	08db      	lsrs	r3, r3, #3
					BT_ERR("Failed to set data len (%d)", err);
   15686:	f04f 0200 	mov.w	r2, #0
   1568a:	2001      	movs	r0, #1
   1568c:	f360 0202 	bfi	r2, r0, #0, #3
   15690:	f36f 02c5 	bfc	r2, #3, #3
   15694:	f363 128f 	bfi	r2, r3, #6, #10
   15698:	4805      	ldr	r0, [pc, #20]	; (156b0 <conn_auto_initiate+0x114>)
   1569a:	f7fc f9bb 	bl	11a14 <log_1>
		}
   1569e:	e7b4      	b.n	1560a <conn_auto_initiate+0x6e>
   156a0:	200002b0 	.word	0x200002b0
   156a4:	00029d98 	.word	0x00029d98
   156a8:	00029d70 	.word	0x00029d70
   156ac:	0002b7fc 	.word	0x0002b7fc
   156b0:	0002b818 	.word	0x0002b818

000156b4 <bt_hci_le_enh_conn_complete>:
{
   156b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156b8:	b084      	sub	sp, #16
   156ba:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   156bc:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   156c0:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   156c4:	4640      	mov	r0, r8
   156c6:	f7fe fedf 	bl	14488 <conn_handle_is_disconnected>
   156ca:	4606      	mov	r6, r0
	if (evt->status) {
   156cc:	7820      	ldrb	r0, [r4, #0]
   156ce:	b1b0      	cbz	r0, 156fe <bt_hci_le_enh_conn_complete+0x4a>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   156d0:	283c      	cmp	r0, #60	; 0x3c
   156d2:	d011      	beq.n	156f8 <bt_hci_le_enh_conn_complete+0x44>
   156d4:	4b63      	ldr	r3, [pc, #396]	; (15864 <bt_hci_le_enh_conn_complete+0x1b0>)
   156d6:	4a64      	ldr	r2, [pc, #400]	; (15868 <bt_hci_le_enh_conn_complete+0x1b4>)
   156d8:	1a9b      	subs	r3, r3, r2
   156da:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected status 0x%02x", evt->status);
   156dc:	f04f 0200 	mov.w	r2, #0
   156e0:	2102      	movs	r1, #2
   156e2:	f361 0202 	bfi	r2, r1, #0, #3
   156e6:	f36f 02c5 	bfc	r2, #3, #3
   156ea:	f363 128f 	bfi	r2, r3, #6, #10
   156ee:	4601      	mov	r1, r0
   156f0:	485e      	ldr	r0, [pc, #376]	; (1586c <bt_hci_le_enh_conn_complete+0x1b8>)
   156f2:	f7fc f98f 	bl	11a14 <log_1>
		return;
   156f6:	e04a      	b.n	1578e <bt_hci_le_enh_conn_complete+0xda>
			le_conn_complete_adv_timeout();
   156f8:	f7fe ffb2 	bl	14660 <le_conn_complete_adv_timeout>
			return;
   156fc:	e047      	b.n	1578e <bt_hci_le_enh_conn_complete+0xda>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   156fe:	7923      	ldrb	r3, [r4, #4]
   15700:	3b02      	subs	r3, #2
   15702:	b2db      	uxtb	r3, r3
   15704:	2b01      	cmp	r3, #1
   15706:	d945      	bls.n	15794 <bt_hci_le_enh_conn_complete+0xe0>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   15708:	78e3      	ldrb	r3, [r4, #3]
   1570a:	2b01      	cmp	r3, #1
   1570c:	d057      	beq.n	157be <bt_hci_le_enh_conn_complete+0x10a>
				bt_lookup_id_addr(id, &evt->peer_addr));
   1570e:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   15710:	4629      	mov	r1, r5
   15712:	f011 fa89 	bl	26c28 <bt_lookup_id_addr>
   15716:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   15718:	2207      	movs	r2, #7
   1571a:	4668      	mov	r0, sp
   1571c:	f011 f86c 	bl	267f8 <memcpy>
   15720:	2207      	movs	r2, #7
   15722:	4629      	mov	r1, r5
   15724:	a802      	add	r0, sp, #8
   15726:	f011 f867 	bl	267f8 <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   1572a:	4669      	mov	r1, sp
   1572c:	78e0      	ldrb	r0, [r4, #3]
   1572e:	f7fe ff71 	bl	14614 <find_pending_connect>
   15732:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   15734:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15736:	2b01      	cmp	r3, #1
   15738:	d045      	beq.n	157c6 <bt_hci_le_enh_conn_complete+0x112>
	if (!conn) {
   1573a:	2d00      	cmp	r5, #0
   1573c:	d056      	beq.n	157ec <bt_hci_le_enh_conn_complete+0x138>
	conn->handle = handle;
   1573e:	4628      	mov	r0, r5
   15740:	f820 7b90 	strh.w	r7, [r0], #144
   15744:	2207      	movs	r2, #7
   15746:	4669      	mov	r1, sp
   15748:	f011 f856 	bl	267f8 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1574c:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   15750:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15754:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   15758:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1575c:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   15760:	f8a5 30ae 	strh.w	r3, [r5, #174]	; 0xae
	conn->role = evt->role;
   15764:	78e3      	ldrb	r3, [r4, #3]
   15766:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   15768:	2200      	movs	r2, #0
   1576a:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1576c:	2b01      	cmp	r3, #1
   1576e:	d057      	beq.n	15820 <bt_hci_le_enh_conn_complete+0x16c>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15770:	2107      	movs	r1, #7
   15772:	4628      	mov	r0, r5
   15774:	f001 fdee 	bl	17354 <bt_conn_set_state>
	if (is_disconnected) {
   15778:	2e00      	cmp	r6, #0
   1577a:	d16d      	bne.n	15858 <bt_hci_le_enh_conn_complete+0x1a4>
	bt_conn_connected(conn);
   1577c:	4628      	mov	r0, r5
   1577e:	f011 fd39 	bl	271f4 <bt_conn_connected>
	conn_auto_initiate(conn);
   15782:	4628      	mov	r0, r5
   15784:	f7ff ff0a 	bl	1559c <conn_auto_initiate>
	bt_conn_unref(conn);
   15788:	4628      	mov	r0, r5
   1578a:	f001 fd9f 	bl	172cc <bt_conn_unref>
}
   1578e:	b004      	add	sp, #16
   15790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15794:	2207      	movs	r2, #7
   15796:	1d21      	adds	r1, r4, #4
   15798:	4668      	mov	r0, sp
   1579a:	f011 f82d 	bl	267f8 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1579e:	f89d 3000 	ldrb.w	r3, [sp]
   157a2:	3b02      	subs	r3, #2
   157a4:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
   157a8:	2206      	movs	r2, #6
   157aa:	f104 0111 	add.w	r1, r4, #17
   157ae:	f10d 0009 	add.w	r0, sp, #9
   157b2:	f011 f821 	bl	267f8 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   157b6:	2301      	movs	r3, #1
   157b8:	f88d 3008 	strb.w	r3, [sp, #8]
   157bc:	e7b5      	b.n	1572a <bt_hci_le_enh_conn_complete+0x76>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   157be:	4b2c      	ldr	r3, [pc, #176]	; (15870 <bt_hci_le_enh_conn_complete+0x1bc>)
   157c0:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   157c4:	e7a3      	b.n	1570e <bt_hci_le_enh_conn_complete+0x5a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   157c6:	f000 ffe7 	bl	16798 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   157ca:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   157ce:	f3bf 8f5b 	dmb	ish
   157d2:	e853 2f00 	ldrex	r2, [r3]
   157d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   157da:	e843 2100 	strex	r1, r2, [r3]
   157de:	2900      	cmp	r1, #0
   157e0:	d1f7      	bne.n	157d2 <bt_hci_le_enh_conn_complete+0x11e>
   157e2:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   157e6:	f011 fb85 	bl	26ef4 <bt_le_lim_adv_cancel_timeout>
   157ea:	e7a6      	b.n	1573a <bt_hci_le_enh_conn_complete+0x86>
   157ec:	4b1d      	ldr	r3, [pc, #116]	; (15864 <bt_hci_le_enh_conn_complete+0x1b0>)
   157ee:	4a1e      	ldr	r2, [pc, #120]	; (15868 <bt_hci_le_enh_conn_complete+0x1b4>)
   157f0:	1a9b      	subs	r3, r3, r2
   157f2:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending conn for peer %s",
   157f4:	2201      	movs	r2, #1
   157f6:	f362 0502 	bfi	r5, r2, #0, #3
   157fa:	f36f 05c5 	bfc	r5, #3, #3
   157fe:	f363 158f 	bfi	r5, r3, #6, #10
   15802:	1d20      	adds	r0, r4, #4
   15804:	f7fe fd36 	bl	14274 <bt_addr_le_str_real>
   15808:	f7fb ff62 	bl	116d0 <z_log_strdup>
   1580c:	4601      	mov	r1, r0
   1580e:	462a      	mov	r2, r5
   15810:	4818      	ldr	r0, [pc, #96]	; (15874 <bt_hci_le_enh_conn_complete+0x1c0>)
   15812:	f7fc f8ff 	bl	11a14 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15816:	211f      	movs	r1, #31
   15818:	4640      	mov	r0, r8
   1581a:	f011 f8f0 	bl	269fe <bt_hci_disconnect>
		return;
   1581e:	e7b6      	b.n	1578e <bt_hci_le_enh_conn_complete+0xda>
	memcpy(dst, src, sizeof(*dst));
   15820:	2207      	movs	r2, #7
   15822:	a902      	add	r1, sp, #8
   15824:	f105 0097 	add.w	r0, r5, #151	; 0x97
   15828:	f010 ffe6 	bl	267f8 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1582c:	f000 ffb4 	bl	16798 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   15830:	7a29      	ldrb	r1, [r5, #8]
   15832:	4c0f      	ldr	r4, [pc, #60]	; (15870 <bt_hci_le_enh_conn_complete+0x1bc>)
   15834:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   15838:	2207      	movs	r2, #7
   1583a:	4421      	add	r1, r4
   1583c:	f105 009e 	add.w	r0, r5, #158	; 0x9e
   15840:	f010 ffda 	bl	267f8 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   15844:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
   15848:	2200      	movs	r2, #0
   1584a:	f001 0340 	and.w	r3, r1, #64	; 0x40
   1584e:	4313      	orrs	r3, r2
   15850:	d08e      	beq.n	15770 <bt_hci_le_enh_conn_complete+0xbc>
			bt_le_adv_resume();
   15852:	f011 fb54 	bl	26efe <bt_le_adv_resume>
   15856:	e78b      	b.n	15770 <bt_hci_le_enh_conn_complete+0xbc>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15858:	2101      	movs	r1, #1
   1585a:	4628      	mov	r0, r5
   1585c:	f001 fd7a 	bl	17354 <bt_conn_set_state>
   15860:	e78c      	b.n	1577c <bt_hci_le_enh_conn_complete+0xc8>
   15862:	bf00      	nop
   15864:	00029d98 	.word	0x00029d98
   15868:	00029d70 	.word	0x00029d70
   1586c:	0002b834 	.word	0x0002b834
   15870:	200002b0 	.word	0x200002b0
   15874:	0002b850 	.word	0x0002b850

00015878 <le_phy_update_complete>:
{
   15878:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   1587a:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1587c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15880:	4628      	mov	r0, r5
   15882:	f001 fd5d 	bl	17340 <bt_conn_lookup_handle>
	if (!conn) {
   15886:	b1a0      	cbz	r0, 158b2 <le_phy_update_complete+0x3a>
   15888:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1588a:	1d03      	adds	r3, r0, #4
   1588c:	f3bf 8f5b 	dmb	ish
   15890:	e853 2f00 	ldrex	r2, [r3]
   15894:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   15898:	e843 1000 	strex	r0, r1, [r3]
   1589c:	2800      	cmp	r0, #0
   1589e:	d1f7      	bne.n	15890 <le_phy_update_complete+0x18>
   158a0:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   158a4:	f012 0f80 	tst.w	r2, #128	; 0x80
   158a8:	d115      	bne.n	158d6 <le_phy_update_complete+0x5e>
	bt_conn_unref(conn);
   158aa:	4620      	mov	r0, r4
   158ac:	f001 fd0e 	bl	172cc <bt_conn_unref>
}
   158b0:	bd38      	pop	{r3, r4, r5, pc}
   158b2:	4b11      	ldr	r3, [pc, #68]	; (158f8 <le_phy_update_complete+0x80>)
   158b4:	4a11      	ldr	r2, [pc, #68]	; (158fc <le_phy_update_complete+0x84>)
   158b6:	1a9b      	subs	r3, r3, r2
   158b8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   158ba:	f04f 0200 	mov.w	r2, #0
   158be:	2101      	movs	r1, #1
   158c0:	f361 0202 	bfi	r2, r1, #0, #3
   158c4:	f36f 02c5 	bfc	r2, #3, #3
   158c8:	f363 128f 	bfi	r2, r3, #6, #10
   158cc:	4629      	mov	r1, r5
   158ce:	480c      	ldr	r0, [pc, #48]	; (15900 <le_phy_update_complete+0x88>)
   158d0:	f7fc f8a0 	bl	11a14 <log_1>
		return;
   158d4:	e7ec      	b.n	158b0 <le_phy_update_complete+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   158d6:	f3bf 8f5b 	dmb	ish
   158da:	e853 2f00 	ldrex	r2, [r3]
   158de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   158e2:	e843 2100 	strex	r1, r2, [r3]
   158e6:	2900      	cmp	r1, #0
   158e8:	d1f7      	bne.n	158da <le_phy_update_complete+0x62>
   158ea:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   158ee:	4620      	mov	r0, r4
   158f0:	f7ff fe54 	bl	1559c <conn_auto_initiate>
   158f4:	e7d9      	b.n	158aa <le_phy_update_complete+0x32>
   158f6:	bf00      	nop
   158f8:	00029d98 	.word	0x00029d98
   158fc:	00029d70 	.word	0x00029d70
   15900:	0002b47c 	.word	0x0002b47c

00015904 <le_remote_feat_complete>:
{
   15904:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   15906:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15908:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1590c:	4630      	mov	r0, r6
   1590e:	f001 fd17 	bl	17340 <bt_conn_lookup_handle>
	if (!conn) {
   15912:	b1b0      	cbz	r0, 15942 <le_remote_feat_complete+0x3e>
   15914:	4604      	mov	r4, r0
	if (!evt->status) {
   15916:	782b      	ldrb	r3, [r5, #0]
   15918:	b32b      	cbz	r3, 15966 <le_remote_feat_complete+0x62>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   1591a:	1d23      	adds	r3, r4, #4
   1591c:	f3bf 8f5b 	dmb	ish
   15920:	e853 2f00 	ldrex	r2, [r3]
   15924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   15928:	e843 2100 	strex	r1, r2, [r3]
   1592c:	2900      	cmp	r1, #0
   1592e:	d1f7      	bne.n	15920 <le_remote_feat_complete+0x1c>
   15930:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   15934:	4620      	mov	r0, r4
   15936:	f7ff fe31 	bl	1559c <conn_auto_initiate>
	bt_conn_unref(conn);
   1593a:	4620      	mov	r0, r4
   1593c:	f001 fcc6 	bl	172cc <bt_conn_unref>
}
   15940:	bd70      	pop	{r4, r5, r6, pc}
   15942:	4b0c      	ldr	r3, [pc, #48]	; (15974 <le_remote_feat_complete+0x70>)
   15944:	4a0c      	ldr	r2, [pc, #48]	; (15978 <le_remote_feat_complete+0x74>)
   15946:	1a9b      	subs	r3, r3, r2
   15948:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1594a:	f04f 0200 	mov.w	r2, #0
   1594e:	2101      	movs	r1, #1
   15950:	f361 0202 	bfi	r2, r1, #0, #3
   15954:	f36f 02c5 	bfc	r2, #3, #3
   15958:	f363 128f 	bfi	r2, r3, #6, #10
   1595c:	4631      	mov	r1, r6
   1595e:	4807      	ldr	r0, [pc, #28]	; (1597c <le_remote_feat_complete+0x78>)
   15960:	f7fc f858 	bl	11a14 <log_1>
		return;
   15964:	e7ec      	b.n	15940 <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
   15966:	2208      	movs	r2, #8
   15968:	1ce9      	adds	r1, r5, #3
   1596a:	30b4      	adds	r0, #180	; 0xb4
   1596c:	f010 ff44 	bl	267f8 <memcpy>
   15970:	e7d3      	b.n	1591a <le_remote_feat_complete+0x16>
   15972:	bf00      	nop
   15974:	00029d98 	.word	0x00029d98
   15978:	00029d70 	.word	0x00029d70
   1597c:	0002b47c 	.word	0x0002b47c

00015980 <le_conn_param_neg_reply>:
{
   15980:	b570      	push	{r4, r5, r6, lr}
   15982:	4605      	mov	r5, r0
   15984:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   15986:	2103      	movs	r1, #3
   15988:	f242 0021 	movw	r0, #8225	; 0x2021
   1598c:	f7ff fab2 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   15990:	b160      	cbz	r0, 159ac <le_conn_param_neg_reply+0x2c>
   15992:	4606      	mov	r6, r0
   15994:	2103      	movs	r1, #3
   15996:	3008      	adds	r0, #8
   15998:	f004 ff2a 	bl	1a7f0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1599c:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1599e:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   159a0:	4631      	mov	r1, r6
   159a2:	f242 0021 	movw	r0, #8225	; 0x2021
   159a6:	f7ff fdbf 	bl	15528 <bt_hci_cmd_send>
}
   159aa:	bd70      	pop	{r4, r5, r6, pc}
   159ac:	4b08      	ldr	r3, [pc, #32]	; (159d0 <le_conn_param_neg_reply+0x50>)
   159ae:	4a09      	ldr	r2, [pc, #36]	; (159d4 <le_conn_param_neg_reply+0x54>)
   159b0:	1a9b      	subs	r3, r3, r2
   159b2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer");
   159b4:	f04f 0100 	mov.w	r1, #0
   159b8:	2201      	movs	r2, #1
   159ba:	f362 0102 	bfi	r1, r2, #0, #3
   159be:	f36f 01c5 	bfc	r1, #3, #3
   159c2:	f363 118f 	bfi	r1, r3, #6, #10
   159c6:	4804      	ldr	r0, [pc, #16]	; (159d8 <le_conn_param_neg_reply+0x58>)
   159c8:	f7fb fff4 	bl	119b4 <log_0>
		return;
   159cc:	e7ed      	b.n	159aa <le_conn_param_neg_reply+0x2a>
   159ce:	bf00      	nop
   159d0:	00029d98 	.word	0x00029d98
   159d4:	00029d70 	.word	0x00029d70
   159d8:	0002b86c 	.word	0x0002b86c

000159dc <le_conn_param_req>:
{
   159dc:	b530      	push	{r4, r5, lr}
   159de:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   159e0:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   159e2:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   159e4:	885a      	ldrh	r2, [r3, #2]
   159e6:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   159ea:	889a      	ldrh	r2, [r3, #4]
   159ec:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   159f0:	88da      	ldrh	r2, [r3, #6]
   159f2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   159f6:	891b      	ldrh	r3, [r3, #8]
   159f8:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   159fc:	4620      	mov	r0, r4
   159fe:	f001 fc9f 	bl	17340 <bt_conn_lookup_handle>
	if (!conn) {
   15a02:	b168      	cbz	r0, 15a20 <le_conn_param_req+0x44>
   15a04:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   15a06:	4669      	mov	r1, sp
   15a08:	f001 fe7c 	bl	17704 <le_param_req>
   15a0c:	b9f0      	cbnz	r0, 15a4c <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   15a0e:	211e      	movs	r1, #30
   15a10:	4620      	mov	r0, r4
   15a12:	f7ff ffb5 	bl	15980 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   15a16:	4628      	mov	r0, r5
   15a18:	f001 fc58 	bl	172cc <bt_conn_unref>
}
   15a1c:	b003      	add	sp, #12
   15a1e:	bd30      	pop	{r4, r5, pc}
   15a20:	4b0d      	ldr	r3, [pc, #52]	; (15a58 <le_conn_param_req+0x7c>)
   15a22:	4a0e      	ldr	r2, [pc, #56]	; (15a5c <le_conn_param_req+0x80>)
   15a24:	1a9b      	subs	r3, r3, r2
   15a26:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15a28:	f04f 0200 	mov.w	r2, #0
   15a2c:	2101      	movs	r1, #1
   15a2e:	f361 0202 	bfi	r2, r1, #0, #3
   15a32:	f36f 02c5 	bfc	r2, #3, #3
   15a36:	f363 128f 	bfi	r2, r3, #6, #10
   15a3a:	4621      	mov	r1, r4
   15a3c:	4808      	ldr	r0, [pc, #32]	; (15a60 <le_conn_param_req+0x84>)
   15a3e:	f7fb ffe9 	bl	11a14 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   15a42:	2102      	movs	r1, #2
   15a44:	4620      	mov	r0, r4
   15a46:	f7ff ff9b 	bl	15980 <le_conn_param_neg_reply>
		return;
   15a4a:	e7e7      	b.n	15a1c <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   15a4c:	4669      	mov	r1, sp
   15a4e:	4620      	mov	r0, r4
   15a50:	f011 f8b4 	bl	26bbc <le_conn_param_req_reply>
   15a54:	e7df      	b.n	15a16 <le_conn_param_req+0x3a>
   15a56:	bf00      	nop
   15a58:	00029d98 	.word	0x00029d98
   15a5c:	00029d70 	.word	0x00029d70
   15a60:	0002b47c 	.word	0x0002b47c

00015a64 <send_cmd>:
{
   15a64:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   15a66:	2200      	movs	r2, #0
   15a68:	2300      	movs	r3, #0
   15a6a:	4837      	ldr	r0, [pc, #220]	; (15b48 <send_cmd+0xe4>)
   15a6c:	f004 fcf6 	bl	1a45c <net_buf_get>
	BT_ASSERT(buf);
   15a70:	4604      	mov	r4, r0
   15a72:	b370      	cbz	r0, 15ad2 <send_cmd+0x6e>
   15a74:	4d35      	ldr	r5, [pc, #212]	; (15b4c <send_cmd+0xe8>)
   15a76:	f04f 32ff 	mov.w	r2, #4294967295
   15a7a:	f04f 33ff 	mov.w	r3, #4294967295
   15a7e:	f505 708c 	add.w	r0, r5, #280	; 0x118
   15a82:	f009 fc05 	bl	1f290 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   15a86:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
   15a8a:	b1b3      	cbz	r3, 15aba <send_cmd+0x56>
   15a8c:	4b30      	ldr	r3, [pc, #192]	; (15b50 <send_cmd+0xec>)
   15a8e:	4a31      	ldr	r2, [pc, #196]	; (15b54 <send_cmd+0xf0>)
   15a90:	1a9b      	subs	r3, r3, r2
   15a92:	08db      	lsrs	r3, r3, #3
		BT_ERR("Uncleared pending sent_cmd");
   15a94:	f04f 0100 	mov.w	r1, #0
   15a98:	2201      	movs	r2, #1
   15a9a:	f362 0102 	bfi	r1, r2, #0, #3
   15a9e:	f36f 01c5 	bfc	r1, #3, #3
   15aa2:	f363 118f 	bfi	r1, r3, #6, #10
   15aa6:	482c      	ldr	r0, [pc, #176]	; (15b58 <send_cmd+0xf4>)
   15aa8:	f7fb ff84 	bl	119b4 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   15aac:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   15ab0:	f004 fd6c 	bl	1a58c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15ab4:	2300      	movs	r3, #0
   15ab6:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   15aba:	4620      	mov	r0, r4
   15abc:	f004 fda0 	bl	1a600 <net_buf_ref>
   15ac0:	4b22      	ldr	r3, [pc, #136]	; (15b4c <send_cmd+0xe8>)
   15ac2:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   15ac6:	4620      	mov	r0, r4
   15ac8:	f7ff fd24 	bl	15514 <bt_send>
	if (err) {
   15acc:	4601      	mov	r1, r0
   15ace:	b970      	cbnz	r0, 15aee <send_cmd+0x8a>
}
   15ad0:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   15ad2:	f640 132a 	movw	r3, #2346	; 0x92a
   15ad6:	4a21      	ldr	r2, [pc, #132]	; (15b5c <send_cmd+0xf8>)
   15ad8:	4921      	ldr	r1, [pc, #132]	; (15b60 <send_cmd+0xfc>)
   15ada:	4822      	ldr	r0, [pc, #136]	; (15b64 <send_cmd+0x100>)
   15adc:	f00f fea7 	bl	2582e <printk>
   15ae0:	4040      	eors	r0, r0
   15ae2:	f380 8811 	msr	BASEPRI, r0
   15ae6:	f04f 0003 	mov.w	r0, #3
   15aea:	df02      	svc	2
   15aec:	e7c2      	b.n	15a74 <send_cmd+0x10>
   15aee:	4b18      	ldr	r3, [pc, #96]	; (15b50 <send_cmd+0xec>)
   15af0:	4a18      	ldr	r2, [pc, #96]	; (15b54 <send_cmd+0xf0>)
   15af2:	1a9b      	subs	r3, r3, r2
   15af4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   15af6:	f04f 0200 	mov.w	r2, #0
   15afa:	2001      	movs	r0, #1
   15afc:	f360 0202 	bfi	r2, r0, #0, #3
   15b00:	f36f 02c5 	bfc	r2, #3, #3
   15b04:	f363 128f 	bfi	r2, r3, #6, #10
   15b08:	4817      	ldr	r0, [pc, #92]	; (15b68 <send_cmd+0x104>)
   15b0a:	f7fb ff83 	bl	11a14 <log_1>
	z_impl_k_sem_give(sem);
   15b0e:	4d0f      	ldr	r5, [pc, #60]	; (15b4c <send_cmd+0xe8>)
   15b10:	f505 708c 	add.w	r0, r5, #280	; 0x118
   15b14:	f009 fb74 	bl	1f200 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   15b18:	4620      	mov	r0, r4
   15b1a:	f012 fe0b 	bl	28734 <net_buf_id>
   15b1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15b22:	4b12      	ldr	r3, [pc, #72]	; (15b6c <send_cmd+0x108>)
   15b24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15b28:	4622      	mov	r2, r4
   15b2a:	211f      	movs	r1, #31
   15b2c:	8840      	ldrh	r0, [r0, #2]
   15b2e:	f7fe feb5 	bl	1489c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   15b32:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   15b36:	f004 fd29 	bl	1a58c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15b3a:	2300      	movs	r3, #0
   15b3c:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
		net_buf_unref(buf);
   15b40:	4620      	mov	r0, r4
   15b42:	f004 fd23 	bl	1a58c <net_buf_unref>
   15b46:	e7c3      	b.n	15ad0 <send_cmd+0x6c>
   15b48:	20000400 	.word	0x20000400
   15b4c:	200002b0 	.word	0x200002b0
   15b50:	00029d98 	.word	0x00029d98
   15b54:	00029d70 	.word	0x00029d70
   15b58:	0002b888 	.word	0x0002b888
   15b5c:	0002b588 	.word	0x0002b588
   15b60:	0002c994 	.word	0x0002c994
   15b64:	00029ff8 	.word	0x00029ff8
   15b68:	0002b7d8 	.word	0x0002b7d8
   15b6c:	20002570 	.word	0x20002570

00015b70 <process_events>:
{
   15b70:	b570      	push	{r4, r5, r6, lr}
   15b72:	4604      	mov	r4, r0
   15b74:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   15b76:	e013      	b.n	15ba0 <process_events+0x30>
				send_cmd();
   15b78:	f7ff ff74 	bl	15a64 <send_cmd>
   15b7c:	e00e      	b.n	15b9c <process_events+0x2c>
   15b7e:	4b12      	ldr	r3, [pc, #72]	; (15bc8 <process_events+0x58>)
   15b80:	4a12      	ldr	r2, [pc, #72]	; (15bcc <process_events+0x5c>)
   15b82:	1a9b      	subs	r3, r3, r2
   15b84:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   15b86:	2202      	movs	r2, #2
   15b88:	f362 0602 	bfi	r6, r2, #0, #3
   15b8c:	f36f 06c5 	bfc	r6, #3, #3
   15b90:	f363 168f 	bfi	r6, r3, #6, #10
   15b94:	4632      	mov	r2, r6
   15b96:	480e      	ldr	r0, [pc, #56]	; (15bd0 <process_events+0x60>)
   15b98:	f7fb ff3c 	bl	11a14 <log_1>
	for (; count; ev++, count--) {
   15b9c:	3414      	adds	r4, #20
   15b9e:	3d01      	subs	r5, #1
   15ba0:	b185      	cbz	r5, 15bc4 <process_events+0x54>
		switch (ev->state) {
   15ba2:	68e1      	ldr	r1, [r4, #12]
   15ba4:	f3c1 3145 	ubfx	r1, r1, #13, #6
   15ba8:	2901      	cmp	r1, #1
   15baa:	d9f7      	bls.n	15b9c <process_events+0x2c>
   15bac:	2904      	cmp	r1, #4
   15bae:	d1e6      	bne.n	15b7e <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   15bb0:	7b23      	ldrb	r3, [r4, #12]
   15bb2:	2b00      	cmp	r3, #0
   15bb4:	d0e0      	beq.n	15b78 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   15bb6:	2b01      	cmp	r3, #1
   15bb8:	d1f0      	bne.n	15b9c <process_events+0x2c>
					conn = CONTAINER_OF(ev->fifo,
   15bba:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   15bbc:	3838      	subs	r0, #56	; 0x38
   15bbe:	f001 ffb5 	bl	17b2c <bt_conn_process_tx>
   15bc2:	e7eb      	b.n	15b9c <process_events+0x2c>
}
   15bc4:	bd70      	pop	{r4, r5, r6, pc}
   15bc6:	bf00      	nop
   15bc8:	00029d98 	.word	0x00029d98
   15bcc:	00029d70 	.word	0x00029d70
   15bd0:	0002b8a4 	.word	0x0002b8a4

00015bd4 <hci_tx_thread>:
{
   15bd4:	b538      	push	{r3, r4, r5, lr}
   15bd6:	e005      	b.n	15be4 <hci_tx_thread+0x10>
		process_events(events, ev_count);
   15bd8:	4621      	mov	r1, r4
   15bda:	4813      	ldr	r0, [pc, #76]	; (15c28 <hci_tx_thread+0x54>)
   15bdc:	f7ff ffc8 	bl	15b70 <process_events>
	z_impl_k_yield();
   15be0:	f00b fa8a 	bl	210f8 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   15be4:	4d10      	ldr	r5, [pc, #64]	; (15c28 <hci_tx_thread+0x54>)
   15be6:	68eb      	ldr	r3, [r5, #12]
   15be8:	f36f 3352 	bfc	r3, #13, #6
   15bec:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15bee:	f105 0014 	add.w	r0, r5, #20
   15bf2:	f001 fb4b 	bl	1728c <bt_conn_prepare_events>
   15bf6:	1c44      	adds	r4, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   15bf8:	f04f 32ff 	mov.w	r2, #4294967295
   15bfc:	f04f 33ff 	mov.w	r3, #4294967295
   15c00:	4621      	mov	r1, r4
   15c02:	4628      	mov	r0, r5
   15c04:	f00c faee 	bl	221e4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   15c08:	2800      	cmp	r0, #0
   15c0a:	d0e5      	beq.n	15bd8 <hci_tx_thread+0x4>
   15c0c:	f640 1393 	movw	r3, #2451	; 0x993
   15c10:	4a06      	ldr	r2, [pc, #24]	; (15c2c <hci_tx_thread+0x58>)
   15c12:	4907      	ldr	r1, [pc, #28]	; (15c30 <hci_tx_thread+0x5c>)
   15c14:	4807      	ldr	r0, [pc, #28]	; (15c34 <hci_tx_thread+0x60>)
   15c16:	f00f fe0a 	bl	2582e <printk>
   15c1a:	4040      	eors	r0, r0
   15c1c:	f380 8811 	msr	BASEPRI, r0
   15c20:	f04f 0003 	mov.w	r0, #3
   15c24:	df02      	svc	2
   15c26:	e7d7      	b.n	15bd8 <hci_tx_thread+0x4>
   15c28:	20000474 	.word	0x20000474
   15c2c:	0002b588 	.word	0x0002b588
   15c30:	0002b6ac 	.word	0x0002b6ac
   15c34:	00029ff8 	.word	0x00029ff8

00015c38 <hci_event_prio>:
{
   15c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c3c:	b084      	sub	sp, #16
   15c3e:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15c40:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   15c44:	4628      	mov	r0, r5
   15c46:	f012 fda9 	bl	2879c <net_buf_simple_headroom>
   15c4a:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   15c4e:	89a3      	ldrh	r3, [r4, #12]
   15c50:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15c54:	2b01      	cmp	r3, #1
   15c56:	d915      	bls.n	15c84 <hci_event_prio+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   15c58:	2102      	movs	r1, #2
   15c5a:	4628      	mov	r0, r5
   15c5c:	f004 fd82 	bl	1a764 <net_buf_simple_pull_mem>
   15c60:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15c62:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   15c64:	3b05      	subs	r3, #5
   15c66:	2b15      	cmp	r3, #21
   15c68:	d81c      	bhi.n	15ca4 <hci_event_prio+0x6c>
   15c6a:	e8df f003 	tbb	[pc, r3]
   15c6e:	1b19      	.short	0x1b19
   15c70:	1b1b1b1b 	.word	0x1b1b1b1b
   15c74:	3f1b1b1b 	.word	0x3f1b1b1b
   15c78:	1b1b1b3f 	.word	0x1b1b1b3f
   15c7c:	1b1b1b3f 	.word	0x1b1b1b3f
   15c80:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15c84:	f640 5327 	movw	r3, #3367	; 0xd27
   15c88:	4a3b      	ldr	r2, [pc, #236]	; (15d78 <hci_event_prio+0x140>)
   15c8a:	493c      	ldr	r1, [pc, #240]	; (15d7c <hci_event_prio+0x144>)
   15c8c:	483c      	ldr	r0, [pc, #240]	; (15d80 <hci_event_prio+0x148>)
   15c8e:	f00f fdce 	bl	2582e <printk>
   15c92:	4040      	eors	r0, r0
   15c94:	f380 8811 	msr	BASEPRI, r0
   15c98:	f04f 0003 	mov.w	r0, #3
   15c9c:	df02      	svc	2
   15c9e:	e7db      	b.n	15c58 <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15ca0:	2603      	movs	r6, #3
   15ca2:	e000      	b.n	15ca6 <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
   15ca4:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15ca6:	f016 0f01 	tst.w	r6, #1
   15caa:	d021      	beq.n	15cf0 <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   15cac:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   15cae:	2300      	movs	r3, #0
   15cb0:	2b04      	cmp	r3, #4
   15cb2:	d83f      	bhi.n	15d34 <hci_event_prio+0xfc>
		const struct event_handler *handler = &handlers[i];
   15cb4:	4a33      	ldr	r2, [pc, #204]	; (15d84 <hci_event_prio+0x14c>)
   15cb6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   15cba:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   15cbe:	4295      	cmp	r5, r2
   15cc0:	d124      	bne.n	15d0c <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
   15cc2:	89a1      	ldrh	r1, [r4, #12]
   15cc4:	7843      	ldrb	r3, [r0, #1]
   15cc6:	4299      	cmp	r1, r3
   15cc8:	d322      	bcc.n	15d10 <hci_event_prio+0xd8>
		handler->handler(buf);
   15cca:	6843      	ldr	r3, [r0, #4]
   15ccc:	4620      	mov	r0, r4
   15cce:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15cd0:	f016 0f02 	tst.w	r6, #2
   15cd4:	d04c      	beq.n	15d70 <hci_event_prio+0x138>
	buf->data = buf->__buf + state->offset;
   15cd6:	6923      	ldr	r3, [r4, #16]
   15cd8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   15cdc:	4413      	add	r3, r2
   15cde:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   15ce0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   15ce4:	81a3      	strh	r3, [r4, #12]
}
   15ce6:	b004      	add	sp, #16
   15ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   15cec:	2601      	movs	r6, #1
   15cee:	e7da      	b.n	15ca6 <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15cf0:	f640 532b 	movw	r3, #3371	; 0xd2b
   15cf4:	4a20      	ldr	r2, [pc, #128]	; (15d78 <hci_event_prio+0x140>)
   15cf6:	4924      	ldr	r1, [pc, #144]	; (15d88 <hci_event_prio+0x150>)
   15cf8:	4821      	ldr	r0, [pc, #132]	; (15d80 <hci_event_prio+0x148>)
   15cfa:	f00f fd98 	bl	2582e <printk>
   15cfe:	4040      	eors	r0, r0
   15d00:	f380 8811 	msr	BASEPRI, r0
   15d04:	f04f 0003 	mov.w	r0, #3
   15d08:	df02      	svc	2
   15d0a:	e7cf      	b.n	15cac <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
   15d0c:	3301      	adds	r3, #1
   15d0e:	e7cf      	b.n	15cb0 <hci_event_prio+0x78>
   15d10:	4a1e      	ldr	r2, [pc, #120]	; (15d8c <hci_event_prio+0x154>)
   15d12:	4b1f      	ldr	r3, [pc, #124]	; (15d90 <hci_event_prio+0x158>)
   15d14:	1ad2      	subs	r2, r2, r3
   15d16:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15d18:	f04f 0300 	mov.w	r3, #0
   15d1c:	2001      	movs	r0, #1
   15d1e:	f360 0302 	bfi	r3, r0, #0, #3
   15d22:	f36f 03c5 	bfc	r3, #3, #3
   15d26:	f362 138f 	bfi	r3, r2, #6, #10
   15d2a:	462a      	mov	r2, r5
   15d2c:	4819      	ldr	r0, [pc, #100]	; (15d94 <hci_event_prio+0x15c>)
   15d2e:	f7fb fea7 	bl	11a80 <log_2>
			return;
   15d32:	e7cd      	b.n	15cd0 <hci_event_prio+0x98>
   15d34:	4b15      	ldr	r3, [pc, #84]	; (15d8c <hci_event_prio+0x154>)
   15d36:	4a16      	ldr	r2, [pc, #88]	; (15d90 <hci_event_prio+0x158>)
   15d38:	1a9b      	subs	r3, r3, r2
   15d3a:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   15d3c:	f04f 0700 	mov.w	r7, #0
   15d40:	2202      	movs	r2, #2
   15d42:	f362 0702 	bfi	r7, r2, #0, #3
   15d46:	f36f 07c5 	bfc	r7, #3, #3
   15d4a:	f363 178f 	bfi	r7, r3, #6, #10
   15d4e:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   15d52:	4641      	mov	r1, r8
   15d54:	68a0      	ldr	r0, [r4, #8]
   15d56:	f7fe fa65 	bl	14224 <bt_hex_real>
   15d5a:	f7fb fcb9 	bl	116d0 <z_log_strdup>
   15d5e:	4603      	mov	r3, r0
   15d60:	f8ad 7000 	strh.w	r7, [sp]
   15d64:	4642      	mov	r2, r8
   15d66:	4629      	mov	r1, r5
   15d68:	480b      	ldr	r0, [pc, #44]	; (15d98 <hci_event_prio+0x160>)
   15d6a:	f7fb ff09 	bl	11b80 <log_3>
   15d6e:	e7af      	b.n	15cd0 <hci_event_prio+0x98>
		net_buf_unref(buf);
   15d70:	4620      	mov	r0, r4
   15d72:	f004 fc0b 	bl	1a58c <net_buf_unref>
}
   15d76:	e7b6      	b.n	15ce6 <hci_event_prio+0xae>
   15d78:	0002b588 	.word	0x0002b588
   15d7c:	0002b5bc 	.word	0x0002b5bc
   15d80:	00029ff8 	.word	0x00029ff8
   15d84:	0002b9b4 	.word	0x0002b9b4
   15d88:	0002b8c8 	.word	0x0002b8c8
   15d8c:	00029d98 	.word	0x00029d98
   15d90:	00029d70 	.word	0x00029d70
   15d94:	0002b620 	.word	0x0002b620
   15d98:	0002b644 	.word	0x0002b644

00015d9c <bt_recv>:
{
   15d9c:	b538      	push	{r3, r4, r5, lr}
   15d9e:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15da0:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   15da2:	2d01      	cmp	r5, #1
   15da4:	d007      	beq.n	15db6 <bt_recv+0x1a>
   15da6:	2d03      	cmp	r5, #3
   15da8:	d12c      	bne.n	15e04 <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   15daa:	4601      	mov	r1, r0
   15dac:	4821      	ldr	r0, [pc, #132]	; (15e34 <bt_recv+0x98>)
   15dae:	f004 fbb5 	bl	1a51c <net_buf_put>
		return 0;
   15db2:	2000      	movs	r0, #0
}
   15db4:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   15db6:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15db8:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   15dba:	3b05      	subs	r3, #5
   15dbc:	2b15      	cmp	r3, #21
   15dbe:	d80e      	bhi.n	15dde <bt_recv+0x42>
   15dc0:	e8df f003 	tbb	[pc, r3]
   15dc4:	0d0d0d0b 	.word	0x0d0d0d0b
   15dc8:	0d0d0d0d 	.word	0x0d0d0d0d
   15dcc:	0d0e0e0d 	.word	0x0d0e0e0d
   15dd0:	0d0e0d0d 	.word	0x0d0e0d0d
   15dd4:	0d0d0d0d 	.word	0x0d0d0d0d
   15dd8:	0e0d      	.short	0x0e0d
   15dda:	2503      	movs	r5, #3
   15ddc:	e000      	b.n	15de0 <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   15dde:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15de0:	f015 0f01 	tst.w	r5, #1
   15de4:	d104      	bne.n	15df0 <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15de6:	f015 0f02 	tst.w	r5, #2
   15dea:	d105      	bne.n	15df8 <bt_recv+0x5c>
		return 0;
   15dec:	2000      	movs	r0, #0
   15dee:	e7e1      	b.n	15db4 <bt_recv+0x18>
			hci_event_prio(buf);
   15df0:	4620      	mov	r0, r4
   15df2:	f7ff ff21 	bl	15c38 <hci_event_prio>
   15df6:	e7f6      	b.n	15de6 <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   15df8:	4621      	mov	r1, r4
   15dfa:	480e      	ldr	r0, [pc, #56]	; (15e34 <bt_recv+0x98>)
   15dfc:	f004 fb8e 	bl	1a51c <net_buf_put>
		return 0;
   15e00:	2000      	movs	r0, #0
   15e02:	e7d7      	b.n	15db4 <bt_recv+0x18>
   15e04:	4b0c      	ldr	r3, [pc, #48]	; (15e38 <bt_recv+0x9c>)
   15e06:	4a0d      	ldr	r2, [pc, #52]	; (15e3c <bt_recv+0xa0>)
   15e08:	1a9b      	subs	r3, r3, r2
   15e0a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   15e0c:	f04f 0200 	mov.w	r2, #0
   15e10:	2101      	movs	r1, #1
   15e12:	f361 0202 	bfi	r2, r1, #0, #3
   15e16:	f36f 02c5 	bfc	r2, #3, #3
   15e1a:	f363 128f 	bfi	r2, r3, #6, #10
   15e1e:	4629      	mov	r1, r5
   15e20:	4807      	ldr	r0, [pc, #28]	; (15e40 <bt_recv+0xa4>)
   15e22:	f7fb fdf7 	bl	11a14 <log_1>
		net_buf_unref(buf);
   15e26:	4620      	mov	r0, r4
   15e28:	f004 fbb0 	bl	1a58c <net_buf_unref>
		return -EINVAL;
   15e2c:	f06f 0015 	mvn.w	r0, #21
   15e30:	e7c0      	b.n	15db4 <bt_recv+0x18>
   15e32:	bf00      	nop
   15e34:	200003e4 	.word	0x200003e4
   15e38:	00029d98 	.word	0x00029d98
   15e3c:	00029d70 	.word	0x00029d70
   15e40:	0002b8e4 	.word	0x0002b8e4

00015e44 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15e44:	4b0a      	ldr	r3, [pc, #40]	; (15e70 <bt_hci_driver_register+0x2c>)
   15e46:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   15e4a:	b943      	cbnz	r3, 15e5e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   15e4c:	68c3      	ldr	r3, [r0, #12]
   15e4e:	b14b      	cbz	r3, 15e64 <bt_hci_driver_register+0x20>
   15e50:	6903      	ldr	r3, [r0, #16]
   15e52:	b153      	cbz	r3, 15e6a <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   15e54:	4b06      	ldr	r3, [pc, #24]	; (15e70 <bt_hci_driver_register+0x2c>)
   15e56:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
	return 0;
   15e5a:	2000      	movs	r0, #0
   15e5c:	4770      	bx	lr
		return -EALREADY;
   15e5e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15e62:	4770      	bx	lr
		return -EINVAL;
   15e64:	f06f 0015 	mvn.w	r0, #21
   15e68:	4770      	bx	lr
   15e6a:	f06f 0015 	mvn.w	r0, #21
}
   15e6e:	4770      	bx	lr
   15e70:	200002b0 	.word	0x200002b0

00015e74 <bt_finalize_init>:
   15e74:	4b06      	ldr	r3, [pc, #24]	; (15e90 <bt_finalize_init+0x1c>)
   15e76:	f3bf 8f5b 	dmb	ish
   15e7a:	e853 2f00 	ldrex	r2, [r3]
   15e7e:	f042 0202 	orr.w	r2, r2, #2
   15e82:	e843 2100 	strex	r1, r2, [r3]
   15e86:	2900      	cmp	r1, #0
   15e88:	d1f7      	bne.n	15e7a <bt_finalize_init+0x6>
   15e8a:	f3bf 8f5b 	dmb	ish
}
   15e8e:	4770      	bx	lr
   15e90:	2000037c 	.word	0x2000037c

00015e94 <init_work>:
{
   15e94:	b508      	push	{r3, lr}
	err = bt_init();
   15e96:	f010 feb6 	bl	26c06 <bt_init>
	if (ready_cb) {
   15e9a:	4b02      	ldr	r3, [pc, #8]	; (15ea4 <init_work+0x10>)
   15e9c:	681b      	ldr	r3, [r3, #0]
   15e9e:	b103      	cbz	r3, 15ea2 <init_work+0xe>
		ready_cb(err);
   15ea0:	4798      	blx	r3
}
   15ea2:	bd08      	pop	{r3, pc}
   15ea4:	2000258c 	.word	0x2000258c

00015ea8 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   15ea8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   15eac:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   15eae:	4b41      	ldr	r3, [pc, #260]	; (15fb4 <bt_enable+0x10c>)
   15eb0:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   15eb4:	2b00      	cmp	r3, #0
   15eb6:	d050      	beq.n	15f5a <bt_enable+0xb2>
   15eb8:	4605      	mov	r5, r0
   15eba:	4b3f      	ldr	r3, [pc, #252]	; (15fb8 <bt_enable+0x110>)
   15ebc:	f3bf 8f5b 	dmb	ish
   15ec0:	e853 2f00 	ldrex	r2, [r3]
   15ec4:	f042 0101 	orr.w	r1, r2, #1
   15ec8:	e843 1000 	strex	r0, r1, [r3]
   15ecc:	2800      	cmp	r0, #0
   15ece:	d1f7      	bne.n	15ec0 <bt_enable+0x18>
   15ed0:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15ed4:	f012 0f01 	tst.w	r2, #1
   15ed8:	d168      	bne.n	15fac <bt_enable+0x104>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   15eda:	4b38      	ldr	r3, [pc, #224]	; (15fbc <bt_enable+0x114>)
   15edc:	601d      	str	r5, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   15ede:	f04f 0800 	mov.w	r8, #0
   15ee2:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15ee6:	4e36      	ldr	r6, [pc, #216]	; (15fc0 <bt_enable+0x118>)
   15ee8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   15eec:	2400      	movs	r4, #0
   15eee:	9404      	str	r4, [sp, #16]
   15ef0:	f06f 0308 	mvn.w	r3, #8
   15ef4:	9303      	str	r3, [sp, #12]
   15ef6:	9402      	str	r4, [sp, #8]
   15ef8:	9401      	str	r4, [sp, #4]
   15efa:	9400      	str	r4, [sp, #0]
   15efc:	4b31      	ldr	r3, [pc, #196]	; (15fc4 <bt_enable+0x11c>)
   15efe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   15f02:	4931      	ldr	r1, [pc, #196]	; (15fc8 <bt_enable+0x120>)
   15f04:	4630      	mov	r0, r6
   15f06:	f008 fcfd 	bl	1e904 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15f0a:	4930      	ldr	r1, [pc, #192]	; (15fcc <bt_enable+0x124>)
   15f0c:	4630      	mov	r0, r6
   15f0e:	f008 fb8d 	bl	1e62c <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15f12:	4e2f      	ldr	r6, [pc, #188]	; (15fd0 <bt_enable+0x128>)
   15f14:	e9cd 8906 	strd	r8, r9, [sp, #24]
   15f18:	9404      	str	r4, [sp, #16]
   15f1a:	f06f 0307 	mvn.w	r3, #7
   15f1e:	9303      	str	r3, [sp, #12]
   15f20:	9402      	str	r4, [sp, #8]
   15f22:	9401      	str	r4, [sp, #4]
   15f24:	9400      	str	r4, [sp, #0]
   15f26:	4b2b      	ldr	r3, [pc, #172]	; (15fd4 <bt_enable+0x12c>)
   15f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15f2c:	492a      	ldr	r1, [pc, #168]	; (15fd8 <bt_enable+0x130>)
   15f2e:	4630      	mov	r0, r6
   15f30:	f008 fce8 	bl	1e904 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15f34:	4929      	ldr	r1, [pc, #164]	; (15fdc <bt_enable+0x134>)
   15f36:	4630      	mov	r0, r6
   15f38:	f008 fb78 	bl	1e62c <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   15f3c:	4b1d      	ldr	r3, [pc, #116]	; (15fb4 <bt_enable+0x10c>)
   15f3e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   15f42:	68db      	ldr	r3, [r3, #12]
   15f44:	4798      	blx	r3
	if (err) {
   15f46:	4604      	mov	r4, r0
   15f48:	b9d0      	cbnz	r0, 15f80 <bt_enable+0xd8>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   15f4a:	b35d      	cbz	r5, 15fa4 <bt_enable+0xfc>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   15f4c:	4824      	ldr	r0, [pc, #144]	; (15fe0 <bt_enable+0x138>)
   15f4e:	f009 fd39 	bl	1f9c4 <k_work_submit>
	return 0;
}
   15f52:	4620      	mov	r0, r4
   15f54:	b008      	add	sp, #32
   15f56:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   15f5a:	4b22      	ldr	r3, [pc, #136]	; (15fe4 <bt_enable+0x13c>)
   15f5c:	4a22      	ldr	r2, [pc, #136]	; (15fe8 <bt_enable+0x140>)
   15f5e:	1a9b      	subs	r3, r3, r2
   15f60:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
   15f62:	f04f 0100 	mov.w	r1, #0
   15f66:	2201      	movs	r2, #1
   15f68:	f362 0102 	bfi	r1, r2, #0, #3
   15f6c:	f36f 01c5 	bfc	r1, #3, #3
   15f70:	f363 118f 	bfi	r1, r3, #6, #10
   15f74:	481d      	ldr	r0, [pc, #116]	; (15fec <bt_enable+0x144>)
   15f76:	f7fb fd1d 	bl	119b4 <log_0>
		return -ENODEV;
   15f7a:	f06f 0412 	mvn.w	r4, #18
   15f7e:	e7e8      	b.n	15f52 <bt_enable+0xaa>
   15f80:	4b18      	ldr	r3, [pc, #96]	; (15fe4 <bt_enable+0x13c>)
   15f82:	4a19      	ldr	r2, [pc, #100]	; (15fe8 <bt_enable+0x140>)
   15f84:	1a9b      	subs	r3, r3, r2
   15f86:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
   15f88:	f04f 0200 	mov.w	r2, #0
   15f8c:	2101      	movs	r1, #1
   15f8e:	f361 0202 	bfi	r2, r1, #0, #3
   15f92:	f36f 02c5 	bfc	r2, #3, #3
   15f96:	f363 128f 	bfi	r2, r3, #6, #10
   15f9a:	4601      	mov	r1, r0
   15f9c:	4814      	ldr	r0, [pc, #80]	; (15ff0 <bt_enable+0x148>)
   15f9e:	f7fb fd39 	bl	11a14 <log_1>
		return err;
   15fa2:	e7d6      	b.n	15f52 <bt_enable+0xaa>
		return bt_init();
   15fa4:	f010 fe2f 	bl	26c06 <bt_init>
   15fa8:	4604      	mov	r4, r0
   15faa:	e7d2      	b.n	15f52 <bt_enable+0xaa>
		return -EALREADY;
   15fac:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15fb0:	e7cf      	b.n	15f52 <bt_enable+0xaa>
   15fb2:	bf00      	nop
   15fb4:	200002b0 	.word	0x200002b0
   15fb8:	2000037c 	.word	0x2000037c
   15fbc:	2000258c 	.word	0x2000258c
   15fc0:	20001700 	.word	0x20001700
   15fc4:	00015bd5 	.word	0x00015bd5
   15fc8:	20004060 	.word	0x20004060
   15fcc:	0002b914 	.word	0x0002b914
   15fd0:	20001648 	.word	0x20001648
   15fd4:	00014e6d 	.word	0x00014e6d
   15fd8:	20003c40 	.word	0x20003c40
   15fdc:	0002b91c 	.word	0x0002b91c
   15fe0:	2000036c 	.word	0x2000036c
   15fe4:	00029d98 	.word	0x00029d98
   15fe8:	00029d70 	.word	0x00029d70
   15fec:	0002b8f8 	.word	0x0002b8f8
   15ff0:	0002b924 	.word	0x0002b924

00015ff4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   15ff4:	4800      	ldr	r0, [pc, #0]	; (15ff8 <bt_get_name+0x4>)
   15ff6:	4770      	bx	lr
   15ff8:	0002a1c4 	.word	0x0002a1c4

00015ffc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   15ffc:	b570      	push	{r4, r5, r6, lr}
   15ffe:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   16000:	2400      	movs	r4, #0
   16002:	4b0a      	ldr	r3, [pc, #40]	; (1602c <id_find+0x30>)
   16004:	79db      	ldrb	r3, [r3, #7]
   16006:	42a3      	cmp	r3, r4
   16008:	d90c      	bls.n	16024 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1600a:	4626      	mov	r6, r4
   1600c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   16010:	2207      	movs	r2, #7
   16012:	4b06      	ldr	r3, [pc, #24]	; (1602c <id_find+0x30>)
   16014:	4419      	add	r1, r3
   16016:	4628      	mov	r0, r5
   16018:	f010 fbc1 	bl	2679e <memcmp>
   1601c:	b120      	cbz	r0, 16028 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   1601e:	3401      	adds	r4, #1
   16020:	b2e4      	uxtb	r4, r4
   16022:	e7ee      	b.n	16002 <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   16024:	f06f 0601 	mvn.w	r6, #1
}
   16028:	4630      	mov	r0, r6
   1602a:	bd70      	pop	{r4, r5, r6, pc}
   1602c:	200002b0 	.word	0x200002b0

00016030 <set_random_address>:
{
   16030:	b570      	push	{r4, r5, r6, lr}
   16032:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   16034:	2206      	movs	r2, #6
   16036:	4914      	ldr	r1, [pc, #80]	; (16088 <set_random_address+0x58>)
   16038:	f010 fbb1 	bl	2679e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1603c:	4605      	mov	r5, r0
   1603e:	b908      	cbnz	r0, 16044 <set_random_address+0x14>
}
   16040:	4628      	mov	r0, r5
   16042:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   16044:	2106      	movs	r1, #6
   16046:	f242 0005 	movw	r0, #8197	; 0x2005
   1604a:	f7fe ff53 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   1604e:	4605      	mov	r5, r0
   16050:	b1b8      	cbz	r0, 16082 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16052:	2206      	movs	r2, #6
   16054:	4621      	mov	r1, r4
   16056:	3008      	adds	r0, #8
   16058:	f012 fbad 	bl	287b6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1605c:	2200      	movs	r2, #0
   1605e:	4629      	mov	r1, r5
   16060:	f242 0005 	movw	r0, #8197	; 0x2005
   16064:	f7fe ff96 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   16068:	4605      	mov	r5, r0
   1606a:	2800      	cmp	r0, #0
   1606c:	d1e8      	bne.n	16040 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   1606e:	4e06      	ldr	r6, [pc, #24]	; (16088 <set_random_address+0x58>)
   16070:	2206      	movs	r2, #6
   16072:	4621      	mov	r1, r4
   16074:	4630      	mov	r0, r6
   16076:	f010 fbbf 	bl	267f8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1607a:	2301      	movs	r3, #1
   1607c:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   16080:	e7de      	b.n	16040 <set_random_address+0x10>
		return -ENOBUFS;
   16082:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16086:	e7db      	b.n	16040 <set_random_address+0x10>
   16088:	20000311 	.word	0x20000311

0001608c <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   1608c:	b530      	push	{r4, r5, lr}
   1608e:	b085      	sub	sp, #20
   16090:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16092:	460d      	mov	r5, r1
   16094:	b149      	cbz	r1, 160aa <id_create+0x1e>
   16096:	2300      	movs	r3, #0
   16098:	9302      	str	r3, [sp, #8]
   1609a:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   1609e:	2207      	movs	r2, #7
   160a0:	a902      	add	r1, sp, #8
   160a2:	4628      	mov	r0, r5
   160a4:	f010 fb7b 	bl	2679e <memcmp>
   160a8:	b9e0      	cbnz	r0, 160e4 <id_create+0x58>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   160aa:	4668      	mov	r0, sp
   160ac:	f010 fc60 	bl	26970 <bt_addr_le_create_static>
			if (err) {
   160b0:	4603      	mov	r3, r0
   160b2:	b9a0      	cbnz	r0, 160de <id_create+0x52>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   160b4:	4668      	mov	r0, sp
   160b6:	f7ff ffa1 	bl	15ffc <id_find>
   160ba:	2800      	cmp	r0, #0
   160bc:	daf5      	bge.n	160aa <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   160be:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   160c2:	4b0d      	ldr	r3, [pc, #52]	; (160f8 <id_create+0x6c>)
   160c4:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   160c6:	2207      	movs	r2, #7
   160c8:	4669      	mov	r1, sp
   160ca:	4620      	mov	r0, r4
   160cc:	f010 fb94 	bl	267f8 <memcpy>

		if (addr) {
   160d0:	b125      	cbz	r5, 160dc <id_create+0x50>
   160d2:	2207      	movs	r2, #7
   160d4:	4621      	mov	r1, r4
   160d6:	4628      	mov	r0, r5
   160d8:	f010 fb8e 	bl	267f8 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   160dc:	2300      	movs	r3, #0
}
   160de:	4618      	mov	r0, r3
   160e0:	b005      	add	sp, #20
   160e2:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   160e4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   160e8:	2207      	movs	r2, #7
   160ea:	4629      	mov	r1, r5
   160ec:	4802      	ldr	r0, [pc, #8]	; (160f8 <id_create+0x6c>)
   160ee:	4420      	add	r0, r4
   160f0:	f010 fb82 	bl	267f8 <memcpy>
}
   160f4:	e7f2      	b.n	160dc <id_create+0x50>
   160f6:	bf00      	nop
   160f8:	200002b0 	.word	0x200002b0

000160fc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   160fc:	b570      	push	{r4, r5, r6, lr}
   160fe:	b084      	sub	sp, #16
   16100:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16102:	4605      	mov	r5, r0
   16104:	b340      	cbz	r0, 16158 <bt_id_create+0x5c>
   16106:	2300      	movs	r3, #0
   16108:	9300      	str	r3, [sp, #0]
   1610a:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1610e:	2207      	movs	r2, #7
   16110:	4669      	mov	r1, sp
   16112:	f010 fb44 	bl	2679e <memcmp>
   16116:	b1f8      	cbz	r0, 16158 <bt_id_create+0x5c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16118:	782b      	ldrb	r3, [r5, #0]
   1611a:	2b01      	cmp	r3, #1
   1611c:	d104      	bne.n	16128 <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   1611e:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16120:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16124:	2bc0      	cmp	r3, #192	; 0xc0
   16126:	d012      	beq.n	1614e <bt_id_create+0x52>
   16128:	4b24      	ldr	r3, [pc, #144]	; (161bc <bt_id_create+0xc0>)
   1612a:	4a25      	ldr	r2, [pc, #148]	; (161c0 <bt_id_create+0xc4>)
   1612c:	1a9b      	subs	r3, r3, r2
   1612e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
   16130:	f04f 0100 	mov.w	r1, #0
   16134:	2201      	movs	r2, #1
   16136:	f362 0102 	bfi	r1, r2, #0, #3
   1613a:	f36f 01c5 	bfc	r1, #3, #3
   1613e:	f363 118f 	bfi	r1, r3, #6, #10
   16142:	4820      	ldr	r0, [pc, #128]	; (161c4 <bt_id_create+0xc8>)
   16144:	f7fb fc36 	bl	119b4 <log_0>
			return -EINVAL;
   16148:	f06f 0015 	mvn.w	r0, #21
   1614c:	e028      	b.n	161a0 <bt_id_create+0xa4>
		}

		if (id_find(addr) >= 0) {
   1614e:	4628      	mov	r0, r5
   16150:	f7ff ff54 	bl	15ffc <id_find>
   16154:	2800      	cmp	r0, #0
   16156:	da25      	bge.n	161a4 <bt_id_create+0xa8>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   16158:	bb54      	cbnz	r4, 161b0 <bt_id_create+0xb4>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1615a:	4b1b      	ldr	r3, [pc, #108]	; (161c8 <bt_id_create+0xcc>)
   1615c:	79db      	ldrb	r3, [r3, #7]
   1615e:	2b01      	cmp	r3, #1
   16160:	d029      	beq.n	161b6 <bt_id_create+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16162:	f3bf 8f5b 	dmb	ish
   16166:	4b19      	ldr	r3, [pc, #100]	; (161cc <bt_id_create+0xd0>)
   16168:	681b      	ldr	r3, [r3, #0]
   1616a:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1616e:	f013 0f01 	tst.w	r3, #1
   16172:	d10a      	bne.n	1618a <bt_id_create+0x8e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   16174:	b1cd      	cbz	r5, 161aa <bt_id_create+0xae>
   16176:	2300      	movs	r3, #0
   16178:	9302      	str	r3, [sp, #8]
   1617a:	f8cd 300b 	str.w	r3, [sp, #11]
   1617e:	2207      	movs	r2, #7
   16180:	a902      	add	r1, sp, #8
   16182:	4628      	mov	r0, r5
   16184:	f010 fb0b 	bl	2679e <memcmp>
   16188:	b178      	cbz	r0, 161aa <bt_id_create+0xae>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   1618a:	4b0f      	ldr	r3, [pc, #60]	; (161c8 <bt_id_create+0xcc>)
   1618c:	79de      	ldrb	r6, [r3, #7]
   1618e:	1c72      	adds	r2, r6, #1
   16190:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   16192:	4622      	mov	r2, r4
   16194:	4629      	mov	r1, r5
   16196:	4630      	mov	r0, r6
   16198:	f7ff ff78 	bl	1608c <id_create>
	if (err) {
   1619c:	b900      	cbnz	r0, 161a0 <bt_id_create+0xa4>
		return err;
	}

	return new_id;
   1619e:	4630      	mov	r0, r6
}
   161a0:	b004      	add	sp, #16
   161a2:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   161a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   161a8:	e7fa      	b.n	161a0 <bt_id_create+0xa4>
			return -EINVAL;
   161aa:	f06f 0015 	mvn.w	r0, #21
   161ae:	e7f7      	b.n	161a0 <bt_id_create+0xa4>
		return -EINVAL;
   161b0:	f06f 0015 	mvn.w	r0, #21
   161b4:	e7f4      	b.n	161a0 <bt_id_create+0xa4>
		return -ENOMEM;
   161b6:	f06f 000b 	mvn.w	r0, #11
   161ba:	e7f1      	b.n	161a0 <bt_id_create+0xa4>
   161bc:	00029da0 	.word	0x00029da0
   161c0:	00029d70 	.word	0x00029d70
   161c4:	0002b9dc 	.word	0x0002b9dc
   161c8:	200002b0 	.word	0x200002b0
   161cc:	2000037c 	.word	0x2000037c

000161d0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   161d0:	b530      	push	{r4, r5, lr}
   161d2:	b087      	sub	sp, #28
   161d4:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   161d6:	aa01      	add	r2, sp, #4
   161d8:	2100      	movs	r1, #0
   161da:	f241 0009 	movw	r0, #4105	; 0x1009
   161de:	f7fe fed9 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   161e2:	b9f0      	cbnz	r0, 16222 <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   161e4:	9b01      	ldr	r3, [sp, #4]
   161e6:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   161e8:	3401      	adds	r4, #1
   161ea:	2300      	movs	r3, #0
   161ec:	9302      	str	r3, [sp, #8]
   161ee:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   161f2:	2206      	movs	r2, #6
   161f4:	a902      	add	r1, sp, #8
   161f6:	4620      	mov	r0, r4
   161f8:	f010 fad1 	bl	2679e <memcmp>
   161fc:	b158      	cbz	r0, 16216 <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   161fe:	4b18      	ldr	r3, [pc, #96]	; (16260 <bt_id_read_public_addr+0x90>)
   16200:	e893 0003 	ldmia.w	r3, {r0, r1}
   16204:	9004      	str	r0, [sp, #16]
   16206:	f8ad 1014 	strh.w	r1, [sp, #20]
   1620a:	2206      	movs	r2, #6
   1620c:	a904      	add	r1, sp, #16
   1620e:	4620      	mov	r0, r4
   16210:	f010 fac5 	bl	2679e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16214:	b9b8      	cbnz	r0, 16246 <bt_id_read_public_addr+0x76>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   16216:	9801      	ldr	r0, [sp, #4]
   16218:	f004 f9b8 	bl	1a58c <net_buf_unref>
		return 0U;
   1621c:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1621e:	b007      	add	sp, #28
   16220:	bd30      	pop	{r4, r5, pc}
   16222:	4b10      	ldr	r3, [pc, #64]	; (16264 <bt_id_read_public_addr+0x94>)
   16224:	4a10      	ldr	r2, [pc, #64]	; (16268 <bt_id_read_public_addr+0x98>)
   16226:	1a9b      	subs	r3, r3, r2
   16228:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
   1622a:	f04f 0100 	mov.w	r1, #0
   1622e:	2202      	movs	r2, #2
   16230:	f362 0102 	bfi	r1, r2, #0, #3
   16234:	f36f 01c5 	bfc	r1, #3, #3
   16238:	f363 118f 	bfi	r1, r3, #6, #10
   1623c:	480b      	ldr	r0, [pc, #44]	; (1626c <bt_id_read_public_addr+0x9c>)
   1623e:	f7fb fbb9 	bl	119b4 <log_0>
		return 0U;
   16242:	2000      	movs	r0, #0
   16244:	e7eb      	b.n	1621e <bt_id_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
   16246:	2206      	movs	r2, #6
   16248:	4621      	mov	r1, r4
   1624a:	1c68      	adds	r0, r5, #1
   1624c:	f010 fad4 	bl	267f8 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   16250:	2300      	movs	r3, #0
   16252:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   16254:	9801      	ldr	r0, [sp, #4]
   16256:	f004 f999 	bl	1a58c <net_buf_unref>
	return 1U;
   1625a:	2001      	movs	r0, #1
   1625c:	e7df      	b.n	1621e <bt_id_read_public_addr+0x4e>
   1625e:	bf00      	nop
   16260:	00029f08 	.word	0x00029f08
   16264:	00029da0 	.word	0x00029da0
   16268:	00029d70 	.word	0x00029d70
   1626c:	0002ba0c 	.word	0x0002ba0c

00016270 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   16270:	b500      	push	{lr}
   16272:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   16274:	4668      	mov	r0, sp
   16276:	f7ff ffab 	bl	161d0 <bt_id_read_public_addr>
   1627a:	4b06      	ldr	r3, [pc, #24]	; (16294 <bt_setup_public_id_addr+0x24>)
   1627c:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1627e:	b918      	cbnz	r0, 16288 <bt_setup_public_id_addr+0x18>
		return 0;
   16280:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   16282:	b003      	add	sp, #12
   16284:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   16288:	2200      	movs	r2, #0
   1628a:	4669      	mov	r1, sp
   1628c:	4610      	mov	r0, r2
   1628e:	f7ff fefd 	bl	1608c <id_create>
   16292:	e7f6      	b.n	16282 <bt_setup_public_id_addr+0x12>
   16294:	200002b0 	.word	0x200002b0

00016298 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1629c:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1629e:	4b2e      	ldr	r3, [pc, #184]	; (16358 <bt_read_static_addr+0xc0>)
   162a0:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   162a4:	f015 0501 	ands.w	r5, r5, #1
   162a8:	d010      	beq.n	162cc <bt_read_static_addr+0x34>
   162aa:	4607      	mov	r7, r0
   162ac:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   162ae:	aa01      	add	r2, sp, #4
   162b0:	2100      	movs	r1, #0
   162b2:	f64f 4009 	movw	r0, #64521	; 0xfc09
   162b6:	f7fe fe6d 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   162ba:	4604      	mov	r4, r0
   162bc:	b9b8      	cbnz	r0, 162ee <bt_read_static_addr+0x56>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   162be:	9b01      	ldr	r3, [sp, #4]
   162c0:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   162c2:	7875      	ldrb	r5, [r6, #1]
   162c4:	4545      	cmp	r5, r8
   162c6:	bf28      	it	cs
   162c8:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   162ca:	e029      	b.n	16320 <bt_read_static_addr+0x88>
   162cc:	4b23      	ldr	r3, [pc, #140]	; (1635c <bt_read_static_addr+0xc4>)
   162ce:	4a24      	ldr	r2, [pc, #144]	; (16360 <bt_read_static_addr+0xc8>)
   162d0:	1a9b      	subs	r3, r3, r2
   162d2:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
   162d4:	f04f 0100 	mov.w	r1, #0
   162d8:	2202      	movs	r2, #2
   162da:	f362 0102 	bfi	r1, r2, #0, #3
   162de:	f36f 01c5 	bfc	r1, #3, #3
   162e2:	f363 118f 	bfi	r1, r3, #6, #10
   162e6:	481f      	ldr	r0, [pc, #124]	; (16364 <bt_read_static_addr+0xcc>)
   162e8:	f7fb fb64 	bl	119b4 <log_0>
		return 0;
   162ec:	e01e      	b.n	1632c <bt_read_static_addr+0x94>
   162ee:	4b1b      	ldr	r3, [pc, #108]	; (1635c <bt_read_static_addr+0xc4>)
   162f0:	4a1b      	ldr	r2, [pc, #108]	; (16360 <bt_read_static_addr+0xc8>)
   162f2:	1a9b      	subs	r3, r3, r2
   162f4:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
   162f6:	f04f 0100 	mov.w	r1, #0
   162fa:	2202      	movs	r2, #2
   162fc:	f362 0102 	bfi	r1, r2, #0, #3
   16300:	f36f 01c5 	bfc	r1, #3, #3
   16304:	f363 118f 	bfi	r1, r3, #6, #10
   16308:	4817      	ldr	r0, [pc, #92]	; (16368 <bt_read_static_addr+0xd0>)
   1630a:	f7fb fb53 	bl	119b4 <log_0>
		return 0;
   1630e:	2500      	movs	r5, #0
   16310:	e00c      	b.n	1632c <bt_read_static_addr+0x94>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   16312:	2216      	movs	r2, #22
   16314:	1cb1      	adds	r1, r6, #2
   16316:	fb02 7004 	mla	r0, r2, r4, r7
   1631a:	f010 fa6d 	bl	267f8 <memcpy>
	for (i = 0; i < cnt; i++) {
   1631e:	3401      	adds	r4, #1
   16320:	42a5      	cmp	r5, r4
   16322:	dcf6      	bgt.n	16312 <bt_read_static_addr+0x7a>
	}

	net_buf_unref(rsp);
   16324:	9801      	ldr	r0, [sp, #4]
   16326:	f004 f931 	bl	1a58c <net_buf_unref>
	if (!cnt) {
   1632a:	b11d      	cbz	r5, 16334 <bt_read_static_addr+0x9c>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   1632c:	4628      	mov	r0, r5
   1632e:	b002      	add	sp, #8
   16330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16334:	4b09      	ldr	r3, [pc, #36]	; (1635c <bt_read_static_addr+0xc4>)
   16336:	4a0a      	ldr	r2, [pc, #40]	; (16360 <bt_read_static_addr+0xc8>)
   16338:	1a9b      	subs	r3, r3, r2
   1633a:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
   1633c:	f04f 0100 	mov.w	r1, #0
   16340:	2202      	movs	r2, #2
   16342:	f362 0102 	bfi	r1, r2, #0, #3
   16346:	f36f 01c5 	bfc	r1, #3, #3
   1634a:	f363 118f 	bfi	r1, r3, #6, #10
   1634e:	4807      	ldr	r0, [pc, #28]	; (1636c <bt_read_static_addr+0xd4>)
   16350:	f7fb fb30 	bl	119b4 <log_0>
   16354:	e7ea      	b.n	1632c <bt_read_static_addr+0x94>
   16356:	bf00      	nop
   16358:	200002b0 	.word	0x200002b0
   1635c:	00029da0 	.word	0x00029da0
   16360:	00029d70 	.word	0x00029d70
   16364:	0002ba2c 	.word	0x0002ba2c
   16368:	0002ba58 	.word	0x0002ba58
   1636c:	0002ba78 	.word	0x0002ba78

00016370 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   16370:	b510      	push	{r4, lr}
   16372:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   16374:	4b17      	ldr	r3, [pc, #92]	; (163d4 <bt_setup_random_id_addr+0x64>)
   16376:	79dc      	ldrb	r4, [r3, #7]
   16378:	b934      	cbnz	r4, 16388 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1637a:	2101      	movs	r1, #1
   1637c:	a802      	add	r0, sp, #8
   1637e:	f7ff ff8b 	bl	16298 <bt_read_static_addr>
   16382:	4b14      	ldr	r3, [pc, #80]	; (163d4 <bt_setup_random_id_addr+0x64>)
   16384:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   16386:	b938      	cbnz	r0, 16398 <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   16388:	2100      	movs	r1, #0
   1638a:	4608      	mov	r0, r1
   1638c:	f7ff feb6 	bl	160fc <bt_id_create>
   16390:	4603      	mov	r3, r0
}
   16392:	4618      	mov	r0, r3
   16394:	b008      	add	sp, #32
   16396:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16398:	4b0e      	ldr	r3, [pc, #56]	; (163d4 <bt_setup_random_id_addr+0x64>)
   1639a:	79db      	ldrb	r3, [r3, #7]
   1639c:	42a3      	cmp	r3, r4
   1639e:	d916      	bls.n	163ce <bt_setup_random_id_addr+0x5e>
   163a0:	2206      	movs	r2, #6
   163a2:	2116      	movs	r1, #22
   163a4:	ab02      	add	r3, sp, #8
   163a6:	fb01 3104 	mla	r1, r1, r4, r3
   163aa:	f10d 0001 	add.w	r0, sp, #1
   163ae:	f010 fa23 	bl	267f8 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   163b2:	2301      	movs	r3, #1
   163b4:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   163b8:	2200      	movs	r2, #0
   163ba:	4669      	mov	r1, sp
   163bc:	4620      	mov	r0, r4
   163be:	f7ff fe65 	bl	1608c <id_create>
				if (err) {
   163c2:	4603      	mov	r3, r0
   163c4:	2800      	cmp	r0, #0
   163c6:	d1e4      	bne.n	16392 <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   163c8:	3401      	adds	r4, #1
   163ca:	b2e4      	uxtb	r4, r4
   163cc:	e7e4      	b.n	16398 <bt_setup_random_id_addr+0x28>
			return 0;
   163ce:	2300      	movs	r3, #0
   163d0:	e7df      	b.n	16392 <bt_setup_random_id_addr+0x22>
   163d2:	bf00      	nop
   163d4:	200002b0 	.word	0x200002b0

000163d8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   163d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163da:	460d      	mov	r5, r1
   163dc:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   163de:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   163e0:	f011 0f01 	tst.w	r1, #1
   163e4:	d027      	beq.n	16436 <bt_id_set_adv_own_addr+0x5e>
   163e6:	4617      	mov	r7, r2
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   163e8:	b142      	cbz	r2, 163fc <bt_id_set_adv_own_addr+0x24>
   163ea:	f011 0f20 	tst.w	r1, #32
   163ee:	d005      	beq.n	163fc <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   163f0:	4b22      	ldr	r3, [pc, #136]	; (1647c <bt_id_set_adv_own_addr+0xa4>)
   163f2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   163f6:	f013 0f40 	tst.w	r3, #64	; 0x40
   163fa:	d038      	beq.n	1646e <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   163fc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   16400:	4a1e      	ldr	r2, [pc, #120]	; (1647c <bt_id_set_adv_own_addr+0xa4>)
   16402:	5cd3      	ldrb	r3, [r2, r3]
   16404:	2b01      	cmp	r3, #1
   16406:	d00d      	beq.n	16424 <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   16408:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1640c:	4b1b      	ldr	r3, [pc, #108]	; (1647c <bt_id_set_adv_own_addr+0xa4>)
   1640e:	5d1b      	ldrb	r3, [r3, r4]
   16410:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16412:	b37f      	cbz	r7, 16474 <bt_id_set_adv_own_addr+0x9c>
   16414:	f015 0f20 	tst.w	r5, #32
   16418:	d02e      	beq.n	16478 <bt_id_set_adv_own_addr+0xa0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1641a:	f043 0302 	orr.w	r3, r3, #2
   1641e:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   16420:	2000      	movs	r0, #0
   16422:	e017      	b.n	16454 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   16424:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   16428:	4411      	add	r1, r2
   1642a:	3101      	adds	r1, #1
   1642c:	f010 fbfe 	bl	26c2c <bt_id_set_adv_random_addr>
				if (err) {
   16430:	2800      	cmp	r0, #0
   16432:	d0e9      	beq.n	16408 <bt_id_set_adv_own_addr+0x30>
   16434:	e00e      	b.n	16454 <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   16436:	f011 0f04 	tst.w	r1, #4
   1643a:	d013      	beq.n	16464 <bt_id_set_adv_own_addr+0x8c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1643c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   16440:	4a0e      	ldr	r2, [pc, #56]	; (1647c <bt_id_set_adv_own_addr+0xa4>)
   16442:	5cd3      	ldrb	r3, [r2, r3]
   16444:	2b01      	cmp	r3, #1
   16446:	d006      	beq.n	16456 <bt_id_set_adv_own_addr+0x7e>
	int err = 0;
   16448:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   1644a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1644e:	4b0b      	ldr	r3, [pc, #44]	; (1647c <bt_id_set_adv_own_addr+0xa4>)
   16450:	5d1b      	ldrb	r3, [r3, r4]
   16452:	7033      	strb	r3, [r6, #0]
}
   16454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   16456:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1645a:	4411      	add	r1, r2
   1645c:	3101      	adds	r1, #1
   1645e:	f010 fbe5 	bl	26c2c <bt_id_set_adv_random_addr>
   16462:	e7f2      	b.n	1644a <bt_id_set_adv_own_addr+0x72>
			err = bt_id_set_adv_private_addr(adv);
   16464:	f010 fbe7 	bl	26c36 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   16468:	2301      	movs	r3, #1
   1646a:	7033      	strb	r3, [r6, #0]
		if (err) {
   1646c:	e7f2      	b.n	16454 <bt_id_set_adv_own_addr+0x7c>
			return -ENOTSUP;
   1646e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16472:	e7ef      	b.n	16454 <bt_id_set_adv_own_addr+0x7c>
	return 0;
   16474:	2000      	movs	r0, #0
   16476:	e7ed      	b.n	16454 <bt_id_set_adv_own_addr+0x7c>
   16478:	2000      	movs	r0, #0
   1647a:	e7eb      	b.n	16454 <bt_id_set_adv_own_addr+0x7c>
   1647c:	200002b0 	.word	0x200002b0

00016480 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   16480:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16482:	4b25      	ldr	r3, [pc, #148]	; (16518 <bt_id_init+0x98>)
   16484:	79db      	ldrb	r3, [r3, #7]
   16486:	b12b      	cbz	r3, 16494 <bt_id_init+0x14>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16488:	4b23      	ldr	r3, [pc, #140]	; (16518 <bt_id_init+0x98>)
   1648a:	79db      	ldrb	r3, [r3, #7]
   1648c:	b1c3      	cbz	r3, 164c0 <bt_id_init+0x40>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1648e:	2400      	movs	r4, #0
}
   16490:	4620      	mov	r0, r4
   16492:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   16494:	f7ff feec 	bl	16270 <bt_setup_public_id_addr>
		if (err) {
   16498:	4604      	mov	r4, r0
   1649a:	2800      	cmp	r0, #0
   1649c:	d0f4      	beq.n	16488 <bt_id_init+0x8>
   1649e:	4b1f      	ldr	r3, [pc, #124]	; (1651c <bt_id_init+0x9c>)
   164a0:	4a1f      	ldr	r2, [pc, #124]	; (16520 <bt_id_init+0xa0>)
   164a2:	1a9b      	subs	r3, r3, r2
   164a4:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   164a6:	f04f 0100 	mov.w	r1, #0
   164aa:	2201      	movs	r2, #1
   164ac:	f362 0102 	bfi	r1, r2, #0, #3
   164b0:	f36f 01c5 	bfc	r1, #3, #3
   164b4:	f363 118f 	bfi	r1, r3, #6, #10
   164b8:	481a      	ldr	r0, [pc, #104]	; (16524 <bt_id_init+0xa4>)
   164ba:	f7fb fa7b 	bl	119b4 <log_0>
			return err;
   164be:	e7e7      	b.n	16490 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   164c0:	f7ff ff56 	bl	16370 <bt_setup_random_id_addr>
		if (err) {
   164c4:	4604      	mov	r4, r0
   164c6:	b9b0      	cbnz	r0, 164f6 <bt_id_init+0x76>
		err = set_random_address(&bt_dev.id_addr[0].a);
   164c8:	4817      	ldr	r0, [pc, #92]	; (16528 <bt_id_init+0xa8>)
   164ca:	f7ff fdb1 	bl	16030 <set_random_address>
		if (err) {
   164ce:	4604      	mov	r4, r0
   164d0:	2800      	cmp	r0, #0
   164d2:	d0dd      	beq.n	16490 <bt_id_init+0x10>
   164d4:	4b11      	ldr	r3, [pc, #68]	; (1651c <bt_id_init+0x9c>)
   164d6:	4a12      	ldr	r2, [pc, #72]	; (16520 <bt_id_init+0xa0>)
   164d8:	1a9b      	subs	r3, r3, r2
   164da:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set random address");
   164dc:	f04f 0100 	mov.w	r1, #0
   164e0:	2201      	movs	r2, #1
   164e2:	f362 0102 	bfi	r1, r2, #0, #3
   164e6:	f36f 01c5 	bfc	r1, #3, #3
   164ea:	f363 118f 	bfi	r1, r3, #6, #10
   164ee:	480f      	ldr	r0, [pc, #60]	; (1652c <bt_id_init+0xac>)
   164f0:	f7fb fa60 	bl	119b4 <log_0>
			return err;
   164f4:	e7cc      	b.n	16490 <bt_id_init+0x10>
   164f6:	4b09      	ldr	r3, [pc, #36]	; (1651c <bt_id_init+0x9c>)
   164f8:	4a09      	ldr	r2, [pc, #36]	; (16520 <bt_id_init+0xa0>)
   164fa:	1a9b      	subs	r3, r3, r2
   164fc:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   164fe:	f04f 0100 	mov.w	r1, #0
   16502:	2201      	movs	r2, #1
   16504:	f362 0102 	bfi	r1, r2, #0, #3
   16508:	f36f 01c5 	bfc	r1, #3, #3
   1650c:	f363 118f 	bfi	r1, r3, #6, #10
   16510:	4804      	ldr	r0, [pc, #16]	; (16524 <bt_id_init+0xa4>)
   16512:	f7fb fa4f 	bl	119b4 <log_0>
			return err;
   16516:	e7bb      	b.n	16490 <bt_id_init+0x10>
   16518:	200002b0 	.word	0x200002b0
   1651c:	00029da0 	.word	0x00029da0
   16520:	00029d70 	.word	0x00029d70
   16524:	0002baa4 	.word	0x0002baa4
   16528:	200002b1 	.word	0x200002b1
   1652c:	0002bac4 	.word	0x0002bac4

00016530 <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   16530:	4800      	ldr	r0, [pc, #0]	; (16534 <adv_new_legacy+0x4>)
   16532:	4770      	bx	lr
   16534:	200002c8 	.word	0x200002c8

00016538 <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   16538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1653c:	b083      	sub	sp, #12
   1653e:	4605      	mov	r5, r0
   16540:	4688      	mov	r8, r1
   16542:	9201      	str	r2, [sp, #4]
   16544:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   16546:	f04f 0a00 	mov.w	sl, #0
	uint8_t set_data_len = 0;
   1654a:	4653      	mov	r3, sl
	for (size_t i = 0; i < ad_len; i++) {
   1654c:	9a00      	ldr	r2, [sp, #0]
   1654e:	4552      	cmp	r2, sl
   16550:	d94b      	bls.n	165ea <set_data_add_complete+0xb2>
		const struct bt_data *data = ad[i].data;
   16552:	9a01      	ldr	r2, [sp, #4]
   16554:	eb02 09ca 	add.w	r9, r2, sl, lsl #3
   16558:	f852 703a 	ldr.w	r7, [r2, sl, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   1655c:	2400      	movs	r4, #0
   1655e:	e016      	b.n	1658e <set_data_add_complete+0x56>
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
					return -EINVAL;
				}

				type = BT_DATA_NAME_SHORTENED;
   16560:	f04f 0c08 	mov.w	ip, #8
				len = shortened_len;
			}

			set_data[set_data_len++] = len + 1;
   16564:	b2d6      	uxtb	r6, r2
   16566:	1c59      	adds	r1, r3, #1
   16568:	b2c9      	uxtb	r1, r1
   1656a:	f106 0b01 	add.w	fp, r6, #1
   1656e:	f805 b00e 	strb.w	fp, [r5, lr]
			set_data[set_data_len++] = type;
   16572:	3302      	adds	r3, #2
   16574:	fa5f fb83 	uxtb.w	fp, r3
   16578:	f805 c001 	strb.w	ip, [r5, r1]

			memcpy(&set_data[set_data_len], data[j].data, len);
   1657c:	6841      	ldr	r1, [r0, #4]
   1657e:	eb05 000b 	add.w	r0, r5, fp
   16582:	f010 f939 	bl	267f8 <memcpy>
			set_data_len += len;
   16586:	eb0b 0306 	add.w	r3, fp, r6
   1658a:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   1658c:	3401      	adds	r4, #1
   1658e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   16592:	4294      	cmp	r4, r2
   16594:	d226      	bcs.n	165e4 <set_data_add_complete+0xac>
			size_t len = data[j].data_len;
   16596:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   1659a:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   1659c:	f817 c034 	ldrb.w	ip, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   165a0:	469e      	mov	lr, r3
   165a2:	1899      	adds	r1, r3, r2
   165a4:	3102      	adds	r1, #2
   165a6:	4541      	cmp	r1, r8
   165a8:	d9dc      	bls.n	16564 <set_data_add_complete+0x2c>
				ssize_t shortened_len = set_data_len_max -
   165aa:	eba8 0203 	sub.w	r2, r8, r3
   165ae:	3a02      	subs	r2, #2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   165b0:	f1bc 0f09 	cmp.w	ip, #9
   165b4:	d101      	bne.n	165ba <set_data_add_complete+0x82>
   165b6:	2a00      	cmp	r2, #0
   165b8:	dcd2      	bgt.n	16560 <set_data_add_complete+0x28>
   165ba:	4b0e      	ldr	r3, [pc, #56]	; (165f4 <set_data_add_complete+0xbc>)
   165bc:	4a0e      	ldr	r2, [pc, #56]	; (165f8 <set_data_add_complete+0xc0>)
   165be:	1a9b      	subs	r3, r3, r2
   165c0:	08db      	lsrs	r3, r3, #3
					BT_ERR("Too big advertising data");
   165c2:	f04f 0100 	mov.w	r1, #0
   165c6:	2201      	movs	r2, #1
   165c8:	f362 0102 	bfi	r1, r2, #0, #3
   165cc:	f36f 01c5 	bfc	r1, #3, #3
   165d0:	f363 118f 	bfi	r1, r3, #6, #10
   165d4:	4809      	ldr	r0, [pc, #36]	; (165fc <set_data_add_complete+0xc4>)
   165d6:	f7fb f9ed 	bl	119b4 <log_0>
					return -EINVAL;
   165da:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   165de:	b003      	add	sp, #12
   165e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ad_len; i++) {
   165e4:	f10a 0a01 	add.w	sl, sl, #1
   165e8:	e7b0      	b.n	1654c <set_data_add_complete+0x14>
	*data_len = set_data_len;
   165ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   165ec:	7013      	strb	r3, [r2, #0]
	return 0;
   165ee:	2000      	movs	r0, #0
   165f0:	e7f5      	b.n	165de <set_data_add_complete+0xa6>
   165f2:	bf00      	nop
   165f4:	00029d70 	.word	0x00029d70
   165f8:	00029d70 	.word	0x00029d70
   165fc:	0002baec 	.word	0x0002baec

00016600 <valid_adv_ext_param>:
{
   16600:	b510      	push	{r4, lr}
   16602:	b082      	sub	sp, #8
   16604:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   16606:	7800      	ldrb	r0, [r0, #0]
   16608:	4b23      	ldr	r3, [pc, #140]	; (16698 <valid_adv_ext_param+0x98>)
   1660a:	79db      	ldrb	r3, [r3, #7]
   1660c:	4298      	cmp	r0, r3
   1660e:	d302      	bcc.n	16616 <valid_adv_ext_param+0x16>
		return false;
   16610:	2000      	movs	r0, #0
}
   16612:	b002      	add	sp, #8
   16614:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   16616:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1661a:	2300      	movs	r3, #0
   1661c:	9300      	str	r3, [sp, #0]
   1661e:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   16622:	2207      	movs	r2, #7
   16624:	4669      	mov	r1, sp
   16626:	4b1c      	ldr	r3, [pc, #112]	; (16698 <valid_adv_ext_param+0x98>)
   16628:	4418      	add	r0, r3
   1662a:	f010 f8b8 	bl	2679e <memcmp>
	if (param->id >= bt_dev.id_count ||
   1662e:	2800      	cmp	r0, #0
   16630:	d0ee      	beq.n	16610 <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16632:	6863      	ldr	r3, [r4, #4]
   16634:	f013 0f01 	tst.w	r3, #1
   16638:	d107      	bne.n	1664a <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1663a:	4a17      	ldr	r2, [pc, #92]	; (16698 <valid_adv_ext_param+0x98>)
   1663c:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   16640:	2a08      	cmp	r2, #8
   16642:	d802      	bhi.n	1664a <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
   16644:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   16646:	2a9f      	cmp	r2, #159	; 0x9f
   16648:	d91b      	bls.n	16682 <valid_adv_ext_param+0x82>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1664a:	f013 0f30 	tst.w	r3, #48	; 0x30
   1664e:	d001      	beq.n	16654 <valid_adv_ext_param+0x54>
	    !param->peer) {
   16650:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   16652:	b1c2      	cbz	r2, 16686 <valid_adv_ext_param+0x86>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   16654:	f013 0f10 	tst.w	r3, #16
   16658:	d108      	bne.n	1666c <valid_adv_ext_param+0x6c>
	    !param->peer) {
   1665a:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1665c:	b132      	cbz	r2, 1666c <valid_adv_ext_param+0x6c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1665e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   16662:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   16666:	d014      	beq.n	16692 <valid_adv_ext_param+0x92>
	return true;
   16668:	2001      	movs	r0, #1
   1666a:	e7d2      	b.n	16612 <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
   1666c:	68a2      	ldr	r2, [r4, #8]
   1666e:	68e1      	ldr	r1, [r4, #12]
   16670:	428a      	cmp	r2, r1
   16672:	d80a      	bhi.n	1668a <valid_adv_ext_param+0x8a>
   16674:	2a1f      	cmp	r2, #31
   16676:	d90a      	bls.n	1668e <valid_adv_ext_param+0x8e>
		    param->interval_min < 0x0020 ||
   16678:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1667c:	d9ef      	bls.n	1665e <valid_adv_ext_param+0x5e>
			return false;
   1667e:	2000      	movs	r0, #0
   16680:	e7c7      	b.n	16612 <valid_adv_ext_param+0x12>
			return false;
   16682:	2000      	movs	r0, #0
   16684:	e7c5      	b.n	16612 <valid_adv_ext_param+0x12>
		return false;
   16686:	2000      	movs	r0, #0
   16688:	e7c3      	b.n	16612 <valid_adv_ext_param+0x12>
			return false;
   1668a:	2000      	movs	r0, #0
   1668c:	e7c1      	b.n	16612 <valid_adv_ext_param+0x12>
   1668e:	2000      	movs	r0, #0
   16690:	e7bf      	b.n	16612 <valid_adv_ext_param+0x12>
		return false;
   16692:	2000      	movs	r0, #0
   16694:	e7bd      	b.n	16612 <valid_adv_ext_param+0x12>
   16696:	bf00      	nop
   16698:	200002b0 	.word	0x200002b0

0001669c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1669c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1669e:	b085      	sub	sp, #20
   166a0:	4604      	mov	r4, r0
   166a2:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   166a4:	4605      	mov	r5, r0
   166a6:	f815 2b09 	ldrb.w	r2, [r5], #9
   166aa:	4b1f      	ldr	r3, [pc, #124]	; (16728 <le_adv_start_add_conn+0x8c>)
   166ac:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   166b0:	2300      	movs	r3, #0
   166b2:	9300      	str	r3, [sp, #0]
   166b4:	f8cd 3003 	str.w	r3, [sp, #3]
   166b8:	2207      	movs	r2, #7
   166ba:	4669      	mov	r1, sp
   166bc:	4628      	mov	r0, r5
   166be:	f010 f86e 	bl	2679e <memcmp>
   166c2:	b9b8      	cbnz	r0, 166f4 <le_adv_start_add_conn+0x58>
   166c4:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   166c6:	4b19      	ldr	r3, [pc, #100]	; (1672c <le_adv_start_add_conn+0x90>)
   166c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   166cc:	9002      	str	r0, [sp, #8]
   166ce:	f8ad 100c 	strh.w	r1, [sp, #12]
   166d2:	0c09      	lsrs	r1, r1, #16
   166d4:	f88d 100e 	strb.w	r1, [sp, #14]
   166d8:	a902      	add	r1, sp, #8
   166da:	7820      	ldrb	r0, [r4, #0]
   166dc:	f010 fd94 	bl	27208 <bt_conn_add_le>
		if (!conn) {
   166e0:	4604      	mov	r4, r0
   166e2:	b120      	cbz	r0, 166ee <le_adv_start_add_conn+0x52>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   166e4:	2104      	movs	r1, #4
   166e6:	f000 fe35 	bl	17354 <bt_conn_set_state>
		*out_conn = conn;
   166ea:	603c      	str	r4, [r7, #0]
		return 0;
   166ec:	e012      	b.n	16714 <le_adv_start_add_conn+0x78>
			return -ENOMEM;
   166ee:	f06f 060b 	mvn.w	r6, #11
   166f2:	e00f      	b.n	16714 <le_adv_start_add_conn+0x78>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   166f4:	4629      	mov	r1, r5
   166f6:	7820      	ldrb	r0, [r4, #0]
   166f8:	f001 f888 	bl	1780c <bt_conn_exists_le>
   166fc:	b968      	cbnz	r0, 1671a <le_adv_start_add_conn+0x7e>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   166fe:	4629      	mov	r1, r5
   16700:	7820      	ldrb	r0, [r4, #0]
   16702:	f010 fd81 	bl	27208 <bt_conn_add_le>
	if (!conn) {
   16706:	4604      	mov	r4, r0
   16708:	b150      	cbz	r0, 16720 <le_adv_start_add_conn+0x84>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   1670a:	2105      	movs	r1, #5
   1670c:	f000 fe22 	bl	17354 <bt_conn_set_state>
	*out_conn = conn;
   16710:	603c      	str	r4, [r7, #0]
	return 0;
   16712:	2600      	movs	r6, #0
}
   16714:	4630      	mov	r0, r6
   16716:	b005      	add	sp, #20
   16718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   1671a:	f06f 0615 	mvn.w	r6, #21
   1671e:	e7f9      	b.n	16714 <le_adv_start_add_conn+0x78>
		return -ENOMEM;
   16720:	f06f 060b 	mvn.w	r6, #11
   16724:	e7f6      	b.n	16714 <le_adv_start_add_conn+0x78>
   16726:	bf00      	nop
   16728:	200002b0 	.word	0x200002b0
   1672c:	00029f10 	.word	0x00029f10

00016730 <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   16730:	b570      	push	{r4, r5, r6, lr}
   16732:	b084      	sub	sp, #16
   16734:	4604      	mov	r4, r0
   16736:	460e      	mov	r6, r1
	struct bt_conn *conn;

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16738:	f100 0509 	add.w	r5, r0, #9
   1673c:	2300      	movs	r3, #0
   1673e:	9300      	str	r3, [sp, #0]
   16740:	f8cd 3003 	str.w	r3, [sp, #3]
   16744:	2207      	movs	r2, #7
   16746:	4669      	mov	r1, sp
   16748:	4628      	mov	r0, r5
   1674a:	f010 f828 	bl	2679e <memcmp>
   1674e:	b9c8      	cbnz	r0, 16784 <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   16750:	4b10      	ldr	r3, [pc, #64]	; (16794 <le_adv_stop_free_conn+0x64>)
   16752:	e893 0003 	ldmia.w	r3, {r0, r1}
   16756:	9002      	str	r0, [sp, #8]
   16758:	f8ad 100c 	strh.w	r1, [sp, #12]
   1675c:	0c09      	lsrs	r1, r1, #16
   1675e:	f88d 100e 	strb.w	r1, [sp, #14]
   16762:	2204      	movs	r2, #4
   16764:	a902      	add	r1, sp, #8
   16766:	7820      	ldrb	r0, [r4, #0]
   16768:	f001 f8a4 	bl	178b4 <bt_conn_lookup_state_le>
   1676c:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECT_DIR_ADV);
	}

	if (conn) {
   1676e:	b13c      	cbz	r4, 16780 <le_adv_stop_free_conn+0x50>
		conn->err = status;
   16770:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16772:	2100      	movs	r1, #0
   16774:	4620      	mov	r0, r4
   16776:	f000 fded 	bl	17354 <bt_conn_set_state>
		bt_conn_unref(conn);
   1677a:	4620      	mov	r0, r4
   1677c:	f000 fda6 	bl	172cc <bt_conn_unref>
	}
}
   16780:	b004      	add	sp, #16
   16782:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16784:	2205      	movs	r2, #5
   16786:	4629      	mov	r1, r5
   16788:	7820      	ldrb	r0, [r4, #0]
   1678a:	f001 f893 	bl	178b4 <bt_conn_lookup_state_le>
   1678e:	4604      	mov	r4, r0
   16790:	e7ed      	b.n	1676e <le_adv_stop_free_conn+0x3e>
   16792:	bf00      	nop
   16794:	00029f10 	.word	0x00029f10

00016798 <bt_le_adv_lookup_legacy>:
}
   16798:	4800      	ldr	r0, [pc, #0]	; (1679c <bt_le_adv_lookup_legacy+0x4>)
   1679a:	4770      	bx	lr
   1679c:	200002c8 	.word	0x200002c8

000167a0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   167a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167a4:	b08f      	sub	sp, #60	; 0x3c
   167a6:	9205      	str	r2, [sp, #20]
   167a8:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   167aa:	2300      	movs	r3, #0
   167ac:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   167ae:	690f      	ldr	r7, [r1, #16]
   167b0:	ebb7 0b03 	subs.w	fp, r7, r3
   167b4:	bf18      	it	ne
   167b6:	f04f 0b01 	movne.w	fp, #1
   167ba:	f3bf 8f5b 	dmb	ish
   167be:	4bc5      	ldr	r3, [pc, #788]	; (16ad4 <bt_le_adv_start_legacy+0x334>)
   167c0:	681b      	ldr	r3, [r3, #0]
   167c2:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   167c6:	f013 0f02 	tst.w	r3, #2
   167ca:	f000 81c1 	beq.w	16b50 <bt_le_adv_start_legacy+0x3b0>
   167ce:	4605      	mov	r5, r0
   167d0:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   167d2:	4608      	mov	r0, r1
   167d4:	f010 fb3d 	bl	26e52 <valid_adv_param>
   167d8:	2800      	cmp	r0, #0
   167da:	f000 81bc 	beq.w	16b56 <bt_le_adv_start_legacy+0x3b6>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   167de:	4620      	mov	r0, r4
   167e0:	f010 fa3e 	bl	26c60 <bt_id_adv_random_addr_check>
   167e4:	4682      	mov	sl, r0
   167e6:	2800      	cmp	r0, #0
   167e8:	f000 81b8 	beq.w	16b5c <bt_le_adv_start_legacy+0x3bc>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   167ec:	f105 0610 	add.w	r6, r5, #16
   167f0:	f3bf 8f5b 	dmb	ish
   167f4:	692b      	ldr	r3, [r5, #16]
   167f6:	f3bf 8f5b 	dmb	ish
   167fa:	f013 0f40 	tst.w	r3, #64	; 0x40
   167fe:	f040 81b0 	bne.w	16b62 <bt_le_adv_start_legacy+0x3c2>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   16802:	220f      	movs	r2, #15
   16804:	2100      	movs	r1, #0
   16806:	a808      	add	r0, sp, #32
   16808:	f010 f81a 	bl	26840 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1680c:	68a3      	ldr	r3, [r4, #8]
   1680e:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   16812:	68e3      	ldr	r3, [r4, #12]
   16814:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   16818:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1681c:	4648      	mov	r0, r9
   1681e:	f010 fa41 	bl	26ca4 <get_adv_channel_map>
   16822:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   16826:	4648      	mov	r0, r9
   16828:	f010 fa3a 	bl	26ca0 <get_filter_policy>
   1682c:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   16830:	782a      	ldrb	r2, [r5, #0]
   16832:	7823      	ldrb	r3, [r4, #0]
   16834:	429a      	cmp	r2, r3
   16836:	d00c      	beq.n	16852 <bt_le_adv_start_legacy+0xb2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16838:	4ba6      	ldr	r3, [pc, #664]	; (16ad4 <bt_le_adv_start_legacy+0x334>)
   1683a:	f3bf 8f5b 	dmb	ish
   1683e:	e853 2f00 	ldrex	r2, [r3]
   16842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   16846:	e843 2100 	strex	r1, r2, [r3]
   1684a:	2900      	cmp	r1, #0
   1684c:	d1f7      	bne.n	1683e <bt_le_adv_start_legacy+0x9e>
   1684e:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   16852:	7823      	ldrb	r3, [r4, #0]
   16854:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   16856:	4aa0      	ldr	r2, [pc, #640]	; (16ad8 <bt_le_adv_start_legacy+0x338>)
   16858:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1685c:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   16860:	465a      	mov	r2, fp
   16862:	6861      	ldr	r1, [r4, #4]
   16864:	4628      	mov	r0, r5
   16866:	f7ff fdb7 	bl	163d8 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   1686a:	4681      	mov	r9, r0
   1686c:	2800      	cmp	r0, #0
   1686e:	f040 80f1 	bne.w	16a54 <bt_le_adv_start_legacy+0x2b4>
		return err;
	}

	if (dir_adv) {
   16872:	b1ef      	cbz	r7, 168b0 <bt_le_adv_start_legacy+0x110>
	memcpy(dst, src, sizeof(*dst));
   16874:	2207      	movs	r2, #7
   16876:	6921      	ldr	r1, [r4, #16]
   16878:	f105 0009 	add.w	r0, r5, #9
   1687c:	f00f ffbc 	bl	267f8 <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   16880:	4620      	mov	r0, r4
   16882:	f010 faf7 	bl	26e74 <get_adv_name_type_param>
   16886:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16888:	6863      	ldr	r3, [r4, #4]
   1688a:	f013 0f01 	tst.w	r3, #1
   1688e:	d022      	beq.n	168d6 <bt_le_adv_start_legacy+0x136>
		if (dir_adv) {
   16890:	b1ef      	cbz	r7, 168ce <bt_le_adv_start_legacy+0x12e>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   16892:	f013 0f10 	tst.w	r3, #16
   16896:	d016      	beq.n	168c6 <bt_le_adv_start_legacy+0x126>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   16898:	2304      	movs	r3, #4
   1689a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1689e:	2207      	movs	r2, #7
   168a0:	6921      	ldr	r1, [r4, #16]
   168a2:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   168a6:	f00f ffa7 	bl	267f8 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   168aa:	f04f 0a00 	mov.w	sl, #0
}
   168ae:	e01a      	b.n	168e6 <bt_le_adv_start_legacy+0x146>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   168b0:	2300      	movs	r3, #0
   168b2:	930c      	str	r3, [sp, #48]	; 0x30
   168b4:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
	memcpy(dst, src, sizeof(*dst));
   168b8:	2207      	movs	r2, #7
   168ba:	a90c      	add	r1, sp, #48	; 0x30
   168bc:	f105 0009 	add.w	r0, r5, #9
   168c0:	f00f ff9a 	bl	267f8 <memcpy>
   168c4:	e7dc      	b.n	16880 <bt_le_adv_start_legacy+0xe0>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   168c6:	2301      	movs	r3, #1
   168c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   168cc:	e7e7      	b.n	1689e <bt_le_adv_start_legacy+0xfe>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   168ce:	2300      	movs	r3, #0
   168d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   168d4:	e007      	b.n	168e6 <bt_le_adv_start_legacy+0x146>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   168d6:	f413 7f00 	tst.w	r3, #512	; 0x200
   168da:	d101      	bne.n	168e0 <bt_le_adv_start_legacy+0x140>
   168dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   168de:	b35b      	cbz	r3, 16938 <bt_le_adv_start_legacy+0x198>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   168e0:	2302      	movs	r3, #2
   168e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   168e6:	210f      	movs	r1, #15
   168e8:	f242 0006 	movw	r0, #8198	; 0x2006
   168ec:	f7fe fb02 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   168f0:	4681      	mov	r9, r0
   168f2:	2800      	cmp	r0, #0
   168f4:	f000 8138 	beq.w	16b68 <bt_le_adv_start_legacy+0x3c8>
   168f8:	220f      	movs	r2, #15
   168fa:	a908      	add	r1, sp, #32
   168fc:	3008      	adds	r0, #8
   168fe:	f011 ff5a 	bl	287b6 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   16902:	2200      	movs	r2, #0
   16904:	4649      	mov	r1, r9
   16906:	f242 0006 	movw	r0, #8198	; 0x2006
   1690a:	f7fe fb43 	bl	14f94 <bt_hci_cmd_send_sync>
	if (err) {
   1690e:	4681      	mov	r9, r0
   16910:	2800      	cmp	r0, #0
   16912:	f040 809f 	bne.w	16a54 <bt_le_adv_start_legacy+0x2b4>
		return err;
	}

	if (!dir_adv) {
   16916:	b1bf      	cbz	r7, 16948 <bt_le_adv_start_legacy+0x1a8>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16918:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1691a:	f013 0f01 	tst.w	r3, #1
   1691e:	d02b      	beq.n	16978 <bt_le_adv_start_legacy+0x1d8>
		err = le_adv_start_add_conn(adv, &conn);
   16920:	a907      	add	r1, sp, #28
   16922:	4628      	mov	r0, r5
   16924:	f7ff feba 	bl	1669c <le_adv_start_add_conn>
		if (err) {
   16928:	b330      	cbz	r0, 16978 <bt_le_adv_start_legacy+0x1d8>
			if (err == -ENOMEM && !dir_adv &&
   1692a:	f110 0f0c 	cmn.w	r0, #12
   1692e:	f040 811e 	bne.w	16b6e <bt_le_adv_start_legacy+0x3ce>
   16932:	b1df      	cbz	r7, 1696c <bt_le_adv_start_legacy+0x1cc>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   16934:	4681      	mov	r9, r0
   16936:	e08d      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   16938:	2802      	cmp	r0, #2
   1693a:	d0d1      	beq.n	168e0 <bt_le_adv_start_legacy+0x140>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1693c:	2303      	movs	r3, #3
   1693e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   16942:	f04f 0a00 	mov.w	sl, #0
   16946:	e7ce      	b.n	168e6 <bt_le_adv_start_legacy+0x146>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   16948:	f8cd b00c 	str.w	fp, [sp, #12]
   1694c:	f8cd a008 	str.w	sl, [sp, #8]
   16950:	2300      	movs	r3, #0
   16952:	9301      	str	r3, [sp, #4]
   16954:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16956:	9300      	str	r3, [sp, #0]
   16958:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1695a:	4642      	mov	r2, r8
   1695c:	9905      	ldr	r1, [sp, #20]
   1695e:	4628      	mov	r0, r5
   16960:	f010 f9ec 	bl	26d3c <le_adv_update>
		if (err) {
   16964:	2800      	cmp	r0, #0
   16966:	d0d7      	beq.n	16918 <bt_le_adv_start_legacy+0x178>
			return err;
   16968:	4681      	mov	r9, r0
   1696a:	e073      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1696c:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1696e:	f012 0f02 	tst.w	r2, #2
   16972:	d00c      	beq.n	1698e <bt_le_adv_start_legacy+0x1ee>
			return err;
   16974:	4681      	mov	r9, r0
   16976:	e06d      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   16978:	2101      	movs	r1, #1
   1697a:	4628      	mov	r0, r5
   1697c:	f010 fab6 	bl	26eec <bt_le_adv_set_enable>
	if (err) {
   16980:	4605      	mov	r5, r0
   16982:	2800      	cmp	r0, #0
   16984:	d16a      	bne.n	16a5c <bt_le_adv_start_legacy+0x2bc>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16986:	9807      	ldr	r0, [sp, #28]
   16988:	b108      	cbz	r0, 1698e <bt_le_adv_start_legacy+0x1ee>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   1698a:	f000 fc9f 	bl	172cc <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1698e:	2f00      	cmp	r7, #0
   16990:	d07e      	beq.n	16a90 <bt_le_adv_start_legacy+0x2f0>
   16992:	464b      	mov	r3, r9
	if (val) {
   16994:	f013 0f01 	tst.w	r3, #1
   16998:	f000 8082 	beq.w	16aa0 <bt_le_adv_start_legacy+0x300>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1699c:	f3bf 8f5b 	dmb	ish
   169a0:	e856 3f00 	ldrex	r3, [r6]
   169a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   169a8:	e846 3200 	strex	r2, r3, [r6]
   169ac:	2a00      	cmp	r2, #0
   169ae:	d1f7      	bne.n	169a0 <bt_le_adv_start_legacy+0x200>
   169b0:	f3bf 8f5b 	dmb	ish
   169b4:	f1bb 0f01 	cmp.w	fp, #1
   169b8:	d17f      	bne.n	16aba <bt_le_adv_start_legacy+0x31a>
   169ba:	f3bf 8f5b 	dmb	ish
   169be:	e856 3f00 	ldrex	r3, [r6]
   169c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   169c6:	e846 3200 	strex	r2, r3, [r6]
   169ca:	2a00      	cmp	r2, #0
   169cc:	d1f7      	bne.n	169be <bt_le_adv_start_legacy+0x21e>
   169ce:	f3bf 8f5b 	dmb	ish
   169d2:	f1bb 0f02 	cmp.w	fp, #2
   169d6:	f040 8087 	bne.w	16ae8 <bt_le_adv_start_legacy+0x348>
   169da:	f3bf 8f5b 	dmb	ish
   169de:	e856 3f00 	ldrex	r3, [r6]
   169e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   169e6:	e846 3200 	strex	r2, r3, [r6]
   169ea:	2a00      	cmp	r2, #0
   169ec:	d1f7      	bne.n	169de <bt_le_adv_start_legacy+0x23e>
   169ee:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   169f2:	6863      	ldr	r3, [r4, #4]
   169f4:	f013 0f01 	tst.w	r3, #1
   169f8:	f000 8083 	beq.w	16b02 <bt_le_adv_start_legacy+0x362>
   169fc:	f3bf 8f5b 	dmb	ish
   16a00:	e856 3f00 	ldrex	r3, [r6]
   16a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   16a08:	e846 3200 	strex	r2, r3, [r6]
   16a0c:	2a00      	cmp	r2, #0
   16a0e:	d1f7      	bne.n	16a00 <bt_le_adv_start_legacy+0x260>
   16a10:	f3bf 8f5b 	dmb	ish
   16a14:	f1ba 0f00 	cmp.w	sl, #0
   16a18:	f000 8080 	beq.w	16b1c <bt_le_adv_start_legacy+0x37c>
   16a1c:	f3bf 8f5b 	dmb	ish
   16a20:	e856 3f00 	ldrex	r3, [r6]
   16a24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   16a28:	e846 3200 	strex	r2, r3, [r6]
   16a2c:	2a00      	cmp	r2, #0
   16a2e:	d1f7      	bne.n	16a20 <bt_le_adv_start_legacy+0x280>
   16a30:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   16a34:	6863      	ldr	r3, [r4, #4]
   16a36:	f013 0f04 	tst.w	r3, #4
   16a3a:	d07c      	beq.n	16b36 <bt_le_adv_start_legacy+0x396>
   16a3c:	f3bf 8f5b 	dmb	ish
   16a40:	e856 3f00 	ldrex	r3, [r6]
   16a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   16a48:	e846 3200 	strex	r2, r3, [r6]
   16a4c:	2a00      	cmp	r2, #0
   16a4e:	d1f7      	bne.n	16a40 <bt_le_adv_start_legacy+0x2a0>
   16a50:	f3bf 8f5b 	dmb	ish

	return 0;
}
   16a54:	4648      	mov	r0, r9
   16a56:	b00f      	add	sp, #60	; 0x3c
   16a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a5c:	4b1f      	ldr	r3, [pc, #124]	; (16adc <bt_le_adv_start_legacy+0x33c>)
   16a5e:	4a20      	ldr	r2, [pc, #128]	; (16ae0 <bt_le_adv_start_legacy+0x340>)
   16a60:	1a9b      	subs	r3, r3, r2
   16a62:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to start advertiser");
   16a64:	f04f 0100 	mov.w	r1, #0
   16a68:	2201      	movs	r2, #1
   16a6a:	f362 0102 	bfi	r1, r2, #0, #3
   16a6e:	f36f 01c5 	bfc	r1, #3, #3
   16a72:	f363 118f 	bfi	r1, r3, #6, #10
   16a76:	481b      	ldr	r0, [pc, #108]	; (16ae4 <bt_le_adv_start_legacy+0x344>)
   16a78:	f7fa ff9c 	bl	119b4 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16a7c:	9807      	ldr	r0, [sp, #28]
   16a7e:	b128      	cbz	r0, 16a8c <bt_le_adv_start_legacy+0x2ec>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16a80:	2100      	movs	r1, #0
   16a82:	f000 fc67 	bl	17354 <bt_conn_set_state>
			bt_conn_unref(conn);
   16a86:	9807      	ldr	r0, [sp, #28]
   16a88:	f000 fc20 	bl	172cc <bt_conn_unref>
		return err;
   16a8c:	46a9      	mov	r9, r5
   16a8e:	e7e1      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   16a90:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16a92:	f013 0f02 	tst.w	r3, #2
   16a96:	d001      	beq.n	16a9c <bt_le_adv_start_legacy+0x2fc>
   16a98:	464b      	mov	r3, r9
   16a9a:	e77b      	b.n	16994 <bt_le_adv_start_legacy+0x1f4>
   16a9c:	2301      	movs	r3, #1
   16a9e:	e779      	b.n	16994 <bt_le_adv_start_legacy+0x1f4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16aa0:	f3bf 8f5b 	dmb	ish
   16aa4:	e856 3f00 	ldrex	r3, [r6]
   16aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   16aac:	e846 3200 	strex	r2, r3, [r6]
   16ab0:	2a00      	cmp	r2, #0
   16ab2:	d1f7      	bne.n	16aa4 <bt_le_adv_start_legacy+0x304>
   16ab4:	f3bf 8f5b 	dmb	ish
   16ab8:	e77c      	b.n	169b4 <bt_le_adv_start_legacy+0x214>
   16aba:	f3bf 8f5b 	dmb	ish
   16abe:	e856 3f00 	ldrex	r3, [r6]
   16ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   16ac6:	e846 3200 	strex	r2, r3, [r6]
   16aca:	2a00      	cmp	r2, #0
   16acc:	d1f7      	bne.n	16abe <bt_le_adv_start_legacy+0x31e>
   16ace:	f3bf 8f5b 	dmb	ish
   16ad2:	e77e      	b.n	169d2 <bt_le_adv_start_legacy+0x232>
   16ad4:	2000037c 	.word	0x2000037c
   16ad8:	200002b0 	.word	0x200002b0
   16adc:	00029d70 	.word	0x00029d70
   16ae0:	00029d70 	.word	0x00029d70
   16ae4:	0002bb08 	.word	0x0002bb08
   16ae8:	f3bf 8f5b 	dmb	ish
   16aec:	e856 3f00 	ldrex	r3, [r6]
   16af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   16af4:	e846 3200 	strex	r2, r3, [r6]
   16af8:	2a00      	cmp	r2, #0
   16afa:	d1f7      	bne.n	16aec <bt_le_adv_start_legacy+0x34c>
   16afc:	f3bf 8f5b 	dmb	ish
   16b00:	e777      	b.n	169f2 <bt_le_adv_start_legacy+0x252>
   16b02:	f3bf 8f5b 	dmb	ish
   16b06:	e856 3f00 	ldrex	r3, [r6]
   16b0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   16b0e:	e846 3200 	strex	r2, r3, [r6]
   16b12:	2a00      	cmp	r2, #0
   16b14:	d1f7      	bne.n	16b06 <bt_le_adv_start_legacy+0x366>
   16b16:	f3bf 8f5b 	dmb	ish
   16b1a:	e77b      	b.n	16a14 <bt_le_adv_start_legacy+0x274>
   16b1c:	f3bf 8f5b 	dmb	ish
   16b20:	e856 3f00 	ldrex	r3, [r6]
   16b24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   16b28:	e846 3200 	strex	r2, r3, [r6]
   16b2c:	2a00      	cmp	r2, #0
   16b2e:	d1f7      	bne.n	16b20 <bt_le_adv_start_legacy+0x380>
   16b30:	f3bf 8f5b 	dmb	ish
   16b34:	e77e      	b.n	16a34 <bt_le_adv_start_legacy+0x294>
   16b36:	f3bf 8f5b 	dmb	ish
   16b3a:	e856 3f00 	ldrex	r3, [r6]
   16b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   16b42:	e846 3200 	strex	r2, r3, [r6]
   16b46:	2a00      	cmp	r2, #0
   16b48:	d1f7      	bne.n	16b3a <bt_le_adv_start_legacy+0x39a>
   16b4a:	f3bf 8f5b 	dmb	ish
}
   16b4e:	e781      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
		return -EAGAIN;
   16b50:	f06f 090a 	mvn.w	r9, #10
   16b54:	e77e      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
		return -EINVAL;
   16b56:	f06f 0915 	mvn.w	r9, #21
   16b5a:	e77b      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
		return -EINVAL;
   16b5c:	f06f 0915 	mvn.w	r9, #21
   16b60:	e778      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
		return -EALREADY;
   16b62:	f06f 0977 	mvn.w	r9, #119	; 0x77
   16b66:	e775      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
		return -ENOBUFS;
   16b68:	f06f 0968 	mvn.w	r9, #104	; 0x68
   16b6c:	e772      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
			return err;
   16b6e:	4681      	mov	r9, r0
   16b70:	e770      	b.n	16a54 <bt_le_adv_start_legacy+0x2b4>
   16b72:	bf00      	nop

00016b74 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   16b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b78:	b082      	sub	sp, #8
   16b7a:	4606      	mov	r6, r0
   16b7c:	460c      	mov	r4, r1
   16b7e:	4615      	mov	r5, r2
   16b80:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
   16b82:	f7ff fcd5 	bl	16530 <adv_new_legacy>
	int err;

	if (!adv) {
   16b86:	b1f8      	cbz	r0, 16bc8 <bt_le_adv_start+0x54>
   16b88:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16b8a:	9b08      	ldr	r3, [sp, #32]
   16b8c:	9301      	str	r3, [sp, #4]
   16b8e:	9700      	str	r7, [sp, #0]
   16b90:	462b      	mov	r3, r5
   16b92:	4622      	mov	r2, r4
   16b94:	4631      	mov	r1, r6
   16b96:	f7ff fe03 	bl	167a0 <bt_le_adv_start_legacy>
   16b9a:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   16b9c:	4629      	mov	r1, r5
   16b9e:	4620      	mov	r0, r4
   16ba0:	f010 f860 	bl	26c64 <ad_is_limited>
   16ba4:	b918      	cbnz	r0, 16bae <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   16ba6:	4630      	mov	r0, r6
   16ba8:	b002      	add	sp, #8
   16baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   16bae:	f108 0818 	add.w	r8, r8, #24
   16bb2:	4907      	ldr	r1, [pc, #28]	; (16bd0 <bt_le_adv_start+0x5c>)
   16bb4:	4640      	mov	r0, r8
   16bb6:	f008 ff95 	bl	1fae4 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   16bba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16bbe:	2300      	movs	r3, #0
   16bc0:	4640      	mov	r0, r8
   16bc2:	f009 f8b5 	bl	1fd30 <k_work_reschedule>
   16bc6:	e7ee      	b.n	16ba6 <bt_le_adv_start+0x32>
		return -ENOMEM;
   16bc8:	f06f 060b 	mvn.w	r6, #11
   16bcc:	e7eb      	b.n	16ba6 <bt_le_adv_start+0x32>
   16bce:	bf00      	nop
   16bd0:	00016c69 	.word	0x00016c69

00016bd4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   16bd4:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16bd6:	f7ff fddf 	bl	16798 <bt_le_adv_lookup_legacy>
   16bda:	4604      	mov	r4, r0
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   16bdc:	f010 f98a 	bl	26ef4 <bt_le_lim_adv_cancel_timeout>

	if (!adv) {
   16be0:	b1c4      	cbz	r4, 16c14 <bt_le_adv_stop+0x40>
	}

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   16be2:	f104 0310 	add.w	r3, r4, #16
   16be6:	f3bf 8f5b 	dmb	ish
   16bea:	e853 2f00 	ldrex	r2, [r3]
   16bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   16bf2:	e843 2100 	strex	r1, r2, [r3]
   16bf6:	2900      	cmp	r1, #0
   16bf8:	d1f7      	bne.n	16bea <bt_le_adv_stop+0x16>
   16bfa:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16bfe:	f3bf 8f5b 	dmb	ish
   16c02:	6923      	ldr	r3, [r4, #16]
   16c04:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16c08:	f3c3 1080 	ubfx	r0, r3, #6, #1

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16c0c:	f013 0f40 	tst.w	r3, #64	; 0x40
   16c10:	d112      	bne.n	16c38 <bt_le_adv_stop+0x64>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   16c12:	bd10      	pop	{r4, pc}
   16c14:	4b11      	ldr	r3, [pc, #68]	; (16c5c <bt_le_adv_stop+0x88>)
   16c16:	4a12      	ldr	r2, [pc, #72]	; (16c60 <bt_le_adv_stop+0x8c>)
   16c18:	1a9b      	subs	r3, r3, r2
   16c1a:	08db      	lsrs	r3, r3, #3
		BT_ERR("No valid legacy adv");
   16c1c:	f04f 0100 	mov.w	r1, #0
   16c20:	2201      	movs	r2, #1
   16c22:	f362 0102 	bfi	r1, r2, #0, #3
   16c26:	f36f 01c5 	bfc	r1, #3, #3
   16c2a:	f363 118f 	bfi	r1, r3, #6, #10
   16c2e:	480d      	ldr	r0, [pc, #52]	; (16c64 <bt_le_adv_stop+0x90>)
   16c30:	f7fa fec0 	bl	119b4 <log_0>
		return 0;
   16c34:	2000      	movs	r0, #0
   16c36:	e7ec      	b.n	16c12 <bt_le_adv_stop+0x3e>
   16c38:	f3bf 8f5b 	dmb	ish
   16c3c:	6923      	ldr	r3, [r4, #16]
   16c3e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16c42:	f413 7f00 	tst.w	r3, #512	; 0x200
   16c46:	d104      	bne.n	16c52 <bt_le_adv_stop+0x7e>
		err = bt_le_adv_set_enable_legacy(adv, false);
   16c48:	2100      	movs	r1, #0
   16c4a:	4620      	mov	r0, r4
   16c4c:	f010 f926 	bl	26e9c <bt_le_adv_set_enable_legacy>
		if (err) {
   16c50:	e7df      	b.n	16c12 <bt_le_adv_stop+0x3e>
		le_adv_stop_free_conn(adv, 0);
   16c52:	2100      	movs	r1, #0
   16c54:	4620      	mov	r0, r4
   16c56:	f7ff fd6b 	bl	16730 <le_adv_stop_free_conn>
   16c5a:	e7f5      	b.n	16c48 <bt_le_adv_stop+0x74>
   16c5c:	00029d70 	.word	0x00029d70
   16c60:	00029d70 	.word	0x00029d70
   16c64:	0002bb24 	.word	0x0002bb24

00016c68 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   16c68:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   16c6a:	f7ff ffb3 	bl	16bd4 <bt_le_adv_stop>
   16c6e:	4601      	mov	r1, r0
   16c70:	4b08      	ldr	r3, [pc, #32]	; (16c94 <adv_timeout+0x2c>)
   16c72:	4a09      	ldr	r2, [pc, #36]	; (16c98 <adv_timeout+0x30>)
   16c74:	1a9b      	subs	r3, r3, r2
   16c76:	08db      	lsrs	r3, r3, #3
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   16c78:	f04f 0200 	mov.w	r2, #0
   16c7c:	2002      	movs	r0, #2
   16c7e:	f360 0202 	bfi	r2, r0, #0, #3
   16c82:	f36f 02c5 	bfc	r2, #3, #3
   16c86:	f363 128f 	bfi	r2, r3, #6, #10
   16c8a:	4804      	ldr	r0, [pc, #16]	; (16c9c <adv_timeout+0x34>)
   16c8c:	f7fa fec2 	bl	11a14 <log_1>
}
   16c90:	bd08      	pop	{r3, pc}
   16c92:	bf00      	nop
   16c94:	00029d70 	.word	0x00029d70
   16c98:	00029d70 	.word	0x00029d70
   16c9c:	0002bb38 	.word	0x0002bb38

00016ca0 <tx_free>:
		return "(unknown)";
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
   16ca0:	b508      	push	{r3, lr}
   16ca2:	4601      	mov	r1, r0
	tx->cb = NULL;
   16ca4:	2300      	movs	r3, #0
   16ca6:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   16ca8:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   16caa:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   16cac:	4801      	ldr	r0, [pc, #4]	; (16cb4 <tx_free+0x14>)
   16cae:	f012 fd57 	bl	29760 <k_queue_append>
}
   16cb2:	bd08      	pop	{r3, pc}
   16cb4:	200007f4 	.word	0x200007f4

00016cb8 <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   16cb8:	b570      	push	{r4, r5, r6, lr}
   16cba:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   16cbc:	4b16      	ldr	r3, [pc, #88]	; (16d18 <notify_disconnected+0x60>)
   16cbe:	681c      	ldr	r4, [r3, #0]
   16cc0:	e000      	b.n	16cc4 <notify_disconnected+0xc>
   16cc2:	6924      	ldr	r4, [r4, #16]
   16cc4:	b134      	cbz	r4, 16cd4 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   16cc6:	6863      	ldr	r3, [r4, #4]
   16cc8:	2b00      	cmp	r3, #0
   16cca:	d0fa      	beq.n	16cc2 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   16ccc:	7a69      	ldrb	r1, [r5, #9]
   16cce:	4628      	mov	r0, r5
   16cd0:	4798      	blx	r3
   16cd2:	e7f6      	b.n	16cc2 <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16cd4:	4c11      	ldr	r4, [pc, #68]	; (16d1c <notify_disconnected+0x64>)
   16cd6:	e000      	b.n	16cda <notify_disconnected+0x22>
   16cd8:	3414      	adds	r4, #20
   16cda:	4b11      	ldr	r3, [pc, #68]	; (16d20 <notify_disconnected+0x68>)
   16cdc:	429c      	cmp	r4, r3
   16cde:	d809      	bhi.n	16cf4 <notify_disconnected+0x3c>
   16ce0:	4b0f      	ldr	r3, [pc, #60]	; (16d20 <notify_disconnected+0x68>)
   16ce2:	429c      	cmp	r4, r3
   16ce4:	d217      	bcs.n	16d16 <notify_disconnected+0x5e>
		if (cb->disconnected) {
   16ce6:	6863      	ldr	r3, [r4, #4]
   16ce8:	2b00      	cmp	r3, #0
   16cea:	d0f5      	beq.n	16cd8 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   16cec:	7a69      	ldrb	r1, [r5, #9]
   16cee:	4628      	mov	r0, r5
   16cf0:	4798      	blx	r3
   16cf2:	e7f1      	b.n	16cd8 <notify_disconnected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16cf4:	4e0b      	ldr	r6, [pc, #44]	; (16d24 <notify_disconnected+0x6c>)
   16cf6:	f240 5326 	movw	r3, #1318	; 0x526
   16cfa:	4632      	mov	r2, r6
   16cfc:	490a      	ldr	r1, [pc, #40]	; (16d28 <notify_disconnected+0x70>)
   16cfe:	480b      	ldr	r0, [pc, #44]	; (16d2c <notify_disconnected+0x74>)
   16d00:	f00e fd95 	bl	2582e <printk>
   16d04:	480a      	ldr	r0, [pc, #40]	; (16d30 <notify_disconnected+0x78>)
   16d06:	f00e fd92 	bl	2582e <printk>
   16d0a:	f240 5126 	movw	r1, #1318	; 0x526
   16d0e:	4630      	mov	r0, r6
   16d10:	f00f f80f 	bl	25d32 <assert_post_action>
   16d14:	e7e4      	b.n	16ce0 <notify_disconnected+0x28>
		}
	}
}
   16d16:	bd70      	pop	{r4, r5, r6, pc}
   16d18:	20002590 	.word	0x20002590
   16d1c:	00029d60 	.word	0x00029d60
   16d20:	00029d60 	.word	0x00029d60
   16d24:	0002bb60 	.word	0x0002bb60
   16d28:	0002bb90 	.word	0x0002bb90
   16d2c:	00029ff8 	.word	0x00029ff8
   16d30:	0002bbac 	.word	0x0002bbac

00016d34 <conn_tx_alloc>:
{
   16d34:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   16d36:	f00a fb9b 	bl	21470 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   16d3a:	4b08      	ldr	r3, [pc, #32]	; (16d5c <conn_tx_alloc+0x28>)
   16d3c:	4283      	cmp	r3, r0
   16d3e:	d007      	beq.n	16d50 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   16d40:	f04f 32ff 	mov.w	r2, #4294967295
   16d44:	f04f 33ff 	mov.w	r3, #4294967295
   16d48:	4805      	ldr	r0, [pc, #20]	; (16d60 <conn_tx_alloc+0x2c>)
   16d4a:	f008 f9cb 	bl	1f0e4 <z_impl_k_queue_get>
}
   16d4e:	bd08      	pop	{r3, pc}
   16d50:	2200      	movs	r2, #0
   16d52:	2300      	movs	r3, #0
   16d54:	4802      	ldr	r0, [pc, #8]	; (16d60 <conn_tx_alloc+0x2c>)
   16d56:	f008 f9c5 	bl	1f0e4 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   16d5a:	e7f8      	b.n	16d4e <conn_tx_alloc+0x1a>
   16d5c:	20001e20 	.word	0x20001e20
   16d60:	200007f4 	.word	0x200007f4

00016d64 <notify_connected>:
{
   16d64:	b570      	push	{r4, r5, r6, lr}
   16d66:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   16d68:	4b19      	ldr	r3, [pc, #100]	; (16dd0 <notify_connected+0x6c>)
   16d6a:	681c      	ldr	r4, [r3, #0]
   16d6c:	e000      	b.n	16d70 <notify_connected+0xc>
   16d6e:	6924      	ldr	r4, [r4, #16]
   16d70:	b134      	cbz	r4, 16d80 <notify_connected+0x1c>
		if (cb->connected) {
   16d72:	6823      	ldr	r3, [r4, #0]
   16d74:	2b00      	cmp	r3, #0
   16d76:	d0fa      	beq.n	16d6e <notify_connected+0xa>
			cb->connected(conn, conn->err);
   16d78:	7a69      	ldrb	r1, [r5, #9]
   16d7a:	4628      	mov	r0, r5
   16d7c:	4798      	blx	r3
   16d7e:	e7f6      	b.n	16d6e <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16d80:	4c14      	ldr	r4, [pc, #80]	; (16dd4 <notify_connected+0x70>)
   16d82:	e000      	b.n	16d86 <notify_connected+0x22>
   16d84:	3414      	adds	r4, #20
   16d86:	4b14      	ldr	r3, [pc, #80]	; (16dd8 <notify_connected+0x74>)
   16d88:	429c      	cmp	r4, r3
   16d8a:	d809      	bhi.n	16da0 <notify_connected+0x3c>
   16d8c:	4b12      	ldr	r3, [pc, #72]	; (16dd8 <notify_connected+0x74>)
   16d8e:	429c      	cmp	r4, r3
   16d90:	d217      	bcs.n	16dc2 <notify_connected+0x5e>
		if (cb->connected) {
   16d92:	6823      	ldr	r3, [r4, #0]
   16d94:	2b00      	cmp	r3, #0
   16d96:	d0f5      	beq.n	16d84 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   16d98:	7a69      	ldrb	r1, [r5, #9]
   16d9a:	4628      	mov	r0, r5
   16d9c:	4798      	blx	r3
   16d9e:	e7f1      	b.n	16d84 <notify_connected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16da0:	4e0e      	ldr	r6, [pc, #56]	; (16ddc <notify_connected+0x78>)
   16da2:	f240 5311 	movw	r3, #1297	; 0x511
   16da6:	4632      	mov	r2, r6
   16da8:	490d      	ldr	r1, [pc, #52]	; (16de0 <notify_connected+0x7c>)
   16daa:	480e      	ldr	r0, [pc, #56]	; (16de4 <notify_connected+0x80>)
   16dac:	f00e fd3f 	bl	2582e <printk>
   16db0:	480d      	ldr	r0, [pc, #52]	; (16de8 <notify_connected+0x84>)
   16db2:	f00e fd3c 	bl	2582e <printk>
   16db6:	f240 5111 	movw	r1, #1297	; 0x511
   16dba:	4630      	mov	r0, r6
   16dbc:	f00e ffb9 	bl	25d32 <assert_post_action>
   16dc0:	e7e4      	b.n	16d8c <notify_connected+0x28>
	if (!conn->err) {
   16dc2:	7a6b      	ldrb	r3, [r5, #9]
   16dc4:	b103      	cbz	r3, 16dc8 <notify_connected+0x64>
}
   16dc6:	bd70      	pop	{r4, r5, r6, pc}
		bt_gatt_connected(conn);
   16dc8:	4628      	mov	r0, r5
   16dca:	f003 f931 	bl	1a030 <bt_gatt_connected>
}
   16dce:	e7fa      	b.n	16dc6 <notify_connected+0x62>
   16dd0:	20002590 	.word	0x20002590
   16dd4:	00029d60 	.word	0x00029d60
   16dd8:	00029d60 	.word	0x00029d60
   16ddc:	0002bb60 	.word	0x0002bb60
   16de0:	0002bb90 	.word	0x0002bb90
   16de4:	00029ff8 	.word	0x00029ff8
   16de8:	0002bbac 	.word	0x0002bbac

00016dec <bt_conn_get_pkts>:
}
   16dec:	4800      	ldr	r0, [pc, #0]	; (16df0 <bt_conn_get_pkts+0x4>)
   16dee:	4770      	bx	lr
   16df0:	200003b0 	.word	0x200003b0

00016df4 <send_frag>:
{
   16df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16df8:	4605      	mov	r5, r0
   16dfa:	460e      	mov	r6, r1
   16dfc:	4691      	mov	r9, r2
   16dfe:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   16e00:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   16e02:	f7ff fff3 	bl	16dec <bt_conn_get_pkts>
   16e06:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   16e08:	f04f 32ff 	mov.w	r2, #4294967295
   16e0c:	f04f 33ff 	mov.w	r3, #4294967295
   16e10:	f008 fa3e 	bl	1f290 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   16e14:	7aab      	ldrb	r3, [r5, #10]
   16e16:	2b07      	cmp	r3, #7
   16e18:	d159      	bne.n	16ece <send_frag+0xda>
   16e1a:	f04f 0240 	mov.w	r2, #64	; 0x40
   16e1e:	f3ef 8311 	mrs	r3, BASEPRI
   16e22:	f382 8812 	msr	BASEPRI_MAX, r2
   16e26:	f3bf 8f6f 	isb	sy
	if (tx) {
   16e2a:	b1af      	cbz	r7, 16e58 <send_frag+0x64>
	parent->next = child;
   16e2c:	2200      	movs	r2, #0
   16e2e:	603a      	str	r2, [r7, #0]
	return list->tail;
   16e30:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   16e32:	b172      	cbz	r2, 16e52 <send_frag+0x5e>
	parent->next = child;
   16e34:	6017      	str	r7, [r2, #0]
	list->tail = node;
   16e36:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   16e38:	f383 8811 	msr	BASEPRI, r3
   16e3c:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   16e40:	464a      	mov	r2, r9
   16e42:	4631      	mov	r1, r6
   16e44:	4628      	mov	r0, r5
   16e46:	f010 f8d6 	bl	26ff6 <send_acl>
	if (err) {
   16e4a:	4601      	mov	r1, r0
   16e4c:	b988      	cbnz	r0, 16e72 <send_frag+0x7e>
	return true;
   16e4e:	2001      	movs	r0, #1
   16e50:	e046      	b.n	16ee0 <send_frag+0xec>
   16e52:	61af      	str	r7, [r5, #24]
	list->head = node;
   16e54:	616f      	str	r7, [r5, #20]
}
   16e56:	e7ef      	b.n	16e38 <send_frag+0x44>
	return list->tail;
   16e58:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   16e5a:	b13a      	cbz	r2, 16e6c <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   16e5c:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   16e60:	f8da 2000 	ldr.w	r2, [sl]
   16e64:	3201      	adds	r2, #1
   16e66:	f8ca 2000 	str.w	r2, [sl]
   16e6a:	e7e5      	b.n	16e38 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   16e6c:	f105 0a1c 	add.w	sl, r5, #28
   16e70:	e7f6      	b.n	16e60 <send_frag+0x6c>
   16e72:	4b2f      	ldr	r3, [pc, #188]	; (16f30 <send_frag+0x13c>)
   16e74:	4a2f      	ldr	r2, [pc, #188]	; (16f34 <send_frag+0x140>)
   16e76:	1a9b      	subs	r3, r3, r2
   16e78:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   16e7a:	f04f 0200 	mov.w	r2, #0
   16e7e:	2001      	movs	r0, #1
   16e80:	f360 0202 	bfi	r2, r0, #0, #3
   16e84:	f36f 02c5 	bfc	r2, #3, #3
   16e88:	f363 128f 	bfi	r2, r3, #6, #10
   16e8c:	482a      	ldr	r0, [pc, #168]	; (16f38 <send_frag+0x144>)
   16e8e:	f7fa fdc1 	bl	11a14 <log_1>
	__asm__ volatile(
   16e92:	f04f 0340 	mov.w	r3, #64	; 0x40
   16e96:	f3ef 8911 	mrs	r9, BASEPRI
   16e9a:	f383 8812 	msr	BASEPRI_MAX, r3
   16e9e:	f3bf 8f6f 	isb	sy
		if (tx) {
   16ea2:	b347      	cbz	r7, 16ef6 <send_frag+0x102>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   16ea4:	4639      	mov	r1, r7
	return list->head;
   16ea6:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16ea8:	2200      	movs	r2, #0
   16eaa:	b163      	cbz	r3, 16ec6 <send_frag+0xd2>
   16eac:	428b      	cmp	r3, r1
   16eae:	d002      	beq.n	16eb6 <send_frag+0xc2>
   16eb0:	461a      	mov	r2, r3
   16eb2:	681b      	ldr	r3, [r3, #0]
   16eb4:	e7f9      	b.n	16eaa <send_frag+0xb6>
Z_GENLIST_REMOVE(slist, snode)
   16eb6:	b1aa      	cbz	r2, 16ee4 <send_frag+0xf0>
	return node->next;
   16eb8:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   16eba:	6013      	str	r3, [r2, #0]
	return list->tail;
   16ebc:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   16ebe:	42bb      	cmp	r3, r7
   16ec0:	d017      	beq.n	16ef2 <send_frag+0xfe>
	parent->next = child;
   16ec2:	2300      	movs	r3, #0
   16ec4:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   16ec6:	f389 8811 	msr	BASEPRI, r9
   16eca:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   16ece:	4640      	mov	r0, r8
   16ed0:	f008 f996 	bl	1f200 <z_impl_k_sem_give>
	if (tx) {
   16ed4:	b117      	cbz	r7, 16edc <send_frag+0xe8>
		tx_free(tx);
   16ed6:	4638      	mov	r0, r7
   16ed8:	f7ff fee2 	bl	16ca0 <tx_free>
	if (always_consume) {
   16edc:	bb14      	cbnz	r4, 16f24 <send_frag+0x130>
	return false;
   16ede:	4620      	mov	r0, r4
}
   16ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   16ee4:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   16ee6:	616b      	str	r3, [r5, #20]
	return list->tail;
   16ee8:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   16eea:	42ba      	cmp	r2, r7
   16eec:	d1e9      	bne.n	16ec2 <send_frag+0xce>
	list->tail = node;
   16eee:	61ab      	str	r3, [r5, #24]
}
   16ef0:	e7e7      	b.n	16ec2 <send_frag+0xce>
	list->tail = node;
   16ef2:	61aa      	str	r2, [r5, #24]
}
   16ef4:	e7e5      	b.n	16ec2 <send_frag+0xce>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   16ef6:	f8da 3000 	ldr.w	r3, [sl]
   16efa:	b12b      	cbz	r3, 16f08 <send_frag+0x114>
			(*pending_no_cb)--;
   16efc:	f8da 3000 	ldr.w	r3, [sl]
   16f00:	3b01      	subs	r3, #1
   16f02:	f8ca 3000 	str.w	r3, [sl]
   16f06:	e7de      	b.n	16ec6 <send_frag+0xd2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   16f08:	4d0c      	ldr	r5, [pc, #48]	; (16f3c <send_frag+0x148>)
   16f0a:	f240 230f 	movw	r3, #527	; 0x20f
   16f0e:	462a      	mov	r2, r5
   16f10:	490b      	ldr	r1, [pc, #44]	; (16f40 <send_frag+0x14c>)
   16f12:	480c      	ldr	r0, [pc, #48]	; (16f44 <send_frag+0x150>)
   16f14:	f00e fc8b 	bl	2582e <printk>
   16f18:	f240 210f 	movw	r1, #527	; 0x20f
   16f1c:	4628      	mov	r0, r5
   16f1e:	f00e ff08 	bl	25d32 <assert_post_action>
   16f22:	e7eb      	b.n	16efc <send_frag+0x108>
		net_buf_unref(buf);
   16f24:	4630      	mov	r0, r6
   16f26:	f003 fb31 	bl	1a58c <net_buf_unref>
	return false;
   16f2a:	2000      	movs	r0, #0
   16f2c:	e7d8      	b.n	16ee0 <send_frag+0xec>
   16f2e:	bf00      	nop
   16f30:	00029d88 	.word	0x00029d88
   16f34:	00029d70 	.word	0x00029d70
   16f38:	0002b7d8 	.word	0x0002b7d8
   16f3c:	0002bb60 	.word	0x0002bb60
   16f40:	0002bbcc 	.word	0x0002bbcc
   16f44:	00029ff8 	.word	0x00029ff8

00016f48 <bt_conn_new>:
{
   16f48:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   16f4a:	2300      	movs	r3, #0
   16f4c:	428b      	cmp	r3, r1
   16f4e:	d227      	bcs.n	16fa0 <bt_conn_new+0x58>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   16f50:	24c8      	movs	r4, #200	; 0xc8
   16f52:	fb04 0403 	mla	r4, r4, r3, r0
   16f56:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16f5a:	2501      	movs	r5, #1
   16f5c:	f3bf 8f5b 	dmb	ish
   16f60:	e852 6f00 	ldrex	r6, [r2]
   16f64:	2e00      	cmp	r6, #0
   16f66:	d104      	bne.n	16f72 <bt_conn_new+0x2a>
   16f68:	e842 5c00 	strex	ip, r5, [r2]
   16f6c:	f1bc 0f00 	cmp.w	ip, #0
   16f70:	d1f6      	bne.n	16f60 <bt_conn_new+0x18>
   16f72:	f3bf 8f5b 	dmb	ish
   16f76:	d111      	bne.n	16f9c <bt_conn_new+0x54>
	if (!conn) {
   16f78:	b174      	cbz	r4, 16f98 <bt_conn_new+0x50>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   16f7a:	22c0      	movs	r2, #192	; 0xc0
   16f7c:	2100      	movs	r1, #0
   16f7e:	4620      	mov	r0, r4
   16f80:	f00f fc5e 	bl	26840 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   16f84:	4907      	ldr	r1, [pc, #28]	; (16fa4 <bt_conn_new+0x5c>)
   16f86:	f104 0060 	add.w	r0, r4, #96	; 0x60
   16f8a:	f008 fdab 	bl	1fae4 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   16f8e:	4906      	ldr	r1, [pc, #24]	; (16fa8 <bt_conn_new+0x60>)
   16f90:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16f94:	f008 fc7c 	bl	1f890 <k_work_init>
}
   16f98:	4620      	mov	r0, r4
   16f9a:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   16f9c:	442b      	add	r3, r5
   16f9e:	e7d5      	b.n	16f4c <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   16fa0:	2400      	movs	r4, #0
   16fa2:	e7e9      	b.n	16f78 <bt_conn_new+0x30>
   16fa4:	0001798d 	.word	0x0001798d
   16fa8:	00026fed 	.word	0x00026fed

00016fac <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   16fac:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   16fae:	2101      	movs	r1, #1
   16fb0:	4801      	ldr	r0, [pc, #4]	; (16fb8 <acl_conn_new+0xc>)
   16fb2:	f7ff ffc9 	bl	16f48 <bt_conn_new>
}
   16fb6:	bd08      	pop	{r3, pc}
   16fb8:	200017b8 	.word	0x200017b8

00016fbc <bt_acl_recv>:
{
   16fbc:	b570      	push	{r4, r5, r6, lr}
   16fbe:	4604      	mov	r4, r0
   16fc0:	460d      	mov	r5, r1
	switch (flags) {
   16fc2:	2a01      	cmp	r2, #1
   16fc4:	d02d      	beq.n	17022 <bt_acl_recv+0x66>
   16fc6:	4611      	mov	r1, r2
   16fc8:	2a02      	cmp	r2, #2
   16fca:	d173      	bne.n	170b4 <bt_acl_recv+0xf8>
		if (conn->rx) {
   16fcc:	6903      	ldr	r3, [r0, #16]
   16fce:	b193      	cbz	r3, 16ff6 <bt_acl_recv+0x3a>
   16fd0:	4b4e      	ldr	r3, [pc, #312]	; (1710c <bt_acl_recv+0x150>)
   16fd2:	4a4f      	ldr	r2, [pc, #316]	; (17110 <bt_acl_recv+0x154>)
   16fd4:	1a9b      	subs	r3, r3, r2
   16fd6:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected first L2CAP frame");
   16fd8:	f04f 0100 	mov.w	r1, #0
   16fdc:	2201      	movs	r2, #1
   16fde:	f362 0102 	bfi	r1, r2, #0, #3
   16fe2:	f36f 01c5 	bfc	r1, #3, #3
   16fe6:	f363 118f 	bfi	r1, r3, #6, #10
   16fea:	484a      	ldr	r0, [pc, #296]	; (17114 <bt_acl_recv+0x158>)
   16fec:	f7fa fce2 	bl	119b4 <log_0>
			bt_conn_reset_rx_state(conn);
   16ff0:	4620      	mov	r0, r4
   16ff2:	f010 f863 	bl	270bc <bt_conn_reset_rx_state>
		conn->rx = buf;
   16ff6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   16ff8:	6921      	ldr	r1, [r4, #16]
   16ffa:	8988      	ldrh	r0, [r1, #12]
   16ffc:	2801      	cmp	r0, #1
   16ffe:	d96f      	bls.n	170e0 <bt_acl_recv+0x124>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   17000:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   17002:	785d      	ldrb	r5, [r3, #1]
   17004:	781a      	ldrb	r2, [r3, #0]
   17006:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1700a:	3204      	adds	r2, #4
   1700c:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   1700e:	4290      	cmp	r0, r2
   17010:	d366      	bcc.n	170e0 <bt_acl_recv+0x124>
	if (conn->rx->len > acl_total_len) {
   17012:	d866      	bhi.n	170e2 <bt_acl_recv+0x126>
	conn->rx = NULL;
   17014:	2300      	movs	r3, #0
   17016:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   17018:	2201      	movs	r2, #1
   1701a:	4620      	mov	r0, r4
   1701c:	f000 ff94 	bl	17f48 <bt_l2cap_recv>
   17020:	e05e      	b.n	170e0 <bt_acl_recv+0x124>
		if (!conn->rx) {
   17022:	6900      	ldr	r0, [r0, #16]
   17024:	b180      	cbz	r0, 17048 <bt_acl_recv+0x8c>
		if (!buf->len) {
   17026:	898e      	ldrh	r6, [r1, #12]
   17028:	b32e      	cbz	r6, 17076 <bt_acl_recv+0xba>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1702a:	3008      	adds	r0, #8
   1702c:	f011 fbba 	bl	287a4 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   17030:	4286      	cmp	r6, r0
   17032:	d824      	bhi.n	1707e <bt_acl_recv+0xc2>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   17034:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17036:	89aa      	ldrh	r2, [r5, #12]
   17038:	68a9      	ldr	r1, [r5, #8]
   1703a:	3008      	adds	r0, #8
   1703c:	f011 fbbb 	bl	287b6 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   17040:	4628      	mov	r0, r5
   17042:	f003 faa3 	bl	1a58c <net_buf_unref>
		break;
   17046:	e7d7      	b.n	16ff8 <bt_acl_recv+0x3c>
   17048:	4b30      	ldr	r3, [pc, #192]	; (1710c <bt_acl_recv+0x150>)
   1704a:	4a31      	ldr	r2, [pc, #196]	; (17110 <bt_acl_recv+0x154>)
   1704c:	1a9b      	subs	r3, r3, r2
   1704e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected L2CAP continuation");
   17050:	f04f 0100 	mov.w	r1, #0
   17054:	2201      	movs	r2, #1
   17056:	f362 0102 	bfi	r1, r2, #0, #3
   1705a:	f36f 01c5 	bfc	r1, #3, #3
   1705e:	f363 118f 	bfi	r1, r3, #6, #10
   17062:	482d      	ldr	r0, [pc, #180]	; (17118 <bt_acl_recv+0x15c>)
   17064:	f7fa fca6 	bl	119b4 <log_0>
			bt_conn_reset_rx_state(conn);
   17068:	4620      	mov	r0, r4
   1706a:	f010 f827 	bl	270bc <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   1706e:	4628      	mov	r0, r5
   17070:	f003 fa8c 	bl	1a58c <net_buf_unref>
			return;
   17074:	e034      	b.n	170e0 <bt_acl_recv+0x124>
			net_buf_unref(buf);
   17076:	4608      	mov	r0, r1
   17078:	f003 fa88 	bl	1a58c <net_buf_unref>
			return;
   1707c:	e030      	b.n	170e0 <bt_acl_recv+0x124>
   1707e:	4b23      	ldr	r3, [pc, #140]	; (1710c <bt_acl_recv+0x150>)
   17080:	4a23      	ldr	r2, [pc, #140]	; (17110 <bt_acl_recv+0x154>)
   17082:	1a9b      	subs	r3, r3, r2
   17084:	08db      	lsrs	r3, r3, #3
			BT_ERR("Not enough buffer space for L2CAP data");
   17086:	f04f 0100 	mov.w	r1, #0
   1708a:	2201      	movs	r2, #1
   1708c:	f362 0102 	bfi	r1, r2, #0, #3
   17090:	f36f 01c5 	bfc	r1, #3, #3
   17094:	f363 118f 	bfi	r1, r3, #6, #10
   17098:	4820      	ldr	r0, [pc, #128]	; (1711c <bt_acl_recv+0x160>)
   1709a:	f7fa fc8b 	bl	119b4 <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   1709e:	2200      	movs	r2, #0
   170a0:	6921      	ldr	r1, [r4, #16]
   170a2:	4620      	mov	r0, r4
   170a4:	f000 ff50 	bl	17f48 <bt_l2cap_recv>
			conn->rx = NULL;
   170a8:	2300      	movs	r3, #0
   170aa:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   170ac:	4628      	mov	r0, r5
   170ae:	f003 fa6d 	bl	1a58c <net_buf_unref>
			return;
   170b2:	e015      	b.n	170e0 <bt_acl_recv+0x124>
   170b4:	4b15      	ldr	r3, [pc, #84]	; (1710c <bt_acl_recv+0x150>)
   170b6:	4a16      	ldr	r2, [pc, #88]	; (17110 <bt_acl_recv+0x154>)
   170b8:	1a9b      	subs	r3, r3, r2
   170ba:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   170bc:	f04f 0200 	mov.w	r2, #0
   170c0:	2001      	movs	r0, #1
   170c2:	f360 0202 	bfi	r2, r0, #0, #3
   170c6:	f36f 02c5 	bfc	r2, #3, #3
   170ca:	f363 128f 	bfi	r2, r3, #6, #10
   170ce:	4814      	ldr	r0, [pc, #80]	; (17120 <bt_acl_recv+0x164>)
   170d0:	f7fa fca0 	bl	11a14 <log_1>
		bt_conn_reset_rx_state(conn);
   170d4:	4620      	mov	r0, r4
   170d6:	f00f fff1 	bl	270bc <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   170da:	4628      	mov	r0, r5
   170dc:	f003 fa56 	bl	1a58c <net_buf_unref>
}
   170e0:	bd70      	pop	{r4, r5, r6, pc}
   170e2:	490a      	ldr	r1, [pc, #40]	; (1710c <bt_acl_recv+0x150>)
   170e4:	4b0a      	ldr	r3, [pc, #40]	; (17110 <bt_acl_recv+0x154>)
   170e6:	1ac9      	subs	r1, r1, r3
   170e8:	08c9      	lsrs	r1, r1, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   170ea:	f04f 0300 	mov.w	r3, #0
   170ee:	2501      	movs	r5, #1
   170f0:	f365 0302 	bfi	r3, r5, #0, #3
   170f4:	f36f 03c5 	bfc	r3, #3, #3
   170f8:	f361 138f 	bfi	r3, r1, #6, #10
   170fc:	4601      	mov	r1, r0
   170fe:	4809      	ldr	r0, [pc, #36]	; (17124 <bt_acl_recv+0x168>)
   17100:	f7fa fcbe 	bl	11a80 <log_2>
		bt_conn_reset_rx_state(conn);
   17104:	4620      	mov	r0, r4
   17106:	f00f ffd9 	bl	270bc <bt_conn_reset_rx_state>
		return;
   1710a:	e7e9      	b.n	170e0 <bt_acl_recv+0x124>
   1710c:	00029d88 	.word	0x00029d88
   17110:	00029d70 	.word	0x00029d70
   17114:	0002bbe0 	.word	0x0002bbe0
   17118:	0002bc00 	.word	0x0002bc00
   1711c:	0002bc20 	.word	0x0002bc20
   17120:	0002bc48 	.word	0x0002bc48
   17124:	0002bc68 	.word	0x0002bc68

00017128 <conn_cleanup>:
{
   17128:	b538      	push	{r3, r4, r5, lr}
   1712a:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1712c:	e004      	b.n	17138 <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   1712e:	f7ff fdb7 	bl	16ca0 <tx_free>
		net_buf_unref(buf);
   17132:	4620      	mov	r0, r4
   17134:	f003 fa2a 	bl	1a58c <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   17138:	2200      	movs	r2, #0
   1713a:	2300      	movs	r3, #0
   1713c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17140:	f003 f98c 	bl	1a45c <net_buf_get>
   17144:	4604      	mov	r4, r0
   17146:	b118      	cbz	r0, 17150 <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   17148:	6960      	ldr	r0, [r4, #20]
   1714a:	2800      	cmp	r0, #0
   1714c:	d1ef      	bne.n	1712e <conn_cleanup+0x6>
   1714e:	e7f0      	b.n	17132 <conn_cleanup+0xa>
	return list->head;
   17150:	696b      	ldr	r3, [r5, #20]
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   17152:	b17b      	cbz	r3, 17174 <conn_cleanup+0x4c>
   17154:	4c14      	ldr	r4, [pc, #80]	; (171a8 <conn_cleanup+0x80>)
   17156:	f240 2392 	movw	r3, #658	; 0x292
   1715a:	4622      	mov	r2, r4
   1715c:	4913      	ldr	r1, [pc, #76]	; (171ac <conn_cleanup+0x84>)
   1715e:	4814      	ldr	r0, [pc, #80]	; (171b0 <conn_cleanup+0x88>)
   17160:	f00e fb65 	bl	2582e <printk>
   17164:	4813      	ldr	r0, [pc, #76]	; (171b4 <conn_cleanup+0x8c>)
   17166:	f00e fb62 	bl	2582e <printk>
   1716a:	f240 2192 	movw	r1, #658	; 0x292
   1716e:	4620      	mov	r0, r4
   17170:	f00e fddf 	bl	25d32 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   17174:	69eb      	ldr	r3, [r5, #28]
   17176:	b94b      	cbnz	r3, 1718c <conn_cleanup+0x64>
	bt_conn_reset_rx_state(conn);
   17178:	4628      	mov	r0, r5
   1717a:	f00f ff9f 	bl	270bc <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1717e:	2200      	movs	r2, #0
   17180:	2300      	movs	r3, #0
   17182:	f105 0060 	add.w	r0, r5, #96	; 0x60
   17186:	f008 fdd3 	bl	1fd30 <k_work_reschedule>
}
   1718a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1718c:	4c06      	ldr	r4, [pc, #24]	; (171a8 <conn_cleanup+0x80>)
   1718e:	f240 2393 	movw	r3, #659	; 0x293
   17192:	4622      	mov	r2, r4
   17194:	4908      	ldr	r1, [pc, #32]	; (171b8 <conn_cleanup+0x90>)
   17196:	4806      	ldr	r0, [pc, #24]	; (171b0 <conn_cleanup+0x88>)
   17198:	f00e fb49 	bl	2582e <printk>
   1719c:	f240 2193 	movw	r1, #659	; 0x293
   171a0:	4620      	mov	r0, r4
   171a2:	f00e fdc6 	bl	25d32 <assert_post_action>
   171a6:	e7e7      	b.n	17178 <conn_cleanup+0x50>
   171a8:	0002bb60 	.word	0x0002bb60
   171ac:	0002bc84 	.word	0x0002bc84
   171b0:	00029ff8 	.word	0x00029ff8
   171b4:	0002bcac 	.word	0x0002bcac
   171b8:	0002bcc4 	.word	0x0002bcc4

000171bc <bt_conn_send_cb>:
{
   171bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171c0:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   171c2:	7a83      	ldrb	r3, [r0, #10]
   171c4:	2b07      	cmp	r3, #7
   171c6:	d118      	bne.n	171fa <bt_conn_send_cb+0x3e>
   171c8:	4604      	mov	r4, r0
   171ca:	460d      	mov	r5, r1
   171cc:	4616      	mov	r6, r2
	if (cb) {
   171ce:	2a00      	cmp	r2, #0
   171d0:	d04f      	beq.n	17272 <bt_conn_send_cb+0xb6>
		tx = conn_tx_alloc();
   171d2:	f7ff fdaf 	bl	16d34 <conn_tx_alloc>
		if (!tx) {
   171d6:	4680      	mov	r8, r0
   171d8:	b310      	cbz	r0, 17220 <bt_conn_send_cb+0x64>
		if (conn->state != BT_CONN_CONNECTED) {
   171da:	7aa3      	ldrb	r3, [r4, #10]
   171dc:	2b07      	cmp	r3, #7
   171de:	d132      	bne.n	17246 <bt_conn_send_cb+0x8a>
		tx->cb = cb;
   171e0:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   171e2:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   171e4:	2300      	movs	r3, #0
   171e6:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   171e8:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   171ea:	4629      	mov	r1, r5
   171ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   171f0:	f003 f994 	bl	1a51c <net_buf_put>
	return 0;
   171f4:	2000      	movs	r0, #0
}
   171f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   171fa:	4b1f      	ldr	r3, [pc, #124]	; (17278 <bt_conn_send_cb+0xbc>)
   171fc:	4a1f      	ldr	r2, [pc, #124]	; (1727c <bt_conn_send_cb+0xc0>)
   171fe:	1a9b      	subs	r3, r3, r2
   17200:	08db      	lsrs	r3, r3, #3
		BT_ERR("not connected!");
   17202:	f04f 0100 	mov.w	r1, #0
   17206:	2201      	movs	r2, #1
   17208:	f362 0102 	bfi	r1, r2, #0, #3
   1720c:	f36f 01c5 	bfc	r1, #3, #3
   17210:	f363 118f 	bfi	r1, r3, #6, #10
   17214:	481a      	ldr	r0, [pc, #104]	; (17280 <bt_conn_send_cb+0xc4>)
   17216:	f7fa fbcd 	bl	119b4 <log_0>
		return -ENOTCONN;
   1721a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1721e:	e7ea      	b.n	171f6 <bt_conn_send_cb+0x3a>
   17220:	4b15      	ldr	r3, [pc, #84]	; (17278 <bt_conn_send_cb+0xbc>)
   17222:	4a16      	ldr	r2, [pc, #88]	; (1727c <bt_conn_send_cb+0xc0>)
   17224:	1a9b      	subs	r3, r3, r2
   17226:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate TX context");
   17228:	f04f 0100 	mov.w	r1, #0
   1722c:	2201      	movs	r2, #1
   1722e:	f362 0102 	bfi	r1, r2, #0, #3
   17232:	f36f 01c5 	bfc	r1, #3, #3
   17236:	f363 118f 	bfi	r1, r3, #6, #10
   1723a:	4812      	ldr	r0, [pc, #72]	; (17284 <bt_conn_send_cb+0xc8>)
   1723c:	f7fa fbba 	bl	119b4 <log_0>
			return -ENOBUFS;
   17240:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17244:	e7d7      	b.n	171f6 <bt_conn_send_cb+0x3a>
   17246:	4b0c      	ldr	r3, [pc, #48]	; (17278 <bt_conn_send_cb+0xbc>)
   17248:	4a0c      	ldr	r2, [pc, #48]	; (1727c <bt_conn_send_cb+0xc0>)
   1724a:	1a9b      	subs	r3, r3, r2
   1724c:	08db      	lsrs	r3, r3, #3
			BT_WARN("Disconnected while allocating context");
   1724e:	f04f 0100 	mov.w	r1, #0
   17252:	2202      	movs	r2, #2
   17254:	f362 0102 	bfi	r1, r2, #0, #3
   17258:	f36f 01c5 	bfc	r1, #3, #3
   1725c:	f363 118f 	bfi	r1, r3, #6, #10
   17260:	4809      	ldr	r0, [pc, #36]	; (17288 <bt_conn_send_cb+0xcc>)
   17262:	f7fa fba7 	bl	119b4 <log_0>
			tx_free(tx);
   17266:	4640      	mov	r0, r8
   17268:	f7ff fd1a 	bl	16ca0 <tx_free>
			return -ENOTCONN;
   1726c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17270:	e7c1      	b.n	171f6 <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
   17272:	2300      	movs	r3, #0
   17274:	614b      	str	r3, [r1, #20]
   17276:	e7b8      	b.n	171ea <bt_conn_send_cb+0x2e>
   17278:	00029d88 	.word	0x00029d88
   1727c:	00029d70 	.word	0x00029d70
   17280:	0002bce0 	.word	0x0002bce0
   17284:	0002bcf0 	.word	0x0002bcf0
   17288:	0002bd10 	.word	0x0002bd10

0001728c <bt_conn_prepare_events>:
{
   1728c:	b570      	push	{r4, r5, r6, lr}
   1728e:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   17290:	4b0c      	ldr	r3, [pc, #48]	; (172c4 <bt_conn_prepare_events+0x38>)
   17292:	2400      	movs	r4, #0
   17294:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17296:	4622      	mov	r2, r4
   17298:	2101      	movs	r1, #1
   1729a:	f00a ff41 	bl	22120 <k_poll_event_init>
   1729e:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   172a0:	2c00      	cmp	r4, #0
   172a2:	dd01      	ble.n	172a8 <bt_conn_prepare_events+0x1c>
}
   172a4:	4628      	mov	r0, r5
   172a6:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn_prepare_events(conn, &events[ev_count])) {
   172a8:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   172ac:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   172b0:	4b05      	ldr	r3, [pc, #20]	; (172c8 <bt_conn_prepare_events+0x3c>)
   172b2:	20c8      	movs	r0, #200	; 0xc8
   172b4:	fb00 3004 	mla	r0, r0, r4, r3
   172b8:	f00f ff09 	bl	270ce <conn_prepare_events>
   172bc:	b900      	cbnz	r0, 172c0 <bt_conn_prepare_events+0x34>
			ev_count++;
   172be:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   172c0:	3401      	adds	r4, #1
   172c2:	e7ed      	b.n	172a0 <bt_conn_prepare_events+0x14>
   172c4:	200004b0 	.word	0x200004b0
   172c8:	200017b8 	.word	0x200017b8

000172cc <bt_conn_unref>:
{
   172cc:	b538      	push	{r3, r4, r5, lr}
   172ce:	4604      	mov	r4, r0
	old = atomic_dec(&conn->ref);
   172d0:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   172d4:	f3bf 8f5b 	dmb	ish
   172d8:	e853 2f00 	ldrex	r2, [r3]
   172dc:	1e51      	subs	r1, r2, #1
   172de:	e843 1000 	strex	r0, r1, [r3]
   172e2:	2800      	cmp	r0, #0
   172e4:	d1f8      	bne.n	172d8 <bt_conn_unref+0xc>
   172e6:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   172ea:	2a00      	cmp	r2, #0
   172ec:	dd03      	ble.n	172f6 <bt_conn_unref+0x2a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   172ee:	78a3      	ldrb	r3, [r4, #2]
   172f0:	2b01      	cmp	r3, #1
   172f2:	d011      	beq.n	17318 <bt_conn_unref+0x4c>
}
   172f4:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(old > 0, "Conn reference counter is 0");
   172f6:	4d0e      	ldr	r5, [pc, #56]	; (17330 <bt_conn_unref+0x64>)
   172f8:	f240 434e 	movw	r3, #1102	; 0x44e
   172fc:	462a      	mov	r2, r5
   172fe:	490d      	ldr	r1, [pc, #52]	; (17334 <bt_conn_unref+0x68>)
   17300:	480d      	ldr	r0, [pc, #52]	; (17338 <bt_conn_unref+0x6c>)
   17302:	f00e fa94 	bl	2582e <printk>
   17306:	480d      	ldr	r0, [pc, #52]	; (1733c <bt_conn_unref+0x70>)
   17308:	f00e fa91 	bl	2582e <printk>
   1730c:	f240 414e 	movw	r1, #1102	; 0x44e
   17310:	4628      	mov	r0, r5
   17312:	f00e fd0e 	bl	25d32 <assert_post_action>
   17316:	e7ea      	b.n	172ee <bt_conn_unref+0x22>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17318:	f3bf 8f5b 	dmb	ish
   1731c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17320:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   17324:	2b00      	cmp	r3, #0
   17326:	d1e5      	bne.n	172f4 <bt_conn_unref+0x28>
		bt_le_adv_resume();
   17328:	f00f fde9 	bl	26efe <bt_le_adv_resume>
}
   1732c:	e7e2      	b.n	172f4 <bt_conn_unref+0x28>
   1732e:	bf00      	nop
   17330:	0002bb60 	.word	0x0002bb60
   17334:	0002bd38 	.word	0x0002bd38
   17338:	00029ff8 	.word	0x00029ff8
   1733c:	0002bd40 	.word	0x0002bd40

00017340 <bt_conn_lookup_handle>:
{
   17340:	b508      	push	{r3, lr}
   17342:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   17344:	2101      	movs	r1, #1
   17346:	4802      	ldr	r0, [pc, #8]	; (17350 <bt_conn_lookup_handle+0x10>)
   17348:	f00f ff29 	bl	2719e <conn_lookup_handle>
}
   1734c:	bd08      	pop	{r3, pc}
   1734e:	bf00      	nop
   17350:	200017b8 	.word	0x200017b8

00017354 <bt_conn_set_state>:
{
   17354:	b570      	push	{r4, r5, r6, lr}
   17356:	460e      	mov	r6, r1
	if (conn->state == state) {
   17358:	7a85      	ldrb	r5, [r0, #10]
   1735a:	428d      	cmp	r5, r1
   1735c:	d010      	beq.n	17380 <bt_conn_set_state+0x2c>
   1735e:	4604      	mov	r4, r0
	conn->state = state;
   17360:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   17362:	b915      	cbnz	r5, 1736a <bt_conn_set_state+0x16>
		if (conn->type != BT_CONN_TYPE_ISO) {
   17364:	7883      	ldrb	r3, [r0, #2]
   17366:	2b08      	cmp	r3, #8
   17368:	d137      	bne.n	173da <bt_conn_set_state+0x86>
	switch (conn->state) {
   1736a:	7aa3      	ldrb	r3, [r4, #10]
   1736c:	2b08      	cmp	r3, #8
   1736e:	f200 80b9 	bhi.w	174e4 <bt_conn_set_state+0x190>
   17372:	e8df f003 	tbb	[pc, r3]
   17376:	b34e      	.short	0xb34e
   17378:	b6b6b6b6 	.word	0xb6b6b6b6
   1737c:	35b6      	.short	0x35b6
   1737e:	b6          	.byte	0xb6
   1737f:	00          	.byte	0x00
   17380:	4b61      	ldr	r3, [pc, #388]	; (17508 <bt_conn_set_state+0x1b4>)
   17382:	4a62      	ldr	r2, [pc, #392]	; (1750c <bt_conn_set_state+0x1b8>)
   17384:	1a9b      	subs	r3, r3, r2
   17386:	08db      	lsrs	r3, r3, #3
		BT_WARN("no transition %s", state2str(state));
   17388:	f04f 0200 	mov.w	r2, #0
   1738c:	2102      	movs	r1, #2
   1738e:	f361 0202 	bfi	r2, r1, #0, #3
   17392:	f36f 02c5 	bfc	r2, #3, #3
   17396:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
   1739a:	2e08      	cmp	r6, #8
   1739c:	d819      	bhi.n	173d2 <bt_conn_set_state+0x7e>
   1739e:	e8df f006 	tbb	[pc, r6]
   173a2:	1a05      	.short	0x1a05
   173a4:	0c0e100a 	.word	0x0c0e100a
   173a8:	1412      	.short	0x1412
   173aa:	16          	.byte	0x16
   173ab:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
   173ac:	4958      	ldr	r1, [pc, #352]	; (17510 <bt_conn_set_state+0x1bc>)
   173ae:	4859      	ldr	r0, [pc, #356]	; (17514 <bt_conn_set_state+0x1c0>)
   173b0:	f7fa fb30 	bl	11a14 <log_1>
		return;
   173b4:	e095      	b.n	174e2 <bt_conn_set_state+0x18e>
		return "connect-scan";
   173b6:	4958      	ldr	r1, [pc, #352]	; (17518 <bt_conn_set_state+0x1c4>)
   173b8:	e7f9      	b.n	173ae <bt_conn_set_state+0x5a>
		return "connect-dir-adv";
   173ba:	4958      	ldr	r1, [pc, #352]	; (1751c <bt_conn_set_state+0x1c8>)
   173bc:	e7f7      	b.n	173ae <bt_conn_set_state+0x5a>
		return "connect-adv";
   173be:	4958      	ldr	r1, [pc, #352]	; (17520 <bt_conn_set_state+0x1cc>)
   173c0:	e7f5      	b.n	173ae <bt_conn_set_state+0x5a>
		return "connect-auto";
   173c2:	4958      	ldr	r1, [pc, #352]	; (17524 <bt_conn_set_state+0x1d0>)
   173c4:	e7f3      	b.n	173ae <bt_conn_set_state+0x5a>
		return "connect";
   173c6:	4958      	ldr	r1, [pc, #352]	; (17528 <bt_conn_set_state+0x1d4>)
   173c8:	e7f1      	b.n	173ae <bt_conn_set_state+0x5a>
		return "connected";
   173ca:	4958      	ldr	r1, [pc, #352]	; (1752c <bt_conn_set_state+0x1d8>)
   173cc:	e7ef      	b.n	173ae <bt_conn_set_state+0x5a>
		return "disconnect";
   173ce:	4958      	ldr	r1, [pc, #352]	; (17530 <bt_conn_set_state+0x1dc>)
   173d0:	e7ed      	b.n	173ae <bt_conn_set_state+0x5a>
		return "(unknown)";
   173d2:	4958      	ldr	r1, [pc, #352]	; (17534 <bt_conn_set_state+0x1e0>)
   173d4:	e7eb      	b.n	173ae <bt_conn_set_state+0x5a>
		return "disconnect-complete";
   173d6:	4958      	ldr	r1, [pc, #352]	; (17538 <bt_conn_set_state+0x1e4>)
   173d8:	e7e9      	b.n	173ae <bt_conn_set_state+0x5a>
			bt_conn_ref(conn);
   173da:	f00f feb9 	bl	27150 <bt_conn_ref>
   173de:	e7c4      	b.n	1736a <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   173e0:	78a3      	ldrb	r3, [r4, #2]
   173e2:	2b04      	cmp	r3, #4
   173e4:	d07d      	beq.n	174e2 <bt_conn_set_state+0x18e>
		k_fifo_init(&conn->tx_queue);
   173e6:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   173ea:	f012 f9ac 	bl	29746 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   173ee:	2100      	movs	r1, #0
   173f0:	4852      	ldr	r0, [pc, #328]	; (1753c <bt_conn_set_state+0x1e8>)
   173f2:	f00b fcaf 	bl	22d54 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   173f6:	2300      	movs	r3, #0
   173f8:	6563      	str	r3, [r4, #84]	; 0x54
	list->tail = NULL;
   173fa:	65a3      	str	r3, [r4, #88]	; 0x58
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   173fc:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   173fe:	2b01      	cmp	r3, #1
   17400:	d16f      	bne.n	174e2 <bt_conn_set_state+0x18e>
			k_work_schedule(&conn->deferred_work,
   17402:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   17406:	2300      	movs	r3, #0
   17408:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1740c:	f008 fc10 	bl	1fc30 <k_work_schedule>
   17410:	e067      	b.n	174e2 <bt_conn_set_state+0x18e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17412:	78a3      	ldrb	r3, [r4, #2]
   17414:	2b04      	cmp	r3, #4
   17416:	d008      	beq.n	1742a <bt_conn_set_state+0xd6>
		switch (old_state) {
   17418:	2d08      	cmp	r5, #8
   1741a:	d862      	bhi.n	174e2 <bt_conn_set_state+0x18e>
   1741c:	e8df f005 	tbb	[pc, r5]
   17420:	4430094c 	.word	0x4430094c
   17424:	4c263a48 	.word	0x4c263a48
   17428:	4c          	.byte	0x4c
   17429:	00          	.byte	0x00
			bt_conn_unref(conn);
   1742a:	4620      	mov	r0, r4
   1742c:	f7ff ff4e 	bl	172cc <bt_conn_unref>
			break;
   17430:	e057      	b.n	174e2 <bt_conn_set_state+0x18e>
			tx_notify(conn);
   17432:	4620      	mov	r0, r4
   17434:	f00f fdb5 	bl	26fa2 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   17438:	78a3      	ldrb	r3, [r4, #2]
   1743a:	2b01      	cmp	r3, #1
   1743c:	d011      	beq.n	17462 <bt_conn_set_state+0x10e>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   1743e:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17440:	f3bf 8f5b 	dmb	ish
   17444:	e854 3f00 	ldrex	r3, [r4]
   17448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1744c:	e844 3200 	strex	r2, r3, [r4]
   17450:	2a00      	cmp	r2, #0
   17452:	d1f7      	bne.n	17444 <bt_conn_set_state+0xf0>
   17454:	f3bf 8f5b 	dmb	ish
   17458:	2100      	movs	r1, #0
   1745a:	4838      	ldr	r0, [pc, #224]	; (1753c <bt_conn_set_state+0x1e8>)
   1745c:	f00b fc7a 	bl	22d54 <z_impl_k_poll_signal_raise>
   17460:	e03f      	b.n	174e2 <bt_conn_set_state+0x18e>
				k_work_cancel_delayable(&conn->deferred_work);
   17462:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17466:	f008 fc6b 	bl	1fd40 <k_work_cancel_delayable>
   1746a:	e7e8      	b.n	1743e <bt_conn_set_state+0xea>
			if (conn->err) {
   1746c:	7a63      	ldrb	r3, [r4, #9]
   1746e:	b91b      	cbnz	r3, 17478 <bt_conn_set_state+0x124>
			bt_conn_unref(conn);
   17470:	4620      	mov	r0, r4
   17472:	f7ff ff2b 	bl	172cc <bt_conn_unref>
			break;
   17476:	e034      	b.n	174e2 <bt_conn_set_state+0x18e>
				notify_connected(conn);
   17478:	4620      	mov	r0, r4
   1747a:	f7ff fc73 	bl	16d64 <notify_connected>
   1747e:	e7f7      	b.n	17470 <bt_conn_set_state+0x11c>
			if (conn->err) {
   17480:	7a63      	ldrb	r3, [r4, #9]
   17482:	b91b      	cbnz	r3, 1748c <bt_conn_set_state+0x138>
			bt_conn_unref(conn);
   17484:	4620      	mov	r0, r4
   17486:	f7ff ff21 	bl	172cc <bt_conn_unref>
			break;
   1748a:	e02a      	b.n	174e2 <bt_conn_set_state+0x18e>
				notify_connected(conn);
   1748c:	4620      	mov	r0, r4
   1748e:	f7ff fc69 	bl	16d64 <notify_connected>
   17492:	e7f7      	b.n	17484 <bt_conn_set_state+0x130>
			if (conn->err) {
   17494:	7a63      	ldrb	r3, [r4, #9]
   17496:	b91b      	cbnz	r3, 174a0 <bt_conn_set_state+0x14c>
			bt_conn_unref(conn);
   17498:	4620      	mov	r0, r4
   1749a:	f7ff ff17 	bl	172cc <bt_conn_unref>
			break;
   1749e:	e020      	b.n	174e2 <bt_conn_set_state+0x18e>
				notify_connected(conn);
   174a0:	4620      	mov	r0, r4
   174a2:	f7ff fc5f 	bl	16d64 <notify_connected>
   174a6:	e7f7      	b.n	17498 <bt_conn_set_state+0x144>
			bt_conn_unref(conn);
   174a8:	4620      	mov	r0, r4
   174aa:	f7ff ff0f 	bl	172cc <bt_conn_unref>
			break;
   174ae:	e018      	b.n	174e2 <bt_conn_set_state+0x18e>
			bt_conn_unref(conn);
   174b0:	4620      	mov	r0, r4
   174b2:	f7ff ff0b 	bl	172cc <bt_conn_unref>
			break;
   174b6:	e014      	b.n	174e2 <bt_conn_set_state+0x18e>
   174b8:	4b13      	ldr	r3, [pc, #76]	; (17508 <bt_conn_set_state+0x1b4>)
   174ba:	4a14      	ldr	r2, [pc, #80]	; (1750c <bt_conn_set_state+0x1b8>)
   174bc:	1a9b      	subs	r3, r3, r2
   174be:	08db      	lsrs	r3, r3, #3
			BT_WARN("Invalid (%u) old state", state);
   174c0:	f04f 0200 	mov.w	r2, #0
   174c4:	2102      	movs	r1, #2
   174c6:	f361 0202 	bfi	r2, r1, #0, #3
   174ca:	f36f 02c5 	bfc	r2, #3, #3
   174ce:	f363 128f 	bfi	r2, r3, #6, #10
   174d2:	4631      	mov	r1, r6
   174d4:	481a      	ldr	r0, [pc, #104]	; (17540 <bt_conn_set_state+0x1ec>)
   174d6:	f7fa fa9d 	bl	11a14 <log_1>
   174da:	e002      	b.n	174e2 <bt_conn_set_state+0x18e>
		process_unack_tx(conn);
   174dc:	4620      	mov	r0, r4
   174de:	f00f fdac 	bl	2703a <process_unack_tx>
}
   174e2:	bd70      	pop	{r4, r5, r6, pc}
   174e4:	4b08      	ldr	r3, [pc, #32]	; (17508 <bt_conn_set_state+0x1b4>)
   174e6:	4a09      	ldr	r2, [pc, #36]	; (1750c <bt_conn_set_state+0x1b8>)
   174e8:	1a9b      	subs	r3, r3, r2
   174ea:	08db      	lsrs	r3, r3, #3
		BT_WARN("no valid (%u) state was set", state);
   174ec:	f04f 0200 	mov.w	r2, #0
   174f0:	2102      	movs	r1, #2
   174f2:	f361 0202 	bfi	r2, r1, #0, #3
   174f6:	f36f 02c5 	bfc	r2, #3, #3
   174fa:	f363 128f 	bfi	r2, r3, #6, #10
   174fe:	4631      	mov	r1, r6
   17500:	4810      	ldr	r0, [pc, #64]	; (17544 <bt_conn_set_state+0x1f0>)
   17502:	f7fa fa87 	bl	11a14 <log_1>
   17506:	e7ec      	b.n	174e2 <bt_conn_set_state+0x18e>
   17508:	00029d88 	.word	0x00029d88
   1750c:	00029d70 	.word	0x00029d70
   17510:	0002bdd0 	.word	0x0002bdd0
   17514:	0002bde0 	.word	0x0002bde0
   17518:	0002bd80 	.word	0x0002bd80
   1751c:	0002bd90 	.word	0x0002bd90
   17520:	0002bda0 	.word	0x0002bda0
   17524:	0002bdac 	.word	0x0002bdac
   17528:	0002bdbc 	.word	0x0002bdbc
   1752c:	0002c198 	.word	0x0002c198
   17530:	0002bdc4 	.word	0x0002bdc4
   17534:	0002bd60 	.word	0x0002bd60
   17538:	0002bd6c 	.word	0x0002bd6c
   1753c:	200004b0 	.word	0x200004b0
   17540:	0002bdf4 	.word	0x0002bdf4
   17544:	0002be0c 	.word	0x0002be0c

00017548 <bt_conn_index>:
{
   17548:	b538      	push	{r3, r4, r5, lr}
		index = conn - acl_conns;
   1754a:	4a0d      	ldr	r2, [pc, #52]	; (17580 <bt_conn_index+0x38>)
   1754c:	1a84      	subs	r4, r0, r2
   1754e:	10e3      	asrs	r3, r4, #3
   17550:	4c0c      	ldr	r4, [pc, #48]	; (17584 <bt_conn_index+0x3c>)
   17552:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   17556:	4290      	cmp	r0, r2
   17558:	d00f      	beq.n	1757a <bt_conn_index+0x32>
   1755a:	4d0b      	ldr	r5, [pc, #44]	; (17588 <bt_conn_index+0x40>)
   1755c:	f240 436c 	movw	r3, #1132	; 0x46c
   17560:	462a      	mov	r2, r5
   17562:	490a      	ldr	r1, [pc, #40]	; (1758c <bt_conn_index+0x44>)
   17564:	480a      	ldr	r0, [pc, #40]	; (17590 <bt_conn_index+0x48>)
   17566:	f00e f962 	bl	2582e <printk>
   1756a:	480a      	ldr	r0, [pc, #40]	; (17594 <bt_conn_index+0x4c>)
   1756c:	f00e f95f 	bl	2582e <printk>
   17570:	f240 416c 	movw	r1, #1132	; 0x46c
   17574:	4628      	mov	r0, r5
   17576:	f00e fbdc 	bl	25d32 <assert_post_action>
}
   1757a:	b2e0      	uxtb	r0, r4
   1757c:	bd38      	pop	{r3, r4, r5, pc}
   1757e:	bf00      	nop
   17580:	200017b8 	.word	0x200017b8
   17584:	c28f5c29 	.word	0xc28f5c29
   17588:	0002bb60 	.word	0x0002bb60
   1758c:	0002be28 	.word	0x0002be28
   17590:	00029ff8 	.word	0x00029ff8
   17594:	0002bef0 	.word	0x0002bef0

00017598 <bt_conn_create_pdu_timeout>:
{
   17598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1759c:	4604      	mov	r4, r0
   1759e:	460f      	mov	r7, r1
   175a0:	4616      	mov	r6, r2
   175a2:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   175a4:	f012 f87e 	bl	296a4 <k_is_in_isr>
   175a8:	b970      	cbnz	r0, 175c8 <bt_conn_create_pdu_timeout+0x30>
	if (!pool) {
   175aa:	b1e4      	cbz	r4, 175e6 <bt_conn_create_pdu_timeout+0x4e>
	return net_buf_alloc_fixed(pool, timeout);
   175ac:	4632      	mov	r2, r6
   175ae:	462b      	mov	r3, r5
   175b0:	4620      	mov	r0, r4
   175b2:	f011 f8e4 	bl	2877e <net_buf_alloc_fixed>
	if (!buf) {
   175b6:	4604      	mov	r4, r0
   175b8:	b1b8      	cbz	r0, 175ea <bt_conn_create_pdu_timeout+0x52>
	net_buf_simple_reserve(&buf->b, reserve);
   175ba:	1d39      	adds	r1, r7, #4
   175bc:	3008      	adds	r0, #8
   175be:	f002 ff7f 	bl	1a4c0 <net_buf_simple_reserve>
}
   175c2:	4620      	mov	r0, r4
   175c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(!k_is_in_isr());
   175c8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 17624 <bt_conn_create_pdu_timeout+0x8c>
   175cc:	f44f 6391 	mov.w	r3, #1160	; 0x488
   175d0:	4642      	mov	r2, r8
   175d2:	490e      	ldr	r1, [pc, #56]	; (1760c <bt_conn_create_pdu_timeout+0x74>)
   175d4:	480e      	ldr	r0, [pc, #56]	; (17610 <bt_conn_create_pdu_timeout+0x78>)
   175d6:	f00e f92a 	bl	2582e <printk>
   175da:	f44f 6191 	mov.w	r1, #1160	; 0x488
   175de:	4640      	mov	r0, r8
   175e0:	f00e fba7 	bl	25d32 <assert_post_action>
   175e4:	e7e1      	b.n	175aa <bt_conn_create_pdu_timeout+0x12>
		pool = &acl_tx_pool;
   175e6:	4c0b      	ldr	r4, [pc, #44]	; (17614 <bt_conn_create_pdu_timeout+0x7c>)
   175e8:	e7e0      	b.n	175ac <bt_conn_create_pdu_timeout+0x14>
   175ea:	4b0b      	ldr	r3, [pc, #44]	; (17618 <bt_conn_create_pdu_timeout+0x80>)
   175ec:	4a0b      	ldr	r2, [pc, #44]	; (1761c <bt_conn_create_pdu_timeout+0x84>)
   175ee:	1a9b      	subs	r3, r3, r2
   175f0:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unable to allocate buffer within timeout");
   175f2:	f04f 0100 	mov.w	r1, #0
   175f6:	2202      	movs	r2, #2
   175f8:	f362 0102 	bfi	r1, r2, #0, #3
   175fc:	f36f 01c5 	bfc	r1, #3, #3
   17600:	f363 118f 	bfi	r1, r3, #6, #10
   17604:	4806      	ldr	r0, [pc, #24]	; (17620 <bt_conn_create_pdu_timeout+0x88>)
   17606:	f7fa f9d5 	bl	119b4 <log_0>
		return NULL;
   1760a:	e7da      	b.n	175c2 <bt_conn_create_pdu_timeout+0x2a>
   1760c:	0002bf0c 	.word	0x0002bf0c
   17610:	00029ff8 	.word	0x00029ff8
   17614:	20000810 	.word	0x20000810
   17618:	00029d88 	.word	0x00029d88
   1761c:	00029d70 	.word	0x00029d70
   17620:	0002bf1c 	.word	0x0002bf1c
   17624:	0002bb60 	.word	0x0002bb60

00017628 <notify_le_param_updated>:
{
   17628:	b570      	push	{r4, r5, r6, lr}
   1762a:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1762c:	f3bf 8f5b 	dmb	ish
   17630:	6843      	ldr	r3, [r0, #4]
   17632:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17636:	f413 7f00 	tst.w	r3, #512	; 0x200
   1763a:	d010      	beq.n	1765e <notify_le_param_updated+0x36>
   1763c:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   1763e:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   17642:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17646:	428b      	cmp	r3, r1
   17648:	d309      	bcc.n	1765e <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   1764a:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
	    conn->le.interval >= conn->le.interval_min &&
   1764e:	428b      	cmp	r3, r1
   17650:	d805      	bhi.n	1765e <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   17652:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
   17656:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
   1765a:	4299      	cmp	r1, r3
   1765c:	d002      	beq.n	17664 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   1765e:	4b22      	ldr	r3, [pc, #136]	; (176e8 <notify_le_param_updated+0xc0>)
   17660:	681d      	ldr	r5, [r3, #0]
   17662:	e00d      	b.n	17680 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17664:	f3bf 8f5b 	dmb	ish
   17668:	e852 3f00 	ldrex	r3, [r2]
   1766c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   17670:	e842 3100 	strex	r1, r3, [r2]
   17674:	2900      	cmp	r1, #0
   17676:	d1f7      	bne.n	17668 <notify_le_param_updated+0x40>
   17678:	f3bf 8f5b 	dmb	ish
}
   1767c:	e7ef      	b.n	1765e <notify_le_param_updated+0x36>
   1767e:	692d      	ldr	r5, [r5, #16]
   17680:	b15d      	cbz	r5, 1769a <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   17682:	68ee      	ldr	r6, [r5, #12]
   17684:	2e00      	cmp	r6, #0
   17686:	d0fa      	beq.n	1767e <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   17688:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1768c:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   17690:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   17694:	4620      	mov	r0, r4
   17696:	47b0      	blx	r6
   17698:	e7f1      	b.n	1767e <notify_le_param_updated+0x56>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1769a:	4d14      	ldr	r5, [pc, #80]	; (176ec <notify_le_param_updated+0xc4>)
   1769c:	e000      	b.n	176a0 <notify_le_param_updated+0x78>
   1769e:	3514      	adds	r5, #20
   176a0:	4b13      	ldr	r3, [pc, #76]	; (176f0 <notify_le_param_updated+0xc8>)
   176a2:	429d      	cmp	r5, r3
   176a4:	d80e      	bhi.n	176c4 <notify_le_param_updated+0x9c>
   176a6:	4b12      	ldr	r3, [pc, #72]	; (176f0 <notify_le_param_updated+0xc8>)
   176a8:	429d      	cmp	r5, r3
   176aa:	d21c      	bcs.n	176e6 <notify_le_param_updated+0xbe>
		if (cb->le_param_updated) {
   176ac:	68ee      	ldr	r6, [r5, #12]
   176ae:	2e00      	cmp	r6, #0
   176b0:	d0f5      	beq.n	1769e <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   176b2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   176b6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   176ba:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   176be:	4620      	mov	r0, r4
   176c0:	47b0      	blx	r6
   176c2:	e7ec      	b.n	1769e <notify_le_param_updated+0x76>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   176c4:	4e0b      	ldr	r6, [pc, #44]	; (176f4 <notify_le_param_updated+0xcc>)
   176c6:	f240 535f 	movw	r3, #1375	; 0x55f
   176ca:	4632      	mov	r2, r6
   176cc:	490a      	ldr	r1, [pc, #40]	; (176f8 <notify_le_param_updated+0xd0>)
   176ce:	480b      	ldr	r0, [pc, #44]	; (176fc <notify_le_param_updated+0xd4>)
   176d0:	f00e f8ad 	bl	2582e <printk>
   176d4:	480a      	ldr	r0, [pc, #40]	; (17700 <notify_le_param_updated+0xd8>)
   176d6:	f00e f8aa 	bl	2582e <printk>
   176da:	f240 515f 	movw	r1, #1375	; 0x55f
   176de:	4630      	mov	r0, r6
   176e0:	f00e fb27 	bl	25d32 <assert_post_action>
   176e4:	e7df      	b.n	176a6 <notify_le_param_updated+0x7e>
}
   176e6:	bd70      	pop	{r4, r5, r6, pc}
   176e8:	20002590 	.word	0x20002590
   176ec:	00029d60 	.word	0x00029d60
   176f0:	00029d60 	.word	0x00029d60
   176f4:	0002bb60 	.word	0x0002bb60
   176f8:	0002bb90 	.word	0x0002bb90
   176fc:	00029ff8 	.word	0x00029ff8
   17700:	0002bbac 	.word	0x0002bbac

00017704 <le_param_req>:
{
   17704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17708:	4606      	mov	r6, r0
   1770a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1770c:	4608      	mov	r0, r1
   1770e:	f00f f990 	bl	26a32 <bt_le_conn_params_valid>
   17712:	4607      	mov	r7, r0
   17714:	2800      	cmp	r0, #0
   17716:	d038      	beq.n	1778a <le_param_req+0x86>
	for (cb = callback_list; cb; cb = cb->_next) {
   17718:	4b1f      	ldr	r3, [pc, #124]	; (17798 <le_param_req+0x94>)
   1771a:	681c      	ldr	r4, [r3, #0]
   1771c:	e000      	b.n	17720 <le_param_req+0x1c>
   1771e:	6924      	ldr	r4, [r4, #16]
   17720:	b16c      	cbz	r4, 1773e <le_param_req+0x3a>
		if (!cb->le_param_req) {
   17722:	68a3      	ldr	r3, [r4, #8]
   17724:	2b00      	cmp	r3, #0
   17726:	d0fa      	beq.n	1771e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   17728:	4629      	mov	r1, r5
   1772a:	4630      	mov	r0, r6
   1772c:	4798      	blx	r3
   1772e:	b358      	cbz	r0, 17788 <le_param_req+0x84>
		if (!bt_le_conn_params_valid(param)) {
   17730:	4628      	mov	r0, r5
   17732:	f00f f97e 	bl	26a32 <bt_le_conn_params_valid>
   17736:	2800      	cmp	r0, #0
   17738:	d1f1      	bne.n	1771e <le_param_req+0x1a>
			return false;
   1773a:	4607      	mov	r7, r0
   1773c:	e025      	b.n	1778a <le_param_req+0x86>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1773e:	4c17      	ldr	r4, [pc, #92]	; (1779c <le_param_req+0x98>)
   17740:	e01e      	b.n	17780 <le_param_req+0x7c>
   17742:	f8df 806c 	ldr.w	r8, [pc, #108]	; 177b0 <le_param_req+0xac>
   17746:	f240 53a7 	movw	r3, #1447	; 0x5a7
   1774a:	4642      	mov	r2, r8
   1774c:	4914      	ldr	r1, [pc, #80]	; (177a0 <le_param_req+0x9c>)
   1774e:	4815      	ldr	r0, [pc, #84]	; (177a4 <le_param_req+0xa0>)
   17750:	f00e f86d 	bl	2582e <printk>
   17754:	4814      	ldr	r0, [pc, #80]	; (177a8 <le_param_req+0xa4>)
   17756:	f00e f86a 	bl	2582e <printk>
   1775a:	f240 51a7 	movw	r1, #1447	; 0x5a7
   1775e:	4640      	mov	r0, r8
   17760:	f00e fae7 	bl	25d32 <assert_post_action>
   17764:	4b11      	ldr	r3, [pc, #68]	; (177ac <le_param_req+0xa8>)
   17766:	429c      	cmp	r4, r3
   17768:	d20f      	bcs.n	1778a <le_param_req+0x86>
		if (!cb->le_param_req) {
   1776a:	68a3      	ldr	r3, [r4, #8]
   1776c:	b13b      	cbz	r3, 1777e <le_param_req+0x7a>
		if (!cb->le_param_req(conn, param)) {
   1776e:	4629      	mov	r1, r5
   17770:	4630      	mov	r0, r6
   17772:	4798      	blx	r3
   17774:	b160      	cbz	r0, 17790 <le_param_req+0x8c>
		if (!bt_le_conn_params_valid(param)) {
   17776:	4628      	mov	r0, r5
   17778:	f00f f95b 	bl	26a32 <bt_le_conn_params_valid>
   1777c:	b150      	cbz	r0, 17794 <le_param_req+0x90>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1777e:	3414      	adds	r4, #20
   17780:	4b0a      	ldr	r3, [pc, #40]	; (177ac <le_param_req+0xa8>)
   17782:	429c      	cmp	r4, r3
   17784:	d9ee      	bls.n	17764 <le_param_req+0x60>
   17786:	e7dc      	b.n	17742 <le_param_req+0x3e>
			return false;
   17788:	4607      	mov	r7, r0
}
   1778a:	4638      	mov	r0, r7
   1778c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
   17790:	4607      	mov	r7, r0
   17792:	e7fa      	b.n	1778a <le_param_req+0x86>
			return false;
   17794:	4607      	mov	r7, r0
   17796:	e7f8      	b.n	1778a <le_param_req+0x86>
   17798:	20002590 	.word	0x20002590
   1779c:	00029d60 	.word	0x00029d60
   177a0:	0002bb90 	.word	0x0002bb90
   177a4:	00029ff8 	.word	0x00029ff8
   177a8:	0002bbac 	.word	0x0002bbac
   177ac:	00029d60 	.word	0x00029d60
   177b0:	0002bb60 	.word	0x0002bb60

000177b4 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   177b4:	4b02      	ldr	r3, [pc, #8]	; (177c0 <bt_conn_cb_register+0xc>)
   177b6:	681a      	ldr	r2, [r3, #0]
   177b8:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   177ba:	6018      	str	r0, [r3, #0]
}
   177bc:	4770      	bx	lr
   177be:	bf00      	nop
   177c0:	20002590 	.word	0x20002590

000177c4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   177c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   177c6:	4607      	mov	r7, r0
   177c8:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   177ca:	2400      	movs	r4, #0
   177cc:	2c00      	cmp	r4, #0
   177ce:	dd02      	ble.n	177d6 <bt_conn_lookup_addr_le+0x12>
		}

		return conn;
	}

	return NULL;
   177d0:	2500      	movs	r5, #0
}
   177d2:	4628      	mov	r0, r5
   177d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   177d6:	4b0c      	ldr	r3, [pc, #48]	; (17808 <bt_conn_lookup_addr_le+0x44>)
   177d8:	20c8      	movs	r0, #200	; 0xc8
   177da:	fb00 3004 	mla	r0, r0, r4, r3
   177de:	f00f fcb7 	bl	27150 <bt_conn_ref>
		if (!conn) {
   177e2:	4605      	mov	r5, r0
   177e4:	b170      	cbz	r0, 17804 <bt_conn_lookup_addr_le+0x40>
		if (conn->type != BT_CONN_TYPE_LE) {
   177e6:	7883      	ldrb	r3, [r0, #2]
   177e8:	2b01      	cmp	r3, #1
   177ea:	d109      	bne.n	17800 <bt_conn_lookup_addr_le+0x3c>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   177ec:	4632      	mov	r2, r6
   177ee:	4639      	mov	r1, r7
   177f0:	f00f fd21 	bl	27236 <bt_conn_is_peer_addr_le>
   177f4:	2800      	cmp	r0, #0
   177f6:	d1ec      	bne.n	177d2 <bt_conn_lookup_addr_le+0xe>
			bt_conn_unref(conn);
   177f8:	4628      	mov	r0, r5
   177fa:	f7ff fd67 	bl	172cc <bt_conn_unref>
			continue;
   177fe:	e001      	b.n	17804 <bt_conn_lookup_addr_le+0x40>
			bt_conn_unref(conn);
   17800:	f7ff fd64 	bl	172cc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17804:	3401      	adds	r4, #1
   17806:	e7e1      	b.n	177cc <bt_conn_lookup_addr_le+0x8>
   17808:	200017b8 	.word	0x200017b8

0001780c <bt_conn_exists_le>:
{
   1780c:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1780e:	f7ff ffd9 	bl	177c4 <bt_conn_lookup_addr_le>
	if (conn) {
   17812:	b908      	cbnz	r0, 17818 <bt_conn_exists_le+0xc>
	return false;
   17814:	2000      	movs	r0, #0
}
   17816:	bd10      	pop	{r4, pc}
   17818:	4604      	mov	r4, r0
   1781a:	4b19      	ldr	r3, [pc, #100]	; (17880 <bt_conn_exists_le+0x74>)
   1781c:	4a19      	ldr	r2, [pc, #100]	; (17884 <bt_conn_exists_le+0x78>)
   1781e:	1a9b      	subs	r3, r3, r2
   17820:	08db      	lsrs	r3, r3, #3
		BT_WARN("Found valid connection in %s state",
   17822:	f04f 0200 	mov.w	r2, #0
   17826:	2102      	movs	r1, #2
   17828:	f361 0202 	bfi	r2, r1, #0, #3
   1782c:	f36f 02c5 	bfc	r2, #3, #3
   17830:	f363 128f 	bfi	r2, r3, #6, #10
   17834:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   17836:	2b08      	cmp	r3, #8
   17838:	d81d      	bhi.n	17876 <bt_conn_exists_le+0x6a>
   1783a:	e8df f003 	tbb	[pc, r3]
   1783e:	1e05      	.short	0x1e05
   17840:	1012140e 	.word	0x1012140e
   17844:	1816      	.short	0x1816
   17846:	1a          	.byte	0x1a
   17847:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
   17848:	490f      	ldr	r1, [pc, #60]	; (17888 <bt_conn_exists_le+0x7c>)
   1784a:	4810      	ldr	r0, [pc, #64]	; (1788c <bt_conn_exists_le+0x80>)
   1784c:	f7fa f8e2 	bl	11a14 <log_1>
		bt_conn_unref(conn);
   17850:	4620      	mov	r0, r4
   17852:	f7ff fd3b 	bl	172cc <bt_conn_unref>
		return true;
   17856:	2001      	movs	r0, #1
   17858:	e7dd      	b.n	17816 <bt_conn_exists_le+0xa>
		return "connect-scan";
   1785a:	490d      	ldr	r1, [pc, #52]	; (17890 <bt_conn_exists_le+0x84>)
   1785c:	e7f5      	b.n	1784a <bt_conn_exists_le+0x3e>
		return "connect-dir-adv";
   1785e:	490d      	ldr	r1, [pc, #52]	; (17894 <bt_conn_exists_le+0x88>)
   17860:	e7f3      	b.n	1784a <bt_conn_exists_le+0x3e>
		return "connect-adv";
   17862:	490d      	ldr	r1, [pc, #52]	; (17898 <bt_conn_exists_le+0x8c>)
   17864:	e7f1      	b.n	1784a <bt_conn_exists_le+0x3e>
		return "connect-auto";
   17866:	490d      	ldr	r1, [pc, #52]	; (1789c <bt_conn_exists_le+0x90>)
   17868:	e7ef      	b.n	1784a <bt_conn_exists_le+0x3e>
		return "connect";
   1786a:	490d      	ldr	r1, [pc, #52]	; (178a0 <bt_conn_exists_le+0x94>)
   1786c:	e7ed      	b.n	1784a <bt_conn_exists_le+0x3e>
		return "connected";
   1786e:	490d      	ldr	r1, [pc, #52]	; (178a4 <bt_conn_exists_le+0x98>)
   17870:	e7eb      	b.n	1784a <bt_conn_exists_le+0x3e>
		return "disconnect";
   17872:	490d      	ldr	r1, [pc, #52]	; (178a8 <bt_conn_exists_le+0x9c>)
   17874:	e7e9      	b.n	1784a <bt_conn_exists_le+0x3e>
		return "(unknown)";
   17876:	490d      	ldr	r1, [pc, #52]	; (178ac <bt_conn_exists_le+0xa0>)
   17878:	e7e7      	b.n	1784a <bt_conn_exists_le+0x3e>
		return "disconnect-complete";
   1787a:	490d      	ldr	r1, [pc, #52]	; (178b0 <bt_conn_exists_le+0xa4>)
   1787c:	e7e5      	b.n	1784a <bt_conn_exists_le+0x3e>
   1787e:	bf00      	nop
   17880:	00029d88 	.word	0x00029d88
   17884:	00029d70 	.word	0x00029d70
   17888:	0002bdd0 	.word	0x0002bdd0
   1788c:	0002bf48 	.word	0x0002bf48
   17890:	0002bd80 	.word	0x0002bd80
   17894:	0002bd90 	.word	0x0002bd90
   17898:	0002bda0 	.word	0x0002bda0
   1789c:	0002bdac 	.word	0x0002bdac
   178a0:	0002bdbc 	.word	0x0002bdbc
   178a4:	0002c198 	.word	0x0002c198
   178a8:	0002bdc4 	.word	0x0002bdc4
   178ac:	0002bd60 	.word	0x0002bd60
   178b0:	0002bd6c 	.word	0x0002bd6c

000178b4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   178b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178b8:	4680      	mov	r8, r0
   178ba:	460f      	mov	r7, r1
   178bc:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   178be:	2400      	movs	r4, #0
   178c0:	2c00      	cmp	r4, #0
   178c2:	dd03      	ble.n	178cc <bt_conn_lookup_state_le+0x18>
		}

		return conn;
	}

	return NULL;
   178c4:	2500      	movs	r5, #0
}
   178c6:	4628      	mov	r0, r5
   178c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   178cc:	4b11      	ldr	r3, [pc, #68]	; (17914 <bt_conn_lookup_state_le+0x60>)
   178ce:	20c8      	movs	r0, #200	; 0xc8
   178d0:	fb00 3004 	mla	r0, r0, r4, r3
   178d4:	f00f fc3c 	bl	27150 <bt_conn_ref>
		if (!conn) {
   178d8:	4605      	mov	r5, r0
   178da:	b188      	cbz	r0, 17900 <bt_conn_lookup_state_le+0x4c>
		if (conn->type != BT_CONN_TYPE_LE) {
   178dc:	7883      	ldrb	r3, [r0, #2]
   178de:	2b01      	cmp	r3, #1
   178e0:	d110      	bne.n	17904 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   178e2:	b127      	cbz	r7, 178ee <bt_conn_lookup_state_le+0x3a>
   178e4:	463a      	mov	r2, r7
   178e6:	4641      	mov	r1, r8
   178e8:	f00f fca5 	bl	27236 <bt_conn_is_peer_addr_le>
   178ec:	b168      	cbz	r0, 1790a <bt_conn_lookup_state_le+0x56>
		if (!(conn->state == state && conn->id == id)) {
   178ee:	7aab      	ldrb	r3, [r5, #10]
   178f0:	42b3      	cmp	r3, r6
   178f2:	d102      	bne.n	178fa <bt_conn_lookup_state_le+0x46>
   178f4:	7a2b      	ldrb	r3, [r5, #8]
   178f6:	4543      	cmp	r3, r8
   178f8:	d0e5      	beq.n	178c6 <bt_conn_lookup_state_le+0x12>
			bt_conn_unref(conn);
   178fa:	4628      	mov	r0, r5
   178fc:	f7ff fce6 	bl	172cc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17900:	3401      	adds	r4, #1
   17902:	e7dd      	b.n	178c0 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   17904:	f7ff fce2 	bl	172cc <bt_conn_unref>
			continue;
   17908:	e7fa      	b.n	17900 <bt_conn_lookup_state_le+0x4c>
			bt_conn_unref(conn);
   1790a:	4628      	mov	r0, r5
   1790c:	f7ff fcde 	bl	172cc <bt_conn_unref>
			continue;
   17910:	e7f6      	b.n	17900 <bt_conn_lookup_state_le+0x4c>
   17912:	bf00      	nop
   17914:	200017b8 	.word	0x200017b8

00017918 <send_conn_le_param_update>:
{
   17918:	b538      	push	{r3, r4, r5, lr}
   1791a:	4604      	mov	r4, r0
   1791c:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1791e:	4608      	mov	r0, r1
   17920:	f00f f887 	bl	26a32 <bt_le_conn_params_valid>
   17924:	b360      	cbz	r0, 17980 <send_conn_le_param_update+0x68>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17926:	4b18      	ldr	r3, [pc, #96]	; (17988 <send_conn_le_param_update+0x70>)
   17928:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1792c:	f013 0f02 	tst.w	r3, #2
   17930:	d004      	beq.n	1793c <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17932:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17936:	f013 0f02 	tst.w	r3, #2
   1793a:	d113      	bne.n	17964 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1793c:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1793e:	b9d3      	cbnz	r3, 17976 <send_conn_le_param_update+0x5e>
		rc = bt_conn_le_conn_update(conn, param);
   17940:	4629      	mov	r1, r5
   17942:	4620      	mov	r0, r4
   17944:	f00f fc9e 	bl	27284 <bt_conn_le_conn_update>
		if (rc == 0) {
   17948:	b9c8      	cbnz	r0, 1797e <send_conn_le_param_update+0x66>
			conn->le.interval_min = param->interval_min;
   1794a:	882b      	ldrh	r3, [r5, #0]
   1794c:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   17950:	886b      	ldrh	r3, [r5, #2]
   17952:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   17956:	88ab      	ldrh	r3, [r5, #4]
   17958:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1795c:	88eb      	ldrh	r3, [r5, #6]
   1795e:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
		return rc;
   17962:	e00c      	b.n	1797e <send_conn_le_param_update+0x66>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17964:	f3bf 8f5b 	dmb	ish
   17968:	6863      	ldr	r3, [r4, #4]
   1796a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1796e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   17972:	d1e3      	bne.n	1793c <send_conn_le_param_update+0x24>
   17974:	e7e4      	b.n	17940 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   17976:	4629      	mov	r1, r5
   17978:	4620      	mov	r0, r4
   1797a:	f00f fd92 	bl	274a2 <bt_l2cap_update_conn_param>
}
   1797e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17980:	f06f 0015 	mvn.w	r0, #21
   17984:	e7fb      	b.n	1797e <send_conn_le_param_update+0x66>
   17986:	bf00      	nop
   17988:	200002b0 	.word	0x200002b0

0001798c <deferred_work>:
{
   1798c:	b530      	push	{r4, r5, lr}
   1798e:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   17990:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   17994:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   17998:	b3b3      	cbz	r3, 17a08 <deferred_work+0x7c>
	if (conn->type != BT_CONN_TYPE_LE) {
   1799a:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1799e:	2b01      	cmp	r3, #1
   179a0:	d130      	bne.n	17a04 <deferred_work+0x78>
	if (atomic_test_and_clear_bit(conn->flags,
   179a2:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   179a6:	f3bf 8f5b 	dmb	ish
   179aa:	e855 3f00 	ldrex	r3, [r5]
   179ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   179b2:	e845 2100 	strex	r1, r2, [r5]
   179b6:	2900      	cmp	r1, #0
   179b8:	d1f7      	bne.n	179aa <deferred_work+0x1e>
   179ba:	f3bf 8f5b 	dmb	ish
   179be:	f413 7f00 	tst.w	r3, #512	; 0x200
   179c2:	d02b      	beq.n	17a1c <deferred_work+0x90>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   179c4:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   179c8:	f8ad 3000 	strh.w	r3, [sp]
   179cc:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   179d0:	f8ad 3002 	strh.w	r3, [sp, #2]
   179d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   179d8:	f8ad 3004 	strh.w	r3, [sp, #4]
   179dc:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   179e0:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   179e4:	4669      	mov	r1, sp
   179e6:	4620      	mov	r0, r4
   179e8:	f7ff ff96 	bl	17918 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   179ec:	f3bf 8f5b 	dmb	ish
   179f0:	e855 3f00 	ldrex	r3, [r5]
   179f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   179f8:	e845 3200 	strex	r2, r3, [r5]
   179fc:	2a00      	cmp	r2, #0
   179fe:	d1f7      	bne.n	179f0 <deferred_work+0x64>
   17a00:	f3bf 8f5b 	dmb	ish
}
   17a04:	b005      	add	sp, #20
   17a06:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   17a08:	4620      	mov	r0, r4
   17a0a:	f00f fcbc 	bl	27386 <bt_l2cap_disconnected>
		notify_disconnected(conn);
   17a0e:	4620      	mov	r0, r4
   17a10:	f7ff f952 	bl	16cb8 <notify_disconnected>
		bt_conn_unref(conn);
   17a14:	4620      	mov	r0, r4
   17a16:	f7ff fc59 	bl	172cc <bt_conn_unref>
		return;
   17a1a:	e7f3      	b.n	17a04 <deferred_work+0x78>
		param = BT_LE_CONN_PARAM(
   17a1c:	4a05      	ldr	r2, [pc, #20]	; (17a34 <deferred_work+0xa8>)
   17a1e:	ab02      	add	r3, sp, #8
   17a20:	e892 0003 	ldmia.w	r2, {r0, r1}
   17a24:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   17a28:	4619      	mov	r1, r3
   17a2a:	4620      	mov	r0, r4
   17a2c:	f7ff ff74 	bl	17918 <send_conn_le_param_update>
   17a30:	e7dc      	b.n	179ec <deferred_work+0x60>
   17a32:	bf00      	nop
   17a34:	00029f18 	.word	0x00029f18

00017a38 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   17a38:	b508      	push	{r3, lr}
   17a3a:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   17a3c:	4801      	ldr	r0, [pc, #4]	; (17a44 <bt_conn_create_frag_timeout+0xc>)
   17a3e:	f7ff fdab 	bl	17598 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   17a42:	bd08      	pop	{r3, pc}
   17a44:	20000878 	.word	0x20000878

00017a48 <create_frag>:
{
   17a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a4a:	4606      	mov	r6, r0
   17a4c:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   17a4e:	f04f 32ff 	mov.w	r2, #4294967295
   17a52:	f04f 33ff 	mov.w	r3, #4294967295
   17a56:	2000      	movs	r0, #0
   17a58:	f7ff ffee 	bl	17a38 <bt_conn_create_frag_timeout>
   17a5c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17a5e:	7ab3      	ldrb	r3, [r6, #10]
   17a60:	2b07      	cmp	r3, #7
   17a62:	d11a      	bne.n	17a9a <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   17a64:	2300      	movs	r3, #0
   17a66:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   17a68:	4b10      	ldr	r3, [pc, #64]	; (17aac <create_frag+0x64>)
   17a6a:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   17a6e:	f100 0708 	add.w	r7, r0, #8
   17a72:	4638      	mov	r0, r7
   17a74:	f010 fe96 	bl	287a4 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17a78:	4286      	cmp	r6, r0
   17a7a:	d212      	bcs.n	17aa2 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   17a7c:	4b0b      	ldr	r3, [pc, #44]	; (17aac <create_frag+0x64>)
   17a7e:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17a82:	4632      	mov	r2, r6
   17a84:	f855 1f08 	ldr.w	r1, [r5, #8]!
   17a88:	4638      	mov	r0, r7
   17a8a:	f010 fe94 	bl	287b6 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   17a8e:	4631      	mov	r1, r6
   17a90:	4628      	mov	r0, r5
   17a92:	f002 fe45 	bl	1a720 <net_buf_simple_pull>
}
   17a96:	4620      	mov	r0, r4
   17a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   17a9a:	f002 fd77 	bl	1a58c <net_buf_unref>
		return NULL;
   17a9e:	2400      	movs	r4, #0
   17aa0:	e7f9      	b.n	17a96 <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   17aa2:	4638      	mov	r0, r7
   17aa4:	f010 fe7e 	bl	287a4 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17aa8:	b286      	uxth	r6, r0
   17aaa:	e7ea      	b.n	17a82 <create_frag+0x3a>
   17aac:	200002b0 	.word	0x200002b0

00017ab0 <send_buf>:
{
   17ab0:	b538      	push	{r3, r4, r5, lr}
   17ab2:	4605      	mov	r5, r0
   17ab4:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   17ab6:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   17ab8:	4a1b      	ldr	r2, [pc, #108]	; (17b28 <send_buf+0x78>)
   17aba:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   17abe:	429a      	cmp	r2, r3
   17ac0:	d21f      	bcs.n	17b02 <send_buf+0x52>
	frag = create_frag(conn, buf);
   17ac2:	f7ff ffc1 	bl	17a48 <create_frag>
	if (!frag) {
   17ac6:	4601      	mov	r1, r0
   17ac8:	b350      	cbz	r0, 17b20 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   17aca:	2301      	movs	r3, #1
   17acc:	2200      	movs	r2, #0
   17ace:	4628      	mov	r0, r5
   17ad0:	f7ff f990 	bl	16df4 <send_frag>
   17ad4:	4603      	mov	r3, r0
   17ad6:	b1c8      	cbz	r0, 17b0c <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   17ad8:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   17ada:	4a13      	ldr	r2, [pc, #76]	; (17b28 <send_buf+0x78>)
   17adc:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   17ae0:	429a      	cmp	r2, r3
   17ae2:	d215      	bcs.n	17b10 <send_buf+0x60>
		frag = create_frag(conn, buf);
   17ae4:	4621      	mov	r1, r4
   17ae6:	4628      	mov	r0, r5
   17ae8:	f7ff ffae 	bl	17a48 <create_frag>
		if (!frag) {
   17aec:	4601      	mov	r1, r0
   17aee:	b1c8      	cbz	r0, 17b24 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17af0:	2301      	movs	r3, #1
   17af2:	461a      	mov	r2, r3
   17af4:	4628      	mov	r0, r5
   17af6:	f7ff f97d 	bl	16df4 <send_frag>
   17afa:	4603      	mov	r3, r0
   17afc:	2800      	cmp	r0, #0
   17afe:	d1eb      	bne.n	17ad8 <send_buf+0x28>
   17b00:	e004      	b.n	17b0c <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   17b02:	2300      	movs	r3, #0
   17b04:	2202      	movs	r2, #2
   17b06:	f7ff f975 	bl	16df4 <send_frag>
   17b0a:	4603      	mov	r3, r0
}
   17b0c:	4618      	mov	r0, r3
   17b0e:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   17b10:	2300      	movs	r3, #0
   17b12:	2203      	movs	r2, #3
   17b14:	4621      	mov	r1, r4
   17b16:	4628      	mov	r0, r5
   17b18:	f7ff f96c 	bl	16df4 <send_frag>
   17b1c:	4603      	mov	r3, r0
   17b1e:	e7f5      	b.n	17b0c <send_buf+0x5c>
		return false;
   17b20:	2300      	movs	r3, #0
   17b22:	e7f3      	b.n	17b0c <send_buf+0x5c>
			return false;
   17b24:	2300      	movs	r3, #0
   17b26:	e7f1      	b.n	17b0c <send_buf+0x5c>
   17b28:	200002b0 	.word	0x200002b0

00017b2c <bt_conn_process_tx>:
{
   17b2c:	b538      	push	{r3, r4, r5, lr}
   17b2e:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   17b30:	7a83      	ldrb	r3, [r0, #10]
   17b32:	b97b      	cbnz	r3, 17b54 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   17b34:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17b36:	f3bf 8f5b 	dmb	ish
   17b3a:	e853 2f00 	ldrex	r2, [r3]
   17b3e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   17b42:	e843 1000 	strex	r0, r1, [r3]
   17b46:	2800      	cmp	r0, #0
   17b48:	d1f7      	bne.n	17b3a <bt_conn_process_tx+0xe>
   17b4a:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   17b4e:	f012 0f40 	tst.w	r2, #64	; 0x40
   17b52:	d10d      	bne.n	17b70 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   17b54:	2200      	movs	r2, #0
   17b56:	2300      	movs	r3, #0
   17b58:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17b5c:	f002 fc7e 	bl	1a45c <net_buf_get>
	BT_ASSERT(buf);
   17b60:	4605      	mov	r5, r0
   17b62:	b148      	cbz	r0, 17b78 <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   17b64:	4629      	mov	r1, r5
   17b66:	4620      	mov	r0, r4
   17b68:	f7ff ffa2 	bl	17ab0 <send_buf>
   17b6c:	b190      	cbz	r0, 17b94 <bt_conn_process_tx+0x68>
}
   17b6e:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   17b70:	4620      	mov	r0, r4
   17b72:	f7ff fad9 	bl	17128 <conn_cleanup>
		return;
   17b76:	e7fa      	b.n	17b6e <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   17b78:	f240 23e7 	movw	r3, #743	; 0x2e7
   17b7c:	4a07      	ldr	r2, [pc, #28]	; (17b9c <bt_conn_process_tx+0x70>)
   17b7e:	4908      	ldr	r1, [pc, #32]	; (17ba0 <bt_conn_process_tx+0x74>)
   17b80:	4808      	ldr	r0, [pc, #32]	; (17ba4 <bt_conn_process_tx+0x78>)
   17b82:	f00d fe54 	bl	2582e <printk>
   17b86:	4040      	eors	r0, r0
   17b88:	f380 8811 	msr	BASEPRI, r0
   17b8c:	f04f 0003 	mov.w	r0, #3
   17b90:	df02      	svc	2
   17b92:	e7e7      	b.n	17b64 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   17b94:	4628      	mov	r0, r5
   17b96:	f002 fcf9 	bl	1a58c <net_buf_unref>
   17b9a:	e7e8      	b.n	17b6e <bt_conn_process_tx+0x42>
   17b9c:	0002bb60 	.word	0x0002bb60
   17ba0:	0002c994 	.word	0x0002c994
   17ba4:	00029ff8 	.word	0x00029ff8

00017ba8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   17ba8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   17baa:	2400      	movs	r4, #0
   17bac:	e006      	b.n	17bbc <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   17bae:	490a      	ldr	r1, [pc, #40]	; (17bd8 <bt_conn_init+0x30>)
   17bb0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   17bb4:	4809      	ldr	r0, [pc, #36]	; (17bdc <bt_conn_init+0x34>)
   17bb6:	f011 fdd3 	bl	29760 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   17bba:	3401      	adds	r4, #1
   17bbc:	2c02      	cmp	r4, #2
   17bbe:	ddf6      	ble.n	17bae <bt_conn_init+0x6>
	}

	bt_att_init();
   17bc0:	f010 f9a3 	bl	27f0a <bt_att_init>

	err = bt_smp_init();
   17bc4:	f010 fd8e 	bl	286e4 <bt_smp_init>
	if (err) {
   17bc8:	4604      	mov	r4, r0
   17bca:	b108      	cbz	r0, 17bd0 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17bcc:	4620      	mov	r0, r4
   17bce:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   17bd0:	f00f fc94 	bl	274fc <bt_l2cap_init>
	return 0;
   17bd4:	e7fa      	b.n	17bcc <bt_conn_init+0x24>
   17bd6:	bf00      	nop
   17bd8:	20002594 	.word	0x20002594
   17bdc:	200007f4 	.word	0x200007f4

00017be0 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   17be0:	4a05      	ldr	r2, [pc, #20]	; (17bf8 <get_ident+0x18>)
   17be2:	7813      	ldrb	r3, [r2, #0]
   17be4:	3301      	adds	r3, #1
   17be6:	b2db      	uxtb	r3, r3
   17be8:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   17bea:	b90b      	cbnz	r3, 17bf0 <get_ident+0x10>
		ident++;
   17bec:	3301      	adds	r3, #1
   17bee:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   17bf0:	4b01      	ldr	r3, [pc, #4]	; (17bf8 <get_ident+0x18>)
   17bf2:	7818      	ldrb	r0, [r3, #0]
   17bf4:	4770      	bx	lr
   17bf6:	bf00      	nop
   17bf8:	2000375a 	.word	0x2000375a

00017bfc <le_conn_param_rsp>:

	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
   17bfc:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
   17bfe:	898b      	ldrh	r3, [r1, #12]
   17c00:	2b01      	cmp	r3, #1
   17c02:	d900      	bls.n	17c06 <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
   17c04:	bd08      	pop	{r3, pc}
   17c06:	4b08      	ldr	r3, [pc, #32]	; (17c28 <le_conn_param_rsp+0x2c>)
   17c08:	4a08      	ldr	r2, [pc, #32]	; (17c2c <le_conn_param_rsp+0x30>)
   17c0a:	1a9b      	subs	r3, r3, r2
   17c0c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn param rsp");
   17c0e:	f04f 0100 	mov.w	r1, #0
   17c12:	2201      	movs	r2, #1
   17c14:	f362 0102 	bfi	r1, r2, #0, #3
   17c18:	f36f 01c5 	bfc	r1, #3, #3
   17c1c:	f363 118f 	bfi	r1, r3, #6, #10
   17c20:	4803      	ldr	r0, [pc, #12]	; (17c30 <le_conn_param_rsp+0x34>)
   17c22:	f7f9 fec7 	bl	119b4 <log_0>
		return;
   17c26:	e7ed      	b.n	17c04 <le_conn_param_rsp+0x8>
   17c28:	00029da8 	.word	0x00029da8
   17c2c:	00029d70 	.word	0x00029d70
   17c30:	0002bf94 	.word	0x0002bf94

00017c34 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   17c34:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17c36:	2300      	movs	r3, #0
   17c38:	2b00      	cmp	r3, #0
   17c3a:	dd13      	ble.n	17c64 <l2cap_accept+0x30>
   17c3c:	4b12      	ldr	r3, [pc, #72]	; (17c88 <l2cap_accept+0x54>)
   17c3e:	4a13      	ldr	r2, [pc, #76]	; (17c8c <l2cap_accept+0x58>)
   17c40:	1a9b      	subs	r3, r3, r2
   17c42:	08db      	lsrs	r3, r3, #3
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   17c44:	f04f 0200 	mov.w	r2, #0
   17c48:	2101      	movs	r1, #1
   17c4a:	f361 0202 	bfi	r2, r1, #0, #3
   17c4e:	f36f 02c5 	bfc	r2, #3, #3
   17c52:	f363 128f 	bfi	r2, r3, #6, #10
   17c56:	4601      	mov	r1, r0
   17c58:	480d      	ldr	r0, [pc, #52]	; (17c90 <l2cap_accept+0x5c>)
   17c5a:	f7f9 fedb 	bl	11a14 <log_1>

	return -ENOMEM;
   17c5e:	f06f 000b 	mvn.w	r0, #11
}
   17c62:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   17c64:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
   17c68:	0112      	lsls	r2, r2, #4
   17c6a:	4c0a      	ldr	r4, [pc, #40]	; (17c94 <l2cap_accept+0x60>)
   17c6c:	58a2      	ldr	r2, [r4, r2]
   17c6e:	b10a      	cbz	r2, 17c74 <l2cap_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17c70:	3301      	adds	r3, #1
   17c72:	e7e1      	b.n	17c38 <l2cap_accept+0x4>
		l2cap->chan.chan.ops = &ops;
   17c74:	4a07      	ldr	r2, [pc, #28]	; (17c94 <l2cap_accept+0x60>)
   17c76:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   17c7a:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   17c7e:	4c06      	ldr	r4, [pc, #24]	; (17c98 <l2cap_accept+0x64>)
   17c80:	6044      	str	r4, [r0, #4]
		*chan = &l2cap->chan.chan;
   17c82:	6008      	str	r0, [r1, #0]
		return 0;
   17c84:	2000      	movs	r0, #0
   17c86:	e7ec      	b.n	17c62 <l2cap_accept+0x2e>
   17c88:	00029da8 	.word	0x00029da8
   17c8c:	00029d70 	.word	0x00029d70
   17c90:	0002bfb0 	.word	0x0002bfb0
   17c94:	20001880 	.word	0x20001880
   17c98:	0002c170 	.word	0x0002c170

00017c9c <l2cap_rtx_timeout>:
{
   17c9c:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   17c9e:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   17ca2:	f850 5c10 	ldr.w	r5, [r0, #-16]
   17ca6:	4b0c      	ldr	r3, [pc, #48]	; (17cd8 <l2cap_rtx_timeout+0x3c>)
   17ca8:	4a0c      	ldr	r2, [pc, #48]	; (17cdc <l2cap_rtx_timeout+0x40>)
   17caa:	1a9b      	subs	r3, r3, r2
   17cac:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
   17cae:	f04f 0200 	mov.w	r2, #0
   17cb2:	2101      	movs	r1, #1
   17cb4:	f361 0202 	bfi	r2, r1, #0, #3
   17cb8:	f36f 02c5 	bfc	r2, #3, #3
   17cbc:	f363 128f 	bfi	r2, r3, #6, #10
   17cc0:	4621      	mov	r1, r4
   17cc2:	4807      	ldr	r0, [pc, #28]	; (17ce0 <l2cap_rtx_timeout+0x44>)
   17cc4:	f7f9 fea6 	bl	11a14 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   17cc8:	4621      	mov	r1, r4
   17cca:	4628      	mov	r0, r5
   17ccc:	f00f fb10 	bl	272f0 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   17cd0:	4620      	mov	r0, r4
   17cd2:	f00f fb35 	bl	27340 <bt_l2cap_chan_del>
}
   17cd6:	bd38      	pop	{r3, r4, r5, pc}
   17cd8:	00029da8 	.word	0x00029da8
   17cdc:	00029d70 	.word	0x00029d70
   17ce0:	0002bfd8 	.word	0x0002bfd8

00017ce4 <l2cap_chan_add>:
{
   17ce4:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
   17ce6:	b1d9      	cbz	r1, 17d20 <l2cap_chan_add+0x3c>
   17ce8:	4604      	mov	r4, r0
   17cea:	4615      	mov	r5, r2
   17cec:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   17cee:	4914      	ldr	r1, [pc, #80]	; (17d40 <l2cap_chan_add+0x5c>)
   17cf0:	f106 0010 	add.w	r0, r6, #16
   17cf4:	f007 fef6 	bl	1fae4 <k_work_init_delayable>
	atomic_clear(chan->status);
   17cf8:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17cfc:	2200      	movs	r2, #0
   17cfe:	f3bf 8f5b 	dmb	ish
   17d02:	e853 1f00 	ldrex	r1, [r3]
   17d06:	e843 2000 	strex	r0, r2, [r3]
   17d0a:	2800      	cmp	r0, #0
   17d0c:	d1f9      	bne.n	17d02 <l2cap_chan_add+0x1e>
   17d0e:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   17d12:	462a      	mov	r2, r5
   17d14:	4631      	mov	r1, r6
   17d16:	4620      	mov	r0, r4
   17d18:	f00f fb25 	bl	27366 <bt_l2cap_chan_add>
	return true;
   17d1c:	2001      	movs	r0, #1
}
   17d1e:	bd70      	pop	{r4, r5, r6, pc}
   17d20:	4b08      	ldr	r3, [pc, #32]	; (17d44 <l2cap_chan_add+0x60>)
   17d22:	4a09      	ldr	r2, [pc, #36]	; (17d48 <l2cap_chan_add+0x64>)
   17d24:	1a9b      	subs	r3, r3, r2
   17d26:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate L2CAP channel ID");
   17d28:	2201      	movs	r2, #1
   17d2a:	f362 0102 	bfi	r1, r2, #0, #3
   17d2e:	f36f 01c5 	bfc	r1, #3, #3
   17d32:	f363 118f 	bfi	r1, r3, #6, #10
   17d36:	4805      	ldr	r0, [pc, #20]	; (17d4c <l2cap_chan_add+0x68>)
   17d38:	f7f9 fe3c 	bl	119b4 <log_0>
		return false;
   17d3c:	2000      	movs	r0, #0
   17d3e:	e7ee      	b.n	17d1e <l2cap_chan_add+0x3a>
   17d40:	00017c9d 	.word	0x00017c9d
   17d44:	00029da8 	.word	0x00029da8
   17d48:	00029d70 	.word	0x00029d70
   17d4c:	0002bfe8 	.word	0x0002bfe8

00017d50 <bt_l2cap_connected>:
{
   17d50:	b570      	push	{r4, r5, r6, lr}
   17d52:	b082      	sub	sp, #8
   17d54:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17d56:	4c24      	ldr	r4, [pc, #144]	; (17de8 <bt_l2cap_connected+0x98>)
   17d58:	e000      	b.n	17d5c <bt_l2cap_connected+0xc>
   17d5a:	340c      	adds	r4, #12
   17d5c:	4b23      	ldr	r3, [pc, #140]	; (17dec <bt_l2cap_connected+0x9c>)
   17d5e:	429c      	cmp	r4, r3
   17d60:	d82f      	bhi.n	17dc2 <bt_l2cap_connected+0x72>
   17d62:	4b22      	ldr	r3, [pc, #136]	; (17dec <bt_l2cap_connected+0x9c>)
   17d64:	429c      	cmp	r4, r3
   17d66:	d23d      	bcs.n	17de4 <bt_l2cap_connected+0x94>
		if (fchan->accept(conn, &chan) < 0) {
   17d68:	6863      	ldr	r3, [r4, #4]
   17d6a:	a901      	add	r1, sp, #4
   17d6c:	4628      	mov	r0, r5
   17d6e:	4798      	blx	r3
   17d70:	2800      	cmp	r0, #0
   17d72:	dbf2      	blt.n	17d5a <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   17d74:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   17d76:	8823      	ldrh	r3, [r4, #0]
   17d78:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   17d7c:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17d80:	68a2      	ldr	r2, [r4, #8]
   17d82:	4628      	mov	r0, r5
   17d84:	f7ff ffae 	bl	17ce4 <l2cap_chan_add>
   17d88:	b360      	cbz	r0, 17de4 <bt_l2cap_connected+0x94>
		if (chan->ops->connected) {
   17d8a:	9801      	ldr	r0, [sp, #4]
   17d8c:	6843      	ldr	r3, [r0, #4]
   17d8e:	681b      	ldr	r3, [r3, #0]
   17d90:	b103      	cbz	r3, 17d94 <bt_l2cap_connected+0x44>
			chan->ops->connected(chan);
   17d92:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   17d94:	9b01      	ldr	r3, [sp, #4]
   17d96:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17d98:	f3bf 8f5b 	dmb	ish
   17d9c:	e853 2f00 	ldrex	r2, [r3]
   17da0:	f042 0201 	orr.w	r2, r2, #1
   17da4:	e843 2100 	strex	r1, r2, [r3]
   17da8:	2900      	cmp	r1, #0
   17daa:	d1f7      	bne.n	17d9c <bt_l2cap_connected+0x4c>
   17dac:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   17db0:	9801      	ldr	r0, [sp, #4]
   17db2:	6843      	ldr	r3, [r0, #4]
   17db4:	699b      	ldr	r3, [r3, #24]
   17db6:	2b00      	cmp	r3, #0
   17db8:	d0cf      	beq.n	17d5a <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   17dba:	f100 0168 	add.w	r1, r0, #104	; 0x68
   17dbe:	4798      	blx	r3
   17dc0:	e7cb      	b.n	17d5a <bt_l2cap_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17dc2:	4e0b      	ldr	r6, [pc, #44]	; (17df0 <bt_l2cap_connected+0xa0>)
   17dc4:	f44f 73b3 	mov.w	r3, #358	; 0x166
   17dc8:	4632      	mov	r2, r6
   17dca:	490a      	ldr	r1, [pc, #40]	; (17df4 <bt_l2cap_connected+0xa4>)
   17dcc:	480a      	ldr	r0, [pc, #40]	; (17df8 <bt_l2cap_connected+0xa8>)
   17dce:	f00d fd2e 	bl	2582e <printk>
   17dd2:	480a      	ldr	r0, [pc, #40]	; (17dfc <bt_l2cap_connected+0xac>)
   17dd4:	f00d fd2b 	bl	2582e <printk>
   17dd8:	f44f 71b3 	mov.w	r1, #358	; 0x166
   17ddc:	4630      	mov	r0, r6
   17dde:	f00d ffa8 	bl	25d32 <assert_post_action>
   17de2:	e7be      	b.n	17d62 <bt_l2cap_connected+0x12>
}
   17de4:	b002      	add	sp, #8
   17de6:	bd70      	pop	{r4, r5, r6, pc}
   17de8:	00029d3c 	.word	0x00029d3c
   17dec:	00029d60 	.word	0x00029d60
   17df0:	0002c00c 	.word	0x0002c00c
   17df4:	0002c040 	.word	0x0002c040
   17df8:	00029ff8 	.word	0x00029ff8
   17dfc:	0002bbac 	.word	0x0002bbac

00017e00 <l2cap_create_le_sig_pdu>:
{
   17e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e02:	460c      	mov	r4, r1
   17e04:	4616      	mov	r6, r2
   17e06:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   17e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17e0c:	2300      	movs	r3, #0
   17e0e:	2100      	movs	r1, #0
   17e10:	4608      	mov	r0, r1
   17e12:	f00f fad9 	bl	273c8 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   17e16:	4607      	mov	r7, r0
   17e18:	b140      	cbz	r0, 17e2c <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   17e1a:	2104      	movs	r1, #4
   17e1c:	3008      	adds	r0, #8
   17e1e:	f002 fce7 	bl	1a7f0 <net_buf_simple_add>
	hdr->code = code;
   17e22:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   17e24:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   17e26:	8045      	strh	r5, [r0, #2]
}
   17e28:	4638      	mov	r0, r7
   17e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17e2c:	4b08      	ldr	r3, [pc, #32]	; (17e50 <l2cap_create_le_sig_pdu+0x50>)
   17e2e:	4a09      	ldr	r2, [pc, #36]	; (17e54 <l2cap_create_le_sig_pdu+0x54>)
   17e30:	1a9b      	subs	r3, r3, r2
   17e32:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   17e34:	f04f 0200 	mov.w	r2, #0
   17e38:	2101      	movs	r1, #1
   17e3a:	f361 0202 	bfi	r2, r1, #0, #3
   17e3e:	f36f 02c5 	bfc	r2, #3, #3
   17e42:	f363 128f 	bfi	r2, r3, #6, #10
   17e46:	4621      	mov	r1, r4
   17e48:	4803      	ldr	r0, [pc, #12]	; (17e58 <l2cap_create_le_sig_pdu+0x58>)
   17e4a:	f7f9 fde3 	bl	11a14 <log_1>
		return NULL;
   17e4e:	e7eb      	b.n	17e28 <l2cap_create_le_sig_pdu+0x28>
   17e50:	00029da8 	.word	0x00029da8
   17e54:	00029d70 	.word	0x00029d70
   17e58:	0002c068 	.word	0x0002c068

00017e5c <l2cap_recv>:
{
   17e5c:	b570      	push	{r4, r5, r6, lr}
   17e5e:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   17e60:	898b      	ldrh	r3, [r1, #12]
   17e62:	2b03      	cmp	r3, #3
   17e64:	d917      	bls.n	17e96 <l2cap_recv+0x3a>
   17e66:	4606      	mov	r6, r0
   17e68:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   17e6a:	2104      	movs	r1, #4
   17e6c:	f104 0008 	add.w	r0, r4, #8
   17e70:	f002 fc78 	bl	1a764 <net_buf_simple_pull_mem>
   17e74:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   17e76:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   17e78:	89a1      	ldrh	r1, [r4, #12]
   17e7a:	4291      	cmp	r1, r2
   17e7c:	d11e      	bne.n	17ebc <l2cap_recv+0x60>
	if (!hdr->ident) {
   17e7e:	7843      	ldrb	r3, [r0, #1]
   17e80:	b36b      	cbz	r3, 17ede <l2cap_recv+0x82>
	switch (hdr->code) {
   17e82:	7801      	ldrb	r1, [r0, #0]
   17e84:	2901      	cmp	r1, #1
   17e86:	d016      	beq.n	17eb6 <l2cap_recv+0x5a>
   17e88:	2913      	cmp	r1, #19
   17e8a:	d139      	bne.n	17f00 <l2cap_recv+0xa4>
		le_conn_param_rsp(l2cap, buf);
   17e8c:	4621      	mov	r1, r4
   17e8e:	4630      	mov	r0, r6
   17e90:	f7ff feb4 	bl	17bfc <le_conn_param_rsp>
		break;
   17e94:	e00f      	b.n	17eb6 <l2cap_recv+0x5a>
   17e96:	4b26      	ldr	r3, [pc, #152]	; (17f30 <l2cap_recv+0xd4>)
   17e98:	4a26      	ldr	r2, [pc, #152]	; (17f34 <l2cap_recv+0xd8>)
   17e9a:	1a9b      	subs	r3, r3, r2
   17e9c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP signaling PDU");
   17e9e:	f04f 0100 	mov.w	r1, #0
   17ea2:	2201      	movs	r2, #1
   17ea4:	f362 0102 	bfi	r1, r2, #0, #3
   17ea8:	f36f 01c5 	bfc	r1, #3, #3
   17eac:	f363 118f 	bfi	r1, r3, #6, #10
   17eb0:	4821      	ldr	r0, [pc, #132]	; (17f38 <l2cap_recv+0xdc>)
   17eb2:	f7f9 fd7f 	bl	119b4 <log_0>
}
   17eb6:	2000      	movs	r0, #0
   17eb8:	b002      	add	sp, #8
   17eba:	bd70      	pop	{r4, r5, r6, pc}
   17ebc:	481c      	ldr	r0, [pc, #112]	; (17f30 <l2cap_recv+0xd4>)
   17ebe:	4b1d      	ldr	r3, [pc, #116]	; (17f34 <l2cap_recv+0xd8>)
   17ec0:	1ac0      	subs	r0, r0, r3
   17ec2:	08c0      	lsrs	r0, r0, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   17ec4:	f04f 0300 	mov.w	r3, #0
   17ec8:	2401      	movs	r4, #1
   17eca:	f364 0302 	bfi	r3, r4, #0, #3
   17ece:	f36f 03c5 	bfc	r3, #3, #3
   17ed2:	f360 138f 	bfi	r3, r0, #6, #10
   17ed6:	4819      	ldr	r0, [pc, #100]	; (17f3c <l2cap_recv+0xe0>)
   17ed8:	f7f9 fdd2 	bl	11a80 <log_2>
		return 0;
   17edc:	e7eb      	b.n	17eb6 <l2cap_recv+0x5a>
   17ede:	4b14      	ldr	r3, [pc, #80]	; (17f30 <l2cap_recv+0xd4>)
   17ee0:	4a14      	ldr	r2, [pc, #80]	; (17f34 <l2cap_recv+0xd8>)
   17ee2:	1a9b      	subs	r3, r3, r2
   17ee4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid ident value in L2CAP PDU");
   17ee6:	f04f 0100 	mov.w	r1, #0
   17eea:	2201      	movs	r2, #1
   17eec:	f362 0102 	bfi	r1, r2, #0, #3
   17ef0:	f36f 01c5 	bfc	r1, #3, #3
   17ef4:	f363 118f 	bfi	r1, r3, #6, #10
   17ef8:	4811      	ldr	r0, [pc, #68]	; (17f40 <l2cap_recv+0xe4>)
   17efa:	f7f9 fd5b 	bl	119b4 <log_0>
		return 0;
   17efe:	e7da      	b.n	17eb6 <l2cap_recv+0x5a>
   17f00:	4b0b      	ldr	r3, [pc, #44]	; (17f30 <l2cap_recv+0xd4>)
   17f02:	4a0c      	ldr	r2, [pc, #48]	; (17f34 <l2cap_recv+0xd8>)
   17f04:	1a9b      	subs	r3, r3, r2
   17f06:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   17f08:	f04f 0200 	mov.w	r2, #0
   17f0c:	2002      	movs	r0, #2
   17f0e:	f360 0202 	bfi	r2, r0, #0, #3
   17f12:	f36f 02c5 	bfc	r2, #3, #3
   17f16:	f363 128f 	bfi	r2, r3, #6, #10
   17f1a:	480a      	ldr	r0, [pc, #40]	; (17f44 <l2cap_recv+0xe8>)
   17f1c:	f7f9 fd7a 	bl	11a14 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   17f20:	7869      	ldrb	r1, [r5, #1]
   17f22:	2200      	movs	r2, #0
   17f24:	9200      	str	r2, [sp, #0]
   17f26:	4613      	mov	r3, r2
   17f28:	6830      	ldr	r0, [r6, #0]
   17f2a:	f00f fa67 	bl	273fc <l2cap_send_reject>
		break;
   17f2e:	e7c2      	b.n	17eb6 <l2cap_recv+0x5a>
   17f30:	00029da8 	.word	0x00029da8
   17f34:	00029d70 	.word	0x00029d70
   17f38:	0002c090 	.word	0x0002c090
   17f3c:	0002c0b0 	.word	0x0002c0b0
   17f40:	0002c0d4 	.word	0x0002c0d4
   17f44:	0002c0f8 	.word	0x0002c0f8

00017f48 <bt_l2cap_recv>:
{
   17f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f4a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   17f4c:	898b      	ldrh	r3, [r1, #12]
   17f4e:	2b03      	cmp	r3, #3
   17f50:	d911      	bls.n	17f76 <bt_l2cap_recv+0x2e>
   17f52:	4605      	mov	r5, r0
   17f54:	4616      	mov	r6, r2
   17f56:	2104      	movs	r1, #4
   17f58:	f104 0008 	add.w	r0, r4, #8
   17f5c:	f002 fc02 	bl	1a764 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   17f60:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   17f62:	4639      	mov	r1, r7
   17f64:	4628      	mov	r0, r5
   17f66:	f00f fa89 	bl	2747c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17f6a:	b1c0      	cbz	r0, 17f9e <bt_l2cap_recv+0x56>
	l2cap_chan_recv(chan, buf, complete);
   17f6c:	4632      	mov	r2, r6
   17f6e:	4621      	mov	r1, r4
   17f70:	f00f f9b0 	bl	272d4 <l2cap_chan_recv>
}
   17f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17f76:	4b14      	ldr	r3, [pc, #80]	; (17fc8 <bt_l2cap_recv+0x80>)
   17f78:	4a14      	ldr	r2, [pc, #80]	; (17fcc <bt_l2cap_recv+0x84>)
   17f7a:	1a9b      	subs	r3, r3, r2
   17f7c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP PDU received");
   17f7e:	f04f 0100 	mov.w	r1, #0
   17f82:	2201      	movs	r2, #1
   17f84:	f362 0102 	bfi	r1, r2, #0, #3
   17f88:	f36f 01c5 	bfc	r1, #3, #3
   17f8c:	f363 118f 	bfi	r1, r3, #6, #10
   17f90:	480f      	ldr	r0, [pc, #60]	; (17fd0 <bt_l2cap_recv+0x88>)
   17f92:	f7f9 fd0f 	bl	119b4 <log_0>
		net_buf_unref(buf);
   17f96:	4620      	mov	r0, r4
   17f98:	f002 faf8 	bl	1a58c <net_buf_unref>
		return;
   17f9c:	e7ea      	b.n	17f74 <bt_l2cap_recv+0x2c>
   17f9e:	4b0a      	ldr	r3, [pc, #40]	; (17fc8 <bt_l2cap_recv+0x80>)
   17fa0:	4a0a      	ldr	r2, [pc, #40]	; (17fcc <bt_l2cap_recv+0x84>)
   17fa2:	1a9b      	subs	r3, r3, r2
   17fa4:	08db      	lsrs	r3, r3, #3
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   17fa6:	f04f 0200 	mov.w	r2, #0
   17faa:	2102      	movs	r1, #2
   17fac:	f361 0202 	bfi	r2, r1, #0, #3
   17fb0:	f36f 02c5 	bfc	r2, #3, #3
   17fb4:	f363 128f 	bfi	r2, r3, #6, #10
   17fb8:	4639      	mov	r1, r7
   17fba:	4806      	ldr	r0, [pc, #24]	; (17fd4 <bt_l2cap_recv+0x8c>)
   17fbc:	f7f9 fd2a 	bl	11a14 <log_1>
		net_buf_unref(buf);
   17fc0:	4620      	mov	r0, r4
   17fc2:	f002 fae3 	bl	1a58c <net_buf_unref>
		return;
   17fc6:	e7d5      	b.n	17f74 <bt_l2cap_recv+0x2c>
   17fc8:	00029da8 	.word	0x00029da8
   17fcc:	00029d70 	.word	0x00029d70
   17fd0:	0002c118 	.word	0x0002c118
   17fd4:	0002c138 	.word	0x0002c138

00017fd8 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   17fd8:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   17fda:	4b03      	ldr	r3, [pc, #12]	; (17fe8 <att_cfm_sent+0x10>)
   17fdc:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   17fe0:	f00f fa8d 	bl	274fe <att_sent>
}
   17fe4:	bd08      	pop	{r3, pc}
   17fe6:	bf00      	nop
   17fe8:	000277f1 	.word	0x000277f1

00017fec <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   17fec:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   17fee:	4b03      	ldr	r3, [pc, #12]	; (17ffc <att_rsp_sent+0x10>)
   17ff0:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   17ff4:	f00f fa83 	bl	274fe <att_sent>
}
   17ff8:	bd08      	pop	{r3, pc}
   17ffa:	bf00      	nop
   17ffc:	0002780d 	.word	0x0002780d

00018000 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   18000:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   18002:	4b03      	ldr	r3, [pc, #12]	; (18010 <att_req_sent+0x10>)
   18004:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   18008:	f00f fa79 	bl	274fe <att_sent>
}
   1800c:	bd08      	pop	{r3, pc}
   1800e:	bf00      	nop
   18010:	000277d9 	.word	0x000277d9

00018014 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   18014:	4b08      	ldr	r3, [pc, #32]	; (18038 <att_cb+0x24>)
   18016:	4298      	cmp	r0, r3
   18018:	d009      	beq.n	1802e <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   1801a:	4b08      	ldr	r3, [pc, #32]	; (1803c <att_cb+0x28>)
   1801c:	4298      	cmp	r0, r3
   1801e:	d008      	beq.n	18032 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   18020:	4b07      	ldr	r3, [pc, #28]	; (18040 <att_cb+0x2c>)
   18022:	4298      	cmp	r0, r3
   18024:	d001      	beq.n	1802a <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   18026:	4807      	ldr	r0, [pc, #28]	; (18044 <att_cb+0x30>)
	}
}
   18028:	4770      	bx	lr
		return att_req_sent;
   1802a:	4807      	ldr	r0, [pc, #28]	; (18048 <att_cb+0x34>)
   1802c:	4770      	bx	lr
		return att_rsp_sent;
   1802e:	4807      	ldr	r0, [pc, #28]	; (1804c <att_cb+0x38>)
   18030:	4770      	bx	lr
		return att_cfm_sent;
   18032:	4807      	ldr	r0, [pc, #28]	; (18050 <att_cb+0x3c>)
   18034:	4770      	bx	lr
   18036:	bf00      	nop
   18038:	0002780d 	.word	0x0002780d
   1803c:	000277f1 	.word	0x000277f1
   18040:	000277d9 	.word	0x000277d9
   18044:	000274ff 	.word	0x000274ff
   18048:	00018001 	.word	0x00018001
   1804c:	00017fed 	.word	0x00017fed
   18050:	00017fd9 	.word	0x00017fd9

00018054 <chan_cb>:
{
   18054:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   18056:	6883      	ldr	r3, [r0, #8]
   18058:	7818      	ldrb	r0, [r3, #0]
   1805a:	f00f fa99 	bl	27590 <att_op_get_type>
   1805e:	3801      	subs	r0, #1
   18060:	2804      	cmp	r0, #4
   18062:	d808      	bhi.n	18076 <chan_cb+0x22>
   18064:	e8df f000 	tbb	[pc, r0]
   18068:	09070305 	.word	0x09070305
   1806c:	05          	.byte	0x05
   1806d:	00          	.byte	0x00
   1806e:	4804      	ldr	r0, [pc, #16]	; (18080 <chan_cb+0x2c>)
   18070:	e000      	b.n	18074 <chan_cb+0x20>
		return chan_req_sent;
   18072:	4804      	ldr	r0, [pc, #16]	; (18084 <chan_cb+0x30>)
}
   18074:	bd08      	pop	{r3, pc}
		return NULL;
   18076:	2000      	movs	r0, #0
   18078:	e7fc      	b.n	18074 <chan_cb+0x20>
		return chan_cfm_sent;
   1807a:	4803      	ldr	r0, [pc, #12]	; (18088 <chan_cb+0x34>)
   1807c:	e7fa      	b.n	18074 <chan_cb+0x20>
   1807e:	bf00      	nop
   18080:	0002780d 	.word	0x0002780d
   18084:	000277d9 	.word	0x000277d9
   18088:	000277f1 	.word	0x000277f1

0001808c <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1808c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1808e:	7a83      	ldrb	r3, [r0, #10]
   18090:	2b07      	cmp	r3, #7
   18092:	d111      	bne.n	180b8 <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18094:	2104      	movs	r1, #4
   18096:	f00f f9f1 	bl	2747c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1809a:	4604      	mov	r4, r0
   1809c:	b1f0      	cbz	r0, 180dc <att_get+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1809e:	f3bf 8f5b 	dmb	ish
   180a2:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   180a6:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   180aa:	f013 0f04 	tst.w	r3, #4
   180ae:	d126      	bne.n	180fe <att_get+0x72>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   180b0:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   180b4:	4620      	mov	r0, r4
   180b6:	bd10      	pop	{r4, pc}
   180b8:	4b1a      	ldr	r3, [pc, #104]	; (18124 <att_get+0x98>)
   180ba:	4a1b      	ldr	r2, [pc, #108]	; (18128 <att_get+0x9c>)
   180bc:	1a9b      	subs	r3, r3, r2
   180be:	08db      	lsrs	r3, r3, #3
		BT_WARN("Not connected");
   180c0:	f04f 0100 	mov.w	r1, #0
   180c4:	2202      	movs	r2, #2
   180c6:	f362 0102 	bfi	r1, r2, #0, #3
   180ca:	f36f 01c5 	bfc	r1, #3, #3
   180ce:	f363 118f 	bfi	r1, r3, #6, #10
   180d2:	4816      	ldr	r0, [pc, #88]	; (1812c <att_get+0xa0>)
   180d4:	f7f9 fc6e 	bl	119b4 <log_0>
		return NULL;
   180d8:	2400      	movs	r4, #0
   180da:	e7eb      	b.n	180b4 <att_get+0x28>
   180dc:	4b11      	ldr	r3, [pc, #68]	; (18124 <att_get+0x98>)
   180de:	4a12      	ldr	r2, [pc, #72]	; (18128 <att_get+0x9c>)
   180e0:	1a9b      	subs	r3, r3, r2
   180e2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find ATT channel");
   180e4:	f04f 0100 	mov.w	r1, #0
   180e8:	2201      	movs	r2, #1
   180ea:	f362 0102 	bfi	r1, r2, #0, #3
   180ee:	f36f 01c5 	bfc	r1, #3, #3
   180f2:	f363 118f 	bfi	r1, r3, #6, #10
   180f6:	480e      	ldr	r0, [pc, #56]	; (18130 <att_get+0xa4>)
   180f8:	f7f9 fc5c 	bl	119b4 <log_0>
		return NULL;
   180fc:	e7da      	b.n	180b4 <att_get+0x28>
   180fe:	4b09      	ldr	r3, [pc, #36]	; (18124 <att_get+0x98>)
   18100:	4a09      	ldr	r2, [pc, #36]	; (18128 <att_get+0x9c>)
   18102:	1a9b      	subs	r3, r3, r2
   18104:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT channel flagged as disconnected");
   18106:	f04f 0100 	mov.w	r1, #0
   1810a:	2202      	movs	r2, #2
   1810c:	f362 0102 	bfi	r1, r2, #0, #3
   18110:	f36f 01c5 	bfc	r1, #3, #3
   18114:	f363 118f 	bfi	r1, r3, #6, #10
   18118:	4806      	ldr	r0, [pc, #24]	; (18134 <att_get+0xa8>)
   1811a:	f7f9 fc4b 	bl	119b4 <log_0>
		return NULL;
   1811e:	2400      	movs	r4, #0
   18120:	e7c8      	b.n	180b4 <att_get+0x28>
   18122:	bf00      	nop
   18124:	00029d78 	.word	0x00029d78
   18128:	00029d70 	.word	0x00029d70
   1812c:	0002c194 	.word	0x0002c194
   18130:	0002c1a4 	.word	0x0002c1a4
   18134:	0002c1c0 	.word	0x0002c1c0

00018138 <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   18138:	b570      	push	{r4, r5, r6, lr}
   1813a:	b082      	sub	sp, #8
   1813c:	4605      	mov	r5, r0
   1813e:	460e      	mov	r6, r1
	return list->head;
   18140:	6a83      	ldr	r3, [r0, #40]	; 0x28
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18142:	b10b      	cbz	r3, 18148 <att_chan_new+0x10>
   18144:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   18148:	9301      	str	r3, [sp, #4]
	int quota = 0;
   1814a:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1814c:	e014      	b.n	18178 <att_chan_new+0x40>
		if (chan->att == att) {
			quota++;
   1814e:	3101      	adds	r1, #1
   18150:	e017      	b.n	18182 <att_chan_new+0x4a>
   18152:	4b2e      	ldr	r3, [pc, #184]	; (1820c <att_chan_new+0xd4>)
   18154:	4a2e      	ldr	r2, [pc, #184]	; (18210 <att_chan_new+0xd8>)
   18156:	1a9b      	subs	r3, r3, r2
   18158:	08db      	lsrs	r3, r3, #3
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   1815a:	f04f 0200 	mov.w	r2, #0
   1815e:	2001      	movs	r0, #1
   18160:	f360 0202 	bfi	r2, r0, #0, #3
   18164:	f36f 02c5 	bfc	r2, #3, #3
   18168:	f363 128f 	bfi	r2, r3, #6, #10
   1816c:	4829      	ldr	r0, [pc, #164]	; (18214 <att_chan_new+0xdc>)
   1816e:	f7f9 fc51 	bl	11a14 <log_1>
			return NULL;
   18172:	2400      	movs	r4, #0
   18174:	e034      	b.n	181e0 <att_chan_new+0xa8>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18176:	9301      	str	r3, [sp, #4]
   18178:	9c01      	ldr	r4, [sp, #4]
   1817a:	b174      	cbz	r4, 1819a <att_chan_new+0x62>
		if (chan->att == att) {
   1817c:	6823      	ldr	r3, [r4, #0]
   1817e:	42ab      	cmp	r3, r5
   18180:	d0e5      	beq.n	1814e <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   18182:	2901      	cmp	r1, #1
   18184:	d0e5      	beq.n	18152 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18186:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1818a:	d0f4      	beq.n	18176 <att_chan_new+0x3e>
	return node->next;
   1818c:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18190:	2b00      	cmp	r3, #0
   18192:	d0f0      	beq.n	18176 <att_chan_new+0x3e>
   18194:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   18198:	e7ed      	b.n	18176 <att_chan_new+0x3e>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1819a:	2200      	movs	r2, #0
   1819c:	2300      	movs	r3, #0
   1819e:	a901      	add	r1, sp, #4
   181a0:	481d      	ldr	r0, [pc, #116]	; (18218 <att_chan_new+0xe0>)
   181a2:	f006 f967 	bl	1e474 <k_mem_slab_alloc>
   181a6:	b9f0      	cbnz	r0, 181e6 <att_chan_new+0xae>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   181a8:	f44f 72ac 	mov.w	r2, #344	; 0x158
   181ac:	2100      	movs	r1, #0
   181ae:	9801      	ldr	r0, [sp, #4]
   181b0:	f00e fb46 	bl	26840 <memset>
	chan->chan.chan.ops = &ops;
   181b4:	9801      	ldr	r0, [sp, #4]
   181b6:	4b19      	ldr	r3, [pc, #100]	; (1821c <att_chan_new+0xe4>)
   181b8:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   181ba:	f500 7080 	add.w	r0, r0, #256	; 0x100
	z_impl_k_queue_init(queue);
   181be:	f011 fac2 	bl	29746 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   181c2:	9b01      	ldr	r3, [sp, #4]
   181c4:	33f8      	adds	r3, #248	; 0xf8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   181c6:	f3bf 8f5b 	dmb	ish
   181ca:	e853 2f00 	ldrex	r2, [r3]
   181ce:	e843 6100 	strex	r1, r6, [r3]
   181d2:	2900      	cmp	r1, #0
   181d4:	d1f9      	bne.n	181ca <att_chan_new+0x92>
   181d6:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   181da:	9b01      	ldr	r3, [sp, #4]
   181dc:	601d      	str	r5, [r3, #0]

	return chan;
   181de:	9c01      	ldr	r4, [sp, #4]
}
   181e0:	4620      	mov	r0, r4
   181e2:	b002      	add	sp, #8
   181e4:	bd70      	pop	{r4, r5, r6, pc}
   181e6:	4b09      	ldr	r3, [pc, #36]	; (1820c <att_chan_new+0xd4>)
   181e8:	4a09      	ldr	r2, [pc, #36]	; (18210 <att_chan_new+0xd8>)
   181ea:	1a9b      	subs	r3, r3, r2
   181ec:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT channel for conn %p", att->conn);
   181ee:	f04f 0200 	mov.w	r2, #0
   181f2:	2101      	movs	r1, #1
   181f4:	f361 0202 	bfi	r2, r1, #0, #3
   181f8:	f36f 02c5 	bfc	r2, #3, #3
   181fc:	f363 128f 	bfi	r2, r3, #6, #10
   18200:	6829      	ldr	r1, [r5, #0]
   18202:	4807      	ldr	r0, [pc, #28]	; (18220 <att_chan_new+0xe8>)
   18204:	f7f9 fc06 	bl	11a14 <log_1>
		return NULL;
   18208:	e7ea      	b.n	181e0 <att_chan_new+0xa8>
   1820a:	bf00      	nop
   1820c:	00029d78 	.word	0x00029d78
   18210:	00029d70 	.word	0x00029d70
   18214:	0002c1e4 	.word	0x0002c1e4
   18218:	200006f0 	.word	0x200006f0
   1821c:	200004c0 	.word	0x200004c0
   18220:	0002c20c 	.word	0x0002c20c

00018224 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   18224:	b570      	push	{r4, r5, r6, lr}
   18226:	b082      	sub	sp, #8
   18228:	4606      	mov	r6, r0
   1822a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1822c:	2200      	movs	r2, #0
   1822e:	2300      	movs	r3, #0
   18230:	a901      	add	r1, sp, #4
   18232:	4819      	ldr	r0, [pc, #100]	; (18298 <bt_att_accept+0x74>)
   18234:	f006 f91e 	bl	1e474 <k_mem_slab_alloc>
   18238:	b9b0      	cbnz	r0, 18268 <bt_att_accept+0x44>
   1823a:	4605      	mov	r5, r0
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   1823c:	2230      	movs	r2, #48	; 0x30
   1823e:	2100      	movs	r1, #0
   18240:	9801      	ldr	r0, [sp, #4]
   18242:	f00e fafd 	bl	26840 <memset>
	att->conn = conn;
   18246:	9b01      	ldr	r3, [sp, #4]
   18248:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   1824a:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   1824c:	2100      	movs	r1, #0
   1824e:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   18250:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   18252:	6281      	str	r1, [r0, #40]	; 0x28
	list->tail = NULL;
   18254:	62c1      	str	r1, [r0, #44]	; 0x2c
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   18256:	f7ff ff6f 	bl	18138 <att_chan_new>
	if (!chan) {
   1825a:	4603      	mov	r3, r0
   1825c:	b1c0      	cbz	r0, 18290 <bt_att_accept+0x6c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1825e:	3308      	adds	r3, #8
   18260:	6023      	str	r3, [r4, #0]

	return 0;
}
   18262:	4628      	mov	r0, r5
   18264:	b002      	add	sp, #8
   18266:	bd70      	pop	{r4, r5, r6, pc}
   18268:	4b0c      	ldr	r3, [pc, #48]	; (1829c <bt_att_accept+0x78>)
   1826a:	4a0d      	ldr	r2, [pc, #52]	; (182a0 <bt_att_accept+0x7c>)
   1826c:	1a9b      	subs	r3, r3, r2
   1826e:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT context for conn %p", conn);
   18270:	f04f 0200 	mov.w	r2, #0
   18274:	2101      	movs	r1, #1
   18276:	f361 0202 	bfi	r2, r1, #0, #3
   1827a:	f36f 02c5 	bfc	r2, #3, #3
   1827e:	f363 128f 	bfi	r2, r3, #6, #10
   18282:	4631      	mov	r1, r6
   18284:	4807      	ldr	r0, [pc, #28]	; (182a4 <bt_att_accept+0x80>)
   18286:	f7f9 fbc5 	bl	11a14 <log_1>
		return -ENOMEM;
   1828a:	f06f 050b 	mvn.w	r5, #11
   1828e:	e7e8      	b.n	18262 <bt_att_accept+0x3e>
		return -ENOMEM;
   18290:	f06f 050b 	mvn.w	r5, #11
   18294:	e7e5      	b.n	18262 <bt_att_accept+0x3e>
   18296:	bf00      	nop
   18298:	200006d0 	.word	0x200006d0
   1829c:	00029d78 	.word	0x00029d78
   182a0:	00029d70 	.word	0x00029d70
   182a4:	0002c234 	.word	0x0002c234

000182a8 <bt_att_released>:
{
   182a8:	b500      	push	{lr}
   182aa:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   182ac:	3808      	subs	r0, #8
   182ae:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   182b0:	a901      	add	r1, sp, #4
   182b2:	4803      	ldr	r0, [pc, #12]	; (182c0 <bt_att_released+0x18>)
   182b4:	f006 f952 	bl	1e55c <k_mem_slab_free>
}
   182b8:	b003      	add	sp, #12
   182ba:	f85d fb04 	ldr.w	pc, [sp], #4
   182be:	bf00      	nop
   182c0:	200006f0 	.word	0x200006f0

000182c4 <chan_send>:
{
   182c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   182c8:	b083      	sub	sp, #12
   182ca:	4604      	mov	r4, r0
   182cc:	460d      	mov	r5, r1
   182ce:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   182d0:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   182d2:	781b      	ldrb	r3, [r3, #0]
   182d4:	2bd2      	cmp	r3, #210	; 0xd2
   182d6:	d021      	beq.n	1831c <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   182d8:	f105 0008 	add.w	r0, r5, #8
   182dc:	f010 fa5e 	bl	2879c <net_buf_simple_headroom>
   182e0:	b287      	uxth	r7, r0
	state->len = buf->len;
   182e2:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   182e6:	b3a6      	cbz	r6, 18352 <chan_send+0x8e>
   182e8:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   182ec:	f854 8b08 	ldr.w	r8, [r4], #8
   182f0:	4630      	mov	r0, r6
   182f2:	f7ff fe8f 	bl	18014 <att_cb>
   182f6:	4603      	mov	r3, r0
   182f8:	f8d8 0000 	ldr.w	r0, [r8]
   182fc:	9400      	str	r4, [sp, #0]
   182fe:	462a      	mov	r2, r5
   18300:	2104      	movs	r1, #4
   18302:	f00f f866 	bl	273d2 <bt_l2cap_send_cb>
	if (err) {
   18306:	4680      	mov	r8, r0
   18308:	b120      	cbz	r0, 18314 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1830a:	6928      	ldr	r0, [r5, #16]
   1830c:	4438      	add	r0, r7
   1830e:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   18310:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   18314:	4640      	mov	r0, r8
   18316:	b003      	add	sp, #12
   18318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1831c:	6803      	ldr	r3, [r0, #0]
   1831e:	6818      	ldr	r0, [r3, #0]
   18320:	f010 f9dd 	bl	286de <bt_smp_sign>
		if (err) {
   18324:	4680      	mov	r8, r0
   18326:	2800      	cmp	r0, #0
   18328:	d0d6      	beq.n	182d8 <chan_send+0x14>
   1832a:	4b0c      	ldr	r3, [pc, #48]	; (1835c <chan_send+0x98>)
   1832c:	4a0c      	ldr	r2, [pc, #48]	; (18360 <chan_send+0x9c>)
   1832e:	1a9b      	subs	r3, r3, r2
   18330:	08db      	lsrs	r3, r3, #3
			BT_ERR("Error signing data");
   18332:	f04f 0100 	mov.w	r1, #0
   18336:	2201      	movs	r2, #1
   18338:	f362 0102 	bfi	r1, r2, #0, #3
   1833c:	f36f 01c5 	bfc	r1, #3, #3
   18340:	f363 118f 	bfi	r1, r3, #6, #10
   18344:	4807      	ldr	r0, [pc, #28]	; (18364 <chan_send+0xa0>)
   18346:	f7f9 fb35 	bl	119b4 <log_0>
			net_buf_unref(buf);
   1834a:	4628      	mov	r0, r5
   1834c:	f002 f91e 	bl	1a58c <net_buf_unref>
			return err;
   18350:	e7e0      	b.n	18314 <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   18352:	4628      	mov	r0, r5
   18354:	f7ff fe7e 	bl	18054 <chan_cb>
   18358:	4606      	mov	r6, r0
   1835a:	e7c5      	b.n	182e8 <chan_send+0x24>
   1835c:	00029d78 	.word	0x00029d78
   18360:	00029d70 	.word	0x00029d70
   18364:	0002c25c 	.word	0x0002c25c

00018368 <bt_att_chan_req_send>:
{
   18368:	b570      	push	{r4, r5, r6, lr}
   1836a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(chan);
   1836c:	4605      	mov	r5, r0
   1836e:	b1b8      	cbz	r0, 183a0 <bt_att_chan_req_send+0x38>
	__ASSERT_NO_MSG(req);
   18370:	b324      	cbz	r4, 183bc <bt_att_chan_req_send+0x54>
	__ASSERT_NO_MSG(req->func);
   18372:	6863      	ldr	r3, [r4, #4]
   18374:	b383      	cbz	r3, 183d8 <bt_att_chan_req_send+0x70>
	__ASSERT_NO_MSG(!chan->req);
   18376:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
   1837a:	b163      	cbz	r3, 18396 <bt_att_chan_req_send+0x2e>
   1837c:	4e1d      	ldr	r6, [pc, #116]	; (183f4 <bt_att_chan_req_send+0x8c>)
   1837e:	f240 2336 	movw	r3, #566	; 0x236
   18382:	4632      	mov	r2, r6
   18384:	491c      	ldr	r1, [pc, #112]	; (183f8 <bt_att_chan_req_send+0x90>)
   18386:	481d      	ldr	r0, [pc, #116]	; (183fc <bt_att_chan_req_send+0x94>)
   18388:	f00d fa51 	bl	2582e <printk>
   1838c:	f240 2136 	movw	r1, #566	; 0x236
   18390:	4630      	mov	r0, r6
   18392:	f00d fcce 	bl	25d32 <assert_post_action>
	return chan_req_send(chan, req);
   18396:	4621      	mov	r1, r4
   18398:	4628      	mov	r0, r5
   1839a:	f00f f98e 	bl	276ba <chan_req_send>
}
   1839e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(chan);
   183a0:	4e14      	ldr	r6, [pc, #80]	; (183f4 <bt_att_chan_req_send+0x8c>)
   183a2:	f240 2333 	movw	r3, #563	; 0x233
   183a6:	4632      	mov	r2, r6
   183a8:	4915      	ldr	r1, [pc, #84]	; (18400 <bt_att_chan_req_send+0x98>)
   183aa:	4814      	ldr	r0, [pc, #80]	; (183fc <bt_att_chan_req_send+0x94>)
   183ac:	f00d fa3f 	bl	2582e <printk>
   183b0:	f240 2133 	movw	r1, #563	; 0x233
   183b4:	4630      	mov	r0, r6
   183b6:	f00d fcbc 	bl	25d32 <assert_post_action>
   183ba:	e7d9      	b.n	18370 <bt_att_chan_req_send+0x8>
	__ASSERT_NO_MSG(req);
   183bc:	4e0d      	ldr	r6, [pc, #52]	; (183f4 <bt_att_chan_req_send+0x8c>)
   183be:	f44f 730d 	mov.w	r3, #564	; 0x234
   183c2:	4632      	mov	r2, r6
   183c4:	490f      	ldr	r1, [pc, #60]	; (18404 <bt_att_chan_req_send+0x9c>)
   183c6:	480d      	ldr	r0, [pc, #52]	; (183fc <bt_att_chan_req_send+0x94>)
   183c8:	f00d fa31 	bl	2582e <printk>
   183cc:	f44f 710d 	mov.w	r1, #564	; 0x234
   183d0:	4630      	mov	r0, r6
   183d2:	f00d fcae 	bl	25d32 <assert_post_action>
   183d6:	e7cc      	b.n	18372 <bt_att_chan_req_send+0xa>
	__ASSERT_NO_MSG(req->func);
   183d8:	4e06      	ldr	r6, [pc, #24]	; (183f4 <bt_att_chan_req_send+0x8c>)
   183da:	f240 2335 	movw	r3, #565	; 0x235
   183de:	4632      	mov	r2, r6
   183e0:	4909      	ldr	r1, [pc, #36]	; (18408 <bt_att_chan_req_send+0xa0>)
   183e2:	4806      	ldr	r0, [pc, #24]	; (183fc <bt_att_chan_req_send+0x94>)
   183e4:	f00d fa23 	bl	2582e <printk>
   183e8:	f240 2135 	movw	r1, #565	; 0x235
   183ec:	4630      	mov	r0, r6
   183ee:	f00d fca0 	bl	25d32 <assert_post_action>
   183f2:	e7c0      	b.n	18376 <bt_att_chan_req_send+0xe>
   183f4:	0002c270 	.word	0x0002c270
   183f8:	0002c2b8 	.word	0x0002c2b8
   183fc:	00029ff8 	.word	0x00029ff8
   18400:	0002c2a0 	.word	0x0002c2a0
   18404:	0002c2a8 	.word	0x0002c2a8
   18408:	0002c2ac 	.word	0x0002c2ac

0001840c <read_group_cb>:
{
   1840c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1840e:	b085      	sub	sp, #20
   18410:	4605      	mov	r5, r0
   18412:	460e      	mov	r6, r1
   18414:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   18416:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18418:	2300      	movs	r3, #0
   1841a:	f88d 3008 	strb.w	r3, [sp, #8]
   1841e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18422:	f8ad 300a 	strh.w	r3, [sp, #10]
   18426:	a902      	add	r1, sp, #8
   18428:	6800      	ldr	r0, [r0, #0]
   1842a:	f00e fa5a 	bl	268e2 <bt_uuid_cmp>
   1842e:	b158      	cbz	r0, 18448 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18430:	2300      	movs	r3, #0
   18432:	f88d 300c 	strb.w	r3, [sp, #12]
   18436:	f642 0301 	movw	r3, #10241	; 0x2801
   1843a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1843e:	a903      	add	r1, sp, #12
   18440:	6828      	ldr	r0, [r5, #0]
   18442:	f00e fa4e 	bl	268e2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18446:	bb30      	cbnz	r0, 18496 <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18448:	6861      	ldr	r1, [r4, #4]
   1844a:	6828      	ldr	r0, [r5, #0]
   1844c:	f00e fa49 	bl	268e2 <bt_uuid_cmp>
   18450:	bb48      	cbnz	r0, 184a6 <read_group_cb+0x9a>
	if (data->rsp->len &&
   18452:	68e3      	ldr	r3, [r4, #12]
   18454:	781a      	ldrb	r2, [r3, #0]
   18456:	b132      	cbz	r2, 18466 <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18458:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   1845c:	68a1      	ldr	r1, [r4, #8]
   1845e:	8989      	ldrh	r1, [r1, #12]
   18460:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   18462:	4293      	cmp	r3, r2
   18464:	db24      	blt.n	184b0 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   18466:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   18468:	2104      	movs	r1, #4
   1846a:	3008      	adds	r0, #8
   1846c:	f002 f9c0 	bl	1a7f0 <net_buf_simple_add>
   18470:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18472:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18474:	6923      	ldr	r3, [r4, #16]
   18476:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18478:	9401      	str	r4, [sp, #4]
   1847a:	4b10      	ldr	r3, [pc, #64]	; (184bc <read_group_cb+0xb0>)
   1847c:	9300      	str	r3, [sp, #0]
   1847e:	2300      	movs	r3, #0
   18480:	68a2      	ldr	r2, [r4, #8]
   18482:	4629      	mov	r1, r5
   18484:	4638      	mov	r0, r7
   18486:	f00f faa4 	bl	279d2 <att_chan_read>
	if (read < 0) {
   1848a:	2800      	cmp	r0, #0
   1848c:	db12      	blt.n	184b4 <read_group_cb+0xa8>
	if (!data->group) {
   1848e:	6923      	ldr	r3, [r4, #16]
   18490:	b193      	cbz	r3, 184b8 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   18492:	2001      	movs	r0, #1
   18494:	e00a      	b.n	184ac <read_group_cb+0xa0>
		if (data->group &&
   18496:	6923      	ldr	r3, [r4, #16]
   18498:	b11b      	cbz	r3, 184a2 <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1849a:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1849c:	42b2      	cmp	r2, r6
   1849e:	d200      	bcs.n	184a2 <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   184a0:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   184a2:	2001      	movs	r0, #1
   184a4:	e002      	b.n	184ac <read_group_cb+0xa0>
		data->group = NULL;
   184a6:	2300      	movs	r3, #0
   184a8:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   184aa:	2001      	movs	r0, #1
}
   184ac:	b005      	add	sp, #20
   184ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   184b0:	2000      	movs	r0, #0
   184b2:	e7fb      	b.n	184ac <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   184b4:	2000      	movs	r0, #0
   184b6:	e7f9      	b.n	184ac <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   184b8:	2000      	movs	r0, #0
   184ba:	e7f7      	b.n	184ac <read_group_cb+0xa0>
   184bc:	00027563 	.word	0x00027563

000184c0 <read_type_cb>:
{
   184c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   184c4:	b083      	sub	sp, #12
   184c6:	4606      	mov	r6, r0
   184c8:	4688      	mov	r8, r1
   184ca:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   184cc:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   184ce:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   184d0:	6851      	ldr	r1, [r2, #4]
   184d2:	6800      	ldr	r0, [r0, #0]
   184d4:	f00e fa05 	bl	268e2 <bt_uuid_cmp>
   184d8:	b120      	cbz	r0, 184e4 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   184da:	2501      	movs	r5, #1
}
   184dc:	4628      	mov	r0, r5
   184de:	b003      	add	sp, #12
   184e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   184e4:	2215      	movs	r2, #21
   184e6:	4631      	mov	r1, r6
   184e8:	4628      	mov	r0, r5
   184ea:	f010 f857 	bl	2859c <bt_gatt_check_perm>
   184ee:	4605      	mov	r5, r0
   184f0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   184f2:	b130      	cbz	r0, 18502 <read_type_cb+0x42>
		if (data->rsp->len) {
   184f4:	68e3      	ldr	r3, [r4, #12]
   184f6:	781b      	ldrb	r3, [r3, #0]
   184f8:	b10b      	cbz	r3, 184fe <read_type_cb+0x3e>
			data->err = 0x00;
   184fa:	2300      	movs	r3, #0
   184fc:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   184fe:	2500      	movs	r5, #0
   18500:	e7ec      	b.n	184dc <read_type_cb+0x1c>
	data->err = 0x00;
   18502:	f04f 0900 	mov.w	r9, #0
   18506:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1850a:	68a0      	ldr	r0, [r4, #8]
   1850c:	f002 f894 	bl	1a638 <net_buf_frag_last>
   18510:	2102      	movs	r1, #2
   18512:	3008      	adds	r0, #8
   18514:	f002 f96c 	bl	1a7f0 <net_buf_simple_add>
   18518:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1851a:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1851e:	9401      	str	r4, [sp, #4]
   18520:	4b11      	ldr	r3, [pc, #68]	; (18568 <read_type_cb+0xa8>)
   18522:	9300      	str	r3, [sp, #0]
   18524:	464b      	mov	r3, r9
   18526:	68a2      	ldr	r2, [r4, #8]
   18528:	4631      	mov	r1, r6
   1852a:	4638      	mov	r0, r7
   1852c:	f00f fa51 	bl	279d2 <att_chan_read>
	if (read < 0) {
   18530:	2800      	cmp	r0, #0
   18532:	db07      	blt.n	18544 <read_type_cb+0x84>
	if (!data->item) {
   18534:	6923      	ldr	r3, [r4, #16]
   18536:	2b00      	cmp	r3, #0
   18538:	d0d0      	beq.n	184dc <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1853a:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   1853e:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   18540:	2200      	movs	r2, #0

	while (buf) {
   18542:	e006      	b.n	18552 <read_type_cb+0x92>
		data->err = err_to_att(read);
   18544:	f00e fff1 	bl	2752a <err_to_att>
   18548:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1854a:	e7c7      	b.n	184dc <read_type_cb+0x1c>
		bytes += buf->len;
   1854c:	8999      	ldrh	r1, [r3, #12]
   1854e:	440a      	add	r2, r1
		buf = buf->frags;
   18550:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   18552:	2b00      	cmp	r3, #0
   18554:	d1fa      	bne.n	1854c <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18556:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18558:	68e3      	ldr	r3, [r4, #12]
   1855a:	781d      	ldrb	r5, [r3, #0]
   1855c:	42aa      	cmp	r2, r5
   1855e:	bf94      	ite	ls
   18560:	2500      	movls	r5, #0
   18562:	2501      	movhi	r5, #1
   18564:	e7ba      	b.n	184dc <read_type_cb+0x1c>
   18566:	bf00      	nop
   18568:	0002753b 	.word	0x0002753b

0001856c <find_type_cb>:
{
   1856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18570:	b093      	sub	sp, #76	; 0x4c
   18572:	4606      	mov	r6, r0
   18574:	460f      	mov	r7, r1
   18576:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   18578:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1857c:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18580:	2300      	movs	r3, #0
   18582:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   18586:	f642 0301 	movw	r3, #10241	; 0x2801
   1858a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   1858e:	a910      	add	r1, sp, #64	; 0x40
   18590:	6800      	ldr	r0, [r0, #0]
   18592:	f00e f9a6 	bl	268e2 <bt_uuid_cmp>
   18596:	b928      	cbnz	r0, 185a4 <find_type_cb+0x38>
	data->group = NULL;
   18598:	2300      	movs	r3, #0
   1859a:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   1859c:	2001      	movs	r0, #1
}
   1859e:	b013      	add	sp, #76	; 0x4c
   185a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   185a4:	2300      	movs	r3, #0
   185a6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   185aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   185ae:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   185b2:	a911      	add	r1, sp, #68	; 0x44
   185b4:	6830      	ldr	r0, [r6, #0]
   185b6:	f00e f994 	bl	268e2 <bt_uuid_cmp>
   185ba:	b928      	cbnz	r0, 185c8 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   185bc:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   185c0:	6868      	ldr	r0, [r5, #4]
   185c2:	4603      	mov	r3, r0
	size_t bytes = 0;
   185c4:	2400      	movs	r4, #0
	while (buf) {
   185c6:	e00a      	b.n	185de <find_type_cb+0x72>
		if (data->group &&
   185c8:	68ab      	ldr	r3, [r5, #8]
   185ca:	b11b      	cbz	r3, 185d4 <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   185cc:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   185ce:	42ba      	cmp	r2, r7
   185d0:	d200      	bcs.n	185d4 <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   185d2:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   185d4:	2001      	movs	r0, #1
   185d6:	e7e2      	b.n	1859e <find_type_cb+0x32>
		bytes += buf->len;
   185d8:	899a      	ldrh	r2, [r3, #12]
   185da:	4414      	add	r4, r2
		buf = buf->frags;
   185dc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   185de:	2b00      	cmp	r3, #0
   185e0:	d1fa      	bne.n	185d8 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   185e2:	1b0c      	subs	r4, r1, r4
   185e4:	2c03      	cmp	r4, #3
   185e6:	d801      	bhi.n	185ec <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   185e8:	2000      	movs	r0, #0
   185ea:	e7d8      	b.n	1859e <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   185ec:	f002 f824 	bl	1a638 <net_buf_frag_last>
   185f0:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   185f2:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   185f6:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   185f8:	2200      	movs	r2, #0
	while (buf) {
   185fa:	b11b      	cbz	r3, 18604 <find_type_cb+0x98>
		bytes += buf->len;
   185fc:	8999      	ldrh	r1, [r3, #12]
   185fe:	440a      	add	r2, r1
		buf = buf->frags;
   18600:	681b      	ldr	r3, [r3, #0]
   18602:	e7fa      	b.n	185fa <find_type_cb+0x8e>
   18604:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   18608:	f104 0b08 	add.w	fp, r4, #8
   1860c:	4658      	mov	r0, fp
   1860e:	f010 f8c9 	bl	287a4 <net_buf_simple_tailroom>
   18612:	4582      	cmp	sl, r0
   18614:	d22b      	bcs.n	1866e <find_type_cb+0x102>
   18616:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   1861a:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   1861c:	2200      	movs	r2, #0
	while (buf) {
   1861e:	e002      	b.n	18626 <find_type_cb+0xba>
		bytes += buf->len;
   18620:	8999      	ldrh	r1, [r3, #12]
   18622:	440a      	add	r2, r1
		buf = buf->frags;
   18624:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   18626:	2b00      	cmp	r3, #0
   18628:	d1fa      	bne.n	18620 <find_type_cb+0xb4>
   1862a:	1a80      	subs	r0, r0, r2
	if (!len) {
   1862c:	b318      	cbz	r0, 18676 <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1862e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   18632:	2300      	movs	r3, #0
   18634:	9300      	str	r3, [sp, #0]
   18636:	2310      	movs	r3, #16
   18638:	aa0c      	add	r2, sp, #48	; 0x30
   1863a:	4631      	mov	r1, r6
   1863c:	4648      	mov	r0, r9
   1863e:	47c0      	blx	r8
	if (read < 0) {
   18640:	1e06      	subs	r6, r0, #0
   18642:	dba9      	blt.n	18598 <find_type_cb+0x2c>
	if (read != data->value_len) {
   18644:	7c2a      	ldrb	r2, [r5, #16]
   18646:	42b2      	cmp	r2, r6
   18648:	d049      	beq.n	186de <find_type_cb+0x172>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1864a:	68e9      	ldr	r1, [r5, #12]
   1864c:	a807      	add	r0, sp, #28
   1864e:	f00e f966 	bl	2691e <bt_uuid_create>
   18652:	b300      	cbz	r0, 18696 <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18654:	b2f2      	uxtb	r2, r6
   18656:	a90c      	add	r1, sp, #48	; 0x30
   18658:	a802      	add	r0, sp, #8
   1865a:	f00e f960 	bl	2691e <bt_uuid_create>
   1865e:	b360      	cbz	r0, 186ba <find_type_cb+0x14e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18660:	a902      	add	r1, sp, #8
   18662:	a807      	add	r0, sp, #28
   18664:	f00e f93d 	bl	268e2 <bt_uuid_cmp>
   18668:	2800      	cmp	r0, #0
   1866a:	d040      	beq.n	186ee <find_type_cb+0x182>
   1866c:	e794      	b.n	18598 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   1866e:	4658      	mov	r0, fp
   18670:	f010 f898 	bl	287a4 <net_buf_simple_tailroom>
   18674:	e7da      	b.n	1862c <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18676:	686b      	ldr	r3, [r5, #4]
   18678:	7998      	ldrb	r0, [r3, #6]
   1867a:	f001 fd91 	bl	1a1a0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1867e:	2200      	movs	r2, #0
   18680:	2300      	movs	r3, #0
   18682:	f010 f87c 	bl	2877e <net_buf_alloc_fixed>
		if (!frag) {
   18686:	4604      	mov	r4, r0
   18688:	2800      	cmp	r0, #0
   1868a:	d088      	beq.n	1859e <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   1868c:	4601      	mov	r1, r0
   1868e:	6868      	ldr	r0, [r5, #4]
   18690:	f002 f820 	bl	1a6d4 <net_buf_frag_add>
   18694:	e7cb      	b.n	1862e <find_type_cb+0xc2>
   18696:	4b1c      	ldr	r3, [pc, #112]	; (18708 <find_type_cb+0x19c>)
   18698:	4a1c      	ldr	r2, [pc, #112]	; (1870c <find_type_cb+0x1a0>)
   1869a:	1a9b      	subs	r3, r3, r2
   1869c:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1869e:	f04f 0200 	mov.w	r2, #0
   186a2:	2102      	movs	r1, #2
   186a4:	f361 0202 	bfi	r2, r1, #0, #3
   186a8:	f36f 02c5 	bfc	r2, #3, #3
   186ac:	f363 128f 	bfi	r2, r3, #6, #10
   186b0:	7c29      	ldrb	r1, [r5, #16]
   186b2:	4817      	ldr	r0, [pc, #92]	; (18710 <find_type_cb+0x1a4>)
   186b4:	f7f9 f9ae 	bl	11a14 <log_1>
			goto skip;
   186b8:	e76e      	b.n	18598 <find_type_cb+0x2c>
   186ba:	4b13      	ldr	r3, [pc, #76]	; (18708 <find_type_cb+0x19c>)
   186bc:	4a13      	ldr	r2, [pc, #76]	; (1870c <find_type_cb+0x1a0>)
   186be:	1a9b      	subs	r3, r3, r2
   186c0:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %d", read);
   186c2:	f04f 0200 	mov.w	r2, #0
   186c6:	2102      	movs	r1, #2
   186c8:	f361 0202 	bfi	r2, r1, #0, #3
   186cc:	f36f 02c5 	bfc	r2, #3, #3
   186d0:	f363 128f 	bfi	r2, r3, #6, #10
   186d4:	4631      	mov	r1, r6
   186d6:	480f      	ldr	r0, [pc, #60]	; (18714 <find_type_cb+0x1a8>)
   186d8:	f7f9 f99c 	bl	11a14 <log_1>
			goto skip;
   186dc:	e75c      	b.n	18598 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   186de:	4632      	mov	r2, r6
   186e0:	a90c      	add	r1, sp, #48	; 0x30
   186e2:	68e8      	ldr	r0, [r5, #12]
   186e4:	f00e f85b 	bl	2679e <memcmp>
   186e8:	2800      	cmp	r0, #0
   186ea:	f47f af55 	bne.w	18598 <find_type_cb+0x2c>
	data->err = 0x00;
   186ee:	2300      	movs	r3, #0
   186f0:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   186f2:	2104      	movs	r1, #4
   186f4:	f104 0008 	add.w	r0, r4, #8
   186f8:	f002 f87a 	bl	1a7f0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   186fc:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   186fe:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18700:	68ab      	ldr	r3, [r5, #8]
   18702:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18704:	2001      	movs	r0, #1
   18706:	e74a      	b.n	1859e <find_type_cb+0x32>
   18708:	00029d78 	.word	0x00029d78
   1870c:	00029d70 	.word	0x00029d70
   18710:	0002c2c4 	.word	0x0002c2c4
   18714:	0002c2e4 	.word	0x0002c2e4

00018718 <att_get_fixed_chan>:
{
   18718:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1871a:	2104      	movs	r1, #4
   1871c:	f00e fe9b 	bl	27456 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   18720:	4604      	mov	r4, r0
   18722:	b110      	cbz	r0, 1872a <att_get_fixed_chan+0x12>
}
   18724:	f1a4 0008 	sub.w	r0, r4, #8
   18728:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(chan, "No ATT channel found");
   1872a:	4d08      	ldr	r5, [pc, #32]	; (1874c <att_get_fixed_chan+0x34>)
   1872c:	f640 2381 	movw	r3, #2689	; 0xa81
   18730:	462a      	mov	r2, r5
   18732:	4907      	ldr	r1, [pc, #28]	; (18750 <att_get_fixed_chan+0x38>)
   18734:	4807      	ldr	r0, [pc, #28]	; (18754 <att_get_fixed_chan+0x3c>)
   18736:	f00d f87a 	bl	2582e <printk>
   1873a:	4807      	ldr	r0, [pc, #28]	; (18758 <att_get_fixed_chan+0x40>)
   1873c:	f00d f877 	bl	2582e <printk>
   18740:	f640 2181 	movw	r1, #2689	; 0xa81
   18744:	4628      	mov	r0, r5
   18746:	f00d faf4 	bl	25d32 <assert_post_action>
   1874a:	e7eb      	b.n	18724 <att_get_fixed_chan+0xc>
   1874c:	0002c270 	.word	0x0002c270
   18750:	0002c2a0 	.word	0x0002c2a0
   18754:	00029ff8 	.word	0x00029ff8
   18758:	0002c304 	.word	0x0002c304

0001875c <bt_att_connected>:
{
   1875c:	b538      	push	{r3, r4, r5, lr}
   1875e:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   18760:	4605      	mov	r5, r0
   18762:	f855 0908 	ldr.w	r0, [r5], #-8
   18766:	f7ff ffd7 	bl	18718 <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   1876a:	4629      	mov	r1, r5
   1876c:	6800      	ldr	r0, [r0, #0]
   1876e:	f00e ff90 	bl	27692 <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18772:	f3bf 8f5b 	dmb	ish
   18776:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1877a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1877e:	f013 0f08 	tst.w	r3, #8
   18782:	d104      	bne.n	1878e <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18784:	2317      	movs	r3, #23
   18786:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1878a:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   1878e:	4628      	mov	r0, r5
   18790:	f00f fa4a 	bl	27c28 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18794:	4902      	ldr	r1, [pc, #8]	; (187a0 <bt_att_connected+0x44>)
   18796:	f504 708c 	add.w	r0, r4, #280	; 0x118
   1879a:	f007 f9a3 	bl	1fae4 <k_work_init_delayable>
}
   1879e:	bd38      	pop	{r3, r4, r5, pc}
   187a0:	000190dd 	.word	0x000190dd

000187a4 <bt_att_chan_create_pdu>:
{
   187a4:	b538      	push	{r3, r4, r5, lr}
   187a6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   187a8:	3201      	adds	r2, #1
   187aa:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   187ae:	428a      	cmp	r2, r1
   187b0:	d810      	bhi.n	187d4 <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
   187b2:	4628      	mov	r0, r5
   187b4:	f00e feec 	bl	27590 <att_op_get_type>
   187b8:	2802      	cmp	r0, #2
   187ba:	d01d      	beq.n	187f8 <bt_att_chan_create_pdu+0x54>
   187bc:	2804      	cmp	r0, #4
   187be:	d01b      	beq.n	187f8 <bt_att_chan_create_pdu+0x54>
		buf = bt_l2cap_create_pdu(NULL, 0);
   187c0:	f04f 32ff 	mov.w	r2, #4294967295
   187c4:	f04f 33ff 	mov.w	r3, #4294967295
   187c8:	2100      	movs	r1, #0
   187ca:	4608      	mov	r0, r1
   187cc:	f00e fdfc 	bl	273c8 <bt_l2cap_create_pdu_timeout>
   187d0:	4604      	mov	r4, r0
   187d2:	e019      	b.n	18808 <bt_att_chan_create_pdu+0x64>
   187d4:	481a      	ldr	r0, [pc, #104]	; (18840 <bt_att_chan_create_pdu+0x9c>)
   187d6:	4b1b      	ldr	r3, [pc, #108]	; (18844 <bt_att_chan_create_pdu+0xa0>)
   187d8:	1ac0      	subs	r0, r0, r3
   187da:	08c0      	lsrs	r0, r0, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   187dc:	f04f 0300 	mov.w	r3, #0
   187e0:	2402      	movs	r4, #2
   187e2:	f364 0302 	bfi	r3, r4, #0, #3
   187e6:	f36f 03c5 	bfc	r3, #3, #3
   187ea:	f360 138f 	bfi	r3, r0, #6, #10
   187ee:	4816      	ldr	r0, [pc, #88]	; (18848 <bt_att_chan_create_pdu+0xa4>)
   187f0:	f7f9 f946 	bl	11a80 <log_2>
		return NULL;
   187f4:	2400      	movs	r4, #0
   187f6:	e00e      	b.n	18816 <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   187f8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   187fc:	2300      	movs	r3, #0
   187fe:	2100      	movs	r1, #0
   18800:	4608      	mov	r0, r1
   18802:	f00e fde1 	bl	273c8 <bt_l2cap_create_pdu_timeout>
   18806:	4604      	mov	r4, r0
	if (!buf) {
   18808:	b13c      	cbz	r4, 1881a <bt_att_chan_create_pdu+0x76>
   1880a:	2101      	movs	r1, #1
   1880c:	f104 0008 	add.w	r0, r4, #8
   18810:	f001 ffee 	bl	1a7f0 <net_buf_simple_add>
	hdr->code = op;
   18814:	7005      	strb	r5, [r0, #0]
}
   18816:	4620      	mov	r0, r4
   18818:	bd38      	pop	{r3, r4, r5, pc}
   1881a:	4b09      	ldr	r3, [pc, #36]	; (18840 <bt_att_chan_create_pdu+0x9c>)
   1881c:	4a09      	ldr	r2, [pc, #36]	; (18844 <bt_att_chan_create_pdu+0xa0>)
   1881e:	1a9b      	subs	r3, r3, r2
   18820:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   18822:	f04f 0200 	mov.w	r2, #0
   18826:	2101      	movs	r1, #1
   18828:	f361 0202 	bfi	r2, r1, #0, #3
   1882c:	f36f 02c5 	bfc	r2, #3, #3
   18830:	f363 128f 	bfi	r2, r3, #6, #10
   18834:	4629      	mov	r1, r5
   18836:	4805      	ldr	r0, [pc, #20]	; (1884c <bt_att_chan_create_pdu+0xa8>)
   18838:	f7f9 f8ec 	bl	11a14 <log_1>
		return NULL;
   1883c:	e7eb      	b.n	18816 <bt_att_chan_create_pdu+0x72>
   1883e:	bf00      	nop
   18840:	00029d78 	.word	0x00029d78
   18844:	00029d70 	.word	0x00029d70
   18848:	0002c31c 	.word	0x0002c31c
   1884c:	0002c068 	.word	0x0002c068

00018850 <send_err_rsp>:
	if (!req) {
   18850:	b901      	cbnz	r1, 18854 <send_err_rsp+0x4>
   18852:	4770      	bx	lr
{
   18854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18858:	4606      	mov	r6, r0
   1885a:	4615      	mov	r5, r2
   1885c:	461c      	mov	r4, r3
   1885e:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   18860:	2204      	movs	r2, #4
   18862:	2101      	movs	r1, #1
   18864:	f7ff ff9e 	bl	187a4 <bt_att_chan_create_pdu>
	if (!buf) {
   18868:	4680      	mov	r8, r0
   1886a:	b160      	cbz	r0, 18886 <send_err_rsp+0x36>
   1886c:	2104      	movs	r1, #4
   1886e:	3008      	adds	r0, #8
   18870:	f001 ffbe 	bl	1a7f0 <net_buf_simple_add>
	rsp->request = req;
   18874:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   18876:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   1887a:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1887c:	4a03      	ldr	r2, [pc, #12]	; (1888c <send_err_rsp+0x3c>)
   1887e:	4641      	mov	r1, r8
   18880:	4630      	mov	r0, r6
   18882:	f00f f899 	bl	279b8 <bt_att_chan_send_rsp>
}
   18886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1888a:	bf00      	nop
   1888c:	0002780d 	.word	0x0002780d

00018890 <bt_att_recv>:
{
   18890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   18894:	898b      	ldrh	r3, [r1, #12]
   18896:	b1bb      	cbz	r3, 188c8 <bt_att_recv+0x38>
   18898:	4607      	mov	r7, r0
   1889a:	460e      	mov	r6, r1
   1889c:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   188a0:	2101      	movs	r1, #1
   188a2:	f106 0008 	add.w	r0, r6, #8
   188a6:	f001 ff5d 	bl	1a764 <net_buf_simple_pull_mem>
   188aa:	4605      	mov	r5, r0
	if (!att_chan->att) {
   188ac:	f857 3c08 	ldr.w	r3, [r7, #-8]
   188b0:	b1d3      	cbz	r3, 188e8 <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   188b2:	2300      	movs	r3, #0
   188b4:	2b0c      	cmp	r3, #12
   188b6:	d81e      	bhi.n	188f6 <bt_att_recv+0x66>
		if (hdr->code == handlers[i].op) {
   188b8:	782c      	ldrb	r4, [r5, #0]
   188ba:	4a58      	ldr	r2, [pc, #352]	; (18a1c <bt_att_recv+0x18c>)
   188bc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   188c0:	4294      	cmp	r4, r2
   188c2:	d014      	beq.n	188ee <bt_att_recv+0x5e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   188c4:	3301      	adds	r3, #1
   188c6:	e7f5      	b.n	188b4 <bt_att_recv+0x24>
   188c8:	4b55      	ldr	r3, [pc, #340]	; (18a20 <bt_att_recv+0x190>)
   188ca:	4a56      	ldr	r2, [pc, #344]	; (18a24 <bt_att_recv+0x194>)
   188cc:	1a9b      	subs	r3, r3, r2
   188ce:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small ATT PDU received");
   188d0:	f04f 0100 	mov.w	r1, #0
   188d4:	2201      	movs	r2, #1
   188d6:	f362 0102 	bfi	r1, r2, #0, #3
   188da:	f36f 01c5 	bfc	r1, #3, #3
   188de:	f363 118f 	bfi	r1, r3, #6, #10
   188e2:	4851      	ldr	r0, [pc, #324]	; (18a28 <bt_att_recv+0x198>)
   188e4:	f7f9 f866 	bl	119b4 <log_0>
}
   188e8:	2000      	movs	r0, #0
   188ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   188ee:	4c4b      	ldr	r4, [pc, #300]	; (18a1c <bt_att_recv+0x18c>)
   188f0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
   188f4:	e000      	b.n	188f8 <bt_att_recv+0x68>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   188f6:	2400      	movs	r4, #0
	if (!handler) {
   188f8:	b1cc      	cbz	r4, 1892e <bt_att_recv+0x9e>
		if (handler->type == ATT_REQUEST &&
   188fa:	78a3      	ldrb	r3, [r4, #2]
   188fc:	2b01      	cmp	r3, #1
   188fe:	d036      	beq.n	1896e <bt_att_recv+0xde>
		} else if (handler->type == ATT_INDICATION &&
   18900:	78a3      	ldrb	r3, [r4, #2]
   18902:	2b05      	cmp	r3, #5
   18904:	d055      	beq.n	189b2 <bt_att_recv+0x122>
	if (buf->len < handler->expect_len) {
   18906:	89b1      	ldrh	r1, [r6, #12]
   18908:	7863      	ldrb	r3, [r4, #1]
   1890a:	4299      	cmp	r1, r3
   1890c:	d372      	bcc.n	189f4 <bt_att_recv+0x164>
		err = handler->func(att_chan, buf);
   1890e:	6863      	ldr	r3, [r4, #4]
   18910:	4631      	mov	r1, r6
   18912:	4640      	mov	r0, r8
   18914:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   18916:	78a3      	ldrb	r3, [r4, #2]
   18918:	2b01      	cmp	r3, #1
   1891a:	d1e5      	bne.n	188e8 <bt_att_recv+0x58>
   1891c:	2800      	cmp	r0, #0
   1891e:	d0e3      	beq.n	188e8 <bt_att_recv+0x58>
		send_err_rsp(att_chan, hdr->code, 0, err);
   18920:	4603      	mov	r3, r0
   18922:	2200      	movs	r2, #0
   18924:	7829      	ldrb	r1, [r5, #0]
   18926:	4640      	mov	r0, r8
   18928:	f7ff ff92 	bl	18850 <send_err_rsp>
   1892c:	e7dc      	b.n	188e8 <bt_att_recv+0x58>
   1892e:	4b3c      	ldr	r3, [pc, #240]	; (18a20 <bt_att_recv+0x190>)
   18930:	4a3c      	ldr	r2, [pc, #240]	; (18a24 <bt_att_recv+0x194>)
   18932:	1a9b      	subs	r3, r3, r2
   18934:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   18936:	f04f 0200 	mov.w	r2, #0
   1893a:	2102      	movs	r1, #2
   1893c:	f361 0202 	bfi	r2, r1, #0, #3
   18940:	f36f 02c5 	bfc	r2, #3, #3
   18944:	f363 128f 	bfi	r2, r3, #6, #10
   18948:	7829      	ldrb	r1, [r5, #0]
   1894a:	4838      	ldr	r0, [pc, #224]	; (18a2c <bt_att_recv+0x19c>)
   1894c:	f7f9 f862 	bl	11a14 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   18950:	782c      	ldrb	r4, [r5, #0]
   18952:	4620      	mov	r0, r4
   18954:	f00e fe1c 	bl	27590 <att_op_get_type>
   18958:	2800      	cmp	r0, #0
   1895a:	d0c5      	beq.n	188e8 <bt_att_recv+0x58>
   1895c:	2805      	cmp	r0, #5
   1895e:	d0c3      	beq.n	188e8 <bt_att_recv+0x58>
			send_err_rsp(att_chan, hdr->code, 0,
   18960:	2306      	movs	r3, #6
   18962:	2200      	movs	r2, #0
   18964:	4621      	mov	r1, r4
   18966:	4640      	mov	r0, r8
   18968:	f7ff ff72 	bl	18850 <send_err_rsp>
		return 0;
   1896c:	e7bc      	b.n	188e8 <bt_att_recv+0x58>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1896e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18972:	f3bf 8f5b 	dmb	ish
   18976:	e853 2f00 	ldrex	r2, [r3]
   1897a:	f042 0101 	orr.w	r1, r2, #1
   1897e:	e843 1000 	strex	r0, r1, [r3]
   18982:	2800      	cmp	r0, #0
   18984:	d1f7      	bne.n	18976 <bt_att_recv+0xe6>
   18986:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   1898a:	f012 0f01 	tst.w	r2, #1
   1898e:	d0b7      	beq.n	18900 <bt_att_recv+0x70>
   18990:	4b23      	ldr	r3, [pc, #140]	; (18a20 <bt_att_recv+0x190>)
   18992:	4a24      	ldr	r2, [pc, #144]	; (18a24 <bt_att_recv+0x194>)
   18994:	1a9b      	subs	r3, r3, r2
   18996:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected request");
   18998:	f04f 0100 	mov.w	r1, #0
   1899c:	2202      	movs	r2, #2
   1899e:	f362 0102 	bfi	r1, r2, #0, #3
   189a2:	f36f 01c5 	bfc	r1, #3, #3
   189a6:	f363 118f 	bfi	r1, r3, #6, #10
   189aa:	4821      	ldr	r0, [pc, #132]	; (18a30 <bt_att_recv+0x1a0>)
   189ac:	f7f9 f802 	bl	119b4 <log_0>
			return 0;
   189b0:	e79a      	b.n	188e8 <bt_att_recv+0x58>
			   atomic_test_and_set_bit(att_chan->flags,
   189b2:	37f0      	adds	r7, #240	; 0xf0
   189b4:	f3bf 8f5b 	dmb	ish
   189b8:	e857 3f00 	ldrex	r3, [r7]
   189bc:	f043 0202 	orr.w	r2, r3, #2
   189c0:	e847 2100 	strex	r1, r2, [r7]
   189c4:	2900      	cmp	r1, #0
   189c6:	d1f7      	bne.n	189b8 <bt_att_recv+0x128>
   189c8:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   189cc:	f013 0f02 	tst.w	r3, #2
   189d0:	d099      	beq.n	18906 <bt_att_recv+0x76>
   189d2:	4b13      	ldr	r3, [pc, #76]	; (18a20 <bt_att_recv+0x190>)
   189d4:	4a13      	ldr	r2, [pc, #76]	; (18a24 <bt_att_recv+0x194>)
   189d6:	1a9b      	subs	r3, r3, r2
   189d8:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected indication");
   189da:	f04f 0100 	mov.w	r1, #0
   189de:	2202      	movs	r2, #2
   189e0:	f362 0102 	bfi	r1, r2, #0, #3
   189e4:	f36f 01c5 	bfc	r1, #3, #3
   189e8:	f363 118f 	bfi	r1, r3, #6, #10
   189ec:	4811      	ldr	r0, [pc, #68]	; (18a34 <bt_att_recv+0x1a4>)
   189ee:	f7f8 ffe1 	bl	119b4 <log_0>
			return 0;
   189f2:	e779      	b.n	188e8 <bt_att_recv+0x58>
   189f4:	4a0a      	ldr	r2, [pc, #40]	; (18a20 <bt_att_recv+0x190>)
   189f6:	4b0b      	ldr	r3, [pc, #44]	; (18a24 <bt_att_recv+0x194>)
   189f8:	1ad2      	subs	r2, r2, r3
   189fa:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   189fc:	f04f 0300 	mov.w	r3, #0
   18a00:	2001      	movs	r0, #1
   18a02:	f360 0302 	bfi	r3, r0, #0, #3
   18a06:	f36f 03c5 	bfc	r3, #3, #3
   18a0a:	f362 138f 	bfi	r3, r2, #6, #10
   18a0e:	782a      	ldrb	r2, [r5, #0]
   18a10:	4809      	ldr	r0, [pc, #36]	; (18a38 <bt_att_recv+0x1a8>)
   18a12:	f7f9 f835 	bl	11a80 <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
   18a16:	2004      	movs	r0, #4
   18a18:	e77d      	b.n	18916 <bt_att_recv+0x86>
   18a1a:	bf00      	nop
   18a1c:	0002c428 	.word	0x0002c428
   18a20:	00029d78 	.word	0x00029d78
   18a24:	00029d70 	.word	0x00029d70
   18a28:	0002c344 	.word	0x0002c344
   18a2c:	0002c360 	.word	0x0002c360
   18a30:	0002c37c 	.word	0x0002c37c
   18a34:	0002c398 	.word	0x0002c398
   18a38:	0002c3b8 	.word	0x0002c3b8

00018a3c <att_write_rsp>:
{
   18a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a40:	b08a      	sub	sp, #40	; 0x28
   18a42:	4604      	mov	r4, r0
   18a44:	4617      	mov	r7, r2
   18a46:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18a48:	6803      	ldr	r3, [r0, #0]
   18a4a:	4688      	mov	r8, r1
   18a4c:	3900      	subs	r1, #0
   18a4e:	bf18      	it	ne
   18a50:	2101      	movne	r1, #1
   18a52:	6818      	ldr	r0, [r3, #0]
   18a54:	f00f fdce 	bl	285f4 <bt_gatt_change_aware>
   18a58:	2800      	cmp	r0, #0
   18a5a:	d04f      	beq.n	18afc <att_write_rsp+0xc0>
	if (!handle) {
   18a5c:	b925      	cbnz	r5, 18a68 <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   18a5e:	2601      	movs	r6, #1
}
   18a60:	4630      	mov	r0, r6
   18a62:	b00a      	add	sp, #40	; 0x28
   18a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   18a68:	2218      	movs	r2, #24
   18a6a:	2100      	movs	r1, #0
   18a6c:	a804      	add	r0, sp, #16
   18a6e:	f00d fee7 	bl	26840 <memset>
	if (rsp) {
   18a72:	b13f      	cbz	r7, 18a84 <att_write_rsp+0x48>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   18a74:	2200      	movs	r2, #0
   18a76:	4639      	mov	r1, r7
   18a78:	4620      	mov	r0, r4
   18a7a:	f7ff fe93 	bl	187a4 <bt_att_chan_create_pdu>
   18a7e:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   18a80:	2800      	cmp	r0, #0
   18a82:	d03d      	beq.n	18b00 <att_write_rsp+0xc4>
	data.conn = chan->att->conn;
   18a84:	6823      	ldr	r3, [r4, #0]
   18a86:	681b      	ldr	r3, [r3, #0]
   18a88:	9304      	str	r3, [sp, #16]
	data.req = req;
   18a8a:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   18a8e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   18a92:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   18a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18a98:	9307      	str	r3, [sp, #28]
	data.len = len;
   18a9a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   18a9e:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18aa2:	2301      	movs	r3, #1
   18aa4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   18aa8:	ab04      	add	r3, sp, #16
   18aaa:	9302      	str	r3, [sp, #8]
   18aac:	4b15      	ldr	r3, [pc, #84]	; (18b04 <att_write_rsp+0xc8>)
   18aae:	9301      	str	r3, [sp, #4]
   18ab0:	2200      	movs	r2, #0
   18ab2:	9200      	str	r2, [sp, #0]
   18ab4:	4613      	mov	r3, r2
   18ab6:	4629      	mov	r1, r5
   18ab8:	4628      	mov	r0, r5
   18aba:	f000 fea5 	bl	19808 <bt_gatt_foreach_attr_type>
	if (data.err) {
   18abe:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   18ac2:	b93e      	cbnz	r6, 18ad4 <att_write_rsp+0x98>
	if (data.buf) {
   18ac4:	9905      	ldr	r1, [sp, #20]
   18ac6:	2900      	cmp	r1, #0
   18ac8:	d0ca      	beq.n	18a60 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18aca:	4a0f      	ldr	r2, [pc, #60]	; (18b08 <att_write_rsp+0xcc>)
   18acc:	4620      	mov	r0, r4
   18ace:	f00e ff73 	bl	279b8 <bt_att_chan_send_rsp>
   18ad2:	e7c5      	b.n	18a60 <att_write_rsp+0x24>
		if (rsp) {
   18ad4:	b927      	cbnz	r7, 18ae0 <att_write_rsp+0xa4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   18ad6:	f1b8 0f18 	cmp.w	r8, #24
   18ada:	d00c      	beq.n	18af6 <att_write_rsp+0xba>
   18adc:	2600      	movs	r6, #0
   18ade:	e7bf      	b.n	18a60 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   18ae0:	9805      	ldr	r0, [sp, #20]
   18ae2:	f001 fd53 	bl	1a58c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   18ae6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   18aea:	462a      	mov	r2, r5
   18aec:	4641      	mov	r1, r8
   18aee:	4620      	mov	r0, r4
   18af0:	f7ff feae 	bl	18850 <send_err_rsp>
   18af4:	e7ef      	b.n	18ad6 <att_write_rsp+0x9a>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   18af6:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   18afa:	e7b1      	b.n	18a60 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18afc:	2612      	movs	r6, #18
   18afe:	e7af      	b.n	18a60 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   18b00:	260e      	movs	r6, #14
   18b02:	e7ad      	b.n	18a60 <att_write_rsp+0x24>
   18b04:	0002795b 	.word	0x0002795b
   18b08:	0002780d 	.word	0x0002780d

00018b0c <bt_att_create_pdu>:
{
   18b0c:	b570      	push	{r4, r5, r6, lr}
   18b0e:	460e      	mov	r6, r1
   18b10:	4615      	mov	r5, r2
	att = att_get(conn);
   18b12:	f7ff fabb 	bl	1808c <att_get>
	if (!att) {
   18b16:	4604      	mov	r4, r0
   18b18:	b340      	cbz	r0, 18b6c <bt_att_create_pdu+0x60>
	return list->head;
   18b1a:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18b1c:	b344      	cbz	r4, 18b70 <bt_att_create_pdu+0x64>
   18b1e:	f5b4 74aa 	subs.w	r4, r4, #340	; 0x154
   18b22:	d027      	beq.n	18b74 <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18b24:	f514 70aa 	adds.w	r0, r4, #340	; 0x154
   18b28:	d008      	beq.n	18b3c <bt_att_create_pdu+0x30>
	return node->next;
   18b2a:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   18b2e:	b128      	cbz	r0, 18b3c <bt_att_create_pdu+0x30>
   18b30:	f5a0 70aa 	sub.w	r0, r0, #340	; 0x154
   18b34:	e002      	b.n	18b3c <bt_att_create_pdu+0x30>
   18b36:	4603      	mov	r3, r0
   18b38:	4604      	mov	r4, r0
   18b3a:	4618      	mov	r0, r3
   18b3c:	b1e4      	cbz	r4, 18b78 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18b3e:	1c6b      	adds	r3, r5, #1
   18b40:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
   18b44:	4293      	cmp	r3, r2
   18b46:	d90b      	bls.n	18b60 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18b48:	2800      	cmp	r0, #0
   18b4a:	d0f4      	beq.n	18b36 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18b4c:	f510 73aa 	adds.w	r3, r0, #340	; 0x154
   18b50:	d0f2      	beq.n	18b38 <bt_att_create_pdu+0x2c>
	return node->next;
   18b52:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
   18b56:	2b00      	cmp	r3, #0
   18b58:	d0ee      	beq.n	18b38 <bt_att_create_pdu+0x2c>
   18b5a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   18b5e:	e7eb      	b.n	18b38 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   18b60:	462a      	mov	r2, r5
   18b62:	4631      	mov	r1, r6
   18b64:	4620      	mov	r0, r4
   18b66:	f7ff fe1d 	bl	187a4 <bt_att_chan_create_pdu>
   18b6a:	4604      	mov	r4, r0
}
   18b6c:	4620      	mov	r0, r4
   18b6e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18b70:	4620      	mov	r0, r4
   18b72:	e7e3      	b.n	18b3c <bt_att_create_pdu+0x30>
   18b74:	4620      	mov	r0, r4
   18b76:	e7e1      	b.n	18b3c <bt_att_create_pdu+0x30>
   18b78:	4b08      	ldr	r3, [pc, #32]	; (18b9c <bt_att_create_pdu+0x90>)
   18b7a:	4a09      	ldr	r2, [pc, #36]	; (18ba0 <bt_att_create_pdu+0x94>)
   18b7c:	1a9b      	subs	r3, r3, r2
   18b7e:	08db      	lsrs	r3, r3, #3
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   18b80:	f04f 0200 	mov.w	r2, #0
   18b84:	2102      	movs	r1, #2
   18b86:	f361 0202 	bfi	r2, r1, #0, #3
   18b8a:	f36f 02c5 	bfc	r2, #3, #3
   18b8e:	f363 128f 	bfi	r2, r3, #6, #10
   18b92:	1c69      	adds	r1, r5, #1
   18b94:	4803      	ldr	r0, [pc, #12]	; (18ba4 <bt_att_create_pdu+0x98>)
   18b96:	f7f8 ff3d 	bl	11a14 <log_1>
	return NULL;
   18b9a:	e7e7      	b.n	18b6c <bt_att_create_pdu+0x60>
   18b9c:	00029d78 	.word	0x00029d78
   18ba0:	00029d70 	.word	0x00029d70
   18ba4:	0002c3d8 	.word	0x0002c3d8

00018ba8 <att_read_group_rsp>:
{
   18ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18bac:	b08a      	sub	sp, #40	; 0x28
   18bae:	4604      	mov	r4, r0
   18bb0:	460f      	mov	r7, r1
   18bb2:	4615      	mov	r5, r2
   18bb4:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18bb6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   18bba:	2214      	movs	r2, #20
   18bbc:	2100      	movs	r1, #0
   18bbe:	eb0d 0002 	add.w	r0, sp, r2
   18bc2:	f00d fe3d 	bl	26840 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   18bc6:	2201      	movs	r2, #1
   18bc8:	2111      	movs	r1, #17
   18bca:	4640      	mov	r0, r8
   18bcc:	f7ff ff9e 	bl	18b0c <bt_att_create_pdu>
   18bd0:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   18bd2:	b350      	cbz	r0, 18c2a <att_read_group_rsp+0x82>
	data.chan = chan;
   18bd4:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   18bd6:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   18bd8:	2101      	movs	r1, #1
   18bda:	3008      	adds	r0, #8
   18bdc:	f001 fe08 	bl	1a7f0 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18be0:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   18be2:	2200      	movs	r2, #0
   18be4:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   18be6:	9209      	str	r2, [sp, #36]	; 0x24
   18be8:	ab05      	add	r3, sp, #20
   18bea:	9302      	str	r3, [sp, #8]
   18bec:	4b10      	ldr	r3, [pc, #64]	; (18c30 <att_read_group_rsp+0x88>)
   18bee:	9301      	str	r3, [sp, #4]
   18bf0:	9200      	str	r2, [sp, #0]
   18bf2:	4613      	mov	r3, r2
   18bf4:	4631      	mov	r1, r6
   18bf6:	4628      	mov	r0, r5
   18bf8:	f000 fe06 	bl	19808 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   18bfc:	9b08      	ldr	r3, [sp, #32]
   18bfe:	781e      	ldrb	r6, [r3, #0]
   18c00:	b14e      	cbz	r6, 18c16 <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18c02:	4a0c      	ldr	r2, [pc, #48]	; (18c34 <att_read_group_rsp+0x8c>)
   18c04:	9907      	ldr	r1, [sp, #28]
   18c06:	4620      	mov	r0, r4
   18c08:	f00e fed6 	bl	279b8 <bt_att_chan_send_rsp>
	return 0;
   18c0c:	2600      	movs	r6, #0
}
   18c0e:	4630      	mov	r0, r6
   18c10:	b00a      	add	sp, #40	; 0x28
   18c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   18c16:	9807      	ldr	r0, [sp, #28]
   18c18:	f001 fcb8 	bl	1a58c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   18c1c:	230a      	movs	r3, #10
   18c1e:	462a      	mov	r2, r5
   18c20:	2110      	movs	r1, #16
   18c22:	4620      	mov	r0, r4
   18c24:	f7ff fe14 	bl	18850 <send_err_rsp>
		return 0;
   18c28:	e7f1      	b.n	18c0e <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   18c2a:	260e      	movs	r6, #14
   18c2c:	e7ef      	b.n	18c0e <att_read_group_rsp+0x66>
   18c2e:	bf00      	nop
   18c30:	0001840d 	.word	0x0001840d
   18c34:	0002780d 	.word	0x0002780d

00018c38 <att_read_mult_req>:
{
   18c38:	b570      	push	{r4, r5, r6, lr}
   18c3a:	b088      	sub	sp, #32
   18c3c:	4606      	mov	r6, r0
   18c3e:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   18c40:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   18c42:	2101      	movs	r1, #1
   18c44:	4620      	mov	r0, r4
   18c46:	f00f fcd5 	bl	285f4 <bt_gatt_change_aware>
   18c4a:	2800      	cmp	r0, #0
   18c4c:	d039      	beq.n	18cc2 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   18c4e:	2210      	movs	r2, #16
   18c50:	2100      	movs	r1, #0
   18c52:	eb0d 0002 	add.w	r0, sp, r2
   18c56:	f00d fdf3 	bl	26840 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   18c5a:	2200      	movs	r2, #0
   18c5c:	210f      	movs	r1, #15
   18c5e:	4620      	mov	r0, r4
   18c60:	f7ff ff54 	bl	18b0c <bt_att_create_pdu>
   18c64:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18c66:	b378      	cbz	r0, 18cc8 <att_read_mult_req+0x90>
	data.chan = chan;
   18c68:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   18c6a:	89ab      	ldrh	r3, [r5, #12]
   18c6c:	2b01      	cmp	r3, #1
   18c6e:	d921      	bls.n	18cb4 <att_read_mult_req+0x7c>
	return net_buf_simple_pull_le16(&buf->b);
   18c70:	f105 0008 	add.w	r0, r5, #8
   18c74:	f00f fd8a 	bl	2878c <net_buf_simple_pull_le16>
   18c78:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18c7a:	2301      	movs	r3, #1
   18c7c:	f88d 301c 	strb.w	r3, [sp, #28]
   18c80:	ab04      	add	r3, sp, #16
   18c82:	9302      	str	r3, [sp, #8]
   18c84:	4b11      	ldr	r3, [pc, #68]	; (18ccc <att_read_mult_req+0x94>)
   18c86:	9301      	str	r3, [sp, #4]
   18c88:	2200      	movs	r2, #0
   18c8a:	9200      	str	r2, [sp, #0]
   18c8c:	4613      	mov	r3, r2
   18c8e:	4601      	mov	r1, r0
   18c90:	f000 fdba 	bl	19808 <bt_gatt_foreach_attr_type>
		if (data.err) {
   18c94:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18c98:	2b00      	cmp	r3, #0
   18c9a:	d0e6      	beq.n	18c6a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   18c9c:	9806      	ldr	r0, [sp, #24]
   18c9e:	f001 fc75 	bl	1a58c <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   18ca2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18ca6:	4622      	mov	r2, r4
   18ca8:	210e      	movs	r1, #14
   18caa:	4630      	mov	r0, r6
   18cac:	f7ff fdd0 	bl	18850 <send_err_rsp>
			return 0;
   18cb0:	2000      	movs	r0, #0
   18cb2:	e007      	b.n	18cc4 <att_read_mult_req+0x8c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18cb4:	4a06      	ldr	r2, [pc, #24]	; (18cd0 <att_read_mult_req+0x98>)
   18cb6:	9906      	ldr	r1, [sp, #24]
   18cb8:	4630      	mov	r0, r6
   18cba:	f00e fe7d 	bl	279b8 <bt_att_chan_send_rsp>
	return 0;
   18cbe:	2000      	movs	r0, #0
   18cc0:	e000      	b.n	18cc4 <att_read_mult_req+0x8c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18cc2:	2012      	movs	r0, #18
}
   18cc4:	b008      	add	sp, #32
   18cc6:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   18cc8:	200e      	movs	r0, #14
   18cca:	e7fb      	b.n	18cc4 <att_read_mult_req+0x8c>
   18ccc:	00027b29 	.word	0x00027b29
   18cd0:	0002780d 	.word	0x0002780d

00018cd4 <att_read_rsp>:
{
   18cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cd8:	b088      	sub	sp, #32
   18cda:	4604      	mov	r4, r0
   18cdc:	4688      	mov	r8, r1
   18cde:	4616      	mov	r6, r2
   18ce0:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18ce2:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   18ce4:	2101      	movs	r1, #1
   18ce6:	4638      	mov	r0, r7
   18ce8:	f00f fc84 	bl	285f4 <bt_gatt_change_aware>
   18cec:	2800      	cmp	r0, #0
   18cee:	d03a      	beq.n	18d66 <att_read_rsp+0x92>
	if (!handle) {
   18cf0:	b925      	cbnz	r5, 18cfc <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   18cf2:	2601      	movs	r6, #1
}
   18cf4:	4630      	mov	r0, r6
   18cf6:	b008      	add	sp, #32
   18cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   18cfc:	2210      	movs	r2, #16
   18cfe:	2100      	movs	r1, #0
   18d00:	eb0d 0002 	add.w	r0, sp, r2
   18d04:	f00d fd9c 	bl	26840 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   18d08:	2200      	movs	r2, #0
   18d0a:	4631      	mov	r1, r6
   18d0c:	4638      	mov	r0, r7
   18d0e:	f7ff fefd 	bl	18b0c <bt_att_create_pdu>
   18d12:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18d14:	b348      	cbz	r0, 18d6a <att_read_rsp+0x96>
	data.chan = chan;
   18d16:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   18d18:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   18d1c:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18d20:	2301      	movs	r3, #1
   18d22:	f88d 301c 	strb.w	r3, [sp, #28]
   18d26:	ab04      	add	r3, sp, #16
   18d28:	9302      	str	r3, [sp, #8]
   18d2a:	4b11      	ldr	r3, [pc, #68]	; (18d70 <att_read_rsp+0x9c>)
   18d2c:	9301      	str	r3, [sp, #4]
   18d2e:	2200      	movs	r2, #0
   18d30:	9200      	str	r2, [sp, #0]
   18d32:	4613      	mov	r3, r2
   18d34:	4629      	mov	r1, r5
   18d36:	4628      	mov	r0, r5
   18d38:	f000 fd66 	bl	19808 <bt_gatt_foreach_attr_type>
	if (data.err) {
   18d3c:	f89d 601c 	ldrb.w	r6, [sp, #28]
   18d40:	b92e      	cbnz	r6, 18d4e <att_read_rsp+0x7a>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18d42:	4a0c      	ldr	r2, [pc, #48]	; (18d74 <att_read_rsp+0xa0>)
   18d44:	9906      	ldr	r1, [sp, #24]
   18d46:	4620      	mov	r0, r4
   18d48:	f00e fe36 	bl	279b8 <bt_att_chan_send_rsp>
	return 0;
   18d4c:	e7d2      	b.n	18cf4 <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   18d4e:	9806      	ldr	r0, [sp, #24]
   18d50:	f001 fc1c 	bl	1a58c <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   18d54:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18d58:	462a      	mov	r2, r5
   18d5a:	4641      	mov	r1, r8
   18d5c:	4620      	mov	r0, r4
   18d5e:	f7ff fd77 	bl	18850 <send_err_rsp>
		return 0;
   18d62:	2600      	movs	r6, #0
   18d64:	e7c6      	b.n	18cf4 <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18d66:	2612      	movs	r6, #18
   18d68:	e7c4      	b.n	18cf4 <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   18d6a:	260e      	movs	r6, #14
   18d6c:	e7c2      	b.n	18cf4 <att_read_rsp+0x20>
   18d6e:	bf00      	nop
   18d70:	00027b29 	.word	0x00027b29
   18d74:	0002780d 	.word	0x0002780d

00018d78 <att_read_type_rsp>:
{
   18d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d7c:	b08a      	sub	sp, #40	; 0x28
   18d7e:	4604      	mov	r4, r0
   18d80:	460f      	mov	r7, r1
   18d82:	4615      	mov	r5, r2
   18d84:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18d86:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   18d8a:	2218      	movs	r2, #24
   18d8c:	2100      	movs	r1, #0
   18d8e:	a804      	add	r0, sp, #16
   18d90:	f00d fd56 	bl	26840 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   18d94:	2201      	movs	r2, #1
   18d96:	2109      	movs	r1, #9
   18d98:	4640      	mov	r0, r8
   18d9a:	f7ff feb7 	bl	18b0c <bt_att_create_pdu>
   18d9e:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18da0:	b368      	cbz	r0, 18dfe <att_read_type_rsp+0x86>
	data.chan = chan;
   18da2:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   18da4:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   18da6:	2101      	movs	r1, #1
   18da8:	3008      	adds	r0, #8
   18daa:	f001 fd21 	bl	1a7f0 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18dae:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   18db0:	2200      	movs	r2, #0
   18db2:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18db4:	230a      	movs	r3, #10
   18db6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18dba:	ab04      	add	r3, sp, #16
   18dbc:	9302      	str	r3, [sp, #8]
   18dbe:	4b11      	ldr	r3, [pc, #68]	; (18e04 <att_read_type_rsp+0x8c>)
   18dc0:	9301      	str	r3, [sp, #4]
   18dc2:	9200      	str	r2, [sp, #0]
   18dc4:	4613      	mov	r3, r2
   18dc6:	4631      	mov	r1, r6
   18dc8:	4628      	mov	r0, r5
   18dca:	f000 fd1d 	bl	19808 <bt_gatt_foreach_attr_type>
	if (data.err) {
   18dce:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   18dd2:	b946      	cbnz	r6, 18de6 <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18dd4:	4a0c      	ldr	r2, [pc, #48]	; (18e08 <att_read_type_rsp+0x90>)
   18dd6:	9906      	ldr	r1, [sp, #24]
   18dd8:	4620      	mov	r0, r4
   18dda:	f00e fded 	bl	279b8 <bt_att_chan_send_rsp>
}
   18dde:	4630      	mov	r0, r6
   18de0:	b00a      	add	sp, #40	; 0x28
   18de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   18de6:	9806      	ldr	r0, [sp, #24]
   18de8:	f001 fbd0 	bl	1a58c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   18dec:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   18df0:	462a      	mov	r2, r5
   18df2:	2108      	movs	r1, #8
   18df4:	4620      	mov	r0, r4
   18df6:	f7ff fd2b 	bl	18850 <send_err_rsp>
		return 0;
   18dfa:	2600      	movs	r6, #0
   18dfc:	e7ef      	b.n	18dde <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   18dfe:	260e      	movs	r6, #14
   18e00:	e7ed      	b.n	18dde <att_read_type_rsp+0x66>
   18e02:	bf00      	nop
   18e04:	000184c1 	.word	0x000184c1
   18e08:	0002780d 	.word	0x0002780d

00018e0c <att_find_type_rsp>:
{
   18e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e10:	b08a      	sub	sp, #40	; 0x28
   18e12:	4604      	mov	r4, r0
   18e14:	460d      	mov	r5, r1
   18e16:	4616      	mov	r6, r2
   18e18:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18e1a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   18e1e:	2214      	movs	r2, #20
   18e20:	2100      	movs	r1, #0
   18e22:	eb0d 0002 	add.w	r0, sp, r2
   18e26:	f00d fd0b 	bl	26840 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18e2a:	2200      	movs	r2, #0
   18e2c:	2107      	movs	r1, #7
   18e2e:	4640      	mov	r0, r8
   18e30:	f7ff fe6c 	bl	18b0c <bt_att_create_pdu>
   18e34:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18e36:	b360      	cbz	r0, 18e92 <att_find_type_rsp+0x86>
	data.chan = chan;
   18e38:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   18e3a:	2200      	movs	r2, #0
   18e3c:	9207      	str	r2, [sp, #28]
	data.value = value;
   18e3e:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   18e40:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   18e44:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18e48:	230a      	movs	r3, #10
   18e4a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   18e4e:	ab05      	add	r3, sp, #20
   18e50:	9302      	str	r3, [sp, #8]
   18e52:	4b11      	ldr	r3, [pc, #68]	; (18e98 <att_find_type_rsp+0x8c>)
   18e54:	9301      	str	r3, [sp, #4]
   18e56:	9200      	str	r2, [sp, #0]
   18e58:	4613      	mov	r3, r2
   18e5a:	4631      	mov	r1, r6
   18e5c:	4628      	mov	r0, r5
   18e5e:	f000 fcd3 	bl	19808 <bt_gatt_foreach_attr_type>
	if (data.err) {
   18e62:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   18e66:	b946      	cbnz	r6, 18e7a <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18e68:	4a0c      	ldr	r2, [pc, #48]	; (18e9c <att_find_type_rsp+0x90>)
   18e6a:	9906      	ldr	r1, [sp, #24]
   18e6c:	4620      	mov	r0, r4
   18e6e:	f00e fda3 	bl	279b8 <bt_att_chan_send_rsp>
}
   18e72:	4630      	mov	r0, r6
   18e74:	b00a      	add	sp, #40	; 0x28
   18e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   18e7a:	9806      	ldr	r0, [sp, #24]
   18e7c:	f001 fb86 	bl	1a58c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   18e80:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   18e84:	462a      	mov	r2, r5
   18e86:	2106      	movs	r1, #6
   18e88:	4620      	mov	r0, r4
   18e8a:	f7ff fce1 	bl	18850 <send_err_rsp>
		return 0;
   18e8e:	2600      	movs	r6, #0
   18e90:	e7ef      	b.n	18e72 <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   18e92:	260e      	movs	r6, #14
   18e94:	e7ed      	b.n	18e72 <att_find_type_rsp+0x66>
   18e96:	bf00      	nop
   18e98:	0001856d 	.word	0x0001856d
   18e9c:	0002780d 	.word	0x0002780d

00018ea0 <att_find_info_rsp>:
{
   18ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ea2:	b089      	sub	sp, #36	; 0x24
   18ea4:	4604      	mov	r4, r0
   18ea6:	460f      	mov	r7, r1
   18ea8:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   18eaa:	6885      	ldr	r5, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   18eac:	2210      	movs	r2, #16
   18eae:	2100      	movs	r1, #0
   18eb0:	eb0d 0002 	add.w	r0, sp, r2
   18eb4:	f00d fcc4 	bl	26840 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18eb8:	2200      	movs	r2, #0
   18eba:	2105      	movs	r1, #5
   18ebc:	4628      	mov	r0, r5
   18ebe:	f7ff fe25 	bl	18b0c <bt_att_create_pdu>
   18ec2:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   18ec4:	b300      	cbz	r0, 18f08 <att_find_info_rsp+0x68>
	data.chan = chan;
   18ec6:	9404      	str	r4, [sp, #16]
   18ec8:	ab04      	add	r3, sp, #16
   18eca:	9302      	str	r3, [sp, #8]
   18ecc:	4b0f      	ldr	r3, [pc, #60]	; (18f0c <att_find_info_rsp+0x6c>)
   18ece:	9301      	str	r3, [sp, #4]
   18ed0:	2200      	movs	r2, #0
   18ed2:	9200      	str	r2, [sp, #0]
   18ed4:	4613      	mov	r3, r2
   18ed6:	4631      	mov	r1, r6
   18ed8:	4638      	mov	r0, r7
   18eda:	f000 fc95 	bl	19808 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   18ede:	9b06      	ldr	r3, [sp, #24]
   18ee0:	b13b      	cbz	r3, 18ef2 <att_find_info_rsp+0x52>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18ee2:	4a0b      	ldr	r2, [pc, #44]	; (18f10 <att_find_info_rsp+0x70>)
   18ee4:	9905      	ldr	r1, [sp, #20]
   18ee6:	4620      	mov	r0, r4
   18ee8:	f00e fd66 	bl	279b8 <bt_att_chan_send_rsp>
	return 0;
   18eec:	2000      	movs	r0, #0
}
   18eee:	b009      	add	sp, #36	; 0x24
   18ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   18ef2:	9805      	ldr	r0, [sp, #20]
   18ef4:	f001 fb4a 	bl	1a58c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   18ef8:	230a      	movs	r3, #10
   18efa:	463a      	mov	r2, r7
   18efc:	2104      	movs	r1, #4
   18efe:	4620      	mov	r0, r4
   18f00:	f7ff fca6 	bl	18850 <send_err_rsp>
		return 0;
   18f04:	2000      	movs	r0, #0
   18f06:	e7f2      	b.n	18eee <att_find_info_rsp+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   18f08:	200e      	movs	r0, #14
   18f0a:	e7f0      	b.n	18eee <att_find_info_rsp+0x4e>
   18f0c:	00027b71 	.word	0x00027b71
   18f10:	0002780d 	.word	0x0002780d

00018f14 <att_mtu_req>:
{
   18f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f16:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   18f18:	6803      	ldr	r3, [r0, #0]
   18f1a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18f1c:	f3bf 8f5b 	dmb	ish
   18f20:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   18f24:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   18f28:	f013 0f08 	tst.w	r3, #8
   18f2c:	d122      	bne.n	18f74 <att_mtu_req+0x60>
	req = (void *)buf->data;
   18f2e:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   18f30:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   18f32:	2e16      	cmp	r6, #22
   18f34:	d920      	bls.n	18f78 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   18f36:	2202      	movs	r2, #2
   18f38:	2103      	movs	r1, #3
   18f3a:	f7ff fde7 	bl	18b0c <bt_att_create_pdu>
	if (!pdu) {
   18f3e:	4607      	mov	r7, r0
   18f40:	b1e0      	cbz	r0, 18f7c <att_mtu_req+0x68>
   18f42:	2102      	movs	r1, #2
   18f44:	3008      	adds	r0, #8
   18f46:	f001 fc53 	bl	1a7f0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   18f4a:	2500      	movs	r5, #0
   18f4c:	2317      	movs	r3, #23
   18f4e:	7003      	strb	r3, [r0, #0]
   18f50:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   18f52:	4a0b      	ldr	r2, [pc, #44]	; (18f80 <att_mtu_req+0x6c>)
   18f54:	4639      	mov	r1, r7
   18f56:	4620      	mov	r0, r4
   18f58:	f00e fd2e 	bl	279b8 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   18f5c:	2e17      	cmp	r6, #23
   18f5e:	bf28      	it	cs
   18f60:	2617      	movcs	r6, #23
   18f62:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   18f66:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   18f6a:	4620      	mov	r0, r4
   18f6c:	f00e fe5c 	bl	27c28 <att_chan_mtu_updated>
	return 0;
   18f70:	4628      	mov	r0, r5
}
   18f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   18f74:	2006      	movs	r0, #6
   18f76:	e7fc      	b.n	18f72 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   18f78:	2004      	movs	r0, #4
   18f7a:	e7fa      	b.n	18f72 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   18f7c:	200e      	movs	r0, #14
   18f7e:	e7f8      	b.n	18f72 <att_mtu_req+0x5e>
   18f80:	0002780d 	.word	0x0002780d

00018f84 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   18f84:	b500      	push	{lr}
   18f86:	b083      	sub	sp, #12
   18f88:	4602      	mov	r2, r0
   18f8a:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   18f8c:	2100      	movs	r1, #0
   18f8e:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18f90:	a901      	add	r1, sp, #4
   18f92:	4807      	ldr	r0, [pc, #28]	; (18fb0 <bt_att_req_alloc+0x2c>)
   18f94:	f005 fa6e 	bl	1e474 <k_mem_slab_alloc>
   18f98:	b940      	cbnz	r0, 18fac <bt_att_req_alloc+0x28>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   18f9a:	2210      	movs	r2, #16
   18f9c:	2100      	movs	r1, #0
   18f9e:	9801      	ldr	r0, [sp, #4]
   18fa0:	f00d fc4e 	bl	26840 <memset>

	return req;
   18fa4:	9801      	ldr	r0, [sp, #4]
}
   18fa6:	b003      	add	sp, #12
   18fa8:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   18fac:	2000      	movs	r0, #0
   18fae:	e7fa      	b.n	18fa6 <bt_att_req_alloc+0x22>
   18fb0:	20000710 	.word	0x20000710

00018fb4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   18fb4:	b500      	push	{lr}
   18fb6:	b083      	sub	sp, #12
   18fb8:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   18fba:	6880      	ldr	r0, [r0, #8]
   18fbc:	b120      	cbz	r0, 18fc8 <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   18fbe:	f001 fae5 	bl	1a58c <net_buf_unref>
		req->buf = NULL;
   18fc2:	9b01      	ldr	r3, [sp, #4]
   18fc4:	2200      	movs	r2, #0
   18fc6:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   18fc8:	a901      	add	r1, sp, #4
   18fca:	4803      	ldr	r0, [pc, #12]	; (18fd8 <bt_att_req_free+0x24>)
   18fcc:	f005 fac6 	bl	1e55c <k_mem_slab_free>
}
   18fd0:	b003      	add	sp, #12
   18fd2:	f85d fb04 	ldr.w	pc, [sp], #4
   18fd6:	bf00      	nop
   18fd8:	20000710 	.word	0x20000710

00018fdc <att_handle_rsp>:
{
   18fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18fe0:	b082      	sub	sp, #8
   18fe2:	4604      	mov	r4, r0
   18fe4:	460f      	mov	r7, r1
   18fe6:	4691      	mov	r9, r2
   18fe8:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18fea:	f500 7090 	add.w	r0, r0, #288	; 0x120
   18fee:	f006 fea7 	bl	1fd40 <k_work_cancel_delayable>
	if (!chan->req) {
   18ff2:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   18ff6:	b1f8      	cbz	r0, 19038 <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   18ff8:	4b1a      	ldr	r3, [pc, #104]	; (19064 <att_handle_rsp+0x88>)
   18ffa:	4298      	cmp	r0, r3
   18ffc:	d02e      	beq.n	1905c <att_handle_rsp+0x80>
	func = chan->req->func;
   18ffe:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   19000:	f04f 0a00 	mov.w	sl, #0
   19004:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   19008:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   1900c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   19010:	f7ff ffd0 	bl	18fb4 <bt_att_req_free>
	chan->req = NULL;
   19014:	f8c4 a0fc 	str.w	sl, [r4, #252]	; 0xfc
	att_req_send_process(chan->att);
   19018:	6820      	ldr	r0, [r4, #0]
   1901a:	f00e fb99 	bl	27750 <att_req_send_process>
	if (func) {
   1901e:	b13d      	cbz	r5, 19030 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   19020:	6823      	ldr	r3, [r4, #0]
   19022:	6818      	ldr	r0, [r3, #0]
   19024:	f8cd 8000 	str.w	r8, [sp]
   19028:	464b      	mov	r3, r9
   1902a:	463a      	mov	r2, r7
   1902c:	4631      	mov	r1, r6
   1902e:	47a8      	blx	r5
}
   19030:	2000      	movs	r0, #0
   19032:	b002      	add	sp, #8
   19034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19038:	4b0b      	ldr	r3, [pc, #44]	; (19068 <att_handle_rsp+0x8c>)
   1903a:	4a0c      	ldr	r2, [pc, #48]	; (1906c <att_handle_rsp+0x90>)
   1903c:	1a9b      	subs	r3, r3, r2
   1903e:	08db      	lsrs	r3, r3, #3
		BT_WARN("No pending ATT request");
   19040:	f04f 0100 	mov.w	r1, #0
   19044:	2202      	movs	r2, #2
   19046:	f362 0102 	bfi	r1, r2, #0, #3
   1904a:	f36f 01c5 	bfc	r1, #3, #3
   1904e:	f363 118f 	bfi	r1, r3, #6, #10
   19052:	4807      	ldr	r0, [pc, #28]	; (19070 <att_handle_rsp+0x94>)
   19054:	f7f8 fcae 	bl	119b4 <log_0>
	bt_att_func_t func = NULL;
   19058:	2500      	movs	r5, #0
		goto process;
   1905a:	e7dd      	b.n	19018 <att_handle_rsp+0x3c>
		chan->req = NULL;
   1905c:	2500      	movs	r5, #0
   1905e:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
		goto process;
   19062:	e7d9      	b.n	19018 <att_handle_rsp+0x3c>
   19064:	200025c4 	.word	0x200025c4
   19068:	00029d78 	.word	0x00029d78
   1906c:	00029d70 	.word	0x00029d70
   19070:	0002c3f4 	.word	0x0002c3f4

00019074 <att_reset>:
{
   19074:	b530      	push	{r4, r5, lr}
   19076:	b085      	sub	sp, #20
   19078:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1907a:	2200      	movs	r2, #0
   1907c:	2300      	movs	r3, #0
   1907e:	9803      	ldr	r0, [sp, #12]
   19080:	300c      	adds	r0, #12
   19082:	f001 f9eb 	bl	1a45c <net_buf_get>
   19086:	4603      	mov	r3, r0
   19088:	b118      	cbz	r0, 19092 <att_reset+0x1e>
		net_buf_unref(buf);
   1908a:	4618      	mov	r0, r3
   1908c:	f001 fa7e 	bl	1a58c <net_buf_unref>
   19090:	e7f3      	b.n	1907a <att_reset+0x6>
	att->conn = NULL;
   19092:	9b03      	ldr	r3, [sp, #12]
   19094:	2200      	movs	r2, #0
   19096:	601a      	str	r2, [r3, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   19098:	e004      	b.n	190a4 <att_reset+0x30>
	list->tail = node;
   1909a:	609a      	str	r2, [r3, #8]
}
   1909c:	e00a      	b.n	190b4 <att_reset+0x40>
		bt_att_req_free(req);
   1909e:	4620      	mov	r0, r4
   190a0:	f7ff ff88 	bl	18fb4 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   190a4:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   190a6:	685c      	ldr	r4, [r3, #4]
   190a8:	b17c      	cbz	r4, 190ca <att_reset+0x56>
	return node->next;
   190aa:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   190ac:	605a      	str	r2, [r3, #4]
	return list->tail;
   190ae:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   190b0:	42a1      	cmp	r1, r4
   190b2:	d0f2      	beq.n	1909a <att_reset+0x26>
		if (req->func) {
   190b4:	6865      	ldr	r5, [r4, #4]
   190b6:	2d00      	cmp	r5, #0
   190b8:	d0f1      	beq.n	1909e <att_reset+0x2a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   190ba:	68e3      	ldr	r3, [r4, #12]
   190bc:	9300      	str	r3, [sp, #0]
   190be:	2300      	movs	r3, #0
   190c0:	461a      	mov	r2, r3
   190c2:	210e      	movs	r1, #14
   190c4:	4618      	mov	r0, r3
   190c6:	47a8      	blx	r5
   190c8:	e7e9      	b.n	1909e <att_reset+0x2a>
	k_mem_slab_free(&att_slab, (void **)&att);
   190ca:	a903      	add	r1, sp, #12
   190cc:	4802      	ldr	r0, [pc, #8]	; (190d8 <att_reset+0x64>)
   190ce:	f005 fa45 	bl	1e55c <k_mem_slab_free>
}
   190d2:	b005      	add	sp, #20
   190d4:	bd30      	pop	{r4, r5, pc}
   190d6:	bf00      	nop
   190d8:	200006d0 	.word	0x200006d0

000190dc <att_timeout>:
{
   190dc:	b510      	push	{r4, lr}
   190de:	4604      	mov	r4, r0
   190e0:	4b0a      	ldr	r3, [pc, #40]	; (1910c <att_timeout+0x30>)
   190e2:	4a0b      	ldr	r2, [pc, #44]	; (19110 <att_timeout+0x34>)
   190e4:	1a9b      	subs	r3, r3, r2
   190e6:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
   190e8:	f04f 0100 	mov.w	r1, #0
   190ec:	2201      	movs	r2, #1
   190ee:	f362 0102 	bfi	r1, r2, #0, #3
   190f2:	f36f 01c5 	bfc	r1, #3, #3
   190f6:	f363 118f 	bfi	r1, r3, #6, #10
   190fa:	4806      	ldr	r0, [pc, #24]	; (19114 <att_timeout+0x38>)
   190fc:	f7f8 fc5a 	bl	119b4 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   19100:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
   19104:	f00e ff46 	bl	27f94 <bt_att_disconnected>
}
   19108:	bd10      	pop	{r4, pc}
   1910a:	bf00      	nop
   1910c:	00029d78 	.word	0x00029d78
   19110:	00029d70 	.word	0x00029d70
   19114:	0002c40c 	.word	0x0002c40c

00019118 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   19118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1911c:	b082      	sub	sp, #8
   1911e:	460c      	mov	r4, r1
   19120:	4615      	mov	r5, r2
   19122:	461f      	mov	r7, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   19124:	4606      	mov	r6, r0
   19126:	b180      	cbz	r0, 1914a <bt_att_send+0x32>
	__ASSERT_NO_MSG(buf);
   19128:	b1f4      	cbz	r4, 19168 <bt_att_send+0x50>

	att = att_get(conn);
   1912a:	4630      	mov	r0, r6
   1912c:	f7fe ffae 	bl	1808c <att_get>
	if (!att) {
   19130:	4680      	mov	r8, r0
   19132:	b340      	cbz	r0, 19186 <bt_att_send+0x6e>
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
   19134:	b36d      	cbz	r5, 19192 <bt_att_send+0x7a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   19136:	9700      	str	r7, [sp, #0]
   19138:	462b      	mov	r3, r5
   1913a:	4622      	mov	r2, r4
   1913c:	2104      	movs	r1, #4
   1913e:	4630      	mov	r0, r6
   19140:	f00e f947 	bl	273d2 <bt_l2cap_send_cb>

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   19144:	b002      	add	sp, #8
   19146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(conn);
   1914a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 191b0 <bt_att_send+0x98>
   1914e:	f640 434a 	movw	r3, #3146	; 0xc4a
   19152:	4642      	mov	r2, r8
   19154:	4913      	ldr	r1, [pc, #76]	; (191a4 <bt_att_send+0x8c>)
   19156:	4814      	ldr	r0, [pc, #80]	; (191a8 <bt_att_send+0x90>)
   19158:	f00c fb69 	bl	2582e <printk>
   1915c:	f640 414a 	movw	r1, #3146	; 0xc4a
   19160:	4640      	mov	r0, r8
   19162:	f00c fde6 	bl	25d32 <assert_post_action>
   19166:	e7df      	b.n	19128 <bt_att_send+0x10>
	__ASSERT_NO_MSG(buf);
   19168:	f8df 8044 	ldr.w	r8, [pc, #68]	; 191b0 <bt_att_send+0x98>
   1916c:	f640 434b 	movw	r3, #3147	; 0xc4b
   19170:	4642      	mov	r2, r8
   19172:	490e      	ldr	r1, [pc, #56]	; (191ac <bt_att_send+0x94>)
   19174:	480c      	ldr	r0, [pc, #48]	; (191a8 <bt_att_send+0x90>)
   19176:	f00c fb5a 	bl	2582e <printk>
   1917a:	f640 414b 	movw	r1, #3147	; 0xc4b
   1917e:	4640      	mov	r0, r8
   19180:	f00c fdd7 	bl	25d32 <assert_post_action>
   19184:	e7d1      	b.n	1912a <bt_att_send+0x12>
		net_buf_unref(buf);
   19186:	4620      	mov	r0, r4
   19188:	f001 fa00 	bl	1a58c <net_buf_unref>
		return -ENOTCONN;
   1918c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19190:	e7d8      	b.n	19144 <bt_att_send+0x2c>
	net_buf_put(&att->tx_queue, buf);
   19192:	4621      	mov	r1, r4
   19194:	300c      	adds	r0, #12
   19196:	f001 f9c1 	bl	1a51c <net_buf_put>
	att_send_process(att);
   1919a:	4640      	mov	r0, r8
   1919c:	f00e fba1 	bl	278e2 <att_send_process>
	return 0;
   191a0:	2000      	movs	r0, #0
   191a2:	e7cf      	b.n	19144 <bt_att_send+0x2c>
   191a4:	0002c418 	.word	0x0002c418
   191a8:	00029ff8 	.word	0x00029ff8
   191ac:	0002c994 	.word	0x0002c994
   191b0:	0002c270 	.word	0x0002c270

000191b4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   191b4:	b570      	push	{r4, r5, r6, lr}
   191b6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   191b8:	4605      	mov	r5, r0
   191ba:	b180      	cbz	r0, 191de <bt_att_req_send+0x2a>
	__ASSERT_NO_MSG(req);
   191bc:	b1ec      	cbz	r4, 191fa <bt_att_req_send+0x46>

	att = att_get(conn);
   191be:	4628      	mov	r0, r5
   191c0:	f7fe ff64 	bl	1808c <att_get>
	if (!att) {
   191c4:	4603      	mov	r3, r0
   191c6:	b348      	cbz	r0, 1921c <bt_att_req_send+0x68>
	parent->next = child;
   191c8:	2200      	movs	r2, #0
   191ca:	6022      	str	r2, [r4, #0]
	return list->tail;
   191cc:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   191ce:	b312      	cbz	r2, 19216 <bt_att_req_send+0x62>
	parent->next = child;
   191d0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   191d2:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   191d4:	4618      	mov	r0, r3
   191d6:	f00e fabb 	bl	27750 <att_req_send_process>

	return 0;
   191da:	2000      	movs	r0, #0
}
   191dc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(conn);
   191de:	4e11      	ldr	r6, [pc, #68]	; (19224 <bt_att_req_send+0x70>)
   191e0:	f640 4367 	movw	r3, #3175	; 0xc67
   191e4:	4632      	mov	r2, r6
   191e6:	4910      	ldr	r1, [pc, #64]	; (19228 <bt_att_req_send+0x74>)
   191e8:	4810      	ldr	r0, [pc, #64]	; (1922c <bt_att_req_send+0x78>)
   191ea:	f00c fb20 	bl	2582e <printk>
   191ee:	f640 4167 	movw	r1, #3175	; 0xc67
   191f2:	4630      	mov	r0, r6
   191f4:	f00c fd9d 	bl	25d32 <assert_post_action>
   191f8:	e7e0      	b.n	191bc <bt_att_req_send+0x8>
	__ASSERT_NO_MSG(req);
   191fa:	4e0a      	ldr	r6, [pc, #40]	; (19224 <bt_att_req_send+0x70>)
   191fc:	f640 4368 	movw	r3, #3176	; 0xc68
   19200:	4632      	mov	r2, r6
   19202:	490b      	ldr	r1, [pc, #44]	; (19230 <bt_att_req_send+0x7c>)
   19204:	4809      	ldr	r0, [pc, #36]	; (1922c <bt_att_req_send+0x78>)
   19206:	f00c fb12 	bl	2582e <printk>
   1920a:	f640 4168 	movw	r1, #3176	; 0xc68
   1920e:	4630      	mov	r0, r6
   19210:	f00c fd8f 	bl	25d32 <assert_post_action>
   19214:	e7d3      	b.n	191be <bt_att_req_send+0xa>
   19216:	6084      	str	r4, [r0, #8]
	list->head = node;
   19218:	6044      	str	r4, [r0, #4]
}
   1921a:	e7db      	b.n	191d4 <bt_att_req_send+0x20>
		return -ENOTCONN;
   1921c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19220:	e7dc      	b.n	191dc <bt_att_req_send+0x28>
   19222:	bf00      	nop
   19224:	0002c270 	.word	0x0002c270
   19228:	0002c418 	.word	0x0002c418
   1922c:	00029ff8 	.word	0x00029ff8
   19230:	0002c2a8 	.word	0x0002c2a8

00019234 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   19234:	b570      	push	{r4, r5, r6, lr}
   19236:	b082      	sub	sp, #8
   19238:	4606      	mov	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1923a:	2400      	movs	r4, #0
   1923c:	2c00      	cmp	r4, #0
   1923e:	dd03      	ble.n	19248 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
			return cfg;
		}
	}

	return NULL;
   19240:	2500      	movs	r5, #0
}
   19242:	4628      	mov	r0, r5
   19244:	b002      	add	sp, #8
   19246:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19248:	4d0e      	ldr	r5, [pc, #56]	; (19284 <find_cf_cfg+0x50>)
   1924a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1924e:	b166      	cbz	r6, 1926a <find_cf_cfg+0x36>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19250:	490c      	ldr	r1, [pc, #48]	; (19284 <find_cf_cfg+0x50>)
   19252:	0123      	lsls	r3, r4, #4
   19254:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   19258:	3201      	adds	r2, #1
   1925a:	5cc9      	ldrb	r1, [r1, r3]
   1925c:	4630      	mov	r0, r6
   1925e:	f00d ffea 	bl	27236 <bt_conn_is_peer_addr_le>
   19262:	2800      	cmp	r0, #0
   19264:	d1ed      	bne.n	19242 <find_cf_cfg+0xe>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19266:	3401      	adds	r4, #1
   19268:	e7e8      	b.n	1923c <find_cf_cfg+0x8>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1926a:	4628      	mov	r0, r5
   1926c:	2300      	movs	r3, #0
   1926e:	9300      	str	r3, [sp, #0]
   19270:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   19274:	2207      	movs	r2, #7
   19276:	4669      	mov	r1, sp
   19278:	3001      	adds	r0, #1
   1927a:	f00d fa90 	bl	2679e <memcmp>
   1927e:	2800      	cmp	r0, #0
   19280:	d1f1      	bne.n	19266 <find_cf_cfg+0x32>
   19282:	e7de      	b.n	19242 <find_cf_cfg+0xe>
   19284:	200025dc 	.word	0x200025dc

00019288 <find_sc_cfg>:
{
   19288:	b570      	push	{r4, r5, r6, lr}
   1928a:	4606      	mov	r6, r0
   1928c:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1928e:	2400      	movs	r4, #0
   19290:	b10c      	cbz	r4, 19296 <find_sc_cfg+0xe>
	return NULL;
   19292:	2000      	movs	r0, #0
}
   19294:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   19296:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1929a:	4a0c      	ldr	r2, [pc, #48]	; (192cc <find_sc_cfg+0x44>)
   1929c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   192a0:	429e      	cmp	r6, r3
   192a2:	d001      	beq.n	192a8 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   192a4:	3401      	adds	r4, #1
   192a6:	e7f3      	b.n	19290 <find_sc_cfg+0x8>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   192a8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   192ac:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   192b0:	2207      	movs	r2, #7
   192b2:	4629      	mov	r1, r5
   192b4:	3001      	adds	r0, #1
   192b6:	f00d fa72 	bl	2679e <memcmp>
		if (id == sc_cfg[i].id &&
   192ba:	2800      	cmp	r0, #0
   192bc:	d1f2      	bne.n	192a4 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   192be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   192c2:	4802      	ldr	r0, [pc, #8]	; (192cc <find_sc_cfg+0x44>)
   192c4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   192c8:	e7e4      	b.n	19294 <find_sc_cfg+0xc>
   192ca:	bf00      	nop
   192cc:	200025f0 	.word	0x200025f0

000192d0 <cf_write>:
	return true;
}

static ssize_t cf_write(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   192d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192d4:	461d      	mov	r5, r3
   192d6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	struct gatt_cf_cfg *cfg;
	const uint8_t *value = buf;

	if (offset > sizeof(cfg->data)) {
   192da:	2b01      	cmp	r3, #1
   192dc:	d83f      	bhi.n	1935e <cf_write+0x8e>
   192de:	4606      	mov	r6, r0
   192e0:	4690      	mov	r8, r2
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(cfg->data)) {
   192e2:	462f      	mov	r7, r5
   192e4:	442b      	add	r3, r5
   192e6:	2b01      	cmp	r3, #1
   192e8:	d83c      	bhi.n	19364 <cf_write+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	cfg = find_cf_cfg(conn);
   192ea:	f7ff ffa3 	bl	19234 <find_cf_cfg>
	if (!cfg) {
   192ee:	4604      	mov	r4, r0
   192f0:	b1f0      	cbz	r0, 19330 <cf_write+0x60>
		cfg = find_cf_cfg(NULL);
	}

	if (!cfg) {
   192f2:	b30c      	cbz	r4, 19338 <cf_write+0x68>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
	}

	BT_DBG("handle 0x%04x len %u", attr->handle, len);

	if (!cf_set_value(cfg, value, len)) {
   192f4:	462a      	mov	r2, r5
   192f6:	4641      	mov	r1, r8
   192f8:	4620      	mov	r0, r4
   192fa:	f00e fe72 	bl	27fe2 <cf_set_value>
   192fe:	b3a0      	cbz	r0, 1936a <cf_write+0x9a>
	memcpy(dst, src, sizeof(*dst));
   19300:	2207      	movs	r2, #7
   19302:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19306:	1c60      	adds	r0, r4, #1
   19308:	f00d fa76 	bl	267f8 <memcpy>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}

	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
	cfg->id = conn->id;
   1930c:	7a33      	ldrb	r3, [r6, #8]
   1930e:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19312:	f3bf 8f5b 	dmb	ish
   19316:	e854 3f00 	ldrex	r3, [r4]
   1931a:	f043 0301 	orr.w	r3, r3, #1
   1931e:	e844 3200 	strex	r2, r3, [r4]
   19322:	2a00      	cmp	r2, #0
   19324:	d1f7      	bne.n	19316 <cf_write+0x46>
   19326:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);

	return len;
}
   1932a:	4638      	mov	r0, r7
   1932c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   19330:	f7ff ff80 	bl	19234 <find_cf_cfg>
   19334:	4604      	mov	r4, r0
   19336:	e7dc      	b.n	192f2 <cf_write+0x22>
   19338:	4b0d      	ldr	r3, [pc, #52]	; (19370 <cf_write+0xa0>)
   1933a:	4a0e      	ldr	r2, [pc, #56]	; (19374 <cf_write+0xa4>)
   1933c:	1a9b      	subs	r3, r3, r2
   1933e:	08db      	lsrs	r3, r3, #3
		BT_WARN("No space to store Client Supported Features");
   19340:	f04f 0100 	mov.w	r1, #0
   19344:	2202      	movs	r2, #2
   19346:	f362 0102 	bfi	r1, r2, #0, #3
   1934a:	f36f 01c5 	bfc	r1, #3, #3
   1934e:	f363 118f 	bfi	r1, r3, #6, #10
   19352:	4809      	ldr	r0, [pc, #36]	; (19378 <cf_write+0xa8>)
   19354:	f7f8 fb2e 	bl	119b4 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19358:	f06f 0710 	mvn.w	r7, #16
   1935c:	e7e5      	b.n	1932a <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1935e:	f06f 0706 	mvn.w	r7, #6
   19362:	e7e2      	b.n	1932a <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19364:	f06f 070c 	mvn.w	r7, #12
   19368:	e7df      	b.n	1932a <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1936a:	f06f 0712 	mvn.w	r7, #18
   1936e:	e7dc      	b.n	1932a <cf_write+0x5a>
   19370:	00029d90 	.word	0x00029d90
   19374:	00029d70 	.word	0x00029d70
   19378:	0002c490 	.word	0x0002c490

0001937c <sc_save>:
{
   1937c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19380:	b082      	sub	sp, #8
   19382:	4607      	mov	r7, r0
   19384:	4688      	mov	r8, r1
   19386:	4616      	mov	r6, r2
   19388:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1938a:	f7ff ff7d 	bl	19288 <find_sc_cfg>
	if (!cfg) {
   1938e:	4604      	mov	r4, r0
   19390:	b170      	cbz	r0, 193b0 <sc_save+0x34>
	if (!(cfg->data.start || cfg->data.end)) {
   19392:	8923      	ldrh	r3, [r4, #8]
   19394:	b90b      	cbnz	r3, 1939a <sc_save+0x1e>
   19396:	8963      	ldrh	r3, [r4, #10]
   19398:	b353      	cbz	r3, 193f0 <sc_save+0x74>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1939a:	462b      	mov	r3, r5
   1939c:	4632      	mov	r2, r6
   1939e:	f104 010a 	add.w	r1, r4, #10
   193a2:	f104 0008 	add.w	r0, r4, #8
   193a6:	f00e fe07 	bl	27fb8 <update_range>
}
   193aa:	b002      	add	sp, #8
   193ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   193b0:	9000      	str	r0, [sp, #0]
   193b2:	f8cd 0003 	str.w	r0, [sp, #3]
   193b6:	4669      	mov	r1, sp
   193b8:	f7ff ff66 	bl	19288 <find_sc_cfg>
		if (!cfg) {
   193bc:	4604      	mov	r4, r0
   193be:	b130      	cbz	r0, 193ce <sc_save+0x52>
		cfg->id = id;
   193c0:	f800 7b01 	strb.w	r7, [r0], #1
   193c4:	2207      	movs	r2, #7
   193c6:	4641      	mov	r1, r8
   193c8:	f00d fa16 	bl	267f8 <memcpy>
   193cc:	e7e1      	b.n	19392 <sc_save+0x16>
   193ce:	4b0a      	ldr	r3, [pc, #40]	; (193f8 <sc_save+0x7c>)
   193d0:	4a0a      	ldr	r2, [pc, #40]	; (193fc <sc_save+0x80>)
   193d2:	1a9b      	subs	r3, r3, r2
   193d4:	08db      	lsrs	r3, r3, #3
			BT_ERR("unable to save SC: no cfg left");
   193d6:	f04f 0100 	mov.w	r1, #0
   193da:	2201      	movs	r2, #1
   193dc:	f362 0102 	bfi	r1, r2, #0, #3
   193e0:	f36f 01c5 	bfc	r1, #3, #3
   193e4:	f363 118f 	bfi	r1, r3, #6, #10
   193e8:	4805      	ldr	r0, [pc, #20]	; (19400 <sc_save+0x84>)
   193ea:	f7f8 fae3 	bl	119b4 <log_0>
			return;
   193ee:	e7dc      	b.n	193aa <sc_save+0x2e>
		cfg->data.start = start;
   193f0:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   193f2:	8165      	strh	r5, [r4, #10]
		goto done;
   193f4:	e7d9      	b.n	193aa <sc_save+0x2e>
   193f6:	bf00      	nop
   193f8:	00029d90 	.word	0x00029d90
   193fc:	00029d70 	.word	0x00029d70
   19400:	0002c4bc 	.word	0x0002c4bc

00019404 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   19404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19408:	461c      	mov	r4, r3
   1940a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1940e:	68cf      	ldr	r7, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   19410:	2b00      	cmp	r3, #0
   19412:	d157      	bne.n	194c4 <bt_gatt_attr_write_ccc+0xc0>
   19414:	4681      	mov	r9, r0
   19416:	460e      	mov	r6, r1
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   19418:	1e63      	subs	r3, r4, #1
   1941a:	b29b      	uxth	r3, r3
   1941c:	2b01      	cmp	r3, #1
   1941e:	d854      	bhi.n	194ca <bt_gatt_attr_write_ccc+0xc6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   19420:	2c01      	cmp	r4, #1
   19422:	d91d      	bls.n	19460 <bt_gatt_attr_write_ccc+0x5c>
   19424:	7853      	ldrb	r3, [r2, #1]
   19426:	7815      	ldrb	r5, [r2, #0]
   19428:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1942c:	4639      	mov	r1, r7
   1942e:	4648      	mov	r0, r9
   19430:	f00e fea5 	bl	2817e <find_ccc_cfg>
	if (!cfg) {
   19434:	4680      	mov	r8, r0
   19436:	b1a8      	cbz	r0, 19464 <bt_gatt_attr_write_ccc+0x60>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
		cfg->id = conn->id;
	}

	/* Confirm write if cfg is managed by application */
	if (ccc->cfg_write) {
   19438:	693b      	ldr	r3, [r7, #16]
   1943a:	b143      	cbz	r3, 1944e <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1943c:	462a      	mov	r2, r5
   1943e:	4631      	mov	r1, r6
   19440:	4648      	mov	r0, r9
   19442:	4798      	blx	r3

		if (write < 0) {
   19444:	2800      	cmp	r0, #0
   19446:	db09      	blt.n	1945c <bt_gatt_attr_write_ccc+0x58>
			return write;
		}

		/* Accept size=1 for backwards compatibility */
		if (write != sizeof(value) && write != 1) {
   19448:	3801      	subs	r0, #1
   1944a:	2801      	cmp	r0, #1
   1944c:	d840      	bhi.n	194d0 <bt_gatt_attr_write_ccc+0xcc>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
		}
	}

	value_changed = cfg->value != value;
	cfg->value = value;
   1944e:	f8a8 5008 	strh.w	r5, [r8, #8]

	BT_DBG("handle 0x%04x value %u", attr->handle, cfg->value);

	/* Update cfg if don't match */
	if (cfg->value != ccc->value) {
   19452:	897b      	ldrh	r3, [r7, #10]
   19454:	429d      	cmp	r5, r3
   19456:	d12c      	bne.n	194b2 <bt_gatt_attr_write_ccc+0xae>
		gatt_ccc_conn_enqueue(conn);
#endif
	}

	/* Disabled CCC is the same as no configured CCC, so clear the entry */
	if (!value) {
   19458:	b385      	cbz	r5, 194bc <bt_gatt_attr_write_ccc+0xb8>
		clear_ccc_cfg(cfg);
	}

	return len;
   1945a:	4620      	mov	r0, r4
}
   1945c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   19460:	7815      	ldrb	r5, [r2, #0]
   19462:	e7e3      	b.n	1942c <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   19464:	b90d      	cbnz	r5, 1946a <bt_gatt_attr_write_ccc+0x66>
			return len;
   19466:	4620      	mov	r0, r4
   19468:	e7f8      	b.n	1945c <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   1946a:	4639      	mov	r1, r7
   1946c:	2000      	movs	r0, #0
   1946e:	f00e fe86 	bl	2817e <find_ccc_cfg>
		if (!cfg) {
   19472:	4680      	mov	r8, r0
   19474:	b150      	cbz	r0, 1948c <bt_gatt_attr_write_ccc+0x88>
   19476:	2207      	movs	r2, #7
   19478:	f109 0190 	add.w	r1, r9, #144	; 0x90
   1947c:	3001      	adds	r0, #1
   1947e:	f00d f9bb 	bl	267f8 <memcpy>
		cfg->id = conn->id;
   19482:	f899 3008 	ldrb.w	r3, [r9, #8]
   19486:	f888 3000 	strb.w	r3, [r8]
   1948a:	e7d5      	b.n	19438 <bt_gatt_attr_write_ccc+0x34>
   1948c:	4b12      	ldr	r3, [pc, #72]	; (194d8 <bt_gatt_attr_write_ccc+0xd4>)
   1948e:	4a13      	ldr	r2, [pc, #76]	; (194dc <bt_gatt_attr_write_ccc+0xd8>)
   19490:	1a9b      	subs	r3, r3, r2
   19492:	08db      	lsrs	r3, r3, #3
			BT_WARN("No space to store CCC cfg");
   19494:	f04f 0100 	mov.w	r1, #0
   19498:	2202      	movs	r2, #2
   1949a:	f362 0102 	bfi	r1, r2, #0, #3
   1949e:	f36f 01c5 	bfc	r1, #3, #3
   194a2:	f363 118f 	bfi	r1, r3, #6, #10
   194a6:	480e      	ldr	r0, [pc, #56]	; (194e0 <bt_gatt_attr_write_ccc+0xdc>)
   194a8:	f7f8 fa84 	bl	119b4 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   194ac:	f06f 0010 	mvn.w	r0, #16
   194b0:	e7d4      	b.n	1945c <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
   194b2:	4639      	mov	r1, r7
   194b4:	4630      	mov	r0, r6
   194b6:	f00e fdc5 	bl	28044 <gatt_ccc_changed>
   194ba:	e7cd      	b.n	19458 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   194bc:	4640      	mov	r0, r8
   194be:	f00e fe8a 	bl	281d6 <clear_ccc_cfg>
   194c2:	e7ca      	b.n	1945a <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   194c4:	f06f 0006 	mvn.w	r0, #6
   194c8:	e7c8      	b.n	1945c <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   194ca:	f06f 000c 	mvn.w	r0, #12
   194ce:	e7c5      	b.n	1945c <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   194d0:	f06f 000d 	mvn.w	r0, #13
   194d4:	e7c2      	b.n	1945c <bt_gatt_attr_write_ccc+0x58>
   194d6:	bf00      	nop
   194d8:	00029d90 	.word	0x00029d90
   194dc:	00029d70 	.word	0x00029d70
   194e0:	0002c4dc 	.word	0x0002c4dc

000194e4 <sc_clear>:
{
   194e4:	b538      	push	{r3, r4, r5, lr}
   194e6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   194e8:	f100 0590 	add.w	r5, r0, #144	; 0x90
   194ec:	4629      	mov	r1, r5
   194ee:	7a00      	ldrb	r0, [r0, #8]
   194f0:	f00d fb98 	bl	26c24 <bt_addr_le_is_bonded>
   194f4:	b1b8      	cbz	r0, 19526 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   194f6:	4629      	mov	r1, r5
   194f8:	7a20      	ldrb	r0, [r4, #8]
   194fa:	f00e fe82 	bl	28202 <bt_gatt_clear_sc>
		if (err) {
   194fe:	4601      	mov	r1, r0
   19500:	b900      	cbnz	r0, 19504 <sc_clear+0x20>
}
   19502:	bd38      	pop	{r3, r4, r5, pc}
   19504:	4b0c      	ldr	r3, [pc, #48]	; (19538 <sc_clear+0x54>)
   19506:	4a0d      	ldr	r2, [pc, #52]	; (1953c <sc_clear+0x58>)
   19508:	1a9b      	subs	r3, r3, r2
   1950a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear SC %d", err);
   1950c:	f04f 0200 	mov.w	r2, #0
   19510:	2001      	movs	r0, #1
   19512:	f360 0202 	bfi	r2, r0, #0, #3
   19516:	f36f 02c5 	bfc	r2, #3, #3
   1951a:	f363 128f 	bfi	r2, r3, #6, #10
   1951e:	4808      	ldr	r0, [pc, #32]	; (19540 <sc_clear+0x5c>)
   19520:	f7f8 fa78 	bl	11a14 <log_1>
   19524:	e7ed      	b.n	19502 <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19526:	4629      	mov	r1, r5
   19528:	7a20      	ldrb	r0, [r4, #8]
   1952a:	f7ff fead 	bl	19288 <find_sc_cfg>
		if (cfg) {
   1952e:	2800      	cmp	r0, #0
   19530:	d0e7      	beq.n	19502 <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   19532:	f00e fe60 	bl	281f6 <clear_sc_cfg>
}
   19536:	e7e4      	b.n	19502 <sc_clear+0x1e>
   19538:	00029d90 	.word	0x00029d90
   1953c:	00029d70 	.word	0x00029d70
   19540:	0002c4f8 	.word	0x0002c4f8

00019544 <bt_gatt_service_init>:
{
   19544:	b538      	push	{r3, r4, r5, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19546:	4b17      	ldr	r3, [pc, #92]	; (195a4 <bt_gatt_service_init+0x60>)
   19548:	2201      	movs	r2, #1
   1954a:	f3bf 8f5b 	dmb	ish
   1954e:	e853 1f00 	ldrex	r1, [r3]
   19552:	2900      	cmp	r1, #0
   19554:	d103      	bne.n	1955e <bt_gatt_service_init+0x1a>
   19556:	e843 2000 	strex	r0, r2, [r3]
   1955a:	2800      	cmp	r0, #0
   1955c:	d1f7      	bne.n	1954e <bt_gatt_service_init+0xa>
   1955e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   19562:	d11e      	bne.n	195a2 <bt_gatt_service_init+0x5e>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19564:	4c10      	ldr	r4, [pc, #64]	; (195a8 <bt_gatt_service_init+0x64>)
   19566:	e018      	b.n	1959a <bt_gatt_service_init+0x56>
   19568:	4d10      	ldr	r5, [pc, #64]	; (195ac <bt_gatt_service_init+0x68>)
   1956a:	f240 4351 	movw	r3, #1105	; 0x451
   1956e:	462a      	mov	r2, r5
   19570:	490f      	ldr	r1, [pc, #60]	; (195b0 <bt_gatt_service_init+0x6c>)
   19572:	4810      	ldr	r0, [pc, #64]	; (195b4 <bt_gatt_service_init+0x70>)
   19574:	f00c f95b 	bl	2582e <printk>
   19578:	480f      	ldr	r0, [pc, #60]	; (195b8 <bt_gatt_service_init+0x74>)
   1957a:	f00c f958 	bl	2582e <printk>
   1957e:	f240 4151 	movw	r1, #1105	; 0x451
   19582:	4628      	mov	r0, r5
   19584:	f00c fbd5 	bl	25d32 <assert_post_action>
   19588:	4b0c      	ldr	r3, [pc, #48]	; (195bc <bt_gatt_service_init+0x78>)
   1958a:	429c      	cmp	r4, r3
   1958c:	d209      	bcs.n	195a2 <bt_gatt_service_init+0x5e>
		last_static_handle += svc->attr_count;
   1958e:	6863      	ldr	r3, [r4, #4]
   19590:	4a0b      	ldr	r2, [pc, #44]	; (195c0 <bt_gatt_service_init+0x7c>)
   19592:	8811      	ldrh	r1, [r2, #0]
   19594:	440b      	add	r3, r1
   19596:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19598:	3408      	adds	r4, #8
   1959a:	4b08      	ldr	r3, [pc, #32]	; (195bc <bt_gatt_service_init+0x78>)
   1959c:	429c      	cmp	r4, r3
   1959e:	d9f3      	bls.n	19588 <bt_gatt_service_init+0x44>
   195a0:	e7e2      	b.n	19568 <bt_gatt_service_init+0x24>
}
   195a2:	bd38      	pop	{r3, r4, r5, pc}
   195a4:	20002614 	.word	0x20002614
   195a8:	00029d60 	.word	0x00029d60
   195ac:	0002c510 	.word	0x0002c510
   195b0:	0002c540 	.word	0x0002c540
   195b4:	00029ff8 	.word	0x00029ff8
   195b8:	0002bbac 	.word	0x0002bbac
   195bc:	00029d70 	.word	0x00029d70
   195c0:	20003754 	.word	0x20003754

000195c4 <sc_indicate_rsp>:
{
   195c4:	b510      	push	{r4, lr}
   195c6:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   195c8:	4b19      	ldr	r3, [pc, #100]	; (19630 <sc_indicate_rsp+0x6c>)
   195ca:	f103 0250 	add.w	r2, r3, #80	; 0x50
   195ce:	f3bf 8f5b 	dmb	ish
   195d2:	e852 1f00 	ldrex	r1, [r2]
   195d6:	f021 0102 	bic.w	r1, r1, #2
   195da:	e842 1000 	strex	r0, r1, [r2]
   195de:	2800      	cmp	r0, #0
   195e0:	d1f7      	bne.n	195d2 <sc_indicate_rsp+0xe>
   195e2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   195e6:	f3bf 8f5b 	dmb	ish
   195ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   195ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   195f0:	f013 0f01 	tst.w	r3, #1
   195f4:	d116      	bne.n	19624 <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   195f6:	4620      	mov	r0, r4
   195f8:	f7ff fe1c 	bl	19234 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   195fc:	4603      	mov	r3, r0
   195fe:	b180      	cbz	r0, 19622 <sc_indicate_rsp+0x5e>
   19600:	7a02      	ldrb	r2, [r0, #8]
   19602:	f012 0f01 	tst.w	r2, #1
   19606:	d00c      	beq.n	19622 <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   19608:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1960a:	f3bf 8f5b 	dmb	ish
   1960e:	e853 2f00 	ldrex	r2, [r3]
   19612:	f042 0201 	orr.w	r2, r2, #1
   19616:	e843 2100 	strex	r1, r2, [r3]
   1961a:	2900      	cmp	r1, #0
   1961c:	d1f7      	bne.n	1960e <sc_indicate_rsp+0x4a>
   1961e:	f3bf 8f5b 	dmb	ish
}
   19622:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   19624:	2200      	movs	r2, #0
   19626:	2300      	movs	r3, #0
   19628:	4802      	ldr	r0, [pc, #8]	; (19634 <sc_indicate_rsp+0x70>)
   1962a:	f006 fb81 	bl	1fd30 <k_work_reschedule>
   1962e:	e7e2      	b.n	195f6 <sc_indicate_rsp+0x32>
   19630:	200019d8 	.word	0x200019d8
   19634:	200019f8 	.word	0x200019f8

00019638 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   19638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1963c:	6881      	ldr	r1, [r0, #8]
   1963e:	4b2d      	ldr	r3, [pc, #180]	; (196f4 <disconnected_cb+0xbc>)
   19640:	4299      	cmp	r1, r3
   19642:	d002      	beq.n	1964a <disconnected_cb+0x12>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   19644:	2001      	movs	r0, #1
   19646:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1964a:	4604      	mov	r4, r0
   1964c:	4616      	mov	r6, r2
	ccc = attr->user_data;
   1964e:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   19650:	897b      	ldrh	r3, [r7, #10]
   19652:	2b00      	cmp	r3, #0
   19654:	d0f6      	beq.n	19644 <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19656:	2500      	movs	r5, #0
	value_used = false;
   19658:	46aa      	mov	sl, r5
   1965a:	e021      	b.n	196a0 <disconnected_cb+0x68>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1965c:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   19660:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   19664:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   19668:	b1cb      	cbz	r3, 1969e <disconnected_cb+0x66>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1966a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1966e:	f108 0901 	add.w	r9, r8, #1
   19672:	464a      	mov	r2, r9
   19674:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   19678:	4630      	mov	r0, r6
   1967a:	f00d fddc 	bl	27236 <bt_conn_is_peer_addr_le>
   1967e:	bb00      	cbnz	r0, 196c2 <disconnected_cb+0x8a>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19680:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19684:	4649      	mov	r1, r9
   19686:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   1968a:	f7fe f89b 	bl	177c4 <bt_conn_lookup_addr_le>
			if (tmp) {
   1968e:	4603      	mov	r3, r0
   19690:	b128      	cbz	r0, 1969e <disconnected_cb+0x66>
				if (tmp->state == BT_CONN_CONNECTED) {
   19692:	7a82      	ldrb	r2, [r0, #10]
   19694:	2a07      	cmp	r2, #7
   19696:	d011      	beq.n	196bc <disconnected_cb+0x84>
				bt_conn_unref(tmp);
   19698:	4618      	mov	r0, r3
   1969a:	f7fd fe17 	bl	172cc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1969e:	3501      	adds	r5, #1
   196a0:	2d00      	cmp	r5, #0
   196a2:	d0db      	beq.n	1965c <disconnected_cb+0x24>
	if (!value_used) {
   196a4:	f1ba 0f00 	cmp.w	sl, #0
   196a8:	d1cc      	bne.n	19644 <disconnected_cb+0xc>
		ccc->value = 0U;
   196aa:	2300      	movs	r3, #0
   196ac:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   196ae:	68fb      	ldr	r3, [r7, #12]
   196b0:	2b00      	cmp	r3, #0
   196b2:	d0c7      	beq.n	19644 <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   196b4:	2100      	movs	r1, #0
   196b6:	4620      	mov	r0, r4
   196b8:	4798      	blx	r3
   196ba:	e7c3      	b.n	19644 <disconnected_cb+0xc>
					value_used = true;
   196bc:	f04f 0a01 	mov.w	sl, #1
   196c0:	e7ea      	b.n	19698 <disconnected_cb+0x60>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   196c2:	f106 0b90 	add.w	fp, r6, #144	; 0x90
   196c6:	4659      	mov	r1, fp
   196c8:	7a30      	ldrb	r0, [r6, #8]
   196ca:	f00d faab 	bl	26c24 <bt_addr_le_is_bonded>
   196ce:	b950      	cbnz	r0, 196e6 <disconnected_cb+0xae>
				if (ccc == &sc_ccc) {
   196d0:	4b09      	ldr	r3, [pc, #36]	; (196f8 <disconnected_cb+0xc0>)
   196d2:	429f      	cmp	r7, r3
   196d4:	d003      	beq.n	196de <disconnected_cb+0xa6>
				clear_ccc_cfg(cfg);
   196d6:	4640      	mov	r0, r8
   196d8:	f00e fd7d 	bl	281d6 <clear_ccc_cfg>
   196dc:	e7df      	b.n	1969e <disconnected_cb+0x66>
					sc_clear(conn);
   196de:	4630      	mov	r0, r6
   196e0:	f7ff ff00 	bl	194e4 <sc_clear>
   196e4:	e7f7      	b.n	196d6 <disconnected_cb+0x9e>
   196e6:	2207      	movs	r2, #7
   196e8:	4659      	mov	r1, fp
   196ea:	4648      	mov	r0, r9
   196ec:	f00d f884 	bl	267f8 <memcpy>
}
   196f0:	e7d5      	b.n	1969e <disconnected_cb+0x66>
   196f2:	bf00      	nop
   196f4:	00019405 	.word	0x00019405
   196f8:	20000570 	.word	0x20000570

000196fc <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   196fc:	4b13      	ldr	r3, [pc, #76]	; (1974c <bt_gatt_init+0x50>)
   196fe:	2201      	movs	r2, #1
   19700:	f3bf 8f5b 	dmb	ish
   19704:	e853 1f00 	ldrex	r1, [r3]
   19708:	2900      	cmp	r1, #0
   1970a:	d103      	bne.n	19714 <bt_gatt_init+0x18>
   1970c:	e843 2000 	strex	r0, r2, [r3]
   19710:	2800      	cmp	r0, #0
   19712:	d1f7      	bne.n	19704 <bt_gatt_init+0x8>
   19714:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   19718:	d116      	bne.n	19748 <bt_gatt_init+0x4c>
{
   1971a:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1971c:	f7ff ff12 	bl	19544 <bt_gatt_service_init>
	list->head = NULL;
   19720:	4b0b      	ldr	r3, [pc, #44]	; (19750 <bt_gatt_init+0x54>)
   19722:	2200      	movs	r2, #0
   19724:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   19726:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   19728:	4c0a      	ldr	r4, [pc, #40]	; (19754 <bt_gatt_init+0x58>)
   1972a:	490b      	ldr	r1, [pc, #44]	; (19758 <bt_gatt_init+0x5c>)
   1972c:	4620      	mov	r0, r4
   1972e:	f006 f9d9 	bl	1fae4 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   19732:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19736:	2300      	movs	r3, #0
   19738:	4620      	mov	r0, r4
   1973a:	f006 fa79 	bl	1fc30 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1973e:	4907      	ldr	r1, [pc, #28]	; (1975c <bt_gatt_init+0x60>)
   19740:	4807      	ldr	r0, [pc, #28]	; (19760 <bt_gatt_init+0x64>)
   19742:	f006 f9cf 	bl	1fae4 <k_work_init_delayable>
}
   19746:	bd10      	pop	{r4, pc}
   19748:	4770      	bx	lr
   1974a:	bf00      	nop
   1974c:	200025ec 	.word	0x200025ec
   19750:	200025d4 	.word	0x200025d4
   19754:	20001980 	.word	0x20001980
   19758:	00028593 	.word	0x00028593
   1975c:	00019c21 	.word	0x00019c21
   19760:	200019f8 	.word	0x200019f8

00019764 <bt_gatt_attr_get_handle>:
{
   19764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   19768:	2800      	cmp	r0, #0
   1976a:	d03a      	beq.n	197e2 <bt_gatt_attr_get_handle+0x7e>
   1976c:	4606      	mov	r6, r0
	if (attr->handle) {
   1976e:	8a07      	ldrh	r7, [r0, #16]
   19770:	2f00      	cmp	r7, #0
   19772:	d139      	bne.n	197e8 <bt_gatt_attr_get_handle+0x84>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19774:	4d1e      	ldr	r5, [pc, #120]	; (197f0 <bt_gatt_attr_get_handle+0x8c>)
	uint16_t handle = 1;
   19776:	2401      	movs	r4, #1
   19778:	e003      	b.n	19782 <bt_gatt_attr_get_handle+0x1e>
			handle += static_svc->attr_count;
   1977a:	686b      	ldr	r3, [r5, #4]
   1977c:	441c      	add	r4, r3
   1977e:	b2a4      	uxth	r4, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19780:	3508      	adds	r5, #8
   19782:	4b1c      	ldr	r3, [pc, #112]	; (197f4 <bt_gatt_attr_get_handle+0x90>)
   19784:	429d      	cmp	r5, r3
   19786:	d81a      	bhi.n	197be <bt_gatt_attr_get_handle+0x5a>
   19788:	4b1a      	ldr	r3, [pc, #104]	; (197f4 <bt_gatt_attr_get_handle+0x90>)
   1978a:	429d      	cmp	r5, r3
   1978c:	d22c      	bcs.n	197e8 <bt_gatt_attr_get_handle+0x84>
		if ((attr < &static_svc->attrs[0]) ||
   1978e:	6829      	ldr	r1, [r5, #0]
   19790:	42b1      	cmp	r1, r6
   19792:	d8f2      	bhi.n	1977a <bt_gatt_attr_get_handle+0x16>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19794:	6868      	ldr	r0, [r5, #4]
   19796:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1979a:	009b      	lsls	r3, r3, #2
   1979c:	3b14      	subs	r3, #20
   1979e:	440b      	add	r3, r1
		if ((attr < &static_svc->attrs[0]) ||
   197a0:	42b3      	cmp	r3, r6
   197a2:	d3ea      	bcc.n	1977a <bt_gatt_attr_get_handle+0x16>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   197a4:	2300      	movs	r3, #0
   197a6:	4298      	cmp	r0, r3
   197a8:	d9ea      	bls.n	19780 <bt_gatt_attr_get_handle+0x1c>
			if (attr == &static_svc->attrs[i]) {
   197aa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   197ae:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   197b2:	42b2      	cmp	r2, r6
   197b4:	d017      	beq.n	197e6 <bt_gatt_attr_get_handle+0x82>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   197b6:	3301      	adds	r3, #1
   197b8:	3401      	adds	r4, #1
   197ba:	b2a4      	uxth	r4, r4
   197bc:	e7f3      	b.n	197a6 <bt_gatt_attr_get_handle+0x42>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   197be:	f8df 8044 	ldr.w	r8, [pc, #68]	; 19804 <bt_gatt_attr_get_handle+0xa0>
   197c2:	f240 538c 	movw	r3, #1420	; 0x58c
   197c6:	4642      	mov	r2, r8
   197c8:	490b      	ldr	r1, [pc, #44]	; (197f8 <bt_gatt_attr_get_handle+0x94>)
   197ca:	480c      	ldr	r0, [pc, #48]	; (197fc <bt_gatt_attr_get_handle+0x98>)
   197cc:	f00c f82f 	bl	2582e <printk>
   197d0:	480b      	ldr	r0, [pc, #44]	; (19800 <bt_gatt_attr_get_handle+0x9c>)
   197d2:	f00c f82c 	bl	2582e <printk>
   197d6:	f240 518c 	movw	r1, #1420	; 0x58c
   197da:	4640      	mov	r0, r8
   197dc:	f00c faa9 	bl	25d32 <assert_post_action>
   197e0:	e7d2      	b.n	19788 <bt_gatt_attr_get_handle+0x24>
		return 0;
   197e2:	2700      	movs	r7, #0
   197e4:	e000      	b.n	197e8 <bt_gatt_attr_get_handle+0x84>
				return handle;
   197e6:	4627      	mov	r7, r4
}
   197e8:	4638      	mov	r0, r7
   197ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   197ee:	bf00      	nop
   197f0:	00029d60 	.word	0x00029d60
   197f4:	00029d70 	.word	0x00029d70
   197f8:	0002c568 	.word	0x0002c568
   197fc:	00029ff8 	.word	0x00029ff8
   19800:	0002bbac 	.word	0x0002bbac
   19804:	0002c510 	.word	0x0002c510

00019808 <bt_gatt_foreach_attr_type>:
{
   19808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1980c:	b089      	sub	sp, #36	; 0x24
   1980e:	4607      	mov	r7, r0
   19810:	468a      	mov	sl, r1
   19812:	4690      	mov	r8, r2
   19814:	4699      	mov	r9, r3
   19816:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1981a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1981e:	b91b      	cbnz	r3, 19828 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   19820:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19824:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   19828:	4b23      	ldr	r3, [pc, #140]	; (198b8 <bt_gatt_foreach_attr_type+0xb0>)
   1982a:	881b      	ldrh	r3, [r3, #0]
   1982c:	42bb      	cmp	r3, r7
   1982e:	d22f      	bcs.n	19890 <bt_gatt_foreach_attr_type+0x88>
}
   19830:	b009      	add	sp, #36	; 0x24
   19832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   19836:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19838:	3608      	adds	r6, #8
   1983a:	4b20      	ldr	r3, [pc, #128]	; (198bc <bt_gatt_foreach_attr_type+0xb4>)
   1983c:	429e      	cmp	r6, r3
   1983e:	d82a      	bhi.n	19896 <bt_gatt_foreach_attr_type+0x8e>
   19840:	4b1e      	ldr	r3, [pc, #120]	; (198bc <bt_gatt_foreach_attr_type+0xb4>)
   19842:	429e      	cmp	r6, r3
   19844:	d2f4      	bcs.n	19830 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   19846:	6873      	ldr	r3, [r6, #4]
   19848:	18e2      	adds	r2, r4, r3
   1984a:	42ba      	cmp	r2, r7
   1984c:	d3f3      	bcc.n	19836 <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1984e:	2500      	movs	r5, #0
   19850:	9707      	str	r7, [sp, #28]
   19852:	6873      	ldr	r3, [r6, #4]
   19854:	42ab      	cmp	r3, r5
   19856:	d919      	bls.n	1988c <bt_gatt_foreach_attr_type+0x84>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19858:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1985c:	f8cd b010 	str.w	fp, [sp, #16]
   19860:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19862:	9303      	str	r3, [sp, #12]
   19864:	ab12      	add	r3, sp, #72	; 0x48
   19866:	9302      	str	r3, [sp, #8]
   19868:	f8cd 9004 	str.w	r9, [sp, #4]
   1986c:	f8cd 8000 	str.w	r8, [sp]
   19870:	4653      	mov	r3, sl
   19872:	9a07      	ldr	r2, [sp, #28]
   19874:	4621      	mov	r1, r4
   19876:	6837      	ldr	r7, [r6, #0]
   19878:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1987c:	f00e fd03 	bl	28286 <gatt_foreach_iter>
   19880:	2800      	cmp	r0, #0
   19882:	d0d5      	beq.n	19830 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19884:	3501      	adds	r5, #1
   19886:	3401      	adds	r4, #1
   19888:	b2a4      	uxth	r4, r4
   1988a:	e7e2      	b.n	19852 <bt_gatt_foreach_attr_type+0x4a>
   1988c:	9f07      	ldr	r7, [sp, #28]
   1988e:	e7d3      	b.n	19838 <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19890:	4e0b      	ldr	r6, [pc, #44]	; (198c0 <bt_gatt_foreach_attr_type+0xb8>)
		uint16_t handle = 1;
   19892:	2401      	movs	r4, #1
   19894:	e7d1      	b.n	1983a <bt_gatt_foreach_attr_type+0x32>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19896:	4d0b      	ldr	r5, [pc, #44]	; (198c4 <bt_gatt_foreach_attr_type+0xbc>)
   19898:	f44f 63ca 	mov.w	r3, #1616	; 0x650
   1989c:	462a      	mov	r2, r5
   1989e:	490a      	ldr	r1, [pc, #40]	; (198c8 <bt_gatt_foreach_attr_type+0xc0>)
   198a0:	480a      	ldr	r0, [pc, #40]	; (198cc <bt_gatt_foreach_attr_type+0xc4>)
   198a2:	f00b ffc4 	bl	2582e <printk>
   198a6:	480a      	ldr	r0, [pc, #40]	; (198d0 <bt_gatt_foreach_attr_type+0xc8>)
   198a8:	f00b ffc1 	bl	2582e <printk>
   198ac:	f44f 61ca 	mov.w	r1, #1616	; 0x650
   198b0:	4628      	mov	r0, r5
   198b2:	f00c fa3e 	bl	25d32 <assert_post_action>
   198b6:	e7c3      	b.n	19840 <bt_gatt_foreach_attr_type+0x38>
   198b8:	20003754 	.word	0x20003754
   198bc:	00029d70 	.word	0x00029d70
   198c0:	00029d60 	.word	0x00029d60
   198c4:	0002c510 	.word	0x0002c510
   198c8:	0002c568 	.word	0x0002c568
   198cc:	00029ff8 	.word	0x00029ff8
   198d0:	0002bbac 	.word	0x0002bbac

000198d4 <db_hash_gen>:
{
   198d4:	b510      	push	{r4, lr}
   198d6:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   198d8:	2300      	movs	r3, #0
   198da:	9348      	str	r3, [sp, #288]	; 0x120
   198dc:	9349      	str	r3, [sp, #292]	; 0x124
   198de:	934a      	str	r3, [sp, #296]	; 0x128
   198e0:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   198e2:	aa1c      	add	r2, sp, #112	; 0x70
   198e4:	a948      	add	r1, sp, #288	; 0x120
   198e6:	a804      	add	r0, sp, #16
   198e8:	f00c fdd2 	bl	26490 <tc_cmac_setup>
   198ec:	b190      	cbz	r0, 19914 <db_hash_gen+0x40>
   198ee:	ac04      	add	r4, sp, #16
   198f0:	9402      	str	r4, [sp, #8]
   198f2:	4b26      	ldr	r3, [pc, #152]	; (1998c <db_hash_gen+0xb8>)
   198f4:	9301      	str	r3, [sp, #4]
   198f6:	2200      	movs	r2, #0
   198f8:	9200      	str	r2, [sp, #0]
   198fa:	4613      	mov	r3, r2
   198fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19900:	2001      	movs	r0, #1
   19902:	f7ff ff81 	bl	19808 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19906:	4621      	mov	r1, r4
   19908:	4821      	ldr	r0, [pc, #132]	; (19990 <db_hash_gen+0xbc>)
   1990a:	f00c fe5c 	bl	265c6 <tc_cmac_final>
   1990e:	b190      	cbz	r0, 19936 <db_hash_gen+0x62>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   19910:	2300      	movs	r3, #0
   19912:	e029      	b.n	19968 <db_hash_gen+0x94>
   19914:	4b1f      	ldr	r3, [pc, #124]	; (19994 <db_hash_gen+0xc0>)
   19916:	4a20      	ldr	r2, [pc, #128]	; (19998 <db_hash_gen+0xc4>)
   19918:	1a9b      	subs	r3, r3, r2
   1991a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to setup AES CMAC");
   1991c:	f04f 0100 	mov.w	r1, #0
   19920:	2201      	movs	r2, #1
   19922:	f362 0102 	bfi	r1, r2, #0, #3
   19926:	f36f 01c5 	bfc	r1, #3, #3
   1992a:	f363 118f 	bfi	r1, r3, #6, #10
   1992e:	481b      	ldr	r0, [pc, #108]	; (1999c <db_hash_gen+0xc8>)
   19930:	f7f8 f840 	bl	119b4 <log_0>
		return;
   19934:	e027      	b.n	19986 <db_hash_gen+0xb2>
   19936:	4b17      	ldr	r3, [pc, #92]	; (19994 <db_hash_gen+0xc0>)
   19938:	4a17      	ldr	r2, [pc, #92]	; (19998 <db_hash_gen+0xc4>)
   1993a:	1a9b      	subs	r3, r3, r2
   1993c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to calculate hash");
   1993e:	f04f 0100 	mov.w	r1, #0
   19942:	2201      	movs	r2, #1
   19944:	f362 0102 	bfi	r1, r2, #0, #3
   19948:	f36f 01c5 	bfc	r1, #3, #3
   1994c:	f363 118f 	bfi	r1, r3, #6, #10
   19950:	4813      	ldr	r0, [pc, #76]	; (199a0 <db_hash_gen+0xcc>)
   19952:	f7f8 f82f 	bl	119b4 <log_0>
		return;
   19956:	e016      	b.n	19986 <db_hash_gen+0xb2>
		uint8_t tmp = ((uint8_t *)buf)[i];
   19958:	4a0d      	ldr	r2, [pc, #52]	; (19990 <db_hash_gen+0xbc>)
   1995a:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1995c:	f1c3 010f 	rsb	r1, r3, #15
   19960:	5c54      	ldrb	r4, [r2, r1]
   19962:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   19964:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   19966:	3301      	adds	r3, #1
   19968:	2b07      	cmp	r3, #7
   1996a:	d9f5      	bls.n	19958 <db_hash_gen+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1996c:	4b0d      	ldr	r3, [pc, #52]	; (199a4 <db_hash_gen+0xd0>)
   1996e:	f3bf 8f5b 	dmb	ish
   19972:	e853 2f00 	ldrex	r2, [r3]
   19976:	f042 0204 	orr.w	r2, r2, #4
   1997a:	e843 2100 	strex	r1, r2, [r3]
   1997e:	2900      	cmp	r1, #0
   19980:	d1f7      	bne.n	19972 <db_hash_gen+0x9e>
   19982:	f3bf 8f5b 	dmb	ish
}
   19986:	b04c      	add	sp, #304	; 0x130
   19988:	bd10      	pop	{r4, pc}
   1998a:	bf00      	nop
   1998c:	0002809f 	.word	0x0002809f
   19990:	20001970 	.word	0x20001970
   19994:	00029d90 	.word	0x00029d90
   19998:	00029d70 	.word	0x00029d70
   1999c:	0002c598 	.word	0x0002c598
   199a0:	0002c5b4 	.word	0x0002c5b4
   199a4:	20001a28 	.word	0x20001a28

000199a8 <gatt_find_by_uuid>:
{
   199a8:	b510      	push	{r4, lr}
   199aa:	b084      	sub	sp, #16
   199ac:	4604      	mov	r4, r0
   199ae:	460a      	mov	r2, r1
	found->attr = NULL;
   199b0:	2300      	movs	r3, #0
   199b2:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   199b4:	9002      	str	r0, [sp, #8]
   199b6:	4907      	ldr	r1, [pc, #28]	; (199d4 <gatt_find_by_uuid+0x2c>)
   199b8:	9101      	str	r1, [sp, #4]
   199ba:	2101      	movs	r1, #1
   199bc:	9100      	str	r1, [sp, #0]
   199be:	f64f 71ff 	movw	r1, #65535	; 0xffff
   199c2:	8880      	ldrh	r0, [r0, #4]
   199c4:	f7ff ff20 	bl	19808 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   199c8:	6820      	ldr	r0, [r4, #0]
}
   199ca:	3800      	subs	r0, #0
   199cc:	bf18      	it	ne
   199ce:	2001      	movne	r0, #1
   199d0:	b004      	add	sp, #16
   199d2:	bd10      	pop	{r4, pc}
   199d4:	00028097 	.word	0x00028097

000199d8 <gatt_indicate>:
{
   199d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   199dc:	b082      	sub	sp, #8
   199de:	4606      	mov	r6, r0
   199e0:	460f      	mov	r7, r1
   199e2:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   199e4:	2214      	movs	r2, #20
   199e6:	6861      	ldr	r1, [r4, #4]
   199e8:	f00e fdd8 	bl	2859c <bt_gatt_check_perm>
   199ec:	bb80      	cbnz	r0, 19a50 <gatt_indicate+0x78>
	len = sizeof(*ind) + params->len;
   199ee:	8aa5      	ldrh	r5, [r4, #20]
   199f0:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   199f2:	9500      	str	r5, [sp, #0]
   199f4:	231d      	movs	r3, #29
   199f6:	2200      	movs	r2, #0
   199f8:	4621      	mov	r1, r4
   199fa:	482d      	ldr	r0, [pc, #180]	; (19ab0 <gatt_indicate+0xd8>)
   199fc:	f00e fc6e 	bl	282dc <gatt_req_alloc>
	if (!req) {
   19a00:	4680      	mov	r8, r0
   19a02:	2800      	cmp	r0, #0
   19a04:	d051      	beq.n	19aaa <gatt_indicate+0xd2>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   19a06:	462a      	mov	r2, r5
   19a08:	211d      	movs	r1, #29
   19a0a:	4630      	mov	r0, r6
   19a0c:	f7ff f87e 	bl	18b0c <bt_att_create_pdu>
	if (!buf) {
   19a10:	4681      	mov	r9, r0
   19a12:	b380      	cbz	r0, 19a76 <gatt_indicate+0x9e>
   19a14:	f100 0a08 	add.w	sl, r0, #8
   19a18:	2102      	movs	r1, #2
   19a1a:	4650      	mov	r0, sl
   19a1c:	f000 fee8 	bl	1a7f0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   19a20:	4605      	mov	r5, r0
   19a22:	f825 7b02 	strh.w	r7, [r5], #2
   19a26:	8aa1      	ldrh	r1, [r4, #20]
   19a28:	4650      	mov	r0, sl
   19a2a:	f000 fee1 	bl	1a7f0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   19a2e:	8aa2      	ldrh	r2, [r4, #20]
   19a30:	6921      	ldr	r1, [r4, #16]
   19a32:	4628      	mov	r0, r5
   19a34:	f00c fee0 	bl	267f8 <memcpy>
	req->buf = buf;
   19a38:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   19a3c:	4641      	mov	r1, r8
   19a3e:	4630      	mov	r0, r6
   19a40:	f7ff fbb8 	bl	191b4 <bt_att_req_send>
	if (err) {
   19a44:	4604      	mov	r4, r0
   19a46:	bb60      	cbnz	r0, 19aa2 <gatt_indicate+0xca>
}
   19a48:	4620      	mov	r0, r4
   19a4a:	b002      	add	sp, #8
   19a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19a50:	4b18      	ldr	r3, [pc, #96]	; (19ab4 <gatt_indicate+0xdc>)
   19a52:	4a19      	ldr	r2, [pc, #100]	; (19ab8 <gatt_indicate+0xe0>)
   19a54:	1a9b      	subs	r3, r3, r2
   19a56:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   19a58:	f04f 0100 	mov.w	r1, #0
   19a5c:	2202      	movs	r2, #2
   19a5e:	f362 0102 	bfi	r1, r2, #0, #3
   19a62:	f36f 01c5 	bfc	r1, #3, #3
   19a66:	f363 118f 	bfi	r1, r3, #6, #10
   19a6a:	4814      	ldr	r0, [pc, #80]	; (19abc <gatt_indicate+0xe4>)
   19a6c:	f7f7 ffa2 	bl	119b4 <log_0>
		return -EPERM;
   19a70:	f04f 34ff 	mov.w	r4, #4294967295
   19a74:	e7e8      	b.n	19a48 <gatt_indicate+0x70>
   19a76:	4b0f      	ldr	r3, [pc, #60]	; (19ab4 <gatt_indicate+0xdc>)
   19a78:	4a0f      	ldr	r2, [pc, #60]	; (19ab8 <gatt_indicate+0xe0>)
   19a7a:	1a9b      	subs	r3, r3, r2
   19a7c:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send indication");
   19a7e:	f04f 0100 	mov.w	r1, #0
   19a82:	2202      	movs	r2, #2
   19a84:	f362 0102 	bfi	r1, r2, #0, #3
   19a88:	f36f 01c5 	bfc	r1, #3, #3
   19a8c:	f363 118f 	bfi	r1, r3, #6, #10
   19a90:	480b      	ldr	r0, [pc, #44]	; (19ac0 <gatt_indicate+0xe8>)
   19a92:	f7f7 ff8f 	bl	119b4 <log_0>
		bt_att_req_free(req);
   19a96:	4640      	mov	r0, r8
   19a98:	f7ff fa8c 	bl	18fb4 <bt_att_req_free>
		return -ENOMEM;
   19a9c:	f06f 040b 	mvn.w	r4, #11
   19aa0:	e7d2      	b.n	19a48 <gatt_indicate+0x70>
		bt_att_req_free(req);
   19aa2:	4640      	mov	r0, r8
   19aa4:	f7ff fa86 	bl	18fb4 <bt_att_req_free>
   19aa8:	e7ce      	b.n	19a48 <gatt_indicate+0x70>
		return -ENOMEM;
   19aaa:	f06f 040b 	mvn.w	r4, #11
   19aae:	e7cb      	b.n	19a48 <gatt_indicate+0x70>
   19ab0:	00028075 	.word	0x00028075
   19ab4:	00029d90 	.word	0x00029d90
   19ab8:	00029d70 	.word	0x00029d70
   19abc:	0002c5d0 	.word	0x0002c5d0
   19ac0:	0002c5e8 	.word	0x0002c5e8

00019ac4 <bt_gatt_indicate>:
{
   19ac4:	b570      	push	{r4, r5, r6, lr}
   19ac6:	b08c      	sub	sp, #48	; 0x30
   19ac8:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   19aca:	460c      	mov	r4, r1
   19acc:	2900      	cmp	r1, #0
   19ace:	d044      	beq.n	19b5a <bt_gatt_indicate+0x96>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   19ad0:	6863      	ldr	r3, [r4, #4]
   19ad2:	2b00      	cmp	r3, #0
   19ad4:	d052      	beq.n	19b7c <bt_gatt_indicate+0xb8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19ad6:	f3bf 8f5b 	dmb	ish
   19ada:	4b4a      	ldr	r3, [pc, #296]	; (19c04 <bt_gatt_indicate+0x140>)
   19adc:	681b      	ldr	r3, [r3, #0]
   19ade:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19ae2:	f013 0f02 	tst.w	r3, #2
   19ae6:	f000 8083 	beq.w	19bf0 <bt_gatt_indicate+0x12c>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   19aea:	b11d      	cbz	r5, 19af4 <bt_gatt_indicate+0x30>
   19aec:	7aab      	ldrb	r3, [r5, #10]
   19aee:	2b07      	cmp	r3, #7
   19af0:	f040 8081 	bne.w	19bf6 <bt_gatt_indicate+0x132>
	data.attr = params->attr;
   19af4:	6860      	ldr	r0, [r4, #4]
   19af6:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19af8:	f7ff fe34 	bl	19764 <bt_gatt_attr_get_handle>
   19afc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   19b00:	6821      	ldr	r1, [r4, #0]
   19b02:	2900      	cmp	r1, #0
   19b04:	d04e      	beq.n	19ba4 <bt_gatt_indicate+0xe0>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   19b06:	a805      	add	r0, sp, #20
   19b08:	f7ff ff4e 	bl	199a8 <gatt_find_by_uuid>
   19b0c:	2800      	cmp	r0, #0
   19b0e:	d075      	beq.n	19bfc <bt_gatt_indicate+0x138>
		params->attr = data.attr;
   19b10:	9b05      	ldr	r3, [sp, #20]
   19b12:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   19b14:	9b05      	ldr	r3, [sp, #20]
   19b16:	6818      	ldr	r0, [r3, #0]
   19b18:	2300      	movs	r3, #0
   19b1a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   19b1e:	f642 0303 	movw	r3, #10243	; 0x2803
   19b22:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   19b26:	a90b      	add	r1, sp, #44	; 0x2c
   19b28:	f00c fedb 	bl	268e2 <bt_uuid_cmp>
   19b2c:	b948      	cbnz	r0, 19b42 <bt_gatt_indicate+0x7e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   19b2e:	9805      	ldr	r0, [sp, #20]
   19b30:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   19b32:	799b      	ldrb	r3, [r3, #6]
   19b34:	f013 0f20 	tst.w	r3, #32
   19b38:	d039      	beq.n	19bae <bt_gatt_indicate+0xea>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   19b3a:	f00e fcdb 	bl	284f4 <bt_gatt_attr_value_handle>
   19b3e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   19b42:	2d00      	cmp	r5, #0
   19b44:	d036      	beq.n	19bb4 <bt_gatt_indicate+0xf0>
		params->_ref = 1;
   19b46:	2301      	movs	r3, #1
   19b48:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   19b4a:	4622      	mov	r2, r4
   19b4c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   19b50:	4628      	mov	r0, r5
   19b52:	f7ff ff41 	bl	199d8 <gatt_indicate>
}
   19b56:	b00c      	add	sp, #48	; 0x30
   19b58:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(params, "invalid parameters\n");
   19b5a:	4e2b      	ldr	r6, [pc, #172]	; (19c08 <bt_gatt_indicate+0x144>)
   19b5c:	f640 1348 	movw	r3, #2376	; 0x948
   19b60:	4632      	mov	r2, r6
   19b62:	492a      	ldr	r1, [pc, #168]	; (19c0c <bt_gatt_indicate+0x148>)
   19b64:	482a      	ldr	r0, [pc, #168]	; (19c10 <bt_gatt_indicate+0x14c>)
   19b66:	f00b fe62 	bl	2582e <printk>
   19b6a:	482a      	ldr	r0, [pc, #168]	; (19c14 <bt_gatt_indicate+0x150>)
   19b6c:	f00b fe5f 	bl	2582e <printk>
   19b70:	f640 1148 	movw	r1, #2376	; 0x948
   19b74:	4630      	mov	r0, r6
   19b76:	f00c f8dc 	bl	25d32 <assert_post_action>
   19b7a:	e7a9      	b.n	19ad0 <bt_gatt_indicate+0xc>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   19b7c:	6823      	ldr	r3, [r4, #0]
   19b7e:	2b00      	cmp	r3, #0
   19b80:	d1a9      	bne.n	19ad6 <bt_gatt_indicate+0x12>
   19b82:	4e21      	ldr	r6, [pc, #132]	; (19c08 <bt_gatt_indicate+0x144>)
   19b84:	f640 1349 	movw	r3, #2377	; 0x949
   19b88:	4632      	mov	r2, r6
   19b8a:	4923      	ldr	r1, [pc, #140]	; (19c18 <bt_gatt_indicate+0x154>)
   19b8c:	4820      	ldr	r0, [pc, #128]	; (19c10 <bt_gatt_indicate+0x14c>)
   19b8e:	f00b fe4e 	bl	2582e <printk>
   19b92:	4820      	ldr	r0, [pc, #128]	; (19c14 <bt_gatt_indicate+0x150>)
   19b94:	f00b fe4b 	bl	2582e <printk>
   19b98:	f640 1149 	movw	r1, #2377	; 0x949
   19b9c:	4630      	mov	r0, r6
   19b9e:	f00c f8c8 	bl	25d32 <assert_post_action>
   19ba2:	e798      	b.n	19ad6 <bt_gatt_indicate+0x12>
		if (!data.handle) {
   19ba4:	2800      	cmp	r0, #0
   19ba6:	d1b5      	bne.n	19b14 <bt_gatt_indicate+0x50>
			return -ENOENT;
   19ba8:	f06f 0001 	mvn.w	r0, #1
   19bac:	e7d3      	b.n	19b56 <bt_gatt_indicate+0x92>
			return -EINVAL;
   19bae:	f06f 0015 	mvn.w	r0, #21
   19bb2:	e7d0      	b.n	19b56 <bt_gatt_indicate+0x92>
	data.err = -ENOTCONN;
   19bb4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   19bb8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   19bba:	2302      	movs	r3, #2
   19bbc:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   19bc0:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   19bc2:	2300      	movs	r3, #0
   19bc4:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19bc6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   19bca:	f642 1202 	movw	r2, #10498	; 0x2902
   19bce:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   19bd2:	aa05      	add	r2, sp, #20
   19bd4:	9202      	str	r2, [sp, #8]
   19bd6:	4a11      	ldr	r2, [pc, #68]	; (19c1c <bt_gatt_indicate+0x158>)
   19bd8:	9201      	str	r2, [sp, #4]
   19bda:	2201      	movs	r2, #1
   19bdc:	9200      	str	r2, [sp, #0]
   19bde:	aa0a      	add	r2, sp, #40	; 0x28
   19be0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19be4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   19be8:	f7ff fe0e 	bl	19808 <bt_gatt_foreach_attr_type>
	return data.err;
   19bec:	9807      	ldr	r0, [sp, #28]
   19bee:	e7b2      	b.n	19b56 <bt_gatt_indicate+0x92>
		return -EAGAIN;
   19bf0:	f06f 000a 	mvn.w	r0, #10
   19bf4:	e7af      	b.n	19b56 <bt_gatt_indicate+0x92>
		return -ENOTCONN;
   19bf6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19bfa:	e7ac      	b.n	19b56 <bt_gatt_indicate+0x92>
			return -ENOENT;
   19bfc:	f06f 0001 	mvn.w	r0, #1
   19c00:	e7a9      	b.n	19b56 <bt_gatt_indicate+0x92>
   19c02:	bf00      	nop
   19c04:	2000037c 	.word	0x2000037c
   19c08:	0002c510 	.word	0x0002c510
   19c0c:	0002c610 	.word	0x0002c610
   19c10:	00029ff8 	.word	0x00029ff8
   19c14:	0002c618 	.word	0x0002c618
   19c18:	0002c630 	.word	0x0002c630
   19c1c:	00019e2d 	.word	0x00019e2d

00019c20 <sc_process>:
{
   19c20:	b570      	push	{r4, r5, r6, lr}
   19c22:	b082      	sub	sp, #8
   19c24:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   19c26:	f100 0530 	add.w	r5, r0, #48	; 0x30
   19c2a:	f3bf 8f5b 	dmb	ish
   19c2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   19c30:	f3bf 8f5b 	dmb	ish
   19c34:	f013 0f02 	tst.w	r3, #2
   19c38:	d12b      	bne.n	19c92 <sc_process+0x72>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   19c3a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   19c3e:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   19c42:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   19c46:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19c4a:	f3bf 8f5b 	dmb	ish
   19c4e:	e855 3f00 	ldrex	r3, [r5]
   19c52:	f023 0301 	bic.w	r3, r3, #1
   19c56:	e845 3200 	strex	r2, r3, [r5]
   19c5a:	2a00      	cmp	r2, #0
   19c5c:	d1f7      	bne.n	19c4e <sc_process+0x2e>
   19c5e:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   19c62:	2000      	movs	r0, #0
   19c64:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   19c68:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   19c6c:	4b18      	ldr	r3, [pc, #96]	; (19cd0 <sc_process+0xb0>)
   19c6e:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   19c72:	4b18      	ldr	r3, [pc, #96]	; (19cd4 <sc_process+0xb4>)
   19c74:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   19c78:	ab01      	add	r3, sp, #4
   19c7a:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   19c7e:	2304      	movs	r3, #4
   19c80:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   19c84:	f1a4 0120 	sub.w	r1, r4, #32
   19c88:	f7ff ff1c 	bl	19ac4 <bt_gatt_indicate>
   19c8c:	b190      	cbz	r0, 19cb4 <sc_process+0x94>
}
   19c8e:	b002      	add	sp, #8
   19c90:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   19c92:	4e11      	ldr	r6, [pc, #68]	; (19cd8 <sc_process+0xb8>)
   19c94:	f240 33e7 	movw	r3, #999	; 0x3e7
   19c98:	4632      	mov	r2, r6
   19c9a:	4910      	ldr	r1, [pc, #64]	; (19cdc <sc_process+0xbc>)
   19c9c:	4810      	ldr	r0, [pc, #64]	; (19ce0 <sc_process+0xc0>)
   19c9e:	f00b fdc6 	bl	2582e <printk>
   19ca2:	4810      	ldr	r0, [pc, #64]	; (19ce4 <sc_process+0xc4>)
   19ca4:	f00b fdc3 	bl	2582e <printk>
   19ca8:	f240 31e7 	movw	r1, #999	; 0x3e7
   19cac:	4630      	mov	r0, r6
   19cae:	f00c f840 	bl	25d32 <assert_post_action>
   19cb2:	e7c2      	b.n	19c3a <sc_process+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19cb4:	f3bf 8f5b 	dmb	ish
   19cb8:	e855 3f00 	ldrex	r3, [r5]
   19cbc:	f043 0302 	orr.w	r3, r3, #2
   19cc0:	e845 3200 	strex	r2, r3, [r5]
   19cc4:	2a00      	cmp	r2, #0
   19cc6:	d1f7      	bne.n	19cb8 <sc_process+0x98>
   19cc8:	f3bf 8f5b 	dmb	ish
   19ccc:	e7df      	b.n	19c8e <sc_process+0x6e>
   19cce:	bf00      	nop
   19cd0:	0002c738 	.word	0x0002c738
   19cd4:	000195c5 	.word	0x000195c5
   19cd8:	0002c510 	.word	0x0002c510
   19cdc:	0002c650 	.word	0x0002c650
   19ce0:	00029ff8 	.word	0x00029ff8
   19ce4:	0002c684 	.word	0x0002c684

00019ce8 <sc_restore>:
{
   19ce8:	b510      	push	{r4, lr}
   19cea:	b082      	sub	sp, #8
   19cec:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19cee:	f100 0190 	add.w	r1, r0, #144	; 0x90
   19cf2:	7a00      	ldrb	r0, [r0, #8]
   19cf4:	f7ff fac8 	bl	19288 <find_sc_cfg>
	if (!cfg) {
   19cf8:	b1f0      	cbz	r0, 19d38 <sc_restore+0x50>
   19cfa:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   19cfc:	8902      	ldrh	r2, [r0, #8]
   19cfe:	b90a      	cbnz	r2, 19d04 <sc_restore+0x1c>
   19d00:	8941      	ldrh	r1, [r0, #10]
   19d02:	b1c9      	cbz	r1, 19d38 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   19d04:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   19d08:	895b      	ldrh	r3, [r3, #10]
   19d0a:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   19d0e:	4620      	mov	r0, r4
   19d10:	f7fd fc1a 	bl	17548 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   19d14:	4912      	ldr	r1, [pc, #72]	; (19d60 <sc_restore+0x78>)
   19d16:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   19d1a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   19d1e:	4a11      	ldr	r2, [pc, #68]	; (19d64 <sc_restore+0x7c>)
   19d20:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   19d22:	4a11      	ldr	r2, [pc, #68]	; (19d68 <sc_restore+0x80>)
   19d24:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   19d26:	aa01      	add	r2, sp, #4
   19d28:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   19d2a:	2204      	movs	r2, #4
   19d2c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19d2e:	4619      	mov	r1, r3
   19d30:	4620      	mov	r0, r4
   19d32:	f7ff fec7 	bl	19ac4 <bt_gatt_indicate>
   19d36:	b908      	cbnz	r0, 19d3c <sc_restore+0x54>
}
   19d38:	b002      	add	sp, #8
   19d3a:	bd10      	pop	{r4, pc}
   19d3c:	4b0b      	ldr	r3, [pc, #44]	; (19d6c <sc_restore+0x84>)
   19d3e:	4a0c      	ldr	r2, [pc, #48]	; (19d70 <sc_restore+0x88>)
   19d40:	1a9b      	subs	r3, r3, r2
   19d42:	08db      	lsrs	r3, r3, #3
		BT_ERR("SC restore indication failed");
   19d44:	f04f 0100 	mov.w	r1, #0
   19d48:	2201      	movs	r2, #1
   19d4a:	f362 0102 	bfi	r1, r2, #0, #3
   19d4e:	f36f 01c5 	bfc	r1, #3, #3
   19d52:	f363 118f 	bfi	r1, r3, #6, #10
   19d56:	4807      	ldr	r0, [pc, #28]	; (19d74 <sc_restore+0x8c>)
   19d58:	f7f7 fe2c 	bl	119b4 <log_0>
   19d5c:	e7ec      	b.n	19d38 <sc_restore+0x50>
   19d5e:	bf00      	nop
   19d60:	200025fc 	.word	0x200025fc
   19d64:	0002c738 	.word	0x0002c738
   19d68:	0002823f 	.word	0x0002823f
   19d6c:	00029d90 	.word	0x00029d90
   19d70:	00029d70 	.word	0x00029d70
   19d74:	0002c6a0 	.word	0x0002c6a0

00019d78 <gatt_notify>:
{
   19d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d7c:	4606      	mov	r6, r0
   19d7e:	460f      	mov	r7, r1
   19d80:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   19d82:	2214      	movs	r2, #20
   19d84:	6861      	ldr	r1, [r4, #4]
   19d86:	f00e fc09 	bl	2859c <bt_gatt_check_perm>
   19d8a:	bb08      	cbnz	r0, 19dd0 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   19d8c:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   19d8e:	3202      	adds	r2, #2
   19d90:	211b      	movs	r1, #27
   19d92:	4630      	mov	r0, r6
   19d94:	f7fe feba 	bl	18b0c <bt_att_create_pdu>
	if (!buf) {
   19d98:	4680      	mov	r8, r0
   19d9a:	b360      	cbz	r0, 19df6 <gatt_notify+0x7e>
   19d9c:	f100 0908 	add.w	r9, r0, #8
   19da0:	2102      	movs	r1, #2
   19da2:	4648      	mov	r0, r9
   19da4:	f000 fd24 	bl	1a7f0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   19da8:	4605      	mov	r5, r0
   19daa:	f825 7b02 	strh.w	r7, [r5], #2
   19dae:	89a1      	ldrh	r1, [r4, #12]
   19db0:	4648      	mov	r0, r9
   19db2:	f000 fd1d 	bl	1a7f0 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   19db6:	89a2      	ldrh	r2, [r4, #12]
   19db8:	68a1      	ldr	r1, [r4, #8]
   19dba:	4628      	mov	r0, r5
   19dbc:	f00c fd1c 	bl	267f8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   19dc0:	6963      	ldr	r3, [r4, #20]
   19dc2:	6922      	ldr	r2, [r4, #16]
   19dc4:	4641      	mov	r1, r8
   19dc6:	4630      	mov	r0, r6
   19dc8:	f7ff f9a6 	bl	19118 <bt_att_send>
}
   19dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19dd0:	4b12      	ldr	r3, [pc, #72]	; (19e1c <gatt_notify+0xa4>)
   19dd2:	4a13      	ldr	r2, [pc, #76]	; (19e20 <gatt_notify+0xa8>)
   19dd4:	1a9b      	subs	r3, r3, r2
   19dd6:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   19dd8:	f04f 0100 	mov.w	r1, #0
   19ddc:	2202      	movs	r2, #2
   19dde:	f362 0102 	bfi	r1, r2, #0, #3
   19de2:	f36f 01c5 	bfc	r1, #3, #3
   19de6:	f363 118f 	bfi	r1, r3, #6, #10
   19dea:	480e      	ldr	r0, [pc, #56]	; (19e24 <gatt_notify+0xac>)
   19dec:	f7f7 fde2 	bl	119b4 <log_0>
		return -EPERM;
   19df0:	f04f 30ff 	mov.w	r0, #4294967295
   19df4:	e7ea      	b.n	19dcc <gatt_notify+0x54>
   19df6:	4b09      	ldr	r3, [pc, #36]	; (19e1c <gatt_notify+0xa4>)
   19df8:	4a09      	ldr	r2, [pc, #36]	; (19e20 <gatt_notify+0xa8>)
   19dfa:	1a9b      	subs	r3, r3, r2
   19dfc:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send notification");
   19dfe:	f04f 0100 	mov.w	r1, #0
   19e02:	2202      	movs	r2, #2
   19e04:	f362 0102 	bfi	r1, r2, #0, #3
   19e08:	f36f 01c5 	bfc	r1, #3, #3
   19e0c:	f363 118f 	bfi	r1, r3, #6, #10
   19e10:	4805      	ldr	r0, [pc, #20]	; (19e28 <gatt_notify+0xb0>)
   19e12:	f7f7 fdcf 	bl	119b4 <log_0>
		return -ENOMEM;
   19e16:	f06f 000b 	mvn.w	r0, #11
   19e1a:	e7d7      	b.n	19dcc <gatt_notify+0x54>
   19e1c:	00029d90 	.word	0x00029d90
   19e20:	00029d70 	.word	0x00029d70
   19e24:	0002c5d0 	.word	0x0002c5d0
   19e28:	0002c6c0 	.word	0x0002c6c0

00019e2c <notify_cb>:
{
   19e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e30:	b083      	sub	sp, #12
   19e32:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19e34:	6882      	ldr	r2, [r0, #8]
   19e36:	4b50      	ldr	r3, [pc, #320]	; (19f78 <notify_cb+0x14c>)
   19e38:	429a      	cmp	r2, r3
   19e3a:	d005      	beq.n	19e48 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   19e3c:	f04f 0a01 	mov.w	sl, #1
}
   19e40:	4650      	mov	r0, sl
   19e42:	b003      	add	sp, #12
   19e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e48:	4607      	mov	r7, r0
	ccc = attr->user_data;
   19e4a:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   19e4c:	4b4b      	ldr	r3, [pc, #300]	; (19f7c <notify_cb+0x150>)
   19e4e:	429d      	cmp	r5, r3
   19e50:	d031      	beq.n	19eb6 <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19e52:	2400      	movs	r4, #0
   19e54:	e05c      	b.n	19f10 <notify_cb+0xe4>
				sc = (struct sc_data *)data->ind_params->data;
   19e56:	6933      	ldr	r3, [r6, #16]
   19e58:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   19e5a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   19e5e:	8853      	ldrh	r3, [r2, #2]
   19e60:	8812      	ldrh	r2, [r2, #0]
   19e62:	4649      	mov	r1, r9
   19e64:	f8df c118 	ldr.w	ip, [pc, #280]	; 19f80 <notify_cb+0x154>
   19e68:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   19e6c:	f7ff fa86 	bl	1937c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19e70:	3401      	adds	r4, #1
   19e72:	2c00      	cmp	r4, #0
   19e74:	d1ed      	bne.n	19e52 <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   19e76:	eb04 0944 	add.w	r9, r4, r4, lsl #1
   19e7a:	4b41      	ldr	r3, [pc, #260]	; (19f80 <notify_cb+0x154>)
   19e7c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   19e80:	f109 0901 	add.w	r9, r9, #1
   19e84:	2300      	movs	r3, #0
   19e86:	9300      	str	r3, [sp, #0]
   19e88:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   19e8c:	2207      	movs	r2, #7
   19e8e:	4669      	mov	r1, sp
   19e90:	4648      	mov	r0, r9
   19e92:	f00c fc84 	bl	2679e <memcmp>
   19e96:	2800      	cmp	r0, #0
   19e98:	d0ea      	beq.n	19e70 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   19e9a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19e9e:	2207      	movs	r2, #7
   19ea0:	4649      	mov	r1, r9
   19ea2:	4837      	ldr	r0, [pc, #220]	; (19f80 <notify_cb+0x154>)
   19ea4:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   19ea8:	f7fd fd04 	bl	178b4 <bt_conn_lookup_state_le>
			if (!conn) {
   19eac:	2800      	cmp	r0, #0
   19eae:	d0d2      	beq.n	19e56 <notify_cb+0x2a>
			bt_conn_unref(conn);
   19eb0:	f7fd fa0c 	bl	172cc <bt_conn_unref>
   19eb4:	e7dc      	b.n	19e70 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19eb6:	2400      	movs	r4, #0
   19eb8:	e7db      	b.n	19e72 <notify_cb+0x46>
			bt_conn_unref(conn);
   19eba:	f7fd fa07 	bl	172cc <bt_conn_unref>
			continue;
   19ebe:	e026      	b.n	19f0e <notify_cb+0xe2>
			bt_conn_unref(conn);
   19ec0:	4648      	mov	r0, r9
   19ec2:	f7fd fa03 	bl	172cc <bt_conn_unref>
			continue;
   19ec6:	e022      	b.n	19f0e <notify_cb+0xe2>
   19ec8:	4b2e      	ldr	r3, [pc, #184]	; (19f84 <notify_cb+0x158>)
   19eca:	4a2f      	ldr	r2, [pc, #188]	; (19f88 <notify_cb+0x15c>)
   19ecc:	1a9b      	subs	r3, r3, r2
   19ece:	08db      	lsrs	r3, r3, #3
			BT_WARN("Link is not encrypted");
   19ed0:	2202      	movs	r2, #2
   19ed2:	f362 0802 	bfi	r8, r2, #0, #3
   19ed6:	f36f 08c5 	bfc	r8, #3, #3
   19eda:	f363 188f 	bfi	r8, r3, #6, #10
   19ede:	4641      	mov	r1, r8
   19ee0:	482a      	ldr	r0, [pc, #168]	; (19f8c <notify_cb+0x160>)
   19ee2:	f7f7 fd67 	bl	119b4 <log_0>
			continue;
   19ee6:	e012      	b.n	19f0e <notify_cb+0xe2>
			err = gatt_indicate(conn, data->handle,
   19ee8:	6932      	ldr	r2, [r6, #16]
   19eea:	88b1      	ldrh	r1, [r6, #4]
   19eec:	4648      	mov	r0, r9
   19eee:	f7ff fd73 	bl	199d8 <gatt_indicate>
			if (err == 0) {
   19ef2:	4683      	mov	fp, r0
   19ef4:	b918      	cbnz	r0, 19efe <notify_cb+0xd2>
				data->ind_params->_ref++;
   19ef6:	6932      	ldr	r2, [r6, #16]
   19ef8:	7d93      	ldrb	r3, [r2, #22]
   19efa:	3301      	adds	r3, #1
   19efc:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   19efe:	4648      	mov	r0, r9
   19f00:	f7fd f9e4 	bl	172cc <bt_conn_unref>
		if (err < 0) {
   19f04:	f1bb 0f00 	cmp.w	fp, #0
   19f08:	db9a      	blt.n	19e40 <notify_cb+0x14>
		data->err = 0;
   19f0a:	2300      	movs	r3, #0
   19f0c:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19f0e:	3401      	adds	r4, #1
   19f10:	bb74      	cbnz	r4, 19f70 <notify_cb+0x144>
		if (cfg->value != data->type) {
   19f12:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19f16:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   19f1a:	891a      	ldrh	r2, [r3, #8]
   19f1c:	89b3      	ldrh	r3, [r6, #12]
   19f1e:	429a      	cmp	r2, r3
   19f20:	d1f5      	bne.n	19f0e <notify_cb+0xe2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19f22:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19f26:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   19f2a:	3101      	adds	r1, #1
   19f2c:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   19f30:	f7fd fc48 	bl	177c4 <bt_conn_lookup_addr_le>
		if (!conn) {
   19f34:	4681      	mov	r9, r0
   19f36:	2800      	cmp	r0, #0
   19f38:	d0e9      	beq.n	19f0e <notify_cb+0xe2>
		if (conn->state != BT_CONN_CONNECTED) {
   19f3a:	7a83      	ldrb	r3, [r0, #10]
   19f3c:	2b07      	cmp	r3, #7
   19f3e:	d1bc      	bne.n	19eba <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   19f40:	696b      	ldr	r3, [r5, #20]
   19f42:	b11b      	cbz	r3, 19f4c <notify_cb+0x120>
   19f44:	4639      	mov	r1, r7
   19f46:	4798      	blx	r3
   19f48:	2800      	cmp	r0, #0
   19f4a:	d0b9      	beq.n	19ec0 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   19f4c:	2214      	movs	r2, #20
   19f4e:	4639      	mov	r1, r7
   19f50:	4648      	mov	r0, r9
   19f52:	f00e fb23 	bl	2859c <bt_gatt_check_perm>
   19f56:	4682      	mov	sl, r0
   19f58:	2800      	cmp	r0, #0
   19f5a:	d1b5      	bne.n	19ec8 <notify_cb+0x9c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   19f5c:	89b3      	ldrh	r3, [r6, #12]
   19f5e:	2b02      	cmp	r3, #2
   19f60:	d0c2      	beq.n	19ee8 <notify_cb+0xbc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   19f62:	6932      	ldr	r2, [r6, #16]
   19f64:	88b1      	ldrh	r1, [r6, #4]
   19f66:	4648      	mov	r0, r9
   19f68:	f7ff ff06 	bl	19d78 <gatt_notify>
   19f6c:	4683      	mov	fp, r0
   19f6e:	e7c6      	b.n	19efe <notify_cb+0xd2>
	return BT_GATT_ITER_CONTINUE;
   19f70:	f04f 0a01 	mov.w	sl, #1
   19f74:	e764      	b.n	19e40 <notify_cb+0x14>
   19f76:	bf00      	nop
   19f78:	00019405 	.word	0x00019405
   19f7c:	20000570 	.word	0x20000570
   19f80:	200025f0 	.word	0x200025f0
   19f84:	00029d90 	.word	0x00029d90
   19f88:	00029d70 	.word	0x00029d70
   19f8c:	0002c5d0 	.word	0x0002c5d0

00019f90 <update_ccc>:
{
   19f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = data->conn;
   19f94:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   19f96:	6882      	ldr	r2, [r0, #8]
   19f98:	4b20      	ldr	r3, [pc, #128]	; (1a01c <update_ccc+0x8c>)
   19f9a:	429a      	cmp	r2, r3
   19f9c:	d002      	beq.n	19fa4 <update_ccc+0x14>
}
   19f9e:	2001      	movs	r0, #1
   19fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19fa4:	4604      	mov	r4, r0
	ccc = attr->user_data;
   19fa6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19faa:	2500      	movs	r5, #0
   19fac:	2d00      	cmp	r5, #0
   19fae:	d1f6      	bne.n	19f9e <update_ccc+0xe>
		if (!cfg->value ||
   19fb0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19fb4:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   19fb8:	891b      	ldrh	r3, [r3, #8]
   19fba:	b36b      	cbz	r3, 1a018 <update_ccc+0x88>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19fbc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19fc0:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   19fc4:	3201      	adds	r2, #1
   19fc6:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   19fca:	4638      	mov	r0, r7
   19fcc:	f00d f933 	bl	27236 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   19fd0:	b310      	cbz	r0, 1a018 <update_ccc+0x88>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   19fd2:	222a      	movs	r2, #42	; 0x2a
   19fd4:	4621      	mov	r1, r4
   19fd6:	4638      	mov	r0, r7
   19fd8:	f00e fae0 	bl	2859c <bt_gatt_check_perm>
		if (err) {
   19fdc:	b108      	cbz	r0, 19fe2 <update_ccc+0x52>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   19fde:	2803      	cmp	r0, #3
   19fe0:	d00a      	beq.n	19ff8 <update_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   19fe2:	4641      	mov	r1, r8
   19fe4:	4620      	mov	r0, r4
   19fe6:	f00e f82d 	bl	28044 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   19fea:	4b0d      	ldr	r3, [pc, #52]	; (1a020 <update_ccc+0x90>)
   19fec:	4598      	cmp	r8, r3
   19fee:	d1d6      	bne.n	19f9e <update_ccc+0xe>
			sc_restore(conn);
   19ff0:	4638      	mov	r0, r7
   19ff2:	f7ff fe79 	bl	19ce8 <sc_restore>
   19ff6:	e7d2      	b.n	19f9e <update_ccc+0xe>
   19ff8:	4b0a      	ldr	r3, [pc, #40]	; (1a024 <update_ccc+0x94>)
   19ffa:	4a0b      	ldr	r2, [pc, #44]	; (1a028 <update_ccc+0x98>)
   19ffc:	1a9b      	subs	r3, r3, r2
   19ffe:	08db      	lsrs	r3, r3, #3
				BT_WARN("CCC %p not writable", attr);
   1a000:	2202      	movs	r2, #2
   1a002:	f362 0602 	bfi	r6, r2, #0, #3
   1a006:	f36f 06c5 	bfc	r6, #3, #3
   1a00a:	f363 168f 	bfi	r6, r3, #6, #10
   1a00e:	4632      	mov	r2, r6
   1a010:	4621      	mov	r1, r4
   1a012:	4806      	ldr	r0, [pc, #24]	; (1a02c <update_ccc+0x9c>)
   1a014:	f7f7 fcfe 	bl	11a14 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a018:	3501      	adds	r5, #1
   1a01a:	e7c7      	b.n	19fac <update_ccc+0x1c>
   1a01c:	00019405 	.word	0x00019405
   1a020:	20000570 	.word	0x20000570
   1a024:	00029d90 	.word	0x00029d90
   1a028:	00029d70 	.word	0x00029d70
   1a02c:	0002c6ec 	.word	0x0002c6ec

0001a030 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1a030:	b500      	push	{lr}
   1a032:	b087      	sub	sp, #28
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1a034:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1a036:	2001      	movs	r0, #1
   1a038:	f88d 0014 	strb.w	r0, [sp, #20]
   1a03c:	ab04      	add	r3, sp, #16
   1a03e:	9302      	str	r3, [sp, #8]
   1a040:	4b05      	ldr	r3, [pc, #20]	; (1a058 <bt_gatt_connected+0x28>)
   1a042:	9301      	str	r3, [sp, #4]
   1a044:	2200      	movs	r2, #0
   1a046:	9200      	str	r2, [sp, #0]
   1a048:	4613      	mov	r3, r2
   1a04a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a04e:	f7ff fbdb 	bl	19808 <bt_gatt_foreach_attr_type>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1a052:	b007      	add	sp, #28
   1a054:	f85d fb04 	ldr.w	pc, [sp], #4
   1a058:	00019f91 	.word	0x00019f91

0001a05c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a05e:	4605      	mov	r5, r0
   1a060:	460e      	mov	r6, r1
   1a062:	4617      	mov	r7, r2
	return list->head;
   1a064:	4b0a      	ldr	r3, [pc, #40]	; (1a090 <bt_gatt_att_max_mtu_changed+0x34>)
   1a066:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1a068:	b134      	cbz	r4, 1a078 <bt_gatt_att_max_mtu_changed+0x1c>
   1a06a:	3c04      	subs	r4, #4
   1a06c:	e004      	b.n	1a078 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a06e:	1d23      	adds	r3, r4, #4
   1a070:	d00b      	beq.n	1a08a <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   1a072:	6864      	ldr	r4, [r4, #4]
   1a074:	b15c      	cbz	r4, 1a08e <bt_gatt_att_max_mtu_changed+0x32>
   1a076:	3c04      	subs	r4, #4
   1a078:	b14c      	cbz	r4, 1a08e <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   1a07a:	6823      	ldr	r3, [r4, #0]
   1a07c:	2b00      	cmp	r3, #0
   1a07e:	d0f6      	beq.n	1a06e <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   1a080:	463a      	mov	r2, r7
   1a082:	4631      	mov	r1, r6
   1a084:	4628      	mov	r0, r5
   1a086:	4798      	blx	r3
   1a088:	e7f1      	b.n	1a06e <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1a08a:	461c      	mov	r4, r3
   1a08c:	e7f4      	b.n	1a078 <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   1a08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a090:	200025d4 	.word	0x200025d4

0001a094 <db_hash_read>:
{
   1a094:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a096:	b085      	sub	sp, #20
   1a098:	4604      	mov	r4, r0
   1a09a:	460d      	mov	r5, r1
   1a09c:	4616      	mov	r6, r2
   1a09e:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a0a0:	4812      	ldr	r0, [pc, #72]	; (1a0ec <db_hash_read+0x58>)
   1a0a2:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1a0a6:	3010      	adds	r0, #16
   1a0a8:	f005 feac 	bl	1fe04 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a0ac:	f3bf 8f5b 	dmb	ish
   1a0b0:	4b0f      	ldr	r3, [pc, #60]	; (1a0f0 <db_hash_read+0x5c>)
   1a0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1a0b4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a0b8:	f013 0f04 	tst.w	r3, #4
   1a0bc:	d012      	beq.n	1a0e4 <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   1a0be:	2101      	movs	r1, #1
   1a0c0:	4620      	mov	r0, r4
   1a0c2:	f00e fa97 	bl	285f4 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a0c6:	2310      	movs	r3, #16
   1a0c8:	9302      	str	r3, [sp, #8]
   1a0ca:	4b08      	ldr	r3, [pc, #32]	; (1a0ec <db_hash_read+0x58>)
   1a0cc:	9301      	str	r3, [sp, #4]
   1a0ce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a0d2:	9300      	str	r3, [sp, #0]
   1a0d4:	463b      	mov	r3, r7
   1a0d6:	4632      	mov	r2, r6
   1a0d8:	4629      	mov	r1, r5
   1a0da:	4620      	mov	r0, r4
   1a0dc:	f00e f94f 	bl	2837e <bt_gatt_attr_read>
}
   1a0e0:	b005      	add	sp, #20
   1a0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   1a0e4:	2001      	movs	r0, #1
   1a0e6:	f7ff fbf5 	bl	198d4 <db_hash_gen>
   1a0ea:	e7e8      	b.n	1a0be <db_hash_read+0x2a>
   1a0ec:	20001970 	.word	0x20001970
   1a0f0:	200019d8 	.word	0x200019d8

0001a0f4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1a0f4:	b510      	push	{r4, lr}
   1a0f6:	b084      	sub	sp, #16
   1a0f8:	4604      	mov	r4, r0
   1a0fa:	9002      	str	r0, [sp, #8]
   1a0fc:	4b07      	ldr	r3, [pc, #28]	; (1a11c <bt_gatt_disconnected+0x28>)
   1a0fe:	9301      	str	r3, [sp, #4]
   1a100:	2200      	movs	r2, #0
   1a102:	9200      	str	r2, [sp, #0]
   1a104:	4613      	mov	r3, r2
   1a106:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a10a:	2001      	movs	r0, #1
   1a10c:	f7ff fb7c 	bl	19808 <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1a110:	4620      	mov	r0, r4
   1a112:	f00e f910 	bl	28336 <remove_cf_cfg>
#endif
}
   1a116:	b004      	add	sp, #16
   1a118:	bd10      	pop	{r4, pc}
   1a11a:	bf00      	nop
   1a11c:	00019639 	.word	0x00019639

0001a120 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1a120:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a122:	2300      	movs	r3, #0
   1a124:	2b00      	cmp	r3, #0
   1a126:	dd13      	ble.n	1a150 <bt_smp_accept+0x30>
   1a128:	4b12      	ldr	r3, [pc, #72]	; (1a174 <bt_smp_accept+0x54>)
   1a12a:	4a13      	ldr	r2, [pc, #76]	; (1a178 <bt_smp_accept+0x58>)
   1a12c:	1a9b      	subs	r3, r3, r2
   1a12e:	08db      	lsrs	r3, r3, #3
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1a130:	f04f 0200 	mov.w	r2, #0
   1a134:	2101      	movs	r1, #1
   1a136:	f361 0202 	bfi	r2, r1, #0, #3
   1a13a:	f36f 02c5 	bfc	r2, #3, #3
   1a13e:	f363 128f 	bfi	r2, r3, #6, #10
   1a142:	4601      	mov	r1, r0
   1a144:	480d      	ldr	r0, [pc, #52]	; (1a17c <bt_smp_accept+0x5c>)
   1a146:	f7f7 fc65 	bl	11a14 <log_1>

	return -ENOMEM;
   1a14a:	f06f 000b 	mvn.w	r0, #11
}
   1a14e:	bd10      	pop	{r4, pc}
		if (smp->chan.conn) {
   1a150:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
   1a154:	0112      	lsls	r2, r2, #4
   1a156:	4c0a      	ldr	r4, [pc, #40]	; (1a180 <bt_smp_accept+0x60>)
   1a158:	58a2      	ldr	r2, [r4, r2]
   1a15a:	b10a      	cbz	r2, 1a160 <bt_smp_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a15c:	3301      	adds	r3, #1
   1a15e:	e7e1      	b.n	1a124 <bt_smp_accept+0x4>
		smp->chan.ops = &ops;
   1a160:	4a07      	ldr	r2, [pc, #28]	; (1a180 <bt_smp_accept+0x60>)
   1a162:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   1a166:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   1a16a:	4c06      	ldr	r4, [pc, #24]	; (1a184 <bt_smp_accept+0x64>)
   1a16c:	6044      	str	r4, [r0, #4]
		*chan = &smp->chan;
   1a16e:	6008      	str	r0, [r1, #0]
		return 0;
   1a170:	2000      	movs	r0, #0
   1a172:	e7ec      	b.n	1a14e <bt_smp_accept+0x2e>
   1a174:	00029db8 	.word	0x00029db8
   1a178:	00029d70 	.word	0x00029d70
   1a17c:	0002c83c 	.word	0x0002c83c
   1a180:	20001a30 	.word	0x20001a30
   1a184:	0002c86c 	.word	0x0002c86c

0001a188 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1a188:	4b03      	ldr	r3, [pc, #12]	; (1a198 <pool_id+0x10>)
   1a18a:	1ac0      	subs	r0, r0, r3
   1a18c:	1080      	asrs	r0, r0, #2
}
   1a18e:	4b03      	ldr	r3, [pc, #12]	; (1a19c <pool_id+0x14>)
   1a190:	fb03 f000 	mul.w	r0, r3, r0
   1a194:	4770      	bx	lr
   1a196:	bf00      	nop
   1a198:	20000810 	.word	0x20000810
   1a19c:	c4ec4ec5 	.word	0xc4ec4ec5

0001a1a0 <net_buf_pool_get>:
}
   1a1a0:	2234      	movs	r2, #52	; 0x34
   1a1a2:	4b02      	ldr	r3, [pc, #8]	; (1a1ac <net_buf_pool_get+0xc>)
   1a1a4:	fb02 3000 	mla	r0, r2, r0, r3
   1a1a8:	4770      	bx	lr
   1a1aa:	bf00      	nop
   1a1ac:	20000810 	.word	0x20000810

0001a1b0 <net_buf_reset>:

	return buf;
}

void net_buf_reset(struct net_buf *buf)
{
   1a1b0:	b538      	push	{r3, r4, r5, lr}
   1a1b2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1a1b4:	7943      	ldrb	r3, [r0, #5]
   1a1b6:	b98b      	cbnz	r3, 1a1dc <net_buf_reset+0x2c>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1a1b8:	6823      	ldr	r3, [r4, #0]
   1a1ba:	b153      	cbz	r3, 1a1d2 <net_buf_reset+0x22>
   1a1bc:	4d0d      	ldr	r5, [pc, #52]	; (1a1f4 <net_buf_reset+0x44>)
   1a1be:	2357      	movs	r3, #87	; 0x57
   1a1c0:	462a      	mov	r2, r5
   1a1c2:	490d      	ldr	r1, [pc, #52]	; (1a1f8 <net_buf_reset+0x48>)
   1a1c4:	480d      	ldr	r0, [pc, #52]	; (1a1fc <net_buf_reset+0x4c>)
   1a1c6:	f00b fb32 	bl	2582e <printk>
   1a1ca:	2157      	movs	r1, #87	; 0x57
   1a1cc:	4628      	mov	r0, r5
   1a1ce:	f00b fdb0 	bl	25d32 <assert_post_action>
	buf->len  = 0U;
   1a1d2:	2300      	movs	r3, #0
   1a1d4:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1a1d6:	6923      	ldr	r3, [r4, #16]
   1a1d8:	60a3      	str	r3, [r4, #8]

	net_buf_simple_reset(&buf->b);
}
   1a1da:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1a1dc:	4d05      	ldr	r5, [pc, #20]	; (1a1f4 <net_buf_reset+0x44>)
   1a1de:	2356      	movs	r3, #86	; 0x56
   1a1e0:	462a      	mov	r2, r5
   1a1e2:	4907      	ldr	r1, [pc, #28]	; (1a200 <net_buf_reset+0x50>)
   1a1e4:	4805      	ldr	r0, [pc, #20]	; (1a1fc <net_buf_reset+0x4c>)
   1a1e6:	f00b fb22 	bl	2582e <printk>
   1a1ea:	2156      	movs	r1, #86	; 0x56
   1a1ec:	4628      	mov	r0, r5
   1a1ee:	f00b fda0 	bl	25d32 <assert_post_action>
   1a1f2:	e7e1      	b.n	1a1b8 <net_buf_reset+0x8>
   1a1f4:	0002c890 	.word	0x0002c890
   1a1f8:	0002c8c8 	.word	0x0002c8c8
   1a1fc:	00029ff8 	.word	0x00029ff8
   1a200:	0002c8b4 	.word	0x0002c8b4

0001a204 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a208:	b085      	sub	sp, #20
   1a20a:	4604      	mov	r4, r0
   1a20c:	9103      	str	r1, [sp, #12]
   1a20e:	4616      	mov	r6, r2
   1a210:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1a212:	4610      	mov	r0, r2
   1a214:	4619      	mov	r1, r3
   1a216:	f00f fb7e 	bl	29916 <sys_clock_timeout_end_calc>
   1a21a:	4681      	mov	r9, r0
   1a21c:	9102      	str	r1, [sp, #8]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1a21e:	b344      	cbz	r4, 1a272 <net_buf_alloc_len+0x6e>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1a220:	f104 051c 	add.w	r5, r4, #28
	__asm__ volatile(
   1a224:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a228:	f3ef 8811 	mrs	r8, BASEPRI
   1a22c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a230:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a234:	4628      	mov	r0, r5
   1a236:	f004 fa1d 	bl	1e674 <z_spin_lock_valid>
   1a23a:	b330      	cbz	r0, 1a28a <net_buf_alloc_len+0x86>
	z_spin_lock_set_owner(l);
   1a23c:	4628      	mov	r0, r5
   1a23e:	f004 fa39 	bl	1e6b4 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1a242:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1a244:	2b00      	cmp	r3, #0
   1a246:	f000 809f 	beq.w	1a388 <net_buf_alloc_len+0x184>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1a24a:	8c22      	ldrh	r2, [r4, #32]
   1a24c:	4293      	cmp	r3, r2
   1a24e:	d23d      	bcs.n	1a2cc <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
   1a250:	2200      	movs	r2, #0
   1a252:	2300      	movs	r3, #0
   1a254:	4620      	mov	r0, r4
   1a256:	f004 ff45 	bl	1f0e4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1a25a:	4682      	mov	sl, r0
   1a25c:	2800      	cmp	r0, #0
   1a25e:	d035      	beq.n	1a2cc <net_buf_alloc_len+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a260:	4628      	mov	r0, r5
   1a262:	f004 fa17 	bl	1e694 <z_spin_unlock_valid>
   1a266:	b308      	cbz	r0, 1a2ac <net_buf_alloc_len+0xa8>
	__asm__ volatile(
   1a268:	f388 8811 	msr	BASEPRI, r8
   1a26c:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1a270:	e04e      	b.n	1a310 <net_buf_alloc_len+0x10c>
	__ASSERT_NO_MSG(pool);
   1a272:	4d70      	ldr	r5, [pc, #448]	; (1a434 <net_buf_alloc_len+0x230>)
   1a274:	23f4      	movs	r3, #244	; 0xf4
   1a276:	462a      	mov	r2, r5
   1a278:	496f      	ldr	r1, [pc, #444]	; (1a438 <net_buf_alloc_len+0x234>)
   1a27a:	4870      	ldr	r0, [pc, #448]	; (1a43c <net_buf_alloc_len+0x238>)
   1a27c:	f00b fad7 	bl	2582e <printk>
   1a280:	21f4      	movs	r1, #244	; 0xf4
   1a282:	4628      	mov	r0, r5
   1a284:	f00b fd55 	bl	25d32 <assert_post_action>
   1a288:	e7ca      	b.n	1a220 <net_buf_alloc_len+0x1c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a28a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 1a448 <net_buf_alloc_len+0x244>
   1a28e:	2381      	movs	r3, #129	; 0x81
   1a290:	4652      	mov	r2, sl
   1a292:	496b      	ldr	r1, [pc, #428]	; (1a440 <net_buf_alloc_len+0x23c>)
   1a294:	4869      	ldr	r0, [pc, #420]	; (1a43c <net_buf_alloc_len+0x238>)
   1a296:	f00b faca 	bl	2582e <printk>
   1a29a:	4629      	mov	r1, r5
   1a29c:	4869      	ldr	r0, [pc, #420]	; (1a444 <net_buf_alloc_len+0x240>)
   1a29e:	f00b fac6 	bl	2582e <printk>
   1a2a2:	2181      	movs	r1, #129	; 0x81
   1a2a4:	4650      	mov	r0, sl
   1a2a6:	f00b fd44 	bl	25d32 <assert_post_action>
   1a2aa:	e7c7      	b.n	1a23c <net_buf_alloc_len+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a2ac:	4c66      	ldr	r4, [pc, #408]	; (1a448 <net_buf_alloc_len+0x244>)
   1a2ae:	23ac      	movs	r3, #172	; 0xac
   1a2b0:	4622      	mov	r2, r4
   1a2b2:	4966      	ldr	r1, [pc, #408]	; (1a44c <net_buf_alloc_len+0x248>)
   1a2b4:	4861      	ldr	r0, [pc, #388]	; (1a43c <net_buf_alloc_len+0x238>)
   1a2b6:	f00b faba 	bl	2582e <printk>
   1a2ba:	4629      	mov	r1, r5
   1a2bc:	4864      	ldr	r0, [pc, #400]	; (1a450 <net_buf_alloc_len+0x24c>)
   1a2be:	f00b fab6 	bl	2582e <printk>
   1a2c2:	21ac      	movs	r1, #172	; 0xac
   1a2c4:	4620      	mov	r0, r4
   1a2c6:	f00b fd34 	bl	25d32 <assert_post_action>
   1a2ca:	e7cd      	b.n	1a268 <net_buf_alloc_len+0x64>
			}
		}

		uninit_count = pool->uninit_count--;
   1a2cc:	f8b4 a022 	ldrh.w	sl, [r4, #34]	; 0x22
   1a2d0:	f10a 33ff 	add.w	r3, sl, #4294967295
   1a2d4:	8463      	strh	r3, [r4, #34]	; 0x22
   1a2d6:	4628      	mov	r0, r5
   1a2d8:	f004 f9dc 	bl	1e694 <z_spin_unlock_valid>
   1a2dc:	2800      	cmp	r0, #0
   1a2de:	d042      	beq.n	1a366 <net_buf_alloc_len+0x162>
   1a2e0:	f388 8811 	msr	BASEPRI, r8
   1a2e4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1a2e8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1a2ec:	3317      	adds	r3, #23
   1a2ee:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1a2f2:	8c22      	ldrh	r2, [r4, #32]
   1a2f4:	eba2 0a0a 	sub.w	sl, r2, sl
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1a2f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1a2fa:	fb0a 2a03 	mla	sl, sl, r3, r2
	buf->pool_id = pool_id(pool);
   1a2fe:	4620      	mov	r0, r4
   1a300:	f7ff ff42 	bl	1a188 <pool_id>
   1a304:	f88a 0006 	strb.w	r0, [sl, #6]
	buf->user_data_size = pool->user_data_size;
   1a308:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1a30c:	f88a 3007 	strb.w	r3, [sl, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1a310:	9c03      	ldr	r4, [sp, #12]
   1a312:	2c00      	cmp	r4, #0
   1a314:	d078      	beq.n	1a408 <net_buf_alloc_len+0x204>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1a316:	ea56 0307 	orrs.w	r3, r6, r7
   1a31a:	d005      	beq.n	1a328 <net_buf_alloc_len+0x124>
   1a31c:	f1b7 3fff 	cmp.w	r7, #4294967295
   1a320:	bf08      	it	eq
   1a322:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1a326:	d151      	bne.n	1a3cc <net_buf_alloc_len+0x1c8>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1a328:	4632      	mov	r2, r6
   1a32a:	463b      	mov	r3, r7
   1a32c:	a903      	add	r1, sp, #12
   1a32e:	4650      	mov	r0, sl
   1a330:	f00e f9db 	bl	286ea <data_alloc>
   1a334:	4605      	mov	r5, r0
   1a336:	f8ca 0010 	str.w	r0, [sl, #16]
		if (!buf->__buf) {
   1a33a:	2800      	cmp	r0, #0
   1a33c:	d05b      	beq.n	1a3f6 <net_buf_alloc_len+0x1f2>
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1a33e:	9b03      	ldr	r3, [sp, #12]
   1a340:	429c      	cmp	r4, r3
   1a342:	d964      	bls.n	1a40e <net_buf_alloc_len+0x20a>
   1a344:	4c3b      	ldr	r4, [pc, #236]	; (1a434 <net_buf_alloc_len+0x230>)
   1a346:	f240 1355 	movw	r3, #341	; 0x155
   1a34a:	4622      	mov	r2, r4
   1a34c:	4941      	ldr	r1, [pc, #260]	; (1a454 <net_buf_alloc_len+0x250>)
   1a34e:	483b      	ldr	r0, [pc, #236]	; (1a43c <net_buf_alloc_len+0x238>)
   1a350:	f00b fa6d 	bl	2582e <printk>
   1a354:	4840      	ldr	r0, [pc, #256]	; (1a458 <net_buf_alloc_len+0x254>)
   1a356:	f00b fa6a 	bl	2582e <printk>
   1a35a:	f240 1155 	movw	r1, #341	; 0x155
   1a35e:	4620      	mov	r0, r4
   1a360:	f00b fce7 	bl	25d32 <assert_post_action>
   1a364:	e053      	b.n	1a40e <net_buf_alloc_len+0x20a>
   1a366:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 1a448 <net_buf_alloc_len+0x244>
   1a36a:	23ac      	movs	r3, #172	; 0xac
   1a36c:	465a      	mov	r2, fp
   1a36e:	4937      	ldr	r1, [pc, #220]	; (1a44c <net_buf_alloc_len+0x248>)
   1a370:	4832      	ldr	r0, [pc, #200]	; (1a43c <net_buf_alloc_len+0x238>)
   1a372:	f00b fa5c 	bl	2582e <printk>
   1a376:	4629      	mov	r1, r5
   1a378:	4835      	ldr	r0, [pc, #212]	; (1a450 <net_buf_alloc_len+0x24c>)
   1a37a:	f00b fa58 	bl	2582e <printk>
   1a37e:	21ac      	movs	r1, #172	; 0xac
   1a380:	4658      	mov	r0, fp
   1a382:	f00b fcd6 	bl	25d32 <assert_post_action>
   1a386:	e7ab      	b.n	1a2e0 <net_buf_alloc_len+0xdc>
   1a388:	4628      	mov	r0, r5
   1a38a:	f004 f983 	bl	1e694 <z_spin_unlock_valid>
   1a38e:	b160      	cbz	r0, 1a3aa <net_buf_alloc_len+0x1a6>
   1a390:	f388 8811 	msr	BASEPRI, r8
   1a394:	f3bf 8f6f 	isb	sy
   1a398:	4632      	mov	r2, r6
   1a39a:	463b      	mov	r3, r7
   1a39c:	4620      	mov	r0, r4
   1a39e:	f004 fea1 	bl	1f0e4 <z_impl_k_queue_get>
	if (!buf) {
   1a3a2:	4682      	mov	sl, r0
   1a3a4:	2800      	cmp	r0, #0
   1a3a6:	d1b3      	bne.n	1a310 <net_buf_alloc_len+0x10c>
   1a3a8:	e03f      	b.n	1a42a <net_buf_alloc_len+0x226>
   1a3aa:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1a448 <net_buf_alloc_len+0x244>
   1a3ae:	23ac      	movs	r3, #172	; 0xac
   1a3b0:	4652      	mov	r2, sl
   1a3b2:	4926      	ldr	r1, [pc, #152]	; (1a44c <net_buf_alloc_len+0x248>)
   1a3b4:	4821      	ldr	r0, [pc, #132]	; (1a43c <net_buf_alloc_len+0x238>)
   1a3b6:	f00b fa3a 	bl	2582e <printk>
   1a3ba:	4629      	mov	r1, r5
   1a3bc:	4824      	ldr	r0, [pc, #144]	; (1a450 <net_buf_alloc_len+0x24c>)
   1a3be:	f00b fa36 	bl	2582e <printk>
   1a3c2:	21ac      	movs	r1, #172	; 0xac
   1a3c4:	4650      	mov	r0, sl
   1a3c6:	f00b fcb4 	bl	25d32 <assert_post_action>
   1a3ca:	e7e1      	b.n	1a390 <net_buf_alloc_len+0x18c>
			int64_t remaining = end - sys_clock_tick_get();
   1a3cc:	f007 fcc6 	bl	21d5c <sys_clock_tick_get>
   1a3d0:	ebb9 0300 	subs.w	r3, r9, r0
   1a3d4:	9300      	str	r3, [sp, #0]
   1a3d6:	9b02      	ldr	r3, [sp, #8]
   1a3d8:	eb63 0301 	sbc.w	r3, r3, r1
   1a3dc:	9301      	str	r3, [sp, #4]
			if (remaining <= 0) {
   1a3de:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a3e2:	2a01      	cmp	r2, #1
   1a3e4:	f173 0300 	sbcs.w	r3, r3, #0
   1a3e8:	db02      	blt.n	1a3f0 <net_buf_alloc_len+0x1ec>
				timeout = Z_TIMEOUT_TICKS(remaining);
   1a3ea:	e9dd 6700 	ldrd	r6, r7, [sp]
   1a3ee:	e79b      	b.n	1a328 <net_buf_alloc_len+0x124>
				timeout = K_NO_WAIT;
   1a3f0:	2600      	movs	r6, #0
   1a3f2:	2700      	movs	r7, #0
   1a3f4:	e798      	b.n	1a328 <net_buf_alloc_len+0x124>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a3f6:	f89a 0006 	ldrb.w	r0, [sl, #6]
   1a3fa:	f7ff fed1 	bl	1a1a0 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1a3fe:	4651      	mov	r1, sl
   1a400:	f00f f9ba 	bl	29778 <k_queue_prepend>
			return NULL;
   1a404:	46aa      	mov	sl, r5
}
   1a406:	e010      	b.n	1a42a <net_buf_alloc_len+0x226>
#endif
	} else {
		buf->__buf = NULL;
   1a408:	2300      	movs	r3, #0
   1a40a:	f8ca 3010 	str.w	r3, [sl, #16]
	}

	buf->ref   = 1U;
   1a40e:	2301      	movs	r3, #1
   1a410:	f88a 3004 	strb.w	r3, [sl, #4]
	buf->flags = 0U;
   1a414:	2300      	movs	r3, #0
   1a416:	f88a 3005 	strb.w	r3, [sl, #5]
	buf->frags = NULL;
   1a41a:	f8ca 3000 	str.w	r3, [sl]
	buf->size  = size;
   1a41e:	9b03      	ldr	r3, [sp, #12]
   1a420:	f8aa 300e 	strh.w	r3, [sl, #14]
	net_buf_reset(buf);
   1a424:	4650      	mov	r0, sl
   1a426:	f7ff fec3 	bl	1a1b0 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1a42a:	4650      	mov	r0, sl
   1a42c:	b005      	add	sp, #20
   1a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a432:	bf00      	nop
   1a434:	0002c890 	.word	0x0002c890
   1a438:	0002c8e4 	.word	0x0002c8e4
   1a43c:	00029ff8 	.word	0x00029ff8
   1a440:	0002a36c 	.word	0x0002a36c
   1a444:	0002a384 	.word	0x0002a384
   1a448:	0002a314 	.word	0x0002a314
   1a44c:	0002a33c 	.word	0x0002a33c
   1a450:	0002a354 	.word	0x0002a354
   1a454:	0002c8ec 	.word	0x0002c8ec
   1a458:	0002c900 	.word	0x0002c900

0001a45c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   1a45e:	4605      	mov	r5, r0
   1a460:	f004 fe40 	bl	1f0e4 <z_impl_k_queue_get>
	if (!buf) {
   1a464:	4606      	mov	r6, r0
   1a466:	b310      	cbz	r0, 1a4ae <net_buf_get+0x52>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1a468:	4604      	mov	r4, r0
   1a46a:	e004      	b.n	1a476 <net_buf_get+0x1a>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1a46c:	7963      	ldrb	r3, [r4, #5]
   1a46e:	f023 0301 	bic.w	r3, r3, #1
   1a472:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1a474:	6824      	ldr	r4, [r4, #0]
   1a476:	7963      	ldrb	r3, [r4, #5]
   1a478:	f013 0f01 	tst.w	r3, #1
   1a47c:	d015      	beq.n	1a4aa <net_buf_get+0x4e>
   1a47e:	2200      	movs	r2, #0
   1a480:	2300      	movs	r3, #0
   1a482:	4628      	mov	r0, r5
   1a484:	f004 fe2e 	bl	1f0e4 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1a488:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1a48a:	2800      	cmp	r0, #0
   1a48c:	d1ee      	bne.n	1a46c <net_buf_get+0x10>
   1a48e:	4f09      	ldr	r7, [pc, #36]	; (1a4b4 <net_buf_get+0x58>)
   1a490:	f240 13ad 	movw	r3, #429	; 0x1ad
   1a494:	463a      	mov	r2, r7
   1a496:	4908      	ldr	r1, [pc, #32]	; (1a4b8 <net_buf_get+0x5c>)
   1a498:	4808      	ldr	r0, [pc, #32]	; (1a4bc <net_buf_get+0x60>)
   1a49a:	f00b f9c8 	bl	2582e <printk>
   1a49e:	f240 11ad 	movw	r1, #429	; 0x1ad
   1a4a2:	4638      	mov	r0, r7
   1a4a4:	f00b fc45 	bl	25d32 <assert_post_action>
   1a4a8:	e7e0      	b.n	1a46c <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1a4aa:	2300      	movs	r3, #0
   1a4ac:	6023      	str	r3, [r4, #0]

	return buf;
}
   1a4ae:	4630      	mov	r0, r6
   1a4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a4b2:	bf00      	nop
   1a4b4:	0002c890 	.word	0x0002c890
   1a4b8:	0002c904 	.word	0x0002c904
   1a4bc:	00029ff8 	.word	0x00029ff8

0001a4c0 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1a4c0:	b570      	push	{r4, r5, r6, lr}
   1a4c2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1a4c4:	4604      	mov	r4, r0
   1a4c6:	b128      	cbz	r0, 1a4d4 <net_buf_simple_reserve+0x14>
	__ASSERT_NO_MSG(buf->len == 0U);
   1a4c8:	88a3      	ldrh	r3, [r4, #4]
   1a4ca:	b98b      	cbnz	r3, 1a4f0 <net_buf_simple_reserve+0x30>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1a4cc:	68a3      	ldr	r3, [r4, #8]
   1a4ce:	442b      	add	r3, r5
   1a4d0:	6023      	str	r3, [r4, #0]
}
   1a4d2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(buf);
   1a4d4:	4e0d      	ldr	r6, [pc, #52]	; (1a50c <net_buf_simple_reserve+0x4c>)
   1a4d6:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   1a4da:	4632      	mov	r2, r6
   1a4dc:	490c      	ldr	r1, [pc, #48]	; (1a510 <net_buf_simple_reserve+0x50>)
   1a4de:	480d      	ldr	r0, [pc, #52]	; (1a514 <net_buf_simple_reserve+0x54>)
   1a4e0:	f00b f9a5 	bl	2582e <printk>
   1a4e4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1a4e8:	4630      	mov	r0, r6
   1a4ea:	f00b fc22 	bl	25d32 <assert_post_action>
   1a4ee:	e7eb      	b.n	1a4c8 <net_buf_simple_reserve+0x8>
	__ASSERT_NO_MSG(buf->len == 0U);
   1a4f0:	4e06      	ldr	r6, [pc, #24]	; (1a50c <net_buf_simple_reserve+0x4c>)
   1a4f2:	f240 13c5 	movw	r3, #453	; 0x1c5
   1a4f6:	4632      	mov	r2, r6
   1a4f8:	4907      	ldr	r1, [pc, #28]	; (1a518 <net_buf_simple_reserve+0x58>)
   1a4fa:	4806      	ldr	r0, [pc, #24]	; (1a514 <net_buf_simple_reserve+0x54>)
   1a4fc:	f00b f997 	bl	2582e <printk>
   1a500:	f240 11c5 	movw	r1, #453	; 0x1c5
   1a504:	4630      	mov	r0, r6
   1a506:	f00b fc14 	bl	25d32 <assert_post_action>
   1a50a:	e7df      	b.n	1a4cc <net_buf_simple_reserve+0xc>
   1a50c:	0002c890 	.word	0x0002c890
   1a510:	0002c994 	.word	0x0002c994
   1a514:	00029ff8 	.word	0x00029ff8
   1a518:	0002c910 	.word	0x0002c910

0001a51c <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1a51c:	b570      	push	{r4, r5, r6, lr}
   1a51e:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1a520:	4605      	mov	r5, r0
   1a522:	b148      	cbz	r0, 1a538 <net_buf_put+0x1c>
	__ASSERT_NO_MSG(buf);
   1a524:	b1b4      	cbz	r4, 1a554 <net_buf_put+0x38>
{
   1a526:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1a528:	6810      	ldr	r0, [r2, #0]
   1a52a:	b308      	cbz	r0, 1a570 <net_buf_put+0x54>
		tail->flags |= NET_BUF_FRAGS;
   1a52c:	7953      	ldrb	r3, [r2, #5]
   1a52e:	f043 0301 	orr.w	r3, r3, #1
   1a532:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1a534:	4602      	mov	r2, r0
   1a536:	e7f7      	b.n	1a528 <net_buf_put+0xc>
	__ASSERT_NO_MSG(fifo);
   1a538:	4e10      	ldr	r6, [pc, #64]	; (1a57c <net_buf_put+0x60>)
   1a53a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a53e:	4632      	mov	r2, r6
   1a540:	490f      	ldr	r1, [pc, #60]	; (1a580 <net_buf_put+0x64>)
   1a542:	4810      	ldr	r0, [pc, #64]	; (1a584 <net_buf_put+0x68>)
   1a544:	f00b f973 	bl	2582e <printk>
   1a548:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a54c:	4630      	mov	r0, r6
   1a54e:	f00b fbf0 	bl	25d32 <assert_post_action>
   1a552:	e7e7      	b.n	1a524 <net_buf_put+0x8>
	__ASSERT_NO_MSG(buf);
   1a554:	4e09      	ldr	r6, [pc, #36]	; (1a57c <net_buf_put+0x60>)
   1a556:	f240 2301 	movw	r3, #513	; 0x201
   1a55a:	4632      	mov	r2, r6
   1a55c:	490a      	ldr	r1, [pc, #40]	; (1a588 <net_buf_put+0x6c>)
   1a55e:	4809      	ldr	r0, [pc, #36]	; (1a584 <net_buf_put+0x68>)
   1a560:	f00b f965 	bl	2582e <printk>
   1a564:	f240 2101 	movw	r1, #513	; 0x201
   1a568:	4630      	mov	r0, r6
   1a56a:	f00b fbe2 	bl	25d32 <assert_post_action>
   1a56e:	e7da      	b.n	1a526 <net_buf_put+0xa>
	}

	k_fifo_put_list(fifo, buf, tail);
   1a570:	4621      	mov	r1, r4
   1a572:	4628      	mov	r0, r5
   1a574:	f004 fd56 	bl	1f024 <k_queue_append_list>
}
   1a578:	bd70      	pop	{r4, r5, r6, pc}
   1a57a:	bf00      	nop
   1a57c:	0002c890 	.word	0x0002c890
   1a580:	0002c920 	.word	0x0002c920
   1a584:	00029ff8 	.word	0x00029ff8
   1a588:	0002c994 	.word	0x0002c994

0001a58c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a58c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1a58e:	4604      	mov	r4, r0
   1a590:	b9e8      	cbnz	r0, 1a5ce <net_buf_unref+0x42>
   1a592:	4d18      	ldr	r5, [pc, #96]	; (1a5f4 <net_buf_unref+0x68>)
   1a594:	f44f 7304 	mov.w	r3, #528	; 0x210
   1a598:	462a      	mov	r2, r5
   1a59a:	4917      	ldr	r1, [pc, #92]	; (1a5f8 <net_buf_unref+0x6c>)
   1a59c:	4817      	ldr	r0, [pc, #92]	; (1a5fc <net_buf_unref+0x70>)
   1a59e:	f00b f946 	bl	2582e <printk>
   1a5a2:	f44f 7104 	mov.w	r1, #528	; 0x210
   1a5a6:	4628      	mov	r0, r5
   1a5a8:	f00b fbc3 	bl	25d32 <assert_post_action>
   1a5ac:	e00f      	b.n	1a5ce <net_buf_unref+0x42>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   1a5ae:	4620      	mov	r0, r4
   1a5b0:	f00e f8af 	bl	28712 <data_unref>
			buf->__buf = NULL;
   1a5b4:	2300      	movs	r3, #0
   1a5b6:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   1a5b8:	2300      	movs	r3, #0
   1a5ba:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   1a5bc:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1a5be:	79a0      	ldrb	r0, [r4, #6]
   1a5c0:	f7ff fdee 	bl	1a1a0 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1a5c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1a5c6:	b16b      	cbz	r3, 1a5e4 <net_buf_unref+0x58>
			pool->destroy(buf);
   1a5c8:	4620      	mov	r0, r4
   1a5ca:	4798      	blx	r3
{
   1a5cc:	462c      	mov	r4, r5
	while (buf) {
   1a5ce:	b184      	cbz	r4, 1a5f2 <net_buf_unref+0x66>
		struct net_buf *frags = buf->frags;
   1a5d0:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   1a5d2:	7923      	ldrb	r3, [r4, #4]
   1a5d4:	3b01      	subs	r3, #1
   1a5d6:	b2db      	uxtb	r3, r3
   1a5d8:	7123      	strb	r3, [r4, #4]
   1a5da:	b953      	cbnz	r3, 1a5f2 <net_buf_unref+0x66>
		if (buf->__buf) {
   1a5dc:	6921      	ldr	r1, [r4, #16]
   1a5de:	2900      	cmp	r1, #0
   1a5e0:	d1e5      	bne.n	1a5ae <net_buf_unref+0x22>
   1a5e2:	e7e9      	b.n	1a5b8 <net_buf_unref+0x2c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a5e4:	79a0      	ldrb	r0, [r4, #6]
   1a5e6:	f7ff fddb 	bl	1a1a0 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1a5ea:	4621      	mov	r1, r4
   1a5ec:	f00f f8c4 	bl	29778 <k_queue_prepend>
}
   1a5f0:	e7ec      	b.n	1a5cc <net_buf_unref+0x40>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1a5f2:	bd38      	pop	{r3, r4, r5, pc}
   1a5f4:	0002c890 	.word	0x0002c890
   1a5f8:	0002c994 	.word	0x0002c994
   1a5fc:	00029ff8 	.word	0x00029ff8

0001a600 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1a600:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1a602:	4604      	mov	r4, r0
   1a604:	b120      	cbz	r0, 1a610 <net_buf_ref+0x10>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1a606:	7923      	ldrb	r3, [r4, #4]
   1a608:	3301      	adds	r3, #1
   1a60a:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1a60c:	4620      	mov	r0, r4
   1a60e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf);
   1a610:	4d06      	ldr	r5, [pc, #24]	; (1a62c <net_buf_ref+0x2c>)
   1a612:	f240 233f 	movw	r3, #575	; 0x23f
   1a616:	462a      	mov	r2, r5
   1a618:	4905      	ldr	r1, [pc, #20]	; (1a630 <net_buf_ref+0x30>)
   1a61a:	4806      	ldr	r0, [pc, #24]	; (1a634 <net_buf_ref+0x34>)
   1a61c:	f00b f907 	bl	2582e <printk>
   1a620:	f240 213f 	movw	r1, #575	; 0x23f
   1a624:	4628      	mov	r0, r5
   1a626:	f00b fb84 	bl	25d32 <assert_post_action>
   1a62a:	e7ec      	b.n	1a606 <net_buf_ref+0x6>
   1a62c:	0002c890 	.word	0x0002c890
   1a630:	0002c994 	.word	0x0002c994
   1a634:	00029ff8 	.word	0x00029ff8

0001a638 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1a638:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1a63a:	4604      	mov	r4, r0
   1a63c:	b120      	cbz	r0, 1a648 <net_buf_frag_last+0x10>

	while (buf->frags) {
   1a63e:	4620      	mov	r0, r4
   1a640:	6824      	ldr	r4, [r4, #0]
   1a642:	2c00      	cmp	r4, #0
   1a644:	d1fb      	bne.n	1a63e <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   1a646:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(buf);
   1a648:	4d06      	ldr	r5, [pc, #24]	; (1a664 <net_buf_frag_last+0x2c>)
   1a64a:	f44f 731f 	mov.w	r3, #636	; 0x27c
   1a64e:	462a      	mov	r2, r5
   1a650:	4905      	ldr	r1, [pc, #20]	; (1a668 <net_buf_frag_last+0x30>)
   1a652:	4806      	ldr	r0, [pc, #24]	; (1a66c <net_buf_frag_last+0x34>)
   1a654:	f00b f8eb 	bl	2582e <printk>
   1a658:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1a65c:	4628      	mov	r0, r5
   1a65e:	f00b fb68 	bl	25d32 <assert_post_action>
   1a662:	e7ec      	b.n	1a63e <net_buf_frag_last+0x6>
   1a664:	0002c890 	.word	0x0002c890
   1a668:	0002c994 	.word	0x0002c994
   1a66c:	00029ff8 	.word	0x00029ff8

0001a670 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1a670:	b570      	push	{r4, r5, r6, lr}
   1a672:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(parent);
   1a674:	4605      	mov	r5, r0
   1a676:	b148      	cbz	r0, 1a68c <net_buf_frag_insert+0x1c>
	__ASSERT_NO_MSG(frag);
   1a678:	b1b4      	cbz	r4, 1a6a8 <net_buf_frag_insert+0x38>

	if (parent->frags) {
   1a67a:	682b      	ldr	r3, [r5, #0]
   1a67c:	b123      	cbz	r3, 1a688 <net_buf_frag_insert+0x18>
		net_buf_frag_last(frag)->frags = parent->frags;
   1a67e:	4620      	mov	r0, r4
   1a680:	f7ff ffda 	bl	1a638 <net_buf_frag_last>
   1a684:	682b      	ldr	r3, [r5, #0]
   1a686:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1a688:	602c      	str	r4, [r5, #0]
}
   1a68a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(parent);
   1a68c:	4e0d      	ldr	r6, [pc, #52]	; (1a6c4 <net_buf_frag_insert+0x54>)
   1a68e:	f240 2387 	movw	r3, #647	; 0x287
   1a692:	4632      	mov	r2, r6
   1a694:	490c      	ldr	r1, [pc, #48]	; (1a6c8 <net_buf_frag_insert+0x58>)
   1a696:	480d      	ldr	r0, [pc, #52]	; (1a6cc <net_buf_frag_insert+0x5c>)
   1a698:	f00b f8c9 	bl	2582e <printk>
   1a69c:	f240 2187 	movw	r1, #647	; 0x287
   1a6a0:	4630      	mov	r0, r6
   1a6a2:	f00b fb46 	bl	25d32 <assert_post_action>
   1a6a6:	e7e7      	b.n	1a678 <net_buf_frag_insert+0x8>
	__ASSERT_NO_MSG(frag);
   1a6a8:	4e06      	ldr	r6, [pc, #24]	; (1a6c4 <net_buf_frag_insert+0x54>)
   1a6aa:	f44f 7322 	mov.w	r3, #648	; 0x288
   1a6ae:	4632      	mov	r2, r6
   1a6b0:	4907      	ldr	r1, [pc, #28]	; (1a6d0 <net_buf_frag_insert+0x60>)
   1a6b2:	4806      	ldr	r0, [pc, #24]	; (1a6cc <net_buf_frag_insert+0x5c>)
   1a6b4:	f00b f8bb 	bl	2582e <printk>
   1a6b8:	f44f 7122 	mov.w	r1, #648	; 0x288
   1a6bc:	4630      	mov	r0, r6
   1a6be:	f00b fb38 	bl	25d32 <assert_post_action>
   1a6c2:	e7da      	b.n	1a67a <net_buf_frag_insert+0xa>
   1a6c4:	0002c890 	.word	0x0002c890
   1a6c8:	0002c928 	.word	0x0002c928
   1a6cc:	00029ff8 	.word	0x00029ff8
   1a6d0:	0002c930 	.word	0x0002c930

0001a6d4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1a6d4:	b570      	push	{r4, r5, r6, lr}
   1a6d6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1a6d8:	460d      	mov	r5, r1
   1a6da:	b141      	cbz	r1, 1a6ee <net_buf_frag_add+0x1a>

	if (!head) {
   1a6dc:	b1ac      	cbz	r4, 1a70a <net_buf_frag_add+0x36>
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1a6de:	4620      	mov	r0, r4
   1a6e0:	f7ff ffaa 	bl	1a638 <net_buf_frag_last>
   1a6e4:	4629      	mov	r1, r5
   1a6e6:	f7ff ffc3 	bl	1a670 <net_buf_frag_insert>

	return head;
   1a6ea:	4620      	mov	r0, r4
}
   1a6ec:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(frag);
   1a6ee:	4e09      	ldr	r6, [pc, #36]	; (1a714 <net_buf_frag_add+0x40>)
   1a6f0:	f240 2393 	movw	r3, #659	; 0x293
   1a6f4:	4632      	mov	r2, r6
   1a6f6:	4908      	ldr	r1, [pc, #32]	; (1a718 <net_buf_frag_add+0x44>)
   1a6f8:	4808      	ldr	r0, [pc, #32]	; (1a71c <net_buf_frag_add+0x48>)
   1a6fa:	f00b f898 	bl	2582e <printk>
   1a6fe:	f240 2193 	movw	r1, #659	; 0x293
   1a702:	4630      	mov	r0, r6
   1a704:	f00b fb15 	bl	25d32 <assert_post_action>
   1a708:	e7e8      	b.n	1a6dc <net_buf_frag_add+0x8>
		return net_buf_ref(frag);
   1a70a:	4628      	mov	r0, r5
   1a70c:	f7ff ff78 	bl	1a600 <net_buf_ref>
   1a710:	e7ec      	b.n	1a6ec <net_buf_frag_add+0x18>
   1a712:	bf00      	nop
   1a714:	0002c890 	.word	0x0002c890
   1a718:	0002c930 	.word	0x0002c930
   1a71c:	00029ff8 	.word	0x00029ff8

0001a720 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1a720:	b570      	push	{r4, r5, r6, lr}
   1a722:	4604      	mov	r4, r0
   1a724:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   1a726:	8883      	ldrh	r3, [r0, #4]
   1a728:	428b      	cmp	r3, r1
   1a72a:	d306      	bcc.n	1a73a <net_buf_simple_pull+0x1a>

	buf->len -= len;
   1a72c:	88a3      	ldrh	r3, [r4, #4]
   1a72e:	1b5b      	subs	r3, r3, r5
   1a730:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1a732:	6820      	ldr	r0, [r4, #0]
   1a734:	4428      	add	r0, r5
   1a736:	6020      	str	r0, [r4, #0]
}
   1a738:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(buf->len >= len);
   1a73a:	4e07      	ldr	r6, [pc, #28]	; (1a758 <net_buf_simple_pull+0x38>)
   1a73c:	f240 4377 	movw	r3, #1143	; 0x477
   1a740:	4632      	mov	r2, r6
   1a742:	4906      	ldr	r1, [pc, #24]	; (1a75c <net_buf_simple_pull+0x3c>)
   1a744:	4806      	ldr	r0, [pc, #24]	; (1a760 <net_buf_simple_pull+0x40>)
   1a746:	f00b f872 	bl	2582e <printk>
   1a74a:	f240 4177 	movw	r1, #1143	; 0x477
   1a74e:	4630      	mov	r0, r6
   1a750:	f00b faef 	bl	25d32 <assert_post_action>
   1a754:	e7ea      	b.n	1a72c <net_buf_simple_pull+0xc>
   1a756:	bf00      	nop
   1a758:	0002c890 	.word	0x0002c890
   1a75c:	0002c938 	.word	0x0002c938
   1a760:	00029ff8 	.word	0x00029ff8

0001a764 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a766:	4604      	mov	r4, r0
   1a768:	460d      	mov	r5, r1
	void *data = buf->data;
   1a76a:	6806      	ldr	r6, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   1a76c:	8883      	ldrh	r3, [r0, #4]
   1a76e:	428b      	cmp	r3, r1
   1a770:	d307      	bcc.n	1a782 <net_buf_simple_pull_mem+0x1e>

	buf->len -= len;
   1a772:	88a3      	ldrh	r3, [r4, #4]
   1a774:	1b5b      	subs	r3, r3, r5
   1a776:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1a778:	6821      	ldr	r1, [r4, #0]
   1a77a:	4429      	add	r1, r5
   1a77c:	6021      	str	r1, [r4, #0]

	return data;
}
   1a77e:	4630      	mov	r0, r6
   1a780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(buf->len >= len);
   1a782:	4f07      	ldr	r7, [pc, #28]	; (1a7a0 <net_buf_simple_pull_mem+0x3c>)
   1a784:	f240 4383 	movw	r3, #1155	; 0x483
   1a788:	463a      	mov	r2, r7
   1a78a:	4906      	ldr	r1, [pc, #24]	; (1a7a4 <net_buf_simple_pull_mem+0x40>)
   1a78c:	4806      	ldr	r0, [pc, #24]	; (1a7a8 <net_buf_simple_pull_mem+0x44>)
   1a78e:	f00b f84e 	bl	2582e <printk>
   1a792:	f240 4183 	movw	r1, #1155	; 0x483
   1a796:	4638      	mov	r0, r7
   1a798:	f00b facb 	bl	25d32 <assert_post_action>
   1a79c:	e7e9      	b.n	1a772 <net_buf_simple_pull_mem+0xe>
   1a79e:	bf00      	nop
   1a7a0:	0002c890 	.word	0x0002c890
   1a7a4:	0002c938 	.word	0x0002c938
   1a7a8:	00029ff8 	.word	0x00029ff8

0001a7ac <net_buf_simple_push>:
{
   1a7ac:	b570      	push	{r4, r5, r6, lr}
   1a7ae:	4605      	mov	r5, r0
   1a7b0:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1a7b2:	f00d fff3 	bl	2879c <net_buf_simple_headroom>
   1a7b6:	42a0      	cmp	r0, r4
   1a7b8:	d306      	bcc.n	1a7c8 <net_buf_simple_push+0x1c>
	buf->data -= len;
   1a7ba:	6828      	ldr	r0, [r5, #0]
   1a7bc:	1b00      	subs	r0, r0, r4
   1a7be:	6028      	str	r0, [r5, #0]
	buf->len += len;
   1a7c0:	88a9      	ldrh	r1, [r5, #4]
   1a7c2:	440c      	add	r4, r1
   1a7c4:	80ac      	strh	r4, [r5, #4]
}
   1a7c6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1a7c8:	4e06      	ldr	r6, [pc, #24]	; (1a7e4 <net_buf_simple_push+0x38>)
   1a7ca:	f240 4317 	movw	r3, #1047	; 0x417
   1a7ce:	4632      	mov	r2, r6
   1a7d0:	4905      	ldr	r1, [pc, #20]	; (1a7e8 <net_buf_simple_push+0x3c>)
   1a7d2:	4806      	ldr	r0, [pc, #24]	; (1a7ec <net_buf_simple_push+0x40>)
   1a7d4:	f00b f82b 	bl	2582e <printk>
   1a7d8:	f240 4117 	movw	r1, #1047	; 0x417
   1a7dc:	4630      	mov	r0, r6
   1a7de:	f00b faa8 	bl	25d32 <assert_post_action>
   1a7e2:	e7ea      	b.n	1a7ba <net_buf_simple_push+0xe>
   1a7e4:	0002c890 	.word	0x0002c890
   1a7e8:	0002c948 	.word	0x0002c948
   1a7ec:	00029ff8 	.word	0x00029ff8

0001a7f0 <net_buf_simple_add>:
{
   1a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a7f2:	4604      	mov	r4, r0
   1a7f4:	460d      	mov	r5, r1
	return buf->data + buf->len;
   1a7f6:	6803      	ldr	r3, [r0, #0]
   1a7f8:	8886      	ldrh	r6, [r0, #4]
   1a7fa:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1a7fc:	f00d ffd2 	bl	287a4 <net_buf_simple_tailroom>
   1a800:	42a8      	cmp	r0, r5
   1a802:	d304      	bcc.n	1a80e <net_buf_simple_add+0x1e>
	buf->len += len;
   1a804:	88a1      	ldrh	r1, [r4, #4]
   1a806:	440d      	add	r5, r1
   1a808:	80a5      	strh	r5, [r4, #4]
}
   1a80a:	4630      	mov	r0, r6
   1a80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1a80e:	4f07      	ldr	r7, [pc, #28]	; (1a82c <net_buf_simple_add+0x3c>)
   1a810:	f44f 734a 	mov.w	r3, #808	; 0x328
   1a814:	463a      	mov	r2, r7
   1a816:	4906      	ldr	r1, [pc, #24]	; (1a830 <net_buf_simple_add+0x40>)
   1a818:	4806      	ldr	r0, [pc, #24]	; (1a834 <net_buf_simple_add+0x44>)
   1a81a:	f00b f808 	bl	2582e <printk>
   1a81e:	f44f 714a 	mov.w	r1, #808	; 0x328
   1a822:	4638      	mov	r0, r7
   1a824:	f00b fa85 	bl	25d32 <assert_post_action>
   1a828:	e7ec      	b.n	1a804 <net_buf_simple_add+0x14>
   1a82a:	bf00      	nop
   1a82c:	0002c890 	.word	0x0002c890
   1a830:	0002c96c 	.word	0x0002c96c
   1a834:	00029ff8 	.word	0x00029ff8

0001a838 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1a838:	4800      	ldr	r0, [pc, #0]	; (1a83c <get_hf_flags+0x4>)
   1a83a:	4770      	bx	lr
   1a83c:	20002670 	.word	0x20002670

0001a840 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1a840:	4b01      	ldr	r3, [pc, #4]	; (1a848 <get_subsys+0x8>)
   1a842:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
   1a844:	1140      	asrs	r0, r0, #5
   1a846:	4770      	bx	lr
   1a848:	20002628 	.word	0x20002628

0001a84c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1a84c:	b530      	push	{r4, r5, lr}
   1a84e:	b083      	sub	sp, #12
   1a850:	4605      	mov	r5, r0
   1a852:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1a854:	f7ff fff4 	bl	1a840 <get_subsys>
   1a858:	4601      	mov	r1, r0
   1a85a:	2340      	movs	r3, #64	; 0x40
   1a85c:	9300      	str	r3, [sp, #0]
   1a85e:	4623      	mov	r3, r4
   1a860:	4a05      	ldr	r2, [pc, #20]	; (1a878 <onoff_start+0x2c>)
   1a862:	4806      	ldr	r0, [pc, #24]	; (1a87c <onoff_start+0x30>)
   1a864:	f00e f828 	bl	288b8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1a868:	1e01      	subs	r1, r0, #0
   1a86a:	db01      	blt.n	1a870 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1a86c:	b003      	add	sp, #12
   1a86e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1a870:	4628      	mov	r0, r5
   1a872:	47a0      	blx	r4
}
   1a874:	e7fa      	b.n	1a86c <onoff_start+0x20>
   1a876:	bf00      	nop
   1a878:	00028901 	.word	0x00028901
   1a87c:	00029b14 	.word	0x00029b14

0001a880 <generic_hfclk_stop>:
{
   1a880:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a882:	4b0a      	ldr	r3, [pc, #40]	; (1a8ac <generic_hfclk_stop+0x2c>)
   1a884:	f3bf 8f5b 	dmb	ish
   1a888:	e853 2f00 	ldrex	r2, [r3]
   1a88c:	f022 0102 	bic.w	r1, r2, #2
   1a890:	e843 1000 	strex	r0, r1, [r3]
   1a894:	2800      	cmp	r0, #0
   1a896:	d1f7      	bne.n	1a888 <generic_hfclk_stop+0x8>
   1a898:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1a89c:	f012 0f01 	tst.w	r2, #1
   1a8a0:	d000      	beq.n	1a8a4 <generic_hfclk_stop+0x24>
}
   1a8a2:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1a8a4:	f00e f83e 	bl	28924 <hfclk_stop>
   1a8a8:	e7fb      	b.n	1a8a2 <generic_hfclk_stop+0x22>
   1a8aa:	bf00      	nop
   1a8ac:	20002680 	.word	0x20002680

0001a8b0 <generic_hfclk_start>:
{
   1a8b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a8b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a8b6:	f3ef 8411 	mrs	r4, BASEPRI
   1a8ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1a8be:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1a8c2:	4a13      	ldr	r2, [pc, #76]	; (1a910 <generic_hfclk_start+0x60>)
   1a8c4:	6813      	ldr	r3, [r2, #0]
   1a8c6:	f043 0302 	orr.w	r3, r3, #2
   1a8ca:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1a8cc:	f013 0f01 	tst.w	r3, #1
   1a8d0:	d108      	bne.n	1a8e4 <generic_hfclk_start+0x34>
	bool already_started = false;
   1a8d2:	2300      	movs	r3, #0
	__asm__ volatile(
   1a8d4:	f384 8811 	msr	BASEPRI, r4
   1a8d8:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1a8dc:	b99b      	cbnz	r3, 1a906 <generic_hfclk_start+0x56>
	hfclk_start();
   1a8de:	f00e f817 	bl	28910 <hfclk_start>
}
   1a8e2:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1a8e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a8e8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1a8ec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1a8f0:	f012 0f01 	tst.w	r2, #1
   1a8f4:	d101      	bne.n	1a8fa <generic_hfclk_start+0x4a>
	bool already_started = false;
   1a8f6:	2300      	movs	r3, #0
   1a8f8:	e7ec      	b.n	1a8d4 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   1a8fa:	f7ff ff9d 	bl	1a838 <get_hf_flags>
   1a8fe:	f00d ffb6 	bl	2886e <set_on_state>
			already_started = true;
   1a902:	2301      	movs	r3, #1
   1a904:	e7e6      	b.n	1a8d4 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   1a906:	2100      	movs	r1, #0
   1a908:	4802      	ldr	r0, [pc, #8]	; (1a914 <generic_hfclk_start+0x64>)
   1a90a:	f00d ffc3 	bl	28894 <clkstarted_handle>
		return;
   1a90e:	e7e8      	b.n	1a8e2 <generic_hfclk_start+0x32>
   1a910:	20002680 	.word	0x20002680
   1a914:	00029b14 	.word	0x00029b14

0001a918 <get_status>:
{
   1a918:	b570      	push	{r4, r5, r6, lr}
   1a91a:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1a91c:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1a91e:	2c01      	cmp	r4, #1
   1a920:	d807      	bhi.n	1a932 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1a922:	4621      	mov	r1, r4
   1a924:	4628      	mov	r0, r5
   1a926:	f00d ff58 	bl	287da <get_sub_data>
   1a92a:	6880      	ldr	r0, [r0, #8]
}
   1a92c:	f000 0007 	and.w	r0, r0, #7
   1a930:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1a932:	4e06      	ldr	r6, [pc, #24]	; (1a94c <get_status+0x34>)
   1a934:	2379      	movs	r3, #121	; 0x79
   1a936:	4632      	mov	r2, r6
   1a938:	4905      	ldr	r1, [pc, #20]	; (1a950 <get_status+0x38>)
   1a93a:	4806      	ldr	r0, [pc, #24]	; (1a954 <get_status+0x3c>)
   1a93c:	f00a ff77 	bl	2582e <printk>
   1a940:	2179      	movs	r1, #121	; 0x79
   1a942:	4630      	mov	r0, r6
   1a944:	f00b f9f5 	bl	25d32 <assert_post_action>
   1a948:	e7eb      	b.n	1a922 <get_status+0xa>
   1a94a:	bf00      	nop
   1a94c:	0002c9a4 	.word	0x0002c9a4
   1a950:	0002c9e4 	.word	0x0002c9e4
   1a954:	00029ff8 	.word	0x00029ff8

0001a958 <stop>:
{
   1a958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a95c:	4607      	mov	r7, r0
   1a95e:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1a960:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1a962:	4621      	mov	r1, r4
   1a964:	f00d ff39 	bl	287da <get_sub_data>
   1a968:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1a96a:	2c01      	cmp	r4, #1
   1a96c:	d80f      	bhi.n	1a98e <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
   1a96e:	4631      	mov	r1, r6
   1a970:	f105 0008 	add.w	r0, r5, #8
   1a974:	f00d ff42 	bl	287fc <set_off_state>
	if (err < 0) {
   1a978:	2800      	cmp	r0, #0
   1a97a:	db06      	blt.n	1a98a <stop+0x32>
	get_sub_config(dev, type)->stop();
   1a97c:	4621      	mov	r1, r4
   1a97e:	4638      	mov	r0, r7
   1a980:	f00d ff32 	bl	287e8 <get_sub_config>
   1a984:	6843      	ldr	r3, [r0, #4]
   1a986:	4798      	blx	r3
	return 0;
   1a988:	2000      	movs	r0, #0
}
   1a98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1a98e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1a9b4 <stop+0x5c>
   1a992:	f240 134d 	movw	r3, #333	; 0x14d
   1a996:	4642      	mov	r2, r8
   1a998:	4904      	ldr	r1, [pc, #16]	; (1a9ac <stop+0x54>)
   1a99a:	4805      	ldr	r0, [pc, #20]	; (1a9b0 <stop+0x58>)
   1a99c:	f00a ff47 	bl	2582e <printk>
   1a9a0:	f240 114d 	movw	r1, #333	; 0x14d
   1a9a4:	4640      	mov	r0, r8
   1a9a6:	f00b f9c4 	bl	25d32 <assert_post_action>
   1a9aa:	e7e0      	b.n	1a96e <stop+0x16>
   1a9ac:	0002c9e4 	.word	0x0002c9e4
   1a9b0:	00029ff8 	.word	0x00029ff8
   1a9b4:	0002c9a4 	.word	0x0002c9a4

0001a9b8 <onoff_stop>:
{
   1a9b8:	b538      	push	{r3, r4, r5, lr}
   1a9ba:	4605      	mov	r5, r0
   1a9bc:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1a9be:	f7ff ff3f 	bl	1a840 <get_subsys>
   1a9c2:	4601      	mov	r1, r0
   1a9c4:	2240      	movs	r2, #64	; 0x40
   1a9c6:	4803      	ldr	r0, [pc, #12]	; (1a9d4 <onoff_stop+0x1c>)
   1a9c8:	f7ff ffc6 	bl	1a958 <stop>
   1a9cc:	4601      	mov	r1, r0
	notify(mgr, res);
   1a9ce:	4628      	mov	r0, r5
   1a9d0:	47a0      	blx	r4
}
   1a9d2:	bd38      	pop	{r3, r4, r5, pc}
   1a9d4:	00029b14 	.word	0x00029b14

0001a9d8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1a9d8:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1a9da:	2801      	cmp	r0, #1
   1a9dc:	d01d      	beq.n	1aa1a <clock_event_handler+0x42>
   1a9de:	2803      	cmp	r0, #3
   1a9e0:	d020      	beq.n	1aa24 <clock_event_handler+0x4c>
   1a9e2:	b168      	cbz	r0, 1aa00 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
   1a9e4:	4c16      	ldr	r4, [pc, #88]	; (1aa40 <clock_event_handler+0x68>)
   1a9e6:	f240 2362 	movw	r3, #610	; 0x262
   1a9ea:	4622      	mov	r2, r4
   1a9ec:	4915      	ldr	r1, [pc, #84]	; (1aa44 <clock_event_handler+0x6c>)
   1a9ee:	4816      	ldr	r0, [pc, #88]	; (1aa48 <clock_event_handler+0x70>)
   1a9f0:	f00a ff1d 	bl	2582e <printk>
   1a9f4:	f240 2162 	movw	r1, #610	; 0x262
   1a9f8:	4620      	mov	r0, r4
   1a9fa:	f00b f99a 	bl	25d32 <assert_post_action>
		break;
	}
}
   1a9fe:	e010      	b.n	1aa22 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1aa00:	2100      	movs	r1, #0
   1aa02:	4812      	ldr	r0, [pc, #72]	; (1aa4c <clock_event_handler+0x74>)
   1aa04:	f00d fee9 	bl	287da <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1aa08:	6883      	ldr	r3, [r0, #8]
   1aa0a:	f013 0f07 	tst.w	r3, #7
   1aa0e:	d108      	bne.n	1aa22 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1aa10:	2100      	movs	r1, #0
   1aa12:	480e      	ldr	r0, [pc, #56]	; (1aa4c <clock_event_handler+0x74>)
   1aa14:	f00d ff3e 	bl	28894 <clkstarted_handle>
   1aa18:	e003      	b.n	1aa22 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1aa1a:	2101      	movs	r1, #1
   1aa1c:	480b      	ldr	r0, [pc, #44]	; (1aa4c <clock_event_handler+0x74>)
   1aa1e:	f00d ff39 	bl	28894 <clkstarted_handle>
}
   1aa22:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
   1aa24:	4c06      	ldr	r4, [pc, #24]	; (1aa40 <clock_event_handler+0x68>)
   1aa26:	f240 235e 	movw	r3, #606	; 0x25e
   1aa2a:	4622      	mov	r2, r4
   1aa2c:	4905      	ldr	r1, [pc, #20]	; (1aa44 <clock_event_handler+0x6c>)
   1aa2e:	4806      	ldr	r0, [pc, #24]	; (1aa48 <clock_event_handler+0x70>)
   1aa30:	f00a fefd 	bl	2582e <printk>
   1aa34:	f240 215e 	movw	r1, #606	; 0x25e
   1aa38:	4620      	mov	r0, r4
   1aa3a:	f00b f97a 	bl	25d32 <assert_post_action>
		break;
   1aa3e:	e7f0      	b.n	1aa22 <clock_event_handler+0x4a>
   1aa40:	0002c9a4 	.word	0x0002c9a4
   1aa44:	0002dc18 	.word	0x0002dc18
   1aa48:	00029ff8 	.word	0x00029ff8
   1aa4c:	00029b14 	.word	0x00029b14

0001aa50 <api_blocking_start>:
{
   1aa50:	b500      	push	{lr}
   1aa52:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1aa54:	f8cd d000 	str.w	sp, [sp]
   1aa58:	f8cd d004 	str.w	sp, [sp, #4]
   1aa5c:	2300      	movs	r3, #0
   1aa5e:	9302      	str	r3, [sp, #8]
   1aa60:	2301      	movs	r3, #1
   1aa62:	9303      	str	r3, [sp, #12]
   1aa64:	ab04      	add	r3, sp, #16
   1aa66:	9304      	str	r3, [sp, #16]
   1aa68:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1aa6a:	466b      	mov	r3, sp
   1aa6c:	4a06      	ldr	r2, [pc, #24]	; (1aa88 <api_blocking_start+0x38>)
   1aa6e:	f00d ff3f 	bl	288f0 <api_start>
	if (err < 0) {
   1aa72:	2800      	cmp	r0, #0
   1aa74:	db05      	blt.n	1aa82 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1aa76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1aa7a:	2300      	movs	r3, #0
   1aa7c:	4668      	mov	r0, sp
   1aa7e:	f004 fc07 	bl	1f290 <z_impl_k_sem_take>
}
   1aa82:	b007      	add	sp, #28
   1aa84:	f85d fb04 	ldr.w	pc, [sp], #4
   1aa88:	00028943 	.word	0x00028943

0001aa8c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1aa8c:	b570      	push	{r4, r5, r6, lr}
   1aa8e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1aa90:	2200      	movs	r2, #0
   1aa92:	2101      	movs	r1, #1
   1aa94:	4610      	mov	r0, r2
   1aa96:	f7f8 fbe9 	bl	1326c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1aa9a:	2000      	movs	r0, #0
   1aa9c:	f7f8 fbb4 	bl	13208 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1aaa0:	4811      	ldr	r0, [pc, #68]	; (1aae8 <clk_init+0x5c>)
   1aaa2:	f001 ffc5 	bl	1ca30 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1aaa6:	4b11      	ldr	r3, [pc, #68]	; (1aaec <clk_init+0x60>)
   1aaa8:	4298      	cmp	r0, r3
   1aaaa:	d11a      	bne.n	1aae2 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1aaac:	f00e fd76 	bl	2959c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1aab0:	2400      	movs	r4, #0
   1aab2:	e003      	b.n	1aabc <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1aab4:	2301      	movs	r3, #1
   1aab6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1aab8:	441c      	add	r4, r3
   1aaba:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   1aabc:	2c01      	cmp	r4, #1
   1aabe:	d80e      	bhi.n	1aade <clk_init+0x52>
						get_sub_data(dev, i);
   1aac0:	4621      	mov	r1, r4
   1aac2:	4630      	mov	r0, r6
   1aac4:	f00d fe89 	bl	287da <get_sub_data>
   1aac8:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1aaca:	4621      	mov	r1, r4
   1aacc:	4630      	mov	r0, r6
   1aace:	f00d fe91 	bl	287f4 <get_onoff_manager>
   1aad2:	4907      	ldr	r1, [pc, #28]	; (1aaf0 <clk_init+0x64>)
   1aad4:	f00a ff47 	bl	25966 <onoff_manager_init>
		if (err < 0) {
   1aad8:	2800      	cmp	r0, #0
   1aada:	daeb      	bge.n	1aab4 <clk_init+0x28>
   1aadc:	e000      	b.n	1aae0 <clk_init+0x54>
	}

	return 0;
   1aade:	2000      	movs	r0, #0
}
   1aae0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1aae2:	f06f 0004 	mvn.w	r0, #4
   1aae6:	e7fb      	b.n	1aae0 <clk_init+0x54>
   1aae8:	0001a9d9 	.word	0x0001a9d9
   1aaec:	0bad0000 	.word	0x0bad0000
   1aaf0:	0002ca6c 	.word	0x0002ca6c

0001aaf4 <lfclk_spinwait>:
{
   1aaf4:	b570      	push	{r4, r5, r6, lr}
   1aaf6:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1aaf8:	2801      	cmp	r0, #1
   1aafa:	d107      	bne.n	1ab0c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1aafc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ab00:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1ab04:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1ab08:	2b01      	cmp	r3, #1
   1ab0a:	d058      	beq.n	1abbe <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ab0c:	f00e fdca 	bl	296a4 <k_is_in_isr>
   1ab10:	b928      	cbnz	r0, 1ab1e <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   1ab12:	4b2e      	ldr	r3, [pc, #184]	; (1abcc <lfclk_spinwait+0xd8>)
   1ab14:	781b      	ldrb	r3, [r3, #0]
   1ab16:	2b00      	cmp	r3, #0
   1ab18:	d041      	beq.n	1ab9e <lfclk_spinwait+0xaa>
   1ab1a:	2300      	movs	r3, #0
   1ab1c:	e000      	b.n	1ab20 <lfclk_spinwait+0x2c>
   1ab1e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   1ab20:	461c      	mov	r4, r3
   1ab22:	2b00      	cmp	r3, #0
   1ab24:	d03d      	beq.n	1aba2 <lfclk_spinwait+0xae>
	__asm__ volatile(
   1ab26:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab2a:	f3ef 8611 	mrs	r6, BASEPRI
   1ab2e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab32:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   1ab36:	b924      	cbnz	r4, 1ab42 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   1ab38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ab3c:	2202      	movs	r2, #2
   1ab3e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ab42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ab46:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1ab4a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ab4e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1ab52:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1ab56:	d12b      	bne.n	1abb0 <lfclk_spinwait+0xbc>
    return false;
   1ab58:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1ab5a:	b11a      	cbz	r2, 1ab64 <lfclk_spinwait+0x70>
   1ab5c:	2b01      	cmp	r3, #1
   1ab5e:	d029      	beq.n	1abb4 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1ab60:	2d01      	cmp	r5, #1
   1ab62:	d027      	beq.n	1abb4 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1ab64:	b1fc      	cbz	r4, 1aba6 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1ab66:	4630      	mov	r0, r6
   1ab68:	f7f8 faf6 	bl	13158 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1ab6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ab70:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1ab74:	2b00      	cmp	r3, #0
   1ab76:	d1e4      	bne.n	1ab42 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ab78:	4b15      	ldr	r3, [pc, #84]	; (1abd0 <lfclk_spinwait+0xdc>)
   1ab7a:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1ab7c:	2b00      	cmp	r3, #0
   1ab7e:	d0e0      	beq.n	1ab42 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ab80:	4b13      	ldr	r3, [pc, #76]	; (1abd0 <lfclk_spinwait+0xdc>)
   1ab82:	2200      	movs	r2, #0
   1ab84:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1ab86:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ab88:	2301      	movs	r3, #1
   1ab8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ab8e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ab92:	4a10      	ldr	r2, [pc, #64]	; (1abd4 <lfclk_spinwait+0xe0>)
   1ab94:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ab98:	4a0f      	ldr	r2, [pc, #60]	; (1abd8 <lfclk_spinwait+0xe4>)
   1ab9a:	6013      	str	r3, [r2, #0]
}
   1ab9c:	e7d1      	b.n	1ab42 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ab9e:	2301      	movs	r3, #1
   1aba0:	e7be      	b.n	1ab20 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   1aba2:	2600      	movs	r6, #0
   1aba4:	e7c7      	b.n	1ab36 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   1aba6:	2021      	movs	r0, #33	; 0x21
   1aba8:	2100      	movs	r1, #0
   1abaa:	f006 fc15 	bl	213d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1abae:	e7dd      	b.n	1ab6c <lfclk_spinwait+0x78>
                return true;
   1abb0:	2201      	movs	r2, #1
   1abb2:	e7d2      	b.n	1ab5a <lfclk_spinwait+0x66>
	if (isr_mode) {
   1abb4:	b124      	cbz	r4, 1abc0 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   1abb6:	f386 8811 	msr	BASEPRI, r6
   1abba:	f3bf 8f6f 	isb	sy
}
   1abbe:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   1abc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1abc4:	2202      	movs	r2, #2
   1abc6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1abca:	e7f8      	b.n	1abbe <lfclk_spinwait+0xca>
   1abcc:	2000375b 	.word	0x2000375b
   1abd0:	40000104 	.word	0x40000104
   1abd4:	e000e100 	.word	0xe000e100
   1abd8:	40000008 	.word	0x40000008

0001abdc <z_nrf_clock_control_lf_on>:
{
   1abdc:	b538      	push	{r3, r4, r5, lr}
   1abde:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1abe0:	4b1f      	ldr	r3, [pc, #124]	; (1ac60 <z_nrf_clock_control_lf_on+0x84>)
   1abe2:	2101      	movs	r1, #1
   1abe4:	f3bf 8f5b 	dmb	ish
   1abe8:	e853 2f00 	ldrex	r2, [r3]
   1abec:	e843 1000 	strex	r0, r1, [r3]
   1abf0:	2800      	cmp	r0, #0
   1abf2:	d1f9      	bne.n	1abe8 <z_nrf_clock_control_lf_on+0xc>
   1abf4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1abf8:	b142      	cbz	r2, 1ac0c <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
   1abfa:	b134      	cbz	r4, 1ac0a <z_nrf_clock_control_lf_on+0x2e>
   1abfc:	1e63      	subs	r3, r4, #1
   1abfe:	b2db      	uxtb	r3, r3
   1ac00:	2b01      	cmp	r3, #1
   1ac02:	d81e      	bhi.n	1ac42 <z_nrf_clock_control_lf_on+0x66>
		lfclk_spinwait(start_mode);
   1ac04:	4620      	mov	r0, r4
   1ac06:	f7ff ff75 	bl	1aaf4 <lfclk_spinwait>
}
   1ac0a:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1ac0c:	4815      	ldr	r0, [pc, #84]	; (1ac64 <z_nrf_clock_control_lf_on+0x88>)
   1ac0e:	f00d fdf1 	bl	287f4 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1ac12:	4915      	ldr	r1, [pc, #84]	; (1ac68 <z_nrf_clock_control_lf_on+0x8c>)
   1ac14:	2300      	movs	r3, #0
   1ac16:	604b      	str	r3, [r1, #4]
   1ac18:	60cb      	str	r3, [r1, #12]
   1ac1a:	2301      	movs	r3, #1
   1ac1c:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   1ac1e:	f7f5 fc4b 	bl	104b8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1ac22:	2800      	cmp	r0, #0
   1ac24:	dae9      	bge.n	1abfa <z_nrf_clock_control_lf_on+0x1e>
   1ac26:	4d11      	ldr	r5, [pc, #68]	; (1ac6c <z_nrf_clock_control_lf_on+0x90>)
   1ac28:	f44f 7308 	mov.w	r3, #544	; 0x220
   1ac2c:	462a      	mov	r2, r5
   1ac2e:	4910      	ldr	r1, [pc, #64]	; (1ac70 <z_nrf_clock_control_lf_on+0x94>)
   1ac30:	4810      	ldr	r0, [pc, #64]	; (1ac74 <z_nrf_clock_control_lf_on+0x98>)
   1ac32:	f00a fdfc 	bl	2582e <printk>
   1ac36:	f44f 7108 	mov.w	r1, #544	; 0x220
   1ac3a:	4628      	mov	r0, r5
   1ac3c:	f00b f879 	bl	25d32 <assert_post_action>
   1ac40:	e7db      	b.n	1abfa <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
   1ac42:	4c0a      	ldr	r4, [pc, #40]	; (1ac6c <z_nrf_clock_control_lf_on+0x90>)
   1ac44:	f240 2332 	movw	r3, #562	; 0x232
   1ac48:	4622      	mov	r2, r4
   1ac4a:	490b      	ldr	r1, [pc, #44]	; (1ac78 <z_nrf_clock_control_lf_on+0x9c>)
   1ac4c:	4809      	ldr	r0, [pc, #36]	; (1ac74 <z_nrf_clock_control_lf_on+0x98>)
   1ac4e:	f00a fdee 	bl	2582e <printk>
   1ac52:	f240 2132 	movw	r1, #562	; 0x232
   1ac56:	4620      	mov	r0, r4
   1ac58:	f00b f86b 	bl	25d32 <assert_post_action>
   1ac5c:	e7d5      	b.n	1ac0a <z_nrf_clock_control_lf_on+0x2e>
   1ac5e:	bf00      	nop
   1ac60:	20002684 	.word	0x20002684
   1ac64:	00029b14 	.word	0x00029b14
   1ac68:	20002618 	.word	0x20002618
   1ac6c:	0002c9a4 	.word	0x0002c9a4
   1ac70:	0002ca08 	.word	0x0002ca08
   1ac74:	00029ff8 	.word	0x00029ff8
   1ac78:	0002dc18 	.word	0x0002dc18

0001ac7c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1ac7c:	b510      	push	{r4, lr}
   1ac7e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1ac80:	280a      	cmp	r0, #10
   1ac82:	d007      	beq.n	1ac94 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1ac84:	4b07      	ldr	r3, [pc, #28]	; (1aca4 <console_out+0x28>)
   1ac86:	6818      	ldr	r0, [r3, #0]
   1ac88:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1ac8a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1ac8c:	685b      	ldr	r3, [r3, #4]
   1ac8e:	4798      	blx	r3

	return c;
}
   1ac90:	4620      	mov	r0, r4
   1ac92:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   1ac94:	4b03      	ldr	r3, [pc, #12]	; (1aca4 <console_out+0x28>)
   1ac96:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   1ac98:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1ac9a:	685b      	ldr	r3, [r3, #4]
   1ac9c:	210d      	movs	r1, #13
   1ac9e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   1aca0:	e7f0      	b.n	1ac84 <console_out+0x8>
   1aca2:	bf00      	nop
   1aca4:	20002688 	.word	0x20002688

0001aca8 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   1aca8:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1acaa:	4c04      	ldr	r4, [pc, #16]	; (1acbc <uart_console_hook_install+0x14>)
   1acac:	4620      	mov	r0, r4
   1acae:	f7f9 fa59 	bl	14164 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   1acb2:	4620      	mov	r0, r4
   1acb4:	f7f5 f93c 	bl	ff30 <__printk_hook_install>
#endif
}
   1acb8:	bd10      	pop	{r4, pc}
   1acba:	bf00      	nop
   1acbc:	0001ac7d 	.word	0x0001ac7d

0001acc0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1acc0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1acc2:	4806      	ldr	r0, [pc, #24]	; (1acdc <uart_console_init+0x1c>)
   1acc4:	4b06      	ldr	r3, [pc, #24]	; (1ace0 <uart_console_init+0x20>)
   1acc6:	6018      	str	r0, [r3, #0]
   1acc8:	f00e fc9f 	bl	2960a <z_device_ready>
   1accc:	b118      	cbz	r0, 1acd6 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   1acce:	f7ff ffeb 	bl	1aca8 <uart_console_hook_install>

	return 0;
   1acd2:	2000      	movs	r0, #0
}
   1acd4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1acd6:	f06f 0012 	mvn.w	r0, #18
   1acda:	e7fb      	b.n	1acd4 <uart_console_init+0x14>
   1acdc:	00029ba4 	.word	0x00029ba4
   1ace0:	20002688 	.word	0x20002688

0001ace4 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ace4:	4b1f      	ldr	r3, [pc, #124]	; (1ad64 <get_drive+0x80>)
   1ace6:	4003      	ands	r3, r0
   1ace8:	4a1f      	ldr	r2, [pc, #124]	; (1ad68 <get_drive+0x84>)
   1acea:	4293      	cmp	r3, r2
   1acec:	d032      	beq.n	1ad54 <get_drive+0x70>
   1acee:	d816      	bhi.n	1ad1e <get_drive+0x3a>
   1acf0:	2b06      	cmp	r3, #6
   1acf2:	d02b      	beq.n	1ad4c <get_drive+0x68>
   1acf4:	d906      	bls.n	1ad04 <get_drive+0x20>
   1acf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1acfa:	d10d      	bne.n	1ad18 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   1acfc:	2301      	movs	r3, #1
   1acfe:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1ad00:	2000      	movs	r0, #0
		break;
   1ad02:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ad04:	b1fb      	cbz	r3, 1ad46 <get_drive+0x62>
   1ad06:	2b02      	cmp	r3, #2
   1ad08:	d103      	bne.n	1ad12 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   1ad0a:	2304      	movs	r3, #4
   1ad0c:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1ad0e:	2000      	movs	r0, #0
		break;
   1ad10:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ad12:	f06f 0015 	mvn.w	r0, #21
   1ad16:	4770      	bx	lr
   1ad18:	f06f 0015 	mvn.w	r0, #21
   1ad1c:	4770      	bx	lr
   1ad1e:	4a13      	ldr	r2, [pc, #76]	; (1ad6c <get_drive+0x88>)
   1ad20:	4293      	cmp	r3, r2
   1ad22:	d01b      	beq.n	1ad5c <get_drive+0x78>
   1ad24:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1ad28:	d103      	bne.n	1ad32 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   1ad2a:	2303      	movs	r3, #3
   1ad2c:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1ad2e:	2000      	movs	r0, #0
		break;
   1ad30:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ad32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1ad36:	d103      	bne.n	1ad40 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   1ad38:	2302      	movs	r3, #2
   1ad3a:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1ad3c:	2000      	movs	r0, #0
		break;
   1ad3e:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ad40:	f06f 0015 	mvn.w	r0, #21
   1ad44:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   1ad46:	2000      	movs	r0, #0
   1ad48:	7008      	strb	r0, [r1, #0]
		break;
   1ad4a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   1ad4c:	2306      	movs	r3, #6
   1ad4e:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1ad50:	2000      	movs	r0, #0
		break;
   1ad52:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   1ad54:	2307      	movs	r3, #7
   1ad56:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1ad58:	2000      	movs	r0, #0
		break;
   1ad5a:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   1ad5c:	2305      	movs	r3, #5
   1ad5e:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1ad60:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   1ad62:	4770      	bx	lr
   1ad64:	00f00006 	.word	0x00f00006
   1ad68:	00100006 	.word	0x00100006
   1ad6c:	00400002 	.word	0x00400002

0001ad70 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1ad70:	b128      	cbz	r0, 1ad7e <get_dev+0xe>
   1ad72:	2801      	cmp	r0, #1
   1ad74:	d101      	bne.n	1ad7a <get_dev+0xa>
   1ad76:	4803      	ldr	r0, [pc, #12]	; (1ad84 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   1ad78:	4770      	bx	lr
	const struct device *dev = NULL;
   1ad7a:	2000      	movs	r0, #0
   1ad7c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1ad7e:	4802      	ldr	r0, [pc, #8]	; (1ad88 <get_dev+0x18>)
   1ad80:	4770      	bx	lr
   1ad82:	bf00      	nop
   1ad84:	00029b2c 	.word	0x00029b2c
   1ad88:	00029b44 	.word	0x00029b44

0001ad8c <gpio_nrfx_manage_callback>:
{
   1ad8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad90:	4615      	mov	r5, r2
	return port->data;
   1ad92:	6906      	ldr	r6, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ad94:	1d37      	adds	r7, r6, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1ad96:	460c      	mov	r4, r1
   1ad98:	b139      	cbz	r1, 1adaa <gpio_nrfx_manage_callback+0x1e>
	__ASSERT(callback->handler, "No callback handler!");
   1ad9a:	6863      	ldr	r3, [r4, #4]
   1ad9c:	b1ab      	cbz	r3, 1adca <gpio_nrfx_manage_callback+0x3e>
	return list->head;
   1ad9e:	6873      	ldr	r3, [r6, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1ada0:	2b00      	cmp	r3, #0
   1ada2:	d03b      	beq.n	1ae1c <gpio_nrfx_manage_callback+0x90>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1ada4:	4621      	mov	r1, r4
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ada6:	2200      	movs	r2, #0
   1ada8:	e02a      	b.n	1ae00 <gpio_nrfx_manage_callback+0x74>
	__ASSERT(callback, "No callback!");
   1adaa:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1ae54 <gpio_nrfx_manage_callback+0xc8>
   1adae:	2324      	movs	r3, #36	; 0x24
   1adb0:	4642      	mov	r2, r8
   1adb2:	4923      	ldr	r1, [pc, #140]	; (1ae40 <gpio_nrfx_manage_callback+0xb4>)
   1adb4:	4823      	ldr	r0, [pc, #140]	; (1ae44 <gpio_nrfx_manage_callback+0xb8>)
   1adb6:	f00a fd3a 	bl	2582e <printk>
   1adba:	4823      	ldr	r0, [pc, #140]	; (1ae48 <gpio_nrfx_manage_callback+0xbc>)
   1adbc:	f00a fd37 	bl	2582e <printk>
   1adc0:	2124      	movs	r1, #36	; 0x24
   1adc2:	4640      	mov	r0, r8
   1adc4:	f00a ffb5 	bl	25d32 <assert_post_action>
   1adc8:	e7e7      	b.n	1ad9a <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
   1adca:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1ae54 <gpio_nrfx_manage_callback+0xc8>
   1adce:	2325      	movs	r3, #37	; 0x25
   1add0:	4642      	mov	r2, r8
   1add2:	491e      	ldr	r1, [pc, #120]	; (1ae4c <gpio_nrfx_manage_callback+0xc0>)
   1add4:	481b      	ldr	r0, [pc, #108]	; (1ae44 <gpio_nrfx_manage_callback+0xb8>)
   1add6:	f00a fd2a 	bl	2582e <printk>
   1adda:	481d      	ldr	r0, [pc, #116]	; (1ae50 <gpio_nrfx_manage_callback+0xc4>)
   1addc:	f00a fd27 	bl	2582e <printk>
   1ade0:	2125      	movs	r1, #37	; 0x25
   1ade2:	4640      	mov	r0, r8
   1ade4:	f00a ffa5 	bl	25d32 <assert_post_action>
   1ade8:	e7d9      	b.n	1ad9e <gpio_nrfx_manage_callback+0x12>
	return node->next;
   1adea:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1adec:	6073      	str	r3, [r6, #4]
	return list->tail;
   1adee:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   1adf0:	4294      	cmp	r4, r2
   1adf2:	d10f      	bne.n	1ae14 <gpio_nrfx_manage_callback+0x88>
	list->tail = node;
   1adf4:	607b      	str	r3, [r7, #4]
}
   1adf6:	e00d      	b.n	1ae14 <gpio_nrfx_manage_callback+0x88>
	list->tail = node;
   1adf8:	607a      	str	r2, [r7, #4]
}
   1adfa:	e00b      	b.n	1ae14 <gpio_nrfx_manage_callback+0x88>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1adfc:	461a      	mov	r2, r3
   1adfe:	681b      	ldr	r3, [r3, #0]
   1ae00:	b15b      	cbz	r3, 1ae1a <gpio_nrfx_manage_callback+0x8e>
   1ae02:	4299      	cmp	r1, r3
   1ae04:	d1fa      	bne.n	1adfc <gpio_nrfx_manage_callback+0x70>
Z_GENLIST_REMOVE(slist, snode)
   1ae06:	2a00      	cmp	r2, #0
   1ae08:	d0ef      	beq.n	1adea <gpio_nrfx_manage_callback+0x5e>
	return node->next;
   1ae0a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   1ae0c:	6013      	str	r3, [r2, #0]
	return list->tail;
   1ae0e:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ae10:	429c      	cmp	r4, r3
   1ae12:	d0f1      	beq.n	1adf8 <gpio_nrfx_manage_callback+0x6c>
	parent->next = child;
   1ae14:	2300      	movs	r3, #0
   1ae16:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ae18:	e000      	b.n	1ae1c <gpio_nrfx_manage_callback+0x90>
			if (!set) {
   1ae1a:	b155      	cbz	r5, 1ae32 <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
   1ae1c:	b165      	cbz	r5, 1ae38 <gpio_nrfx_manage_callback+0xac>
	return list->head;
   1ae1e:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
   1ae20:	6023      	str	r3, [r4, #0]
	list->head = node;
   1ae22:	6074      	str	r4, [r6, #4]
	return list->tail;
   1ae24:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ae26:	b10b      	cbz	r3, 1ae2c <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1ae28:	2000      	movs	r0, #0
   1ae2a:	e006      	b.n	1ae3a <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
   1ae2c:	607c      	str	r4, [r7, #4]
   1ae2e:	2000      	movs	r0, #0
}
   1ae30:	e003      	b.n	1ae3a <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
   1ae32:	f06f 0015 	mvn.w	r0, #21
   1ae36:	e000      	b.n	1ae3a <gpio_nrfx_manage_callback+0xae>
	return 0;
   1ae38:	2000      	movs	r0, #0
}
   1ae3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae3e:	bf00      	nop
   1ae40:	0002caa8 	.word	0x0002caa8
   1ae44:	00029ff8 	.word	0x00029ff8
   1ae48:	0002cab4 	.word	0x0002cab4
   1ae4c:	0002cac4 	.word	0x0002cac4
   1ae50:	0002cad8 	.word	0x0002cad8
   1ae54:	0002ca78 	.word	0x0002ca78

0001ae58 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   1ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1ae5c:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
   1ae60:	0940      	lsrs	r0, r0, #5
   1ae62:	f7ff ff85 	bl	1ad70 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
   1ae66:	b380      	cbz	r0, 1aeca <nrfx_gpio_handler+0x72>
   1ae68:	4607      	mov	r7, r0
	return port->data;
   1ae6a:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
   1ae6c:	2601      	movs	r6, #1
   1ae6e:	40a6      	lsls	r6, r4
	return list->head;
   1ae70:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ae72:	b11c      	cbz	r4, 1ae7c <nrfx_gpio_handler+0x24>
   1ae74:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ae76:	b17c      	cbz	r4, 1ae98 <nrfx_gpio_handler+0x40>
	return node->next;
   1ae78:	6825      	ldr	r5, [r4, #0]
   1ae7a:	e00d      	b.n	1ae98 <nrfx_gpio_handler+0x40>
   1ae7c:	4625      	mov	r5, r4
   1ae7e:	e00b      	b.n	1ae98 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1ae80:	6863      	ldr	r3, [r4, #4]
   1ae82:	68a2      	ldr	r2, [r4, #8]
   1ae84:	4032      	ands	r2, r6
   1ae86:	4621      	mov	r1, r4
   1ae88:	4638      	mov	r0, r7
   1ae8a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ae8c:	b1dd      	cbz	r5, 1aec6 <nrfx_gpio_handler+0x6e>
   1ae8e:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ae90:	b105      	cbz	r5, 1ae94 <nrfx_gpio_handler+0x3c>
	return node->next;
   1ae92:	682b      	ldr	r3, [r5, #0]
   1ae94:	462c      	mov	r4, r5
   1ae96:	461d      	mov	r5, r3
   1ae98:	b1bc      	cbz	r4, 1aeca <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
   1ae9a:	68a3      	ldr	r3, [r4, #8]
   1ae9c:	421e      	tst	r6, r3
   1ae9e:	d0f5      	beq.n	1ae8c <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
   1aea0:	6863      	ldr	r3, [r4, #4]
   1aea2:	2b00      	cmp	r3, #0
   1aea4:	d1ec      	bne.n	1ae80 <nrfx_gpio_handler+0x28>
   1aea6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1aedc <nrfx_gpio_handler+0x84>
   1aeaa:	2345      	movs	r3, #69	; 0x45
   1aeac:	4642      	mov	r2, r8
   1aeae:	4908      	ldr	r1, [pc, #32]	; (1aed0 <nrfx_gpio_handler+0x78>)
   1aeb0:	4808      	ldr	r0, [pc, #32]	; (1aed4 <nrfx_gpio_handler+0x7c>)
   1aeb2:	f00a fcbc 	bl	2582e <printk>
   1aeb6:	4808      	ldr	r0, [pc, #32]	; (1aed8 <nrfx_gpio_handler+0x80>)
   1aeb8:	f00a fcb9 	bl	2582e <printk>
   1aebc:	2145      	movs	r1, #69	; 0x45
   1aebe:	4640      	mov	r0, r8
   1aec0:	f00a ff37 	bl	25d32 <assert_post_action>
   1aec4:	e7dc      	b.n	1ae80 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1aec6:	462b      	mov	r3, r5
   1aec8:	e7e4      	b.n	1ae94 <nrfx_gpio_handler+0x3c>
}
   1aeca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aece:	bf00      	nop
   1aed0:	0002caf0 	.word	0x0002caf0
   1aed4:	00029ff8 	.word	0x00029ff8
   1aed8:	0002cad8 	.word	0x0002cad8
   1aedc:	0002ca78 	.word	0x0002ca78

0001aee0 <gpio_nrfx_pin_interrupt_configure>:
{
   1aee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aee2:	b085      	sub	sp, #20
   1aee4:	460e      	mov	r6, r1
   1aee6:	4619      	mov	r1, r3
	return port->config;
   1aee8:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1aeea:	7b1b      	ldrb	r3, [r3, #12]
   1aeec:	f006 041f 	and.w	r4, r6, #31
   1aef0:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1aef4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1aef8:	d022      	beq.n	1af40 <gpio_nrfx_pin_interrupt_configure+0x60>
   1aefa:	4607      	mov	r7, r0
   1aefc:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1aefe:	2300      	movs	r3, #0
   1af00:	9302      	str	r3, [sp, #8]
   1af02:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   1af04:	4610      	mov	r0, r2
   1af06:	f00d fd54 	bl	289b2 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1af0a:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   1af0e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1af10:	6899      	ldr	r1, [r3, #8]
   1af12:	40f1      	lsrs	r1, r6
   1af14:	f011 0101 	ands.w	r1, r1, #1
   1af18:	d102      	bne.n	1af20 <gpio_nrfx_pin_interrupt_configure+0x40>
   1af1a:	f5b5 3fa0 	cmp.w	r5, #81920	; 0x14000
   1af1e:	d014      	beq.n	1af4a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1af20:	2300      	movs	r3, #0
   1af22:	aa02      	add	r2, sp, #8
   1af24:	4619      	mov	r1, r3
   1af26:	4620      	mov	r0, r4
   1af28:	f002 fabc 	bl	1d4a4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1af2c:	4b32      	ldr	r3, [pc, #200]	; (1aff8 <gpio_nrfx_pin_interrupt_configure+0x118>)
   1af2e:	4298      	cmp	r0, r3
   1af30:	d15f      	bne.n	1aff2 <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1af32:	2101      	movs	r1, #1
   1af34:	4620      	mov	r0, r4
   1af36:	f002 fd17 	bl	1d968 <nrfx_gpiote_trigger_enable>
	return 0;
   1af3a:	2000      	movs	r0, #0
}
   1af3c:	b005      	add	sp, #20
   1af3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   1af40:	4620      	mov	r0, r4
   1af42:	f002 fe1d 	bl	1db80 <nrfx_gpiote_trigger_disable>
		return 0;
   1af46:	2000      	movs	r0, #0
   1af48:	e7f8      	b.n	1af3c <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
   1af4a:	0963      	lsrs	r3, r4, #5
   1af4c:	d01f      	beq.n	1af8e <gpio_nrfx_pin_interrupt_configure+0xae>
   1af4e:	2b01      	cmp	r3, #1
   1af50:	d101      	bne.n	1af56 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
   1af52:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
   1af56:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1af5a:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1af5c:	f011 0f01 	tst.w	r1, #1
   1af60:	d018      	beq.n	1af94 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
   1af62:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1af66:	0963      	lsrs	r3, r4, #5
   1af68:	d022      	beq.n	1afb0 <gpio_nrfx_pin_interrupt_configure+0xd0>
   1af6a:	2b01      	cmp	r3, #1
   1af6c:	d023      	beq.n	1afb6 <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
   1af6e:	4e23      	ldr	r6, [pc, #140]	; (1affc <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1af70:	f240 232e 	movw	r3, #558	; 0x22e
   1af74:	4632      	mov	r2, r6
   1af76:	4922      	ldr	r1, [pc, #136]	; (1b000 <gpio_nrfx_pin_interrupt_configure+0x120>)
   1af78:	4822      	ldr	r0, [pc, #136]	; (1b004 <gpio_nrfx_pin_interrupt_configure+0x124>)
   1af7a:	f00a fc58 	bl	2582e <printk>
   1af7e:	f240 212e 	movw	r1, #558	; 0x22e
   1af82:	4630      	mov	r0, r6
   1af84:	f00a fed5 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1af88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1af8c:	e014      	b.n	1afb8 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
   1af8e:	f04f 31ff 	mov.w	r1, #4294967295
   1af92:	e7e0      	b.n	1af56 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1af94:	4d19      	ldr	r5, [pc, #100]	; (1affc <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1af96:	f240 2329 	movw	r3, #553	; 0x229
   1af9a:	462a      	mov	r2, r5
   1af9c:	491a      	ldr	r1, [pc, #104]	; (1b008 <gpio_nrfx_pin_interrupt_configure+0x128>)
   1af9e:	4819      	ldr	r0, [pc, #100]	; (1b004 <gpio_nrfx_pin_interrupt_configure+0x124>)
   1afa0:	f00a fc45 	bl	2582e <printk>
   1afa4:	f240 2129 	movw	r1, #553	; 0x229
   1afa8:	4628      	mov	r0, r5
   1afaa:	f00a fec2 	bl	25d32 <assert_post_action>
   1afae:	e7d8      	b.n	1af62 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
   1afb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1afb4:	e000      	b.n	1afb8 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1afb6:	4b15      	ldr	r3, [pc, #84]	; (1b00c <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1afb8:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1afbc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1afc0:	f013 0f01 	tst.w	r3, #1
   1afc4:	d1ac      	bne.n	1af20 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1afc6:	f10d 0107 	add.w	r1, sp, #7
   1afca:	4620      	mov	r0, r4
   1afcc:	f002 fc5c 	bl	1d888 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1afd0:	4b0f      	ldr	r3, [pc, #60]	; (1b010 <gpio_nrfx_pin_interrupt_configure+0x130>)
   1afd2:	4298      	cmp	r0, r3
   1afd4:	d003      	beq.n	1afde <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
   1afd6:	f10d 0307 	add.w	r3, sp, #7
   1afda:	9303      	str	r3, [sp, #12]
   1afdc:	e7a0      	b.n	1af20 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   1afde:	f10d 0007 	add.w	r0, sp, #7
   1afe2:	f002 fcb9 	bl	1d958 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1afe6:	4b04      	ldr	r3, [pc, #16]	; (1aff8 <gpio_nrfx_pin_interrupt_configure+0x118>)
   1afe8:	4298      	cmp	r0, r3
   1afea:	d0f4      	beq.n	1afd6 <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
   1afec:	f06f 000b 	mvn.w	r0, #11
   1aff0:	e7a4      	b.n	1af3c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   1aff2:	f06f 0004 	mvn.w	r0, #4
   1aff6:	e7a1      	b.n	1af3c <gpio_nrfx_pin_interrupt_configure+0x5c>
   1aff8:	0bad0000 	.word	0x0bad0000
   1affc:	0002cafc 	.word	0x0002cafc
   1b000:	0002dc18 	.word	0x0002dc18
   1b004:	00029ff8 	.word	0x00029ff8
   1b008:	0002cb30 	.word	0x0002cb30
   1b00c:	50000300 	.word	0x50000300
   1b010:	0bad0004 	.word	0x0bad0004

0001b014 <pin_uninit>:
{
   1b014:	b530      	push	{r4, r5, lr}
   1b016:	b083      	sub	sp, #12
   1b018:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1b01a:	f10d 0107 	add.w	r1, sp, #7
   1b01e:	f002 fc33 	bl	1d888 <nrfx_gpiote_channel_get>
   1b022:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1b024:	4620      	mov	r0, r4
   1b026:	f002 fe13 	bl	1dc50 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1b02a:	4b0b      	ldr	r3, [pc, #44]	; (1b058 <pin_uninit+0x44>)
   1b02c:	4298      	cmp	r0, r3
   1b02e:	d10f      	bne.n	1b050 <pin_uninit+0x3c>
	if (free_ch) {
   1b030:	429d      	cmp	r5, r3
   1b032:	d005      	beq.n	1b040 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1b034:	4b08      	ldr	r3, [pc, #32]	; (1b058 <pin_uninit+0x44>)
   1b036:	4298      	cmp	r0, r3
   1b038:	d107      	bne.n	1b04a <pin_uninit+0x36>
   1b03a:	2000      	movs	r0, #0
}
   1b03c:	b003      	add	sp, #12
   1b03e:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   1b040:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b044:	f002 fc80 	bl	1d948 <nrfx_gpiote_channel_free>
   1b048:	e7f4      	b.n	1b034 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1b04a:	f06f 0004 	mvn.w	r0, #4
   1b04e:	e7f5      	b.n	1b03c <pin_uninit+0x28>
		return -EIO;
   1b050:	f06f 0004 	mvn.w	r0, #4
   1b054:	e7f2      	b.n	1b03c <pin_uninit+0x28>
   1b056:	bf00      	nop
   1b058:	0bad0000 	.word	0x0bad0000

0001b05c <gpio_nrfx_pin_configure>:
{
   1b05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b060:	b087      	sub	sp, #28
	return port->config;
   1b062:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b066:	f898 300c 	ldrb.w	r3, [r8, #12]
   1b06a:	f001 051f 	and.w	r5, r1, #31
   1b06e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1b072:	2a00      	cmp	r2, #0
   1b074:	d044      	beq.n	1b100 <gpio_nrfx_pin_configure+0xa4>
   1b076:	460c      	mov	r4, r1
   1b078:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b07a:	2600      	movs	r6, #0
   1b07c:	9603      	str	r6, [sp, #12]
   1b07e:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1b080:	f10d 0117 	add.w	r1, sp, #23
   1b084:	4620      	mov	r0, r4
   1b086:	f002 fbff 	bl	1d888 <nrfx_gpiote_channel_get>
   1b08a:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b08c:	4633      	mov	r3, r6
   1b08e:	aa03      	add	r2, sp, #12
   1b090:	4631      	mov	r1, r6
   1b092:	4628      	mov	r0, r5
   1b094:	f002 fa06 	bl	1d4a4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b098:	4b30      	ldr	r3, [pc, #192]	; (1b15c <gpio_nrfx_pin_configure+0x100>)
   1b09a:	4298      	cmp	r0, r3
   1b09c:	d15b      	bne.n	1b156 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
   1b09e:	4599      	cmp	r9, r3
   1b0a0:	d036      	beq.n	1b110 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
   1b0a2:	f417 7f00 	tst.w	r7, #512	; 0x200
   1b0a6:	d043      	beq.n	1b130 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
   1b0a8:	f10d 0103 	add.w	r1, sp, #3
   1b0ac:	4638      	mov	r0, r7
   1b0ae:	f7ff fe19 	bl	1ace4 <get_drive>
		if (rv != 0) {
   1b0b2:	4606      	mov	r6, r0
   1b0b4:	bb40      	cbnz	r0, 1b108 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
   1b0b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b0ba:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1b0be:	f417 7f80 	tst.w	r7, #256	; 0x100
   1b0c2:	bf0c      	ite	eq
   1b0c4:	2301      	moveq	r3, #1
   1b0c6:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   1b0c8:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   1b0cc:	4638      	mov	r0, r7
   1b0ce:	f00d fc3d 	bl	2894c <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1b0d2:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b0d6:	f417 6f00 	tst.w	r7, #2048	; 0x800
   1b0da:	d01e      	beq.n	1b11a <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1b0dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b0e0:	2101      	movs	r1, #1
   1b0e2:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   1b0e6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1b0ea:	2200      	movs	r2, #0
   1b0ec:	a901      	add	r1, sp, #4
   1b0ee:	4628      	mov	r0, r5
   1b0f0:	f002 faca 	bl	1d688 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1b0f4:	4b19      	ldr	r3, [pc, #100]	; (1b15c <gpio_nrfx_pin_configure+0x100>)
   1b0f6:	4298      	cmp	r0, r3
   1b0f8:	d006      	beq.n	1b108 <gpio_nrfx_pin_configure+0xac>
   1b0fa:	f06f 0615 	mvn.w	r6, #21
   1b0fe:	e003      	b.n	1b108 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
   1b100:	4628      	mov	r0, r5
   1b102:	f7ff ff87 	bl	1b014 <pin_uninit>
   1b106:	4606      	mov	r6, r0
}
   1b108:	4630      	mov	r0, r6
   1b10a:	b007      	add	sp, #28
   1b10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   1b110:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1b114:	f002 fc18 	bl	1d948 <nrfx_gpiote_channel_free>
   1b118:	e7c3      	b.n	1b0a2 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1b11a:	f417 6f80 	tst.w	r7, #1024	; 0x400
   1b11e:	d0e4      	beq.n	1b0ea <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1b120:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1b124:	2301      	movs	r3, #1
   1b126:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   1b12a:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
   1b12e:	e7dc      	b.n	1b0ea <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   1b130:	4638      	mov	r0, r7
   1b132:	f00d fc0b 	bl	2894c <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1b136:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b13a:	2300      	movs	r3, #0
   1b13c:	461a      	mov	r2, r3
   1b13e:	a902      	add	r1, sp, #8
   1b140:	4628      	mov	r0, r5
   1b142:	f002 f9af 	bl	1d4a4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1b146:	4b05      	ldr	r3, [pc, #20]	; (1b15c <gpio_nrfx_pin_configure+0x100>)
   1b148:	4298      	cmp	r0, r3
   1b14a:	d101      	bne.n	1b150 <gpio_nrfx_pin_configure+0xf4>
   1b14c:	2600      	movs	r6, #0
   1b14e:	e7db      	b.n	1b108 <gpio_nrfx_pin_configure+0xac>
   1b150:	f06f 0615 	mvn.w	r6, #21
   1b154:	e7d8      	b.n	1b108 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
   1b156:	f06f 0615 	mvn.w	r6, #21
   1b15a:	e7d5      	b.n	1b108 <gpio_nrfx_pin_configure+0xac>
   1b15c:	0bad0000 	.word	0x0bad0000

0001b160 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1b160:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1b162:	f002 fbe7 	bl	1d934 <nrfx_gpiote_is_init>
   1b166:	b108      	cbz	r0, 1b16c <gpio_nrfx_init+0xc>
		return 0;
   1b168:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1b16a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   1b16c:	f002 fbb8 	bl	1d8e0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1b170:	4b08      	ldr	r3, [pc, #32]	; (1b194 <gpio_nrfx_init+0x34>)
   1b172:	4298      	cmp	r0, r3
   1b174:	d10a      	bne.n	1b18c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1b176:	2100      	movs	r1, #0
   1b178:	4807      	ldr	r0, [pc, #28]	; (1b198 <gpio_nrfx_init+0x38>)
   1b17a:	f002 fb7f 	bl	1d87c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1b17e:	2200      	movs	r2, #0
   1b180:	2105      	movs	r1, #5
   1b182:	2006      	movs	r0, #6
   1b184:	f7f8 f872 	bl	1326c <z_arm_irq_priority_set>
	return 0;
   1b188:	2000      	movs	r0, #0
   1b18a:	e7ee      	b.n	1b16a <gpio_nrfx_init+0xa>
		return -EIO;
   1b18c:	f06f 0004 	mvn.w	r0, #4
   1b190:	e7eb      	b.n	1b16a <gpio_nrfx_init+0xa>
   1b192:	bf00      	nop
   1b194:	0bad0000 	.word	0x0bad0000
   1b198:	0001ae59 	.word	0x0001ae59

0001b19c <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   1b19c:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   1b19e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   1b1a0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   1b1a4:	d06f      	beq.n	1b286 <baudrate_set+0xea>
   1b1a6:	d83a      	bhi.n	1b21e <baudrate_set+0x82>
   1b1a8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   1b1ac:	d06e      	beq.n	1b28c <baudrate_set+0xf0>
   1b1ae:	d90a      	bls.n	1b1c6 <baudrate_set+0x2a>
   1b1b0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   1b1b4:	d075      	beq.n	1b2a2 <baudrate_set+0x106>
   1b1b6:	d924      	bls.n	1b202 <baudrate_set+0x66>
   1b1b8:	f647 2312 	movw	r3, #31250	; 0x7a12
   1b1bc:	4299      	cmp	r1, r3
   1b1be:	d12b      	bne.n	1b218 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1b1c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1b1c4:	e013      	b.n	1b1ee <baudrate_set+0x52>
	switch (baudrate) {
   1b1c6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1b1ca:	d061      	beq.n	1b290 <baudrate_set+0xf4>
   1b1cc:	d907      	bls.n	1b1de <baudrate_set+0x42>
   1b1ce:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   1b1d2:	d063      	beq.n	1b29c <baudrate_set+0x100>
   1b1d4:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   1b1d8:	d110      	bne.n	1b1fc <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1b1da:	4b3c      	ldr	r3, [pc, #240]	; (1b2cc <baudrate_set+0x130>)
   1b1dc:	e007      	b.n	1b1ee <baudrate_set+0x52>
	switch (baudrate) {
   1b1de:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1b1e2:	d058      	beq.n	1b296 <baudrate_set+0xfa>
   1b1e4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   1b1e8:	d105      	bne.n	1b1f6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1b1ea:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1b1ee:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   1b1f2:	2000      	movs	r0, #0
   1b1f4:	4770      	bx	lr
	switch (baudrate) {
   1b1f6:	f06f 0015 	mvn.w	r0, #21
   1b1fa:	4770      	bx	lr
   1b1fc:	f06f 0015 	mvn.w	r0, #21
   1b200:	4770      	bx	lr
   1b202:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1b206:	d04e      	beq.n	1b2a6 <baudrate_set+0x10a>
   1b208:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1b20c:	d101      	bne.n	1b212 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1b20e:	4b30      	ldr	r3, [pc, #192]	; (1b2d0 <baudrate_set+0x134>)
   1b210:	e7ed      	b.n	1b1ee <baudrate_set+0x52>
	switch (baudrate) {
   1b212:	f06f 0015 	mvn.w	r0, #21
   1b216:	4770      	bx	lr
   1b218:	f06f 0015 	mvn.w	r0, #21
   1b21c:	4770      	bx	lr
   1b21e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1b222:	d042      	beq.n	1b2aa <baudrate_set+0x10e>
   1b224:	d909      	bls.n	1b23a <baudrate_set+0x9e>
   1b226:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1b22a:	d046      	beq.n	1b2ba <baudrate_set+0x11e>
   1b22c:	d91f      	bls.n	1b26e <baudrate_set+0xd2>
   1b22e:	4b29      	ldr	r3, [pc, #164]	; (1b2d4 <baudrate_set+0x138>)
   1b230:	4299      	cmp	r1, r3
   1b232:	d148      	bne.n	1b2c6 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1b234:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b238:	e7d9      	b.n	1b1ee <baudrate_set+0x52>
	switch (baudrate) {
   1b23a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1b23e:	d037      	beq.n	1b2b0 <baudrate_set+0x114>
   1b240:	d905      	bls.n	1b24e <baudrate_set+0xb2>
   1b242:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1b246:	d10f      	bne.n	1b268 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1b248:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1b24c:	e7cf      	b.n	1b1ee <baudrate_set+0x52>
	switch (baudrate) {
   1b24e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1b252:	4299      	cmp	r1, r3
   1b254:	d02e      	beq.n	1b2b4 <baudrate_set+0x118>
   1b256:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1b25a:	d102      	bne.n	1b262 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1b25c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1b260:	e7c5      	b.n	1b1ee <baudrate_set+0x52>
	switch (baudrate) {
   1b262:	f06f 0015 	mvn.w	r0, #21
   1b266:	4770      	bx	lr
   1b268:	f06f 0015 	mvn.w	r0, #21
   1b26c:	4770      	bx	lr
   1b26e:	4b1a      	ldr	r3, [pc, #104]	; (1b2d8 <baudrate_set+0x13c>)
   1b270:	4299      	cmp	r1, r3
   1b272:	d025      	beq.n	1b2c0 <baudrate_set+0x124>
   1b274:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   1b278:	d102      	bne.n	1b280 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1b27a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1b27e:	e7b6      	b.n	1b1ee <baudrate_set+0x52>
	switch (baudrate) {
   1b280:	f06f 0015 	mvn.w	r0, #21
   1b284:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1b286:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1b28a:	e7b0      	b.n	1b1ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1b28c:	4b13      	ldr	r3, [pc, #76]	; (1b2dc <baudrate_set+0x140>)
   1b28e:	e7ae      	b.n	1b1ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1b290:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1b294:	e7ab      	b.n	1b1ee <baudrate_set+0x52>
	switch (baudrate) {
   1b296:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1b29a:	e7a8      	b.n	1b1ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1b29c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1b2a0:	e7a5      	b.n	1b1ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1b2a2:	4b0f      	ldr	r3, [pc, #60]	; (1b2e0 <baudrate_set+0x144>)
   1b2a4:	e7a3      	b.n	1b1ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1b2a6:	4b0f      	ldr	r3, [pc, #60]	; (1b2e4 <baudrate_set+0x148>)
   1b2a8:	e7a1      	b.n	1b1ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1b2aa:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1b2ae:	e79e      	b.n	1b1ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1b2b0:	4b0d      	ldr	r3, [pc, #52]	; (1b2e8 <baudrate_set+0x14c>)
   1b2b2:	e79c      	b.n	1b1ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1b2b4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1b2b8:	e799      	b.n	1b1ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1b2ba:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b2be:	e796      	b.n	1b1ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1b2c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1b2c4:	e793      	b.n	1b1ee <baudrate_set+0x52>
	switch (baudrate) {
   1b2c6:	f06f 0015 	mvn.w	r0, #21
}
   1b2ca:	4770      	bx	lr
   1b2cc:	0013b000 	.word	0x0013b000
   1b2d0:	004ea000 	.word	0x004ea000
   1b2d4:	000f4240 	.word	0x000f4240
   1b2d8:	0003d090 	.word	0x0003d090
   1b2dc:	00275000 	.word	0x00275000
   1b2e0:	0075c000 	.word	0x0075c000
   1b2e4:	003af000 	.word	0x003af000
   1b2e8:	013a9000 	.word	0x013a9000

0001b2ec <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1b2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b2f0:	4605      	mov	r5, r0
   1b2f2:	460f      	mov	r7, r1
	return dev->data;
   1b2f4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b2f8:	f00e f9d4 	bl	296a4 <k_is_in_isr>
   1b2fc:	b920      	cbnz	r0, 1b308 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   1b2fe:	4b16      	ldr	r3, [pc, #88]	; (1b358 <uarte_nrfx_poll_out+0x6c>)
   1b300:	781b      	ldrb	r3, [r3, #0]
   1b302:	b1ab      	cbz	r3, 1b330 <uarte_nrfx_poll_out+0x44>
   1b304:	2300      	movs	r3, #0
   1b306:	e000      	b.n	1b30a <uarte_nrfx_poll_out+0x1e>
   1b308:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   1b30a:	b19b      	cbz	r3, 1b334 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   1b30c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b310:	f3ef 8411 	mrs	r4, BASEPRI
   1b314:	f383 8812 	msr	BASEPRI_MAX, r3
   1b318:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   1b31c:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   1b31e:	4628      	mov	r0, r5
   1b320:	f00d fc03 	bl	28b2a <is_tx_ready>
   1b324:	b950      	cbnz	r0, 1b33c <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   1b326:	f384 8811 	msr	BASEPRI, r4
   1b32a:	f3bf 8f6f 	isb	sy
}
   1b32e:	e7ed      	b.n	1b30c <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b330:	2301      	movs	r3, #1
   1b332:	e7ea      	b.n	1b30a <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1b334:	4628      	mov	r0, r5
   1b336:	f00d fc47 	bl	28bc8 <wait_tx_ready>
   1b33a:	4606      	mov	r6, r0
	}

	data->char_out = c;
   1b33c:	4641      	mov	r1, r8
   1b33e:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   1b342:	2201      	movs	r2, #1
   1b344:	4628      	mov	r0, r5
   1b346:	f00d fc0a 	bl	28b5e <tx_start>
	__asm__ volatile(
   1b34a:	f386 8811 	msr	BASEPRI, r6
   1b34e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1b352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b356:	bf00      	nop
   1b358:	2000375b 	.word	0x2000375b

0001b35c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1b35c:	b538      	push	{r3, r4, r5, lr}
   1b35e:	4604      	mov	r4, r0
   1b360:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1b362:	f101 0012 	add.w	r0, r1, #18
   1b366:	f002 fcff 	bl	1dd68 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1b36a:	4b14      	ldr	r3, [pc, #80]	; (1b3bc <endtx_stoptx_ppi_init+0x60>)
   1b36c:	4298      	cmp	r0, r3
   1b36e:	d111      	bne.n	1b394 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1b370:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1b372:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1b376:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b378:	4a11      	ldr	r2, [pc, #68]	; (1b3c0 <endtx_stoptx_ppi_init+0x64>)
   1b37a:	33a2      	adds	r3, #162	; 0xa2
   1b37c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b384:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1b386:	7ca9      	ldrb	r1, [r5, #18]
   1b388:	2301      	movs	r3, #1
   1b38a:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   1b38c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   1b390:	2000      	movs	r0, #0
}
   1b392:	bd38      	pop	{r3, r4, r5, pc}
   1b394:	4b0b      	ldr	r3, [pc, #44]	; (1b3c4 <endtx_stoptx_ppi_init+0x68>)
   1b396:	4a0c      	ldr	r2, [pc, #48]	; (1b3c8 <endtx_stoptx_ppi_init+0x6c>)
   1b398:	1a9b      	subs	r3, r3, r2
   1b39a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   1b39c:	f04f 0100 	mov.w	r1, #0
   1b3a0:	2201      	movs	r2, #1
   1b3a2:	f362 0102 	bfi	r1, r2, #0, #3
   1b3a6:	f36f 01c5 	bfc	r1, #3, #3
   1b3aa:	f363 118f 	bfi	r1, r3, #6, #10
   1b3ae:	4807      	ldr	r0, [pc, #28]	; (1b3cc <endtx_stoptx_ppi_init+0x70>)
   1b3b0:	f7f6 fb00 	bl	119b4 <log_0>
		return -EIO;
   1b3b4:	f06f 0004 	mvn.w	r0, #4
   1b3b8:	e7eb      	b.n	1b392 <endtx_stoptx_ppi_init+0x36>
   1b3ba:	bf00      	nop
   1b3bc:	0bad0000 	.word	0x0bad0000
   1b3c0:	4001f000 	.word	0x4001f000
   1b3c4:	00029e40 	.word	0x00029e40
   1b3c8:	00029d70 	.word	0x00029d70
   1b3cc:	0002cba0 	.word	0x0002cba0

0001b3d0 <uarte_nrfx_pins_configure>:
{
   1b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
   1b3d2:	6844      	ldr	r4, [r0, #4]
	if (!sleep) {
   1b3d4:	2900      	cmp	r1, #0
   1b3d6:	f040 81ba 	bne.w	1b74e <uarte_nrfx_pins_configure+0x37e>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b3da:	68e5      	ldr	r5, [r4, #12]
   1b3dc:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b3e0:	d130      	bne.n	1b444 <uarte_nrfx_pins_configure+0x74>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b3e2:	6925      	ldr	r5, [r4, #16]
   1b3e4:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b3e8:	f000 80c7 	beq.w	1b57a <uarte_nrfx_pins_configure+0x1aa>
					   (cfg->rx_pull_up ?
   1b3ec:	7f23      	ldrb	r3, [r4, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   1b3ee:	2b00      	cmp	r3, #0
   1b3f0:	f000 80a5 	beq.w	1b53e <uarte_nrfx_pins_configure+0x16e>
   1b3f4:	2603      	movs	r6, #3
    switch (port)
   1b3f6:	096b      	lsrs	r3, r5, #5
   1b3f8:	f000 80a3 	beq.w	1b542 <uarte_nrfx_pins_configure+0x172>
   1b3fc:	2b01      	cmp	r3, #1
   1b3fe:	f040 80a3 	bne.w	1b548 <uarte_nrfx_pins_configure+0x178>
            mask = P1_FEATURE_PINS_PRESENT;
   1b402:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1b406:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b40a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b40c:	f013 0f01 	tst.w	r3, #1
   1b410:	f000 809c 	beq.w	1b54c <uarte_nrfx_pins_configure+0x17c>
    *p_pin = pin_number & 0x1F;
   1b414:	f005 071f 	and.w	r7, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b418:	096d      	lsrs	r5, r5, #5
   1b41a:	f000 80a5 	beq.w	1b568 <uarte_nrfx_pins_configure+0x198>
   1b41e:	2d01      	cmp	r5, #1
   1b420:	f000 80a5 	beq.w	1b56e <uarte_nrfx_pins_configure+0x19e>
            NRFX_ASSERT(0);
   1b424:	4dba      	ldr	r5, [pc, #744]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b426:	f240 232e 	movw	r3, #558	; 0x22e
   1b42a:	462a      	mov	r2, r5
   1b42c:	49b9      	ldr	r1, [pc, #740]	; (1b714 <uarte_nrfx_pins_configure+0x344>)
   1b42e:	48ba      	ldr	r0, [pc, #744]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b430:	f00a f9fd 	bl	2582e <printk>
   1b434:	f240 212e 	movw	r1, #558	; 0x22e
   1b438:	4628      	mov	r0, r5
   1b43a:	f00a fc7a 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1b43e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b442:	e095      	b.n	1b570 <uarte_nrfx_pins_configure+0x1a0>
    switch (port)
   1b444:	096b      	lsrs	r3, r5, #5
   1b446:	d01f      	beq.n	1b488 <uarte_nrfx_pins_configure+0xb8>
   1b448:	2b01      	cmp	r3, #1
   1b44a:	d120      	bne.n	1b48e <uarte_nrfx_pins_configure+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
   1b44c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1b450:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b454:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b456:	f013 0f01 	tst.w	r3, #1
   1b45a:	d01a      	beq.n	1b492 <uarte_nrfx_pins_configure+0xc2>
    *p_pin = pin_number & 0x1F;
   1b45c:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b460:	096d      	lsrs	r5, r5, #5
   1b462:	d024      	beq.n	1b4ae <uarte_nrfx_pins_configure+0xde>
   1b464:	2d01      	cmp	r5, #1
   1b466:	d025      	beq.n	1b4b4 <uarte_nrfx_pins_configure+0xe4>
            NRFX_ASSERT(0);
   1b468:	4da9      	ldr	r5, [pc, #676]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b46a:	f240 232e 	movw	r3, #558	; 0x22e
   1b46e:	462a      	mov	r2, r5
   1b470:	49a8      	ldr	r1, [pc, #672]	; (1b714 <uarte_nrfx_pins_configure+0x344>)
   1b472:	48a9      	ldr	r0, [pc, #676]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b474:	f00a f9db 	bl	2582e <printk>
   1b478:	f240 212e 	movw	r1, #558	; 0x22e
   1b47c:	4628      	mov	r0, r5
   1b47e:	f00a fc58 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1b482:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b486:	e016      	b.n	1b4b6 <uarte_nrfx_pins_configure+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
   1b488:	f04f 33ff 	mov.w	r3, #4294967295
   1b48c:	e7e0      	b.n	1b450 <uarte_nrfx_pins_configure+0x80>
    switch (port)
   1b48e:	2300      	movs	r3, #0
   1b490:	e7de      	b.n	1b450 <uarte_nrfx_pins_configure+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b492:	4e9f      	ldr	r6, [pc, #636]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b494:	f240 2329 	movw	r3, #553	; 0x229
   1b498:	4632      	mov	r2, r6
   1b49a:	49a0      	ldr	r1, [pc, #640]	; (1b71c <uarte_nrfx_pins_configure+0x34c>)
   1b49c:	489e      	ldr	r0, [pc, #632]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b49e:	f00a f9c6 	bl	2582e <printk>
   1b4a2:	f240 2129 	movw	r1, #553	; 0x229
   1b4a6:	4630      	mov	r0, r6
   1b4a8:	f00a fc43 	bl	25d32 <assert_post_action>
   1b4ac:	e7d6      	b.n	1b45c <uarte_nrfx_pins_configure+0x8c>
        case 0: return NRF_P0;
   1b4ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b4b2:	e000      	b.n	1b4b6 <uarte_nrfx_pins_configure+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b4b4:	4a9a      	ldr	r2, [pc, #616]	; (1b720 <uarte_nrfx_pins_configure+0x350>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b4b6:	2301      	movs	r3, #1
   1b4b8:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1b4ba:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->tx_pin);
   1b4be:	68e5      	ldr	r5, [r4, #12]
    switch (port)
   1b4c0:	096b      	lsrs	r3, r5, #5
   1b4c2:	d01f      	beq.n	1b504 <uarte_nrfx_pins_configure+0x134>
   1b4c4:	2b01      	cmp	r3, #1
   1b4c6:	d120      	bne.n	1b50a <uarte_nrfx_pins_configure+0x13a>
            mask = P1_FEATURE_PINS_PRESENT;
   1b4c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1b4cc:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b4d0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b4d2:	f013 0f01 	tst.w	r3, #1
   1b4d6:	d01a      	beq.n	1b50e <uarte_nrfx_pins_configure+0x13e>
    *p_pin = pin_number & 0x1F;
   1b4d8:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b4dc:	096d      	lsrs	r5, r5, #5
   1b4de:	d024      	beq.n	1b52a <uarte_nrfx_pins_configure+0x15a>
   1b4e0:	2d01      	cmp	r5, #1
   1b4e2:	d025      	beq.n	1b530 <uarte_nrfx_pins_configure+0x160>
            NRFX_ASSERT(0);
   1b4e4:	4d8a      	ldr	r5, [pc, #552]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b4e6:	f240 232e 	movw	r3, #558	; 0x22e
   1b4ea:	462a      	mov	r2, r5
   1b4ec:	4989      	ldr	r1, [pc, #548]	; (1b714 <uarte_nrfx_pins_configure+0x344>)
   1b4ee:	488a      	ldr	r0, [pc, #552]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b4f0:	f00a f99d 	bl	2582e <printk>
   1b4f4:	f240 212e 	movw	r1, #558	; 0x22e
   1b4f8:	4628      	mov	r0, r5
   1b4fa:	f00a fc1a 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1b4fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b502:	e016      	b.n	1b532 <uarte_nrfx_pins_configure+0x162>
            mask = P0_FEATURE_PINS_PRESENT;
   1b504:	f04f 33ff 	mov.w	r3, #4294967295
   1b508:	e7e0      	b.n	1b4cc <uarte_nrfx_pins_configure+0xfc>
    switch (port)
   1b50a:	2300      	movs	r3, #0
   1b50c:	e7de      	b.n	1b4cc <uarte_nrfx_pins_configure+0xfc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b50e:	4e80      	ldr	r6, [pc, #512]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b510:	f240 2329 	movw	r3, #553	; 0x229
   1b514:	4632      	mov	r2, r6
   1b516:	4981      	ldr	r1, [pc, #516]	; (1b71c <uarte_nrfx_pins_configure+0x34c>)
   1b518:	487f      	ldr	r0, [pc, #508]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b51a:	f00a f988 	bl	2582e <printk>
   1b51e:	f240 2129 	movw	r1, #553	; 0x229
   1b522:	4630      	mov	r0, r6
   1b524:	f00a fc05 	bl	25d32 <assert_post_action>
   1b528:	e7d6      	b.n	1b4d8 <uarte_nrfx_pins_configure+0x108>
        case 0: return NRF_P0;
   1b52a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b52e:	e000      	b.n	1b532 <uarte_nrfx_pins_configure+0x162>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b530:	4b7b      	ldr	r3, [pc, #492]	; (1b720 <uarte_nrfx_pins_configure+0x350>)
    reg->PIN_CNF[pin_number] = cnf;
   1b532:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1b536:	2203      	movs	r2, #3
   1b538:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1b53c:	e751      	b.n	1b3e2 <uarte_nrfx_pins_configure+0x12>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1b53e:	2600      	movs	r6, #0
   1b540:	e759      	b.n	1b3f6 <uarte_nrfx_pins_configure+0x26>
            mask = P0_FEATURE_PINS_PRESENT;
   1b542:	f04f 33ff 	mov.w	r3, #4294967295
   1b546:	e75e      	b.n	1b406 <uarte_nrfx_pins_configure+0x36>
    switch (port)
   1b548:	2300      	movs	r3, #0
   1b54a:	e75c      	b.n	1b406 <uarte_nrfx_pins_configure+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b54c:	4f70      	ldr	r7, [pc, #448]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b54e:	f240 2329 	movw	r3, #553	; 0x229
   1b552:	463a      	mov	r2, r7
   1b554:	4971      	ldr	r1, [pc, #452]	; (1b71c <uarte_nrfx_pins_configure+0x34c>)
   1b556:	4870      	ldr	r0, [pc, #448]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b558:	f00a f969 	bl	2582e <printk>
   1b55c:	f240 2129 	movw	r1, #553	; 0x229
   1b560:	4638      	mov	r0, r7
   1b562:	f00a fbe6 	bl	25d32 <assert_post_action>
   1b566:	e755      	b.n	1b414 <uarte_nrfx_pins_configure+0x44>
        case 0: return NRF_P0;
   1b568:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b56c:	e000      	b.n	1b570 <uarte_nrfx_pins_configure+0x1a0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b56e:	4b6c      	ldr	r3, [pc, #432]	; (1b720 <uarte_nrfx_pins_configure+0x350>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1b570:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
   1b572:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   1b576:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b57a:	6965      	ldr	r5, [r4, #20]
   1b57c:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b580:	d130      	bne.n	1b5e4 <uarte_nrfx_pins_configure+0x214>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b582:	69a5      	ldr	r5, [r4, #24]
   1b584:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b588:	f000 80d2 	beq.w	1b730 <uarte_nrfx_pins_configure+0x360>
					   (cfg->cts_pull_up ?
   1b58c:	7f63      	ldrb	r3, [r4, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   1b58e:	2b00      	cmp	r3, #0
   1b590:	f000 80a5 	beq.w	1b6de <uarte_nrfx_pins_configure+0x30e>
   1b594:	2703      	movs	r7, #3
    switch (port)
   1b596:	096b      	lsrs	r3, r5, #5
   1b598:	f000 80a3 	beq.w	1b6e2 <uarte_nrfx_pins_configure+0x312>
   1b59c:	2b01      	cmp	r3, #1
   1b59e:	f040 80a3 	bne.w	1b6e8 <uarte_nrfx_pins_configure+0x318>
            mask = P1_FEATURE_PINS_PRESENT;
   1b5a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1b5a6:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b5aa:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b5ac:	f013 0f01 	tst.w	r3, #1
   1b5b0:	f000 809c 	beq.w	1b6ec <uarte_nrfx_pins_configure+0x31c>
    *p_pin = pin_number & 0x1F;
   1b5b4:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b5b8:	096d      	lsrs	r5, r5, #5
   1b5ba:	f000 80a5 	beq.w	1b708 <uarte_nrfx_pins_configure+0x338>
   1b5be:	2d01      	cmp	r5, #1
   1b5c0:	f000 80b0 	beq.w	1b724 <uarte_nrfx_pins_configure+0x354>
            NRFX_ASSERT(0);
   1b5c4:	4d52      	ldr	r5, [pc, #328]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b5c6:	f240 232e 	movw	r3, #558	; 0x22e
   1b5ca:	462a      	mov	r2, r5
   1b5cc:	4951      	ldr	r1, [pc, #324]	; (1b714 <uarte_nrfx_pins_configure+0x344>)
   1b5ce:	4852      	ldr	r0, [pc, #328]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b5d0:	f00a f92d 	bl	2582e <printk>
   1b5d4:	f240 212e 	movw	r1, #558	; 0x22e
   1b5d8:	4628      	mov	r0, r5
   1b5da:	f00a fbaa 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1b5de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b5e2:	e0a0      	b.n	1b726 <uarte_nrfx_pins_configure+0x356>
    switch (port)
   1b5e4:	096b      	lsrs	r3, r5, #5
   1b5e6:	d01f      	beq.n	1b628 <uarte_nrfx_pins_configure+0x258>
   1b5e8:	2b01      	cmp	r3, #1
   1b5ea:	d120      	bne.n	1b62e <uarte_nrfx_pins_configure+0x25e>
            mask = P1_FEATURE_PINS_PRESENT;
   1b5ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1b5f0:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b5f4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b5f6:	f013 0f01 	tst.w	r3, #1
   1b5fa:	d01a      	beq.n	1b632 <uarte_nrfx_pins_configure+0x262>
    *p_pin = pin_number & 0x1F;
   1b5fc:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b600:	096d      	lsrs	r5, r5, #5
   1b602:	d024      	beq.n	1b64e <uarte_nrfx_pins_configure+0x27e>
   1b604:	2d01      	cmp	r5, #1
   1b606:	d025      	beq.n	1b654 <uarte_nrfx_pins_configure+0x284>
            NRFX_ASSERT(0);
   1b608:	4d41      	ldr	r5, [pc, #260]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b60a:	f240 232e 	movw	r3, #558	; 0x22e
   1b60e:	462a      	mov	r2, r5
   1b610:	4940      	ldr	r1, [pc, #256]	; (1b714 <uarte_nrfx_pins_configure+0x344>)
   1b612:	4841      	ldr	r0, [pc, #260]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b614:	f00a f90b 	bl	2582e <printk>
   1b618:	f240 212e 	movw	r1, #558	; 0x22e
   1b61c:	4628      	mov	r0, r5
   1b61e:	f00a fb88 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1b622:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b626:	e016      	b.n	1b656 <uarte_nrfx_pins_configure+0x286>
            mask = P0_FEATURE_PINS_PRESENT;
   1b628:	f04f 33ff 	mov.w	r3, #4294967295
   1b62c:	e7e0      	b.n	1b5f0 <uarte_nrfx_pins_configure+0x220>
    switch (port)
   1b62e:	2300      	movs	r3, #0
   1b630:	e7de      	b.n	1b5f0 <uarte_nrfx_pins_configure+0x220>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b632:	4e37      	ldr	r6, [pc, #220]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b634:	f240 2329 	movw	r3, #553	; 0x229
   1b638:	4632      	mov	r2, r6
   1b63a:	4938      	ldr	r1, [pc, #224]	; (1b71c <uarte_nrfx_pins_configure+0x34c>)
   1b63c:	4836      	ldr	r0, [pc, #216]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b63e:	f00a f8f6 	bl	2582e <printk>
   1b642:	f240 2129 	movw	r1, #553	; 0x229
   1b646:	4630      	mov	r0, r6
   1b648:	f00a fb73 	bl	25d32 <assert_post_action>
   1b64c:	e7d6      	b.n	1b5fc <uarte_nrfx_pins_configure+0x22c>
        case 0: return NRF_P0;
   1b64e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b652:	e000      	b.n	1b656 <uarte_nrfx_pins_configure+0x286>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b654:	4a32      	ldr	r2, [pc, #200]	; (1b720 <uarte_nrfx_pins_configure+0x350>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b656:	2301      	movs	r3, #1
   1b658:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1b65a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->rts_pin);
   1b65e:	6965      	ldr	r5, [r4, #20]
    switch (port)
   1b660:	096b      	lsrs	r3, r5, #5
   1b662:	d01f      	beq.n	1b6a4 <uarte_nrfx_pins_configure+0x2d4>
   1b664:	2b01      	cmp	r3, #1
   1b666:	d120      	bne.n	1b6aa <uarte_nrfx_pins_configure+0x2da>
            mask = P1_FEATURE_PINS_PRESENT;
   1b668:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1b66c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b670:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b672:	f013 0f01 	tst.w	r3, #1
   1b676:	d01a      	beq.n	1b6ae <uarte_nrfx_pins_configure+0x2de>
    *p_pin = pin_number & 0x1F;
   1b678:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b67c:	096d      	lsrs	r5, r5, #5
   1b67e:	d024      	beq.n	1b6ca <uarte_nrfx_pins_configure+0x2fa>
   1b680:	2d01      	cmp	r5, #1
   1b682:	d025      	beq.n	1b6d0 <uarte_nrfx_pins_configure+0x300>
            NRFX_ASSERT(0);
   1b684:	4d22      	ldr	r5, [pc, #136]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b686:	f240 232e 	movw	r3, #558	; 0x22e
   1b68a:	462a      	mov	r2, r5
   1b68c:	4921      	ldr	r1, [pc, #132]	; (1b714 <uarte_nrfx_pins_configure+0x344>)
   1b68e:	4822      	ldr	r0, [pc, #136]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b690:	f00a f8cd 	bl	2582e <printk>
   1b694:	f240 212e 	movw	r1, #558	; 0x22e
   1b698:	4628      	mov	r0, r5
   1b69a:	f00a fb4a 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1b69e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b6a2:	e016      	b.n	1b6d2 <uarte_nrfx_pins_configure+0x302>
            mask = P0_FEATURE_PINS_PRESENT;
   1b6a4:	f04f 33ff 	mov.w	r3, #4294967295
   1b6a8:	e7e0      	b.n	1b66c <uarte_nrfx_pins_configure+0x29c>
    switch (port)
   1b6aa:	2300      	movs	r3, #0
   1b6ac:	e7de      	b.n	1b66c <uarte_nrfx_pins_configure+0x29c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b6ae:	4e18      	ldr	r6, [pc, #96]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b6b0:	f240 2329 	movw	r3, #553	; 0x229
   1b6b4:	4632      	mov	r2, r6
   1b6b6:	4919      	ldr	r1, [pc, #100]	; (1b71c <uarte_nrfx_pins_configure+0x34c>)
   1b6b8:	4817      	ldr	r0, [pc, #92]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b6ba:	f00a f8b8 	bl	2582e <printk>
   1b6be:	f240 2129 	movw	r1, #553	; 0x229
   1b6c2:	4630      	mov	r0, r6
   1b6c4:	f00a fb35 	bl	25d32 <assert_post_action>
   1b6c8:	e7d6      	b.n	1b678 <uarte_nrfx_pins_configure+0x2a8>
        case 0: return NRF_P0;
   1b6ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b6ce:	e000      	b.n	1b6d2 <uarte_nrfx_pins_configure+0x302>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b6d0:	4b13      	ldr	r3, [pc, #76]	; (1b720 <uarte_nrfx_pins_configure+0x350>)
    reg->PIN_CNF[pin_number] = cnf;
   1b6d2:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1b6d6:	2203      	movs	r2, #3
   1b6d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1b6dc:	e751      	b.n	1b582 <uarte_nrfx_pins_configure+0x1b2>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1b6de:	2700      	movs	r7, #0
   1b6e0:	e759      	b.n	1b596 <uarte_nrfx_pins_configure+0x1c6>
            mask = P0_FEATURE_PINS_PRESENT;
   1b6e2:	f04f 33ff 	mov.w	r3, #4294967295
   1b6e6:	e75e      	b.n	1b5a6 <uarte_nrfx_pins_configure+0x1d6>
    switch (port)
   1b6e8:	2300      	movs	r3, #0
   1b6ea:	e75c      	b.n	1b5a6 <uarte_nrfx_pins_configure+0x1d6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b6ec:	4e08      	ldr	r6, [pc, #32]	; (1b710 <uarte_nrfx_pins_configure+0x340>)
   1b6ee:	f240 2329 	movw	r3, #553	; 0x229
   1b6f2:	4632      	mov	r2, r6
   1b6f4:	4909      	ldr	r1, [pc, #36]	; (1b71c <uarte_nrfx_pins_configure+0x34c>)
   1b6f6:	4808      	ldr	r0, [pc, #32]	; (1b718 <uarte_nrfx_pins_configure+0x348>)
   1b6f8:	f00a f899 	bl	2582e <printk>
   1b6fc:	f240 2129 	movw	r1, #553	; 0x229
   1b700:	4630      	mov	r0, r6
   1b702:	f00a fb16 	bl	25d32 <assert_post_action>
   1b706:	e755      	b.n	1b5b4 <uarte_nrfx_pins_configure+0x1e4>
        case 0: return NRF_P0;
   1b708:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b70c:	e00b      	b.n	1b726 <uarte_nrfx_pins_configure+0x356>
   1b70e:	bf00      	nop
   1b710:	0002cafc 	.word	0x0002cafc
   1b714:	0002dc18 	.word	0x0002dc18
   1b718:	00029ff8 	.word	0x00029ff8
   1b71c:	0002cb30 	.word	0x0002cb30
   1b720:	50000300 	.word	0x50000300
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b724:	4a93      	ldr	r2, [pc, #588]	; (1b974 <uarte_nrfx_pins_configure+0x5a4>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1b726:	00bf      	lsls	r7, r7, #2
    reg->PIN_CNF[pin_number] = cnf;
   1b728:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1b72c:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1b730:	6823      	ldr	r3, [r4, #0]
   1b732:	68e1      	ldr	r1, [r4, #12]
   1b734:	6922      	ldr	r2, [r4, #16]
    p_reg->PSEL.TXD = pseltxd;
   1b736:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1b73a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   1b73e:	6823      	ldr	r3, [r4, #0]
   1b740:	6961      	ldr	r1, [r4, #20]
   1b742:	69a2      	ldr	r2, [r4, #24]
    p_reg->PSEL.RTS = pselrts;
   1b744:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1b748:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1b74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b74e:	68e5      	ldr	r5, [r4, #12]
   1b750:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b754:	d133      	bne.n	1b7be <uarte_nrfx_pins_configure+0x3ee>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b756:	6925      	ldr	r5, [r4, #16]
   1b758:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b75c:	d16e      	bne.n	1b83c <uarte_nrfx_pins_configure+0x46c>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b75e:	6965      	ldr	r5, [r4, #20]
   1b760:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b764:	f040 80a9 	bne.w	1b8ba <uarte_nrfx_pins_configure+0x4ea>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1b768:	69a5      	ldr	r5, [r4, #24]
   1b76a:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b76e:	d0df      	beq.n	1b730 <uarte_nrfx_pins_configure+0x360>
    switch (port)
   1b770:	096b      	lsrs	r3, r5, #5
   1b772:	f000 80e1 	beq.w	1b938 <uarte_nrfx_pins_configure+0x568>
   1b776:	2b01      	cmp	r3, #1
   1b778:	f040 80e1 	bne.w	1b93e <uarte_nrfx_pins_configure+0x56e>
            mask = P1_FEATURE_PINS_PRESENT;
   1b77c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1b780:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b784:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b786:	f013 0f01 	tst.w	r3, #1
   1b78a:	f000 80da 	beq.w	1b942 <uarte_nrfx_pins_configure+0x572>
    *p_pin = pin_number & 0x1F;
   1b78e:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b792:	096d      	lsrs	r5, r5, #5
   1b794:	f000 80e3 	beq.w	1b95e <uarte_nrfx_pins_configure+0x58e>
   1b798:	2d01      	cmp	r5, #1
   1b79a:	f000 80e3 	beq.w	1b964 <uarte_nrfx_pins_configure+0x594>
            NRFX_ASSERT(0);
   1b79e:	4d76      	ldr	r5, [pc, #472]	; (1b978 <uarte_nrfx_pins_configure+0x5a8>)
   1b7a0:	f240 232e 	movw	r3, #558	; 0x22e
   1b7a4:	462a      	mov	r2, r5
   1b7a6:	4975      	ldr	r1, [pc, #468]	; (1b97c <uarte_nrfx_pins_configure+0x5ac>)
   1b7a8:	4875      	ldr	r0, [pc, #468]	; (1b980 <uarte_nrfx_pins_configure+0x5b0>)
   1b7aa:	f00a f840 	bl	2582e <printk>
   1b7ae:	f240 212e 	movw	r1, #558	; 0x22e
   1b7b2:	4628      	mov	r0, r5
   1b7b4:	f00a fabd 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1b7b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b7bc:	e0d3      	b.n	1b966 <uarte_nrfx_pins_configure+0x596>
    switch (port)
   1b7be:	096b      	lsrs	r3, r5, #5
   1b7c0:	d01f      	beq.n	1b802 <uarte_nrfx_pins_configure+0x432>
   1b7c2:	2b01      	cmp	r3, #1
   1b7c4:	d120      	bne.n	1b808 <uarte_nrfx_pins_configure+0x438>
            mask = P1_FEATURE_PINS_PRESENT;
   1b7c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1b7ca:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b7ce:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b7d0:	f013 0f01 	tst.w	r3, #1
   1b7d4:	d01a      	beq.n	1b80c <uarte_nrfx_pins_configure+0x43c>
    *p_pin = pin_number & 0x1F;
   1b7d6:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b7da:	096d      	lsrs	r5, r5, #5
   1b7dc:	d024      	beq.n	1b828 <uarte_nrfx_pins_configure+0x458>
   1b7de:	2d01      	cmp	r5, #1
   1b7e0:	d025      	beq.n	1b82e <uarte_nrfx_pins_configure+0x45e>
            NRFX_ASSERT(0);
   1b7e2:	4d65      	ldr	r5, [pc, #404]	; (1b978 <uarte_nrfx_pins_configure+0x5a8>)
   1b7e4:	f240 232e 	movw	r3, #558	; 0x22e
   1b7e8:	462a      	mov	r2, r5
   1b7ea:	4964      	ldr	r1, [pc, #400]	; (1b97c <uarte_nrfx_pins_configure+0x5ac>)
   1b7ec:	4864      	ldr	r0, [pc, #400]	; (1b980 <uarte_nrfx_pins_configure+0x5b0>)
   1b7ee:	f00a f81e 	bl	2582e <printk>
   1b7f2:	f240 212e 	movw	r1, #558	; 0x22e
   1b7f6:	4628      	mov	r0, r5
   1b7f8:	f00a fa9b 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1b7fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b800:	e016      	b.n	1b830 <uarte_nrfx_pins_configure+0x460>
            mask = P0_FEATURE_PINS_PRESENT;
   1b802:	f04f 33ff 	mov.w	r3, #4294967295
   1b806:	e7e0      	b.n	1b7ca <uarte_nrfx_pins_configure+0x3fa>
    switch (port)
   1b808:	2300      	movs	r3, #0
   1b80a:	e7de      	b.n	1b7ca <uarte_nrfx_pins_configure+0x3fa>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b80c:	4e5a      	ldr	r6, [pc, #360]	; (1b978 <uarte_nrfx_pins_configure+0x5a8>)
   1b80e:	f240 2329 	movw	r3, #553	; 0x229
   1b812:	4632      	mov	r2, r6
   1b814:	495b      	ldr	r1, [pc, #364]	; (1b984 <uarte_nrfx_pins_configure+0x5b4>)
   1b816:	485a      	ldr	r0, [pc, #360]	; (1b980 <uarte_nrfx_pins_configure+0x5b0>)
   1b818:	f00a f809 	bl	2582e <printk>
   1b81c:	f240 2129 	movw	r1, #553	; 0x229
   1b820:	4630      	mov	r0, r6
   1b822:	f00a fa86 	bl	25d32 <assert_post_action>
   1b826:	e7d6      	b.n	1b7d6 <uarte_nrfx_pins_configure+0x406>
        case 0: return NRF_P0;
   1b828:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b82c:	e000      	b.n	1b830 <uarte_nrfx_pins_configure+0x460>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b82e:	4b51      	ldr	r3, [pc, #324]	; (1b974 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
   1b830:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1b834:	2202      	movs	r2, #2
   1b836:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1b83a:	e78c      	b.n	1b756 <uarte_nrfx_pins_configure+0x386>
    switch (port)
   1b83c:	096b      	lsrs	r3, r5, #5
   1b83e:	d01f      	beq.n	1b880 <uarte_nrfx_pins_configure+0x4b0>
   1b840:	2b01      	cmp	r3, #1
   1b842:	d120      	bne.n	1b886 <uarte_nrfx_pins_configure+0x4b6>
            mask = P1_FEATURE_PINS_PRESENT;
   1b844:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1b848:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b84c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b84e:	f013 0f01 	tst.w	r3, #1
   1b852:	d01a      	beq.n	1b88a <uarte_nrfx_pins_configure+0x4ba>
    *p_pin = pin_number & 0x1F;
   1b854:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b858:	096d      	lsrs	r5, r5, #5
   1b85a:	d024      	beq.n	1b8a6 <uarte_nrfx_pins_configure+0x4d6>
   1b85c:	2d01      	cmp	r5, #1
   1b85e:	d025      	beq.n	1b8ac <uarte_nrfx_pins_configure+0x4dc>
            NRFX_ASSERT(0);
   1b860:	4d45      	ldr	r5, [pc, #276]	; (1b978 <uarte_nrfx_pins_configure+0x5a8>)
   1b862:	f240 232e 	movw	r3, #558	; 0x22e
   1b866:	462a      	mov	r2, r5
   1b868:	4944      	ldr	r1, [pc, #272]	; (1b97c <uarte_nrfx_pins_configure+0x5ac>)
   1b86a:	4845      	ldr	r0, [pc, #276]	; (1b980 <uarte_nrfx_pins_configure+0x5b0>)
   1b86c:	f009 ffdf 	bl	2582e <printk>
   1b870:	f240 212e 	movw	r1, #558	; 0x22e
   1b874:	4628      	mov	r0, r5
   1b876:	f00a fa5c 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1b87a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b87e:	e016      	b.n	1b8ae <uarte_nrfx_pins_configure+0x4de>
            mask = P0_FEATURE_PINS_PRESENT;
   1b880:	f04f 33ff 	mov.w	r3, #4294967295
   1b884:	e7e0      	b.n	1b848 <uarte_nrfx_pins_configure+0x478>
    switch (port)
   1b886:	2300      	movs	r3, #0
   1b888:	e7de      	b.n	1b848 <uarte_nrfx_pins_configure+0x478>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b88a:	4e3b      	ldr	r6, [pc, #236]	; (1b978 <uarte_nrfx_pins_configure+0x5a8>)
   1b88c:	f240 2329 	movw	r3, #553	; 0x229
   1b890:	4632      	mov	r2, r6
   1b892:	493c      	ldr	r1, [pc, #240]	; (1b984 <uarte_nrfx_pins_configure+0x5b4>)
   1b894:	483a      	ldr	r0, [pc, #232]	; (1b980 <uarte_nrfx_pins_configure+0x5b0>)
   1b896:	f009 ffca 	bl	2582e <printk>
   1b89a:	f240 2129 	movw	r1, #553	; 0x229
   1b89e:	4630      	mov	r0, r6
   1b8a0:	f00a fa47 	bl	25d32 <assert_post_action>
   1b8a4:	e7d6      	b.n	1b854 <uarte_nrfx_pins_configure+0x484>
        case 0: return NRF_P0;
   1b8a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b8aa:	e000      	b.n	1b8ae <uarte_nrfx_pins_configure+0x4de>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b8ac:	4b31      	ldr	r3, [pc, #196]	; (1b974 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
   1b8ae:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1b8b2:	2202      	movs	r2, #2
   1b8b4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1b8b8:	e751      	b.n	1b75e <uarte_nrfx_pins_configure+0x38e>
    switch (port)
   1b8ba:	096b      	lsrs	r3, r5, #5
   1b8bc:	d01f      	beq.n	1b8fe <uarte_nrfx_pins_configure+0x52e>
   1b8be:	2b01      	cmp	r3, #1
   1b8c0:	d120      	bne.n	1b904 <uarte_nrfx_pins_configure+0x534>
            mask = P1_FEATURE_PINS_PRESENT;
   1b8c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1b8c6:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b8ca:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b8cc:	f013 0f01 	tst.w	r3, #1
   1b8d0:	d01a      	beq.n	1b908 <uarte_nrfx_pins_configure+0x538>
    *p_pin = pin_number & 0x1F;
   1b8d2:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b8d6:	096d      	lsrs	r5, r5, #5
   1b8d8:	d024      	beq.n	1b924 <uarte_nrfx_pins_configure+0x554>
   1b8da:	2d01      	cmp	r5, #1
   1b8dc:	d025      	beq.n	1b92a <uarte_nrfx_pins_configure+0x55a>
            NRFX_ASSERT(0);
   1b8de:	4d26      	ldr	r5, [pc, #152]	; (1b978 <uarte_nrfx_pins_configure+0x5a8>)
   1b8e0:	f240 232e 	movw	r3, #558	; 0x22e
   1b8e4:	462a      	mov	r2, r5
   1b8e6:	4925      	ldr	r1, [pc, #148]	; (1b97c <uarte_nrfx_pins_configure+0x5ac>)
   1b8e8:	4825      	ldr	r0, [pc, #148]	; (1b980 <uarte_nrfx_pins_configure+0x5b0>)
   1b8ea:	f009 ffa0 	bl	2582e <printk>
   1b8ee:	f240 212e 	movw	r1, #558	; 0x22e
   1b8f2:	4628      	mov	r0, r5
   1b8f4:	f00a fa1d 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1b8f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b8fc:	e016      	b.n	1b92c <uarte_nrfx_pins_configure+0x55c>
            mask = P0_FEATURE_PINS_PRESENT;
   1b8fe:	f04f 33ff 	mov.w	r3, #4294967295
   1b902:	e7e0      	b.n	1b8c6 <uarte_nrfx_pins_configure+0x4f6>
    switch (port)
   1b904:	2300      	movs	r3, #0
   1b906:	e7de      	b.n	1b8c6 <uarte_nrfx_pins_configure+0x4f6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b908:	4e1b      	ldr	r6, [pc, #108]	; (1b978 <uarte_nrfx_pins_configure+0x5a8>)
   1b90a:	f240 2329 	movw	r3, #553	; 0x229
   1b90e:	4632      	mov	r2, r6
   1b910:	491c      	ldr	r1, [pc, #112]	; (1b984 <uarte_nrfx_pins_configure+0x5b4>)
   1b912:	481b      	ldr	r0, [pc, #108]	; (1b980 <uarte_nrfx_pins_configure+0x5b0>)
   1b914:	f009 ff8b 	bl	2582e <printk>
   1b918:	f240 2129 	movw	r1, #553	; 0x229
   1b91c:	4630      	mov	r0, r6
   1b91e:	f00a fa08 	bl	25d32 <assert_post_action>
   1b922:	e7d6      	b.n	1b8d2 <uarte_nrfx_pins_configure+0x502>
        case 0: return NRF_P0;
   1b924:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b928:	e000      	b.n	1b92c <uarte_nrfx_pins_configure+0x55c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b92a:	4b12      	ldr	r3, [pc, #72]	; (1b974 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
   1b92c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1b930:	2202      	movs	r2, #2
   1b932:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1b936:	e717      	b.n	1b768 <uarte_nrfx_pins_configure+0x398>
            mask = P0_FEATURE_PINS_PRESENT;
   1b938:	f04f 33ff 	mov.w	r3, #4294967295
   1b93c:	e720      	b.n	1b780 <uarte_nrfx_pins_configure+0x3b0>
    switch (port)
   1b93e:	2300      	movs	r3, #0
   1b940:	e71e      	b.n	1b780 <uarte_nrfx_pins_configure+0x3b0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b942:	4e0d      	ldr	r6, [pc, #52]	; (1b978 <uarte_nrfx_pins_configure+0x5a8>)
   1b944:	f240 2329 	movw	r3, #553	; 0x229
   1b948:	4632      	mov	r2, r6
   1b94a:	490e      	ldr	r1, [pc, #56]	; (1b984 <uarte_nrfx_pins_configure+0x5b4>)
   1b94c:	480c      	ldr	r0, [pc, #48]	; (1b980 <uarte_nrfx_pins_configure+0x5b0>)
   1b94e:	f009 ff6e 	bl	2582e <printk>
   1b952:	f240 2129 	movw	r1, #553	; 0x229
   1b956:	4630      	mov	r0, r6
   1b958:	f00a f9eb 	bl	25d32 <assert_post_action>
   1b95c:	e717      	b.n	1b78e <uarte_nrfx_pins_configure+0x3be>
        case 0: return NRF_P0;
   1b95e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b962:	e000      	b.n	1b966 <uarte_nrfx_pins_configure+0x596>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b964:	4b03      	ldr	r3, [pc, #12]	; (1b974 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
   1b966:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1b96a:	2202      	movs	r2, #2
   1b96c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1b970:	e6de      	b.n	1b730 <uarte_nrfx_pins_configure+0x360>
   1b972:	bf00      	nop
   1b974:	50000300 	.word	0x50000300
   1b978:	0002cafc 	.word	0x0002cafc
   1b97c:	0002dc18 	.word	0x0002dc18
   1b980:	00029ff8 	.word	0x00029ff8
   1b984:	0002cb30 	.word	0x0002cb30

0001b988 <random_byte_get>:
	__asm__ volatile(
   1b988:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b98c:	f3ef 8211 	mrs	r2, BASEPRI
   1b990:	f383 8812 	msr	BASEPRI_MAX, r3
   1b994:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1b998:	4b09      	ldr	r3, [pc, #36]	; (1b9c0 <random_byte_get+0x38>)
   1b99a:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1b99c:	b16b      	cbz	r3, 1b9ba <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1b99e:	4b09      	ldr	r3, [pc, #36]	; (1b9c4 <random_byte_get+0x3c>)
   1b9a0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1b9a4:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b9a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1b9aa:	2100      	movs	r1, #0
   1b9ac:	6019      	str	r1, [r3, #0]
   1b9ae:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1b9b0:	f382 8811 	msr	BASEPRI, r2
   1b9b4:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1b9b8:	4770      	bx	lr
	int retval = -EAGAIN;
   1b9ba:	f06f 000a 	mvn.w	r0, #10
   1b9be:	e7f7      	b.n	1b9b0 <random_byte_get+0x28>
   1b9c0:	4000d100 	.word	0x4000d100
   1b9c4:	4000d000 	.word	0x4000d000

0001b9c8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1b9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b9cc:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1b9ce:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   1b9d2:	78c5      	ldrb	r5, [r0, #3]
   1b9d4:	462f      	mov	r7, r5
	__asm__ volatile(
   1b9d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9da:	f3ef 8811 	mrs	r8, BASEPRI
   1b9de:	f383 8812 	msr	BASEPRI_MAX, r3
   1b9e2:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1b9e6:	7800      	ldrb	r0, [r0, #0]
   1b9e8:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1b9ea:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1b9ee:	ebac 0c00 	sub.w	ip, ip, r0
   1b9f2:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   1b9f6:	4562      	cmp	r2, ip
   1b9f8:	d901      	bls.n	1b9fe <rng_pool_get+0x36>
		len = available;
   1b9fa:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1b9fe:	1883      	adds	r3, r0, r2
   1ba00:	402b      	ands	r3, r5
   1ba02:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   1ba04:	f388 8811 	msr	BASEPRI, r8
   1ba08:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1ba0c:	460b      	mov	r3, r1
}
   1ba0e:	e006      	b.n	1ba1e <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1ba10:	1932      	adds	r2, r6, r4
   1ba12:	7952      	ldrb	r2, [r2, #5]
   1ba14:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   1ba18:	3401      	adds	r4, #1
   1ba1a:	403c      	ands	r4, r7
	while (likely(len--)) {
   1ba1c:	462a      	mov	r2, r5
   1ba1e:	1e55      	subs	r5, r2, #1
   1ba20:	b2ad      	uxth	r5, r5
   1ba22:	2a00      	cmp	r2, #0
   1ba24:	d1f4      	bne.n	1ba10 <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1ba26:	4570      	cmp	r0, lr
   1ba28:	d10d      	bne.n	1ba46 <rng_pool_get+0x7e>
	__asm__ volatile(
   1ba2a:	f04f 0040 	mov.w	r0, #64	; 0x40
   1ba2e:	f3ef 8211 	mrs	r2, BASEPRI
   1ba32:	f380 8812 	msr	BASEPRI_MAX, r0
   1ba36:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1ba3a:	7830      	ldrb	r0, [r6, #0]
   1ba3c:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   1ba3e:	f382 8811 	msr	BASEPRI, r2
   1ba42:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1ba46:	1a5b      	subs	r3, r3, r1
   1ba48:	b298      	uxth	r0, r3
	available = available - len;
   1ba4a:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   1ba4e:	7933      	ldrb	r3, [r6, #4]
   1ba50:	4563      	cmp	r3, ip
   1ba52:	d302      	bcc.n	1ba5a <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ba54:	4b02      	ldr	r3, [pc, #8]	; (1ba60 <rng_pool_get+0x98>)
   1ba56:	2201      	movs	r2, #1
   1ba58:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1ba5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba5e:	bf00      	nop
   1ba60:	4000d000 	.word	0x4000d000

0001ba64 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba66:	460e      	mov	r6, r1
   1ba68:	4614      	mov	r4, r2
   1ba6a:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1ba6c:	6902      	ldr	r2, [r0, #16]
   1ba6e:	4b2d      	ldr	r3, [pc, #180]	; (1bb24 <entropy_nrf5_get_entropy_isr+0xc0>)
   1ba70:	429a      	cmp	r2, r3
   1ba72:	d00c      	beq.n	1ba8e <entropy_nrf5_get_entropy_isr+0x2a>
   1ba74:	4f2c      	ldr	r7, [pc, #176]	; (1bb28 <entropy_nrf5_get_entropy_isr+0xc4>)
   1ba76:	f44f 7384 	mov.w	r3, #264	; 0x108
   1ba7a:	463a      	mov	r2, r7
   1ba7c:	492b      	ldr	r1, [pc, #172]	; (1bb2c <entropy_nrf5_get_entropy_isr+0xc8>)
   1ba7e:	482c      	ldr	r0, [pc, #176]	; (1bb30 <entropy_nrf5_get_entropy_isr+0xcc>)
   1ba80:	f009 fed5 	bl	2582e <printk>
   1ba84:	f44f 7184 	mov.w	r1, #264	; 0x108
   1ba88:	4638      	mov	r0, r7
   1ba8a:	f00a f952 	bl	25d32 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ba8e:	f015 0f01 	tst.w	r5, #1
   1ba92:	d105      	bne.n	1baa0 <entropy_nrf5_get_entropy_isr+0x3c>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ba94:	4622      	mov	r2, r4
   1ba96:	4631      	mov	r1, r6
   1ba98:	4826      	ldr	r0, [pc, #152]	; (1bb34 <entropy_nrf5_get_entropy_isr+0xd0>)
   1ba9a:	f7ff ff95 	bl	1b9c8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ba9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   1baa0:	b90c      	cbnz	r4, 1baa6 <entropy_nrf5_get_entropy_isr+0x42>
	return cnt;
   1baa2:	4620      	mov	r0, r4
   1baa4:	e7fb      	b.n	1ba9e <entropy_nrf5_get_entropy_isr+0x3a>
	__asm__ volatile(
   1baa6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1baaa:	f3ef 8511 	mrs	r5, BASEPRI
   1baae:	f383 8812 	msr	BASEPRI_MAX, r3
   1bab2:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1bab6:	200d      	movs	r0, #13
   1bab8:	f7f7 fbca 	bl	13250 <arch_irq_is_enabled>
   1babc:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1babe:	200d      	movs	r0, #13
   1bac0:	f7f7 fbb2 	bl	13228 <arch_irq_disable>
	__asm__ volatile(
   1bac4:	f385 8811 	msr	BASEPRI, r5
   1bac8:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1bacc:	4b1a      	ldr	r3, [pc, #104]	; (1bb38 <entropy_nrf5_get_entropy_isr+0xd4>)
   1bace:	2200      	movs	r2, #0
   1bad0:	601a      	str	r2, [r3, #0]
   1bad2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1bad4:	4b19      	ldr	r3, [pc, #100]	; (1bb3c <entropy_nrf5_get_entropy_isr+0xd8>)
   1bad6:	2201      	movs	r2, #1
   1bad8:	601a      	str	r2, [r3, #0]
   1bada:	4b19      	ldr	r3, [pc, #100]	; (1bb40 <entropy_nrf5_get_entropy_isr+0xdc>)
   1badc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1bae0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1bae4:	4625      	mov	r5, r4
   1bae6:	e004      	b.n	1baf2 <entropy_nrf5_get_entropy_isr+0x8e>
   1bae8:	f3bf 8f4f 	dsb	sy
				__WFE();
   1baec:	bf20      	wfe
				__SEV();
   1baee:	bf40      	sev
				__WFE();
   1baf0:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1baf2:	4b11      	ldr	r3, [pc, #68]	; (1bb38 <entropy_nrf5_get_entropy_isr+0xd4>)
   1baf4:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1baf6:	2b00      	cmp	r3, #0
   1baf8:	d0f6      	beq.n	1bae8 <entropy_nrf5_get_entropy_isr+0x84>
			byte = random_byte_get();
   1bafa:	f7ff ff45 	bl	1b988 <random_byte_get>
   1bafe:	4b10      	ldr	r3, [pc, #64]	; (1bb40 <entropy_nrf5_get_entropy_isr+0xdc>)
   1bb00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1bb04:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1bb08:	2800      	cmp	r0, #0
   1bb0a:	db02      	blt.n	1bb12 <entropy_nrf5_get_entropy_isr+0xae>
			buf[--len] = byte;
   1bb0c:	3d01      	subs	r5, #1
   1bb0e:	b2ad      	uxth	r5, r5
   1bb10:	5570      	strb	r0, [r6, r5]
		} while (len);
   1bb12:	2d00      	cmp	r5, #0
   1bb14:	d1ed      	bne.n	1baf2 <entropy_nrf5_get_entropy_isr+0x8e>
		if (irq_enabled) {
   1bb16:	2f00      	cmp	r7, #0
   1bb18:	d0c3      	beq.n	1baa2 <entropy_nrf5_get_entropy_isr+0x3e>
			irq_enable(IRQN);
   1bb1a:	200d      	movs	r0, #13
   1bb1c:	f7f7 fb74 	bl	13208 <arch_irq_enable>
   1bb20:	e7bf      	b.n	1baa2 <entropy_nrf5_get_entropy_isr+0x3e>
   1bb22:	bf00      	nop
   1bb24:	200026a4 	.word	0x200026a4
   1bb28:	0002cc34 	.word	0x0002cc34
   1bb2c:	0002cc68 	.word	0x0002cc68
   1bb30:	00029ff8 	.word	0x00029ff8
   1bb34:	200026d4 	.word	0x200026d4
   1bb38:	4000d100 	.word	0x4000d100
   1bb3c:	4000d000 	.word	0x4000d000
   1bb40:	e000e100 	.word	0xe000e100

0001bb44 <isr>:
{
   1bb44:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1bb46:	f7ff ff1f 	bl	1b988 <random_byte_get>
	if (byte < 0) {
   1bb4a:	2800      	cmp	r0, #0
   1bb4c:	db06      	blt.n	1bb5c <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1bb4e:	b2c4      	uxtb	r4, r0
   1bb50:	4621      	mov	r1, r4
   1bb52:	480a      	ldr	r0, [pc, #40]	; (1bb7c <isr+0x38>)
   1bb54:	f00d f8c7 	bl	28ce6 <rng_pool_put>
	if (ret < 0) {
   1bb58:	2800      	cmp	r0, #0
   1bb5a:	db00      	blt.n	1bb5e <isr+0x1a>
}
   1bb5c:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1bb5e:	4621      	mov	r1, r4
   1bb60:	4807      	ldr	r0, [pc, #28]	; (1bb80 <isr+0x3c>)
   1bb62:	f00d f8c0 	bl	28ce6 <rng_pool_put>
		if (ret < 0) {
   1bb66:	2800      	cmp	r0, #0
   1bb68:	db03      	blt.n	1bb72 <isr+0x2e>
	z_impl_k_sem_give(sem);
   1bb6a:	4806      	ldr	r0, [pc, #24]	; (1bb84 <isr+0x40>)
   1bb6c:	f003 fb48 	bl	1f200 <z_impl_k_sem_give>
}
   1bb70:	e7f4      	b.n	1bb5c <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1bb72:	4b05      	ldr	r3, [pc, #20]	; (1bb88 <isr+0x44>)
   1bb74:	2201      	movs	r2, #1
   1bb76:	601a      	str	r2, [r3, #0]
}
   1bb78:	e7f7      	b.n	1bb6a <isr+0x26>
   1bb7a:	bf00      	nop
   1bb7c:	200026d4 	.word	0x200026d4
   1bb80:	200026e9 	.word	0x200026e9
   1bb84:	200026bc 	.word	0x200026bc
   1bb88:	4000d004 	.word	0x4000d004

0001bb8c <entropy_nrf5_get_entropy>:
{
   1bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb8e:	460f      	mov	r7, r1
   1bb90:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1bb92:	6902      	ldr	r2, [r0, #16]
   1bb94:	4b18      	ldr	r3, [pc, #96]	; (1bbf8 <entropy_nrf5_get_entropy+0x6c>)
   1bb96:	429a      	cmp	r2, r3
   1bb98:	d00e      	beq.n	1bbb8 <entropy_nrf5_get_entropy+0x2c>
   1bb9a:	4d18      	ldr	r5, [pc, #96]	; (1bbfc <entropy_nrf5_get_entropy+0x70>)
   1bb9c:	23ea      	movs	r3, #234	; 0xea
   1bb9e:	462a      	mov	r2, r5
   1bba0:	4917      	ldr	r1, [pc, #92]	; (1bc00 <entropy_nrf5_get_entropy+0x74>)
   1bba2:	4818      	ldr	r0, [pc, #96]	; (1bc04 <entropy_nrf5_get_entropy+0x78>)
   1bba4:	f009 fe43 	bl	2582e <printk>
   1bba8:	21ea      	movs	r1, #234	; 0xea
   1bbaa:	4628      	mov	r0, r5
   1bbac:	f00a f8c1 	bl	25d32 <assert_post_action>
   1bbb0:	e002      	b.n	1bbb8 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   1bbb2:	1b64      	subs	r4, r4, r5
   1bbb4:	b2a4      	uxth	r4, r4
		buf += bytes;
   1bbb6:	442f      	add	r7, r5
	while (len) {
   1bbb8:	b1e4      	cbz	r4, 1bbf4 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   1bbba:	4e0f      	ldr	r6, [pc, #60]	; (1bbf8 <entropy_nrf5_get_entropy+0x6c>)
   1bbbc:	f04f 32ff 	mov.w	r2, #4294967295
   1bbc0:	f04f 33ff 	mov.w	r3, #4294967295
   1bbc4:	4630      	mov	r0, r6
   1bbc6:	f003 fb63 	bl	1f290 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1bbca:	4622      	mov	r2, r4
   1bbcc:	4639      	mov	r1, r7
   1bbce:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1bbd2:	f7ff fef9 	bl	1b9c8 <rng_pool_get>
   1bbd6:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1bbd8:	4630      	mov	r0, r6
   1bbda:	f003 fb11 	bl	1f200 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1bbde:	2d00      	cmp	r5, #0
   1bbe0:	d1e7      	bne.n	1bbb2 <entropy_nrf5_get_entropy+0x26>
	return z_impl_k_sem_take(sem, timeout);
   1bbe2:	f04f 32ff 	mov.w	r2, #4294967295
   1bbe6:	f04f 33ff 	mov.w	r3, #4294967295
   1bbea:	f106 0018 	add.w	r0, r6, #24
   1bbee:	f003 fb4f 	bl	1f290 <z_impl_k_sem_take>
			continue;
   1bbf2:	e7e1      	b.n	1bbb8 <entropy_nrf5_get_entropy+0x2c>
}
   1bbf4:	2000      	movs	r0, #0
   1bbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bbf8:	200026a4 	.word	0x200026a4
   1bbfc:	0002cc34 	.word	0x0002cc34
   1bc00:	0002cc68 	.word	0x0002cc68
   1bc04:	00029ff8 	.word	0x00029ff8

0001bc08 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1bc08:	b510      	push	{r4, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1bc0a:	6902      	ldr	r2, [r0, #16]
   1bc0c:	4b1f      	ldr	r3, [pc, #124]	; (1bc8c <entropy_nrf5_init+0x84>)
   1bc0e:	429a      	cmp	r2, r3
   1bc10:	d00c      	beq.n	1bc2c <entropy_nrf5_init+0x24>
   1bc12:	4c1f      	ldr	r4, [pc, #124]	; (1bc90 <entropy_nrf5_init+0x88>)
   1bc14:	f240 1357 	movw	r3, #343	; 0x157
   1bc18:	4622      	mov	r2, r4
   1bc1a:	491e      	ldr	r1, [pc, #120]	; (1bc94 <entropy_nrf5_init+0x8c>)
   1bc1c:	481e      	ldr	r0, [pc, #120]	; (1bc98 <entropy_nrf5_init+0x90>)
   1bc1e:	f009 fe06 	bl	2582e <printk>
   1bc22:	f240 1157 	movw	r1, #343	; 0x157
   1bc26:	4620      	mov	r0, r4
   1bc28:	f00a f883 	bl	25d32 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1bc2c:	4c17      	ldr	r4, [pc, #92]	; (1bc8c <entropy_nrf5_init+0x84>)
   1bc2e:	2201      	movs	r2, #1
   1bc30:	4611      	mov	r1, r2
   1bc32:	4620      	mov	r0, r4
   1bc34:	f00d fdab 	bl	2978e <z_impl_k_sem_init>
   1bc38:	2201      	movs	r2, #1
   1bc3a:	2100      	movs	r1, #0
   1bc3c:	f104 0018 	add.w	r0, r4, #24
   1bc40:	f00d fda5 	bl	2978e <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1bc44:	2204      	movs	r2, #4
   1bc46:	2108      	movs	r1, #8
   1bc48:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1bc4c:	f00d f85f 	bl	28d0e <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1bc50:	220c      	movs	r2, #12
   1bc52:	2110      	movs	r1, #16
   1bc54:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1bc58:	f00d f859 	bl	28d0e <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1bc5c:	4b0f      	ldr	r3, [pc, #60]	; (1bc9c <entropy_nrf5_init+0x94>)
   1bc5e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1bc62:	f022 0201 	bic.w	r2, r2, #1
   1bc66:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1bc6a:	4a0d      	ldr	r2, [pc, #52]	; (1bca0 <entropy_nrf5_init+0x98>)
   1bc6c:	2400      	movs	r4, #0
   1bc6e:	6014      	str	r4, [r2, #0]
   1bc70:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1bc72:	2101      	movs	r1, #1
   1bc74:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1bc78:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1bc7a:	4622      	mov	r2, r4
   1bc7c:	200d      	movs	r0, #13
   1bc7e:	f7f7 faf5 	bl	1326c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1bc82:	200d      	movs	r0, #13
   1bc84:	f7f7 fac0 	bl	13208 <arch_irq_enable>

	return 0;
}
   1bc88:	4620      	mov	r0, r4
   1bc8a:	bd10      	pop	{r4, pc}
   1bc8c:	200026a4 	.word	0x200026a4
   1bc90:	0002cc34 	.word	0x0002cc34
   1bc94:	0002cc68 	.word	0x0002cc68
   1bc98:	00029ff8 	.word	0x00029ff8
   1bc9c:	4000d000 	.word	0x4000d000
   1bca0:	4000d100 	.word	0x4000d100

0001bca4 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1bca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bca6:	b083      	sub	sp, #12
   1bca8:	460f      	mov	r7, r1
   1bcaa:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   1bcac:	b130      	cbz	r0, 1bcbc <entropy_cc3xx_rng_get_entropy+0x18>
	__ASSERT_NO_MSG(buffer != NULL);
   1bcae:	b18f      	cbz	r7, 1bcd4 <entropy_cc3xx_rng_get_entropy+0x30>
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
			chunk_size = length - offset;
   1bcb0:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1bcb4:	2400      	movs	r4, #0
   1bcb6:	f06f 0015 	mvn.w	r0, #21
   1bcba:	e022      	b.n	1bd02 <entropy_cc3xx_rng_get_entropy+0x5e>
	__ASSERT_NO_MSG(dev != NULL);
   1bcbc:	4c17      	ldr	r4, [pc, #92]	; (1bd1c <entropy_cc3xx_rng_get_entropy+0x78>)
   1bcbe:	2324      	movs	r3, #36	; 0x24
   1bcc0:	4622      	mov	r2, r4
   1bcc2:	4917      	ldr	r1, [pc, #92]	; (1bd20 <entropy_cc3xx_rng_get_entropy+0x7c>)
   1bcc4:	4817      	ldr	r0, [pc, #92]	; (1bd24 <entropy_cc3xx_rng_get_entropy+0x80>)
   1bcc6:	f009 fdb2 	bl	2582e <printk>
   1bcca:	2124      	movs	r1, #36	; 0x24
   1bccc:	4620      	mov	r0, r4
   1bcce:	f00a f830 	bl	25d32 <assert_post_action>
   1bcd2:	e7ec      	b.n	1bcae <entropy_cc3xx_rng_get_entropy+0xa>
	__ASSERT_NO_MSG(buffer != NULL);
   1bcd4:	4c11      	ldr	r4, [pc, #68]	; (1bd1c <entropy_cc3xx_rng_get_entropy+0x78>)
   1bcd6:	2325      	movs	r3, #37	; 0x25
   1bcd8:	4622      	mov	r2, r4
   1bcda:	4913      	ldr	r1, [pc, #76]	; (1bd28 <entropy_cc3xx_rng_get_entropy+0x84>)
   1bcdc:	4811      	ldr	r0, [pc, #68]	; (1bd24 <entropy_cc3xx_rng_get_entropy+0x80>)
   1bcde:	f009 fda6 	bl	2582e <printk>
   1bce2:	2125      	movs	r1, #37	; 0x25
   1bce4:	4620      	mov	r0, r4
   1bce6:	f00a f824 	bl	25d32 <assert_post_action>
   1bcea:	e7e1      	b.n	1bcb0 <entropy_cc3xx_rng_get_entropy+0xc>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1bcec:	ab01      	add	r3, sp, #4
   1bcee:	462a      	mov	r2, r5
   1bcf0:	1939      	adds	r1, r7, r4
   1bcf2:	2000      	movs	r0, #0
   1bcf4:	f007 f97c 	bl	22ff0 <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   1bcf8:	9b01      	ldr	r3, [sp, #4]
   1bcfa:	42ab      	cmp	r3, r5
   1bcfc:	d109      	bne.n	1bd12 <entropy_cc3xx_rng_get_entropy+0x6e>
			return -EINVAL;
		}

		if (res != 0) {
   1bcfe:	b950      	cbnz	r0, 1bd16 <entropy_cc3xx_rng_get_entropy+0x72>
			break;
		}

		offset += chunk_size;
   1bd00:	442c      	add	r4, r5
	while (offset < length) {
   1bd02:	42a6      	cmp	r6, r4
   1bd04:	d907      	bls.n	1bd16 <entropy_cc3xx_rng_get_entropy+0x72>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1bd06:	1b33      	subs	r3, r6, r4
   1bd08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1bd0c:	d2ee      	bcs.n	1bcec <entropy_cc3xx_rng_get_entropy+0x48>
			chunk_size = length - offset;
   1bd0e:	461d      	mov	r5, r3
   1bd10:	e7ec      	b.n	1bcec <entropy_cc3xx_rng_get_entropy+0x48>
			return -EINVAL;
   1bd12:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   1bd16:	b003      	add	sp, #12
   1bd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd1a:	bf00      	nop
   1bd1c:	0002ccb8 	.word	0x0002ccb8
   1bd20:	0002cce8 	.word	0x0002cce8
   1bd24:	00029ff8 	.word	0x00029ff8
   1bd28:	0002ccfc 	.word	0x0002ccfc

0001bd2c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1bd2c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1bd30:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1bd34:	4b01      	ldr	r3, [pc, #4]	; (1bd3c <set_comparator+0x10>)
   1bd36:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1bd3a:	4770      	bx	lr
   1bd3c:	40011000 	.word	0x40011000

0001bd40 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1bd40:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1bd44:	4b01      	ldr	r3, [pc, #4]	; (1bd4c <get_comparator+0xc>)
   1bd46:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   1bd4a:	4770      	bx	lr
   1bd4c:	40011000 	.word	0x40011000

0001bd50 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bd50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1bd54:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1bd56:	4a02      	ldr	r2, [pc, #8]	; (1bd60 <event_enable+0x10>)
   1bd58:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1bd5c:	4770      	bx	lr
   1bd5e:	bf00      	nop
   1bd60:	40011000 	.word	0x40011000

0001bd64 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bd64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1bd68:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1bd6a:	4a02      	ldr	r2, [pc, #8]	; (1bd74 <event_disable+0x10>)
   1bd6c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   1bd70:	4770      	bx	lr
   1bd72:	bf00      	nop
   1bd74:	40011000 	.word	0x40011000

0001bd78 <counter>:
     return p_reg->COUNTER;
   1bd78:	4b01      	ldr	r3, [pc, #4]	; (1bd80 <counter+0x8>)
   1bd7a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   1bd7e:	4770      	bx	lr
   1bd80:	40011000 	.word	0x40011000

0001bd84 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   1bd84:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1bd86:	2301      	movs	r3, #1
   1bd88:	4083      	lsls	r3, r0
   1bd8a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bd8c:	4a10      	ldr	r2, [pc, #64]	; (1bdd0 <compare_int_lock+0x4c>)
   1bd8e:	f3bf 8f5b 	dmb	ish
   1bd92:	e852 1f00 	ldrex	r1, [r2]
   1bd96:	ea01 0c04 	and.w	ip, r1, r4
   1bd9a:	e842 ce00 	strex	lr, ip, [r2]
   1bd9e:	f1be 0f00 	cmp.w	lr, #0
   1bda2:	d1f6      	bne.n	1bd92 <compare_int_lock+0xe>
   1bda4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bda8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1bdac:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1bdb0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1bdb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1bdb8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1bdbc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bdc0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1bdc4:	420b      	tst	r3, r1
}
   1bdc6:	bf14      	ite	ne
   1bdc8:	2001      	movne	r0, #1
   1bdca:	2000      	moveq	r0, #0
   1bdcc:	bd10      	pop	{r4, pc}
   1bdce:	bf00      	nop
   1bdd0:	200026fc 	.word	0x200026fc

0001bdd4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   1bdd4:	b570      	push	{r4, r5, r6, lr}
   1bdd6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   1bdd8:	f00c ffc0 	bl	28d5c <full_int_lock>
   1bddc:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1bdde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1bde2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   1bde4:	4a17      	ldr	r2, [pc, #92]	; (1be44 <channel_processing_check_and_clear+0x70>)
   1bde6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1bdea:	4213      	tst	r3, r2
   1bdec:	d105      	bne.n	1bdfa <channel_processing_check_and_clear+0x26>
	bool result = false;
   1bdee:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   1bdf0:	4628      	mov	r0, r5
   1bdf2:	f00c ffb7 	bl	28d64 <full_int_unlock>

	return result;
}
   1bdf6:	4630      	mov	r0, r6
   1bdf8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1bdfa:	2301      	movs	r3, #1
   1bdfc:	40a3      	lsls	r3, r4
   1bdfe:	43db      	mvns	r3, r3
   1be00:	4a11      	ldr	r2, [pc, #68]	; (1be48 <channel_processing_check_and_clear+0x74>)
   1be02:	f3bf 8f5b 	dmb	ish
   1be06:	e852 1f00 	ldrex	r1, [r2]
   1be0a:	ea01 0003 	and.w	r0, r1, r3
   1be0e:	e842 0600 	strex	r6, r0, [r2]
   1be12:	2e00      	cmp	r6, #0
   1be14:	d1f7      	bne.n	1be06 <channel_processing_check_and_clear+0x32>
   1be16:	f3bf 8f5b 	dmb	ish
   1be1a:	b959      	cbnz	r1, 1be34 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1be1c:	f104 0350 	add.w	r3, r4, #80	; 0x50
   1be20:	009b      	lsls	r3, r3, #2
   1be22:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1be28:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1be2c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1be2e:	b113      	cbz	r3, 1be36 <channel_processing_check_and_clear+0x62>
   1be30:	2301      	movs	r3, #1
   1be32:	e000      	b.n	1be36 <channel_processing_check_and_clear+0x62>
   1be34:	2301      	movs	r3, #1
		if (result) {
   1be36:	461e      	mov	r6, r3
   1be38:	2b00      	cmp	r3, #0
   1be3a:	d0d9      	beq.n	1bdf0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   1be3c:	4620      	mov	r0, r4
   1be3e:	f00c ff7e 	bl	28d3e <event_clear>
   1be42:	e7d5      	b.n	1bdf0 <channel_processing_check_and_clear+0x1c>
   1be44:	40011000 	.word	0x40011000
   1be48:	200026f8 	.word	0x200026f8

0001be4c <compare_int_unlock>:
	if (key) {
   1be4c:	b901      	cbnz	r1, 1be50 <compare_int_unlock+0x4>
}
   1be4e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   1be50:	2301      	movs	r3, #1
   1be52:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1be54:	4a11      	ldr	r2, [pc, #68]	; (1be9c <compare_int_unlock+0x50>)
   1be56:	f3bf 8f5b 	dmb	ish
   1be5a:	e852 1f00 	ldrex	r1, [r2]
   1be5e:	4319      	orrs	r1, r3
   1be60:	e842 1c00 	strex	ip, r1, [r2]
   1be64:	f1bc 0f00 	cmp.w	ip, #0
   1be68:	d1f7      	bne.n	1be5a <compare_int_unlock+0xe>
   1be6a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1be6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1be72:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1be74:	4a0a      	ldr	r2, [pc, #40]	; (1bea0 <compare_int_unlock+0x54>)
   1be76:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1be7a:	f3bf 8f5b 	dmb	ish
   1be7e:	4b09      	ldr	r3, [pc, #36]	; (1bea4 <compare_int_unlock+0x58>)
   1be80:	681b      	ldr	r3, [r3, #0]
   1be82:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1be86:	fa23 f000 	lsr.w	r0, r3, r0
   1be8a:	f010 0f01 	tst.w	r0, #1
   1be8e:	d0de      	beq.n	1be4e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1be90:	4b05      	ldr	r3, [pc, #20]	; (1bea8 <compare_int_unlock+0x5c>)
   1be92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1be96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1be9a:	e7d8      	b.n	1be4e <compare_int_unlock+0x2>
   1be9c:	200026fc 	.word	0x200026fc
   1bea0:	40011000 	.word	0x40011000
   1bea4:	200026f8 	.word	0x200026f8
   1bea8:	e000e100 	.word	0xe000e100

0001beac <sys_clock_timeout_handler>:
{
   1beac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1beae:	4607      	mov	r7, r0
   1beb0:	4614      	mov	r4, r2
   1beb2:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1beb4:	4610      	mov	r0, r2
   1beb6:	4619      	mov	r1, r3
   1beb8:	f00c ff4d 	bl	28d56 <absolute_time_to_cc>
   1bebc:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bebe:	4b15      	ldr	r3, [pc, #84]	; (1bf14 <sys_clock_timeout_handler+0x68>)
   1bec0:	681a      	ldr	r2, [r3, #0]
   1bec2:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   1bec4:	601c      	str	r4, [r3, #0]
   1bec6:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1bec8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1becc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1bed0:	d308      	bcc.n	1bee4 <sys_clock_timeout_handler+0x38>
	return false;
   1bed2:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1bed4:	f005 fe7a 	bl	21bcc <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   1bed8:	4638      	mov	r0, r7
   1beda:	f7ff ff31 	bl	1bd40 <get_comparator>
   1bede:	42a8      	cmp	r0, r5
   1bee0:	d00c      	beq.n	1befc <sys_clock_timeout_handler+0x50>
}
   1bee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1bee4:	4b0c      	ldr	r3, [pc, #48]	; (1bf18 <sys_clock_timeout_handler+0x6c>)
   1bee6:	6819      	ldr	r1, [r3, #0]
   1bee8:	0a0b      	lsrs	r3, r1, #8
   1beea:	060a      	lsls	r2, r1, #24
   1beec:	1952      	adds	r2, r2, r5
   1beee:	f143 0300 	adc.w	r3, r3, #0
   1bef2:	490a      	ldr	r1, [pc, #40]	; (1bf1c <sys_clock_timeout_handler+0x70>)
   1bef4:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1bef8:	2401      	movs	r4, #1
   1befa:	e7eb      	b.n	1bed4 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   1befc:	b11c      	cbz	r4, 1bf06 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   1befe:	4638      	mov	r0, r7
   1bf00:	f7ff ff26 	bl	1bd50 <event_enable>
}
   1bf04:	e7ed      	b.n	1bee2 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   1bf06:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1bf0a:	4638      	mov	r0, r7
   1bf0c:	f7ff ff0e 	bl	1bd2c <set_comparator>
   1bf10:	e7f5      	b.n	1befe <sys_clock_timeout_handler+0x52>
   1bf12:	bf00      	nop
   1bf14:	20001b38 	.word	0x20001b38
   1bf18:	20002700 	.word	0x20002700
   1bf1c:	20001b20 	.word	0x20001b20

0001bf20 <z_nrf_rtc_timer_read>:
{
   1bf20:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1bf22:	4b0d      	ldr	r3, [pc, #52]	; (1bf58 <z_nrf_rtc_timer_read+0x38>)
   1bf24:	681b      	ldr	r3, [r3, #0]
   1bf26:	0a1d      	lsrs	r5, r3, #8
   1bf28:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1bf2a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1bf2e:	f7ff ff23 	bl	1bd78 <counter>
   1bf32:	4603      	mov	r3, r0
	val += cntr;
   1bf34:	1820      	adds	r0, r4, r0
   1bf36:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1bf3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1bf3e:	d20a      	bcs.n	1bf56 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1bf40:	4b06      	ldr	r3, [pc, #24]	; (1bf5c <z_nrf_rtc_timer_read+0x3c>)
   1bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bf46:	4299      	cmp	r1, r3
   1bf48:	bf08      	it	eq
   1bf4a:	4290      	cmpeq	r0, r2
   1bf4c:	d203      	bcs.n	1bf56 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1bf4e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1bf52:	f141 0100 	adc.w	r1, r1, #0
}
   1bf56:	bd38      	pop	{r3, r4, r5, pc}
   1bf58:	20002700 	.word	0x20002700
   1bf5c:	20001b20 	.word	0x20001b20

0001bf60 <compare_set_nolocks>:
{
   1bf60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bf64:	4606      	mov	r6, r0
   1bf66:	4614      	mov	r4, r2
   1bf68:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1bf6a:	4610      	mov	r0, r2
   1bf6c:	4619      	mov	r1, r3
   1bf6e:	f00c fef2 	bl	28d56 <absolute_time_to_cc>
   1bf72:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1bf74:	f7ff ffd4 	bl	1bf20 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1bf78:	42a9      	cmp	r1, r5
   1bf7a:	bf08      	it	eq
   1bf7c:	42a0      	cmpeq	r0, r4
   1bf7e:	d21e      	bcs.n	1bfbe <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1bf80:	ebb4 0800 	subs.w	r8, r4, r0
   1bf84:	eb65 0901 	sbc.w	r9, r5, r1
   1bf88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1bf8c:	2300      	movs	r3, #0
   1bf8e:	454b      	cmp	r3, r9
   1bf90:	bf08      	it	eq
   1bf92:	4542      	cmpeq	r2, r8
   1bf94:	d32e      	bcc.n	1bff4 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   1bf96:	4b19      	ldr	r3, [pc, #100]	; (1bffc <compare_set_nolocks+0x9c>)
   1bf98:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1bf9c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1bfa0:	42ab      	cmp	r3, r5
   1bfa2:	bf08      	it	eq
   1bfa4:	42a2      	cmpeq	r2, r4
   1bfa6:	d018      	beq.n	1bfda <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   1bfa8:	4639      	mov	r1, r7
   1bfaa:	4630      	mov	r0, r6
   1bfac:	f00c fedd 	bl	28d6a <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1bfb0:	4639      	mov	r1, r7
   1bfb2:	f00c fec0 	bl	28d36 <counter_sub>
   1bfb6:	1824      	adds	r4, r4, r0
   1bfb8:	f145 0500 	adc.w	r5, r5, #0
   1bfbc:	e00d      	b.n	1bfda <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   1bfbe:	2301      	movs	r3, #1
   1bfc0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bfc2:	4a0f      	ldr	r2, [pc, #60]	; (1c000 <compare_set_nolocks+0xa0>)
   1bfc4:	f3bf 8f5b 	dmb	ish
   1bfc8:	e852 1f00 	ldrex	r1, [r2]
   1bfcc:	4319      	orrs	r1, r3
   1bfce:	e842 1000 	strex	r0, r1, [r2]
   1bfd2:	2800      	cmp	r0, #0
   1bfd4:	d1f8      	bne.n	1bfc8 <compare_set_nolocks+0x68>
   1bfd6:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1bfda:	4b08      	ldr	r3, [pc, #32]	; (1bffc <compare_set_nolocks+0x9c>)
   1bfdc:	0132      	lsls	r2, r6, #4
   1bfde:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1bfe2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1bfe6:	9908      	ldr	r1, [sp, #32]
   1bfe8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1bfea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bfec:	6073      	str	r3, [r6, #4]
	return ret;
   1bfee:	2000      	movs	r0, #0
}
   1bff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   1bff4:	f06f 0015 	mvn.w	r0, #21
   1bff8:	e7fa      	b.n	1bff0 <compare_set_nolocks+0x90>
   1bffa:	bf00      	nop
   1bffc:	20001b28 	.word	0x20001b28
   1c000:	200026f8 	.word	0x200026f8

0001c004 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1c004:	b530      	push	{r4, r5, lr}
   1c006:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   1c008:	2300      	movs	r3, #0
   1c00a:	4a1e      	ldr	r2, [pc, #120]	; (1c084 <sys_clock_driver_init+0x80>)
   1c00c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1c010:	2b00      	cmp	r3, #0
   1c012:	dd25      	ble.n	1c060 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   1c014:	4c1b      	ldr	r4, [pc, #108]	; (1c084 <sys_clock_driver_init+0x80>)
   1c016:	2502      	movs	r5, #2
   1c018:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c01c:	4b1a      	ldr	r3, [pc, #104]	; (1c088 <sys_clock_driver_init+0x84>)
   1c01e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1c022:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1c026:	2200      	movs	r2, #0
   1c028:	2101      	movs	r1, #1
   1c02a:	2011      	movs	r0, #17
   1c02c:	f7f7 f91e 	bl	1326c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1c030:	2011      	movs	r0, #17
   1c032:	f7f7 f8e9 	bl	13208 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1c036:	2301      	movs	r3, #1
   1c038:	4a14      	ldr	r2, [pc, #80]	; (1c08c <sys_clock_driver_init+0x88>)
   1c03a:	6013      	str	r3, [r2, #0]
   1c03c:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1c03e:	4a14      	ldr	r2, [pc, #80]	; (1c090 <sys_clock_driver_init+0x8c>)
   1c040:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1c042:	2400      	movs	r4, #0
   1c044:	9401      	str	r4, [sp, #4]
   1c046:	4b13      	ldr	r3, [pc, #76]	; (1c094 <sys_clock_driver_init+0x90>)
   1c048:	9300      	str	r3, [sp, #0]
   1c04a:	4a13      	ldr	r2, [pc, #76]	; (1c098 <sys_clock_driver_init+0x94>)
   1c04c:	2300      	movs	r3, #0
   1c04e:	4620      	mov	r0, r4
   1c050:	f00c fec6 	bl	28de0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1c054:	4628      	mov	r0, r5
   1c056:	f7fe fdc1 	bl	1abdc <z_nrf_clock_control_lf_on>

	return 0;
}
   1c05a:	4620      	mov	r0, r4
   1c05c:	b003      	add	sp, #12
   1c05e:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c060:	4a0e      	ldr	r2, [pc, #56]	; (1c09c <sys_clock_driver_init+0x98>)
   1c062:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1c066:	f04f 30ff 	mov.w	r0, #4294967295
   1c06a:	f04f 31ff 	mov.w	r1, #4294967295
   1c06e:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1c072:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c076:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1c078:	4902      	ldr	r1, [pc, #8]	; (1c084 <sys_clock_driver_init+0x80>)
   1c07a:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1c07e:	3301      	adds	r3, #1
   1c080:	e7c6      	b.n	1c010 <sys_clock_driver_init+0xc>
   1c082:	bf00      	nop
   1c084:	40011000 	.word	0x40011000
   1c088:	e000e100 	.word	0xe000e100
   1c08c:	40011008 	.word	0x40011008
   1c090:	200026fc 	.word	0x200026fc
   1c094:	0001bead 	.word	0x0001bead
   1c098:	007fffff 	.word	0x007fffff
   1c09c:	20001b28 	.word	0x20001b28

0001c0a0 <process_channel>:
{
   1c0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c0a4:	b082      	sub	sp, #8
   1c0a6:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   1c0a8:	f7ff fe94 	bl	1bdd4 <channel_processing_check_and_clear>
   1c0ac:	b910      	cbnz	r0, 1c0b4 <process_channel+0x14>
}
   1c0ae:	b002      	add	sp, #8
   1c0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1c0b4:	f7ff ff34 	bl	1bf20 <z_nrf_rtc_timer_read>
   1c0b8:	4606      	mov	r6, r0
   1c0ba:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   1c0bc:	f00c fe4e 	bl	28d5c <full_int_lock>
   1c0c0:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   1c0c2:	4b13      	ldr	r3, [pc, #76]	; (1c110 <process_channel+0x70>)
   1c0c4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1c0c8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1c0cc:	454f      	cmp	r7, r9
   1c0ce:	bf08      	it	eq
   1c0d0:	4546      	cmpeq	r6, r8
   1c0d2:	d20b      	bcs.n	1c0ec <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1c0d4:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   1c0d6:	4650      	mov	r0, sl
   1c0d8:	f00c fe44 	bl	28d64 <full_int_unlock>
		if (handler) {
   1c0dc:	2e00      	cmp	r6, #0
   1c0de:	d0e6      	beq.n	1c0ae <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1c0e0:	9500      	str	r5, [sp, #0]
   1c0e2:	4642      	mov	r2, r8
   1c0e4:	464b      	mov	r3, r9
   1c0e6:	4620      	mov	r0, r4
   1c0e8:	47b0      	blx	r6
}
   1c0ea:	e7e0      	b.n	1c0ae <process_channel+0xe>
			handler = cc_data[chan].callback;
   1c0ec:	4a08      	ldr	r2, [pc, #32]	; (1c110 <process_channel+0x70>)
   1c0ee:	0123      	lsls	r3, r4, #4
   1c0f0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1c0f4:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   1c0f6:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   1c0f8:	2000      	movs	r0, #0
   1c0fa:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c0fc:	f04f 32ff 	mov.w	r2, #4294967295
   1c100:	f04f 33ff 	mov.w	r3, #4294967295
   1c104:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1c108:	4620      	mov	r0, r4
   1c10a:	f7ff fe2b 	bl	1bd64 <event_disable>
   1c10e:	e7e2      	b.n	1c0d6 <process_channel+0x36>
   1c110:	20001b28 	.word	0x20001b28

0001c114 <rtc_nrf_isr>:
{
   1c114:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1c116:	4b0d      	ldr	r3, [pc, #52]	; (1c14c <rtc_nrf_isr+0x38>)
   1c118:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1c11c:	f013 0f02 	tst.w	r3, #2
   1c120:	d00a      	beq.n	1c138 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c122:	4b0b      	ldr	r3, [pc, #44]	; (1c150 <rtc_nrf_isr+0x3c>)
   1c124:	681b      	ldr	r3, [r3, #0]
   1c126:	b13b      	cbz	r3, 1c138 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c128:	4b09      	ldr	r3, [pc, #36]	; (1c150 <rtc_nrf_isr+0x3c>)
   1c12a:	2200      	movs	r2, #0
   1c12c:	601a      	str	r2, [r3, #0]
   1c12e:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   1c130:	4a08      	ldr	r2, [pc, #32]	; (1c154 <rtc_nrf_isr+0x40>)
   1c132:	6813      	ldr	r3, [r2, #0]
   1c134:	3301      	adds	r3, #1
   1c136:	6013      	str	r3, [r2, #0]
{
   1c138:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1c13a:	2c00      	cmp	r4, #0
   1c13c:	dd00      	ble.n	1c140 <rtc_nrf_isr+0x2c>
}
   1c13e:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1c140:	4620      	mov	r0, r4
   1c142:	f7ff ffad 	bl	1c0a0 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1c146:	3401      	adds	r4, #1
   1c148:	e7f7      	b.n	1c13a <rtc_nrf_isr+0x26>
   1c14a:	bf00      	nop
   1c14c:	40011000 	.word	0x40011000
   1c150:	40011104 	.word	0x40011104
   1c154:	20002700 	.word	0x20002700

0001c158 <sys_clock_set_timeout>:
{
   1c158:	b510      	push	{r4, lr}
   1c15a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c15c:	f1b0 3fff 	cmp.w	r0, #4294967295
   1c160:	d007      	beq.n	1c172 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1c162:	1e44      	subs	r4, r0, #1
   1c164:	2c00      	cmp	r4, #0
   1c166:	dd07      	ble.n	1c178 <sys_clock_set_timeout+0x20>
   1c168:	4b11      	ldr	r3, [pc, #68]	; (1c1b0 <sys_clock_set_timeout+0x58>)
   1c16a:	429c      	cmp	r4, r3
   1c16c:	dd05      	ble.n	1c17a <sys_clock_set_timeout+0x22>
   1c16e:	4c11      	ldr	r4, [pc, #68]	; (1c1b4 <sys_clock_set_timeout+0x5c>)
   1c170:	e003      	b.n	1c17a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c172:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   1c176:	e7f4      	b.n	1c162 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1c178:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1c17a:	f7ff fed1 	bl	1bf20 <z_nrf_rtc_timer_read>
   1c17e:	4b0e      	ldr	r3, [pc, #56]	; (1c1b8 <sys_clock_set_timeout+0x60>)
   1c180:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c184:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   1c186:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c18a:	d300      	bcc.n	1c18e <sys_clock_set_timeout+0x36>
		ticks = 0;
   1c18c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1c18e:	4404      	add	r4, r0
   1c190:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   1c192:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   1c196:	d300      	bcc.n	1c19a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   1c198:	4c06      	ldr	r4, [pc, #24]	; (1c1b4 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1c19a:	2000      	movs	r0, #0
   1c19c:	9001      	str	r0, [sp, #4]
   1c19e:	4907      	ldr	r1, [pc, #28]	; (1c1bc <sys_clock_set_timeout+0x64>)
   1c1a0:	9100      	str	r1, [sp, #0]
   1c1a2:	1912      	adds	r2, r2, r4
   1c1a4:	f143 0300 	adc.w	r3, r3, #0
   1c1a8:	f00c fe1a 	bl	28de0 <compare_set>
}
   1c1ac:	b002      	add	sp, #8
   1c1ae:	bd10      	pop	{r4, pc}
   1c1b0:	007ffffe 	.word	0x007ffffe
   1c1b4:	007fffff 	.word	0x007fffff
   1c1b8:	20001b38 	.word	0x20001b38
   1c1bc:	0001bead 	.word	0x0001bead

0001c1c0 <sys_clock_elapsed>:
{
   1c1c0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1c1c2:	f7ff fead 	bl	1bf20 <z_nrf_rtc_timer_read>
   1c1c6:	4b02      	ldr	r3, [pc, #8]	; (1c1d0 <sys_clock_elapsed+0x10>)
   1c1c8:	681b      	ldr	r3, [r3, #0]
}
   1c1ca:	1ac0      	subs	r0, r0, r3
   1c1cc:	bd08      	pop	{r3, pc}
   1c1ce:	bf00      	nop
   1c1d0:	20001b38 	.word	0x20001b38

0001c1d4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1c1d4:	b508      	push	{r3, lr}
   1c1d6:	4602      	mov	r2, r0
   1c1d8:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1c1da:	4802      	ldr	r0, [pc, #8]	; (1c1e4 <multithreading_lock_acquire+0x10>)
   1c1dc:	f002 fc86 	bl	1eaec <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1c1e0:	bd08      	pop	{r3, pc}
   1c1e2:	bf00      	nop
   1c1e4:	20000744 	.word	0x20000744

0001c1e8 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1c1e8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1c1ea:	4802      	ldr	r0, [pc, #8]	; (1c1f4 <multithreading_lock_release+0xc>)
   1c1ec:	f002 fd9e 	bl	1ed2c <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1c1f0:	bd08      	pop	{r3, pc}
   1c1f2:	bf00      	nop
   1c1f4:	20000744 	.word	0x20000744

0001c1f8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1c1f8:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1c1fa:	f7f5 fcff 	bl	11bfc <z_impl_log_panic>
   1c1fe:	4b09      	ldr	r3, [pc, #36]	; (1c224 <k_sys_fatal_error_handler+0x2c>)
   1c200:	4a09      	ldr	r2, [pc, #36]	; (1c228 <k_sys_fatal_error_handler+0x30>)
   1c202:	1a9b      	subs	r3, r3, r2
   1c204:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1c206:	f04f 0100 	mov.w	r1, #0
   1c20a:	2201      	movs	r2, #1
   1c20c:	f362 0102 	bfi	r1, r2, #0, #3
   1c210:	f36f 01c5 	bfc	r1, #3, #3
   1c214:	f363 118f 	bfi	r1, r3, #6, #10
   1c218:	4804      	ldr	r0, [pc, #16]	; (1c22c <k_sys_fatal_error_handler+0x34>)
   1c21a:	f7f5 fbcb 	bl	119b4 <log_0>
		sys_arch_reboot(0);
   1c21e:	2000      	movs	r0, #0
   1c220:	f7f7 ffde 	bl	141e0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1c224:	00029dd0 	.word	0x00029dd0
   1c228:	00029d70 	.word	0x00029d70
   1c22c:	0002cd3c 	.word	0x0002cd3c

0001c230 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1c230:	b538      	push	{r3, r4, r5, lr}
   1c232:	460d      	mov	r5, r1
   1c234:	4b0d      	ldr	r3, [pc, #52]	; (1c26c <sdc_assertion_handler+0x3c>)
   1c236:	4a0e      	ldr	r2, [pc, #56]	; (1c270 <sdc_assertion_handler+0x40>)
   1c238:	1a9b      	subs	r3, r3, r2
   1c23a:	08db      	lsrs	r3, r3, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1c23c:	f04f 0400 	mov.w	r4, #0
   1c240:	2201      	movs	r2, #1
   1c242:	f362 0402 	bfi	r4, r2, #0, #3
   1c246:	f36f 04c5 	bfc	r4, #3, #3
   1c24a:	f363 148f 	bfi	r4, r3, #6, #10
   1c24e:	f7f5 fa3f 	bl	116d0 <z_log_strdup>
   1c252:	4601      	mov	r1, r0
   1c254:	4623      	mov	r3, r4
   1c256:	462a      	mov	r2, r5
   1c258:	4806      	ldr	r0, [pc, #24]	; (1c274 <sdc_assertion_handler+0x44>)
   1c25a:	f7f5 fc11 	bl	11a80 <log_2>
	k_oops();
   1c25e:	4040      	eors	r0, r0
   1c260:	f380 8811 	msr	BASEPRI, r0
   1c264:	f04f 0003 	mov.w	r0, #3
   1c268:	df02      	svc	2
}
   1c26a:	bd38      	pop	{r3, r4, r5, pc}
   1c26c:	00029e28 	.word	0x00029e28
   1c270:	00029d70 	.word	0x00029d70
   1c274:	0002cd5c 	.word	0x0002cd5c

0001c278 <host_signal>:
		k_yield();
	}
}

void host_signal(void)
{
   1c278:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1c27a:	4802      	ldr	r0, [pc, #8]	; (1c284 <host_signal+0xc>)
   1c27c:	f002 ffc0 	bl	1f200 <z_impl_k_sem_give>
	/* Wake up the RX event/data thread */
	k_sem_give(&sem_recv);
}
   1c280:	bd08      	pop	{r3, pc}
   1c282:	bf00      	nop
   1c284:	200007c4 	.word	0x200007c4

0001c288 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1c288:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1c28a:	4803      	ldr	r0, [pc, #12]	; (1c298 <hci_driver_init+0x10>)
   1c28c:	f7f9 fdda 	bl	15e44 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1c290:	4802      	ldr	r0, [pc, #8]	; (1c29c <hci_driver_init+0x14>)
   1c292:	f7e7 fcd9 	bl	3c48 <sdc_init>
	return err;
}
   1c296:	bd08      	pop	{r3, pc}
   1c298:	0002d000 	.word	0x0002d000
   1c29c:	0001c231 	.word	0x0001c231

0001c2a0 <acl_handle>:
{
   1c2a0:	b538      	push	{r3, r4, r5, lr}
   1c2a2:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c2a4:	f04f 30ff 	mov.w	r0, #4294967295
   1c2a8:	f04f 31ff 	mov.w	r1, #4294967295
   1c2ac:	f7ff ff92 	bl	1c1d4 <multithreading_lock_acquire>
	if (!errcode) {
   1c2b0:	4605      	mov	r5, r0
   1c2b2:	b108      	cbz	r0, 1c2b8 <acl_handle+0x18>
}
   1c2b4:	4628      	mov	r0, r5
   1c2b6:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1c2b8:	68a0      	ldr	r0, [r4, #8]
   1c2ba:	f7ef ff1f 	bl	c0fc <sdc_hci_data_put>
   1c2be:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1c2c0:	f7ff ff92 	bl	1c1e8 <multithreading_lock_release>
		if (errcode) {
   1c2c4:	2d00      	cmp	r5, #0
   1c2c6:	d0f5      	beq.n	1c2b4 <acl_handle+0x14>
   1c2c8:	4801      	ldr	r0, [pc, #4]	; (1c2d0 <acl_handle+0x30>)
   1c2ca:	f002 ff99 	bl	1f200 <z_impl_k_sem_give>
}
   1c2ce:	e7f1      	b.n	1c2b4 <acl_handle+0x14>
   1c2d0:	200007c4 	.word	0x200007c4

0001c2d4 <cmd_handle>:
{
   1c2d4:	b538      	push	{r3, r4, r5, lr}
   1c2d6:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c2d8:	f04f 30ff 	mov.w	r0, #4294967295
   1c2dc:	f04f 31ff 	mov.w	r1, #4294967295
   1c2e0:	f7ff ff78 	bl	1c1d4 <multithreading_lock_acquire>
	if (!errcode) {
   1c2e4:	4604      	mov	r4, r0
   1c2e6:	b110      	cbz	r0, 1c2ee <cmd_handle+0x1a>
	if (errcode) {
   1c2e8:	b144      	cbz	r4, 1c2fc <cmd_handle+0x28>
}
   1c2ea:	4620      	mov	r0, r4
   1c2ec:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   1c2ee:	68a8      	ldr	r0, [r5, #8]
   1c2f0:	f000 fa3c 	bl	1c76c <hci_internal_cmd_put>
   1c2f4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1c2f6:	f7ff ff77 	bl	1c1e8 <multithreading_lock_release>
   1c2fa:	e7f5      	b.n	1c2e8 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   1c2fc:	4801      	ldr	r0, [pc, #4]	; (1c304 <cmd_handle+0x30>)
   1c2fe:	f002 ff7f 	bl	1f200 <z_impl_k_sem_give>
	return 0;
   1c302:	e7f2      	b.n	1c2ea <cmd_handle+0x16>
   1c304:	200007c4 	.word	0x200007c4

0001c308 <rand_prio_low_vector_get_blocking>:
{
   1c308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c30c:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1c30e:	4b17      	ldr	r3, [pc, #92]	; (1c36c <rand_prio_low_vector_get_blocking+0x64>)
   1c310:	681e      	ldr	r6, [r3, #0]
   1c312:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1c314:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1c316:	683b      	ldr	r3, [r7, #0]
   1c318:	b13b      	cbz	r3, 1c32a <rand_prio_low_vector_get_blocking+0x22>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1c31a:	683b      	ldr	r3, [r7, #0]
   1c31c:	462a      	mov	r2, r5
   1c31e:	4621      	mov	r1, r4
   1c320:	4630      	mov	r0, r6
   1c322:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1c324:	b988      	cbnz	r0, 1c34a <rand_prio_low_vector_get_blocking+0x42>
}
   1c326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(api->get_entropy != NULL,
   1c32a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1c388 <rand_prio_low_vector_get_blocking+0x80>
   1c32e:	234b      	movs	r3, #75	; 0x4b
   1c330:	4642      	mov	r2, r8
   1c332:	490f      	ldr	r1, [pc, #60]	; (1c370 <rand_prio_low_vector_get_blocking+0x68>)
   1c334:	480f      	ldr	r0, [pc, #60]	; (1c374 <rand_prio_low_vector_get_blocking+0x6c>)
   1c336:	f009 fa7a 	bl	2582e <printk>
   1c33a:	480f      	ldr	r0, [pc, #60]	; (1c378 <rand_prio_low_vector_get_blocking+0x70>)
   1c33c:	f009 fa77 	bl	2582e <printk>
   1c340:	214b      	movs	r1, #75	; 0x4b
   1c342:	4640      	mov	r0, r8
   1c344:	f009 fcf5 	bl	25d32 <assert_post_action>
   1c348:	e7e7      	b.n	1c31a <rand_prio_low_vector_get_blocking+0x12>
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1c34a:	4c0c      	ldr	r4, [pc, #48]	; (1c37c <rand_prio_low_vector_get_blocking+0x74>)
   1c34c:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   1c350:	4622      	mov	r2, r4
   1c352:	490b      	ldr	r1, [pc, #44]	; (1c380 <rand_prio_low_vector_get_blocking+0x78>)
   1c354:	4807      	ldr	r0, [pc, #28]	; (1c374 <rand_prio_low_vector_get_blocking+0x6c>)
   1c356:	f009 fa6a 	bl	2582e <printk>
   1c35a:	480a      	ldr	r0, [pc, #40]	; (1c384 <rand_prio_low_vector_get_blocking+0x7c>)
   1c35c:	f009 fa67 	bl	2582e <printk>
   1c360:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   1c364:	4620      	mov	r0, r4
   1c366:	f009 fce4 	bl	25d32 <assert_post_action>
}
   1c36a:	e7dc      	b.n	1c326 <rand_prio_low_vector_get_blocking+0x1e>
   1c36c:	20002704 	.word	0x20002704
   1c370:	0002cdb4 	.word	0x0002cdb4
   1c374:	00029ff8 	.word	0x00029ff8
   1c378:	0002cdd4 	.word	0x0002cdd4
   1c37c:	0002cdfc 	.word	0x0002cdfc
   1c380:	0002b6ac 	.word	0x0002b6ac
   1c384:	0002ce38 	.word	0x0002ce38
   1c388:	0002cd84 	.word	0x0002cd84

0001c38c <rand_prio_high_vector_get>:
{
   1c38c:	b538      	push	{r3, r4, r5, lr}
   1c38e:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1c390:	4b10      	ldr	r3, [pc, #64]	; (1c3d4 <rand_prio_high_vector_get+0x48>)
   1c392:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1c394:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1c396:	685d      	ldr	r5, [r3, #4]
   1c398:	b14d      	cbz	r5, 1c3ae <rand_prio_high_vector_get+0x22>
   1c39a:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1c39c:	2300      	movs	r3, #0
   1c39e:	4621      	mov	r1, r4
   1c3a0:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1c3a2:	1e04      	subs	r4, r0, #0
   1c3a4:	db05      	blt.n	1c3b2 <rand_prio_high_vector_get+0x26>
	return ret >= 0 ? ret : 0;
   1c3a6:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1c3aa:	b2c0      	uxtb	r0, r0
   1c3ac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1c3ae:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1c3b2:	4d09      	ldr	r5, [pc, #36]	; (1c3d8 <rand_prio_high_vector_get+0x4c>)
   1c3b4:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1c3b8:	462a      	mov	r2, r5
   1c3ba:	4908      	ldr	r1, [pc, #32]	; (1c3dc <rand_prio_high_vector_get+0x50>)
   1c3bc:	4808      	ldr	r0, [pc, #32]	; (1c3e0 <rand_prio_high_vector_get+0x54>)
   1c3be:	f009 fa36 	bl	2582e <printk>
   1c3c2:	4808      	ldr	r0, [pc, #32]	; (1c3e4 <rand_prio_high_vector_get+0x58>)
   1c3c4:	f009 fa33 	bl	2582e <printk>
   1c3c8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1c3cc:	4628      	mov	r0, r5
   1c3ce:	f009 fcb0 	bl	25d32 <assert_post_action>
   1c3d2:	e7e8      	b.n	1c3a6 <rand_prio_high_vector_get+0x1a>
   1c3d4:	20002704 	.word	0x20002704
   1c3d8:	0002cdfc 	.word	0x0002cdfc
   1c3dc:	0002ce74 	.word	0x0002ce74
   1c3e0:	00029ff8 	.word	0x00029ff8
   1c3e4:	0002ce80 	.word	0x0002ce80

0001c3e8 <rand_prio_low_vector_get>:
{
   1c3e8:	b538      	push	{r3, r4, r5, lr}
   1c3ea:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1c3ec:	4b10      	ldr	r3, [pc, #64]	; (1c430 <rand_prio_low_vector_get+0x48>)
   1c3ee:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   1c3f0:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   1c3f2:	685d      	ldr	r5, [r3, #4]
   1c3f4:	b14d      	cbz	r5, 1c40a <rand_prio_low_vector_get+0x22>
   1c3f6:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   1c3f8:	2300      	movs	r3, #0
   1c3fa:	4621      	mov	r1, r4
   1c3fc:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1c3fe:	1e04      	subs	r4, r0, #0
   1c400:	db05      	blt.n	1c40e <rand_prio_low_vector_get+0x26>
	return ret >= 0 ? ret : 0;
   1c402:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1c406:	b2c0      	uxtb	r0, r0
   1c408:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1c40a:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1c40e:	4d09      	ldr	r5, [pc, #36]	; (1c434 <rand_prio_low_vector_get+0x4c>)
   1c410:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   1c414:	462a      	mov	r2, r5
   1c416:	4908      	ldr	r1, [pc, #32]	; (1c438 <rand_prio_low_vector_get+0x50>)
   1c418:	4808      	ldr	r0, [pc, #32]	; (1c43c <rand_prio_low_vector_get+0x54>)
   1c41a:	f009 fa08 	bl	2582e <printk>
   1c41e:	4808      	ldr	r0, [pc, #32]	; (1c440 <rand_prio_low_vector_get+0x58>)
   1c420:	f009 fa05 	bl	2582e <printk>
   1c424:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1c428:	4628      	mov	r0, r5
   1c42a:	f009 fc82 	bl	25d32 <assert_post_action>
   1c42e:	e7e8      	b.n	1c402 <rand_prio_low_vector_get+0x1a>
   1c430:	20002704 	.word	0x20002704
   1c434:	0002cdfc 	.word	0x0002cdfc
   1c438:	0002ce74 	.word	0x0002ce74
   1c43c:	00029ff8 	.word	0x00029ff8
   1c440:	0002cec4 	.word	0x0002cec4

0001c444 <event_packet_process>:
{
   1c444:	b570      	push	{r4, r5, r6, lr}
   1c446:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1c448:	f00c fce7 	bl	28e1a <event_packet_is_discardable>
   1c44c:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1c44e:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1c450:	461d      	mov	r5, r3
   1c452:	b183      	cbz	r3, 1c476 <event_packet_process+0x32>
   1c454:	2200      	movs	r2, #0
   1c456:	2300      	movs	r3, #0
   1c458:	4629      	mov	r1, r5
   1c45a:	f7f7 ffd1 	bl	14400 <bt_buf_get_evt>
	if (!evt_buf) {
   1c45e:	4606      	mov	r6, r0
   1c460:	b170      	cbz	r0, 1c480 <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1c462:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1c464:	3202      	adds	r2, #2
   1c466:	4621      	mov	r1, r4
   1c468:	3008      	adds	r0, #8
   1c46a:	f00c f9a4 	bl	287b6 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1c46e:	4630      	mov	r0, r6
   1c470:	f7f9 fc94 	bl	15d9c <bt_recv>
}
   1c474:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1c476:	f04f 32ff 	mov.w	r2, #4294967295
   1c47a:	f04f 33ff 	mov.w	r3, #4294967295
   1c47e:	e7eb      	b.n	1c458 <event_packet_process+0x14>
		if (discardable) {
   1c480:	2d00      	cmp	r5, #0
   1c482:	d1f7      	bne.n	1c474 <event_packet_process+0x30>
   1c484:	4b08      	ldr	r3, [pc, #32]	; (1c4a8 <event_packet_process+0x64>)
   1c486:	4a09      	ldr	r2, [pc, #36]	; (1c4ac <event_packet_process+0x68>)
   1c488:	1a9b      	subs	r3, r3, r2
   1c48a:	08db      	lsrs	r3, r3, #3
		BT_ERR("No event buffer available");
   1c48c:	f04f 0100 	mov.w	r1, #0
   1c490:	2201      	movs	r2, #1
   1c492:	f362 0102 	bfi	r1, r2, #0, #3
   1c496:	f36f 01c5 	bfc	r1, #3, #3
   1c49a:	f363 118f 	bfi	r1, r3, #6, #10
   1c49e:	4804      	ldr	r0, [pc, #16]	; (1c4b0 <event_packet_process+0x6c>)
   1c4a0:	f7f5 fa88 	bl	119b4 <log_0>
		return;
   1c4a4:	e7e6      	b.n	1c474 <event_packet_process+0x30>
   1c4a6:	bf00      	nop
   1c4a8:	00029e28 	.word	0x00029e28
   1c4ac:	00029d70 	.word	0x00029d70
   1c4b0:	0002cf08 	.word	0x0002cf08

0001c4b4 <data_packet_process>:
{
   1c4b4:	b538      	push	{r3, r4, r5, lr}
   1c4b6:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1c4b8:	f04f 32ff 	mov.w	r2, #4294967295
   1c4bc:	f04f 33ff 	mov.w	r3, #4294967295
   1c4c0:	2003      	movs	r0, #3
   1c4c2:	f7f7 ff51 	bl	14368 <bt_buf_get_rx>
	if (!data_buf) {
   1c4c6:	b150      	cbz	r0, 1c4de <data_packet_process+0x2a>
   1c4c8:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1c4ca:	8862      	ldrh	r2, [r4, #2]
   1c4cc:	3204      	adds	r2, #4
   1c4ce:	4621      	mov	r1, r4
   1c4d0:	3008      	adds	r0, #8
   1c4d2:	f00c f970 	bl	287b6 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1c4d6:	4628      	mov	r0, r5
   1c4d8:	f7f9 fc60 	bl	15d9c <bt_recv>
}
   1c4dc:	bd38      	pop	{r3, r4, r5, pc}
   1c4de:	4b08      	ldr	r3, [pc, #32]	; (1c500 <data_packet_process+0x4c>)
   1c4e0:	4a08      	ldr	r2, [pc, #32]	; (1c504 <data_packet_process+0x50>)
   1c4e2:	1a9b      	subs	r3, r3, r2
   1c4e4:	08db      	lsrs	r3, r3, #3
		BT_ERR("No data buffer available");
   1c4e6:	f04f 0100 	mov.w	r1, #0
   1c4ea:	2201      	movs	r2, #1
   1c4ec:	f362 0102 	bfi	r1, r2, #0, #3
   1c4f0:	f36f 01c5 	bfc	r1, #3, #3
   1c4f4:	f363 118f 	bfi	r1, r3, #6, #10
   1c4f8:	4803      	ldr	r0, [pc, #12]	; (1c508 <data_packet_process+0x54>)
   1c4fa:	f7f5 fa5b 	bl	119b4 <log_0>
		return;
   1c4fe:	e7ed      	b.n	1c4dc <data_packet_process+0x28>
   1c500:	00029e28 	.word	0x00029e28
   1c504:	00029d70 	.word	0x00029d70
   1c508:	0002cf24 	.word	0x0002cf24

0001c50c <recv_thread>:
{
   1c50c:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   1c50e:	2500      	movs	r5, #0
	bool received_evt = false;
   1c510:	462c      	mov	r4, r5
   1c512:	e00a      	b.n	1c52a <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   1c514:	4d0b      	ldr	r5, [pc, #44]	; (1c544 <recv_thread+0x38>)
   1c516:	4628      	mov	r0, r5
   1c518:	f00c fcaf 	bl	28e7a <fetch_and_process_hci_evt>
   1c51c:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   1c51e:	4628      	mov	r0, r5
   1c520:	f00c fcc4 	bl	28eac <fetch_and_process_acl_data>
   1c524:	4605      	mov	r5, r0
	z_impl_k_yield();
   1c526:	f004 fde7 	bl	210f8 <z_impl_k_yield>
		if (!received_evt && !received_data) {
   1c52a:	2c00      	cmp	r4, #0
   1c52c:	d1f2      	bne.n	1c514 <recv_thread+0x8>
   1c52e:	2d00      	cmp	r5, #0
   1c530:	d1f0      	bne.n	1c514 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1c532:	f04f 32ff 	mov.w	r2, #4294967295
   1c536:	f04f 33ff 	mov.w	r3, #4294967295
   1c53a:	4803      	ldr	r0, [pc, #12]	; (1c548 <recv_thread+0x3c>)
   1c53c:	f002 fea8 	bl	1f290 <z_impl_k_sem_take>
   1c540:	e7e8      	b.n	1c514 <recv_thread+0x8>
   1c542:	bf00      	nop
   1c544:	20002708 	.word	0x20002708
   1c548:	200007c4 	.word	0x200007c4

0001c54c <configure_memory_usage>:
{
   1c54c:	b500      	push	{lr}
   1c54e:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   1c550:	2000      	movs	r0, #0
   1c552:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c556:	aa01      	add	r2, sp, #4
   1c558:	2101      	movs	r1, #1
   1c55a:	f7e7 faf1 	bl	3b40 <sdc_cfg_set>
	if (required_memory < 0) {
   1c55e:	2800      	cmp	r0, #0
   1c560:	db3c      	blt.n	1c5dc <configure_memory_usage+0x90>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1c562:	2301      	movs	r3, #1
   1c564:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c568:	aa01      	add	r2, sp, #4
   1c56a:	2102      	movs	r1, #2
   1c56c:	2000      	movs	r0, #0
   1c56e:	f7e7 fae7 	bl	3b40 <sdc_cfg_set>
	if (required_memory < 0) {
   1c572:	2800      	cmp	r0, #0
   1c574:	db32      	blt.n	1c5dc <configure_memory_usage+0x90>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   1c576:	231b      	movs	r3, #27
   1c578:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1c57c:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   1c580:	2302      	movs	r3, #2
   1c582:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   1c586:	2103      	movs	r1, #3
   1c588:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c58c:	aa01      	add	r2, sp, #4
   1c58e:	2000      	movs	r0, #0
   1c590:	f7e7 fad6 	bl	3b40 <sdc_cfg_set>
	if (required_memory < 0) {
   1c594:	2800      	cmp	r0, #0
   1c596:	db21      	blt.n	1c5dc <configure_memory_usage+0x90>
	cfg.event_length.event_length_us =
   1c598:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1c59c:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c59e:	aa01      	add	r2, sp, #4
   1c5a0:	2104      	movs	r1, #4
   1c5a2:	2000      	movs	r0, #0
   1c5a4:	f7e7 facc 	bl	3b40 <sdc_cfg_set>
	if (required_memory < 0) {
   1c5a8:	2800      	cmp	r0, #0
   1c5aa:	db17      	blt.n	1c5dc <configure_memory_usage+0x90>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1c5ac:	2301      	movs	r3, #1
   1c5ae:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c5b2:	aa01      	add	r2, sp, #4
   1c5b4:	2105      	movs	r1, #5
   1c5b6:	2000      	movs	r0, #0
   1c5b8:	f7e7 fac2 	bl	3b40 <sdc_cfg_set>
	if (required_memory < 0) {
   1c5bc:	2800      	cmp	r0, #0
   1c5be:	db0d      	blt.n	1c5dc <configure_memory_usage+0x90>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1c5c0:	231f      	movs	r3, #31
   1c5c2:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c5c6:	aa01      	add	r2, sp, #4
   1c5c8:	2107      	movs	r1, #7
   1c5ca:	2000      	movs	r0, #0
   1c5cc:	f7e7 fab8 	bl	3b40 <sdc_cfg_set>
		if (required_memory < 0) {
   1c5d0:	2800      	cmp	r0, #0
   1c5d2:	db03      	blt.n	1c5dc <configure_memory_usage+0x90>
	if (required_memory > sizeof(sdc_mempool)) {
   1c5d4:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   1c5d8:	d803      	bhi.n	1c5e2 <configure_memory_usage+0x96>
	return 0;
   1c5da:	2000      	movs	r0, #0
}
   1c5dc:	b003      	add	sp, #12
   1c5de:	f85d fb04 	ldr.w	pc, [sp], #4
   1c5e2:	4a0e      	ldr	r2, [pc, #56]	; (1c61c <configure_memory_usage+0xd0>)
   1c5e4:	4b0e      	ldr	r3, [pc, #56]	; (1c620 <configure_memory_usage+0xd4>)
   1c5e6:	1ad2      	subs	r2, r2, r3
   1c5e8:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Allocated memory too low: %u < %u",
   1c5ea:	f04f 0300 	mov.w	r3, #0
   1c5ee:	2101      	movs	r1, #1
   1c5f0:	f361 0302 	bfi	r3, r1, #0, #3
   1c5f4:	f36f 03c5 	bfc	r3, #3, #3
   1c5f8:	f362 138f 	bfi	r3, r2, #6, #10
   1c5fc:	4602      	mov	r2, r0
   1c5fe:	f44f 61af 	mov.w	r1, #1400	; 0x578
   1c602:	4808      	ldr	r0, [pc, #32]	; (1c624 <configure_memory_usage+0xd8>)
   1c604:	f7f5 fa3c 	bl	11a80 <log_2>
		k_panic();
   1c608:	4040      	eors	r0, r0
   1c60a:	f380 8811 	msr	BASEPRI, r0
   1c60e:	f04f 0004 	mov.w	r0, #4
   1c612:	df02      	svc	2
		return -ENOMEM;
   1c614:	f06f 000b 	mvn.w	r0, #11
   1c618:	e7e0      	b.n	1c5dc <configure_memory_usage+0x90>
   1c61a:	bf00      	nop
   1c61c:	00029e28 	.word	0x00029e28
   1c620:	00029d70 	.word	0x00029d70
   1c624:	0002cf40 	.word	0x0002cf40

0001c628 <hci_driver_open>:
{
   1c628:	b530      	push	{r4, r5, lr}
   1c62a:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c62c:	4d41      	ldr	r5, [pc, #260]	; (1c734 <hci_driver_open+0x10c>)
   1c62e:	2200      	movs	r2, #0
   1c630:	2300      	movs	r3, #0
   1c632:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c636:	2400      	movs	r4, #0
   1c638:	9404      	str	r4, [sp, #16]
   1c63a:	f06f 0309 	mvn.w	r3, #9
   1c63e:	9303      	str	r3, [sp, #12]
   1c640:	9402      	str	r4, [sp, #8]
   1c642:	9401      	str	r4, [sp, #4]
   1c644:	9400      	str	r4, [sp, #0]
   1c646:	4b3c      	ldr	r3, [pc, #240]	; (1c738 <hci_driver_open+0x110>)
   1c648:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1c64c:	493b      	ldr	r1, [pc, #236]	; (1c73c <hci_driver_open+0x114>)
   1c64e:	4628      	mov	r0, r5
   1c650:	f002 f958 	bl	1e904 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1c654:	493a      	ldr	r1, [pc, #232]	; (1c740 <hci_driver_open+0x118>)
   1c656:	4628      	mov	r0, r5
   1c658:	f001 ffe8 	bl	1e62c <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1c65c:	a80b      	add	r0, sp, #44	; 0x2c
   1c65e:	f7e7 fa61 	bl	3b24 <sdc_build_revision_get>
   1c662:	4a38      	ldr	r2, [pc, #224]	; (1c744 <hci_driver_open+0x11c>)
   1c664:	4b38      	ldr	r3, [pc, #224]	; (1c748 <hci_driver_open+0x120>)
   1c666:	1ad2      	subs	r2, r2, r3
   1c668:	08d2      	lsrs	r2, r2, #3
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1c66a:	f04f 0300 	mov.w	r3, #0
   1c66e:	2103      	movs	r1, #3
   1c670:	f361 0302 	bfi	r3, r1, #0, #3
   1c674:	f364 03c5 	bfi	r3, r4, #3, #3
   1c678:	f362 138f 	bfi	r3, r2, #6, #10
   1c67c:	2214      	movs	r2, #20
   1c67e:	a90b      	add	r1, sp, #44	; 0x2c
   1c680:	4832      	ldr	r0, [pc, #200]	; (1c74c <hci_driver_open+0x124>)
   1c682:	f7f5 fa39 	bl	11af8 <log_hexdump>
	err = configure_supported_features();
   1c686:	f00c fc2a 	bl	28ede <configure_supported_features>
	if (err) {
   1c68a:	4604      	mov	r4, r0
   1c68c:	b110      	cbz	r0, 1c694 <hci_driver_open+0x6c>
}
   1c68e:	4620      	mov	r0, r4
   1c690:	b011      	add	sp, #68	; 0x44
   1c692:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   1c694:	f7ff ff5a 	bl	1c54c <configure_memory_usage>
	if (err) {
   1c698:	4604      	mov	r4, r0
   1c69a:	2800      	cmp	r0, #0
   1c69c:	d1f7      	bne.n	1c68e <hci_driver_open+0x66>
   1c69e:	482c      	ldr	r0, [pc, #176]	; (1c750 <hci_driver_open+0x128>)
   1c6a0:	f001 fb9e 	bl	1dde0 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1c6a4:	4b2b      	ldr	r3, [pc, #172]	; (1c754 <hci_driver_open+0x12c>)
   1c6a6:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1c6a8:	b1a8      	cbz	r0, 1c6d6 <hci_driver_open+0xae>
	sdc_rand_source_t rand_functions = {
   1c6aa:	4a2b      	ldr	r2, [pc, #172]	; (1c758 <hci_driver_open+0x130>)
   1c6ac:	ab08      	add	r3, sp, #32
   1c6ae:	ca07      	ldmia	r2, {r0, r1, r2}
   1c6b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1c6b4:	4618      	mov	r0, r3
   1c6b6:	f7e7 fbc9 	bl	3e4c <sdc_rand_source_register>
	if (err) {
   1c6ba:	4604      	mov	r4, r0
   1c6bc:	b9f0      	cbnz	r0, 1c6fc <hci_driver_open+0xd4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1c6be:	f04f 30ff 	mov.w	r0, #4294967295
   1c6c2:	f04f 31ff 	mov.w	r1, #4294967295
   1c6c6:	f7ff fd85 	bl	1c1d4 <multithreading_lock_acquire>
	if (!err) {
   1c6ca:	4605      	mov	r5, r0
   1c6cc:	b350      	cbz	r0, 1c724 <hci_driver_open+0xfc>
	if (err < 0) {
   1c6ce:	2d00      	cmp	r5, #0
   1c6d0:	dadd      	bge.n	1c68e <hci_driver_open+0x66>
		return err;
   1c6d2:	462c      	mov	r4, r5
   1c6d4:	e7db      	b.n	1c68e <hci_driver_open+0x66>
   1c6d6:	4b1b      	ldr	r3, [pc, #108]	; (1c744 <hci_driver_open+0x11c>)
   1c6d8:	4a1b      	ldr	r2, [pc, #108]	; (1c748 <hci_driver_open+0x120>)
   1c6da:	1a9b      	subs	r3, r3, r2
   1c6dc:	08db      	lsrs	r3, r3, #3
		BT_ERR("An entropy source is required");
   1c6de:	f04f 0100 	mov.w	r1, #0
   1c6e2:	2201      	movs	r2, #1
   1c6e4:	f362 0102 	bfi	r1, r2, #0, #3
   1c6e8:	f36f 01c5 	bfc	r1, #3, #3
   1c6ec:	f363 118f 	bfi	r1, r3, #6, #10
   1c6f0:	481a      	ldr	r0, [pc, #104]	; (1c75c <hci_driver_open+0x134>)
   1c6f2:	f7f5 f95f 	bl	119b4 <log_0>
		return -ENODEV;
   1c6f6:	f06f 0412 	mvn.w	r4, #18
   1c6fa:	e7c8      	b.n	1c68e <hci_driver_open+0x66>
   1c6fc:	4b11      	ldr	r3, [pc, #68]	; (1c744 <hci_driver_open+0x11c>)
   1c6fe:	4a12      	ldr	r2, [pc, #72]	; (1c748 <hci_driver_open+0x120>)
   1c700:	1a9b      	subs	r3, r3, r2
   1c702:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to register rand source (%d)", err);
   1c704:	f04f 0200 	mov.w	r2, #0
   1c708:	2101      	movs	r1, #1
   1c70a:	f361 0202 	bfi	r2, r1, #0, #3
   1c70e:	f36f 02c5 	bfc	r2, #3, #3
   1c712:	f363 128f 	bfi	r2, r3, #6, #10
   1c716:	4601      	mov	r1, r0
   1c718:	4811      	ldr	r0, [pc, #68]	; (1c760 <hci_driver_open+0x138>)
   1c71a:	f7f5 f97b 	bl	11a14 <log_1>
		return -EINVAL;
   1c71e:	f06f 0415 	mvn.w	r4, #21
   1c722:	e7b4      	b.n	1c68e <hci_driver_open+0x66>
		err = sdc_enable(host_signal, sdc_mempool);
   1c724:	490f      	ldr	r1, [pc, #60]	; (1c764 <hci_driver_open+0x13c>)
   1c726:	4810      	ldr	r0, [pc, #64]	; (1c768 <hci_driver_open+0x140>)
   1c728:	f7e7 fa66 	bl	3bf8 <sdc_enable>
   1c72c:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1c72e:	f7ff fd5b 	bl	1c1e8 <multithreading_lock_release>
   1c732:	e7cc      	b.n	1c6ce <hci_driver_open+0xa6>
   1c734:	20001b40 	.word	0x20001b40
   1c738:	0001c50d 	.word	0x0001c50d
   1c73c:	20004680 	.word	0x20004680
   1c740:	0002cf64 	.word	0x0002cf64
   1c744:	00029e28 	.word	0x00029e28
   1c748:	00029d70 	.word	0x00029d70
   1c74c:	0002cf6c 	.word	0x0002cf6c
   1c750:	0002ccac 	.word	0x0002ccac
   1c754:	20002704 	.word	0x20002704
   1c758:	00029f20 	.word	0x00029f20
   1c75c:	0002cf94 	.word	0x0002cf94
   1c760:	0002cfb4 	.word	0x0002cfb4
   1c764:	20002750 	.word	0x20002750
   1c768:	0001c279 	.word	0x0001c279

0001c76c <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1c76c:	4b0b      	ldr	r3, [pc, #44]	; (1c79c <hci_internal_cmd_put+0x30>)
   1c76e:	781b      	ldrb	r3, [r3, #0]
   1c770:	b96b      	cbnz	r3, 1c78e <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   1c772:	7883      	ldrb	r3, [r0, #2]
   1c774:	3303      	adds	r3, #3
   1c776:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1c77a:	dc0b      	bgt.n	1c794 <hci_internal_cmd_put+0x28>
{
   1c77c:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1c77e:	4c07      	ldr	r4, [pc, #28]	; (1c79c <hci_internal_cmd_put+0x30>)
   1c780:	1c61      	adds	r1, r4, #1
   1c782:	f00c fe87 	bl	29494 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1c786:	2301      	movs	r3, #1
   1c788:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1c78a:	2000      	movs	r0, #0
}
   1c78c:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   1c78e:	f04f 30ff 	mov.w	r0, #4294967295
   1c792:	4770      	bx	lr
		return -EINVAL;
   1c794:	f06f 0015 	mvn.w	r0, #21
}
   1c798:	4770      	bx	lr
   1c79a:	bf00      	nop
   1c79c:	20002cc8 	.word	0x20002cc8

0001c7a0 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1c7a0:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1c7a2:	4b07      	ldr	r3, [pc, #28]	; (1c7c0 <hci_internal_evt_get+0x20>)
   1c7a4:	781b      	ldrb	r3, [r3, #0]
   1c7a6:	b913      	cbnz	r3, 1c7ae <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   1c7a8:	f7ef fcb3 	bl	c112 <sdc_hci_evt_get>
}
   1c7ac:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1c7ae:	4c04      	ldr	r4, [pc, #16]	; (1c7c0 <hci_internal_evt_get+0x20>)
   1c7b0:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1c7b2:	3202      	adds	r2, #2
   1c7b4:	1c61      	adds	r1, r4, #1
   1c7b6:	f00a f81f 	bl	267f8 <memcpy>
		cmd_complete_or_status.occurred = false;
   1c7ba:	2000      	movs	r0, #0
   1c7bc:	7020      	strb	r0, [r4, #0]
		return 0;
   1c7be:	e7f5      	b.n	1c7ac <hci_internal_evt_get+0xc>
   1c7c0:	20002cc8 	.word	0x20002cc8

0001c7c4 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1c7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7c8:	4607      	mov	r7, r0
   1c7ca:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   1c7cc:	4b14      	ldr	r3, [pc, #80]	; (1c820 <bt_rand+0x5c>)
   1c7ce:	681b      	ldr	r3, [r3, #0]
   1c7d0:	b163      	cbz	r3, 1c7ec <bt_rand+0x28>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1c7d2:	4b13      	ldr	r3, [pc, #76]	; (1c820 <bt_rand+0x5c>)
   1c7d4:	681d      	ldr	r5, [r3, #0]
   1c7d6:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   1c7d8:	68ae      	ldr	r6, [r5, #8]
	__ASSERT(api->get_entropy != NULL,
   1c7da:	6833      	ldr	r3, [r6, #0]
   1c7dc:	b183      	cbz	r3, 1c800 <bt_rand+0x3c>
	return api->get_entropy(dev, buffer, length);
   1c7de:	6833      	ldr	r3, [r6, #0]
   1c7e0:	4622      	mov	r2, r4
   1c7e2:	4639      	mov	r1, r7
   1c7e4:	4628      	mov	r0, r5
   1c7e6:	4798      	blx	r3
}
   1c7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c7ec:	480d      	ldr	r0, [pc, #52]	; (1c824 <bt_rand+0x60>)
   1c7ee:	f001 faf7 	bl	1dde0 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1c7f2:	4b0b      	ldr	r3, [pc, #44]	; (1c820 <bt_rand+0x5c>)
   1c7f4:	6018      	str	r0, [r3, #0]
		if (!dev) {
   1c7f6:	2800      	cmp	r0, #0
   1c7f8:	d1eb      	bne.n	1c7d2 <bt_rand+0xe>
			return -ENODEV;
   1c7fa:	f06f 0012 	mvn.w	r0, #18
   1c7fe:	e7f3      	b.n	1c7e8 <bt_rand+0x24>
	__ASSERT(api->get_entropy != NULL,
   1c800:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1c834 <bt_rand+0x70>
   1c804:	234b      	movs	r3, #75	; 0x4b
   1c806:	4642      	mov	r2, r8
   1c808:	4907      	ldr	r1, [pc, #28]	; (1c828 <bt_rand+0x64>)
   1c80a:	4808      	ldr	r0, [pc, #32]	; (1c82c <bt_rand+0x68>)
   1c80c:	f009 f80f 	bl	2582e <printk>
   1c810:	4807      	ldr	r0, [pc, #28]	; (1c830 <bt_rand+0x6c>)
   1c812:	f009 f80c 	bl	2582e <printk>
   1c816:	214b      	movs	r1, #75	; 0x4b
   1c818:	4640      	mov	r0, r8
   1c81a:	f009 fa8a 	bl	25d32 <assert_post_action>
   1c81e:	e7de      	b.n	1c7de <bt_rand+0x1a>
   1c820:	20002d10 	.word	0x20002d10
   1c824:	0002ccac 	.word	0x0002ccac
   1c828:	0002cdb4 	.word	0x0002cdb4
   1c82c:	00029ff8 	.word	0x00029ff8
   1c830:	0002cdd4 	.word	0x0002cdd4
   1c834:	0002cd84 	.word	0x0002cd84

0001c838 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1c838:	b510      	push	{r4, lr}
   1c83a:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   1c83c:	f00c fe81 	bl	29542 <m_config_clock_source_get>
   1c840:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1c844:	2332      	movs	r3, #50	; 0x32
   1c846:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1c84a:	2300      	movs	r3, #0
   1c84c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   1c850:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   1c854:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1c858:	4a0c      	ldr	r2, [pc, #48]	; (1c88c <mpsl_lib_init+0x54>)
   1c85a:	2119      	movs	r1, #25
   1c85c:	4668      	mov	r0, sp
   1c85e:	f7e6 ffb7 	bl	37d0 <mpsl_init>
	if (err) {
   1c862:	4604      	mov	r4, r0
   1c864:	b110      	cbz	r0, 1c86c <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1c866:	4620      	mov	r0, r4
   1c868:	b002      	add	sp, #8
   1c86a:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1c86c:	2201      	movs	r2, #1
   1c86e:	2100      	movs	r1, #0
   1c870:	2008      	movs	r0, #8
   1c872:	f7f6 fcfb 	bl	1326c <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1c876:	2201      	movs	r2, #1
   1c878:	2100      	movs	r1, #0
   1c87a:	200b      	movs	r0, #11
   1c87c:	f7f6 fcf6 	bl	1326c <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1c880:	2201      	movs	r2, #1
   1c882:	2100      	movs	r1, #0
   1c884:	4610      	mov	r0, r2
   1c886:	f7f6 fcf1 	bl	1326c <z_arm_irq_priority_set>
	return 0;
   1c88a:	e7ec      	b.n	1c866 <mpsl_lib_init+0x2e>
   1c88c:	0001c891 	.word	0x0001c891

0001c890 <m_assert_handler>:
{
   1c890:	b538      	push	{r3, r4, r5, lr}
   1c892:	460d      	mov	r5, r1
   1c894:	4b0d      	ldr	r3, [pc, #52]	; (1c8cc <m_assert_handler+0x3c>)
   1c896:	4a0e      	ldr	r2, [pc, #56]	; (1c8d0 <m_assert_handler+0x40>)
   1c898:	1a9b      	subs	r3, r3, r2
   1c89a:	08db      	lsrs	r3, r3, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1c89c:	f04f 0400 	mov.w	r4, #0
   1c8a0:	2201      	movs	r2, #1
   1c8a2:	f362 0402 	bfi	r4, r2, #0, #3
   1c8a6:	f36f 04c5 	bfc	r4, #3, #3
   1c8aa:	f363 148f 	bfi	r4, r3, #6, #10
   1c8ae:	f7f4 ff0f 	bl	116d0 <z_log_strdup>
   1c8b2:	4601      	mov	r1, r0
   1c8b4:	4623      	mov	r3, r4
   1c8b6:	462a      	mov	r2, r5
   1c8b8:	4806      	ldr	r0, [pc, #24]	; (1c8d4 <m_assert_handler+0x44>)
   1c8ba:	f7f5 f8e1 	bl	11a80 <log_2>
	k_oops();
   1c8be:	4040      	eors	r0, r0
   1c8c0:	f380 8811 	msr	BASEPRI, r0
   1c8c4:	f04f 0003 	mov.w	r0, #3
   1c8c8:	df02      	svc	2
}
   1c8ca:	bd38      	pop	{r3, r4, r5, pc}
   1c8cc:	00029df0 	.word	0x00029df0
   1c8d0:	00029d70 	.word	0x00029d70
   1c8d4:	0002d034 	.word	0x0002d034

0001c8d8 <signal_thread>:
{
   1c8d8:	b538      	push	{r3, r4, r5, lr}
   1c8da:	e003      	b.n	1c8e4 <signal_thread+0xc>
		mpsl_low_priority_process();
   1c8dc:	f7ee ffc5 	bl	b86a <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1c8e0:	f7ff fc82 	bl	1c1e8 <multithreading_lock_release>
		k_sem_take(&sem_signal, K_FOREVER);
   1c8e4:	f04f 34ff 	mov.w	r4, #4294967295
   1c8e8:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   1c8ec:	4622      	mov	r2, r4
   1c8ee:	462b      	mov	r3, r5
   1c8f0:	480a      	ldr	r0, [pc, #40]	; (1c91c <signal_thread+0x44>)
   1c8f2:	f002 fccd 	bl	1f290 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c8f6:	4620      	mov	r0, r4
   1c8f8:	4629      	mov	r1, r5
   1c8fa:	f7ff fc6b 	bl	1c1d4 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   1c8fe:	2800      	cmp	r0, #0
   1c900:	d0ec      	beq.n	1c8dc <signal_thread+0x4>
   1c902:	4c07      	ldr	r4, [pc, #28]	; (1c920 <signal_thread+0x48>)
   1c904:	2346      	movs	r3, #70	; 0x46
   1c906:	4622      	mov	r2, r4
   1c908:	4906      	ldr	r1, [pc, #24]	; (1c924 <signal_thread+0x4c>)
   1c90a:	4807      	ldr	r0, [pc, #28]	; (1c928 <signal_thread+0x50>)
   1c90c:	f008 ff8f 	bl	2582e <printk>
   1c910:	2146      	movs	r1, #70	; 0x46
   1c912:	4620      	mov	r0, r4
   1c914:	f009 fa0d 	bl	25d32 <assert_post_action>
   1c918:	e7e0      	b.n	1c8dc <signal_thread+0x4>
   1c91a:	bf00      	nop
   1c91c:	200007dc 	.word	0x200007dc
   1c920:	0002d048 	.word	0x0002d048
   1c924:	0002d078 	.word	0x0002d078
   1c928:	00029ff8 	.word	0x00029ff8

0001c92c <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1c92c:	b530      	push	{r4, r5, lr}
   1c92e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c930:	4d0f      	ldr	r5, [pc, #60]	; (1c970 <mpsl_signal_thread_init+0x44>)
   1c932:	2200      	movs	r2, #0
   1c934:	2300      	movs	r3, #0
   1c936:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c93a:	2400      	movs	r4, #0
   1c93c:	9404      	str	r4, [sp, #16]
   1c93e:	f06f 0309 	mvn.w	r3, #9
   1c942:	9303      	str	r3, [sp, #12]
   1c944:	9402      	str	r4, [sp, #8]
   1c946:	9401      	str	r4, [sp, #4]
   1c948:	9400      	str	r4, [sp, #0]
   1c94a:	4b0a      	ldr	r3, [pc, #40]	; (1c974 <mpsl_signal_thread_init+0x48>)
   1c94c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1c950:	4909      	ldr	r1, [pc, #36]	; (1c978 <mpsl_signal_thread_init+0x4c>)
   1c952:	4628      	mov	r0, r5
   1c954:	f001 ffd6 	bl	1e904 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1c958:	4908      	ldr	r1, [pc, #32]	; (1c97c <mpsl_signal_thread_init+0x50>)
   1c95a:	4628      	mov	r0, r5
   1c95c:	f001 fe66 	bl	1e62c <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1c960:	4622      	mov	r2, r4
   1c962:	2104      	movs	r1, #4
   1c964:	2019      	movs	r0, #25
   1c966:	f7f6 fc81 	bl	1326c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1c96a:	4620      	mov	r0, r4
   1c96c:	b009      	add	sp, #36	; 0x24
   1c96e:	bd30      	pop	{r4, r5, pc}
   1c970:	20001bf8 	.word	0x20001bf8
   1c974:	0001c8d9 	.word	0x0001c8d9
   1c978:	20004aa0 	.word	0x20004aa0
   1c97c:	0002d088 	.word	0x0002d088

0001c980 <mpsl_low_prio_irq_handler>:
{
   1c980:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1c982:	4802      	ldr	r0, [pc, #8]	; (1c98c <mpsl_low_prio_irq_handler+0xc>)
   1c984:	f002 fc3c 	bl	1f200 <z_impl_k_sem_give>
}
   1c988:	bd08      	pop	{r3, pc}
   1c98a:	bf00      	nop
   1c98c:	200007dc 	.word	0x200007dc

0001c990 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   1c990:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1c992:	4b02      	ldr	r3, [pc, #8]	; (1c99c <mpsl_hfclk_callback+0xc>)
   1c994:	681b      	ldr	r3, [r3, #0]
   1c996:	2000      	movs	r0, #0
   1c998:	4798      	blx	r3
}
   1c99a:	bd08      	pop	{r3, pc}
   1c99c:	20002d14 	.word	0x20002d14

0001c9a0 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1c9a0:	b510      	push	{r4, lr}
	switch (domain) {
   1c9a2:	b128      	cbz	r0, 1c9b0 <nrfx_clock_start+0x10>
   1c9a4:	2801      	cmp	r0, #1
   1c9a6:	d108      	bne.n	1c9ba <nrfx_clock_start+0x1a>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1c9a8:	480b      	ldr	r0, [pc, #44]	; (1c9d8 <nrfx_clock_start+0x38>)
   1c9aa:	f7e6 fd5d 	bl	3468 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1c9ae:	bd10      	pop	{r4, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1c9b0:	4b0a      	ldr	r3, [pc, #40]	; (1c9dc <nrfx_clock_start+0x3c>)
   1c9b2:	681b      	ldr	r3, [r3, #0]
   1c9b4:	2001      	movs	r0, #1
   1c9b6:	4798      	blx	r3
		break;
   1c9b8:	e7f9      	b.n	1c9ae <nrfx_clock_start+0xe>
		__ASSERT(0, "Not supported");
   1c9ba:	4c09      	ldr	r4, [pc, #36]	; (1c9e0 <nrfx_clock_start+0x40>)
   1c9bc:	231c      	movs	r3, #28
   1c9be:	4622      	mov	r2, r4
   1c9c0:	4908      	ldr	r1, [pc, #32]	; (1c9e4 <nrfx_clock_start+0x44>)
   1c9c2:	4809      	ldr	r0, [pc, #36]	; (1c9e8 <nrfx_clock_start+0x48>)
   1c9c4:	f008 ff33 	bl	2582e <printk>
   1c9c8:	4808      	ldr	r0, [pc, #32]	; (1c9ec <nrfx_clock_start+0x4c>)
   1c9ca:	f008 ff30 	bl	2582e <printk>
   1c9ce:	211c      	movs	r1, #28
   1c9d0:	4620      	mov	r0, r4
   1c9d2:	f009 f9ae 	bl	25d32 <assert_post_action>
}
   1c9d6:	e7ea      	b.n	1c9ae <nrfx_clock_start+0xe>
   1c9d8:	0001c991 	.word	0x0001c991
   1c9dc:	20002d14 	.word	0x20002d14
   1c9e0:	0002d0a0 	.word	0x0002d0a0
   1c9e4:	0002dc18 	.word	0x0002dc18
   1c9e8:	00029ff8 	.word	0x00029ff8
   1c9ec:	0002d0e0 	.word	0x0002d0e0

0001c9f0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
	switch (domain) {
   1c9f0:	b1a0      	cbz	r0, 1ca1c <nrfx_clock_stop+0x2c>
{
   1c9f2:	b510      	push	{r4, lr}
	switch (domain) {
   1c9f4:	2801      	cmp	r0, #1
   1c9f6:	d102      	bne.n	1c9fe <nrfx_clock_stop+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_release();
   1c9f8:	f7e6 fd28 	bl	344c <mpsl_clock_hfclk_release>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1c9fc:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Not supported");
   1c9fe:	4c08      	ldr	r4, [pc, #32]	; (1ca20 <nrfx_clock_stop+0x30>)
   1ca00:	232a      	movs	r3, #42	; 0x2a
   1ca02:	4622      	mov	r2, r4
   1ca04:	4907      	ldr	r1, [pc, #28]	; (1ca24 <nrfx_clock_stop+0x34>)
   1ca06:	4808      	ldr	r0, [pc, #32]	; (1ca28 <nrfx_clock_stop+0x38>)
   1ca08:	f008 ff11 	bl	2582e <printk>
   1ca0c:	4807      	ldr	r0, [pc, #28]	; (1ca2c <nrfx_clock_stop+0x3c>)
   1ca0e:	f008 ff0e 	bl	2582e <printk>
   1ca12:	212a      	movs	r1, #42	; 0x2a
   1ca14:	4620      	mov	r0, r4
   1ca16:	f009 f98c 	bl	25d32 <assert_post_action>
}
   1ca1a:	e7ef      	b.n	1c9fc <nrfx_clock_stop+0xc>
   1ca1c:	4770      	bx	lr
   1ca1e:	bf00      	nop
   1ca20:	0002d0a0 	.word	0x0002d0a0
   1ca24:	0002dc18 	.word	0x0002dc18
   1ca28:	00029ff8 	.word	0x00029ff8
   1ca2c:	0002d0e0 	.word	0x0002d0e0

0001ca30 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1ca30:	4b01      	ldr	r3, [pc, #4]	; (1ca38 <nrfx_clock_init+0x8>)
   1ca32:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1ca34:	4801      	ldr	r0, [pc, #4]	; (1ca3c <nrfx_clock_init+0xc>)
   1ca36:	4770      	bx	lr
   1ca38:	20002d14 	.word	0x20002d14
   1ca3c:	0bad0000 	.word	0x0bad0000

0001ca40 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ca40:	4b03      	ldr	r3, [pc, #12]	; (1ca50 <nrf52_errata_36+0x10>)
   1ca42:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1ca44:	2b08      	cmp	r3, #8
   1ca46:	d001      	beq.n	1ca4c <nrf52_errata_36+0xc>
        return false;
   1ca48:	2000      	movs	r0, #0
   1ca4a:	4770      	bx	lr
                        return true;
   1ca4c:	2001      	movs	r0, #1
}
   1ca4e:	4770      	bx	lr
   1ca50:	10000130 	.word	0x10000130

0001ca54 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ca54:	4b03      	ldr	r3, [pc, #12]	; (1ca64 <nrf52_errata_66+0x10>)
   1ca56:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1ca58:	2b08      	cmp	r3, #8
   1ca5a:	d001      	beq.n	1ca60 <nrf52_errata_66+0xc>
        return false;
   1ca5c:	2000      	movs	r0, #0
   1ca5e:	4770      	bx	lr
                        return true;
   1ca60:	2001      	movs	r0, #1
}
   1ca62:	4770      	bx	lr
   1ca64:	10000130 	.word	0x10000130

0001ca68 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ca68:	4b08      	ldr	r3, [pc, #32]	; (1ca8c <nrf52_errata_98+0x24>)
   1ca6a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ca6c:	3304      	adds	r3, #4
   1ca6e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1ca70:	2a08      	cmp	r2, #8
   1ca72:	d001      	beq.n	1ca78 <nrf52_errata_98+0x10>
        return false;
   1ca74:	2000      	movs	r0, #0
   1ca76:	4770      	bx	lr
                switch(var2)
   1ca78:	2b00      	cmp	r3, #0
   1ca7a:	d804      	bhi.n	1ca86 <nrf52_errata_98+0x1e>
   1ca7c:	e8df f003 	tbb	[pc, r3]
   1ca80:	01          	.byte	0x01
   1ca81:	00          	.byte	0x00
            if (var1 == 0x08)
   1ca82:	2001      	movs	r0, #1
   1ca84:	4770      	bx	lr
                        return false;
   1ca86:	2000      	movs	r0, #0
}
   1ca88:	4770      	bx	lr
   1ca8a:	bf00      	nop
   1ca8c:	10000130 	.word	0x10000130

0001ca90 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ca90:	4b08      	ldr	r3, [pc, #32]	; (1cab4 <nrf52_errata_103+0x24>)
   1ca92:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ca94:	3304      	adds	r3, #4
   1ca96:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1ca98:	2a08      	cmp	r2, #8
   1ca9a:	d001      	beq.n	1caa0 <nrf52_errata_103+0x10>
        return false;
   1ca9c:	2000      	movs	r0, #0
   1ca9e:	4770      	bx	lr
                switch(var2)
   1caa0:	2b00      	cmp	r3, #0
   1caa2:	d804      	bhi.n	1caae <nrf52_errata_103+0x1e>
   1caa4:	e8df f003 	tbb	[pc, r3]
   1caa8:	01          	.byte	0x01
   1caa9:	00          	.byte	0x00
            if (var1 == 0x08)
   1caaa:	2001      	movs	r0, #1
   1caac:	4770      	bx	lr
                        return false;
   1caae:	2000      	movs	r0, #0
}
   1cab0:	4770      	bx	lr
   1cab2:	bf00      	nop
   1cab4:	10000130 	.word	0x10000130

0001cab8 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1cab8:	4b08      	ldr	r3, [pc, #32]	; (1cadc <nrf52_errata_115+0x24>)
   1caba:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1cabc:	3304      	adds	r3, #4
   1cabe:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1cac0:	2a08      	cmp	r2, #8
   1cac2:	d001      	beq.n	1cac8 <nrf52_errata_115+0x10>
        return false;
   1cac4:	2000      	movs	r0, #0
   1cac6:	4770      	bx	lr
                switch(var2)
   1cac8:	2b00      	cmp	r3, #0
   1caca:	d804      	bhi.n	1cad6 <nrf52_errata_115+0x1e>
   1cacc:	e8df f003 	tbb	[pc, r3]
   1cad0:	01          	.byte	0x01
   1cad1:	00          	.byte	0x00
            if (var1 == 0x08)
   1cad2:	2001      	movs	r0, #1
   1cad4:	4770      	bx	lr
                        return false;
   1cad6:	2000      	movs	r0, #0
}
   1cad8:	4770      	bx	lr
   1cada:	bf00      	nop
   1cadc:	10000130 	.word	0x10000130

0001cae0 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1cae0:	4b08      	ldr	r3, [pc, #32]	; (1cb04 <nrf52_errata_120+0x24>)
   1cae2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1cae4:	3304      	adds	r3, #4
   1cae6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1cae8:	2a08      	cmp	r2, #8
   1caea:	d001      	beq.n	1caf0 <nrf52_errata_120+0x10>
        return false;
   1caec:	2000      	movs	r0, #0
   1caee:	4770      	bx	lr
                switch(var2)
   1caf0:	2b00      	cmp	r3, #0
   1caf2:	d804      	bhi.n	1cafe <nrf52_errata_120+0x1e>
   1caf4:	e8df f003 	tbb	[pc, r3]
   1caf8:	01          	.byte	0x01
   1caf9:	00          	.byte	0x00
            if (var1 == 0x08)
   1cafa:	2001      	movs	r0, #1
   1cafc:	4770      	bx	lr
                        return false;
   1cafe:	2000      	movs	r0, #0
}
   1cb00:	4770      	bx	lr
   1cb02:	bf00      	nop
   1cb04:	10000130 	.word	0x10000130

0001cb08 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1cb08:	4b03      	ldr	r3, [pc, #12]	; (1cb18 <nrf52_errata_136+0x10>)
   1cb0a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1cb0c:	2b08      	cmp	r3, #8
   1cb0e:	d001      	beq.n	1cb14 <nrf52_errata_136+0xc>
        return false;
   1cb10:	2000      	movs	r0, #0
   1cb12:	4770      	bx	lr
                        return true;
   1cb14:	2001      	movs	r0, #1
}
   1cb16:	4770      	bx	lr
   1cb18:	10000130 	.word	0x10000130

0001cb1c <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1cb1c:	4b06      	ldr	r3, [pc, #24]	; (1cb38 <nrf52_configuration_249+0x1c>)
   1cb1e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1cb20:	4a06      	ldr	r2, [pc, #24]	; (1cb3c <nrf52_configuration_249+0x20>)
   1cb22:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1cb24:	2b08      	cmp	r3, #8
   1cb26:	d001      	beq.n	1cb2c <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1cb28:	2000      	movs	r0, #0
   1cb2a:	4770      	bx	lr
                switch(var2)
   1cb2c:	2a04      	cmp	r2, #4
   1cb2e:	d801      	bhi.n	1cb34 <nrf52_configuration_249+0x18>
   1cb30:	2000      	movs	r0, #0
   1cb32:	4770      	bx	lr
                        return true;
   1cb34:	2001      	movs	r0, #1
    #endif
}
   1cb36:	4770      	bx	lr
   1cb38:	10000130 	.word	0x10000130
   1cb3c:	10000134 	.word	0x10000134

0001cb40 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1cb40:	4b02      	ldr	r3, [pc, #8]	; (1cb4c <nvmc_wait+0xc>)
   1cb42:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1cb46:	2b00      	cmp	r3, #0
   1cb48:	d0fa      	beq.n	1cb40 <nvmc_wait>
}
   1cb4a:	4770      	bx	lr
   1cb4c:	4001e000 	.word	0x4001e000

0001cb50 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   1cb50:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1cb52:	4b03      	ldr	r3, [pc, #12]	; (1cb60 <nvmc_config+0x10>)
   1cb54:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   1cb58:	f7ff fff2 	bl	1cb40 <nvmc_wait>
}
   1cb5c:	bd08      	pop	{r3, pc}
   1cb5e:	bf00      	nop
   1cb60:	4001e000 	.word	0x4001e000

0001cb64 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1cb64:	4b01      	ldr	r3, [pc, #4]	; (1cb6c <SystemCoreClockUpdate+0x8>)
   1cb66:	4a02      	ldr	r2, [pc, #8]	; (1cb70 <SystemCoreClockUpdate+0xc>)
   1cb68:	601a      	str	r2, [r3, #0]
}
   1cb6a:	4770      	bx	lr
   1cb6c:	200005b0 	.word	0x200005b0
   1cb70:	03d09000 	.word	0x03d09000

0001cb74 <SystemInit>:

void SystemInit(void)
{
   1cb74:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1cb76:	f7ff ff63 	bl	1ca40 <nrf52_errata_36>
   1cb7a:	b140      	cbz	r0, 1cb8e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1cb7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cb80:	2200      	movs	r2, #0
   1cb82:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1cb86:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1cb8a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1cb8e:	f7ff ff61 	bl	1ca54 <nrf52_errata_66>
   1cb92:	2800      	cmp	r0, #0
   1cb94:	d046      	beq.n	1cc24 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1cb96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1cb9a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1cb9e:	4b56      	ldr	r3, [pc, #344]	; (1ccf8 <SystemInit+0x184>)
   1cba0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1cba4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1cba8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1cbac:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1cbb0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1cbb4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1cbb8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1cbbc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1cbc0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1cbc4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1cbc8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1cbcc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1cbd0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1cbd4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1cbd8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1cbdc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1cbe0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1cbe4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1cbe8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1cbec:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1cbf0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1cbf4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1cbf8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1cbfc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1cc00:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1cc04:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1cc08:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1cc0c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1cc10:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1cc14:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1cc18:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1cc1c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1cc20:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1cc24:	f7ff ff20 	bl	1ca68 <nrf52_errata_98>
   1cc28:	b110      	cbz	r0, 1cc30 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1cc2a:	4b34      	ldr	r3, [pc, #208]	; (1ccfc <SystemInit+0x188>)
   1cc2c:	4a34      	ldr	r2, [pc, #208]	; (1cd00 <SystemInit+0x18c>)
   1cc2e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1cc30:	f7ff ff2e 	bl	1ca90 <nrf52_errata_103>
   1cc34:	b118      	cbz	r0, 1cc3e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1cc36:	4b33      	ldr	r3, [pc, #204]	; (1cd04 <SystemInit+0x190>)
   1cc38:	22fb      	movs	r2, #251	; 0xfb
   1cc3a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1cc3e:	f7ff ff3b 	bl	1cab8 <nrf52_errata_115>
   1cc42:	b148      	cbz	r0, 1cc58 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1cc44:	4930      	ldr	r1, [pc, #192]	; (1cd08 <SystemInit+0x194>)
   1cc46:	680b      	ldr	r3, [r1, #0]
   1cc48:	f023 030f 	bic.w	r3, r3, #15
   1cc4c:	4a2f      	ldr	r2, [pc, #188]	; (1cd0c <SystemInit+0x198>)
   1cc4e:	6812      	ldr	r2, [r2, #0]
   1cc50:	f002 020f 	and.w	r2, r2, #15
   1cc54:	4313      	orrs	r3, r2
   1cc56:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1cc58:	f7ff ff42 	bl	1cae0 <nrf52_errata_120>
   1cc5c:	b118      	cbz	r0, 1cc66 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1cc5e:	4b2c      	ldr	r3, [pc, #176]	; (1cd10 <SystemInit+0x19c>)
   1cc60:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cc64:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1cc66:	f7ff ff4f 	bl	1cb08 <nrf52_errata_136>
   1cc6a:	b160      	cbz	r0, 1cc86 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1cc6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cc70:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1cc74:	f013 0f01 	tst.w	r3, #1
   1cc78:	d005      	beq.n	1cc86 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1cc7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cc7e:	f06f 0201 	mvn.w	r2, #1
   1cc82:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1cc86:	f7ff ff49 	bl	1cb1c <nrf52_configuration_249>
   1cc8a:	b138      	cbz	r0, 1cc9c <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1cc8c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1cc90:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1cc94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cc98:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1cc9c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1cca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1cca4:	2b00      	cmp	r3, #0
   1cca6:	db08      	blt.n	1ccba <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1cca8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1ccac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1ccb0:	2b00      	cmp	r3, #0
   1ccb2:	db02      	blt.n	1ccba <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   1ccb4:	f7ff ff56 	bl	1cb64 <SystemCoreClockUpdate>
}
   1ccb8:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1ccba:	2001      	movs	r0, #1
   1ccbc:	f7ff ff48 	bl	1cb50 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1ccc0:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   1ccc4:	2512      	movs	r5, #18
   1ccc6:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   1ccca:	f7ff ff39 	bl	1cb40 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1ccce:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   1ccd2:	f7ff ff35 	bl	1cb40 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1ccd6:	2000      	movs	r0, #0
   1ccd8:	f7ff ff3a 	bl	1cb50 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   1ccdc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1cce0:	490c      	ldr	r1, [pc, #48]	; (1cd14 <SystemInit+0x1a0>)
   1cce2:	68ca      	ldr	r2, [r1, #12]
   1cce4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1cce8:	4b0b      	ldr	r3, [pc, #44]	; (1cd18 <SystemInit+0x1a4>)
   1ccea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1ccec:	60cb      	str	r3, [r1, #12]
   1ccee:	f3bf 8f4f 	dsb	sy
    __NOP();
   1ccf2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1ccf4:	e7fd      	b.n	1ccf2 <SystemInit+0x17e>
   1ccf6:	bf00      	nop
   1ccf8:	4000c000 	.word	0x4000c000
   1ccfc:	4000568c 	.word	0x4000568c
   1cd00:	00038148 	.word	0x00038148
   1cd04:	4000f000 	.word	0x4000f000
   1cd08:	40000ee4 	.word	0x40000ee4
   1cd0c:	10000258 	.word	0x10000258
   1cd10:	40029640 	.word	0x40029640
   1cd14:	e000ed00 	.word	0xe000ed00
   1cd18:	05fa0004 	.word	0x05fa0004

0001cd1c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1cd1c:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1cd1e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1cd20:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   1cd24:	f1d3 031f 	rsbs	r3, r3, #31
   1cd28:	d415      	bmi.n	1cd56 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1cd2a:	2201      	movs	r2, #1
   1cd2c:	409a      	lsls	r2, r3
   1cd2e:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1cd32:	f3bf 8f5b 	dmb	ish
   1cd36:	e850 5f00 	ldrex	r5, [r0]
   1cd3a:	42a5      	cmp	r5, r4
   1cd3c:	d104      	bne.n	1cd48 <nrfx_flag32_alloc+0x2c>
   1cd3e:	e840 2c00 	strex	ip, r2, [r0]
   1cd42:	f1bc 0f00 	cmp.w	ip, #0
   1cd46:	d1f6      	bne.n	1cd36 <nrfx_flag32_alloc+0x1a>
   1cd48:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1cd4c:	d1e7      	bne.n	1cd1e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   1cd4e:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   1cd50:	4802      	ldr	r0, [pc, #8]	; (1cd5c <nrfx_flag32_alloc+0x40>)
}
   1cd52:	bc30      	pop	{r4, r5}
   1cd54:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   1cd56:	4802      	ldr	r0, [pc, #8]	; (1cd60 <nrfx_flag32_alloc+0x44>)
   1cd58:	e7fb      	b.n	1cd52 <nrfx_flag32_alloc+0x36>
   1cd5a:	bf00      	nop
   1cd5c:	0bad0000 	.word	0x0bad0000
   1cd60:	0bad0002 	.word	0x0bad0002

0001cd64 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1cd64:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1cd66:	6803      	ldr	r3, [r0, #0]
   1cd68:	460c      	mov	r4, r1
   1cd6a:	fa23 f101 	lsr.w	r1, r3, r1
   1cd6e:	f011 0f01 	tst.w	r1, #1
   1cd72:	d114      	bne.n	1cd9e <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   1cd74:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1cd76:	2301      	movs	r3, #1
   1cd78:	40a3      	lsls	r3, r4
   1cd7a:	4313      	orrs	r3, r2
   1cd7c:	f3bf 8f5b 	dmb	ish
   1cd80:	e850 1f00 	ldrex	r1, [r0]
   1cd84:	4291      	cmp	r1, r2
   1cd86:	d104      	bne.n	1cd92 <nrfx_flag32_free+0x2e>
   1cd88:	e840 3c00 	strex	ip, r3, [r0]
   1cd8c:	f1bc 0f00 	cmp.w	ip, #0
   1cd90:	d1f6      	bne.n	1cd80 <nrfx_flag32_free+0x1c>
   1cd92:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1cd96:	d1ed      	bne.n	1cd74 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1cd98:	4802      	ldr	r0, [pc, #8]	; (1cda4 <nrfx_flag32_free+0x40>)
}
   1cd9a:	bc10      	pop	{r4}
   1cd9c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   1cd9e:	4802      	ldr	r0, [pc, #8]	; (1cda8 <nrfx_flag32_free+0x44>)
   1cda0:	e7fb      	b.n	1cd9a <nrfx_flag32_free+0x36>
   1cda2:	bf00      	nop
   1cda4:	0bad0000 	.word	0x0bad0000
   1cda8:	0bad0004 	.word	0x0bad0004

0001cdac <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1cdac:	3008      	adds	r0, #8
   1cdae:	4b03      	ldr	r3, [pc, #12]	; (1cdbc <pin_in_use+0x10>)
   1cdb0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1cdb4:	f000 0001 	and.w	r0, r0, #1
   1cdb8:	4770      	bx	lr
   1cdba:	bf00      	nop
   1cdbc:	200005b4 	.word	0x200005b4

0001cdc0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1cdc0:	3008      	adds	r0, #8
   1cdc2:	4b03      	ldr	r3, [pc, #12]	; (1cdd0 <pin_in_use_by_te+0x10>)
   1cdc4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1cdc8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1cdcc:	4770      	bx	lr
   1cdce:	bf00      	nop
   1cdd0:	200005b4 	.word	0x200005b4

0001cdd4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1cdd4:	3008      	adds	r0, #8
   1cdd6:	4b04      	ldr	r3, [pc, #16]	; (1cde8 <pin_has_trigger+0x14>)
   1cdd8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1cddc:	f010 001c 	ands.w	r0, r0, #28
   1cde0:	bf18      	it	ne
   1cde2:	2001      	movne	r0, #1
   1cde4:	4770      	bx	lr
   1cde6:	bf00      	nop
   1cde8:	200005b4 	.word	0x200005b4

0001cdec <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1cdec:	3008      	adds	r0, #8
   1cdee:	4b03      	ldr	r3, [pc, #12]	; (1cdfc <pin_is_output+0x10>)
   1cdf0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1cdf4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1cdf8:	4770      	bx	lr
   1cdfa:	bf00      	nop
   1cdfc:	200005b4 	.word	0x200005b4

0001ce00 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ce00:	3008      	adds	r0, #8
   1ce02:	4b02      	ldr	r3, [pc, #8]	; (1ce0c <pin_te_get+0xc>)
   1ce04:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ce08:	0b40      	lsrs	r0, r0, #13
   1ce0a:	4770      	bx	lr
   1ce0c:	200005b4 	.word	0x200005b4

0001ce10 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1ce10:	2200      	movs	r2, #0
   1ce12:	e004      	b.n	1ce1e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1ce14:	f04f 33ff 	mov.w	r3, #4294967295
   1ce18:	4283      	cmp	r3, r0
   1ce1a:	d00f      	beq.n	1ce3c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1ce1c:	3201      	adds	r2, #1
   1ce1e:	2a2f      	cmp	r2, #47	; 0x2f
   1ce20:	d80a      	bhi.n	1ce38 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1ce22:	f102 0308 	add.w	r3, r2, #8
   1ce26:	4906      	ldr	r1, [pc, #24]	; (1ce40 <handler_in_use+0x30>)
   1ce28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1ce2c:	f413 7f80 	tst.w	r3, #256	; 0x100
   1ce30:	d0f0      	beq.n	1ce14 <handler_in_use+0x4>
   1ce32:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1ce36:	e7ef      	b.n	1ce18 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   1ce38:	2000      	movs	r0, #0
   1ce3a:	4770      	bx	lr
            return true;
   1ce3c:	2001      	movs	r0, #1
}
   1ce3e:	4770      	bx	lr
   1ce40:	200005b4 	.word	0x200005b4

0001ce44 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1ce44:	2300      	movs	r3, #0
   1ce46:	b113      	cbz	r3, 1ce4e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   1ce48:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ce4c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ce4e:	4a07      	ldr	r2, [pc, #28]	; (1ce6c <find_handler+0x28>)
   1ce50:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   1ce54:	4282      	cmp	r2, r0
   1ce56:	d001      	beq.n	1ce5c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1ce58:	3301      	adds	r3, #1
   1ce5a:	e7f4      	b.n	1ce46 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ce5c:	4a03      	ldr	r2, [pc, #12]	; (1ce6c <find_handler+0x28>)
   1ce5e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1ce62:	6852      	ldr	r2, [r2, #4]
   1ce64:	428a      	cmp	r2, r1
   1ce66:	d1f7      	bne.n	1ce58 <find_handler+0x14>
            return i;
   1ce68:	4618      	mov	r0, r3
   1ce6a:	4770      	bx	lr
   1ce6c:	200005b4 	.word	0x200005b4

0001ce70 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ce70:	3008      	adds	r0, #8
   1ce72:	4b06      	ldr	r3, [pc, #24]	; (1ce8c <channel_handler_get+0x1c>)
   1ce74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1ce78:	f410 7f80 	tst.w	r0, #256	; 0x100
   1ce7c:	d004      	beq.n	1ce88 <channel_handler_get+0x18>
   1ce7e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   1ce82:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1ce86:	4770      	bx	lr
        return NULL;
   1ce88:	2000      	movs	r0, #0
}
   1ce8a:	4770      	bx	lr
   1ce8c:	200005b4 	.word	0x200005b4

0001ce90 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1ce90:	b570      	push	{r4, r5, r6, lr}
   1ce92:	4604      	mov	r4, r0
   1ce94:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   1ce96:	f7ff ffeb 	bl	1ce70 <channel_handler_get>

    if (handler)
   1ce9a:	b120      	cbz	r0, 1cea6 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   1ce9c:	6806      	ldr	r6, [r0, #0]
   1ce9e:	6842      	ldr	r2, [r0, #4]
   1cea0:	4629      	mov	r1, r5
   1cea2:	4620      	mov	r0, r4
   1cea4:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   1cea6:	4b04      	ldr	r3, [pc, #16]	; (1ceb8 <call_handler+0x28>)
   1cea8:	689b      	ldr	r3, [r3, #8]
   1ceaa:	b123      	cbz	r3, 1ceb6 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1ceac:	4a02      	ldr	r2, [pc, #8]	; (1ceb8 <call_handler+0x28>)
   1ceae:	68d2      	ldr	r2, [r2, #12]
   1ceb0:	4629      	mov	r1, r5
   1ceb2:	4620      	mov	r0, r4
   1ceb4:	4798      	blx	r3
    }
}
   1ceb6:	bd70      	pop	{r4, r5, r6, pc}
   1ceb8:	200005b4 	.word	0x200005b4

0001cebc <latch_pending_read_and_check>:
    }
}

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   1cebc:	b410      	push	{r4}
   1cebe:	b083      	sub	sp, #12
   1cec0:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1cec2:	4b12      	ldr	r3, [pc, #72]	; (1cf0c <latch_pending_read_and_check+0x50>)
   1cec4:	e893 0003 	ldmia.w	r3, {r0, r1}
   1cec8:	ab02      	add	r3, sp, #8
   1ceca:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1cece:	4620      	mov	r0, r4
   1ced0:	2300      	movs	r3, #0
   1ced2:	e00b      	b.n	1ceec <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   1ced4:	aa02      	add	r2, sp, #8
   1ced6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1ceda:	f852 2c08 	ldr.w	r2, [r2, #-8]
   1cede:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1cee2:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1cee6:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1ceea:	3301      	adds	r3, #1
   1ceec:	2b01      	cmp	r3, #1
   1ceee:	d9f1      	bls.n	1ced4 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1cef0:	2300      	movs	r3, #0
   1cef2:	2b01      	cmp	r3, #1
   1cef4:	d804      	bhi.n	1cf00 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
   1cef6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1cefa:	b92a      	cbnz	r2, 1cf08 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1cefc:	3301      	adds	r3, #1
   1cefe:	e7f8      	b.n	1cef2 <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   1cf00:	2000      	movs	r0, #0
}
   1cf02:	b003      	add	sp, #12
   1cf04:	bc10      	pop	{r4}
   1cf06:	4770      	bx	lr
            return true;
   1cf08:	2001      	movs	r0, #1
   1cf0a:	e7fa      	b.n	1cf02 <latch_pending_read_and_check+0x46>
   1cf0c:	00029f2c 	.word	0x00029f2c

0001cf10 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1cf10:	f100 0208 	add.w	r2, r0, #8
   1cf14:	4b16      	ldr	r3, [pc, #88]	; (1cf70 <release_handler+0x60>)
   1cf16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1cf1a:	f413 7f80 	tst.w	r3, #256	; 0x100
   1cf1e:	d026      	beq.n	1cf6e <release_handler+0x5e>
{
   1cf20:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1cf22:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1cf26:	4610      	mov	r0, r2
   1cf28:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1cf2c:	4a10      	ldr	r2, [pc, #64]	; (1cf70 <release_handler+0x60>)
   1cf2e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   1cf32:	4620      	mov	r0, r4
   1cf34:	f7ff ff6c 	bl	1ce10 <handler_in_use>
   1cf38:	b100      	cbz	r0, 1cf3c <release_handler+0x2c>
}
   1cf3a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   1cf3c:	480c      	ldr	r0, [pc, #48]	; (1cf70 <release_handler+0x60>)
   1cf3e:	2300      	movs	r3, #0
   1cf40:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1cf44:	4621      	mov	r1, r4
   1cf46:	3074      	adds	r0, #116	; 0x74
   1cf48:	f7ff ff0c 	bl	1cd64 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1cf4c:	4b09      	ldr	r3, [pc, #36]	; (1cf74 <release_handler+0x64>)
   1cf4e:	4298      	cmp	r0, r3
   1cf50:	d0f3      	beq.n	1cf3a <release_handler+0x2a>
   1cf52:	4c09      	ldr	r4, [pc, #36]	; (1cf78 <release_handler+0x68>)
   1cf54:	f44f 7399 	mov.w	r3, #306	; 0x132
   1cf58:	4622      	mov	r2, r4
   1cf5a:	4908      	ldr	r1, [pc, #32]	; (1cf7c <release_handler+0x6c>)
   1cf5c:	4808      	ldr	r0, [pc, #32]	; (1cf80 <release_handler+0x70>)
   1cf5e:	f008 fc66 	bl	2582e <printk>
   1cf62:	f44f 7199 	mov.w	r1, #306	; 0x132
   1cf66:	4620      	mov	r0, r4
   1cf68:	f008 fee3 	bl	25d32 <assert_post_action>
   1cf6c:	e7e5      	b.n	1cf3a <release_handler+0x2a>
   1cf6e:	4770      	bx	lr
   1cf70:	200005b4 	.word	0x200005b4
   1cf74:	0bad0000 	.word	0x0bad0000
   1cf78:	0002d0f0 	.word	0x0002d0f0
   1cf7c:	0002d130 	.word	0x0002d130
   1cf80:	00029ff8 	.word	0x00029ff8

0001cf84 <pin_handler_trigger_uninit>:
{
   1cf84:	b510      	push	{r4, lr}
   1cf86:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   1cf88:	f7ff ff1a 	bl	1cdc0 <pin_in_use_by_te>
   1cf8c:	b140      	cbz	r0, 1cfa0 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1cf8e:	4620      	mov	r0, r4
   1cf90:	f7ff ff36 	bl	1ce00 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1cf94:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1cf98:	4b06      	ldr	r3, [pc, #24]	; (1cfb4 <pin_handler_trigger_uninit+0x30>)
   1cf9a:	2200      	movs	r2, #0
   1cf9c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   1cfa0:	4620      	mov	r0, r4
   1cfa2:	f7ff ffb5 	bl	1cf10 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1cfa6:	3408      	adds	r4, #8
   1cfa8:	4b03      	ldr	r3, [pc, #12]	; (1cfb8 <pin_handler_trigger_uninit+0x34>)
   1cfaa:	2200      	movs	r2, #0
   1cfac:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   1cfb0:	bd10      	pop	{r4, pc}
   1cfb2:	bf00      	nop
   1cfb4:	40006000 	.word	0x40006000
   1cfb8:	200005b4 	.word	0x200005b4

0001cfbc <pin_handler_set>:
{
   1cfbc:	b570      	push	{r4, r5, r6, lr}
   1cfbe:	b082      	sub	sp, #8
   1cfc0:	4606      	mov	r6, r0
   1cfc2:	460c      	mov	r4, r1
   1cfc4:	4615      	mov	r5, r2
    release_handler(pin);
   1cfc6:	f7ff ffa3 	bl	1cf10 <release_handler>
    if (!handler)
   1cfca:	b324      	cbz	r4, 1d016 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   1cfcc:	4629      	mov	r1, r5
   1cfce:	4620      	mov	r0, r4
   1cfd0:	f7ff ff38 	bl	1ce44 <find_handler>
    if (handler_id < 0)
   1cfd4:	1e03      	subs	r3, r0, #0
   1cfd6:	db13      	blt.n	1d000 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   1cfd8:	4a10      	ldr	r2, [pc, #64]	; (1d01c <pin_handler_set+0x60>)
   1cfda:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1cfde:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   1cfe2:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1cfe4:	025b      	lsls	r3, r3, #9
   1cfe6:	b29b      	uxth	r3, r3
   1cfe8:	f106 0008 	add.w	r0, r6, #8
   1cfec:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   1cff0:	430b      	orrs	r3, r1
   1cff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1cff6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   1cffa:	4809      	ldr	r0, [pc, #36]	; (1d020 <pin_handler_set+0x64>)
}
   1cffc:	b002      	add	sp, #8
   1cffe:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1d000:	f10d 0107 	add.w	r1, sp, #7
   1d004:	4807      	ldr	r0, [pc, #28]	; (1d024 <pin_handler_set+0x68>)
   1d006:	f7ff fe89 	bl	1cd1c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1d00a:	4b05      	ldr	r3, [pc, #20]	; (1d020 <pin_handler_set+0x64>)
   1d00c:	4298      	cmp	r0, r3
   1d00e:	d1f5      	bne.n	1cffc <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   1d010:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d014:	e7e0      	b.n	1cfd8 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   1d016:	4802      	ldr	r0, [pc, #8]	; (1d020 <pin_handler_set+0x64>)
   1d018:	e7f0      	b.n	1cffc <pin_handler_set+0x40>
   1d01a:	bf00      	nop
   1d01c:	200005b4 	.word	0x200005b4
   1d020:	0bad0000 	.word	0x0bad0000
   1d024:	20000628 	.word	0x20000628

0001d028 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   1d028:	b538      	push	{r3, r4, r5, lr}
   1d02a:	4604      	mov	r4, r0
    while (mask)
   1d02c:	b1cc      	cbz	r4, 1d062 <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   1d02e:	fa94 f3a4 	rbit	r3, r4
   1d032:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1d036:	2201      	movs	r2, #1
   1d038:	409a      	lsls	r2, r3
   1d03a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d03e:	4a09      	ldr	r2, [pc, #36]	; (1d064 <gpiote_evt_handle+0x3c>)
   1d040:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1d044:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1d048:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1d04c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1d050:	f3c0 4001 	ubfx	r0, r0, #16, #2
   1d054:	f00c fad2 	bl	295fc <gpiote_polarity_to_trigger>
   1d058:	4601      	mov	r1, r0
   1d05a:	4628      	mov	r0, r5
   1d05c:	f7ff ff18 	bl	1ce90 <call_handler>
   1d060:	e7e4      	b.n	1d02c <gpiote_evt_handle+0x4>
    }
}
   1d062:	bd38      	pop	{r3, r4, r5, pc}
   1d064:	40006000 	.word	0x40006000

0001d068 <next_sense_cond_call_handler>:
{
   1d068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d06c:	4604      	mov	r4, r0
   1d06e:	460d      	mov	r5, r1
   1d070:	4616      	mov	r6, r2
    if (is_level(trigger))
   1d072:	4608      	mov	r0, r1
   1d074:	f00c fac4 	bl	29600 <is_level>
   1d078:	bb60      	cbnz	r0, 1d0d4 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1d07a:	2e02      	cmp	r6, #2
   1d07c:	f000 80f5 	beq.w	1d26a <next_sense_cond_call_handler+0x202>
   1d080:	f04f 0802 	mov.w	r8, #2
    switch (port)
   1d084:	0963      	lsrs	r3, r4, #5
   1d086:	f000 80f3 	beq.w	1d270 <next_sense_cond_call_handler+0x208>
   1d08a:	2b01      	cmp	r3, #1
   1d08c:	f040 80f3 	bne.w	1d276 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
   1d090:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1d094:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d098:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d09a:	f013 0f01 	tst.w	r3, #1
   1d09e:	f000 80ec 	beq.w	1d27a <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
   1d0a2:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d0a6:	0963      	lsrs	r3, r4, #5
   1d0a8:	f000 80f5 	beq.w	1d296 <next_sense_cond_call_handler+0x22e>
   1d0ac:	2b01      	cmp	r3, #1
   1d0ae:	f000 80f5 	beq.w	1d29c <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
   1d0b2:	f8df 922c 	ldr.w	r9, [pc, #556]	; 1d2e0 <next_sense_cond_call_handler+0x278>
   1d0b6:	f240 232e 	movw	r3, #558	; 0x22e
   1d0ba:	464a      	mov	r2, r9
   1d0bc:	4986      	ldr	r1, [pc, #536]	; (1d2d8 <next_sense_cond_call_handler+0x270>)
   1d0be:	4887      	ldr	r0, [pc, #540]	; (1d2dc <next_sense_cond_call_handler+0x274>)
   1d0c0:	f008 fbb5 	bl	2582e <printk>
   1d0c4:	f240 212e 	movw	r1, #558	; 0x22e
   1d0c8:	4648      	mov	r0, r9
   1d0ca:	f008 fe32 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1d0ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1d0d2:	e0e4      	b.n	1d29e <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
   1d0d4:	4629      	mov	r1, r5
   1d0d6:	4620      	mov	r0, r4
   1d0d8:	f7ff feda 	bl	1ce90 <call_handler>
    switch (port)
   1d0dc:	0963      	lsrs	r3, r4, #5
   1d0de:	d01f      	beq.n	1d120 <next_sense_cond_call_handler+0xb8>
   1d0e0:	2b01      	cmp	r3, #1
   1d0e2:	d120      	bne.n	1d126 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
   1d0e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1d0e8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d0ec:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d0ee:	f013 0f01 	tst.w	r3, #1
   1d0f2:	d01a      	beq.n	1d12a <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
   1d0f4:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d0f8:	0963      	lsrs	r3, r4, #5
   1d0fa:	d024      	beq.n	1d146 <next_sense_cond_call_handler+0xde>
   1d0fc:	2b01      	cmp	r3, #1
   1d0fe:	d025      	beq.n	1d14c <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
   1d100:	4f77      	ldr	r7, [pc, #476]	; (1d2e0 <next_sense_cond_call_handler+0x278>)
   1d102:	f240 232e 	movw	r3, #558	; 0x22e
   1d106:	463a      	mov	r2, r7
   1d108:	4973      	ldr	r1, [pc, #460]	; (1d2d8 <next_sense_cond_call_handler+0x270>)
   1d10a:	4874      	ldr	r0, [pc, #464]	; (1d2dc <next_sense_cond_call_handler+0x274>)
   1d10c:	f008 fb8f 	bl	2582e <printk>
   1d110:	f240 212e 	movw	r1, #558	; 0x22e
   1d114:	4638      	mov	r0, r7
   1d116:	f008 fe0c 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1d11a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1d11e:	e016      	b.n	1d14e <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
   1d120:	f04f 33ff 	mov.w	r3, #4294967295
   1d124:	e7e0      	b.n	1d0e8 <next_sense_cond_call_handler+0x80>
    switch (port)
   1d126:	2300      	movs	r3, #0
   1d128:	e7de      	b.n	1d0e8 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d12a:	4d6d      	ldr	r5, [pc, #436]	; (1d2e0 <next_sense_cond_call_handler+0x278>)
   1d12c:	f240 2329 	movw	r3, #553	; 0x229
   1d130:	462a      	mov	r2, r5
   1d132:	496c      	ldr	r1, [pc, #432]	; (1d2e4 <next_sense_cond_call_handler+0x27c>)
   1d134:	4869      	ldr	r0, [pc, #420]	; (1d2dc <next_sense_cond_call_handler+0x274>)
   1d136:	f008 fb7a 	bl	2582e <printk>
   1d13a:	f240 2129 	movw	r1, #553	; 0x229
   1d13e:	4628      	mov	r0, r5
   1d140:	f008 fdf7 	bl	25d32 <assert_post_action>
   1d144:	e7d6      	b.n	1d0f4 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
   1d146:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1d14a:	e000      	b.n	1d14e <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d14c:	4b66      	ldr	r3, [pc, #408]	; (1d2e8 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d14e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1d152:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1d156:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1d15a:	429e      	cmp	r6, r3
   1d15c:	f040 80af 	bne.w	1d2be <next_sense_cond_call_handler+0x256>
    switch (port)
   1d160:	0963      	lsrs	r3, r4, #5
   1d162:	d01f      	beq.n	1d1a4 <next_sense_cond_call_handler+0x13c>
   1d164:	2b01      	cmp	r3, #1
   1d166:	d120      	bne.n	1d1aa <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
   1d168:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1d16c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d170:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d172:	f013 0f01 	tst.w	r3, #1
   1d176:	d01a      	beq.n	1d1ae <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
   1d178:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d17c:	0963      	lsrs	r3, r4, #5
   1d17e:	d024      	beq.n	1d1ca <next_sense_cond_call_handler+0x162>
   1d180:	2b01      	cmp	r3, #1
   1d182:	d025      	beq.n	1d1d0 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
   1d184:	4f56      	ldr	r7, [pc, #344]	; (1d2e0 <next_sense_cond_call_handler+0x278>)
   1d186:	f240 232e 	movw	r3, #558	; 0x22e
   1d18a:	463a      	mov	r2, r7
   1d18c:	4952      	ldr	r1, [pc, #328]	; (1d2d8 <next_sense_cond_call_handler+0x270>)
   1d18e:	4853      	ldr	r0, [pc, #332]	; (1d2dc <next_sense_cond_call_handler+0x274>)
   1d190:	f008 fb4d 	bl	2582e <printk>
   1d194:	f240 212e 	movw	r1, #558	; 0x22e
   1d198:	4638      	mov	r0, r7
   1d19a:	f008 fdca 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1d19e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1d1a2:	e016      	b.n	1d1d2 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
   1d1a4:	f04f 33ff 	mov.w	r3, #4294967295
   1d1a8:	e7e0      	b.n	1d16c <next_sense_cond_call_handler+0x104>
    switch (port)
   1d1aa:	2300      	movs	r3, #0
   1d1ac:	e7de      	b.n	1d16c <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d1ae:	4d4c      	ldr	r5, [pc, #304]	; (1d2e0 <next_sense_cond_call_handler+0x278>)
   1d1b0:	f240 2329 	movw	r3, #553	; 0x229
   1d1b4:	462a      	mov	r2, r5
   1d1b6:	494b      	ldr	r1, [pc, #300]	; (1d2e4 <next_sense_cond_call_handler+0x27c>)
   1d1b8:	4848      	ldr	r0, [pc, #288]	; (1d2dc <next_sense_cond_call_handler+0x274>)
   1d1ba:	f008 fb38 	bl	2582e <printk>
   1d1be:	f240 2129 	movw	r1, #553	; 0x229
   1d1c2:	4628      	mov	r0, r5
   1d1c4:	f008 fdb5 	bl	25d32 <assert_post_action>
   1d1c8:	e7d6      	b.n	1d178 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
   1d1ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1d1ce:	e000      	b.n	1d1d2 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d1d0:	4945      	ldr	r1, [pc, #276]	; (1d2e8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1d1d2:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   1d1d6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1d1da:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1d1de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
   1d1e2:	0963      	lsrs	r3, r4, #5
   1d1e4:	d01f      	beq.n	1d226 <next_sense_cond_call_handler+0x1be>
   1d1e6:	2b01      	cmp	r3, #1
   1d1e8:	d120      	bne.n	1d22c <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
   1d1ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1d1ee:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d1f2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d1f4:	f013 0f01 	tst.w	r3, #1
   1d1f8:	d01a      	beq.n	1d230 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
   1d1fa:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d1fe:	0964      	lsrs	r4, r4, #5
   1d200:	d024      	beq.n	1d24c <next_sense_cond_call_handler+0x1e4>
   1d202:	2c01      	cmp	r4, #1
   1d204:	d025      	beq.n	1d252 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
   1d206:	4c36      	ldr	r4, [pc, #216]	; (1d2e0 <next_sense_cond_call_handler+0x278>)
   1d208:	f240 232e 	movw	r3, #558	; 0x22e
   1d20c:	4622      	mov	r2, r4
   1d20e:	4932      	ldr	r1, [pc, #200]	; (1d2d8 <next_sense_cond_call_handler+0x270>)
   1d210:	4832      	ldr	r0, [pc, #200]	; (1d2dc <next_sense_cond_call_handler+0x274>)
   1d212:	f008 fb0c 	bl	2582e <printk>
   1d216:	f240 212e 	movw	r1, #558	; 0x22e
   1d21a:	4620      	mov	r0, r4
   1d21c:	f008 fd89 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1d220:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1d224:	e016      	b.n	1d254 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
   1d226:	f04f 33ff 	mov.w	r3, #4294967295
   1d22a:	e7e0      	b.n	1d1ee <next_sense_cond_call_handler+0x186>
    switch (port)
   1d22c:	2300      	movs	r3, #0
   1d22e:	e7de      	b.n	1d1ee <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d230:	4d2b      	ldr	r5, [pc, #172]	; (1d2e0 <next_sense_cond_call_handler+0x278>)
   1d232:	f240 2329 	movw	r3, #553	; 0x229
   1d236:	462a      	mov	r2, r5
   1d238:	492a      	ldr	r1, [pc, #168]	; (1d2e4 <next_sense_cond_call_handler+0x27c>)
   1d23a:	4828      	ldr	r0, [pc, #160]	; (1d2dc <next_sense_cond_call_handler+0x274>)
   1d23c:	f008 faf7 	bl	2582e <printk>
   1d240:	f240 2129 	movw	r1, #553	; 0x229
   1d244:	4628      	mov	r0, r5
   1d246:	f008 fd74 	bl	25d32 <assert_post_action>
   1d24a:	e7d6      	b.n	1d1fa <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
   1d24c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1d250:	e000      	b.n	1d254 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d252:	4925      	ldr	r1, [pc, #148]	; (1d2e8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1d254:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   1d258:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1d25c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1d260:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1d264:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
   1d268:	e029      	b.n	1d2be <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1d26a:	f04f 0803 	mov.w	r8, #3
   1d26e:	e709      	b.n	1d084 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
   1d270:	f04f 33ff 	mov.w	r3, #4294967295
   1d274:	e70e      	b.n	1d094 <next_sense_cond_call_handler+0x2c>
    switch (port)
   1d276:	2300      	movs	r3, #0
   1d278:	e70c      	b.n	1d094 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d27a:	4f19      	ldr	r7, [pc, #100]	; (1d2e0 <next_sense_cond_call_handler+0x278>)
   1d27c:	f240 2329 	movw	r3, #553	; 0x229
   1d280:	463a      	mov	r2, r7
   1d282:	4918      	ldr	r1, [pc, #96]	; (1d2e4 <next_sense_cond_call_handler+0x27c>)
   1d284:	4815      	ldr	r0, [pc, #84]	; (1d2dc <next_sense_cond_call_handler+0x274>)
   1d286:	f008 fad2 	bl	2582e <printk>
   1d28a:	f240 2129 	movw	r1, #553	; 0x229
   1d28e:	4638      	mov	r0, r7
   1d290:	f008 fd4f 	bl	25d32 <assert_post_action>
   1d294:	e705      	b.n	1d0a2 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
   1d296:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1d29a:	e000      	b.n	1d29e <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d29c:	4912      	ldr	r1, [pc, #72]	; (1d2e8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1d29e:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
   1d2a2:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   1d2a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1d2aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1d2ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d2b2:	2d03      	cmp	r5, #3
   1d2b4:	d007      	beq.n	1d2c6 <next_sense_cond_call_handler+0x25e>
   1d2b6:	2e02      	cmp	r6, #2
   1d2b8:	d003      	beq.n	1d2c2 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1d2ba:	2e03      	cmp	r6, #3
   1d2bc:	d008      	beq.n	1d2d0 <next_sense_cond_call_handler+0x268>
}
   1d2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1d2c2:	2d01      	cmp	r5, #1
   1d2c4:	d1f9      	bne.n	1d2ba <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
   1d2c6:	4629      	mov	r1, r5
   1d2c8:	4620      	mov	r0, r4
   1d2ca:	f7ff fde1 	bl	1ce90 <call_handler>
}
   1d2ce:	e7f6      	b.n	1d2be <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1d2d0:	2d02      	cmp	r5, #2
   1d2d2:	d1f4      	bne.n	1d2be <next_sense_cond_call_handler+0x256>
   1d2d4:	e7f7      	b.n	1d2c6 <next_sense_cond_call_handler+0x25e>
   1d2d6:	bf00      	nop
   1d2d8:	0002dc18 	.word	0x0002dc18
   1d2dc:	00029ff8 	.word	0x00029ff8
   1d2e0:	0002cafc 	.word	0x0002cafc
   1d2e4:	0002cb30 	.word	0x0002cb30
   1d2e8:	50000300 	.word	0x50000300

0001d2ec <port_event_handle>:
{
   1d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d2f0:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1d2f2:	4a64      	ldr	r2, [pc, #400]	; (1d484 <port_event_handle+0x198>)
   1d2f4:	466b      	mov	r3, sp
   1d2f6:	e892 0003 	ldmia.w	r2, {r0, r1}
   1d2fa:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1d2fe:	2300      	movs	r3, #0
   1d300:	a802      	add	r0, sp, #8
   1d302:	e00b      	b.n	1d31c <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   1d304:	aa04      	add	r2, sp, #16
   1d306:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1d30a:	f852 2c10 	ldr.w	r2, [r2, #-16]
   1d30e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1d312:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1d316:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1d31a:	3301      	adds	r3, #1
   1d31c:	2b01      	cmp	r3, #1
   1d31e:	d9f1      	bls.n	1d304 <port_event_handle+0x18>
   1d320:	e0ab      	b.n	1d47a <port_event_handle+0x18e>
            mask = P0_FEATURE_PINS_PRESENT;
   1d322:	f04f 33ff 	mov.w	r3, #4294967295
   1d326:	e07f      	b.n	1d428 <port_event_handle+0x13c>
    switch (port)
   1d328:	2300      	movs	r3, #0
   1d32a:	e07d      	b.n	1d428 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d32c:	4f56      	ldr	r7, [pc, #344]	; (1d488 <port_event_handle+0x19c>)
   1d32e:	f240 2329 	movw	r3, #553	; 0x229
   1d332:	463a      	mov	r2, r7
   1d334:	4955      	ldr	r1, [pc, #340]	; (1d48c <port_event_handle+0x1a0>)
   1d336:	4856      	ldr	r0, [pc, #344]	; (1d490 <port_event_handle+0x1a4>)
   1d338:	f008 fa79 	bl	2582e <printk>
   1d33c:	f240 2129 	movw	r1, #553	; 0x229
   1d340:	4638      	mov	r0, r7
   1d342:	f008 fcf6 	bl	25d32 <assert_post_action>
   1d346:	e076      	b.n	1d436 <port_event_handle+0x14a>
        case 0: return NRF_P0;
   1d348:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1d34c:	e000      	b.n	1d350 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d34e:	4b51      	ldr	r3, [pc, #324]	; (1d494 <port_event_handle+0x1a8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d350:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   1d354:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   1d358:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1d35c:	4631      	mov	r1, r6
   1d35e:	4620      	mov	r0, r4
   1d360:	f7ff fe82 	bl	1d068 <next_sense_cond_call_handler>
    switch (port)
   1d364:	0963      	lsrs	r3, r4, #5
   1d366:	d01f      	beq.n	1d3a8 <port_event_handle+0xbc>
   1d368:	2b01      	cmp	r3, #1
   1d36a:	d120      	bne.n	1d3ae <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
   1d36c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1d370:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d374:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d376:	f013 0f01 	tst.w	r3, #1
   1d37a:	d01a      	beq.n	1d3b2 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
   1d37c:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d380:	0964      	lsrs	r4, r4, #5
   1d382:	d024      	beq.n	1d3ce <port_event_handle+0xe2>
   1d384:	2c01      	cmp	r4, #1
   1d386:	d025      	beq.n	1d3d4 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
   1d388:	4c3f      	ldr	r4, [pc, #252]	; (1d488 <port_event_handle+0x19c>)
   1d38a:	f240 232e 	movw	r3, #558	; 0x22e
   1d38e:	4622      	mov	r2, r4
   1d390:	4941      	ldr	r1, [pc, #260]	; (1d498 <port_event_handle+0x1ac>)
   1d392:	483f      	ldr	r0, [pc, #252]	; (1d490 <port_event_handle+0x1a4>)
   1d394:	f008 fa4b 	bl	2582e <printk>
   1d398:	f240 212e 	movw	r1, #558	; 0x22e
   1d39c:	4620      	mov	r0, r4
   1d39e:	f008 fcc8 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1d3a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1d3a6:	e016      	b.n	1d3d6 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
   1d3a8:	f04f 33ff 	mov.w	r3, #4294967295
   1d3ac:	e7e0      	b.n	1d370 <port_event_handle+0x84>
    switch (port)
   1d3ae:	2300      	movs	r3, #0
   1d3b0:	e7de      	b.n	1d370 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d3b2:	4e35      	ldr	r6, [pc, #212]	; (1d488 <port_event_handle+0x19c>)
   1d3b4:	f240 2329 	movw	r3, #553	; 0x229
   1d3b8:	4632      	mov	r2, r6
   1d3ba:	4934      	ldr	r1, [pc, #208]	; (1d48c <port_event_handle+0x1a0>)
   1d3bc:	4834      	ldr	r0, [pc, #208]	; (1d490 <port_event_handle+0x1a4>)
   1d3be:	f008 fa36 	bl	2582e <printk>
   1d3c2:	f240 2129 	movw	r1, #553	; 0x229
   1d3c6:	4630      	mov	r0, r6
   1d3c8:	f008 fcb3 	bl	25d32 <assert_post_action>
   1d3cc:	e7d6      	b.n	1d37c <port_event_handle+0x90>
        case 0: return NRF_P0;
   1d3ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1d3d2:	e000      	b.n	1d3d6 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d3d4:	4a2f      	ldr	r2, [pc, #188]	; (1d494 <port_event_handle+0x1a8>)
    reg->LATCH = (1 << pin_number);
   1d3d6:	2301      	movs	r3, #1
   1d3d8:	40b3      	lsls	r3, r6
   1d3da:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
   1d3de:	ab04      	add	r3, sp, #16
   1d3e0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1d3e4:	f853 4c08 	ldr.w	r4, [r3, #-8]
   1d3e8:	2c00      	cmp	r4, #0
   1d3ea:	d03b      	beq.n	1d464 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
   1d3ec:	fa94 f4a4 	rbit	r4, r4
   1d3f0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1d3f4:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d3f8:	f104 0208 	add.w	r2, r4, #8
   1d3fc:	4b27      	ldr	r3, [pc, #156]	; (1d49c <port_event_handle+0x1b0>)
   1d3fe:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
   1d402:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1d406:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1d408:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1d40c:	a802      	add	r0, sp, #8
   1d40e:	2301      	movs	r3, #1
   1d410:	fa03 f202 	lsl.w	r2, r3, r2
   1d414:	5c43      	ldrb	r3, [r0, r1]
   1d416:	ea23 0302 	bic.w	r3, r3, r2
   1d41a:	5443      	strb	r3, [r0, r1]
    switch (port)
   1d41c:	0963      	lsrs	r3, r4, #5
   1d41e:	d080      	beq.n	1d322 <port_event_handle+0x36>
   1d420:	2b01      	cmp	r3, #1
   1d422:	d181      	bne.n	1d328 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
   1d424:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1d428:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d42c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d42e:	f013 0f01 	tst.w	r3, #1
   1d432:	f43f af7b 	beq.w	1d32c <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
   1d436:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d43a:	0963      	lsrs	r3, r4, #5
   1d43c:	d084      	beq.n	1d348 <port_event_handle+0x5c>
   1d43e:	2b01      	cmp	r3, #1
   1d440:	d085      	beq.n	1d34e <port_event_handle+0x62>
            NRFX_ASSERT(0);
   1d442:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1d488 <port_event_handle+0x19c>
   1d446:	f240 232e 	movw	r3, #558	; 0x22e
   1d44a:	4642      	mov	r2, r8
   1d44c:	4912      	ldr	r1, [pc, #72]	; (1d498 <port_event_handle+0x1ac>)
   1d44e:	4810      	ldr	r0, [pc, #64]	; (1d490 <port_event_handle+0x1a4>)
   1d450:	f008 f9ed 	bl	2582e <printk>
   1d454:	f240 212e 	movw	r1, #558	; 0x22e
   1d458:	4640      	mov	r0, r8
   1d45a:	f008 fc6a 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1d45e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1d462:	e775      	b.n	1d350 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d464:	3501      	adds	r5, #1
   1d466:	2d01      	cmp	r5, #1
   1d468:	d9b9      	bls.n	1d3de <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d46a:	4b0d      	ldr	r3, [pc, #52]	; (1d4a0 <port_event_handle+0x1b4>)
   1d46c:	2200      	movs	r2, #0
   1d46e:	601a      	str	r2, [r3, #0]
   1d470:	681b      	ldr	r3, [r3, #0]
    } while (latch_pending_read_and_check(latch));
   1d472:	a802      	add	r0, sp, #8
   1d474:	f7ff fd22 	bl	1cebc <latch_pending_read_and_check>
   1d478:	b108      	cbz	r0, 1d47e <port_event_handle+0x192>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d47a:	2500      	movs	r5, #0
   1d47c:	e7f3      	b.n	1d466 <port_event_handle+0x17a>
}
   1d47e:	b004      	add	sp, #16
   1d480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d484:	00029f2c 	.word	0x00029f2c
   1d488:	0002cafc 	.word	0x0002cafc
   1d48c:	0002cb30 	.word	0x0002cb30
   1d490:	00029ff8 	.word	0x00029ff8
   1d494:	50000300 	.word	0x50000300
   1d498:	0002dc18 	.word	0x0002dc18
   1d49c:	200005b4 	.word	0x200005b4
   1d4a0:	4000617c 	.word	0x4000617c

0001d4a4 <nrfx_gpiote_input_configure>:
{
   1d4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d4a8:	4604      	mov	r4, r0
   1d4aa:	4615      	mov	r5, r2
   1d4ac:	461e      	mov	r6, r3
    if (p_input_config)
   1d4ae:	2900      	cmp	r1, #0
   1d4b0:	d062      	beq.n	1d578 <nrfx_gpiote_input_configure+0xd4>
   1d4b2:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
   1d4b4:	f00c f88c 	bl	295d0 <pin_is_task_output>
   1d4b8:	2800      	cmp	r0, #0
   1d4ba:	f040 80cb 	bne.w	1d654 <nrfx_gpiote_input_configure+0x1b0>
    switch (port)
   1d4be:	0963      	lsrs	r3, r4, #5
   1d4c0:	d020      	beq.n	1d504 <nrfx_gpiote_input_configure+0x60>
   1d4c2:	2b01      	cmp	r3, #1
   1d4c4:	d121      	bne.n	1d50a <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
   1d4c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1d4ca:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d4ce:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d4d0:	f013 0f01 	tst.w	r3, #1
   1d4d4:	d01b      	beq.n	1d50e <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
   1d4d6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d4da:	0963      	lsrs	r3, r4, #5
   1d4dc:	d025      	beq.n	1d52a <nrfx_gpiote_input_configure+0x86>
   1d4de:	2b01      	cmp	r3, #1
   1d4e0:	d026      	beq.n	1d530 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
   1d4e2:	f8df 9188 	ldr.w	r9, [pc, #392]	; 1d66c <nrfx_gpiote_input_configure+0x1c8>
   1d4e6:	f240 232e 	movw	r3, #558	; 0x22e
   1d4ea:	464a      	mov	r2, r9
   1d4ec:	495d      	ldr	r1, [pc, #372]	; (1d664 <nrfx_gpiote_input_configure+0x1c0>)
   1d4ee:	485e      	ldr	r0, [pc, #376]	; (1d668 <nrfx_gpiote_input_configure+0x1c4>)
   1d4f0:	f008 f99d 	bl	2582e <printk>
   1d4f4:	f240 212e 	movw	r1, #558	; 0x22e
   1d4f8:	4648      	mov	r0, r9
   1d4fa:	f008 fc1a 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1d4fe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1d502:	e016      	b.n	1d532 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
   1d504:	f04f 33ff 	mov.w	r3, #4294967295
   1d508:	e7df      	b.n	1d4ca <nrfx_gpiote_input_configure+0x26>
    switch (port)
   1d50a:	2300      	movs	r3, #0
   1d50c:	e7dd      	b.n	1d4ca <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d50e:	4f57      	ldr	r7, [pc, #348]	; (1d66c <nrfx_gpiote_input_configure+0x1c8>)
   1d510:	f240 2329 	movw	r3, #553	; 0x229
   1d514:	463a      	mov	r2, r7
   1d516:	4956      	ldr	r1, [pc, #344]	; (1d670 <nrfx_gpiote_input_configure+0x1cc>)
   1d518:	4853      	ldr	r0, [pc, #332]	; (1d668 <nrfx_gpiote_input_configure+0x1c4>)
   1d51a:	f008 f988 	bl	2582e <printk>
   1d51e:	f240 2129 	movw	r1, #553	; 0x229
   1d522:	4638      	mov	r0, r7
   1d524:	f008 fc05 	bl	25d32 <assert_post_action>
   1d528:	e7d5      	b.n	1d4d6 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
   1d52a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1d52e:	e000      	b.n	1d532 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d530:	4950      	ldr	r1, [pc, #320]	; (1d674 <nrfx_gpiote_input_configure+0x1d0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1d532:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
   1d536:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1d53a:	f1b8 0f00 	cmp.w	r8, #0
   1d53e:	d03c      	beq.n	1d5ba <nrfx_gpiote_input_configure+0x116>
   1d540:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1d542:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
   1d546:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1d54a:	f1b8 0f00 	cmp.w	r8, #0
   1d54e:	d036      	beq.n	1d5be <nrfx_gpiote_input_configure+0x11a>
   1d550:	f898 2000 	ldrb.w	r2, [r8]
   1d554:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1d556:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
   1d558:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   1d55c:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1d560:	4a45      	ldr	r2, [pc, #276]	; (1d678 <nrfx_gpiote_input_configure+0x1d4>)
   1d562:	f104 0108 	add.w	r1, r4, #8
   1d566:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1d56a:	f023 0302 	bic.w	r3, r3, #2
   1d56e:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1d570:	f043 0301 	orr.w	r3, r3, #1
   1d574:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1d578:	b1b5      	cbz	r5, 1d5a8 <nrfx_gpiote_input_configure+0x104>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1d57a:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1d57e:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   1d582:	4620      	mov	r0, r4
   1d584:	f7ff fc32 	bl	1cdec <pin_is_output>
   1d588:	b1d8      	cbz	r0, 1d5c2 <nrfx_gpiote_input_configure+0x11e>
            if (use_evt)
   1d58a:	f1b9 0f00 	cmp.w	r9, #0
   1d58e:	d163      	bne.n	1d658 <nrfx_gpiote_input_configure+0x1b4>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1d590:	4b39      	ldr	r3, [pc, #228]	; (1d678 <nrfx_gpiote_input_configure+0x1d4>)
   1d592:	f104 0208 	add.w	r2, r4, #8
   1d596:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   1d59a:	f020 001c 	bic.w	r0, r0, #28
   1d59e:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1d5a0:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   1d5a4:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   1d5a8:	2e00      	cmp	r6, #0
   1d5aa:	d059      	beq.n	1d660 <nrfx_gpiote_input_configure+0x1bc>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1d5ac:	6872      	ldr	r2, [r6, #4]
   1d5ae:	6831      	ldr	r1, [r6, #0]
   1d5b0:	4620      	mov	r0, r4
   1d5b2:	f7ff fd03 	bl	1cfbc <pin_handler_set>
}
   1d5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1d5ba:	2200      	movs	r2, #0
   1d5bc:	e7c1      	b.n	1d542 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1d5be:	2200      	movs	r2, #0
   1d5c0:	e7c9      	b.n	1d556 <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1d5c2:	4b2d      	ldr	r3, [pc, #180]	; (1d678 <nrfx_gpiote_input_configure+0x1d4>)
   1d5c4:	f104 0208 	add.w	r2, r4, #8
   1d5c8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   1d5cc:	f027 0720 	bic.w	r7, r7, #32
   1d5d0:	04ff      	lsls	r7, r7, #19
   1d5d2:	0cff      	lsrs	r7, r7, #19
   1d5d4:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   1d5d8:	f1b9 0f00 	cmp.w	r9, #0
   1d5dc:	d0d8      	beq.n	1d590 <nrfx_gpiote_input_configure+0xec>
                if (!edge)
   1d5de:	f1b8 0f03 	cmp.w	r8, #3
   1d5e2:	d83b      	bhi.n	1d65c <nrfx_gpiote_input_configure+0x1b8>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1d5e4:	686b      	ldr	r3, [r5, #4]
   1d5e6:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1d5e8:	f1b8 0f00 	cmp.w	r8, #0
   1d5ec:	d106      	bne.n	1d5fc <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
   1d5ee:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   1d5f2:	4b22      	ldr	r3, [pc, #136]	; (1d67c <nrfx_gpiote_input_configure+0x1d8>)
   1d5f4:	2200      	movs	r2, #0
   1d5f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1d5fa:	e7c9      	b.n	1d590 <nrfx_gpiote_input_configure+0xec>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   1d5fc:	4640      	mov	r0, r8
   1d5fe:	f00b fffe 	bl	295fe <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1d602:	4b1e      	ldr	r3, [pc, #120]	; (1d67c <nrfx_gpiote_input_configure+0x1d8>)
   1d604:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   1d608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1d60c:	f021 0103 	bic.w	r1, r1, #3
   1d610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1d618:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1d61c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1d620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d624:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   1d628:	0221      	lsls	r1, r4, #8
   1d62a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1d62e:	0400      	lsls	r0, r0, #16
   1d630:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d634:	4301      	orrs	r1, r0
   1d636:	ea4c 0101 	orr.w	r1, ip, r1
   1d63a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1d63e:	036d      	lsls	r5, r5, #13
   1d640:	b2ad      	uxth	r5, r5
   1d642:	f104 0308 	add.w	r3, r4, #8
   1d646:	432f      	orrs	r7, r5
   1d648:	f047 0720 	orr.w	r7, r7, #32
   1d64c:	4a0a      	ldr	r2, [pc, #40]	; (1d678 <nrfx_gpiote_input_configure+0x1d4>)
   1d64e:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   1d652:	e79d      	b.n	1d590 <nrfx_gpiote_input_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
   1d654:	480a      	ldr	r0, [pc, #40]	; (1d680 <nrfx_gpiote_input_configure+0x1dc>)
   1d656:	e7ae      	b.n	1d5b6 <nrfx_gpiote_input_configure+0x112>
                return NRFX_ERROR_INVALID_PARAM;
   1d658:	4809      	ldr	r0, [pc, #36]	; (1d680 <nrfx_gpiote_input_configure+0x1dc>)
   1d65a:	e7ac      	b.n	1d5b6 <nrfx_gpiote_input_configure+0x112>
                    return NRFX_ERROR_INVALID_PARAM;
   1d65c:	4808      	ldr	r0, [pc, #32]	; (1d680 <nrfx_gpiote_input_configure+0x1dc>)
   1d65e:	e7aa      	b.n	1d5b6 <nrfx_gpiote_input_configure+0x112>
        err = NRFX_SUCCESS;
   1d660:	4808      	ldr	r0, [pc, #32]	; (1d684 <nrfx_gpiote_input_configure+0x1e0>)
   1d662:	e7a8      	b.n	1d5b6 <nrfx_gpiote_input_configure+0x112>
   1d664:	0002dc18 	.word	0x0002dc18
   1d668:	00029ff8 	.word	0x00029ff8
   1d66c:	0002cafc 	.word	0x0002cafc
   1d670:	0002cb30 	.word	0x0002cb30
   1d674:	50000300 	.word	0x50000300
   1d678:	200005b4 	.word	0x200005b4
   1d67c:	40006000 	.word	0x40006000
   1d680:	0bad0004 	.word	0x0bad0004
   1d684:	0bad0000 	.word	0x0bad0000

0001d688 <nrfx_gpiote_output_configure>:
{
   1d688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d68c:	4604      	mov	r4, r0
   1d68e:	4615      	mov	r5, r2
    if (p_config)
   1d690:	2900      	cmp	r1, #0
   1d692:	f000 8086 	beq.w	1d7a2 <nrfx_gpiote_output_configure+0x11a>
   1d696:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1d698:	f00b ffa9 	bl	295ee <pin_is_input>
   1d69c:	b128      	cbz	r0, 1d6aa <nrfx_gpiote_output_configure+0x22>
   1d69e:	4620      	mov	r0, r4
   1d6a0:	f7ff fb8e 	bl	1cdc0 <pin_in_use_by_te>
   1d6a4:	2800      	cmp	r0, #0
   1d6a6:	f040 80cc 	bne.w	1d842 <nrfx_gpiote_output_configure+0x1ba>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1d6aa:	4620      	mov	r0, r4
   1d6ac:	f7ff fb92 	bl	1cdd4 <pin_has_trigger>
   1d6b0:	b118      	cbz	r0, 1d6ba <nrfx_gpiote_output_configure+0x32>
   1d6b2:	787b      	ldrb	r3, [r7, #1]
   1d6b4:	2b01      	cmp	r3, #1
   1d6b6:	f000 80c6 	beq.w	1d846 <nrfx_gpiote_output_configure+0x1be>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1d6ba:	f107 0901 	add.w	r9, r7, #1
   1d6be:	f107 0802 	add.w	r8, r7, #2
    switch (port)
   1d6c2:	0963      	lsrs	r3, r4, #5
   1d6c4:	d020      	beq.n	1d708 <nrfx_gpiote_output_configure+0x80>
   1d6c6:	2b01      	cmp	r3, #1
   1d6c8:	d121      	bne.n	1d70e <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
   1d6ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1d6ce:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d6d2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d6d4:	f013 0f01 	tst.w	r3, #1
   1d6d8:	d01b      	beq.n	1d712 <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
   1d6da:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d6de:	0963      	lsrs	r3, r4, #5
   1d6e0:	d025      	beq.n	1d72e <nrfx_gpiote_output_configure+0xa6>
   1d6e2:	2b01      	cmp	r3, #1
   1d6e4:	d026      	beq.n	1d734 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
   1d6e6:	f8df a178 	ldr.w	sl, [pc, #376]	; 1d860 <nrfx_gpiote_output_configure+0x1d8>
   1d6ea:	f240 232e 	movw	r3, #558	; 0x22e
   1d6ee:	4652      	mov	r2, sl
   1d6f0:	4959      	ldr	r1, [pc, #356]	; (1d858 <nrfx_gpiote_output_configure+0x1d0>)
   1d6f2:	485a      	ldr	r0, [pc, #360]	; (1d85c <nrfx_gpiote_output_configure+0x1d4>)
   1d6f4:	f008 f89b 	bl	2582e <printk>
   1d6f8:	f240 212e 	movw	r1, #558	; 0x22e
   1d6fc:	4650      	mov	r0, sl
   1d6fe:	f008 fb18 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1d702:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1d706:	e016      	b.n	1d736 <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
   1d708:	f04f 33ff 	mov.w	r3, #4294967295
   1d70c:	e7df      	b.n	1d6ce <nrfx_gpiote_output_configure+0x46>
    switch (port)
   1d70e:	2300      	movs	r3, #0
   1d710:	e7dd      	b.n	1d6ce <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d712:	4e53      	ldr	r6, [pc, #332]	; (1d860 <nrfx_gpiote_output_configure+0x1d8>)
   1d714:	f240 2329 	movw	r3, #553	; 0x229
   1d718:	4632      	mov	r2, r6
   1d71a:	4952      	ldr	r1, [pc, #328]	; (1d864 <nrfx_gpiote_output_configure+0x1dc>)
   1d71c:	484f      	ldr	r0, [pc, #316]	; (1d85c <nrfx_gpiote_output_configure+0x1d4>)
   1d71e:	f008 f886 	bl	2582e <printk>
   1d722:	f240 2129 	movw	r1, #553	; 0x229
   1d726:	4630      	mov	r0, r6
   1d728:	f008 fb03 	bl	25d32 <assert_post_action>
   1d72c:	e7d5      	b.n	1d6da <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
   1d72e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1d732:	e000      	b.n	1d736 <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d734:	4a4c      	ldr	r2, [pc, #304]	; (1d868 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1d736:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
   1d73a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1d73e:	f1b9 0f00 	cmp.w	r9, #0
   1d742:	d072      	beq.n	1d82a <nrfx_gpiote_output_configure+0x1a2>
   1d744:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1d746:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1d74a:	f1b8 0f00 	cmp.w	r8, #0
   1d74e:	d06e      	beq.n	1d82e <nrfx_gpiote_output_configure+0x1a6>
   1d750:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1d752:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1d754:	2f00      	cmp	r7, #0
   1d756:	d06c      	beq.n	1d832 <nrfx_gpiote_output_configure+0x1aa>
   1d758:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1d75c:	4303      	orrs	r3, r0
    cnf &= ~to_update;
   1d75e:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1d762:	f1b9 0f00 	cmp.w	r9, #0
   1d766:	d066      	beq.n	1d836 <nrfx_gpiote_output_configure+0x1ae>
   1d768:	787b      	ldrb	r3, [r7, #1]
   1d76a:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1d76c:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1d770:	f1b8 0f00 	cmp.w	r8, #0
   1d774:	d061      	beq.n	1d83a <nrfx_gpiote_output_configure+0x1b2>
   1d776:	78b8      	ldrb	r0, [r7, #2]
   1d778:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1d77a:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1d77c:	2f00      	cmp	r7, #0
   1d77e:	d05e      	beq.n	1d83e <nrfx_gpiote_output_configure+0x1b6>
   1d780:	7838      	ldrb	r0, [r7, #0]
   1d782:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1d784:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1d786:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   1d788:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1d78c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1d790:	4a36      	ldr	r2, [pc, #216]	; (1d86c <nrfx_gpiote_output_configure+0x1e4>)
   1d792:	f104 0108 	add.w	r1, r4, #8
   1d796:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1d79a:	f043 0303 	orr.w	r3, r3, #3
   1d79e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1d7a2:	2d00      	cmp	r5, #0
   1d7a4:	d051      	beq.n	1d84a <nrfx_gpiote_output_configure+0x1c2>
        if (pin_is_input(pin))
   1d7a6:	4620      	mov	r0, r4
   1d7a8:	f00b ff21 	bl	295ee <pin_is_input>
   1d7ac:	2800      	cmp	r0, #0
   1d7ae:	d14f      	bne.n	1d850 <nrfx_gpiote_output_configure+0x1c8>
        uint32_t ch = p_task_config->task_ch;
   1d7b0:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   1d7b2:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   1d7b6:	4b2e      	ldr	r3, [pc, #184]	; (1d870 <nrfx_gpiote_output_configure+0x1e8>)
   1d7b8:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1d7bc:	492b      	ldr	r1, [pc, #172]	; (1d86c <nrfx_gpiote_output_configure+0x1e4>)
   1d7be:	f104 0008 	add.w	r0, r4, #8
   1d7c2:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   1d7c6:	f023 0320 	bic.w	r3, r3, #32
   1d7ca:	04db      	lsls	r3, r3, #19
   1d7cc:	0cdb      	lsrs	r3, r3, #19
   1d7ce:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1d7d2:	7869      	ldrb	r1, [r5, #1]
   1d7d4:	2900      	cmp	r1, #0
   1d7d6:	d03d      	beq.n	1d854 <nrfx_gpiote_output_configure+0x1cc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1d7d8:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1d7dc:	4d24      	ldr	r5, [pc, #144]	; (1d870 <nrfx_gpiote_output_configure+0x1e8>)
   1d7de:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   1d7e2:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1d7e6:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
   1d7ea:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   1d7ee:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d7f2:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   1d7f6:	0220      	lsls	r0, r4, #8
   1d7f8:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1d7fc:	0409      	lsls	r1, r1, #16
   1d7fe:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d802:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1d804:	ea4f 500c 	mov.w	r0, ip, lsl #20
   1d808:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1d80c:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d80e:	4339      	orrs	r1, r7
   1d810:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1d814:	0352      	lsls	r2, r2, #13
   1d816:	b292      	uxth	r2, r2
   1d818:	3408      	adds	r4, #8
   1d81a:	431a      	orrs	r2, r3
   1d81c:	f042 0220 	orr.w	r2, r2, #32
   1d820:	4b12      	ldr	r3, [pc, #72]	; (1d86c <nrfx_gpiote_output_configure+0x1e4>)
   1d822:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   1d826:	4813      	ldr	r0, [pc, #76]	; (1d874 <nrfx_gpiote_output_configure+0x1ec>)
   1d828:	e010      	b.n	1d84c <nrfx_gpiote_output_configure+0x1c4>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1d82a:	2300      	movs	r3, #0
   1d82c:	e78b      	b.n	1d746 <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1d82e:	2000      	movs	r0, #0
   1d830:	e78f      	b.n	1d752 <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1d832:	2000      	movs	r0, #0
   1d834:	e792      	b.n	1d75c <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1d836:	2300      	movs	r3, #0
   1d838:	e798      	b.n	1d76c <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1d83a:	2000      	movs	r0, #0
   1d83c:	e79d      	b.n	1d77a <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1d83e:	2000      	movs	r0, #0
   1d840:	e7a0      	b.n	1d784 <nrfx_gpiote_output_configure+0xfc>
   1d842:	480d      	ldr	r0, [pc, #52]	; (1d878 <nrfx_gpiote_output_configure+0x1f0>)
   1d844:	e002      	b.n	1d84c <nrfx_gpiote_output_configure+0x1c4>
   1d846:	480c      	ldr	r0, [pc, #48]	; (1d878 <nrfx_gpiote_output_configure+0x1f0>)
   1d848:	e000      	b.n	1d84c <nrfx_gpiote_output_configure+0x1c4>
   1d84a:	480a      	ldr	r0, [pc, #40]	; (1d874 <nrfx_gpiote_output_configure+0x1ec>)
}
   1d84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return NRFX_ERROR_INVALID_PARAM;
   1d850:	4809      	ldr	r0, [pc, #36]	; (1d878 <nrfx_gpiote_output_configure+0x1f0>)
   1d852:	e7fb      	b.n	1d84c <nrfx_gpiote_output_configure+0x1c4>
    return NRFX_SUCCESS;
   1d854:	4807      	ldr	r0, [pc, #28]	; (1d874 <nrfx_gpiote_output_configure+0x1ec>)
   1d856:	e7f9      	b.n	1d84c <nrfx_gpiote_output_configure+0x1c4>
   1d858:	0002dc18 	.word	0x0002dc18
   1d85c:	00029ff8 	.word	0x00029ff8
   1d860:	0002cafc 	.word	0x0002cafc
   1d864:	0002cb30 	.word	0x0002cb30
   1d868:	50000300 	.word	0x50000300
   1d86c:	200005b4 	.word	0x200005b4
   1d870:	40006000 	.word	0x40006000
   1d874:	0bad0000 	.word	0x0bad0000
   1d878:	0bad0004 	.word	0x0bad0004

0001d87c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1d87c:	4b01      	ldr	r3, [pc, #4]	; (1d884 <nrfx_gpiote_global_callback_set+0x8>)
   1d87e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   1d880:	60d9      	str	r1, [r3, #12]
}
   1d882:	4770      	bx	lr
   1d884:	200005b4 	.word	0x200005b4

0001d888 <nrfx_gpiote_channel_get>:
{
   1d888:	b570      	push	{r4, r5, r6, lr}
   1d88a:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   1d88c:	460d      	mov	r5, r1
   1d88e:	b159      	cbz	r1, 1d8a8 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
   1d890:	4620      	mov	r0, r4
   1d892:	f7ff fa95 	bl	1cdc0 <pin_in_use_by_te>
   1d896:	b1a8      	cbz	r0, 1d8c4 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d898:	3408      	adds	r4, #8
   1d89a:	4b0b      	ldr	r3, [pc, #44]	; (1d8c8 <nrfx_gpiote_channel_get+0x40>)
   1d89c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   1d8a0:	0b5b      	lsrs	r3, r3, #13
   1d8a2:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   1d8a4:	4809      	ldr	r0, [pc, #36]	; (1d8cc <nrfx_gpiote_channel_get+0x44>)
}
   1d8a6:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
   1d8a8:	4e09      	ldr	r6, [pc, #36]	; (1d8d0 <nrfx_gpiote_channel_get+0x48>)
   1d8aa:	f240 2335 	movw	r3, #565	; 0x235
   1d8ae:	4632      	mov	r2, r6
   1d8b0:	4908      	ldr	r1, [pc, #32]	; (1d8d4 <nrfx_gpiote_channel_get+0x4c>)
   1d8b2:	4809      	ldr	r0, [pc, #36]	; (1d8d8 <nrfx_gpiote_channel_get+0x50>)
   1d8b4:	f007 ffbb 	bl	2582e <printk>
   1d8b8:	f240 2135 	movw	r1, #565	; 0x235
   1d8bc:	4630      	mov	r0, r6
   1d8be:	f008 fa38 	bl	25d32 <assert_post_action>
   1d8c2:	e7e5      	b.n	1d890 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
   1d8c4:	4805      	ldr	r0, [pc, #20]	; (1d8dc <nrfx_gpiote_channel_get+0x54>)
   1d8c6:	e7ee      	b.n	1d8a6 <nrfx_gpiote_channel_get+0x1e>
   1d8c8:	200005b4 	.word	0x200005b4
   1d8cc:	0bad0000 	.word	0x0bad0000
   1d8d0:	0002d0f0 	.word	0x0002d0f0
   1d8d4:	0002d144 	.word	0x0002d144
   1d8d8:	00029ff8 	.word	0x00029ff8
   1d8dc:	0bad0004 	.word	0x0bad0004

0001d8e0 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d8e0:	4b0f      	ldr	r3, [pc, #60]	; (1d920 <nrfx_gpiote_init+0x40>)
   1d8e2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1d8e6:	b10b      	cbz	r3, 1d8ec <nrfx_gpiote_init+0xc>
        return err_code;
   1d8e8:	480e      	ldr	r0, [pc, #56]	; (1d924 <nrfx_gpiote_init+0x44>)
}
   1d8ea:	4770      	bx	lr
{
   1d8ec:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1d8ee:	4c0c      	ldr	r4, [pc, #48]	; (1d920 <nrfx_gpiote_init+0x40>)
   1d8f0:	2260      	movs	r2, #96	; 0x60
   1d8f2:	2100      	movs	r1, #0
   1d8f4:	f104 0010 	add.w	r0, r4, #16
   1d8f8:	f008 ffa2 	bl	26840 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1d8fc:	2006      	movs	r0, #6
   1d8fe:	f7f5 fc83 	bl	13208 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d902:	4b09      	ldr	r3, [pc, #36]	; (1d928 <nrfx_gpiote_init+0x48>)
   1d904:	2200      	movs	r2, #0
   1d906:	601a      	str	r2, [r3, #0]
   1d908:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1d90a:	4b08      	ldr	r3, [pc, #32]	; (1d92c <nrfx_gpiote_init+0x4c>)
   1d90c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d910:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1d914:	2301      	movs	r3, #1
   1d916:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1d91a:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
   1d91c:	4804      	ldr	r0, [pc, #16]	; (1d930 <nrfx_gpiote_init+0x50>)
}
   1d91e:	bd10      	pop	{r4, pc}
   1d920:	200005b4 	.word	0x200005b4
   1d924:	0bad0005 	.word	0x0bad0005
   1d928:	4000617c 	.word	0x4000617c
   1d92c:	40006000 	.word	0x40006000
   1d930:	0bad0000 	.word	0x0bad0000

0001d934 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1d934:	4b03      	ldr	r3, [pc, #12]	; (1d944 <nrfx_gpiote_is_init+0x10>)
   1d936:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1d93a:	3800      	subs	r0, #0
   1d93c:	bf18      	it	ne
   1d93e:	2001      	movne	r0, #1
   1d940:	4770      	bx	lr
   1d942:	bf00      	nop
   1d944:	200005b4 	.word	0x200005b4

0001d948 <nrfx_gpiote_channel_free>:
{
   1d948:	b508      	push	{r3, lr}
   1d94a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1d94c:	4801      	ldr	r0, [pc, #4]	; (1d954 <nrfx_gpiote_channel_free+0xc>)
   1d94e:	f7ff fa09 	bl	1cd64 <nrfx_flag32_free>
}
   1d952:	bd08      	pop	{r3, pc}
   1d954:	20000624 	.word	0x20000624

0001d958 <nrfx_gpiote_channel_alloc>:
{
   1d958:	b508      	push	{r3, lr}
   1d95a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1d95c:	4801      	ldr	r0, [pc, #4]	; (1d964 <nrfx_gpiote_channel_alloc+0xc>)
   1d95e:	f7ff f9dd 	bl	1cd1c <nrfx_flag32_alloc>
}
   1d962:	bd08      	pop	{r3, pc}
   1d964:	20000624 	.word	0x20000624

0001d968 <nrfx_gpiote_trigger_enable>:
{
   1d968:	b570      	push	{r4, r5, r6, lr}
   1d96a:	4604      	mov	r4, r0
   1d96c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   1d96e:	f7ff fa31 	bl	1cdd4 <pin_has_trigger>
   1d972:	b1b8      	cbz	r0, 1d9a4 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d974:	4620      	mov	r0, r4
   1d976:	f7ff fa23 	bl	1cdc0 <pin_in_use_by_te>
   1d97a:	b118      	cbz	r0, 1d984 <nrfx_gpiote_trigger_enable+0x1c>
   1d97c:	4620      	mov	r0, r4
   1d97e:	f00b fe36 	bl	295ee <pin_is_input>
   1d982:	b9e8      	cbnz	r0, 1d9c0 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
   1d984:	2d00      	cmp	r5, #0
   1d986:	d04c      	beq.n	1da22 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d988:	f104 0308 	add.w	r3, r4, #8
   1d98c:	4a70      	ldr	r2, [pc, #448]	; (1db50 <nrfx_gpiote_trigger_enable+0x1e8>)
   1d98e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1d992:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1d996:	2b04      	cmp	r3, #4
   1d998:	f000 8092 	beq.w	1dac0 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1d99c:	2b05      	cmp	r3, #5
   1d99e:	d14e      	bne.n	1da3e <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1d9a0:	2602      	movs	r6, #2
   1d9a2:	e08e      	b.n	1dac2 <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
   1d9a4:	4e6b      	ldr	r6, [pc, #428]	; (1db54 <nrfx_gpiote_trigger_enable+0x1ec>)
   1d9a6:	f240 33df 	movw	r3, #991	; 0x3df
   1d9aa:	4632      	mov	r2, r6
   1d9ac:	496a      	ldr	r1, [pc, #424]	; (1db58 <nrfx_gpiote_trigger_enable+0x1f0>)
   1d9ae:	486b      	ldr	r0, [pc, #428]	; (1db5c <nrfx_gpiote_trigger_enable+0x1f4>)
   1d9b0:	f007 ff3d 	bl	2582e <printk>
   1d9b4:	f240 31df 	movw	r1, #991	; 0x3df
   1d9b8:	4630      	mov	r0, r6
   1d9ba:	f008 f9ba 	bl	25d32 <assert_post_action>
   1d9be:	e7d9      	b.n	1d974 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
   1d9c0:	4620      	mov	r0, r4
   1d9c2:	f7ff fa1d 	bl	1ce00 <pin_te_get>
   1d9c6:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   1d9c8:	2807      	cmp	r0, #7
   1d9ca:	d81c      	bhi.n	1da06 <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1d9cc:	00a3      	lsls	r3, r4, #2
   1d9ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1d9d2:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
   1d9d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d9d8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d9dc:	2200      	movs	r2, #0
   1d9de:	601a      	str	r2, [r3, #0]
   1d9e0:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d9e2:	4a5f      	ldr	r2, [pc, #380]	; (1db60 <nrfx_gpiote_trigger_enable+0x1f8>)
   1d9e4:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   1d9e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1d9ec:	f043 0301 	orr.w	r3, r3, #1
   1d9f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   1d9f4:	2d00      	cmp	r5, #0
   1d9f6:	f000 80a9 	beq.w	1db4c <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1d9fa:	2001      	movs	r0, #1
   1d9fc:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
   1da00:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
   1da04:	e0a2      	b.n	1db4c <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   1da06:	4e57      	ldr	r6, [pc, #348]	; (1db64 <nrfx_gpiote_trigger_enable+0x1fc>)
   1da08:	f44f 7323 	mov.w	r3, #652	; 0x28c
   1da0c:	4632      	mov	r2, r6
   1da0e:	4956      	ldr	r1, [pc, #344]	; (1db68 <nrfx_gpiote_trigger_enable+0x200>)
   1da10:	4852      	ldr	r0, [pc, #328]	; (1db5c <nrfx_gpiote_trigger_enable+0x1f4>)
   1da12:	f007 ff0c 	bl	2582e <printk>
   1da16:	f44f 7123 	mov.w	r1, #652	; 0x28c
   1da1a:	4630      	mov	r0, r6
   1da1c:	f008 f989 	bl	25d32 <assert_post_action>
   1da20:	e7d4      	b.n	1d9cc <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
   1da22:	4d4c      	ldr	r5, [pc, #304]	; (1db54 <nrfx_gpiote_trigger_enable+0x1ec>)
   1da24:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1da28:	462a      	mov	r2, r5
   1da2a:	4950      	ldr	r1, [pc, #320]	; (1db6c <nrfx_gpiote_trigger_enable+0x204>)
   1da2c:	484b      	ldr	r0, [pc, #300]	; (1db5c <nrfx_gpiote_trigger_enable+0x1f4>)
   1da2e:	f007 fefe 	bl	2582e <printk>
   1da32:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1da36:	4628      	mov	r0, r5
   1da38:	f008 f97b 	bl	25d32 <assert_post_action>
   1da3c:	e7a4      	b.n	1d988 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
   1da3e:	0963      	lsrs	r3, r4, #5
   1da40:	d01f      	beq.n	1da82 <nrfx_gpiote_trigger_enable+0x11a>
   1da42:	2b01      	cmp	r3, #1
   1da44:	d120      	bne.n	1da88 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
   1da46:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1da4a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1da4e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1da50:	f013 0f01 	tst.w	r3, #1
   1da54:	d01a      	beq.n	1da8c <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
   1da56:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1da5a:	0963      	lsrs	r3, r4, #5
   1da5c:	d024      	beq.n	1daa8 <nrfx_gpiote_trigger_enable+0x140>
   1da5e:	2b01      	cmp	r3, #1
   1da60:	d025      	beq.n	1daae <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
   1da62:	4e43      	ldr	r6, [pc, #268]	; (1db70 <nrfx_gpiote_trigger_enable+0x208>)
   1da64:	f240 232e 	movw	r3, #558	; 0x22e
   1da68:	4632      	mov	r2, r6
   1da6a:	4942      	ldr	r1, [pc, #264]	; (1db74 <nrfx_gpiote_trigger_enable+0x20c>)
   1da6c:	483b      	ldr	r0, [pc, #236]	; (1db5c <nrfx_gpiote_trigger_enable+0x1f4>)
   1da6e:	f007 fede 	bl	2582e <printk>
   1da72:	f240 212e 	movw	r1, #558	; 0x22e
   1da76:	4630      	mov	r0, r6
   1da78:	f008 f95b 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1da7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1da80:	e016      	b.n	1dab0 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
   1da82:	f04f 33ff 	mov.w	r3, #4294967295
   1da86:	e7e0      	b.n	1da4a <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
   1da88:	2300      	movs	r3, #0
   1da8a:	e7de      	b.n	1da4a <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1da8c:	4d38      	ldr	r5, [pc, #224]	; (1db70 <nrfx_gpiote_trigger_enable+0x208>)
   1da8e:	f240 2329 	movw	r3, #553	; 0x229
   1da92:	462a      	mov	r2, r5
   1da94:	4938      	ldr	r1, [pc, #224]	; (1db78 <nrfx_gpiote_trigger_enable+0x210>)
   1da96:	4831      	ldr	r0, [pc, #196]	; (1db5c <nrfx_gpiote_trigger_enable+0x1f4>)
   1da98:	f007 fec9 	bl	2582e <printk>
   1da9c:	f240 2129 	movw	r1, #553	; 0x229
   1daa0:	4628      	mov	r0, r5
   1daa2:	f008 f946 	bl	25d32 <assert_post_action>
   1daa6:	e7d6      	b.n	1da56 <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
   1daa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1daac:	e000      	b.n	1dab0 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1daae:	4b33      	ldr	r3, [pc, #204]	; (1db7c <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
   1dab0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1dab4:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1dab6:	f013 0f01 	tst.w	r3, #1
   1daba:	d024      	beq.n	1db06 <nrfx_gpiote_trigger_enable+0x19e>
   1dabc:	2603      	movs	r6, #3
   1dabe:	e000      	b.n	1dac2 <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1dac0:	2603      	movs	r6, #3
    switch (port)
   1dac2:	0963      	lsrs	r3, r4, #5
   1dac4:	d021      	beq.n	1db0a <nrfx_gpiote_trigger_enable+0x1a2>
   1dac6:	2b01      	cmp	r3, #1
   1dac8:	d122      	bne.n	1db10 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
   1daca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1dace:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1dad2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dad4:	f013 0f01 	tst.w	r3, #1
   1dad8:	d01c      	beq.n	1db14 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
   1dada:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dade:	0964      	lsrs	r4, r4, #5
   1dae0:	d026      	beq.n	1db30 <nrfx_gpiote_trigger_enable+0x1c8>
   1dae2:	2c01      	cmp	r4, #1
   1dae4:	d027      	beq.n	1db36 <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
   1dae6:	4c22      	ldr	r4, [pc, #136]	; (1db70 <nrfx_gpiote_trigger_enable+0x208>)
   1dae8:	f240 232e 	movw	r3, #558	; 0x22e
   1daec:	4622      	mov	r2, r4
   1daee:	4921      	ldr	r1, [pc, #132]	; (1db74 <nrfx_gpiote_trigger_enable+0x20c>)
   1daf0:	481a      	ldr	r0, [pc, #104]	; (1db5c <nrfx_gpiote_trigger_enable+0x1f4>)
   1daf2:	f007 fe9c 	bl	2582e <printk>
   1daf6:	f240 212e 	movw	r1, #558	; 0x22e
   1dafa:	4620      	mov	r0, r4
   1dafc:	f008 f919 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1db00:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1db04:	e018      	b.n	1db38 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1db06:	2602      	movs	r6, #2
   1db08:	e7db      	b.n	1dac2 <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
   1db0a:	f04f 33ff 	mov.w	r3, #4294967295
   1db0e:	e7de      	b.n	1dace <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
   1db10:	2300      	movs	r3, #0
   1db12:	e7dc      	b.n	1dace <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1db14:	4d16      	ldr	r5, [pc, #88]	; (1db70 <nrfx_gpiote_trigger_enable+0x208>)
   1db16:	f240 2329 	movw	r3, #553	; 0x229
   1db1a:	462a      	mov	r2, r5
   1db1c:	4916      	ldr	r1, [pc, #88]	; (1db78 <nrfx_gpiote_trigger_enable+0x210>)
   1db1e:	480f      	ldr	r0, [pc, #60]	; (1db5c <nrfx_gpiote_trigger_enable+0x1f4>)
   1db20:	f007 fe85 	bl	2582e <printk>
   1db24:	f240 2129 	movw	r1, #553	; 0x229
   1db28:	4628      	mov	r0, r5
   1db2a:	f008 f902 	bl	25d32 <assert_post_action>
   1db2e:	e7d4      	b.n	1dada <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
   1db30:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1db34:	e000      	b.n	1db38 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1db36:	4911      	ldr	r1, [pc, #68]	; (1db7c <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1db38:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
   1db3c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   1db40:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1db44:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1db48:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   1db4c:	bd70      	pop	{r4, r5, r6, pc}
   1db4e:	bf00      	nop
   1db50:	200005b4 	.word	0x200005b4
   1db54:	0002d0f0 	.word	0x0002d0f0
   1db58:	0002d194 	.word	0x0002d194
   1db5c:	00029ff8 	.word	0x00029ff8
   1db60:	40006000 	.word	0x40006000
   1db64:	0002d150 	.word	0x0002d150
   1db68:	0002d188 	.word	0x0002d188
   1db6c:	0002d1ac 	.word	0x0002d1ac
   1db70:	0002cafc 	.word	0x0002cafc
   1db74:	0002dc18 	.word	0x0002dc18
   1db78:	0002cb30 	.word	0x0002cb30
   1db7c:	50000300 	.word	0x50000300

0001db80 <nrfx_gpiote_trigger_disable>:
{
   1db80:	b538      	push	{r3, r4, r5, lr}
   1db82:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1db84:	f7ff f91c 	bl	1cdc0 <pin_in_use_by_te>
   1db88:	b1a0      	cbz	r0, 1dbb4 <nrfx_gpiote_trigger_disable+0x34>
   1db8a:	4620      	mov	r0, r4
   1db8c:	f00b fd2f 	bl	295ee <pin_is_input>
   1db90:	b180      	cbz	r0, 1dbb4 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   1db92:	4620      	mov	r0, r4
   1db94:	f7ff f934 	bl	1ce00 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1db98:	2201      	movs	r2, #1
   1db9a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   1db9c:	4b26      	ldr	r3, [pc, #152]	; (1dc38 <nrfx_gpiote_trigger_disable+0xb8>)
   1db9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1dba2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1dba6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   1dbaa:	f022 0203 	bic.w	r2, r2, #3
   1dbae:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   1dbb2:	e040      	b.n	1dc36 <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
   1dbb4:	0963      	lsrs	r3, r4, #5
   1dbb6:	d01f      	beq.n	1dbf8 <nrfx_gpiote_trigger_disable+0x78>
   1dbb8:	2b01      	cmp	r3, #1
   1dbba:	d120      	bne.n	1dbfe <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
   1dbbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1dbc0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1dbc4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dbc6:	f013 0f01 	tst.w	r3, #1
   1dbca:	d01a      	beq.n	1dc02 <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
   1dbcc:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dbd0:	0964      	lsrs	r4, r4, #5
   1dbd2:	d024      	beq.n	1dc1e <nrfx_gpiote_trigger_disable+0x9e>
   1dbd4:	2c01      	cmp	r4, #1
   1dbd6:	d025      	beq.n	1dc24 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
   1dbd8:	4c18      	ldr	r4, [pc, #96]	; (1dc3c <nrfx_gpiote_trigger_disable+0xbc>)
   1dbda:	f240 232e 	movw	r3, #558	; 0x22e
   1dbde:	4622      	mov	r2, r4
   1dbe0:	4917      	ldr	r1, [pc, #92]	; (1dc40 <nrfx_gpiote_trigger_disable+0xc0>)
   1dbe2:	4818      	ldr	r0, [pc, #96]	; (1dc44 <nrfx_gpiote_trigger_disable+0xc4>)
   1dbe4:	f007 fe23 	bl	2582e <printk>
   1dbe8:	f240 212e 	movw	r1, #558	; 0x22e
   1dbec:	4620      	mov	r0, r4
   1dbee:	f008 f8a0 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1dbf2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1dbf6:	e016      	b.n	1dc26 <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
   1dbf8:	f04f 33ff 	mov.w	r3, #4294967295
   1dbfc:	e7e0      	b.n	1dbc0 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
   1dbfe:	2300      	movs	r3, #0
   1dc00:	e7de      	b.n	1dbc0 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dc02:	4d0e      	ldr	r5, [pc, #56]	; (1dc3c <nrfx_gpiote_trigger_disable+0xbc>)
   1dc04:	f240 2329 	movw	r3, #553	; 0x229
   1dc08:	462a      	mov	r2, r5
   1dc0a:	490f      	ldr	r1, [pc, #60]	; (1dc48 <nrfx_gpiote_trigger_disable+0xc8>)
   1dc0c:	480d      	ldr	r0, [pc, #52]	; (1dc44 <nrfx_gpiote_trigger_disable+0xc4>)
   1dc0e:	f007 fe0e 	bl	2582e <printk>
   1dc12:	f240 2129 	movw	r1, #553	; 0x229
   1dc16:	4628      	mov	r0, r5
   1dc18:	f008 f88b 	bl	25d32 <assert_post_action>
   1dc1c:	e7d6      	b.n	1dbcc <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
   1dc1e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1dc22:	e000      	b.n	1dc26 <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dc24:	4909      	ldr	r1, [pc, #36]	; (1dc4c <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1dc26:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   1dc2a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1dc2e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1dc32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1dc36:	bd38      	pop	{r3, r4, r5, pc}
   1dc38:	40006000 	.word	0x40006000
   1dc3c:	0002cafc 	.word	0x0002cafc
   1dc40:	0002dc18 	.word	0x0002dc18
   1dc44:	00029ff8 	.word	0x00029ff8
   1dc48:	0002cb30 	.word	0x0002cb30
   1dc4c:	50000300 	.word	0x50000300

0001dc50 <nrfx_gpiote_pin_uninit>:
{
   1dc50:	b538      	push	{r3, r4, r5, lr}
   1dc52:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1dc54:	f7ff f8aa 	bl	1cdac <pin_in_use>
   1dc58:	b908      	cbnz	r0, 1dc5e <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   1dc5a:	4824      	ldr	r0, [pc, #144]	; (1dcec <nrfx_gpiote_pin_uninit+0x9c>)
}
   1dc5c:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
   1dc5e:	4620      	mov	r0, r4
   1dc60:	f7ff ff8e 	bl	1db80 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1dc64:	4620      	mov	r0, r4
   1dc66:	f7ff f98d 	bl	1cf84 <pin_handler_trigger_uninit>
    switch (port)
   1dc6a:	0963      	lsrs	r3, r4, #5
   1dc6c:	d01f      	beq.n	1dcae <nrfx_gpiote_pin_uninit+0x5e>
   1dc6e:	2b01      	cmp	r3, #1
   1dc70:	d120      	bne.n	1dcb4 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
   1dc72:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1dc76:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1dc7a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dc7c:	f013 0f01 	tst.w	r3, #1
   1dc80:	d01a      	beq.n	1dcb8 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
   1dc82:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dc86:	0964      	lsrs	r4, r4, #5
   1dc88:	d024      	beq.n	1dcd4 <nrfx_gpiote_pin_uninit+0x84>
   1dc8a:	2c01      	cmp	r4, #1
   1dc8c:	d025      	beq.n	1dcda <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
   1dc8e:	4c18      	ldr	r4, [pc, #96]	; (1dcf0 <nrfx_gpiote_pin_uninit+0xa0>)
   1dc90:	f240 232e 	movw	r3, #558	; 0x22e
   1dc94:	4622      	mov	r2, r4
   1dc96:	4917      	ldr	r1, [pc, #92]	; (1dcf4 <nrfx_gpiote_pin_uninit+0xa4>)
   1dc98:	4817      	ldr	r0, [pc, #92]	; (1dcf8 <nrfx_gpiote_pin_uninit+0xa8>)
   1dc9a:	f007 fdc8 	bl	2582e <printk>
   1dc9e:	f240 212e 	movw	r1, #558	; 0x22e
   1dca2:	4620      	mov	r0, r4
   1dca4:	f008 f845 	bl	25d32 <assert_post_action>
        case 0: return NRF_P0;
   1dca8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1dcac:	e016      	b.n	1dcdc <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
   1dcae:	f04f 33ff 	mov.w	r3, #4294967295
   1dcb2:	e7e0      	b.n	1dc76 <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
   1dcb4:	2300      	movs	r3, #0
   1dcb6:	e7de      	b.n	1dc76 <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dcb8:	4d0d      	ldr	r5, [pc, #52]	; (1dcf0 <nrfx_gpiote_pin_uninit+0xa0>)
   1dcba:	f240 2329 	movw	r3, #553	; 0x229
   1dcbe:	462a      	mov	r2, r5
   1dcc0:	490e      	ldr	r1, [pc, #56]	; (1dcfc <nrfx_gpiote_pin_uninit+0xac>)
   1dcc2:	480d      	ldr	r0, [pc, #52]	; (1dcf8 <nrfx_gpiote_pin_uninit+0xa8>)
   1dcc4:	f007 fdb3 	bl	2582e <printk>
   1dcc8:	f240 2129 	movw	r1, #553	; 0x229
   1dccc:	4628      	mov	r0, r5
   1dcce:	f008 f830 	bl	25d32 <assert_post_action>
   1dcd2:	e7d6      	b.n	1dc82 <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
   1dcd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1dcd8:	e000      	b.n	1dcdc <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dcda:	4b09      	ldr	r3, [pc, #36]	; (1dd00 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
   1dcdc:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1dce0:	2202      	movs	r2, #2
   1dce2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
   1dce6:	4807      	ldr	r0, [pc, #28]	; (1dd04 <nrfx_gpiote_pin_uninit+0xb4>)
   1dce8:	e7b8      	b.n	1dc5c <nrfx_gpiote_pin_uninit+0xc>
   1dcea:	bf00      	nop
   1dcec:	0bad0004 	.word	0x0bad0004
   1dcf0:	0002cafc 	.word	0x0002cafc
   1dcf4:	0002dc18 	.word	0x0002dc18
   1dcf8:	00029ff8 	.word	0x00029ff8
   1dcfc:	0002cb30 	.word	0x0002cb30
   1dd00:	50000300 	.word	0x50000300
   1dd04:	0bad0000 	.word	0x0bad0000

0001dd08 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   1dd08:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1dd0a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   1dd0c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1dd10:	2100      	movs	r1, #0
    uint32_t status = 0;
   1dd12:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1dd14:	e003      	b.n	1dd1e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   1dd16:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   1dd18:	3304      	adds	r3, #4
   1dd1a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1dd1c:	3101      	adds	r1, #1
   1dd1e:	2907      	cmp	r1, #7
   1dd20:	d814      	bhi.n	1dd4c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dd22:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1dd26:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   1dd2a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1dd2c:	2a00      	cmp	r2, #0
   1dd2e:	d0f2      	beq.n	1dd16 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   1dd30:	4a0b      	ldr	r2, [pc, #44]	; (1dd60 <nrfx_gpiote_irq_handler+0x58>)
   1dd32:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1dd36:	4210      	tst	r0, r2
   1dd38:	d0ed      	beq.n	1dd16 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   1dd3a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1dd3e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dd42:	2400      	movs	r4, #0
   1dd44:	6014      	str	r4, [r2, #0]
   1dd46:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   1dd48:	4305      	orrs	r5, r0
   1dd4a:	e7e4      	b.n	1dd16 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dd4c:	4b05      	ldr	r3, [pc, #20]	; (1dd64 <nrfx_gpiote_irq_handler+0x5c>)
   1dd4e:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1dd50:	b91b      	cbnz	r3, 1dd5a <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   1dd52:	4628      	mov	r0, r5
   1dd54:	f7ff f968 	bl	1d028 <gpiote_evt_handle>
}
   1dd58:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   1dd5a:	f7ff fac7 	bl	1d2ec <port_event_handle>
   1dd5e:	e7f8      	b.n	1dd52 <nrfx_gpiote_irq_handler+0x4a>
   1dd60:	40006000 	.word	0x40006000
   1dd64:	4000617c 	.word	0x4000617c

0001dd68 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1dd68:	b508      	push	{r3, lr}
   1dd6a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1dd6c:	4801      	ldr	r0, [pc, #4]	; (1dd74 <nrfx_ppi_channel_alloc+0xc>)
   1dd6e:	f7fe ffd5 	bl	1cd1c <nrfx_flag32_alloc>
}
   1dd72:	bd08      	pop	{r3, pc}
   1dd74:	20000630 	.word	0x20000630

0001dd78 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1dd78:	4b03      	ldr	r3, [pc, #12]	; (1dd88 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1dd7a:	4a04      	ldr	r2, [pc, #16]	; (1dd8c <z_device_state_init+0x14>)
   1dd7c:	4293      	cmp	r3, r2
   1dd7e:	d201      	bcs.n	1dd84 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   1dd80:	3318      	adds	r3, #24
   1dd82:	e7fa      	b.n	1dd7a <z_device_state_init+0x2>
	}
}
   1dd84:	4770      	bx	lr
   1dd86:	bf00      	nop
   1dd88:	00029b14 	.word	0x00029b14
   1dd8c:	00029bbc 	.word	0x00029bbc

0001dd90 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1dd90:	b570      	push	{r4, r5, r6, lr}
   1dd92:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dd94:	4b11      	ldr	r3, [pc, #68]	; (1dddc <z_sys_init_run_level+0x4c>)
   1dd96:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1dd9a:	e009      	b.n	1ddb0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1dd9c:	4240      	negs	r0, r0
   1dd9e:	e017      	b.n	1ddd0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1dda0:	68eb      	ldr	r3, [r5, #12]
   1dda2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1dda4:	68ea      	ldr	r2, [r5, #12]
   1dda6:	7853      	ldrb	r3, [r2, #1]
   1dda8:	f043 0301 	orr.w	r3, r3, #1
   1ddac:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ddae:	3408      	adds	r4, #8
   1ddb0:	1c73      	adds	r3, r6, #1
   1ddb2:	4a0a      	ldr	r2, [pc, #40]	; (1dddc <z_sys_init_run_level+0x4c>)
   1ddb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ddb8:	42a3      	cmp	r3, r4
   1ddba:	d90d      	bls.n	1ddd8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1ddbc:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1ddbe:	6823      	ldr	r3, [r4, #0]
   1ddc0:	4628      	mov	r0, r5
   1ddc2:	4798      	blx	r3
		if (dev != NULL) {
   1ddc4:	2d00      	cmp	r5, #0
   1ddc6:	d0f2      	beq.n	1ddae <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1ddc8:	2800      	cmp	r0, #0
   1ddca:	d0eb      	beq.n	1dda4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1ddcc:	2800      	cmp	r0, #0
   1ddce:	dbe5      	blt.n	1dd9c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1ddd0:	28ff      	cmp	r0, #255	; 0xff
   1ddd2:	dde5      	ble.n	1dda0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1ddd4:	20ff      	movs	r0, #255	; 0xff
   1ddd6:	e7e3      	b.n	1dda0 <z_sys_init_run_level+0x10>
		}
	}
}
   1ddd8:	bd70      	pop	{r4, r5, r6, pc}
   1ddda:	bf00      	nop
   1dddc:	0002d1b8 	.word	0x0002d1b8

0001dde0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1dde0:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1dde2:	4605      	mov	r5, r0
   1dde4:	b328      	cbz	r0, 1de32 <z_impl_device_get_binding+0x52>
   1dde6:	7803      	ldrb	r3, [r0, #0]
   1dde8:	b32b      	cbz	r3, 1de36 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1ddea:	4c14      	ldr	r4, [pc, #80]	; (1de3c <z_impl_device_get_binding+0x5c>)
   1ddec:	e000      	b.n	1ddf0 <z_impl_device_get_binding+0x10>
   1ddee:	3418      	adds	r4, #24
   1ddf0:	4b13      	ldr	r3, [pc, #76]	; (1de40 <z_impl_device_get_binding+0x60>)
   1ddf2:	429c      	cmp	r4, r3
   1ddf4:	d008      	beq.n	1de08 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1ddf6:	4620      	mov	r0, r4
   1ddf8:	f00b fc07 	bl	2960a <z_device_ready>
   1ddfc:	2800      	cmp	r0, #0
   1ddfe:	d0f6      	beq.n	1ddee <z_impl_device_get_binding+0xe>
   1de00:	6823      	ldr	r3, [r4, #0]
   1de02:	42ab      	cmp	r3, r5
   1de04:	d1f3      	bne.n	1ddee <z_impl_device_get_binding+0xe>
   1de06:	e012      	b.n	1de2e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1de08:	4c0c      	ldr	r4, [pc, #48]	; (1de3c <z_impl_device_get_binding+0x5c>)
   1de0a:	e000      	b.n	1de0e <z_impl_device_get_binding+0x2e>
   1de0c:	3418      	adds	r4, #24
   1de0e:	4b0c      	ldr	r3, [pc, #48]	; (1de40 <z_impl_device_get_binding+0x60>)
   1de10:	429c      	cmp	r4, r3
   1de12:	d00b      	beq.n	1de2c <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1de14:	4620      	mov	r0, r4
   1de16:	f00b fbf8 	bl	2960a <z_device_ready>
   1de1a:	2800      	cmp	r0, #0
   1de1c:	d0f6      	beq.n	1de0c <z_impl_device_get_binding+0x2c>
   1de1e:	6821      	ldr	r1, [r4, #0]
   1de20:	4628      	mov	r0, r5
   1de22:	f008 fcb2 	bl	2678a <strcmp>
   1de26:	2800      	cmp	r0, #0
   1de28:	d1f0      	bne.n	1de0c <z_impl_device_get_binding+0x2c>
   1de2a:	e000      	b.n	1de2e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1de2c:	2400      	movs	r4, #0
}
   1de2e:	4620      	mov	r0, r4
   1de30:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1de32:	4604      	mov	r4, r0
   1de34:	e7fb      	b.n	1de2e <z_impl_device_get_binding+0x4e>
   1de36:	2400      	movs	r4, #0
   1de38:	e7f9      	b.n	1de2e <z_impl_device_get_binding+0x4e>
   1de3a:	bf00      	nop
   1de3c:	00029b14 	.word	0x00029b14
   1de40:	00029bbc 	.word	0x00029bbc

0001de44 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   1de44:	2804      	cmp	r0, #4
   1de46:	d80c      	bhi.n	1de62 <reason_to_str+0x1e>
   1de48:	e8df f000 	tbb	[pc, r0]
   1de4c:	07050d03 	.word	0x07050d03
   1de50:	09          	.byte	0x09
   1de51:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   1de52:	4806      	ldr	r0, [pc, #24]	; (1de6c <reason_to_str+0x28>)
   1de54:	4770      	bx	lr
		return "Stack overflow";
   1de56:	4806      	ldr	r0, [pc, #24]	; (1de70 <reason_to_str+0x2c>)
   1de58:	4770      	bx	lr
		return "Kernel oops";
   1de5a:	4806      	ldr	r0, [pc, #24]	; (1de74 <reason_to_str+0x30>)
   1de5c:	4770      	bx	lr
		return "Kernel panic";
   1de5e:	4806      	ldr	r0, [pc, #24]	; (1de78 <reason_to_str+0x34>)
   1de60:	4770      	bx	lr
	default:
		return "Unknown error";
   1de62:	4806      	ldr	r0, [pc, #24]	; (1de7c <reason_to_str+0x38>)
   1de64:	4770      	bx	lr
		return "Unhandled interrupt";
   1de66:	4806      	ldr	r0, [pc, #24]	; (1de80 <reason_to_str+0x3c>)
	}
}
   1de68:	4770      	bx	lr
   1de6a:	bf00      	nop
   1de6c:	0002d220 	.word	0x0002d220
   1de70:	0002d1f4 	.word	0x0002d1f4
   1de74:	0002d204 	.word	0x0002d204
   1de78:	0002d210 	.word	0x0002d210
   1de7c:	0002d1d0 	.word	0x0002d1d0
   1de80:	0002d1e0 	.word	0x0002d1e0

0001de84 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1de84:	b130      	cbz	r0, 1de94 <thread_name_get+0x10>
{
   1de86:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1de88:	f00b fc12 	bl	296b0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1de8c:	b120      	cbz	r0, 1de98 <thread_name_get+0x14>
   1de8e:	7803      	ldrb	r3, [r0, #0]
   1de90:	b123      	cbz	r3, 1de9c <thread_name_get+0x18>
}
   1de92:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   1de94:	4802      	ldr	r0, [pc, #8]	; (1dea0 <thread_name_get+0x1c>)
}
   1de96:	4770      	bx	lr
		thread_name = "unknown";
   1de98:	4801      	ldr	r0, [pc, #4]	; (1dea0 <thread_name_get+0x1c>)
   1de9a:	e7fa      	b.n	1de92 <thread_name_get+0xe>
   1de9c:	4800      	ldr	r0, [pc, #0]	; (1dea0 <thread_name_get+0x1c>)
	return thread_name;
   1de9e:	e7f8      	b.n	1de92 <thread_name_get+0xe>
   1dea0:	0002d230 	.word	0x0002d230

0001dea4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1dea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dea8:	b082      	sub	sp, #8
   1deaa:	4604      	mov	r4, r0
   1deac:	460e      	mov	r6, r1
	__asm__ volatile(
   1deae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1deb2:	f3ef 8711 	mrs	r7, BASEPRI
   1deb6:	f383 8812 	msr	BASEPRI_MAX, r3
   1deba:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1debe:	f003 fad7 	bl	21470 <z_impl_z_current_get>
   1dec2:	4605      	mov	r5, r0
   1dec4:	4b32      	ldr	r3, [pc, #200]	; (1df90 <z_fatal_error+0xec>)
   1dec6:	4a33      	ldr	r2, [pc, #204]	; (1df94 <z_fatal_error+0xf0>)
   1dec8:	1a9b      	subs	r3, r3, r2
   1deca:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1decc:	f04f 0800 	mov.w	r8, #0
   1ded0:	2201      	movs	r2, #1
   1ded2:	f362 0802 	bfi	r8, r2, #0, #3
   1ded6:	f36f 08c5 	bfc	r8, #3, #3
   1deda:	f363 188f 	bfi	r8, r3, #6, #10
   1dede:	4620      	mov	r0, r4
   1dee0:	f7ff ffb0 	bl	1de44 <reason_to_str>
   1dee4:	4602      	mov	r2, r0
   1dee6:	f8ad 8000 	strh.w	r8, [sp]
   1deea:	2300      	movs	r3, #0
   1deec:	4621      	mov	r1, r4
   1deee:	482a      	ldr	r0, [pc, #168]	; (1df98 <z_fatal_error+0xf4>)
   1def0:	f7f3 fe46 	bl	11b80 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1def4:	b11e      	cbz	r6, 1defe <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1def6:	69f3      	ldr	r3, [r6, #28]
   1def8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1defc:	bb3b      	cbnz	r3, 1df4e <z_fatal_error+0xaa>
   1defe:	4b24      	ldr	r3, [pc, #144]	; (1df90 <z_fatal_error+0xec>)
   1df00:	4a24      	ldr	r2, [pc, #144]	; (1df94 <z_fatal_error+0xf0>)
   1df02:	1a9b      	subs	r3, r3, r2
   1df04:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1df06:	f04f 0800 	mov.w	r8, #0
   1df0a:	2201      	movs	r2, #1
   1df0c:	f362 0802 	bfi	r8, r2, #0, #3
   1df10:	f36f 08c5 	bfc	r8, #3, #3
   1df14:	f363 188f 	bfi	r8, r3, #6, #10
   1df18:	4628      	mov	r0, r5
   1df1a:	f7ff ffb3 	bl	1de84 <thread_name_get>
   1df1e:	f7f3 fbd7 	bl	116d0 <z_log_strdup>
   1df22:	4602      	mov	r2, r0
   1df24:	4643      	mov	r3, r8
   1df26:	4629      	mov	r1, r5
   1df28:	481c      	ldr	r0, [pc, #112]	; (1df9c <z_fatal_error+0xf8>)
   1df2a:	f7f3 fda9 	bl	11a80 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1df2e:	4631      	mov	r1, r6
   1df30:	4620      	mov	r0, r4
   1df32:	f7fe f961 	bl	1c1f8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1df36:	2c04      	cmp	r4, #4
   1df38:	d01a      	beq.n	1df70 <z_fatal_error+0xcc>
	__asm__ volatile(
   1df3a:	f387 8811 	msr	BASEPRI, r7
   1df3e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1df42:	4628      	mov	r0, r5
   1df44:	f7f5 ff94 	bl	13e70 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1df48:	b002      	add	sp, #8
   1df4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1df4e:	4b10      	ldr	r3, [pc, #64]	; (1df90 <z_fatal_error+0xec>)
   1df50:	4a10      	ldr	r2, [pc, #64]	; (1df94 <z_fatal_error+0xf0>)
   1df52:	1a9b      	subs	r3, r3, r2
   1df54:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   1df56:	f04f 0100 	mov.w	r1, #0
   1df5a:	2201      	movs	r2, #1
   1df5c:	f362 0102 	bfi	r1, r2, #0, #3
   1df60:	f36f 01c5 	bfc	r1, #3, #3
   1df64:	f363 118f 	bfi	r1, r3, #6, #10
   1df68:	480d      	ldr	r0, [pc, #52]	; (1dfa0 <z_fatal_error+0xfc>)
   1df6a:	f7f3 fd23 	bl	119b4 <log_0>
   1df6e:	e7c6      	b.n	1defe <z_fatal_error+0x5a>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1df70:	4c0c      	ldr	r4, [pc, #48]	; (1dfa4 <z_fatal_error+0x100>)
   1df72:	238f      	movs	r3, #143	; 0x8f
   1df74:	4622      	mov	r2, r4
   1df76:	490c      	ldr	r1, [pc, #48]	; (1dfa8 <z_fatal_error+0x104>)
   1df78:	480c      	ldr	r0, [pc, #48]	; (1dfac <z_fatal_error+0x108>)
   1df7a:	f007 fc58 	bl	2582e <printk>
   1df7e:	480c      	ldr	r0, [pc, #48]	; (1dfb0 <z_fatal_error+0x10c>)
   1df80:	f007 fc55 	bl	2582e <printk>
   1df84:	218f      	movs	r1, #143	; 0x8f
   1df86:	4620      	mov	r0, r4
   1df88:	f007 fed3 	bl	25d32 <assert_post_action>
   1df8c:	e7d5      	b.n	1df3a <z_fatal_error+0x96>
   1df8e:	bf00      	nop
   1df90:	00029e08 	.word	0x00029e08
   1df94:	00029d70 	.word	0x00029d70
   1df98:	0002d238 	.word	0x0002d238
   1df9c:	0002d284 	.word	0x0002d284
   1dfa0:	0002d260 	.word	0x0002d260
   1dfa4:	0002d29c 	.word	0x0002d29c
   1dfa8:	0002d2c0 	.word	0x0002d2c0
   1dfac:	00029ff8 	.word	0x00029ff8
   1dfb0:	0002d2e0 	.word	0x0002d2e0

0001dfb4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1dfb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfb6:	b089      	sub	sp, #36	; 0x24
   1dfb8:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1dfba:	4b15      	ldr	r3, [pc, #84]	; (1e010 <init_idle_thread+0x5c>)
   1dfbc:	25b8      	movs	r5, #184	; 0xb8
   1dfbe:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1dfc2:	4b14      	ldr	r3, [pc, #80]	; (1e014 <init_idle_thread+0x60>)
   1dfc4:	f44f 76b0 	mov.w	r6, #352	; 0x160
   1dfc8:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1dfcc:	af06      	add	r7, sp, #24
   1dfce:	4603      	mov	r3, r0
   1dfd0:	4a11      	ldr	r2, [pc, #68]	; (1e018 <init_idle_thread+0x64>)
   1dfd2:	2108      	movs	r1, #8
   1dfd4:	4638      	mov	r0, r7
   1dfd6:	f007 fc38 	bl	2584a <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1dfda:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1dfde:	480f      	ldr	r0, [pc, #60]	; (1e01c <init_idle_thread+0x68>)
   1dfe0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   1dfe4:	9705      	str	r7, [sp, #20]
   1dfe6:	2301      	movs	r3, #1
   1dfe8:	9304      	str	r3, [sp, #16]
   1dfea:	230f      	movs	r3, #15
   1dfec:	9303      	str	r3, [sp, #12]
   1dfee:	2300      	movs	r3, #0
   1dff0:	9302      	str	r3, [sp, #8]
   1dff2:	9301      	str	r3, [sp, #4]
   1dff4:	9400      	str	r4, [sp, #0]
   1dff6:	4b0a      	ldr	r3, [pc, #40]	; (1e020 <init_idle_thread+0x6c>)
   1dff8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1dffc:	4631      	mov	r1, r6
   1dffe:	4628      	mov	r0, r5
   1e000:	f000 fbba 	bl	1e778 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e004:	7b6b      	ldrb	r3, [r5, #13]
   1e006:	f023 0304 	bic.w	r3, r3, #4
   1e00a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1e00c:	b009      	add	sp, #36	; 0x24
   1e00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e010:	20001cb0 	.word	0x20001cb0
   1e014:	200056e0 	.word	0x200056e0
   1e018:	0002d318 	.word	0x0002d318
   1e01c:	20002d18 	.word	0x20002d18
   1e020:	0001ea91 	.word	0x0001ea91

0001e024 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1e024:	b570      	push	{r4, r5, r6, lr}
   1e026:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1e028:	f003 f85a 	bl	210e0 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1e02c:	4d1b      	ldr	r5, [pc, #108]	; (1e09c <prepare_multithreading+0x78>)
   1e02e:	4b1c      	ldr	r3, [pc, #112]	; (1e0a0 <prepare_multithreading+0x7c>)
   1e030:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e032:	4b1c      	ldr	r3, [pc, #112]	; (1e0a4 <prepare_multithreading+0x80>)
   1e034:	9305      	str	r3, [sp, #20]
   1e036:	2301      	movs	r3, #1
   1e038:	9304      	str	r3, [sp, #16]
   1e03a:	2400      	movs	r4, #0
   1e03c:	9403      	str	r4, [sp, #12]
   1e03e:	9402      	str	r4, [sp, #8]
   1e040:	9401      	str	r4, [sp, #4]
   1e042:	9400      	str	r4, [sp, #0]
   1e044:	4b18      	ldr	r3, [pc, #96]	; (1e0a8 <prepare_multithreading+0x84>)
   1e046:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1e04a:	4918      	ldr	r1, [pc, #96]	; (1e0ac <prepare_multithreading+0x88>)
   1e04c:	4628      	mov	r0, r5
   1e04e:	f000 fb93 	bl	1e778 <z_setup_new_thread>
   1e052:	4606      	mov	r6, r0
   1e054:	7b6b      	ldrb	r3, [r5, #13]
   1e056:	f023 0304 	bic.w	r3, r3, #4
   1e05a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1e05c:	4628      	mov	r0, r5
   1e05e:	f002 fb65 	bl	2072c <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1e062:	2c00      	cmp	r4, #0
   1e064:	dd02      	ble.n	1e06c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1e066:	4630      	mov	r0, r6
   1e068:	b006      	add	sp, #24
   1e06a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1e06c:	4620      	mov	r0, r4
   1e06e:	f7ff ffa1 	bl	1dfb4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1e072:	4b0f      	ldr	r3, [pc, #60]	; (1e0b0 <prepare_multithreading+0x8c>)
   1e074:	22b8      	movs	r2, #184	; 0xb8
   1e076:	fb02 3204 	mla	r2, r2, r4, r3
   1e07a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1e07e:	4b08      	ldr	r3, [pc, #32]	; (1e0a0 <prepare_multithreading+0x7c>)
   1e080:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1e084:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1e086:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1e088:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   1e08c:	4a09      	ldr	r2, [pc, #36]	; (1e0b4 <prepare_multithreading+0x90>)
   1e08e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   1e092:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   1e096:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1e098:	3401      	adds	r4, #1
   1e09a:	e7e2      	b.n	1e062 <prepare_multithreading+0x3e>
   1e09c:	20001d68 	.word	0x20001d68
   1e0a0:	20002d18 	.word	0x20002d18
   1e0a4:	0002a0c8 	.word	0x0002a0c8
   1e0a8:	0001e0b9 	.word	0x0001e0b9
   1e0ac:	20004ec0 	.word	0x20004ec0
   1e0b0:	20001cb0 	.word	0x20001cb0
   1e0b4:	20005840 	.word	0x20005840

0001e0b8 <bg_thread_main>:
{
   1e0b8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1e0ba:	4b0a      	ldr	r3, [pc, #40]	; (1e0e4 <bg_thread_main+0x2c>)
   1e0bc:	2201      	movs	r2, #1
   1e0be:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1e0c0:	2002      	movs	r0, #2
   1e0c2:	f7ff fe65 	bl	1dd90 <z_sys_init_run_level>
	boot_banner();
   1e0c6:	f004 fef5 	bl	22eb4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1e0ca:	2003      	movs	r0, #3
   1e0cc:	f7ff fe60 	bl	1dd90 <z_sys_init_run_level>
	z_init_static_threads();
   1e0d0:	f000 fc60 	bl	1e994 <z_init_static_threads>
	main();
   1e0d4:	f7f1 fc22 	bl	f91c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1e0d8:	4a03      	ldr	r2, [pc, #12]	; (1e0e8 <bg_thread_main+0x30>)
   1e0da:	7b13      	ldrb	r3, [r2, #12]
   1e0dc:	f023 0301 	bic.w	r3, r3, #1
   1e0e0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1e0e2:	bd08      	pop	{r3, pc}
   1e0e4:	2000375b 	.word	0x2000375b
   1e0e8:	20001d68 	.word	0x20001d68

0001e0ec <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1e0ec:	b508      	push	{r3, lr}
   1e0ee:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1e0f0:	4a01      	ldr	r2, [pc, #4]	; (1e0f8 <switch_to_main_thread+0xc>)
   1e0f2:	4802      	ldr	r0, [pc, #8]	; (1e0fc <switch_to_main_thread+0x10>)
   1e0f4:	f7f5 f9cc 	bl	13490 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1e0f8:	0001e0b9 	.word	0x0001e0b9
   1e0fc:	20001d68 	.word	0x20001d68

0001e100 <z_bss_zero>:
{
   1e100:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1e102:	4803      	ldr	r0, [pc, #12]	; (1e110 <z_bss_zero+0x10>)
   1e104:	4a03      	ldr	r2, [pc, #12]	; (1e114 <z_bss_zero+0x14>)
   1e106:	1a12      	subs	r2, r2, r0
   1e108:	2100      	movs	r1, #0
   1e10a:	f008 fb99 	bl	26840 <memset>
}
   1e10e:	bd08      	pop	{r3, pc}
   1e110:	20000948 	.word	0x20000948
   1e114:	20003918 	.word	0x20003918

0001e118 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1e118:	b500      	push	{lr}
   1e11a:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1e11c:	f7f3 fa0c 	bl	11538 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1e120:	4b1d      	ldr	r3, [pc, #116]	; (1e198 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1e122:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1e126:	4c1d      	ldr	r4, [pc, #116]	; (1e19c <z_cstart+0x84>)
   1e128:	6963      	ldr	r3, [r4, #20]
   1e12a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1e12e:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e130:	23e0      	movs	r3, #224	; 0xe0
   1e132:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1e136:	2320      	movs	r3, #32
   1e138:	77e3      	strb	r3, [r4, #31]
   1e13a:	2500      	movs	r5, #0
   1e13c:	7625      	strb	r5, [r4, #24]
   1e13e:	7665      	strb	r5, [r4, #25]
   1e140:	76a5      	strb	r5, [r4, #26]
   1e142:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1e146:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e148:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1e14c:	6263      	str	r3, [r4, #36]	; 0x24
   1e14e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1e152:	f7f5 fdfd 	bl	13d50 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1e156:	f7f4 ffeb 	bl	13130 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1e15a:	f04f 33ff 	mov.w	r3, #4294967295
   1e15e:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1e160:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1e162:	f7f5 ffa5 	bl	140b0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1e166:	f7f5 fe99 	bl	13e9c <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1e16a:	2401      	movs	r4, #1
   1e16c:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1e170:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1e174:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1e176:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1e178:	4b09      	ldr	r3, [pc, #36]	; (1e1a0 <z_cstart+0x88>)
   1e17a:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1e17e:	f7ff fdfb 	bl	1dd78 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1e182:	4628      	mov	r0, r5
   1e184:	f7ff fe04 	bl	1dd90 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1e188:	4620      	mov	r0, r4
   1e18a:	f7ff fe01 	bl	1dd90 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1e18e:	f7ff ff49 	bl	1e024 <prepare_multithreading>
   1e192:	f7ff ffab 	bl	1e0ec <switch_to_main_thread>
   1e196:	bf00      	nop
   1e198:	20006060 	.word	0x20006060
   1e19c:	e000ed00 	.word	0xe000ed00
   1e1a0:	20002d18 	.word	0x20002d18

0001e1a4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1e1a4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1e1a6:	4c0f      	ldr	r4, [pc, #60]	; (1e1e4 <statics_init+0x40>)
   1e1a8:	e016      	b.n	1e1d8 <statics_init+0x34>
   1e1aa:	4d0f      	ldr	r5, [pc, #60]	; (1e1e8 <statics_init+0x44>)
   1e1ac:	2318      	movs	r3, #24
   1e1ae:	462a      	mov	r2, r5
   1e1b0:	490e      	ldr	r1, [pc, #56]	; (1e1ec <statics_init+0x48>)
   1e1b2:	480f      	ldr	r0, [pc, #60]	; (1e1f0 <statics_init+0x4c>)
   1e1b4:	f007 fb3b 	bl	2582e <printk>
   1e1b8:	480e      	ldr	r0, [pc, #56]	; (1e1f4 <statics_init+0x50>)
   1e1ba:	f007 fb38 	bl	2582e <printk>
   1e1be:	2118      	movs	r1, #24
   1e1c0:	4628      	mov	r0, r5
   1e1c2:	f007 fdb6 	bl	25d32 <assert_post_action>
   1e1c6:	4b0c      	ldr	r3, [pc, #48]	; (1e1f8 <statics_init+0x54>)
   1e1c8:	429c      	cmp	r4, r3
   1e1ca:	d209      	bcs.n	1e1e0 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1e1cc:	68a2      	ldr	r2, [r4, #8]
   1e1ce:	6861      	ldr	r1, [r4, #4]
   1e1d0:	4620      	mov	r0, r4
   1e1d2:	f00b fa27 	bl	29624 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1e1d6:	3418      	adds	r4, #24
   1e1d8:	4b07      	ldr	r3, [pc, #28]	; (1e1f8 <statics_init+0x54>)
   1e1da:	429c      	cmp	r4, r3
   1e1dc:	d9f3      	bls.n	1e1c6 <statics_init+0x22>
   1e1de:	e7e4      	b.n	1e1aa <statics_init+0x6>
		}
	}
	return 0;
}
   1e1e0:	2000      	movs	r0, #0
   1e1e2:	bd38      	pop	{r3, r4, r5, pc}
   1e1e4:	20000730 	.word	0x20000730
   1e1e8:	0002d328 	.word	0x0002d328
   1e1ec:	0002d34c 	.word	0x0002d34c
   1e1f0:	00029ff8 	.word	0x00029ff8
   1e1f4:	0002bbac 	.word	0x0002bbac
   1e1f8:	20000730 	.word	0x20000730

0001e1fc <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1e1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e200:	b087      	sub	sp, #28
   1e202:	4681      	mov	r9, r0
   1e204:	9103      	str	r1, [sp, #12]
   1e206:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e208:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1e20c:	f00b fb83 	bl	29916 <sys_clock_timeout_end_calc>
   1e210:	4683      	mov	fp, r0
   1e212:	9105      	str	r1, [sp, #20]
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1e214:	f109 0814 	add.w	r8, r9, #20
	__asm__ volatile(
   1e218:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e21c:	f3ef 8511 	mrs	r5, BASEPRI
   1e220:	f383 8812 	msr	BASEPRI_MAX, r3
   1e224:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e228:	4640      	mov	r0, r8
   1e22a:	f000 fa23 	bl	1e674 <z_spin_lock_valid>
   1e22e:	b168      	cbz	r0, 1e24c <k_heap_aligned_alloc+0x50>
	z_spin_lock_set_owner(l);
   1e230:	4640      	mov	r0, r8
   1e232:	f000 fa3f 	bl	1e6b4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e236:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1e23a:	b11b      	cbz	r3, 1e244 <k_heap_aligned_alloc+0x48>
   1e23c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
   1e240:	4323      	orrs	r3, r4
   1e242:	d113      	bne.n	1e26c <k_heap_aligned_alloc+0x70>

	bool blocked_alloc = false;
   1e244:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   1e248:	4654      	mov	r4, sl

	while (ret == NULL) {
   1e24a:	e035      	b.n	1e2b8 <k_heap_aligned_alloc+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e24c:	4c3c      	ldr	r4, [pc, #240]	; (1e340 <k_heap_aligned_alloc+0x144>)
   1e24e:	2381      	movs	r3, #129	; 0x81
   1e250:	4622      	mov	r2, r4
   1e252:	493c      	ldr	r1, [pc, #240]	; (1e344 <k_heap_aligned_alloc+0x148>)
   1e254:	483c      	ldr	r0, [pc, #240]	; (1e348 <k_heap_aligned_alloc+0x14c>)
   1e256:	f007 faea 	bl	2582e <printk>
   1e25a:	4641      	mov	r1, r8
   1e25c:	483b      	ldr	r0, [pc, #236]	; (1e34c <k_heap_aligned_alloc+0x150>)
   1e25e:	f007 fae6 	bl	2582e <printk>
   1e262:	2181      	movs	r1, #129	; 0x81
   1e264:	4620      	mov	r0, r4
   1e266:	f007 fd64 	bl	25d32 <assert_post_action>
   1e26a:	e7e1      	b.n	1e230 <k_heap_aligned_alloc+0x34>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1e26c:	4c38      	ldr	r4, [pc, #224]	; (1e350 <k_heap_aligned_alloc+0x154>)
   1e26e:	2349      	movs	r3, #73	; 0x49
   1e270:	4622      	mov	r2, r4
   1e272:	4938      	ldr	r1, [pc, #224]	; (1e354 <k_heap_aligned_alloc+0x158>)
   1e274:	4834      	ldr	r0, [pc, #208]	; (1e348 <k_heap_aligned_alloc+0x14c>)
   1e276:	f007 fada 	bl	2582e <printk>
   1e27a:	4837      	ldr	r0, [pc, #220]	; (1e358 <k_heap_aligned_alloc+0x15c>)
   1e27c:	f007 fad7 	bl	2582e <printk>
   1e280:	2149      	movs	r1, #73	; 0x49
   1e282:	4620      	mov	r0, r4
   1e284:	f007 fd55 	bl	25d32 <assert_post_action>
   1e288:	e7dc      	b.n	1e244 <k_heap_aligned_alloc+0x48>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e28a:	e9cd 6700 	strd	r6, r7, [sp]
   1e28e:	f109 020c 	add.w	r2, r9, #12
   1e292:	4629      	mov	r1, r5
   1e294:	4640      	mov	r0, r8
   1e296:	f002 fc21 	bl	20adc <z_pend_curr>
   1e29a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e29e:	f3ef 8511 	mrs	r5, BASEPRI
   1e2a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e2a6:	f3bf 8f6f 	isb	sy
   1e2aa:	4640      	mov	r0, r8
   1e2ac:	f000 f9e2 	bl	1e674 <z_spin_lock_valid>
   1e2b0:	b1d8      	cbz	r0, 1e2ea <k_heap_aligned_alloc+0xee>
	z_spin_lock_set_owner(l);
   1e2b2:	4640      	mov	r0, r8
   1e2b4:	f000 f9fe 	bl	1e6b4 <z_spin_lock_set_owner>
	while (ret == NULL) {
   1e2b8:	bb34      	cbnz	r4, 1e308 <k_heap_aligned_alloc+0x10c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1e2ba:	9a04      	ldr	r2, [sp, #16]
   1e2bc:	9903      	ldr	r1, [sp, #12]
   1e2be:	4648      	mov	r0, r9
   1e2c0:	f7f2 fa0e 	bl	106e0 <sys_heap_aligned_alloc>
   1e2c4:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   1e2c6:	f003 fd49 	bl	21d5c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1e2ca:	b9ec      	cbnz	r4, 1e308 <k_heap_aligned_alloc+0x10c>
		    (ret != NULL) || ((end - now) <= 0)) {
   1e2cc:	ebbb 0600 	subs.w	r6, fp, r0
   1e2d0:	9b05      	ldr	r3, [sp, #20]
   1e2d2:	eb63 0701 	sbc.w	r7, r3, r1
   1e2d6:	2e01      	cmp	r6, #1
   1e2d8:	f177 0300 	sbcs.w	r3, r7, #0
   1e2dc:	db14      	blt.n	1e308 <k_heap_aligned_alloc+0x10c>
		if (!blocked_alloc) {
   1e2de:	f1ba 0f00 	cmp.w	sl, #0
   1e2e2:	d1d2      	bne.n	1e28a <k_heap_aligned_alloc+0x8e>
			blocked_alloc = true;
   1e2e4:	f04f 0a01 	mov.w	sl, #1
   1e2e8:	e7cf      	b.n	1e28a <k_heap_aligned_alloc+0x8e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e2ea:	2381      	movs	r3, #129	; 0x81
   1e2ec:	4a14      	ldr	r2, [pc, #80]	; (1e340 <k_heap_aligned_alloc+0x144>)
   1e2ee:	4915      	ldr	r1, [pc, #84]	; (1e344 <k_heap_aligned_alloc+0x148>)
   1e2f0:	4815      	ldr	r0, [pc, #84]	; (1e348 <k_heap_aligned_alloc+0x14c>)
   1e2f2:	f007 fa9c 	bl	2582e <printk>
   1e2f6:	4641      	mov	r1, r8
   1e2f8:	4814      	ldr	r0, [pc, #80]	; (1e34c <k_heap_aligned_alloc+0x150>)
   1e2fa:	f007 fa98 	bl	2582e <printk>
   1e2fe:	2181      	movs	r1, #129	; 0x81
   1e300:	480f      	ldr	r0, [pc, #60]	; (1e340 <k_heap_aligned_alloc+0x144>)
   1e302:	f007 fd16 	bl	25d32 <assert_post_action>
   1e306:	e7d4      	b.n	1e2b2 <k_heap_aligned_alloc+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e308:	4640      	mov	r0, r8
   1e30a:	f000 f9c3 	bl	1e694 <z_spin_unlock_valid>
   1e30e:	b138      	cbz	r0, 1e320 <k_heap_aligned_alloc+0x124>
	__asm__ volatile(
   1e310:	f385 8811 	msr	BASEPRI, r5
   1e314:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1e318:	4620      	mov	r0, r4
   1e31a:	b007      	add	sp, #28
   1e31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e320:	4e07      	ldr	r6, [pc, #28]	; (1e340 <k_heap_aligned_alloc+0x144>)
   1e322:	23ac      	movs	r3, #172	; 0xac
   1e324:	4632      	mov	r2, r6
   1e326:	490d      	ldr	r1, [pc, #52]	; (1e35c <k_heap_aligned_alloc+0x160>)
   1e328:	4807      	ldr	r0, [pc, #28]	; (1e348 <k_heap_aligned_alloc+0x14c>)
   1e32a:	f007 fa80 	bl	2582e <printk>
   1e32e:	4641      	mov	r1, r8
   1e330:	480b      	ldr	r0, [pc, #44]	; (1e360 <k_heap_aligned_alloc+0x164>)
   1e332:	f007 fa7c 	bl	2582e <printk>
   1e336:	21ac      	movs	r1, #172	; 0xac
   1e338:	4630      	mov	r0, r6
   1e33a:	f007 fcfa 	bl	25d32 <assert_post_action>
   1e33e:	e7e7      	b.n	1e310 <k_heap_aligned_alloc+0x114>
   1e340:	0002a314 	.word	0x0002a314
   1e344:	0002a36c 	.word	0x0002a36c
   1e348:	00029ff8 	.word	0x00029ff8
   1e34c:	0002a384 	.word	0x0002a384
   1e350:	0002d328 	.word	0x0002d328
   1e354:	0002d364 	.word	0x0002d364
   1e358:	0002c900 	.word	0x0002c900
   1e35c:	0002a33c 	.word	0x0002a33c
   1e360:	0002a354 	.word	0x0002a354

0001e364 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1e364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e368:	4604      	mov	r4, r0
   1e36a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1e36c:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   1e370:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e374:	f3ef 8711 	mrs	r7, BASEPRI
   1e378:	f383 8812 	msr	BASEPRI_MAX, r3
   1e37c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e380:	4628      	mov	r0, r5
   1e382:	f000 f977 	bl	1e674 <z_spin_lock_valid>
   1e386:	b188      	cbz	r0, 1e3ac <k_heap_free+0x48>
	z_spin_lock_set_owner(l);
   1e388:	4628      	mov	r0, r5
   1e38a:	f000 f993 	bl	1e6b4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1e38e:	4631      	mov	r1, r6
   1e390:	4620      	mov	r0, r4
   1e392:	f7f2 f94f 	bl	10634 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1e396:	f104 000c 	add.w	r0, r4, #12
   1e39a:	f00b fa86 	bl	298aa <z_unpend_all>
   1e39e:	b1b0      	cbz	r0, 1e3ce <k_heap_free+0x6a>
		z_reschedule(&h->lock, key);
   1e3a0:	4639      	mov	r1, r7
   1e3a2:	4628      	mov	r0, r5
   1e3a4:	f001 fee2 	bl	2016c <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1e3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e3ac:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1e40c <k_heap_free+0xa8>
   1e3b0:	2381      	movs	r3, #129	; 0x81
   1e3b2:	4642      	mov	r2, r8
   1e3b4:	4912      	ldr	r1, [pc, #72]	; (1e400 <k_heap_free+0x9c>)
   1e3b6:	4813      	ldr	r0, [pc, #76]	; (1e404 <k_heap_free+0xa0>)
   1e3b8:	f007 fa39 	bl	2582e <printk>
   1e3bc:	4629      	mov	r1, r5
   1e3be:	4812      	ldr	r0, [pc, #72]	; (1e408 <k_heap_free+0xa4>)
   1e3c0:	f007 fa35 	bl	2582e <printk>
   1e3c4:	2181      	movs	r1, #129	; 0x81
   1e3c6:	4640      	mov	r0, r8
   1e3c8:	f007 fcb3 	bl	25d32 <assert_post_action>
   1e3cc:	e7dc      	b.n	1e388 <k_heap_free+0x24>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e3ce:	4628      	mov	r0, r5
   1e3d0:	f000 f960 	bl	1e694 <z_spin_unlock_valid>
   1e3d4:	b120      	cbz	r0, 1e3e0 <k_heap_free+0x7c>
	__asm__ volatile(
   1e3d6:	f387 8811 	msr	BASEPRI, r7
   1e3da:	f3bf 8f6f 	isb	sy
   1e3de:	e7e3      	b.n	1e3a8 <k_heap_free+0x44>
   1e3e0:	4c0a      	ldr	r4, [pc, #40]	; (1e40c <k_heap_free+0xa8>)
   1e3e2:	23ac      	movs	r3, #172	; 0xac
   1e3e4:	4622      	mov	r2, r4
   1e3e6:	490a      	ldr	r1, [pc, #40]	; (1e410 <k_heap_free+0xac>)
   1e3e8:	4806      	ldr	r0, [pc, #24]	; (1e404 <k_heap_free+0xa0>)
   1e3ea:	f007 fa20 	bl	2582e <printk>
   1e3ee:	4629      	mov	r1, r5
   1e3f0:	4808      	ldr	r0, [pc, #32]	; (1e414 <k_heap_free+0xb0>)
   1e3f2:	f007 fa1c 	bl	2582e <printk>
   1e3f6:	21ac      	movs	r1, #172	; 0xac
   1e3f8:	4620      	mov	r0, r4
   1e3fa:	f007 fc9a 	bl	25d32 <assert_post_action>
   1e3fe:	e7ea      	b.n	1e3d6 <k_heap_free+0x72>
   1e400:	0002a36c 	.word	0x0002a36c
   1e404:	00029ff8 	.word	0x00029ff8
   1e408:	0002a384 	.word	0x0002a384
   1e40c:	0002a314 	.word	0x0002a314
   1e410:	0002a33c 	.word	0x0002a33c
   1e414:	0002a354 	.word	0x0002a354

0001e418 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1e418:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e41a:	4c10      	ldr	r4, [pc, #64]	; (1e45c <init_mem_slab_module+0x44>)
	int rc = 0;
   1e41c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e41e:	e016      	b.n	1e44e <init_mem_slab_module+0x36>
   1e420:	4e0f      	ldr	r6, [pc, #60]	; (1e460 <init_mem_slab_module+0x48>)
   1e422:	233c      	movs	r3, #60	; 0x3c
   1e424:	4632      	mov	r2, r6
   1e426:	490f      	ldr	r1, [pc, #60]	; (1e464 <init_mem_slab_module+0x4c>)
   1e428:	480f      	ldr	r0, [pc, #60]	; (1e468 <init_mem_slab_module+0x50>)
   1e42a:	f007 fa00 	bl	2582e <printk>
   1e42e:	480f      	ldr	r0, [pc, #60]	; (1e46c <init_mem_slab_module+0x54>)
   1e430:	f007 f9fd 	bl	2582e <printk>
   1e434:	213c      	movs	r1, #60	; 0x3c
   1e436:	4630      	mov	r0, r6
   1e438:	f007 fc7b 	bl	25d32 <assert_post_action>
   1e43c:	4b0c      	ldr	r3, [pc, #48]	; (1e470 <init_mem_slab_module+0x58>)
   1e43e:	429c      	cmp	r4, r3
   1e440:	d209      	bcs.n	1e456 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
   1e442:	4620      	mov	r0, r4
   1e444:	f00b f8f6 	bl	29634 <create_free_list>
		if (rc < 0) {
   1e448:	1e05      	subs	r5, r0, #0
   1e44a:	db04      	blt.n	1e456 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e44c:	3420      	adds	r4, #32
   1e44e:	4b08      	ldr	r3, [pc, #32]	; (1e470 <init_mem_slab_module+0x58>)
   1e450:	429c      	cmp	r4, r3
   1e452:	d9f3      	bls.n	1e43c <init_mem_slab_module+0x24>
   1e454:	e7e4      	b.n	1e420 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   1e456:	4628      	mov	r0, r5
   1e458:	bd70      	pop	{r4, r5, r6, pc}
   1e45a:	bf00      	nop
   1e45c:	200006d0 	.word	0x200006d0
   1e460:	0002d3ac 	.word	0x0002d3ac
   1e464:	0002d3d4 	.word	0x0002d3d4
   1e468:	00029ff8 	.word	0x00029ff8
   1e46c:	0002bbac 	.word	0x0002bbac
   1e470:	20000730 	.word	0x20000730

0001e474 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1e474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e478:	b082      	sub	sp, #8
   1e47a:	4604      	mov	r4, r0
   1e47c:	460e      	mov	r6, r1
   1e47e:	4690      	mov	r8, r2
   1e480:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1e482:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e486:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e48a:	f3ef 8711 	mrs	r7, BASEPRI
   1e48e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e492:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e496:	4628      	mov	r0, r5
   1e498:	f000 f8ec 	bl	1e674 <z_spin_lock_valid>
   1e49c:	b1c0      	cbz	r0, 1e4d0 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
   1e49e:	4628      	mov	r0, r5
   1e4a0:	f000 f908 	bl	1e6b4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1e4a4:	69a3      	ldr	r3, [r4, #24]
   1e4a6:	b323      	cbz	r3, 1e4f2 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
   1e4a8:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   1e4aa:	69a3      	ldr	r3, [r4, #24]
   1e4ac:	681b      	ldr	r3, [r3, #0]
   1e4ae:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1e4b0:	69e3      	ldr	r3, [r4, #28]
   1e4b2:	3301      	adds	r3, #1
   1e4b4:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1e4b6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e4b8:	4628      	mov	r0, r5
   1e4ba:	f000 f8eb 	bl	1e694 <z_spin_unlock_valid>
   1e4be:	b378      	cbz	r0, 1e520 <k_mem_slab_alloc+0xac>
	__asm__ volatile(
   1e4c0:	f387 8811 	msr	BASEPRI, r7
   1e4c4:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1e4c8:	4620      	mov	r0, r4
   1e4ca:	b002      	add	sp, #8
   1e4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e4d0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1e550 <k_mem_slab_alloc+0xdc>
   1e4d4:	2381      	movs	r3, #129	; 0x81
   1e4d6:	4652      	mov	r2, sl
   1e4d8:	4919      	ldr	r1, [pc, #100]	; (1e540 <k_mem_slab_alloc+0xcc>)
   1e4da:	481a      	ldr	r0, [pc, #104]	; (1e544 <k_mem_slab_alloc+0xd0>)
   1e4dc:	f007 f9a7 	bl	2582e <printk>
   1e4e0:	4629      	mov	r1, r5
   1e4e2:	4819      	ldr	r0, [pc, #100]	; (1e548 <k_mem_slab_alloc+0xd4>)
   1e4e4:	f007 f9a3 	bl	2582e <printk>
   1e4e8:	2181      	movs	r1, #129	; 0x81
   1e4ea:	4650      	mov	r0, sl
   1e4ec:	f007 fc21 	bl	25d32 <assert_post_action>
   1e4f0:	e7d5      	b.n	1e49e <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1e4f2:	ea58 0309 	orrs.w	r3, r8, r9
   1e4f6:	d104      	bne.n	1e502 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
   1e4f8:	2300      	movs	r3, #0
   1e4fa:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   1e4fc:	f06f 040b 	mvn.w	r4, #11
   1e500:	e7da      	b.n	1e4b8 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1e502:	e9cd 8900 	strd	r8, r9, [sp]
   1e506:	4622      	mov	r2, r4
   1e508:	4639      	mov	r1, r7
   1e50a:	4628      	mov	r0, r5
   1e50c:	f002 fae6 	bl	20adc <z_pend_curr>
		if (result == 0) {
   1e510:	4604      	mov	r4, r0
   1e512:	2800      	cmp	r0, #0
   1e514:	d1d8      	bne.n	1e4c8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1e516:	4b0d      	ldr	r3, [pc, #52]	; (1e54c <k_mem_slab_alloc+0xd8>)
   1e518:	689b      	ldr	r3, [r3, #8]
   1e51a:	695b      	ldr	r3, [r3, #20]
   1e51c:	6033      	str	r3, [r6, #0]
		return result;
   1e51e:	e7d3      	b.n	1e4c8 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e520:	4e0b      	ldr	r6, [pc, #44]	; (1e550 <k_mem_slab_alloc+0xdc>)
   1e522:	23ac      	movs	r3, #172	; 0xac
   1e524:	4632      	mov	r2, r6
   1e526:	490b      	ldr	r1, [pc, #44]	; (1e554 <k_mem_slab_alloc+0xe0>)
   1e528:	4806      	ldr	r0, [pc, #24]	; (1e544 <k_mem_slab_alloc+0xd0>)
   1e52a:	f007 f980 	bl	2582e <printk>
   1e52e:	4629      	mov	r1, r5
   1e530:	4809      	ldr	r0, [pc, #36]	; (1e558 <k_mem_slab_alloc+0xe4>)
   1e532:	f007 f97c 	bl	2582e <printk>
   1e536:	21ac      	movs	r1, #172	; 0xac
   1e538:	4630      	mov	r0, r6
   1e53a:	f007 fbfa 	bl	25d32 <assert_post_action>
   1e53e:	e7bf      	b.n	1e4c0 <k_mem_slab_alloc+0x4c>
   1e540:	0002a36c 	.word	0x0002a36c
   1e544:	00029ff8 	.word	0x00029ff8
   1e548:	0002a384 	.word	0x0002a384
   1e54c:	20002d18 	.word	0x20002d18
   1e550:	0002a314 	.word	0x0002a314
   1e554:	0002a33c 	.word	0x0002a33c
   1e558:	0002a354 	.word	0x0002a354

0001e55c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1e55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e560:	4604      	mov	r4, r0
   1e562:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1e564:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1e568:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e56c:	f3ef 8711 	mrs	r7, BASEPRI
   1e570:	f383 8812 	msr	BASEPRI_MAX, r3
   1e574:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e578:	4630      	mov	r0, r6
   1e57a:	f000 f87b 	bl	1e674 <z_spin_lock_valid>
   1e57e:	b1b0      	cbz	r0, 1e5ae <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
   1e580:	4630      	mov	r0, r6
   1e582:	f000 f897 	bl	1e6b4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1e586:	69a3      	ldr	r3, [r4, #24]
   1e588:	b313      	cbz	r3, 1e5d0 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   1e58a:	682b      	ldr	r3, [r5, #0]
   1e58c:	69a2      	ldr	r2, [r4, #24]
   1e58e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1e590:	682b      	ldr	r3, [r5, #0]
   1e592:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1e594:	69e3      	ldr	r3, [r4, #28]
   1e596:	3b01      	subs	r3, #1
   1e598:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e59a:	4630      	mov	r0, r6
   1e59c:	f000 f87a 	bl	1e694 <z_spin_unlock_valid>
   1e5a0:	b338      	cbz	r0, 1e5f2 <k_mem_slab_free+0x96>
	__asm__ volatile(
   1e5a2:	f387 8811 	msr	BASEPRI, r7
   1e5a6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e5ae:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1e620 <k_mem_slab_free+0xc4>
   1e5b2:	2381      	movs	r3, #129	; 0x81
   1e5b4:	4642      	mov	r2, r8
   1e5b6:	4917      	ldr	r1, [pc, #92]	; (1e614 <k_mem_slab_free+0xb8>)
   1e5b8:	4817      	ldr	r0, [pc, #92]	; (1e618 <k_mem_slab_free+0xbc>)
   1e5ba:	f007 f938 	bl	2582e <printk>
   1e5be:	4631      	mov	r1, r6
   1e5c0:	4816      	ldr	r0, [pc, #88]	; (1e61c <k_mem_slab_free+0xc0>)
   1e5c2:	f007 f934 	bl	2582e <printk>
   1e5c6:	2181      	movs	r1, #129	; 0x81
   1e5c8:	4640      	mov	r0, r8
   1e5ca:	f007 fbb2 	bl	25d32 <assert_post_action>
   1e5ce:	e7d7      	b.n	1e580 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1e5d0:	4620      	mov	r0, r4
   1e5d2:	f002 fd21 	bl	21018 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1e5d6:	2800      	cmp	r0, #0
   1e5d8:	d0d7      	beq.n	1e58a <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1e5da:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1e5dc:	2100      	movs	r1, #0
   1e5de:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1e5e2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1e5e4:	f002 f8a2 	bl	2072c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1e5e8:	4639      	mov	r1, r7
   1e5ea:	4630      	mov	r0, r6
   1e5ec:	f001 fdbe 	bl	2016c <z_reschedule>
			return;
   1e5f0:	e7db      	b.n	1e5aa <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e5f2:	4c0b      	ldr	r4, [pc, #44]	; (1e620 <k_mem_slab_free+0xc4>)
   1e5f4:	23ac      	movs	r3, #172	; 0xac
   1e5f6:	4622      	mov	r2, r4
   1e5f8:	490a      	ldr	r1, [pc, #40]	; (1e624 <k_mem_slab_free+0xc8>)
   1e5fa:	4807      	ldr	r0, [pc, #28]	; (1e618 <k_mem_slab_free+0xbc>)
   1e5fc:	f007 f917 	bl	2582e <printk>
   1e600:	4631      	mov	r1, r6
   1e602:	4809      	ldr	r0, [pc, #36]	; (1e628 <k_mem_slab_free+0xcc>)
   1e604:	f007 f913 	bl	2582e <printk>
   1e608:	21ac      	movs	r1, #172	; 0xac
   1e60a:	4620      	mov	r0, r4
   1e60c:	f007 fb91 	bl	25d32 <assert_post_action>
   1e610:	e7c7      	b.n	1e5a2 <k_mem_slab_free+0x46>
   1e612:	bf00      	nop
   1e614:	0002a36c 	.word	0x0002a36c
   1e618:	00029ff8 	.word	0x00029ff8
   1e61c:	0002a384 	.word	0x0002a384
   1e620:	0002a314 	.word	0x0002a314
   1e624:	0002a33c 	.word	0x0002a33c
   1e628:	0002a354 	.word	0x0002a354

0001e62c <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1e62c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1e62e:	4604      	mov	r4, r0
   1e630:	b140      	cbz	r0, 1e644 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   1e632:	2220      	movs	r2, #32
   1e634:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1e638:	f008 f87b 	bl	26732 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1e63c:	2000      	movs	r0, #0
   1e63e:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1e642:	bd10      	pop	{r4, pc}
		thread = _current;
   1e644:	4b01      	ldr	r3, [pc, #4]	; (1e64c <z_impl_k_thread_name_set+0x20>)
   1e646:	689c      	ldr	r4, [r3, #8]
   1e648:	e7f3      	b.n	1e632 <z_impl_k_thread_name_set+0x6>
   1e64a:	bf00      	nop
   1e64c:	20002d18 	.word	0x20002d18

0001e650 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1e650:	b538      	push	{r3, r4, r5, lr}
   1e652:	4614      	mov	r4, r2
   1e654:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e656:	ea54 0305 	orrs.w	r3, r4, r5
   1e65a:	d102      	bne.n	1e662 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1e65c:	f00b f82a 	bl	296b4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1e660:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1e662:	462b      	mov	r3, r5
   1e664:	4902      	ldr	r1, [pc, #8]	; (1e670 <schedule_new_thread+0x20>)
   1e666:	3018      	adds	r0, #24
   1e668:	f003 f8a2 	bl	217b0 <z_add_timeout>
   1e66c:	e7f8      	b.n	1e660 <schedule_new_thread+0x10>
   1e66e:	bf00      	nop
   1e670:	00020889 	.word	0x00020889

0001e674 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1e674:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
   1e676:	b13b      	cbz	r3, 1e688 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1e678:	f003 0303 	and.w	r3, r3, #3
   1e67c:	4a04      	ldr	r2, [pc, #16]	; (1e690 <z_spin_lock_valid+0x1c>)
   1e67e:	7d12      	ldrb	r2, [r2, #20]
   1e680:	4293      	cmp	r3, r2
   1e682:	d003      	beq.n	1e68c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
   1e684:	2001      	movs	r0, #1
   1e686:	4770      	bx	lr
   1e688:	2001      	movs	r0, #1
   1e68a:	4770      	bx	lr
			return false;
   1e68c:	2000      	movs	r0, #0
}
   1e68e:	4770      	bx	lr
   1e690:	20002d18 	.word	0x20002d18

0001e694 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1e694:	6801      	ldr	r1, [r0, #0]
   1e696:	4a06      	ldr	r2, [pc, #24]	; (1e6b0 <z_spin_unlock_valid+0x1c>)
   1e698:	7d13      	ldrb	r3, [r2, #20]
   1e69a:	6892      	ldr	r2, [r2, #8]
   1e69c:	4313      	orrs	r3, r2
   1e69e:	4299      	cmp	r1, r3
   1e6a0:	d103      	bne.n	1e6aa <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
   1e6a2:	2300      	movs	r3, #0
   1e6a4:	6003      	str	r3, [r0, #0]
	return true;
   1e6a6:	2001      	movs	r0, #1
   1e6a8:	4770      	bx	lr
		return false;
   1e6aa:	2000      	movs	r0, #0
}
   1e6ac:	4770      	bx	lr
   1e6ae:	bf00      	nop
   1e6b0:	20002d18 	.word	0x20002d18

0001e6b4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1e6b4:	4a02      	ldr	r2, [pc, #8]	; (1e6c0 <z_spin_lock_set_owner+0xc>)
   1e6b6:	7d13      	ldrb	r3, [r2, #20]
   1e6b8:	6892      	ldr	r2, [r2, #8]
   1e6ba:	4313      	orrs	r3, r2
   1e6bc:	6003      	str	r3, [r0, #0]
}
   1e6be:	4770      	bx	lr
   1e6c0:	20002d18 	.word	0x20002d18

0001e6c4 <z_thread_monitor_exit>:
{
   1e6c4:	b570      	push	{r4, r5, r6, lr}
   1e6c6:	4604      	mov	r4, r0
	__asm__ volatile(
   1e6c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e6cc:	f3ef 8511 	mrs	r5, BASEPRI
   1e6d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e6d8:	481f      	ldr	r0, [pc, #124]	; (1e758 <z_thread_monitor_exit+0x94>)
   1e6da:	f7ff ffcb 	bl	1e674 <z_spin_lock_valid>
   1e6de:	b150      	cbz	r0, 1e6f6 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
   1e6e0:	481d      	ldr	r0, [pc, #116]	; (1e758 <z_thread_monitor_exit+0x94>)
   1e6e2:	f7ff ffe7 	bl	1e6b4 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
   1e6e6:	4b1d      	ldr	r3, [pc, #116]	; (1e75c <z_thread_monitor_exit+0x98>)
   1e6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e6ea:	42a3      	cmp	r3, r4
   1e6ec:	d114      	bne.n	1e718 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
   1e6ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1e6f0:	4b1a      	ldr	r3, [pc, #104]	; (1e75c <z_thread_monitor_exit+0x98>)
   1e6f2:	629a      	str	r2, [r3, #40]	; 0x28
   1e6f4:	e017      	b.n	1e726 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e6f6:	4e1a      	ldr	r6, [pc, #104]	; (1e760 <z_thread_monitor_exit+0x9c>)
   1e6f8:	2381      	movs	r3, #129	; 0x81
   1e6fa:	4632      	mov	r2, r6
   1e6fc:	4919      	ldr	r1, [pc, #100]	; (1e764 <z_thread_monitor_exit+0xa0>)
   1e6fe:	481a      	ldr	r0, [pc, #104]	; (1e768 <z_thread_monitor_exit+0xa4>)
   1e700:	f007 f895 	bl	2582e <printk>
   1e704:	4914      	ldr	r1, [pc, #80]	; (1e758 <z_thread_monitor_exit+0x94>)
   1e706:	4819      	ldr	r0, [pc, #100]	; (1e76c <z_thread_monitor_exit+0xa8>)
   1e708:	f007 f891 	bl	2582e <printk>
   1e70c:	2181      	movs	r1, #129	; 0x81
   1e70e:	4630      	mov	r0, r6
   1e710:	f007 fb0f 	bl	25d32 <assert_post_action>
   1e714:	e7e4      	b.n	1e6e0 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
   1e716:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1e718:	b113      	cbz	r3, 1e720 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
   1e71a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1e71c:	42a2      	cmp	r2, r4
   1e71e:	d1fa      	bne.n	1e716 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
   1e720:	b10b      	cbz	r3, 1e726 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
   1e722:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1e724:	675a      	str	r2, [r3, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e726:	480c      	ldr	r0, [pc, #48]	; (1e758 <z_thread_monitor_exit+0x94>)
   1e728:	f7ff ffb4 	bl	1e694 <z_spin_unlock_valid>
   1e72c:	b120      	cbz	r0, 1e738 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
   1e72e:	f385 8811 	msr	BASEPRI, r5
   1e732:	f3bf 8f6f 	isb	sy
}
   1e736:	bd70      	pop	{r4, r5, r6, pc}
   1e738:	4c09      	ldr	r4, [pc, #36]	; (1e760 <z_thread_monitor_exit+0x9c>)
   1e73a:	23ac      	movs	r3, #172	; 0xac
   1e73c:	4622      	mov	r2, r4
   1e73e:	490c      	ldr	r1, [pc, #48]	; (1e770 <z_thread_monitor_exit+0xac>)
   1e740:	4809      	ldr	r0, [pc, #36]	; (1e768 <z_thread_monitor_exit+0xa4>)
   1e742:	f007 f874 	bl	2582e <printk>
   1e746:	4904      	ldr	r1, [pc, #16]	; (1e758 <z_thread_monitor_exit+0x94>)
   1e748:	480a      	ldr	r0, [pc, #40]	; (1e774 <z_thread_monitor_exit+0xb0>)
   1e74a:	f007 f870 	bl	2582e <printk>
   1e74e:	21ac      	movs	r1, #172	; 0xac
   1e750:	4620      	mov	r0, r4
   1e752:	f007 faee 	bl	25d32 <assert_post_action>
   1e756:	e7ea      	b.n	1e72e <z_thread_monitor_exit+0x6a>
   1e758:	20002d44 	.word	0x20002d44
   1e75c:	20002d18 	.word	0x20002d18
   1e760:	0002a314 	.word	0x0002a314
   1e764:	0002a36c 	.word	0x0002a36c
   1e768:	00029ff8 	.word	0x00029ff8
   1e76c:	0002a384 	.word	0x0002a384
   1e770:	0002a33c 	.word	0x0002a33c
   1e774:	0002a354 	.word	0x0002a354

0001e778 <z_setup_new_thread>:
{
   1e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e77c:	b085      	sub	sp, #20
   1e77e:	4604      	mov	r4, r0
   1e780:	460e      	mov	r6, r1
   1e782:	4690      	mov	r8, r2
   1e784:	461d      	mov	r5, r3
   1e786:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   1e78a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
   1e78e:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
   1e790:	2f0f      	cmp	r7, #15
   1e792:	d05e      	beq.n	1e852 <z_setup_new_thread+0xda>
   1e794:	f107 0310 	add.w	r3, r7, #16
   1e798:	2b1e      	cmp	r3, #30
   1e79a:	d85e      	bhi.n	1e85a <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1e79c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1e7a0:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1e7a2:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1e7a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e7a6:	2204      	movs	r2, #4
   1e7a8:	4639      	mov	r1, r7
   1e7aa:	4620      	mov	r0, r4
   1e7ac:	f00a ff86 	bl	296bc <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1e7b0:	4642      	mov	r2, r8
   1e7b2:	4631      	mov	r1, r6
   1e7b4:	4620      	mov	r0, r4
   1e7b6:	f00a ff63 	bl	29680 <setup_thread_stack>
   1e7ba:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e7bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e7be:	9302      	str	r3, [sp, #8]
   1e7c0:	f8cd a004 	str.w	sl, [sp, #4]
   1e7c4:	f8cd b000 	str.w	fp, [sp]
   1e7c8:	462b      	mov	r3, r5
   1e7ca:	4602      	mov	r2, r0
   1e7cc:	4631      	mov	r1, r6
   1e7ce:	4620      	mov	r0, r4
   1e7d0:	f7f4 fe0e 	bl	133f0 <arch_new_thread>
	new_thread->init_data = NULL;
   1e7d4:	2300      	movs	r3, #0
   1e7d6:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   1e7d8:	6665      	str	r5, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1e7da:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1e7de:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1e7e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e7e4:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
   1e7e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e7ea:	f3ef 8611 	mrs	r6, BASEPRI
   1e7ee:	f383 8812 	msr	BASEPRI_MAX, r3
   1e7f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e7f6:	4837      	ldr	r0, [pc, #220]	; (1e8d4 <z_setup_new_thread+0x15c>)
   1e7f8:	f7ff ff3c 	bl	1e674 <z_spin_lock_valid>
   1e7fc:	2800      	cmp	r0, #0
   1e7fe:	d042      	beq.n	1e886 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
   1e800:	4d34      	ldr	r5, [pc, #208]	; (1e8d4 <z_setup_new_thread+0x15c>)
   1e802:	4628      	mov	r0, r5
   1e804:	f7ff ff56 	bl	1e6b4 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
   1e808:	4b33      	ldr	r3, [pc, #204]	; (1e8d8 <z_setup_new_thread+0x160>)
   1e80a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1e80c:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1e80e:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e810:	4628      	mov	r0, r5
   1e812:	f7ff ff3f 	bl	1e694 <z_spin_unlock_valid>
   1e816:	2800      	cmp	r0, #0
   1e818:	d045      	beq.n	1e8a6 <z_setup_new_thread+0x12e>
	__asm__ volatile(
   1e81a:	f386 8811 	msr	BASEPRI, r6
   1e81e:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   1e822:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e824:	2b00      	cmp	r3, #0
   1e826:	d04e      	beq.n	1e8c6 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
   1e828:	221f      	movs	r2, #31
   1e82a:	4619      	mov	r1, r3
   1e82c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1e830:	f007 ff7f 	bl	26732 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1e834:	2300      	movs	r3, #0
   1e836:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	if (!_current) {
   1e83a:	4b27      	ldr	r3, [pc, #156]	; (1e8d8 <z_setup_new_thread+0x160>)
   1e83c:	689b      	ldr	r3, [r3, #8]
   1e83e:	2b00      	cmp	r3, #0
   1e840:	d045      	beq.n	1e8ce <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
   1e842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1e846:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   1e84a:	4638      	mov	r0, r7
   1e84c:	b005      	add	sp, #20
   1e84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1e852:	4b22      	ldr	r3, [pc, #136]	; (1e8dc <z_setup_new_thread+0x164>)
   1e854:	429d      	cmp	r5, r3
   1e856:	d19d      	bne.n	1e794 <z_setup_new_thread+0x1c>
   1e858:	e7a0      	b.n	1e79c <z_setup_new_thread+0x24>
   1e85a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1e900 <z_setup_new_thread+0x188>
   1e85e:	f240 13ff 	movw	r3, #511	; 0x1ff
   1e862:	464a      	mov	r2, r9
   1e864:	491e      	ldr	r1, [pc, #120]	; (1e8e0 <z_setup_new_thread+0x168>)
   1e866:	481f      	ldr	r0, [pc, #124]	; (1e8e4 <z_setup_new_thread+0x16c>)
   1e868:	f006 ffe1 	bl	2582e <printk>
   1e86c:	f06f 030f 	mvn.w	r3, #15
   1e870:	220e      	movs	r2, #14
   1e872:	4639      	mov	r1, r7
   1e874:	481c      	ldr	r0, [pc, #112]	; (1e8e8 <z_setup_new_thread+0x170>)
   1e876:	f006 ffda 	bl	2582e <printk>
   1e87a:	f240 11ff 	movw	r1, #511	; 0x1ff
   1e87e:	4648      	mov	r0, r9
   1e880:	f007 fa57 	bl	25d32 <assert_post_action>
   1e884:	e78a      	b.n	1e79c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e886:	4d19      	ldr	r5, [pc, #100]	; (1e8ec <z_setup_new_thread+0x174>)
   1e888:	2381      	movs	r3, #129	; 0x81
   1e88a:	462a      	mov	r2, r5
   1e88c:	4918      	ldr	r1, [pc, #96]	; (1e8f0 <z_setup_new_thread+0x178>)
   1e88e:	4815      	ldr	r0, [pc, #84]	; (1e8e4 <z_setup_new_thread+0x16c>)
   1e890:	f006 ffcd 	bl	2582e <printk>
   1e894:	490f      	ldr	r1, [pc, #60]	; (1e8d4 <z_setup_new_thread+0x15c>)
   1e896:	4817      	ldr	r0, [pc, #92]	; (1e8f4 <z_setup_new_thread+0x17c>)
   1e898:	f006 ffc9 	bl	2582e <printk>
   1e89c:	2181      	movs	r1, #129	; 0x81
   1e89e:	4628      	mov	r0, r5
   1e8a0:	f007 fa47 	bl	25d32 <assert_post_action>
   1e8a4:	e7ac      	b.n	1e800 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e8a6:	4d11      	ldr	r5, [pc, #68]	; (1e8ec <z_setup_new_thread+0x174>)
   1e8a8:	23ac      	movs	r3, #172	; 0xac
   1e8aa:	462a      	mov	r2, r5
   1e8ac:	4912      	ldr	r1, [pc, #72]	; (1e8f8 <z_setup_new_thread+0x180>)
   1e8ae:	480d      	ldr	r0, [pc, #52]	; (1e8e4 <z_setup_new_thread+0x16c>)
   1e8b0:	f006 ffbd 	bl	2582e <printk>
   1e8b4:	4907      	ldr	r1, [pc, #28]	; (1e8d4 <z_setup_new_thread+0x15c>)
   1e8b6:	4811      	ldr	r0, [pc, #68]	; (1e8fc <z_setup_new_thread+0x184>)
   1e8b8:	f006 ffb9 	bl	2582e <printk>
   1e8bc:	21ac      	movs	r1, #172	; 0xac
   1e8be:	4628      	mov	r0, r5
   1e8c0:	f007 fa37 	bl	25d32 <assert_post_action>
   1e8c4:	e7a9      	b.n	1e81a <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
   1e8c6:	2300      	movs	r3, #0
   1e8c8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1e8cc:	e7b5      	b.n	1e83a <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
   1e8ce:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1e8d2:	e7ba      	b.n	1e84a <z_setup_new_thread+0xd2>
   1e8d4:	20002d44 	.word	0x20002d44
   1e8d8:	20002d18 	.word	0x20002d18
   1e8dc:	0001ea91 	.word	0x0001ea91
   1e8e0:	0002d44c 	.word	0x0002d44c
   1e8e4:	00029ff8 	.word	0x00029ff8
   1e8e8:	0002d4cc 	.word	0x0002d4cc
   1e8ec:	0002a314 	.word	0x0002a314
   1e8f0:	0002a36c 	.word	0x0002a36c
   1e8f4:	0002a384 	.word	0x0002a384
   1e8f8:	0002a33c 	.word	0x0002a33c
   1e8fc:	0002a354 	.word	0x0002a354
   1e900:	0002d3f4 	.word	0x0002d3f4

0001e904 <z_impl_k_thread_create>:
{
   1e904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e908:	b086      	sub	sp, #24
   1e90a:	4604      	mov	r4, r0
   1e90c:	460d      	mov	r5, r1
   1e90e:	4616      	mov	r6, r2
   1e910:	461f      	mov	r7, r3
   1e912:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   1e916:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1e91a:	b9db      	cbnz	r3, 1e954 <z_impl_k_thread_create+0x50>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e91c:	2300      	movs	r3, #0
   1e91e:	9305      	str	r3, [sp, #20]
   1e920:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e922:	9304      	str	r3, [sp, #16]
   1e924:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e926:	9303      	str	r3, [sp, #12]
   1e928:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e92a:	9302      	str	r3, [sp, #8]
   1e92c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e92e:	9301      	str	r3, [sp, #4]
   1e930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e932:	9300      	str	r3, [sp, #0]
   1e934:	463b      	mov	r3, r7
   1e936:	4632      	mov	r2, r6
   1e938:	4629      	mov	r1, r5
   1e93a:	4620      	mov	r0, r4
   1e93c:	f7ff ff1c 	bl	1e778 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1e940:	f1b9 3fff 	cmp.w	r9, #4294967295
   1e944:	bf08      	it	eq
   1e946:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   1e94a:	d115      	bne.n	1e978 <z_impl_k_thread_create+0x74>
}
   1e94c:	4620      	mov	r0, r4
   1e94e:	b006      	add	sp, #24
   1e950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1e954:	f8df a038 	ldr.w	sl, [pc, #56]	; 1e990 <z_impl_k_thread_create+0x8c>
   1e958:	f44f 731a 	mov.w	r3, #616	; 0x268
   1e95c:	4652      	mov	r2, sl
   1e95e:	4909      	ldr	r1, [pc, #36]	; (1e984 <z_impl_k_thread_create+0x80>)
   1e960:	4809      	ldr	r0, [pc, #36]	; (1e988 <z_impl_k_thread_create+0x84>)
   1e962:	f006 ff64 	bl	2582e <printk>
   1e966:	4809      	ldr	r0, [pc, #36]	; (1e98c <z_impl_k_thread_create+0x88>)
   1e968:	f006 ff61 	bl	2582e <printk>
   1e96c:	f44f 711a 	mov.w	r1, #616	; 0x268
   1e970:	4650      	mov	r0, sl
   1e972:	f007 f9de 	bl	25d32 <assert_post_action>
   1e976:	e7d1      	b.n	1e91c <z_impl_k_thread_create+0x18>
		schedule_new_thread(new_thread, delay);
   1e978:	4642      	mov	r2, r8
   1e97a:	464b      	mov	r3, r9
   1e97c:	4620      	mov	r0, r4
   1e97e:	f7ff fe67 	bl	1e650 <schedule_new_thread>
   1e982:	e7e3      	b.n	1e94c <z_impl_k_thread_create+0x48>
   1e984:	0002d500 	.word	0x0002d500
   1e988:	00029ff8 	.word	0x00029ff8
   1e98c:	0002d514 	.word	0x0002d514
   1e990:	0002d3f4 	.word	0x0002d3f4

0001e994 <z_init_static_threads>:
{
   1e994:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1e998:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1e99a:	4c37      	ldr	r4, [pc, #220]	; (1ea78 <z_init_static_threads+0xe4>)
   1e99c:	e027      	b.n	1e9ee <z_init_static_threads+0x5a>
   1e99e:	4d37      	ldr	r5, [pc, #220]	; (1ea7c <z_init_static_threads+0xe8>)
   1e9a0:	f240 23cf 	movw	r3, #719	; 0x2cf
   1e9a4:	462a      	mov	r2, r5
   1e9a6:	4936      	ldr	r1, [pc, #216]	; (1ea80 <z_init_static_threads+0xec>)
   1e9a8:	4836      	ldr	r0, [pc, #216]	; (1ea84 <z_init_static_threads+0xf0>)
   1e9aa:	f006 ff40 	bl	2582e <printk>
   1e9ae:	4836      	ldr	r0, [pc, #216]	; (1ea88 <z_init_static_threads+0xf4>)
   1e9b0:	f006 ff3d 	bl	2582e <printk>
   1e9b4:	f240 21cf 	movw	r1, #719	; 0x2cf
   1e9b8:	4628      	mov	r0, r5
   1e9ba:	f007 f9ba 	bl	25d32 <assert_post_action>
   1e9be:	4b33      	ldr	r3, [pc, #204]	; (1ea8c <z_init_static_threads+0xf8>)
   1e9c0:	429c      	cmp	r4, r3
   1e9c2:	d218      	bcs.n	1e9f6 <z_init_static_threads+0x62>
		z_setup_new_thread(
   1e9c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e9c6:	9305      	str	r3, [sp, #20]
   1e9c8:	6a23      	ldr	r3, [r4, #32]
   1e9ca:	9304      	str	r3, [sp, #16]
   1e9cc:	69e3      	ldr	r3, [r4, #28]
   1e9ce:	9303      	str	r3, [sp, #12]
   1e9d0:	69a3      	ldr	r3, [r4, #24]
   1e9d2:	9302      	str	r3, [sp, #8]
   1e9d4:	6963      	ldr	r3, [r4, #20]
   1e9d6:	9301      	str	r3, [sp, #4]
   1e9d8:	6923      	ldr	r3, [r4, #16]
   1e9da:	9300      	str	r3, [sp, #0]
   1e9dc:	68e3      	ldr	r3, [r4, #12]
   1e9de:	68a2      	ldr	r2, [r4, #8]
   1e9e0:	6861      	ldr	r1, [r4, #4]
   1e9e2:	6820      	ldr	r0, [r4, #0]
   1e9e4:	f7ff fec8 	bl	1e778 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1e9e8:	6823      	ldr	r3, [r4, #0]
   1e9ea:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1e9ec:	3430      	adds	r4, #48	; 0x30
   1e9ee:	4b27      	ldr	r3, [pc, #156]	; (1ea8c <z_init_static_threads+0xf8>)
   1e9f0:	429c      	cmp	r4, r3
   1e9f2:	d9e4      	bls.n	1e9be <z_init_static_threads+0x2a>
   1e9f4:	e7d3      	b.n	1e99e <z_init_static_threads+0xa>
	k_sched_lock();
   1e9f6:	f001 fc07 	bl	20208 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e9fa:	4c1f      	ldr	r4, [pc, #124]	; (1ea78 <z_init_static_threads+0xe4>)
   1e9fc:	e01b      	b.n	1ea36 <z_init_static_threads+0xa2>
			schedule_new_thread(thread_data->init_thread,
   1e9fe:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1ea00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ea04:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   1ea08:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1ea0c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1ea10:	03d8      	lsls	r0, r3, #15
   1ea12:	f240 35e7 	movw	r5, #999	; 0x3e7
   1ea16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ea1a:	2300      	movs	r3, #0
   1ea1c:	1940      	adds	r0, r0, r5
   1ea1e:	f04f 0500 	mov.w	r5, #0
   1ea22:	eb45 0101 	adc.w	r1, r5, r1
   1ea26:	f7e1 fb6b 	bl	100 <__aeabi_uldivmod>
   1ea2a:	4602      	mov	r2, r0
   1ea2c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1ea2e:	4630      	mov	r0, r6
   1ea30:	f7ff fe0e 	bl	1e650 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ea34:	3430      	adds	r4, #48	; 0x30
   1ea36:	4b15      	ldr	r3, [pc, #84]	; (1ea8c <z_init_static_threads+0xf8>)
   1ea38:	429c      	cmp	r4, r3
   1ea3a:	d807      	bhi.n	1ea4c <z_init_static_threads+0xb8>
   1ea3c:	4b13      	ldr	r3, [pc, #76]	; (1ea8c <z_init_static_threads+0xf8>)
   1ea3e:	429c      	cmp	r4, r3
   1ea40:	d215      	bcs.n	1ea6e <z_init_static_threads+0xda>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ea42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ea44:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ea48:	d0f4      	beq.n	1ea34 <z_init_static_threads+0xa0>
   1ea4a:	e7d8      	b.n	1e9fe <z_init_static_threads+0x6a>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ea4c:	4d0b      	ldr	r5, [pc, #44]	; (1ea7c <z_init_static_threads+0xe8>)
   1ea4e:	f240 23ee 	movw	r3, #750	; 0x2ee
   1ea52:	462a      	mov	r2, r5
   1ea54:	490a      	ldr	r1, [pc, #40]	; (1ea80 <z_init_static_threads+0xec>)
   1ea56:	480b      	ldr	r0, [pc, #44]	; (1ea84 <z_init_static_threads+0xf0>)
   1ea58:	f006 fee9 	bl	2582e <printk>
   1ea5c:	480a      	ldr	r0, [pc, #40]	; (1ea88 <z_init_static_threads+0xf4>)
   1ea5e:	f006 fee6 	bl	2582e <printk>
   1ea62:	f240 21ee 	movw	r1, #750	; 0x2ee
   1ea66:	4628      	mov	r0, r5
   1ea68:	f007 f963 	bl	25d32 <assert_post_action>
   1ea6c:	e7e6      	b.n	1ea3c <z_init_static_threads+0xa8>
	k_sched_unlock();
   1ea6e:	f002 f991 	bl	20d94 <k_sched_unlock>
}
   1ea72:	b006      	add	sp, #24
   1ea74:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1ea78:	200006d0 	.word	0x200006d0
   1ea7c:	0002d3f4 	.word	0x0002d3f4
   1ea80:	0002d53c 	.word	0x0002d53c
   1ea84:	00029ff8 	.word	0x00029ff8
   1ea88:	0002bbac 	.word	0x0002bbac
   1ea8c:	200006d0 	.word	0x200006d0

0001ea90 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1ea90:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1ea92:	4b12      	ldr	r3, [pc, #72]	; (1eadc <idle+0x4c>)
   1ea94:	689b      	ldr	r3, [r3, #8]
   1ea96:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1ea9a:	2b00      	cmp	r3, #0
   1ea9c:	da0d      	bge.n	1eaba <idle+0x2a>
   1ea9e:	4c10      	ldr	r4, [pc, #64]	; (1eae0 <idle+0x50>)
   1eaa0:	2327      	movs	r3, #39	; 0x27
   1eaa2:	4622      	mov	r2, r4
   1eaa4:	490f      	ldr	r1, [pc, #60]	; (1eae4 <idle+0x54>)
   1eaa6:	4810      	ldr	r0, [pc, #64]	; (1eae8 <idle+0x58>)
   1eaa8:	f006 fec1 	bl	2582e <printk>
   1eaac:	2127      	movs	r1, #39	; 0x27
   1eaae:	4620      	mov	r0, r4
   1eab0:	f007 f93f 	bl	25d32 <assert_post_action>
   1eab4:	e001      	b.n	1eaba <idle+0x2a>
	arch_cpu_idle();
   1eab6:	f7f4 fb41 	bl	1313c <arch_cpu_idle>
	__asm__ volatile(
   1eaba:	f04f 0240 	mov.w	r2, #64	; 0x40
   1eabe:	f3ef 8311 	mrs	r3, BASEPRI
   1eac2:	f382 8812 	msr	BASEPRI_MAX, r2
   1eac6:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1eaca:	f002 ffc7 	bl	21a5c <z_get_next_timeout_expiry>
   1eace:	4b03      	ldr	r3, [pc, #12]	; (1eadc <idle+0x4c>)
   1ead0:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1ead2:	f7f3 fd5f 	bl	12594 <pm_system_suspend>
   1ead6:	2800      	cmp	r0, #0
   1ead8:	d1ef      	bne.n	1eaba <idle+0x2a>
   1eada:	e7ec      	b.n	1eab6 <idle+0x26>
   1eadc:	20002d18 	.word	0x20002d18
   1eae0:	0002d56c 	.word	0x0002d56c
   1eae4:	0002d590 	.word	0x0002d590
   1eae8:	00029ff8 	.word	0x00029ff8

0001eaec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1eaec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eaf0:	b083      	sub	sp, #12
   1eaf2:	4604      	mov	r4, r0
   1eaf4:	4616      	mov	r6, r2
   1eaf6:	461d      	mov	r5, r3
   1eaf8:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1eafc:	2900      	cmp	r1, #0
   1eafe:	d12b      	bne.n	1eb58 <z_impl_k_mutex_lock+0x6c>
   1eb00:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eb04:	f3ef 8711 	mrs	r7, BASEPRI
   1eb08:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1eb10:	487b      	ldr	r0, [pc, #492]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1eb12:	f7ff fdaf 	bl	1e674 <z_spin_lock_valid>
   1eb16:	2800      	cmp	r0, #0
   1eb18:	d02d      	beq.n	1eb76 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
   1eb1a:	4879      	ldr	r0, [pc, #484]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1eb1c:	f7ff fdca 	bl	1e6b4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1eb20:	68e1      	ldr	r1, [r4, #12]
   1eb22:	2900      	cmp	r1, #0
   1eb24:	d138      	bne.n	1eb98 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1eb26:	2900      	cmp	r1, #0
   1eb28:	d17d      	bne.n	1ec26 <z_impl_k_mutex_lock+0x13a>
   1eb2a:	4b76      	ldr	r3, [pc, #472]	; (1ed04 <z_impl_k_mutex_lock+0x218>)
   1eb2c:	689b      	ldr	r3, [r3, #8]
   1eb2e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1eb32:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1eb34:	3101      	adds	r1, #1
   1eb36:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1eb38:	4b72      	ldr	r3, [pc, #456]	; (1ed04 <z_impl_k_mutex_lock+0x218>)
   1eb3a:	689b      	ldr	r3, [r3, #8]
   1eb3c:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eb3e:	4870      	ldr	r0, [pc, #448]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1eb40:	f7ff fda8 	bl	1e694 <z_spin_unlock_valid>
   1eb44:	2800      	cmp	r0, #0
   1eb46:	d070      	beq.n	1ec2a <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
   1eb48:	f387 8811 	msr	BASEPRI, r7
   1eb4c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1eb50:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1eb52:	b003      	add	sp, #12
   1eb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1eb58:	4f6b      	ldr	r7, [pc, #428]	; (1ed08 <z_impl_k_mutex_lock+0x21c>)
   1eb5a:	2365      	movs	r3, #101	; 0x65
   1eb5c:	463a      	mov	r2, r7
   1eb5e:	496b      	ldr	r1, [pc, #428]	; (1ed0c <z_impl_k_mutex_lock+0x220>)
   1eb60:	486b      	ldr	r0, [pc, #428]	; (1ed10 <z_impl_k_mutex_lock+0x224>)
   1eb62:	f006 fe64 	bl	2582e <printk>
   1eb66:	486b      	ldr	r0, [pc, #428]	; (1ed14 <z_impl_k_mutex_lock+0x228>)
   1eb68:	f006 fe61 	bl	2582e <printk>
   1eb6c:	2165      	movs	r1, #101	; 0x65
   1eb6e:	4638      	mov	r0, r7
   1eb70:	f007 f8df 	bl	25d32 <assert_post_action>
   1eb74:	e7c4      	b.n	1eb00 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1eb76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 1ed20 <z_impl_k_mutex_lock+0x234>
   1eb7a:	2381      	movs	r3, #129	; 0x81
   1eb7c:	4642      	mov	r2, r8
   1eb7e:	4966      	ldr	r1, [pc, #408]	; (1ed18 <z_impl_k_mutex_lock+0x22c>)
   1eb80:	4863      	ldr	r0, [pc, #396]	; (1ed10 <z_impl_k_mutex_lock+0x224>)
   1eb82:	f006 fe54 	bl	2582e <printk>
   1eb86:	495e      	ldr	r1, [pc, #376]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1eb88:	4864      	ldr	r0, [pc, #400]	; (1ed1c <z_impl_k_mutex_lock+0x230>)
   1eb8a:	f006 fe50 	bl	2582e <printk>
   1eb8e:	2181      	movs	r1, #129	; 0x81
   1eb90:	4640      	mov	r0, r8
   1eb92:	f007 f8ce 	bl	25d32 <assert_post_action>
   1eb96:	e7c0      	b.n	1eb1a <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1eb98:	68a2      	ldr	r2, [r4, #8]
   1eb9a:	4b5a      	ldr	r3, [pc, #360]	; (1ed04 <z_impl_k_mutex_lock+0x218>)
   1eb9c:	689b      	ldr	r3, [r3, #8]
   1eb9e:	429a      	cmp	r2, r3
   1eba0:	d0c1      	beq.n	1eb26 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1eba2:	ea55 0106 	orrs.w	r1, r5, r6
   1eba6:	bf0c      	ite	eq
   1eba8:	f04f 0801 	moveq.w	r8, #1
   1ebac:	f04f 0800 	movne.w	r8, #0
   1ebb0:	d04b      	beq.n	1ec4a <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
   1ebb2:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1ebb6:	4649      	mov	r1, r9
   1ebb8:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1ebbc:	f00a fd8f 	bl	296de <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1ebc0:	4581      	cmp	r9, r0
   1ebc2:	dc5d      	bgt.n	1ec80 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
   1ebc4:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1ebc8:	9600      	str	r6, [sp, #0]
   1ebca:	9501      	str	r5, [sp, #4]
   1ebcc:	4622      	mov	r2, r4
   1ebce:	4639      	mov	r1, r7
   1ebd0:	484b      	ldr	r0, [pc, #300]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1ebd2:	f001 ff83 	bl	20adc <z_pend_curr>
	if (got_mutex == 0) {
   1ebd6:	2800      	cmp	r0, #0
   1ebd8:	d0bb      	beq.n	1eb52 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
   1ebda:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ebde:	f3ef 8511 	mrs	r5, BASEPRI
   1ebe2:	f383 8812 	msr	BASEPRI_MAX, r3
   1ebe6:	f3bf 8f6f 	isb	sy
   1ebea:	4845      	ldr	r0, [pc, #276]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1ebec:	f7ff fd42 	bl	1e674 <z_spin_lock_valid>
   1ebf0:	2800      	cmp	r0, #0
   1ebf2:	d04b      	beq.n	1ec8c <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
   1ebf4:	4842      	ldr	r0, [pc, #264]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1ebf6:	f7ff fd5d 	bl	1e6b4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1ebfa:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ebfc:	429c      	cmp	r4, r3
   1ebfe:	d055      	beq.n	1ecac <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ec00:	2b00      	cmp	r3, #0
   1ec02:	d053      	beq.n	1ecac <z_impl_k_mutex_lock+0x1c0>
   1ec04:	6921      	ldr	r1, [r4, #16]
   1ec06:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1ec0a:	f00a fd68 	bl	296de <new_prio_for_inheritance>
   1ec0e:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ec10:	4620      	mov	r0, r4
   1ec12:	f00a fd6f 	bl	296f4 <adjust_owner_prio>
   1ec16:	2800      	cmp	r0, #0
   1ec18:	d14a      	bne.n	1ecb0 <z_impl_k_mutex_lock+0x1c4>
   1ec1a:	f1b9 0f00 	cmp.w	r9, #0
   1ec1e:	d049      	beq.n	1ecb4 <z_impl_k_mutex_lock+0x1c8>
   1ec20:	f04f 0801 	mov.w	r8, #1
   1ec24:	e046      	b.n	1ecb4 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
   1ec26:	6923      	ldr	r3, [r4, #16]
   1ec28:	e783      	b.n	1eb32 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ec2a:	4c3d      	ldr	r4, [pc, #244]	; (1ed20 <z_impl_k_mutex_lock+0x234>)
   1ec2c:	23ac      	movs	r3, #172	; 0xac
   1ec2e:	4622      	mov	r2, r4
   1ec30:	493c      	ldr	r1, [pc, #240]	; (1ed24 <z_impl_k_mutex_lock+0x238>)
   1ec32:	4837      	ldr	r0, [pc, #220]	; (1ed10 <z_impl_k_mutex_lock+0x224>)
   1ec34:	f006 fdfb 	bl	2582e <printk>
   1ec38:	4931      	ldr	r1, [pc, #196]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1ec3a:	483b      	ldr	r0, [pc, #236]	; (1ed28 <z_impl_k_mutex_lock+0x23c>)
   1ec3c:	f006 fdf7 	bl	2582e <printk>
   1ec40:	21ac      	movs	r1, #172	; 0xac
   1ec42:	4620      	mov	r0, r4
   1ec44:	f007 f875 	bl	25d32 <assert_post_action>
   1ec48:	e77e      	b.n	1eb48 <z_impl_k_mutex_lock+0x5c>
   1ec4a:	482d      	ldr	r0, [pc, #180]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1ec4c:	f7ff fd22 	bl	1e694 <z_spin_unlock_valid>
   1ec50:	b130      	cbz	r0, 1ec60 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
   1ec52:	f387 8811 	msr	BASEPRI, r7
   1ec56:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1ec5a:	f06f 000f 	mvn.w	r0, #15
   1ec5e:	e778      	b.n	1eb52 <z_impl_k_mutex_lock+0x66>
   1ec60:	4c2f      	ldr	r4, [pc, #188]	; (1ed20 <z_impl_k_mutex_lock+0x234>)
   1ec62:	23ac      	movs	r3, #172	; 0xac
   1ec64:	4622      	mov	r2, r4
   1ec66:	492f      	ldr	r1, [pc, #188]	; (1ed24 <z_impl_k_mutex_lock+0x238>)
   1ec68:	4829      	ldr	r0, [pc, #164]	; (1ed10 <z_impl_k_mutex_lock+0x224>)
   1ec6a:	f006 fde0 	bl	2582e <printk>
   1ec6e:	4924      	ldr	r1, [pc, #144]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1ec70:	482d      	ldr	r0, [pc, #180]	; (1ed28 <z_impl_k_mutex_lock+0x23c>)
   1ec72:	f006 fddc 	bl	2582e <printk>
   1ec76:	21ac      	movs	r1, #172	; 0xac
   1ec78:	4620      	mov	r0, r4
   1ec7a:	f007 f85a 	bl	25d32 <assert_post_action>
   1ec7e:	e7e8      	b.n	1ec52 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   1ec80:	4601      	mov	r1, r0
   1ec82:	4620      	mov	r0, r4
   1ec84:	f00a fd36 	bl	296f4 <adjust_owner_prio>
   1ec88:	4681      	mov	r9, r0
   1ec8a:	e79d      	b.n	1ebc8 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ec8c:	4e24      	ldr	r6, [pc, #144]	; (1ed20 <z_impl_k_mutex_lock+0x234>)
   1ec8e:	2381      	movs	r3, #129	; 0x81
   1ec90:	4632      	mov	r2, r6
   1ec92:	4921      	ldr	r1, [pc, #132]	; (1ed18 <z_impl_k_mutex_lock+0x22c>)
   1ec94:	481e      	ldr	r0, [pc, #120]	; (1ed10 <z_impl_k_mutex_lock+0x224>)
   1ec96:	f006 fdca 	bl	2582e <printk>
   1ec9a:	4919      	ldr	r1, [pc, #100]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1ec9c:	481f      	ldr	r0, [pc, #124]	; (1ed1c <z_impl_k_mutex_lock+0x230>)
   1ec9e:	f006 fdc6 	bl	2582e <printk>
   1eca2:	2181      	movs	r1, #129	; 0x81
   1eca4:	4630      	mov	r0, r6
   1eca6:	f007 f844 	bl	25d32 <assert_post_action>
   1ecaa:	e7a3      	b.n	1ebf4 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ecac:	6921      	ldr	r1, [r4, #16]
   1ecae:	e7af      	b.n	1ec10 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ecb0:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1ecb4:	f1b8 0f00 	cmp.w	r8, #0
   1ecb8:	d006      	beq.n	1ecc8 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
   1ecba:	4629      	mov	r1, r5
   1ecbc:	4810      	ldr	r0, [pc, #64]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1ecbe:	f001 fa55 	bl	2016c <z_reschedule>
	return -EAGAIN;
   1ecc2:	f06f 000a 	mvn.w	r0, #10
   1ecc6:	e744      	b.n	1eb52 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ecc8:	480d      	ldr	r0, [pc, #52]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1ecca:	f7ff fce3 	bl	1e694 <z_spin_unlock_valid>
   1ecce:	b130      	cbz	r0, 1ecde <z_impl_k_mutex_lock+0x1f2>
   1ecd0:	f385 8811 	msr	BASEPRI, r5
   1ecd4:	f3bf 8f6f 	isb	sy
   1ecd8:	f06f 000a 	mvn.w	r0, #10
   1ecdc:	e739      	b.n	1eb52 <z_impl_k_mutex_lock+0x66>
   1ecde:	4c10      	ldr	r4, [pc, #64]	; (1ed20 <z_impl_k_mutex_lock+0x234>)
   1ece0:	23ac      	movs	r3, #172	; 0xac
   1ece2:	4622      	mov	r2, r4
   1ece4:	490f      	ldr	r1, [pc, #60]	; (1ed24 <z_impl_k_mutex_lock+0x238>)
   1ece6:	480a      	ldr	r0, [pc, #40]	; (1ed10 <z_impl_k_mutex_lock+0x224>)
   1ece8:	f006 fda1 	bl	2582e <printk>
   1ecec:	4904      	ldr	r1, [pc, #16]	; (1ed00 <z_impl_k_mutex_lock+0x214>)
   1ecee:	480e      	ldr	r0, [pc, #56]	; (1ed28 <z_impl_k_mutex_lock+0x23c>)
   1ecf0:	f006 fd9d 	bl	2582e <printk>
   1ecf4:	21ac      	movs	r1, #172	; 0xac
   1ecf6:	4620      	mov	r0, r4
   1ecf8:	f007 f81b 	bl	25d32 <assert_post_action>
   1ecfc:	e7e8      	b.n	1ecd0 <z_impl_k_mutex_lock+0x1e4>
   1ecfe:	bf00      	nop
   1ed00:	20002d48 	.word	0x20002d48
   1ed04:	20002d18 	.word	0x20002d18
   1ed08:	0002d5b8 	.word	0x0002d5b8
   1ed0c:	0002d500 	.word	0x0002d500
   1ed10:	00029ff8 	.word	0x00029ff8
   1ed14:	0002d5dc 	.word	0x0002d5dc
   1ed18:	0002a36c 	.word	0x0002a36c
   1ed1c:	0002a384 	.word	0x0002a384
   1ed20:	0002a314 	.word	0x0002a314
   1ed24:	0002a33c 	.word	0x0002a33c
   1ed28:	0002a354 	.word	0x0002a354

0001ed2c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1ed2c:	b570      	push	{r4, r5, r6, lr}
   1ed2e:	4604      	mov	r4, r0
   1ed30:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1ed34:	bb03      	cbnz	r3, 1ed78 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1ed36:	68a3      	ldr	r3, [r4, #8]
   1ed38:	2b00      	cmp	r3, #0
   1ed3a:	f000 80a6 	beq.w	1ee8a <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1ed3e:	4a56      	ldr	r2, [pc, #344]	; (1ee98 <z_impl_k_mutex_unlock+0x16c>)
   1ed40:	6892      	ldr	r2, [r2, #8]
   1ed42:	4293      	cmp	r3, r2
   1ed44:	f040 80a4 	bne.w	1ee90 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1ed48:	68e3      	ldr	r3, [r4, #12]
   1ed4a:	b323      	cbz	r3, 1ed96 <z_impl_k_mutex_unlock+0x6a>
   1ed4c:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   1ed50:	bb6b      	cbnz	r3, 1edae <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1ed52:	4b51      	ldr	r3, [pc, #324]	; (1ee98 <z_impl_k_mutex_unlock+0x16c>)
   1ed54:	689b      	ldr	r3, [r3, #8]
   1ed56:	7bdb      	ldrb	r3, [r3, #15]
   1ed58:	2b01      	cmp	r3, #1
   1ed5a:	d037      	beq.n	1edcc <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
   1ed5c:	4b4e      	ldr	r3, [pc, #312]	; (1ee98 <z_impl_k_mutex_unlock+0x16c>)
   1ed5e:	689a      	ldr	r2, [r3, #8]
   1ed60:	7bd3      	ldrb	r3, [r2, #15]
   1ed62:	3b01      	subs	r3, #1
   1ed64:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1ed66:	68e3      	ldr	r3, [r4, #12]
   1ed68:	2b01      	cmp	r3, #1
   1ed6a:	d93e      	bls.n	1edea <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
   1ed6c:	3b01      	subs	r3, #1
   1ed6e:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1ed70:	f002 f810 	bl	20d94 <k_sched_unlock>

	return 0;
   1ed74:	2000      	movs	r0, #0
}
   1ed76:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1ed78:	4d48      	ldr	r5, [pc, #288]	; (1ee9c <z_impl_k_mutex_unlock+0x170>)
   1ed7a:	23c7      	movs	r3, #199	; 0xc7
   1ed7c:	462a      	mov	r2, r5
   1ed7e:	4948      	ldr	r1, [pc, #288]	; (1eea0 <z_impl_k_mutex_unlock+0x174>)
   1ed80:	4848      	ldr	r0, [pc, #288]	; (1eea4 <z_impl_k_mutex_unlock+0x178>)
   1ed82:	f006 fd54 	bl	2582e <printk>
   1ed86:	4848      	ldr	r0, [pc, #288]	; (1eea8 <z_impl_k_mutex_unlock+0x17c>)
   1ed88:	f006 fd51 	bl	2582e <printk>
   1ed8c:	21c7      	movs	r1, #199	; 0xc7
   1ed8e:	4628      	mov	r0, r5
   1ed90:	f006 ffcf 	bl	25d32 <assert_post_action>
   1ed94:	e7cf      	b.n	1ed36 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1ed96:	4d41      	ldr	r5, [pc, #260]	; (1ee9c <z_impl_k_mutex_unlock+0x170>)
   1ed98:	23df      	movs	r3, #223	; 0xdf
   1ed9a:	462a      	mov	r2, r5
   1ed9c:	4943      	ldr	r1, [pc, #268]	; (1eeac <z_impl_k_mutex_unlock+0x180>)
   1ed9e:	4841      	ldr	r0, [pc, #260]	; (1eea4 <z_impl_k_mutex_unlock+0x178>)
   1eda0:	f006 fd45 	bl	2582e <printk>
   1eda4:	21df      	movs	r1, #223	; 0xdf
   1eda6:	4628      	mov	r0, r5
   1eda8:	f006 ffc3 	bl	25d32 <assert_post_action>
   1edac:	e7ce      	b.n	1ed4c <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
   1edae:	4d40      	ldr	r5, [pc, #256]	; (1eeb0 <z_impl_k_mutex_unlock+0x184>)
   1edb0:	23fd      	movs	r3, #253	; 0xfd
   1edb2:	462a      	mov	r2, r5
   1edb4:	493a      	ldr	r1, [pc, #232]	; (1eea0 <z_impl_k_mutex_unlock+0x174>)
   1edb6:	483b      	ldr	r0, [pc, #236]	; (1eea4 <z_impl_k_mutex_unlock+0x178>)
   1edb8:	f006 fd39 	bl	2582e <printk>
   1edbc:	483d      	ldr	r0, [pc, #244]	; (1eeb4 <z_impl_k_mutex_unlock+0x188>)
   1edbe:	f006 fd36 	bl	2582e <printk>
   1edc2:	21fd      	movs	r1, #253	; 0xfd
   1edc4:	4628      	mov	r0, r5
   1edc6:	f006 ffb4 	bl	25d32 <assert_post_action>
   1edca:	e7c2      	b.n	1ed52 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1edcc:	4d38      	ldr	r5, [pc, #224]	; (1eeb0 <z_impl_k_mutex_unlock+0x184>)
   1edce:	23fe      	movs	r3, #254	; 0xfe
   1edd0:	462a      	mov	r2, r5
   1edd2:	4939      	ldr	r1, [pc, #228]	; (1eeb8 <z_impl_k_mutex_unlock+0x18c>)
   1edd4:	4833      	ldr	r0, [pc, #204]	; (1eea4 <z_impl_k_mutex_unlock+0x178>)
   1edd6:	f006 fd2a 	bl	2582e <printk>
   1edda:	4836      	ldr	r0, [pc, #216]	; (1eeb4 <z_impl_k_mutex_unlock+0x188>)
   1eddc:	f006 fd27 	bl	2582e <printk>
   1ede0:	21fe      	movs	r1, #254	; 0xfe
   1ede2:	4628      	mov	r0, r5
   1ede4:	f006 ffa5 	bl	25d32 <assert_post_action>
   1ede8:	e7b8      	b.n	1ed5c <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
   1edea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1edee:	f3ef 8511 	mrs	r5, BASEPRI
   1edf2:	f383 8812 	msr	BASEPRI_MAX, r3
   1edf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1edfa:	4830      	ldr	r0, [pc, #192]	; (1eebc <z_impl_k_mutex_unlock+0x190>)
   1edfc:	f7ff fc3a 	bl	1e674 <z_spin_lock_valid>
   1ee00:	b1c0      	cbz	r0, 1ee34 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
   1ee02:	482e      	ldr	r0, [pc, #184]	; (1eebc <z_impl_k_mutex_unlock+0x190>)
   1ee04:	f7ff fc56 	bl	1e6b4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1ee08:	6921      	ldr	r1, [r4, #16]
   1ee0a:	4620      	mov	r0, r4
   1ee0c:	f00a fc72 	bl	296f4 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1ee10:	4620      	mov	r0, r4
   1ee12:	f002 f901 	bl	21018 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1ee16:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1ee18:	b1e0      	cbz	r0, 1ee54 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
   1ee1a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ee1e:	6123      	str	r3, [r4, #16]
   1ee20:	2300      	movs	r3, #0
   1ee22:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1ee26:	f001 fc81 	bl	2072c <z_ready_thread>
		z_reschedule(&lock, key);
   1ee2a:	4629      	mov	r1, r5
   1ee2c:	4823      	ldr	r0, [pc, #140]	; (1eebc <z_impl_k_mutex_unlock+0x190>)
   1ee2e:	f001 f99d 	bl	2016c <z_reschedule>
   1ee32:	e79d      	b.n	1ed70 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ee34:	4e22      	ldr	r6, [pc, #136]	; (1eec0 <z_impl_k_mutex_unlock+0x194>)
   1ee36:	2381      	movs	r3, #129	; 0x81
   1ee38:	4632      	mov	r2, r6
   1ee3a:	4922      	ldr	r1, [pc, #136]	; (1eec4 <z_impl_k_mutex_unlock+0x198>)
   1ee3c:	4819      	ldr	r0, [pc, #100]	; (1eea4 <z_impl_k_mutex_unlock+0x178>)
   1ee3e:	f006 fcf6 	bl	2582e <printk>
   1ee42:	491e      	ldr	r1, [pc, #120]	; (1eebc <z_impl_k_mutex_unlock+0x190>)
   1ee44:	4820      	ldr	r0, [pc, #128]	; (1eec8 <z_impl_k_mutex_unlock+0x19c>)
   1ee46:	f006 fcf2 	bl	2582e <printk>
   1ee4a:	2181      	movs	r1, #129	; 0x81
   1ee4c:	4630      	mov	r0, r6
   1ee4e:	f006 ff70 	bl	25d32 <assert_post_action>
   1ee52:	e7d6      	b.n	1ee02 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
   1ee54:	2300      	movs	r3, #0
   1ee56:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ee58:	4818      	ldr	r0, [pc, #96]	; (1eebc <z_impl_k_mutex_unlock+0x190>)
   1ee5a:	f7ff fc1b 	bl	1e694 <z_spin_unlock_valid>
   1ee5e:	b120      	cbz	r0, 1ee6a <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
   1ee60:	f385 8811 	msr	BASEPRI, r5
   1ee64:	f3bf 8f6f 	isb	sy
   1ee68:	e782      	b.n	1ed70 <z_impl_k_mutex_unlock+0x44>
   1ee6a:	4c15      	ldr	r4, [pc, #84]	; (1eec0 <z_impl_k_mutex_unlock+0x194>)
   1ee6c:	23ac      	movs	r3, #172	; 0xac
   1ee6e:	4622      	mov	r2, r4
   1ee70:	4916      	ldr	r1, [pc, #88]	; (1eecc <z_impl_k_mutex_unlock+0x1a0>)
   1ee72:	480c      	ldr	r0, [pc, #48]	; (1eea4 <z_impl_k_mutex_unlock+0x178>)
   1ee74:	f006 fcdb 	bl	2582e <printk>
   1ee78:	4910      	ldr	r1, [pc, #64]	; (1eebc <z_impl_k_mutex_unlock+0x190>)
   1ee7a:	4815      	ldr	r0, [pc, #84]	; (1eed0 <z_impl_k_mutex_unlock+0x1a4>)
   1ee7c:	f006 fcd7 	bl	2582e <printk>
   1ee80:	21ac      	movs	r1, #172	; 0xac
   1ee82:	4620      	mov	r0, r4
   1ee84:	f006 ff55 	bl	25d32 <assert_post_action>
   1ee88:	e7ea      	b.n	1ee60 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
   1ee8a:	f06f 0015 	mvn.w	r0, #21
   1ee8e:	e772      	b.n	1ed76 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
   1ee90:	f04f 30ff 	mov.w	r0, #4294967295
   1ee94:	e76f      	b.n	1ed76 <z_impl_k_mutex_unlock+0x4a>
   1ee96:	bf00      	nop
   1ee98:	20002d18 	.word	0x20002d18
   1ee9c:	0002d5b8 	.word	0x0002d5b8
   1eea0:	0002d500 	.word	0x0002d500
   1eea4:	00029ff8 	.word	0x00029ff8
   1eea8:	0002d5dc 	.word	0x0002d5dc
   1eeac:	0002d604 	.word	0x0002d604
   1eeb0:	0002d61c 	.word	0x0002d61c
   1eeb4:	0002c900 	.word	0x0002c900
   1eeb8:	0002d648 	.word	0x0002d648
   1eebc:	20002d48 	.word	0x20002d48
   1eec0:	0002a314 	.word	0x0002a314
   1eec4:	0002a36c 	.word	0x0002a36c
   1eec8:	0002a384 	.word	0x0002a384
   1eecc:	0002a33c 	.word	0x0002a33c
   1eed0:	0002a354 	.word	0x0002a354

0001eed4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1eed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eed8:	4604      	mov	r4, r0
   1eeda:	460e      	mov	r6, r1
   1eedc:	4615      	mov	r5, r2
   1eede:	4698      	mov	r8, r3
   1eee0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1eee4:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1eee8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eeec:	f3ef 8a11 	mrs	sl, BASEPRI
   1eef0:	f383 8812 	msr	BASEPRI_MAX, r3
   1eef4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1eef8:	4638      	mov	r0, r7
   1eefa:	f7ff fbbb 	bl	1e674 <z_spin_lock_valid>
   1eefe:	b1c0      	cbz	r0, 1ef32 <queue_insert+0x5e>
	z_spin_lock_set_owner(l);
   1ef00:	4638      	mov	r0, r7
   1ef02:	f7ff fbd7 	bl	1e6b4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   1ef06:	f1b9 0f00 	cmp.w	r9, #0
   1ef0a:	d000      	beq.n	1ef0e <queue_insert+0x3a>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1ef0c:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1ef0e:	f104 000c 	add.w	r0, r4, #12
   1ef12:	f002 f881 	bl	21018 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1ef16:	b9e8      	cbnz	r0, 1ef54 <queue_insert+0x80>

		return 0;
	}

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1ef18:	f1b8 0f00 	cmp.w	r8, #0
   1ef1c:	d03e      	beq.n	1ef9c <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   1ef1e:	2108      	movs	r1, #8
   1ef20:	2000      	movs	r0, #0
   1ef22:	f003 ffb3 	bl	22e8c <z_thread_aligned_alloc>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
		if (anode == NULL) {
   1ef26:	b1f0      	cbz	r0, 1ef66 <queue_insert+0x92>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc,
				-ENOMEM);

			return -ENOMEM;
		}
		anode->data = data;
   1ef28:	6045      	str	r5, [r0, #4]
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1ef2a:	2201      	movs	r2, #1
   1ef2c:	6002      	str	r2, [r0, #0]
		sys_sfnode_init(&anode->node, 0x1);
		data = anode;
   1ef2e:	4605      	mov	r5, r0
}
   1ef30:	e036      	b.n	1efa0 <queue_insert+0xcc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ef32:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 1f018 <queue_insert+0x144>
   1ef36:	2381      	movs	r3, #129	; 0x81
   1ef38:	465a      	mov	r2, fp
   1ef3a:	4934      	ldr	r1, [pc, #208]	; (1f00c <queue_insert+0x138>)
   1ef3c:	4834      	ldr	r0, [pc, #208]	; (1f010 <queue_insert+0x13c>)
   1ef3e:	f006 fc76 	bl	2582e <printk>
   1ef42:	4639      	mov	r1, r7
   1ef44:	4833      	ldr	r0, [pc, #204]	; (1f014 <queue_insert+0x140>)
   1ef46:	f006 fc72 	bl	2582e <printk>
   1ef4a:	2181      	movs	r1, #129	; 0x81
   1ef4c:	4658      	mov	r0, fp
   1ef4e:	f006 fef0 	bl	25d32 <assert_post_action>
   1ef52:	e7d5      	b.n	1ef00 <queue_insert+0x2c>
		prepare_thread_to_run(first_pending_thread, data);
   1ef54:	4629      	mov	r1, r5
   1ef56:	f00a fbdf 	bl	29718 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   1ef5a:	4651      	mov	r1, sl
   1ef5c:	4638      	mov	r0, r7
   1ef5e:	f001 f905 	bl	2016c <z_reschedule>
		return 0;
   1ef62:	2000      	movs	r0, #0
   1ef64:	e050      	b.n	1f008 <queue_insert+0x134>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ef66:	4638      	mov	r0, r7
   1ef68:	f7ff fb94 	bl	1e694 <z_spin_unlock_valid>
   1ef6c:	b130      	cbz	r0, 1ef7c <queue_insert+0xa8>
	__asm__ volatile(
   1ef6e:	f38a 8811 	msr	BASEPRI, sl
   1ef72:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1ef76:	f06f 000b 	mvn.w	r0, #11
   1ef7a:	e045      	b.n	1f008 <queue_insert+0x134>
   1ef7c:	4c26      	ldr	r4, [pc, #152]	; (1f018 <queue_insert+0x144>)
   1ef7e:	23ac      	movs	r3, #172	; 0xac
   1ef80:	4622      	mov	r2, r4
   1ef82:	4926      	ldr	r1, [pc, #152]	; (1f01c <queue_insert+0x148>)
   1ef84:	4822      	ldr	r0, [pc, #136]	; (1f010 <queue_insert+0x13c>)
   1ef86:	f006 fc52 	bl	2582e <printk>
   1ef8a:	4639      	mov	r1, r7
   1ef8c:	4824      	ldr	r0, [pc, #144]	; (1f020 <queue_insert+0x14c>)
   1ef8e:	f006 fc4e 	bl	2582e <printk>
   1ef92:	21ac      	movs	r1, #172	; 0xac
   1ef94:	4620      	mov	r0, r4
   1ef96:	f006 fecc 	bl	25d32 <assert_post_action>
   1ef9a:	e7e8      	b.n	1ef6e <queue_insert+0x9a>
	node->next_and_flags = flags;
   1ef9c:	2300      	movs	r3, #0
   1ef9e:	602b      	str	r3, [r5, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1efa0:	b186      	cbz	r6, 1efc4 <queue_insert+0xf0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1efa2:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1efa4:	f033 0303 	bics.w	r3, r3, #3
   1efa8:	d11a      	bne.n	1efe0 <queue_insert+0x10c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1efaa:	682b      	ldr	r3, [r5, #0]
   1efac:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1efb0:	602b      	str	r3, [r5, #0]
	return list->tail;
   1efb2:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1efb4:	b18a      	cbz	r2, 1efda <queue_insert+0x106>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1efb6:	6813      	ldr	r3, [r2, #0]
   1efb8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1efbc:	432b      	orrs	r3, r5
   1efbe:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1efc0:	6065      	str	r5, [r4, #4]
}
   1efc2:	e017      	b.n	1eff4 <queue_insert+0x120>
	return list->head;
   1efc4:	6822      	ldr	r2, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1efc6:	682b      	ldr	r3, [r5, #0]
   1efc8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1efcc:	4313      	orrs	r3, r2
   1efce:	602b      	str	r3, [r5, #0]
	list->head = node;
   1efd0:	6025      	str	r5, [r4, #0]
	return list->tail;
   1efd2:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   1efd4:	b973      	cbnz	r3, 1eff4 <queue_insert+0x120>
	list->tail = node;
   1efd6:	6065      	str	r5, [r4, #4]
}
   1efd8:	e00c      	b.n	1eff4 <queue_insert+0x120>
	list->tail = node;
   1efda:	6065      	str	r5, [r4, #4]
	list->head = node;
   1efdc:	6025      	str	r5, [r4, #0]
}
   1efde:	e009      	b.n	1eff4 <queue_insert+0x120>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1efe0:	682a      	ldr	r2, [r5, #0]
   1efe2:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1efe6:	4313      	orrs	r3, r2
   1efe8:	602b      	str	r3, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1efea:	6833      	ldr	r3, [r6, #0]
   1efec:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1eff0:	431d      	orrs	r5, r3
   1eff2:	6035      	str	r5, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1eff4:	2104      	movs	r1, #4
   1eff6:	f104 0014 	add.w	r0, r4, #20
   1effa:	f00a fd1e 	bl	29a3a <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1effe:	4651      	mov	r1, sl
   1f000:	4638      	mov	r0, r7
   1f002:	f001 f8b3 	bl	2016c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   1f006:	2000      	movs	r0, #0
}
   1f008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f00c:	0002a36c 	.word	0x0002a36c
   1f010:	00029ff8 	.word	0x00029ff8
   1f014:	0002a384 	.word	0x0002a384
   1f018:	0002a314 	.word	0x0002a314
   1f01c:	0002a33c 	.word	0x0002a33c
   1f020:	0002a354 	.word	0x0002a354

0001f024 <k_queue_append_list>:
int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   1f024:	2900      	cmp	r1, #0
   1f026:	d04e      	beq.n	1f0c6 <k_queue_append_list+0xa2>
{
   1f028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f02c:	4606      	mov	r6, r0
   1f02e:	4617      	mov	r7, r2
   1f030:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   1f032:	2a00      	cmp	r2, #0
   1f034:	d04a      	beq.n	1f0cc <k_queue_append_list+0xa8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f036:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   1f03a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f03e:	f3ef 8911 	mrs	r9, BASEPRI
   1f042:	f383 8812 	msr	BASEPRI_MAX, r3
   1f046:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f04a:	4640      	mov	r0, r8
   1f04c:	f7ff fb12 	bl	1e674 <z_spin_lock_valid>
   1f050:	b140      	cbz	r0, 1f064 <k_queue_append_list+0x40>
	z_spin_lock_set_owner(l);
   1f052:	4640      	mov	r0, r8
   1f054:	f7ff fb2e 	bl	1e6b4 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1f058:	f106 050c 	add.w	r5, r6, #12
   1f05c:	4628      	mov	r0, r5
   1f05e:	f001 ffdb 	bl	21018 <z_unpend_first_thread>
   1f062:	e016      	b.n	1f092 <k_queue_append_list+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f064:	4d1b      	ldr	r5, [pc, #108]	; (1f0d4 <k_queue_append_list+0xb0>)
   1f066:	2381      	movs	r3, #129	; 0x81
   1f068:	462a      	mov	r2, r5
   1f06a:	491b      	ldr	r1, [pc, #108]	; (1f0d8 <k_queue_append_list+0xb4>)
   1f06c:	481b      	ldr	r0, [pc, #108]	; (1f0dc <k_queue_append_list+0xb8>)
   1f06e:	f006 fbde 	bl	2582e <printk>
   1f072:	4641      	mov	r1, r8
   1f074:	481a      	ldr	r0, [pc, #104]	; (1f0e0 <k_queue_append_list+0xbc>)
   1f076:	f006 fbda 	bl	2582e <printk>
   1f07a:	2181      	movs	r1, #129	; 0x81
   1f07c:	4628      	mov	r0, r5
   1f07e:	f006 fe58 	bl	25d32 <assert_post_action>
   1f082:	e7e6      	b.n	1f052 <k_queue_append_list+0x2e>
	}

	while ((head != NULL) && (thread != NULL)) {
		prepare_thread_to_run(thread, head);
   1f084:	4621      	mov	r1, r4
   1f086:	f00a fb47 	bl	29718 <prepare_thread_to_run>
		head = *(void **)head;
   1f08a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1f08c:	4628      	mov	r0, r5
   1f08e:	f001 ffc3 	bl	21018 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1f092:	b10c      	cbz	r4, 1f098 <k_queue_append_list+0x74>
   1f094:	2800      	cmp	r0, #0
   1f096:	d1f5      	bne.n	1f084 <k_queue_append_list+0x60>
	}

	if (head != NULL) {
   1f098:	b13c      	cbz	r4, 1f0aa <k_queue_append_list+0x86>
	return list->tail;
   1f09a:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1f09c:	b18a      	cbz	r2, 1f0c2 <k_queue_append_list+0x9e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f09e:	6813      	ldr	r3, [r2, #0]
   1f0a0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f0a4:	431c      	orrs	r4, r3
   1f0a6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1f0a8:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f0aa:	2104      	movs	r1, #4
   1f0ac:	f106 0014 	add.w	r0, r6, #20
   1f0b0:	f00a fcc3 	bl	29a3a <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1f0b4:	4649      	mov	r1, r9
   1f0b6:	4640      	mov	r0, r8
   1f0b8:	f001 f858 	bl	2016c <z_reschedule>
	return 0;
   1f0bc:	2000      	movs	r0, #0
}
   1f0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	list->head = node;
   1f0c2:	6034      	str	r4, [r6, #0]
}
   1f0c4:	e7f0      	b.n	1f0a8 <k_queue_append_list+0x84>
		return -EINVAL;
   1f0c6:	f06f 0015 	mvn.w	r0, #21
}
   1f0ca:	4770      	bx	lr
		return -EINVAL;
   1f0cc:	f06f 0015 	mvn.w	r0, #21
   1f0d0:	e7f5      	b.n	1f0be <k_queue_append_list+0x9a>
   1f0d2:	bf00      	nop
   1f0d4:	0002a314 	.word	0x0002a314
   1f0d8:	0002a36c 	.word	0x0002a36c
   1f0dc:	00029ff8 	.word	0x00029ff8
   1f0e0:	0002a384 	.word	0x0002a384

0001f0e4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1f0e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f0e8:	b083      	sub	sp, #12
   1f0ea:	4604      	mov	r4, r0
   1f0ec:	4616      	mov	r6, r2
   1f0ee:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f0f0:	f100 0508 	add.w	r5, r0, #8
   1f0f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f0f8:	f3ef 8811 	mrs	r8, BASEPRI
   1f0fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1f100:	f3bf 8f6f 	isb	sy
   1f104:	4628      	mov	r0, r5
   1f106:	f7ff fab5 	bl	1e674 <z_spin_lock_valid>
   1f10a:	b1e0      	cbz	r0, 1f146 <z_impl_k_queue_get+0x62>
	z_spin_lock_set_owner(l);
   1f10c:	4628      	mov	r0, r5
   1f10e:	f7ff fad1 	bl	1e6b4 <z_spin_lock_set_owner>
	return list->head;
   1f112:	6820      	ldr	r0, [r4, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1f114:	2800      	cmp	r0, #0
   1f116:	d039      	beq.n	1f18c <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f118:	6803      	ldr	r3, [r0, #0]
   1f11a:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1f11e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1f120:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f122:	4290      	cmp	r0, r2
   1f124:	d020      	beq.n	1f168 <z_impl_k_queue_get+0x84>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1f126:	2101      	movs	r1, #1
   1f128:	f00a fafe 	bl	29728 <z_queue_node_peek>
   1f12c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f12e:	4628      	mov	r0, r5
   1f130:	f7ff fab0 	bl	1e694 <z_spin_unlock_valid>
   1f134:	b1d0      	cbz	r0, 1f16c <z_impl_k_queue_get+0x88>
	__asm__ volatile(
   1f136:	f388 8811 	msr	BASEPRI, r8
   1f13a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1f13e:	4620      	mov	r0, r4
   1f140:	b003      	add	sp, #12
   1f142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f146:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1f1f0 <z_impl_k_queue_get+0x10c>
   1f14a:	2381      	movs	r3, #129	; 0x81
   1f14c:	464a      	mov	r2, r9
   1f14e:	4925      	ldr	r1, [pc, #148]	; (1f1e4 <z_impl_k_queue_get+0x100>)
   1f150:	4825      	ldr	r0, [pc, #148]	; (1f1e8 <z_impl_k_queue_get+0x104>)
   1f152:	f006 fb6c 	bl	2582e <printk>
   1f156:	4629      	mov	r1, r5
   1f158:	4824      	ldr	r0, [pc, #144]	; (1f1ec <z_impl_k_queue_get+0x108>)
   1f15a:	f006 fb68 	bl	2582e <printk>
   1f15e:	2181      	movs	r1, #129	; 0x81
   1f160:	4648      	mov	r0, r9
   1f162:	f006 fde6 	bl	25d32 <assert_post_action>
   1f166:	e7d1      	b.n	1f10c <z_impl_k_queue_get+0x28>
	list->tail = node;
   1f168:	6063      	str	r3, [r4, #4]
}
   1f16a:	e7dc      	b.n	1f126 <z_impl_k_queue_get+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f16c:	4e20      	ldr	r6, [pc, #128]	; (1f1f0 <z_impl_k_queue_get+0x10c>)
   1f16e:	23ac      	movs	r3, #172	; 0xac
   1f170:	4632      	mov	r2, r6
   1f172:	4920      	ldr	r1, [pc, #128]	; (1f1f4 <z_impl_k_queue_get+0x110>)
   1f174:	481c      	ldr	r0, [pc, #112]	; (1f1e8 <z_impl_k_queue_get+0x104>)
   1f176:	f006 fb5a 	bl	2582e <printk>
   1f17a:	4629      	mov	r1, r5
   1f17c:	481e      	ldr	r0, [pc, #120]	; (1f1f8 <z_impl_k_queue_get+0x114>)
   1f17e:	f006 fb56 	bl	2582e <printk>
   1f182:	21ac      	movs	r1, #172	; 0xac
   1f184:	4630      	mov	r0, r6
   1f186:	f006 fdd4 	bl	25d32 <assert_post_action>
   1f18a:	e7d4      	b.n	1f136 <z_impl_k_queue_get+0x52>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f18c:	ea56 0307 	orrs.w	r3, r6, r7
   1f190:	d00c      	beq.n	1f1ac <z_impl_k_queue_get+0xc8>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1f192:	e9cd 6700 	strd	r6, r7, [sp]
   1f196:	f104 020c 	add.w	r2, r4, #12
   1f19a:	4641      	mov	r1, r8
   1f19c:	4628      	mov	r0, r5
   1f19e:	f001 fc9d 	bl	20adc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1f1a2:	b9e8      	cbnz	r0, 1f1e0 <z_impl_k_queue_get+0xfc>
   1f1a4:	4b15      	ldr	r3, [pc, #84]	; (1f1fc <z_impl_k_queue_get+0x118>)
   1f1a6:	689b      	ldr	r3, [r3, #8]
   1f1a8:	695c      	ldr	r4, [r3, #20]
   1f1aa:	e7c8      	b.n	1f13e <z_impl_k_queue_get+0x5a>
   1f1ac:	4628      	mov	r0, r5
   1f1ae:	f7ff fa71 	bl	1e694 <z_spin_unlock_valid>
   1f1b2:	b128      	cbz	r0, 1f1c0 <z_impl_k_queue_get+0xdc>
   1f1b4:	f388 8811 	msr	BASEPRI, r8
   1f1b8:	f3bf 8f6f 	isb	sy
		return NULL;
   1f1bc:	2400      	movs	r4, #0
   1f1be:	e7be      	b.n	1f13e <z_impl_k_queue_get+0x5a>
   1f1c0:	4c0b      	ldr	r4, [pc, #44]	; (1f1f0 <z_impl_k_queue_get+0x10c>)
   1f1c2:	23ac      	movs	r3, #172	; 0xac
   1f1c4:	4622      	mov	r2, r4
   1f1c6:	490b      	ldr	r1, [pc, #44]	; (1f1f4 <z_impl_k_queue_get+0x110>)
   1f1c8:	4807      	ldr	r0, [pc, #28]	; (1f1e8 <z_impl_k_queue_get+0x104>)
   1f1ca:	f006 fb30 	bl	2582e <printk>
   1f1ce:	4629      	mov	r1, r5
   1f1d0:	4809      	ldr	r0, [pc, #36]	; (1f1f8 <z_impl_k_queue_get+0x114>)
   1f1d2:	f006 fb2c 	bl	2582e <printk>
   1f1d6:	21ac      	movs	r1, #172	; 0xac
   1f1d8:	4620      	mov	r0, r4
   1f1da:	f006 fdaa 	bl	25d32 <assert_post_action>
   1f1de:	e7e9      	b.n	1f1b4 <z_impl_k_queue_get+0xd0>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1f1e0:	2400      	movs	r4, #0
   1f1e2:	e7ac      	b.n	1f13e <z_impl_k_queue_get+0x5a>
   1f1e4:	0002a36c 	.word	0x0002a36c
   1f1e8:	00029ff8 	.word	0x00029ff8
   1f1ec:	0002a384 	.word	0x0002a384
   1f1f0:	0002a314 	.word	0x0002a314
   1f1f4:	0002a33c 	.word	0x0002a33c
   1f1f8:	0002a354 	.word	0x0002a354
   1f1fc:	20002d18 	.word	0x20002d18

0001f200 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1f200:	b570      	push	{r4, r5, r6, lr}
   1f202:	4604      	mov	r4, r0
	__asm__ volatile(
   1f204:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f208:	f3ef 8511 	mrs	r5, BASEPRI
   1f20c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f210:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f214:	4819      	ldr	r0, [pc, #100]	; (1f27c <z_impl_k_sem_give+0x7c>)
   1f216:	f7ff fa2d 	bl	1e674 <z_spin_lock_valid>
   1f21a:	b180      	cbz	r0, 1f23e <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
   1f21c:	4817      	ldr	r0, [pc, #92]	; (1f27c <z_impl_k_sem_give+0x7c>)
   1f21e:	f7ff fa49 	bl	1e6b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1f222:	4620      	mov	r0, r4
   1f224:	f001 fef8 	bl	21018 <z_unpend_first_thread>

	if (thread != NULL) {
   1f228:	b1c8      	cbz	r0, 1f25e <z_impl_k_sem_give+0x5e>
   1f22a:	2200      	movs	r2, #0
   1f22c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1f230:	f001 fa7c 	bl	2072c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1f234:	4629      	mov	r1, r5
   1f236:	4811      	ldr	r0, [pc, #68]	; (1f27c <z_impl_k_sem_give+0x7c>)
   1f238:	f000 ff98 	bl	2016c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1f23c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f23e:	4e10      	ldr	r6, [pc, #64]	; (1f280 <z_impl_k_sem_give+0x80>)
   1f240:	2381      	movs	r3, #129	; 0x81
   1f242:	4632      	mov	r2, r6
   1f244:	490f      	ldr	r1, [pc, #60]	; (1f284 <z_impl_k_sem_give+0x84>)
   1f246:	4810      	ldr	r0, [pc, #64]	; (1f288 <z_impl_k_sem_give+0x88>)
   1f248:	f006 faf1 	bl	2582e <printk>
   1f24c:	490b      	ldr	r1, [pc, #44]	; (1f27c <z_impl_k_sem_give+0x7c>)
   1f24e:	480f      	ldr	r0, [pc, #60]	; (1f28c <z_impl_k_sem_give+0x8c>)
   1f250:	f006 faed 	bl	2582e <printk>
   1f254:	2181      	movs	r1, #129	; 0x81
   1f256:	4630      	mov	r0, r6
   1f258:	f006 fd6b 	bl	25d32 <assert_post_action>
   1f25c:	e7de      	b.n	1f21c <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1f25e:	68a3      	ldr	r3, [r4, #8]
   1f260:	68e2      	ldr	r2, [r4, #12]
   1f262:	4293      	cmp	r3, r2
   1f264:	d008      	beq.n	1f278 <z_impl_k_sem_give+0x78>
   1f266:	2201      	movs	r2, #1
   1f268:	4413      	add	r3, r2
   1f26a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1f26c:	2102      	movs	r1, #2
   1f26e:	f104 0010 	add.w	r0, r4, #16
   1f272:	f00a fbe2 	bl	29a3a <z_handle_obj_poll_events>
}
   1f276:	e7dd      	b.n	1f234 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1f278:	2200      	movs	r2, #0
   1f27a:	e7f5      	b.n	1f268 <z_impl_k_sem_give+0x68>
   1f27c:	20002d4c 	.word	0x20002d4c
   1f280:	0002a314 	.word	0x0002a314
   1f284:	0002a36c 	.word	0x0002a36c
   1f288:	00029ff8 	.word	0x00029ff8
   1f28c:	0002a384 	.word	0x0002a384

0001f290 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1f290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f294:	b082      	sub	sp, #8
   1f296:	4604      	mov	r4, r0
   1f298:	4616      	mov	r6, r2
   1f29a:	461f      	mov	r7, r3
   1f29c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1f2a0:	b113      	cbz	r3, 1f2a8 <z_impl_k_sem_take+0x18>
   1f2a2:	ea56 0307 	orrs.w	r3, r6, r7
   1f2a6:	d11f      	bne.n	1f2e8 <z_impl_k_sem_take+0x58>
   1f2a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f2ac:	f3ef 8511 	mrs	r5, BASEPRI
   1f2b0:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2b4:	f3bf 8f6f 	isb	sy
   1f2b8:	4836      	ldr	r0, [pc, #216]	; (1f394 <z_impl_k_sem_take+0x104>)
   1f2ba:	f7ff f9db 	bl	1e674 <z_spin_lock_valid>
   1f2be:	b310      	cbz	r0, 1f306 <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
   1f2c0:	4834      	ldr	r0, [pc, #208]	; (1f394 <z_impl_k_sem_take+0x104>)
   1f2c2:	f7ff f9f7 	bl	1e6b4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1f2c6:	68a3      	ldr	r3, [r4, #8]
   1f2c8:	2b00      	cmp	r3, #0
   1f2ca:	d03d      	beq.n	1f348 <z_impl_k_sem_take+0xb8>
		sem->count--;
   1f2cc:	3b01      	subs	r3, #1
   1f2ce:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f2d0:	4830      	ldr	r0, [pc, #192]	; (1f394 <z_impl_k_sem_take+0x104>)
   1f2d2:	f7ff f9df 	bl	1e694 <z_spin_unlock_valid>
   1f2d6:	b338      	cbz	r0, 1f328 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
   1f2d8:	f385 8811 	msr	BASEPRI, r5
   1f2dc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1f2e0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1f2e2:	b002      	add	sp, #8
   1f2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
   1f2e8:	4d2b      	ldr	r5, [pc, #172]	; (1f398 <z_impl_k_sem_take+0x108>)
   1f2ea:	2379      	movs	r3, #121	; 0x79
   1f2ec:	462a      	mov	r2, r5
   1f2ee:	492b      	ldr	r1, [pc, #172]	; (1f39c <z_impl_k_sem_take+0x10c>)
   1f2f0:	482b      	ldr	r0, [pc, #172]	; (1f3a0 <z_impl_k_sem_take+0x110>)
   1f2f2:	f006 fa9c 	bl	2582e <printk>
   1f2f6:	482b      	ldr	r0, [pc, #172]	; (1f3a4 <z_impl_k_sem_take+0x114>)
   1f2f8:	f006 fa99 	bl	2582e <printk>
   1f2fc:	2179      	movs	r1, #121	; 0x79
   1f2fe:	4628      	mov	r0, r5
   1f300:	f006 fd17 	bl	25d32 <assert_post_action>
   1f304:	e7d0      	b.n	1f2a8 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f306:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1f3b0 <z_impl_k_sem_take+0x120>
   1f30a:	2381      	movs	r3, #129	; 0x81
   1f30c:	4642      	mov	r2, r8
   1f30e:	4926      	ldr	r1, [pc, #152]	; (1f3a8 <z_impl_k_sem_take+0x118>)
   1f310:	4823      	ldr	r0, [pc, #140]	; (1f3a0 <z_impl_k_sem_take+0x110>)
   1f312:	f006 fa8c 	bl	2582e <printk>
   1f316:	491f      	ldr	r1, [pc, #124]	; (1f394 <z_impl_k_sem_take+0x104>)
   1f318:	4824      	ldr	r0, [pc, #144]	; (1f3ac <z_impl_k_sem_take+0x11c>)
   1f31a:	f006 fa88 	bl	2582e <printk>
   1f31e:	2181      	movs	r1, #129	; 0x81
   1f320:	4640      	mov	r0, r8
   1f322:	f006 fd06 	bl	25d32 <assert_post_action>
   1f326:	e7cb      	b.n	1f2c0 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f328:	4c21      	ldr	r4, [pc, #132]	; (1f3b0 <z_impl_k_sem_take+0x120>)
   1f32a:	23ac      	movs	r3, #172	; 0xac
   1f32c:	4622      	mov	r2, r4
   1f32e:	4921      	ldr	r1, [pc, #132]	; (1f3b4 <z_impl_k_sem_take+0x124>)
   1f330:	481b      	ldr	r0, [pc, #108]	; (1f3a0 <z_impl_k_sem_take+0x110>)
   1f332:	f006 fa7c 	bl	2582e <printk>
   1f336:	4917      	ldr	r1, [pc, #92]	; (1f394 <z_impl_k_sem_take+0x104>)
   1f338:	481f      	ldr	r0, [pc, #124]	; (1f3b8 <z_impl_k_sem_take+0x128>)
   1f33a:	f006 fa78 	bl	2582e <printk>
   1f33e:	21ac      	movs	r1, #172	; 0xac
   1f340:	4620      	mov	r0, r4
   1f342:	f006 fcf6 	bl	25d32 <assert_post_action>
   1f346:	e7c7      	b.n	1f2d8 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f348:	ea56 0307 	orrs.w	r3, r6, r7
   1f34c:	d007      	beq.n	1f35e <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1f34e:	e9cd 6700 	strd	r6, r7, [sp]
   1f352:	4622      	mov	r2, r4
   1f354:	4629      	mov	r1, r5
   1f356:	480f      	ldr	r0, [pc, #60]	; (1f394 <z_impl_k_sem_take+0x104>)
   1f358:	f001 fbc0 	bl	20adc <z_pend_curr>
	return ret;
   1f35c:	e7c1      	b.n	1f2e2 <z_impl_k_sem_take+0x52>
   1f35e:	480d      	ldr	r0, [pc, #52]	; (1f394 <z_impl_k_sem_take+0x104>)
   1f360:	f7ff f998 	bl	1e694 <z_spin_unlock_valid>
   1f364:	b130      	cbz	r0, 1f374 <z_impl_k_sem_take+0xe4>
   1f366:	f385 8811 	msr	BASEPRI, r5
   1f36a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1f36e:	f06f 000f 	mvn.w	r0, #15
   1f372:	e7b6      	b.n	1f2e2 <z_impl_k_sem_take+0x52>
   1f374:	4c0e      	ldr	r4, [pc, #56]	; (1f3b0 <z_impl_k_sem_take+0x120>)
   1f376:	23ac      	movs	r3, #172	; 0xac
   1f378:	4622      	mov	r2, r4
   1f37a:	490e      	ldr	r1, [pc, #56]	; (1f3b4 <z_impl_k_sem_take+0x124>)
   1f37c:	4808      	ldr	r0, [pc, #32]	; (1f3a0 <z_impl_k_sem_take+0x110>)
   1f37e:	f006 fa56 	bl	2582e <printk>
   1f382:	4904      	ldr	r1, [pc, #16]	; (1f394 <z_impl_k_sem_take+0x104>)
   1f384:	480c      	ldr	r0, [pc, #48]	; (1f3b8 <z_impl_k_sem_take+0x128>)
   1f386:	f006 fa52 	bl	2582e <printk>
   1f38a:	21ac      	movs	r1, #172	; 0xac
   1f38c:	4620      	mov	r0, r4
   1f38e:	f006 fcd0 	bl	25d32 <assert_post_action>
   1f392:	e7e8      	b.n	1f366 <z_impl_k_sem_take+0xd6>
   1f394:	20002d4c 	.word	0x20002d4c
   1f398:	0002d67c 	.word	0x0002d67c
   1f39c:	0002d69c 	.word	0x0002d69c
   1f3a0:	00029ff8 	.word	0x00029ff8
   1f3a4:	0002c900 	.word	0x0002c900
   1f3a8:	0002a36c 	.word	0x0002a36c
   1f3ac:	0002a384 	.word	0x0002a384
   1f3b0:	0002a314 	.word	0x0002a314
   1f3b4:	0002a33c 	.word	0x0002a33c
   1f3b8:	0002a354 	.word	0x0002a354

0001f3bc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1f3bc:	b510      	push	{r4, lr}
   1f3be:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1f3c0:	4b08      	ldr	r3, [pc, #32]	; (1f3e4 <k_sys_work_q_init+0x28>)
   1f3c2:	9302      	str	r3, [sp, #8]
   1f3c4:	2400      	movs	r4, #0
   1f3c6:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1f3ca:	ab02      	add	r3, sp, #8
   1f3cc:	9300      	str	r3, [sp, #0]
   1f3ce:	f04f 33ff 	mov.w	r3, #4294967295
   1f3d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f3d6:	4904      	ldr	r1, [pc, #16]	; (1f3e8 <k_sys_work_q_init+0x2c>)
   1f3d8:	4804      	ldr	r0, [pc, #16]	; (1f3ec <k_sys_work_q_init+0x30>)
   1f3da:	f000 fafb 	bl	1f9d4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1f3de:	4620      	mov	r0, r4
   1f3e0:	b004      	add	sp, #16
   1f3e2:	bd10      	pop	{r4, pc}
   1f3e4:	0002d6ec 	.word	0x0002d6ec
   1f3e8:	20006060 	.word	0x20006060
   1f3ec:	20001e20 	.word	0x20001e20

0001f3f0 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1f3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3f2:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1f3f4:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f3f6:	f013 0f02 	tst.w	r3, #2
   1f3fa:	d16e      	bne.n	1f4da <submit_to_queue_locked+0xea>
   1f3fc:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1f3fe:	f013 0f04 	tst.w	r3, #4
   1f402:	d16f      	bne.n	1f4e4 <submit_to_queue_locked+0xf4>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1f404:	680b      	ldr	r3, [r1, #0]
   1f406:	2b00      	cmp	r3, #0
   1f408:	d03c      	beq.n	1f484 <submit_to_queue_locked+0x94>
	return (*flagp & BIT(bit)) != 0U;
   1f40a:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1f40c:	f013 0f01 	tst.w	r3, #1
   1f410:	d049      	beq.n	1f4a6 <submit_to_queue_locked+0xb6>
			__ASSERT_NO_MSG(work->queue != NULL);
   1f412:	68a3      	ldr	r3, [r4, #8]
   1f414:	2b00      	cmp	r3, #0
   1f416:	d038      	beq.n	1f48a <submit_to_queue_locked+0x9a>
			*queuep = work->queue;
   1f418:	68a3      	ldr	r3, [r4, #8]
   1f41a:	602b      	str	r3, [r5, #0]
			ret = 2;
   1f41c:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1f41e:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1f420:	2e00      	cmp	r6, #0
   1f422:	d04e      	beq.n	1f4c2 <submit_to_queue_locked+0xd2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1f424:	4b30      	ldr	r3, [pc, #192]	; (1f4e8 <submit_to_queue_locked+0xf8>)
   1f426:	689b      	ldr	r3, [r3, #8]
   1f428:	42b3      	cmp	r3, r6
   1f42a:	d03e      	beq.n	1f4aa <submit_to_queue_locked+0xba>
   1f42c:	2300      	movs	r3, #0
   1f42e:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1f430:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   1f434:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1f438:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1f43c:	f013 0f01 	tst.w	r3, #1
   1f440:	d042      	beq.n	1f4c8 <submit_to_queue_locked+0xd8>
	} else if (draining && !chained) {
   1f442:	b109      	cbz	r1, 1f448 <submit_to_queue_locked+0x58>
   1f444:	2a00      	cmp	r2, #0
   1f446:	d042      	beq.n	1f4ce <submit_to_queue_locked+0xde>
	} else if (plugged && !draining) {
   1f448:	b108      	cbz	r0, 1f44e <submit_to_queue_locked+0x5e>
   1f44a:	2900      	cmp	r1, #0
   1f44c:	d042      	beq.n	1f4d4 <submit_to_queue_locked+0xe4>
	parent->next = child;
   1f44e:	2300      	movs	r3, #0
   1f450:	6023      	str	r3, [r4, #0]
	return list->tail;
   1f452:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   1f456:	b37b      	cbz	r3, 1f4b8 <submit_to_queue_locked+0xc8>
	parent->next = child;
   1f458:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f45a:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1f45e:	2200      	movs	r2, #0
   1f460:	4611      	mov	r1, r2
   1f462:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1f466:	f002 f8bb 	bl	215e0 <z_sched_wake>
		ret = 1;
   1f46a:	2001      	movs	r0, #1

		if (rc < 0) {
   1f46c:	2800      	cmp	r0, #0
   1f46e:	db06      	blt.n	1f47e <submit_to_queue_locked+0x8e>
	*flagp |= BIT(bit);
   1f470:	68e3      	ldr	r3, [r4, #12]
   1f472:	f043 0304 	orr.w	r3, r3, #4
   1f476:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1f478:	682b      	ldr	r3, [r5, #0]
   1f47a:	60a3      	str	r3, [r4, #8]
   1f47c:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1f47e:	2800      	cmp	r0, #0
   1f480:	dc2f      	bgt.n	1f4e2 <submit_to_queue_locked+0xf2>
   1f482:	e02c      	b.n	1f4de <submit_to_queue_locked+0xee>
			*queuep = work->queue;
   1f484:	6883      	ldr	r3, [r0, #8]
   1f486:	600b      	str	r3, [r1, #0]
   1f488:	e7bf      	b.n	1f40a <submit_to_queue_locked+0x1a>
			__ASSERT_NO_MSG(work->queue != NULL);
   1f48a:	4e18      	ldr	r6, [pc, #96]	; (1f4ec <submit_to_queue_locked+0xfc>)
   1f48c:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1f490:	4632      	mov	r2, r6
   1f492:	4917      	ldr	r1, [pc, #92]	; (1f4f0 <submit_to_queue_locked+0x100>)
   1f494:	4817      	ldr	r0, [pc, #92]	; (1f4f4 <submit_to_queue_locked+0x104>)
   1f496:	f006 f9ca 	bl	2582e <printk>
   1f49a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1f49e:	4630      	mov	r0, r6
   1f4a0:	f006 fc47 	bl	25d32 <assert_post_action>
   1f4a4:	e7b8      	b.n	1f418 <submit_to_queue_locked+0x28>
		ret = 1;
   1f4a6:	2701      	movs	r7, #1
   1f4a8:	e7b9      	b.n	1f41e <submit_to_queue_locked+0x2e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1f4aa:	f00a f8fb 	bl	296a4 <k_is_in_isr>
   1f4ae:	b908      	cbnz	r0, 1f4b4 <submit_to_queue_locked+0xc4>
   1f4b0:	2301      	movs	r3, #1
   1f4b2:	e7bc      	b.n	1f42e <submit_to_queue_locked+0x3e>
   1f4b4:	2300      	movs	r3, #0
   1f4b6:	e7ba      	b.n	1f42e <submit_to_queue_locked+0x3e>
   1f4b8:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   1f4bc:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1f4c0:	e7cd      	b.n	1f45e <submit_to_queue_locked+0x6e>
		return -EINVAL;
   1f4c2:	f06f 0015 	mvn.w	r0, #21
   1f4c6:	e7d1      	b.n	1f46c <submit_to_queue_locked+0x7c>
		ret = -ENODEV;
   1f4c8:	f06f 0012 	mvn.w	r0, #18
   1f4cc:	e7ce      	b.n	1f46c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1f4ce:	f06f 000f 	mvn.w	r0, #15
   1f4d2:	e7cb      	b.n	1f46c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1f4d4:	f06f 000f 	mvn.w	r0, #15
   1f4d8:	e7c8      	b.n	1f46c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1f4da:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1f4de:	2300      	movs	r3, #0
   1f4e0:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1f4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1f4e4:	2000      	movs	r0, #0
   1f4e6:	e7fa      	b.n	1f4de <submit_to_queue_locked+0xee>
   1f4e8:	20002d18 	.word	0x20002d18
   1f4ec:	0002d6f8 	.word	0x0002d6f8
   1f4f0:	0002d71c 	.word	0x0002d71c
   1f4f4:	00029ff8 	.word	0x00029ff8

0001f4f8 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   1f4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4fa:	b083      	sub	sp, #12
   1f4fc:	4604      	mov	r4, r0
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
   1f4fe:	f1a0 0610 	sub.w	r6, r0, #16
	__asm__ volatile(
   1f502:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f506:	f3ef 8511 	mrs	r5, BASEPRI
   1f50a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f50e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f512:	4821      	ldr	r0, [pc, #132]	; (1f598 <work_timeout+0xa0>)
   1f514:	f7ff f8ae 	bl	1e674 <z_spin_lock_valid>
   1f518:	b1b8      	cbz	r0, 1f54a <work_timeout+0x52>
	z_spin_lock_set_owner(l);
   1f51a:	481f      	ldr	r0, [pc, #124]	; (1f598 <work_timeout+0xa0>)
   1f51c:	f7ff f8ca 	bl	1e6b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   1f520:	2300      	movs	r3, #0
   1f522:	9301      	str	r3, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   1f524:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   1f528:	f023 0208 	bic.w	r2, r3, #8
   1f52c:	f844 2c04 	str.w	r2, [r4, #-4]
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1f530:	f013 0f08 	tst.w	r3, #8
   1f534:	d119      	bne.n	1f56a <work_timeout+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f536:	4818      	ldr	r0, [pc, #96]	; (1f598 <work_timeout+0xa0>)
   1f538:	f7ff f8ac 	bl	1e694 <z_spin_unlock_valid>
   1f53c:	b1e0      	cbz	r0, 1f578 <work_timeout+0x80>
	__asm__ volatile(
   1f53e:	f385 8811 	msr	BASEPRI, r5
   1f542:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
   1f546:	b003      	add	sp, #12
   1f548:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f54a:	4f14      	ldr	r7, [pc, #80]	; (1f59c <work_timeout+0xa4>)
   1f54c:	2381      	movs	r3, #129	; 0x81
   1f54e:	463a      	mov	r2, r7
   1f550:	4913      	ldr	r1, [pc, #76]	; (1f5a0 <work_timeout+0xa8>)
   1f552:	4814      	ldr	r0, [pc, #80]	; (1f5a4 <work_timeout+0xac>)
   1f554:	f006 f96b 	bl	2582e <printk>
   1f558:	490f      	ldr	r1, [pc, #60]	; (1f598 <work_timeout+0xa0>)
   1f55a:	4813      	ldr	r0, [pc, #76]	; (1f5a8 <work_timeout+0xb0>)
   1f55c:	f006 f967 	bl	2582e <printk>
   1f560:	2181      	movs	r1, #129	; 0x81
   1f562:	4638      	mov	r0, r7
   1f564:	f006 fbe5 	bl	25d32 <assert_post_action>
   1f568:	e7d7      	b.n	1f51a <work_timeout+0x22>
		queue = dw->queue;
   1f56a:	69a3      	ldr	r3, [r4, #24]
   1f56c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1f56e:	a901      	add	r1, sp, #4
   1f570:	4630      	mov	r0, r6
   1f572:	f7ff ff3d 	bl	1f3f0 <submit_to_queue_locked>
   1f576:	e7de      	b.n	1f536 <work_timeout+0x3e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f578:	4c08      	ldr	r4, [pc, #32]	; (1f59c <work_timeout+0xa4>)
   1f57a:	23ac      	movs	r3, #172	; 0xac
   1f57c:	4622      	mov	r2, r4
   1f57e:	490b      	ldr	r1, [pc, #44]	; (1f5ac <work_timeout+0xb4>)
   1f580:	4808      	ldr	r0, [pc, #32]	; (1f5a4 <work_timeout+0xac>)
   1f582:	f006 f954 	bl	2582e <printk>
   1f586:	4904      	ldr	r1, [pc, #16]	; (1f598 <work_timeout+0xa0>)
   1f588:	4809      	ldr	r0, [pc, #36]	; (1f5b0 <work_timeout+0xb8>)
   1f58a:	f006 f950 	bl	2582e <printk>
   1f58e:	21ac      	movs	r1, #172	; 0xac
   1f590:	4620      	mov	r0, r4
   1f592:	f006 fbce 	bl	25d32 <assert_post_action>
   1f596:	e7d2      	b.n	1f53e <work_timeout+0x46>
   1f598:	20002d50 	.word	0x20002d50
   1f59c:	0002a314 	.word	0x0002a314
   1f5a0:	0002a36c 	.word	0x0002a36c
   1f5a4:	00029ff8 	.word	0x00029ff8
   1f5a8:	0002a384 	.word	0x0002a384
   1f5ac:	0002a33c 	.word	0x0002a33c
   1f5b0:	0002a354 	.word	0x0002a354

0001f5b4 <finalize_cancel_locked>:
{
   1f5b4:	b570      	push	{r4, r5, r6, lr}
   1f5b6:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1f5b8:	68c3      	ldr	r3, [r0, #12]
   1f5ba:	f023 0302 	bic.w	r3, r3, #2
   1f5be:	60c3      	str	r3, [r0, #12]
	return list->head;
   1f5c0:	4b19      	ldr	r3, [pc, #100]	; (1f628 <finalize_cancel_locked+0x74>)
   1f5c2:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1f5c4:	b1e8      	cbz	r0, 1f602 <finalize_cancel_locked+0x4e>
   1f5c6:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f5c8:	b100      	cbz	r0, 1f5cc <finalize_cancel_locked+0x18>
	return node->next;
   1f5ca:	6804      	ldr	r4, [r0, #0]
   1f5cc:	2600      	movs	r6, #0
   1f5ce:	e01d      	b.n	1f60c <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   1f5d0:	b15e      	cbz	r6, 1f5ea <finalize_cancel_locked+0x36>
	return node->next;
   1f5d2:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   1f5d4:	6033      	str	r3, [r6, #0]
	return list->tail;
   1f5d6:	4b14      	ldr	r3, [pc, #80]	; (1f628 <finalize_cancel_locked+0x74>)
   1f5d8:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f5da:	4298      	cmp	r0, r3
   1f5dc:	d00e      	beq.n	1f5fc <finalize_cancel_locked+0x48>
	parent->next = child;
   1f5de:	2300      	movs	r3, #0
   1f5e0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1f5e4:	f7ff fe0c 	bl	1f200 <z_impl_k_sem_give>
}
   1f5e8:	e015      	b.n	1f616 <finalize_cancel_locked+0x62>
	return node->next;
   1f5ea:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1f5ec:	4b0e      	ldr	r3, [pc, #56]	; (1f628 <finalize_cancel_locked+0x74>)
   1f5ee:	601a      	str	r2, [r3, #0]
	return list->tail;
   1f5f0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f5f2:	4298      	cmp	r0, r3
   1f5f4:	d1f3      	bne.n	1f5de <finalize_cancel_locked+0x2a>
	list->tail = node;
   1f5f6:	4b0c      	ldr	r3, [pc, #48]	; (1f628 <finalize_cancel_locked+0x74>)
   1f5f8:	605a      	str	r2, [r3, #4]
}
   1f5fa:	e7f0      	b.n	1f5de <finalize_cancel_locked+0x2a>
	list->tail = node;
   1f5fc:	4b0a      	ldr	r3, [pc, #40]	; (1f628 <finalize_cancel_locked+0x74>)
   1f5fe:	605e      	str	r6, [r3, #4]
}
   1f600:	e7ed      	b.n	1f5de <finalize_cancel_locked+0x2a>
   1f602:	4604      	mov	r4, r0
   1f604:	e7e2      	b.n	1f5cc <finalize_cancel_locked+0x18>
   1f606:	4623      	mov	r3, r4
   1f608:	4620      	mov	r0, r4
   1f60a:	461c      	mov	r4, r3
   1f60c:	b150      	cbz	r0, 1f624 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1f60e:	6843      	ldr	r3, [r0, #4]
   1f610:	42ab      	cmp	r3, r5
   1f612:	d0dd      	beq.n	1f5d0 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1f614:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1f616:	2c00      	cmp	r4, #0
   1f618:	d0f5      	beq.n	1f606 <finalize_cancel_locked+0x52>
   1f61a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f61c:	2c00      	cmp	r4, #0
   1f61e:	d0f3      	beq.n	1f608 <finalize_cancel_locked+0x54>
	return node->next;
   1f620:	6823      	ldr	r3, [r4, #0]
   1f622:	e7f1      	b.n	1f608 <finalize_cancel_locked+0x54>
}
   1f624:	bd70      	pop	{r4, r5, r6, pc}
   1f626:	bf00      	nop
   1f628:	20002d54 	.word	0x20002d54

0001f62c <cancel_sync_locked>:
{
   1f62c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1f62e:	68c5      	ldr	r5, [r0, #12]
   1f630:	f015 0f02 	tst.w	r5, #2
   1f634:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (ret) {
   1f638:	d101      	bne.n	1f63e <cancel_sync_locked+0x12>
}
   1f63a:	4628      	mov	r0, r5
   1f63c:	bd70      	pop	{r4, r5, r6, pc}
   1f63e:	4604      	mov	r4, r0
   1f640:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   1f642:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f646:	2201      	movs	r2, #1
   1f648:	2100      	movs	r1, #0
   1f64a:	f00a f8a0 	bl	2978e <z_impl_k_sem_init>
	canceler->work = work;
   1f64e:	6074      	str	r4, [r6, #4]
	parent->next = child;
   1f650:	2300      	movs	r3, #0
   1f652:	6033      	str	r3, [r6, #0]
	return list->tail;
   1f654:	4b05      	ldr	r3, [pc, #20]	; (1f66c <cancel_sync_locked+0x40>)
   1f656:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1f658:	b11b      	cbz	r3, 1f662 <cancel_sync_locked+0x36>
	parent->next = child;
   1f65a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1f65c:	4b03      	ldr	r3, [pc, #12]	; (1f66c <cancel_sync_locked+0x40>)
   1f65e:	605e      	str	r6, [r3, #4]
}
   1f660:	e7eb      	b.n	1f63a <cancel_sync_locked+0xe>
   1f662:	4b02      	ldr	r3, [pc, #8]	; (1f66c <cancel_sync_locked+0x40>)
   1f664:	605e      	str	r6, [r3, #4]
	list->head = node;
   1f666:	601e      	str	r6, [r3, #0]
}
   1f668:	e7e7      	b.n	1f63a <cancel_sync_locked+0xe>
   1f66a:	bf00      	nop
   1f66c:	20002d54 	.word	0x20002d54

0001f670 <work_queue_main>:
{
   1f670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f674:	b084      	sub	sp, #16
   1f676:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1f678:	e026      	b.n	1f6c8 <work_queue_main+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f67a:	4c6e      	ldr	r4, [pc, #440]	; (1f834 <work_queue_main+0x1c4>)
   1f67c:	2381      	movs	r3, #129	; 0x81
   1f67e:	4622      	mov	r2, r4
   1f680:	496d      	ldr	r1, [pc, #436]	; (1f838 <work_queue_main+0x1c8>)
   1f682:	486e      	ldr	r0, [pc, #440]	; (1f83c <work_queue_main+0x1cc>)
   1f684:	f006 f8d3 	bl	2582e <printk>
   1f688:	496d      	ldr	r1, [pc, #436]	; (1f840 <work_queue_main+0x1d0>)
   1f68a:	486e      	ldr	r0, [pc, #440]	; (1f844 <work_queue_main+0x1d4>)
   1f68c:	f006 f8cf 	bl	2582e <printk>
   1f690:	2181      	movs	r1, #129	; 0x81
   1f692:	4620      	mov	r0, r4
   1f694:	f006 fb4d 	bl	25d32 <assert_post_action>
   1f698:	e023      	b.n	1f6e2 <work_queue_main+0x72>
	return (*flagp & BIT(bit)) != 0U;
   1f69a:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1f69e:	f023 0204 	bic.w	r2, r3, #4
   1f6a2:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   1f6a6:	f013 0f04 	tst.w	r3, #4
   1f6aa:	d174      	bne.n	1f796 <work_queue_main+0x126>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1f6ac:	2300      	movs	r3, #0
   1f6ae:	9302      	str	r3, [sp, #8]
   1f6b0:	f04f 32ff 	mov.w	r2, #4294967295
   1f6b4:	f04f 33ff 	mov.w	r3, #4294967295
   1f6b8:	e9cd 2300 	strd	r2, r3, [sp]
   1f6bc:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   1f6c0:	4631      	mov	r1, r6
   1f6c2:	485f      	ldr	r0, [pc, #380]	; (1f840 <work_queue_main+0x1d0>)
   1f6c4:	f002 f800 	bl	216c8 <z_sched_wait>
	__asm__ volatile(
   1f6c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f6cc:	f3ef 8611 	mrs	r6, BASEPRI
   1f6d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1f6d4:	f3bf 8f6f 	isb	sy
   1f6d8:	4859      	ldr	r0, [pc, #356]	; (1f840 <work_queue_main+0x1d0>)
   1f6da:	f7fe ffcb 	bl	1e674 <z_spin_lock_valid>
   1f6de:	2800      	cmp	r0, #0
   1f6e0:	d0cb      	beq.n	1f67a <work_queue_main+0xa>
	z_spin_lock_set_owner(l);
   1f6e2:	4857      	ldr	r0, [pc, #348]	; (1f840 <work_queue_main+0x1d0>)
   1f6e4:	f7fe ffe6 	bl	1e6b4 <z_spin_lock_set_owner>
	return list->head;
   1f6e8:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1f6ec:	2c00      	cmp	r4, #0
   1f6ee:	d0d4      	beq.n	1f69a <work_queue_main+0x2a>
	return node->next;
   1f6f0:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1f6f2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   1f6f6:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f6fa:	4294      	cmp	r4, r2
   1f6fc:	d048      	beq.n	1f790 <work_queue_main+0x120>
	*flagp |= BIT(bit);
   1f6fe:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1f702:	f043 0302 	orr.w	r3, r3, #2
   1f706:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   1f70a:	68e3      	ldr	r3, [r4, #12]
   1f70c:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   1f710:	f023 0304 	bic.w	r3, r3, #4
   1f714:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   1f716:	6867      	ldr	r7, [r4, #4]
		if (work == NULL) {
   1f718:	2c00      	cmp	r4, #0
   1f71a:	d0c7      	beq.n	1f6ac <work_queue_main+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f71c:	4848      	ldr	r0, [pc, #288]	; (1f840 <work_queue_main+0x1d0>)
   1f71e:	f7fe ffb9 	bl	1e694 <z_spin_unlock_valid>
   1f722:	2800      	cmp	r0, #0
   1f724:	d042      	beq.n	1f7ac <work_queue_main+0x13c>
	__asm__ volatile(
   1f726:	f386 8811 	msr	BASEPRI, r6
   1f72a:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(handler != NULL);
   1f72e:	2f00      	cmp	r7, #0
   1f730:	d04d      	beq.n	1f7ce <work_queue_main+0x15e>
		handler(work);
   1f732:	4620      	mov	r0, r4
   1f734:	47b8      	blx	r7
	__asm__ volatile(
   1f736:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f73a:	f3ef 8611 	mrs	r6, BASEPRI
   1f73e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f742:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f746:	483e      	ldr	r0, [pc, #248]	; (1f840 <work_queue_main+0x1d0>)
   1f748:	f7fe ff94 	bl	1e674 <z_spin_lock_valid>
   1f74c:	2800      	cmp	r0, #0
   1f74e:	d04c      	beq.n	1f7ea <work_queue_main+0x17a>
	z_spin_lock_set_owner(l);
   1f750:	483b      	ldr	r0, [pc, #236]	; (1f840 <work_queue_main+0x1d0>)
   1f752:	f7fe ffaf 	bl	1e6b4 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   1f756:	68e3      	ldr	r3, [r4, #12]
   1f758:	f023 0301 	bic.w	r3, r3, #1
   1f75c:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f75e:	f013 0f02 	tst.w	r3, #2
   1f762:	d152      	bne.n	1f80a <work_queue_main+0x19a>
	*flagp &= ~BIT(bit);
   1f764:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1f768:	f023 0302 	bic.w	r3, r3, #2
   1f76c:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   1f770:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f774:	4832      	ldr	r0, [pc, #200]	; (1f840 <work_queue_main+0x1d0>)
   1f776:	f7fe ff8d 	bl	1e694 <z_spin_unlock_valid>
   1f77a:	2800      	cmp	r0, #0
   1f77c:	d049      	beq.n	1f812 <work_queue_main+0x1a2>
	__asm__ volatile(
   1f77e:	f386 8811 	msr	BASEPRI, r6
   1f782:	f3bf 8f6f 	isb	sy
		if (yield) {
   1f786:	2c00      	cmp	r4, #0
   1f788:	d19e      	bne.n	1f6c8 <work_queue_main+0x58>
	z_impl_k_yield();
   1f78a:	f001 fcb5 	bl	210f8 <z_impl_k_yield>
}
   1f78e:	e79b      	b.n	1f6c8 <work_queue_main+0x58>
	list->tail = node;
   1f790:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   1f794:	e7b3      	b.n	1f6fe <work_queue_main+0x8e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1f796:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1f79a:	2200      	movs	r2, #0
   1f79c:	2101      	movs	r1, #1
   1f79e:	4638      	mov	r0, r7
   1f7a0:	f001 ff1e 	bl	215e0 <z_sched_wake>
   1f7a4:	2800      	cmp	r0, #0
   1f7a6:	d1f8      	bne.n	1f79a <work_queue_main+0x12a>
		k_work_handler_t handler = NULL;
   1f7a8:	2700      	movs	r7, #0
   1f7aa:	e7b5      	b.n	1f718 <work_queue_main+0xa8>
   1f7ac:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1f834 <work_queue_main+0x1c4>
   1f7b0:	23ac      	movs	r3, #172	; 0xac
   1f7b2:	4642      	mov	r2, r8
   1f7b4:	4924      	ldr	r1, [pc, #144]	; (1f848 <work_queue_main+0x1d8>)
   1f7b6:	4821      	ldr	r0, [pc, #132]	; (1f83c <work_queue_main+0x1cc>)
   1f7b8:	f006 f839 	bl	2582e <printk>
   1f7bc:	4920      	ldr	r1, [pc, #128]	; (1f840 <work_queue_main+0x1d0>)
   1f7be:	4823      	ldr	r0, [pc, #140]	; (1f84c <work_queue_main+0x1dc>)
   1f7c0:	f006 f835 	bl	2582e <printk>
   1f7c4:	21ac      	movs	r1, #172	; 0xac
   1f7c6:	4640      	mov	r0, r8
   1f7c8:	f006 fab3 	bl	25d32 <assert_post_action>
   1f7cc:	e7ab      	b.n	1f726 <work_queue_main+0xb6>
		__ASSERT_NO_MSG(handler != NULL);
   1f7ce:	4e20      	ldr	r6, [pc, #128]	; (1f850 <work_queue_main+0x1e0>)
   1f7d0:	f44f 7322 	mov.w	r3, #648	; 0x288
   1f7d4:	4632      	mov	r2, r6
   1f7d6:	491f      	ldr	r1, [pc, #124]	; (1f854 <work_queue_main+0x1e4>)
   1f7d8:	4818      	ldr	r0, [pc, #96]	; (1f83c <work_queue_main+0x1cc>)
   1f7da:	f006 f828 	bl	2582e <printk>
   1f7de:	f44f 7122 	mov.w	r1, #648	; 0x288
   1f7e2:	4630      	mov	r0, r6
   1f7e4:	f006 faa5 	bl	25d32 <assert_post_action>
   1f7e8:	e7a3      	b.n	1f732 <work_queue_main+0xc2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f7ea:	4f12      	ldr	r7, [pc, #72]	; (1f834 <work_queue_main+0x1c4>)
   1f7ec:	2381      	movs	r3, #129	; 0x81
   1f7ee:	463a      	mov	r2, r7
   1f7f0:	4911      	ldr	r1, [pc, #68]	; (1f838 <work_queue_main+0x1c8>)
   1f7f2:	4812      	ldr	r0, [pc, #72]	; (1f83c <work_queue_main+0x1cc>)
   1f7f4:	f006 f81b 	bl	2582e <printk>
   1f7f8:	4911      	ldr	r1, [pc, #68]	; (1f840 <work_queue_main+0x1d0>)
   1f7fa:	4812      	ldr	r0, [pc, #72]	; (1f844 <work_queue_main+0x1d4>)
   1f7fc:	f006 f817 	bl	2582e <printk>
   1f800:	2181      	movs	r1, #129	; 0x81
   1f802:	4638      	mov	r0, r7
   1f804:	f006 fa95 	bl	25d32 <assert_post_action>
   1f808:	e7a2      	b.n	1f750 <work_queue_main+0xe0>
			finalize_cancel_locked(work);
   1f80a:	4620      	mov	r0, r4
   1f80c:	f7ff fed2 	bl	1f5b4 <finalize_cancel_locked>
   1f810:	e7a8      	b.n	1f764 <work_queue_main+0xf4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f812:	4f08      	ldr	r7, [pc, #32]	; (1f834 <work_queue_main+0x1c4>)
   1f814:	23ac      	movs	r3, #172	; 0xac
   1f816:	463a      	mov	r2, r7
   1f818:	490b      	ldr	r1, [pc, #44]	; (1f848 <work_queue_main+0x1d8>)
   1f81a:	4808      	ldr	r0, [pc, #32]	; (1f83c <work_queue_main+0x1cc>)
   1f81c:	f006 f807 	bl	2582e <printk>
   1f820:	4907      	ldr	r1, [pc, #28]	; (1f840 <work_queue_main+0x1d0>)
   1f822:	480a      	ldr	r0, [pc, #40]	; (1f84c <work_queue_main+0x1dc>)
   1f824:	f006 f803 	bl	2582e <printk>
   1f828:	21ac      	movs	r1, #172	; 0xac
   1f82a:	4638      	mov	r0, r7
   1f82c:	f006 fa81 	bl	25d32 <assert_post_action>
   1f830:	e7a5      	b.n	1f77e <work_queue_main+0x10e>
   1f832:	bf00      	nop
   1f834:	0002a314 	.word	0x0002a314
   1f838:	0002a36c 	.word	0x0002a36c
   1f83c:	00029ff8 	.word	0x00029ff8
   1f840:	20002d50 	.word	0x20002d50
   1f844:	0002a384 	.word	0x0002a384
   1f848:	0002a33c 	.word	0x0002a33c
   1f84c:	0002a354 	.word	0x0002a354
   1f850:	0002d6f8 	.word	0x0002d6f8
   1f854:	0002d738 	.word	0x0002d738

0001f858 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1f858:	b570      	push	{r4, r5, r6, lr}
   1f85a:	4606      	mov	r6, r0
   1f85c:	4608      	mov	r0, r1
   1f85e:	4614      	mov	r4, r2
   1f860:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f862:	ea54 0305 	orrs.w	r3, r4, r5
   1f866:	d00c      	beq.n	1f882 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   1f868:	68cb      	ldr	r3, [r1, #12]
   1f86a:	f043 0308 	orr.w	r3, r3, #8
   1f86e:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   1f870:	6833      	ldr	r3, [r6, #0]
   1f872:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1f874:	462b      	mov	r3, r5
   1f876:	4905      	ldr	r1, [pc, #20]	; (1f88c <schedule_for_queue_locked+0x34>)
   1f878:	3010      	adds	r0, #16
   1f87a:	f001 ff99 	bl	217b0 <z_add_timeout>

	return ret;
   1f87e:	2001      	movs	r0, #1
}
   1f880:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   1f882:	4631      	mov	r1, r6
   1f884:	f7ff fdb4 	bl	1f3f0 <submit_to_queue_locked>
   1f888:	e7fa      	b.n	1f880 <schedule_for_queue_locked+0x28>
   1f88a:	bf00      	nop
   1f88c:	0001f4f9 	.word	0x0001f4f9

0001f890 <k_work_init>:
{
   1f890:	b570      	push	{r4, r5, r6, lr}
   1f892:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   1f894:	4604      	mov	r4, r0
   1f896:	b130      	cbz	r0, 1f8a6 <k_work_init+0x16>
	__ASSERT_NO_MSG(handler != NULL);
   1f898:	b18d      	cbz	r5, 1f8be <k_work_init+0x2e>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1f89a:	2300      	movs	r3, #0
   1f89c:	6023      	str	r3, [r4, #0]
   1f89e:	60a3      	str	r3, [r4, #8]
   1f8a0:	60e3      	str	r3, [r4, #12]
   1f8a2:	6065      	str	r5, [r4, #4]
}
   1f8a4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   1f8a6:	4e0c      	ldr	r6, [pc, #48]	; (1f8d8 <k_work_init+0x48>)
   1f8a8:	2389      	movs	r3, #137	; 0x89
   1f8aa:	4632      	mov	r2, r6
   1f8ac:	490b      	ldr	r1, [pc, #44]	; (1f8dc <k_work_init+0x4c>)
   1f8ae:	480c      	ldr	r0, [pc, #48]	; (1f8e0 <k_work_init+0x50>)
   1f8b0:	f005 ffbd 	bl	2582e <printk>
   1f8b4:	2189      	movs	r1, #137	; 0x89
   1f8b6:	4630      	mov	r0, r6
   1f8b8:	f006 fa3b 	bl	25d32 <assert_post_action>
   1f8bc:	e7ec      	b.n	1f898 <k_work_init+0x8>
	__ASSERT_NO_MSG(handler != NULL);
   1f8be:	4e06      	ldr	r6, [pc, #24]	; (1f8d8 <k_work_init+0x48>)
   1f8c0:	238a      	movs	r3, #138	; 0x8a
   1f8c2:	4632      	mov	r2, r6
   1f8c4:	4907      	ldr	r1, [pc, #28]	; (1f8e4 <k_work_init+0x54>)
   1f8c6:	4806      	ldr	r0, [pc, #24]	; (1f8e0 <k_work_init+0x50>)
   1f8c8:	f005 ffb1 	bl	2582e <printk>
   1f8cc:	218a      	movs	r1, #138	; 0x8a
   1f8ce:	4630      	mov	r0, r6
   1f8d0:	f006 fa2f 	bl	25d32 <assert_post_action>
   1f8d4:	e7e1      	b.n	1f89a <k_work_init+0xa>
   1f8d6:	bf00      	nop
   1f8d8:	0002d6f8 	.word	0x0002d6f8
   1f8dc:	0002d750 	.word	0x0002d750
   1f8e0:	00029ff8 	.word	0x00029ff8
   1f8e4:	0002d738 	.word	0x0002d738

0001f8e8 <k_work_submit_to_queue>:
{
   1f8e8:	b570      	push	{r4, r5, r6, lr}
   1f8ea:	b082      	sub	sp, #8
   1f8ec:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   1f8ee:	460c      	mov	r4, r1
   1f8f0:	b309      	cbz	r1, 1f936 <k_work_submit_to_queue+0x4e>
	__asm__ volatile(
   1f8f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f8f6:	f3ef 8611 	mrs	r6, BASEPRI
   1f8fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1f8fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f902:	4827      	ldr	r0, [pc, #156]	; (1f9a0 <k_work_submit_to_queue+0xb8>)
   1f904:	f7fe feb6 	bl	1e674 <z_spin_lock_valid>
   1f908:	b318      	cbz	r0, 1f952 <k_work_submit_to_queue+0x6a>
	z_spin_lock_set_owner(l);
   1f90a:	4d25      	ldr	r5, [pc, #148]	; (1f9a0 <k_work_submit_to_queue+0xb8>)
   1f90c:	4628      	mov	r0, r5
   1f90e:	f7fe fed1 	bl	1e6b4 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   1f912:	a901      	add	r1, sp, #4
   1f914:	4620      	mov	r0, r4
   1f916:	f7ff fd6b 	bl	1f3f0 <submit_to_queue_locked>
   1f91a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f91c:	4628      	mov	r0, r5
   1f91e:	f7fe feb9 	bl	1e694 <z_spin_unlock_valid>
   1f922:	b330      	cbz	r0, 1f972 <k_work_submit_to_queue+0x8a>
	__asm__ volatile(
   1f924:	f386 8811 	msr	BASEPRI, r6
   1f928:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1f92c:	2c00      	cmp	r4, #0
   1f92e:	dc30      	bgt.n	1f992 <k_work_submit_to_queue+0xaa>
}
   1f930:	4620      	mov	r0, r4
   1f932:	b002      	add	sp, #8
   1f934:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   1f936:	4d1b      	ldr	r5, [pc, #108]	; (1f9a4 <k_work_submit_to_queue+0xbc>)
   1f938:	f240 1369 	movw	r3, #361	; 0x169
   1f93c:	462a      	mov	r2, r5
   1f93e:	491a      	ldr	r1, [pc, #104]	; (1f9a8 <k_work_submit_to_queue+0xc0>)
   1f940:	481a      	ldr	r0, [pc, #104]	; (1f9ac <k_work_submit_to_queue+0xc4>)
   1f942:	f005 ff74 	bl	2582e <printk>
   1f946:	f240 1169 	movw	r1, #361	; 0x169
   1f94a:	4628      	mov	r0, r5
   1f94c:	f006 f9f1 	bl	25d32 <assert_post_action>
   1f950:	e7cf      	b.n	1f8f2 <k_work_submit_to_queue+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f952:	4d17      	ldr	r5, [pc, #92]	; (1f9b0 <k_work_submit_to_queue+0xc8>)
   1f954:	2381      	movs	r3, #129	; 0x81
   1f956:	462a      	mov	r2, r5
   1f958:	4916      	ldr	r1, [pc, #88]	; (1f9b4 <k_work_submit_to_queue+0xcc>)
   1f95a:	4814      	ldr	r0, [pc, #80]	; (1f9ac <k_work_submit_to_queue+0xc4>)
   1f95c:	f005 ff67 	bl	2582e <printk>
   1f960:	490f      	ldr	r1, [pc, #60]	; (1f9a0 <k_work_submit_to_queue+0xb8>)
   1f962:	4815      	ldr	r0, [pc, #84]	; (1f9b8 <k_work_submit_to_queue+0xd0>)
   1f964:	f005 ff63 	bl	2582e <printk>
   1f968:	2181      	movs	r1, #129	; 0x81
   1f96a:	4628      	mov	r0, r5
   1f96c:	f006 f9e1 	bl	25d32 <assert_post_action>
   1f970:	e7cb      	b.n	1f90a <k_work_submit_to_queue+0x22>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f972:	4d0f      	ldr	r5, [pc, #60]	; (1f9b0 <k_work_submit_to_queue+0xc8>)
   1f974:	23ac      	movs	r3, #172	; 0xac
   1f976:	462a      	mov	r2, r5
   1f978:	4910      	ldr	r1, [pc, #64]	; (1f9bc <k_work_submit_to_queue+0xd4>)
   1f97a:	480c      	ldr	r0, [pc, #48]	; (1f9ac <k_work_submit_to_queue+0xc4>)
   1f97c:	f005 ff57 	bl	2582e <printk>
   1f980:	4907      	ldr	r1, [pc, #28]	; (1f9a0 <k_work_submit_to_queue+0xb8>)
   1f982:	480f      	ldr	r0, [pc, #60]	; (1f9c0 <k_work_submit_to_queue+0xd8>)
   1f984:	f005 ff53 	bl	2582e <printk>
   1f988:	21ac      	movs	r1, #172	; 0xac
   1f98a:	4628      	mov	r0, r5
   1f98c:	f006 f9d1 	bl	25d32 <assert_post_action>
   1f990:	e7c8      	b.n	1f924 <k_work_submit_to_queue+0x3c>
	return z_impl_k_is_preempt_thread();
   1f992:	f001 fd73 	bl	2147c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1f996:	2800      	cmp	r0, #0
   1f998:	d0ca      	beq.n	1f930 <k_work_submit_to_queue+0x48>
	z_impl_k_yield();
   1f99a:	f001 fbad 	bl	210f8 <z_impl_k_yield>
	return ret;
   1f99e:	e7c7      	b.n	1f930 <k_work_submit_to_queue+0x48>
   1f9a0:	20002d50 	.word	0x20002d50
   1f9a4:	0002d6f8 	.word	0x0002d6f8
   1f9a8:	0002d750 	.word	0x0002d750
   1f9ac:	00029ff8 	.word	0x00029ff8
   1f9b0:	0002a314 	.word	0x0002a314
   1f9b4:	0002a36c 	.word	0x0002a36c
   1f9b8:	0002a384 	.word	0x0002a384
   1f9bc:	0002a33c 	.word	0x0002a33c
   1f9c0:	0002a354 	.word	0x0002a354

0001f9c4 <k_work_submit>:
{
   1f9c4:	b508      	push	{r3, lr}
   1f9c6:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1f9c8:	4801      	ldr	r0, [pc, #4]	; (1f9d0 <k_work_submit+0xc>)
   1f9ca:	f7ff ff8d 	bl	1f8e8 <k_work_submit_to_queue>
}
   1f9ce:	bd08      	pop	{r3, pc}
   1f9d0:	20001e20 	.word	0x20001e20

0001f9d4 <k_work_queue_start>:
{
   1f9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f9d8:	b089      	sub	sp, #36	; 0x24
   1f9da:	460d      	mov	r5, r1
   1f9dc:	4617      	mov	r7, r2
   1f9de:	4698      	mov	r8, r3
   1f9e0:	9e10      	ldr	r6, [sp, #64]	; 0x40
	__ASSERT_NO_MSG(queue);
   1f9e2:	4604      	mov	r4, r0
   1f9e4:	2800      	cmp	r0, #0
   1f9e6:	d03e      	beq.n	1fa66 <k_work_queue_start+0x92>
	__ASSERT_NO_MSG(stack);
   1f9e8:	2d00      	cmp	r5, #0
   1f9ea:	d04b      	beq.n	1fa84 <k_work_queue_start+0xb0>
	return (*flagp & BIT(bit)) != 0U;
   1f9ec:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   1f9f0:	f013 0f01 	tst.w	r3, #1
   1f9f4:	d155      	bne.n	1faa2 <k_work_queue_start+0xce>
	list->head = NULL;
   1f9f6:	2300      	movs	r3, #0
   1f9f8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	list->tail = NULL;
   1f9fc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
   1fa00:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   1fa04:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   1fa08:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   1fa0c:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   1fa10:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   1fa14:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   1fa18:	2e00      	cmp	r6, #0
   1fa1a:	d051      	beq.n	1fac0 <k_work_queue_start+0xec>
   1fa1c:	7933      	ldrb	r3, [r6, #4]
   1fa1e:	2b00      	cmp	r3, #0
   1fa20:	d150      	bne.n	1fac4 <k_work_queue_start+0xf0>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1fa22:	2301      	movs	r3, #1
	*flagp = flags;
   1fa24:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fa28:	f04f 32ff 	mov.w	r2, #4294967295
   1fa2c:	f04f 33ff 	mov.w	r3, #4294967295
   1fa30:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1fa34:	2200      	movs	r2, #0
   1fa36:	9204      	str	r2, [sp, #16]
   1fa38:	f8cd 800c 	str.w	r8, [sp, #12]
   1fa3c:	9202      	str	r2, [sp, #8]
   1fa3e:	9201      	str	r2, [sp, #4]
   1fa40:	9400      	str	r4, [sp, #0]
   1fa42:	4b22      	ldr	r3, [pc, #136]	; (1facc <k_work_queue_start+0xf8>)
   1fa44:	463a      	mov	r2, r7
   1fa46:	4629      	mov	r1, r5
   1fa48:	4620      	mov	r0, r4
   1fa4a:	f7fe ff5b 	bl	1e904 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1fa4e:	b126      	cbz	r6, 1fa5a <k_work_queue_start+0x86>
   1fa50:	6831      	ldr	r1, [r6, #0]
   1fa52:	b111      	cbz	r1, 1fa5a <k_work_queue_start+0x86>
	return z_impl_k_thread_name_set(thread, str);
   1fa54:	4620      	mov	r0, r4
   1fa56:	f7fe fde9 	bl	1e62c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1fa5a:	4620      	mov	r0, r4
   1fa5c:	f009 fe2a 	bl	296b4 <z_impl_k_thread_start>
}
   1fa60:	b009      	add	sp, #36	; 0x24
   1fa62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(queue);
   1fa66:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1fae0 <k_work_queue_start+0x10c>
   1fa6a:	f240 23b5 	movw	r3, #693	; 0x2b5
   1fa6e:	464a      	mov	r2, r9
   1fa70:	4917      	ldr	r1, [pc, #92]	; (1fad0 <k_work_queue_start+0xfc>)
   1fa72:	4818      	ldr	r0, [pc, #96]	; (1fad4 <k_work_queue_start+0x100>)
   1fa74:	f005 fedb 	bl	2582e <printk>
   1fa78:	f240 21b5 	movw	r1, #693	; 0x2b5
   1fa7c:	4648      	mov	r0, r9
   1fa7e:	f006 f958 	bl	25d32 <assert_post_action>
   1fa82:	e7b1      	b.n	1f9e8 <k_work_queue_start+0x14>
	__ASSERT_NO_MSG(stack);
   1fa84:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1fae0 <k_work_queue_start+0x10c>
   1fa88:	f240 23b6 	movw	r3, #694	; 0x2b6
   1fa8c:	464a      	mov	r2, r9
   1fa8e:	4912      	ldr	r1, [pc, #72]	; (1fad8 <k_work_queue_start+0x104>)
   1fa90:	4810      	ldr	r0, [pc, #64]	; (1fad4 <k_work_queue_start+0x100>)
   1fa92:	f005 fecc 	bl	2582e <printk>
   1fa96:	f240 21b6 	movw	r1, #694	; 0x2b6
   1fa9a:	4648      	mov	r0, r9
   1fa9c:	f006 f949 	bl	25d32 <assert_post_action>
   1faa0:	e7a4      	b.n	1f9ec <k_work_queue_start+0x18>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   1faa2:	f8df 903c 	ldr.w	r9, [pc, #60]	; 1fae0 <k_work_queue_start+0x10c>
   1faa6:	f240 23b7 	movw	r3, #695	; 0x2b7
   1faaa:	464a      	mov	r2, r9
   1faac:	490b      	ldr	r1, [pc, #44]	; (1fadc <k_work_queue_start+0x108>)
   1faae:	4809      	ldr	r0, [pc, #36]	; (1fad4 <k_work_queue_start+0x100>)
   1fab0:	f005 febd 	bl	2582e <printk>
   1fab4:	f240 21b7 	movw	r1, #695	; 0x2b7
   1fab8:	4648      	mov	r0, r9
   1faba:	f006 f93a 	bl	25d32 <assert_post_action>
   1fabe:	e79a      	b.n	1f9f6 <k_work_queue_start+0x22>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1fac0:	2301      	movs	r3, #1
   1fac2:	e7af      	b.n	1fa24 <k_work_queue_start+0x50>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1fac4:	f240 1301 	movw	r3, #257	; 0x101
   1fac8:	e7ac      	b.n	1fa24 <k_work_queue_start+0x50>
   1faca:	bf00      	nop
   1facc:	0001f671 	.word	0x0001f671
   1fad0:	0002d7a8 	.word	0x0002d7a8
   1fad4:	00029ff8 	.word	0x00029ff8
   1fad8:	0002d7b0 	.word	0x0002d7b0
   1fadc:	0002d7b8 	.word	0x0002d7b8
   1fae0:	0002d6f8 	.word	0x0002d6f8

0001fae4 <k_work_init_delayable>:
{
   1fae4:	b570      	push	{r4, r5, r6, lr}
   1fae6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1fae8:	4605      	mov	r5, r0
   1faea:	b150      	cbz	r0, 1fb02 <k_work_init_delayable+0x1e>
	__ASSERT_NO_MSG(handler != NULL);
   1faec:	b1bc      	cbz	r4, 1fb1e <k_work_init_delayable+0x3a>
	*dwork = (struct k_work_delayable){
   1faee:	2230      	movs	r2, #48	; 0x30
   1faf0:	2100      	movs	r1, #0
   1faf2:	4628      	mov	r0, r5
   1faf4:	f006 fea4 	bl	26840 <memset>
   1faf8:	606c      	str	r4, [r5, #4]
   1fafa:	f44f 7380 	mov.w	r3, #256	; 0x100
   1fafe:	60eb      	str	r3, [r5, #12]
}
   1fb00:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   1fb02:	4e0e      	ldr	r6, [pc, #56]	; (1fb3c <k_work_init_delayable+0x58>)
   1fb04:	f240 332d 	movw	r3, #813	; 0x32d
   1fb08:	4632      	mov	r2, r6
   1fb0a:	490d      	ldr	r1, [pc, #52]	; (1fb40 <k_work_init_delayable+0x5c>)
   1fb0c:	480d      	ldr	r0, [pc, #52]	; (1fb44 <k_work_init_delayable+0x60>)
   1fb0e:	f005 fe8e 	bl	2582e <printk>
   1fb12:	f240 312d 	movw	r1, #813	; 0x32d
   1fb16:	4630      	mov	r0, r6
   1fb18:	f006 f90b 	bl	25d32 <assert_post_action>
   1fb1c:	e7e6      	b.n	1faec <k_work_init_delayable+0x8>
	__ASSERT_NO_MSG(handler != NULL);
   1fb1e:	4e07      	ldr	r6, [pc, #28]	; (1fb3c <k_work_init_delayable+0x58>)
   1fb20:	f240 332e 	movw	r3, #814	; 0x32e
   1fb24:	4632      	mov	r2, r6
   1fb26:	4908      	ldr	r1, [pc, #32]	; (1fb48 <k_work_init_delayable+0x64>)
   1fb28:	4806      	ldr	r0, [pc, #24]	; (1fb44 <k_work_init_delayable+0x60>)
   1fb2a:	f005 fe80 	bl	2582e <printk>
   1fb2e:	f240 312e 	movw	r1, #814	; 0x32e
   1fb32:	4630      	mov	r0, r6
   1fb34:	f006 f8fd 	bl	25d32 <assert_post_action>
   1fb38:	e7d9      	b.n	1faee <k_work_init_delayable+0xa>
   1fb3a:	bf00      	nop
   1fb3c:	0002d6f8 	.word	0x0002d6f8
   1fb40:	0002d7ec 	.word	0x0002d7ec
   1fb44:	00029ff8 	.word	0x00029ff8
   1fb48:	0002d738 	.word	0x0002d738

0001fb4c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1fb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb50:	b082      	sub	sp, #8
   1fb52:	9001      	str	r0, [sp, #4]
   1fb54:	4617      	mov	r7, r2
   1fb56:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1fb58:	460c      	mov	r4, r1
   1fb5a:	b1f9      	cbz	r1, 1fb9c <k_work_schedule_for_queue+0x50>
	__asm__ volatile(
   1fb5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb60:	f3ef 8611 	mrs	r6, BASEPRI
   1fb64:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fb6c:	4827      	ldr	r0, [pc, #156]	; (1fc0c <k_work_schedule_for_queue+0xc0>)
   1fb6e:	f7fe fd81 	bl	1e674 <z_spin_lock_valid>
   1fb72:	b308      	cbz	r0, 1fbb8 <k_work_schedule_for_queue+0x6c>
	z_spin_lock_set_owner(l);
   1fb74:	4825      	ldr	r0, [pc, #148]	; (1fc0c <k_work_schedule_for_queue+0xc0>)
   1fb76:	f7fe fd9d 	bl	1e6b4 <z_spin_lock_set_owner>
	return *flagp;
   1fb7a:	68e1      	ldr	r1, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1fb7c:	f011 0f0e 	tst.w	r1, #14
   1fb80:	d02b      	beq.n	1fbda <k_work_schedule_for_queue+0x8e>
	int ret = 0;
   1fb82:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fb84:	4821      	ldr	r0, [pc, #132]	; (1fc0c <k_work_schedule_for_queue+0xc0>)
   1fb86:	f7fe fd85 	bl	1e694 <z_spin_unlock_valid>
   1fb8a:	b370      	cbz	r0, 1fbea <k_work_schedule_for_queue+0x9e>
	__asm__ volatile(
   1fb8c:	f386 8811 	msr	BASEPRI, r6
   1fb90:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1fb94:	4620      	mov	r0, r4
   1fb96:	b002      	add	sp, #8
   1fb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   1fb9c:	4e1c      	ldr	r6, [pc, #112]	; (1fc10 <k_work_schedule_for_queue+0xc4>)
   1fb9e:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   1fba2:	4632      	mov	r2, r6
   1fba4:	491b      	ldr	r1, [pc, #108]	; (1fc14 <k_work_schedule_for_queue+0xc8>)
   1fba6:	481c      	ldr	r0, [pc, #112]	; (1fc18 <k_work_schedule_for_queue+0xcc>)
   1fba8:	f005 fe41 	bl	2582e <printk>
   1fbac:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   1fbb0:	4630      	mov	r0, r6
   1fbb2:	f006 f8be 	bl	25d32 <assert_post_action>
   1fbb6:	e7d1      	b.n	1fb5c <k_work_schedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fbb8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1fc24 <k_work_schedule_for_queue+0xd8>
   1fbbc:	2381      	movs	r3, #129	; 0x81
   1fbbe:	4642      	mov	r2, r8
   1fbc0:	4916      	ldr	r1, [pc, #88]	; (1fc1c <k_work_schedule_for_queue+0xd0>)
   1fbc2:	4815      	ldr	r0, [pc, #84]	; (1fc18 <k_work_schedule_for_queue+0xcc>)
   1fbc4:	f005 fe33 	bl	2582e <printk>
   1fbc8:	4910      	ldr	r1, [pc, #64]	; (1fc0c <k_work_schedule_for_queue+0xc0>)
   1fbca:	4815      	ldr	r0, [pc, #84]	; (1fc20 <k_work_schedule_for_queue+0xd4>)
   1fbcc:	f005 fe2f 	bl	2582e <printk>
   1fbd0:	2181      	movs	r1, #129	; 0x81
   1fbd2:	4640      	mov	r0, r8
   1fbd4:	f006 f8ad 	bl	25d32 <assert_post_action>
   1fbd8:	e7cc      	b.n	1fb74 <k_work_schedule_for_queue+0x28>
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   1fbda:	463a      	mov	r2, r7
   1fbdc:	462b      	mov	r3, r5
   1fbde:	4621      	mov	r1, r4
   1fbe0:	a801      	add	r0, sp, #4
   1fbe2:	f7ff fe39 	bl	1f858 <schedule_for_queue_locked>
   1fbe6:	4604      	mov	r4, r0
   1fbe8:	e7cc      	b.n	1fb84 <k_work_schedule_for_queue+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fbea:	4d0e      	ldr	r5, [pc, #56]	; (1fc24 <k_work_schedule_for_queue+0xd8>)
   1fbec:	23ac      	movs	r3, #172	; 0xac
   1fbee:	462a      	mov	r2, r5
   1fbf0:	490d      	ldr	r1, [pc, #52]	; (1fc28 <k_work_schedule_for_queue+0xdc>)
   1fbf2:	4809      	ldr	r0, [pc, #36]	; (1fc18 <k_work_schedule_for_queue+0xcc>)
   1fbf4:	f005 fe1b 	bl	2582e <printk>
   1fbf8:	4904      	ldr	r1, [pc, #16]	; (1fc0c <k_work_schedule_for_queue+0xc0>)
   1fbfa:	480c      	ldr	r0, [pc, #48]	; (1fc2c <k_work_schedule_for_queue+0xe0>)
   1fbfc:	f005 fe17 	bl	2582e <printk>
   1fc00:	21ac      	movs	r1, #172	; 0xac
   1fc02:	4628      	mov	r0, r5
   1fc04:	f006 f895 	bl	25d32 <assert_post_action>
   1fc08:	e7c0      	b.n	1fb8c <k_work_schedule_for_queue+0x40>
   1fc0a:	bf00      	nop
   1fc0c:	20002d50 	.word	0x20002d50
   1fc10:	0002d6f8 	.word	0x0002d6f8
   1fc14:	0002d7ec 	.word	0x0002d7ec
   1fc18:	00029ff8 	.word	0x00029ff8
   1fc1c:	0002a36c 	.word	0x0002a36c
   1fc20:	0002a384 	.word	0x0002a384
   1fc24:	0002a314 	.word	0x0002a314
   1fc28:	0002a33c 	.word	0x0002a33c
   1fc2c:	0002a354 	.word	0x0002a354

0001fc30 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1fc30:	b508      	push	{r3, lr}
   1fc32:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1fc34:	4801      	ldr	r0, [pc, #4]	; (1fc3c <k_work_schedule+0xc>)
   1fc36:	f7ff ff89 	bl	1fb4c <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   1fc3a:	bd08      	pop	{r3, pc}
   1fc3c:	20001e20 	.word	0x20001e20

0001fc40 <k_work_reschedule_for_queue>:

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1fc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc44:	b082      	sub	sp, #8
   1fc46:	9001      	str	r0, [sp, #4]
   1fc48:	4616      	mov	r6, r2
   1fc4a:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1fc4c:	460c      	mov	r4, r1
   1fc4e:	b341      	cbz	r1, 1fca2 <k_work_reschedule_for_queue+0x62>
	__asm__ volatile(
   1fc50:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fc54:	f3ef 8711 	mrs	r7, BASEPRI
   1fc58:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fc60:	482a      	ldr	r0, [pc, #168]	; (1fd0c <k_work_reschedule_for_queue+0xcc>)
   1fc62:	f7fe fd07 	bl	1e674 <z_spin_lock_valid>
   1fc66:	b350      	cbz	r0, 1fcbe <k_work_reschedule_for_queue+0x7e>
	z_spin_lock_set_owner(l);
   1fc68:	4828      	ldr	r0, [pc, #160]	; (1fd0c <k_work_reschedule_for_queue+0xcc>)
   1fc6a:	f7fe fd23 	bl	1e6b4 <z_spin_lock_set_owner>
	return (*flagp & BIT(bit)) != 0U;
   1fc6e:	68e3      	ldr	r3, [r4, #12]
	*flagp &= ~BIT(bit);
   1fc70:	f023 0208 	bic.w	r2, r3, #8
   1fc74:	60e2      	str	r2, [r4, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1fc76:	f013 0f08 	tst.w	r3, #8
   1fc7a:	d131      	bne.n	1fce0 <k_work_reschedule_for_queue+0xa0>

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);

	/* Schedule the work item with the new parameters. */
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   1fc7c:	4632      	mov	r2, r6
   1fc7e:	462b      	mov	r3, r5
   1fc80:	4621      	mov	r1, r4
   1fc82:	a801      	add	r0, sp, #4
   1fc84:	f7ff fde8 	bl	1f858 <schedule_for_queue_locked>
   1fc88:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fc8a:	4820      	ldr	r0, [pc, #128]	; (1fd0c <k_work_reschedule_for_queue+0xcc>)
   1fc8c:	f7fe fd02 	bl	1e694 <z_spin_unlock_valid>
   1fc90:	b358      	cbz	r0, 1fcea <k_work_reschedule_for_queue+0xaa>
	__asm__ volatile(
   1fc92:	f387 8811 	msr	BASEPRI, r7
   1fc96:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1fc9a:	4620      	mov	r0, r4
   1fc9c:	b002      	add	sp, #8
   1fc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   1fca2:	4f1b      	ldr	r7, [pc, #108]	; (1fd10 <k_work_reschedule_for_queue+0xd0>)
   1fca4:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   1fca8:	463a      	mov	r2, r7
   1fcaa:	491a      	ldr	r1, [pc, #104]	; (1fd14 <k_work_reschedule_for_queue+0xd4>)
   1fcac:	481a      	ldr	r0, [pc, #104]	; (1fd18 <k_work_reschedule_for_queue+0xd8>)
   1fcae:	f005 fdbe 	bl	2582e <printk>
   1fcb2:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   1fcb6:	4638      	mov	r0, r7
   1fcb8:	f006 f83b 	bl	25d32 <assert_post_action>
   1fcbc:	e7c8      	b.n	1fc50 <k_work_reschedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fcbe:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1fd24 <k_work_reschedule_for_queue+0xe4>
   1fcc2:	2381      	movs	r3, #129	; 0x81
   1fcc4:	4642      	mov	r2, r8
   1fcc6:	4915      	ldr	r1, [pc, #84]	; (1fd1c <k_work_reschedule_for_queue+0xdc>)
   1fcc8:	4813      	ldr	r0, [pc, #76]	; (1fd18 <k_work_reschedule_for_queue+0xd8>)
   1fcca:	f005 fdb0 	bl	2582e <printk>
   1fcce:	490f      	ldr	r1, [pc, #60]	; (1fd0c <k_work_reschedule_for_queue+0xcc>)
   1fcd0:	4813      	ldr	r0, [pc, #76]	; (1fd20 <k_work_reschedule_for_queue+0xe0>)
   1fcd2:	f005 fdac 	bl	2582e <printk>
   1fcd6:	2181      	movs	r1, #129	; 0x81
   1fcd8:	4640      	mov	r0, r8
   1fcda:	f006 f82a 	bl	25d32 <assert_post_action>
   1fcde:	e7c3      	b.n	1fc68 <k_work_reschedule_for_queue+0x28>
		z_abort_timeout(&dwork->timeout);
   1fce0:	f104 0010 	add.w	r0, r4, #16
   1fce4:	f001 fe60 	bl	219a8 <z_abort_timeout>
		ret = true;
   1fce8:	e7c8      	b.n	1fc7c <k_work_reschedule_for_queue+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fcea:	4d0e      	ldr	r5, [pc, #56]	; (1fd24 <k_work_reschedule_for_queue+0xe4>)
   1fcec:	23ac      	movs	r3, #172	; 0xac
   1fcee:	462a      	mov	r2, r5
   1fcf0:	490d      	ldr	r1, [pc, #52]	; (1fd28 <k_work_reschedule_for_queue+0xe8>)
   1fcf2:	4809      	ldr	r0, [pc, #36]	; (1fd18 <k_work_reschedule_for_queue+0xd8>)
   1fcf4:	f005 fd9b 	bl	2582e <printk>
   1fcf8:	4904      	ldr	r1, [pc, #16]	; (1fd0c <k_work_reschedule_for_queue+0xcc>)
   1fcfa:	480c      	ldr	r0, [pc, #48]	; (1fd2c <k_work_reschedule_for_queue+0xec>)
   1fcfc:	f005 fd97 	bl	2582e <printk>
   1fd00:	21ac      	movs	r1, #172	; 0xac
   1fd02:	4628      	mov	r0, r5
   1fd04:	f006 f815 	bl	25d32 <assert_post_action>
   1fd08:	e7c3      	b.n	1fc92 <k_work_reschedule_for_queue+0x52>
   1fd0a:	bf00      	nop
   1fd0c:	20002d50 	.word	0x20002d50
   1fd10:	0002d6f8 	.word	0x0002d6f8
   1fd14:	0002d7ec 	.word	0x0002d7ec
   1fd18:	00029ff8 	.word	0x00029ff8
   1fd1c:	0002a36c 	.word	0x0002a36c
   1fd20:	0002a384 	.word	0x0002a384
   1fd24:	0002a314 	.word	0x0002a314
   1fd28:	0002a33c 	.word	0x0002a33c
   1fd2c:	0002a354 	.word	0x0002a354

0001fd30 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1fd30:	b508      	push	{r3, lr}
   1fd32:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1fd34:	4801      	ldr	r0, [pc, #4]	; (1fd3c <k_work_reschedule+0xc>)
   1fd36:	f7ff ff83 	bl	1fc40 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   1fd3a:	bd08      	pop	{r3, pc}
   1fd3c:	20001e20 	.word	0x20001e20

0001fd40 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1fd40:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   1fd42:	4604      	mov	r4, r0
   1fd44:	b1e8      	cbz	r0, 1fd82 <k_work_cancel_delayable+0x42>
	__asm__ volatile(
   1fd46:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd4a:	f3ef 8611 	mrs	r6, BASEPRI
   1fd4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fd56:	4822      	ldr	r0, [pc, #136]	; (1fde0 <k_work_cancel_delayable+0xa0>)
   1fd58:	f7fe fc8c 	bl	1e674 <z_spin_lock_valid>
   1fd5c:	b1f8      	cbz	r0, 1fd9e <k_work_cancel_delayable+0x5e>
	z_spin_lock_set_owner(l);
   1fd5e:	4d20      	ldr	r5, [pc, #128]	; (1fde0 <k_work_cancel_delayable+0xa0>)
   1fd60:	4628      	mov	r0, r5
   1fd62:	f7fe fca7 	bl	1e6b4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   1fd66:	4620      	mov	r0, r4
   1fd68:	f009 fd66 	bl	29838 <cancel_delayable_async_locked>
   1fd6c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd6e:	4628      	mov	r0, r5
   1fd70:	f7fe fc90 	bl	1e694 <z_spin_unlock_valid>
   1fd74:	b318      	cbz	r0, 1fdbe <k_work_cancel_delayable+0x7e>
	__asm__ volatile(
   1fd76:	f386 8811 	msr	BASEPRI, r6
   1fd7a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1fd7e:	4620      	mov	r0, r4
   1fd80:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   1fd82:	4d18      	ldr	r5, [pc, #96]	; (1fde4 <k_work_cancel_delayable+0xa4>)
   1fd84:	f240 33ea 	movw	r3, #1002	; 0x3ea
   1fd88:	462a      	mov	r2, r5
   1fd8a:	4917      	ldr	r1, [pc, #92]	; (1fde8 <k_work_cancel_delayable+0xa8>)
   1fd8c:	4817      	ldr	r0, [pc, #92]	; (1fdec <k_work_cancel_delayable+0xac>)
   1fd8e:	f005 fd4e 	bl	2582e <printk>
   1fd92:	f240 31ea 	movw	r1, #1002	; 0x3ea
   1fd96:	4628      	mov	r0, r5
   1fd98:	f005 ffcb 	bl	25d32 <assert_post_action>
   1fd9c:	e7d3      	b.n	1fd46 <k_work_cancel_delayable+0x6>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fd9e:	4d14      	ldr	r5, [pc, #80]	; (1fdf0 <k_work_cancel_delayable+0xb0>)
   1fda0:	2381      	movs	r3, #129	; 0x81
   1fda2:	462a      	mov	r2, r5
   1fda4:	4913      	ldr	r1, [pc, #76]	; (1fdf4 <k_work_cancel_delayable+0xb4>)
   1fda6:	4811      	ldr	r0, [pc, #68]	; (1fdec <k_work_cancel_delayable+0xac>)
   1fda8:	f005 fd41 	bl	2582e <printk>
   1fdac:	490c      	ldr	r1, [pc, #48]	; (1fde0 <k_work_cancel_delayable+0xa0>)
   1fdae:	4812      	ldr	r0, [pc, #72]	; (1fdf8 <k_work_cancel_delayable+0xb8>)
   1fdb0:	f005 fd3d 	bl	2582e <printk>
   1fdb4:	2181      	movs	r1, #129	; 0x81
   1fdb6:	4628      	mov	r0, r5
   1fdb8:	f005 ffbb 	bl	25d32 <assert_post_action>
   1fdbc:	e7cf      	b.n	1fd5e <k_work_cancel_delayable+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fdbe:	4d0c      	ldr	r5, [pc, #48]	; (1fdf0 <k_work_cancel_delayable+0xb0>)
   1fdc0:	23ac      	movs	r3, #172	; 0xac
   1fdc2:	462a      	mov	r2, r5
   1fdc4:	490d      	ldr	r1, [pc, #52]	; (1fdfc <k_work_cancel_delayable+0xbc>)
   1fdc6:	4809      	ldr	r0, [pc, #36]	; (1fdec <k_work_cancel_delayable+0xac>)
   1fdc8:	f005 fd31 	bl	2582e <printk>
   1fdcc:	4904      	ldr	r1, [pc, #16]	; (1fde0 <k_work_cancel_delayable+0xa0>)
   1fdce:	480c      	ldr	r0, [pc, #48]	; (1fe00 <k_work_cancel_delayable+0xc0>)
   1fdd0:	f005 fd2d 	bl	2582e <printk>
   1fdd4:	21ac      	movs	r1, #172	; 0xac
   1fdd6:	4628      	mov	r0, r5
   1fdd8:	f005 ffab 	bl	25d32 <assert_post_action>
   1fddc:	e7cb      	b.n	1fd76 <k_work_cancel_delayable+0x36>
   1fdde:	bf00      	nop
   1fde0:	20002d50 	.word	0x20002d50
   1fde4:	0002d6f8 	.word	0x0002d6f8
   1fde8:	0002d7ec 	.word	0x0002d7ec
   1fdec:	00029ff8 	.word	0x00029ff8
   1fdf0:	0002a314 	.word	0x0002a314
   1fdf4:	0002a36c 	.word	0x0002a36c
   1fdf8:	0002a384 	.word	0x0002a384
   1fdfc:	0002a33c 	.word	0x0002a33c
   1fe00:	0002a354 	.word	0x0002a354

0001fe04 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1fe04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe08:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1fe0a:	4605      	mov	r5, r0
   1fe0c:	2800      	cmp	r0, #0
   1fe0e:	d02c      	beq.n	1fe6a <k_work_cancel_delayable_sync+0x66>
	__ASSERT_NO_MSG(sync != NULL);
   1fe10:	2c00      	cmp	r4, #0
   1fe12:	d038      	beq.n	1fe86 <k_work_cancel_delayable_sync+0x82>
	__ASSERT_NO_MSG(!k_is_in_isr());
   1fe14:	f009 fc46 	bl	296a4 <k_is_in_isr>
   1fe18:	2800      	cmp	r0, #0
   1fe1a:	d142      	bne.n	1fea2 <k_work_cancel_delayable_sync+0x9e>
	__asm__ volatile(
   1fe1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe20:	f3ef 8711 	mrs	r7, BASEPRI
   1fe24:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fe2c:	483d      	ldr	r0, [pc, #244]	; (1ff24 <k_work_cancel_delayable_sync+0x120>)
   1fe2e:	f7fe fc21 	bl	1e674 <z_spin_lock_valid>
   1fe32:	2800      	cmp	r0, #0
   1fe34:	d043      	beq.n	1febe <k_work_cancel_delayable_sync+0xba>
	z_spin_lock_set_owner(l);
   1fe36:	483b      	ldr	r0, [pc, #236]	; (1ff24 <k_work_cancel_delayable_sync+0x120>)
   1fe38:	f7fe fc3c 	bl	1e6b4 <z_spin_lock_set_owner>
	return *flagp;
   1fe3c:	68eb      	ldr	r3, [r5, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   1fe3e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1fe42:	2b00      	cmp	r3, #0
   1fe44:	bf14      	ite	ne
   1fe46:	2601      	movne	r6, #1
   1fe48:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1fe4a:	d148      	bne.n	1fede <k_work_cancel_delayable_sync+0xda>
	bool need_wait = false;
   1fe4c:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fe4e:	4835      	ldr	r0, [pc, #212]	; (1ff24 <k_work_cancel_delayable_sync+0x120>)
   1fe50:	f7fe fc20 	bl	1e694 <z_spin_unlock_valid>
   1fe54:	2800      	cmp	r0, #0
   1fe56:	d04b      	beq.n	1fef0 <k_work_cancel_delayable_sync+0xec>
	__asm__ volatile(
   1fe58:	f387 8811 	msr	BASEPRI, r7
   1fe5c:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1fe60:	2d00      	cmp	r5, #0
   1fe62:	d156      	bne.n	1ff12 <k_work_cancel_delayable_sync+0x10e>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1fe64:	4630      	mov	r0, r6
   1fe66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   1fe6a:	4e2f      	ldr	r6, [pc, #188]	; (1ff28 <k_work_cancel_delayable_sync+0x124>)
   1fe6c:	f240 33fb 	movw	r3, #1019	; 0x3fb
   1fe70:	4632      	mov	r2, r6
   1fe72:	492e      	ldr	r1, [pc, #184]	; (1ff2c <k_work_cancel_delayable_sync+0x128>)
   1fe74:	482e      	ldr	r0, [pc, #184]	; (1ff30 <k_work_cancel_delayable_sync+0x12c>)
   1fe76:	f005 fcda 	bl	2582e <printk>
   1fe7a:	f240 31fb 	movw	r1, #1019	; 0x3fb
   1fe7e:	4630      	mov	r0, r6
   1fe80:	f005 ff57 	bl	25d32 <assert_post_action>
   1fe84:	e7c4      	b.n	1fe10 <k_work_cancel_delayable_sync+0xc>
	__ASSERT_NO_MSG(sync != NULL);
   1fe86:	4e28      	ldr	r6, [pc, #160]	; (1ff28 <k_work_cancel_delayable_sync+0x124>)
   1fe88:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
   1fe8c:	4632      	mov	r2, r6
   1fe8e:	4929      	ldr	r1, [pc, #164]	; (1ff34 <k_work_cancel_delayable_sync+0x130>)
   1fe90:	4827      	ldr	r0, [pc, #156]	; (1ff30 <k_work_cancel_delayable_sync+0x12c>)
   1fe92:	f005 fccc 	bl	2582e <printk>
   1fe96:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   1fe9a:	4630      	mov	r0, r6
   1fe9c:	f005 ff49 	bl	25d32 <assert_post_action>
   1fea0:	e7b8      	b.n	1fe14 <k_work_cancel_delayable_sync+0x10>
	__ASSERT_NO_MSG(!k_is_in_isr());
   1fea2:	4e21      	ldr	r6, [pc, #132]	; (1ff28 <k_work_cancel_delayable_sync+0x124>)
   1fea4:	f240 33fd 	movw	r3, #1021	; 0x3fd
   1fea8:	4632      	mov	r2, r6
   1feaa:	4923      	ldr	r1, [pc, #140]	; (1ff38 <k_work_cancel_delayable_sync+0x134>)
   1feac:	4820      	ldr	r0, [pc, #128]	; (1ff30 <k_work_cancel_delayable_sync+0x12c>)
   1feae:	f005 fcbe 	bl	2582e <printk>
   1feb2:	f240 31fd 	movw	r1, #1021	; 0x3fd
   1feb6:	4630      	mov	r0, r6
   1feb8:	f005 ff3b 	bl	25d32 <assert_post_action>
   1febc:	e7ae      	b.n	1fe1c <k_work_cancel_delayable_sync+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1febe:	4e1f      	ldr	r6, [pc, #124]	; (1ff3c <k_work_cancel_delayable_sync+0x138>)
   1fec0:	2381      	movs	r3, #129	; 0x81
   1fec2:	4632      	mov	r2, r6
   1fec4:	491e      	ldr	r1, [pc, #120]	; (1ff40 <k_work_cancel_delayable_sync+0x13c>)
   1fec6:	481a      	ldr	r0, [pc, #104]	; (1ff30 <k_work_cancel_delayable_sync+0x12c>)
   1fec8:	f005 fcb1 	bl	2582e <printk>
   1fecc:	4915      	ldr	r1, [pc, #84]	; (1ff24 <k_work_cancel_delayable_sync+0x120>)
   1fece:	481d      	ldr	r0, [pc, #116]	; (1ff44 <k_work_cancel_delayable_sync+0x140>)
   1fed0:	f005 fcad 	bl	2582e <printk>
   1fed4:	2181      	movs	r1, #129	; 0x81
   1fed6:	4630      	mov	r0, r6
   1fed8:	f005 ff2b 	bl	25d32 <assert_post_action>
   1fedc:	e7ab      	b.n	1fe36 <k_work_cancel_delayable_sync+0x32>
		(void)cancel_delayable_async_locked(dwork);
   1fede:	4628      	mov	r0, r5
   1fee0:	f009 fcaa 	bl	29838 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1fee4:	4621      	mov	r1, r4
   1fee6:	4628      	mov	r0, r5
   1fee8:	f7ff fba0 	bl	1f62c <cancel_sync_locked>
   1feec:	4605      	mov	r5, r0
   1feee:	e7ae      	b.n	1fe4e <k_work_cancel_delayable_sync+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fef0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1ff3c <k_work_cancel_delayable_sync+0x138>
   1fef4:	23ac      	movs	r3, #172	; 0xac
   1fef6:	4642      	mov	r2, r8
   1fef8:	4913      	ldr	r1, [pc, #76]	; (1ff48 <k_work_cancel_delayable_sync+0x144>)
   1fefa:	480d      	ldr	r0, [pc, #52]	; (1ff30 <k_work_cancel_delayable_sync+0x12c>)
   1fefc:	f005 fc97 	bl	2582e <printk>
   1ff00:	4908      	ldr	r1, [pc, #32]	; (1ff24 <k_work_cancel_delayable_sync+0x120>)
   1ff02:	4812      	ldr	r0, [pc, #72]	; (1ff4c <k_work_cancel_delayable_sync+0x148>)
   1ff04:	f005 fc93 	bl	2582e <printk>
   1ff08:	21ac      	movs	r1, #172	; 0xac
   1ff0a:	4640      	mov	r0, r8
   1ff0c:	f005 ff11 	bl	25d32 <assert_post_action>
   1ff10:	e7a2      	b.n	1fe58 <k_work_cancel_delayable_sync+0x54>
		k_sem_take(&canceller->sem, K_FOREVER);
   1ff12:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
   1ff16:	f04f 32ff 	mov.w	r2, #4294967295
   1ff1a:	f04f 33ff 	mov.w	r3, #4294967295
   1ff1e:	f7ff f9b7 	bl	1f290 <z_impl_k_sem_take>
   1ff22:	e79f      	b.n	1fe64 <k_work_cancel_delayable_sync+0x60>
   1ff24:	20002d50 	.word	0x20002d50
   1ff28:	0002d6f8 	.word	0x0002d6f8
   1ff2c:	0002d7ec 	.word	0x0002d7ec
   1ff30:	00029ff8 	.word	0x00029ff8
   1ff34:	0002d794 	.word	0x0002d794
   1ff38:	0002bf0c 	.word	0x0002bf0c
   1ff3c:	0002a314 	.word	0x0002a314
   1ff40:	0002a36c 	.word	0x0002a36c
   1ff44:	0002a384 	.word	0x0002a384
   1ff48:	0002a33c 	.word	0x0002a33c
   1ff4c:	0002a354 	.word	0x0002a354

0001ff50 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
   1ff50:	b538      	push	{r3, r4, r5, lr}
   1ff52:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1ff54:	6883      	ldr	r3, [r0, #8]
   1ff56:	b10b      	cbz	r3, 1ff5c <pended_on_thread+0xc>

	return thread->base.pended_on;
}
   1ff58:	68a0      	ldr	r0, [r4, #8]
   1ff5a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
   1ff5c:	4d06      	ldr	r5, [pc, #24]	; (1ff78 <pended_on_thread+0x28>)
   1ff5e:	f240 2383 	movw	r3, #643	; 0x283
   1ff62:	462a      	mov	r2, r5
   1ff64:	4905      	ldr	r1, [pc, #20]	; (1ff7c <pended_on_thread+0x2c>)
   1ff66:	4806      	ldr	r0, [pc, #24]	; (1ff80 <pended_on_thread+0x30>)
   1ff68:	f005 fc61 	bl	2582e <printk>
   1ff6c:	f240 2183 	movw	r1, #643	; 0x283
   1ff70:	4628      	mov	r0, r5
   1ff72:	f005 fede 	bl	25d32 <assert_post_action>
   1ff76:	e7ef      	b.n	1ff58 <pended_on_thread+0x8>
   1ff78:	0002d804 	.word	0x0002d804
   1ff7c:	0002d828 	.word	0x0002d828
   1ff80:	00029ff8 	.word	0x00029ff8

0001ff84 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1ff84:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ff86:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ff8a:	bf08      	it	eq
   1ff8c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1ff90:	d100      	bne.n	1ff94 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1ff92:	bd38      	pop	{r3, r4, r5, pc}
   1ff94:	4902      	ldr	r1, [pc, #8]	; (1ffa0 <add_thread_timeout+0x1c>)
   1ff96:	3018      	adds	r0, #24
   1ff98:	f001 fc0a 	bl	217b0 <z_add_timeout>
   1ff9c:	e7f9      	b.n	1ff92 <add_thread_timeout+0xe>
   1ff9e:	bf00      	nop
   1ffa0:	00020889 	.word	0x00020889

0001ffa4 <z_reset_time_slice>:
{
   1ffa4:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1ffa6:	4b08      	ldr	r3, [pc, #32]	; (1ffc8 <z_reset_time_slice+0x24>)
   1ffa8:	681b      	ldr	r3, [r3, #0]
   1ffaa:	b903      	cbnz	r3, 1ffae <z_reset_time_slice+0xa>
}
   1ffac:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1ffae:	f7fc f907 	bl	1c1c0 <sys_clock_elapsed>
   1ffb2:	4603      	mov	r3, r0
   1ffb4:	4a04      	ldr	r2, [pc, #16]	; (1ffc8 <z_reset_time_slice+0x24>)
   1ffb6:	6810      	ldr	r0, [r2, #0]
   1ffb8:	4403      	add	r3, r0
   1ffba:	4a04      	ldr	r2, [pc, #16]	; (1ffcc <z_reset_time_slice+0x28>)
   1ffbc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1ffbe:	2100      	movs	r1, #0
   1ffc0:	f001 fd9e 	bl	21b00 <z_set_timeout_expiry>
}
   1ffc4:	e7f2      	b.n	1ffac <z_reset_time_slice+0x8>
   1ffc6:	bf00      	nop
   1ffc8:	20002d68 	.word	0x20002d68
   1ffcc:	20002d18 	.word	0x20002d18

0001ffd0 <k_sched_time_slice_set>:
{
   1ffd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffd4:	4606      	mov	r6, r0
   1ffd6:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   1ffd8:	2400      	movs	r4, #0
	__asm__ volatile(
   1ffda:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ffde:	f3ef 8711 	mrs	r7, BASEPRI
   1ffe2:	f383 8812 	msr	BASEPRI_MAX, r3
   1ffe6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ffea:	4829      	ldr	r0, [pc, #164]	; (20090 <k_sched_time_slice_set+0xc0>)
   1ffec:	f7fe fb42 	bl	1e674 <z_spin_lock_valid>
   1fff0:	b118      	cbz	r0, 1fffa <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
   1fff2:	4827      	ldr	r0, [pc, #156]	; (20090 <k_sched_time_slice_set+0xc0>)
   1fff4:	f7fe fb5e 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   1fff8:	e01d      	b.n	20036 <k_sched_time_slice_set+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fffa:	4d26      	ldr	r5, [pc, #152]	; (20094 <k_sched_time_slice_set+0xc4>)
   1fffc:	2381      	movs	r3, #129	; 0x81
   1fffe:	462a      	mov	r2, r5
   20000:	4925      	ldr	r1, [pc, #148]	; (20098 <k_sched_time_slice_set+0xc8>)
   20002:	4826      	ldr	r0, [pc, #152]	; (2009c <k_sched_time_slice_set+0xcc>)
   20004:	f005 fc13 	bl	2582e <printk>
   20008:	4921      	ldr	r1, [pc, #132]	; (20090 <k_sched_time_slice_set+0xc0>)
   2000a:	4825      	ldr	r0, [pc, #148]	; (200a0 <k_sched_time_slice_set+0xd0>)
   2000c:	f005 fc0f 	bl	2582e <printk>
   20010:	2181      	movs	r1, #129	; 0x81
   20012:	4628      	mov	r0, r5
   20014:	f005 fe8d 	bl	25d32 <assert_post_action>
   20018:	e7eb      	b.n	1fff2 <k_sched_time_slice_set+0x22>
		slice_max_prio = prio;
   2001a:	4b22      	ldr	r3, [pc, #136]	; (200a4 <k_sched_time_slice_set+0xd4>)
   2001c:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   20020:	f7ff ffc0 	bl	1ffa4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20024:	481a      	ldr	r0, [pc, #104]	; (20090 <k_sched_time_slice_set+0xc0>)
   20026:	f7fe fb35 	bl	1e694 <z_spin_unlock_valid>
   2002a:	b1f8      	cbz	r0, 2006c <k_sched_time_slice_set+0x9c>
	__asm__ volatile(
   2002c:	f387 8811 	msr	BASEPRI, r7
   20030:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   20034:	2401      	movs	r4, #1
   20036:	bb4c      	cbnz	r4, 2008c <k_sched_time_slice_set+0xbc>
		_current_cpu->slice_ticks = 0;
   20038:	2300      	movs	r3, #0
   2003a:	4a1b      	ldr	r2, [pc, #108]	; (200a8 <k_sched_time_slice_set+0xd8>)
   2003c:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   2003e:	0c75      	lsrs	r5, r6, #17
   20040:	03f4      	lsls	r4, r6, #15
   20042:	f240 30e7 	movw	r0, #999	; 0x3e7
   20046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2004a:	2300      	movs	r3, #0
   2004c:	1820      	adds	r0, r4, r0
   2004e:	f04f 0100 	mov.w	r1, #0
   20052:	eb45 0101 	adc.w	r1, r5, r1
   20056:	f7e0 f853 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2005a:	4b14      	ldr	r3, [pc, #80]	; (200ac <k_sched_time_slice_set+0xdc>)
   2005c:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2005e:	2e00      	cmp	r6, #0
   20060:	dddb      	ble.n	2001a <k_sched_time_slice_set+0x4a>
			slice_time = MAX(2, slice_time);
   20062:	2802      	cmp	r0, #2
   20064:	bfb8      	it	lt
   20066:	2002      	movlt	r0, #2
   20068:	6018      	str	r0, [r3, #0]
   2006a:	e7d6      	b.n	2001a <k_sched_time_slice_set+0x4a>
   2006c:	4c09      	ldr	r4, [pc, #36]	; (20094 <k_sched_time_slice_set+0xc4>)
   2006e:	23ac      	movs	r3, #172	; 0xac
   20070:	4622      	mov	r2, r4
   20072:	490f      	ldr	r1, [pc, #60]	; (200b0 <k_sched_time_slice_set+0xe0>)
   20074:	4809      	ldr	r0, [pc, #36]	; (2009c <k_sched_time_slice_set+0xcc>)
   20076:	f005 fbda 	bl	2582e <printk>
   2007a:	4905      	ldr	r1, [pc, #20]	; (20090 <k_sched_time_slice_set+0xc0>)
   2007c:	480d      	ldr	r0, [pc, #52]	; (200b4 <k_sched_time_slice_set+0xe4>)
   2007e:	f005 fbd6 	bl	2582e <printk>
   20082:	21ac      	movs	r1, #172	; 0xac
   20084:	4620      	mov	r0, r4
   20086:	f005 fe54 	bl	25d32 <assert_post_action>
   2008a:	e7cf      	b.n	2002c <k_sched_time_slice_set+0x5c>
}
   2008c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20090:	20002d60 	.word	0x20002d60
   20094:	0002a314 	.word	0x0002a314
   20098:	0002a36c 	.word	0x0002a36c
   2009c:	00029ff8 	.word	0x00029ff8
   200a0:	0002a384 	.word	0x0002a384
   200a4:	20002d64 	.word	0x20002d64
   200a8:	20002d18 	.word	0x20002d18
   200ac:	20002d68 	.word	0x20002d68
   200b0:	0002a33c 	.word	0x0002a33c
   200b4:	0002a354 	.word	0x0002a354

000200b8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   200b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200ba:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   200bc:	2500      	movs	r5, #0
	__asm__ volatile(
   200be:	f04f 0340 	mov.w	r3, #64	; 0x40
   200c2:	f3ef 8611 	mrs	r6, BASEPRI
   200c6:	f383 8812 	msr	BASEPRI_MAX, r3
   200ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   200ce:	4820      	ldr	r0, [pc, #128]	; (20150 <z_unpend_thread_no_timeout+0x98>)
   200d0:	f7fe fad0 	bl	1e674 <z_spin_lock_valid>
   200d4:	b118      	cbz	r0, 200de <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
   200d6:	481e      	ldr	r0, [pc, #120]	; (20150 <z_unpend_thread_no_timeout+0x98>)
   200d8:	f7fe faec 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   200dc:	e023      	b.n	20126 <z_unpend_thread_no_timeout+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   200de:	4f1d      	ldr	r7, [pc, #116]	; (20154 <z_unpend_thread_no_timeout+0x9c>)
   200e0:	2381      	movs	r3, #129	; 0x81
   200e2:	463a      	mov	r2, r7
   200e4:	491c      	ldr	r1, [pc, #112]	; (20158 <z_unpend_thread_no_timeout+0xa0>)
   200e6:	481d      	ldr	r0, [pc, #116]	; (2015c <z_unpend_thread_no_timeout+0xa4>)
   200e8:	f005 fba1 	bl	2582e <printk>
   200ec:	4918      	ldr	r1, [pc, #96]	; (20150 <z_unpend_thread_no_timeout+0x98>)
   200ee:	481c      	ldr	r0, [pc, #112]	; (20160 <z_unpend_thread_no_timeout+0xa8>)
   200f0:	f005 fb9d 	bl	2582e <printk>
   200f4:	2181      	movs	r1, #129	; 0x81
   200f6:	4638      	mov	r0, r7
   200f8:	f005 fe1b 	bl	25d32 <assert_post_action>
   200fc:	e7eb      	b.n	200d6 <z_unpend_thread_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   200fe:	4d15      	ldr	r5, [pc, #84]	; (20154 <z_unpend_thread_no_timeout+0x9c>)
   20100:	23ac      	movs	r3, #172	; 0xac
   20102:	462a      	mov	r2, r5
   20104:	4917      	ldr	r1, [pc, #92]	; (20164 <z_unpend_thread_no_timeout+0xac>)
   20106:	4815      	ldr	r0, [pc, #84]	; (2015c <z_unpend_thread_no_timeout+0xa4>)
   20108:	f005 fb91 	bl	2582e <printk>
   2010c:	4910      	ldr	r1, [pc, #64]	; (20150 <z_unpend_thread_no_timeout+0x98>)
   2010e:	4816      	ldr	r0, [pc, #88]	; (20168 <z_unpend_thread_no_timeout+0xb0>)
   20110:	f005 fb8d 	bl	2582e <printk>
   20114:	21ac      	movs	r1, #172	; 0xac
   20116:	4628      	mov	r0, r5
   20118:	f005 fe0b 	bl	25d32 <assert_post_action>
	__asm__ volatile(
   2011c:	f386 8811 	msr	BASEPRI, r6
   20120:	f3bf 8f6f 	isb	sy
   20124:	2501      	movs	r5, #1
   20126:	b98d      	cbnz	r5, 2014c <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   20128:	4620      	mov	r0, r4
   2012a:	f7ff ff11 	bl	1ff50 <pended_on_thread>
   2012e:	4621      	mov	r1, r4
   20130:	f000 f8ec 	bl	2030c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20134:	7b63      	ldrb	r3, [r4, #13]
   20136:	f023 0302 	bic.w	r3, r3, #2
   2013a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2013c:	2300      	movs	r3, #0
   2013e:	60a3      	str	r3, [r4, #8]
   20140:	4803      	ldr	r0, [pc, #12]	; (20150 <z_unpend_thread_no_timeout+0x98>)
   20142:	f7fe faa7 	bl	1e694 <z_spin_unlock_valid>
   20146:	2800      	cmp	r0, #0
   20148:	d1e8      	bne.n	2011c <z_unpend_thread_no_timeout+0x64>
   2014a:	e7d8      	b.n	200fe <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
   2014c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2014e:	bf00      	nop
   20150:	20002d60 	.word	0x20002d60
   20154:	0002a314 	.word	0x0002a314
   20158:	0002a36c 	.word	0x0002a36c
   2015c:	00029ff8 	.word	0x00029ff8
   20160:	0002a384 	.word	0x0002a384
   20164:	0002a33c 	.word	0x0002a33c
   20168:	0002a354 	.word	0x0002a354

0002016c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2016c:	b570      	push	{r4, r5, r6, lr}
   2016e:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
   20170:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20172:	b921      	cbnz	r1, 2017e <z_reschedule+0x12>
   20174:	f3ef 8305 	mrs	r3, IPSR
   20178:	b913      	cbnz	r3, 20180 <z_reschedule+0x14>
   2017a:	2101      	movs	r1, #1
   2017c:	e000      	b.n	20180 <z_reschedule+0x14>
   2017e:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   20180:	f011 0f01 	tst.w	r1, #1
   20184:	d01c      	beq.n	201c0 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
   20186:	4b1b      	ldr	r3, [pc, #108]	; (201f4 <z_reschedule+0x88>)
   20188:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   2018a:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   2018c:	429a      	cmp	r2, r3
   2018e:	d017      	beq.n	201c0 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20190:	4620      	mov	r0, r4
   20192:	f7fe fa7f 	bl	1e694 <z_spin_unlock_valid>
   20196:	b118      	cbz	r0, 201a0 <z_reschedule+0x34>
	ret = arch_swap(key);
   20198:	4628      	mov	r0, r5
   2019a:	f7f3 f8d1 	bl	13340 <arch_swap>
		z_swap(lock, key);
   2019e:	e017      	b.n	201d0 <z_reschedule+0x64>
   201a0:	4e15      	ldr	r6, [pc, #84]	; (201f8 <z_reschedule+0x8c>)
   201a2:	23c3      	movs	r3, #195	; 0xc3
   201a4:	4632      	mov	r2, r6
   201a6:	4915      	ldr	r1, [pc, #84]	; (201fc <z_reschedule+0x90>)
   201a8:	4815      	ldr	r0, [pc, #84]	; (20200 <z_reschedule+0x94>)
   201aa:	f005 fb40 	bl	2582e <printk>
   201ae:	4621      	mov	r1, r4
   201b0:	4814      	ldr	r0, [pc, #80]	; (20204 <z_reschedule+0x98>)
   201b2:	f005 fb3c 	bl	2582e <printk>
   201b6:	21c3      	movs	r1, #195	; 0xc3
   201b8:	4630      	mov	r0, r6
   201ba:	f005 fdba 	bl	25d32 <assert_post_action>
   201be:	e7eb      	b.n	20198 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   201c0:	4620      	mov	r0, r4
   201c2:	f7fe fa67 	bl	1e694 <z_spin_unlock_valid>
   201c6:	b120      	cbz	r0, 201d2 <z_reschedule+0x66>
   201c8:	f385 8811 	msr	BASEPRI, r5
   201cc:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   201d0:	bd70      	pop	{r4, r5, r6, pc}
   201d2:	4e09      	ldr	r6, [pc, #36]	; (201f8 <z_reschedule+0x8c>)
   201d4:	23ac      	movs	r3, #172	; 0xac
   201d6:	4632      	mov	r2, r6
   201d8:	4908      	ldr	r1, [pc, #32]	; (201fc <z_reschedule+0x90>)
   201da:	4809      	ldr	r0, [pc, #36]	; (20200 <z_reschedule+0x94>)
   201dc:	f005 fb27 	bl	2582e <printk>
   201e0:	4621      	mov	r1, r4
   201e2:	4808      	ldr	r0, [pc, #32]	; (20204 <z_reschedule+0x98>)
   201e4:	f005 fb23 	bl	2582e <printk>
   201e8:	21ac      	movs	r1, #172	; 0xac
   201ea:	4630      	mov	r0, r6
   201ec:	f005 fda1 	bl	25d32 <assert_post_action>
   201f0:	e7ea      	b.n	201c8 <z_reschedule+0x5c>
   201f2:	bf00      	nop
   201f4:	20002d18 	.word	0x20002d18
   201f8:	0002a314 	.word	0x0002a314
   201fc:	0002a33c 	.word	0x0002a33c
   20200:	00029ff8 	.word	0x00029ff8
   20204:	0002a354 	.word	0x0002a354

00020208 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   20208:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
   2020a:	2400      	movs	r4, #0
	__asm__ volatile(
   2020c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20210:	f3ef 8511 	mrs	r5, BASEPRI
   20214:	f383 8812 	msr	BASEPRI_MAX, r3
   20218:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2021c:	482f      	ldr	r0, [pc, #188]	; (202dc <k_sched_lock+0xd4>)
   2021e:	f7fe fa29 	bl	1e674 <z_spin_lock_valid>
   20222:	b118      	cbz	r0, 2022c <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
   20224:	482d      	ldr	r0, [pc, #180]	; (202dc <k_sched_lock+0xd4>)
   20226:	f7fe fa45 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   2022a:	e041      	b.n	202b0 <k_sched_lock+0xa8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2022c:	4e2c      	ldr	r6, [pc, #176]	; (202e0 <k_sched_lock+0xd8>)
   2022e:	2381      	movs	r3, #129	; 0x81
   20230:	4632      	mov	r2, r6
   20232:	492c      	ldr	r1, [pc, #176]	; (202e4 <k_sched_lock+0xdc>)
   20234:	482c      	ldr	r0, [pc, #176]	; (202e8 <k_sched_lock+0xe0>)
   20236:	f005 fafa 	bl	2582e <printk>
   2023a:	4928      	ldr	r1, [pc, #160]	; (202dc <k_sched_lock+0xd4>)
   2023c:	482b      	ldr	r0, [pc, #172]	; (202ec <k_sched_lock+0xe4>)
   2023e:	f005 faf6 	bl	2582e <printk>
   20242:	2181      	movs	r1, #129	; 0x81
   20244:	4630      	mov	r0, r6
   20246:	f005 fd74 	bl	25d32 <assert_post_action>
   2024a:	e7eb      	b.n	20224 <k_sched_lock+0x1c>
	__ASSERT(!arch_is_in_isr(), "");
   2024c:	4c28      	ldr	r4, [pc, #160]	; (202f0 <k_sched_lock+0xe8>)
   2024e:	23fd      	movs	r3, #253	; 0xfd
   20250:	4622      	mov	r2, r4
   20252:	4928      	ldr	r1, [pc, #160]	; (202f4 <k_sched_lock+0xec>)
   20254:	4824      	ldr	r0, [pc, #144]	; (202e8 <k_sched_lock+0xe0>)
   20256:	f005 faea 	bl	2582e <printk>
   2025a:	4827      	ldr	r0, [pc, #156]	; (202f8 <k_sched_lock+0xf0>)
   2025c:	f005 fae7 	bl	2582e <printk>
   20260:	21fd      	movs	r1, #253	; 0xfd
   20262:	4620      	mov	r0, r4
   20264:	f005 fd65 	bl	25d32 <assert_post_action>
   20268:	e027      	b.n	202ba <k_sched_lock+0xb2>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2026a:	4c21      	ldr	r4, [pc, #132]	; (202f0 <k_sched_lock+0xe8>)
   2026c:	23fe      	movs	r3, #254	; 0xfe
   2026e:	4622      	mov	r2, r4
   20270:	4922      	ldr	r1, [pc, #136]	; (202fc <k_sched_lock+0xf4>)
   20272:	481d      	ldr	r0, [pc, #116]	; (202e8 <k_sched_lock+0xe0>)
   20274:	f005 fadb 	bl	2582e <printk>
   20278:	481f      	ldr	r0, [pc, #124]	; (202f8 <k_sched_lock+0xf0>)
   2027a:	f005 fad8 	bl	2582e <printk>
   2027e:	21fe      	movs	r1, #254	; 0xfe
   20280:	4620      	mov	r0, r4
   20282:	f005 fd56 	bl	25d32 <assert_post_action>
   20286:	e01d      	b.n	202c4 <k_sched_lock+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20288:	4c15      	ldr	r4, [pc, #84]	; (202e0 <k_sched_lock+0xd8>)
   2028a:	23ac      	movs	r3, #172	; 0xac
   2028c:	4622      	mov	r2, r4
   2028e:	491c      	ldr	r1, [pc, #112]	; (20300 <k_sched_lock+0xf8>)
   20290:	4815      	ldr	r0, [pc, #84]	; (202e8 <k_sched_lock+0xe0>)
   20292:	f005 facc 	bl	2582e <printk>
   20296:	4911      	ldr	r1, [pc, #68]	; (202dc <k_sched_lock+0xd4>)
   20298:	481a      	ldr	r0, [pc, #104]	; (20304 <k_sched_lock+0xfc>)
   2029a:	f005 fac8 	bl	2582e <printk>
   2029e:	21ac      	movs	r1, #172	; 0xac
   202a0:	4620      	mov	r0, r4
   202a2:	f005 fd46 	bl	25d32 <assert_post_action>
	__asm__ volatile(
   202a6:	f385 8811 	msr	BASEPRI, r5
   202aa:	f3bf 8f6f 	isb	sy
   202ae:	2401      	movs	r4, #1
   202b0:	b99c      	cbnz	r4, 202da <k_sched_lock+0xd2>
   202b2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   202b6:	2b00      	cmp	r3, #0
   202b8:	d1c8      	bne.n	2024c <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
   202ba:	4b13      	ldr	r3, [pc, #76]	; (20308 <k_sched_lock+0x100>)
   202bc:	689b      	ldr	r3, [r3, #8]
   202be:	7bdb      	ldrb	r3, [r3, #15]
   202c0:	2b01      	cmp	r3, #1
   202c2:	d0d2      	beq.n	2026a <k_sched_lock+0x62>
	--_current->base.sched_locked;
   202c4:	4b10      	ldr	r3, [pc, #64]	; (20308 <k_sched_lock+0x100>)
   202c6:	689a      	ldr	r2, [r3, #8]
   202c8:	7bd3      	ldrb	r3, [r2, #15]
   202ca:	3b01      	subs	r3, #1
   202cc:	73d3      	strb	r3, [r2, #15]
   202ce:	4803      	ldr	r0, [pc, #12]	; (202dc <k_sched_lock+0xd4>)
   202d0:	f7fe f9e0 	bl	1e694 <z_spin_unlock_valid>
   202d4:	2800      	cmp	r0, #0
   202d6:	d1e6      	bne.n	202a6 <k_sched_lock+0x9e>
   202d8:	e7d6      	b.n	20288 <k_sched_lock+0x80>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   202da:	bd70      	pop	{r4, r5, r6, pc}
   202dc:	20002d60 	.word	0x20002d60
   202e0:	0002a314 	.word	0x0002a314
   202e4:	0002a36c 	.word	0x0002a36c
   202e8:	00029ff8 	.word	0x00029ff8
   202ec:	0002a384 	.word	0x0002a384
   202f0:	0002d61c 	.word	0x0002d61c
   202f4:	0002d500 	.word	0x0002d500
   202f8:	0002c900 	.word	0x0002c900
   202fc:	0002d648 	.word	0x0002d648
   20300:	0002a33c 	.word	0x0002a33c
   20304:	0002a354 	.word	0x0002a354
   20308:	20002d18 	.word	0x20002d18

0002030c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   2030c:	b538      	push	{r3, r4, r5, lr}
   2030e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20310:	4b0c      	ldr	r3, [pc, #48]	; (20344 <z_priq_dumb_remove+0x38>)
   20312:	4299      	cmp	r1, r3
   20314:	d007      	beq.n	20326 <z_priq_dumb_remove+0x1a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   20316:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   20318:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
   2031a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2031c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2031e:	2300      	movs	r3, #0
   20320:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   20322:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   20324:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20326:	4d08      	ldr	r5, [pc, #32]	; (20348 <z_priq_dumb_remove+0x3c>)
   20328:	f240 33e7 	movw	r3, #999	; 0x3e7
   2032c:	462a      	mov	r2, r5
   2032e:	4907      	ldr	r1, [pc, #28]	; (2034c <z_priq_dumb_remove+0x40>)
   20330:	4807      	ldr	r0, [pc, #28]	; (20350 <z_priq_dumb_remove+0x44>)
   20332:	f005 fa7c 	bl	2582e <printk>
   20336:	f240 31e7 	movw	r1, #999	; 0x3e7
   2033a:	4628      	mov	r0, r5
   2033c:	f005 fcf9 	bl	25d32 <assert_post_action>
   20340:	e7e9      	b.n	20316 <z_priq_dumb_remove+0xa>
   20342:	bf00      	nop
   20344:	20001cb0 	.word	0x20001cb0
   20348:	0002d804 	.word	0x0002d804
   2034c:	0002d840 	.word	0x0002d840
   20350:	00029ff8 	.word	0x00029ff8

00020354 <z_unpend_thread>:
{
   20354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20356:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   20358:	2500      	movs	r5, #0
	__asm__ volatile(
   2035a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2035e:	f3ef 8611 	mrs	r6, BASEPRI
   20362:	f383 8812 	msr	BASEPRI_MAX, r3
   20366:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2036a:	4822      	ldr	r0, [pc, #136]	; (203f4 <z_unpend_thread+0xa0>)
   2036c:	f7fe f982 	bl	1e674 <z_spin_lock_valid>
   20370:	b118      	cbz	r0, 2037a <z_unpend_thread+0x26>
	z_spin_lock_set_owner(l);
   20372:	4820      	ldr	r0, [pc, #128]	; (203f4 <z_unpend_thread+0xa0>)
   20374:	f7fe f99e 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   20378:	e023      	b.n	203c2 <z_unpend_thread+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2037a:	4f1f      	ldr	r7, [pc, #124]	; (203f8 <z_unpend_thread+0xa4>)
   2037c:	2381      	movs	r3, #129	; 0x81
   2037e:	463a      	mov	r2, r7
   20380:	491e      	ldr	r1, [pc, #120]	; (203fc <z_unpend_thread+0xa8>)
   20382:	481f      	ldr	r0, [pc, #124]	; (20400 <z_unpend_thread+0xac>)
   20384:	f005 fa53 	bl	2582e <printk>
   20388:	491a      	ldr	r1, [pc, #104]	; (203f4 <z_unpend_thread+0xa0>)
   2038a:	481e      	ldr	r0, [pc, #120]	; (20404 <z_unpend_thread+0xb0>)
   2038c:	f005 fa4f 	bl	2582e <printk>
   20390:	2181      	movs	r1, #129	; 0x81
   20392:	4638      	mov	r0, r7
   20394:	f005 fccd 	bl	25d32 <assert_post_action>
   20398:	e7eb      	b.n	20372 <z_unpend_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2039a:	4d17      	ldr	r5, [pc, #92]	; (203f8 <z_unpend_thread+0xa4>)
   2039c:	23ac      	movs	r3, #172	; 0xac
   2039e:	462a      	mov	r2, r5
   203a0:	4919      	ldr	r1, [pc, #100]	; (20408 <z_unpend_thread+0xb4>)
   203a2:	4817      	ldr	r0, [pc, #92]	; (20400 <z_unpend_thread+0xac>)
   203a4:	f005 fa43 	bl	2582e <printk>
   203a8:	4912      	ldr	r1, [pc, #72]	; (203f4 <z_unpend_thread+0xa0>)
   203aa:	4818      	ldr	r0, [pc, #96]	; (2040c <z_unpend_thread+0xb8>)
   203ac:	f005 fa3f 	bl	2582e <printk>
   203b0:	21ac      	movs	r1, #172	; 0xac
   203b2:	4628      	mov	r0, r5
   203b4:	f005 fcbd 	bl	25d32 <assert_post_action>
	__asm__ volatile(
   203b8:	f386 8811 	msr	BASEPRI, r6
   203bc:	f3bf 8f6f 	isb	sy
   203c0:	2501      	movs	r5, #1
   203c2:	b98d      	cbnz	r5, 203e8 <z_unpend_thread+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   203c4:	4620      	mov	r0, r4
   203c6:	f7ff fdc3 	bl	1ff50 <pended_on_thread>
   203ca:	4621      	mov	r1, r4
   203cc:	f7ff ff9e 	bl	2030c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   203d0:	7b63      	ldrb	r3, [r4, #13]
   203d2:	f023 0302 	bic.w	r3, r3, #2
   203d6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   203d8:	2300      	movs	r3, #0
   203da:	60a3      	str	r3, [r4, #8]
   203dc:	4805      	ldr	r0, [pc, #20]	; (203f4 <z_unpend_thread+0xa0>)
   203de:	f7fe f959 	bl	1e694 <z_spin_unlock_valid>
   203e2:	2800      	cmp	r0, #0
   203e4:	d1e8      	bne.n	203b8 <z_unpend_thread+0x64>
   203e6:	e7d8      	b.n	2039a <z_unpend_thread+0x46>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   203e8:	f104 0018 	add.w	r0, r4, #24
   203ec:	f001 fadc 	bl	219a8 <z_abort_timeout>
}
   203f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   203f2:	bf00      	nop
   203f4:	20002d60 	.word	0x20002d60
   203f8:	0002a314 	.word	0x0002a314
   203fc:	0002a36c 	.word	0x0002a36c
   20400:	00029ff8 	.word	0x00029ff8
   20404:	0002a384 	.word	0x0002a384
   20408:	0002a33c 	.word	0x0002a33c
   2040c:	0002a354 	.word	0x0002a354

00020410 <update_cache>:
{
   20410:	b538      	push	{r3, r4, r5, lr}
   20412:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   20414:	4818      	ldr	r0, [pc, #96]	; (20478 <update_cache+0x68>)
   20416:	f009 fa41 	bl	2989c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2041a:	4605      	mov	r5, r0
   2041c:	b188      	cbz	r0, 20442 <update_cache+0x32>
	if (preempt_ok != 0) {
   2041e:	bb14      	cbnz	r4, 20466 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
   20420:	4b16      	ldr	r3, [pc, #88]	; (2047c <update_cache+0x6c>)
   20422:	689b      	ldr	r3, [r3, #8]
   20424:	b183      	cbz	r3, 20448 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   20426:	4b15      	ldr	r3, [pc, #84]	; (2047c <update_cache+0x6c>)
   20428:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   2042a:	7b5a      	ldrb	r2, [r3, #13]
   2042c:	f012 0f1f 	tst.w	r2, #31
   20430:	d119      	bne.n	20466 <update_cache+0x56>
	return node->next != NULL;
   20432:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   20434:	b9ba      	cbnz	r2, 20466 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   20436:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   20438:	2a7f      	cmp	r2, #127	; 0x7f
   2043a:	d914      	bls.n	20466 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
   2043c:	4a0f      	ldr	r2, [pc, #60]	; (2047c <update_cache+0x6c>)
   2043e:	61d3      	str	r3, [r2, #28]
   20440:	e019      	b.n	20476 <update_cache+0x66>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   20442:	4b0e      	ldr	r3, [pc, #56]	; (2047c <update_cache+0x6c>)
   20444:	68dd      	ldr	r5, [r3, #12]
   20446:	e7ea      	b.n	2041e <update_cache+0xe>
	__ASSERT(_current != NULL, "");
   20448:	4c0d      	ldr	r4, [pc, #52]	; (20480 <update_cache+0x70>)
   2044a:	2389      	movs	r3, #137	; 0x89
   2044c:	4622      	mov	r2, r4
   2044e:	490d      	ldr	r1, [pc, #52]	; (20484 <update_cache+0x74>)
   20450:	480d      	ldr	r0, [pc, #52]	; (20488 <update_cache+0x78>)
   20452:	f005 f9ec 	bl	2582e <printk>
   20456:	480d      	ldr	r0, [pc, #52]	; (2048c <update_cache+0x7c>)
   20458:	f005 f9e9 	bl	2582e <printk>
   2045c:	2189      	movs	r1, #137	; 0x89
   2045e:	4620      	mov	r0, r4
   20460:	f005 fc67 	bl	25d32 <assert_post_action>
   20464:	e7df      	b.n	20426 <update_cache+0x16>
		if (thread != _current) {
   20466:	4b05      	ldr	r3, [pc, #20]	; (2047c <update_cache+0x6c>)
   20468:	689b      	ldr	r3, [r3, #8]
   2046a:	42ab      	cmp	r3, r5
   2046c:	d001      	beq.n	20472 <update_cache+0x62>
			z_reset_time_slice();
   2046e:	f7ff fd99 	bl	1ffa4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   20472:	4b02      	ldr	r3, [pc, #8]	; (2047c <update_cache+0x6c>)
   20474:	61dd      	str	r5, [r3, #28]
}
   20476:	bd38      	pop	{r3, r4, r5, pc}
   20478:	20002d38 	.word	0x20002d38
   2047c:	20002d18 	.word	0x20002d18
   20480:	0002d804 	.word	0x0002d804
   20484:	0002d864 	.word	0x0002d864
   20488:	00029ff8 	.word	0x00029ff8
   2048c:	0002c900 	.word	0x0002c900

00020490 <move_thread_to_end_of_prio_q>:
{
   20490:	b538      	push	{r3, r4, r5, lr}
   20492:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   20494:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   20496:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2049a:	2b00      	cmp	r3, #0
   2049c:	db2b      	blt.n	204f6 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
   2049e:	7b6b      	ldrb	r3, [r5, #13]
   204a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   204a4:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   204a6:	4b22      	ldr	r3, [pc, #136]	; (20530 <move_thread_to_end_of_prio_q+0xa0>)
   204a8:	429d      	cmp	r5, r3
   204aa:	d02c      	beq.n	20506 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
   204ac:	4b21      	ldr	r3, [pc, #132]	; (20534 <move_thread_to_end_of_prio_q+0xa4>)
   204ae:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   204b2:	429c      	cmp	r4, r3
   204b4:	d039      	beq.n	2052a <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   204b6:	b16c      	cbz	r4, 204d4 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
   204b8:	4621      	mov	r1, r4
   204ba:	4628      	mov	r0, r5
   204bc:	f009 f9cf 	bl	2985e <z_sched_prio_cmp>
   204c0:	2800      	cmp	r0, #0
   204c2:	dc2c      	bgt.n	2051e <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   204c4:	b134      	cbz	r4, 204d4 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
   204c6:	4b1b      	ldr	r3, [pc, #108]	; (20534 <move_thread_to_end_of_prio_q+0xa4>)
   204c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   204ca:	429c      	cmp	r4, r3
   204cc:	d002      	beq.n	204d4 <move_thread_to_end_of_prio_q+0x44>
   204ce:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   204d0:	2c00      	cmp	r4, #0
   204d2:	d1f0      	bne.n	204b6 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
   204d4:	4b17      	ldr	r3, [pc, #92]	; (20534 <move_thread_to_end_of_prio_q+0xa4>)
   204d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   204d8:	f103 0120 	add.w	r1, r3, #32
   204dc:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   204de:	606a      	str	r2, [r5, #4]
	tail->next = node;
   204e0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   204e2:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   204e4:	4b13      	ldr	r3, [pc, #76]	; (20534 <move_thread_to_end_of_prio_q+0xa4>)
   204e6:	6898      	ldr	r0, [r3, #8]
   204e8:	42a8      	cmp	r0, r5
   204ea:	bf14      	ite	ne
   204ec:	2000      	movne	r0, #0
   204ee:	2001      	moveq	r0, #1
   204f0:	f7ff ff8e 	bl	20410 <update_cache>
}
   204f4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   204f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   204fa:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   204fc:	4601      	mov	r1, r0
   204fe:	480e      	ldr	r0, [pc, #56]	; (20538 <move_thread_to_end_of_prio_q+0xa8>)
   20500:	f7ff ff04 	bl	2030c <z_priq_dumb_remove>
}
   20504:	e7cb      	b.n	2049e <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20506:	4c0d      	ldr	r4, [pc, #52]	; (2053c <move_thread_to_end_of_prio_q+0xac>)
   20508:	23ba      	movs	r3, #186	; 0xba
   2050a:	4622      	mov	r2, r4
   2050c:	490c      	ldr	r1, [pc, #48]	; (20540 <move_thread_to_end_of_prio_q+0xb0>)
   2050e:	480d      	ldr	r0, [pc, #52]	; (20544 <move_thread_to_end_of_prio_q+0xb4>)
   20510:	f005 f98d 	bl	2582e <printk>
   20514:	21ba      	movs	r1, #186	; 0xba
   20516:	4620      	mov	r0, r4
   20518:	f005 fc0b 	bl	25d32 <assert_post_action>
   2051c:	e7c6      	b.n	204ac <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
   2051e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   20520:	606b      	str	r3, [r5, #4]
	node->next = successor;
   20522:	602c      	str	r4, [r5, #0]
	prev->next = node;
   20524:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   20526:	6065      	str	r5, [r4, #4]
}
   20528:	e7dc      	b.n	204e4 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2052a:	2400      	movs	r4, #0
   2052c:	e7c3      	b.n	204b6 <move_thread_to_end_of_prio_q+0x26>
   2052e:	bf00      	nop
   20530:	20001cb0 	.word	0x20001cb0
   20534:	20002d18 	.word	0x20002d18
   20538:	20002d38 	.word	0x20002d38
   2053c:	0002d804 	.word	0x0002d804
   20540:	0002d840 	.word	0x0002d840
   20544:	00029ff8 	.word	0x00029ff8

00020548 <z_time_slice>:
{
   20548:	b570      	push	{r4, r5, r6, lr}
   2054a:	4604      	mov	r4, r0
	__asm__ volatile(
   2054c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20550:	f3ef 8511 	mrs	r5, BASEPRI
   20554:	f383 8812 	msr	BASEPRI_MAX, r3
   20558:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2055c:	483c      	ldr	r0, [pc, #240]	; (20650 <z_time_slice+0x108>)
   2055e:	f7fe f889 	bl	1e674 <z_spin_lock_valid>
   20562:	b338      	cbz	r0, 205b4 <z_time_slice+0x6c>
	z_spin_lock_set_owner(l);
   20564:	483a      	ldr	r0, [pc, #232]	; (20650 <z_time_slice+0x108>)
   20566:	f7fe f8a5 	bl	1e6b4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   2056a:	4b3a      	ldr	r3, [pc, #232]	; (20654 <z_time_slice+0x10c>)
   2056c:	689b      	ldr	r3, [r3, #8]
   2056e:	4a3a      	ldr	r2, [pc, #232]	; (20658 <z_time_slice+0x110>)
   20570:	6812      	ldr	r2, [r2, #0]
   20572:	4293      	cmp	r3, r2
   20574:	d02e      	beq.n	205d4 <z_time_slice+0x8c>
	pending_current = NULL;
   20576:	4a38      	ldr	r2, [pc, #224]	; (20658 <z_time_slice+0x110>)
   20578:	2100      	movs	r1, #0
   2057a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2057c:	4a37      	ldr	r2, [pc, #220]	; (2065c <z_time_slice+0x114>)
   2057e:	6812      	ldr	r2, [r2, #0]
   20580:	2a00      	cmp	r2, #0
   20582:	d048      	beq.n	20616 <z_time_slice+0xce>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   20584:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   20586:	2a7f      	cmp	r2, #127	; 0x7f
   20588:	d845      	bhi.n	20616 <z_time_slice+0xce>
	uint8_t state = thread->base.thread_state;
   2058a:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   2058c:	f012 0f1f 	tst.w	r2, #31
   20590:	d141      	bne.n	20616 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   20592:	f993 100e 	ldrsb.w	r1, [r3, #14]
   20596:	4a32      	ldr	r2, [pc, #200]	; (20660 <z_time_slice+0x118>)
   20598:	6812      	ldr	r2, [r2, #0]
   2059a:	4291      	cmp	r1, r2
   2059c:	db3b      	blt.n	20616 <z_time_slice+0xce>
		&& !z_is_idle_thread_object(thread);
   2059e:	4a31      	ldr	r2, [pc, #196]	; (20664 <z_time_slice+0x11c>)
   205a0:	4293      	cmp	r3, r2
   205a2:	d038      	beq.n	20616 <z_time_slice+0xce>
		if (ticks >= _current_cpu->slice_ticks) {
   205a4:	4a2b      	ldr	r2, [pc, #172]	; (20654 <z_time_slice+0x10c>)
   205a6:	6910      	ldr	r0, [r2, #16]
   205a8:	42a0      	cmp	r0, r4
   205aa:	dd2e      	ble.n	2060a <z_time_slice+0xc2>
			_current_cpu->slice_ticks -= ticks;
   205ac:	1b00      	subs	r0, r0, r4
   205ae:	4b29      	ldr	r3, [pc, #164]	; (20654 <z_time_slice+0x10c>)
   205b0:	6118      	str	r0, [r3, #16]
   205b2:	e033      	b.n	2061c <z_time_slice+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   205b4:	4e2c      	ldr	r6, [pc, #176]	; (20668 <z_time_slice+0x120>)
   205b6:	2381      	movs	r3, #129	; 0x81
   205b8:	4632      	mov	r2, r6
   205ba:	492c      	ldr	r1, [pc, #176]	; (2066c <z_time_slice+0x124>)
   205bc:	482c      	ldr	r0, [pc, #176]	; (20670 <z_time_slice+0x128>)
   205be:	f005 f936 	bl	2582e <printk>
   205c2:	4923      	ldr	r1, [pc, #140]	; (20650 <z_time_slice+0x108>)
   205c4:	482b      	ldr	r0, [pc, #172]	; (20674 <z_time_slice+0x12c>)
   205c6:	f005 f932 	bl	2582e <printk>
   205ca:	2181      	movs	r1, #129	; 0x81
   205cc:	4630      	mov	r0, r6
   205ce:	f005 fbb0 	bl	25d32 <assert_post_action>
   205d2:	e7c7      	b.n	20564 <z_time_slice+0x1c>
		z_reset_time_slice();
   205d4:	f7ff fce6 	bl	1ffa4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   205d8:	481d      	ldr	r0, [pc, #116]	; (20650 <z_time_slice+0x108>)
   205da:	f7fe f85b 	bl	1e694 <z_spin_unlock_valid>
   205de:	b120      	cbz	r0, 205ea <z_time_slice+0xa2>
	__asm__ volatile(
   205e0:	f385 8811 	msr	BASEPRI, r5
   205e4:	f3bf 8f6f 	isb	sy
		return;
   205e8:	e020      	b.n	2062c <z_time_slice+0xe4>
   205ea:	4c1f      	ldr	r4, [pc, #124]	; (20668 <z_time_slice+0x120>)
   205ec:	23ac      	movs	r3, #172	; 0xac
   205ee:	4622      	mov	r2, r4
   205f0:	4921      	ldr	r1, [pc, #132]	; (20678 <z_time_slice+0x130>)
   205f2:	481f      	ldr	r0, [pc, #124]	; (20670 <z_time_slice+0x128>)
   205f4:	f005 f91b 	bl	2582e <printk>
   205f8:	4915      	ldr	r1, [pc, #84]	; (20650 <z_time_slice+0x108>)
   205fa:	4820      	ldr	r0, [pc, #128]	; (2067c <z_time_slice+0x134>)
   205fc:	f005 f917 	bl	2582e <printk>
   20600:	21ac      	movs	r1, #172	; 0xac
   20602:	4620      	mov	r0, r4
   20604:	f005 fb95 	bl	25d32 <assert_post_action>
   20608:	e7ea      	b.n	205e0 <z_time_slice+0x98>
			move_thread_to_end_of_prio_q(_current);
   2060a:	4618      	mov	r0, r3
   2060c:	f7ff ff40 	bl	20490 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   20610:	f7ff fcc8 	bl	1ffa4 <z_reset_time_slice>
   20614:	e002      	b.n	2061c <z_time_slice+0xd4>
		_current_cpu->slice_ticks = 0;
   20616:	4b0f      	ldr	r3, [pc, #60]	; (20654 <z_time_slice+0x10c>)
   20618:	2200      	movs	r2, #0
   2061a:	611a      	str	r2, [r3, #16]
   2061c:	480c      	ldr	r0, [pc, #48]	; (20650 <z_time_slice+0x108>)
   2061e:	f7fe f839 	bl	1e694 <z_spin_unlock_valid>
   20622:	b120      	cbz	r0, 2062e <z_time_slice+0xe6>
   20624:	f385 8811 	msr	BASEPRI, r5
   20628:	f3bf 8f6f 	isb	sy
}
   2062c:	bd70      	pop	{r4, r5, r6, pc}
   2062e:	4c0e      	ldr	r4, [pc, #56]	; (20668 <z_time_slice+0x120>)
   20630:	23ac      	movs	r3, #172	; 0xac
   20632:	4622      	mov	r2, r4
   20634:	4910      	ldr	r1, [pc, #64]	; (20678 <z_time_slice+0x130>)
   20636:	480e      	ldr	r0, [pc, #56]	; (20670 <z_time_slice+0x128>)
   20638:	f005 f8f9 	bl	2582e <printk>
   2063c:	4904      	ldr	r1, [pc, #16]	; (20650 <z_time_slice+0x108>)
   2063e:	480f      	ldr	r0, [pc, #60]	; (2067c <z_time_slice+0x134>)
   20640:	f005 f8f5 	bl	2582e <printk>
   20644:	21ac      	movs	r1, #172	; 0xac
   20646:	4620      	mov	r0, r4
   20648:	f005 fb73 	bl	25d32 <assert_post_action>
   2064c:	e7ea      	b.n	20624 <z_time_slice+0xdc>
   2064e:	bf00      	nop
   20650:	20002d60 	.word	0x20002d60
   20654:	20002d18 	.word	0x20002d18
   20658:	20002d5c 	.word	0x20002d5c
   2065c:	20002d68 	.word	0x20002d68
   20660:	20002d64 	.word	0x20002d64
   20664:	20001cb0 	.word	0x20001cb0
   20668:	0002a314 	.word	0x0002a314
   2066c:	0002a36c 	.word	0x0002a36c
   20670:	00029ff8 	.word	0x00029ff8
   20674:	0002a384 	.word	0x0002a384
   20678:	0002a33c 	.word	0x0002a33c
   2067c:	0002a354 	.word	0x0002a354

00020680 <ready_thread>:
{
   20680:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   20682:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   20684:	f990 200d 	ldrsb.w	r2, [r0, #13]
   20688:	2a00      	cmp	r2, #0
   2068a:	db30      	blt.n	206ee <ready_thread+0x6e>
   2068c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2068e:	f013 0f1f 	tst.w	r3, #31
   20692:	d105      	bne.n	206a0 <ready_thread+0x20>
	return node->next != NULL;
   20694:	6982      	ldr	r2, [r0, #24]
   20696:	b10a      	cbz	r2, 2069c <ready_thread+0x1c>
   20698:	2200      	movs	r2, #0
   2069a:	e002      	b.n	206a2 <ready_thread+0x22>
   2069c:	2201      	movs	r2, #1
   2069e:	e000      	b.n	206a2 <ready_thread+0x22>
   206a0:	2200      	movs	r2, #0
   206a2:	b322      	cbz	r2, 206ee <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
   206a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   206a8:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   206aa:	4b1b      	ldr	r3, [pc, #108]	; (20718 <ready_thread+0x98>)
   206ac:	429c      	cmp	r4, r3
   206ae:	d01f      	beq.n	206f0 <ready_thread+0x70>
	return list->head == list;
   206b0:	4b1a      	ldr	r3, [pc, #104]	; (2071c <ready_thread+0x9c>)
   206b2:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   206b6:	429d      	cmp	r5, r3
   206b8:	d02c      	beq.n	20714 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206ba:	b16d      	cbz	r5, 206d8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   206bc:	4629      	mov	r1, r5
   206be:	4620      	mov	r0, r4
   206c0:	f009 f8cd 	bl	2985e <z_sched_prio_cmp>
   206c4:	2800      	cmp	r0, #0
   206c6:	dc1f      	bgt.n	20708 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   206c8:	b135      	cbz	r5, 206d8 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
   206ca:	4b14      	ldr	r3, [pc, #80]	; (2071c <ready_thread+0x9c>)
   206cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   206ce:	429d      	cmp	r5, r3
   206d0:	d002      	beq.n	206d8 <ready_thread+0x58>
   206d2:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206d4:	2d00      	cmp	r5, #0
   206d6:	d1f0      	bne.n	206ba <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
   206d8:	4b10      	ldr	r3, [pc, #64]	; (2071c <ready_thread+0x9c>)
   206da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   206dc:	f103 0120 	add.w	r1, r3, #32
   206e0:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   206e2:	6062      	str	r2, [r4, #4]
	tail->next = node;
   206e4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   206e6:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   206e8:	2000      	movs	r0, #0
   206ea:	f7ff fe91 	bl	20410 <update_cache>
}
   206ee:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   206f0:	4d0b      	ldr	r5, [pc, #44]	; (20720 <ready_thread+0xa0>)
   206f2:	23ba      	movs	r3, #186	; 0xba
   206f4:	462a      	mov	r2, r5
   206f6:	490b      	ldr	r1, [pc, #44]	; (20724 <ready_thread+0xa4>)
   206f8:	480b      	ldr	r0, [pc, #44]	; (20728 <ready_thread+0xa8>)
   206fa:	f005 f898 	bl	2582e <printk>
   206fe:	21ba      	movs	r1, #186	; 0xba
   20700:	4628      	mov	r0, r5
   20702:	f005 fb16 	bl	25d32 <assert_post_action>
   20706:	e7d3      	b.n	206b0 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
   20708:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   2070a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   2070c:	6025      	str	r5, [r4, #0]
	prev->next = node;
   2070e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   20710:	606c      	str	r4, [r5, #4]
}
   20712:	e7e9      	b.n	206e8 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20714:	2500      	movs	r5, #0
   20716:	e7d0      	b.n	206ba <ready_thread+0x3a>
   20718:	20001cb0 	.word	0x20001cb0
   2071c:	20002d18 	.word	0x20002d18
   20720:	0002d804 	.word	0x0002d804
   20724:	0002d840 	.word	0x0002d840
   20728:	00029ff8 	.word	0x00029ff8

0002072c <z_ready_thread>:
{
   2072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2072e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   20730:	2400      	movs	r4, #0
	__asm__ volatile(
   20732:	f04f 0340 	mov.w	r3, #64	; 0x40
   20736:	f3ef 8611 	mrs	r6, BASEPRI
   2073a:	f383 8812 	msr	BASEPRI_MAX, r3
   2073e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20742:	481e      	ldr	r0, [pc, #120]	; (207bc <z_ready_thread+0x90>)
   20744:	f7fd ff96 	bl	1e674 <z_spin_lock_valid>
   20748:	b118      	cbz	r0, 20752 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
   2074a:	481c      	ldr	r0, [pc, #112]	; (207bc <z_ready_thread+0x90>)
   2074c:	f7fd ffb2 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   20750:	e027      	b.n	207a2 <z_ready_thread+0x76>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20752:	4f1b      	ldr	r7, [pc, #108]	; (207c0 <z_ready_thread+0x94>)
   20754:	2381      	movs	r3, #129	; 0x81
   20756:	463a      	mov	r2, r7
   20758:	491a      	ldr	r1, [pc, #104]	; (207c4 <z_ready_thread+0x98>)
   2075a:	481b      	ldr	r0, [pc, #108]	; (207c8 <z_ready_thread+0x9c>)
   2075c:	f005 f867 	bl	2582e <printk>
   20760:	4916      	ldr	r1, [pc, #88]	; (207bc <z_ready_thread+0x90>)
   20762:	481a      	ldr	r0, [pc, #104]	; (207cc <z_ready_thread+0xa0>)
   20764:	f005 f863 	bl	2582e <printk>
   20768:	2181      	movs	r1, #129	; 0x81
   2076a:	4638      	mov	r0, r7
   2076c:	f005 fae1 	bl	25d32 <assert_post_action>
   20770:	e7eb      	b.n	2074a <z_ready_thread+0x1e>
			ready_thread(thread);
   20772:	4628      	mov	r0, r5
   20774:	f7ff ff84 	bl	20680 <ready_thread>
   20778:	e019      	b.n	207ae <z_ready_thread+0x82>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2077a:	4c11      	ldr	r4, [pc, #68]	; (207c0 <z_ready_thread+0x94>)
   2077c:	23ac      	movs	r3, #172	; 0xac
   2077e:	4622      	mov	r2, r4
   20780:	4913      	ldr	r1, [pc, #76]	; (207d0 <z_ready_thread+0xa4>)
   20782:	4811      	ldr	r0, [pc, #68]	; (207c8 <z_ready_thread+0x9c>)
   20784:	f005 f853 	bl	2582e <printk>
   20788:	490c      	ldr	r1, [pc, #48]	; (207bc <z_ready_thread+0x90>)
   2078a:	4812      	ldr	r0, [pc, #72]	; (207d4 <z_ready_thread+0xa8>)
   2078c:	f005 f84f 	bl	2582e <printk>
   20790:	21ac      	movs	r1, #172	; 0xac
   20792:	4620      	mov	r0, r4
   20794:	f005 facd 	bl	25d32 <assert_post_action>
	__asm__ volatile(
   20798:	f386 8811 	msr	BASEPRI, r6
   2079c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   207a0:	2401      	movs	r4, #1
   207a2:	b954      	cbnz	r4, 207ba <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
   207a4:	4628      	mov	r0, r5
   207a6:	f009 f858 	bl	2985a <thread_active_elsewhere>
   207aa:	2800      	cmp	r0, #0
   207ac:	d0e1      	beq.n	20772 <z_ready_thread+0x46>
   207ae:	4803      	ldr	r0, [pc, #12]	; (207bc <z_ready_thread+0x90>)
   207b0:	f7fd ff70 	bl	1e694 <z_spin_unlock_valid>
   207b4:	2800      	cmp	r0, #0
   207b6:	d1ef      	bne.n	20798 <z_ready_thread+0x6c>
   207b8:	e7df      	b.n	2077a <z_ready_thread+0x4e>
}
   207ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   207bc:	20002d60 	.word	0x20002d60
   207c0:	0002a314 	.word	0x0002a314
   207c4:	0002a36c 	.word	0x0002a36c
   207c8:	00029ff8 	.word	0x00029ff8
   207cc:	0002a384 	.word	0x0002a384
   207d0:	0002a33c 	.word	0x0002a33c
   207d4:	0002a354 	.word	0x0002a354

000207d8 <z_sched_start>:
{
   207d8:	b570      	push	{r4, r5, r6, lr}
   207da:	4604      	mov	r4, r0
	__asm__ volatile(
   207dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   207e0:	f3ef 8511 	mrs	r5, BASEPRI
   207e4:	f383 8812 	msr	BASEPRI_MAX, r3
   207e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   207ec:	481f      	ldr	r0, [pc, #124]	; (2086c <z_sched_start+0x94>)
   207ee:	f7fd ff41 	bl	1e674 <z_spin_lock_valid>
   207f2:	b188      	cbz	r0, 20818 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
   207f4:	481d      	ldr	r0, [pc, #116]	; (2086c <z_sched_start+0x94>)
   207f6:	f7fd ff5d 	bl	1e6b4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   207fa:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   207fc:	f013 0f04 	tst.w	r3, #4
   20800:	d01a      	beq.n	20838 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20802:	f023 0304 	bic.w	r3, r3, #4
   20806:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
   20808:	4620      	mov	r0, r4
   2080a:	f7ff ff39 	bl	20680 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2080e:	4629      	mov	r1, r5
   20810:	4816      	ldr	r0, [pc, #88]	; (2086c <z_sched_start+0x94>)
   20812:	f7ff fcab 	bl	2016c <z_reschedule>
}
   20816:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20818:	4e15      	ldr	r6, [pc, #84]	; (20870 <z_sched_start+0x98>)
   2081a:	2381      	movs	r3, #129	; 0x81
   2081c:	4632      	mov	r2, r6
   2081e:	4915      	ldr	r1, [pc, #84]	; (20874 <z_sched_start+0x9c>)
   20820:	4815      	ldr	r0, [pc, #84]	; (20878 <z_sched_start+0xa0>)
   20822:	f005 f804 	bl	2582e <printk>
   20826:	4911      	ldr	r1, [pc, #68]	; (2086c <z_sched_start+0x94>)
   20828:	4814      	ldr	r0, [pc, #80]	; (2087c <z_sched_start+0xa4>)
   2082a:	f005 f800 	bl	2582e <printk>
   2082e:	2181      	movs	r1, #129	; 0x81
   20830:	4630      	mov	r0, r6
   20832:	f005 fa7e 	bl	25d32 <assert_post_action>
   20836:	e7dd      	b.n	207f4 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20838:	480c      	ldr	r0, [pc, #48]	; (2086c <z_sched_start+0x94>)
   2083a:	f7fd ff2b 	bl	1e694 <z_spin_unlock_valid>
   2083e:	b120      	cbz	r0, 2084a <z_sched_start+0x72>
	__asm__ volatile(
   20840:	f385 8811 	msr	BASEPRI, r5
   20844:	f3bf 8f6f 	isb	sy
		return;
   20848:	e7e5      	b.n	20816 <z_sched_start+0x3e>
   2084a:	4c09      	ldr	r4, [pc, #36]	; (20870 <z_sched_start+0x98>)
   2084c:	23ac      	movs	r3, #172	; 0xac
   2084e:	4622      	mov	r2, r4
   20850:	490b      	ldr	r1, [pc, #44]	; (20880 <z_sched_start+0xa8>)
   20852:	4809      	ldr	r0, [pc, #36]	; (20878 <z_sched_start+0xa0>)
   20854:	f004 ffeb 	bl	2582e <printk>
   20858:	4904      	ldr	r1, [pc, #16]	; (2086c <z_sched_start+0x94>)
   2085a:	480a      	ldr	r0, [pc, #40]	; (20884 <z_sched_start+0xac>)
   2085c:	f004 ffe7 	bl	2582e <printk>
   20860:	21ac      	movs	r1, #172	; 0xac
   20862:	4620      	mov	r0, r4
   20864:	f005 fa65 	bl	25d32 <assert_post_action>
   20868:	e7ea      	b.n	20840 <z_sched_start+0x68>
   2086a:	bf00      	nop
   2086c:	20002d60 	.word	0x20002d60
   20870:	0002a314 	.word	0x0002a314
   20874:	0002a36c 	.word	0x0002a36c
   20878:	00029ff8 	.word	0x00029ff8
   2087c:	0002a384 	.word	0x0002a384
   20880:	0002a33c 	.word	0x0002a33c
   20884:	0002a354 	.word	0x0002a354

00020888 <z_thread_timeout>:
{
   20888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2088c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2088e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   20892:	2500      	movs	r5, #0
	__asm__ volatile(
   20894:	f04f 0340 	mov.w	r3, #64	; 0x40
   20898:	f3ef 8711 	mrs	r7, BASEPRI
   2089c:	f383 8812 	msr	BASEPRI_MAX, r3
   208a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   208a4:	4829      	ldr	r0, [pc, #164]	; (2094c <z_thread_timeout+0xc4>)
   208a6:	f7fd fee5 	bl	1e674 <z_spin_lock_valid>
   208aa:	b118      	cbz	r0, 208b4 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
   208ac:	4827      	ldr	r0, [pc, #156]	; (2094c <z_thread_timeout+0xc4>)
   208ae:	f7fd ff01 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   208b2:	e02e      	b.n	20912 <z_thread_timeout+0x8a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   208b4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2095c <z_thread_timeout+0xd4>
   208b8:	2381      	movs	r3, #129	; 0x81
   208ba:	4642      	mov	r2, r8
   208bc:	4924      	ldr	r1, [pc, #144]	; (20950 <z_thread_timeout+0xc8>)
   208be:	4825      	ldr	r0, [pc, #148]	; (20954 <z_thread_timeout+0xcc>)
   208c0:	f004 ffb5 	bl	2582e <printk>
   208c4:	4921      	ldr	r1, [pc, #132]	; (2094c <z_thread_timeout+0xc4>)
   208c6:	4824      	ldr	r0, [pc, #144]	; (20958 <z_thread_timeout+0xd0>)
   208c8:	f004 ffb1 	bl	2582e <printk>
   208cc:	2181      	movs	r1, #129	; 0x81
   208ce:	4640      	mov	r0, r8
   208d0:	f005 fa2f 	bl	25d32 <assert_post_action>
   208d4:	e7ea      	b.n	208ac <z_thread_timeout+0x24>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   208d6:	4630      	mov	r0, r6
   208d8:	f7ff fb3a 	bl	1ff50 <pended_on_thread>
   208dc:	4631      	mov	r1, r6
   208de:	f7ff fd15 	bl	2030c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   208e2:	7b73      	ldrb	r3, [r6, #13]
   208e4:	f023 0302 	bic.w	r3, r3, #2
   208e8:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
   208ea:	2300      	movs	r3, #0
   208ec:	60b3      	str	r3, [r6, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   208ee:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   208f2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   208f6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   208fa:	4630      	mov	r0, r6
   208fc:	f7ff fec0 	bl	20680 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20900:	4812      	ldr	r0, [pc, #72]	; (2094c <z_thread_timeout+0xc4>)
   20902:	f7fd fec7 	bl	1e694 <z_spin_unlock_valid>
   20906:	b178      	cbz	r0, 20928 <z_thread_timeout+0xa0>
	__asm__ volatile(
   20908:	f387 8811 	msr	BASEPRI, r7
   2090c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   20910:	2501      	movs	r5, #1
   20912:	b9cd      	cbnz	r5, 20948 <z_thread_timeout+0xc0>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   20914:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   20918:	f013 0f28 	tst.w	r3, #40	; 0x28
   2091c:	d1f0      	bne.n	20900 <z_thread_timeout+0x78>
			if (thread->base.pended_on != NULL) {
   2091e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   20922:	2b00      	cmp	r3, #0
   20924:	d1d7      	bne.n	208d6 <z_thread_timeout+0x4e>
   20926:	e7e2      	b.n	208ee <z_thread_timeout+0x66>
   20928:	4d0c      	ldr	r5, [pc, #48]	; (2095c <z_thread_timeout+0xd4>)
   2092a:	23ac      	movs	r3, #172	; 0xac
   2092c:	462a      	mov	r2, r5
   2092e:	490c      	ldr	r1, [pc, #48]	; (20960 <z_thread_timeout+0xd8>)
   20930:	4808      	ldr	r0, [pc, #32]	; (20954 <z_thread_timeout+0xcc>)
   20932:	f004 ff7c 	bl	2582e <printk>
   20936:	4905      	ldr	r1, [pc, #20]	; (2094c <z_thread_timeout+0xc4>)
   20938:	480a      	ldr	r0, [pc, #40]	; (20964 <z_thread_timeout+0xdc>)
   2093a:	f004 ff78 	bl	2582e <printk>
   2093e:	21ac      	movs	r1, #172	; 0xac
   20940:	4628      	mov	r0, r5
   20942:	f005 f9f6 	bl	25d32 <assert_post_action>
   20946:	e7df      	b.n	20908 <z_thread_timeout+0x80>
}
   20948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2094c:	20002d60 	.word	0x20002d60
   20950:	0002a36c 	.word	0x0002a36c
   20954:	00029ff8 	.word	0x00029ff8
   20958:	0002a384 	.word	0x0002a384
   2095c:	0002a314 	.word	0x0002a314
   20960:	0002a33c 	.word	0x0002a33c
   20964:	0002a354 	.word	0x0002a354

00020968 <unready_thread>:
{
   20968:	b510      	push	{r4, lr}
   2096a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   2096c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2096e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   20972:	2b00      	cmp	r3, #0
   20974:	db08      	blt.n	20988 <unready_thread+0x20>
	update_cache(thread == _current);
   20976:	4b08      	ldr	r3, [pc, #32]	; (20998 <unready_thread+0x30>)
   20978:	6898      	ldr	r0, [r3, #8]
   2097a:	42a0      	cmp	r0, r4
   2097c:	bf14      	ite	ne
   2097e:	2000      	movne	r0, #0
   20980:	2001      	moveq	r0, #1
   20982:	f7ff fd45 	bl	20410 <update_cache>
}
   20986:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20988:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2098c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2098e:	4601      	mov	r1, r0
   20990:	4802      	ldr	r0, [pc, #8]	; (2099c <unready_thread+0x34>)
   20992:	f7ff fcbb 	bl	2030c <z_priq_dumb_remove>
}
   20996:	e7ee      	b.n	20976 <unready_thread+0xe>
   20998:	20002d18 	.word	0x20002d18
   2099c:	20002d38 	.word	0x20002d38

000209a0 <add_to_waitq_locked>:
{
   209a0:	b570      	push	{r4, r5, r6, lr}
   209a2:	4605      	mov	r5, r0
   209a4:	460e      	mov	r6, r1
	unready_thread(thread);
   209a6:	f7ff ffdf 	bl	20968 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   209aa:	7b6b      	ldrb	r3, [r5, #13]
   209ac:	f043 0302 	orr.w	r3, r3, #2
   209b0:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   209b2:	b1ce      	cbz	r6, 209e8 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
   209b4:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   209b6:	4b17      	ldr	r3, [pc, #92]	; (20a14 <add_to_waitq_locked+0x74>)
   209b8:	429d      	cmp	r5, r3
   209ba:	d016      	beq.n	209ea <add_to_waitq_locked+0x4a>
	return list->head == list;
   209bc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   209be:	42a6      	cmp	r6, r4
   209c0:	d025      	beq.n	20a0e <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   209c2:	b164      	cbz	r4, 209de <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   209c4:	4621      	mov	r1, r4
   209c6:	4628      	mov	r0, r5
   209c8:	f008 ff49 	bl	2985e <z_sched_prio_cmp>
   209cc:	2800      	cmp	r0, #0
   209ce:	dc18      	bgt.n	20a02 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   209d0:	b12c      	cbz	r4, 209de <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
   209d2:	6873      	ldr	r3, [r6, #4]
   209d4:	429c      	cmp	r4, r3
   209d6:	d002      	beq.n	209de <add_to_waitq_locked+0x3e>
   209d8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   209da:	2c00      	cmp	r4, #0
   209dc:	d1f1      	bne.n	209c2 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   209de:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   209e0:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   209e2:	606b      	str	r3, [r5, #4]
	tail->next = node;
   209e4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   209e6:	6075      	str	r5, [r6, #4]
}
   209e8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   209ea:	4c0b      	ldr	r4, [pc, #44]	; (20a18 <add_to_waitq_locked+0x78>)
   209ec:	23ba      	movs	r3, #186	; 0xba
   209ee:	4622      	mov	r2, r4
   209f0:	490a      	ldr	r1, [pc, #40]	; (20a1c <add_to_waitq_locked+0x7c>)
   209f2:	480b      	ldr	r0, [pc, #44]	; (20a20 <add_to_waitq_locked+0x80>)
   209f4:	f004 ff1b 	bl	2582e <printk>
   209f8:	21ba      	movs	r1, #186	; 0xba
   209fa:	4620      	mov	r0, r4
   209fc:	f005 f999 	bl	25d32 <assert_post_action>
   20a00:	e7dc      	b.n	209bc <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
   20a02:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   20a04:	606b      	str	r3, [r5, #4]
	node->next = successor;
   20a06:	602c      	str	r4, [r5, #0]
	prev->next = node;
   20a08:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   20a0a:	6065      	str	r5, [r4, #4]
}
   20a0c:	e7ec      	b.n	209e8 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20a0e:	2400      	movs	r4, #0
   20a10:	e7d7      	b.n	209c2 <add_to_waitq_locked+0x22>
   20a12:	bf00      	nop
   20a14:	20001cb0 	.word	0x20001cb0
   20a18:	0002d804 	.word	0x0002d804
   20a1c:	0002d840 	.word	0x0002d840
   20a20:	00029ff8 	.word	0x00029ff8

00020a24 <pend>:
{
   20a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20a28:	4605      	mov	r5, r0
   20a2a:	460f      	mov	r7, r1
   20a2c:	4691      	mov	r9, r2
   20a2e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   20a30:	2400      	movs	r4, #0
	__asm__ volatile(
   20a32:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a36:	f3ef 8611 	mrs	r6, BASEPRI
   20a3a:	f383 8812 	msr	BASEPRI_MAX, r3
   20a3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a42:	481f      	ldr	r0, [pc, #124]	; (20ac0 <pend+0x9c>)
   20a44:	f7fd fe16 	bl	1e674 <z_spin_lock_valid>
   20a48:	b118      	cbz	r0, 20a52 <pend+0x2e>
	z_spin_lock_set_owner(l);
   20a4a:	481d      	ldr	r0, [pc, #116]	; (20ac0 <pend+0x9c>)
   20a4c:	f7fd fe32 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   20a50:	e024      	b.n	20a9c <pend+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a52:	f8df a07c 	ldr.w	sl, [pc, #124]	; 20ad0 <pend+0xac>
   20a56:	2381      	movs	r3, #129	; 0x81
   20a58:	4652      	mov	r2, sl
   20a5a:	491a      	ldr	r1, [pc, #104]	; (20ac4 <pend+0xa0>)
   20a5c:	481a      	ldr	r0, [pc, #104]	; (20ac8 <pend+0xa4>)
   20a5e:	f004 fee6 	bl	2582e <printk>
   20a62:	4917      	ldr	r1, [pc, #92]	; (20ac0 <pend+0x9c>)
   20a64:	4819      	ldr	r0, [pc, #100]	; (20acc <pend+0xa8>)
   20a66:	f004 fee2 	bl	2582e <printk>
   20a6a:	2181      	movs	r1, #129	; 0x81
   20a6c:	4650      	mov	r0, sl
   20a6e:	f005 f960 	bl	25d32 <assert_post_action>
   20a72:	e7ea      	b.n	20a4a <pend+0x26>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a74:	4c16      	ldr	r4, [pc, #88]	; (20ad0 <pend+0xac>)
   20a76:	23ac      	movs	r3, #172	; 0xac
   20a78:	4622      	mov	r2, r4
   20a7a:	4916      	ldr	r1, [pc, #88]	; (20ad4 <pend+0xb0>)
   20a7c:	4812      	ldr	r0, [pc, #72]	; (20ac8 <pend+0xa4>)
   20a7e:	f004 fed6 	bl	2582e <printk>
   20a82:	490f      	ldr	r1, [pc, #60]	; (20ac0 <pend+0x9c>)
   20a84:	4814      	ldr	r0, [pc, #80]	; (20ad8 <pend+0xb4>)
   20a86:	f004 fed2 	bl	2582e <printk>
   20a8a:	21ac      	movs	r1, #172	; 0xac
   20a8c:	4620      	mov	r0, r4
   20a8e:	f005 f950 	bl	25d32 <assert_post_action>
	__asm__ volatile(
   20a92:	f386 8811 	msr	BASEPRI, r6
   20a96:	f3bf 8f6f 	isb	sy
   20a9a:	2401      	movs	r4, #1
   20a9c:	b94c      	cbnz	r4, 20ab2 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
   20a9e:	4639      	mov	r1, r7
   20aa0:	4628      	mov	r0, r5
   20aa2:	f7ff ff7d 	bl	209a0 <add_to_waitq_locked>
   20aa6:	4806      	ldr	r0, [pc, #24]	; (20ac0 <pend+0x9c>)
   20aa8:	f7fd fdf4 	bl	1e694 <z_spin_unlock_valid>
   20aac:	2800      	cmp	r0, #0
   20aae:	d1f0      	bne.n	20a92 <pend+0x6e>
   20ab0:	e7e0      	b.n	20a74 <pend+0x50>
	add_thread_timeout(thread, timeout);
   20ab2:	464a      	mov	r2, r9
   20ab4:	4643      	mov	r3, r8
   20ab6:	4628      	mov	r0, r5
   20ab8:	f7ff fa64 	bl	1ff84 <add_thread_timeout>
}
   20abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20ac0:	20002d60 	.word	0x20002d60
   20ac4:	0002a36c 	.word	0x0002a36c
   20ac8:	00029ff8 	.word	0x00029ff8
   20acc:	0002a384 	.word	0x0002a384
   20ad0:	0002a314 	.word	0x0002a314
   20ad4:	0002a33c 	.word	0x0002a33c
   20ad8:	0002a354 	.word	0x0002a354

00020adc <z_pend_curr>:
{
   20adc:	b570      	push	{r4, r5, r6, lr}
   20ade:	4604      	mov	r4, r0
   20ae0:	460d      	mov	r5, r1
   20ae2:	4611      	mov	r1, r2
	pending_current = _current;
   20ae4:	4b0f      	ldr	r3, [pc, #60]	; (20b24 <z_pend_curr+0x48>)
   20ae6:	6898      	ldr	r0, [r3, #8]
   20ae8:	4b0f      	ldr	r3, [pc, #60]	; (20b28 <z_pend_curr+0x4c>)
   20aea:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   20aec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20af0:	f7ff ff98 	bl	20a24 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20af4:	4620      	mov	r0, r4
   20af6:	f7fd fdcd 	bl	1e694 <z_spin_unlock_valid>
   20afa:	b118      	cbz	r0, 20b04 <z_pend_curr+0x28>
   20afc:	4628      	mov	r0, r5
   20afe:	f7f2 fc1f 	bl	13340 <arch_swap>
}
   20b02:	bd70      	pop	{r4, r5, r6, pc}
   20b04:	4e09      	ldr	r6, [pc, #36]	; (20b2c <z_pend_curr+0x50>)
   20b06:	23c3      	movs	r3, #195	; 0xc3
   20b08:	4632      	mov	r2, r6
   20b0a:	4909      	ldr	r1, [pc, #36]	; (20b30 <z_pend_curr+0x54>)
   20b0c:	4809      	ldr	r0, [pc, #36]	; (20b34 <z_pend_curr+0x58>)
   20b0e:	f004 fe8e 	bl	2582e <printk>
   20b12:	4621      	mov	r1, r4
   20b14:	4808      	ldr	r0, [pc, #32]	; (20b38 <z_pend_curr+0x5c>)
   20b16:	f004 fe8a 	bl	2582e <printk>
   20b1a:	21c3      	movs	r1, #195	; 0xc3
   20b1c:	4630      	mov	r0, r6
   20b1e:	f005 f908 	bl	25d32 <assert_post_action>
   20b22:	e7eb      	b.n	20afc <z_pend_curr+0x20>
   20b24:	20002d18 	.word	0x20002d18
   20b28:	20002d5c 	.word	0x20002d5c
   20b2c:	0002a314 	.word	0x0002a314
   20b30:	0002a33c 	.word	0x0002a33c
   20b34:	00029ff8 	.word	0x00029ff8
   20b38:	0002a354 	.word	0x0002a354

00020b3c <z_set_prio>:
{
   20b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b40:	4604      	mov	r4, r0
   20b42:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   20b44:	2500      	movs	r5, #0
	__asm__ volatile(
   20b46:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b4a:	f3ef 8611 	mrs	r6, BASEPRI
   20b4e:	f383 8812 	msr	BASEPRI_MAX, r3
   20b52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b56:	4845      	ldr	r0, [pc, #276]	; (20c6c <z_set_prio+0x130>)
   20b58:	f7fd fd8c 	bl	1e674 <z_spin_lock_valid>
   20b5c:	b128      	cbz	r0, 20b6a <z_set_prio+0x2e>
	z_spin_lock_set_owner(l);
   20b5e:	4843      	ldr	r0, [pc, #268]	; (20c6c <z_set_prio+0x130>)
   20b60:	f7fd fda8 	bl	1e6b4 <z_spin_lock_set_owner>
	bool need_sched = 0;
   20b64:	f04f 0800 	mov.w	r8, #0
	return k;
   20b68:	e01e      	b.n	20ba8 <z_set_prio+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b6a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 20c90 <z_set_prio+0x154>
   20b6e:	2381      	movs	r3, #129	; 0x81
   20b70:	4642      	mov	r2, r8
   20b72:	493f      	ldr	r1, [pc, #252]	; (20c70 <z_set_prio+0x134>)
   20b74:	483f      	ldr	r0, [pc, #252]	; (20c74 <z_set_prio+0x138>)
   20b76:	f004 fe5a 	bl	2582e <printk>
   20b7a:	493c      	ldr	r1, [pc, #240]	; (20c6c <z_set_prio+0x130>)
   20b7c:	483e      	ldr	r0, [pc, #248]	; (20c78 <z_set_prio+0x13c>)
   20b7e:	f004 fe56 	bl	2582e <printk>
   20b82:	2181      	movs	r1, #129	; 0x81
   20b84:	4640      	mov	r0, r8
   20b86:	f005 f8d4 	bl	25d32 <assert_post_action>
   20b8a:	e7e8      	b.n	20b5e <z_set_prio+0x22>
		if (need_sched) {
   20b8c:	f013 0801 	ands.w	r8, r3, #1
   20b90:	d116      	bne.n	20bc0 <z_set_prio+0x84>
			thread->base.prio = prio;
   20b92:	73a7      	strb	r7, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b94:	4835      	ldr	r0, [pc, #212]	; (20c6c <z_set_prio+0x130>)
   20b96:	f7fd fd7d 	bl	1e694 <z_spin_unlock_valid>
   20b9a:	2800      	cmp	r0, #0
   20b9c:	d053      	beq.n	20c46 <z_set_prio+0x10a>
	__asm__ volatile(
   20b9e:	f386 8811 	msr	BASEPRI, r6
   20ba2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   20ba6:	2501      	movs	r5, #1
   20ba8:	462b      	mov	r3, r5
   20baa:	2d00      	cmp	r5, #0
   20bac:	d15b      	bne.n	20c66 <z_set_prio+0x12a>
	uint8_t state = thread->base.thread_state;
   20bae:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20bb0:	f012 0f1f 	tst.w	r2, #31
   20bb4:	d1ea      	bne.n	20b8c <z_set_prio+0x50>
	return node->next != NULL;
   20bb6:	69a1      	ldr	r1, [r4, #24]
   20bb8:	2900      	cmp	r1, #0
   20bba:	d1e7      	bne.n	20b8c <z_set_prio+0x50>
   20bbc:	2301      	movs	r3, #1
   20bbe:	e7e5      	b.n	20b8c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20bc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   20bc4:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20bc6:	4621      	mov	r1, r4
   20bc8:	482c      	ldr	r0, [pc, #176]	; (20c7c <z_set_prio+0x140>)
   20bca:	f7ff fb9f 	bl	2030c <z_priq_dumb_remove>
				thread->base.prio = prio;
   20bce:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   20bd0:	7b63      	ldrb	r3, [r4, #13]
   20bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20bd6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20bd8:	4b29      	ldr	r3, [pc, #164]	; (20c80 <z_set_prio+0x144>)
   20bda:	429c      	cmp	r4, r3
   20bdc:	d01f      	beq.n	20c1e <z_set_prio+0xe2>
	return list->head == list;
   20bde:	4b29      	ldr	r3, [pc, #164]	; (20c84 <z_set_prio+0x148>)
   20be0:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20be4:	429d      	cmp	r5, r3
   20be6:	d02c      	beq.n	20c42 <z_set_prio+0x106>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20be8:	b16d      	cbz	r5, 20c06 <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   20bea:	4629      	mov	r1, r5
   20bec:	4620      	mov	r0, r4
   20bee:	f008 fe36 	bl	2985e <z_sched_prio_cmp>
   20bf2:	2800      	cmp	r0, #0
   20bf4:	dc1f      	bgt.n	20c36 <z_set_prio+0xfa>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20bf6:	b135      	cbz	r5, 20c06 <z_set_prio+0xca>
	return (node == list->tail) ? NULL : node->next;
   20bf8:	4b22      	ldr	r3, [pc, #136]	; (20c84 <z_set_prio+0x148>)
   20bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20bfc:	429d      	cmp	r5, r3
   20bfe:	d002      	beq.n	20c06 <z_set_prio+0xca>
   20c00:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20c02:	2d00      	cmp	r5, #0
   20c04:	d1f0      	bne.n	20be8 <z_set_prio+0xac>
	sys_dnode_t *const tail = list->tail;
   20c06:	4b1f      	ldr	r3, [pc, #124]	; (20c84 <z_set_prio+0x148>)
   20c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   20c0a:	f103 0120 	add.w	r1, r3, #32
   20c0e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   20c10:	6062      	str	r2, [r4, #4]
	tail->next = node;
   20c12:	6014      	str	r4, [r2, #0]
	list->tail = node;
   20c14:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   20c16:	2001      	movs	r0, #1
   20c18:	f7ff fbfa 	bl	20410 <update_cache>
   20c1c:	e7ba      	b.n	20b94 <z_set_prio+0x58>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20c1e:	4d1a      	ldr	r5, [pc, #104]	; (20c88 <z_set_prio+0x14c>)
   20c20:	23ba      	movs	r3, #186	; 0xba
   20c22:	462a      	mov	r2, r5
   20c24:	4919      	ldr	r1, [pc, #100]	; (20c8c <z_set_prio+0x150>)
   20c26:	4813      	ldr	r0, [pc, #76]	; (20c74 <z_set_prio+0x138>)
   20c28:	f004 fe01 	bl	2582e <printk>
   20c2c:	21ba      	movs	r1, #186	; 0xba
   20c2e:	4628      	mov	r0, r5
   20c30:	f005 f87f 	bl	25d32 <assert_post_action>
   20c34:	e7d3      	b.n	20bde <z_set_prio+0xa2>
	sys_dnode_t *const prev = successor->prev;
   20c36:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   20c38:	6063      	str	r3, [r4, #4]
	node->next = successor;
   20c3a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   20c3c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   20c3e:	606c      	str	r4, [r5, #4]
}
   20c40:	e7e9      	b.n	20c16 <z_set_prio+0xda>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20c42:	2500      	movs	r5, #0
   20c44:	e7d0      	b.n	20be8 <z_set_prio+0xac>
   20c46:	4d12      	ldr	r5, [pc, #72]	; (20c90 <z_set_prio+0x154>)
   20c48:	23ac      	movs	r3, #172	; 0xac
   20c4a:	462a      	mov	r2, r5
   20c4c:	4911      	ldr	r1, [pc, #68]	; (20c94 <z_set_prio+0x158>)
   20c4e:	4809      	ldr	r0, [pc, #36]	; (20c74 <z_set_prio+0x138>)
   20c50:	f004 fded 	bl	2582e <printk>
   20c54:	4905      	ldr	r1, [pc, #20]	; (20c6c <z_set_prio+0x130>)
   20c56:	4810      	ldr	r0, [pc, #64]	; (20c98 <z_set_prio+0x15c>)
   20c58:	f004 fde9 	bl	2582e <printk>
   20c5c:	21ac      	movs	r1, #172	; 0xac
   20c5e:	4628      	mov	r0, r5
   20c60:	f005 f867 	bl	25d32 <assert_post_action>
   20c64:	e79b      	b.n	20b9e <z_set_prio+0x62>
}
   20c66:	4640      	mov	r0, r8
   20c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c6c:	20002d60 	.word	0x20002d60
   20c70:	0002a36c 	.word	0x0002a36c
   20c74:	00029ff8 	.word	0x00029ff8
   20c78:	0002a384 	.word	0x0002a384
   20c7c:	20002d38 	.word	0x20002d38
   20c80:	20001cb0 	.word	0x20001cb0
   20c84:	20002d18 	.word	0x20002d18
   20c88:	0002d804 	.word	0x0002d804
   20c8c:	0002d840 	.word	0x0002d840
   20c90:	0002a314 	.word	0x0002a314
   20c94:	0002a33c 	.word	0x0002a33c
   20c98:	0002a354 	.word	0x0002a354

00020c9c <z_impl_k_thread_suspend>:
{
   20c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c9e:	4604      	mov	r4, r0
   20ca0:	3018      	adds	r0, #24
   20ca2:	f000 fe81 	bl	219a8 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   20ca6:	2500      	movs	r5, #0
	__asm__ volatile(
   20ca8:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cac:	f3ef 8611 	mrs	r6, BASEPRI
   20cb0:	f383 8812 	msr	BASEPRI_MAX, r3
   20cb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cb8:	482d      	ldr	r0, [pc, #180]	; (20d70 <z_impl_k_thread_suspend+0xd4>)
   20cba:	f7fd fcdb 	bl	1e674 <z_spin_lock_valid>
   20cbe:	b118      	cbz	r0, 20cc8 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
   20cc0:	482b      	ldr	r0, [pc, #172]	; (20d70 <z_impl_k_thread_suspend+0xd4>)
   20cc2:	f7fd fcf7 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   20cc6:	e02b      	b.n	20d20 <z_impl_k_thread_suspend+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cc8:	4f2a      	ldr	r7, [pc, #168]	; (20d74 <z_impl_k_thread_suspend+0xd8>)
   20cca:	2381      	movs	r3, #129	; 0x81
   20ccc:	463a      	mov	r2, r7
   20cce:	492a      	ldr	r1, [pc, #168]	; (20d78 <z_impl_k_thread_suspend+0xdc>)
   20cd0:	482a      	ldr	r0, [pc, #168]	; (20d7c <z_impl_k_thread_suspend+0xe0>)
   20cd2:	f004 fdac 	bl	2582e <printk>
   20cd6:	4926      	ldr	r1, [pc, #152]	; (20d70 <z_impl_k_thread_suspend+0xd4>)
   20cd8:	4829      	ldr	r0, [pc, #164]	; (20d80 <z_impl_k_thread_suspend+0xe4>)
   20cda:	f004 fda8 	bl	2582e <printk>
   20cde:	2181      	movs	r1, #129	; 0x81
   20ce0:	4638      	mov	r0, r7
   20ce2:	f005 f826 	bl	25d32 <assert_post_action>
   20ce6:	e7eb      	b.n	20cc0 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20ce8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   20cec:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20cee:	4621      	mov	r1, r4
   20cf0:	4824      	ldr	r0, [pc, #144]	; (20d84 <z_impl_k_thread_suspend+0xe8>)
   20cf2:	f7ff fb0b 	bl	2030c <z_priq_dumb_remove>
}
   20cf6:	e019      	b.n	20d2c <z_impl_k_thread_suspend+0x90>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20cf8:	4d1e      	ldr	r5, [pc, #120]	; (20d74 <z_impl_k_thread_suspend+0xd8>)
   20cfa:	23ac      	movs	r3, #172	; 0xac
   20cfc:	462a      	mov	r2, r5
   20cfe:	4922      	ldr	r1, [pc, #136]	; (20d88 <z_impl_k_thread_suspend+0xec>)
   20d00:	481e      	ldr	r0, [pc, #120]	; (20d7c <z_impl_k_thread_suspend+0xe0>)
   20d02:	f004 fd94 	bl	2582e <printk>
   20d06:	491a      	ldr	r1, [pc, #104]	; (20d70 <z_impl_k_thread_suspend+0xd4>)
   20d08:	4820      	ldr	r0, [pc, #128]	; (20d8c <z_impl_k_thread_suspend+0xf0>)
   20d0a:	f004 fd90 	bl	2582e <printk>
   20d0e:	21ac      	movs	r1, #172	; 0xac
   20d10:	4628      	mov	r0, r5
   20d12:	f005 f80e 	bl	25d32 <assert_post_action>
	__asm__ volatile(
   20d16:	f386 8811 	msr	BASEPRI, r6
   20d1a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   20d1e:	2501      	movs	r5, #1
   20d20:	b9b5      	cbnz	r5, 20d50 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
   20d22:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   20d24:	f994 300d 	ldrsb.w	r3, [r4, #13]
   20d28:	2b00      	cmp	r3, #0
   20d2a:	dbdd      	blt.n	20ce8 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20d2c:	7b63      	ldrb	r3, [r4, #13]
   20d2e:	f043 0310 	orr.w	r3, r3, #16
   20d32:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   20d34:	4b16      	ldr	r3, [pc, #88]	; (20d90 <z_impl_k_thread_suspend+0xf4>)
   20d36:	6898      	ldr	r0, [r3, #8]
   20d38:	42a0      	cmp	r0, r4
   20d3a:	bf14      	ite	ne
   20d3c:	2000      	movne	r0, #0
   20d3e:	2001      	moveq	r0, #1
   20d40:	f7ff fb66 	bl	20410 <update_cache>
   20d44:	480a      	ldr	r0, [pc, #40]	; (20d70 <z_impl_k_thread_suspend+0xd4>)
   20d46:	f7fd fca5 	bl	1e694 <z_spin_unlock_valid>
   20d4a:	2800      	cmp	r0, #0
   20d4c:	d1e3      	bne.n	20d16 <z_impl_k_thread_suspend+0x7a>
   20d4e:	e7d3      	b.n	20cf8 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
   20d50:	4b0f      	ldr	r3, [pc, #60]	; (20d90 <z_impl_k_thread_suspend+0xf4>)
   20d52:	689b      	ldr	r3, [r3, #8]
   20d54:	42a3      	cmp	r3, r4
   20d56:	d000      	beq.n	20d5a <z_impl_k_thread_suspend+0xbe>
}
   20d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
   20d5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d5e:	f3ef 8011 	mrs	r0, BASEPRI
   20d62:	f383 8812 	msr	BASEPRI_MAX, r3
   20d66:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   20d6a:	f008 fd82 	bl	29872 <z_reschedule_irqlock>
   20d6e:	e7f3      	b.n	20d58 <z_impl_k_thread_suspend+0xbc>
   20d70:	20002d60 	.word	0x20002d60
   20d74:	0002a314 	.word	0x0002a314
   20d78:	0002a36c 	.word	0x0002a36c
   20d7c:	00029ff8 	.word	0x00029ff8
   20d80:	0002a384 	.word	0x0002a384
   20d84:	20002d38 	.word	0x20002d38
   20d88:	0002a33c 	.word	0x0002a33c
   20d8c:	0002a354 	.word	0x0002a354
   20d90:	20002d18 	.word	0x20002d18

00020d94 <k_sched_unlock>:
{
   20d94:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
   20d96:	2400      	movs	r4, #0
   20d98:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d9c:	f3ef 8511 	mrs	r5, BASEPRI
   20da0:	f383 8812 	msr	BASEPRI_MAX, r3
   20da4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20da8:	4838      	ldr	r0, [pc, #224]	; (20e8c <k_sched_unlock+0xf8>)
   20daa:	f7fd fc63 	bl	1e674 <z_spin_lock_valid>
   20dae:	b118      	cbz	r0, 20db8 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
   20db0:	4836      	ldr	r0, [pc, #216]	; (20e8c <k_sched_unlock+0xf8>)
   20db2:	f7fd fc7f 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   20db6:	e045      	b.n	20e44 <k_sched_unlock+0xb0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20db8:	4e35      	ldr	r6, [pc, #212]	; (20e90 <k_sched_unlock+0xfc>)
   20dba:	2381      	movs	r3, #129	; 0x81
   20dbc:	4632      	mov	r2, r6
   20dbe:	4935      	ldr	r1, [pc, #212]	; (20e94 <k_sched_unlock+0x100>)
   20dc0:	4835      	ldr	r0, [pc, #212]	; (20e98 <k_sched_unlock+0x104>)
   20dc2:	f004 fd34 	bl	2582e <printk>
   20dc6:	4931      	ldr	r1, [pc, #196]	; (20e8c <k_sched_unlock+0xf8>)
   20dc8:	4834      	ldr	r0, [pc, #208]	; (20e9c <k_sched_unlock+0x108>)
   20dca:	f004 fd30 	bl	2582e <printk>
   20dce:	2181      	movs	r1, #129	; 0x81
   20dd0:	4630      	mov	r0, r6
   20dd2:	f004 ffae 	bl	25d32 <assert_post_action>
   20dd6:	e7eb      	b.n	20db0 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
   20dd8:	4c31      	ldr	r4, [pc, #196]	; (20ea0 <k_sched_unlock+0x10c>)
   20dda:	f240 3385 	movw	r3, #901	; 0x385
   20dde:	4622      	mov	r2, r4
   20de0:	4930      	ldr	r1, [pc, #192]	; (20ea4 <k_sched_unlock+0x110>)
   20de2:	482d      	ldr	r0, [pc, #180]	; (20e98 <k_sched_unlock+0x104>)
   20de4:	f004 fd23 	bl	2582e <printk>
   20de8:	482f      	ldr	r0, [pc, #188]	; (20ea8 <k_sched_unlock+0x114>)
   20dea:	f004 fd20 	bl	2582e <printk>
   20dee:	f240 3185 	movw	r1, #901	; 0x385
   20df2:	4620      	mov	r0, r4
   20df4:	f004 ff9d 	bl	25d32 <assert_post_action>
   20df8:	e02a      	b.n	20e50 <k_sched_unlock+0xbc>
		__ASSERT(!arch_is_in_isr(), "");
   20dfa:	4c29      	ldr	r4, [pc, #164]	; (20ea0 <k_sched_unlock+0x10c>)
   20dfc:	f240 3386 	movw	r3, #902	; 0x386
   20e00:	4622      	mov	r2, r4
   20e02:	492a      	ldr	r1, [pc, #168]	; (20eac <k_sched_unlock+0x118>)
   20e04:	4824      	ldr	r0, [pc, #144]	; (20e98 <k_sched_unlock+0x104>)
   20e06:	f004 fd12 	bl	2582e <printk>
   20e0a:	4827      	ldr	r0, [pc, #156]	; (20ea8 <k_sched_unlock+0x114>)
   20e0c:	f004 fd0f 	bl	2582e <printk>
   20e10:	f240 3186 	movw	r1, #902	; 0x386
   20e14:	4620      	mov	r0, r4
   20e16:	f004 ff8c 	bl	25d32 <assert_post_action>
   20e1a:	e01d      	b.n	20e58 <k_sched_unlock+0xc4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e1c:	4c1c      	ldr	r4, [pc, #112]	; (20e90 <k_sched_unlock+0xfc>)
   20e1e:	23ac      	movs	r3, #172	; 0xac
   20e20:	4622      	mov	r2, r4
   20e22:	4923      	ldr	r1, [pc, #140]	; (20eb0 <k_sched_unlock+0x11c>)
   20e24:	481c      	ldr	r0, [pc, #112]	; (20e98 <k_sched_unlock+0x104>)
   20e26:	f004 fd02 	bl	2582e <printk>
   20e2a:	4918      	ldr	r1, [pc, #96]	; (20e8c <k_sched_unlock+0xf8>)
   20e2c:	4821      	ldr	r0, [pc, #132]	; (20eb4 <k_sched_unlock+0x120>)
   20e2e:	f004 fcfe 	bl	2582e <printk>
   20e32:	21ac      	movs	r1, #172	; 0xac
   20e34:	4620      	mov	r0, r4
   20e36:	f004 ff7c 	bl	25d32 <assert_post_action>
	__asm__ volatile(
   20e3a:	f385 8811 	msr	BASEPRI, r5
   20e3e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   20e42:	2401      	movs	r4, #1
   20e44:	b9b4      	cbnz	r4, 20e74 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
   20e46:	4b1c      	ldr	r3, [pc, #112]	; (20eb8 <k_sched_unlock+0x124>)
   20e48:	689b      	ldr	r3, [r3, #8]
   20e4a:	7bdb      	ldrb	r3, [r3, #15]
   20e4c:	2b00      	cmp	r3, #0
   20e4e:	d0c3      	beq.n	20dd8 <k_sched_unlock+0x44>
   20e50:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   20e54:	2b00      	cmp	r3, #0
   20e56:	d1d0      	bne.n	20dfa <k_sched_unlock+0x66>
		++_current->base.sched_locked;
   20e58:	4b17      	ldr	r3, [pc, #92]	; (20eb8 <k_sched_unlock+0x124>)
   20e5a:	689a      	ldr	r2, [r3, #8]
   20e5c:	7bd3      	ldrb	r3, [r2, #15]
   20e5e:	3301      	adds	r3, #1
   20e60:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   20e62:	2000      	movs	r0, #0
   20e64:	f7ff fad4 	bl	20410 <update_cache>
   20e68:	4808      	ldr	r0, [pc, #32]	; (20e8c <k_sched_unlock+0xf8>)
   20e6a:	f7fd fc13 	bl	1e694 <z_spin_unlock_valid>
   20e6e:	2800      	cmp	r0, #0
   20e70:	d1e3      	bne.n	20e3a <k_sched_unlock+0xa6>
   20e72:	e7d3      	b.n	20e1c <k_sched_unlock+0x88>
	__asm__ volatile(
   20e74:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e78:	f3ef 8011 	mrs	r0, BASEPRI
   20e7c:	f383 8812 	msr	BASEPRI_MAX, r3
   20e80:	f3bf 8f6f 	isb	sy
   20e84:	f008 fcf5 	bl	29872 <z_reschedule_irqlock>
}
   20e88:	bd70      	pop	{r4, r5, r6, pc}
   20e8a:	bf00      	nop
   20e8c:	20002d60 	.word	0x20002d60
   20e90:	0002a314 	.word	0x0002a314
   20e94:	0002a36c 	.word	0x0002a36c
   20e98:	00029ff8 	.word	0x00029ff8
   20e9c:	0002a384 	.word	0x0002a384
   20ea0:	0002d804 	.word	0x0002d804
   20ea4:	0002d88c 	.word	0x0002d88c
   20ea8:	0002c900 	.word	0x0002c900
   20eac:	0002d500 	.word	0x0002d500
   20eb0:	0002a33c 	.word	0x0002a33c
   20eb4:	0002a354 	.word	0x0002a354
   20eb8:	20002d18 	.word	0x20002d18

00020ebc <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   20ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   20ebe:	7b43      	ldrb	r3, [r0, #13]
   20ec0:	f013 0f08 	tst.w	r3, #8
   20ec4:	d145      	bne.n	20f52 <end_thread+0x96>
   20ec6:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   20ec8:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   20ecc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20ed0:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   20ed2:	f013 0f80 	tst.w	r3, #128	; 0x80
   20ed6:	d114      	bne.n	20f02 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   20ed8:	68ab      	ldr	r3, [r5, #8]
   20eda:	b15b      	cbz	r3, 20ef4 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   20edc:	4628      	mov	r0, r5
   20ede:	f7ff f837 	bl	1ff50 <pended_on_thread>
   20ee2:	4629      	mov	r1, r5
   20ee4:	f7ff fa12 	bl	2030c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20ee8:	7b6b      	ldrb	r3, [r5, #13]
   20eea:	f023 0302 	bic.w	r3, r3, #2
   20eee:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   20ef0:	2300      	movs	r3, #0
   20ef2:	60ab      	str	r3, [r5, #8]
   20ef4:	f105 0018 	add.w	r0, r5, #24
   20ef8:	f000 fd56 	bl	219a8 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   20efc:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   20f00:	e01c      	b.n	20f3c <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20f06:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20f08:	4601      	mov	r1, r0
   20f0a:	4812      	ldr	r0, [pc, #72]	; (20f54 <end_thread+0x98>)
   20f0c:	f7ff f9fe 	bl	2030c <z_priq_dumb_remove>
}
   20f10:	e7e2      	b.n	20ed8 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   20f12:	4620      	mov	r0, r4
   20f14:	f7ff f81c 	bl	1ff50 <pended_on_thread>
   20f18:	4621      	mov	r1, r4
   20f1a:	f7ff f9f7 	bl	2030c <z_priq_dumb_remove>
   20f1e:	7b63      	ldrb	r3, [r4, #13]
   20f20:	f023 0302 	bic.w	r3, r3, #2
   20f24:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   20f26:	2600      	movs	r6, #0
   20f28:	60a6      	str	r6, [r4, #8]
   20f2a:	f104 0018 	add.w	r0, r4, #24
   20f2e:	f000 fd3b 	bl	219a8 <z_abort_timeout>
   20f32:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   20f36:	4620      	mov	r0, r4
   20f38:	f7ff fba2 	bl	20680 <ready_thread>
	return list->head == list;
   20f3c:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20f3e:	42bc      	cmp	r4, r7
   20f40:	d001      	beq.n	20f46 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   20f42:	2c00      	cmp	r4, #0
   20f44:	d1e5      	bne.n	20f12 <end_thread+0x56>
		update_cache(1);
   20f46:	2001      	movs	r0, #1
   20f48:	f7ff fa62 	bl	20410 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   20f4c:	4628      	mov	r0, r5
   20f4e:	f7fd fbb9 	bl	1e6c4 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   20f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20f54:	20002d38 	.word	0x20002d38

00020f58 <z_unpend1_no_timeout>:
{
   20f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f5a:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
   20f5c:	2500      	movs	r5, #0
   20f5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f62:	f3ef 8611 	mrs	r6, BASEPRI
   20f66:	f383 8812 	msr	BASEPRI_MAX, r3
   20f6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f6e:	4823      	ldr	r0, [pc, #140]	; (20ffc <z_unpend1_no_timeout+0xa4>)
   20f70:	f7fd fb80 	bl	1e674 <z_spin_lock_valid>
   20f74:	b120      	cbz	r0, 20f80 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
   20f76:	4821      	ldr	r0, [pc, #132]	; (20ffc <z_unpend1_no_timeout+0xa4>)
   20f78:	f7fd fb9c 	bl	1e6b4 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   20f7c:	2400      	movs	r4, #0
	return k;
   20f7e:	e023      	b.n	20fc8 <z_unpend1_no_timeout+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f80:	4c1f      	ldr	r4, [pc, #124]	; (21000 <z_unpend1_no_timeout+0xa8>)
   20f82:	2381      	movs	r3, #129	; 0x81
   20f84:	4622      	mov	r2, r4
   20f86:	491f      	ldr	r1, [pc, #124]	; (21004 <z_unpend1_no_timeout+0xac>)
   20f88:	481f      	ldr	r0, [pc, #124]	; (21008 <z_unpend1_no_timeout+0xb0>)
   20f8a:	f004 fc50 	bl	2582e <printk>
   20f8e:	491b      	ldr	r1, [pc, #108]	; (20ffc <z_unpend1_no_timeout+0xa4>)
   20f90:	481e      	ldr	r0, [pc, #120]	; (2100c <z_unpend1_no_timeout+0xb4>)
   20f92:	f004 fc4c 	bl	2582e <printk>
   20f96:	2181      	movs	r1, #129	; 0x81
   20f98:	4620      	mov	r0, r4
   20f9a:	f004 feca 	bl	25d32 <assert_post_action>
   20f9e:	e7ea      	b.n	20f76 <z_unpend1_no_timeout+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   20fa0:	f7fe ffd6 	bl	1ff50 <pended_on_thread>
   20fa4:	4621      	mov	r1, r4
   20fa6:	f7ff f9b1 	bl	2030c <z_priq_dumb_remove>
   20faa:	7b63      	ldrb	r3, [r4, #13]
   20fac:	f023 0302 	bic.w	r3, r3, #2
   20fb0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   20fb2:	2300      	movs	r3, #0
   20fb4:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20fb6:	4811      	ldr	r0, [pc, #68]	; (20ffc <z_unpend1_no_timeout+0xa4>)
   20fb8:	f7fd fb6c 	bl	1e694 <z_spin_unlock_valid>
   20fbc:	b160      	cbz	r0, 20fd8 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
   20fbe:	f386 8811 	msr	BASEPRI, r6
   20fc2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   20fc6:	2501      	movs	r5, #1
   20fc8:	b9b5      	cbnz	r5, 20ff8 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
   20fca:	4638      	mov	r0, r7
   20fcc:	f008 fc66 	bl	2989c <z_priq_dumb_best>
		if (thread != NULL) {
   20fd0:	4604      	mov	r4, r0
   20fd2:	2800      	cmp	r0, #0
   20fd4:	d1e4      	bne.n	20fa0 <z_unpend1_no_timeout+0x48>
   20fd6:	e7ee      	b.n	20fb6 <z_unpend1_no_timeout+0x5e>
   20fd8:	4d09      	ldr	r5, [pc, #36]	; (21000 <z_unpend1_no_timeout+0xa8>)
   20fda:	23ac      	movs	r3, #172	; 0xac
   20fdc:	462a      	mov	r2, r5
   20fde:	490c      	ldr	r1, [pc, #48]	; (21010 <z_unpend1_no_timeout+0xb8>)
   20fe0:	4809      	ldr	r0, [pc, #36]	; (21008 <z_unpend1_no_timeout+0xb0>)
   20fe2:	f004 fc24 	bl	2582e <printk>
   20fe6:	4905      	ldr	r1, [pc, #20]	; (20ffc <z_unpend1_no_timeout+0xa4>)
   20fe8:	480a      	ldr	r0, [pc, #40]	; (21014 <z_unpend1_no_timeout+0xbc>)
   20fea:	f004 fc20 	bl	2582e <printk>
   20fee:	21ac      	movs	r1, #172	; 0xac
   20ff0:	4628      	mov	r0, r5
   20ff2:	f004 fe9e 	bl	25d32 <assert_post_action>
   20ff6:	e7e2      	b.n	20fbe <z_unpend1_no_timeout+0x66>
}
   20ff8:	4620      	mov	r0, r4
   20ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20ffc:	20002d60 	.word	0x20002d60
   21000:	0002a314 	.word	0x0002a314
   21004:	0002a36c 	.word	0x0002a36c
   21008:	00029ff8 	.word	0x00029ff8
   2100c:	0002a384 	.word	0x0002a384
   21010:	0002a33c 	.word	0x0002a33c
   21014:	0002a354 	.word	0x0002a354

00021018 <z_unpend_first_thread>:
{
   21018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2101a:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
   2101c:	2500      	movs	r5, #0
	__asm__ volatile(
   2101e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21022:	f3ef 8611 	mrs	r6, BASEPRI
   21026:	f383 8812 	msr	BASEPRI_MAX, r3
   2102a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2102e:	4825      	ldr	r0, [pc, #148]	; (210c4 <z_unpend_first_thread+0xac>)
   21030:	f7fd fb20 	bl	1e674 <z_spin_lock_valid>
   21034:	b120      	cbz	r0, 21040 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
   21036:	4823      	ldr	r0, [pc, #140]	; (210c4 <z_unpend_first_thread+0xac>)
   21038:	f7fd fb3c 	bl	1e6b4 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   2103c:	2400      	movs	r4, #0
	return k;
   2103e:	e027      	b.n	21090 <z_unpend_first_thread+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21040:	4c21      	ldr	r4, [pc, #132]	; (210c8 <z_unpend_first_thread+0xb0>)
   21042:	2381      	movs	r3, #129	; 0x81
   21044:	4622      	mov	r2, r4
   21046:	4921      	ldr	r1, [pc, #132]	; (210cc <z_unpend_first_thread+0xb4>)
   21048:	4821      	ldr	r0, [pc, #132]	; (210d0 <z_unpend_first_thread+0xb8>)
   2104a:	f004 fbf0 	bl	2582e <printk>
   2104e:	491d      	ldr	r1, [pc, #116]	; (210c4 <z_unpend_first_thread+0xac>)
   21050:	4820      	ldr	r0, [pc, #128]	; (210d4 <z_unpend_first_thread+0xbc>)
   21052:	f004 fbec 	bl	2582e <printk>
   21056:	2181      	movs	r1, #129	; 0x81
   21058:	4620      	mov	r0, r4
   2105a:	f004 fe6a 	bl	25d32 <assert_post_action>
   2105e:	e7ea      	b.n	21036 <z_unpend_first_thread+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21060:	f7fe ff76 	bl	1ff50 <pended_on_thread>
   21064:	4621      	mov	r1, r4
   21066:	f7ff f951 	bl	2030c <z_priq_dumb_remove>
   2106a:	7b63      	ldrb	r3, [r4, #13]
   2106c:	f023 0302 	bic.w	r3, r3, #2
   21070:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21072:	2300      	movs	r3, #0
   21074:	60a3      	str	r3, [r4, #8]
   21076:	f104 0018 	add.w	r0, r4, #24
   2107a:	f000 fc95 	bl	219a8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2107e:	4811      	ldr	r0, [pc, #68]	; (210c4 <z_unpend_first_thread+0xac>)
   21080:	f7fd fb08 	bl	1e694 <z_spin_unlock_valid>
   21084:	b160      	cbz	r0, 210a0 <z_unpend_first_thread+0x88>
	__asm__ volatile(
   21086:	f386 8811 	msr	BASEPRI, r6
   2108a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2108e:	2501      	movs	r5, #1
   21090:	b9b5      	cbnz	r5, 210c0 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
   21092:	4638      	mov	r0, r7
   21094:	f008 fc02 	bl	2989c <z_priq_dumb_best>
		if (thread != NULL) {
   21098:	4604      	mov	r4, r0
   2109a:	2800      	cmp	r0, #0
   2109c:	d1e0      	bne.n	21060 <z_unpend_first_thread+0x48>
   2109e:	e7ee      	b.n	2107e <z_unpend_first_thread+0x66>
   210a0:	4d09      	ldr	r5, [pc, #36]	; (210c8 <z_unpend_first_thread+0xb0>)
   210a2:	23ac      	movs	r3, #172	; 0xac
   210a4:	462a      	mov	r2, r5
   210a6:	490c      	ldr	r1, [pc, #48]	; (210d8 <z_unpend_first_thread+0xc0>)
   210a8:	4809      	ldr	r0, [pc, #36]	; (210d0 <z_unpend_first_thread+0xb8>)
   210aa:	f004 fbc0 	bl	2582e <printk>
   210ae:	4905      	ldr	r1, [pc, #20]	; (210c4 <z_unpend_first_thread+0xac>)
   210b0:	480a      	ldr	r0, [pc, #40]	; (210dc <z_unpend_first_thread+0xc4>)
   210b2:	f004 fbbc 	bl	2582e <printk>
   210b6:	21ac      	movs	r1, #172	; 0xac
   210b8:	4628      	mov	r0, r5
   210ba:	f004 fe3a 	bl	25d32 <assert_post_action>
   210be:	e7e2      	b.n	21086 <z_unpend_first_thread+0x6e>
}
   210c0:	4620      	mov	r0, r4
   210c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   210c4:	20002d60 	.word	0x20002d60
   210c8:	0002a314 	.word	0x0002a314
   210cc:	0002a36c 	.word	0x0002a36c
   210d0:	00029ff8 	.word	0x00029ff8
   210d4:	0002a384 	.word	0x0002a384
   210d8:	0002a33c 	.word	0x0002a33c
   210dc:	0002a354 	.word	0x0002a354

000210e0 <z_sched_init>:
{
   210e0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   210e2:	4804      	ldr	r0, [pc, #16]	; (210f4 <z_sched_init+0x14>)
   210e4:	f008 fbf2 	bl	298cc <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   210e8:	2100      	movs	r1, #0
   210ea:	4608      	mov	r0, r1
   210ec:	f7fe ff70 	bl	1ffd0 <k_sched_time_slice_set>
}
   210f0:	bd08      	pop	{r3, pc}
   210f2:	bf00      	nop
   210f4:	20002d34 	.word	0x20002d34

000210f8 <z_impl_k_yield>:
{
   210f8:	b570      	push	{r4, r5, r6, lr}
   210fa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   210fe:	2b00      	cmp	r3, #0
   21100:	d149      	bne.n	21196 <z_impl_k_yield+0x9e>
	__asm__ volatile(
   21102:	f04f 0340 	mov.w	r3, #64	; 0x40
   21106:	f3ef 8611 	mrs	r6, BASEPRI
   2110a:	f383 8812 	msr	BASEPRI_MAX, r3
   2110e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21112:	4843      	ldr	r0, [pc, #268]	; (21220 <z_impl_k_yield+0x128>)
   21114:	f7fd faae 	bl	1e674 <z_spin_lock_valid>
   21118:	2800      	cmp	r0, #0
   2111a:	d04d      	beq.n	211b8 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
   2111c:	4840      	ldr	r0, [pc, #256]	; (21220 <z_impl_k_yield+0x128>)
   2111e:	f7fd fac9 	bl	1e6b4 <z_spin_lock_set_owner>
		dequeue_thread(_current);
   21122:	4c40      	ldr	r4, [pc, #256]	; (21224 <z_impl_k_yield+0x12c>)
   21124:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21126:	7b4b      	ldrb	r3, [r1, #13]
   21128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2112c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2112e:	f104 0020 	add.w	r0, r4, #32
   21132:	f7ff f8eb 	bl	2030c <z_priq_dumb_remove>
	queue_thread(_current);
   21136:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   21138:	7b6b      	ldrb	r3, [r5, #13]
   2113a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2113e:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21140:	4b39      	ldr	r3, [pc, #228]	; (21228 <z_impl_k_yield+0x130>)
   21142:	429d      	cmp	r5, r3
   21144:	d048      	beq.n	211d8 <z_impl_k_yield+0xe0>
	return list->head == list;
   21146:	4b37      	ldr	r3, [pc, #220]	; (21224 <z_impl_k_yield+0x12c>)
   21148:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2114c:	429c      	cmp	r4, r3
   2114e:	d055      	beq.n	211fc <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21150:	b16c      	cbz	r4, 2116e <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21152:	4621      	mov	r1, r4
   21154:	4628      	mov	r0, r5
   21156:	f008 fb82 	bl	2985e <z_sched_prio_cmp>
   2115a:	2800      	cmp	r0, #0
   2115c:	dc48      	bgt.n	211f0 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2115e:	b134      	cbz	r4, 2116e <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
   21160:	4b30      	ldr	r3, [pc, #192]	; (21224 <z_impl_k_yield+0x12c>)
   21162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21164:	429c      	cmp	r4, r3
   21166:	d002      	beq.n	2116e <z_impl_k_yield+0x76>
   21168:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2116a:	2c00      	cmp	r4, #0
   2116c:	d1f0      	bne.n	21150 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
   2116e:	4b2d      	ldr	r3, [pc, #180]	; (21224 <z_impl_k_yield+0x12c>)
   21170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   21172:	f103 0120 	add.w	r1, r3, #32
   21176:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   21178:	606a      	str	r2, [r5, #4]
	tail->next = node;
   2117a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2117c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   2117e:	2001      	movs	r0, #1
   21180:	f7ff f946 	bl	20410 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21184:	4826      	ldr	r0, [pc, #152]	; (21220 <z_impl_k_yield+0x128>)
   21186:	f7fd fa85 	bl	1e694 <z_spin_unlock_valid>
   2118a:	2800      	cmp	r0, #0
   2118c:	d038      	beq.n	21200 <z_impl_k_yield+0x108>
   2118e:	4630      	mov	r0, r6
   21190:	f7f2 f8d6 	bl	13340 <arch_swap>
}
   21194:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
   21196:	4c25      	ldr	r4, [pc, #148]	; (2122c <z_impl_k_yield+0x134>)
   21198:	f240 43dc 	movw	r3, #1244	; 0x4dc
   2119c:	4622      	mov	r2, r4
   2119e:	4924      	ldr	r1, [pc, #144]	; (21230 <z_impl_k_yield+0x138>)
   211a0:	4824      	ldr	r0, [pc, #144]	; (21234 <z_impl_k_yield+0x13c>)
   211a2:	f004 fb44 	bl	2582e <printk>
   211a6:	4824      	ldr	r0, [pc, #144]	; (21238 <z_impl_k_yield+0x140>)
   211a8:	f004 fb41 	bl	2582e <printk>
   211ac:	f240 41dc 	movw	r1, #1244	; 0x4dc
   211b0:	4620      	mov	r0, r4
   211b2:	f004 fdbe 	bl	25d32 <assert_post_action>
   211b6:	e7a4      	b.n	21102 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   211b8:	4c20      	ldr	r4, [pc, #128]	; (2123c <z_impl_k_yield+0x144>)
   211ba:	2381      	movs	r3, #129	; 0x81
   211bc:	4622      	mov	r2, r4
   211be:	4920      	ldr	r1, [pc, #128]	; (21240 <z_impl_k_yield+0x148>)
   211c0:	481c      	ldr	r0, [pc, #112]	; (21234 <z_impl_k_yield+0x13c>)
   211c2:	f004 fb34 	bl	2582e <printk>
   211c6:	4916      	ldr	r1, [pc, #88]	; (21220 <z_impl_k_yield+0x128>)
   211c8:	481e      	ldr	r0, [pc, #120]	; (21244 <z_impl_k_yield+0x14c>)
   211ca:	f004 fb30 	bl	2582e <printk>
   211ce:	2181      	movs	r1, #129	; 0x81
   211d0:	4620      	mov	r0, r4
   211d2:	f004 fdae 	bl	25d32 <assert_post_action>
   211d6:	e7a1      	b.n	2111c <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   211d8:	4c14      	ldr	r4, [pc, #80]	; (2122c <z_impl_k_yield+0x134>)
   211da:	23ba      	movs	r3, #186	; 0xba
   211dc:	4622      	mov	r2, r4
   211de:	491a      	ldr	r1, [pc, #104]	; (21248 <z_impl_k_yield+0x150>)
   211e0:	4814      	ldr	r0, [pc, #80]	; (21234 <z_impl_k_yield+0x13c>)
   211e2:	f004 fb24 	bl	2582e <printk>
   211e6:	21ba      	movs	r1, #186	; 0xba
   211e8:	4620      	mov	r0, r4
   211ea:	f004 fda2 	bl	25d32 <assert_post_action>
   211ee:	e7aa      	b.n	21146 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
   211f0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   211f2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   211f4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   211f6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   211f8:	6065      	str	r5, [r4, #4]
}
   211fa:	e7c0      	b.n	2117e <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   211fc:	2400      	movs	r4, #0
   211fe:	e7a7      	b.n	21150 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21200:	4c0e      	ldr	r4, [pc, #56]	; (2123c <z_impl_k_yield+0x144>)
   21202:	23c3      	movs	r3, #195	; 0xc3
   21204:	4622      	mov	r2, r4
   21206:	4911      	ldr	r1, [pc, #68]	; (2124c <z_impl_k_yield+0x154>)
   21208:	480a      	ldr	r0, [pc, #40]	; (21234 <z_impl_k_yield+0x13c>)
   2120a:	f004 fb10 	bl	2582e <printk>
   2120e:	4904      	ldr	r1, [pc, #16]	; (21220 <z_impl_k_yield+0x128>)
   21210:	480f      	ldr	r0, [pc, #60]	; (21250 <z_impl_k_yield+0x158>)
   21212:	f004 fb0c 	bl	2582e <printk>
   21216:	21c3      	movs	r1, #195	; 0xc3
   21218:	4620      	mov	r0, r4
   2121a:	f004 fd8a 	bl	25d32 <assert_post_action>
   2121e:	e7b6      	b.n	2118e <z_impl_k_yield+0x96>
   21220:	20002d60 	.word	0x20002d60
   21224:	20002d18 	.word	0x20002d18
   21228:	20001cb0 	.word	0x20001cb0
   2122c:	0002d804 	.word	0x0002d804
   21230:	0002d500 	.word	0x0002d500
   21234:	00029ff8 	.word	0x00029ff8
   21238:	0002c900 	.word	0x0002c900
   2123c:	0002a314 	.word	0x0002a314
   21240:	0002a36c 	.word	0x0002a36c
   21244:	0002a384 	.word	0x0002a384
   21248:	0002d840 	.word	0x0002d840
   2124c:	0002a33c 	.word	0x0002a33c
   21250:	0002a354 	.word	0x0002a354

00021254 <z_tick_sleep>:
{
   21254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21258:	4604      	mov	r4, r0
   2125a:	460d      	mov	r5, r1
   2125c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21260:	2b00      	cmp	r3, #0
   21262:	d14f      	bne.n	21304 <z_tick_sleep+0xb0>
	if (ticks == 0) {
   21264:	ea54 0305 	orrs.w	r3, r4, r5
   21268:	d05e      	beq.n	21328 <z_tick_sleep+0xd4>
	if (Z_TICK_ABS(ticks) <= 0) {
   2126a:	f06f 0301 	mvn.w	r3, #1
   2126e:	1b1e      	subs	r6, r3, r4
   21270:	f04f 33ff 	mov.w	r3, #4294967295
   21274:	eb63 0705 	sbc.w	r7, r3, r5
   21278:	2e01      	cmp	r6, #1
   2127a:	f177 0300 	sbcs.w	r3, r7, #0
   2127e:	db57      	blt.n	21330 <z_tick_sleep+0xdc>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   21280:	f06f 0601 	mvn.w	r6, #1
   21284:	1b36      	subs	r6, r6, r4
   21286:	f04f 0340 	mov.w	r3, #64	; 0x40
   2128a:	f3ef 8911 	mrs	r9, BASEPRI
   2128e:	f383 8812 	msr	BASEPRI_MAX, r3
   21292:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21296:	4842      	ldr	r0, [pc, #264]	; (213a0 <z_tick_sleep+0x14c>)
   21298:	f7fd f9ec 	bl	1e674 <z_spin_lock_valid>
   2129c:	2800      	cmp	r0, #0
   2129e:	d04b      	beq.n	21338 <z_tick_sleep+0xe4>
	z_spin_lock_set_owner(l);
   212a0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 213a0 <z_tick_sleep+0x14c>
   212a4:	4640      	mov	r0, r8
   212a6:	f7fd fa05 	bl	1e6b4 <z_spin_lock_set_owner>
	pending_current = _current;
   212aa:	4f3e      	ldr	r7, [pc, #248]	; (213a4 <z_tick_sleep+0x150>)
   212ac:	68b8      	ldr	r0, [r7, #8]
   212ae:	4b3e      	ldr	r3, [pc, #248]	; (213a8 <z_tick_sleep+0x154>)
   212b0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   212b2:	f7ff fb59 	bl	20968 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   212b6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   212b8:	4622      	mov	r2, r4
   212ba:	462b      	mov	r3, r5
   212bc:	493b      	ldr	r1, [pc, #236]	; (213ac <z_tick_sleep+0x158>)
   212be:	3018      	adds	r0, #24
   212c0:	f000 fa76 	bl	217b0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   212c4:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   212c6:	7b53      	ldrb	r3, [r2, #13]
   212c8:	f043 0310 	orr.w	r3, r3, #16
   212cc:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212ce:	4640      	mov	r0, r8
   212d0:	f7fd f9e0 	bl	1e694 <z_spin_unlock_valid>
   212d4:	2800      	cmp	r0, #0
   212d6:	d03f      	beq.n	21358 <z_tick_sleep+0x104>
   212d8:	4648      	mov	r0, r9
   212da:	f7f2 f831 	bl	13340 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   212de:	4b31      	ldr	r3, [pc, #196]	; (213a4 <z_tick_sleep+0x150>)
   212e0:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
   212e2:	7b5b      	ldrb	r3, [r3, #13]
   212e4:	f013 0f10 	tst.w	r3, #16
   212e8:	d146      	bne.n	21378 <z_tick_sleep+0x124>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   212ea:	2500      	movs	r5, #0
   212ec:	f008 fb09 	bl	29902 <sys_clock_tick_get_32>
   212f0:	1a34      	subs	r4, r6, r0
   212f2:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   212f6:	2c01      	cmp	r4, #1
   212f8:	f175 0300 	sbcs.w	r3, r5, #0
   212fc:	da4d      	bge.n	2139a <z_tick_sleep+0x146>
	return 0;
   212fe:	2000      	movs	r0, #0
}
   21300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
   21304:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 213d0 <z_tick_sleep+0x17c>
   21308:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
   2130c:	4642      	mov	r2, r8
   2130e:	4928      	ldr	r1, [pc, #160]	; (213b0 <z_tick_sleep+0x15c>)
   21310:	4828      	ldr	r0, [pc, #160]	; (213b4 <z_tick_sleep+0x160>)
   21312:	f004 fa8c 	bl	2582e <printk>
   21316:	4828      	ldr	r0, [pc, #160]	; (213b8 <z_tick_sleep+0x164>)
   21318:	f004 fa89 	bl	2582e <printk>
   2131c:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   21320:	4640      	mov	r0, r8
   21322:	f004 fd06 	bl	25d32 <assert_post_action>
   21326:	e79d      	b.n	21264 <z_tick_sleep+0x10>
	z_impl_k_yield();
   21328:	f7ff fee6 	bl	210f8 <z_impl_k_yield>
		return 0;
   2132c:	2000      	movs	r0, #0
   2132e:	e7e7      	b.n	21300 <z_tick_sleep+0xac>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   21330:	f008 fae7 	bl	29902 <sys_clock_tick_get_32>
   21334:	1906      	adds	r6, r0, r4
   21336:	e7a6      	b.n	21286 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21338:	4f20      	ldr	r7, [pc, #128]	; (213bc <z_tick_sleep+0x168>)
   2133a:	2381      	movs	r3, #129	; 0x81
   2133c:	463a      	mov	r2, r7
   2133e:	4920      	ldr	r1, [pc, #128]	; (213c0 <z_tick_sleep+0x16c>)
   21340:	481c      	ldr	r0, [pc, #112]	; (213b4 <z_tick_sleep+0x160>)
   21342:	f004 fa74 	bl	2582e <printk>
   21346:	4916      	ldr	r1, [pc, #88]	; (213a0 <z_tick_sleep+0x14c>)
   21348:	481e      	ldr	r0, [pc, #120]	; (213c4 <z_tick_sleep+0x170>)
   2134a:	f004 fa70 	bl	2582e <printk>
   2134e:	2181      	movs	r1, #129	; 0x81
   21350:	4638      	mov	r0, r7
   21352:	f004 fcee 	bl	25d32 <assert_post_action>
   21356:	e7a3      	b.n	212a0 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21358:	4c18      	ldr	r4, [pc, #96]	; (213bc <z_tick_sleep+0x168>)
   2135a:	23c3      	movs	r3, #195	; 0xc3
   2135c:	4622      	mov	r2, r4
   2135e:	491a      	ldr	r1, [pc, #104]	; (213c8 <z_tick_sleep+0x174>)
   21360:	4814      	ldr	r0, [pc, #80]	; (213b4 <z_tick_sleep+0x160>)
   21362:	f004 fa64 	bl	2582e <printk>
   21366:	4641      	mov	r1, r8
   21368:	4818      	ldr	r0, [pc, #96]	; (213cc <z_tick_sleep+0x178>)
   2136a:	f004 fa60 	bl	2582e <printk>
   2136e:	21c3      	movs	r1, #195	; 0xc3
   21370:	4620      	mov	r0, r4
   21372:	f004 fcde 	bl	25d32 <assert_post_action>
   21376:	e7af      	b.n	212d8 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21378:	4c15      	ldr	r4, [pc, #84]	; (213d0 <z_tick_sleep+0x17c>)
   2137a:	f240 5319 	movw	r3, #1305	; 0x519
   2137e:	4622      	mov	r2, r4
   21380:	4914      	ldr	r1, [pc, #80]	; (213d4 <z_tick_sleep+0x180>)
   21382:	480c      	ldr	r0, [pc, #48]	; (213b4 <z_tick_sleep+0x160>)
   21384:	f004 fa53 	bl	2582e <printk>
   21388:	480b      	ldr	r0, [pc, #44]	; (213b8 <z_tick_sleep+0x164>)
   2138a:	f004 fa50 	bl	2582e <printk>
   2138e:	f240 5119 	movw	r1, #1305	; 0x519
   21392:	4620      	mov	r0, r4
   21394:	f004 fccd 	bl	25d32 <assert_post_action>
   21398:	e7a7      	b.n	212ea <z_tick_sleep+0x96>
		return ticks;
   2139a:	4620      	mov	r0, r4
   2139c:	e7b0      	b.n	21300 <z_tick_sleep+0xac>
   2139e:	bf00      	nop
   213a0:	20002d60 	.word	0x20002d60
   213a4:	20002d18 	.word	0x20002d18
   213a8:	20002d5c 	.word	0x20002d5c
   213ac:	00020889 	.word	0x00020889
   213b0:	0002d500 	.word	0x0002d500
   213b4:	00029ff8 	.word	0x00029ff8
   213b8:	0002c900 	.word	0x0002c900
   213bc:	0002a314 	.word	0x0002a314
   213c0:	0002a36c 	.word	0x0002a36c
   213c4:	0002a384 	.word	0x0002a384
   213c8:	0002a33c 	.word	0x0002a33c
   213cc:	0002a354 	.word	0x0002a354
   213d0:	0002d804 	.word	0x0002d804
   213d4:	0002d8c0 	.word	0x0002d8c0

000213d8 <z_impl_k_sleep>:
{
   213d8:	b570      	push	{r4, r5, r6, lr}
   213da:	4604      	mov	r4, r0
   213dc:	460d      	mov	r5, r1
   213de:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   213e2:	bb13      	cbnz	r3, 2142a <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   213e4:	f1b5 3fff 	cmp.w	r5, #4294967295
   213e8:	bf08      	it	eq
   213ea:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   213ee:	d02d      	beq.n	2144c <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
   213f0:	4620      	mov	r0, r4
   213f2:	4629      	mov	r1, r5
   213f4:	f7ff ff2e 	bl	21254 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   213f8:	4604      	mov	r4, r0
   213fa:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   213fc:	0169      	lsls	r1, r5, #5
   213fe:	0143      	lsls	r3, r0, #5
   21400:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   21404:	1a18      	subs	r0, r3, r0
   21406:	eb62 0305 	sbc.w	r3, r2, r5
   2140a:	009a      	lsls	r2, r3, #2
   2140c:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   21410:	0081      	lsls	r1, r0, #2
   21412:	4613      	mov	r3, r2
   21414:	1908      	adds	r0, r1, r4
   21416:	eb45 0303 	adc.w	r3, r5, r3
   2141a:	00da      	lsls	r2, r3, #3
   2141c:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   21420:	00c1      	lsls	r1, r0, #3
   21422:	0bc8      	lsrs	r0, r1, #15
   21424:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   21428:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
   2142a:	4e0c      	ldr	r6, [pc, #48]	; (2145c <z_impl_k_sleep+0x84>)
   2142c:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   21430:	4632      	mov	r2, r6
   21432:	490b      	ldr	r1, [pc, #44]	; (21460 <z_impl_k_sleep+0x88>)
   21434:	480b      	ldr	r0, [pc, #44]	; (21464 <z_impl_k_sleep+0x8c>)
   21436:	f004 f9fa 	bl	2582e <printk>
   2143a:	480b      	ldr	r0, [pc, #44]	; (21468 <z_impl_k_sleep+0x90>)
   2143c:	f004 f9f7 	bl	2582e <printk>
   21440:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   21444:	4630      	mov	r0, r6
   21446:	f004 fc74 	bl	25d32 <assert_post_action>
   2144a:	e7cb      	b.n	213e4 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
   2144c:	4b07      	ldr	r3, [pc, #28]	; (2146c <z_impl_k_sleep+0x94>)
   2144e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21450:	f7ff fc24 	bl	20c9c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   21454:	f04f 30ff 	mov.w	r0, #4294967295
   21458:	e7e6      	b.n	21428 <z_impl_k_sleep+0x50>
   2145a:	bf00      	nop
   2145c:	0002d804 	.word	0x0002d804
   21460:	0002d500 	.word	0x0002d500
   21464:	00029ff8 	.word	0x00029ff8
   21468:	0002c900 	.word	0x0002c900
   2146c:	20002d18 	.word	0x20002d18

00021470 <z_impl_z_current_get>:
}
   21470:	4b01      	ldr	r3, [pc, #4]	; (21478 <z_impl_z_current_get+0x8>)
   21472:	6898      	ldr	r0, [r3, #8]
   21474:	4770      	bx	lr
   21476:	bf00      	nop
   21478:	20002d18 	.word	0x20002d18

0002147c <z_impl_k_is_preempt_thread>:
   2147c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   21480:	b933      	cbnz	r3, 21490 <z_impl_k_is_preempt_thread+0x14>
   21482:	4b05      	ldr	r3, [pc, #20]	; (21498 <z_impl_k_is_preempt_thread+0x1c>)
   21484:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   21486:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   21488:	2b7f      	cmp	r3, #127	; 0x7f
   2148a:	d803      	bhi.n	21494 <z_impl_k_is_preempt_thread+0x18>
   2148c:	2001      	movs	r0, #1
   2148e:	4770      	bx	lr
   21490:	2000      	movs	r0, #0
   21492:	4770      	bx	lr
   21494:	2000      	movs	r0, #0
}
   21496:	4770      	bx	lr
   21498:	20002d18 	.word	0x20002d18

0002149c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   2149c:	b570      	push	{r4, r5, r6, lr}
   2149e:	4604      	mov	r4, r0
   214a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   214a4:	f3ef 8511 	mrs	r5, BASEPRI
   214a8:	f383 8812 	msr	BASEPRI_MAX, r3
   214ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214b0:	4840      	ldr	r0, [pc, #256]	; (215b4 <z_thread_abort+0x118>)
   214b2:	f7fd f8df 	bl	1e674 <z_spin_lock_valid>
   214b6:	b1b8      	cbz	r0, 214e8 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
   214b8:	483e      	ldr	r0, [pc, #248]	; (215b4 <z_thread_abort+0x118>)
   214ba:	f7fd f8fb 	bl	1e6b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   214be:	7b63      	ldrb	r3, [r4, #13]
   214c0:	f013 0f08 	tst.w	r3, #8
   214c4:	d120      	bne.n	21508 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
   214c6:	4620      	mov	r0, r4
   214c8:	f7ff fcf8 	bl	20ebc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   214cc:	4b3a      	ldr	r3, [pc, #232]	; (215b8 <z_thread_abort+0x11c>)
   214ce:	689b      	ldr	r3, [r3, #8]
   214d0:	42a3      	cmp	r3, r4
   214d2:	d032      	beq.n	2153a <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214d4:	4837      	ldr	r0, [pc, #220]	; (215b4 <z_thread_abort+0x118>)
   214d6:	f7fd f8dd 	bl	1e694 <z_spin_unlock_valid>
   214da:	2800      	cmp	r0, #0
   214dc:	d059      	beq.n	21592 <z_thread_abort+0xf6>
	__asm__ volatile(
   214de:	f385 8811 	msr	BASEPRI, r5
   214e2:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   214e6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214e8:	4e34      	ldr	r6, [pc, #208]	; (215bc <z_thread_abort+0x120>)
   214ea:	2381      	movs	r3, #129	; 0x81
   214ec:	4632      	mov	r2, r6
   214ee:	4934      	ldr	r1, [pc, #208]	; (215c0 <z_thread_abort+0x124>)
   214f0:	4834      	ldr	r0, [pc, #208]	; (215c4 <z_thread_abort+0x128>)
   214f2:	f004 f99c 	bl	2582e <printk>
   214f6:	492f      	ldr	r1, [pc, #188]	; (215b4 <z_thread_abort+0x118>)
   214f8:	4833      	ldr	r0, [pc, #204]	; (215c8 <z_thread_abort+0x12c>)
   214fa:	f004 f998 	bl	2582e <printk>
   214fe:	2181      	movs	r1, #129	; 0x81
   21500:	4630      	mov	r0, r6
   21502:	f004 fc16 	bl	25d32 <assert_post_action>
   21506:	e7d7      	b.n	214b8 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21508:	482a      	ldr	r0, [pc, #168]	; (215b4 <z_thread_abort+0x118>)
   2150a:	f7fd f8c3 	bl	1e694 <z_spin_unlock_valid>
   2150e:	b120      	cbz	r0, 2151a <z_thread_abort+0x7e>
   21510:	f385 8811 	msr	BASEPRI, r5
   21514:	f3bf 8f6f 	isb	sy
		return;
   21518:	e7e5      	b.n	214e6 <z_thread_abort+0x4a>
   2151a:	4c28      	ldr	r4, [pc, #160]	; (215bc <z_thread_abort+0x120>)
   2151c:	23ac      	movs	r3, #172	; 0xac
   2151e:	4622      	mov	r2, r4
   21520:	492a      	ldr	r1, [pc, #168]	; (215cc <z_thread_abort+0x130>)
   21522:	4828      	ldr	r0, [pc, #160]	; (215c4 <z_thread_abort+0x128>)
   21524:	f004 f983 	bl	2582e <printk>
   21528:	4922      	ldr	r1, [pc, #136]	; (215b4 <z_thread_abort+0x118>)
   2152a:	4829      	ldr	r0, [pc, #164]	; (215d0 <z_thread_abort+0x134>)
   2152c:	f004 f97f 	bl	2582e <printk>
   21530:	21ac      	movs	r1, #172	; 0xac
   21532:	4620      	mov	r0, r4
   21534:	f004 fbfd 	bl	25d32 <assert_post_action>
   21538:	e7ea      	b.n	21510 <z_thread_abort+0x74>
   2153a:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
   2153e:	2b00      	cmp	r3, #0
   21540:	d1c8      	bne.n	214d4 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21542:	481c      	ldr	r0, [pc, #112]	; (215b4 <z_thread_abort+0x118>)
   21544:	f7fd f8a6 	bl	1e694 <z_spin_unlock_valid>
   21548:	b198      	cbz	r0, 21572 <z_thread_abort+0xd6>
   2154a:	4628      	mov	r0, r5
   2154c:	f7f1 fef8 	bl	13340 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   21550:	4c20      	ldr	r4, [pc, #128]	; (215d4 <z_thread_abort+0x138>)
   21552:	f240 634b 	movw	r3, #1611	; 0x64b
   21556:	4622      	mov	r2, r4
   21558:	491f      	ldr	r1, [pc, #124]	; (215d8 <z_thread_abort+0x13c>)
   2155a:	481a      	ldr	r0, [pc, #104]	; (215c4 <z_thread_abort+0x128>)
   2155c:	f004 f967 	bl	2582e <printk>
   21560:	481e      	ldr	r0, [pc, #120]	; (215dc <z_thread_abort+0x140>)
   21562:	f004 f964 	bl	2582e <printk>
   21566:	f240 614b 	movw	r1, #1611	; 0x64b
   2156a:	4620      	mov	r0, r4
   2156c:	f004 fbe1 	bl	25d32 <assert_post_action>
   21570:	e7b0      	b.n	214d4 <z_thread_abort+0x38>
   21572:	4c12      	ldr	r4, [pc, #72]	; (215bc <z_thread_abort+0x120>)
   21574:	23c3      	movs	r3, #195	; 0xc3
   21576:	4622      	mov	r2, r4
   21578:	4914      	ldr	r1, [pc, #80]	; (215cc <z_thread_abort+0x130>)
   2157a:	4812      	ldr	r0, [pc, #72]	; (215c4 <z_thread_abort+0x128>)
   2157c:	f004 f957 	bl	2582e <printk>
   21580:	490c      	ldr	r1, [pc, #48]	; (215b4 <z_thread_abort+0x118>)
   21582:	4813      	ldr	r0, [pc, #76]	; (215d0 <z_thread_abort+0x134>)
   21584:	f004 f953 	bl	2582e <printk>
   21588:	21c3      	movs	r1, #195	; 0xc3
   2158a:	4620      	mov	r0, r4
   2158c:	f004 fbd1 	bl	25d32 <assert_post_action>
   21590:	e7db      	b.n	2154a <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21592:	4c0a      	ldr	r4, [pc, #40]	; (215bc <z_thread_abort+0x120>)
   21594:	23ac      	movs	r3, #172	; 0xac
   21596:	4622      	mov	r2, r4
   21598:	490c      	ldr	r1, [pc, #48]	; (215cc <z_thread_abort+0x130>)
   2159a:	480a      	ldr	r0, [pc, #40]	; (215c4 <z_thread_abort+0x128>)
   2159c:	f004 f947 	bl	2582e <printk>
   215a0:	4904      	ldr	r1, [pc, #16]	; (215b4 <z_thread_abort+0x118>)
   215a2:	480b      	ldr	r0, [pc, #44]	; (215d0 <z_thread_abort+0x134>)
   215a4:	f004 f943 	bl	2582e <printk>
   215a8:	21ac      	movs	r1, #172	; 0xac
   215aa:	4620      	mov	r0, r4
   215ac:	f004 fbc1 	bl	25d32 <assert_post_action>
   215b0:	e795      	b.n	214de <z_thread_abort+0x42>
   215b2:	bf00      	nop
   215b4:	20002d60 	.word	0x20002d60
   215b8:	20002d18 	.word	0x20002d18
   215bc:	0002a314 	.word	0x0002a314
   215c0:	0002a36c 	.word	0x0002a36c
   215c4:	00029ff8 	.word	0x00029ff8
   215c8:	0002a384 	.word	0x0002a384
   215cc:	0002a33c 	.word	0x0002a33c
   215d0:	0002a354 	.word	0x0002a354
   215d4:	0002d804 	.word	0x0002d804
   215d8:	0002dc18 	.word	0x0002dc18
   215dc:	0002d900 	.word	0x0002d900

000215e0 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   215e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   215e4:	4606      	mov	r6, r0
   215e6:	460f      	mov	r7, r1
   215e8:	4690      	mov	r8, r2
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
   215ea:	2400      	movs	r4, #0
	__asm__ volatile(
   215ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   215f0:	f3ef 8511 	mrs	r5, BASEPRI
   215f4:	f383 8812 	msr	BASEPRI_MAX, r3
   215f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   215fc:	482b      	ldr	r0, [pc, #172]	; (216ac <z_sched_wake+0xcc>)
   215fe:	f7fd f839 	bl	1e674 <z_spin_lock_valid>
   21602:	b128      	cbz	r0, 21610 <z_sched_wake+0x30>
	z_spin_lock_set_owner(l);
   21604:	4829      	ldr	r0, [pc, #164]	; (216ac <z_sched_wake+0xcc>)
   21606:	f7fd f855 	bl	1e6b4 <z_spin_lock_set_owner>
	bool ret = false;
   2160a:	f04f 0900 	mov.w	r9, #0
	return k;
   2160e:	e031      	b.n	21674 <z_sched_wake+0x94>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21610:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 216bc <z_sched_wake+0xdc>
   21614:	2381      	movs	r3, #129	; 0x81
   21616:	464a      	mov	r2, r9
   21618:	4925      	ldr	r1, [pc, #148]	; (216b0 <z_sched_wake+0xd0>)
   2161a:	4826      	ldr	r0, [pc, #152]	; (216b4 <z_sched_wake+0xd4>)
   2161c:	f004 f907 	bl	2582e <printk>
   21620:	4922      	ldr	r1, [pc, #136]	; (216ac <z_sched_wake+0xcc>)
   21622:	4825      	ldr	r0, [pc, #148]	; (216b8 <z_sched_wake+0xd8>)
   21624:	f004 f903 	bl	2582e <printk>
   21628:	2181      	movs	r1, #129	; 0x81
   2162a:	4648      	mov	r0, r9
   2162c:	f004 fb81 	bl	25d32 <assert_post_action>
   21630:	e7e8      	b.n	21604 <z_sched_wake+0x24>
   21632:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   21636:	f8c0 8014 	str.w	r8, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2163a:	f7fe fc89 	bl	1ff50 <pended_on_thread>
   2163e:	4621      	mov	r1, r4
   21640:	f7fe fe64 	bl	2030c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21644:	7b63      	ldrb	r3, [r4, #13]
   21646:	f023 0302 	bic.w	r3, r3, #2
   2164a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2164c:	2300      	movs	r3, #0
   2164e:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   21650:	f104 0018 	add.w	r0, r4, #24
   21654:	f000 f9a8 	bl	219a8 <z_abort_timeout>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   21658:	4620      	mov	r0, r4
   2165a:	f7ff f811 	bl	20680 <ready_thread>
			ret = true;
   2165e:	f04f 0901 	mov.w	r9, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21662:	4812      	ldr	r0, [pc, #72]	; (216ac <z_sched_wake+0xcc>)
   21664:	f7fd f816 	bl	1e694 <z_spin_unlock_valid>
   21668:	b160      	cbz	r0, 21684 <z_sched_wake+0xa4>
	__asm__ volatile(
   2166a:	f385 8811 	msr	BASEPRI, r5
   2166e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   21672:	2401      	movs	r4, #1
   21674:	b9b4      	cbnz	r4, 216a4 <z_sched_wake+0xc4>
		thread = _priq_wait_best(&wait_q->waitq);
   21676:	4630      	mov	r0, r6
   21678:	f008 f910 	bl	2989c <z_priq_dumb_best>
		if (thread != NULL) {
   2167c:	4604      	mov	r4, r0
   2167e:	2800      	cmp	r0, #0
   21680:	d1d7      	bne.n	21632 <z_sched_wake+0x52>
   21682:	e7ee      	b.n	21662 <z_sched_wake+0x82>
   21684:	4c0d      	ldr	r4, [pc, #52]	; (216bc <z_sched_wake+0xdc>)
   21686:	23ac      	movs	r3, #172	; 0xac
   21688:	4622      	mov	r2, r4
   2168a:	490d      	ldr	r1, [pc, #52]	; (216c0 <z_sched_wake+0xe0>)
   2168c:	4809      	ldr	r0, [pc, #36]	; (216b4 <z_sched_wake+0xd4>)
   2168e:	f004 f8ce 	bl	2582e <printk>
   21692:	4906      	ldr	r1, [pc, #24]	; (216ac <z_sched_wake+0xcc>)
   21694:	480b      	ldr	r0, [pc, #44]	; (216c4 <z_sched_wake+0xe4>)
   21696:	f004 f8ca 	bl	2582e <printk>
   2169a:	21ac      	movs	r1, #172	; 0xac
   2169c:	4620      	mov	r0, r4
   2169e:	f004 fb48 	bl	25d32 <assert_post_action>
   216a2:	e7e2      	b.n	2166a <z_sched_wake+0x8a>
		}
	}

	return ret;
}
   216a4:	4648      	mov	r0, r9
   216a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   216aa:	bf00      	nop
   216ac:	20002d60 	.word	0x20002d60
   216b0:	0002a36c 	.word	0x0002a36c
   216b4:	00029ff8 	.word	0x00029ff8
   216b8:	0002a384 	.word	0x0002a384
   216bc:	0002a314 	.word	0x0002a314
   216c0:	0002a33c 	.word	0x0002a33c
   216c4:	0002a354 	.word	0x0002a354

000216c8 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   216c8:	b5d0      	push	{r4, r6, r7, lr}
   216ca:	b082      	sub	sp, #8
   216cc:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   216ce:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   216d2:	e9cd 6700 	strd	r6, r7, [sp]
   216d6:	f7ff fa01 	bl	20adc <z_pend_curr>

	if (data != NULL) {
   216da:	b11c      	cbz	r4, 216e4 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   216dc:	4b02      	ldr	r3, [pc, #8]	; (216e8 <z_sched_wait+0x20>)
   216de:	689b      	ldr	r3, [r3, #8]
   216e0:	695b      	ldr	r3, [r3, #20]
   216e2:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   216e4:	b002      	add	sp, #8
   216e6:	bdd0      	pop	{r4, r6, r7, pc}
   216e8:	20002d18 	.word	0x20002d18

000216ec <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   216ec:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   216ee:	4806      	ldr	r0, [pc, #24]	; (21708 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   216f0:	4a06      	ldr	r2, [pc, #24]	; (2170c <z_data_copy+0x20>)
   216f2:	1a12      	subs	r2, r2, r0
   216f4:	4906      	ldr	r1, [pc, #24]	; (21710 <z_data_copy+0x24>)
   216f6:	f005 f87f 	bl	267f8 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   216fa:	4a06      	ldr	r2, [pc, #24]	; (21714 <z_data_copy+0x28>)
   216fc:	4906      	ldr	r1, [pc, #24]	; (21718 <z_data_copy+0x2c>)
   216fe:	4807      	ldr	r0, [pc, #28]	; (2171c <z_data_copy+0x30>)
   21700:	f005 f87a 	bl	267f8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21704:	bd08      	pop	{r3, pc}
   21706:	bf00      	nop
   21708:	20000000 	.word	0x20000000
   2170c:	20000948 	.word	0x20000948
   21710:	0002de04 	.word	0x0002de04
   21714:	00000000 	.word	0x00000000
   21718:	0002de04 	.word	0x0002de04
   2171c:	20000000 	.word	0x20000000

00021720 <first>:
	return list->head == list;
   21720:	4b03      	ldr	r3, [pc, #12]	; (21730 <first+0x10>)
   21722:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21724:	4298      	cmp	r0, r3
   21726:	d000      	beq.n	2172a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   21728:	4770      	bx	lr
   2172a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   2172c:	e7fc      	b.n	21728 <first+0x8>
   2172e:	bf00      	nop
   21730:	20000634 	.word	0x20000634

00021734 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21734:	b130      	cbz	r0, 21744 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   21736:	4a04      	ldr	r2, [pc, #16]	; (21748 <next+0x14>)
   21738:	6852      	ldr	r2, [r2, #4]
   2173a:	4290      	cmp	r0, r2
   2173c:	d001      	beq.n	21742 <next+0xe>
   2173e:	6800      	ldr	r0, [r0, #0]
   21740:	4770      	bx	lr
   21742:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   21744:	4770      	bx	lr
   21746:	bf00      	nop
   21748:	20000634 	.word	0x20000634

0002174c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   2174c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2174e:	4b04      	ldr	r3, [pc, #16]	; (21760 <elapsed+0x14>)
   21750:	681b      	ldr	r3, [r3, #0]
   21752:	b10b      	cbz	r3, 21758 <elapsed+0xc>
   21754:	2000      	movs	r0, #0
}
   21756:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   21758:	f7fa fd32 	bl	1c1c0 <sys_clock_elapsed>
   2175c:	e7fb      	b.n	21756 <elapsed+0xa>
   2175e:	bf00      	nop
   21760:	20002d6c 	.word	0x20002d6c

00021764 <next_timeout>:

static int32_t next_timeout(void)
{
   21764:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   21766:	f7ff ffdb 	bl	21720 <first>
   2176a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   2176c:	f7ff ffee 	bl	2174c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   21770:	b18c      	cbz	r4, 21796 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   21772:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   21776:	1a12      	subs	r2, r2, r0
   21778:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   2177c:	2a01      	cmp	r2, #1
   2177e:	f173 0100 	sbcs.w	r1, r3, #0
   21782:	db11      	blt.n	217a8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   21784:	4610      	mov	r0, r2
   21786:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   2178a:	f173 0300 	sbcs.w	r3, r3, #0
   2178e:	db04      	blt.n	2179a <next_timeout+0x36>
   21790:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21794:	e001      	b.n	2179a <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   21796:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2179a:	4b04      	ldr	r3, [pc, #16]	; (217ac <next_timeout+0x48>)
   2179c:	691b      	ldr	r3, [r3, #16]
   2179e:	b113      	cbz	r3, 217a6 <next_timeout+0x42>
   217a0:	4283      	cmp	r3, r0
   217a2:	da00      	bge.n	217a6 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   217a4:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   217a6:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   217a8:	2000      	movs	r0, #0
   217aa:	e7f6      	b.n	2179a <next_timeout+0x36>
   217ac:	20002d18 	.word	0x20002d18

000217b0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   217b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217b4:	b087      	sub	sp, #28
   217b6:	9100      	str	r1, [sp, #0]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   217b8:	f1b3 3fff 	cmp.w	r3, #4294967295
   217bc:	bf08      	it	eq
   217be:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   217c2:	f000 80d3 	beq.w	2196c <z_add_timeout+0x1bc>
   217c6:	4604      	mov	r4, r0
   217c8:	4616      	mov	r6, r2
   217ca:	461f      	mov	r7, r3
	return node->next != NULL;
   217cc:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   217ce:	b16b      	cbz	r3, 217ec <z_add_timeout+0x3c>
   217d0:	4d68      	ldr	r5, [pc, #416]	; (21974 <z_add_timeout+0x1c4>)
   217d2:	235d      	movs	r3, #93	; 0x5d
   217d4:	462a      	mov	r2, r5
   217d6:	4968      	ldr	r1, [pc, #416]	; (21978 <z_add_timeout+0x1c8>)
   217d8:	4868      	ldr	r0, [pc, #416]	; (2197c <z_add_timeout+0x1cc>)
   217da:	f004 f828 	bl	2582e <printk>
   217de:	4868      	ldr	r0, [pc, #416]	; (21980 <z_add_timeout+0x1d0>)
   217e0:	f004 f825 	bl	2582e <printk>
   217e4:	215d      	movs	r1, #93	; 0x5d
   217e6:	4628      	mov	r0, r5
   217e8:	f004 faa3 	bl	25d32 <assert_post_action>
	to->fn = fn;
   217ec:	9b00      	ldr	r3, [sp, #0]
   217ee:	60a3      	str	r3, [r4, #8]

	LOCKED(&timeout_lock) {
   217f0:	2500      	movs	r5, #0
	__asm__ volatile(
   217f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   217f6:	f3ef 8211 	mrs	r2, BASEPRI
   217fa:	f383 8812 	msr	BASEPRI_MAX, r3
   217fe:	f3bf 8f6f 	isb	sy
   21802:	9200      	str	r2, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21804:	485f      	ldr	r0, [pc, #380]	; (21984 <z_add_timeout+0x1d4>)
   21806:	f7fc ff35 	bl	1e674 <z_spin_lock_valid>
   2180a:	b140      	cbz	r0, 2181e <z_add_timeout+0x6e>
	z_spin_lock_set_owner(l);
   2180c:	485d      	ldr	r0, [pc, #372]	; (21984 <z_add_timeout+0x1d4>)
   2180e:	f7fc ff51 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   21812:	9b00      	ldr	r3, [sp, #0]
   21814:	9303      	str	r3, [sp, #12]
   21816:	e9cd ab00 	strd	sl, fp, [sp]
   2181a:	46a3      	mov	fp, r4
   2181c:	e040      	b.n	218a0 <z_add_timeout+0xf0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2181e:	2381      	movs	r3, #129	; 0x81
   21820:	4a59      	ldr	r2, [pc, #356]	; (21988 <z_add_timeout+0x1d8>)
   21822:	495a      	ldr	r1, [pc, #360]	; (2198c <z_add_timeout+0x1dc>)
   21824:	4855      	ldr	r0, [pc, #340]	; (2197c <z_add_timeout+0x1cc>)
   21826:	f004 f802 	bl	2582e <printk>
   2182a:	4956      	ldr	r1, [pc, #344]	; (21984 <z_add_timeout+0x1d4>)
   2182c:	4858      	ldr	r0, [pc, #352]	; (21990 <z_add_timeout+0x1e0>)
   2182e:	f003 fffe 	bl	2582e <printk>
   21832:	2181      	movs	r1, #129	; 0x81
   21834:	4854      	ldr	r0, [pc, #336]	; (21988 <z_add_timeout+0x1d8>)
   21836:	f004 fa7c 	bl	25d32 <assert_post_action>
   2183a:	e7e7      	b.n	2180c <z_add_timeout+0x5c>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   2183c:	2201      	movs	r2, #1
   2183e:	2300      	movs	r3, #0
   21840:	e052      	b.n	218e8 <z_add_timeout+0x138>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   21842:	f7ff ff83 	bl	2174c <elapsed>
   21846:	1833      	adds	r3, r6, r0
   21848:	eb47 74e0 	adc.w	r4, r7, r0, asr #31
   2184c:	1c5a      	adds	r2, r3, #1
   2184e:	f144 0300 	adc.w	r3, r4, #0
   21852:	f8cb 2010 	str.w	r2, [fp, #16]
   21856:	f8cb 3014 	str.w	r3, [fp, #20]
   2185a:	e049      	b.n	218f0 <z_add_timeout+0x140>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   2185c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21860:	1aa2      	subs	r2, r4, r2
   21862:	9b05      	ldr	r3, [sp, #20]
   21864:	eb65 0303 	sbc.w	r3, r5, r3
   21868:	6102      	str	r2, [r0, #16]
   2186a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   2186c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   2186e:	f8cb 3004 	str.w	r3, [fp, #4]
	node->next = successor;
   21872:	f8cb 0000 	str.w	r0, [fp]
	prev->next = node;
   21876:	f8c3 b000 	str.w	fp, [r3]
	successor->prev = node;
   2187a:	f8c0 b004 	str.w	fp, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   2187e:	2800      	cmp	r0, #0
   21880:	d04c      	beq.n	2191c <z_add_timeout+0x16c>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   21882:	f7ff ff4d 	bl	21720 <first>
   21886:	4583      	cmp	fp, r0
   21888:	d053      	beq.n	21932 <z_add_timeout+0x182>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2188a:	483e      	ldr	r0, [pc, #248]	; (21984 <z_add_timeout+0x1d4>)
   2188c:	f7fc ff02 	bl	1e694 <z_spin_unlock_valid>
   21890:	2800      	cmp	r0, #0
   21892:	d05b      	beq.n	2194c <z_add_timeout+0x19c>
	__asm__ volatile(
   21894:	9b03      	ldr	r3, [sp, #12]
   21896:	f383 8811 	msr	BASEPRI, r3
   2189a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2189e:	2501      	movs	r5, #1
   218a0:	2d00      	cmp	r5, #0
   218a2:	d163      	bne.n	2196c <z_add_timeout+0x1bc>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   218a4:	f06f 0301 	mvn.w	r3, #1
   218a8:	ebb3 0806 	subs.w	r8, r3, r6
   218ac:	f04f 30ff 	mov.w	r0, #4294967295
   218b0:	eb60 0907 	sbc.w	r9, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   218b4:	f1b8 0f00 	cmp.w	r8, #0
   218b8:	f179 0300 	sbcs.w	r3, r9, #0
   218bc:	dbc1      	blt.n	21842 <z_add_timeout+0x92>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   218be:	4a35      	ldr	r2, [pc, #212]	; (21994 <z_add_timeout+0x1e4>)
   218c0:	6813      	ldr	r3, [r2, #0]
   218c2:	6852      	ldr	r2, [r2, #4]
   218c4:	18f3      	adds	r3, r6, r3
   218c6:	eb47 0202 	adc.w	r2, r7, r2
   218ca:	f06f 0101 	mvn.w	r1, #1
   218ce:	1acb      	subs	r3, r1, r3
   218d0:	9300      	str	r3, [sp, #0]
   218d2:	eb60 0302 	sbc.w	r3, r0, r2
   218d6:	9301      	str	r3, [sp, #4]
			to->dticks = MAX(1, ticks);
   218d8:	e9dd 0100 	ldrd	r0, r1, [sp]
   218dc:	4602      	mov	r2, r0
   218de:	460b      	mov	r3, r1
   218e0:	2801      	cmp	r0, #1
   218e2:	f171 0100 	sbcs.w	r1, r1, #0
   218e6:	dba9      	blt.n	2183c <z_add_timeout+0x8c>
   218e8:	f8cb 2010 	str.w	r2, [fp, #16]
   218ec:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
   218f0:	f7ff ff16 	bl	21720 <first>
   218f4:	2800      	cmp	r0, #0
   218f6:	d0c2      	beq.n	2187e <z_add_timeout+0xce>
			if (t->dticks > to->dticks) {
   218f8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   218fc:	e9db 2304 	ldrd	r2, r3, [fp, #16]
   21900:	42a2      	cmp	r2, r4
   21902:	eb73 0105 	sbcs.w	r1, r3, r5
   21906:	dba9      	blt.n	2185c <z_add_timeout+0xac>
			to->dticks -= t->dticks;
   21908:	1b11      	subs	r1, r2, r4
   2190a:	eb63 0305 	sbc.w	r3, r3, r5
   2190e:	f8cb 1010 	str.w	r1, [fp, #16]
   21912:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
   21916:	f7ff ff0d 	bl	21734 <next>
   2191a:	e7eb      	b.n	218f4 <z_add_timeout+0x144>
	sys_dnode_t *const tail = list->tail;
   2191c:	4b1e      	ldr	r3, [pc, #120]	; (21998 <z_add_timeout+0x1e8>)
   2191e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   21920:	f8cb 3000 	str.w	r3, [fp]
	node->prev = tail;
   21924:	f8cb 2004 	str.w	r2, [fp, #4]
	tail->next = node;
   21928:	f8c2 b000 	str.w	fp, [r2]
	list->tail = node;
   2192c:	f8c3 b004 	str.w	fp, [r3, #4]
}
   21930:	e7a7      	b.n	21882 <z_add_timeout+0xd2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   21932:	f7ff ff17 	bl	21764 <next_timeout>

			if (next_time == 0 ||
   21936:	4603      	mov	r3, r0
   21938:	b118      	cbz	r0, 21942 <z_add_timeout+0x192>
			    _current_cpu->slice_ticks != next_time) {
   2193a:	4a18      	ldr	r2, [pc, #96]	; (2199c <z_add_timeout+0x1ec>)
   2193c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   2193e:	4282      	cmp	r2, r0
   21940:	d0a3      	beq.n	2188a <z_add_timeout+0xda>
				sys_clock_set_timeout(next_time, false);
   21942:	2100      	movs	r1, #0
   21944:	4618      	mov	r0, r3
   21946:	f7fa fc07 	bl	1c158 <sys_clock_set_timeout>
   2194a:	e79e      	b.n	2188a <z_add_timeout+0xda>
   2194c:	4c0e      	ldr	r4, [pc, #56]	; (21988 <z_add_timeout+0x1d8>)
   2194e:	23ac      	movs	r3, #172	; 0xac
   21950:	4622      	mov	r2, r4
   21952:	4913      	ldr	r1, [pc, #76]	; (219a0 <z_add_timeout+0x1f0>)
   21954:	4809      	ldr	r0, [pc, #36]	; (2197c <z_add_timeout+0x1cc>)
   21956:	f003 ff6a 	bl	2582e <printk>
   2195a:	490a      	ldr	r1, [pc, #40]	; (21984 <z_add_timeout+0x1d4>)
   2195c:	4811      	ldr	r0, [pc, #68]	; (219a4 <z_add_timeout+0x1f4>)
   2195e:	f003 ff66 	bl	2582e <printk>
   21962:	21ac      	movs	r1, #172	; 0xac
   21964:	4620      	mov	r0, r4
   21966:	f004 f9e4 	bl	25d32 <assert_post_action>
   2196a:	e793      	b.n	21894 <z_add_timeout+0xe4>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2196c:	b007      	add	sp, #28
   2196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21972:	bf00      	nop
   21974:	0002d924 	.word	0x0002d924
   21978:	0002d948 	.word	0x0002d948
   2197c:	00029ff8 	.word	0x00029ff8
   21980:	0002c900 	.word	0x0002c900
   21984:	20002d70 	.word	0x20002d70
   21988:	0002a314 	.word	0x0002a314
   2198c:	0002a36c 	.word	0x0002a36c
   21990:	0002a384 	.word	0x0002a384
   21994:	20001ef8 	.word	0x20001ef8
   21998:	20000634 	.word	0x20000634
   2199c:	20002d18 	.word	0x20002d18
   219a0:	0002a33c 	.word	0x0002a33c
   219a4:	0002a354 	.word	0x0002a354

000219a8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   219a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   219ac:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
   219ae:	2400      	movs	r4, #0
	__asm__ volatile(
   219b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   219b4:	f3ef 8711 	mrs	r7, BASEPRI
   219b8:	f383 8812 	msr	BASEPRI_MAX, r3
   219bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   219c0:	481f      	ldr	r0, [pc, #124]	; (21a40 <z_abort_timeout+0x98>)
   219c2:	f7fc fe57 	bl	1e674 <z_spin_lock_valid>
   219c6:	b128      	cbz	r0, 219d4 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
   219c8:	481d      	ldr	r0, [pc, #116]	; (21a40 <z_abort_timeout+0x98>)
   219ca:	f7fc fe73 	bl	1e6b4 <z_spin_lock_set_owner>
	int ret = -EINVAL;
   219ce:	f06f 0815 	mvn.w	r8, #21
	return k;
   219d2:	e01c      	b.n	21a0e <z_abort_timeout+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   219d4:	4e1b      	ldr	r6, [pc, #108]	; (21a44 <z_abort_timeout+0x9c>)
   219d6:	2381      	movs	r3, #129	; 0x81
   219d8:	4632      	mov	r2, r6
   219da:	491b      	ldr	r1, [pc, #108]	; (21a48 <z_abort_timeout+0xa0>)
   219dc:	481b      	ldr	r0, [pc, #108]	; (21a4c <z_abort_timeout+0xa4>)
   219de:	f003 ff26 	bl	2582e <printk>
   219e2:	4917      	ldr	r1, [pc, #92]	; (21a40 <z_abort_timeout+0x98>)
   219e4:	481a      	ldr	r0, [pc, #104]	; (21a50 <z_abort_timeout+0xa8>)
   219e6:	f003 ff22 	bl	2582e <printk>
   219ea:	2181      	movs	r1, #129	; 0x81
   219ec:	4630      	mov	r0, r6
   219ee:	f004 f9a0 	bl	25d32 <assert_post_action>
   219f2:	e7e9      	b.n	219c8 <z_abort_timeout+0x20>
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
   219f4:	4628      	mov	r0, r5
   219f6:	f007 ff6d 	bl	298d4 <remove_timeout>
			ret = 0;
   219fa:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219fc:	4810      	ldr	r0, [pc, #64]	; (21a40 <z_abort_timeout+0x98>)
   219fe:	f7fc fe49 	bl	1e694 <z_spin_unlock_valid>
   21a02:	b150      	cbz	r0, 21a1a <z_abort_timeout+0x72>
	__asm__ volatile(
   21a04:	f387 8811 	msr	BASEPRI, r7
   21a08:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   21a0c:	2401      	movs	r4, #1
   21a0e:	4626      	mov	r6, r4
   21a10:	b99c      	cbnz	r4, 21a3a <z_abort_timeout+0x92>
	return node->next != NULL;
   21a12:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
   21a14:	2b00      	cmp	r3, #0
   21a16:	d1ed      	bne.n	219f4 <z_abort_timeout+0x4c>
   21a18:	e7f0      	b.n	219fc <z_abort_timeout+0x54>
   21a1a:	4c0a      	ldr	r4, [pc, #40]	; (21a44 <z_abort_timeout+0x9c>)
   21a1c:	23ac      	movs	r3, #172	; 0xac
   21a1e:	4622      	mov	r2, r4
   21a20:	490c      	ldr	r1, [pc, #48]	; (21a54 <z_abort_timeout+0xac>)
   21a22:	480a      	ldr	r0, [pc, #40]	; (21a4c <z_abort_timeout+0xa4>)
   21a24:	f003 ff03 	bl	2582e <printk>
   21a28:	4905      	ldr	r1, [pc, #20]	; (21a40 <z_abort_timeout+0x98>)
   21a2a:	480b      	ldr	r0, [pc, #44]	; (21a58 <z_abort_timeout+0xb0>)
   21a2c:	f003 feff 	bl	2582e <printk>
   21a30:	21ac      	movs	r1, #172	; 0xac
   21a32:	4620      	mov	r0, r4
   21a34:	f004 f97d 	bl	25d32 <assert_post_action>
   21a38:	e7e4      	b.n	21a04 <z_abort_timeout+0x5c>
		}
	}

	return ret;
}
   21a3a:	4640      	mov	r0, r8
   21a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a40:	20002d70 	.word	0x20002d70
   21a44:	0002a314 	.word	0x0002a314
   21a48:	0002a36c 	.word	0x0002a36c
   21a4c:	00029ff8 	.word	0x00029ff8
   21a50:	0002a384 	.word	0x0002a384
   21a54:	0002a33c 	.word	0x0002a33c
   21a58:	0002a354 	.word	0x0002a354

00021a5c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   21a5c:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
   21a5e:	2500      	movs	r5, #0
	__asm__ volatile(
   21a60:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a64:	f3ef 8611 	mrs	r6, BASEPRI
   21a68:	f383 8812 	msr	BASEPRI_MAX, r3
   21a6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a70:	481c      	ldr	r0, [pc, #112]	; (21ae4 <z_get_next_timeout_expiry+0x88>)
   21a72:	f7fc fdff 	bl	1e674 <z_spin_lock_valid>
   21a76:	b128      	cbz	r0, 21a84 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
   21a78:	481a      	ldr	r0, [pc, #104]	; (21ae4 <z_get_next_timeout_expiry+0x88>)
   21a7a:	f7fc fe1b 	bl	1e6b4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   21a7e:	f04f 34ff 	mov.w	r4, #4294967295
	return k;
   21a82:	e023      	b.n	21acc <z_get_next_timeout_expiry+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a84:	4c18      	ldr	r4, [pc, #96]	; (21ae8 <z_get_next_timeout_expiry+0x8c>)
   21a86:	2381      	movs	r3, #129	; 0x81
   21a88:	4622      	mov	r2, r4
   21a8a:	4918      	ldr	r1, [pc, #96]	; (21aec <z_get_next_timeout_expiry+0x90>)
   21a8c:	4818      	ldr	r0, [pc, #96]	; (21af0 <z_get_next_timeout_expiry+0x94>)
   21a8e:	f003 fece 	bl	2582e <printk>
   21a92:	4914      	ldr	r1, [pc, #80]	; (21ae4 <z_get_next_timeout_expiry+0x88>)
   21a94:	4817      	ldr	r0, [pc, #92]	; (21af4 <z_get_next_timeout_expiry+0x98>)
   21a96:	f003 feca 	bl	2582e <printk>
   21a9a:	2181      	movs	r1, #129	; 0x81
   21a9c:	4620      	mov	r0, r4
   21a9e:	f004 f948 	bl	25d32 <assert_post_action>
   21aa2:	e7e9      	b.n	21a78 <z_get_next_timeout_expiry+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21aa4:	4d10      	ldr	r5, [pc, #64]	; (21ae8 <z_get_next_timeout_expiry+0x8c>)
   21aa6:	23ac      	movs	r3, #172	; 0xac
   21aa8:	462a      	mov	r2, r5
   21aaa:	4913      	ldr	r1, [pc, #76]	; (21af8 <z_get_next_timeout_expiry+0x9c>)
   21aac:	4810      	ldr	r0, [pc, #64]	; (21af0 <z_get_next_timeout_expiry+0x94>)
   21aae:	f003 febe 	bl	2582e <printk>
   21ab2:	490c      	ldr	r1, [pc, #48]	; (21ae4 <z_get_next_timeout_expiry+0x88>)
   21ab4:	4811      	ldr	r0, [pc, #68]	; (21afc <z_get_next_timeout_expiry+0xa0>)
   21ab6:	f003 feba 	bl	2582e <printk>
   21aba:	21ac      	movs	r1, #172	; 0xac
   21abc:	4628      	mov	r0, r5
   21abe:	f004 f938 	bl	25d32 <assert_post_action>
	__asm__ volatile(
   21ac2:	f386 8811 	msr	BASEPRI, r6
   21ac6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   21aca:	2501      	movs	r5, #1
   21acc:	b945      	cbnz	r5, 21ae0 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
   21ace:	f7ff fe49 	bl	21764 <next_timeout>
   21ad2:	4604      	mov	r4, r0
   21ad4:	4803      	ldr	r0, [pc, #12]	; (21ae4 <z_get_next_timeout_expiry+0x88>)
   21ad6:	f7fc fddd 	bl	1e694 <z_spin_unlock_valid>
   21ada:	2800      	cmp	r0, #0
   21adc:	d1f1      	bne.n	21ac2 <z_get_next_timeout_expiry+0x66>
   21ade:	e7e1      	b.n	21aa4 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
   21ae0:	4620      	mov	r0, r4
   21ae2:	bd70      	pop	{r4, r5, r6, pc}
   21ae4:	20002d70 	.word	0x20002d70
   21ae8:	0002a314 	.word	0x0002a314
   21aec:	0002a36c 	.word	0x0002a36c
   21af0:	00029ff8 	.word	0x00029ff8
   21af4:	0002a384 	.word	0x0002a384
   21af8:	0002a33c 	.word	0x0002a33c
   21afc:	0002a354 	.word	0x0002a354

00021b00 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   21b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b04:	4607      	mov	r7, r0
   21b06:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
   21b08:	2500      	movs	r5, #0
	__asm__ volatile(
   21b0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b0e:	f3ef 8611 	mrs	r6, BASEPRI
   21b12:	f383 8812 	msr	BASEPRI_MAX, r3
   21b16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b1a:	4825      	ldr	r0, [pc, #148]	; (21bb0 <z_set_timeout_expiry+0xb0>)
   21b1c:	f7fc fdaa 	bl	1e674 <z_spin_lock_valid>
   21b20:	b118      	cbz	r0, 21b2a <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
   21b22:	4823      	ldr	r0, [pc, #140]	; (21bb0 <z_set_timeout_expiry+0xb0>)
   21b24:	f7fc fdc6 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   21b28:	e01e      	b.n	21b68 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b2a:	4c22      	ldr	r4, [pc, #136]	; (21bb4 <z_set_timeout_expiry+0xb4>)
   21b2c:	2381      	movs	r3, #129	; 0x81
   21b2e:	4622      	mov	r2, r4
   21b30:	4921      	ldr	r1, [pc, #132]	; (21bb8 <z_set_timeout_expiry+0xb8>)
   21b32:	4822      	ldr	r0, [pc, #136]	; (21bbc <z_set_timeout_expiry+0xbc>)
   21b34:	f003 fe7b 	bl	2582e <printk>
   21b38:	491d      	ldr	r1, [pc, #116]	; (21bb0 <z_set_timeout_expiry+0xb0>)
   21b3a:	4821      	ldr	r0, [pc, #132]	; (21bc0 <z_set_timeout_expiry+0xc0>)
   21b3c:	f003 fe77 	bl	2582e <printk>
   21b40:	2181      	movs	r1, #129	; 0x81
   21b42:	4620      	mov	r0, r4
   21b44:	f004 f8f5 	bl	25d32 <assert_post_action>
   21b48:	e7eb      	b.n	21b22 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   21b4a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   21b4c:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   21b50:	2801      	cmp	r0, #1
   21b52:	dd00      	ble.n	21b56 <z_set_timeout_expiry+0x56>
   21b54:	b99c      	cbnz	r4, 21b7e <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b56:	4816      	ldr	r0, [pc, #88]	; (21bb0 <z_set_timeout_expiry+0xb0>)
   21b58:	f7fc fd9c 	bl	1e694 <z_spin_unlock_valid>
   21b5c:	b1b0      	cbz	r0, 21b8c <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
   21b5e:	f386 8811 	msr	BASEPRI, r6
   21b62:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   21b66:	2501      	movs	r5, #1
   21b68:	462c      	mov	r4, r5
   21b6a:	b9fd      	cbnz	r5, 21bac <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
   21b6c:	f7ff fdfa 	bl	21764 <next_timeout>
			      || (ticks <= next_to);
   21b70:	f1b0 3fff 	cmp.w	r0, #4294967295
   21b74:	d0e9      	beq.n	21b4a <z_set_timeout_expiry+0x4a>
   21b76:	42b8      	cmp	r0, r7
   21b78:	dbe8      	blt.n	21b4c <z_set_timeout_expiry+0x4c>
   21b7a:	2401      	movs	r4, #1
   21b7c:	e7e6      	b.n	21b4c <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   21b7e:	4641      	mov	r1, r8
   21b80:	42b8      	cmp	r0, r7
   21b82:	bfa8      	it	ge
   21b84:	4638      	movge	r0, r7
   21b86:	f7fa fae7 	bl	1c158 <sys_clock_set_timeout>
   21b8a:	e7e4      	b.n	21b56 <z_set_timeout_expiry+0x56>
   21b8c:	4c09      	ldr	r4, [pc, #36]	; (21bb4 <z_set_timeout_expiry+0xb4>)
   21b8e:	23ac      	movs	r3, #172	; 0xac
   21b90:	4622      	mov	r2, r4
   21b92:	490c      	ldr	r1, [pc, #48]	; (21bc4 <z_set_timeout_expiry+0xc4>)
   21b94:	4809      	ldr	r0, [pc, #36]	; (21bbc <z_set_timeout_expiry+0xbc>)
   21b96:	f003 fe4a 	bl	2582e <printk>
   21b9a:	4905      	ldr	r1, [pc, #20]	; (21bb0 <z_set_timeout_expiry+0xb0>)
   21b9c:	480a      	ldr	r0, [pc, #40]	; (21bc8 <z_set_timeout_expiry+0xc8>)
   21b9e:	f003 fe46 	bl	2582e <printk>
   21ba2:	21ac      	movs	r1, #172	; 0xac
   21ba4:	4620      	mov	r0, r4
   21ba6:	f004 f8c4 	bl	25d32 <assert_post_action>
   21baa:	e7d8      	b.n	21b5e <z_set_timeout_expiry+0x5e>
		}
	}
}
   21bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21bb0:	20002d70 	.word	0x20002d70
   21bb4:	0002a314 	.word	0x0002a314
   21bb8:	0002a36c 	.word	0x0002a36c
   21bbc:	00029ff8 	.word	0x00029ff8
   21bc0:	0002a384 	.word	0x0002a384
   21bc4:	0002a33c 	.word	0x0002a33c
   21bc8:	0002a354 	.word	0x0002a354

00021bcc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   21bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21bce:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   21bd0:	f7fe fcba 	bl	20548 <z_time_slice>
	__asm__ volatile(
   21bd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21bd8:	f3ef 8411 	mrs	r4, BASEPRI
   21bdc:	f383 8812 	msr	BASEPRI_MAX, r3
   21be0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21be4:	4854      	ldr	r0, [pc, #336]	; (21d38 <sys_clock_announce+0x16c>)
   21be6:	f7fc fd45 	bl	1e674 <z_spin_lock_valid>
   21bea:	b128      	cbz	r0, 21bf8 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
   21bec:	4852      	ldr	r0, [pc, #328]	; (21d38 <sys_clock_announce+0x16c>)
   21bee:	f7fc fd61 	bl	1e6b4 <z_spin_lock_set_owner>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   21bf2:	4b52      	ldr	r3, [pc, #328]	; (21d3c <sys_clock_announce+0x170>)
   21bf4:	601d      	str	r5, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   21bf6:	e031      	b.n	21c5c <sys_clock_announce+0x90>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bf8:	4e51      	ldr	r6, [pc, #324]	; (21d40 <sys_clock_announce+0x174>)
   21bfa:	2381      	movs	r3, #129	; 0x81
   21bfc:	4632      	mov	r2, r6
   21bfe:	4951      	ldr	r1, [pc, #324]	; (21d44 <sys_clock_announce+0x178>)
   21c00:	4851      	ldr	r0, [pc, #324]	; (21d48 <sys_clock_announce+0x17c>)
   21c02:	f003 fe14 	bl	2582e <printk>
   21c06:	494c      	ldr	r1, [pc, #304]	; (21d38 <sys_clock_announce+0x16c>)
   21c08:	4850      	ldr	r0, [pc, #320]	; (21d4c <sys_clock_announce+0x180>)
   21c0a:	f003 fe10 	bl	2582e <printk>
   21c0e:	2181      	movs	r1, #129	; 0x81
   21c10:	4630      	mov	r0, r6
   21c12:	f004 f88e 	bl	25d32 <assert_post_action>
   21c16:	e7e9      	b.n	21bec <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c18:	4e49      	ldr	r6, [pc, #292]	; (21d40 <sys_clock_announce+0x174>)
   21c1a:	23ac      	movs	r3, #172	; 0xac
   21c1c:	4632      	mov	r2, r6
   21c1e:	494c      	ldr	r1, [pc, #304]	; (21d50 <sys_clock_announce+0x184>)
   21c20:	4849      	ldr	r0, [pc, #292]	; (21d48 <sys_clock_announce+0x17c>)
   21c22:	f003 fe04 	bl	2582e <printk>
   21c26:	4944      	ldr	r1, [pc, #272]	; (21d38 <sys_clock_announce+0x16c>)
   21c28:	484a      	ldr	r0, [pc, #296]	; (21d54 <sys_clock_announce+0x188>)
   21c2a:	f003 fe00 	bl	2582e <printk>
   21c2e:	21ac      	movs	r1, #172	; 0xac
   21c30:	4630      	mov	r0, r6
   21c32:	f004 f87e 	bl	25d32 <assert_post_action>
   21c36:	e035      	b.n	21ca4 <sys_clock_announce+0xd8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c38:	4d41      	ldr	r5, [pc, #260]	; (21d40 <sys_clock_announce+0x174>)
   21c3a:	2381      	movs	r3, #129	; 0x81
   21c3c:	462a      	mov	r2, r5
   21c3e:	4941      	ldr	r1, [pc, #260]	; (21d44 <sys_clock_announce+0x178>)
   21c40:	4841      	ldr	r0, [pc, #260]	; (21d48 <sys_clock_announce+0x17c>)
   21c42:	f003 fdf4 	bl	2582e <printk>
   21c46:	493c      	ldr	r1, [pc, #240]	; (21d38 <sys_clock_announce+0x16c>)
   21c48:	4840      	ldr	r0, [pc, #256]	; (21d4c <sys_clock_announce+0x180>)
   21c4a:	f003 fdf0 	bl	2582e <printk>
   21c4e:	2181      	movs	r1, #129	; 0x81
   21c50:	4628      	mov	r0, r5
   21c52:	f004 f86e 	bl	25d32 <assert_post_action>
	z_spin_lock_set_owner(l);
   21c56:	4838      	ldr	r0, [pc, #224]	; (21d38 <sys_clock_announce+0x16c>)
   21c58:	f7fc fd2c 	bl	1e6b4 <z_spin_lock_set_owner>
   21c5c:	f7ff fd60 	bl	21720 <first>
   21c60:	4605      	mov	r5, r0
   21c62:	2800      	cmp	r0, #0
   21c64:	d033      	beq.n	21cce <sys_clock_announce+0x102>
   21c66:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   21c6a:	4b34      	ldr	r3, [pc, #208]	; (21d3c <sys_clock_announce+0x170>)
   21c6c:	6819      	ldr	r1, [r3, #0]
   21c6e:	17cb      	asrs	r3, r1, #31
   21c70:	42b1      	cmp	r1, r6
   21c72:	41bb      	sbcs	r3, r7
   21c74:	db2b      	blt.n	21cce <sys_clock_announce+0x102>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   21c76:	4838      	ldr	r0, [pc, #224]	; (21d58 <sys_clock_announce+0x18c>)
   21c78:	e9d0 2300 	ldrd	r2, r3, [r0]
   21c7c:	1992      	adds	r2, r2, r6
   21c7e:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
   21c82:	e9c0 2300 	strd	r2, r3, [r0]
		announce_remaining -= dt;
   21c86:	1b89      	subs	r1, r1, r6
   21c88:	4b2c      	ldr	r3, [pc, #176]	; (21d3c <sys_clock_announce+0x170>)
   21c8a:	6019      	str	r1, [r3, #0]
		t->dticks = 0;
   21c8c:	2200      	movs	r2, #0
   21c8e:	2300      	movs	r3, #0
   21c90:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   21c94:	4628      	mov	r0, r5
   21c96:	f007 fe1d 	bl	298d4 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c9a:	4827      	ldr	r0, [pc, #156]	; (21d38 <sys_clock_announce+0x16c>)
   21c9c:	f7fc fcfa 	bl	1e694 <z_spin_unlock_valid>
   21ca0:	2800      	cmp	r0, #0
   21ca2:	d0b9      	beq.n	21c18 <sys_clock_announce+0x4c>
	__asm__ volatile(
   21ca4:	f384 8811 	msr	BASEPRI, r4
   21ca8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   21cac:	68ab      	ldr	r3, [r5, #8]
   21cae:	4628      	mov	r0, r5
   21cb0:	4798      	blx	r3
	__asm__ volatile(
   21cb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   21cb6:	f3ef 8411 	mrs	r4, BASEPRI
   21cba:	f383 8812 	msr	BASEPRI_MAX, r3
   21cbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21cc2:	481d      	ldr	r0, [pc, #116]	; (21d38 <sys_clock_announce+0x16c>)
   21cc4:	f7fc fcd6 	bl	1e674 <z_spin_lock_valid>
   21cc8:	2800      	cmp	r0, #0
   21cca:	d1c4      	bne.n	21c56 <sys_clock_announce+0x8a>
   21ccc:	e7b4      	b.n	21c38 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   21cce:	b145      	cbz	r5, 21ce2 <sys_clock_announce+0x116>
		first()->dticks -= announce_remaining;
   21cd0:	4b1a      	ldr	r3, [pc, #104]	; (21d3c <sys_clock_announce+0x170>)
   21cd2:	6819      	ldr	r1, [r3, #0]
   21cd4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   21cd8:	1a52      	subs	r2, r2, r1
   21cda:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   21cde:	e9c5 2304 	strd	r2, r3, [r5, #16]
	}

	curr_tick += announce_remaining;
   21ce2:	481d      	ldr	r0, [pc, #116]	; (21d58 <sys_clock_announce+0x18c>)
   21ce4:	4915      	ldr	r1, [pc, #84]	; (21d3c <sys_clock_announce+0x170>)
   21ce6:	680d      	ldr	r5, [r1, #0]
   21ce8:	e9d0 2300 	ldrd	r2, r3, [r0]
   21cec:	1952      	adds	r2, r2, r5
   21cee:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   21cf2:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   21cf6:	2500      	movs	r5, #0
   21cf8:	600d      	str	r5, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   21cfa:	f7ff fd33 	bl	21764 <next_timeout>
   21cfe:	4629      	mov	r1, r5
   21d00:	f7fa fa2a 	bl	1c158 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d04:	480c      	ldr	r0, [pc, #48]	; (21d38 <sys_clock_announce+0x16c>)
   21d06:	f7fc fcc5 	bl	1e694 <z_spin_unlock_valid>
   21d0a:	b120      	cbz	r0, 21d16 <sys_clock_announce+0x14a>
	__asm__ volatile(
   21d0c:	f384 8811 	msr	BASEPRI, r4
   21d10:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   21d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d16:	4d0a      	ldr	r5, [pc, #40]	; (21d40 <sys_clock_announce+0x174>)
   21d18:	23ac      	movs	r3, #172	; 0xac
   21d1a:	462a      	mov	r2, r5
   21d1c:	490c      	ldr	r1, [pc, #48]	; (21d50 <sys_clock_announce+0x184>)
   21d1e:	480a      	ldr	r0, [pc, #40]	; (21d48 <sys_clock_announce+0x17c>)
   21d20:	f003 fd85 	bl	2582e <printk>
   21d24:	4904      	ldr	r1, [pc, #16]	; (21d38 <sys_clock_announce+0x16c>)
   21d26:	480b      	ldr	r0, [pc, #44]	; (21d54 <sys_clock_announce+0x188>)
   21d28:	f003 fd81 	bl	2582e <printk>
   21d2c:	21ac      	movs	r1, #172	; 0xac
   21d2e:	4628      	mov	r0, r5
   21d30:	f003 ffff 	bl	25d32 <assert_post_action>
   21d34:	e7ea      	b.n	21d0c <sys_clock_announce+0x140>
   21d36:	bf00      	nop
   21d38:	20002d70 	.word	0x20002d70
   21d3c:	20002d6c 	.word	0x20002d6c
   21d40:	0002a314 	.word	0x0002a314
   21d44:	0002a36c 	.word	0x0002a36c
   21d48:	00029ff8 	.word	0x00029ff8
   21d4c:	0002a384 	.word	0x0002a384
   21d50:	0002a33c 	.word	0x0002a33c
   21d54:	0002a354 	.word	0x0002a354
   21d58:	20001ef8 	.word	0x20001ef8

00021d5c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   21d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   21d5e:	2400      	movs	r4, #0
	__asm__ volatile(
   21d60:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d64:	f3ef 8511 	mrs	r5, BASEPRI
   21d68:	f383 8812 	msr	BASEPRI_MAX, r3
   21d6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d70:	481f      	ldr	r0, [pc, #124]	; (21df0 <sys_clock_tick_get+0x94>)
   21d72:	f7fc fc7f 	bl	1e674 <z_spin_lock_valid>
   21d76:	b128      	cbz	r0, 21d84 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
   21d78:	481d      	ldr	r0, [pc, #116]	; (21df0 <sys_clock_tick_get+0x94>)
   21d7a:	f7fc fc9b 	bl	1e6b4 <z_spin_lock_set_owner>
	uint64_t t = 0U;
   21d7e:	2600      	movs	r6, #0
   21d80:	2700      	movs	r7, #0
	return k;
   21d82:	e023      	b.n	21dcc <sys_clock_tick_get+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d84:	4e1b      	ldr	r6, [pc, #108]	; (21df4 <sys_clock_tick_get+0x98>)
   21d86:	2381      	movs	r3, #129	; 0x81
   21d88:	4632      	mov	r2, r6
   21d8a:	491b      	ldr	r1, [pc, #108]	; (21df8 <sys_clock_tick_get+0x9c>)
   21d8c:	481b      	ldr	r0, [pc, #108]	; (21dfc <sys_clock_tick_get+0xa0>)
   21d8e:	f003 fd4e 	bl	2582e <printk>
   21d92:	4917      	ldr	r1, [pc, #92]	; (21df0 <sys_clock_tick_get+0x94>)
   21d94:	481a      	ldr	r0, [pc, #104]	; (21e00 <sys_clock_tick_get+0xa4>)
   21d96:	f003 fd4a 	bl	2582e <printk>
   21d9a:	2181      	movs	r1, #129	; 0x81
   21d9c:	4630      	mov	r0, r6
   21d9e:	f003 ffc8 	bl	25d32 <assert_post_action>
   21da2:	e7e9      	b.n	21d78 <sys_clock_tick_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21da4:	4c13      	ldr	r4, [pc, #76]	; (21df4 <sys_clock_tick_get+0x98>)
   21da6:	23ac      	movs	r3, #172	; 0xac
   21da8:	4622      	mov	r2, r4
   21daa:	4916      	ldr	r1, [pc, #88]	; (21e04 <sys_clock_tick_get+0xa8>)
   21dac:	4813      	ldr	r0, [pc, #76]	; (21dfc <sys_clock_tick_get+0xa0>)
   21dae:	f003 fd3e 	bl	2582e <printk>
   21db2:	490f      	ldr	r1, [pc, #60]	; (21df0 <sys_clock_tick_get+0x94>)
   21db4:	4814      	ldr	r0, [pc, #80]	; (21e08 <sys_clock_tick_get+0xac>)
   21db6:	f003 fd3a 	bl	2582e <printk>
   21dba:	21ac      	movs	r1, #172	; 0xac
   21dbc:	4620      	mov	r0, r4
   21dbe:	f003 ffb8 	bl	25d32 <assert_post_action>
	__asm__ volatile(
   21dc2:	f385 8811 	msr	BASEPRI, r5
   21dc6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   21dca:	2401      	movs	r4, #1
   21dcc:	b96c      	cbnz	r4, 21dea <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
   21dce:	f7fa f9f7 	bl	1c1c0 <sys_clock_elapsed>
   21dd2:	4b0e      	ldr	r3, [pc, #56]	; (21e0c <sys_clock_tick_get+0xb0>)
   21dd4:	e9d3 6700 	ldrd	r6, r7, [r3]
   21dd8:	1836      	adds	r6, r6, r0
   21dda:	f147 0700 	adc.w	r7, r7, #0
   21dde:	4804      	ldr	r0, [pc, #16]	; (21df0 <sys_clock_tick_get+0x94>)
   21de0:	f7fc fc58 	bl	1e694 <z_spin_unlock_valid>
   21de4:	2800      	cmp	r0, #0
   21de6:	d1ec      	bne.n	21dc2 <sys_clock_tick_get+0x66>
   21de8:	e7dc      	b.n	21da4 <sys_clock_tick_get+0x48>
	}
	return t;
}
   21dea:	4630      	mov	r0, r6
   21dec:	4639      	mov	r1, r7
   21dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21df0:	20002d70 	.word	0x20002d70
   21df4:	0002a314 	.word	0x0002a314
   21df8:	0002a36c 	.word	0x0002a36c
   21dfc:	00029ff8 	.word	0x00029ff8
   21e00:	0002a384 	.word	0x0002a384
   21e04:	0002a33c 	.word	0x0002a33c
   21e08:	0002a354 	.word	0x0002a354
   21e0c:	20001ef8 	.word	0x20001ef8

00021e10 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   21e10:	b570      	push	{r4, r5, r6, lr}
   21e12:	4604      	mov	r4, r0
	__asm__ volatile(
   21e14:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e18:	f3ef 8611 	mrs	r6, BASEPRI
   21e1c:	f383 8812 	msr	BASEPRI_MAX, r3
   21e20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e24:	4856      	ldr	r0, [pc, #344]	; (21f80 <z_timer_expiration_handler+0x170>)
   21e26:	f7fc fc25 	bl	1e674 <z_spin_lock_valid>
   21e2a:	2800      	cmp	r0, #0
   21e2c:	d049      	beq.n	21ec2 <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
   21e2e:	4854      	ldr	r0, [pc, #336]	; (21f80 <z_timer_expiration_handler+0x170>)
   21e30:	f7fc fc40 	bl	1e6b4 <z_spin_lock_set_owner>
	return k;
   21e34:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   21e36:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   21e3a:	ea52 0103 	orrs.w	r1, r2, r3
   21e3e:	d005      	beq.n	21e4c <z_timer_expiration_handler+0x3c>
   21e40:	f1b3 3fff 	cmp.w	r3, #4294967295
   21e44:	bf08      	it	eq
   21e46:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   21e4a:	d14a      	bne.n	21ee2 <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   21e4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21e4e:	3301      	adds	r3, #1
   21e50:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   21e52:	6a23      	ldr	r3, [r4, #32]
   21e54:	b1db      	cbz	r3, 21e8e <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e56:	484a      	ldr	r0, [pc, #296]	; (21f80 <z_timer_expiration_handler+0x170>)
   21e58:	f7fc fc1c 	bl	1e694 <z_spin_unlock_valid>
   21e5c:	2800      	cmp	r0, #0
   21e5e:	d045      	beq.n	21eec <z_timer_expiration_handler+0xdc>
	__asm__ volatile(
   21e60:	f386 8811 	msr	BASEPRI, r6
   21e64:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   21e68:	6a23      	ldr	r3, [r4, #32]
   21e6a:	4620      	mov	r0, r4
   21e6c:	4798      	blx	r3
	__asm__ volatile(
   21e6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e72:	f3ef 8511 	mrs	r5, BASEPRI
   21e76:	f383 8812 	msr	BASEPRI_MAX, r3
   21e7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e7e:	4840      	ldr	r0, [pc, #256]	; (21f80 <z_timer_expiration_handler+0x170>)
   21e80:	f7fc fbf8 	bl	1e674 <z_spin_lock_valid>
   21e84:	2800      	cmp	r0, #0
   21e86:	d041      	beq.n	21f0c <z_timer_expiration_handler+0xfc>
	z_spin_lock_set_owner(l);
   21e88:	483d      	ldr	r0, [pc, #244]	; (21f80 <z_timer_expiration_handler+0x170>)
   21e8a:	f7fc fc13 	bl	1e6b4 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21e8e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   21e92:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21e94:	42a3      	cmp	r3, r4
   21e96:	d049      	beq.n	21f2c <z_timer_expiration_handler+0x11c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   21e98:	2c00      	cmp	r4, #0
   21e9a:	d047      	beq.n	21f2c <z_timer_expiration_handler+0x11c>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   21e9c:	4620      	mov	r0, r4
   21e9e:	f7fe f90b 	bl	200b8 <z_unpend_thread_no_timeout>
   21ea2:	2300      	movs	r3, #0
   21ea4:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ea8:	4835      	ldr	r0, [pc, #212]	; (21f80 <z_timer_expiration_handler+0x170>)
   21eaa:	f7fc fbf3 	bl	1e694 <z_spin_unlock_valid>
   21eae:	2800      	cmp	r0, #0
   21eb0:	d055      	beq.n	21f5e <z_timer_expiration_handler+0x14e>
	__asm__ volatile(
   21eb2:	f385 8811 	msr	BASEPRI, r5
   21eb6:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   21eba:	4620      	mov	r0, r4
   21ebc:	f7fe fc36 	bl	2072c <z_ready_thread>
}
   21ec0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ec2:	4d30      	ldr	r5, [pc, #192]	; (21f84 <z_timer_expiration_handler+0x174>)
   21ec4:	2381      	movs	r3, #129	; 0x81
   21ec6:	462a      	mov	r2, r5
   21ec8:	492f      	ldr	r1, [pc, #188]	; (21f88 <z_timer_expiration_handler+0x178>)
   21eca:	4830      	ldr	r0, [pc, #192]	; (21f8c <z_timer_expiration_handler+0x17c>)
   21ecc:	f003 fcaf 	bl	2582e <printk>
   21ed0:	492b      	ldr	r1, [pc, #172]	; (21f80 <z_timer_expiration_handler+0x170>)
   21ed2:	482f      	ldr	r0, [pc, #188]	; (21f90 <z_timer_expiration_handler+0x180>)
   21ed4:	f003 fcab 	bl	2582e <printk>
   21ed8:	2181      	movs	r1, #129	; 0x81
   21eda:	4628      	mov	r0, r5
   21edc:	f003 ff29 	bl	25d32 <assert_post_action>
   21ee0:	e7a5      	b.n	21e2e <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   21ee2:	492c      	ldr	r1, [pc, #176]	; (21f94 <z_timer_expiration_handler+0x184>)
   21ee4:	4620      	mov	r0, r4
   21ee6:	f7ff fc63 	bl	217b0 <z_add_timeout>
   21eea:	e7af      	b.n	21e4c <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21eec:	4d25      	ldr	r5, [pc, #148]	; (21f84 <z_timer_expiration_handler+0x174>)
   21eee:	23ac      	movs	r3, #172	; 0xac
   21ef0:	462a      	mov	r2, r5
   21ef2:	4929      	ldr	r1, [pc, #164]	; (21f98 <z_timer_expiration_handler+0x188>)
   21ef4:	4825      	ldr	r0, [pc, #148]	; (21f8c <z_timer_expiration_handler+0x17c>)
   21ef6:	f003 fc9a 	bl	2582e <printk>
   21efa:	4921      	ldr	r1, [pc, #132]	; (21f80 <z_timer_expiration_handler+0x170>)
   21efc:	4827      	ldr	r0, [pc, #156]	; (21f9c <z_timer_expiration_handler+0x18c>)
   21efe:	f003 fc96 	bl	2582e <printk>
   21f02:	21ac      	movs	r1, #172	; 0xac
   21f04:	4628      	mov	r0, r5
   21f06:	f003 ff14 	bl	25d32 <assert_post_action>
   21f0a:	e7a9      	b.n	21e60 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f0c:	4e1d      	ldr	r6, [pc, #116]	; (21f84 <z_timer_expiration_handler+0x174>)
   21f0e:	2381      	movs	r3, #129	; 0x81
   21f10:	4632      	mov	r2, r6
   21f12:	491d      	ldr	r1, [pc, #116]	; (21f88 <z_timer_expiration_handler+0x178>)
   21f14:	481d      	ldr	r0, [pc, #116]	; (21f8c <z_timer_expiration_handler+0x17c>)
   21f16:	f003 fc8a 	bl	2582e <printk>
   21f1a:	4919      	ldr	r1, [pc, #100]	; (21f80 <z_timer_expiration_handler+0x170>)
   21f1c:	481c      	ldr	r0, [pc, #112]	; (21f90 <z_timer_expiration_handler+0x180>)
   21f1e:	f003 fc86 	bl	2582e <printk>
   21f22:	2181      	movs	r1, #129	; 0x81
   21f24:	4630      	mov	r0, r6
   21f26:	f003 ff04 	bl	25d32 <assert_post_action>
   21f2a:	e7ad      	b.n	21e88 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f2c:	4814      	ldr	r0, [pc, #80]	; (21f80 <z_timer_expiration_handler+0x170>)
   21f2e:	f7fc fbb1 	bl	1e694 <z_spin_unlock_valid>
   21f32:	b120      	cbz	r0, 21f3e <z_timer_expiration_handler+0x12e>
   21f34:	f385 8811 	msr	BASEPRI, r5
   21f38:	f3bf 8f6f 	isb	sy
		return;
   21f3c:	e7c0      	b.n	21ec0 <z_timer_expiration_handler+0xb0>
   21f3e:	4c11      	ldr	r4, [pc, #68]	; (21f84 <z_timer_expiration_handler+0x174>)
   21f40:	23ac      	movs	r3, #172	; 0xac
   21f42:	4622      	mov	r2, r4
   21f44:	4914      	ldr	r1, [pc, #80]	; (21f98 <z_timer_expiration_handler+0x188>)
   21f46:	4811      	ldr	r0, [pc, #68]	; (21f8c <z_timer_expiration_handler+0x17c>)
   21f48:	f003 fc71 	bl	2582e <printk>
   21f4c:	490c      	ldr	r1, [pc, #48]	; (21f80 <z_timer_expiration_handler+0x170>)
   21f4e:	4813      	ldr	r0, [pc, #76]	; (21f9c <z_timer_expiration_handler+0x18c>)
   21f50:	f003 fc6d 	bl	2582e <printk>
   21f54:	21ac      	movs	r1, #172	; 0xac
   21f56:	4620      	mov	r0, r4
   21f58:	f003 feeb 	bl	25d32 <assert_post_action>
   21f5c:	e7ea      	b.n	21f34 <z_timer_expiration_handler+0x124>
   21f5e:	4e09      	ldr	r6, [pc, #36]	; (21f84 <z_timer_expiration_handler+0x174>)
   21f60:	23ac      	movs	r3, #172	; 0xac
   21f62:	4632      	mov	r2, r6
   21f64:	490c      	ldr	r1, [pc, #48]	; (21f98 <z_timer_expiration_handler+0x188>)
   21f66:	4809      	ldr	r0, [pc, #36]	; (21f8c <z_timer_expiration_handler+0x17c>)
   21f68:	f003 fc61 	bl	2582e <printk>
   21f6c:	4904      	ldr	r1, [pc, #16]	; (21f80 <z_timer_expiration_handler+0x170>)
   21f6e:	480b      	ldr	r0, [pc, #44]	; (21f9c <z_timer_expiration_handler+0x18c>)
   21f70:	f003 fc5d 	bl	2582e <printk>
   21f74:	21ac      	movs	r1, #172	; 0xac
   21f76:	4630      	mov	r0, r6
   21f78:	f003 fedb 	bl	25d32 <assert_post_action>
   21f7c:	e799      	b.n	21eb2 <z_timer_expiration_handler+0xa2>
   21f7e:	bf00      	nop
   21f80:	20002d74 	.word	0x20002d74
   21f84:	0002a314 	.word	0x0002a314
   21f88:	0002a36c 	.word	0x0002a36c
   21f8c:	00029ff8 	.word	0x00029ff8
   21f90:	0002a384 	.word	0x0002a384
   21f94:	00021e11 	.word	0x00021e11
   21f98:	0002a33c 	.word	0x0002a33c
   21f9c:	0002a354 	.word	0x0002a354

00021fa0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   21fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fa4:	b087      	sub	sp, #28
   21fa6:	4614      	mov	r4, r2
   21fa8:	461d      	mov	r5, r3
   21faa:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   21fae:	f1b3 3fff 	cmp.w	r3, #4294967295
   21fb2:	bf08      	it	eq
   21fb4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   21fb8:	d035      	beq.n	22026 <z_impl_k_timer_start+0x86>
   21fba:	4606      	mov	r6, r0
   21fbc:	4613      	mov	r3, r2
   21fbe:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   21fc0:	f1b9 3fff 	cmp.w	r9, #4294967295
   21fc4:	bf08      	it	eq
   21fc6:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   21fca:	d012      	beq.n	21ff2 <z_impl_k_timer_start+0x52>
   21fcc:	ea58 0109 	orrs.w	r1, r8, r9
   21fd0:	d00f      	beq.n	21ff2 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   21fd2:	f06f 0701 	mvn.w	r7, #1
   21fd6:	ebb7 0708 	subs.w	r7, r7, r8
   21fda:	9702      	str	r7, [sp, #8]
   21fdc:	f04f 31ff 	mov.w	r1, #4294967295
   21fe0:	eb61 0709 	sbc.w	r7, r1, r9
   21fe4:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   21fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21fea:	2800      	cmp	r0, #0
   21fec:	f171 0100 	sbcs.w	r1, r1, #0
   21ff0:	db1c      	blt.n	2202c <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   21ff2:	f06f 0101 	mvn.w	r1, #1
   21ff6:	ebb1 0a03 	subs.w	sl, r1, r3
   21ffa:	f04f 31ff 	mov.w	r1, #4294967295
   21ffe:	eb61 0b02 	sbc.w	fp, r1, r2
   22002:	f1ba 0f00 	cmp.w	sl, #0
   22006:	f17b 0100 	sbcs.w	r1, fp, #0
   2200a:	db23      	blt.n	22054 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   2200c:	4630      	mov	r0, r6
   2200e:	f7ff fccb 	bl	219a8 <z_abort_timeout>
	timer->period = period;
   22012:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   22016:	2300      	movs	r3, #0
   22018:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2201a:	4622      	mov	r2, r4
   2201c:	462b      	mov	r3, r5
   2201e:	4917      	ldr	r1, [pc, #92]	; (2207c <z_impl_k_timer_start+0xdc>)
   22020:	4630      	mov	r0, r6
   22022:	f7ff fbc5 	bl	217b0 <z_add_timeout>
		     duration);
}
   22026:	b007      	add	sp, #28
   22028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   2202c:	f118 31ff 	adds.w	r1, r8, #4294967295
   22030:	9104      	str	r1, [sp, #16]
   22032:	f149 31ff 	adc.w	r1, r9, #4294967295
   22036:	9105      	str	r1, [sp, #20]
   22038:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   2203c:	4638      	mov	r0, r7
   2203e:	4641      	mov	r1, r8
   22040:	2f01      	cmp	r7, #1
   22042:	f178 0700 	sbcs.w	r7, r8, #0
   22046:	db02      	blt.n	2204e <z_impl_k_timer_start+0xae>
   22048:	4680      	mov	r8, r0
   2204a:	4689      	mov	r9, r1
   2204c:	e7d1      	b.n	21ff2 <z_impl_k_timer_start+0x52>
   2204e:	2001      	movs	r0, #1
   22050:	2100      	movs	r1, #0
   22052:	e7f9      	b.n	22048 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   22054:	f113 33ff 	adds.w	r3, r3, #4294967295
   22058:	9300      	str	r3, [sp, #0]
   2205a:	f142 33ff 	adc.w	r3, r2, #4294967295
   2205e:	9301      	str	r3, [sp, #4]
   22060:	e9dd 0100 	ldrd	r0, r1, [sp]
   22064:	4602      	mov	r2, r0
   22066:	460b      	mov	r3, r1
   22068:	2800      	cmp	r0, #0
   2206a:	f171 0100 	sbcs.w	r1, r1, #0
   2206e:	db02      	blt.n	22076 <z_impl_k_timer_start+0xd6>
   22070:	4614      	mov	r4, r2
   22072:	461d      	mov	r5, r3
   22074:	e7ca      	b.n	2200c <z_impl_k_timer_start+0x6c>
   22076:	2200      	movs	r2, #0
   22078:	4613      	mov	r3, r2
   2207a:	e7f9      	b.n	22070 <z_impl_k_timer_start+0xd0>
   2207c:	00021e11 	.word	0x00021e11

00022080 <signal_poller>:

	return events_registered;
}

static int signal_poller(struct k_poll_event *event, uint32_t state)
{
   22080:	b570      	push	{r4, r5, r6, lr}
   22082:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   22084:	6880      	ldr	r0, [r0, #8]
   22086:	f007 fc9d 	bl	299c4 <poller_thread>

	__ASSERT(thread != NULL, "poller should have a thread\n");
   2208a:	4604      	mov	r4, r0
   2208c:	b1e8      	cbz	r0, 220ca <signal_poller+0x4a>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2208e:	7b63      	ldrb	r3, [r4, #13]

	if (!z_is_thread_pending(thread)) {
   22090:	f013 0f02 	tst.w	r3, #2
   22094:	d036      	beq.n	22104 <signal_poller+0x84>
	return thread->base.timeout.dticks == _EXPIRED;
   22096:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   2209a:	f06f 0001 	mvn.w	r0, #1
   2209e:	f04f 31ff 	mov.w	r1, #4294967295
   220a2:	428b      	cmp	r3, r1
   220a4:	bf08      	it	eq
   220a6:	4282      	cmpeq	r2, r0
   220a8:	d02e      	beq.n	22108 <signal_poller+0x88>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   220aa:	4620      	mov	r0, r4
   220ac:	f7fe f952 	bl	20354 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   220b0:	2d08      	cmp	r5, #8
   220b2:	d019      	beq.n	220e8 <signal_poller+0x68>
   220b4:	2300      	movs	r3, #0
   220b6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   220ba:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   220bc:	f013 0f1f 	tst.w	r3, #31
   220c0:	d117      	bne.n	220f2 <signal_poller+0x72>
	return node->next != NULL;
   220c2:	69a3      	ldr	r3, [r4, #24]
   220c4:	b19b      	cbz	r3, 220ee <signal_poller+0x6e>
   220c6:	2300      	movs	r3, #0
   220c8:	e014      	b.n	220f4 <signal_poller+0x74>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   220ca:	4e11      	ldr	r6, [pc, #68]	; (22110 <signal_poller+0x90>)
   220cc:	23f9      	movs	r3, #249	; 0xf9
   220ce:	4632      	mov	r2, r6
   220d0:	4910      	ldr	r1, [pc, #64]	; (22114 <signal_poller+0x94>)
   220d2:	4811      	ldr	r0, [pc, #68]	; (22118 <signal_poller+0x98>)
   220d4:	f003 fbab 	bl	2582e <printk>
   220d8:	4810      	ldr	r0, [pc, #64]	; (2211c <signal_poller+0x9c>)
   220da:	f003 fba8 	bl	2582e <printk>
   220de:	21f9      	movs	r1, #249	; 0xf9
   220e0:	4630      	mov	r0, r6
   220e2:	f003 fe26 	bl	25d32 <assert_post_action>
   220e6:	e7d2      	b.n	2208e <signal_poller+0xe>
	arch_thread_return_value_set(thread,
   220e8:	f06f 0303 	mvn.w	r3, #3
   220ec:	e7e3      	b.n	220b6 <signal_poller+0x36>
   220ee:	2301      	movs	r3, #1
   220f0:	e000      	b.n	220f4 <signal_poller+0x74>
   220f2:	2300      	movs	r3, #0
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   220f4:	b90b      	cbnz	r3, 220fa <signal_poller+0x7a>
		return 0;
   220f6:	2000      	movs	r0, #0
   220f8:	e005      	b.n	22106 <signal_poller+0x86>
	}

	z_ready_thread(thread);
   220fa:	4620      	mov	r0, r4
   220fc:	f7fe fb16 	bl	2072c <z_ready_thread>

	return 0;
   22100:	2000      	movs	r0, #0
   22102:	e000      	b.n	22106 <signal_poller+0x86>
		return 0;
   22104:	2000      	movs	r0, #0
}
   22106:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   22108:	f06f 000a 	mvn.w	r0, #10
   2210c:	e7fb      	b.n	22106 <signal_poller+0x86>
   2210e:	bf00      	nop
   22110:	0002d968 	.word	0x0002d968
   22114:	0002d98c 	.word	0x0002d98c
   22118:	00029ff8 	.word	0x00029ff8
   2211c:	0002d9a4 	.word	0x0002d9a4

00022120 <k_poll_event_init>:
{
   22120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22124:	4604      	mov	r4, r0
   22126:	460e      	mov	r6, r1
   22128:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2212a:	4617      	mov	r7, r2
   2212c:	b9ca      	cbnz	r2, 22162 <k_poll_event_init+0x42>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   2212e:	2e1f      	cmp	r6, #31
   22130:	d827      	bhi.n	22182 <k_poll_event_init+0x62>
	__ASSERT(obj != NULL, "must provide an object\n");
   22132:	2d00      	cmp	r5, #0
   22134:	d035      	beq.n	221a2 <k_poll_event_init+0x82>
	event->poller = NULL;
   22136:	2300      	movs	r3, #0
   22138:	60a3      	str	r3, [r4, #8]
	event->type = type;
   2213a:	7b62      	ldrb	r2, [r4, #13]
   2213c:	f366 0204 	bfi	r2, r6, #0, #5
   22140:	7362      	strb	r2, [r4, #13]
	event->state = K_POLL_STATE_NOT_READY;
   22142:	68e2      	ldr	r2, [r4, #12]
   22144:	f363 3252 	bfi	r2, r3, #13, #6
   22148:	60e2      	str	r2, [r4, #12]
	event->mode = mode;
   2214a:	f3c2 4207 	ubfx	r2, r2, #16, #8
   2214e:	f367 02c3 	bfi	r2, r7, #3, #1
   22152:	73a2      	strb	r2, [r4, #14]
	event->unused = 0U;
   22154:	89e2      	ldrh	r2, [r4, #14]
   22156:	f363 120f 	bfi	r2, r3, #4, #12
   2215a:	81e2      	strh	r2, [r4, #14]
	event->obj = obj;
   2215c:	6125      	str	r5, [r4, #16]
}
   2215e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   22162:	f8df 807c 	ldr.w	r8, [pc, #124]	; 221e0 <k_poll_event_init+0xc0>
   22166:	232d      	movs	r3, #45	; 0x2d
   22168:	4642      	mov	r2, r8
   2216a:	4916      	ldr	r1, [pc, #88]	; (221c4 <k_poll_event_init+0xa4>)
   2216c:	4816      	ldr	r0, [pc, #88]	; (221c8 <k_poll_event_init+0xa8>)
   2216e:	f003 fb5e 	bl	2582e <printk>
   22172:	4816      	ldr	r0, [pc, #88]	; (221cc <k_poll_event_init+0xac>)
   22174:	f003 fb5b 	bl	2582e <printk>
   22178:	212d      	movs	r1, #45	; 0x2d
   2217a:	4640      	mov	r0, r8
   2217c:	f003 fdd9 	bl	25d32 <assert_post_action>
   22180:	e7d5      	b.n	2212e <k_poll_event_init+0xe>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   22182:	f8df 805c 	ldr.w	r8, [pc, #92]	; 221e0 <k_poll_event_init+0xc0>
   22186:	232f      	movs	r3, #47	; 0x2f
   22188:	4642      	mov	r2, r8
   2218a:	4911      	ldr	r1, [pc, #68]	; (221d0 <k_poll_event_init+0xb0>)
   2218c:	480e      	ldr	r0, [pc, #56]	; (221c8 <k_poll_event_init+0xa8>)
   2218e:	f003 fb4e 	bl	2582e <printk>
   22192:	4810      	ldr	r0, [pc, #64]	; (221d4 <k_poll_event_init+0xb4>)
   22194:	f003 fb4b 	bl	2582e <printk>
   22198:	212f      	movs	r1, #47	; 0x2f
   2219a:	4640      	mov	r0, r8
   2219c:	f003 fdc9 	bl	25d32 <assert_post_action>
   221a0:	e7c7      	b.n	22132 <k_poll_event_init+0x12>
	__ASSERT(obj != NULL, "must provide an object\n");
   221a2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 221e0 <k_poll_event_init+0xc0>
   221a6:	2330      	movs	r3, #48	; 0x30
   221a8:	4642      	mov	r2, r8
   221aa:	490b      	ldr	r1, [pc, #44]	; (221d8 <k_poll_event_init+0xb8>)
   221ac:	4806      	ldr	r0, [pc, #24]	; (221c8 <k_poll_event_init+0xa8>)
   221ae:	f003 fb3e 	bl	2582e <printk>
   221b2:	480a      	ldr	r0, [pc, #40]	; (221dc <k_poll_event_init+0xbc>)
   221b4:	f003 fb3b 	bl	2582e <printk>
   221b8:	2130      	movs	r1, #48	; 0x30
   221ba:	4640      	mov	r0, r8
   221bc:	f003 fdb9 	bl	25d32 <assert_post_action>
   221c0:	e7b9      	b.n	22136 <k_poll_event_init+0x16>
   221c2:	bf00      	nop
   221c4:	0002dab0 	.word	0x0002dab0
   221c8:	00029ff8 	.word	0x00029ff8
   221cc:	0002dad0 	.word	0x0002dad0
   221d0:	0002daf8 	.word	0x0002daf8
   221d4:	0002db1c 	.word	0x0002db1c
   221d8:	0002db2c 	.word	0x0002db2c
   221dc:	0002db40 	.word	0x0002db40
   221e0:	0002d968 	.word	0x0002d968

000221e4 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   221e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221e8:	b08d      	sub	sp, #52	; 0x34
   221ea:	4605      	mov	r5, r0
   221ec:	9106      	str	r1, [sp, #24]
   221ee:	9202      	str	r2, [sp, #8]
   221f0:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   221f2:	4bae      	ldr	r3, [pc, #696]	; (224ac <z_impl_k_poll+0x2c8>)
   221f4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   221f8:	f109 0660 	add.w	r6, r9, #96	; 0x60

	poller->is_polling = true;
   221fc:	2301      	movs	r3, #1
   221fe:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   22202:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
   22206:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   2220a:	b973      	cbnz	r3, 2222a <z_impl_k_poll+0x46>
	__ASSERT(events != NULL, "NULL events\n");
   2220c:	b1f5      	cbz	r5, 2224c <z_impl_k_poll+0x68>
	__ASSERT(num_events >= 0, "<0 events\n");
   2220e:	9b06      	ldr	r3, [sp, #24]
   22210:	2b00      	cmp	r3, #0
   22212:	db2c      	blt.n	2226e <z_impl_k_poll+0x8a>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   22214:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   22218:	4613      	mov	r3, r2
   2221a:	430b      	orrs	r3, r1
   2221c:	bf0c      	ite	eq
   2221e:	2301      	moveq	r3, #1
   22220:	2300      	movne	r3, #0
   22222:	9307      	str	r3, [sp, #28]
	for (int ii = 0; ii < num_events; ii++) {
   22224:	2700      	movs	r7, #0
	int events_registered = 0;
   22226:	46bb      	mov	fp, r7
	for (int ii = 0; ii < num_events; ii++) {
   22228:	e089      	b.n	2233e <z_impl_k_poll+0x15a>
	__ASSERT(!arch_is_in_isr(), "");
   2222a:	4ca1      	ldr	r4, [pc, #644]	; (224b0 <z_impl_k_poll+0x2cc>)
   2222c:	f44f 738d 	mov.w	r3, #282	; 0x11a
   22230:	4622      	mov	r2, r4
   22232:	49a0      	ldr	r1, [pc, #640]	; (224b4 <z_impl_k_poll+0x2d0>)
   22234:	48a0      	ldr	r0, [pc, #640]	; (224b8 <z_impl_k_poll+0x2d4>)
   22236:	f003 fafa 	bl	2582e <printk>
   2223a:	48a0      	ldr	r0, [pc, #640]	; (224bc <z_impl_k_poll+0x2d8>)
   2223c:	f003 faf7 	bl	2582e <printk>
   22240:	f44f 718d 	mov.w	r1, #282	; 0x11a
   22244:	4620      	mov	r0, r4
   22246:	f003 fd74 	bl	25d32 <assert_post_action>
   2224a:	e7df      	b.n	2220c <z_impl_k_poll+0x28>
	__ASSERT(events != NULL, "NULL events\n");
   2224c:	4c98      	ldr	r4, [pc, #608]	; (224b0 <z_impl_k_poll+0x2cc>)
   2224e:	f240 131b 	movw	r3, #283	; 0x11b
   22252:	4622      	mov	r2, r4
   22254:	499a      	ldr	r1, [pc, #616]	; (224c0 <z_impl_k_poll+0x2dc>)
   22256:	4898      	ldr	r0, [pc, #608]	; (224b8 <z_impl_k_poll+0x2d4>)
   22258:	f003 fae9 	bl	2582e <printk>
   2225c:	4899      	ldr	r0, [pc, #612]	; (224c4 <z_impl_k_poll+0x2e0>)
   2225e:	f003 fae6 	bl	2582e <printk>
   22262:	f240 111b 	movw	r1, #283	; 0x11b
   22266:	4620      	mov	r0, r4
   22268:	f003 fd63 	bl	25d32 <assert_post_action>
   2226c:	e7cf      	b.n	2220e <z_impl_k_poll+0x2a>
	__ASSERT(num_events >= 0, "<0 events\n");
   2226e:	4c90      	ldr	r4, [pc, #576]	; (224b0 <z_impl_k_poll+0x2cc>)
   22270:	f44f 738e 	mov.w	r3, #284	; 0x11c
   22274:	4622      	mov	r2, r4
   22276:	4994      	ldr	r1, [pc, #592]	; (224c8 <z_impl_k_poll+0x2e4>)
   22278:	488f      	ldr	r0, [pc, #572]	; (224b8 <z_impl_k_poll+0x2d4>)
   2227a:	f003 fad8 	bl	2582e <printk>
   2227e:	4893      	ldr	r0, [pc, #588]	; (224cc <z_impl_k_poll+0x2e8>)
   22280:	f003 fad5 	bl	2582e <printk>
   22284:	f44f 718e 	mov.w	r1, #284	; 0x11c
   22288:	4620      	mov	r0, r4
   2228a:	f003 fd52 	bl	25d32 <assert_post_action>
   2228e:	e7c1      	b.n	22214 <z_impl_k_poll+0x30>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22290:	4c8f      	ldr	r4, [pc, #572]	; (224d0 <z_impl_k_poll+0x2ec>)
   22292:	2381      	movs	r3, #129	; 0x81
   22294:	4622      	mov	r2, r4
   22296:	498f      	ldr	r1, [pc, #572]	; (224d4 <z_impl_k_poll+0x2f0>)
   22298:	4887      	ldr	r0, [pc, #540]	; (224b8 <z_impl_k_poll+0x2d4>)
   2229a:	f003 fac8 	bl	2582e <printk>
   2229e:	498e      	ldr	r1, [pc, #568]	; (224d8 <z_impl_k_poll+0x2f4>)
   222a0:	488e      	ldr	r0, [pc, #568]	; (224dc <z_impl_k_poll+0x2f8>)
   222a2:	f003 fac4 	bl	2582e <printk>
   222a6:	2181      	movs	r1, #129	; 0x81
   222a8:	4620      	mov	r0, r4
   222aa:	f003 fd42 	bl	25d32 <assert_post_action>
   222ae:	e058      	b.n	22362 <z_impl_k_poll+0x17e>
		if (k_sem_count_get(event->sem) > 0U) {
   222b0:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   222b2:	689b      	ldr	r3, [r3, #8]
   222b4:	b353      	cbz	r3, 2230c <z_impl_k_poll+0x128>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   222b6:	2302      	movs	r3, #2
   222b8:	9305      	str	r3, [sp, #20]
			return true;
   222ba:	2301      	movs	r3, #1
   222bc:	e026      	b.n	2230c <z_impl_k_poll+0x128>
		if (!k_queue_is_empty(event->queue)) {
   222be:	6923      	ldr	r3, [r4, #16]
	return list->head;
   222c0:	681b      	ldr	r3, [r3, #0]
   222c2:	b31b      	cbz	r3, 2230c <z_impl_k_poll+0x128>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   222c4:	2304      	movs	r3, #4
   222c6:	9305      	str	r3, [sp, #20]
			return true;
   222c8:	2301      	movs	r3, #1
   222ca:	e01f      	b.n	2230c <z_impl_k_poll+0x128>
		if (event->signal->signaled != 0U) {
   222cc:	6923      	ldr	r3, [r4, #16]
   222ce:	689b      	ldr	r3, [r3, #8]
   222d0:	b1e3      	cbz	r3, 2230c <z_impl_k_poll+0x128>
			*state = K_POLL_STATE_SIGNALED;
   222d2:	2301      	movs	r3, #1
   222d4:	9305      	str	r3, [sp, #20]
   222d6:	e019      	b.n	2230c <z_impl_k_poll+0x128>
		if (event->msgq->used_msgs > 0) {
   222d8:	6923      	ldr	r3, [r4, #16]
   222da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   222dc:	b1b3      	cbz	r3, 2230c <z_impl_k_poll+0x128>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   222de:	2310      	movs	r3, #16
   222e0:	9305      	str	r3, [sp, #20]
			return true;
   222e2:	2301      	movs	r3, #1
   222e4:	e012      	b.n	2230c <z_impl_k_poll+0x128>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   222e6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 224b0 <z_impl_k_poll+0x2cc>
   222ea:	235c      	movs	r3, #92	; 0x5c
   222ec:	4642      	mov	r2, r8
   222ee:	497c      	ldr	r1, [pc, #496]	; (224e0 <z_impl_k_poll+0x2fc>)
   222f0:	4871      	ldr	r0, [pc, #452]	; (224b8 <z_impl_k_poll+0x2d4>)
   222f2:	f003 fa9c 	bl	2582e <printk>
   222f6:	7b61      	ldrb	r1, [r4, #13]
   222f8:	f001 011f 	and.w	r1, r1, #31
   222fc:	4879      	ldr	r0, [pc, #484]	; (224e4 <z_impl_k_poll+0x300>)
   222fe:	f003 fa96 	bl	2582e <printk>
   22302:	215c      	movs	r1, #92	; 0x5c
   22304:	4640      	mov	r0, r8
   22306:	f003 fd14 	bl	25d32 <assert_post_action>
	return false;
   2230a:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   2230c:	2b00      	cmp	r3, #0
   2230e:	d04d      	beq.n	223ac <z_impl_k_poll+0x1c8>
	event->poller = NULL;
   22310:	2100      	movs	r1, #0
   22312:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   22314:	68e3      	ldr	r3, [r4, #12]
   22316:	f3c3 3245 	ubfx	r2, r3, #13, #6
   2231a:	9805      	ldr	r0, [sp, #20]
   2231c:	4302      	orrs	r2, r0
   2231e:	f362 3352 	bfi	r3, r2, #13, #6
   22322:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   22324:	7031      	strb	r1, [r6, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22326:	486c      	ldr	r0, [pc, #432]	; (224d8 <z_impl_k_poll+0x2f4>)
   22328:	f7fc f9b4 	bl	1e694 <z_spin_unlock_valid>
   2232c:	2800      	cmp	r0, #0
   2232e:	f000 825c 	beq.w	227ea <z_impl_k_poll+0x606>
   22332:	9b08      	ldr	r3, [sp, #32]
   22334:	f383 8811 	msr	BASEPRI, r3
   22338:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2233c:	3701      	adds	r7, #1
   2233e:	9b06      	ldr	r3, [sp, #24]
   22340:	42bb      	cmp	r3, r7
   22342:	f340 827f 	ble.w	22844 <z_impl_k_poll+0x660>
	__asm__ volatile(
   22346:	f04f 0340 	mov.w	r3, #64	; 0x40
   2234a:	f3ef 8211 	mrs	r2, BASEPRI
   2234e:	f383 8812 	msr	BASEPRI_MAX, r3
   22352:	f3bf 8f6f 	isb	sy
   22356:	9208      	str	r2, [sp, #32]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22358:	485f      	ldr	r0, [pc, #380]	; (224d8 <z_impl_k_poll+0x2f4>)
   2235a:	f7fc f98b 	bl	1e674 <z_spin_lock_valid>
   2235e:	2800      	cmp	r0, #0
   22360:	d096      	beq.n	22290 <z_impl_k_poll+0xac>
	z_spin_lock_set_owner(l);
   22362:	485d      	ldr	r0, [pc, #372]	; (224d8 <z_impl_k_poll+0x2f4>)
   22364:	f7fc f9a6 	bl	1e6b4 <z_spin_lock_set_owner>
		if (is_condition_met(&events[ii], &state)) {
   22368:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   2236c:	00a3      	lsls	r3, r4, #2
   2236e:	9309      	str	r3, [sp, #36]	; 0x24
   22370:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   22374:	7b63      	ldrb	r3, [r4, #13]
   22376:	f003 031f 	and.w	r3, r3, #31
   2237a:	2b08      	cmp	r3, #8
   2237c:	d8b3      	bhi.n	222e6 <z_impl_k_poll+0x102>
   2237e:	a201      	add	r2, pc, #4	; (adr r2, 22384 <z_impl_k_poll+0x1a0>)
   22380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22384:	000223a9 	.word	0x000223a9
   22388:	000222cd 	.word	0x000222cd
   2238c:	000222b1 	.word	0x000222b1
   22390:	000222e7 	.word	0x000222e7
   22394:	000222bf 	.word	0x000222bf
   22398:	000222e7 	.word	0x000222e7
   2239c:	000222e7 	.word	0x000222e7
   223a0:	000222e7 	.word	0x000222e7
   223a4:	000222d9 	.word	0x000222d9
   223a8:	2300      	movs	r3, #0
   223aa:	e7af      	b.n	2230c <z_impl_k_poll+0x128>
		} else if (!just_check && poller->is_polling) {
   223ac:	9b07      	ldr	r3, [sp, #28]
   223ae:	2b00      	cmp	r3, #0
   223b0:	d1b9      	bne.n	22326 <z_impl_k_poll+0x142>
   223b2:	7833      	ldrb	r3, [r6, #0]
   223b4:	2b00      	cmp	r3, #0
   223b6:	d0b6      	beq.n	22326 <z_impl_k_poll+0x142>
	switch (event->type) {
   223b8:	7b63      	ldrb	r3, [r4, #13]
   223ba:	f003 031f 	and.w	r3, r3, #31
   223be:	2b08      	cmp	r3, #8
   223c0:	f200 8200 	bhi.w	227c4 <z_impl_k_poll+0x5e0>
   223c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   223c8:	0116020d 	.word	0x0116020d
   223cc:	01fe0009 	.word	0x01fe0009
   223d0:	01fe00a1 	.word	0x01fe00a1
   223d4:	01fe01fe 	.word	0x01fe01fe
   223d8:	0189      	.short	0x0189
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   223da:	6923      	ldr	r3, [r4, #16]
   223dc:	2b00      	cmp	r3, #0
   223de:	d036      	beq.n	2244e <z_impl_k_poll+0x26a>
		add_event(&event->sem->poll_events, event, poller);
   223e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
   223e4:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   223e8:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   223ec:	4598      	cmp	r8, r3
   223ee:	d03e      	beq.n	2246e <z_impl_k_poll+0x28a>
   223f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   223f4:	2b00      	cmp	r3, #0
   223f6:	d03a      	beq.n	2246e <z_impl_k_poll+0x28a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   223f8:	6898      	ldr	r0, [r3, #8]
   223fa:	f007 fae3 	bl	299c4 <poller_thread>
   223fe:	900b      	str	r0, [sp, #44]	; 0x2c
   22400:	4630      	mov	r0, r6
   22402:	f007 fadf 	bl	299c4 <poller_thread>
   22406:	4601      	mov	r1, r0
   22408:	900a      	str	r0, [sp, #40]	; 0x28
   2240a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2240c:	f007 fa27 	bl	2985e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   22410:	2800      	cmp	r0, #0
   22412:	dc2c      	bgt.n	2246e <z_impl_k_poll+0x28a>
	return list->head == list;
   22414:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22418:	45d0      	cmp	r8, sl
   2241a:	d03e      	beq.n	2249a <z_impl_k_poll+0x2b6>
   2241c:	4653      	mov	r3, sl
   2241e:	46a2      	mov	sl, r4
   22420:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22422:	2c00      	cmp	r4, #0
   22424:	d03f      	beq.n	224a6 <z_impl_k_poll+0x2c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   22426:	68a0      	ldr	r0, [r4, #8]
   22428:	f007 facc 	bl	299c4 <poller_thread>
   2242c:	4601      	mov	r1, r0
   2242e:	980a      	ldr	r0, [sp, #40]	; 0x28
   22430:	f007 fa15 	bl	2985e <z_sched_prio_cmp>
   22434:	2800      	cmp	r0, #0
   22436:	dc24      	bgt.n	22482 <z_impl_k_poll+0x29e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22438:	2c00      	cmp	r4, #0
   2243a:	d059      	beq.n	224f0 <z_impl_k_poll+0x30c>
	return (node == list->tail) ? NULL : node->next;
   2243c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22440:	429c      	cmp	r4, r3
   22442:	d060      	beq.n	22506 <z_impl_k_poll+0x322>
   22444:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22446:	2c00      	cmp	r4, #0
   22448:	d1eb      	bne.n	22422 <z_impl_k_poll+0x23e>
   2244a:	4654      	mov	r4, sl
   2244c:	e051      	b.n	224f2 <z_impl_k_poll+0x30e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2244e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 224b0 <z_impl_k_poll+0x2cc>
   22452:	2386      	movs	r3, #134	; 0x86
   22454:	4642      	mov	r2, r8
   22456:	4924      	ldr	r1, [pc, #144]	; (224e8 <z_impl_k_poll+0x304>)
   22458:	4817      	ldr	r0, [pc, #92]	; (224b8 <z_impl_k_poll+0x2d4>)
   2245a:	f003 f9e8 	bl	2582e <printk>
   2245e:	4823      	ldr	r0, [pc, #140]	; (224ec <z_impl_k_poll+0x308>)
   22460:	f003 f9e5 	bl	2582e <printk>
   22464:	2186      	movs	r1, #134	; 0x86
   22466:	4640      	mov	r0, r8
   22468:	f003 fc63 	bl	25d32 <assert_post_action>
   2246c:	e7b8      	b.n	223e0 <z_impl_k_poll+0x1fc>
	sys_dnode_t *const tail = list->tail;
   2246e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   22472:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22474:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   22478:	6063      	str	r3, [r4, #4]
	tail->next = node;
   2247a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2247c:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   22480:	e1af      	b.n	227e2 <z_impl_k_poll+0x5fe>
   22482:	4623      	mov	r3, r4
   22484:	4654      	mov	r4, sl
   22486:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   22488:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   2248a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   2248c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2248e:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   22492:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   22494:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   22498:	e1a3      	b.n	227e2 <z_impl_k_poll+0x5fe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2249a:	f04f 0a00 	mov.w	sl, #0
   2249e:	4653      	mov	r3, sl
   224a0:	46a2      	mov	sl, r4
   224a2:	461c      	mov	r4, r3
   224a4:	e7bd      	b.n	22422 <z_impl_k_poll+0x23e>
   224a6:	4654      	mov	r4, sl
   224a8:	e023      	b.n	224f2 <z_impl_k_poll+0x30e>
   224aa:	bf00      	nop
   224ac:	20002d18 	.word	0x20002d18
   224b0:	0002d968 	.word	0x0002d968
   224b4:	0002d500 	.word	0x0002d500
   224b8:	00029ff8 	.word	0x00029ff8
   224bc:	0002c900 	.word	0x0002c900
   224c0:	0002db5c 	.word	0x0002db5c
   224c4:	0002db74 	.word	0x0002db74
   224c8:	0002db84 	.word	0x0002db84
   224cc:	0002db94 	.word	0x0002db94
   224d0:	0002a314 	.word	0x0002a314
   224d4:	0002a36c 	.word	0x0002a36c
   224d8:	20002d78 	.word	0x20002d78
   224dc:	0002a384 	.word	0x0002a384
   224e0:	0002dc18 	.word	0x0002dc18
   224e4:	0002dba4 	.word	0x0002dba4
   224e8:	0002d9c4 	.word	0x0002d9c4
   224ec:	0002d9e0 	.word	0x0002d9e0
   224f0:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   224f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   224f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   224f8:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   224fc:	6063      	str	r3, [r4, #4]
	tail->next = node;
   224fe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22500:	f8c8 4004 	str.w	r4, [r8, #4]
}
   22504:	e16d      	b.n	227e2 <z_impl_k_poll+0x5fe>
   22506:	4654      	mov	r4, sl
   22508:	e7f3      	b.n	224f2 <z_impl_k_poll+0x30e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2250a:	6923      	ldr	r3, [r4, #16]
   2250c:	2b00      	cmp	r3, #0
   2250e:	d036      	beq.n	2257e <z_impl_k_poll+0x39a>
		add_event(&event->queue->poll_events, event, poller);
   22510:	f8d4 a010 	ldr.w	sl, [r4, #16]
   22514:	f10a 0814 	add.w	r8, sl, #20
	return list->head == list;
   22518:	f8da 3014 	ldr.w	r3, [sl, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2251c:	4598      	cmp	r8, r3
   2251e:	d03e      	beq.n	2259e <z_impl_k_poll+0x3ba>
   22520:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   22524:	2b00      	cmp	r3, #0
   22526:	d03a      	beq.n	2259e <z_impl_k_poll+0x3ba>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   22528:	6898      	ldr	r0, [r3, #8]
   2252a:	f007 fa4b 	bl	299c4 <poller_thread>
   2252e:	900b      	str	r0, [sp, #44]	; 0x2c
   22530:	4630      	mov	r0, r6
   22532:	f007 fa47 	bl	299c4 <poller_thread>
   22536:	4601      	mov	r1, r0
   22538:	900a      	str	r0, [sp, #40]	; 0x28
   2253a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2253c:	f007 f98f 	bl	2985e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   22540:	2800      	cmp	r0, #0
   22542:	dc2c      	bgt.n	2259e <z_impl_k_poll+0x3ba>
	return list->head == list;
   22544:	f8da a014 	ldr.w	sl, [sl, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22548:	45d0      	cmp	r8, sl
   2254a:	d03e      	beq.n	225ca <z_impl_k_poll+0x3e6>
   2254c:	4653      	mov	r3, sl
   2254e:	46a2      	mov	sl, r4
   22550:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22552:	2c00      	cmp	r4, #0
   22554:	d03f      	beq.n	225d6 <z_impl_k_poll+0x3f2>
		if (z_sched_prio_cmp(poller_thread(poller),
   22556:	68a0      	ldr	r0, [r4, #8]
   22558:	f007 fa34 	bl	299c4 <poller_thread>
   2255c:	4601      	mov	r1, r0
   2255e:	980a      	ldr	r0, [sp, #40]	; 0x28
   22560:	f007 f97d 	bl	2985e <z_sched_prio_cmp>
   22564:	2800      	cmp	r0, #0
   22566:	dc24      	bgt.n	225b2 <z_impl_k_poll+0x3ce>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22568:	2c00      	cmp	r4, #0
   2256a:	d036      	beq.n	225da <z_impl_k_poll+0x3f6>
	return (node == list->tail) ? NULL : node->next;
   2256c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22570:	429c      	cmp	r4, r3
   22572:	d03d      	beq.n	225f0 <z_impl_k_poll+0x40c>
   22574:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22576:	2c00      	cmp	r4, #0
   22578:	d1eb      	bne.n	22552 <z_impl_k_poll+0x36e>
   2257a:	4654      	mov	r4, sl
   2257c:	e02e      	b.n	225dc <z_impl_k_poll+0x3f8>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2257e:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 22840 <z_impl_k_poll+0x65c>
   22582:	238a      	movs	r3, #138	; 0x8a
   22584:	4642      	mov	r2, r8
   22586:	49a1      	ldr	r1, [pc, #644]	; (2280c <z_impl_k_poll+0x628>)
   22588:	48a1      	ldr	r0, [pc, #644]	; (22810 <z_impl_k_poll+0x62c>)
   2258a:	f003 f950 	bl	2582e <printk>
   2258e:	48a1      	ldr	r0, [pc, #644]	; (22814 <z_impl_k_poll+0x630>)
   22590:	f003 f94d 	bl	2582e <printk>
   22594:	218a      	movs	r1, #138	; 0x8a
   22596:	4640      	mov	r0, r8
   22598:	f003 fbcb 	bl	25d32 <assert_post_action>
   2259c:	e7b8      	b.n	22510 <z_impl_k_poll+0x32c>
	sys_dnode_t *const tail = list->tail;
   2259e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   225a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   225a4:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   225a8:	6063      	str	r3, [r4, #4]
	tail->next = node;
   225aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   225ac:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   225b0:	e117      	b.n	227e2 <z_impl_k_poll+0x5fe>
   225b2:	4623      	mov	r3, r4
   225b4:	4654      	mov	r4, sl
   225b6:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   225b8:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   225ba:	6063      	str	r3, [r4, #4]
	node->next = successor;
   225bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   225be:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   225c2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   225c4:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   225c8:	e10b      	b.n	227e2 <z_impl_k_poll+0x5fe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   225ca:	f04f 0a00 	mov.w	sl, #0
   225ce:	4653      	mov	r3, sl
   225d0:	46a2      	mov	sl, r4
   225d2:	461c      	mov	r4, r3
   225d4:	e7bd      	b.n	22552 <z_impl_k_poll+0x36e>
   225d6:	4654      	mov	r4, sl
   225d8:	e000      	b.n	225dc <z_impl_k_poll+0x3f8>
   225da:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   225dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   225e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   225e2:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   225e6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   225e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   225ea:	f8c8 4004 	str.w	r4, [r8, #4]
}
   225ee:	e0f8      	b.n	227e2 <z_impl_k_poll+0x5fe>
   225f0:	4654      	mov	r4, sl
   225f2:	e7f3      	b.n	225dc <z_impl_k_poll+0x3f8>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   225f4:	6923      	ldr	r3, [r4, #16]
   225f6:	2b00      	cmp	r3, #0
   225f8:	d034      	beq.n	22664 <z_impl_k_poll+0x480>
		add_event(&event->signal->poll_events, event, poller);
   225fa:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   225fe:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   22602:	4598      	cmp	r8, r3
   22604:	d03e      	beq.n	22684 <z_impl_k_poll+0x4a0>
   22606:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   2260a:	2b00      	cmp	r3, #0
   2260c:	d03a      	beq.n	22684 <z_impl_k_poll+0x4a0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2260e:	6898      	ldr	r0, [r3, #8]
   22610:	f007 f9d8 	bl	299c4 <poller_thread>
   22614:	4682      	mov	sl, r0
   22616:	4630      	mov	r0, r6
   22618:	f007 f9d4 	bl	299c4 <poller_thread>
   2261c:	4601      	mov	r1, r0
   2261e:	900a      	str	r0, [sp, #40]	; 0x28
   22620:	4650      	mov	r0, sl
   22622:	f007 f91c 	bl	2985e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   22626:	2800      	cmp	r0, #0
   22628:	dc2c      	bgt.n	22684 <z_impl_k_poll+0x4a0>
	return list->head == list;
   2262a:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2262e:	45d0      	cmp	r8, sl
   22630:	d03e      	beq.n	226b0 <z_impl_k_poll+0x4cc>
   22632:	4653      	mov	r3, sl
   22634:	46a2      	mov	sl, r4
   22636:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22638:	2c00      	cmp	r4, #0
   2263a:	d03f      	beq.n	226bc <z_impl_k_poll+0x4d8>
		if (z_sched_prio_cmp(poller_thread(poller),
   2263c:	68a0      	ldr	r0, [r4, #8]
   2263e:	f007 f9c1 	bl	299c4 <poller_thread>
   22642:	4601      	mov	r1, r0
   22644:	980a      	ldr	r0, [sp, #40]	; 0x28
   22646:	f007 f90a 	bl	2985e <z_sched_prio_cmp>
   2264a:	2800      	cmp	r0, #0
   2264c:	dc24      	bgt.n	22698 <z_impl_k_poll+0x4b4>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2264e:	2c00      	cmp	r4, #0
   22650:	d036      	beq.n	226c0 <z_impl_k_poll+0x4dc>
	return (node == list->tail) ? NULL : node->next;
   22652:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22656:	429c      	cmp	r4, r3
   22658:	d03d      	beq.n	226d6 <z_impl_k_poll+0x4f2>
   2265a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2265c:	2c00      	cmp	r4, #0
   2265e:	d1eb      	bne.n	22638 <z_impl_k_poll+0x454>
   22660:	4654      	mov	r4, sl
   22662:	e02e      	b.n	226c2 <z_impl_k_poll+0x4de>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22664:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 22840 <z_impl_k_poll+0x65c>
   22668:	238e      	movs	r3, #142	; 0x8e
   2266a:	4642      	mov	r2, r8
   2266c:	496a      	ldr	r1, [pc, #424]	; (22818 <z_impl_k_poll+0x634>)
   2266e:	4868      	ldr	r0, [pc, #416]	; (22810 <z_impl_k_poll+0x62c>)
   22670:	f003 f8dd 	bl	2582e <printk>
   22674:	4869      	ldr	r0, [pc, #420]	; (2281c <z_impl_k_poll+0x638>)
   22676:	f003 f8da 	bl	2582e <printk>
   2267a:	218e      	movs	r1, #142	; 0x8e
   2267c:	4640      	mov	r0, r8
   2267e:	f003 fb58 	bl	25d32 <assert_post_action>
   22682:	e7ba      	b.n	225fa <z_impl_k_poll+0x416>
	sys_dnode_t *const tail = list->tail;
   22684:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   22688:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2268a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2268e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   22690:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22692:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   22696:	e0a4      	b.n	227e2 <z_impl_k_poll+0x5fe>
   22698:	4623      	mov	r3, r4
   2269a:	4654      	mov	r4, sl
   2269c:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   2269e:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   226a0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   226a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   226a4:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   226a8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   226aa:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   226ae:	e098      	b.n	227e2 <z_impl_k_poll+0x5fe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   226b0:	f04f 0a00 	mov.w	sl, #0
   226b4:	4653      	mov	r3, sl
   226b6:	46a2      	mov	sl, r4
   226b8:	461c      	mov	r4, r3
   226ba:	e7bd      	b.n	22638 <z_impl_k_poll+0x454>
   226bc:	4654      	mov	r4, sl
   226be:	e000      	b.n	226c2 <z_impl_k_poll+0x4de>
   226c0:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   226c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   226c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   226c8:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   226cc:	6063      	str	r3, [r4, #4]
	tail->next = node;
   226ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   226d0:	f8c8 4004 	str.w	r4, [r8, #4]
}
   226d4:	e085      	b.n	227e2 <z_impl_k_poll+0x5fe>
   226d6:	4654      	mov	r4, sl
   226d8:	e7f3      	b.n	226c2 <z_impl_k_poll+0x4de>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   226da:	6923      	ldr	r3, [r4, #16]
   226dc:	2b00      	cmp	r3, #0
   226de:	d036      	beq.n	2274e <z_impl_k_poll+0x56a>
		add_event(&event->msgq->poll_events, event, poller);
   226e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
   226e4:	f10a 0828 	add.w	r8, sl, #40	; 0x28
	return list->head == list;
   226e8:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   226ec:	4598      	cmp	r8, r3
   226ee:	d03e      	beq.n	2276e <z_impl_k_poll+0x58a>
   226f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   226f4:	2b00      	cmp	r3, #0
   226f6:	d03a      	beq.n	2276e <z_impl_k_poll+0x58a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   226f8:	6898      	ldr	r0, [r3, #8]
   226fa:	f007 f963 	bl	299c4 <poller_thread>
   226fe:	900b      	str	r0, [sp, #44]	; 0x2c
   22700:	4630      	mov	r0, r6
   22702:	f007 f95f 	bl	299c4 <poller_thread>
   22706:	4601      	mov	r1, r0
   22708:	900a      	str	r0, [sp, #40]	; 0x28
   2270a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2270c:	f007 f8a7 	bl	2985e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   22710:	2800      	cmp	r0, #0
   22712:	dc2c      	bgt.n	2276e <z_impl_k_poll+0x58a>
	return list->head == list;
   22714:	f8da a028 	ldr.w	sl, [sl, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22718:	45d0      	cmp	r8, sl
   2271a:	d03e      	beq.n	2279a <z_impl_k_poll+0x5b6>
   2271c:	4653      	mov	r3, sl
   2271e:	46a2      	mov	sl, r4
   22720:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22722:	2c00      	cmp	r4, #0
   22724:	d03f      	beq.n	227a6 <z_impl_k_poll+0x5c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   22726:	68a0      	ldr	r0, [r4, #8]
   22728:	f007 f94c 	bl	299c4 <poller_thread>
   2272c:	4601      	mov	r1, r0
   2272e:	980a      	ldr	r0, [sp, #40]	; 0x28
   22730:	f007 f895 	bl	2985e <z_sched_prio_cmp>
   22734:	2800      	cmp	r0, #0
   22736:	dc24      	bgt.n	22782 <z_impl_k_poll+0x59e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22738:	2c00      	cmp	r4, #0
   2273a:	d036      	beq.n	227aa <z_impl_k_poll+0x5c6>
	return (node == list->tail) ? NULL : node->next;
   2273c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22740:	429c      	cmp	r4, r3
   22742:	d03d      	beq.n	227c0 <z_impl_k_poll+0x5dc>
   22744:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22746:	2c00      	cmp	r4, #0
   22748:	d1eb      	bne.n	22722 <z_impl_k_poll+0x53e>
   2274a:	4654      	mov	r4, sl
   2274c:	e02e      	b.n	227ac <z_impl_k_poll+0x5c8>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2274e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 22840 <z_impl_k_poll+0x65c>
   22752:	2392      	movs	r3, #146	; 0x92
   22754:	4642      	mov	r2, r8
   22756:	4932      	ldr	r1, [pc, #200]	; (22820 <z_impl_k_poll+0x63c>)
   22758:	482d      	ldr	r0, [pc, #180]	; (22810 <z_impl_k_poll+0x62c>)
   2275a:	f003 f868 	bl	2582e <printk>
   2275e:	4831      	ldr	r0, [pc, #196]	; (22824 <z_impl_k_poll+0x640>)
   22760:	f003 f865 	bl	2582e <printk>
   22764:	2192      	movs	r1, #146	; 0x92
   22766:	4640      	mov	r0, r8
   22768:	f003 fae3 	bl	25d32 <assert_post_action>
   2276c:	e7b8      	b.n	226e0 <z_impl_k_poll+0x4fc>
	sys_dnode_t *const tail = list->tail;
   2276e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   22772:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22774:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   22778:	6063      	str	r3, [r4, #4]
	tail->next = node;
   2277a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2277c:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   22780:	e02f      	b.n	227e2 <z_impl_k_poll+0x5fe>
   22782:	4623      	mov	r3, r4
   22784:	4654      	mov	r4, sl
   22786:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   22788:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   2278a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   2278c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2278e:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   22792:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   22794:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   22798:	e023      	b.n	227e2 <z_impl_k_poll+0x5fe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2279a:	f04f 0a00 	mov.w	sl, #0
   2279e:	4653      	mov	r3, sl
   227a0:	46a2      	mov	sl, r4
   227a2:	461c      	mov	r4, r3
   227a4:	e7bd      	b.n	22722 <z_impl_k_poll+0x53e>
   227a6:	4654      	mov	r4, sl
   227a8:	e000      	b.n	227ac <z_impl_k_poll+0x5c8>
   227aa:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   227ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   227b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   227b2:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   227b6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   227b8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   227ba:	f8c8 4004 	str.w	r4, [r8, #4]
}
   227be:	e010      	b.n	227e2 <z_impl_k_poll+0x5fe>
   227c0:	4654      	mov	r4, sl
   227c2:	e7f3      	b.n	227ac <z_impl_k_poll+0x5c8>
		__ASSERT(false, "invalid event type\n");
   227c4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 22840 <z_impl_k_poll+0x65c>
   227c8:	2399      	movs	r3, #153	; 0x99
   227ca:	4642      	mov	r2, r8
   227cc:	4916      	ldr	r1, [pc, #88]	; (22828 <z_impl_k_poll+0x644>)
   227ce:	4810      	ldr	r0, [pc, #64]	; (22810 <z_impl_k_poll+0x62c>)
   227d0:	f003 f82d 	bl	2582e <printk>
   227d4:	4815      	ldr	r0, [pc, #84]	; (2282c <z_impl_k_poll+0x648>)
   227d6:	f003 f82a 	bl	2582e <printk>
   227da:	2199      	movs	r1, #153	; 0x99
   227dc:	4640      	mov	r0, r8
   227de:	f003 faa8 	bl	25d32 <assert_post_action>
	event->poller = poller;
   227e2:	60a6      	str	r6, [r4, #8]
			events_registered += 1;
   227e4:	f10b 0b01 	add.w	fp, fp, #1
   227e8:	e59d      	b.n	22326 <z_impl_k_poll+0x142>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227ea:	4c11      	ldr	r4, [pc, #68]	; (22830 <z_impl_k_poll+0x64c>)
   227ec:	23ac      	movs	r3, #172	; 0xac
   227ee:	4622      	mov	r2, r4
   227f0:	4910      	ldr	r1, [pc, #64]	; (22834 <z_impl_k_poll+0x650>)
   227f2:	4807      	ldr	r0, [pc, #28]	; (22810 <z_impl_k_poll+0x62c>)
   227f4:	f003 f81b 	bl	2582e <printk>
   227f8:	490f      	ldr	r1, [pc, #60]	; (22838 <z_impl_k_poll+0x654>)
   227fa:	4810      	ldr	r0, [pc, #64]	; (2283c <z_impl_k_poll+0x658>)
   227fc:	f003 f817 	bl	2582e <printk>
   22800:	21ac      	movs	r1, #172	; 0xac
   22802:	4620      	mov	r0, r4
   22804:	f003 fa95 	bl	25d32 <assert_post_action>
   22808:	e593      	b.n	22332 <z_impl_k_poll+0x14e>
   2280a:	bf00      	nop
   2280c:	0002d9f8 	.word	0x0002d9f8
   22810:	00029ff8 	.word	0x00029ff8
   22814:	0002da14 	.word	0x0002da14
   22818:	0002da28 	.word	0x0002da28
   2281c:	0002da48 	.word	0x0002da48
   22820:	0002da60 	.word	0x0002da60
   22824:	0002da7c 	.word	0x0002da7c
   22828:	0002dc18 	.word	0x0002dc18
   2282c:	0002da98 	.word	0x0002da98
   22830:	0002a314 	.word	0x0002a314
   22834:	0002a33c 	.word	0x0002a33c
   22838:	20002d78 	.word	0x20002d78
   2283c:	0002a354 	.word	0x0002a354
   22840:	0002d968 	.word	0x0002d968
   22844:	f04f 0340 	mov.w	r3, #64	; 0x40
   22848:	f3ef 8611 	mrs	r6, BASEPRI
   2284c:	f383 8812 	msr	BASEPRI_MAX, r3
   22850:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22854:	48a7      	ldr	r0, [pc, #668]	; (22af4 <z_impl_k_poll+0x910>)
   22856:	f7fb ff0d 	bl	1e674 <z_spin_lock_valid>
   2285a:	b368      	cbz	r0, 228b8 <z_impl_k_poll+0x6d4>
	z_spin_lock_set_owner(l);
   2285c:	48a5      	ldr	r0, [pc, #660]	; (22af4 <z_impl_k_poll+0x910>)
   2285e:	f7fb ff29 	bl	1e6b4 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   22862:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   22866:	2b00      	cmp	r3, #0
   22868:	d036      	beq.n	228d8 <z_impl_k_poll+0x6f4>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   2286a:	2300      	movs	r3, #0
   2286c:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22870:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   22874:	4323      	orrs	r3, r4
   22876:	f000 8111 	beq.w	22a9c <z_impl_k_poll+0x8b8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2287a:	4c9e      	ldr	r4, [pc, #632]	; (22af4 <z_impl_k_poll+0x910>)
   2287c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22880:	e9cd 2300 	strd	r2, r3, [sp]
   22884:	4a9c      	ldr	r2, [pc, #624]	; (22af8 <z_impl_k_poll+0x914>)
   22886:	4631      	mov	r1, r6
   22888:	4620      	mov	r0, r4
   2288a:	f7fe f927 	bl	20adc <z_pend_curr>
   2288e:	4607      	mov	r7, r0
   22890:	f04f 0340 	mov.w	r3, #64	; 0x40
   22894:	f3ef 8911 	mrs	r9, BASEPRI
   22898:	f383 8812 	msr	BASEPRI_MAX, r3
   2289c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228a0:	4620      	mov	r0, r4
   228a2:	f7fb fee7 	bl	1e674 <z_spin_lock_valid>
   228a6:	2800      	cmp	r0, #0
   228a8:	f000 8113 	beq.w	22ad2 <z_impl_k_poll+0x8ee>
	z_spin_lock_set_owner(l);
   228ac:	4891      	ldr	r0, [pc, #580]	; (22af4 <z_impl_k_poll+0x910>)
   228ae:	f7fb ff01 	bl	1e6b4 <z_spin_lock_set_owner>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   228b2:	464e      	mov	r6, r9
	while (num_events--) {
   228b4:	465b      	mov	r3, fp
   228b6:	e16c      	b.n	22b92 <z_impl_k_poll+0x9ae>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228b8:	4c90      	ldr	r4, [pc, #576]	; (22afc <z_impl_k_poll+0x918>)
   228ba:	2381      	movs	r3, #129	; 0x81
   228bc:	4622      	mov	r2, r4
   228be:	4990      	ldr	r1, [pc, #576]	; (22b00 <z_impl_k_poll+0x91c>)
   228c0:	4890      	ldr	r0, [pc, #576]	; (22b04 <z_impl_k_poll+0x920>)
   228c2:	f002 ffb4 	bl	2582e <printk>
   228c6:	498b      	ldr	r1, [pc, #556]	; (22af4 <z_impl_k_poll+0x910>)
   228c8:	488f      	ldr	r0, [pc, #572]	; (22b08 <z_impl_k_poll+0x924>)
   228ca:	f002 ffb0 	bl	2582e <printk>
   228ce:	2181      	movs	r1, #129	; 0x81
   228d0:	4620      	mov	r0, r4
   228d2:	f003 fa2e 	bl	25d32 <assert_post_action>
   228d6:	e7c1      	b.n	2285c <z_impl_k_poll+0x678>
		clear_event_registrations(events, events_registered, key);
   228d8:	46b0      	mov	r8, r6
	while (num_events--) {
   228da:	465f      	mov	r7, fp
   228dc:	e026      	b.n	2292c <z_impl_k_poll+0x748>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   228de:	6923      	ldr	r3, [r4, #16]
   228e0:	2b00      	cmp	r3, #0
   228e2:	d049      	beq.n	22978 <z_impl_k_poll+0x794>
	return node->next != NULL;
   228e4:	59eb      	ldr	r3, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   228e6:	b12b      	cbz	r3, 228f4 <z_impl_k_poll+0x710>
	sys_dnode_t *const prev = node->prev;
   228e8:	6862      	ldr	r2, [r4, #4]
	prev->next = next;
   228ea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   228ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   228ee:	2300      	movs	r3, #0
   228f0:	51eb      	str	r3, [r5, r7]
	node->prev = NULL;
   228f2:	6063      	str	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228f4:	487f      	ldr	r0, [pc, #508]	; (22af4 <z_impl_k_poll+0x910>)
   228f6:	f7fb fecd 	bl	1e694 <z_spin_unlock_valid>
   228fa:	2800      	cmp	r0, #0
   228fc:	f000 8095 	beq.w	22a2a <z_impl_k_poll+0x846>
	__asm__ volatile(
   22900:	f388 8811 	msr	BASEPRI, r8
   22904:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22908:	f04f 0340 	mov.w	r3, #64	; 0x40
   2290c:	f3ef 8811 	mrs	r8, BASEPRI
   22910:	f383 8812 	msr	BASEPRI_MAX, r3
   22914:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22918:	4876      	ldr	r0, [pc, #472]	; (22af4 <z_impl_k_poll+0x910>)
   2291a:	f7fb feab 	bl	1e674 <z_spin_lock_valid>
   2291e:	2800      	cmp	r0, #0
   22920:	f000 8093 	beq.w	22a4a <z_impl_k_poll+0x866>
	z_spin_lock_set_owner(l);
   22924:	4873      	ldr	r0, [pc, #460]	; (22af4 <z_impl_k_poll+0x910>)
   22926:	f7fb fec5 	bl	1e6b4 <z_spin_lock_set_owner>
	while (num_events--) {
   2292a:	464f      	mov	r7, r9
   2292c:	f107 39ff 	add.w	r9, r7, #4294967295
   22930:	2f00      	cmp	r7, #0
   22932:	f000 809a 	beq.w	22a6a <z_impl_k_poll+0x886>
		clear_event_registration(&events[num_events]);
   22936:	eb09 0489 	add.w	r4, r9, r9, lsl #2
   2293a:	00a7      	lsls	r7, r4, #2
   2293c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	event->poller = NULL;
   22940:	2300      	movs	r3, #0
   22942:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   22944:	7b63      	ldrb	r3, [r4, #13]
   22946:	f003 031f 	and.w	r3, r3, #31
   2294a:	2b08      	cmp	r3, #8
   2294c:	d85e      	bhi.n	22a0c <z_impl_k_poll+0x828>
   2294e:	a201      	add	r2, pc, #4	; (adr r2, 22954 <z_impl_k_poll+0x770>)
   22950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22954:	000228f5 	.word	0x000228f5
   22958:	000229bf 	.word	0x000229bf
   2295c:	000228df 	.word	0x000228df
   22960:	00022a0d 	.word	0x00022a0d
   22964:	00022999 	.word	0x00022999
   22968:	00022a0d 	.word	0x00022a0d
   2296c:	00022a0d 	.word	0x00022a0d
   22970:	00022a0d 	.word	0x00022a0d
   22974:	000229e5 	.word	0x000229e5
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22978:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 22b2c <z_impl_k_poll+0x948>
   2297c:	23a9      	movs	r3, #169	; 0xa9
   2297e:	4652      	mov	r2, sl
   22980:	4962      	ldr	r1, [pc, #392]	; (22b0c <z_impl_k_poll+0x928>)
   22982:	4860      	ldr	r0, [pc, #384]	; (22b04 <z_impl_k_poll+0x920>)
   22984:	f002 ff53 	bl	2582e <printk>
   22988:	4861      	ldr	r0, [pc, #388]	; (22b10 <z_impl_k_poll+0x92c>)
   2298a:	f002 ff50 	bl	2582e <printk>
   2298e:	21a9      	movs	r1, #169	; 0xa9
   22990:	4650      	mov	r0, sl
   22992:	f003 f9ce 	bl	25d32 <assert_post_action>
   22996:	e7a5      	b.n	228e4 <z_impl_k_poll+0x700>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22998:	6923      	ldr	r3, [r4, #16]
   2299a:	2b00      	cmp	r3, #0
   2299c:	d1a2      	bne.n	228e4 <z_impl_k_poll+0x700>
   2299e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 22b2c <z_impl_k_poll+0x948>
   229a2:	23ad      	movs	r3, #173	; 0xad
   229a4:	4652      	mov	r2, sl
   229a6:	495b      	ldr	r1, [pc, #364]	; (22b14 <z_impl_k_poll+0x930>)
   229a8:	4856      	ldr	r0, [pc, #344]	; (22b04 <z_impl_k_poll+0x920>)
   229aa:	f002 ff40 	bl	2582e <printk>
   229ae:	485a      	ldr	r0, [pc, #360]	; (22b18 <z_impl_k_poll+0x934>)
   229b0:	f002 ff3d 	bl	2582e <printk>
   229b4:	21ad      	movs	r1, #173	; 0xad
   229b6:	4650      	mov	r0, sl
   229b8:	f003 f9bb 	bl	25d32 <assert_post_action>
   229bc:	e792      	b.n	228e4 <z_impl_k_poll+0x700>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   229be:	6923      	ldr	r3, [r4, #16]
   229c0:	2b00      	cmp	r3, #0
   229c2:	d18f      	bne.n	228e4 <z_impl_k_poll+0x700>
   229c4:	f8df a164 	ldr.w	sl, [pc, #356]	; 22b2c <z_impl_k_poll+0x948>
   229c8:	23b1      	movs	r3, #177	; 0xb1
   229ca:	4652      	mov	r2, sl
   229cc:	4953      	ldr	r1, [pc, #332]	; (22b1c <z_impl_k_poll+0x938>)
   229ce:	484d      	ldr	r0, [pc, #308]	; (22b04 <z_impl_k_poll+0x920>)
   229d0:	f002 ff2d 	bl	2582e <printk>
   229d4:	4852      	ldr	r0, [pc, #328]	; (22b20 <z_impl_k_poll+0x93c>)
   229d6:	f002 ff2a 	bl	2582e <printk>
   229da:	21b1      	movs	r1, #177	; 0xb1
   229dc:	4650      	mov	r0, sl
   229de:	f003 f9a8 	bl	25d32 <assert_post_action>
   229e2:	e77f      	b.n	228e4 <z_impl_k_poll+0x700>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   229e4:	6923      	ldr	r3, [r4, #16]
   229e6:	2b00      	cmp	r3, #0
   229e8:	f47f af7c 	bne.w	228e4 <z_impl_k_poll+0x700>
   229ec:	f8df a13c 	ldr.w	sl, [pc, #316]	; 22b2c <z_impl_k_poll+0x948>
   229f0:	23b5      	movs	r3, #181	; 0xb5
   229f2:	4652      	mov	r2, sl
   229f4:	494b      	ldr	r1, [pc, #300]	; (22b24 <z_impl_k_poll+0x940>)
   229f6:	4843      	ldr	r0, [pc, #268]	; (22b04 <z_impl_k_poll+0x920>)
   229f8:	f002 ff19 	bl	2582e <printk>
   229fc:	484a      	ldr	r0, [pc, #296]	; (22b28 <z_impl_k_poll+0x944>)
   229fe:	f002 ff16 	bl	2582e <printk>
   22a02:	21b5      	movs	r1, #181	; 0xb5
   22a04:	4650      	mov	r0, sl
   22a06:	f003 f994 	bl	25d32 <assert_post_action>
   22a0a:	e76b      	b.n	228e4 <z_impl_k_poll+0x700>
		__ASSERT(false, "invalid event type\n");
   22a0c:	4c47      	ldr	r4, [pc, #284]	; (22b2c <z_impl_k_poll+0x948>)
   22a0e:	23bc      	movs	r3, #188	; 0xbc
   22a10:	4622      	mov	r2, r4
   22a12:	4947      	ldr	r1, [pc, #284]	; (22b30 <z_impl_k_poll+0x94c>)
   22a14:	483b      	ldr	r0, [pc, #236]	; (22b04 <z_impl_k_poll+0x920>)
   22a16:	f002 ff0a 	bl	2582e <printk>
   22a1a:	4846      	ldr	r0, [pc, #280]	; (22b34 <z_impl_k_poll+0x950>)
   22a1c:	f002 ff07 	bl	2582e <printk>
   22a20:	21bc      	movs	r1, #188	; 0xbc
   22a22:	4620      	mov	r0, r4
   22a24:	f003 f985 	bl	25d32 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22a28:	e764      	b.n	228f4 <z_impl_k_poll+0x710>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a2a:	4c34      	ldr	r4, [pc, #208]	; (22afc <z_impl_k_poll+0x918>)
   22a2c:	23ac      	movs	r3, #172	; 0xac
   22a2e:	4622      	mov	r2, r4
   22a30:	4941      	ldr	r1, [pc, #260]	; (22b38 <z_impl_k_poll+0x954>)
   22a32:	4834      	ldr	r0, [pc, #208]	; (22b04 <z_impl_k_poll+0x920>)
   22a34:	f002 fefb 	bl	2582e <printk>
   22a38:	492e      	ldr	r1, [pc, #184]	; (22af4 <z_impl_k_poll+0x910>)
   22a3a:	4840      	ldr	r0, [pc, #256]	; (22b3c <z_impl_k_poll+0x958>)
   22a3c:	f002 fef7 	bl	2582e <printk>
   22a40:	21ac      	movs	r1, #172	; 0xac
   22a42:	4620      	mov	r0, r4
   22a44:	f003 f975 	bl	25d32 <assert_post_action>
   22a48:	e75a      	b.n	22900 <z_impl_k_poll+0x71c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a4a:	4c2c      	ldr	r4, [pc, #176]	; (22afc <z_impl_k_poll+0x918>)
   22a4c:	2381      	movs	r3, #129	; 0x81
   22a4e:	4622      	mov	r2, r4
   22a50:	492b      	ldr	r1, [pc, #172]	; (22b00 <z_impl_k_poll+0x91c>)
   22a52:	482c      	ldr	r0, [pc, #176]	; (22b04 <z_impl_k_poll+0x920>)
   22a54:	f002 feeb 	bl	2582e <printk>
   22a58:	4926      	ldr	r1, [pc, #152]	; (22af4 <z_impl_k_poll+0x910>)
   22a5a:	482b      	ldr	r0, [pc, #172]	; (22b08 <z_impl_k_poll+0x924>)
   22a5c:	f002 fee7 	bl	2582e <printk>
   22a60:	2181      	movs	r1, #129	; 0x81
   22a62:	4620      	mov	r0, r4
   22a64:	f003 f965 	bl	25d32 <assert_post_action>
   22a68:	e75c      	b.n	22924 <z_impl_k_poll+0x740>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a6a:	4822      	ldr	r0, [pc, #136]	; (22af4 <z_impl_k_poll+0x910>)
   22a6c:	f7fb fe12 	bl	1e694 <z_spin_unlock_valid>
   22a70:	b120      	cbz	r0, 22a7c <z_impl_k_poll+0x898>
	__asm__ volatile(
   22a72:	f386 8811 	msr	BASEPRI, r6
   22a76:	f3bf 8f6f 	isb	sy
		return 0;
   22a7a:	e132      	b.n	22ce2 <z_impl_k_poll+0xafe>
   22a7c:	4c1f      	ldr	r4, [pc, #124]	; (22afc <z_impl_k_poll+0x918>)
   22a7e:	23ac      	movs	r3, #172	; 0xac
   22a80:	4622      	mov	r2, r4
   22a82:	492d      	ldr	r1, [pc, #180]	; (22b38 <z_impl_k_poll+0x954>)
   22a84:	481f      	ldr	r0, [pc, #124]	; (22b04 <z_impl_k_poll+0x920>)
   22a86:	f002 fed2 	bl	2582e <printk>
   22a8a:	491a      	ldr	r1, [pc, #104]	; (22af4 <z_impl_k_poll+0x910>)
   22a8c:	482b      	ldr	r0, [pc, #172]	; (22b3c <z_impl_k_poll+0x958>)
   22a8e:	f002 fece 	bl	2582e <printk>
   22a92:	21ac      	movs	r1, #172	; 0xac
   22a94:	4620      	mov	r0, r4
   22a96:	f003 f94c 	bl	25d32 <assert_post_action>
   22a9a:	e7ea      	b.n	22a72 <z_impl_k_poll+0x88e>
   22a9c:	4815      	ldr	r0, [pc, #84]	; (22af4 <z_impl_k_poll+0x910>)
   22a9e:	f7fb fdf9 	bl	1e694 <z_spin_unlock_valid>
   22aa2:	b130      	cbz	r0, 22ab2 <z_impl_k_poll+0x8ce>
   22aa4:	f386 8811 	msr	BASEPRI, r6
   22aa8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22aac:	f06f 070a 	mvn.w	r7, #10
   22ab0:	e117      	b.n	22ce2 <z_impl_k_poll+0xafe>
   22ab2:	4c12      	ldr	r4, [pc, #72]	; (22afc <z_impl_k_poll+0x918>)
   22ab4:	23ac      	movs	r3, #172	; 0xac
   22ab6:	4622      	mov	r2, r4
   22ab8:	491f      	ldr	r1, [pc, #124]	; (22b38 <z_impl_k_poll+0x954>)
   22aba:	4812      	ldr	r0, [pc, #72]	; (22b04 <z_impl_k_poll+0x920>)
   22abc:	f002 feb7 	bl	2582e <printk>
   22ac0:	490c      	ldr	r1, [pc, #48]	; (22af4 <z_impl_k_poll+0x910>)
   22ac2:	481e      	ldr	r0, [pc, #120]	; (22b3c <z_impl_k_poll+0x958>)
   22ac4:	f002 feb3 	bl	2582e <printk>
   22ac8:	21ac      	movs	r1, #172	; 0xac
   22aca:	4620      	mov	r0, r4
   22acc:	f003 f931 	bl	25d32 <assert_post_action>
   22ad0:	e7e8      	b.n	22aa4 <z_impl_k_poll+0x8c0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ad2:	4c0a      	ldr	r4, [pc, #40]	; (22afc <z_impl_k_poll+0x918>)
   22ad4:	2381      	movs	r3, #129	; 0x81
   22ad6:	4622      	mov	r2, r4
   22ad8:	4909      	ldr	r1, [pc, #36]	; (22b00 <z_impl_k_poll+0x91c>)
   22ada:	480a      	ldr	r0, [pc, #40]	; (22b04 <z_impl_k_poll+0x920>)
   22adc:	f002 fea7 	bl	2582e <printk>
   22ae0:	4904      	ldr	r1, [pc, #16]	; (22af4 <z_impl_k_poll+0x910>)
   22ae2:	4809      	ldr	r0, [pc, #36]	; (22b08 <z_impl_k_poll+0x924>)
   22ae4:	f002 fea3 	bl	2582e <printk>
   22ae8:	2181      	movs	r1, #129	; 0x81
   22aea:	4620      	mov	r0, r4
   22aec:	f003 f921 	bl	25d32 <assert_post_action>
   22af0:	e6dc      	b.n	228ac <z_impl_k_poll+0x6c8>
   22af2:	bf00      	nop
   22af4:	20002d78 	.word	0x20002d78
   22af8:	2000063c 	.word	0x2000063c
   22afc:	0002a314 	.word	0x0002a314
   22b00:	0002a36c 	.word	0x0002a36c
   22b04:	00029ff8 	.word	0x00029ff8
   22b08:	0002a384 	.word	0x0002a384
   22b0c:	0002d9c4 	.word	0x0002d9c4
   22b10:	0002d9e0 	.word	0x0002d9e0
   22b14:	0002d9f8 	.word	0x0002d9f8
   22b18:	0002da14 	.word	0x0002da14
   22b1c:	0002da28 	.word	0x0002da28
   22b20:	0002da48 	.word	0x0002da48
   22b24:	0002da60 	.word	0x0002da60
   22b28:	0002da7c 	.word	0x0002da7c
   22b2c:	0002d968 	.word	0x0002d968
   22b30:	0002dc18 	.word	0x0002dc18
   22b34:	0002da98 	.word	0x0002da98
   22b38:	0002a33c 	.word	0x0002a33c
   22b3c:	0002a354 	.word	0x0002a354
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22b40:	6923      	ldr	r3, [r4, #16]
   22b42:	2b00      	cmp	r3, #0
   22b44:	d04c      	beq.n	22be0 <z_impl_k_poll+0x9fc>
	return node->next != NULL;
   22b46:	f855 300a 	ldr.w	r3, [r5, sl]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22b4a:	b133      	cbz	r3, 22b5a <z_impl_k_poll+0x976>
	sys_dnode_t *const prev = node->prev;
   22b4c:	6862      	ldr	r2, [r4, #4]
	prev->next = next;
   22b4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22b50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22b52:	2300      	movs	r3, #0
   22b54:	f845 300a 	str.w	r3, [r5, sl]
	node->prev = NULL;
   22b58:	6063      	str	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b5a:	486c      	ldr	r0, [pc, #432]	; (22d0c <z_impl_k_poll+0xb28>)
   22b5c:	f7fb fd9a 	bl	1e694 <z_spin_unlock_valid>
   22b60:	2800      	cmp	r0, #0
   22b62:	f000 8096 	beq.w	22c92 <z_impl_k_poll+0xaae>
   22b66:	f386 8811 	msr	BASEPRI, r6
   22b6a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22b6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b72:	f3ef 8611 	mrs	r6, BASEPRI
   22b76:	f383 8812 	msr	BASEPRI_MAX, r3
   22b7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b7e:	4863      	ldr	r0, [pc, #396]	; (22d0c <z_impl_k_poll+0xb28>)
   22b80:	f7fb fd78 	bl	1e674 <z_spin_lock_valid>
   22b84:	2800      	cmp	r0, #0
   22b86:	f000 8094 	beq.w	22cb2 <z_impl_k_poll+0xace>
	z_spin_lock_set_owner(l);
   22b8a:	4860      	ldr	r0, [pc, #384]	; (22d0c <z_impl_k_poll+0xb28>)
   22b8c:	f7fb fd92 	bl	1e6b4 <z_spin_lock_set_owner>
	while (num_events--) {
   22b90:	4643      	mov	r3, r8
   22b92:	f103 38ff 	add.w	r8, r3, #4294967295
   22b96:	2b00      	cmp	r3, #0
   22b98:	f000 809b 	beq.w	22cd2 <z_impl_k_poll+0xaee>
		clear_event_registration(&events[num_events]);
   22b9c:	eb08 0488 	add.w	r4, r8, r8, lsl #2
   22ba0:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   22ba4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	event->poller = NULL;
   22ba8:	2300      	movs	r3, #0
   22baa:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   22bac:	7b63      	ldrb	r3, [r4, #13]
   22bae:	f003 031f 	and.w	r3, r3, #31
   22bb2:	2b08      	cmp	r3, #8
   22bb4:	d85e      	bhi.n	22c74 <z_impl_k_poll+0xa90>
   22bb6:	a201      	add	r2, pc, #4	; (adr r2, 22bbc <z_impl_k_poll+0x9d8>)
   22bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22bbc:	00022b5b 	.word	0x00022b5b
   22bc0:	00022c27 	.word	0x00022c27
   22bc4:	00022b41 	.word	0x00022b41
   22bc8:	00022c75 	.word	0x00022c75
   22bcc:	00022c01 	.word	0x00022c01
   22bd0:	00022c75 	.word	0x00022c75
   22bd4:	00022c75 	.word	0x00022c75
   22bd8:	00022c75 	.word	0x00022c75
   22bdc:	00022c4d 	.word	0x00022c4d
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22be0:	f8df b150 	ldr.w	fp, [pc, #336]	; 22d34 <z_impl_k_poll+0xb50>
   22be4:	23a9      	movs	r3, #169	; 0xa9
   22be6:	465a      	mov	r2, fp
   22be8:	4949      	ldr	r1, [pc, #292]	; (22d10 <z_impl_k_poll+0xb2c>)
   22bea:	484a      	ldr	r0, [pc, #296]	; (22d14 <z_impl_k_poll+0xb30>)
   22bec:	f002 fe1f 	bl	2582e <printk>
   22bf0:	4849      	ldr	r0, [pc, #292]	; (22d18 <z_impl_k_poll+0xb34>)
   22bf2:	f002 fe1c 	bl	2582e <printk>
   22bf6:	21a9      	movs	r1, #169	; 0xa9
   22bf8:	4658      	mov	r0, fp
   22bfa:	f003 f89a 	bl	25d32 <assert_post_action>
   22bfe:	e7a2      	b.n	22b46 <z_impl_k_poll+0x962>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22c00:	6923      	ldr	r3, [r4, #16]
   22c02:	2b00      	cmp	r3, #0
   22c04:	d19f      	bne.n	22b46 <z_impl_k_poll+0x962>
   22c06:	f8df b12c 	ldr.w	fp, [pc, #300]	; 22d34 <z_impl_k_poll+0xb50>
   22c0a:	23ad      	movs	r3, #173	; 0xad
   22c0c:	465a      	mov	r2, fp
   22c0e:	4943      	ldr	r1, [pc, #268]	; (22d1c <z_impl_k_poll+0xb38>)
   22c10:	4840      	ldr	r0, [pc, #256]	; (22d14 <z_impl_k_poll+0xb30>)
   22c12:	f002 fe0c 	bl	2582e <printk>
   22c16:	4842      	ldr	r0, [pc, #264]	; (22d20 <z_impl_k_poll+0xb3c>)
   22c18:	f002 fe09 	bl	2582e <printk>
   22c1c:	21ad      	movs	r1, #173	; 0xad
   22c1e:	4658      	mov	r0, fp
   22c20:	f003 f887 	bl	25d32 <assert_post_action>
   22c24:	e78f      	b.n	22b46 <z_impl_k_poll+0x962>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22c26:	6923      	ldr	r3, [r4, #16]
   22c28:	2b00      	cmp	r3, #0
   22c2a:	d18c      	bne.n	22b46 <z_impl_k_poll+0x962>
   22c2c:	f8df b104 	ldr.w	fp, [pc, #260]	; 22d34 <z_impl_k_poll+0xb50>
   22c30:	23b1      	movs	r3, #177	; 0xb1
   22c32:	465a      	mov	r2, fp
   22c34:	493b      	ldr	r1, [pc, #236]	; (22d24 <z_impl_k_poll+0xb40>)
   22c36:	4837      	ldr	r0, [pc, #220]	; (22d14 <z_impl_k_poll+0xb30>)
   22c38:	f002 fdf9 	bl	2582e <printk>
   22c3c:	483a      	ldr	r0, [pc, #232]	; (22d28 <z_impl_k_poll+0xb44>)
   22c3e:	f002 fdf6 	bl	2582e <printk>
   22c42:	21b1      	movs	r1, #177	; 0xb1
   22c44:	4658      	mov	r0, fp
   22c46:	f003 f874 	bl	25d32 <assert_post_action>
   22c4a:	e77c      	b.n	22b46 <z_impl_k_poll+0x962>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   22c4c:	6923      	ldr	r3, [r4, #16]
   22c4e:	2b00      	cmp	r3, #0
   22c50:	f47f af79 	bne.w	22b46 <z_impl_k_poll+0x962>
   22c54:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 22d34 <z_impl_k_poll+0xb50>
   22c58:	23b5      	movs	r3, #181	; 0xb5
   22c5a:	465a      	mov	r2, fp
   22c5c:	4933      	ldr	r1, [pc, #204]	; (22d2c <z_impl_k_poll+0xb48>)
   22c5e:	482d      	ldr	r0, [pc, #180]	; (22d14 <z_impl_k_poll+0xb30>)
   22c60:	f002 fde5 	bl	2582e <printk>
   22c64:	4832      	ldr	r0, [pc, #200]	; (22d30 <z_impl_k_poll+0xb4c>)
   22c66:	f002 fde2 	bl	2582e <printk>
   22c6a:	21b5      	movs	r1, #181	; 0xb5
   22c6c:	4658      	mov	r0, fp
   22c6e:	f003 f860 	bl	25d32 <assert_post_action>
   22c72:	e768      	b.n	22b46 <z_impl_k_poll+0x962>
		__ASSERT(false, "invalid event type\n");
   22c74:	4c2f      	ldr	r4, [pc, #188]	; (22d34 <z_impl_k_poll+0xb50>)
   22c76:	23bc      	movs	r3, #188	; 0xbc
   22c78:	4622      	mov	r2, r4
   22c7a:	492f      	ldr	r1, [pc, #188]	; (22d38 <z_impl_k_poll+0xb54>)
   22c7c:	4825      	ldr	r0, [pc, #148]	; (22d14 <z_impl_k_poll+0xb30>)
   22c7e:	f002 fdd6 	bl	2582e <printk>
   22c82:	482e      	ldr	r0, [pc, #184]	; (22d3c <z_impl_k_poll+0xb58>)
   22c84:	f002 fdd3 	bl	2582e <printk>
   22c88:	21bc      	movs	r1, #188	; 0xbc
   22c8a:	4620      	mov	r0, r4
   22c8c:	f003 f851 	bl	25d32 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22c90:	e763      	b.n	22b5a <z_impl_k_poll+0x976>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c92:	4c2b      	ldr	r4, [pc, #172]	; (22d40 <z_impl_k_poll+0xb5c>)
   22c94:	23ac      	movs	r3, #172	; 0xac
   22c96:	4622      	mov	r2, r4
   22c98:	492a      	ldr	r1, [pc, #168]	; (22d44 <z_impl_k_poll+0xb60>)
   22c9a:	481e      	ldr	r0, [pc, #120]	; (22d14 <z_impl_k_poll+0xb30>)
   22c9c:	f002 fdc7 	bl	2582e <printk>
   22ca0:	491a      	ldr	r1, [pc, #104]	; (22d0c <z_impl_k_poll+0xb28>)
   22ca2:	4829      	ldr	r0, [pc, #164]	; (22d48 <z_impl_k_poll+0xb64>)
   22ca4:	f002 fdc3 	bl	2582e <printk>
   22ca8:	21ac      	movs	r1, #172	; 0xac
   22caa:	4620      	mov	r0, r4
   22cac:	f003 f841 	bl	25d32 <assert_post_action>
   22cb0:	e759      	b.n	22b66 <z_impl_k_poll+0x982>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cb2:	4c23      	ldr	r4, [pc, #140]	; (22d40 <z_impl_k_poll+0xb5c>)
   22cb4:	2381      	movs	r3, #129	; 0x81
   22cb6:	4622      	mov	r2, r4
   22cb8:	4924      	ldr	r1, [pc, #144]	; (22d4c <z_impl_k_poll+0xb68>)
   22cba:	4816      	ldr	r0, [pc, #88]	; (22d14 <z_impl_k_poll+0xb30>)
   22cbc:	f002 fdb7 	bl	2582e <printk>
   22cc0:	4912      	ldr	r1, [pc, #72]	; (22d0c <z_impl_k_poll+0xb28>)
   22cc2:	4823      	ldr	r0, [pc, #140]	; (22d50 <z_impl_k_poll+0xb6c>)
   22cc4:	f002 fdb3 	bl	2582e <printk>
   22cc8:	2181      	movs	r1, #129	; 0x81
   22cca:	4620      	mov	r0, r4
   22ccc:	f003 f831 	bl	25d32 <assert_post_action>
   22cd0:	e75b      	b.n	22b8a <z_impl_k_poll+0x9a6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cd2:	480e      	ldr	r0, [pc, #56]	; (22d0c <z_impl_k_poll+0xb28>)
   22cd4:	f7fb fcde 	bl	1e694 <z_spin_unlock_valid>
   22cd8:	b138      	cbz	r0, 22cea <z_impl_k_poll+0xb06>
	__asm__ volatile(
   22cda:	f389 8811 	msr	BASEPRI, r9
   22cde:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   22ce2:	4638      	mov	r0, r7
   22ce4:	b00d      	add	sp, #52	; 0x34
   22ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22cea:	4c15      	ldr	r4, [pc, #84]	; (22d40 <z_impl_k_poll+0xb5c>)
   22cec:	23ac      	movs	r3, #172	; 0xac
   22cee:	4622      	mov	r2, r4
   22cf0:	4914      	ldr	r1, [pc, #80]	; (22d44 <z_impl_k_poll+0xb60>)
   22cf2:	4808      	ldr	r0, [pc, #32]	; (22d14 <z_impl_k_poll+0xb30>)
   22cf4:	f002 fd9b 	bl	2582e <printk>
   22cf8:	4904      	ldr	r1, [pc, #16]	; (22d0c <z_impl_k_poll+0xb28>)
   22cfa:	4813      	ldr	r0, [pc, #76]	; (22d48 <z_impl_k_poll+0xb64>)
   22cfc:	f002 fd97 	bl	2582e <printk>
   22d00:	21ac      	movs	r1, #172	; 0xac
   22d02:	4620      	mov	r0, r4
   22d04:	f003 f815 	bl	25d32 <assert_post_action>
   22d08:	e7e7      	b.n	22cda <z_impl_k_poll+0xaf6>
   22d0a:	bf00      	nop
   22d0c:	20002d78 	.word	0x20002d78
   22d10:	0002d9c4 	.word	0x0002d9c4
   22d14:	00029ff8 	.word	0x00029ff8
   22d18:	0002d9e0 	.word	0x0002d9e0
   22d1c:	0002d9f8 	.word	0x0002d9f8
   22d20:	0002da14 	.word	0x0002da14
   22d24:	0002da28 	.word	0x0002da28
   22d28:	0002da48 	.word	0x0002da48
   22d2c:	0002da60 	.word	0x0002da60
   22d30:	0002da7c 	.word	0x0002da7c
   22d34:	0002d968 	.word	0x0002d968
   22d38:	0002dc18 	.word	0x0002dc18
   22d3c:	0002da98 	.word	0x0002da98
   22d40:	0002a314 	.word	0x0002a314
   22d44:	0002a33c 	.word	0x0002a33c
   22d48:	0002a354 	.word	0x0002a354
   22d4c:	0002a36c 	.word	0x0002a36c
   22d50:	0002a384 	.word	0x0002a384

00022d54 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   22d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d56:	4604      	mov	r4, r0
   22d58:	460d      	mov	r5, r1
	__asm__ volatile(
   22d5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d5e:	f3ef 8611 	mrs	r6, BASEPRI
   22d62:	f383 8812 	msr	BASEPRI_MAX, r3
   22d66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d6a:	4824      	ldr	r0, [pc, #144]	; (22dfc <z_impl_k_poll_signal_raise+0xa8>)
   22d6c:	f7fb fc82 	bl	1e674 <z_spin_lock_valid>
   22d70:	b1d0      	cbz	r0, 22da8 <z_impl_k_poll_signal_raise+0x54>
	z_spin_lock_set_owner(l);
   22d72:	4822      	ldr	r0, [pc, #136]	; (22dfc <z_impl_k_poll_signal_raise+0xa8>)
   22d74:	f7fb fc9e 	bl	1e6b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   22d78:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   22d7a:	2301      	movs	r3, #1
   22d7c:	60a3      	str	r3, [r4, #8]
	return list->head == list;
   22d7e:	6820      	ldr	r0, [r4, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22d80:	4284      	cmp	r4, r0
   22d82:	d021      	beq.n	22dc8 <z_impl_k_poll_signal_raise+0x74>
	sys_dnode_t *const prev = node->prev;
   22d84:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   22d86:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   22d88:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22d8a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22d8c:	2300      	movs	r3, #0
   22d8e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   22d90:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   22d92:	b1c8      	cbz	r0, 22dc8 <z_impl_k_poll_signal_raise+0x74>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22d94:	2101      	movs	r1, #1
   22d96:	f006 fe2e 	bl	299f6 <signal_poll_event>
   22d9a:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   22d9c:	4631      	mov	r1, r6
   22d9e:	4817      	ldr	r0, [pc, #92]	; (22dfc <z_impl_k_poll_signal_raise+0xa8>)
   22da0:	f7fd f9e4 	bl	2016c <z_reschedule>
	return rc;
}
   22da4:	4620      	mov	r0, r4
   22da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22da8:	4f15      	ldr	r7, [pc, #84]	; (22e00 <z_impl_k_poll_signal_raise+0xac>)
   22daa:	2381      	movs	r3, #129	; 0x81
   22dac:	463a      	mov	r2, r7
   22dae:	4915      	ldr	r1, [pc, #84]	; (22e04 <z_impl_k_poll_signal_raise+0xb0>)
   22db0:	4815      	ldr	r0, [pc, #84]	; (22e08 <z_impl_k_poll_signal_raise+0xb4>)
   22db2:	f002 fd3c 	bl	2582e <printk>
   22db6:	4911      	ldr	r1, [pc, #68]	; (22dfc <z_impl_k_poll_signal_raise+0xa8>)
   22db8:	4814      	ldr	r0, [pc, #80]	; (22e0c <z_impl_k_poll_signal_raise+0xb8>)
   22dba:	f002 fd38 	bl	2582e <printk>
   22dbe:	2181      	movs	r1, #129	; 0x81
   22dc0:	4638      	mov	r0, r7
   22dc2:	f002 ffb6 	bl	25d32 <assert_post_action>
   22dc6:	e7d4      	b.n	22d72 <z_impl_k_poll_signal_raise+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22dc8:	480c      	ldr	r0, [pc, #48]	; (22dfc <z_impl_k_poll_signal_raise+0xa8>)
   22dca:	f7fb fc63 	bl	1e694 <z_spin_unlock_valid>
   22dce:	b128      	cbz	r0, 22ddc <z_impl_k_poll_signal_raise+0x88>
	__asm__ volatile(
   22dd0:	f386 8811 	msr	BASEPRI, r6
   22dd4:	f3bf 8f6f 	isb	sy
		return 0;
   22dd8:	2400      	movs	r4, #0
   22dda:	e7e3      	b.n	22da4 <z_impl_k_poll_signal_raise+0x50>
   22ddc:	4c08      	ldr	r4, [pc, #32]	; (22e00 <z_impl_k_poll_signal_raise+0xac>)
   22dde:	23ac      	movs	r3, #172	; 0xac
   22de0:	4622      	mov	r2, r4
   22de2:	490b      	ldr	r1, [pc, #44]	; (22e10 <z_impl_k_poll_signal_raise+0xbc>)
   22de4:	4808      	ldr	r0, [pc, #32]	; (22e08 <z_impl_k_poll_signal_raise+0xb4>)
   22de6:	f002 fd22 	bl	2582e <printk>
   22dea:	4904      	ldr	r1, [pc, #16]	; (22dfc <z_impl_k_poll_signal_raise+0xa8>)
   22dec:	4809      	ldr	r0, [pc, #36]	; (22e14 <z_impl_k_poll_signal_raise+0xc0>)
   22dee:	f002 fd1e 	bl	2582e <printk>
   22df2:	21ac      	movs	r1, #172	; 0xac
   22df4:	4620      	mov	r0, r4
   22df6:	f002 ff9c 	bl	25d32 <assert_post_action>
   22dfa:	e7e9      	b.n	22dd0 <z_impl_k_poll_signal_raise+0x7c>
   22dfc:	20002d78 	.word	0x20002d78
   22e00:	0002a314 	.word	0x0002a314
   22e04:	0002a36c 	.word	0x0002a36c
   22e08:	00029ff8 	.word	0x00029ff8
   22e0c:	0002a384 	.word	0x0002a384
   22e10:	0002a33c 	.word	0x0002a33c
   22e14:	0002a354 	.word	0x0002a354

00022e18 <z_heap_aligned_alloc>:
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   22e18:	b570      	push	{r4, r5, r6, lr}
   22e1a:	b082      	sub	sp, #8
   22e1c:	4605      	mov	r5, r0
   22e1e:	460c      	mov	r4, r1
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22e20:	2100      	movs	r1, #0
   22e22:	2304      	movs	r3, #4
   22e24:	18d2      	adds	r2, r2, r3
   22e26:	d222      	bcs.n	22e6e <z_heap_aligned_alloc+0x56>
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   22e28:	bb19      	cbnz	r1, 22e72 <z_heap_aligned_alloc+0x5a>
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   22e2a:	2000      	movs	r0, #0
   22e2c:	2100      	movs	r1, #0
   22e2e:	e9cd 0100 	strd	r0, r1, [sp]
   22e32:	f044 0104 	orr.w	r1, r4, #4
   22e36:	4628      	mov	r0, r5
   22e38:	f7fb f9e0 	bl	1e1fc <k_heap_aligned_alloc>
	if (mem == NULL) {
   22e3c:	4606      	mov	r6, r0
   22e3e:	b1c8      	cbz	r0, 22e74 <z_heap_aligned_alloc+0x5c>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   22e40:	f846 5b04 	str.w	r5, [r6], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   22e44:	b1b4      	cbz	r4, 22e74 <z_heap_aligned_alloc+0x5c>
   22e46:	1e63      	subs	r3, r4, #1
   22e48:	421e      	tst	r6, r3
   22e4a:	d013      	beq.n	22e74 <z_heap_aligned_alloc+0x5c>
   22e4c:	4d0b      	ldr	r5, [pc, #44]	; (22e7c <z_heap_aligned_alloc+0x64>)
   22e4e:	2325      	movs	r3, #37	; 0x25
   22e50:	462a      	mov	r2, r5
   22e52:	490b      	ldr	r1, [pc, #44]	; (22e80 <z_heap_aligned_alloc+0x68>)
   22e54:	480b      	ldr	r0, [pc, #44]	; (22e84 <z_heap_aligned_alloc+0x6c>)
   22e56:	f002 fcea 	bl	2582e <printk>
   22e5a:	4622      	mov	r2, r4
   22e5c:	4631      	mov	r1, r6
   22e5e:	480a      	ldr	r0, [pc, #40]	; (22e88 <z_heap_aligned_alloc+0x70>)
   22e60:	f002 fce5 	bl	2582e <printk>
   22e64:	2125      	movs	r1, #37	; 0x25
   22e66:	4628      	mov	r0, r5
   22e68:	f002 ff63 	bl	25d32 <assert_post_action>
   22e6c:	e002      	b.n	22e74 <z_heap_aligned_alloc+0x5c>
   22e6e:	2101      	movs	r1, #1
   22e70:	e7da      	b.n	22e28 <z_heap_aligned_alloc+0x10>
		return NULL;
   22e72:	2600      	movs	r6, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   22e74:	4630      	mov	r0, r6
   22e76:	b002      	add	sp, #8
   22e78:	bd70      	pop	{r4, r5, r6, pc}
   22e7a:	bf00      	nop
   22e7c:	0002dbc4 	.word	0x0002dbc4
   22e80:	0002dbe8 	.word	0x0002dbe8
   22e84:	00029ff8 	.word	0x00029ff8
   22e88:	0002dc1c 	.word	0x0002dc1c

00022e8c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   22e8c:	b538      	push	{r3, r4, r5, lr}
   22e8e:	4604      	mov	r4, r0
   22e90:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   22e92:	f006 fc07 	bl	296a4 <k_is_in_isr>
   22e96:	b948      	cbnz	r0, 22eac <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   22e98:	4b05      	ldr	r3, [pc, #20]	; (22eb0 <z_thread_aligned_alloc+0x24>)
   22e9a:	689b      	ldr	r3, [r3, #8]
   22e9c:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   22ea0:	b118      	cbz	r0, 22eaa <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   22ea2:	462a      	mov	r2, r5
   22ea4:	4621      	mov	r1, r4
   22ea6:	f7ff ffb7 	bl	22e18 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   22eaa:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   22eac:	2000      	movs	r0, #0
	return ret;
   22eae:	e7fc      	b.n	22eaa <z_thread_aligned_alloc+0x1e>
   22eb0:	20002d18 	.word	0x20002d18

00022eb4 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   22eb4:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   22eb6:	4a03      	ldr	r2, [pc, #12]	; (22ec4 <boot_banner+0x10>)
   22eb8:	4903      	ldr	r1, [pc, #12]	; (22ec8 <boot_banner+0x14>)
   22eba:	4804      	ldr	r0, [pc, #16]	; (22ecc <boot_banner+0x18>)
   22ebc:	f002 fcb7 	bl	2582e <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   22ec0:	bd08      	pop	{r3, pc}
   22ec2:	bf00      	nop
   22ec4:	0002dbc0 	.word	0x0002dbc0
   22ec8:	0002dc44 	.word	0x0002dc44
   22ecc:	0002dc54 	.word	0x0002dc54

00022ed0 <nrf_cc3xx_platform_init>:
   22ed0:	b510      	push	{r4, lr}
   22ed2:	4c0c      	ldr	r4, [pc, #48]	; (22f04 <nrf_cc3xx_platform_init+0x34>)
   22ed4:	6823      	ldr	r3, [r4, #0]
   22ed6:	b113      	cbz	r3, 22ede <nrf_cc3xx_platform_init+0xe>
   22ed8:	4b0b      	ldr	r3, [pc, #44]	; (22f08 <nrf_cc3xx_platform_init+0x38>)
   22eda:	681b      	ldr	r3, [r3, #0]
   22edc:	b92b      	cbnz	r3, 22eea <nrf_cc3xx_platform_init+0x1a>
   22ede:	f000 fe73 	bl	23bc8 <CC_LibInit>
   22ee2:	b930      	cbnz	r0, 22ef2 <nrf_cc3xx_platform_init+0x22>
   22ee4:	4b08      	ldr	r3, [pc, #32]	; (22f08 <nrf_cc3xx_platform_init+0x38>)
   22ee6:	2201      	movs	r2, #1
   22ee8:	601a      	str	r2, [r3, #0]
   22eea:	2301      	movs	r3, #1
   22eec:	6023      	str	r3, [r4, #0]
   22eee:	2000      	movs	r0, #0
   22ef0:	bd10      	pop	{r4, pc}
   22ef2:	3801      	subs	r0, #1
   22ef4:	2806      	cmp	r0, #6
   22ef6:	d901      	bls.n	22efc <nrf_cc3xx_platform_init+0x2c>
   22ef8:	4804      	ldr	r0, [pc, #16]	; (22f0c <nrf_cc3xx_platform_init+0x3c>)
   22efa:	bd10      	pop	{r4, pc}
   22efc:	4b04      	ldr	r3, [pc, #16]	; (22f10 <nrf_cc3xx_platform_init+0x40>)
   22efe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   22f02:	bd10      	pop	{r4, pc}
   22f04:	20002d7c 	.word	0x20002d7c
   22f08:	20002d80 	.word	0x20002d80
   22f0c:	ffff8ffe 	.word	0xffff8ffe
   22f10:	0002dc7c 	.word	0x0002dc7c

00022f14 <nrf_cc3xx_platform_abort>:
   22f14:	f3bf 8f4f 	dsb	sy
   22f18:	4905      	ldr	r1, [pc, #20]	; (22f30 <nrf_cc3xx_platform_abort+0x1c>)
   22f1a:	4b06      	ldr	r3, [pc, #24]	; (22f34 <nrf_cc3xx_platform_abort+0x20>)
   22f1c:	68ca      	ldr	r2, [r1, #12]
   22f1e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   22f22:	4313      	orrs	r3, r2
   22f24:	60cb      	str	r3, [r1, #12]
   22f26:	f3bf 8f4f 	dsb	sy
   22f2a:	bf00      	nop
   22f2c:	e7fd      	b.n	22f2a <nrf_cc3xx_platform_abort+0x16>
   22f2e:	bf00      	nop
   22f30:	e000ed00 	.word	0xe000ed00
   22f34:	05fa0004 	.word	0x05fa0004

00022f38 <CC_PalAbort>:
   22f38:	b4f0      	push	{r4, r5, r6, r7}
   22f3a:	4f09      	ldr	r7, [pc, #36]	; (22f60 <CC_PalAbort+0x28>)
   22f3c:	4e09      	ldr	r6, [pc, #36]	; (22f64 <CC_PalAbort+0x2c>)
   22f3e:	4c0a      	ldr	r4, [pc, #40]	; (22f68 <CC_PalAbort+0x30>)
   22f40:	4a0a      	ldr	r2, [pc, #40]	; (22f6c <CC_PalAbort+0x34>)
   22f42:	4d0b      	ldr	r5, [pc, #44]	; (22f70 <CC_PalAbort+0x38>)
   22f44:	490b      	ldr	r1, [pc, #44]	; (22f74 <CC_PalAbort+0x3c>)
   22f46:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   22f4a:	603b      	str	r3, [r7, #0]
   22f4c:	6852      	ldr	r2, [r2, #4]
   22f4e:	6033      	str	r3, [r6, #0]
   22f50:	6023      	str	r3, [r4, #0]
   22f52:	2400      	movs	r4, #0
   22f54:	602b      	str	r3, [r5, #0]
   22f56:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   22f5a:	bcf0      	pop	{r4, r5, r6, r7}
   22f5c:	4710      	bx	r2
   22f5e:	bf00      	nop
   22f60:	5002b400 	.word	0x5002b400
   22f64:	5002b404 	.word	0x5002b404
   22f68:	5002b408 	.word	0x5002b408
   22f6c:	20000644 	.word	0x20000644
   22f70:	5002b40c 	.word	0x5002b40c
   22f74:	5002a000 	.word	0x5002a000

00022f78 <nrf_cc3xx_platform_set_abort>:
   22f78:	e9d0 1200 	ldrd	r1, r2, [r0]
   22f7c:	4b01      	ldr	r3, [pc, #4]	; (22f84 <nrf_cc3xx_platform_set_abort+0xc>)
   22f7e:	e9c3 1200 	strd	r1, r2, [r3]
   22f82:	4770      	bx	lr
   22f84:	20000644 	.word	0x20000644

00022f88 <nrf_cc3xx_platform_ctr_drbg_init>:
   22f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22f8c:	4c15      	ldr	r4, [pc, #84]	; (22fe4 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   22f8e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 22fec <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   22f92:	2800      	cmp	r0, #0
   22f94:	bf18      	it	ne
   22f96:	4604      	movne	r4, r0
   22f98:	b083      	sub	sp, #12
   22f9a:	6820      	ldr	r0, [r4, #0]
   22f9c:	4540      	cmp	r0, r8
   22f9e:	d01d      	beq.n	22fdc <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   22fa0:	460d      	mov	r5, r1
   22fa2:	4620      	mov	r0, r4
   22fa4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   22fa8:	f104 0904 	add.w	r9, r4, #4
   22fac:	4616      	mov	r6, r2
   22fae:	f504 778c 	add.w	r7, r4, #280	; 0x118
   22fb2:	f000 f8d3 	bl	2315c <mbedtls_platform_zeroize>
   22fb6:	4648      	mov	r0, r9
   22fb8:	f000 fcf2 	bl	239a0 <cc_mbedtls_entropy_init>
   22fbc:	4638      	mov	r0, r7
   22fbe:	f000 fb1f 	bl	23600 <cc_mbedtls_ctr_drbg_init>
   22fc2:	4909      	ldr	r1, [pc, #36]	; (22fe8 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   22fc4:	9600      	str	r6, [sp, #0]
   22fc6:	464a      	mov	r2, r9
   22fc8:	4638      	mov	r0, r7
   22fca:	462b      	mov	r3, r5
   22fcc:	f000 fb2e 	bl	2362c <cc_mbedtls_ctr_drbg_seed>
   22fd0:	b908      	cbnz	r0, 22fd6 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   22fd2:	f8c4 8000 	str.w	r8, [r4]
   22fd6:	b003      	add	sp, #12
   22fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22fdc:	2000      	movs	r0, #0
   22fde:	b003      	add	sp, #12
   22fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22fe4:	2000375c 	.word	0x2000375c
   22fe8:	00023a1d 	.word	0x00023a1d
   22fec:	5ac9bca5 	.word	0x5ac9bca5

00022ff0 <nrf_cc3xx_platform_ctr_drbg_get>:
   22ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   22ff2:	4c0d      	ldr	r4, [pc, #52]	; (23028 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   22ff4:	4e0d      	ldr	r6, [pc, #52]	; (2302c <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   22ff6:	2800      	cmp	r0, #0
   22ff8:	bf08      	it	eq
   22ffa:	4620      	moveq	r0, r4
   22ffc:	b083      	sub	sp, #12
   22ffe:	6807      	ldr	r7, [r0, #0]
   23000:	42b7      	cmp	r7, r6
   23002:	d10e      	bne.n	23022 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   23004:	2600      	movs	r6, #0
   23006:	461d      	mov	r5, r3
   23008:	f500 708c 	add.w	r0, r0, #280	; 0x118
   2300c:	9600      	str	r6, [sp, #0]
   2300e:	4633      	mov	r3, r6
   23010:	4614      	mov	r4, r2
   23012:	f000 fb57 	bl	236c4 <cc_mbedtls_ctr_drbg_random_with_add>
   23016:	2800      	cmp	r0, #0
   23018:	bf18      	it	ne
   2301a:	4634      	movne	r4, r6
   2301c:	602c      	str	r4, [r5, #0]
   2301e:	b003      	add	sp, #12
   23020:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23022:	4803      	ldr	r0, [pc, #12]	; (23030 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   23024:	e7fb      	b.n	2301e <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   23026:	bf00      	nop
   23028:	2000375c 	.word	0x2000375c
   2302c:	5ac9bca5 	.word	0x5ac9bca5
   23030:	ffff8fe8 	.word	0xffff8fe8

00023034 <mutex_free>:
   23034:	b510      	push	{r4, lr}
   23036:	4604      	mov	r4, r0
   23038:	b130      	cbz	r0, 23048 <mutex_free+0x14>
   2303a:	6863      	ldr	r3, [r4, #4]
   2303c:	06db      	lsls	r3, r3, #27
   2303e:	d502      	bpl.n	23046 <mutex_free+0x12>
   23040:	2300      	movs	r3, #0
   23042:	6023      	str	r3, [r4, #0]
   23044:	6063      	str	r3, [r4, #4]
   23046:	bd10      	pop	{r4, pc}
   23048:	4b02      	ldr	r3, [pc, #8]	; (23054 <mutex_free+0x20>)
   2304a:	4803      	ldr	r0, [pc, #12]	; (23058 <mutex_free+0x24>)
   2304c:	685b      	ldr	r3, [r3, #4]
   2304e:	4798      	blx	r3
   23050:	e7f3      	b.n	2303a <mutex_free+0x6>
   23052:	bf00      	nop
   23054:	20000644 	.word	0x20000644
   23058:	0002dc98 	.word	0x0002dc98

0002305c <mutex_unlock>:
   2305c:	b168      	cbz	r0, 2307a <mutex_unlock+0x1e>
   2305e:	6843      	ldr	r3, [r0, #4]
   23060:	b13b      	cbz	r3, 23072 <mutex_unlock+0x16>
   23062:	06db      	lsls	r3, r3, #27
   23064:	d507      	bpl.n	23076 <mutex_unlock+0x1a>
   23066:	f3bf 8f5f 	dmb	sy
   2306a:	2300      	movs	r3, #0
   2306c:	6003      	str	r3, [r0, #0]
   2306e:	4618      	mov	r0, r3
   23070:	4770      	bx	lr
   23072:	4803      	ldr	r0, [pc, #12]	; (23080 <mutex_unlock+0x24>)
   23074:	4770      	bx	lr
   23076:	4803      	ldr	r0, [pc, #12]	; (23084 <mutex_unlock+0x28>)
   23078:	4770      	bx	lr
   2307a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   2307e:	4770      	bx	lr
   23080:	ffff8fea 	.word	0xffff8fea
   23084:	ffff8fe9 	.word	0xffff8fe9

00023088 <mutex_init>:
   23088:	b510      	push	{r4, lr}
   2308a:	4604      	mov	r4, r0
   2308c:	b120      	cbz	r0, 23098 <mutex_init+0x10>
   2308e:	2200      	movs	r2, #0
   23090:	2311      	movs	r3, #17
   23092:	6022      	str	r2, [r4, #0]
   23094:	6063      	str	r3, [r4, #4]
   23096:	bd10      	pop	{r4, pc}
   23098:	4801      	ldr	r0, [pc, #4]	; (230a0 <mutex_init+0x18>)
   2309a:	f7ff ff4d 	bl	22f38 <CC_PalAbort>
   2309e:	e7f6      	b.n	2308e <mutex_init+0x6>
   230a0:	0002dcc0 	.word	0x0002dcc0

000230a4 <mutex_lock>:
   230a4:	b1c0      	cbz	r0, 230d8 <mutex_lock+0x34>
   230a6:	6843      	ldr	r3, [r0, #4]
   230a8:	b1a3      	cbz	r3, 230d4 <mutex_lock+0x30>
   230aa:	06db      	lsls	r3, r3, #27
   230ac:	d510      	bpl.n	230d0 <mutex_lock+0x2c>
   230ae:	2201      	movs	r2, #1
   230b0:	f3bf 8f5b 	dmb	ish
   230b4:	e850 3f00 	ldrex	r3, [r0]
   230b8:	e840 2100 	strex	r1, r2, [r0]
   230bc:	2900      	cmp	r1, #0
   230be:	d1f9      	bne.n	230b4 <mutex_lock+0x10>
   230c0:	f3bf 8f5b 	dmb	ish
   230c4:	2b01      	cmp	r3, #1
   230c6:	d0f3      	beq.n	230b0 <mutex_lock+0xc>
   230c8:	f3bf 8f5f 	dmb	sy
   230cc:	2000      	movs	r0, #0
   230ce:	4770      	bx	lr
   230d0:	4803      	ldr	r0, [pc, #12]	; (230e0 <mutex_lock+0x3c>)
   230d2:	4770      	bx	lr
   230d4:	4803      	ldr	r0, [pc, #12]	; (230e4 <mutex_lock+0x40>)
   230d6:	4770      	bx	lr
   230d8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   230dc:	4770      	bx	lr
   230de:	bf00      	nop
   230e0:	ffff8fe9 	.word	0xffff8fe9
   230e4:	ffff8fea 	.word	0xffff8fea

000230e8 <nrf_cc3xx_platform_set_mutexes>:
   230e8:	b570      	push	{r4, r5, r6, lr}
   230ea:	e9d0 2300 	ldrd	r2, r3, [r0]
   230ee:	4c13      	ldr	r4, [pc, #76]	; (2313c <nrf_cc3xx_platform_set_mutexes+0x54>)
   230f0:	4d13      	ldr	r5, [pc, #76]	; (23140 <nrf_cc3xx_platform_set_mutexes+0x58>)
   230f2:	e9c4 2300 	strd	r2, r3, [r4]
   230f6:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   230fa:	e9c4 6302 	strd	r6, r3, [r4, #8]
   230fe:	4b11      	ldr	r3, [pc, #68]	; (23144 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   23100:	6808      	ldr	r0, [r1, #0]
   23102:	6018      	str	r0, [r3, #0]
   23104:	6848      	ldr	r0, [r1, #4]
   23106:	6058      	str	r0, [r3, #4]
   23108:	6888      	ldr	r0, [r1, #8]
   2310a:	6098      	str	r0, [r3, #8]
   2310c:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   23110:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   23114:	60de      	str	r6, [r3, #12]
   23116:	6118      	str	r0, [r3, #16]
   23118:	06cb      	lsls	r3, r1, #27
   2311a:	d50d      	bpl.n	23138 <nrf_cc3xx_platform_set_mutexes+0x50>
   2311c:	2300      	movs	r3, #0
   2311e:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   23122:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   23126:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2312a:	4790      	blx	r2
   2312c:	6823      	ldr	r3, [r4, #0]
   2312e:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   23132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23136:	4718      	bx	r3
   23138:	bd70      	pop	{r4, r5, r6, pc}
   2313a:	bf00      	nop
   2313c:	20000654 	.word	0x20000654
   23140:	2000375c 	.word	0x2000375c
   23144:	20000664 	.word	0x20000664

00023148 <mbedtls_zeroize_internal>:
   23148:	b138      	cbz	r0, 2315a <mbedtls_zeroize_internal+0x12>
   2314a:	b131      	cbz	r1, 2315a <mbedtls_zeroize_internal+0x12>
   2314c:	4401      	add	r1, r0
   2314e:	2200      	movs	r2, #0
   23150:	4603      	mov	r3, r0
   23152:	3001      	adds	r0, #1
   23154:	4281      	cmp	r1, r0
   23156:	701a      	strb	r2, [r3, #0]
   23158:	d1fa      	bne.n	23150 <mbedtls_zeroize_internal+0x8>
   2315a:	4770      	bx	lr

0002315c <mbedtls_platform_zeroize>:
   2315c:	b138      	cbz	r0, 2316e <mbedtls_platform_zeroize+0x12>
   2315e:	b131      	cbz	r1, 2316e <mbedtls_platform_zeroize+0x12>
   23160:	4401      	add	r1, r0
   23162:	2200      	movs	r2, #0
   23164:	4603      	mov	r3, r0
   23166:	3001      	adds	r0, #1
   23168:	4288      	cmp	r0, r1
   2316a:	701a      	strb	r2, [r3, #0]
   2316c:	d1fa      	bne.n	23164 <mbedtls_platform_zeroize+0x8>
   2316e:	4770      	bx	lr

00023170 <block_cipher_df>:
   23170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23174:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   23178:	b0b1      	sub	sp, #196	; 0xc4
   2317a:	f200 812e 	bhi.w	233da <block_cipher_df+0x26a>
   2317e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 233ec <block_cipher_df+0x27c>
   23182:	4614      	mov	r4, r2
   23184:	460d      	mov	r5, r1
   23186:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   2318a:	2100      	movs	r1, #0
   2318c:	4682      	mov	sl, r0
   2318e:	4648      	mov	r0, r9
   23190:	f003 fb56 	bl	26840 <memset>
   23194:	a813      	add	r0, sp, #76	; 0x4c
   23196:	f001 f9e5 	bl	24564 <cc_mbedtls_aes_init>
   2319a:	2600      	movs	r6, #0
   2319c:	4629      	mov	r1, r5
   2319e:	2320      	movs	r3, #32
   231a0:	ba65      	rev16	r5, r4
   231a2:	4622      	mov	r2, r4
   231a4:	f109 0018 	add.w	r0, r9, #24
   231a8:	f8a9 5012 	strh.w	r5, [r9, #18]
   231ac:	f889 3017 	strb.w	r3, [r9, #23]
   231b0:	f8a9 6010 	strh.w	r6, [r9, #16]
   231b4:	f003 fb20 	bl	267f8 <memcpy>
   231b8:	eb09 0304 	add.w	r3, r9, r4
   231bc:	2280      	movs	r2, #128	; 0x80
   231be:	4d88      	ldr	r5, [pc, #544]	; (233e0 <block_cipher_df+0x270>)
   231c0:	761a      	strb	r2, [r3, #24]
   231c2:	4b88      	ldr	r3, [pc, #544]	; (233e4 <block_cipher_df+0x274>)
   231c4:	9503      	str	r5, [sp, #12]
   231c6:	9304      	str	r3, [sp, #16]
   231c8:	a813      	add	r0, sp, #76	; 0x4c
   231ca:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   231ce:	a903      	add	r1, sp, #12
   231d0:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   231d4:	e9cd 5305 	strd	r5, r3, [sp, #20]
   231d8:	f001 f9da 	bl	24590 <cc_mbedtls_aes_setkey_enc>
   231dc:	4680      	mov	r8, r0
   231de:	2800      	cmp	r0, #0
   231e0:	f040 80da 	bne.w	23398 <block_cipher_df+0x228>
   231e4:	f104 0319 	add.w	r3, r4, #25
   231e8:	9301      	str	r3, [sp, #4]
   231ea:	af07      	add	r7, sp, #28
   231ec:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   231f0:	2210      	movs	r2, #16
   231f2:	2100      	movs	r1, #0
   231f4:	4638      	mov	r0, r7
   231f6:	f003 fb23 	bl	26840 <memset>
   231fa:	4c7b      	ldr	r4, [pc, #492]	; (233e8 <block_cipher_df+0x278>)
   231fc:	9d01      	ldr	r5, [sp, #4]
   231fe:	f89d 601d 	ldrb.w	r6, [sp, #29]
   23202:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   23206:	f89d e01c 	ldrb.w	lr, [sp, #28]
   2320a:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   2320e:	f89d c01f 	ldrb.w	ip, [sp, #31]
   23212:	f89d 001e 	ldrb.w	r0, [sp, #30]
   23216:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   2321a:	404e      	eors	r6, r1
   2321c:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   23220:	f88d 601d 	strb.w	r6, [sp, #29]
   23224:	ea8e 0303 	eor.w	r3, lr, r3
   23228:	4050      	eors	r0, r2
   2322a:	ea8c 0101 	eor.w	r1, ip, r1
   2322e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   23232:	f88d 301c 	strb.w	r3, [sp, #28]
   23236:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   2323a:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   2323e:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   23242:	f88d 001e 	strb.w	r0, [sp, #30]
   23246:	f88d 101f 	strb.w	r1, [sp, #31]
   2324a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   2324e:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   23252:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   23256:	405a      	eors	r2, r3
   23258:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2325c:	f88d 2020 	strb.w	r2, [sp, #32]
   23260:	ea8c 0606 	eor.w	r6, ip, r6
   23264:	4048      	eors	r0, r1
   23266:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   2326a:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   2326e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   23272:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   23276:	ea8e 0303 	eor.w	r3, lr, r3
   2327a:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   2327e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   23282:	ea8c 0101 	eor.w	r1, ip, r1
   23286:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   2328a:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   2328e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   23292:	ea82 020c 	eor.w	r2, r2, ip
   23296:	4073      	eors	r3, r6
   23298:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   2329c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   232a0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   232a4:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   232a8:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   232ac:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   232b0:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   232b4:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   232b8:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   232bc:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   232c0:	ea8e 0202 	eor.w	r2, lr, r2
   232c4:	4041      	eors	r1, r0
   232c6:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   232ca:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   232ce:	4073      	eors	r3, r6
   232d0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   232d4:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   232d8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   232dc:	ea8c 0000 	eor.w	r0, ip, r0
   232e0:	4056      	eors	r6, r2
   232e2:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   232e6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   232ea:	463b      	mov	r3, r7
   232ec:	463a      	mov	r2, r7
   232ee:	2101      	movs	r1, #1
   232f0:	a813      	add	r0, sp, #76	; 0x4c
   232f2:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   232f6:	f001 f965 	bl	245c4 <cc_mbedtls_aes_crypt_ecb>
   232fa:	2d10      	cmp	r5, #16
   232fc:	bf94      	ite	ls
   232fe:	1b6d      	subls	r5, r5, r5
   23300:	3d10      	subhi	r5, #16
   23302:	2800      	cmp	r0, #0
   23304:	d167      	bne.n	233d6 <block_cipher_df+0x266>
   23306:	3410      	adds	r4, #16
   23308:	2d00      	cmp	r5, #0
   2330a:	f47f af78 	bne.w	231fe <block_cipher_df+0x8e>
   2330e:	eb0b 0008 	add.w	r0, fp, r8
   23312:	2210      	movs	r2, #16
   23314:	4639      	mov	r1, r7
   23316:	f003 fa6f 	bl	267f8 <memcpy>
   2331a:	f899 3003 	ldrb.w	r3, [r9, #3]
   2331e:	f108 0810 	add.w	r8, r8, #16
   23322:	3301      	adds	r3, #1
   23324:	f1b8 0f20 	cmp.w	r8, #32
   23328:	f889 3003 	strb.w	r3, [r9, #3]
   2332c:	f47f af60 	bne.w	231f0 <block_cipher_df+0x80>
   23330:	2280      	movs	r2, #128	; 0x80
   23332:	4659      	mov	r1, fp
   23334:	a813      	add	r0, sp, #76	; 0x4c
   23336:	f001 f92b 	bl	24590 <cc_mbedtls_aes_setkey_enc>
   2333a:	4680      	mov	r8, r0
   2333c:	bb78      	cbnz	r0, 2339e <block_cipher_df+0x22e>
   2333e:	f10a 0520 	add.w	r5, sl, #32
   23342:	4654      	mov	r4, sl
   23344:	ab0f      	add	r3, sp, #60	; 0x3c
   23346:	461a      	mov	r2, r3
   23348:	2101      	movs	r1, #1
   2334a:	a813      	add	r0, sp, #76	; 0x4c
   2334c:	f001 f93a 	bl	245c4 <cc_mbedtls_aes_crypt_ecb>
   23350:	2210      	movs	r2, #16
   23352:	4680      	mov	r8, r0
   23354:	a90f      	add	r1, sp, #60	; 0x3c
   23356:	4620      	mov	r0, r4
   23358:	4414      	add	r4, r2
   2335a:	f1b8 0f00 	cmp.w	r8, #0
   2335e:	d11e      	bne.n	2339e <block_cipher_df+0x22e>
   23360:	f003 fa4a 	bl	267f8 <memcpy>
   23364:	42ac      	cmp	r4, r5
   23366:	d1ed      	bne.n	23344 <block_cipher_df+0x1d4>
   23368:	a813      	add	r0, sp, #76	; 0x4c
   2336a:	f001 f90b 	bl	24584 <cc_mbedtls_aes_free>
   2336e:	481f      	ldr	r0, [pc, #124]	; (233ec <block_cipher_df+0x27c>)
   23370:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   23374:	f7ff fef2 	bl	2315c <mbedtls_platform_zeroize>
   23378:	4658      	mov	r0, fp
   2337a:	2120      	movs	r1, #32
   2337c:	f7ff feee 	bl	2315c <mbedtls_platform_zeroize>
   23380:	a803      	add	r0, sp, #12
   23382:	2110      	movs	r1, #16
   23384:	f7ff feea 	bl	2315c <mbedtls_platform_zeroize>
   23388:	4638      	mov	r0, r7
   2338a:	2110      	movs	r1, #16
   2338c:	f7ff fee6 	bl	2315c <mbedtls_platform_zeroize>
   23390:	4640      	mov	r0, r8
   23392:	b031      	add	sp, #196	; 0xc4
   23394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23398:	af07      	add	r7, sp, #28
   2339a:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   2339e:	a813      	add	r0, sp, #76	; 0x4c
   233a0:	f001 f8f0 	bl	24584 <cc_mbedtls_aes_free>
   233a4:	4811      	ldr	r0, [pc, #68]	; (233ec <block_cipher_df+0x27c>)
   233a6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   233aa:	f7ff fed7 	bl	2315c <mbedtls_platform_zeroize>
   233ae:	4658      	mov	r0, fp
   233b0:	2120      	movs	r1, #32
   233b2:	f7ff fed3 	bl	2315c <mbedtls_platform_zeroize>
   233b6:	a803      	add	r0, sp, #12
   233b8:	2110      	movs	r1, #16
   233ba:	f7ff fecf 	bl	2315c <mbedtls_platform_zeroize>
   233be:	4638      	mov	r0, r7
   233c0:	2110      	movs	r1, #16
   233c2:	f7ff fecb 	bl	2315c <mbedtls_platform_zeroize>
   233c6:	4650      	mov	r0, sl
   233c8:	2120      	movs	r1, #32
   233ca:	f7ff fec7 	bl	2315c <mbedtls_platform_zeroize>
   233ce:	4640      	mov	r0, r8
   233d0:	b031      	add	sp, #196	; 0xc4
   233d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   233d6:	4680      	mov	r8, r0
   233d8:	e7e1      	b.n	2339e <block_cipher_df+0x22e>
   233da:	f06f 0837 	mvn.w	r8, #55	; 0x37
   233de:	e7f6      	b.n	233ce <block_cipher_df+0x25e>
   233e0:	03020100 	.word	0x03020100
   233e4:	07060504 	.word	0x07060504
   233e8:	20002da4 	.word	0x20002da4
   233ec:	20002d94 	.word	0x20002d94

000233f0 <ctr_drbg_update_internal>:
   233f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   233f4:	b088      	sub	sp, #32
   233f6:	4604      	mov	r4, r0
   233f8:	2220      	movs	r2, #32
   233fa:	460d      	mov	r5, r1
   233fc:	4668      	mov	r0, sp
   233fe:	2100      	movs	r1, #0
   23400:	eb04 0802 	add.w	r8, r4, r2
   23404:	f003 fa1c 	bl	26840 <memset>
   23408:	466e      	mov	r6, sp
   2340a:	7be2      	ldrb	r2, [r4, #15]
   2340c:	3201      	adds	r2, #1
   2340e:	b2d2      	uxtb	r2, r2
   23410:	73e2      	strb	r2, [r4, #15]
   23412:	2a00      	cmp	r2, #0
   23414:	d14d      	bne.n	234b2 <ctr_drbg_update_internal+0xc2>
   23416:	7ba2      	ldrb	r2, [r4, #14]
   23418:	3201      	adds	r2, #1
   2341a:	b2d2      	uxtb	r2, r2
   2341c:	73a2      	strb	r2, [r4, #14]
   2341e:	2a00      	cmp	r2, #0
   23420:	d147      	bne.n	234b2 <ctr_drbg_update_internal+0xc2>
   23422:	7b63      	ldrb	r3, [r4, #13]
   23424:	3301      	adds	r3, #1
   23426:	b2db      	uxtb	r3, r3
   23428:	7363      	strb	r3, [r4, #13]
   2342a:	2b00      	cmp	r3, #0
   2342c:	d141      	bne.n	234b2 <ctr_drbg_update_internal+0xc2>
   2342e:	7b23      	ldrb	r3, [r4, #12]
   23430:	3301      	adds	r3, #1
   23432:	b2db      	uxtb	r3, r3
   23434:	7323      	strb	r3, [r4, #12]
   23436:	2b00      	cmp	r3, #0
   23438:	d13b      	bne.n	234b2 <ctr_drbg_update_internal+0xc2>
   2343a:	7ae3      	ldrb	r3, [r4, #11]
   2343c:	3301      	adds	r3, #1
   2343e:	b2db      	uxtb	r3, r3
   23440:	72e3      	strb	r3, [r4, #11]
   23442:	2b00      	cmp	r3, #0
   23444:	d135      	bne.n	234b2 <ctr_drbg_update_internal+0xc2>
   23446:	7aa3      	ldrb	r3, [r4, #10]
   23448:	3301      	adds	r3, #1
   2344a:	b2db      	uxtb	r3, r3
   2344c:	72a3      	strb	r3, [r4, #10]
   2344e:	2b00      	cmp	r3, #0
   23450:	d12f      	bne.n	234b2 <ctr_drbg_update_internal+0xc2>
   23452:	7a63      	ldrb	r3, [r4, #9]
   23454:	3301      	adds	r3, #1
   23456:	b2db      	uxtb	r3, r3
   23458:	7263      	strb	r3, [r4, #9]
   2345a:	bb53      	cbnz	r3, 234b2 <ctr_drbg_update_internal+0xc2>
   2345c:	7a23      	ldrb	r3, [r4, #8]
   2345e:	3301      	adds	r3, #1
   23460:	b2db      	uxtb	r3, r3
   23462:	7223      	strb	r3, [r4, #8]
   23464:	bb2b      	cbnz	r3, 234b2 <ctr_drbg_update_internal+0xc2>
   23466:	79e3      	ldrb	r3, [r4, #7]
   23468:	3301      	adds	r3, #1
   2346a:	b2db      	uxtb	r3, r3
   2346c:	71e3      	strb	r3, [r4, #7]
   2346e:	bb03      	cbnz	r3, 234b2 <ctr_drbg_update_internal+0xc2>
   23470:	79a3      	ldrb	r3, [r4, #6]
   23472:	3301      	adds	r3, #1
   23474:	b2db      	uxtb	r3, r3
   23476:	71a3      	strb	r3, [r4, #6]
   23478:	b9db      	cbnz	r3, 234b2 <ctr_drbg_update_internal+0xc2>
   2347a:	7963      	ldrb	r3, [r4, #5]
   2347c:	3301      	adds	r3, #1
   2347e:	b2db      	uxtb	r3, r3
   23480:	7163      	strb	r3, [r4, #5]
   23482:	b9b3      	cbnz	r3, 234b2 <ctr_drbg_update_internal+0xc2>
   23484:	7923      	ldrb	r3, [r4, #4]
   23486:	3301      	adds	r3, #1
   23488:	b2db      	uxtb	r3, r3
   2348a:	7123      	strb	r3, [r4, #4]
   2348c:	b98b      	cbnz	r3, 234b2 <ctr_drbg_update_internal+0xc2>
   2348e:	78e3      	ldrb	r3, [r4, #3]
   23490:	3301      	adds	r3, #1
   23492:	b2db      	uxtb	r3, r3
   23494:	70e3      	strb	r3, [r4, #3]
   23496:	b963      	cbnz	r3, 234b2 <ctr_drbg_update_internal+0xc2>
   23498:	78a3      	ldrb	r3, [r4, #2]
   2349a:	3301      	adds	r3, #1
   2349c:	b2db      	uxtb	r3, r3
   2349e:	70a3      	strb	r3, [r4, #2]
   234a0:	b93b      	cbnz	r3, 234b2 <ctr_drbg_update_internal+0xc2>
   234a2:	7863      	ldrb	r3, [r4, #1]
   234a4:	3301      	adds	r3, #1
   234a6:	b2db      	uxtb	r3, r3
   234a8:	7063      	strb	r3, [r4, #1]
   234aa:	b913      	cbnz	r3, 234b2 <ctr_drbg_update_internal+0xc2>
   234ac:	7823      	ldrb	r3, [r4, #0]
   234ae:	3301      	adds	r3, #1
   234b0:	7023      	strb	r3, [r4, #0]
   234b2:	4633      	mov	r3, r6
   234b4:	4622      	mov	r2, r4
   234b6:	2101      	movs	r1, #1
   234b8:	4640      	mov	r0, r8
   234ba:	f001 f883 	bl	245c4 <cc_mbedtls_aes_crypt_ecb>
   234be:	4607      	mov	r7, r0
   234c0:	2800      	cmp	r0, #0
   234c2:	d12b      	bne.n	2351c <ctr_drbg_update_internal+0x12c>
   234c4:	3610      	adds	r6, #16
   234c6:	ab08      	add	r3, sp, #32
   234c8:	429e      	cmp	r6, r3
   234ca:	d19e      	bne.n	2340a <ctr_drbg_update_internal+0x1a>
   234cc:	9e01      	ldr	r6, [sp, #4]
   234ce:	686a      	ldr	r2, [r5, #4]
   234d0:	9f00      	ldr	r7, [sp, #0]
   234d2:	6829      	ldr	r1, [r5, #0]
   234d4:	68ab      	ldr	r3, [r5, #8]
   234d6:	4072      	eors	r2, r6
   234d8:	9e02      	ldr	r6, [sp, #8]
   234da:	9201      	str	r2, [sp, #4]
   234dc:	4079      	eors	r1, r7
   234de:	4073      	eors	r3, r6
   234e0:	9100      	str	r1, [sp, #0]
   234e2:	9e03      	ldr	r6, [sp, #12]
   234e4:	68e9      	ldr	r1, [r5, #12]
   234e6:	692a      	ldr	r2, [r5, #16]
   234e8:	9302      	str	r3, [sp, #8]
   234ea:	4071      	eors	r1, r6
   234ec:	9e04      	ldr	r6, [sp, #16]
   234ee:	696b      	ldr	r3, [r5, #20]
   234f0:	9103      	str	r1, [sp, #12]
   234f2:	4056      	eors	r6, r2
   234f4:	9a05      	ldr	r2, [sp, #20]
   234f6:	9604      	str	r6, [sp, #16]
   234f8:	ea83 0102 	eor.w	r1, r3, r2
   234fc:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   23500:	9d06      	ldr	r5, [sp, #24]
   23502:	9105      	str	r1, [sp, #20]
   23504:	4055      	eors	r5, r2
   23506:	9a07      	ldr	r2, [sp, #28]
   23508:	4640      	mov	r0, r8
   2350a:	4053      	eors	r3, r2
   2350c:	4669      	mov	r1, sp
   2350e:	2280      	movs	r2, #128	; 0x80
   23510:	e9cd 5306 	strd	r5, r3, [sp, #24]
   23514:	f001 f83c 	bl	24590 <cc_mbedtls_aes_setkey_enc>
   23518:	4607      	mov	r7, r0
   2351a:	b138      	cbz	r0, 2352c <ctr_drbg_update_internal+0x13c>
   2351c:	4668      	mov	r0, sp
   2351e:	2120      	movs	r1, #32
   23520:	f7ff fe1c 	bl	2315c <mbedtls_platform_zeroize>
   23524:	4638      	mov	r0, r7
   23526:	b008      	add	sp, #32
   23528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2352c:	2210      	movs	r2, #16
   2352e:	4620      	mov	r0, r4
   23530:	eb0d 0102 	add.w	r1, sp, r2
   23534:	f003 f960 	bl	267f8 <memcpy>
   23538:	e7f0      	b.n	2351c <ctr_drbg_update_internal+0x12c>
   2353a:	bf00      	nop

0002353c <mbedtls_ctr_drbg_reseed_internal>:
   2353c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23540:	4604      	mov	r4, r0
   23542:	6980      	ldr	r0, [r0, #24]
   23544:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   23548:	d852      	bhi.n	235f0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2354a:	461d      	mov	r5, r3
   2354c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   23550:	42ab      	cmp	r3, r5
   23552:	d34d      	bcc.n	235f0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   23554:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   23558:	1a18      	subs	r0, r3, r0
   2355a:	4290      	cmp	r0, r2
   2355c:	4616      	mov	r6, r2
   2355e:	d347      	bcc.n	235f0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   23560:	f8df 9098 	ldr.w	r9, [pc, #152]	; 235fc <mbedtls_ctr_drbg_reseed_internal+0xc0>
   23564:	f44f 72c0 	mov.w	r2, #384	; 0x180
   23568:	460f      	mov	r7, r1
   2356a:	4648      	mov	r0, r9
   2356c:	2100      	movs	r1, #0
   2356e:	f003 f967 	bl	26840 <memset>
   23572:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   23576:	69a2      	ldr	r2, [r4, #24]
   23578:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   2357c:	4649      	mov	r1, r9
   2357e:	4798      	blx	r3
   23580:	2800      	cmp	r0, #0
   23582:	d138      	bne.n	235f6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   23584:	f8d4 8018 	ldr.w	r8, [r4, #24]
   23588:	b13d      	cbz	r5, 2359a <mbedtls_ctr_drbg_reseed_internal+0x5e>
   2358a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   2358e:	462a      	mov	r2, r5
   23590:	eb09 0108 	add.w	r1, r9, r8
   23594:	4798      	blx	r3
   23596:	bb70      	cbnz	r0, 235f6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   23598:	44a8      	add	r8, r5
   2359a:	b107      	cbz	r7, 2359e <mbedtls_ctr_drbg_reseed_internal+0x62>
   2359c:	b9c6      	cbnz	r6, 235d0 <mbedtls_ctr_drbg_reseed_internal+0x94>
   2359e:	4917      	ldr	r1, [pc, #92]	; (235fc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   235a0:	4642      	mov	r2, r8
   235a2:	4608      	mov	r0, r1
   235a4:	f7ff fde4 	bl	23170 <block_cipher_df>
   235a8:	4605      	mov	r5, r0
   235aa:	b138      	cbz	r0, 235bc <mbedtls_ctr_drbg_reseed_internal+0x80>
   235ac:	4813      	ldr	r0, [pc, #76]	; (235fc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   235ae:	f44f 71c0 	mov.w	r1, #384	; 0x180
   235b2:	f7ff fdd3 	bl	2315c <mbedtls_platform_zeroize>
   235b6:	4628      	mov	r0, r5
   235b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   235bc:	490f      	ldr	r1, [pc, #60]	; (235fc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   235be:	4620      	mov	r0, r4
   235c0:	f7ff ff16 	bl	233f0 <ctr_drbg_update_internal>
   235c4:	4605      	mov	r5, r0
   235c6:	2800      	cmp	r0, #0
   235c8:	d1f0      	bne.n	235ac <mbedtls_ctr_drbg_reseed_internal+0x70>
   235ca:	2301      	movs	r3, #1
   235cc:	6123      	str	r3, [r4, #16]
   235ce:	e7ed      	b.n	235ac <mbedtls_ctr_drbg_reseed_internal+0x70>
   235d0:	4639      	mov	r1, r7
   235d2:	eb09 0008 	add.w	r0, r9, r8
   235d6:	4632      	mov	r2, r6
   235d8:	f003 f90e 	bl	267f8 <memcpy>
   235dc:	4907      	ldr	r1, [pc, #28]	; (235fc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   235de:	44b0      	add	r8, r6
   235e0:	4642      	mov	r2, r8
   235e2:	4608      	mov	r0, r1
   235e4:	f7ff fdc4 	bl	23170 <block_cipher_df>
   235e8:	4605      	mov	r5, r0
   235ea:	2800      	cmp	r0, #0
   235ec:	d1de      	bne.n	235ac <mbedtls_ctr_drbg_reseed_internal+0x70>
   235ee:	e7e5      	b.n	235bc <mbedtls_ctr_drbg_reseed_internal+0x80>
   235f0:	f06f 0537 	mvn.w	r5, #55	; 0x37
   235f4:	e7df      	b.n	235b6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   235f6:	f06f 0533 	mvn.w	r5, #51	; 0x33
   235fa:	e7dc      	b.n	235b6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   235fc:	20002f34 	.word	0x20002f34

00023600 <cc_mbedtls_ctr_drbg_init>:
   23600:	b510      	push	{r4, lr}
   23602:	22a4      	movs	r2, #164	; 0xa4
   23604:	4604      	mov	r4, r0
   23606:	2100      	movs	r1, #0
   23608:	f003 f91a 	bl	26840 <memset>
   2360c:	4b06      	ldr	r3, [pc, #24]	; (23628 <cc_mbedtls_ctr_drbg_init+0x28>)
   2360e:	f04f 31ff 	mov.w	r1, #4294967295
   23612:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   23616:	6121      	str	r1, [r4, #16]
   23618:	61e2      	str	r2, [r4, #28]
   2361a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   2361e:	681b      	ldr	r3, [r3, #0]
   23620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23624:	4718      	bx	r3
   23626:	bf00      	nop
   23628:	200006a8 	.word	0x200006a8

0002362c <cc_mbedtls_ctr_drbg_seed>:
   2362c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23630:	b085      	sub	sp, #20
   23632:	4605      	mov	r5, r0
   23634:	460f      	mov	r7, r1
   23636:	4616      	mov	r6, r2
   23638:	4668      	mov	r0, sp
   2363a:	2210      	movs	r2, #16
   2363c:	2100      	movs	r1, #0
   2363e:	4699      	mov	r9, r3
   23640:	f003 f8fe 	bl	26840 <memset>
   23644:	4b1d      	ldr	r3, [pc, #116]	; (236bc <cc_mbedtls_ctr_drbg_seed+0x90>)
   23646:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   2364a:	681b      	ldr	r3, [r3, #0]
   2364c:	4640      	mov	r0, r8
   2364e:	4798      	blx	r3
   23650:	b120      	cbz	r0, 2365c <cc_mbedtls_ctr_drbg_seed+0x30>
   23652:	4604      	mov	r4, r0
   23654:	4620      	mov	r0, r4
   23656:	b005      	add	sp, #20
   23658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2365c:	f105 0420 	add.w	r4, r5, #32
   23660:	4620      	mov	r0, r4
   23662:	f000 ff7f 	bl	24564 <cc_mbedtls_aes_init>
   23666:	69aa      	ldr	r2, [r5, #24]
   23668:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   2366c:	692e      	ldr	r6, [r5, #16]
   2366e:	b9e2      	cbnz	r2, 236aa <cc_mbedtls_ctr_drbg_seed+0x7e>
   23670:	2220      	movs	r2, #32
   23672:	2e00      	cmp	r6, #0
   23674:	61aa      	str	r2, [r5, #24]
   23676:	db1f      	blt.n	236b8 <cc_mbedtls_ctr_drbg_seed+0x8c>
   23678:	4620      	mov	r0, r4
   2367a:	4669      	mov	r1, sp
   2367c:	2280      	movs	r2, #128	; 0x80
   2367e:	f000 ff87 	bl	24590 <cc_mbedtls_aes_setkey_enc>
   23682:	4604      	mov	r4, r0
   23684:	b930      	cbnz	r0, 23694 <cc_mbedtls_ctr_drbg_seed+0x68>
   23686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23688:	4633      	mov	r3, r6
   2368a:	4649      	mov	r1, r9
   2368c:	4628      	mov	r0, r5
   2368e:	f7ff ff55 	bl	2353c <mbedtls_ctr_drbg_reseed_internal>
   23692:	4604      	mov	r4, r0
   23694:	4b0a      	ldr	r3, [pc, #40]	; (236c0 <cc_mbedtls_ctr_drbg_seed+0x94>)
   23696:	4640      	mov	r0, r8
   23698:	681b      	ldr	r3, [r3, #0]
   2369a:	4798      	blx	r3
   2369c:	2800      	cmp	r0, #0
   2369e:	bf18      	it	ne
   236a0:	4604      	movne	r4, r0
   236a2:	4620      	mov	r0, r4
   236a4:	b005      	add	sp, #20
   236a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   236aa:	2e00      	cmp	r6, #0
   236ac:	dae4      	bge.n	23678 <cc_mbedtls_ctr_drbg_seed+0x4c>
   236ae:	2a17      	cmp	r2, #23
   236b0:	d802      	bhi.n	236b8 <cc_mbedtls_ctr_drbg_seed+0x8c>
   236b2:	1c53      	adds	r3, r2, #1
   236b4:	085e      	lsrs	r6, r3, #1
   236b6:	e7df      	b.n	23678 <cc_mbedtls_ctr_drbg_seed+0x4c>
   236b8:	2600      	movs	r6, #0
   236ba:	e7dd      	b.n	23678 <cc_mbedtls_ctr_drbg_seed+0x4c>
   236bc:	200006ac 	.word	0x200006ac
   236c0:	200006b0 	.word	0x200006b0

000236c4 <cc_mbedtls_ctr_drbg_random_with_add>:
   236c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236c8:	b08d      	sub	sp, #52	; 0x34
   236ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   236ce:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   236d2:	f200 80e4 	bhi.w	2389e <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   236d6:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   236da:	f200 80dd 	bhi.w	23898 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   236de:	4604      	mov	r4, r0
   236e0:	4615      	mov	r5, r2
   236e2:	460e      	mov	r6, r1
   236e4:	2220      	movs	r2, #32
   236e6:	2100      	movs	r1, #0
   236e8:	a804      	add	r0, sp, #16
   236ea:	461f      	mov	r7, r3
   236ec:	f003 f8a8 	bl	26840 <memset>
   236f0:	4b6c      	ldr	r3, [pc, #432]	; (238a4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   236f2:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   236f6:	681b      	ldr	r3, [r3, #0]
   236f8:	4648      	mov	r0, r9
   236fa:	4798      	blx	r3
   236fc:	4683      	mov	fp, r0
   236fe:	2800      	cmp	r0, #0
   23700:	f040 8093 	bne.w	2382a <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   23704:	6922      	ldr	r2, [r4, #16]
   23706:	69e3      	ldr	r3, [r4, #28]
   23708:	429a      	cmp	r2, r3
   2370a:	f300 8092 	bgt.w	23832 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   2370e:	6963      	ldr	r3, [r4, #20]
   23710:	2b00      	cmp	r3, #0
   23712:	f040 808e 	bne.w	23832 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   23716:	f1b8 0f00 	cmp.w	r8, #0
   2371a:	f040 80a9 	bne.w	23870 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   2371e:	f8df a188 	ldr.w	sl, [pc, #392]	; 238a8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   23722:	466f      	mov	r7, sp
   23724:	2d00      	cmp	r5, #0
   23726:	f000 8098 	beq.w	2385a <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   2372a:	f104 0820 	add.w	r8, r4, #32
   2372e:	466f      	mov	r7, sp
   23730:	e00e      	b.n	23750 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   23732:	2d10      	cmp	r5, #16
   23734:	46ab      	mov	fp, r5
   23736:	bf28      	it	cs
   23738:	f04f 0b10 	movcs.w	fp, #16
   2373c:	4630      	mov	r0, r6
   2373e:	465a      	mov	r2, fp
   23740:	4639      	mov	r1, r7
   23742:	f003 f859 	bl	267f8 <memcpy>
   23746:	ebb5 050b 	subs.w	r5, r5, fp
   2374a:	445e      	add	r6, fp
   2374c:	f000 8085 	beq.w	2385a <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   23750:	7be3      	ldrb	r3, [r4, #15]
   23752:	3301      	adds	r3, #1
   23754:	b2db      	uxtb	r3, r3
   23756:	73e3      	strb	r3, [r4, #15]
   23758:	2b00      	cmp	r3, #0
   2375a:	d14d      	bne.n	237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2375c:	7ba3      	ldrb	r3, [r4, #14]
   2375e:	3301      	adds	r3, #1
   23760:	b2db      	uxtb	r3, r3
   23762:	73a3      	strb	r3, [r4, #14]
   23764:	2b00      	cmp	r3, #0
   23766:	d147      	bne.n	237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   23768:	7b63      	ldrb	r3, [r4, #13]
   2376a:	3301      	adds	r3, #1
   2376c:	b2db      	uxtb	r3, r3
   2376e:	7363      	strb	r3, [r4, #13]
   23770:	2b00      	cmp	r3, #0
   23772:	d141      	bne.n	237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   23774:	7b23      	ldrb	r3, [r4, #12]
   23776:	3301      	adds	r3, #1
   23778:	b2db      	uxtb	r3, r3
   2377a:	7323      	strb	r3, [r4, #12]
   2377c:	2b00      	cmp	r3, #0
   2377e:	d13b      	bne.n	237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   23780:	7ae3      	ldrb	r3, [r4, #11]
   23782:	3301      	adds	r3, #1
   23784:	b2db      	uxtb	r3, r3
   23786:	72e3      	strb	r3, [r4, #11]
   23788:	2b00      	cmp	r3, #0
   2378a:	d135      	bne.n	237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2378c:	7aa3      	ldrb	r3, [r4, #10]
   2378e:	3301      	adds	r3, #1
   23790:	b2db      	uxtb	r3, r3
   23792:	72a3      	strb	r3, [r4, #10]
   23794:	2b00      	cmp	r3, #0
   23796:	d12f      	bne.n	237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   23798:	7a63      	ldrb	r3, [r4, #9]
   2379a:	3301      	adds	r3, #1
   2379c:	b2db      	uxtb	r3, r3
   2379e:	7263      	strb	r3, [r4, #9]
   237a0:	bb53      	cbnz	r3, 237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   237a2:	7a23      	ldrb	r3, [r4, #8]
   237a4:	3301      	adds	r3, #1
   237a6:	b2db      	uxtb	r3, r3
   237a8:	7223      	strb	r3, [r4, #8]
   237aa:	bb2b      	cbnz	r3, 237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   237ac:	79e3      	ldrb	r3, [r4, #7]
   237ae:	3301      	adds	r3, #1
   237b0:	b2db      	uxtb	r3, r3
   237b2:	71e3      	strb	r3, [r4, #7]
   237b4:	bb03      	cbnz	r3, 237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   237b6:	79a3      	ldrb	r3, [r4, #6]
   237b8:	3301      	adds	r3, #1
   237ba:	b2db      	uxtb	r3, r3
   237bc:	71a3      	strb	r3, [r4, #6]
   237be:	b9db      	cbnz	r3, 237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   237c0:	7963      	ldrb	r3, [r4, #5]
   237c2:	3301      	adds	r3, #1
   237c4:	b2db      	uxtb	r3, r3
   237c6:	7163      	strb	r3, [r4, #5]
   237c8:	b9b3      	cbnz	r3, 237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   237ca:	7923      	ldrb	r3, [r4, #4]
   237cc:	3301      	adds	r3, #1
   237ce:	b2db      	uxtb	r3, r3
   237d0:	7123      	strb	r3, [r4, #4]
   237d2:	b98b      	cbnz	r3, 237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   237d4:	78e3      	ldrb	r3, [r4, #3]
   237d6:	3301      	adds	r3, #1
   237d8:	b2db      	uxtb	r3, r3
   237da:	70e3      	strb	r3, [r4, #3]
   237dc:	b963      	cbnz	r3, 237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   237de:	78a3      	ldrb	r3, [r4, #2]
   237e0:	3301      	adds	r3, #1
   237e2:	b2db      	uxtb	r3, r3
   237e4:	70a3      	strb	r3, [r4, #2]
   237e6:	b93b      	cbnz	r3, 237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   237e8:	7863      	ldrb	r3, [r4, #1]
   237ea:	3301      	adds	r3, #1
   237ec:	b2db      	uxtb	r3, r3
   237ee:	7063      	strb	r3, [r4, #1]
   237f0:	b913      	cbnz	r3, 237f8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   237f2:	7823      	ldrb	r3, [r4, #0]
   237f4:	3301      	adds	r3, #1
   237f6:	7023      	strb	r3, [r4, #0]
   237f8:	463b      	mov	r3, r7
   237fa:	4622      	mov	r2, r4
   237fc:	2101      	movs	r1, #1
   237fe:	4640      	mov	r0, r8
   23800:	f000 fee0 	bl	245c4 <cc_mbedtls_aes_crypt_ecb>
   23804:	4683      	mov	fp, r0
   23806:	2800      	cmp	r0, #0
   23808:	d093      	beq.n	23732 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   2380a:	f8da 3000 	ldr.w	r3, [sl]
   2380e:	4648      	mov	r0, r9
   23810:	4798      	blx	r3
   23812:	2120      	movs	r1, #32
   23814:	4603      	mov	r3, r0
   23816:	a804      	add	r0, sp, #16
   23818:	2b00      	cmp	r3, #0
   2381a:	bf18      	it	ne
   2381c:	469b      	movne	fp, r3
   2381e:	f7ff fc9d 	bl	2315c <mbedtls_platform_zeroize>
   23822:	4638      	mov	r0, r7
   23824:	2110      	movs	r1, #16
   23826:	f7ff fc99 	bl	2315c <mbedtls_platform_zeroize>
   2382a:	4658      	mov	r0, fp
   2382c:	b00d      	add	sp, #52	; 0x34
   2382e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23832:	4642      	mov	r2, r8
   23834:	4639      	mov	r1, r7
   23836:	2300      	movs	r3, #0
   23838:	4620      	mov	r0, r4
   2383a:	f7ff fe7f 	bl	2353c <mbedtls_ctr_drbg_reseed_internal>
   2383e:	f8df a068 	ldr.w	sl, [pc, #104]	; 238a8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   23842:	2800      	cmp	r0, #0
   23844:	f43f af6d 	beq.w	23722 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   23848:	f8da 3000 	ldr.w	r3, [sl]
   2384c:	4648      	mov	r0, r9
   2384e:	4798      	blx	r3
   23850:	4683      	mov	fp, r0
   23852:	2800      	cmp	r0, #0
   23854:	f43f af65 	beq.w	23722 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   23858:	e7e7      	b.n	2382a <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   2385a:	a904      	add	r1, sp, #16
   2385c:	4620      	mov	r0, r4
   2385e:	f7ff fdc7 	bl	233f0 <ctr_drbg_update_internal>
   23862:	4683      	mov	fp, r0
   23864:	2800      	cmp	r0, #0
   23866:	d1d0      	bne.n	2380a <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   23868:	6923      	ldr	r3, [r4, #16]
   2386a:	3301      	adds	r3, #1
   2386c:	6123      	str	r3, [r4, #16]
   2386e:	e7cc      	b.n	2380a <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   23870:	4642      	mov	r2, r8
   23872:	4639      	mov	r1, r7
   23874:	a804      	add	r0, sp, #16
   23876:	f7ff fc7b 	bl	23170 <block_cipher_df>
   2387a:	4683      	mov	fp, r0
   2387c:	b118      	cbz	r0, 23886 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   2387e:	f8df a028 	ldr.w	sl, [pc, #40]	; 238a8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   23882:	466f      	mov	r7, sp
   23884:	e7c1      	b.n	2380a <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   23886:	a904      	add	r1, sp, #16
   23888:	4620      	mov	r0, r4
   2388a:	f7ff fdb1 	bl	233f0 <ctr_drbg_update_internal>
   2388e:	4683      	mov	fp, r0
   23890:	2800      	cmp	r0, #0
   23892:	f43f af44 	beq.w	2371e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   23896:	e7f2      	b.n	2387e <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   23898:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   2389c:	e7c5      	b.n	2382a <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   2389e:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   238a2:	e7c2      	b.n	2382a <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   238a4:	200006ac 	.word	0x200006ac
   238a8:	200006b0 	.word	0x200006b0

000238ac <entropy_update>:
   238ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   238b0:	2b20      	cmp	r3, #32
   238b2:	b08b      	sub	sp, #44	; 0x2c
   238b4:	461d      	mov	r5, r3
   238b6:	4606      	mov	r6, r0
   238b8:	4689      	mov	r9, r1
   238ba:	4690      	mov	r8, r2
   238bc:	d826      	bhi.n	2390c <entropy_update+0x60>
   238be:	b2db      	uxtb	r3, r3
   238c0:	af02      	add	r7, sp, #8
   238c2:	6831      	ldr	r1, [r6, #0]
   238c4:	f88d 9004 	strb.w	r9, [sp, #4]
   238c8:	f88d 3005 	strb.w	r3, [sp, #5]
   238cc:	f106 0904 	add.w	r9, r6, #4
   238d0:	b921      	cbnz	r1, 238dc <entropy_update+0x30>
   238d2:	4648      	mov	r0, r9
   238d4:	f000 feba 	bl	2464c <cc_mbedtls_sha256_starts>
   238d8:	4604      	mov	r4, r0
   238da:	b940      	cbnz	r0, 238ee <entropy_update+0x42>
   238dc:	2301      	movs	r3, #1
   238de:	6033      	str	r3, [r6, #0]
   238e0:	2202      	movs	r2, #2
   238e2:	a901      	add	r1, sp, #4
   238e4:	4648      	mov	r0, r9
   238e6:	f000 fec5 	bl	24674 <cc_mbedtls_sha256_update>
   238ea:	4604      	mov	r4, r0
   238ec:	b138      	cbz	r0, 238fe <entropy_update+0x52>
   238ee:	4638      	mov	r0, r7
   238f0:	2120      	movs	r1, #32
   238f2:	f7ff fc33 	bl	2315c <mbedtls_platform_zeroize>
   238f6:	4620      	mov	r0, r4
   238f8:	b00b      	add	sp, #44	; 0x2c
   238fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   238fe:	462a      	mov	r2, r5
   23900:	4641      	mov	r1, r8
   23902:	4648      	mov	r0, r9
   23904:	f000 feb6 	bl	24674 <cc_mbedtls_sha256_update>
   23908:	4604      	mov	r4, r0
   2390a:	e7f0      	b.n	238ee <entropy_update+0x42>
   2390c:	af02      	add	r7, sp, #8
   2390e:	4619      	mov	r1, r3
   23910:	4610      	mov	r0, r2
   23912:	2300      	movs	r3, #0
   23914:	463a      	mov	r2, r7
   23916:	f000 ffad 	bl	24874 <cc_mbedtls_sha256>
   2391a:	4604      	mov	r4, r0
   2391c:	2800      	cmp	r0, #0
   2391e:	d1e6      	bne.n	238ee <entropy_update+0x42>
   23920:	2320      	movs	r3, #32
   23922:	461d      	mov	r5, r3
   23924:	46b8      	mov	r8, r7
   23926:	e7cc      	b.n	238c2 <entropy_update+0x16>

00023928 <entropy_gather_internal.part.0>:
   23928:	b5f0      	push	{r4, r5, r6, r7, lr}
   2392a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2392e:	b0a7      	sub	sp, #156	; 0x9c
   23930:	2b00      	cmp	r3, #0
   23932:	bfd8      	it	le
   23934:	ae02      	addle	r6, sp, #8
   23936:	dd2c      	ble.n	23992 <entropy_gather_internal.part.0+0x6a>
   23938:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   2393c:	4605      	mov	r5, r0
   2393e:	2300      	movs	r3, #0
   23940:	ae02      	add	r6, sp, #8
   23942:	9301      	str	r3, [sp, #4]
   23944:	f1a4 0701 	sub.w	r7, r4, #1
   23948:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   2394c:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   23950:	4631      	mov	r1, r6
   23952:	ab01      	add	r3, sp, #4
   23954:	2290      	movs	r2, #144	; 0x90
   23956:	47a0      	blx	r4
   23958:	fab7 f787 	clz	r7, r7
   2395c:	097f      	lsrs	r7, r7, #5
   2395e:	4604      	mov	r4, r0
   23960:	b910      	cbnz	r0, 23968 <entropy_gather_internal.part.0+0x40>
   23962:	9b01      	ldr	r3, [sp, #4]
   23964:	b93b      	cbnz	r3, 23976 <entropy_gather_internal.part.0+0x4e>
   23966:	b1a7      	cbz	r7, 23992 <entropy_gather_internal.part.0+0x6a>
   23968:	4630      	mov	r0, r6
   2396a:	2190      	movs	r1, #144	; 0x90
   2396c:	f7ff fbf6 	bl	2315c <mbedtls_platform_zeroize>
   23970:	4620      	mov	r0, r4
   23972:	b027      	add	sp, #156	; 0x9c
   23974:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23976:	4601      	mov	r1, r0
   23978:	4632      	mov	r2, r6
   2397a:	4628      	mov	r0, r5
   2397c:	f7ff ff96 	bl	238ac <entropy_update>
   23980:	b950      	cbnz	r0, 23998 <entropy_gather_internal.part.0+0x70>
   23982:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   23986:	9a01      	ldr	r2, [sp, #4]
   23988:	4413      	add	r3, r2
   2398a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   2398e:	2f00      	cmp	r7, #0
   23990:	d1ea      	bne.n	23968 <entropy_gather_internal.part.0+0x40>
   23992:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   23996:	e7e7      	b.n	23968 <entropy_gather_internal.part.0+0x40>
   23998:	4604      	mov	r4, r0
   2399a:	4620      	mov	r0, r4
   2399c:	b027      	add	sp, #156	; 0x9c
   2399e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000239a0 <cc_mbedtls_entropy_init>:
   239a0:	b570      	push	{r4, r5, r6, lr}
   239a2:	2500      	movs	r5, #0
   239a4:	4604      	mov	r4, r0
   239a6:	4629      	mov	r1, r5
   239a8:	2214      	movs	r2, #20
   239aa:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   239ae:	30f8      	adds	r0, #248	; 0xf8
   239b0:	f002 ff46 	bl	26840 <memset>
   239b4:	4b15      	ldr	r3, [pc, #84]	; (23a0c <cc_mbedtls_entropy_init+0x6c>)
   239b6:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   239ba:	681b      	ldr	r3, [r3, #0]
   239bc:	4630      	mov	r0, r6
   239be:	4798      	blx	r3
   239c0:	4620      	mov	r0, r4
   239c2:	f840 5b04 	str.w	r5, [r0], #4
   239c6:	f000 fe27 	bl	24618 <cc_mbedtls_sha256_init>
   239ca:	4b11      	ldr	r3, [pc, #68]	; (23a10 <cc_mbedtls_entropy_init+0x70>)
   239cc:	4630      	mov	r0, r6
   239ce:	681b      	ldr	r3, [r3, #0]
   239d0:	4798      	blx	r3
   239d2:	b9c8      	cbnz	r0, 23a08 <cc_mbedtls_entropy_init+0x68>
   239d4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   239d8:	42ab      	cmp	r3, r5
   239da:	dc0f      	bgt.n	239fc <cc_mbedtls_entropy_init+0x5c>
   239dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   239e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   239e4:	490b      	ldr	r1, [pc, #44]	; (23a14 <cc_mbedtls_entropy_init+0x74>)
   239e6:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   239ea:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   239ee:	3301      	adds	r3, #1
   239f0:	2020      	movs	r0, #32
   239f2:	2101      	movs	r1, #1
   239f4:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   239f8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   239fc:	4b06      	ldr	r3, [pc, #24]	; (23a18 <cc_mbedtls_entropy_init+0x78>)
   239fe:	4630      	mov	r0, r6
   23a00:	681b      	ldr	r3, [r3, #0]
   23a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23a06:	4718      	bx	r3
   23a08:	bd70      	pop	{r4, r5, r6, pc}
   23a0a:	bf00      	nop
   23a0c:	200006a8 	.word	0x200006a8
   23a10:	200006ac 	.word	0x200006ac
   23a14:	00024469 	.word	0x00024469
   23a18:	200006b0 	.word	0x200006b0

00023a1c <cc_mbedtls_entropy_func>:
   23a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23a20:	2a20      	cmp	r2, #32
   23a22:	b088      	sub	sp, #32
   23a24:	d876      	bhi.n	23b14 <cc_mbedtls_entropy_func+0xf8>
   23a26:	4b3d      	ldr	r3, [pc, #244]	; (23b1c <cc_mbedtls_entropy_func+0x100>)
   23a28:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   23a2c:	681b      	ldr	r3, [r3, #0]
   23a2e:	4604      	mov	r4, r0
   23a30:	4648      	mov	r0, r9
   23a32:	4617      	mov	r7, r2
   23a34:	4688      	mov	r8, r1
   23a36:	4798      	blx	r3
   23a38:	4605      	mov	r5, r0
   23a3a:	bba0      	cbnz	r0, 23aa6 <cc_mbedtls_entropy_func+0x8a>
   23a3c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   23a40:	f240 1601 	movw	r6, #257	; 0x101
   23a44:	e001      	b.n	23a4a <cc_mbedtls_entropy_func+0x2e>
   23a46:	3e01      	subs	r6, #1
   23a48:	d060      	beq.n	23b0c <cc_mbedtls_entropy_func+0xf0>
   23a4a:	4620      	mov	r0, r4
   23a4c:	b37b      	cbz	r3, 23aae <cc_mbedtls_entropy_func+0x92>
   23a4e:	f7ff ff6b 	bl	23928 <entropy_gather_internal.part.0>
   23a52:	4605      	mov	r5, r0
   23a54:	bb68      	cbnz	r0, 23ab2 <cc_mbedtls_entropy_func+0x96>
   23a56:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   23a5a:	2b00      	cmp	r3, #0
   23a5c:	ddf3      	ble.n	23a46 <cc_mbedtls_entropy_func+0x2a>
   23a5e:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   23a62:	4290      	cmp	r0, r2
   23a64:	d3ef      	bcc.n	23a46 <cc_mbedtls_entropy_func+0x2a>
   23a66:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   23a6a:	2a01      	cmp	r2, #1
   23a6c:	d1eb      	bne.n	23a46 <cc_mbedtls_entropy_func+0x2a>
   23a6e:	281f      	cmp	r0, #31
   23a70:	d9e9      	bls.n	23a46 <cc_mbedtls_entropy_func+0x2a>
   23a72:	466e      	mov	r6, sp
   23a74:	4629      	mov	r1, r5
   23a76:	2220      	movs	r2, #32
   23a78:	4630      	mov	r0, r6
   23a7a:	f104 0a04 	add.w	sl, r4, #4
   23a7e:	f002 fedf 	bl	26840 <memset>
   23a82:	4631      	mov	r1, r6
   23a84:	4650      	mov	r0, sl
   23a86:	f000 fe1f 	bl	246c8 <cc_mbedtls_sha256_finish>
   23a8a:	4605      	mov	r5, r0
   23a8c:	b198      	cbz	r0, 23ab6 <cc_mbedtls_entropy_func+0x9a>
   23a8e:	4630      	mov	r0, r6
   23a90:	2120      	movs	r1, #32
   23a92:	f7ff fb63 	bl	2315c <mbedtls_platform_zeroize>
   23a96:	4b22      	ldr	r3, [pc, #136]	; (23b20 <cc_mbedtls_entropy_func+0x104>)
   23a98:	4648      	mov	r0, r9
   23a9a:	681b      	ldr	r3, [r3, #0]
   23a9c:	4798      	blx	r3
   23a9e:	2800      	cmp	r0, #0
   23aa0:	bf18      	it	ne
   23aa2:	f06f 051d 	mvnne.w	r5, #29
   23aa6:	4628      	mov	r0, r5
   23aa8:	b008      	add	sp, #32
   23aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23aae:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   23ab2:	466e      	mov	r6, sp
   23ab4:	e7eb      	b.n	23a8e <cc_mbedtls_entropy_func+0x72>
   23ab6:	4650      	mov	r0, sl
   23ab8:	f000 fdc2 	bl	24640 <cc_mbedtls_sha256_free>
   23abc:	4650      	mov	r0, sl
   23abe:	f000 fdab 	bl	24618 <cc_mbedtls_sha256_init>
   23ac2:	4629      	mov	r1, r5
   23ac4:	4650      	mov	r0, sl
   23ac6:	f000 fdc1 	bl	2464c <cc_mbedtls_sha256_starts>
   23aca:	4605      	mov	r5, r0
   23acc:	2800      	cmp	r0, #0
   23ace:	d1de      	bne.n	23a8e <cc_mbedtls_entropy_func+0x72>
   23ad0:	4650      	mov	r0, sl
   23ad2:	2220      	movs	r2, #32
   23ad4:	4631      	mov	r1, r6
   23ad6:	f000 fdcd 	bl	24674 <cc_mbedtls_sha256_update>
   23ada:	4605      	mov	r5, r0
   23adc:	2800      	cmp	r0, #0
   23ade:	d1d6      	bne.n	23a8e <cc_mbedtls_entropy_func+0x72>
   23ae0:	4603      	mov	r3, r0
   23ae2:	4632      	mov	r2, r6
   23ae4:	2120      	movs	r1, #32
   23ae6:	4630      	mov	r0, r6
   23ae8:	f000 fec4 	bl	24874 <cc_mbedtls_sha256>
   23aec:	4605      	mov	r5, r0
   23aee:	2800      	cmp	r0, #0
   23af0:	d1cd      	bne.n	23a8e <cc_mbedtls_entropy_func+0x72>
   23af2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   23af6:	2b00      	cmp	r3, #0
   23af8:	bfc4      	itt	gt
   23afa:	2300      	movgt	r3, #0
   23afc:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   23b00:	463a      	mov	r2, r7
   23b02:	4640      	mov	r0, r8
   23b04:	4631      	mov	r1, r6
   23b06:	f002 fe77 	bl	267f8 <memcpy>
   23b0a:	e7c0      	b.n	23a8e <cc_mbedtls_entropy_func+0x72>
   23b0c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   23b10:	466e      	mov	r6, sp
   23b12:	e7bc      	b.n	23a8e <cc_mbedtls_entropy_func+0x72>
   23b14:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   23b18:	e7c5      	b.n	23aa6 <cc_mbedtls_entropy_func+0x8a>
   23b1a:	bf00      	nop
   23b1c:	200006ac 	.word	0x200006ac
   23b20:	200006b0 	.word	0x200006b0

00023b24 <RndStartupTest.constprop.0>:
   23b24:	b530      	push	{r4, r5, lr}
   23b26:	b0c3      	sub	sp, #268	; 0x10c
   23b28:	22dc      	movs	r2, #220	; 0xdc
   23b2a:	2100      	movs	r1, #0
   23b2c:	a80b      	add	r0, sp, #44	; 0x2c
   23b2e:	f002 fe87 	bl	26840 <memset>
   23b32:	2228      	movs	r2, #40	; 0x28
   23b34:	2100      	movs	r1, #0
   23b36:	a801      	add	r0, sp, #4
   23b38:	f002 fe82 	bl	26840 <memset>
   23b3c:	a801      	add	r0, sp, #4
   23b3e:	f000 fec1 	bl	248c4 <RNG_PLAT_SetUserRngParameters>
   23b42:	4604      	mov	r4, r0
   23b44:	b110      	cbz	r0, 23b4c <RndStartupTest.constprop.0+0x28>
   23b46:	4620      	mov	r0, r4
   23b48:	b043      	add	sp, #268	; 0x10c
   23b4a:	bd30      	pop	{r4, r5, pc}
   23b4c:	4d18      	ldr	r5, [pc, #96]	; (23bb0 <RndStartupTest.constprop.0+0x8c>)
   23b4e:	f04f 31ff 	mov.w	r1, #4294967295
   23b52:	6828      	ldr	r0, [r5, #0]
   23b54:	f000 f93c 	bl	23dd0 <CC_PalMutexLock>
   23b58:	4604      	mov	r4, r0
   23b5a:	b9c0      	cbnz	r0, 23b8e <RndStartupTest.constprop.0+0x6a>
   23b5c:	2000      	movs	r0, #0
   23b5e:	f000 f967 	bl	23e30 <CC_PalPowerSaveModeSelect>
   23b62:	bb00      	cbnz	r0, 23ba6 <RndStartupTest.constprop.0+0x82>
   23b64:	4a13      	ldr	r2, [pc, #76]	; (23bb4 <RndStartupTest.constprop.0+0x90>)
   23b66:	a901      	add	r1, sp, #4
   23b68:	a80b      	add	r0, sp, #44	; 0x2c
   23b6a:	f000 fc6f 	bl	2444c <LLF_RND_RunTrngStartupTest>
   23b6e:	4604      	mov	r4, r0
   23b70:	2001      	movs	r0, #1
   23b72:	f000 f95d 	bl	23e30 <CC_PalPowerSaveModeSelect>
   23b76:	b990      	cbnz	r0, 23b9e <RndStartupTest.constprop.0+0x7a>
   23b78:	6828      	ldr	r0, [r5, #0]
   23b7a:	f000 f931 	bl	23de0 <CC_PalMutexUnlock>
   23b7e:	2800      	cmp	r0, #0
   23b80:	d0e1      	beq.n	23b46 <RndStartupTest.constprop.0+0x22>
   23b82:	480d      	ldr	r0, [pc, #52]	; (23bb8 <RndStartupTest.constprop.0+0x94>)
   23b84:	f7ff f9d8 	bl	22f38 <CC_PalAbort>
   23b88:	4620      	mov	r0, r4
   23b8a:	b043      	add	sp, #268	; 0x10c
   23b8c:	bd30      	pop	{r4, r5, pc}
   23b8e:	480b      	ldr	r0, [pc, #44]	; (23bbc <RndStartupTest.constprop.0+0x98>)
   23b90:	f7ff f9d2 	bl	22f38 <CC_PalAbort>
   23b94:	2c01      	cmp	r4, #1
   23b96:	bf08      	it	eq
   23b98:	2405      	moveq	r4, #5
   23b9a:	d0ed      	beq.n	23b78 <RndStartupTest.constprop.0+0x54>
   23b9c:	e7de      	b.n	23b5c <RndStartupTest.constprop.0+0x38>
   23b9e:	4808      	ldr	r0, [pc, #32]	; (23bc0 <RndStartupTest.constprop.0+0x9c>)
   23ba0:	f7ff f9ca 	bl	22f38 <CC_PalAbort>
   23ba4:	e7e8      	b.n	23b78 <RndStartupTest.constprop.0+0x54>
   23ba6:	4807      	ldr	r0, [pc, #28]	; (23bc4 <RndStartupTest.constprop.0+0xa0>)
   23ba8:	f7ff f9c6 	bl	22f38 <CC_PalAbort>
   23bac:	e7da      	b.n	23b64 <RndStartupTest.constprop.0+0x40>
   23bae:	bf00      	nop
   23bb0:	200006a4 	.word	0x200006a4
   23bb4:	2000311c 	.word	0x2000311c
   23bb8:	0002dd3c 	.word	0x0002dd3c
   23bbc:	0002dce4 	.word	0x0002dce4
   23bc0:	0002dd1c 	.word	0x0002dd1c
   23bc4:	0002dcfc 	.word	0x0002dcfc

00023bc8 <CC_LibInit>:
   23bc8:	b510      	push	{r4, lr}
   23bca:	b082      	sub	sp, #8
   23bcc:	f000 f854 	bl	23c78 <CC_HalInit>
   23bd0:	b128      	cbz	r0, 23bde <CC_LibInit+0x16>
   23bd2:	f000 f8a3 	bl	23d1c <CC_PalTerminate>
   23bd6:	2403      	movs	r4, #3
   23bd8:	4620      	mov	r0, r4
   23bda:	b002      	add	sp, #8
   23bdc:	bd10      	pop	{r4, pc}
   23bde:	f000 f86f 	bl	23cc0 <CC_PalInit>
   23be2:	b9d0      	cbnz	r0, 23c1a <CC_LibInit+0x52>
   23be4:	f000 f924 	bl	23e30 <CC_PalPowerSaveModeSelect>
   23be8:	b9d8      	cbnz	r0, 23c22 <CC_LibInit+0x5a>
   23bea:	4b1e      	ldr	r3, [pc, #120]	; (23c64 <CC_LibInit+0x9c>)
   23bec:	681b      	ldr	r3, [r3, #0]
   23bee:	0e1b      	lsrs	r3, r3, #24
   23bf0:	2bf0      	cmp	r3, #240	; 0xf0
   23bf2:	d10a      	bne.n	23c0a <CC_LibInit+0x42>
   23bf4:	4a1c      	ldr	r2, [pc, #112]	; (23c68 <CC_LibInit+0xa0>)
   23bf6:	4b1d      	ldr	r3, [pc, #116]	; (23c6c <CC_LibInit+0xa4>)
   23bf8:	6812      	ldr	r2, [r2, #0]
   23bfa:	429a      	cmp	r2, r3
   23bfc:	d029      	beq.n	23c52 <CC_LibInit+0x8a>
   23bfe:	f000 f83d 	bl	23c7c <CC_HalTerminate>
   23c02:	2407      	movs	r4, #7
   23c04:	f000 f88a 	bl	23d1c <CC_PalTerminate>
   23c08:	e7e6      	b.n	23bd8 <CC_LibInit+0x10>
   23c0a:	f000 f837 	bl	23c7c <CC_HalTerminate>
   23c0e:	f000 f885 	bl	23d1c <CC_PalTerminate>
   23c12:	2406      	movs	r4, #6
   23c14:	4620      	mov	r0, r4
   23c16:	b002      	add	sp, #8
   23c18:	bd10      	pop	{r4, pc}
   23c1a:	2404      	movs	r4, #4
   23c1c:	4620      	mov	r0, r4
   23c1e:	b002      	add	sp, #8
   23c20:	bd10      	pop	{r4, pc}
   23c22:	f000 f82b 	bl	23c7c <CC_HalTerminate>
   23c26:	f000 f879 	bl	23d1c <CC_PalTerminate>
   23c2a:	f7ff ff7b 	bl	23b24 <RndStartupTest.constprop.0>
   23c2e:	4604      	mov	r4, r0
   23c30:	b958      	cbnz	r0, 23c4a <CC_LibInit+0x82>
   23c32:	4602      	mov	r2, r0
   23c34:	4601      	mov	r1, r0
   23c36:	f7ff f9a7 	bl	22f88 <nrf_cc3xx_platform_ctr_drbg_init>
   23c3a:	b930      	cbnz	r0, 23c4a <CC_LibInit+0x82>
   23c3c:	490c      	ldr	r1, [pc, #48]	; (23c70 <CC_LibInit+0xa8>)
   23c3e:	ab01      	add	r3, sp, #4
   23c40:	2268      	movs	r2, #104	; 0x68
   23c42:	f7ff f9d5 	bl	22ff0 <nrf_cc3xx_platform_ctr_drbg_get>
   23c46:	2800      	cmp	r0, #0
   23c48:	d0c6      	beq.n	23bd8 <CC_LibInit+0x10>
   23c4a:	2405      	movs	r4, #5
   23c4c:	4620      	mov	r0, r4
   23c4e:	b002      	add	sp, #8
   23c50:	bd10      	pop	{r4, pc}
   23c52:	2001      	movs	r0, #1
   23c54:	f000 f8ec 	bl	23e30 <CC_PalPowerSaveModeSelect>
   23c58:	2800      	cmp	r0, #0
   23c5a:	d1e2      	bne.n	23c22 <CC_LibInit+0x5a>
   23c5c:	4b05      	ldr	r3, [pc, #20]	; (23c74 <CC_LibInit+0xac>)
   23c5e:	6018      	str	r0, [r3, #0]
   23c60:	e7e3      	b.n	23c2a <CC_LibInit+0x62>
   23c62:	bf00      	nop
   23c64:	5002b928 	.word	0x5002b928
   23c68:	5002ba24 	.word	0x5002ba24
   23c6c:	20e00000 	.word	0x20e00000
   23c70:	200030b4 	.word	0x200030b4
   23c74:	5002ba0c 	.word	0x5002ba0c

00023c78 <CC_HalInit>:
   23c78:	2000      	movs	r0, #0
   23c7a:	4770      	bx	lr

00023c7c <CC_HalTerminate>:
   23c7c:	2000      	movs	r0, #0
   23c7e:	4770      	bx	lr

00023c80 <CC_HalClearInterruptBit>:
   23c80:	0543      	lsls	r3, r0, #21
   23c82:	d503      	bpl.n	23c8c <CC_HalClearInterruptBit+0xc>
   23c84:	4b03      	ldr	r3, [pc, #12]	; (23c94 <CC_HalClearInterruptBit+0x14>)
   23c86:	f04f 32ff 	mov.w	r2, #4294967295
   23c8a:	601a      	str	r2, [r3, #0]
   23c8c:	4b02      	ldr	r3, [pc, #8]	; (23c98 <CC_HalClearInterruptBit+0x18>)
   23c8e:	6018      	str	r0, [r3, #0]
   23c90:	4770      	bx	lr
   23c92:	bf00      	nop
   23c94:	5002b108 	.word	0x5002b108
   23c98:	5002ba08 	.word	0x5002ba08

00023c9c <CC_HalMaskInterrupt>:
   23c9c:	4b01      	ldr	r3, [pc, #4]	; (23ca4 <CC_HalMaskInterrupt+0x8>)
   23c9e:	6018      	str	r0, [r3, #0]
   23ca0:	4770      	bx	lr
   23ca2:	bf00      	nop
   23ca4:	5002ba04 	.word	0x5002ba04

00023ca8 <CC_HalWaitInterrupt>:
   23ca8:	b108      	cbz	r0, 23cae <CC_HalWaitInterrupt+0x6>
   23caa:	f000 b86f 	b.w	23d8c <CC_PalWaitInterrupt>
   23cae:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   23cb2:	4770      	bx	lr

00023cb4 <CC_HalWaitInterruptRND>:
   23cb4:	b108      	cbz	r0, 23cba <CC_HalWaitInterruptRND+0x6>
   23cb6:	f000 b84f 	b.w	23d58 <CC_PalWaitInterruptRND>
   23cba:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   23cbe:	4770      	bx	lr

00023cc0 <CC_PalInit>:
   23cc0:	b510      	push	{r4, lr}
   23cc2:	4811      	ldr	r0, [pc, #68]	; (23d08 <CC_PalInit+0x48>)
   23cc4:	f000 f870 	bl	23da8 <CC_PalMutexCreate>
   23cc8:	b100      	cbz	r0, 23ccc <CC_PalInit+0xc>
   23cca:	bd10      	pop	{r4, pc}
   23ccc:	480f      	ldr	r0, [pc, #60]	; (23d0c <CC_PalInit+0x4c>)
   23cce:	f000 f86b 	bl	23da8 <CC_PalMutexCreate>
   23cd2:	2800      	cmp	r0, #0
   23cd4:	d1f9      	bne.n	23cca <CC_PalInit+0xa>
   23cd6:	4c0e      	ldr	r4, [pc, #56]	; (23d10 <CC_PalInit+0x50>)
   23cd8:	4620      	mov	r0, r4
   23cda:	f000 f865 	bl	23da8 <CC_PalMutexCreate>
   23cde:	2800      	cmp	r0, #0
   23ce0:	d1f3      	bne.n	23cca <CC_PalInit+0xa>
   23ce2:	4b0c      	ldr	r3, [pc, #48]	; (23d14 <CC_PalInit+0x54>)
   23ce4:	480c      	ldr	r0, [pc, #48]	; (23d18 <CC_PalInit+0x58>)
   23ce6:	601c      	str	r4, [r3, #0]
   23ce8:	f000 f85e 	bl	23da8 <CC_PalMutexCreate>
   23cec:	4601      	mov	r1, r0
   23cee:	2800      	cmp	r0, #0
   23cf0:	d1eb      	bne.n	23cca <CC_PalInit+0xa>
   23cf2:	f000 f82d 	bl	23d50 <CC_PalDmaInit>
   23cf6:	4604      	mov	r4, r0
   23cf8:	b108      	cbz	r0, 23cfe <CC_PalInit+0x3e>
   23cfa:	4620      	mov	r0, r4
   23cfc:	bd10      	pop	{r4, pc}
   23cfe:	f000 f879 	bl	23df4 <CC_PalPowerSaveModeInit>
   23d02:	4620      	mov	r0, r4
   23d04:	e7fa      	b.n	23cfc <CC_PalInit+0x3c>
   23d06:	bf00      	nop
   23d08:	200006a0 	.word	0x200006a0
   23d0c:	20000694 	.word	0x20000694
   23d10:	2000069c 	.word	0x2000069c
   23d14:	200006a4 	.word	0x200006a4
   23d18:	20000698 	.word	0x20000698

00023d1c <CC_PalTerminate>:
   23d1c:	b508      	push	{r3, lr}
   23d1e:	4808      	ldr	r0, [pc, #32]	; (23d40 <CC_PalTerminate+0x24>)
   23d20:	f000 f84c 	bl	23dbc <CC_PalMutexDestroy>
   23d24:	4807      	ldr	r0, [pc, #28]	; (23d44 <CC_PalTerminate+0x28>)
   23d26:	f000 f849 	bl	23dbc <CC_PalMutexDestroy>
   23d2a:	4807      	ldr	r0, [pc, #28]	; (23d48 <CC_PalTerminate+0x2c>)
   23d2c:	f000 f846 	bl	23dbc <CC_PalMutexDestroy>
   23d30:	4806      	ldr	r0, [pc, #24]	; (23d4c <CC_PalTerminate+0x30>)
   23d32:	f000 f843 	bl	23dbc <CC_PalMutexDestroy>
   23d36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23d3a:	f000 b80b 	b.w	23d54 <CC_PalDmaTerminate>
   23d3e:	bf00      	nop
   23d40:	200006a0 	.word	0x200006a0
   23d44:	20000694 	.word	0x20000694
   23d48:	2000069c 	.word	0x2000069c
   23d4c:	20000698 	.word	0x20000698

00023d50 <CC_PalDmaInit>:
   23d50:	2000      	movs	r0, #0
   23d52:	4770      	bx	lr

00023d54 <CC_PalDmaTerminate>:
   23d54:	4770      	bx	lr
   23d56:	bf00      	nop

00023d58 <CC_PalWaitInterruptRND>:
   23d58:	b410      	push	{r4}
   23d5a:	4c08      	ldr	r4, [pc, #32]	; (23d7c <CC_PalWaitInterruptRND+0x24>)
   23d5c:	4602      	mov	r2, r0
   23d5e:	6823      	ldr	r3, [r4, #0]
   23d60:	4213      	tst	r3, r2
   23d62:	d0fc      	beq.n	23d5e <CC_PalWaitInterruptRND+0x6>
   23d64:	b121      	cbz	r1, 23d70 <CC_PalWaitInterruptRND+0x18>
   23d66:	4b06      	ldr	r3, [pc, #24]	; (23d80 <CC_PalWaitInterruptRND+0x28>)
   23d68:	4806      	ldr	r0, [pc, #24]	; (23d84 <CC_PalWaitInterruptRND+0x2c>)
   23d6a:	681b      	ldr	r3, [r3, #0]
   23d6c:	600b      	str	r3, [r1, #0]
   23d6e:	6003      	str	r3, [r0, #0]
   23d70:	4b05      	ldr	r3, [pc, #20]	; (23d88 <CC_PalWaitInterruptRND+0x30>)
   23d72:	601a      	str	r2, [r3, #0]
   23d74:	2000      	movs	r0, #0
   23d76:	bc10      	pop	{r4}
   23d78:	4770      	bx	lr
   23d7a:	bf00      	nop
   23d7c:	5002ba00 	.word	0x5002ba00
   23d80:	5002b104 	.word	0x5002b104
   23d84:	5002b108 	.word	0x5002b108
   23d88:	5002ba08 	.word	0x5002ba08

00023d8c <CC_PalWaitInterrupt>:
   23d8c:	4904      	ldr	r1, [pc, #16]	; (23da0 <CC_PalWaitInterrupt+0x14>)
   23d8e:	4602      	mov	r2, r0
   23d90:	680b      	ldr	r3, [r1, #0]
   23d92:	421a      	tst	r2, r3
   23d94:	d0fc      	beq.n	23d90 <CC_PalWaitInterrupt+0x4>
   23d96:	4b03      	ldr	r3, [pc, #12]	; (23da4 <CC_PalWaitInterrupt+0x18>)
   23d98:	2000      	movs	r0, #0
   23d9a:	601a      	str	r2, [r3, #0]
   23d9c:	4770      	bx	lr
   23d9e:	bf00      	nop
   23da0:	5002ba00 	.word	0x5002ba00
   23da4:	5002ba08 	.word	0x5002ba08

00023da8 <CC_PalMutexCreate>:
   23da8:	b508      	push	{r3, lr}
   23daa:	4b03      	ldr	r3, [pc, #12]	; (23db8 <CC_PalMutexCreate+0x10>)
   23dac:	6802      	ldr	r2, [r0, #0]
   23dae:	681b      	ldr	r3, [r3, #0]
   23db0:	6810      	ldr	r0, [r2, #0]
   23db2:	4798      	blx	r3
   23db4:	2000      	movs	r0, #0
   23db6:	bd08      	pop	{r3, pc}
   23db8:	20000654 	.word	0x20000654

00023dbc <CC_PalMutexDestroy>:
   23dbc:	b508      	push	{r3, lr}
   23dbe:	4b03      	ldr	r3, [pc, #12]	; (23dcc <CC_PalMutexDestroy+0x10>)
   23dc0:	6802      	ldr	r2, [r0, #0]
   23dc2:	685b      	ldr	r3, [r3, #4]
   23dc4:	6810      	ldr	r0, [r2, #0]
   23dc6:	4798      	blx	r3
   23dc8:	2000      	movs	r0, #0
   23dca:	bd08      	pop	{r3, pc}
   23dcc:	20000654 	.word	0x20000654

00023dd0 <CC_PalMutexLock>:
   23dd0:	4b02      	ldr	r3, [pc, #8]	; (23ddc <CC_PalMutexLock+0xc>)
   23dd2:	6802      	ldr	r2, [r0, #0]
   23dd4:	689b      	ldr	r3, [r3, #8]
   23dd6:	6810      	ldr	r0, [r2, #0]
   23dd8:	4718      	bx	r3
   23dda:	bf00      	nop
   23ddc:	20000654 	.word	0x20000654

00023de0 <CC_PalMutexUnlock>:
   23de0:	b508      	push	{r3, lr}
   23de2:	4b03      	ldr	r3, [pc, #12]	; (23df0 <CC_PalMutexUnlock+0x10>)
   23de4:	6802      	ldr	r2, [r0, #0]
   23de6:	68db      	ldr	r3, [r3, #12]
   23de8:	6810      	ldr	r0, [r2, #0]
   23dea:	4798      	blx	r3
   23dec:	2000      	movs	r0, #0
   23dee:	bd08      	pop	{r3, pc}
   23df0:	20000654 	.word	0x20000654

00023df4 <CC_PalPowerSaveModeInit>:
   23df4:	b570      	push	{r4, r5, r6, lr}
   23df6:	4c09      	ldr	r4, [pc, #36]	; (23e1c <CC_PalPowerSaveModeInit+0x28>)
   23df8:	4d09      	ldr	r5, [pc, #36]	; (23e20 <CC_PalPowerSaveModeInit+0x2c>)
   23dfa:	6920      	ldr	r0, [r4, #16]
   23dfc:	68ab      	ldr	r3, [r5, #8]
   23dfe:	4798      	blx	r3
   23e00:	b118      	cbz	r0, 23e0a <CC_PalPowerSaveModeInit+0x16>
   23e02:	4b08      	ldr	r3, [pc, #32]	; (23e24 <CC_PalPowerSaveModeInit+0x30>)
   23e04:	4808      	ldr	r0, [pc, #32]	; (23e28 <CC_PalPowerSaveModeInit+0x34>)
   23e06:	685b      	ldr	r3, [r3, #4]
   23e08:	4798      	blx	r3
   23e0a:	4a08      	ldr	r2, [pc, #32]	; (23e2c <CC_PalPowerSaveModeInit+0x38>)
   23e0c:	68eb      	ldr	r3, [r5, #12]
   23e0e:	6920      	ldr	r0, [r4, #16]
   23e10:	2100      	movs	r1, #0
   23e12:	6011      	str	r1, [r2, #0]
   23e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23e18:	4718      	bx	r3
   23e1a:	bf00      	nop
   23e1c:	20000664 	.word	0x20000664
   23e20:	20000654 	.word	0x20000654
   23e24:	20000644 	.word	0x20000644
   23e28:	0002dd54 	.word	0x0002dd54
   23e2c:	2000333c 	.word	0x2000333c

00023e30 <CC_PalPowerSaveModeSelect>:
   23e30:	b570      	push	{r4, r5, r6, lr}
   23e32:	4d1a      	ldr	r5, [pc, #104]	; (23e9c <CC_PalPowerSaveModeSelect+0x6c>)
   23e34:	4e1a      	ldr	r6, [pc, #104]	; (23ea0 <CC_PalPowerSaveModeSelect+0x70>)
   23e36:	4604      	mov	r4, r0
   23e38:	68b2      	ldr	r2, [r6, #8]
   23e3a:	6928      	ldr	r0, [r5, #16]
   23e3c:	4790      	blx	r2
   23e3e:	b9f0      	cbnz	r0, 23e7e <CC_PalPowerSaveModeSelect+0x4e>
   23e40:	b15c      	cbz	r4, 23e5a <CC_PalPowerSaveModeSelect+0x2a>
   23e42:	4c18      	ldr	r4, [pc, #96]	; (23ea4 <CC_PalPowerSaveModeSelect+0x74>)
   23e44:	6823      	ldr	r3, [r4, #0]
   23e46:	b1ab      	cbz	r3, 23e74 <CC_PalPowerSaveModeSelect+0x44>
   23e48:	2b01      	cmp	r3, #1
   23e4a:	d01a      	beq.n	23e82 <CC_PalPowerSaveModeSelect+0x52>
   23e4c:	3b01      	subs	r3, #1
   23e4e:	6023      	str	r3, [r4, #0]
   23e50:	6928      	ldr	r0, [r5, #16]
   23e52:	68f3      	ldr	r3, [r6, #12]
   23e54:	4798      	blx	r3
   23e56:	2000      	movs	r0, #0
   23e58:	bd70      	pop	{r4, r5, r6, pc}
   23e5a:	4c12      	ldr	r4, [pc, #72]	; (23ea4 <CC_PalPowerSaveModeSelect+0x74>)
   23e5c:	6821      	ldr	r1, [r4, #0]
   23e5e:	b939      	cbnz	r1, 23e70 <CC_PalPowerSaveModeSelect+0x40>
   23e60:	4b11      	ldr	r3, [pc, #68]	; (23ea8 <CC_PalPowerSaveModeSelect+0x78>)
   23e62:	4a12      	ldr	r2, [pc, #72]	; (23eac <CC_PalPowerSaveModeSelect+0x7c>)
   23e64:	2001      	movs	r0, #1
   23e66:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   23e6a:	6813      	ldr	r3, [r2, #0]
   23e6c:	2b00      	cmp	r3, #0
   23e6e:	d1fc      	bne.n	23e6a <CC_PalPowerSaveModeSelect+0x3a>
   23e70:	3101      	adds	r1, #1
   23e72:	6021      	str	r1, [r4, #0]
   23e74:	68f3      	ldr	r3, [r6, #12]
   23e76:	6928      	ldr	r0, [r5, #16]
   23e78:	4798      	blx	r3
   23e7a:	2000      	movs	r0, #0
   23e7c:	bd70      	pop	{r4, r5, r6, pc}
   23e7e:	480c      	ldr	r0, [pc, #48]	; (23eb0 <CC_PalPowerSaveModeSelect+0x80>)
   23e80:	bd70      	pop	{r4, r5, r6, pc}
   23e82:	4a0a      	ldr	r2, [pc, #40]	; (23eac <CC_PalPowerSaveModeSelect+0x7c>)
   23e84:	6813      	ldr	r3, [r2, #0]
   23e86:	2b00      	cmp	r3, #0
   23e88:	d1fc      	bne.n	23e84 <CC_PalPowerSaveModeSelect+0x54>
   23e8a:	4a07      	ldr	r2, [pc, #28]	; (23ea8 <CC_PalPowerSaveModeSelect+0x78>)
   23e8c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   23e90:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   23e94:	f7ff ff02 	bl	23c9c <CC_HalMaskInterrupt>
   23e98:	6823      	ldr	r3, [r4, #0]
   23e9a:	e7d7      	b.n	23e4c <CC_PalPowerSaveModeSelect+0x1c>
   23e9c:	20000664 	.word	0x20000664
   23ea0:	20000654 	.word	0x20000654
   23ea4:	2000333c 	.word	0x2000333c
   23ea8:	5002a000 	.word	0x5002a000
   23eac:	5002b910 	.word	0x5002b910
   23eb0:	ffff8fe9 	.word	0xffff8fe9

00023eb4 <mutex_init>:
   23eb4:	4b01      	ldr	r3, [pc, #4]	; (23ebc <mutex_init+0x8>)
   23eb6:	681b      	ldr	r3, [r3, #0]
   23eb8:	4718      	bx	r3
   23eba:	bf00      	nop
   23ebc:	20000654 	.word	0x20000654

00023ec0 <mutex_lock>:
   23ec0:	4b01      	ldr	r3, [pc, #4]	; (23ec8 <mutex_lock+0x8>)
   23ec2:	689b      	ldr	r3, [r3, #8]
   23ec4:	4718      	bx	r3
   23ec6:	bf00      	nop
   23ec8:	20000654 	.word	0x20000654

00023ecc <mutex_unlock>:
   23ecc:	4b01      	ldr	r3, [pc, #4]	; (23ed4 <mutex_unlock+0x8>)
   23ece:	68db      	ldr	r3, [r3, #12]
   23ed0:	4718      	bx	r3
   23ed2:	bf00      	nop
   23ed4:	20000654 	.word	0x20000654

00023ed8 <startTrngHW>:
   23ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23edc:	2800      	cmp	r0, #0
   23ede:	d07b      	beq.n	23fd8 <startTrngHW+0x100>
   23ee0:	460c      	mov	r4, r1
   23ee2:	2900      	cmp	r1, #0
   23ee4:	d078      	beq.n	23fd8 <startTrngHW+0x100>
   23ee6:	461d      	mov	r5, r3
   23ee8:	2b00      	cmp	r3, #0
   23eea:	d075      	beq.n	23fd8 <startTrngHW+0x100>
   23eec:	4606      	mov	r6, r0
   23eee:	b122      	cbz	r2, 23efa <startTrngHW+0x22>
   23ef0:	2201      	movs	r2, #1
   23ef2:	2300      	movs	r3, #0
   23ef4:	602a      	str	r2, [r5, #0]
   23ef6:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   23efa:	682b      	ldr	r3, [r5, #0]
   23efc:	2b00      	cmp	r3, #0
   23efe:	d067      	beq.n	23fd0 <startTrngHW+0xf8>
   23f00:	4629      	mov	r1, r5
   23f02:	4620      	mov	r0, r4
   23f04:	f000 fda4 	bl	24a50 <LLF_RND_GetFastestRosc>
   23f08:	4607      	mov	r7, r0
   23f0a:	2800      	cmp	r0, #0
   23f0c:	d161      	bne.n	23fd2 <startTrngHW+0xfa>
   23f0e:	6828      	ldr	r0, [r5, #0]
   23f10:	4621      	mov	r1, r4
   23f12:	f000 fd7f 	bl	24a14 <LLF_RND_GetRoscSampleCnt>
   23f16:	4607      	mov	r7, r0
   23f18:	2800      	cmp	r0, #0
   23f1a:	d15a      	bne.n	23fd2 <startTrngHW+0xfa>
   23f1c:	682b      	ldr	r3, [r5, #0]
   23f1e:	2b08      	cmp	r3, #8
   23f20:	d069      	beq.n	23ff6 <startTrngHW+0x11e>
   23f22:	2b04      	cmp	r3, #4
   23f24:	d06a      	beq.n	23ffc <startTrngHW+0x124>
   23f26:	f1a3 0802 	sub.w	r8, r3, #2
   23f2a:	fab8 f888 	clz	r8, r8
   23f2e:	ea4f 1858 	mov.w	r8, r8, lsr #5
   23f32:	4b34      	ldr	r3, [pc, #208]	; (24004 <startTrngHW+0x12c>)
   23f34:	4934      	ldr	r1, [pc, #208]	; (24008 <startTrngHW+0x130>)
   23f36:	4a35      	ldr	r2, [pc, #212]	; (2400c <startTrngHW+0x134>)
   23f38:	2001      	movs	r0, #1
   23f3a:	6018      	str	r0, [r3, #0]
   23f3c:	469c      	mov	ip, r3
   23f3e:	6008      	str	r0, [r1, #0]
   23f40:	f8cc 0000 	str.w	r0, [ip]
   23f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23f46:	6013      	str	r3, [r2, #0]
   23f48:	6811      	ldr	r1, [r2, #0]
   23f4a:	428b      	cmp	r3, r1
   23f4c:	d1f8      	bne.n	23f40 <startTrngHW+0x68>
   23f4e:	4b30      	ldr	r3, [pc, #192]	; (24010 <startTrngHW+0x138>)
   23f50:	f04f 0900 	mov.w	r9, #0
   23f54:	f8c3 9000 	str.w	r9, [r3]
   23f58:	f04f 30ff 	mov.w	r0, #4294967295
   23f5c:	f7ff fe90 	bl	23c80 <CC_HalClearInterruptBit>
   23f60:	4b2c      	ldr	r3, [pc, #176]	; (24014 <startTrngHW+0x13c>)
   23f62:	f06f 021b 	mvn.w	r2, #27
   23f66:	601a      	str	r2, [r3, #0]
   23f68:	4648      	mov	r0, r9
   23f6a:	f7ff fe97 	bl	23c9c <CC_HalMaskInterrupt>
   23f6e:	4a2a      	ldr	r2, [pc, #168]	; (24018 <startTrngHW+0x140>)
   23f70:	4b2a      	ldr	r3, [pc, #168]	; (2401c <startTrngHW+0x144>)
   23f72:	f8c2 8000 	str.w	r8, [r2]
   23f76:	6818      	ldr	r0, [r3, #0]
   23f78:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23f7c:	f7ff fe8e 	bl	23c9c <CC_HalMaskInterrupt>
   23f80:	4b27      	ldr	r3, [pc, #156]	; (24020 <startTrngHW+0x148>)
   23f82:	220a      	movs	r2, #10
   23f84:	601a      	str	r2, [r3, #0]
   23f86:	9908      	ldr	r1, [sp, #32]
   23f88:	6923      	ldr	r3, [r4, #16]
   23f8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   23f8c:	2901      	cmp	r1, #1
   23f8e:	d027      	beq.n	23fe0 <startTrngHW+0x108>
   23f90:	4924      	ldr	r1, [pc, #144]	; (24024 <startTrngHW+0x14c>)
   23f92:	fba1 1303 	umull	r1, r3, r1, r3
   23f96:	091b      	lsrs	r3, r3, #4
   23f98:	fb03 f302 	mul.w	r3, r3, r2
   23f9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23fa0:	4921      	ldr	r1, [pc, #132]	; (24028 <startTrngHW+0x150>)
   23fa2:	4a1b      	ldr	r2, [pc, #108]	; (24010 <startTrngHW+0x138>)
   23fa4:	03db      	lsls	r3, r3, #15
   23fa6:	099b      	lsrs	r3, r3, #6
   23fa8:	600b      	str	r3, [r1, #0]
   23faa:	2301      	movs	r3, #1
   23fac:	6013      	str	r3, [r2, #0]
   23fae:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   23fb2:	682a      	ldr	r2, [r5, #0]
   23fb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   23fb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   23fbc:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   23fc0:	682a      	ldr	r2, [r5, #0]
   23fc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23fc6:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   23fca:	4638      	mov	r0, r7
   23fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23fd0:	4f16      	ldr	r7, [pc, #88]	; (2402c <startTrngHW+0x154>)
   23fd2:	4638      	mov	r0, r7
   23fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23fd8:	4f15      	ldr	r7, [pc, #84]	; (24030 <startTrngHW+0x158>)
   23fda:	4638      	mov	r0, r7
   23fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23fe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23fe4:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   23fe8:	3101      	adds	r1, #1
   23fea:	d002      	beq.n	23ff2 <startTrngHW+0x11a>
   23fec:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   23ff0:	e7ce      	b.n	23f90 <startTrngHW+0xb8>
   23ff2:	2316      	movs	r3, #22
   23ff4:	e7d0      	b.n	23f98 <startTrngHW+0xc0>
   23ff6:	f04f 0803 	mov.w	r8, #3
   23ffa:	e79a      	b.n	23f32 <startTrngHW+0x5a>
   23ffc:	f04f 0802 	mov.w	r8, #2
   24000:	e797      	b.n	23f32 <startTrngHW+0x5a>
   24002:	bf00      	nop
   24004:	5002b1c4 	.word	0x5002b1c4
   24008:	5002b140 	.word	0x5002b140
   2400c:	5002b130 	.word	0x5002b130
   24010:	5002b12c 	.word	0x5002b12c
   24014:	5002b100 	.word	0x5002b100
   24018:	5002b10c 	.word	0x5002b10c
   2401c:	5002ba04 	.word	0x5002ba04
   24020:	5002b138 	.word	0x5002b138
   24024:	aaaaaaab 	.word	0xaaaaaaab
   24028:	5002b1d8 	.word	0x5002b1d8
   2402c:	00f10c31 	.word	0x00f10c31
   24030:	00f10c35 	.word	0x00f10c35

00024034 <LLF_RND_RepetitionCounterTest.part.0>:
   24034:	b4f0      	push	{r4, r5, r6, r7}
   24036:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   2403a:	2400      	movs	r4, #0
   2403c:	f10c 3cff 	add.w	ip, ip, #4294967295
   24040:	4626      	mov	r6, r4
   24042:	4627      	mov	r7, r4
   24044:	e006      	b.n	24054 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   24046:	429f      	cmp	r7, r3
   24048:	d016      	beq.n	24078 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   2404a:	2601      	movs	r6, #1
   2404c:	4565      	cmp	r5, ip
   2404e:	d819      	bhi.n	24084 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   24050:	462c      	mov	r4, r5
   24052:	461f      	mov	r7, r3
   24054:	0963      	lsrs	r3, r4, #5
   24056:	f004 011f 	and.w	r1, r4, #31
   2405a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2405e:	291f      	cmp	r1, #31
   24060:	fa23 f301 	lsr.w	r3, r3, r1
   24064:	f104 0501 	add.w	r5, r4, #1
   24068:	bf18      	it	ne
   2406a:	f003 0301 	andne.w	r3, r3, #1
   2406e:	2c00      	cmp	r4, #0
   24070:	d1e9      	bne.n	24046 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   24072:	2601      	movs	r6, #1
   24074:	4635      	mov	r5, r6
   24076:	e7eb      	b.n	24050 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   24078:	3601      	adds	r6, #1
   2407a:	4296      	cmp	r6, r2
   2407c:	d1e6      	bne.n	2404c <LLF_RND_RepetitionCounterTest.part.0+0x18>
   2407e:	4803      	ldr	r0, [pc, #12]	; (2408c <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   24080:	bcf0      	pop	{r4, r5, r6, r7}
   24082:	4770      	bx	lr
   24084:	2000      	movs	r0, #0
   24086:	bcf0      	pop	{r4, r5, r6, r7}
   24088:	4770      	bx	lr
   2408a:	bf00      	nop
   2408c:	00f10c36 	.word	0x00f10c36

00024090 <LLF_RND_AdaptiveProportionTest>:
   24090:	2800      	cmp	r0, #0
   24092:	d061      	beq.n	24158 <LLF_RND_AdaptiveProportionTest+0xc8>
   24094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24098:	1e4c      	subs	r4, r1, #1
   2409a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   2409e:	d227      	bcs.n	240f0 <LLF_RND_AdaptiveProportionTest+0x60>
   240a0:	b333      	cbz	r3, 240f0 <LLF_RND_AdaptiveProportionTest+0x60>
   240a2:	b32a      	cbz	r2, 240f0 <LLF_RND_AdaptiveProportionTest+0x60>
   240a4:	00cd      	lsls	r5, r1, #3
   240a6:	2b01      	cmp	r3, #1
   240a8:	f105 3eff 	add.w	lr, r5, #4294967295
   240ac:	d030      	beq.n	24110 <LLF_RND_AdaptiveProportionTest+0x80>
   240ae:	2100      	movs	r1, #0
   240b0:	468c      	mov	ip, r1
   240b2:	460f      	mov	r7, r1
   240b4:	460e      	mov	r6, r1
   240b6:	f103 38ff 	add.w	r8, r3, #4294967295
   240ba:	094c      	lsrs	r4, r1, #5
   240bc:	f001 051f 	and.w	r5, r1, #31
   240c0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   240c4:	2d1f      	cmp	r5, #31
   240c6:	fa24 f405 	lsr.w	r4, r4, r5
   240ca:	bf18      	it	ne
   240cc:	f004 0401 	andne.w	r4, r4, #1
   240d0:	b921      	cbnz	r1, 240dc <LLF_RND_AdaptiveProportionTest+0x4c>
   240d2:	2601      	movs	r6, #1
   240d4:	46b4      	mov	ip, r6
   240d6:	4631      	mov	r1, r6
   240d8:	4627      	mov	r7, r4
   240da:	e7ee      	b.n	240ba <LLF_RND_AdaptiveProportionTest+0x2a>
   240dc:	42b3      	cmp	r3, r6
   240de:	d013      	beq.n	24108 <LLF_RND_AdaptiveProportionTest+0x78>
   240e0:	42a7      	cmp	r7, r4
   240e2:	d101      	bne.n	240e8 <LLF_RND_AdaptiveProportionTest+0x58>
   240e4:	f10c 0c01 	add.w	ip, ip, #1
   240e8:	4546      	cmp	r6, r8
   240ea:	d104      	bne.n	240f6 <LLF_RND_AdaptiveProportionTest+0x66>
   240ec:	4562      	cmp	r2, ip
   240ee:	d202      	bcs.n	240f6 <LLF_RND_AdaptiveProportionTest+0x66>
   240f0:	481a      	ldr	r0, [pc, #104]	; (2415c <LLF_RND_AdaptiveProportionTest+0xcc>)
   240f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   240f6:	463c      	mov	r4, r7
   240f8:	3101      	adds	r1, #1
   240fa:	458e      	cmp	lr, r1
   240fc:	f106 0601 	add.w	r6, r6, #1
   24100:	d2ea      	bcs.n	240d8 <LLF_RND_AdaptiveProportionTest+0x48>
   24102:	2000      	movs	r0, #0
   24104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24108:	2600      	movs	r6, #0
   2410a:	f04f 0c01 	mov.w	ip, #1
   2410e:	e7f3      	b.n	240f8 <LLF_RND_AdaptiveProportionTest+0x68>
   24110:	2600      	movs	r6, #0
   24112:	46b4      	mov	ip, r6
   24114:	4637      	mov	r7, r6
   24116:	4634      	mov	r4, r6
   24118:	0961      	lsrs	r1, r4, #5
   2411a:	f004 031f 	and.w	r3, r4, #31
   2411e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   24122:	2b1f      	cmp	r3, #31
   24124:	fa21 f103 	lsr.w	r1, r1, r3
   24128:	bf18      	it	ne
   2412a:	f001 0101 	andne.w	r1, r1, #1
   2412e:	b13c      	cbz	r4, 24140 <LLF_RND_AdaptiveProportionTest+0xb0>
   24130:	b95f      	cbnz	r7, 2414a <LLF_RND_AdaptiveProportionTest+0xba>
   24132:	458c      	cmp	ip, r1
   24134:	d001      	beq.n	2413a <LLF_RND_AdaptiveProportionTest+0xaa>
   24136:	4661      	mov	r1, ip
   24138:	e008      	b.n	2414c <LLF_RND_AdaptiveProportionTest+0xbc>
   2413a:	3601      	adds	r6, #1
   2413c:	4661      	mov	r1, ip
   2413e:	e005      	b.n	2414c <LLF_RND_AdaptiveProportionTest+0xbc>
   24140:	2601      	movs	r6, #1
   24142:	4634      	mov	r4, r6
   24144:	468c      	mov	ip, r1
   24146:	2701      	movs	r7, #1
   24148:	e7e6      	b.n	24118 <LLF_RND_AdaptiveProportionTest+0x88>
   2414a:	463e      	mov	r6, r7
   2414c:	42b2      	cmp	r2, r6
   2414e:	d3cf      	bcc.n	240f0 <LLF_RND_AdaptiveProportionTest+0x60>
   24150:	3401      	adds	r4, #1
   24152:	42ac      	cmp	r4, r5
   24154:	d1f6      	bne.n	24144 <LLF_RND_AdaptiveProportionTest+0xb4>
   24156:	e7d4      	b.n	24102 <LLF_RND_AdaptiveProportionTest+0x72>
   24158:	4800      	ldr	r0, [pc, #0]	; (2415c <LLF_RND_AdaptiveProportionTest+0xcc>)
   2415a:	4770      	bx	lr
   2415c:	00f10c37 	.word	0x00f10c37

00024160 <getTrngSource>:
   24160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24164:	b08d      	sub	sp, #52	; 0x34
   24166:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   2416a:	4607      	mov	r7, r0
   2416c:	460c      	mov	r4, r1
   2416e:	2d00      	cmp	r5, #0
   24170:	d14d      	bne.n	2420e <getTrngSource+0xae>
   24172:	f8d1 a010 	ldr.w	sl, [r1, #16]
   24176:	601e      	str	r6, [r3, #0]
   24178:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2417a:	2100      	movs	r1, #0
   2417c:	6019      	str	r1, [r3, #0]
   2417e:	2a00      	cmp	r2, #0
   24180:	f000 8120 	beq.w	243c4 <getTrngSource+0x264>
   24184:	4a9b      	ldr	r2, [pc, #620]	; (243f4 <getTrngSource+0x294>)
   24186:	4b9c      	ldr	r3, [pc, #624]	; (243f8 <getTrngSource+0x298>)
   24188:	6811      	ldr	r1, [r2, #0]
   2418a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2418c:	681b      	ldr	r3, [r3, #0]
   2418e:	429a      	cmp	r2, r3
   24190:	d148      	bne.n	24224 <getTrngSource+0xc4>
   24192:	290a      	cmp	r1, #10
   24194:	d146      	bne.n	24224 <getTrngSource+0xc4>
   24196:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   2419a:	9304      	str	r3, [sp, #16]
   2419c:	4b97      	ldr	r3, [pc, #604]	; (243fc <getTrngSource+0x29c>)
   2419e:	fba3 230a 	umull	r2, r3, r3, sl
   241a2:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   241a6:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   241aa:	f106 0208 	add.w	r2, r6, #8
   241ae:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   241b2:	2304      	movs	r3, #4
   241b4:	9203      	str	r2, [sp, #12]
   241b6:	9302      	str	r3, [sp, #8]
   241b8:	46b8      	mov	r8, r7
   241ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
   241bc:	f8c3 a000 	str.w	sl, [r3]
   241c0:	f1ba 0f00 	cmp.w	sl, #0
   241c4:	f000 80c4 	beq.w	24350 <getTrngSource+0x1f0>
   241c8:	9e03      	ldr	r6, [sp, #12]
   241ca:	4655      	mov	r5, sl
   241cc:	f04f 0900 	mov.w	r9, #0
   241d0:	f000 fc4e 	bl	24a70 <LLF_RND_TurnOffTrng>
   241d4:	2300      	movs	r3, #0
   241d6:	9305      	str	r3, [sp, #20]
   241d8:	f1b8 0f00 	cmp.w	r8, #0
   241dc:	f000 80e6 	beq.w	243ac <getTrngSource+0x24c>
   241e0:	2c00      	cmp	r4, #0
   241e2:	f000 80e3 	beq.w	243ac <getTrngSource+0x24c>
   241e6:	9b04      	ldr	r3, [sp, #16]
   241e8:	2b00      	cmp	r3, #0
   241ea:	f000 80dd 	beq.w	243a8 <getTrngSource+0x248>
   241ee:	a904      	add	r1, sp, #16
   241f0:	4620      	mov	r0, r4
   241f2:	f000 fc2d 	bl	24a50 <LLF_RND_GetFastestRosc>
   241f6:	b1b8      	cbz	r0, 24228 <getTrngSource+0xc8>
   241f8:	4b81      	ldr	r3, [pc, #516]	; (24400 <getTrngSource+0x2a0>)
   241fa:	4298      	cmp	r0, r3
   241fc:	f040 80a8 	bne.w	24350 <getTrngSource+0x1f0>
   24200:	9002      	str	r0, [sp, #8]
   24202:	f000 fc35 	bl	24a70 <LLF_RND_TurnOffTrng>
   24206:	9802      	ldr	r0, [sp, #8]
   24208:	b00d      	add	sp, #52	; 0x34
   2420a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2420e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   24212:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   24216:	3001      	adds	r0, #1
   24218:	bf14      	ite	ne
   2421a:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   2421e:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   24222:	e7a8      	b.n	24176 <getTrngSource+0x16>
   24224:	4877      	ldr	r0, [pc, #476]	; (24404 <getTrngSource+0x2a4>)
   24226:	e7eb      	b.n	24200 <getTrngSource+0xa0>
   24228:	9804      	ldr	r0, [sp, #16]
   2422a:	4621      	mov	r1, r4
   2422c:	f000 fbf2 	bl	24a14 <LLF_RND_GetRoscSampleCnt>
   24230:	2800      	cmp	r0, #0
   24232:	d1e1      	bne.n	241f8 <getTrngSource+0x98>
   24234:	9f04      	ldr	r7, [sp, #16]
   24236:	2f08      	cmp	r7, #8
   24238:	f000 80ba 	beq.w	243b0 <getTrngSource+0x250>
   2423c:	2f04      	cmp	r7, #4
   2423e:	f000 80b9 	beq.w	243b4 <getTrngSource+0x254>
   24242:	f1a7 0702 	sub.w	r7, r7, #2
   24246:	fab7 f787 	clz	r7, r7
   2424a:	097f      	lsrs	r7, r7, #5
   2424c:	496e      	ldr	r1, [pc, #440]	; (24408 <getTrngSource+0x2a8>)
   2424e:	2301      	movs	r3, #1
   24250:	600b      	str	r3, [r1, #0]
   24252:	f841 3c84 	str.w	r3, [r1, #-132]
   24256:	4619      	mov	r1, r3
   24258:	4b6b      	ldr	r3, [pc, #428]	; (24408 <getTrngSource+0x2a8>)
   2425a:	4867      	ldr	r0, [pc, #412]	; (243f8 <getTrngSource+0x298>)
   2425c:	6019      	str	r1, [r3, #0]
   2425e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24260:	6003      	str	r3, [r0, #0]
   24262:	6800      	ldr	r0, [r0, #0]
   24264:	4283      	cmp	r3, r0
   24266:	d1f7      	bne.n	24258 <getTrngSource+0xf8>
   24268:	4a68      	ldr	r2, [pc, #416]	; (2440c <getTrngSource+0x2ac>)
   2426a:	2300      	movs	r3, #0
   2426c:	6013      	str	r3, [r2, #0]
   2426e:	f04f 30ff 	mov.w	r0, #4294967295
   24272:	f7ff fd05 	bl	23c80 <CC_HalClearInterruptBit>
   24276:	2300      	movs	r3, #0
   24278:	4618      	mov	r0, r3
   2427a:	4b65      	ldr	r3, [pc, #404]	; (24410 <getTrngSource+0x2b0>)
   2427c:	f06f 011b 	mvn.w	r1, #27
   24280:	6019      	str	r1, [r3, #0]
   24282:	f7ff fd0b 	bl	23c9c <CC_HalMaskInterrupt>
   24286:	4963      	ldr	r1, [pc, #396]	; (24414 <getTrngSource+0x2b4>)
   24288:	4b63      	ldr	r3, [pc, #396]	; (24418 <getTrngSource+0x2b8>)
   2428a:	600f      	str	r7, [r1, #0]
   2428c:	6818      	ldr	r0, [r3, #0]
   2428e:	4f5b      	ldr	r7, [pc, #364]	; (243fc <getTrngSource+0x29c>)
   24290:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   24294:	f7ff fd02 	bl	23c9c <CC_HalMaskInterrupt>
   24298:	4b56      	ldr	r3, [pc, #344]	; (243f4 <getTrngSource+0x294>)
   2429a:	4860      	ldr	r0, [pc, #384]	; (2441c <getTrngSource+0x2bc>)
   2429c:	210a      	movs	r1, #10
   2429e:	6019      	str	r1, [r3, #0]
   242a0:	6921      	ldr	r1, [r4, #16]
   242a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   242a4:	fba7 c101 	umull	ip, r1, r7, r1
   242a8:	0909      	lsrs	r1, r1, #4
   242aa:	fb03 f301 	mul.w	r3, r3, r1
   242ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   242b2:	03db      	lsls	r3, r3, #15
   242b4:	099b      	lsrs	r3, r3, #6
   242b6:	6003      	str	r3, [r0, #0]
   242b8:	4b54      	ldr	r3, [pc, #336]	; (2440c <getTrngSource+0x2ac>)
   242ba:	2201      	movs	r2, #1
   242bc:	601a      	str	r2, [r3, #0]
   242be:	9904      	ldr	r1, [sp, #16]
   242c0:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   242c4:	020b      	lsls	r3, r1, #8
   242c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   242ca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   242ce:	4313      	orrs	r3, r2
   242d0:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   242d4:	a805      	add	r0, sp, #20
   242d6:	f000 fb8d 	bl	249f4 <LLF_RND_WaitRngInterrupt>
   242da:	9b05      	ldr	r3, [sp, #20]
   242dc:	f003 031a 	and.w	r3, r3, #26
   242e0:	4303      	orrs	r3, r0
   242e2:	d135      	bne.n	24350 <getTrngSource+0x1f0>
   242e4:	4a4e      	ldr	r2, [pc, #312]	; (24420 <getTrngSource+0x2c0>)
   242e6:	4b4f      	ldr	r3, [pc, #316]	; (24424 <getTrngSource+0x2c4>)
   242e8:	6812      	ldr	r2, [r2, #0]
   242ea:	9206      	str	r2, [sp, #24]
   242ec:	681a      	ldr	r2, [r3, #0]
   242ee:	9207      	str	r2, [sp, #28]
   242f0:	685a      	ldr	r2, [r3, #4]
   242f2:	9208      	str	r2, [sp, #32]
   242f4:	689a      	ldr	r2, [r3, #8]
   242f6:	9209      	str	r2, [sp, #36]	; 0x24
   242f8:	68da      	ldr	r2, [r3, #12]
   242fa:	920a      	str	r2, [sp, #40]	; 0x28
   242fc:	3310      	adds	r3, #16
   242fe:	fba7 2705 	umull	r2, r7, r7, r5
   24302:	681b      	ldr	r3, [r3, #0]
   24304:	930b      	str	r3, [sp, #44]	; 0x2c
   24306:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   2430a:	d102      	bne.n	24312 <getTrngSource+0x1b2>
   2430c:	f1bb 0f00 	cmp.w	fp, #0
   24310:	d141      	bne.n	24396 <getTrngSource+0x236>
   24312:	2218      	movs	r2, #24
   24314:	4630      	mov	r0, r6
   24316:	eb0d 0102 	add.w	r1, sp, r2
   2431a:	f000 fb0f 	bl	2493c <CC_PalMemCopyPlat>
   2431e:	3d18      	subs	r5, #24
   24320:	3618      	adds	r6, #24
   24322:	f109 0901 	add.w	r9, r9, #1
   24326:	2d00      	cmp	r5, #0
   24328:	f47f af52 	bne.w	241d0 <getTrngSource+0x70>
   2432c:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   24330:	d85d      	bhi.n	243ee <getTrngSource+0x28e>
   24332:	9d03      	ldr	r5, [sp, #12]
   24334:	6962      	ldr	r2, [r4, #20]
   24336:	4651      	mov	r1, sl
   24338:	4628      	mov	r0, r5
   2433a:	f7ff fe7b 	bl	24034 <LLF_RND_RepetitionCounterTest.part.0>
   2433e:	2800      	cmp	r0, #0
   24340:	d04b      	beq.n	243da <getTrngSource+0x27a>
   24342:	9a16      	ldr	r2, [sp, #88]	; 0x58
   24344:	2300      	movs	r3, #0
   24346:	6013      	str	r3, [r2, #0]
   24348:	4b2d      	ldr	r3, [pc, #180]	; (24400 <getTrngSource+0x2a0>)
   2434a:	4298      	cmp	r0, r3
   2434c:	f43f af58 	beq.w	24200 <getTrngSource+0xa0>
   24350:	9d04      	ldr	r5, [sp, #16]
   24352:	2d08      	cmp	r5, #8
   24354:	d034      	beq.n	243c0 <getTrngSource+0x260>
   24356:	2200      	movs	r2, #0
   24358:	ab04      	add	r3, sp, #16
   2435a:	006d      	lsls	r5, r5, #1
   2435c:	9200      	str	r2, [sp, #0]
   2435e:	4621      	mov	r1, r4
   24360:	4640      	mov	r0, r8
   24362:	9504      	str	r5, [sp, #16]
   24364:	f7ff fdb8 	bl	23ed8 <startTrngHW>
   24368:	4b2f      	ldr	r3, [pc, #188]	; (24428 <getTrngSource+0x2c8>)
   2436a:	4298      	cmp	r0, r3
   2436c:	d024      	beq.n	243b8 <getTrngSource+0x258>
   2436e:	2800      	cmp	r0, #0
   24370:	f47f af46 	bne.w	24200 <getTrngSource+0xa0>
   24374:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   24378:	0a13      	lsrs	r3, r2, #8
   2437a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   2437e:	4313      	orrs	r3, r2
   24380:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   24384:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   24388:	9b02      	ldr	r3, [sp, #8]
   2438a:	3b01      	subs	r3, #1
   2438c:	9302      	str	r3, [sp, #8]
   2438e:	f47f af14 	bne.w	241ba <getTrngSource+0x5a>
   24392:	2000      	movs	r0, #0
   24394:	e734      	b.n	24200 <getTrngSource+0xa0>
   24396:	4630      	mov	r0, r6
   24398:	465a      	mov	r2, fp
   2439a:	a906      	add	r1, sp, #24
   2439c:	f000 face 	bl	2493c <CC_PalMemCopyPlat>
   243a0:	eba5 050b 	sub.w	r5, r5, fp
   243a4:	445e      	add	r6, fp
   243a6:	e7bc      	b.n	24322 <getTrngSource+0x1c2>
   243a8:	481f      	ldr	r0, [pc, #124]	; (24428 <getTrngSource+0x2c8>)
   243aa:	e725      	b.n	241f8 <getTrngSource+0x98>
   243ac:	481f      	ldr	r0, [pc, #124]	; (2442c <getTrngSource+0x2cc>)
   243ae:	e723      	b.n	241f8 <getTrngSource+0x98>
   243b0:	2703      	movs	r7, #3
   243b2:	e74b      	b.n	2424c <getTrngSource+0xec>
   243b4:	2702      	movs	r7, #2
   243b6:	e749      	b.n	2424c <getTrngSource+0xec>
   243b8:	6a23      	ldr	r3, [r4, #32]
   243ba:	2b00      	cmp	r3, #0
   243bc:	f43f af20 	beq.w	24200 <getTrngSource+0xa0>
   243c0:	481b      	ldr	r0, [pc, #108]	; (24430 <getTrngSource+0x2d0>)
   243c2:	e71d      	b.n	24200 <getTrngSource+0xa0>
   243c4:	9500      	str	r5, [sp, #0]
   243c6:	ab04      	add	r3, sp, #16
   243c8:	2201      	movs	r2, #1
   243ca:	4621      	mov	r1, r4
   243cc:	4638      	mov	r0, r7
   243ce:	f7ff fd83 	bl	23ed8 <startTrngHW>
   243d2:	2800      	cmp	r0, #0
   243d4:	f43f aee2 	beq.w	2419c <getTrngSource+0x3c>
   243d8:	e712      	b.n	24200 <getTrngSource+0xa0>
   243da:	69a2      	ldr	r2, [r4, #24]
   243dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   243e0:	4651      	mov	r1, sl
   243e2:	4628      	mov	r0, r5
   243e4:	f7ff fe54 	bl	24090 <LLF_RND_AdaptiveProportionTest>
   243e8:	2800      	cmp	r0, #0
   243ea:	d1aa      	bne.n	24342 <getTrngSource+0x1e2>
   243ec:	e7d1      	b.n	24392 <getTrngSource+0x232>
   243ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
   243f0:	601d      	str	r5, [r3, #0]
   243f2:	e7ad      	b.n	24350 <getTrngSource+0x1f0>
   243f4:	5002b138 	.word	0x5002b138
   243f8:	5002b130 	.word	0x5002b130
   243fc:	aaaaaaab 	.word	0xaaaaaaab
   24400:	00f10c02 	.word	0x00f10c02
   24404:	00f10c30 	.word	0x00f10c30
   24408:	5002b1c4 	.word	0x5002b1c4
   2440c:	5002b12c 	.word	0x5002b12c
   24410:	5002b100 	.word	0x5002b100
   24414:	5002b10c 	.word	0x5002b10c
   24418:	5002ba04 	.word	0x5002ba04
   2441c:	5002b1d8 	.word	0x5002b1d8
   24420:	5002b114 	.word	0x5002b114
   24424:	5002b118 	.word	0x5002b118
   24428:	00f10c31 	.word	0x00f10c31
   2442c:	00f10c35 	.word	0x00f10c35
   24430:	00f10c32 	.word	0x00f10c32

00024434 <LLF_RND_GetTrngSource>:
   24434:	b430      	push	{r4, r5}
   24436:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   2443a:	9d04      	ldr	r5, [sp, #16]
   2443c:	9402      	str	r4, [sp, #8]
   2443e:	2400      	movs	r4, #0
   24440:	e9cd 5403 	strd	r5, r4, [sp, #12]
   24444:	bc30      	pop	{r4, r5}
   24446:	f7ff be8b 	b.w	24160 <getTrngSource>
   2444a:	bf00      	nop

0002444c <LLF_RND_RunTrngStartupTest>:
   2444c:	b510      	push	{r4, lr}
   2444e:	b086      	sub	sp, #24
   24450:	ab05      	add	r3, sp, #20
   24452:	2401      	movs	r4, #1
   24454:	e9cd 2401 	strd	r2, r4, [sp, #4]
   24458:	9300      	str	r3, [sp, #0]
   2445a:	2200      	movs	r2, #0
   2445c:	ab04      	add	r3, sp, #16
   2445e:	f7ff fe7f 	bl	24160 <getTrngSource>
   24462:	b006      	add	sp, #24
   24464:	bd10      	pop	{r4, pc}
   24466:	bf00      	nop

00024468 <mbedtls_hardware_poll>:
   24468:	b5f0      	push	{r4, r5, r6, r7, lr}
   2446a:	b089      	sub	sp, #36	; 0x24
   2446c:	9205      	str	r2, [sp, #20]
   2446e:	2900      	cmp	r1, #0
   24470:	d064      	beq.n	2453c <mbedtls_hardware_poll+0xd4>
   24472:	461c      	mov	r4, r3
   24474:	2b00      	cmp	r3, #0
   24476:	d061      	beq.n	2453c <mbedtls_hardware_poll+0xd4>
   24478:	4615      	mov	r5, r2
   2447a:	2a00      	cmp	r2, #0
   2447c:	d05e      	beq.n	2453c <mbedtls_hardware_poll+0xd4>
   2447e:	4f31      	ldr	r7, [pc, #196]	; (24544 <mbedtls_hardware_poll+0xdc>)
   24480:	460e      	mov	r6, r1
   24482:	6838      	ldr	r0, [r7, #0]
   24484:	f04f 31ff 	mov.w	r1, #4294967295
   24488:	f7ff fca2 	bl	23dd0 <CC_PalMutexLock>
   2448c:	2800      	cmp	r0, #0
   2448e:	d14b      	bne.n	24528 <mbedtls_hardware_poll+0xc0>
   24490:	2000      	movs	r0, #0
   24492:	f7ff fccd 	bl	23e30 <CC_PalPowerSaveModeSelect>
   24496:	2800      	cmp	r0, #0
   24498:	d142      	bne.n	24520 <mbedtls_hardware_poll+0xb8>
   2449a:	482b      	ldr	r0, [pc, #172]	; (24548 <mbedtls_hardware_poll+0xe0>)
   2449c:	f000 fa12 	bl	248c4 <RNG_PLAT_SetUserRngParameters>
   244a0:	b1d8      	cbz	r0, 244da <mbedtls_hardware_poll+0x72>
   244a2:	2001      	movs	r0, #1
   244a4:	f04f 36ff 	mov.w	r6, #4294967295
   244a8:	f7ff fcc2 	bl	23e30 <CC_PalPowerSaveModeSelect>
   244ac:	2800      	cmp	r0, #0
   244ae:	d133      	bne.n	24518 <mbedtls_hardware_poll+0xb0>
   244b0:	4826      	ldr	r0, [pc, #152]	; (2454c <mbedtls_hardware_poll+0xe4>)
   244b2:	f44f 7108 	mov.w	r1, #544	; 0x220
   244b6:	f7fe fe47 	bl	23148 <mbedtls_zeroize_internal>
   244ba:	4825      	ldr	r0, [pc, #148]	; (24550 <mbedtls_hardware_poll+0xe8>)
   244bc:	21dc      	movs	r1, #220	; 0xdc
   244be:	f7fe fe43 	bl	23148 <mbedtls_zeroize_internal>
   244c2:	4821      	ldr	r0, [pc, #132]	; (24548 <mbedtls_hardware_poll+0xe0>)
   244c4:	2128      	movs	r1, #40	; 0x28
   244c6:	f7fe fe3f 	bl	23148 <mbedtls_zeroize_internal>
   244ca:	6838      	ldr	r0, [r7, #0]
   244cc:	f7ff fc88 	bl	23de0 <CC_PalMutexUnlock>
   244d0:	2800      	cmp	r0, #0
   244d2:	d12d      	bne.n	24530 <mbedtls_hardware_poll+0xc8>
   244d4:	4630      	mov	r0, r6
   244d6:	b009      	add	sp, #36	; 0x24
   244d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   244da:	491c      	ldr	r1, [pc, #112]	; (2454c <mbedtls_hardware_poll+0xe4>)
   244dc:	9003      	str	r0, [sp, #12]
   244de:	ab07      	add	r3, sp, #28
   244e0:	4602      	mov	r2, r0
   244e2:	9102      	str	r1, [sp, #8]
   244e4:	9300      	str	r3, [sp, #0]
   244e6:	4918      	ldr	r1, [pc, #96]	; (24548 <mbedtls_hardware_poll+0xe0>)
   244e8:	4819      	ldr	r0, [pc, #100]	; (24550 <mbedtls_hardware_poll+0xe8>)
   244ea:	9401      	str	r4, [sp, #4]
   244ec:	ab05      	add	r3, sp, #20
   244ee:	f7ff ffa1 	bl	24434 <LLF_RND_GetTrngSource>
   244f2:	4603      	mov	r3, r0
   244f4:	2800      	cmp	r0, #0
   244f6:	d1d4      	bne.n	244a2 <mbedtls_hardware_poll+0x3a>
   244f8:	6822      	ldr	r2, [r4, #0]
   244fa:	42aa      	cmp	r2, r5
   244fc:	d3d1      	bcc.n	244a2 <mbedtls_hardware_poll+0x3a>
   244fe:	9907      	ldr	r1, [sp, #28]
   24500:	4630      	mov	r0, r6
   24502:	3108      	adds	r1, #8
   24504:	462a      	mov	r2, r5
   24506:	461e      	mov	r6, r3
   24508:	f000 fa18 	bl	2493c <CC_PalMemCopyPlat>
   2450c:	6025      	str	r5, [r4, #0]
   2450e:	2001      	movs	r0, #1
   24510:	f7ff fc8e 	bl	23e30 <CC_PalPowerSaveModeSelect>
   24514:	2800      	cmp	r0, #0
   24516:	d0cb      	beq.n	244b0 <mbedtls_hardware_poll+0x48>
   24518:	480e      	ldr	r0, [pc, #56]	; (24554 <mbedtls_hardware_poll+0xec>)
   2451a:	f7fe fd0d 	bl	22f38 <CC_PalAbort>
   2451e:	e7c7      	b.n	244b0 <mbedtls_hardware_poll+0x48>
   24520:	480d      	ldr	r0, [pc, #52]	; (24558 <mbedtls_hardware_poll+0xf0>)
   24522:	f7fe fd09 	bl	22f38 <CC_PalAbort>
   24526:	e7b8      	b.n	2449a <mbedtls_hardware_poll+0x32>
   24528:	480c      	ldr	r0, [pc, #48]	; (2455c <mbedtls_hardware_poll+0xf4>)
   2452a:	f7fe fd05 	bl	22f38 <CC_PalAbort>
   2452e:	e7af      	b.n	24490 <mbedtls_hardware_poll+0x28>
   24530:	480b      	ldr	r0, [pc, #44]	; (24560 <mbedtls_hardware_poll+0xf8>)
   24532:	f7fe fd01 	bl	22f38 <CC_PalAbort>
   24536:	4630      	mov	r0, r6
   24538:	b009      	add	sp, #36	; 0x24
   2453a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2453c:	f04f 36ff 	mov.w	r6, #4294967295
   24540:	e7c8      	b.n	244d4 <mbedtls_hardware_poll+0x6c>
   24542:	bf00      	nop
   24544:	200006a4 	.word	0x200006a4
   24548:	2000363c 	.word	0x2000363c
   2454c:	2000341c 	.word	0x2000341c
   24550:	20003340 	.word	0x20003340
   24554:	0002dd1c 	.word	0x0002dd1c
   24558:	0002dcfc 	.word	0x0002dcfc
   2455c:	0002dce4 	.word	0x0002dce4
   24560:	0002dd74 	.word	0x0002dd74

00024564 <cc_mbedtls_aes_init>:
   24564:	b510      	push	{r4, lr}
   24566:	4604      	mov	r4, r0
   24568:	b130      	cbz	r0, 24578 <cc_mbedtls_aes_init+0x14>
   2456a:	2200      	movs	r2, #0
   2456c:	2301      	movs	r3, #1
   2456e:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   24572:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   24576:	bd10      	pop	{r4, pc}
   24578:	4801      	ldr	r0, [pc, #4]	; (24580 <cc_mbedtls_aes_init+0x1c>)
   2457a:	f7fe fcdd 	bl	22f38 <CC_PalAbort>
   2457e:	e7f4      	b.n	2456a <cc_mbedtls_aes_init+0x6>
   24580:	0002dd8c 	.word	0x0002dd8c

00024584 <cc_mbedtls_aes_free>:
   24584:	b118      	cbz	r0, 2458e <cc_mbedtls_aes_free+0xa>
   24586:	2274      	movs	r2, #116	; 0x74
   24588:	2100      	movs	r1, #0
   2458a:	f000 b9d9 	b.w	24940 <CC_PalMemSetPlat>
   2458e:	4770      	bx	lr

00024590 <cc_mbedtls_aes_setkey_enc>:
   24590:	b190      	cbz	r0, 245b8 <cc_mbedtls_aes_setkey_enc+0x28>
   24592:	b1a1      	cbz	r1, 245be <cc_mbedtls_aes_setkey_enc+0x2e>
   24594:	b510      	push	{r4, lr}
   24596:	2a80      	cmp	r2, #128	; 0x80
   24598:	f04f 0400 	mov.w	r4, #0
   2459c:	6384      	str	r4, [r0, #56]	; 0x38
   2459e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   245a2:	d106      	bne.n	245b2 <cc_mbedtls_aes_setkey_enc+0x22>
   245a4:	6304      	str	r4, [r0, #48]	; 0x30
   245a6:	2210      	movs	r2, #16
   245a8:	3010      	adds	r0, #16
   245aa:	f000 f9c7 	bl	2493c <CC_PalMemCopyPlat>
   245ae:	4620      	mov	r0, r4
   245b0:	bd10      	pop	{r4, pc}
   245b2:	f06f 001f 	mvn.w	r0, #31
   245b6:	bd10      	pop	{r4, pc}
   245b8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   245bc:	4770      	bx	lr
   245be:	f06f 001f 	mvn.w	r0, #31
   245c2:	4770      	bx	lr

000245c4 <cc_mbedtls_aes_crypt_ecb>:
   245c4:	b320      	cbz	r0, 24610 <cc_mbedtls_aes_crypt_ecb+0x4c>
   245c6:	b31a      	cbz	r2, 24610 <cc_mbedtls_aes_crypt_ecb+0x4c>
   245c8:	b313      	cbz	r3, 24610 <cc_mbedtls_aes_crypt_ecb+0x4c>
   245ca:	2901      	cmp	r1, #1
   245cc:	d820      	bhi.n	24610 <cc_mbedtls_aes_crypt_ecb+0x4c>
   245ce:	b570      	push	{r4, r5, r6, lr}
   245d0:	4604      	mov	r4, r0
   245d2:	6b81      	ldr	r1, [r0, #56]	; 0x38
   245d4:	b086      	sub	sp, #24
   245d6:	d016      	beq.n	24606 <cc_mbedtls_aes_crypt_ecb+0x42>
   245d8:	2901      	cmp	r1, #1
   245da:	d116      	bne.n	2460a <cc_mbedtls_aes_crypt_ecb+0x46>
   245dc:	2100      	movs	r1, #0
   245de:	2510      	movs	r5, #16
   245e0:	ae04      	add	r6, sp, #16
   245e2:	6361      	str	r1, [r4, #52]	; 0x34
   245e4:	4610      	mov	r0, r2
   245e6:	e9cd 5600 	strd	r5, r6, [sp]
   245ea:	aa02      	add	r2, sp, #8
   245ec:	4629      	mov	r1, r5
   245ee:	f000 fa4d 	bl	24a8c <SetDataBuffersInfo>
   245f2:	b950      	cbnz	r0, 2460a <cc_mbedtls_aes_crypt_ecb+0x46>
   245f4:	462b      	mov	r3, r5
   245f6:	4632      	mov	r2, r6
   245f8:	a902      	add	r1, sp, #8
   245fa:	4620      	mov	r0, r4
   245fc:	f000 fcda 	bl	24fb4 <ProcessAesDrv>
   24600:	b918      	cbnz	r0, 2460a <cc_mbedtls_aes_crypt_ecb+0x46>
   24602:	b006      	add	sp, #24
   24604:	bd70      	pop	{r4, r5, r6, pc}
   24606:	2900      	cmp	r1, #0
   24608:	d0e8      	beq.n	245dc <cc_mbedtls_aes_crypt_ecb+0x18>
   2460a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2460e:	e7f8      	b.n	24602 <cc_mbedtls_aes_crypt_ecb+0x3e>
   24610:	f06f 0021 	mvn.w	r0, #33	; 0x21
   24614:	4770      	bx	lr
   24616:	bf00      	nop

00024618 <cc_mbedtls_sha256_init>:
   24618:	b510      	push	{r4, lr}
   2461a:	4604      	mov	r4, r0
   2461c:	b128      	cbz	r0, 2462a <cc_mbedtls_sha256_init+0x12>
   2461e:	4620      	mov	r0, r4
   24620:	21f0      	movs	r1, #240	; 0xf0
   24622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24626:	f000 b98d 	b.w	24944 <CC_PalMemSetZeroPlat>
   2462a:	4804      	ldr	r0, [pc, #16]	; (2463c <cc_mbedtls_sha256_init+0x24>)
   2462c:	f7fe fc84 	bl	22f38 <CC_PalAbort>
   24630:	4620      	mov	r0, r4
   24632:	21f0      	movs	r1, #240	; 0xf0
   24634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24638:	f000 b984 	b.w	24944 <CC_PalMemSetZeroPlat>
   2463c:	0002dda0 	.word	0x0002dda0

00024640 <cc_mbedtls_sha256_free>:
   24640:	b110      	cbz	r0, 24648 <cc_mbedtls_sha256_free+0x8>
   24642:	21f0      	movs	r1, #240	; 0xf0
   24644:	f7fe bd80 	b.w	23148 <mbedtls_zeroize_internal>
   24648:	4770      	bx	lr
   2464a:	bf00      	nop

0002464c <cc_mbedtls_sha256_starts>:
   2464c:	b508      	push	{r3, lr}
   2464e:	b161      	cbz	r1, 2466a <cc_mbedtls_sha256_starts+0x1e>
   24650:	2901      	cmp	r1, #1
   24652:	d107      	bne.n	24664 <cc_mbedtls_sha256_starts+0x18>
   24654:	2102      	movs	r1, #2
   24656:	f000 f85b 	bl	24710 <mbedtls_sha_starts_internal>
   2465a:	2800      	cmp	r0, #0
   2465c:	bf18      	it	ne
   2465e:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   24662:	bd08      	pop	{r3, pc}
   24664:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24668:	bd08      	pop	{r3, pc}
   2466a:	2101      	movs	r1, #1
   2466c:	f000 f850 	bl	24710 <mbedtls_sha_starts_internal>
   24670:	e7f3      	b.n	2465a <cc_mbedtls_sha256_starts+0xe>
   24672:	bf00      	nop

00024674 <cc_mbedtls_sha256_update>:
   24674:	b570      	push	{r4, r5, r6, lr}
   24676:	188e      	adds	r6, r1, r2
   24678:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   2467c:	b0a0      	sub	sp, #128	; 0x80
   2467e:	460b      	mov	r3, r1
   24680:	4614      	mov	r4, r2
   24682:	4605      	mov	r5, r0
   24684:	d801      	bhi.n	2468a <cc_mbedtls_sha256_update+0x16>
   24686:	2a80      	cmp	r2, #128	; 0x80
   24688:	d90c      	bls.n	246a4 <cc_mbedtls_sha256_update+0x30>
   2468a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2468e:	d917      	bls.n	246c0 <cc_mbedtls_sha256_update+0x4c>
   24690:	4622      	mov	r2, r4
   24692:	4619      	mov	r1, r3
   24694:	4628      	mov	r0, r5
   24696:	f000 f87d 	bl	24794 <mbedtls_sha_update_internal>
   2469a:	4604      	mov	r4, r0
   2469c:	b984      	cbnz	r4, 246c0 <cc_mbedtls_sha256_update+0x4c>
   2469e:	4620      	mov	r0, r4
   246a0:	b020      	add	sp, #128	; 0x80
   246a2:	bd70      	pop	{r4, r5, r6, pc}
   246a4:	4668      	mov	r0, sp
   246a6:	f000 f949 	bl	2493c <CC_PalMemCopyPlat>
   246aa:	4622      	mov	r2, r4
   246ac:	4669      	mov	r1, sp
   246ae:	4628      	mov	r0, r5
   246b0:	f000 f870 	bl	24794 <mbedtls_sha_update_internal>
   246b4:	2180      	movs	r1, #128	; 0x80
   246b6:	4604      	mov	r4, r0
   246b8:	4668      	mov	r0, sp
   246ba:	f000 f943 	bl	24944 <CC_PalMemSetZeroPlat>
   246be:	e7ed      	b.n	2469c <cc_mbedtls_sha256_update+0x28>
   246c0:	f06f 0436 	mvn.w	r4, #54	; 0x36
   246c4:	e7eb      	b.n	2469e <cc_mbedtls_sha256_update+0x2a>
   246c6:	bf00      	nop

000246c8 <cc_mbedtls_sha256_finish>:
   246c8:	b570      	push	{r4, r5, r6, lr}
   246ca:	b1e8      	cbz	r0, 24708 <cc_mbedtls_sha256_finish+0x40>
   246cc:	460e      	mov	r6, r1
   246ce:	b1d9      	cbz	r1, 24708 <cc_mbedtls_sha256_finish+0x40>
   246d0:	4604      	mov	r4, r0
   246d2:	f000 f831 	bl	24738 <mbedtls_sha_finish_internal>
   246d6:	4605      	mov	r5, r0
   246d8:	b9b0      	cbnz	r0, 24708 <cc_mbedtls_sha256_finish+0x40>
   246da:	6823      	ldr	r3, [r4, #0]
   246dc:	2b01      	cmp	r3, #1
   246de:	d00b      	beq.n	246f8 <cc_mbedtls_sha256_finish+0x30>
   246e0:	2b02      	cmp	r3, #2
   246e2:	d001      	beq.n	246e8 <cc_mbedtls_sha256_finish+0x20>
   246e4:	4628      	mov	r0, r5
   246e6:	bd70      	pop	{r4, r5, r6, pc}
   246e8:	f104 0108 	add.w	r1, r4, #8
   246ec:	4630      	mov	r0, r6
   246ee:	221c      	movs	r2, #28
   246f0:	f000 f924 	bl	2493c <CC_PalMemCopyPlat>
   246f4:	4628      	mov	r0, r5
   246f6:	bd70      	pop	{r4, r5, r6, pc}
   246f8:	f104 0108 	add.w	r1, r4, #8
   246fc:	4630      	mov	r0, r6
   246fe:	2220      	movs	r2, #32
   24700:	f000 f91c 	bl	2493c <CC_PalMemCopyPlat>
   24704:	4628      	mov	r0, r5
   24706:	bd70      	pop	{r4, r5, r6, pc}
   24708:	f06f 0536 	mvn.w	r5, #54	; 0x36
   2470c:	e7ea      	b.n	246e4 <cc_mbedtls_sha256_finish+0x1c>
   2470e:	bf00      	nop

00024710 <mbedtls_sha_starts_internal>:
   24710:	b178      	cbz	r0, 24732 <mbedtls_sha_starts_internal+0x22>
   24712:	b538      	push	{r3, r4, r5, lr}
   24714:	4604      	mov	r4, r0
   24716:	460d      	mov	r5, r1
   24718:	21f0      	movs	r1, #240	; 0xf0
   2471a:	f000 f913 	bl	24944 <CC_PalMemSetZeroPlat>
   2471e:	2340      	movs	r3, #64	; 0x40
   24720:	6025      	str	r5, [r4, #0]
   24722:	65e3      	str	r3, [r4, #92]	; 0x5c
   24724:	4620      	mov	r0, r4
   24726:	f000 f9e5 	bl	24af4 <InitHashDrv>
   2472a:	3800      	subs	r0, #0
   2472c:	bf18      	it	ne
   2472e:	2001      	movne	r0, #1
   24730:	bd38      	pop	{r3, r4, r5, pc}
   24732:	2001      	movs	r0, #1
   24734:	4770      	bx	lr
   24736:	bf00      	nop

00024738 <mbedtls_sha_finish_internal>:
   24738:	b570      	push	{r4, r5, r6, lr}
   2473a:	6e05      	ldr	r5, [r0, #96]	; 0x60
   2473c:	b0a4      	sub	sp, #144	; 0x90
   2473e:	4604      	mov	r4, r0
   24740:	ae04      	add	r6, sp, #16
   24742:	b9e5      	cbnz	r5, 2477e <mbedtls_sha_finish_internal+0x46>
   24744:	2201      	movs	r2, #1
   24746:	2300      	movs	r3, #0
   24748:	6062      	str	r2, [r4, #4]
   2474a:	4630      	mov	r0, r6
   2474c:	e9cd 3300 	strd	r3, r3, [sp]
   24750:	aa02      	add	r2, sp, #8
   24752:	4629      	mov	r1, r5
   24754:	f000 f99a 	bl	24a8c <SetDataBuffersInfo>
   24758:	b110      	cbz	r0, 24760 <mbedtls_sha_finish_internal+0x28>
   2475a:	2001      	movs	r0, #1
   2475c:	b024      	add	sp, #144	; 0x90
   2475e:	bd70      	pop	{r4, r5, r6, pc}
   24760:	462a      	mov	r2, r5
   24762:	a902      	add	r1, sp, #8
   24764:	4620      	mov	r0, r4
   24766:	f000 f9ef 	bl	24b48 <ProcessHashDrv>
   2476a:	2800      	cmp	r0, #0
   2476c:	d1f5      	bne.n	2475a <mbedtls_sha_finish_internal+0x22>
   2476e:	4620      	mov	r0, r4
   24770:	f000 fb18 	bl	24da4 <FinishHashDrv>
   24774:	2800      	cmp	r0, #0
   24776:	d1f0      	bne.n	2475a <mbedtls_sha_finish_internal+0x22>
   24778:	6620      	str	r0, [r4, #96]	; 0x60
   2477a:	b024      	add	sp, #144	; 0x90
   2477c:	bd70      	pop	{r4, r5, r6, pc}
   2477e:	2d80      	cmp	r5, #128	; 0x80
   24780:	462a      	mov	r2, r5
   24782:	4630      	mov	r0, r6
   24784:	bf28      	it	cs
   24786:	2280      	movcs	r2, #128	; 0x80
   24788:	f104 0164 	add.w	r1, r4, #100	; 0x64
   2478c:	f000 f8d6 	bl	2493c <CC_PalMemCopyPlat>
   24790:	6e25      	ldr	r5, [r4, #96]	; 0x60
   24792:	e7d7      	b.n	24744 <mbedtls_sha_finish_internal+0xc>

00024794 <mbedtls_sha_update_internal>:
   24794:	2800      	cmp	r0, #0
   24796:	d054      	beq.n	24842 <mbedtls_sha_update_internal+0xae>
   24798:	b5f0      	push	{r4, r5, r6, r7, lr}
   2479a:	4614      	mov	r4, r2
   2479c:	b0a5      	sub	sp, #148	; 0x94
   2479e:	b1b2      	cbz	r2, 247ce <mbedtls_sha_update_internal+0x3a>
   247a0:	460e      	mov	r6, r1
   247a2:	b351      	cbz	r1, 247fa <mbedtls_sha_update_internal+0x66>
   247a4:	4605      	mov	r5, r0
   247a6:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   247aa:	1a1a      	subs	r2, r3, r0
   247ac:	fbb2 f7f3 	udiv	r7, r2, r3
   247b0:	fb03 2717 	mls	r7, r3, r7, r2
   247b4:	42a7      	cmp	r7, r4
   247b6:	bf28      	it	cs
   247b8:	4627      	movcs	r7, r4
   247ba:	2f00      	cmp	r7, #0
   247bc:	d143      	bne.n	24846 <mbedtls_sha_update_internal+0xb2>
   247be:	4283      	cmp	r3, r0
   247c0:	d008      	beq.n	247d4 <mbedtls_sha_update_internal+0x40>
   247c2:	fbb4 f7f3 	udiv	r7, r4, r3
   247c6:	fb03 f707 	mul.w	r7, r3, r7
   247ca:	b9cf      	cbnz	r7, 24800 <mbedtls_sha_update_internal+0x6c>
   247cc:	bb6c      	cbnz	r4, 2482a <mbedtls_sha_update_internal+0x96>
   247ce:	2000      	movs	r0, #0
   247d0:	b025      	add	sp, #148	; 0x94
   247d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   247d4:	2b80      	cmp	r3, #128	; 0x80
   247d6:	bf28      	it	cs
   247d8:	2380      	movcs	r3, #128	; 0x80
   247da:	461a      	mov	r2, r3
   247dc:	f105 0164 	add.w	r1, r5, #100	; 0x64
   247e0:	a804      	add	r0, sp, #16
   247e2:	f000 f8ab 	bl	2493c <CC_PalMemCopyPlat>
   247e6:	2300      	movs	r3, #0
   247e8:	e9cd 3300 	strd	r3, r3, [sp]
   247ec:	a804      	add	r0, sp, #16
   247ee:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   247f0:	aa02      	add	r2, sp, #8
   247f2:	f000 f94b 	bl	24a8c <SetDataBuffersInfo>
   247f6:	2800      	cmp	r0, #0
   247f8:	d032      	beq.n	24860 <mbedtls_sha_update_internal+0xcc>
   247fa:	2001      	movs	r0, #1
   247fc:	b025      	add	sp, #148	; 0x94
   247fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24800:	2300      	movs	r3, #0
   24802:	e9cd 3300 	strd	r3, r3, [sp]
   24806:	aa02      	add	r2, sp, #8
   24808:	4639      	mov	r1, r7
   2480a:	4630      	mov	r0, r6
   2480c:	f000 f93e 	bl	24a8c <SetDataBuffersInfo>
   24810:	2800      	cmp	r0, #0
   24812:	d1f2      	bne.n	247fa <mbedtls_sha_update_internal+0x66>
   24814:	a902      	add	r1, sp, #8
   24816:	463a      	mov	r2, r7
   24818:	4628      	mov	r0, r5
   2481a:	f000 f995 	bl	24b48 <ProcessHashDrv>
   2481e:	2800      	cmp	r0, #0
   24820:	d1eb      	bne.n	247fa <mbedtls_sha_update_internal+0x66>
   24822:	1be4      	subs	r4, r4, r7
   24824:	443e      	add	r6, r7
   24826:	2c00      	cmp	r4, #0
   24828:	d0d1      	beq.n	247ce <mbedtls_sha_update_internal+0x3a>
   2482a:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2482c:	3019      	adds	r0, #25
   2482e:	4622      	mov	r2, r4
   24830:	4631      	mov	r1, r6
   24832:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   24836:	f000 f881 	bl	2493c <CC_PalMemCopyPlat>
   2483a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   2483c:	4422      	add	r2, r4
   2483e:	662a      	str	r2, [r5, #96]	; 0x60
   24840:	e7c5      	b.n	247ce <mbedtls_sha_update_internal+0x3a>
   24842:	2001      	movs	r0, #1
   24844:	4770      	bx	lr
   24846:	f105 0364 	add.w	r3, r5, #100	; 0x64
   2484a:	4418      	add	r0, r3
   2484c:	463a      	mov	r2, r7
   2484e:	f000 f875 	bl	2493c <CC_PalMemCopyPlat>
   24852:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   24856:	4438      	add	r0, r7
   24858:	443e      	add	r6, r7
   2485a:	1be4      	subs	r4, r4, r7
   2485c:	6628      	str	r0, [r5, #96]	; 0x60
   2485e:	e7ae      	b.n	247be <mbedtls_sha_update_internal+0x2a>
   24860:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   24862:	a902      	add	r1, sp, #8
   24864:	4628      	mov	r0, r5
   24866:	f000 f96f 	bl	24b48 <ProcessHashDrv>
   2486a:	2800      	cmp	r0, #0
   2486c:	d1c5      	bne.n	247fa <mbedtls_sha_update_internal+0x66>
   2486e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   24870:	6628      	str	r0, [r5, #96]	; 0x60
   24872:	e7a6      	b.n	247c2 <mbedtls_sha_update_internal+0x2e>

00024874 <cc_mbedtls_sha256>:
   24874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24876:	461c      	mov	r4, r3
   24878:	4605      	mov	r5, r0
   2487a:	4811      	ldr	r0, [pc, #68]	; (248c0 <cc_mbedtls_sha256+0x4c>)
   2487c:	460e      	mov	r6, r1
   2487e:	4617      	mov	r7, r2
   24880:	f7ff feca 	bl	24618 <cc_mbedtls_sha256_init>
   24884:	4621      	mov	r1, r4
   24886:	480e      	ldr	r0, [pc, #56]	; (248c0 <cc_mbedtls_sha256+0x4c>)
   24888:	f7ff fee0 	bl	2464c <cc_mbedtls_sha256_starts>
   2488c:	4604      	mov	r4, r0
   2488e:	b120      	cbz	r0, 2489a <cc_mbedtls_sha256+0x26>
   24890:	480b      	ldr	r0, [pc, #44]	; (248c0 <cc_mbedtls_sha256+0x4c>)
   24892:	f7ff fed5 	bl	24640 <cc_mbedtls_sha256_free>
   24896:	4620      	mov	r0, r4
   24898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2489a:	4809      	ldr	r0, [pc, #36]	; (248c0 <cc_mbedtls_sha256+0x4c>)
   2489c:	4632      	mov	r2, r6
   2489e:	4629      	mov	r1, r5
   248a0:	f7ff fee8 	bl	24674 <cc_mbedtls_sha256_update>
   248a4:	4604      	mov	r4, r0
   248a6:	2800      	cmp	r0, #0
   248a8:	d1f2      	bne.n	24890 <cc_mbedtls_sha256+0x1c>
   248aa:	4639      	mov	r1, r7
   248ac:	4804      	ldr	r0, [pc, #16]	; (248c0 <cc_mbedtls_sha256+0x4c>)
   248ae:	f7ff ff0b 	bl	246c8 <cc_mbedtls_sha256_finish>
   248b2:	4604      	mov	r4, r0
   248b4:	4802      	ldr	r0, [pc, #8]	; (248c0 <cc_mbedtls_sha256+0x4c>)
   248b6:	f7ff fec3 	bl	24640 <cc_mbedtls_sha256_free>
   248ba:	4620      	mov	r0, r4
   248bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   248be:	bf00      	nop
   248c0:	20003664 	.word	0x20003664

000248c4 <RNG_PLAT_SetUserRngParameters>:
   248c4:	b530      	push	{r4, r5, lr}
   248c6:	b083      	sub	sp, #12
   248c8:	231c      	movs	r3, #28
   248ca:	a901      	add	r1, sp, #4
   248cc:	4604      	mov	r4, r0
   248ce:	9301      	str	r3, [sp, #4]
   248d0:	f000 f83c 	bl	2494c <CC_PalTrngParamGet>
   248d4:	4605      	mov	r5, r0
   248d6:	b938      	cbnz	r0, 248e8 <RNG_PLAT_SetUserRngParameters+0x24>
   248d8:	9b01      	ldr	r3, [sp, #4]
   248da:	2b1c      	cmp	r3, #28
   248dc:	d007      	beq.n	248ee <RNG_PLAT_SetUserRngParameters+0x2a>
   248de:	4d15      	ldr	r5, [pc, #84]	; (24934 <RNG_PLAT_SetUserRngParameters+0x70>)
   248e0:	4620      	mov	r0, r4
   248e2:	211c      	movs	r1, #28
   248e4:	f000 f82e 	bl	24944 <CC_PalMemSetZeroPlat>
   248e8:	4628      	mov	r0, r5
   248ea:	b003      	add	sp, #12
   248ec:	bd30      	pop	{r4, r5, pc}
   248ee:	e9d4 3200 	ldrd	r3, r2, [r4]
   248f2:	2101      	movs	r1, #1
   248f4:	3b00      	subs	r3, #0
   248f6:	bf18      	it	ne
   248f8:	2301      	movne	r3, #1
   248fa:	61e1      	str	r1, [r4, #28]
   248fc:	b10a      	cbz	r2, 24902 <RNG_PLAT_SetUserRngParameters+0x3e>
   248fe:	f043 0302 	orr.w	r3, r3, #2
   24902:	68a2      	ldr	r2, [r4, #8]
   24904:	b932      	cbnz	r2, 24914 <RNG_PLAT_SetUserRngParameters+0x50>
   24906:	68e2      	ldr	r2, [r4, #12]
   24908:	b942      	cbnz	r2, 2491c <RNG_PLAT_SetUserRngParameters+0x58>
   2490a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2490e:	b97b      	cbnz	r3, 24930 <RNG_PLAT_SetUserRngParameters+0x6c>
   24910:	4d09      	ldr	r5, [pc, #36]	; (24938 <RNG_PLAT_SetUserRngParameters+0x74>)
   24912:	e7e5      	b.n	248e0 <RNG_PLAT_SetUserRngParameters+0x1c>
   24914:	68e2      	ldr	r2, [r4, #12]
   24916:	f043 0304 	orr.w	r3, r3, #4
   2491a:	b13a      	cbz	r2, 2492c <RNG_PLAT_SetUserRngParameters+0x68>
   2491c:	f043 0308 	orr.w	r3, r3, #8
   24920:	2200      	movs	r2, #0
   24922:	4628      	mov	r0, r5
   24924:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24928:	b003      	add	sp, #12
   2492a:	bd30      	pop	{r4, r5, pc}
   2492c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24930:	4615      	mov	r5, r2
   24932:	e7d9      	b.n	248e8 <RNG_PLAT_SetUserRngParameters+0x24>
   24934:	00f00c37 	.word	0x00f00c37
   24938:	00f00c0e 	.word	0x00f00c0e

0002493c <CC_PalMemCopyPlat>:
   2493c:	f001 bf46 	b.w	267cc <memmove>

00024940 <CC_PalMemSetPlat>:
   24940:	f001 bf7e 	b.w	26840 <memset>

00024944 <CC_PalMemSetZeroPlat>:
   24944:	460a      	mov	r2, r1
   24946:	2100      	movs	r1, #0
   24948:	f001 bf7a 	b.w	26840 <memset>

0002494c <CC_PalTrngParamGet>:
   2494c:	b118      	cbz	r0, 24956 <CC_PalTrngParamGet+0xa>
   2494e:	b111      	cbz	r1, 24956 <CC_PalTrngParamGet+0xa>
   24950:	680b      	ldr	r3, [r1, #0]
   24952:	2b1c      	cmp	r3, #28
   24954:	d001      	beq.n	2495a <CC_PalTrngParamGet+0xe>
   24956:	2001      	movs	r0, #1
   24958:	4770      	bx	lr
   2495a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2495e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   24962:	3201      	adds	r2, #1
   24964:	bf14      	ite	ne
   24966:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   2496a:	f241 225c 	movweq	r2, #4700	; 0x125c
   2496e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24972:	6002      	str	r2, [r0, #0]
   24974:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   24978:	3201      	adds	r2, #1
   2497a:	bf14      	ite	ne
   2497c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   24980:	f641 1264 	movweq	r2, #6500	; 0x1964
   24984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24988:	6042      	str	r2, [r0, #4]
   2498a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   2498e:	3201      	adds	r2, #1
   24990:	bf14      	ite	ne
   24992:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   24996:	f640 62d8 	movweq	r2, #3800	; 0xed8
   2499a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2499e:	6082      	str	r2, [r0, #8]
   249a0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   249a4:	3201      	adds	r2, #1
   249a6:	bf14      	ite	ne
   249a8:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   249ac:	f241 3288 	movweq	r2, #5000	; 0x1388
   249b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   249b4:	60c2      	str	r2, [r0, #12]
   249b6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   249ba:	3201      	adds	r2, #1
   249bc:	bf14      	ite	ne
   249be:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   249c2:	2290      	moveq	r2, #144	; 0x90
   249c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   249c8:	6102      	str	r2, [r0, #16]
   249ca:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   249ce:	3201      	adds	r2, #1
   249d0:	bf14      	ite	ne
   249d2:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   249d6:	2251      	moveq	r2, #81	; 0x51
   249d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   249dc:	6142      	str	r2, [r0, #20]
   249de:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   249e2:	3201      	adds	r2, #1
   249e4:	bf14      	ite	ne
   249e6:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   249ea:	f240 3337 	movweq	r3, #823	; 0x337
   249ee:	6183      	str	r3, [r0, #24]
   249f0:	2000      	movs	r0, #0
   249f2:	4770      	bx	lr

000249f4 <LLF_RND_WaitRngInterrupt>:
   249f4:	b508      	push	{r3, lr}
   249f6:	4601      	mov	r1, r0
   249f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   249fc:	f7ff f95a 	bl	23cb4 <CC_HalWaitInterruptRND>
   24a00:	4902      	ldr	r1, [pc, #8]	; (24a0c <LLF_RND_WaitRngInterrupt+0x18>)
   24a02:	4a03      	ldr	r2, [pc, #12]	; (24a10 <LLF_RND_WaitRngInterrupt+0x1c>)
   24a04:	2300      	movs	r3, #0
   24a06:	600b      	str	r3, [r1, #0]
   24a08:	6013      	str	r3, [r2, #0]
   24a0a:	bd08      	pop	{r3, pc}
   24a0c:	5002b1c8 	.word	0x5002b1c8
   24a10:	5002b12c 	.word	0x5002b12c

00024a14 <LLF_RND_GetRoscSampleCnt>:
   24a14:	3801      	subs	r0, #1
   24a16:	2807      	cmp	r0, #7
   24a18:	d805      	bhi.n	24a26 <LLF_RND_GetRoscSampleCnt+0x12>
   24a1a:	e8df f000 	tbb	[pc, r0]
   24a1e:	0e0a      	.short	0x0e0a
   24a20:	04041204 	.word	0x04041204
   24a24:	0604      	.short	0x0604
   24a26:	4809      	ldr	r0, [pc, #36]	; (24a4c <LLF_RND_GetRoscSampleCnt+0x38>)
   24a28:	4770      	bx	lr
   24a2a:	68cb      	ldr	r3, [r1, #12]
   24a2c:	624b      	str	r3, [r1, #36]	; 0x24
   24a2e:	2000      	movs	r0, #0
   24a30:	4770      	bx	lr
   24a32:	680b      	ldr	r3, [r1, #0]
   24a34:	624b      	str	r3, [r1, #36]	; 0x24
   24a36:	2000      	movs	r0, #0
   24a38:	4770      	bx	lr
   24a3a:	684b      	ldr	r3, [r1, #4]
   24a3c:	624b      	str	r3, [r1, #36]	; 0x24
   24a3e:	2000      	movs	r0, #0
   24a40:	4770      	bx	lr
   24a42:	688b      	ldr	r3, [r1, #8]
   24a44:	624b      	str	r3, [r1, #36]	; 0x24
   24a46:	2000      	movs	r0, #0
   24a48:	4770      	bx	lr
   24a4a:	bf00      	nop
   24a4c:	00f10c31 	.word	0x00f10c31

00024a50 <LLF_RND_GetFastestRosc>:
   24a50:	680b      	ldr	r3, [r1, #0]
   24a52:	e002      	b.n	24a5a <LLF_RND_GetFastestRosc+0xa>
   24a54:	2b08      	cmp	r3, #8
   24a56:	600b      	str	r3, [r1, #0]
   24a58:	d806      	bhi.n	24a68 <LLF_RND_GetFastestRosc+0x18>
   24a5a:	6a02      	ldr	r2, [r0, #32]
   24a5c:	4213      	tst	r3, r2
   24a5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   24a62:	d0f7      	beq.n	24a54 <LLF_RND_GetFastestRosc+0x4>
   24a64:	2000      	movs	r0, #0
   24a66:	4770      	bx	lr
   24a68:	4800      	ldr	r0, [pc, #0]	; (24a6c <LLF_RND_GetFastestRosc+0x1c>)
   24a6a:	4770      	bx	lr
   24a6c:	00f10c31 	.word	0x00f10c31

00024a70 <LLF_RND_TurnOffTrng>:
   24a70:	4904      	ldr	r1, [pc, #16]	; (24a84 <LLF_RND_TurnOffTrng+0x14>)
   24a72:	4a05      	ldr	r2, [pc, #20]	; (24a88 <LLF_RND_TurnOffTrng+0x18>)
   24a74:	2300      	movs	r3, #0
   24a76:	600b      	str	r3, [r1, #0]
   24a78:	f44f 6080 	mov.w	r0, #1024	; 0x400
   24a7c:	6013      	str	r3, [r2, #0]
   24a7e:	f7ff b8ff 	b.w	23c80 <CC_HalClearInterruptBit>
   24a82:	bf00      	nop
   24a84:	5002b12c 	.word	0x5002b12c
   24a88:	5002b1c4 	.word	0x5002b1c4

00024a8c <SetDataBuffersInfo>:
   24a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24a8e:	b083      	sub	sp, #12
   24a90:	2400      	movs	r4, #0
   24a92:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   24a96:	f88d 4007 	strb.w	r4, [sp, #7]
   24a9a:	d325      	bcc.n	24ae8 <SetDataBuffersInfo+0x5c>
   24a9c:	460c      	mov	r4, r1
   24a9e:	4404      	add	r4, r0
   24aa0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   24aa4:	4605      	mov	r5, r0
   24aa6:	d81f      	bhi.n	24ae8 <SetDataBuffersInfo+0x5c>
   24aa8:	4617      	mov	r7, r2
   24aaa:	461e      	mov	r6, r3
   24aac:	2201      	movs	r2, #1
   24aae:	f10d 0307 	add.w	r3, sp, #7
   24ab2:	f000 fe7f 	bl	257b4 <CC_PalDataBufferAttrGet>
   24ab6:	4604      	mov	r4, r0
   24ab8:	b9b0      	cbnz	r0, 24ae8 <SetDataBuffersInfo+0x5c>
   24aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24ac0:	603d      	str	r5, [r7, #0]
   24ac2:	713b      	strb	r3, [r7, #4]
   24ac4:	b192      	cbz	r2, 24aec <SetDataBuffersInfo+0x60>
   24ac6:	b14e      	cbz	r6, 24adc <SetDataBuffersInfo+0x50>
   24ac8:	4602      	mov	r2, r0
   24aca:	9908      	ldr	r1, [sp, #32]
   24acc:	f10d 0307 	add.w	r3, sp, #7
   24ad0:	4630      	mov	r0, r6
   24ad2:	f000 fe6f 	bl	257b4 <CC_PalDataBufferAttrGet>
   24ad6:	b938      	cbnz	r0, 24ae8 <SetDataBuffersInfo+0x5c>
   24ad8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24ade:	4620      	mov	r0, r4
   24ae0:	6016      	str	r6, [r2, #0]
   24ae2:	7113      	strb	r3, [r2, #4]
   24ae4:	b003      	add	sp, #12
   24ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24ae8:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   24aec:	4620      	mov	r0, r4
   24aee:	b003      	add	sp, #12
   24af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24af2:	bf00      	nop

00024af4 <InitHashDrv>:
   24af4:	b1e8      	cbz	r0, 24b32 <InitHashDrv+0x3e>
   24af6:	b510      	push	{r4, lr}
   24af8:	6804      	ldr	r4, [r0, #0]
   24afa:	2c01      	cmp	r4, #1
   24afc:	d004      	beq.n	24b08 <InitHashDrv+0x14>
   24afe:	2c02      	cmp	r4, #2
   24b00:	d010      	beq.n	24b24 <InitHashDrv+0x30>
   24b02:	b144      	cbz	r4, 24b16 <InitHashDrv+0x22>
   24b04:	480c      	ldr	r0, [pc, #48]	; (24b38 <InitHashDrv+0x44>)
   24b06:	bd10      	pop	{r4, pc}
   24b08:	490c      	ldr	r1, [pc, #48]	; (24b3c <InitHashDrv+0x48>)
   24b0a:	2220      	movs	r2, #32
   24b0c:	3008      	adds	r0, #8
   24b0e:	f7ff ff15 	bl	2493c <CC_PalMemCopyPlat>
   24b12:	2000      	movs	r0, #0
   24b14:	bd10      	pop	{r4, pc}
   24b16:	490a      	ldr	r1, [pc, #40]	; (24b40 <InitHashDrv+0x4c>)
   24b18:	2214      	movs	r2, #20
   24b1a:	3008      	adds	r0, #8
   24b1c:	f7ff ff0e 	bl	2493c <CC_PalMemCopyPlat>
   24b20:	4620      	mov	r0, r4
   24b22:	bd10      	pop	{r4, pc}
   24b24:	4907      	ldr	r1, [pc, #28]	; (24b44 <InitHashDrv+0x50>)
   24b26:	2220      	movs	r2, #32
   24b28:	3008      	adds	r0, #8
   24b2a:	f7ff ff07 	bl	2493c <CC_PalMemCopyPlat>
   24b2e:	2000      	movs	r0, #0
   24b30:	bd10      	pop	{r4, pc}
   24b32:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   24b36:	4770      	bx	lr
   24b38:	00f30001 	.word	0x00f30001
   24b3c:	0002dde4 	.word	0x0002dde4
   24b40:	0002ddb0 	.word	0x0002ddb0
   24b44:	0002ddc4 	.word	0x0002ddc4

00024b48 <ProcessHashDrv>:
   24b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b4c:	2900      	cmp	r1, #0
   24b4e:	f000 80ef 	beq.w	24d30 <ProcessHashDrv+0x1e8>
   24b52:	4604      	mov	r4, r0
   24b54:	2800      	cmp	r0, #0
   24b56:	f000 80ef 	beq.w	24d38 <ProcessHashDrv+0x1f0>
   24b5a:	6803      	ldr	r3, [r0, #0]
   24b5c:	4617      	mov	r7, r2
   24b5e:	460e      	mov	r6, r1
   24b60:	2b00      	cmp	r3, #0
   24b62:	f000 80b9 	beq.w	24cd8 <ProcessHashDrv+0x190>
   24b66:	3b01      	subs	r3, #1
   24b68:	2b01      	cmp	r3, #1
   24b6a:	f200 80cd 	bhi.w	24d08 <ProcessHashDrv+0x1c0>
   24b6e:	4874      	ldr	r0, [pc, #464]	; (24d40 <ProcessHashDrv+0x1f8>)
   24b70:	f04f 31ff 	mov.w	r1, #4294967295
   24b74:	f04f 0802 	mov.w	r8, #2
   24b78:	f7ff f92a 	bl	23dd0 <CC_PalMutexLock>
   24b7c:	2800      	cmp	r0, #0
   24b7e:	f040 80b5 	bne.w	24cec <ProcessHashDrv+0x1a4>
   24b82:	2000      	movs	r0, #0
   24b84:	f7ff f954 	bl	23e30 <CC_PalPowerSaveModeSelect>
   24b88:	4605      	mov	r5, r0
   24b8a:	2800      	cmp	r0, #0
   24b8c:	f040 80b8 	bne.w	24d00 <ProcessHashDrv+0x1b8>
   24b90:	4a6c      	ldr	r2, [pc, #432]	; (24d44 <ProcessHashDrv+0x1fc>)
   24b92:	6813      	ldr	r3, [r2, #0]
   24b94:	2b00      	cmp	r3, #0
   24b96:	d1fc      	bne.n	24b92 <ProcessHashDrv+0x4a>
   24b98:	486b      	ldr	r0, [pc, #428]	; (24d48 <ProcessHashDrv+0x200>)
   24b9a:	6803      	ldr	r3, [r0, #0]
   24b9c:	2b00      	cmp	r3, #0
   24b9e:	d1fc      	bne.n	24b9a <ProcessHashDrv+0x52>
   24ba0:	f04f 30ff 	mov.w	r0, #4294967295
   24ba4:	f7ff f86c 	bl	23c80 <CC_HalClearInterruptBit>
   24ba8:	4b68      	ldr	r3, [pc, #416]	; (24d4c <ProcessHashDrv+0x204>)
   24baa:	6818      	ldr	r0, [r3, #0]
   24bac:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   24bb0:	f7ff f874 	bl	23c9c <CC_HalMaskInterrupt>
   24bb4:	4866      	ldr	r0, [pc, #408]	; (24d50 <ProcessHashDrv+0x208>)
   24bb6:	4a67      	ldr	r2, [pc, #412]	; (24d54 <ProcessHashDrv+0x20c>)
   24bb8:	4967      	ldr	r1, [pc, #412]	; (24d58 <ProcessHashDrv+0x210>)
   24bba:	2301      	movs	r3, #1
   24bbc:	6003      	str	r3, [r0, #0]
   24bbe:	2007      	movs	r0, #7
   24bc0:	6010      	str	r0, [r2, #0]
   24bc2:	600b      	str	r3, [r1, #0]
   24bc4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   24bc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   24bca:	6013      	str	r3, [r2, #0]
   24bcc:	4b63      	ldr	r3, [pc, #396]	; (24d5c <ProcessHashDrv+0x214>)
   24bce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   24bd0:	6051      	str	r1, [r2, #4]
   24bd2:	f8c3 8000 	str.w	r8, [r3]
   24bd6:	6823      	ldr	r3, [r4, #0]
   24bd8:	b15b      	cbz	r3, 24bf2 <ProcessHashDrv+0xaa>
   24bda:	3b01      	subs	r3, #1
   24bdc:	2b01      	cmp	r3, #1
   24bde:	d817      	bhi.n	24c10 <ProcessHashDrv+0xc8>
   24be0:	4b5f      	ldr	r3, [pc, #380]	; (24d60 <ProcessHashDrv+0x218>)
   24be2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   24be4:	601a      	str	r2, [r3, #0]
   24be6:	6a22      	ldr	r2, [r4, #32]
   24be8:	f843 2c04 	str.w	r2, [r3, #-4]
   24bec:	69e2      	ldr	r2, [r4, #28]
   24bee:	f843 2c08 	str.w	r2, [r3, #-8]
   24bf2:	4b5c      	ldr	r3, [pc, #368]	; (24d64 <ProcessHashDrv+0x21c>)
   24bf4:	69a2      	ldr	r2, [r4, #24]
   24bf6:	601a      	str	r2, [r3, #0]
   24bf8:	6962      	ldr	r2, [r4, #20]
   24bfa:	f843 2c04 	str.w	r2, [r3, #-4]
   24bfe:	6922      	ldr	r2, [r4, #16]
   24c00:	f843 2c08 	str.w	r2, [r3, #-8]
   24c04:	68e2      	ldr	r2, [r4, #12]
   24c06:	f843 2c0c 	str.w	r2, [r3, #-12]
   24c0a:	68a2      	ldr	r2, [r4, #8]
   24c0c:	f843 2c10 	str.w	r2, [r3, #-16]
   24c10:	4a55      	ldr	r2, [pc, #340]	; (24d68 <ProcessHashDrv+0x220>)
   24c12:	6813      	ldr	r3, [r2, #0]
   24c14:	2b00      	cmp	r3, #0
   24c16:	d1fc      	bne.n	24c12 <ProcessHashDrv+0xca>
   24c18:	2f00      	cmp	r7, #0
   24c1a:	d059      	beq.n	24cd0 <ProcessHashDrv+0x188>
   24c1c:	6863      	ldr	r3, [r4, #4]
   24c1e:	2b01      	cmp	r3, #1
   24c20:	bf04      	itt	eq
   24c22:	4a52      	ldreq	r2, [pc, #328]	; (24d6c <ProcessHashDrv+0x224>)
   24c24:	6013      	streq	r3, [r2, #0]
   24c26:	4a52      	ldr	r2, [pc, #328]	; (24d70 <ProcessHashDrv+0x228>)
   24c28:	4b52      	ldr	r3, [pc, #328]	; (24d74 <ProcessHashDrv+0x22c>)
   24c2a:	6831      	ldr	r1, [r6, #0]
   24c2c:	6011      	str	r1, [r2, #0]
   24c2e:	2040      	movs	r0, #64	; 0x40
   24c30:	601f      	str	r7, [r3, #0]
   24c32:	f7ff f839 	bl	23ca8 <CC_HalWaitInterrupt>
   24c36:	4605      	mov	r5, r0
   24c38:	4a4b      	ldr	r2, [pc, #300]	; (24d68 <ProcessHashDrv+0x220>)
   24c3a:	6813      	ldr	r3, [r2, #0]
   24c3c:	2b00      	cmp	r3, #0
   24c3e:	d1fc      	bne.n	24c3a <ProcessHashDrv+0xf2>
   24c40:	4a41      	ldr	r2, [pc, #260]	; (24d48 <ProcessHashDrv+0x200>)
   24c42:	6813      	ldr	r3, [r2, #0]
   24c44:	2b00      	cmp	r3, #0
   24c46:	d1fc      	bne.n	24c42 <ProcessHashDrv+0xfa>
   24c48:	6823      	ldr	r3, [r4, #0]
   24c4a:	b15b      	cbz	r3, 24c64 <ProcessHashDrv+0x11c>
   24c4c:	3b01      	subs	r3, #1
   24c4e:	2b01      	cmp	r3, #1
   24c50:	d817      	bhi.n	24c82 <ProcessHashDrv+0x13a>
   24c52:	4a43      	ldr	r2, [pc, #268]	; (24d60 <ProcessHashDrv+0x218>)
   24c54:	4b48      	ldr	r3, [pc, #288]	; (24d78 <ProcessHashDrv+0x230>)
   24c56:	6812      	ldr	r2, [r2, #0]
   24c58:	6262      	str	r2, [r4, #36]	; 0x24
   24c5a:	681a      	ldr	r2, [r3, #0]
   24c5c:	6222      	str	r2, [r4, #32]
   24c5e:	3b04      	subs	r3, #4
   24c60:	681b      	ldr	r3, [r3, #0]
   24c62:	61e3      	str	r3, [r4, #28]
   24c64:	4a3f      	ldr	r2, [pc, #252]	; (24d64 <ProcessHashDrv+0x21c>)
   24c66:	4b45      	ldr	r3, [pc, #276]	; (24d7c <ProcessHashDrv+0x234>)
   24c68:	6812      	ldr	r2, [r2, #0]
   24c6a:	61a2      	str	r2, [r4, #24]
   24c6c:	681a      	ldr	r2, [r3, #0]
   24c6e:	6162      	str	r2, [r4, #20]
   24c70:	f853 2c04 	ldr.w	r2, [r3, #-4]
   24c74:	6122      	str	r2, [r4, #16]
   24c76:	f853 2c08 	ldr.w	r2, [r3, #-8]
   24c7a:	60e2      	str	r2, [r4, #12]
   24c7c:	3b0c      	subs	r3, #12
   24c7e:	681b      	ldr	r3, [r3, #0]
   24c80:	60a3      	str	r3, [r4, #8]
   24c82:	4b3f      	ldr	r3, [pc, #252]	; (24d80 <ProcessHashDrv+0x238>)
   24c84:	4a3f      	ldr	r2, [pc, #252]	; (24d84 <ProcessHashDrv+0x23c>)
   24c86:	681b      	ldr	r3, [r3, #0]
   24c88:	64a3      	str	r3, [r4, #72]	; 0x48
   24c8a:	6812      	ldr	r2, [r2, #0]
   24c8c:	4b32      	ldr	r3, [pc, #200]	; (24d58 <ProcessHashDrv+0x210>)
   24c8e:	64e2      	str	r2, [r4, #76]	; 0x4c
   24c90:	4836      	ldr	r0, [pc, #216]	; (24d6c <ProcessHashDrv+0x224>)
   24c92:	493d      	ldr	r1, [pc, #244]	; (24d88 <ProcessHashDrv+0x240>)
   24c94:	2201      	movs	r2, #1
   24c96:	601a      	str	r2, [r3, #0]
   24c98:	2300      	movs	r3, #0
   24c9a:	4a33      	ldr	r2, [pc, #204]	; (24d68 <ProcessHashDrv+0x220>)
   24c9c:	6003      	str	r3, [r0, #0]
   24c9e:	600b      	str	r3, [r1, #0]
   24ca0:	6813      	ldr	r3, [r2, #0]
   24ca2:	2b00      	cmp	r3, #0
   24ca4:	d1fc      	bne.n	24ca0 <ProcessHashDrv+0x158>
   24ca6:	4a2a      	ldr	r2, [pc, #168]	; (24d50 <ProcessHashDrv+0x208>)
   24ca8:	6013      	str	r3, [r2, #0]
   24caa:	2d00      	cmp	r5, #0
   24cac:	d13a      	bne.n	24d24 <ProcessHashDrv+0x1dc>
   24cae:	4b27      	ldr	r3, [pc, #156]	; (24d4c <ProcessHashDrv+0x204>)
   24cb0:	6818      	ldr	r0, [r3, #0]
   24cb2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   24cb6:	f7fe fff1 	bl	23c9c <CC_HalMaskInterrupt>
   24cba:	2001      	movs	r0, #1
   24cbc:	f7ff f8b8 	bl	23e30 <CC_PalPowerSaveModeSelect>
   24cc0:	bb60      	cbnz	r0, 24d1c <ProcessHashDrv+0x1d4>
   24cc2:	481f      	ldr	r0, [pc, #124]	; (24d40 <ProcessHashDrv+0x1f8>)
   24cc4:	f7ff f88c 	bl	23de0 <CC_PalMutexUnlock>
   24cc8:	bb10      	cbnz	r0, 24d10 <ProcessHashDrv+0x1c8>
   24cca:	4628      	mov	r0, r5
   24ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24cd0:	4b2d      	ldr	r3, [pc, #180]	; (24d88 <ProcessHashDrv+0x240>)
   24cd2:	2204      	movs	r2, #4
   24cd4:	601a      	str	r2, [r3, #0]
   24cd6:	e7af      	b.n	24c38 <ProcessHashDrv+0xf0>
   24cd8:	4819      	ldr	r0, [pc, #100]	; (24d40 <ProcessHashDrv+0x1f8>)
   24cda:	f04f 31ff 	mov.w	r1, #4294967295
   24cde:	f04f 0801 	mov.w	r8, #1
   24ce2:	f7ff f875 	bl	23dd0 <CC_PalMutexLock>
   24ce6:	2800      	cmp	r0, #0
   24ce8:	f43f af4b 	beq.w	24b82 <ProcessHashDrv+0x3a>
   24cec:	4827      	ldr	r0, [pc, #156]	; (24d8c <ProcessHashDrv+0x244>)
   24cee:	f7fe f923 	bl	22f38 <CC_PalAbort>
   24cf2:	2000      	movs	r0, #0
   24cf4:	f7ff f89c 	bl	23e30 <CC_PalPowerSaveModeSelect>
   24cf8:	4605      	mov	r5, r0
   24cfa:	2800      	cmp	r0, #0
   24cfc:	f43f af48 	beq.w	24b90 <ProcessHashDrv+0x48>
   24d00:	4823      	ldr	r0, [pc, #140]	; (24d90 <ProcessHashDrv+0x248>)
   24d02:	f7fe f919 	bl	22f38 <CC_PalAbort>
   24d06:	e743      	b.n	24b90 <ProcessHashDrv+0x48>
   24d08:	4d22      	ldr	r5, [pc, #136]	; (24d94 <ProcessHashDrv+0x24c>)
   24d0a:	4628      	mov	r0, r5
   24d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24d10:	4821      	ldr	r0, [pc, #132]	; (24d98 <ProcessHashDrv+0x250>)
   24d12:	f7fe f911 	bl	22f38 <CC_PalAbort>
   24d16:	4628      	mov	r0, r5
   24d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24d1c:	481f      	ldr	r0, [pc, #124]	; (24d9c <ProcessHashDrv+0x254>)
   24d1e:	f7fe f90b 	bl	22f38 <CC_PalAbort>
   24d22:	e7ce      	b.n	24cc2 <ProcessHashDrv+0x17a>
   24d24:	f104 0008 	add.w	r0, r4, #8
   24d28:	2110      	movs	r1, #16
   24d2a:	f7ff fe0b 	bl	24944 <CC_PalMemSetZeroPlat>
   24d2e:	e7be      	b.n	24cae <ProcessHashDrv+0x166>
   24d30:	4d1b      	ldr	r5, [pc, #108]	; (24da0 <ProcessHashDrv+0x258>)
   24d32:	4628      	mov	r0, r5
   24d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24d38:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   24d3c:	e7c5      	b.n	24cca <ProcessHashDrv+0x182>
   24d3e:	bf00      	nop
   24d40:	200006a0 	.word	0x200006a0
   24d44:	5002b91c 	.word	0x5002b91c
   24d48:	5002bc20 	.word	0x5002bc20
   24d4c:	5002ba04 	.word	0x5002ba04
   24d50:	5002b818 	.word	0x5002b818
   24d54:	5002b900 	.word	0x5002b900
   24d58:	5002b7c4 	.word	0x5002b7c4
   24d5c:	5002b7c0 	.word	0x5002b7c0
   24d60:	5002b65c 	.word	0x5002b65c
   24d64:	5002b650 	.word	0x5002b650
   24d68:	5002b910 	.word	0x5002b910
   24d6c:	5002b684 	.word	0x5002b684
   24d70:	5002bc28 	.word	0x5002bc28
   24d74:	5002bc2c 	.word	0x5002bc2c
   24d78:	5002b658 	.word	0x5002b658
   24d7c:	5002b64c 	.word	0x5002b64c
   24d80:	5002b7cc 	.word	0x5002b7cc
   24d84:	5002b7d0 	.word	0x5002b7d0
   24d88:	5002b7c8 	.word	0x5002b7c8
   24d8c:	0002dce4 	.word	0x0002dce4
   24d90:	0002dcfc 	.word	0x0002dcfc
   24d94:	00f30001 	.word	0x00f30001
   24d98:	0002dd3c 	.word	0x0002dd3c
   24d9c:	0002dd1c 	.word	0x0002dd1c
   24da0:	00f30003 	.word	0x00f30003

00024da4 <FinishHashDrv>:
   24da4:	2800      	cmp	r0, #0
   24da6:	d03b      	beq.n	24e20 <FinishHashDrv+0x7c>
   24da8:	b4f0      	push	{r4, r5, r6, r7}
   24daa:	b082      	sub	sp, #8
   24dac:	6a43      	ldr	r3, [r0, #36]	; 0x24
   24dae:	9301      	str	r3, [sp, #4]
   24db0:	6883      	ldr	r3, [r0, #8]
   24db2:	fa93 fc83 	rev.w	ip, r3
   24db6:	9b01      	ldr	r3, [sp, #4]
   24db8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   24dbc:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   24dc0:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   24dc4:	ba1b      	rev	r3, r3
   24dc6:	6243      	str	r3, [r0, #36]	; 0x24
   24dc8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   24dca:	9301      	str	r3, [sp, #4]
   24dcc:	ba09      	rev	r1, r1
   24dce:	6a83      	ldr	r3, [r0, #40]	; 0x28
   24dd0:	61c1      	str	r1, [r0, #28]
   24dd2:	ba12      	rev	r2, r2
   24dd4:	6202      	str	r2, [r0, #32]
   24dd6:	ba3f      	rev	r7, r7
   24dd8:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   24ddc:	ba36      	rev	r6, r6
   24dde:	ba2d      	rev	r5, r5
   24de0:	ba24      	rev	r4, r4
   24de2:	e9c0 c702 	strd	ip, r7, [r0, #8]
   24de6:	e9c0 6504 	strd	r6, r5, [r0, #16]
   24dea:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   24dec:	6b06      	ldr	r6, [r0, #48]	; 0x30
   24dee:	6b45      	ldr	r5, [r0, #52]	; 0x34
   24df0:	6184      	str	r4, [r0, #24]
   24df2:	fa93 fc83 	rev.w	ip, r3
   24df6:	6b84      	ldr	r4, [r0, #56]	; 0x38
   24df8:	9b01      	ldr	r3, [sp, #4]
   24dfa:	ba3f      	rev	r7, r7
   24dfc:	ba36      	rev	r6, r6
   24dfe:	ba2d      	rev	r5, r5
   24e00:	ba24      	rev	r4, r4
   24e02:	ba09      	rev	r1, r1
   24e04:	ba12      	rev	r2, r2
   24e06:	ba1b      	rev	r3, r3
   24e08:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   24e0c:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   24e10:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   24e14:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   24e18:	2000      	movs	r0, #0
   24e1a:	b002      	add	sp, #8
   24e1c:	bcf0      	pop	{r4, r5, r6, r7}
   24e1e:	4770      	bx	lr
   24e20:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   24e24:	4770      	bx	lr
   24e26:	bf00      	nop

00024e28 <LoadAesKey>:
   24e28:	2800      	cmp	r0, #0
   24e2a:	d03b      	beq.n	24ea4 <LoadAesKey+0x7c>
   24e2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   24e30:	2b00      	cmp	r3, #0
   24e32:	d02c      	beq.n	24e8e <LoadAesKey+0x66>
   24e34:	2b03      	cmp	r3, #3
   24e36:	b510      	push	{r4, lr}
   24e38:	d00f      	beq.n	24e5a <LoadAesKey+0x32>
   24e3a:	481c      	ldr	r0, [pc, #112]	; (24eac <LoadAesKey+0x84>)
   24e3c:	4c1c      	ldr	r4, [pc, #112]	; (24eb0 <LoadAesKey+0x88>)
   24e3e:	6822      	ldr	r2, [r4, #0]
   24e40:	4b1c      	ldr	r3, [pc, #112]	; (24eb4 <LoadAesKey+0x8c>)
   24e42:	6812      	ldr	r2, [r2, #0]
   24e44:	601a      	str	r2, [r3, #0]
   24e46:	6822      	ldr	r2, [r4, #0]
   24e48:	6852      	ldr	r2, [r2, #4]
   24e4a:	605a      	str	r2, [r3, #4]
   24e4c:	6822      	ldr	r2, [r4, #0]
   24e4e:	6892      	ldr	r2, [r2, #8]
   24e50:	609a      	str	r2, [r3, #8]
   24e52:	6822      	ldr	r2, [r4, #0]
   24e54:	68d2      	ldr	r2, [r2, #12]
   24e56:	60da      	str	r2, [r3, #12]
   24e58:	bd10      	pop	{r4, pc}
   24e5a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   24e5c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   24e5e:	4c14      	ldr	r4, [pc, #80]	; (24eb0 <LoadAesKey+0x88>)
   24e60:	f000 fba4 	bl	255ac <kmu_validate_kdr_slot_and_size>
   24e64:	2800      	cmp	r0, #0
   24e66:	d1ea      	bne.n	24e3e <LoadAesKey+0x16>
   24e68:	6821      	ldr	r1, [r4, #0]
   24e6a:	4a12      	ldr	r2, [pc, #72]	; (24eb4 <LoadAesKey+0x8c>)
   24e6c:	6809      	ldr	r1, [r1, #0]
   24e6e:	6011      	str	r1, [r2, #0]
   24e70:	6821      	ldr	r1, [r4, #0]
   24e72:	4b11      	ldr	r3, [pc, #68]	; (24eb8 <LoadAesKey+0x90>)
   24e74:	6849      	ldr	r1, [r1, #4]
   24e76:	6019      	str	r1, [r3, #0]
   24e78:	6821      	ldr	r1, [r4, #0]
   24e7a:	6889      	ldr	r1, [r1, #8]
   24e7c:	6091      	str	r1, [r2, #8]
   24e7e:	6822      	ldr	r2, [r4, #0]
   24e80:	68d2      	ldr	r2, [r2, #12]
   24e82:	609a      	str	r2, [r3, #8]
   24e84:	f000 fb9e 	bl	255c4 <kmu_use_kdr_key>
   24e88:	2800      	cmp	r0, #0
   24e8a:	d1d8      	bne.n	24e3e <LoadAesKey+0x16>
   24e8c:	bd10      	pop	{r4, pc}
   24e8e:	4a09      	ldr	r2, [pc, #36]	; (24eb4 <LoadAesKey+0x8c>)
   24e90:	6901      	ldr	r1, [r0, #16]
   24e92:	6011      	str	r1, [r2, #0]
   24e94:	6941      	ldr	r1, [r0, #20]
   24e96:	6051      	str	r1, [r2, #4]
   24e98:	6981      	ldr	r1, [r0, #24]
   24e9a:	6091      	str	r1, [r2, #8]
   24e9c:	69c1      	ldr	r1, [r0, #28]
   24e9e:	60d1      	str	r1, [r2, #12]
   24ea0:	4618      	mov	r0, r3
   24ea2:	4770      	bx	lr
   24ea4:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   24ea8:	4770      	bx	lr
   24eaa:	bf00      	nop
   24eac:	00f10009 	.word	0x00f10009
   24eb0:	20000690 	.word	0x20000690
   24eb4:	5002b400 	.word	0x5002b400
   24eb8:	5002b404 	.word	0x5002b404

00024ebc <InitAes.part.0>:
   24ebc:	4a32      	ldr	r2, [pc, #200]	; (24f88 <InitAes.part.0+0xcc>)
   24ebe:	b510      	push	{r4, lr}
   24ec0:	4604      	mov	r4, r0
   24ec2:	6813      	ldr	r3, [r2, #0]
   24ec4:	2b00      	cmp	r3, #0
   24ec6:	d1fc      	bne.n	24ec2 <InitAes.part.0+0x6>
   24ec8:	4a30      	ldr	r2, [pc, #192]	; (24f8c <InitAes.part.0+0xd0>)
   24eca:	6813      	ldr	r3, [r2, #0]
   24ecc:	2b00      	cmp	r3, #0
   24ece:	d1fc      	bne.n	24eca <InitAes.part.0+0xe>
   24ed0:	4a2f      	ldr	r2, [pc, #188]	; (24f90 <InitAes.part.0+0xd4>)
   24ed2:	6813      	ldr	r3, [r2, #0]
   24ed4:	2b00      	cmp	r3, #0
   24ed6:	d1fc      	bne.n	24ed2 <InitAes.part.0+0x16>
   24ed8:	4a2e      	ldr	r2, [pc, #184]	; (24f94 <InitAes.part.0+0xd8>)
   24eda:	6813      	ldr	r3, [r2, #0]
   24edc:	2b00      	cmp	r3, #0
   24ede:	d1fc      	bne.n	24eda <InitAes.part.0+0x1e>
   24ee0:	4a2d      	ldr	r2, [pc, #180]	; (24f98 <InitAes.part.0+0xdc>)
   24ee2:	6813      	ldr	r3, [r2, #0]
   24ee4:	2b00      	cmp	r3, #0
   24ee6:	d1fc      	bne.n	24ee2 <InitAes.part.0+0x26>
   24ee8:	4a2c      	ldr	r2, [pc, #176]	; (24f9c <InitAes.part.0+0xe0>)
   24eea:	6813      	ldr	r3, [r2, #0]
   24eec:	2b00      	cmp	r3, #0
   24eee:	d1fc      	bne.n	24eea <InitAes.part.0+0x2e>
   24ef0:	f04f 30ff 	mov.w	r0, #4294967295
   24ef4:	f7fe fec4 	bl	23c80 <CC_HalClearInterruptBit>
   24ef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24efa:	f023 0304 	bic.w	r3, r3, #4
   24efe:	2b03      	cmp	r3, #3
   24f00:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   24f02:	d036      	beq.n	24f72 <InitAes.part.0+0xb6>
   24f04:	2b01      	cmp	r3, #1
   24f06:	4b26      	ldr	r3, [pc, #152]	; (24fa0 <InitAes.part.0+0xe4>)
   24f08:	6818      	ldr	r0, [r3, #0]
   24f0a:	bf0c      	ite	eq
   24f0c:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   24f10:	f020 0020 	bicne.w	r0, r0, #32
   24f14:	f7fe fec2 	bl	23c9c <CC_HalMaskInterrupt>
   24f18:	4b22      	ldr	r3, [pc, #136]	; (24fa4 <InitAes.part.0+0xe8>)
   24f1a:	4a1b      	ldr	r2, [pc, #108]	; (24f88 <InitAes.part.0+0xcc>)
   24f1c:	2101      	movs	r1, #1
   24f1e:	6019      	str	r1, [r3, #0]
   24f20:	6813      	ldr	r3, [r2, #0]
   24f22:	2b00      	cmp	r3, #0
   24f24:	d1fc      	bne.n	24f20 <InitAes.part.0+0x64>
   24f26:	4a19      	ldr	r2, [pc, #100]	; (24f8c <InitAes.part.0+0xd0>)
   24f28:	6813      	ldr	r3, [r2, #0]
   24f2a:	2b00      	cmp	r3, #0
   24f2c:	d1fc      	bne.n	24f28 <InitAes.part.0+0x6c>
   24f2e:	491e      	ldr	r1, [pc, #120]	; (24fa8 <InitAes.part.0+0xec>)
   24f30:	4a15      	ldr	r2, [pc, #84]	; (24f88 <InitAes.part.0+0xcc>)
   24f32:	600b      	str	r3, [r1, #0]
   24f34:	6813      	ldr	r3, [r2, #0]
   24f36:	2b00      	cmp	r3, #0
   24f38:	d1fc      	bne.n	24f34 <InitAes.part.0+0x78>
   24f3a:	4a14      	ldr	r2, [pc, #80]	; (24f8c <InitAes.part.0+0xd0>)
   24f3c:	6813      	ldr	r3, [r2, #0]
   24f3e:	2b00      	cmp	r3, #0
   24f40:	d1fc      	bne.n	24f3c <InitAes.part.0+0x80>
   24f42:	6b62      	ldr	r2, [r4, #52]	; 0x34
   24f44:	f022 0104 	bic.w	r1, r2, #4
   24f48:	2903      	cmp	r1, #3
   24f4a:	bf18      	it	ne
   24f4c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   24f4e:	4917      	ldr	r1, [pc, #92]	; (24fac <InitAes.part.0+0xf0>)
   24f50:	ea4f 0282 	mov.w	r2, r2, lsl #2
   24f54:	bf18      	it	ne
   24f56:	f003 0301 	andne.w	r3, r3, #1
   24f5a:	f002 021c 	and.w	r2, r2, #28
   24f5e:	4313      	orrs	r3, r2
   24f60:	600b      	str	r3, [r1, #0]
   24f62:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24f64:	2b07      	cmp	r3, #7
   24f66:	d102      	bne.n	24f6e <InitAes.part.0+0xb2>
   24f68:	4b11      	ldr	r3, [pc, #68]	; (24fb0 <InitAes.part.0+0xf4>)
   24f6a:	2201      	movs	r2, #1
   24f6c:	601a      	str	r2, [r3, #0]
   24f6e:	2000      	movs	r0, #0
   24f70:	bd10      	pop	{r4, pc}
   24f72:	2b01      	cmp	r3, #1
   24f74:	4b0a      	ldr	r3, [pc, #40]	; (24fa0 <InitAes.part.0+0xe4>)
   24f76:	6818      	ldr	r0, [r3, #0]
   24f78:	bf0c      	ite	eq
   24f7a:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   24f7e:	f020 0010 	bicne.w	r0, r0, #16
   24f82:	f7fe fe8b 	bl	23c9c <CC_HalMaskInterrupt>
   24f86:	e7c7      	b.n	24f18 <InitAes.part.0+0x5c>
   24f88:	5002b910 	.word	0x5002b910
   24f8c:	5002b470 	.word	0x5002b470
   24f90:	5002bd20 	.word	0x5002bd20
   24f94:	5002bc20 	.word	0x5002bc20
   24f98:	5002bd38 	.word	0x5002bd38
   24f9c:	5002bc38 	.word	0x5002bc38
   24fa0:	5002ba04 	.word	0x5002ba04
   24fa4:	5002b900 	.word	0x5002b900
   24fa8:	5002b4bc 	.word	0x5002b4bc
   24fac:	5002b4c0 	.word	0x5002b4c0
   24fb0:	5002b47c 	.word	0x5002b47c

00024fb4 <ProcessAesDrv>:
   24fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24fb8:	b087      	sub	sp, #28
   24fba:	2900      	cmp	r1, #0
   24fbc:	f000 80a5 	beq.w	2510a <ProcessAesDrv+0x156>
   24fc0:	4616      	mov	r6, r2
   24fc2:	2a00      	cmp	r2, #0
   24fc4:	f000 80a1 	beq.w	2510a <ProcessAesDrv+0x156>
   24fc8:	4604      	mov	r4, r0
   24fca:	2800      	cmp	r0, #0
   24fcc:	f000 813f 	beq.w	2524e <ProcessAesDrv+0x29a>
   24fd0:	461f      	mov	r7, r3
   24fd2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   24fd4:	460d      	mov	r5, r1
   24fd6:	2b00      	cmp	r3, #0
   24fd8:	d150      	bne.n	2507c <ProcessAesDrv+0xc8>
   24fda:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   24fde:	d252      	bcs.n	25086 <ProcessAesDrv+0xd2>
   24fe0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   24fe4:	2b04      	cmp	r3, #4
   24fe6:	f000 8109 	beq.w	251fc <ProcessAesDrv+0x248>
   24fea:	f04f 0800 	mov.w	r8, #0
   24fee:	48aa      	ldr	r0, [pc, #680]	; (25298 <ProcessAesDrv+0x2e4>)
   24ff0:	f04f 31ff 	mov.w	r1, #4294967295
   24ff4:	f7fe feec 	bl	23dd0 <CC_PalMutexLock>
   24ff8:	2800      	cmp	r0, #0
   24ffa:	f040 80de 	bne.w	251ba <ProcessAesDrv+0x206>
   24ffe:	2000      	movs	r0, #0
   25000:	f7fe ff16 	bl	23e30 <CC_PalPowerSaveModeSelect>
   25004:	2800      	cmp	r0, #0
   25006:	f040 80e1 	bne.w	251cc <ProcessAesDrv+0x218>
   2500a:	4ba4      	ldr	r3, [pc, #656]	; (2529c <ProcessAesDrv+0x2e8>)
   2500c:	4aa4      	ldr	r2, [pc, #656]	; (252a0 <ProcessAesDrv+0x2ec>)
   2500e:	2101      	movs	r1, #1
   25010:	6019      	str	r1, [r3, #0]
   25012:	6813      	ldr	r3, [r2, #0]
   25014:	2b00      	cmp	r3, #0
   25016:	d1fc      	bne.n	25012 <ProcessAesDrv+0x5e>
   25018:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2501a:	2b03      	cmp	r3, #3
   2501c:	dc39      	bgt.n	25092 <ProcessAesDrv+0xde>
   2501e:	2b00      	cmp	r3, #0
   25020:	da3a      	bge.n	25098 <ProcessAesDrv+0xe4>
   25022:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 252ec <ProcessAesDrv+0x338>
   25026:	4a9e      	ldr	r2, [pc, #632]	; (252a0 <ProcessAesDrv+0x2ec>)
   25028:	6813      	ldr	r3, [r2, #0]
   2502a:	2b00      	cmp	r3, #0
   2502c:	d1fc      	bne.n	25028 <ProcessAesDrv+0x74>
   2502e:	f1b8 0f00 	cmp.w	r8, #0
   25032:	f040 80da 	bne.w	251ea <ProcessAesDrv+0x236>
   25036:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25038:	f023 0304 	bic.w	r3, r3, #4
   2503c:	2b03      	cmp	r3, #3
   2503e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   25040:	d058      	beq.n	250f4 <ProcessAesDrv+0x140>
   25042:	2b01      	cmp	r3, #1
   25044:	4b97      	ldr	r3, [pc, #604]	; (252a4 <ProcessAesDrv+0x2f0>)
   25046:	6818      	ldr	r0, [r3, #0]
   25048:	bf0c      	ite	eq
   2504a:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   2504e:	f040 0020 	orrne.w	r0, r0, #32
   25052:	f7fe fe23 	bl	23c9c <CC_HalMaskInterrupt>
   25056:	4b91      	ldr	r3, [pc, #580]	; (2529c <ProcessAesDrv+0x2e8>)
   25058:	2200      	movs	r2, #0
   2505a:	601a      	str	r2, [r3, #0]
   2505c:	2001      	movs	r0, #1
   2505e:	f7fe fee7 	bl	23e30 <CC_PalPowerSaveModeSelect>
   25062:	2800      	cmp	r0, #0
   25064:	f040 80bd 	bne.w	251e2 <ProcessAesDrv+0x22e>
   25068:	488b      	ldr	r0, [pc, #556]	; (25298 <ProcessAesDrv+0x2e4>)
   2506a:	f7fe feb9 	bl	23de0 <CC_PalMutexUnlock>
   2506e:	2800      	cmp	r0, #0
   25070:	f040 80b0 	bne.w	251d4 <ProcessAesDrv+0x220>
   25074:	4648      	mov	r0, r9
   25076:	b007      	add	sp, #28
   25078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2507c:	2b01      	cmp	r3, #1
   2507e:	d1af      	bne.n	24fe0 <ProcessAesDrv+0x2c>
   25080:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   25084:	d3ac      	bcc.n	24fe0 <ProcessAesDrv+0x2c>
   25086:	f8df 9268 	ldr.w	r9, [pc, #616]	; 252f0 <ProcessAesDrv+0x33c>
   2508a:	4648      	mov	r0, r9
   2508c:	b007      	add	sp, #28
   2508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25092:	3b06      	subs	r3, #6
   25094:	2b01      	cmp	r3, #1
   25096:	d8c4      	bhi.n	25022 <ProcessAesDrv+0x6e>
   25098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2509a:	2b01      	cmp	r3, #1
   2509c:	f200 80d4 	bhi.w	25248 <ProcessAesDrv+0x294>
   250a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   250a2:	2b01      	cmp	r3, #1
   250a4:	d837      	bhi.n	25116 <ProcessAesDrv+0x162>
   250a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   250a8:	2b01      	cmp	r3, #1
   250aa:	f200 8131 	bhi.w	25310 <ProcessAesDrv+0x35c>
   250ae:	4620      	mov	r0, r4
   250b0:	f7ff ff04 	bl	24ebc <InitAes.part.0>
   250b4:	4681      	mov	r9, r0
   250b6:	2800      	cmp	r0, #0
   250b8:	d1b5      	bne.n	25026 <ProcessAesDrv+0x72>
   250ba:	4620      	mov	r0, r4
   250bc:	f7ff feb4 	bl	24e28 <LoadAesKey>
   250c0:	4681      	mov	r9, r0
   250c2:	2800      	cmp	r0, #0
   250c4:	d1af      	bne.n	25026 <ProcessAesDrv+0x72>
   250c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   250c8:	2b07      	cmp	r3, #7
   250ca:	d8aa      	bhi.n	25022 <ProcessAesDrv+0x6e>
   250cc:	a201      	add	r2, pc, #4	; (adr r2, 250d4 <ProcessAesDrv+0x120>)
   250ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   250d2:	bf00      	nop
   250d4:	00025131 	.word	0x00025131
   250d8:	0002511d 	.word	0x0002511d
   250dc:	0002528d 	.word	0x0002528d
   250e0:	0002511d 	.word	0x0002511d
   250e4:	00025023 	.word	0x00025023
   250e8:	00025023 	.word	0x00025023
   250ec:	0002528d 	.word	0x0002528d
   250f0:	0002511d 	.word	0x0002511d
   250f4:	2b01      	cmp	r3, #1
   250f6:	4b6b      	ldr	r3, [pc, #428]	; (252a4 <ProcessAesDrv+0x2f0>)
   250f8:	6818      	ldr	r0, [r3, #0]
   250fa:	bf0c      	ite	eq
   250fc:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   25100:	f040 0010 	orrne.w	r0, r0, #16
   25104:	f7fe fdca 	bl	23c9c <CC_HalMaskInterrupt>
   25108:	e7a5      	b.n	25056 <ProcessAesDrv+0xa2>
   2510a:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 252f4 <ProcessAesDrv+0x340>
   2510e:	4648      	mov	r0, r9
   25110:	b007      	add	sp, #28
   25112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25116:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 252f8 <ProcessAesDrv+0x344>
   2511a:	e784      	b.n	25026 <ProcessAesDrv+0x72>
   2511c:	4b62      	ldr	r3, [pc, #392]	; (252a8 <ProcessAesDrv+0x2f4>)
   2511e:	6822      	ldr	r2, [r4, #0]
   25120:	601a      	str	r2, [r3, #0]
   25122:	6862      	ldr	r2, [r4, #4]
   25124:	605a      	str	r2, [r3, #4]
   25126:	68a2      	ldr	r2, [r4, #8]
   25128:	609a      	str	r2, [r3, #8]
   2512a:	68e2      	ldr	r2, [r4, #12]
   2512c:	60da      	str	r2, [r3, #12]
   2512e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25130:	682a      	ldr	r2, [r5, #0]
   25132:	f023 0304 	bic.w	r3, r3, #4
   25136:	2b03      	cmp	r3, #3
   25138:	d009      	beq.n	2514e <ProcessAesDrv+0x19a>
   2513a:	6e21      	ldr	r1, [r4, #96]	; 0x60
   2513c:	6833      	ldr	r3, [r6, #0]
   2513e:	2901      	cmp	r1, #1
   25140:	bf07      	ittee	eq
   25142:	485a      	ldreq	r0, [pc, #360]	; (252ac <ProcessAesDrv+0x2f8>)
   25144:	495a      	ldreq	r1, [pc, #360]	; (252b0 <ProcessAesDrv+0x2fc>)
   25146:	485b      	ldrne	r0, [pc, #364]	; (252b4 <ProcessAesDrv+0x300>)
   25148:	495b      	ldrne	r1, [pc, #364]	; (252b8 <ProcessAesDrv+0x304>)
   2514a:	6003      	str	r3, [r0, #0]
   2514c:	600f      	str	r7, [r1, #0]
   2514e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   25150:	2b01      	cmp	r3, #1
   25152:	bf0b      	itete	eq
   25154:	4b59      	ldreq	r3, [pc, #356]	; (252bc <ProcessAesDrv+0x308>)
   25156:	4b5a      	ldrne	r3, [pc, #360]	; (252c0 <ProcessAesDrv+0x30c>)
   25158:	495a      	ldreq	r1, [pc, #360]	; (252c4 <ProcessAesDrv+0x310>)
   2515a:	495b      	ldrne	r1, [pc, #364]	; (252c8 <ProcessAesDrv+0x314>)
   2515c:	600a      	str	r2, [r1, #0]
   2515e:	601f      	str	r7, [r3, #0]
   25160:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25162:	f023 0304 	bic.w	r3, r3, #4
   25166:	2b03      	cmp	r3, #3
   25168:	d074      	beq.n	25254 <ProcessAesDrv+0x2a0>
   2516a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2516c:	2b01      	cmp	r3, #1
   2516e:	bf0c      	ite	eq
   25170:	2080      	moveq	r0, #128	; 0x80
   25172:	2020      	movne	r0, #32
   25174:	f7fe fd98 	bl	23ca8 <CC_HalWaitInterrupt>
   25178:	4681      	mov	r9, r0
   2517a:	2800      	cmp	r0, #0
   2517c:	f47f af53 	bne.w	25026 <ProcessAesDrv+0x72>
   25180:	4b47      	ldr	r3, [pc, #284]	; (252a0 <ProcessAesDrv+0x2ec>)
   25182:	681a      	ldr	r2, [r3, #0]
   25184:	2a00      	cmp	r2, #0
   25186:	d1fc      	bne.n	25182 <ProcessAesDrv+0x1ce>
   25188:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2518a:	3b01      	subs	r3, #1
   2518c:	4691      	mov	r9, r2
   2518e:	2b06      	cmp	r3, #6
   25190:	d810      	bhi.n	251b4 <ProcessAesDrv+0x200>
   25192:	e8df f003 	tbb	[pc, r3]
   25196:	7d04      	.short	0x7d04
   25198:	7d0f0f04 	.word	0x7d0f0f04
   2519c:	04          	.byte	0x04
   2519d:	00          	.byte	0x00
   2519e:	4a42      	ldr	r2, [pc, #264]	; (252a8 <ProcessAesDrv+0x2f4>)
   251a0:	4b4a      	ldr	r3, [pc, #296]	; (252cc <ProcessAesDrv+0x318>)
   251a2:	6812      	ldr	r2, [r2, #0]
   251a4:	6022      	str	r2, [r4, #0]
   251a6:	681a      	ldr	r2, [r3, #0]
   251a8:	6062      	str	r2, [r4, #4]
   251aa:	685a      	ldr	r2, [r3, #4]
   251ac:	60a2      	str	r2, [r4, #8]
   251ae:	3308      	adds	r3, #8
   251b0:	681b      	ldr	r3, [r3, #0]
   251b2:	60e3      	str	r3, [r4, #12]
   251b4:	2301      	movs	r3, #1
   251b6:	65a3      	str	r3, [r4, #88]	; 0x58
   251b8:	e735      	b.n	25026 <ProcessAesDrv+0x72>
   251ba:	4845      	ldr	r0, [pc, #276]	; (252d0 <ProcessAesDrv+0x31c>)
   251bc:	f7fd febc 	bl	22f38 <CC_PalAbort>
   251c0:	2000      	movs	r0, #0
   251c2:	f7fe fe35 	bl	23e30 <CC_PalPowerSaveModeSelect>
   251c6:	2800      	cmp	r0, #0
   251c8:	f43f af1f 	beq.w	2500a <ProcessAesDrv+0x56>
   251cc:	4841      	ldr	r0, [pc, #260]	; (252d4 <ProcessAesDrv+0x320>)
   251ce:	f7fd feb3 	bl	22f38 <CC_PalAbort>
   251d2:	e71a      	b.n	2500a <ProcessAesDrv+0x56>
   251d4:	4840      	ldr	r0, [pc, #256]	; (252d8 <ProcessAesDrv+0x324>)
   251d6:	f7fd feaf 	bl	22f38 <CC_PalAbort>
   251da:	4648      	mov	r0, r9
   251dc:	b007      	add	sp, #28
   251de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   251e2:	483e      	ldr	r0, [pc, #248]	; (252dc <ProcessAesDrv+0x328>)
   251e4:	f7fd fea8 	bl	22f38 <CC_PalAbort>
   251e8:	e73e      	b.n	25068 <ProcessAesDrv+0xb4>
   251ea:	2304      	movs	r3, #4
   251ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   251f0:	2120      	movs	r1, #32
   251f2:	f104 0010 	add.w	r0, r4, #16
   251f6:	f7ff fba5 	bl	24944 <CC_PalMemSetZeroPlat>
   251fa:	e71c      	b.n	25036 <ProcessAesDrv+0x82>
   251fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   251fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
   25200:	f000 f9c8 	bl	25594 <kmu_validate_slot_and_size>
   25204:	b9e8      	cbnz	r0, 25242 <ProcessAesDrv+0x28e>
   25206:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 252fc <ProcessAesDrv+0x348>
   2520a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 25300 <ProcessAesDrv+0x34c>
   2520e:	f8d8 3000 	ldr.w	r3, [r8]
   25212:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 25304 <ProcessAesDrv+0x350>
   25216:	681b      	ldr	r3, [r3, #0]
   25218:	f8cb 3000 	str.w	r3, [fp]
   2521c:	f8d8 3000 	ldr.w	r3, [r8]
   25220:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 25308 <ProcessAesDrv+0x354>
   25224:	685b      	ldr	r3, [r3, #4]
   25226:	f8ca 3000 	str.w	r3, [sl]
   2522a:	f8d8 3000 	ldr.w	r3, [r8]
   2522e:	4a2c      	ldr	r2, [pc, #176]	; (252e0 <ProcessAesDrv+0x32c>)
   25230:	689b      	ldr	r3, [r3, #8]
   25232:	f8c9 3000 	str.w	r3, [r9]
   25236:	f8d8 3000 	ldr.w	r3, [r8]
   2523a:	68db      	ldr	r3, [r3, #12]
   2523c:	6013      	str	r3, [r2, #0]
   2523e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   25240:	b171      	cbz	r1, 25260 <ProcessAesDrv+0x2ac>
   25242:	f04f 0801 	mov.w	r8, #1
   25246:	e6d2      	b.n	24fee <ProcessAesDrv+0x3a>
   25248:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 2530c <ProcessAesDrv+0x358>
   2524c:	e6eb      	b.n	25026 <ProcessAesDrv+0x72>
   2524e:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   25252:	e70f      	b.n	25074 <ProcessAesDrv+0xc0>
   25254:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   25256:	2b01      	cmp	r3, #1
   25258:	bf0c      	ite	eq
   2525a:	2040      	moveq	r0, #64	; 0x40
   2525c:	2010      	movne	r0, #16
   2525e:	e789      	b.n	25174 <ProcessAesDrv+0x1c0>
   25260:	f104 0310 	add.w	r3, r4, #16
   25264:	4618      	mov	r0, r3
   25266:	9305      	str	r3, [sp, #20]
   25268:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   2526c:	e9cd 3200 	strd	r3, r2, [sp]
   25270:	9002      	str	r0, [sp, #8]
   25272:	2010      	movs	r0, #16
   25274:	9003      	str	r0, [sp, #12]
   25276:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   2527a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2527c:	f000 f9ae 	bl	255dc <kmu_derive_cmac>
   25280:	2800      	cmp	r0, #0
   25282:	d148      	bne.n	25316 <ProcessAesDrv+0x362>
   25284:	2300      	movs	r3, #0
   25286:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   2528a:	e7da      	b.n	25242 <ProcessAesDrv+0x28e>
   2528c:	4b15      	ldr	r3, [pc, #84]	; (252e4 <ProcessAesDrv+0x330>)
   2528e:	e746      	b.n	2511e <ProcessAesDrv+0x16a>
   25290:	4a14      	ldr	r2, [pc, #80]	; (252e4 <ProcessAesDrv+0x330>)
   25292:	4b15      	ldr	r3, [pc, #84]	; (252e8 <ProcessAesDrv+0x334>)
   25294:	e785      	b.n	251a2 <ProcessAesDrv+0x1ee>
   25296:	bf00      	nop
   25298:	200006a0 	.word	0x200006a0
   2529c:	5002b810 	.word	0x5002b810
   252a0:	5002b910 	.word	0x5002b910
   252a4:	5002ba04 	.word	0x5002ba04
   252a8:	5002b440 	.word	0x5002b440
   252ac:	5002bd28 	.word	0x5002bd28
   252b0:	5002bd2c 	.word	0x5002bd2c
   252b4:	5002bd30 	.word	0x5002bd30
   252b8:	5002bd34 	.word	0x5002bd34
   252bc:	5002bc2c 	.word	0x5002bc2c
   252c0:	5002bc34 	.word	0x5002bc34
   252c4:	5002bc28 	.word	0x5002bc28
   252c8:	5002bc30 	.word	0x5002bc30
   252cc:	5002b444 	.word	0x5002b444
   252d0:	0002dce4 	.word	0x0002dce4
   252d4:	0002dcfc 	.word	0x0002dcfc
   252d8:	0002dd3c 	.word	0x0002dd3c
   252dc:	0002dd1c 	.word	0x0002dd1c
   252e0:	5002b40c 	.word	0x5002b40c
   252e4:	5002b460 	.word	0x5002b460
   252e8:	5002b464 	.word	0x5002b464
   252ec:	00f10001 	.word	0x00f10001
   252f0:	00f10005 	.word	0x00f10005
   252f4:	00f1000b 	.word	0x00f1000b
   252f8:	00f10003 	.word	0x00f10003
   252fc:	20000690 	.word	0x20000690
   25300:	5002b400 	.word	0x5002b400
   25304:	5002b404 	.word	0x5002b404
   25308:	5002b408 	.word	0x5002b408
   2530c:	00f10002 	.word	0x00f10002
   25310:	f8df 9038 	ldr.w	r9, [pc, #56]	; 2534c <ProcessAesDrv+0x398>
   25314:	e687      	b.n	25026 <ProcessAesDrv+0x72>
   25316:	f8d8 3000 	ldr.w	r3, [r8]
   2531a:	4a0b      	ldr	r2, [pc, #44]	; (25348 <ProcessAesDrv+0x394>)
   2531c:	681b      	ldr	r3, [r3, #0]
   2531e:	f8cb 3000 	str.w	r3, [fp]
   25322:	f8d8 3000 	ldr.w	r3, [r8]
   25326:	685b      	ldr	r3, [r3, #4]
   25328:	f8ca 3000 	str.w	r3, [sl]
   2532c:	f8d8 3000 	ldr.w	r3, [r8]
   25330:	689b      	ldr	r3, [r3, #8]
   25332:	f8c9 3000 	str.w	r3, [r9]
   25336:	f8d8 3000 	ldr.w	r3, [r8]
   2533a:	68db      	ldr	r3, [r3, #12]
   2533c:	6013      	str	r3, [r2, #0]
   2533e:	9805      	ldr	r0, [sp, #20]
   25340:	2110      	movs	r1, #16
   25342:	f7ff faff 	bl	24944 <CC_PalMemSetZeroPlat>
   25346:	e79d      	b.n	25284 <ProcessAesDrv+0x2d0>
   25348:	5002b40c 	.word	0x5002b40c
   2534c:	00f10004 	.word	0x00f10004

00025350 <FinishAesDrv>:
   25350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25354:	b301      	cbz	r1, 25398 <FinishAesDrv+0x48>
   25356:	b1fa      	cbz	r2, 25398 <FinishAesDrv+0x48>
   25358:	4604      	mov	r4, r0
   2535a:	2800      	cmp	r0, #0
   2535c:	d07a      	beq.n	25454 <FinishAesDrv+0x104>
   2535e:	461d      	mov	r5, r3
   25360:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25362:	2b07      	cmp	r3, #7
   25364:	460e      	mov	r6, r1
   25366:	d01b      	beq.n	253a0 <FinishAesDrv+0x50>
   25368:	b95d      	cbnz	r5, 25382 <FinishAesDrv+0x32>
   2536a:	2b03      	cmp	r3, #3
   2536c:	d110      	bne.n	25390 <FinishAesDrv+0x40>
   2536e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   25370:	b973      	cbnz	r3, 25390 <FinishAesDrv+0x40>
   25372:	f100 0364 	add.w	r3, r0, #100	; 0x64
   25376:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2537a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   2537e:	600b      	str	r3, [r1, #0]
   25380:	2510      	movs	r5, #16
   25382:	462b      	mov	r3, r5
   25384:	4631      	mov	r1, r6
   25386:	4620      	mov	r0, r4
   25388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2538c:	f7ff be12 	b.w	24fb4 <ProcessAesDrv>
   25390:	462f      	mov	r7, r5
   25392:	4638      	mov	r0, r7
   25394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25398:	4f66      	ldr	r7, [pc, #408]	; (25534 <FinishAesDrv+0x1e4>)
   2539a:	4638      	mov	r0, r7
   2539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   253a0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   253a2:	2b00      	cmp	r3, #0
   253a4:	d159      	bne.n	2545a <FinishAesDrv+0x10a>
   253a6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   253aa:	d25b      	bcs.n	25464 <FinishAesDrv+0x114>
   253ac:	b915      	cbnz	r5, 253b4 <FinishAesDrv+0x64>
   253ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
   253b0:	2b00      	cmp	r3, #0
   253b2:	d157      	bne.n	25464 <FinishAesDrv+0x114>
   253b4:	4860      	ldr	r0, [pc, #384]	; (25538 <FinishAesDrv+0x1e8>)
   253b6:	f04f 31ff 	mov.w	r1, #4294967295
   253ba:	f7fe fd09 	bl	23dd0 <CC_PalMutexLock>
   253be:	2800      	cmp	r0, #0
   253c0:	f040 8097 	bne.w	254f2 <FinishAesDrv+0x1a2>
   253c4:	2000      	movs	r0, #0
   253c6:	f7fe fd33 	bl	23e30 <CC_PalPowerSaveModeSelect>
   253ca:	2800      	cmp	r0, #0
   253cc:	f040 808d 	bne.w	254ea <FinishAesDrv+0x19a>
   253d0:	4b5a      	ldr	r3, [pc, #360]	; (2553c <FinishAesDrv+0x1ec>)
   253d2:	4a5b      	ldr	r2, [pc, #364]	; (25540 <FinishAesDrv+0x1f0>)
   253d4:	2101      	movs	r1, #1
   253d6:	6019      	str	r1, [r3, #0]
   253d8:	6813      	ldr	r3, [r2, #0]
   253da:	2b00      	cmp	r3, #0
   253dc:	d1fc      	bne.n	253d8 <FinishAesDrv+0x88>
   253de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   253e0:	2b03      	cmp	r3, #3
   253e2:	dd20      	ble.n	25426 <FinishAesDrv+0xd6>
   253e4:	3b06      	subs	r3, #6
   253e6:	2b01      	cmp	r3, #1
   253e8:	d81f      	bhi.n	2542a <FinishAesDrv+0xda>
   253ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   253ec:	2b01      	cmp	r3, #1
   253ee:	d83b      	bhi.n	25468 <FinishAesDrv+0x118>
   253f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   253f2:	2b01      	cmp	r3, #1
   253f4:	f200 8085 	bhi.w	25502 <FinishAesDrv+0x1b2>
   253f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   253fa:	2b01      	cmp	r3, #1
   253fc:	f200 8083 	bhi.w	25506 <FinishAesDrv+0x1b6>
   25400:	4620      	mov	r0, r4
   25402:	f7ff fd5b 	bl	24ebc <InitAes.part.0>
   25406:	4607      	mov	r7, r0
   25408:	b980      	cbnz	r0, 2542c <FinishAesDrv+0xdc>
   2540a:	4620      	mov	r0, r4
   2540c:	f7ff fd0c 	bl	24e28 <LoadAesKey>
   25410:	4607      	mov	r7, r0
   25412:	b958      	cbnz	r0, 2542c <FinishAesDrv+0xdc>
   25414:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25416:	2b07      	cmp	r3, #7
   25418:	d807      	bhi.n	2542a <FinishAesDrv+0xda>
   2541a:	e8df f003 	tbb	[pc, r3]
   2541e:	2730      	.short	0x2730
   25420:	06062755 	.word	0x06062755
   25424:	2755      	.short	0x2755
   25426:	2b00      	cmp	r3, #0
   25428:	dadf      	bge.n	253ea <FinishAesDrv+0x9a>
   2542a:	4f46      	ldr	r7, [pc, #280]	; (25544 <FinishAesDrv+0x1f4>)
   2542c:	4a44      	ldr	r2, [pc, #272]	; (25540 <FinishAesDrv+0x1f0>)
   2542e:	6813      	ldr	r3, [r2, #0]
   25430:	2b00      	cmp	r3, #0
   25432:	d1fc      	bne.n	2542e <FinishAesDrv+0xde>
   25434:	4a41      	ldr	r2, [pc, #260]	; (2553c <FinishAesDrv+0x1ec>)
   25436:	2001      	movs	r0, #1
   25438:	6013      	str	r3, [r2, #0]
   2543a:	f7fe fcf9 	bl	23e30 <CC_PalPowerSaveModeSelect>
   2543e:	2800      	cmp	r0, #0
   25440:	d15b      	bne.n	254fa <FinishAesDrv+0x1aa>
   25442:	483d      	ldr	r0, [pc, #244]	; (25538 <FinishAesDrv+0x1e8>)
   25444:	f7fe fccc 	bl	23de0 <CC_PalMutexUnlock>
   25448:	2800      	cmp	r0, #0
   2544a:	d0a2      	beq.n	25392 <FinishAesDrv+0x42>
   2544c:	483e      	ldr	r0, [pc, #248]	; (25548 <FinishAesDrv+0x1f8>)
   2544e:	f7fd fd73 	bl	22f38 <CC_PalAbort>
   25452:	e79e      	b.n	25392 <FinishAesDrv+0x42>
   25454:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   25458:	e79b      	b.n	25392 <FinishAesDrv+0x42>
   2545a:	2b01      	cmp	r3, #1
   2545c:	d1a6      	bne.n	253ac <FinishAesDrv+0x5c>
   2545e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   25462:	d3a3      	bcc.n	253ac <FinishAesDrv+0x5c>
   25464:	4f39      	ldr	r7, [pc, #228]	; (2554c <FinishAesDrv+0x1fc>)
   25466:	e794      	b.n	25392 <FinishAesDrv+0x42>
   25468:	4f39      	ldr	r7, [pc, #228]	; (25550 <FinishAesDrv+0x200>)
   2546a:	e7df      	b.n	2542c <FinishAesDrv+0xdc>
   2546c:	4b39      	ldr	r3, [pc, #228]	; (25554 <FinishAesDrv+0x204>)
   2546e:	6822      	ldr	r2, [r4, #0]
   25470:	601a      	str	r2, [r3, #0]
   25472:	6862      	ldr	r2, [r4, #4]
   25474:	605a      	str	r2, [r3, #4]
   25476:	68a2      	ldr	r2, [r4, #8]
   25478:	609a      	str	r2, [r3, #8]
   2547a:	68e2      	ldr	r2, [r4, #12]
   2547c:	60da      	str	r2, [r3, #12]
   2547e:	4936      	ldr	r1, [pc, #216]	; (25558 <FinishAesDrv+0x208>)
   25480:	4a36      	ldr	r2, [pc, #216]	; (2555c <FinishAesDrv+0x20c>)
   25482:	2301      	movs	r3, #1
   25484:	600b      	str	r3, [r1, #0]
   25486:	6015      	str	r5, [r2, #0]
   25488:	2d00      	cmp	r5, #0
   2548a:	d13e      	bne.n	2550a <FinishAesDrv+0x1ba>
   2548c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   2548e:	b90a      	cbnz	r2, 25494 <FinishAesDrv+0x144>
   25490:	4a33      	ldr	r2, [pc, #204]	; (25560 <FinishAesDrv+0x210>)
   25492:	6013      	str	r3, [r2, #0]
   25494:	4b2a      	ldr	r3, [pc, #168]	; (25540 <FinishAesDrv+0x1f0>)
   25496:	681f      	ldr	r7, [r3, #0]
   25498:	2f00      	cmp	r7, #0
   2549a:	d1fc      	bne.n	25496 <FinishAesDrv+0x146>
   2549c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2549e:	3b01      	subs	r3, #1
   254a0:	2b06      	cmp	r3, #6
   254a2:	d8c3      	bhi.n	2542c <FinishAesDrv+0xdc>
   254a4:	a201      	add	r2, pc, #4	; (adr r2, 254ac <FinishAesDrv+0x15c>)
   254a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   254aa:	bf00      	nop
   254ac:	000254cd 	.word	0x000254cd
   254b0:	000254e5 	.word	0x000254e5
   254b4:	000254cd 	.word	0x000254cd
   254b8:	0002542d 	.word	0x0002542d
   254bc:	0002542d 	.word	0x0002542d
   254c0:	000254e5 	.word	0x000254e5
   254c4:	000254cd 	.word	0x000254cd
   254c8:	4b26      	ldr	r3, [pc, #152]	; (25564 <FinishAesDrv+0x214>)
   254ca:	e7d0      	b.n	2546e <FinishAesDrv+0x11e>
   254cc:	4a21      	ldr	r2, [pc, #132]	; (25554 <FinishAesDrv+0x204>)
   254ce:	4b26      	ldr	r3, [pc, #152]	; (25568 <FinishAesDrv+0x218>)
   254d0:	6812      	ldr	r2, [r2, #0]
   254d2:	6022      	str	r2, [r4, #0]
   254d4:	681a      	ldr	r2, [r3, #0]
   254d6:	6062      	str	r2, [r4, #4]
   254d8:	685a      	ldr	r2, [r3, #4]
   254da:	60a2      	str	r2, [r4, #8]
   254dc:	3308      	adds	r3, #8
   254de:	681b      	ldr	r3, [r3, #0]
   254e0:	60e3      	str	r3, [r4, #12]
   254e2:	e7a3      	b.n	2542c <FinishAesDrv+0xdc>
   254e4:	4a1f      	ldr	r2, [pc, #124]	; (25564 <FinishAesDrv+0x214>)
   254e6:	4b21      	ldr	r3, [pc, #132]	; (2556c <FinishAesDrv+0x21c>)
   254e8:	e7f2      	b.n	254d0 <FinishAesDrv+0x180>
   254ea:	4821      	ldr	r0, [pc, #132]	; (25570 <FinishAesDrv+0x220>)
   254ec:	f7fd fd24 	bl	22f38 <CC_PalAbort>
   254f0:	e76e      	b.n	253d0 <FinishAesDrv+0x80>
   254f2:	4820      	ldr	r0, [pc, #128]	; (25574 <FinishAesDrv+0x224>)
   254f4:	f7fd fd20 	bl	22f38 <CC_PalAbort>
   254f8:	e764      	b.n	253c4 <FinishAesDrv+0x74>
   254fa:	481f      	ldr	r0, [pc, #124]	; (25578 <FinishAesDrv+0x228>)
   254fc:	f7fd fd1c 	bl	22f38 <CC_PalAbort>
   25500:	e79f      	b.n	25442 <FinishAesDrv+0xf2>
   25502:	4f1e      	ldr	r7, [pc, #120]	; (2557c <FinishAesDrv+0x22c>)
   25504:	e792      	b.n	2542c <FinishAesDrv+0xdc>
   25506:	4f1e      	ldr	r7, [pc, #120]	; (25580 <FinishAesDrv+0x230>)
   25508:	e790      	b.n	2542c <FinishAesDrv+0xdc>
   2550a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   2550c:	6833      	ldr	r3, [r6, #0]
   2550e:	2a01      	cmp	r2, #1
   25510:	d00a      	beq.n	25528 <FinishAesDrv+0x1d8>
   25512:	491c      	ldr	r1, [pc, #112]	; (25584 <FinishAesDrv+0x234>)
   25514:	4a1c      	ldr	r2, [pc, #112]	; (25588 <FinishAesDrv+0x238>)
   25516:	600b      	str	r3, [r1, #0]
   25518:	2010      	movs	r0, #16
   2551a:	6015      	str	r5, [r2, #0]
   2551c:	f7fe fbc4 	bl	23ca8 <CC_HalWaitInterrupt>
   25520:	4607      	mov	r7, r0
   25522:	2800      	cmp	r0, #0
   25524:	d0b6      	beq.n	25494 <FinishAesDrv+0x144>
   25526:	e781      	b.n	2542c <FinishAesDrv+0xdc>
   25528:	4918      	ldr	r1, [pc, #96]	; (2558c <FinishAesDrv+0x23c>)
   2552a:	4a19      	ldr	r2, [pc, #100]	; (25590 <FinishAesDrv+0x240>)
   2552c:	600b      	str	r3, [r1, #0]
   2552e:	2040      	movs	r0, #64	; 0x40
   25530:	6015      	str	r5, [r2, #0]
   25532:	e7f3      	b.n	2551c <FinishAesDrv+0x1cc>
   25534:	00f1000b 	.word	0x00f1000b
   25538:	200006a0 	.word	0x200006a0
   2553c:	5002b810 	.word	0x5002b810
   25540:	5002b910 	.word	0x5002b910
   25544:	00f10001 	.word	0x00f10001
   25548:	0002dd3c 	.word	0x0002dd3c
   2554c:	00f10005 	.word	0x00f10005
   25550:	00f10002 	.word	0x00f10002
   25554:	5002b440 	.word	0x5002b440
   25558:	5002b47c 	.word	0x5002b47c
   2555c:	5002b4bc 	.word	0x5002b4bc
   25560:	5002b524 	.word	0x5002b524
   25564:	5002b460 	.word	0x5002b460
   25568:	5002b444 	.word	0x5002b444
   2556c:	5002b464 	.word	0x5002b464
   25570:	0002dcfc 	.word	0x0002dcfc
   25574:	0002dce4 	.word	0x0002dce4
   25578:	0002dd1c 	.word	0x0002dd1c
   2557c:	00f10003 	.word	0x00f10003
   25580:	00f10004 	.word	0x00f10004
   25584:	5002bc30 	.word	0x5002bc30
   25588:	5002bc34 	.word	0x5002bc34
   2558c:	5002bc28 	.word	0x5002bc28
   25590:	5002bc2c 	.word	0x5002bc2c

00025594 <kmu_validate_slot_and_size>:
   25594:	b921      	cbnz	r1, 255a0 <kmu_validate_slot_and_size+0xc>
   25596:	4b03      	ldr	r3, [pc, #12]	; (255a4 <kmu_validate_slot_and_size+0x10>)
   25598:	2800      	cmp	r0, #0
   2559a:	bf18      	it	ne
   2559c:	4618      	movne	r0, r3
   2559e:	4770      	bx	lr
   255a0:	4801      	ldr	r0, [pc, #4]	; (255a8 <kmu_validate_slot_and_size+0x14>)
   255a2:	4770      	bx	lr
   255a4:	00f70001 	.word	0x00f70001
   255a8:	00f70003 	.word	0x00f70003

000255ac <kmu_validate_kdr_slot_and_size>:
   255ac:	b921      	cbnz	r1, 255b8 <kmu_validate_kdr_slot_and_size+0xc>
   255ae:	4b03      	ldr	r3, [pc, #12]	; (255bc <kmu_validate_kdr_slot_and_size+0x10>)
   255b0:	2800      	cmp	r0, #0
   255b2:	bf18      	it	ne
   255b4:	4618      	movne	r0, r3
   255b6:	4770      	bx	lr
   255b8:	4801      	ldr	r0, [pc, #4]	; (255c0 <kmu_validate_kdr_slot_and_size+0x14>)
   255ba:	4770      	bx	lr
   255bc:	00f70001 	.word	0x00f70001
   255c0:	00f70003 	.word	0x00f70003

000255c4 <kmu_use_kdr_key>:
   255c4:	4903      	ldr	r1, [pc, #12]	; (255d4 <kmu_use_kdr_key+0x10>)
   255c6:	4b04      	ldr	r3, [pc, #16]	; (255d8 <kmu_use_kdr_key+0x14>)
   255c8:	2000      	movs	r0, #0
   255ca:	2201      	movs	r2, #1
   255cc:	6008      	str	r0, [r1, #0]
   255ce:	601a      	str	r2, [r3, #0]
   255d0:	4770      	bx	lr
   255d2:	bf00      	nop
   255d4:	5002ba38 	.word	0x5002ba38
   255d8:	5002b478 	.word	0x5002b478

000255dc <kmu_derive_cmac>:
   255dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255e0:	b0cd      	sub	sp, #308	; 0x134
   255e2:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   255e6:	460f      	mov	r7, r1
   255e8:	2100      	movs	r1, #0
   255ea:	460c      	mov	r4, r1
   255ec:	4681      	mov	r9, r0
   255ee:	4616      	mov	r6, r2
   255f0:	a80e      	add	r0, sp, #56	; 0x38
   255f2:	2274      	movs	r2, #116	; 0x74
   255f4:	469b      	mov	fp, r3
   255f6:	f001 f923 	bl	26840 <memset>
   255fa:	4621      	mov	r1, r4
   255fc:	2280      	movs	r2, #128	; 0x80
   255fe:	a82c      	add	r0, sp, #176	; 0xb0
   25600:	942b      	str	r4, [sp, #172]	; 0xac
   25602:	f001 f91d 	bl	26840 <memset>
   25606:	2384      	movs	r3, #132	; 0x84
   25608:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2560c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   25610:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   25614:	9305      	str	r3, [sp, #20]
   25616:	d860      	bhi.n	256da <kmu_derive_cmac+0xfe>
   25618:	ab05      	add	r3, sp, #20
   2561a:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   2561e:	9301      	str	r3, [sp, #4]
   25620:	9502      	str	r5, [sp, #8]
   25622:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   25626:	4659      	mov	r1, fp
   25628:	4630      	mov	r0, r6
   2562a:	f8cd a000 	str.w	sl, [sp]
   2562e:	f000 f865 	bl	256fc <UtilCmacBuildDataForDerivation>
   25632:	2800      	cmp	r0, #0
   25634:	d14c      	bne.n	256d0 <kmu_derive_cmac+0xf4>
   25636:	2303      	movs	r3, #3
   25638:	f88d 3013 	strb.w	r3, [sp, #19]
   2563c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   25640:	901c      	str	r0, [sp, #112]	; 0x70
   25642:	2200      	movs	r2, #0
   25644:	2110      	movs	r1, #16
   25646:	a80e      	add	r0, sp, #56	; 0x38
   25648:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   2564c:	2607      	movs	r6, #7
   2564e:	2301      	movs	r3, #1
   25650:	2401      	movs	r4, #1
   25652:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   25656:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   2565a:	971a      	str	r7, [sp, #104]	; 0x68
   2565c:	961b      	str	r6, [sp, #108]	; 0x6c
   2565e:	9426      	str	r4, [sp, #152]	; 0x98
   25660:	f10d 0920 	add.w	r9, sp, #32
   25664:	f7ff f96e 	bl	24944 <CC_PalMemSetZeroPlat>
   25668:	2110      	movs	r1, #16
   2566a:	e9cd 1900 	strd	r1, r9, [sp]
   2566e:	ab0a      	add	r3, sp, #40	; 0x28
   25670:	9905      	ldr	r1, [sp, #20]
   25672:	4650      	mov	r0, sl
   25674:	aa06      	add	r2, sp, #24
   25676:	f7ff fa09 	bl	24a8c <SetDataBuffersInfo>
   2567a:	4607      	mov	r7, r0
   2567c:	b150      	cbz	r0, 25694 <kmu_derive_cmac+0xb8>
   2567e:	e01e      	b.n	256be <kmu_derive_cmac+0xe2>
   25680:	f7ff f95c 	bl	2493c <CC_PalMemCopyPlat>
   25684:	2110      	movs	r1, #16
   25686:	a80e      	add	r0, sp, #56	; 0x38
   25688:	f7ff f95c 	bl	24944 <CC_PalMemSetZeroPlat>
   2568c:	3401      	adds	r4, #1
   2568e:	1bad      	subs	r5, r5, r6
   25690:	b2e4      	uxtb	r4, r4
   25692:	d027      	beq.n	256e4 <kmu_derive_cmac+0x108>
   25694:	9b05      	ldr	r3, [sp, #20]
   25696:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2569a:	2d10      	cmp	r5, #16
   2569c:	464a      	mov	r2, r9
   2569e:	a906      	add	r1, sp, #24
   256a0:	a80e      	add	r0, sp, #56	; 0x38
   256a2:	462e      	mov	r6, r5
   256a4:	bf28      	it	cs
   256a6:	2610      	movcs	r6, #16
   256a8:	f7ff fe52 	bl	25350 <FinishAesDrv>
   256ac:	4603      	mov	r3, r0
   256ae:	4632      	mov	r2, r6
   256b0:	eb08 0007 	add.w	r0, r8, r7
   256b4:	a90e      	add	r1, sp, #56	; 0x38
   256b6:	4437      	add	r7, r6
   256b8:	2b00      	cmp	r3, #0
   256ba:	d0e1      	beq.n	25680 <kmu_derive_cmac+0xa4>
   256bc:	461f      	mov	r7, r3
   256be:	a80e      	add	r0, sp, #56	; 0x38
   256c0:	2274      	movs	r2, #116	; 0x74
   256c2:	2100      	movs	r1, #0
   256c4:	f7ff f93c 	bl	24940 <CC_PalMemSetPlat>
   256c8:	4638      	mov	r0, r7
   256ca:	b04d      	add	sp, #308	; 0x134
   256cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256d0:	4f08      	ldr	r7, [pc, #32]	; (256f4 <kmu_derive_cmac+0x118>)
   256d2:	4638      	mov	r0, r7
   256d4:	b04d      	add	sp, #308	; 0x134
   256d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256da:	4f07      	ldr	r7, [pc, #28]	; (256f8 <kmu_derive_cmac+0x11c>)
   256dc:	4638      	mov	r0, r7
   256de:	b04d      	add	sp, #308	; 0x134
   256e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256e4:	a80e      	add	r0, sp, #56	; 0x38
   256e6:	2274      	movs	r2, #116	; 0x74
   256e8:	2100      	movs	r1, #0
   256ea:	462f      	mov	r7, r5
   256ec:	f7ff f928 	bl	24940 <CC_PalMemSetPlat>
   256f0:	e7ea      	b.n	256c8 <kmu_derive_cmac+0xec>
   256f2:	bf00      	nop
   256f4:	00f1000e 	.word	0x00f1000e
   256f8:	00f1000f 	.word	0x00f1000f

000256fc <UtilCmacBuildDataForDerivation>:
   256fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25700:	b082      	sub	sp, #8
   25702:	2600      	movs	r6, #0
   25704:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   25706:	9601      	str	r6, [sp, #4]
   25708:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2570c:	d83c      	bhi.n	25788 <UtilCmacBuildDataForDerivation+0x8c>
   2570e:	00ee      	lsls	r6, r5, #3
   25710:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   25714:	f101 35ff 	add.w	r5, r1, #4294967295
   25718:	461f      	mov	r7, r3
   2571a:	bf34      	ite	cc
   2571c:	2303      	movcc	r3, #3
   2571e:	2304      	movcs	r3, #4
   25720:	2d3f      	cmp	r5, #63	; 0x3f
   25722:	460c      	mov	r4, r1
   25724:	9300      	str	r3, [sp, #0]
   25726:	d82f      	bhi.n	25788 <UtilCmacBuildDataForDerivation+0x8c>
   25728:	b370      	cbz	r0, 25788 <UtilCmacBuildDataForDerivation+0x8c>
   2572a:	4690      	mov	r8, r2
   2572c:	b117      	cbz	r7, 25734 <UtilCmacBuildDataForDerivation+0x38>
   2572e:	b35a      	cbz	r2, 25788 <UtilCmacBuildDataForDerivation+0x8c>
   25730:	2f40      	cmp	r7, #64	; 0x40
   25732:	d829      	bhi.n	25788 <UtilCmacBuildDataForDerivation+0x8c>
   25734:	9a08      	ldr	r2, [sp, #32]
   25736:	b33a      	cbz	r2, 25788 <UtilCmacBuildDataForDerivation+0x8c>
   25738:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2573a:	6811      	ldr	r1, [r2, #0]
   2573c:	b321      	cbz	r1, 25788 <UtilCmacBuildDataForDerivation+0x8c>
   2573e:	19e2      	adds	r2, r4, r7
   25740:	4413      	add	r3, r2
   25742:	4299      	cmp	r1, r3
   25744:	d320      	bcc.n	25788 <UtilCmacBuildDataForDerivation+0x8c>
   25746:	9b08      	ldr	r3, [sp, #32]
   25748:	4622      	mov	r2, r4
   2574a:	4601      	mov	r1, r0
   2574c:	1c58      	adds	r0, r3, #1
   2574e:	f7ff f8f5 	bl	2493c <CC_PalMemCopyPlat>
   25752:	9b08      	ldr	r3, [sp, #32]
   25754:	4423      	add	r3, r4
   25756:	2200      	movs	r2, #0
   25758:	3402      	adds	r4, #2
   2575a:	705a      	strb	r2, [r3, #1]
   2575c:	bb07      	cbnz	r7, 257a0 <UtilCmacBuildDataForDerivation+0xa4>
   2575e:	2eff      	cmp	r6, #255	; 0xff
   25760:	9600      	str	r6, [sp, #0]
   25762:	d915      	bls.n	25790 <UtilCmacBuildDataForDerivation+0x94>
   25764:	9b08      	ldr	r3, [sp, #32]
   25766:	0235      	lsls	r5, r6, #8
   25768:	b2ad      	uxth	r5, r5
   2576a:	1918      	adds	r0, r3, r4
   2576c:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   25770:	2202      	movs	r2, #2
   25772:	a901      	add	r1, sp, #4
   25774:	9501      	str	r5, [sp, #4]
   25776:	f7ff f8e1 	bl	2493c <CC_PalMemCopyPlat>
   2577a:	3402      	adds	r4, #2
   2577c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2577e:	2000      	movs	r0, #0
   25780:	601c      	str	r4, [r3, #0]
   25782:	b002      	add	sp, #8
   25784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25788:	4809      	ldr	r0, [pc, #36]	; (257b0 <UtilCmacBuildDataForDerivation+0xb4>)
   2578a:	b002      	add	sp, #8
   2578c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25790:	9b08      	ldr	r3, [sp, #32]
   25792:	2201      	movs	r2, #1
   25794:	1918      	adds	r0, r3, r4
   25796:	4669      	mov	r1, sp
   25798:	f7ff f8d0 	bl	2493c <CC_PalMemCopyPlat>
   2579c:	3401      	adds	r4, #1
   2579e:	e7ed      	b.n	2577c <UtilCmacBuildDataForDerivation+0x80>
   257a0:	9b08      	ldr	r3, [sp, #32]
   257a2:	4641      	mov	r1, r8
   257a4:	1918      	adds	r0, r3, r4
   257a6:	463a      	mov	r2, r7
   257a8:	f7ff f8c8 	bl	2493c <CC_PalMemCopyPlat>
   257ac:	443c      	add	r4, r7
   257ae:	e7d6      	b.n	2575e <UtilCmacBuildDataForDerivation+0x62>
   257b0:	80000006 	.word	0x80000006

000257b4 <CC_PalDataBufferAttrGet>:
   257b4:	2000      	movs	r0, #0
   257b6:	7018      	strb	r0, [r3, #0]
   257b8:	4770      	bx	lr
   257ba:	bf00      	nop

000257bc <sys_notify_validate>:
	if (notify == NULL) {
   257bc:	4602      	mov	r2, r0
   257be:	b1b0      	cbz	r0, 257ee <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   257c0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   257c2:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   257c6:	2b02      	cmp	r3, #2
   257c8:	d00b      	beq.n	257e2 <sys_notify_validate+0x26>
   257ca:	2b03      	cmp	r3, #3
   257cc:	d004      	beq.n	257d8 <sys_notify_validate+0x1c>
   257ce:	2b01      	cmp	r3, #1
   257d0:	d004      	beq.n	257dc <sys_notify_validate+0x20>
   257d2:	f06f 0015 	mvn.w	r0, #21
   257d6:	4770      	bx	lr
		if (notify->method.callback == NULL) {
   257d8:	6803      	ldr	r3, [r0, #0]
   257da:	b15b      	cbz	r3, 257f4 <sys_notify_validate+0x38>
		notify->result = 0;
   257dc:	2000      	movs	r0, #0
   257de:	6090      	str	r0, [r2, #8]
   257e0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   257e2:	6803      	ldr	r3, [r0, #0]
   257e4:	2b00      	cmp	r3, #0
   257e6:	d1f9      	bne.n	257dc <sys_notify_validate+0x20>
			rv = -EINVAL;
   257e8:	f06f 0015 	mvn.w	r0, #21
}
   257ec:	4770      	bx	lr
		return -EINVAL;
   257ee:	f06f 0015 	mvn.w	r0, #21
   257f2:	4770      	bx	lr
			rv = -EINVAL;
   257f4:	f06f 0015 	mvn.w	r0, #21
   257f8:	4770      	bx	lr

000257fa <arch_printk_char_out>:
}
   257fa:	2000      	movs	r0, #0
   257fc:	4770      	bx	lr

000257fe <str_out>:
{
   257fe:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25800:	680c      	ldr	r4, [r1, #0]
   25802:	b154      	cbz	r4, 2581a <str_out+0x1c>
   25804:	688a      	ldr	r2, [r1, #8]
   25806:	684b      	ldr	r3, [r1, #4]
   25808:	429a      	cmp	r2, r3
   2580a:	da06      	bge.n	2581a <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   2580c:	3b01      	subs	r3, #1
   2580e:	429a      	cmp	r2, r3
   25810:	d008      	beq.n	25824 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   25812:	1c53      	adds	r3, r2, #1
   25814:	608b      	str	r3, [r1, #8]
   25816:	54a0      	strb	r0, [r4, r2]
   25818:	e002      	b.n	25820 <str_out+0x22>
		ctx->count++;
   2581a:	688b      	ldr	r3, [r1, #8]
   2581c:	3301      	adds	r3, #1
   2581e:	608b      	str	r3, [r1, #8]
}
   25820:	bc10      	pop	{r4}
   25822:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   25824:	1c53      	adds	r3, r2, #1
   25826:	608b      	str	r3, [r1, #8]
   25828:	2300      	movs	r3, #0
   2582a:	54a3      	strb	r3, [r4, r2]
   2582c:	e7f8      	b.n	25820 <str_out+0x22>

0002582e <printk>:
{
   2582e:	b40f      	push	{r0, r1, r2, r3}
   25830:	b500      	push	{lr}
   25832:	b083      	sub	sp, #12
   25834:	a904      	add	r1, sp, #16
   25836:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2583a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2583c:	f7ea fb7e 	bl	ff3c <vprintk>
}
   25840:	b003      	add	sp, #12
   25842:	f85d eb04 	ldr.w	lr, [sp], #4
   25846:	b004      	add	sp, #16
   25848:	4770      	bx	lr

0002584a <snprintk>:
{
   2584a:	b40c      	push	{r2, r3}
   2584c:	b500      	push	{lr}
   2584e:	b083      	sub	sp, #12
   25850:	ab04      	add	r3, sp, #16
   25852:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25856:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   25858:	f7ea fb80 	bl	ff5c <vsnprintk>
}
   2585c:	b003      	add	sp, #12
   2585e:	f85d eb04 	ldr.w	lr, [sp], #4
   25862:	b002      	add	sp, #8
   25864:	4770      	bx	lr

00025866 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   25866:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2586a:	8b81      	ldrh	r1, [r0, #28]
   2586c:	f021 0107 	bic.w	r1, r1, #7
   25870:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   25872:	8381      	strh	r1, [r0, #28]
}
   25874:	4770      	bx	lr

00025876 <notify_monitors>:
{
   25876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2587a:	4606      	mov	r6, r0
   2587c:	460f      	mov	r7, r1
   2587e:	4690      	mov	r8, r2
	return list->head;
   25880:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   25882:	b119      	cbz	r1, 2588c <notify_monitors+0x16>
   25884:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   25886:	b131      	cbz	r1, 25896 <notify_monitors+0x20>
	return node->next;
   25888:	680c      	ldr	r4, [r1, #0]
   2588a:	e004      	b.n	25896 <notify_monitors+0x20>
   2588c:	460c      	mov	r4, r1
   2588e:	e002      	b.n	25896 <notify_monitors+0x20>
   25890:	4623      	mov	r3, r4
   25892:	4621      	mov	r1, r4
   25894:	461c      	mov	r4, r3
   25896:	b159      	cbz	r1, 258b0 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   25898:	684d      	ldr	r5, [r1, #4]
   2589a:	4643      	mov	r3, r8
   2589c:	463a      	mov	r2, r7
   2589e:	4630      	mov	r0, r6
   258a0:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   258a2:	2c00      	cmp	r4, #0
   258a4:	d0f4      	beq.n	25890 <notify_monitors+0x1a>
   258a6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   258a8:	2c00      	cmp	r4, #0
   258aa:	d0f2      	beq.n	25892 <notify_monitors+0x1c>
	return node->next;
   258ac:	6823      	ldr	r3, [r4, #0]
   258ae:	e7f0      	b.n	25892 <notify_monitors+0x1c>
}
   258b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000258b4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   258b4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   258b6:	f013 0307 	ands.w	r3, r3, #7
   258ba:	d103      	bne.n	258c4 <process_recheck+0x10>
	return list->head;
   258bc:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   258be:	b10a      	cbz	r2, 258c4 <process_recheck+0x10>
		evt = EVT_START;
   258c0:	2003      	movs	r0, #3
   258c2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   258c4:	2b02      	cmp	r3, #2
   258c6:	d003      	beq.n	258d0 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   258c8:	2b01      	cmp	r3, #1
   258ca:	d006      	beq.n	258da <process_recheck+0x26>
	int evt = EVT_NOP;
   258cc:	2000      	movs	r0, #0
   258ce:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   258d0:	8bc2      	ldrh	r2, [r0, #30]
   258d2:	2a00      	cmp	r2, #0
   258d4:	d1f8      	bne.n	258c8 <process_recheck+0x14>
		evt = EVT_STOP;
   258d6:	2004      	movs	r0, #4
   258d8:	4770      	bx	lr
   258da:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   258dc:	b10b      	cbz	r3, 258e2 <process_recheck+0x2e>
		evt = EVT_RESET;
   258de:	2005      	movs	r0, #5
}
   258e0:	4770      	bx	lr
	int evt = EVT_NOP;
   258e2:	2000      	movs	r0, #0
   258e4:	4770      	bx	lr

000258e6 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   258e6:	b158      	cbz	r0, 25900 <validate_args+0x1a>
{
   258e8:	b510      	push	{r4, lr}
   258ea:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   258ec:	b159      	cbz	r1, 25906 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   258ee:	1d08      	adds	r0, r1, #4
   258f0:	f7ff ff64 	bl	257bc <sys_notify_validate>
	if ((rv == 0)
   258f4:	b918      	cbnz	r0, 258fe <validate_args+0x18>
	    && ((cli->notify.flags
   258f6:	68a3      	ldr	r3, [r4, #8]
   258f8:	f033 0303 	bics.w	r3, r3, #3
   258fc:	d106      	bne.n	2590c <validate_args+0x26>
}
   258fe:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25900:	f06f 0015 	mvn.w	r0, #21
}
   25904:	4770      	bx	lr
		return -EINVAL;
   25906:	f06f 0015 	mvn.w	r0, #21
   2590a:	e7f8      	b.n	258fe <validate_args+0x18>
		rv = -EINVAL;
   2590c:	f06f 0015 	mvn.w	r0, #21
   25910:	e7f5      	b.n	258fe <validate_args+0x18>

00025912 <notify_one>:
{
   25912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25916:	4607      	mov	r7, r0
   25918:	460c      	mov	r4, r1
   2591a:	4616      	mov	r6, r2
   2591c:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2591e:	4619      	mov	r1, r3
   25920:	1d20      	adds	r0, r4, #4
   25922:	f7ea fac9 	bl	feb8 <sys_notify_finalize>
	if (cb) {
   25926:	b128      	cbz	r0, 25934 <notify_one+0x22>
   25928:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   2592a:	462b      	mov	r3, r5
   2592c:	4632      	mov	r2, r6
   2592e:	4621      	mov	r1, r4
   25930:	4638      	mov	r0, r7
   25932:	47c0      	blx	r8
}
   25934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025938 <notify_all>:
{
   25938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2593c:	4681      	mov	r9, r0
   2593e:	460c      	mov	r4, r1
   25940:	4690      	mov	r8, r2
   25942:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   25944:	e005      	b.n	25952 <notify_all+0x1a>
	list->tail = node;
   25946:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   25948:	463b      	mov	r3, r7
   2594a:	4642      	mov	r2, r8
   2594c:	4648      	mov	r0, r9
   2594e:	f7ff ffe0 	bl	25912 <notify_one>
	return list->head;
   25952:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   25954:	b129      	cbz	r1, 25962 <notify_all+0x2a>
	return node->next;
   25956:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   25958:	6025      	str	r5, [r4, #0]
	return list->tail;
   2595a:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2595c:	428e      	cmp	r6, r1
   2595e:	d1f3      	bne.n	25948 <notify_all+0x10>
   25960:	e7f1      	b.n	25946 <notify_all+0xe>
}
   25962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025966 <onoff_manager_init>:
	if ((mgr == NULL)
   25966:	b170      	cbz	r0, 25986 <onoff_manager_init+0x20>
{
   25968:	b538      	push	{r3, r4, r5, lr}
   2596a:	460c      	mov	r4, r1
   2596c:	4605      	mov	r5, r0
	    || (transitions == NULL)
   2596e:	b169      	cbz	r1, 2598c <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   25970:	680b      	ldr	r3, [r1, #0]
   25972:	b173      	cbz	r3, 25992 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   25974:	684b      	ldr	r3, [r1, #4]
   25976:	b17b      	cbz	r3, 25998 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25978:	2220      	movs	r2, #32
   2597a:	2100      	movs	r1, #0
   2597c:	f000 ff60 	bl	26840 <memset>
   25980:	612c      	str	r4, [r5, #16]
	return 0;
   25982:	2000      	movs	r0, #0
}
   25984:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25986:	f06f 0015 	mvn.w	r0, #21
}
   2598a:	4770      	bx	lr
		return -EINVAL;
   2598c:	f06f 0015 	mvn.w	r0, #21
   25990:	e7f8      	b.n	25984 <onoff_manager_init+0x1e>
   25992:	f06f 0015 	mvn.w	r0, #21
   25996:	e7f5      	b.n	25984 <onoff_manager_init+0x1e>
   25998:	f06f 0015 	mvn.w	r0, #21
   2599c:	e7f2      	b.n	25984 <onoff_manager_init+0x1e>

0002599e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2599e:	b508      	push	{r3, lr}
   259a0:	4604      	mov	r4, r0
   259a2:	4608      	mov	r0, r1
   259a4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   259a6:	461a      	mov	r2, r3
   259a8:	47a0      	blx	r4
	return z_impl_z_current_get();
   259aa:	f7fb fd61 	bl	21470 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   259ae:	f7ee fa5f 	bl	13e70 <z_impl_k_thread_abort>

000259b2 <chunk_mem>:
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   259b2:	00c9      	lsls	r1, r1, #3
   259b4:	3104      	adds	r1, #4
}
   259b6:	4408      	add	r0, r1
   259b8:	4770      	bx	lr

000259ba <free_list_remove_bidx>:
		return ((uint16_t *)cmem)[f];
   259ba:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   259be:	88db      	ldrh	r3, [r3, #6]
	if (next_free_chunk(h, c) == c) {
   259c0:	4299      	cmp	r1, r3
   259c2:	d00e      	beq.n	259e2 <free_list_remove_bidx+0x28>
{
   259c4:	b410      	push	{r4}
   259c6:	00cc      	lsls	r4, r1, #3
   259c8:	4404      	add	r4, r0
   259ca:	88a1      	ldrh	r1, [r4, #4]
		b->next = second;
   259cc:	3204      	adds	r2, #4
   259ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   259d2:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   259d4:	3206      	adds	r2, #6
   259d6:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   259d8:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   259da:	3304      	adds	r3, #4
   259dc:	52c1      	strh	r1, [r0, r3]
}
   259de:	bc10      	pop	{r4}
   259e0:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   259e2:	2301      	movs	r3, #1
   259e4:	fa03 f102 	lsl.w	r1, r3, r2
   259e8:	68c3      	ldr	r3, [r0, #12]
   259ea:	ea23 0301 	bic.w	r3, r3, r1
   259ee:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   259f0:	3204      	adds	r2, #4
   259f2:	2300      	movs	r3, #0
   259f4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   259f8:	4770      	bx	lr

000259fa <free_list_add_bidx>:
{
   259fa:	b470      	push	{r4, r5, r6}
	if (b->next == 0U) {
   259fc:	1d13      	adds	r3, r2, #4
   259fe:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   25a02:	b984      	cbnz	r4, 25a26 <free_list_add_bidx+0x2c>
		h->avail_buckets |= BIT(bidx);
   25a04:	2301      	movs	r3, #1
   25a06:	fa03 f402 	lsl.w	r4, r3, r2
   25a0a:	68c3      	ldr	r3, [r0, #12]
   25a0c:	4323      	orrs	r3, r4
   25a0e:	60c3      	str	r3, [r0, #12]
		b->next = c;
   25a10:	3204      	adds	r2, #4
   25a12:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   25a16:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   25a18:	1d1a      	adds	r2, r3, #4
   25a1a:	b289      	uxth	r1, r1
   25a1c:	5281      	strh	r1, [r0, r2]
   25a1e:	3306      	adds	r3, #6
   25a20:	52c1      	strh	r1, [r0, r3]
}
   25a22:	bc70      	pop	{r4, r5, r6}
   25a24:	4770      	bx	lr
	void *cmem = &buf[c];
   25a26:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   25a28:	3204      	adds	r2, #4
   25a2a:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   25a2c:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   25a2e:	1d2e      	adds	r6, r5, #4
   25a30:	5383      	strh	r3, [r0, r6]
   25a32:	3506      	adds	r5, #6
   25a34:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   25a36:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   25a38:	3306      	adds	r3, #6
   25a3a:	b289      	uxth	r1, r1
   25a3c:	52c1      	strh	r1, [r0, r3]
   25a3e:	5281      	strh	r1, [r0, r2]
   25a40:	e7ef      	b.n	25a22 <free_list_add_bidx+0x28>

00025a42 <split_chunks>:
{
   25a42:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   25a44:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   25a46:	3302      	adds	r3, #2
   25a48:	5ac4      	ldrh	r4, [r0, r3]
	chunksz_t lsz = rc - lc;
   25a4a:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   25a4c:	1a89      	subs	r1, r1, r2
   25a4e:	eb01 0154 	add.w	r1, r1, r4, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25a52:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   25a54:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25a56:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   25a58:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   25a5a:	3402      	adds	r4, #2
   25a5c:	5303      	strh	r3, [r0, r4]
   25a5e:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   25a62:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c + chunk_size(h, c);
   25a66:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   25a68:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
}
   25a6c:	bc30      	pop	{r4, r5}
   25a6e:	4770      	bx	lr

00025a70 <merge_chunks>:
{
   25a70:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   25a72:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   25a74:	3102      	adds	r1, #2
   25a76:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   25a78:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   25a7a:	3402      	adds	r4, #2
   25a7c:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   25a7e:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25a80:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25a84:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   25a86:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   25a88:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   25a8a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   25a8e:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
}
   25a92:	bc30      	pop	{r4, r5}
   25a94:	4770      	bx	lr

00025a96 <mem_to_chunkid>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25a96:	3904      	subs	r1, #4
   25a98:	1a08      	subs	r0, r1, r0
}
   25a9a:	08c0      	lsrs	r0, r0, #3
   25a9c:	4770      	bx	lr

00025a9e <free_list_remove>:
{
   25a9e:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   25aa0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   25aa4:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   25aa6:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   25aa8:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   25aac:	f1c2 021f 	rsb	r2, r2, #31
   25ab0:	f7ff ff83 	bl	259ba <free_list_remove_bidx>
}
   25ab4:	bd08      	pop	{r3, pc}

00025ab6 <free_list_add>:
{
   25ab6:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   25ab8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   25abc:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   25abe:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   25ac0:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   25ac4:	f1c2 021f 	rsb	r2, r2, #31
   25ac8:	f7ff ff97 	bl	259fa <free_list_add_bidx>
}
   25acc:	bd08      	pop	{r3, pc}

00025ace <free_chunk>:
{
   25ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ad0:	4604      	mov	r4, r0
   25ad2:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   25ad4:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   25ad6:	1cb7      	adds	r7, r6, #2
   25ad8:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   25ada:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   25ade:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   25ae2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25ae4:	f013 0f01 	tst.w	r3, #1
   25ae8:	d00c      	beq.n	25b04 <free_chunk+0x36>
   25aea:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   25aec:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   25aee:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   25af2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   25af4:	f013 0f01 	tst.w	r3, #1
   25af8:	d00e      	beq.n	25b18 <free_chunk+0x4a>
	free_list_add(h, c);
   25afa:	4629      	mov	r1, r5
   25afc:	4620      	mov	r0, r4
   25afe:	f7ff ffda 	bl	25ab6 <free_list_add>
}
   25b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   25b04:	f7ff ffcb 	bl	25a9e <free_list_remove>
   25b08:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   25b0a:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   25b0e:	4629      	mov	r1, r5
   25b10:	4620      	mov	r0, r4
   25b12:	f7ff ffad 	bl	25a70 <merge_chunks>
   25b16:	e7e8      	b.n	25aea <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   25b18:	4620      	mov	r0, r4
   25b1a:	f7ff ffc0 	bl	25a9e <free_list_remove>
   25b1e:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   25b20:	462a      	mov	r2, r5
   25b22:	1a69      	subs	r1, r5, r1
   25b24:	4620      	mov	r0, r4
   25b26:	f7ff ffa3 	bl	25a70 <merge_chunks>
   25b2a:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   25b2c:	1aed      	subs	r5, r5, r3
   25b2e:	e7e4      	b.n	25afa <free_chunk+0x2c>

00025b30 <alloc_chunk>:
{
   25b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   25b32:	fab1 f381 	clz	r3, r1
	if (b->next) {
   25b36:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   25b3a:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   25b3e:	b1b7      	cbz	r7, 25b6e <alloc_chunk+0x3e>
   25b40:	f1c3 021f 	rsb	r2, r3, #31
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   25b44:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   25b46:	1d14      	adds	r4, r2, #4
   25b48:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   25b4c:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   25b4e:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   25b52:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   25b56:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   25b5a:	d912      	bls.n	25b82 <alloc_chunk+0x52>
   25b5c:	4405      	add	r5, r0
   25b5e:	88ec      	ldrh	r4, [r5, #6]
			b->next = next_free_chunk(h, c);
   25b60:	1d15      	adds	r5, r2, #4
   25b62:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
		} while (--i && b->next != first);
   25b66:	3e01      	subs	r6, #1
   25b68:	d001      	beq.n	25b6e <alloc_chunk+0x3e>
   25b6a:	42a7      	cmp	r7, r4
   25b6c:	d1eb      	bne.n	25b46 <alloc_chunk+0x16>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   25b6e:	68c4      	ldr	r4, [r0, #12]
   25b70:	f1c3 0220 	rsb	r2, r3, #32
   25b74:	2301      	movs	r3, #1
   25b76:	4093      	lsls	r3, r2
   25b78:	425b      	negs	r3, r3
	if (bmask != 0U) {
   25b7a:	401c      	ands	r4, r3
   25b7c:	d105      	bne.n	25b8a <alloc_chunk+0x5a>
}
   25b7e:	4620      	mov	r0, r4
   25b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   25b82:	4621      	mov	r1, r4
   25b84:	f7ff ff19 	bl	259ba <free_list_remove_bidx>
				return c;
   25b88:	e7f9      	b.n	25b7e <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   25b8a:	fa94 f2a4 	rbit	r2, r4
   25b8e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   25b92:	1d13      	adds	r3, r2, #4
   25b94:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   25b98:	4621      	mov	r1, r4
   25b9a:	f7ff ff0e 	bl	259ba <free_list_remove_bidx>
		return c;
   25b9e:	e7ee      	b.n	25b7e <alloc_chunk+0x4e>

00025ba0 <sys_heap_alloc>:
{
   25ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   25ba2:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   25ba4:	b341      	cbz	r1, 25bf8 <sys_heap_alloc+0x58>
   25ba6:	460b      	mov	r3, r1
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   25ba8:	68aa      	ldr	r2, [r5, #8]
   25baa:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   25bae:	d925      	bls.n	25bfc <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25bb0:	330b      	adds	r3, #11
   25bb2:	08dc      	lsrs	r4, r3, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   25bb4:	4621      	mov	r1, r4
   25bb6:	4628      	mov	r0, r5
   25bb8:	f7ff ffba 	bl	25b30 <alloc_chunk>
	if (c == 0U) {
   25bbc:	4607      	mov	r7, r0
   25bbe:	b1f8      	cbz	r0, 25c00 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   25bc0:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   25bc2:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   25bc6:	885b      	ldrh	r3, [r3, #2]
	if (chunk_size(h, c) > chunk_sz) {
   25bc8:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   25bcc:	d309      	bcc.n	25be2 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   25bce:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25bd0:	885a      	ldrh	r2, [r3, #2]
   25bd2:	f042 0201 	orr.w	r2, r2, #1
   25bd6:	805a      	strh	r2, [r3, #2]
	return chunk_mem(h, c);
   25bd8:	4639      	mov	r1, r7
   25bda:	4628      	mov	r0, r5
   25bdc:	f7ff fee9 	bl	259b2 <chunk_mem>
}
   25be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   25be2:	4404      	add	r4, r0
   25be4:	4622      	mov	r2, r4
   25be6:	4601      	mov	r1, r0
   25be8:	4628      	mov	r0, r5
   25bea:	f7ff ff2a 	bl	25a42 <split_chunks>
		free_list_add(h, c + chunk_sz);
   25bee:	4621      	mov	r1, r4
   25bf0:	4628      	mov	r0, r5
   25bf2:	f7ff ff60 	bl	25ab6 <free_list_add>
   25bf6:	e7ea      	b.n	25bce <sys_heap_alloc+0x2e>
		return NULL;
   25bf8:	2000      	movs	r0, #0
   25bfa:	e7f1      	b.n	25be0 <sys_heap_alloc+0x40>
   25bfc:	2000      	movs	r0, #0
   25bfe:	e7ef      	b.n	25be0 <sys_heap_alloc+0x40>
		return NULL;
   25c00:	2000      	movs	r0, #0
   25c02:	e7ed      	b.n	25be0 <sys_heap_alloc+0x40>

00025c04 <extract_decimal>:
{
   25c04:	b410      	push	{r4}
   25c06:	4604      	mov	r4, r0
	const char *sp = *str;
   25c08:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   25c0a:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   25c0c:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   25c0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   25c12:	2909      	cmp	r1, #9
   25c14:	d806      	bhi.n	25c24 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   25c16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   25c1a:	3201      	adds	r2, #1
   25c1c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   25c20:	3830      	subs	r0, #48	; 0x30
   25c22:	e7f3      	b.n	25c0c <extract_decimal+0x8>
	*str = sp;
   25c24:	6022      	str	r2, [r4, #0]
}
   25c26:	bc10      	pop	{r4}
   25c28:	4770      	bx	lr

00025c2a <encode_uint>:
{
   25c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c2e:	b083      	sub	sp, #12
   25c30:	4604      	mov	r4, r0
   25c32:	460d      	mov	r5, r1
   25c34:	9201      	str	r2, [sp, #4]
   25c36:	469a      	mov	sl, r3
   25c38:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   25c3c:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   25c3e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   25c42:	2b6f      	cmp	r3, #111	; 0x6f
   25c44:	d00f      	beq.n	25c66 <encode_uint+0x3c>
   25c46:	d906      	bls.n	25c56 <encode_uint+0x2c>
   25c48:	2b70      	cmp	r3, #112	; 0x70
   25c4a:	d00f      	beq.n	25c6c <encode_uint+0x42>
   25c4c:	2b78      	cmp	r3, #120	; 0x78
   25c4e:	d110      	bne.n	25c72 <encode_uint+0x48>
		return 16;
   25c50:	f04f 0910 	mov.w	r9, #16
   25c54:	e026      	b.n	25ca4 <encode_uint+0x7a>
	switch (specifier) {
   25c56:	2b58      	cmp	r3, #88	; 0x58
   25c58:	d002      	beq.n	25c60 <encode_uint+0x36>
   25c5a:	f04f 090a 	mov.w	r9, #10
   25c5e:	e021      	b.n	25ca4 <encode_uint+0x7a>
		return 16;
   25c60:	f04f 0910 	mov.w	r9, #16
   25c64:	e01e      	b.n	25ca4 <encode_uint+0x7a>
		return 8;
   25c66:	f04f 0908 	mov.w	r9, #8
   25c6a:	e01b      	b.n	25ca4 <encode_uint+0x7a>
		return 16;
   25c6c:	f04f 0910 	mov.w	r9, #16
   25c70:	e018      	b.n	25ca4 <encode_uint+0x7a>
	switch (specifier) {
   25c72:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   25c76:	e015      	b.n	25ca4 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25c78:	f1bb 0f19 	cmp.w	fp, #25
   25c7c:	d820      	bhi.n	25cc0 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   25c7e:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25c80:	3237      	adds	r2, #55	; 0x37
   25c82:	b2d2      	uxtb	r2, r2
   25c84:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   25c88:	4632      	mov	r2, r6
   25c8a:	463b      	mov	r3, r7
   25c8c:	4620      	mov	r0, r4
   25c8e:	4629      	mov	r1, r5
   25c90:	f7da fa36 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   25c94:	42bd      	cmp	r5, r7
   25c96:	bf08      	it	eq
   25c98:	42b4      	cmpeq	r4, r6
   25c9a:	d315      	bcc.n	25cc8 <encode_uint+0x9e>
   25c9c:	45d0      	cmp	r8, sl
   25c9e:	d913      	bls.n	25cc8 <encode_uint+0x9e>
		value /= radix;
   25ca0:	4604      	mov	r4, r0
   25ca2:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   25ca4:	464e      	mov	r6, r9
   25ca6:	2700      	movs	r7, #0
   25ca8:	464a      	mov	r2, r9
   25caa:	463b      	mov	r3, r7
   25cac:	4620      	mov	r0, r4
   25cae:	4629      	mov	r1, r5
   25cb0:	f7da fa26 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25cb4:	2a09      	cmp	r2, #9
   25cb6:	d8df      	bhi.n	25c78 <encode_uint+0x4e>
   25cb8:	b2d2      	uxtb	r2, r2
   25cba:	3230      	adds	r2, #48	; 0x30
   25cbc:	b2d2      	uxtb	r2, r2
   25cbe:	e7e1      	b.n	25c84 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   25cc0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25cc2:	3257      	adds	r2, #87	; 0x57
   25cc4:	b2d2      	uxtb	r2, r2
   25cc6:	e7dd      	b.n	25c84 <encode_uint+0x5a>
	if (conv->flag_hash) {
   25cc8:	9b01      	ldr	r3, [sp, #4]
   25cca:	781b      	ldrb	r3, [r3, #0]
   25ccc:	f013 0f20 	tst.w	r3, #32
   25cd0:	d005      	beq.n	25cde <encode_uint+0xb4>
		if (radix == 8) {
   25cd2:	f1b9 0f08 	cmp.w	r9, #8
   25cd6:	d006      	beq.n	25ce6 <encode_uint+0xbc>
		} else if (radix == 16) {
   25cd8:	f1b9 0f10 	cmp.w	r9, #16
   25cdc:	d009      	beq.n	25cf2 <encode_uint+0xc8>
}
   25cde:	4640      	mov	r0, r8
   25ce0:	b003      	add	sp, #12
   25ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   25ce6:	9a01      	ldr	r2, [sp, #4]
   25ce8:	7893      	ldrb	r3, [r2, #2]
   25cea:	f043 0308 	orr.w	r3, r3, #8
   25cee:	7093      	strb	r3, [r2, #2]
   25cf0:	e7f5      	b.n	25cde <encode_uint+0xb4>
			conv->altform_0c = true;
   25cf2:	9a01      	ldr	r2, [sp, #4]
   25cf4:	7893      	ldrb	r3, [r2, #2]
   25cf6:	f043 0310 	orr.w	r3, r3, #16
   25cfa:	7093      	strb	r3, [r2, #2]
   25cfc:	e7ef      	b.n	25cde <encode_uint+0xb4>

00025cfe <outs>:
{
   25cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d02:	4607      	mov	r7, r0
   25d04:	460e      	mov	r6, r1
   25d06:	4614      	mov	r4, r2
   25d08:	4698      	mov	r8, r3
	size_t count = 0;
   25d0a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25d0c:	e006      	b.n	25d1c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   25d0e:	4631      	mov	r1, r6
   25d10:	f814 0b01 	ldrb.w	r0, [r4], #1
   25d14:	47b8      	blx	r7
		if (rc < 0) {
   25d16:	2800      	cmp	r0, #0
   25d18:	db09      	blt.n	25d2e <outs+0x30>
		++count;
   25d1a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25d1c:	4544      	cmp	r4, r8
   25d1e:	d3f6      	bcc.n	25d0e <outs+0x10>
   25d20:	f1b8 0f00 	cmp.w	r8, #0
   25d24:	d102      	bne.n	25d2c <outs+0x2e>
   25d26:	7823      	ldrb	r3, [r4, #0]
   25d28:	2b00      	cmp	r3, #0
   25d2a:	d1f0      	bne.n	25d0e <outs+0x10>
	return (int)count;
   25d2c:	4628      	mov	r0, r5
}
   25d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025d32 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   25d32:	4040      	eors	r0, r0
   25d34:	f380 8811 	msr	BASEPRI, r0
   25d38:	f04f 0004 	mov.w	r0, #4
   25d3c:	df02      	svc	2
}
   25d3e:	4770      	bx	lr

00025d40 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   25d40:	4770      	bx	lr

00025d42 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   25d42:	2300      	movs	r3, #0
   25d44:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   25d46:	6003      	str	r3, [r0, #0]
}
   25d48:	4770      	bx	lr

00025d4a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   25d4a:	6803      	ldr	r3, [r0, #0]
   25d4c:	b12b      	cbz	r3, 25d5a <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   25d4e:	6843      	ldr	r3, [r0, #4]
   25d50:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   25d52:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   25d54:	2300      	movs	r3, #0
   25d56:	600b      	str	r3, [r1, #0]
}
   25d58:	4770      	bx	lr
		list->head = msg;
   25d5a:	6001      	str	r1, [r0, #0]
   25d5c:	e7f9      	b.n	25d52 <log_list_add_tail+0x8>

00025d5e <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   25d5e:	6800      	ldr	r0, [r0, #0]
   25d60:	4770      	bx	lr

00025d62 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   25d62:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   25d64:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   25d66:	b108      	cbz	r0, 25d6c <log_list_head_get+0xa>
		list->head = list->head->next;
   25d68:	6802      	ldr	r2, [r0, #0]
   25d6a:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   25d6c:	4770      	bx	lr

00025d6e <dummy_timestamp>:
}
   25d6e:	2000      	movs	r0, #0
   25d70:	4770      	bx	lr

00025d72 <msg_filter_check>:
}
   25d72:	2001      	movs	r0, #1
   25d74:	4770      	bx	lr

00025d76 <default_get_timestamp>:
{
   25d76:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   25d78:	f003 f84b 	bl	28e12 <sys_clock_cycle_get_32>
}
   25d7c:	bd08      	pop	{r3, pc}

00025d7e <z_log_get_tag>:
}
   25d7e:	2000      	movs	r0, #0
   25d80:	4770      	bx	lr

00025d82 <block_on_alloc>:
}
   25d82:	2000      	movs	r0, #0
   25d84:	4770      	bx	lr

00025d86 <cont_arg_get>:
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   25d86:	2901      	cmp	r1, #1
   25d88:	d906      	bls.n	25d98 <cont_arg_get+0x12>
	cont = msg->payload.ext.next;
   25d8a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   25d8c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   25d8e:	2906      	cmp	r1, #6
   25d90:	d907      	bls.n	25da2 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   25d92:	3907      	subs	r1, #7
		cont = cont->next;
   25d94:	681b      	ldr	r3, [r3, #0]
   25d96:	e7fa      	b.n	25d8e <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   25d98:	3104      	adds	r1, #4
   25d9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   25d9e:	6888      	ldr	r0, [r1, #8]
   25da0:	4770      	bx	lr
	return cont->payload.args[arg_idx];
   25da2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   25da6:	6848      	ldr	r0, [r1, #4]
}
   25da8:	4770      	bx	lr

00025daa <copy_args_to_msg>:
{
   25daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25dae:	460d      	mov	r5, r1
   25db0:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   25db2:	6946      	ldr	r6, [r0, #20]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   25db4:	2a03      	cmp	r2, #3
   25db6:	d917      	bls.n	25de8 <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   25db8:	2208      	movs	r2, #8
   25dba:	3018      	adds	r0, #24
   25dbc:	f000 fd1c 	bl	267f8 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   25dc0:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   25dc2:	3508      	adds	r5, #8
	while (nargs != 0U) {
   25dc4:	b1b4      	cbz	r4, 25df4 <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   25dc6:	46a0      	mov	r8, r4
   25dc8:	2c07      	cmp	r4, #7
   25dca:	bf28      	it	cs
   25dcc:	f04f 0807 	movcs.w	r8, #7
		(void)memcpy(cont->payload.args, args,
   25dd0:	ea4f 0788 	mov.w	r7, r8, lsl #2
   25dd4:	463a      	mov	r2, r7
   25dd6:	4629      	mov	r1, r5
   25dd8:	1d30      	adds	r0, r6, #4
   25dda:	f000 fd0d 	bl	267f8 <memcpy>
		nargs -= cpy_args;
   25dde:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   25de2:	443d      	add	r5, r7
		cont = cont->next;
   25de4:	6836      	ldr	r6, [r6, #0]
   25de6:	e7ed      	b.n	25dc4 <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   25de8:	0092      	lsls	r2, r2, #2
   25dea:	3014      	adds	r0, #20
   25dec:	f000 fd04 	bl	267f8 <memcpy>
		nargs  = 0U;
   25df0:	2400      	movs	r4, #0
   25df2:	e7e7      	b.n	25dc4 <copy_args_to_msg+0x1a>
}
   25df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025df8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   25df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25dfc:	461c      	mov	r4, r3
   25dfe:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   25e02:	8903      	ldrh	r3, [r0, #8]
   25e04:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   25e08:	42a3      	cmp	r3, r4
   25e0a:	d91f      	bls.n	25e4c <log_msg_hexdump_data_op+0x54>
   25e0c:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   25e0e:	6811      	ldr	r1, [r2, #0]
   25e10:	4421      	add	r1, r4
   25e12:	4299      	cmp	r1, r3
   25e14:	d901      	bls.n	25e1a <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   25e16:	1b19      	subs	r1, r3, r4
   25e18:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   25e1a:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   25e1c:	2b0c      	cmp	r3, #12
   25e1e:	d919      	bls.n	25e54 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   25e20:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   25e24:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   25e26:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   25e28:	42a3      	cmp	r3, r4
   25e2a:	d91e      	bls.n	25e6a <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   25e2c:	42bb      	cmp	r3, r7
   25e2e:	bf28      	it	cs
   25e30:	463b      	movcs	r3, r7
   25e32:	461d      	mov	r5, r3

		if (put_op) {
   25e34:	f1b9 0f00 	cmp.w	r9, #0
   25e38:	d010      	beq.n	25e5c <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   25e3a:	461a      	mov	r2, r3
   25e3c:	4641      	mov	r1, r8
   25e3e:	eb0c 0004 	add.w	r0, ip, r4
   25e42:	f000 fcd9 	bl	267f8 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   25e46:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   25e48:	44a8      	add	r8, r5
   25e4a:	e021      	b.n	25e90 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   25e4c:	2300      	movs	r3, #0
   25e4e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   25e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   25e54:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   25e58:	2600      	movs	r6, #0
   25e5a:	e7e5      	b.n	25e28 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   25e5c:	461a      	mov	r2, r3
   25e5e:	eb0c 0104 	add.w	r1, ip, r4
   25e62:	4640      	mov	r0, r8
   25e64:	f000 fcc8 	bl	267f8 <memcpy>
   25e68:	e7ed      	b.n	25e46 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   25e6a:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   25e6c:	b91e      	cbnz	r6, 25e76 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   25e6e:	6946      	ldr	r6, [r0, #20]
   25e70:	e001      	b.n	25e76 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   25e72:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   25e74:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   25e76:	2c1b      	cmp	r4, #27
   25e78:	d8fb      	bhi.n	25e72 <log_msg_hexdump_data_op+0x7a>
   25e7a:	e009      	b.n	25e90 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   25e7c:	1931      	adds	r1, r6, r4
   25e7e:	462a      	mov	r2, r5
   25e80:	3104      	adds	r1, #4
   25e82:	4640      	mov	r0, r8
   25e84:	f000 fcb8 	bl	267f8 <memcpy>
		cont = cont->next;
   25e88:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   25e8a:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   25e8c:	44a8      	add	r8, r5
		offset = 0;
   25e8e:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   25e90:	2f00      	cmp	r7, #0
   25e92:	d0dd      	beq.n	25e50 <log_msg_hexdump_data_op+0x58>
   25e94:	2e00      	cmp	r6, #0
   25e96:	d0db      	beq.n	25e50 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   25e98:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   25e9c:	42bd      	cmp	r5, r7
   25e9e:	bf28      	it	cs
   25ea0:	463d      	movcs	r5, r7
		if (put_op) {
   25ea2:	f1b9 0f00 	cmp.w	r9, #0
   25ea6:	d0e9      	beq.n	25e7c <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   25ea8:	1930      	adds	r0, r6, r4
   25eaa:	462a      	mov	r2, r5
   25eac:	4641      	mov	r1, r8
   25eae:	3004      	adds	r0, #4
   25eb0:	f000 fca2 	bl	267f8 <memcpy>
   25eb4:	e7e8      	b.n	25e88 <log_msg_hexdump_data_op+0x90>

00025eb6 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   25eb6:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   25eb8:	f3bf 8f5b 	dmb	ish
   25ebc:	e850 3f00 	ldrex	r3, [r0]
   25ec0:	3301      	adds	r3, #1
   25ec2:	e840 3200 	strex	r2, r3, [r0]
   25ec6:	2a00      	cmp	r2, #0
   25ec8:	d1f8      	bne.n	25ebc <log_msg_get+0x6>
   25eca:	f3bf 8f5b 	dmb	ish
}
   25ece:	4770      	bx	lr

00025ed0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   25ed0:	7a40      	ldrb	r0, [r0, #9]
}
   25ed2:	0900      	lsrs	r0, r0, #4
   25ed4:	4770      	bx	lr

00025ed6 <log_msg_arg_get>:
{
   25ed6:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   25ed8:	7a43      	ldrb	r3, [r0, #9]
   25eda:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   25ede:	d20a      	bcs.n	25ef6 <log_msg_arg_get+0x20>
   25ee0:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   25ee2:	2a03      	cmp	r2, #3
   25ee4:	d804      	bhi.n	25ef0 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   25ee6:	3104      	adds	r1, #4
   25ee8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   25eec:	6840      	ldr	r0, [r0, #4]
   25eee:	e003      	b.n	25ef8 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   25ef0:	f7ff ff49 	bl	25d86 <cont_arg_get>
   25ef4:	e000      	b.n	25ef8 <log_msg_arg_get+0x22>
		return 0;
   25ef6:	2000      	movs	r0, #0
}
   25ef8:	bd08      	pop	{r3, pc}

00025efa <log_msg_str_get>:
}
   25efa:	6900      	ldr	r0, [r0, #16]
   25efc:	4770      	bx	lr

00025efe <log_msg_put>:
{
   25efe:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   25f00:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   25f02:	f3bf 8f5b 	dmb	ish
   25f06:	e853 2f00 	ldrex	r2, [r3]
   25f0a:	3a01      	subs	r2, #1
   25f0c:	e843 2100 	strex	r1, r2, [r3]
   25f10:	2900      	cmp	r1, #0
   25f12:	d1f8      	bne.n	25f06 <log_msg_put+0x8>
   25f14:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   25f18:	6843      	ldr	r3, [r0, #4]
   25f1a:	b103      	cbz	r3, 25f1e <log_msg_put+0x20>
}
   25f1c:	bd08      	pop	{r3, pc}
		msg_free(msg);
   25f1e:	f7eb ffa5 	bl	11e6c <msg_free>
}
   25f22:	e7fb      	b.n	25f1c <log_msg_put+0x1e>

00025f24 <msg_alloc>:
{
   25f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25f26:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   25f28:	f7eb ff84 	bl	11e34 <log_msg_chunk_alloc>
	if (msg != NULL) {
   25f2c:	4607      	mov	r7, r0
   25f2e:	b140      	cbz	r0, 25f42 <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   25f30:	2301      	movs	r3, #1
   25f32:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   25f34:	2200      	movs	r2, #0
   25f36:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   25f38:	f04f 0300 	mov.w	r3, #0
   25f3c:	f362 0300 	bfi	r3, r2, #0, #1
   25f40:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   25f42:	b1f7      	cbz	r7, 25f82 <msg_alloc+0x5e>
   25f44:	2d03      	cmp	r5, #3
   25f46:	d91c      	bls.n	25f82 <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   25f48:	7a7b      	ldrb	r3, [r7, #9]
   25f4a:	f36f 1307 	bfc	r3, #4, #4
   25f4e:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   25f50:	7a3b      	ldrb	r3, [r7, #8]
   25f52:	f043 0302 	orr.w	r3, r3, #2
   25f56:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   25f58:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   25f5a:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   25f5e:	2300      	movs	r3, #0
   25f60:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   25f62:	2d00      	cmp	r5, #0
   25f64:	dd0d      	ble.n	25f82 <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   25f66:	f7eb ff65 	bl	11e34 <log_msg_chunk_alloc>
		if (cont == NULL) {
   25f6a:	4604      	mov	r4, r0
   25f6c:	b128      	cbz	r0, 25f7a <msg_alloc+0x56>
		*next = cont;
   25f6e:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   25f70:	2300      	movs	r3, #0
   25f72:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   25f74:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   25f76:	3d07      	subs	r5, #7
   25f78:	e7f3      	b.n	25f62 <msg_alloc+0x3e>
			msg_free(msg);
   25f7a:	4638      	mov	r0, r7
   25f7c:	f7eb ff76 	bl	11e6c <msg_free>
			return NULL;
   25f80:	4627      	mov	r7, r4
}
   25f82:	4638      	mov	r0, r7
   25f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025f86 <log_msg_hexdump_create>:
{
   25f86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25f8a:	4606      	mov	r6, r0
   25f8c:	460f      	mov	r7, r1
   25f8e:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   25f90:	f643 75ff 	movw	r5, #16383	; 0x3fff
   25f94:	4295      	cmp	r5, r2
   25f96:	bf28      	it	cs
   25f98:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   25f9a:	f7eb ff4b 	bl	11e34 <log_msg_chunk_alloc>
	if (msg == NULL) {
   25f9e:	4681      	mov	r9, r0
   25fa0:	2800      	cmp	r0, #0
   25fa2:	d045      	beq.n	26030 <log_msg_hexdump_create+0xaa>
	msg->hdr.ref_cnt = 1;
   25fa4:	2301      	movs	r3, #1
   25fa6:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   25fa8:	7a03      	ldrb	r3, [r0, #8]
   25faa:	f043 0301 	orr.w	r3, r3, #1
   25fae:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   25fb0:	8903      	ldrh	r3, [r0, #8]
   25fb2:	f365 038f 	bfi	r3, r5, #2, #14
   25fb6:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   25fb8:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   25fba:	2c0c      	cmp	r4, #12
   25fbc:	d927      	bls.n	2600e <log_msg_hexdump_create+0x88>
		(void)memcpy(msg->payload.ext.data.bytes,
   25fbe:	2208      	movs	r2, #8
   25fc0:	4639      	mov	r1, r7
   25fc2:	3018      	adds	r0, #24
   25fc4:	f000 fc18 	bl	267f8 <memcpy>
		msg->payload.ext.next = NULL;
   25fc8:	2300      	movs	r3, #0
   25fca:	f8c9 3014 	str.w	r3, [r9, #20]
		msg->hdr.params.generic.ext = 1;
   25fce:	f899 3008 	ldrb.w	r3, [r9, #8]
   25fd2:	f043 0302 	orr.w	r3, r3, #2
   25fd6:	f889 3008 	strb.w	r3, [r9, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   25fda:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   25fdc:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   25fde:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   25fe2:	b32d      	cbz	r5, 26030 <log_msg_hexdump_create+0xaa>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   25fe4:	f7eb ff26 	bl	11e34 <log_msg_chunk_alloc>
		if (cont == NULL) {
   25fe8:	4604      	mov	r4, r0
   25fea:	b1e8      	cbz	r0, 26028 <log_msg_hexdump_create+0xa2>
		*prev_cont = cont;
   25fec:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   25ff0:	2300      	movs	r3, #0
   25ff2:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   25ff4:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   25ff6:	462e      	mov	r6, r5
   25ff8:	2d1c      	cmp	r5, #28
   25ffa:	bf28      	it	cs
   25ffc:	261c      	movcs	r6, #28
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   25ffe:	4632      	mov	r2, r6
   26000:	4639      	mov	r1, r7
   26002:	3004      	adds	r0, #4
   26004:	f000 fbf8 	bl	267f8 <memcpy>
		data += chunk_length;
   26008:	4437      	add	r7, r6
		length -= chunk_length;
   2600a:	1bad      	subs	r5, r5, r6
   2600c:	e7e9      	b.n	25fe2 <log_msg_hexdump_create+0x5c>
		(void)memcpy(msg->payload.single.bytes, data, length);
   2600e:	462a      	mov	r2, r5
   26010:	4639      	mov	r1, r7
   26012:	3014      	adds	r0, #20
   26014:	f000 fbf0 	bl	267f8 <memcpy>
		msg->hdr.params.generic.ext = 0;
   26018:	f899 3008 	ldrb.w	r3, [r9, #8]
   2601c:	f36f 0341 	bfc	r3, #1, #1
   26020:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   26024:	2500      	movs	r5, #0
   26026:	e7da      	b.n	25fde <log_msg_hexdump_create+0x58>
			msg_free(msg);
   26028:	4648      	mov	r0, r9
   2602a:	f7eb ff1f 	bl	11e6c <msg_free>
			return NULL;
   2602e:	46a1      	mov	r9, r4
}
   26030:	4648      	mov	r0, r9
   26032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026036 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   26036:	b510      	push	{r4, lr}
   26038:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2603a:	2400      	movs	r4, #0
   2603c:	9400      	str	r4, [sp, #0]
   2603e:	f7ff fedb 	bl	25df8 <log_msg_hexdump_data_op>
}
   26042:	b002      	add	sp, #8
   26044:	bd10      	pop	{r4, pc}

00026046 <buffer_write>:
{
   26046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26048:	4607      	mov	r7, r0
   2604a:	460d      	mov	r5, r1
   2604c:	4614      	mov	r4, r2
   2604e:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   26050:	4632      	mov	r2, r6
   26052:	4621      	mov	r1, r4
   26054:	4628      	mov	r0, r5
   26056:	47b8      	blx	r7
		buf += processed;
   26058:	4405      	add	r5, r0
	} while (len != 0);
   2605a:	1a24      	subs	r4, r4, r0
   2605c:	d1f8      	bne.n	26050 <buffer_write+0xa>
}
   2605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026060 <color_prefix>:
{
   26060:	b508      	push	{r3, lr}
   26062:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   26064:	2201      	movs	r2, #1
   26066:	f7eb ffc3 	bl	11ff0 <color_print>
}
   2606a:	bd08      	pop	{r3, pc}

0002606c <color_postfix>:
{
   2606c:	b508      	push	{r3, lr}
   2606e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   26070:	2200      	movs	r2, #0
   26072:	f7eb ffbd 	bl	11ff0 <color_print>
}
   26076:	bd08      	pop	{r3, pc}

00026078 <postfix_print>:
{
   26078:	b538      	push	{r3, r4, r5, lr}
   2607a:	4605      	mov	r5, r0
   2607c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   2607e:	f001 0101 	and.w	r1, r1, #1
   26082:	f7ff fff3 	bl	2606c <color_postfix>
	newline_print(output, flags);
   26086:	4621      	mov	r1, r4
   26088:	4628      	mov	r0, r5
   2608a:	f7eb ffc7 	bl	1201c <newline_print>
}
   2608e:	bd38      	pop	{r3, r4, r5, pc}

00026090 <std_print>:
{
   26090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26094:	b08e      	sub	sp, #56	; 0x38
   26096:	af0e      	add	r7, sp, #56	; 0x38
   26098:	4606      	mov	r6, r0
   2609a:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   2609c:	f7ff ff2d 	bl	25efa <log_msg_str_get>
   260a0:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   260a2:	4630      	mov	r0, r6
   260a4:	f7ff ff14 	bl	25ed0 <log_msg_nargs_get>
   260a8:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   260aa:	0083      	lsls	r3, r0, #2
   260ac:	3307      	adds	r3, #7
   260ae:	f023 0307 	bic.w	r3, r3, #7
   260b2:	ebad 0d03 	sub.w	sp, sp, r3
   260b6:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   260b8:	2400      	movs	r4, #0
   260ba:	4544      	cmp	r4, r8
   260bc:	d207      	bcs.n	260ce <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   260be:	4621      	mov	r1, r4
   260c0:	4630      	mov	r0, r6
   260c2:	f7ff ff08 	bl	25ed6 <log_msg_arg_get>
   260c6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   260ca:	3401      	adds	r4, #1
   260cc:	e7f5      	b.n	260ba <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   260ce:	4630      	mov	r0, r6
   260d0:	f7ff fefe 	bl	25ed0 <log_msg_nargs_get>
   260d4:	280f      	cmp	r0, #15
   260d6:	d815      	bhi.n	26104 <std_print+0x74>
   260d8:	e8df f010 	tbh	[pc, r0, lsl #1]
   260dc:	00170010 	.word	0x00170010
   260e0:	0024001d 	.word	0x0024001d
   260e4:	0038002d 	.word	0x0038002d
   260e8:	00540045 	.word	0x00540045
   260ec:	00780065 	.word	0x00780065
   260f0:	00a4008d 	.word	0x00a4008d
   260f4:	00d800bd 	.word	0x00d800bd
   260f8:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
   260fc:	4651      	mov	r1, sl
   260fe:	4648      	mov	r0, r9
   26100:	f7eb ff1e 	bl	11f40 <print_formatted>
}
   26104:	46bd      	mov	sp, r7
   26106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   2610a:	682a      	ldr	r2, [r5, #0]
   2610c:	4651      	mov	r1, sl
   2610e:	4648      	mov	r0, r9
   26110:	f7eb ff16 	bl	11f40 <print_formatted>
		break;
   26114:	e7f6      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   26116:	686b      	ldr	r3, [r5, #4]
   26118:	682a      	ldr	r2, [r5, #0]
   2611a:	4651      	mov	r1, sl
   2611c:	4648      	mov	r0, r9
   2611e:	f7eb ff0f 	bl	11f40 <print_formatted>
		break;
   26122:	e7ef      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   26124:	686b      	ldr	r3, [r5, #4]
   26126:	682a      	ldr	r2, [r5, #0]
   26128:	68a9      	ldr	r1, [r5, #8]
   2612a:	9100      	str	r1, [sp, #0]
   2612c:	4651      	mov	r1, sl
   2612e:	4648      	mov	r0, r9
   26130:	f7eb ff06 	bl	11f40 <print_formatted>
		break;
   26134:	e7e6      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26136:	686b      	ldr	r3, [r5, #4]
   26138:	682a      	ldr	r2, [r5, #0]
   2613a:	68e9      	ldr	r1, [r5, #12]
   2613c:	9101      	str	r1, [sp, #4]
   2613e:	68a9      	ldr	r1, [r5, #8]
   26140:	9100      	str	r1, [sp, #0]
   26142:	4651      	mov	r1, sl
   26144:	4648      	mov	r0, r9
   26146:	f7eb fefb 	bl	11f40 <print_formatted>
		break;
   2614a:	e7db      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2614c:	686b      	ldr	r3, [r5, #4]
   2614e:	682a      	ldr	r2, [r5, #0]
   26150:	6929      	ldr	r1, [r5, #16]
   26152:	9102      	str	r1, [sp, #8]
   26154:	68e9      	ldr	r1, [r5, #12]
   26156:	9101      	str	r1, [sp, #4]
   26158:	68a9      	ldr	r1, [r5, #8]
   2615a:	9100      	str	r1, [sp, #0]
   2615c:	4651      	mov	r1, sl
   2615e:	4648      	mov	r0, r9
   26160:	f7eb feee 	bl	11f40 <print_formatted>
		break;
   26164:	e7ce      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26166:	686b      	ldr	r3, [r5, #4]
   26168:	682a      	ldr	r2, [r5, #0]
   2616a:	6969      	ldr	r1, [r5, #20]
   2616c:	9103      	str	r1, [sp, #12]
   2616e:	6929      	ldr	r1, [r5, #16]
   26170:	9102      	str	r1, [sp, #8]
   26172:	68e9      	ldr	r1, [r5, #12]
   26174:	9101      	str	r1, [sp, #4]
   26176:	68a9      	ldr	r1, [r5, #8]
   26178:	9100      	str	r1, [sp, #0]
   2617a:	4651      	mov	r1, sl
   2617c:	4648      	mov	r0, r9
   2617e:	f7eb fedf 	bl	11f40 <print_formatted>
		break;
   26182:	e7bf      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26184:	686b      	ldr	r3, [r5, #4]
   26186:	682a      	ldr	r2, [r5, #0]
   26188:	69a9      	ldr	r1, [r5, #24]
   2618a:	9104      	str	r1, [sp, #16]
   2618c:	6969      	ldr	r1, [r5, #20]
   2618e:	9103      	str	r1, [sp, #12]
   26190:	6929      	ldr	r1, [r5, #16]
   26192:	9102      	str	r1, [sp, #8]
   26194:	68e9      	ldr	r1, [r5, #12]
   26196:	9101      	str	r1, [sp, #4]
   26198:	68a9      	ldr	r1, [r5, #8]
   2619a:	9100      	str	r1, [sp, #0]
   2619c:	4651      	mov	r1, sl
   2619e:	4648      	mov	r0, r9
   261a0:	f7eb fece 	bl	11f40 <print_formatted>
		break;
   261a4:	e7ae      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   261a6:	686b      	ldr	r3, [r5, #4]
   261a8:	682a      	ldr	r2, [r5, #0]
   261aa:	69e9      	ldr	r1, [r5, #28]
   261ac:	9105      	str	r1, [sp, #20]
   261ae:	69a9      	ldr	r1, [r5, #24]
   261b0:	9104      	str	r1, [sp, #16]
   261b2:	6969      	ldr	r1, [r5, #20]
   261b4:	9103      	str	r1, [sp, #12]
   261b6:	6929      	ldr	r1, [r5, #16]
   261b8:	9102      	str	r1, [sp, #8]
   261ba:	68e9      	ldr	r1, [r5, #12]
   261bc:	9101      	str	r1, [sp, #4]
   261be:	68a9      	ldr	r1, [r5, #8]
   261c0:	9100      	str	r1, [sp, #0]
   261c2:	4651      	mov	r1, sl
   261c4:	4648      	mov	r0, r9
   261c6:	f7eb febb 	bl	11f40 <print_formatted>
		break;
   261ca:	e79b      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   261cc:	686b      	ldr	r3, [r5, #4]
   261ce:	682a      	ldr	r2, [r5, #0]
   261d0:	6a29      	ldr	r1, [r5, #32]
   261d2:	9106      	str	r1, [sp, #24]
   261d4:	69e9      	ldr	r1, [r5, #28]
   261d6:	9105      	str	r1, [sp, #20]
   261d8:	69a9      	ldr	r1, [r5, #24]
   261da:	9104      	str	r1, [sp, #16]
   261dc:	6969      	ldr	r1, [r5, #20]
   261de:	9103      	str	r1, [sp, #12]
   261e0:	6929      	ldr	r1, [r5, #16]
   261e2:	9102      	str	r1, [sp, #8]
   261e4:	68e9      	ldr	r1, [r5, #12]
   261e6:	9101      	str	r1, [sp, #4]
   261e8:	68a9      	ldr	r1, [r5, #8]
   261ea:	9100      	str	r1, [sp, #0]
   261ec:	4651      	mov	r1, sl
   261ee:	4648      	mov	r0, r9
   261f0:	f7eb fea6 	bl	11f40 <print_formatted>
		break;
   261f4:	e786      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   261f6:	686b      	ldr	r3, [r5, #4]
   261f8:	682a      	ldr	r2, [r5, #0]
   261fa:	6a69      	ldr	r1, [r5, #36]	; 0x24
   261fc:	9107      	str	r1, [sp, #28]
   261fe:	6a29      	ldr	r1, [r5, #32]
   26200:	9106      	str	r1, [sp, #24]
   26202:	69e9      	ldr	r1, [r5, #28]
   26204:	9105      	str	r1, [sp, #20]
   26206:	69a9      	ldr	r1, [r5, #24]
   26208:	9104      	str	r1, [sp, #16]
   2620a:	6969      	ldr	r1, [r5, #20]
   2620c:	9103      	str	r1, [sp, #12]
   2620e:	6929      	ldr	r1, [r5, #16]
   26210:	9102      	str	r1, [sp, #8]
   26212:	68e9      	ldr	r1, [r5, #12]
   26214:	9101      	str	r1, [sp, #4]
   26216:	68a9      	ldr	r1, [r5, #8]
   26218:	9100      	str	r1, [sp, #0]
   2621a:	4651      	mov	r1, sl
   2621c:	4648      	mov	r0, r9
   2621e:	f7eb fe8f 	bl	11f40 <print_formatted>
		break;
   26222:	e76f      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26224:	686b      	ldr	r3, [r5, #4]
   26226:	682a      	ldr	r2, [r5, #0]
   26228:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2622a:	9108      	str	r1, [sp, #32]
   2622c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2622e:	9107      	str	r1, [sp, #28]
   26230:	6a29      	ldr	r1, [r5, #32]
   26232:	9106      	str	r1, [sp, #24]
   26234:	69e9      	ldr	r1, [r5, #28]
   26236:	9105      	str	r1, [sp, #20]
   26238:	69a9      	ldr	r1, [r5, #24]
   2623a:	9104      	str	r1, [sp, #16]
   2623c:	6969      	ldr	r1, [r5, #20]
   2623e:	9103      	str	r1, [sp, #12]
   26240:	6929      	ldr	r1, [r5, #16]
   26242:	9102      	str	r1, [sp, #8]
   26244:	68e9      	ldr	r1, [r5, #12]
   26246:	9101      	str	r1, [sp, #4]
   26248:	68a9      	ldr	r1, [r5, #8]
   2624a:	9100      	str	r1, [sp, #0]
   2624c:	4651      	mov	r1, sl
   2624e:	4648      	mov	r0, r9
   26250:	f7eb fe76 	bl	11f40 <print_formatted>
		break;
   26254:	e756      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26256:	686b      	ldr	r3, [r5, #4]
   26258:	682a      	ldr	r2, [r5, #0]
   2625a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   2625c:	9109      	str	r1, [sp, #36]	; 0x24
   2625e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   26260:	9108      	str	r1, [sp, #32]
   26262:	6a69      	ldr	r1, [r5, #36]	; 0x24
   26264:	9107      	str	r1, [sp, #28]
   26266:	6a29      	ldr	r1, [r5, #32]
   26268:	9106      	str	r1, [sp, #24]
   2626a:	69e9      	ldr	r1, [r5, #28]
   2626c:	9105      	str	r1, [sp, #20]
   2626e:	69a9      	ldr	r1, [r5, #24]
   26270:	9104      	str	r1, [sp, #16]
   26272:	6969      	ldr	r1, [r5, #20]
   26274:	9103      	str	r1, [sp, #12]
   26276:	6929      	ldr	r1, [r5, #16]
   26278:	9102      	str	r1, [sp, #8]
   2627a:	68e9      	ldr	r1, [r5, #12]
   2627c:	9101      	str	r1, [sp, #4]
   2627e:	68a9      	ldr	r1, [r5, #8]
   26280:	9100      	str	r1, [sp, #0]
   26282:	4651      	mov	r1, sl
   26284:	4648      	mov	r0, r9
   26286:	f7eb fe5b 	bl	11f40 <print_formatted>
		break;
   2628a:	e73b      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2628c:	686b      	ldr	r3, [r5, #4]
   2628e:	682a      	ldr	r2, [r5, #0]
   26290:	6b29      	ldr	r1, [r5, #48]	; 0x30
   26292:	910a      	str	r1, [sp, #40]	; 0x28
   26294:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   26296:	9109      	str	r1, [sp, #36]	; 0x24
   26298:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2629a:	9108      	str	r1, [sp, #32]
   2629c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2629e:	9107      	str	r1, [sp, #28]
   262a0:	6a29      	ldr	r1, [r5, #32]
   262a2:	9106      	str	r1, [sp, #24]
   262a4:	69e9      	ldr	r1, [r5, #28]
   262a6:	9105      	str	r1, [sp, #20]
   262a8:	69a9      	ldr	r1, [r5, #24]
   262aa:	9104      	str	r1, [sp, #16]
   262ac:	6969      	ldr	r1, [r5, #20]
   262ae:	9103      	str	r1, [sp, #12]
   262b0:	6929      	ldr	r1, [r5, #16]
   262b2:	9102      	str	r1, [sp, #8]
   262b4:	68e9      	ldr	r1, [r5, #12]
   262b6:	9101      	str	r1, [sp, #4]
   262b8:	68a9      	ldr	r1, [r5, #8]
   262ba:	9100      	str	r1, [sp, #0]
   262bc:	4651      	mov	r1, sl
   262be:	4648      	mov	r0, r9
   262c0:	f7eb fe3e 	bl	11f40 <print_formatted>
		break;
   262c4:	e71e      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   262c6:	686b      	ldr	r3, [r5, #4]
   262c8:	682a      	ldr	r2, [r5, #0]
   262ca:	6b69      	ldr	r1, [r5, #52]	; 0x34
   262cc:	910b      	str	r1, [sp, #44]	; 0x2c
   262ce:	6b29      	ldr	r1, [r5, #48]	; 0x30
   262d0:	910a      	str	r1, [sp, #40]	; 0x28
   262d2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   262d4:	9109      	str	r1, [sp, #36]	; 0x24
   262d6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   262d8:	9108      	str	r1, [sp, #32]
   262da:	6a69      	ldr	r1, [r5, #36]	; 0x24
   262dc:	9107      	str	r1, [sp, #28]
   262de:	6a29      	ldr	r1, [r5, #32]
   262e0:	9106      	str	r1, [sp, #24]
   262e2:	69e9      	ldr	r1, [r5, #28]
   262e4:	9105      	str	r1, [sp, #20]
   262e6:	69a9      	ldr	r1, [r5, #24]
   262e8:	9104      	str	r1, [sp, #16]
   262ea:	6969      	ldr	r1, [r5, #20]
   262ec:	9103      	str	r1, [sp, #12]
   262ee:	6929      	ldr	r1, [r5, #16]
   262f0:	9102      	str	r1, [sp, #8]
   262f2:	68e9      	ldr	r1, [r5, #12]
   262f4:	9101      	str	r1, [sp, #4]
   262f6:	68a9      	ldr	r1, [r5, #8]
   262f8:	9100      	str	r1, [sp, #0]
   262fa:	4651      	mov	r1, sl
   262fc:	4648      	mov	r0, r9
   262fe:	f7eb fe1f 	bl	11f40 <print_formatted>
		break;
   26302:	e6ff      	b.n	26104 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26304:	686b      	ldr	r3, [r5, #4]
   26306:	682a      	ldr	r2, [r5, #0]
   26308:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   2630a:	910c      	str	r1, [sp, #48]	; 0x30
   2630c:	6b69      	ldr	r1, [r5, #52]	; 0x34
   2630e:	910b      	str	r1, [sp, #44]	; 0x2c
   26310:	6b29      	ldr	r1, [r5, #48]	; 0x30
   26312:	910a      	str	r1, [sp, #40]	; 0x28
   26314:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   26316:	9109      	str	r1, [sp, #36]	; 0x24
   26318:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2631a:	9108      	str	r1, [sp, #32]
   2631c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2631e:	9107      	str	r1, [sp, #28]
   26320:	6a29      	ldr	r1, [r5, #32]
   26322:	9106      	str	r1, [sp, #24]
   26324:	69e9      	ldr	r1, [r5, #28]
   26326:	9105      	str	r1, [sp, #20]
   26328:	69a9      	ldr	r1, [r5, #24]
   2632a:	9104      	str	r1, [sp, #16]
   2632c:	6969      	ldr	r1, [r5, #20]
   2632e:	9103      	str	r1, [sp, #12]
   26330:	6929      	ldr	r1, [r5, #16]
   26332:	9102      	str	r1, [sp, #8]
   26334:	68e9      	ldr	r1, [r5, #12]
   26336:	9101      	str	r1, [sp, #4]
   26338:	68a9      	ldr	r1, [r5, #8]
   2633a:	9100      	str	r1, [sp, #0]
   2633c:	4651      	mov	r1, sl
   2633e:	4648      	mov	r0, r9
   26340:	f7eb fdfe 	bl	11f40 <print_formatted>
}
   26344:	e6de      	b.n	26104 <std_print+0x74>

00026346 <log_output_flush>:
{
   26346:	b510      	push	{r4, lr}
   26348:	4604      	mov	r4, r0
		     output->control_block->offset,
   2634a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   2634c:	6853      	ldr	r3, [r2, #4]
   2634e:	6812      	ldr	r2, [r2, #0]
   26350:	6881      	ldr	r1, [r0, #8]
   26352:	6800      	ldr	r0, [r0, #0]
   26354:	f7ff fe77 	bl	26046 <buffer_write>
	output->control_block->offset = 0;
   26358:	6863      	ldr	r3, [r4, #4]
   2635a:	2200      	movs	r2, #0
   2635c:	601a      	str	r2, [r3, #0]
}
   2635e:	bd10      	pop	{r4, pc}

00026360 <log_output_msg_process>:
{
   26360:	b5f0      	push	{r4, r5, r6, r7, lr}
   26362:	b085      	sub	sp, #20
   26364:	4606      	mov	r6, r0
   26366:	460c      	mov	r4, r1
   26368:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2636a:	7a0b      	ldrb	r3, [r1, #8]
   2636c:	f083 0301 	eor.w	r3, r3, #1
   26370:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   26374:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   26376:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   26378:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   2637c:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   2637e:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   26382:	f011 0507 	ands.w	r5, r1, #7
   26386:	d10f      	bne.n	263a8 <log_output_msg_process+0x48>
   26388:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2638a:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   2638c:	f013 0f01 	tst.w	r3, #1
   26390:	d014      	beq.n	263bc <log_output_msg_process+0x5c>
	} else if (raw_string) {
   26392:	b9c5      	cbnz	r5, 263c6 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   26394:	4631      	mov	r1, r6
   26396:	4620      	mov	r0, r4
   26398:	f7eb ff82 	bl	122a0 <raw_string_print>
	if (!raw_string) {
   2639c:	b9cd      	cbnz	r5, 263d2 <log_output_msg_process+0x72>
	log_output_flush(output);
   2639e:	4630      	mov	r0, r6
   263a0:	f7ff ffd1 	bl	26346 <log_output_flush>
}
   263a4:	b005      	add	sp, #20
   263a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   263a8:	9002      	str	r0, [sp, #8]
   263aa:	f8cd c004 	str.w	ip, [sp, #4]
   263ae:	9500      	str	r5, [sp, #0]
   263b0:	4639      	mov	r1, r7
   263b2:	4630      	mov	r0, r6
   263b4:	f7eb feda 	bl	1216c <prefix_print>
   263b8:	4602      	mov	r2, r0
   263ba:	e7e6      	b.n	2638a <log_output_msg_process+0x2a>
		std_print(msg, output);
   263bc:	4631      	mov	r1, r6
   263be:	4620      	mov	r0, r4
   263c0:	f7ff fe66 	bl	26090 <std_print>
   263c4:	e7ea      	b.n	2639c <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   263c6:	463b      	mov	r3, r7
   263c8:	4631      	mov	r1, r6
   263ca:	4620      	mov	r0, r4
   263cc:	f7eb ff0a 	bl	121e4 <hexdump_print>
   263d0:	e7e4      	b.n	2639c <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   263d2:	462a      	mov	r2, r5
   263d4:	4639      	mov	r1, r7
   263d6:	4630      	mov	r0, r6
   263d8:	f7ff fe4e 	bl	26078 <postfix_print>
   263dc:	e7df      	b.n	2639e <log_output_msg_process+0x3e>

000263de <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   263de:	2200      	movs	r2, #0
   263e0:	6002      	str	r2, [r0, #0]
   263e2:	6042      	str	r2, [r0, #4]
   263e4:	6082      	str	r2, [r0, #8]
}
   263e6:	4770      	bx	lr

000263e8 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   263e8:	428b      	cmp	r3, r1
   263ea:	d901      	bls.n	263f0 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   263ec:	2000      	movs	r0, #0
	}
}
   263ee:	4770      	bx	lr
{
   263f0:	b538      	push	{r3, r4, r5, lr}
   263f2:	4615      	mov	r5, r2
   263f4:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   263f6:	461a      	mov	r2, r3
   263f8:	4629      	mov	r1, r5
   263fa:	f000 f9fd 	bl	267f8 <memcpy>
		return from_len;
   263fe:	4620      	mov	r0, r4
}
   26400:	bd38      	pop	{r3, r4, r5, pc}

00026402 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   26402:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   26404:	f000 fa1c 	bl	26840 <memset>
}
   26408:	bd08      	pop	{r3, pc}

0002640a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2640a:	09c3      	lsrs	r3, r0, #7
   2640c:	005a      	lsls	r2, r3, #1
   2640e:	4413      	add	r3, r2
   26410:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   26414:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   26418:	b2c0      	uxtb	r0, r0
   2641a:	4770      	bx	lr

0002641c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2641c:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2641e:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26420:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   26424:	2a00      	cmp	r2, #0
   26426:	db03      	blt.n	26430 <gf_double+0x14>
   26428:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   2642a:	f100 020f 	add.w	r2, r0, #15
   2642e:	e004      	b.n	2643a <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26430:	2487      	movs	r4, #135	; 0x87
   26432:	e7fa      	b.n	2642a <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   26434:	f813 0901 	ldrb.w	r0, [r3], #-1
   26438:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   2643a:	7818      	ldrb	r0, [r3, #0]
   2643c:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   26440:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   26444:	428b      	cmp	r3, r1
   26446:	d1f5      	bne.n	26434 <gf_double+0x18>
	}
}
   26448:	bc10      	pop	{r4}
   2644a:	4770      	bx	lr

0002644c <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   2644c:	b130      	cbz	r0, 2645c <tc_cmac_erase+0x10>
{
   2644e:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   26450:	2258      	movs	r2, #88	; 0x58
   26452:	2100      	movs	r1, #0
   26454:	f7ff ffd5 	bl	26402 <_set>

	return TC_CRYPTO_SUCCESS;
   26458:	2001      	movs	r0, #1
}
   2645a:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   2645c:	2000      	movs	r0, #0
}
   2645e:	4770      	bx	lr

00026460 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26460:	b1a0      	cbz	r0, 2648c <tc_cmac_init+0x2c>
{
   26462:	b510      	push	{r4, lr}
   26464:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26466:	2210      	movs	r2, #16
   26468:	2100      	movs	r1, #0
   2646a:	f7ff ffca 	bl	26402 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2646e:	2210      	movs	r2, #16
   26470:	2100      	movs	r1, #0
   26472:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26476:	f7ff ffc4 	bl	26402 <_set>
	s->leftover_offset = 0;
   2647a:	2300      	movs	r3, #0
   2647c:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2647e:	2200      	movs	r2, #0
   26480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26484:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   26488:	2001      	movs	r0, #1
}
   2648a:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2648c:	2000      	movs	r0, #0
}
   2648e:	4770      	bx	lr

00026490 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   26490:	b338      	cbz	r0, 264e2 <tc_cmac_setup+0x52>
{
   26492:	b570      	push	{r4, r5, r6, lr}
   26494:	460d      	mov	r5, r1
   26496:	4616      	mov	r6, r2
   26498:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   2649a:	b321      	cbz	r1, 264e6 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   2649c:	2258      	movs	r2, #88	; 0x58
   2649e:	2100      	movs	r1, #0
   264a0:	f7ff ffaf 	bl	26402 <_set>
	s->sched = sched;
   264a4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   264a6:	4629      	mov	r1, r5
   264a8:	4630      	mov	r0, r6
   264aa:	f7ec f96b 	bl	12784 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   264ae:	2210      	movs	r2, #16
   264b0:	2100      	movs	r1, #0
   264b2:	4620      	mov	r0, r4
   264b4:	f7ff ffa5 	bl	26402 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   264b8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   264ba:	4621      	mov	r1, r4
   264bc:	4620      	mov	r0, r4
   264be:	f7ec f9bf 	bl	12840 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   264c2:	f104 0510 	add.w	r5, r4, #16
   264c6:	4621      	mov	r1, r4
   264c8:	4628      	mov	r0, r5
   264ca:	f7ff ffa7 	bl	2641c <gf_double>
	gf_double (s->K2, s->K1);
   264ce:	4629      	mov	r1, r5
   264d0:	f104 0020 	add.w	r0, r4, #32
   264d4:	f7ff ffa2 	bl	2641c <gf_double>
	tc_cmac_init(s);
   264d8:	4620      	mov	r0, r4
   264da:	f7ff ffc1 	bl	26460 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   264de:	2001      	movs	r0, #1
}
   264e0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   264e2:	2000      	movs	r0, #0
}
   264e4:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   264e6:	2000      	movs	r0, #0
   264e8:	e7fa      	b.n	264e0 <tc_cmac_setup+0x50>

000264ea <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   264ea:	2800      	cmp	r0, #0
   264ec:	d062      	beq.n	265b4 <tc_cmac_update+0xca>
{
   264ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264f2:	460e      	mov	r6, r1
   264f4:	4617      	mov	r7, r2
   264f6:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   264f8:	2a00      	cmp	r2, #0
   264fa:	d05d      	beq.n	265b8 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   264fc:	2900      	cmp	r1, #0
   264fe:	d05e      	beq.n	265be <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   26500:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   26504:	ea50 0301 	orrs.w	r3, r0, r1
   26508:	d05b      	beq.n	265c2 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2650a:	f110 32ff 	adds.w	r2, r0, #4294967295
   2650e:	f141 33ff 	adc.w	r3, r1, #4294967295
   26512:	6522      	str	r2, [r4, #80]	; 0x50
   26514:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   26516:	6c65      	ldr	r5, [r4, #68]	; 0x44
   26518:	b3a5      	cbz	r5, 26584 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2651a:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   2651e:	4547      	cmp	r7, r8
   26520:	d30d      	bcc.n	2653e <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   26522:	f105 0030 	add.w	r0, r5, #48	; 0x30
   26526:	4643      	mov	r3, r8
   26528:	4632      	mov	r2, r6
   2652a:	4641      	mov	r1, r8
   2652c:	4420      	add	r0, r4
   2652e:	f7ff ff5b 	bl	263e8 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   26532:	3d10      	subs	r5, #16
   26534:	442f      	add	r7, r5
		data += remaining_space;
   26536:	4446      	add	r6, r8
		s->leftover_offset = 0;
   26538:	2300      	movs	r3, #0
   2653a:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2653c:	e013      	b.n	26566 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2653e:	f105 0030 	add.w	r0, r5, #48	; 0x30
   26542:	463b      	mov	r3, r7
   26544:	4632      	mov	r2, r6
   26546:	4639      	mov	r1, r7
   26548:	4420      	add	r0, r4
   2654a:	f7ff ff4d 	bl	263e8 <_copy>
			s->leftover_offset += data_length;
   2654e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   26550:	443b      	add	r3, r7
   26552:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   26554:	2001      	movs	r0, #1
   26556:	e030      	b.n	265ba <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   26558:	18e2      	adds	r2, r4, r3
   2655a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2655e:	5ce1      	ldrb	r1, [r4, r3]
   26560:	404a      	eors	r2, r1
   26562:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26564:	3301      	adds	r3, #1
   26566:	2b0f      	cmp	r3, #15
   26568:	d9f6      	bls.n	26558 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2656a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2656c:	4621      	mov	r1, r4
   2656e:	4620      	mov	r0, r4
   26570:	f7ec f966 	bl	12840 <tc_aes_encrypt>
   26574:	e006      	b.n	26584 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26576:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26578:	4621      	mov	r1, r4
   2657a:	4620      	mov	r0, r4
   2657c:	f7ec f960 	bl	12840 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   26580:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   26582:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   26584:	2f10      	cmp	r7, #16
   26586:	d908      	bls.n	2659a <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26588:	2300      	movs	r3, #0
   2658a:	2b0f      	cmp	r3, #15
   2658c:	d8f3      	bhi.n	26576 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   2658e:	5cf0      	ldrb	r0, [r6, r3]
   26590:	5ce5      	ldrb	r5, [r4, r3]
   26592:	4068      	eors	r0, r5
   26594:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26596:	3301      	adds	r3, #1
   26598:	e7f7      	b.n	2658a <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   2659a:	b90f      	cbnz	r7, 265a0 <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2659c:	2001      	movs	r0, #1
   2659e:	e00c      	b.n	265ba <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   265a0:	463b      	mov	r3, r7
   265a2:	4632      	mov	r2, r6
   265a4:	4639      	mov	r1, r7
   265a6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   265aa:	f7ff ff1d 	bl	263e8 <_copy>
		s->leftover_offset = data_length;
   265ae:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   265b0:	2001      	movs	r0, #1
   265b2:	e002      	b.n	265ba <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   265b4:	2000      	movs	r0, #0
}
   265b6:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   265b8:	2001      	movs	r0, #1
}
   265ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   265be:	2000      	movs	r0, #0
   265c0:	e7fb      	b.n	265ba <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   265c2:	2000      	movs	r0, #0
   265c4:	e7f9      	b.n	265ba <tc_cmac_update+0xd0>

000265c6 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   265c6:	b370      	cbz	r0, 26626 <tc_cmac_final+0x60>
{
   265c8:	b538      	push	{r3, r4, r5, lr}
   265ca:	460c      	mov	r4, r1
   265cc:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   265ce:	b361      	cbz	r1, 2662a <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   265d0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   265d2:	2a10      	cmp	r2, #16
   265d4:	d10d      	bne.n	265f2 <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   265d6:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   265d8:	2300      	movs	r3, #0
   265da:	2b0f      	cmp	r3, #15
   265dc:	d819      	bhi.n	26612 <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   265de:	18e2      	adds	r2, r4, r3
   265e0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   265e4:	5cc8      	ldrb	r0, [r1, r3]
   265e6:	4050      	eors	r0, r2
   265e8:	5ce2      	ldrb	r2, [r4, r3]
   265ea:	4042      	eors	r2, r0
   265ec:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   265ee:	3301      	adds	r3, #1
   265f0:	e7f3      	b.n	265da <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   265f2:	f102 0030 	add.w	r0, r2, #48	; 0x30
   265f6:	f1c2 0210 	rsb	r2, r2, #16
   265fa:	2100      	movs	r1, #0
   265fc:	4420      	add	r0, r4
   265fe:	f7ff ff00 	bl	26402 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   26602:	6c63      	ldr	r3, [r4, #68]	; 0x44
   26604:	4423      	add	r3, r4
   26606:	2280      	movs	r2, #128	; 0x80
   26608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2660c:	f104 0120 	add.w	r1, r4, #32
   26610:	e7e2      	b.n	265d8 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   26612:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26614:	4621      	mov	r1, r4
   26616:	4628      	mov	r0, r5
   26618:	f7ec f912 	bl	12840 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2661c:	4620      	mov	r0, r4
   2661e:	f7ff ff15 	bl	2644c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   26622:	2001      	movs	r0, #1
}
   26624:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   26626:	2000      	movs	r0, #0
}
   26628:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2662a:	2000      	movs	r0, #0
   2662c:	e7fa      	b.n	26624 <tc_cmac_final+0x5e>

0002662e <abort_function>:
{
   2662e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   26630:	2000      	movs	r0, #0
   26632:	f7ea fe75 	bl	11320 <sys_reboot>

00026636 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   26636:	b538      	push	{r3, r4, r5, lr}
   26638:	4604      	mov	r4, r0

	if (esf != NULL) {
   2663a:	460d      	mov	r5, r1
   2663c:	b111      	cbz	r1, 26644 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   2663e:	4608      	mov	r0, r1
   26640:	f7ec fd94 	bl	1316c <esf_dump>
	}
	z_fatal_error(reason, esf);
   26644:	4629      	mov	r1, r5
   26646:	4620      	mov	r0, r4
   26648:	f7f7 fc2c 	bl	1dea4 <z_fatal_error>
}
   2664c:	bd38      	pop	{r3, r4, r5, pc}

0002664e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2664e:	b508      	push	{r3, lr}
   26650:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   26652:	6800      	ldr	r0, [r0, #0]
   26654:	f7ff ffef 	bl	26636 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   26658:	bd08      	pop	{r3, pc}

0002665a <z_irq_spurious>:
{
   2665a:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2665c:	2100      	movs	r1, #0
   2665e:	2001      	movs	r0, #1
   26660:	f7ff ffe9 	bl	26636 <z_arm_fatal_error>
}
   26664:	bd08      	pop	{r3, pc}

00026666 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   26666:	b508      	push	{r3, lr}
	handler();
   26668:	f7ec fe4a 	bl	13300 <z_SysNmiOnReset>
	z_arm_int_exit();
   2666c:	f7ec ff46 	bl	134fc <z_arm_exc_exit>
}
   26670:	bd08      	pop	{r3, pc}

00026672 <memory_fault_recoverable>:
}
   26672:	2000      	movs	r0, #0
   26674:	4770      	bx	lr

00026676 <fault_handle>:
{
   26676:	b508      	push	{r3, lr}
	*recoverable = false;
   26678:	2300      	movs	r3, #0
   2667a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   2667c:	1ecb      	subs	r3, r1, #3
   2667e:	2b09      	cmp	r3, #9
   26680:	d81a      	bhi.n	266b8 <fault_handle+0x42>
   26682:	e8df f003 	tbb	[pc, r3]
   26686:	0905      	.short	0x0905
   26688:	1919110d 	.word	0x1919110d
   2668c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   26690:	4611      	mov	r1, r2
   26692:	f7ed f9e5 	bl	13a60 <hard_fault>
}
   26696:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   26698:	2100      	movs	r1, #0
   2669a:	f7ed f8e1 	bl	13860 <mem_manage_fault>
		break;
   2669e:	e7fa      	b.n	26696 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   266a0:	2100      	movs	r1, #0
   266a2:	f7ed f805 	bl	136b0 <bus_fault>
		break;
   266a6:	e7f6      	b.n	26696 <fault_handle+0x20>
		reason = usage_fault(esf);
   266a8:	f7ec ff36 	bl	13518 <usage_fault>
		break;
   266ac:	e7f3      	b.n	26696 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   266ae:	4611      	mov	r1, r2
   266b0:	f7ec ffe4 	bl	1367c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   266b4:	2000      	movs	r0, #0
		break;
   266b6:	e7ee      	b.n	26696 <fault_handle+0x20>
		reserved_exception(esf, fault);
   266b8:	f7ed faaa 	bl	13c10 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   266bc:	2000      	movs	r0, #0
	return reason;
   266be:	e7ea      	b.n	26696 <fault_handle+0x20>

000266c0 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   266c0:	6843      	ldr	r3, [r0, #4]
   266c2:	1e5a      	subs	r2, r3, #1
		&&
   266c4:	4213      	tst	r3, r2
   266c6:	d106      	bne.n	266d6 <mpu_partition_is_valid+0x16>
		&&
   266c8:	2b1f      	cmp	r3, #31
   266ca:	d906      	bls.n	266da <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   266cc:	6803      	ldr	r3, [r0, #0]
		&&
   266ce:	421a      	tst	r2, r3
   266d0:	d005      	beq.n	266de <mpu_partition_is_valid+0x1e>
   266d2:	2000      	movs	r0, #0
   266d4:	4770      	bx	lr
   266d6:	2000      	movs	r0, #0
   266d8:	4770      	bx	lr
   266da:	2000      	movs	r0, #0
   266dc:	4770      	bx	lr
   266de:	2001      	movs	r0, #1
}
   266e0:	4770      	bx	lr

000266e2 <mpu_configure_region>:
{
   266e2:	b500      	push	{lr}
   266e4:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   266e6:	680b      	ldr	r3, [r1, #0]
   266e8:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   266ea:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   266ec:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   266ee:	2b20      	cmp	r3, #32
   266f0:	d912      	bls.n	26718 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   266f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   266f6:	d811      	bhi.n	2671c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   266f8:	3b01      	subs	r3, #1
   266fa:	fab3 f383 	clz	r3, r3
   266fe:	f1c3 031f 	rsb	r3, r3, #31
   26702:	005b      	lsls	r3, r3, #1
   26704:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   26708:	4313      	orrs	r3, r2
   2670a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   2670c:	a901      	add	r1, sp, #4
   2670e:	f7ed fbf5 	bl	13efc <region_allocate_and_init>
}
   26712:	b005      	add	sp, #20
   26714:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   26718:	2308      	movs	r3, #8
   2671a:	e7f5      	b.n	26708 <mpu_configure_region+0x26>
		return REGION_4G;
   2671c:	233e      	movs	r3, #62	; 0x3e
   2671e:	e7f3      	b.n	26708 <mpu_configure_region+0x26>

00026720 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   26720:	4602      	mov	r2, r0
   26722:	780b      	ldrb	r3, [r1, #0]
   26724:	b11b      	cbz	r3, 2672e <strcpy+0xe>
		*d = *s;
   26726:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   2672a:	3101      	adds	r1, #1
   2672c:	e7f9      	b.n	26722 <strcpy+0x2>
	}

	*d = '\0';
   2672e:	7013      	strb	r3, [r2, #0]

	return dest;
}
   26730:	4770      	bx	lr

00026732 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   26732:	4603      	mov	r3, r0
   26734:	b1a2      	cbz	r2, 26760 <strncpy+0x2e>
{
   26736:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   26738:	780c      	ldrb	r4, [r1, #0]
   2673a:	b12c      	cbz	r4, 26748 <strncpy+0x16>
		*d = *s;
   2673c:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   26740:	3101      	adds	r1, #1
		d++;
		n--;
   26742:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   26744:	2a00      	cmp	r2, #0
   26746:	d1f7      	bne.n	26738 <strncpy+0x6>
	}

	while (n > 0) {
   26748:	b122      	cbz	r2, 26754 <strncpy+0x22>
		*d = '\0';
   2674a:	2100      	movs	r1, #0
   2674c:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   26750:	3a01      	subs	r2, #1
   26752:	e7f9      	b.n	26748 <strncpy+0x16>
	}

	return dest;
}
   26754:	bc10      	pop	{r4}
   26756:	4770      	bx	lr
		*d = '\0';
   26758:	2100      	movs	r1, #0
   2675a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2675e:	3a01      	subs	r2, #1
	while (n > 0) {
   26760:	2a00      	cmp	r2, #0
   26762:	d1f9      	bne.n	26758 <strncpy+0x26>
   26764:	4770      	bx	lr

00026766 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   26766:	4603      	mov	r3, r0
	size_t n = 0;
   26768:	2000      	movs	r0, #0

	while (*s != '\0') {
   2676a:	781a      	ldrb	r2, [r3, #0]
   2676c:	b112      	cbz	r2, 26774 <strlen+0xe>
		s++;
   2676e:	3301      	adds	r3, #1
		n++;
   26770:	3001      	adds	r0, #1
   26772:	e7fa      	b.n	2676a <strlen+0x4>
	}

	return n;
}
   26774:	4770      	bx	lr

00026776 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   26776:	4603      	mov	r3, r0
	size_t n = 0;
   26778:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2677a:	781a      	ldrb	r2, [r3, #0]
   2677c:	b122      	cbz	r2, 26788 <strnlen+0x12>
   2677e:	4288      	cmp	r0, r1
   26780:	d202      	bcs.n	26788 <strnlen+0x12>
		s++;
   26782:	3301      	adds	r3, #1
		n++;
   26784:	3001      	adds	r0, #1
   26786:	e7f8      	b.n	2677a <strnlen+0x4>
	}

	return n;
}
   26788:	4770      	bx	lr

0002678a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2678a:	7803      	ldrb	r3, [r0, #0]
   2678c:	780a      	ldrb	r2, [r1, #0]
   2678e:	4293      	cmp	r3, r2
   26790:	d103      	bne.n	2679a <strcmp+0x10>
   26792:	b113      	cbz	r3, 2679a <strcmp+0x10>
		s1++;
   26794:	3001      	adds	r0, #1
		s2++;
   26796:	3101      	adds	r1, #1
   26798:	e7f7      	b.n	2678a <strcmp>
	}

	return *s1 - *s2;
}
   2679a:	1a98      	subs	r0, r3, r2
   2679c:	4770      	bx	lr

0002679e <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2679e:	b17a      	cbz	r2, 267c0 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   267a0:	1e53      	subs	r3, r2, #1
   267a2:	d00f      	beq.n	267c4 <memcmp+0x26>
{
   267a4:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   267a6:	7804      	ldrb	r4, [r0, #0]
   267a8:	780a      	ldrb	r2, [r1, #0]
   267aa:	4294      	cmp	r4, r2
   267ac:	d103      	bne.n	267b6 <memcmp+0x18>
		c1++;
   267ae:	3001      	adds	r0, #1
		c2++;
   267b0:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   267b2:	3b01      	subs	r3, #1
   267b4:	d1f7      	bne.n	267a6 <memcmp+0x8>
	}

	return *c1 - *c2;
   267b6:	7800      	ldrb	r0, [r0, #0]
   267b8:	780b      	ldrb	r3, [r1, #0]
   267ba:	1ac0      	subs	r0, r0, r3
}
   267bc:	bc10      	pop	{r4}
   267be:	4770      	bx	lr
		return 0;
   267c0:	2000      	movs	r0, #0
   267c2:	4770      	bx	lr
	return *c1 - *c2;
   267c4:	7800      	ldrb	r0, [r0, #0]
   267c6:	780b      	ldrb	r3, [r1, #0]
   267c8:	1ac0      	subs	r0, r0, r3
}
   267ca:	4770      	bx	lr

000267cc <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   267cc:	1a43      	subs	r3, r0, r1
   267ce:	4293      	cmp	r3, r2
   267d0:	d30b      	bcc.n	267ea <memmove+0x1e>
	char *dest = d;
   267d2:	4603      	mov	r3, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   267d4:	b17a      	cbz	r2, 267f6 <memmove+0x2a>
{
   267d6:	b410      	push	{r4}
			*dest = *src;
   267d8:	f811 4b01 	ldrb.w	r4, [r1], #1
   267dc:	f803 4b01 	strb.w	r4, [r3], #1
			dest++;
			src++;
			n--;
   267e0:	3a01      	subs	r2, #1
		while (n > 0) {
   267e2:	2a00      	cmp	r2, #0
   267e4:	d1f8      	bne.n	267d8 <memmove+0xc>
		}
	}

	return d;
}
   267e6:	bc10      	pop	{r4}
   267e8:	4770      	bx	lr
		while (n > 0) {
   267ea:	b11a      	cbz	r2, 267f4 <memmove+0x28>
			n--;
   267ec:	3a01      	subs	r2, #1
			dest[n] = src[n];
   267ee:	5c8b      	ldrb	r3, [r1, r2]
   267f0:	5483      	strb	r3, [r0, r2]
   267f2:	e7fa      	b.n	267ea <memmove+0x1e>
   267f4:	4770      	bx	lr
   267f6:	4770      	bx	lr

000267f8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   267f8:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   267fa:	ea80 0301 	eor.w	r3, r0, r1
   267fe:	f013 0f03 	tst.w	r3, #3
   26802:	d001      	beq.n	26808 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   26804:	4603      	mov	r3, r0
   26806:	e017      	b.n	26838 <memcpy+0x40>
   26808:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   2680a:	f013 0f03 	tst.w	r3, #3
   2680e:	d00b      	beq.n	26828 <memcpy+0x30>
			if (n == 0) {
   26810:	b1a2      	cbz	r2, 2683c <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   26812:	f811 4b01 	ldrb.w	r4, [r1], #1
   26816:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   2681a:	3a01      	subs	r2, #1
   2681c:	e7f5      	b.n	2680a <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   2681e:	f851 4b04 	ldr.w	r4, [r1], #4
   26822:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   26826:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   26828:	2a03      	cmp	r2, #3
   2682a:	d8f8      	bhi.n	2681e <memcpy+0x26>
   2682c:	e004      	b.n	26838 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   2682e:	f811 4b01 	ldrb.w	r4, [r1], #1
   26832:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   26836:	3a01      	subs	r2, #1
	while (n > 0) {
   26838:	2a00      	cmp	r2, #0
   2683a:	d1f8      	bne.n	2682e <memcpy+0x36>
	}

	return d;
}
   2683c:	bc10      	pop	{r4}
   2683e:	4770      	bx	lr

00026840 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   26840:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   26842:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   26844:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   26846:	f013 0f03 	tst.w	r3, #3
   2684a:	d004      	beq.n	26856 <memset+0x16>
		if (n == 0) {
   2684c:	b19a      	cbz	r2, 26876 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   2684e:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   26852:	3a01      	subs	r2, #1
   26854:	e7f7      	b.n	26846 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   26856:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   26858:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   2685c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   26860:	2a03      	cmp	r2, #3
   26862:	d906      	bls.n	26872 <memset+0x32>
		*(d_word++) = c_word;
   26864:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   26868:	3a04      	subs	r2, #4
   2686a:	e7f9      	b.n	26860 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   2686c:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   26870:	3a01      	subs	r2, #1
	while (n > 0) {
   26872:	2a00      	cmp	r2, #0
   26874:	d1fa      	bne.n	2686c <memset+0x2c>
	}

	return buf;
}
   26876:	bc10      	pop	{r4}
   26878:	4770      	bx	lr

0002687a <_stdout_hook_default>:
}
   2687a:	f04f 30ff 	mov.w	r0, #4294967295
   2687e:	4770      	bx	lr

00026880 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   26880:	b084      	sub	sp, #16
   26882:	ab04      	add	r3, sp, #16
   26884:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   26888:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2688c:	2b06      	cmp	r3, #6
   2688e:	d001      	beq.n	26894 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   26890:	b004      	add	sp, #16
   26892:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   26894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26898:	2201      	movs	r2, #1
   2689a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2689e:	f3bf 8f4f 	dsb	sy
        __WFE();
   268a2:	bf20      	wfe
    while (true)
   268a4:	e7fd      	b.n	268a2 <pm_power_state_set+0x22>

000268a6 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   268a6:	b084      	sub	sp, #16
   268a8:	ab04      	add	r3, sp, #16
   268aa:	e903 0007 	stmdb	r3, {r0, r1, r2}
   268ae:	2300      	movs	r3, #0
   268b0:	f383 8811 	msr	BASEPRI, r3
   268b4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   268b8:	b004      	add	sp, #16
   268ba:	4770      	bx	lr

000268bc <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   268bc:	b510      	push	{r4, lr}
   268be:	b08a      	sub	sp, #40	; 0x28
   268c0:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   268c2:	a905      	add	r1, sp, #20
   268c4:	f7ed fd1e 	bl	14304 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   268c8:	4669      	mov	r1, sp
   268ca:	4620      	mov	r0, r4
   268cc:	f7ed fd1a 	bl	14304 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   268d0:	2210      	movs	r2, #16
   268d2:	f10d 0101 	add.w	r1, sp, #1
   268d6:	f10d 0015 	add.w	r0, sp, #21
   268da:	f7ff ff60 	bl	2679e <memcmp>
}
   268de:	b00a      	add	sp, #40	; 0x28
   268e0:	bd10      	pop	{r4, pc}

000268e2 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   268e2:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   268e4:	7803      	ldrb	r3, [r0, #0]
   268e6:	780a      	ldrb	r2, [r1, #0]
   268e8:	4293      	cmp	r3, r2
   268ea:	d107      	bne.n	268fc <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   268ec:	2b01      	cmp	r3, #1
   268ee:	d00c      	beq.n	2690a <bt_uuid_cmp+0x28>
   268f0:	2b02      	cmp	r3, #2
   268f2:	d00e      	beq.n	26912 <bt_uuid_cmp+0x30>
   268f4:	b12b      	cbz	r3, 26902 <bt_uuid_cmp+0x20>
   268f6:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   268fa:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   268fc:	f7ff ffde 	bl	268bc <uuid128_cmp>
   26900:	e7fb      	b.n	268fa <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   26902:	8840      	ldrh	r0, [r0, #2]
   26904:	884b      	ldrh	r3, [r1, #2]
   26906:	1ac0      	subs	r0, r0, r3
   26908:	e7f7      	b.n	268fa <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2690a:	6840      	ldr	r0, [r0, #4]
   2690c:	684b      	ldr	r3, [r1, #4]
   2690e:	1ac0      	subs	r0, r0, r3
   26910:	e7f3      	b.n	268fa <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26912:	2210      	movs	r2, #16
   26914:	3101      	adds	r1, #1
   26916:	3001      	adds	r0, #1
   26918:	f7ff ff41 	bl	2679e <memcmp>
   2691c:	e7ed      	b.n	268fa <bt_uuid_cmp+0x18>

0002691e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   2691e:	b538      	push	{r3, r4, r5, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   26920:	2a04      	cmp	r2, #4
   26922:	d00e      	beq.n	26942 <bt_uuid_create+0x24>
   26924:	2a10      	cmp	r2, #16
   26926:	d01b      	beq.n	26960 <bt_uuid_create+0x42>
   26928:	2a02      	cmp	r2, #2
   2692a:	d001      	beq.n	26930 <bt_uuid_create+0x12>
   2692c:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   2692e:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_16;
   26930:	2300      	movs	r3, #0
   26932:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   26934:	784a      	ldrb	r2, [r1, #1]
   26936:	780b      	ldrb	r3, [r1, #0]
   26938:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2693c:	8043      	strh	r3, [r0, #2]
	return true;
   2693e:	2001      	movs	r0, #1
		break;
   26940:	e7f5      	b.n	2692e <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   26942:	2301      	movs	r3, #1
   26944:	7003      	strb	r3, [r0, #0]
   26946:	78cc      	ldrb	r4, [r1, #3]
   26948:	788a      	ldrb	r2, [r1, #2]
   2694a:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   2694e:	784d      	ldrb	r5, [r1, #1]
   26950:	780a      	ldrb	r2, [r1, #0]
   26952:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26956:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2695a:	6042      	str	r2, [r0, #4]
	return true;
   2695c:	4618      	mov	r0, r3
		break;
   2695e:	e7e6      	b.n	2692e <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   26960:	2302      	movs	r3, #2
   26962:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   26966:	2210      	movs	r2, #16
   26968:	f7ff ff46 	bl	267f8 <memcpy>
	return true;
   2696c:	2001      	movs	r0, #1
		break;
   2696e:	e7de      	b.n	2692e <bt_uuid_create+0x10>

00026970 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   26970:	b510      	push	{r4, lr}
   26972:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   26974:	2301      	movs	r3, #1
   26976:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2697a:	2106      	movs	r1, #6
   2697c:	f7f5 ff22 	bl	1c7c4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   26980:	b918      	cbnz	r0, 2698a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   26982:	79a3      	ldrb	r3, [r4, #6]
   26984:	f063 033f 	orn	r3, r3, #63	; 0x3f
   26988:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2698a:	bd10      	pop	{r4, pc}

0002698c <hci_disconn_complete_prio>:
{
   2698c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2698e:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   26990:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   26994:	781b      	ldrb	r3, [r3, #0]
   26996:	b103      	cbz	r3, 2699a <hci_disconn_complete_prio+0xe>
}
   26998:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   2699a:	4620      	mov	r0, r4
   2699c:	f7f0 fcd0 	bl	17340 <bt_conn_lookup_handle>
	if (!conn) {
   269a0:	4605      	mov	r5, r0
   269a2:	b130      	cbz	r0, 269b2 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   269a4:	2101      	movs	r1, #1
   269a6:	f7f0 fcd5 	bl	17354 <bt_conn_set_state>
	bt_conn_unref(conn);
   269aa:	4628      	mov	r0, r5
   269ac:	f7f0 fc8e 	bl	172cc <bt_conn_unref>
   269b0:	e7f2      	b.n	26998 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   269b2:	4620      	mov	r0, r4
   269b4:	f7ed fd56 	bl	14464 <conn_handle_disconnected>
		return;
   269b8:	e7ee      	b.n	26998 <hci_disconn_complete_prio+0xc>

000269ba <set_event_mask>:
{
   269ba:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   269bc:	2108      	movs	r1, #8
   269be:	f640 4001 	movw	r0, #3073	; 0xc01
   269c2:	f7ee fa97 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   269c6:	b1b8      	cbz	r0, 269f8 <set_event_mask+0x3e>
   269c8:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   269ca:	2108      	movs	r1, #8
   269cc:	4408      	add	r0, r1
   269ce:	f7f3 ff0f 	bl	1a7f0 <net_buf_simple_add>
	dst[0] = val;
   269d2:	2310      	movs	r3, #16
   269d4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   269d6:	2388      	movs	r3, #136	; 0x88
   269d8:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   269da:	2200      	movs	r2, #0
   269dc:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   269de:	2302      	movs	r3, #2
   269e0:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   269e2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   269e4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   269e6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   269e8:	2320      	movs	r3, #32
   269ea:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   269ec:	4621      	mov	r1, r4
   269ee:	f640 4001 	movw	r0, #3073	; 0xc01
   269f2:	f7ee facf 	bl	14f94 <bt_hci_cmd_send_sync>
}
   269f6:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   269f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   269fc:	e7fb      	b.n	269f6 <set_event_mask+0x3c>

000269fe <bt_hci_disconnect>:
{
   269fe:	b570      	push	{r4, r5, r6, lr}
   26a00:	4605      	mov	r5, r0
   26a02:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   26a04:	2103      	movs	r1, #3
   26a06:	f240 4006 	movw	r0, #1030	; 0x406
   26a0a:	f7ee fa73 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   26a0e:	b168      	cbz	r0, 26a2c <bt_hci_disconnect+0x2e>
   26a10:	4606      	mov	r6, r0
   26a12:	2103      	movs	r1, #3
   26a14:	3008      	adds	r0, #8
   26a16:	f7f3 feeb 	bl	1a7f0 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   26a1a:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   26a1c:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26a1e:	2200      	movs	r2, #0
   26a20:	4631      	mov	r1, r6
   26a22:	f240 4006 	movw	r0, #1030	; 0x406
   26a26:	f7ee fab5 	bl	14f94 <bt_hci_cmd_send_sync>
}
   26a2a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   26a2c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26a30:	e7fb      	b.n	26a2a <bt_hci_disconnect+0x2c>

00026a32 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   26a32:	8802      	ldrh	r2, [r0, #0]
   26a34:	8843      	ldrh	r3, [r0, #2]
   26a36:	429a      	cmp	r2, r3
   26a38:	d819      	bhi.n	26a6e <bt_le_conn_params_valid+0x3c>
   26a3a:	2a05      	cmp	r2, #5
   26a3c:	d919      	bls.n	26a72 <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   26a3e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   26a42:	d818      	bhi.n	26a76 <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   26a44:	8881      	ldrh	r1, [r0, #4]
   26a46:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   26a4a:	d216      	bcs.n	26a7a <bt_le_conn_params_valid+0x48>
{
   26a4c:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   26a4e:	88c0      	ldrh	r0, [r0, #6]
   26a50:	f1a0 020a 	sub.w	r2, r0, #10
   26a54:	b292      	uxth	r2, r2
   26a56:	f640 4476 	movw	r4, #3190	; 0xc76
   26a5a:	42a2      	cmp	r2, r4
   26a5c:	d80f      	bhi.n	26a7e <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   26a5e:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   26a62:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   26a66:	d20c      	bcs.n	26a82 <bt_le_conn_params_valid+0x50>
	return true;
   26a68:	2001      	movs	r0, #1
}
   26a6a:	bc10      	pop	{r4}
   26a6c:	4770      	bx	lr
		return false;
   26a6e:	2000      	movs	r0, #0
   26a70:	4770      	bx	lr
   26a72:	2000      	movs	r0, #0
   26a74:	4770      	bx	lr
   26a76:	2000      	movs	r0, #0
   26a78:	4770      	bx	lr
		return false;
   26a7a:	2000      	movs	r0, #0
}
   26a7c:	4770      	bx	lr
		return false;
   26a7e:	2000      	movs	r0, #0
   26a80:	e7f3      	b.n	26a6a <bt_le_conn_params_valid+0x38>
   26a82:	2000      	movs	r0, #0
   26a84:	e7f1      	b.n	26a6a <bt_le_conn_params_valid+0x38>

00026a86 <bt_le_set_data_len>:
{
   26a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a88:	4606      	mov	r6, r0
   26a8a:	460f      	mov	r7, r1
   26a8c:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26a8e:	2106      	movs	r1, #6
   26a90:	f242 0022 	movw	r0, #8226	; 0x2022
   26a94:	f7ee fa2e 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   26a98:	b170      	cbz	r0, 26ab8 <bt_le_set_data_len+0x32>
   26a9a:	4605      	mov	r5, r0
   26a9c:	2106      	movs	r1, #6
   26a9e:	3008      	adds	r0, #8
   26aa0:	f7f3 fea6 	bl	1a7f0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26aa4:	8833      	ldrh	r3, [r6, #0]
   26aa6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   26aa8:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   26aaa:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   26aac:	4629      	mov	r1, r5
   26aae:	f242 0022 	movw	r0, #8226	; 0x2022
   26ab2:	f7ee fd39 	bl	15528 <bt_hci_cmd_send>
}
   26ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   26ab8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26abc:	e7fb      	b.n	26ab6 <bt_le_set_data_len+0x30>

00026abe <bt_le_set_phy>:
{
   26abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ac2:	4607      	mov	r7, r0
   26ac4:	460e      	mov	r6, r1
   26ac6:	4615      	mov	r5, r2
   26ac8:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   26aca:	2107      	movs	r1, #7
   26acc:	f242 0032 	movw	r0, #8242	; 0x2032
   26ad0:	f7ee fa10 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   26ad4:	b1a0      	cbz	r0, 26b00 <bt_le_set_phy+0x42>
   26ad6:	4680      	mov	r8, r0
   26ad8:	2107      	movs	r1, #7
   26ada:	3008      	adds	r0, #8
   26adc:	f7f3 fe88 	bl	1a7f0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26ae0:	883b      	ldrh	r3, [r7, #0]
   26ae2:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   26ae4:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   26ae6:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   26ae8:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   26aea:	f89d 3018 	ldrb.w	r3, [sp, #24]
   26aee:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   26af2:	4641      	mov	r1, r8
   26af4:	f242 0032 	movw	r0, #8242	; 0x2032
   26af8:	f7ee fd16 	bl	15528 <bt_hci_cmd_send>
}
   26afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   26b00:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26b04:	e7fa      	b.n	26afc <bt_le_set_phy+0x3e>

00026b06 <hci_le_read_remote_features>:
{
   26b06:	b538      	push	{r3, r4, r5, lr}
   26b08:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   26b0a:	2102      	movs	r1, #2
   26b0c:	f242 0016 	movw	r0, #8214	; 0x2016
   26b10:	f7ee f9f0 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   26b14:	b168      	cbz	r0, 26b32 <hci_le_read_remote_features+0x2c>
   26b16:	4605      	mov	r5, r0
   26b18:	2102      	movs	r1, #2
   26b1a:	3008      	adds	r0, #8
   26b1c:	f7f3 fe68 	bl	1a7f0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26b20:	8823      	ldrh	r3, [r4, #0]
   26b22:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   26b24:	4629      	mov	r1, r5
   26b26:	f242 0016 	movw	r0, #8214	; 0x2016
   26b2a:	f7ee fcfd 	bl	15528 <bt_hci_cmd_send>
	return 0;
   26b2e:	2000      	movs	r0, #0
}
   26b30:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   26b32:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26b36:	e7fb      	b.n	26b30 <hci_le_read_remote_features+0x2a>

00026b38 <enh_conn_complete>:
{
   26b38:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   26b3a:	f7ee fdbb 	bl	156b4 <bt_hci_le_enh_conn_complete>
}
   26b3e:	bd08      	pop	{r3, pc}

00026b40 <le_enh_conn_complete>:
{
   26b40:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   26b42:	6880      	ldr	r0, [r0, #8]
   26b44:	f7ff fff8 	bl	26b38 <enh_conn_complete>
}
   26b48:	bd08      	pop	{r3, pc}

00026b4a <le_legacy_conn_complete>:
{
   26b4a:	b510      	push	{r4, lr}
   26b4c:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   26b4e:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   26b50:	780b      	ldrb	r3, [r1, #0]
   26b52:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   26b56:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   26b5a:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   26b5e:	78cb      	ldrb	r3, [r1, #3]
   26b60:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   26b64:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   26b68:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   26b6c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   26b70:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   26b74:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   26b78:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   26b7c:	7c4b      	ldrb	r3, [r1, #17]
   26b7e:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   26b82:	2207      	movs	r2, #7
   26b84:	3104      	adds	r1, #4
   26b86:	a801      	add	r0, sp, #4
   26b88:	f7ff fe36 	bl	267f8 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   26b8c:	2400      	movs	r4, #0
   26b8e:	940a      	str	r4, [sp, #40]	; 0x28
   26b90:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
   26b94:	2206      	movs	r2, #6
   26b96:	a90a      	add	r1, sp, #40	; 0x28
   26b98:	f10d 000b 	add.w	r0, sp, #11
   26b9c:	f7ff fe2c 	bl	267f8 <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   26ba0:	9408      	str	r4, [sp, #32]
   26ba2:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   26ba6:	2206      	movs	r2, #6
   26ba8:	a908      	add	r1, sp, #32
   26baa:	f10d 0011 	add.w	r0, sp, #17
   26bae:	f7ff fe23 	bl	267f8 <memcpy>
	enh_conn_complete(&enh);
   26bb2:	4668      	mov	r0, sp
   26bb4:	f7ff ffc0 	bl	26b38 <enh_conn_complete>
}
   26bb8:	b00c      	add	sp, #48	; 0x30
   26bba:	bd10      	pop	{r4, pc}

00026bbc <le_conn_param_req_reply>:
{
   26bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26bbe:	4606      	mov	r6, r0
   26bc0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   26bc2:	210e      	movs	r1, #14
   26bc4:	f242 0020 	movw	r0, #8224	; 0x2020
   26bc8:	f7ee f994 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   26bcc:	b1c0      	cbz	r0, 26c00 <le_conn_param_req_reply+0x44>
   26bce:	4607      	mov	r7, r0
   26bd0:	210e      	movs	r1, #14
   26bd2:	3008      	adds	r0, #8
   26bd4:	f7f3 fe0c 	bl	1a7f0 <net_buf_simple_add>
   26bd8:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   26bda:	220e      	movs	r2, #14
   26bdc:	2100      	movs	r1, #0
   26bde:	f7ff fe2f 	bl	26840 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   26be2:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   26be4:	882b      	ldrh	r3, [r5, #0]
   26be6:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   26be8:	886b      	ldrh	r3, [r5, #2]
   26bea:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   26bec:	88ab      	ldrh	r3, [r5, #4]
   26bee:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   26bf0:	88eb      	ldrh	r3, [r5, #6]
   26bf2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   26bf4:	4639      	mov	r1, r7
   26bf6:	f242 0020 	movw	r0, #8224	; 0x2020
   26bfa:	f7ee fc95 	bl	15528 <bt_hci_cmd_send>
}
   26bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   26c00:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26c04:	e7fb      	b.n	26bfe <le_conn_param_req_reply+0x42>

00026c06 <bt_init>:
{
   26c06:	b510      	push	{r4, lr}
	err = hci_init();
   26c08:	f7ee fc42 	bl	15490 <hci_init>
	if (err) {
   26c0c:	4604      	mov	r4, r0
   26c0e:	b108      	cbz	r0, 26c14 <bt_init+0xe>
}
   26c10:	4620      	mov	r0, r4
   26c12:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   26c14:	f7f0 ffc8 	bl	17ba8 <bt_conn_init>
		if (err) {
   26c18:	4604      	mov	r4, r0
   26c1a:	2800      	cmp	r0, #0
   26c1c:	d1f8      	bne.n	26c10 <bt_init+0xa>
	bt_finalize_init();
   26c1e:	f7ef f929 	bl	15e74 <bt_finalize_init>
	return 0;
   26c22:	e7f5      	b.n	26c10 <bt_init+0xa>

00026c24 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   26c24:	2000      	movs	r0, #0
   26c26:	4770      	bx	lr

00026c28 <bt_lookup_id_addr>:
}
   26c28:	4608      	mov	r0, r1
   26c2a:	4770      	bx	lr

00026c2c <bt_id_set_adv_random_addr>:
{
   26c2c:	b508      	push	{r3, lr}
		return set_random_address(addr);
   26c2e:	4608      	mov	r0, r1
   26c30:	f7ef f9fe 	bl	16030 <set_random_address>
}
   26c34:	bd08      	pop	{r3, pc}

00026c36 <bt_id_set_adv_private_addr>:
{
   26c36:	b510      	push	{r4, lr}
   26c38:	b082      	sub	sp, #8
   26c3a:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   26c3c:	2106      	movs	r1, #6
   26c3e:	4668      	mov	r0, sp
   26c40:	f7f5 fdc0 	bl	1c7c4 <bt_rand>
	if (err) {
   26c44:	b108      	cbz	r0, 26c4a <bt_id_set_adv_private_addr+0x14>
}
   26c46:	b002      	add	sp, #8
   26c48:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   26c4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   26c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26c52:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   26c56:	4669      	mov	r1, sp
   26c58:	4620      	mov	r0, r4
   26c5a:	f7ff ffe7 	bl	26c2c <bt_id_set_adv_random_addr>
	if (err) {
   26c5e:	e7f2      	b.n	26c46 <bt_id_set_adv_private_addr+0x10>

00026c60 <bt_id_adv_random_addr_check>:
}
   26c60:	2001      	movs	r0, #1
   26c62:	4770      	bx	lr

00026c64 <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   26c64:	2300      	movs	r3, #0
   26c66:	428b      	cmp	r3, r1
   26c68:	d218      	bcs.n	26c9c <ad_is_limited+0x38>
{
   26c6a:	b430      	push	{r4, r5}
   26c6c:	e002      	b.n	26c74 <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   26c6e:	3301      	adds	r3, #1
   26c70:	428b      	cmp	r3, r1
   26c72:	d210      	bcs.n	26c96 <ad_is_limited+0x32>
		if (ad[i].type == BT_DATA_FLAGS &&
   26c74:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
   26c78:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
   26c7c:	f240 1201 	movw	r2, #257	; 0x101
   26c80:	4294      	cmp	r4, r2
   26c82:	d1f4      	bne.n	26c6e <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   26c84:	686a      	ldr	r2, [r5, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   26c86:	2a00      	cmp	r2, #0
   26c88:	d0f1      	beq.n	26c6e <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   26c8a:	7812      	ldrb	r2, [r2, #0]
   26c8c:	f012 0f01 	tst.w	r2, #1
   26c90:	d0ed      	beq.n	26c6e <ad_is_limited+0xa>
				return true;
   26c92:	2001      	movs	r0, #1
   26c94:	e000      	b.n	26c98 <ad_is_limited+0x34>
	return false;
   26c96:	2000      	movs	r0, #0
}
   26c98:	bc30      	pop	{r4, r5}
   26c9a:	4770      	bx	lr
	return false;
   26c9c:	2000      	movs	r0, #0
}
   26c9e:	4770      	bx	lr

00026ca0 <get_filter_policy>:
}
   26ca0:	2000      	movs	r0, #0
   26ca2:	4770      	bx	lr

00026ca4 <get_adv_channel_map>:
{
   26ca4:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   26ca6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   26caa:	d10b      	bne.n	26cc4 <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   26cac:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   26cae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   26cb2:	d001      	beq.n	26cb8 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   26cb4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   26cb8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   26cbc:	d001      	beq.n	26cc2 <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   26cbe:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   26cc2:	4770      	bx	lr
		channel_map &= ~0x01;
   26cc4:	2006      	movs	r0, #6
   26cc6:	e7f2      	b.n	26cae <get_adv_channel_map+0xa>

00026cc8 <hci_set_ad>:
{
   26cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ccc:	b082      	sub	sp, #8
   26cce:	4607      	mov	r7, r0
   26cd0:	460d      	mov	r5, r1
   26cd2:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   26cd4:	2120      	movs	r1, #32
   26cd6:	f7ee f90d 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   26cda:	b300      	cbz	r0, 26d1e <hci_set_ad+0x56>
   26cdc:	4680      	mov	r8, r0
   26cde:	2120      	movs	r1, #32
   26ce0:	3008      	adds	r0, #8
   26ce2:	f7f3 fd85 	bl	1a7f0 <net_buf_simple_add>
   26ce6:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   26ce8:	2220      	movs	r2, #32
   26cea:	2100      	movs	r1, #0
   26cec:	f7ff fda8 	bl	26840 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   26cf0:	9400      	str	r4, [sp, #0]
   26cf2:	4633      	mov	r3, r6
   26cf4:	462a      	mov	r2, r5
   26cf6:	211f      	movs	r1, #31
   26cf8:	1c60      	adds	r0, r4, #1
   26cfa:	f7ef fc1d 	bl	16538 <set_data_add_complete>
	if (err) {
   26cfe:	4604      	mov	r4, r0
   26d00:	b948      	cbnz	r0, 26d16 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   26d02:	2200      	movs	r2, #0
   26d04:	4641      	mov	r1, r8
   26d06:	4638      	mov	r0, r7
   26d08:	f7ee f944 	bl	14f94 <bt_hci_cmd_send_sync>
   26d0c:	4604      	mov	r4, r0
}
   26d0e:	4620      	mov	r0, r4
   26d10:	b002      	add	sp, #8
   26d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   26d16:	4640      	mov	r0, r8
   26d18:	f7f3 fc38 	bl	1a58c <net_buf_unref>
		return err;
   26d1c:	e7f7      	b.n	26d0e <hci_set_ad+0x46>
		return -ENOBUFS;
   26d1e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   26d22:	e7f4      	b.n	26d0e <hci_set_ad+0x46>

00026d24 <set_ad>:
{
   26d24:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   26d26:	f242 0008 	movw	r0, #8200	; 0x2008
   26d2a:	f7ff ffcd 	bl	26cc8 <hci_set_ad>
}
   26d2e:	bd08      	pop	{r3, pc}

00026d30 <set_sd>:
{
   26d30:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   26d32:	f242 0009 	movw	r0, #8201	; 0x2009
   26d36:	f7ff ffc7 	bl	26cc8 <hci_set_ad>
}
   26d3a:	bd08      	pop	{r3, pc}

00026d3c <le_adv_update>:
{
   26d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d40:	b089      	sub	sp, #36	; 0x24
   26d42:	4604      	mov	r4, r0
   26d44:	460e      	mov	r6, r1
   26d46:	4617      	mov	r7, r2
   26d48:	461d      	mov	r5, r3
   26d4a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   26d4e:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
   26d52:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   26d56:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   26d5a:	2300      	movs	r3, #0
   26d5c:	9304      	str	r3, [sp, #16]
   26d5e:	9305      	str	r3, [sp, #20]
   26d60:	9306      	str	r3, [sp, #24]
   26d62:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   26d64:	f1b9 0f00 	cmp.w	r9, #0
   26d68:	d133      	bne.n	26dd2 <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   26d6a:	f1bb 0f00 	cmp.w	fp, #0
   26d6e:	d002      	beq.n	26d76 <le_adv_update+0x3a>
   26d70:	f1ba 0f00 	cmp.w	sl, #0
   26d74:	d10b      	bne.n	26d8e <le_adv_update+0x52>
		d[0].data = ad;
   26d76:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   26d78:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   26d7a:	f1b9 0f01 	cmp.w	r9, #1
   26d7e:	d056      	beq.n	26e2e <le_adv_update+0xf2>
		d_len = 1;
   26d80:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   26d82:	a904      	add	r1, sp, #16
   26d84:	4620      	mov	r0, r4
   26d86:	f7ff ffcd 	bl	26d24 <set_ad>
		if (err) {
   26d8a:	4603      	mov	r3, r0
   26d8c:	b9e8      	cbnz	r0, 26dca <le_adv_update+0x8e>
	if (scannable) {
   26d8e:	f1ba 0f00 	cmp.w	sl, #0
   26d92:	d00c      	beq.n	26dae <le_adv_update+0x72>
		d[0].data = sd;
   26d94:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   26d96:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   26d9a:	f1b9 0f02 	cmp.w	r9, #2
   26d9e:	d04c      	beq.n	26e3a <le_adv_update+0xfe>
		d_len = 1;
   26da0:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   26da2:	a904      	add	r1, sp, #16
   26da4:	4620      	mov	r0, r4
   26da6:	f7ff ffc3 	bl	26d30 <set_sd>
		if (err) {
   26daa:	4603      	mov	r3, r0
   26dac:	b968      	cbnz	r0, 26dca <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   26dae:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26db0:	f3bf 8f5b 	dmb	ish
   26db4:	e854 3f00 	ldrex	r3, [r4]
   26db8:	f043 0304 	orr.w	r3, r3, #4
   26dbc:	e844 3200 	strex	r2, r3, [r4]
   26dc0:	2a00      	cmp	r2, #0
   26dc2:	d1f7      	bne.n	26db4 <le_adv_update+0x78>
   26dc4:	f3bf 8f5b 	dmb	ish
	return 0;
   26dc8:	2300      	movs	r3, #0
}
   26dca:	4618      	mov	r0, r3
   26dcc:	b009      	add	sp, #36	; 0x24
   26dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   26dd2:	f7ef f90f 	bl	15ff4 <bt_get_name>
   26dd6:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   26dd8:	b166      	cbz	r6, 26df4 <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   26dda:	2200      	movs	r2, #0
   26ddc:	4297      	cmp	r7, r2
   26dde:	d907      	bls.n	26df0 <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   26de0:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   26de4:	3b08      	subs	r3, #8
   26de6:	b2db      	uxtb	r3, r3
   26de8:	2b01      	cmp	r3, #1
   26dea:	d90f      	bls.n	26e0c <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   26dec:	3201      	adds	r2, #1
   26dee:	e7f5      	b.n	26ddc <le_adv_update+0xa0>
	return false;
   26df0:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   26df2:	bb43      	cbnz	r3, 26e46 <le_adv_update+0x10a>
   26df4:	b175      	cbz	r5, 26e14 <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   26df6:	2200      	movs	r2, #0
   26df8:	4590      	cmp	r8, r2
   26dfa:	d909      	bls.n	26e10 <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   26dfc:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   26e00:	3b08      	subs	r3, #8
   26e02:	b2db      	uxtb	r3, r3
   26e04:	2b01      	cmp	r3, #1
   26e06:	d910      	bls.n	26e2a <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   26e08:	3201      	adds	r2, #1
   26e0a:	e7f5      	b.n	26df8 <le_adv_update+0xbc>
			return true;
   26e0c:	2301      	movs	r3, #1
   26e0e:	e7f0      	b.n	26df2 <le_adv_update+0xb6>
	return false;
   26e10:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   26e12:	b9db      	cbnz	r3, 26e4c <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   26e14:	9801      	ldr	r0, [sp, #4]
   26e16:	f7ff fca6 	bl	26766 <strlen>
   26e1a:	2309      	movs	r3, #9
   26e1c:	f88d 3008 	strb.w	r3, [sp, #8]
   26e20:	f88d 0009 	strb.w	r0, [sp, #9]
   26e24:	9b01      	ldr	r3, [sp, #4]
   26e26:	9303      	str	r3, [sp, #12]
   26e28:	e79f      	b.n	26d6a <le_adv_update+0x2e>
			return true;
   26e2a:	2301      	movs	r3, #1
   26e2c:	e7f1      	b.n	26e12 <le_adv_update+0xd6>
			d[1].data = &data;
   26e2e:	ab02      	add	r3, sp, #8
   26e30:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   26e32:	2301      	movs	r3, #1
   26e34:	9307      	str	r3, [sp, #28]
			d_len = 2;
   26e36:	2202      	movs	r2, #2
   26e38:	e7a3      	b.n	26d82 <le_adv_update+0x46>
			d[1].data = &data;
   26e3a:	ab02      	add	r3, sp, #8
   26e3c:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   26e3e:	2301      	movs	r3, #1
   26e40:	9307      	str	r3, [sp, #28]
			d_len = 2;
   26e42:	2202      	movs	r2, #2
   26e44:	e7ad      	b.n	26da2 <le_adv_update+0x66>
			return -EINVAL;
   26e46:	f06f 0315 	mvn.w	r3, #21
   26e4a:	e7be      	b.n	26dca <le_adv_update+0x8e>
   26e4c:	f06f 0315 	mvn.w	r3, #21
   26e50:	e7bb      	b.n	26dca <le_adv_update+0x8e>

00026e52 <valid_adv_param>:
{
   26e52:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   26e54:	6843      	ldr	r3, [r0, #4]
   26e56:	f413 6f80 	tst.w	r3, #1024	; 0x400
   26e5a:	d107      	bne.n	26e6c <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   26e5c:	6902      	ldr	r2, [r0, #16]
   26e5e:	b112      	cbz	r2, 26e66 <valid_adv_param+0x14>
   26e60:	f013 0f01 	tst.w	r3, #1
   26e64:	d004      	beq.n	26e70 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   26e66:	f7ef fbcb 	bl	16600 <valid_adv_ext_param>
}
   26e6a:	bd08      	pop	{r3, pc}
		return false;
   26e6c:	2000      	movs	r0, #0
   26e6e:	e7fc      	b.n	26e6a <valid_adv_param+0x18>
		return false;
   26e70:	2000      	movs	r0, #0
   26e72:	e7fa      	b.n	26e6a <valid_adv_param+0x18>

00026e74 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   26e74:	6843      	ldr	r3, [r0, #4]
   26e76:	f013 0f08 	tst.w	r3, #8
   26e7a:	d00b      	beq.n	26e94 <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   26e7c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   26e80:	d10a      	bne.n	26e98 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   26e82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   26e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   26e8a:	d001      	beq.n	26e90 <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   26e8c:	2002      	movs	r0, #2
}
   26e8e:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   26e90:	2001      	movs	r0, #1
   26e92:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   26e94:	2000      	movs	r0, #0
   26e96:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   26e98:	2001      	movs	r0, #1
   26e9a:	4770      	bx	lr

00026e9c <bt_le_adv_set_enable_legacy>:
{
   26e9c:	b570      	push	{r4, r5, r6, lr}
   26e9e:	b086      	sub	sp, #24
   26ea0:	4605      	mov	r5, r0
   26ea2:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   26ea4:	2101      	movs	r1, #1
   26ea6:	f242 000a 	movw	r0, #8202	; 0x200a
   26eaa:	f7ee f823 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   26eae:	b1d0      	cbz	r0, 26ee6 <bt_le_adv_set_enable_legacy+0x4a>
   26eb0:	4606      	mov	r6, r0
	if (enable) {
   26eb2:	b19c      	cbz	r4, 26edc <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   26eb4:	2101      	movs	r1, #1
   26eb6:	3008      	adds	r0, #8
   26eb8:	f001 fc88 	bl	287cc <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   26ebc:	9400      	str	r4, [sp, #0]
   26ebe:	2306      	movs	r3, #6
   26ec0:	f105 0210 	add.w	r2, r5, #16
   26ec4:	a903      	add	r1, sp, #12
   26ec6:	4630      	mov	r0, r6
   26ec8:	f7ee f802 	bl	14ed0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   26ecc:	2200      	movs	r2, #0
   26ece:	4631      	mov	r1, r6
   26ed0:	f242 000a 	movw	r0, #8202	; 0x200a
   26ed4:	f7ee f85e 	bl	14f94 <bt_hci_cmd_send_sync>
}
   26ed8:	b006      	add	sp, #24
   26eda:	bd70      	pop	{r4, r5, r6, pc}
   26edc:	2100      	movs	r1, #0
   26ede:	3008      	adds	r0, #8
   26ee0:	f001 fc74 	bl	287cc <net_buf_simple_add_u8>
   26ee4:	e7ea      	b.n	26ebc <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   26ee6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26eea:	e7f5      	b.n	26ed8 <bt_le_adv_set_enable_legacy+0x3c>

00026eec <bt_le_adv_set_enable>:
{
   26eec:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   26eee:	f7ff ffd5 	bl	26e9c <bt_le_adv_set_enable_legacy>
}
   26ef2:	bd08      	pop	{r3, pc}

00026ef4 <bt_le_lim_adv_cancel_timeout>:
{
   26ef4:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   26ef6:	3018      	adds	r0, #24
   26ef8:	f7f8 ff22 	bl	1fd40 <k_work_cancel_delayable>
}
   26efc:	bd08      	pop	{r3, pc}

00026efe <bt_le_adv_resume>:
{
   26efe:	b530      	push	{r4, r5, lr}
   26f00:	b083      	sub	sp, #12
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   26f02:	f7ef fc49 	bl	16798 <bt_le_adv_lookup_legacy>
	if (!adv) {
   26f06:	b150      	cbz	r0, 26f1e <bt_le_adv_resume+0x20>
   26f08:	4604      	mov	r4, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   26f0a:	f100 0510 	add.w	r5, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26f0e:	f3bf 8f5b 	dmb	ish
   26f12:	6903      	ldr	r3, [r0, #16]
   26f14:	f3bf 8f5b 	dmb	ish
   26f18:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   26f1c:	d101      	bne.n	26f22 <bt_le_adv_resume+0x24>
}
   26f1e:	b003      	add	sp, #12
   26f20:	bd30      	pop	{r4, r5, pc}
   26f22:	f3bf 8f5b 	dmb	ish
   26f26:	6903      	ldr	r3, [r0, #16]
   26f28:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   26f2c:	f013 0f40 	tst.w	r3, #64	; 0x40
   26f30:	d1f5      	bne.n	26f1e <bt_le_adv_resume+0x20>
   26f32:	f3bf 8f5b 	dmb	ish
   26f36:	6903      	ldr	r3, [r0, #16]
   26f38:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   26f3c:	f413 7f00 	tst.w	r3, #512	; 0x200
   26f40:	d0ed      	beq.n	26f1e <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
   26f42:	a901      	add	r1, sp, #4
   26f44:	f7ef fbaa 	bl	1669c <le_adv_start_add_conn>
	if (err) {
   26f48:	2800      	cmp	r0, #0
   26f4a:	d1e8      	bne.n	26f1e <bt_le_adv_resume+0x20>
	err = bt_le_adv_set_enable(adv, true);
   26f4c:	2101      	movs	r1, #1
   26f4e:	4620      	mov	r0, r4
   26f50:	f7ff ffcc 	bl	26eec <bt_le_adv_set_enable>
	if (err) {
   26f54:	b908      	cbnz	r0, 26f5a <bt_le_adv_resume+0x5c>
	bool persist_paused = false;
   26f56:	2400      	movs	r4, #0
   26f58:	e011      	b.n	26f7e <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   26f5a:	2100      	movs	r1, #0
   26f5c:	9801      	ldr	r0, [sp, #4]
   26f5e:	f7f0 f9f9 	bl	17354 <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26f62:	f3bf 8f5b 	dmb	ish
   26f66:	e855 4f00 	ldrex	r4, [r5]
   26f6a:	f424 5300 	bic.w	r3, r4, #8192	; 0x2000
   26f6e:	e845 3200 	strex	r2, r3, [r5]
   26f72:	2a00      	cmp	r2, #0
   26f74:	d1f7      	bne.n	26f66 <bt_le_adv_resume+0x68>
   26f76:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   26f7a:	f3c4 3440 	ubfx	r4, r4, #13, #1
	bt_conn_unref(conn);
   26f7e:	9801      	ldr	r0, [sp, #4]
   26f80:	f7f0 f9a4 	bl	172cc <bt_conn_unref>
	if (persist_paused) {
   26f84:	2c00      	cmp	r4, #0
   26f86:	d0ca      	beq.n	26f1e <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26f88:	f3bf 8f5b 	dmb	ish
   26f8c:	e855 3f00 	ldrex	r3, [r5]
   26f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   26f94:	e845 3200 	strex	r2, r3, [r5]
   26f98:	2a00      	cmp	r2, #0
   26f9a:	d1f7      	bne.n	26f8c <bt_le_adv_resume+0x8e>
   26f9c:	f3bf 8f5b 	dmb	ish
}
   26fa0:	e7bd      	b.n	26f1e <bt_le_adv_resume+0x20>

00026fa2 <tx_notify>:
{
   26fa2:	b570      	push	{r4, r5, r6, lr}
   26fa4:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   26fa6:	e010      	b.n	26fca <tx_notify+0x28>
   26fa8:	f383 8811 	msr	BASEPRI, r3
   26fac:	f3bf 8f6f 	isb	sy
}
   26fb0:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   26fb2:	6262      	str	r2, [r4, #36]	; 0x24
   26fb4:	f383 8811 	msr	BASEPRI, r3
   26fb8:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   26fbc:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   26fbe:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   26fc0:	f7ef fe6e 	bl	16ca0 <tx_free>
		cb(conn, user_data);
   26fc4:	4631      	mov	r1, r6
   26fc6:	4620      	mov	r0, r4
   26fc8:	47a8      	blx	r5
	__asm__ volatile(
   26fca:	f04f 0240 	mov.w	r2, #64	; 0x40
   26fce:	f3ef 8311 	mrs	r3, BASEPRI
   26fd2:	f382 8812 	msr	BASEPRI_MAX, r2
   26fd6:	f3bf 8f6f 	isb	sy
	return list->head;
   26fda:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   26fdc:	2800      	cmp	r0, #0
   26fde:	d0e3      	beq.n	26fa8 <tx_notify+0x6>
	return node->next;
   26fe0:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   26fe2:	6222      	str	r2, [r4, #32]
	return list->tail;
   26fe4:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26fe6:	4281      	cmp	r1, r0
   26fe8:	d1e4      	bne.n	26fb4 <tx_notify+0x12>
   26fea:	e7e2      	b.n	26fb2 <tx_notify+0x10>

00026fec <tx_complete_work>:
{
   26fec:	b508      	push	{r3, lr}
	tx_notify(conn);
   26fee:	3828      	subs	r0, #40	; 0x28
   26ff0:	f7ff ffd7 	bl	26fa2 <tx_notify>
}
   26ff4:	bd08      	pop	{r3, pc}

00026ff6 <send_acl>:
{
   26ff6:	b570      	push	{r4, r5, r6, lr}
   26ff8:	4605      	mov	r5, r0
   26ffa:	460c      	mov	r4, r1
	switch (flags) {
   26ffc:	2a03      	cmp	r2, #3
   26ffe:	d819      	bhi.n	27034 <send_acl+0x3e>
   27000:	e8df f002 	tbb	[pc, r2]
   27004:	16021602 	.word	0x16021602
		flags = BT_ACL_CONT;
   27008:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   2700a:	2104      	movs	r1, #4
   2700c:	f104 0008 	add.w	r0, r4, #8
   27010:	f7f3 fbcc 	bl	1a7ac <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   27014:	f9b5 3000 	ldrsh.w	r3, [r5]
   27018:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2701c:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2701e:	89a3      	ldrh	r3, [r4, #12]
   27020:	3b04      	subs	r3, #4
   27022:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   27024:	2302      	movs	r3, #2
   27026:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   27028:	4620      	mov	r0, r4
   2702a:	f7ee fa73 	bl	15514 <bt_send>
}
   2702e:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   27030:	2601      	movs	r6, #1
   27032:	e7ea      	b.n	2700a <send_acl+0x14>
   27034:	f06f 0015 	mvn.w	r0, #21
   27038:	e7f9      	b.n	2702e <send_acl+0x38>

0002703a <process_unack_tx>:
{
   2703a:	b510      	push	{r4, lr}
   2703c:	4604      	mov	r4, r0
   2703e:	e028      	b.n	27092 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   27040:	3b01      	subs	r3, #1
   27042:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   27044:	f382 8811 	msr	BASEPRI, r2
   27048:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2704c:	4620      	mov	r0, r4
   2704e:	f7ef fecd 	bl	16dec <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   27052:	f7f8 f8d5 	bl	1f200 <z_impl_k_sem_give>
			continue;
   27056:	e01c      	b.n	27092 <process_unack_tx+0x58>
	list->tail = node;
   27058:	61a3      	str	r3, [r4, #24]
   2705a:	f382 8811 	msr	BASEPRI, r2
   2705e:	f3bf 8f6f 	isb	sy
		if (!node) {
   27062:	b350      	cbz	r0, 270ba <process_unack_tx+0x80>
	__asm__ volatile(
   27064:	f04f 0240 	mov.w	r2, #64	; 0x40
   27068:	f3ef 8311 	mrs	r3, BASEPRI
   2706c:	f382 8812 	msr	BASEPRI_MAX, r2
   27070:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   27074:	68c2      	ldr	r2, [r0, #12]
   27076:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   27078:	2200      	movs	r2, #0
   2707a:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   2707c:	f383 8811 	msr	BASEPRI, r3
   27080:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   27084:	f7ef fe0c 	bl	16ca0 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   27088:	4620      	mov	r0, r4
   2708a:	f7ef feaf 	bl	16dec <bt_conn_get_pkts>
   2708e:	f7f8 f8b7 	bl	1f200 <z_impl_k_sem_give>
	__asm__ volatile(
   27092:	f04f 0340 	mov.w	r3, #64	; 0x40
   27096:	f3ef 8211 	mrs	r2, BASEPRI
   2709a:	f383 8812 	msr	BASEPRI_MAX, r3
   2709e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   270a2:	69e3      	ldr	r3, [r4, #28]
   270a4:	2b00      	cmp	r3, #0
   270a6:	d1cb      	bne.n	27040 <process_unack_tx+0x6>
	return list->head;
   270a8:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   270aa:	2800      	cmp	r0, #0
   270ac:	d0d5      	beq.n	2705a <process_unack_tx+0x20>
	return node->next;
   270ae:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   270b0:	6163      	str	r3, [r4, #20]
	return list->tail;
   270b2:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   270b4:	4288      	cmp	r0, r1
   270b6:	d1d0      	bne.n	2705a <process_unack_tx+0x20>
   270b8:	e7ce      	b.n	27058 <process_unack_tx+0x1e>
}
   270ba:	bd10      	pop	{r4, pc}

000270bc <bt_conn_reset_rx_state>:
{
   270bc:	b510      	push	{r4, lr}
   270be:	4604      	mov	r4, r0
	if (!conn->rx) {
   270c0:	6900      	ldr	r0, [r0, #16]
   270c2:	b118      	cbz	r0, 270cc <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   270c4:	f7f3 fa62 	bl	1a58c <net_buf_unref>
	conn->rx = NULL;
   270c8:	2300      	movs	r3, #0
   270ca:	6123      	str	r3, [r4, #16]
}
   270cc:	bd10      	pop	{r4, pc}

000270ce <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   270ce:	f3bf 8f5b 	dmb	ish
   270d2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   270d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   270da:	b33b      	cbz	r3, 2712c <conn_prepare_events+0x5e>
{
   270dc:	b510      	push	{r4, lr}
   270de:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   270e0:	7a83      	ldrb	r3, [r0, #10]
   270e2:	b983      	cbnz	r3, 27106 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   270e4:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   270e6:	f3bf 8f5b 	dmb	ish
   270ea:	e853 2f00 	ldrex	r2, [r3]
   270ee:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   270f2:	e843 1c00 	strex	ip, r1, [r3]
   270f6:	f1bc 0f00 	cmp.w	ip, #0
   270fa:	d1f6      	bne.n	270ea <conn_prepare_events+0x1c>
   270fc:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   27100:	f012 0f40 	tst.w	r2, #64	; 0x40
   27104:	d10d      	bne.n	27122 <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   27106:	7a83      	ldrb	r3, [r0, #10]
   27108:	2b07      	cmp	r3, #7
   2710a:	d112      	bne.n	27132 <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   2710c:	f100 0338 	add.w	r3, r0, #56	; 0x38
   27110:	2200      	movs	r2, #0
   27112:	2104      	movs	r1, #4
   27114:	4620      	mov	r0, r4
   27116:	f7fb f803 	bl	22120 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2711a:	2301      	movs	r3, #1
   2711c:	7323      	strb	r3, [r4, #12]
	return 0;
   2711e:	2000      	movs	r0, #0
}
   27120:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   27122:	f7f0 f801 	bl	17128 <conn_cleanup>
		return -ENOTCONN;
   27126:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2712a:	e7f9      	b.n	27120 <conn_prepare_events+0x52>
		return -ENOTCONN;
   2712c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   27130:	4770      	bx	lr
		return -ENOTCONN;
   27132:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27136:	e7f3      	b.n	27120 <conn_prepare_events+0x52>

00027138 <bt_conn_recv>:
{
   27138:	b570      	push	{r4, r5, r6, lr}
   2713a:	4604      	mov	r4, r0
   2713c:	460d      	mov	r5, r1
   2713e:	4616      	mov	r6, r2
	tx_notify(conn);
   27140:	f7ff ff2f 	bl	26fa2 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   27144:	4632      	mov	r2, r6
   27146:	4629      	mov	r1, r5
   27148:	4620      	mov	r0, r4
   2714a:	f7ef ff37 	bl	16fbc <bt_acl_recv>
}
   2714e:	bd70      	pop	{r4, r5, r6, pc}

00027150 <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27150:	f3bf 8f5b 	dmb	ish
   27154:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   27158:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2715c:	b1eb      	cbz	r3, 2719a <bt_conn_ref+0x4a>
{
   2715e:	b410      	push	{r4}
   27160:	e006      	b.n	27170 <bt_conn_ref+0x20>
   27162:	f3bf 8f5b 	dmb	ish
   27166:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2716a:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2716e:	b193      	cbz	r3, 27196 <bt_conn_ref+0x46>
   27170:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	} while (!atomic_cas(&conn->ref, old, old + 1));
   27174:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   27176:	f3bf 8f5b 	dmb	ish
   2717a:	e852 4f00 	ldrex	r4, [r2]
   2717e:	429c      	cmp	r4, r3
   27180:	d104      	bne.n	2718c <bt_conn_ref+0x3c>
   27182:	e842 1c00 	strex	ip, r1, [r2]
   27186:	f1bc 0f00 	cmp.w	ip, #0
   2718a:	d1f6      	bne.n	2717a <bt_conn_ref+0x2a>
   2718c:	f3bf 8f5b 	dmb	ish
   27190:	d1e7      	bne.n	27162 <bt_conn_ref+0x12>
}
   27192:	bc10      	pop	{r4}
   27194:	4770      	bx	lr
			return NULL;
   27196:	2000      	movs	r0, #0
   27198:	e7fb      	b.n	27192 <bt_conn_ref+0x42>
   2719a:	2000      	movs	r0, #0
}
   2719c:	4770      	bx	lr

0002719e <conn_lookup_handle>:
{
   2719e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   271a2:	4607      	mov	r7, r0
   271a4:	460e      	mov	r6, r1
   271a6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   271a8:	2400      	movs	r4, #0
   271aa:	e003      	b.n	271b4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   271ac:	4628      	mov	r0, r5
   271ae:	f7f0 f88d 	bl	172cc <bt_conn_unref>
	for (i = 0; i < size; i++) {
   271b2:	3401      	adds	r4, #1
   271b4:	42b4      	cmp	r4, r6
   271b6:	d21b      	bcs.n	271f0 <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   271b8:	20c8      	movs	r0, #200	; 0xc8
   271ba:	fb00 7004 	mla	r0, r0, r4, r7
   271be:	f7ff ffc7 	bl	27150 <bt_conn_ref>
		if (!conn) {
   271c2:	4605      	mov	r5, r0
   271c4:	2800      	cmp	r0, #0
   271c6:	d0f4      	beq.n	271b2 <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   271c8:	7a83      	ldrb	r3, [r0, #10]
   271ca:	2b01      	cmp	r3, #1
   271cc:	d006      	beq.n	271dc <conn_lookup_handle+0x3e>
   271ce:	b25a      	sxtb	r2, r3
   271d0:	2a00      	cmp	r2, #0
   271d2:	d0eb      	beq.n	271ac <conn_lookup_handle+0xe>
   271d4:	3b07      	subs	r3, #7
   271d6:	b2db      	uxtb	r3, r3
   271d8:	2b01      	cmp	r3, #1
   271da:	d8e7      	bhi.n	271ac <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   271dc:	882b      	ldrh	r3, [r5, #0]
   271de:	4543      	cmp	r3, r8
   271e0:	d102      	bne.n	271e8 <conn_lookup_handle+0x4a>
}
   271e2:	4628      	mov	r0, r5
   271e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   271e8:	4628      	mov	r0, r5
   271ea:	f7f0 f86f 	bl	172cc <bt_conn_unref>
			continue;
   271ee:	e7e0      	b.n	271b2 <conn_lookup_handle+0x14>
	return NULL;
   271f0:	2500      	movs	r5, #0
   271f2:	e7f6      	b.n	271e2 <conn_lookup_handle+0x44>

000271f4 <bt_conn_connected>:
{
   271f4:	b510      	push	{r4, lr}
   271f6:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   271f8:	f7f0 fdaa 	bl	17d50 <bt_l2cap_connected>
	notify_connected(conn);
   271fc:	4620      	mov	r0, r4
   271fe:	f7ef fdb1 	bl	16d64 <notify_connected>
}
   27202:	bd10      	pop	{r4, pc}

00027204 <bt_conn_get_security>:
}
   27204:	2001      	movs	r0, #1
   27206:	4770      	bx	lr

00027208 <bt_conn_add_le>:
{
   27208:	b570      	push	{r4, r5, r6, lr}
   2720a:	4606      	mov	r6, r0
   2720c:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   2720e:	f7ef fecd 	bl	16fac <acl_conn_new>
	if (!conn) {
   27212:	4604      	mov	r4, r0
   27214:	b168      	cbz	r0, 27232 <bt_conn_add_le+0x2a>
	conn->id = id;
   27216:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   27218:	2207      	movs	r2, #7
   2721a:	4629      	mov	r1, r5
   2721c:	3090      	adds	r0, #144	; 0x90
   2721e:	f7ff faeb 	bl	267f8 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   27222:	2301      	movs	r3, #1
   27224:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   27226:	2318      	movs	r3, #24
   27228:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   2722c:	2328      	movs	r3, #40	; 0x28
   2722e:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   27232:	4620      	mov	r0, r4
   27234:	bd70      	pop	{r4, r5, r6, pc}

00027236 <bt_conn_is_peer_addr_le>:
{
   27236:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27238:	7a03      	ldrb	r3, [r0, #8]
   2723a:	428b      	cmp	r3, r1
   2723c:	d001      	beq.n	27242 <bt_conn_is_peer_addr_le+0xc>
		return false;
   2723e:	2000      	movs	r0, #0
}
   27240:	bd38      	pop	{r3, r4, r5, pc}
   27242:	4604      	mov	r4, r0
   27244:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   27246:	2207      	movs	r2, #7
   27248:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2724c:	4628      	mov	r0, r5
   2724e:	f7ff faa6 	bl	2679e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   27252:	b1a8      	cbz	r0, 27280 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   27254:	78e3      	ldrb	r3, [r4, #3]
   27256:	b14b      	cbz	r3, 2726c <bt_conn_is_peer_addr_le+0x36>
   27258:	2207      	movs	r2, #7
   2725a:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2725e:	4628      	mov	r0, r5
   27260:	f7ff fa9d 	bl	2679e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   27264:	fab0 f080 	clz	r0, r0
   27268:	0940      	lsrs	r0, r0, #5
   2726a:	e7e9      	b.n	27240 <bt_conn_is_peer_addr_le+0xa>
   2726c:	2207      	movs	r2, #7
   2726e:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   27272:	4628      	mov	r0, r5
   27274:	f7ff fa93 	bl	2679e <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   27278:	fab0 f080 	clz	r0, r0
   2727c:	0940      	lsrs	r0, r0, #5
   2727e:	e7df      	b.n	27240 <bt_conn_is_peer_addr_le+0xa>
		return true;
   27280:	2001      	movs	r0, #1
   27282:	e7dd      	b.n	27240 <bt_conn_is_peer_addr_le+0xa>

00027284 <bt_conn_le_conn_update>:
{
   27284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27286:	4606      	mov	r6, r0
   27288:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2728a:	210e      	movs	r1, #14
   2728c:	f242 0013 	movw	r0, #8211	; 0x2013
   27290:	f7ed fe30 	bl	14ef4 <bt_hci_cmd_create>
	if (!buf) {
   27294:	b1d0      	cbz	r0, 272cc <bt_conn_le_conn_update+0x48>
   27296:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   27298:	210e      	movs	r1, #14
   2729a:	3008      	adds	r0, #8
   2729c:	f7f3 faa8 	bl	1a7f0 <net_buf_simple_add>
   272a0:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   272a2:	220e      	movs	r2, #14
   272a4:	2100      	movs	r1, #0
   272a6:	f7ff facb 	bl	26840 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   272aa:	8833      	ldrh	r3, [r6, #0]
   272ac:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   272ae:	882b      	ldrh	r3, [r5, #0]
   272b0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   272b2:	886b      	ldrh	r3, [r5, #2]
   272b4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   272b6:	88ab      	ldrh	r3, [r5, #4]
   272b8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   272ba:	88eb      	ldrh	r3, [r5, #6]
   272bc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   272be:	2200      	movs	r2, #0
   272c0:	4639      	mov	r1, r7
   272c2:	f242 0013 	movw	r0, #8211	; 0x2013
   272c6:	f7ed fe65 	bl	14f94 <bt_hci_cmd_send_sync>
}
   272ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   272cc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   272d0:	e7fb      	b.n	272ca <bt_conn_le_conn_update+0x46>

000272d2 <l2cap_connected>:
}
   272d2:	4770      	bx	lr

000272d4 <l2cap_chan_recv>:
{
   272d4:	b510      	push	{r4, lr}
   272d6:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   272d8:	6843      	ldr	r3, [r0, #4]
   272da:	691b      	ldr	r3, [r3, #16]
   272dc:	4798      	blx	r3
	net_buf_unref(buf);
   272de:	4620      	mov	r0, r4
   272e0:	f7f3 f954 	bl	1a58c <net_buf_unref>
}
   272e4:	bd10      	pop	{r4, pc}

000272e6 <l2cap_disconnected>:
{
   272e6:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   272e8:	3010      	adds	r0, #16
   272ea:	f7f8 fd29 	bl	1fd40 <k_work_cancel_delayable>
}
   272ee:	bd08      	pop	{r3, pc}

000272f0 <bt_l2cap_chan_remove>:
	return list->head;
   272f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   272f2:	b103      	cbz	r3, 272f6 <bt_l2cap_chan_remove+0x6>
   272f4:	3b08      	subs	r3, #8
   272f6:	2200      	movs	r2, #0
   272f8:	e016      	b.n	27328 <bt_l2cap_chan_remove+0x38>
{
   272fa:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   272fc:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   27300:	b142      	cbz	r2, 27314 <bt_l2cap_chan_remove+0x24>
	return node->next;
   27302:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   27304:	6014      	str	r4, [r2, #0]
	return list->tail;
   27306:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_REMOVE(slist, snode)
   27308:	42a1      	cmp	r1, r4
   2730a:	d00a      	beq.n	27322 <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   2730c:	2200      	movs	r2, #0
   2730e:	609a      	str	r2, [r3, #8]
}
   27310:	bc10      	pop	{r4}
   27312:	4770      	bx	lr
	return node->next;
   27314:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   27316:	6542      	str	r2, [r0, #84]	; 0x54
	return list->tail;
   27318:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_REMOVE(slist, snode)
   2731a:	42a1      	cmp	r1, r4
   2731c:	d1f6      	bne.n	2730c <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   2731e:	6582      	str	r2, [r0, #88]	; 0x58
}
   27320:	e7f4      	b.n	2730c <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   27322:	6582      	str	r2, [r0, #88]	; 0x58
}
   27324:	e7f2      	b.n	2730c <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27326:	4613      	mov	r3, r2
   27328:	b14b      	cbz	r3, 2733e <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   2732a:	428b      	cmp	r3, r1
   2732c:	d0e5      	beq.n	272fa <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2732e:	f113 0208 	adds.w	r2, r3, #8
   27332:	d0f8      	beq.n	27326 <bt_l2cap_chan_remove+0x36>
	return node->next;
   27334:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27336:	2b00      	cmp	r3, #0
   27338:	d0f6      	beq.n	27328 <bt_l2cap_chan_remove+0x38>
   2733a:	3b08      	subs	r3, #8
   2733c:	e7f4      	b.n	27328 <bt_l2cap_chan_remove+0x38>
   2733e:	4770      	bx	lr

00027340 <bt_l2cap_chan_del>:
{
   27340:	b538      	push	{r3, r4, r5, lr}
   27342:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   27344:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   27346:	6803      	ldr	r3, [r0, #0]
   27348:	b123      	cbz	r3, 27354 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2734a:	686b      	ldr	r3, [r5, #4]
   2734c:	b103      	cbz	r3, 27350 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2734e:	4798      	blx	r3
	chan->conn = NULL;
   27350:	2300      	movs	r3, #0
   27352:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   27354:	68e3      	ldr	r3, [r4, #12]
   27356:	b10b      	cbz	r3, 2735c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   27358:	4620      	mov	r0, r4
   2735a:	4798      	blx	r3
	if (ops->released) {
   2735c:	69eb      	ldr	r3, [r5, #28]
   2735e:	b10b      	cbz	r3, 27364 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   27360:	4620      	mov	r0, r4
   27362:	4798      	blx	r3
}
   27364:	bd38      	pop	{r3, r4, r5, pc}

00027366 <bt_l2cap_chan_add>:
{
   27366:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   27368:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   2736c:	2400      	movs	r4, #0
   2736e:	608c      	str	r4, [r1, #8]
	return list->tail;
   27370:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_APPEND(slist, snode)
   27372:	b12c      	cbz	r4, 27380 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   27374:	6023      	str	r3, [r4, #0]
	list->tail = node;
   27376:	6583      	str	r3, [r0, #88]	; 0x58
	chan->conn = conn;
   27378:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   2737a:	60ca      	str	r2, [r1, #12]
}
   2737c:	bc10      	pop	{r4}
   2737e:	4770      	bx	lr
   27380:	6583      	str	r3, [r0, #88]	; 0x58
	list->head = node;
   27382:	6543      	str	r3, [r0, #84]	; 0x54
}
   27384:	e7f8      	b.n	27378 <bt_l2cap_chan_add+0x12>

00027386 <bt_l2cap_disconnected>:
{
   27386:	b510      	push	{r4, lr}
	return list->head;
   27388:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2738a:	b140      	cbz	r0, 2739e <bt_l2cap_disconnected+0x18>
   2738c:	3808      	subs	r0, #8
   2738e:	d008      	beq.n	273a2 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27390:	f110 0408 	adds.w	r4, r0, #8
   27394:	d00a      	beq.n	273ac <bt_l2cap_disconnected+0x26>
	return node->next;
   27396:	6884      	ldr	r4, [r0, #8]
   27398:	b144      	cbz	r4, 273ac <bt_l2cap_disconnected+0x26>
   2739a:	3c08      	subs	r4, #8
   2739c:	e006      	b.n	273ac <bt_l2cap_disconnected+0x26>
   2739e:	4604      	mov	r4, r0
   273a0:	e004      	b.n	273ac <bt_l2cap_disconnected+0x26>
   273a2:	4604      	mov	r4, r0
   273a4:	e002      	b.n	273ac <bt_l2cap_disconnected+0x26>
   273a6:	4623      	mov	r3, r4
   273a8:	4620      	mov	r0, r4
   273aa:	461c      	mov	r4, r3
   273ac:	b158      	cbz	r0, 273c6 <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   273ae:	f7ff ffc7 	bl	27340 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   273b2:	2c00      	cmp	r4, #0
   273b4:	d0f7      	beq.n	273a6 <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   273b6:	f114 0308 	adds.w	r3, r4, #8
   273ba:	d0f5      	beq.n	273a8 <bt_l2cap_disconnected+0x22>
	return node->next;
   273bc:	68a3      	ldr	r3, [r4, #8]
   273be:	2b00      	cmp	r3, #0
   273c0:	d0f2      	beq.n	273a8 <bt_l2cap_disconnected+0x22>
   273c2:	3b08      	subs	r3, #8
   273c4:	e7f0      	b.n	273a8 <bt_l2cap_disconnected+0x22>
}
   273c6:	bd10      	pop	{r4, pc}

000273c8 <bt_l2cap_create_pdu_timeout>:
{
   273c8:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   273ca:	3104      	adds	r1, #4
   273cc:	f7f0 f8e4 	bl	17598 <bt_conn_create_pdu_timeout>
}
   273d0:	bd08      	pop	{r3, pc}

000273d2 <bt_l2cap_send_cb>:
{
   273d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273d4:	4605      	mov	r5, r0
   273d6:	460f      	mov	r7, r1
   273d8:	4614      	mov	r4, r2
   273da:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   273dc:	2104      	movs	r1, #4
   273de:	f102 0008 	add.w	r0, r2, #8
   273e2:	f7f3 f9e3 	bl	1a7ac <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   273e6:	89a3      	ldrh	r3, [r4, #12]
   273e8:	3b04      	subs	r3, #4
   273ea:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   273ec:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   273ee:	9b06      	ldr	r3, [sp, #24]
   273f0:	4632      	mov	r2, r6
   273f2:	4621      	mov	r1, r4
   273f4:	4628      	mov	r0, r5
   273f6:	f7ef fee1 	bl	171bc <bt_conn_send_cb>
}
   273fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000273fc <l2cap_send_reject>:
{
   273fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27400:	b083      	sub	sp, #12
   27402:	4605      	mov	r5, r0
   27404:	4690      	mov	r8, r2
   27406:	461c      	mov	r4, r3
   27408:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2740c:	1cbb      	adds	r3, r7, #2
   2740e:	460a      	mov	r2, r1
   27410:	2101      	movs	r1, #1
   27412:	2000      	movs	r0, #0
   27414:	f7f0 fcf4 	bl	17e00 <l2cap_create_le_sig_pdu>
	if (!buf) {
   27418:	b1b0      	cbz	r0, 27448 <l2cap_send_reject+0x4c>
   2741a:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2741c:	f100 0908 	add.w	r9, r0, #8
   27420:	2102      	movs	r1, #2
   27422:	4648      	mov	r0, r9
   27424:	f7f3 f9e4 	bl	1a7f0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   27428:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   2742c:	b124      	cbz	r4, 27438 <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2742e:	463a      	mov	r2, r7
   27430:	4621      	mov	r1, r4
   27432:	4648      	mov	r0, r9
   27434:	f001 f9bf 	bl	287b6 <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   27438:	2300      	movs	r3, #0
   2743a:	9300      	str	r3, [sp, #0]
   2743c:	4632      	mov	r2, r6
   2743e:	2105      	movs	r1, #5
   27440:	4628      	mov	r0, r5
   27442:	f7ff ffc6 	bl	273d2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   27446:	b910      	cbnz	r0, 2744e <l2cap_send_reject+0x52>
}
   27448:	b003      	add	sp, #12
   2744a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   2744e:	4630      	mov	r0, r6
   27450:	f7f3 f89c 	bl	1a58c <net_buf_unref>
}
   27454:	e7f8      	b.n	27448 <l2cap_send_reject+0x4c>

00027456 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   27456:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27458:	b110      	cbz	r0, 27460 <bt_l2cap_le_lookup_tx_cid+0xa>
   2745a:	3808      	subs	r0, #8
   2745c:	e000      	b.n	27460 <bt_l2cap_le_lookup_tx_cid+0xa>
   2745e:	3808      	subs	r0, #8
   27460:	b148      	cbz	r0, 27476 <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27462:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   27466:	428b      	cmp	r3, r1
   27468:	d005      	beq.n	27476 <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2746a:	f110 0308 	adds.w	r3, r0, #8
   2746e:	d003      	beq.n	27478 <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   27470:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27472:	2800      	cmp	r0, #0
   27474:	d1f3      	bne.n	2745e <bt_l2cap_le_lookup_tx_cid+0x8>
}
   27476:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27478:	4618      	mov	r0, r3
   2747a:	e7f1      	b.n	27460 <bt_l2cap_le_lookup_tx_cid+0xa>

0002747c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2747c:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2747e:	b110      	cbz	r0, 27486 <bt_l2cap_le_lookup_rx_cid+0xa>
   27480:	3808      	subs	r0, #8
   27482:	e000      	b.n	27486 <bt_l2cap_le_lookup_rx_cid+0xa>
   27484:	3808      	subs	r0, #8
   27486:	b148      	cbz	r0, 2749c <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27488:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   2748c:	428b      	cmp	r3, r1
   2748e:	d005      	beq.n	2749c <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27490:	f110 0308 	adds.w	r3, r0, #8
   27494:	d003      	beq.n	2749e <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   27496:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27498:	2800      	cmp	r0, #0
   2749a:	d1f3      	bne.n	27484 <bt_l2cap_le_lookup_rx_cid+0x8>
}
   2749c:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2749e:	4618      	mov	r0, r3
   274a0:	e7f1      	b.n	27486 <bt_l2cap_le_lookup_rx_cid+0xa>

000274a2 <bt_l2cap_update_conn_param>:
{
   274a2:	b570      	push	{r4, r5, r6, lr}
   274a4:	b082      	sub	sp, #8
   274a6:	4605      	mov	r5, r0
   274a8:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   274aa:	f7f0 fb99 	bl	17be0 <get_ident>
   274ae:	4602      	mov	r2, r0
   274b0:	2308      	movs	r3, #8
   274b2:	2112      	movs	r1, #18
   274b4:	2000      	movs	r0, #0
   274b6:	f7f0 fca3 	bl	17e00 <l2cap_create_le_sig_pdu>
	if (!buf) {
   274ba:	b1e0      	cbz	r0, 274f6 <bt_l2cap_update_conn_param+0x54>
   274bc:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   274be:	2108      	movs	r1, #8
   274c0:	4408      	add	r0, r1
   274c2:	f7f3 f995 	bl	1a7f0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   274c6:	8823      	ldrh	r3, [r4, #0]
   274c8:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   274ca:	8863      	ldrh	r3, [r4, #2]
   274cc:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   274ce:	88a3      	ldrh	r3, [r4, #4]
   274d0:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   274d2:	88e3      	ldrh	r3, [r4, #6]
   274d4:	80c3      	strh	r3, [r0, #6]
   274d6:	2300      	movs	r3, #0
   274d8:	9300      	str	r3, [sp, #0]
   274da:	4632      	mov	r2, r6
   274dc:	2105      	movs	r1, #5
   274de:	4628      	mov	r0, r5
   274e0:	f7ff ff77 	bl	273d2 <bt_l2cap_send_cb>
	if (err) {
   274e4:	4604      	mov	r4, r0
   274e6:	b910      	cbnz	r0, 274ee <bt_l2cap_update_conn_param+0x4c>
}
   274e8:	4620      	mov	r0, r4
   274ea:	b002      	add	sp, #8
   274ec:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   274ee:	4630      	mov	r0, r6
   274f0:	f7f3 f84c 	bl	1a58c <net_buf_unref>
		return err;
   274f4:	e7f8      	b.n	274e8 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   274f6:	f06f 040b 	mvn.w	r4, #11
   274fa:	e7f5      	b.n	274e8 <bt_l2cap_update_conn_param+0x46>

000274fc <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   274fc:	4770      	bx	lr

000274fe <att_sent>:
{
   274fe:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   27500:	684b      	ldr	r3, [r1, #4]
   27502:	695b      	ldr	r3, [r3, #20]
   27504:	b10b      	cbz	r3, 2750a <att_sent+0xc>
   27506:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   27508:	4798      	blx	r3
}
   2750a:	bd08      	pop	{r3, pc}

0002750c <range_is_valid>:
	if (!start || !end) {
   2750c:	b120      	cbz	r0, 27518 <range_is_valid+0xc>
   2750e:	b119      	cbz	r1, 27518 <range_is_valid+0xc>
	if (start > end) {
   27510:	4288      	cmp	r0, r1
   27512:	d806      	bhi.n	27522 <range_is_valid+0x16>
	return true;
   27514:	2001      	movs	r0, #1
}
   27516:	4770      	bx	lr
		if (err) {
   27518:	b10a      	cbz	r2, 2751e <range_is_valid+0x12>
			*err = 0U;
   2751a:	2300      	movs	r3, #0
   2751c:	8013      	strh	r3, [r2, #0]
		return false;
   2751e:	2000      	movs	r0, #0
   27520:	4770      	bx	lr
		if (err) {
   27522:	b102      	cbz	r2, 27526 <range_is_valid+0x1a>
			*err = start;
   27524:	8010      	strh	r0, [r2, #0]
		return false;
   27526:	2000      	movs	r0, #0
   27528:	4770      	bx	lr

0002752a <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2752a:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2752e:	d201      	bcs.n	27534 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   27530:	200e      	movs	r0, #14
}
   27532:	4770      	bx	lr
		return -err;
   27534:	4240      	negs	r0, r0
   27536:	b2c0      	uxtb	r0, r0
   27538:	4770      	bx	lr

0002753a <attr_read_type_cb>:
{
   2753a:	b410      	push	{r4}
	if (!data->rsp->len) {
   2753c:	68d4      	ldr	r4, [r2, #12]
   2753e:	7823      	ldrb	r3, [r4, #0]
   27540:	b923      	cbnz	r3, 2754c <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   27542:	3102      	adds	r1, #2
   27544:	7021      	strb	r1, [r4, #0]
	return true;
   27546:	2001      	movs	r0, #1
}
   27548:	bc10      	pop	{r4}
   2754a:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2754c:	3102      	adds	r1, #2
   2754e:	428b      	cmp	r3, r1
   27550:	d005      	beq.n	2755e <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   27552:	8983      	ldrh	r3, [r0, #12]
   27554:	3b02      	subs	r3, #2
   27556:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   27558:	2000      	movs	r0, #0
   2755a:	6110      	str	r0, [r2, #16]
		return false;
   2755c:	e7f4      	b.n	27548 <attr_read_type_cb+0xe>
	return true;
   2755e:	2001      	movs	r0, #1
   27560:	e7f2      	b.n	27548 <attr_read_type_cb+0xe>

00027562 <attr_read_group_cb>:
	if (!data->rsp->len) {
   27562:	68d0      	ldr	r0, [r2, #12]
   27564:	7803      	ldrb	r3, [r0, #0]
   27566:	b91b      	cbnz	r3, 27570 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   27568:	3104      	adds	r1, #4
   2756a:	7001      	strb	r1, [r0, #0]
	return true;
   2756c:	2001      	movs	r0, #1
   2756e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   27570:	3104      	adds	r1, #4
   27572:	428b      	cmp	r3, r1
   27574:	d006      	beq.n	27584 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   27576:	6891      	ldr	r1, [r2, #8]
   27578:	898b      	ldrh	r3, [r1, #12]
   2757a:	3b04      	subs	r3, #4
   2757c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2757e:	2000      	movs	r0, #0
   27580:	6110      	str	r0, [r2, #16]
		return false;
   27582:	4770      	bx	lr
	return true;
   27584:	2001      	movs	r0, #1
}
   27586:	4770      	bx	lr

00027588 <att_prepare_write_req>:
}
   27588:	2006      	movs	r0, #6
   2758a:	4770      	bx	lr

0002758c <att_exec_write_req>:
}
   2758c:	2006      	movs	r0, #6
   2758e:	4770      	bx	lr

00027590 <att_op_get_type>:
	switch (op) {
   27590:	1e43      	subs	r3, r0, #1
   27592:	2bd1      	cmp	r3, #209	; 0xd1
   27594:	d874      	bhi.n	27680 <att_op_get_type+0xf0>
   27596:	e8df f003 	tbb	[pc, r3]
   2759a:	696d      	.short	0x696d
   2759c:	696d696d 	.word	0x696d696d
   275a0:	696d696d 	.word	0x696d696d
   275a4:	696d696d 	.word	0x696d696d
   275a8:	696d696d 	.word	0x696d696d
   275ac:	6973736d 	.word	0x6973736d
   275b0:	736d696d 	.word	0x736d696d
   275b4:	7871736f 	.word	0x7871736f
   275b8:	73737373 	.word	0x73737373
   275bc:	73737373 	.word	0x73737373
   275c0:	73737373 	.word	0x73737373
   275c4:	73737373 	.word	0x73737373
   275c8:	73737373 	.word	0x73737373
   275cc:	73737373 	.word	0x73737373
   275d0:	73737373 	.word	0x73737373
   275d4:	73737373 	.word	0x73737373
   275d8:	73737373 	.word	0x73737373
   275dc:	73737373 	.word	0x73737373
   275e0:	73737373 	.word	0x73737373
   275e4:	73737373 	.word	0x73737373
   275e8:	6b737373 	.word	0x6b737373
   275ec:	73737373 	.word	0x73737373
   275f0:	73737373 	.word	0x73737373
   275f4:	73737373 	.word	0x73737373
   275f8:	73737373 	.word	0x73737373
   275fc:	73737373 	.word	0x73737373
   27600:	73737373 	.word	0x73737373
   27604:	73737373 	.word	0x73737373
   27608:	73737373 	.word	0x73737373
   2760c:	73737373 	.word	0x73737373
   27610:	73737373 	.word	0x73737373
   27614:	73737373 	.word	0x73737373
   27618:	73737373 	.word	0x73737373
   2761c:	73737373 	.word	0x73737373
   27620:	73737373 	.word	0x73737373
   27624:	73737373 	.word	0x73737373
   27628:	73737373 	.word	0x73737373
   2762c:	73737373 	.word	0x73737373
   27630:	73737373 	.word	0x73737373
   27634:	73737373 	.word	0x73737373
   27638:	73737373 	.word	0x73737373
   2763c:	73737373 	.word	0x73737373
   27640:	73737373 	.word	0x73737373
   27644:	73737373 	.word	0x73737373
   27648:	73737373 	.word	0x73737373
   2764c:	73737373 	.word	0x73737373
   27650:	73737373 	.word	0x73737373
   27654:	73737373 	.word	0x73737373
   27658:	73737373 	.word	0x73737373
   2765c:	73737373 	.word	0x73737373
   27660:	73737373 	.word	0x73737373
   27664:	73737373 	.word	0x73737373
   27668:	6b737373 	.word	0x6b737373
{
   2766c:	2001      	movs	r0, #1
   2766e:	4770      	bx	lr
		return ATT_COMMAND;
   27670:	2000      	movs	r0, #0
   27672:	4770      	bx	lr
		return ATT_RESPONSE;
   27674:	2002      	movs	r0, #2
   27676:	4770      	bx	lr
		return ATT_NOTIFICATION;
   27678:	2003      	movs	r0, #3
   2767a:	4770      	bx	lr
		return ATT_INDICATION;
   2767c:	2005      	movs	r0, #5
   2767e:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   27680:	f010 0f40 	tst.w	r0, #64	; 0x40
   27684:	d103      	bne.n	2768e <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   27686:	2006      	movs	r0, #6
   27688:	4770      	bx	lr
		return ATT_CONFIRMATION;
   2768a:	2004      	movs	r0, #4
   2768c:	4770      	bx	lr
		return ATT_COMMAND;
   2768e:	2000      	movs	r0, #0
}
   27690:	4770      	bx	lr

00027692 <att_chan_attach>:
{
   27692:	b538      	push	{r3, r4, r5, lr}
   27694:	4604      	mov	r4, r0
   27696:	460d      	mov	r5, r1
	return list->head;
   27698:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (sys_slist_is_empty(&att->chans)) {
   2769a:	b143      	cbz	r3, 276ae <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   2769c:	f505 73aa 	add.w	r3, r5, #340	; 0x154
   276a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   276a2:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	list->head = node;
   276a6:	62a3      	str	r3, [r4, #40]	; 0x28
	return list->tail;
   276a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   276aa:	b122      	cbz	r2, 276b6 <att_chan_attach+0x24>
}
   276ac:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   276ae:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   276b0:	f002 f849 	bl	29746 <z_impl_k_queue_init>
}
   276b4:	e7f2      	b.n	2769c <att_chan_attach+0xa>
	list->tail = node;
   276b6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   276b8:	e7f8      	b.n	276ac <att_chan_attach+0x1a>

000276ba <chan_req_send>:
{
   276ba:	b570      	push	{r4, r5, r6, lr}
   276bc:	4606      	mov	r6, r0
   276be:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   276c0:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   276c4:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   276c6:	2200      	movs	r2, #0
	while (buf) {
   276c8:	b11b      	cbz	r3, 276d2 <chan_req_send+0x18>
		bytes += buf->len;
   276ca:	899c      	ldrh	r4, [r3, #12]
   276cc:	4422      	add	r2, r4
		buf = buf->frags;
   276ce:	681b      	ldr	r3, [r3, #0]
   276d0:	e7fa      	b.n	276c8 <chan_req_send+0xe>
   276d2:	4291      	cmp	r1, r2
   276d4:	d30e      	bcc.n	276f4 <chan_req_send+0x3a>
	chan->req = req;
   276d6:	f8c6 50fc 	str.w	r5, [r6, #252]	; 0xfc
	buf = req->buf;
   276da:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   276dc:	2200      	movs	r2, #0
   276de:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   276e0:	4621      	mov	r1, r4
   276e2:	4630      	mov	r0, r6
   276e4:	f7f0 fdee 	bl	182c4 <chan_send>
	if (err) {
   276e8:	b118      	cbz	r0, 276f2 <chan_req_send+0x38>
		req->buf = buf;
   276ea:	60ac      	str	r4, [r5, #8]
		chan->req = NULL;
   276ec:	2300      	movs	r3, #0
   276ee:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
}
   276f2:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   276f4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   276f8:	e7fb      	b.n	276f2 <chan_req_send+0x38>

000276fa <bt_att_status>:
{
   276fa:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   276fc:	f3bf 8f5b 	dmb	ish
   27700:	680b      	ldr	r3, [r1, #0]
   27702:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   27706:	f013 0f01 	tst.w	r3, #1
   2770a:	d007      	beq.n	2771c <bt_att_status+0x22>
   2770c:	4604      	mov	r4, r0
   2770e:	3808      	subs	r0, #8
	if (!chan->att) {
   27710:	f854 3c08 	ldr.w	r3, [r4, #-8]
   27714:	b113      	cbz	r3, 2771c <bt_att_status+0x22>
	if (chan->req) {
   27716:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
   2771a:	b102      	cbz	r2, 2771e <bt_att_status+0x24>
}
   2771c:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   2771e:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   27720:	2d00      	cmp	r5, #0
   27722:	d0fb      	beq.n	2771c <bt_att_status+0x22>
	return node->next;
   27724:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   27726:	605a      	str	r2, [r3, #4]
	return list->tail;
   27728:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2772a:	42a9      	cmp	r1, r5
   2772c:	d00e      	beq.n	2774c <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2772e:	4629      	mov	r1, r5
   27730:	f7f0 fe1a 	bl	18368 <bt_att_chan_req_send>
   27734:	2800      	cmp	r0, #0
   27736:	daf1      	bge.n	2771c <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   27738:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   2773c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2773e:	602a      	str	r2, [r5, #0]
	list->head = node;
   27740:	605d      	str	r5, [r3, #4]
	return list->tail;
   27742:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   27744:	2a00      	cmp	r2, #0
   27746:	d1e9      	bne.n	2771c <bt_att_status+0x22>
	list->tail = node;
   27748:	609d      	str	r5, [r3, #8]
}
   2774a:	e7e7      	b.n	2771c <bt_att_status+0x22>
	list->tail = node;
   2774c:	609a      	str	r2, [r3, #8]
}
   2774e:	e7ee      	b.n	2772e <bt_att_status+0x34>

00027750 <att_req_send_process>:
{
   27750:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   27752:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   27754:	2e00      	cmp	r6, #0
   27756:	d038      	beq.n	277ca <att_req_send_process+0x7a>
   27758:	4605      	mov	r5, r0
	return node->next;
   2775a:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   2775c:	6043      	str	r3, [r0, #4]
	return list->tail;
   2775e:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27760:	4296      	cmp	r6, r2
   27762:	d00d      	beq.n	27780 <att_req_send_process+0x30>
	return list->head;
   27764:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27766:	b198      	cbz	r0, 27790 <att_req_send_process+0x40>
   27768:	f5b0 70aa 	subs.w	r0, r0, #340	; 0x154
   2776c:	d012      	beq.n	27794 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2776e:	f510 74aa 	adds.w	r4, r0, #340	; 0x154
   27772:	d014      	beq.n	2779e <att_req_send_process+0x4e>
	return node->next;
   27774:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
   27778:	b18c      	cbz	r4, 2779e <att_req_send_process+0x4e>
   2777a:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
   2777e:	e00e      	b.n	2779e <att_req_send_process+0x4e>
	list->tail = node;
   27780:	6083      	str	r3, [r0, #8]
}
   27782:	e7ef      	b.n	27764 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27784:	4631      	mov	r1, r6
   27786:	f7f0 fdef 	bl	18368 <bt_att_chan_req_send>
   2778a:	2800      	cmp	r0, #0
   2778c:	db0c      	blt.n	277a8 <att_req_send_process+0x58>
   2778e:	e01c      	b.n	277ca <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27790:	4604      	mov	r4, r0
   27792:	e004      	b.n	2779e <att_req_send_process+0x4e>
   27794:	4604      	mov	r4, r0
   27796:	e002      	b.n	2779e <att_req_send_process+0x4e>
   27798:	4623      	mov	r3, r4
   2779a:	4620      	mov	r0, r4
   2779c:	461c      	mov	r4, r3
   2779e:	b178      	cbz	r0, 277c0 <att_req_send_process+0x70>
		if (!chan->req) {
   277a0:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   277a4:	2b00      	cmp	r3, #0
   277a6:	d0ed      	beq.n	27784 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   277a8:	2c00      	cmp	r4, #0
   277aa:	d0f5      	beq.n	27798 <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   277ac:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   277b0:	d0f3      	beq.n	2779a <att_req_send_process+0x4a>
	return node->next;
   277b2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   277b6:	2b00      	cmp	r3, #0
   277b8:	d0ef      	beq.n	2779a <att_req_send_process+0x4a>
   277ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   277be:	e7ec      	b.n	2779a <att_req_send_process+0x4a>
	return list->head;
   277c0:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   277c2:	6033      	str	r3, [r6, #0]
	list->head = node;
   277c4:	606e      	str	r6, [r5, #4]
	return list->tail;
   277c6:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   277c8:	b103      	cbz	r3, 277cc <att_req_send_process+0x7c>
}
   277ca:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   277cc:	60ae      	str	r6, [r5, #8]
}
   277ce:	e7fc      	b.n	277ca <att_req_send_process+0x7a>

000277d0 <bt_att_chan_send>:
{
   277d0:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   277d2:	f7f0 fd77 	bl	182c4 <chan_send>
}
   277d6:	bd08      	pop	{r3, pc}

000277d8 <chan_req_sent>:
{
   277d8:	b508      	push	{r3, lr}
	if (chan->req) {
   277da:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   277de:	b133      	cbz	r3, 277ee <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   277e0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   277e4:	2300      	movs	r3, #0
   277e6:	f500 7090 	add.w	r0, r0, #288	; 0x120
   277ea:	f7f8 faa1 	bl	1fd30 <k_work_reschedule>
}
   277ee:	bd08      	pop	{r3, pc}

000277f0 <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   277f0:	30f8      	adds	r0, #248	; 0xf8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   277f2:	f3bf 8f5b 	dmb	ish
   277f6:	e850 3f00 	ldrex	r3, [r0]
   277fa:	f023 0302 	bic.w	r3, r3, #2
   277fe:	e840 3200 	strex	r2, r3, [r0]
   27802:	2a00      	cmp	r2, #0
   27804:	d1f7      	bne.n	277f6 <chan_cfm_sent+0x6>
   27806:	f3bf 8f5b 	dmb	ish
}
   2780a:	4770      	bx	lr

0002780c <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2780c:	30f8      	adds	r0, #248	; 0xf8
   2780e:	f3bf 8f5b 	dmb	ish
   27812:	e850 3f00 	ldrex	r3, [r0]
   27816:	f023 0301 	bic.w	r3, r3, #1
   2781a:	e840 3200 	strex	r2, r3, [r0]
   2781e:	2a00      	cmp	r2, #0
   27820:	d1f7      	bne.n	27812 <chan_rsp_sent+0x6>
   27822:	f3bf 8f5b 	dmb	ish
}
   27826:	4770      	bx	lr

00027828 <process_queue>:
{
   27828:	b570      	push	{r4, r5, r6, lr}
   2782a:	4605      	mov	r5, r0
   2782c:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2782e:	2200      	movs	r2, #0
   27830:	2300      	movs	r3, #0
   27832:	4608      	mov	r0, r1
   27834:	f7f2 fe12 	bl	1a45c <net_buf_get>
	if (buf) {
   27838:	b170      	cbz	r0, 27858 <process_queue+0x30>
   2783a:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   2783c:	2200      	movs	r2, #0
   2783e:	4601      	mov	r1, r0
   27840:	4628      	mov	r0, r5
   27842:	f7f0 fd3f 	bl	182c4 <chan_send>
		if (err) {
   27846:	4605      	mov	r5, r0
   27848:	b908      	cbnz	r0, 2784e <process_queue+0x26>
}
   2784a:	4628      	mov	r0, r5
   2784c:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2784e:	4631      	mov	r1, r6
   27850:	4620      	mov	r0, r4
   27852:	f001 ff91 	bl	29778 <k_queue_prepend>
			return err;
   27856:	e7f8      	b.n	2784a <process_queue+0x22>
	return -ENOENT;
   27858:	f06f 0501 	mvn.w	r5, #1
   2785c:	e7f5      	b.n	2784a <process_queue+0x22>

0002785e <bt_att_sent>:
{
   2785e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27860:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   27862:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   27866:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   2786a:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   2786e:	b10b      	cbz	r3, 27874 <bt_att_sent+0x16>
		chan->sent(chan);
   27870:	4630      	mov	r0, r6
   27872:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   27874:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   27878:	f3bf 8f5b 	dmb	ish
   2787c:	e853 2f00 	ldrex	r2, [r3]
   27880:	f022 0210 	bic.w	r2, r2, #16
   27884:	e843 2100 	strex	r1, r2, [r3]
   27888:	2900      	cmp	r1, #0
   2788a:	d1f7      	bne.n	2787c <bt_att_sent+0x1e>
   2788c:	f3bf 8f5b 	dmb	ish
	if (!att) {
   27890:	b145      	cbz	r5, 278a4 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   27892:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   27896:	b133      	cbz	r3, 278a6 <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   27898:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
   2789c:	4630      	mov	r0, r6
   2789e:	f7ff ffc3 	bl	27828 <process_queue>
	if (!err) {
   278a2:	b9c0      	cbnz	r0, 278d6 <bt_att_sent+0x78>
}
   278a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   278a6:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   278a8:	2f00      	cmp	r7, #0
   278aa:	d0f5      	beq.n	27898 <bt_att_sent+0x3a>
	return node->next;
   278ac:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   278ae:	606b      	str	r3, [r5, #4]
	return list->tail;
   278b0:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   278b2:	42ba      	cmp	r2, r7
   278b4:	d00d      	beq.n	278d2 <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   278b6:	4639      	mov	r1, r7
   278b8:	4630      	mov	r0, r6
   278ba:	f7ff fefe 	bl	276ba <chan_req_send>
   278be:	2800      	cmp	r0, #0
   278c0:	daf0      	bge.n	278a4 <bt_att_sent+0x46>
	return list->head;
   278c2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   278c4:	603b      	str	r3, [r7, #0]
	list->head = node;
   278c6:	606f      	str	r7, [r5, #4]
	return list->tail;
   278c8:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   278ca:	2b00      	cmp	r3, #0
   278cc:	d1e4      	bne.n	27898 <bt_att_sent+0x3a>
	list->tail = node;
   278ce:	60af      	str	r7, [r5, #8]
}
   278d0:	e7e2      	b.n	27898 <bt_att_sent+0x3a>
	list->tail = node;
   278d2:	60ab      	str	r3, [r5, #8]
}
   278d4:	e7ef      	b.n	278b6 <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   278d6:	f105 010c 	add.w	r1, r5, #12
   278da:	4630      	mov	r0, r6
   278dc:	f7ff ffa4 	bl	27828 <process_queue>
   278e0:	e7e0      	b.n	278a4 <bt_att_sent+0x46>

000278e2 <att_send_process>:
{
   278e2:	b570      	push	{r4, r5, r6, lr}
   278e4:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   278e6:	2200      	movs	r2, #0
   278e8:	2300      	movs	r3, #0
   278ea:	300c      	adds	r0, #12
   278ec:	f7f2 fdb6 	bl	1a45c <net_buf_get>
	if (!buf) {
   278f0:	b360      	cbz	r0, 2794c <att_send_process+0x6a>
   278f2:	4605      	mov	r5, r0
	return list->head;
   278f4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   278f6:	b158      	cbz	r0, 27910 <att_send_process+0x2e>
   278f8:	f5b0 70aa 	subs.w	r0, r0, #340	; 0x154
   278fc:	d00c      	beq.n	27918 <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   278fe:	f510 74aa 	adds.w	r4, r0, #340	; 0x154
   27902:	d006      	beq.n	27912 <att_send_process+0x30>
	return node->next;
   27904:	f8d0 4154 	ldr.w	r4, [r0, #340]	; 0x154
   27908:	b11c      	cbz	r4, 27912 <att_send_process+0x30>
   2790a:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
   2790e:	e000      	b.n	27912 <att_send_process+0x30>
   27910:	4604      	mov	r4, r0
   27912:	f06f 0301 	mvn.w	r3, #1
   27916:	e004      	b.n	27922 <att_send_process+0x40>
   27918:	4604      	mov	r4, r0
   2791a:	e7fa      	b.n	27912 <att_send_process+0x30>
   2791c:	4622      	mov	r2, r4
   2791e:	4620      	mov	r0, r4
   27920:	4614      	mov	r4, r2
   27922:	b188      	cbz	r0, 27948 <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   27924:	2200      	movs	r2, #0
   27926:	4629      	mov	r1, r5
   27928:	f7ff ff52 	bl	277d0 <bt_att_chan_send>
		if (err >= 0) {
   2792c:	1e03      	subs	r3, r0, #0
   2792e:	da0b      	bge.n	27948 <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27930:	2c00      	cmp	r4, #0
   27932:	d0f3      	beq.n	2791c <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27934:	f514 72aa 	adds.w	r2, r4, #340	; 0x154
   27938:	d0f1      	beq.n	2791e <att_send_process+0x3c>
	return node->next;
   2793a:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   2793e:	2a00      	cmp	r2, #0
   27940:	d0ed      	beq.n	2791e <att_send_process+0x3c>
   27942:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
   27946:	e7ea      	b.n	2791e <att_send_process+0x3c>
	if (err < 0) {
   27948:	2b00      	cmp	r3, #0
   2794a:	db00      	blt.n	2794e <att_send_process+0x6c>
}
   2794c:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   2794e:	4629      	mov	r1, r5
   27950:	f106 000c 	add.w	r0, r6, #12
   27954:	f001 ff10 	bl	29778 <k_queue_prepend>
   27958:	e7f8      	b.n	2794c <att_send_process+0x6a>

0002795a <write_cb>:
{
   2795a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2795c:	b083      	sub	sp, #12
   2795e:	4606      	mov	r6, r0
   27960:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   27962:	222a      	movs	r2, #42	; 0x2a
   27964:	4601      	mov	r1, r0
   27966:	6820      	ldr	r0, [r4, #0]
   27968:	f000 fe18 	bl	2859c <bt_gatt_check_perm>
   2796c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2796e:	bb08      	cbnz	r0, 279b4 <write_cb+0x5a>
   27970:	4605      	mov	r5, r0
	if (!data->req) {
   27972:	7a23      	ldrb	r3, [r4, #8]
   27974:	b11b      	cbz	r3, 2797e <write_cb+0x24>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   27976:	2b18      	cmp	r3, #24
   27978:	d016      	beq.n	279a8 <write_cb+0x4e>
	uint8_t flags = 0U;
   2797a:	4603      	mov	r3, r0
   2797c:	e000      	b.n	27980 <write_cb+0x26>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2797e:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   27980:	68b7      	ldr	r7, [r6, #8]
   27982:	9301      	str	r3, [sp, #4]
   27984:	8a63      	ldrh	r3, [r4, #18]
   27986:	9300      	str	r3, [sp, #0]
   27988:	8a23      	ldrh	r3, [r4, #16]
   2798a:	68e2      	ldr	r2, [r4, #12]
   2798c:	4631      	mov	r1, r6
   2798e:	6820      	ldr	r0, [r4, #0]
   27990:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   27992:	2800      	cmp	r0, #0
   27994:	db02      	blt.n	2799c <write_cb+0x42>
   27996:	8a23      	ldrh	r3, [r4, #16]
   27998:	4298      	cmp	r0, r3
   2799a:	d007      	beq.n	279ac <write_cb+0x52>
		data->err = err_to_att(write);
   2799c:	f7ff fdc5 	bl	2752a <err_to_att>
   279a0:	7520      	strb	r0, [r4, #20]
}
   279a2:	4628      	mov	r0, r5
   279a4:	b003      	add	sp, #12
   279a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   279a8:	2304      	movs	r3, #4
   279aa:	e7e9      	b.n	27980 <write_cb+0x26>
	data->err = 0U;
   279ac:	2300      	movs	r3, #0
   279ae:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   279b0:	2501      	movs	r5, #1
   279b2:	e7f6      	b.n	279a2 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
   279b4:	2500      	movs	r5, #0
   279b6:	e7f4      	b.n	279a2 <write_cb+0x48>

000279b8 <bt_att_chan_send_rsp>:
{
   279b8:	b538      	push	{r3, r4, r5, lr}
   279ba:	4604      	mov	r4, r0
   279bc:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   279be:	f7ff ff07 	bl	277d0 <bt_att_chan_send>
	if (err) {
   279c2:	b900      	cbnz	r0, 279c6 <bt_att_chan_send_rsp+0xe>
}
   279c4:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   279c6:	4629      	mov	r1, r5
   279c8:	f504 7080 	add.w	r0, r4, #256	; 0x100
   279cc:	f7f2 fda6 	bl	1a51c <net_buf_put>
}
   279d0:	e7f8      	b.n	279c4 <bt_att_chan_send_rsp+0xc>

000279d2 <att_chan_read>:
{
   279d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   279d6:	b085      	sub	sp, #20
   279d8:	4680      	mov	r8, r0
   279da:	4689      	mov	r9, r1
   279dc:	9202      	str	r2, [sp, #8]
   279de:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   279e0:	6881      	ldr	r1, [r0, #8]
   279e2:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   279e4:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   279e8:	4613      	mov	r3, r2
	size_t bytes = 0;
   279ea:	2200      	movs	r2, #0
	while (buf) {
   279ec:	b11b      	cbz	r3, 279f6 <att_chan_read+0x24>
		bytes += buf->len;
   279ee:	8999      	ldrh	r1, [r3, #12]
   279f0:	440a      	add	r2, r1
		buf = buf->frags;
   279f2:	681b      	ldr	r3, [r3, #0]
   279f4:	e7fa      	b.n	279ec <att_chan_read+0x1a>
   279f6:	4290      	cmp	r0, r2
   279f8:	d804      	bhi.n	27a04 <att_chan_read+0x32>
		return 0;
   279fa:	2400      	movs	r4, #0
}
   279fc:	4620      	mov	r0, r4
   279fe:	b005      	add	sp, #20
   27a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   27a04:	9802      	ldr	r0, [sp, #8]
   27a06:	f7f2 fe17 	bl	1a638 <net_buf_frag_last>
   27a0a:	4607      	mov	r7, r0
	size_t len, total = 0;
   27a0c:	f04f 0a00 	mov.w	sl, #0
   27a10:	e083      	b.n	27b1a <att_chan_read+0x148>
		bytes += buf->len;
   27a12:	8999      	ldrh	r1, [r3, #12]
   27a14:	440a      	add	r2, r1
		buf = buf->frags;
   27a16:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   27a18:	2b00      	cmp	r3, #0
   27a1a:	d1fa      	bne.n	27a12 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27a1c:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   27a1e:	f107 0608 	add.w	r6, r7, #8
   27a22:	4630      	mov	r0, r6
   27a24:	f000 febe 	bl	287a4 <net_buf_simple_tailroom>
   27a28:	4284      	cmp	r4, r0
   27a2a:	d32c      	bcc.n	27a86 <att_chan_read+0xb4>
   27a2c:	4630      	mov	r0, r6
   27a2e:	f000 feb9 	bl	287a4 <net_buf_simple_tailroom>
   27a32:	4606      	mov	r6, r0
		if (!len) {
   27a34:	2e00      	cmp	r6, #0
   27a36:	d032      	beq.n	27a9e <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   27a38:	f8d9 4004 	ldr.w	r4, [r9, #4]
   27a3c:	68b9      	ldr	r1, [r7, #8]
   27a3e:	89ba      	ldrh	r2, [r7, #12]
   27a40:	9500      	str	r5, [sp, #0]
   27a42:	b2b3      	uxth	r3, r6
   27a44:	440a      	add	r2, r1
   27a46:	4649      	mov	r1, r9
   27a48:	9803      	ldr	r0, [sp, #12]
   27a4a:	47a0      	blx	r4
		if (read < 0) {
   27a4c:	1e04      	subs	r4, r0, #0
   27a4e:	db5a      	blt.n	27b06 <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   27a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27a52:	b12b      	cbz	r3, 27a60 <att_chan_read+0x8e>
   27a54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   27a56:	4621      	mov	r1, r4
   27a58:	4638      	mov	r0, r7
   27a5a:	4798      	blx	r3
   27a5c:	2800      	cmp	r0, #0
   27a5e:	d061      	beq.n	27b24 <att_chan_read+0x152>
		net_buf_add(frag, read);
   27a60:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   27a62:	4621      	mov	r1, r4
   27a64:	f107 0008 	add.w	r0, r7, #8
   27a68:	f7f2 fec2 	bl	1a7f0 <net_buf_simple_add>
		total += read;
   27a6c:	44a2      	add	sl, r4
		offset += read;
   27a6e:	4425      	add	r5, r4
   27a70:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27a72:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   27a76:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   27a78:	2200      	movs	r2, #0
	while (buf) {
   27a7a:	2b00      	cmp	r3, #0
   27a7c:	d049      	beq.n	27b12 <att_chan_read+0x140>
		bytes += buf->len;
   27a7e:	8999      	ldrh	r1, [r3, #12]
   27a80:	440a      	add	r2, r1
		buf = buf->frags;
   27a82:	681b      	ldr	r3, [r3, #0]
   27a84:	e7f9      	b.n	27a7a <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27a86:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   27a8a:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   27a8c:	2200      	movs	r2, #0
	while (buf) {
   27a8e:	e002      	b.n	27a96 <att_chan_read+0xc4>
		bytes += buf->len;
   27a90:	8999      	ldrh	r1, [r3, #12]
   27a92:	440a      	add	r2, r1
		buf = buf->frags;
   27a94:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   27a96:	2b00      	cmp	r3, #0
   27a98:	d1fa      	bne.n	27a90 <att_chan_read+0xbe>
   27a9a:	1ab6      	subs	r6, r6, r2
   27a9c:	e7ca      	b.n	27a34 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   27a9e:	9b02      	ldr	r3, [sp, #8]
   27aa0:	7998      	ldrb	r0, [r3, #6]
   27aa2:	f7f2 fb7d 	bl	1a1a0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   27aa6:	2200      	movs	r2, #0
   27aa8:	2300      	movs	r3, #0
   27aaa:	f000 fe68 	bl	2877e <net_buf_alloc_fixed>
			if (!frag) {
   27aae:	4607      	mov	r7, r0
   27ab0:	b150      	cbz	r0, 27ac8 <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   27ab2:	4601      	mov	r1, r0
   27ab4:	f8dd b008 	ldr.w	fp, [sp, #8]
   27ab8:	4658      	mov	r0, fp
   27aba:	f7f2 fe0b 	bl	1a6d4 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27abe:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   27ac2:	4632      	mov	r2, r6
	while (buf) {
   27ac4:	465b      	mov	r3, fp
   27ac6:	e004      	b.n	27ad2 <att_chan_read+0x100>
				return total;
   27ac8:	4654      	mov	r4, sl
   27aca:	e797      	b.n	279fc <att_chan_read+0x2a>
		bytes += buf->len;
   27acc:	8999      	ldrh	r1, [r3, #12]
   27ace:	440a      	add	r2, r1
		buf = buf->frags;
   27ad0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   27ad2:	2b00      	cmp	r3, #0
   27ad4:	d1fa      	bne.n	27acc <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27ad6:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   27ad8:	f107 0b08 	add.w	fp, r7, #8
   27adc:	4658      	mov	r0, fp
   27ade:	f000 fe61 	bl	287a4 <net_buf_simple_tailroom>
   27ae2:	4284      	cmp	r4, r0
   27ae4:	d304      	bcc.n	27af0 <att_chan_read+0x11e>
   27ae6:	4658      	mov	r0, fp
   27ae8:	f000 fe5c 	bl	287a4 <net_buf_simple_tailroom>
   27aec:	4606      	mov	r6, r0
   27aee:	e7a3      	b.n	27a38 <att_chan_read+0x66>
   27af0:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   27af4:	9b02      	ldr	r3, [sp, #8]
   27af6:	e002      	b.n	27afe <att_chan_read+0x12c>
		bytes += buf->len;
   27af8:	899a      	ldrh	r2, [r3, #12]
   27afa:	4416      	add	r6, r2
		buf = buf->frags;
   27afc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   27afe:	2b00      	cmp	r3, #0
   27b00:	d1fa      	bne.n	27af8 <att_chan_read+0x126>
   27b02:	1b8e      	subs	r6, r1, r6
   27b04:	e798      	b.n	27a38 <att_chan_read+0x66>
			if (total) {
   27b06:	f1ba 0f00 	cmp.w	sl, #0
   27b0a:	f43f af77 	beq.w	279fc <att_chan_read+0x2a>
				return total;
   27b0e:	4654      	mov	r4, sl
   27b10:	e774      	b.n	279fc <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27b12:	4290      	cmp	r0, r2
   27b14:	d906      	bls.n	27b24 <att_chan_read+0x152>
   27b16:	45b3      	cmp	fp, r6
   27b18:	d104      	bne.n	27b24 <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27b1a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   27b1e:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   27b20:	2200      	movs	r2, #0
	while (buf) {
   27b22:	e779      	b.n	27a18 <att_chan_read+0x46>
	return total;
   27b24:	4654      	mov	r4, sl
   27b26:	e769      	b.n	279fc <att_chan_read+0x2a>

00027b28 <read_cb>:
{
   27b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   27b2a:	b083      	sub	sp, #12
   27b2c:	4606      	mov	r6, r0
   27b2e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   27b30:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   27b32:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   27b34:	2300      	movs	r3, #0
   27b36:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27b38:	2215      	movs	r2, #21
   27b3a:	4631      	mov	r1, r6
   27b3c:	f000 fd2e 	bl	2859c <bt_gatt_check_perm>
   27b40:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   27b42:	b118      	cbz	r0, 27b4c <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   27b44:	2500      	movs	r5, #0
}
   27b46:	4628      	mov	r0, r5
   27b48:	b003      	add	sp, #12
   27b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27b4c:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27b4e:	2300      	movs	r3, #0
   27b50:	9301      	str	r3, [sp, #4]
   27b52:	9300      	str	r3, [sp, #0]
   27b54:	88a3      	ldrh	r3, [r4, #4]
   27b56:	68a2      	ldr	r2, [r4, #8]
   27b58:	4631      	mov	r1, r6
   27b5a:	4638      	mov	r0, r7
   27b5c:	f7ff ff39 	bl	279d2 <att_chan_read>
	if (ret < 0) {
   27b60:	2800      	cmp	r0, #0
   27b62:	db01      	blt.n	27b68 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   27b64:	2501      	movs	r5, #1
   27b66:	e7ee      	b.n	27b46 <read_cb+0x1e>
		data->err = err_to_att(ret);
   27b68:	f7ff fcdf 	bl	2752a <err_to_att>
   27b6c:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   27b6e:	e7ea      	b.n	27b46 <read_cb+0x1e>

00027b70 <find_info_cb>:
{
   27b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27b74:	4606      	mov	r6, r0
   27b76:	460f      	mov	r7, r1
   27b78:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   27b7a:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   27b7e:	6893      	ldr	r3, [r2, #8]
   27b80:	b14b      	cbz	r3, 27b96 <find_info_cb+0x26>
	switch (data->rsp->format) {
   27b82:	68a3      	ldr	r3, [r4, #8]
   27b84:	781d      	ldrb	r5, [r3, #0]
   27b86:	2d01      	cmp	r5, #1
   27b88:	d013      	beq.n	27bb2 <find_info_cb+0x42>
   27b8a:	2d02      	cmp	r5, #2
   27b8c:	d02d      	beq.n	27bea <find_info_cb+0x7a>
   27b8e:	2500      	movs	r5, #0
}
   27b90:	4628      	mov	r0, r5
   27b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   27b96:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   27b98:	2101      	movs	r1, #1
   27b9a:	3008      	adds	r0, #8
   27b9c:	f7f2 fe28 	bl	1a7f0 <net_buf_simple_add>
   27ba0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27ba2:	6833      	ldr	r3, [r6, #0]
   27ba4:	781b      	ldrb	r3, [r3, #0]
   27ba6:	b913      	cbnz	r3, 27bae <find_info_cb+0x3e>
   27ba8:	2301      	movs	r3, #1
   27baa:	7003      	strb	r3, [r0, #0]
   27bac:	e7e9      	b.n	27b82 <find_info_cb+0x12>
   27bae:	2302      	movs	r3, #2
   27bb0:	e7fb      	b.n	27baa <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27bb2:	6833      	ldr	r3, [r6, #0]
   27bb4:	f893 9000 	ldrb.w	r9, [r3]
   27bb8:	f1b9 0f00 	cmp.w	r9, #0
   27bbc:	d001      	beq.n	27bc2 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   27bbe:	2500      	movs	r5, #0
   27bc0:	e7e6      	b.n	27b90 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   27bc2:	6860      	ldr	r0, [r4, #4]
   27bc4:	2104      	movs	r1, #4
   27bc6:	3008      	adds	r0, #8
   27bc8:	f7f2 fe12 	bl	1a7f0 <net_buf_simple_add>
   27bcc:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   27bce:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27bd0:	6832      	ldr	r2, [r6, #0]
   27bd2:	68e3      	ldr	r3, [r4, #12]
   27bd4:	8852      	ldrh	r2, [r2, #2]
   27bd6:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   27bd8:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   27bdc:	6862      	ldr	r2, [r4, #4]
   27bde:	8992      	ldrh	r2, [r2, #12]
   27be0:	1a9b      	subs	r3, r3, r2
   27be2:	2b04      	cmp	r3, #4
   27be4:	d8d4      	bhi.n	27b90 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   27be6:	464d      	mov	r5, r9
   27be8:	e7d2      	b.n	27b90 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   27bea:	6833      	ldr	r3, [r6, #0]
   27bec:	781b      	ldrb	r3, [r3, #0]
   27bee:	2b02      	cmp	r3, #2
   27bf0:	d001      	beq.n	27bf6 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   27bf2:	2500      	movs	r5, #0
   27bf4:	e7cc      	b.n	27b90 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   27bf6:	6860      	ldr	r0, [r4, #4]
   27bf8:	2112      	movs	r1, #18
   27bfa:	3008      	adds	r0, #8
   27bfc:	f7f2 fdf8 	bl	1a7f0 <net_buf_simple_add>
   27c00:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   27c02:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   27c04:	68e0      	ldr	r0, [r4, #12]
   27c06:	6831      	ldr	r1, [r6, #0]
   27c08:	2210      	movs	r2, #16
   27c0a:	3101      	adds	r1, #1
   27c0c:	3002      	adds	r0, #2
   27c0e:	f7fe fdf3 	bl	267f8 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   27c12:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   27c16:	6862      	ldr	r2, [r4, #4]
   27c18:	8992      	ldrh	r2, [r2, #12]
   27c1a:	1a9b      	subs	r3, r3, r2
   27c1c:	2b12      	cmp	r3, #18
   27c1e:	d801      	bhi.n	27c24 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   27c20:	2500      	movs	r5, #0
   27c22:	e7b5      	b.n	27b90 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   27c24:	2501      	movs	r5, #1
   27c26:	e7b3      	b.n	27b90 <find_info_cb+0x20>

00027c28 <att_chan_mtu_updated>:
{
   27c28:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   27c2a:	6806      	ldr	r6, [r0, #0]
	return list->head;
   27c2c:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27c2e:	b15c      	cbz	r4, 27c48 <att_chan_mtu_updated+0x20>
   27c30:	f5b4 74aa 	subs.w	r4, r4, #340	; 0x154
   27c34:	d00c      	beq.n	27c50 <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27c36:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   27c3a:	d006      	beq.n	27c4a <att_chan_mtu_updated+0x22>
	return node->next;
   27c3c:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   27c40:	b11b      	cbz	r3, 27c4a <att_chan_mtu_updated+0x22>
   27c42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
   27c46:	e000      	b.n	27c4a <att_chan_mtu_updated+0x22>
   27c48:	4623      	mov	r3, r4
   27c4a:	2200      	movs	r2, #0
   27c4c:	4611      	mov	r1, r2
   27c4e:	e004      	b.n	27c5a <att_chan_mtu_updated+0x32>
   27c50:	4623      	mov	r3, r4
   27c52:	e7fa      	b.n	27c4a <att_chan_mtu_updated+0x22>
   27c54:	461d      	mov	r5, r3
   27c56:	461c      	mov	r4, r3
   27c58:	462b      	mov	r3, r5
   27c5a:	b1bc      	cbz	r4, 27c8c <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   27c5c:	4284      	cmp	r4, r0
   27c5e:	d009      	beq.n	27c74 <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   27c60:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   27c64:	42a9      	cmp	r1, r5
   27c66:	bf38      	it	cc
   27c68:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   27c6a:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   27c6e:	42a2      	cmp	r2, r4
   27c70:	bf38      	it	cc
   27c72:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27c74:	2b00      	cmp	r3, #0
   27c76:	d0ed      	beq.n	27c54 <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27c78:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   27c7c:	d0eb      	beq.n	27c56 <att_chan_mtu_updated+0x2e>
	return node->next;
   27c7e:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   27c82:	2d00      	cmp	r5, #0
   27c84:	d0e7      	beq.n	27c56 <att_chan_mtu_updated+0x2e>
   27c86:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
   27c8a:	e7e4      	b.n	27c56 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27c8c:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   27c90:	428b      	cmp	r3, r1
   27c92:	d803      	bhi.n	27c9c <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   27c94:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27c98:	4294      	cmp	r4, r2
   27c9a:	d90a      	bls.n	27cb2 <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   27c9c:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27ca0:	4282      	cmp	r2, r0
   27ca2:	bf38      	it	cc
   27ca4:	4602      	movcc	r2, r0
   27ca6:	4299      	cmp	r1, r3
   27ca8:	bf38      	it	cc
   27caa:	4619      	movcc	r1, r3
   27cac:	6830      	ldr	r0, [r6, #0]
   27cae:	f7f2 f9d5 	bl	1a05c <bt_gatt_att_max_mtu_changed>
}
   27cb2:	bd70      	pop	{r4, r5, r6, pc}

00027cb4 <att_write_cmd>:
{
   27cb4:	b530      	push	{r4, r5, lr}
   27cb6:	b085      	sub	sp, #20
   27cb8:	4605      	mov	r5, r0
   27cba:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   27cbc:	f101 0008 	add.w	r0, r1, #8
   27cc0:	f000 fd64 	bl	2878c <net_buf_simple_pull_le16>
   27cc4:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   27cc6:	68a2      	ldr	r2, [r4, #8]
   27cc8:	89a1      	ldrh	r1, [r4, #12]
   27cca:	9102      	str	r1, [sp, #8]
   27ccc:	9201      	str	r2, [sp, #4]
   27cce:	2100      	movs	r1, #0
   27cd0:	9100      	str	r1, [sp, #0]
   27cd2:	460a      	mov	r2, r1
   27cd4:	4628      	mov	r0, r5
   27cd6:	f7f0 feb1 	bl	18a3c <att_write_rsp>
}
   27cda:	b005      	add	sp, #20
   27cdc:	bd30      	pop	{r4, r5, pc}

00027cde <att_write_req>:
{
   27cde:	b530      	push	{r4, r5, lr}
   27ce0:	b085      	sub	sp, #20
   27ce2:	4605      	mov	r5, r0
   27ce4:	460c      	mov	r4, r1
   27ce6:	f101 0008 	add.w	r0, r1, #8
   27cea:	f000 fd4f 	bl	2878c <net_buf_simple_pull_le16>
   27cee:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   27cf0:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   27cf2:	89a1      	ldrh	r1, [r4, #12]
   27cf4:	9102      	str	r1, [sp, #8]
   27cf6:	9201      	str	r2, [sp, #4]
   27cf8:	2200      	movs	r2, #0
   27cfa:	9200      	str	r2, [sp, #0]
   27cfc:	2213      	movs	r2, #19
   27cfe:	2112      	movs	r1, #18
   27d00:	4628      	mov	r0, r5
   27d02:	f7f0 fe9b 	bl	18a3c <att_write_rsp>
}
   27d06:	b005      	add	sp, #20
   27d08:	bd30      	pop	{r4, r5, pc}

00027d0a <att_read_group_req>:
{
   27d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d0c:	b089      	sub	sp, #36	; 0x24
   27d0e:	4605      	mov	r5, r0
   27d10:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   27d12:	7b0c      	ldrb	r4, [r1, #12]
   27d14:	3c04      	subs	r4, #4
   27d16:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   27d18:	2c02      	cmp	r4, #2
   27d1a:	d001      	beq.n	27d20 <att_read_group_req+0x16>
   27d1c:	2c10      	cmp	r4, #16
   27d1e:	d142      	bne.n	27da6 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   27d20:	2104      	movs	r1, #4
   27d22:	3008      	adds	r0, #8
   27d24:	f7f2 fd1e 	bl	1a764 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   27d28:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   27d2a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   27d2c:	4622      	mov	r2, r4
   27d2e:	1d01      	adds	r1, r0, #4
   27d30:	a801      	add	r0, sp, #4
   27d32:	f7fe fdf4 	bl	2691e <bt_uuid_create>
   27d36:	b3c8      	cbz	r0, 27dac <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   27d38:	f10d 0216 	add.w	r2, sp, #22
   27d3c:	4639      	mov	r1, r7
   27d3e:	4630      	mov	r0, r6
   27d40:	f7ff fbe4 	bl	2750c <range_is_valid>
   27d44:	b1f0      	cbz	r0, 27d84 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   27d46:	2300      	movs	r3, #0
   27d48:	f88d 3018 	strb.w	r3, [sp, #24]
   27d4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   27d50:	f8ad 301a 	strh.w	r3, [sp, #26]
   27d54:	a906      	add	r1, sp, #24
   27d56:	a801      	add	r0, sp, #4
   27d58:	f7fe fdc3 	bl	268e2 <bt_uuid_cmp>
   27d5c:	b158      	cbz	r0, 27d76 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   27d5e:	2300      	movs	r3, #0
   27d60:	f88d 301c 	strb.w	r3, [sp, #28]
   27d64:	f642 0301 	movw	r3, #10241	; 0x2801
   27d68:	f8ad 301e 	strh.w	r3, [sp, #30]
   27d6c:	a907      	add	r1, sp, #28
   27d6e:	a801      	add	r0, sp, #4
   27d70:	f7fe fdb7 	bl	268e2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   27d74:	b978      	cbnz	r0, 27d96 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   27d76:	463b      	mov	r3, r7
   27d78:	4632      	mov	r2, r6
   27d7a:	a901      	add	r1, sp, #4
   27d7c:	4628      	mov	r0, r5
   27d7e:	f7f0 ff13 	bl	18ba8 <att_read_group_rsp>
   27d82:	e011      	b.n	27da8 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   27d84:	2301      	movs	r3, #1
   27d86:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   27d8a:	2110      	movs	r1, #16
   27d8c:	4628      	mov	r0, r5
   27d8e:	f7f0 fd5f 	bl	18850 <send_err_rsp>
		return 0;
   27d92:	2000      	movs	r0, #0
   27d94:	e008      	b.n	27da8 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   27d96:	2310      	movs	r3, #16
   27d98:	4632      	mov	r2, r6
   27d9a:	4619      	mov	r1, r3
   27d9c:	4628      	mov	r0, r5
   27d9e:	f7f0 fd57 	bl	18850 <send_err_rsp>
		return 0;
   27da2:	2000      	movs	r0, #0
   27da4:	e000      	b.n	27da8 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   27da6:	2004      	movs	r0, #4
}
   27da8:	b009      	add	sp, #36	; 0x24
   27daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   27dac:	200e      	movs	r0, #14
   27dae:	e7fb      	b.n	27da8 <att_read_group_req+0x9e>

00027db0 <att_read_blob_req>:
{
   27db0:	b500      	push	{lr}
   27db2:	b083      	sub	sp, #12
	req = (void *)buf->data;
   27db4:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   27db6:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   27db8:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   27dba:	9200      	str	r2, [sp, #0]
   27dbc:	220d      	movs	r2, #13
   27dbe:	210c      	movs	r1, #12
   27dc0:	f7f0 ff88 	bl	18cd4 <att_read_rsp>
}
   27dc4:	b003      	add	sp, #12
   27dc6:	f85d fb04 	ldr.w	pc, [sp], #4

00027dca <att_read_req>:
{
   27dca:	b500      	push	{lr}
   27dcc:	b083      	sub	sp, #12
	req = (void *)buf->data;
   27dce:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   27dd0:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   27dd2:	2200      	movs	r2, #0
   27dd4:	9200      	str	r2, [sp, #0]
   27dd6:	220b      	movs	r2, #11
   27dd8:	210a      	movs	r1, #10
   27dda:	f7f0 ff7b 	bl	18cd4 <att_read_rsp>
}
   27dde:	b003      	add	sp, #12
   27de0:	f85d fb04 	ldr.w	pc, [sp], #4

00027de4 <att_read_type_req>:
{
   27de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27de6:	b087      	sub	sp, #28
   27de8:	4605      	mov	r5, r0
   27dea:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   27dec:	7b0c      	ldrb	r4, [r1, #12]
   27dee:	3c04      	subs	r4, #4
   27df0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   27df2:	2c02      	cmp	r4, #2
   27df4:	d001      	beq.n	27dfa <att_read_type_req+0x16>
   27df6:	2c10      	cmp	r4, #16
   27df8:	d123      	bne.n	27e42 <att_read_type_req+0x5e>
   27dfa:	2104      	movs	r1, #4
   27dfc:	3008      	adds	r0, #8
   27dfe:	f7f2 fcb1 	bl	1a764 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   27e02:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   27e04:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   27e06:	4622      	mov	r2, r4
   27e08:	1d01      	adds	r1, r0, #4
   27e0a:	a801      	add	r0, sp, #4
   27e0c:	f7fe fd87 	bl	2691e <bt_uuid_create>
   27e10:	b1c8      	cbz	r0, 27e46 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   27e12:	f10d 0216 	add.w	r2, sp, #22
   27e16:	4639      	mov	r1, r7
   27e18:	4630      	mov	r0, r6
   27e1a:	f7ff fb77 	bl	2750c <range_is_valid>
   27e1e:	b138      	cbz	r0, 27e30 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   27e20:	463b      	mov	r3, r7
   27e22:	4632      	mov	r2, r6
   27e24:	a901      	add	r1, sp, #4
   27e26:	4628      	mov	r0, r5
   27e28:	f7f0 ffa6 	bl	18d78 <att_read_type_rsp>
}
   27e2c:	b007      	add	sp, #28
   27e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   27e30:	2301      	movs	r3, #1
   27e32:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   27e36:	2108      	movs	r1, #8
   27e38:	4628      	mov	r0, r5
   27e3a:	f7f0 fd09 	bl	18850 <send_err_rsp>
		return 0;
   27e3e:	2000      	movs	r0, #0
   27e40:	e7f4      	b.n	27e2c <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   27e42:	2004      	movs	r0, #4
   27e44:	e7f2      	b.n	27e2c <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   27e46:	200e      	movs	r0, #14
   27e48:	e7f0      	b.n	27e2c <att_read_type_req+0x48>

00027e4a <att_find_type_req>:
{
   27e4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27e4e:	b087      	sub	sp, #28
   27e50:	4607      	mov	r7, r0
   27e52:	460c      	mov	r4, r1
   27e54:	2106      	movs	r1, #6
   27e56:	f104 0008 	add.w	r0, r4, #8
   27e5a:	f7f2 fc83 	bl	1a764 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   27e5e:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   27e60:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   27e62:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   27e66:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   27e6a:	f10d 020e 	add.w	r2, sp, #14
   27e6e:	4631      	mov	r1, r6
   27e70:	4628      	mov	r0, r5
   27e72:	f7ff fb4b 	bl	2750c <range_is_valid>
   27e76:	b1d0      	cbz	r0, 27eae <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   27e78:	2300      	movs	r3, #0
   27e7a:	f88d 3010 	strb.w	r3, [sp, #16]
   27e7e:	f8ad 8012 	strh.w	r8, [sp, #18]
   27e82:	f88d 3014 	strb.w	r3, [sp, #20]
   27e86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   27e8a:	f8ad 3016 	strh.w	r3, [sp, #22]
   27e8e:	a905      	add	r1, sp, #20
   27e90:	a804      	add	r0, sp, #16
   27e92:	f7fe fd26 	bl	268e2 <bt_uuid_cmp>
   27e96:	b998      	cbnz	r0, 27ec0 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   27e98:	7b23      	ldrb	r3, [r4, #12]
   27e9a:	9300      	str	r3, [sp, #0]
   27e9c:	464b      	mov	r3, r9
   27e9e:	4632      	mov	r2, r6
   27ea0:	4629      	mov	r1, r5
   27ea2:	4638      	mov	r0, r7
   27ea4:	f7f0 ffb2 	bl	18e0c <att_find_type_rsp>
}
   27ea8:	b007      	add	sp, #28
   27eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   27eae:	2301      	movs	r3, #1
   27eb0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   27eb4:	2106      	movs	r1, #6
   27eb6:	4638      	mov	r0, r7
   27eb8:	f7f0 fcca 	bl	18850 <send_err_rsp>
		return 0;
   27ebc:	2000      	movs	r0, #0
   27ebe:	e7f3      	b.n	27ea8 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   27ec0:	230a      	movs	r3, #10
   27ec2:	462a      	mov	r2, r5
   27ec4:	2106      	movs	r1, #6
   27ec6:	4638      	mov	r0, r7
   27ec8:	f7f0 fcc2 	bl	18850 <send_err_rsp>
		return 0;
   27ecc:	2000      	movs	r0, #0
   27ece:	e7eb      	b.n	27ea8 <att_find_type_req+0x5e>

00027ed0 <att_find_info_req>:
{
   27ed0:	b570      	push	{r4, r5, r6, lr}
   27ed2:	b082      	sub	sp, #8
   27ed4:	4604      	mov	r4, r0
	req = (void *)buf->data;
   27ed6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   27ed8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   27eda:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   27edc:	f10d 0206 	add.w	r2, sp, #6
   27ee0:	4631      	mov	r1, r6
   27ee2:	4628      	mov	r0, r5
   27ee4:	f7ff fb12 	bl	2750c <range_is_valid>
   27ee8:	b130      	cbz	r0, 27ef8 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   27eea:	4632      	mov	r2, r6
   27eec:	4629      	mov	r1, r5
   27eee:	4620      	mov	r0, r4
   27ef0:	f7f0 ffd6 	bl	18ea0 <att_find_info_rsp>
}
   27ef4:	b002      	add	sp, #8
   27ef6:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   27ef8:	2301      	movs	r3, #1
   27efa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   27efe:	2104      	movs	r1, #4
   27f00:	4620      	mov	r0, r4
   27f02:	f7f0 fca5 	bl	18850 <send_err_rsp>
		return 0;
   27f06:	2000      	movs	r0, #0
   27f08:	e7f4      	b.n	27ef4 <att_find_info_req+0x24>

00027f0a <bt_att_init>:
{
   27f0a:	b508      	push	{r3, lr}
	bt_gatt_init();
   27f0c:	f7f1 fbf6 	bl	196fc <bt_gatt_init>
}
   27f10:	bd08      	pop	{r3, pc}

00027f12 <att_confirm>:
{
   27f12:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   27f14:	2300      	movs	r3, #0
   27f16:	898a      	ldrh	r2, [r1, #12]
   27f18:	6889      	ldr	r1, [r1, #8]
   27f1a:	f7f1 f85f 	bl	18fdc <att_handle_rsp>
}
   27f1e:	bd08      	pop	{r3, pc}

00027f20 <att_chan_detach>:
{
   27f20:	b510      	push	{r4, lr}
   27f22:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   27f24:	6800      	ldr	r0, [r0, #0]
   27f26:	f504 72aa 	add.w	r2, r4, #340	; 0x154
	return list->head;
   27f2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27f2c:	2100      	movs	r1, #0
   27f2e:	b1e3      	cbz	r3, 27f6a <att_chan_detach+0x4a>
   27f30:	4293      	cmp	r3, r2
   27f32:	d002      	beq.n	27f3a <att_chan_detach+0x1a>
   27f34:	4619      	mov	r1, r3
   27f36:	681b      	ldr	r3, [r3, #0]
   27f38:	e7f9      	b.n	27f2e <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   27f3a:	b149      	cbz	r1, 27f50 <att_chan_detach+0x30>
	return node->next;
   27f3c:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	parent->next = child;
   27f40:	600b      	str	r3, [r1, #0]
	return list->tail;
   27f42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
Z_GENLIST_REMOVE(slist, snode)
   27f44:	4293      	cmp	r3, r2
   27f46:	d00b      	beq.n	27f60 <att_chan_detach+0x40>
	parent->next = child;
   27f48:	2300      	movs	r3, #0
   27f4a:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27f4e:	e00c      	b.n	27f6a <att_chan_detach+0x4a>
	return node->next;
   27f50:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	list->head = node;
   27f54:	6283      	str	r3, [r0, #40]	; 0x28
	return list->tail;
   27f56:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
Z_GENLIST_REMOVE(slist, snode)
   27f58:	4291      	cmp	r1, r2
   27f5a:	d1f5      	bne.n	27f48 <att_chan_detach+0x28>
	list->tail = node;
   27f5c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   27f5e:	e7f3      	b.n	27f48 <att_chan_detach+0x28>
	list->tail = node;
   27f60:	62c1      	str	r1, [r0, #44]	; 0x2c
}
   27f62:	e7f1      	b.n	27f48 <att_chan_detach+0x28>
		net_buf_unref(buf);
   27f64:	4618      	mov	r0, r3
   27f66:	f7f2 fb11 	bl	1a58c <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   27f6a:	2200      	movs	r2, #0
   27f6c:	2300      	movs	r3, #0
   27f6e:	f504 7080 	add.w	r0, r4, #256	; 0x100
   27f72:	f7f2 fa73 	bl	1a45c <net_buf_get>
   27f76:	4603      	mov	r3, r0
   27f78:	2800      	cmp	r0, #0
   27f7a:	d1f3      	bne.n	27f64 <att_chan_detach+0x44>
	if (chan->req) {
   27f7c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   27f80:	b12b      	cbz	r3, 27f8e <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   27f82:	230e      	movs	r3, #14
   27f84:	2200      	movs	r2, #0
   27f86:	4611      	mov	r1, r2
   27f88:	4620      	mov	r0, r4
   27f8a:	f7f1 f827 	bl	18fdc <att_handle_rsp>
	chan->att = NULL;
   27f8e:	2300      	movs	r3, #0
   27f90:	6023      	str	r3, [r4, #0]
}
   27f92:	bd10      	pop	{r4, pc}

00027f94 <bt_att_disconnected>:
{
   27f94:	b538      	push	{r3, r4, r5, lr}
   27f96:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   27f98:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   27f9c:	b125      	cbz	r5, 27fa8 <bt_att_disconnected+0x14>
   27f9e:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   27fa0:	f7ff ffbe 	bl	27f20 <att_chan_detach>
	return list->head;
   27fa4:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (!sys_slist_is_empty(&att->chans)) {
   27fa6:	b103      	cbz	r3, 27faa <bt_att_disconnected+0x16>
}
   27fa8:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   27faa:	4628      	mov	r0, r5
   27fac:	f7f1 f862 	bl	19074 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   27fb0:	6820      	ldr	r0, [r4, #0]
   27fb2:	f7f2 f89f 	bl	1a0f4 <bt_gatt_disconnected>
   27fb6:	e7f7      	b.n	27fa8 <bt_att_disconnected+0x14>

00027fb8 <update_range>:
{
   27fb8:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   27fba:	8804      	ldrh	r4, [r0, #0]
   27fbc:	42a2      	cmp	r2, r4
   27fbe:	d302      	bcc.n	27fc6 <update_range+0xe>
   27fc0:	880d      	ldrh	r5, [r1, #0]
   27fc2:	42ab      	cmp	r3, r5
   27fc4:	d908      	bls.n	27fd8 <update_range+0x20>
	if (*start > new_start) {
   27fc6:	42a2      	cmp	r2, r4
   27fc8:	d200      	bcs.n	27fcc <update_range+0x14>
		*start = new_start;
   27fca:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   27fcc:	880a      	ldrh	r2, [r1, #0]
   27fce:	4293      	cmp	r3, r2
   27fd0:	d904      	bls.n	27fdc <update_range+0x24>
		*end = new_end;
   27fd2:	800b      	strh	r3, [r1, #0]
	return true;
   27fd4:	2001      	movs	r0, #1
   27fd6:	e002      	b.n	27fde <update_range+0x26>
		return false;
   27fd8:	2000      	movs	r0, #0
   27fda:	e000      	b.n	27fde <update_range+0x26>
	return true;
   27fdc:	2001      	movs	r0, #1
}
   27fde:	bc30      	pop	{r4, r5}
   27fe0:	4770      	bx	lr

00027fe2 <cf_set_value>:
{
   27fe2:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   27fe4:	2300      	movs	r3, #0
   27fe6:	e001      	b.n	27fec <cf_set_value+0xa>
   27fe8:	3301      	adds	r3, #1
   27fea:	b29b      	uxth	r3, r3
   27fec:	2b02      	cmp	r3, #2
   27fee:	d824      	bhi.n	2803a <cf_set_value+0x58>
   27ff0:	08dd      	lsrs	r5, r3, #3
   27ff2:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   27ff6:	d90f      	bls.n	28018 <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   27ff8:	1944      	adds	r4, r0, r5
   27ffa:	7a24      	ldrb	r4, [r4, #8]
   27ffc:	f003 0607 	and.w	r6, r3, #7
   28000:	40f4      	lsrs	r4, r6
   28002:	f014 0f01 	tst.w	r4, #1
   28006:	d0ef      	beq.n	27fe8 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   28008:	5d4c      	ldrb	r4, [r1, r5]
   2800a:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2800e:	f016 0f01 	tst.w	r6, #1
   28012:	d1e9      	bne.n	27fe8 <cf_set_value+0x6>
			return false;
   28014:	2000      	movs	r0, #0
   28016:	e013      	b.n	28040 <cf_set_value+0x5e>
   28018:	2300      	movs	r3, #0
   2801a:	e008      	b.n	2802e <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2801c:	5ccc      	ldrb	r4, [r1, r3]
   2801e:	f004 0407 	and.w	r4, r4, #7
   28022:	18c5      	adds	r5, r0, r3
   28024:	7a2e      	ldrb	r6, [r5, #8]
   28026:	4334      	orrs	r4, r6
   28028:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2802a:	3301      	adds	r3, #1
   2802c:	b29b      	uxth	r3, r3
   2802e:	4293      	cmp	r3, r2
   28030:	d205      	bcs.n	2803e <cf_set_value+0x5c>
   28032:	2b00      	cmp	r3, #0
   28034:	d0f2      	beq.n	2801c <cf_set_value+0x3a>
	return true;
   28036:	2001      	movs	r0, #1
   28038:	e002      	b.n	28040 <cf_set_value+0x5e>
   2803a:	2300      	movs	r3, #0
   2803c:	e7f7      	b.n	2802e <cf_set_value+0x4c>
   2803e:	2001      	movs	r0, #1
}
   28040:	bc70      	pop	{r4, r5, r6}
   28042:	4770      	bx	lr

00028044 <gatt_ccc_changed>:
{
   28044:	b510      	push	{r4, lr}
   28046:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   28048:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2804a:	460b      	mov	r3, r1
   2804c:	2b00      	cmp	r3, #0
   2804e:	dd07      	ble.n	28060 <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
   28050:	8953      	ldrh	r3, [r2, #10]
   28052:	4299      	cmp	r1, r3
   28054:	d003      	beq.n	2805e <gatt_ccc_changed+0x1a>
		ccc->value = value;
   28056:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   28058:	68d3      	ldr	r3, [r2, #12]
   2805a:	b103      	cbz	r3, 2805e <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2805c:	4798      	blx	r3
}
   2805e:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
   28060:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   28064:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   28068:	8924      	ldrh	r4, [r4, #8]
   2806a:	428c      	cmp	r4, r1
   2806c:	d900      	bls.n	28070 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   2806e:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   28070:	3301      	adds	r3, #1
   28072:	e7eb      	b.n	2804c <gatt_ccc_changed+0x8>

00028074 <gatt_indicate_rsp>:
{
   28074:	b510      	push	{r4, lr}
   28076:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   28078:	68a3      	ldr	r3, [r4, #8]
   2807a:	b113      	cbz	r3, 28082 <gatt_indicate_rsp+0xe>
   2807c:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2807e:	4621      	mov	r1, r4
   28080:	4798      	blx	r3
	params->_ref--;
   28082:	7da3      	ldrb	r3, [r4, #22]
   28084:	3b01      	subs	r3, #1
   28086:	b2db      	uxtb	r3, r3
   28088:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2808a:	68e2      	ldr	r2, [r4, #12]
   2808c:	b112      	cbz	r2, 28094 <gatt_indicate_rsp+0x20>
   2808e:	b90b      	cbnz	r3, 28094 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   28090:	4620      	mov	r0, r4
   28092:	4790      	blx	r2
}
   28094:	bd10      	pop	{r4, pc}

00028096 <match_uuid>:
	data->attr = attr;
   28096:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   28098:	8091      	strh	r1, [r2, #4]
}
   2809a:	2000      	movs	r0, #0
   2809c:	4770      	bx	lr

0002809e <gen_hash_m>:
{
   2809e:	b5f0      	push	{r4, r5, r6, r7, lr}
   280a0:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   280a2:	6806      	ldr	r6, [r0, #0]
   280a4:	7835      	ldrb	r5, [r6, #0]
   280a6:	2d00      	cmp	r5, #0
   280a8:	d161      	bne.n	2816e <gen_hash_m+0xd0>
   280aa:	4607      	mov	r7, r0
   280ac:	4614      	mov	r4, r2
	switch (u16->val) {
   280ae:	8873      	ldrh	r3, [r6, #2]
   280b0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   280b4:	d019      	beq.n	280ea <gen_hash_m+0x4c>
   280b6:	d913      	bls.n	280e0 <gen_hash_m+0x42>
   280b8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   280bc:	33ff      	adds	r3, #255	; 0xff
   280be:	b29b      	uxth	r3, r3
   280c0:	2b04      	cmp	r3, #4
   280c2:	d85a      	bhi.n	2817a <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   280c4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   280c8:	2202      	movs	r2, #2
   280ca:	f10d 010e 	add.w	r1, sp, #14
   280ce:	4620      	mov	r0, r4
   280d0:	f7fe fa0b 	bl	264ea <tc_cmac_update>
   280d4:	2800      	cmp	r0, #0
   280d6:	d13a      	bne.n	2814e <gen_hash_m+0xb0>
			state->err = -EINVAL;
   280d8:	f06f 0315 	mvn.w	r3, #21
   280dc:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   280de:	e047      	b.n	28170 <gen_hash_m+0xd2>
	switch (u16->val) {
   280e0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   280e4:	b29b      	uxth	r3, r3
   280e6:	2b03      	cmp	r3, #3
   280e8:	d845      	bhi.n	28176 <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   280ea:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   280ee:	2202      	movs	r2, #2
   280f0:	f10d 010e 	add.w	r1, sp, #14
   280f4:	4620      	mov	r0, r4
   280f6:	f7fe f9f8 	bl	264ea <tc_cmac_update>
   280fa:	b918      	cbnz	r0, 28104 <gen_hash_m+0x66>
			state->err = -EINVAL;
   280fc:	f06f 0315 	mvn.w	r3, #21
   28100:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   28102:	e035      	b.n	28170 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   28104:	8873      	ldrh	r3, [r6, #2]
   28106:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2810a:	2202      	movs	r2, #2
   2810c:	f10d 010e 	add.w	r1, sp, #14
   28110:	4620      	mov	r0, r4
   28112:	f7fe f9ea 	bl	264ea <tc_cmac_update>
   28116:	b180      	cbz	r0, 2813a <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   28118:	687e      	ldr	r6, [r7, #4]
   2811a:	2000      	movs	r0, #0
   2811c:	9000      	str	r0, [sp, #0]
   2811e:	2310      	movs	r3, #16
   28120:	eb0d 0203 	add.w	r2, sp, r3
   28124:	4639      	mov	r1, r7
   28126:	47b0      	blx	r6
		if (len < 0) {
   28128:	1e02      	subs	r2, r0, #0
   2812a:	db0a      	blt.n	28142 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   2812c:	a904      	add	r1, sp, #16
   2812e:	4620      	mov	r0, r4
   28130:	f7fe f9db 	bl	264ea <tc_cmac_update>
   28134:	b138      	cbz	r0, 28146 <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   28136:	2501      	movs	r5, #1
   28138:	e01a      	b.n	28170 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2813a:	f06f 0315 	mvn.w	r3, #21
   2813e:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   28140:	e016      	b.n	28170 <gen_hash_m+0xd2>
			state->err = len;
   28142:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   28144:	e014      	b.n	28170 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   28146:	f06f 0315 	mvn.w	r3, #21
   2814a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2814c:	e010      	b.n	28170 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   2814e:	8873      	ldrh	r3, [r6, #2]
   28150:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28154:	2202      	movs	r2, #2
   28156:	f10d 010e 	add.w	r1, sp, #14
   2815a:	4620      	mov	r0, r4
   2815c:	f7fe f9c5 	bl	264ea <tc_cmac_update>
   28160:	b108      	cbz	r0, 28166 <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   28162:	2501      	movs	r5, #1
   28164:	e004      	b.n	28170 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   28166:	f06f 0315 	mvn.w	r3, #21
   2816a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2816c:	e000      	b.n	28170 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   2816e:	2501      	movs	r5, #1
}
   28170:	4628      	mov	r0, r5
   28172:	b009      	add	sp, #36	; 0x24
   28174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   28176:	2501      	movs	r5, #1
   28178:	e7fa      	b.n	28170 <gen_hash_m+0xd2>
   2817a:	2501      	movs	r5, #1
   2817c:	e7f8      	b.n	28170 <gen_hash_m+0xd2>

0002817e <find_ccc_cfg>:
{
   2817e:	b5f0      	push	{r4, r5, r6, r7, lr}
   28180:	b083      	sub	sp, #12
   28182:	4607      	mov	r7, r0
   28184:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   28186:	2400      	movs	r4, #0
   28188:	b11c      	cbz	r4, 28192 <find_ccc_cfg+0x14>
	return NULL;
   2818a:	2600      	movs	r6, #0
}
   2818c:	4630      	mov	r0, r6
   2818e:	b003      	add	sp, #12
   28190:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   28192:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   28196:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   2819a:	b167      	cbz	r7, 281b6 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   2819c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   281a0:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   281a2:	3201      	adds	r2, #1
   281a4:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   281a8:	4638      	mov	r0, r7
   281aa:	f7ff f844 	bl	27236 <bt_conn_is_peer_addr_le>
   281ae:	2800      	cmp	r0, #0
   281b0:	d1ec      	bne.n	2818c <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   281b2:	3401      	adds	r4, #1
   281b4:	e7e8      	b.n	28188 <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   281b6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   281ba:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   281be:	2300      	movs	r3, #0
   281c0:	9300      	str	r3, [sp, #0]
   281c2:	f8cd 3003 	str.w	r3, [sp, #3]
   281c6:	2207      	movs	r2, #7
   281c8:	4669      	mov	r1, sp
   281ca:	3001      	adds	r0, #1
   281cc:	f7fe fae7 	bl	2679e <memcmp>
   281d0:	2800      	cmp	r0, #0
   281d2:	d1ee      	bne.n	281b2 <find_ccc_cfg+0x34>
   281d4:	e7da      	b.n	2818c <find_ccc_cfg+0xe>

000281d6 <clear_ccc_cfg>:
{
   281d6:	b530      	push	{r4, r5, lr}
   281d8:	b083      	sub	sp, #12
   281da:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   281dc:	2500      	movs	r5, #0
   281de:	9500      	str	r5, [sp, #0]
   281e0:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
   281e4:	2207      	movs	r2, #7
   281e6:	4669      	mov	r1, sp
   281e8:	3001      	adds	r0, #1
   281ea:	f7fe fb05 	bl	267f8 <memcpy>
	cfg->id = 0U;
   281ee:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   281f0:	8125      	strh	r5, [r4, #8]
}
   281f2:	b003      	add	sp, #12
   281f4:	bd30      	pop	{r4, r5, pc}

000281f6 <clear_sc_cfg>:
{
   281f6:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   281f8:	220c      	movs	r2, #12
   281fa:	2100      	movs	r1, #0
   281fc:	f7fe fb20 	bl	26840 <memset>
}
   28200:	bd08      	pop	{r3, pc}

00028202 <bt_gatt_clear_sc>:
{
   28202:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   28204:	f7f1 f840 	bl	19288 <find_sc_cfg>
	if (!cfg) {
   28208:	b108      	cbz	r0, 2820e <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   2820a:	f7ff fff4 	bl	281f6 <clear_sc_cfg>
}
   2820e:	2000      	movs	r0, #0
   28210:	bd08      	pop	{r3, pc}

00028212 <sc_ccc_cfg_write>:
{
   28212:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   28214:	2a02      	cmp	r2, #2
   28216:	d003      	beq.n	28220 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   28218:	f7f1 f964 	bl	194e4 <sc_clear>
}
   2821c:	2002      	movs	r0, #2
   2821e:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   28220:	2300      	movs	r3, #0
   28222:	461a      	mov	r2, r3
   28224:	f100 0190 	add.w	r1, r0, #144	; 0x90
   28228:	7a00      	ldrb	r0, [r0, #8]
   2822a:	f7f1 f8a7 	bl	1937c <sc_save>
   2822e:	e7f5      	b.n	2821c <sc_ccc_cfg_write+0xa>

00028230 <sc_reset>:
{
   28230:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   28232:	2204      	movs	r2, #4
   28234:	2100      	movs	r1, #0
   28236:	3008      	adds	r0, #8
   28238:	f7fe fb02 	bl	26840 <memset>
}
   2823c:	bd08      	pop	{r3, pc}

0002823e <sc_restore_rsp>:
{
   2823e:	b538      	push	{r3, r4, r5, lr}
   28240:	4605      	mov	r5, r0
   28242:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   28244:	f7f0 fff6 	bl	19234 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   28248:	b188      	cbz	r0, 2826e <sc_restore_rsp+0x30>
   2824a:	4603      	mov	r3, r0
   2824c:	7a02      	ldrb	r2, [r0, #8]
   2824e:	f012 0f01 	tst.w	r2, #1
   28252:	d00c      	beq.n	2826e <sc_restore_rsp+0x30>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28254:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28256:	f3bf 8f5b 	dmb	ish
   2825a:	e853 2f00 	ldrex	r2, [r3]
   2825e:	f042 0201 	orr.w	r2, r2, #1
   28262:	e843 2100 	strex	r1, r2, [r3]
   28266:	2900      	cmp	r1, #0
   28268:	d1f7      	bne.n	2825a <sc_restore_rsp+0x1c>
   2826a:	f3bf 8f5b 	dmb	ish
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2826e:	b104      	cbz	r4, 28272 <sc_restore_rsp+0x34>
}
   28270:	bd38      	pop	{r3, r4, r5, pc}
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   28272:	f105 0190 	add.w	r1, r5, #144	; 0x90
   28276:	7a28      	ldrb	r0, [r5, #8]
   28278:	f7f1 f806 	bl	19288 <find_sc_cfg>
		if (sc_cfg) {
   2827c:	2800      	cmp	r0, #0
   2827e:	d0f7      	beq.n	28270 <sc_restore_rsp+0x32>
			sc_reset(sc_cfg);
   28280:	f7ff ffd6 	bl	28230 <sc_reset>
}
   28284:	e7f4      	b.n	28270 <sc_restore_rsp+0x32>

00028286 <gatt_foreach_iter>:
	if (handle > end_handle) {
   28286:	4299      	cmp	r1, r3
   28288:	d822      	bhi.n	282d0 <gatt_foreach_iter+0x4a>
{
   2828a:	b538      	push	{r3, r4, r5, lr}
   2828c:	4605      	mov	r5, r0
   2828e:	460c      	mov	r4, r1
	if (handle < start_handle) {
   28290:	4291      	cmp	r1, r2
   28292:	d31f      	bcc.n	282d4 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   28294:	9b04      	ldr	r3, [sp, #16]
   28296:	b123      	cbz	r3, 282a2 <gatt_foreach_iter+0x1c>
   28298:	6801      	ldr	r1, [r0, #0]
   2829a:	4618      	mov	r0, r3
   2829c:	f7fe fb21 	bl	268e2 <bt_uuid_cmp>
   282a0:	b9d0      	cbnz	r0, 282d8 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   282a2:	9b05      	ldr	r3, [sp, #20]
   282a4:	b12b      	cbz	r3, 282b2 <gatt_foreach_iter+0x2c>
   282a6:	68eb      	ldr	r3, [r5, #12]
   282a8:	9a05      	ldr	r2, [sp, #20]
   282aa:	4293      	cmp	r3, r2
   282ac:	d001      	beq.n	282b2 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   282ae:	2001      	movs	r0, #1
   282b0:	e011      	b.n	282d6 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   282b2:	9b06      	ldr	r3, [sp, #24]
   282b4:	881b      	ldrh	r3, [r3, #0]
   282b6:	3b01      	subs	r3, #1
   282b8:	9a06      	ldr	r2, [sp, #24]
   282ba:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   282bc:	9a08      	ldr	r2, [sp, #32]
   282be:	4621      	mov	r1, r4
   282c0:	4628      	mov	r0, r5
   282c2:	9b07      	ldr	r3, [sp, #28]
   282c4:	4798      	blx	r3
	if (!*num_matches) {
   282c6:	9b06      	ldr	r3, [sp, #24]
   282c8:	881b      	ldrh	r3, [r3, #0]
   282ca:	b923      	cbnz	r3, 282d6 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   282cc:	2000      	movs	r0, #0
   282ce:	e002      	b.n	282d6 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   282d0:	2000      	movs	r0, #0
}
   282d2:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   282d4:	2001      	movs	r0, #1
}
   282d6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   282d8:	2001      	movs	r0, #1
   282da:	e7fc      	b.n	282d6 <gatt_foreach_iter+0x50>

000282dc <gatt_req_alloc>:
{
   282dc:	b538      	push	{r3, r4, r5, lr}
   282de:	4605      	mov	r5, r0
   282e0:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   282e2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   282e6:	2100      	movs	r1, #0
   282e8:	f7f0 fe4c 	bl	18f84 <bt_att_req_alloc>
	if (!req) {
   282ec:	4603      	mov	r3, r0
   282ee:	b108      	cbz	r0, 282f4 <gatt_req_alloc+0x18>
	req->func = func;
   282f0:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   282f2:	60c4      	str	r4, [r0, #12]
}
   282f4:	4618      	mov	r0, r3
   282f6:	bd38      	pop	{r3, r4, r5, pc}

000282f8 <clear_cf_cfg>:
{
   282f8:	b530      	push	{r4, r5, lr}
   282fa:	b083      	sub	sp, #12
   282fc:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   282fe:	2500      	movs	r5, #0
   28300:	9500      	str	r5, [sp, #0]
   28302:	f8cd 5003 	str.w	r5, [sp, #3]
   28306:	2207      	movs	r2, #7
   28308:	4669      	mov	r1, sp
   2830a:	3001      	adds	r0, #1
   2830c:	f7fe fa74 	bl	267f8 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   28310:	2201      	movs	r2, #1
   28312:	4629      	mov	r1, r5
   28314:	f104 0008 	add.w	r0, r4, #8
   28318:	f7fe fa92 	bl	26840 <memset>
	atomic_set(cfg->flags, 0);
   2831c:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2831e:	f3bf 8f5b 	dmb	ish
   28322:	e854 3f00 	ldrex	r3, [r4]
   28326:	e844 5200 	strex	r2, r5, [r4]
   2832a:	2a00      	cmp	r2, #0
   2832c:	d1f9      	bne.n	28322 <clear_cf_cfg+0x2a>
   2832e:	f3bf 8f5b 	dmb	ish
}
   28332:	b003      	add	sp, #12
   28334:	bd30      	pop	{r4, r5, pc}

00028336 <remove_cf_cfg>:
{
   28336:	b570      	push	{r4, r5, r6, lr}
   28338:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2833a:	f7f0 ff7b 	bl	19234 <find_cf_cfg>
	if (!cfg) {
   2833e:	b1e8      	cbz	r0, 2837c <remove_cf_cfg+0x46>
   28340:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28342:	f104 0690 	add.w	r6, r4, #144	; 0x90
   28346:	4631      	mov	r1, r6
   28348:	7a20      	ldrb	r0, [r4, #8]
   2834a:	f7fe fc6b 	bl	26c24 <bt_addr_le_is_bonded>
   2834e:	b918      	cbnz	r0, 28358 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   28350:	4628      	mov	r0, r5
   28352:	f7ff ffd1 	bl	282f8 <clear_cf_cfg>
   28356:	e011      	b.n	2837c <remove_cf_cfg+0x46>
   28358:	2207      	movs	r2, #7
   2835a:	4631      	mov	r1, r6
   2835c:	1c68      	adds	r0, r5, #1
   2835e:	f7fe fa4b 	bl	267f8 <memcpy>
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   28362:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28364:	f3bf 8f5b 	dmb	ish
   28368:	e855 3f00 	ldrex	r3, [r5]
   2836c:	f023 0302 	bic.w	r3, r3, #2
   28370:	e845 3200 	strex	r2, r3, [r5]
   28374:	2a00      	cmp	r2, #0
   28376:	d1f7      	bne.n	28368 <remove_cf_cfg+0x32>
   28378:	f3bf 8f5b 	dmb	ish
}
   2837c:	bd70      	pop	{r4, r5, r6, pc}

0002837e <bt_gatt_attr_read>:
{
   2837e:	b510      	push	{r4, lr}
   28380:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   28384:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   28388:	42a1      	cmp	r1, r4
   2838a:	d80c      	bhi.n	283a6 <bt_gatt_attr_read+0x28>
   2838c:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   2838e:	1a64      	subs	r4, r4, r1
   28390:	42a3      	cmp	r3, r4
   28392:	bfa8      	it	ge
   28394:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   28396:	b29c      	uxth	r4, r3
   28398:	4622      	mov	r2, r4
   2839a:	9b03      	ldr	r3, [sp, #12]
   2839c:	4419      	add	r1, r3
   2839e:	f7fe fa2b 	bl	267f8 <memcpy>
}
   283a2:	4620      	mov	r0, r4
   283a4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   283a6:	f06f 0406 	mvn.w	r4, #6
   283aa:	e7fa      	b.n	283a2 <bt_gatt_attr_read+0x24>

000283ac <read_ppcp>:
{
   283ac:	b510      	push	{r4, lr}
   283ae:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   283b0:	2418      	movs	r4, #24
   283b2:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   283b6:	2428      	movs	r4, #40	; 0x28
   283b8:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   283bc:	2400      	movs	r4, #0
   283be:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   283c2:	242a      	movs	r4, #42	; 0x2a
   283c4:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   283c8:	2408      	movs	r4, #8
   283ca:	9402      	str	r4, [sp, #8]
   283cc:	ac04      	add	r4, sp, #16
   283ce:	9401      	str	r4, [sp, #4]
   283d0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   283d4:	9400      	str	r4, [sp, #0]
   283d6:	f7ff ffd2 	bl	2837e <bt_gatt_attr_read>
}
   283da:	b006      	add	sp, #24
   283dc:	bd10      	pop	{r4, pc}

000283de <read_appearance>:
{
   283de:	b510      	push	{r4, lr}
   283e0:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   283e2:	2400      	movs	r4, #0
   283e4:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   283e8:	2402      	movs	r4, #2
   283ea:	9402      	str	r4, [sp, #8]
   283ec:	f10d 0416 	add.w	r4, sp, #22
   283f0:	9401      	str	r4, [sp, #4]
   283f2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   283f6:	9400      	str	r4, [sp, #0]
   283f8:	f7ff ffc1 	bl	2837e <bt_gatt_attr_read>
}
   283fc:	b006      	add	sp, #24
   283fe:	bd10      	pop	{r4, pc}

00028400 <read_name>:
{
   28400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28404:	b084      	sub	sp, #16
   28406:	4604      	mov	r4, r0
   28408:	460d      	mov	r5, r1
   2840a:	4616      	mov	r6, r2
   2840c:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2840e:	f7ed fdf1 	bl	15ff4 <bt_get_name>
   28412:	4680      	mov	r8, r0
				 strlen(name));
   28414:	f7fe f9a7 	bl	26766 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   28418:	b280      	uxth	r0, r0
   2841a:	9002      	str	r0, [sp, #8]
   2841c:	f8cd 8004 	str.w	r8, [sp, #4]
   28420:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   28424:	9300      	str	r3, [sp, #0]
   28426:	463b      	mov	r3, r7
   28428:	4632      	mov	r2, r6
   2842a:	4629      	mov	r1, r5
   2842c:	4620      	mov	r0, r4
   2842e:	f7ff ffa6 	bl	2837e <bt_gatt_attr_read>
}
   28432:	b004      	add	sp, #16
   28434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028438 <cf_read>:
{
   28438:	b5f0      	push	{r4, r5, r6, r7, lr}
   2843a:	b087      	sub	sp, #28
   2843c:	4604      	mov	r4, r0
   2843e:	460d      	mov	r5, r1
   28440:	4616      	mov	r6, r2
   28442:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   28444:	2300      	movs	r3, #0
   28446:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2844a:	f7f0 fef3 	bl	19234 <find_cf_cfg>
	if (cfg) {
   2844e:	b128      	cbz	r0, 2845c <cf_read+0x24>
   28450:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   28452:	2201      	movs	r2, #1
   28454:	3108      	adds	r1, #8
   28456:	a805      	add	r0, sp, #20
   28458:	f7fe f9ce 	bl	267f8 <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2845c:	2301      	movs	r3, #1
   2845e:	9302      	str	r3, [sp, #8]
   28460:	ab05      	add	r3, sp, #20
   28462:	9301      	str	r3, [sp, #4]
   28464:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   28468:	9300      	str	r3, [sp, #0]
   2846a:	463b      	mov	r3, r7
   2846c:	4632      	mov	r2, r6
   2846e:	4629      	mov	r1, r5
   28470:	4620      	mov	r0, r4
   28472:	f7ff ff84 	bl	2837e <bt_gatt_attr_read>
}
   28476:	b007      	add	sp, #28
   28478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002847a <bt_gatt_attr_read_service>:
{
   2847a:	b570      	push	{r4, r5, r6, lr}
   2847c:	b086      	sub	sp, #24
   2847e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   28482:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   28484:	7826      	ldrb	r6, [r4, #0]
   28486:	b146      	cbz	r6, 2849a <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   28488:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2848a:	2610      	movs	r6, #16
   2848c:	9602      	str	r6, [sp, #8]
   2848e:	9401      	str	r4, [sp, #4]
   28490:	9500      	str	r5, [sp, #0]
   28492:	f7ff ff74 	bl	2837e <bt_gatt_attr_read>
}
   28496:	b006      	add	sp, #24
   28498:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2849a:	8864      	ldrh	r4, [r4, #2]
   2849c:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   284a0:	2402      	movs	r4, #2
   284a2:	9402      	str	r4, [sp, #8]
   284a4:	f10d 0416 	add.w	r4, sp, #22
   284a8:	9401      	str	r4, [sp, #4]
   284aa:	9500      	str	r5, [sp, #0]
   284ac:	f7ff ff67 	bl	2837e <bt_gatt_attr_read>
   284b0:	e7f1      	b.n	28496 <bt_gatt_attr_read_service+0x1c>

000284b2 <bt_gatt_attr_read_ccc>:
{
   284b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   284b4:	b087      	sub	sp, #28
   284b6:	4605      	mov	r5, r0
   284b8:	460c      	mov	r4, r1
   284ba:	4616      	mov	r6, r2
   284bc:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   284be:	68c9      	ldr	r1, [r1, #12]
   284c0:	f7ff fe5d 	bl	2817e <find_ccc_cfg>
	if (cfg) {
   284c4:	b190      	cbz	r0, 284ec <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   284c6:	8903      	ldrh	r3, [r0, #8]
   284c8:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   284cc:	2302      	movs	r3, #2
   284ce:	9302      	str	r3, [sp, #8]
   284d0:	f10d 0316 	add.w	r3, sp, #22
   284d4:	9301      	str	r3, [sp, #4]
   284d6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   284da:	9300      	str	r3, [sp, #0]
   284dc:	463b      	mov	r3, r7
   284de:	4632      	mov	r2, r6
   284e0:	4621      	mov	r1, r4
   284e2:	4628      	mov	r0, r5
   284e4:	f7ff ff4b 	bl	2837e <bt_gatt_attr_read>
}
   284e8:	b007      	add	sp, #28
   284ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   284ec:	2300      	movs	r3, #0
   284ee:	f8ad 3016 	strh.w	r3, [sp, #22]
   284f2:	e7eb      	b.n	284cc <bt_gatt_attr_read_ccc+0x1a>

000284f4 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   284f4:	b1b8      	cbz	r0, 28526 <bt_gatt_attr_value_handle+0x32>
{
   284f6:	b510      	push	{r4, lr}
   284f8:	b082      	sub	sp, #8
   284fa:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   284fc:	2300      	movs	r3, #0
   284fe:	f88d 3004 	strb.w	r3, [sp, #4]
   28502:	f642 0303 	movw	r3, #10243	; 0x2803
   28506:	f8ad 3006 	strh.w	r3, [sp, #6]
   2850a:	a901      	add	r1, sp, #4
   2850c:	6800      	ldr	r0, [r0, #0]
   2850e:	f7fe f9e8 	bl	268e2 <bt_uuid_cmp>
   28512:	b950      	cbnz	r0, 2852a <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   28514:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   28516:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   28518:	b940      	cbnz	r0, 2852c <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2851a:	4620      	mov	r0, r4
   2851c:	f7f1 f922 	bl	19764 <bt_gatt_attr_get_handle>
   28520:	3001      	adds	r0, #1
   28522:	b280      	uxth	r0, r0
   28524:	e002      	b.n	2852c <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   28526:	2000      	movs	r0, #0
}
   28528:	4770      	bx	lr
	uint16_t handle = 0;
   2852a:	2000      	movs	r0, #0
}
   2852c:	b002      	add	sp, #8
   2852e:	bd10      	pop	{r4, pc}

00028530 <bt_gatt_attr_read_chrc>:
{
   28530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28534:	b08a      	sub	sp, #40	; 0x28
   28536:	4605      	mov	r5, r0
   28538:	460c      	mov	r4, r1
   2853a:	4616      	mov	r6, r2
   2853c:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   2853e:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   28542:	f898 3006 	ldrb.w	r3, [r8, #6]
   28546:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2854a:	4608      	mov	r0, r1
   2854c:	f7ff ffd2 	bl	284f4 <bt_gatt_attr_value_handle>
   28550:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28554:	f8d8 1000 	ldr.w	r1, [r8]
   28558:	780b      	ldrb	r3, [r1, #0]
   2855a:	b993      	cbnz	r3, 28582 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2855c:	884b      	ldrh	r3, [r1, #2]
   2855e:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   28562:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   28564:	9302      	str	r3, [sp, #8]
   28566:	ab05      	add	r3, sp, #20
   28568:	9301      	str	r3, [sp, #4]
   2856a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2856e:	9300      	str	r3, [sp, #0]
   28570:	463b      	mov	r3, r7
   28572:	4632      	mov	r2, r6
   28574:	4621      	mov	r1, r4
   28576:	4628      	mov	r0, r5
   28578:	f7ff ff01 	bl	2837e <bt_gatt_attr_read>
}
   2857c:	b00a      	add	sp, #40	; 0x28
   2857e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   28582:	2210      	movs	r2, #16
   28584:	3101      	adds	r1, #1
   28586:	f10d 0017 	add.w	r0, sp, #23
   2858a:	f7fe f935 	bl	267f8 <memcpy>
		value_len += 16U;
   2858e:	2313      	movs	r3, #19
   28590:	e7e8      	b.n	28564 <bt_gatt_attr_read_chrc+0x34>

00028592 <db_hash_process>:
{
   28592:	b508      	push	{r3, lr}
	db_hash_gen(true);
   28594:	2001      	movs	r0, #1
   28596:	f7f1 f99d 	bl	198d4 <db_hash_gen>
}
   2859a:	bd08      	pop	{r3, pc}

0002859c <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2859c:	f012 0f01 	tst.w	r2, #1
   285a0:	d005      	beq.n	285ae <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   285a2:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   285a4:	f013 0f15 	tst.w	r3, #21
   285a8:	d01a      	beq.n	285e0 <bt_gatt_check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   285aa:	684b      	ldr	r3, [r1, #4]
   285ac:	b1d3      	cbz	r3, 285e4 <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   285ae:	f012 0f02 	tst.w	r2, #2
   285b2:	d005      	beq.n	285c0 <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   285b4:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   285b6:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   285ba:	d015      	beq.n	285e8 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   285bc:	688b      	ldr	r3, [r1, #8]
   285be:	b1ab      	cbz	r3, 285ec <bt_gatt_check_perm+0x50>
{
   285c0:	b510      	push	{r4, lr}
	mask &= attr->perm;
   285c2:	7c8c      	ldrb	r4, [r1, #18]
   285c4:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   285c6:	f014 0f30 	tst.w	r4, #48	; 0x30
   285ca:	d103      	bne.n	285d4 <bt_gatt_check_perm+0x38>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   285cc:	f014 000c 	ands.w	r0, r4, #12
   285d0:	d10e      	bne.n	285f0 <bt_gatt_check_perm+0x54>
}
   285d2:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   285d4:	f7fe fe16 	bl	27204 <bt_conn_get_security>
   285d8:	2802      	cmp	r0, #2
   285da:	d8f7      	bhi.n	285cc <bt_gatt_check_perm+0x30>
			return BT_ATT_ERR_AUTHENTICATION;
   285dc:	2005      	movs	r0, #5
   285de:	e7f8      	b.n	285d2 <bt_gatt_check_perm+0x36>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   285e0:	2002      	movs	r0, #2
   285e2:	4770      	bx	lr
   285e4:	2002      	movs	r0, #2
   285e6:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   285e8:	2003      	movs	r0, #3
   285ea:	4770      	bx	lr
   285ec:	2003      	movs	r0, #3
}
   285ee:	4770      	bx	lr
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   285f0:	200f      	movs	r0, #15
   285f2:	e7ee      	b.n	285d2 <bt_gatt_check_perm+0x36>

000285f4 <bt_gatt_change_aware>:
{
   285f4:	b510      	push	{r4, lr}
   285f6:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   285f8:	f7f0 fe1c 	bl	19234 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   285fc:	2800      	cmp	r0, #0
   285fe:	d042      	beq.n	28686 <bt_gatt_change_aware+0x92>
   28600:	7a02      	ldrb	r2, [r0, #8]
   28602:	f012 0f01 	tst.w	r2, #1
   28606:	d101      	bne.n	2860c <bt_gatt_change_aware+0x18>
		return true;
   28608:	2001      	movs	r0, #1
}
   2860a:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2860c:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28610:	f3bf 8f5b 	dmb	ish
   28614:	68c2      	ldr	r2, [r0, #12]
   28616:	f3bf 8f5b 	dmb	ish
   2861a:	f012 0f01 	tst.w	r2, #1
   2861e:	d134      	bne.n	2868a <bt_gatt_change_aware+0x96>
	if (!req) {
   28620:	b90c      	cbnz	r4, 28626 <bt_gatt_change_aware+0x32>
		return false;
   28622:	4620      	mov	r0, r4
   28624:	e7f1      	b.n	2860a <bt_gatt_change_aware+0x16>
   28626:	f3bf 8f5b 	dmb	ish
   2862a:	68c3      	ldr	r3, [r0, #12]
   2862c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   28630:	f013 0f02 	tst.w	r3, #2
   28634:	d10d      	bne.n	28652 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28636:	f3bf 8f5b 	dmb	ish
   2863a:	e851 3f00 	ldrex	r3, [r1]
   2863e:	f043 0302 	orr.w	r3, r3, #2
   28642:	e841 3200 	strex	r2, r3, [r1]
   28646:	2a00      	cmp	r2, #0
   28648:	d1f7      	bne.n	2863a <bt_gatt_change_aware+0x46>
   2864a:	f3bf 8f5b 	dmb	ish
	return false;
   2864e:	2000      	movs	r0, #0
   28650:	e7db      	b.n	2860a <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28652:	f3bf 8f5b 	dmb	ish
   28656:	e851 3f00 	ldrex	r3, [r1]
   2865a:	f023 0302 	bic.w	r3, r3, #2
   2865e:	e841 3200 	strex	r2, r3, [r1]
   28662:	2a00      	cmp	r2, #0
   28664:	d1f7      	bne.n	28656 <bt_gatt_change_aware+0x62>
   28666:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2866a:	f3bf 8f5b 	dmb	ish
   2866e:	e851 3f00 	ldrex	r3, [r1]
   28672:	f043 0301 	orr.w	r3, r3, #1
   28676:	e841 3200 	strex	r2, r3, [r1]
   2867a:	2a00      	cmp	r2, #0
   2867c:	d1f7      	bne.n	2866e <bt_gatt_change_aware+0x7a>
   2867e:	f3bf 8f5b 	dmb	ish
		return true;
   28682:	4620      	mov	r0, r4
   28684:	e7c1      	b.n	2860a <bt_gatt_change_aware+0x16>
		return true;
   28686:	2001      	movs	r0, #1
   28688:	e7bf      	b.n	2860a <bt_gatt_change_aware+0x16>
		return true;
   2868a:	2001      	movs	r0, #1
   2868c:	e7bd      	b.n	2860a <bt_gatt_change_aware+0x16>

0002868e <bt_smp_recv>:
{
   2868e:	b5f0      	push	{r4, r5, r6, r7, lr}
   28690:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   28692:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   28694:	f04f 32ff 	mov.w	r2, #4294967295
   28698:	f04f 33ff 	mov.w	r3, #4294967295
   2869c:	2100      	movs	r1, #0
   2869e:	4608      	mov	r0, r1
   286a0:	f7fe fe92 	bl	273c8 <bt_l2cap_create_pdu_timeout>
   286a4:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   286a6:	f100 0608 	add.w	r6, r0, #8
   286aa:	2101      	movs	r1, #1
   286ac:	4630      	mov	r0, r6
   286ae:	f7f2 f89f 	bl	1a7f0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   286b2:	2505      	movs	r5, #5
   286b4:	7005      	strb	r5, [r0, #0]
   286b6:	2101      	movs	r1, #1
   286b8:	4630      	mov	r0, r6
   286ba:	f7f2 f899 	bl	1a7f0 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   286be:	7005      	strb	r5, [r0, #0]
   286c0:	2300      	movs	r3, #0
   286c2:	9300      	str	r3, [sp, #0]
   286c4:	4622      	mov	r2, r4
   286c6:	2106      	movs	r1, #6
   286c8:	4638      	mov	r0, r7
   286ca:	f7fe fe82 	bl	273d2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   286ce:	b910      	cbnz	r0, 286d6 <bt_smp_recv+0x48>
}
   286d0:	2000      	movs	r0, #0
   286d2:	b003      	add	sp, #12
   286d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   286d6:	4620      	mov	r0, r4
   286d8:	f7f1 ff58 	bl	1a58c <net_buf_unref>
   286dc:	e7f8      	b.n	286d0 <bt_smp_recv+0x42>

000286de <bt_smp_sign>:
}
   286de:	f06f 0085 	mvn.w	r0, #133	; 0x85
   286e2:	4770      	bx	lr

000286e4 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   286e4:	2000      	movs	r0, #0
   286e6:	4770      	bx	lr

000286e8 <fixed_data_unref>:
}
   286e8:	4770      	bx	lr

000286ea <data_alloc>:
{
   286ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   286ee:	4604      	mov	r4, r0
   286f0:	460d      	mov	r5, r1
   286f2:	4617      	mov	r7, r2
   286f4:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   286f6:	7980      	ldrb	r0, [r0, #6]
   286f8:	f7f1 fd52 	bl	1a1a0 <net_buf_pool_get>
	return pool->alloc->cb->alloc(buf, size, timeout);
   286fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   286fe:	681b      	ldr	r3, [r3, #0]
   28700:	f8d3 8000 	ldr.w	r8, [r3]
   28704:	463a      	mov	r2, r7
   28706:	4633      	mov	r3, r6
   28708:	4629      	mov	r1, r5
   2870a:	4620      	mov	r0, r4
   2870c:	47c0      	blx	r8
}
   2870e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028712 <data_unref>:
{
   28712:	b538      	push	{r3, r4, r5, lr}
   28714:	4604      	mov	r4, r0
   28716:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   28718:	7980      	ldrb	r0, [r0, #6]
   2871a:	f7f1 fd41 	bl	1a1a0 <net_buf_pool_get>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2871e:	7963      	ldrb	r3, [r4, #5]
   28720:	f013 0f02 	tst.w	r3, #2
   28724:	d105      	bne.n	28732 <data_unref+0x20>
	pool->alloc->cb->unref(buf, data);
   28726:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28728:	681b      	ldr	r3, [r3, #0]
   2872a:	689b      	ldr	r3, [r3, #8]
   2872c:	4629      	mov	r1, r5
   2872e:	4620      	mov	r0, r4
   28730:	4798      	blx	r3
}
   28732:	bd38      	pop	{r3, r4, r5, pc}

00028734 <net_buf_id>:
{
   28734:	b510      	push	{r4, lr}
   28736:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   28738:	7980      	ldrb	r0, [r0, #6]
   2873a:	f7f1 fd31 	bl	1a1a0 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2873e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   28742:	3317      	adds	r3, #23
   28744:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   28748:	6b00      	ldr	r0, [r0, #48]	; 0x30
   2874a:	1a20      	subs	r0, r4, r0
}
   2874c:	fbb0 f0f3 	udiv	r0, r0, r3
   28750:	bd10      	pop	{r4, pc}

00028752 <fixed_data_alloc>:
{
   28752:	b570      	push	{r4, r5, r6, lr}
   28754:	4604      	mov	r4, r0
   28756:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   28758:	7980      	ldrb	r0, [r0, #6]
   2875a:	f7f1 fd21 	bl	1a1a0 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2875e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28760:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   28762:	682a      	ldr	r2, [r5, #0]
   28764:	6819      	ldr	r1, [r3, #0]
   28766:	428a      	cmp	r2, r1
   28768:	bf28      	it	cs
   2876a:	460a      	movcs	r2, r1
   2876c:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2876e:	685d      	ldr	r5, [r3, #4]
   28770:	681e      	ldr	r6, [r3, #0]
   28772:	4620      	mov	r0, r4
   28774:	f7ff ffde 	bl	28734 <net_buf_id>
}
   28778:	fb00 5006 	mla	r0, r0, r6, r5
   2877c:	bd70      	pop	{r4, r5, r6, pc}

0002877e <net_buf_alloc_fixed>:
{
   2877e:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   28780:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   28782:	6849      	ldr	r1, [r1, #4]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   28784:	6809      	ldr	r1, [r1, #0]
   28786:	f7f1 fd3d 	bl	1a204 <net_buf_alloc_len>
}
   2878a:	bd08      	pop	{r3, pc}

0002878c <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2878c:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2878e:	6803      	ldr	r3, [r0, #0]
   28790:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   28792:	2102      	movs	r1, #2
   28794:	f7f1 ffc4 	bl	1a720 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   28798:	4620      	mov	r0, r4
   2879a:	bd10      	pop	{r4, pc}

0002879c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2879c:	6802      	ldr	r2, [r0, #0]
   2879e:	6880      	ldr	r0, [r0, #8]
}
   287a0:	1a10      	subs	r0, r2, r0
   287a2:	4770      	bx	lr

000287a4 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   287a4:	b538      	push	{r3, r4, r5, lr}
   287a6:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   287a8:	88c5      	ldrh	r5, [r0, #6]
   287aa:	f7ff fff7 	bl	2879c <net_buf_simple_headroom>
   287ae:	1a2d      	subs	r5, r5, r0
   287b0:	88a0      	ldrh	r0, [r4, #4]
}
   287b2:	1a28      	subs	r0, r5, r0
   287b4:	bd38      	pop	{r3, r4, r5, pc}

000287b6 <net_buf_simple_add_mem>:
{
   287b6:	b538      	push	{r3, r4, r5, lr}
   287b8:	460d      	mov	r5, r1
   287ba:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   287bc:	4611      	mov	r1, r2
   287be:	f7f2 f817 	bl	1a7f0 <net_buf_simple_add>
   287c2:	4622      	mov	r2, r4
   287c4:	4629      	mov	r1, r5
   287c6:	f7fe f817 	bl	267f8 <memcpy>
}
   287ca:	bd38      	pop	{r3, r4, r5, pc}

000287cc <net_buf_simple_add_u8>:
{
   287cc:	b510      	push	{r4, lr}
   287ce:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   287d0:	2101      	movs	r1, #1
   287d2:	f7f2 f80d 	bl	1a7f0 <net_buf_simple_add>
	*u8 = val;
   287d6:	7004      	strb	r4, [r0, #0]
}
   287d8:	bd10      	pop	{r4, pc}

000287da <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   287da:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   287dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   287e0:	0089      	lsls	r1, r1, #2
   287e2:	3140      	adds	r1, #64	; 0x40
}
   287e4:	4408      	add	r0, r1
   287e6:	4770      	bx	lr

000287e8 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   287e8:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   287ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   287ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   287f2:	4770      	bx	lr

000287f4 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   287f4:	6900      	ldr	r0, [r0, #16]
}
   287f6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   287fa:	4770      	bx	lr

000287fc <set_off_state>:
   287fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   28800:	f3ef 8211 	mrs	r2, BASEPRI
   28804:	f383 8812 	msr	BASEPRI_MAX, r3
   28808:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2880c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2880e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   28812:	d001      	beq.n	28818 <set_off_state+0x1c>
   28814:	428b      	cmp	r3, r1
   28816:	d107      	bne.n	28828 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   28818:	2301      	movs	r3, #1
   2881a:	6003      	str	r3, [r0, #0]
	int err = 0;
   2881c:	2000      	movs	r0, #0
	__asm__ volatile(
   2881e:	f382 8811 	msr	BASEPRI, r2
   28822:	f3bf 8f6f 	isb	sy
}
   28826:	4770      	bx	lr
		err = -EPERM;
   28828:	f04f 30ff 	mov.w	r0, #4294967295
   2882c:	e7f7      	b.n	2881e <set_off_state+0x22>

0002882e <set_starting_state>:
{
   2882e:	b410      	push	{r4}
	__asm__ volatile(
   28830:	f04f 0340 	mov.w	r3, #64	; 0x40
   28834:	f3ef 8211 	mrs	r2, BASEPRI
   28838:	f383 8812 	msr	BASEPRI_MAX, r3
   2883c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   28840:	6803      	ldr	r3, [r0, #0]
   28842:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   28846:	f003 0307 	and.w	r3, r3, #7
   2884a:	2b01      	cmp	r3, #1
   2884c:	d009      	beq.n	28862 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   2884e:	428c      	cmp	r4, r1
   28850:	d00a      	beq.n	28868 <set_starting_state+0x3a>
		err = -EPERM;
   28852:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   28856:	f382 8811 	msr	BASEPRI, r2
   2885a:	f3bf 8f6f 	isb	sy
}
   2885e:	bc10      	pop	{r4}
   28860:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   28862:	6001      	str	r1, [r0, #0]
	int err = 0;
   28864:	2000      	movs	r0, #0
   28866:	e7f6      	b.n	28856 <set_starting_state+0x28>
		err = -EALREADY;
   28868:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2886c:	e7f3      	b.n	28856 <set_starting_state+0x28>

0002886e <set_on_state>:
	__asm__ volatile(
   2886e:	f04f 0340 	mov.w	r3, #64	; 0x40
   28872:	f3ef 8211 	mrs	r2, BASEPRI
   28876:	f383 8812 	msr	BASEPRI_MAX, r3
   2887a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2887e:	6803      	ldr	r3, [r0, #0]
   28880:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28884:	f043 0302 	orr.w	r3, r3, #2
   28888:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2888a:	f382 8811 	msr	BASEPRI, r2
   2888e:	f3bf 8f6f 	isb	sy
}
   28892:	4770      	bx	lr

00028894 <clkstarted_handle>:
{
   28894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28896:	4606      	mov	r6, r0
   28898:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2889a:	f7ff ff9e 	bl	287da <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2889e:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   288a0:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   288a2:	2300      	movs	r3, #0
   288a4:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   288a8:	f7ff ffe1 	bl	2886e <set_on_state>
	if (callback) {
   288ac:	b11d      	cbz	r5, 288b6 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   288ae:	463a      	mov	r2, r7
   288b0:	4621      	mov	r1, r4
   288b2:	4630      	mov	r0, r6
   288b4:	47a8      	blx	r5
}
   288b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000288b8 <async_start>:
{
   288b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   288bc:	4606      	mov	r6, r0
   288be:	4690      	mov	r8, r2
   288c0:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   288c2:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   288c4:	4629      	mov	r1, r5
   288c6:	f7ff ff88 	bl	287da <get_sub_data>
   288ca:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   288cc:	9906      	ldr	r1, [sp, #24]
   288ce:	3008      	adds	r0, #8
   288d0:	f7ff ffad 	bl	2882e <set_starting_state>
	if (err < 0) {
   288d4:	2800      	cmp	r0, #0
   288d6:	db09      	blt.n	288ec <async_start+0x34>
	subdata->cb = cb;
   288d8:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   288dc:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   288de:	4629      	mov	r1, r5
   288e0:	4630      	mov	r0, r6
   288e2:	f7ff ff81 	bl	287e8 <get_sub_config>
   288e6:	6803      	ldr	r3, [r0, #0]
   288e8:	4798      	blx	r3
	return 0;
   288ea:	2000      	movs	r0, #0
}
   288ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000288f0 <api_start>:
{
   288f0:	b510      	push	{r4, lr}
   288f2:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   288f4:	2480      	movs	r4, #128	; 0x80
   288f6:	9400      	str	r4, [sp, #0]
   288f8:	f7ff ffde 	bl	288b8 <async_start>
}
   288fc:	b002      	add	sp, #8
   288fe:	bd10      	pop	{r4, pc}

00028900 <onoff_started_callback>:
{
   28900:	b510      	push	{r4, lr}
   28902:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   28904:	b2c9      	uxtb	r1, r1
   28906:	f7ff ff75 	bl	287f4 <get_onoff_manager>
	notify(mgr, 0);
   2890a:	2100      	movs	r1, #0
   2890c:	47a0      	blx	r4
}
   2890e:	bd10      	pop	{r4, pc}

00028910 <hfclk_start>:
{
   28910:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   28912:	2001      	movs	r0, #1
   28914:	f7f4 f844 	bl	1c9a0 <nrfx_clock_start>
}
   28918:	bd08      	pop	{r3, pc}

0002891a <lfclk_start>:
{
   2891a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2891c:	2000      	movs	r0, #0
   2891e:	f7f4 f83f 	bl	1c9a0 <nrfx_clock_start>
}
   28922:	bd08      	pop	{r3, pc}

00028924 <hfclk_stop>:
{
   28924:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   28926:	2001      	movs	r0, #1
   28928:	f7f4 f862 	bl	1c9f0 <nrfx_clock_stop>
}
   2892c:	bd08      	pop	{r3, pc}

0002892e <lfclk_stop>:
{
   2892e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   28930:	2000      	movs	r0, #0
   28932:	f7f4 f85d 	bl	1c9f0 <nrfx_clock_stop>
}
   28936:	bd08      	pop	{r3, pc}

00028938 <api_stop>:
{
   28938:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2893a:	2280      	movs	r2, #128	; 0x80
   2893c:	f7f2 f80c 	bl	1a958 <stop>
}
   28940:	bd08      	pop	{r3, pc}

00028942 <blocking_start_callback>:
{
   28942:	b508      	push	{r3, lr}
   28944:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   28946:	f7f6 fc5b 	bl	1f200 <z_impl_k_sem_give>
}
   2894a:	bd08      	pop	{r3, pc}

0002894c <get_pull>:
	if (flags & GPIO_PULL_UP) {
   2894c:	f010 0f10 	tst.w	r0, #16
   28950:	d104      	bne.n	2895c <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   28952:	f010 0f20 	tst.w	r0, #32
   28956:	d103      	bne.n	28960 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   28958:	2000      	movs	r0, #0
   2895a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   2895c:	2003      	movs	r0, #3
   2895e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   28960:	2001      	movs	r0, #1
}
   28962:	4770      	bx	lr

00028964 <gpio_nrfx_port_get_raw>:
	return port->config;
   28964:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28966:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   28968:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2896c:	600b      	str	r3, [r1, #0]
}
   2896e:	2000      	movs	r0, #0
   28970:	4770      	bx	lr

00028972 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   28972:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28974:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   28976:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2897a:	4042      	eors	r2, r0
   2897c:	400a      	ands	r2, r1
   2897e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   28980:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   28984:	2000      	movs	r0, #0
   28986:	4770      	bx	lr

00028988 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   28988:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2898a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2898c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   28990:	2000      	movs	r0, #0
   28992:	4770      	bx	lr

00028994 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   28994:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28996:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   28998:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2899c:	2000      	movs	r0, #0
   2899e:	4770      	bx	lr

000289a0 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   289a0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   289a2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   289a4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   289a8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   289aa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   289ae:	2000      	movs	r0, #0
   289b0:	4770      	bx	lr

000289b2 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   289b2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   289b6:	d007      	beq.n	289c8 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   289b8:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   289bc:	d00d      	beq.n	289da <get_trigger+0x28>
   289be:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   289c2:	d008      	beq.n	289d6 <get_trigger+0x24>
   289c4:	2001      	movs	r0, #1
}
   289c6:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   289c8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   289cc:	d001      	beq.n	289d2 <get_trigger+0x20>
   289ce:	2005      	movs	r0, #5
   289d0:	4770      	bx	lr
   289d2:	2004      	movs	r0, #4
   289d4:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   289d6:	2002      	movs	r0, #2
   289d8:	4770      	bx	lr
   289da:	2003      	movs	r0, #3
   289dc:	4770      	bx	lr

000289de <endtx_isr>:
	return dev->config;
   289de:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   289e0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   289e2:	f04f 0140 	mov.w	r1, #64	; 0x40
   289e6:	f3ef 8211 	mrs	r2, BASEPRI
   289ea:	f381 8812 	msr	BASEPRI_MAX, r1
   289ee:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   289f2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   289f6:	b131      	cbz	r1, 28a06 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   289f8:	2100      	movs	r1, #0
   289fa:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   289fe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28a02:	2101      	movs	r1, #1
   28a04:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   28a06:	f382 8811 	msr	BASEPRI, r2
   28a0a:	f3bf 8f6f 	isb	sy
}
   28a0e:	4770      	bx	lr

00028a10 <uarte_nrfx_isr_int>:
{
   28a10:	b538      	push	{r3, r4, r5, lr}
   28a12:	4604      	mov	r4, r0
	return dev->config;
   28a14:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   28a16:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   28a18:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   28a1c:	f413 7f80 	tst.w	r3, #256	; 0x100
   28a20:	d002      	beq.n	28a28 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28a22:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   28a26:	b9db      	cbnz	r3, 28a60 <uarte_nrfx_isr_int+0x50>
	return dev->config;
   28a28:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28a2a:	685b      	ldr	r3, [r3, #4]
   28a2c:	f013 0f10 	tst.w	r3, #16
   28a30:	d015      	beq.n	28a5e <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   28a32:	f04f 0240 	mov.w	r2, #64	; 0x40
   28a36:	f3ef 8311 	mrs	r3, BASEPRI
   28a3a:	f382 8812 	msr	BASEPRI_MAX, r2
   28a3e:	f3bf 8f6f 	isb	sy
   28a42:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   28a46:	b112      	cbz	r2, 28a4e <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   28a48:	2200      	movs	r2, #0
   28a4a:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   28a4e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   28a52:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   28a56:	f383 8811 	msr	BASEPRI, r3
   28a5a:	f3bf 8f6f 	isb	sy
}
   28a5e:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   28a60:	f7ff ffbd 	bl	289de <endtx_isr>
   28a64:	e7e0      	b.n	28a28 <uarte_nrfx_isr_int+0x18>

00028a66 <uarte_nrfx_configure>:
{
   28a66:	b570      	push	{r4, r5, r6, lr}
   28a68:	b082      	sub	sp, #8
   28a6a:	4605      	mov	r5, r0
   28a6c:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   28a6e:	794b      	ldrb	r3, [r1, #5]
   28a70:	2b01      	cmp	r3, #1
   28a72:	d006      	beq.n	28a82 <uarte_nrfx_configure+0x1c>
   28a74:	2b03      	cmp	r3, #3
   28a76:	d011      	beq.n	28a9c <uarte_nrfx_configure+0x36>
   28a78:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   28a7c:	4618      	mov	r0, r3
   28a7e:	b002      	add	sp, #8
   28a80:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   28a82:	2300      	movs	r3, #0
   28a84:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   28a88:	79a3      	ldrb	r3, [r4, #6]
   28a8a:	2b03      	cmp	r3, #3
   28a8c:	d138      	bne.n	28b00 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   28a8e:	79e3      	ldrb	r3, [r4, #7]
   28a90:	b143      	cbz	r3, 28aa4 <uarte_nrfx_configure+0x3e>
   28a92:	2b01      	cmp	r3, #1
   28a94:	d010      	beq.n	28ab8 <uarte_nrfx_configure+0x52>
   28a96:	f06f 0385 	mvn.w	r3, #133	; 0x85
   28a9a:	e7ef      	b.n	28a7c <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   28a9c:	2310      	movs	r3, #16
   28a9e:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   28aa2:	e7f1      	b.n	28a88 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   28aa4:	2300      	movs	r3, #0
   28aa6:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   28aaa:	7923      	ldrb	r3, [r4, #4]
   28aac:	b143      	cbz	r3, 28ac0 <uarte_nrfx_configure+0x5a>
   28aae:	2b02      	cmp	r3, #2
   28ab0:	d022      	beq.n	28af8 <uarte_nrfx_configure+0x92>
   28ab2:	f06f 0385 	mvn.w	r3, #133	; 0x85
   28ab6:	e7e1      	b.n	28a7c <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   28ab8:	2301      	movs	r3, #1
   28aba:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   28abe:	e7f4      	b.n	28aaa <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   28ac0:	2300      	movs	r3, #0
   28ac2:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   28ac6:	6821      	ldr	r1, [r4, #0]
   28ac8:	4628      	mov	r0, r5
   28aca:	f7f2 fb67 	bl	1b19c <baudrate_set>
   28ace:	4603      	mov	r3, r0
   28ad0:	b9c8      	cbnz	r0, 28b06 <uarte_nrfx_configure+0xa0>
	return dev->config;
   28ad2:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   28ad4:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   28ad6:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   28ada:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   28ade:	f89d 2004 	ldrb.w	r2, [sp, #4]
   28ae2:	4331      	orrs	r1, r6
   28ae4:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   28ae6:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   28aea:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   28aec:	3204      	adds	r2, #4
   28aee:	e894 0003 	ldmia.w	r4, {r0, r1}
   28af2:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   28af6:	e7c1      	b.n	28a7c <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   28af8:	230e      	movs	r3, #14
   28afa:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   28afe:	e7e2      	b.n	28ac6 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   28b00:	f06f 0385 	mvn.w	r3, #133	; 0x85
   28b04:	e7ba      	b.n	28a7c <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   28b06:	f06f 0385 	mvn.w	r3, #133	; 0x85
   28b0a:	e7b7      	b.n	28a7c <uarte_nrfx_configure+0x16>

00028b0c <uarte_nrfx_config_get>:
{
   28b0c:	460b      	mov	r3, r1
	return dev->data;
   28b0e:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   28b10:	6891      	ldr	r1, [r2, #8]
   28b12:	6850      	ldr	r0, [r2, #4]
   28b14:	e883 0003 	stmia.w	r3, {r0, r1}
}
   28b18:	2000      	movs	r0, #0
   28b1a:	4770      	bx	lr

00028b1c <uarte_nrfx_err_check>:
	return dev->config;
   28b1c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   28b1e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   28b20:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   28b24:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   28b28:	4770      	bx	lr

00028b2a <is_tx_ready>:
	return dev->config;
   28b2a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   28b2c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   28b2e:	685b      	ldr	r3, [r3, #4]
   28b30:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28b34:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28b38:	b929      	cbnz	r1, 28b46 <is_tx_ready+0x1c>
   28b3a:	b933      	cbnz	r3, 28b4a <is_tx_ready+0x20>
   28b3c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   28b40:	b92b      	cbnz	r3, 28b4e <is_tx_ready+0x24>
   28b42:	2000      	movs	r0, #0
   28b44:	4770      	bx	lr
   28b46:	2001      	movs	r0, #1
   28b48:	4770      	bx	lr
   28b4a:	2000      	movs	r0, #0
   28b4c:	4770      	bx	lr
   28b4e:	2001      	movs	r0, #1
}
   28b50:	4770      	bx	lr

00028b52 <uarte_enable>:
	return dev->config;
   28b52:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   28b54:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   28b56:	2208      	movs	r2, #8
   28b58:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   28b5c:	4770      	bx	lr

00028b5e <tx_start>:
{
   28b5e:	b510      	push	{r4, lr}
	return dev->config;
   28b60:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   28b62:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   28b64:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   28b68:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28b6c:	2300      	movs	r3, #0
   28b6e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   28b72:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   28b76:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   28b7a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   28b7e:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28b80:	685b      	ldr	r3, [r3, #4]
   28b82:	f013 0f10 	tst.w	r3, #16
   28b86:	d102      	bne.n	28b8e <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28b88:	2301      	movs	r3, #1
   28b8a:	60a3      	str	r3, [r4, #8]
}
   28b8c:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   28b8e:	2101      	movs	r1, #1
   28b90:	f7ff ffdf 	bl	28b52 <uarte_enable>
    p_reg->INTENSET = mask;
   28b94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   28b98:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   28b9c:	e7f4      	b.n	28b88 <tx_start+0x2a>

00028b9e <uarte_nrfx_poll_in>:
{
   28b9e:	b410      	push	{r4}
	return dev->data;
   28ba0:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   28ba2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   28ba4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28ba6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   28baa:	b152      	cbz	r2, 28bc2 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   28bac:	7c62      	ldrb	r2, [r4, #17]
   28bae:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28bb0:	2000      	movs	r0, #0
   28bb2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   28bb6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28bba:	2201      	movs	r2, #1
   28bbc:	601a      	str	r2, [r3, #0]
}
   28bbe:	bc10      	pop	{r4}
   28bc0:	4770      	bx	lr
		return -1;
   28bc2:	f04f 30ff 	mov.w	r0, #4294967295
   28bc6:	e7fa      	b.n	28bbe <uarte_nrfx_poll_in+0x20>

00028bc8 <wait_tx_ready>:
{
   28bc8:	b570      	push	{r4, r5, r6, lr}
   28bca:	4606      	mov	r6, r0
   28bcc:	e014      	b.n	28bf8 <wait_tx_ready+0x30>
		if (res) {
   28bce:	b17d      	cbz	r5, 28bf0 <wait_tx_ready+0x28>
	__asm__ volatile(
   28bd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   28bd4:	f3ef 8411 	mrs	r4, BASEPRI
   28bd8:	f383 8812 	msr	BASEPRI_MAX, r3
   28bdc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   28be0:	4630      	mov	r0, r6
   28be2:	f7ff ffa2 	bl	28b2a <is_tx_ready>
   28be6:	b9a0      	cbnz	r0, 28c12 <wait_tx_ready+0x4a>
	__asm__ volatile(
   28be8:	f384 8811 	msr	BASEPRI, r4
   28bec:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   28bf0:	2021      	movs	r0, #33	; 0x21
   28bf2:	2100      	movs	r1, #0
   28bf4:	f7f8 fbf0 	bl	213d8 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   28bf8:	2464      	movs	r4, #100	; 0x64
   28bfa:	4630      	mov	r0, r6
   28bfc:	f7ff ff95 	bl	28b2a <is_tx_ready>
   28c00:	4605      	mov	r5, r0
   28c02:	2800      	cmp	r0, #0
   28c04:	d1e3      	bne.n	28bce <wait_tx_ready+0x6>
   28c06:	2001      	movs	r0, #1
   28c08:	f000 fcde 	bl	295c8 <nrfx_busy_wait>
   28c0c:	3c01      	subs	r4, #1
   28c0e:	d1f4      	bne.n	28bfa <wait_tx_ready+0x32>
   28c10:	e7dd      	b.n	28bce <wait_tx_ready+0x6>
}
   28c12:	4620      	mov	r0, r4
   28c14:	bd70      	pop	{r4, r5, r6, pc}

00028c16 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   28c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c18:	4604      	mov	r4, r0
	return dev->config;
   28c1a:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   28c1c:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   28c1e:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   28c20:	2100      	movs	r1, #0
   28c22:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   28c26:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   28c28:	f7f2 fbd2 	bl	1b3d0 <uarte_nrfx_pins_configure>
	return dev->data;
   28c2c:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   28c2e:	3104      	adds	r1, #4
   28c30:	4620      	mov	r0, r4
   28c32:	f7ff ff18 	bl	28a66 <uarte_nrfx_configure>
	if (err) {
   28c36:	4604      	mov	r4, r0
   28c38:	bb68      	cbnz	r0, 28c96 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   28c3a:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   28c3c:	f013 0f02 	tst.w	r3, #2
   28c40:	d12b      	bne.n	28c9a <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   28c42:	2308      	movs	r3, #8
   28c44:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   28c48:	7a33      	ldrb	r3, [r6, #8]
   28c4a:	b95b      	cbnz	r3, 28c64 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28c4c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   28c50:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   28c54:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   28c58:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   28c5c:	2301      	movs	r3, #1
   28c5e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28c62:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   28c64:	6873      	ldr	r3, [r6, #4]
   28c66:	f013 0f02 	tst.w	r3, #2
   28c6a:	d103      	bne.n	28c74 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   28c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
   28c70:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28c74:	6873      	ldr	r3, [r6, #4]
   28c76:	f013 0f10 	tst.w	r3, #16
   28c7a:	d003      	beq.n	28c84 <uarte_instance_init+0x6e>
   28c7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   28c80:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   28c84:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   28c86:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   28c8a:	2300      	movs	r3, #0
   28c8c:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28c90:	2301      	movs	r3, #1
   28c92:	60ab      	str	r3, [r5, #8]
   28c94:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   28c96:	4620      	mov	r0, r4
   28c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   28c9a:	4639      	mov	r1, r7
   28c9c:	4628      	mov	r0, r5
   28c9e:	f7f2 fb5d 	bl	1b35c <endtx_stoptx_ppi_init>
		if (err < 0) {
   28ca2:	2800      	cmp	r0, #0
   28ca4:	dacd      	bge.n	28c42 <uarte_instance_init+0x2c>
			return err;
   28ca6:	4604      	mov	r4, r0
   28ca8:	e7f5      	b.n	28c96 <uarte_instance_init+0x80>

00028caa <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   28caa:	b510      	push	{r4, lr}
   28cac:	4604      	mov	r4, r0
   28cae:	2200      	movs	r2, #0
   28cb0:	2101      	movs	r1, #1
   28cb2:	2002      	movs	r0, #2
   28cb4:	f7ea fada 	bl	1326c <z_arm_irq_priority_set>
   28cb8:	2002      	movs	r0, #2
   28cba:	f7ea faa5 	bl	13208 <arch_irq_enable>
   28cbe:	2100      	movs	r1, #0
   28cc0:	4620      	mov	r0, r4
   28cc2:	f7ff ffa8 	bl	28c16 <uarte_instance_init>
   28cc6:	bd10      	pop	{r4, pc}

00028cc8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   28cc8:	b510      	push	{r4, lr}
   28cca:	4604      	mov	r4, r0
   28ccc:	2200      	movs	r2, #0
   28cce:	2101      	movs	r1, #1
   28cd0:	2028      	movs	r0, #40	; 0x28
   28cd2:	f7ea facb 	bl	1326c <z_arm_irq_priority_set>
   28cd6:	2028      	movs	r0, #40	; 0x28
   28cd8:	f7ea fa96 	bl	13208 <arch_irq_enable>
   28cdc:	2100      	movs	r1, #0
   28cde:	4620      	mov	r0, r4
   28ce0:	f7ff ff99 	bl	28c16 <uarte_instance_init>
   28ce4:	bd10      	pop	{r4, pc}

00028ce6 <rng_pool_put>:
{
   28ce6:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   28ce8:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   28cea:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   28cec:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   28cee:	1a9a      	subs	r2, r3, r2
   28cf0:	ea34 0202 	bics.w	r2, r4, r2
   28cf4:	d008      	beq.n	28d08 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   28cf6:	18c2      	adds	r2, r0, r3
   28cf8:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   28cfa:	3301      	adds	r3, #1
   28cfc:	b25b      	sxtb	r3, r3
   28cfe:	4023      	ands	r3, r4
   28d00:	7083      	strb	r3, [r0, #2]
	return 0;
   28d02:	2000      	movs	r0, #0
}
   28d04:	bc10      	pop	{r4}
   28d06:	4770      	bx	lr
		return -ENOBUFS;
   28d08:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28d0c:	e7fa      	b.n	28d04 <rng_pool_put+0x1e>

00028d0e <rng_pool_init>:
	rngp->first_alloc = 0U;
   28d0e:	2300      	movs	r3, #0
   28d10:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   28d12:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   28d14:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   28d16:	3901      	subs	r1, #1
   28d18:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   28d1a:	7102      	strb	r2, [r0, #4]
}
   28d1c:	4770      	bx	lr

00028d1e <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   28d1e:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   28d20:	2200      	movs	r2, #0
   28d22:	4611      	mov	r1, r2
   28d24:	4610      	mov	r0, r2
   28d26:	f7fa f92f 	bl	22f88 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   28d2a:	b900      	cbnz	r0, 28d2e <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   28d2c:	bd08      	pop	{r3, pc}
			return -EINVAL;
   28d2e:	f06f 0015 	mvn.w	r0, #21
   28d32:	e7fb      	b.n	28d2c <entropy_cc3xx_rng_init+0xe>

00028d34 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   28d34:	4770      	bx	lr

00028d36 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   28d36:	1a40      	subs	r0, r0, r1
}
   28d38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   28d3c:	4770      	bx	lr

00028d3e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   28d3e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   28d42:	009b      	lsls	r3, r3, #2
   28d44:	b29b      	uxth	r3, r3
   28d46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   28d4a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   28d4e:	2200      	movs	r2, #0
   28d50:	601a      	str	r2, [r3, #0]
   28d52:	681b      	ldr	r3, [r3, #0]
}
   28d54:	4770      	bx	lr

00028d56 <absolute_time_to_cc>:
}
   28d56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   28d5a:	4770      	bx	lr

00028d5c <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   28d5c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   28d60:	b672      	cpsid	i
}
   28d62:	4770      	bx	lr

00028d64 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   28d64:	f380 8810 	msr	PRIMASK, r0
}
   28d68:	4770      	bx	lr

00028d6a <set_absolute_alarm>:
{
   28d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28d6c:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   28d6e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   28d72:	f7f2 ffe5 	bl	1bd40 <get_comparator>
   28d76:	4607      	mov	r7, r0
   28d78:	e019      	b.n	28dae <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   28d7a:	2013      	movs	r0, #19
   28d7c:	f000 fdc5 	bl	2990a <z_impl_k_busy_wait>
}
   28d80:	e022      	b.n	28dc8 <set_absolute_alarm+0x5e>
		event_clear(chan);
   28d82:	4630      	mov	r0, r6
   28d84:	f7ff ffdb 	bl	28d3e <event_clear>
		event_enable(chan);
   28d88:	4630      	mov	r0, r6
   28d8a:	f7f2 ffe1 	bl	1bd50 <event_enable>
		set_comparator(chan, cc_val);
   28d8e:	4629      	mov	r1, r5
   28d90:	4630      	mov	r0, r6
   28d92:	f7f2 ffcb 	bl	1bd2c <set_comparator>
		now2 = counter();
   28d96:	f7f2 ffef 	bl	1bd78 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   28d9a:	4284      	cmp	r4, r0
   28d9c:	d01e      	beq.n	28ddc <set_absolute_alarm+0x72>
   28d9e:	1c81      	adds	r1, r0, #2
   28da0:	4628      	mov	r0, r5
   28da2:	f7ff ffc8 	bl	28d36 <counter_sub>
	} while ((now2 != now) &&
   28da6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   28daa:	d917      	bls.n	28ddc <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   28dac:	462f      	mov	r7, r5
		now = counter();
   28dae:	f7f2 ffe3 	bl	1bd78 <counter>
   28db2:	4604      	mov	r4, r0
		set_comparator(chan, now);
   28db4:	4601      	mov	r1, r0
   28db6:	4630      	mov	r0, r6
   28db8:	f7f2 ffb8 	bl	1bd2c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   28dbc:	4621      	mov	r1, r4
   28dbe:	4638      	mov	r0, r7
   28dc0:	f7ff ffb9 	bl	28d36 <counter_sub>
   28dc4:	2801      	cmp	r0, #1
   28dc6:	d0d8      	beq.n	28d7a <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   28dc8:	1ca7      	adds	r7, r4, #2
   28dca:	4639      	mov	r1, r7
   28dcc:	4628      	mov	r0, r5
   28dce:	f7ff ffb2 	bl	28d36 <counter_sub>
   28dd2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   28dd6:	d9d4      	bls.n	28d82 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   28dd8:	463d      	mov	r5, r7
   28dda:	e7d2      	b.n	28d82 <set_absolute_alarm+0x18>
}
   28ddc:	4628      	mov	r0, r5
   28dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028de0 <compare_set>:
{
   28de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   28de2:	b083      	sub	sp, #12
   28de4:	4604      	mov	r4, r0
   28de6:	4617      	mov	r7, r2
   28de8:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   28dea:	f7f2 ffcb 	bl	1bd84 <compare_int_lock>
   28dee:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   28df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28df2:	9301      	str	r3, [sp, #4]
   28df4:	9b08      	ldr	r3, [sp, #32]
   28df6:	9300      	str	r3, [sp, #0]
   28df8:	463a      	mov	r2, r7
   28dfa:	462b      	mov	r3, r5
   28dfc:	4620      	mov	r0, r4
   28dfe:	f7f3 f8af 	bl	1bf60 <compare_set_nolocks>
   28e02:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   28e04:	4631      	mov	r1, r6
   28e06:	4620      	mov	r0, r4
   28e08:	f7f3 f820 	bl	1be4c <compare_int_unlock>
}
   28e0c:	4628      	mov	r0, r5
   28e0e:	b003      	add	sp, #12
   28e10:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028e12 <sys_clock_cycle_get_32>:
{
   28e12:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   28e14:	f7f3 f884 	bl	1bf20 <z_nrf_rtc_timer_read>
}
   28e18:	bd08      	pop	{r3, pc}

00028e1a <event_packet_is_discardable>:
	switch (hdr->evt) {
   28e1a:	7803      	ldrb	r3, [r0, #0]
   28e1c:	2b3e      	cmp	r3, #62	; 0x3e
   28e1e:	d003      	beq.n	28e28 <event_packet_is_discardable+0xe>
   28e20:	2bff      	cmp	r3, #255	; 0xff
   28e22:	d008      	beq.n	28e36 <event_packet_is_discardable+0x1c>
   28e24:	2000      	movs	r0, #0
   28e26:	4770      	bx	lr
		switch (me->subevent) {
   28e28:	7883      	ldrb	r3, [r0, #2]
   28e2a:	2b02      	cmp	r3, #2
   28e2c:	d001      	beq.n	28e32 <event_packet_is_discardable+0x18>
			return false;
   28e2e:	2000      	movs	r0, #0
   28e30:	4770      	bx	lr
			return true;
   28e32:	2001      	movs	r0, #1
   28e34:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   28e36:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   28e38:	2b80      	cmp	r3, #128	; 0x80
   28e3a:	d001      	beq.n	28e40 <event_packet_is_discardable+0x26>
			return false;
   28e3c:	2000      	movs	r0, #0
}
   28e3e:	4770      	bx	lr
			return true;
   28e40:	2001      	movs	r0, #1
   28e42:	4770      	bx	lr

00028e44 <hci_driver_send>:
{
   28e44:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   28e46:	8983      	ldrh	r3, [r0, #12]
   28e48:	b183      	cbz	r3, 28e6c <hci_driver_send+0x28>
   28e4a:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   28e4c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   28e4e:	b14b      	cbz	r3, 28e64 <hci_driver_send+0x20>
   28e50:	2b02      	cmp	r3, #2
   28e52:	d10e      	bne.n	28e72 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   28e54:	f7f3 fa24 	bl	1c2a0 <acl_handle>
   28e58:	4605      	mov	r5, r0
	if (!err) {
   28e5a:	b965      	cbnz	r5, 28e76 <hci_driver_send+0x32>
		net_buf_unref(buf);
   28e5c:	4620      	mov	r0, r4
   28e5e:	f7f1 fb95 	bl	1a58c <net_buf_unref>
   28e62:	e008      	b.n	28e76 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   28e64:	f7f3 fa36 	bl	1c2d4 <cmd_handle>
   28e68:	4605      	mov	r5, r0
		break;
   28e6a:	e7f6      	b.n	28e5a <hci_driver_send+0x16>
		return -EINVAL;
   28e6c:	f06f 0515 	mvn.w	r5, #21
   28e70:	e001      	b.n	28e76 <hci_driver_send+0x32>
	switch (type) {
   28e72:	f06f 0515 	mvn.w	r5, #21
}
   28e76:	4628      	mov	r0, r5
   28e78:	bd38      	pop	{r3, r4, r5, pc}

00028e7a <fetch_and_process_hci_evt>:
{
   28e7a:	b538      	push	{r3, r4, r5, lr}
   28e7c:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   28e7e:	f04f 30ff 	mov.w	r0, #4294967295
   28e82:	f04f 31ff 	mov.w	r1, #4294967295
   28e86:	f7f3 f9a5 	bl	1c1d4 <multithreading_lock_acquire>
	if (!errcode) {
   28e8a:	4605      	mov	r5, r0
   28e8c:	b110      	cbz	r0, 28e94 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   28e8e:	b145      	cbz	r5, 28ea2 <fetch_and_process_hci_evt+0x28>
		return false;
   28e90:	2000      	movs	r0, #0
}
   28e92:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   28e94:	4620      	mov	r0, r4
   28e96:	f7f3 fc83 	bl	1c7a0 <hci_internal_evt_get>
   28e9a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   28e9c:	f7f3 f9a4 	bl	1c1e8 <multithreading_lock_release>
   28ea0:	e7f5      	b.n	28e8e <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   28ea2:	4620      	mov	r0, r4
   28ea4:	f7f3 face 	bl	1c444 <event_packet_process>
	return true;
   28ea8:	2001      	movs	r0, #1
   28eaa:	e7f2      	b.n	28e92 <fetch_and_process_hci_evt+0x18>

00028eac <fetch_and_process_acl_data>:
{
   28eac:	b538      	push	{r3, r4, r5, lr}
   28eae:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   28eb0:	f04f 30ff 	mov.w	r0, #4294967295
   28eb4:	f04f 31ff 	mov.w	r1, #4294967295
   28eb8:	f7f3 f98c 	bl	1c1d4 <multithreading_lock_acquire>
	if (!errcode) {
   28ebc:	4605      	mov	r5, r0
   28ebe:	b110      	cbz	r0, 28ec6 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   28ec0:	b145      	cbz	r5, 28ed4 <fetch_and_process_acl_data+0x28>
		return false;
   28ec2:	2000      	movs	r0, #0
}
   28ec4:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   28ec6:	4620      	mov	r0, r4
   28ec8:	f7e3 f90b 	bl	c0e2 <sdc_hci_data_get>
   28ecc:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   28ece:	f7f3 f98b 	bl	1c1e8 <multithreading_lock_release>
   28ed2:	e7f5      	b.n	28ec0 <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   28ed4:	4620      	mov	r0, r4
   28ed6:	f7f3 faed 	bl	1c4b4 <data_packet_process>
	return true;
   28eda:	2001      	movs	r0, #1
   28edc:	e7f2      	b.n	28ec4 <fetch_and_process_acl_data+0x18>

00028ede <configure_supported_features>:
{
   28ede:	b508      	push	{r3, lr}
			err = sdc_support_adv();
   28ee0:	f7da ff32 	bl	3d48 <sdc_support_adv>
			if (err) {
   28ee4:	b948      	cbnz	r0, 28efa <configure_supported_features+0x1c>
		err = sdc_support_slave();
   28ee6:	f7da ff5f 	bl	3da8 <sdc_support_slave>
		if (err) {
   28eea:	b948      	cbnz	r0, 28f00 <configure_supported_features+0x22>
		err = sdc_support_dle();
   28eec:	f7da ff3c 	bl	3d68 <sdc_support_dle>
		if (err) {
   28ef0:	b948      	cbnz	r0, 28f06 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   28ef2:	f7da ff49 	bl	3d88 <sdc_support_le_2m_phy>
		if (err) {
   28ef6:	b948      	cbnz	r0, 28f0c <configure_supported_features+0x2e>
}
   28ef8:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   28efa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28efe:	e7fb      	b.n	28ef8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   28f00:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28f04:	e7f8      	b.n	28ef8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   28f06:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28f0a:	e7f5      	b.n	28ef8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   28f0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28f10:	e7f2      	b.n	28ef8 <configure_supported_features+0x1a>

00028f12 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   28f12:	f242 0344 	movw	r3, #8260	; 0x2044
   28f16:	4298      	cmp	r0, r3
   28f18:	d834      	bhi.n	28f84 <command_generates_command_complete_event+0x72>
   28f1a:	f242 030d 	movw	r3, #8205	; 0x200d
   28f1e:	4298      	cmp	r0, r3
   28f20:	d20b      	bcs.n	28f3a <command_generates_command_complete_event+0x28>
   28f22:	f240 4306 	movw	r3, #1030	; 0x406
   28f26:	4298      	cmp	r0, r3
   28f28:	d02e      	beq.n	28f88 <command_generates_command_complete_event+0x76>
   28f2a:	f240 431d 	movw	r3, #1053	; 0x41d
   28f2e:	4298      	cmp	r0, r3
   28f30:	d001      	beq.n	28f36 <command_generates_command_complete_event+0x24>
		return true;
   28f32:	2001      	movs	r0, #1
   28f34:	4770      	bx	lr
	switch (hci_opcode) {
   28f36:	2000      	movs	r0, #0
   28f38:	4770      	bx	lr
   28f3a:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   28f3e:	380d      	subs	r0, #13
   28f40:	2837      	cmp	r0, #55	; 0x37
   28f42:	d823      	bhi.n	28f8c <command_generates_command_complete_event+0x7a>
   28f44:	e8df f000 	tbb	[pc, r0]
   28f48:	2222221c 	.word	0x2222221c
   28f4c:	221c2222 	.word	0x221c2222
   28f50:	22221c22 	.word	0x22221c22
   28f54:	2222221c 	.word	0x2222221c
   28f58:	22222222 	.word	0x22222222
   28f5c:	22222222 	.word	0x22222222
   28f60:	22222222 	.word	0x22222222
   28f64:	22222222 	.word	0x22222222
   28f68:	22222222 	.word	0x22222222
   28f6c:	22221c22 	.word	0x22221c22
   28f70:	22222222 	.word	0x22222222
   28f74:	22222222 	.word	0x22222222
   28f78:	22222222 	.word	0x22222222
   28f7c:	1c1c2222 	.word	0x1c1c2222
   28f80:	2000      	movs	r0, #0
   28f82:	4770      	bx	lr
		return true;
   28f84:	2001      	movs	r0, #1
   28f86:	4770      	bx	lr
	switch (hci_opcode) {
   28f88:	2000      	movs	r0, #0
   28f8a:	4770      	bx	lr
		return true;
   28f8c:	2001      	movs	r0, #1
}
   28f8e:	4770      	bx	lr

00028f90 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   28f90:	230f      	movs	r3, #15
   28f92:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   28f94:	2304      	movs	r3, #4
   28f96:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   28f98:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   28f9a:	2301      	movs	r3, #1
   28f9c:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   28f9e:	8081      	strh	r1, [r0, #4]
}
   28fa0:	4770      	bx	lr

00028fa2 <encode_command_complete_header>:
{
   28fa2:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   28fa4:	240e      	movs	r4, #14
   28fa6:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   28fa8:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   28faa:	2201      	movs	r2, #1
   28fac:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   28fae:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   28fb2:	7143      	strb	r3, [r0, #5]
}
   28fb4:	bc10      	pop	{r4}
   28fb6:	4770      	bx	lr

00028fb8 <le_read_supported_states>:
	*buf = states1;
   28fb8:	238f      	movs	r3, #143	; 0x8f
   28fba:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   28fbc:	23c0      	movs	r3, #192	; 0xc0
   28fbe:	7103      	strb	r3, [r0, #4]
}
   28fc0:	4770      	bx	lr

00028fc2 <status_param_cmd_put>:
}
   28fc2:	2001      	movs	r0, #1
   28fc4:	4770      	bx	lr

00028fc6 <link_control_cmd_put>:
{
   28fc6:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   28fc8:	7842      	ldrb	r2, [r0, #1]
   28fca:	f810 3b03 	ldrb.w	r3, [r0], #3
   28fce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28fd2:	b21b      	sxth	r3, r3
	switch (opcode)	{
   28fd4:	f240 4206 	movw	r2, #1030	; 0x406
   28fd8:	4293      	cmp	r3, r2
   28fda:	d005      	beq.n	28fe8 <link_control_cmd_put+0x22>
   28fdc:	f240 421d 	movw	r2, #1053	; 0x41d
   28fe0:	4293      	cmp	r3, r2
   28fe2:	d004      	beq.n	28fee <link_control_cmd_put+0x28>
   28fe4:	2001      	movs	r0, #1
}
   28fe6:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   28fe8:	f7e3 f9ae 	bl	c348 <sdc_hci_cmd_lc_disconnect>
   28fec:	e7fb      	b.n	28fe6 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   28fee:	f7e3 f9ad 	bl	c34c <sdc_hci_cmd_lc_read_remote_version_information>
   28ff2:	e7f8      	b.n	28fe6 <link_control_cmd_put+0x20>

00028ff4 <controller_and_baseband_cmd_put>:
{
   28ff4:	b538      	push	{r3, r4, r5, lr}
   28ff6:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   28ff8:	3003      	adds	r0, #3
   28ffa:	7865      	ldrb	r5, [r4, #1]
   28ffc:	7823      	ldrb	r3, [r4, #0]
   28ffe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   29002:	b21b      	sxth	r3, r3
	switch (opcode)	{
   29004:	f640 4463 	movw	r4, #3171	; 0xc63
   29008:	42a3      	cmp	r3, r4
   2900a:	d02c      	beq.n	29066 <controller_and_baseband_cmd_put+0x72>
   2900c:	f101 0106 	add.w	r1, r1, #6
   29010:	dc16      	bgt.n	29040 <controller_and_baseband_cmd_put+0x4c>
   29012:	f640 4403 	movw	r4, #3075	; 0xc03
   29016:	42a3      	cmp	r3, r4
   29018:	d022      	beq.n	29060 <controller_and_baseband_cmd_put+0x6c>
   2901a:	f640 442d 	movw	r4, #3117	; 0xc2d
   2901e:	42a3      	cmp	r3, r4
   29020:	d105      	bne.n	2902e <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   29022:	7813      	ldrb	r3, [r2, #0]
   29024:	3303      	adds	r3, #3
   29026:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   29028:	f7e3 f882 	bl	c130 <sdc_hci_cmd_cb_read_transmit_power_level>
   2902c:	e007      	b.n	2903e <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2902e:	f640 4201 	movw	r2, #3073	; 0xc01
   29032:	4293      	cmp	r3, r2
   29034:	d102      	bne.n	2903c <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   29036:	f7e3 f87d 	bl	c134 <sdc_hci_cmd_cb_set_event_mask>
   2903a:	e000      	b.n	2903e <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2903c:	2001      	movs	r0, #1
}
   2903e:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   29040:	f640 447b 	movw	r4, #3195	; 0xc7b
   29044:	42a3      	cmp	r3, r4
   29046:	d011      	beq.n	2906c <controller_and_baseband_cmd_put+0x78>
   29048:	f640 447c 	movw	r4, #3196	; 0xc7c
   2904c:	42a3      	cmp	r3, r4
   2904e:	d105      	bne.n	2905c <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   29050:	7813      	ldrb	r3, [r2, #0]
   29052:	3302      	adds	r3, #2
   29054:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   29056:	f7e3 f877 	bl	c148 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2905a:	e7f0      	b.n	2903e <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2905c:	2001      	movs	r0, #1
   2905e:	e7ee      	b.n	2903e <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   29060:	f7da ffe8 	bl	4034 <sdc_hci_cmd_cb_reset>
   29064:	e7eb      	b.n	2903e <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   29066:	f7e3 f86a 	bl	c13e <sdc_hci_cmd_cb_set_event_mask_page_2>
   2906a:	e7e8      	b.n	2903e <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   2906c:	7813      	ldrb	r3, [r2, #0]
   2906e:	3304      	adds	r3, #4
   29070:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   29072:	f7e3 f85b 	bl	c12c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   29076:	e7e2      	b.n	2903e <controller_and_baseband_cmd_put+0x4a>

00029078 <supported_commands>:
{
   29078:	b510      	push	{r4, lr}
   2907a:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2907c:	222e      	movs	r2, #46	; 0x2e
   2907e:	2100      	movs	r1, #0
   29080:	f7fd fbde 	bl	26840 <memset>
	cmds->hci_disconnect = 1;
   29084:	7823      	ldrb	r3, [r4, #0]
   29086:	f043 0320 	orr.w	r3, r3, #32
   2908a:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2908c:	78a3      	ldrb	r3, [r4, #2]
   2908e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29092:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   29094:	7963      	ldrb	r3, [r4, #5]
	cmds->hci_reset = 1;
   29096:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   2909a:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2909c:	7aa3      	ldrb	r3, [r4, #10]
   2909e:	f043 0304 	orr.w	r3, r3, #4
   290a2:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   290a4:	7ba3      	ldrb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   290a6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   290aa:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   290ac:	7be3      	ldrb	r3, [r4, #15]
   290ae:	f043 0302 	orr.w	r3, r3, #2
   290b2:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   290b4:	7da3      	ldrb	r3, [r4, #22]
   290b6:	f043 0304 	orr.w	r3, r3, #4
   290ba:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   290bc:	7e63      	ldrb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   290be:	f043 03f7 	orr.w	r3, r3, #247	; 0xf7
   290c2:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   290c4:	7ea3      	ldrb	r3, [r4, #26]
	cmds->hci_le_clear_white_list = 1;
   290c6:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
   290ca:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_white_list = 1;
   290cc:	7ee3      	ldrb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   290ce:	f043 03f3 	orr.w	r3, r3, #243	; 0xf3
   290d2:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_long_term_key_request_reply = 1;
   290d4:	7f23      	ldrb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   290d6:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   290da:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   290dc:	f894 3020 	ldrb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   290e0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   290e4:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   290e8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   290ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   290f0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   290f4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_resolving_list_size = 1;
   290f8:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   290fc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_set_address_resolution_enable = 1;
   29100:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   29104:	f043 03fe 	orr.w	r3, r3, #254	; 0xfe
   29108:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2910c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   29110:	f043 0301 	orr.w	r3, r3, #1
   29114:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   29118:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2911c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29120:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   29124:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   29128:	f043 0304 	orr.w	r3, r3, #4
   2912c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   29130:	bd10      	pop	{r4, pc}

00029132 <supported_features>:
{
   29132:	b510      	push	{r4, lr}
   29134:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   29136:	2208      	movs	r2, #8
   29138:	2100      	movs	r1, #0
   2913a:	f7fd fb81 	bl	26840 <memset>
	features->bdedr_not_supported = 1;
   2913e:	7923      	ldrb	r3, [r4, #4]
	features->le_supported = 1;
   29140:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   29144:	7123      	strb	r3, [r4, #4]
}
   29146:	bd10      	pop	{r4, pc}

00029148 <info_param_cmd_put>:
{
   29148:	b538      	push	{r3, r4, r5, lr}
   2914a:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2914c:	1d88      	adds	r0, r1, #6
   2914e:	7865      	ldrb	r5, [r4, #1]
   29150:	7823      	ldrb	r3, [r4, #0]
   29152:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   29156:	b21b      	sxth	r3, r3
	switch (opcode)	{
   29158:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2915c:	3b01      	subs	r3, #1
   2915e:	2b08      	cmp	r3, #8
   29160:	d820      	bhi.n	291a4 <info_param_cmd_put+0x5c>
   29162:	e8df f003 	tbb	[pc, r3]
   29166:	0b05      	.short	0x0b05
   29168:	1f1f1f12 	.word	0x1f1f1f12
   2916c:	1f1f      	.short	0x1f1f
   2916e:	19          	.byte	0x19
   2916f:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   29170:	7813      	ldrb	r3, [r2, #0]
   29172:	3308      	adds	r3, #8
   29174:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   29176:	f7e3 f89c 	bl	c2b2 <sdc_hci_cmd_ip_read_local_version_information>
   2917a:	e014      	b.n	291a6 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2917c:	7813      	ldrb	r3, [r2, #0]
   2917e:	3340      	adds	r3, #64	; 0x40
   29180:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   29182:	f7ff ff79 	bl	29078 <supported_commands>
		return 0;
   29186:	2000      	movs	r0, #0
   29188:	e00d      	b.n	291a6 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2918a:	7813      	ldrb	r3, [r2, #0]
   2918c:	3308      	adds	r3, #8
   2918e:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   29190:	f7ff ffcf 	bl	29132 <supported_features>
		return 0;
   29194:	2000      	movs	r0, #0
   29196:	e006      	b.n	291a6 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   29198:	7813      	ldrb	r3, [r2, #0]
   2919a:	3306      	adds	r3, #6
   2919c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2919e:	f7e3 f886 	bl	c2ae <sdc_hci_cmd_ip_read_bd_addr>
   291a2:	e000      	b.n	291a6 <info_param_cmd_put+0x5e>
   291a4:	2001      	movs	r0, #1
}
   291a6:	bd38      	pop	{r3, r4, r5, pc}

000291a8 <le_supported_features>:
{
   291a8:	b510      	push	{r4, lr}
   291aa:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   291ac:	2205      	movs	r2, #5
   291ae:	2100      	movs	r1, #0
   291b0:	f7fd fb46 	bl	26840 <memset>
	features->le_encryption = 1;
   291b4:	7823      	ldrb	r3, [r4, #0]
	features->ll_privacy = 1;
   291b6:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   291ba:	7023      	strb	r3, [r4, #0]
	features->le_2m_phy = 1;
   291bc:	7863      	ldrb	r3, [r4, #1]
	features->channel_selection_algorithm_2 = 1;
   291be:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   291c2:	7063      	strb	r3, [r4, #1]
}
   291c4:	bd10      	pop	{r4, pc}

000291c6 <vs_zephyr_supported_commands>:
{
   291c6:	b510      	push	{r4, lr}
   291c8:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   291ca:	2202      	movs	r2, #2
   291cc:	2100      	movs	r1, #0
   291ce:	f7fd fb37 	bl	26840 <memset>
	cmds->read_version_info = 1;
   291d2:	7823      	ldrb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   291d4:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   291d8:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   291da:	7863      	ldrb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   291dc:	f043 0307 	orr.w	r3, r3, #7
   291e0:	7063      	strb	r3, [r4, #1]
}
   291e2:	bd10      	pop	{r4, pc}

000291e4 <vs_supported_commands>:
{
   291e4:	b510      	push	{r4, lr}
   291e6:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   291e8:	2201      	movs	r2, #1
   291ea:	2100      	movs	r1, #0
   291ec:	f7fd fb28 	bl	26840 <memset>
	cmds->read_supported_vs_commands = 1;
   291f0:	7823      	ldrb	r3, [r4, #0]
	cmds->event_length_set = 1;
   291f2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   291f6:	7023      	strb	r3, [r4, #0]
}
   291f8:	bd10      	pop	{r4, pc}

000291fa <le_controller_cmd_put>:
{
   291fa:	b538      	push	{r3, r4, r5, lr}
   291fc:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   291fe:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   29200:	3106      	adds	r1, #6
   29202:	7865      	ldrb	r5, [r4, #1]
   29204:	7823      	ldrb	r3, [r4, #0]
   29206:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2920a:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2920c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   29210:	3b01      	subs	r3, #1
   29212:	2b4d      	cmp	r3, #77	; 0x4d
   29214:	f200 80ce 	bhi.w	293b4 <le_controller_cmd_put+0x1ba>
   29218:	e8df f003 	tbb	[pc, r3]
   2921c:	cc312a27 	.word	0xcc312a27
   29220:	463f3c39 	.word	0x463f3c39
   29224:	cccc4c49 	.word	0xcccc4c49
   29228:	564fcccc 	.word	0x564fcccc
   2922c:	cccc5c59 	.word	0xcccc5c59
   29230:	6e68655f 	.word	0x6e68655f
   29234:	817b75cc 	.word	0x817b75cc
   29238:	cccccccc 	.word	0xcccccccc
   2923c:	968f89cc 	.word	0x968f89cc
   29240:	9c99cccc 	.word	0x9c99cccc
   29244:	cccca29f 	.word	0xcccca29f
   29248:	b6afaca9 	.word	0xb6afaca9
   2924c:	ccccbfbc 	.word	0xccccbfbc
   29250:	cccccccc 	.word	0xcccccccc
   29254:	cccccccc 	.word	0xcccccccc
   29258:	cccccccc 	.word	0xcccccccc
   2925c:	cccccccc 	.word	0xcccccccc
   29260:	cccccccc 	.word	0xcccccccc
   29264:	ccc2cccc 	.word	0xccc2cccc
   29268:	c9cc      	.short	0xc9cc
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2926a:	f7e3 f85c 	bl	c326 <sdc_hci_cmd_le_set_event_mask>
   2926e:	e0a2      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   29270:	7813      	ldrb	r3, [r2, #0]
   29272:	3303      	adds	r3, #3
   29274:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   29276:	4608      	mov	r0, r1
   29278:	f7e3 f833 	bl	c2e2 <sdc_hci_cmd_le_read_buffer_size>
   2927c:	e09b      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2927e:	7813      	ldrb	r3, [r2, #0]
   29280:	3308      	adds	r3, #8
   29282:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   29284:	4608      	mov	r0, r1
   29286:	f7ff ff8f 	bl	291a8 <le_supported_features>
		return 0;
   2928a:	2000      	movs	r0, #0
   2928c:	e093      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2928e:	f7e3 f853 	bl	c338 <sdc_hci_cmd_le_set_random_address>
   29292:	e090      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   29294:	f7e3 f841 	bl	c31a <sdc_hci_cmd_le_set_adv_params>
   29298:	e08d      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   2929a:	7813      	ldrb	r3, [r2, #0]
   2929c:	3301      	adds	r3, #1
   2929e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   292a0:	4608      	mov	r0, r1
   292a2:	f7e3 f81c 	bl	c2de <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   292a6:	e086      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   292a8:	f7e3 f833 	bl	c312 <sdc_hci_cmd_le_set_adv_data>
   292ac:	e083      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   292ae:	f7e3 f847 	bl	c340 <sdc_hci_cmd_le_set_scan_response_data>
   292b2:	e080      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   292b4:	f7e3 f82f 	bl	c316 <sdc_hci_cmd_le_set_adv_enable>
   292b8:	e07d      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   292ba:	7813      	ldrb	r3, [r2, #0]
   292bc:	3301      	adds	r3, #1
   292be:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   292c0:	4608      	mov	r0, r1
   292c2:	f7e3 f81e 	bl	c302 <sdc_hci_cmd_le_read_white_list_size>
   292c6:	e076      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_white_list();
   292c8:	f7e2 fffb 	bl	c2c2 <sdc_hci_cmd_le_clear_white_list>
   292cc:	e073      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   292ce:	f7e2 fff4 	bl	c2ba <sdc_hci_cmd_le_add_device_to_white_list>
   292d2:	e070      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   292d4:	f7e3 f819 	bl	c30a <sdc_hci_cmd_le_remove_device_from_white_list>
   292d8:	e06d      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   292da:	7813      	ldrb	r3, [r2, #0]
   292dc:	3307      	adds	r3, #7
   292de:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   292e0:	f7e3 f801 	bl	c2e6 <sdc_hci_cmd_le_read_channel_map>
   292e4:	e067      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   292e6:	f7e3 f804 	bl	c2f2 <sdc_hci_cmd_le_read_remote_features>
   292ea:	e064      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   292ec:	7813      	ldrb	r3, [r2, #0]
   292ee:	3310      	adds	r3, #16
   292f0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   292f2:	f7e2 ffe8 	bl	c2c6 <sdc_hci_cmd_le_encrypt>
   292f6:	e05e      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   292f8:	7813      	ldrb	r3, [r2, #0]
   292fa:	3308      	adds	r3, #8
   292fc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   292fe:	4608      	mov	r0, r1
   29300:	f7e2 ffeb 	bl	c2da <sdc_hci_cmd_le_rand>
   29304:	e057      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   29306:	7813      	ldrb	r3, [r2, #0]
   29308:	3302      	adds	r3, #2
   2930a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   2930c:	f7e2 ffe1 	bl	c2d2 <sdc_hci_cmd_le_long_term_key_request_reply>
   29310:	e051      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   29312:	7813      	ldrb	r3, [r2, #0]
   29314:	3302      	adds	r3, #2
   29316:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   29318:	f7e2 ffd7 	bl	c2ca <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   2931c:	e04b      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2931e:	7813      	ldrb	r3, [r2, #0]
   29320:	3308      	adds	r3, #8
   29322:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   29324:	4608      	mov	r0, r1
   29326:	f7ff fe47 	bl	28fb8 <le_read_supported_states>
		return 0;
   2932a:	2000      	movs	r0, #0
   2932c:	e043      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2932e:	7813      	ldrb	r3, [r2, #0]
   29330:	3302      	adds	r3, #2
   29332:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   29334:	f7e2 fff3 	bl	c31e <sdc_hci_cmd_le_set_data_length>
   29338:	e03d      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   2933a:	7813      	ldrb	r3, [r2, #0]
   2933c:	3304      	adds	r3, #4
   2933e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   29340:	4608      	mov	r0, r1
   29342:	f7e2 ffda 	bl	c2fa <sdc_hci_cmd_le_read_suggested_default_data_length>
   29346:	e036      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   29348:	f7e2 fffc 	bl	c344 <sdc_hci_cmd_le_write_suggested_default_data_length>
   2934c:	e033      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   2934e:	f7e2 ffb2 	bl	c2b6 <sdc_hci_cmd_le_add_device_to_resolving_list>
   29352:	e030      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   29354:	f7e2 ffd7 	bl	c306 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   29358:	e02d      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_resolving_list();
   2935a:	f7e2 ffb0 	bl	c2be <sdc_hci_cmd_le_clear_resolving_list>
   2935e:	e02a      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   29360:	7813      	ldrb	r3, [r2, #0]
   29362:	3301      	adds	r3, #1
   29364:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   29366:	4608      	mov	r0, r1
   29368:	f7e2 ffc5 	bl	c2f6 <sdc_hci_cmd_le_read_resolving_list_size>
   2936c:	e023      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   2936e:	f7e2 ffce 	bl	c30e <sdc_hci_cmd_le_set_address_resolution_enable>
   29372:	e020      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   29374:	f7e2 ffe2 	bl	c33c <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   29378:	e01d      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2937a:	7813      	ldrb	r3, [r2, #0]
   2937c:	3308      	adds	r3, #8
   2937e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   29380:	4608      	mov	r0, r1
   29382:	f7e2 ffb2 	bl	c2ea <sdc_hci_cmd_le_read_max_data_length>
   29386:	e016      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   29388:	7813      	ldrb	r3, [r2, #0]
   2938a:	3304      	adds	r3, #4
   2938c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2938e:	f7e2 ffae 	bl	c2ee <sdc_hci_cmd_le_read_phy>
   29392:	e010      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   29394:	f7e2 ffc5 	bl	c322 <sdc_hci_cmd_le_set_default_phy>
   29398:	e00d      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2939a:	f7e2 ffc9 	bl	c330 <sdc_hci_cmd_le_set_phy>
   2939e:	e00a      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   293a0:	7813      	ldrb	r3, [r2, #0]
   293a2:	3302      	adds	r3, #2
   293a4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   293a6:	4608      	mov	r0, r1
   293a8:	f7e2 ffa9 	bl	c2fe <sdc_hci_cmd_le_read_transmit_power>
   293ac:	e003      	b.n	293b6 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   293ae:	f7e2 ffc1 	bl	c334 <sdc_hci_cmd_le_set_privacy_mode>
   293b2:	e000      	b.n	293b6 <le_controller_cmd_put+0x1bc>
   293b4:	2001      	movs	r0, #1
}
   293b6:	bd38      	pop	{r3, r4, r5, pc}

000293b8 <vs_cmd_put>:
{
   293b8:	b538      	push	{r3, r4, r5, lr}
   293ba:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   293bc:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   293be:	3106      	adds	r1, #6
   293c0:	7865      	ldrb	r5, [r4, #1]
   293c2:	7823      	ldrb	r3, [r4, #0]
   293c4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   293c8:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   293cc:	42a3      	cmp	r3, r4
   293ce:	d90f      	bls.n	293f0 <vs_cmd_put+0x38>
   293d0:	f64f 5405 	movw	r4, #64773	; 0xfd05
   293d4:	42a3      	cmp	r3, r4
   293d6:	d85b      	bhi.n	29490 <vs_cmd_put+0xd8>
   293d8:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   293dc:	d319      	bcc.n	29412 <vs_cmd_put+0x5a>
   293de:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   293e2:	2b05      	cmp	r3, #5
   293e4:	d850      	bhi.n	29488 <vs_cmd_put+0xd0>
   293e6:	e8df f003 	tbb	[pc, r3]
   293ea:	4038      	.short	0x4038
   293ec:	4c494643 	.word	0x4c494643
   293f0:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   293f4:	d801      	bhi.n	293fa <vs_cmd_put+0x42>
   293f6:	2001      	movs	r0, #1
}
   293f8:	bd38      	pop	{r3, r4, r5, pc}
   293fa:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   293fe:	3b01      	subs	r3, #1
   29400:	2b09      	cmp	r3, #9
   29402:	d843      	bhi.n	2948c <vs_cmd_put+0xd4>
   29404:	e8df f003 	tbb	[pc, r3]
   29408:	42420e07 	.word	0x42420e07
   2940c:	42422642 	.word	0x42422642
   29410:	1f16      	.short	0x1f16
	switch (opcode)	{
   29412:	2001      	movs	r0, #1
   29414:	e7f0      	b.n	293f8 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   29416:	7813      	ldrb	r3, [r2, #0]
   29418:	330c      	adds	r3, #12
   2941a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2941c:	4608      	mov	r0, r1
   2941e:	f7da fe1d 	bl	405c <sdc_hci_cmd_vs_zephyr_read_version_info>
   29422:	e7e9      	b.n	293f8 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   29424:	7813      	ldrb	r3, [r2, #0]
   29426:	3340      	adds	r3, #64	; 0x40
   29428:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   2942a:	4608      	mov	r0, r1
   2942c:	f7ff fecb 	bl	291c6 <vs_zephyr_supported_commands>
		return 0;
   29430:	2000      	movs	r0, #0
   29432:	e7e1      	b.n	293f8 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   29434:	7813      	ldrb	r3, [r2, #0]
   29436:	3301      	adds	r3, #1
   29438:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2943a:	3316      	adds	r3, #22
   2943c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2943e:	4608      	mov	r0, r1
   29440:	f7e2 fee4 	bl	c20c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   29444:	e7d8      	b.n	293f8 <vs_cmd_put+0x40>
		*param_length_out +=
   29446:	7813      	ldrb	r3, [r2, #0]
   29448:	3320      	adds	r3, #32
   2944a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2944c:	4608      	mov	r0, r1
   2944e:	f7e2 fe90 	bl	c172 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   29452:	e7d1      	b.n	293f8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   29454:	f7e2 ff29 	bl	c2aa <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   29458:	e7ce      	b.n	293f8 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2945a:	7813      	ldrb	r3, [r2, #0]
   2945c:	3340      	adds	r3, #64	; 0x40
   2945e:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   29460:	4608      	mov	r0, r1
   29462:	f7ff febf 	bl	291e4 <vs_supported_commands>
		return 0;
   29466:	2000      	movs	r0, #0
   29468:	e7c6      	b.n	293f8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2946a:	f7e2 fe7b 	bl	c164 <sdc_hci_cmd_vs_llpm_mode_set>
   2946e:	e7c3      	b.n	293f8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   29470:	f7e2 fe74 	bl	c15c <sdc_hci_cmd_vs_conn_update>
   29474:	e7c0      	b.n	293f8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   29476:	f7e2 fe69 	bl	c14c <sdc_hci_cmd_vs_conn_event_extend>
   2947a:	e7bd      	b.n	293f8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2947c:	f7e2 fe74 	bl	c168 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   29480:	e7ba      	b.n	293f8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   29482:	f7e2 fe6d 	bl	c160 <sdc_hci_cmd_vs_event_length_set>
   29486:	e7b7      	b.n	293f8 <vs_cmd_put+0x40>
	switch (opcode)	{
   29488:	2001      	movs	r0, #1
   2948a:	e7b5      	b.n	293f8 <vs_cmd_put+0x40>
   2948c:	2001      	movs	r0, #1
   2948e:	e7b3      	b.n	293f8 <vs_cmd_put+0x40>
   29490:	2001      	movs	r0, #1
   29492:	e7b1      	b.n	293f8 <vs_cmd_put+0x40>

00029494 <cmd_put>:
{
   29494:	b570      	push	{r4, r5, r6, lr}
   29496:	b082      	sub	sp, #8
   29498:	460e      	mov	r6, r1
   2949a:	7842      	ldrb	r2, [r0, #1]
   2949c:	7805      	ldrb	r5, [r0, #0]
   2949e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   294a2:	2304      	movs	r3, #4
   294a4:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   294a8:	0893      	lsrs	r3, r2, #2
   294aa:	2a23      	cmp	r2, #35	; 0x23
   294ac:	d80b      	bhi.n	294c6 <cmd_put+0x32>
   294ae:	b21a      	sxth	r2, r3
   294b0:	2a00      	cmp	r2, #0
   294b2:	d03a      	beq.n	2952a <cmd_put+0x96>
   294b4:	3b01      	subs	r3, #1
   294b6:	2b07      	cmp	r3, #7
   294b8:	d839      	bhi.n	2952e <cmd_put+0x9a>
   294ba:	e8df f003 	tbb	[pc, r3]
   294be:	381a      	.short	0x381a
   294c0:	382a241e 	.word	0x382a241e
   294c4:	3038      	.short	0x3038
   294c6:	2b3f      	cmp	r3, #63	; 0x3f
   294c8:	d105      	bne.n	294d6 <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   294ca:	f10d 0207 	add.w	r2, sp, #7
   294ce:	f7ff ff73 	bl	293b8 <vs_cmd_put>
   294d2:	4604      	mov	r4, r0
		break;
   294d4:	e000      	b.n	294d8 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   294d6:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   294d8:	4628      	mov	r0, r5
   294da:	f7ff fd1a 	bl	28f12 <command_generates_command_complete_event>
   294de:	b108      	cbz	r0, 294e4 <cmd_put+0x50>
   294e0:	2c01      	cmp	r4, #1
   294e2:	d126      	bne.n	29532 <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   294e4:	4622      	mov	r2, r4
   294e6:	4629      	mov	r1, r5
   294e8:	4630      	mov	r0, r6
   294ea:	f7ff fd51 	bl	28f90 <encode_command_status>
}
   294ee:	b002      	add	sp, #8
   294f0:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   294f2:	f7ff fd68 	bl	28fc6 <link_control_cmd_put>
   294f6:	4604      	mov	r4, r0
		break;
   294f8:	e7ee      	b.n	294d8 <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   294fa:	f10d 0207 	add.w	r2, sp, #7
   294fe:	f7ff fd79 	bl	28ff4 <controller_and_baseband_cmd_put>
   29502:	4604      	mov	r4, r0
		break;
   29504:	e7e8      	b.n	294d8 <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   29506:	f10d 0207 	add.w	r2, sp, #7
   2950a:	f7ff fe1d 	bl	29148 <info_param_cmd_put>
   2950e:	4604      	mov	r4, r0
		break;
   29510:	e7e2      	b.n	294d8 <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   29512:	f10d 0207 	add.w	r2, sp, #7
   29516:	f7ff fd54 	bl	28fc2 <status_param_cmd_put>
   2951a:	4604      	mov	r4, r0
		break;
   2951c:	e7dc      	b.n	294d8 <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   2951e:	f10d 0207 	add.w	r2, sp, #7
   29522:	f7ff fe6a 	bl	291fa <le_controller_cmd_put>
   29526:	4604      	mov	r4, r0
		break;
   29528:	e7d6      	b.n	294d8 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   2952a:	2401      	movs	r4, #1
   2952c:	e7d4      	b.n	294d8 <cmd_put+0x44>
   2952e:	2401      	movs	r4, #1
   29530:	e7d2      	b.n	294d8 <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   29532:	4623      	mov	r3, r4
   29534:	f89d 2007 	ldrb.w	r2, [sp, #7]
   29538:	4629      	mov	r1, r5
   2953a:	4630      	mov	r0, r6
   2953c:	f7ff fd31 	bl	28fa2 <encode_command_complete_header>
}
   29540:	e7d5      	b.n	294ee <cmd_put+0x5a>

00029542 <m_config_clock_source_get>:
}
   29542:	2001      	movs	r0, #1
   29544:	4770      	bx	lr

00029546 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29546:	4668      	mov	r0, sp
   29548:	f020 0107 	bic.w	r1, r0, #7
   2954c:	468d      	mov	sp, r1
   2954e:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   29550:	f7d9 f964 	bl	281c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   29554:	f7e9 fec4 	bl	132e0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   29558:	f7e9 ffd0 	bl	134fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2955c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29560:	4685      	mov	sp, r0
   29562:	4770      	bx	lr

00029564 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29564:	4668      	mov	r0, sp
   29566:	f020 0107 	bic.w	r1, r0, #7
   2956a:	468d      	mov	sp, r1
   2956c:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2956e:	f7d9 f8d7 	bl	2720 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   29572:	f7e9 feb5 	bl	132e0 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29576:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2957a:	4685      	mov	sp, r0
   2957c:	4770      	bx	lr

0002957e <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2957e:	4668      	mov	r0, sp
   29580:	f020 0107 	bic.w	r1, r0, #7
   29584:	468d      	mov	sp, r1
   29586:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   29588:	f7e2 f897 	bl	b6ba <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2958c:	f7e9 fea8 	bl	132e0 <_arch_isr_direct_pm>
   29590:	f7e9 ffb4 	bl	134fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   29594:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29598:	4685      	mov	sp, r0
   2959a:	4770      	bx	lr

0002959c <nrfx_clock_enable>:
}
   2959c:	4770      	bx	lr

0002959e <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   2959e:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   295a0:	f7d9 fd72 	bl	3088 <MPSL_IRQ_CLOCK_Handler>
}
   295a4:	bd08      	pop	{r3, pc}

000295a6 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   295a6:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   295a8:	f7f9 fc92 	bl	22ed0 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   295ac:	bd08      	pop	{r3, pc}

000295ae <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   295ae:	b510      	push	{r4, lr}
   295b0:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   295b2:	f7e9 fceb 	bl	12f8c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   295b6:	f7e9 fda7 	bl	13108 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   295ba:	4620      	mov	r0, r4
   295bc:	f7ff fff3 	bl	295a6 <hw_cc3xx_init_internal>
	return res;
}
   295c0:	bd10      	pop	{r4, pc}

000295c2 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   295c2:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   295c4:	4780      	blx	r0
}
   295c6:	bd08      	pop	{r3, pc}

000295c8 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   295c8:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   295ca:	f000 f99e 	bl	2990a <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   295ce:	bd08      	pop	{r3, pc}

000295d0 <pin_is_task_output>:
{
   295d0:	b510      	push	{r4, lr}
   295d2:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   295d4:	f7f3 fc0a 	bl	1cdec <pin_is_output>
   295d8:	b128      	cbz	r0, 295e6 <pin_is_task_output+0x16>
   295da:	4620      	mov	r0, r4
   295dc:	f7f3 fbf0 	bl	1cdc0 <pin_in_use_by_te>
   295e0:	b118      	cbz	r0, 295ea <pin_is_task_output+0x1a>
   295e2:	2001      	movs	r0, #1
   295e4:	e000      	b.n	295e8 <pin_is_task_output+0x18>
   295e6:	2000      	movs	r0, #0
}
   295e8:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   295ea:	2000      	movs	r0, #0
   295ec:	e7fc      	b.n	295e8 <pin_is_task_output+0x18>

000295ee <pin_is_input>:
{
   295ee:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   295f0:	f7f3 fbfc 	bl	1cdec <pin_is_output>
   295f4:	f080 0001 	eor.w	r0, r0, #1
}
   295f8:	b2c0      	uxtb	r0, r0
   295fa:	bd08      	pop	{r3, pc}

000295fc <gpiote_polarity_to_trigger>:
}
   295fc:	4770      	bx	lr

000295fe <gpiote_trigger_to_polarity>:
}
   295fe:	4770      	bx	lr

00029600 <is_level>:
}
   29600:	2803      	cmp	r0, #3
   29602:	bf94      	ite	ls
   29604:	2000      	movls	r0, #0
   29606:	2001      	movhi	r0, #1
   29608:	4770      	bx	lr

0002960a <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2960a:	b148      	cbz	r0, 29620 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2960c:	68c3      	ldr	r3, [r0, #12]
   2960e:	8818      	ldrh	r0, [r3, #0]
   29610:	f3c0 0008 	ubfx	r0, r0, #0, #9
   29614:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   29618:	bf14      	ite	ne
   2961a:	2000      	movne	r0, #0
   2961c:	2001      	moveq	r0, #1
   2961e:	4770      	bx	lr
		return false;
   29620:	2000      	movs	r0, #0
}
   29622:	4770      	bx	lr

00029624 <k_heap_init>:
{
   29624:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   29626:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   2962a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2962c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   2962e:	f7e7 f8e5 	bl	107fc <sys_heap_init>
}
   29632:	bd10      	pop	{r4, pc}

00029634 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   29634:	6902      	ldr	r2, [r0, #16]
   29636:	6943      	ldr	r3, [r0, #20]
   29638:	431a      	orrs	r2, r3
   2963a:	f012 0203 	ands.w	r2, r2, #3
   2963e:	d10d      	bne.n	2965c <create_free_list+0x28>
	slab->free_list = NULL;
   29640:	2100      	movs	r1, #0
   29642:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   29644:	e005      	b.n	29652 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   29646:	6981      	ldr	r1, [r0, #24]
   29648:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2964a:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   2964c:	6901      	ldr	r1, [r0, #16]
   2964e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   29650:	3201      	adds	r2, #1
   29652:	68c1      	ldr	r1, [r0, #12]
   29654:	4291      	cmp	r1, r2
   29656:	d8f6      	bhi.n	29646 <create_free_list+0x12>
	return 0;
   29658:	2000      	movs	r0, #0
   2965a:	4770      	bx	lr
		return -EINVAL;
   2965c:	f06f 0015 	mvn.w	r0, #21
}
   29660:	4770      	bx	lr

00029662 <k_mem_slab_init>:
{
   29662:	b510      	push	{r4, lr}
   29664:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   29666:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   29668:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   2966a:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   2966c:	2300      	movs	r3, #0
   2966e:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   29670:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
   29672:	f7ff ffdf 	bl	29634 <create_free_list>
	if (rc < 0) {
   29676:	2800      	cmp	r0, #0
   29678:	db01      	blt.n	2967e <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   2967a:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   2967c:	6064      	str	r4, [r4, #4]
}
   2967e:	bd10      	pop	{r4, pc}

00029680 <setup_thread_stack>:
{
   29680:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   29682:	3207      	adds	r2, #7
   29684:	f022 0207 	bic.w	r2, r2, #7
   29688:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2968c:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   29690:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   29694:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   29698:	2200      	movs	r2, #0
   2969a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   2969e:	18c8      	adds	r0, r1, r3
   296a0:	bc10      	pop	{r4}
   296a2:	4770      	bx	lr

000296a4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   296a4:	f3ef 8005 	mrs	r0, IPSR
}
   296a8:	3800      	subs	r0, #0
   296aa:	bf18      	it	ne
   296ac:	2001      	movne	r0, #1
   296ae:	4770      	bx	lr

000296b0 <k_thread_name_get>:
}
   296b0:	3078      	adds	r0, #120	; 0x78
   296b2:	4770      	bx	lr

000296b4 <z_impl_k_thread_start>:
{
   296b4:	b508      	push	{r3, lr}
	z_sched_start(thread);
   296b6:	f7f7 f88f 	bl	207d8 <z_sched_start>
}
   296ba:	bd08      	pop	{r3, pc}

000296bc <z_init_thread_base>:
{
   296bc:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   296be:	2400      	movs	r4, #0
   296c0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   296c2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   296c4:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   296c6:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   296c8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   296ca:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   296cc:	61c4      	str	r4, [r0, #28]
}
   296ce:	bc10      	pop	{r4}
   296d0:	4770      	bx	lr

000296d2 <z_pm_save_idle_exit>:
{
   296d2:	b508      	push	{r3, lr}
	pm_system_resume();
   296d4:	f7e8 febe 	bl	12454 <pm_system_resume>
	sys_clock_idle_exit();
   296d8:	f7ff fb2c 	bl	28d34 <sys_clock_idle_exit>
}
   296dc:	bd08      	pop	{r3, pc}

000296de <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   296de:	4288      	cmp	r0, r1
   296e0:	da00      	bge.n	296e4 <new_prio_for_inheritance+0x6>
   296e2:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   296e4:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   296e8:	db01      	blt.n	296ee <new_prio_for_inheritance+0x10>
   296ea:	4608      	mov	r0, r1
   296ec:	4770      	bx	lr
   296ee:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   296f2:	4770      	bx	lr

000296f4 <adjust_owner_prio>:
{
   296f4:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   296f6:	6880      	ldr	r0, [r0, #8]
   296f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   296fc:	428b      	cmp	r3, r1
   296fe:	d101      	bne.n	29704 <adjust_owner_prio+0x10>
	return false;
   29700:	2000      	movs	r0, #0
}
   29702:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   29704:	f7f7 fa1a 	bl	20b3c <z_set_prio>
   29708:	e7fb      	b.n	29702 <adjust_owner_prio+0xe>

0002970a <z_impl_k_mutex_init>:
{
   2970a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2970c:	2000      	movs	r0, #0
   2970e:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   29710:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   29712:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   29714:	605b      	str	r3, [r3, #4]
}
   29716:	4770      	bx	lr

00029718 <prepare_thread_to_run>:
{
   29718:	b508      	push	{r3, lr}
   2971a:	2200      	movs	r2, #0
   2971c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   29720:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   29722:	f7f7 f803 	bl	2072c <z_ready_thread>
}
   29726:	bd08      	pop	{r3, pc}

00029728 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   29728:	b160      	cbz	r0, 29744 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2972a:	6803      	ldr	r3, [r0, #0]
   2972c:	f013 0f03 	tst.w	r3, #3
   29730:	d008      	beq.n	29744 <z_queue_node_peek+0x1c>
{
   29732:	b510      	push	{r4, lr}
		ret = anode->data;
   29734:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   29736:	b909      	cbnz	r1, 2973c <z_queue_node_peek+0x14>
		ret = anode->data;
   29738:	4620      	mov	r0, r4
}
   2973a:	bd10      	pop	{r4, pc}
			k_free(anode);
   2973c:	f000 f98d 	bl	29a5a <k_free>
		ret = anode->data;
   29740:	4620      	mov	r0, r4
   29742:	e7fa      	b.n	2973a <z_queue_node_peek+0x12>
}
   29744:	4770      	bx	lr

00029746 <z_impl_k_queue_init>:
	list->head = NULL;
   29746:	2300      	movs	r3, #0
   29748:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2974a:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
   2974c:	6083      	str	r3, [r0, #8]
   2974e:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
   29752:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   29754:	6103      	str	r3, [r0, #16]
	sys_dlist_init(&queue->poll_events);
   29756:	f100 0314 	add.w	r3, r0, #20
	list->head = (sys_dnode_t *)list;
   2975a:	6143      	str	r3, [r0, #20]
	list->tail = (sys_dnode_t *)list;
   2975c:	6183      	str	r3, [r0, #24]
}
   2975e:	4770      	bx	lr

00029760 <k_queue_append>:
{
   29760:	b500      	push	{lr}
   29762:	b083      	sub	sp, #12
   29764:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   29766:	2301      	movs	r3, #1
   29768:	9300      	str	r3, [sp, #0]
   2976a:	2300      	movs	r3, #0
   2976c:	4619      	mov	r1, r3
   2976e:	f7f5 fbb1 	bl	1eed4 <queue_insert>
}
   29772:	b003      	add	sp, #12
   29774:	f85d fb04 	ldr.w	pc, [sp], #4

00029778 <k_queue_prepend>:
{
   29778:	b500      	push	{lr}
   2977a:	b083      	sub	sp, #12
   2977c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2977e:	2100      	movs	r1, #0
   29780:	9100      	str	r1, [sp, #0]
   29782:	460b      	mov	r3, r1
   29784:	f7f5 fba6 	bl	1eed4 <queue_insert>
}
   29788:	b003      	add	sp, #12
   2978a:	f85d fb04 	ldr.w	pc, [sp], #4

0002978e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2978e:	b15a      	cbz	r2, 297a8 <z_impl_k_sem_init+0x1a>
   29790:	428a      	cmp	r2, r1
   29792:	d30c      	bcc.n	297ae <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   29794:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   29796:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   29798:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2979a:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2979c:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   297a0:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   297a2:	6143      	str	r3, [r0, #20]
	return 0;
   297a4:	2000      	movs	r0, #0
   297a6:	4770      	bx	lr
		return -EINVAL;
   297a8:	f06f 0015 	mvn.w	r0, #21
   297ac:	4770      	bx	lr
   297ae:	f06f 0015 	mvn.w	r0, #21
}
   297b2:	4770      	bx	lr

000297b4 <cancel_async_locked>:
{
   297b4:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   297b6:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   297b8:	f012 0f02 	tst.w	r2, #2
   297bc:	d009      	beq.n	297d2 <cancel_async_locked+0x1e>
	return *flagp;
   297be:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   297c0:	f012 000f 	ands.w	r0, r2, #15
   297c4:	d037      	beq.n	29836 <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   297c6:	f042 0202 	orr.w	r2, r2, #2
   297ca:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   297cc:	f002 000f 	and.w	r0, r2, #15
	return ret;
   297d0:	4770      	bx	lr
{
   297d2:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   297d4:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   297d6:	f022 0104 	bic.w	r1, r2, #4
   297da:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   297dc:	f012 0f04 	tst.w	r2, #4
   297e0:	d011      	beq.n	29806 <cancel_async_locked+0x52>
   297e2:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   297e6:	2100      	movs	r1, #0
   297e8:	b16a      	cbz	r2, 29806 <cancel_async_locked+0x52>
   297ea:	4290      	cmp	r0, r2
   297ec:	d002      	beq.n	297f4 <cancel_async_locked+0x40>
   297ee:	4611      	mov	r1, r2
   297f0:	6812      	ldr	r2, [r2, #0]
   297f2:	e7f9      	b.n	297e8 <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   297f4:	b191      	cbz	r1, 2981c <cancel_async_locked+0x68>
	return node->next;
   297f6:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   297f8:	600a      	str	r2, [r1, #0]
	return list->tail;
   297fa:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   297fe:	4293      	cmp	r3, r2
   29800:	d016      	beq.n	29830 <cancel_async_locked+0x7c>
	parent->next = child;
   29802:	2200      	movs	r2, #0
   29804:	601a      	str	r2, [r3, #0]
	return *flagp;
   29806:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   29808:	f012 000f 	ands.w	r0, r2, #15
   2980c:	d004      	beq.n	29818 <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   2980e:	f042 0202 	orr.w	r2, r2, #2
   29812:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   29814:	f002 000f 	and.w	r0, r2, #15
}
   29818:	bc10      	pop	{r4}
   2981a:	4770      	bx	lr
	return node->next;
   2981c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   2981e:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   29822:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   29826:	428b      	cmp	r3, r1
   29828:	d1eb      	bne.n	29802 <cancel_async_locked+0x4e>
	list->tail = node;
   2982a:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   2982e:	e7e8      	b.n	29802 <cancel_async_locked+0x4e>
	list->tail = node;
   29830:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   29834:	e7e5      	b.n	29802 <cancel_async_locked+0x4e>
   29836:	4770      	bx	lr

00029838 <cancel_delayable_async_locked>:
{
   29838:	b510      	push	{r4, lr}
   2983a:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2983c:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2983e:	f023 0208 	bic.w	r2, r3, #8
   29842:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29844:	f013 0f08 	tst.w	r3, #8
   29848:	d103      	bne.n	29852 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   2984a:	4620      	mov	r0, r4
   2984c:	f7ff ffb2 	bl	297b4 <cancel_async_locked>
}
   29850:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   29852:	3010      	adds	r0, #16
   29854:	f7f8 f8a8 	bl	219a8 <z_abort_timeout>
		ret = true;
   29858:	e7f7      	b.n	2984a <cancel_delayable_async_locked+0x12>

0002985a <thread_active_elsewhere>:
}
   2985a:	2000      	movs	r0, #0
   2985c:	4770      	bx	lr

0002985e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2985e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   29862:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   29866:	4283      	cmp	r3, r0
   29868:	d001      	beq.n	2986e <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2986a:	1ac0      	subs	r0, r0, r3
   2986c:	4770      	bx	lr
	return 0;
   2986e:	2000      	movs	r0, #0
}
   29870:	4770      	bx	lr

00029872 <z_reschedule_irqlock>:
{
   29872:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29874:	4603      	mov	r3, r0
   29876:	b920      	cbnz	r0, 29882 <z_reschedule_irqlock+0x10>
   29878:	f3ef 8205 	mrs	r2, IPSR
   2987c:	b942      	cbnz	r2, 29890 <z_reschedule_irqlock+0x1e>
   2987e:	2201      	movs	r2, #1
   29880:	e000      	b.n	29884 <z_reschedule_irqlock+0x12>
   29882:	2200      	movs	r2, #0
	if (resched(key)) {
   29884:	b932      	cbnz	r2, 29894 <z_reschedule_irqlock+0x22>
   29886:	f383 8811 	msr	BASEPRI, r3
   2988a:	f3bf 8f6f 	isb	sy
}
   2988e:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29890:	2200      	movs	r2, #0
   29892:	e7f7      	b.n	29884 <z_reschedule_irqlock+0x12>
   29894:	4618      	mov	r0, r3
   29896:	f7e9 fd53 	bl	13340 <arch_swap>
	return ret;
   2989a:	e7f8      	b.n	2988e <z_reschedule_irqlock+0x1c>

0002989c <z_priq_dumb_best>:
{
   2989c:	4603      	mov	r3, r0
	return list->head == list;
   2989e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   298a0:	4283      	cmp	r3, r0
   298a2:	d000      	beq.n	298a6 <z_priq_dumb_best+0xa>
}
   298a4:	4770      	bx	lr
	struct k_thread *thread = NULL;
   298a6:	2000      	movs	r0, #0
	return thread;
   298a8:	e7fc      	b.n	298a4 <z_priq_dumb_best+0x8>

000298aa <z_unpend_all>:
{
   298aa:	b538      	push	{r3, r4, r5, lr}
   298ac:	4605      	mov	r5, r0
	int need_sched = 0;
   298ae:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   298b0:	e006      	b.n	298c0 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   298b2:	4620      	mov	r0, r4
   298b4:	f7f6 fd4e 	bl	20354 <z_unpend_thread>
		z_ready_thread(thread);
   298b8:	4620      	mov	r0, r4
   298ba:	f7f6 ff37 	bl	2072c <z_ready_thread>
		need_sched = 1;
   298be:	2001      	movs	r0, #1
	return list->head == list;
   298c0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   298c2:	42a5      	cmp	r5, r4
   298c4:	d001      	beq.n	298ca <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   298c6:	2c00      	cmp	r4, #0
   298c8:	d1f3      	bne.n	298b2 <z_unpend_all+0x8>
}
   298ca:	bd38      	pop	{r3, r4, r5, pc}

000298cc <init_ready_q>:
	sys_dlist_init(&rq->runq);
   298cc:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   298ce:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   298d0:	6083      	str	r3, [r0, #8]
}
   298d2:	4770      	bx	lr

000298d4 <remove_timeout>:
{
   298d4:	b538      	push	{r3, r4, r5, lr}
   298d6:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   298d8:	f7f7 ff2c 	bl	21734 <next>
   298dc:	b148      	cbz	r0, 298f2 <remove_timeout+0x1e>
   298de:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   298e0:	6920      	ldr	r0, [r4, #16]
   298e2:	6965      	ldr	r5, [r4, #20]
   298e4:	6913      	ldr	r3, [r2, #16]
   298e6:	6951      	ldr	r1, [r2, #20]
   298e8:	181b      	adds	r3, r3, r0
   298ea:	eb45 0101 	adc.w	r1, r5, r1
   298ee:	6113      	str	r3, [r2, #16]
   298f0:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   298f2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   298f4:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   298f6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   298f8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   298fa:	2300      	movs	r3, #0
   298fc:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   298fe:	6063      	str	r3, [r4, #4]
}
   29900:	bd38      	pop	{r3, r4, r5, pc}

00029902 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   29902:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   29904:	f7f8 fa2a 	bl	21d5c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   29908:	bd08      	pop	{r3, pc}

0002990a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2990a:	b900      	cbnz	r0, 2990e <z_impl_k_busy_wait+0x4>
   2990c:	4770      	bx	lr
{
   2990e:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   29910:	f7ea fc7c 	bl	1420c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   29914:	bd08      	pop	{r3, pc}

00029916 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   29916:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29918:	f1b1 3fff 	cmp.w	r1, #4294967295
   2991c:	bf08      	it	eq
   2991e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   29922:	d024      	beq.n	2996e <sys_clock_timeout_end_calc+0x58>
   29924:	4604      	mov	r4, r0
   29926:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   29928:	ea54 0105 	orrs.w	r1, r4, r5
   2992c:	d00d      	beq.n	2994a <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2992e:	f06f 0101 	mvn.w	r1, #1
   29932:	1a0a      	subs	r2, r1, r0
   29934:	f04f 31ff 	mov.w	r1, #4294967295
   29938:	eb61 0305 	sbc.w	r3, r1, r5
   2993c:	2a00      	cmp	r2, #0
   2993e:	f173 0100 	sbcs.w	r1, r3, #0
   29942:	db05      	blt.n	29950 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   29944:	4610      	mov	r0, r2
   29946:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   29948:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   2994a:	f7f8 fa07 	bl	21d5c <sys_clock_tick_get>
   2994e:	e7fb      	b.n	29948 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   29950:	f7f8 fa04 	bl	21d5c <sys_clock_tick_get>
   29954:	4623      	mov	r3, r4
   29956:	462a      	mov	r2, r5
   29958:	2c01      	cmp	r4, #1
   2995a:	f175 0400 	sbcs.w	r4, r5, #0
   2995e:	db03      	blt.n	29968 <sys_clock_timeout_end_calc+0x52>
   29960:	18c0      	adds	r0, r0, r3
   29962:	eb42 0101 	adc.w	r1, r2, r1
   29966:	e7ef      	b.n	29948 <sys_clock_timeout_end_calc+0x32>
   29968:	2301      	movs	r3, #1
   2996a:	2200      	movs	r2, #0
   2996c:	e7f8      	b.n	29960 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   2996e:	f04f 30ff 	mov.w	r0, #4294967295
   29972:	4601      	mov	r1, r0
   29974:	e7e8      	b.n	29948 <sys_clock_timeout_end_calc+0x32>

00029976 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   29976:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   29978:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   2997a:	2300      	movs	r3, #0
   2997c:	6303      	str	r3, [r0, #48]	; 0x30
   2997e:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   29982:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   29984:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   29986:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   29988:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   2998a:	6343      	str	r3, [r0, #52]	; 0x34
}
   2998c:	4770      	bx	lr

0002998e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2998e:	b510      	push	{r4, lr}
   29990:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   29992:	f7f8 f809 	bl	219a8 <z_abort_timeout>

	if (inactive) {
   29996:	b9a0      	cbnz	r0, 299c2 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   29998:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2999a:	b10b      	cbz	r3, 299a0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2999c:	4620      	mov	r0, r4
   2999e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   299a0:	f104 0018 	add.w	r0, r4, #24
   299a4:	f7f7 fad8 	bl	20f58 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   299a8:	b158      	cbz	r0, 299c2 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   299aa:	f7f6 febf 	bl	2072c <z_ready_thread>
	__asm__ volatile(
   299ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   299b2:	f3ef 8011 	mrs	r0, BASEPRI
   299b6:	f383 8812 	msr	BASEPRI_MAX, r3
   299ba:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   299be:	f7ff ff58 	bl	29872 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   299c2:	bd10      	pop	{r4, pc}

000299c4 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   299c4:	b108      	cbz	r0, 299ca <poller_thread+0x6>
   299c6:	3860      	subs	r0, #96	; 0x60
   299c8:	4770      	bx	lr
}
   299ca:	4770      	bx	lr

000299cc <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   299cc:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   299ce:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   299d0:	7823      	ldrb	r3, [r4, #0]
   299d2:	b173      	cbz	r3, 299f2 <signal_triggered_work+0x26>
   299d4:	f854 5c04 	ldr.w	r5, [r4, #-4]
   299d8:	b15d      	cbz	r5, 299f2 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   299da:	f1a4 0614 	sub.w	r6, r4, #20
   299de:	f104 0014 	add.w	r0, r4, #20
   299e2:	f7f7 ffe1 	bl	219a8 <z_abort_timeout>
		twork->poll_result = 0;
   299e6:	2300      	movs	r3, #0
   299e8:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   299ea:	4631      	mov	r1, r6
   299ec:	4628      	mov	r0, r5
   299ee:	f7f5 ff7b 	bl	1f8e8 <k_work_submit_to_queue>
	}

	return 0;
}
   299f2:	2000      	movs	r0, #0
   299f4:	bd70      	pop	{r4, r5, r6, pc}

000299f6 <signal_poll_event>:
{
   299f6:	b570      	push	{r4, r5, r6, lr}
   299f8:	4604      	mov	r4, r0
   299fa:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   299fc:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   299fe:	b1d6      	cbz	r6, 29a36 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   29a00:	7873      	ldrb	r3, [r6, #1]
   29a02:	2b01      	cmp	r3, #1
   29a04:	d00d      	beq.n	29a22 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   29a06:	2b02      	cmp	r3, #2
   29a08:	d012      	beq.n	29a30 <signal_poll_event+0x3a>
		poller->is_polling = false;
   29a0a:	2000      	movs	r0, #0
   29a0c:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   29a0e:	2300      	movs	r3, #0
   29a10:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   29a12:	68e3      	ldr	r3, [r4, #12]
   29a14:	f3c3 3145 	ubfx	r1, r3, #13, #6
   29a18:	430d      	orrs	r5, r1
   29a1a:	f365 3352 	bfi	r3, r5, #13, #6
   29a1e:	60e3      	str	r3, [r4, #12]
}
   29a20:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   29a22:	f7f8 fb2d 	bl	22080 <signal_poller>
		poller->is_polling = false;
   29a26:	2300      	movs	r3, #0
   29a28:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   29a2a:	4298      	cmp	r0, r3
   29a2c:	daef      	bge.n	29a0e <signal_poll_event+0x18>
   29a2e:	e7f7      	b.n	29a20 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   29a30:	f7ff ffcc 	bl	299cc <signal_triggered_work>
   29a34:	e7f7      	b.n	29a26 <signal_poll_event+0x30>
	int retcode = 0;
   29a36:	2000      	movs	r0, #0
   29a38:	e7e9      	b.n	29a0e <signal_poll_event+0x18>

00029a3a <z_handle_obj_poll_events>:
{
   29a3a:	b508      	push	{r3, lr}
   29a3c:	4603      	mov	r3, r0
	return list->head == list;
   29a3e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   29a40:	4283      	cmp	r3, r0
   29a42:	d009      	beq.n	29a58 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   29a44:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   29a46:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   29a48:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29a4a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29a4c:	2300      	movs	r3, #0
   29a4e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   29a50:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   29a52:	b108      	cbz	r0, 29a58 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   29a54:	f7ff ffcf 	bl	299f6 <signal_poll_event>
}
   29a58:	bd08      	pop	{r3, pc}

00029a5a <k_free>:
	if (ptr != NULL) {
   29a5a:	b130      	cbz	r0, 29a6a <k_free+0x10>
{
   29a5c:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   29a5e:	1f01      	subs	r1, r0, #4
   29a60:	f850 0c04 	ldr.w	r0, [r0, #-4]
   29a64:	f7f4 fc7e 	bl	1e364 <k_heap_free>
}
   29a68:	bd08      	pop	{r3, pc}
   29a6a:	4770      	bx	lr

00029a6c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   29a6c:	4770      	bx	lr
	...

00029a70 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   29a70:	f7f3 b880 	b.w	1cb74 <SystemInit>
